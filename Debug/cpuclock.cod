; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\system\cpuclock.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?ls_tsc1@@3IA					; ls_tsc1
PUBLIC	?ms_tsc1@@3IA					; ms_tsc1
PUBLIC	?ls_tsc2@@3IA					; ls_tsc2
PUBLIC	?ms_tsc2@@3IA					; ms_tsc2
_BSS	SEGMENT
?ls_tsc1@@3IA DD 01H DUP (?)				; ls_tsc1
?ms_tsc1@@3IA DD 01H DUP (?)				; ms_tsc1
?ls_tsc2@@3IA DD 01H DUP (?)				; ls_tsc2
?ms_tsc2@@3IA DD 01H DUP (?)				; ms_tsc2
_BSS	ENDS
PUBLIC	?get_cpu_clock_count@@YGNXZ			; get_cpu_clock_count
PUBLIC	__real@41f0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+09
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\cpuclock.c
;	COMDAT ?get_cpu_clock_count@@YGNXZ
_TEXT	SEGMENT
tv128 = -88						; size = 8
tv90 = -88						; size = 4
tv80 = -88						; size = 4
tv85 = -84						; size = 4
tv75 = -84						; size = 4
_t2$ = -16						; size = 8
_t1$ = -8						; size = 8
?get_cpu_clock_count@@YGNXZ PROC			; get_cpu_clock_count, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 85   : 	double
; 86   : 		t1,
; 87   : 		t2;
; 88   : 
; 89   : 	t1 = (double) ms_tsc1 * 4294967296.0 + (double) ls_tsc1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_tsc1@@3IA ; ms_tsc1
  0000e	89 45 ac	 mov	 DWORD PTR tv75[ebp], eax
  00011	f2 0f 2a 45 ac	 cvtsi2sd xmm0, DWORD PTR tv75[ebp]
  00016	8b 4d ac	 mov	 ecx, DWORD PTR tv75[ebp]
  00019	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0001c	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00025	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@41f0000000000000
  0002d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ls_tsc1@@3IA ; ls_tsc1
  00033	89 55 a8	 mov	 DWORD PTR tv80[ebp], edx
  00036	f2 0f 2a 4d a8	 cvtsi2sd xmm1, DWORD PTR tv80[ebp]
  0003b	8b 45 a8	 mov	 eax, DWORD PTR tv80[ebp]
  0003e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00041	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0004a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0004e	f2 0f 11 45 f8	 movsd	 QWORD PTR _t1$[ebp], xmm0

; 90   : 
; 91   : 	t2 = (double) ms_tsc2 * 4294967296.0 + (double) ls_tsc2;

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_tsc2@@3IA ; ms_tsc2
  00058	89 45 ac	 mov	 DWORD PTR tv85[ebp], eax
  0005b	f2 0f 2a 45 ac	 cvtsi2sd xmm0, DWORD PTR tv85[ebp]
  00060	8b 4d ac	 mov	 ecx, DWORD PTR tv85[ebp]
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  0006f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@41f0000000000000
  00077	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ls_tsc2@@3IA ; ls_tsc2
  0007d	89 55 a8	 mov	 DWORD PTR tv90[ebp], edx
  00080	f2 0f 2a 4d a8	 cvtsi2sd xmm1, DWORD PTR tv90[ebp]
  00085	8b 45 a8	 mov	 eax, DWORD PTR tv90[ebp]
  00088	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008b	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00094	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00098	f2 0f 11 45 f0	 movsd	 QWORD PTR _t2$[ebp], xmm0

; 92   : 
; 93   : 	return (t2 - t1);

  0009d	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _t2$[ebp]
  000a2	f2 0f 5c 45 f8	 subsd	 xmm0, QWORD PTR _t1$[ebp]
  000a7	f2 0f 11 45 a8	 movsd	 QWORD PTR tv128[ebp], xmm0
  000ac	dd 45 a8	 fld	 QWORD PTR tv128[ebp]

; 94   : }

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
?get_cpu_clock_count@@YGNXZ ENDP			; get_cpu_clock_count
_TEXT	ENDS
END
