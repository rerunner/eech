; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dline.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?polyline_headers@@3PAUPOLYLINE_HEADER@@A	; polyline_headers
PUBLIC	?polyline_points@@3PAUPOLYLINE_POINT@@A		; polyline_points
PUBLIC	?number_of_3d_polylines@@3HA			; number_of_3d_polylines
PUBLIC	?number_of_3d_polyline_points@@3HA		; number_of_3d_polyline_points
_BSS	SEGMENT
?polyline_headers@@3PAUPOLYLINE_HEADER@@A DB 03000H DUP (?) ; polyline_headers
?polyline_points@@3PAUPOLYLINE_POINT@@A DB 026020H DUP (?) ; polyline_points
?number_of_3d_polylines@@3HA DD 01H DUP (?)		; number_of_3d_polylines
?number_of_3d_polyline_points@@3HA DD 01H DUP (?)	; number_of_3d_polyline_points
_BSS	ENDS
PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?reset_3d_polylines@@YGXXZ			; reset_3d_polylines
PUBLIC	?insert_3d_line_into_3d_scene@@YGHUREAL_COLOUR@@PAUVEC3D@@1@Z ; insert_3d_line_into_3d_scene
PUBLIC	?insert_3d_polyline_into_3d_scene@@YGHHUREAL_COLOUR@@PAUVEC3D@@@Z ; insert_3d_polyline_into_3d_scene
PUBLIC	?insert_zbiased_polyline_into_3d_scene@@YGHHMHUREAL_COLOUR@@PAUVEC3D@@@Z ; insert_zbiased_polyline_into_3d_scene
PUBLIC	?draw_3d_polyline@@YGXPAUOBJECT_3D_POLYLINE@@@Z	; draw_3d_polyline
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4b40005a
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_any_3d_vector
EXTRN	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z:PROC	; clip_3d_polygon
EXTRN	?get_fog_distance_value@@YGMM@Z:PROC		; get_fog_distance_value
EXTRN	?set_d3d_fog_face_intensity@@YGXH@Z:PROC	; set_d3d_fog_face_intensity
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?draw_wbuffered_plain_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z:PROC ; draw_wbuffered_plain_line
EXTRN	?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ:PROC ; get_3d_scene_slot
EXTRN	?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; insert_high_zbuffered_scene_slot_into_3d_scene
EXTRN	?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; insert_low_zbuffered_scene_slot_into_3d_scene
EXTRN	?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z:PROC ; hither_clip_3d_polygon
EXTRN	?float_value_zero@@3MB:DWORD			; float_value_zero
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?middle_scene_slot_height@@3MA:DWORD		; middle_scene_slot_height
EXTRN	?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A:BYTE	; ambient_3d_light
EXTRN	?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A:DWORD ; current_3d_lights
EXTRN	?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A:DWORD ; exclusive_3d_instance
EXTRN	__fltused:DWORD
;	COMDAT __real@4b40005a
CONST	SEGMENT
__real@4b40005a DD 04b40005ar			; 1.2583e+07
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dline.c
;	COMDAT ?transform_3d_polyline_points@@YGHHPAUVEC3D@@PAUPOLYLINE_POINT@@@Z
_TEXT	SEGMENT
_j$1 = -76						; size = 4
_i$2 = -72						; size = 4
_q$3 = -68						; size = 4
_z$4 = -64						; size = 4
_y$5 = -60						; size = 4
_x$6 = -56						; size = 4
_pointz$7 = -52						; size = 4
_pointy$8 = -48						; size = 4
_pointx$9 = -44						; size = 4
_iymin$ = -40						; size = 4
_iymax$ = -36						; size = 4
_ixmin$ = -32						; size = 4
_ixmax$ = -28						; size = 4
_oymin$ = -24						; size = 4
_oymax$ = -20						; size = 4
_oxmin$ = -16						; size = 4
_oxmax$ = -12						; size = 4
_visible$ = -8						; size = 4
_count$ = -4						; size = 4
_number_of_vertices$ = 8				; size = 4
_vertices$ = 12						; size = 4
_result_points$ = 16					; size = 4
?transform_3d_polyline_points@@YGHHPAUVEC3D@@PAUPOLYLINE_POINT@@@Z PROC ; transform_3d_polyline_points, COMDAT

; 491  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 492  : 
; 493  : 	int
; 494  : 		count,
; 495  : 		visible;
; 496  : 
; 497  : 	float
; 498  : 		oxmax,
; 499  : 		oxmin,
; 500  : 		oymax,
; 501  : 		oymin;
; 502  : 
; 503  : 	int
; 504  : 		ixmax,
; 505  : 		ixmin,
; 506  : 		iymax,
; 507  : 		iymin;
; 508  : 
; 509  : 	visible = FALSE;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _visible$[ebp], 0

; 510  : 
; 511  : 	for ( count = number_of_vertices; count > 0; count-- )

  00013	8b 45 08	 mov	 eax, DWORD PTR _number_of_vertices$[ebp]
  00016	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  00019	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	83 e8 01	 sub	 eax, 1
  00021	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  00024	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00028	0f 8e cb 02 00
	00		 jle	 $LN3@transform_

; 512  : 	{
; 513  : 
; 514  : 		float
; 515  : 			pointx,
; 516  : 			pointy,
; 517  : 			pointz,
; 518  : 			x,
; 519  : 			y,
; 520  : 			z;
; 521  : 
; 522  : 		result_points->world_point = *vertices;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _vertices$[ebp]
  00031	8b 4d 10	 mov	 ecx, DWORD PTR _result_points$[ebp]
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0003e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00041	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 523  : 
; 524  : 		pointx = vertices->x - visual_3d_vp->x;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _vertices$[ebp]
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0004d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00051	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00055	f3 0f 11 45 d4	 movss	 DWORD PTR _pointx$9[ebp], xmm0

; 525  : 		pointy = vertices->y - visual_3d_vp->y;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _vertices$[ebp]
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00063	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00068	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  0006d	f3 0f 11 45 d0	 movss	 DWORD PTR _pointy$8[ebp], xmm0

; 526  : 		pointz = vertices->z - visual_3d_vp->z;

  00072	8b 45 0c	 mov	 eax, DWORD PTR _vertices$[ebp]
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0007b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00080	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00085	f3 0f 11 45 cc	 movss	 DWORD PTR _pointz$7[ebp], xmm0

; 527  : 
; 528  : 		x = pointx * visual_3d_vp->xv.x;

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0008f	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _pointx$9[ebp]
  00094	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00099	f3 0f 11 45 c8	 movss	 DWORD PTR _x$6[ebp], xmm0

; 529  : 		y = pointx * visual_3d_vp->yv.x;

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000a3	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _pointx$9[ebp]
  000a8	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  000ad	f3 0f 11 45 c4	 movss	 DWORD PTR _y$5[ebp], xmm0

; 530  : 		z = pointx * visual_3d_vp->zv.x;

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000b7	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _pointx$9[ebp]
  000bc	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  000c1	f3 0f 11 45 c0	 movss	 DWORD PTR _z$4[ebp], xmm0

; 531  : 
; 532  : 		x += pointy * visual_3d_vp->xv.y;

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000cb	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _pointy$8[ebp]
  000d0	f3 0f 59 40 10	 mulss	 xmm0, DWORD PTR [eax+16]
  000d5	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _x$6[ebp]
  000da	f3 0f 11 45 c8	 movss	 DWORD PTR _x$6[ebp], xmm0

; 533  : 		y += pointy * visual_3d_vp->yv.y;

  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000e4	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _pointy$8[ebp]
  000e9	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  000ee	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _y$5[ebp]
  000f3	f3 0f 11 45 c4	 movss	 DWORD PTR _y$5[ebp], xmm0

; 534  : 		z += pointy * visual_3d_vp->zv.y;

  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000fd	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _pointy$8[ebp]
  00102	f3 0f 59 40 28	 mulss	 xmm0, DWORD PTR [eax+40]
  00107	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _z$4[ebp]
  0010c	f3 0f 11 45 c0	 movss	 DWORD PTR _z$4[ebp], xmm0

; 535  : 
; 536  : 		x += pointz * visual_3d_vp->xv.z;

  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00116	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _pointz$7[ebp]
  0011b	f3 0f 59 40 14	 mulss	 xmm0, DWORD PTR [eax+20]
  00120	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _x$6[ebp]
  00125	f3 0f 11 45 c8	 movss	 DWORD PTR _x$6[ebp], xmm0

; 537  : 		y += pointz * visual_3d_vp->yv.z;

  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0012f	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _pointz$7[ebp]
  00134	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  00139	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _y$5[ebp]
  0013e	f3 0f 11 45 c4	 movss	 DWORD PTR _y$5[ebp], xmm0

; 538  : 		z += pointz * visual_3d_vp->zv.z;

  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00148	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _pointz$7[ebp]
  0014d	f3 0f 59 40 2c	 mulss	 xmm0, DWORD PTR [eax+44]
  00152	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _z$4[ebp]
  00157	f3 0f 11 45 c0	 movss	 DWORD PTR _z$4[ebp], xmm0

; 539  : 
; 540  : 		x *= active_3d_environment->screen_i_scale;

  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00161	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$6[ebp]
  00166	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  0016a	f3 0f 11 45 c8	 movss	 DWORD PTR _x$6[ebp], xmm0

; 541  : 		y *= active_3d_environment->screen_j_scale;

  0016f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00174	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00179	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  0017e	f3 0f 11 45 c4	 movss	 DWORD PTR _y$5[ebp], xmm0

; 542  : 
; 543  : 		if ( *( ( int * ) &z ) >= *( ( int * ) &clip_hither ) )

  00183	8b 45 c0	 mov	 eax, DWORD PTR _z$4[ebp]
  00186	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  0018c	0f 8c 22 01 00
	00		 jl	 $LN5@transform_

; 544  : 		{
; 545  : 
; 546  : 			float
; 547  : 				q,
; 548  : 				i,
; 549  : 				j;
; 550  : 
; 551  : 			visible = TRUE;

  00192	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _visible$[ebp], 1

; 552  : 
; 553  : 			q = 1.0 / z;

  00199	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _z$4[ebp]
  0019e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001a6	f2 0f 5e c8	 divsd	 xmm1, xmm0
  001aa	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001ae	f3 0f 11 45 bc	 movss	 DWORD PTR _q$3[ebp], xmm0

; 554  : 
; 555  : 			result_points->transformed_point.x = x;

  001b3	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  001b6	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$6[ebp]
  001bb	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 556  : 			result_points->transformed_point.y = y;

  001c0	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  001c3	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y$5[ebp]
  001c8	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 557  : 			result_points->transformed_point.z = z;

  001cd	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  001d0	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _z$4[ebp]
  001d5	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 558  : 
; 559  : 			i = active_3d_environment->x_origin + ( x * q );

  001da	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$6[ebp]
  001df	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  001e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001e9	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  001ee	f3 0f 11 45 b8	 movss	 DWORD PTR _i$2[ebp], xmm0

; 560  : 
; 561  : 			j = active_3d_environment->y_origin - ( y * q );

  001f3	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y$5[ebp]
  001f8	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  001fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00202	f3 0f 10 48 14	 movss	 xmm1, DWORD PTR [eax+20]
  00207	f3 0f 5c c8	 subss	 xmm1, xmm0
  0020b	f3 0f 11 4d b4	 movss	 DWORD PTR _j$1[ebp], xmm1

; 562  : 
; 563  : 			oxmax = active_viewport.x_max - i;

  00210	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00218	f3 0f 5c 45 b8	 subss	 xmm0, DWORD PTR _i$2[ebp]
  0021d	f3 0f 11 45 f4	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 564  : 			oxmin = i - active_viewport.x_min;

  00222	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _i$2[ebp]
  00227	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0022f	f3 0f 11 45 f0	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 565  : 			oymax = active_viewport.y_max - j;

  00234	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  0023c	f3 0f 5c 45 b4	 subss	 xmm0, DWORD PTR _j$1[ebp]
  00241	f3 0f 11 45 ec	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 566  : 			oymin = j - active_viewport.y_min;

  00246	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _j$1[ebp]
  0024b	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00253	f3 0f 11 45 e8	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 567  : 		
; 568  : 			ixmax = *( ( int * ) &oxmax );

  00258	8b 45 f4	 mov	 eax, DWORD PTR _oxmax$[ebp]
  0025b	89 45 e4	 mov	 DWORD PTR _ixmax$[ebp], eax

; 569  : 			ixmin = *( ( int * ) &oxmin );

  0025e	8b 45 f0	 mov	 eax, DWORD PTR _oxmin$[ebp]
  00261	89 45 e0	 mov	 DWORD PTR _ixmin$[ebp], eax

; 570  : 			iymax = *( ( int * ) &oymax );

  00264	8b 45 ec	 mov	 eax, DWORD PTR _oymax$[ebp]
  00267	89 45 dc	 mov	 DWORD PTR _iymax$[ebp], eax

; 571  : 			iymin = *( ( int * ) &oymin );

  0026a	8b 45 e8	 mov	 eax, DWORD PTR _oymin$[ebp]
  0026d	89 45 d8	 mov	 DWORD PTR _iymin$[ebp], eax

; 572  : 		
; 573  : 			result_points->transformed_point.outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00270	8b 45 dc	 mov	 eax, DWORD PTR _iymax$[ebp]
  00273	50		 push	 eax
  00274	8b 4d e4	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  00277	51		 push	 ecx
  00278	8b 55 d8	 mov	 edx, DWORD PTR _iymin$[ebp]
  0027b	52		 push	 edx
  0027c	8b 45 e0	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00285	8b 4d 10	 mov	 ecx, DWORD PTR _result_points$[ebp]
  00288	88 41 38	 mov	 BYTE PTR [ecx+56], al

; 574  : 
; 575  : 			result_points->transformed_point.j = j;

  0028b	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  0028e	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _j$1[ebp]
  00293	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 576  : 			result_points->transformed_point.i = i;

  00298	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  0029b	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _i$2[ebp]
  002a0	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 577  : 			result_points->transformed_point.q = q;

  002a5	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  002a8	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _q$3[ebp]
  002ad	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 578  : 		}
; 579  : 		else

  002b2	eb 2e		 jmp	 SHORT $LN6@transform_
$LN5@transform_:

; 580  : 		{
; 581  : 
; 582  : 			result_points->transformed_point.outcode = CLIP_HITHER;

  002b4	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  002b7	c6 40 38 20	 mov	 BYTE PTR [eax+56], 32	; 00000020H

; 583  : 
; 584  : 			result_points->transformed_point.z = z;

  002bb	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  002be	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _z$4[ebp]
  002c3	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 585  : 			result_points->transformed_point.x = x;

  002c8	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  002cb	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$6[ebp]
  002d0	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 586  : 			result_points->transformed_point.y = y;

  002d5	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  002d8	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y$5[ebp]
  002dd	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0
$LN6@transform_:

; 587  : 		}
; 588  : 
; 589  : 		result_points++;

  002e2	8b 45 10	 mov	 eax, DWORD PTR _result_points$[ebp]
  002e5	83 c0 4c	 add	 eax, 76			; 0000004cH
  002e8	89 45 10	 mov	 DWORD PTR _result_points$[ebp], eax

; 590  : 
; 591  : 		vertices++;

  002eb	8b 45 0c	 mov	 eax, DWORD PTR _vertices$[ebp]
  002ee	83 c0 0c	 add	 eax, 12			; 0000000cH
  002f1	89 45 0c	 mov	 DWORD PTR _vertices$[ebp], eax

; 592  : 	}

  002f4	e9 22 fd ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 593  : 
; 594  : 	return ( visible );

  002f9	8b 45 f8	 mov	 eax, DWORD PTR _visible$[ebp]

; 595  : }

  002fc	5f		 pop	 edi
  002fd	5e		 pop	 esi
  002fe	5b		 pop	 ebx
  002ff	8b e5		 mov	 esp, ebp
  00301	5d		 pop	 ebp
  00302	c2 0c 00	 ret	 12			; 0000000cH
?transform_3d_polyline_points@@YGHHPAUVEC3D@@PAUPOLYLINE_POINT@@@Z ENDP ; transform_3d_polyline_points
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dline.c
;	COMDAT ?draw_3d_polyline@@YGXPAUOBJECT_3D_POLYLINE@@@Z
_TEXT	SEGMENT
tv265 = -200						; size = 4
tv261 = -200						; size = 4
tv257 = -200						; size = 4
tv266 = -196						; size = 4
tv262 = -196						; size = 4
tv258 = -196						; size = 4
_intensity$1 = -128					; size = 4
_iblue$2 = -124						; size = 4
_igreen$3 = -120					; size = 4
_ired$4 = -116						; size = 4
_this_light$5 = -112					; size = 4
_direction_factor$6 = -108				; size = 4
_ndotcamera$7 = -104					; size = 4
_ndotp1$8 = -100					; size = 4
_ndotn$9 = -96						; size = 4
_blue$10 = -92						; size = 4
_green$11 = -88						; size = 4
_red$12 = -84						; size = 4
_line_normal$13 = -80					; size = 12
_plane_normal$14 = -68					; size = 12
_point2$15 = -56					; size = 12
_point1$16 = -44					; size = 12
_ifog_intensity$17 = -32				; size = 4
_fog_intensity$18 = -28					; size = 4
_colour$ = -24						; size = 4
_line$ = -20						; size = 4
_points$ = -16						; size = 4
_average_distance$ = -12				; size = 4
_outcode$ = -8						; size = 4
_segment$ = -4						; size = 4
_polyline$ = 8						; size = 4
?draw_3d_polyline@@YGXPAUOBJECT_3D_POLYLINE@@@Z PROC	; draw_3d_polyline, COMDAT

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 282  : 
; 283  : 	int
; 284  : 		segment,
; 285  : 		outcode;
; 286  : 
; 287  : 	float
; 288  : 		average_distance;
; 289  : 
; 290  : 	polyline_point
; 291  : 		*points;
; 292  : 
; 293  : 	vertex
; 294  : 		*line;
; 295  : 
; 296  : 	real_colour
; 297  : 		colour;
; 298  : 
; 299  : 	//
; 300  : 	// Connect the two vertices up
; 301  : 	//
; 302  : 
; 303  : 	points = polyline->polyline->points;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _polyline$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00014	89 55 f0	 mov	 DWORD PTR _points$[ebp], edx

; 304  : 
; 305  : 	segment = polyline->segment;

  00017	8b 45 08	 mov	 eax, DWORD PTR _polyline$[ebp]
  0001a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001d	89 4d fc	 mov	 DWORD PTR _segment$[ebp], ecx

; 306  : 
; 307  : 	points[segment].transformed_point.next_vertex = &points[segment+1].transformed_point;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _segment$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	6b c8 4c	 imul	 ecx, eax, 76
  00029	8b 55 f0	 mov	 edx, DWORD PTR _points$[ebp]
  0002c	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00030	6b 4d fc 4c	 imul	 ecx, DWORD PTR _segment$[ebp], 76
  00034	8b 55 f0	 mov	 edx, DWORD PTR _points$[ebp]
  00037	89 44 0a 34	 mov	 DWORD PTR [edx+ecx+52], eax

; 308  : 
; 309  : 	points[segment+1].transformed_point.next_vertex = NULL;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _segment$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	6b c8 4c	 imul	 ecx, eax, 76
  00044	8b 55 f0	 mov	 edx, DWORD PTR _points$[ebp]
  00047	c7 44 0a 34 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+52], 0

; 310  : 
; 311  : 	outcode = points[segment].transformed_point.outcode;

  0004f	6b 45 fc 4c	 imul	 eax, DWORD PTR _segment$[ebp], 76
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _points$[ebp]
  00056	0f b6 54 01 38	 movzx	 edx, BYTE PTR [ecx+eax+56]
  0005b	89 55 f8	 mov	 DWORD PTR _outcode$[ebp], edx

; 312  : 	outcode |= points[segment+1].transformed_point.outcode;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _segment$[ebp]
  00061	83 c0 01	 add	 eax, 1
  00064	6b c8 4c	 imul	 ecx, eax, 76
  00067	8b 55 f0	 mov	 edx, DWORD PTR _points$[ebp]
  0006a	0f b6 44 0a 38	 movzx	 eax, BYTE PTR [edx+ecx+56]
  0006f	0b 45 f8	 or	 eax, DWORD PTR _outcode$[ebp]
  00072	89 45 f8	 mov	 DWORD PTR _outcode$[ebp], eax

; 313  : 
; 314  : 	//
; 315  : 	// Calculate the average distance of the polyline
; 316  : 	//
; 317  : 
; 318  : 	average_distance = ( points[segment].transformed_point.z + points[segment+1].transformed_point.z ) / 2.0;

  00075	6b 45 fc 4c	 imul	 eax, DWORD PTR _segment$[ebp], 76
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _segment$[ebp]
  0007c	83 c1 01	 add	 ecx, 1
  0007f	6b d1 4c	 imul	 edx, ecx, 76
  00082	8b 4d f0	 mov	 ecx, DWORD PTR _points$[ebp]
  00085	8b 75 f0	 mov	 esi, DWORD PTR _points$[ebp]
  00088	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  0008e	f3 0f 58 44 16
	14		 addss	 xmm0, DWORD PTR [esi+edx+20]
  00094	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00098	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  000a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a4	f3 0f 11 45 f4	 movss	 DWORD PTR _average_distance$[ebp], xmm0

; 319  : 
; 320  : 	//
; 321  : 	// Set the fog value for this polyline
; 322  : 	//
; 323  : 
; 324  : 	{
; 325  : 
; 326  : 		float
; 327  : 			fog_intensity;
; 328  : 
; 329  : 		int
; 330  : 			ifog_intensity;
; 331  : 
; 332  : 		fog_intensity = get_fog_distance_value ( average_distance );

  000a9	51		 push	 ecx
  000aa	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _average_distance$[ebp]
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	e8 00 00 00 00	 call	 ?get_fog_distance_value@@YGMM@Z ; get_fog_distance_value
  000b9	d9 5d e4	 fstp	 DWORD PTR _fog_intensity$18[ebp]

; 333  : 
; 334  : 		convert_float_to_int ( fog_intensity, &ifog_intensity );

  000bc	8d 45 e0	 lea	 eax, DWORD PTR _ifog_intensity$17[ebp]
  000bf	50		 push	 eax
  000c0	51		 push	 ecx
  000c1	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _fog_intensity$18[ebp]
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 335  : 
; 336  : 		set_d3d_fog_face_intensity ( ifog_intensity );

  000d0	8b 45 e0	 mov	 eax, DWORD PTR _ifog_intensity$17[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?set_d3d_fog_face_intensity@@YGXH@Z ; set_d3d_fog_face_intensity

; 337  : 	}
; 338  : 
; 339  : 	//
; 340  : 	// Calculate the lighting if required
; 341  : 	//
; 342  : 
; 343  : 	if ( polyline->polyline->lit )

  000d9	8b 45 08	 mov	 eax, DWORD PTR _polyline$[ebp]
  000dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000de	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  000e2	85 d2		 test	 edx, edx
  000e4	0f 84 7b 04 00
	00		 je	 $LN4@draw_3d_po

; 344  : 	{
; 345  : 
; 346  : 		vec3d
; 347  : 			point1,
; 348  : 			point2,
; 349  : 			plane_normal,
; 350  : 			line_normal;
; 351  : 
; 352  : 		float
; 353  : 			red,
; 354  : 			green,
; 355  : 			blue,
; 356  : 			ndotn,
; 357  : 			ndotp1,
; 358  : 			ndotcamera,
; 359  : 			direction_factor;
; 360  : 
; 361  : 		light_3d_source
; 362  : 			*this_light;
; 363  : 
; 364  : 		int
; 365  : 			ired,
; 366  : 			igreen,
; 367  : 			iblue;
; 368  : 	
; 369  : 		//
; 370  : 		// This bit is a work of a genius matey!
; 371  : 		//
; 372  : 
; 373  : 		point1 = points[segment].world_point;

  000ea	6b 45 fc 4c	 imul	 eax, DWORD PTR _segment$[ebp], 76
  000ee	03 45 f0	 add	 eax, DWORD PTR _points$[ebp]
  000f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f3	89 4d d4	 mov	 DWORD PTR _point1$16[ebp], ecx
  000f6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000f9	89 55 d8	 mov	 DWORD PTR _point1$16[ebp+4], edx
  000fc	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ff	89 45 dc	 mov	 DWORD PTR _point1$16[ebp+8], eax

; 374  : 		point2 = points[segment+1].world_point;

  00102	8b 45 fc	 mov	 eax, DWORD PTR _segment$[ebp]
  00105	83 c0 01	 add	 eax, 1
  00108	6b c8 4c	 imul	 ecx, eax, 76
  0010b	03 4d f0	 add	 ecx, DWORD PTR _points$[ebp]
  0010e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00110	89 55 c8	 mov	 DWORD PTR _point2$15[ebp], edx
  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	89 45 cc	 mov	 DWORD PTR _point2$15[ebp+4], eax
  00119	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0011c	89 4d d0	 mov	 DWORD PTR _point2$15[ebp+8], ecx

; 375  : 
; 376  : 		point1.x = ( ( point2.x - point1.x ) / 2 ) + point1.x;

  0011f	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _point2$15[ebp]
  00124	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _point1$16[ebp]
  00129	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00131	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _point1$16[ebp]
  00136	f3 0f 11 45 d4	 movss	 DWORD PTR _point1$16[ebp], xmm0

; 377  : 		point1.y = ( ( point2.y - point1.y ) / 2 ) + point1.y;

  0013b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _point2$15[ebp+4]
  00140	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _point1$16[ebp+4]
  00145	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0014d	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _point1$16[ebp+4]
  00152	f3 0f 11 45 d8	 movss	 DWORD PTR _point1$16[ebp+4], xmm0

; 378  : 		point1.z = ( ( point2.z - point1.z ) / 2 ) + point1.z;

  00157	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _point2$15[ebp+8]
  0015c	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _point1$16[ebp+8]
  00161	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00169	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _point1$16[ebp+8]
  0016e	f3 0f 11 45 dc	 movss	 DWORD PTR _point1$16[ebp+8], xmm0

; 379  : 
; 380  : 		plane_normal.x = point2.x - point1.x;

  00173	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _point2$15[ebp]
  00178	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _point1$16[ebp]
  0017d	f3 0f 11 45 bc	 movss	 DWORD PTR _plane_normal$14[ebp], xmm0

; 381  : 		plane_normal.y = point2.y - point1.y;

  00182	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _point2$15[ebp+4]
  00187	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _point1$16[ebp+4]
  0018c	f3 0f 11 45 c0	 movss	 DWORD PTR _plane_normal$14[ebp+4], xmm0

; 382  : 		plane_normal.z = point2.z - point1.z;

  00191	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _point2$15[ebp+8]
  00196	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _point1$16[ebp+8]
  0019b	f3 0f 11 45 c4	 movss	 DWORD PTR _plane_normal$14[ebp+8], xmm0

; 383  : 
; 384  : 		ndotn = ( ( plane_normal.x * plane_normal.x ) + ( plane_normal.y * plane_normal.y ) + ( plane_normal.z * plane_normal.z ) );

  001a0	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _plane_normal$14[ebp]
  001a5	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _plane_normal$14[ebp]
  001aa	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _plane_normal$14[ebp+4]
  001af	f3 0f 59 4d c0	 mulss	 xmm1, DWORD PTR _plane_normal$14[ebp+4]
  001b4	f3 0f 58 c1	 addss	 xmm0, xmm1
  001b8	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _plane_normal$14[ebp+8]
  001bd	f3 0f 59 4d c4	 mulss	 xmm1, DWORD PTR _plane_normal$14[ebp+8]
  001c2	f3 0f 58 c1	 addss	 xmm0, xmm1
  001c6	f3 0f 11 45 a0	 movss	 DWORD PTR _ndotn$9[ebp], xmm0

; 385  : 		ndotp1 = ( ( point1.x * plane_normal.x ) + ( point1.y * plane_normal.y ) + ( point1.z * plane_normal.z ) );

  001cb	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _point1$16[ebp]
  001d0	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _plane_normal$14[ebp]
  001d5	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _point1$16[ebp+4]
  001da	f3 0f 59 4d c0	 mulss	 xmm1, DWORD PTR _plane_normal$14[ebp+4]
  001df	f3 0f 58 c1	 addss	 xmm0, xmm1
  001e3	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _point1$16[ebp+8]
  001e8	f3 0f 59 4d c4	 mulss	 xmm1, DWORD PTR _plane_normal$14[ebp+8]
  001ed	f3 0f 58 c1	 addss	 xmm0, xmm1
  001f1	f3 0f 11 45 9c	 movss	 DWORD PTR _ndotp1$8[ebp], xmm0

; 386  : 
; 387  : 		ndotcamera = (	( visual_3d_vp->x * plane_normal.x ) + ( visual_3d_vp->y * plane_normal.y ) + ( visual_3d_vp->z * plane_normal.z ) );

  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001fb	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001ff	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _plane_normal$14[ebp]
  00204	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0020a	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0020f	f3 0f 59 4d c0	 mulss	 xmm1, DWORD PTR _plane_normal$14[ebp+4]
  00214	f3 0f 58 c1	 addss	 xmm0, xmm1
  00218	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0021e	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00223	f3 0f 59 4d c4	 mulss	 xmm1, DWORD PTR _plane_normal$14[ebp+8]
  00228	f3 0f 58 c1	 addss	 xmm0, xmm1
  0022c	f3 0f 11 45 98	 movss	 DWORD PTR _ndotcamera$7[ebp], xmm0

; 388  : 
; 389  : 		direction_factor = ( ( ndotp1 - ndotcamera ) / ndotn );

  00231	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _ndotp1$8[ebp]
  00236	f3 0f 5c 45 98	 subss	 xmm0, DWORD PTR _ndotcamera$7[ebp]
  0023b	f3 0f 5e 45 a0	 divss	 xmm0, DWORD PTR _ndotn$9[ebp]
  00240	f3 0f 11 45 94	 movss	 DWORD PTR _direction_factor$6[ebp], xmm0

; 390  : 
; 391  : 		line_normal.x = visual_3d_vp->x + direction_factor * ( plane_normal.x );

  00245	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _direction_factor$6[ebp]
  0024a	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _plane_normal$14[ebp]
  0024f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00254	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00258	f3 0f 11 45 b0	 movss	 DWORD PTR _line_normal$13[ebp], xmm0

; 392  : 		line_normal.y = visual_3d_vp->y + direction_factor * ( plane_normal.y );

  0025d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _direction_factor$6[ebp]
  00262	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _plane_normal$14[ebp+4]
  00267	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0026c	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00271	f3 0f 11 45 b4	 movss	 DWORD PTR _line_normal$13[ebp+4], xmm0

; 393  : 		line_normal.z = visual_3d_vp->z + direction_factor * ( plane_normal.z );

  00276	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _direction_factor$6[ebp]
  0027b	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _plane_normal$14[ebp+8]
  00280	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00285	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  0028a	f3 0f 11 45 b8	 movss	 DWORD PTR _line_normal$13[ebp+8], xmm0

; 394  : 
; 395  : 		line_normal.x = line_normal.x - point1.x;

  0028f	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _line_normal$13[ebp]
  00294	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _point1$16[ebp]
  00299	f3 0f 11 45 b0	 movss	 DWORD PTR _line_normal$13[ebp], xmm0

; 396  : 		line_normal.y = line_normal.y - point1.y;

  0029e	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _line_normal$13[ebp+4]
  002a3	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _point1$16[ebp+4]
  002a8	f3 0f 11 45 b4	 movss	 DWORD PTR _line_normal$13[ebp+4], xmm0

; 397  : 		line_normal.z = line_normal.z - point1.z;

  002ad	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _line_normal$13[ebp+8]
  002b2	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _point1$16[ebp+8]
  002b7	f3 0f 11 45 b8	 movss	 DWORD PTR _line_normal$13[ebp+8], xmm0

; 398  : 
; 399  : 		normalise_any_3d_vector ( &line_normal );

  002bc	8d 45 b0	 lea	 eax, DWORD PTR _line_normal$13[ebp]
  002bf	50		 push	 eax
  002c0	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  002c5	dd d8		 fstp	 ST(0)

; 400  : 
; 401  : 		this_light = current_3d_lights;

  002c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A ; current_3d_lights
  002cc	89 45 90	 mov	 DWORD PTR _this_light$5[ebp], eax

; 402  : 
; 403  : 		red = ambient_3d_light.colour.red;

  002cf	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  002d7	f3 0f 11 45 ac	 movss	 DWORD PTR _red$12[ebp], xmm0

; 404  : 		green = ambient_3d_light.colour.green;

  002dc	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  002e4	f3 0f 11 45 a8	 movss	 DWORD PTR _green$11[ebp], xmm0

; 405  : 		blue = ambient_3d_light.colour.blue;

  002e9	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  002f1	f3 0f 11 45 a4	 movss	 DWORD PTR _blue$10[ebp], xmm0
$LN2@draw_3d_po:

; 406  : 
; 407  : 		while ( this_light )

  002f6	83 7d 90 00	 cmp	 DWORD PTR _this_light$5[ebp], 0
  002fa	0f 84 91 00 00
	00		 je	 $LN3@draw_3d_po

; 408  : 		{
; 409  : 
; 410  : 			float
; 411  : 				intensity;
; 412  : 
; 413  : 			intensity = ( ( line_normal.x * this_light->lx ) + ( line_normal.y * this_light->ly ) + ( line_normal.z * this_light->lz ) );

  00300	8b 45 90	 mov	 eax, DWORD PTR _this_light$5[ebp]
  00303	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _line_normal$13[ebp]
  00308	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  0030c	8b 4d 90	 mov	 ecx, DWORD PTR _this_light$5[ebp]
  0030f	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _line_normal$13[ebp+4]
  00314	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  00319	f3 0f 58 c1	 addss	 xmm0, xmm1
  0031d	8b 55 90	 mov	 edx, DWORD PTR _this_light$5[ebp]
  00320	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _line_normal$13[ebp+8]
  00325	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  0032a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0032e	f3 0f 11 45 80	 movss	 DWORD PTR _intensity$1[ebp], xmm0

; 414  : 
; 415  : 			if ( ( *( int * ) &intensity ) > ( *( int * ) &float_value_zero ) )

  00333	8b 45 80	 mov	 eax, DWORD PTR _intensity$1[ebp]
  00336	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  0033c	7e 45		 jle	 SHORT $LN6@draw_3d_po

; 416  : 			{
; 417  : 
; 418  : 				red += intensity * this_light->colour.red;

  0033e	8b 45 90	 mov	 eax, DWORD PTR _this_light$5[ebp]
  00341	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _intensity$1[ebp]
  00346	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  0034b	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR _red$12[ebp]
  00350	f3 0f 11 45 ac	 movss	 DWORD PTR _red$12[ebp], xmm0

; 419  : 				green += intensity * this_light->colour.green;

  00355	8b 45 90	 mov	 eax, DWORD PTR _this_light$5[ebp]
  00358	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _intensity$1[ebp]
  0035d	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  00362	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _green$11[ebp]
  00367	f3 0f 11 45 a8	 movss	 DWORD PTR _green$11[ebp], xmm0

; 420  : 				blue += intensity * this_light->colour.blue;

  0036c	8b 45 90	 mov	 eax, DWORD PTR _this_light$5[ebp]
  0036f	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _intensity$1[ebp]
  00374	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  00379	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _blue$10[ebp]
  0037e	f3 0f 11 45 a4	 movss	 DWORD PTR _blue$10[ebp], xmm0
$LN6@draw_3d_po:

; 421  : 			}
; 422  : 
; 423  : 			this_light = this_light->succ;

  00383	8b 45 90	 mov	 eax, DWORD PTR _this_light$5[ebp]
  00386	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00389	89 4d 90	 mov	 DWORD PTR _this_light$5[ebp], ecx

; 424  : 		}

  0038c	e9 65 ff ff ff	 jmp	 $LN2@draw_3d_po
$LN3@draw_3d_po:

; 425  : 	
; 426  : 		red = bound ( red, 0, 1 );

  00391	0f 57 c0	 xorps	 xmm0, xmm0
  00394	0f 2f 45 ac	 comiss	 xmm0, DWORD PTR _red$12[ebp]
  00398	76 0d		 jbe	 SHORT $LN14@draw_3d_po
  0039a	0f 57 c0	 xorps	 xmm0, xmm0
  0039d	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv258[ebp], xmm0
  003a5	eb 3d		 jmp	 SHORT $LN15@draw_3d_po
$LN14@draw_3d_po:
  003a7	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _red$12[ebp]
  003ac	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  003b3	76 12		 jbe	 SHORT $LN12@draw_3d_po
  003b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003bd	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv257[ebp], xmm0
  003c5	eb 0d		 jmp	 SHORT $LN13@draw_3d_po
$LN12@draw_3d_po:
  003c7	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _red$12[ebp]
  003cc	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv257[ebp], xmm0
$LN13@draw_3d_po:
  003d4	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv257[ebp]
  003dc	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv258[ebp], xmm0
$LN15@draw_3d_po:
  003e4	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv258[ebp]
  003ec	f3 0f 11 45 ac	 movss	 DWORD PTR _red$12[ebp], xmm0

; 427  : 		green = bound ( green, 0, 1 );

  003f1	0f 57 c0	 xorps	 xmm0, xmm0
  003f4	0f 2f 45 a8	 comiss	 xmm0, DWORD PTR _green$11[ebp]
  003f8	76 0d		 jbe	 SHORT $LN18@draw_3d_po
  003fa	0f 57 c0	 xorps	 xmm0, xmm0
  003fd	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv262[ebp], xmm0
  00405	eb 3d		 jmp	 SHORT $LN19@draw_3d_po
$LN18@draw_3d_po:
  00407	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _green$11[ebp]
  0040c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00413	76 12		 jbe	 SHORT $LN16@draw_3d_po
  00415	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0041d	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv261[ebp], xmm0
  00425	eb 0d		 jmp	 SHORT $LN17@draw_3d_po
$LN16@draw_3d_po:
  00427	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _green$11[ebp]
  0042c	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv261[ebp], xmm0
$LN17@draw_3d_po:
  00434	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv261[ebp]
  0043c	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv262[ebp], xmm0
$LN19@draw_3d_po:
  00444	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv262[ebp]
  0044c	f3 0f 11 45 a8	 movss	 DWORD PTR _green$11[ebp], xmm0

; 428  : 		blue = bound ( blue, 0, 1 );

  00451	0f 57 c0	 xorps	 xmm0, xmm0
  00454	0f 2f 45 a4	 comiss	 xmm0, DWORD PTR _blue$10[ebp]
  00458	76 0d		 jbe	 SHORT $LN22@draw_3d_po
  0045a	0f 57 c0	 xorps	 xmm0, xmm0
  0045d	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv266[ebp], xmm0
  00465	eb 3d		 jmp	 SHORT $LN23@draw_3d_po
$LN22@draw_3d_po:
  00467	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _blue$10[ebp]
  0046c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00473	76 12		 jbe	 SHORT $LN20@draw_3d_po
  00475	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0047d	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv265[ebp], xmm0
  00485	eb 0d		 jmp	 SHORT $LN21@draw_3d_po
$LN20@draw_3d_po:
  00487	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _blue$10[ebp]
  0048c	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv265[ebp], xmm0
$LN21@draw_3d_po:
  00494	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv265[ebp]
  0049c	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv266[ebp], xmm0
$LN23@draw_3d_po:
  004a4	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv266[ebp]
  004ac	f3 0f 11 45 a4	 movss	 DWORD PTR _blue$10[ebp], xmm0

; 429  : 
; 430  : 		red *= polyline->polyline->colour.red;

  004b1	8b 45 08	 mov	 eax, DWORD PTR _polyline$[ebp]
  004b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004b6	0f b6 51 06	 movzx	 edx, BYTE PTR [ecx+6]
  004ba	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  004be	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _red$12[ebp]
  004c3	f3 0f 11 45 ac	 movss	 DWORD PTR _red$12[ebp], xmm0

; 431  : 		green *= polyline->polyline->colour.green;

  004c8	8b 45 08	 mov	 eax, DWORD PTR _polyline$[ebp]
  004cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  004cd	0f b6 51 05	 movzx	 edx, BYTE PTR [ecx+5]
  004d1	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  004d5	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR _green$11[ebp]
  004da	f3 0f 11 45 a8	 movss	 DWORD PTR _green$11[ebp], xmm0

; 432  : 		blue *= polyline->polyline->colour.blue;

  004df	8b 45 08	 mov	 eax, DWORD PTR _polyline$[ebp]
  004e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  004e4	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  004e8	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  004ec	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _blue$10[ebp]
  004f1	f3 0f 11 45 a4	 movss	 DWORD PTR _blue$10[ebp], xmm0

; 433  : 
; 434  : 		red += FLOAT_FLOAT_FACTOR;

  004f6	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _red$12[ebp]
  004fb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00503	f3 0f 11 45 ac	 movss	 DWORD PTR _red$12[ebp], xmm0

; 435  : 		green += FLOAT_FLOAT_FACTOR;

  00508	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _green$11[ebp]
  0050d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00515	f3 0f 11 45 a8	 movss	 DWORD PTR _green$11[ebp], xmm0

; 436  : 		blue += FLOAT_FLOAT_FACTOR;

  0051a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _blue$10[ebp]
  0051f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00527	f3 0f 11 45 a4	 movss	 DWORD PTR _blue$10[ebp], xmm0

; 437  : 
; 438  : 		ired = ( *( int * ) &red ) - INTEGER_FLOAT_FACTOR;

  0052c	8b 45 ac	 mov	 eax, DWORD PTR _red$12[ebp]
  0052f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00534	89 45 8c	 mov	 DWORD PTR _ired$4[ebp], eax

; 439  : 		igreen = ( *( int * ) &green ) - INTEGER_FLOAT_FACTOR;

  00537	8b 45 a8	 mov	 eax, DWORD PTR _green$11[ebp]
  0053a	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0053f	89 45 88	 mov	 DWORD PTR _igreen$3[ebp], eax

; 440  : 		iblue = ( *( int * ) &blue ) - INTEGER_FLOAT_FACTOR;

  00542	8b 45 a4	 mov	 eax, DWORD PTR _blue$10[ebp]
  00545	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0054a	89 45 84	 mov	 DWORD PTR _iblue$2[ebp], eax

; 441  : 
; 442  : 		colour.red = ired;

  0054d	8a 45 8c	 mov	 al, BYTE PTR _ired$4[ebp]
  00550	88 45 ea	 mov	 BYTE PTR _colour$[ebp+2], al

; 443  : 		colour.green = igreen;

  00553	8a 45 88	 mov	 al, BYTE PTR _igreen$3[ebp]
  00556	88 45 e9	 mov	 BYTE PTR _colour$[ebp+1], al

; 444  : 		colour.blue = iblue;

  00559	8a 45 84	 mov	 al, BYTE PTR _iblue$2[ebp]
  0055c	88 45 e8	 mov	 BYTE PTR _colour$[ebp], al

; 445  : 		colour.alpha = 0;

  0055f	c6 45 eb 00	 mov	 BYTE PTR _colour$[ebp+3], 0

; 446  : 	}
; 447  : 	else

  00563	eb 0b		 jmp	 SHORT $LN5@draw_3d_po
$LN4@draw_3d_po:

; 448  : 	{
; 449  : 
; 450  : 		colour = polyline->polyline->colour;

  00565	8b 45 08	 mov	 eax, DWORD PTR _polyline$[ebp]
  00568	8b 08		 mov	 ecx, DWORD PTR [eax]
  0056a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0056d	89 55 e8	 mov	 DWORD PTR _colour$[ebp], edx
$LN5@draw_3d_po:

; 451  : 	}
; 452  : 
; 453  : 	//
; 454  : 	// Go through all the vertices, creating lines to draw, then render them.
; 455  : 	//
; 456  : 
; 457  : 	line = &points[segment].transformed_point;

  00570	6b 45 fc 4c	 imul	 eax, DWORD PTR _segment$[ebp], 76
  00574	8b 4d f0	 mov	 ecx, DWORD PTR _points$[ebp]
  00577	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  0057b	89 55 ec	 mov	 DWORD PTR _line$[ebp], edx

; 458  : 
; 459  : 	clip_3d_coord = 0;

  0057e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 460  : 
; 461  : 	if ( outcode & CLIP_HITHER )

  00588	8b 45 f8	 mov	 eax, DWORD PTR _outcode$[ebp]
  0058b	83 e0 20	 and	 eax, 32			; 00000020H
  0058e	74 10		 je	 SHORT $LN7@draw_3d_po

; 462  : 	{
; 463  : 
; 464  : 		line = hither_clip_3d_polygon ( line, &outcode );

  00590	8d 45 f8	 lea	 eax, DWORD PTR _outcode$[ebp]
  00593	50		 push	 eax
  00594	8b 4d ec	 mov	 ecx, DWORD PTR _line$[ebp]
  00597	51		 push	 ecx
  00598	e8 00 00 00 00	 call	 ?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; hither_clip_3d_polygon
  0059d	89 45 ec	 mov	 DWORD PTR _line$[ebp], eax
$LN7@draw_3d_po:

; 465  : 	}
; 466  : 
; 467  : 	if ( line )

  005a0	83 7d ec 00	 cmp	 DWORD PTR _line$[ebp], 0
  005a4	74 2e		 je	 SHORT $LN10@draw_3d_po

; 468  : 	{
; 469  : 
; 470  : 		if ( outcode )

  005a6	83 7d f8 00	 cmp	 DWORD PTR _outcode$[ebp], 0
  005aa	74 10		 je	 SHORT $LN9@draw_3d_po

; 471  : 		{
; 472  : 
; 473  : 			line = clip_3d_polygon ( line, outcode );

  005ac	8b 45 f8	 mov	 eax, DWORD PTR _outcode$[ebp]
  005af	50		 push	 eax
  005b0	8b 4d ec	 mov	 ecx, DWORD PTR _line$[ebp]
  005b3	51		 push	 ecx
  005b4	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  005b9	89 45 ec	 mov	 DWORD PTR _line$[ebp], eax
$LN9@draw_3d_po:

; 474  : 		}
; 475  : 
; 476  : 		if ( line )

  005bc	83 7d ec 00	 cmp	 DWORD PTR _line$[ebp], 0
  005c0	74 12		 je	 SHORT $LN10@draw_3d_po

; 477  : 		{
; 478  : 
; 479  : 			set_d3d_plain_renderstate ();

  005c2	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 480  : 
; 481  : 			draw_wbuffered_plain_line ( line, colour );

  005c7	8b 45 e8	 mov	 eax, DWORD PTR _colour$[ebp]
  005ca	50		 push	 eax
  005cb	8b 4d ec	 mov	 ecx, DWORD PTR _line$[ebp]
  005ce	51		 push	 ecx
  005cf	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_wbuffered_plain_line
$LN10@draw_3d_po:

; 482  : 		}
; 483  : 	}
; 484  : }

  005d4	5f		 pop	 edi
  005d5	5e		 pop	 esi
  005d6	5b		 pop	 ebx
  005d7	8b e5		 mov	 esp, ebp
  005d9	5d		 pop	 ebp
  005da	c2 04 00	 ret	 4
?draw_3d_polyline@@YGXPAUOBJECT_3D_POLYLINE@@@Z ENDP	; draw_3d_polyline
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dline.c
;	COMDAT ?insert_zbiased_polyline_into_3d_scene@@YGHHMHUREAL_COLOUR@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_average_z$1 = -28					; size = 4
_buffer$2 = -24						; size = 4
_polyline$3 = -20					; size = 4
_polyline_colour$ = -16					; size = 4
_visible$ = -12						; size = 4
_count$ = -8						; size = 4
_rotated_points$ = -4					; size = 4
_number_of_points$ = 8					; size = 4
_zbias$ = 12						; size = 4
_lit$ = 16						; size = 4
_colour$ = 20						; size = 4
_points$ = 24						; size = 4
?insert_zbiased_polyline_into_3d_scene@@YGHHMHUREAL_COLOUR@@PAUVEC3D@@@Z PROC ; insert_zbiased_polyline_into_3d_scene, COMDAT

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 145  : 
; 146  : 	polyline_point
; 147  : 		*rotated_points;
; 148  : 
; 149  : 	int
; 150  : 		count,
; 151  : 		visible;
; 152  : 
; 153  : 	real_colour
; 154  : 		polyline_colour;
; 155  : 
; 156  : 	if ( exclusive_3d_instance )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; exclusive_3d_instance
  00010	74 07		 je	 SHORT $LN5@insert_zbi

; 157  : 	{
; 158  : 
; 159  : 		return ( FALSE );

  00012	33 c0		 xor	 eax, eax
  00014	e9 d0 01 00 00	 jmp	 $LN1@insert_zbi
$LN5@insert_zbi:

; 160  : 	}
; 161  : 
; 162  : 	//
; 163  : 	// First, ensure we have enough memory
; 164  : 	//
; 165  : 
; 166  : 	if ( number_of_3d_polyline_points + number_of_points > MAX_POLYLINE_POINTS )

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_3d_polyline_points@@3HA ; number_of_3d_polyline_points
  0001e	03 45 08	 add	 eax, DWORD PTR _number_of_points$[ebp]
  00021	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  00026	7e 07		 jle	 SHORT $LN6@insert_zbi

; 167  : 	{
; 168  : 
; 169  : 		return ( FALSE );

  00028	33 c0		 xor	 eax, eax
  0002a	e9 ba 01 00 00	 jmp	 $LN1@insert_zbi
$LN6@insert_zbi:

; 170  : 	}
; 171  : 
; 172  : 	if ( number_of_3d_polylines + 1 > MAX_POLYLINES )

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_3d_polylines@@3HA ; number_of_3d_polylines
  00034	83 c0 01	 add	 eax, 1
  00037	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0003c	7e 07		 jle	 SHORT $LN7@insert_zbi

; 173  : 	{
; 174  : 
; 175  : 		return ( FALSE );

  0003e	33 c0		 xor	 eax, eax
  00040	e9 a4 01 00 00	 jmp	 $LN1@insert_zbi
$LN7@insert_zbi:

; 176  : 	}
; 177  : 
; 178  : 	//
; 179  : 	// First, copy the ROTATED point data over to an internal 3d visual buffer ( checking for visibility )
; 180  : 	//
; 181  : 
; 182  : 	visible = FALSE;

  00045	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _visible$[ebp], 0

; 183  : 
; 184  : 	rotated_points = &polyline_points[number_of_3d_polyline_points];

  0004c	6b 05 00 00 00
	00 4c		 imul	 eax, DWORD PTR ?number_of_3d_polyline_points@@3HA, 76 ; number_of_3d_polyline_points
  00053	05 00 00 00 00	 add	 eax, OFFSET ?polyline_points@@3PAUPOLYLINE_POINT@@A ; polyline_points
  00058	89 45 fc	 mov	 DWORD PTR _rotated_points$[ebp], eax

; 185  : 
; 186  : 	//
; 187  : 	// Copy the colour value
; 188  : 	//
; 189  : 
; 190  : 	polyline_colour.red = colour.r;

  0005b	8a 45 16	 mov	 al, BYTE PTR _colour$[ebp+2]
  0005e	88 45 f2	 mov	 BYTE PTR _polyline_colour$[ebp+2], al

; 191  : 	polyline_colour.green = colour.g;

  00061	8a 45 15	 mov	 al, BYTE PTR _colour$[ebp+1]
  00064	88 45 f1	 mov	 BYTE PTR _polyline_colour$[ebp+1], al

; 192  : 	polyline_colour.blue = colour.b;

  00067	8a 45 14	 mov	 al, BYTE PTR _colour$[ebp]
  0006a	88 45 f0	 mov	 BYTE PTR _polyline_colour$[ebp], al

; 193  : 	polyline_colour.alpha = 0;

  0006d	c6 45 f3 00	 mov	 BYTE PTR _polyline_colour$[ebp+3], 0

; 194  : 
; 195  : 	if ( rotated_points )

  00071	83 7d fc 00	 cmp	 DWORD PTR _rotated_points$[ebp], 0
  00075	0f 84 69 01 00
	00		 je	 $LN3@insert_zbi

; 196  : 	{
; 197  : 
; 198  : 		visible = transform_3d_polyline_points ( number_of_points, points, rotated_points );

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _rotated_points$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 18	 mov	 ecx, DWORD PTR _points$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 08	 mov	 edx, DWORD PTR _number_of_points$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 ?transform_3d_polyline_points@@YGHHPAUVEC3D@@PAUPOLYLINE_POINT@@@Z ; transform_3d_polyline_points
  0008c	89 45 f4	 mov	 DWORD PTR _visible$[ebp], eax

; 199  : 
; 200  : 		if ( visible )

  0008f	83 7d f4 00	 cmp	 DWORD PTR _visible$[ebp], 0
  00093	0f 84 4b 01 00
	00		 je	 $LN3@insert_zbi

; 201  : 		{
; 202  : 
; 203  : 			polyline_header
; 204  : 				*polyline;
; 205  : 	
; 206  : 			//
; 207  : 			// Some part ( or all ) of the polyline is visible
; 208  : 			//
; 209  : 
; 210  : 			polyline = &polyline_headers[number_of_3d_polylines];

  00099	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?number_of_3d_polylines@@3HA, 12 ; number_of_3d_polylines
  000a0	05 00 00 00 00	 add	 eax, OFFSET ?polyline_headers@@3PAUPOLYLINE_HEADER@@A ; polyline_headers
  000a5	89 45 ec	 mov	 DWORD PTR _polyline$3[ebp], eax

; 211  : 
; 212  : 			number_of_3d_polylines++;

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_3d_polylines@@3HA ; number_of_3d_polylines
  000ad	83 c0 01	 add	 eax, 1
  000b0	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_3d_polylines@@3HA, eax ; number_of_3d_polylines

; 213  : 
; 214  : 			number_of_3d_polyline_points += number_of_points;

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_3d_polyline_points@@3HA ; number_of_3d_polyline_points
  000ba	03 45 08	 add	 eax, DWORD PTR _number_of_points$[ebp]
  000bd	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_3d_polyline_points@@3HA, eax ; number_of_3d_polyline_points

; 215  : 
; 216  : 			polyline->number_of_points = number_of_points;

  000c2	8b 45 ec	 mov	 eax, DWORD PTR _polyline$3[ebp]
  000c5	66 8b 4d 08	 mov	 cx, WORD PTR _number_of_points$[ebp]
  000c9	66 89 08	 mov	 WORD PTR [eax], cx

; 217  : 	
; 218  : 			polyline->points = rotated_points;

  000cc	8b 45 ec	 mov	 eax, DWORD PTR _polyline$3[ebp]
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _rotated_points$[ebp]
  000d2	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 219  : 
; 220  : 			polyline->colour = polyline_colour;

  000d5	8b 45 ec	 mov	 eax, DWORD PTR _polyline$3[ebp]
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _polyline_colour$[ebp]
  000db	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 221  : 
; 222  : 			polyline->lit = lit;

  000de	8b 45 ec	 mov	 eax, DWORD PTR _polyline$3[ebp]
  000e1	66 8b 4d 10	 mov	 cx, WORD PTR _lit$[ebp]
  000e5	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 223  : 	
; 224  : 			//
; 225  : 			// Now insert each segment dependant on it being visible or not.
; 226  : 			//
; 227  : 	
; 228  : 			for ( count = 0; count < ( number_of_points - 1 ); count++ )

  000e9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000f0	eb 09		 jmp	 SHORT $LN4@insert_zbi
$LN2@insert_zbi:
  000f2	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  000f5	83 c0 01	 add	 eax, 1
  000f8	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@insert_zbi:
  000fb	8b 45 08	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  000fe	83 e8 01	 sub	 eax, 1
  00101	39 45 f8	 cmp	 DWORD PTR _count$[ebp], eax
  00104	0f 8d da 00 00
	00		 jge	 $LN3@insert_zbi

; 229  : 			{
; 230  : 	
; 231  : 				if ( ( rotated_points[count].transformed_point.z > clip_hither ) || ( rotated_points[count+1].transformed_point.z > clip_hither ) )

  0010a	6b 45 f8 4c	 imul	 eax, DWORD PTR _count$[ebp], 76
  0010e	8b 4d fc	 mov	 ecx, DWORD PTR _rotated_points$[ebp]
  00111	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  00117	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?clip_hither@@3MA
  0011e	77 1f		 ja	 SHORT $LN11@insert_zbi
  00120	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00123	83 c0 01	 add	 eax, 1
  00126	6b c8 4c	 imul	 ecx, eax, 76
  00129	8b 55 fc	 mov	 edx, DWORD PTR _rotated_points$[ebp]
  0012c	f3 0f 10 44 0a
	14		 movss	 xmm0, DWORD PTR [edx+ecx+20]
  00132	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?clip_hither@@3MA
  00139	0f 86 a0 00 00
	00		 jbe	 $LN14@insert_zbi
$LN11@insert_zbi:

; 232  : 				{
; 233  : 	
; 234  : 					scene_slot_drawing_list
; 235  : 						*buffer;
; 236  : 	
; 237  : 					float
; 238  : 						average_z;
; 239  : 	
; 240  : 					average_z = ( rotated_points[count].transformed_point.z + rotated_points[count+1].transformed_point.z ) / 2.0;

  0013f	6b 45 f8 4c	 imul	 eax, DWORD PTR _count$[ebp], 76
  00143	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00146	83 c1 01	 add	 ecx, 1
  00149	6b d1 4c	 imul	 edx, ecx, 76
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR _rotated_points$[ebp]
  0014f	8b 75 fc	 mov	 esi, DWORD PTR _rotated_points$[ebp]
  00152	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  00158	f3 0f 58 44 16
	14		 addss	 xmm0, DWORD PTR [esi+edx+20]
  0015e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00162	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  0016a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0016e	f3 0f 11 45 e4	 movss	 DWORD PTR _average_z$1[ebp], xmm0

; 241  : 	
; 242  : 					average_z += zbias;

  00173	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _average_z$1[ebp]
  00178	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _zbias$[ebp]
  0017d	f3 0f 11 45 e4	 movss	 DWORD PTR _average_z$1[ebp], xmm0

; 243  : 	
; 244  : 					buffer = get_3d_scene_slot ();

  00182	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  00187	89 45 e8	 mov	 DWORD PTR _buffer$2[ebp], eax

; 245  : 		
; 246  : 					if ( buffer )

  0018a	83 7d e8 00	 cmp	 DWORD PTR _buffer$2[ebp], 0
  0018e	74 4f		 je	 SHORT $LN14@insert_zbi

; 247  : 					{
; 248  : 	
; 249  : 						buffer->type = OBJECT_3D_DRAW_TYPE_POLYLINE;

  00190	8b 45 e8	 mov	 eax, DWORD PTR _buffer$2[ebp]
  00193	c7 40 08 12 00
	00 00		 mov	 DWORD PTR [eax+8], 18	; 00000012H

; 250  : 		
; 251  : 						buffer->z = *( ( int * ) &average_z );

  0019a	8b 45 e8	 mov	 eax, DWORD PTR _buffer$2[ebp]
  0019d	8b 4d e4	 mov	 ecx, DWORD PTR _average_z$1[ebp]
  001a0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 252  : 		
; 253  : 						buffer->polyline.polyline = polyline;

  001a3	8b 45 e8	 mov	 eax, DWORD PTR _buffer$2[ebp]
  001a6	8b 4d ec	 mov	 ecx, DWORD PTR _polyline$3[ebp]
  001a9	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 254  : 	
; 255  : 						buffer->polyline.segment = count;

  001ac	8b 45 e8	 mov	 eax, DWORD PTR _buffer$2[ebp]
  001af	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  001b2	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 256  : 	
; 257  : 						if ( points[count].y > middle_scene_slot_height )

  001b5	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  001b9	8b 4d 18	 mov	 ecx, DWORD PTR _points$[ebp]
  001bc	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  001c2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?middle_scene_slot_height@@3MA
  001c9	76 0b		 jbe	 SHORT $LN13@insert_zbi

; 258  : 						{
; 259  : 		
; 260  : 							insert_high_zbuffered_scene_slot_into_3d_scene ( buffer );

  001cb	8b 45 e8	 mov	 eax, DWORD PTR _buffer$2[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_zbuffered_scene_slot_into_3d_scene

; 261  : 						}
; 262  : 						else

  001d4	eb 09		 jmp	 SHORT $LN14@insert_zbi
$LN13@insert_zbi:

; 263  : 						{
; 264  : 	
; 265  : 							insert_low_zbuffered_scene_slot_into_3d_scene ( buffer );

  001d6	8b 45 e8	 mov	 eax, DWORD PTR _buffer$2[ebp]
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 ?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_zbuffered_scene_slot_into_3d_scene
$LN14@insert_zbi:

; 266  : 						}
; 267  : 					}
; 268  : 				}
; 269  : 			}

  001df	e9 0e ff ff ff	 jmp	 $LN2@insert_zbi
$LN3@insert_zbi:

; 270  : 		}
; 271  : 	}
; 272  : 
; 273  : 	return ( TRUE );

  001e4	b8 01 00 00 00	 mov	 eax, 1
$LN1@insert_zbi:

; 274  : }

  001e9	5f		 pop	 edi
  001ea	5e		 pop	 esi
  001eb	5b		 pop	 ebx
  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 14 00	 ret	 20			; 00000014H
?insert_zbiased_polyline_into_3d_scene@@YGHHMHUREAL_COLOUR@@PAUVEC3D@@@Z ENDP ; insert_zbiased_polyline_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dline.c
;	COMDAT ?insert_3d_polyline_into_3d_scene@@YGHHUREAL_COLOUR@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_number_of_points$ = 8					; size = 4
_colour$ = 12						; size = 4
_points$ = 16						; size = 4
?insert_3d_polyline_into_3d_scene@@YGHHUREAL_COLOUR@@PAUVEC3D@@@Z PROC ; insert_3d_polyline_into_3d_scene, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 132  : 
; 133  : 	return ( insert_zbiased_polyline_into_3d_scene ( number_of_points, 0.0, FALSE, colour, points ) );

  00009	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _colour$[ebp]
  00010	51		 push	 ecx
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	0f 57 c0	 xorps	 xmm0, xmm0
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	8b 55 08	 mov	 edx, DWORD PTR _number_of_points$[ebp]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ?insert_zbiased_polyline_into_3d_scene@@YGHHMHUREAL_COLOUR@@PAUVEC3D@@@Z ; insert_zbiased_polyline_into_3d_scene

; 134  : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?insert_3d_polyline_into_3d_scene@@YGHHUREAL_COLOUR@@PAUVEC3D@@@Z ENDP ; insert_3d_polyline_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dline.c
;	COMDAT ?insert_3d_line_into_3d_scene@@YGHUREAL_COLOUR@@PAUVEC3D@@1@Z
_TEXT	SEGMENT
_new_points$ = -24					; size = 24
_colour$ = 8						; size = 4
_point1$ = 12						; size = 4
_point2$ = 16						; size = 4
?insert_3d_line_into_3d_scene@@YGHUREAL_COLOUR@@PAUVEC3D@@1@Z PROC ; insert_3d_line_into_3d_scene, COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 116  : 
; 117  : 	vec3d
; 118  : 		new_points[2];
; 119  : 
; 120  : 	new_points[0] = *point1;

  00009	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8d 54 0d e8	 lea	 edx, DWORD PTR _new_points$[ebp+ecx]
  00015	8b 45 0c	 mov	 eax, DWORD PTR _point1$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 0a		 mov	 DWORD PTR [edx], ecx
  0001c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00022	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00025	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 121  : 	new_points[1] = *point2;

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	c1 e0 00	 shl	 eax, 0
  00030	8d 4c 05 e8	 lea	 ecx, DWORD PTR _new_points$[ebp+eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _point2$[ebp]
  00037	8b 02		 mov	 eax, DWORD PTR [edx]
  00039	89 01		 mov	 DWORD PTR [ecx], eax
  0003b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00041	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00044	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 122  : 
; 123  : 	return ( insert_zbiased_polyline_into_3d_scene ( 2, 0.0, FALSE, colour, new_points ) );

  00047	8d 45 e8	 lea	 eax, DWORD PTR _new_points$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _colour$[ebp]
  0004e	51		 push	 ecx
  0004f	6a 00		 push	 0
  00051	51		 push	 ecx
  00052	0f 57 c0	 xorps	 xmm0, xmm0
  00055	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005a	6a 02		 push	 2
  0005c	e8 00 00 00 00	 call	 ?insert_zbiased_polyline_into_3d_scene@@YGHHMHUREAL_COLOUR@@PAUVEC3D@@@Z ; insert_zbiased_polyline_into_3d_scene

; 124  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 0c 00	 ret	 12			; 0000000cH
?insert_3d_line_into_3d_scene@@YGHUREAL_COLOUR@@PAUVEC3D@@1@Z ENDP ; insert_3d_line_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dline.c
;	COMDAT ?reset_3d_polylines@@YGXXZ
_TEXT	SEGMENT
?reset_3d_polylines@@YGXXZ PROC				; reset_3d_polylines, COMDAT

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 104  : 
; 105  : 	number_of_3d_polylines = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_3d_polylines@@3HA, 0 ; number_of_3d_polylines

; 106  : 
; 107  : 	number_of_3d_polyline_points = 0;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_3d_polyline_points@@3HA, 0 ; number_of_3d_polyline_points

; 108  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?reset_3d_polylines@@YGXXZ ENDP				; reset_3d_polylines
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
END
