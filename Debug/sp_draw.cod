; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\effect\sprite\sp_draw.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_fmodf
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?overload_sprite_draw_functions@@YGXXZ		; overload_sprite_draw_functions
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??draw_local_3d_object@@YGXPAUENTITY@@M@Z@4JA ; `draw_local_3d_object'::`1'::__LINE__Var
PUBLIC	??_C@_0FD@HCCLLIA@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@406fe00000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@bf800000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_fmod:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?frac@@YGMM@Z:PROC				; frac
EXTRN	?get_texture_animation_number_of_frames@@YGHW4TEXTURE_ANIMATION_INDICES@@@Z:PROC ; get_texture_animation_number_of_frames
EXTRN	?get_texture_animation_texture_pointer@@YGPAUSCREEN@@W4TEXTURE_ANIMATION_INDICES@@H@Z:PROC ; get_texture_animation_texture_pointer
EXTRN	?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z:PROC ; insert_zbiased_object_into_3d_scene
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA:BYTE ; fn_get_local_entity_attitude_matrix
EXTRN	?fn_draw_local_entity_3d_object@@3PAP6GXPAUENTITY@@M@ZA:BYTE ; fn_draw_local_entity_3d_object
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	__fltused:DWORD
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@HCCLLIA@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FD@HCCLLIA@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nhv'
	DB	'90\projects\eech\aphavoc\source\entity\special\effect\sprite\'
	DB	'sp_draw.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_local_3d_object@@YGXPAUENTITY@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_local_3d_object@@YGXPAUENTITY@@M@Z@4JA DD 050H ; `draw_local_3d_object'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\sprite\sp_draw.c
;	COMDAT ?draw_local_3d_object@@YGXPAUENTITY@@M@Z
_TEXT	SEGMENT
tv481 = -192						; size = 8
tv240 = -192						; size = 4
tv220 = -192						; size = 4
tv199 = -192						; size = 4
tv291 = -188						; size = 4
tv232 = -188						; size = 4
tv212 = -188						; size = 4
tv191 = -188						; size = 4
$T1 = -184						; size = 4
_m$2 = -116						; size = 36
_raw_position$3 = -80					; size = 4
_offset$4 = -76						; size = 4
_alpha$5 = -72						; size = 4
_blue$6 = -68						; size = 4
_green$7 = -64						; size = 4
_red$8 = -60						; size = 4
_v$9 = -56						; size = 4
_parent$ = -52						; size = 4
_number_of_frames$ = -48				; size = 4
_frame$ = -44						; size = 4
_lifescale$ = -40					; size = 4
_spr$ = -36						; size = 32
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_range$ = 12						; size = 4
?draw_local_3d_object@@YGXPAUENTITY@@M@Z PROC		; draw_local_3d_object, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 81   : 
; 82   : 	sprite
; 83   : 		*raw;
; 84   : 
; 85   : 	object_3d_sprite
; 86   : 		spr;
; 87   : 
; 88   : 	float
; 89   : 		lifescale;
; 90   : 
; 91   : 	int
; 92   : 		frame,
; 93   : 		number_of_frames;
; 94   : 	
; 95   : 	entity
; 96   : 		*parent;
; 97   : 
; 98   : 	raw = (sprite *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 99   : 
; 100  : 	if ( raw->effect_lifetime < 0.0 )

  00015	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00018	f3 0f 5a 40 30	 cvtss2sd xmm0, DWORD PTR [eax+48]
  0001d	0f 57 c9	 xorps	 xmm1, xmm1
  00020	66 0f 2f c8	 comisd	 xmm1, xmm0
  00024	76 05		 jbe	 SHORT $LN2@draw_local

; 101  : 	{
; 102  : 		return;

  00026	e9 0d 06 00 00	 jmp	 $LN1@draw_local
$LN2@draw_local:

; 103  : 	}
; 104  : 
; 105  : 	//
; 106  : 	// set the sprite dependant on the effect_lifetime
; 107  : 	//
; 108  : 
; 109  : 	lifescale = raw->effect_lifetime / raw->sprite_lifetime;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00031	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00036	f3 0f 5e 41 34	 divss	 xmm0, DWORD PTR [ecx+52]
  0003b	f3 0f 11 45 d8	 movss	 DWORD PTR _lifescale$[ebp], xmm0

; 110  : 
; 111  : 	number_of_frames = get_texture_animation_number_of_frames ( raw->animated_texture );

  00040	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00043	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ?get_texture_animation_number_of_frames@@YGHW4TEXTURE_ANIMATION_INDICES@@@Z ; get_texture_animation_number_of_frames
  0004c	89 45 d0	 mov	 DWORD PTR _number_of_frames$[ebp], eax

; 112  : 	
; 113  : 	if ((raw->animation_frequency == 0.0) || (lifescale == 0.0) || (number_of_frames == 1))

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00052	f3 0f 5a 40 28	 cvtss2sd xmm0, DWORD PTR [eax+40]
  00057	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0005f	9f		 lahf
  00060	f6 c4 44	 test	 ah, 68			; 00000044H
  00063	7b 19		 jnp	 SHORT $LN5@draw_local
  00065	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _lifescale$[ebp]
  0006a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00072	9f		 lahf
  00073	f6 c4 44	 test	 ah, 68			; 00000044H
  00076	7b 06		 jnp	 SHORT $LN5@draw_local
  00078	83 7d d0 01	 cmp	 DWORD PTR _number_of_frames$[ebp], 1
  0007c	75 09		 jne	 SHORT $LN3@draw_local
$LN5@draw_local:

; 114  : 	{
; 115  : 		frame = 0;

  0007e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _frame$[ebp], 0

; 116  : 	}
; 117  : 	else

  00085	eb 69		 jmp	 SHORT $LN4@draw_local
$LN3@draw_local:

; 118  : 	{
; 119  : 		float
; 120  : 			v;
; 121  : 
; 122  : 		v = lifescale * raw->animation_frequency;

  00087	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0008a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _lifescale$[ebp]
  0008f	f3 0f 59 40 28	 mulss	 xmm0, DWORD PTR [eax+40]
  00094	f3 0f 11 45 c8	 movss	 DWORD PTR _v$9[ebp], xmm0

; 123  : 
; 124  : 		v = frac (v);

  00099	51		 push	 ecx
  0009a	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _v$9[ebp]
  0009f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a4	e8 00 00 00 00	 call	 ?frac@@YGMM@Z		; frac
  000a9	d9 5d c8	 fstp	 DWORD PTR _v$9[ebp]

; 125  : 
; 126  : 		v *= (float)number_of_frames;

  000ac	f3 0f 2a 45 d0	 cvtsi2ss xmm0, DWORD PTR _number_of_frames$[ebp]
  000b1	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _v$9[ebp]
  000b6	f3 0f 11 45 c8	 movss	 DWORD PTR _v$9[ebp], xmm0

; 127  : 
; 128  : 		convert_float_to_int (v, &frame);

  000bb	8d 45 d4	 lea	 eax, DWORD PTR _frame$[ebp]
  000be	50		 push	 eax
  000bf	51		 push	 ecx
  000c0	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _v$9[ebp]
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 129  : 
; 130  : 		//
; 131  : 		// Because "lifescale" should always be less than 1.0, frame should also always be less than number_of_frames,
; 132  : 		//  but check just in case
; 133  : 		//
; 134  : 
; 135  : 		frame = min (frame, number_of_frames - 1);

  000cf	8b 45 d0	 mov	 eax, DWORD PTR _number_of_frames$[ebp]
  000d2	83 e8 01	 sub	 eax, 1
  000d5	89 85 48 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000db	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000e1	51		 push	 ecx
  000e2	8d 55 d4	 lea	 edx, DWORD PTR _frame$[ebp]
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  000eb	8b 00		 mov	 eax, DWORD PTR [eax]
  000ed	89 45 d4	 mov	 DWORD PTR _frame$[ebp], eax
$LN4@draw_local:

; 136  : 	}
; 137  : 
; 138  : 	spr.texture = get_texture_animation_texture_pointer ( raw->animated_texture, frame );

  000f0	8b 45 d4	 mov	 eax, DWORD PTR _frame$[ebp]
  000f3	50		 push	 eax
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  000f7	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  000fa	52		 push	 edx
  000fb	e8 00 00 00 00	 call	 ?get_texture_animation_texture_pointer@@YGPAUSCREEN@@W4TEXTURE_ANIMATION_INDICES@@H@Z ; get_texture_animation_texture_pointer
  00100	89 45 f8	 mov	 DWORD PTR _spr$[ebp+28], eax

; 139  : 
; 140  : 	spr.additive = raw->additive;

  00103	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00106	8a 48 54	 mov	 cl, BYTE PTR [eax+84]
  00109	80 e1 01	 and	 cl, 1
  0010c	0f b6 d1	 movzx	 edx, cl
  0010f	89 55 f4	 mov	 DWORD PTR _spr$[ebp+24], edx

; 141  : 
; 142  : 	if ( raw->additive )

  00112	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00115	8a 48 54	 mov	 cl, BYTE PTR [eax+84]
  00118	80 e1 01	 and	 cl, 1
  0011b	0f b6 d1	 movzx	 edx, cl
  0011e	85 d2		 test	 edx, edx
  00120	0f 84 a5 00 00
	00		 je	 $LN6@draw_local

; 143  : 	{
; 144  : 		float
; 145  : 			red,
; 146  : 			green,
; 147  : 			blue;
; 148  : 
; 149  : 		spr.alpha = 255;

  00126	c6 45 eb ff	 mov	 BYTE PTR _spr$[ebp+15], 255 ; 000000ffH

; 150  : 
; 151  : 		red = (float)raw->colour_red * ( 1.0 - lifescale );

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0012d	0f b6 48 50	 movzx	 ecx, BYTE PTR [eax+80]
  00131	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00135	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00139	f3 0f 5a 4d d8	 cvtss2sd xmm1, DWORD PTR _lifescale$[ebp]
  0013e	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00146	f2 0f 5c d1	 subsd	 xmm2, xmm1
  0014a	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  0014e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00152	f3 0f 11 45 c4	 movss	 DWORD PTR _red$8[ebp], xmm0

; 152  : 		green = (float)raw->colour_green * ( 1.0 - lifescale );

  00157	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0015a	0f b6 48 51	 movzx	 ecx, BYTE PTR [eax+81]
  0015e	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00162	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00166	f3 0f 5a 4d d8	 cvtss2sd xmm1, DWORD PTR _lifescale$[ebp]
  0016b	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00173	f2 0f 5c d1	 subsd	 xmm2, xmm1
  00177	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  0017b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0017f	f3 0f 11 45 c0	 movss	 DWORD PTR _green$7[ebp], xmm0

; 153  : 		blue = (float)raw->colour_blue * ( 1.0 - lifescale );

  00184	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00187	0f b6 48 52	 movzx	 ecx, BYTE PTR [eax+82]
  0018b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0018f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00193	f3 0f 5a 4d d8	 cvtss2sd xmm1, DWORD PTR _lifescale$[ebp]
  00198	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  001a0	f2 0f 5c d1	 subsd	 xmm2, xmm1
  001a4	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  001a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ac	f3 0f 11 45 bc	 movss	 DWORD PTR _blue$6[ebp], xmm0

; 154  : 
; 155  : 		spr.red = (unsigned char)red;

  001b1	f3 0f 2c 45 c4	 cvttss2si eax, DWORD PTR _red$8[ebp]
  001b6	88 45 ea	 mov	 BYTE PTR _spr$[ebp+14], al

; 156  : 		spr.green = (unsigned char)green;

  001b9	f3 0f 2c 45 c0	 cvttss2si eax, DWORD PTR _green$7[ebp]
  001be	88 45 e9	 mov	 BYTE PTR _spr$[ebp+13], al

; 157  : 		spr.blue = (unsigned char)blue;

  001c1	f3 0f 2c 45 bc	 cvttss2si eax, DWORD PTR _blue$6[ebp]
  001c6	88 45 e8	 mov	 BYTE PTR _spr$[ebp+12], al

; 158  : 	}
; 159  : 	else

  001c9	eb 45		 jmp	 SHORT $LN7@draw_local
$LN6@draw_local:

; 160  : 	{
; 161  : 		float
; 162  : 			alpha;
; 163  : 
; 164  : 		alpha = 255.0 * ( 1.0 - lifescale );

  001cb	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _lifescale$[ebp]
  001d0	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001d8	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001dc	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@406fe00000000000
  001e4	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001e8	f3 0f 11 45 b8	 movss	 DWORD PTR _alpha$5[ebp], xmm0

; 165  : 
; 166  : 		spr.alpha = (unsigned char)alpha;

  001ed	f3 0f 2c 45 b8	 cvttss2si eax, DWORD PTR _alpha$5[ebp]
  001f2	88 45 eb	 mov	 BYTE PTR _spr$[ebp+15], al

; 167  : 
; 168  : 		spr.red = raw->colour_red;

  001f5	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001f8	8a 48 50	 mov	 cl, BYTE PTR [eax+80]
  001fb	88 4d ea	 mov	 BYTE PTR _spr$[ebp+14], cl

; 169  : 		spr.green = raw->colour_green;

  001fe	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00201	8a 48 51	 mov	 cl, BYTE PTR [eax+81]
  00204	88 4d e9	 mov	 BYTE PTR _spr$[ebp+13], cl

; 170  : 		spr.blue = raw->colour_blue;

  00207	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0020a	8a 48 52	 mov	 cl, BYTE PTR [eax+82]
  0020d	88 4d e8	 mov	 BYTE PTR _spr$[ebp+12], cl
$LN7@draw_local:

; 171  : 	}
; 172  : 
; 173  : 	spr.roll = wrap_angle( ( raw->rotation_rate * raw->effect_lifetime * PI ) );		//temp

  00210	51		 push	 ecx
  00211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00219	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00221	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00224	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00229	f3 0f 59 41 30	 mulss	 xmm0, DWORD PTR [ecx+48]
  0022e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  00236	51		 push	 ecx
  00237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023c	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00241	d9 5d f0	 fstp	 DWORD PTR _spr$[ebp+20]

; 174  : 
; 175  : 	spr.radius = raw->start_scale + ((raw->end_scale - raw->start_scale) * lifescale);

  00244	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00247	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0024a	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  0024f	f3 0f 5c 41 38	 subss	 xmm0, DWORD PTR [ecx+56]
  00254	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _lifescale$[ebp]
  00259	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0025c	f3 0f 58 42 38	 addss	 xmm0, DWORD PTR [edx+56]
  00261	f3 0f 11 45 ec	 movss	 DWORD PTR _spr$[ebp+16], xmm0

; 176  : 
; 177  : 	parent = get_local_entity_parent (en, LIST_TYPE_SPECIAL_EFFECT);

  00266	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0026a	74 0d		 je	 SHORT $LN13@draw_local
  0026c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0026f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00271	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv191[ebp], ecx
  00277	eb 24		 jmp	 SHORT $LN14@draw_local
$LN13@draw_local:
  00279	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_local_3d_object@@YGXPAUENTITY@@M@Z@4JA
  0027f	83 c2 61	 add	 edx, 97			; 00000061H
  00282	52		 push	 edx
  00283	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HCCLLIA@c?3?2users?2nhv90?2projects?2eech?2ap@
  00288	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0028d	50		 push	 eax
  0028e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00293	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv191[ebp], 0
$LN14@draw_local:
  0029d	b9 01 00 00 00	 mov	 ecx, 1
  002a2	85 c9		 test	 ecx, ecx
  002a4	74 0c		 je	 SHORT $LN15@draw_local
  002a6	c7 85 40 ff ff
	ff 24 00 00 00	 mov	 DWORD PTR tv199[ebp], 36 ; 00000024H
  002b0	eb 24		 jmp	 SHORT $LN16@draw_local
$LN15@draw_local:
  002b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_local_3d_object@@YGXPAUENTITY@@M@Z@4JA
  002b8	83 c2 61	 add	 edx, 97			; 00000061H
  002bb	52		 push	 edx
  002bc	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HCCLLIA@c?3?2users?2nhv90?2projects?2eech?2ap@
  002c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002c6	50		 push	 eax
  002c7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002cc	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN16@draw_local:
  002d6	6a 24		 push	 36			; 00000024H
  002d8	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002db	51		 push	 ecx
  002dc	69 95 44 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv191[ebp], 180
  002e6	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv199[ebp]
  002ec	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  002f3	ff d1		 call	 ecx
  002f5	89 45 cc	 mov	 DWORD PTR _parent$[ebp], eax

; 178  : 
; 179  : 	if (parent)

  002f8	83 7d cc 00	 cmp	 DWORD PTR _parent$[ebp], 0
  002fc	0f 84 08 03 00
	00		 je	 $LN8@draw_local

; 180  : 	{
; 181  : 		vec3d
; 182  : 			*offset,
; 183  : 			*raw_position;
; 184  : 
; 185  : 		matrix3x3
; 186  : 			m;
; 187  : 
; 188  : 		raw_position = get_local_entity_vec3d_ptr (parent, VEC3D_TYPE_POSITION);

  00302	83 7d cc 00	 cmp	 DWORD PTR _parent$[ebp], 0
  00306	74 0d		 je	 SHORT $LN17@draw_local
  00308	8b 45 cc	 mov	 eax, DWORD PTR _parent$[ebp]
  0030b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0030d	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv212[ebp], ecx
  00313	eb 24		 jmp	 SHORT $LN18@draw_local
$LN17@draw_local:
  00315	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_local_3d_object@@YGXPAUENTITY@@M@Z@4JA
  0031b	83 c2 6c	 add	 edx, 108		; 0000006cH
  0031e	52		 push	 edx
  0031f	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HCCLLIA@c?3?2users?2nhv90?2projects?2eech?2ap@
  00324	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00329	50		 push	 eax
  0032a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0032f	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv212[ebp], 0
$LN18@draw_local:
  00339	b9 01 00 00 00	 mov	 ecx, 1
  0033e	85 c9		 test	 ecx, ecx
  00340	74 0c		 je	 SHORT $LN19@draw_local
  00342	c7 85 40 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv220[ebp], 8
  0034c	eb 24		 jmp	 SHORT $LN20@draw_local
$LN19@draw_local:
  0034e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_local_3d_object@@YGXPAUENTITY@@M@Z@4JA
  00354	83 c2 6c	 add	 edx, 108		; 0000006cH
  00357	52		 push	 edx
  00358	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HCCLLIA@c?3?2users?2nhv90?2projects?2eech?2ap@
  0035d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00362	50		 push	 eax
  00363	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00368	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv220[ebp], 0
$LN20@draw_local:
  00372	6a 08		 push	 8
  00374	8b 4d cc	 mov	 ecx, DWORD PTR _parent$[ebp]
  00377	51		 push	 ecx
  00378	6b 95 44 ff ff
	ff 60		 imul	 edx, DWORD PTR tv212[ebp], 96
  0037f	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv220[ebp]
  00385	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0038c	ff d1		 call	 ecx
  0038e	89 45 b0	 mov	 DWORD PTR _raw_position$3[ebp], eax

; 189  : 
; 190  : 		offset = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_RELATIVE_POSITION);

  00391	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00395	74 0d		 je	 SHORT $LN21@draw_local
  00397	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0039a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0039c	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv232[ebp], ecx
  003a2	eb 24		 jmp	 SHORT $LN22@draw_local
$LN21@draw_local:
  003a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_local_3d_object@@YGXPAUENTITY@@M@Z@4JA
  003aa	83 c2 6e	 add	 edx, 110		; 0000006eH
  003ad	52		 push	 edx
  003ae	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HCCLLIA@c?3?2users?2nhv90?2projects?2eech?2ap@
  003b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003b8	50		 push	 eax
  003b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003be	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv232[ebp], 0
$LN22@draw_local:
  003c8	b9 01 00 00 00	 mov	 ecx, 1
  003cd	85 c9		 test	 ecx, ecx
  003cf	74 0c		 je	 SHORT $LN23@draw_local
  003d1	c7 85 40 ff ff
	ff 09 00 00 00	 mov	 DWORD PTR tv240[ebp], 9
  003db	eb 24		 jmp	 SHORT $LN24@draw_local
$LN23@draw_local:
  003dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_local_3d_object@@YGXPAUENTITY@@M@Z@4JA
  003e3	83 c2 6e	 add	 edx, 110		; 0000006eH
  003e6	52		 push	 edx
  003e7	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HCCLLIA@c?3?2users?2nhv90?2projects?2eech?2ap@
  003ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  003f1	50		 push	 eax
  003f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f7	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv240[ebp], 0
$LN24@draw_local:
  00401	6a 09		 push	 9
  00403	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00406	51		 push	 ecx
  00407	6b 95 44 ff ff
	ff 60		 imul	 edx, DWORD PTR tv232[ebp], 96
  0040e	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv240[ebp]
  00414	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0041b	ff d1		 call	 ecx
  0041d	89 45 b4	 mov	 DWORD PTR _offset$4[ebp], eax

; 191  : 
; 192  : 		if (check_zero_3d_vector (offset))

  00420	8b 45 b4	 mov	 eax, DWORD PTR _offset$4[ebp]
  00423	50		 push	 eax
  00424	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00429	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv481[ebp]
  0042f	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv481[ebp]
  00437	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0043f	9f		 lahf
  00440	f6 c4 44	 test	 ah, 68			; 00000044H
  00443	7a 17		 jp	 SHORT $LN10@draw_local

; 193  : 		{
; 194  : 			memcpy (&(spr.position), raw_position, sizeof (vec3d));

  00445	6a 0c		 push	 12			; 0000000cH
  00447	8b 45 b0	 mov	 eax, DWORD PTR _raw_position$3[ebp]
  0044a	50		 push	 eax
  0044b	8d 4d dc	 lea	 ecx, DWORD PTR _spr$[ebp]
  0044e	51		 push	 ecx
  0044f	e8 00 00 00 00	 call	 _memcpy
  00454	83 c4 0c	 add	 esp, 12			; 0000000cH

; 195  : 		}
; 196  : 		else

  00457	e9 ac 01 00 00	 jmp	 $LN11@draw_local
$LN10@draw_local:

; 197  : 		{	
; 198  : 			get_local_entity_attitude_matrix (parent, m);

  0045c	83 7d cc 00	 cmp	 DWORD PTR _parent$[ebp], 0
  00460	74 0d		 je	 SHORT $LN25@draw_local
  00462	8b 45 cc	 mov	 eax, DWORD PTR _parent$[ebp]
  00465	8b 08		 mov	 ecx, DWORD PTR [eax]
  00467	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv291[ebp], ecx
  0046d	eb 24		 jmp	 SHORT $LN26@draw_local
$LN25@draw_local:
  0046f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_local_3d_object@@YGXPAUENTITY@@M@Z@4JA
  00475	83 c2 76	 add	 edx, 118		; 00000076H
  00478	52		 push	 edx
  00479	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HCCLLIA@c?3?2users?2nhv90?2projects?2eech?2ap@
  0047e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00483	50		 push	 eax
  00484	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00489	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv291[ebp], 0
$LN26@draw_local:
  00493	8d 4d 8c	 lea	 ecx, DWORD PTR _m$2[ebp]
  00496	51		 push	 ecx
  00497	8b 55 cc	 mov	 edx, DWORD PTR _parent$[ebp]
  0049a	52		 push	 edx
  0049b	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv291[ebp]
  004a1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA[eax*4]
  004a8	ff d1		 call	 ecx

; 199  : 	
; 200  : 			spr.position.x = raw_position->x + ( ( offset->x * m[0][0] ) + ( offset->y * m[1][0] ) + ( offset->z * m[2][0] ) );

  004aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004af	6b c8 00	 imul	 ecx, eax, 0
  004b2	8d 54 0d 8c	 lea	 edx, DWORD PTR _m$2[ebp+ecx]
  004b6	b8 04 00 00 00	 mov	 eax, 4
  004bb	6b c8 00	 imul	 ecx, eax, 0
  004be	8b 45 b4	 mov	 eax, DWORD PTR _offset$4[ebp]
  004c1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004c5	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  004ca	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004cf	c1 e1 00	 shl	 ecx, 0
  004d2	8d 54 0d 8c	 lea	 edx, DWORD PTR _m$2[ebp+ecx]
  004d6	b8 04 00 00 00	 mov	 eax, 4
  004db	6b c8 00	 imul	 ecx, eax, 0
  004de	8b 45 b4	 mov	 eax, DWORD PTR _offset$4[ebp]
  004e1	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  004e6	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  004eb	f3 0f 58 c1	 addss	 xmm0, xmm1
  004ef	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004f4	d1 e1		 shl	 ecx, 1
  004f6	8d 54 0d 8c	 lea	 edx, DWORD PTR _m$2[ebp+ecx]
  004fa	b8 04 00 00 00	 mov	 eax, 4
  004ff	6b c8 00	 imul	 ecx, eax, 0
  00502	8b 45 b4	 mov	 eax, DWORD PTR _offset$4[ebp]
  00505	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0050a	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  0050f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00513	8b 4d b0	 mov	 ecx, DWORD PTR _raw_position$3[ebp]
  00516	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0051a	f3 0f 11 45 dc	 movss	 DWORD PTR _spr$[ebp], xmm0

; 201  : 			spr.position.y = raw_position->y + ( ( offset->x * m[0][1] ) + ( offset->y * m[1][1] ) + ( offset->z * m[2][1] ) );

  0051f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00524	6b c8 00	 imul	 ecx, eax, 0
  00527	8d 54 0d 8c	 lea	 edx, DWORD PTR _m$2[ebp+ecx]
  0052b	b8 04 00 00 00	 mov	 eax, 4
  00530	c1 e0 00	 shl	 eax, 0
  00533	8b 4d b4	 mov	 ecx, DWORD PTR _offset$4[ebp]
  00536	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0053a	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0053f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00544	c1 e2 00	 shl	 edx, 0
  00547	8d 44 15 8c	 lea	 eax, DWORD PTR _m$2[ebp+edx]
  0054b	b9 04 00 00 00	 mov	 ecx, 4
  00550	c1 e1 00	 shl	 ecx, 0
  00553	8b 55 b4	 mov	 edx, DWORD PTR _offset$4[ebp]
  00556	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  0055b	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  00560	f3 0f 58 c1	 addss	 xmm0, xmm1
  00564	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00569	d1 e0		 shl	 eax, 1
  0056b	8d 4c 05 8c	 lea	 ecx, DWORD PTR _m$2[ebp+eax]
  0056f	ba 04 00 00 00	 mov	 edx, 4
  00574	c1 e2 00	 shl	 edx, 0
  00577	8b 45 b4	 mov	 eax, DWORD PTR _offset$4[ebp]
  0057a	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0057f	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  00584	f3 0f 58 c1	 addss	 xmm0, xmm1
  00588	8b 4d b0	 mov	 ecx, DWORD PTR _raw_position$3[ebp]
  0058b	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00590	f3 0f 11 45 e0	 movss	 DWORD PTR _spr$[ebp+4], xmm0

; 202  : 			spr.position.z = raw_position->z + ( ( offset->x * m[0][2] ) + ( offset->y * m[1][2] ) + ( offset->z * m[2][2] ) );

  00595	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0059a	6b c8 00	 imul	 ecx, eax, 0
  0059d	8d 54 0d 8c	 lea	 edx, DWORD PTR _m$2[ebp+ecx]
  005a1	b8 04 00 00 00	 mov	 eax, 4
  005a6	d1 e0		 shl	 eax, 1
  005a8	8b 4d b4	 mov	 ecx, DWORD PTR _offset$4[ebp]
  005ab	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  005af	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  005b4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005b9	c1 e2 00	 shl	 edx, 0
  005bc	8d 44 15 8c	 lea	 eax, DWORD PTR _m$2[ebp+edx]
  005c0	b9 04 00 00 00	 mov	 ecx, 4
  005c5	d1 e1		 shl	 ecx, 1
  005c7	8b 55 b4	 mov	 edx, DWORD PTR _offset$4[ebp]
  005ca	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  005cf	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  005d4	f3 0f 58 c1	 addss	 xmm0, xmm1
  005d8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005dd	d1 e0		 shl	 eax, 1
  005df	8d 4c 05 8c	 lea	 ecx, DWORD PTR _m$2[ebp+eax]
  005e3	ba 04 00 00 00	 mov	 edx, 4
  005e8	d1 e2		 shl	 edx, 1
  005ea	8b 45 b4	 mov	 eax, DWORD PTR _offset$4[ebp]
  005ed	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  005f2	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  005f7	f3 0f 58 c1	 addss	 xmm0, xmm1
  005fb	8b 4d b0	 mov	 ecx, DWORD PTR _raw_position$3[ebp]
  005fe	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00603	f3 0f 11 45 e4	 movss	 DWORD PTR _spr$[ebp+8], xmm0
$LN11@draw_local:

; 203  : 		}
; 204  : 	}
; 205  : 	else

  00608	eb 15		 jmp	 SHORT $LN9@draw_local
$LN8@draw_local:

; 206  : 	{
; 207  : 		memcpy (&(spr.position), &(raw->eff.position), sizeof (vec3d));

  0060a	6a 0c		 push	 12			; 0000000cH
  0060c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0060f	83 c0 04	 add	 eax, 4
  00612	50		 push	 eax
  00613	8d 4d dc	 lea	 ecx, DWORD PTR _spr$[ebp]
  00616	51		 push	 ecx
  00617	e8 00 00 00 00	 call	 _memcpy
  0061c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@draw_local:

; 208  : 	}
; 209  : 
; 210  : 	insert_zbiased_object_into_3d_scene (OBJECT_3D_DRAW_TYPE_SPRITE, &spr, -1.0);

  0061f	51		 push	 ecx
  00620	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00628	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062d	8d 45 dc	 lea	 eax, DWORD PTR _spr$[ebp]
  00630	50		 push	 eax
  00631	6a 10		 push	 16			; 00000010H
  00633	e8 00 00 00 00	 call	 ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene
$LN1@draw_local:

; 211  : }

  00638	5f		 pop	 edi
  00639	5e		 pop	 esi
  0063a	5b		 pop	 ebx
  0063b	8b e5		 mov	 esp, ebp
  0063d	5d		 pop	 ebp
  0063e	c2 08 00	 ret	 8
?draw_local_3d_object@@YGXPAUENTITY@@M@Z ENDP		; draw_local_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\sprite\sp_draw.c
;	COMDAT ?overload_sprite_draw_functions@@YGXXZ
_TEXT	SEGMENT
?overload_sprite_draw_functions@@YGXXZ PROC		; overload_sprite_draw_functions, COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 219  : 	fn_draw_local_entity_3d_object[ENTITY_TYPE_SPRITE]	= draw_local_3d_object;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 21	 imul	 ecx, eax, 33
  00011	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_draw_local_entity_3d_object@@3PAP6GXPAUENTITY@@M@ZA[ecx], OFFSET ?draw_local_3d_object@@YGXPAUENTITY@@M@Z ; draw_local_3d_object

; 220  : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?overload_sprite_draw_functions@@YGXXZ ENDP		; overload_sprite_draw_functions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
END
