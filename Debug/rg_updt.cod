; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?helicopter_groups_count@@3HA			; helicopter_groups_count
PUBLIC	?fixed_wing_groups_count@@3HA			; fixed_wing_groups_count
PUBLIC	?routed_vehicle_groups_count@@3HA		; routed_vehicle_groups_count
PUBLIC	?ship_groups_count@@3HA				; ship_groups_count
PUBLIC	?helicopter_groups@@3PAHA			; helicopter_groups
PUBLIC	?fixed_wing_groups@@3PAHA			; fixed_wing_groups
PUBLIC	?routed_vehicle_groups@@3PAHA			; routed_vehicle_groups
PUBLIC	?ship_groups@@3PAHA				; ship_groups
_DATA	SEGMENT
?helicopter_groups_count@@3HA DD 06H			; helicopter_groups_count
?fixed_wing_groups_count@@3HA DD 04H			; fixed_wing_groups_count
?routed_vehicle_groups_count@@3HA DD 07H		; routed_vehicle_groups_count
?ship_groups_count@@3HA DD 02H				; ship_groups_count
?helicopter_groups@@3PAHA DD 04H			; helicopter_groups
	DD	00H
	DD	02H
	DD	07H
	DD	03H
	DD	06H
?fixed_wing_groups@@3PAHA DD 09H			; fixed_wing_groups
	DD	0aH
	DD	0bH
	DD	08H
?routed_vehicle_groups@@3PAHA DD 0fH			; routed_vehicle_groups
	DD	010H
	DD	011H
	DD	012H
?ship_groups@@3PAHA DD 017H				; ship_groups
	DD	018H
_DATA	ENDS
PUBLIC	?overload_regen_update_functions@@YGXXZ		; overload_regen_update_functions
PUBLIC	?regen_update@@YGPAUENTITY@@PAU1@@Z		; regen_update
PUBLIC	?add_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@W4ENTITY_TYPES@@HH@Z ; add_entity_to_regen_queue
PUBLIC	?add_default_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@H@Z ; add_default_entity_to_regen_queue
PUBLIC	?initialise_regen_queues@@YGXXZ			; initialise_regen_queues
PUBLIC	?increment_regen_queue_size@@YGHW4ENTITY_SIDES@@W4ENTITY_TYPES@@H@Z ; increment_regen_queue_size
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	??$max@H@std@@YGABHABH0@Z			; std::max<int>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA ; `regen_update'::`1'::__LINE__Var
PUBLIC	??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0P@EGAPGAAN@e1?9?$DOtype?5?$CB?$DN?5?91@	; `string'
PUBLIC	??_C@_0BD@HIGFJKME@e1?9?$DOsub_type?5?$CB?$DN?5?91@ ; `string'
PUBLIC	??_C@_0BA@GCALLPFL@e1?9?$DOgroup?5?$CB?$DN?5?91@ ; `string'
PUBLIC	??_C@_0P@PLKEBNBG@transport_task@		; `string'
PUBLIC	??_C@_0N@KDBEGNKB@transport_wp@			; `string'
PUBLIC	??_C@_0GL@PNDINEJN@RG_UPDT?3?5?$CFs?5creating?5?$CFs?5?$CI?$CFd?$CJ?5at@ ; `string'
PUBLIC	??_C@_0BF@IJFOHHPI@?$CFs?5reserves?5left?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0DM@LGKDBHII@RG_UPDT?3?5illegal?5regen?5sub?5type@ ; `string'
PUBLIC	??_C@_0BN@CHKCOPAF@RG_UPDT?3?5Unknown?5entity?5type@ ; `string'
PUBLIC	??_C@_0DC@CHFBAEFP@RG_UPDT?3?5Invalid?5Side?5?$CFd?5For?5De@ ; `string'
PUBLIC	?__LINE__Var@?0??regen_queue_insert@@YGXW4ENTITY_SIDES@@HPAUREGEN_LIST_ELEMENT@@@Z@4JA ; `regen_queue_insert'::`1'::__LINE__Var
PUBLIC	??_C@_0CM@EGAGAAMM@?$CIm1?9?$DOcount?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIm1?9?$DOcount?5@ ; `string'
PUBLIC	?__LINE__Var@?0??regen_queue_use@@YGXW4ENTITY_SIDES@@H@Z@4JA ; `regen_queue_use'::`1'::__LINE__Var
PUBLIC	??_C@_0CL@KLEEGIPG@?$CIm1?9?$DOcount?5?$DO?50?$CJ?5?$CG?$CG?5?$CIm1?9?$DOcount?5?$DM@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@41f00000
PUBLIC	__real@459c4000
PUBLIC	__real@4e6e6b28
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memset:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?get_sqr_2d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_sqr_2d_range
EXTRN	?open_client_server_entity_loading_doors@@YGXPAUENTITY@@@Z:PROC ; open_client_server_entity_loading_doors
EXTRN	?close_client_server_entity_loading_doors@@YGXPAUENTITY@@@Z:PROC ; close_client_server_entity_loading_doors
EXTRN	?close_client_server_entity_cargo_doors@@YGXPAUENTITY@@@Z:PROC ; close_client_server_entity_cargo_doors
EXTRN	?get_local_force_entity@@YGPAUENTITY@@W4ENTITY_SIDES@@@Z:PROC ; get_local_force_entity
EXTRN	?create_client_server_guide_entity@@YGPAUENTITY@@PAU1@0I@Z:PROC ; create_client_server_guide_entity
EXTRN	?attach_group_member_to_guide_entity@@YGXPAUENTITY@@0@Z:PROC ; attach_group_member_to_guide_entity
EXTRN	?attach_group_to_guide_entity@@YGXPAUENTITY@@0@Z:PROC ; attach_group_to_guide_entity
EXTRN	?get_local_entity_landing_entity@@YGPAUENTITY@@PAU1@H@Z:PROC ; get_local_entity_landing_entity
EXTRN	?get_local_landing_entity_task@@YGPAUENTITY@@PAU1@H@Z:PROC ; get_local_landing_entity_task
EXTRN	?check_available_landing_route_lock@@YGHPAUENTITY@@@Z:PROC ; check_available_landing_route_lock
EXTRN	?get_regen_frequency_difficulty_modifier@@YGMXZ:PROC ; get_regen_frequency_difficulty_modifier
EXTRN	?get_closest_side_road_node@@YGHW4ENTITY_SIDES@@PAUVEC3D@@M@Z:PROC ; get_closest_side_road_node
EXTRN	?create_landing_faction_members@@YGPAUENTITY@@PAU1@HHH0PAUVEC3D@@@Z:PROC ; create_landing_faction_members
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?entity_type_database@@3PAUENTITY_TYPE_DATA@@A:BYTE ; entity_type_database
EXTRN	?force_info_catagory_names@@3PAPBDA:BYTE	; force_info_catagory_names
EXTRN	?entity_side_names@@3PAPBDA:BYTE		; entity_side_names
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA:BYTE ; fn_set_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_set_client_server_entity_int_value@@3PAY1BBH@1P6GXPAUENTITY@@W4INT_TYPES@@H@ZA:BYTE ; fn_set_client_server_entity_int_value
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_string_type_message@@3PBDB:DWORD ; overload_invalid_string_type_message
EXTRN	?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA:BYTE ; fn_get_local_entity_string
EXTRN	?fn_update_client_server_entity@@3PAY01P6GXPAUENTITY@@@ZA:BYTE ; fn_update_client_server_entity
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?aircraft_database@@3PAUAIRCRAFT_DATA@@A:BYTE	; aircraft_database
EXTRN	?vehicle_database@@3PAUVEHICLE_DATA@@A:BYTE	; vehicle_database
EXTRN	?group_database@@3PAUGROUP_DATA@@A:BYTE		; group_database
EXTRN	?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A:BYTE ; regen_queue
EXTRN	?regen_manager@@3PAY05UREGEN_MANAGEMENT_ELEMENT@@A:BYTE ; regen_manager
EXTRN	?regen_frequency@@3PAMA:BYTE			; regen_frequency
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	__fltused:DWORD
;	COMDAT __real@4e6e6b28
CONST	SEGMENT
__real@4e6e6b28 DD 04e6e6b28r			; 1e+09
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KLEEGIPG@?$CIm1?9?$DOcount?5?$DO?50?$CJ?5?$CG?$CG?5?$CIm1?9?$DOcount?5?$DM@
CONST	SEGMENT
??_C@_0CL@KLEEGIPG@?$CIm1?9?$DOcount?5?$DO?50?$CJ?5?$CG?$CG?5?$CIm1?9?$DOcount?5?$DM@ DB '('
	DB	'm1->count > 0) && (m1->count <= m1->size)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??regen_queue_use@@YGXW4ENTITY_SIDES@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??regen_queue_use@@YGXW4ENTITY_SIDES@@H@Z@4JA DD 0335H ; `regen_queue_use'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CM@EGAGAAMM@?$CIm1?9?$DOcount?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIm1?9?$DOcount?5@
CONST	SEGMENT
??_C@_0CM@EGAGAAMM@?$CIm1?9?$DOcount?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIm1?9?$DOcount?5@ DB '('
	DB	'm1->count >= 0) && (m1->count <= m1->size)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??regen_queue_insert@@YGXW4ENTITY_SIDES@@HPAUREGEN_LIST_ELEMENT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??regen_queue_insert@@YGXW4ENTITY_SIDES@@HPAUREGEN_LIST_ELEMENT@@@Z@4JA DD 02fcH ; `regen_queue_insert'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DC@CHFBAEFP@RG_UPDT?3?5Invalid?5Side?5?$CFd?5For?5De@
CONST	SEGMENT
??_C@_0DC@CHFBAEFP@RG_UPDT?3?5Invalid?5Side?5?$CFd?5For?5De@ DB 'RG_UPDT:'
	DB	' Invalid Side %d For Default Entity Regen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CHKCOPAF@RG_UPDT?3?5Unknown?5entity?5type@
CONST	SEGMENT
??_C@_0BN@CHKCOPAF@RG_UPDT?3?5Unknown?5entity?5type@ DB 'RG_UPDT: Unknown'
	DB	' entity type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LGKDBHII@RG_UPDT?3?5illegal?5regen?5sub?5type@
CONST	SEGMENT
??_C@_0DM@LGKDBHII@RG_UPDT?3?5illegal?5regen?5sub?5type@ DB 'RG_UPDT: ill'
	DB	'egal regen sub type: ENTITY_SUB_TYPE_REGEN_NONE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IJFOHHPI@?$CFs?5reserves?5left?3?5?$CFd@
CONST	SEGMENT
??_C@_0BF@IJFOHHPI@?$CFs?5reserves?5left?3?5?$CFd@ DB '%s reserves left: '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GL@PNDINEJN@RG_UPDT?3?5?$CFs?5creating?5?$CFs?5?$CI?$CFd?$CJ?5at@
CONST	SEGMENT
??_C@_0GL@PNDINEJN@RG_UPDT?3?5?$CFs?5creating?5?$CFs?5?$CI?$CFd?$CJ?5at@ DB 'R'
	DB	'G_UPDT: %s creating %s (%d) at keysite %s free landing sites '
	DB	'%d, reserved %d, lock %d, available lock: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KDBEGNKB@transport_wp@
CONST	SEGMENT
??_C@_0N@KDBEGNKB@transport_wp@ DB 'transport_wp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLKEBNBG@transport_task@
CONST	SEGMENT
??_C@_0P@PLKEBNBG@transport_task@ DB 'transport_task', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GCALLPFL@e1?9?$DOgroup?5?$CB?$DN?5?91@
CONST	SEGMENT
??_C@_0BA@GCALLPFL@e1?9?$DOgroup?5?$CB?$DN?5?91@ DB 'e1->group != -1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HIGFJKME@e1?9?$DOsub_type?5?$CB?$DN?5?91@
CONST	SEGMENT
??_C@_0BD@HIGFJKME@e1?9?$DOsub_type?5?$CB?$DN?5?91@ DB 'e1->sub_type != -'
	DB	'1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EGAPGAAN@e1?9?$DOtype?5?$CB?$DN?5?91@
CONST	SEGMENT
??_C@_0P@EGAPGAAN@e1?9?$DOtype?5?$CB?$DN?5?91@ DB 'e1->type != -1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\regen\rg_updt'
	DB	'.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA DD 0c8H ; `regen_update'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YGABHABH0@Z PROC				; std::max<int>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@max
  00021	eb 4a		 jmp	 SHORT $LN2@max
$LN7@max:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 0e 15 00 00	 push	 5390			; 0000150eH
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@max
  00049	cc		 int	 3
$LN12@max:
  0004a	6a 00		 push	 0
  0004c	68 0e 15 00 00	 push	 5390			; 0000150eH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@max
$LN2@max:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@max:

; 5395 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$max@H@std@@YGABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?update_server@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv130 = -72						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?update_server@@YGXPAUENTITY@@@Z PROC			; update_server, COMDAT

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 165  : 
; 166  : 	regen
; 167  : 		*raw;
; 168  : 
; 169  : 	raw = (regen *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 170  : 
; 171  : 	if (!raw->alive)

  00012	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00015	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00018	83 e1 01	 and	 ecx, 1
  0001b	75 02		 jne	 SHORT $LN2@update_ser

; 172  : 	{
; 173  : 		return;

  0001d	eb 5c		 jmp	 SHORT $LN1@update_ser
$LN2@update_ser:

; 174  : 	}
; 175  : 
; 176  : 	raw->sleep -= get_delta_time ();

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00022	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00027	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00032	f3 0f 11 41 38	 movss	 DWORD PTR [ecx+56], xmm0

; 177  : 
; 178  : 	if (raw->sleep <= 0.0)

  00037	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0003a	f3 0f 5a 40 38	 cvtss2sd xmm0, DWORD PTR [eax+56]
  0003f	0f 57 c9	 xorps	 xmm1, xmm1
  00042	66 0f 2f c8	 comisd	 xmm1, xmm0
  00046	72 33		 jb	 SHORT $LN3@update_ser

; 179  : 	{
; 180  : 		regen_update (en);

  00048	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?regen_update@@YGPAUENTITY@@PAU1@@Z ; regen_update

; 181  : 
; 182  : 		raw->sleep = regen_frequency [raw->side] * get_regen_frequency_difficulty_modifier ();

  00051	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00054	8b 70 3c	 mov	 esi, DWORD PTR [eax+60]
  00057	c1 ee 0b	 shr	 esi, 11			; 0000000bH
  0005a	83 e6 03	 and	 esi, 3
  0005d	e8 00 00 00 00	 call	 ?get_regen_frequency_difficulty_modifier@@YGMXZ ; get_regen_frequency_difficulty_modifier
  00062	d9 5d b8	 fstp	 DWORD PTR tv130[ebp]
  00065	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR tv130[ebp]
  0006a	f3 0f 59 04 b5
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?regen_frequency@@3PAMA[esi*4]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00076	f3 0f 11 41 38	 movss	 DWORD PTR [ecx+56], xmm0
$LN3@update_ser:
$LN1@update_ser:

; 183  : 	}
; 184  : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?update_server@@YGXPAUENTITY@@@Z ENDP			; update_server
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?set_regen_queue_size@@YGHPAUREGEN_MANAGEMENT_ELEMENT@@H@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_new_size$ = -4						; size = 4
_m1$ = 8						; size = 4
_size$ = 12						; size = 4
?set_regen_queue_size@@YGHPAUREGEN_MANAGEMENT_ELEMENT@@H@Z PROC ; set_regen_queue_size, COMDAT

; 875  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 876  : 	int
; 877  : 		new_size;
; 878  : 
; 879  : 	// set new queue size
; 880  : 
; 881  : 	new_size = max (size, REGEN_QUEUE_MINIMUM_SIZE);

  00009	c7 45 b8 05 00
	00 00		 mov	 DWORD PTR $T1[ebp], 5
  00010	8d 45 b8	 lea	 eax, DWORD PTR $T1[ebp]
  00013	50		 push	 eax
  00014	8d 4d 0c	 lea	 ecx, DWORD PTR _size$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 55 fc	 mov	 DWORD PTR _new_size$[ebp], edx

; 882  : 
; 883  : 	m1->size = new_size;

  00022	8b 45 08	 mov	 eax, DWORD PTR _m1$[ebp]
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _new_size$[ebp]
  00028	89 08		 mov	 DWORD PTR [eax], ecx

; 884  : 	
; 885  : 	return new_size;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _new_size$[ebp]

; 886  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?set_regen_queue_size@@YGHPAUREGEN_MANAGEMENT_ELEMENT@@H@Z ENDP ; set_regen_queue_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?regen_queue_use@@YGXW4ENTITY_SIDES@@H@Z
_TEXT	SEGMENT
_m1$ = -8						; size = 4
_e1$ = -4						; size = 4
_side$ = 8						; size = 4
_regen_type$ = 12					; size = 4
?regen_queue_use@@YGXW4ENTITY_SIDES@@H@Z PROC		; regen_queue_use, COMDAT

; 821  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 822  : 	regen_list_element
; 823  : 		*e1;
; 824  : 
; 825  : 	regen_management_element
; 826  : 		*m1;
; 827  : 
; 828  : 	m1 = &regen_manager [side][regen_type];

  00009	6b 45 08 48	 imul	 eax, DWORD PTR _side$[ebp], 72
  0000d	6b 4d 0c 0c	 imul	 ecx, DWORD PTR _regen_type$[ebp], 12
  00011	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?regen_manager@@3PAY05UREGEN_MANAGEMENT_ELEMENT@@A[eax+ecx]
  00018	89 55 f8	 mov	 DWORD PTR _m1$[ebp], edx

; 829  : 
; 830  : 	e1 = &regen_queue [side][regen_type][m1->front];

  0001b	6b 45 08 18	 imul	 eax, DWORD PTR _side$[ebp], 24
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR _m1$[ebp]
  00022	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _regen_type$[ebp]
  00029	03 94 88 00 00
	00 00		 add	 edx, DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[eax+ecx*4]
  00030	89 55 fc	 mov	 DWORD PTR _e1$[ebp], edx

; 831  : 
; 832  : 	ASSERT ((m1->count > 0) && (m1->count <= m1->size));

  00033	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  00036	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0003a	7e 0d		 jle	 SHORT $LN3@regen_queu
  0003c	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _m1$[ebp]
  00042	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00045	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00047	7e 18		 jle	 SHORT $LN2@regen_queu
$LN3@regen_queu:
  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_queue_use@@YGXW4ENTITY_SIDES@@H@Z@4JA
  0004e	83 c0 0b	 add	 eax, 11			; 0000000bH
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KLEEGIPG@?$CIm1?9?$DOcount?5?$DO?50?$CJ?5?$CG?$CG?5?$CIm1?9?$DOcount?5?$DM@
  0005c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@regen_queu:

; 833  : /*
; 834  : 	#if DEBUG_MODULE
; 835  : 	
; 836  : 		debug_log ("REGENED: Type:%d Subtype:%d Group:%d Side:%d",
; 837  : 									e1->type,
; 838  : 									e1->sub_type,
; 839  : 									e1->group,
; 840  : 									side);
; 841  : 	#endif
; 842  : */
; 843  : 	// clear the element in the reqen queue - not really neccesary... but good form
; 844  : 
; 845  : 	if (regen_type == ENTITY_SUB_TYPE_REGEN_PEOPLE)

  00061	83 7d 0c 03	 cmp	 DWORD PTR _regen_type$[ebp], 3
  00065	75 02		 jne	 SHORT $LN4@regen_queu

; 846  : 	{
; 847  : 
; 848  : 		// don't do if person... we want the regen queue always full
; 849  : 
; 850  : 		return;

  00067	eb 41		 jmp	 SHORT $LN1@regen_queu
$LN4@regen_queu:

; 851  : 	}
; 852  : 
; 853  : 	e1->type = -1;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _e1$[ebp]
  0006c	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 854  : 	e1->sub_type = -1;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _e1$[ebp]
  00075	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 855  : 	e1->group = -1;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _e1$[ebp]
  0007f	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 856  : 
; 857  : 	// update queue front marker
; 858  : 
; 859  : 	m1->front = (m1->front + 1) % m1->size;

  00086	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  00089	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0008c	83 c0 01	 add	 eax, 1
  0008f	8b 4d f8	 mov	 ecx, DWORD PTR _m1$[ebp]
  00092	99		 cdq
  00093	f7 39		 idiv	 DWORD PTR [ecx]
  00095	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  00098	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 860  : 
; 861  : 	m1->count --;

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  0009e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a1	83 e9 01	 sub	 ecx, 1
  000a4	8b 55 f8	 mov	 edx, DWORD PTR _m1$[ebp]
  000a7	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN1@regen_queu:

; 862  : 
; 863  : 	#if DEBUG_MODULE
; 864  : 	
; 865  : 	output_regen_data (side, regen_type);
; 866  : 
; 867  : 	#endif
; 868  : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
?regen_queue_use@@YGXW4ENTITY_SIDES@@H@Z ENDP		; regen_queue_use
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?regen_queue_insert@@YGXW4ENTITY_SIDES@@HPAUREGEN_LIST_ELEMENT@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_rear$ = -12						; size = 4
_m1$ = -8						; size = 4
_e1$ = -4						; size = 4
_side$ = 8						; size = 4
_regen_type$ = 12					; size = 4
_insert_me$ = 16					; size = 4
?regen_queue_insert@@YGXW4ENTITY_SIDES@@HPAUREGEN_LIST_ELEMENT@@@Z PROC ; regen_queue_insert, COMDAT

; 764  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  : 	regen_list_element
; 766  : 		*e1;
; 767  : 
; 768  : 	regen_management_element
; 769  : 		*m1;
; 770  : 
; 771  : 	int
; 772  : 		rear;
; 773  : 
; 774  : 	m1 = &regen_manager [side][regen_type];

  00009	6b 45 08 48	 imul	 eax, DWORD PTR _side$[ebp], 72
  0000d	6b 4d 0c 0c	 imul	 ecx, DWORD PTR _regen_type$[ebp], 12
  00011	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?regen_manager@@3PAY05UREGEN_MANAGEMENT_ELEMENT@@A[eax+ecx]
  00018	89 55 f8	 mov	 DWORD PTR _m1$[ebp], edx

; 775  : 
; 776  : 	ASSERT ((m1->count >= 0) && (m1->count <= m1->size));

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  0001e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00022	7c 0d		 jl	 SHORT $LN3@regen_queu
  00024	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _m1$[ebp]
  0002a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	7e 18		 jle	 SHORT $LN2@regen_queu
$LN3@regen_queu:
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_queue_insert@@YGXW4ENTITY_SIDES@@HPAUREGEN_LIST_ELEMENT@@@Z@4JA
  00036	83 c0 0c	 add	 eax, 12			; 0000000cH
  00039	50		 push	 eax
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@EGAGAAMM@?$CIm1?9?$DOcount?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIm1?9?$DOcount?5@
  00044	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@regen_queu:

; 777  : 
; 778  : 	rear = (m1->front + m1->count) % m1->size;

  00049	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  0004c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _m1$[ebp]
  00052	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _m1$[ebp]
  00058	99		 cdq
  00059	f7 39		 idiv	 DWORD PTR [ecx]
  0005b	89 55 f4	 mov	 DWORD PTR _rear$[ebp], edx

; 779  : 
; 780  : 	e1 = &regen_queue [side][regen_type][rear];

  0005e	6b 45 08 18	 imul	 eax, DWORD PTR _side$[ebp], 24
  00062	6b 4d f4 0c	 imul	 ecx, DWORD PTR _rear$[ebp], 12
  00066	8b 55 0c	 mov	 edx, DWORD PTR _regen_type$[ebp]
  00069	03 8c 90 00 00
	00 00		 add	 ecx, DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[eax+edx*4]
  00070	89 4d fc	 mov	 DWORD PTR _e1$[ebp], ecx

; 781  : 
; 782  : 	// copy dead entity details into regen queue
; 783  : 	e1->type = insert_me->type;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _e1$[ebp]
  00076	8b 4d 10	 mov	 ecx, DWORD PTR _insert_me$[ebp]
  00079	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007b	89 10		 mov	 DWORD PTR [eax], edx

; 784  : 
; 785  : 	e1->sub_type = insert_me->sub_type;

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _e1$[ebp]
  00080	8b 4d 10	 mov	 ecx, DWORD PTR _insert_me$[ebp]
  00083	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00086	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 786  : 
; 787  : 	e1->group = insert_me->group;

  00089	8b 45 fc	 mov	 eax, DWORD PTR _e1$[ebp]
  0008c	8b 4d 10	 mov	 ecx, DWORD PTR _insert_me$[ebp]
  0008f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00092	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 788  : 
; 789  : 	// update queue markers
; 790  : 
; 791  : 	if (m1->count == m1->size)

  00095	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _m1$[ebp]
  0009b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0009e	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000a0	75 17		 jne	 SHORT $LN4@regen_queu

; 792  : 	{
; 793  : 		m1->front = (m1->front + 1) % m1->size;

  000a2	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  000a5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a8	83 c0 01	 add	 eax, 1
  000ab	8b 4d f8	 mov	 ecx, DWORD PTR _m1$[ebp]
  000ae	99		 cdq
  000af	f7 39		 idiv	 DWORD PTR [ecx]
  000b1	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  000b4	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 794  : 	}
; 795  : 	else

  000b7	eb 21		 jmp	 SHORT $LN5@regen_queu
$LN4@regen_queu:

; 796  : 	{
; 797  : 		m1->count = min ((m1->count + 1), m1->size);

  000b9	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  000bc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000bf	83 c1 01	 add	 ecx, 1
  000c2	89 4d b0	 mov	 DWORD PTR $T1[ebp], ecx
  000c5	8b 55 f8	 mov	 edx, DWORD PTR _m1$[ebp]
  000c8	52		 push	 edx
  000c9	8d 45 b0	 lea	 eax, DWORD PTR $T1[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  000d2	8b 4d f8	 mov	 ecx, DWORD PTR _m1$[ebp]
  000d5	8b 10		 mov	 edx, DWORD PTR [eax]
  000d7	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN5@regen_queu:

; 798  : 	}
; 799  : 	
; 800  : 	ASSERT ((m1->count >= 0) && (m1->count <= m1->size));

  000da	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  000dd	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000e1	7c 0d		 jl	 SHORT $LN7@regen_queu
  000e3	8b 45 f8	 mov	 eax, DWORD PTR _m1$[ebp]
  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _m1$[ebp]
  000e9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ec	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000ee	7e 18		 jle	 SHORT $LN1@regen_queu
$LN7@regen_queu:
  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_queue_insert@@YGXW4ENTITY_SIDES@@HPAUREGEN_LIST_ELEMENT@@@Z@4JA
  000f5	83 c0 24	 add	 eax, 36			; 00000024H
  000f8	50		 push	 eax
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@EGAGAAMM@?$CIm1?9?$DOcount?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIm1?9?$DOcount?5@
  00103	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN1@regen_queu:

; 801  : /*
; 802  : 	#if DEBUG_MODULE
; 803  : 	
; 804  : 	debug_log ("INSERTED: Type:%3d Sub:%3d Group:%3d side:%2d",
; 805  : 									e1->type,
; 806  : 									e1->sub_type,
; 807  : 									e1->group,
; 808  : 									side);
; 809  : 
; 810  : 	output_regen_data (side, regen_type);
; 811  : 
; 812  : 	#endif
; 813  : 	*/
; 814  : }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 0c 00	 ret	 12			; 0000000cH
?regen_queue_insert@@YGXW4ENTITY_SIDES@@HPAUREGEN_LIST_ELEMENT@@@Z ENDP ; regen_queue_insert
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?get_regen_sub_type@@YGHH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_regen_type$ = -4					; size = 4
_type$ = 8						; size = 4
?get_regen_sub_type@@YGHH@Z PROC			; get_regen_sub_type, COMDAT

; 596  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 597  : 	int
; 598  : 		regen_type;
; 599  : 
; 600  : 	switch (type)

  00009	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0000c	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00012	83 e9 05	 sub	 ecx, 5
  00015	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  00018	83 7d b8 17	 cmp	 DWORD PTR tv64[ebp], 23	; 00000017H
  0001c	77 4b		 ja	 SHORT $LN10@get_regen_
  0001e	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00021	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN12@get_regen_[edx]
  00028	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@get_regen_[eax*4]
$LN4@get_regen_:

; 601  : 	{
; 602  : 		case ENTITY_TYPE_FIXED_WING:
; 603  : 		{
; 604  : 			regen_type = ENTITY_SUB_TYPE_REGEN_FIXED_WING;

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _regen_type$[ebp], 0

; 605  : 
; 606  : 			break;

  00036	eb 3e		 jmp	 SHORT $LN2@get_regen_
$LN5@get_regen_:

; 607  : 		}
; 608  : 		
; 609  : 		case ENTITY_TYPE_HELICOPTER:
; 610  : 		{
; 611  : 			regen_type = ENTITY_SUB_TYPE_REGEN_HELICOPTER;

  00038	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _regen_type$[ebp], 1

; 612  : 
; 613  : 			break;

  0003f	eb 35		 jmp	 SHORT $LN2@get_regen_
$LN6@get_regen_:

; 614  : 		}
; 615  : 		
; 616  : 		case ENTITY_TYPE_ROUTED_VEHICLE:
; 617  : 		{
; 618  : 			regen_type = ENTITY_SUB_TYPE_REGEN_GROUND;

  00041	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _regen_type$[ebp], 2

; 619  : 
; 620  : 			break;

  00048	eb 2c		 jmp	 SHORT $LN2@get_regen_
$LN7@get_regen_:

; 621  : 		}
; 622  : 		
; 623  : 		case ENTITY_TYPE_SHIP_VEHICLE:
; 624  : 		{
; 625  : 			regen_type = ENTITY_SUB_TYPE_REGEN_SEA;

  0004a	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _regen_type$[ebp], 4

; 626  : 
; 627  : 			break;

  00051	eb 23		 jmp	 SHORT $LN2@get_regen_
$LN8@get_regen_:

; 628  : 		}
; 629  : 		
; 630  : 		case ENTITY_TYPE_PERSON:
; 631  : 		{
; 632  : 			regen_type = ENTITY_SUB_TYPE_REGEN_PEOPLE;

  00053	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _regen_type$[ebp], 3

; 633  : 
; 634  : 			break;

  0005a	eb 1a		 jmp	 SHORT $LN2@get_regen_
$LN9@get_regen_:

; 635  : 		}
; 636  : 		
; 637  : 		case ENTITY_SUB_TYPE_REGEN_NONE:
; 638  : 		{
; 639  : 			debug_fatal ("RG_UPDT: illegal regen sub type: ENTITY_SUB_TYPE_REGEN_NONE");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LGKDBHII@RG_UPDT?3?5illegal?5regen?5sub?5type@
  00061	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00066	83 c4 04	 add	 esp, 4
$LN10@get_regen_:

; 640  : 		}
; 641  : 		
; 642  : 		default:
; 643  : 		{
; 644  : 			debug_fatal ("RG_UPDT: Unknown entity type");

  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CHKCOPAF@RG_UPDT?3?5Unknown?5entity?5type@
  0006e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00073	83 c4 04	 add	 esp, 4
$LN2@get_regen_:

; 645  : 		}
; 646  : 		
; 647  : 	}
; 648  : 
; 649  : 	return regen_type;

  00076	8b 45 fc	 mov	 eax, DWORD PTR _regen_type$[ebp]

; 650  : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
  00082	66 90		 npad	 2
$LN13@get_regen_:
  00084	00 00 00 00	 DD	 $LN9@get_regen_
  00088	00 00 00 00	 DD	 $LN4@get_regen_
  0008c	00 00 00 00	 DD	 $LN5@get_regen_
  00090	00 00 00 00	 DD	 $LN8@get_regen_
  00094	00 00 00 00	 DD	 $LN6@get_regen_
  00098	00 00 00 00	 DD	 $LN7@get_regen_
  0009c	00 00 00 00	 DD	 $LN10@get_regen_
$LN12@get_regen_:
  000a0	00		 DB	 0
  000a1	06		 DB	 6
  000a2	06		 DB	 6
  000a3	06		 DB	 6
  000a4	06		 DB	 6
  000a5	01		 DB	 1
  000a6	06		 DB	 6
  000a7	06		 DB	 6
  000a8	06		 DB	 6
  000a9	02		 DB	 2
  000aa	06		 DB	 6
  000ab	06		 DB	 6
  000ac	06		 DB	 6
  000ad	06		 DB	 6
  000ae	03		 DB	 3
  000af	06		 DB	 6
  000b0	06		 DB	 6
  000b1	06		 DB	 6
  000b2	04		 DB	 4
  000b3	06		 DB	 6
  000b4	06		 DB	 6
  000b5	06		 DB	 6
  000b6	06		 DB	 6
  000b7	05		 DB	 5
?get_regen_sub_type@@YGHH@Z ENDP			; get_regen_sub_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?increment_regen_queue_size@@YGHW4ENTITY_SIDES@@W4ENTITY_TYPES@@H@Z
_TEXT	SEGMENT
_num_elements$ = -36					; size = 4
_regen_type$ = -32					; size = 4
_new_size$ = -28					; size = 4
_old_size$ = -24					; size = 4
_count$ = -20						; size = 4
_front$ = -16						; size = 4
_m1$ = -12						; size = 4
_temp$ = -8						; size = 4
_e1$ = -4						; size = 4
_side$ = 8						; size = 4
_type$ = 12						; size = 4
_shift$ = 16						; size = 4
?increment_regen_queue_size@@YGHW4ENTITY_SIDES@@W4ENTITY_TYPES@@H@Z PROC ; increment_regen_queue_size, COMDAT

; 952  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 953  : 	regen_list_element
; 954  : 		*e1,
; 955  : 		*temp;
; 956  : 
; 957  : 	regen_management_element
; 958  : 		*m1;
; 959  : 
; 960  : 	int
; 961  : 		front,
; 962  : 		count,
; 963  : 		old_size,
; 964  : 		new_size,
; 965  : 		regen_type,
; 966  : 		num_elements;
; 967  : 
; 968  : 	regen_type = get_regen_sub_type (type);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?get_regen_sub_type@@YGHH@Z ; get_regen_sub_type
  00012	89 45 e0	 mov	 DWORD PTR _regen_type$[ebp], eax

; 969  : 
; 970  : 	m1 = &regen_manager [side][regen_type];

  00015	6b 45 08 48	 imul	 eax, DWORD PTR _side$[ebp], 72
  00019	6b 4d e0 0c	 imul	 ecx, DWORD PTR _regen_type$[ebp], 12
  0001d	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?regen_manager@@3PAY05UREGEN_MANAGEMENT_ELEMENT@@A[eax+ecx]
  00024	89 55 f4	 mov	 DWORD PTR _m1$[ebp], edx

; 971  : 
; 972  : 	e1 = &regen_queue [side][regen_type][m1->front];

  00027	6b 45 08 18	 imul	 eax, DWORD PTR _side$[ebp], 24
  0002b	8b 4d f4	 mov	 ecx, DWORD PTR _m1$[ebp]
  0002e	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  00032	8b 4d e0	 mov	 ecx, DWORD PTR _regen_type$[ebp]
  00035	03 94 88 00 00
	00 00		 add	 edx, DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[eax+ecx*4]
  0003c	89 55 fc	 mov	 DWORD PTR _e1$[ebp], edx

; 973  : 
; 974  : 	#if DEBUG_MODULE
; 975  : 
; 976  : 	debug_log ("Growing Regen Queue %s - Type %s by %d", entity_side_short_names [side], entity_sub_type_regen_names [regen_type], shift);
; 977  : 
; 978  : 	debug_log ("OLD LIST:");
; 979  : 
; 980  : 	output_regen_data (side, regen_type);
; 981  : 	
; 982  : 	#endif
; 983  : 
; 984  : 	// copy old queue
; 985  : 
; 986  : 	//temp = safe_malloc (sizeof (regen_list_element) * m1->size);
; 987  : 
; 988  : 	//memcpy (temp, regen_queue[side][regen_type], sizeof (regen_list_element) * m1->size);
; 989  : 
; 990  : 	// get old queue size
; 991  : 
; 992  : 	old_size = m1->size;

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _m1$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 4d e8	 mov	 DWORD PTR _old_size$[ebp], ecx

; 993  : 
; 994  : 	// update queue size
; 995  : 
; 996  : 	new_size = m1->size + shift;

  00047	8b 45 f4	 mov	 eax, DWORD PTR _m1$[ebp]
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	03 4d 10	 add	 ecx, DWORD PTR _shift$[ebp]
  0004f	89 4d e4	 mov	 DWORD PTR _new_size$[ebp], ecx

; 997  : 
; 998  : 	// set new size
; 999  : 	
; 1000 : 	new_size = set_regen_queue_size (m1, new_size);

  00052	8b 45 e4	 mov	 eax, DWORD PTR _new_size$[ebp]
  00055	50		 push	 eax
  00056	8b 4d f4	 mov	 ecx, DWORD PTR _m1$[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ?set_regen_queue_size@@YGHPAUREGEN_MANAGEMENT_ELEMENT@@H@Z ; set_regen_queue_size
  0005f	89 45 e4	 mov	 DWORD PTR _new_size$[ebp], eax

; 1001 : 
; 1002 : 	// free old queue
; 1003 : 
; 1004 : 	//safe_free (regen_queue[side][regen_type]);
; 1005 : 
; 1006 : 	// allocate new queue
; 1007 : 
; 1008 : 	//regen_queue[side][regen_type] = safe_malloc (sizeof (regen_list_element) * m1->size);
; 1009 : 	temp = (regen_list_element *) safe_malloc (sizeof (regen_list_element) * m1->size);

  00062	8b 45 f4	 mov	 eax, DWORD PTR _m1$[ebp]
  00065	6b 08 0c	 imul	 ecx, DWORD PTR [eax], 12
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0006e	89 45 f8	 mov	 DWORD PTR _temp$[ebp], eax

; 1010 : 
; 1011 : 	//memset (regen_queue [side][regen_type], -1, sizeof (regen_list_element) * m1->size);
; 1012 : 	memset (temp, -1, sizeof (regen_list_element) * m1->size);

  00071	8b 45 f4	 mov	 eax, DWORD PTR _m1$[ebp]
  00074	6b 08 0c	 imul	 ecx, DWORD PTR [eax], 12
  00077	51		 push	 ecx
  00078	6a ff		 push	 -1
  0007a	8b 55 f8	 mov	 edx, DWORD PTR _temp$[ebp]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 _memset
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1013 : 
; 1014 : 	count = 0;

  00086	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 1015 : 	front = m1->front;

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _m1$[ebp]
  00090	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00093	89 4d f0	 mov	 DWORD PTR _front$[ebp], ecx

; 1016 : 
; 1017 : 	num_elements = min (m1->count, new_size);

  00096	8d 45 e4	 lea	 eax, DWORD PTR _new_size$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d f4	 mov	 ecx, DWORD PTR _m1$[ebp]
  0009d	83 c1 04	 add	 ecx, 4
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  000a6	8b 10		 mov	 edx, DWORD PTR [eax]
  000a8	89 55 dc	 mov	 DWORD PTR _num_elements$[ebp], edx
$LN2@increment_:

; 1018 : 
; 1019 : 	while (count < num_elements)

  000ab	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  000ae	3b 45 dc	 cmp	 eax, DWORD PTR _num_elements$[ebp]
  000b1	7d 7c		 jge	 SHORT $LN3@increment_

; 1020 : 	{
; 1021 : 		//regen_queue[side][regen_type][count].type = temp [front].type;
; 1022 : 		//regen_queue[side][regen_type][count].sub_type = temp [front].sub_type;
; 1023 : 		//regen_queue[side][regen_type][count].group = temp [front].group;
; 1024 : 		temp [count].type = regen_queue[side][regen_type][front].type;

  000b3	6b 45 08 18	 imul	 eax, DWORD PTR _side$[ebp], 24
  000b7	6b 4d f0 0c	 imul	 ecx, DWORD PTR _front$[ebp], 12
  000bb	8b 55 e0	 mov	 edx, DWORD PTR _regen_type$[ebp]
  000be	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[eax+edx*4]
  000c5	6b 55 ec 0c	 imul	 edx, DWORD PTR _count$[ebp], 12
  000c9	8b 75 f8	 mov	 esi, DWORD PTR _temp$[ebp]
  000cc	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  000cf	89 04 16	 mov	 DWORD PTR [esi+edx], eax

; 1025 : 		temp [count].sub_type = regen_queue[side][regen_type][front].sub_type;

  000d2	6b 45 08 18	 imul	 eax, DWORD PTR _side$[ebp], 24
  000d6	6b 4d f0 0c	 imul	 ecx, DWORD PTR _front$[ebp], 12
  000da	8b 55 e0	 mov	 edx, DWORD PTR _regen_type$[ebp]
  000dd	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[eax+edx*4]
  000e4	6b 55 ec 0c	 imul	 edx, DWORD PTR _count$[ebp], 12
  000e8	8b 75 f8	 mov	 esi, DWORD PTR _temp$[ebp]
  000eb	8b 44 08 04	 mov	 eax, DWORD PTR [eax+ecx+4]
  000ef	89 44 16 04	 mov	 DWORD PTR [esi+edx+4], eax

; 1026 : 		temp [count].group = regen_queue[side][regen_type][front].group;

  000f3	6b 45 08 18	 imul	 eax, DWORD PTR _side$[ebp], 24
  000f7	6b 4d f0 0c	 imul	 ecx, DWORD PTR _front$[ebp], 12
  000fb	8b 55 e0	 mov	 edx, DWORD PTR _regen_type$[ebp]
  000fe	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[eax+edx*4]
  00105	6b 55 ec 0c	 imul	 edx, DWORD PTR _count$[ebp], 12
  00109	8b 75 f8	 mov	 esi, DWORD PTR _temp$[ebp]
  0010c	8b 44 08 08	 mov	 eax, DWORD PTR [eax+ecx+8]
  00110	89 44 16 08	 mov	 DWORD PTR [esi+edx+8], eax

; 1027 : 
; 1028 : 		count++;

  00114	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00117	83 c0 01	 add	 eax, 1
  0011a	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax

; 1029 : 
; 1030 : 		front = (front + 1) % old_size;

  0011d	8b 45 f0	 mov	 eax, DWORD PTR _front$[ebp]
  00120	83 c0 01	 add	 eax, 1
  00123	99		 cdq
  00124	f7 7d e8	 idiv	 DWORD PTR _old_size$[ebp]
  00127	89 55 f0	 mov	 DWORD PTR _front$[ebp], edx

; 1031 : 	}

  0012a	e9 7c ff ff ff	 jmp	 $LN2@increment_
$LN3@increment_:

; 1032 : 
; 1033 : 	m1->count = count;

  0012f	8b 45 f4	 mov	 eax, DWORD PTR _m1$[ebp]
  00132	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  00135	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1034 : 	m1->front = 0;

  00138	8b 45 f4	 mov	 eax, DWORD PTR _m1$[ebp]
  0013b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1035 : 
; 1036 : 	safe_free (regen_queue[side][regen_type]);

  00142	6b 45 08 18	 imul	 eax, DWORD PTR _side$[ebp], 24
  00146	8b 4d e0	 mov	 ecx, DWORD PTR _regen_type$[ebp]
  00149	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[eax+ecx*4]
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1037 : 	regen_queue[side][regen_type] = temp;

  00156	6b 45 08 18	 imul	 eax, DWORD PTR _side$[ebp], 24
  0015a	8b 4d e0	 mov	 ecx, DWORD PTR _regen_type$[ebp]
  0015d	8b 55 f8	 mov	 edx, DWORD PTR _temp$[ebp]
  00160	89 94 88 00 00
	00 00		 mov	 DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[eax+ecx*4], edx

; 1038 : 
; 1039 : 	#if DEBUG_MODULE
; 1040 : 
; 1041 : 	debug_log ("NEW LIST:");
; 1042 : 
; 1043 : 	output_regen_data (side, regen_type);
; 1044 : 	
; 1045 : 	#endif
; 1046 : 
; 1047 : 	return new_size;

  00167	8b 45 e4	 mov	 eax, DWORD PTR _new_size$[ebp]

; 1048 : }

  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c2 0c 00	 ret	 12			; 0000000cH
?increment_regen_queue_size@@YGHW4ENTITY_SIDES@@W4ENTITY_TYPES@@H@Z ENDP ; increment_regen_queue_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?initialise_regen_queues@@YGXXZ
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_m1$ = -4						; size = 4
?initialise_regen_queues@@YGXXZ PROC			; initialise_regen_queues, COMDAT

; 893  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 894  : 	regen_management_element
; 895  : 		*m1;
; 896  : 
; 897  : 	int
; 898  : 		i,
; 899  : 		j;
; 900  : 		
; 901  : 	memset (regen_manager, 0, sizeof (regen_management_element) * NUM_ENTITY_SIDES * NUM_ENTITY_SUB_TYPE_REGENS);

  00009	68 d8 00 00 00	 push	 216			; 000000d8H
  0000e	6a 00		 push	 0
  00010	68 00 00 00 00	 push	 OFFSET ?regen_manager@@3PAY05UREGEN_MANAGEMENT_ELEMENT@@A ; regen_manager
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 902  : 
; 903  : 	for (i = 0; i < NUM_ENTITY_SIDES; i++)

  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00024	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00026	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initialise:
  0002f	83 7d f8 03	 cmp	 DWORD PTR _i$[ebp], 3
  00033	7d 7c		 jge	 SHORT $LN3@initialise

; 904  : 	{
; 905  : 		for (j = 0; j < NUM_ENTITY_SUB_TYPE_REGENS; j++)

  00035	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0003c	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  0003e	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00041	83 c0 01	 add	 eax, 1
  00044	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
$LN7@initialise:
  00047	83 7d f4 06	 cmp	 DWORD PTR _j$[ebp], 6
  0004b	7d 5f		 jge	 SHORT $LN6@initialise

; 906  : 		{
; 907  : 			m1 = &regen_manager [i][j];

  0004d	6b 45 f8 48	 imul	 eax, DWORD PTR _i$[ebp], 72
  00051	6b 4d f4 0c	 imul	 ecx, DWORD PTR _j$[ebp], 12
  00055	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?regen_manager@@3PAY05UREGEN_MANAGEMENT_ELEMENT@@A[eax+ecx]
  0005c	89 55 fc	 mov	 DWORD PTR _m1$[ebp], edx

; 908  : 
; 909  : 			if (m1->size <= 0)

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _m1$[ebp]
  00062	83 38 00	 cmp	 DWORD PTR [eax], 0
  00065	7f 09		 jg	 SHORT $LN11@initialise

; 910  : 			{
; 911  : 				m1->size = REGEN_QUEUE_DEFAULT_SIZE;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _m1$[ebp]
  0006a	c7 00 05 00 00
	00		 mov	 DWORD PTR [eax], 5
$LN11@initialise:

; 912  : 			}
; 913  : 
; 914  : 			regen_queue [i][j] = (regen_list_element *) safe_malloc (sizeof (regen_list_element) * m1->size);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _m1$[ebp]
  00073	6b 08 0c	 imul	 ecx, DWORD PTR [eax], 12
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0007c	6b 55 f8 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  00080	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  00083	89 84 8a 00 00
	00 00		 mov	 DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[edx+ecx*4], eax

; 915  : 
; 916  : 			memset (regen_queue [i][j], -1, sizeof (regen_list_element) * m1->size);

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _m1$[ebp]
  0008d	6b 08 0c	 imul	 ecx, DWORD PTR [eax], 12
  00090	51		 push	 ecx
  00091	6a ff		 push	 -1
  00093	6b 55 f8 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  00097	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  0009a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[edx+eax*4]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _memset
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 917  : 		}

  000aa	eb 92		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 918  : 	}	

  000ac	e9 75 ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 919  : 
; 920  : 	#if HACK_PEOPLE_INTO_REGEN_QUEUE
; 921  : 	{
; 922  : 		int
; 923  : 			i;
; 924  : 		
; 925  : 		for (i = 0; i < 10; i++)

  000b1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000b8	eb 09		 jmp	 SHORT $LN10@initialise
$LN8@initialise:
  000ba	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  000bd	83 c0 01	 add	 eax, 1
  000c0	89 45 f0	 mov	 DWORD PTR _i$1[ebp], eax
$LN10@initialise:
  000c3	83 7d f0 0a	 cmp	 DWORD PTR _i$1[ebp], 10	; 0000000aH
  000c7	7d 1c		 jge	 SHORT $LN1@initialise

; 926  : 		{
; 927  : 			add_entity_to_regen_queue

  000c9	6a 15		 push	 21			; 00000015H
  000cb	6a 20		 push	 32			; 00000020H
  000cd	6a 13		 push	 19			; 00000013H
  000cf	6a 01		 push	 1
  000d1	e8 00 00 00 00	 call	 ?add_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@W4ENTITY_TYPES@@HH@Z ; add_entity_to_regen_queue

; 928  : 			(
; 929  : 				ENTITY_SIDE_BLUE_FORCE,
; 930  : 				ENTITY_TYPE_PERSON,
; 931  : 				ENTITY_SUB_TYPE_VEHICLE_US_INFANTRY,
; 932  : 				ENTITY_SUB_TYPE_GROUP_INFANTRY_PATROL
; 933  : 			);
; 934  : 
; 935  : 			add_entity_to_regen_queue

  000d6	6a 15		 push	 21			; 00000015H
  000d8	6a 23		 push	 35			; 00000023H
  000da	6a 13		 push	 19			; 00000013H
  000dc	6a 02		 push	 2
  000de	e8 00 00 00 00	 call	 ?add_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@W4ENTITY_TYPES@@HH@Z ; add_entity_to_regen_queue

; 936  : 			(
; 937  : 				ENTITY_SIDE_RED_FORCE,
; 938  : 				ENTITY_TYPE_PERSON,
; 939  : 				ENTITY_SUB_TYPE_VEHICLE_CIS_INFANTRY,
; 940  : 				ENTITY_SUB_TYPE_GROUP_INFANTRY_PATROL
; 941  : 			);
; 942  : 		}		

  000e3	eb d5		 jmp	 SHORT $LN8@initialise
$LN1@initialise:

; 943  : 	}
; 944  : 	#endif
; 945  : }

  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
?initialise_regen_queues@@YGXXZ ENDP			; initialise_regen_queues
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?add_default_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@H@Z
_TEXT	SEGMENT
tv64 = -68						; size = 4
_side$ = 8						; size = 4
_group_type$ = 12					; size = 4
?add_default_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@H@Z PROC ; add_default_entity_to_regen_queue, COMDAT

; 729  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 730  : 	switch (side)

  00009	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d bc 01	 cmp	 DWORD PTR tv64[ebp], 1
  00013	74 08		 je	 SHORT $LN4@add_defaul
  00015	83 7d bc 02	 cmp	 DWORD PTR tv64[ebp], 2
  00019	74 27		 je	 SHORT $LN5@add_defaul
  0001b	eb 4a		 jmp	 SHORT $LN6@add_defaul
$LN4@add_defaul:

; 731  : 	{
; 732  : 		case ENTITY_SIDE_BLUE_FORCE:
; 733  : 		{
; 734  : 			add_entity_to_regen_queue (side,

  0001d	8b 45 0c	 mov	 eax, DWORD PTR _group_type$[ebp]
  00020	50		 push	 eax
  00021	6b 4d 0c 64	 imul	 ecx, DWORD PTR _group_type$[ebp], 100
  00025	8b 91 20 00 00
	00		 mov	 edx, DWORD PTR ?group_database@@3PAUGROUP_DATA@@A[ecx+32]
  0002b	52		 push	 edx
  0002c	6b 45 0c 64	 imul	 eax, DWORD PTR _group_type$[ebp], 100
  00030	8b 88 1c 00 00
	00		 mov	 ecx, DWORD PTR ?group_database@@3PAUGROUP_DATA@@A[eax+28]
  00036	51		 push	 ecx
  00037	8b 55 08	 mov	 edx, DWORD PTR _side$[ebp]
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 ?add_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@W4ENTITY_TYPES@@HH@Z ; add_entity_to_regen_queue

; 735  : 												group_database [group_type].default_entity_type,
; 736  : 												group_database [group_type].default_blue_force_sub_type,
; 737  : 												group_type);
; 738  : 
; 739  : 			break;

  00040	eb 36		 jmp	 SHORT $LN1@add_defaul
$LN5@add_defaul:

; 740  : 		}
; 741  : 		case ENTITY_SIDE_RED_FORCE:
; 742  : 		{
; 743  : 			add_entity_to_regen_queue (side,

  00042	8b 45 0c	 mov	 eax, DWORD PTR _group_type$[ebp]
  00045	50		 push	 eax
  00046	6b 4d 0c 64	 imul	 ecx, DWORD PTR _group_type$[ebp], 100
  0004a	8b 91 24 00 00
	00		 mov	 edx, DWORD PTR ?group_database@@3PAUGROUP_DATA@@A[ecx+36]
  00050	52		 push	 edx
  00051	6b 45 0c 64	 imul	 eax, DWORD PTR _group_type$[ebp], 100
  00055	8b 88 1c 00 00
	00		 mov	 ecx, DWORD PTR ?group_database@@3PAUGROUP_DATA@@A[eax+28]
  0005b	51		 push	 ecx
  0005c	8b 55 08	 mov	 edx, DWORD PTR _side$[ebp]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ?add_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@W4ENTITY_TYPES@@HH@Z ; add_entity_to_regen_queue

; 744  : 												group_database [group_type].default_entity_type,
; 745  : 												group_database [group_type].default_red_force_sub_type,
; 746  : 												group_type);
; 747  : 
; 748  : 			break;

  00065	eb 11		 jmp	 SHORT $LN1@add_defaul
$LN6@add_defaul:

; 749  : 		}
; 750  : 		default:
; 751  : 		{
; 752  : 			debug_fatal ("RG_UPDT: Invalid Side %d For Default Entity Regen", side);

  00067	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  0006a	50		 push	 eax
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CHFBAEFP@RG_UPDT?3?5Invalid?5Side?5?$CFd?5For?5De@
  00070	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00075	83 c4 08	 add	 esp, 8
$LN1@add_defaul:

; 753  : 
; 754  : 			break;
; 755  : 		}
; 756  : 	}
; 757  : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
?add_default_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@H@Z ENDP ; add_default_entity_to_regen_queue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?add_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@W4ENTITY_TYPES@@HH@Z
_TEXT	SEGMENT
_regen_type$ = -16					; size = 4
_e1$ = -12						; size = 12
_side$ = 8						; size = 4
_type$ = 12						; size = 4
_sub_type$ = 16						; size = 4
_group_type$ = 20					; size = 4
?add_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@W4ENTITY_TYPES@@HH@Z PROC ; add_entity_to_regen_queue, COMDAT

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 658  : 	regen_list_element
; 659  : 		e1;
; 660  : 
; 661  : 	int
; 662  : 		regen_type;
; 663  : 		
; 664  : 	e1.type = type;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR _e1$[ebp], eax

; 665  : 	e1.sub_type = sub_type;	

  0000f	8b 45 10	 mov	 eax, DWORD PTR _sub_type$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR _e1$[ebp+4], eax

; 666  : 	e1.group = group_type;

  00015	8b 45 14	 mov	 eax, DWORD PTR _group_type$[ebp]
  00018	89 45 fc	 mov	 DWORD PTR _e1$[ebp+8], eax

; 667  : 
; 668  : 	// get index into correct queue
; 669  : 
; 670  : 	regen_type = get_regen_sub_type (e1.type);

  0001b	8b 45 f4	 mov	 eax, DWORD PTR _e1$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?get_regen_sub_type@@YGHH@Z ; get_regen_sub_type
  00024	89 45 f0	 mov	 DWORD PTR _regen_type$[ebp], eax

; 671  : 
; 672  : 	
; 673  : #if DEBUG_MODULE
; 674  : 
; 675  : 	switch (e1.type)
; 676  : 	{
; 677  : 		case ENTITY_TYPE_FIXED_WING:
; 678  : 		{
; 679  : 			regen_ac_debug[e1.sub_type] = 1;
; 680  : 
; 681  : 			break;
; 682  : 		}
; 683  : 		
; 684  : 		case ENTITY_TYPE_HELICOPTER:
; 685  : 		{
; 686  : 			regen_ac_debug[e1.sub_type] = 1;
; 687  : 
; 688  : 			break;
; 689  : 		}
; 690  : 		
; 691  : 		case ENTITY_TYPE_ROUTED_VEHICLE:
; 692  : 		{
; 693  : 			regen_vh_debug[e1.sub_type] = 1;
; 694  : 
; 695  : 			break;
; 696  : 		}
; 697  : 		
; 698  : 		case ENTITY_TYPE_SHIP_VEHICLE:
; 699  : 		{
; 700  : 			regen_vh_debug[e1.sub_type] = 1;
; 701  : 
; 702  : 			break;
; 703  : 		}
; 704  : 		
; 705  : 		case ENTITY_TYPE_PERSON:
; 706  : 		{
; 707  : 			regen_vh_debug[e1.sub_type] = 1;
; 708  : 
; 709  : 			break;
; 710  : 		}
; 711  : 		
; 712  : 		default:
; 713  : 		{
; 714  : 			debug_fatal ("RG_UPDT: Unknown entity type");
; 715  : 		}
; 716  : 	}
; 717  : 
; 718  : #endif
; 719  : 
; 720  : 	// insert entity into regen queue
; 721  : 	regen_queue_insert (side, regen_type, &e1);

  00027	8d 45 f4	 lea	 eax, DWORD PTR _e1$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _regen_type$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 55 08	 mov	 edx, DWORD PTR _side$[ebp]
  00032	52		 push	 edx
  00033	e8 00 00 00 00	 call	 ?regen_queue_insert@@YGXW4ENTITY_SIDES@@HPAUREGEN_LIST_ELEMENT@@@Z ; regen_queue_insert

; 722  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 10 00	 ret	 16			; 00000010H
?add_entity_to_regen_queue@@YGXW4ENTITY_SIDES@@W4ENTITY_TYPES@@HH@Z ENDP ; add_entity_to_regen_queue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?regen_update@@YGPAUENTITY@@PAU1@@Z
_TEXT	SEGMENT
tv876 = -216						; size = 4
tv868 = -212						; size = 4
tv857 = -208						; size = 4
tv841 = -204						; size = 4
tv833 = -200						; size = 4
tv820 = -196						; size = 4
tv812 = -192						; size = 4
tv799 = -188						; size = 4
tv664 = -188						; size = 4
tv791 = -184						; size = 4
tv656 = -184						; size = 4
tv440 = -184						; size = 4
tv778 = -180						; size = 4
tv755 = -180						; size = 4
tv735 = -180						; size = 4
tv706 = -180						; size = 4
tv686 = -180						; size = 4
tv643 = -180						; size = 4
tv616 = -180						; size = 4
tv580 = -180						; size = 4
tv559 = -180						; size = 4
tv537 = -180						; size = 4
tv515 = -180						; size = 4
tv494 = -180						; size = 4
tv469 = -180						; size = 4
tv434 = -180						; size = 4
tv415 = -180						; size = 4
tv395 = -180						; size = 4
tv375 = -180						; size = 4
tv354 = -180						; size = 4
tv335 = -180						; size = 4
tv316 = -180						; size = 4
tv295 = -180						; size = 4
tv226 = -180						; size = 4
tv207 = -180						; size = 4
tv171 = -180						; size = 4
tv151 = -180						; size = 4
tv131 = -180						; size = 4
tv79 = -180						; size = 4
tv770 = -176						; size = 4
tv747 = -176						; size = 4
tv727 = -176						; size = 4
tv698 = -176						; size = 4
tv678 = -176						; size = 4
tv635 = -176						; size = 4
tv608 = -176						; size = 4
tv572 = -176						; size = 4
tv551 = -176						; size = 4
tv529 = -176						; size = 4
tv507 = -176						; size = 4
tv486 = -176						; size = 4
tv462 = -176						; size = 4
tv427 = -176						; size = 4
tv408 = -176						; size = 4
tv387 = -176						; size = 4
tv367 = -176						; size = 4
tv347 = -176						; size = 4
tv328 = -176						; size = 4
tv308 = -176						; size = 4
tv287 = -176						; size = 4
tv219 = -176						; size = 4
tv200 = -176						; size = 4
tv163 = -176						; size = 4
tv143 = -176						; size = 4
tv91 = -176						; size = 4
tv71 = -176						; size = 4
_keysite$1 = -108					; size = 4
_transport_landing$2 = -104				; size = 4
_transport_task$3 = -100				; size = 4
_transport_wp$4 = -96					; size = 4
_best_range$5 = -92					; size = 4
_range$6 = -88						; size = 4
_group$7 = -84						; size = 4
_guide$8 = -80						; size = 4
_member$9 = -76						; size = 4
_building$10 = -72					; size = 4
_route_node$11 = -68					; size = 4
_e1$ = -64						; size = 4
_raw$ = -60						; size = 4
_force_raw$ = -56					; size = 4
_reserve_count$ = -52					; size = 4
_member_number$ = -48					; size = 4
_keysite$ = -44						; size = 4
_landing$ = -40						; size = 4
_force_en$ = -36					; size = 4
_building$ = -32					; size = 4
_member$ = -28						; size = 4
_group$ = -24						; size = 4
_task$ = -20						; size = 4
_wp$ = -16						; size = 4
_group_type$ = -12					; size = 4
_member_type$ = -8					; size = 4
_m1$ = -4						; size = 4
_en$ = 8						; size = 4
?regen_update@@YGPAUENTITY@@PAU1@@Z PROC		; regen_update, COMDAT

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 201  : 
; 202  : 	regen_management_element
; 203  : 		*m1;
; 204  : 
; 205  : 	entity_sub_types
; 206  : 		member_type,
; 207  : 		group_type;
; 208  : 
; 209  : 	entity
; 210  : 		*wp,
; 211  : 		*task,
; 212  : 		*group,
; 213  : 		*member,
; 214  : 		*building,
; 215  : 		*force_en,
; 216  : 		*landing,
; 217  : 		*keysite;
; 218  : 
; 219  : 	unsigned int
; 220  : 		member_number;
; 221  : 
; 222  : 	int
; 223  : 		reserve_count;
; 224  : 
; 225  : 	force
; 226  : 		*force_raw;
; 227  : 
; 228  : 	regen
; 229  : 		*raw;
; 230  : 
; 231  : 	regen_list_element
; 232  : 		*e1;
; 233  : 
; 234  : 	raw = (regen *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d c4	 mov	 DWORD PTR _raw$[ebp], ecx

; 235  : 
; 236  : 	wp = get_local_entity_parent (en, LIST_TYPE_CURRENT_WAYPOINT);

  00015	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00019	74 0d		 je	 SHORT $LN39@regen_upda
  0001b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00026	eb 24		 jmp	 SHORT $LN40@regen_upda
$LN39@regen_upda:
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0002e	83 c2 24	 add	 edx, 36			; 00000024H
  00031	52		 push	 edx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00042	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN40@regen_upda:
  0004c	b9 01 00 00 00	 mov	 ecx, 1
  00051	85 c9		 test	 ecx, ecx
  00053	74 0c		 je	 SHORT $LN41@regen_upda
  00055	c7 85 4c ff ff
	ff 09 00 00 00	 mov	 DWORD PTR tv79[ebp], 9
  0005f	eb 24		 jmp	 SHORT $LN42@regen_upda
$LN41@regen_upda:
  00061	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00067	83 c2 24	 add	 edx, 36			; 00000024H
  0006a	52		 push	 edx
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007b	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN42@regen_upda:
  00085	6a 09		 push	 9
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0008a	51		 push	 ecx
  0008b	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv71[ebp], 180
  00095	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  0009b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  000a2	ff d1		 call	 ecx
  000a4	89 45 f0	 mov	 DWORD PTR _wp$[ebp], eax

; 237  : 
; 238  : 	task = get_local_entity_parent (wp, LIST_TYPE_WAYPOINT);

  000a7	83 7d f0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  000ab	74 0d		 je	 SHORT $LN43@regen_upda
  000ad	8b 45 f0	 mov	 eax, DWORD PTR _wp$[ebp]
  000b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b2	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv91[ebp], ecx
  000b8	eb 24		 jmp	 SHORT $LN44@regen_upda
$LN43@regen_upda:
  000ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  000c0	83 c2 26	 add	 edx, 38			; 00000026H
  000c3	52		 push	 edx
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d4	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv91[ebp], 0
$LN44@regen_upda:
  000de	b9 01 00 00 00	 mov	 ecx, 1
  000e3	85 c9		 test	 ecx, ecx
  000e5	74 0c		 je	 SHORT $LN45@regen_upda
  000e7	c7 85 4c ff ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv131[ebp], 44 ; 0000002cH
  000f1	eb 24		 jmp	 SHORT $LN46@regen_upda
$LN45@regen_upda:
  000f3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  000f9	83 c2 26	 add	 edx, 38			; 00000026H
  000fc	52		 push	 edx
  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00102	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010d	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv131[ebp], 0
$LN46@regen_upda:
  00117	6a 2c		 push	 44			; 0000002cH
  00119	8b 4d f0	 mov	 ecx, DWORD PTR _wp$[ebp]
  0011c	51		 push	 ecx
  0011d	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv91[ebp], 180
  00127	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv131[ebp]
  0012d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00134	ff d1		 call	 ecx
  00136	89 45 ec	 mov	 DWORD PTR _task$[ebp], eax

; 239  : 
; 240  : 	landing = get_local_entity_parent (task, LIST_TYPE_UNASSIGNED_TASK);

  00139	83 7d ec 00	 cmp	 DWORD PTR _task$[ebp], 0
  0013d	74 0d		 je	 SHORT $LN47@regen_upda
  0013f	8b 45 ec	 mov	 eax, DWORD PTR _task$[ebp]
  00142	8b 08		 mov	 ecx, DWORD PTR [eax]
  00144	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv143[ebp], ecx
  0014a	eb 24		 jmp	 SHORT $LN48@regen_upda
$LN47@regen_upda:
  0014c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00152	83 c2 28	 add	 edx, 40			; 00000028H
  00155	52		 push	 edx
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00166	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv143[ebp], 0
$LN48@regen_upda:
  00170	b9 01 00 00 00	 mov	 ecx, 1
  00175	85 c9		 test	 ecx, ecx
  00177	74 0c		 je	 SHORT $LN49@regen_upda
  00179	c7 85 4c ff ff
	ff 28 00 00 00	 mov	 DWORD PTR tv151[ebp], 40 ; 00000028H
  00183	eb 24		 jmp	 SHORT $LN50@regen_upda
$LN49@regen_upda:
  00185	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0018b	83 c2 28	 add	 edx, 40			; 00000028H
  0018e	52		 push	 edx
  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00194	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0019f	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv151[ebp], 0
$LN50@regen_upda:
  001a9	6a 28		 push	 40			; 00000028H
  001ab	8b 4d ec	 mov	 ecx, DWORD PTR _task$[ebp]
  001ae	51		 push	 ecx
  001af	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv143[ebp], 180
  001b9	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv151[ebp]
  001bf	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  001c6	ff d1		 call	 ecx
  001c8	89 45 d8	 mov	 DWORD PTR _landing$[ebp], eax

; 241  : 			
; 242  : 	keysite = get_local_entity_parent (landing, LIST_TYPE_LANDING_SITE);

  001cb	83 7d d8 00	 cmp	 DWORD PTR _landing$[ebp], 0
  001cf	74 0d		 je	 SHORT $LN51@regen_upda
  001d1	8b 45 d8	 mov	 eax, DWORD PTR _landing$[ebp]
  001d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d6	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv163[ebp], ecx
  001dc	eb 24		 jmp	 SHORT $LN52@regen_upda
$LN51@regen_upda:
  001de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  001e4	83 c2 2a	 add	 edx, 42			; 0000002aH
  001e7	52		 push	 edx
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f8	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv163[ebp], 0
$LN52@regen_upda:
  00202	b9 01 00 00 00	 mov	 ecx, 1
  00207	85 c9		 test	 ecx, ecx
  00209	74 0c		 je	 SHORT $LN53@regen_upda
  0020b	c7 85 4c ff ff
	ff 17 00 00 00	 mov	 DWORD PTR tv171[ebp], 23 ; 00000017H
  00215	eb 24		 jmp	 SHORT $LN54@regen_upda
$LN53@regen_upda:
  00217	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0021d	83 c2 2a	 add	 edx, 42			; 0000002aH
  00220	52		 push	 edx
  00221	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00226	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00231	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv171[ebp], 0
$LN54@regen_upda:
  0023b	6a 17		 push	 23			; 00000017H
  0023d	8b 4d d8	 mov	 ecx, DWORD PTR _landing$[ebp]
  00240	51		 push	 ecx
  00241	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv163[ebp], 180
  0024b	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv171[ebp]
  00251	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00258	ff d1		 call	 ecx
  0025a	89 45 d4	 mov	 DWORD PTR _keysite$[ebp], eax

; 243  : 
; 244  : 	force_en = get_local_force_entity ((entity_sides) raw->side);

  0025d	8b 45 c4	 mov	 eax, DWORD PTR _raw$[ebp]
  00260	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00263	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00266	83 e1 03	 and	 ecx, 3
  00269	51		 push	 ecx
  0026a	e8 00 00 00 00	 call	 ?get_local_force_entity@@YGPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_local_force_entity
  0026f	89 45 dc	 mov	 DWORD PTR _force_en$[ebp], eax

; 245  : 
; 246  : 	force_raw = (force *) get_local_entity_data (force_en);

  00272	8b 45 dc	 mov	 eax, DWORD PTR _force_en$[ebp]
  00275	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00278	89 4d c8	 mov	 DWORD PTR _force_raw$[ebp], ecx

; 247  : 
; 248  : 	group_type = NUM_ENTITY_SUB_TYPE_GROUPS;

  0027b	c7 45 f4 1a 00
	00 00		 mov	 DWORD PTR _group_type$[ebp], 26 ; 0000001aH

; 249  : 
; 250  : 	m1 = &regen_manager [raw->side][raw->sub_type];

  00282	8b 45 c4	 mov	 eax, DWORD PTR _raw$[ebp]
  00285	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00288	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  0028b	83 e1 03	 and	 ecx, 3
  0028e	6b d1 48	 imul	 edx, ecx, 72
  00291	8b 45 c4	 mov	 eax, DWORD PTR _raw$[ebp]
  00294	6b 08 0c	 imul	 ecx, DWORD PTR [eax], 12
  00297	8d 94 0a 00 00
	00 00		 lea	 edx, DWORD PTR ?regen_manager@@3PAY05UREGEN_MANAGEMENT_ELEMENT@@A[edx+ecx]
  0029e	89 55 fc	 mov	 DWORD PTR _m1$[ebp], edx

; 251  : 
; 252  : 	//
; 253  : 	// is there anything in the regen queues?
; 254  : 	//
; 255  : 	
; 256  : 	if (m1->count == 0)

  002a1	8b 45 fc	 mov	 eax, DWORD PTR _m1$[ebp]
  002a4	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  002a8	75 07		 jne	 SHORT $LN10@regen_upda

; 257  : 	{
; 258  : 		return NULL;

  002aa	33 c0		 xor	 eax, eax
  002ac	e9 3b 14 00 00	 jmp	 $LN1@regen_upda
$LN10@regen_upda:

; 259  : 	}
; 260  : 
; 261  : 	//
; 262  : 	// Can regen operate
; 263  : 	//
; 264  : 
; 265  : 	building = raw->member_root.first_child;

  002b1	8b 45 c4	 mov	 eax, DWORD PTR _raw$[ebp]
  002b4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002b7	89 4d e0	 mov	 DWORD PTR _building$[ebp], ecx

; 266  : 
; 267  : 	if ((!get_local_entity_int_value (building, INT_TYPE_ALIVE)) || (get_local_entity_int_value (keysite, INT_TYPE_KEYSITE_USABLE_STATE) != KEYSITE_STATE_USABLE))

  002ba	83 7d e0 00	 cmp	 DWORD PTR _building$[ebp], 0
  002be	74 0d		 je	 SHORT $LN55@regen_upda
  002c0	8b 45 e0	 mov	 eax, DWORD PTR _building$[ebp]
  002c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c5	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv200[ebp], ecx
  002cb	eb 20		 jmp	 SHORT $LN56@regen_upda
$LN55@regen_upda:
  002cd	68 0b 01 00 00	 push	 267			; 0000010bH
  002d2	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002dd	52		 push	 edx
  002de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002e3	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv200[ebp], 0
$LN56@regen_upda:
  002ed	b8 01 00 00 00	 mov	 eax, 1
  002f2	85 c0		 test	 eax, eax
  002f4	74 0c		 je	 SHORT $LN57@regen_upda
  002f6	c7 85 4c ff ff
	ff 07 00 00 00	 mov	 DWORD PTR tv207[ebp], 7
  00300	eb 20		 jmp	 SHORT $LN58@regen_upda
$LN57@regen_upda:
  00302	68 0b 01 00 00	 push	 267			; 0000010bH
  00307	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0030c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00312	51		 push	 ecx
  00313	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00318	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN58@regen_upda:
  00322	6a 07		 push	 7
  00324	8b 55 e0	 mov	 edx, DWORD PTR _building$[ebp]
  00327	52		 push	 edx
  00328	69 85 50 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv200[ebp], 1116
  00332	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv207[ebp]
  00338	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0033f	ff d2		 call	 edx
  00341	85 c0		 test	 eax, eax
  00343	0f 84 8b 00 00
	00		 je	 $LN12@regen_upda
  00349	83 7d d4 00	 cmp	 DWORD PTR _keysite$[ebp], 0
  0034d	74 0d		 je	 SHORT $LN59@regen_upda
  0034f	8b 45 d4	 mov	 eax, DWORD PTR _keysite$[ebp]
  00352	8b 08		 mov	 ecx, DWORD PTR [eax]
  00354	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv219[ebp], ecx
  0035a	eb 20		 jmp	 SHORT $LN60@regen_upda
$LN59@regen_upda:
  0035c	68 0b 01 00 00	 push	 267			; 0000010bH
  00361	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00366	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0036c	52		 push	 edx
  0036d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00372	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv219[ebp], 0
$LN60@regen_upda:
  0037c	b8 01 00 00 00	 mov	 eax, 1
  00381	85 c0		 test	 eax, eax
  00383	74 0c		 je	 SHORT $LN61@regen_upda
  00385	c7 85 4c ff ff
	ff 70 00 00 00	 mov	 DWORD PTR tv226[ebp], 112 ; 00000070H
  0038f	eb 20		 jmp	 SHORT $LN62@regen_upda
$LN61@regen_upda:
  00391	68 0b 01 00 00	 push	 267			; 0000010bH
  00396	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0039b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  003a1	51		 push	 ecx
  003a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003a7	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN62@regen_upda:
  003b1	6a 70		 push	 112			; 00000070H
  003b3	8b 55 d4	 mov	 edx, DWORD PTR _keysite$[ebp]
  003b6	52		 push	 edx
  003b7	69 85 50 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv219[ebp], 1116
  003c1	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv226[ebp]
  003c7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  003ce	ff d2		 call	 edx
  003d0	85 c0		 test	 eax, eax
  003d2	74 07		 je	 SHORT $LN11@regen_upda
$LN12@regen_upda:

; 268  : 	{
; 269  : 		#if DEBUG_MODULE
; 270  : 
; 271  : 		debug_log ("RG_UPDT: keysite %s too damaged to regen", get_local_entity_string (keysite, STRING_TYPE_KEYSITE_NAME));
; 272  : 
; 273  : 		#endif
; 274  : 
; 275  : 		return NULL;

  003d4	33 c0		 xor	 eax, eax
  003d6	e9 11 13 00 00	 jmp	 $LN1@regen_upda
$LN11@regen_upda:

; 276  : 	}
; 277  : 
; 278  : 	e1 = &regen_queue [raw->side][raw->sub_type][m1->front];

  003db	8b 45 c4	 mov	 eax, DWORD PTR _raw$[ebp]
  003de	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  003e1	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  003e4	83 e1 03	 and	 ecx, 3
  003e7	6b d1 18	 imul	 edx, ecx, 24
  003ea	8b 45 c4	 mov	 eax, DWORD PTR _raw$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	8b 45 fc	 mov	 eax, DWORD PTR _m1$[ebp]
  003f2	6b 40 08 0c	 imul	 eax, DWORD PTR [eax+8], 12
  003f6	03 84 8a 00 00
	00 00		 add	 eax, DWORD PTR ?regen_queue@@3PAY05PAUREGEN_LIST_ELEMENT@@A[edx+ecx*4]
  003fd	89 45 c0	 mov	 DWORD PTR _e1$[ebp], eax

; 279  : 
; 280  : 	ASSERT (e1->type != -1);

  00400	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  00403	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00406	75 18		 jne	 SHORT $LN13@regen_upda
  00408	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0040d	83 c0 50	 add	 eax, 80			; 00000050H
  00410	50		 push	 eax
  00411	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00416	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EGAPGAAN@e1?9?$DOtype?5?$CB?$DN?5?91@
  0041b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@regen_upda:

; 281  : 	ASSERT (e1->sub_type != -1);

  00420	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  00423	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00427	75 18		 jne	 SHORT $LN14@regen_upda
  00429	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0042e	83 c0 51	 add	 eax, 81			; 00000051H
  00431	50		 push	 eax
  00432	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00437	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HIGFJKME@e1?9?$DOsub_type?5?$CB?$DN?5?91@
  0043c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@regen_upda:

; 282  : 	ASSERT (e1->group != -1);

  00441	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  00444	83 78 08 ff	 cmp	 DWORD PTR [eax+8], -1
  00448	75 18		 jne	 SHORT $LN15@regen_upda
  0044a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0044f	83 c0 52	 add	 eax, 82			; 00000052H
  00452	50		 push	 eax
  00453	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00458	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GCALLPFL@e1?9?$DOgroup?5?$CB?$DN?5?91@
  0045d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@regen_upda:

; 283  : 
; 284  : 	// is there a reserve of this type?
; 285  : 	if ((e1->type == ENTITY_TYPE_FIXED_WING) || (e1->type == ENTITY_TYPE_HELICOPTER))

  00462	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  00465	83 38 0a	 cmp	 DWORD PTR [eax], 10	; 0000000aH
  00468	74 08		 je	 SHORT $LN18@regen_upda
  0046a	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  0046d	83 38 0e	 cmp	 DWORD PTR [eax], 14	; 0000000eH
  00470	75 1f		 jne	 SHORT $LN16@regen_upda
$LN18@regen_upda:

; 286  : 	{
; 287  : 		reserve_count = force_raw->force_info_reserve_hardware[aircraft_database[e1->sub_type].force_info_catagory];

  00472	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  00475	69 48 04 f4 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 244
  0047c	8b 91 40 00 00
	00		 mov	 edx, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+64]
  00482	8b 45 c8	 mov	 eax, DWORD PTR _force_raw$[ebp]
  00485	8b 8c 90 40 03
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+832]
  0048c	89 4d cc	 mov	 DWORD PTR _reserve_count$[ebp], ecx

; 288  : 	}
; 289  : 	else

  0048f	eb 1d		 jmp	 SHORT $LN17@regen_upda
$LN16@regen_upda:

; 290  : 	{
; 291  : 		reserve_count = force_raw->force_info_reserve_hardware[vehicle_database[e1->sub_type].force_info_catagory];

  00491	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  00494	69 48 04 bc 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 188
  0049b	8b 91 34 00 00
	00		 mov	 edx, DWORD PTR ?vehicle_database@@3PAUVEHICLE_DATA@@A[ecx+52]
  004a1	8b 45 c8	 mov	 eax, DWORD PTR _force_raw$[ebp]
  004a4	8b 8c 90 40 03
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+832]
  004ab	89 4d cc	 mov	 DWORD PTR _reserve_count$[ebp], ecx
$LN17@regen_upda:

; 292  : 	}
; 293  : 
; 294  : 	if (reserve_count <= 0)

  004ae	83 7d cc 00	 cmp	 DWORD PTR _reserve_count$[ebp], 0
  004b2	7f 07		 jg	 SHORT $LN19@regen_upda

; 295  : 	{
; 296  : 		return NULL;

  004b4	33 c0		 xor	 eax, eax
  004b6	e9 31 12 00 00	 jmp	 $LN1@regen_upda
$LN19@regen_upda:

; 297  : 	}
; 298  : 
; 299  : 	#if DEBUG_MODULE
; 300  : 
; 301  : 	debug_log ("RG_UPDT: Trying to Regen %s Sub Type %d at %s - reserve count %d",
; 302  : 								get_entity_type_name (e1->type), e1->sub_type,
; 303  : 								get_local_entity_string (keysite, STRING_TYPE_KEYSITE_NAME), reserve_count);
; 304  : 
; 305  : 	#endif
; 306  : 
; 307  : 	//
; 308  : 	// Don't regen if PLAYER landed there
; 309  : 	//
; 310  : 
; 311  : 	group = get_local_entity_first_child (keysite, LIST_TYPE_KEYSITE_GROUP);

  004bb	83 7d d4 00	 cmp	 DWORD PTR _keysite$[ebp], 0
  004bf	74 0d		 je	 SHORT $LN63@regen_upda
  004c1	8b 45 d4	 mov	 eax, DWORD PTR _keysite$[ebp]
  004c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004c6	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv287[ebp], ecx
  004cc	eb 24		 jmp	 SHORT $LN64@regen_upda
$LN63@regen_upda:
  004ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  004d4	83 c2 6f	 add	 edx, 111		; 0000006fH
  004d7	52		 push	 edx
  004d8	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  004dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004e2	50		 push	 eax
  004e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004e8	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv287[ebp], 0
$LN64@regen_upda:
  004f2	b9 01 00 00 00	 mov	 ecx, 1
  004f7	85 c9		 test	 ecx, ecx
  004f9	74 0c		 je	 SHORT $LN65@regen_upda
  004fb	c7 85 4c ff ff
	ff 16 00 00 00	 mov	 DWORD PTR tv295[ebp], 22 ; 00000016H
  00505	eb 24		 jmp	 SHORT $LN66@regen_upda
$LN65@regen_upda:
  00507	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0050d	83 c2 6f	 add	 edx, 111		; 0000006fH
  00510	52		 push	 edx
  00511	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00516	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0051b	50		 push	 eax
  0051c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00521	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv295[ebp], 0
$LN66@regen_upda:
  0052b	6a 16		 push	 22			; 00000016H
  0052d	8b 4d d4	 mov	 ecx, DWORD PTR _keysite$[ebp]
  00530	51		 push	 ecx
  00531	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv287[ebp], 180
  0053b	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv295[ebp]
  00541	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00548	ff d1		 call	 ecx
  0054a	89 45 e8	 mov	 DWORD PTR _group$[ebp], eax
$LN2@regen_upda:

; 312  : 
; 313  : 	while (group)

  0054d	83 7d e8 00	 cmp	 DWORD PTR _group$[ebp], 0
  00551	0f 84 fa 02 00
	00		 je	 $LN3@regen_upda

; 314  : 	{
; 315  : 		member = get_local_entity_first_child (group, LIST_TYPE_MEMBER);

  00557	83 7d e8 00	 cmp	 DWORD PTR _group$[ebp], 0
  0055b	74 0d		 je	 SHORT $LN67@regen_upda
  0055d	8b 45 e8	 mov	 eax, DWORD PTR _group$[ebp]
  00560	8b 08		 mov	 ecx, DWORD PTR [eax]
  00562	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv308[ebp], ecx
  00568	eb 24		 jmp	 SHORT $LN68@regen_upda
$LN67@regen_upda:
  0056a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00570	83 c2 73	 add	 edx, 115		; 00000073H
  00573	52		 push	 edx
  00574	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00579	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0057e	50		 push	 eax
  0057f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00584	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv308[ebp], 0
$LN68@regen_upda:
  0058e	b9 01 00 00 00	 mov	 ecx, 1
  00593	85 c9		 test	 ecx, ecx
  00595	74 0c		 je	 SHORT $LN69@regen_upda
  00597	c7 85 4c ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv316[ebp], 25 ; 00000019H
  005a1	eb 24		 jmp	 SHORT $LN70@regen_upda
$LN69@regen_upda:
  005a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  005a9	83 c2 73	 add	 edx, 115		; 00000073H
  005ac	52		 push	 edx
  005ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  005b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  005b7	50		 push	 eax
  005b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005bd	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv316[ebp], 0
$LN70@regen_upda:
  005c7	6a 19		 push	 25			; 00000019H
  005c9	8b 4d e8	 mov	 ecx, DWORD PTR _group$[ebp]
  005cc	51		 push	 ecx
  005cd	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv308[ebp], 180
  005d7	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv316[ebp]
  005dd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  005e4	ff d1		 call	 ecx
  005e6	89 45 e4	 mov	 DWORD PTR _member$[ebp], eax
$LN4@regen_upda:

; 316  : 
; 317  : 		while (member)

  005e9	83 7d e4 00	 cmp	 DWORD PTR _member$[ebp], 0
  005ed	0f 84 c1 01 00
	00		 je	 $LN5@regen_upda

; 318  : 		{
; 319  : 
; 320  : 			if (get_local_entity_int_value (member, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  005f3	83 7d e4 00	 cmp	 DWORD PTR _member$[ebp], 0
  005f7	74 0d		 je	 SHORT $LN71@regen_upda
  005f9	8b 45 e4	 mov	 eax, DWORD PTR _member$[ebp]
  005fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  005fe	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv328[ebp], ecx
  00604	eb 20		 jmp	 SHORT $LN72@regen_upda
$LN71@regen_upda:
  00606	68 40 01 00 00	 push	 320			; 00000140H
  0060b	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00610	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00616	52		 push	 edx
  00617	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0061c	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv328[ebp], 0
$LN72@regen_upda:
  00626	b8 01 00 00 00	 mov	 eax, 1
  0062b	85 c0		 test	 eax, eax
  0062d	74 0c		 je	 SHORT $LN73@regen_upda
  0062f	c7 85 4c ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR tv335[ebp], 156 ; 0000009cH
  00639	eb 20		 jmp	 SHORT $LN74@regen_upda
$LN73@regen_upda:
  0063b	68 40 01 00 00	 push	 320			; 00000140H
  00640	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00645	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0064b	51		 push	 ecx
  0064c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00651	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv335[ebp], 0
$LN74@regen_upda:
  0065b	68 9c 00 00 00	 push	 156			; 0000009cH
  00660	8b 55 e4	 mov	 edx, DWORD PTR _member$[ebp]
  00663	52		 push	 edx
  00664	69 85 50 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv328[ebp], 1116
  0066e	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv335[ebp]
  00674	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0067b	ff d2		 call	 edx
  0067d	85 c0		 test	 eax, eax
  0067f	0f 84 92 00 00
	00		 je	 $LN21@regen_upda

; 321  : 			{
; 322  : 
; 323  : 				if (get_local_entity_int_value (member, INT_TYPE_LANDED))

  00685	83 7d e4 00	 cmp	 DWORD PTR _member$[ebp], 0
  00689	74 0d		 je	 SHORT $LN75@regen_upda
  0068b	8b 45 e4	 mov	 eax, DWORD PTR _member$[ebp]
  0068e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00690	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv347[ebp], ecx
  00696	eb 20		 jmp	 SHORT $LN76@regen_upda
$LN75@regen_upda:
  00698	68 43 01 00 00	 push	 323			; 00000143H
  0069d	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  006a8	52		 push	 edx
  006a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006ae	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv347[ebp], 0
$LN76@regen_upda:
  006b8	b8 01 00 00 00	 mov	 eax, 1
  006bd	85 c0		 test	 eax, eax
  006bf	74 0c		 je	 SHORT $LN77@regen_upda
  006c1	c7 85 4c ff ff
	ff 73 00 00 00	 mov	 DWORD PTR tv354[ebp], 115 ; 00000073H
  006cb	eb 20		 jmp	 SHORT $LN78@regen_upda
$LN77@regen_upda:
  006cd	68 43 01 00 00	 push	 323			; 00000143H
  006d2	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  006d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  006dd	51		 push	 ecx
  006de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006e3	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv354[ebp], 0
$LN78@regen_upda:
  006ed	6a 73		 push	 115			; 00000073H
  006ef	8b 55 e4	 mov	 edx, DWORD PTR _member$[ebp]
  006f2	52		 push	 edx
  006f3	69 85 50 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv347[ebp], 1116
  006fd	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv354[ebp]
  00703	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0070a	ff d2		 call	 edx
  0070c	85 c0		 test	 eax, eax
  0070e	74 07		 je	 SHORT $LN21@regen_upda

; 324  : 				{
; 325  : 					#if DEBUG_MODULE
; 326  : 
; 327  : 					debug_log ("RG_UPDT: PLAYER landed at keysite %s, can't regen", get_local_entity_string (keysite, STRING_TYPE_KEYSITE_NAME));
; 328  : 
; 329  : 					#endif
; 330  : 
; 331  : 					return NULL;

  00710	33 c0		 xor	 eax, eax
  00712	e9 d5 0f 00 00	 jmp	 $LN1@regen_upda
$LN21@regen_upda:

; 332  : 				}
; 333  : 			}
; 334  : 
; 335  : 			member = get_local_entity_child_succ (member, LIST_TYPE_MEMBER);

  00717	83 7d e4 00	 cmp	 DWORD PTR _member$[ebp], 0
  0071b	74 0d		 je	 SHORT $LN79@regen_upda
  0071d	8b 45 e4	 mov	 eax, DWORD PTR _member$[ebp]
  00720	8b 08		 mov	 ecx, DWORD PTR [eax]
  00722	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv367[ebp], ecx
  00728	eb 27		 jmp	 SHORT $LN80@regen_upda
$LN79@regen_upda:
  0072a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00730	81 c2 87 00 00
	00		 add	 edx, 135		; 00000087H
  00736	52		 push	 edx
  00737	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0073c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00741	50		 push	 eax
  00742	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00747	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv367[ebp], 0
$LN80@regen_upda:
  00751	b9 01 00 00 00	 mov	 ecx, 1
  00756	85 c9		 test	 ecx, ecx
  00758	74 0c		 je	 SHORT $LN81@regen_upda
  0075a	c7 85 4c ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv375[ebp], 25 ; 00000019H
  00764	eb 27		 jmp	 SHORT $LN82@regen_upda
$LN81@regen_upda:
  00766	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0076c	81 c2 87 00 00
	00		 add	 edx, 135		; 00000087H
  00772	52		 push	 edx
  00773	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00778	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0077d	50		 push	 eax
  0077e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00783	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv375[ebp], 0
$LN82@regen_upda:
  0078d	6a 19		 push	 25			; 00000019H
  0078f	8b 4d e4	 mov	 ecx, DWORD PTR _member$[ebp]
  00792	51		 push	 ecx
  00793	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv367[ebp], 180
  0079d	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv375[ebp]
  007a3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  007aa	ff d1		 call	 ecx
  007ac	89 45 e4	 mov	 DWORD PTR _member$[ebp], eax

; 336  : 		}

  007af	e9 35 fe ff ff	 jmp	 $LN4@regen_upda
$LN5@regen_upda:

; 337  : 
; 338  : 		group = get_local_entity_child_succ (group, LIST_TYPE_KEYSITE_GROUP);

  007b4	83 7d e8 00	 cmp	 DWORD PTR _group$[ebp], 0
  007b8	74 0d		 je	 SHORT $LN83@regen_upda
  007ba	8b 45 e8	 mov	 eax, DWORD PTR _group$[ebp]
  007bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  007bf	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv387[ebp], ecx
  007c5	eb 27		 jmp	 SHORT $LN84@regen_upda
$LN83@regen_upda:
  007c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  007cd	81 c2 8a 00 00
	00		 add	 edx, 138		; 0000008aH
  007d3	52		 push	 edx
  007d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  007d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007de	50		 push	 eax
  007df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007e4	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv387[ebp], 0
$LN84@regen_upda:
  007ee	b9 01 00 00 00	 mov	 ecx, 1
  007f3	85 c9		 test	 ecx, ecx
  007f5	74 0c		 je	 SHORT $LN85@regen_upda
  007f7	c7 85 4c ff ff
	ff 16 00 00 00	 mov	 DWORD PTR tv395[ebp], 22 ; 00000016H
  00801	eb 27		 jmp	 SHORT $LN86@regen_upda
$LN85@regen_upda:
  00803	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00809	81 c2 8a 00 00
	00		 add	 edx, 138		; 0000008aH
  0080f	52		 push	 edx
  00810	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00815	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0081a	50		 push	 eax
  0081b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00820	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv395[ebp], 0
$LN86@regen_upda:
  0082a	6a 16		 push	 22			; 00000016H
  0082c	8b 4d e8	 mov	 ecx, DWORD PTR _group$[ebp]
  0082f	51		 push	 ecx
  00830	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv387[ebp], 180
  0083a	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv395[ebp]
  00840	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00847	ff d1		 call	 ecx
  00849	89 45 e8	 mov	 DWORD PTR _group$[ebp], eax

; 339  : 	}

  0084c	e9 fc fc ff ff	 jmp	 $LN2@regen_upda
$LN3@regen_upda:

; 340  : 
; 341  : 	group_type = e1->group;

  00851	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  00854	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00857	89 4d f4	 mov	 DWORD PTR _group_type$[ebp], ecx

; 342  : 	
; 343  : 	member_type = e1->sub_type;

  0085a	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  0085d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00860	89 4d f8	 mov	 DWORD PTR _member_type$[ebp], ecx

; 344  : 
; 345  : 	////////////////////////////////////////////////////////////////////////////
; 346  : 	// Dont regen people or transport aircraft in apache havoc campaign as airport might not be correct (landing routes etc)
; 347  : 	////////////////////////////////////////////////////////////////////////////
; 348  : 	if (get_local_entity_int_value (get_session_entity (), INT_TYPE_CAMPAIGN_REQUIRES_APACHE_HAVOC))

  00863	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0086a	74 0f		 je	 SHORT $LN87@regen_upda
  0086c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00871	8b 08		 mov	 ecx, DWORD PTR [eax]
  00873	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv408[ebp], ecx
  00879	eb 20		 jmp	 SHORT $LN88@regen_upda
$LN87@regen_upda:
  0087b	68 5c 01 00 00	 push	 348			; 0000015cH
  00880	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00885	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0088b	52		 push	 edx
  0088c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00891	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv408[ebp], 0
$LN88@regen_upda:
  0089b	b8 01 00 00 00	 mov	 eax, 1
  008a0	85 c0		 test	 eax, eax
  008a2	74 0c		 je	 SHORT $LN89@regen_upda
  008a4	c7 85 4c ff ff
	ff 16 00 00 00	 mov	 DWORD PTR tv415[ebp], 22 ; 00000016H
  008ae	eb 20		 jmp	 SHORT $LN90@regen_upda
$LN89@regen_upda:
  008b0	68 5c 01 00 00	 push	 348			; 0000015cH
  008b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008c0	51		 push	 ecx
  008c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008c6	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv415[ebp], 0
$LN90@regen_upda:
  008d0	6a 16		 push	 22			; 00000016H
  008d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  008d8	52		 push	 edx
  008d9	69 85 50 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv408[ebp], 1116
  008e3	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv415[ebp]
  008e9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  008f0	ff d2		 call	 edx
  008f2	85 c0		 test	 eax, eax
  008f4	0f 84 bc 00 00
	00		 je	 $LN6@regen_upda

; 349  : 	{
; 350  : 
; 351  : 		switch (get_local_entity_int_value (en, INT_TYPE_ENTITY_SUB_TYPE))

  008fa	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  008fe	74 0d		 je	 SHORT $LN91@regen_upda
  00900	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00903	8b 08		 mov	 ecx, DWORD PTR [eax]
  00905	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv427[ebp], ecx
  0090b	eb 20		 jmp	 SHORT $LN92@regen_upda
$LN91@regen_upda:
  0090d	68 5f 01 00 00	 push	 351			; 0000015fH
  00912	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00917	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0091d	52		 push	 edx
  0091e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00923	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv427[ebp], 0
$LN92@regen_upda:
  0092d	b8 01 00 00 00	 mov	 eax, 1
  00932	85 c0		 test	 eax, eax
  00934	74 0c		 je	 SHORT $LN93@regen_upda
  00936	c7 85 4c ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv434[ebp], 52 ; 00000034H
  00940	eb 20		 jmp	 SHORT $LN94@regen_upda
$LN93@regen_upda:
  00942	68 5f 01 00 00	 push	 351			; 0000015fH
  00947	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0094c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00952	51		 push	 ecx
  00953	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00958	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv434[ebp], 0
$LN94@regen_upda:
  00962	6a 34		 push	 52			; 00000034H
  00964	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00967	52		 push	 edx
  00968	69 85 50 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv427[ebp], 1116
  00972	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv434[ebp]
  00978	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0097f	ff d2		 call	 edx
  00981	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv440[ebp], eax
  00987	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR tv440[ebp], 0
  0098e	74 12		 je	 SHORT $LN24@regen_upda
  00990	83 bd 48 ff ff
	ff 03		 cmp	 DWORD PTR tv440[ebp], 3
  00997	74 02		 je	 SHORT $LN23@regen_upda
  00999	eb 1b		 jmp	 SHORT $LN6@regen_upda
$LN23@regen_upda:

; 352  : 		{
; 353  : 
; 354  : 			case ENTITY_SUB_TYPE_REGEN_PEOPLE:
; 355  : 			{
; 356  : 
; 357  : 				#if DEBUG_MODULE
; 358  : 
; 359  : 				debug_log ("RG_UPDT: Stopping Regening People - wrong warzone");
; 360  : 
; 361  : 				#endif
; 362  : 
; 363  : 				return NULL;

  0099b	33 c0		 xor	 eax, eax
  0099d	e9 4a 0d 00 00	 jmp	 $LN1@regen_upda
$LN24@regen_upda:

; 364  : 			}
; 365  : 
; 366  : 			case ENTITY_SUB_TYPE_REGEN_FIXED_WING:
; 367  : 			{
; 368  : 
; 369  : 				if (group_database [group_type].default_landing_type == ENTITY_SUB_TYPE_LANDING_FIXED_WING_TRANSPORT)

  009a2	6b 45 f4 64	 imul	 eax, DWORD PTR _group_type$[ebp], 100
  009a6	83 b8 18 00 00
	00 01		 cmp	 DWORD PTR ?group_database@@3PAUGROUP_DATA@@A[eax+24], 1
  009ad	75 07		 jne	 SHORT $LN25@regen_upda

; 370  : 				{
; 371  : 
; 372  : 					#if DEBUG_MODULE
; 373  : 
; 374  : 					debug_log ("RG_UPDT: Stopping Regening Transport aircraft - wrong warzone");
; 375  : 
; 376  : 					#endif
; 377  : 
; 378  : 					return NULL;

  009af	33 c0		 xor	 eax, eax
  009b1	e9 36 0d 00 00	 jmp	 $LN1@regen_upda
$LN25@regen_upda:
$LN6@regen_upda:

; 379  : 				}
; 380  : 			}
; 381  : 		}
; 382  : 	}
; 383  : 	////////////////////////////////////////////////////////////////////////////
; 384  : 	// Dont regen people or transport aircraft in apache havoc campaign as airport might not be correct (landing routes etc)
; 385  : 	////////////////////////////////////////////////////////////////////////////
; 386  : 
; 387  : 	if (group_type != NUM_ENTITY_SUB_TYPE_GROUPS)

  009b6	83 7d f4 1a	 cmp	 DWORD PTR _group_type$[ebp], 26 ; 0000001aH
  009ba	0f 84 2a 0d 00
	00		 je	 $LN26@regen_upda

; 388  : 	{
; 389  : 
; 390  : 		int
; 391  : 			route_node;
; 392  : 
; 393  : 		entity
; 394  : 			*building,
; 395  : 			*member,
; 396  : 			*guide,
; 397  : 			*group = NULL;

  009c0	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _group$7[ebp], 0

; 398  : 
; 399  : 		group = create_landing_faction_members (keysite, member_type, group_type, 1, wp, &raw->position);

  009c7	8b 45 c4	 mov	 eax, DWORD PTR _raw$[ebp]
  009ca	83 c0 04	 add	 eax, 4
  009cd	50		 push	 eax
  009ce	8b 4d f0	 mov	 ecx, DWORD PTR _wp$[ebp]
  009d1	51		 push	 ecx
  009d2	6a 01		 push	 1
  009d4	8b 55 f4	 mov	 edx, DWORD PTR _group_type$[ebp]
  009d7	52		 push	 edx
  009d8	8b 45 f8	 mov	 eax, DWORD PTR _member_type$[ebp]
  009db	50		 push	 eax
  009dc	8b 4d d4	 mov	 ecx, DWORD PTR _keysite$[ebp]
  009df	51		 push	 ecx
  009e0	e8 00 00 00 00	 call	 ?create_landing_faction_members@@YGPAUENTITY@@PAU1@HHH0PAUVEC3D@@@Z ; create_landing_faction_members
  009e5	89 45 ac	 mov	 DWORD PTR _group$7[ebp], eax

; 400  : 
; 401  : 		if (group)

  009e8	83 7d ac 00	 cmp	 DWORD PTR _group$7[ebp], 0
  009ec	0f 84 f8 0c 00
	00		 je	 $LN28@regen_upda

; 402  : 		{
; 403  : 
; 404  : 			//
; 405  : 			// Assign closest route_node (only needed for routed vehicles)
; 406  : 			//
; 407  : 
; 408  : 			if (get_local_entity_int_value (group, INT_TYPE_FRONTLINE))

  009f2	83 7d ac 00	 cmp	 DWORD PTR _group$7[ebp], 0
  009f6	74 0d		 je	 SHORT $LN95@regen_upda
  009f8	8b 45 ac	 mov	 eax, DWORD PTR _group$7[ebp]
  009fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  009fd	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv462[ebp], ecx
  00a03	eb 20		 jmp	 SHORT $LN96@regen_upda
$LN95@regen_upda:
  00a05	68 98 01 00 00	 push	 408			; 00000198H
  00a0a	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a0f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a15	52		 push	 edx
  00a16	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a1b	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv462[ebp], 0
$LN96@regen_upda:
  00a25	b8 01 00 00 00	 mov	 eax, 1
  00a2a	85 c0		 test	 eax, eax
  00a2c	74 0c		 je	 SHORT $LN97@regen_upda
  00a2e	c7 85 4c ff ff
	ff 41 00 00 00	 mov	 DWORD PTR tv469[ebp], 65 ; 00000041H
  00a38	eb 20		 jmp	 SHORT $LN98@regen_upda
$LN97@regen_upda:
  00a3a	68 98 01 00 00	 push	 408			; 00000198H
  00a3f	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a44	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00a4a	51		 push	 ecx
  00a4b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a50	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv469[ebp], 0
$LN98@regen_upda:
  00a5a	6a 41		 push	 65			; 00000041H
  00a5c	8b 55 ac	 mov	 edx, DWORD PTR _group$7[ebp]
  00a5f	52		 push	 edx
  00a60	69 85 50 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv462[ebp], 1116
  00a6a	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv469[ebp]
  00a70	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a77	ff d2		 call	 edx
  00a79	85 c0		 test	 eax, eax
  00a7b	0f 84 5a 01 00
	00		 je	 $LN29@regen_upda

; 409  : 			{
; 410  : 	
; 411  : 				route_node = get_closest_side_road_node ((entity_sides) get_local_entity_int_value (group, INT_TYPE_SIDE), &raw->position, 5 * KILOMETRE);

  00a81	83 7d ac 00	 cmp	 DWORD PTR _group$7[ebp], 0
  00a85	74 0d		 je	 SHORT $LN99@regen_upda
  00a87	8b 45 ac	 mov	 eax, DWORD PTR _group$7[ebp]
  00a8a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a8c	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv486[ebp], ecx
  00a92	eb 27		 jmp	 SHORT $LN100@regen_upda
$LN99@regen_upda:
  00a94	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00a9a	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00aa0	52		 push	 edx
  00aa1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00aa6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00aab	50		 push	 eax
  00aac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ab1	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv486[ebp], 0
$LN100@regen_upda:
  00abb	b9 01 00 00 00	 mov	 ecx, 1
  00ac0	85 c9		 test	 ecx, ecx
  00ac2	74 0c		 je	 SHORT $LN101@regen_upda
  00ac4	c7 85 4c ff ff
	ff bb 00 00 00	 mov	 DWORD PTR tv494[ebp], 187 ; 000000bbH
  00ace	eb 27		 jmp	 SHORT $LN102@regen_upda
$LN101@regen_upda:
  00ad0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00ad6	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00adc	52		 push	 edx
  00add	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ae2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00ae7	50		 push	 eax
  00ae8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00aed	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv494[ebp], 0
$LN102@regen_upda:
  00af7	51		 push	 ecx
  00af8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00b00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b05	8b 4d c4	 mov	 ecx, DWORD PTR _raw$[ebp]
  00b08	83 c1 04	 add	 ecx, 4
  00b0b	51		 push	 ecx
  00b0c	68 bb 00 00 00	 push	 187			; 000000bbH
  00b11	8b 55 ac	 mov	 edx, DWORD PTR _group$7[ebp]
  00b14	52		 push	 edx
  00b15	69 85 50 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv486[ebp], 1116
  00b1f	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv494[ebp]
  00b25	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00b2c	ff d2		 call	 edx
  00b2e	50		 push	 eax
  00b2f	e8 00 00 00 00	 call	 ?get_closest_side_road_node@@YGHW4ENTITY_SIDES@@PAUVEC3D@@M@Z ; get_closest_side_road_node
  00b34	89 45 bc	 mov	 DWORD PTR _route_node$11[ebp], eax

; 412  : 	
; 413  : 				set_client_server_entity_int_value (group, INT_TYPE_ROUTE_NODE, route_node);

  00b37	83 7d ac 00	 cmp	 DWORD PTR _group$7[ebp], 0
  00b3b	74 0d		 je	 SHORT $LN103@regen_upda
  00b3d	8b 45 ac	 mov	 eax, DWORD PTR _group$7[ebp]
  00b40	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b42	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv507[ebp], ecx
  00b48	eb 27		 jmp	 SHORT $LN104@regen_upda
$LN103@regen_upda:
  00b4a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00b50	81 c2 d5 00 00
	00		 add	 edx, 213		; 000000d5H
  00b56	52		 push	 edx
  00b57	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b5c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b61	50		 push	 eax
  00b62	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b67	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv507[ebp], 0
$LN104@regen_upda:
  00b71	b9 01 00 00 00	 mov	 ecx, 1
  00b76	85 c9		 test	 ecx, ecx
  00b78	74 0c		 je	 SHORT $LN105@regen_upda
  00b7a	c7 85 4c ff ff
	ff b4 00 00 00	 mov	 DWORD PTR tv515[ebp], 180 ; 000000b4H
  00b84	eb 27		 jmp	 SHORT $LN106@regen_upda
$LN105@regen_upda:
  00b86	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00b8c	81 c2 d5 00 00
	00		 add	 edx, 213		; 000000d5H
  00b92	52		 push	 edx
  00b93	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b98	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00b9d	50		 push	 eax
  00b9e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ba3	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv515[ebp], 0
$LN106@regen_upda:
  00bad	8b 4d bc	 mov	 ecx, DWORD PTR _route_node$11[ebp]
  00bb0	51		 push	 ecx
  00bb1	68 b4 00 00 00	 push	 180			; 000000b4H
  00bb6	8b 55 ac	 mov	 edx, DWORD PTR _group$7[ebp]
  00bb9	52		 push	 edx
  00bba	69 85 50 ff ff
	ff b8 08 00 00	 imul	 eax, DWORD PTR tv507[ebp], 2232
  00bc4	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv515[ebp]
  00bca	8d 94 c8 00 00
	00 00		 lea	 edx, DWORD PTR ?fn_set_client_server_entity_int_value@@3PAY1BBH@1P6GXPAUENTITY@@W4INT_TYPES@@H@ZA[eax+ecx*8]
  00bd1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  00bd6	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00bd9	ff d1		 call	 ecx
$LN29@regen_upda:

; 414  : 			}
; 415  : 
; 416  : 			//
; 417  : 			//
; 418  : 			//
; 419  : 			
; 420  : 			member = get_local_entity_first_child (group, LIST_TYPE_MEMBER);

  00bdb	83 7d ac 00	 cmp	 DWORD PTR _group$7[ebp], 0
  00bdf	74 0d		 je	 SHORT $LN107@regen_upda
  00be1	8b 45 ac	 mov	 eax, DWORD PTR _group$7[ebp]
  00be4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00be6	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv529[ebp], ecx
  00bec	eb 27		 jmp	 SHORT $LN108@regen_upda
$LN107@regen_upda:
  00bee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00bf4	81 c2 dc 00 00
	00		 add	 edx, 220		; 000000dcH
  00bfa	52		 push	 edx
  00bfb	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c00	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c05	50		 push	 eax
  00c06	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c0b	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv529[ebp], 0
$LN108@regen_upda:
  00c15	b9 01 00 00 00	 mov	 ecx, 1
  00c1a	85 c9		 test	 ecx, ecx
  00c1c	74 0c		 je	 SHORT $LN109@regen_upda
  00c1e	c7 85 4c ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv537[ebp], 25 ; 00000019H
  00c28	eb 27		 jmp	 SHORT $LN110@regen_upda
$LN109@regen_upda:
  00c2a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00c30	81 c2 dc 00 00
	00		 add	 edx, 220		; 000000dcH
  00c36	52		 push	 edx
  00c37	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00c41	50		 push	 eax
  00c42	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c47	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv537[ebp], 0
$LN110@regen_upda:
  00c51	6a 19		 push	 25			; 00000019H
  00c53	8b 4d ac	 mov	 ecx, DWORD PTR _group$7[ebp]
  00c56	51		 push	 ecx
  00c57	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv529[ebp], 180
  00c61	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv537[ebp]
  00c67	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c6e	ff d1		 call	 ecx
  00c70	89 45 b4	 mov	 DWORD PTR _member$9[ebp], eax

; 421  : 
; 422  : 			//
; 423  : 			// close members doors
; 424  : 			//
; 425  : 
; 426  : 			close_client_server_entity_cargo_doors (member);

  00c73	8b 45 b4	 mov	 eax, DWORD PTR _member$9[ebp]
  00c76	50		 push	 eax
  00c77	e8 00 00 00 00	 call	 ?close_client_server_entity_cargo_doors@@YGXPAUENTITY@@@Z ; close_client_server_entity_cargo_doors

; 427  : 
; 428  : 			close_client_server_entity_loading_doors (member);

  00c7c	8b 45 b4	 mov	 eax, DWORD PTR _member$9[ebp]
  00c7f	50		 push	 eax
  00c80	e8 00 00 00 00	 call	 ?close_client_server_entity_loading_doors@@YGXPAUENTITY@@@Z ; close_client_server_entity_loading_doors

; 429  : 
; 430  : 			//
; 431  : 			// open building doors
; 432  : 			//
; 433  : 
; 434  : 			building = get_local_entity_first_child (en, LIST_TYPE_MEMBER);

  00c85	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00c89	74 0d		 je	 SHORT $LN111@regen_upda
  00c8b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00c8e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c90	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv551[ebp], ecx
  00c96	eb 27		 jmp	 SHORT $LN112@regen_upda
$LN111@regen_upda:
  00c98	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00c9e	81 c2 ea 00 00
	00		 add	 edx, 234		; 000000eaH
  00ca4	52		 push	 edx
  00ca5	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00caa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00caf	50		 push	 eax
  00cb0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cb5	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv551[ebp], 0
$LN112@regen_upda:
  00cbf	b9 01 00 00 00	 mov	 ecx, 1
  00cc4	85 c9		 test	 ecx, ecx
  00cc6	74 0c		 je	 SHORT $LN113@regen_upda
  00cc8	c7 85 4c ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv559[ebp], 25 ; 00000019H
  00cd2	eb 27		 jmp	 SHORT $LN114@regen_upda
$LN113@regen_upda:
  00cd4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00cda	81 c2 ea 00 00
	00		 add	 edx, 234		; 000000eaH
  00ce0	52		 push	 edx
  00ce1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ce6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00ceb	50		 push	 eax
  00cec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cf1	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv559[ebp], 0
$LN114@regen_upda:
  00cfb	6a 19		 push	 25			; 00000019H
  00cfd	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00d00	51		 push	 ecx
  00d01	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv551[ebp], 180
  00d0b	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv559[ebp]
  00d11	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00d18	ff d1		 call	 ecx
  00d1a	89 45 b8	 mov	 DWORD PTR _building$10[ebp], eax

; 435  : 
; 436  : 			open_client_server_entity_loading_doors (building);

  00d1d	8b 45 b8	 mov	 eax, DWORD PTR _building$10[ebp]
  00d20	50		 push	 eax
  00d21	e8 00 00 00 00	 call	 ?open_client_server_entity_loading_doors@@YGXPAUENTITY@@@Z ; open_client_server_entity_loading_doors

; 437  : 
; 438  : 			set_local_entity_float_value (building, FLOAT_TYPE_LOADING_DOOR_TIMER, 30.0);

  00d26	83 7d b8 00	 cmp	 DWORD PTR _building$10[ebp], 0
  00d2a	74 0d		 je	 SHORT $LN115@regen_upda
  00d2c	8b 45 b8	 mov	 eax, DWORD PTR _building$10[ebp]
  00d2f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d31	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv572[ebp], ecx
  00d37	eb 27		 jmp	 SHORT $LN116@regen_upda
$LN115@regen_upda:
  00d39	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00d3f	81 c2 ee 00 00
	00		 add	 edx, 238		; 000000eeH
  00d45	52		 push	 edx
  00d46	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d4b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d50	50		 push	 eax
  00d51	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d56	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv572[ebp], 0
$LN116@regen_upda:
  00d60	b9 01 00 00 00	 mov	 ecx, 1
  00d65	85 c9		 test	 ecx, ecx
  00d67	74 0c		 je	 SHORT $LN117@regen_upda
  00d69	c7 85 4c ff ff
	ff 40 00 00 00	 mov	 DWORD PTR tv580[ebp], 64 ; 00000040H
  00d73	eb 27		 jmp	 SHORT $LN118@regen_upda
$LN117@regen_upda:
  00d75	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00d7b	81 c2 ee 00 00
	00		 add	 edx, 238		; 000000eeH
  00d81	52		 push	 edx
  00d82	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d87	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00d8c	50		 push	 eax
  00d8d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d92	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv580[ebp], 0
$LN118@regen_upda:
  00d9c	51		 push	 ecx
  00d9d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41f00000
  00da5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00daa	6a 40		 push	 64			; 00000040H
  00dac	8b 4d b8	 mov	 ecx, DWORD PTR _building$10[ebp]
  00daf	51		 push	 ecx
  00db0	69 95 50 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv572[ebp], 700
  00dba	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv580[ebp]
  00dc0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*4]
  00dc7	ff d1		 call	 ecx

; 439  : 
; 440  : 			//
; 441  : 			// create guide entity for task (TEST)
; 442  : 			//
; 443  : 
; 444  : 			// Debug for Transport aircraft.
; 445  : 			// Locate nearest Transport landing wp and insert into it
; 446  : 			if (group_database [group_type].default_landing_type == ENTITY_SUB_TYPE_LANDING_FIXED_WING_TRANSPORT)

  00dc9	6b 45 f4 64	 imul	 eax, DWORD PTR _group_type$[ebp], 100
  00dcd	83 b8 18 00 00
	00 01		 cmp	 DWORD PTR ?group_database@@3PAUGROUP_DATA@@A[eax+24], 1
  00dd4	0f 85 ff 02 00
	00		 jne	 $LN9@regen_upda

; 447  : 			{
; 448  : 
; 449  : 				float
; 450  : 					range,
; 451  : 					best_range;
; 452  : 
; 453  : 				entity
; 454  : 					*transport_wp,
; 455  : 					*transport_task,
; 456  : 					*transport_landing;
; 457  : 
; 458  : 				best_range = 999999999.0;

  00dda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4e6e6b28
  00de2	f3 0f 11 45 a4	 movss	 DWORD PTR _best_range$5[ebp], xmm0

; 459  : 
; 460  : 				transport_landing = get_local_entity_landing_entity (keysite, ENTITY_SUB_TYPE_LANDING_FIXED_WING_TRANSPORT);

  00de7	6a 01		 push	 1
  00de9	8b 45 d4	 mov	 eax, DWORD PTR _keysite$[ebp]
  00dec	50		 push	 eax
  00ded	e8 00 00 00 00	 call	 ?get_local_entity_landing_entity@@YGPAUENTITY@@PAU1@H@Z ; get_local_entity_landing_entity
  00df2	89 45 98	 mov	 DWORD PTR _transport_landing$2[ebp], eax

; 461  : 
; 462  : 				if (transport_landing)

  00df5	83 7d 98 00	 cmp	 DWORD PTR _transport_landing$2[ebp], 0
  00df9	0f 84 da 02 00
	00		 je	 $LN9@regen_upda

; 463  : 				{
; 464  : 	
; 465  : 					transport_task = get_local_landing_entity_task (transport_landing, ENTITY_SUB_TYPE_TASK_LANDING);

  00dff	6a 0d		 push	 13			; 0000000dH
  00e01	8b 45 98	 mov	 eax, DWORD PTR _transport_landing$2[ebp]
  00e04	50		 push	 eax
  00e05	e8 00 00 00 00	 call	 ?get_local_landing_entity_task@@YGPAUENTITY@@PAU1@H@Z ; get_local_landing_entity_task
  00e0a	89 45 9c	 mov	 DWORD PTR _transport_task$3[ebp], eax

; 466  : 
; 467  : 					ASSERT (transport_task);

  00e0d	83 7d 9c 00	 cmp	 DWORD PTR _transport_task$3[ebp], 0
  00e11	75 1a		 jne	 SHORT $LN32@regen_upda
  00e13	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00e18	05 0b 01 00 00	 add	 eax, 267		; 0000010bH
  00e1d	50		 push	 eax
  00e1e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e23	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLKEBNBG@transport_task@
  00e28	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN32@regen_upda:

; 468  : 	
; 469  : 					transport_wp = get_local_entity_first_child (transport_task, LIST_TYPE_WAYPOINT);

  00e2d	83 7d 9c 00	 cmp	 DWORD PTR _transport_task$3[ebp], 0
  00e31	74 0d		 je	 SHORT $LN119@regen_upda
  00e33	8b 45 9c	 mov	 eax, DWORD PTR _transport_task$3[ebp]
  00e36	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e38	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv608[ebp], ecx
  00e3e	eb 27		 jmp	 SHORT $LN120@regen_upda
$LN119@regen_upda:
  00e40	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00e46	81 c2 0d 01 00
	00		 add	 edx, 269		; 0000010dH
  00e4c	52		 push	 edx
  00e4d	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e52	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e57	50		 push	 eax
  00e58	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e5d	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv608[ebp], 0
$LN120@regen_upda:
  00e67	b9 01 00 00 00	 mov	 ecx, 1
  00e6c	85 c9		 test	 ecx, ecx
  00e6e	74 0c		 je	 SHORT $LN121@regen_upda
  00e70	c7 85 4c ff ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv616[ebp], 44 ; 0000002cH
  00e7a	eb 27		 jmp	 SHORT $LN122@regen_upda
$LN121@regen_upda:
  00e7c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00e82	81 c2 0d 01 00
	00		 add	 edx, 269		; 0000010dH
  00e88	52		 push	 edx
  00e89	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e8e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00e93	50		 push	 eax
  00e94	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e99	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv616[ebp], 0
$LN122@regen_upda:
  00ea3	6a 2c		 push	 44			; 0000002cH
  00ea5	8b 4d 9c	 mov	 ecx, DWORD PTR _transport_task$3[ebp]
  00ea8	51		 push	 ecx
  00ea9	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv608[ebp], 180
  00eb3	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv616[ebp]
  00eb9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00ec0	ff d1		 call	 ecx
  00ec2	89 45 a0	 mov	 DWORD PTR _transport_wp$4[ebp], eax

; 470  : 
; 471  : 					ASSERT (transport_wp);

  00ec5	83 7d a0 00	 cmp	 DWORD PTR _transport_wp$4[ebp], 0
  00ec9	75 1a		 jne	 SHORT $LN33@regen_upda
  00ecb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00ed0	05 0f 01 00 00	 add	 eax, 271		; 0000010fH
  00ed5	50		 push	 eax
  00ed6	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00edb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KDBEGNKB@transport_wp@
  00ee0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN33@regen_upda:

; 472  : 	
; 473  : 					while (transport_wp)

  00ee5	83 7d a0 00	 cmp	 DWORD PTR _transport_wp$4[ebp], 0
  00ee9	0f 84 ea 01 00
	00		 je	 $LN9@regen_upda

; 474  : 					{
; 475  : 	
; 476  : 						range = get_sqr_2d_range (get_local_entity_vec3d_ptr (transport_wp, VEC3D_TYPE_POSITION), get_local_entity_vec3d_ptr (building, VEC3D_TYPE_POSITION));

  00eef	83 7d b8 00	 cmp	 DWORD PTR _building$10[ebp], 0
  00ef3	74 0d		 je	 SHORT $LN123@regen_upda
  00ef5	8b 45 b8	 mov	 eax, DWORD PTR _building$10[ebp]
  00ef8	8b 08		 mov	 ecx, DWORD PTR [eax]
  00efa	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv635[ebp], ecx
  00f00	eb 27		 jmp	 SHORT $LN124@regen_upda
$LN123@regen_upda:
  00f02	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00f08	81 c2 14 01 00
	00		 add	 edx, 276		; 00000114H
  00f0e	52		 push	 edx
  00f0f	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f19	50		 push	 eax
  00f1a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f1f	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv635[ebp], 0
$LN124@regen_upda:
  00f29	b9 01 00 00 00	 mov	 ecx, 1
  00f2e	85 c9		 test	 ecx, ecx
  00f30	74 0c		 je	 SHORT $LN125@regen_upda
  00f32	c7 85 4c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv643[ebp], 8
  00f3c	eb 27		 jmp	 SHORT $LN126@regen_upda
$LN125@regen_upda:
  00f3e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00f44	81 c2 14 01 00
	00		 add	 edx, 276		; 00000114H
  00f4a	52		 push	 edx
  00f4b	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f50	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00f55	50		 push	 eax
  00f56	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f5b	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv643[ebp], 0
$LN126@regen_upda:
  00f65	83 7d a0 00	 cmp	 DWORD PTR _transport_wp$4[ebp], 0
  00f69	74 0d		 je	 SHORT $LN127@regen_upda
  00f6b	8b 4d a0	 mov	 ecx, DWORD PTR _transport_wp$4[ebp]
  00f6e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f70	89 95 48 ff ff
	ff		 mov	 DWORD PTR tv656[ebp], edx
  00f76	eb 26		 jmp	 SHORT $LN128@regen_upda
$LN127@regen_upda:
  00f78	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00f7d	05 14 01 00 00	 add	 eax, 276		; 00000114H
  00f82	50		 push	 eax
  00f83	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f88	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f8e	51		 push	 ecx
  00f8f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f94	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv656[ebp], 0
$LN128@regen_upda:
  00f9e	ba 01 00 00 00	 mov	 edx, 1
  00fa3	85 d2		 test	 edx, edx
  00fa5	74 0c		 je	 SHORT $LN129@regen_upda
  00fa7	c7 85 44 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv664[ebp], 8
  00fb1	eb 26		 jmp	 SHORT $LN130@regen_upda
$LN129@regen_upda:
  00fb3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  00fb8	05 14 01 00 00	 add	 eax, 276		; 00000114H
  00fbd	50		 push	 eax
  00fbe	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fc3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00fc9	51		 push	 ecx
  00fca	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fcf	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv664[ebp], 0
$LN130@regen_upda:
  00fd9	6a 08		 push	 8
  00fdb	8b 55 b8	 mov	 edx, DWORD PTR _building$10[ebp]
  00fde	52		 push	 edx
  00fdf	6b 85 50 ff ff
	ff 60		 imul	 eax, DWORD PTR tv635[ebp], 96
  00fe6	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv643[ebp]
  00fec	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[eax+ecx*4]
  00ff3	ff d2		 call	 edx
  00ff5	50		 push	 eax
  00ff6	6a 08		 push	 8
  00ff8	8b 45 a0	 mov	 eax, DWORD PTR _transport_wp$4[ebp]
  00ffb	50		 push	 eax
  00ffc	6b 8d 48 ff ff
	ff 60		 imul	 ecx, DWORD PTR tv656[ebp], 96
  01003	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv664[ebp]
  01009	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[ecx+edx*4]
  01010	ff d0		 call	 eax
  01012	50		 push	 eax
  01013	e8 00 00 00 00	 call	 ?get_sqr_2d_range@@YGMPBUVEC3D@@0@Z ; get_sqr_2d_range
  01018	d9 5d a8	 fstp	 DWORD PTR _range$6[ebp]

; 477  : 	
; 478  : 						if (range < best_range)

  0101b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _best_range$5[ebp]
  01020	0f 2f 45 a8	 comiss	 xmm0, DWORD PTR _range$6[ebp]
  01024	76 16		 jbe	 SHORT $LN34@regen_upda

; 479  : 						{
; 480  : 	
; 481  : 							wp = transport_wp;

  01026	8b 45 a0	 mov	 eax, DWORD PTR _transport_wp$4[ebp]
  01029	89 45 f0	 mov	 DWORD PTR _wp$[ebp], eax

; 482  : 	
; 483  : 							task = transport_task;

  0102c	8b 45 9c	 mov	 eax, DWORD PTR _transport_task$3[ebp]
  0102f	89 45 ec	 mov	 DWORD PTR _task$[ebp], eax

; 484  : 	
; 485  : 							best_range = range;

  01032	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _range$6[ebp]
  01037	f3 0f 11 45 a4	 movss	 DWORD PTR _best_range$5[ebp], xmm0
$LN34@regen_upda:

; 486  : 						}
; 487  : 	
; 488  : 						transport_wp = get_local_entity_child_succ (transport_wp, LIST_TYPE_WAYPOINT);

  0103c	83 7d a0 00	 cmp	 DWORD PTR _transport_wp$4[ebp], 0
  01040	74 0d		 je	 SHORT $LN131@regen_upda
  01042	8b 45 a0	 mov	 eax, DWORD PTR _transport_wp$4[ebp]
  01045	8b 08		 mov	 ecx, DWORD PTR [eax]
  01047	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv678[ebp], ecx
  0104d	eb 27		 jmp	 SHORT $LN132@regen_upda
$LN131@regen_upda:
  0104f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  01055	81 c2 20 01 00
	00		 add	 edx, 288		; 00000120H
  0105b	52		 push	 edx
  0105c	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01066	50		 push	 eax
  01067	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0106c	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv678[ebp], 0
$LN132@regen_upda:
  01076	b9 01 00 00 00	 mov	 ecx, 1
  0107b	85 c9		 test	 ecx, ecx
  0107d	74 0c		 je	 SHORT $LN133@regen_upda
  0107f	c7 85 4c ff ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv686[ebp], 44 ; 0000002cH
  01089	eb 27		 jmp	 SHORT $LN134@regen_upda
$LN133@regen_upda:
  0108b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  01091	81 c2 20 01 00
	00		 add	 edx, 288		; 00000120H
  01097	52		 push	 edx
  01098	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0109d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  010a2	50		 push	 eax
  010a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010a8	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv686[ebp], 0
$LN134@regen_upda:
  010b2	6a 2c		 push	 44			; 0000002cH
  010b4	8b 4d a0	 mov	 ecx, DWORD PTR _transport_wp$4[ebp]
  010b7	51		 push	 ecx
  010b8	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv678[ebp], 180
  010c2	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv686[ebp]
  010c8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  010cf	ff d1		 call	 ecx
  010d1	89 45 a0	 mov	 DWORD PTR _transport_wp$4[ebp], eax

; 489  : 					}

  010d4	e9 0c fe ff ff	 jmp	 $LN33@regen_upda
$LN9@regen_upda:

; 490  : 				}
; 491  : 			}
; 492  : 			// Debug for Transport aircraft.
; 493  : 
; 494  : 			member_number = get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_NUMBER);

  010d9	83 7d b4 00	 cmp	 DWORD PTR _member$9[ebp], 0
  010dd	74 0d		 je	 SHORT $LN135@regen_upda
  010df	8b 45 b4	 mov	 eax, DWORD PTR _member$9[ebp]
  010e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  010e4	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv698[ebp], ecx
  010ea	eb 27		 jmp	 SHORT $LN136@regen_upda
$LN135@regen_upda:
  010ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  010f2	81 c2 26 01 00
	00		 add	 edx, 294		; 00000126H
  010f8	52		 push	 edx
  010f9	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  010fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01103	50		 push	 eax
  01104	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01109	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv698[ebp], 0
$LN136@regen_upda:
  01113	b9 01 00 00 00	 mov	 ecx, 1
  01118	85 c9		 test	 ecx, ecx
  0111a	74 0c		 je	 SHORT $LN137@regen_upda
  0111c	c7 85 4c ff ff
	ff 4b 00 00 00	 mov	 DWORD PTR tv706[ebp], 75 ; 0000004bH
  01126	eb 27		 jmp	 SHORT $LN138@regen_upda
$LN137@regen_upda:
  01128	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0112e	81 c2 26 01 00
	00		 add	 edx, 294		; 00000126H
  01134	52		 push	 edx
  01135	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0113a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0113f	50		 push	 eax
  01140	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01145	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv706[ebp], 0
$LN138@regen_upda:
  0114f	6a 4b		 push	 75			; 0000004bH
  01151	8b 4d b4	 mov	 ecx, DWORD PTR _member$9[ebp]
  01154	51		 push	 ecx
  01155	69 95 50 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv698[ebp], 1116
  0115f	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv706[ebp]
  01165	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0116c	ff d1		 call	 ecx
  0116e	89 45 d0	 mov	 DWORD PTR _member_number$[ebp], eax

; 495  : 
; 496  : 			guide = create_client_server_guide_entity (task, wp, (1 << member_number));

  01171	b8 01 00 00 00	 mov	 eax, 1
  01176	8b 4d d0	 mov	 ecx, DWORD PTR _member_number$[ebp]
  01179	d3 e0		 shl	 eax, cl
  0117b	50		 push	 eax
  0117c	8b 4d f0	 mov	 ecx, DWORD PTR _wp$[ebp]
  0117f	51		 push	 ecx
  01180	8b 55 ec	 mov	 edx, DWORD PTR _task$[ebp]
  01183	52		 push	 edx
  01184	e8 00 00 00 00	 call	 ?create_client_server_guide_entity@@YGPAUENTITY@@PAU1@0I@Z ; create_client_server_guide_entity
  01189	89 45 b0	 mov	 DWORD PTR _guide$8[ebp], eax

; 497  : 
; 498  : 			attach_group_to_guide_entity (group, guide);

  0118c	8b 45 b0	 mov	 eax, DWORD PTR _guide$8[ebp]
  0118f	50		 push	 eax
  01190	8b 4d ac	 mov	 ecx, DWORD PTR _group$7[ebp]
  01193	51		 push	 ecx
  01194	e8 00 00 00 00	 call	 ?attach_group_to_guide_entity@@YGXPAUENTITY@@0@Z ; attach_group_to_guide_entity

; 499  : 
; 500  : 			attach_group_member_to_guide_entity (member, guide);

  01199	8b 45 b0	 mov	 eax, DWORD PTR _guide$8[ebp]
  0119c	50		 push	 eax
  0119d	8b 4d b4	 mov	 ecx, DWORD PTR _member$9[ebp]
  011a0	51		 push	 ecx
  011a1	e8 00 00 00 00	 call	 ?attach_group_member_to_guide_entity@@YGXPAUENTITY@@0@Z ; attach_group_member_to_guide_entity

; 501  : 
; 502  : 			//#if DEBUG_MODULE
; 503  : 			{
; 504  : 
; 505  : 				entity
; 506  : 					*keysite;
; 507  : 
; 508  : 				keysite = get_local_entity_parent (landing, LIST_TYPE_LANDING_SITE);

  011a6	83 7d d8 00	 cmp	 DWORD PTR _landing$[ebp], 0
  011aa	74 0d		 je	 SHORT $LN139@regen_upda
  011ac	8b 45 d8	 mov	 eax, DWORD PTR _landing$[ebp]
  011af	8b 08		 mov	 ecx, DWORD PTR [eax]
  011b1	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv727[ebp], ecx
  011b7	eb 27		 jmp	 SHORT $LN140@regen_upda
$LN139@regen_upda:
  011b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  011bf	81 c2 34 01 00
	00		 add	 edx, 308		; 00000134H
  011c5	52		 push	 edx
  011c6	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  011cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011d0	50		 push	 eax
  011d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011d6	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv727[ebp], 0
$LN140@regen_upda:
  011e0	b9 01 00 00 00	 mov	 ecx, 1
  011e5	85 c9		 test	 ecx, ecx
  011e7	74 0c		 je	 SHORT $LN141@regen_upda
  011e9	c7 85 4c ff ff
	ff 17 00 00 00	 mov	 DWORD PTR tv735[ebp], 23 ; 00000017H
  011f3	eb 27		 jmp	 SHORT $LN142@regen_upda
$LN141@regen_upda:
  011f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  011fb	81 c2 34 01 00
	00		 add	 edx, 308		; 00000134H
  01201	52		 push	 edx
  01202	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01207	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0120c	50		 push	 eax
  0120d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01212	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv735[ebp], 0
$LN142@regen_upda:
  0121c	6a 17		 push	 23			; 00000017H
  0121e	8b 4d d8	 mov	 ecx, DWORD PTR _landing$[ebp]
  01221	51		 push	 ecx
  01222	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv727[ebp], 180
  0122c	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv735[ebp]
  01232	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01239	ff d1		 call	 ecx
  0123b	89 45 94	 mov	 DWORD PTR _keysite$1[ebp], eax

; 509  : 
; 510  : 				member = get_local_entity_first_child (group, LIST_TYPE_MEMBER);

  0123e	83 7d ac 00	 cmp	 DWORD PTR _group$7[ebp], 0
  01242	74 0d		 je	 SHORT $LN143@regen_upda
  01244	8b 45 ac	 mov	 eax, DWORD PTR _group$7[ebp]
  01247	8b 08		 mov	 ecx, DWORD PTR [eax]
  01249	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv747[ebp], ecx
  0124f	eb 27		 jmp	 SHORT $LN144@regen_upda
$LN143@regen_upda:
  01251	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  01257	81 c2 36 01 00
	00		 add	 edx, 310		; 00000136H
  0125d	52		 push	 edx
  0125e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01263	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01268	50		 push	 eax
  01269	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0126e	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv747[ebp], 0
$LN144@regen_upda:
  01278	b9 01 00 00 00	 mov	 ecx, 1
  0127d	85 c9		 test	 ecx, ecx
  0127f	74 0c		 je	 SHORT $LN145@regen_upda
  01281	c7 85 4c ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv755[ebp], 25 ; 00000019H
  0128b	eb 27		 jmp	 SHORT $LN146@regen_upda
$LN145@regen_upda:
  0128d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  01293	81 c2 36 01 00
	00		 add	 edx, 310		; 00000136H
  01299	52		 push	 edx
  0129a	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0129f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  012a4	50		 push	 eax
  012a5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012aa	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv755[ebp], 0
$LN146@regen_upda:
  012b4	6a 19		 push	 25			; 00000019H
  012b6	8b 4d ac	 mov	 ecx, DWORD PTR _group$7[ebp]
  012b9	51		 push	 ecx
  012ba	69 95 50 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv747[ebp], 180
  012c4	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv755[ebp]
  012ca	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  012d1	ff d1		 call	 ecx
  012d3	89 45 b4	 mov	 DWORD PTR _member$9[ebp], eax

; 511  : 
; 512  : 				debug_log ("RG_UPDT: %s creating %s (%d) at keysite %s free landing sites %d, reserved %d, lock %d, available lock: %d",

  012d6	83 7d d8 00	 cmp	 DWORD PTR _landing$[ebp], 0
  012da	74 0d		 je	 SHORT $LN147@regen_upda
  012dc	8b 45 d8	 mov	 eax, DWORD PTR _landing$[ebp]
  012df	8b 08		 mov	 ecx, DWORD PTR [eax]
  012e1	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv770[ebp], ecx
  012e7	eb 27		 jmp	 SHORT $LN148@regen_upda
$LN147@regen_upda:
  012e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  012ef	81 c2 3f 01 00
	00		 add	 edx, 319		; 0000013fH
  012f5	52		 push	 edx
  012f6	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  012fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01300	50		 push	 eax
  01301	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01306	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv770[ebp], 0
$LN148@regen_upda:
  01310	b9 01 00 00 00	 mov	 ecx, 1
  01315	85 c9		 test	 ecx, ecx
  01317	74 0c		 je	 SHORT $LN149@regen_upda
  01319	c7 85 4c ff ff
	ff 76 00 00 00	 mov	 DWORD PTR tv778[ebp], 118 ; 00000076H
  01323	eb 27		 jmp	 SHORT $LN150@regen_upda
$LN149@regen_upda:
  01325	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0132b	81 c2 3f 01 00
	00		 add	 edx, 319		; 0000013fH
  01331	52		 push	 edx
  01332	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01337	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0133c	50		 push	 eax
  0133d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01342	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv778[ebp], 0
$LN150@regen_upda:
  0134c	83 7d d8 00	 cmp	 DWORD PTR _landing$[ebp], 0
  01350	74 0d		 je	 SHORT $LN151@regen_upda
  01352	8b 4d d8	 mov	 ecx, DWORD PTR _landing$[ebp]
  01355	8b 11		 mov	 edx, DWORD PTR [ecx]
  01357	89 95 48 ff ff
	ff		 mov	 DWORD PTR tv791[ebp], edx
  0135d	eb 26		 jmp	 SHORT $LN152@regen_upda
$LN151@regen_upda:
  0135f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  01364	05 3e 01 00 00	 add	 eax, 318		; 0000013eH
  01369	50		 push	 eax
  0136a	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0136f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01375	51		 push	 ecx
  01376	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0137b	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv791[ebp], 0
$LN152@regen_upda:
  01385	ba 01 00 00 00	 mov	 edx, 1
  0138a	85 d2		 test	 edx, edx
  0138c	74 0c		 je	 SHORT $LN153@regen_upda
  0138e	c7 85 44 ff ff
	ff af 00 00 00	 mov	 DWORD PTR tv799[ebp], 175 ; 000000afH
  01398	eb 26		 jmp	 SHORT $LN154@regen_upda
$LN153@regen_upda:
  0139a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0139f	05 3e 01 00 00	 add	 eax, 318		; 0000013eH
  013a4	50		 push	 eax
  013a5	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  013aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  013b0	51		 push	 ecx
  013b1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013b6	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv799[ebp], 0
$LN154@regen_upda:
  013c0	83 7d d8 00	 cmp	 DWORD PTR _landing$[ebp], 0
  013c4	74 0d		 je	 SHORT $LN155@regen_upda
  013c6	8b 55 d8	 mov	 edx, DWORD PTR _landing$[ebp]
  013c9	8b 02		 mov	 eax, DWORD PTR [edx]
  013cb	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv812[ebp], eax
  013d1	eb 28		 jmp	 SHORT $LN156@regen_upda
$LN155@regen_upda:
  013d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  013d9	81 c1 3d 01 00
	00		 add	 ecx, 317		; 0000013dH
  013df	51		 push	 ecx
  013e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  013e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  013eb	52		 push	 edx
  013ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013f1	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv812[ebp], 0
$LN156@regen_upda:
  013fb	b8 01 00 00 00	 mov	 eax, 1
  01400	85 c0		 test	 eax, eax
  01402	74 0c		 je	 SHORT $LN157@regen_upda
  01404	c7 85 3c ff ff
	ff 40 00 00 00	 mov	 DWORD PTR tv820[ebp], 64 ; 00000040H
  0140e	eb 28		 jmp	 SHORT $LN158@regen_upda
$LN157@regen_upda:
  01410	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  01416	81 c1 3d 01 00
	00		 add	 ecx, 317		; 0000013dH
  0141c	51		 push	 ecx
  0141d	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01422	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01428	52		 push	 edx
  01429	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0142e	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv820[ebp], 0
$LN158@regen_upda:
  01438	83 7d 94 00	 cmp	 DWORD PTR _keysite$1[ebp], 0
  0143c	74 0d		 je	 SHORT $LN159@regen_upda
  0143e	8b 45 94	 mov	 eax, DWORD PTR _keysite$1[ebp]
  01441	8b 08		 mov	 ecx, DWORD PTR [eax]
  01443	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv833[ebp], ecx
  01449	eb 27		 jmp	 SHORT $LN160@regen_upda
$LN159@regen_upda:
  0144b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  01451	81 c2 3c 01 00
	00		 add	 edx, 316		; 0000013cH
  01457	52		 push	 edx
  01458	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0145d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01462	50		 push	 eax
  01463	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01468	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv833[ebp], 0
$LN160@regen_upda:
  01472	b9 01 00 00 00	 mov	 ecx, 1
  01477	85 c9		 test	 ecx, ecx
  01479	74 0c		 je	 SHORT $LN161@regen_upda
  0147b	c7 85 34 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR tv841[ebp], 7
  01485	eb 27		 jmp	 SHORT $LN162@regen_upda
$LN161@regen_upda:
  01487	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0148d	81 c2 3c 01 00
	00		 add	 edx, 316		; 0000013cH
  01493	52		 push	 edx
  01494	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01499	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  0149e	50		 push	 eax
  0149f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014a4	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv841[ebp], 0
$LN162@regen_upda:
  014ae	83 7d b4 00	 cmp	 DWORD PTR _member$9[ebp], 0
  014b2	74 0d		 je	 SHORT $LN163@regen_upda
  014b4	8b 4d b4	 mov	 ecx, DWORD PTR _member$9[ebp]
  014b7	8b 11		 mov	 edx, DWORD PTR [ecx]
  014b9	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv857[ebp], edx
  014bf	eb 26		 jmp	 SHORT $LN164@regen_upda
$LN163@regen_upda:
  014c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  014c6	05 3a 01 00 00	 add	 eax, 314		; 0000013aH
  014cb	50		 push	 eax
  014cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  014d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014d7	51		 push	 ecx
  014d8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014dd	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv857[ebp], 0
$LN164@regen_upda:
  014e7	83 7d 94 00	 cmp	 DWORD PTR _keysite$1[ebp], 0
  014eb	74 0d		 je	 SHORT $LN165@regen_upda
  014ed	8b 55 94	 mov	 edx, DWORD PTR _keysite$1[ebp]
  014f0	8b 02		 mov	 eax, DWORD PTR [edx]
  014f2	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv868[ebp], eax
  014f8	eb 28		 jmp	 SHORT $LN166@regen_upda
$LN165@regen_upda:
  014fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  01500	81 c1 39 01 00
	00		 add	 ecx, 313		; 00000139H
  01506	51		 push	 ecx
  01507	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0150c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01512	52		 push	 edx
  01513	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01518	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv868[ebp], 0
$LN166@regen_upda:
  01522	b8 01 00 00 00	 mov	 eax, 1
  01527	85 c0		 test	 eax, eax
  01529	74 0c		 je	 SHORT $LN167@regen_upda
  0152b	c7 85 28 ff ff
	ff bb 00 00 00	 mov	 DWORD PTR tv876[ebp], 187 ; 000000bbH
  01535	eb 28		 jmp	 SHORT $LN168@regen_upda
$LN167@regen_upda:
  01537	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??regen_update@@YGPAUENTITY@@PAU2@@Z@4JA
  0153d	81 c1 39 01 00
	00		 add	 ecx, 313		; 00000139H
  01543	51		 push	 ecx
  01544	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@NBNPDFCG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01549	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0154f	52		 push	 edx
  01550	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01555	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv876[ebp], 0
$LN168@regen_upda:
  0155f	8b 45 d8	 mov	 eax, DWORD PTR _landing$[ebp]
  01562	50		 push	 eax
  01563	e8 00 00 00 00	 call	 ?check_available_landing_route_lock@@YGHPAUENTITY@@@Z ; check_available_landing_route_lock
  01568	50		 push	 eax
  01569	6a 76		 push	 118			; 00000076H
  0156b	8b 4d d8	 mov	 ecx, DWORD PTR _landing$[ebp]
  0156e	51		 push	 ecx
  0156f	69 95 50 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv770[ebp], 1116
  01579	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv778[ebp]
  0157f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01586	ff d1		 call	 ecx
  01588	50		 push	 eax
  01589	68 af 00 00 00	 push	 175			; 000000afH
  0158e	8b 55 d8	 mov	 edx, DWORD PTR _landing$[ebp]
  01591	52		 push	 edx
  01592	69 85 48 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv791[ebp], 1116
  0159c	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv799[ebp]
  015a2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  015a9	ff d2		 call	 edx
  015ab	50		 push	 eax
  015ac	6a 40		 push	 64			; 00000040H
  015ae	8b 45 d8	 mov	 eax, DWORD PTR _landing$[ebp]
  015b1	50		 push	 eax
  015b2	69 8d 40 ff ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv812[ebp], 1116
  015bc	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR tv820[ebp]
  015c2	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  015c9	ff d0		 call	 eax
  015cb	50		 push	 eax
  015cc	6a 07		 push	 7
  015ce	8b 4d 94	 mov	 ecx, DWORD PTR _keysite$1[ebp]
  015d1	51		 push	 ecx
  015d2	6b 95 38 ff ff
	ff 34		 imul	 edx, DWORD PTR tv833[ebp], 52
  015d9	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv841[ebp]
  015df	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  015e6	ff d1		 call	 ecx
  015e8	50		 push	 eax
  015e9	8b 55 b4	 mov	 edx, DWORD PTR _member$9[ebp]
  015ec	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  015f2	c1 fa 04	 sar	 edx, 4
  015f5	52		 push	 edx
  015f6	6b 85 30 ff ff
	ff 0c		 imul	 eax, DWORD PTR tv857[ebp], 12
  015fd	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[eax]
  01603	51		 push	 ecx
  01604	68 bb 00 00 00	 push	 187			; 000000bbH
  01609	8b 55 94	 mov	 edx, DWORD PTR _keysite$1[ebp]
  0160c	52		 push	 edx
  0160d	69 85 2c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv868[ebp], 1116
  01617	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv876[ebp]
  0161d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01624	ff d2		 call	 edx
  01626	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?entity_side_names@@3PAPBDA[eax*4]
  0162d	50		 push	 eax
  0162e	68 00 00 00 00	 push	 OFFSET ??_C@_0GL@PNDINEJN@RG_UPDT?3?5?$CFs?5creating?5?$CFs?5?$CI?$CFd?$CJ?5at@
  01633	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  01638	83 c4 24	 add	 esp, 36			; 00000024H

; 513  : 						entity_side_names [get_local_entity_int_value (keysite, INT_TYPE_SIDE)],
; 514  : 						get_local_entity_type_name (member),
; 515  : 						get_local_entity_index (member),
; 516  : 						get_local_entity_string (keysite, STRING_TYPE_KEYSITE_NAME), 
; 517  : 						get_local_entity_int_value (landing, INT_TYPE_FREE_LANDING_SITES),
; 518  : 						get_local_entity_int_value (landing, INT_TYPE_RESERVED_LANDING_SITES),
; 519  : 						get_local_entity_int_value (landing, INT_TYPE_LANDING_LOCK),
; 520  : 						check_available_landing_route_lock (landing)
; 521  : 						);
; 522  : 
; 523  : 				if ((e1->type == ENTITY_TYPE_FIXED_WING) || (e1->type == ENTITY_TYPE_HELICOPTER))

  0163b	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  0163e	83 38 0a	 cmp	 DWORD PTR [eax], 10	; 0000000aH
  01641	74 08		 je	 SHORT $LN37@regen_upda
  01643	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  01646	83 38 0e	 cmp	 DWORD PTR [eax], 14	; 0000000eH
  01649	75 42		 jne	 SHORT $LN35@regen_upda
$LN37@regen_upda:

; 524  : 				{
; 525  : 					debug_log("%s reserves left: %d",

  0164b	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  0164e	69 48 04 f4 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 244
  01655	8b 91 40 00 00
	00		 mov	 edx, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+64]
  0165b	8b 45 c8	 mov	 eax, DWORD PTR _force_raw$[ebp]
  0165e	8b 8c 90 40 03
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+832]
  01665	51		 push	 ecx
  01666	8b 55 c0	 mov	 edx, DWORD PTR _e1$[ebp]
  01669	69 42 04 f4 00
	00 00		 imul	 eax, DWORD PTR [edx+4], 244
  01670	8b 88 40 00 00
	00		 mov	 ecx, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[eax+64]
  01676	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?force_info_catagory_names@@3PAPBDA[ecx*4]
  0167d	52		 push	 edx
  0167e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IJFOHHPI@?$CFs?5reserves?5left?3?5?$CFd@
  01683	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  01688	83 c4 0c	 add	 esp, 12			; 0000000cH

; 526  : 							force_info_catagory_names[aircraft_database[e1->sub_type].force_info_catagory],
; 527  : 							force_raw->force_info_reserve_hardware[aircraft_database[e1->sub_type].force_info_catagory]
; 528  : 							);
; 529  : 				}
; 530  : 				else

  0168b	eb 40		 jmp	 SHORT $LN36@regen_upda
$LN35@regen_upda:

; 531  : 				{
; 532  : 					debug_log("%s reserves left: %d",

  0168d	8b 45 c0	 mov	 eax, DWORD PTR _e1$[ebp]
  01690	69 48 04 bc 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 188
  01697	8b 91 34 00 00
	00		 mov	 edx, DWORD PTR ?vehicle_database@@3PAUVEHICLE_DATA@@A[ecx+52]
  0169d	8b 45 c8	 mov	 eax, DWORD PTR _force_raw$[ebp]
  016a0	8b 8c 90 40 03
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+832]
  016a7	51		 push	 ecx
  016a8	8b 55 c0	 mov	 edx, DWORD PTR _e1$[ebp]
  016ab	69 42 04 bc 00
	00 00		 imul	 eax, DWORD PTR [edx+4], 188
  016b2	8b 88 34 00 00
	00		 mov	 ecx, DWORD PTR ?vehicle_database@@3PAUVEHICLE_DATA@@A[eax+52]
  016b8	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?force_info_catagory_names@@3PAPBDA[ecx*4]
  016bf	52		 push	 edx
  016c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IJFOHHPI@?$CFs?5reserves?5left?3?5?$CFd@
  016c5	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  016ca	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN36@regen_upda:

; 533  : 							force_info_catagory_names[vehicle_database[e1->sub_type].force_info_catagory],
; 534  : 							force_raw->force_info_reserve_hardware[vehicle_database[e1->sub_type].force_info_catagory]
; 535  : 							);
; 536  : 				}
; 537  : 
; 538  : 			}
; 539  : 			//#endif
; 540  : 
; 541  : 			#if DEBUG_MODULE
; 542  : 			switch (e1->type)
; 543  : 			{
; 544  : 				case ENTITY_TYPE_FIXED_WING:
; 545  : 				case ENTITY_TYPE_HELICOPTER:
; 546  : 				{
; 547  : 					ASSERT (regen_ac_debug[e1->sub_type] > 0);
; 548  : 
; 549  : 					break;
; 550  : 				}
; 551  : 				
; 552  : 				case ENTITY_TYPE_ROUTED_VEHICLE:
; 553  : 				case ENTITY_TYPE_SHIP_VEHICLE:
; 554  : 				case ENTITY_TYPE_PERSON:
; 555  : 				{
; 556  : 					ASSERT (regen_vh_debug[e1->sub_type] > 0);
; 557  : 
; 558  : 					break;
; 559  : 				}
; 560  : 				
; 561  : 				default:
; 562  : 				{
; 563  : 					debug_fatal ("RG_UPDT: Unknown entity type for debug");
; 564  : 				}
; 565  : 				
; 566  : 			}
; 567  : 			#endif
; 568  : 
; 569  : 			// update markers
; 570  : 			regen_queue_use ((entity_sides) raw->side, (raw->sub_type));

  016cd	8b 45 c4	 mov	 eax, DWORD PTR _raw$[ebp]
  016d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  016d2	51		 push	 ecx
  016d3	8b 55 c4	 mov	 edx, DWORD PTR _raw$[ebp]
  016d6	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  016d9	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  016dc	83 e0 03	 and	 eax, 3
  016df	50		 push	 eax
  016e0	e8 00 00 00 00	 call	 ?regen_queue_use@@YGXW4ENTITY_SIDES@@H@Z ; regen_queue_use

; 571  : 
; 572  : 			return member;

  016e5	8b 45 b4	 mov	 eax, DWORD PTR _member$9[ebp]
  016e8	eb 02		 jmp	 SHORT $LN1@regen_upda
$LN28@regen_upda:
$LN26@regen_upda:

; 573  : 		}
; 574  : 	}
; 575  : 	else
; 576  : 	{
; 577  : 		#if DEBUG_MODULE >= 2
; 578  : 
; 579  : 		debug_log ("RG_UPDT: not creating anything at keysite %s free landing sites %d, reserved %d, lock %d",
; 580  : 						get_local_entity_string (keysite, STRING_TYPE_KEYSITE_NAME), 
; 581  : 						get_local_entity_int_value (landing, INT_TYPE_FREE_LANDING_SITES),
; 582  : 						get_local_entity_int_value (landing, INT_TYPE_RESERVED_LANDING_SITES),
; 583  : 						check_available_landing_route_lock (landing));
; 584  : 
; 585  : 		#endif
; 586  : 	}
; 587  : 
; 588  : 	return NULL;

  016ea	33 c0		 xor	 eax, eax
$LN1@regen_upda:

; 589  : }

  016ec	5f		 pop	 edi
  016ed	5e		 pop	 esi
  016ee	5b		 pop	 ebx
  016ef	8b e5		 mov	 esp, ebp
  016f1	5d		 pop	 ebp
  016f2	c2 04 00	 ret	 4
?regen_update@@YGPAUENTITY@@PAU1@@Z ENDP		; regen_update
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\regen\rg_updt.c
;	COMDAT ?overload_regen_update_functions@@YGXXZ
_TEXT	SEGMENT
?overload_regen_update_functions@@YGXXZ PROC		; overload_regen_update_functions, COMDAT

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 192  : 	fn_update_client_server_entity[ENTITY_TYPE_REGEN][COMMS_MODEL_SERVER]  	= update_server;

  00009	b8 08 00 00 00	 mov	 eax, 8
  0000e	6b c8 16	 imul	 ecx, eax, 22
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_update_client_server_entity@@3PAY01P6GXPAUENTITY@@@ZA[ecx+eax], OFFSET ?update_server@@YGXPAUENTITY@@@Z ; update_server

; 193  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?overload_regen_update_functions@@YGXXZ ENDP		; overload_regen_update_functions
_TEXT	ENDS
END
