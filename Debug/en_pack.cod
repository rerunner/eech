; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA ; fn_pack_local_entity_data
PUBLIC	?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA ; fn_unpack_local_entity_data
PUBLIC	?current_pack_buffer@@3PAUPACK_BUFFER@@A	; current_pack_buffer
PUBLIC	?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A	; current_unpack_buffer
PUBLIC	?signed_int_pack_stats@@3PAHA			; signed_int_pack_stats
PUBLIC	?unsigned_int_pack_stats@@3PAHA			; unsigned_int_pack_stats
PUBLIC	?pack_buffer_1@@3UPACK_BUFFER@@A		; pack_buffer_1
PUBLIC	?pack_buffer_2@@3UPACK_BUFFER@@A		; pack_buffer_2
PUBLIC	?unpack_buffer_1@@3UUNPACK_BUFFER@@A		; unpack_buffer_1
PUBLIC	?unpack_buffer_2@@3UUNPACK_BUFFER@@A		; unpack_buffer_2
_BSS	SEGMENT
?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA DD 026H DUP (?) ; fn_pack_local_entity_data
?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA DD 026H DUP (?) ; fn_unpack_local_entity_data
?current_pack_buffer@@3PAUPACK_BUFFER@@A DD 01H DUP (?)	; current_pack_buffer
?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A DD 01H DUP (?) ; current_unpack_buffer
?signed_int_pack_stats@@3PAHA DD 021H DUP (?)		; signed_int_pack_stats
?unsigned_int_pack_stats@@3PAHA DD 021H DUP (?)		; unsigned_int_pack_stats
_BSS	ENDS
_DATA	SEGMENT
?pack_buffer_1@@3UPACK_BUFFER@@A DD 00H			; pack_buffer_1
	DD	00H
	DD	00H
	DD	08H
	DD	00H
?pack_buffer_2@@3UPACK_BUFFER@@A DD 00H			; pack_buffer_2
	DD	00H
	DD	00H
	DD	08H
	DD	00H
?unpack_buffer_1@@3UUNPACK_BUFFER@@A DD 00H		; unpack_buffer_1
	DD	00H
	DD	00H
	DD	08H
	DD	00H
?unpack_buffer_2@@3UUNPACK_BUFFER@@A DD 00H		; unpack_buffer_2
	DD	00H
	DD	00H
	DD	08H
	DD	00H
_DATA	ENDS
PUBLIC	?initialise_entity_pack_default_functions@@YGXXZ ; initialise_entity_pack_default_functions
PUBLIC	?unpack_local_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ; unpack_local_entity_data
PUBLIC	?unpack_client_server_entity_data@@YGXPAUENTITY@@@Z ; unpack_client_server_entity_data
PUBLIC	?open_pack_buffer@@YGXPAEH@Z			; open_pack_buffer
PUBLIC	?close_pack_buffer@@YGHXZ			; close_pack_buffer
PUBLIC	?get_current_pack_buffer_bit_size@@YGHXZ	; get_current_pack_buffer_bit_size
PUBLIC	?pack_signed_data@@YGXHH@Z			; pack_signed_data
PUBLIC	?pack_unsigned_data@@YGXIH@Z			; pack_unsigned_data
PUBLIC	?open_unpack_buffer@@YGXPAEH@Z			; open_unpack_buffer
PUBLIC	?close_unpack_buffer@@YGXXZ			; close_unpack_buffer
PUBLIC	?unpack_signed_data@@YGHH@Z			; unpack_signed_data
PUBLIC	?unpack_unsigned_data@@YGIH@Z			; unpack_unsigned_data
PUBLIC	?get_current_pack_buffer_size@@YGHXZ		; get_current_pack_buffer_size
PUBLIC	?debug_print_int_pack_stats@@YGXXZ		; debug_print_int_pack_stats
PUBLIC	?__LINE__Var@?0??default_pack_entity_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA ; `default_pack_entity_data'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0DC@LDOHCPDO@default_pack_entity_data?5invoke@ ; `string'
PUBLIC	?__LINE__Var@?0??default_unpack_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA ; `default_unpack_entity_data'::`1'::__LINE__Var
PUBLIC	??_C@_0DE@MJDGBIJK@default_unpack_entity_data?5invo@ ; `string'
PUBLIC	??_C@_0CH@KLEACNAE@default_unpack_entity_data?5invo@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_client_server_entity_data@@YGXPAUENTITY@@@Z@4JA ; `unpack_client_server_entity_data'::`1'::__LINE__Var
PUBLIC	??_C@_0CJ@HDFJMCJJ@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ ; `string'
PUBLIC	?__LINE__Var@?0??open_pack_buffer@@YGXPAEH@Z@4JA ; `open_pack_buffer'::`1'::__LINE__Var
PUBLIC	??_C@_06HOHPNJLC@buffer@			; `string'
PUBLIC	??_C@_0BA@DMECBBBD@buffer_size?5?$DO?50@	; `string'
PUBLIC	??_C@_0BH@KJFCAMHK@Exhausted?5pack?5buffers@	; `string'
PUBLIC	?__LINE__Var@?0??close_pack_buffer@@YGHXZ@4JA	; `close_pack_buffer'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@LKIHPHBE@current_pack_buffer@		; `string'
PUBLIC	??_C@_0BM@PPPPNCNL@current_pack_buffer?9?$DObuffer@ ; `string'
PUBLIC	?__LINE__Var@?0??pack_signed_data@@YGXHH@Z@4JA	; `pack_signed_data'::`1'::__LINE__Var
PUBLIC	??_C@_0DP@MINNHBAG@?$CInumber_of_bits_to_pack?5?$DO?50?$CJ?5?$CG?$CG@ ; `string'
PUBLIC	??_C@_0DP@BLHAPNGO@pack_signed_data?3?5exceeded?5pack@ ; `string'
PUBLIC	?__LINE__Var@?0??pack_unsigned_data@@YGXIH@Z@4JA ; `pack_unsigned_data'::`1'::__LINE__Var
PUBLIC	??_C@_0EB@DINFAIHH@pack_unsigned_data?3?5exceeded?5pa@ ; `string'
PUBLIC	?__LINE__Var@?0??open_unpack_buffer@@YGXPAEH@Z@4JA ; `open_unpack_buffer'::`1'::__LINE__Var
PUBLIC	??_C@_0BJ@DGGIFJBN@Exhausted?5unpack?5buffers@	; `string'
PUBLIC	?__LINE__Var@?0??close_unpack_buffer@@YGXXZ@4JA	; `close_unpack_buffer'::`1'::__LINE__Var
PUBLIC	??_C@_0BG@DLJEIAEP@current_unpack_buffer@	; `string'
PUBLIC	??_C@_0BO@NHLIDKPJ@current_unpack_buffer?9?$DObuffer@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_signed_data@@YGHH@Z@4JA	; `unpack_signed_data'::`1'::__LINE__Var
PUBLIC	??_C@_0ED@HJPAAFKI@?$CInumber_of_bits_to_unpack?5?$DO?50?$CJ?5@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_unsigned_data@@YGIH@Z@4JA ; `unpack_unsigned_data'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_current_pack_buffer_size@@YGHXZ@4JA ; `get_current_pack_buffer_size'::`1'::__LINE__Var
PUBLIC	??_C@_0DM@GEAPCKOB@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_0O@NNNIFMEG@PACKING?5STATS@		; `string'
PUBLIC	??_C@_0CI@DMEMNPNJ@Packing?5?$CFd?5bits?7?7signed?5?$CFd?7?7uns@ ; `string'
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?update_create_entity_statistics@@YGXW4ENTITY_TYPES@@@Z:PROC ; update_create_entity_statistics
EXTRN	?transmit_entity_comms_message@@YAXW4ENTITY_COMMS_MESSAGES@@PAUENTITY@@ZZ:PROC ; transmit_entity_comms_message
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?entity_type_database@@3PAUENTITY_TYPE_DATA@@A:BYTE ; entity_type_database
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
;	COMDAT ??_C@_0CI@DMEMNPNJ@Packing?5?$CFd?5bits?7?7signed?5?$CFd?7?7uns@
CONST	SEGMENT
??_C@_0CI@DMEMNPNJ@Packing?5?$CFd?5bits?7?7signed?5?$CFd?7?7uns@ DB 'Pack'
	DB	'ing %d bits', 09H, 09H, 'signed %d', 09H, 09H, 'unsigned %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NNNIFMEG@PACKING?5STATS@
CONST	SEGMENT
??_C@_0O@NNNIFMEG@PACKING?5STATS@ DB 'PACKING STATS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@GEAPCKOB@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0DM@GEAPCKOB@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ DB '='
	DB	'==========================================================', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_current_pack_buffer_size@@YGHXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_current_pack_buffer_size@@YGHXZ@4JA DD 037dH ; `get_current_pack_buffer_size'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_unsigned_data@@YGIH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_unsigned_data@@YGIH@Z@4JA DD 0342H ; `unpack_unsigned_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0ED@HJPAAFKI@?$CInumber_of_bits_to_unpack?5?$DO?50?$CJ?5@
CONST	SEGMENT
??_C@_0ED@HJPAAFKI@?$CInumber_of_bits_to_unpack?5?$DO?50?$CJ?5@ DB '(numb'
	DB	'er_of_bits_to_unpack > 0) && (number_of_bits_to_unpack <= 32)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_signed_data@@YGHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_signed_data@@YGHH@Z@4JA DD 0309H ; `unpack_signed_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@NHLIDKPJ@current_unpack_buffer?9?$DObuffer@
CONST	SEGMENT
??_C@_0BO@NHLIDKPJ@current_unpack_buffer?9?$DObuffer@ DB 'current_unpack_'
	DB	'buffer->buffer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DLJEIAEP@current_unpack_buffer@
CONST	SEGMENT
??_C@_0BG@DLJEIAEP@current_unpack_buffer@ DB 'current_unpack_buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??close_unpack_buffer@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??close_unpack_buffer@@YGXXZ@4JA DD 0291H ; `close_unpack_buffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BJ@DGGIFJBN@Exhausted?5unpack?5buffers@
CONST	SEGMENT
??_C@_0BJ@DGGIFJBN@Exhausted?5unpack?5buffers@ DB 'Exhausted unpack buffe'
	DB	'rs', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??open_unpack_buffer@@YGXPAEH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??open_unpack_buffer@@YGXPAEH@Z@4JA DD 0263H ; `open_unpack_buffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EB@DINFAIHH@pack_unsigned_data?3?5exceeded?5pa@
CONST	SEGMENT
??_C@_0EB@DINFAIHH@pack_unsigned_data?3?5exceeded?5pa@ DB 'pack_unsigned_'
	DB	'data: exceeded pack width (value = %u, width = %d)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_unsigned_data@@YGXIH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_unsigned_data@@YGXIH@Z@4JA DD 01fbH ; `pack_unsigned_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DP@BLHAPNGO@pack_signed_data?3?5exceeded?5pack@
CONST	SEGMENT
??_C@_0DP@BLHAPNGO@pack_signed_data?3?5exceeded?5pack@ DB 'pack_signed_da'
	DB	'ta: exceeded pack width (value = %d, width = %d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@MINNHBAG@?$CInumber_of_bits_to_pack?5?$DO?50?$CJ?5?$CG?$CG@
CONST	SEGMENT
??_C@_0DP@MINNHBAG@?$CInumber_of_bits_to_pack?5?$DO?50?$CJ?5?$CG?$CG@ DB '('
	DB	'number_of_bits_to_pack > 0) && (number_of_bits_to_pack <= 32)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_signed_data@@YGXHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_signed_data@@YGXHH@Z@4JA DD 01a3H	; `pack_signed_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BM@PPPPNCNL@current_pack_buffer?9?$DObuffer@
CONST	SEGMENT
??_C@_0BM@PPPPNCNL@current_pack_buffer?9?$DObuffer@ DB 'current_pack_buff'
	DB	'er->buffer', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LKIHPHBE@current_pack_buffer@
CONST	SEGMENT
??_C@_0BE@LKIHPHBE@current_pack_buffer@ DB 'current_pack_buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??close_pack_buffer@@YGHXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??close_pack_buffer@@YGHXZ@4JA DD 0104H	; `close_pack_buffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@KJFCAMHK@Exhausted?5pack?5buffers@
CONST	SEGMENT
??_C@_0BH@KJFCAMHK@Exhausted?5pack?5buffers@ DB 'Exhausted pack buffers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DMECBBBD@buffer_size?5?$DO?50@
CONST	SEGMENT
??_C@_0BA@DMECBBBD@buffer_size?5?$DO?50@ DB 'buffer_size > 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??open_pack_buffer@@YGXPAEH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??open_pack_buffer@@YGXPAEH@Z@4JA DD 0d6H ; `open_pack_buffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@HDFJMCJJ@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
CONST	SEGMENT
??_C@_0CJ@HDFJMCJJ@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ DB 'ge'
	DB	't_comms_model () == COMMS_MODEL_CLIENT', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_client_server_entity_data@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_client_server_entity_data@@YGXPAUENTITY@@@Z@4JA DD 0b1H ; `unpack_client_server_entity_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@KLEACNAE@default_unpack_entity_data?5invo@
CONST	SEGMENT
??_C@_0CH@KLEACNAE@default_unpack_entity_data?5invo@ DB 'default_unpack_e'
	DB	'ntity_data invoked: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MJDGBIJK@default_unpack_entity_data?5invo@
CONST	SEGMENT
??_C@_0DE@MJDGBIJK@default_unpack_entity_data?5invo@ DB 'default_unpack_e'
	DB	'ntity_data invoked: %s (index = %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??default_unpack_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??default_unpack_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA DD 06bH ; `default_unpack_entity_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DC@LDOHCPDO@default_pack_entity_data?5invoke@
CONST	SEGMENT
??_C@_0DC@LDOHCPDO@default_pack_entity_data?5invoke@ DB 'default_pack_ent'
	DB	'ity_data invoked: %s (index = %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pa'
	DB	'ck.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??default_pack_entity_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??default_pack_entity_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA DD 062H ; `default_pack_entity_data'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?unpack_bit@@YGXPAHPAE@Z
_TEXT	SEGMENT
_unpacked_data$ = 8					; size = 4
_unpack_ptr$ = 12					; size = 4
?unpack_bit@@YGXPAHPAE@Z PROC				; unpack_bit, COMDAT

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 728  : __asm
; 729  : {
; 730  : mov eax, [unpack_ptr]

  00009	8b 45 0c	 mov	 eax, DWORD PTR _unpack_ptr$[ebp]

; 731  : shl byte ptr [eax],1

  0000c	d0 20		 shl	 BYTE PTR [eax], 1

; 732  : mov eax, [unpacked_data]

  0000e	8b 45 08	 mov	 eax, DWORD PTR _unpacked_data$[ebp]

; 733  : rcr dword ptr [eax],1

  00011	d1 18		 rcr	 DWORD PTR [eax], 1

; 734  : }
; 735  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?unpack_bit@@YGXPAHPAE@Z ENDP				; unpack_bit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?pack_bit@@YGXPAHPAE@Z
_TEXT	SEGMENT
_unpacked_data$ = 8					; size = 4
_pack_ptr$ = 12						; size = 4
?pack_bit@@YGXPAHPAE@Z PROC				; pack_bit, COMDAT

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 375  : __asm
; 376  : {
; 377  : mov eax, unpacked_data

  00009	8b 45 08	 mov	 eax, DWORD PTR _unpacked_data$[ebp]

; 378  : shr dword ptr[eax],1

  0000c	d1 28		 shr	 DWORD PTR [eax], 1

; 379  : mov eax, pack_ptr

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _pack_ptr$[ebp]

; 380  : rcl byte ptr[eax],1

  00011	d0 10		 rcl	 BYTE PTR [eax], 1

; 381  : }
; 382  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?pack_bit@@YGXPAHPAE@Z ENDP				; pack_bit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?default_unpack_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv74 = -68						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_mode$ = 16						; size = 4
?default_unpack_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z PROC ; default_unpack_entity_data, COMDAT

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 108  : 	if (mode == PACK_MODE_UPDATE_ENTITY)

  00009	83 7d 10 03	 cmp	 DWORD PTR _mode$[ebp], 3
  0000d	75 58		 jne	 SHORT $LN2@default_un

; 109  : 	{
; 110  : 		debug_fatal ("default_unpack_entity_data invoked: %s (index = %d)", get_local_entity_type_name (en), get_local_entity_index (en));

  0000f	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00013	74 0a		 je	 SHORT $LN5@default_un
  00015	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d bc	 mov	 DWORD PTR tv74[ebp], ecx
  0001d	eb 21		 jmp	 SHORT $LN6@default_un
$LN5@default_un:
  0001f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??default_unpack_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00025	83 c2 03	 add	 edx, 3
  00028	52		 push	 edx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00039	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN6@default_un:
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00043	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  00049	c1 f9 04	 sar	 ecx, 4
  0004c	51		 push	 ecx
  0004d	6b 55 bc 0c	 imul	 edx, DWORD PTR tv74[ebp], 12
  00051	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[edx]
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@MJDGBIJK@default_unpack_entity_data?5invo@
  0005d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  : 	}
; 112  : 	else 

  00065	eb 18		 jmp	 SHORT $LN1@default_un
$LN2@default_un:

; 113  : 	{
; 114  : 		debug_fatal ("default_unpack_entity_data invoked: %s", get_entity_type_name (type));

  00067	6b 45 0c 0c	 imul	 eax, DWORD PTR _type$[ebp], 12
  0006b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[eax]
  00071	51		 push	 ecx
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KLEACNAE@default_unpack_entity_data?5invo@
  00077	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0007c	83 c4 08	 add	 esp, 8
$LN1@default_un:

; 115  : 	}
; 116  : }

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 0c 00	 ret	 12			; 0000000cH
?default_unpack_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ENDP ; default_unpack_entity_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?default_pack_entity_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv73 = -68						; size = 4
_en$ = 8						; size = 4
_mode$ = 12						; size = 4
?default_pack_entity_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z PROC ; default_pack_entity_data, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 99   : 	debug_fatal ("default_pack_entity_data invoked: %s (index = %d)", get_local_entity_type_name (en), get_local_entity_index (en));

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	74 0a		 je	 SHORT $LN3@default_pa
  0000f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	89 4d bc	 mov	 DWORD PTR tv73[ebp], ecx
  00017	eb 21		 jmp	 SHORT $LN4@default_pa
$LN3@default_pa:
  00019	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??default_pack_entity_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  0001f	83 c2 01	 add	 edx, 1
  00022	52		 push	 edx
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00033	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@default_pa:
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0003d	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  00043	c1 f9 04	 sar	 ecx, 4
  00046	51		 push	 ecx
  00047	6b 55 bc 0c	 imul	 edx, DWORD PTR tv73[ebp], 12
  0004b	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[edx]
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LDOHCPDO@default_pack_entity_data?5invoke@
  00057	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 100  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?default_pack_entity_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z ENDP ; default_pack_entity_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?debug_print_int_pack_stats@@YGXXZ
_TEXT	SEGMENT
_loop$ = -4						; size = 4
?debug_print_int_pack_stats@@YGXXZ PROC			; debug_print_int_pack_stats, COMDAT

; 905  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 906  : 
; 907  : 	int
; 908  : 		loop;
; 909  : 
; 910  : 	debug_log ("===========================================================");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@GEAPCKOB@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  0000e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00013	83 c4 04	 add	 esp, 4

; 911  : 
; 912  : 	debug_log ("PACKING STATS");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NNNIFMEG@PACKING?5STATS@
  0001b	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00020	83 c4 04	 add	 esp, 4

; 913  : 
; 914  : 	for (loop = 0; loop <= 32; loop ++)

  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  0002a	eb 09		 jmp	 SHORT $LN4@debug_prin
$LN2@debug_prin:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@debug_prin:
  00035	83 7d fc 20	 cmp	 DWORD PTR _loop$[ebp], 32 ; 00000020H
  00039	7f 29		 jg	 SHORT $LN3@debug_prin

; 915  : 	{
; 916  : 
; 917  : 		debug_log ("Packing %d bits		signed %d		unsigned %d", loop, signed_int_pack_stats [loop], unsigned_int_pack_stats [loop]);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0003e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?unsigned_int_pack_stats@@3PAHA[eax*4]
  00045	51		 push	 ecx
  00046	8b 55 fc	 mov	 edx, DWORD PTR _loop$[ebp]
  00049	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?signed_int_pack_stats@@3PAHA[edx*4]
  00050	50		 push	 eax
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  00054	51		 push	 ecx
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@DMEMNPNJ@Packing?5?$CFd?5bits?7?7signed?5?$CFd?7?7uns@
  0005a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0005f	83 c4 10	 add	 esp, 16			; 00000010H

; 918  : 	}

  00062	eb c8		 jmp	 SHORT $LN2@debug_prin
$LN3@debug_prin:

; 919  : 
; 920  : 	debug_log ("===========================================================");

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@GEAPCKOB@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  00069	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0006e	83 c4 04	 add	 esp, 4

; 921  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?debug_print_int_pack_stats@@YGXXZ ENDP			; debug_print_int_pack_stats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?get_current_pack_buffer_size@@YGHXZ
_TEXT	SEGMENT
?get_current_pack_buffer_size@@YGHXZ PROC		; get_current_pack_buffer_size, COMDAT

; 893  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 894  : 
; 895  : 	ASSERT (current_pack_buffer);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A, 0 ; current_pack_buffer
  00010	75 18		 jne	 SHORT $LN2@get_curren
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_current_pack_buffer_size@@YGHXZ@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LKIHPHBE@current_pack_buffer@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_curren:

; 896  : 
; 897  : 	return (current_pack_buffer->ptr - current_pack_buffer->buffer);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00035	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00038	2b 01		 sub	 eax, DWORD PTR [ecx]

; 898  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?get_current_pack_buffer_size@@YGHXZ ENDP		; get_current_pack_buffer_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?unpack_unsigned_data@@YGIH@Z
_TEXT	SEGMENT
tv85 = -76						; size = 4
_unpacked_data$ = -8					; size = 4
_count$ = -4						; size = 4
_number_of_bits_to_unpack$ = 8				; size = 4
?unpack_unsigned_data@@YGIH@Z PROC			; unpack_unsigned_data, COMDAT

; 834  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 835  : 	int
; 836  : 		count;
; 837  : 
; 838  : 	unsigned int
; 839  : 		unpacked_data;
; 840  : 
; 841  : 	//
; 842  : 	// pre-amble
; 843  : 	//
; 844  : 
; 845  : 	ASSERT ((number_of_bits_to_unpack > 0) && (number_of_bits_to_unpack <= 32));

  00009	83 7d 08 00	 cmp	 DWORD PTR _number_of_bits_to_unpack$[ebp], 0
  0000d	7e 06		 jle	 SHORT $LN5@unpack_uns
  0000f	83 7d 08 20	 cmp	 DWORD PTR _number_of_bits_to_unpack$[ebp], 32 ; 00000020H
  00013	7e 18		 jle	 SHORT $LN4@unpack_uns
$LN5@unpack_uns:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_unsigned_data@@YGIH@Z@4JA
  0001a	83 c0 0b	 add	 eax, 11			; 0000000bH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@HJPAAFKI@?$CInumber_of_bits_to_unpack?5?$DO?50?$CJ?5@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@unpack_uns:

; 846  : 
; 847  : 	ASSERT (current_unpack_buffer);

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A, 0 ; current_unpack_buffer
  00034	75 18		 jne	 SHORT $LN6@unpack_uns
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_unsigned_data@@YGIH@Z@4JA
  0003b	83 c0 0d	 add	 eax, 13			; 0000000dH
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DLJEIAEP@current_unpack_buffer@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@unpack_uns:

; 848  : 
; 849  : 	ASSERT (current_unpack_buffer->buffer);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  00053	83 38 00	 cmp	 DWORD PTR [eax], 0
  00056	75 18		 jne	 SHORT $LN7@unpack_uns
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_unsigned_data@@YGIH@Z@4JA
  0005d	83 c0 0f	 add	 eax, 15			; 0000000fH
  00060	50		 push	 eax
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NHLIDKPJ@current_unpack_buffer?9?$DObuffer@
  0006b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@unpack_uns:

; 850  : 
; 851  : 	if (current_unpack_buffer->overflow)

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  00075	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00079	74 07		 je	 SHORT $LN8@unpack_uns

; 852  : 	{
; 853  : 		return (0);

  0007b	33 c0		 xor	 eax, eax
  0007d	e9 b5 00 00 00	 jmp	 $LN1@unpack_uns
$LN8@unpack_uns:

; 854  : 	}
; 855  : 
; 856  : 	//
; 857  : 	// unpack data
; 858  : 	//
; 859  : 
; 860  : 	count = number_of_bits_to_unpack;

  00082	8b 45 08	 mov	 eax, DWORD PTR _number_of_bits_to_unpack$[ebp]
  00085	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN2@unpack_uns:

; 861  : 
; 862  : 	while (count--)

  00088	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0008b	89 45 b4	 mov	 DWORD PTR tv85[ebp], eax
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00091	83 e9 01	 sub	 ecx, 1
  00094	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  00097	83 7d b4 00	 cmp	 DWORD PTR tv85[ebp], 0
  0009b	0f 84 83 00 00
	00		 je	 $LN3@unpack_uns

; 863  : 	{
; 864  : 		if (current_unpack_buffer->bit_counter == 0)

  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000a6	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000aa	75 4d		 jne	 SHORT $LN9@unpack_uns

; 865  : 		{
; 866  : 			current_unpack_buffer->ptr++;

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b4	83 c1 01	 add	 ecx, 1
  000b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000bd	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 867  : 
; 868  : 			current_unpack_buffer->bit_counter = 8;

  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000c5	c7 40 0c 08 00
	00 00		 mov	 DWORD PTR [eax+12], 8

; 869  : 
; 870  : 			if ((current_unpack_buffer->ptr - current_unpack_buffer->buffer + 1) > current_unpack_buffer->size)

  000cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000d7	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000da	2b 11		 sub	 edx, DWORD PTR [ecx]
  000dc	83 c2 01	 add	 edx, 1
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000e4	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  000e7	7e 10		 jle	 SHORT $LN9@unpack_uns

; 871  : 			{
; 872  : 				current_unpack_buffer->overflow = TRUE;

  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000ee	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [eax+16], 1

; 873  : 
; 874  : 				return (0);

  000f5	33 c0		 xor	 eax, eax
  000f7	eb 3e		 jmp	 SHORT $LN1@unpack_uns
$LN9@unpack_uns:

; 875  : 			}
; 876  : 		}
; 877  : 
; 878  : 		unpack_bit ((int *) &unpacked_data, current_unpack_buffer->ptr);

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000fe	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00101	51		 push	 ecx
  00102	8d 55 f8	 lea	 edx, DWORD PTR _unpacked_data$[ebp]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 ?unpack_bit@@YGXPAHPAE@Z ; unpack_bit

; 879  : 
; 880  : 		current_unpack_buffer->bit_counter--;

  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  00110	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00113	83 e9 01	 sub	 ecx, 1
  00116	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  0011c	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 881  : 	}

  0011f	e9 64 ff ff ff	 jmp	 $LN2@unpack_uns
$LN3@unpack_uns:

; 882  : 
; 883  : 	unpacked_data = unpacked_data >> (32 - number_of_bits_to_unpack);

  00124	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00129	2b 4d 08	 sub	 ecx, DWORD PTR _number_of_bits_to_unpack$[ebp]
  0012c	8b 45 f8	 mov	 eax, DWORD PTR _unpacked_data$[ebp]
  0012f	d3 e8		 shr	 eax, cl
  00131	89 45 f8	 mov	 DWORD PTR _unpacked_data$[ebp], eax

; 884  : 
; 885  : 	return (unpacked_data);

  00134	8b 45 f8	 mov	 eax, DWORD PTR _unpacked_data$[ebp]
$LN1@unpack_uns:

; 886  : }

  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c2 04 00	 ret	 4
?unpack_unsigned_data@@YGIH@Z ENDP			; unpack_unsigned_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?unpack_signed_data@@YGHH@Z
_TEXT	SEGMENT
tv85 = -76						; size = 4
_unpacked_data$ = -8					; size = 4
_count$ = -4						; size = 4
_number_of_bits_to_unpack$ = 8				; size = 4
?unpack_signed_data@@YGHH@Z PROC			; unpack_signed_data, COMDAT

; 777  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 778  : 	int
; 779  : 		count,
; 780  : 		unpacked_data;
; 781  : 
; 782  : 	//
; 783  : 	// pre-amble
; 784  : 	//
; 785  : 
; 786  : 	ASSERT ((number_of_bits_to_unpack > 0) && (number_of_bits_to_unpack <= 32));

  00009	83 7d 08 00	 cmp	 DWORD PTR _number_of_bits_to_unpack$[ebp], 0
  0000d	7e 06		 jle	 SHORT $LN5@unpack_sig
  0000f	83 7d 08 20	 cmp	 DWORD PTR _number_of_bits_to_unpack$[ebp], 32 ; 00000020H
  00013	7e 18		 jle	 SHORT $LN4@unpack_sig
$LN5@unpack_sig:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_signed_data@@YGHH@Z@4JA
  0001a	83 c0 09	 add	 eax, 9
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@HJPAAFKI@?$CInumber_of_bits_to_unpack?5?$DO?50?$CJ?5@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@unpack_sig:

; 787  : 
; 788  : 	ASSERT (current_unpack_buffer);

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A, 0 ; current_unpack_buffer
  00034	75 18		 jne	 SHORT $LN6@unpack_sig
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_signed_data@@YGHH@Z@4JA
  0003b	83 c0 0b	 add	 eax, 11			; 0000000bH
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DLJEIAEP@current_unpack_buffer@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@unpack_sig:

; 789  : 
; 790  : 	ASSERT (current_unpack_buffer->buffer);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  00053	83 38 00	 cmp	 DWORD PTR [eax], 0
  00056	75 18		 jne	 SHORT $LN7@unpack_sig
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_signed_data@@YGHH@Z@4JA
  0005d	83 c0 0d	 add	 eax, 13			; 0000000dH
  00060	50		 push	 eax
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NHLIDKPJ@current_unpack_buffer?9?$DObuffer@
  0006b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@unpack_sig:

; 791  : 
; 792  : 	if (current_unpack_buffer->overflow)

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  00075	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00079	74 07		 je	 SHORT $LN8@unpack_sig

; 793  : 	{
; 794  : 		return (0);

  0007b	33 c0		 xor	 eax, eax
  0007d	e9 b5 00 00 00	 jmp	 $LN1@unpack_sig
$LN8@unpack_sig:

; 795  : 	}
; 796  : 
; 797  : 	//
; 798  : 	// unpack data
; 799  : 	//
; 800  : 
; 801  : 	count = number_of_bits_to_unpack;

  00082	8b 45 08	 mov	 eax, DWORD PTR _number_of_bits_to_unpack$[ebp]
  00085	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN2@unpack_sig:

; 802  : 
; 803  : 	while (count--)

  00088	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0008b	89 45 b4	 mov	 DWORD PTR tv85[ebp], eax
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00091	83 e9 01	 sub	 ecx, 1
  00094	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  00097	83 7d b4 00	 cmp	 DWORD PTR tv85[ebp], 0
  0009b	0f 84 83 00 00
	00		 je	 $LN3@unpack_sig

; 804  : 	{
; 805  : 		if (current_unpack_buffer->bit_counter == 0)

  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000a6	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000aa	75 4d		 jne	 SHORT $LN9@unpack_sig

; 806  : 		{
; 807  : 			current_unpack_buffer->ptr++;

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b4	83 c1 01	 add	 ecx, 1
  000b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000bd	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 808  : 
; 809  : 			current_unpack_buffer->bit_counter = 8;

  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000c5	c7 40 0c 08 00
	00 00		 mov	 DWORD PTR [eax+12], 8

; 810  : 
; 811  : 			if ((current_unpack_buffer->ptr - current_unpack_buffer->buffer + 1) > current_unpack_buffer->size)

  000cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000d7	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000da	2b 11		 sub	 edx, DWORD PTR [ecx]
  000dc	83 c2 01	 add	 edx, 1
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000e4	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  000e7	7e 10		 jle	 SHORT $LN9@unpack_sig

; 812  : 			{
; 813  : 				current_unpack_buffer->overflow = TRUE;

  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000ee	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [eax+16], 1

; 814  : 
; 815  : 				return (0);

  000f5	33 c0		 xor	 eax, eax
  000f7	eb 3e		 jmp	 SHORT $LN1@unpack_sig
$LN9@unpack_sig:

; 816  : 			}
; 817  : 		}
; 818  : 
; 819  : 		unpack_bit (&unpacked_data, current_unpack_buffer->ptr);

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000fe	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00101	51		 push	 ecx
  00102	8d 55 f8	 lea	 edx, DWORD PTR _unpacked_data$[ebp]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 ?unpack_bit@@YGXPAHPAE@Z ; unpack_bit

; 820  : 
; 821  : 		current_unpack_buffer->bit_counter--;

  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  00110	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00113	83 e9 01	 sub	 ecx, 1
  00116	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  0011c	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 822  : 	}

  0011f	e9 64 ff ff ff	 jmp	 $LN2@unpack_sig
$LN3@unpack_sig:

; 823  : 
; 824  : 	unpacked_data = unpacked_data >> (32 - number_of_bits_to_unpack);

  00124	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00129	2b 4d 08	 sub	 ecx, DWORD PTR _number_of_bits_to_unpack$[ebp]
  0012c	8b 45 f8	 mov	 eax, DWORD PTR _unpacked_data$[ebp]
  0012f	d3 f8		 sar	 eax, cl
  00131	89 45 f8	 mov	 DWORD PTR _unpacked_data$[ebp], eax

; 825  : 
; 826  : 	return (unpacked_data);

  00134	8b 45 f8	 mov	 eax, DWORD PTR _unpacked_data$[ebp]
$LN1@unpack_sig:

; 827  : }

  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c2 04 00	 ret	 4
?unpack_signed_data@@YGHH@Z ENDP			; unpack_signed_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?close_unpack_buffer@@YGXXZ
_TEXT	SEGMENT
?close_unpack_buffer@@YGXXZ PROC			; close_unpack_buffer, COMDAT

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 658  : 	ASSERT (current_unpack_buffer);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A, 0 ; current_unpack_buffer
  00010	75 18		 jne	 SHORT $LN2@close_unpa
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??close_unpack_buffer@@YGXXZ@4JA
  00017	83 c0 01	 add	 eax, 1
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DLJEIAEP@current_unpack_buffer@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@close_unpa:

; 659  : 
; 660  : 	ASSERT (current_unpack_buffer->buffer);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  0002f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00032	75 18		 jne	 SHORT $LN3@close_unpa
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??close_unpack_buffer@@YGXXZ@4JA
  00039	83 c0 03	 add	 eax, 3
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NHLIDKPJ@current_unpack_buffer?9?$DObuffer@
  00047	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@close_unpa:

; 661  : 
; 662  : 	#if DEBUG_MODULE
; 663  : 	{
; 664  : 		int
; 665  : 			buffer_num;
; 666  : 
; 667  : 		buffer_num = (current_unpack_buffer == &unpack_buffer_1) ? 1 : 2;
; 668  : 
; 669  : 		debug_log
; 670  : 		(
; 671  : 			"Close unpack buffer %d: address = %x, overflow = %d",
; 672  : 			buffer_num,
; 673  : 			current_unpack_buffer->buffer,
; 674  : 			current_unpack_buffer->overflow
; 675  : 		);
; 676  : 	}
; 677  : 	#endif
; 678  : 
; 679  : 	//
; 680  : 	// close current unpack buffer
; 681  : 	//
; 682  : 
; 683  : 	current_unpack_buffer->buffer = NULL;

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 684  : 
; 685  : 	//
; 686  : 	// revert to previously opened unpack buffer (if any)
; 687  : 	//
; 688  : 
; 689  : 	if (unpack_buffer_1.buffer)

  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?unpack_buffer_1@@3UUNPACK_BUFFER@@A, 0
  0005e	74 0c		 je	 SHORT $LN4@close_unpa

; 690  : 	{
; 691  : 		current_unpack_buffer = &unpack_buffer_1;

  00060	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A, OFFSET ?unpack_buffer_1@@3UUNPACK_BUFFER@@A ; current_unpack_buffer, unpack_buffer_1
  0006a	eb 1f		 jmp	 SHORT $LN1@close_unpa
$LN4@close_unpa:

; 692  : 	}
; 693  : 	else if (unpack_buffer_2.buffer)

  0006c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?unpack_buffer_2@@3UUNPACK_BUFFER@@A, 0
  00073	74 0c		 je	 SHORT $LN6@close_unpa

; 694  : 	{
; 695  : 		current_unpack_buffer = &unpack_buffer_2;

  00075	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A, OFFSET ?unpack_buffer_2@@3UUNPACK_BUFFER@@A ; current_unpack_buffer, unpack_buffer_2

; 696  : 	}
; 697  : 	else

  0007f	eb 0a		 jmp	 SHORT $LN1@close_unpa
$LN6@close_unpa:

; 698  : 	{
; 699  : 		current_unpack_buffer = NULL;

  00081	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A, 0 ; current_unpack_buffer
$LN1@close_unpa:

; 700  : 	}
; 701  : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?close_unpack_buffer@@YGXXZ ENDP			; close_unpack_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?open_unpack_buffer@@YGXPAEH@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_buffer_size$ = 12					; size = 4
?open_unpack_buffer@@YGXPAEH@Z PROC			; open_unpack_buffer, COMDAT

; 611  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 612  : 	ASSERT (buffer);

  00009	83 7d 08 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@open_unpac
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??open_unpack_buffer@@YGXPAEH@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@open_unpac:

; 613  : 
; 614  : 	ASSERT (buffer_size > 0);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _buffer_size$[ebp], 0
  0002b	7f 18		 jg	 SHORT $LN3@open_unpac
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??open_unpack_buffer@@YGXPAEH@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DMECBBBD@buffer_size?5?$DO?50@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@open_unpac:

; 615  : 
; 616  : 	if (!unpack_buffer_1.buffer)

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?unpack_buffer_1@@3UUNPACK_BUFFER@@A, 0
  0004c	75 0c		 jne	 SHORT $LN4@open_unpac

; 617  : 	{
; 618  : 		#if DEBUG_MODULE
; 619  : 
; 620  : 		debug_log ("Open unpack buffer 1 (address = %x, size = %d)", buffer, buffer_size);
; 621  : 
; 622  : 		#endif
; 623  : 
; 624  : 		current_unpack_buffer = &unpack_buffer_1;

  0004e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A, OFFSET ?unpack_buffer_1@@3UUNPACK_BUFFER@@A ; current_unpack_buffer, unpack_buffer_1
  00058	eb 22		 jmp	 SHORT $LN5@open_unpac
$LN4@open_unpac:

; 625  : 	}
; 626  : 	else if (!unpack_buffer_2.buffer)

  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?unpack_buffer_2@@3UUNPACK_BUFFER@@A, 0
  00061	75 0c		 jne	 SHORT $LN6@open_unpac

; 627  : 	{
; 628  : 		#if DEBUG_MODULE
; 629  : 
; 630  : 		debug_log ("Open unpack buffer 2 (address = %x, size = %d)", buffer, buffer_size);
; 631  : 
; 632  : 		#endif
; 633  : 
; 634  : 		current_unpack_buffer = &unpack_buffer_2;

  00063	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A, OFFSET ?unpack_buffer_2@@3UUNPACK_BUFFER@@A ; current_unpack_buffer, unpack_buffer_2

; 635  : 	}
; 636  : 	else

  0006d	eb 0d		 jmp	 SHORT $LN5@open_unpac
$LN6@open_unpac:

; 637  : 	{
; 638  : 		debug_fatal ("Exhausted unpack buffers");

  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DGGIFJBN@Exhausted?5unpack?5buffers@
  00074	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00079	83 c4 04	 add	 esp, 4
$LN5@open_unpac:

; 639  : 	}
; 640  : 
; 641  : 	current_unpack_buffer->buffer = buffer;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00084	89 08		 mov	 DWORD PTR [eax], ecx

; 642  : 
; 643  : 	current_unpack_buffer->ptr = buffer;

  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0008e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 644  : 
; 645  : 	current_unpack_buffer->size = buffer_size;

  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  00099	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 646  : 
; 647  : 	current_unpack_buffer->bit_counter = 8;

  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000a1	c7 40 0c 08 00
	00 00		 mov	 DWORD PTR [eax+12], 8

; 648  : 
; 649  : 	current_unpack_buffer->overflow = FALSE;

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  000ad	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 650  : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 08 00	 ret	 8
?open_unpack_buffer@@YGXPAEH@Z ENDP			; open_unpack_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?pack_unsigned_data@@YGXIH@Z
_TEXT	SEGMENT
tv95 = -80						; size = 4
_max_value$1 = -12					; size = 4
_residue$2 = -8						; size = 4
_count$ = -4						; size = 4
_unpacked_data$ = 8					; size = 4
_number_of_bits_to_pack$ = 12				; size = 4
?pack_unsigned_data@@YGXIH@Z PROC			; pack_unsigned_data, COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 508  : 	int
; 509  : 		count;
; 510  : 
; 511  : 	#if PACKING_STATS
; 512  : 
; 513  : 	todd_unsigned_int_pack_stats [number_of_bits_to_pack] ++;
; 514  : 
; 515  : 	#endif
; 516  : 
; 517  : 	//
; 518  : 	// pre-amble
; 519  : 	//
; 520  : 
; 521  : 	ASSERT ((number_of_bits_to_pack > 0) && (number_of_bits_to_pack <= 32));

  00009	83 7d 0c 00	 cmp	 DWORD PTR _number_of_bits_to_pack$[ebp], 0
  0000d	7e 06		 jle	 SHORT $LN5@pack_unsig
  0000f	83 7d 0c 20	 cmp	 DWORD PTR _number_of_bits_to_pack$[ebp], 32 ; 00000020H
  00013	7e 18		 jle	 SHORT $LN4@pack_unsig
$LN5@pack_unsig:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_unsigned_data@@YGXIH@Z@4JA
  0001a	83 c0 0e	 add	 eax, 14			; 0000000eH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@MINNHBAG@?$CInumber_of_bits_to_pack?5?$DO?50?$CJ?5?$CG?$CG@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@pack_unsig:

; 522  : 
; 523  : 	ASSERT (current_pack_buffer);

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A, 0 ; current_pack_buffer
  00034	75 18		 jne	 SHORT $LN6@pack_unsig
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_unsigned_data@@YGXIH@Z@4JA
  0003b	83 c0 10	 add	 eax, 16			; 00000010H
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LKIHPHBE@current_pack_buffer@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@pack_unsig:

; 524  : 
; 525  : 	ASSERT (current_pack_buffer->buffer);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00053	83 38 00	 cmp	 DWORD PTR [eax], 0
  00056	75 18		 jne	 SHORT $LN7@pack_unsig
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_unsigned_data@@YGXIH@Z@4JA
  0005d	83 c0 12	 add	 eax, 18			; 00000012H
  00060	50		 push	 eax
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PPPPNCNL@current_pack_buffer?9?$DObuffer@
  0006b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@pack_unsig:

; 526  : 
; 527  : 	if (current_pack_buffer->overflow)

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00075	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00079	74 05		 je	 SHORT $LN8@pack_unsig

; 528  : 	{
; 529  : 		return;

  0007b	e9 f0 00 00 00	 jmp	 $LN1@pack_unsig
$LN8@pack_unsig:

; 530  : 	}
; 531  : 
; 532  : 	//
; 533  : 	// check data can be packed into given number of bits
; 534  : 	//
; 535  : 
; 536  : 	#ifdef DEBUG
; 537  : 	{
; 538  : 		unsigned int
; 539  : 			residue;
; 540  : 
; 541  : 		if (number_of_bits_to_pack < 32)

  00080	83 7d 0c 20	 cmp	 DWORD PTR _number_of_bits_to_pack$[ebp], 32 ; 00000020H
  00084	7d 26		 jge	 SHORT $LN9@pack_unsig

; 542  : 		{
; 543  : 			residue = unpacked_data >> number_of_bits_to_pack;

  00086	8b 45 08	 mov	 eax, DWORD PTR _unpacked_data$[ebp]
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR _number_of_bits_to_pack$[ebp]
  0008c	d3 e8		 shr	 eax, cl
  0008e	89 45 f8	 mov	 DWORD PTR _residue$2[ebp], eax

; 544  : 
; 545  : 			if (residue != 0)

  00091	83 7d f8 00	 cmp	 DWORD PTR _residue$2[ebp], 0
  00095	74 15		 je	 SHORT $LN9@pack_unsig

; 546  : 			{
; 547  : 				debug_fatal ("pack_unsigned_data: exceeded pack width (value = %u, width = %d)", unpacked_data, number_of_bits_to_pack);

  00097	8b 45 0c	 mov	 eax, DWORD PTR _number_of_bits_to_pack$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _unpacked_data$[ebp]
  0009e	51		 push	 ecx
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@DINFAIHH@pack_unsigned_data?3?5exceeded?5pa@
  000a4	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@pack_unsig:

; 548  : 			}
; 549  : 		}
; 550  : 	}
; 551  : 	#endif
; 552  : 
; 553  : 	// arneh - filter out any excess bits, if there are any
; 554  : 	if (number_of_bits_to_pack < 32)

  000ac	83 7d 0c 20	 cmp	 DWORD PTR _number_of_bits_to_pack$[ebp], 32 ; 00000020H
  000b0	7d 1e		 jge	 SHORT $LN11@pack_unsig

; 555  : 	{
; 556  : 		unsigned int max_value = (1 << number_of_bits_to_pack) - 1;

  000b2	b8 01 00 00 00	 mov	 eax, 1
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _number_of_bits_to_pack$[ebp]
  000ba	d3 e0		 shl	 eax, cl
  000bc	83 e8 01	 sub	 eax, 1
  000bf	89 45 f4	 mov	 DWORD PTR _max_value$1[ebp], eax

; 557  : 		if (unpacked_data > max_value)

  000c2	8b 45 08	 mov	 eax, DWORD PTR _unpacked_data$[ebp]
  000c5	3b 45 f4	 cmp	 eax, DWORD PTR _max_value$1[ebp]
  000c8	76 06		 jbe	 SHORT $LN11@pack_unsig

; 558  : 			unpacked_data = max_value;

  000ca	8b 45 f4	 mov	 eax, DWORD PTR _max_value$1[ebp]
  000cd	89 45 08	 mov	 DWORD PTR _unpacked_data$[ebp], eax
$LN11@pack_unsig:

; 559  : 	}
; 560  : 
; 561  : 	//
; 562  : 	// pack data
; 563  : 	//
; 564  : 
; 565  : 	count = number_of_bits_to_pack;

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _number_of_bits_to_pack$[ebp]
  000d3	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN2@pack_unsig:

; 566  : 
; 567  : 	while (count--)

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000d9	89 45 b0	 mov	 DWORD PTR tv95[ebp], eax
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  000df	83 e9 01	 sub	 ecx, 1
  000e2	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  000e5	83 7d b0 00	 cmp	 DWORD PTR tv95[ebp], 0
  000e9	0f 84 81 00 00
	00		 je	 $LN1@pack_unsig

; 568  : 	{
; 569  : 		if (current_pack_buffer->bit_counter == 0)

  000ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  000f4	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000f8	75 4b		 jne	 SHORT $LN13@pack_unsig

; 570  : 		{
; 571  : 			current_pack_buffer->ptr++;

  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  000ff	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00102	83 c1 01	 add	 ecx, 1
  00105	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0010b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 572  : 
; 573  : 			current_pack_buffer->bit_counter = 8;

  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00113	c7 40 0c 08 00
	00 00		 mov	 DWORD PTR [eax+12], 8

; 574  : 
; 575  : 			if ((current_pack_buffer->ptr - current_pack_buffer->buffer + 1) > current_pack_buffer->size)

  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0011f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00125	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00128	2b 11		 sub	 edx, DWORD PTR [ecx]
  0012a	83 c2 01	 add	 edx, 1
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00132	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00135	7e 0e		 jle	 SHORT $LN13@pack_unsig

; 576  : 			{
; 577  : 				current_pack_buffer->overflow = TRUE;

  00137	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0013c	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [eax+16], 1

; 578  : 
; 579  : 				return;

  00143	eb 2b		 jmp	 SHORT $LN1@pack_unsig
$LN13@pack_unsig:

; 580  : 			}
; 581  : 		}
; 582  : 
; 583  : 		pack_bit ((int *) &unpacked_data, current_pack_buffer->ptr);

  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0014a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014d	51		 push	 ecx
  0014e	8d 55 08	 lea	 edx, DWORD PTR _unpacked_data$[ebp]
  00151	52		 push	 edx
  00152	e8 00 00 00 00	 call	 ?pack_bit@@YGXPAHPAE@Z	; pack_bit

; 584  : 
; 585  : 		current_pack_buffer->bit_counter--;

  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0015c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0015f	83 e9 01	 sub	 ecx, 1
  00162	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00168	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 586  : 	}

  0016b	e9 66 ff ff ff	 jmp	 $LN2@pack_unsig
$LN1@pack_unsig:

; 587  : }

  00170	5f		 pop	 edi
  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c2 08 00	 ret	 8
?pack_unsigned_data@@YGXIH@Z ENDP			; pack_unsigned_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?pack_signed_data@@YGXHH@Z
_TEXT	SEGMENT
tv132 = -84						; size = 4
_min_value$1 = -16					; size = 4
_max_value$2 = -12					; size = 4
_residue$3 = -8						; size = 4
_count$ = -4						; size = 4
_unpacked_data$ = 8					; size = 4
_number_of_bits_to_pack$ = 12				; size = 4
?pack_signed_data@@YGXHH@Z PROC				; pack_signed_data, COMDAT

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 420  : 	int
; 421  : 		count;
; 422  : 
; 423  : 	#if PACKING_STATS
; 424  : 
; 425  : 	todd_signed_int_pack_stats [number_of_bits_to_pack] ++;
; 426  : 
; 427  : 	#endif
; 428  : 
; 429  : 	//
; 430  : 	// pre-amble
; 431  : 	//
; 432  : 
; 433  : 	ASSERT ((number_of_bits_to_pack > 0) && (number_of_bits_to_pack <= 32));

  00009	83 7d 0c 00	 cmp	 DWORD PTR _number_of_bits_to_pack$[ebp], 0
  0000d	7e 06		 jle	 SHORT $LN5@pack_signe
  0000f	83 7d 0c 20	 cmp	 DWORD PTR _number_of_bits_to_pack$[ebp], 32 ; 00000020H
  00013	7e 18		 jle	 SHORT $LN4@pack_signe
$LN5@pack_signe:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_signed_data@@YGXHH@Z@4JA
  0001a	83 c0 0e	 add	 eax, 14			; 0000000eH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@MINNHBAG@?$CInumber_of_bits_to_pack?5?$DO?50?$CJ?5?$CG?$CG@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@pack_signe:

; 434  : 
; 435  : 	ASSERT (current_pack_buffer);

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A, 0 ; current_pack_buffer
  00034	75 18		 jne	 SHORT $LN6@pack_signe
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_signed_data@@YGXHH@Z@4JA
  0003b	83 c0 10	 add	 eax, 16			; 00000010H
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LKIHPHBE@current_pack_buffer@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@pack_signe:

; 436  : 
; 437  : 	ASSERT (current_pack_buffer->buffer);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00053	83 38 00	 cmp	 DWORD PTR [eax], 0
  00056	75 18		 jne	 SHORT $LN7@pack_signe
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_signed_data@@YGXHH@Z@4JA
  0005d	83 c0 12	 add	 eax, 18			; 00000012H
  00060	50		 push	 eax
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PPPPNCNL@current_pack_buffer?9?$DObuffer@
  0006b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@pack_signe:

; 438  : 
; 439  : 	if (current_pack_buffer->overflow)

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00075	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00079	74 05		 je	 SHORT $LN8@pack_signe

; 440  : 	{
; 441  : 		return;

  0007b	e9 11 01 00 00	 jmp	 $LN1@pack_signe
$LN8@pack_signe:

; 442  : 	}
; 443  : 
; 444  : 	//
; 445  : 	// check data can be packed into given number of bits
; 446  : 	//
; 447  : 
; 448  : 	#ifdef DEBUG
; 449  : 	{
; 450  : 		int
; 451  : 			residue;
; 452  : 
; 453  : 		residue = unpacked_data >> (number_of_bits_to_pack - 1);

  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _number_of_bits_to_pack$[ebp]
  00083	83 e9 01	 sub	 ecx, 1
  00086	8b 45 08	 mov	 eax, DWORD PTR _unpacked_data$[ebp]
  00089	d3 f8		 sar	 eax, cl
  0008b	89 45 f8	 mov	 DWORD PTR _residue$3[ebp], eax

; 454  : 
; 455  : 		if ((residue != 0) && (residue != -1))

  0008e	83 7d f8 00	 cmp	 DWORD PTR _residue$3[ebp], 0
  00092	74 1b		 je	 SHORT $LN9@pack_signe
  00094	83 7d f8 ff	 cmp	 DWORD PTR _residue$3[ebp], -1
  00098	74 15		 je	 SHORT $LN9@pack_signe

; 456  : 		{
; 457  : 			debug_fatal ("pack_signed_data: exceeded pack width (value = %d, width = %d)", unpacked_data, number_of_bits_to_pack);

  0009a	8b 45 0c	 mov	 eax, DWORD PTR _number_of_bits_to_pack$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _unpacked_data$[ebp]
  000a1	51		 push	 ecx
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@BLHAPNGO@pack_signed_data?3?5exceeded?5pack@
  000a7	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@pack_signe:

; 458  : 		}
; 459  : 	}
; 460  : 	#endif
; 461  : 
; 462  : 	count = number_of_bits_to_pack;

  000af	8b 45 0c	 mov	 eax, DWORD PTR _number_of_bits_to_pack$[ebp]
  000b2	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 463  : 
; 464  : 	// arneh - filter out any excess bits, if there are any
; 465  : 	if (number_of_bits_to_pack < 32)

  000b5	83 7d 0c 20	 cmp	 DWORD PTR _number_of_bits_to_pack$[ebp], 32 ; 00000020H
  000b9	7d 3c		 jge	 SHORT $LN2@pack_signe

; 466  : 	{
; 467  : 		int max_value = (1 << (number_of_bits_to_pack - 1)) - 1;

  000bb	8b 4d 0c	 mov	 ecx, DWORD PTR _number_of_bits_to_pack$[ebp]
  000be	83 e9 01	 sub	 ecx, 1
  000c1	b8 01 00 00 00	 mov	 eax, 1
  000c6	d3 e0		 shl	 eax, cl
  000c8	83 e8 01	 sub	 eax, 1
  000cb	89 45 f4	 mov	 DWORD PTR _max_value$2[ebp], eax

; 468  : 		int min_value = -max_value - 1;

  000ce	8b 45 f4	 mov	 eax, DWORD PTR _max_value$2[ebp]
  000d1	f7 d8		 neg	 eax
  000d3	83 e8 01	 sub	 eax, 1
  000d6	89 45 f0	 mov	 DWORD PTR _min_value$1[ebp], eax

; 469  : 
; 470  : 		if (unpacked_data > max_value)

  000d9	8b 45 08	 mov	 eax, DWORD PTR _unpacked_data$[ebp]
  000dc	3b 45 f4	 cmp	 eax, DWORD PTR _max_value$2[ebp]
  000df	7e 08		 jle	 SHORT $LN11@pack_signe

; 471  : 			unpacked_data = max_value;

  000e1	8b 45 f4	 mov	 eax, DWORD PTR _max_value$2[ebp]
  000e4	89 45 08	 mov	 DWORD PTR _unpacked_data$[ebp], eax
  000e7	eb 0e		 jmp	 SHORT $LN2@pack_signe
$LN11@pack_signe:

; 472  : 		else if (unpacked_data < min_value)

  000e9	8b 45 08	 mov	 eax, DWORD PTR _unpacked_data$[ebp]
  000ec	3b 45 f0	 cmp	 eax, DWORD PTR _min_value$1[ebp]
  000ef	7d 06		 jge	 SHORT $LN2@pack_signe

; 473  : 			unpacked_data = min_value;

  000f1	8b 45 f0	 mov	 eax, DWORD PTR _min_value$1[ebp]
  000f4	89 45 08	 mov	 DWORD PTR _unpacked_data$[ebp], eax
$LN2@pack_signe:

; 474  : 	}
; 475  : 
; 476  : 	//
; 477  : 	// pack data
; 478  : 	//
; 479  : 
; 480  : 	while (count--)

  000f7	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000fa	89 45 ac	 mov	 DWORD PTR tv132[ebp], eax
  000fd	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00100	83 e9 01	 sub	 ecx, 1
  00103	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  00106	83 7d ac 00	 cmp	 DWORD PTR tv132[ebp], 0
  0010a	0f 84 81 00 00
	00		 je	 $LN1@pack_signe

; 481  : 	{
; 482  : 		if (current_pack_buffer->bit_counter == 0)

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00115	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00119	75 4b		 jne	 SHORT $LN14@pack_signe

; 483  : 		{
; 484  : 			current_pack_buffer->ptr++;

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00120	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00123	83 c1 01	 add	 ecx, 1
  00126	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0012c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 485  : 
; 486  : 			current_pack_buffer->bit_counter = 8;

  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00134	c7 40 0c 08 00
	00 00		 mov	 DWORD PTR [eax+12], 8

; 487  : 
; 488  : 			if ((current_pack_buffer->ptr - current_pack_buffer->buffer + 1) > current_pack_buffer->size)

  0013b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00140	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00146	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00149	2b 11		 sub	 edx, DWORD PTR [ecx]
  0014b	83 c2 01	 add	 edx, 1
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00153	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00156	7e 0e		 jle	 SHORT $LN14@pack_signe

; 489  : 			{
; 490  : 				current_pack_buffer->overflow = TRUE;

  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0015d	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [eax+16], 1

; 491  : 
; 492  : 				return;

  00164	eb 2b		 jmp	 SHORT $LN1@pack_signe
$LN14@pack_signe:

; 493  : 			}
; 494  : 		}
; 495  : 
; 496  : 		pack_bit (&unpacked_data, current_pack_buffer->ptr);

  00166	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0016b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016e	51		 push	 ecx
  0016f	8d 55 08	 lea	 edx, DWORD PTR _unpacked_data$[ebp]
  00172	52		 push	 edx
  00173	e8 00 00 00 00	 call	 ?pack_bit@@YGXPAHPAE@Z	; pack_bit

; 497  : 
; 498  : 		current_pack_buffer->bit_counter--;

  00178	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0017d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00180	83 e9 01	 sub	 ecx, 1
  00183	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00189	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 499  : 	}

  0018c	e9 66 ff ff ff	 jmp	 $LN2@pack_signe
$LN1@pack_signe:

; 500  : }

  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c2 08 00	 ret	 8
?pack_signed_data@@YGXHH@Z ENDP				; pack_signed_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?get_current_pack_buffer_bit_size@@YGHXZ
_TEXT	SEGMENT
?get_current_pack_buffer_bit_size@@YGHXZ PROC		; get_current_pack_buffer_bit_size, COMDAT

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 337  : 
; 338  : 	if (current_pack_buffer)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A, 0 ; current_pack_buffer
  00010	74 24		 je	 SHORT $LN2@get_curren

; 339  : 	{
; 340  : 
; 341  : 		return (8 * (current_pack_buffer->ptr - current_pack_buffer->buffer)) + (8 - current_pack_buffer->bit_counter);

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00017	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0001d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00020	2b 11		 sub	 edx, DWORD PTR [ecx]
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00027	b9 08 00 00 00	 mov	 ecx, 8
  0002c	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  0002f	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00032	eb 04		 jmp	 SHORT $LN1@get_curren

; 342  : 	}
; 343  : 	else

  00034	eb 02		 jmp	 SHORT $LN1@get_curren
$LN2@get_curren:

; 344  : 	{
; 345  : 
; 346  : 		return 0;

  00036	33 c0		 xor	 eax, eax
$LN1@get_curren:

; 347  : 	}
; 348  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?get_current_pack_buffer_bit_size@@YGHXZ ENDP		; get_current_pack_buffer_bit_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?close_pack_buffer@@YGHXZ
_TEXT	SEGMENT
_buffer_size$ = -4					; size = 4
?close_pack_buffer@@YGHXZ PROC				; close_pack_buffer, COMDAT

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 261  : 	int
; 262  : 		buffer_size;
; 263  : 
; 264  : 	ASSERT (current_pack_buffer);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A, 0 ; current_pack_buffer
  00010	75 18		 jne	 SHORT $LN2@close_pack
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??close_pack_buffer@@YGHXZ@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LKIHPHBE@current_pack_buffer@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@close_pack:

; 265  : 
; 266  : 	ASSERT (current_pack_buffer->buffer);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0002f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00032	75 18		 jne	 SHORT $LN3@close_pack
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??close_pack_buffer@@YGHXZ@4JA
  00039	83 c0 06	 add	 eax, 6
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PPPPNCNL@current_pack_buffer?9?$DObuffer@
  00047	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@close_pack:

; 267  : 
; 268  : 	//
; 269  : 	// close current pack buffer
; 270  : 	//
; 271  : 
; 272  : 	if (current_pack_buffer->bit_counter < 8)

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00051	83 78 0c 08	 cmp	 DWORD PTR [eax+12], 8
  00055	7d 22		 jge	 SHORT $LN4@close_pack

; 273  : 	{
; 274  : 		//
; 275  : 		// position bits in last byte
; 276  : 		//
; 277  : 
; 278  : 		*current_pack_buffer->ptr <<= current_pack_buffer->bit_counter;

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00065	8a 01		 mov	 al, BYTE PTR [ecx]
  00067	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  0006a	d2 e0		 shl	 al, cl
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	88 02		 mov	 BYTE PTR [edx], al

; 279  : 	}
; 280  : 	else

  00077	eb 14		 jmp	 SHORT $LN5@close_pack
$LN4@close_pack:

; 281  : 	{
; 282  : 		//
; 283  : 		// last byte unused (only happens if the buffer is empty or an overflow has occurred)
; 284  : 		//
; 285  : 
; 286  : 		current_pack_buffer->ptr--;

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0007e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00081	83 e9 01	 sub	 ecx, 1
  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0008a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@close_pack:

; 287  : 	}
; 288  : 
; 289  : 	buffer_size = current_pack_buffer->ptr - current_pack_buffer->buffer + 1;

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00098	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0009b	2b 11		 sub	 edx, DWORD PTR [ecx]
  0009d	83 c2 01	 add	 edx, 1
  000a0	89 55 fc	 mov	 DWORD PTR _buffer_size$[ebp], edx

; 290  : 
; 291  : 	#if DEBUG_MODULE
; 292  : 	{
; 293  : 		int
; 294  : 			buffer_num;
; 295  : 
; 296  : 		buffer_num = (current_pack_buffer == &pack_buffer_1) ? 1 : 2;
; 297  : 
; 298  : 		debug_log
; 299  : 		(
; 300  : 			"Close pack buffer %d: address = %x, packed size = %d, overflow = %d",
; 301  : 			buffer_num,
; 302  : 			current_pack_buffer->buffer,
; 303  : 			buffer_size,
; 304  : 			current_pack_buffer->overflow
; 305  : 		);
; 306  : 	}
; 307  : 	#endif
; 308  : 
; 309  : 	current_pack_buffer->buffer = NULL;

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  000a8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 310  : 
; 311  : 	//
; 312  : 	// revert to previously opened pack buffer (if any)
; 313  : 	//
; 314  : 
; 315  : 	if (pack_buffer_1.buffer)

  000ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pack_buffer_1@@3UPACK_BUFFER@@A, 0
  000b5	74 0c		 je	 SHORT $LN6@close_pack

; 316  : 	{
; 317  : 		current_pack_buffer = &pack_buffer_1;

  000b7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A, OFFSET ?pack_buffer_1@@3UPACK_BUFFER@@A ; current_pack_buffer, pack_buffer_1
  000c1	eb 1f		 jmp	 SHORT $LN7@close_pack
$LN6@close_pack:

; 318  : 	}
; 319  : 	else if (pack_buffer_2.buffer)

  000c3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pack_buffer_2@@3UPACK_BUFFER@@A, 0
  000ca	74 0c		 je	 SHORT $LN8@close_pack

; 320  : 	{
; 321  : 		current_pack_buffer = &pack_buffer_2;

  000cc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A, OFFSET ?pack_buffer_2@@3UPACK_BUFFER@@A ; current_pack_buffer, pack_buffer_2

; 322  : 	}
; 323  : 	else

  000d6	eb 0a		 jmp	 SHORT $LN7@close_pack
$LN8@close_pack:

; 324  : 	{
; 325  : 		current_pack_buffer = NULL;

  000d8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A, 0 ; current_pack_buffer
$LN7@close_pack:

; 326  : 	}
; 327  : 
; 328  : 	return (buffer_size);

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _buffer_size$[ebp]

; 329  : }

  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
?close_pack_buffer@@YGHXZ ENDP				; close_pack_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?open_pack_buffer@@YGXPAEH@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_buffer_size$ = 12					; size = 4
?open_pack_buffer@@YGXPAEH@Z PROC			; open_pack_buffer, COMDAT

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 215  : 	ASSERT (buffer);

  00009	83 7d 08 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@open_pack_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??open_pack_buffer@@YGXPAEH@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@open_pack_:

; 216  : 
; 217  : 	ASSERT (buffer_size > 0);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _buffer_size$[ebp], 0
  0002b	7f 18		 jg	 SHORT $LN3@open_pack_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??open_pack_buffer@@YGXPAEH@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DMECBBBD@buffer_size?5?$DO?50@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@open_pack_:

; 218  : 
; 219  : 	if (!pack_buffer_1.buffer)

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pack_buffer_1@@3UPACK_BUFFER@@A, 0
  0004c	75 0c		 jne	 SHORT $LN4@open_pack_

; 220  : 	{
; 221  : 		#if DEBUG_MODULE
; 222  : 
; 223  : 		debug_log ("Open pack buffer 1 (address = %x, size = %d)", buffer, buffer_size);
; 224  : 
; 225  : 		#endif
; 226  : 
; 227  : 		current_pack_buffer = &pack_buffer_1;

  0004e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A, OFFSET ?pack_buffer_1@@3UPACK_BUFFER@@A ; current_pack_buffer, pack_buffer_1
  00058	eb 22		 jmp	 SHORT $LN5@open_pack_
$LN4@open_pack_:

; 228  : 	}
; 229  : 	else if (!pack_buffer_2.buffer)

  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pack_buffer_2@@3UPACK_BUFFER@@A, 0
  00061	75 0c		 jne	 SHORT $LN6@open_pack_

; 230  : 	{
; 231  : 		#if DEBUG_MODULE
; 232  : 
; 233  : 		debug_log ("Open pack buffer 2 (address = %x, size = %d)", buffer, buffer_size);
; 234  : 
; 235  : 		#endif
; 236  : 
; 237  : 		current_pack_buffer = &pack_buffer_2;

  00063	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A, OFFSET ?pack_buffer_2@@3UPACK_BUFFER@@A ; current_pack_buffer, pack_buffer_2

; 238  : 	}
; 239  : 	else

  0006d	eb 0d		 jmp	 SHORT $LN5@open_pack_
$LN6@open_pack_:

; 240  : 	{
; 241  : 		debug_fatal ("Exhausted pack buffers");

  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KJFCAMHK@Exhausted?5pack?5buffers@
  00074	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00079	83 c4 04	 add	 esp, 4
$LN5@open_pack_:

; 242  : 	}
; 243  : 
; 244  : 	current_pack_buffer->buffer = buffer;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00084	89 08		 mov	 DWORD PTR [eax], ecx

; 245  : 
; 246  : 	current_pack_buffer->ptr = buffer;

  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0008e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 247  : 
; 248  : 	current_pack_buffer->size = buffer_size;

  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  00099	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 249  : 
; 250  : 	current_pack_buffer->bit_counter = 8;

  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  000a1	c7 40 0c 08 00
	00 00		 mov	 DWORD PTR [eax+12], 8

; 251  : 
; 252  : 	current_pack_buffer->overflow = FALSE;

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  000ad	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 253  : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 08 00	 ret	 8
?open_pack_buffer@@YGXPAEH@Z ENDP			; open_pack_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?unpack_client_server_entity_data@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv89 = -68						; size = 4
tv72 = -68						; size = 4
_en$ = 8						; size = 4
?unpack_client_server_entity_data@@YGXPAUENTITY@@@Z PROC ; unpack_client_server_entity_data, COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 178  : 	if (get_comms_model () == COMMS_MODEL_SERVER)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	75 50		 jne	 SHORT $LN2@unpack_cli

; 179  : 	{
; 180  : 		unpack_local_entity_data (en, get_local_entity_type (en), PACK_MODE_UPDATE_ENTITY);

  00012	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00016	74 0a		 je	 SHORT $LN6@unpack_cli
  00018	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	89 4d bc	 mov	 DWORD PTR tv72[ebp], ecx
  00020	eb 21		 jmp	 SHORT $LN7@unpack_cli
$LN6@unpack_cli:
  00022	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_client_server_entity_data@@YGXPAUENTITY@@@Z@4JA
  00028	83 c2 03	 add	 edx, 3
  0002b	52		 push	 edx
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN7@unpack_cli:
  00043	6a 03		 push	 3
  00045	8b 4d bc	 mov	 ecx, DWORD PTR tv72[ebp]
  00048	51		 push	 ecx
  00049	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ?unpack_local_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ; unpack_local_entity_data

; 181  : 
; 182  : 		transmit_entity_comms_message (ENTITY_COMMS_UPDATE, en);

  00052	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00055	50		 push	 eax
  00056	6a 3e		 push	 62			; 0000003eH
  00058	e8 00 00 00 00	 call	 ?transmit_entity_comms_message@@YAXW4ENTITY_COMMS_MESSAGES@@PAUENTITY@@ZZ ; transmit_entity_comms_message
  0005d	83 c4 08	 add	 esp, 8

; 183  : 	}
; 184  : 	else

  00060	eb 61		 jmp	 SHORT $LN1@unpack_cli
$LN2@unpack_cli:

; 185  : 	{
; 186  : 		ASSERT (get_comms_model () == COMMS_MODEL_CLIENT);

  00062	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 1 ; system_comms_model
  00069	74 18		 je	 SHORT $LN4@unpack_cli
  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_client_server_entity_data@@YGXPAUENTITY@@@Z@4JA
  00070	83 c0 09	 add	 eax, 9
  00073	50		 push	 eax
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@HDFJMCJJ@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  0007e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@unpack_cli:

; 187  : 
; 188  : 		unpack_local_entity_data (en, get_local_entity_type (en), PACK_MODE_UPDATE_ENTITY);

  00083	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00087	74 0a		 je	 SHORT $LN8@unpack_cli
  00089	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0008c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008e	89 4d bc	 mov	 DWORD PTR tv89[ebp], ecx
  00091	eb 21		 jmp	 SHORT $LN9@unpack_cli
$LN8@unpack_cli:
  00093	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_client_server_entity_data@@YGXPAUENTITY@@@Z@4JA
  00099	83 c2 0b	 add	 edx, 11			; 0000000bH
  0009c	52		 push	 edx
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KMADKADK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ad	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN9@unpack_cli:
  000b4	6a 03		 push	 3
  000b6	8b 4d bc	 mov	 ecx, DWORD PTR tv89[ebp]
  000b9	51		 push	 ecx
  000ba	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ?unpack_local_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ; unpack_local_entity_data
$LN1@unpack_cli:

; 189  : 	}
; 190  : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
?unpack_client_server_entity_data@@YGXPAUENTITY@@@Z ENDP ; unpack_client_server_entity_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?unpack_local_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_mode$ = 16						; size = 4
?unpack_local_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z PROC ; unpack_local_entity_data, COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 150  : 	if ((mode == PACK_MODE_SERVER_SESSION) || (mode ==	PACK_MODE_CLIENT_SESSION))

  00009	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	74 06		 je	 SHORT $LN3@unpack_loc
  0000f	83 7d 10 01	 cmp	 DWORD PTR _mode$[ebp], 1
  00013	75 09		 jne	 SHORT $LN2@unpack_loc
$LN3@unpack_loc:

; 151  : 	{
; 152  : 		update_create_entity_statistics (type);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?update_create_entity_statistics@@YGXW4ENTITY_TYPES@@@Z ; update_create_entity_statistics
$LN2@unpack_loc:

; 153  : 	}
; 154  : 
; 155  : 	fn_unpack_local_entity_data[type] (en, type, mode);

  0001e	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00029	52		 push	 edx
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0002d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA[eax*4]
  00034	ff d1		 call	 ecx

; 156  : 
; 157  : 	#if DEBUG_MODULE
; 158  : 
; 159  : 	debug_log ("EN_PACK: unpacking data for %s", entity_type_names [type]);
; 160  : 
; 161  : 	#endif
; 162  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?unpack_local_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ENDP ; unpack_local_entity_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_pack.c
;	COMDAT ?initialise_entity_pack_default_functions@@YGXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?initialise_entity_pack_default_functions@@YGXXZ PROC	; initialise_entity_pack_default_functions, COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 124  : 	int
; 125  : 		i;
; 126  : 
; 127  : 	memset (signed_int_pack_stats, 0, sizeof (signed_int_pack_stats));

  00009	68 84 00 00 00	 push	 132			; 00000084H
  0000e	6a 00		 push	 0
  00010	68 00 00 00 00	 push	 OFFSET ?signed_int_pack_stats@@3PAHA ; signed_int_pack_stats
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : 
; 129  : 	memset (unsigned_int_pack_stats, 0, sizeof (unsigned_int_pack_stats));

  0001d	68 84 00 00 00	 push	 132			; 00000084H
  00022	6a 00		 push	 0
  00024	68 00 00 00 00	 push	 OFFSET ?unsigned_int_pack_stats@@3PAHA ; unsigned_int_pack_stats
  00029	e8 00 00 00 00	 call	 _memset
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 130  : 
; 131  : 	for (i = 0; i < NUM_ENTITY_TYPES; i++)

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initialise:
  00043	83 7d fc 26	 cmp	 DWORD PTR _i$[ebp], 38	; 00000026H
  00047	7d 1e		 jge	 SHORT $LN1@initialise

; 132  : 	{
; 133  : 		fn_pack_local_entity_data[i]	  	= default_pack_entity_data;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004c	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA[eax*4], OFFSET ?default_pack_entity_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z ; default_pack_entity_data

; 134  : 
; 135  : 		fn_unpack_local_entity_data[i] 	= default_unpack_entity_data;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0005a	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA[eax*4], OFFSET ?default_unpack_entity_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ; default_unpack_entity_data

; 136  : 	}

  00065	eb d3		 jmp	 SHORT $LN2@initialise
$LN1@initialise:

; 137  : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?initialise_entity_pack_default_functions@@YGXXZ ENDP	; initialise_entity_pack_default_functions
_TEXT	ENDS
END
