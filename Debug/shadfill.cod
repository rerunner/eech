; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\shadfill.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A	; triangle_points
PUBLIC	?triangle_point0@@3PAUVERTEX@@A			; triangle_point0
PUBLIC	?triangle_point1@@3PAUVERTEX@@A			; triangle_point1
PUBLIC	?triangle_point2@@3PAUVERTEX@@A			; triangle_point2
PUBLIC	?triangle_gradients_points@@3PAPAUVERTEX@@A	; triangle_gradients_points
PUBLIC	?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A	; top_to_bottom_edge
PUBLIC	?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A	; top_to_middle_edge
PUBLIC	?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A	; middle_to_bottom_edge
PUBLIC	?shadow_screen@@3PAEA				; shadow_screen
PUBLIC	?shadow_screen_pitch@@3HA			; shadow_screen_pitch
_BSS	SEGMENT
?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A DQ 03H DUP (?) ; triangle_points
?triangle_point0@@3PAUVERTEX@@A DD 01H DUP (?)		; triangle_point0
?triangle_point1@@3PAUVERTEX@@A DD 01H DUP (?)		; triangle_point1
?triangle_point2@@3PAUVERTEX@@A DD 01H DUP (?)		; triangle_point2
?triangle_gradients_points@@3PAPAUVERTEX@@A DD 03H DUP (?) ; triangle_gradients_points
?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A DB 01cH DUP (?) ; top_to_bottom_edge
?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A DB 01cH DUP (?) ; top_to_middle_edge
?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A DB 01cH DUP (?) ; middle_to_bottom_edge
?shadow_screen@@3PAEA DB 04000H DUP (?)			; shadow_screen
_BSS	ENDS
_DATA	SEGMENT
?shadow_screen_pitch@@3HA DD 080H			; shadow_screen_pitch
_DATA	ENDS
PUBLIC	?draw_shadow_polygon@@YGXPAUVERTEX@@I@Z		; draw_shadow_polygon
PUBLIC	?step_triangle_edge@@YGHPAUTRIANGLE_EDGE_DATA@@@Z ; step_triangle_edge
PUBLIC	?calculate_floor_div_mod@@YGXHHPAH0@Z		; calculate_floor_div_mod
PUBLIC	?construct_triangle_gradients@@YGHXZ		; construct_triangle_gradients
PUBLIC	?__LINE__Var@?0??calculate_floor_div_mod@@YGXHHPAH0@Z@4JA ; `calculate_floor_div_mod'::`1'::__LINE__Var
PUBLIC	??_C@_0DJ@FAKBBLNO@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BA@NNCKOAFG@denominator?5?$DO?50@	; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4030000000000000
PUBLIC	__real@41800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?ceil_fixed28_point4@@YGHH@Z:PROC		; ceil_fixed28_point4
EXTRN	?float_value_zero@@3MB:DWORD			; float_value_zero
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@4030000000000000
CONST	SEGMENT
__real@4030000000000000 DQ 04030000000000000r	; 16
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0BA@NNCKOAFG@denominator?5?$DO?50@
CONST	SEGMENT
??_C@_0BA@NNCKOAFG@denominator?5?$DO?50@ DB 'denominator > 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FAKBBLNO@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DJ@FAKBBLNO@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\shadfill.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??calculate_floor_div_mod@@YGXHHPAH0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??calculate_floor_div_mod@@YGXHHPAH0@Z@4JA DD 0abH ; `calculate_floor_div_mod'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\shadfill.c
;	COMDAT ?construct_triangle_gradients@@YGHXZ
_TEXT	SEGMENT
_i1_minus_i2$ = -52					; size = 4
_i0_minus_i2$ = -48					; size = 4
_j1_minus_j2$ = -44					; size = 4
_j0_minus_j2$ = -40					; size = 4
_one_over_dy$ = -36					; size = 4
_one_over_dx$ = -32					; size = 4
_d12j$ = -28						; size = 4
_d02j$ = -24						; size = 4
_d12i$ = -20						; size = 4
_d02i$ = -16						; size = 4
_x1y0_minus_x0y1$ = -12					; size = 4
_x0y1$ = -8						; size = 4
_x1y0$ = -4						; size = 4
?construct_triangle_gradients@@YGHXZ PROC		; construct_triangle_gradients, COMDAT

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 220  : 
; 221  : //	int
; 222  : //		counter;
; 223  : 
; 224  : //	fixed28_point4
; 225  : //		x1y0,
; 226  : //		x0y1,
; 227  : //		x1y0_minus_x0y1;
; 228  : 
; 229  : 	float
; 230  : 		x1y0,
; 231  : 		x0y1,
; 232  : 		x1y0_minus_x0y1,
; 233  : 		d02i,
; 234  : 		d12i,
; 235  : 		d02j,
; 236  : 		d12j,
; 237  : 		one_over_dx,
; 238  : 		one_over_dy,
; 239  : 		j0_minus_j2,
; 240  : 		j1_minus_j2,
; 241  : 		i0_minus_i2,
; 242  : 		i1_minus_i2;
; 243  : 
; 244  : 	d02i = triangle_point0->i - triangle_point2->i;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?triangle_point0@@3PAUVERTEX@@A ; triangle_point0
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  00014	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00019	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  0001e	f3 0f 11 45 f0	 movss	 DWORD PTR _d02i$[ebp], xmm0

; 245  : 	d12i = triangle_point1->i - triangle_point2->i;

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?triangle_point1@@3PAUVERTEX@@A ; triangle_point1
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  0002e	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00033	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00038	f3 0f 11 45 ec	 movss	 DWORD PTR _d12i$[ebp], xmm0

; 246  : 	d02j = triangle_point0->j - triangle_point2->j;

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?triangle_point0@@3PAUVERTEX@@A ; triangle_point0
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  00048	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0004d	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00052	f3 0f 11 45 e8	 movss	 DWORD PTR _d02j$[ebp], xmm0

; 247  : 	d12j = triangle_point1->j - triangle_point2->j;

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?triangle_point1@@3PAUVERTEX@@A ; triangle_point1
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  00062	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00067	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  0006c	f3 0f 11 45 e4	 movss	 DWORD PTR _d12j$[ebp], xmm0

; 248  : 
; 249  : 	x0y1 = d02i * d12j;

  00071	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _d02i$[ebp]
  00076	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _d12j$[ebp]
  0007b	f3 0f 11 45 f8	 movss	 DWORD PTR _x0y1$[ebp], xmm0

; 250  : 
; 251  : 	x1y0 = d12i * d02j;

  00080	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _d12i$[ebp]
  00085	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _d02j$[ebp]
  0008a	f3 0f 11 45 fc	 movss	 DWORD PTR _x1y0$[ebp], xmm0

; 252  : 
; 253  : 	x1y0_minus_x0y1 = x1y0 - x0y1;

  0008f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1y0$[ebp]
  00094	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _x0y1$[ebp]
  00099	f3 0f 11 45 f4	 movss	 DWORD PTR _x1y0_minus_x0y1$[ebp], xmm0

; 254  : 
; 255  : 	if ( *( ( int * ) &x1y0_minus_x0y1 ) == *( ( int * ) &float_value_zero ) )

  0009e	8b 45 f4	 mov	 eax, DWORD PTR _x1y0_minus_x0y1$[ebp]
  000a1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  000a7	75 07		 jne	 SHORT $LN2@construct_

; 256  : 	{
; 257  : 
; 258  : 		return ( FALSE );

  000a9	33 c0		 xor	 eax, eax
  000ab	e9 2b 01 00 00	 jmp	 $LN1@construct_
$LN2@construct_:

; 259  : 	}
; 260  : 
; 261  : 	one_over_dx = 1.0 / x1y0_minus_x0y1;

  000b0	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x1y0_minus_x0y1$[ebp]
  000b5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bd	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000c1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000c5	f3 0f 11 45 e0	 movss	 DWORD PTR _one_over_dx$[ebp], xmm0

; 262  : 
; 263  : 	one_over_dy = -one_over_dx;

  000ca	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _one_over_dx$[ebp]
  000cf	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000d6	f3 0f 11 45 dc	 movss	 DWORD PTR _one_over_dy$[ebp], xmm0

; 264  : 
; 265  : 	triangle_gradients_points[0] = triangle_point0;

  000db	b8 04 00 00 00	 mov	 eax, 4
  000e0	6b c8 00	 imul	 ecx, eax, 0
  000e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?triangle_point0@@3PAUVERTEX@@A ; triangle_point0
  000e9	89 91 00 00 00
	00		 mov	 DWORD PTR ?triangle_gradients_points@@3PAPAUVERTEX@@A[ecx], edx

; 266  : 
; 267  : 	triangle_gradients_points[1] = triangle_point1;

  000ef	b8 04 00 00 00	 mov	 eax, 4
  000f4	c1 e0 00	 shl	 eax, 0
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point1@@3PAUVERTEX@@A ; triangle_point1
  000fd	89 88 00 00 00
	00		 mov	 DWORD PTR ?triangle_gradients_points@@3PAPAUVERTEX@@A[eax], ecx

; 268  : 
; 269  : 	triangle_gradients_points[2] = triangle_point2;

  00103	b8 04 00 00 00	 mov	 eax, 4
  00108	d1 e0		 shl	 eax, 1
  0010a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  00110	89 88 00 00 00
	00		 mov	 DWORD PTR ?triangle_gradients_points@@3PAPAUVERTEX@@A[eax], ecx

; 270  : 
; 271  : 	//
; 272  : 	// Intensity interpolant.
; 273  : 	//
; 274  : 
; 275  : //	j0_minus_j2 = triangle_point0->j - triangle_point2->j;
; 276  : 	j0_minus_j2 = convert_fixed28_point4_to_float ( triangle_points[0].j - triangle_points[2].j );

  00116	b8 08 00 00 00	 mov	 eax, 8
  0011b	6b c8 00	 imul	 ecx, eax, 0
  0011e	ba 08 00 00 00	 mov	 edx, 8
  00123	d1 e2		 shl	 edx, 1
  00125	8b 81 04 00 00
	00		 mov	 eax, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[ecx+4]
  0012b	2b 82 04 00 00
	00		 sub	 eax, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[edx+4]
  00131	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00135	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4030000000000000
  0013d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00141	f3 0f 11 45 d8	 movss	 DWORD PTR _j0_minus_j2$[ebp], xmm0

; 277  : 
; 278  : //	j1_minus_j2 = triangle_point1->j - triangle_point2->j;
; 279  : 	j1_minus_j2 = convert_fixed28_point4_to_float ( triangle_points[1].j - triangle_points[2].j );

  00146	b8 08 00 00 00	 mov	 eax, 8
  0014b	c1 e0 00	 shl	 eax, 0
  0014e	b9 08 00 00 00	 mov	 ecx, 8
  00153	d1 e1		 shl	 ecx, 1
  00155	8b 90 04 00 00
	00		 mov	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax+4]
  0015b	2b 91 04 00 00
	00		 sub	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[ecx+4]
  00161	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  00165	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4030000000000000
  0016d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00171	f3 0f 11 45 d4	 movss	 DWORD PTR _j1_minus_j2$[ebp], xmm0

; 280  : 
; 281  : //	i0_minus_i2 = triangle_point0->i - triangle_point2->i;
; 282  : 	i0_minus_i2 = convert_fixed28_point4_to_float ( triangle_points[0].i - triangle_points[2].i );

  00176	b8 08 00 00 00	 mov	 eax, 8
  0017b	6b c8 00	 imul	 ecx, eax, 0
  0017e	ba 08 00 00 00	 mov	 edx, 8
  00183	d1 e2		 shl	 edx, 1
  00185	8b 81 00 00 00
	00		 mov	 eax, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[ecx]
  0018b	2b 82 00 00 00
	00		 sub	 eax, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[edx]
  00191	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00195	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4030000000000000
  0019d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a1	f3 0f 11 45 d0	 movss	 DWORD PTR _i0_minus_i2$[ebp], xmm0

; 283  : 
; 284  : //	i1_minus_i2 = triangle_point1->i - triangle_point2->i;
; 285  : 	i1_minus_i2 = convert_fixed28_point4_to_float ( triangle_points[1].i - triangle_points[2].i );

  001a6	b8 08 00 00 00	 mov	 eax, 8
  001ab	c1 e0 00	 shl	 eax, 0
  001ae	b9 08 00 00 00	 mov	 ecx, 8
  001b3	d1 e1		 shl	 ecx, 1
  001b5	8b 90 00 00 00
	00		 mov	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax]
  001bb	2b 91 00 00 00
	00		 sub	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[ecx]
  001c1	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  001c5	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4030000000000000
  001cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d1	f3 0f 11 45 cc	 movss	 DWORD PTR _i1_minus_i2$[ebp], xmm0

; 286  : 
; 287  : 	return ( TRUE );

  001d6	b8 01 00 00 00	 mov	 eax, 1
$LN1@construct_:

; 288  : }

  001db	5f		 pop	 edi
  001dc	5e		 pop	 esi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c3		 ret	 0
?construct_triangle_gradients@@YGHXZ ENDP		; construct_triangle_gradients
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\shadfill.c
;	COMDAT ?calculate_floor_div_mod@@YGXHHPAH0@Z
_TEXT	SEGMENT
_numerator$ = 8						; size = 4
_denominator$ = 12					; size = 4
_floor$ = 16						; size = 4
_mod$ = 20						; size = 4
?calculate_floor_div_mod@@YGXHHPAH0@Z PROC		; calculate_floor_div_mod, COMDAT

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 172  : 
; 173  : 	ASSERT ( denominator > 0 );

  00009	83 7d 0c 00	 cmp	 DWORD PTR _denominator$[ebp], 0
  0000d	7f 18		 jg	 SHORT $LN2@calculate_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??calculate_floor_div_mod@@YGXHHPAH0@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@FAKBBLNO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NNCKOAFG@denominator?5?$DO?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@calculate_:

; 174  : 
; 175  : 	if ( numerator >= 0 )

  00027	83 7d 08 00	 cmp	 DWORD PTR _numerator$[ebp], 0
  0002b	7c 1a		 jl	 SHORT $LN3@calculate_

; 176  : 	{
; 177  : 
; 178  : 		//
; 179  : 		// positive case, C is okay
; 180  : 		//
; 181  : 
; 182  : //		*floor = get_div_mod ( numerator, denominator, mod );
; 183  : 
; 184  : 		*floor = numerator / denominator;

  0002d	8b 45 08	 mov	 eax, DWORD PTR _numerator$[ebp]
  00030	99		 cdq
  00031	f7 7d 0c	 idiv	 DWORD PTR _denominator$[ebp]
  00034	8b 4d 10	 mov	 ecx, DWORD PTR _floor$[ebp]
  00037	89 01		 mov	 DWORD PTR [ecx], eax

; 185  : 
; 186  : 		*mod = numerator % denominator;

  00039	8b 45 08	 mov	 eax, DWORD PTR _numerator$[ebp]
  0003c	99		 cdq
  0003d	f7 7d 0c	 idiv	 DWORD PTR _denominator$[ebp]
  00040	8b 45 14	 mov	 eax, DWORD PTR _mod$[ebp]
  00043	89 10		 mov	 DWORD PTR [eax], edx

; 187  : 	}
; 188  : 	else

  00045	eb 40		 jmp	 SHORT $LN1@calculate_
$LN3@calculate_:

; 189  : 	{
; 190  : 
; 191  : 		//
; 192  : 		// Numerator is negative, do the right thing
; 193  : 		//
; 194  : 
; 195  : //		*floor = - ( get_div_mod ( ( -numerator ), denominator, mod ) );
; 196  : 		*floor = - ( ( -numerator ) / denominator );

  00047	8b 45 08	 mov	 eax, DWORD PTR _numerator$[ebp]
  0004a	f7 d8		 neg	 eax
  0004c	99		 cdq
  0004d	f7 7d 0c	 idiv	 DWORD PTR _denominator$[ebp]
  00050	f7 d8		 neg	 eax
  00052	8b 4d 10	 mov	 ecx, DWORD PTR _floor$[ebp]
  00055	89 01		 mov	 DWORD PTR [ecx], eax

; 197  : 
; 198  : 		*mod = ( -numerator ) % denominator;

  00057	8b 45 08	 mov	 eax, DWORD PTR _numerator$[ebp]
  0005a	f7 d8		 neg	 eax
  0005c	99		 cdq
  0005d	f7 7d 0c	 idiv	 DWORD PTR _denominator$[ebp]
  00060	8b 45 14	 mov	 eax, DWORD PTR _mod$[ebp]
  00063	89 10		 mov	 DWORD PTR [eax], edx

; 199  : 
; 200  : 		if ( *mod )

  00065	8b 45 14	 mov	 eax, DWORD PTR _mod$[ebp]
  00068	83 38 00	 cmp	 DWORD PTR [eax], 0
  0006b	74 1a		 je	 SHORT $LN1@calculate_

; 201  : 		{
; 202  : 
; 203  : 			//
; 204  : 			// there is a remainder
; 205  : 			//
; 206  : 
; 207  : 			(*floor)--;

  0006d	8b 45 10	 mov	 eax, DWORD PTR _floor$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	83 e9 01	 sub	 ecx, 1
  00075	8b 55 10	 mov	 edx, DWORD PTR _floor$[ebp]
  00078	89 0a		 mov	 DWORD PTR [edx], ecx

; 208  : 
; 209  : 			*mod = denominator - *mod;

  0007a	8b 45 14	 mov	 eax, DWORD PTR _mod$[ebp]
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _denominator$[ebp]
  00080	2b 08		 sub	 ecx, DWORD PTR [eax]
  00082	8b 55 14	 mov	 edx, DWORD PTR _mod$[ebp]
  00085	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@calculate_:

; 210  : 		}
; 211  : 	}
; 212  : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 10 00	 ret	 16			; 00000010H
?calculate_floor_div_mod@@YGXHHPAH0@Z ENDP		; calculate_floor_div_mod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\shadfill.c
;	COMDAT ?step_triangle_edge@@YGHPAUTRIANGLE_EDGE_DATA@@@Z
_TEXT	SEGMENT
_edge$ = 8						; size = 4
?step_triangle_edge@@YGHPAUTRIANGLE_EDGE_DATA@@@Z PROC	; step_triangle_edge, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 146  : 
; 147  : 	edge->i += edge->i_step;

  00009	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _edge$[ebp]
  00011	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00014	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  00017	89 08		 mov	 DWORD PTR [eax], ecx

; 148  : 
; 149  : 	edge->j++;

  00019	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  0001c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001f	83 c1 01	 add	 ecx, 1
  00022	8b 55 08	 mov	 edx, DWORD PTR _edge$[ebp]
  00025	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 150  : 
; 151  : 	edge->height--;

  00028	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  0002b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0002e	83 e9 01	 sub	 ecx, 1
  00031	8b 55 08	 mov	 edx, DWORD PTR _edge$[ebp]
  00034	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 152  : 
; 153  : 	edge->error_term += edge->numerator;

  00037	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  0003a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003d	8b 55 08	 mov	 edx, DWORD PTR _edge$[ebp]
  00040	03 4a 08	 add	 ecx, DWORD PTR [edx+8]
  00043	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  00046	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 154  : 
; 155  : 	if ( edge->error_term >= edge->denominator )

  00049	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _edge$[ebp]
  0004f	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00052	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00055	7c 1f		 jl	 SHORT $LN2@step_trian

; 156  : 	{
; 157  : 
; 158  : 		edge->i++;

  00057	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	83 c1 01	 add	 ecx, 1
  0005f	8b 55 08	 mov	 edx, DWORD PTR _edge$[ebp]
  00062	89 0a		 mov	 DWORD PTR [edx], ecx

; 159  : 
; 160  : 		edge->error_term -= edge->denominator;

  00064	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _edge$[ebp]
  0006a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0006d	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  00070	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  00073	89 50 10	 mov	 DWORD PTR [eax+16], edx
$LN2@step_trian:

; 161  : 	}
; 162  : 
; 163  : 	return ( edge->height );

  00076	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  00079	8b 40 18	 mov	 eax, DWORD PTR [eax+24]

; 164  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?step_triangle_edge@@YGHPAUTRIANGLE_EDGE_DATA@@@Z ENDP	; step_triangle_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\shadfill.c
;	COMDAT ?construct_shadow_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z
_TEXT	SEGMENT
_y_prestep$1 = -24					; size = 4
_x_prestep$2 = -20					; size = 4
_initial_numerator$3 = -16				; size = 4
_dm$4 = -12						; size = 4
_dn$5 = -8						; size = 4
_j_end$ = -4						; size = 4
_top$ = 8						; size = 4
_bottom$ = 12						; size = 4
_edge$ = 16						; size = 4
?construct_shadow_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z PROC ; construct_shadow_triangle_edge, COMDAT

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 296  : 
; 297  : 	int
; 298  : 		j_end;
; 299  : 
; 300  : 	edge->j = ceil_fixed28_point4 ( triangle_points[top].j );

  00009	8b 45 08	 mov	 eax, DWORD PTR _top$[ebp]
  0000c	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax*8+4]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ?ceil_fixed28_point4@@YGHH@Z ; ceil_fixed28_point4
  00019	8b 55 10	 mov	 edx, DWORD PTR _edge$[ebp]
  0001c	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 301  : 
; 302  : 	j_end = ceil_fixed28_point4 ( triangle_points[bottom].j );

  0001f	8b 45 0c	 mov	 eax, DWORD PTR _bottom$[ebp]
  00022	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax*8+4]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?ceil_fixed28_point4@@YGHH@Z ; ceil_fixed28_point4
  0002f	89 45 fc	 mov	 DWORD PTR _j_end$[ebp], eax

; 303  : 
; 304  : 	edge->height = j_end - edge->j;

  00032	8b 45 10	 mov	 eax, DWORD PTR _edge$[ebp]
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _j_end$[ebp]
  00038	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0003b	8b 55 10	 mov	 edx, DWORD PTR _edge$[ebp]
  0003e	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 305  : 
; 306  : 	if ( edge->height )

  00041	8b 45 10	 mov	 eax, DWORD PTR _edge$[ebp]
  00044	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00048	0f 84 ff 00 00
	00		 je	 $LN2@construct_

; 307  : 	{
; 308  : 
; 309  : 		int
; 310  : 			dn,
; 311  : 			dm,
; 312  : 			initial_numerator;
; 313  : 
; 314  : 		float
; 315  : 			x_prestep,
; 316  : 			y_prestep;
; 317  : 
; 318  : 		dn = triangle_points[bottom].j - triangle_points[top].j;

  0004e	8b 45 0c	 mov	 eax, DWORD PTR _bottom$[ebp]
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _top$[ebp]
  00054	8b 14 c5 04 00
	00 00		 mov	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax*8+4]
  0005b	2b 14 cd 04 00
	00 00		 sub	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[ecx*8+4]
  00062	89 55 f8	 mov	 DWORD PTR _dn$5[ebp], edx

; 319  : 
; 320  : 		dm = triangle_points[bottom].i - triangle_points[top].i;

  00065	8b 45 0c	 mov	 eax, DWORD PTR _bottom$[ebp]
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _top$[ebp]
  0006b	8b 14 c5 00 00
	00 00		 mov	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax*8]
  00072	2b 14 cd 00 00
	00 00		 sub	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[ecx*8]
  00079	89 55 f4	 mov	 DWORD PTR _dm$4[ebp], edx

; 321  : 	
; 322  : 		initial_numerator = ( dm * 16 * edge->j ) - ( dm * triangle_points[top].j ) +

  0007c	8b 45 f4	 mov	 eax, DWORD PTR _dm$4[ebp]
  0007f	c1 e0 04	 shl	 eax, 4
  00082	8b 4d 10	 mov	 ecx, DWORD PTR _edge$[ebp]
  00085	0f af 41 14	 imul	 eax, DWORD PTR [ecx+20]
  00089	8b 55 08	 mov	 edx, DWORD PTR _top$[ebp]
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR _dm$4[ebp]
  0008f	0f af 0c d5 04
	00 00 00	 imul	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[edx*8+4]
  00097	2b c1		 sub	 eax, ecx
  00099	8b 55 08	 mov	 edx, DWORD PTR _top$[ebp]
  0009c	8b 4d f8	 mov	 ecx, DWORD PTR _dn$5[ebp]
  0009f	0f af 0c d5 00
	00 00 00	 imul	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[edx*8]
  000a7	03 c1		 add	 eax, ecx
  000a9	8b 55 f8	 mov	 edx, DWORD PTR _dn$5[ebp]
  000ac	c1 e2 04	 shl	 edx, 4
  000af	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  000b3	89 45 f0	 mov	 DWORD PTR _initial_numerator$3[ebp], eax

; 323  : 					( dn * triangle_points[top].i ) - ( 1 ) + ( dn * 16 );
; 324  : 
; 325  : 		calculate_floor_div_mod ( initial_numerator, ( dn * 16 ), &edge->i, &edge->error_term );

  000b6	8b 45 10	 mov	 eax, DWORD PTR _edge$[ebp]
  000b9	83 c0 10	 add	 eax, 16			; 00000010H
  000bc	50		 push	 eax
  000bd	8b 4d 10	 mov	 ecx, DWORD PTR _edge$[ebp]
  000c0	51		 push	 ecx
  000c1	8b 55 f8	 mov	 edx, DWORD PTR _dn$5[ebp]
  000c4	c1 e2 04	 shl	 edx, 4
  000c7	52		 push	 edx
  000c8	8b 45 f0	 mov	 eax, DWORD PTR _initial_numerator$3[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?calculate_floor_div_mod@@YGXHHPAH0@Z ; calculate_floor_div_mod

; 326  : 
; 327  : //		calculate_floor_div_mod ( ( dm * 1 ), ( dn * 1 ), &edge->i_step, &edge->numerator );
; 328  : 		calculate_floor_div_mod ( ( dm * 16 ), ( dn * 16 ), &edge->i_step, &edge->numerator );

  000d1	8b 45 10	 mov	 eax, DWORD PTR _edge$[ebp]
  000d4	83 c0 08	 add	 eax, 8
  000d7	50		 push	 eax
  000d8	8b 4d 10	 mov	 ecx, DWORD PTR _edge$[ebp]
  000db	83 c1 04	 add	 ecx, 4
  000de	51		 push	 ecx
  000df	8b 55 f8	 mov	 edx, DWORD PTR _dn$5[ebp]
  000e2	c1 e2 04	 shl	 edx, 4
  000e5	52		 push	 edx
  000e6	8b 45 f4	 mov	 eax, DWORD PTR _dm$4[ebp]
  000e9	c1 e0 04	 shl	 eax, 4
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ?calculate_floor_div_mod@@YGXHHPAH0@Z ; calculate_floor_div_mod

; 329  : 
; 330  : 		edge->denominator = ( dn * 16 );

  000f2	8b 45 f8	 mov	 eax, DWORD PTR _dn$5[ebp]
  000f5	c1 e0 04	 shl	 eax, 4
  000f8	8b 4d 10	 mov	 ecx, DWORD PTR _edge$[ebp]
  000fb	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 331  : 
; 332  : 		y_prestep = convert_fixed28_point4_to_float ( ( ( edge->j * 16 ) - triangle_points[top].j ) );

  000fe	8b 45 10	 mov	 eax, DWORD PTR _edge$[ebp]
  00101	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00104	c1 e1 04	 shl	 ecx, 4
  00107	8b 55 08	 mov	 edx, DWORD PTR _top$[ebp]
  0010a	2b 0c d5 04 00
	00 00		 sub	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[edx*8+4]
  00111	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00115	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4030000000000000
  0011d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00121	f3 0f 11 45 e8	 movss	 DWORD PTR _y_prestep$1[ebp], xmm0

; 333  : 
; 334  : 		x_prestep = convert_fixed28_point4_to_float ( ( ( edge->i * 16 ) - triangle_points[top].i ) );

  00126	8b 45 10	 mov	 eax, DWORD PTR _edge$[ebp]
  00129	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012b	c1 e1 04	 shl	 ecx, 4
  0012e	8b 55 08	 mov	 edx, DWORD PTR _top$[ebp]
  00131	2b 0c d5 00 00
	00 00		 sub	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[edx*8]
  00138	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0013c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4030000000000000
  00144	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00148	f3 0f 11 45 ec	 movss	 DWORD PTR _x_prestep$2[ebp], xmm0
$LN2@construct_:

; 335  : 	}
; 336  : }

  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi
  0014f	5b		 pop	 ebx
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c2 0c 00	 ret	 12			; 0000000cH
?construct_shadow_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z ENDP ; construct_shadow_triangle_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\shadfill.c
;	COMDAT ?fill_shadow_plain_polygon@@YGXI@Z
_TEXT	SEGMENT
tv151 = -144						; size = 4
tv92 = -144						; size = 4
_line_ptr$1 = -76					; size = 4
_width$2 = -72						; size = 4
_word_ptr$3 = -68					; size = 4
_width$4 = -64						; size = 4
_screen_ptr$ = -60					; size = 4
_right_edge$ = -56					; size = 4
_left_edge$ = -52					; size = 4
_y2$ = -48						; size = 4
_y1$ = -44						; size = 4
_y0$ = -40						; size = 4
_screen_pitch$ = -36					; size = 4
_y$ = -32						; size = 4
_height$ = -28						; size = 4
_middle_is_left$ = -24					; size = 4
_bottom_for_compare$ = -20				; size = 4
_middle_for_compare$ = -16				; size = 4
_bottom$ = -12						; size = 4
_middle$ = -8						; size = 4
_top$ = -4						; size = 4
_colour$ = 8						; size = 4
?fill_shadow_plain_polygon@@YGXI@Z PROC			; fill_shadow_plain_polygon, COMDAT

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 414  : 
; 415  : 	int
; 416  : 		top,
; 417  : 		middle,
; 418  : 		bottom,
; 419  : 		middle_for_compare,
; 420  : 		bottom_for_compare,
; 421  : 		middle_is_left,
; 422  : 		height,
; 423  : 		y,
; 424  : 		screen_pitch;
; 425  : 
; 426  : 	fixed28_point4
; 427  : 		y0,
; 428  : 		y1,
; 429  : 		y2;
; 430  : 
; 431  : 	triangle_edge_data
; 432  : 		*left_edge,
; 433  : 		*right_edge;
; 434  : 
; 435  : 	unsigned char
; 436  : 		*screen_ptr;
; 437  : 
; 438  : 	//
; 439  : 	// This routine only accepts TRIANGLES at the moment.
; 440  : 	//
; 441  : 
; 442  : 	screen_ptr = ( unsigned char * ) shadow_screen;

  0000c	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _screen_ptr$[ebp], OFFSET ?shadow_screen@@3PAEA ; shadow_screen

; 443  : 
; 444  : 	screen_pitch = shadow_screen_pitch;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?shadow_screen_pitch@@3HA ; shadow_screen_pitch
  00018	89 45 dc	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 445  : 
; 446  : 	y0 = triangle_points[0].j;

  0001b	b8 08 00 00 00	 mov	 eax, 8
  00020	6b c8 00	 imul	 ecx, eax, 0
  00023	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[ecx+4]
  00029	89 55 d8	 mov	 DWORD PTR _y0$[ebp], edx

; 447  : 
; 448  : 	y1 = triangle_points[1].j;

  0002c	b8 08 00 00 00	 mov	 eax, 8
  00031	c1 e0 00	 shl	 eax, 0
  00034	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax+4]
  0003a	89 4d d4	 mov	 DWORD PTR _y1$[ebp], ecx

; 449  : 
; 450  : 	y2 = triangle_points[2].j;

  0003d	b8 08 00 00 00	 mov	 eax, 8
  00042	d1 e0		 shl	 eax, 1
  00044	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax+4]
  0004a	89 4d d0	 mov	 DWORD PTR _y2$[ebp], ecx

; 451  : 
; 452  : 	//
; 453  : 	// sort vertices in y
; 454  : 	//
; 455  : 
; 456  : 	if ( y0 < y1 )

  0004d	8b 45 d8	 mov	 eax, DWORD PTR _y0$[ebp]
  00050	3b 45 d4	 cmp	 eax, DWORD PTR _y1$[ebp]
  00053	7d 78		 jge	 SHORT $LN8@fill_shado

; 457  : 	{
; 458  : 
; 459  : 		if ( y2 < y0 )	{ top = 2; middle = 0; bottom = 1; middle_for_compare = 0; bottom_for_compare = 1; }

  00055	8b 45 d0	 mov	 eax, DWORD PTR _y2$[ebp]
  00058	3b 45 d8	 cmp	 eax, DWORD PTR _y0$[ebp]
  0005b	7d 25		 jge	 SHORT $LN10@fill_shado
  0005d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _top$[ebp], 2
  00064	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 0
  0006b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 1
  00072	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 0
  00079	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 1

; 460  : 		else

  00080	eb 49		 jmp	 SHORT $LN11@fill_shado
$LN10@fill_shado:

; 461  : 		{
; 462  : 
; 463  : 			top = 0;

  00082	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _top$[ebp], 0

; 464  : 
; 465  : 			if ( y1 < y2 )	{ middle = 1; bottom = 2; middle_for_compare = 1; bottom_for_compare = 2; }

  00089	8b 45 d4	 mov	 eax, DWORD PTR _y1$[ebp]
  0008c	3b 45 d0	 cmp	 eax, DWORD PTR _y2$[ebp]
  0008f	7d 1e		 jge	 SHORT $LN12@fill_shado
  00091	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 1
  00098	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 2
  0009f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 1
  000a6	c7 45 ec 02 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 2
  000ad	eb 1c		 jmp	 SHORT $LN11@fill_shado
$LN12@fill_shado:

; 466  : 			else				{ middle = 2; bottom = 1; middle_for_compare = 2; bottom_for_compare = 1; }

  000af	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 2
  000b6	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 1
  000bd	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 2
  000c4	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 1
$LN11@fill_shado:

; 467  : 		}
; 468  : 	}
; 469  : 	else

  000cb	eb 76		 jmp	 SHORT $LN9@fill_shado
$LN8@fill_shado:

; 470  : 	{
; 471  : 
; 472  : 		if ( y2 < y1) { top = 2; middle = 1; bottom = 0; middle_for_compare = 1; bottom_for_compare = 0; }

  000cd	8b 45 d0	 mov	 eax, DWORD PTR _y2$[ebp]
  000d0	3b 45 d4	 cmp	 eax, DWORD PTR _y1$[ebp]
  000d3	7d 25		 jge	 SHORT $LN14@fill_shado
  000d5	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _top$[ebp], 2
  000dc	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 1
  000e3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 0
  000ea	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 1
  000f1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 0

; 473  : 		else

  000f8	eb 49		 jmp	 SHORT $LN9@fill_shado
$LN14@fill_shado:

; 474  : 		{
; 475  : 
; 476  : 			top = 1;

  000fa	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _top$[ebp], 1

; 477  : 
; 478  : 			if ( y0 < y2 )	{ middle = 0; bottom = 2; middle_for_compare = 3; bottom_for_compare = 2; }

  00101	8b 45 d8	 mov	 eax, DWORD PTR _y0$[ebp]
  00104	3b 45 d0	 cmp	 eax, DWORD PTR _y2$[ebp]
  00107	7d 1e		 jge	 SHORT $LN16@fill_shado
  00109	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 0
  00110	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 2
  00117	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 3
  0011e	c7 45 ec 02 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 2
  00125	eb 1c		 jmp	 SHORT $LN9@fill_shado
$LN16@fill_shado:

; 479  : 			else				{ middle = 2; bottom = 0; middle_for_compare = 2; bottom_for_compare = 3; }

  00127	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 2
  0012e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 0
  00135	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 2
  0013c	c7 45 ec 03 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 3
$LN9@fill_shado:

; 480  : 		}
; 481  : 	}
; 482  : 
; 483  : 	construct_triangle_gradients ();

  00143	e8 00 00 00 00	 call	 ?construct_triangle_gradients@@YGHXZ ; construct_triangle_gradients

; 484  : 
; 485  : 	construct_shadow_triangle_edge ( top, bottom, &top_to_bottom_edge );

  00148	68 00 00 00 00	 push	 OFFSET ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_bottom_edge
  0014d	8b 45 f4	 mov	 eax, DWORD PTR _bottom$[ebp]
  00150	50		 push	 eax
  00151	8b 4d fc	 mov	 ecx, DWORD PTR _top$[ebp]
  00154	51		 push	 ecx
  00155	e8 00 00 00 00	 call	 ?construct_shadow_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z ; construct_shadow_triangle_edge

; 486  : 
; 487  : 	construct_shadow_triangle_edge ( top, middle, &top_to_middle_edge );

  0015a	68 00 00 00 00	 push	 OFFSET ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_middle_edge
  0015f	8b 45 f8	 mov	 eax, DWORD PTR _middle$[ebp]
  00162	50		 push	 eax
  00163	8b 4d fc	 mov	 ecx, DWORD PTR _top$[ebp]
  00166	51		 push	 ecx
  00167	e8 00 00 00 00	 call	 ?construct_shadow_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z ; construct_shadow_triangle_edge

; 488  : 
; 489  : 	construct_shadow_triangle_edge ( middle, bottom, &middle_to_bottom_edge );

  0016c	68 00 00 00 00	 push	 OFFSET ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; middle_to_bottom_edge
  00171	8b 45 f4	 mov	 eax, DWORD PTR _bottom$[ebp]
  00174	50		 push	 eax
  00175	8b 4d f8	 mov	 ecx, DWORD PTR _middle$[ebp]
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 ?construct_shadow_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z ; construct_shadow_triangle_edge

; 490  : 
; 491  : 	//
; 492  : 	// the triangle is clockwise, so if bottom > middle then middle is right
; 493  : 	//
; 494  : 
; 495  : 	if ( bottom_for_compare > middle_for_compare)

  0017e	8b 45 ec	 mov	 eax, DWORD PTR _bottom_for_compare$[ebp]
  00181	3b 45 f0	 cmp	 eax, DWORD PTR _middle_for_compare$[ebp]
  00184	7e 17		 jle	 SHORT $LN18@fill_shado

; 496  : 	{
; 497  : 
; 498  : 		middle_is_left = FALSE;

  00186	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _middle_is_left$[ebp], 0

; 499  : 
; 500  : 		left_edge = &top_to_bottom_edge;

  0018d	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _left_edge$[ebp], OFFSET ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_bottom_edge

; 501  : 
; 502  : 		right_edge = &top_to_middle_edge;

  00194	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _right_edge$[ebp], OFFSET ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_middle_edge

; 503  : 	}
; 504  : 	else

  0019b	eb 15		 jmp	 SHORT $LN19@fill_shado
$LN18@fill_shado:

; 505  : 	{
; 506  : 
; 507  : 		middle_is_left = TRUE;

  0019d	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _middle_is_left$[ebp], 1

; 508  : 
; 509  : 		left_edge = &top_to_middle_edge;

  001a4	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _left_edge$[ebp], OFFSET ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_middle_edge

; 510  : 
; 511  : 		right_edge = &top_to_bottom_edge;

  001ab	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _right_edge$[ebp], OFFSET ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_bottom_edge
$LN19@fill_shado:

; 512  : 	}
; 513  : 
; 514  : 	height = top_to_middle_edge.height;

  001b2	a1 18 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  001b7	89 45 e4	 mov	 DWORD PTR _height$[ebp], eax

; 515  : 
; 516  : 	y = top_to_middle_edge.j;

  001ba	a1 14 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  001bf	89 45 e0	 mov	 DWORD PTR _y$[ebp], eax

; 517  : 
; 518  : 	screen_ptr += top_to_middle_edge.j * screen_pitch;

  001c2	a1 14 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  001c7	0f af 45 dc	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  001cb	03 45 c4	 add	 eax, DWORD PTR _screen_ptr$[ebp]
  001ce	89 45 c4	 mov	 DWORD PTR _screen_ptr$[ebp], eax
$LN2@fill_shado:

; 519  : 
; 520  : 	while ( height-- )

  001d1	8b 45 e4	 mov	 eax, DWORD PTR _height$[ebp]
  001d4	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  001da	8b 4d e4	 mov	 ecx, DWORD PTR _height$[ebp]
  001dd	83 e9 01	 sub	 ecx, 1
  001e0	89 4d e4	 mov	 DWORD PTR _height$[ebp], ecx
  001e3	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR tv92[ebp], 0
  001ea	0f 84 00 01 00
	00		 je	 $LN3@fill_shado

; 521  : 	{
; 522  : 
; 523  : 		int
; 524  : 			width;
; 525  : 
; 526  : 		unsigned short int
; 527  : 			*word_ptr;
; 528  : 
; 529  : 		word_ptr = ( unsigned short int * ) screen_ptr;

  001f0	8b 45 c4	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  001f3	89 45 bc	 mov	 DWORD PTR _word_ptr$3[ebp], eax

; 530  : 
; 531  : 		word_ptr += left_edge->i;

  001f6	8b 45 cc	 mov	 eax, DWORD PTR _left_edge$[ebp]
  001f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fb	8b 55 bc	 mov	 edx, DWORD PTR _word_ptr$3[ebp]
  001fe	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00201	89 45 bc	 mov	 DWORD PTR _word_ptr$3[ebp], eax

; 532  : 
; 533  : 		width = right_edge->i - left_edge->i;

  00204	8b 45 c8	 mov	 eax, DWORD PTR _right_edge$[ebp]
  00207	8b 4d cc	 mov	 ecx, DWORD PTR _left_edge$[ebp]
  0020a	8b 10		 mov	 edx, DWORD PTR [eax]
  0020c	2b 11		 sub	 edx, DWORD PTR [ecx]
  0020e	89 55 c0	 mov	 DWORD PTR _width$4[ebp], edx

; 534  : 
; 535  : 		if ( width > 0 )
; 536  : 		{
; 537  : 
; 538  : //			solid_fill_horizontal_line ( word_ptr, colour, width );
; 539  : 		}
; 540  : 
; 541  : 		STEP_PLAIN_TRIANGLE_EDGE ( top_to_middle_edge );

  00211	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A
  00216	03 05 04 00 00
	00		 add	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+4
  0021c	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  00221	a1 14 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  00226	83 c0 01	 add	 eax, 1
  00229	a3 14 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+20, eax
  0022e	a1 18 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  00233	83 e8 01	 sub	 eax, 1
  00236	a3 18 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+24, eax
  0023b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  00240	03 05 08 00 00
	00		 add	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+8
  00246	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
  0024b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  00250	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  00256	7c 1d		 jl	 SHORT $LN21@fill_shado
  00258	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A
  0025d	83 c0 01	 add	 eax, 1
  00260	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  00265	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  0026a	2b 05 0c 00 00
	00		 sub	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  00270	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
$LN21@fill_shado:

; 542  : 
; 543  : 		STEP_PLAIN_TRIANGLE_EDGE ( top_to_bottom_edge );

  00275	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  0027a	03 05 04 00 00
	00		 add	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+4
  00280	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  00285	a1 14 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  0028a	83 c0 01	 add	 eax, 1
  0028d	a3 14 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20, eax
  00292	a1 18 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  00297	83 e8 01	 sub	 eax, 1
  0029a	a3 18 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24, eax
  0029f	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  002a4	03 05 08 00 00
	00		 add	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+8
  002aa	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
  002af	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  002b4	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  002ba	7c 1d		 jl	 SHORT $LN22@fill_shado
  002bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  002c1	83 c0 01	 add	 eax, 1
  002c4	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  002c9	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  002ce	2b 05 0c 00 00
	00		 sub	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  002d4	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
$LN22@fill_shado:

; 544  : 
; 545  : 		screen_ptr += screen_pitch;

  002d9	8b 45 c4	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  002dc	03 45 dc	 add	 eax, DWORD PTR _screen_pitch$[ebp]
  002df	89 45 c4	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 546  : 
; 547  : 		y++;

  002e2	8b 45 e0	 mov	 eax, DWORD PTR _y$[ebp]
  002e5	83 c0 01	 add	 eax, 1
  002e8	89 45 e0	 mov	 DWORD PTR _y$[ebp], eax

; 548  : 	}

  002eb	e9 e1 fe ff ff	 jmp	 $LN2@fill_shado
$LN3@fill_shado:

; 549  : 
; 550  : 	height = middle_to_bottom_edge.height;

  002f0	a1 18 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  002f5	89 45 e4	 mov	 DWORD PTR _height$[ebp], eax

; 551  : 
; 552  : 	if ( middle_is_left )

  002f8	83 7d e8 00	 cmp	 DWORD PTR _middle_is_left$[ebp], 0
  002fc	74 10		 je	 SHORT $LN23@fill_shado

; 553  : 	{
; 554  : 
; 555  : 		left_edge = &middle_to_bottom_edge;

  002fe	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _left_edge$[ebp], OFFSET ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; middle_to_bottom_edge

; 556  : 
; 557  : 		right_edge = &top_to_bottom_edge;

  00305	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _right_edge$[ebp], OFFSET ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_bottom_edge

; 558  : 	}
; 559  : 	else

  0030c	eb 0e		 jmp	 SHORT $LN4@fill_shado
$LN23@fill_shado:

; 560  : 	{
; 561  : 
; 562  : 		left_edge = &top_to_bottom_edge;

  0030e	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _left_edge$[ebp], OFFSET ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_bottom_edge

; 563  : 
; 564  : 		right_edge = &middle_to_bottom_edge;

  00315	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _right_edge$[ebp], OFFSET ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; middle_to_bottom_edge
$LN4@fill_shado:

; 565  : 	}
; 566  : 	
; 567  : 	while ( height--)

  0031c	8b 45 e4	 mov	 eax, DWORD PTR _height$[ebp]
  0031f	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv151[ebp], eax
  00325	8b 4d e4	 mov	 ecx, DWORD PTR _height$[ebp]
  00328	83 e9 01	 sub	 ecx, 1
  0032b	89 4d e4	 mov	 DWORD PTR _height$[ebp], ecx
  0032e	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR tv151[ebp], 0
  00335	0f 84 1f 01 00
	00		 je	 $LN1@fill_shado

; 568  : 	{
; 569  : 
; 570  : 		int
; 571  : 			width;
; 572  : 
; 573  : 		unsigned char 
; 574  : 			*line_ptr;
; 575  : 
; 576  : 		line_ptr = screen_ptr;

  0033b	8b 45 c4	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  0033e	89 45 b4	 mov	 DWORD PTR _line_ptr$1[ebp], eax

; 577  : 
; 578  : 		line_ptr += left_edge->i;

  00341	8b 45 cc	 mov	 eax, DWORD PTR _left_edge$[ebp]
  00344	8b 4d b4	 mov	 ecx, DWORD PTR _line_ptr$1[ebp]
  00347	03 08		 add	 ecx, DWORD PTR [eax]
  00349	89 4d b4	 mov	 DWORD PTR _line_ptr$1[ebp], ecx

; 579  : 
; 580  : 		width = right_edge->i - left_edge->i;

  0034c	8b 45 c8	 mov	 eax, DWORD PTR _right_edge$[ebp]
  0034f	8b 4d cc	 mov	 ecx, DWORD PTR _left_edge$[ebp]
  00352	8b 10		 mov	 edx, DWORD PTR [eax]
  00354	2b 11		 sub	 edx, DWORD PTR [ecx]
  00356	89 55 b8	 mov	 DWORD PTR _width$2[ebp], edx
$LN6@fill_shado:

; 581  : 
; 582  : 		while ( width )

  00359	83 7d b8 00	 cmp	 DWORD PTR _width$2[ebp], 0
  0035d	74 1c		 je	 SHORT $LN7@fill_shado

; 583  : 		{
; 584  : 
; 585  : 			*line_ptr++ = colour;

  0035f	8b 45 b4	 mov	 eax, DWORD PTR _line_ptr$1[ebp]
  00362	8a 4d 08	 mov	 cl, BYTE PTR _colour$[ebp]
  00365	88 08		 mov	 BYTE PTR [eax], cl
  00367	8b 55 b4	 mov	 edx, DWORD PTR _line_ptr$1[ebp]
  0036a	83 c2 01	 add	 edx, 1
  0036d	89 55 b4	 mov	 DWORD PTR _line_ptr$1[ebp], edx

; 586  : 
; 587  : 			width--;

  00370	8b 45 b8	 mov	 eax, DWORD PTR _width$2[ebp]
  00373	83 e8 01	 sub	 eax, 1
  00376	89 45 b8	 mov	 DWORD PTR _width$2[ebp], eax

; 588  : 		}

  00379	eb de		 jmp	 SHORT $LN6@fill_shado
$LN7@fill_shado:

; 589  : 
; 590  : 		STEP_PLAIN_TRIANGLE_EDGE ( middle_to_bottom_edge );

  0037b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  00380	03 05 04 00 00
	00		 add	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+4
  00386	a3 00 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  0038b	a1 14 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  00390	83 c0 01	 add	 eax, 1
  00393	a3 14 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20, eax
  00398	a1 18 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  0039d	83 e8 01	 sub	 eax, 1
  003a0	a3 18 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24, eax
  003a5	a1 10 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  003aa	03 05 08 00 00
	00		 add	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+8
  003b0	a3 10 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
  003b5	a1 10 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  003ba	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  003c0	7c 1d		 jl	 SHORT $LN25@fill_shado
  003c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  003c7	83 c0 01	 add	 eax, 1
  003ca	a3 00 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  003cf	a1 10 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  003d4	2b 05 0c 00 00
	00		 sub	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  003da	a3 10 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
$LN25@fill_shado:

; 591  : 
; 592  : 		STEP_PLAIN_TRIANGLE_EDGE ( top_to_bottom_edge );

  003df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  003e4	03 05 04 00 00
	00		 add	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+4
  003ea	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  003ef	a1 14 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  003f4	83 c0 01	 add	 eax, 1
  003f7	a3 14 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20, eax
  003fc	a1 18 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  00401	83 e8 01	 sub	 eax, 1
  00404	a3 18 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24, eax
  00409	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  0040e	03 05 08 00 00
	00		 add	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+8
  00414	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
  00419	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  0041e	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  00424	7c 1d		 jl	 SHORT $LN26@fill_shado
  00426	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  0042b	83 c0 01	 add	 eax, 1
  0042e	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  00433	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  00438	2b 05 0c 00 00
	00		 sub	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  0043e	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
$LN26@fill_shado:

; 593  : 
; 594  : 		screen_ptr += screen_pitch;

  00443	8b 45 c4	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  00446	03 45 dc	 add	 eax, DWORD PTR _screen_pitch$[ebp]
  00449	89 45 c4	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 595  : 
; 596  : 		y++;

  0044c	8b 45 e0	 mov	 eax, DWORD PTR _y$[ebp]
  0044f	83 c0 01	 add	 eax, 1
  00452	89 45 e0	 mov	 DWORD PTR _y$[ebp], eax

; 597  : 	}

  00455	e9 c2 fe ff ff	 jmp	 $LN4@fill_shado
$LN1@fill_shado:

; 598  : }

  0045a	5f		 pop	 edi
  0045b	5e		 pop	 esi
  0045c	5b		 pop	 ebx
  0045d	8b e5		 mov	 esp, ebp
  0045f	5d		 pop	 ebp
  00460	c2 04 00	 ret	 4
?fill_shadow_plain_polygon@@YGXI@Z ENDP			; fill_shadow_plain_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\shadfill.c
;	COMDAT ?draw_shadow_polygon@@YGXPAUVERTEX@@I@Z
_TEXT	SEGMENT
_polygon$ = 8						; size = 4
_colour$ = 12						; size = 4
?draw_shadow_polygon@@YGXPAUVERTEX@@I@Z PROC		; draw_shadow_polygon, COMDAT

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 344  : 
; 345  : 	triangle_point0 = polygon;

  00009	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?triangle_point0@@3PAUVERTEX@@A, eax ; triangle_point0

; 346  : 
; 347  : 	triangle_point1 = polygon->next_vertex;

  00011	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00014	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00017	89 0d 00 00 00
	00		 mov	 DWORD PTR ?triangle_point1@@3PAUVERTEX@@A, ecx ; triangle_point1

; 348  : 
; 349  : 	triangle_point2 = polygon->next_vertex->next_vertex;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00020	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00023	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00026	89 15 00 00 00
	00		 mov	 DWORD PTR ?triangle_point2@@3PAUVERTEX@@A, edx ; triangle_point2
$LN2@draw_shado:

; 350  : 
; 351  : 	while ( triangle_point2 )

  0002c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?triangle_point2@@3PAUVERTEX@@A, 0 ; triangle_point2
  00033	0f 84 2e 01 00
	00		 je	 $LN3@draw_shado

; 352  : 	{
; 353  : 
; 354  : 		convert_float_to_int ( ( triangle_point0->i * 16 ), &triangle_points[0].i );

  00039	b8 08 00 00 00	 mov	 eax, 8
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A
  00047	51		 push	 ecx
  00048	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?triangle_point0@@3PAUVERTEX@@A ; triangle_point0
  0004e	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  00053	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  0005b	51		 push	 ecx
  0005c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00061	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 355  : 		convert_float_to_int ( ( triangle_point0->j * 16 ), &triangle_points[0].j );

  00066	b8 08 00 00 00	 mov	 eax, 8
  0006b	6b c8 00	 imul	 ecx, eax, 0
  0006e	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A+4
  00074	51		 push	 ecx
  00075	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?triangle_point0@@3PAUVERTEX@@A ; triangle_point0
  0007b	f3 0f 10 42 14	 movss	 xmm0, DWORD PTR [edx+20]
  00080	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00088	51		 push	 ecx
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 356  : 	
; 357  : 		convert_float_to_int ( ( triangle_point1->i * 16 ), &triangle_points[1].i );

  00093	b8 08 00 00 00	 mov	 eax, 8
  00098	c1 e0 00	 shl	 eax, 0
  0009b	05 00 00 00 00	 add	 eax, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A
  000a0	50		 push	 eax
  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point1@@3PAUVERTEX@@A ; triangle_point1
  000a7	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  000ac	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  000b4	51		 push	 ecx
  000b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ba	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 358  : 		convert_float_to_int ( ( triangle_point1->j * 16 ), &triangle_points[1].j );

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	c1 e0 00	 shl	 eax, 0
  000c7	05 04 00 00 00	 add	 eax, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A+4
  000cc	50		 push	 eax
  000cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point1@@3PAUVERTEX@@A ; triangle_point1
  000d3	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  000d8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  000e0	51		 push	 ecx
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 359  : 	
; 360  : 		convert_float_to_int ( ( triangle_point2->i * 16 ), &triangle_points[2].i );

  000eb	b8 08 00 00 00	 mov	 eax, 8
  000f0	d1 e0		 shl	 eax, 1
  000f2	05 00 00 00 00	 add	 eax, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A
  000f7	50		 push	 eax
  000f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  000fe	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00103	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  0010b	51		 push	 ecx
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 361  : 		convert_float_to_int ( ( triangle_point2->j * 16 ), &triangle_points[2].j );

  00116	b8 08 00 00 00	 mov	 eax, 8
  0011b	d1 e0		 shl	 eax, 1
  0011d	05 04 00 00 00	 add	 eax, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A+4
  00122	50		 push	 eax
  00123	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  00129	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0012e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00136	51		 push	 ecx
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 362  : 
; 363  : 		fill_shadow_plain_polygon ( colour );

  00141	8b 45 0c	 mov	 eax, DWORD PTR _colour$[ebp]
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ?fill_shadow_plain_polygon@@YGXI@Z ; fill_shadow_plain_polygon

; 364  : 
; 365  : 		triangle_point1 = triangle_point2;

  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  0014f	a3 00 00 00 00	 mov	 DWORD PTR ?triangle_point1@@3PAUVERTEX@@A, eax ; triangle_point1

; 366  : 
; 367  : 		triangle_point2 = triangle_point2->next_vertex;

  00154	a1 00 00 00 00	 mov	 eax, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  00159	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0015c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?triangle_point2@@3PAUVERTEX@@A, ecx ; triangle_point2

; 368  : 	}

  00162	e9 c5 fe ff ff	 jmp	 $LN2@draw_shado
$LN3@draw_shado:

; 369  : }

  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c2 08 00	 ret	 8
?draw_shadow_polygon@@YGXPAUVERTEX@@I@Z ENDP		; draw_shadow_polygon
_TEXT	ENDS
END
