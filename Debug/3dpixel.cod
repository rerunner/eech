; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dpixel.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?asm_convert_float_to_int@@YGXMPAH@Z		; asm_convert_float_to_int
PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?set_3d_pixel@@YGXMMMUREAL_COLOUR@@@Z		; set_3d_pixel
PUBLIC	__real@3ff0000000000000
EXTRN	?set_pixel@@YGXHHUREAL_COLOUR@@@Z:PROC		; set_pixel
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dpixel.c
;	COMDAT ?set_3d_pixel@@YGXMMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_outcode$1 = -56					; size = 4
_iymin$2 = -52						; size = 4
_iymax$3 = -48						; size = 4
_ixmin$4 = -44						; size = 4
_ixmax$5 = -40						; size = 4
_intj$6 = -36						; size = 4
_inti$7 = -32						; size = 4
_oymin$8 = -28						; size = 4
_oymax$9 = -24						; size = 4
_oxmin$10 = -20						; size = 4
_oxmax$11 = -16						; size = 4
_q$12 = -12						; size = 4
_j$13 = -8						; size = 4
_i$14 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_colour$ = 20						; size = 4
?set_3d_pixel@@YGXMMMUREAL_COLOUR@@@Z PROC		; set_3d_pixel, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 
; 76   : 	if ( z >= clip_hither )

  00009	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  0000e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?clip_hither@@3MA
  00015	0f 82 2a 01 00
	00		 jb	 $LN3@set_3d_pix

; 77   : 	{
; 78   : 
; 79   : 		float
; 80   : 			i,
; 81   : 			j,
; 82   : 			q,
; 83   : 			oxmax,
; 84   : 			oxmin,
; 85   : 			oymax,
; 86   : 			oymin;
; 87   : 	
; 88   : 		int
; 89   : 			inti,
; 90   : 			intj,
; 91   : 			ixmax,
; 92   : 			ixmin,
; 93   : 			iymax,
; 94   : 			iymin,
; 95   : 			outcode;
; 96   : 	
; 97   : 		q = 1.0 / z;

  0001b	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  00020	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00028	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00030	f3 0f 11 45 f4	 movss	 DWORD PTR _q$12[ebp], xmm0

; 98   : 	
; 99   : 		i = ( active_3d_environment->screen_i_scale * x * q );

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0003a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003e	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _x$[ebp]
  00043	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$12[ebp]
  00048	f3 0f 11 45 fc	 movss	 DWORD PTR _i$14[ebp], xmm0

; 100  : 	
; 101  : 		j = ( active_3d_environment->screen_j_scale * y * q );

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00052	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00057	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _y$[ebp]
  0005c	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$12[ebp]
  00061	f3 0f 11 45 f8	 movss	 DWORD PTR _j$13[ebp], xmm0

; 102  : 	
; 103  : 		j = active_3d_environment->y_origin - j;

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0006b	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00070	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _j$13[ebp]
  00075	f3 0f 11 45 f8	 movss	 DWORD PTR _j$13[ebp], xmm0

; 104  : 	
; 105  : 		i = active_3d_environment->x_origin + i;

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0007f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00084	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _i$14[ebp]
  00089	f3 0f 11 45 fc	 movss	 DWORD PTR _i$14[ebp], xmm0

; 106  : 	
; 107  : 		oxmax = active_viewport.x_max - i;

  0008e	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00096	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _i$14[ebp]
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _oxmax$11[ebp], xmm0

; 108  : 		oxmin = i - active_viewport.x_min;

  000a0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _i$14[ebp]
  000a5	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  000ad	f3 0f 11 45 ec	 movss	 DWORD PTR _oxmin$10[ebp], xmm0

; 109  : 		oymax = active_viewport.y_max - j;

  000b2	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  000ba	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _j$13[ebp]
  000bf	f3 0f 11 45 e8	 movss	 DWORD PTR _oymax$9[ebp], xmm0

; 110  : 		oymin = j - active_viewport.y_min;

  000c4	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _j$13[ebp]
  000c9	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  000d1	f3 0f 11 45 e4	 movss	 DWORD PTR _oymin$8[ebp], xmm0

; 111  : 	
; 112  : 		ixmax = *( ( int * ) &oxmax );

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _oxmax$11[ebp]
  000d9	89 45 d8	 mov	 DWORD PTR _ixmax$5[ebp], eax

; 113  : 		ixmin = *( ( int * ) &oxmin );

  000dc	8b 45 ec	 mov	 eax, DWORD PTR _oxmin$10[ebp]
  000df	89 45 d4	 mov	 DWORD PTR _ixmin$4[ebp], eax

; 114  : 		iymax = *( ( int * ) &oymax );

  000e2	8b 45 e8	 mov	 eax, DWORD PTR _oymax$9[ebp]
  000e5	89 45 d0	 mov	 DWORD PTR _iymax$3[ebp], eax

; 115  : 		iymin = *( ( int * ) &oymin );

  000e8	8b 45 e4	 mov	 eax, DWORD PTR _oymin$8[ebp]
  000eb	89 45 cc	 mov	 DWORD PTR _iymin$2[ebp], eax

; 116  : 	
; 117  : 		outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  000ee	8b 45 d0	 mov	 eax, DWORD PTR _iymax$3[ebp]
  000f1	50		 push	 eax
  000f2	8b 4d d8	 mov	 ecx, DWORD PTR _ixmax$5[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 cc	 mov	 edx, DWORD PTR _iymin$2[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 d4	 mov	 eax, DWORD PTR _ixmin$4[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00103	89 45 c8	 mov	 DWORD PTR _outcode$1[ebp], eax

; 118  : 	
; 119  : 		if ( !outcode )

  00106	83 7d c8 00	 cmp	 DWORD PTR _outcode$1[ebp], 0
  0010a	75 39		 jne	 SHORT $LN3@set_3d_pix

; 120  : 		{
; 121  : 
; 122  : 			asm_convert_float_to_int ( i, &inti );

  0010c	8d 45 e0	 lea	 eax, DWORD PTR _inti$7[ebp]
  0010f	50		 push	 eax
  00110	51		 push	 ecx
  00111	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _i$14[ebp]
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 123  : 
; 124  : 			asm_convert_float_to_int ( j, &intj );

  00120	8d 45 dc	 lea	 eax, DWORD PTR _intj$6[ebp]
  00123	50		 push	 eax
  00124	51		 push	 ecx
  00125	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _j$13[ebp]
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 125  : 
; 126  : 			set_pixel ( inti, intj, colour );

  00134	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  00137	50		 push	 eax
  00138	8b 4d dc	 mov	 ecx, DWORD PTR _intj$6[ebp]
  0013b	51		 push	 ecx
  0013c	8b 55 e0	 mov	 edx, DWORD PTR _inti$7[ebp]
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 ?set_pixel@@YGXHHUREAL_COLOUR@@@Z ; set_pixel
$LN3@set_3d_pix:

; 127  : 		}
; 128  : 	}
; 129  : }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 10 00	 ret	 16			; 00000010H
?set_3d_pixel@@YGXMMMUREAL_COLOUR@@@Z ENDP		; set_3d_pixel
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\fpu.h
;	COMDAT ?asm_convert_float_to_int@@YGXMPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_integer$ = 12						; size = 4
?asm_convert_float_to_int@@YGXMPAH@Z PROC		; asm_convert_float_to_int, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 
; 132  : 	__asm
; 133  : 	{
; 134  : 
; 135  : 		fld value

  00009	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 136  : 		mov edx, integer

  0000c	8b 55 0c	 mov	 edx, DWORD PTR _integer$[ebp]

; 137  : 		fistp dword ptr [edx]

  0000f	db 1a		 fistp	 DWORD PTR [edx]

; 138  : 	}
; 139  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?asm_convert_float_to_int@@YGXMPAH@Z ENDP		; asm_convert_float_to_int
_TEXT	ENDS
END
