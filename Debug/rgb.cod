; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\rgb.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?blit_rgb_graphic@@YGXPBEHH@Z			; blit_rgb_graphic
PUBLIC	?blit_rgb_clipped_graphic@@YGXPBEHH@Z		; blit_rgb_clipped_graphic
PUBLIC	?blit_rgb_centralised_clipped_graphic@@YGXPBEHH@Z ; blit_rgb_centralised_clipped_graphic
PUBLIC	?blit_rgb_alpha_centralised_clipped_graphic@@YGXPBE0HHH@Z ; blit_rgb_alpha_centralised_clipped_graphic
PUBLIC	?blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z ; blit_rgb_alpha_masked_sprite
PUBLIC	?blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z ; blit_rgb_alpha_masked_sprite_zero_mask_value
PUBLIC	?blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z ; blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture
PUBLIC	?blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z ; blit_rgb_alpha_masked_sprite_zero_mask_value_scaled
PUBLIC	?convert_tga_to_rgb@@YGXPBD0@Z			; convert_tga_to_rgb
PUBLIC	?convert_tga_to_rgb_alpha@@YGXPBD0@Z		; convert_tga_to_rgb_alpha
PUBLIC	?convert_tga_to_alpha_mask@@YGXPBD0@Z		; convert_tga_to_alpha_mask
PUBLIC	?convert_psd_to_rgb@@YGXPBD0@Z			; convert_psd_to_rgb
PUBLIC	?convert_psd_to_rgb_alpha@@YGXPBD0@Z		; convert_psd_to_rgb_alpha
PUBLIC	?convert_psd_to_alpha_mask@@YGXPBD0@Z		; convert_psd_to_alpha_mask
PUBLIC	?convert_and_dither_psd_to_rgb_alpha@@YGXPBD0@Z	; convert_and_dither_psd_to_rgb_alpha
PUBLIC	?convert_and_dither_psd_to_rgb@@YGXPBD0@Z	; convert_and_dither_psd_to_rgb
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??blit_rgb_graphic@@YGXPBEHH@Z@4JA ; `blit_rgb_graphic'::`1'::__LINE__Var
PUBLIC	??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0M@CBKKLMBN@rgb_graphic@			; `string'
PUBLIC	?__LINE__Var@?0??blit_rgb_clipped_graphic@@YGXPBEHH@Z@4JA ; `blit_rgb_clipped_graphic'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??blit_rgb_centralised_clipped_graphic@@YGXPBEHH@Z@4JA ; `blit_rgb_centralised_clipped_graphic'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??blit_rgb_alpha_centralised_clipped_graphic@@YGXPBE0HHH@Z@4JA ; `blit_rgb_alpha_centralised_clipped_graphic'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA ; `blit_rgb_alpha_masked_sprite'::`1'::__LINE__Var
PUBLIC	??_C@_08DMEKJFMP@rgb_data@			; `string'
PUBLIC	??_C@_09OFPEGCGB@mask_data@			; `string'
PUBLIC	??_C@_0M@OHNKMHLG@sprite_data@			; `string'
PUBLIC	??_C@_0CC@OOGLEADN@active_screen?9?$DOpixel_length?5?$DM?$DN?5@ ; `string'
PUBLIC	?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA ; `blit_rgb_alpha_masked_sprite_zero_mask_value'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z@4JA ; `blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture'::`1'::__LINE__Var
PUBLIC	??_C@_0M@FDPGHCLF@user_screen@			; `string'
PUBLIC	?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z@4JA ; `blit_rgb_alpha_masked_sprite_zero_mask_value_scaled'::`1'::__LINE__Var
PUBLIC	??_C@_04LMPJBNAL@s_dx@				; `string'
PUBLIC	??_C@_04KFOCCMEK@s_dy@				; `string'
PUBLIC	?__LINE__Var@?0??convert_tga_to_rgb@@YGXPBD0@Z@4JA ; `convert_tga_to_rgb'::`1'::__LINE__Var
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_0DB@LDBECLF@Unable?5to?5open?5file?5?$CFs?5during?5c@ ; `string'
PUBLIC	??_C@_0BC@IENFPOIE@destination_image@		; `string'
PUBLIC	??_C@_0DP@KIJBLCKO@?$CFs?5must?5have?5either?524?5or?532?5bi@ ; `string'
PUBLIC	??_C@_0DH@DHBMEGMF@Unable?5to?5open?5file?5?$CFs?5during?5c@ ; `string'
PUBLIC	??_C@_0DI@OILBPHLN@?$CFs?5must?5have?532?5bits?1pixel?5for?5@ ; `string'
PUBLIC	??_C@_0DI@NHMOOPBP@Unable?5to?5open?5file?5?$CFs?5during?5c@ ; `string'
PUBLIC	??_C@_0DJ@IJMPLLKA@?$CFs?5must?5have?532?5bits?1pixel?5for?5@ ; `string'
PUBLIC	?__LINE__Var@?0??convert_psd_to_rgb@@YGXPBD0@Z@4JA ; `convert_psd_to_rgb'::`1'::__LINE__Var
PUBLIC	??_C@_0DB@NPDKFFOK@Unable?5to?5open?5file?5?$CFs?5during?5c@ ; `string'
PUBLIC	??_C@_0EB@FOKOKKMO@?$CFs?5must?5have?5either?53?5or?54?5chan@ ; `string'
PUBLIC	??_C@_0DL@DMLIFIJN@?$CFs?5must?5have?54?5channels?1pixel?5f@ ; `string'
PUBLIC	??_C@_0DH@EFIFKNJI@Unable?5to?5open?5file?5?$CFs?5during?5c@ ; `string'
PUBLIC	??_C@_0DM@LCHFJCMH@?$CFs?5must?5have?54?5channels?1pixel?5f@ ; `string'
PUBLIC	??_C@_0DI@MCGGFLLN@Unable?5to?5open?5file?5?$CFs?5during?5c@ ; `string'
PUBLIC	??_C@_0DM@LBIBCEPO@Unable?5to?5open?5file?5?$CFs?5during?5c@ ; `string'
PUBLIC	??_C@_0BJ@MNCPLDLA@READ?5WIDTH?5?$CFd?0?5HEIGHT?5?$CFd@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?get_screen_pixel_width@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pixel_width
EXTRN	?set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z:PROC ; set_user_screen_pixel_format
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_screen_width@@YGHPAUSCREEN@@@Z:PROC	; get_screen_width
EXTRN	?get_screen_height@@YGHPAUSCREEN@@@Z:PROC	; get_screen_height
EXTRN	?get_user_rgb_colour_value@@YG?AUREAL_COLOUR@@G@Z:PROC ; get_user_rgb_colour_value
EXTRN	?load_tga_file@@YGPAXPBDPAF1PAH@Z:PROC		; load_tga_file
EXTRN	?load_psd_file@@YGPAXPBDPAH11@Z:PROC		; load_psd_file
EXTRN	?compute_dithered_rgb_image@@YGXHHPAUPSD_RGB@@PAG@Z:PROC ; compute_dithered_rgb_image
EXTRN	?compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z:PROC ; compute_dithered_rgba_image
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?active_screen_red_mask@@3HA:DWORD		; active_screen_red_mask
EXTRN	?active_screen_red_shift@@3HA:DWORD		; active_screen_red_shift
EXTRN	?active_screen_green_mask@@3HA:DWORD		; active_screen_green_mask
EXTRN	?active_screen_green_shift@@3HA:DWORD		; active_screen_green_shift
EXTRN	?active_screen_blue_mask@@3HA:DWORD		; active_screen_blue_mask
EXTRN	?active_screen_blue_shift@@3HA:DWORD		; active_screen_blue_shift
EXTRN	?active_screen_alpha_mask@@3HA:DWORD		; active_screen_alpha_mask
EXTRN	?active_screen_alpha_shift@@3HA:DWORD		; active_screen_alpha_shift
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MNCPLDLA@READ?5WIDTH?5?$CFd?0?5HEIGHT?5?$CFd@
CONST	SEGMENT
??_C@_0BJ@MNCPLDLA@READ?5WIDTH?5?$CFd?0?5HEIGHT?5?$CFd@ DB 'READ WIDTH %d'
	DB	', HEIGHT %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LBIBCEPO@Unable?5to?5open?5file?5?$CFs?5during?5c@
CONST	SEGMENT
??_C@_0DM@LBIBCEPO@Unable?5to?5open?5file?5?$CFs?5during?5c@ DB 'Unable t'
	DB	'o open file %s during convert_and_dither_psd_to_rgb', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@MCGGFLLN@Unable?5to?5open?5file?5?$CFs?5during?5c@
CONST	SEGMENT
??_C@_0DI@MCGGFLLN@Unable?5to?5open?5file?5?$CFs?5during?5c@ DB 'Unable t'
	DB	'o open file %s during convert_psd_to_alpha_mask', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LCHFJCMH@?$CFs?5must?5have?54?5channels?1pixel?5f@
CONST	SEGMENT
??_C@_0DM@LCHFJCMH@?$CFs?5must?5have?54?5channels?1pixel?5f@ DB '%s must '
	DB	'have 4 channels/pixel for convert_psd_to_alpha_mask', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@EFIFKNJI@Unable?5to?5open?5file?5?$CFs?5during?5c@
CONST	SEGMENT
??_C@_0DH@EFIFKNJI@Unable?5to?5open?5file?5?$CFs?5during?5c@ DB 'Unable t'
	DB	'o open file %s during convert_psd_to_rgb_alpha', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@DMLIFIJN@?$CFs?5must?5have?54?5channels?1pixel?5f@
CONST	SEGMENT
??_C@_0DL@DMLIFIJN@?$CFs?5must?5have?54?5channels?1pixel?5f@ DB '%s must '
	DB	'have 4 channels/pixel for convert_psd_to_rgb_alpha', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@FOKOKKMO@?$CFs?5must?5have?5either?53?5or?54?5chan@
CONST	SEGMENT
??_C@_0EB@FOKOKKMO@?$CFs?5must?5have?5either?53?5or?54?5chan@ DB '%s must'
	DB	' have either 3 or 4 channels/pixel for convert_psd_to_rgb', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NPDKFFOK@Unable?5to?5open?5file?5?$CFs?5during?5c@
CONST	SEGMENT
??_C@_0DB@NPDKFFOK@Unable?5to?5open?5file?5?$CFs?5during?5c@ DB 'Unable t'
	DB	'o open file %s during convert_psd_to_rgb', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??convert_psd_to_rgb@@YGXPBD0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??convert_psd_to_rgb@@YGXPBD0@Z@4JA DD 0497H ; `convert_psd_to_rgb'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DJ@IJMPLLKA@?$CFs?5must?5have?532?5bits?1pixel?5for?5@
CONST	SEGMENT
??_C@_0DJ@IJMPLLKA@?$CFs?5must?5have?532?5bits?1pixel?5for?5@ DB '%s must'
	DB	' have 32 bits/pixel for convert_tga_to_alpha_mask', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@NHMOOPBP@Unable?5to?5open?5file?5?$CFs?5during?5c@
CONST	SEGMENT
??_C@_0DI@NHMOOPBP@Unable?5to?5open?5file?5?$CFs?5during?5c@ DB 'Unable t'
	DB	'o open file %s during convert_tga_to_alpha_mask', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OILBPHLN@?$CFs?5must?5have?532?5bits?1pixel?5for?5@
CONST	SEGMENT
??_C@_0DI@OILBPHLN@?$CFs?5must?5have?532?5bits?1pixel?5for?5@ DB '%s must'
	DB	' have 32 bits/pixel for convert_tga_to_rgb_alpha', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@DHBMEGMF@Unable?5to?5open?5file?5?$CFs?5during?5c@
CONST	SEGMENT
??_C@_0DH@DHBMEGMF@Unable?5to?5open?5file?5?$CFs?5during?5c@ DB 'Unable t'
	DB	'o open file %s during convert_tga_to_rgb_alpha', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@KIJBLCKO@?$CFs?5must?5have?5either?524?5or?532?5bi@
CONST	SEGMENT
??_C@_0DP@KIJBLCKO@?$CFs?5must?5have?5either?524?5or?532?5bi@ DB '%s must'
	DB	' have either 24 or 32 bits/pixel for convert_tga_to_rgb', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IENFPOIE@destination_image@
CONST	SEGMENT
??_C@_0BC@IENFPOIE@destination_image@ DB 'destination_image', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LDBECLF@Unable?5to?5open?5file?5?$CFs?5during?5c@
CONST	SEGMENT
??_C@_0DB@LDBECLF@Unable?5to?5open?5file?5?$CFs?5during?5c@ DB 'Unable to'
	DB	' open file %s during convert_tga_to_rgb', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??convert_tga_to_rgb@@YGXPBD0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??convert_tga_to_rgb@@YGXPBD0@Z@4JA DD 036aH ; `convert_tga_to_rgb'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04KFOCCMEK@s_dy@
CONST	SEGMENT
??_C@_04KFOCCMEK@s_dy@ DB 's_dy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMPJBNAL@s_dx@
CONST	SEGMENT
??_C@_04LMPJBNAL@s_dx@ DB 's_dx', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z@4JA DD 02eeH ; `blit_rgb_alpha_masked_sprite_zero_mask_value_scaled'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@FDPGHCLF@user_screen@
CONST	SEGMENT
??_C@_0M@FDPGHCLF@user_screen@ DB 'user_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z@4JA DD 0280H ; `blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA DD 0222H ; `blit_rgb_alpha_masked_sprite_zero_mask_value'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@OOGLEADN@active_screen?9?$DOpixel_length?5?$DM?$DN?5@
CONST	SEGMENT
??_C@_0CC@OOGLEADN@active_screen?9?$DOpixel_length?5?$DM?$DN?5@ DB 'activ'
	DB	'e_screen->pixel_length <= 16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHNKMHLG@sprite_data@
CONST	SEGMENT
??_C@_0M@OHNKMHLG@sprite_data@ DB 'sprite_data', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OFPEGCGB@mask_data@
CONST	SEGMENT
??_C@_09OFPEGCGB@mask_data@ DB 'mask_data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMEKJFMP@rgb_data@
CONST	SEGMENT
??_C@_08DMEKJFMP@rgb_data@ DB 'rgb_data', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA DD 01c2H ; `blit_rgb_alpha_masked_sprite'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??blit_rgb_alpha_centralised_clipped_graphic@@YGXPBE0HHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??blit_rgb_alpha_centralised_clipped_graphic@@YGXPBE0HHH@Z@4JA DD 0148H ; `blit_rgb_alpha_centralised_clipped_graphic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??blit_rgb_centralised_clipped_graphic@@YGXPBEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??blit_rgb_centralised_clipped_graphic@@YGXPBEHH@Z@4JA DD 0dbH ; `blit_rgb_centralised_clipped_graphic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??blit_rgb_clipped_graphic@@YGXPBEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??blit_rgb_clipped_graphic@@YGXPBEHH@Z@4JA DD 076H ; `blit_rgb_clipped_graphic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@CBKKLMBN@rgb_graphic@
CONST	SEGMENT
??_C@_0M@CBKKLMBN@rgb_graphic@ DB 'rgb_graphic', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\rgb.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??blit_rgb_graphic@@YGXPBEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??blit_rgb_graphic@@YGXPBEHH@Z@4JA DD 04eH ; `blit_rgb_graphic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?convert_and_dither_psd_to_rgb@@YGXPBD0@Z
_TEXT	SEGMENT
_destination_image$ = -32				; size = 4
_number_of_channels$ = -28				; size = 4
_height$ = -24						; size = 4
_width$ = -20						; size = 4
_short_height$ = -16					; size = 2
_short_width$ = -12					; size = 2
_image$ = -8						; size = 4
_rgb_file_ptr$ = -4					; size = 4
_psd_filename$ = 8					; size = 4
_rgb_filename$ = 12					; size = 4
?convert_and_dither_psd_to_rgb@@YGXPBD0@Z PROC		; convert_and_dither_psd_to_rgb, COMDAT

; 1506 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1507 : 
; 1508 : 	FILE
; 1509 : 		*rgb_file_ptr;
; 1510 : 
; 1511 : 	unsigned char
; 1512 : 		*image;
; 1513 : 
; 1514 : 	unsigned short int
; 1515 : 		short_width,
; 1516 : 		short_height;
; 1517 : 
; 1518 : 	int
; 1519 : 		width,
; 1520 : 		height,
; 1521 : 		number_of_channels;
; 1522 : 
; 1523 : 	unsigned char
; 1524 : 		*destination_image;
; 1525 : 
; 1526 : 	//
; 1527 : 	// load psd file
; 1528 : 	//
; 1529 : 
; 1530 : 	image = ( unsigned char * ) load_psd_file ( psd_filename, &width, &height, &number_of_channels );

  00009	8d 45 e4	 lea	 eax, DWORD PTR _number_of_channels$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d e8	 lea	 ecx, DWORD PTR _height$[ebp]
  00010	51		 push	 ecx
  00011	8d 55 ec	 lea	 edx, DWORD PTR _width$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _psd_filename$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?load_psd_file@@YGPAXPBDPAH11@Z ; load_psd_file
  0001e	89 45 f8	 mov	 DWORD PTR _image$[ebp], eax

; 1531 : 
; 1532 : 	//
; 1533 : 	// Open the destination file
; 1534 : 	//
; 1535 : 
; 1536 : 	if ( ( rgb_file_ptr = fopen ( rgb_filename, "wb" ) ) == NULL )

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00026	8b 45 0c	 mov	 eax, DWORD PTR _rgb_filename$[ebp]
  00029	50		 push	 eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00030	83 c4 08	 add	 esp, 8
  00033	89 45 fc	 mov	 DWORD PTR _rgb_file_ptr$[ebp], eax
  00036	83 7d fc 00	 cmp	 DWORD PTR _rgb_file_ptr$[ebp], 0
  0003a	75 11		 jne	 SHORT $LN2@convert_an

; 1537 : 	{
; 1538 : 
; 1539 : 		debug_fatal ( "Unable to open file %s during convert_and_dither_psd_to_rgb", rgb_filename );

  0003c	8b 45 0c	 mov	 eax, DWORD PTR _rgb_filename$[ebp]
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LBIBCEPO@Unable?5to?5open?5file?5?$CFs?5during?5c@
  00045	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0004a	83 c4 08	 add	 esp, 8
$LN2@convert_an:

; 1540 : 	}
; 1541 : 
; 1542 : 	//
; 1543 : 	// Allocate space for the destination image
; 1544 : 	//
; 1545 : 
; 1546 : 	debug_log ( "READ WIDTH %d, HEIGHT %d", width, height );

  0004d	8b 45 e8	 mov	 eax, DWORD PTR _height$[ebp]
  00050	50		 push	 eax
  00051	8b 4d ec	 mov	 ecx, DWORD PTR _width$[ebp]
  00054	51		 push	 ecx
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@MNCPLDLA@READ?5WIDTH?5?$CFd?0?5HEIGHT?5?$CFd@
  0005a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1547 : 
; 1548 : 	destination_image = ( unsigned char * ) safe_malloc ( width * height * sizeof ( rgb_packed ) );

  00062	8b 45 ec	 mov	 eax, DWORD PTR _width$[ebp]
  00065	0f af 45 e8	 imul	 eax, DWORD PTR _height$[ebp]
  00069	d1 e0		 shl	 eax, 1
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00071	89 45 e0	 mov	 DWORD PTR _destination_image$[ebp], eax

; 1549 : 
; 1550 : 	//
; 1551 : 	// Convert the rgb to dithered information format
; 1552 : 	//
; 1553 : 
; 1554 : 	if ( number_of_channels == 3 )

  00074	83 7d e4 03	 cmp	 DWORD PTR _number_of_channels$[ebp], 3
  00078	75 17		 jne	 SHORT $LN3@convert_an

; 1555 : 	{
; 1556 : 	
; 1557 : 		compute_dithered_rgb_image ( width, height, ( psd_rgb * ) image, ( rgb_packed * ) destination_image );

  0007a	8b 45 e0	 mov	 eax, DWORD PTR _destination_image$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _image$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 e8	 mov	 edx, DWORD PTR _height$[ebp]
  00085	52		 push	 edx
  00086	8b 45 ec	 mov	 eax, DWORD PTR _width$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?compute_dithered_rgb_image@@YGXHHPAUPSD_RGB@@PAG@Z ; compute_dithered_rgb_image
  0008f	eb 2e		 jmp	 SHORT $LN4@convert_an
$LN3@convert_an:

; 1558 : 	}
; 1559 : 	else if ( number_of_channels == 4 )

  00091	83 7d e4 04	 cmp	 DWORD PTR _number_of_channels$[ebp], 4
  00095	75 17		 jne	 SHORT $LN5@convert_an

; 1560 : 	{
; 1561 : 
; 1562 : 		compute_dithered_rgba_image ( width, height, ( psd_rgba * ) image, ( rgb_packed * ) destination_image );

  00097	8b 45 e0	 mov	 eax, DWORD PTR _destination_image$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _image$[ebp]
  0009e	51		 push	 ecx
  0009f	8b 55 e8	 mov	 edx, DWORD PTR _height$[ebp]
  000a2	52		 push	 edx
  000a3	8b 45 ec	 mov	 eax, DWORD PTR _width$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z ; compute_dithered_rgba_image

; 1563 : 	}
; 1564 : 	else

  000ac	eb 11		 jmp	 SHORT $LN4@convert_an
$LN5@convert_an:

; 1565 : 	{
; 1566 : 
; 1567 : 		debug_fatal ( "%s must have either 3 or 4 channels/pixel for convert_psd_to_rgb", psd_filename);

  000ae	8b 45 08	 mov	 eax, DWORD PTR _psd_filename$[ebp]
  000b1	50		 push	 eax
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@FOKOKKMO@?$CFs?5must?5have?5either?53?5or?54?5chan@
  000b7	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000bc	83 c4 08	 add	 esp, 8
$LN4@convert_an:

; 1568 : 	}
; 1569 : 
; 1570 : 	//
; 1571 : 	// manually write out header (x, y sizes)
; 1572 : 	//
; 1573 : 
; 1574 : 	short_width = width;

  000bf	66 8b 45 ec	 mov	 ax, WORD PTR _width$[ebp]
  000c3	66 89 45 f4	 mov	 WORD PTR _short_width$[ebp], ax

; 1575 : 
; 1576 : 	short_height = height;

  000c7	66 8b 45 e8	 mov	 ax, WORD PTR _height$[ebp]
  000cb	66 89 45 f0	 mov	 WORD PTR _short_height$[ebp], ax

; 1577 : 
; 1578 : 	fwrite ( &short_width, sizeof ( short_width ), 1, rgb_file_ptr );

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  000d2	50		 push	 eax
  000d3	6a 01		 push	 1
  000d5	6a 02		 push	 2
  000d7	8d 4d f4	 lea	 ecx, DWORD PTR _short_width$[ebp]
  000da	51		 push	 ecx
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000e1	83 c4 10	 add	 esp, 16			; 00000010H

; 1579 : 
; 1580 : 	fwrite ( &short_height, sizeof ( short_height ), 1, rgb_file_ptr );

  000e4	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  000e7	50		 push	 eax
  000e8	6a 01		 push	 1
  000ea	6a 02		 push	 2
  000ec	8d 4d f0	 lea	 ecx, DWORD PTR _short_height$[ebp]
  000ef	51		 push	 ecx
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000f6	83 c4 10	 add	 esp, 16			; 00000010H

; 1581 : 
; 1582 : 	//
; 1583 : 	// write out image
; 1584 : 	//
; 1585 : 
; 1586 : 	fwrite ( destination_image, width * sizeof ( rgb_packed ), height, rgb_file_ptr );

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d e8	 mov	 ecx, DWORD PTR _height$[ebp]
  00100	51		 push	 ecx
  00101	8b 55 ec	 mov	 edx, DWORD PTR _width$[ebp]
  00104	d1 e2		 shl	 edx, 1
  00106	52		 push	 edx
  00107	8b 45 e0	 mov	 eax, DWORD PTR _destination_image$[ebp]
  0010a	50		 push	 eax
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00111	83 c4 10	 add	 esp, 16			; 00000010H

; 1587 : 
; 1588 : 	fclose ( rgb_file_ptr );

  00114	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  00117	50		 push	 eax
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0011e	83 c4 04	 add	 esp, 4

; 1589 : 
; 1590 : 	safe_free ( destination_image );

  00121	8b 45 e0	 mov	 eax, DWORD PTR _destination_image$[ebp]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1591 : 
; 1592 : 	safe_free ( image );

  0012a	8b 45 f8	 mov	 eax, DWORD PTR _image$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1593 : }

  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c2 08 00	 ret	 8
?convert_and_dither_psd_to_rgb@@YGXPBD0@Z ENDP		; convert_and_dither_psd_to_rgb
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?convert_and_dither_psd_to_rgb_alpha@@YGXPBD0@Z
_TEXT	SEGMENT
_number_of_channels$ = -52				; size = 4
_y_loop$ = -48						; size = 4
_x_loop$ = -44						; size = 4
_height$ = -40						; size = 4
_width$ = -36						; size = 4
_destination_image$ = -32				; size = 4
_short_height$ = -28					; size = 2
_short_width$ = -24					; size = 2
_image_ptr$ = -20					; size = 4
_image_data$ = -16					; size = 4
_alpha$ = -12						; size = 4
_destination_alpha$ = -8				; size = 4
_rgb_alpha_file_ptr$ = -4				; size = 4
_psd_filename$ = 8					; size = 4
_rgb_alpha_filename$ = 12				; size = 4
?convert_and_dither_psd_to_rgb_alpha@@YGXPBD0@Z PROC	; convert_and_dither_psd_to_rgb_alpha, COMDAT

; 1600 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1601 : 
; 1602 : 	FILE
; 1603 : 		*rgb_alpha_file_ptr;
; 1604 : 
; 1605 : 	unsigned char
; 1606 : 		*destination_alpha,
; 1607 : 		*alpha;
; 1608 : 
; 1609 : 	psd_rgba
; 1610 : 		*image_data,
; 1611 : 		*image_ptr;
; 1612 : 
; 1613 : 	unsigned short int
; 1614 : 		short_width,
; 1615 : 		short_height;
; 1616 : 
; 1617 : 	rgb_packed
; 1618 : 		*destination_image;
; 1619 : 
; 1620 : 	int
; 1621 : 		width,
; 1622 : 		height,
; 1623 : 		x_loop,
; 1624 : 		y_loop,
; 1625 : 		number_of_channels;
; 1626 : 
; 1627 : 	//
; 1628 : 	// Load psd file
; 1629 : 	//
; 1630 : 
; 1631 : 	image_data = ( psd_rgba * ) load_psd_file ( psd_filename, &width, &height, &number_of_channels );

  00009	8d 45 cc	 lea	 eax, DWORD PTR _number_of_channels$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d d8	 lea	 ecx, DWORD PTR _height$[ebp]
  00010	51		 push	 ecx
  00011	8d 55 dc	 lea	 edx, DWORD PTR _width$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _psd_filename$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?load_psd_file@@YGPAXPBDPAH11@Z ; load_psd_file
  0001e	89 45 f0	 mov	 DWORD PTR _image_data$[ebp], eax

; 1632 : 
; 1633 : 	if ( number_of_channels != 4 )

  00021	83 7d cc 04	 cmp	 DWORD PTR _number_of_channels$[ebp], 4
  00025	74 11		 je	 SHORT $LN8@convert_an

; 1634 : 	{
; 1635 : 
; 1636 : 		debug_fatal ( "%s must have 4 channels/pixel for convert_psd_to_rgb_alpha", psd_filename );

  00027	8b 45 08	 mov	 eax, DWORD PTR _psd_filename$[ebp]
  0002a	50		 push	 eax
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@DMLIFIJN@?$CFs?5must?5have?54?5channels?1pixel?5f@
  00030	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00035	83 c4 08	 add	 esp, 8
$LN8@convert_an:

; 1637 : 	}
; 1638 : 
; 1639 : 	//
; 1640 : 	// Open the destination file
; 1641 : 	//
; 1642 : 
; 1643 : 	if ( ( rgb_alpha_file_ptr = fopen ( rgb_alpha_filename, "wb" ) ) == NULL )

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0003d	8b 45 0c	 mov	 eax, DWORD PTR _rgb_alpha_filename$[ebp]
  00040	50		 push	 eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00047	83 c4 08	 add	 esp, 8
  0004a	89 45 fc	 mov	 DWORD PTR _rgb_alpha_file_ptr$[ebp], eax
  0004d	83 7d fc 00	 cmp	 DWORD PTR _rgb_alpha_file_ptr$[ebp], 0
  00051	75 11		 jne	 SHORT $LN9@convert_an

; 1644 : 	{
; 1645 : 
; 1646 : 		debug_fatal ( "Unable to open file %s during convert_psd_to_rgb_alpha", rgb_alpha_filename );

  00053	8b 45 0c	 mov	 eax, DWORD PTR _rgb_alpha_filename$[ebp]
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@EFIFKNJI@Unable?5to?5open?5file?5?$CFs?5during?5c@
  0005c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00061	83 c4 08	 add	 esp, 8
$LN9@convert_an:

; 1647 : 	}
; 1648 : 
; 1649 : 	//
; 1650 : 	// Malloc memory for alpha data
; 1651 : 	//
; 1652 : 
; 1653 : 	alpha = ( unsigned char * ) safe_malloc ( sizeof ( char ) * width * height );

  00064	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  00067	0f af 45 d8	 imul	 eax, DWORD PTR _height$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00071	89 45 f4	 mov	 DWORD PTR _alpha$[ebp], eax

; 1654 : 
; 1655 : 	//
; 1656 : 	// Allocate space for the destination image
; 1657 : 	//
; 1658 : 
; 1659 : 	destination_image = ( rgb_packed * ) safe_malloc ( width * height * sizeof ( unsigned short int ) );

  00074	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  00077	0f af 45 d8	 imul	 eax, DWORD PTR _height$[ebp]
  0007b	d1 e0		 shl	 eax, 1
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00083	89 45 e0	 mov	 DWORD PTR _destination_image$[ebp], eax

; 1660 : 
; 1661 : 	//
; 1662 : 	// Now perform the dithering
; 1663 : 	//
; 1664 : 
; 1665 : 	compute_dithered_rgba_image ( width, height, ( psd_rgba * ) image_data, ( rgb_packed * ) destination_image );

  00086	8b 45 e0	 mov	 eax, DWORD PTR _destination_image$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _image_data$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 d8	 mov	 edx, DWORD PTR _height$[ebp]
  00091	52		 push	 edx
  00092	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z ; compute_dithered_rgba_image

; 1666 : 
; 1667 : 	//
; 1668 : 	// Now copy the alpha data area
; 1669 : 	//
; 1670 : 
; 1671 : 	destination_alpha = alpha;

  0009b	8b 45 f4	 mov	 eax, DWORD PTR _alpha$[ebp]
  0009e	89 45 f8	 mov	 DWORD PTR _destination_alpha$[ebp], eax

; 1672 : 
; 1673 : 	image_ptr = image_data;

  000a1	8b 45 f0	 mov	 eax, DWORD PTR _image_data$[ebp]
  000a4	89 45 ec	 mov	 DWORD PTR _image_ptr$[ebp], eax

; 1674 : 
; 1675 : 	for ( y_loop = 0; y_loop < height; y_loop++ )

  000a7	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _y_loop$[ebp], 0
  000ae	eb 09		 jmp	 SHORT $LN4@convert_an
$LN2@convert_an:
  000b0	8b 45 d0	 mov	 eax, DWORD PTR _y_loop$[ebp]
  000b3	83 c0 01	 add	 eax, 1
  000b6	89 45 d0	 mov	 DWORD PTR _y_loop$[ebp], eax
$LN4@convert_an:
  000b9	8b 45 d0	 mov	 eax, DWORD PTR _y_loop$[ebp]
  000bc	3b 45 d8	 cmp	 eax, DWORD PTR _height$[ebp]
  000bf	7d 3b		 jge	 SHORT $LN3@convert_an

; 1676 : 	{
; 1677 : 
; 1678 : 		for ( x_loop = 0; x_loop < width; x_loop++ )

  000c1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _x_loop$[ebp], 0
  000c8	eb 09		 jmp	 SHORT $LN7@convert_an
$LN5@convert_an:
  000ca	8b 45 d4	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000cd	83 c0 01	 add	 eax, 1
  000d0	89 45 d4	 mov	 DWORD PTR _x_loop$[ebp], eax
$LN7@convert_an:
  000d3	8b 45 d4	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000d6	3b 45 dc	 cmp	 eax, DWORD PTR _width$[ebp]
  000d9	7d 1f		 jge	 SHORT $LN6@convert_an

; 1679 : 		{
; 1680 : 
; 1681 : 			*destination_alpha++ = image_ptr->a;

  000db	8b 45 f8	 mov	 eax, DWORD PTR _destination_alpha$[ebp]
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _image_ptr$[ebp]
  000e1	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  000e4	88 10		 mov	 BYTE PTR [eax], dl
  000e6	8b 45 f8	 mov	 eax, DWORD PTR _destination_alpha$[ebp]
  000e9	83 c0 01	 add	 eax, 1
  000ec	89 45 f8	 mov	 DWORD PTR _destination_alpha$[ebp], eax

; 1682 : 
; 1683 : 			image_ptr++;

  000ef	8b 45 ec	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  000f2	83 c0 04	 add	 eax, 4
  000f5	89 45 ec	 mov	 DWORD PTR _image_ptr$[ebp], eax

; 1684 : 		}

  000f8	eb d0		 jmp	 SHORT $LN5@convert_an
$LN6@convert_an:

; 1685 : 	}

  000fa	eb b4		 jmp	 SHORT $LN2@convert_an
$LN3@convert_an:

; 1686 : 
; 1687 : 	//
; 1688 : 	// Manually write out header (x, y sizes)
; 1689 : 	//
; 1690 : 
; 1691 : 	short_width = width;

  000fc	66 8b 45 dc	 mov	 ax, WORD PTR _width$[ebp]
  00100	66 89 45 e8	 mov	 WORD PTR _short_width$[ebp], ax

; 1692 : 
; 1693 : 	short_height = height;

  00104	66 8b 45 d8	 mov	 ax, WORD PTR _height$[ebp]
  00108	66 89 45 e4	 mov	 WORD PTR _short_height$[ebp], ax

; 1694 : 
; 1695 : 	fwrite ( &short_width, sizeof ( short_width ), 1, rgb_alpha_file_ptr );

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  0010f	50		 push	 eax
  00110	6a 01		 push	 1
  00112	6a 02		 push	 2
  00114	8d 4d e8	 lea	 ecx, DWORD PTR _short_width$[ebp]
  00117	51		 push	 ecx
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0011e	83 c4 10	 add	 esp, 16			; 00000010H

; 1696 : 
; 1697 : 	fwrite ( &short_height, sizeof ( short_height ), 1, rgb_alpha_file_ptr );

  00121	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  00124	50		 push	 eax
  00125	6a 01		 push	 1
  00127	6a 02		 push	 2
  00129	8d 4d e4	 lea	 ecx, DWORD PTR _short_height$[ebp]
  0012c	51		 push	 ecx
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00133	83 c4 10	 add	 esp, 16			; 00000010H

; 1698 : 
; 1699 : 	//
; 1700 : 	// Now write out the rgb data
; 1701 : 	//
; 1702 : 
; 1703 : 	fwrite ( destination_image, sizeof ( rgb_packed ), width * height, rgb_alpha_file_ptr );

  00136	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  00139	50		 push	 eax
  0013a	8b 4d dc	 mov	 ecx, DWORD PTR _width$[ebp]
  0013d	0f af 4d d8	 imul	 ecx, DWORD PTR _height$[ebp]
  00141	51		 push	 ecx
  00142	6a 02		 push	 2
  00144	8b 55 e0	 mov	 edx, DWORD PTR _destination_image$[ebp]
  00147	52		 push	 edx
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0014e	83 c4 10	 add	 esp, 16			; 00000010H

; 1704 : 
; 1705 : 	//
; 1706 : 	// Write out the alpha data.
; 1707 : 	//
; 1708 : 
; 1709 : 	fwrite ( alpha, 1, width * height, rgb_alpha_file_ptr );

  00151	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  00154	50		 push	 eax
  00155	8b 4d dc	 mov	 ecx, DWORD PTR _width$[ebp]
  00158	0f af 4d d8	 imul	 ecx, DWORD PTR _height$[ebp]
  0015c	51		 push	 ecx
  0015d	6a 01		 push	 1
  0015f	8b 55 f4	 mov	 edx, DWORD PTR _alpha$[ebp]
  00162	52		 push	 edx
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00169	83 c4 10	 add	 esp, 16			; 00000010H

; 1710 : 
; 1711 : 	fclose ( rgb_alpha_file_ptr );

  0016c	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  0016f	50		 push	 eax
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00176	83 c4 04	 add	 esp, 4

; 1712 : 
; 1713 : 	safe_free ( alpha );

  00179	8b 45 f4	 mov	 eax, DWORD PTR _alpha$[ebp]
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1714 : 
; 1715 : 	safe_free ( image_data );

  00182	8b 45 f0	 mov	 eax, DWORD PTR _image_data$[ebp]
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1716 : }

  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	5b		 pop	 ebx
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c2 08 00	 ret	 8
?convert_and_dither_psd_to_rgb_alpha@@YGXPBD0@Z ENDP	; convert_and_dither_psd_to_rgb_alpha
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?convert_psd_to_alpha_mask@@YGXPBD0@Z
_TEXT	SEGMENT
_number_of_channels$ = -40				; size = 4
_y_loop$ = -36						; size = 4
_x_loop$ = -32						; size = 4
_height$ = -28						; size = 4
_width$ = -24						; size = 4
_short_height$ = -20					; size = 2
_short_width$ = -16					; size = 2
_this_pixel$ = -12					; size = 4
_image_data$ = -8					; size = 4
_fp$ = -4						; size = 4
_psd_filename$ = 8					; size = 4
_alpha_mask_filename$ = 12				; size = 4
?convert_psd_to_alpha_mask@@YGXPBD0@Z PROC		; convert_psd_to_alpha_mask, COMDAT

; 1441 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1442 : 	FILE
; 1443 : 		*fp;
; 1444 : 
; 1445 : 	psd_rgba
; 1446 : 		*image_data,
; 1447 : 		*this_pixel;
; 1448 : 
; 1449 : 	unsigned short int
; 1450 : 		short_width,
; 1451 : 		short_height;
; 1452 : 
; 1453 : 	int
; 1454 : 		width,
; 1455 : 		height,
; 1456 : 		x_loop,
; 1457 : 		y_loop,
; 1458 : 		number_of_channels;
; 1459 : 
; 1460 : 	image_data = ( psd_rgba * ) load_psd_file (psd_filename, &width, &height, &number_of_channels);

  00009	8d 45 d8	 lea	 eax, DWORD PTR _number_of_channels$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d e4	 lea	 ecx, DWORD PTR _height$[ebp]
  00010	51		 push	 ecx
  00011	8d 55 e8	 lea	 edx, DWORD PTR _width$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _psd_filename$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?load_psd_file@@YGPAXPBDPAH11@Z ; load_psd_file
  0001e	89 45 f8	 mov	 DWORD PTR _image_data$[ebp], eax

; 1461 : 
; 1462 : 	if (number_of_channels != 4)

  00021	83 7d d8 04	 cmp	 DWORD PTR _number_of_channels$[ebp], 4
  00025	74 11		 je	 SHORT $LN8@convert_ps

; 1463 : 	{
; 1464 : 		debug_fatal ( "%s must have 4 channels/pixel for convert_psd_to_alpha_mask", psd_filename);

  00027	8b 45 08	 mov	 eax, DWORD PTR _psd_filename$[ebp]
  0002a	50		 push	 eax
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LCHFJCMH@?$CFs?5must?5have?54?5channels?1pixel?5f@
  00030	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00035	83 c4 08	 add	 esp, 8
$LN8@convert_ps:

; 1465 : 	}
; 1466 : 
; 1467 : 	//
; 1468 : 	// Open the destination file
; 1469 : 	//
; 1470 : 
; 1471 : 	if ((fp = fopen (alpha_mask_filename, "wb")) == NULL)

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0003d	8b 45 0c	 mov	 eax, DWORD PTR _alpha_mask_filename$[ebp]
  00040	50		 push	 eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00047	83 c4 08	 add	 esp, 8
  0004a	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax
  0004d	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00051	75 11		 jne	 SHORT $LN9@convert_ps

; 1472 : 	{
; 1473 : 		debug_fatal ("Unable to open file %s during convert_psd_to_alpha_mask", alpha_mask_filename);

  00053	8b 45 0c	 mov	 eax, DWORD PTR _alpha_mask_filename$[ebp]
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MCGGFLLN@Unable?5to?5open?5file?5?$CFs?5during?5c@
  0005c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00061	83 c4 08	 add	 esp, 8
$LN9@convert_ps:

; 1474 : 	}
; 1475 : 
; 1476 : 	short_width = width;

  00064	66 8b 45 e8	 mov	 ax, WORD PTR _width$[ebp]
  00068	66 89 45 f0	 mov	 WORD PTR _short_width$[ebp], ax

; 1477 : 
; 1478 : 	short_height = height;

  0006c	66 8b 45 e4	 mov	 ax, WORD PTR _height$[ebp]
  00070	66 89 45 ec	 mov	 WORD PTR _short_height$[ebp], ax

; 1479 : 
; 1480 : 	fwrite (&short_width, sizeof (short_width), 1, fp);

  00074	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00077	50		 push	 eax
  00078	6a 01		 push	 1
  0007a	6a 02		 push	 2
  0007c	8d 4d f0	 lea	 ecx, DWORD PTR _short_width$[ebp]
  0007f	51		 push	 ecx
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00086	83 c4 10	 add	 esp, 16			; 00000010H

; 1481 : 
; 1482 : 	fwrite (&short_height, sizeof (short_height), 1, fp);

  00089	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0008c	50		 push	 eax
  0008d	6a 01		 push	 1
  0008f	6a 02		 push	 2
  00091	8d 4d ec	 lea	 ecx, DWORD PTR _short_height$[ebp]
  00094	51		 push	 ecx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 1483 : 
; 1484 : 	for (y_loop = 0; y_loop < height; y_loop++)

  0009e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _y_loop$[ebp], 0
  000a5	eb 09		 jmp	 SHORT $LN4@convert_ps
$LN2@convert_ps:
  000a7	8b 45 dc	 mov	 eax, DWORD PTR _y_loop$[ebp]
  000aa	83 c0 01	 add	 eax, 1
  000ad	89 45 dc	 mov	 DWORD PTR _y_loop$[ebp], eax
$LN4@convert_ps:
  000b0	8b 45 dc	 mov	 eax, DWORD PTR _y_loop$[ebp]
  000b3	3b 45 e4	 cmp	 eax, DWORD PTR _height$[ebp]
  000b6	7d 4f		 jge	 SHORT $LN3@convert_ps

; 1485 : 	{
; 1486 : 		this_pixel = image_data + (width * y_loop);

  000b8	8b 45 e8	 mov	 eax, DWORD PTR _width$[ebp]
  000bb	0f af 45 dc	 imul	 eax, DWORD PTR _y_loop$[ebp]
  000bf	8b 4d f8	 mov	 ecx, DWORD PTR _image_data$[ebp]
  000c2	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000c5	89 55 f4	 mov	 DWORD PTR _this_pixel$[ebp], edx

; 1487 : 
; 1488 : 		for (x_loop = 0; x_loop < width; x_loop++)

  000c8	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _x_loop$[ebp], 0
  000cf	eb 09		 jmp	 SHORT $LN7@convert_ps
$LN5@convert_ps:
  000d1	8b 45 e0	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000d4	83 c0 01	 add	 eax, 1
  000d7	89 45 e0	 mov	 DWORD PTR _x_loop$[ebp], eax
$LN7@convert_ps:
  000da	8b 45 e0	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000dd	3b 45 e8	 cmp	 eax, DWORD PTR _width$[ebp]
  000e0	7d 23		 jge	 SHORT $LN6@convert_ps

; 1489 : 		{
; 1490 : 			fwrite (&this_pixel->a, sizeof (unsigned char), 1, fp);

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000e5	50		 push	 eax
  000e6	6a 01		 push	 1
  000e8	6a 01		 push	 1
  000ea	8b 4d f4	 mov	 ecx, DWORD PTR _this_pixel$[ebp]
  000ed	83 c1 03	 add	 ecx, 3
  000f0	51		 push	 ecx
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000f7	83 c4 10	 add	 esp, 16			; 00000010H

; 1491 : 
; 1492 : 			this_pixel++;

  000fa	8b 45 f4	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  000fd	83 c0 04	 add	 eax, 4
  00100	89 45 f4	 mov	 DWORD PTR _this_pixel$[ebp], eax

; 1493 : 		}

  00103	eb cc		 jmp	 SHORT $LN5@convert_ps
$LN6@convert_ps:

; 1494 : 	}

  00105	eb a0		 jmp	 SHORT $LN2@convert_ps
$LN3@convert_ps:

; 1495 : 
; 1496 : 	fclose (fp);

  00107	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0010a	50		 push	 eax
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00111	83 c4 04	 add	 esp, 4

; 1497 : 
; 1498 : 	safe_free (image_data);

  00114	8b 45 f8	 mov	 eax, DWORD PTR _image_data$[ebp]
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1499 : }

  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 08 00	 ret	 8
?convert_psd_to_alpha_mask@@YGXPBD0@Z ENDP		; convert_psd_to_alpha_mask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?convert_psd_to_rgb_alpha@@YGXPBD0@Z
_TEXT	SEGMENT
_number_of_channels$ = -52				; size = 4
_y_loop$ = -48						; size = 4
_x_loop$ = -44						; size = 4
_height$ = -40						; size = 4
_width$ = -36						; size = 4
_value$ = -32						; size = 2
_short_height$ = -28					; size = 2
_short_width$ = -24					; size = 2
_image_data$ = -20					; size = 4
_this_pixel$ = -16					; size = 4
_alpha$ = -12						; size = 4
_colour$ = -8						; size = 4
_rgb_alpha_file_ptr$ = -4				; size = 4
_psd_filename$ = 8					; size = 4
_rgb_alpha_filename$ = 12				; size = 4
?convert_psd_to_rgb_alpha@@YGXPBD0@Z PROC		; convert_psd_to_rgb_alpha, COMDAT

; 1328 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1329 : 
; 1330 : 	FILE
; 1331 : 		*rgb_alpha_file_ptr;
; 1332 : 
; 1333 : 	rgb_colour
; 1334 : 		colour;
; 1335 : 
; 1336 : 	unsigned char
; 1337 : 		*alpha;
; 1338 : 
; 1339 : 	psd_rgba
; 1340 : 		*this_pixel,
; 1341 : 		*image_data;
; 1342 : 
; 1343 : 	unsigned short int
; 1344 : 		short_width,
; 1345 : 		short_height;
; 1346 : 
; 1347 : 	rgb_packed
; 1348 : 		value;
; 1349 : 
; 1350 : 	int
; 1351 : 		width,
; 1352 : 		height,
; 1353 : 		x_loop,
; 1354 : 		y_loop,
; 1355 : 		number_of_channels;
; 1356 : 
; 1357 : 	//
; 1358 : 	// load tga file
; 1359 : 	//
; 1360 : 
; 1361 : 	image_data = ( psd_rgba * ) load_psd_file (psd_filename, &width, &height, &number_of_channels);

  00009	8d 45 cc	 lea	 eax, DWORD PTR _number_of_channels$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d d8	 lea	 ecx, DWORD PTR _height$[ebp]
  00010	51		 push	 ecx
  00011	8d 55 dc	 lea	 edx, DWORD PTR _width$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _psd_filename$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?load_psd_file@@YGPAXPBDPAH11@Z ; load_psd_file
  0001e	89 45 ec	 mov	 DWORD PTR _image_data$[ebp], eax

; 1362 : 
; 1363 : 	if (number_of_channels != 4)

  00021	83 7d cc 04	 cmp	 DWORD PTR _number_of_channels$[ebp], 4
  00025	74 11		 je	 SHORT $LN8@convert_ps

; 1364 : 	{
; 1365 : 
; 1366 : 		debug_fatal ( "%s must have 4 channels/pixel for convert_psd_to_rgb_alpha", psd_filename);

  00027	8b 45 08	 mov	 eax, DWORD PTR _psd_filename$[ebp]
  0002a	50		 push	 eax
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@DMLIFIJN@?$CFs?5must?5have?54?5channels?1pixel?5f@
  00030	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00035	83 c4 08	 add	 esp, 8
$LN8@convert_ps:

; 1367 : 	}
; 1368 : 
; 1369 : 	//
; 1370 : 	// Open the destination file
; 1371 : 	//
; 1372 : 
; 1373 : 	if ((rgb_alpha_file_ptr = fopen (rgb_alpha_filename, "wb")) == NULL)

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0003d	8b 45 0c	 mov	 eax, DWORD PTR _rgb_alpha_filename$[ebp]
  00040	50		 push	 eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00047	83 c4 08	 add	 esp, 8
  0004a	89 45 fc	 mov	 DWORD PTR _rgb_alpha_file_ptr$[ebp], eax
  0004d	83 7d fc 00	 cmp	 DWORD PTR _rgb_alpha_file_ptr$[ebp], 0
  00051	75 11		 jne	 SHORT $LN9@convert_ps

; 1374 : 	{
; 1375 : 
; 1376 : 		debug_fatal ( "Unable to open file %s during convert_psd_to_rgb_alpha", rgb_alpha_filename );

  00053	8b 45 0c	 mov	 eax, DWORD PTR _rgb_alpha_filename$[ebp]
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@EFIFKNJI@Unable?5to?5open?5file?5?$CFs?5during?5c@
  0005c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00061	83 c4 08	 add	 esp, 8
$LN9@convert_ps:

; 1377 : 	}
; 1378 : 
; 1379 : 	//
; 1380 : 	// malloc memory for alpha data
; 1381 : 	//
; 1382 : 
; 1383 : 	alpha = ( unsigned char *) safe_malloc (sizeof (char) * width * height);

  00064	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  00067	0f af 45 d8	 imul	 eax, DWORD PTR _height$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00071	89 45 f4	 mov	 DWORD PTR _alpha$[ebp], eax

; 1384 : 
; 1385 : 	//
; 1386 : 	// write image out as rgb file format
; 1387 : 	//
; 1388 : 
; 1389 : 	// manually write out header (x, y sizes)
; 1390 : 
; 1391 : 	short_width = width;

  00074	66 8b 45 dc	 mov	 ax, WORD PTR _width$[ebp]
  00078	66 89 45 e8	 mov	 WORD PTR _short_width$[ebp], ax

; 1392 : 
; 1393 : 	short_height = height;

  0007c	66 8b 45 d8	 mov	 ax, WORD PTR _height$[ebp]
  00080	66 89 45 e4	 mov	 WORD PTR _short_height$[ebp], ax

; 1394 : 
; 1395 : 	fwrite (&short_width, sizeof (short_width), 1, rgb_alpha_file_ptr);

  00084	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  00087	50		 push	 eax
  00088	6a 01		 push	 1
  0008a	6a 02		 push	 2
  0008c	8d 4d e8	 lea	 ecx, DWORD PTR _short_width$[ebp]
  0008f	51		 push	 ecx
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00096	83 c4 10	 add	 esp, 16			; 00000010H

; 1396 : 
; 1397 : 	fwrite (&short_height, sizeof (short_height), 1, rgb_alpha_file_ptr);

  00099	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  0009c	50		 push	 eax
  0009d	6a 01		 push	 1
  0009f	6a 02		 push	 2
  000a1	8d 4d e4	 lea	 ecx, DWORD PTR _short_height$[ebp]
  000a4	51		 push	 ecx
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000ab	83 c4 10	 add	 esp, 16			; 00000010H

; 1398 : 
; 1399 : 	// write out image
; 1400 : 
; 1401 : 	for (y_loop = 0; y_loop < height; y_loop ++)

  000ae	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _y_loop$[ebp], 0
  000b5	eb 09		 jmp	 SHORT $LN4@convert_ps
$LN2@convert_ps:
  000b7	8b 45 d0	 mov	 eax, DWORD PTR _y_loop$[ebp]
  000ba	83 c0 01	 add	 eax, 1
  000bd	89 45 d0	 mov	 DWORD PTR _y_loop$[ebp], eax
$LN4@convert_ps:
  000c0	8b 45 d0	 mov	 eax, DWORD PTR _y_loop$[ebp]
  000c3	3b 45 d8	 cmp	 eax, DWORD PTR _height$[ebp]
  000c6	0f 8d b7 00 00
	00		 jge	 $LN3@convert_ps

; 1402 : 	{
; 1403 : 
; 1404 : 		this_pixel = image_data + (width * y_loop);

  000cc	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  000cf	0f af 45 d0	 imul	 eax, DWORD PTR _y_loop$[ebp]
  000d3	8b 4d ec	 mov	 ecx, DWORD PTR _image_data$[ebp]
  000d6	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000d9	89 55 f0	 mov	 DWORD PTR _this_pixel$[ebp], edx

; 1405 : 
; 1406 : 		for (x_loop = 0; x_loop < width; x_loop ++)

  000dc	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _x_loop$[ebp], 0
  000e3	eb 09		 jmp	 SHORT $LN7@convert_ps
$LN5@convert_ps:
  000e5	8b 45 d4	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000e8	83 c0 01	 add	 eax, 1
  000eb	89 45 d4	 mov	 DWORD PTR _x_loop$[ebp], eax
$LN7@convert_ps:
  000ee	8b 45 d4	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000f1	3b 45 dc	 cmp	 eax, DWORD PTR _width$[ebp]
  000f4	0f 8d 84 00 00
	00		 jge	 $LN6@convert_ps

; 1407 : 		{
; 1408 : 
; 1409 : 			colour.b = this_pixel->b;

  000fa	8b 45 f0	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  000fd	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00100	88 4d f8	 mov	 BYTE PTR _colour$[ebp], cl

; 1410 : 
; 1411 : 			colour.g = this_pixel->g;

  00103	8b 45 f0	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  00106	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00109	88 4d f9	 mov	 BYTE PTR _colour$[ebp+1], cl

; 1412 : 
; 1413 : 			colour.r = this_pixel->r;

  0010c	8b 45 f0	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  0010f	8a 08		 mov	 cl, BYTE PTR [eax]
  00111	88 4d fa	 mov	 BYTE PTR _colour$[ebp+2], cl

; 1414 : 
; 1415 : 			colour.a = this_pixel->a;

  00114	8b 45 f0	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  00117	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  0011a	88 4d fb	 mov	 BYTE PTR _colour$[ebp+3], cl

; 1416 : 
; 1417 : 			value = get_general_packed_colour (colour);

  0011d	0f b6 45 fa	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  00121	c1 e0 08	 shl	 eax, 8
  00124	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00129	0f b6 4d f9	 movzx	 ecx, BYTE PTR _colour$[ebp+1]
  0012d	c1 e1 05	 shl	 ecx, 5
  00130	81 e1 e0 07 00
	00		 and	 ecx, 2016		; 000007e0H
  00136	0b c1		 or	 eax, ecx
  00138	0f b6 55 f8	 movzx	 edx, BYTE PTR _colour$[ebp]
  0013c	c1 ea 03	 shr	 edx, 3
  0013f	83 e2 1f	 and	 edx, 31			; 0000001fH
  00142	0b c2		 or	 eax, edx
  00144	66 89 45 e0	 mov	 WORD PTR _value$[ebp], ax

; 1418 : 
; 1419 : 			alpha [(y_loop * width) + x_loop] = colour.a;

  00148	8b 45 d0	 mov	 eax, DWORD PTR _y_loop$[ebp]
  0014b	0f af 45 dc	 imul	 eax, DWORD PTR _width$[ebp]
  0014f	03 45 d4	 add	 eax, DWORD PTR _x_loop$[ebp]
  00152	8b 4d f4	 mov	 ecx, DWORD PTR _alpha$[ebp]
  00155	8a 55 fb	 mov	 dl, BYTE PTR _colour$[ebp+3]
  00158	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 1420 : 
; 1421 : 			fwrite (&value, sizeof (value), 1, rgb_alpha_file_ptr);

  0015b	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  0015e	50		 push	 eax
  0015f	6a 01		 push	 1
  00161	6a 02		 push	 2
  00163	8d 4d e0	 lea	 ecx, DWORD PTR _value$[ebp]
  00166	51		 push	 ecx
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0016d	83 c4 10	 add	 esp, 16			; 00000010H

; 1422 : 
; 1423 : 			this_pixel ++;

  00170	8b 45 f0	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  00173	83 c0 04	 add	 eax, 4
  00176	89 45 f0	 mov	 DWORD PTR _this_pixel$[ebp], eax

; 1424 : 		}

  00179	e9 67 ff ff ff	 jmp	 $LN5@convert_ps
$LN6@convert_ps:

; 1425 : 	}

  0017e	e9 34 ff ff ff	 jmp	 $LN2@convert_ps
$LN3@convert_ps:

; 1426 : 
; 1427 : 	fwrite (alpha, sizeof (char) * width * height, 1, rgb_alpha_file_ptr);

  00183	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  00186	50		 push	 eax
  00187	6a 01		 push	 1
  00189	8b 4d dc	 mov	 ecx, DWORD PTR _width$[ebp]
  0018c	0f af 4d d8	 imul	 ecx, DWORD PTR _height$[ebp]
  00190	51		 push	 ecx
  00191	8b 55 f4	 mov	 edx, DWORD PTR _alpha$[ebp]
  00194	52		 push	 edx
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0019b	83 c4 10	 add	 esp, 16			; 00000010H

; 1428 : 
; 1429 : 	fclose (rgb_alpha_file_ptr);

  0019e	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  001a1	50		 push	 eax
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  001a8	83 c4 04	 add	 esp, 4

; 1430 : 
; 1431 : 	safe_free (alpha);

  001ab	8b 45 f4	 mov	 eax, DWORD PTR _alpha$[ebp]
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1432 : 
; 1433 : 	safe_free (image_data);

  001b4	8b 45 ec	 mov	 eax, DWORD PTR _image_data$[ebp]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1434 : }

  001bd	5f		 pop	 edi
  001be	5e		 pop	 esi
  001bf	5b		 pop	 ebx
  001c0	8b e5		 mov	 esp, ebp
  001c2	5d		 pop	 ebp
  001c3	c2 08 00	 ret	 8
?convert_psd_to_rgb_alpha@@YGXPBD0@Z ENDP		; convert_psd_to_rgb_alpha
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?convert_psd_to_rgb@@YGXPBD0@Z
_TEXT	SEGMENT
_image_data$1 = -64					; size = 4
_this_pixel$2 = -60					; size = 4
_image_data$3 = -56					; size = 4
_this_pixel$4 = -52					; size = 4
_destination_ptr$ = -48					; size = 4
_destination_image$ = -44				; size = 4
_number_of_channels$ = -40				; size = 4
_y_loop$ = -36						; size = 4
_x_loop$ = -32						; size = 4
_height$ = -28						; size = 4
_width$ = -24						; size = 4
_short_height$ = -20					; size = 2
_short_width$ = -16					; size = 2
_image$ = -12						; size = 4
_colour$ = -8						; size = 4
_rgb_file_ptr$ = -4					; size = 4
_psd_filename$ = 8					; size = 4
_rgb_filename$ = 12					; size = 4
?convert_psd_to_rgb@@YGXPBD0@Z PROC			; convert_psd_to_rgb, COMDAT

; 1175 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1176 : 
; 1177 : 	FILE
; 1178 : 		*rgb_file_ptr;
; 1179 : 
; 1180 : 	rgb_colour
; 1181 : 		colour;
; 1182 : 
; 1183 : 	unsigned char
; 1184 : 		*image;
; 1185 : 
; 1186 : 	unsigned short int
; 1187 : 		short_width,
; 1188 : 		short_height;
; 1189 : 
; 1190 : 	int
; 1191 : 		width,
; 1192 : 		height,
; 1193 : 		x_loop,
; 1194 : 		y_loop,
; 1195 : 		number_of_channels;
; 1196 : 
; 1197 : 	unsigned char
; 1198 : 		*destination_image;
; 1199 : 
; 1200 : 	rgb_packed
; 1201 : 		*destination_ptr;
; 1202 : 
; 1203 : 	//
; 1204 : 	// load psd file
; 1205 : 	//
; 1206 : 
; 1207 : 	image = ( unsigned char * ) load_psd_file (psd_filename, &width, &height, &number_of_channels);

  0000c	8d 45 d8	 lea	 eax, DWORD PTR _number_of_channels$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d e4	 lea	 ecx, DWORD PTR _height$[ebp]
  00013	51		 push	 ecx
  00014	8d 55 e8	 lea	 edx, DWORD PTR _width$[ebp]
  00017	52		 push	 edx
  00018	8b 45 08	 mov	 eax, DWORD PTR _psd_filename$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?load_psd_file@@YGPAXPBDPAH11@Z ; load_psd_file
  00021	89 45 f4	 mov	 DWORD PTR _image$[ebp], eax

; 1208 : 
; 1209 : 	//
; 1210 : 	// Open the destination file
; 1211 : 	//
; 1212 : 
; 1213 : 	if ((rgb_file_ptr = fopen (rgb_filename, "wb")) == NULL)

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00029	8b 45 0c	 mov	 eax, DWORD PTR _rgb_filename$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00033	83 c4 08	 add	 esp, 8
  00036	89 45 fc	 mov	 DWORD PTR _rgb_file_ptr$[ebp], eax
  00039	83 7d fc 00	 cmp	 DWORD PTR _rgb_file_ptr$[ebp], 0
  0003d	75 11		 jne	 SHORT $LN14@convert_ps

; 1214 : 	{
; 1215 : 
; 1216 : 		debug_fatal ( "Unable to open file %s during convert_psd_to_rgb", rgb_filename );

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _rgb_filename$[ebp]
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@NPDKFFOK@Unable?5to?5open?5file?5?$CFs?5during?5c@
  00048	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0004d	83 c4 08	 add	 esp, 8
$LN14@convert_ps:

; 1217 : 	}
; 1218 : 
; 1219 : 	//
; 1220 : 	// Allocate space for the destination image
; 1221 : 	//
; 1222 : 
; 1223 : 	destination_image = ( unsigned char * ) safe_malloc ( width * height * sizeof ( rgb_packed ) );

  00050	8b 45 e8	 mov	 eax, DWORD PTR _width$[ebp]
  00053	0f af 45 e4	 imul	 eax, DWORD PTR _height$[ebp]
  00057	d1 e0		 shl	 eax, 1
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0005f	89 45 d4	 mov	 DWORD PTR _destination_image$[ebp], eax

; 1224 : 
; 1225 : 	ASSERT ( destination_image );

  00062	83 7d d4 00	 cmp	 DWORD PTR _destination_image$[ebp], 0
  00066	75 18		 jne	 SHORT $LN15@convert_ps
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??convert_psd_to_rgb@@YGXPBD0@Z@4JA
  0006d	83 c0 32	 add	 eax, 50			; 00000032H
  00070	50		 push	 eax
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IENFPOIE@destination_image@
  0007b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@convert_ps:

; 1226 : 
; 1227 : 	destination_ptr = ( rgb_packed * ) destination_image;

  00080	8b 45 d4	 mov	 eax, DWORD PTR _destination_image$[ebp]
  00083	89 45 d0	 mov	 DWORD PTR _destination_ptr$[ebp], eax

; 1228 : 
; 1229 : 	//
; 1230 : 	// Convert the rgb to packed_rgb format
; 1231 : 	//
; 1232 : 
; 1233 : 	colour.a = 0;

  00086	c6 45 fb 00	 mov	 BYTE PTR _colour$[ebp+3], 0

; 1234 : 
; 1235 : 	if (number_of_channels == 3)

  0008a	83 7d d8 03	 cmp	 DWORD PTR _number_of_channels$[ebp], 3
  0008e	0f 85 b3 00 00
	00		 jne	 $LN16@convert_ps

; 1236 : 	{
; 1237 : 
; 1238 : 		psd_rgb
; 1239 : 			*this_pixel,
; 1240 : 			*image_data;
; 1241 : 
; 1242 : 		image_data = (psd_rgb *) image;

  00094	8b 45 f4	 mov	 eax, DWORD PTR _image$[ebp]
  00097	89 45 c8	 mov	 DWORD PTR _image_data$3[ebp], eax

; 1243 : 
; 1244 : 		for (y_loop = 0; y_loop < height; y_loop++)

  0009a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _y_loop$[ebp], 0
  000a1	eb 09		 jmp	 SHORT $LN4@convert_ps
$LN2@convert_ps:
  000a3	8b 45 dc	 mov	 eax, DWORD PTR _y_loop$[ebp]
  000a6	83 c0 01	 add	 eax, 1
  000a9	89 45 dc	 mov	 DWORD PTR _y_loop$[ebp], eax
$LN4@convert_ps:
  000ac	8b 45 dc	 mov	 eax, DWORD PTR _y_loop$[ebp]
  000af	3b 45 e4	 cmp	 eax, DWORD PTR _height$[ebp]
  000b2	0f 8d 8a 00 00
	00		 jge	 $LN3@convert_ps

; 1245 : 		{
; 1246 : 
; 1247 : 			this_pixel = image_data + (width * y_loop);

  000b8	8b 45 e8	 mov	 eax, DWORD PTR _width$[ebp]
  000bb	0f af 45 dc	 imul	 eax, DWORD PTR _y_loop$[ebp]
  000bf	6b c8 03	 imul	 ecx, eax, 3
  000c2	03 4d c8	 add	 ecx, DWORD PTR _image_data$3[ebp]
  000c5	89 4d cc	 mov	 DWORD PTR _this_pixel$4[ebp], ecx

; 1248 : 
; 1249 : 			for (x_loop = 0; x_loop < width; x_loop ++)

  000c8	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _x_loop$[ebp], 0
  000cf	eb 09		 jmp	 SHORT $LN7@convert_ps
$LN5@convert_ps:
  000d1	8b 45 e0	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000d4	83 c0 01	 add	 eax, 1
  000d7	89 45 e0	 mov	 DWORD PTR _x_loop$[ebp], eax
$LN7@convert_ps:
  000da	8b 45 e0	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000dd	3b 45 e8	 cmp	 eax, DWORD PTR _width$[ebp]
  000e0	7d 5b		 jge	 SHORT $LN6@convert_ps

; 1250 : 			{
; 1251 : 
; 1252 : 				colour.b = this_pixel->b;

  000e2	8b 45 cc	 mov	 eax, DWORD PTR _this_pixel$4[ebp]
  000e5	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  000e8	88 4d f8	 mov	 BYTE PTR _colour$[ebp], cl

; 1253 : 
; 1254 : 				colour.g = this_pixel->g;

  000eb	8b 45 cc	 mov	 eax, DWORD PTR _this_pixel$4[ebp]
  000ee	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f1	88 4d f9	 mov	 BYTE PTR _colour$[ebp+1], cl

; 1255 : 
; 1256 : 				colour.r = this_pixel->r;

  000f4	8b 45 cc	 mov	 eax, DWORD PTR _this_pixel$4[ebp]
  000f7	8a 08		 mov	 cl, BYTE PTR [eax]
  000f9	88 4d fa	 mov	 BYTE PTR _colour$[ebp+2], cl

; 1257 : 
; 1258 : 				*destination_ptr++ = get_general_packed_colour (colour);

  000fc	0f b6 45 fa	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  00100	c1 e0 08	 shl	 eax, 8
  00103	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00108	0f b6 4d f9	 movzx	 ecx, BYTE PTR _colour$[ebp+1]
  0010c	c1 e1 05	 shl	 ecx, 5
  0010f	81 e1 e0 07 00
	00		 and	 ecx, 2016		; 000007e0H
  00115	0b c1		 or	 eax, ecx
  00117	0f b6 55 f8	 movzx	 edx, BYTE PTR _colour$[ebp]
  0011b	c1 ea 03	 shr	 edx, 3
  0011e	83 e2 1f	 and	 edx, 31			; 0000001fH
  00121	0b c2		 or	 eax, edx
  00123	8b 4d d0	 mov	 ecx, DWORD PTR _destination_ptr$[ebp]
  00126	66 89 01	 mov	 WORD PTR [ecx], ax
  00129	8b 55 d0	 mov	 edx, DWORD PTR _destination_ptr$[ebp]
  0012c	83 c2 02	 add	 edx, 2
  0012f	89 55 d0	 mov	 DWORD PTR _destination_ptr$[ebp], edx

; 1259 : 
; 1260 : 				this_pixel ++;

  00132	8b 45 cc	 mov	 eax, DWORD PTR _this_pixel$4[ebp]
  00135	83 c0 03	 add	 eax, 3
  00138	89 45 cc	 mov	 DWORD PTR _this_pixel$4[ebp], eax

; 1261 : 			}

  0013b	eb 94		 jmp	 SHORT $LN5@convert_ps
$LN6@convert_ps:

; 1262 : 		}

  0013d	e9 61 ff ff ff	 jmp	 $LN2@convert_ps
$LN3@convert_ps:

; 1263 : 	}
; 1264 : 	else if (number_of_channels == 4)

  00142	e9 cb 00 00 00	 jmp	 $LN17@convert_ps
$LN16@convert_ps:
  00147	83 7d d8 04	 cmp	 DWORD PTR _number_of_channels$[ebp], 4
  0014b	0f 85 b0 00 00
	00		 jne	 $LN18@convert_ps

; 1265 : 	{
; 1266 : 
; 1267 : 		psd_rgba
; 1268 : 			*this_pixel,
; 1269 : 			*image_data;
; 1270 : 
; 1271 : 		image_data = (psd_rgba *) image;

  00151	8b 45 f4	 mov	 eax, DWORD PTR _image$[ebp]
  00154	89 45 c0	 mov	 DWORD PTR _image_data$1[ebp], eax

; 1272 : 
; 1273 : 		for (y_loop = 0; y_loop < height; y_loop++)

  00157	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _y_loop$[ebp], 0
  0015e	eb 09		 jmp	 SHORT $LN10@convert_ps
$LN8@convert_ps:
  00160	8b 45 dc	 mov	 eax, DWORD PTR _y_loop$[ebp]
  00163	83 c0 01	 add	 eax, 1
  00166	89 45 dc	 mov	 DWORD PTR _y_loop$[ebp], eax
$LN10@convert_ps:
  00169	8b 45 dc	 mov	 eax, DWORD PTR _y_loop$[ebp]
  0016c	3b 45 e4	 cmp	 eax, DWORD PTR _height$[ebp]
  0016f	0f 8d 8a 00 00
	00		 jge	 $LN9@convert_ps

; 1274 : 		{
; 1275 : 
; 1276 : 			this_pixel = image_data + (width * y_loop);

  00175	8b 45 e8	 mov	 eax, DWORD PTR _width$[ebp]
  00178	0f af 45 dc	 imul	 eax, DWORD PTR _y_loop$[ebp]
  0017c	8b 4d c0	 mov	 ecx, DWORD PTR _image_data$1[ebp]
  0017f	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00182	89 55 c4	 mov	 DWORD PTR _this_pixel$2[ebp], edx

; 1277 : 
; 1278 : 			for (x_loop = 0; x_loop < width; x_loop ++)

  00185	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _x_loop$[ebp], 0
  0018c	eb 09		 jmp	 SHORT $LN13@convert_ps
$LN11@convert_ps:
  0018e	8b 45 e0	 mov	 eax, DWORD PTR _x_loop$[ebp]
  00191	83 c0 01	 add	 eax, 1
  00194	89 45 e0	 mov	 DWORD PTR _x_loop$[ebp], eax
$LN13@convert_ps:
  00197	8b 45 e0	 mov	 eax, DWORD PTR _x_loop$[ebp]
  0019a	3b 45 e8	 cmp	 eax, DWORD PTR _width$[ebp]
  0019d	7d 5b		 jge	 SHORT $LN12@convert_ps

; 1279 : 			{
; 1280 : 
; 1281 : 				colour.b = this_pixel->b;

  0019f	8b 45 c4	 mov	 eax, DWORD PTR _this_pixel$2[ebp]
  001a2	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  001a5	88 4d f8	 mov	 BYTE PTR _colour$[ebp], cl

; 1282 : 
; 1283 : 				colour.g = this_pixel->g;

  001a8	8b 45 c4	 mov	 eax, DWORD PTR _this_pixel$2[ebp]
  001ab	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001ae	88 4d f9	 mov	 BYTE PTR _colour$[ebp+1], cl

; 1284 : 
; 1285 : 				colour.r = this_pixel->r;

  001b1	8b 45 c4	 mov	 eax, DWORD PTR _this_pixel$2[ebp]
  001b4	8a 08		 mov	 cl, BYTE PTR [eax]
  001b6	88 4d fa	 mov	 BYTE PTR _colour$[ebp+2], cl

; 1286 : 
; 1287 : 				*destination_ptr++ = get_general_packed_colour (colour);

  001b9	0f b6 45 fa	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  001bd	c1 e0 08	 shl	 eax, 8
  001c0	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  001c5	0f b6 4d f9	 movzx	 ecx, BYTE PTR _colour$[ebp+1]
  001c9	c1 e1 05	 shl	 ecx, 5
  001cc	81 e1 e0 07 00
	00		 and	 ecx, 2016		; 000007e0H
  001d2	0b c1		 or	 eax, ecx
  001d4	0f b6 55 f8	 movzx	 edx, BYTE PTR _colour$[ebp]
  001d8	c1 ea 03	 shr	 edx, 3
  001db	83 e2 1f	 and	 edx, 31			; 0000001fH
  001de	0b c2		 or	 eax, edx
  001e0	8b 4d d0	 mov	 ecx, DWORD PTR _destination_ptr$[ebp]
  001e3	66 89 01	 mov	 WORD PTR [ecx], ax
  001e6	8b 55 d0	 mov	 edx, DWORD PTR _destination_ptr$[ebp]
  001e9	83 c2 02	 add	 edx, 2
  001ec	89 55 d0	 mov	 DWORD PTR _destination_ptr$[ebp], edx

; 1288 : 
; 1289 : 				this_pixel ++;

  001ef	8b 45 c4	 mov	 eax, DWORD PTR _this_pixel$2[ebp]
  001f2	83 c0 04	 add	 eax, 4
  001f5	89 45 c4	 mov	 DWORD PTR _this_pixel$2[ebp], eax

; 1290 : 			}

  001f8	eb 94		 jmp	 SHORT $LN11@convert_ps
$LN12@convert_ps:

; 1291 : 		}

  001fa	e9 61 ff ff ff	 jmp	 $LN8@convert_ps
$LN9@convert_ps:

; 1292 : 	}
; 1293 : 	else

  001ff	eb 11		 jmp	 SHORT $LN17@convert_ps
$LN18@convert_ps:

; 1294 : 	{
; 1295 : 		debug_fatal ( "%s must have either 3 or 4 channels/pixel for convert_psd_to_rgb", psd_filename);

  00201	8b 45 08	 mov	 eax, DWORD PTR _psd_filename$[ebp]
  00204	50		 push	 eax
  00205	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@FOKOKKMO@?$CFs?5must?5have?5either?53?5or?54?5chan@
  0020a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0020f	83 c4 08	 add	 esp, 8
$LN17@convert_ps:

; 1296 : 	}
; 1297 : 
; 1298 : 	//
; 1299 : 	// manually write out header (x, y sizes)
; 1300 : 	//
; 1301 : 
; 1302 : 	short_width = width;

  00212	66 8b 45 e8	 mov	 ax, WORD PTR _width$[ebp]
  00216	66 89 45 f0	 mov	 WORD PTR _short_width$[ebp], ax

; 1303 : 
; 1304 : 	short_height = height;

  0021a	66 8b 45 e4	 mov	 ax, WORD PTR _height$[ebp]
  0021e	66 89 45 ec	 mov	 WORD PTR _short_height$[ebp], ax

; 1305 : 
; 1306 : 	fwrite (&short_width, sizeof (short_width), 1, rgb_file_ptr);

  00222	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  00225	50		 push	 eax
  00226	6a 01		 push	 1
  00228	6a 02		 push	 2
  0022a	8d 4d f0	 lea	 ecx, DWORD PTR _short_width$[ebp]
  0022d	51		 push	 ecx
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00234	83 c4 10	 add	 esp, 16			; 00000010H

; 1307 : 
; 1308 : 	fwrite (&short_height, sizeof (short_height), 1, rgb_file_ptr);

  00237	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  0023a	50		 push	 eax
  0023b	6a 01		 push	 1
  0023d	6a 02		 push	 2
  0023f	8d 4d ec	 lea	 ecx, DWORD PTR _short_height$[ebp]
  00242	51		 push	 ecx
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00249	83 c4 10	 add	 esp, 16			; 00000010H

; 1309 : 
; 1310 : 	//
; 1311 : 	// write out image
; 1312 : 	//
; 1313 : 
; 1314 : 	fwrite ( destination_image, width * sizeof ( rgb_packed ), height, rgb_file_ptr );

  0024c	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  0024f	50		 push	 eax
  00250	8b 4d e4	 mov	 ecx, DWORD PTR _height$[ebp]
  00253	51		 push	 ecx
  00254	8b 55 e8	 mov	 edx, DWORD PTR _width$[ebp]
  00257	d1 e2		 shl	 edx, 1
  00259	52		 push	 edx
  0025a	8b 45 d4	 mov	 eax, DWORD PTR _destination_image$[ebp]
  0025d	50		 push	 eax
  0025e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00264	83 c4 10	 add	 esp, 16			; 00000010H

; 1315 : 
; 1316 : 	fclose (rgb_file_ptr);

  00267	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  0026a	50		 push	 eax
  0026b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00271	83 c4 04	 add	 esp, 4

; 1317 : 
; 1318 : 	safe_free (destination_image);

  00274	8b 45 d4	 mov	 eax, DWORD PTR _destination_image$[ebp]
  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1319 : 
; 1320 : 	safe_free (image);

  0027d	8b 45 f4	 mov	 eax, DWORD PTR _image$[ebp]
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1321 : }

  00286	5f		 pop	 edi
  00287	5e		 pop	 esi
  00288	5b		 pop	 ebx
  00289	8b e5		 mov	 esp, ebp
  0028b	5d		 pop	 ebp
  0028c	c2 08 00	 ret	 8
?convert_psd_to_rgb@@YGXPBD0@Z ENDP			; convert_psd_to_rgb
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?convert_tga_to_alpha_mask@@YGXPBD0@Z
_TEXT	SEGMENT
_bits_per_pixel$ = -32					; size = 4
_y_loop$ = -28						; size = 4
_x_loop$ = -24						; size = 4
_height$ = -20						; size = 2
_width$ = -16						; size = 2
_this_pixel$ = -12					; size = 4
_image_data$ = -8					; size = 4
_fp$ = -4						; size = 4
_tga_filename$ = 8					; size = 4
_alpha_mask_filename$ = 12				; size = 4
?convert_tga_to_alpha_mask@@YGXPBD0@Z PROC		; convert_tga_to_alpha_mask, COMDAT

; 1120 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1121 : 	FILE
; 1122 : 		*fp;
; 1123 : 
; 1124 : 	tga_rgba
; 1125 : 		*image_data,
; 1126 : 		*this_pixel;
; 1127 : 
; 1128 : 	short int
; 1129 : 		width,
; 1130 : 		height;
; 1131 : 
; 1132 : 	int
; 1133 : 		x_loop,
; 1134 : 		y_loop,
; 1135 : 		bits_per_pixel;
; 1136 : 
; 1137 : 	if ((fp = fopen (alpha_mask_filename, "wb")) == NULL)

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _alpha_mask_filename$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax
  0001e	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00022	75 11		 jne	 SHORT $LN8@convert_tg

; 1138 : 	{
; 1139 : 		debug_fatal ("Unable to open file %s during convert_tga_to_alpha_mask", alpha_mask_filename);

  00024	8b 45 0c	 mov	 eax, DWORD PTR _alpha_mask_filename$[ebp]
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@NHMOOPBP@Unable?5to?5open?5file?5?$CFs?5during?5c@
  0002d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00032	83 c4 08	 add	 esp, 8
$LN8@convert_tg:

; 1140 : 	}
; 1141 : 
; 1142 : 	image_data = ( tga_rgba * ) load_tga_file (tga_filename, &width, &height, &bits_per_pixel);

  00035	8d 45 e0	 lea	 eax, DWORD PTR _bits_per_pixel$[ebp]
  00038	50		 push	 eax
  00039	8d 4d ec	 lea	 ecx, DWORD PTR _height$[ebp]
  0003c	51		 push	 ecx
  0003d	8d 55 f0	 lea	 edx, DWORD PTR _width$[ebp]
  00040	52		 push	 edx
  00041	8b 45 08	 mov	 eax, DWORD PTR _tga_filename$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?load_tga_file@@YGPAXPBDPAF1PAH@Z ; load_tga_file
  0004a	89 45 f8	 mov	 DWORD PTR _image_data$[ebp], eax

; 1143 : 
; 1144 : 	if (bits_per_pixel != 32)

  0004d	83 7d e0 20	 cmp	 DWORD PTR _bits_per_pixel$[ebp], 32 ; 00000020H
  00051	74 11		 je	 SHORT $LN9@convert_tg

; 1145 : 	{
; 1146 : 		debug_fatal ( "%s must have 32 bits/pixel for convert_tga_to_alpha_mask", tga_filename);

  00053	8b 45 08	 mov	 eax, DWORD PTR _tga_filename$[ebp]
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@IJMPLLKA@?$CFs?5must?5have?532?5bits?1pixel?5for?5@
  0005c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00061	83 c4 08	 add	 esp, 8
$LN9@convert_tg:

; 1147 : 	}
; 1148 : 
; 1149 : 	fwrite (&width, sizeof (width), 1, fp);

  00064	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00067	50		 push	 eax
  00068	6a 01		 push	 1
  0006a	6a 02		 push	 2
  0006c	8d 4d f0	 lea	 ecx, DWORD PTR _width$[ebp]
  0006f	51		 push	 ecx
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00076	83 c4 10	 add	 esp, 16			; 00000010H

; 1150 : 
; 1151 : 	fwrite (&height, sizeof (height), 1, fp);

  00079	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0007c	50		 push	 eax
  0007d	6a 01		 push	 1
  0007f	6a 02		 push	 2
  00081	8d 4d ec	 lea	 ecx, DWORD PTR _height$[ebp]
  00084	51		 push	 ecx
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0008b	83 c4 10	 add	 esp, 16			; 00000010H

; 1152 : 
; 1153 : 	for (y_loop = (height - 1); y_loop >= 0; y_loop--)

  0008e	0f bf 45 ec	 movsx	 eax, WORD PTR _height$[ebp]
  00092	83 e8 01	 sub	 eax, 1
  00095	89 45 e4	 mov	 DWORD PTR _y_loop$[ebp], eax
  00098	eb 09		 jmp	 SHORT $LN4@convert_tg
$LN2@convert_tg:
  0009a	8b 45 e4	 mov	 eax, DWORD PTR _y_loop$[ebp]
  0009d	83 e8 01	 sub	 eax, 1
  000a0	89 45 e4	 mov	 DWORD PTR _y_loop$[ebp], eax
$LN4@convert_tg:
  000a3	83 7d e4 00	 cmp	 DWORD PTR _y_loop$[ebp], 0
  000a7	7c 51		 jl	 SHORT $LN3@convert_tg

; 1154 : 	{
; 1155 : 		this_pixel = image_data + (width * y_loop);

  000a9	0f bf 45 f0	 movsx	 eax, WORD PTR _width$[ebp]
  000ad	0f af 45 e4	 imul	 eax, DWORD PTR _y_loop$[ebp]
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _image_data$[ebp]
  000b4	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000b7	89 55 f4	 mov	 DWORD PTR _this_pixel$[ebp], edx

; 1156 : 
; 1157 : 		for (x_loop = 0; x_loop < width; x_loop++)

  000ba	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _x_loop$[ebp], 0
  000c1	eb 09		 jmp	 SHORT $LN7@convert_tg
$LN5@convert_tg:
  000c3	8b 45 e8	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000c6	83 c0 01	 add	 eax, 1
  000c9	89 45 e8	 mov	 DWORD PTR _x_loop$[ebp], eax
$LN7@convert_tg:
  000cc	0f bf 45 f0	 movsx	 eax, WORD PTR _width$[ebp]
  000d0	39 45 e8	 cmp	 DWORD PTR _x_loop$[ebp], eax
  000d3	7d 23		 jge	 SHORT $LN6@convert_tg

; 1158 : 		{
; 1159 : 			fwrite (&this_pixel->a, sizeof (unsigned char), 1, fp);

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000d8	50		 push	 eax
  000d9	6a 01		 push	 1
  000db	6a 01		 push	 1
  000dd	8b 4d f4	 mov	 ecx, DWORD PTR _this_pixel$[ebp]
  000e0	83 c1 03	 add	 ecx, 3
  000e3	51		 push	 ecx
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000ea	83 c4 10	 add	 esp, 16			; 00000010H

; 1160 : 
; 1161 : 			this_pixel++;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  000f0	83 c0 04	 add	 eax, 4
  000f3	89 45 f4	 mov	 DWORD PTR _this_pixel$[ebp], eax

; 1162 : 		}

  000f6	eb cb		 jmp	 SHORT $LN5@convert_tg
$LN6@convert_tg:

; 1163 : 	}

  000f8	eb a0		 jmp	 SHORT $LN2@convert_tg
$LN3@convert_tg:

; 1164 : 
; 1165 : 	fclose (fp);

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000fd	50		 push	 eax
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00104	83 c4 04	 add	 esp, 4

; 1166 : 
; 1167 : 	safe_free (image_data);

  00107	8b 45 f8	 mov	 eax, DWORD PTR _image_data$[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1168 : }

  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
?convert_tga_to_alpha_mask@@YGXPBD0@Z ENDP		; convert_tga_to_alpha_mask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?convert_tga_to_rgb_alpha@@YGXPBD0@Z
_TEXT	SEGMENT
_bits_per_pixel$ = -44					; size = 4
_y_loop$ = -40						; size = 4
_x_loop$ = -36						; size = 4
_value$ = -32						; size = 2
_height$ = -28						; size = 2
_width$ = -24						; size = 2
_image_data$ = -20					; size = 4
_this_pixel$ = -16					; size = 4
_alpha$ = -12						; size = 4
_colour$ = -8						; size = 4
_rgb_alpha_file_ptr$ = -4				; size = 4
_tga_filename$ = 8					; size = 4
_rgb_alpha_filename$ = 12				; size = 4
?convert_tga_to_rgb_alpha@@YGXPBD0@Z PROC		; convert_tga_to_rgb_alpha, COMDAT

; 1017 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1018 : 
; 1019 : 	FILE
; 1020 : 		*rgb_alpha_file_ptr;
; 1021 : 
; 1022 : 	rgb_colour
; 1023 : 		colour;
; 1024 : 
; 1025 : 	unsigned char
; 1026 : 		*alpha;
; 1027 : 
; 1028 : 	tga_rgba
; 1029 : 		*this_pixel,
; 1030 : 		*image_data;
; 1031 : 
; 1032 : 	short int
; 1033 : 		width,
; 1034 : 		height;
; 1035 : 
; 1036 : 	rgb_packed
; 1037 : 		value;
; 1038 : 
; 1039 : 	int
; 1040 : 		x_loop,
; 1041 : 		y_loop,
; 1042 : 		bits_per_pixel;
; 1043 : 
; 1044 : 	if ((rgb_alpha_file_ptr = fopen (rgb_alpha_filename, "wb")) == NULL)

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _rgb_alpha_filename$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 fc	 mov	 DWORD PTR _rgb_alpha_file_ptr$[ebp], eax
  0001e	83 7d fc 00	 cmp	 DWORD PTR _rgb_alpha_file_ptr$[ebp], 0
  00022	75 11		 jne	 SHORT $LN8@convert_tg

; 1045 : 	{
; 1046 : 
; 1047 : 		debug_fatal ( "Unable to open file %s during convert_tga_to_rgb_alpha", rgb_alpha_filename );

  00024	8b 45 0c	 mov	 eax, DWORD PTR _rgb_alpha_filename$[ebp]
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@DHBMEGMF@Unable?5to?5open?5file?5?$CFs?5during?5c@
  0002d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00032	83 c4 08	 add	 esp, 8
$LN8@convert_tg:

; 1048 : 	}
; 1049 : 
; 1050 : 	//
; 1051 : 	// load tga file
; 1052 : 	//
; 1053 : 
; 1054 : 	image_data = ( tga_rgba * ) load_tga_file (tga_filename, &width, &height, &bits_per_pixel);

  00035	8d 45 d4	 lea	 eax, DWORD PTR _bits_per_pixel$[ebp]
  00038	50		 push	 eax
  00039	8d 4d e4	 lea	 ecx, DWORD PTR _height$[ebp]
  0003c	51		 push	 ecx
  0003d	8d 55 e8	 lea	 edx, DWORD PTR _width$[ebp]
  00040	52		 push	 edx
  00041	8b 45 08	 mov	 eax, DWORD PTR _tga_filename$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?load_tga_file@@YGPAXPBDPAF1PAH@Z ; load_tga_file
  0004a	89 45 ec	 mov	 DWORD PTR _image_data$[ebp], eax

; 1055 : 
; 1056 : 	if (bits_per_pixel != 32)

  0004d	83 7d d4 20	 cmp	 DWORD PTR _bits_per_pixel$[ebp], 32 ; 00000020H
  00051	74 11		 je	 SHORT $LN9@convert_tg

; 1057 : 	{
; 1058 : 
; 1059 : 		debug_fatal ( "%s must have 32 bits/pixel for convert_tga_to_rgb_alpha", tga_filename);

  00053	8b 45 08	 mov	 eax, DWORD PTR _tga_filename$[ebp]
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OILBPHLN@?$CFs?5must?5have?532?5bits?1pixel?5for?5@
  0005c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00061	83 c4 08	 add	 esp, 8
$LN9@convert_tg:

; 1060 : 	}
; 1061 : 
; 1062 : 	//
; 1063 : 	// malloc memory for alpha data
; 1064 : 	//
; 1065 : 
; 1066 : 	alpha = ( unsigned char *) safe_malloc (sizeof (char) * width * height);

  00064	0f bf 45 e8	 movsx	 eax, WORD PTR _width$[ebp]
  00068	0f bf 4d e4	 movsx	 ecx, WORD PTR _height$[ebp]
  0006c	0f af c1	 imul	 eax, ecx
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00075	89 45 f4	 mov	 DWORD PTR _alpha$[ebp], eax

; 1067 : 
; 1068 : 	//
; 1069 : 	// write image out as rgb file format
; 1070 : 	//
; 1071 : 
; 1072 : 	// manually write out header (x, y sizes)
; 1073 : 
; 1074 : 	fwrite (&width, sizeof (width), 1, rgb_alpha_file_ptr);

  00078	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  0007b	50		 push	 eax
  0007c	6a 01		 push	 1
  0007e	6a 02		 push	 2
  00080	8d 4d e8	 lea	 ecx, DWORD PTR _width$[ebp]
  00083	51		 push	 ecx
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0008a	83 c4 10	 add	 esp, 16			; 00000010H

; 1075 : 
; 1076 : 	fwrite (&height, sizeof (height), 1, rgb_alpha_file_ptr);

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  00090	50		 push	 eax
  00091	6a 01		 push	 1
  00093	6a 02		 push	 2
  00095	8d 4d e4	 lea	 ecx, DWORD PTR _height$[ebp]
  00098	51		 push	 ecx
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0009f	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 
; 1078 : 	// write out image
; 1079 : 
; 1080 : 	for (y_loop = 0; y_loop < height; y_loop ++)

  000a2	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _y_loop$[ebp], 0
  000a9	eb 09		 jmp	 SHORT $LN4@convert_tg
$LN2@convert_tg:
  000ab	8b 45 d8	 mov	 eax, DWORD PTR _y_loop$[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 d8	 mov	 DWORD PTR _y_loop$[ebp], eax
$LN4@convert_tg:
  000b4	0f bf 45 e4	 movsx	 eax, WORD PTR _height$[ebp]
  000b8	39 45 d8	 cmp	 DWORD PTR _y_loop$[ebp], eax
  000bb	0f 8d c3 00 00
	00		 jge	 $LN3@convert_tg

; 1081 : 	{
; 1082 : 
; 1083 : 		this_pixel = image_data + (width * (height - 1 - y_loop));

  000c1	0f bf 45 e8	 movsx	 eax, WORD PTR _width$[ebp]
  000c5	0f bf 4d e4	 movsx	 ecx, WORD PTR _height$[ebp]
  000c9	83 e9 01	 sub	 ecx, 1
  000cc	2b 4d d8	 sub	 ecx, DWORD PTR _y_loop$[ebp]
  000cf	0f af c1	 imul	 eax, ecx
  000d2	8b 55 ec	 mov	 edx, DWORD PTR _image_data$[ebp]
  000d5	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  000d8	89 45 f0	 mov	 DWORD PTR _this_pixel$[ebp], eax

; 1084 : 
; 1085 : 		for (x_loop = 0; x_loop < width; x_loop ++)

  000db	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _x_loop$[ebp], 0
  000e2	eb 09		 jmp	 SHORT $LN7@convert_tg
$LN5@convert_tg:
  000e4	8b 45 dc	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000e7	83 c0 01	 add	 eax, 1
  000ea	89 45 dc	 mov	 DWORD PTR _x_loop$[ebp], eax
$LN7@convert_tg:
  000ed	0f bf 45 e8	 movsx	 eax, WORD PTR _width$[ebp]
  000f1	39 45 dc	 cmp	 DWORD PTR _x_loop$[ebp], eax
  000f4	0f 8d 85 00 00
	00		 jge	 $LN6@convert_tg

; 1086 : 		{
; 1087 : 
; 1088 : 			colour.b = this_pixel->b;

  000fa	8b 45 f0	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  000fd	8a 08		 mov	 cl, BYTE PTR [eax]
  000ff	88 4d f8	 mov	 BYTE PTR _colour$[ebp], cl

; 1089 : 
; 1090 : 			colour.g = this_pixel->g;

  00102	8b 45 f0	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  00105	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00108	88 4d f9	 mov	 BYTE PTR _colour$[ebp+1], cl

; 1091 : 
; 1092 : 			colour.r = this_pixel->r;

  0010b	8b 45 f0	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  0010e	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00111	88 4d fa	 mov	 BYTE PTR _colour$[ebp+2], cl

; 1093 : 
; 1094 : 			colour.a = this_pixel->a;

  00114	8b 45 f0	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  00117	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  0011a	88 4d fb	 mov	 BYTE PTR _colour$[ebp+3], cl

; 1095 : 
; 1096 : 			value = get_general_packed_colour (colour);

  0011d	0f b6 45 fa	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  00121	c1 e0 08	 shl	 eax, 8
  00124	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00129	0f b6 4d f9	 movzx	 ecx, BYTE PTR _colour$[ebp+1]
  0012d	c1 e1 05	 shl	 ecx, 5
  00130	81 e1 e0 07 00
	00		 and	 ecx, 2016		; 000007e0H
  00136	0b c1		 or	 eax, ecx
  00138	0f b6 55 f8	 movzx	 edx, BYTE PTR _colour$[ebp]
  0013c	c1 ea 03	 shr	 edx, 3
  0013f	83 e2 1f	 and	 edx, 31			; 0000001fH
  00142	0b c2		 or	 eax, edx
  00144	66 89 45 e0	 mov	 WORD PTR _value$[ebp], ax

; 1097 : 
; 1098 : 			alpha [(y_loop * width) + x_loop] = colour.a;

  00148	0f bf 45 e8	 movsx	 eax, WORD PTR _width$[ebp]
  0014c	0f af 45 d8	 imul	 eax, DWORD PTR _y_loop$[ebp]
  00150	03 45 dc	 add	 eax, DWORD PTR _x_loop$[ebp]
  00153	8b 4d f4	 mov	 ecx, DWORD PTR _alpha$[ebp]
  00156	8a 55 fb	 mov	 dl, BYTE PTR _colour$[ebp+3]
  00159	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 1099 : 
; 1100 : 			fwrite (&value, sizeof (value), 1, rgb_alpha_file_ptr);

  0015c	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  0015f	50		 push	 eax
  00160	6a 01		 push	 1
  00162	6a 02		 push	 2
  00164	8d 4d e0	 lea	 ecx, DWORD PTR _value$[ebp]
  00167	51		 push	 ecx
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0016e	83 c4 10	 add	 esp, 16			; 00000010H

; 1101 : 
; 1102 : 			this_pixel ++;

  00171	8b 45 f0	 mov	 eax, DWORD PTR _this_pixel$[ebp]
  00174	83 c0 04	 add	 eax, 4
  00177	89 45 f0	 mov	 DWORD PTR _this_pixel$[ebp], eax

; 1103 : 		}

  0017a	e9 65 ff ff ff	 jmp	 $LN5@convert_tg
$LN6@convert_tg:

; 1104 : 	}

  0017f	e9 27 ff ff ff	 jmp	 $LN2@convert_tg
$LN3@convert_tg:

; 1105 : 
; 1106 : 	fwrite (alpha, sizeof (char) * width * height, 1, rgb_alpha_file_ptr);

  00184	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  00187	50		 push	 eax
  00188	6a 01		 push	 1
  0018a	0f bf 4d e8	 movsx	 ecx, WORD PTR _width$[ebp]
  0018e	0f bf 55 e4	 movsx	 edx, WORD PTR _height$[ebp]
  00192	0f af ca	 imul	 ecx, edx
  00195	51		 push	 ecx
  00196	8b 45 f4	 mov	 eax, DWORD PTR _alpha$[ebp]
  00199	50		 push	 eax
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001a0	83 c4 10	 add	 esp, 16			; 00000010H

; 1107 : 
; 1108 : 	fclose (rgb_alpha_file_ptr);

  001a3	8b 45 fc	 mov	 eax, DWORD PTR _rgb_alpha_file_ptr$[ebp]
  001a6	50		 push	 eax
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  001ad	83 c4 04	 add	 esp, 4

; 1109 : 
; 1110 : 	safe_free (alpha);

  001b0	8b 45 f4	 mov	 eax, DWORD PTR _alpha$[ebp]
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1111 : 
; 1112 : 	safe_free (image_data);

  001b9	8b 45 ec	 mov	 eax, DWORD PTR _image_data$[ebp]
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1113 : }

  001c2	5f		 pop	 edi
  001c3	5e		 pop	 esi
  001c4	5b		 pop	 ebx
  001c5	8b e5		 mov	 esp, ebp
  001c7	5d		 pop	 ebp
  001c8	c2 08 00	 ret	 8
?convert_tga_to_rgb_alpha@@YGXPBD0@Z ENDP		; convert_tga_to_rgb_alpha
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?convert_tga_to_rgb@@YGXPBD0@Z
_TEXT	SEGMENT
_image_data$1 = -56					; size = 4
_this_pixel$2 = -52					; size = 4
_image_data$3 = -48					; size = 4
_this_pixel$4 = -44					; size = 4
_destination_ptr$ = -40					; size = 4
_destination_image$ = -36				; size = 4
_bits_per_pixel$ = -32					; size = 4
_y_loop$ = -28						; size = 4
_x_loop$ = -24						; size = 4
_height$ = -20						; size = 2
_width$ = -16						; size = 2
_image$ = -12						; size = 4
_colour$ = -8						; size = 4
_rgb_file_ptr$ = -4					; size = 4
_tga_filename$ = 8					; size = 4
_rgb_filename$ = 12					; size = 4
?convert_tga_to_rgb@@YGXPBD0@Z PROC			; convert_tga_to_rgb, COMDAT

; 874  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 875  : 
; 876  : 	FILE
; 877  : 		*rgb_file_ptr;
; 878  : 
; 879  : 	rgb_colour
; 880  : 		colour;
; 881  : 
; 882  : 	unsigned char
; 883  : 		*image;
; 884  : 
; 885  : 	short int
; 886  : 		width,
; 887  : 		height;
; 888  : 
; 889  : 	int
; 890  : 		x_loop,
; 891  : 		y_loop,
; 892  : 		bits_per_pixel;
; 893  : 
; 894  : 	unsigned char
; 895  : 		*destination_image;
; 896  : 
; 897  : 	rgb_packed
; 898  : 		*destination_ptr;
; 899  : 
; 900  : 	if ((rgb_file_ptr = fopen (rgb_filename, "wb")) == NULL)

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _rgb_filename$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 fc	 mov	 DWORD PTR _rgb_file_ptr$[ebp], eax
  0001e	83 7d fc 00	 cmp	 DWORD PTR _rgb_file_ptr$[ebp], 0
  00022	75 11		 jne	 SHORT $LN14@convert_tg

; 901  : 	{
; 902  : 
; 903  : 		debug_fatal ( "Unable to open file %s during convert_tga_to_rgb", rgb_filename );

  00024	8b 45 0c	 mov	 eax, DWORD PTR _rgb_filename$[ebp]
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@LDBECLF@Unable?5to?5open?5file?5?$CFs?5during?5c@
  0002d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00032	83 c4 08	 add	 esp, 8
$LN14@convert_tg:

; 904  : 	}
; 905  : 
; 906  : 	//
; 907  : 	// load tga file
; 908  : 	//
; 909  : 
; 910  : 	image = ( unsigned char * ) load_tga_file (tga_filename, &width, &height, &bits_per_pixel);

  00035	8d 45 e0	 lea	 eax, DWORD PTR _bits_per_pixel$[ebp]
  00038	50		 push	 eax
  00039	8d 4d ec	 lea	 ecx, DWORD PTR _height$[ebp]
  0003c	51		 push	 ecx
  0003d	8d 55 f0	 lea	 edx, DWORD PTR _width$[ebp]
  00040	52		 push	 edx
  00041	8b 45 08	 mov	 eax, DWORD PTR _tga_filename$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?load_tga_file@@YGPAXPBDPAF1PAH@Z ; load_tga_file
  0004a	89 45 f4	 mov	 DWORD PTR _image$[ebp], eax

; 911  : 
; 912  : 	//
; 913  : 	// Allocate space for the destination image
; 914  : 	//
; 915  : 
; 916  : 	destination_image = ( unsigned char * ) safe_malloc ( width * height * sizeof ( rgb_packed ) );

  0004d	0f bf 45 f0	 movsx	 eax, WORD PTR _width$[ebp]
  00051	0f bf 4d ec	 movsx	 ecx, WORD PTR _height$[ebp]
  00055	0f af c1	 imul	 eax, ecx
  00058	d1 e0		 shl	 eax, 1
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00060	89 45 dc	 mov	 DWORD PTR _destination_image$[ebp], eax

; 917  : 
; 918  : 	ASSERT ( destination_image );

  00063	83 7d dc 00	 cmp	 DWORD PTR _destination_image$[ebp], 0
  00067	75 18		 jne	 SHORT $LN15@convert_tg
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??convert_tga_to_rgb@@YGXPBD0@Z@4JA
  0006e	83 c0 2c	 add	 eax, 44			; 0000002cH
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IENFPOIE@destination_image@
  0007c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@convert_tg:

; 919  : 
; 920  : 	destination_ptr = ( rgb_packed * ) destination_image;

  00081	8b 45 dc	 mov	 eax, DWORD PTR _destination_image$[ebp]
  00084	89 45 d8	 mov	 DWORD PTR _destination_ptr$[ebp], eax

; 921  : 
; 922  : 	//
; 923  : 	// Convert the rgb to packed_rgb format
; 924  : 	//
; 925  : 
; 926  : 	colour.a = 255;

  00087	c6 45 fb ff	 mov	 BYTE PTR _colour$[ebp+3], 255 ; 000000ffH

; 927  : 
; 928  : 	if (bits_per_pixel == 24)

  0008b	83 7d e0 18	 cmp	 DWORD PTR _bits_per_pixel$[ebp], 24 ; 00000018H
  0008f	0f 85 f0 00 00
	00		 jne	 $LN16@convert_tg

; 929  : 	{
; 930  : 
; 931  : 		tga_rgb
; 932  : 			*this_pixel,
; 933  : 			*image_data;
; 934  : 
; 935  : 		image_data = (tga_rgb *) image;

  00095	8b 45 f4	 mov	 eax, DWORD PTR _image$[ebp]
  00098	89 45 d0	 mov	 DWORD PTR _image_data$3[ebp], eax

; 936  : 
; 937  : 		for (y_loop = (height - 1); y_loop >= 0; y_loop --)

  0009b	0f bf 45 ec	 movsx	 eax, WORD PTR _height$[ebp]
  0009f	83 e8 01	 sub	 eax, 1
  000a2	89 45 e4	 mov	 DWORD PTR _y_loop$[ebp], eax
  000a5	eb 09		 jmp	 SHORT $LN4@convert_tg
$LN2@convert_tg:
  000a7	8b 45 e4	 mov	 eax, DWORD PTR _y_loop$[ebp]
  000aa	83 e8 01	 sub	 eax, 1
  000ad	89 45 e4	 mov	 DWORD PTR _y_loop$[ebp], eax
$LN4@convert_tg:
  000b0	83 7d e4 00	 cmp	 DWORD PTR _y_loop$[ebp], 0
  000b4	0f 8c c6 00 00
	00		 jl	 $LN3@convert_tg

; 938  : 		{
; 939  : 
; 940  : 			this_pixel = image_data + (width * y_loop);

  000ba	0f bf 45 f0	 movsx	 eax, WORD PTR _width$[ebp]
  000be	0f af 45 e4	 imul	 eax, DWORD PTR _y_loop$[ebp]
  000c2	6b c8 03	 imul	 ecx, eax, 3
  000c5	03 4d d0	 add	 ecx, DWORD PTR _image_data$3[ebp]
  000c8	89 4d d4	 mov	 DWORD PTR _this_pixel$4[ebp], ecx

; 941  : 
; 942  : 			for (x_loop = 0; x_loop < width; x_loop ++)

  000cb	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _x_loop$[ebp], 0
  000d2	eb 09		 jmp	 SHORT $LN7@convert_tg
$LN5@convert_tg:
  000d4	8b 45 e8	 mov	 eax, DWORD PTR _x_loop$[ebp]
  000d7	83 c0 01	 add	 eax, 1
  000da	89 45 e8	 mov	 DWORD PTR _x_loop$[ebp], eax
$LN7@convert_tg:
  000dd	0f bf 45 f0	 movsx	 eax, WORD PTR _width$[ebp]
  000e1	39 45 e8	 cmp	 DWORD PTR _x_loop$[ebp], eax
  000e4	0f 8d 91 00 00
	00		 jge	 $LN6@convert_tg

; 943  : 			{
; 944  : 
; 945  : 				colour.b = this_pixel->b;

  000ea	8b 45 d4	 mov	 eax, DWORD PTR _this_pixel$4[ebp]
  000ed	8a 08		 mov	 cl, BYTE PTR [eax]
  000ef	88 4d f8	 mov	 BYTE PTR _colour$[ebp], cl

; 946  : 
; 947  : 				colour.g = this_pixel->g;

  000f2	8b 45 d4	 mov	 eax, DWORD PTR _this_pixel$4[ebp]
  000f5	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f8	88 4d f9	 mov	 BYTE PTR _colour$[ebp+1], cl

; 948  : 
; 949  : 				colour.r = this_pixel->r;

  000fb	8b 45 d4	 mov	 eax, DWORD PTR _this_pixel$4[ebp]
  000fe	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00101	88 4d fa	 mov	 BYTE PTR _colour$[ebp+2], cl

; 950  : 
; 951  : 				*destination_ptr++ = get_packed_colour (colour);

  00104	0f b6 45 fa	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  00108	c1 e0 18	 shl	 eax, 24			; 00000018H
  0010b	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  00111	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00117	d3 e8		 shr	 eax, cl
  00119	0f b6 55 f9	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  0011d	c1 e2 18	 shl	 edx, 24			; 00000018H
  00120	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00126	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  0012c	d3 ea		 shr	 edx, cl
  0012e	0b c2		 or	 eax, edx
  00130	0f b6 55 f8	 movzx	 edx, BYTE PTR _colour$[ebp]
  00134	c1 e2 18	 shl	 edx, 24			; 00000018H
  00137	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  0013d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00143	d3 ea		 shr	 edx, cl
  00145	0b c2		 or	 eax, edx
  00147	0f b6 55 fb	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  0014b	c1 e2 18	 shl	 edx, 24			; 00000018H
  0014e	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  00154	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  0015a	d3 ea		 shr	 edx, cl
  0015c	0b c2		 or	 eax, edx
  0015e	8b 4d d8	 mov	 ecx, DWORD PTR _destination_ptr$[ebp]
  00161	66 89 01	 mov	 WORD PTR [ecx], ax
  00164	8b 55 d8	 mov	 edx, DWORD PTR _destination_ptr$[ebp]
  00167	83 c2 02	 add	 edx, 2
  0016a	89 55 d8	 mov	 DWORD PTR _destination_ptr$[ebp], edx

; 952  : 
; 953  : 				this_pixel ++;

  0016d	8b 45 d4	 mov	 eax, DWORD PTR _this_pixel$4[ebp]
  00170	83 c0 03	 add	 eax, 3
  00173	89 45 d4	 mov	 DWORD PTR _this_pixel$4[ebp], eax

; 954  : 			}

  00176	e9 59 ff ff ff	 jmp	 $LN5@convert_tg
$LN6@convert_tg:

; 955  : 		}

  0017b	e9 27 ff ff ff	 jmp	 $LN2@convert_tg
$LN3@convert_tg:

; 956  : 	}
; 957  : 	else if (bits_per_pixel == 32)

  00180	e9 ce 00 00 00	 jmp	 $LN17@convert_tg
$LN16@convert_tg:
  00185	83 7d e0 20	 cmp	 DWORD PTR _bits_per_pixel$[ebp], 32 ; 00000020H
  00189	0f 85 b3 00 00
	00		 jne	 $LN18@convert_tg

; 958  : 	{
; 959  : 
; 960  : 		tga_rgba
; 961  : 			*this_pixel,
; 962  : 			*image_data;
; 963  : 
; 964  : 		image_data = (tga_rgba *) image;

  0018f	8b 45 f4	 mov	 eax, DWORD PTR _image$[ebp]
  00192	89 45 c8	 mov	 DWORD PTR _image_data$1[ebp], eax

; 965  : 
; 966  : 		for (y_loop = (height - 1); y_loop >= 0; y_loop --)

  00195	0f bf 45 ec	 movsx	 eax, WORD PTR _height$[ebp]
  00199	83 e8 01	 sub	 eax, 1
  0019c	89 45 e4	 mov	 DWORD PTR _y_loop$[ebp], eax
  0019f	eb 09		 jmp	 SHORT $LN10@convert_tg
$LN8@convert_tg:
  001a1	8b 45 e4	 mov	 eax, DWORD PTR _y_loop$[ebp]
  001a4	83 e8 01	 sub	 eax, 1
  001a7	89 45 e4	 mov	 DWORD PTR _y_loop$[ebp], eax
$LN10@convert_tg:
  001aa	83 7d e4 00	 cmp	 DWORD PTR _y_loop$[ebp], 0
  001ae	0f 8c 8c 00 00
	00		 jl	 $LN9@convert_tg

; 967  : 		{
; 968  : 
; 969  : 			this_pixel = image_data + (width * y_loop);

  001b4	0f bf 45 f0	 movsx	 eax, WORD PTR _width$[ebp]
  001b8	0f af 45 e4	 imul	 eax, DWORD PTR _y_loop$[ebp]
  001bc	8b 4d c8	 mov	 ecx, DWORD PTR _image_data$1[ebp]
  001bf	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  001c2	89 55 cc	 mov	 DWORD PTR _this_pixel$2[ebp], edx

; 970  : 
; 971  : 			for (x_loop = 0; x_loop < width; x_loop ++)

  001c5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _x_loop$[ebp], 0
  001cc	eb 09		 jmp	 SHORT $LN13@convert_tg
$LN11@convert_tg:
  001ce	8b 45 e8	 mov	 eax, DWORD PTR _x_loop$[ebp]
  001d1	83 c0 01	 add	 eax, 1
  001d4	89 45 e8	 mov	 DWORD PTR _x_loop$[ebp], eax
$LN13@convert_tg:
  001d7	0f bf 45 f0	 movsx	 eax, WORD PTR _width$[ebp]
  001db	39 45 e8	 cmp	 DWORD PTR _x_loop$[ebp], eax
  001de	7d 5b		 jge	 SHORT $LN12@convert_tg

; 972  : 			{
; 973  : 
; 974  : 				colour.b = this_pixel->b;

  001e0	8b 45 cc	 mov	 eax, DWORD PTR _this_pixel$2[ebp]
  001e3	8a 08		 mov	 cl, BYTE PTR [eax]
  001e5	88 4d f8	 mov	 BYTE PTR _colour$[ebp], cl

; 975  : 
; 976  : 				colour.g = this_pixel->g;

  001e8	8b 45 cc	 mov	 eax, DWORD PTR _this_pixel$2[ebp]
  001eb	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001ee	88 4d f9	 mov	 BYTE PTR _colour$[ebp+1], cl

; 977  : 
; 978  : 				colour.r = this_pixel->r;

  001f1	8b 45 cc	 mov	 eax, DWORD PTR _this_pixel$2[ebp]
  001f4	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  001f7	88 4d fa	 mov	 BYTE PTR _colour$[ebp+2], cl

; 979  : 
; 980  : 				*destination_ptr++ = get_general_packed_colour (colour);

  001fa	0f b6 45 fa	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  001fe	c1 e0 08	 shl	 eax, 8
  00201	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00206	0f b6 4d f9	 movzx	 ecx, BYTE PTR _colour$[ebp+1]
  0020a	c1 e1 05	 shl	 ecx, 5
  0020d	81 e1 e0 07 00
	00		 and	 ecx, 2016		; 000007e0H
  00213	0b c1		 or	 eax, ecx
  00215	0f b6 55 f8	 movzx	 edx, BYTE PTR _colour$[ebp]
  00219	c1 ea 03	 shr	 edx, 3
  0021c	83 e2 1f	 and	 edx, 31			; 0000001fH
  0021f	0b c2		 or	 eax, edx
  00221	8b 4d d8	 mov	 ecx, DWORD PTR _destination_ptr$[ebp]
  00224	66 89 01	 mov	 WORD PTR [ecx], ax
  00227	8b 55 d8	 mov	 edx, DWORD PTR _destination_ptr$[ebp]
  0022a	83 c2 02	 add	 edx, 2
  0022d	89 55 d8	 mov	 DWORD PTR _destination_ptr$[ebp], edx

; 981  : 
; 982  : 				this_pixel ++;

  00230	8b 45 cc	 mov	 eax, DWORD PTR _this_pixel$2[ebp]
  00233	83 c0 04	 add	 eax, 4
  00236	89 45 cc	 mov	 DWORD PTR _this_pixel$2[ebp], eax

; 983  : 			}

  00239	eb 93		 jmp	 SHORT $LN11@convert_tg
$LN12@convert_tg:

; 984  : 		}

  0023b	e9 61 ff ff ff	 jmp	 $LN8@convert_tg
$LN9@convert_tg:

; 985  : 	}
; 986  : 	else

  00240	eb 11		 jmp	 SHORT $LN17@convert_tg
$LN18@convert_tg:

; 987  : 	{
; 988  : 		debug_fatal ( "%s must have either 24 or 32 bits/pixel for convert_tga_to_rgb", tga_filename);

  00242	8b 45 08	 mov	 eax, DWORD PTR _tga_filename$[ebp]
  00245	50		 push	 eax
  00246	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@KIJBLCKO@?$CFs?5must?5have?5either?524?5or?532?5bi@
  0024b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00250	83 c4 08	 add	 esp, 8
$LN17@convert_tg:

; 989  : 	}
; 990  : 
; 991  : 	//
; 992  : 	// manually write out header (x, y sizes)
; 993  : 	//
; 994  : 
; 995  : 	fwrite (&width, sizeof (width), 1, rgb_file_ptr);

  00253	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  00256	50		 push	 eax
  00257	6a 01		 push	 1
  00259	6a 02		 push	 2
  0025b	8d 4d f0	 lea	 ecx, DWORD PTR _width$[ebp]
  0025e	51		 push	 ecx
  0025f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00265	83 c4 10	 add	 esp, 16			; 00000010H

; 996  : 
; 997  : 	fwrite (&height, sizeof (height), 1, rgb_file_ptr);

  00268	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  0026b	50		 push	 eax
  0026c	6a 01		 push	 1
  0026e	6a 02		 push	 2
  00270	8d 4d ec	 lea	 ecx, DWORD PTR _height$[ebp]
  00273	51		 push	 ecx
  00274	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0027a	83 c4 10	 add	 esp, 16			; 00000010H

; 998  : 
; 999  : 	//
; 1000 : 	// write out image
; 1001 : 	//
; 1002 : 
; 1003 : 	fwrite ( destination_image, width * sizeof ( rgb_packed ), height, rgb_file_ptr );

  0027d	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  00280	50		 push	 eax
  00281	0f bf 4d ec	 movsx	 ecx, WORD PTR _height$[ebp]
  00285	51		 push	 ecx
  00286	0f bf 55 f0	 movsx	 edx, WORD PTR _width$[ebp]
  0028a	d1 e2		 shl	 edx, 1
  0028c	52		 push	 edx
  0028d	8b 45 dc	 mov	 eax, DWORD PTR _destination_image$[ebp]
  00290	50		 push	 eax
  00291	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00297	83 c4 10	 add	 esp, 16			; 00000010H

; 1004 : 
; 1005 : 	fclose (rgb_file_ptr);

  0029a	8b 45 fc	 mov	 eax, DWORD PTR _rgb_file_ptr$[ebp]
  0029d	50		 push	 eax
  0029e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  002a4	83 c4 04	 add	 esp, 4

; 1006 : 
; 1007 : 	safe_free ( destination_image );

  002a7	8b 45 dc	 mov	 eax, DWORD PTR _destination_image$[ebp]
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1008 : 
; 1009 : 	safe_free (image);

  002b0	8b 45 f4	 mov	 eax, DWORD PTR _image$[ebp]
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1010 : }

  002b9	5f		 pop	 edi
  002ba	5e		 pop	 esi
  002bb	5b		 pop	 ebx
  002bc	8b e5		 mov	 esp, ebp
  002be	5d		 pop	 ebp
  002bf	c2 08 00	 ret	 8
?convert_tga_to_rgb@@YGXPBD0@Z ENDP			; convert_tga_to_rgb
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z
_TEXT	SEGMENT
$T1 = -128						; size = 4
_col$ = -60						; size = 4
_screen_data$ = -56					; size = 4
_dy$ = -52						; size = 4
_dx$ = -48						; size = 4
_y$ = -44						; size = 4
_x$ = -40						; size = 4
_v_loop$ = -36						; size = 4
_u_loop$ = -32						; size = 4
_screen_one_add_on$ = -28				; size = 4
_screen_add_on$ = -24					; size = 4
_mask_height$ = -20					; size = 4
_mask_width$ = -16					; size = 4
_rgb_height$ = -12					; size = 4
_rgb_width$ = -8					; size = 4
_screen_pitch$ = -4					; size = 4
_rgb_data$ = 8						; size = 4
_mask_data$ = 12					; size = 4
_t_x$ = 16						; size = 4
_t_y$ = 20						; size = 4
_t_dx$ = 24						; size = 4
_t_dy$ = 28						; size = 4
_s_x$ = 32						; size = 4
_s_y$ = 36						; size = 4
_s_dx$ = 40						; size = 4
_s_dy$ = 44						; size = 4
_mask_value$ = 48					; size = 1
?blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z PROC ; blit_rgb_alpha_masked_sprite_zero_mask_value_scaled, COMDAT

; 750  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 751  : #if 0
; 752  : static rgb_alpha_masked_sprite_data
; 753  : 	sprite_values;
; 754  : 		sprite_values.x = t_x;
; 755  : 		sprite_values.y = t_y;
; 756  : 		sprite_values.u = s_x;
; 757  : 		sprite_values.v = s_y;
; 758  : 		sprite_values.width = s_dx;
; 759  : 		sprite_values.height = s_dy;
; 760  : 		sprite_values.mask_value = mask_value;
; 761  : 		blit_rgb_alpha_masked_sprite (rgb_data, mask_data, &sprite_values);
; 762  : #else
; 763  : 	int
; 764  : 		screen_pitch,
; 765  : 		rgb_width,
; 766  : 		rgb_height,
; 767  : 		mask_width,
; 768  : 		mask_height,
; 769  : 		screen_add_on,
; 770  : 		screen_one_add_on,
; 771  : 		u_loop,
; 772  : 		v_loop,
; 773  : 		x,
; 774  : 		y,
; 775  : 		dx,
; 776  : 		dy;
; 777  : 
; 778  : 	unsigned char
; 779  : 		*screen_data;
; 780  : 
; 781  : 	rgb_colour
; 782  : 		col;
; 783  : 
; 784  : 	ASSERT (rgb_data);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _rgb_data$[ebp], 0
  00010	75 18		 jne	 SHORT $LN8@blit_rgb_a
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z@4JA
  00017	83 c0 22	 add	 eax, 34			; 00000022H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_08DMEKJFMP@rgb_data@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@blit_rgb_a:

; 785  : 
; 786  : 	ASSERT (mask_data);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _mask_data$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN9@blit_rgb_a
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z@4JA
  00035	83 c0 24	 add	 eax, 36			; 00000024H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_09OFPEGCGB@mask_data@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@blit_rgb_a:

; 787  : 
; 788  : 	ASSERT (s_dx);

  00048	83 7d 28 00	 cmp	 DWORD PTR _s_dx$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN10@blit_rgb_a
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z@4JA
  00053	83 c0 26	 add	 eax, 38			; 00000026H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_04LMPJBNAL@s_dx@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@blit_rgb_a:

; 789  : 
; 790  : 	ASSERT (s_dy);

  00066	83 7d 2c 00	 cmp	 DWORD PTR _s_dy$[ebp], 0
  0006a	75 18		 jne	 SHORT $LN11@blit_rgb_a
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z@4JA
  00071	83 c0 28	 add	 eax, 40			; 00000028H
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_04KFOCCMEK@s_dy@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@blit_rgb_a:

; 791  : 
; 792  : 	set_user_screen_pixel_format (active_screen);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z ; set_user_screen_pixel_format

; 793  : 
; 794  : 	screen_pitch = get_screen_pitch (active_screen);

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0009a	89 45 fc	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 795  : 
; 796  : 	screen_data = get_screen_data (active_screen);

  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000a8	89 45 c8	 mov	 DWORD PTR _screen_data$[ebp], eax

; 797  : 
; 798  : 	//
; 799  : 	// rgb data
; 800  : 	//
; 801  : 
; 802  : 	rgb_width = get_list_item (rgb_data, unsigned short int) * sizeof (rgb_packed);

  000ab	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  000ae	83 c0 02	 add	 eax, 2
  000b1	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _rgb_data$[ebp]
  000b7	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  000bb	d1 e2		 shl	 edx, 1
  000bd	89 55 f8	 mov	 DWORD PTR _rgb_width$[ebp], edx

; 803  : 
; 804  : 	rgb_height = get_list_item (rgb_data, unsigned short int);

  000c0	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  000c3	83 c0 02	 add	 eax, 2
  000c6	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax
  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _rgb_data$[ebp]
  000cc	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  000d0	89 55 f4	 mov	 DWORD PTR _rgb_height$[ebp], edx

; 805  : 
; 806  : 	rgb_data += (s_x * sizeof (rgb_packed)) + (s_y * rgb_width);

  000d3	8b 45 24	 mov	 eax, DWORD PTR _s_y$[ebp]
  000d6	0f af 45 f8	 imul	 eax, DWORD PTR _rgb_width$[ebp]
  000da	03 45 08	 add	 eax, DWORD PTR _rgb_data$[ebp]
  000dd	8b 4d 20	 mov	 ecx, DWORD PTR _s_x$[ebp]
  000e0	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  000e3	89 55 08	 mov	 DWORD PTR _rgb_data$[ebp], edx

; 807  : 
; 808  : 	//
; 809  : 	// mask data
; 810  : 	//
; 811  : 
; 812  : 	mask_width = get_list_item (mask_data, unsigned short int);

  000e6	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  000e9	83 c0 02	 add	 eax, 2
  000ec	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax
  000ef	8b 4d 0c	 mov	 ecx, DWORD PTR _mask_data$[ebp]
  000f2	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  000f6	89 55 f0	 mov	 DWORD PTR _mask_width$[ebp], edx

; 813  : 
; 814  : 	mask_height = get_list_item (mask_data, unsigned short int);

  000f9	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  000fc	83 c0 02	 add	 eax, 2
  000ff	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax
  00102	8b 4d 0c	 mov	 ecx, DWORD PTR _mask_data$[ebp]
  00105	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00109	89 55 ec	 mov	 DWORD PTR _mask_height$[ebp], edx

; 815  : 
; 816  : 	mask_data += s_x + (s_y * mask_width);

  0010c	8b 45 24	 mov	 eax, DWORD PTR _s_y$[ebp]
  0010f	0f af 45 f0	 imul	 eax, DWORD PTR _mask_width$[ebp]
  00113	03 45 20	 add	 eax, DWORD PTR _s_x$[ebp]
  00116	03 45 0c	 add	 eax, DWORD PTR _mask_data$[ebp]
  00119	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax

; 817  : 
; 818  : 	//
; 819  : 	// screen
; 820  : 	//
; 821  : 
; 822  : 	screen_one_add_on = get_screen_pixel_width (active_screen);

  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?get_screen_pixel_width@@YGHPAUSCREEN@@@Z ; get_screen_pixel_width
  00127	89 45 e4	 mov	 DWORD PTR _screen_one_add_on$[ebp], eax

; 823  : 
; 824  : 	screen_add_on = screen_pitch - (t_dx * screen_one_add_on);

  0012a	8b 45 18	 mov	 eax, DWORD PTR _t_dx$[ebp]
  0012d	0f af 45 e4	 imul	 eax, DWORD PTR _screen_one_add_on$[ebp]
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _screen_pitch$[ebp]
  00134	2b c8		 sub	 ecx, eax
  00136	89 4d e8	 mov	 DWORD PTR _screen_add_on$[ebp], ecx

; 825  : 
; 826  : 	screen_data += (t_x * screen_one_add_on) + (t_y * screen_pitch);

  00139	8b 45 10	 mov	 eax, DWORD PTR _t_x$[ebp]
  0013c	0f af 45 e4	 imul	 eax, DWORD PTR _screen_one_add_on$[ebp]
  00140	8b 4d 14	 mov	 ecx, DWORD PTR _t_y$[ebp]
  00143	0f af 4d fc	 imul	 ecx, DWORD PTR _screen_pitch$[ebp]
  00147	03 4d c8	 add	 ecx, DWORD PTR _screen_data$[ebp]
  0014a	03 c8		 add	 ecx, eax
  0014c	89 4d c8	 mov	 DWORD PTR _screen_data$[ebp], ecx

; 827  : 
; 828  : 	//
; 829  : 	// deltas
; 830  : 	//
; 831  : 
; 832  : 	dx = ( s_dx << 16 ) / t_dx;

  0014f	8b 45 28	 mov	 eax, DWORD PTR _s_dx$[ebp]
  00152	c1 e0 10	 shl	 eax, 16			; 00000010H
  00155	99		 cdq
  00156	f7 7d 18	 idiv	 DWORD PTR _t_dx$[ebp]
  00159	89 45 d0	 mov	 DWORD PTR _dx$[ebp], eax

; 833  : 	dy = ( s_dy << 16 ) / t_dy;

  0015c	8b 45 2c	 mov	 eax, DWORD PTR _s_dy$[ebp]
  0015f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00162	99		 cdq
  00163	f7 7d 1c	 idiv	 DWORD PTR _t_dy$[ebp]
  00166	89 45 cc	 mov	 DWORD PTR _dy$[ebp], eax

; 834  : 
; 835  : 	//
; 836  : 	// blit sprite
; 837  : 	//
; 838  : 
; 839  : 	y = 0;

  00169	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 840  : 	for (v_loop = t_dy; v_loop > 0; v_loop--)

  00170	8b 45 1c	 mov	 eax, DWORD PTR _t_dy$[ebp]
  00173	89 45 dc	 mov	 DWORD PTR _v_loop$[ebp], eax
  00176	eb 09		 jmp	 SHORT $LN4@blit_rgb_a
$LN2@blit_rgb_a:
  00178	8b 45 dc	 mov	 eax, DWORD PTR _v_loop$[ebp]
  0017b	83 e8 01	 sub	 eax, 1
  0017e	89 45 dc	 mov	 DWORD PTR _v_loop$[ebp], eax
$LN4@blit_rgb_a:
  00181	83 7d dc 00	 cmp	 DWORD PTR _v_loop$[ebp], 0
  00185	0f 8e 0d 01 00
	00		 jle	 $LN1@blit_rgb_a

; 841  : 	{
; 842  : 		x = 0;

  0018b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 843  : 		for (u_loop = t_dx; u_loop > 0; u_loop--)

  00192	8b 45 18	 mov	 eax, DWORD PTR _t_dx$[ebp]
  00195	89 45 e0	 mov	 DWORD PTR _u_loop$[ebp], eax
  00198	eb 09		 jmp	 SHORT $LN7@blit_rgb_a
$LN5@blit_rgb_a:
  0019a	8b 45 e0	 mov	 eax, DWORD PTR _u_loop$[ebp]
  0019d	83 e8 01	 sub	 eax, 1
  001a0	89 45 e0	 mov	 DWORD PTR _u_loop$[ebp], eax
$LN7@blit_rgb_a:
  001a3	83 7d e0 00	 cmp	 DWORD PTR _u_loop$[ebp], 0
  001a7	0f 8e d4 00 00
	00		 jle	 $LN6@blit_rgb_a

; 844  : 		{
; 845  : 			if (mask_data[(y >> 16) * mask_width + (x >> 16)] == mask_value)

  001ad	8b 45 d4	 mov	 eax, DWORD PTR _y$[ebp]
  001b0	c1 f8 10	 sar	 eax, 16			; 00000010H
  001b3	0f af 45 f0	 imul	 eax, DWORD PTR _mask_width$[ebp]
  001b7	8b 4d d8	 mov	 ecx, DWORD PTR _x$[ebp]
  001ba	c1 f9 10	 sar	 ecx, 16			; 00000010H
  001bd	03 4d 0c	 add	 ecx, DWORD PTR _mask_data$[ebp]
  001c0	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  001c4	0f b6 45 30	 movzx	 eax, BYTE PTR _mask_value$[ebp]
  001c8	3b d0		 cmp	 edx, eax
  001ca	0f 85 9a 00 00
	00		 jne	 $LN12@blit_rgb_a

; 846  : 			{
; 847  : 				col = get_user_rgb_colour_value (*(rgb_packed *)(rgb_data + (y >> 16) * rgb_width + (x >> 16) * sizeof (rgb_packed)));

  001d0	8b 45 d4	 mov	 eax, DWORD PTR _y$[ebp]
  001d3	c1 f8 10	 sar	 eax, 16			; 00000010H
  001d6	0f af 45 f8	 imul	 eax, DWORD PTR _rgb_width$[ebp]
  001da	03 45 08	 add	 eax, DWORD PTR _rgb_data$[ebp]
  001dd	8b 4d d8	 mov	 ecx, DWORD PTR _x$[ebp]
  001e0	c1 f9 10	 sar	 ecx, 16			; 00000010H
  001e3	0f b7 14 48	 movzx	 edx, WORD PTR [eax+ecx*2]
  001e7	52		 push	 edx
  001e8	e8 00 00 00 00	 call	 ?get_user_rgb_colour_value@@YG?AUREAL_COLOUR@@G@Z ; get_user_rgb_colour_value
  001ed	89 45 80	 mov	 DWORD PTR $T1[ebp], eax
  001f0	8b 45 80	 mov	 eax, DWORD PTR $T1[ebp]
  001f3	89 45 c4	 mov	 DWORD PTR _col$[ebp], eax

; 848  : 
; 849  : 				col.a = 255;

  001f6	c6 45 c7 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 850  : 
; 851  : 				if (screen_one_add_on == 2)

  001fa	83 7d e4 02	 cmp	 DWORD PTR _screen_one_add_on$[ebp], 2
  001fe	75 62		 jne	 SHORT $LN13@blit_rgb_a

; 852  : 					*(rgb_packed *)screen_data = get_packed_colour (col);

  00200	0f b6 45 c6	 movzx	 eax, BYTE PTR _col$[ebp+2]
  00204	c1 e0 18	 shl	 eax, 24			; 00000018H
  00207	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  0020d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00213	d3 e8		 shr	 eax, cl
  00215	0f b6 55 c5	 movzx	 edx, BYTE PTR _col$[ebp+1]
  00219	c1 e2 18	 shl	 edx, 24			; 00000018H
  0021c	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00222	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00228	d3 ea		 shr	 edx, cl
  0022a	0b c2		 or	 eax, edx
  0022c	0f b6 55 c4	 movzx	 edx, BYTE PTR _col$[ebp]
  00230	c1 e2 18	 shl	 edx, 24			; 00000018H
  00233	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  00239	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  0023f	d3 ea		 shr	 edx, cl
  00241	0b c2		 or	 eax, edx
  00243	0f b6 55 c7	 movzx	 edx, BYTE PTR _col$[ebp+3]
  00247	c1 e2 18	 shl	 edx, 24			; 00000018H
  0024a	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  00250	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  00256	d3 ea		 shr	 edx, cl
  00258	0b c2		 or	 eax, edx
  0025a	8b 4d c8	 mov	 ecx, DWORD PTR _screen_data$[ebp]
  0025d	66 89 01	 mov	 WORD PTR [ecx], ax

; 853  : 				else

  00260	eb 08		 jmp	 SHORT $LN12@blit_rgb_a
$LN13@blit_rgb_a:

; 854  : 					*(ULONG *)screen_data = col.colour;

  00262	8b 45 c8	 mov	 eax, DWORD PTR _screen_data$[ebp]
  00265	8b 4d c4	 mov	 ecx, DWORD PTR _col$[ebp]
  00268	89 08		 mov	 DWORD PTR [eax], ecx
$LN12@blit_rgb_a:

; 855  : 			}
; 856  : 
; 857  : 			screen_data += screen_one_add_on;

  0026a	8b 45 c8	 mov	 eax, DWORD PTR _screen_data$[ebp]
  0026d	03 45 e4	 add	 eax, DWORD PTR _screen_one_add_on$[ebp]
  00270	89 45 c8	 mov	 DWORD PTR _screen_data$[ebp], eax

; 858  : 
; 859  : 			x += dx;

  00273	8b 45 d8	 mov	 eax, DWORD PTR _x$[ebp]
  00276	03 45 d0	 add	 eax, DWORD PTR _dx$[ebp]
  00279	89 45 d8	 mov	 DWORD PTR _x$[ebp], eax

; 860  : 		}

  0027c	e9 19 ff ff ff	 jmp	 $LN5@blit_rgb_a
$LN6@blit_rgb_a:

; 861  : 
; 862  : 		screen_data += screen_add_on;

  00281	8b 45 c8	 mov	 eax, DWORD PTR _screen_data$[ebp]
  00284	03 45 e8	 add	 eax, DWORD PTR _screen_add_on$[ebp]
  00287	89 45 c8	 mov	 DWORD PTR _screen_data$[ebp], eax

; 863  : 
; 864  : 		y += dy;

  0028a	8b 45 d4	 mov	 eax, DWORD PTR _y$[ebp]
  0028d	03 45 cc	 add	 eax, DWORD PTR _dy$[ebp]
  00290	89 45 d4	 mov	 DWORD PTR _y$[ebp], eax

; 865  : 	}

  00293	e9 e0 fe ff ff	 jmp	 $LN2@blit_rgb_a
$LN1@blit_rgb_a:

; 866  : #endif
; 867  : }

  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	5b		 pop	 ebx
  0029b	8b e5		 mov	 esp, ebp
  0029d	5d		 pop	 ebp
  0029e	c2 2c 00	 ret	 44			; 0000002cH
?blit_rgb_alpha_masked_sprite_zero_mask_value_scaled@@YGXPBE0HHHHHHHHE@Z ENDP ; blit_rgb_alpha_masked_sprite_zero_mask_value_scaled
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z
_TEXT	SEGMENT
$T1 = -124						; size = 4
_col$ = -56						; size = 4
_mask_value$ = -49					; size = 1
_screen_data$ = -48					; size = 4
_v_loop$ = -44						; size = 4
_u_loop$ = -40						; size = 4
_screen_one_add_on$ = -36				; size = 4
_screen_add_on$ = -32					; size = 4
_mask_add_on$ = -28					; size = 4
_mask_height$ = -24					; size = 4
_mask_width$ = -20					; size = 4
_rgb_add_on$ = -16					; size = 4
_rgb_height$ = -12					; size = 4
_rgb_width$ = -8					; size = 4
_screen_pitch$ = -4					; size = 4
_rgb_data$ = 8						; size = 4
_mask_data$ = 12					; size = 4
_sprite_data$ = 16					; size = 4
_user_screen$ = 20					; size = 4
?blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z PROC ; blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture, COMDAT

; 640  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 641  : 	int
; 642  : 		screen_pitch,
; 643  : 		rgb_width,
; 644  : 		rgb_height,
; 645  : 		rgb_add_on,
; 646  : 		mask_width,
; 647  : 		mask_height,
; 648  : 		mask_add_on,
; 649  : 		screen_add_on,
; 650  : 		screen_one_add_on,
; 651  : 		u_loop,
; 652  : 		v_loop;
; 653  : 
; 654  : 	unsigned char
; 655  : 		*screen_data,
; 656  : 		mask_value;
; 657  : 
; 658  : 	rgb_colour
; 659  : 		col;
; 660  : 
; 661  : 	ASSERT (rgb_data);

  00009	83 7d 08 00	 cmp	 DWORD PTR _rgb_data$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@blit_rgb_a
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z@4JA
  00014	83 c0 15	 add	 eax, 21			; 00000015H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08DMEKJFMP@rgb_data@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@blit_rgb_a:

; 662  : 
; 663  : 	ASSERT (mask_data);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _mask_data$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN9@blit_rgb_a
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z@4JA
  00032	83 c0 17	 add	 eax, 23			; 00000017H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_09OFPEGCGB@mask_data@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@blit_rgb_a:

; 664  : 
; 665  : 	ASSERT (sprite_data);

  00045	83 7d 10 00	 cmp	 DWORD PTR _sprite_data$[ebp], 0
  00049	75 18		 jne	 SHORT $LN10@blit_rgb_a
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z@4JA
  00050	83 c0 19	 add	 eax, 25			; 00000019H
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OHNKMHLG@sprite_data@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@blit_rgb_a:

; 666  : 
; 667  : 	ASSERT (user_screen);

  00063	83 7d 14 00	 cmp	 DWORD PTR _user_screen$[ebp], 0
  00067	75 18		 jne	 SHORT $LN11@blit_rgb_a
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z@4JA
  0006e	83 c0 1b	 add	 eax, 27			; 0000001bH
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FDPGHCLF@user_screen@
  0007c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@blit_rgb_a:

; 668  : 
; 669  : 	set_user_screen_pixel_format (user_screen);

  00081	8b 45 14	 mov	 eax, DWORD PTR _user_screen$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z ; set_user_screen_pixel_format

; 670  : 
; 671  : 	screen_pitch = get_screen_pitch (active_screen);

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00095	89 45 fc	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 672  : 
; 673  : 	screen_data = get_screen_data (active_screen);

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000a3	89 45 d0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 674  : 
; 675  : 	//
; 676  : 	// rgb data
; 677  : 	//
; 678  : 
; 679  : 	rgb_width = get_list_item (rgb_data, unsigned short int) * sizeof (rgb_packed);

  000a6	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  000a9	83 c0 02	 add	 eax, 2
  000ac	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _rgb_data$[ebp]
  000b2	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  000b6	d1 e2		 shl	 edx, 1
  000b8	89 55 f8	 mov	 DWORD PTR _rgb_width$[ebp], edx

; 680  : 
; 681  : 	rgb_height = get_list_item (rgb_data, unsigned short int);

  000bb	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  000be	83 c0 02	 add	 eax, 2
  000c1	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _rgb_data$[ebp]
  000c7	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  000cb	89 55 f4	 mov	 DWORD PTR _rgb_height$[ebp], edx

; 682  : 
; 683  : 	rgb_add_on = rgb_width - (sprite_data->width * sizeof (rgb_packed));

  000ce	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  000d1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d4	d1 e1		 shl	 ecx, 1
  000d6	8b 55 f8	 mov	 edx, DWORD PTR _rgb_width$[ebp]
  000d9	2b d1		 sub	 edx, ecx
  000db	89 55 f0	 mov	 DWORD PTR _rgb_add_on$[ebp], edx

; 684  : 
; 685  : 	rgb_data += (sprite_data->u * sizeof (rgb_packed)) + (sprite_data->v * rgb_width);

  000de	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  000e1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e4	8b 55 10	 mov	 edx, DWORD PTR _sprite_data$[ebp]
  000e7	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000ea	0f af 45 f8	 imul	 eax, DWORD PTR _rgb_width$[ebp]
  000ee	03 45 08	 add	 eax, DWORD PTR _rgb_data$[ebp]
  000f1	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  000f4	89 4d 08	 mov	 DWORD PTR _rgb_data$[ebp], ecx

; 686  : 
; 687  : 	//
; 688  : 	// mask data
; 689  : 	//
; 690  : 
; 691  : 	mask_width = get_list_item (mask_data, unsigned short int);

  000f7	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  000fa	83 c0 02	 add	 eax, 2
  000fd	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax
  00100	8b 4d 0c	 mov	 ecx, DWORD PTR _mask_data$[ebp]
  00103	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00107	89 55 ec	 mov	 DWORD PTR _mask_width$[ebp], edx

; 692  : 
; 693  : 	mask_height = get_list_item (mask_data, unsigned short int);

  0010a	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  0010d	83 c0 02	 add	 eax, 2
  00110	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax
  00113	8b 4d 0c	 mov	 ecx, DWORD PTR _mask_data$[ebp]
  00116	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  0011a	89 55 e8	 mov	 DWORD PTR _mask_height$[ebp], edx

; 694  : 
; 695  : 	mask_add_on = mask_width - sprite_data->width;

  0011d	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  00120	8b 4d ec	 mov	 ecx, DWORD PTR _mask_width$[ebp]
  00123	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00126	89 4d e4	 mov	 DWORD PTR _mask_add_on$[ebp], ecx

; 696  : 
; 697  : 	mask_data += sprite_data->u + (sprite_data->v * mask_width);

  00129	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  0012c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0012f	0f af 4d ec	 imul	 ecx, DWORD PTR _mask_width$[ebp]
  00133	8b 55 10	 mov	 edx, DWORD PTR _sprite_data$[ebp]
  00136	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00139	03 c1		 add	 eax, ecx
  0013b	03 45 0c	 add	 eax, DWORD PTR _mask_data$[ebp]
  0013e	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax

; 698  : 
; 699  : 	mask_value = sprite_data->mask_value;

  00141	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  00144	8a 48 18	 mov	 cl, BYTE PTR [eax+24]
  00147	88 4d cf	 mov	 BYTE PTR _mask_value$[ebp], cl

; 700  : 
; 701  : 	//
; 702  : 	// screen
; 703  : 	//
; 704  : 
; 705  : 	screen_one_add_on = get_screen_pixel_width (active_screen);

  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?get_screen_pixel_width@@YGHPAUSCREEN@@@Z ; get_screen_pixel_width
  00155	89 45 dc	 mov	 DWORD PTR _screen_one_add_on$[ebp], eax

; 706  : 	screen_add_on = screen_pitch - (sprite_data->width * screen_one_add_on);

  00158	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  0015b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0015e	0f af 4d dc	 imul	 ecx, DWORD PTR _screen_one_add_on$[ebp]
  00162	8b 55 fc	 mov	 edx, DWORD PTR _screen_pitch$[ebp]
  00165	2b d1		 sub	 edx, ecx
  00167	89 55 e0	 mov	 DWORD PTR _screen_add_on$[ebp], edx

; 707  : 
; 708  : 	screen_data += (sprite_data->x * screen_one_add_on) + (sprite_data->y * screen_pitch);

  0016a	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  0016d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016f	0f af 4d dc	 imul	 ecx, DWORD PTR _screen_one_add_on$[ebp]
  00173	8b 55 10	 mov	 edx, DWORD PTR _sprite_data$[ebp]
  00176	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00179	0f af 45 fc	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0017d	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00180	03 c1		 add	 eax, ecx
  00182	89 45 d0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 709  : 
; 710  : 	//
; 711  : 	// blit sprite
; 712  : 	//
; 713  : 
; 714  : 	for (v_loop = sprite_data->height; v_loop > 0; v_loop--)

  00185	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  00188	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0018b	89 4d d4	 mov	 DWORD PTR _v_loop$[ebp], ecx
  0018e	eb 09		 jmp	 SHORT $LN4@blit_rgb_a
$LN2@blit_rgb_a:
  00190	8b 45 d4	 mov	 eax, DWORD PTR _v_loop$[ebp]
  00193	83 e8 01	 sub	 eax, 1
  00196	89 45 d4	 mov	 DWORD PTR _v_loop$[ebp], eax
$LN4@blit_rgb_a:
  00199	83 7d d4 00	 cmp	 DWORD PTR _v_loop$[ebp], 0
  0019d	0f 8e f5 00 00
	00		 jle	 $LN1@blit_rgb_a

; 715  : 	{
; 716  : 		for (u_loop = sprite_data->width; u_loop > 0; u_loop--)

  001a3	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  001a6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001a9	89 4d d8	 mov	 DWORD PTR _u_loop$[ebp], ecx
  001ac	eb 09		 jmp	 SHORT $LN7@blit_rgb_a
$LN5@blit_rgb_a:
  001ae	8b 45 d8	 mov	 eax, DWORD PTR _u_loop$[ebp]
  001b1	83 e8 01	 sub	 eax, 1
  001b4	89 45 d8	 mov	 DWORD PTR _u_loop$[ebp], eax
$LN7@blit_rgb_a:
  001b7	83 7d d8 00	 cmp	 DWORD PTR _u_loop$[ebp], 0
  001bb	0f 8e b7 00 00
	00		 jle	 $LN6@blit_rgb_a

; 717  : 		{
; 718  : 			if (*mask_data)

  001c1	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  001c4	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001c7	85 c9		 test	 ecx, ecx
  001c9	0f 84 89 00 00
	00		 je	 $LN12@blit_rgb_a

; 719  : 			{
; 720  : 				col = get_user_rgb_colour_value (*(rgb_packed *)rgb_data);

  001cf	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  001d2	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001d5	51		 push	 ecx
  001d6	e8 00 00 00 00	 call	 ?get_user_rgb_colour_value@@YG?AUREAL_COLOUR@@G@Z ; get_user_rgb_colour_value
  001db	89 45 84	 mov	 DWORD PTR $T1[ebp], eax
  001de	8b 55 84	 mov	 edx, DWORD PTR $T1[ebp]
  001e1	89 55 c8	 mov	 DWORD PTR _col$[ebp], edx

; 721  : 
; 722  : 				col.a = 255;

  001e4	c6 45 cb ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 723  : 
; 724  : 				if (screen_one_add_on == 2)

  001e8	83 7d dc 02	 cmp	 DWORD PTR _screen_one_add_on$[ebp], 2
  001ec	75 62		 jne	 SHORT $LN13@blit_rgb_a

; 725  : 					*(rgb_packed *)screen_data = get_packed_colour (col);

  001ee	0f b6 45 ca	 movzx	 eax, BYTE PTR _col$[ebp+2]
  001f2	c1 e0 18	 shl	 eax, 24			; 00000018H
  001f5	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  001fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00201	d3 e8		 shr	 eax, cl
  00203	0f b6 55 c9	 movzx	 edx, BYTE PTR _col$[ebp+1]
  00207	c1 e2 18	 shl	 edx, 24			; 00000018H
  0020a	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00210	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00216	d3 ea		 shr	 edx, cl
  00218	0b c2		 or	 eax, edx
  0021a	0f b6 55 c8	 movzx	 edx, BYTE PTR _col$[ebp]
  0021e	c1 e2 18	 shl	 edx, 24			; 00000018H
  00221	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  00227	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  0022d	d3 ea		 shr	 edx, cl
  0022f	0b c2		 or	 eax, edx
  00231	0f b6 55 cb	 movzx	 edx, BYTE PTR _col$[ebp+3]
  00235	c1 e2 18	 shl	 edx, 24			; 00000018H
  00238	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  0023e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  00244	d3 ea		 shr	 edx, cl
  00246	0b c2		 or	 eax, edx
  00248	8b 4d d0	 mov	 ecx, DWORD PTR _screen_data$[ebp]
  0024b	66 89 01	 mov	 WORD PTR [ecx], ax

; 726  : 				else

  0024e	eb 08		 jmp	 SHORT $LN12@blit_rgb_a
$LN13@blit_rgb_a:

; 727  : 					*(ULONG *)screen_data = col.colour;

  00250	8b 45 d0	 mov	 eax, DWORD PTR _screen_data$[ebp]
  00253	8b 4d c8	 mov	 ecx, DWORD PTR _col$[ebp]
  00256	89 08		 mov	 DWORD PTR [eax], ecx
$LN12@blit_rgb_a:

; 728  : 			}
; 729  : 
; 730  : 			rgb_data += sizeof (rgb_packed);

  00258	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  0025b	83 c0 02	 add	 eax, 2
  0025e	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax

; 731  : 
; 732  : 			mask_data++;

  00261	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  00264	83 c0 01	 add	 eax, 1
  00267	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax

; 733  : 
; 734  : 			screen_data += screen_one_add_on;

  0026a	8b 45 d0	 mov	 eax, DWORD PTR _screen_data$[ebp]
  0026d	03 45 dc	 add	 eax, DWORD PTR _screen_one_add_on$[ebp]
  00270	89 45 d0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 735  : 		}

  00273	e9 36 ff ff ff	 jmp	 $LN5@blit_rgb_a
$LN6@blit_rgb_a:

; 736  : 
; 737  : 		rgb_data += rgb_add_on;

  00278	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  0027b	03 45 f0	 add	 eax, DWORD PTR _rgb_add_on$[ebp]
  0027e	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax

; 738  : 
; 739  : 		mask_data += mask_add_on;

  00281	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  00284	03 45 e4	 add	 eax, DWORD PTR _mask_add_on$[ebp]
  00287	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax

; 740  : 
; 741  : 		screen_data += screen_add_on;

  0028a	8b 45 d0	 mov	 eax, DWORD PTR _screen_data$[ebp]
  0028d	03 45 e0	 add	 eax, DWORD PTR _screen_add_on$[ebp]
  00290	89 45 d0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 742  : 	}

  00293	e9 f8 fe ff ff	 jmp	 $LN2@blit_rgb_a
$LN1@blit_rgb_a:

; 743  : }

  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	5b		 pop	 ebx
  0029b	8b e5		 mov	 esp, ebp
  0029d	5d		 pop	 ebp
  0029e	c2 10 00	 ret	 16			; 00000010H
?blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z ENDP ; blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z
_TEXT	SEGMENT
_mask_value$ = -45					; size = 1
_screen_data$ = -44					; size = 4
_v_loop$ = -40						; size = 4
_u_loop$ = -36						; size = 4
_screen_add_on$ = -32					; size = 4
_mask_add_on$ = -28					; size = 4
_mask_height$ = -24					; size = 4
_mask_width$ = -20					; size = 4
_rgb_add_on$ = -16					; size = 4
_rgb_height$ = -12					; size = 4
_rgb_width$ = -8					; size = 4
_screen_pitch$ = -4					; size = 4
_rgb_data$ = 8						; size = 4
_mask_data$ = 12					; size = 4
_sprite_data$ = 16					; size = 4
?blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z PROC ; blit_rgb_alpha_masked_sprite_zero_mask_value, COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 547  : 	int
; 548  : 		screen_pitch,
; 549  : 		rgb_width,
; 550  : 		rgb_height,
; 551  : 		rgb_add_on,
; 552  : 		mask_width,
; 553  : 		mask_height,
; 554  : 		mask_add_on,
; 555  : 		screen_add_on,
; 556  : 		u_loop,
; 557  : 		v_loop;
; 558  : 
; 559  : 	unsigned char
; 560  : 		*screen_data,
; 561  : 		mask_value;
; 562  : 
; 563  : 	ASSERT (rgb_data);

  00009	83 7d 08 00	 cmp	 DWORD PTR _rgb_data$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@blit_rgb_a
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA
  00014	83 c0 11	 add	 eax, 17			; 00000011H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08DMEKJFMP@rgb_data@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@blit_rgb_a:

; 564  : 
; 565  : 	ASSERT (mask_data);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _mask_data$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN9@blit_rgb_a
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA
  00032	83 c0 13	 add	 eax, 19			; 00000013H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_09OFPEGCGB@mask_data@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@blit_rgb_a:

; 566  : 
; 567  : 	ASSERT (sprite_data);

  00045	83 7d 10 00	 cmp	 DWORD PTR _sprite_data$[ebp], 0
  00049	75 18		 jne	 SHORT $LN10@blit_rgb_a
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA
  00050	83 c0 15	 add	 eax, 21			; 00000015H
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OHNKMHLG@sprite_data@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@blit_rgb_a:

; 568  : 
; 569  : 	screen_pitch = get_screen_pitch (active_screen);

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0006e	89 45 fc	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 570  : 
; 571  : 	screen_data = get_screen_data (active_screen);

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0007c	89 45 d4	 mov	 DWORD PTR _screen_data$[ebp], eax

; 572  : 
; 573  : 	//
; 574  : 	// rgb data
; 575  : 	//
; 576  : 
; 577  : 	rgb_width = get_list_item (rgb_data, unsigned short int) * sizeof (rgb_packed);

  0007f	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  00082	83 c0 02	 add	 eax, 2
  00085	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _rgb_data$[ebp]
  0008b	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  0008f	d1 e2		 shl	 edx, 1
  00091	89 55 f8	 mov	 DWORD PTR _rgb_width$[ebp], edx

; 578  : 
; 579  : 	rgb_height = get_list_item (rgb_data, unsigned short int);

  00094	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  00097	83 c0 02	 add	 eax, 2
  0009a	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _rgb_data$[ebp]
  000a0	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  000a4	89 55 f4	 mov	 DWORD PTR _rgb_height$[ebp], edx

; 580  : 
; 581  : 	rgb_add_on = rgb_width - (sprite_data->width * sizeof (rgb_packed));

  000a7	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  000aa	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ad	d1 e1		 shl	 ecx, 1
  000af	8b 55 f8	 mov	 edx, DWORD PTR _rgb_width$[ebp]
  000b2	2b d1		 sub	 edx, ecx
  000b4	89 55 f0	 mov	 DWORD PTR _rgb_add_on$[ebp], edx

; 582  : 
; 583  : 	rgb_data += (sprite_data->u * sizeof (rgb_packed)) + (sprite_data->v * rgb_width);

  000b7	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  000ba	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000bd	8b 55 10	 mov	 edx, DWORD PTR _sprite_data$[ebp]
  000c0	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000c3	0f af 45 f8	 imul	 eax, DWORD PTR _rgb_width$[ebp]
  000c7	03 45 08	 add	 eax, DWORD PTR _rgb_data$[ebp]
  000ca	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  000cd	89 4d 08	 mov	 DWORD PTR _rgb_data$[ebp], ecx

; 584  : 
; 585  : 	//
; 586  : 	// mask data
; 587  : 	//
; 588  : 
; 589  : 	mask_width = get_list_item (mask_data, unsigned short int);

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  000d3	83 c0 02	 add	 eax, 2
  000d6	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR _mask_data$[ebp]
  000dc	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  000e0	89 55 ec	 mov	 DWORD PTR _mask_width$[ebp], edx

; 590  : 
; 591  : 	mask_height = get_list_item (mask_data, unsigned short int);

  000e3	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  000e6	83 c0 02	 add	 eax, 2
  000e9	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _mask_data$[ebp]
  000ef	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  000f3	89 55 e8	 mov	 DWORD PTR _mask_height$[ebp], edx

; 592  : 
; 593  : 	mask_add_on = mask_width - sprite_data->width;

  000f6	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  000f9	8b 4d ec	 mov	 ecx, DWORD PTR _mask_width$[ebp]
  000fc	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000ff	89 4d e4	 mov	 DWORD PTR _mask_add_on$[ebp], ecx

; 594  : 
; 595  : 	mask_data += sprite_data->u + (sprite_data->v * mask_width);

  00102	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  00105	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00108	0f af 4d ec	 imul	 ecx, DWORD PTR _mask_width$[ebp]
  0010c	8b 55 10	 mov	 edx, DWORD PTR _sprite_data$[ebp]
  0010f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00112	03 c1		 add	 eax, ecx
  00114	03 45 0c	 add	 eax, DWORD PTR _mask_data$[ebp]
  00117	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax

; 596  : 
; 597  : 	mask_value = sprite_data->mask_value;

  0011a	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  0011d	8a 48 18	 mov	 cl, BYTE PTR [eax+24]
  00120	88 4d d3	 mov	 BYTE PTR _mask_value$[ebp], cl

; 598  : 
; 599  : 	//
; 600  : 	// screen
; 601  : 	//
; 602  : 
; 603  : 	screen_add_on = screen_pitch - (sprite_data->width * sizeof (rgb_packed));

  00123	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  00126	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00129	d1 e1		 shl	 ecx, 1
  0012b	8b 55 fc	 mov	 edx, DWORD PTR _screen_pitch$[ebp]
  0012e	2b d1		 sub	 edx, ecx
  00130	89 55 e0	 mov	 DWORD PTR _screen_add_on$[ebp], edx

; 604  : 
; 605  : 	screen_data += (sprite_data->x * sizeof (rgb_packed)) + (sprite_data->y * screen_pitch);

  00133	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  00136	8b 08		 mov	 ecx, DWORD PTR [eax]
  00138	8b 55 10	 mov	 edx, DWORD PTR _sprite_data$[ebp]
  0013b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0013e	0f af 45 fc	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00142	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00145	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00148	89 4d d4	 mov	 DWORD PTR _screen_data$[ebp], ecx

; 606  : 
; 607  : 	//
; 608  : 	// blit sprite
; 609  : 	//
; 610  : 
; 611  : 	for (v_loop = sprite_data->height; v_loop > 0; v_loop--)

  0014b	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  0014e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00151	89 4d d8	 mov	 DWORD PTR _v_loop$[ebp], ecx
  00154	eb 09		 jmp	 SHORT $LN4@blit_rgb_a
$LN2@blit_rgb_a:
  00156	8b 45 d8	 mov	 eax, DWORD PTR _v_loop$[ebp]
  00159	83 e8 01	 sub	 eax, 1
  0015c	89 45 d8	 mov	 DWORD PTR _v_loop$[ebp], eax
$LN4@blit_rgb_a:
  0015f	83 7d d8 00	 cmp	 DWORD PTR _v_loop$[ebp], 0
  00163	7e 6a		 jle	 SHORT $LN1@blit_rgb_a

; 612  : 	{
; 613  : 		for (u_loop = sprite_data->width; u_loop > 0; u_loop--)

  00165	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  00168	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0016b	89 4d dc	 mov	 DWORD PTR _u_loop$[ebp], ecx
  0016e	eb 09		 jmp	 SHORT $LN7@blit_rgb_a
$LN5@blit_rgb_a:
  00170	8b 45 dc	 mov	 eax, DWORD PTR _u_loop$[ebp]
  00173	83 e8 01	 sub	 eax, 1
  00176	89 45 dc	 mov	 DWORD PTR _u_loop$[ebp], eax
$LN7@blit_rgb_a:
  00179	83 7d dc 00	 cmp	 DWORD PTR _u_loop$[ebp], 0
  0017d	7e 33		 jle	 SHORT $LN6@blit_rgb_a

; 614  : 		{
; 615  : 			if (*mask_data)

  0017f	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  00182	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00185	85 c9		 test	 ecx, ecx
  00187	74 0c		 je	 SHORT $LN11@blit_rgb_a

; 616  : 			{
; 617  : 				*(rgb_packed *)screen_data = *(rgb_packed *)rgb_data;

  00189	8b 45 d4	 mov	 eax, DWORD PTR _screen_data$[ebp]
  0018c	8b 4d 08	 mov	 ecx, DWORD PTR _rgb_data$[ebp]
  0018f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00192	66 89 10	 mov	 WORD PTR [eax], dx
$LN11@blit_rgb_a:

; 618  : 			}
; 619  : 
; 620  : 			rgb_data += sizeof (rgb_packed);

  00195	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  00198	83 c0 02	 add	 eax, 2
  0019b	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax

; 621  : 
; 622  : 			mask_data++;

  0019e	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  001a1	83 c0 01	 add	 eax, 1
  001a4	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax

; 623  : 
; 624  : 			screen_data += sizeof (rgb_packed);

  001a7	8b 45 d4	 mov	 eax, DWORD PTR _screen_data$[ebp]
  001aa	83 c0 02	 add	 eax, 2
  001ad	89 45 d4	 mov	 DWORD PTR _screen_data$[ebp], eax

; 625  : 		}

  001b0	eb be		 jmp	 SHORT $LN5@blit_rgb_a
$LN6@blit_rgb_a:

; 626  : 
; 627  : 		rgb_data += rgb_add_on;

  001b2	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  001b5	03 45 f0	 add	 eax, DWORD PTR _rgb_add_on$[ebp]
  001b8	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax

; 628  : 
; 629  : 		mask_data += mask_add_on;

  001bb	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  001be	03 45 e4	 add	 eax, DWORD PTR _mask_add_on$[ebp]
  001c1	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax

; 630  : 
; 631  : 		screen_data += screen_add_on;

  001c4	8b 45 d4	 mov	 eax, DWORD PTR _screen_data$[ebp]
  001c7	03 45 e0	 add	 eax, DWORD PTR _screen_add_on$[ebp]
  001ca	89 45 d4	 mov	 DWORD PTR _screen_data$[ebp], eax

; 632  : 	}

  001cd	eb 87		 jmp	 SHORT $LN2@blit_rgb_a
$LN1@blit_rgb_a:

; 633  : }

  001cf	5f		 pop	 edi
  001d0	5e		 pop	 esi
  001d1	5b		 pop	 ebx
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c2 0c 00	 ret	 12			; 0000000cH
?blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z ENDP ; blit_rgb_alpha_masked_sprite_zero_mask_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z
_TEXT	SEGMENT
_mask_value$ = -45					; size = 1
_screen_data$ = -44					; size = 4
_v_loop$ = -40						; size = 4
_u_loop$ = -36						; size = 4
_screen_add_on$ = -32					; size = 4
_mask_add_on$ = -28					; size = 4
_mask_height$ = -24					; size = 4
_mask_width$ = -20					; size = 4
_rgb_add_on$ = -16					; size = 4
_rgb_height$ = -12					; size = 4
_rgb_width$ = -8					; size = 4
_screen_pitch$ = -4					; size = 4
_rgb_data$ = 8						; size = 4
_mask_data$ = 12					; size = 4
_sprite_data$ = 16					; size = 4
?blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z PROC ; blit_rgb_alpha_masked_sprite, COMDAT

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 451  : 	int
; 452  : 		screen_pitch,
; 453  : 		rgb_width,
; 454  : 		rgb_height,
; 455  : 		rgb_add_on,
; 456  : 		mask_width,
; 457  : 		mask_height,
; 458  : 		mask_add_on,
; 459  : 		screen_add_on,
; 460  : 		u_loop,
; 461  : 		v_loop;
; 462  : 
; 463  : 	unsigned char
; 464  : 		*screen_data,
; 465  : 		mask_value;
; 466  : 
; 467  : 	ASSERT (rgb_data);

  00009	83 7d 08 00	 cmp	 DWORD PTR _rgb_data$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@blit_rgb_a
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA
  00014	83 c0 11	 add	 eax, 17			; 00000011H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08DMEKJFMP@rgb_data@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@blit_rgb_a:

; 468  : 
; 469  : 	ASSERT (mask_data);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _mask_data$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN9@blit_rgb_a
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA
  00032	83 c0 13	 add	 eax, 19			; 00000013H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_09OFPEGCGB@mask_data@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@blit_rgb_a:

; 470  : 
; 471  : 	ASSERT (sprite_data);

  00045	83 7d 10 00	 cmp	 DWORD PTR _sprite_data$[ebp], 0
  00049	75 18		 jne	 SHORT $LN10@blit_rgb_a
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA
  00050	83 c0 15	 add	 eax, 21			; 00000015H
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OHNKMHLG@sprite_data@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@blit_rgb_a:

; 472  : 
; 473  : 	ASSERT ( active_screen->pixel_length <= 16 );

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00068	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0006c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0006f	7e 18		 jle	 SHORT $LN11@blit_rgb_a
  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z@4JA
  00076	83 c0 17	 add	 eax, 23			; 00000017H
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@OOGLEADN@active_screen?9?$DOpixel_length?5?$DM?$DN?5@
  00084	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@blit_rgb_a:

; 474  : 
; 475  : 	screen_pitch = get_screen_pitch (active_screen);

  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00094	89 45 fc	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 476  : 
; 477  : 	screen_data = get_screen_data (active_screen);

  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000a2	89 45 d4	 mov	 DWORD PTR _screen_data$[ebp], eax

; 478  : 
; 479  : 	//
; 480  : 	// rgb data
; 481  : 	//
; 482  : 
; 483  : 	rgb_width = get_list_item (rgb_data, unsigned short int) * sizeof (rgb_packed);

  000a5	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  000a8	83 c0 02	 add	 eax, 2
  000ab	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _rgb_data$[ebp]
  000b1	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  000b5	d1 e2		 shl	 edx, 1
  000b7	89 55 f8	 mov	 DWORD PTR _rgb_width$[ebp], edx

; 484  : 
; 485  : 	rgb_height = get_list_item (rgb_data, unsigned short int);

  000ba	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  000bd	83 c0 02	 add	 eax, 2
  000c0	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax
  000c3	8b 4d 08	 mov	 ecx, DWORD PTR _rgb_data$[ebp]
  000c6	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  000ca	89 55 f4	 mov	 DWORD PTR _rgb_height$[ebp], edx

; 486  : 
; 487  : 	rgb_add_on = rgb_width - (sprite_data->width * sizeof (rgb_packed));

  000cd	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  000d0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d3	d1 e1		 shl	 ecx, 1
  000d5	8b 55 f8	 mov	 edx, DWORD PTR _rgb_width$[ebp]
  000d8	2b d1		 sub	 edx, ecx
  000da	89 55 f0	 mov	 DWORD PTR _rgb_add_on$[ebp], edx

; 488  : 
; 489  : 	rgb_data += (sprite_data->u * sizeof (rgb_packed)) + (sprite_data->v * rgb_width);

  000dd	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  000e0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e3	8b 55 10	 mov	 edx, DWORD PTR _sprite_data$[ebp]
  000e6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000e9	0f af 45 f8	 imul	 eax, DWORD PTR _rgb_width$[ebp]
  000ed	03 45 08	 add	 eax, DWORD PTR _rgb_data$[ebp]
  000f0	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  000f3	89 4d 08	 mov	 DWORD PTR _rgb_data$[ebp], ecx

; 490  : 
; 491  : 	//
; 492  : 	// mask data
; 493  : 	//
; 494  : 
; 495  : 	mask_width = get_list_item (mask_data, unsigned short int);

  000f6	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  000f9	83 c0 02	 add	 eax, 2
  000fc	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax
  000ff	8b 4d 0c	 mov	 ecx, DWORD PTR _mask_data$[ebp]
  00102	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00106	89 55 ec	 mov	 DWORD PTR _mask_width$[ebp], edx

; 496  : 
; 497  : 	mask_height = get_list_item (mask_data, unsigned short int);

  00109	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  0010c	83 c0 02	 add	 eax, 2
  0010f	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax
  00112	8b 4d 0c	 mov	 ecx, DWORD PTR _mask_data$[ebp]
  00115	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00119	89 55 e8	 mov	 DWORD PTR _mask_height$[ebp], edx

; 498  : 
; 499  : 	mask_add_on = mask_width - sprite_data->width;

  0011c	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  0011f	8b 4d ec	 mov	 ecx, DWORD PTR _mask_width$[ebp]
  00122	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00125	89 4d e4	 mov	 DWORD PTR _mask_add_on$[ebp], ecx

; 500  : 
; 501  : 	mask_data += sprite_data->u + (sprite_data->v * mask_width);

  00128	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  0012b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0012e	0f af 4d ec	 imul	 ecx, DWORD PTR _mask_width$[ebp]
  00132	8b 55 10	 mov	 edx, DWORD PTR _sprite_data$[ebp]
  00135	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00138	03 c1		 add	 eax, ecx
  0013a	03 45 0c	 add	 eax, DWORD PTR _mask_data$[ebp]
  0013d	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax

; 502  : 
; 503  : 	mask_value = sprite_data->mask_value;

  00140	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  00143	8a 48 18	 mov	 cl, BYTE PTR [eax+24]
  00146	88 4d d3	 mov	 BYTE PTR _mask_value$[ebp], cl

; 504  : 
; 505  : 	//
; 506  : 	// screen
; 507  : 	//
; 508  : 
; 509  : 	screen_add_on = screen_pitch - (sprite_data->width * sizeof (rgb_packed));

  00149	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  0014c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0014f	d1 e1		 shl	 ecx, 1
  00151	8b 55 fc	 mov	 edx, DWORD PTR _screen_pitch$[ebp]
  00154	2b d1		 sub	 edx, ecx
  00156	89 55 e0	 mov	 DWORD PTR _screen_add_on$[ebp], edx

; 510  : 
; 511  : 	screen_data += (sprite_data->x * sizeof (rgb_packed)) + (sprite_data->y * screen_pitch);

  00159	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  0015c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015e	8b 55 10	 mov	 edx, DWORD PTR _sprite_data$[ebp]
  00161	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00164	0f af 45 fc	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00168	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  0016b	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  0016e	89 4d d4	 mov	 DWORD PTR _screen_data$[ebp], ecx

; 512  : 
; 513  : 	//
; 514  : 	// blit sprite
; 515  : 	//
; 516  : 
; 517  : 	for (v_loop = sprite_data->height; v_loop > 0; v_loop--)

  00171	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  00174	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00177	89 4d d8	 mov	 DWORD PTR _v_loop$[ebp], ecx
  0017a	eb 09		 jmp	 SHORT $LN4@blit_rgb_a
$LN2@blit_rgb_a:
  0017c	8b 45 d8	 mov	 eax, DWORD PTR _v_loop$[ebp]
  0017f	83 e8 01	 sub	 eax, 1
  00182	89 45 d8	 mov	 DWORD PTR _v_loop$[ebp], eax
$LN4@blit_rgb_a:
  00185	83 7d d8 00	 cmp	 DWORD PTR _v_loop$[ebp], 0
  00189	7e 6e		 jle	 SHORT $LN1@blit_rgb_a

; 518  : 	{
; 519  : 		for (u_loop = sprite_data->width; u_loop > 0; u_loop--)

  0018b	8b 45 10	 mov	 eax, DWORD PTR _sprite_data$[ebp]
  0018e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00191	89 4d dc	 mov	 DWORD PTR _u_loop$[ebp], ecx
  00194	eb 09		 jmp	 SHORT $LN7@blit_rgb_a
$LN5@blit_rgb_a:
  00196	8b 45 dc	 mov	 eax, DWORD PTR _u_loop$[ebp]
  00199	83 e8 01	 sub	 eax, 1
  0019c	89 45 dc	 mov	 DWORD PTR _u_loop$[ebp], eax
$LN7@blit_rgb_a:
  0019f	83 7d dc 00	 cmp	 DWORD PTR _u_loop$[ebp], 0
  001a3	7e 37		 jle	 SHORT $LN6@blit_rgb_a

; 520  : 		{
; 521  : 			if (*mask_data == mask_value)

  001a5	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  001a8	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001ab	0f b6 55 d3	 movzx	 edx, BYTE PTR _mask_value$[ebp]
  001af	3b ca		 cmp	 ecx, edx
  001b1	75 0c		 jne	 SHORT $LN12@blit_rgb_a

; 522  : 			{
; 523  : 				*(rgb_packed *)screen_data = *(rgb_packed *)rgb_data;

  001b3	8b 45 d4	 mov	 eax, DWORD PTR _screen_data$[ebp]
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR _rgb_data$[ebp]
  001b9	66 8b 11	 mov	 dx, WORD PTR [ecx]
  001bc	66 89 10	 mov	 WORD PTR [eax], dx
$LN12@blit_rgb_a:

; 524  : 			}
; 525  : 
; 526  : 			rgb_data += sizeof (rgb_packed);

  001bf	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  001c2	83 c0 02	 add	 eax, 2
  001c5	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax

; 527  : 
; 528  : 			mask_data++;

  001c8	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  001cb	83 c0 01	 add	 eax, 1
  001ce	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax

; 529  : 
; 530  : 			screen_data += sizeof (rgb_packed);

  001d1	8b 45 d4	 mov	 eax, DWORD PTR _screen_data$[ebp]
  001d4	83 c0 02	 add	 eax, 2
  001d7	89 45 d4	 mov	 DWORD PTR _screen_data$[ebp], eax

; 531  : 		}

  001da	eb ba		 jmp	 SHORT $LN5@blit_rgb_a
$LN6@blit_rgb_a:

; 532  : 
; 533  : 		rgb_data += rgb_add_on;

  001dc	8b 45 08	 mov	 eax, DWORD PTR _rgb_data$[ebp]
  001df	03 45 f0	 add	 eax, DWORD PTR _rgb_add_on$[ebp]
  001e2	89 45 08	 mov	 DWORD PTR _rgb_data$[ebp], eax

; 534  : 
; 535  : 		mask_data += mask_add_on;

  001e5	8b 45 0c	 mov	 eax, DWORD PTR _mask_data$[ebp]
  001e8	03 45 e4	 add	 eax, DWORD PTR _mask_add_on$[ebp]
  001eb	89 45 0c	 mov	 DWORD PTR _mask_data$[ebp], eax

; 536  : 
; 537  : 		screen_data += screen_add_on;

  001ee	8b 45 d4	 mov	 eax, DWORD PTR _screen_data$[ebp]
  001f1	03 45 e0	 add	 eax, DWORD PTR _screen_add_on$[ebp]
  001f4	89 45 d4	 mov	 DWORD PTR _screen_data$[ebp], eax

; 538  : 	}

  001f7	eb 83		 jmp	 SHORT $LN2@blit_rgb_a
$LN1@blit_rgb_a:

; 539  : }

  001f9	5f		 pop	 edi
  001fa	5e		 pop	 esi
  001fb	5b		 pop	 ebx
  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c2 0c 00	 ret	 12			; 0000000cH
?blit_rgb_alpha_masked_sprite@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z ENDP ; blit_rgb_alpha_masked_sprite
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?blit_rgb_alpha_centralised_clipped_graphic@@YGXPBE0HHH@Z
_TEXT	SEGMENT
tv154 = -124						; size = 4
$T1 = -120						; size = 4
$T2 = -116						; size = 4
_write$3 = -48						; size = 4
_read$4 = -44						; size = 4
_loop$5 = -40						; size = 4
_wt$ = -36						; size = 4
_screen_data$ = -32					; size = 4
_rda$ = -28						; size = 4
_rd$ = -24						; size = 4
_height$ = -20						; size = 4
_width$ = -16						; size = 4
_alpha_pitch$ = -12					; size = 4
_graphic_pitch$ = -8					; size = 4
_screen_pitch$ = -4					; size = 4
_rgb_graphic$ = 8					; size = 4
_alpha$ = 12						; size = 4
_alpha_value$ = 16					; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
?blit_rgb_alpha_centralised_clipped_graphic@@YGXPBE0HHH@Z PROC ; blit_rgb_alpha_centralised_clipped_graphic, COMDAT

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 329  : 	int
; 330  : 		screen_pitch,
; 331  : 		graphic_pitch,
; 332  : 		alpha_pitch,
; 333  : 		width,
; 334  : 		height;
; 335  : 
; 336  : 	const unsigned char
; 337  : 		*rd,
; 338  : 		*rda;
; 339  : 	unsigned char
; 340  : 		*screen_data,
; 341  : 		*wt;
; 342  : 
; 343  : 	ASSERT (rgb_graphic);

  00009	83 7d 08 00	 cmp	 DWORD PTR _rgb_graphic$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN7@blit_rgb_a
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_alpha_centralised_clipped_graphic@@YGXPBE0HHH@Z@4JA
  00014	83 c0 0f	 add	 eax, 15			; 0000000fH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CBKKLMBN@rgb_graphic@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@blit_rgb_a:

; 344  : 
; 345  : 	screen_pitch = get_screen_pitch (active_screen);

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00032	89 45 fc	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 346  : 
; 347  : 	screen_data = get_screen_data (active_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00040	89 45 e0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 348  : 
; 349  : 	rd = rgb_graphic;

  00043	8b 45 08	 mov	 eax, DWORD PTR _rgb_graphic$[ebp]
  00046	89 45 e8	 mov	 DWORD PTR _rd$[ebp], eax

; 350  : 
; 351  : 	rda = alpha;

  00049	8b 45 0c	 mov	 eax, DWORD PTR _alpha$[ebp]
  0004c	89 45 e4	 mov	 DWORD PTR _rda$[ebp], eax

; 352  : 
; 353  : 	graphic_pitch = get_list_item (rd, unsigned short int);

  0004f	8b 45 e8	 mov	 eax, DWORD PTR _rd$[ebp]
  00052	83 c0 02	 add	 eax, 2
  00055	89 45 e8	 mov	 DWORD PTR _rd$[ebp], eax
  00058	8b 4d e8	 mov	 ecx, DWORD PTR _rd$[ebp]
  0005b	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  0005f	89 55 f8	 mov	 DWORD PTR _graphic_pitch$[ebp], edx

; 354  : 
; 355  : 	alpha_pitch = graphic_pitch;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _graphic_pitch$[ebp]
  00065	89 45 f4	 mov	 DWORD PTR _alpha_pitch$[ebp], eax

; 356  : 
; 357  : 	height = get_list_item (rd, unsigned short int);

  00068	8b 45 e8	 mov	 eax, DWORD PTR _rd$[ebp]
  0006b	83 c0 02	 add	 eax, 2
  0006e	89 45 e8	 mov	 DWORD PTR _rd$[ebp], eax
  00071	8b 4d e8	 mov	 ecx, DWORD PTR _rd$[ebp]
  00074	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00078	89 55 ec	 mov	 DWORD PTR _height$[ebp], edx

; 358  : 
; 359  : 	//
; 360  : 	// Centralise
; 361  : 	//
; 362  : 
; 363  : 	x -= graphic_pitch >> 1;

  0007b	8b 45 f8	 mov	 eax, DWORD PTR _graphic_pitch$[ebp]
  0007e	d1 f8		 sar	 eax, 1
  00080	8b 4d 14	 mov	 ecx, DWORD PTR _x$[ebp]
  00083	2b c8		 sub	 ecx, eax
  00085	89 4d 14	 mov	 DWORD PTR _x$[ebp], ecx

; 364  : 	y -= height >> 1;

  00088	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  0008b	d1 f8		 sar	 eax, 1
  0008d	8b 4d 18	 mov	 ecx, DWORD PTR _y$[ebp]
  00090	2b c8		 sub	 ecx, eax
  00092	89 4d 18	 mov	 DWORD PTR _y$[ebp], ecx

; 365  : 
; 366  : 	//
; 367  : 	// Clip to max screen extents
; 368  : 	//
; 369  : 
; 370  : 	width = min (graphic_pitch, get_screen_width (active_screen) - x);

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?get_screen_width@@YGHPAUSCREEN@@@Z ; get_screen_width
  000a0	2b 45 14	 sub	 eax, DWORD PTR _x$[ebp]
  000a3	89 45 8c	 mov	 DWORD PTR $T2[ebp], eax
  000a6	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  000a9	51		 push	 ecx
  000aa	8d 55 f8	 lea	 edx, DWORD PTR _graphic_pitch$[ebp]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  000b3	8b 00		 mov	 eax, DWORD PTR [eax]
  000b5	89 45 f0	 mov	 DWORD PTR _width$[ebp], eax

; 371  : 	height = min (height, get_screen_height (active_screen) - y);

  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?get_screen_height@@YGHPAUSCREEN@@@Z ; get_screen_height
  000c3	2b 45 18	 sub	 eax, DWORD PTR _y$[ebp]
  000c6	89 45 88	 mov	 DWORD PTR $T1[ebp], eax
  000c9	8d 4d 88	 lea	 ecx, DWORD PTR $T1[ebp]
  000cc	51		 push	 ecx
  000cd	8d 55 ec	 lea	 edx, DWORD PTR _height$[ebp]
  000d0	52		 push	 edx
  000d1	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  000d6	8b 00		 mov	 eax, DWORD PTR [eax]
  000d8	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax

; 372  : 
; 373  : 	//
; 374  : 	// Clip to min screen extents
; 375  : 	//
; 376  : 
; 377  : 	if (y < 0)

  000db	83 7d 18 00	 cmp	 DWORD PTR _y$[ebp], 0
  000df	7d 35		 jge	 SHORT $LN8@blit_rgb_a

; 378  : 	{
; 379  : 
; 380  : 		rd += (0 - y) * graphic_pitch * sizeof (rgb_packed);

  000e1	33 c0		 xor	 eax, eax
  000e3	2b 45 18	 sub	 eax, DWORD PTR _y$[ebp]
  000e6	0f af 45 f8	 imul	 eax, DWORD PTR _graphic_pitch$[ebp]
  000ea	8b 4d e8	 mov	 ecx, DWORD PTR _rd$[ebp]
  000ed	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000f0	89 55 e8	 mov	 DWORD PTR _rd$[ebp], edx

; 381  : 		rda += (0 - y) * alpha_pitch * sizeof (unsigned char);

  000f3	33 c0		 xor	 eax, eax
  000f5	2b 45 18	 sub	 eax, DWORD PTR _y$[ebp]
  000f8	0f af 45 f4	 imul	 eax, DWORD PTR _alpha_pitch$[ebp]
  000fc	03 45 e4	 add	 eax, DWORD PTR _rda$[ebp]
  000ff	89 45 e4	 mov	 DWORD PTR _rda$[ebp], eax

; 382  : 		height -= (0 - y);

  00102	33 c0		 xor	 eax, eax
  00104	2b 45 18	 sub	 eax, DWORD PTR _y$[ebp]
  00107	8b 4d ec	 mov	 ecx, DWORD PTR _height$[ebp]
  0010a	2b c8		 sub	 ecx, eax
  0010c	89 4d ec	 mov	 DWORD PTR _height$[ebp], ecx

; 383  : 		y = 0;

  0010f	c7 45 18 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
$LN8@blit_rgb_a:

; 384  : 	}
; 385  : 
; 386  : 	if (x < 0)

  00116	83 7d 14 00	 cmp	 DWORD PTR _x$[ebp], 0
  0011a	7d 2d		 jge	 SHORT $LN9@blit_rgb_a

; 387  : 	{
; 388  : 		rd += (0 - x) * sizeof (rgb_packed);

  0011c	33 c0		 xor	 eax, eax
  0011e	2b 45 14	 sub	 eax, DWORD PTR _x$[ebp]
  00121	8b 4d e8	 mov	 ecx, DWORD PTR _rd$[ebp]
  00124	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00127	89 55 e8	 mov	 DWORD PTR _rd$[ebp], edx

; 389  : 		rda += (0 - x) * sizeof (unsigned char);

  0012a	33 c0		 xor	 eax, eax
  0012c	2b 45 14	 sub	 eax, DWORD PTR _x$[ebp]
  0012f	03 45 e4	 add	 eax, DWORD PTR _rda$[ebp]
  00132	89 45 e4	 mov	 DWORD PTR _rda$[ebp], eax

; 390  : 		width -= (0 - x);

  00135	33 c0		 xor	 eax, eax
  00137	2b 45 14	 sub	 eax, DWORD PTR _x$[ebp]
  0013a	8b 4d f0	 mov	 ecx, DWORD PTR _width$[ebp]
  0013d	2b c8		 sub	 ecx, eax
  0013f	89 4d f0	 mov	 DWORD PTR _width$[ebp], ecx

; 391  : 		x = 0;

  00142	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
$LN9@blit_rgb_a:

; 392  : 	}
; 393  : 
; 394  : 	//
; 395  : 	// Early out
; 396  : 	//
; 397  : 
; 398  : 	if (height <= 0)

  00149	83 7d ec 00	 cmp	 DWORD PTR _height$[ebp], 0
  0014d	7f 05		 jg	 SHORT $LN10@blit_rgb_a

; 399  : 		return;

  0014f	e9 a4 00 00 00	 jmp	 $LN1@blit_rgb_a
$LN10@blit_rgb_a:

; 400  : 
; 401  : 	if (width <= 0)

  00154	83 7d f0 00	 cmp	 DWORD PTR _width$[ebp], 0
  00158	7f 05		 jg	 SHORT $LN11@blit_rgb_a

; 402  : 		return;

  0015a	e9 99 00 00 00	 jmp	 $LN1@blit_rgb_a
$LN11@blit_rgb_a:

; 403  : 
; 404  : 	//
; 405  : 	// Scale into rgb_packed
; 406  : 	//
; 407  : 
; 408  : 	graphic_pitch *= sizeof (rgb_packed);

  0015f	8b 45 f8	 mov	 eax, DWORD PTR _graphic_pitch$[ebp]
  00162	d1 e0		 shl	 eax, 1
  00164	89 45 f8	 mov	 DWORD PTR _graphic_pitch$[ebp], eax

; 409  : 
; 410  : 	//
; 411  : 	// Blit
; 412  : 	//
; 413  : 
; 414  : 	wt = screen_data + (x * sizeof (rgb_packed)) + (y * screen_pitch);

  00167	8b 45 14	 mov	 eax, DWORD PTR _x$[ebp]
  0016a	8b 4d e0	 mov	 ecx, DWORD PTR _screen_data$[ebp]
  0016d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00170	8b 45 18	 mov	 eax, DWORD PTR _y$[ebp]
  00173	0f af 45 fc	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00177	03 d0		 add	 edx, eax
  00179	89 55 dc	 mov	 DWORD PTR _wt$[ebp], edx
$LN2@blit_rgb_a:

; 415  : 
; 416  : 	while ( height-- )

  0017c	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  0017f	89 45 84	 mov	 DWORD PTR tv154[ebp], eax
  00182	8b 4d ec	 mov	 ecx, DWORD PTR _height$[ebp]
  00185	83 e9 01	 sub	 ecx, 1
  00188	89 4d ec	 mov	 DWORD PTR _height$[ebp], ecx
  0018b	83 7d 84 00	 cmp	 DWORD PTR tv154[ebp], 0
  0018f	74 67		 je	 SHORT $LN1@blit_rgb_a

; 417  : 	{
; 418  : 
; 419  : 		int
; 420  : 			loop;
; 421  : 
; 422  : 		unsigned short int
; 423  : 			*read,
; 424  : 			*write;
; 425  : 
; 426  : 		read = ( unsigned short int * ) rd;

  00191	8b 45 e8	 mov	 eax, DWORD PTR _rd$[ebp]
  00194	89 45 d4	 mov	 DWORD PTR _read$4[ebp], eax

; 427  : 		write = ( unsigned short int * ) wt;

  00197	8b 45 dc	 mov	 eax, DWORD PTR _wt$[ebp]
  0019a	89 45 d0	 mov	 DWORD PTR _write$3[ebp], eax

; 428  : 
; 429  : 		for ( loop = 0; loop < width; loop++ )

  0019d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _loop$5[ebp], 0
  001a4	eb 09		 jmp	 SHORT $LN6@blit_rgb_a
$LN4@blit_rgb_a:
  001a6	8b 45 d8	 mov	 eax, DWORD PTR _loop$5[ebp]
  001a9	83 c0 01	 add	 eax, 1
  001ac	89 45 d8	 mov	 DWORD PTR _loop$5[ebp], eax
$LN6@blit_rgb_a:
  001af	8b 45 d8	 mov	 eax, DWORD PTR _loop$5[ebp]
  001b2	3b 45 f0	 cmp	 eax, DWORD PTR _width$[ebp]
  001b5	7d 24		 jge	 SHORT $LN5@blit_rgb_a

; 430  : 		{
; 431  : 
; 432  : 			if ( rda[loop] != alpha_value )

  001b7	8b 45 e4	 mov	 eax, DWORD PTR _rda$[ebp]
  001ba	03 45 d8	 add	 eax, DWORD PTR _loop$5[ebp]
  001bd	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001c0	3b 4d 10	 cmp	 ecx, DWORD PTR _alpha_value$[ebp]
  001c3	74 14		 je	 SHORT $LN12@blit_rgb_a

; 433  : 			{
; 434  : 
; 435  : 				write[loop] = read[loop];

  001c5	8b 45 d8	 mov	 eax, DWORD PTR _loop$5[ebp]
  001c8	8b 4d d0	 mov	 ecx, DWORD PTR _write$3[ebp]
  001cb	8b 55 d8	 mov	 edx, DWORD PTR _loop$5[ebp]
  001ce	8b 75 d4	 mov	 esi, DWORD PTR _read$4[ebp]
  001d1	66 8b 14 56	 mov	 dx, WORD PTR [esi+edx*2]
  001d5	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN12@blit_rgb_a:

; 436  : 			}
; 437  : 		}

  001d9	eb cb		 jmp	 SHORT $LN4@blit_rgb_a
$LN5@blit_rgb_a:

; 438  : 
; 439  : 		rda += alpha_pitch;

  001db	8b 45 e4	 mov	 eax, DWORD PTR _rda$[ebp]
  001de	03 45 f4	 add	 eax, DWORD PTR _alpha_pitch$[ebp]
  001e1	89 45 e4	 mov	 DWORD PTR _rda$[ebp], eax

; 440  : 		rd += graphic_pitch;

  001e4	8b 45 e8	 mov	 eax, DWORD PTR _rd$[ebp]
  001e7	03 45 f8	 add	 eax, DWORD PTR _graphic_pitch$[ebp]
  001ea	89 45 e8	 mov	 DWORD PTR _rd$[ebp], eax

; 441  : 		wt += screen_pitch;

  001ed	8b 45 dc	 mov	 eax, DWORD PTR _wt$[ebp]
  001f0	03 45 fc	 add	 eax, DWORD PTR _screen_pitch$[ebp]
  001f3	89 45 dc	 mov	 DWORD PTR _wt$[ebp], eax

; 442  : 	}

  001f6	eb 84		 jmp	 SHORT $LN2@blit_rgb_a
$LN1@blit_rgb_a:

; 443  : }

  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi
  001fa	5b		 pop	 ebx
  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c2 14 00	 ret	 20			; 00000014H
?blit_rgb_alpha_centralised_clipped_graphic@@YGXPBE0HHH@Z ENDP ; blit_rgb_alpha_centralised_clipped_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?blit_rgb_centralised_clipped_graphic@@YGXPBEHH@Z
_TEXT	SEGMENT
tv150 = -104						; size = 4
$T1 = -100						; size = 4
$T2 = -96						; size = 4
_wt$ = -28						; size = 4
_screen_data$ = -24					; size = 4
_rd$ = -20						; size = 4
_height$ = -16						; size = 4
_width$ = -12						; size = 4
_graphic_pitch$ = -8					; size = 4
_screen_pitch$ = -4					; size = 4
_rgb_graphic$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?blit_rgb_centralised_clipped_graphic@@YGXPBEHH@Z PROC	; blit_rgb_centralised_clipped_graphic, COMDAT

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 220  : 	int
; 221  : 		screen_pitch,
; 222  : 		graphic_pitch,
; 223  : 		width,
; 224  : 		height;
; 225  : 
; 226  : 	const unsigned char
; 227  : 		*rd;
; 228  : 	unsigned char
; 229  : 		*screen_data,
; 230  : 		*wt;
; 231  : 
; 232  : 	ASSERT (rgb_graphic);

  00009	83 7d 08 00	 cmp	 DWORD PTR _rgb_graphic$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@blit_rgb_c
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_centralised_clipped_graphic@@YGXPBEHH@Z@4JA
  00014	83 c0 0d	 add	 eax, 13			; 0000000dH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CBKKLMBN@rgb_graphic@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@blit_rgb_c:

; 233  : 
; 234  : 	screen_pitch = get_screen_pitch (active_screen);

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00032	89 45 fc	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 235  : 
; 236  : 	screen_data = get_screen_data (active_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00040	89 45 e8	 mov	 DWORD PTR _screen_data$[ebp], eax

; 237  : 
; 238  : 	rd = rgb_graphic;

  00043	8b 45 08	 mov	 eax, DWORD PTR _rgb_graphic$[ebp]
  00046	89 45 ec	 mov	 DWORD PTR _rd$[ebp], eax

; 239  : 
; 240  : 	graphic_pitch = get_list_item (rd, unsigned short int);

  00049	8b 45 ec	 mov	 eax, DWORD PTR _rd$[ebp]
  0004c	83 c0 02	 add	 eax, 2
  0004f	89 45 ec	 mov	 DWORD PTR _rd$[ebp], eax
  00052	8b 4d ec	 mov	 ecx, DWORD PTR _rd$[ebp]
  00055	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00059	89 55 f8	 mov	 DWORD PTR _graphic_pitch$[ebp], edx

; 241  : 
; 242  : 	height = get_list_item (rd, unsigned short int);

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _rd$[ebp]
  0005f	83 c0 02	 add	 eax, 2
  00062	89 45 ec	 mov	 DWORD PTR _rd$[ebp], eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _rd$[ebp]
  00068	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  0006c	89 55 f0	 mov	 DWORD PTR _height$[ebp], edx

; 243  : 
; 244  : 	//
; 245  : 	// Centralise
; 246  : 	//
; 247  : 
; 248  : 	x -= graphic_pitch >> 1;

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _graphic_pitch$[ebp]
  00072	d1 f8		 sar	 eax, 1
  00074	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00077	2b c8		 sub	 ecx, eax
  00079	89 4d 0c	 mov	 DWORD PTR _x$[ebp], ecx

; 249  : 
; 250  : 	y -= height >> 1;

  0007c	8b 45 f0	 mov	 eax, DWORD PTR _height$[ebp]
  0007f	d1 f8		 sar	 eax, 1
  00081	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00084	2b c8		 sub	 ecx, eax
  00086	89 4d 10	 mov	 DWORD PTR _y$[ebp], ecx

; 251  : 
; 252  : 	//
; 253  : 	// Clip to max screen extents
; 254  : 	//
; 255  : 
; 256  : 	width = min (graphic_pitch, get_screen_width (active_screen) - x);

  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?get_screen_width@@YGHPAUSCREEN@@@Z ; get_screen_width
  00094	2b 45 0c	 sub	 eax, DWORD PTR _x$[ebp]
  00097	89 45 a0	 mov	 DWORD PTR $T2[ebp], eax
  0009a	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  0009d	51		 push	 ecx
  0009e	8d 55 f8	 lea	 edx, DWORD PTR _graphic_pitch$[ebp]
  000a1	52		 push	 edx
  000a2	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 45 f4	 mov	 DWORD PTR _width$[ebp], eax

; 257  : 
; 258  : 	height = min (height, get_screen_height (active_screen) - y);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?get_screen_height@@YGHPAUSCREEN@@@Z ; get_screen_height
  000b7	2b 45 10	 sub	 eax, DWORD PTR _y$[ebp]
  000ba	89 45 9c	 mov	 DWORD PTR $T1[ebp], eax
  000bd	8d 4d 9c	 lea	 ecx, DWORD PTR $T1[ebp]
  000c0	51		 push	 ecx
  000c1	8d 55 f0	 lea	 edx, DWORD PTR _height$[ebp]
  000c4	52		 push	 edx
  000c5	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  000ca	8b 00		 mov	 eax, DWORD PTR [eax]
  000cc	89 45 f0	 mov	 DWORD PTR _height$[ebp], eax

; 259  : 
; 260  : 	//
; 261  : 	// Clip to min screen extents
; 262  : 	//
; 263  : 
; 264  : 	if (y < 0)

  000cf	83 7d 10 00	 cmp	 DWORD PTR _y$[ebp], 0
  000d3	7d 26		 jge	 SHORT $LN5@blit_rgb_c

; 265  : 	{
; 266  : 
; 267  : 		rd += (0 - y) * graphic_pitch * sizeof (rgb_packed);

  000d5	33 c0		 xor	 eax, eax
  000d7	2b 45 10	 sub	 eax, DWORD PTR _y$[ebp]
  000da	0f af 45 f8	 imul	 eax, DWORD PTR _graphic_pitch$[ebp]
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _rd$[ebp]
  000e1	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000e4	89 55 ec	 mov	 DWORD PTR _rd$[ebp], edx

; 268  : 
; 269  : 		height -= (0 - y);

  000e7	33 c0		 xor	 eax, eax
  000e9	2b 45 10	 sub	 eax, DWORD PTR _y$[ebp]
  000ec	8b 4d f0	 mov	 ecx, DWORD PTR _height$[ebp]
  000ef	2b c8		 sub	 ecx, eax
  000f1	89 4d f0	 mov	 DWORD PTR _height$[ebp], ecx

; 270  : 
; 271  : 		y = 0;

  000f4	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
$LN5@blit_rgb_c:

; 272  : 	}
; 273  : 
; 274  : 	if (x < 0)

  000fb	83 7d 0c 00	 cmp	 DWORD PTR _x$[ebp], 0
  000ff	7d 22		 jge	 SHORT $LN6@blit_rgb_c

; 275  : 	{
; 276  : 
; 277  : 		rd += (0 - x) * sizeof (rgb_packed);

  00101	33 c0		 xor	 eax, eax
  00103	2b 45 0c	 sub	 eax, DWORD PTR _x$[ebp]
  00106	8b 4d ec	 mov	 ecx, DWORD PTR _rd$[ebp]
  00109	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0010c	89 55 ec	 mov	 DWORD PTR _rd$[ebp], edx

; 278  : 
; 279  : 		width -= (0 - x);

  0010f	33 c0		 xor	 eax, eax
  00111	2b 45 0c	 sub	 eax, DWORD PTR _x$[ebp]
  00114	8b 4d f4	 mov	 ecx, DWORD PTR _width$[ebp]
  00117	2b c8		 sub	 ecx, eax
  00119	89 4d f4	 mov	 DWORD PTR _width$[ebp], ecx

; 280  : 
; 281  : 		x = 0;

  0011c	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
$LN6@blit_rgb_c:

; 282  : 	}
; 283  : 
; 284  : 	//
; 285  : 	// Early out
; 286  : 	//
; 287  : 
; 288  : 	if (height <= 0)

  00123	83 7d f0 00	 cmp	 DWORD PTR _height$[ebp], 0
  00127	7f 02		 jg	 SHORT $LN7@blit_rgb_c

; 289  : 	{
; 290  : 
; 291  : 		return;

  00129	eb 6a		 jmp	 SHORT $LN1@blit_rgb_c
$LN7@blit_rgb_c:

; 292  : 	}
; 293  : 
; 294  : 	if (width <= 0)

  0012b	83 7d f4 00	 cmp	 DWORD PTR _width$[ebp], 0
  0012f	7f 02		 jg	 SHORT $LN8@blit_rgb_c

; 295  : 	{
; 296  : 
; 297  : 		return;

  00131	eb 62		 jmp	 SHORT $LN1@blit_rgb_c
$LN8@blit_rgb_c:

; 298  : 	}
; 299  : 
; 300  : 	//
; 301  : 	// Scale into rgb_packed
; 302  : 	//
; 303  : 
; 304  : 	graphic_pitch *= sizeof (rgb_packed);

  00133	8b 45 f8	 mov	 eax, DWORD PTR _graphic_pitch$[ebp]
  00136	d1 e0		 shl	 eax, 1
  00138	89 45 f8	 mov	 DWORD PTR _graphic_pitch$[ebp], eax

; 305  : 
; 306  : 	width *= sizeof (rgb_packed);

  0013b	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  0013e	d1 e0		 shl	 eax, 1
  00140	89 45 f4	 mov	 DWORD PTR _width$[ebp], eax

; 307  : 
; 308  : 	//
; 309  : 	// Blit
; 310  : 	//
; 311  : 
; 312  : 	wt = screen_data + (x * sizeof (rgb_packed)) + (y * screen_pitch);

  00143	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00146	8b 4d e8	 mov	 ecx, DWORD PTR _screen_data$[ebp]
  00149	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0014c	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0014f	0f af 45 fc	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00153	03 d0		 add	 edx, eax
  00155	89 55 e4	 mov	 DWORD PTR _wt$[ebp], edx
$LN2@blit_rgb_c:

; 313  : 
; 314  : 	while (height--)

  00158	8b 45 f0	 mov	 eax, DWORD PTR _height$[ebp]
  0015b	89 45 98	 mov	 DWORD PTR tv150[ebp], eax
  0015e	8b 4d f0	 mov	 ecx, DWORD PTR _height$[ebp]
  00161	83 e9 01	 sub	 ecx, 1
  00164	89 4d f0	 mov	 DWORD PTR _height$[ebp], ecx
  00167	83 7d 98 00	 cmp	 DWORD PTR tv150[ebp], 0
  0016b	74 28		 je	 SHORT $LN1@blit_rgb_c

; 315  : 	{
; 316  : 		memcpy (wt, rd, width);

  0016d	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  00170	50		 push	 eax
  00171	8b 4d ec	 mov	 ecx, DWORD PTR _rd$[ebp]
  00174	51		 push	 ecx
  00175	8b 55 e4	 mov	 edx, DWORD PTR _wt$[ebp]
  00178	52		 push	 edx
  00179	e8 00 00 00 00	 call	 _memcpy
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 317  : 
; 318  : 		rd += graphic_pitch;

  00181	8b 45 ec	 mov	 eax, DWORD PTR _rd$[ebp]
  00184	03 45 f8	 add	 eax, DWORD PTR _graphic_pitch$[ebp]
  00187	89 45 ec	 mov	 DWORD PTR _rd$[ebp], eax

; 319  : 		wt += screen_pitch;

  0018a	8b 45 e4	 mov	 eax, DWORD PTR _wt$[ebp]
  0018d	03 45 fc	 add	 eax, DWORD PTR _screen_pitch$[ebp]
  00190	89 45 e4	 mov	 DWORD PTR _wt$[ebp], eax

; 320  : 	}

  00193	eb c3		 jmp	 SHORT $LN2@blit_rgb_c
$LN1@blit_rgb_c:

; 321  : }

  00195	5f		 pop	 edi
  00196	5e		 pop	 esi
  00197	5b		 pop	 ebx
  00198	8b e5		 mov	 esp, ebp
  0019a	5d		 pop	 ebp
  0019b	c2 0c 00	 ret	 12			; 0000000cH
?blit_rgb_centralised_clipped_graphic@@YGXPBEHH@Z ENDP	; blit_rgb_centralised_clipped_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?blit_rgb_clipped_graphic@@YGXPBEHH@Z
_TEXT	SEGMENT
tv146 = -104						; size = 4
$T1 = -100						; size = 4
$T2 = -96						; size = 4
_wt$ = -28						; size = 4
_screen_data$ = -24					; size = 4
_rd$ = -20						; size = 4
_height$ = -16						; size = 4
_width$ = -12						; size = 4
_graphic_pitch$ = -8					; size = 4
_screen_pitch$ = -4					; size = 4
_rgb_graphic$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?blit_rgb_clipped_graphic@@YGXPBEHH@Z PROC		; blit_rgb_clipped_graphic, COMDAT

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 119  : 	int
; 120  : 		screen_pitch,
; 121  : 		graphic_pitch,
; 122  : 		width,
; 123  : 		height;
; 124  : 
; 125  : 	const unsigned char
; 126  : 		*rd;
; 127  : 	unsigned char
; 128  : 		*screen_data,
; 129  : 		*wt;
; 130  : 
; 131  : 	ASSERT (rgb_graphic);

  00009	83 7d 08 00	 cmp	 DWORD PTR _rgb_graphic$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@blit_rgb_c
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_clipped_graphic@@YGXPBEHH@Z@4JA
  00014	83 c0 0d	 add	 eax, 13			; 0000000dH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CBKKLMBN@rgb_graphic@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@blit_rgb_c:

; 132  : 
; 133  : 	screen_pitch = get_screen_pitch (active_screen);

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00032	89 45 fc	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 134  : 
; 135  : 	screen_data = get_screen_data (active_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00040	89 45 e8	 mov	 DWORD PTR _screen_data$[ebp], eax

; 136  : 
; 137  : 	rd = rgb_graphic;

  00043	8b 45 08	 mov	 eax, DWORD PTR _rgb_graphic$[ebp]
  00046	89 45 ec	 mov	 DWORD PTR _rd$[ebp], eax

; 138  : 
; 139  : 	graphic_pitch = get_list_item (rd, unsigned short int);

  00049	8b 45 ec	 mov	 eax, DWORD PTR _rd$[ebp]
  0004c	83 c0 02	 add	 eax, 2
  0004f	89 45 ec	 mov	 DWORD PTR _rd$[ebp], eax
  00052	8b 4d ec	 mov	 ecx, DWORD PTR _rd$[ebp]
  00055	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00059	89 55 f8	 mov	 DWORD PTR _graphic_pitch$[ebp], edx

; 140  : 
; 141  : 	height = get_list_item (rd, unsigned short int);

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _rd$[ebp]
  0005f	83 c0 02	 add	 eax, 2
  00062	89 45 ec	 mov	 DWORD PTR _rd$[ebp], eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _rd$[ebp]
  00068	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  0006c	89 55 f0	 mov	 DWORD PTR _height$[ebp], edx

; 142  : 
; 143  : 	//
; 144  : 	// Clip to max screen extents
; 145  : 	//
; 146  : 
; 147  : 	width = min (graphic_pitch, get_screen_width (active_screen) - x);

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?get_screen_width@@YGHPAUSCREEN@@@Z ; get_screen_width
  0007a	2b 45 0c	 sub	 eax, DWORD PTR _x$[ebp]
  0007d	89 45 a0	 mov	 DWORD PTR $T2[ebp], eax
  00080	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00083	51		 push	 ecx
  00084	8d 55 f8	 lea	 edx, DWORD PTR _graphic_pitch$[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  0008d	8b 00		 mov	 eax, DWORD PTR [eax]
  0008f	89 45 f4	 mov	 DWORD PTR _width$[ebp], eax

; 148  : 
; 149  : 	height = min (height, get_screen_height (active_screen) - y);

  00092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?get_screen_height@@YGHPAUSCREEN@@@Z ; get_screen_height
  0009d	2b 45 10	 sub	 eax, DWORD PTR _y$[ebp]
  000a0	89 45 9c	 mov	 DWORD PTR $T1[ebp], eax
  000a3	8d 4d 9c	 lea	 ecx, DWORD PTR $T1[ebp]
  000a6	51		 push	 ecx
  000a7	8d 55 f0	 lea	 edx, DWORD PTR _height$[ebp]
  000aa	52		 push	 edx
  000ab	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  000b0	8b 00		 mov	 eax, DWORD PTR [eax]
  000b2	89 45 f0	 mov	 DWORD PTR _height$[ebp], eax

; 150  : 
; 151  : 	//
; 152  : 	// Clip to min screen extents
; 153  : 	//
; 154  : 
; 155  : 	if (y < 0)

  000b5	83 7d 10 00	 cmp	 DWORD PTR _y$[ebp], 0
  000b9	7d 26		 jge	 SHORT $LN5@blit_rgb_c

; 156  : 	{
; 157  : 
; 158  : 		rd += (0 - y) * graphic_pitch * sizeof (rgb_packed);

  000bb	33 c0		 xor	 eax, eax
  000bd	2b 45 10	 sub	 eax, DWORD PTR _y$[ebp]
  000c0	0f af 45 f8	 imul	 eax, DWORD PTR _graphic_pitch$[ebp]
  000c4	8b 4d ec	 mov	 ecx, DWORD PTR _rd$[ebp]
  000c7	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000ca	89 55 ec	 mov	 DWORD PTR _rd$[ebp], edx

; 159  : 
; 160  : 		height -= (0 - y);

  000cd	33 c0		 xor	 eax, eax
  000cf	2b 45 10	 sub	 eax, DWORD PTR _y$[ebp]
  000d2	8b 4d f0	 mov	 ecx, DWORD PTR _height$[ebp]
  000d5	2b c8		 sub	 ecx, eax
  000d7	89 4d f0	 mov	 DWORD PTR _height$[ebp], ecx

; 161  : 
; 162  : 		y = 0;

  000da	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
$LN5@blit_rgb_c:

; 163  : 	}
; 164  : 
; 165  : 	if (x < 0)

  000e1	83 7d 0c 00	 cmp	 DWORD PTR _x$[ebp], 0
  000e5	7d 22		 jge	 SHORT $LN6@blit_rgb_c

; 166  : 	{
; 167  : 
; 168  : 		rd += (0 - x) * sizeof (rgb_packed);

  000e7	33 c0		 xor	 eax, eax
  000e9	2b 45 0c	 sub	 eax, DWORD PTR _x$[ebp]
  000ec	8b 4d ec	 mov	 ecx, DWORD PTR _rd$[ebp]
  000ef	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000f2	89 55 ec	 mov	 DWORD PTR _rd$[ebp], edx

; 169  : 
; 170  : 		width -= (0 - x);

  000f5	33 c0		 xor	 eax, eax
  000f7	2b 45 0c	 sub	 eax, DWORD PTR _x$[ebp]
  000fa	8b 4d f4	 mov	 ecx, DWORD PTR _width$[ebp]
  000fd	2b c8		 sub	 ecx, eax
  000ff	89 4d f4	 mov	 DWORD PTR _width$[ebp], ecx

; 171  : 
; 172  : 		x = 0;

  00102	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
$LN6@blit_rgb_c:

; 173  : 	}
; 174  : 
; 175  : 	//
; 176  : 	// Early out
; 177  : 	//
; 178  : 
; 179  : 	if (height <= 0)

  00109	83 7d f0 00	 cmp	 DWORD PTR _height$[ebp], 0
  0010d	7f 02		 jg	 SHORT $LN7@blit_rgb_c

; 180  : 	{
; 181  : 
; 182  : 		return;

  0010f	eb 6a		 jmp	 SHORT $LN1@blit_rgb_c
$LN7@blit_rgb_c:

; 183  : 	}
; 184  : 
; 185  : 	if (width <= 0)

  00111	83 7d f4 00	 cmp	 DWORD PTR _width$[ebp], 0
  00115	7f 02		 jg	 SHORT $LN8@blit_rgb_c

; 186  : 	{
; 187  : 
; 188  : 		return;

  00117	eb 62		 jmp	 SHORT $LN1@blit_rgb_c
$LN8@blit_rgb_c:

; 189  : 	}
; 190  : 
; 191  : 	//
; 192  : 	// Scale into rgb_packed
; 193  : 	//
; 194  : 
; 195  : 	graphic_pitch *= sizeof (rgb_packed);

  00119	8b 45 f8	 mov	 eax, DWORD PTR _graphic_pitch$[ebp]
  0011c	d1 e0		 shl	 eax, 1
  0011e	89 45 f8	 mov	 DWORD PTR _graphic_pitch$[ebp], eax

; 196  : 
; 197  : 	width *= sizeof (rgb_packed);

  00121	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  00124	d1 e0		 shl	 eax, 1
  00126	89 45 f4	 mov	 DWORD PTR _width$[ebp], eax

; 198  : 
; 199  : 	//
; 200  : 	// Blit
; 201  : 	//
; 202  : 
; 203  : 	wt = screen_data + (x * sizeof (rgb_packed)) + (y * screen_pitch);

  00129	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0012c	8b 4d e8	 mov	 ecx, DWORD PTR _screen_data$[ebp]
  0012f	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00132	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00135	0f af 45 fc	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00139	03 d0		 add	 edx, eax
  0013b	89 55 e4	 mov	 DWORD PTR _wt$[ebp], edx
$LN2@blit_rgb_c:

; 204  : 
; 205  : 	while (height--)

  0013e	8b 45 f0	 mov	 eax, DWORD PTR _height$[ebp]
  00141	89 45 98	 mov	 DWORD PTR tv146[ebp], eax
  00144	8b 4d f0	 mov	 ecx, DWORD PTR _height$[ebp]
  00147	83 e9 01	 sub	 ecx, 1
  0014a	89 4d f0	 mov	 DWORD PTR _height$[ebp], ecx
  0014d	83 7d 98 00	 cmp	 DWORD PTR tv146[ebp], 0
  00151	74 28		 je	 SHORT $LN1@blit_rgb_c

; 206  : 	{
; 207  : 		memcpy (wt, rd, width);

  00153	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  00156	50		 push	 eax
  00157	8b 4d ec	 mov	 ecx, DWORD PTR _rd$[ebp]
  0015a	51		 push	 ecx
  0015b	8b 55 e4	 mov	 edx, DWORD PTR _wt$[ebp]
  0015e	52		 push	 edx
  0015f	e8 00 00 00 00	 call	 _memcpy
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  : 
; 209  : 		rd += graphic_pitch;

  00167	8b 45 ec	 mov	 eax, DWORD PTR _rd$[ebp]
  0016a	03 45 f8	 add	 eax, DWORD PTR _graphic_pitch$[ebp]
  0016d	89 45 ec	 mov	 DWORD PTR _rd$[ebp], eax

; 210  : 		wt += screen_pitch;

  00170	8b 45 e4	 mov	 eax, DWORD PTR _wt$[ebp]
  00173	03 45 fc	 add	 eax, DWORD PTR _screen_pitch$[ebp]
  00176	89 45 e4	 mov	 DWORD PTR _wt$[ebp], eax

; 211  : 	}

  00179	eb c3		 jmp	 SHORT $LN2@blit_rgb_c
$LN1@blit_rgb_c:

; 212  : }

  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 0c 00	 ret	 12			; 0000000cH
?blit_rgb_clipped_graphic@@YGXPBEHH@Z ENDP		; blit_rgb_clipped_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\rgb.c
;	COMDAT ?blit_rgb_graphic@@YGXPBEHH@Z
_TEXT	SEGMENT
tv86 = -92						; size = 4
_wt$ = -24						; size = 4
_screen_data$ = -20					; size = 4
_rd$ = -16						; size = 4
_height$ = -12						; size = 4
_width$ = -8						; size = 4
_screen_pitch$ = -4					; size = 4
_rgb_graphic$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?blit_rgb_graphic@@YGXPBEHH@Z PROC			; blit_rgb_graphic, COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 	int
; 80   : 		screen_pitch,
; 81   : 		width,
; 82   : 		height;
; 83   : 
; 84   : 	const unsigned char
; 85   : 		*rd;
; 86   : 	unsigned char
; 87   : 		*screen_data,
; 88   : 		*wt;
; 89   : 
; 90   : 	ASSERT (rgb_graphic);

  00009	83 7d 08 00	 cmp	 DWORD PTR _rgb_graphic$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@blit_rgb_g
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_rgb_graphic@@YGXPBEHH@Z@4JA
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OOPHEMGE@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CBKKLMBN@rgb_graphic@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@blit_rgb_g:

; 91   : 
; 92   : 	screen_pitch = get_screen_pitch (active_screen);

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00032	89 45 fc	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 93   : 
; 94   : 	screen_data = get_screen_data (active_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00040	89 45 ec	 mov	 DWORD PTR _screen_data$[ebp], eax

; 95   : 
; 96   : 	rd = rgb_graphic;

  00043	8b 45 08	 mov	 eax, DWORD PTR _rgb_graphic$[ebp]
  00046	89 45 f0	 mov	 DWORD PTR _rd$[ebp], eax

; 97   : 
; 98   : 	width = get_list_item (rd, unsigned short int) * sizeof (rgb_packed);

  00049	8b 45 f0	 mov	 eax, DWORD PTR _rd$[ebp]
  0004c	83 c0 02	 add	 eax, 2
  0004f	89 45 f0	 mov	 DWORD PTR _rd$[ebp], eax
  00052	8b 4d f0	 mov	 ecx, DWORD PTR _rd$[ebp]
  00055	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00059	d1 e2		 shl	 edx, 1
  0005b	89 55 f8	 mov	 DWORD PTR _width$[ebp], edx

; 99   : 
; 100  : 	height = get_list_item (rd, unsigned short int);

  0005e	8b 45 f0	 mov	 eax, DWORD PTR _rd$[ebp]
  00061	83 c0 02	 add	 eax, 2
  00064	89 45 f0	 mov	 DWORD PTR _rd$[ebp], eax
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _rd$[ebp]
  0006a	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  0006e	89 55 f4	 mov	 DWORD PTR _height$[ebp], edx

; 101  : 
; 102  : 	wt = screen_data + (x * sizeof (rgb_packed)) + (y * screen_pitch);

  00071	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00074	8b 4d ec	 mov	 ecx, DWORD PTR _screen_data$[ebp]
  00077	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0007a	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0007d	0f af 45 fc	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00081	03 d0		 add	 edx, eax
  00083	89 55 e8	 mov	 DWORD PTR _wt$[ebp], edx
$LN2@blit_rgb_g:

; 103  : 
; 104  : 	while (height--)

  00086	8b 45 f4	 mov	 eax, DWORD PTR _height$[ebp]
  00089	89 45 a4	 mov	 DWORD PTR tv86[ebp], eax
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR _height$[ebp]
  0008f	83 e9 01	 sub	 ecx, 1
  00092	89 4d f4	 mov	 DWORD PTR _height$[ebp], ecx
  00095	83 7d a4 00	 cmp	 DWORD PTR tv86[ebp], 0
  00099	74 28		 je	 SHORT $LN1@blit_rgb_g

; 105  : 	{
; 106  : 		memcpy (wt, rd, width);

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f0	 mov	 ecx, DWORD PTR _rd$[ebp]
  000a2	51		 push	 ecx
  000a3	8b 55 e8	 mov	 edx, DWORD PTR _wt$[ebp]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _memcpy
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 107  : 
; 108  : 		rd += width;

  000af	8b 45 f0	 mov	 eax, DWORD PTR _rd$[ebp]
  000b2	03 45 f8	 add	 eax, DWORD PTR _width$[ebp]
  000b5	89 45 f0	 mov	 DWORD PTR _rd$[ebp], eax

; 109  : 		wt += screen_pitch;

  000b8	8b 45 e8	 mov	 eax, DWORD PTR _wt$[ebp]
  000bb	03 45 fc	 add	 eax, DWORD PTR _screen_pitch$[ebp]
  000be	89 45 e8	 mov	 DWORD PTR _wt$[ebp], eax

; 110  : 	}

  000c1	eb c3		 jmp	 SHORT $LN2@blit_rgb_g
$LN1@blit_rgb_g:

; 111  : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 0c 00	 ret	 12			; 0000000cH
?blit_rgb_graphic@@YGXPBEHH@Z ENDP			; blit_rgb_graphic
_TEXT	ENDS
END
