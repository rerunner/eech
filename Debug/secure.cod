; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\misc\secure.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?get_security_message@@YGPBDXZ			; get_security_message
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0L@NAFCKBEG@CONFIG?4BIN@			; `string'
PUBLIC	??_C@_0P@CDKPKFCO@?$CFc?3?2CONFIG?4BIN@		; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0BN@MAMNDAEK@Security?5message?5zero?5length@ ; `string'
PUBLIC	??_C@_0BL@LGFBOAHA@Security?5message?5too?5short@ ; `string'
PUBLIC	??_C@_0BF@PDOGCKLJ@SECURITY?5MESSAGE?3?5?$CFs@	; `string'
EXTRN	__imp__fread:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	?check_cdrom_file_exists@@YGHPBD@Z:PROC		; check_cdrom_file_exists
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?safe_fclose@@YGHPAU_iobuf@@@Z:PROC		; safe_fclose
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?security_message@@3PADA DB 0100H DUP (?)		; security_message
_BSS	ENDS
;	COMDAT ??_C@_0BF@PDOGCKLJ@SECURITY?5MESSAGE?3?5?$CFs@
CONST	SEGMENT
??_C@_0BF@PDOGCKLJ@SECURITY?5MESSAGE?3?5?$CFs@ DB 'SECURITY MESSAGE: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LGFBOAHA@Security?5message?5too?5short@
CONST	SEGMENT
??_C@_0BL@LGFBOAHA@Security?5message?5too?5short@ DB 'Security message to'
	DB	'o short', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MAMNDAEK@Security?5message?5zero?5length@
CONST	SEGMENT
??_C@_0BN@MAMNDAEK@Security?5message?5zero?5length@ DB 'Security message '
	DB	'zero length', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CDKPKFCO@?$CFc?3?2CONFIG?4BIN@
CONST	SEGMENT
??_C@_0P@CDKPKFCO@?$CFc?3?2CONFIG?4BIN@ DB '%c:\CONFIG.BIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NAFCKBEG@CONFIG?4BIN@
CONST	SEGMENT
??_C@_0L@NAFCKBEG@CONFIG?4BIN@ DB 'CONFIG.BIN', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\secure.c
;	COMDAT ?get_security_message@@YGPBDXZ
_TEXT	SEGMENT
_i$ = -48						; size = 4
_index$ = -44						; size = 4
_codes$ = -40						; size = 5
_length$ = -29						; size = 1
_config_path$ = -28					; size = 20
_cdrom_drive_letter$ = -8				; size = 4
_fp$ = -4						; size = 4
?get_security_message@@YGPBDXZ PROC			; get_security_message, COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 	FILE
; 89   : 		*fp;
; 90   : 
; 91   : 	int
; 92   : 		cdrom_drive_letter;
; 93   : 
; 94   : 	char
; 95   : 		config_path[20];
; 96   : 
; 97   : 	unsigned char
; 98   : 		length;
; 99   : 
; 100  : 	unsigned char
; 101  : 		codes[] =
; 102  : 		{
; 103  : 			0xa6,

  00009	c6 45 d8 a6	 mov	 BYTE PTR _codes$[ebp], 166 ; 000000a6H

; 104  : 			0xf1,

  0000d	c6 45 d9 f1	 mov	 BYTE PTR _codes$[ebp+1], 241 ; 000000f1H

; 105  : 			0x06,

  00011	c6 45 da 06	 mov	 BYTE PTR _codes$[ebp+2], 6

; 106  : 			0x43,

  00015	c6 45 db 43	 mov	 BYTE PTR _codes$[ebp+3], 67 ; 00000043H

; 107  : 			0xe2

  00019	c6 45 dc e2	 mov	 BYTE PTR _codes$[ebp+4], 226 ; 000000e2H

; 108  : 		};
; 109  : 
; 110  : 	int
; 111  : 		index,
; 112  : 		i;
; 113  : 
; 114  : 	cdrom_drive_letter = check_cdrom_file_exists ("CONFIG.BIN");

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NAFCKBEG@CONFIG?4BIN@
  00022	e8 00 00 00 00	 call	 ?check_cdrom_file_exists@@YGHPBD@Z ; check_cdrom_file_exists
  00027	89 45 f8	 mov	 DWORD PTR _cdrom_drive_letter$[ebp], eax

; 115  : 
; 116  : 	if (!cdrom_drive_letter)

  0002a	83 7d f8 00	 cmp	 DWORD PTR _cdrom_drive_letter$[ebp], 0
  0002e	75 07		 jne	 SHORT $LN5@get_securi

; 117  : 	{
; 118  : 		return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	e9 fd 00 00 00	 jmp	 $LN1@get_securi
$LN5@get_securi:

; 119  : 	}
; 120  : 	
; 121  : 	sprintf (config_path, "%c:\\CONFIG.BIN", cdrom_drive_letter);

  00037	8b 45 f8	 mov	 eax, DWORD PTR _cdrom_drive_letter$[ebp]
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CDKPKFCO@?$CFc?3?2CONFIG?4BIN@
  00040	8d 4d e4	 lea	 ecx, DWORD PTR _config_path$[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 122  : 
; 123  : 	fp = safe_fopen (config_path, "rb");

  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00051	8d 45 e4	 lea	 eax, DWORD PTR _config_path$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  0005a	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 124  : 
; 125  : 	fread (&length, 1, 1, fp);

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00060	50		 push	 eax
  00061	6a 01		 push	 1
  00063	6a 01		 push	 1
  00065	8d 4d e3	 lea	 ecx, DWORD PTR _length$[ebp]
  00068	51		 push	 ecx
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0006f	83 c4 10	 add	 esp, 16			; 00000010H

; 126  : 
; 127  : 	if (length == 0)

  00072	0f b6 45 e3	 movzx	 eax, BYTE PTR _length$[ebp]
  00076	85 c0		 test	 eax, eax
  00078	75 0d		 jne	 SHORT $LN6@get_securi

; 128  : 	{
; 129  : 		debug_fatal ("Security message zero length");

  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MAMNDAEK@Security?5message?5zero?5length@
  0007f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00084	83 c4 04	 add	 esp, 4
$LN6@get_securi:

; 130  : 	}
; 131  : 
; 132  : 	if (fread (security_message, length, 1, fp) != 1)

  00087	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0008a	50		 push	 eax
  0008b	6a 01		 push	 1
  0008d	0f b6 4d e3	 movzx	 ecx, BYTE PTR _length$[ebp]
  00091	51		 push	 ecx
  00092	68 00 00 00 00	 push	 OFFSET ?security_message@@3PADA
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 0d		 je	 SHORT $LN7@get_securi

; 133  : 	{
; 134  : 		debug_fatal ("Security message too short");

  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LGFBOAHA@Security?5message?5too?5short@
  000aa	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000af	83 c4 04	 add	 esp, 4
$LN7@get_securi:

; 135  : 	}
; 136  : 
; 137  : 	safe_fclose (fp);

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 138  : 
; 139  : 	security_message[length] = '\0';

  000bb	0f b6 45 e3	 movzx	 eax, BYTE PTR _length$[ebp]
  000bf	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?security_message@@3PADA[eax], 0

; 140  : 
; 141  : 	index = 0;

  000c6	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0

; 142  : 
; 143  : 	for (i = 0; i < length; i++)

  000cd	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d4	eb 09		 jmp	 SHORT $LN4@get_securi
$LN2@get_securi:
  000d6	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  000d9	83 c0 01	 add	 eax, 1
  000dc	89 45 d0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@get_securi:
  000df	0f b6 45 e3	 movzx	 eax, BYTE PTR _length$[ebp]
  000e3	39 45 d0	 cmp	 DWORD PTR _i$[ebp], eax
  000e6	7d 35		 jge	 SHORT $LN3@get_securi

; 144  : 	{
; 145  : 		security_message[i] ^= codes[index];

  000e8	8b 45 d4	 mov	 eax, DWORD PTR _index$[ebp]
  000eb	0f b6 4c 05 d8	 movzx	 ecx, BYTE PTR _codes$[ebp+eax]
  000f0	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  000f3	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR ?security_message@@3PADA[edx]
  000fa	33 c1		 xor	 eax, ecx
  000fc	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  000ff	88 81 00 00 00
	00		 mov	 BYTE PTR ?security_message@@3PADA[ecx], al

; 146  : 
; 147  : 		index++;

  00105	8b 45 d4	 mov	 eax, DWORD PTR _index$[ebp]
  00108	83 c0 01	 add	 eax, 1
  0010b	89 45 d4	 mov	 DWORD PTR _index$[ebp], eax

; 148  : 
; 149  : 		if (index == 5)

  0010e	83 7d d4 05	 cmp	 DWORD PTR _index$[ebp], 5
  00112	75 07		 jne	 SHORT $LN8@get_securi

; 150  : 		{
; 151  : 			index = 0;

  00114	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0
$LN8@get_securi:

; 152  : 		}
; 153  : 	}

  0011b	eb b9		 jmp	 SHORT $LN2@get_securi
$LN3@get_securi:

; 154  : 
; 155  : 	debug_log ("SECURITY MESSAGE: %s", security_message);

  0011d	68 00 00 00 00	 push	 OFFSET ?security_message@@3PADA
  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PDOGCKLJ@SECURITY?5MESSAGE?3?5?$CFs@
  00127	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0012c	83 c4 08	 add	 esp, 8

; 156  : 
; 157  : 	return (security_message);

  0012f	b8 00 00 00 00	 mov	 eax, OFFSET ?security_message@@3PADA
$LN1@get_securi:

; 158  : }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
?get_security_message@@YGPBDXZ ENDP			; get_security_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
