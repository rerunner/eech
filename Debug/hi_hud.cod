; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?backup_sight_colour@@3UREAL_COLOUR@@A		; backup_sight_colour
_BSS	SEGMENT
?backup_sight_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; backup_sight_colour
_BSS	ENDS
PUBLIC	_atanf
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	_tanf
PUBLIC	?atan@@YGMM@Z					; atan
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?tan@@YGMM@Z					; tan
PUBLIC	?initialise_hind_hud@@YGXXZ			; initialise_hind_hud
PUBLIC	?deinitialise_hind_hud@@YGXXZ			; deinitialise_hind_hud
PUBLIC	?draw_hind_hud_on_cockpit@@YGXH@Z		; draw_hind_hud_on_cockpit
PUBLIC	?draw_hind_hud_on_texture@@YGXXZ		; draw_hind_hud_on_texture
PUBLIC	?draw_external_hind_hud@@YGXXZ			; draw_external_hind_hud
PUBLIC	?draw_hind_hms@@YGXXZ				; draw_hind_hms
PUBLIC	?get_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ	; get_hind_hud_colour
PUBLIC	?get_next_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ	; get_next_hind_hud_colour
PUBLIC	?get_prev_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ	; get_prev_hind_hud_colour
PUBLIC	?toggle_hind_backup_sight@@YGXXZ		; toggle_hind_backup_sight
PUBLIC	?get_hud_aiming_range@@YGMXZ			; get_hud_aiming_range
PUBLIC	?__LINE__Var@?0??clip_2d_point_to_hud_extent@@YGXPAM0@Z@4JA ; `clip_2d_point_to_hud_extent'::`1'::__LINE__Var
PUBLIC	??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_01FJMABOPO@x@				; `string'
PUBLIC	??_C@_01EANLCPLP@y@				; `string'
PUBLIC	??_C@_0BH@FLABOBHK@Untextured?5HUD?5display@	; `string'
PUBLIC	?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA ; `display_weapon_information'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??display_target_information@@YGXXZ@4JA ; `display_target_information'::`1'::__LINE__Var
PUBLIC	??_C@_09JLFDDBCD@NO?5TARGET@			; `string'
PUBLIC	__real@3d0f5c29
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d99999a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e87ae14
PUBLIC	__real@3e99999a
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f333333
PUBLIC	__real@3f4c987100000000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f7fbe77
PUBLIC	__real@3f9ea35492492492
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc0f5c280000000
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fcd6026027cd6eb
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd0a0b023c9b3bd
PUBLIC	__real@3fd0f5c280000000
PUBLIC	__real@3fd1111111111111
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd47ae147ae147b
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3feff7ced916872b
PUBLIC	__real@4000000000000000
PUBLIC	__real@4051800000000000
PUBLIC	__real@407e000000000000
PUBLIC	__real@4084000000000000
PUBLIC	__real@40af400000000000
PUBLIC	__real@43000000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@457a0000
PUBLIC	__real@bd0f5c29
PUBLIC	__real@bd99999a
PUBLIC	__real@bdcccccd
PUBLIC	__real@be4ccccd
PUBLIC	__real@be99999a
PUBLIC	__real@bf000000
PUBLIC	__real@bf19999a
PUBLIC	__real@bf333333
PUBLIC	__real@bf400000
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf666666
PUBLIC	__real@bf800000
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_memcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_tan:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_view_offset@@YGXPAUENV_2D@@MM@Z:PROC	; set_2d_view_offset
EXTRN	?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z:PROC	; set_2d_pixel
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z:PROC ; get_ballistic_pitch_deflection
EXTRN	?set_main_3d_full_screen_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@@Z:PROC ; set_main_3d_full_screen_params
EXTRN	?getViewpointOffsetX@@YGMM@Z:PROC		; getViewpointOffsetX
EXTRN	?getViewpointOffsetY@@YGMM@Z:PROC		; getViewpointOffsetY
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_triangulated_by_position_range@@YGMPAUVEC3D@@0@Z:PROC ; get_triangulated_by_position_range
EXTRN	?electrical_system_active@@YGHXZ:PROC		; electrical_system_active
EXTRN	?get_eo_tracking_point@@YGPAUVEC3D@@XZ:PROC	; get_eo_tracking_point
EXTRN	?eo_is_locked@@YGHXZ:PROC			; eo_is_locked
EXTRN	?get_eo_azimuth_and_elevation@@YGXPAM0@Z:PROC	; get_eo_azimuth_and_elevation
EXTRN	?get_hind_3d_cockpit_hud_view_position@@YGXPAM00@Z:PROC ; get_hind_3d_cockpit_hud_view_position
EXTRN	?get_time_acceleration@@YGHXZ:PROC		; get_time_acceleration
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A:DWORD ; objects_3d_scene_database
EXTRN	?objects_3d_data@@3PAUOBJECT_3D@@A:DWORD	; objects_3d_data
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?custom_3d_models@@3Uinstalled_custom_3d_models@@A:QWORD ; custom_3d_models
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?full_screen_x_mid@@3MA:DWORD			; full_screen_x_mid
EXTRN	?full_screen_y_mid@@3MA:DWORD			; full_screen_y_mid
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?wide_cockpit_position@@3PAUCOCKPIT_POSITION@@A:BYTE ; wide_cockpit_position
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?hud_colour@@3UREAL_COLOUR@@A:DWORD		; hud_colour
EXTRN	?display_hud_layout_grid@@3HA:DWORD		; display_hud_layout_grid
EXTRN	?hud_mode@@3W4HUD_MODES@@A:DWORD		; hud_mode
EXTRN	?hind_damage@@3THIND_DAMAGE_FLAGS@@A:DWORD	; hind_damage
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?hud_env@@3PAUENV_2D@@A DD 01H DUP (?)			; hud_env
?hud_viewport_size@@3MA DD 01H DUP (?)			; hud_viewport_size
?hud_viewport_x_org@@3MA DD 01H DUP (?)			; hud_viewport_x_org
?hud_viewport_y_org@@3MA DD 01H DUP (?)			; hud_viewport_y_org
?hud_viewport_x_min@@3MA DD 01H DUP (?)			; hud_viewport_x_min
?hud_viewport_y_min@@3MA DD 01H DUP (?)			; hud_viewport_y_min
?hud_viewport_x_max@@3MA DD 01H DUP (?)			; hud_viewport_x_max
?hud_viewport_y_max@@3MA DD 01H DUP (?)			; hud_viewport_y_max
?backup_sight_active@@3HA DD 01H DUP (?)		; backup_sight_active
?draw_large_hud@@3HA DD 01H DUP (?)			; draw_large_hud
?hud_width@@3MA DD 01H DUP (?)				; hud_width
?hud_height@@3MA DD 01H DUP (?)				; hud_height
?hud_distance@@3MA DD 01H DUP (?)			; hud_distance
?hud_position_z@@3MA DD 01H DUP (?)			; hud_position_z
?hud_position_y@@3MA DD 01H DUP (?)			; hud_position_y
?hud_screen_x_min@@3MA DD 01H DUP (?)			; hud_screen_x_min
?hud_screen_y_min@@3MA DD 01H DUP (?)			; hud_screen_y_min
?hud_screen_x_max@@3MA DD 01H DUP (?)			; hud_screen_x_max
?hud_screen_y_max@@3MA DD 01H DUP (?)			; hud_screen_y_max
?hud_screen_x_scale@@3MA DD 01H DUP (?)			; hud_screen_x_scale
?hud_screen_y_scale@@3MA DD 01H DUP (?)			; hud_screen_y_scale
?hud_display_model@@3PAUOBJECT_3D@@A DD 01H DUP (?)	; hud_display_model
?num_texture_coordinates@@3IA DD 01H DUP (?)		; num_texture_coordinates
?hud_texture_uv_coordinates@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A DD 01H DUP (?) ; hud_texture_uv_coordinates
?hud_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; hud_texture_screen
?clear_hud_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_hud_colour
?gun_pipper_points@@3PAY01MA DD 08cH DUP (?)		; gun_pipper_points
?gun_pipper_points2@@3PAY01MA DD 08cH DUP (?)		; gun_pipper_points2
?hud_aim_range@@3MA DD 01H DUP (?)			; hud_aim_range
?angle_of_drop@?1??get_ballistic_weapon_drop@@YGMH@Z@4MA DD 01H DUP (?) ; `get_ballistic_weapon_drop'::`2'::angle_of_drop
?hind_hud_colours@@3PAUREAL_COLOUR@@A DD 04H DUP (?)	; hind_hud_colours
?current_hud_colour@@3HA DD 01H DUP (?)			; current_hud_colour
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd0f5c29
CONST	SEGMENT
__real@bd0f5c29 DD 0bd0f5c29r			; -0.035
CONST	ENDS
;	COMDAT __real@457a0000
CONST	SEGMENT
__real@457a0000 DD 0457a0000r			; 4000
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@40af400000000000
CONST	SEGMENT
__real@40af400000000000 DQ 040af400000000000r	; 4000
CONST	ENDS
;	COMDAT __real@4084000000000000
CONST	SEGMENT
__real@4084000000000000 DQ 04084000000000000r	; 640
CONST	ENDS
;	COMDAT __real@407e000000000000
CONST	SEGMENT
__real@407e000000000000 DQ 0407e000000000000r	; 480
CONST	ENDS
;	COMDAT __real@4051800000000000
CONST	SEGMENT
__real@4051800000000000 DQ 04051800000000000r	; 70
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3feff7ced916872b
CONST	SEGMENT
__real@3feff7ced916872b DQ 03feff7ced916872br	; 0.999
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd47ae147ae147b
CONST	SEGMENT
__real@3fd47ae147ae147b DQ 03fd47ae147ae147br	; 0.32
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd1111111111111
CONST	SEGMENT
__real@3fd1111111111111 DQ 03fd1111111111111r	; 0.266667
CONST	ENDS
;	COMDAT __real@3fd0f5c280000000
CONST	SEGMENT
__real@3fd0f5c280000000 DQ 03fd0f5c280000000r	; 0.265
CONST	ENDS
;	COMDAT __real@3fd0a0b023c9b3bd
CONST	SEGMENT
__real@3fd0a0b023c9b3bd DQ 03fd0a0b023c9b3bdr	; 0.259808
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fcd6026027cd6eb
CONST	SEGMENT
__real@3fcd6026027cd6eb DQ 03fcd6026027cd6ebr	; 0.229497
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc0f5c280000000
CONST	SEGMENT
__real@3fc0f5c280000000 DQ 03fc0f5c280000000r	; 0.1325
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f9ea35492492492
CONST	SEGMENT
__real@3f9ea35492492492 DQ 03f9ea35492492492r	; 0.0299199
CONST	ENDS
;	COMDAT __real@3f7fbe77
CONST	SEGMENT
__real@3f7fbe77 DD 03f7fbe77r			; 0.999
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4c987100000000
CONST	SEGMENT
__real@3f4c987100000000 DQ 03f4c987100000000r	; 0.000872665
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e87ae14
CONST	SEGMENT
__real@3e87ae14 DD 03e87ae14r			; 0.265
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d0f5c29
CONST	SEGMENT
__real@3d0f5c29 DD 03d0f5c29r			; 0.035
CONST	ENDS
;	COMDAT ??_C@_09JLFDDBCD@NO?5TARGET@
CONST	SEGMENT
??_C@_09JLFDDBCD@NO?5TARGET@ DB 'NO TARGET', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_target_information@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_target_information@@YGXXZ@4JA DD 031cH ; `display_target_information'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA DD 02c3H ; `display_weapon_information'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@FLABOBHK@Untextured?5HUD?5display@
CONST	SEGMENT
??_C@_0BH@FLABOBHK@Untextured?5HUD?5display@ DB 'Untextured HUD display', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EANLCPLP@y@
CONST	SEGMENT
??_C@_01EANLCPLP@y@ DB 'y', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01FJMABOPO@x@
CONST	SEGMENT
??_C@_01FJMABOPO@x@ DB 'x', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hu'
	DB	'd.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??clip_2d_point_to_hud_extent@@YGXPAM0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??clip_2d_point_to_hud_extent@@YGXPAM0@Z@4JA DD 0b9H ; `clip_2d_point_to_hud_extent'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?small_hud_plus@@3PADA DB 03H				; small_hud_plus
	DB	03H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	ORG $+3
?big_hud_dot@@3PADA DB 05H				; big_hud_dot
	DB	05H
	DB	0feH
	DB	0feH
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?get_ballistic_weapon_drop@@YGMH@Z
_TEXT	SEGMENT
tv180 = -112						; size = 4
tv128 = -108						; size = 8
tv172 = -100						; size = 4
tv129 = -96						; size = 8
tv163 = -88						; size = 4
_pitch$ = -20						; size = 4
_height$ = -16						; size = 4
_range_diff$ = -12					; size = 4
_triangulated_range$ = -8				; size = 4
_time_of_flight$ = -4					; size = 4
_weapon_sub_type$ = 8					; size = 4
?get_ballistic_weapon_drop@@YGMH@Z PROC			; get_ballistic_weapon_drop, COMDAT

; 671  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  : #define MAX_RANGE 4000.0
; 673  : 	static float
; 674  : 		angle_of_drop = 0.0;
; 675  : 
; 676  : 	float
; 677  : 		time_of_flight,
; 678  : 		triangulated_range,
; 679  : 		range_diff,
; 680  : 		height = current_flight_dynamics->radar_altitude.value,

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  00016	f3 0f 11 45 f0	 movss	 DWORD PTR _height$[ebp], xmm0

; 681  : 		pitch = current_flight_dynamics->pitch.value;

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00020	f3 0f 10 80 5c
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8540]
  00028	f3 0f 11 45 ec	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 682  : 
; 683  : 	if (get_time_acceleration() != TIME_ACCELERATION_PAUSE)

  0002d	e8 00 00 00 00	 call	 ?get_time_acceleration@@YGHXZ ; get_time_acceleration
  00032	85 c0		 test	 eax, eax
  00034	0f 84 a4 01 00
	00		 je	 $LN7@get_ballis

; 684  : 	{
; 685  : 		if (pitch > (angle_of_drop + rad(0.05)) || height < 2.0)

  0003a	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  0003f	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?angle_of_drop@?1??get_ballistic_weapon_drop@@YGMH@Z@4MA
  00047	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3f4c987100000000
  0004f	66 0f 2f c1	 comisd	 xmm0, xmm1
  00053	77 13		 ja	 SHORT $LN5@get_ballis
  00055	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _height$[ebp]
  0005a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4000000000000000
  00062	66 0f 2f c8	 comisd	 xmm1, xmm0
  00066	76 12		 jbe	 SHORT $LN3@get_ballis
$LN5@get_ballis:

; 686  : 			triangulated_range = MAX_RANGE;

  00068	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@457a0000
  00070	f3 0f 11 45 f8	 movss	 DWORD PTR _triangulated_range$[ebp], xmm0

; 687  : 		else

  00075	e9 d8 00 00 00	 jmp	 $LN4@get_ballis
$LN3@get_ballis:

; 688  : 			triangulated_range = bound(height / tan(-pitch + angle_of_drop), 0.0, MAX_RANGE);

  0007a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0007f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00086	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?angle_of_drop@?1??get_ballistic_weapon_drop@@YGMH@Z@4MA
  0008e	51		 push	 ecx
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00099	d9 5d a8	 fstp	 DWORD PTR tv163[ebp]
  0009c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _height$[ebp]
  000a1	f3 0f 5e 45 a8	 divss	 xmm0, DWORD PTR tv163[ebp]
  000a6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000aa	0f 57 c9	 xorps	 xmm1, xmm1
  000ad	66 0f 2f c8	 comisd	 xmm1, xmm0
  000b1	76 0d		 jbe	 SHORT $LN11@get_ballis
  000b3	0f 57 c0	 xorps	 xmm0, xmm0
  000b6	f2 0f 11 45 a0	 movsd	 QWORD PTR tv129[ebp], xmm0
  000bb	e9 88 00 00 00	 jmp	 $LN12@get_ballis
$LN11@get_ballis:
  000c0	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  000c5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000cc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?angle_of_drop@?1??get_ballistic_weapon_drop@@YGMH@Z@4MA
  000d4	51		 push	 ecx
  000d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000da	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  000df	d9 5d 9c	 fstp	 DWORD PTR tv172[ebp]
  000e2	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _height$[ebp]
  000e7	f3 0f 5e 45 9c	 divss	 xmm0, DWORD PTR tv172[ebp]
  000ec	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000f0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40af400000000000
  000f8	76 0f		 jbe	 SHORT $LN9@get_ballis
  000fa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40af400000000000
  00102	f2 0f 11 45 94	 movsd	 QWORD PTR tv128[ebp], xmm0
  00107	eb 35		 jmp	 SHORT $LN10@get_ballis
$LN9@get_ballis:
  00109	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0010e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00115	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?angle_of_drop@?1??get_ballistic_weapon_drop@@YGMH@Z@4MA
  0011d	51		 push	 ecx
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00128	d9 5d 90	 fstp	 DWORD PTR tv180[ebp]
  0012b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _height$[ebp]
  00130	f3 0f 5e 45 90	 divss	 xmm0, DWORD PTR tv180[ebp]
  00135	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00139	f2 0f 11 45 94	 movsd	 QWORD PTR tv128[ebp], xmm0
$LN10@get_ballis:
  0013e	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv128[ebp]
  00143	f2 0f 11 45 a0	 movsd	 QWORD PTR tv129[ebp], xmm0
$LN12@get_ballis:
  00148	f2 0f 5a 45 a0	 cvtsd2ss xmm0, QWORD PTR tv129[ebp]
  0014d	f3 0f 11 45 f8	 movss	 DWORD PTR _triangulated_range$[ebp], xmm0
$LN4@get_ballis:

; 689  : 
; 690  : 		range_diff = triangulated_range - hud_aim_range;

  00152	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _triangulated_range$[ebp]
  00157	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?hud_aim_range@@3MA
  0015f	f3 0f 11 45 f4	 movss	 DWORD PTR _range_diff$[ebp], xmm0

; 691  : 		// move the aiming range in gradual steps, so as not to come into a oscilating
; 692  : 		// state where it continousely overcorrects in alternating directions
; 693  : 		hud_aim_range += 0.25 * range_diff;

  00164	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _range_diff$[ebp]
  00169	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00171	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_aim_range@@3MA
  00179	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0017d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00181	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_aim_range@@3MA, xmm0

; 694  : 
; 695  : 		if (get_ballistic_pitch_deflection(weapon_sub_type, hud_aim_range, pitch, &angle_of_drop, &time_of_flight, FALSE, TRUE))

  00189	6a 01		 push	 1
  0018b	6a 00		 push	 0
  0018d	8d 45 fc	 lea	 eax, DWORD PTR _time_of_flight$[ebp]
  00190	50		 push	 eax
  00191	68 00 00 00 00	 push	 OFFSET ?angle_of_drop@?1??get_ballistic_weapon_drop@@YGMH@Z@4MA
  00196	51		 push	 ecx
  00197	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_aim_range@@3MA
  001aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001af	8b 4d 08	 mov	 ecx, DWORD PTR _weapon_sub_type$[ebp]
  001b2	51		 push	 ecx
  001b3	e8 00 00 00 00	 call	 ?get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z ; get_ballistic_pitch_deflection
  001b8	85 c0		 test	 eax, eax
  001ba	74 17		 je	 SHORT $LN6@get_ballis

; 696  : 			angle_of_drop -= pitch;

  001bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?angle_of_drop@?1??get_ballistic_weapon_drop@@YGMH@Z@4MA
  001c4	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _pitch$[ebp]
  001c9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?angle_of_drop@?1??get_ballistic_weapon_drop@@YGMH@Z@4MA, xmm0

; 697  : 		else

  001d1	eb 0b		 jmp	 SHORT $LN7@get_ballis
$LN6@get_ballis:

; 698  : 			angle_of_drop = 0.0;

  001d3	0f 57 c0	 xorps	 xmm0, xmm0
  001d6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?angle_of_drop@?1??get_ballistic_weapon_drop@@YGMH@Z@4MA, xmm0
$LN7@get_ballis:

; 699  : 	}
; 700  : 
; 701  : 
; 702  : 	hud_aim_range;
; 703  : 	return angle_of_drop;

  001de	d9 05 00 00 00
	00		 fld	 DWORD PTR ?angle_of_drop@?1??get_ballistic_weapon_drop@@YGMH@Z@4MA

; 704  : }

  001e4	5f		 pop	 edi
  001e5	5e		 pop	 esi
  001e6	5b		 pop	 ebx
  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c2 04 00	 ret	 4
?get_ballistic_weapon_drop@@YGMH@Z ENDP			; get_ballistic_weapon_drop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?angles_to_hud_coordinates@@YGHMMPAM0H@Z
_TEXT	SEGMENT
tv137 = -68						; size = 4
tv129 = -68						; size = 4
_azimuth$ = 8						; size = 4
_elevation$ = 12					; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_clamp_to_edge$ = 24					; size = 4
?angles_to_hud_coordinates@@YGHMMPAM0H@Z PROC		; angles_to_hud_coordinates, COMDAT

; 641  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 642  : 	*x = atan(azimuth) * hud_position_z / (0.5 * hud_width);

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _azimuth$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 ?atan@@YGMM@Z		; atan
  00019	d9 5d bc	 fstp	 DWORD PTR tv129[ebp]
  0001c	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR tv129[ebp]
  00021	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?hud_position_z@@3MA
  00029	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0002d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_width@@3MA
  00035	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0003d	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00041	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00045	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00048	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 643  : 	*y = atan(elevation) * hud_position_z / (0.5 * hud_height);

  0004c	51		 push	 ecx
  0004d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _elevation$[ebp]
  00052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00057	e8 00 00 00 00	 call	 ?atan@@YGMM@Z		; atan
  0005c	d9 5d bc	 fstp	 DWORD PTR tv137[ebp]
  0005f	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR tv137[ebp]
  00064	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?hud_position_z@@3MA
  0006c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00070	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_height@@3MA
  00078	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00080	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00084	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00088	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  0008b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 644  : 
; 645  : 	if (clamp_to_edge)

  0008f	83 7d 18 00	 cmp	 DWORD PTR _clamp_to_edge$[ebp], 0
  00093	74 0f		 je	 SHORT $LN2@angles_to_

; 646  : 		clip_2d_point_to_hud_extent(x, y);

  00095	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  00098	50		 push	 eax
  00099	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 ?clip_2d_point_to_hud_extent@@YGXPAM0@Z ; clip_2d_point_to_hud_extent

; 647  : 	else

  000a2	eb 5c		 jmp	 SHORT $LN7@angles_to_
$LN2@angles_to_:

; 648  : 	{
; 649  : 		if (*x < HUD_WINDOW_X_MIN)

  000a4	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  000a7	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000ab	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  000b3	66 0f 2f c8	 comisd	 xmm1, xmm0
  000b7	76 04		 jbe	 SHORT $LN4@angles_to_

; 650  : 			return FALSE;

  000b9	33 c0		 xor	 eax, eax
  000bb	eb 48		 jmp	 SHORT $LN1@angles_to_
$LN4@angles_to_:

; 651  : 		if (*x > HUD_WINDOW_X_MAX)

  000bd	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  000c0	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000c4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3feff7ced916872b
  000cc	76 04		 jbe	 SHORT $LN5@angles_to_

; 652  : 			return FALSE;

  000ce	33 c0		 xor	 eax, eax
  000d0	eb 33		 jmp	 SHORT $LN1@angles_to_
$LN5@angles_to_:

; 653  : 		if (*y < HUD_WINDOW_Y_MIN)

  000d2	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  000d5	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000d9	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  000e1	66 0f 2f c8	 comisd	 xmm1, xmm0
  000e5	76 04		 jbe	 SHORT $LN6@angles_to_

; 654  : 			return FALSE;

  000e7	33 c0		 xor	 eax, eax
  000e9	eb 1a		 jmp	 SHORT $LN1@angles_to_
$LN6@angles_to_:

; 655  : 		if (*y > HUD_WINDOW_Y_MAX)

  000eb	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  000ee	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000f2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3feff7ced916872b
  000fa	76 04		 jbe	 SHORT $LN7@angles_to_

; 656  : 			return FALSE;

  000fc	33 c0		 xor	 eax, eax
  000fe	eb 05		 jmp	 SHORT $LN1@angles_to_
$LN7@angles_to_:

; 657  : 	}
; 658  : 
; 659  : 	return TRUE;

  00100	b8 01 00 00 00	 mov	 eax, 1
$LN1@angles_to_:

; 660  : }

  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 14 00	 ret	 20			; 00000014H
?angles_to_hud_coordinates@@YGHMMPAM0H@Z ENDP		; angles_to_hud_coordinates
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?draw_aim_marker@@YGXMMMM@Z
_TEXT	SEGMENT
tv164 = -104						; size = 8
tv150 = -104						; size = 8
tv165 = -96						; size = 8
tv151 = -96						; size = 8
_end_i$1 = -24						; size = 4
_min_range_i$2 = -20					; size = 4
_i$3 = -16						; size = 4
_end$ = -12						; size = 4
_start$ = -8						; size = 4
_tick_end$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_range$ = 16						; size = 4
_min_range$ = 20					; size = 4
?draw_aim_marker@@YGXMMMM@Z PROC			; draw_aim_marker, COMDAT

; 598  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 599  : 	const float
; 600  : 		tick_end = GUN_PIPPER_SIZE - 0.035,

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e87ae14
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _tick_end$[ebp], xmm0

; 601  : 		start = 0.05,

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  0001e	f3 0f 11 45 f8	 movss	 DWORD PTR _start$[ebp], xmm0

; 602  : 		end = 0.25;

  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0002b	f3 0f 11 45 f4	 movss	 DWORD PTR _end$[ebp], xmm0

; 603  : 
; 604  : 	// draw cross
; 605  : 	draw_2d_half_thick_line(x, y + start, x, y + end, hud_colour);

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00035	50		 push	 eax
  00036	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  0003b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3e800000
  00043	51		 push	 ecx
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	51		 push	 ecx
  0004a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00059	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d4ccccd
  00061	51		 push	 ecx
  00062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00067	51		 push	 ecx
  00068	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 606  : 	draw_2d_half_thick_line(x, y - start, x, y - end, hud_colour);

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0007c	50		 push	 eax
  0007d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00082	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3e800000
  0008a	51		 push	 ecx
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	51		 push	 ecx
  00091	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  000a0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3d4ccccd
  000a8	51		 push	 ecx
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  000b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b9	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 607  : 	draw_2d_half_thick_line(x + start, y, x + end, y, hud_colour);

  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000c3	50		 push	 eax
  000c4	51		 push	 ecx
  000c5	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cf	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  000d4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3e800000
  000dc	51		 push	 ecx
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	51		 push	 ecx
  000e3	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  000f2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d4ccccd
  000fa	51		 push	 ecx
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 608  : 	draw_2d_half_thick_line(x - start, y, x - end, y, hud_colour);

  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0010a	50		 push	 eax
  0010b	51		 push	 ecx
  0010c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00111	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00116	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0011b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3e800000
  00123	51		 push	 ecx
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	51		 push	 ecx
  0012a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00139	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3d4ccccd
  00141	51		 push	 ecx
  00142	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00147	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 609  : 
; 610  : 	// draw range bar
; 611  : 	{
; 612  : 		int
; 613  : 			i,
; 614  : 			min_range_i,
; 615  : 			end_i;
; 616  : 
; 617  : 		for (i=0; i<NUM_GUN_PIPPER_POINTS; i++)

  0014c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  00153	eb 09		 jmp	 SHORT $LN4@draw_aim_m
$LN2@draw_aim_m:
  00155	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  00158	83 c0 01	 add	 eax, 1
  0015b	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@draw_aim_m:
  0015e	83 7d f0 46	 cmp	 DWORD PTR _i$3[ebp], 70	; 00000046H
  00162	7d 4b		 jge	 SHORT $LN3@draw_aim_m

; 618  : 			set_2d_pixel(x + gun_pipper_points[i][0], y + gun_pipper_points[i][1], hud_colour);

  00164	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00169	50		 push	 eax
  0016a	b9 04 00 00 00	 mov	 ecx, 4
  0016f	c1 e1 00	 shl	 ecx, 0
  00172	8b 55 f0	 mov	 edx, DWORD PTR _i$3[ebp]
  00175	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  0017a	f3 0f 58 84 d1
	00 00 00 00	 addss	 xmm0, DWORD PTR ?gun_pipper_points@@3PAY01MA[ecx+edx*8]
  00183	51		 push	 ecx
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	b8 04 00 00 00	 mov	 eax, 4
  0018e	6b c8 00	 imul	 ecx, eax, 0
  00191	8b 55 f0	 mov	 edx, DWORD PTR _i$3[ebp]
  00194	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00199	f3 0f 58 84 d1
	00 00 00 00	 addss	 xmm0, DWORD PTR ?gun_pipper_points@@3PAY01MA[ecx+edx*8]
  001a2	51		 push	 ecx
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	e8 00 00 00 00	 call	 ?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z ; set_2d_pixel
  001ad	eb a6		 jmp	 SHORT $LN2@draw_aim_m
$LN3@draw_aim_m:

; 619  : 
; 620  : 		min_range_i = bound((min_range / GUN_PIPPER_MAX_RANGE) * NUM_GUN_PIPPER_POINTS, 0, NUM_GUN_PIPPER_POINTS);

  001af	f3 0f 5a 45 14	 cvtss2sd xmm0, DWORD PTR _min_range$[ebp]
  001b4	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40af400000000000
  001bc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4051800000000000
  001c4	0f 57 c9	 xorps	 xmm1, xmm1
  001c7	66 0f 2f c8	 comisd	 xmm1, xmm0
  001cb	76 0a		 jbe	 SHORT $LN13@draw_aim_m
  001cd	0f 57 c0	 xorps	 xmm0, xmm0
  001d0	f2 0f 11 45 a0	 movsd	 QWORD PTR tv151[ebp], xmm0
  001d5	eb 52		 jmp	 SHORT $LN14@draw_aim_m
$LN13@draw_aim_m:
  001d7	f3 0f 5a 45 14	 cvtss2sd xmm0, DWORD PTR _min_range$[ebp]
  001dc	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40af400000000000
  001e4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4051800000000000
  001ec	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4051800000000000
  001f4	76 0f		 jbe	 SHORT $LN11@draw_aim_m
  001f6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4051800000000000
  001fe	f2 0f 11 45 98	 movsd	 QWORD PTR tv150[ebp], xmm0
  00203	eb 1a		 jmp	 SHORT $LN12@draw_aim_m
$LN11@draw_aim_m:
  00205	f3 0f 5a 45 14	 cvtss2sd xmm0, DWORD PTR _min_range$[ebp]
  0020a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40af400000000000
  00212	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4051800000000000
  0021a	f2 0f 11 45 98	 movsd	 QWORD PTR tv150[ebp], xmm0
$LN12@draw_aim_m:
  0021f	f2 0f 10 45 98	 movsd	 xmm0, QWORD PTR tv150[ebp]
  00224	f2 0f 11 45 a0	 movsd	 QWORD PTR tv151[ebp], xmm0
$LN14@draw_aim_m:
  00229	f2 0f 2c 45 a0	 cvttsd2si eax, QWORD PTR tv151[ebp]
  0022e	89 45 ec	 mov	 DWORD PTR _min_range_i$2[ebp], eax

; 621  : 		end_i = bound((range / GUN_PIPPER_MAX_RANGE) * NUM_GUN_PIPPER_POINTS, 0, NUM_GUN_PIPPER_POINTS);

  00231	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00236	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40af400000000000
  0023e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4051800000000000
  00246	0f 57 c9	 xorps	 xmm1, xmm1
  00249	66 0f 2f c8	 comisd	 xmm1, xmm0
  0024d	76 0a		 jbe	 SHORT $LN17@draw_aim_m
  0024f	0f 57 c0	 xorps	 xmm0, xmm0
  00252	f2 0f 11 45 a0	 movsd	 QWORD PTR tv165[ebp], xmm0
  00257	eb 52		 jmp	 SHORT $LN18@draw_aim_m
$LN17@draw_aim_m:
  00259	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  0025e	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40af400000000000
  00266	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4051800000000000
  0026e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4051800000000000
  00276	76 0f		 jbe	 SHORT $LN15@draw_aim_m
  00278	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4051800000000000
  00280	f2 0f 11 45 98	 movsd	 QWORD PTR tv164[ebp], xmm0
  00285	eb 1a		 jmp	 SHORT $LN16@draw_aim_m
$LN15@draw_aim_m:
  00287	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  0028c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40af400000000000
  00294	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4051800000000000
  0029c	f2 0f 11 45 98	 movsd	 QWORD PTR tv164[ebp], xmm0
$LN16@draw_aim_m:
  002a1	f2 0f 10 45 98	 movsd	 xmm0, QWORD PTR tv164[ebp]
  002a6	f2 0f 11 45 a0	 movsd	 QWORD PTR tv165[ebp], xmm0
$LN18@draw_aim_m:
  002ab	f2 0f 2c 45 a0	 cvttsd2si eax, QWORD PTR tv165[ebp]
  002b0	89 45 e8	 mov	 DWORD PTR _end_i$1[ebp], eax

; 622  : 
; 623  : 		for (i=0; i<end_i; i++)

  002b3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  002ba	eb 09		 jmp	 SHORT $LN7@draw_aim_m
$LN5@draw_aim_m:
  002bc	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002bf	83 c0 01	 add	 eax, 1
  002c2	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
$LN7@draw_aim_m:
  002c5	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002c8	3b 45 e8	 cmp	 eax, DWORD PTR _end_i$1[ebp]
  002cb	0f 8d ab 00 00
	00		 jge	 $LN6@draw_aim_m

; 624  : 		{
; 625  : 			if (i < min_range_i)

  002d1	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  002d4	3b 45 ec	 cmp	 eax, DWORD PTR _min_range_i$2[ebp]
  002d7	7d 50		 jge	 SHORT $LN8@draw_aim_m

; 626  : 				draw_2d_mono_sprite (small_hud_plus, x + gun_pipper_points2[i][0], y + gun_pipper_points2[i][1], hud_colour);

  002d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  002de	50		 push	 eax
  002df	b9 04 00 00 00	 mov	 ecx, 4
  002e4	c1 e1 00	 shl	 ecx, 0
  002e7	8b 55 f0	 mov	 edx, DWORD PTR _i$3[ebp]
  002ea	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  002ef	f3 0f 58 84 d1
	00 00 00 00	 addss	 xmm0, DWORD PTR ?gun_pipper_points2@@3PAY01MA[ecx+edx*8]
  002f8	51		 push	 ecx
  002f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fe	b8 04 00 00 00	 mov	 eax, 4
  00303	6b c8 00	 imul	 ecx, eax, 0
  00306	8b 55 f0	 mov	 edx, DWORD PTR _i$3[ebp]
  00309	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0030e	f3 0f 58 84 d1
	00 00 00 00	 addss	 xmm0, DWORD PTR ?gun_pipper_points2@@3PAY01MA[ecx+edx*8]
  00317	51		 push	 ecx
  00318	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031d	68 00 00 00 00	 push	 OFFSET ?small_hud_plus@@3PADA
  00322	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 627  : 			else

  00327	eb 4e		 jmp	 SHORT $LN9@draw_aim_m
$LN8@draw_aim_m:

; 628  : 				draw_2d_mono_sprite (big_hud_dot, x + gun_pipper_points2[i][0], y + gun_pipper_points2[i][1], hud_colour);

  00329	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0032e	50		 push	 eax
  0032f	b9 04 00 00 00	 mov	 ecx, 4
  00334	c1 e1 00	 shl	 ecx, 0
  00337	8b 55 f0	 mov	 edx, DWORD PTR _i$3[ebp]
  0033a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  0033f	f3 0f 58 84 d1
	00 00 00 00	 addss	 xmm0, DWORD PTR ?gun_pipper_points2@@3PAY01MA[ecx+edx*8]
  00348	51		 push	 ecx
  00349	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034e	b8 04 00 00 00	 mov	 eax, 4
  00353	6b c8 00	 imul	 ecx, eax, 0
  00356	8b 55 f0	 mov	 edx, DWORD PTR _i$3[ebp]
  00359	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0035e	f3 0f 58 84 d1
	00 00 00 00	 addss	 xmm0, DWORD PTR ?gun_pipper_points2@@3PAY01MA[ecx+edx*8]
  00367	51		 push	 ecx
  00368	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036d	68 00 00 00 00	 push	 OFFSET ?big_hud_dot@@3PADA
  00372	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN9@draw_aim_m:

; 629  : 		}

  00377	e9 40 ff ff ff	 jmp	 $LN5@draw_aim_m
$LN6@draw_aim_m:

; 630  : 	}
; 631  : 
; 632  : 	// draw range tick marks
; 633  : 	draw_2d_line(x, y + GUN_PIPPER_SIZE, x, y + tick_end, hud_colour);

  0037c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00381	50		 push	 eax
  00382	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00387	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3e87ae14
  0038f	51		 push	 ecx
  00390	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00395	51		 push	 ecx
  00396	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0039b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a0	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003a5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  003ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b1	51		 push	 ecx
  003b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b7	51		 push	 ecx
  003b8	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  003bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 634  : 	draw_2d_line(x + GUN_PIPPER_SIZE * 0.5, y + GUN_PIPPER_SIZE * SIN60, x + tick_end * 0.5, y + tick_end * SIN60, hud_colour);

  003c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  003cc	50		 push	 eax
  003cd	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003d2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcd6026027cd6eb
  003da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003de	51		 push	 ecx
  003df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e4	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  003e9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0f5c280000000
  003f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f5	51		 push	 ecx
  003f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fb	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00400	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0a0b023c9b3bd
  00408	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0040c	51		 push	 ecx
  0040d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00412	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00417	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  0041f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00423	51		 push	 ecx
  00424	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00429	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 635  : 	draw_2d_line(x + GUN_PIPPER_SIZE * SIN60, y + GUN_PIPPER_SIZE * 0.5, x + tick_end * SIN60, y + tick_end * 0.5, hud_colour);

  0042e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00433	50		 push	 eax
  00434	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00439	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0f5c280000000
  00441	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00445	51		 push	 ecx
  00446	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044b	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00450	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcd6026027cd6eb
  00458	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0045c	51		 push	 ecx
  0045d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00462	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00467	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  0046f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00473	51		 push	 ecx
  00474	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00479	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0047e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0a0b023c9b3bd
  00486	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0048a	51		 push	 ecx
  0048b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00490	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 636  : 	draw_2d_line(x + GUN_PIPPER_SIZE, y, x + GUN_PIPPER_SIZE - tick_end, y, hud_colour);

  00495	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0049a	50		 push	 eax
  0049b	51		 push	 ecx
  0049c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  004a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a6	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  004ab	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  004b3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd0f5c280000000
  004bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004bf	51		 push	 ecx
  004c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c5	51		 push	 ecx
  004c6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  004cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d0	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  004d5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  004dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e1	51		 push	 ecx
  004e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 637  : 	draw_2d_line(x + GUN_PIPPER_SIZE * SIN60, y - GUN_PIPPER_SIZE * 0.5, x + tick_end * SIN60, y - tick_end * 0.5, hud_colour);

  004ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  004f1	50		 push	 eax
  004f2	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  004f7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc0f5c280000000
  004ff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00503	51		 push	 ecx
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0050e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcd6026027cd6eb
  00516	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0051a	51		 push	 ecx
  0051b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00520	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00525	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  0052d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00531	51		 push	 ecx
  00532	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00537	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0053c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0a0b023c9b3bd
  00544	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00548	51		 push	 ecx
  00549	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 638  : }

  00553	5f		 pop	 edi
  00554	5e		 pop	 esi
  00555	5b		 pop	 ebx
  00556	8b e5		 mov	 esp, ebp
  00558	5d		 pop	 ebp
  00559	c2 10 00	 ret	 16			; 00000010H
?draw_aim_marker@@YGXMMMM@Z ENDP			; draw_aim_marker
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?draw_weapon_mode_hud@@YGXH@Z
_TEXT	SEGMENT
_draw_on_virtual_cockpit_texture$ = 8			; size = 4
?draw_weapon_mode_hud@@YGXH@Z PROC			; draw_weapon_mode_hud, COMDAT

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 294  : 	display_target_information();

  00009	e8 00 00 00 00	 call	 ?display_target_information@@YGXXZ ; display_target_information

; 295  : 	display_weapon_information();

  0000e	e8 00 00 00 00	 call	 ?display_weapon_information@@YGXXZ ; display_weapon_information

; 296  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?draw_weapon_mode_hud@@YGXH@Z ENDP			; draw_weapon_mode_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?draw_backup_sight@@YGXXZ
_TEXT	SEGMENT
_wide_tick$ = -8					; size = 4
_nar_tick$ = -4						; size = 4
?draw_backup_sight@@YGXXZ PROC				; draw_backup_sight, COMDAT

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 247  : 	const float
; 248  : 		nar_tick = 0.035,

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _nar_tick$[ebp], xmm0

; 249  : 		wide_tick = 0.075;

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  0001e	f3 0f 11 45 f8	 movss	 DWORD PTR _wide_tick$[ebp], xmm0

; 250  : 
; 251  : 	set_2d_pixel(0.0, 0.0, backup_sight_colour);

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	51		 push	 ecx
  00033	0f 57 c0	 xorps	 xmm0, xmm0
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 ?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z ; set_2d_pixel

; 252  : 	draw_2d_circle(0.0, 0.0, 0.15, backup_sight_colour);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	51		 push	 ecx
  00055	0f 57 c0	 xorps	 xmm0, xmm0
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	51		 push	 ecx
  0005e	0f 57 c0	 xorps	 xmm0, xmm0
  00061	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00066	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 253  : 	draw_2d_circle(0.0, 0.0, 0.4, backup_sight_colour);

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00070	50		 push	 eax
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	51		 push	 ecx
  00080	0f 57 c0	 xorps	 xmm0, xmm0
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	51		 push	 ecx
  00089	0f 57 c0	 xorps	 xmm0, xmm0
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 254  : 
; 255  : 	draw_2d_line(0.0, 0.6, 0.0, 0.1, backup_sight_colour);

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  0009b	50		 push	 eax
  0009c	51		 push	 ecx
  0009d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	51		 push	 ecx
  000ab	0f 57 c0	 xorps	 xmm0, xmm0
  000ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b3	51		 push	 ecx
  000b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	51		 push	 ecx
  000c2	0f 57 c0	 xorps	 xmm0, xmm0
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 256  : 	draw_2d_line(0.0, -0.1, 0.0, -1.0, backup_sight_colour);

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  000d4	50		 push	 eax
  000d5	51		 push	 ecx
  000d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e3	51		 push	 ecx
  000e4	0f 57 c0	 xorps	 xmm0, xmm0
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	51		 push	 ecx
  000ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  000f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fa	51		 push	 ecx
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 257  : 	draw_2d_line(0.8, 0.0, 0.1, 0.0, backup_sight_colour);

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  0010d	50		 push	 eax
  0010e	51		 push	 ecx
  0010f	0f 57 c0	 xorps	 xmm0, xmm0
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00125	51		 push	 ecx
  00126	0f 57 c0	 xorps	 xmm0, xmm0
  00129	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012e	51		 push	 ecx
  0012f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 258  : 	draw_2d_line(-0.8, 0.0, -0.1, 0.0, backup_sight_colour);

  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00146	50		 push	 eax
  00147	51		 push	 ecx
  00148	0f 57 c0	 xorps	 xmm0, xmm0
  0014b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00150	51		 push	 ecx
  00151	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	51		 push	 ecx
  0015f	0f 57 c0	 xorps	 xmm0, xmm0
  00162	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00167	51		 push	 ecx
  00168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 259  : 
; 260  : 	// horizontal tick marks
; 261  : 	draw_2d_line(-wide_tick, 0.2, wide_tick, 0.2, backup_sight_colour);

  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  0017f	50		 push	 eax
  00180	51		 push	 ecx
  00181	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00189	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018e	51		 push	 ecx
  0018f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  00197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019c	51		 push	 ecx
  0019d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  001a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001aa	51		 push	 ecx
  001ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 262  : 	draw_2d_line(-wide_tick, -0.2, wide_tick, -0.2, backup_sight_colour);

  001bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  001c2	50		 push	 eax
  001c3	51		 push	 ecx
  001c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  001cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d1	51		 push	 ecx
  001d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  001da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001df	51		 push	 ecx
  001e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  001e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ed	51		 push	 ecx
  001ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  001f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fb	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 263  : 	draw_2d_line(-wide_tick, -0.6, wide_tick, -0.6, backup_sight_colour);

  00200	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00205	50		 push	 eax
  00206	51		 push	 ecx
  00207	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0020f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00214	51		 push	 ecx
  00215	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  0021d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00222	51		 push	 ecx
  00223	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0022b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00230	51		 push	 ecx
  00231	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00239	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 264  : 	draw_2d_line(-wide_tick, -0.8, wide_tick, -0.8, backup_sight_colour);

  00243	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00248	50		 push	 eax
  00249	51		 push	 ecx
  0024a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	51		 push	 ecx
  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  00260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00265	51		 push	 ecx
  00266	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0026e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00273	51		 push	 ecx
  00274	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  0027c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00281	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 265  : 
; 266  : 	draw_2d_line(-nar_tick, 0.5, nar_tick, 0.5, backup_sight_colour);

  00286	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  0028b	50		 push	 eax
  0028c	51		 push	 ecx
  0028d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00295	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029a	51		 push	 ecx
  0029b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	51		 push	 ecx
  002a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  002b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b6	51		 push	 ecx
  002b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  002bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 267  : 	draw_2d_line(-nar_tick, 0.3, nar_tick, 0.3, backup_sight_colour);

  002c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  002ce	50		 push	 eax
  002cf	51		 push	 ecx
  002d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  002d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002dd	51		 push	 ecx
  002de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  002e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002eb	51		 push	 ecx
  002ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  002f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f9	51		 push	 ecx
  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  00302	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00307	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 268  : 	draw_2d_line(-nar_tick, -0.3, nar_tick, -0.3, backup_sight_colour);

  0030c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00311	50		 push	 eax
  00312	51		 push	 ecx
  00313	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0031b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00320	51		 push	 ecx
  00321	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00329	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032e	51		 push	 ecx
  0032f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00337	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033c	51		 push	 ecx
  0033d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 269  : 	draw_2d_line(-nar_tick, -0.5, nar_tick, -0.5, backup_sight_colour);

  0034f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00354	50		 push	 eax
  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	51		 push	 ecx
  00364	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  0036c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00371	51		 push	 ecx
  00372	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0037a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037f	51		 push	 ecx
  00380	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 270  : 	draw_2d_line(-nar_tick, -0.7, nar_tick, -0.7, backup_sight_colour);

  00392	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00397	50		 push	 eax
  00398	51		 push	 ecx
  00399	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  003a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a6	51		 push	 ecx
  003a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  003af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b4	51		 push	 ecx
  003b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  003bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c2	51		 push	 ecx
  003c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  003cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 271  : 	draw_2d_line(-nar_tick, -0.9, nar_tick, -0.9, backup_sight_colour);

  003d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  003da	50		 push	 eax
  003db	51		 push	 ecx
  003dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  003e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e9	51		 push	 ecx
  003ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  003f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f7	51		 push	 ecx
  003f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00400	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00405	51		 push	 ecx
  00406	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  0040e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00413	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 272  : 
; 273  : 	// vertical tick marks
; 274  : 	draw_2d_line(-0.6, wide_tick, -0.6, -wide_tick, backup_sight_colour);

  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  0041d	50		 push	 eax
  0041e	51		 push	 ecx
  0041f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00427	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042c	51		 push	 ecx
  0042d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043a	51		 push	 ecx
  0043b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  00443	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00448	51		 push	 ecx
  00449	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 275  : 	draw_2d_line(-0.2, wide_tick, -0.2, -wide_tick, backup_sight_colour);

  0045b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00460	50		 push	 eax
  00461	51		 push	 ecx
  00462	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  0046a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046f	51		 push	 ecx
  00470	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00478	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047d	51		 push	 ecx
  0047e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  00486	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048b	51		 push	 ecx
  0048c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00494	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00499	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 276  : 	draw_2d_line( 0.2, wide_tick,  0.2, -wide_tick, backup_sight_colour);

  0049e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  004a3	50		 push	 eax
  004a4	51		 push	 ecx
  004a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  004ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b2	51		 push	 ecx
  004b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  004bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c0	51		 push	 ecx
  004c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  004c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ce	51		 push	 ecx
  004cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  004d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004dc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 277  : 	draw_2d_line( 0.6, wide_tick,  0.6, -wide_tick, backup_sight_colour);

  004e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  004e6	50		 push	 eax
  004e7	51		 push	 ecx
  004e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  004f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f5	51		 push	 ecx
  004f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  004fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00503	51		 push	 ecx
  00504	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  0050c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00511	51		 push	 ecx
  00512	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0051a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 278  : 
; 279  : 	draw_2d_line(-0.7, nar_tick, -0.7, -nar_tick, backup_sight_colour);

  00524	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00529	50		 push	 eax
  0052a	51		 push	 ecx
  0052b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  00533	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00538	51		 push	 ecx
  00539	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	51		 push	 ecx
  00547	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  0054f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00554	51		 push	 ecx
  00555	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0055d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00562	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 280  : 	draw_2d_line(-0.5, nar_tick, -0.5, -nar_tick, backup_sight_colour);

  00567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  0056c	50		 push	 eax
  0056d	51		 push	 ecx
  0056e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  00576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057b	51		 push	 ecx
  0057c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	51		 push	 ecx
  0058a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00592	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00597	51		 push	 ecx
  00598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  005a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 281  : 	draw_2d_line(-0.3, nar_tick, -0.3, -nar_tick, backup_sight_colour);

  005aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  005af	50		 push	 eax
  005b0	51		 push	 ecx
  005b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  005b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005be	51		 push	 ecx
  005bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  005c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cc	51		 push	 ecx
  005cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  005d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005da	51		 push	 ecx
  005db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  005e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 282  : 
; 283  : 	draw_2d_line( 0.7, nar_tick,  0.7, -nar_tick, backup_sight_colour);

  005ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  005f2	50		 push	 eax
  005f3	51		 push	 ecx
  005f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  005fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00601	51		 push	 ecx
  00602	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0060a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060f	51		 push	 ecx
  00610	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00618	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061d	51		 push	 ecx
  0061e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00626	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 284  : 	draw_2d_line( 0.5, nar_tick,  0.5, -nar_tick, backup_sight_colour);

  00630	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00635	50		 push	 eax
  00636	51		 push	 ecx
  00637	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  0063f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00644	51		 push	 ecx
  00645	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0064d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00652	51		 push	 ecx
  00653	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  0065b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00660	51		 push	 ecx
  00661	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00669	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 285  : 	draw_2d_line( 0.3, nar_tick,  0.3, -nar_tick, backup_sight_colour);

  00673	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_sight_colour@@3UREAL_COLOUR@@A ; backup_sight_colour
  00678	50		 push	 eax
  00679	51		 push	 ecx
  0067a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  00682	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00687	51		 push	 ecx
  00688	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00690	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00695	51		 push	 ecx
  00696	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  0069e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a3	51		 push	 ecx
  006a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  006ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 286  : }

  006b6	5f		 pop	 edi
  006b7	5e		 pop	 esi
  006b8	5b		 pop	 ebx
  006b9	8b e5		 mov	 esp, ebp
  006bb	5d		 pop	 ebp
  006bc	c3		 ret	 0
?draw_backup_sight@@YGXXZ ENDP				; draw_backup_sight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 227  : 	float
; 228  : 		x,
; 229  : 		y;
; 230  : 
; 231  : 	if (display_hud_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_hud_layout_grid@@3HA, 0 ; display_hud_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 232  : 	{
; 233  : 		for (x = HUD_WINDOW_X_MIN; x <= HUD_WINDOW_X_MAX; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3feff7ced916872b
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 234  : 		{
; 235  : 			draw_2d_line (x, HUD_WINDOW_Y_MIN, x, HUD_WINDOW_Y_MAX, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 236  : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 237  : 
; 238  : 		for (y = HUD_WINDOW_Y_MIN; y <= HUD_WINDOW_Y_MAX; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3feff7ced916872b
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 239  : 		{
; 240  : 			draw_2d_line (HUD_WINDOW_X_MIN, y, HUD_WINDOW_X_MAX, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 241  : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 242  : 	}
; 243  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?clip_2d_point_to_hud_extent@@YGXPAM0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?clip_2d_point_to_hud_extent@@YGXPAM0@Z PROC		; clip_2d_point_to_hud_extent, COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  : 	ASSERT (x);

  00009	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@clip_2d_po
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??clip_2d_point_to_hud_extent@@YGXPAM0@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01FJMABOPO@x@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@clip_2d_po:

; 187  : 
; 188  : 	ASSERT (y);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@clip_2d_po
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??clip_2d_point_to_hud_extent@@YGXPAM0@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01EANLCPLP@y@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@clip_2d_po:

; 189  : 
; 190  : 	//
; 191  : 	// clipping assumes that the HUD origin is at (0.0, 0.0)
; 192  : 	//
; 193  : 
; 194  : 	if (*x > HUD_WINDOW_X_MAX)

  00045	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00048	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  0004c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3feff7ced916872b
  00054	76 36		 jbe	 SHORT $LN4@clip_2d_po

; 195  : 	{
; 196  : 		*y = (*y * HUD_WINDOW_X_MAX) / *x;

  00056	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00059	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  0005d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00068	f3 0f 5a 09	 cvtss2sd xmm1, DWORD PTR [ecx]
  0006c	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00070	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00074	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00077	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 197  : 
; 198  : 		*x = HUD_WINDOW_X_MAX;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00086	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0008a	eb 49		 jmp	 SHORT $LN6@clip_2d_po
$LN4@clip_2d_po:

; 199  : 	}
; 200  : 	else if (*x < HUD_WINDOW_X_MIN)

  0008c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0008f	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00093	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  0009b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0009f	76 34		 jbe	 SHORT $LN6@clip_2d_po

; 201  : 	{
; 202  : 		*y = (*y * HUD_WINDOW_X_MIN) / *x;

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000a4	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000a8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000b3	f3 0f 5a 09	 cvtss2sd xmm1, DWORD PTR [ecx]
  000b7	f2 0f 5e c1	 divsd	 xmm0, xmm1
  000bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000bf	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  000c2	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 203  : 
; 204  : 		*x = HUD_WINDOW_X_MIN;

  000c6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000d1	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN6@clip_2d_po:

; 205  : 	}
; 206  : 
; 207  : 	if (*y > HUD_WINDOW_Y_MAX)

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000d8	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000dc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3feff7ced916872b
  000e4	76 36		 jbe	 SHORT $LN7@clip_2d_po

; 208  : 	{
; 209  : 		*x = (*x * HUD_WINDOW_Y_MAX) / *y;

  000e6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000e9	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000ed	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  000f5	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  000f8	f3 0f 5a 09	 cvtss2sd xmm1, DWORD PTR [ecx]
  000fc	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00100	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00104	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00107	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 210  : 
; 211  : 		*y = HUD_WINDOW_Y_MAX;

  0010b	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00116	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0011a	eb 49		 jmp	 SHORT $LN9@clip_2d_po
$LN7@clip_2d_po:

; 212  : 	}
; 213  : 	else if (*y < HUD_WINDOW_Y_MIN)

  0011c	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0011f	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00123	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  0012b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0012f	76 34		 jbe	 SHORT $LN9@clip_2d_po

; 214  : 	{
; 215  : 		*x = (*x * HUD_WINDOW_Y_MIN) / *y;

  00131	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00134	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00138	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  00140	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00143	f3 0f 5a 09	 cvtss2sd xmm1, DWORD PTR [ecx]
  00147	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0014b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0014f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00152	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 216  : 
; 217  : 		*y = HUD_WINDOW_Y_MIN;

  00156	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00159	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00161	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN9@clip_2d_po:

; 218  : 	}
; 219  : }

  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 08 00	 ret	 8
?clip_2d_point_to_hud_extent@@YGXPAM0@Z ENDP		; clip_2d_point_to_hud_extent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?initialise_hud_colours@@YGXXZ
_TEXT	SEGMENT
?initialise_hud_colours@@YGXXZ PROC			; initialise_hud_colours, COMDAT

; 832  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 833  : 	set_rgb_colour(hind_hud_colours[0],   192, 255,128, 255);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	c6 81 02 00 00
	00 c0		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[ecx+2], 192 ; 000000c0H
  00018	b8 04 00 00 00	 mov	 eax, 4
  0001d	6b c8 00	 imul	 ecx, eax, 0
  00020	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00027	b8 04 00 00 00	 mov	 eax, 4
  0002c	6b c8 00	 imul	 ecx, eax, 0
  0002f	c6 81 00 00 00
	00 80		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[ecx], 128 ; 00000080H
  00036	b8 04 00 00 00	 mov	 eax, 4
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 834  : 	set_rgb_colour(hind_hud_colours[1],   128, 255, 48, 255);

  00045	b8 04 00 00 00	 mov	 eax, 4
  0004a	c1 e0 00	 shl	 eax, 0
  0004d	c6 80 02 00 00
	00 80		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax+2], 128 ; 00000080H
  00054	b8 04 00 00 00	 mov	 eax, 4
  00059	c1 e0 00	 shl	 eax, 0
  0005c	c6 80 01 00 00
	00 ff		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax+1], 255 ; 000000ffH
  00063	b8 04 00 00 00	 mov	 eax, 4
  00068	c1 e0 00	 shl	 eax, 0
  0006b	c6 80 00 00 00
	00 30		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax], 48 ; 00000030H
  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	c1 e0 00	 shl	 eax, 0
  0007a	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 835  : 	set_rgb_colour(hind_hud_colours[2],    48,  64, 16, 255);

  00081	b8 04 00 00 00	 mov	 eax, 4
  00086	d1 e0		 shl	 eax, 1
  00088	c6 80 02 00 00
	00 30		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax+2], 48 ; 00000030H
  0008f	b8 04 00 00 00	 mov	 eax, 4
  00094	d1 e0		 shl	 eax, 1
  00096	c6 80 01 00 00
	00 40		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax+1], 64 ; 00000040H
  0009d	b8 04 00 00 00	 mov	 eax, 4
  000a2	d1 e0		 shl	 eax, 1
  000a4	c6 80 00 00 00
	00 10		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax], 16 ; 00000010H
  000ab	b8 04 00 00 00	 mov	 eax, 4
  000b0	d1 e0		 shl	 eax, 1
  000b2	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 836  : 	set_rgb_colour(hind_hud_colours[3],   255, 220, 64, 255);

  000b9	b8 04 00 00 00	 mov	 eax, 4
  000be	6b c8 03	 imul	 ecx, eax, 3
  000c1	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  000c8	b8 04 00 00 00	 mov	 eax, 4
  000cd	6b c8 03	 imul	 ecx, eax, 3
  000d0	c6 81 01 00 00
	00 dc		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[ecx+1], 220 ; 000000dcH
  000d7	b8 04 00 00 00	 mov	 eax, 4
  000dc	6b c8 03	 imul	 ecx, eax, 3
  000df	c6 81 00 00 00
	00 40		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[ecx], 64 ; 00000040H
  000e6	b8 04 00 00 00	 mov	 eax, 4
  000eb	6b c8 03	 imul	 ecx, eax, 3
  000ee	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 837  : 
; 838  : 	set_rgb_colour(backup_sight_colour,  255, 50, 0, 255);

  000f5	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?backup_sight_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  000fc	c6 05 01 00 00
	00 32		 mov	 BYTE PTR ?backup_sight_colour@@3UREAL_COLOUR@@A+1, 50 ; 00000032H
  00103	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?backup_sight_colour@@3UREAL_COLOUR@@A, 0
  0010a	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?backup_sight_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 839  : 
; 840  : 	current_hud_colour = 0;

  00111	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_hud_colour@@3HA, 0

; 841  : 	hud_colour = hind_hud_colours[current_hud_colour];

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_hud_colour@@3HA
  00120	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax*4]
  00127	89 0d 00 00 00
	00		 mov	 DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A, ecx ; hud_colour

; 842  : 	set_rgb_colour (clear_hud_colour, 255, 255, 255, 0);

  0012d	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?clear_hud_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  00134	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_hud_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  0013b	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?clear_hud_colour@@3UREAL_COLOUR@@A, 255 ; 000000ffH
  00142	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_hud_colour@@3UREAL_COLOUR@@A+3, 0

; 843  : }

  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
?initialise_hud_colours@@YGXXZ ENDP			; initialise_hud_colours
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?display_weapon_information@@YGXXZ
_TEXT	SEGMENT
tv224 = -144						; size = 4
tv197 = -144						; size = 4
tv137 = -144						; size = 4
tv78 = -144						; size = 4
tv297 = -140						; size = 4
tv290 = -140						; size = 4
tv283 = -140						; size = 4
tv216 = -140						; size = 4
tv189 = -140						; size = 4
tv129 = -140						; size = 4
tv70 = -140						; size = 4
_azimuth$1 = -72					; size = 4
_elevation$2 = -68					; size = 4
_source_position$3 = -64				; size = 4
_target_position$4 = -60				; size = 12
_tracking_point$5 = -48					; size = 4
_target$6 = -44						; size = 4
_el$7 = -40						; size = 4
_az$8 = -36						; size = 4
_y$9 = -32						; size = 4
_x$10 = -28						; size = 4
_roll$ = -24						; size = 4
_drop_hud_distance$ = -20				; size = 4
_angle_of_drop$ = -16					; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_weapon_sub_type$ = -4					; size = 4
?display_weapon_information@@YGXXZ PROC			; display_weapon_information, COMDAT

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 708  : 	entity_sub_types
; 709  : 		weapon_sub_type;
; 710  : 
; 711  : 	float
; 712  : 		x,
; 713  : 		y,
; 714  : 		angle_of_drop,
; 715  : 		drop_hud_distance,
; 716  : 		roll;
; 717  : 
; 718  : 	weapon_sub_type = get_local_entity_int_value (get_gunship_entity (), INT_TYPE_SELECTED_WEAPON);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00013	74 0f		 je	 SHORT $LN14@display_we
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00022	eb 24		 jmp	 SHORT $LN15@display_we
$LN14@display_we:
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  0002a	83 c2 0b	 add	 edx, 11			; 0000000bH
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003e	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN15@display_we:
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 0c		 je	 SHORT $LN16@display_we
  00051	c7 85 70 ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0005b	eb 24		 jmp	 SHORT $LN17@display_we
$LN16@display_we:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  00063	83 c2 0b	 add	 edx, 11			; 0000000bH
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN17@display_we:
  00081	68 b8 00 00 00	 push	 184			; 000000b8H
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0008c	51		 push	 ecx
  0008d	69 95 74 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  00097	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a4	ff d1		 call	 ecx
  000a6	89 45 fc	 mov	 DWORD PTR _weapon_sub_type$[ebp], eax

; 719  : 
; 720  : 	if (weapon_sub_type != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  000a9	83 7d fc 00	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 0
  000ad	0f 84 32 04 00
	00		 je	 $LN12@display_we

; 721  : 	{
; 722  : 		//
; 723  : 		// weapon specific
; 724  : 		//
; 725  : 
; 726  : 		if ((weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_S5)
; 727  : 			|| (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_S8)
; 728  : 			|| (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_S13)
; 729  : 			|| (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_GSH23L_23MM_ROUND)
; 730  : 			|| (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_9A642_12P7MM_ROUND && target_acquisition_system != TARGET_ACQUISITION_SYSTEM_HMS))

  000b3	83 7d fc 21	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 33 ; 00000021H
  000b7	74 29		 je	 SHORT $LN5@display_we
  000b9	83 7d fc 22	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 34 ; 00000022H
  000bd	74 23		 je	 SHORT $LN5@display_we
  000bf	83 7d fc 23	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 35 ; 00000023H
  000c3	74 1d		 je	 SHORT $LN5@display_we
  000c5	83 7d fc 0f	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 15 ; 0000000fH
  000c9	74 17		 je	 SHORT $LN5@display_we
  000cb	83 7d fc 0d	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 13 ; 0000000dH
  000cf	0f 85 17 02 00
	00		 jne	 $LN3@display_we
  000d5	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 10 ; target_acquisition_system, 0000000aH
  000dc	0f 84 0a 02 00
	00		 je	 $LN3@display_we
$LN5@display_we:

; 731  : 		{
; 732  : 			float
; 733  : 				x,y;
; 734  : 				angle_of_drop = 0.0;

  000e2	0f 57 c0	 xorps	 xmm0, xmm0
  000e5	f3 0f 11 45 f0	 movss	 DWORD PTR _angle_of_drop$[ebp], xmm0

; 735  : 				drop_hud_distance;
; 736  : 				roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  000ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  000f1	74 0f		 je	 SHORT $LN18@display_we
  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv129[ebp], ecx
  00100	eb 24		 jmp	 SHORT $LN19@display_we
$LN18@display_we:
  00102	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  00108	83 c2 1d	 add	 edx, 29			; 0000001dH
  0010b	52		 push	 edx
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0011c	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN19@display_we:
  00126	b9 01 00 00 00	 mov	 ecx, 1
  0012b	85 c9		 test	 ecx, ecx
  0012d	74 0c		 je	 SHORT $LN20@display_we
  0012f	c7 85 70 ff ff
	ff 71 00 00 00	 mov	 DWORD PTR tv137[ebp], 113 ; 00000071H
  00139	eb 24		 jmp	 SHORT $LN21@display_we
$LN20@display_we:
  0013b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  00141	83 c2 1d	 add	 edx, 29			; 0000001dH
  00144	52		 push	 edx
  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00155	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN21@display_we:
  0015f	6a 71		 push	 113			; 00000071H
  00161	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00167	51		 push	 ecx
  00168	69 95 74 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv129[ebp], 700
  00172	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00178	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0017f	ff d1		 call	 ecx
  00181	d9 5d e8	 fstp	 DWORD PTR _roll$[ebp]

; 737  : 
; 738  : 			angle_of_drop = get_ballistic_weapon_drop(weapon_sub_type);

  00184	8b 45 fc	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 ?get_ballistic_weapon_drop@@YGMH@Z ; get_ballistic_weapon_drop
  0018d	d9 5d f0	 fstp	 DWORD PTR _angle_of_drop$[ebp]

; 739  : 			drop_hud_distance = atan(angle_of_drop) * hud_position_z / (0.5 * hud_height);

  00190	51		 push	 ecx
  00191	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _angle_of_drop$[ebp]
  00196	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019b	e8 00 00 00 00	 call	 ?atan@@YGMM@Z		; atan
  001a0	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR tv283[ebp]
  001a6	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR tv283[ebp]
  001ae	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?hud_position_z@@3MA
  001b6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001ba	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_height@@3MA
  001c2	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001ca	f2 0f 5e c1	 divsd	 xmm0, xmm1
  001ce	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d2	f3 0f 11 45 ec	 movss	 DWORD PTR _drop_hud_distance$[ebp], xmm0

; 740  : 
; 741  : 			y = cos(roll) * -drop_hud_distance;

  001d7	51		 push	 ecx
  001d8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _roll$[ebp]
  001dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e2	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  001e7	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR tv290[ebp]
  001ed	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR tv290[ebp]
  001f5	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _drop_hud_distance$[ebp]
  001fa	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00201	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00205	f3 0f 11 45 e0	 movss	 DWORD PTR _y$9[ebp], xmm0

; 742  : 			x = sin(roll) * drop_hud_distance;

  0020a	51		 push	 ecx
  0020b	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00210	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00215	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0021a	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR tv297[ebp]
  00220	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR tv297[ebp]
  00228	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _drop_hud_distance$[ebp]
  0022d	f3 0f 11 45 e4	 movss	 DWORD PTR _x$10[ebp], xmm0

; 743  : 
; 744  : 			draw_aim_marker(x, y, hud_aim_range, weapon_database[weapon_sub_type].min_range);

  00232	69 45 fc e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  00239	51		 push	 ecx
  0023a	f3 0f 10 80 8c
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+140]
  00242	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00247	51		 push	 ecx
  00248	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_aim_range@@3MA
  00250	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00255	51		 push	 ecx
  00256	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y$9[ebp]
  0025b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00260	51		 push	 ecx
  00261	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x$10[ebp]
  00266	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026b	e8 00 00 00 00	 call	 ?draw_aim_marker@@YGXMMMM@Z ; draw_aim_marker

; 745  : 
; 746  : 			// draw target marker around target if having cpg assist
; 747  : 			if (get_global_cpg_assist_type() != CPG_ASSIST_TYPE_NONE && eo_is_locked())

  00270	83 3d 8c 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+140, 0
  00277	74 6e		 je	 SHORT $LN7@display_we
  00279	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  0027e	85 c0		 test	 eax, eax
  00280	74 65		 je	 SHORT $LN7@display_we

; 748  : 			{
; 749  : 				float az, el;
; 750  : 
; 751  : 				get_eo_azimuth_and_elevation(&az, &el);

  00282	8d 45 d8	 lea	 eax, DWORD PTR _el$7[ebp]
  00285	50		 push	 eax
  00286	8d 4d dc	 lea	 ecx, DWORD PTR _az$8[ebp]
  00289	51		 push	 ecx
  0028a	e8 00 00 00 00	 call	 ?get_eo_azimuth_and_elevation@@YGXPAM0@Z ; get_eo_azimuth_and_elevation

; 752  : 				if (angles_to_hud_coordinates(az, el, &x, &y, TRUE))

  0028f	6a 01		 push	 1
  00291	8d 45 e0	 lea	 eax, DWORD PTR _y$9[ebp]
  00294	50		 push	 eax
  00295	8d 4d e4	 lea	 ecx, DWORD PTR _x$10[ebp]
  00298	51		 push	 ecx
  00299	51		 push	 ecx
  0029a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _el$7[ebp]
  0029f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a4	51		 push	 ecx
  002a5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _az$8[ebp]
  002aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002af	e8 00 00 00 00	 call	 ?angles_to_hud_coordinates@@YGHMMPAM0H@Z ; angles_to_hud_coordinates
  002b4	85 c0		 test	 eax, eax
  002b6	74 2f		 je	 SHORT $LN7@display_we

; 753  : 					draw_2d_circle(x, y, 0.15, hud_colour);

  002b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  002bd	50		 push	 eax
  002be	51		 push	 ecx
  002bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	51		 push	 ecx
  002cd	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y$9[ebp]
  002d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d7	51		 push	 ecx
  002d8	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x$10[ebp]
  002dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e2	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN7@display_we:

; 754  : 			}
; 755  : 		}
; 756  : 		else

  002e7	e9 f9 01 00 00	 jmp	 $LN12@display_we
$LN3@display_we:

; 757  : 		{
; 758  : 			entity* target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  002ec	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  002f3	74 0f		 je	 SHORT $LN22@display_we
  002f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fc	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv189[ebp], ecx
  00302	eb 24		 jmp	 SHORT $LN23@display_we
$LN22@display_we:
  00304	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  0030a	83 c2 33	 add	 edx, 51			; 00000033H
  0030d	52		 push	 edx
  0030e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00313	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00318	50		 push	 eax
  00319	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0031e	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv189[ebp], 0
$LN23@display_we:
  00328	b9 01 00 00 00	 mov	 ecx, 1
  0032d	85 c9		 test	 ecx, ecx
  0032f	74 0c		 je	 SHORT $LN24@display_we
  00331	c7 85 70 ff ff
	ff 26 00 00 00	 mov	 DWORD PTR tv197[ebp], 38 ; 00000026H
  0033b	eb 24		 jmp	 SHORT $LN25@display_we
$LN24@display_we:
  0033d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  00343	83 c2 33	 add	 edx, 51			; 00000033H
  00346	52		 push	 edx
  00347	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0034c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00351	50		 push	 eax
  00352	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00357	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv197[ebp], 0
$LN25@display_we:
  00361	6a 26		 push	 38			; 00000026H
  00363	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00369	51		 push	 ecx
  0036a	69 95 74 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv189[ebp], 180
  00374	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv197[ebp]
  0037a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00381	ff d1		 call	 ecx
  00383	89 45 d4	 mov	 DWORD PTR _target$6[ebp], eax

; 759  : 			vec3d* tracking_point;
; 760  : 
; 761  : 			// will use point lock if no target
; 762  : 			tracking_point = get_eo_tracking_point();

  00386	e8 00 00 00 00	 call	 ?get_eo_tracking_point@@YGPAUVEC3D@@XZ ; get_eo_tracking_point
  0038b	89 45 d0	 mov	 DWORD PTR _tracking_point$5[ebp], eax

; 763  : 			if (target || tracking_point)

  0038e	83 7d d4 00	 cmp	 DWORD PTR _target$6[ebp], 0
  00392	75 0a		 jne	 SHORT $LN9@display_we
  00394	83 7d d0 00	 cmp	 DWORD PTR _tracking_point$5[ebp], 0
  00398	0f 84 47 01 00
	00		 je	 $LN12@display_we
$LN9@display_we:

; 764  : 			{
; 765  : 				vec3d
; 766  : 					target_position,
; 767  : 					*source_position;
; 768  : 
; 769  : 				float
; 770  : 					elevation,
; 771  : 					azimuth;
; 772  : 
; 773  : 				if (target)

  0039e	83 7d d4 00	 cmp	 DWORD PTR _target$6[ebp], 0
  003a2	74 0f		 je	 SHORT $LN10@display_we

; 774  : 					get_local_entity_target_point (target, &target_position);

  003a4	8d 45 c4	 lea	 eax, DWORD PTR _target_position$4[ebp]
  003a7	50		 push	 eax
  003a8	8b 4d d4	 mov	 ecx, DWORD PTR _target$6[ebp]
  003ab	51		 push	 ecx
  003ac	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 775  : 				else

  003b1	eb 14		 jmp	 SHORT $LN11@display_we
$LN10@display_we:

; 776  : 					target_position = *tracking_point;

  003b3	8b 45 d0	 mov	 eax, DWORD PTR _tracking_point$5[ebp]
  003b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b8	89 4d c4	 mov	 DWORD PTR _target_position$4[ebp], ecx
  003bb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003be	89 55 c8	 mov	 DWORD PTR _target_position$4[ebp+4], edx
  003c1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  003c4	89 45 cc	 mov	 DWORD PTR _target_position$4[ebp+8], eax
$LN11@display_we:

; 777  : 
; 778  : 				source_position = get_local_entity_vec3d_ptr(get_gunship_entity(), VEC3D_TYPE_POSITION);

  003c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  003ce	74 0f		 je	 SHORT $LN26@display_we
  003d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d7	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv216[ebp], ecx
  003dd	eb 24		 jmp	 SHORT $LN27@display_we
$LN26@display_we:
  003df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  003e5	83 c2 47	 add	 edx, 71			; 00000047H
  003e8	52		 push	 edx
  003e9	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003f3	50		 push	 eax
  003f4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f9	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv216[ebp], 0
$LN27@display_we:
  00403	b9 01 00 00 00	 mov	 ecx, 1
  00408	85 c9		 test	 ecx, ecx
  0040a	74 0c		 je	 SHORT $LN28@display_we
  0040c	c7 85 70 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv224[ebp], 8
  00416	eb 24		 jmp	 SHORT $LN29@display_we
$LN28@display_we:
  00418	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  0041e	83 c2 47	 add	 edx, 71			; 00000047H
  00421	52		 push	 edx
  00422	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00427	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0042c	50		 push	 eax
  0042d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00432	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv224[ebp], 0
$LN29@display_we:
  0043c	6a 08		 push	 8
  0043e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00444	51		 push	 ecx
  00445	6b 95 74 ff ff
	ff 60		 imul	 edx, DWORD PTR tv216[ebp], 96
  0044c	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv224[ebp]
  00452	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00459	ff d1		 call	 ecx
  0045b	89 45 c0	 mov	 DWORD PTR _source_position$3[ebp], eax

; 779  : 
; 780  : 				get_eo_azimuth_and_elevation(&azimuth, &elevation);

  0045e	8d 45 bc	 lea	 eax, DWORD PTR _elevation$2[ebp]
  00461	50		 push	 eax
  00462	8d 4d b8	 lea	 ecx, DWORD PTR _azimuth$1[ebp]
  00465	51		 push	 ecx
  00466	e8 00 00 00 00	 call	 ?get_eo_azimuth_and_elevation@@YGXPAM0@Z ; get_eo_azimuth_and_elevation

; 781  : 
; 782  : 				hud_aim_range = get_triangulated_by_position_range(source_position, &target_position);

  0046b	8d 45 c4	 lea	 eax, DWORD PTR _target_position$4[ebp]
  0046e	50		 push	 eax
  0046f	8b 4d c0	 mov	 ecx, DWORD PTR _source_position$3[ebp]
  00472	51		 push	 ecx
  00473	e8 00 00 00 00	 call	 ?get_triangulated_by_position_range@@YGMPAUVEC3D@@0@Z ; get_triangulated_by_position_range
  00478	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?hud_aim_range@@3MA

; 783  : 
; 784  : 				if (angles_to_hud_coordinates(azimuth, elevation, &x, &y, TRUE))

  0047e	6a 01		 push	 1
  00480	8d 45 f4	 lea	 eax, DWORD PTR _y$[ebp]
  00483	50		 push	 eax
  00484	8d 4d f8	 lea	 ecx, DWORD PTR _x$[ebp]
  00487	51		 push	 ecx
  00488	51		 push	 ecx
  00489	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _elevation$2[ebp]
  0048e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00493	51		 push	 ecx
  00494	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _azimuth$1[ebp]
  00499	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049e	e8 00 00 00 00	 call	 ?angles_to_hud_coordinates@@YGHMMPAM0H@Z ; angles_to_hud_coordinates
  004a3	85 c0		 test	 eax, eax
  004a5	74 3e		 je	 SHORT $LN12@display_we

; 785  : 					draw_aim_marker(x, y, hud_aim_range, weapon_database[weapon_sub_type].min_range);

  004a7	69 45 fc e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  004ae	51		 push	 ecx
  004af	f3 0f 10 80 8c
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+140]
  004b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bc	51		 push	 ecx
  004bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_aim_range@@3MA
  004c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ca	51		 push	 ecx
  004cb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y$[ebp]
  004d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d5	51		 push	 ecx
  004d6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  004db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e0	e8 00 00 00 00	 call	 ?draw_aim_marker@@YGXMMMM@Z ; draw_aim_marker
$LN12@display_we:

; 786  : 			}
; 787  : 		}
; 788  : 	}
; 789  : }

  004e5	5f		 pop	 edi
  004e6	5e		 pop	 esi
  004e7	5b		 pop	 ebx
  004e8	8b e5		 mov	 esp, ebp
  004ea	5d		 pop	 ebp
  004eb	c3		 ret	 0
?display_weapon_information@@YGXXZ ENDP			; display_weapon_information
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?display_target_information@@YGXXZ
_TEXT	SEGMENT
tv78 = -284						; size = 4
tv70 = -280						; size = 4
_width$1 = -212						; size = 4
_target$ = -208						; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
?display_target_information@@YGXXZ PROC			; display_target_information, COMDAT

; 796  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 797  : 	const char
; 798  : 		*s;
; 799  : 	char
; 800  : 		buffer[200];
; 801  : 
; 802  : 	entity
; 803  : 		*target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00013	74 0f		 je	 SHORT $LN4@display_ta
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00022	eb 24		 jmp	 SHORT $LN5@display_ta
$LN4@display_ta:
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_target_information@@YGXXZ@4JA
  0002a	83 c2 07	 add	 edx, 7
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003e	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN5@display_ta:
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 0c		 je	 SHORT $LN6@display_ta
  00051	c7 85 e4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv78[ebp], 38	; 00000026H
  0005b	eb 24		 jmp	 SHORT $LN7@display_ta
$LN6@display_ta:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_target_information@@YGXXZ@4JA
  00063	83 c2 07	 add	 edx, 7
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@FOFGECAL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN7@display_ta:
  00081	6a 26		 push	 38			; 00000026H
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00089	51		 push	 ecx
  0008a	69 95 e8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv70[ebp], 180
  00094	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  000a1	ff d1		 call	 ecx
  000a3	89 85 30 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 804  : 
; 805  : 	set_mono_font_type (MONO_FONT_TYPE_8X14);

  000a9	6a 06		 push	 6
  000ab	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 806  : 	s = get_target_display_name (target, buffer, FALSE);

  000b0	6a 00		 push	 0
  000b2	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b8	50		 push	 eax
  000b9	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  000c5	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 807  : 	if (s && strcmp(s, "NO TARGET") != 0)

  000c8	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  000cc	74 7c		 je	 SHORT $LN2@display_ta
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_09JLFDDBCD@NO?5TARGET@
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _strcmp
  000dc	83 c4 08	 add	 esp, 8
  000df	85 c0		 test	 eax, eax
  000e1	74 67		 je	 SHORT $LN2@display_ta

; 808  : 	{
; 809  : 		float width = get_mono_font_string_width (s);

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000ec	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$1[ebp]

; 810  : 		set_2d_mono_font_position (0.0, -0.75);

  000f2	51		 push	 ecx
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	51		 push	 ecx
  00101	0f 57 c0	 xorps	 xmm0, xmm0
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 811  : 		set_mono_font_rel_position (-width * 0.5, 0.0);

  0010e	51		 push	 ecx
  0010f	0f 57 c0	 xorps	 xmm0, xmm0
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$1[ebp]
  0011f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00126	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0012a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00132	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00136	51		 push	 ecx
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 812  : 		print_mono_font_string (s);

  00141	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_ta:

; 813  : 	}
; 814  : }

  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c3		 ret	 0
?display_target_information@@YGXXZ ENDP			; display_target_information
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?initialise_hms_gun_pipper@@YGXXZ
_TEXT	SEGMENT
_cos_theta$ = -16					; size = 4
_sin_theta$ = -12					; size = 4
_theta$ = -8						; size = 4
_i$ = -4						; size = 4
?initialise_hms_gun_pipper@@YGXXZ PROC			; initialise_hms_gun_pipper, COMDAT

; 568  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 569  : 	int
; 570  : 		i;
; 571  : 
; 572  : 	float
; 573  : 		theta,
; 574  : 		sin_theta,
; 575  : 		cos_theta;
; 576  : 
; 577  : 	theta = rad(0);

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 578  : 
; 579  : 	for (i = 0; i < NUM_GUN_PIPPER_POINTS; i++)

  00011	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00018	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initialise:
  00023	83 7d fc 46	 cmp	 DWORD PTR _i$[ebp], 70	; 00000046H
  00027	0f 8d d5 00 00
	00		 jge	 $LN3@initialise

; 580  : 	{
; 581  : 		sin_theta = sin (theta);

  0002d	51		 push	 ecx
  0002e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00038	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0003d	d9 5d f4	 fstp	 DWORD PTR _sin_theta$[ebp]

; 582  : 		cos_theta = cos (theta);

  00040	51		 push	 ecx
  00041	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00050	d9 5d f0	 fstp	 DWORD PTR _cos_theta$[ebp]

; 583  : 
; 584  : 		gun_pipper_points[i][0] = sin_theta * GUN_PIPPER_SIZE;

  00053	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _sin_theta$[ebp]
  00058	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  00060	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00064	b8 04 00 00 00	 mov	 eax, 4
  00069	6b c8 00	 imul	 ecx, eax, 0
  0006c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0006f	f3 0f 11 84 d1
	00 00 00 00	 movss	 DWORD PTR ?gun_pipper_points@@3PAY01MA[ecx+edx*8], xmm0

; 585  : 		gun_pipper_points[i][1] = cos_theta * GUN_PIPPER_SIZE;

  00078	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _cos_theta$[ebp]
  0007d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  00085	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00089	b8 04 00 00 00	 mov	 eax, 4
  0008e	c1 e0 00	 shl	 eax, 0
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00094	f3 0f 11 84 c8
	00 00 00 00	 movss	 DWORD PTR ?gun_pipper_points@@3PAY01MA[eax+ecx*8], xmm0

; 586  : 		gun_pipper_points2[i][0] = sin_theta * GUN_PIPPER_SIZE2;

  0009d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _sin_theta$[ebp]
  000a2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd47ae147ae147b
  000aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	6b c8 00	 imul	 ecx, eax, 0
  000b6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000b9	f3 0f 11 84 d1
	00 00 00 00	 movss	 DWORD PTR ?gun_pipper_points2@@3PAY01MA[ecx+edx*8], xmm0

; 587  : 		gun_pipper_points2[i][1] = cos_theta * GUN_PIPPER_SIZE2;

  000c2	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _cos_theta$[ebp]
  000c7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd47ae147ae147b
  000cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	c1 e0 00	 shl	 eax, 0
  000db	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000de	f3 0f 11 84 c8
	00 00 00 00	 movss	 DWORD PTR ?gun_pipper_points2@@3PAY01MA[eax+ecx*8], xmm0

; 588  : 
; 589  : 		theta += GUN_PIPPER_ANGULAR_STEP_SIZE;

  000e7	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  000ec	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9ea35492492492
  000f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f8	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 590  : 	}

  000fd	e9 18 ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 591  : }

  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
?initialise_hms_gun_pipper@@YGXXZ ENDP			; initialise_hms_gun_pipper
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?get_hud_aiming_range@@YGMXZ
_TEXT	SEGMENT
?get_hud_aiming_range@@YGMXZ PROC			; get_hud_aiming_range, COMDAT

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 667  : 	return hud_aim_range;

  00009	d9 05 00 00 00
	00		 fld	 DWORD PTR ?hud_aim_range@@3MA

; 668  : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?get_hud_aiming_range@@YGMXZ ENDP			; get_hud_aiming_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?toggle_hind_backup_sight@@YGXXZ
_TEXT	SEGMENT
tv65 = -68						; size = 4
?toggle_hind_backup_sight@@YGXXZ PROC			; toggle_hind_backup_sight, COMDAT

; 873  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 874  : 	backup_sight_active = !backup_sight_active;

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?backup_sight_active@@3HA, 0
  00010	75 09		 jne	 SHORT $LN3@toggle_hin
  00012	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00019	eb 07		 jmp	 SHORT $LN4@toggle_hin
$LN3@toggle_hin:
  0001b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@toggle_hin:
  00022	8b 45 bc	 mov	 eax, DWORD PTR tv65[ebp]
  00025	a3 00 00 00 00	 mov	 DWORD PTR ?backup_sight_active@@3HA, eax

; 875  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?toggle_hind_backup_sight@@YGXXZ ENDP			; toggle_hind_backup_sight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?get_prev_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ
_TEXT	SEGMENT
?get_prev_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ PROC	; get_prev_hind_hud_colour, COMDAT

; 860  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 861  : 	current_hud_colour--;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_hud_colour@@3HA
  0000e	83 e8 01	 sub	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?current_hud_colour@@3HA, eax

; 862  : 	if (current_hud_colour < 0)

  00016	79 0a		 jns	 SHORT $LN2@get_prev_h

; 863  : 		current_hud_colour = ARRAY_LENGTH(hind_hud_colours) - 1;

  00018	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?current_hud_colour@@3HA, 3
$LN2@get_prev_h:

; 864  : 
; 865  : 	return hind_hud_colours[current_hud_colour];

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_hud_colour@@3HA
  00027	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax*4]

; 866  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?get_prev_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ ENDP	; get_prev_hind_hud_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?get_next_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ
_TEXT	SEGMENT
?get_next_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ PROC	; get_next_hind_hud_colour, COMDAT

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 852  : 	current_hud_colour++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_hud_colour@@3HA
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?current_hud_colour@@3HA, eax

; 853  : 	if (current_hud_colour >= ARRAY_LENGTH(hind_hud_colours))

  00016	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?current_hud_colour@@3HA, 4
  0001d	72 0a		 jb	 SHORT $LN2@get_next_h

; 854  : 		current_hud_colour = 0;

  0001f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_hud_colour@@3HA, 0
$LN2@get_next_h:

; 855  : 
; 856  : 	return hind_hud_colours[current_hud_colour];

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_hud_colour@@3HA
  0002e	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax*4]

; 857  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?get_next_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ ENDP	; get_next_hind_hud_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?get_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ
_TEXT	SEGMENT
?get_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ PROC		; get_hind_hud_colour, COMDAT

; 846  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 847  : 	return hind_hud_colours[current_hud_colour];

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_hud_colour@@3HA
  0000e	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?hind_hud_colours@@3PAUREAL_COLOUR@@A[eax*4]

; 848  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?get_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ ENDP		; get_hind_hud_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?draw_hind_hms@@YGXXZ
_TEXT	SEGMENT
?draw_hind_hms@@YGXXZ PROC				; draw_hind_hms, COMDAT

; 821  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 822  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?draw_hind_hms@@YGXXZ ENDP				; draw_hind_hms
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?draw_external_hind_hud@@YGXXZ
_TEXT	SEGMENT
?draw_external_hind_hud@@YGXXZ PROC			; draw_external_hind_hud, COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 547  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?draw_external_hind_hud@@YGXXZ ENDP			; draw_external_hind_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?draw_hind_hud_on_texture@@YGXXZ
_TEXT	SEGMENT
tv374 = -100						; size = 4
tv368 = -100						; size = 4
tv362 = -100						; size = 4
_clear_hud_colour$1 = -32				; size = 4
_v$2 = -28						; size = 4
_u$3 = -24						; size = 4
_scale$4 = -20						; size = 4
_i$5 = -16						; size = 4
_head_offset_z$6 = -12					; size = 4
_head_offset_y$7 = -8					; size = 4
_head_offset_x$8 = -4					; size = 4
?draw_hind_hud_on_texture@@YGXXZ PROC			; draw_hind_hud_on_texture, COMDAT

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 383  : 	//
; 384  : 	// set active 3D environment now else 2D clipping will be affected
; 385  : 	//
; 386  : 
; 387  : 	set_main_3d_full_screen_params (DISPLAY_3D_TINT_CLEAR, DISPLAY_3D_LIGHT_LEVEL_HIGH, DISPLAY_3D_NOISE_LEVEL_NONE);

  00009	6a 00		 push	 0
  0000b	6a 02		 push	 2
  0000d	6a 00		 push	 0
  0000f	e8 00 00 00 00	 call	 ?set_main_3d_full_screen_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@@Z ; set_main_3d_full_screen_params

; 388  : 
; 389  : 	set_3d_active_environment (main_3d_env);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 390  : 
; 391  : 	////////////////////////////////////////
; 392  : 	//
; 393  : 	// set up HUD 2D environment
; 394  : 	//
; 395  : 	////////////////////////////////////////
; 396  : 
; 397  : 	set_2d_active_environment (hud_env);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 398  : 
; 399  : 	//
; 400  : 	// window
; 401  : 	//
; 402  : 
; 403  : 	set_2d_window (hud_env, HUD_WINDOW_X_MIN, HUD_WINDOW_Y_MIN, HUD_WINDOW_X_MAX, HUD_WINDOW_Y_MAX);

  0002a	51		 push	 ecx
  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00038	51		 push	 ecx
  00039	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	51		 push	 ecx
  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 404  : 
; 405  : 	if (hud_display_model)

  0006d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A, 0
  00074	0f 84 56 02 00
	00		 je	 $LN3@draw_hind_

; 406  : 	{
; 407  : 		// move HUD coordinate system with head movements to simulate the collimation effect (focus on infinity)
; 408  : 		float head_offset_x = 0.0, head_offset_y = 0.0, head_offset_z = 0.0;

  0007a	0f 57 c0	 xorps	 xmm0, xmm0
  0007d	f3 0f 11 45 fc	 movss	 DWORD PTR _head_offset_x$8[ebp], xmm0
  00082	0f 57 c0	 xorps	 xmm0, xmm0
  00085	f3 0f 11 45 f8	 movss	 DWORD PTR _head_offset_y$7[ebp], xmm0
  0008a	0f 57 c0	 xorps	 xmm0, xmm0
  0008d	f3 0f 11 45 f4	 movss	 DWORD PTR _head_offset_z$6[ebp], xmm0

; 409  : 
; 410  : 		if (get_view_mode() == VIEW_MODE_COCKPIT_PANEL_SPECIAL_HAVOC_HUD)

  00092	83 3d 00 00 00
	00 1f		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 31 ; view_mode, 0000001fH
  00099	75 1f		 jne	 SHORT $LN6@draw_hind_

; 411  : 		{
; 412  : 			if (custom_3d_models.arneh_mi24v_cockpit)

  0009b	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?custom_3d_models@@3Uinstalled_custom_3d_models@@A+4, 0
  000a2	74 11		 je	 SHORT $LN8@draw_hind_

; 413  : 				get_hind_3d_cockpit_hud_view_position(&head_offset_x, &head_offset_y, &head_offset_z);

  000a4	8d 45 f4	 lea	 eax, DWORD PTR _head_offset_z$6[ebp]
  000a7	50		 push	 eax
  000a8	8d 4d f8	 lea	 ecx, DWORD PTR _head_offset_y$7[ebp]
  000ab	51		 push	 ecx
  000ac	8d 55 fc	 lea	 edx, DWORD PTR _head_offset_x$8[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 ?get_hind_3d_cockpit_hud_view_position@@YGXPAM00@Z ; get_hind_3d_cockpit_hud_view_position
$LN8@draw_hind_:

; 414  : 		}
; 415  : 		else

  000b5	e9 ba 00 00 00	 jmp	 $LN7@draw_hind_
$LN6@draw_hind_:

; 416  : 		{
; 417  : 			head_offset_x = -getViewpointOffsetX(head_offset_x);

  000ba	51		 push	 ecx
  000bb	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _head_offset_x$8[ebp]
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	e8 00 00 00 00	 call	 ?getViewpointOffsetX@@YGMM@Z ; getViewpointOffsetX
  000ca	d9 5d 9c	 fstp	 DWORD PTR tv362[ebp]
  000cd	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv362[ebp]
  000d2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000d9	f3 0f 11 45 fc	 movss	 DWORD PTR _head_offset_x$8[ebp], xmm0

; 418  : 			head_offset_y = -getViewpointOffsetY(head_offset_y);

  000de	51		 push	 ecx
  000df	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _head_offset_y$7[ebp]
  000e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e9	e8 00 00 00 00	 call	 ?getViewpointOffsetY@@YGMM@Z ; getViewpointOffsetY
  000ee	d9 5d 9c	 fstp	 DWORD PTR tv368[ebp]
  000f1	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv368[ebp]
  000f6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000fd	f3 0f 11 45 f8	 movss	 DWORD PTR _head_offset_y$7[ebp], xmm0

; 419  : 			head_offset_z = -getViewpointOffsetY(head_offset_z);

  00102	51		 push	 ecx
  00103	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _head_offset_z$6[ebp]
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	e8 00 00 00 00	 call	 ?getViewpointOffsetY@@YGMM@Z ; getViewpointOffsetY
  00112	d9 5d 9c	 fstp	 DWORD PTR tv374[ebp]
  00115	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv374[ebp]
  0011a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00121	f3 0f 11 45 f4	 movss	 DWORD PTR _head_offset_z$6[ebp], xmm0

; 420  : 
; 421  : 			head_offset_x += wide_cockpit_position[WIDEVIEW_HIND_PILOT].c.x;

  00126	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
  0012b	6b c8 07	 imul	 ecx, eax, 7
  0012e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _head_offset_x$8[ebp]
  00133	f3 0f 58 81 14
	00 00 00	 addss	 xmm0, DWORD PTR ?wide_cockpit_position@@3PAUCOCKPIT_POSITION@@A[ecx+20]
  0013b	f3 0f 11 45 fc	 movss	 DWORD PTR _head_offset_x$8[ebp], xmm0

; 422  : 			head_offset_y += wide_cockpit_position[WIDEVIEW_HIND_PILOT].c.y;

  00140	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
  00145	6b c8 07	 imul	 ecx, eax, 7
  00148	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _head_offset_y$7[ebp]
  0014d	f3 0f 58 81 18
	00 00 00	 addss	 xmm0, DWORD PTR ?wide_cockpit_position@@3PAUCOCKPIT_POSITION@@A[ecx+24]
  00155	f3 0f 11 45 f8	 movss	 DWORD PTR _head_offset_y$7[ebp], xmm0

; 423  : 			head_offset_z += wide_cockpit_position[WIDEVIEW_HIND_PILOT].c.z;

  0015a	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
  0015f	6b c8 07	 imul	 ecx, eax, 7
  00162	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _head_offset_z$6[ebp]
  00167	f3 0f 58 81 1c
	00 00 00	 addss	 xmm0, DWORD PTR ?wide_cockpit_position@@3PAUCOCKPIT_POSITION@@A[ecx+28]
  0016f	f3 0f 11 45 f4	 movss	 DWORD PTR _head_offset_z$6[ebp], xmm0
$LN7@draw_hind_:

; 424  : 		}
; 425  : 
; 426  : 		{
; 427  : 			// move texture UV coordinates to move and scale the texture
; 428  : 			unsigned i;
; 429  : 			for (i=0; i<num_texture_coordinates; i++)

  00174	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  0017b	eb 09		 jmp	 SHORT $LN4@draw_hind_
$LN2@draw_hind_:
  0017d	8b 45 f0	 mov	 eax, DWORD PTR _i$5[ebp]
  00180	83 c0 01	 add	 eax, 1
  00183	89 45 f0	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@draw_hind_:
  00186	8b 45 f0	 mov	 eax, DWORD PTR _i$5[ebp]
  00189	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_texture_coordinates@@3IA
  0018f	0f 83 3b 01 00
	00		 jae	 $LN3@draw_hind_

; 430  : 			{
; 431  : 				float
; 432  : 					scale,
; 433  : 					u = hud_texture_uv_coordinates[i].u,

  00195	8b 45 f0	 mov	 eax, DWORD PTR _i$5[ebp]
  00198	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hud_texture_uv_coordinates@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A
  0019e	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [ecx+eax*8]
  001a3	f3 0f 11 45 e8	 movss	 DWORD PTR _u$3[ebp], xmm0

; 434  : 					v = hud_texture_uv_coordinates[i].v;

  001a8	8b 45 f0	 mov	 eax, DWORD PTR _i$5[ebp]
  001ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hud_texture_uv_coordinates@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A
  001b1	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [ecx+eax*8+4]
  001b7	f3 0f 11 45 e4	 movss	 DWORD PTR _v$2[ebp], xmm0

; 435  : 
; 436  : 				// scale hud to keep same absolute size no matter distance to hud
; 437  : 				u -= 0.5;

  001bc	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _u$3[ebp]
  001c1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cd	f3 0f 11 45 e8	 movss	 DWORD PTR _u$3[ebp], xmm0

; 438  : 				v -= 0.5;

  001d2	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _v$2[ebp]
  001d7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e3	f3 0f 11 45 e4	 movss	 DWORD PTR _v$2[ebp], xmm0

; 439  : 
; 440  : 				hud_distance = hud_position_z - head_offset_z;

  001e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_position_z@@3MA
  001f0	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _head_offset_z$6[ebp]
  001f5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_distance@@3MA, xmm0

; 441  : 				scale = hud_position_z / hud_distance;

  001fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_position_z@@3MA
  00205	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?hud_distance@@3MA
  0020d	f3 0f 11 45 ec	 movss	 DWORD PTR _scale$4[ebp], xmm0

; 442  : 
; 443  : 				u *= scale;

  00212	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _u$3[ebp]
  00217	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _scale$4[ebp]
  0021c	f3 0f 11 45 e8	 movss	 DWORD PTR _u$3[ebp], xmm0

; 444  : 				v *= scale;

  00221	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v$2[ebp]
  00226	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _scale$4[ebp]
  0022b	f3 0f 11 45 e4	 movss	 DWORD PTR _v$2[ebp], xmm0

; 445  : 
; 446  : 				u += 0.5;

  00230	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _u$3[ebp]
  00235	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0023d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00241	f3 0f 11 45 e8	 movss	 DWORD PTR _u$3[ebp], xmm0

; 447  : 				v += 0.5;

  00246	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _v$2[ebp]
  0024b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00253	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00257	f3 0f 11 45 e4	 movss	 DWORD PTR _v$2[ebp], xmm0

; 448  : 
; 449  : 				// then displace hud to keep it directly in front of pilot's position
; 450  : 				u -= (scale) * head_offset_x / hud_width;

  0025c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$4[ebp]
  00261	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _head_offset_x$8[ebp]
  00266	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?hud_width@@3MA
  0026e	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _u$3[ebp]
  00273	f3 0f 5c c8	 subss	 xmm1, xmm0
  00277	f3 0f 11 4d e8	 movss	 DWORD PTR _u$3[ebp], xmm1

; 451  : 				v += (scale) * (head_offset_y - hud_position_y) / hud_height;

  0027c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _head_offset_y$7[ebp]
  00281	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?hud_position_y@@3MA
  00289	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _scale$4[ebp]
  0028e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?hud_height@@3MA
  00296	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _v$2[ebp]
  0029b	f3 0f 11 45 e4	 movss	 DWORD PTR _v$2[ebp], xmm0

; 452  : 
; 453  : 				hud_display_model->surface_texture_points[i].u = u;

  002a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  002a5	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  002a8	8b 55 f0	 mov	 edx, DWORD PTR _i$5[ebp]
  002ab	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _u$3[ebp]
  002b0	f3 0f 11 04 d1	 movss	 DWORD PTR [ecx+edx*8], xmm0

; 454  : 				hud_display_model->surface_texture_points[i].v = v;

  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  002ba	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  002bd	8b 55 f0	 mov	 edx, DWORD PTR _i$5[ebp]
  002c0	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v$2[ebp]
  002c5	f3 0f 11 44 d1
	04		 movss	 DWORD PTR [ecx+edx*8+4], xmm0

; 455  : 			}

  002cb	e9 ad fe ff ff	 jmp	 $LN2@draw_hind_
$LN3@draw_hind_:

; 456  : 		}
; 457  : 	}
; 458  : 
; 459  : 	//
; 460  : 	// viewport
; 461  : 	//
; 462  : 
; 463  : 	draw_large_hud = FALSE;

  002d0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_hud@@3HA, 0

; 464  : 
; 465  : 	hud_viewport_size = HUD_VIEWPORT_SMALL_SIZE;

  002da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  002e2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_size@@3MA, xmm0

; 466  : 	hud_viewport_x_org = HUD_VIEWPORT_TEXTURE_X_ORG;

  002ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  002f2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_org@@3MA, xmm0

; 467  : 	hud_viewport_y_org = HUD_VIEWPORT_TEXTURE_Y_ORG;

  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00302	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_org@@3MA, xmm0

; 468  : 
; 469  : 	hud_viewport_x_min = hud_viewport_x_org - (hud_viewport_size * 0.5);

  0030a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_x_org@@3MA
  00312	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  0031a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00322	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00326	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0032a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_min@@3MA, xmm0

; 470  : 	hud_viewport_y_min = hud_viewport_y_org - (hud_viewport_size * 0.5);

  00332	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_y_org@@3MA
  0033a	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  00342	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0034a	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0034e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00352	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_min@@3MA, xmm0

; 471  : 	hud_viewport_x_max = hud_viewport_x_org + (hud_viewport_size * 0.5) - 0.001;

  0035a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_x_org@@3MA
  00362	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  0036a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00372	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00376	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0037e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00382	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_max@@3MA, xmm0

; 472  : 	hud_viewport_y_max = hud_viewport_y_org + (hud_viewport_size * 0.5) - 0.001;

  0038a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_y_org@@3MA
  00392	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  0039a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  003a2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003a6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  003ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_max@@3MA, xmm0

; 473  : 
; 474  : 	set_2d_viewport (hud_env, hud_viewport_x_min, hud_viewport_y_min, hud_viewport_x_max, hud_viewport_y_max);

  003ba	51		 push	 ecx
  003bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_max@@3MA
  003c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c8	51		 push	 ecx
  003c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_max@@3MA
  003d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d6	51		 push	 ecx
  003d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_min@@3MA
  003df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e4	51		 push	 ecx
  003e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_min@@3MA
  003ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  003f7	50		 push	 eax
  003f8	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 475  : 
; 476  : 	//
; 477  : 	// get screen co-ords (vitural cockpit texture - scaling only works near screen centre)
; 478  : 	//
; 479  : 
; 480  : 	hud_screen_x_min = full_screen_x_mid - ((HUD_VIEWPORT_SMALL_SIZE / (640.0 * 2.0)) * full_screen_width);

  003fd	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00405	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  0040d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  00415	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00419	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0041d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_min@@3MA, xmm0

; 481  : 	hud_screen_y_min = full_screen_y_mid - ((HUD_VIEWPORT_SMALL_SIZE / (480.0 * 2.0)) * full_screen_height);

  00425	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  0042d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  00435	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd1111111111111
  0043d	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00441	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00445	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_min@@3MA, xmm0

; 482  : 
; 483  : 	hud_screen_x_max = full_screen_x_mid + ((HUD_VIEWPORT_SMALL_SIZE / (640.0 * 2.0)) * full_screen_width) - 0.001;

  0044d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00455	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  0045d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  00465	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00469	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00471	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00475	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_max@@3MA, xmm0

; 484  : 	hud_screen_y_max = full_screen_y_mid + ((HUD_VIEWPORT_SMALL_SIZE / (480.0 * 2.0)) * full_screen_height) - 0.001;

  0047d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  00485	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  0048d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd1111111111111
  00495	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00499	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  004a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004a5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_max@@3MA, xmm0

; 485  : 
; 486  : 	hud_screen_x_scale = 640.0 / full_screen_width;

  004ad	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  004b5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4084000000000000
  004bd	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004c1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004c5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_scale@@3MA, xmm0

; 487  : 	hud_screen_y_scale = 480.0 / full_screen_height;

  004cd	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  004d5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@407e000000000000
  004dd	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004e1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004e5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_scale@@3MA, xmm0

; 488  : 
; 489  : 	////////////////////////////////////////
; 490  : 	//
; 491  : 	// draw HUD
; 492  : 	//
; 493  : 	////////////////////////////////////////
; 494  : 
; 495  : 	set_active_screen (hud_texture_screen);

  004ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  004f2	50		 push	 eax
  004f3	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 496  : 
; 497  : 	if (lock_screen (hud_texture_screen))

  004f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  004fd	50		 push	 eax
  004fe	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00503	85 c0		 test	 eax, eax
  00505	0f 84 92 01 00
	00		 je	 $LN9@draw_hind_

; 498  : 	{
; 499  : 		rgb_colour
; 500  : 			clear_hud_colour;
; 501  : 
; 502  : 		if (backup_sight_active)

  0050b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?backup_sight_active@@3HA, 0
  00512	74 1e		 je	 SHORT $LN10@draw_hind_

; 503  : 		{
; 504  : 			set_rgb_colour (clear_hud_colour, backup_sight_colour.r, backup_sight_colour.g, backup_sight_colour.b, 0);

  00514	a0 02 00 00 00	 mov	 al, BYTE PTR ?backup_sight_colour@@3UREAL_COLOUR@@A+2
  00519	88 45 e2	 mov	 BYTE PTR _clear_hud_colour$1[ebp+2], al
  0051c	a0 01 00 00 00	 mov	 al, BYTE PTR ?backup_sight_colour@@3UREAL_COLOUR@@A+1
  00521	88 45 e1	 mov	 BYTE PTR _clear_hud_colour$1[ebp+1], al
  00524	a0 00 00 00 00	 mov	 al, BYTE PTR ?backup_sight_colour@@3UREAL_COLOUR@@A
  00529	88 45 e0	 mov	 BYTE PTR _clear_hud_colour$1[ebp], al
  0052c	c6 45 e3 00	 mov	 BYTE PTR _clear_hud_colour$1[ebp+3], 0

; 505  : 		}
; 506  : 		else

  00530	eb 1c		 jmp	 SHORT $LN11@draw_hind_
$LN10@draw_hind_:

; 507  : 		{
; 508  : 			set_rgb_colour (clear_hud_colour, hud_colour.r, hud_colour.g, hud_colour.b, 0);

  00532	a0 02 00 00 00	 mov	 al, BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A+2
  00537	88 45 e2	 mov	 BYTE PTR _clear_hud_colour$1[ebp+2], al
  0053a	a0 01 00 00 00	 mov	 al, BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A+1
  0053f	88 45 e1	 mov	 BYTE PTR _clear_hud_colour$1[ebp+1], al
  00542	a0 00 00 00 00	 mov	 al, BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A
  00547	88 45 e0	 mov	 BYTE PTR _clear_hud_colour$1[ebp], al
  0054a	c6 45 e3 00	 mov	 BYTE PTR _clear_hud_colour$1[ebp+3], 0
$LN11@draw_hind_:

; 509  : 		}
; 510  : 
; 511  : 		set_block (0, 0, HUD_VIEWPORT_SMALL_SIZE - 1, HUD_VIEWPORT_SMALL_SIZE - 1, clear_hud_colour);

  0054e	8b 45 e0	 mov	 eax, DWORD PTR _clear_hud_colour$1[ebp]
  00551	50		 push	 eax
  00552	68 ff 00 00 00	 push	 255			; 000000ffH
  00557	68 ff 00 00 00	 push	 255			; 000000ffH
  0055c	6a 00		 push	 0
  0055e	6a 00		 push	 0
  00560	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 512  : 
; 513  : 
; 514  : 		if (electrical_system_active())

  00565	e8 00 00 00 00	 call	 ?electrical_system_active@@YGHXZ ; electrical_system_active
  0056a	85 c0		 test	 eax, eax
  0056c	74 3d		 je	 SHORT $LN16@draw_hind_

; 515  : 			if (backup_sight_active)

  0056e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?backup_sight_active@@3HA, 0
  00575	74 07		 je	 SHORT $LN13@draw_hind_

; 516  : 				draw_backup_sight();

  00577	e8 00 00 00 00	 call	 ?draw_backup_sight@@YGXXZ ; draw_backup_sight
  0057c	eb 2d		 jmp	 SHORT $LN16@draw_hind_
$LN13@draw_hind_:

; 517  : 			else if (!hind_damage.head_up_display)

  0057e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hind_damage@@3THIND_DAMAGE_FLAGS@@A ; hind_damage
  00583	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00586	83 e0 01	 and	 eax, 1
  00589	75 20		 jne	 SHORT $LN16@draw_hind_

; 518  : 			{
; 519  : 				set_mono_font_colour (hud_colour);

  0058b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00590	50		 push	 eax
  00591	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 520  : 
; 521  : 				draw_layout_grid ();

  00596	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 522  : 
; 523  : 				if (hud_mode == HUD_MODE_WEAPON)

  0059b	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?hud_mode@@3W4HUD_MODES@@A, 2 ; hud_mode
  005a2	75 07		 jne	 SHORT $LN16@draw_hind_

; 524  : 					draw_weapon_mode_hud (TRUE);

  005a4	6a 01		 push	 1
  005a6	e8 00 00 00 00	 call	 ?draw_weapon_mode_hud@@YGXH@Z ; draw_weapon_mode_hud
$LN16@draw_hind_:

; 525  : 			}
; 526  : 
; 527  : 		// last pixel must be transparent because it's repeated when texture doesn't fill entire polygon
; 528  : 		draw_line(0, 0, 0, HUD_VIEWPORT_SMALL_SIZE - 1, clear_hud_colour);

  005ab	8b 45 e0	 mov	 eax, DWORD PTR _clear_hud_colour$1[ebp]
  005ae	50		 push	 eax
  005af	51		 push	 ecx
  005b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  005b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005bd	51		 push	 ecx
  005be	0f 57 c0	 xorps	 xmm0, xmm0
  005c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c6	51		 push	 ecx
  005c7	0f 57 c0	 xorps	 xmm0, xmm0
  005ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cf	51		 push	 ecx
  005d0	0f 57 c0	 xorps	 xmm0, xmm0
  005d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 529  : 		draw_line(0, 0, HUD_VIEWPORT_SMALL_SIZE - 1, 0, clear_hud_colour);

  005dd	8b 45 e0	 mov	 eax, DWORD PTR _clear_hud_colour$1[ebp]
  005e0	50		 push	 eax
  005e1	51		 push	 ecx
  005e2	0f 57 c0	 xorps	 xmm0, xmm0
  005e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ea	51		 push	 ecx
  005eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	51		 push	 ecx
  005f9	0f 57 c0	 xorps	 xmm0, xmm0
  005fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00601	51		 push	 ecx
  00602	0f 57 c0	 xorps	 xmm0, xmm0
  00605	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 530  : 		draw_line(0, HUD_VIEWPORT_SMALL_SIZE - 1, HUD_VIEWPORT_SMALL_SIZE - 1, HUD_VIEWPORT_SMALL_SIZE - 1, clear_hud_colour);

  0060f	8b 45 e0	 mov	 eax, DWORD PTR _clear_hud_colour$1[ebp]
  00612	50		 push	 eax
  00613	51		 push	 ecx
  00614	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  0061c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00621	51		 push	 ecx
  00622	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  0062a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062f	51		 push	 ecx
  00630	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  00638	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063d	51		 push	 ecx
  0063e	0f 57 c0	 xorps	 xmm0, xmm0
  00641	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00646	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 531  : 		draw_line(HUD_VIEWPORT_SMALL_SIZE - 1, 0, HUD_VIEWPORT_SMALL_SIZE - 1, HUD_VIEWPORT_SMALL_SIZE - 1, clear_hud_colour);

  0064b	8b 45 e0	 mov	 eax, DWORD PTR _clear_hud_colour$1[ebp]
  0064e	50		 push	 eax
  0064f	51		 push	 ecx
  00650	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  00658	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065d	51		 push	 ecx
  0065e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  00666	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066b	51		 push	 ecx
  0066c	0f 57 c0	 xorps	 xmm0, xmm0
  0066f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00674	51		 push	 ecx
  00675	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  0067d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00682	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 532  : 
; 533  : 		flush_screen_texture_graphics (hud_texture_screen);

  00687	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  0068c	50		 push	 eax
  0068d	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 534  : 
; 535  : 		unlock_screen (hud_texture_screen);

  00692	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  00697	50		 push	 eax
  00698	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN9@draw_hind_:

; 536  : 	}
; 537  : 
; 538  : 	set_active_screen (video_screen);

  0069d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  006a2	50		 push	 eax
  006a3	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 539  : }

  006a8	5f		 pop	 edi
  006a9	5e		 pop	 esi
  006aa	5b		 pop	 ebx
  006ab	8b e5		 mov	 esp, ebp
  006ad	5d		 pop	 ebp
  006ae	c3		 ret	 0
?draw_hind_hud_on_texture@@YGXXZ ENDP			; draw_hind_hud_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?draw_hind_hud_on_cockpit@@YGXH@Z
_TEXT	SEGMENT
_hud_enlarge$ = 8					; size = 4
?draw_hind_hud_on_cockpit@@YGXH@Z PROC			; draw_hind_hud_on_cockpit, COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 374  : 
; 375  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?draw_hind_hud_on_cockpit@@YGXH@Z ENDP			; draw_hind_hud_on_cockpit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?deinitialise_hind_hud@@YGXXZ
_TEXT	SEGMENT
_mem_size$1 = -4					; size = 4
?deinitialise_hind_hud@@YGXXZ PROC			; deinitialise_hind_hud, COMDAT

; 352  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 353  : 	destroy_2d_environment (hud_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 354  : 
; 355  : 	destroy_screen (hud_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 356  : 
; 357  : 	if (hud_texture_uv_coordinates)

  0001f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hud_texture_uv_coordinates@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, 0
  00026	74 39		 je	 SHORT $LN1@deinitiali

; 358  : 	{
; 359  : 		// copy back original coordinates
; 360  : 		size_t mem_size = 6 * sizeof(object_3d_short_textured_point);

  00028	c7 45 fc 30 00
	00 00		 mov	 DWORD PTR _mem_size$1[ebp], 48 ; 00000030H

; 361  : 		memcpy(hud_display_model->surface_texture_points, hud_texture_uv_coordinates, mem_size);

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _mem_size$1[ebp]
  00032	50		 push	 eax
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hud_texture_uv_coordinates@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A
  00039	51		 push	 ecx
  0003a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  00040	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _memcpy
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 362  : 
; 363  : 		safe_free(hud_texture_uv_coordinates);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_uv_coordinates@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 364  : 		hud_texture_uv_coordinates = NULL;

  00057	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hud_texture_uv_coordinates@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, 0
$LN1@deinitiali:

; 365  : 	}
; 366  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?deinitialise_hind_hud@@YGXXZ ENDP			; deinitialise_hind_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hind\hi_hud.c
;	COMDAT ?initialise_hind_hud@@YGXXZ
_TEXT	SEGMENT
_mem_size$1 = -8					; size = 4
_i$2 = -4						; size = 4
?initialise_hind_hud@@YGXXZ PROC			; initialise_hind_hud, COMDAT

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 304  : 	hud_env = create_2d_environment ();

  00009	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?hud_env@@3PAUENV_2D@@A, eax

; 305  : 
; 306  : 	hud_texture_screen = create_system_texture_screen (HUD_VIEWPORT_SMALL_SIZE, HUD_VIEWPORT_SMALL_SIZE, TEXTURE_INDEX_HVCKPT_HUD_DISPLAY, TEXTURE_TYPE_SINGLEALPHA);

  00013	6a 02		 push	 2
  00015	68 eb 06 00 00	 push	 1771			; 000006ebH
  0001a	68 00 01 00 00	 push	 256			; 00000100H
  0001f	68 00 01 00 00	 push	 256			; 00000100H
  00024	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00029	a3 00 00 00 00	 mov	 DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A, eax

; 307  : 
; 308  : 	set_2d_view_offset(hud_env, 0.0, 0.0);

  0002e	51		 push	 ecx
  0002f	0f 57 c0	 xorps	 xmm0, xmm0
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	51		 push	 ecx
  00038	0f 57 c0	 xorps	 xmm0, xmm0
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?set_2d_view_offset@@YGXPAUENV_2D@@MM@Z ; set_2d_view_offset

; 309  : 
; 310  : 	initialise_hud_colours();

  0004b	e8 00 00 00 00	 call	 ?initialise_hud_colours@@YGXXZ ; initialise_hud_colours

; 311  : 	initialise_hms_gun_pipper ();

  00050	e8 00 00 00 00	 call	 ?initialise_hms_gun_pipper@@YGXXZ ; initialise_hms_gun_pipper

; 312  : 	backup_sight_active = FALSE;

  00055	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?backup_sight_active@@3HA, 0

; 313  : 
; 314  : 	if (objects_3d_scene_database[OBJECT_3D_MI24V_HUD_DISPLAY].index)

  0005f	b8 e0 00 00 00	 mov	 eax, 224		; 000000e0H
  00064	69 c8 d3 0a 00
	00		 imul	 ecx, eax, 2771
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00070	83 3c 0a 00	 cmp	 DWORD PTR [edx+ecx], 0
  00074	0f 84 70 01 00
	00		 je	 $LN5@initialise

; 315  : 	{
; 316  : 		unsigned i, mem_size;
; 317  : 
; 318  : 		hud_display_model = &objects_3d_data[objects_3d_scene_database[OBJECT_3D_MI24V_HUD_DISPLAY].index];

  0007a	b8 e0 00 00 00	 mov	 eax, 224		; 000000e0H
  0007f	69 c8 d3 0a 00
	00		 imul	 ecx, eax, 2771
  00085	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0008b	6b 04 0a 68	 imul	 eax, DWORD PTR [edx+ecx], 104
  0008f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00095	a3 00 00 00 00	 mov	 DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A, eax

; 319  : 
; 320  : 		hud_position_y = (hud_display_model->bounding_box.ymin + hud_display_model->bounding_box.ymax) * 0.5;

  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  000a5	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  000aa	f3 0f 58 41 1c	 addss	 xmm0, DWORD PTR [ecx+28]
  000af	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000b3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000bf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_position_y@@3MA, xmm0

; 321  : 		hud_position_z = (hud_display_model->bounding_box.zmin + hud_display_model->bounding_box.zmax) * 0.5;

  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  000d2	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  000d7	f3 0f 58 41 24	 addss	 xmm0, DWORD PTR [ecx+36]
  000dc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000e0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000e8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ec	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_position_z@@3MA, xmm0

; 322  : 		hud_width = (hud_display_model->bounding_box.xmax - hud_display_model->bounding_box.xmin);

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  000f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  000ff	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00104	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00109	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_width@@3MA, xmm0

; 323  : 		hud_height = (hud_display_model->bounding_box.ymax - hud_display_model->bounding_box.ymin);

  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  00116	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  0011c	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00121	f3 0f 5c 41 18	 subss	 xmm0, DWORD PTR [ecx+24]
  00126	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_height@@3MA, xmm0

; 324  : 
; 325  : 		// make a copy of original texture coordinates
; 326  : 		if (!hud_texture_uv_coordinates)

  0012e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hud_texture_uv_coordinates@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, 0
  00135	0f 85 ad 00 00
	00		 jne	 $LN9@initialise

; 327  : 		{
; 328  : 			num_texture_coordinates = 0;

  0013b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_texture_coordinates@@3IA, 0

; 329  : 			if (hud_display_model->surfaces[0].texture_index)

  00145	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0014a	6b c8 00	 imul	 ecx, eax, 0
  0014d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  00153	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00156	0f b7 4c 08 04	 movzx	 ecx, WORD PTR [eax+ecx+4]
  0015b	85 c9		 test	 ecx, ecx
  0015d	74 7c		 je	 SHORT $LN8@initialise

; 330  : 			{
; 331  : 				for (i=0; i < hud_display_model->surfaces[0].number_of_faces; i++)

  0015f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00166	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00168	8b 45 fc	 mov	 eax, DWORD PTR _i$2[ebp]
  0016b	83 c0 01	 add	 eax, 1
  0016e	89 45 fc	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@initialise:
  00171	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00176	6b c8 00	 imul	 ecx, eax, 0
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  0017f	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00182	0f b7 4c 08 08	 movzx	 ecx, WORD PTR [eax+ecx+8]
  00187	39 4d fc	 cmp	 DWORD PTR _i$2[ebp], ecx
  0018a	73 1c		 jae	 SHORT $LN3@initialise

; 332  : 					num_texture_coordinates += hud_display_model->faces[i].number_of_points;

  0018c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  00191	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00194	8b 55 fc	 mov	 edx, DWORD PTR _i$2[ebp]
  00197	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  0019b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?num_texture_coordinates@@3IA
  001a1	a3 00 00 00 00	 mov	 DWORD PTR ?num_texture_coordinates@@3IA, eax
  001a6	eb c0		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 333  : 
; 334  : 				mem_size = 6 * sizeof(object_3d_short_textured_point);

  001a8	c7 45 f8 30 00
	00 00		 mov	 DWORD PTR _mem_size$1[ebp], 48 ; 00000030H

; 335  : 
; 336  : 				hud_texture_uv_coordinates = (object_3d_short_textured_point *) safe_malloc(mem_size);

  001af	8b 45 f8	 mov	 eax, DWORD PTR _mem_size$1[ebp]
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  001b8	a3 00 00 00 00	 mov	 DWORD PTR ?hud_texture_uv_coordinates@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, eax

; 337  : 				memcpy(hud_texture_uv_coordinates, hud_display_model->surface_texture_points, mem_size);

  001bd	8b 45 f8	 mov	 eax, DWORD PTR _mem_size$1[ebp]
  001c0	50		 push	 eax
  001c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A
  001c7	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  001ca	52		 push	 edx
  001cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_uv_coordinates@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 _memcpy
  001d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 338  : 			}
; 339  : 			else

  001d9	eb 0d		 jmp	 SHORT $LN9@initialise
$LN8@initialise:

; 340  : 				debug_fatal("Untextured HUD display");

  001db	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FLABOBHK@Untextured?5HUD?5display@
  001e0	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  001e5	83 c4 04	 add	 esp, 4
$LN9@initialise:

; 341  : 		}
; 342  : 	}
; 343  : 	else

  001e8	eb 0a		 jmp	 SHORT $LN6@initialise
$LN5@initialise:

; 344  : 		hud_display_model = NULL;

  001ea	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hud_display_model@@3PAUOBJECT_3D@@A, 0
$LN6@initialise:

; 345  : }

  001f4	5f		 pop	 edi
  001f5	5e		 pop	 esi
  001f6	5b		 pop	 ebx
  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c3		 ret	 0
?initialise_hind_hud@@YGXXZ ENDP			; initialise_hind_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?tan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?tan@@YGMM@Z PROC					; tan, COMDAT

; 299  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	return (_CSTD tanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _tanf
  00019	83 c4 04	 add	 esp, 4

; 301  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?tan@@YGMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?atan@@YGMM@Z PROC					; atan, COMDAT

; 46   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 47   : 	return (_CSTD atanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _atanf
  00019	83 c4 04	 add	 esp, 4

; 48   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?atan@@YGMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  :             return (float)tan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _tan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 766  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 638  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 639  :             return (float)atan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _atan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 640  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_atanf	ENDP
_TEXT	ENDS
END
