; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dstars.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?asm_convert_float_to_int@@YGXMPAH@Z		; asm_convert_float_to_int
PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?initialise_3d_stars@@YGXPBD@Z			; initialise_3d_stars
PUBLIC	?draw_3d_stars@@YGXXZ				; draw_3d_stars
PUBLIC	?transform_3d_stars@@YGXXZ			; transform_3d_stars
PUBLIC	?__LINE__Var@?0??initialise_3d_stars@@YGXPBD@Z@4JA ; `initialise_3d_stars'::`1'::__LINE__Var
PUBLIC	??_C@_0DC@LDBBGBFK@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_08BABJIOEM@filename@			; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0BB@FAPJNLEI@star_3d_surfaces@		; `string'
PUBLIC	??_C@_0P@DPCKFPCJ@star_3d_points@		; `string'
PUBLIC	??_C@_0CC@MGFODOMD@Potentially?5overrunning?5stars?3?5@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@3fbc28f5c28f5c29
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe2e147ae147ae1
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40efffe000000000
PUBLIC	__real@437f0000
EXTRN	__imp__fread:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?draw_point_list_primitive@@YGXH@Z:PROC		; draw_point_list_primitive
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?get_d3d_point_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z:PROC ; get_d3d_point_vertices_points_address
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?zbuffer_default_comparison@@3W4_D3DCMPFUNC@@A:DWORD ; zbuffer_default_comparison
EXTRN	?zbuffer_factor@@3NA:QWORD			; zbuffer_factor
EXTRN	?zbuffer_constant@@3NA:QWORD			; zbuffer_constant
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?moon_colour@@3ULIGHT_COLOUR@@A:BYTE		; moon_colour
EXTRN	?transformed_3d_points@@3PAUVERTEX@@A:BYTE	; transformed_3d_points
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?number_of_3d_star_points@@3HA DD 01H DUP (?)		; number_of_3d_star_points
?number_of_3d_star_surfaces@@3HA DD 01H DUP (?)		; number_of_3d_star_surfaces
?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A DD 01H DUP (?) ; star_3d_surfaces
?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A DD 01H DUP (?) ; star_3d_points
?star_3d_x_minimum@@3MA DD 01H DUP (?)			; star_3d_x_minimum
?star_3d_y_minimum@@3MA DD 01H DUP (?)			; star_3d_y_minimum
?star_3d_z_minimum@@3MA DD 01H DUP (?)			; star_3d_z_minimum
?star_3d_x_scale@@3MA DD 01H DUP (?)			; star_3d_x_scale
?star_3d_y_scale@@3MA DD 01H DUP (?)			; star_3d_y_scale
?star_3d_z_scale@@3MA DD 01H DUP (?)			; star_3d_z_scale
?number_of_visible_3d_stars@@3HA DD 01H DUP (?)		; number_of_visible_3d_stars
_BSS	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40efffe000000000
CONST	SEGMENT
__real@40efffe000000000 DQ 040efffe000000000r	; 65535
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe2e147ae147ae1
CONST	SEGMENT
__real@3fe2e147ae147ae1 DQ 03fe2e147ae147ae1r	; 0.59
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fbc28f5c28f5c29
CONST	SEGMENT
__real@3fbc28f5c28f5c29 DQ 03fbc28f5c28f5c29r	; 0.11
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0CC@MGFODOMD@Potentially?5overrunning?5stars?3?5@
CONST	SEGMENT
??_C@_0CC@MGFODOMD@Potentially?5overrunning?5stars?3?5@ DB 'Potentially o'
	DB	'verrunning stars: %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DPCKFPCJ@star_3d_points@
CONST	SEGMENT
??_C@_0P@DPCKFPCJ@star_3d_points@ DB 'star_3d_points', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAPJNLEI@star_3d_surfaces@
CONST	SEGMENT
??_C@_0BB@FAPJNLEI@star_3d_surfaces@ DB 'star_3d_surfaces', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename@
CONST	SEGMENT
??_C@_08BABJIOEM@filename@ DB 'filename', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LDBBGBFK@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DC@LDBBGBFK@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\3dstars.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_3d_stars@@YGXPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_3d_stars@@YGXPBD@Z@4JA DD 06dH ; `initialise_3d_stars'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dstars.c
;	COMDAT ?transform_3d_stars@@YGXXZ
_TEXT	SEGMENT
_tweaked_alpha$1 = -96					; size = 4
_surface$2 = -92					; size = 4
_int_alpha$3 = -88					; size = 4
_outcode$4 = -84					; size = 4
_iymin$5 = -80						; size = 4
_iymax$6 = -76						; size = 4
_ixmin$7 = -72						; size = 4
_ixmax$8 = -68						; size = 4
_j$9 = -64						; size = 4
_i$10 = -60						; size = 4
_q$11 = -56						; size = 4
_oymin$12 = -52						; size = 4
_oymax$13 = -48						; size = 4
_oxmin$14 = -44						; size = 4
_oxmax$15 = -40						; size = 4
_star_height$16 = -36					; size = 4
_result_points$ = -32					; size = 4
_z$ = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_pointz$ = -16						; size = 4
_pointy$ = -12						; size = 4
_pointx$ = -8						; size = 4
_count$ = -4						; size = 4
?transform_3d_stars@@YGXXZ PROC				; transform_3d_stars, COMDAT

; 283  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 284  : 
; 285  : 	int
; 286  : 		count;
; 287  : 
; 288  : 	float
; 289  : 		pointx,
; 290  : 		pointy,
; 291  : 		pointz,
; 292  : 		x,
; 293  : 		y,
; 294  : 		z;
; 295  : 
; 296  : 	vertex
; 297  : 		*result_points;
; 298  : 
; 299  : 	number_of_visible_3d_stars = 0;

  0000c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_visible_3d_stars@@3HA, 0

; 300  : 
; 301  : 	result_points = transformed_3d_points;

  00016	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _result_points$[ebp], OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points

; 302  : 
; 303  : 	for ( count = 0; count < number_of_3d_star_points; count++ )

  0001d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00024	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00032	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_3d_star_points@@3HA
  00038	0f 8d 99 04 00
	00		 jge	 $LN3@transform_

; 304  : 	{
; 305  : 
; 306  : 		float
; 307  : 			star_height;
; 308  : 	
; 309  : 		pointx = star_3d_points[count].x;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A
  00047	0f b7 14 c1	 movzx	 edx, WORD PTR [ecx+eax*8]
  0004b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0004f	f3 0f 11 45 f8	 movss	 DWORD PTR _pointx$[ebp], xmm0

; 310  : 		pointy = star_3d_points[count].y;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A
  0005d	0f b7 54 c1 02	 movzx	 edx, WORD PTR [ecx+eax*8+2]
  00062	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00066	f3 0f 11 45 f4	 movss	 DWORD PTR _pointy$[ebp], xmm0

; 311  : 		pointz = star_3d_points[count].z;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A
  00074	0f b7 54 c1 04	 movzx	 edx, WORD PTR [ecx+eax*8+4]
  00079	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0007d	f3 0f 11 45 f0	 movss	 DWORD PTR _pointz$[ebp], xmm0

; 312  : 
; 313  : 		star_height = pointy;

  00082	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pointy$[ebp]
  00087	f3 0f 11 45 dc	 movss	 DWORD PTR _star_height$16[ebp], xmm0

; 314  : 	
; 315  : 		pointx *= star_3d_x_scale;

  0008c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pointx$[ebp]
  00091	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?star_3d_x_scale@@3MA
  00099	f3 0f 11 45 f8	 movss	 DWORD PTR _pointx$[ebp], xmm0

; 316  : 		pointy *= star_3d_y_scale;

  0009e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pointy$[ebp]
  000a3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?star_3d_y_scale@@3MA
  000ab	f3 0f 11 45 f4	 movss	 DWORD PTR _pointy$[ebp], xmm0

; 317  : 		pointz *= star_3d_z_scale;

  000b0	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pointz$[ebp]
  000b5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?star_3d_z_scale@@3MA
  000bd	f3 0f 11 45 f0	 movss	 DWORD PTR _pointz$[ebp], xmm0

; 318  : 	
; 319  : 		pointx += star_3d_x_minimum;

  000c2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pointx$[ebp]
  000c7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?star_3d_x_minimum@@3MA
  000cf	f3 0f 11 45 f8	 movss	 DWORD PTR _pointx$[ebp], xmm0

; 320  : 		pointy += star_3d_y_minimum;

  000d4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pointy$[ebp]
  000d9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?star_3d_y_minimum@@3MA
  000e1	f3 0f 11 45 f4	 movss	 DWORD PTR _pointy$[ebp], xmm0

; 321  : 		pointz += star_3d_z_minimum;

  000e6	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pointz$[ebp]
  000eb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?star_3d_z_minimum@@3MA
  000f3	f3 0f 11 45 f0	 movss	 DWORD PTR _pointz$[ebp], xmm0

; 322  : 	
; 323  : 		z = pointx * visual_3d_vp->attitude[2][0];

  000f8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000fd	d1 e0		 shl	 eax, 1
  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00105	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00109	b8 04 00 00 00	 mov	 eax, 4
  0010e	6b c8 00	 imul	 ecx, eax, 0
  00111	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pointx$[ebp]
  00116	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  0011b	f3 0f 11 45 e4	 movss	 DWORD PTR _z$[ebp], xmm0

; 324  : 		z += pointy * visual_3d_vp->attitude[2][1];

  00120	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00125	d1 e0		 shl	 eax, 1
  00127	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0012d	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00131	b8 04 00 00 00	 mov	 eax, 4
  00136	c1 e0 00	 shl	 eax, 0
  00139	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pointy$[ebp]
  0013e	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00143	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _z$[ebp]
  00148	f3 0f 11 45 e4	 movss	 DWORD PTR _z$[ebp], xmm0

; 325  : 		z += pointz * visual_3d_vp->attitude[2][2];

  0014d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00152	d1 e0		 shl	 eax, 1
  00154	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0015a	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  0015e	b8 04 00 00 00	 mov	 eax, 4
  00163	d1 e0		 shl	 eax, 1
  00165	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pointz$[ebp]
  0016a	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0016f	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _z$[ebp]
  00174	f3 0f 11 45 e4	 movss	 DWORD PTR _z$[ebp], xmm0

; 326  : 
; 327  : 		if ( *( ( int * ) &z ) >= *( ( int * ) &clip_hither ) )

  00179	8b 45 e4	 mov	 eax, DWORD PTR _z$[ebp]
  0017c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  00182	0f 8c 4a 03 00
	00		 jl	 $LN6@transform_

; 328  : 		{
; 329  : 
; 330  : 			float
; 331  : 				oxmax,
; 332  : 				oxmin,
; 333  : 				oymax,
; 334  : 				oymin,
; 335  : 				q,
; 336  : 				i,
; 337  : 				j;
; 338  : 	
; 339  : 			int
; 340  : 				ixmax,
; 341  : 				ixmin,
; 342  : 				iymax,
; 343  : 				iymin,
; 344  : 				outcode;
; 345  : 
; 346  : 			x = pointx * visual_3d_vp->attitude[0][0];

  00188	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0018d	6b c8 00	 imul	 ecx, eax, 0
  00190	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00196	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  0019a	b9 04 00 00 00	 mov	 ecx, 4
  0019f	6b d1 00	 imul	 edx, ecx, 0
  001a2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pointx$[ebp]
  001a7	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  001ac	f3 0f 11 45 ec	 movss	 DWORD PTR _x$[ebp], xmm0

; 347  : 			x += pointy * visual_3d_vp->attitude[0][1];

  001b1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001b6	6b c8 00	 imul	 ecx, eax, 0
  001b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001bf	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  001c3	b9 04 00 00 00	 mov	 ecx, 4
  001c8	c1 e1 00	 shl	 ecx, 0
  001cb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pointy$[ebp]
  001d0	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  001d5	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _x$[ebp]
  001da	f3 0f 11 45 ec	 movss	 DWORD PTR _x$[ebp], xmm0

; 348  : 			x += pointz * visual_3d_vp->attitude[0][2];

  001df	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001e4	6b c8 00	 imul	 ecx, eax, 0
  001e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001ed	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  001f1	b9 04 00 00 00	 mov	 ecx, 4
  001f6	d1 e1		 shl	 ecx, 1
  001f8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pointz$[ebp]
  001fd	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  00202	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _x$[ebp]
  00207	f3 0f 11 45 ec	 movss	 DWORD PTR _x$[ebp], xmm0

; 349  : 	
; 350  : 			y = pointx * visual_3d_vp->attitude[1][0];

  0020c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00211	c1 e0 00	 shl	 eax, 0
  00214	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0021a	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  0021e	b8 04 00 00 00	 mov	 eax, 4
  00223	6b c8 00	 imul	 ecx, eax, 0
  00226	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pointx$[ebp]
  0022b	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  00230	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0

; 351  : 			y += pointy * visual_3d_vp->attitude[1][1];

  00235	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0023a	c1 e0 00	 shl	 eax, 0
  0023d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00243	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00247	b8 04 00 00 00	 mov	 eax, 4
  0024c	c1 e0 00	 shl	 eax, 0
  0024f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pointy$[ebp]
  00254	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00259	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _y$[ebp]
  0025e	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0

; 352  : 			y += pointz * visual_3d_vp->attitude[1][2];

  00263	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00268	c1 e0 00	 shl	 eax, 0
  0026b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00271	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00275	b8 04 00 00 00	 mov	 eax, 4
  0027a	d1 e0		 shl	 eax, 1
  0027c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pointz$[ebp]
  00281	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00286	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _y$[ebp]
  0028b	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0

; 353  : 	
; 354  : 			q = 1.0 / z;

  00290	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  00295	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0029d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002a1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002a5	f3 0f 11 45 c8	 movss	 DWORD PTR _q$11[ebp], xmm0

; 355  : 
; 356  : 			i = ( active_3d_environment->screen_i_scale * x * q );

  002aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002af	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002b3	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _x$[ebp]
  002b8	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _q$11[ebp]
  002bd	f3 0f 11 45 c4	 movss	 DWORD PTR _i$10[ebp], xmm0

; 357  : 			j = ( active_3d_environment->screen_j_scale * y * q );

  002c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002c7	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  002cc	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y$[ebp]
  002d1	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _q$11[ebp]
  002d6	f3 0f 11 45 c0	 movss	 DWORD PTR _j$9[ebp], xmm0

; 358  : 
; 359  : 			j = active_3d_environment->y_origin - j;

  002db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002e0	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  002e5	f3 0f 5c 45 c0	 subss	 xmm0, DWORD PTR _j$9[ebp]
  002ea	f3 0f 11 45 c0	 movss	 DWORD PTR _j$9[ebp], xmm0

; 360  : 			i = active_3d_environment->x_origin + i;

  002ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002f4	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  002f9	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _i$10[ebp]
  002fe	f3 0f 11 45 c4	 movss	 DWORD PTR _i$10[ebp], xmm0

; 361  : 	
; 362  : 			oxmax = active_viewport.x_max - i;

  00303	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0030b	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _i$10[ebp]
  00310	f3 0f 11 45 d8	 movss	 DWORD PTR _oxmax$15[ebp], xmm0

; 363  : 			oxmin = i - active_viewport.x_min;

  00315	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _i$10[ebp]
  0031a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00322	f3 0f 11 45 d4	 movss	 DWORD PTR _oxmin$14[ebp], xmm0

; 364  : 			oymax = active_viewport.y_max - j;

  00327	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  0032f	f3 0f 5c 45 c0	 subss	 xmm0, DWORD PTR _j$9[ebp]
  00334	f3 0f 11 45 d0	 movss	 DWORD PTR _oymax$13[ebp], xmm0

; 365  : 			oymin = j - active_viewport.y_min;

  00339	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _j$9[ebp]
  0033e	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00346	f3 0f 11 45 cc	 movss	 DWORD PTR _oymin$12[ebp], xmm0

; 366  : 		
; 367  : 			ixmax = *( ( int * ) &oxmax );

  0034b	8b 45 d8	 mov	 eax, DWORD PTR _oxmax$15[ebp]
  0034e	89 45 bc	 mov	 DWORD PTR _ixmax$8[ebp], eax

; 368  : 			ixmin = *( ( int * ) &oxmin );

  00351	8b 45 d4	 mov	 eax, DWORD PTR _oxmin$14[ebp]
  00354	89 45 b8	 mov	 DWORD PTR _ixmin$7[ebp], eax

; 369  : 			iymax = *( ( int * ) &oymax );

  00357	8b 45 d0	 mov	 eax, DWORD PTR _oymax$13[ebp]
  0035a	89 45 b4	 mov	 DWORD PTR _iymax$6[ebp], eax

; 370  : 			iymin = *( ( int * ) &oymin );

  0035d	8b 45 cc	 mov	 eax, DWORD PTR _oymin$12[ebp]
  00360	89 45 b0	 mov	 DWORD PTR _iymin$5[ebp], eax

; 371  : 	
; 372  : 			outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00363	8b 45 b4	 mov	 eax, DWORD PTR _iymax$6[ebp]
  00366	50		 push	 eax
  00367	8b 4d bc	 mov	 ecx, DWORD PTR _ixmax$8[ebp]
  0036a	51		 push	 ecx
  0036b	8b 55 b0	 mov	 edx, DWORD PTR _iymin$5[ebp]
  0036e	52		 push	 edx
  0036f	8b 45 b8	 mov	 eax, DWORD PTR _ixmin$7[ebp]
  00372	50		 push	 eax
  00373	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00378	89 45 ac	 mov	 DWORD PTR _outcode$4[ebp], eax

; 373  : 
; 374  : 			if ( !outcode )

  0037b	83 7d ac 00	 cmp	 DWORD PTR _outcode$4[ebp], 0
  0037f	0f 85 4d 01 00
	00		 jne	 $LN6@transform_

; 375  : 			{
; 376  : 
; 377  : 				int
; 378  : 					int_alpha,
; 379  : 					surface;
; 380  : 
; 381  : 				float
; 382  : 					tweaked_alpha;
; 383  : 
; 384  : 
; 385  : 				surface = star_3d_points[count].surface;

  00385	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00388	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A
  0038e	0f b7 54 c1 06	 movzx	 edx, WORD PTR [ecx+eax*8+6]
  00393	89 55 a4	 mov	 DWORD PTR _surface$2[ebp], edx

; 386  : 
; 387  : 				star_height /= 65535.0;

  00396	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _star_height$16[ebp]
  0039b	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40efffe000000000
  003a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a7	f3 0f 11 45 dc	 movss	 DWORD PTR _star_height$16[ebp], xmm0

; 388  : 				star_height = 1.0 - star_height;

  003ac	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _star_height$16[ebp]
  003b1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003b9	f2 0f 5c c8	 subsd	 xmm1, xmm0
  003bd	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003c1	f3 0f 11 45 dc	 movss	 DWORD PTR _star_height$16[ebp], xmm0

; 389  : 
; 390  : 				star_height *= 2;

  003c6	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _star_height$16[ebp]
  003cb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  003d3	f3 0f 11 45 dc	 movss	 DWORD PTR _star_height$16[ebp], xmm0

; 391  : 
; 392  : 				if ( star_height >= 1.0 )

  003d8	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _star_height$16[ebp]
  003dd	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  003e5	72 0d		 jb	 SHORT $LN7@transform_

; 393  : 				{
; 394  : 
; 395  : 					star_height = 1.0;

  003e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ef	f3 0f 11 45 dc	 movss	 DWORD PTR _star_height$16[ebp], xmm0
$LN7@transform_:

; 396  : 				}
; 397  : 
; 398  : 				star_height *= star_height;

  003f4	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _star_height$16[ebp]
  003f9	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _star_height$16[ebp]
  003fe	f3 0f 11 45 dc	 movss	 DWORD PTR _star_height$16[ebp], xmm0

; 399  : 
; 400  : 				tweaked_alpha = star_3d_surfaces[surface].a;

  00403	6b 45 a4 14	 imul	 eax, DWORD PTR _surface$2[ebp], 20
  00407	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  0040d	0f b6 54 01 13	 movzx	 edx, BYTE PTR [ecx+eax+19]
  00412	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00416	f3 0f 11 45 a0	 movss	 DWORD PTR _tweaked_alpha$1[ebp], xmm0

; 401  : 				tweaked_alpha *= ( 1.0 - star_height );

  0041b	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _star_height$16[ebp]
  00420	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00428	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0042c	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _tweaked_alpha$1[ebp]
  00431	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00435	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00439	f3 0f 11 45 a0	 movss	 DWORD PTR _tweaked_alpha$1[ebp], xmm0

; 402  : 
; 403  : 				asm_convert_float_to_int ( tweaked_alpha, &int_alpha );

  0043e	8d 45 a8	 lea	 eax, DWORD PTR _int_alpha$3[ebp]
  00441	50		 push	 eax
  00442	51		 push	 ecx
  00443	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _tweaked_alpha$1[ebp]
  00448	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044d	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 404  : 
; 405  : 				result_points->colour = star_3d_surfaces[surface].colour;

  00452	6b 45 a4 14	 imul	 eax, DWORD PTR _surface$2[ebp], 20
  00456	8b 4d e0	 mov	 ecx, DWORD PTR _result_points$[ebp]
  00459	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  0045f	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  00463	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 406  : 				result_points->alpha = int_alpha;

  00466	8b 45 e0	 mov	 eax, DWORD PTR _result_points$[ebp]
  00469	8a 4d a8	 mov	 cl, BYTE PTR _int_alpha$3[ebp]
  0046c	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 407  : 		
; 408  : 				result_points->i = i;

  0046f	8b 45 e0	 mov	 eax, DWORD PTR _result_points$[ebp]
  00472	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _i$10[ebp]
  00477	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 409  : 				result_points->j = j;

  0047c	8b 45 e0	 mov	 eax, DWORD PTR _result_points$[ebp]
  0047f	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _j$9[ebp]
  00484	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 410  : 				result_points->x = x;

  00489	8b 45 e0	 mov	 eax, DWORD PTR _result_points$[ebp]
  0048c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x$[ebp]
  00491	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 411  : 				result_points->y = y;

  00495	8b 45 e0	 mov	 eax, DWORD PTR _result_points$[ebp]
  00498	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0049d	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 412  : 				result_points->z = z;

  004a2	8b 45 e0	 mov	 eax, DWORD PTR _result_points$[ebp]
  004a5	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _z$[ebp]
  004aa	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 413  : 				result_points->q = q;

  004af	8b 45 e0	 mov	 eax, DWORD PTR _result_points$[ebp]
  004b2	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _q$11[ebp]
  004b7	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 414  : 
; 415  : 				result_points++;

  004bc	8b 45 e0	 mov	 eax, DWORD PTR _result_points$[ebp]
  004bf	83 c0 40	 add	 eax, 64			; 00000040H
  004c2	89 45 e0	 mov	 DWORD PTR _result_points$[ebp], eax

; 416  : 
; 417  : 				number_of_visible_3d_stars++;

  004c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_visible_3d_stars@@3HA
  004ca	83 c0 01	 add	 eax, 1
  004cd	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_visible_3d_stars@@3HA, eax
$LN6@transform_:

; 418  : 			}
; 419  : 		}
; 420  : 	}

  004d2	e9 4f fb ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 421  : }

  004d7	5f		 pop	 edi
  004d8	5e		 pop	 esi
  004d9	5b		 pop	 ebx
  004da	8b e5		 mov	 esp, ebp
  004dc	5d		 pop	 ebp
  004dd	c3		 ret	 0
?transform_3d_stars@@YGXXZ ENDP				; transform_3d_stars
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dstars.c
;	COMDAT ?draw_3d_stars@@YGXXZ
_TEXT	SEGMENT
tv134 = -104						; size = 4
tv135 = -100						; size = 4
_destination_vertices$1 = -32				; size = 4
_translucency$2 = -28					; size = 4
_blue$3 = -24						; size = 4
_green$4 = -20						; size = 4
_red$5 = -16						; size = 4
_intensity$ = -12					; size = 4
_count$ = -8						; size = 4
_total_translucency$ = -4				; size = 4
?draw_3d_stars@@YGXXZ PROC				; draw_3d_stars, COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  : 
; 187  : 	int
; 188  : 		total_translucency,
; 189  : 		count;
; 190  : 
; 191  : 	float
; 192  : 		intensity;
; 193  : 
; 194  : 	//
; 195  : 	// First, set all the surfaces to the correct colours
; 196  : 	//
; 197  : 
; 198  : 	intensity = moon_colour.red * 0.3 + moon_colour.green * 0.59 + moon_colour.blue * 0.11;

  00009	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?moon_colour@@3ULIGHT_COLOUR@@A
  00011	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  00019	f3 0f 5a 0d 04
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?moon_colour@@3ULIGHT_COLOUR@@A+4
  00021	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe2e147ae147ae1
  00029	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0002d	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?moon_colour@@3ULIGHT_COLOUR@@A+8
  00035	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fbc28f5c28f5c29
  0003d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00041	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00045	f3 0f 11 45 f4	 movss	 DWORD PTR _intensity$[ebp], xmm0

; 199  : 
; 200  : 	total_translucency = 0;

  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _total_translucency$[ebp], 0

; 201  : 
; 202  : 	for ( count = 0; count < number_of_3d_star_surfaces; count++ )

  00051	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00058	eb 09		 jmp	 SHORT $LN4@draw_3d_st
$LN2@draw_3d_st:
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0005d	83 c0 01	 add	 eax, 1
  00060	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_3d_st:
  00063	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00066	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_3d_star_surfaces@@3HA
  0006c	0f 8d 25 01 00
	00		 jge	 $LN3@draw_3d_st

; 203  : 	{
; 204  : 
; 205  : 
; 206  : 		int
; 207  : 			red,
; 208  : 			green,
; 209  : 			blue,
; 210  : 			translucency;
; 211  : 
; 212  : 		asm_convert_float_to_int ( star_3d_surfaces[count].red * 255, &red );

  00072	8d 45 f0	 lea	 eax, DWORD PTR _red$5[ebp]
  00075	50		 push	 eax
  00076	6b 4d f8 14	 imul	 ecx, DWORD PTR _count$[ebp], 20
  0007a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  00080	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00085	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0008d	51		 push	 ecx
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 213  : 		asm_convert_float_to_int ( star_3d_surfaces[count].green * 255, &green );

  00098	8d 45 ec	 lea	 eax, DWORD PTR _green$4[ebp]
  0009b	50		 push	 eax
  0009c	6b 4d f8 14	 imul	 ecx, DWORD PTR _count$[ebp], 20
  000a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  000a6	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  000ac	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000b4	51		 push	 ecx
  000b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ba	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 214  : 		asm_convert_float_to_int ( star_3d_surfaces[count].blue * 255, &blue );

  000bf	8d 45 e8	 lea	 eax, DWORD PTR _blue$3[ebp]
  000c2	50		 push	 eax
  000c3	6b 4d f8 14	 imul	 ecx, DWORD PTR _count$[ebp], 20
  000c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  000cd	f3 0f 10 44 0a
	08		 movss	 xmm0, DWORD PTR [edx+ecx+8]
  000d3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000db	51		 push	 ecx
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 215  : 		asm_convert_float_to_int ( star_3d_surfaces[count].translucency * intensity * 255, &translucency );

  000e6	8d 45 e4	 lea	 eax, DWORD PTR _translucency$2[ebp]
  000e9	50		 push	 eax
  000ea	6b 4d f8 14	 imul	 ecx, DWORD PTR _count$[ebp], 20
  000ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  000f4	f3 0f 10 44 0a
	0c		 movss	 xmm0, DWORD PTR [edx+ecx+12]
  000fa	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _intensity$[ebp]
  000ff	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00107	51		 push	 ecx
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 216  : 
; 217  : 		translucency = bound ( translucency, 0, 255 );

  00112	83 7d e4 00	 cmp	 DWORD PTR _translucency$2[ebp], 0
  00116	7d 09		 jge	 SHORT $LN14@draw_3d_st
  00118	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
  0011f	eb 1e		 jmp	 SHORT $LN15@draw_3d_st
$LN14@draw_3d_st:
  00121	81 7d e4 ff 00
	00 00		 cmp	 DWORD PTR _translucency$2[ebp], 255 ; 000000ffH
  00128	7e 09		 jle	 SHORT $LN12@draw_3d_st
  0012a	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR tv134[ebp], 255 ; 000000ffH
  00131	eb 06		 jmp	 SHORT $LN13@draw_3d_st
$LN12@draw_3d_st:
  00133	8b 45 e4	 mov	 eax, DWORD PTR _translucency$2[ebp]
  00136	89 45 98	 mov	 DWORD PTR tv134[ebp], eax
$LN13@draw_3d_st:
  00139	8b 4d 98	 mov	 ecx, DWORD PTR tv134[ebp]
  0013c	89 4d 9c	 mov	 DWORD PTR tv135[ebp], ecx
$LN15@draw_3d_st:
  0013f	8b 55 9c	 mov	 edx, DWORD PTR tv135[ebp]
  00142	89 55 e4	 mov	 DWORD PTR _translucency$2[ebp], edx

; 218  : 
; 219  : 		star_3d_surfaces[count].r = red;

  00145	6b 45 f8 14	 imul	 eax, DWORD PTR _count$[ebp], 20
  00149	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  0014f	8a 55 f0	 mov	 dl, BYTE PTR _red$5[ebp]
  00152	88 54 01 12	 mov	 BYTE PTR [ecx+eax+18], dl

; 220  : 		star_3d_surfaces[count].g = green;

  00156	6b 45 f8 14	 imul	 eax, DWORD PTR _count$[ebp], 20
  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  00160	8a 55 ec	 mov	 dl, BYTE PTR _green$4[ebp]
  00163	88 54 01 11	 mov	 BYTE PTR [ecx+eax+17], dl

; 221  : 		star_3d_surfaces[count].b = blue;

  00167	6b 45 f8 14	 imul	 eax, DWORD PTR _count$[ebp], 20
  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  00171	8a 55 e8	 mov	 dl, BYTE PTR _blue$3[ebp]
  00174	88 54 01 10	 mov	 BYTE PTR [ecx+eax+16], dl

; 222  : 		star_3d_surfaces[count].a = translucency;

  00178	6b 45 f8 14	 imul	 eax, DWORD PTR _count$[ebp], 20
  0017c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  00182	8a 55 e4	 mov	 dl, BYTE PTR _translucency$2[ebp]
  00185	88 54 01 13	 mov	 BYTE PTR [ecx+eax+19], dl

; 223  : 
; 224  : 		total_translucency += translucency;

  00189	8b 45 fc	 mov	 eax, DWORD PTR _total_translucency$[ebp]
  0018c	03 45 e4	 add	 eax, DWORD PTR _translucency$2[ebp]
  0018f	89 45 fc	 mov	 DWORD PTR _total_translucency$[ebp], eax

; 225  : 	}

  00192	e9 c3 fe ff ff	 jmp	 $LN2@draw_3d_st
$LN3@draw_3d_st:

; 226  : 
; 227  : 	if ( total_translucency )

  00197	83 7d fc 00	 cmp	 DWORD PTR _total_translucency$[ebp], 0
  0019b	0f 84 54 01 00
	00		 je	 $LN9@draw_3d_st

; 228  : 	{
; 229  : 	
; 230  : 		transform_3d_stars ();

  001a1	e8 00 00 00 00	 call	 ?transform_3d_stars@@YGXXZ ; transform_3d_stars

; 231  : 	
; 232  : 		//
; 233  : 		// Now go through all the visible stars, drawing them!
; 234  : 		//
; 235  : 	
; 236  : 		if ( number_of_visible_3d_stars )

  001a6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?number_of_visible_3d_stars@@3HA, 0
  001ad	0f 84 42 01 00
	00		 je	 $LN9@draw_3d_st

; 237  : 		{
; 238  : 		
; 239  : 			LPD3DTLVERTEX
; 240  : 				destination_vertices;
; 241  : 	
; 242  : 			set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, FALSE, FALSE );

  001b3	6a 00		 push	 0
  001b5	6a 00		 push	 0
  001b7	6a 00		 push	 0
  001b9	6a 01		 push	 1
  001bb	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 243  : 
; 244  : 			set_d3d_int_state ( D3DRENDERSTATE_ZFUNC, D3DCMP_ALWAYS );

  001c0	6a 08		 push	 8
  001c2	6a 17		 push	 23			; 00000017H
  001c4	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 245  : 		
; 246  : 			set_d3d_plain_renderstate ();

  001c9	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 247  : 
; 248  : 			if ( number_of_visible_3d_stars > 255 )

  001ce	81 3d 00 00 00
	00 ff 00 00 00	 cmp	 DWORD PTR ?number_of_visible_3d_stars@@3HA, 255 ; 000000ffH
  001d8	7e 1d		 jle	 SHORT $LN10@draw_3d_st

; 249  : 			{
; 250  : 
; 251  : 				debug_log ( "Potentially overrunning stars: %d", number_of_visible_3d_stars );

  001da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_visible_3d_stars@@3HA
  001df	50		 push	 eax
  001e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MGFODOMD@Potentially?5overrunning?5stars?3?5@
  001e5	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001ea	83 c4 08	 add	 esp, 8

; 252  : 
; 253  : 				number_of_visible_3d_stars = 255;

  001ed	c7 05 00 00 00
	00 ff 00 00 00	 mov	 DWORD PTR ?number_of_visible_3d_stars@@3HA, 255 ; 000000ffH
$LN10@draw_3d_st:

; 254  : 			}
; 255  : 
; 256  : 			destination_vertices = get_d3d_point_vertices_points_address ( number_of_visible_3d_stars );

  001f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_visible_3d_stars@@3HA
  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 ?get_d3d_point_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z ; get_d3d_point_vertices_points_address
  00202	89 45 e0	 mov	 DWORD PTR _destination_vertices$1[ebp], eax

; 257  : 	
; 258  : 			for ( count = 0; count < number_of_visible_3d_stars; count++ )

  00205	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0020c	eb 09		 jmp	 SHORT $LN7@draw_3d_st
$LN5@draw_3d_st:
  0020e	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00211	83 c0 01	 add	 eax, 1
  00214	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN7@draw_3d_st:
  00217	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0021a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_visible_3d_stars@@3HA
  00220	0f 8d aa 00 00
	00		 jge	 $LN6@draw_3d_st

; 259  : 			{
; 260  : 	
; 261  : 				destination_vertices[count].sx = transformed_3d_points[count].i;

  00226	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00229	c1 e0 06	 shl	 eax, 6
  0022c	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  0022f	c1 e1 05	 shl	 ecx, 5
  00232	8b 55 e0	 mov	 edx, DWORD PTR _destination_vertices$1[ebp]
  00235	8b 80 10 00 00
	00		 mov	 eax, DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+16]
  0023b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 262  : 				destination_vertices[count].sy = transformed_3d_points[count].j;

  0023e	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00241	c1 e0 06	 shl	 eax, 6
  00244	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00247	c1 e1 05	 shl	 ecx, 5
  0024a	8b 55 e0	 mov	 edx, DWORD PTR _destination_vertices$1[ebp]
  0024d	8b 80 14 00 00
	00		 mov	 eax, DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+20]
  00253	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 263  : 				destination_vertices[count].sz = ( transformed_3d_points[count].q * zbuffer_factor ) + zbuffer_constant;

  00257	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0025a	c1 e0 06	 shl	 eax, 6
  0025d	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+12]
  00265	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  0026d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  00275	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00279	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  0027c	c1 e1 05	 shl	 ecx, 5
  0027f	8b 55 e0	 mov	 edx, DWORD PTR _destination_vertices$1[ebp]
  00282	f3 0f 11 44 0a
	08		 movss	 DWORD PTR [edx+ecx+8], xmm0

; 264  : 				destination_vertices[count].rhw = transformed_3d_points[count].q;

  00288	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0028b	c1 e0 06	 shl	 eax, 6
  0028e	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00291	c1 e1 05	 shl	 ecx, 5
  00294	8b 55 e0	 mov	 edx, DWORD PTR _destination_vertices$1[ebp]
  00297	8b 80 0c 00 00
	00		 mov	 eax, DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+12]
  0029d	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 265  : 				destination_vertices[count].color = transformed_3d_points[count].colour;

  002a1	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002a4	c1 e0 06	 shl	 eax, 6
  002a7	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  002aa	c1 e1 05	 shl	 ecx, 5
  002ad	8b 55 e0	 mov	 edx, DWORD PTR _destination_vertices$1[ebp]
  002b0	8b 80 30 00 00
	00		 mov	 eax, DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+48]
  002b6	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 266  : 				destination_vertices[count].specular = 0;

  002ba	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002bd	c1 e0 05	 shl	 eax, 5
  002c0	8b 4d e0	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  002c3	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 267  : 			}

  002cb	e9 3e ff ff ff	 jmp	 $LN5@draw_3d_st
$LN6@draw_3d_st:

; 268  : 	
; 269  : 			draw_point_list_primitive ( number_of_visible_3d_stars );

  002d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_visible_3d_stars@@3HA
  002d5	50		 push	 eax
  002d6	e8 00 00 00 00	 call	 ?draw_point_list_primitive@@YGXH@Z ; draw_point_list_primitive

; 270  : 
; 271  : 			set_d3d_int_state ( D3DRENDERSTATE_ZFUNC, zbuffer_default_comparison );

  002db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?zbuffer_default_comparison@@3W4_D3DCMPFUNC@@A ; zbuffer_default_comparison
  002e0	50		 push	 eax
  002e1	6a 17		 push	 23			; 00000017H
  002e3	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 272  : 
; 273  : 			set_d3d_alpha_fog_zbuffer ( FALSE, TRUE, TRUE, TRUE );

  002e8	6a 01		 push	 1
  002ea	6a 01		 push	 1
  002ec	6a 01		 push	 1
  002ee	6a 00		 push	 0
  002f0	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer
$LN9@draw_3d_st:

; 274  : 		}
; 275  : 	}
; 276  : }

  002f5	5f		 pop	 edi
  002f6	5e		 pop	 esi
  002f7	5b		 pop	 ebx
  002f8	8b e5		 mov	 esp, ebp
  002fa	5d		 pop	 ebp
  002fb	c3		 ret	 0
?draw_3d_stars@@YGXXZ ENDP				; draw_3d_stars
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dstars.c
;	COMDAT ?initialise_3d_stars@@YGXPBD@Z
_TEXT	SEGMENT
_count$ = -8						; size = 4
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
?initialise_3d_stars@@YGXPBD@Z PROC			; initialise_3d_stars, COMDAT

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 110  : 
; 111  : 	FILE
; 112  : 		*fp;
; 113  : 
; 114  : 	int
; 115  : 		count;
; 116  : 
; 117  : 	ASSERT ( filename );

  00009	83 7d 08 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@initialise
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_stars@@YGXPBD@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LDBBGBFK@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08BABJIOEM@filename@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@initialise:

; 118  : 
; 119  : 	fp = safe_fopen ( filename, "rb" );

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0002c	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00035	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 120  : 
; 121  : 	fread ( &number_of_3d_star_points, sizeof ( int ), 1, fp );

  00038	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0003b	50		 push	 eax
  0003c	6a 01		 push	 1
  0003e	6a 04		 push	 4
  00040	68 00 00 00 00	 push	 OFFSET ?number_of_3d_star_points@@3HA
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : 
; 123  : 	fread ( &number_of_3d_star_surfaces, sizeof ( int ), 1, fp );

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00051	50		 push	 eax
  00052	6a 01		 push	 1
  00054	6a 04		 push	 4
  00056	68 00 00 00 00	 push	 OFFSET ?number_of_3d_star_surfaces@@3HA
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00061	83 c4 10	 add	 esp, 16			; 00000010H

; 124  : 
; 125  : 	//
; 126  : 	// Allocate room for the surface information
; 127  : 	//
; 128  : 
; 129  : 	star_3d_surfaces = ( object_3d_star_surface * ) safe_malloc ( sizeof ( object_3d_star_surface ) * number_of_3d_star_surfaces );

  00064	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR ?number_of_3d_star_surfaces@@3HA, 20
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00071	a3 00 00 00 00	 mov	 DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A, eax

; 130  : 
; 131  : 	ASSERT ( star_3d_surfaces );

  00076	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A, 0
  0007d	75 18		 jne	 SHORT $LN9@initialise
  0007f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_stars@@YGXPBD@Z@4JA
  00084	83 c0 16	 add	 eax, 22			; 00000016H
  00087	50		 push	 eax
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LDBBGBFK@c?3?2users?2nhv90?2projects?2eech?2mo@
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAPJNLEI@star_3d_surfaces@
  00092	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@initialise:

; 132  : 
; 133  : 	//
; 134  : 	// Read in the surface information
; 135  : 	//
; 136  : 
; 137  : 	for ( count = 0; count < number_of_3d_star_surfaces; count++ )

  00097	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0009e	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  000a0	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  000a3	83 c0 01	 add	 eax, 1
  000a6	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  000a9	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  000ac	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_3d_star_surfaces@@3HA
  000b2	0f 8d 81 00 00
	00		 jge	 $LN3@initialise

; 138  : 	{
; 139  : 
; 140  : 		fread ( &star_3d_surfaces[count].red, sizeof ( float ), 1, fp );

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000bb	50		 push	 eax
  000bc	6a 01		 push	 1
  000be	6a 04		 push	 4
  000c0	6b 4d f8 14	 imul	 ecx, DWORD PTR _count$[ebp], 20
  000c4	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  000ca	51		 push	 ecx
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000d1	83 c4 10	 add	 esp, 16			; 00000010H

; 141  : 		fread ( &star_3d_surfaces[count].green, sizeof ( float ), 1, fp );

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000d7	50		 push	 eax
  000d8	6a 01		 push	 1
  000da	6a 04		 push	 4
  000dc	6b 4d f8 14	 imul	 ecx, DWORD PTR _count$[ebp], 20
  000e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  000e6	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  000ea	50		 push	 eax
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000f1	83 c4 10	 add	 esp, 16			; 00000010H

; 142  : 		fread ( &star_3d_surfaces[count].blue, sizeof ( float ), 1, fp );

  000f4	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000f7	50		 push	 eax
  000f8	6a 01		 push	 1
  000fa	6a 04		 push	 4
  000fc	6b 4d f8 14	 imul	 ecx, DWORD PTR _count$[ebp], 20
  00100	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  00106	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  0010a	50		 push	 eax
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00111	83 c4 10	 add	 esp, 16			; 00000010H

; 143  : 		fread ( &star_3d_surfaces[count].translucency, sizeof ( float ), 1, fp );

  00114	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00117	50		 push	 eax
  00118	6a 01		 push	 1
  0011a	6a 04		 push	 4
  0011c	6b 4d f8 14	 imul	 ecx, DWORD PTR _count$[ebp], 20
  00120	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_surfaces@@3PAUOBJECT_3D_STAR_SURFACE@@A
  00126	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  0012a	50		 push	 eax
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00131	83 c4 10	 add	 esp, 16			; 00000010H

; 144  : 	}

  00134	e9 67 ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 145  : 
; 146  : 	//
; 147  : 	// Allocate room for the points
; 148  : 	//
; 149  : 
; 150  : 	star_3d_points = ( object_3d_star_point * ) safe_malloc ( sizeof ( object_3d_star_point ) * number_of_3d_star_points );

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_3d_star_points@@3HA
  0013e	c1 e0 03	 shl	 eax, 3
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00147	a3 00 00 00 00	 mov	 DWORD PTR ?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A, eax

; 151  : 
; 152  : 	ASSERT ( star_3d_points );

  0014c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A, 0
  00153	75 18		 jne	 SHORT $LN10@initialise
  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_stars@@YGXPBD@Z@4JA
  0015a	83 c0 2b	 add	 eax, 43			; 0000002bH
  0015d	50		 push	 eax
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LDBBGBFK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DPCKFPCJ@star_3d_points@
  00168	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@initialise:

; 153  : 
; 154  : 	//
; 155  : 	// Read in the point scaling constants
; 156  : 	//
; 157  : 
; 158  : 	fread ( &star_3d_x_minimum, sizeof ( float ), 1, fp );

  0016d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00170	50		 push	 eax
  00171	6a 01		 push	 1
  00173	6a 04		 push	 4
  00175	68 00 00 00 00	 push	 OFFSET ?star_3d_x_minimum@@3MA
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00180	83 c4 10	 add	 esp, 16			; 00000010H

; 159  : 	fread ( &star_3d_y_minimum, sizeof ( float ), 1, fp );

  00183	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00186	50		 push	 eax
  00187	6a 01		 push	 1
  00189	6a 04		 push	 4
  0018b	68 00 00 00 00	 push	 OFFSET ?star_3d_y_minimum@@3MA
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00196	83 c4 10	 add	 esp, 16			; 00000010H

; 160  : 	fread ( &star_3d_z_minimum, sizeof ( float ), 1, fp );

  00199	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0019c	50		 push	 eax
  0019d	6a 01		 push	 1
  0019f	6a 04		 push	 4
  001a1	68 00 00 00 00	 push	 OFFSET ?star_3d_z_minimum@@3MA
  001a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001ac	83 c4 10	 add	 esp, 16			; 00000010H

; 161  : 
; 162  : 	fread ( &star_3d_x_scale, sizeof ( float ), 1, fp );

  001af	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001b2	50		 push	 eax
  001b3	6a 01		 push	 1
  001b5	6a 04		 push	 4
  001b7	68 00 00 00 00	 push	 OFFSET ?star_3d_x_scale@@3MA
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001c2	83 c4 10	 add	 esp, 16			; 00000010H

; 163  : 	fread ( &star_3d_y_scale, sizeof ( float ), 1, fp );

  001c5	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001c8	50		 push	 eax
  001c9	6a 01		 push	 1
  001cb	6a 04		 push	 4
  001cd	68 00 00 00 00	 push	 OFFSET ?star_3d_y_scale@@3MA
  001d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001d8	83 c4 10	 add	 esp, 16			; 00000010H

; 164  : 	fread ( &star_3d_z_scale, sizeof ( float ), 1, fp );

  001db	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001de	50		 push	 eax
  001df	6a 01		 push	 1
  001e1	6a 04		 push	 4
  001e3	68 00 00 00 00	 push	 OFFSET ?star_3d_z_scale@@3MA
  001e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001ee	83 c4 10	 add	 esp, 16			; 00000010H

; 165  : 
; 166  : 	//
; 167  : 	// Read in the points themselves
; 168  : 	//
; 169  : 
; 170  : 	for ( count = 0; count < number_of_3d_star_points; count++ )

  001f1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  001f8	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  001fa	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  001fd	83 c0 01	 add	 eax, 1
  00200	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN7@initialise:
  00203	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00206	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_3d_star_points@@3HA
  0020c	0f 8d 80 00 00
	00		 jge	 $LN1@initialise

; 171  : 	{
; 172  : 
; 173  : 		fread ( &star_3d_points[count].x, sizeof ( unsigned short int ), 1, fp );

  00212	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00215	50		 push	 eax
  00216	6a 01		 push	 1
  00218	6a 02		 push	 2
  0021a	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  0021d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A
  00223	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00226	50		 push	 eax
  00227	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0022d	83 c4 10	 add	 esp, 16			; 00000010H

; 174  : 		fread ( &star_3d_points[count].y, sizeof ( unsigned short int ), 1, fp );

  00230	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00233	50		 push	 eax
  00234	6a 01		 push	 1
  00236	6a 02		 push	 2
  00238	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  0023b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A
  00241	8d 44 ca 02	 lea	 eax, DWORD PTR [edx+ecx*8+2]
  00245	50		 push	 eax
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0024c	83 c4 10	 add	 esp, 16			; 00000010H

; 175  : 		fread ( &star_3d_points[count].z, sizeof ( unsigned short int ), 1, fp );

  0024f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00252	50		 push	 eax
  00253	6a 01		 push	 1
  00255	6a 02		 push	 2
  00257	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  0025a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A
  00260	8d 44 ca 04	 lea	 eax, DWORD PTR [edx+ecx*8+4]
  00264	50		 push	 eax
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0026b	83 c4 10	 add	 esp, 16			; 00000010H

; 176  : 		fread ( &star_3d_points[count].surface, sizeof ( unsigned short int ), 1, fp );

  0026e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00271	50		 push	 eax
  00272	6a 01		 push	 1
  00274	6a 02		 push	 2
  00276	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00279	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?star_3d_points@@3PAUOBJECT_3D_STAR_POINT@@A
  0027f	8d 44 ca 06	 lea	 eax, DWORD PTR [edx+ecx*8+6]
  00283	50		 push	 eax
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0028a	83 c4 10	 add	 esp, 16			; 00000010H

; 177  : 	}

  0028d	e9 68 ff ff ff	 jmp	 $LN5@initialise
$LN1@initialise:

; 178  : }

  00292	5f		 pop	 edi
  00293	5e		 pop	 esi
  00294	5b		 pop	 ebx
  00295	8b e5		 mov	 esp, ebp
  00297	5d		 pop	 ebp
  00298	c2 04 00	 ret	 4
?initialise_3d_stars@@YGXPBD@Z ENDP			; initialise_3d_stars
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\fpu.h
;	COMDAT ?asm_convert_float_to_int@@YGXMPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_integer$ = 12						; size = 4
?asm_convert_float_to_int@@YGXMPAH@Z PROC		; asm_convert_float_to_int, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 
; 132  : 	__asm
; 133  : 	{
; 134  : 
; 135  : 		fld value

  00009	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 136  : 		mov edx, integer

  0000c	8b 55 0c	 mov	 edx, DWORD PTR _integer$[ebp]

; 137  : 		fistp dword ptr [edx]

  0000f	db 1a		 fistp	 DWORD PTR [edx]

; 138  : 	}
; 139  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?asm_convert_float_to_int@@YGXMPAH@Z ENDP		; asm_convert_float_to_int
_TEXT	ENDS
END
