; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\dither.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?compute_dithered_rgb_image@@YGXHHPAUPSD_RGB@@PAG@Z ; compute_dithered_rgb_image
PUBLIC	?compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z ; compute_dithered_rgba_image
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??compute_dithered_rgb_image@@YGXHHPAUPSD_RGB@@PAG@Z@4JA ; `compute_dithered_rgb_image'::`1'::__LINE__Var
PUBLIC	??_C@_0DH@BFOBKDNB@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_05NGOMGBBD@image@				; `string'
PUBLIC	?__LINE__Var@?0??compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z@4JA ; `compute_dithered_rgba_image'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memset:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?get_general_colour_value@@YG?AUREAL_COLOUR@@G@Z:PROC ; get_general_colour_value
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z@4JA DD 010dH ; `compute_dithered_rgba_image'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05NGOMGBBD@image@
CONST	SEGMENT
??_C@_05NGOMGBBD@image@ DB 'image', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@BFOBKDNB@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DH@BFOBKDNB@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\dither.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??compute_dithered_rgb_image@@YGXHHPAUPSD_RGB@@PAG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??compute_dithered_rgb_image@@YGXHHPAUPSD_RGB@@PAG@Z@4JA DD 06cH ; `compute_dithered_rgb_image'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dither.c
;	COMDAT ?compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z
_TEXT	SEGMENT
tv152 = -128						; size = 4
tv148 = -128						; size = 4
tv144 = -128						; size = 4
tv153 = -124						; size = 4
tv149 = -124						; size = 4
tv145 = -124						; size = 4
$T1 = -120						; size = 4
_packed_colour$2 = -52					; size = 2
_actual_colour$3 = -48					; size = 4
_error_blue$4 = -44					; size = 4
_error_green$5 = -40					; size = 4
_error_red$6 = -36					; size = 4
_b$7 = -32						; size = 4
_g$8 = -28						; size = 4
_r$9 = -24						; size = 4
_tmp_errors_ptr$ = -20					; size = 4
_next_line_errors$ = -16				; size = 4
_this_line_errors$ = -12				; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_image$ = 16						; size = 4
_result_image$ = 20					; size = 4
?compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z PROC ; compute_dithered_rgba_image, COMDAT

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 270  : 
; 271  : 	int
; 272  : 		x,
; 273  : 		y;
; 274  : 
; 275  : 	dither_errors
; 276  : 		*this_line_errors,
; 277  : 		*next_line_errors,
; 278  : 		*tmp_errors_ptr;
; 279  : 
; 280  : 	ASSERT ( image );

  0000c	83 7d 10 00	 cmp	 DWORD PTR _image$[ebp], 0
  00010	75 18		 jne	 SHORT $LN8@compute_di
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z@4JA
  00017	83 c0 0b	 add	 eax, 11			; 0000000bH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@BFOBKDNB@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05NGOMGBBD@image@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@compute_di:

; 281  : 
; 282  : 	this_line_errors = ( dither_errors * ) safe_malloc ( width * sizeof ( dither_errors ) );

  0002a	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0002d	c1 e0 04	 shl	 eax, 4
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00036	89 45 f4	 mov	 DWORD PTR _this_line_errors$[ebp], eax

; 283  : 
; 284  : 	next_line_errors = ( dither_errors * ) safe_malloc ( width * sizeof ( dither_errors ) );

  00039	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0003c	c1 e0 04	 shl	 eax, 4
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00045	89 45 f0	 mov	 DWORD PTR _next_line_errors$[ebp], eax

; 285  : 
; 286  : 	memset ( this_line_errors, 0, width * sizeof ( dither_errors ) );

  00048	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0004b	c1 e0 04	 shl	 eax, 4
  0004e	50		 push	 eax
  0004f	6a 00		 push	 0
  00051	8b 4d f4	 mov	 ecx, DWORD PTR _this_line_errors$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 _memset
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 287  : 
; 288  : 	memset ( next_line_errors, 0, width * sizeof ( dither_errors ) );

  0005d	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00060	c1 e0 04	 shl	 eax, 4
  00063	50		 push	 eax
  00064	6a 00		 push	 0
  00066	8b 4d f0	 mov	 ecx, DWORD PTR _next_line_errors$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 _memset
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 289  : 
; 290  : 	for ( y = 0; y < height; y++ )

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00079	eb 09		 jmp	 SHORT $LN4@compute_di
$LN2@compute_di:
  0007b	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0007e	83 c0 01	 add	 eax, 1
  00081	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN4@compute_di:
  00084	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00087	3b 45 0c	 cmp	 eax, DWORD PTR _height$[ebp]
  0008a	0f 8d dd 03 00
	00		 jge	 $LN3@compute_di

; 291  : 	{
; 292  : 
; 293  : 		tmp_errors_ptr = next_line_errors;

  00090	8b 45 f0	 mov	 eax, DWORD PTR _next_line_errors$[ebp]
  00093	89 45 ec	 mov	 DWORD PTR _tmp_errors_ptr$[ebp], eax

; 294  : 
; 295  : 		next_line_errors = this_line_errors;

  00096	8b 45 f4	 mov	 eax, DWORD PTR _this_line_errors$[ebp]
  00099	89 45 f0	 mov	 DWORD PTR _next_line_errors$[ebp], eax

; 296  : 
; 297  : 		this_line_errors = tmp_errors_ptr;

  0009c	8b 45 ec	 mov	 eax, DWORD PTR _tmp_errors_ptr$[ebp]
  0009f	89 45 f4	 mov	 DWORD PTR _this_line_errors$[ebp], eax

; 298  : 
; 299  : 		memset ( next_line_errors, 0, width * sizeof ( dither_errors ) );

  000a2	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  000a5	c1 e0 04	 shl	 eax, 4
  000a8	50		 push	 eax
  000a9	6a 00		 push	 0
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR _next_line_errors$[ebp]
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 _memset
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 300  : 
; 301  : 		for ( x = 0; x < width; x++ )

  000b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  000be	eb 09		 jmp	 SHORT $LN7@compute_di
$LN5@compute_di:
  000c0	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  000c3	83 c0 01	 add	 eax, 1
  000c6	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@compute_di:
  000c9	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  000cc	3b 45 08	 cmp	 eax, DWORD PTR _width$[ebp]
  000cf	0f 8d 93 03 00
	00		 jge	 $LN6@compute_di

; 302  : 		{
; 303  : 
; 304  : 			int
; 305  : 				r,
; 306  : 				g,
; 307  : 				b,
; 308  : 				error_red,
; 309  : 				error_green,
; 310  : 				error_blue;
; 311  : 
; 312  : 			rgb_colour
; 313  : 				actual_colour;
; 314  : 
; 315  : 			rgb_packed
; 316  : 				packed_colour;
; 317  : 
; 318  : 			//
; 319  : 			// Get the rgb for this pixel
; 320  : 			//
; 321  : 
; 322  : 			r = image->r;

  000d5	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  000d8	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000db	89 4d e8	 mov	 DWORD PTR _r$9[ebp], ecx

; 323  : 			g = image->g;

  000de	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  000e1	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000e5	89 4d e4	 mov	 DWORD PTR _g$8[ebp], ecx

; 324  : 			b = image->b;

  000e8	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  000eb	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  000ef	89 4d e0	 mov	 DWORD PTR _b$7[ebp], ecx

; 325  : 
; 326  : 			image++;

  000f2	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  000f5	83 c0 04	 add	 eax, 4
  000f8	89 45 10	 mov	 DWORD PTR _image$[ebp], eax

; 327  : 
; 328  : 			//
; 329  : 			// Add in the propagated error from the line above
; 330  : 			//
; 331  : 
; 332  : 			r += this_line_errors[x].red;

  000fb	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  000fe	c1 e0 04	 shl	 eax, 4
  00101	8b 4d f4	 mov	 ecx, DWORD PTR _this_line_errors$[ebp]
  00104	8b 55 e8	 mov	 edx, DWORD PTR _r$9[ebp]
  00107	03 14 01	 add	 edx, DWORD PTR [ecx+eax]
  0010a	89 55 e8	 mov	 DWORD PTR _r$9[ebp], edx

; 333  : 			g += this_line_errors[x].green;

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00110	c1 e0 04	 shl	 eax, 4
  00113	8b 4d f4	 mov	 ecx, DWORD PTR _this_line_errors$[ebp]
  00116	8b 55 e4	 mov	 edx, DWORD PTR _g$8[ebp]
  00119	03 54 01 04	 add	 edx, DWORD PTR [ecx+eax+4]
  0011d	89 55 e4	 mov	 DWORD PTR _g$8[ebp], edx

; 334  : 			b += this_line_errors[x].blue;

  00120	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00123	c1 e0 04	 shl	 eax, 4
  00126	8b 4d f4	 mov	 ecx, DWORD PTR _this_line_errors$[ebp]
  00129	8b 55 e0	 mov	 edx, DWORD PTR _b$7[ebp]
  0012c	03 54 01 08	 add	 edx, DWORD PTR [ecx+eax+8]
  00130	89 55 e0	 mov	 DWORD PTR _b$7[ebp], edx

; 335  : 
; 336  : 			//
; 337  : 			// Bound the colours
; 338  : 			//
; 339  : 
; 340  : 			r = bound ( r, 0, 255 );

  00133	83 7d e8 00	 cmp	 DWORD PTR _r$9[ebp], 0
  00137	7d 09		 jge	 SHORT $LN16@compute_di
  00139	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
  00140	eb 1e		 jmp	 SHORT $LN17@compute_di
$LN16@compute_di:
  00142	81 7d e8 ff 00
	00 00		 cmp	 DWORD PTR _r$9[ebp], 255 ; 000000ffH
  00149	7e 09		 jle	 SHORT $LN14@compute_di
  0014b	c7 45 80 ff 00
	00 00		 mov	 DWORD PTR tv144[ebp], 255 ; 000000ffH
  00152	eb 06		 jmp	 SHORT $LN15@compute_di
$LN14@compute_di:
  00154	8b 45 e8	 mov	 eax, DWORD PTR _r$9[ebp]
  00157	89 45 80	 mov	 DWORD PTR tv144[ebp], eax
$LN15@compute_di:
  0015a	8b 4d 80	 mov	 ecx, DWORD PTR tv144[ebp]
  0015d	89 4d 84	 mov	 DWORD PTR tv145[ebp], ecx
$LN17@compute_di:
  00160	8b 55 84	 mov	 edx, DWORD PTR tv145[ebp]
  00163	89 55 e8	 mov	 DWORD PTR _r$9[ebp], edx

; 341  : 			g = bound ( g, 0, 255 );

  00166	83 7d e4 00	 cmp	 DWORD PTR _g$8[ebp], 0
  0016a	7d 09		 jge	 SHORT $LN20@compute_di
  0016c	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
  00173	eb 1e		 jmp	 SHORT $LN21@compute_di
$LN20@compute_di:
  00175	81 7d e4 ff 00
	00 00		 cmp	 DWORD PTR _g$8[ebp], 255 ; 000000ffH
  0017c	7e 09		 jle	 SHORT $LN18@compute_di
  0017e	c7 45 80 ff 00
	00 00		 mov	 DWORD PTR tv148[ebp], 255 ; 000000ffH
  00185	eb 06		 jmp	 SHORT $LN19@compute_di
$LN18@compute_di:
  00187	8b 45 e4	 mov	 eax, DWORD PTR _g$8[ebp]
  0018a	89 45 80	 mov	 DWORD PTR tv148[ebp], eax
$LN19@compute_di:
  0018d	8b 4d 80	 mov	 ecx, DWORD PTR tv148[ebp]
  00190	89 4d 84	 mov	 DWORD PTR tv149[ebp], ecx
$LN21@compute_di:
  00193	8b 55 84	 mov	 edx, DWORD PTR tv149[ebp]
  00196	89 55 e4	 mov	 DWORD PTR _g$8[ebp], edx

; 342  : 			b = bound ( b, 0, 255 );

  00199	83 7d e0 00	 cmp	 DWORD PTR _b$7[ebp], 0
  0019d	7d 09		 jge	 SHORT $LN24@compute_di
  0019f	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
  001a6	eb 1e		 jmp	 SHORT $LN25@compute_di
$LN24@compute_di:
  001a8	81 7d e0 ff 00
	00 00		 cmp	 DWORD PTR _b$7[ebp], 255 ; 000000ffH
  001af	7e 09		 jle	 SHORT $LN22@compute_di
  001b1	c7 45 80 ff 00
	00 00		 mov	 DWORD PTR tv152[ebp], 255 ; 000000ffH
  001b8	eb 06		 jmp	 SHORT $LN23@compute_di
$LN22@compute_di:
  001ba	8b 45 e0	 mov	 eax, DWORD PTR _b$7[ebp]
  001bd	89 45 80	 mov	 DWORD PTR tv152[ebp], eax
$LN23@compute_di:
  001c0	8b 4d 80	 mov	 ecx, DWORD PTR tv152[ebp]
  001c3	89 4d 84	 mov	 DWORD PTR tv153[ebp], ecx
$LN25@compute_di:
  001c6	8b 55 84	 mov	 edx, DWORD PTR tv153[ebp]
  001c9	89 55 e0	 mov	 DWORD PTR _b$7[ebp], edx

; 343  : 
; 344  : 			actual_colour.r = r;

  001cc	8a 45 e8	 mov	 al, BYTE PTR _r$9[ebp]
  001cf	88 45 d2	 mov	 BYTE PTR _actual_colour$3[ebp+2], al

; 345  : 			actual_colour.g = g;

  001d2	8a 45 e4	 mov	 al, BYTE PTR _g$8[ebp]
  001d5	88 45 d1	 mov	 BYTE PTR _actual_colour$3[ebp+1], al

; 346  : 			actual_colour.b = b;

  001d8	8a 45 e0	 mov	 al, BYTE PTR _b$7[ebp]
  001db	88 45 d0	 mov	 BYTE PTR _actual_colour$3[ebp], al

; 347  : 			actual_colour.a = 255;

  001de	c6 45 d3 ff	 mov	 BYTE PTR _actual_colour$3[ebp+3], 255 ; 000000ffH

; 348  : 
; 349  : 			packed_colour = get_general_packed_colour ( actual_colour );

  001e2	0f b6 45 d2	 movzx	 eax, BYTE PTR _actual_colour$3[ebp+2]
  001e6	c1 e0 08	 shl	 eax, 8
  001e9	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  001ee	0f b6 4d d1	 movzx	 ecx, BYTE PTR _actual_colour$3[ebp+1]
  001f2	c1 e1 05	 shl	 ecx, 5
  001f5	81 e1 e0 07 00
	00		 and	 ecx, 2016		; 000007e0H
  001fb	0b c1		 or	 eax, ecx
  001fd	0f b6 55 d0	 movzx	 edx, BYTE PTR _actual_colour$3[ebp]
  00201	c1 ea 03	 shr	 edx, 3
  00204	83 e2 1f	 and	 edx, 31			; 0000001fH
  00207	0b c2		 or	 eax, edx
  00209	66 89 45 cc	 mov	 WORD PTR _packed_colour$2[ebp], ax

; 350  : 
; 351  : 			actual_colour = get_general_colour_value ( packed_colour );

  0020d	0f b7 45 cc	 movzx	 eax, WORD PTR _packed_colour$2[ebp]
  00211	50		 push	 eax
  00212	e8 00 00 00 00	 call	 ?get_general_colour_value@@YG?AUREAL_COLOUR@@G@Z ; get_general_colour_value
  00217	89 45 88	 mov	 DWORD PTR $T1[ebp], eax
  0021a	8b 4d 88	 mov	 ecx, DWORD PTR $T1[ebp]
  0021d	89 4d d0	 mov	 DWORD PTR _actual_colour$3[ebp], ecx

; 352  : 
; 353  : 			*result_image++ = packed_colour;

  00220	8b 45 14	 mov	 eax, DWORD PTR _result_image$[ebp]
  00223	66 8b 4d cc	 mov	 cx, WORD PTR _packed_colour$2[ebp]
  00227	66 89 08	 mov	 WORD PTR [eax], cx
  0022a	8b 55 14	 mov	 edx, DWORD PTR _result_image$[ebp]
  0022d	83 c2 02	 add	 edx, 2
  00230	89 55 14	 mov	 DWORD PTR _result_image$[ebp], edx

; 354  : 
; 355  : 			//
; 356  : 			// Figure the error at this pixel
; 357  : 			//
; 358  : 
; 359  : 			error_red = r - ( int ) actual_colour.r;

  00233	0f b6 45 d2	 movzx	 eax, BYTE PTR _actual_colour$3[ebp+2]
  00237	8b 4d e8	 mov	 ecx, DWORD PTR _r$9[ebp]
  0023a	2b c8		 sub	 ecx, eax
  0023c	89 4d dc	 mov	 DWORD PTR _error_red$6[ebp], ecx

; 360  : 			error_green = g - ( int ) actual_colour.g;

  0023f	0f b6 45 d1	 movzx	 eax, BYTE PTR _actual_colour$3[ebp+1]
  00243	8b 4d e4	 mov	 ecx, DWORD PTR _g$8[ebp]
  00246	2b c8		 sub	 ecx, eax
  00248	89 4d d8	 mov	 DWORD PTR _error_green$5[ebp], ecx

; 361  : 			error_blue = b - ( int ) actual_colour.b;

  0024b	0f b6 45 d0	 movzx	 eax, BYTE PTR _actual_colour$3[ebp]
  0024f	8b 4d e0	 mov	 ecx, DWORD PTR _b$7[ebp]
  00252	2b c8		 sub	 ecx, eax
  00254	89 4d d4	 mov	 DWORD PTR _error_blue$4[ebp], ecx

; 362  : 
; 363  : 			//
; 364  : 			// Propagate the error
; 365  : 			//
; 366  : 
; 367  : 			//
; 368  : 			// Next pixel gets 7/16
; 369  : 			//
; 370  : 
; 371  : 			if ( x != ( width - 1 ) )

  00257	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0025a	83 e8 01	 sub	 eax, 1
  0025d	39 45 fc	 cmp	 DWORD PTR _x$[ebp], eax
  00260	74 56		 je	 SHORT $LN9@compute_di

; 372  : 			{
; 373  : 
; 374  : 				this_line_errors[x+1].red = ( ( error_red * RIGHT_PIXEL_BIAS ) / 16 );

  00262	6b 45 dc 06	 imul	 eax, DWORD PTR _error_red$6[ebp], 6
  00266	99		 cdq
  00267	83 e2 0f	 and	 edx, 15			; 0000000fH
  0026a	03 c2		 add	 eax, edx
  0026c	c1 f8 04	 sar	 eax, 4
  0026f	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00272	83 c1 01	 add	 ecx, 1
  00275	c1 e1 04	 shl	 ecx, 4
  00278	8b 55 f4	 mov	 edx, DWORD PTR _this_line_errors$[ebp]
  0027b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 375  : 				this_line_errors[x+1].green = ( ( error_green * RIGHT_PIXEL_BIAS ) / 16 );

  0027e	6b 45 d8 06	 imul	 eax, DWORD PTR _error_green$5[ebp], 6
  00282	99		 cdq
  00283	83 e2 0f	 and	 edx, 15			; 0000000fH
  00286	03 c2		 add	 eax, edx
  00288	c1 f8 04	 sar	 eax, 4
  0028b	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0028e	83 c1 01	 add	 ecx, 1
  00291	c1 e1 04	 shl	 ecx, 4
  00294	8b 55 f4	 mov	 edx, DWORD PTR _this_line_errors$[ebp]
  00297	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 376  : 				this_line_errors[x+1].blue = ( ( error_blue * RIGHT_PIXEL_BIAS ) / 16 );

  0029b	6b 45 d4 06	 imul	 eax, DWORD PTR _error_blue$4[ebp], 6
  0029f	99		 cdq
  002a0	83 e2 0f	 and	 edx, 15			; 0000000fH
  002a3	03 c2		 add	 eax, edx
  002a5	c1 f8 04	 sar	 eax, 4
  002a8	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002ab	83 c1 01	 add	 ecx, 1
  002ae	c1 e1 04	 shl	 ecx, 4
  002b1	8b 55 f4	 mov	 edx, DWORD PTR _this_line_errors$[ebp]
  002b4	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
$LN9@compute_di:

; 377  : 			}
; 378  : 
; 379  : 			if ( y != ( height - 1 ) )

  002b8	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  002bb	83 e8 01	 sub	 eax, 1
  002be	39 45 f8	 cmp	 DWORD PTR _y$[ebp], eax
  002c1	0f 84 9c 01 00
	00		 je	 $LN10@compute_di

; 380  : 			{
; 381  : 
; 382  : 				if ( x != 0 )

  002c7	83 7d fc 00	 cmp	 DWORD PTR _x$[ebp], 0
  002cb	0f 84 85 00 00
	00		 je	 $LN11@compute_di

; 383  : 				{
; 384  : 
; 385  : 					//
; 386  : 					// Below left pixel gets 3/16 error
; 387  : 					//
; 388  : 
; 389  : 					next_line_errors[x-1].red += ( ( error_red * BOTTOM_LEFT_PIXEL_BIAS ) / 16 );

  002d1	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002d4	83 e9 01	 sub	 ecx, 1
  002d7	c1 e1 04	 shl	 ecx, 4
  002da	6b 45 dc 00	 imul	 eax, DWORD PTR _error_red$6[ebp], 0
  002de	99		 cdq
  002df	83 e2 0f	 and	 edx, 15			; 0000000fH
  002e2	03 c2		 add	 eax, edx
  002e4	c1 f8 04	 sar	 eax, 4
  002e7	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  002ea	03 04 0a	 add	 eax, DWORD PTR [edx+ecx]
  002ed	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002f0	83 e9 01	 sub	 ecx, 1
  002f3	c1 e1 04	 shl	 ecx, 4
  002f6	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  002f9	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 390  : 					next_line_errors[x-1].green += ( ( error_green * BOTTOM_LEFT_PIXEL_BIAS ) / 16 );

  002fc	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002ff	83 e9 01	 sub	 ecx, 1
  00302	c1 e1 04	 shl	 ecx, 4
  00305	6b 45 d8 00	 imul	 eax, DWORD PTR _error_green$5[ebp], 0
  00309	99		 cdq
  0030a	83 e2 0f	 and	 edx, 15			; 0000000fH
  0030d	03 c2		 add	 eax, edx
  0030f	c1 f8 04	 sar	 eax, 4
  00312	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00315	03 44 0a 04	 add	 eax, DWORD PTR [edx+ecx+4]
  00319	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0031c	83 e9 01	 sub	 ecx, 1
  0031f	c1 e1 04	 shl	 ecx, 4
  00322	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00325	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 391  : 					next_line_errors[x-1].blue += ( ( error_blue * BOTTOM_LEFT_PIXEL_BIAS ) / 16 );

  00329	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0032c	83 e9 01	 sub	 ecx, 1
  0032f	c1 e1 04	 shl	 ecx, 4
  00332	6b 45 d4 00	 imul	 eax, DWORD PTR _error_blue$4[ebp], 0
  00336	99		 cdq
  00337	83 e2 0f	 and	 edx, 15			; 0000000fH
  0033a	03 c2		 add	 eax, edx
  0033c	c1 f8 04	 sar	 eax, 4
  0033f	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00342	03 44 0a 08	 add	 eax, DWORD PTR [edx+ecx+8]
  00346	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00349	83 e9 01	 sub	 ecx, 1
  0034c	c1 e1 04	 shl	 ecx, 4
  0034f	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00352	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
$LN11@compute_di:

; 392  : 				}
; 393  : 
; 394  : 				//
; 395  : 				// Below pixel gets 5/16 error
; 396  : 				//
; 397  : 
; 398  : 				next_line_errors[x].red += ( ( error_red * BOTTOM_PIXEL_BIAS ) / 16 );

  00356	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00359	c1 e1 04	 shl	 ecx, 4
  0035c	6b 45 dc 06	 imul	 eax, DWORD PTR _error_red$6[ebp], 6
  00360	99		 cdq
  00361	83 e2 0f	 and	 edx, 15			; 0000000fH
  00364	03 c2		 add	 eax, edx
  00366	c1 f8 04	 sar	 eax, 4
  00369	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  0036c	03 04 0a	 add	 eax, DWORD PTR [edx+ecx]
  0036f	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00372	c1 e1 04	 shl	 ecx, 4
  00375	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00378	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 399  : 				next_line_errors[x].green += ( ( error_green * BOTTOM_PIXEL_BIAS ) / 16 );

  0037b	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0037e	c1 e1 04	 shl	 ecx, 4
  00381	6b 45 d8 06	 imul	 eax, DWORD PTR _error_green$5[ebp], 6
  00385	99		 cdq
  00386	83 e2 0f	 and	 edx, 15			; 0000000fH
  00389	03 c2		 add	 eax, edx
  0038b	c1 f8 04	 sar	 eax, 4
  0038e	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00391	03 44 0a 04	 add	 eax, DWORD PTR [edx+ecx+4]
  00395	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00398	c1 e1 04	 shl	 ecx, 4
  0039b	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  0039e	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 400  : 				next_line_errors[x].blue += ( ( error_blue * BOTTOM_PIXEL_BIAS ) / 16 );

  003a2	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  003a5	c1 e1 04	 shl	 ecx, 4
  003a8	6b 45 d4 06	 imul	 eax, DWORD PTR _error_blue$4[ebp], 6
  003ac	99		 cdq
  003ad	83 e2 0f	 and	 edx, 15			; 0000000fH
  003b0	03 c2		 add	 eax, edx
  003b2	c1 f8 04	 sar	 eax, 4
  003b5	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  003b8	03 44 0a 08	 add	 eax, DWORD PTR [edx+ecx+8]
  003bc	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  003bf	c1 e1 04	 shl	 ecx, 4
  003c2	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  003c5	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 401  : 
; 402  : 				if ( x != ( width - 1 ) )

  003c9	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  003cc	83 e8 01	 sub	 eax, 1
  003cf	39 45 fc	 cmp	 DWORD PTR _x$[ebp], eax
  003d2	0f 84 8b 00 00
	00		 je	 $LN10@compute_di

; 403  : 				{
; 404  : 	
; 405  : 					//
; 406  : 					// Below right pixel gets 1/16 error
; 407  : 					//
; 408  : 	
; 409  : 					next_line_errors[x+1].red += ( ( error_red * BOTTOM_RIGHT_PIXEL_BIAS ) / 16 );

  003d8	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  003db	83 c1 01	 add	 ecx, 1
  003de	c1 e1 04	 shl	 ecx, 4
  003e1	8b 45 dc	 mov	 eax, DWORD PTR _error_red$6[ebp]
  003e4	c1 e0 02	 shl	 eax, 2
  003e7	99		 cdq
  003e8	83 e2 0f	 and	 edx, 15			; 0000000fH
  003eb	03 c2		 add	 eax, edx
  003ed	c1 f8 04	 sar	 eax, 4
  003f0	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  003f3	03 04 0a	 add	 eax, DWORD PTR [edx+ecx]
  003f6	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  003f9	83 c1 01	 add	 ecx, 1
  003fc	c1 e1 04	 shl	 ecx, 4
  003ff	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00402	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 410  : 					next_line_errors[x+1].green += ( ( error_green * BOTTOM_RIGHT_PIXEL_BIAS ) / 16 );

  00405	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00408	83 c1 01	 add	 ecx, 1
  0040b	c1 e1 04	 shl	 ecx, 4
  0040e	8b 45 d8	 mov	 eax, DWORD PTR _error_green$5[ebp]
  00411	c1 e0 02	 shl	 eax, 2
  00414	99		 cdq
  00415	83 e2 0f	 and	 edx, 15			; 0000000fH
  00418	03 c2		 add	 eax, edx
  0041a	c1 f8 04	 sar	 eax, 4
  0041d	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00420	03 44 0a 04	 add	 eax, DWORD PTR [edx+ecx+4]
  00424	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00427	83 c1 01	 add	 ecx, 1
  0042a	c1 e1 04	 shl	 ecx, 4
  0042d	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00430	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 411  : 					next_line_errors[x+1].blue += ( ( error_blue * BOTTOM_RIGHT_PIXEL_BIAS ) / 16 );

  00434	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00437	83 c1 01	 add	 ecx, 1
  0043a	c1 e1 04	 shl	 ecx, 4
  0043d	8b 45 d4	 mov	 eax, DWORD PTR _error_blue$4[ebp]
  00440	c1 e0 02	 shl	 eax, 2
  00443	99		 cdq
  00444	83 e2 0f	 and	 edx, 15			; 0000000fH
  00447	03 c2		 add	 eax, edx
  00449	c1 f8 04	 sar	 eax, 4
  0044c	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  0044f	03 44 0a 08	 add	 eax, DWORD PTR [edx+ecx+8]
  00453	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00456	83 c1 01	 add	 ecx, 1
  00459	c1 e1 04	 shl	 ecx, 4
  0045c	8b 55 f0	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  0045f	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
$LN10@compute_di:

; 412  : 				}
; 413  : 			}
; 414  : 		}

  00463	e9 58 fc ff ff	 jmp	 $LN5@compute_di
$LN6@compute_di:

; 415  : 	}

  00468	e9 0e fc ff ff	 jmp	 $LN2@compute_di
$LN3@compute_di:

; 416  : 
; 417  : 	safe_free ( this_line_errors );

  0046d	8b 45 f4	 mov	 eax, DWORD PTR _this_line_errors$[ebp]
  00470	50		 push	 eax
  00471	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 418  : 
; 419  : 	safe_free ( next_line_errors );

  00476	8b 45 f0	 mov	 eax, DWORD PTR _next_line_errors$[ebp]
  00479	50		 push	 eax
  0047a	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 420  : }

  0047f	5f		 pop	 edi
  00480	5e		 pop	 esi
  00481	5b		 pop	 ebx
  00482	8b e5		 mov	 esp, ebp
  00484	5d		 pop	 ebp
  00485	c2 10 00	 ret	 16			; 00000010H
?compute_dithered_rgba_image@@YGXHHPAUPSD_RGBA@@PAG@Z ENDP ; compute_dithered_rgba_image
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dither.c
;	COMDAT ?compute_dithered_rgb_image@@YGXHHPAUPSD_RGB@@PAG@Z
_TEXT	SEGMENT
tv155 = -136						; size = 4
tv151 = -136						; size = 4
tv147 = -136						; size = 4
tv156 = -132						; size = 4
tv152 = -132						; size = 4
tv148 = -132						; size = 4
$T1 = -128						; size = 4
$T2 = -124						; size = 4
_packed_colour$3 = -56					; size = 2
_actual_colour$4 = -52					; size = 4
_error_blue$5 = -48					; size = 4
_error_green$6 = -44					; size = 4
_error_red$7 = -40					; size = 4
_b$8 = -36						; size = 4
_g$9 = -32						; size = 4
_r$10 = -28						; size = 4
_tmp_errors_ptr$ = -24					; size = 4
_next_line_errors$ = -20				; size = 4
_this_line_errors$ = -16				; size = 4
_memset_width$ = -12					; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_image$ = 16						; size = 4
_result_image$ = 20					; size = 4
?compute_dithered_rgb_image@@YGXHHPAUPSD_RGB@@PAG@Z PROC ; compute_dithered_rgb_image, COMDAT

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 109  : 
; 110  : 	int
; 111  : 		x,
; 112  : 		y,
; 113  : 		memset_width;
; 114  : 
; 115  : 	dither_errors
; 116  : 		*this_line_errors,
; 117  : 		*next_line_errors,
; 118  : 		*tmp_errors_ptr;
; 119  : 
; 120  : 	ASSERT ( image );

  0000c	83 7d 10 00	 cmp	 DWORD PTR _image$[ebp], 0
  00010	75 18		 jne	 SHORT $LN8@compute_di
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??compute_dithered_rgb_image@@YGXHHPAUPSD_RGB@@PAG@Z@4JA
  00017	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@BFOBKDNB@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05NGOMGBBD@image@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@compute_di:

; 121  : 
; 122  : 	this_line_errors = ( dither_errors * ) safe_malloc ( width * sizeof ( dither_errors ) );

  0002a	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0002d	c1 e0 04	 shl	 eax, 4
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00036	89 45 f0	 mov	 DWORD PTR _this_line_errors$[ebp], eax

; 123  : 
; 124  : 	next_line_errors = ( dither_errors * ) safe_malloc ( width * sizeof ( dither_errors ) );

  00039	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0003c	c1 e0 04	 shl	 eax, 4
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00045	89 45 ec	 mov	 DWORD PTR _next_line_errors$[ebp], eax

; 125  : 
; 126  : 	memset ( this_line_errors, 0, width * sizeof ( dither_errors ) );

  00048	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0004b	c1 e0 04	 shl	 eax, 4
  0004e	50		 push	 eax
  0004f	6a 00		 push	 0
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this_line_errors$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 _memset
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 127  : 
; 128  : 	memset ( next_line_errors, 0, width * sizeof ( dither_errors ) );

  0005d	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00060	c1 e0 04	 shl	 eax, 4
  00063	50		 push	 eax
  00064	6a 00		 push	 0
  00066	8b 4d ec	 mov	 ecx, DWORD PTR _next_line_errors$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 _memset
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 129  : 
; 130  : 	memset_width = min ( 3, width );

  00072	c7 45 84 03 00
	00 00		 mov	 DWORD PTR $T2[ebp], 3
  00079	8d 45 08	 lea	 eax, DWORD PTR _width$[ebp]
  0007c	50		 push	 eax
  0007d	8d 4d 84	 lea	 ecx, DWORD PTR $T2[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00086	8b 10		 mov	 edx, DWORD PTR [eax]
  00088	89 55 f4	 mov	 DWORD PTR _memset_width$[ebp], edx

; 131  : 
; 132  : 	for ( y = 0; y < height; y++ )

  0008b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00092	eb 09		 jmp	 SHORT $LN4@compute_di
$LN2@compute_di:
  00094	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00097	83 c0 01	 add	 eax, 1
  0009a	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN4@compute_di:
  0009d	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  000a0	3b 45 0c	 cmp	 eax, DWORD PTR _height$[ebp]
  000a3	0f 8d 13 04 00
	00		 jge	 $LN3@compute_di

; 133  : 	{
; 134  : 
; 135  : 		tmp_errors_ptr = next_line_errors;

  000a9	8b 45 ec	 mov	 eax, DWORD PTR _next_line_errors$[ebp]
  000ac	89 45 e8	 mov	 DWORD PTR _tmp_errors_ptr$[ebp], eax

; 136  : 
; 137  : 		next_line_errors = this_line_errors;

  000af	8b 45 f0	 mov	 eax, DWORD PTR _this_line_errors$[ebp]
  000b2	89 45 ec	 mov	 DWORD PTR _next_line_errors$[ebp], eax

; 138  : 
; 139  : 		this_line_errors = tmp_errors_ptr;

  000b5	8b 45 e8	 mov	 eax, DWORD PTR _tmp_errors_ptr$[ebp]
  000b8	89 45 f0	 mov	 DWORD PTR _this_line_errors$[ebp], eax

; 140  : 
; 141  : 		memset ( next_line_errors, 0, memset_width * sizeof ( dither_errors ) );

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _memset_width$[ebp]
  000be	c1 e0 04	 shl	 eax, 4
  000c1	50		 push	 eax
  000c2	6a 00		 push	 0
  000c4	8b 4d ec	 mov	 ecx, DWORD PTR _next_line_errors$[ebp]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _memset
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 142  : 
; 143  : 		for ( x = 0; x < width; x++ )

  000d0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  000d7	eb 09		 jmp	 SHORT $LN7@compute_di
$LN5@compute_di:
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  000dc	83 c0 01	 add	 eax, 1
  000df	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@compute_di:
  000e2	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  000e5	3b 45 08	 cmp	 eax, DWORD PTR _width$[ebp]
  000e8	0f 8d c9 03 00
	00		 jge	 $LN6@compute_di

; 144  : 		{
; 145  : 
; 146  : 			int
; 147  : 				r,
; 148  : 				g,
; 149  : 				b,
; 150  : 				error_red,
; 151  : 				error_green,
; 152  : 				error_blue;
; 153  : 
; 154  : 			rgb_colour
; 155  : 				actual_colour;
; 156  : 
; 157  : 			rgb_packed
; 158  : 				packed_colour;
; 159  : 
; 160  : 			//
; 161  : 			// Get the rgb for this pixel
; 162  : 			//
; 163  : 
; 164  : 			r = image->r;

  000ee	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  000f1	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000f4	89 4d e4	 mov	 DWORD PTR _r$10[ebp], ecx

; 165  : 			g = image->g;

  000f7	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  000fa	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000fe	89 4d e0	 mov	 DWORD PTR _g$9[ebp], ecx

; 166  : 			b = image->b;

  00101	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  00104	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00108	89 4d dc	 mov	 DWORD PTR _b$8[ebp], ecx

; 167  : 
; 168  : 			image++;

  0010b	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  0010e	83 c0 03	 add	 eax, 3
  00111	89 45 10	 mov	 DWORD PTR _image$[ebp], eax

; 169  : 
; 170  : 			//
; 171  : 			// Add in the propagated error from the line above
; 172  : 			//
; 173  : 
; 174  : 			r += this_line_errors[x].red;

  00114	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00117	c1 e0 04	 shl	 eax, 4
  0011a	8b 4d f0	 mov	 ecx, DWORD PTR _this_line_errors$[ebp]
  0011d	8b 55 e4	 mov	 edx, DWORD PTR _r$10[ebp]
  00120	03 14 01	 add	 edx, DWORD PTR [ecx+eax]
  00123	89 55 e4	 mov	 DWORD PTR _r$10[ebp], edx

; 175  : 			g += this_line_errors[x].green;

  00126	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00129	c1 e0 04	 shl	 eax, 4
  0012c	8b 4d f0	 mov	 ecx, DWORD PTR _this_line_errors$[ebp]
  0012f	8b 55 e0	 mov	 edx, DWORD PTR _g$9[ebp]
  00132	03 54 01 04	 add	 edx, DWORD PTR [ecx+eax+4]
  00136	89 55 e0	 mov	 DWORD PTR _g$9[ebp], edx

; 176  : 			b += this_line_errors[x].blue;

  00139	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0013c	c1 e0 04	 shl	 eax, 4
  0013f	8b 4d f0	 mov	 ecx, DWORD PTR _this_line_errors$[ebp]
  00142	8b 55 dc	 mov	 edx, DWORD PTR _b$8[ebp]
  00145	03 54 01 08	 add	 edx, DWORD PTR [ecx+eax+8]
  00149	89 55 dc	 mov	 DWORD PTR _b$8[ebp], edx

; 177  : 
; 178  : 			//
; 179  : 			// Bound the colours
; 180  : 			//
; 181  : 
; 182  : 			r = bound ( r, 0, 255 );

  0014c	83 7d e4 00	 cmp	 DWORD PTR _r$10[ebp], 0
  00150	7d 0c		 jge	 SHORT $LN16@compute_di
  00152	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
  0015c	eb 2a		 jmp	 SHORT $LN17@compute_di
$LN16@compute_di:
  0015e	81 7d e4 ff 00
	00 00		 cmp	 DWORD PTR _r$10[ebp], 255 ; 000000ffH
  00165	7e 0c		 jle	 SHORT $LN14@compute_di
  00167	c7 85 78 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv147[ebp], 255 ; 000000ffH
  00171	eb 09		 jmp	 SHORT $LN15@compute_di
$LN14@compute_di:
  00173	8b 45 e4	 mov	 eax, DWORD PTR _r$10[ebp]
  00176	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv147[ebp], eax
$LN15@compute_di:
  0017c	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv147[ebp]
  00182	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv148[ebp], ecx
$LN17@compute_di:
  00188	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv148[ebp]
  0018e	89 55 e4	 mov	 DWORD PTR _r$10[ebp], edx

; 183  : 			g = bound ( g, 0, 255 );

  00191	83 7d e0 00	 cmp	 DWORD PTR _g$9[ebp], 0
  00195	7d 0c		 jge	 SHORT $LN20@compute_di
  00197	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], 0
  001a1	eb 2a		 jmp	 SHORT $LN21@compute_di
$LN20@compute_di:
  001a3	81 7d e0 ff 00
	00 00		 cmp	 DWORD PTR _g$9[ebp], 255 ; 000000ffH
  001aa	7e 0c		 jle	 SHORT $LN18@compute_di
  001ac	c7 85 78 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv151[ebp], 255 ; 000000ffH
  001b6	eb 09		 jmp	 SHORT $LN19@compute_di
$LN18@compute_di:
  001b8	8b 45 e0	 mov	 eax, DWORD PTR _g$9[ebp]
  001bb	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv151[ebp], eax
$LN19@compute_di:
  001c1	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv151[ebp]
  001c7	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv152[ebp], ecx
$LN21@compute_di:
  001cd	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv152[ebp]
  001d3	89 55 e0	 mov	 DWORD PTR _g$9[ebp], edx

; 184  : 			b = bound ( b, 0, 255 );

  001d6	83 7d dc 00	 cmp	 DWORD PTR _b$8[ebp], 0
  001da	7d 0c		 jge	 SHORT $LN24@compute_di
  001dc	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
  001e6	eb 2a		 jmp	 SHORT $LN25@compute_di
$LN24@compute_di:
  001e8	81 7d dc ff 00
	00 00		 cmp	 DWORD PTR _b$8[ebp], 255 ; 000000ffH
  001ef	7e 0c		 jle	 SHORT $LN22@compute_di
  001f1	c7 85 78 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv155[ebp], 255 ; 000000ffH
  001fb	eb 09		 jmp	 SHORT $LN23@compute_di
$LN22@compute_di:
  001fd	8b 45 dc	 mov	 eax, DWORD PTR _b$8[ebp]
  00200	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
$LN23@compute_di:
  00206	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv155[ebp]
  0020c	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv156[ebp], ecx
$LN25@compute_di:
  00212	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv156[ebp]
  00218	89 55 dc	 mov	 DWORD PTR _b$8[ebp], edx

; 185  : 
; 186  : 			actual_colour.r = r;

  0021b	8a 45 e4	 mov	 al, BYTE PTR _r$10[ebp]
  0021e	88 45 ce	 mov	 BYTE PTR _actual_colour$4[ebp+2], al

; 187  : 			actual_colour.g = g;

  00221	8a 45 e0	 mov	 al, BYTE PTR _g$9[ebp]
  00224	88 45 cd	 mov	 BYTE PTR _actual_colour$4[ebp+1], al

; 188  : 			actual_colour.b = b;

  00227	8a 45 dc	 mov	 al, BYTE PTR _b$8[ebp]
  0022a	88 45 cc	 mov	 BYTE PTR _actual_colour$4[ebp], al

; 189  : 			actual_colour.a = 255;

  0022d	c6 45 cf ff	 mov	 BYTE PTR _actual_colour$4[ebp+3], 255 ; 000000ffH

; 190  : 
; 191  : 			packed_colour = get_general_packed_colour ( actual_colour );

  00231	0f b6 45 ce	 movzx	 eax, BYTE PTR _actual_colour$4[ebp+2]
  00235	c1 e0 08	 shl	 eax, 8
  00238	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  0023d	0f b6 4d cd	 movzx	 ecx, BYTE PTR _actual_colour$4[ebp+1]
  00241	c1 e1 05	 shl	 ecx, 5
  00244	81 e1 e0 07 00
	00		 and	 ecx, 2016		; 000007e0H
  0024a	0b c1		 or	 eax, ecx
  0024c	0f b6 55 cc	 movzx	 edx, BYTE PTR _actual_colour$4[ebp]
  00250	c1 ea 03	 shr	 edx, 3
  00253	83 e2 1f	 and	 edx, 31			; 0000001fH
  00256	0b c2		 or	 eax, edx
  00258	66 89 45 c8	 mov	 WORD PTR _packed_colour$3[ebp], ax

; 192  : 
; 193  : 			actual_colour = get_general_colour_value ( packed_colour );

  0025c	0f b7 45 c8	 movzx	 eax, WORD PTR _packed_colour$3[ebp]
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 ?get_general_colour_value@@YG?AUREAL_COLOUR@@G@Z ; get_general_colour_value
  00266	89 45 80	 mov	 DWORD PTR $T1[ebp], eax
  00269	8b 4d 80	 mov	 ecx, DWORD PTR $T1[ebp]
  0026c	89 4d cc	 mov	 DWORD PTR _actual_colour$4[ebp], ecx

; 194  : 
; 195  : 			*result_image++ = packed_colour;

  0026f	8b 45 14	 mov	 eax, DWORD PTR _result_image$[ebp]
  00272	66 8b 4d c8	 mov	 cx, WORD PTR _packed_colour$3[ebp]
  00276	66 89 08	 mov	 WORD PTR [eax], cx
  00279	8b 55 14	 mov	 edx, DWORD PTR _result_image$[ebp]
  0027c	83 c2 02	 add	 edx, 2
  0027f	89 55 14	 mov	 DWORD PTR _result_image$[ebp], edx

; 196  : 
; 197  : 			//
; 198  : 			// Figure the error at this pixel
; 199  : 			//
; 200  : 
; 201  : 			error_red = r - ( int ) actual_colour.r;

  00282	0f b6 45 ce	 movzx	 eax, BYTE PTR _actual_colour$4[ebp+2]
  00286	8b 4d e4	 mov	 ecx, DWORD PTR _r$10[ebp]
  00289	2b c8		 sub	 ecx, eax
  0028b	89 4d d8	 mov	 DWORD PTR _error_red$7[ebp], ecx

; 202  : 			error_green = g - ( int ) actual_colour.g;

  0028e	0f b6 45 cd	 movzx	 eax, BYTE PTR _actual_colour$4[ebp+1]
  00292	8b 4d e0	 mov	 ecx, DWORD PTR _g$9[ebp]
  00295	2b c8		 sub	 ecx, eax
  00297	89 4d d4	 mov	 DWORD PTR _error_green$6[ebp], ecx

; 203  : 			error_blue = b - ( int ) actual_colour.b;

  0029a	0f b6 45 cc	 movzx	 eax, BYTE PTR _actual_colour$4[ebp]
  0029e	8b 4d dc	 mov	 ecx, DWORD PTR _b$8[ebp]
  002a1	2b c8		 sub	 ecx, eax
  002a3	89 4d d0	 mov	 DWORD PTR _error_blue$5[ebp], ecx

; 204  : 
; 205  : 			//
; 206  : 			// Propagate the error
; 207  : 			//
; 208  : 
; 209  : 			//
; 210  : 			// Next pixel gets 7/16
; 211  : 			//
; 212  : 
; 213  : 			if ( x != ( width - 1 ) )

  002a6	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  002a9	83 e8 01	 sub	 eax, 1
  002ac	39 45 fc	 cmp	 DWORD PTR _x$[ebp], eax
  002af	0f 84 85 00 00
	00		 je	 $LN9@compute_di

; 214  : 			{
; 215  : 
; 216  : 				this_line_errors[x+1].red += ( ( error_red * RIGHT_PIXEL_BIAS ) / 16 );

  002b5	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002b8	83 c1 01	 add	 ecx, 1
  002bb	c1 e1 04	 shl	 ecx, 4
  002be	6b 45 d8 06	 imul	 eax, DWORD PTR _error_red$7[ebp], 6
  002c2	99		 cdq
  002c3	83 e2 0f	 and	 edx, 15			; 0000000fH
  002c6	03 c2		 add	 eax, edx
  002c8	c1 f8 04	 sar	 eax, 4
  002cb	8b 55 f0	 mov	 edx, DWORD PTR _this_line_errors$[ebp]
  002ce	03 04 0a	 add	 eax, DWORD PTR [edx+ecx]
  002d1	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002d4	83 c1 01	 add	 ecx, 1
  002d7	c1 e1 04	 shl	 ecx, 4
  002da	8b 55 f0	 mov	 edx, DWORD PTR _this_line_errors$[ebp]
  002dd	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 217  : 				this_line_errors[x+1].green += ( ( error_green * RIGHT_PIXEL_BIAS ) / 16 );

  002e0	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002e3	83 c1 01	 add	 ecx, 1
  002e6	c1 e1 04	 shl	 ecx, 4
  002e9	6b 45 d4 06	 imul	 eax, DWORD PTR _error_green$6[ebp], 6
  002ed	99		 cdq
  002ee	83 e2 0f	 and	 edx, 15			; 0000000fH
  002f1	03 c2		 add	 eax, edx
  002f3	c1 f8 04	 sar	 eax, 4
  002f6	8b 55 f0	 mov	 edx, DWORD PTR _this_line_errors$[ebp]
  002f9	03 44 0a 04	 add	 eax, DWORD PTR [edx+ecx+4]
  002fd	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00300	83 c1 01	 add	 ecx, 1
  00303	c1 e1 04	 shl	 ecx, 4
  00306	8b 55 f0	 mov	 edx, DWORD PTR _this_line_errors$[ebp]
  00309	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 218  : 				this_line_errors[x+1].blue += ( ( error_blue * RIGHT_PIXEL_BIAS ) / 16 );

  0030d	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00310	83 c1 01	 add	 ecx, 1
  00313	c1 e1 04	 shl	 ecx, 4
  00316	6b 45 d0 06	 imul	 eax, DWORD PTR _error_blue$5[ebp], 6
  0031a	99		 cdq
  0031b	83 e2 0f	 and	 edx, 15			; 0000000fH
  0031e	03 c2		 add	 eax, edx
  00320	c1 f8 04	 sar	 eax, 4
  00323	8b 55 f0	 mov	 edx, DWORD PTR _this_line_errors$[ebp]
  00326	03 44 0a 08	 add	 eax, DWORD PTR [edx+ecx+8]
  0032a	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0032d	83 c1 01	 add	 ecx, 1
  00330	c1 e1 04	 shl	 ecx, 4
  00333	8b 55 f0	 mov	 edx, DWORD PTR _this_line_errors$[ebp]
  00336	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
$LN9@compute_di:

; 219  : 			}
; 220  : 
; 221  : 			if ( y != ( height - 1 ) )

  0033a	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0033d	83 e8 01	 sub	 eax, 1
  00340	39 45 f8	 cmp	 DWORD PTR _y$[ebp], eax
  00343	0f 84 69 01 00
	00		 je	 $LN10@compute_di

; 222  : 			{
; 223  : 
; 224  : 				if ( x != 0 )

  00349	83 7d fc 00	 cmp	 DWORD PTR _x$[ebp], 0
  0034d	0f 84 85 00 00
	00		 je	 $LN11@compute_di

; 225  : 				{
; 226  : 
; 227  : 					//
; 228  : 					// Below left pixel gets 3/16 error
; 229  : 					//
; 230  : 
; 231  : 					next_line_errors[x-1].red += ( ( error_red * BOTTOM_LEFT_PIXEL_BIAS ) / 16 );

  00353	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00356	83 e9 01	 sub	 ecx, 1
  00359	c1 e1 04	 shl	 ecx, 4
  0035c	6b 45 d8 00	 imul	 eax, DWORD PTR _error_red$7[ebp], 0
  00360	99		 cdq
  00361	83 e2 0f	 and	 edx, 15			; 0000000fH
  00364	03 c2		 add	 eax, edx
  00366	c1 f8 04	 sar	 eax, 4
  00369	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  0036c	03 04 0a	 add	 eax, DWORD PTR [edx+ecx]
  0036f	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00372	83 e9 01	 sub	 ecx, 1
  00375	c1 e1 04	 shl	 ecx, 4
  00378	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  0037b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 232  : 					next_line_errors[x-1].green += ( ( error_green * BOTTOM_LEFT_PIXEL_BIAS ) / 16 );

  0037e	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00381	83 e9 01	 sub	 ecx, 1
  00384	c1 e1 04	 shl	 ecx, 4
  00387	6b 45 d4 00	 imul	 eax, DWORD PTR _error_green$6[ebp], 0
  0038b	99		 cdq
  0038c	83 e2 0f	 and	 edx, 15			; 0000000fH
  0038f	03 c2		 add	 eax, edx
  00391	c1 f8 04	 sar	 eax, 4
  00394	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00397	03 44 0a 04	 add	 eax, DWORD PTR [edx+ecx+4]
  0039b	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0039e	83 e9 01	 sub	 ecx, 1
  003a1	c1 e1 04	 shl	 ecx, 4
  003a4	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  003a7	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 233  : 					next_line_errors[x-1].blue += ( ( error_blue * BOTTOM_LEFT_PIXEL_BIAS ) / 16 );

  003ab	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  003ae	83 e9 01	 sub	 ecx, 1
  003b1	c1 e1 04	 shl	 ecx, 4
  003b4	6b 45 d0 00	 imul	 eax, DWORD PTR _error_blue$5[ebp], 0
  003b8	99		 cdq
  003b9	83 e2 0f	 and	 edx, 15			; 0000000fH
  003bc	03 c2		 add	 eax, edx
  003be	c1 f8 04	 sar	 eax, 4
  003c1	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  003c4	03 44 0a 08	 add	 eax, DWORD PTR [edx+ecx+8]
  003c8	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  003cb	83 e9 01	 sub	 ecx, 1
  003ce	c1 e1 04	 shl	 ecx, 4
  003d1	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  003d4	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
$LN11@compute_di:

; 234  : 				}
; 235  : 
; 236  : 				//
; 237  : 				// Below pixel gets 5/16 error
; 238  : 				//
; 239  : 
; 240  : 				next_line_errors[x].red += ( ( error_red * BOTTOM_PIXEL_BIAS ) / 16 );

  003d8	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  003db	c1 e1 04	 shl	 ecx, 4
  003de	6b 45 d8 06	 imul	 eax, DWORD PTR _error_red$7[ebp], 6
  003e2	99		 cdq
  003e3	83 e2 0f	 and	 edx, 15			; 0000000fH
  003e6	03 c2		 add	 eax, edx
  003e8	c1 f8 04	 sar	 eax, 4
  003eb	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  003ee	03 04 0a	 add	 eax, DWORD PTR [edx+ecx]
  003f1	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  003f4	c1 e1 04	 shl	 ecx, 4
  003f7	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  003fa	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 241  : 				next_line_errors[x].green += ( ( error_green * BOTTOM_PIXEL_BIAS ) / 16 );

  003fd	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00400	c1 e1 04	 shl	 ecx, 4
  00403	6b 45 d4 06	 imul	 eax, DWORD PTR _error_green$6[ebp], 6
  00407	99		 cdq
  00408	83 e2 0f	 and	 edx, 15			; 0000000fH
  0040b	03 c2		 add	 eax, edx
  0040d	c1 f8 04	 sar	 eax, 4
  00410	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00413	03 44 0a 04	 add	 eax, DWORD PTR [edx+ecx+4]
  00417	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0041a	c1 e1 04	 shl	 ecx, 4
  0041d	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00420	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 242  : 				next_line_errors[x].blue += ( ( error_blue * BOTTOM_PIXEL_BIAS ) / 16 );

  00424	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00427	c1 e1 04	 shl	 ecx, 4
  0042a	6b 45 d0 06	 imul	 eax, DWORD PTR _error_blue$5[ebp], 6
  0042e	99		 cdq
  0042f	83 e2 0f	 and	 edx, 15			; 0000000fH
  00432	03 c2		 add	 eax, edx
  00434	c1 f8 04	 sar	 eax, 4
  00437	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  0043a	03 44 0a 08	 add	 eax, DWORD PTR [edx+ecx+8]
  0043e	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00441	c1 e1 04	 shl	 ecx, 4
  00444	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00447	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 243  : 
; 244  : 				if ( x != ( width - 1 ) )

  0044b	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0044e	83 e8 01	 sub	 eax, 1
  00451	39 45 fc	 cmp	 DWORD PTR _x$[ebp], eax
  00454	74 5c		 je	 SHORT $LN10@compute_di

; 245  : 				{
; 246  : 	
; 247  : 					//
; 248  : 					// Below right pixel gets 1/16 error
; 249  : 					//
; 250  : 	
; 251  : 					next_line_errors[x+1].red = ( ( error_red * BOTTOM_RIGHT_PIXEL_BIAS ) / 16 );

  00456	8b 45 d8	 mov	 eax, DWORD PTR _error_red$7[ebp]
  00459	c1 e0 02	 shl	 eax, 2
  0045c	99		 cdq
  0045d	83 e2 0f	 and	 edx, 15			; 0000000fH
  00460	03 c2		 add	 eax, edx
  00462	c1 f8 04	 sar	 eax, 4
  00465	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00468	83 c1 01	 add	 ecx, 1
  0046b	c1 e1 04	 shl	 ecx, 4
  0046e	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  00471	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 252  : 					next_line_errors[x+1].green = ( ( error_green * BOTTOM_RIGHT_PIXEL_BIAS ) / 16 );

  00474	8b 45 d4	 mov	 eax, DWORD PTR _error_green$6[ebp]
  00477	c1 e0 02	 shl	 eax, 2
  0047a	99		 cdq
  0047b	83 e2 0f	 and	 edx, 15			; 0000000fH
  0047e	03 c2		 add	 eax, edx
  00480	c1 f8 04	 sar	 eax, 4
  00483	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00486	83 c1 01	 add	 ecx, 1
  00489	c1 e1 04	 shl	 ecx, 4
  0048c	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  0048f	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 253  : 					next_line_errors[x+1].blue = ( ( error_blue * BOTTOM_RIGHT_PIXEL_BIAS ) / 16 );

  00493	8b 45 d0	 mov	 eax, DWORD PTR _error_blue$5[ebp]
  00496	c1 e0 02	 shl	 eax, 2
  00499	99		 cdq
  0049a	83 e2 0f	 and	 edx, 15			; 0000000fH
  0049d	03 c2		 add	 eax, edx
  0049f	c1 f8 04	 sar	 eax, 4
  004a2	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  004a5	83 c1 01	 add	 ecx, 1
  004a8	c1 e1 04	 shl	 ecx, 4
  004ab	8b 55 ec	 mov	 edx, DWORD PTR _next_line_errors$[ebp]
  004ae	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
$LN10@compute_di:

; 254  : 				}
; 255  : 			}
; 256  : 		}

  004b2	e9 22 fc ff ff	 jmp	 $LN5@compute_di
$LN6@compute_di:

; 257  : 	}

  004b7	e9 d8 fb ff ff	 jmp	 $LN2@compute_di
$LN3@compute_di:

; 258  : 
; 259  : 	safe_free ( this_line_errors );

  004bc	8b 45 f0	 mov	 eax, DWORD PTR _this_line_errors$[ebp]
  004bf	50		 push	 eax
  004c0	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 260  : 
; 261  : 	safe_free ( next_line_errors );

  004c5	8b 45 ec	 mov	 eax, DWORD PTR _next_line_errors$[ebp]
  004c8	50		 push	 eax
  004c9	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 262  : }

  004ce	5f		 pop	 edi
  004cf	5e		 pop	 esi
  004d0	5b		 pop	 ebx
  004d1	8b e5		 mov	 esp, ebp
  004d3	5d		 pop	 ebp
  004d4	c2 10 00	 ret	 16			; 00000010H
?compute_dithered_rgb_image@@YGXHHPAUPSD_RGB@@PAG@Z ENDP ; compute_dithered_rgb_image
_TEXT	ENDS
END
