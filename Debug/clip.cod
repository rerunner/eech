; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\clip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?clip_3d_coord@@3HA				; clip_3d_coord
PUBLIC	?clip_3d_crds@@3PAUVERTEX@@A			; clip_3d_crds
PUBLIC	?clip_hither@@3MA				; clip_hither
PUBLIC	?clip_hither_reciprocal@@3MA			; clip_hither_reciprocal
PUBLIC	?clip_yonder@@3MA				; clip_yonder
PUBLIC	?clip_yonder_reciprocal@@3MA			; clip_yonder_reciprocal
PUBLIC	?number_of_xmin_coordinates_inserted@@3HA	; number_of_xmin_coordinates_inserted
PUBLIC	?number_of_xmax_coordinates_inserted@@3HA	; number_of_xmax_coordinates_inserted
PUBLIC	?number_of_ymin_coordinates_inserted@@3HA	; number_of_ymin_coordinates_inserted
PUBLIC	?number_of_ymax_coordinates_inserted@@3HA	; number_of_ymax_coordinates_inserted
PUBLIC	?number_of_polygons_screen_clipped@@3HA		; number_of_polygons_screen_clipped
_BSS	SEGMENT
?clip_3d_coord@@3HA DD 01H DUP (?)			; clip_3d_coord
?clip_3d_crds@@3PAUVERTEX@@A DB 01000H DUP (?)		; clip_3d_crds
?clip_hither@@3MA DD 01H DUP (?)			; clip_hither
?clip_hither_reciprocal@@3MA DD 01H DUP (?)		; clip_hither_reciprocal
?clip_yonder@@3MA DD 01H DUP (?)			; clip_yonder
?clip_yonder_reciprocal@@3MA DD 01H DUP (?)		; clip_yonder_reciprocal
?number_of_xmin_coordinates_inserted@@3HA DD 01H DUP (?) ; number_of_xmin_coordinates_inserted
?number_of_xmax_coordinates_inserted@@3HA DD 01H DUP (?) ; number_of_xmax_coordinates_inserted
?number_of_ymin_coordinates_inserted@@3HA DD 01H DUP (?) ; number_of_ymin_coordinates_inserted
?number_of_ymax_coordinates_inserted@@3HA DD 01H DUP (?) ; number_of_ymax_coordinates_inserted
?number_of_polygons_screen_clipped@@3HA DD 01H DUP (?)	; number_of_polygons_screen_clipped
_BSS	ENDS
PUBLIC	?initialise_3d_clip_system@@YGXXZ		; initialise_3d_clip_system
PUBLIC	?reset_clip_statistics@@YGXXZ			; reset_clip_statistics
PUBLIC	?report_clip_statistics@@YGXXZ			; report_clip_statistics
PUBLIC	?set_3d_clip_extents@@YGXMMMMMMMM@Z		; set_3d_clip_extents
PUBLIC	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z		; clip_3d_polygon
PUBLIC	?clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_dual_texture_polygon
PUBLIC	?generate_3d_outcode@@YGHMM@Z			; generate_3d_outcode
PUBLIC	?generate_3d_j_outcode@@YGHM@Z			; generate_3d_j_outcode
PUBLIC	?insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z	; insert_xmin_coordinate
PUBLIC	?insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z	; insert_xmax_coordinate
PUBLIC	?insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z	; insert_ymin_coordinate
PUBLIC	?insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z	; insert_ymax_coordinate
PUBLIC	?insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmin_dual_texture_coordinate
PUBLIC	?insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmax_dual_texture_coordinate
PUBLIC	?insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymin_dual_texture_coordinate
PUBLIC	?insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymax_dual_texture_coordinate
PUBLIC	?__LINE__Var@?0??insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_xmin_coordinate'::`1'::__LINE__Var
PUBLIC	??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@ ; `string'
PUBLIC	??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@	; `string'
PUBLIC	?__LINE__Var@?0??insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_xmax_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_ymin_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_ymax_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_xmin_dual_texture_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_xmax_dual_texture_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_ymin_dual_texture_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_ymax_dual_texture_coordinate'::`1'::__LINE__Var
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4b40005a
EXTRN	_fabs:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?set_full_viewport@@YGXMMMMMM@Z:PROC		; set_full_viewport
EXTRN	?set_zbuffer_parameters@@YGXMMMM@Z:PROC		; set_zbuffer_parameters
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?left_clip_bit_array@@3PAHA:BYTE		; left_clip_bit_array
EXTRN	?right_clip_bit_array@@3PAHA:BYTE		; right_clip_bit_array
EXTRN	?top_clip_bit_array@@3PAHA:BYTE			; top_clip_bit_array
EXTRN	?bottom_clip_bit_array@@3PAHA:BYTE		; bottom_clip_bit_array
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?this_point@@3PAUVERTEX@@A DD 01H DUP (?)		; this_point
?last_point@@3PAUVERTEX@@A DD 01H DUP (?)		; last_point
?clip_list@@3PAUVERTEX@@A DD 01H DUP (?)		; clip_list
?clip_point@@3PAUVERTEX@@A DD 01H DUP (?)		; clip_point
_BSS	ENDS
;	COMDAT __real@4b40005a
CONST	SEGMENT
__real@4b40005a DD 04b40005ar			; 1.2583e+07
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 0872H ; `insert_ymax_dual_texture_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 07bdH ; `insert_ymin_dual_texture_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 0708H ; `insert_xmax_dual_texture_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 0653H ; `insert_xmin_dual_texture_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 05c4H ; `insert_ymax_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 0535H ; `insert_ymin_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 04a6H ; `insert_xmax_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
CONST	SEGMENT
??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@ DB 'Internal clipping error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
CONST	SEGMENT
??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@ DB 'clip_3d_coord'
	DB	' < MAX_3D_CLIP_COORDINATES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\clip.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 0417H ; `insert_xmin_coordinate'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv468 = -236						; size = 8
tv599 = -228						; size = 8
tv462 = -220						; size = 8
_int_dblue2$ = -148					; size = 4
_int_blue2$ = -144					; size = 4
_int_dblue$ = -140					; size = 4
_int_blue$ = -136					; size = 4
_int_dgreen2$ = -132					; size = 4
_int_green2$ = -128					; size = 4
_int_dgreen$ = -124					; size = 4
_int_green$ = -120					; size = 4
_int_dred2$ = -116					; size = 4
_int_red2$ = -112					; size = 4
_int_dred$ = -108					; size = 4
_int_red$ = -104					; size = 4
_int_dalpha2$ = -100					; size = 4
_int_alpha2$ = -96					; size = 4
_int_dalpha$ = -92					; size = 4
_int_alpha$ = -88					; size = 4
_int_dspecular$ = -84					; size = 4
_int_specular$ = -80					; size = 4
_int_dfog$ = -76					; size = 4
_int_fog$ = -72						; size = 4
_blue2$ = -68						; size = 4
_blue$ = -64						; size = 4
_green2$ = -60						; size = 4
_green$ = -56						; size = 4
_red2$ = -52						; size = 4
_red$ = -48						; size = 4
_alpha2$ = -44						; size = 4
_alpha$ = -40						; size = 4
_specular$ = -36					; size = 4
_fog$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z PROC ; insert_ymax_dual_texture_coordinate, COMDAT

; 2162 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2163 : 
; 2164 : 	vertex
; 2165 : 		*tmp;
; 2166 : 
; 2167 : 	double
; 2168 : 		t,
; 2169 : 		numerator,
; 2170 : 		denominator;
; 2171 : 
; 2172 : 	float
; 2173 : 		fog,
; 2174 : 		specular,
; 2175 : 		alpha,
; 2176 : 		alpha2,
; 2177 : 		red,
; 2178 : 		red2,
; 2179 : 		green,
; 2180 : 		green2,
; 2181 : 		blue,
; 2182 : 		blue2;
; 2183 : 
; 2184 : 	int
; 2185 : 		int_fog,
; 2186 : 		int_dfog,
; 2187 : 		int_specular,
; 2188 : 		int_dspecular,
; 2189 : 		int_alpha,
; 2190 : 		int_dalpha,
; 2191 : 		int_alpha2,
; 2192 : 		int_dalpha2,
; 2193 : 		int_red,
; 2194 : 		int_dred,
; 2195 : 		int_red2,
; 2196 : 		int_dred2,
; 2197 : 		int_green,
; 2198 : 		int_dgreen,
; 2199 : 		int_green2,
; 2200 : 		int_dgreen2,
; 2201 : 		int_blue,
; 2202 : 		int_dblue,
; 2203 : 		int_blue2,
; 2204 : 		int_dblue2;
; 2205 : 
; 2206 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_yma
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 2c	 add	 eax, 44			; 0000002cH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_yma:

; 2207 : 
; 2208 : 	if ( point1->i > point2->i )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00038	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  0003c	76 12		 jbe	 SHORT $LN3@insert_yma

; 2209 : 	{
; 2210 : 
; 2211 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 2212 : 
; 2213 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 2214 : 
; 2215 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_yma:

; 2216 : 	}
; 2217 : 
; 2218 : 	numerator = active_viewport.y_max - point2->j;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  0005b	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 2219 : 
; 2220 : 	denominator = point2->j - point1->j;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00074	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 2221 : 
; 2222 : #ifdef DEBUG
; 2223 : 
; 2224 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 24 ff ff
	ff		 fstp	 QWORD PTR tv462[ebp]
  0009d	f2 0f 10 85 24
	ff ff ff	 movsd	 xmm0, QWORD PTR tv462[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 1c
	ff ff ff	 movsd	 QWORD PTR tv599[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 14 ff ff
	ff		 fstp	 QWORD PTR tv468[ebp]
  000c8	f2 0f 10 85 14
	ff ff ff	 movsd	 xmm0, QWORD PTR tv468[ebp]
  000d0	f2 0f 10 8d 1c
	ff ff ff	 movsd	 xmm1, QWORD PTR tv599[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_yma

; 2225 : 	{
; 2226 : 
; 2227 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_yma:

; 2228 : 	}
; 2229 : 
; 2230 : #endif
; 2231 : 
; 2232 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 2233 : 
; 2234 : 	int_fog = point2->fog;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00101	89 4d b8	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 2235 : 	int_dfog = int_fog - ( int ) point1->fog;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  0010b	8b 55 b8	 mov	 edx, DWORD PTR _int_fog$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 b4	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 2236 : 
; 2237 : 	int_specular = point2->specular;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  0011a	89 4d b0	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 2238 : 	int_dspecular = int_specular - ( int ) point1->specular;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  00124	8b 55 b0	 mov	 edx, DWORD PTR _int_specular$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 ac	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 2239 : 
; 2240 : 	int_alpha = point2->alpha;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00133	89 4d a8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 2241 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  0013d	8b 55 a8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 a4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 2242 : 	int_alpha2 = point2->alpha2;

  00145	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00148	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  0014c	89 4d a0	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 2243 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  0014f	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00152	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  00156	8b 55 a0	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  00159	2b d1		 sub	 edx, ecx
  0015b	89 55 9c	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 2244 : 
; 2245 : 	int_red = point2->red;

  0015e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00161	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00165	89 4d 98	 mov	 DWORD PTR _int_red$[ebp], ecx

; 2246 : 	int_dred = int_red - ( int ) point1->red;

  00168	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0016b	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0016f	8b 55 98	 mov	 edx, DWORD PTR _int_red$[ebp]
  00172	2b d1		 sub	 edx, ecx
  00174	89 55 94	 mov	 DWORD PTR _int_dred$[ebp], edx

; 2247 : 	int_red2 = point2->red2;

  00177	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0017a	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  0017e	89 4d 90	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 2248 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  00181	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00184	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  00188	8b 55 90	 mov	 edx, DWORD PTR _int_red2$[ebp]
  0018b	2b d1		 sub	 edx, ecx
  0018d	89 55 8c	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 2249 : 
; 2250 : 	int_green = point2->green;

  00190	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00193	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00197	89 4d 88	 mov	 DWORD PTR _int_green$[ebp], ecx

; 2251 : 	int_dgreen = int_green - ( int ) point1->green;

  0019a	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0019d	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  001a1	8b 55 88	 mov	 edx, DWORD PTR _int_green$[ebp]
  001a4	2b d1		 sub	 edx, ecx
  001a6	89 55 84	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 2252 : 	int_green2 = point2->green2;

  001a9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001ac	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  001b0	89 4d 80	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 2253 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  001b3	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001b6	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  001ba	8b 55 80	 mov	 edx, DWORD PTR _int_green2$[ebp]
  001bd	2b d1		 sub	 edx, ecx
  001bf	89 95 7c ff ff
	ff		 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 2254 : 
; 2255 : 	int_blue = point2->blue;

  001c5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001c8	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001cc	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _int_blue$[ebp], ecx

; 2256 : 	int_dblue = int_blue - ( int ) point1->blue;

  001d2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001d5	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001d9	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _int_blue$[ebp]
  001df	2b d1		 sub	 edx, ecx
  001e1	89 95 74 ff ff
	ff		 mov	 DWORD PTR _int_dblue$[ebp], edx

; 2257 : 	int_blue2 = point2->blue2;

  001e7	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001ea	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001ee	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 2258 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  001f4	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001f7	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001fb	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _int_blue2$[ebp]
  00201	2b d1		 sub	 edx, ecx
  00203	89 95 6c ff ff
	ff		 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 2259 : 
; 2260 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  00209	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  0020e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00212	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  00217	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0021b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00220	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00224	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00228	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 2261 : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  0022d	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  00232	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00236	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  0023b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0023f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00244	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00248	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024c	f3 0f 11 45 dc	 movss	 DWORD PTR _specular$[ebp], xmm0

; 2262 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00251	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  00256	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0025a	f3 0f 2a 4d a4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  0025f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00263	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00268	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0026c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00270	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 2263 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  00275	f3 0f 2a 45 a0	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  0027a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0027e	f3 0f 2a 4d 9c	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  00283	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00287	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0028c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00290	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00294	f3 0f 11 45 d4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 2264 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00299	f3 0f 2a 45 98	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  0029e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002a2	f3 0f 2a 4d 94	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  002a7	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002ab	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002b0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b8	f3 0f 11 45 d0	 movss	 DWORD PTR _red$[ebp], xmm0

; 2265 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  002bd	f3 0f 2a 45 90	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  002c2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002c6	f3 0f 2a 4d 8c	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  002cb	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002cf	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002d4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002dc	f3 0f 11 45 cc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 2266 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  002e1	f3 0f 2a 45 88	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  002e6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ea	f3 0f 2a 4d 84	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  002ef	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002f3	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002f8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00300	f3 0f 11 45 c8	 movss	 DWORD PTR _green$[ebp], xmm0

; 2267 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  00305	f3 0f 2a 45 80	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  0030a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0030e	f3 0f 2a 8d 7c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  00316	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0031a	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0031f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00323	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00327	f3 0f 11 45 c4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 2268 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0032c	f3 0f 2a 85 78
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00334	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00338	f3 0f 2a 8d 74
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  00340	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00344	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00349	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0034d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00351	f3 0f 11 45 c0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 2269 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  00356	f3 0f 2a 85 70
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  0035e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00362	f3 0f 2a 8d 6c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  0036a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0036e	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00373	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00377	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0037b	f3 0f 11 45 bc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 2270 : 
; 2271 : 	fog += FLOAT_FLOAT_FACTOR;

  00380	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  00385	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0038d	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 2272 : 	specular += FLOAT_FLOAT_FACTOR;

  00392	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _specular$[ebp]
  00397	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0039f	f3 0f 11 45 dc	 movss	 DWORD PTR _specular$[ebp], xmm0

; 2273 : 	alpha += FLOAT_FLOAT_FACTOR;

  003a4	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  003a9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003b1	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 2274 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  003b6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  003bb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003c3	f3 0f 11 45 d4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 2275 : 	red += FLOAT_FLOAT_FACTOR;

  003c8	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _red$[ebp]
  003cd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003d5	f3 0f 11 45 d0	 movss	 DWORD PTR _red$[ebp], xmm0

; 2276 : 	red2 += FLOAT_FLOAT_FACTOR;

  003da	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _red2$[ebp]
  003df	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003e7	f3 0f 11 45 cc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 2277 : 	green += FLOAT_FLOAT_FACTOR;

  003ec	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _green$[ebp]
  003f1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003f9	f3 0f 11 45 c8	 movss	 DWORD PTR _green$[ebp], xmm0

; 2278 : 	green2 += FLOAT_FLOAT_FACTOR;

  003fe	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _green2$[ebp]
  00403	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0040b	f3 0f 11 45 c4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 2279 : 	blue += FLOAT_FLOAT_FACTOR;

  00410	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00415	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0041d	f3 0f 11 45 c0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 2280 : 	blue2 += FLOAT_FLOAT_FACTOR;

  00422	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  00427	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0042f	f3 0f 11 45 bc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 2281 : 
; 2282 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  00434	8b 45 e0	 mov	 eax, DWORD PTR _fog$[ebp]
  00437	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0043c	89 45 b8	 mov	 DWORD PTR _int_fog$[ebp], eax

; 2283 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  0043f	8b 45 dc	 mov	 eax, DWORD PTR _specular$[ebp]
  00442	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00447	89 45 b0	 mov	 DWORD PTR _int_specular$[ebp], eax

; 2284 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  0044a	8b 45 d8	 mov	 eax, DWORD PTR _alpha$[ebp]
  0044d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00452	89 45 a8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 2285 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  00455	8b 45 d4	 mov	 eax, DWORD PTR _alpha2$[ebp]
  00458	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0045d	89 45 a0	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 2286 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  00460	8b 45 d0	 mov	 eax, DWORD PTR _red$[ebp]
  00463	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00468	89 45 98	 mov	 DWORD PTR _int_red$[ebp], eax

; 2287 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  0046b	8b 45 cc	 mov	 eax, DWORD PTR _red2$[ebp]
  0046e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00473	89 45 90	 mov	 DWORD PTR _int_red2$[ebp], eax

; 2288 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00476	8b 45 c8	 mov	 eax, DWORD PTR _green$[ebp]
  00479	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0047e	89 45 88	 mov	 DWORD PTR _int_green$[ebp], eax

; 2289 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  00481	8b 45 c4	 mov	 eax, DWORD PTR _green2$[ebp]
  00484	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00489	89 45 80	 mov	 DWORD PTR _int_green2$[ebp], eax

; 2290 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0048c	8b 45 c0	 mov	 eax, DWORD PTR _blue$[ebp]
  0048f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00494	89 85 78 ff ff
	ff		 mov	 DWORD PTR _int_blue$[ebp], eax

; 2291 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  0049a	8b 45 bc	 mov	 eax, DWORD PTR _blue2$[ebp]
  0049d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  004a2	89 85 70 ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], eax

; 2292 : 
; 2293 : 	clip_3d_crds[clip_3d_coord].fog = int_fog;

  004a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004ad	c1 e0 06	 shl	 eax, 6
  004b0	8a 4d b8	 mov	 cl, BYTE PTR _int_fog$[ebp]
  004b3	88 88 2e 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+46], cl

; 2294 : 	clip_3d_crds[clip_3d_coord].specular = int_specular;

  004b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004be	c1 e0 06	 shl	 eax, 6
  004c1	8a 4d b0	 mov	 cl, BYTE PTR _int_specular$[ebp]
  004c4	88 88 2d 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+45], cl

; 2295 : 	clip_3d_crds[clip_3d_coord].alpha = int_alpha;

  004ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004cf	c1 e0 06	 shl	 eax, 6
  004d2	8a 4d a8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  004d5	88 88 33 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+51], cl

; 2296 : 	clip_3d_crds[clip_3d_coord].alpha2 = int_alpha2;

  004db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004e0	c1 e0 06	 shl	 eax, 6
  004e3	8a 4d a0	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  004e6	88 88 37 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+55], cl

; 2297 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  004ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004f1	c1 e0 06	 shl	 eax, 6
  004f4	8a 4d 98	 mov	 cl, BYTE PTR _int_red$[ebp]
  004f7	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 2298 : 	clip_3d_crds[clip_3d_coord].red2 = int_red2;

  004fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00502	c1 e0 06	 shl	 eax, 6
  00505	8a 4d 90	 mov	 cl, BYTE PTR _int_red2$[ebp]
  00508	88 88 36 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+54], cl

; 2299 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  0050e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00513	c1 e0 06	 shl	 eax, 6
  00516	8a 4d 88	 mov	 cl, BYTE PTR _int_green$[ebp]
  00519	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 2300 : 	clip_3d_crds[clip_3d_coord].green2 = int_green2;

  0051f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00524	c1 e0 06	 shl	 eax, 6
  00527	8a 4d 80	 mov	 cl, BYTE PTR _int_green2$[ebp]
  0052a	88 88 35 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+53], cl

; 2301 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  00530	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00535	c1 e0 06	 shl	 eax, 6
  00538	8a 8d 78 ff ff
	ff		 mov	 cl, BYTE PTR _int_blue$[ebp]
  0053e	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 2302 : 	clip_3d_crds[clip_3d_coord].blue2 = int_blue2;

  00544	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00549	c1 e0 06	 shl	 eax, 6
  0054c	8a 8d 70 ff ff
	ff		 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00552	88 88 34 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+52], cl

; 2303 : 
; 2304 : 	clip_3d_crds[clip_3d_coord].i = point2->i + ( t * ( point2->i - point1->i ) );

  00558	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0055b	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  00560	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00563	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00566	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0056b	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00570	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00574	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00579	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0057d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00581	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00586	c1 e0 06	 shl	 eax, 6
  00589	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 2305 : 	clip_3d_crds[clip_3d_coord].j = active_viewport.y_max;

  00591	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00596	c1 e0 06	 shl	 eax, 6
  00599	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  005a1	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 2306 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  005a9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  005ac	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  005b1	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  005b4	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  005b7	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  005bc	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  005c1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005c5	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  005ca	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005ce	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  005d7	c1 e0 06	 shl	 eax, 6
  005da	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 2307 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  005e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  005e7	c1 e0 06	 shl	 eax, 6
  005ea	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  005f2	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  005fa	f2 0f 5e c8	 divsd	 xmm1, xmm0
  005fe	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00602	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00608	c1 e1 06	 shl	 ecx, 6
  0060b	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 2308 : 
; 2309 : 	clip_3d_crds[clip_3d_coord].u = point2->u + ( t * ( point2->u - point1->u ) );

  00613	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00616	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0061b	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0061e	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00621	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00626	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0062b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0062f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00634	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00638	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0063c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00641	c1 e0 06	 shl	 eax, 6
  00644	f3 0f 11 80 18
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+24], xmm0

; 2310 : 	clip_3d_crds[clip_3d_coord].v = point2->v + ( t * ( point2->v - point1->v ) );

  0064c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0064f	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00654	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00657	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0065a	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0065f	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00664	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00668	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0066d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00671	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00675	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0067a	c1 e0 06	 shl	 eax, 6
  0067d	f3 0f 11 80 1c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+28], xmm0

; 2311 : 	clip_3d_crds[clip_3d_coord].u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  00685	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00688	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  0068d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00690	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00693	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00698	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  0069d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  006a1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  006a6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  006b3	c1 e0 06	 shl	 eax, 6
  006b6	f3 0f 11 80 20
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+32], xmm0

; 2312 : 	clip_3d_crds[clip_3d_coord].v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  006be	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  006c1	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  006c6	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  006c9	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  006cc	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  006d1	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  006d6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  006da	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  006df	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  006ec	c1 e0 06	 shl	 eax, 6
  006ef	f3 0f 11 80 24
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+36], xmm0

; 2313 : 
; 2314 : 	if ( ! clip_point )

  006f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  006fe	75 1e		 jne	 SHORT $LN5@insert_yma

; 2315 : 	{
; 2316 : 
; 2317 : 		clip_list = &clip_3d_crds[clip_3d_coord];

  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00705	c1 e0 06	 shl	 eax, 6
  00708	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  0070d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 2318 : 
; 2319 : 		clip_point = clip_list;

  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00717	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 2320 : 	}
; 2321 : 	else

  0071c	eb 24		 jmp	 SHORT $LN6@insert_yma
$LN5@insert_yma:

; 2322 : 	{
; 2323 : 
; 2324 : 		clip_point->next_vertex	= &clip_3d_crds[clip_3d_coord];

  0071e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00723	c1 e0 06	 shl	 eax, 6
  00726	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  0072b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00731	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 2325 : 
; 2326 : 		clip_point = clip_point->next_vertex;

  00734	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00739	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0073c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_yma:

; 2327 : 	}
; 2328 : 
; 2329 : 	clip_3d_coord ++;

  00742	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00747	83 c0 01	 add	 eax, 1
  0074a	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 2330 : 
; 2331 : #if REPORT_CLIP_STATISTICS
; 2332 : 
; 2333 : 	number_of_ymax_coordinates_inserted++;
; 2334 : 
; 2335 : #endif
; 2336 : }

  0074f	5f		 pop	 edi
  00750	5e		 pop	 esi
  00751	5b		 pop	 ebx
  00752	8b e5		 mov	 esp, ebp
  00754	5d		 pop	 ebp
  00755	c2 08 00	 ret	 8
?insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ENDP ; insert_ymax_dual_texture_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv468 = -236						; size = 8
tv599 = -228						; size = 8
tv462 = -220						; size = 8
_int_dblue2$ = -148					; size = 4
_int_blue2$ = -144					; size = 4
_int_dblue$ = -140					; size = 4
_int_blue$ = -136					; size = 4
_int_dgreen2$ = -132					; size = 4
_int_green2$ = -128					; size = 4
_int_dgreen$ = -124					; size = 4
_int_green$ = -120					; size = 4
_int_dred2$ = -116					; size = 4
_int_red2$ = -112					; size = 4
_int_dred$ = -108					; size = 4
_int_red$ = -104					; size = 4
_int_dalpha2$ = -100					; size = 4
_int_alpha2$ = -96					; size = 4
_int_dalpha$ = -92					; size = 4
_int_alpha$ = -88					; size = 4
_int_dspecular$ = -84					; size = 4
_int_specular$ = -80					; size = 4
_int_dfog$ = -76					; size = 4
_int_fog$ = -72						; size = 4
_blue2$ = -68						; size = 4
_blue$ = -64						; size = 4
_green2$ = -60						; size = 4
_green$ = -56						; size = 4
_red2$ = -52						; size = 4
_red$ = -48						; size = 4
_alpha2$ = -44						; size = 4
_alpha$ = -40						; size = 4
_specular$ = -36					; size = 4
_fog$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z PROC ; insert_ymin_dual_texture_coordinate, COMDAT

; 1981 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1982 : 
; 1983 : 	vertex
; 1984 : 		*tmp;
; 1985 : 
; 1986 : 	double
; 1987 : 		t,
; 1988 : 		numerator,
; 1989 : 		denominator;
; 1990 : 
; 1991 : 	float
; 1992 : 		fog,
; 1993 : 		specular,
; 1994 : 		alpha,
; 1995 : 		alpha2,
; 1996 : 		red,
; 1997 : 		red2,
; 1998 : 		green,
; 1999 : 		green2,
; 2000 : 		blue,
; 2001 : 		blue2;
; 2002 : 
; 2003 : 	int
; 2004 : 		int_fog,
; 2005 : 		int_dfog,
; 2006 : 		int_specular,
; 2007 : 		int_dspecular,
; 2008 : 		int_alpha,
; 2009 : 		int_dalpha,
; 2010 : 		int_alpha2,
; 2011 : 		int_dalpha2,
; 2012 : 		int_red,
; 2013 : 		int_dred,
; 2014 : 		int_red2,
; 2015 : 		int_dred2,
; 2016 : 		int_green,
; 2017 : 		int_dgreen,
; 2018 : 		int_green2,
; 2019 : 		int_dgreen2,
; 2020 : 		int_blue,
; 2021 : 		int_dblue,
; 2022 : 		int_blue2,
; 2023 : 		int_dblue2;
; 2024 : 
; 2025 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_ymi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 2c	 add	 eax, 44			; 0000002cH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_ymi:

; 2026 : 
; 2027 : 	if ( point1->i > point2->i )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00038	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  0003c	76 12		 jbe	 SHORT $LN3@insert_ymi

; 2028 : 	{
; 2029 : 
; 2030 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 2031 : 
; 2032 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 2033 : 
; 2034 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_ymi:

; 2035 : 	}
; 2036 : 
; 2037 : 	numerator = active_viewport.y_min - point2->j;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0005b	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 2038 : 
; 2039 : 	denominator = point2->j - point1->j;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00074	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 2040 : 
; 2041 : #ifdef DEBUG
; 2042 : 
; 2043 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 24 ff ff
	ff		 fstp	 QWORD PTR tv462[ebp]
  0009d	f2 0f 10 85 24
	ff ff ff	 movsd	 xmm0, QWORD PTR tv462[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 1c
	ff ff ff	 movsd	 QWORD PTR tv599[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 14 ff ff
	ff		 fstp	 QWORD PTR tv468[ebp]
  000c8	f2 0f 10 85 14
	ff ff ff	 movsd	 xmm0, QWORD PTR tv468[ebp]
  000d0	f2 0f 10 8d 1c
	ff ff ff	 movsd	 xmm1, QWORD PTR tv599[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_ymi

; 2044 : 	{
; 2045 : 
; 2046 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_ymi:

; 2047 : 	}
; 2048 : 
; 2049 : #endif
; 2050 : 
; 2051 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 2052 : 
; 2053 : 	int_fog = point2->fog;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00101	89 4d b8	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 2054 : 	int_dfog = int_fog - ( int ) point1->fog;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  0010b	8b 55 b8	 mov	 edx, DWORD PTR _int_fog$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 b4	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 2055 : 
; 2056 : 	int_specular = point2->specular;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  0011a	89 4d b0	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 2057 : 	int_dspecular = int_specular - ( int ) point1->specular;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  00124	8b 55 b0	 mov	 edx, DWORD PTR _int_specular$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 ac	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 2058 : 
; 2059 : 	int_alpha = point2->alpha;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00133	89 4d a8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 2060 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  0013d	8b 55 a8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 a4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 2061 : 	int_alpha2 = point2->alpha2;

  00145	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00148	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  0014c	89 4d a0	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 2062 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  0014f	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00152	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  00156	8b 55 a0	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  00159	2b d1		 sub	 edx, ecx
  0015b	89 55 9c	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 2063 : 
; 2064 : 	int_red = point2->red;

  0015e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00161	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00165	89 4d 98	 mov	 DWORD PTR _int_red$[ebp], ecx

; 2065 : 	int_dred = int_red - ( int ) point1->red;

  00168	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0016b	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0016f	8b 55 98	 mov	 edx, DWORD PTR _int_red$[ebp]
  00172	2b d1		 sub	 edx, ecx
  00174	89 55 94	 mov	 DWORD PTR _int_dred$[ebp], edx

; 2066 : 	int_red2 = point2->red2;

  00177	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0017a	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  0017e	89 4d 90	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 2067 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  00181	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00184	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  00188	8b 55 90	 mov	 edx, DWORD PTR _int_red2$[ebp]
  0018b	2b d1		 sub	 edx, ecx
  0018d	89 55 8c	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 2068 : 
; 2069 : 	int_green = point2->green;

  00190	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00193	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00197	89 4d 88	 mov	 DWORD PTR _int_green$[ebp], ecx

; 2070 : 	int_dgreen = int_green - ( int ) point1->green;

  0019a	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0019d	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  001a1	8b 55 88	 mov	 edx, DWORD PTR _int_green$[ebp]
  001a4	2b d1		 sub	 edx, ecx
  001a6	89 55 84	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 2071 : 	int_green2 = point2->green2;

  001a9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001ac	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  001b0	89 4d 80	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 2072 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  001b3	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001b6	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  001ba	8b 55 80	 mov	 edx, DWORD PTR _int_green2$[ebp]
  001bd	2b d1		 sub	 edx, ecx
  001bf	89 95 7c ff ff
	ff		 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 2073 : 
; 2074 : 	int_blue = point2->blue;

  001c5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001c8	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001cc	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _int_blue$[ebp], ecx

; 2075 : 	int_dblue = int_blue - ( int ) point1->blue;

  001d2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001d5	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001d9	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _int_blue$[ebp]
  001df	2b d1		 sub	 edx, ecx
  001e1	89 95 74 ff ff
	ff		 mov	 DWORD PTR _int_dblue$[ebp], edx

; 2076 : 	int_blue2 = point2->blue2;

  001e7	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001ea	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001ee	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 2077 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  001f4	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001f7	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001fb	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _int_blue2$[ebp]
  00201	2b d1		 sub	 edx, ecx
  00203	89 95 6c ff ff
	ff		 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 2078 : 
; 2079 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  00209	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  0020e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00212	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  00217	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0021b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00220	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00224	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00228	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 2080 : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  0022d	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  00232	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00236	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  0023b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0023f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00244	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00248	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024c	f3 0f 11 45 dc	 movss	 DWORD PTR _specular$[ebp], xmm0

; 2081 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00251	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  00256	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0025a	f3 0f 2a 4d a4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  0025f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00263	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00268	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0026c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00270	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 2082 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  00275	f3 0f 2a 45 a0	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  0027a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0027e	f3 0f 2a 4d 9c	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  00283	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00287	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0028c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00290	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00294	f3 0f 11 45 d4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 2083 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00299	f3 0f 2a 45 98	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  0029e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002a2	f3 0f 2a 4d 94	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  002a7	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002ab	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002b0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b8	f3 0f 11 45 d0	 movss	 DWORD PTR _red$[ebp], xmm0

; 2084 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  002bd	f3 0f 2a 45 90	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  002c2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002c6	f3 0f 2a 4d 8c	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  002cb	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002cf	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002d4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002dc	f3 0f 11 45 cc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 2085 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  002e1	f3 0f 2a 45 88	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  002e6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ea	f3 0f 2a 4d 84	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  002ef	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002f3	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002f8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00300	f3 0f 11 45 c8	 movss	 DWORD PTR _green$[ebp], xmm0

; 2086 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  00305	f3 0f 2a 45 80	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  0030a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0030e	f3 0f 2a 8d 7c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  00316	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0031a	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0031f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00323	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00327	f3 0f 11 45 c4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 2087 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0032c	f3 0f 2a 85 78
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00334	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00338	f3 0f 2a 8d 74
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  00340	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00344	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00349	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0034d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00351	f3 0f 11 45 c0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 2088 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  00356	f3 0f 2a 85 70
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  0035e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00362	f3 0f 2a 8d 6c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  0036a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0036e	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00373	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00377	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0037b	f3 0f 11 45 bc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 2089 : 
; 2090 : 	fog += FLOAT_FLOAT_FACTOR;

  00380	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  00385	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0038d	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 2091 : 	specular += FLOAT_FLOAT_FACTOR;

  00392	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _specular$[ebp]
  00397	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0039f	f3 0f 11 45 dc	 movss	 DWORD PTR _specular$[ebp], xmm0

; 2092 : 	alpha += FLOAT_FLOAT_FACTOR;

  003a4	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  003a9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003b1	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 2093 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  003b6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  003bb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003c3	f3 0f 11 45 d4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 2094 : 	red += FLOAT_FLOAT_FACTOR;

  003c8	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _red$[ebp]
  003cd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003d5	f3 0f 11 45 d0	 movss	 DWORD PTR _red$[ebp], xmm0

; 2095 : 	red2 += FLOAT_FLOAT_FACTOR;

  003da	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _red2$[ebp]
  003df	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003e7	f3 0f 11 45 cc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 2096 : 	green += FLOAT_FLOAT_FACTOR;

  003ec	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _green$[ebp]
  003f1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003f9	f3 0f 11 45 c8	 movss	 DWORD PTR _green$[ebp], xmm0

; 2097 : 	green2 += FLOAT_FLOAT_FACTOR;

  003fe	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _green2$[ebp]
  00403	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0040b	f3 0f 11 45 c4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 2098 : 	blue += FLOAT_FLOAT_FACTOR;

  00410	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00415	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0041d	f3 0f 11 45 c0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 2099 : 	blue2 += FLOAT_FLOAT_FACTOR;

  00422	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  00427	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0042f	f3 0f 11 45 bc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 2100 : 
; 2101 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  00434	8b 45 e0	 mov	 eax, DWORD PTR _fog$[ebp]
  00437	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0043c	89 45 b8	 mov	 DWORD PTR _int_fog$[ebp], eax

; 2102 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  0043f	8b 45 dc	 mov	 eax, DWORD PTR _specular$[ebp]
  00442	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00447	89 45 b0	 mov	 DWORD PTR _int_specular$[ebp], eax

; 2103 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  0044a	8b 45 d8	 mov	 eax, DWORD PTR _alpha$[ebp]
  0044d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00452	89 45 a8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 2104 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  00455	8b 45 d4	 mov	 eax, DWORD PTR _alpha2$[ebp]
  00458	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0045d	89 45 a0	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 2105 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  00460	8b 45 d0	 mov	 eax, DWORD PTR _red$[ebp]
  00463	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00468	89 45 98	 mov	 DWORD PTR _int_red$[ebp], eax

; 2106 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  0046b	8b 45 cc	 mov	 eax, DWORD PTR _red2$[ebp]
  0046e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00473	89 45 90	 mov	 DWORD PTR _int_red2$[ebp], eax

; 2107 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00476	8b 45 c8	 mov	 eax, DWORD PTR _green$[ebp]
  00479	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0047e	89 45 88	 mov	 DWORD PTR _int_green$[ebp], eax

; 2108 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  00481	8b 45 c4	 mov	 eax, DWORD PTR _green2$[ebp]
  00484	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00489	89 45 80	 mov	 DWORD PTR _int_green2$[ebp], eax

; 2109 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0048c	8b 45 c0	 mov	 eax, DWORD PTR _blue$[ebp]
  0048f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00494	89 85 78 ff ff
	ff		 mov	 DWORD PTR _int_blue$[ebp], eax

; 2110 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  0049a	8b 45 bc	 mov	 eax, DWORD PTR _blue2$[ebp]
  0049d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  004a2	89 85 70 ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], eax

; 2111 : 
; 2112 : 	clip_3d_crds[clip_3d_coord].fog = int_fog;

  004a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004ad	c1 e0 06	 shl	 eax, 6
  004b0	8a 4d b8	 mov	 cl, BYTE PTR _int_fog$[ebp]
  004b3	88 88 2e 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+46], cl

; 2113 : 	clip_3d_crds[clip_3d_coord].specular = int_specular;

  004b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004be	c1 e0 06	 shl	 eax, 6
  004c1	8a 4d b0	 mov	 cl, BYTE PTR _int_specular$[ebp]
  004c4	88 88 2d 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+45], cl

; 2114 : 	clip_3d_crds[clip_3d_coord].alpha = int_alpha;

  004ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004cf	c1 e0 06	 shl	 eax, 6
  004d2	8a 4d a8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  004d5	88 88 33 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+51], cl

; 2115 : 	clip_3d_crds[clip_3d_coord].alpha2 = int_alpha2;

  004db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004e0	c1 e0 06	 shl	 eax, 6
  004e3	8a 4d a0	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  004e6	88 88 37 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+55], cl

; 2116 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  004ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004f1	c1 e0 06	 shl	 eax, 6
  004f4	8a 4d 98	 mov	 cl, BYTE PTR _int_red$[ebp]
  004f7	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 2117 : 	clip_3d_crds[clip_3d_coord].red2 = int_red2;

  004fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00502	c1 e0 06	 shl	 eax, 6
  00505	8a 4d 90	 mov	 cl, BYTE PTR _int_red2$[ebp]
  00508	88 88 36 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+54], cl

; 2118 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  0050e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00513	c1 e0 06	 shl	 eax, 6
  00516	8a 4d 88	 mov	 cl, BYTE PTR _int_green$[ebp]
  00519	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 2119 : 	clip_3d_crds[clip_3d_coord].green2 = int_green2;

  0051f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00524	c1 e0 06	 shl	 eax, 6
  00527	8a 4d 80	 mov	 cl, BYTE PTR _int_green2$[ebp]
  0052a	88 88 35 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+53], cl

; 2120 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  00530	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00535	c1 e0 06	 shl	 eax, 6
  00538	8a 8d 78 ff ff
	ff		 mov	 cl, BYTE PTR _int_blue$[ebp]
  0053e	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 2121 : 	clip_3d_crds[clip_3d_coord].blue2 = int_blue2;

  00544	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00549	c1 e0 06	 shl	 eax, 6
  0054c	8a 8d 70 ff ff
	ff		 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00552	88 88 34 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+52], cl

; 2122 : 
; 2123 : 	clip_3d_crds[clip_3d_coord].i = point2->i + ( t * ( point2->i - point1->i ) );

  00558	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0055b	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  00560	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00563	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00566	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0056b	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00570	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00574	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00579	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0057d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00581	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00586	c1 e0 06	 shl	 eax, 6
  00589	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 2124 : 	clip_3d_crds[clip_3d_coord].j = active_viewport.y_min;

  00591	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00596	c1 e0 06	 shl	 eax, 6
  00599	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  005a1	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 2125 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  005a9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  005ac	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  005b1	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  005b4	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  005b7	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  005bc	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  005c1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005c5	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  005ca	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005ce	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  005d7	c1 e0 06	 shl	 eax, 6
  005da	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 2126 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  005e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  005e7	c1 e0 06	 shl	 eax, 6
  005ea	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  005f2	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  005fa	f2 0f 5e c8	 divsd	 xmm1, xmm0
  005fe	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00602	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00608	c1 e1 06	 shl	 ecx, 6
  0060b	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 2127 : 
; 2128 : 	clip_3d_crds[clip_3d_coord].u = point2->u + ( t * ( point2->u - point1->u ) );

  00613	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00616	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0061b	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0061e	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00621	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00626	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0062b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0062f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00634	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00638	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0063c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00641	c1 e0 06	 shl	 eax, 6
  00644	f3 0f 11 80 18
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+24], xmm0

; 2129 : 	clip_3d_crds[clip_3d_coord].v = point2->v + ( t * ( point2->v - point1->v ) );

  0064c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0064f	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00654	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00657	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0065a	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0065f	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00664	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00668	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0066d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00671	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00675	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0067a	c1 e0 06	 shl	 eax, 6
  0067d	f3 0f 11 80 1c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+28], xmm0

; 2130 : 	clip_3d_crds[clip_3d_coord].u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  00685	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00688	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  0068d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00690	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00693	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00698	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  0069d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  006a1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  006a6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  006b3	c1 e0 06	 shl	 eax, 6
  006b6	f3 0f 11 80 20
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+32], xmm0

; 2131 : 	clip_3d_crds[clip_3d_coord].v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  006be	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  006c1	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  006c6	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  006c9	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  006cc	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  006d1	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  006d6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  006da	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  006df	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  006ec	c1 e0 06	 shl	 eax, 6
  006ef	f3 0f 11 80 24
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+36], xmm0

; 2132 : 
; 2133 : 	if ( ! clip_point )

  006f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  006fe	75 1e		 jne	 SHORT $LN5@insert_ymi

; 2134 : 	{
; 2135 : 
; 2136 : 		clip_list = & clip_3d_crds[clip_3d_coord];

  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00705	c1 e0 06	 shl	 eax, 6
  00708	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  0070d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 2137 : 
; 2138 : 		clip_point = clip_list;

  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00717	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 2139 : 	}
; 2140 : 	else

  0071c	eb 24		 jmp	 SHORT $LN6@insert_ymi
$LN5@insert_ymi:

; 2141 : 	{
; 2142 : 
; 2143 : 		clip_point->next_vertex = & clip_3d_crds[clip_3d_coord];

  0071e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00723	c1 e0 06	 shl	 eax, 6
  00726	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  0072b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00731	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 2144 : 
; 2145 : 		clip_point = clip_point->next_vertex;

  00734	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00739	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0073c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_ymi:

; 2146 : 	}
; 2147 : 
; 2148 : 	clip_3d_coord ++;

  00742	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00747	83 c0 01	 add	 eax, 1
  0074a	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 2149 : 
; 2150 : #if REPORT_CLIP_STATISTICS
; 2151 : 
; 2152 : 	number_of_ymin_coordinates_inserted++;
; 2153 : 
; 2154 : #endif
; 2155 : }

  0074f	5f		 pop	 edi
  00750	5e		 pop	 esi
  00751	5b		 pop	 ebx
  00752	8b e5		 mov	 esp, ebp
  00754	5d		 pop	 ebp
  00755	c2 08 00	 ret	 8
?insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ENDP ; insert_ymin_dual_texture_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv468 = -236						; size = 8
tv599 = -228						; size = 8
tv462 = -220						; size = 8
_int_dblue2$ = -148					; size = 4
_int_blue2$ = -144					; size = 4
_int_dblue$ = -140					; size = 4
_int_blue$ = -136					; size = 4
_int_dgreen2$ = -132					; size = 4
_int_green2$ = -128					; size = 4
_int_dgreen$ = -124					; size = 4
_int_green$ = -120					; size = 4
_int_dred2$ = -116					; size = 4
_int_red2$ = -112					; size = 4
_int_dred$ = -108					; size = 4
_int_red$ = -104					; size = 4
_int_dalpha2$ = -100					; size = 4
_int_alpha2$ = -96					; size = 4
_int_dalpha$ = -92					; size = 4
_int_alpha$ = -88					; size = 4
_int_dspecular$ = -84					; size = 4
_int_specular$ = -80					; size = 4
_int_dfog$ = -76					; size = 4
_int_fog$ = -72						; size = 4
_blue2$ = -68						; size = 4
_blue$ = -64						; size = 4
_green2$ = -60						; size = 4
_green$ = -56						; size = 4
_red2$ = -52						; size = 4
_red$ = -48						; size = 4
_alpha2$ = -44						; size = 4
_alpha$ = -40						; size = 4
_specular$ = -36					; size = 4
_fog$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z PROC ; insert_xmax_dual_texture_coordinate, COMDAT

; 1800 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1801 : 
; 1802 : 	vertex
; 1803 : 		*tmp;
; 1804 : 
; 1805 : 	double
; 1806 : 		t,
; 1807 : 		numerator,
; 1808 : 		denominator;
; 1809 : 
; 1810 : 	float
; 1811 : 		fog,
; 1812 : 		specular,
; 1813 : 		alpha,
; 1814 : 		alpha2,
; 1815 : 		red,
; 1816 : 		red2,
; 1817 : 		green,
; 1818 : 		green2,
; 1819 : 		blue,
; 1820 : 		blue2;
; 1821 : 
; 1822 : 	int
; 1823 : 		int_fog,
; 1824 : 		int_dfog,
; 1825 : 		int_specular,
; 1826 : 		int_dspecular,
; 1827 : 		int_alpha,
; 1828 : 		int_dalpha,
; 1829 : 		int_alpha2,
; 1830 : 		int_dalpha2,
; 1831 : 		int_red,
; 1832 : 		int_dred,
; 1833 : 		int_red2,
; 1834 : 		int_dred2,
; 1835 : 		int_green,
; 1836 : 		int_dgreen,
; 1837 : 		int_green2,
; 1838 : 		int_dgreen2,
; 1839 : 		int_blue,
; 1840 : 		int_dblue,
; 1841 : 		int_blue2,
; 1842 : 		int_dblue2;
; 1843 : 
; 1844 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_xma
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 2c	 add	 eax, 44			; 0000002cH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_xma:

; 1845 : 
; 1846 : 	if ( point1->j > point2->j )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00038	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  0003c	76 12		 jbe	 SHORT $LN3@insert_xma

; 1847 : 	{
; 1848 : 
; 1849 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 1850 : 
; 1851 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 1852 : 
; 1853 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_xma:

; 1854 : 	}
; 1855 : 
; 1856 : 	numerator = active_viewport.x_max - point2->i;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0005b	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 1857 : 
; 1858 : 	denominator = point2->i - point1->i;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00074	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 1859 : 
; 1860 : #ifdef DEBUG
; 1861 : 
; 1862 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 24 ff ff
	ff		 fstp	 QWORD PTR tv462[ebp]
  0009d	f2 0f 10 85 24
	ff ff ff	 movsd	 xmm0, QWORD PTR tv462[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 1c
	ff ff ff	 movsd	 QWORD PTR tv599[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 14 ff ff
	ff		 fstp	 QWORD PTR tv468[ebp]
  000c8	f2 0f 10 85 14
	ff ff ff	 movsd	 xmm0, QWORD PTR tv468[ebp]
  000d0	f2 0f 10 8d 1c
	ff ff ff	 movsd	 xmm1, QWORD PTR tv599[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_xma

; 1863 : 	{
; 1864 : 
; 1865 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_xma:

; 1866 : 	}
; 1867 : 
; 1868 : #endif
; 1869 : 
; 1870 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1871 : 
; 1872 : 	int_fog = point2->fog;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00101	89 4d b8	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1873 : 	int_dfog = int_fog - ( int ) point1->fog;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  0010b	8b 55 b8	 mov	 edx, DWORD PTR _int_fog$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 b4	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1874 : 
; 1875 : 	int_specular = point2->specular;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  0011a	89 4d b0	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 1876 : 	int_dspecular = int_specular - ( int ) point1->specular;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  00124	8b 55 b0	 mov	 edx, DWORD PTR _int_specular$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 ac	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 1877 : 
; 1878 : 	int_alpha = point2->alpha;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00133	89 4d a8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1879 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  0013d	8b 55 a8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 a4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1880 : 	int_alpha2 = point2->alpha2;

  00145	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00148	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  0014c	89 4d a0	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 1881 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  0014f	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00152	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  00156	8b 55 a0	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  00159	2b d1		 sub	 edx, ecx
  0015b	89 55 9c	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 1882 : 
; 1883 : 	int_red = point2->red;

  0015e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00161	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00165	89 4d 98	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1884 : 	int_dred = int_red - ( int ) point1->red;

  00168	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0016b	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0016f	8b 55 98	 mov	 edx, DWORD PTR _int_red$[ebp]
  00172	2b d1		 sub	 edx, ecx
  00174	89 55 94	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1885 : 	int_red2 = point2->red2;

  00177	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0017a	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  0017e	89 4d 90	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 1886 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  00181	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00184	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  00188	8b 55 90	 mov	 edx, DWORD PTR _int_red2$[ebp]
  0018b	2b d1		 sub	 edx, ecx
  0018d	89 55 8c	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 1887 : 
; 1888 : 	int_green = point2->green;

  00190	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00193	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00197	89 4d 88	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1889 : 	int_dgreen = int_green - ( int ) point1->green;

  0019a	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0019d	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  001a1	8b 55 88	 mov	 edx, DWORD PTR _int_green$[ebp]
  001a4	2b d1		 sub	 edx, ecx
  001a6	89 55 84	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1890 : 	int_green2 = point2->green2;

  001a9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001ac	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  001b0	89 4d 80	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 1891 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  001b3	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001b6	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  001ba	8b 55 80	 mov	 edx, DWORD PTR _int_green2$[ebp]
  001bd	2b d1		 sub	 edx, ecx
  001bf	89 95 7c ff ff
	ff		 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 1892 : 
; 1893 : 	int_blue = point2->blue;

  001c5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001c8	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001cc	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1894 : 	int_dblue = int_blue - ( int ) point1->blue;

  001d2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001d5	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001d9	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _int_blue$[ebp]
  001df	2b d1		 sub	 edx, ecx
  001e1	89 95 74 ff ff
	ff		 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1895 : 	int_blue2 = point2->blue2;

  001e7	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001ea	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001ee	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 1896 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  001f4	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001f7	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001fb	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _int_blue2$[ebp]
  00201	2b d1		 sub	 edx, ecx
  00203	89 95 6c ff ff
	ff		 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 1897 : 
; 1898 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  00209	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  0020e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00212	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  00217	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0021b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00220	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00224	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00228	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1899 : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  0022d	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  00232	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00236	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  0023b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0023f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00244	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00248	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024c	f3 0f 11 45 dc	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1900 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00251	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  00256	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0025a	f3 0f 2a 4d a4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  0025f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00263	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00268	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0026c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00270	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1901 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  00275	f3 0f 2a 45 a0	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  0027a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0027e	f3 0f 2a 4d 9c	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  00283	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00287	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0028c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00290	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00294	f3 0f 11 45 d4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1902 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00299	f3 0f 2a 45 98	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  0029e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002a2	f3 0f 2a 4d 94	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  002a7	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002ab	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002b0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b8	f3 0f 11 45 d0	 movss	 DWORD PTR _red$[ebp], xmm0

; 1903 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  002bd	f3 0f 2a 45 90	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  002c2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002c6	f3 0f 2a 4d 8c	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  002cb	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002cf	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002d4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002dc	f3 0f 11 45 cc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1904 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  002e1	f3 0f 2a 45 88	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  002e6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ea	f3 0f 2a 4d 84	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  002ef	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002f3	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002f8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00300	f3 0f 11 45 c8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1905 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  00305	f3 0f 2a 45 80	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  0030a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0030e	f3 0f 2a 8d 7c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  00316	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0031a	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0031f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00323	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00327	f3 0f 11 45 c4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1906 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0032c	f3 0f 2a 85 78
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00334	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00338	f3 0f 2a 8d 74
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  00340	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00344	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00349	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0034d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00351	f3 0f 11 45 c0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1907 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  00356	f3 0f 2a 85 70
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  0035e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00362	f3 0f 2a 8d 6c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  0036a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0036e	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00373	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00377	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0037b	f3 0f 11 45 bc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1908 : 
; 1909 : 	fog += FLOAT_FLOAT_FACTOR;

  00380	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  00385	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0038d	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1910 : 	specular += FLOAT_FLOAT_FACTOR;

  00392	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _specular$[ebp]
  00397	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0039f	f3 0f 11 45 dc	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1911 : 	alpha += FLOAT_FLOAT_FACTOR;

  003a4	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  003a9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003b1	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1912 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  003b6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  003bb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003c3	f3 0f 11 45 d4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1913 : 	red += FLOAT_FLOAT_FACTOR;

  003c8	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _red$[ebp]
  003cd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003d5	f3 0f 11 45 d0	 movss	 DWORD PTR _red$[ebp], xmm0

; 1914 : 	red2 += FLOAT_FLOAT_FACTOR;

  003da	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _red2$[ebp]
  003df	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003e7	f3 0f 11 45 cc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1915 : 	green += FLOAT_FLOAT_FACTOR;

  003ec	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _green$[ebp]
  003f1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003f9	f3 0f 11 45 c8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1916 : 	green2 += FLOAT_FLOAT_FACTOR;

  003fe	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _green2$[ebp]
  00403	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0040b	f3 0f 11 45 c4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1917 : 	blue += FLOAT_FLOAT_FACTOR;

  00410	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00415	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0041d	f3 0f 11 45 c0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1918 : 	blue2 += FLOAT_FLOAT_FACTOR;

  00422	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  00427	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0042f	f3 0f 11 45 bc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1919 : 
; 1920 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  00434	8b 45 e0	 mov	 eax, DWORD PTR _fog$[ebp]
  00437	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0043c	89 45 b8	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1921 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  0043f	8b 45 dc	 mov	 eax, DWORD PTR _specular$[ebp]
  00442	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00447	89 45 b0	 mov	 DWORD PTR _int_specular$[ebp], eax

; 1922 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  0044a	8b 45 d8	 mov	 eax, DWORD PTR _alpha$[ebp]
  0044d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00452	89 45 a8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1923 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  00455	8b 45 d4	 mov	 eax, DWORD PTR _alpha2$[ebp]
  00458	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0045d	89 45 a0	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 1924 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  00460	8b 45 d0	 mov	 eax, DWORD PTR _red$[ebp]
  00463	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00468	89 45 98	 mov	 DWORD PTR _int_red$[ebp], eax

; 1925 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  0046b	8b 45 cc	 mov	 eax, DWORD PTR _red2$[ebp]
  0046e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00473	89 45 90	 mov	 DWORD PTR _int_red2$[ebp], eax

; 1926 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00476	8b 45 c8	 mov	 eax, DWORD PTR _green$[ebp]
  00479	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0047e	89 45 88	 mov	 DWORD PTR _int_green$[ebp], eax

; 1927 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  00481	8b 45 c4	 mov	 eax, DWORD PTR _green2$[ebp]
  00484	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00489	89 45 80	 mov	 DWORD PTR _int_green2$[ebp], eax

; 1928 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0048c	8b 45 c0	 mov	 eax, DWORD PTR _blue$[ebp]
  0048f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00494	89 85 78 ff ff
	ff		 mov	 DWORD PTR _int_blue$[ebp], eax

; 1929 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  0049a	8b 45 bc	 mov	 eax, DWORD PTR _blue2$[ebp]
  0049d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  004a2	89 85 70 ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], eax

; 1930 : 
; 1931 : 	clip_3d_crds[clip_3d_coord].fog = int_fog;

  004a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004ad	c1 e0 06	 shl	 eax, 6
  004b0	8a 4d b8	 mov	 cl, BYTE PTR _int_fog$[ebp]
  004b3	88 88 2e 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+46], cl

; 1932 : 	clip_3d_crds[clip_3d_coord].specular = int_specular;

  004b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004be	c1 e0 06	 shl	 eax, 6
  004c1	8a 4d b0	 mov	 cl, BYTE PTR _int_specular$[ebp]
  004c4	88 88 2d 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+45], cl

; 1933 : 	clip_3d_crds[clip_3d_coord].alpha = int_alpha;

  004ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004cf	c1 e0 06	 shl	 eax, 6
  004d2	8a 4d a8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  004d5	88 88 33 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+51], cl

; 1934 : 	clip_3d_crds[clip_3d_coord].alpha2 = int_alpha2;

  004db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004e0	c1 e0 06	 shl	 eax, 6
  004e3	8a 4d a0	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  004e6	88 88 37 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+55], cl

; 1935 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  004ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004f1	c1 e0 06	 shl	 eax, 6
  004f4	8a 4d 98	 mov	 cl, BYTE PTR _int_red$[ebp]
  004f7	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 1936 : 	clip_3d_crds[clip_3d_coord].red2 = int_red2;

  004fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00502	c1 e0 06	 shl	 eax, 6
  00505	8a 4d 90	 mov	 cl, BYTE PTR _int_red2$[ebp]
  00508	88 88 36 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+54], cl

; 1937 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  0050e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00513	c1 e0 06	 shl	 eax, 6
  00516	8a 4d 88	 mov	 cl, BYTE PTR _int_green$[ebp]
  00519	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 1938 : 	clip_3d_crds[clip_3d_coord].green2 = int_green2;

  0051f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00524	c1 e0 06	 shl	 eax, 6
  00527	8a 4d 80	 mov	 cl, BYTE PTR _int_green2$[ebp]
  0052a	88 88 35 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+53], cl

; 1939 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  00530	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00535	c1 e0 06	 shl	 eax, 6
  00538	8a 8d 78 ff ff
	ff		 mov	 cl, BYTE PTR _int_blue$[ebp]
  0053e	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 1940 : 	clip_3d_crds[clip_3d_coord].blue2 = int_blue2;

  00544	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00549	c1 e0 06	 shl	 eax, 6
  0054c	8a 8d 70 ff ff
	ff		 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00552	88 88 34 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+52], cl

; 1941 : 
; 1942 : 	clip_3d_crds[clip_3d_coord].i = active_viewport.x_max;

  00558	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0055d	c1 e0 06	 shl	 eax, 6
  00560	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00568	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 1943 : 	clip_3d_crds[clip_3d_coord].j = point2->j + ( t * ( point2->j - point1->j ) );

  00570	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00573	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  00578	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0057b	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0057e	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  00583	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  00588	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0058c	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00591	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00595	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00599	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0059e	c1 e0 06	 shl	 eax, 6
  005a1	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 1944 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  005a9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  005ac	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  005b1	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  005b4	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  005b7	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  005bc	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  005c1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005c5	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  005ca	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005ce	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  005d7	c1 e0 06	 shl	 eax, 6
  005da	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 1945 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  005e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  005e7	c1 e0 06	 shl	 eax, 6
  005ea	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  005f2	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  005fa	f2 0f 5e c8	 divsd	 xmm1, xmm0
  005fe	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00602	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00608	c1 e1 06	 shl	 ecx, 6
  0060b	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 1946 : 
; 1947 : 	clip_3d_crds[clip_3d_coord].u = point2->u + ( t * ( point2->u - point1->u ) );

  00613	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00616	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0061b	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0061e	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00621	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00626	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0062b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0062f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00634	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00638	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0063c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00641	c1 e0 06	 shl	 eax, 6
  00644	f3 0f 11 80 18
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+24], xmm0

; 1948 : 	clip_3d_crds[clip_3d_coord].v = point2->v + ( t * ( point2->v - point1->v ) );

  0064c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0064f	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00654	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00657	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0065a	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0065f	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00664	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00668	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0066d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00671	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00675	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0067a	c1 e0 06	 shl	 eax, 6
  0067d	f3 0f 11 80 1c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+28], xmm0

; 1949 : 	clip_3d_crds[clip_3d_coord].u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  00685	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00688	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  0068d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00690	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00693	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00698	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  0069d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  006a1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  006a6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  006b3	c1 e0 06	 shl	 eax, 6
  006b6	f3 0f 11 80 20
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+32], xmm0

; 1950 : 	clip_3d_crds[clip_3d_coord].v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  006be	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  006c1	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  006c6	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  006c9	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  006cc	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  006d1	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  006d6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  006da	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  006df	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  006ec	c1 e0 06	 shl	 eax, 6
  006ef	f3 0f 11 80 24
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+36], xmm0

; 1951 : 
; 1952 : 	if ( ! clip_point )

  006f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  006fe	75 1e		 jne	 SHORT $LN5@insert_xma

; 1953 : 	{
; 1954 : 
; 1955 : 		clip_list = & clip_3d_crds[clip_3d_coord];

  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00705	c1 e0 06	 shl	 eax, 6
  00708	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  0070d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 1956 : 
; 1957 : 		clip_point = clip_list;

  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00717	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 1958 : 	}
; 1959 : 	else

  0071c	eb 24		 jmp	 SHORT $LN6@insert_xma
$LN5@insert_xma:

; 1960 : 	{
; 1961 : 
; 1962 : 		clip_point->next_vertex = & clip_3d_crds[clip_3d_coord];

  0071e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00723	c1 e0 06	 shl	 eax, 6
  00726	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  0072b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00731	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 1963 : 
; 1964 : 		clip_point = clip_point->next_vertex;

  00734	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00739	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0073c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_xma:

; 1965 : 	}
; 1966 : 
; 1967 : 	clip_3d_coord ++;

  00742	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00747	83 c0 01	 add	 eax, 1
  0074a	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 1968 : 
; 1969 : #if REPORT_CLIP_STATISTICS
; 1970 : 
; 1971 : 	number_of_xmax_coordinates_inserted++;
; 1972 : 
; 1973 : #endif
; 1974 : }

  0074f	5f		 pop	 edi
  00750	5e		 pop	 esi
  00751	5b		 pop	 ebx
  00752	8b e5		 mov	 esp, ebp
  00754	5d		 pop	 ebp
  00755	c2 08 00	 ret	 8
?insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ENDP ; insert_xmax_dual_texture_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv468 = -236						; size = 8
tv599 = -228						; size = 8
tv462 = -220						; size = 8
_int_dblue2$ = -148					; size = 4
_int_blue2$ = -144					; size = 4
_int_dblue$ = -140					; size = 4
_int_blue$ = -136					; size = 4
_int_dgreen2$ = -132					; size = 4
_int_green2$ = -128					; size = 4
_int_dgreen$ = -124					; size = 4
_int_green$ = -120					; size = 4
_int_dred2$ = -116					; size = 4
_int_red2$ = -112					; size = 4
_int_dred$ = -108					; size = 4
_int_red$ = -104					; size = 4
_int_dspecular$ = -100					; size = 4
_int_specular$ = -96					; size = 4
_int_dfog$ = -92					; size = 4
_int_fog$ = -88						; size = 4
_int_dalpha2$ = -84					; size = 4
_int_alpha2$ = -80					; size = 4
_int_dalpha$ = -76					; size = 4
_int_alpha$ = -72					; size = 4
_blue2$ = -68						; size = 4
_blue$ = -64						; size = 4
_green2$ = -60						; size = 4
_green$ = -56						; size = 4
_red2$ = -52						; size = 4
_red$ = -48						; size = 4
_alpha2$ = -44						; size = 4
_alpha$ = -40						; size = 4
_specular$ = -36					; size = 4
_fog$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z PROC ; insert_xmin_dual_texture_coordinate, COMDAT

; 1619 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1620 : 
; 1621 : 	vertex
; 1622 : 		*tmp;
; 1623 : 
; 1624 : 	double
; 1625 : 		t,
; 1626 : 		numerator,
; 1627 : 		denominator;
; 1628 : 
; 1629 : 	float
; 1630 : 		fog,
; 1631 : 		specular,
; 1632 : 		alpha,
; 1633 : 		alpha2,
; 1634 : 		red,
; 1635 : 		red2,
; 1636 : 		green,
; 1637 : 		green2,
; 1638 : 		blue,
; 1639 : 		blue2;
; 1640 : 
; 1641 : 	int
; 1642 : 		int_alpha,
; 1643 : 		int_dalpha,
; 1644 : 		int_alpha2,
; 1645 : 		int_dalpha2,
; 1646 : 		int_fog,
; 1647 : 		int_dfog,
; 1648 : 		int_specular,
; 1649 : 		int_dspecular,
; 1650 : 		int_red,
; 1651 : 		int_dred,
; 1652 : 		int_red2,
; 1653 : 		int_dred2,
; 1654 : 		int_green,
; 1655 : 		int_dgreen,
; 1656 : 		int_green2,
; 1657 : 		int_dgreen2,
; 1658 : 		int_blue,
; 1659 : 		int_dblue,
; 1660 : 		int_blue2,
; 1661 : 		int_dblue2;
; 1662 : 
; 1663 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_xmi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 2c	 add	 eax, 44			; 0000002cH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_xmi:

; 1664 : 
; 1665 : 	if ( point1->j > point2->j )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00038	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  0003c	76 12		 jbe	 SHORT $LN3@insert_xmi

; 1666 : 	{
; 1667 : 
; 1668 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 1669 : 
; 1670 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 1671 : 
; 1672 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_xmi:

; 1673 : 	}
; 1674 : 
; 1675 : 	numerator = active_viewport.x_min - point2->i;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0005b	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 1676 : 
; 1677 : 	denominator = point2->i - point1->i;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00074	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 1678 : 
; 1679 : #ifdef DEBUG
; 1680 : 
; 1681 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 24 ff ff
	ff		 fstp	 QWORD PTR tv462[ebp]
  0009d	f2 0f 10 85 24
	ff ff ff	 movsd	 xmm0, QWORD PTR tv462[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 1c
	ff ff ff	 movsd	 QWORD PTR tv599[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 14 ff ff
	ff		 fstp	 QWORD PTR tv468[ebp]
  000c8	f2 0f 10 85 14
	ff ff ff	 movsd	 xmm0, QWORD PTR tv468[ebp]
  000d0	f2 0f 10 8d 1c
	ff ff ff	 movsd	 xmm1, QWORD PTR tv599[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_xmi

; 1682 : 	{
; 1683 : 
; 1684 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_xmi:

; 1685 : 	}
; 1686 : 
; 1687 : #endif
; 1688 : 
; 1689 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1690 : 
; 1691 : 	int_fog = point2->fog;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00101	89 4d a8	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1692 : 	int_dfog = int_fog - ( int ) point1->fog;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  0010b	8b 55 a8	 mov	 edx, DWORD PTR _int_fog$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 a4	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1693 : 
; 1694 : 	int_specular = point2->specular;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  0011a	89 4d a0	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 1695 : 	int_dspecular = int_specular - ( int ) point1->specular;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  00124	8b 55 a0	 mov	 edx, DWORD PTR _int_specular$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 9c	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 1696 : 
; 1697 : 	int_alpha = point2->alpha;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00133	89 4d b8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1698 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  0013d	8b 55 b8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 b4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1699 : 	int_alpha2 = point2->alpha2;

  00145	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00148	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  0014c	89 4d b0	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 1700 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  0014f	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00152	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  00156	8b 55 b0	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  00159	2b d1		 sub	 edx, ecx
  0015b	89 55 ac	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 1701 : 
; 1702 : 	int_red = point2->red;

  0015e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00161	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00165	89 4d 98	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1703 : 	int_dred = int_red - ( int ) point1->red;

  00168	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0016b	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0016f	8b 55 98	 mov	 edx, DWORD PTR _int_red$[ebp]
  00172	2b d1		 sub	 edx, ecx
  00174	89 55 94	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1704 : 	int_red2 = point2->red2;

  00177	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0017a	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  0017e	89 4d 90	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 1705 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  00181	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00184	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  00188	8b 55 90	 mov	 edx, DWORD PTR _int_red2$[ebp]
  0018b	2b d1		 sub	 edx, ecx
  0018d	89 55 8c	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 1706 : 
; 1707 : 	int_green = point2->green;

  00190	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00193	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00197	89 4d 88	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1708 : 	int_dgreen = int_green - ( int ) point1->green;

  0019a	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0019d	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  001a1	8b 55 88	 mov	 edx, DWORD PTR _int_green$[ebp]
  001a4	2b d1		 sub	 edx, ecx
  001a6	89 55 84	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1709 : 	int_green2 = point2->green2;

  001a9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001ac	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  001b0	89 4d 80	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 1710 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  001b3	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001b6	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  001ba	8b 55 80	 mov	 edx, DWORD PTR _int_green2$[ebp]
  001bd	2b d1		 sub	 edx, ecx
  001bf	89 95 7c ff ff
	ff		 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 1711 : 
; 1712 : 	int_blue = point2->blue;

  001c5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001c8	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001cc	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1713 : 	int_dblue = int_blue - ( int ) point1->blue;

  001d2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001d5	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001d9	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _int_blue$[ebp]
  001df	2b d1		 sub	 edx, ecx
  001e1	89 95 74 ff ff
	ff		 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1714 : 	int_blue2 = point2->blue2;

  001e7	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001ea	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001ee	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 1715 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  001f4	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001f7	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001fb	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _int_blue2$[ebp]
  00201	2b d1		 sub	 edx, ecx
  00203	89 95 6c ff ff
	ff		 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 1716 : 
; 1717 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  00209	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  0020e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00212	f3 0f 2a 4d a4	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  00217	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0021b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00220	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00224	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00228	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1718 : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  0022d	f3 0f 2a 45 a0	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  00232	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00236	f3 0f 2a 4d 9c	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  0023b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0023f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00244	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00248	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024c	f3 0f 11 45 dc	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1719 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00251	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  00256	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0025a	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  0025f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00263	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00268	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0026c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00270	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1720 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  00275	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  0027a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0027e	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  00283	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00287	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0028c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00290	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00294	f3 0f 11 45 d4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1721 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00299	f3 0f 2a 45 98	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  0029e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002a2	f3 0f 2a 4d 94	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  002a7	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002ab	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002b0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b8	f3 0f 11 45 d0	 movss	 DWORD PTR _red$[ebp], xmm0

; 1722 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  002bd	f3 0f 2a 45 90	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  002c2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002c6	f3 0f 2a 4d 8c	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  002cb	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002cf	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002d4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002dc	f3 0f 11 45 cc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1723 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  002e1	f3 0f 2a 45 88	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  002e6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ea	f3 0f 2a 4d 84	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  002ef	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002f3	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002f8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00300	f3 0f 11 45 c8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1724 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  00305	f3 0f 2a 45 80	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  0030a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0030e	f3 0f 2a 8d 7c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  00316	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0031a	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0031f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00323	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00327	f3 0f 11 45 c4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1725 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0032c	f3 0f 2a 85 78
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00334	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00338	f3 0f 2a 8d 74
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  00340	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00344	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00349	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0034d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00351	f3 0f 11 45 c0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1726 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  00356	f3 0f 2a 85 70
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  0035e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00362	f3 0f 2a 8d 6c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  0036a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0036e	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00373	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00377	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0037b	f3 0f 11 45 bc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1727 : 
; 1728 : 	fog += FLOAT_FLOAT_FACTOR;

  00380	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  00385	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0038d	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1729 : 	specular += FLOAT_FLOAT_FACTOR;

  00392	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _specular$[ebp]
  00397	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0039f	f3 0f 11 45 dc	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1730 : 	alpha += FLOAT_FLOAT_FACTOR;

  003a4	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  003a9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003b1	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1731 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  003b6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  003bb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003c3	f3 0f 11 45 d4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1732 : 	red += FLOAT_FLOAT_FACTOR;

  003c8	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _red$[ebp]
  003cd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003d5	f3 0f 11 45 d0	 movss	 DWORD PTR _red$[ebp], xmm0

; 1733 : 	red2 += FLOAT_FLOAT_FACTOR;

  003da	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _red2$[ebp]
  003df	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003e7	f3 0f 11 45 cc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1734 : 	green += FLOAT_FLOAT_FACTOR;

  003ec	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _green$[ebp]
  003f1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003f9	f3 0f 11 45 c8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1735 : 	green2 += FLOAT_FLOAT_FACTOR;

  003fe	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _green2$[ebp]
  00403	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0040b	f3 0f 11 45 c4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1736 : 	blue += FLOAT_FLOAT_FACTOR;

  00410	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00415	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0041d	f3 0f 11 45 c0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1737 : 	blue2 += FLOAT_FLOAT_FACTOR;

  00422	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  00427	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0042f	f3 0f 11 45 bc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1738 : 
; 1739 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  00434	8b 45 e0	 mov	 eax, DWORD PTR _fog$[ebp]
  00437	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0043c	89 45 a8	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1740 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  0043f	8b 45 dc	 mov	 eax, DWORD PTR _specular$[ebp]
  00442	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00447	89 45 a0	 mov	 DWORD PTR _int_specular$[ebp], eax

; 1741 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  0044a	8b 45 d8	 mov	 eax, DWORD PTR _alpha$[ebp]
  0044d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00452	89 45 b8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1742 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  00455	8b 45 d4	 mov	 eax, DWORD PTR _alpha2$[ebp]
  00458	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0045d	89 45 b0	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 1743 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  00460	8b 45 d0	 mov	 eax, DWORD PTR _red$[ebp]
  00463	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00468	89 45 98	 mov	 DWORD PTR _int_red$[ebp], eax

; 1744 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  0046b	8b 45 cc	 mov	 eax, DWORD PTR _red2$[ebp]
  0046e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00473	89 45 90	 mov	 DWORD PTR _int_red2$[ebp], eax

; 1745 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00476	8b 45 c8	 mov	 eax, DWORD PTR _green$[ebp]
  00479	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0047e	89 45 88	 mov	 DWORD PTR _int_green$[ebp], eax

; 1746 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  00481	8b 45 c4	 mov	 eax, DWORD PTR _green2$[ebp]
  00484	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00489	89 45 80	 mov	 DWORD PTR _int_green2$[ebp], eax

; 1747 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0048c	8b 45 c0	 mov	 eax, DWORD PTR _blue$[ebp]
  0048f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00494	89 85 78 ff ff
	ff		 mov	 DWORD PTR _int_blue$[ebp], eax

; 1748 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  0049a	8b 45 bc	 mov	 eax, DWORD PTR _blue2$[ebp]
  0049d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  004a2	89 85 70 ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], eax

; 1749 : 
; 1750 : 	clip_3d_crds[clip_3d_coord].fog = int_fog;

  004a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004ad	c1 e0 06	 shl	 eax, 6
  004b0	8a 4d a8	 mov	 cl, BYTE PTR _int_fog$[ebp]
  004b3	88 88 2e 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+46], cl

; 1751 : 	clip_3d_crds[clip_3d_coord].specular = int_specular;

  004b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004be	c1 e0 06	 shl	 eax, 6
  004c1	8a 4d a0	 mov	 cl, BYTE PTR _int_specular$[ebp]
  004c4	88 88 2d 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+45], cl

; 1752 : 	clip_3d_crds[clip_3d_coord].alpha = int_alpha;

  004ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004cf	c1 e0 06	 shl	 eax, 6
  004d2	8a 4d b8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  004d5	88 88 33 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+51], cl

; 1753 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  004db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004e0	c1 e0 06	 shl	 eax, 6
  004e3	8a 4d 98	 mov	 cl, BYTE PTR _int_red$[ebp]
  004e6	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 1754 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  004ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004f1	c1 e0 06	 shl	 eax, 6
  004f4	8a 4d 88	 mov	 cl, BYTE PTR _int_green$[ebp]
  004f7	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 1755 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  004fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00502	c1 e0 06	 shl	 eax, 6
  00505	8a 8d 78 ff ff
	ff		 mov	 cl, BYTE PTR _int_blue$[ebp]
  0050b	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 1756 : 	clip_3d_crds[clip_3d_coord].alpha2 = int_alpha2;

  00511	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00516	c1 e0 06	 shl	 eax, 6
  00519	8a 4d b0	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  0051c	88 88 37 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+55], cl

; 1757 : 	clip_3d_crds[clip_3d_coord].red2 = int_red2;

  00522	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00527	c1 e0 06	 shl	 eax, 6
  0052a	8a 4d 90	 mov	 cl, BYTE PTR _int_red2$[ebp]
  0052d	88 88 36 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+54], cl

; 1758 : 	clip_3d_crds[clip_3d_coord].green2 = int_green2;

  00533	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00538	c1 e0 06	 shl	 eax, 6
  0053b	8a 4d 80	 mov	 cl, BYTE PTR _int_green2$[ebp]
  0053e	88 88 35 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+53], cl

; 1759 : 	clip_3d_crds[clip_3d_coord].blue2 = int_blue2;

  00544	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00549	c1 e0 06	 shl	 eax, 6
  0054c	8a 8d 70 ff ff
	ff		 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00552	88 88 34 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+52], cl

; 1760 : 
; 1761 : 	clip_3d_crds[clip_3d_coord].i = active_viewport.x_min;

  00558	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0055d	c1 e0 06	 shl	 eax, 6
  00560	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00568	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 1762 : 	clip_3d_crds[clip_3d_coord].j = point2->j + ( t * ( point2->j - point1->j ) );

  00570	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00573	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  00578	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0057b	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0057e	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  00583	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  00588	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0058c	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00591	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00595	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00599	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0059e	c1 e0 06	 shl	 eax, 6
  005a1	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 1763 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  005a9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  005ac	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  005b1	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  005b4	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  005b7	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  005bc	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  005c1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005c5	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  005ca	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005ce	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  005d7	c1 e0 06	 shl	 eax, 6
  005da	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 1764 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  005e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  005e7	c1 e0 06	 shl	 eax, 6
  005ea	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  005f2	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  005fa	f2 0f 5e c8	 divsd	 xmm1, xmm0
  005fe	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00602	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00608	c1 e1 06	 shl	 ecx, 6
  0060b	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 1765 : 
; 1766 : 	clip_3d_crds[clip_3d_coord].u = point2->u + ( t * ( point2->u - point1->u ) );

  00613	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00616	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0061b	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0061e	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00621	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00626	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0062b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0062f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00634	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00638	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0063c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00641	c1 e0 06	 shl	 eax, 6
  00644	f3 0f 11 80 18
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+24], xmm0

; 1767 : 	clip_3d_crds[clip_3d_coord].v = point2->v + ( t * ( point2->v - point1->v ) );

  0064c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0064f	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00654	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00657	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0065a	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0065f	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00664	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00668	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0066d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00671	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00675	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0067a	c1 e0 06	 shl	 eax, 6
  0067d	f3 0f 11 80 1c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+28], xmm0

; 1768 : 	clip_3d_crds[clip_3d_coord].u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  00685	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00688	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  0068d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00690	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00693	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00698	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  0069d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  006a1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  006a6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  006b3	c1 e0 06	 shl	 eax, 6
  006b6	f3 0f 11 80 20
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+32], xmm0

; 1769 : 	clip_3d_crds[clip_3d_coord].v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  006be	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  006c1	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  006c6	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  006c9	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  006cc	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  006d1	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  006d6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  006da	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  006df	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  006ec	c1 e0 06	 shl	 eax, 6
  006ef	f3 0f 11 80 24
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+36], xmm0

; 1770 : 
; 1771 : 	if ( !clip_point )

  006f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  006fe	75 1e		 jne	 SHORT $LN5@insert_xmi

; 1772 : 	{
; 1773 : 
; 1774 : 		clip_list = & clip_3d_crds[clip_3d_coord];

  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00705	c1 e0 06	 shl	 eax, 6
  00708	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  0070d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 1775 : 
; 1776 : 		clip_point = clip_list;

  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00717	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 1777 : 	}
; 1778 : 	else

  0071c	eb 24		 jmp	 SHORT $LN6@insert_xmi
$LN5@insert_xmi:

; 1779 : 	{
; 1780 : 
; 1781 : 		clip_point->next_vertex = & clip_3d_crds[clip_3d_coord];

  0071e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00723	c1 e0 06	 shl	 eax, 6
  00726	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  0072b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00731	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 1782 : 
; 1783 : 		clip_point = clip_point->next_vertex;

  00734	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00739	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0073c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_xmi:

; 1784 : 	}
; 1785 : 
; 1786 : 	clip_3d_coord ++;

  00742	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00747	83 c0 01	 add	 eax, 1
  0074a	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 1787 : 
; 1788 : #if REPORT_CLIP_STATISTICS
; 1789 : 
; 1790 : 	number_of_xmin_coordinates_inserted++;
; 1791 : 
; 1792 : #endif
; 1793 : }

  0074f	5f		 pop	 edi
  00750	5e		 pop	 esi
  00751	5b		 pop	 ebx
  00752	8b e5		 mov	 esp, ebp
  00754	5d		 pop	 ebp
  00755	c2 08 00	 ret	 8
?insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ENDP ; insert_xmin_dual_texture_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv344 = -188						; size = 8
tv431 = -180						; size = 8
tv338 = -172						; size = 8
_int_dblue$ = -100					; size = 4
_int_blue$ = -96					; size = 4
_int_dgreen$ = -92					; size = 4
_int_green$ = -88					; size = 4
_int_dred$ = -84					; size = 4
_int_red$ = -80						; size = 4
_int_dspecular$ = -76					; size = 4
_int_specular$ = -72					; size = 4
_int_dfog$ = -68					; size = 4
_int_fog$ = -64						; size = 4
_int_dalpha$ = -60					; size = 4
_int_alpha$ = -56					; size = 4
_blue$ = -52						; size = 4
_green$ = -48						; size = 4
_red$ = -44						; size = 4
_specular$ = -40					; size = 4
_fog$ = -36						; size = 4
_alpha$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z PROC		; insert_ymax_coordinate, COMDAT

; 1476 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1477 : 
; 1478 : 	vertex
; 1479 : 		*tmp;
; 1480 : 
; 1481 : 	double
; 1482 : 		t,
; 1483 : 		numerator,
; 1484 : 		denominator;
; 1485 : 
; 1486 : 	float
; 1487 : 		alpha,
; 1488 : 		fog,
; 1489 : 		specular,
; 1490 : 		red,
; 1491 : 		green,
; 1492 : 		blue;
; 1493 : 
; 1494 : 	int
; 1495 : 		int_alpha,
; 1496 : 		int_dalpha,
; 1497 : 		int_fog,
; 1498 : 		int_dfog,
; 1499 : 		int_specular,
; 1500 : 		int_dspecular,
; 1501 : 		int_red,
; 1502 : 		int_dred,
; 1503 : 		int_green,
; 1504 : 		int_dgreen,
; 1505 : 		int_blue,
; 1506 : 		int_dblue;
; 1507 : 
; 1508 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_yma
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 20	 add	 eax, 32			; 00000020H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_yma:

; 1509 : 
; 1510 : 	if ( point1->i > point2->i )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00038	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  0003c	76 12		 jbe	 SHORT $LN3@insert_yma

; 1511 : 	{
; 1512 : 
; 1513 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 1514 : 
; 1515 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 1516 : 
; 1517 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_yma:

; 1518 : 	}
; 1519 : 
; 1520 : 	numerator = active_viewport.y_max - point2->j;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  0005b	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 1521 : 
; 1522 : 	denominator = point2->j - point1->j;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00074	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 1523 : 
; 1524 : #ifdef DEBUG
; 1525 : 
; 1526 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv338[ebp]
  0009d	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv338[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv431[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv344[ebp]
  000c8	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv344[ebp]
  000d0	f2 0f 10 8d 4c
	ff ff ff	 movsd	 xmm1, QWORD PTR tv431[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_yma

; 1527 : 	{
; 1528 : 
; 1529 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_yma:

; 1530 : 	}
; 1531 : 
; 1532 : #endif
; 1533 : 
; 1534 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1535 : 
; 1536 : 	int_alpha = point2->alpha;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00101	89 4d c8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1537 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  0010b	8b 55 c8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 c4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1538 : 
; 1539 : 	int_fog = point2->fog;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  0011a	89 4d c0	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1540 : 	int_dfog = int_fog - ( int ) point1->fog;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00124	8b 55 c0	 mov	 edx, DWORD PTR _int_fog$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 bc	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1541 : 
; 1542 : 	int_specular = point2->specular;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  00133	89 4d b8	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 1543 : 	int_dspecular = int_specular - ( int ) point1->specular;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  0013d	8b 55 b8	 mov	 edx, DWORD PTR _int_specular$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 b4	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 1544 : 
; 1545 : 	int_red = point2->red;

  00145	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00148	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0014c	89 4d b0	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1546 : 	int_dred = int_red - ( int ) point1->red;

  0014f	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00152	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00156	8b 55 b0	 mov	 edx, DWORD PTR _int_red$[ebp]
  00159	2b d1		 sub	 edx, ecx
  0015b	89 55 ac	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1547 : 
; 1548 : 	int_green = point2->green;

  0015e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00161	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00165	89 4d a8	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1549 : 	int_dgreen = int_green - ( int ) point1->green;

  00168	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0016b	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0016f	8b 55 a8	 mov	 edx, DWORD PTR _int_green$[ebp]
  00172	2b d1		 sub	 edx, ecx
  00174	89 55 a4	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1550 : 
; 1551 : 	int_blue = point2->blue;

  00177	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0017a	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0017e	89 4d a0	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1552 : 	int_dblue = int_blue - ( int ) point1->blue;

  00181	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00184	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00188	8b 55 a0	 mov	 edx, DWORD PTR _int_blue$[ebp]
  0018b	2b d1		 sub	 edx, ecx
  0018d	89 55 9c	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1553 : 
; 1554 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00190	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  00195	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00199	f3 0f 2a 4d c4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  0019e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001a2	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001af	f3 0f 11 45 e0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1555 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001b4	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001b9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001bd	f3 0f 2a 4d bc	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001c2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001c6	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001cb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d3	f3 0f 11 45 dc	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1556 : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  001d8	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  001dd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e1	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  001e6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001ea	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001ef	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001f3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f7	f3 0f 11 45 d8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1557 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  001fc	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  00201	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00205	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  0020a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0020e	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00213	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00217	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0021b	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1558 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00220	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  00225	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00229	f3 0f 2a 4d a4	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  0022e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00232	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00237	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0023b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023f	f3 0f 11 45 d0	 movss	 DWORD PTR _green$[ebp], xmm0

; 1559 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  00244	f3 0f 2a 45 a0	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00249	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0024d	f3 0f 2a 4d 9c	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  00252	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00256	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0025b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00263	f3 0f 11 45 cc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1560 : 
; 1561 : 	alpha += FLOAT_FLOAT_FACTOR;

  00268	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  0026d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00275	f3 0f 11 45 e0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1562 : 	fog += FLOAT_FLOAT_FACTOR;

  0027a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _fog$[ebp]
  0027f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00287	f3 0f 11 45 dc	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1563 : 	specular += FLOAT_FLOAT_FACTOR;

  0028c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _specular$[ebp]
  00291	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00299	f3 0f 11 45 d8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1564 : 	red += FLOAT_FLOAT_FACTOR;

  0029e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _red$[ebp]
  002a3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002ab	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1565 : 	green += FLOAT_FLOAT_FACTOR;

  002b0	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _green$[ebp]
  002b5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002bd	f3 0f 11 45 d0	 movss	 DWORD PTR _green$[ebp], xmm0

; 1566 : 	blue += FLOAT_FLOAT_FACTOR;

  002c2	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _blue$[ebp]
  002c7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002cf	f3 0f 11 45 cc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1567 : 
; 1568 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  002d4	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  002d7	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002dc	89 45 c8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1569 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  002df	8b 45 dc	 mov	 eax, DWORD PTR _fog$[ebp]
  002e2	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002e7	89 45 c0	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1570 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  002ea	8b 45 d8	 mov	 eax, DWORD PTR _specular$[ebp]
  002ed	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002f2	89 45 b8	 mov	 DWORD PTR _int_specular$[ebp], eax

; 1571 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  002f5	8b 45 d4	 mov	 eax, DWORD PTR _red$[ebp]
  002f8	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002fd	89 45 b0	 mov	 DWORD PTR _int_red$[ebp], eax

; 1572 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00300	8b 45 d0	 mov	 eax, DWORD PTR _green$[ebp]
  00303	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00308	89 45 a8	 mov	 DWORD PTR _int_green$[ebp], eax

; 1573 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0030b	8b 45 cc	 mov	 eax, DWORD PTR _blue$[ebp]
  0030e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00313	89 45 a0	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1574 : 
; 1575 : 	clip_3d_crds[clip_3d_coord].alpha = int_alpha;

  00316	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0031b	c1 e0 06	 shl	 eax, 6
  0031e	8a 4d c8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00321	88 88 33 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+51], cl

; 1576 : 	clip_3d_crds[clip_3d_coord].fog = int_fog;

  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0032c	c1 e0 06	 shl	 eax, 6
  0032f	8a 4d c0	 mov	 cl, BYTE PTR _int_fog$[ebp]
  00332	88 88 2e 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+46], cl

; 1577 : 	clip_3d_crds[clip_3d_coord].specular = int_specular;

  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0033d	c1 e0 06	 shl	 eax, 6
  00340	8a 4d b8	 mov	 cl, BYTE PTR _int_specular$[ebp]
  00343	88 88 2d 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+45], cl

; 1578 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  00349	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0034e	c1 e0 06	 shl	 eax, 6
  00351	8a 4d b0	 mov	 cl, BYTE PTR _int_red$[ebp]
  00354	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 1579 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0035f	c1 e0 06	 shl	 eax, 6
  00362	8a 4d a8	 mov	 cl, BYTE PTR _int_green$[ebp]
  00365	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 1580 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  0036b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00370	c1 e0 06	 shl	 eax, 6
  00373	8a 4d a0	 mov	 cl, BYTE PTR _int_blue$[ebp]
  00376	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 1581 : 
; 1582 : 	clip_3d_crds[clip_3d_coord].i = point2->i + ( t * ( point2->i - point1->i ) );

  0037c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0037f	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  00384	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00387	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0038a	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0038f	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00394	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00398	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0039d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  003aa	c1 e0 06	 shl	 eax, 6
  003ad	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 1583 : 	clip_3d_crds[clip_3d_coord].j = active_viewport.y_max;

  003b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  003ba	c1 e0 06	 shl	 eax, 6
  003bd	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  003c5	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 1584 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  003cd	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  003d0	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  003d5	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  003d8	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  003db	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  003e0	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  003e5	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  003e9	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  003ee	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  003fb	c1 e0 06	 shl	 eax, 6
  003fe	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 1585 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  00406	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0040b	c1 e0 06	 shl	 eax, 6
  0040e	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  00416	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0041e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00422	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00426	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0042c	c1 e1 06	 shl	 ecx, 6
  0042f	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 1586 : 
; 1587 : 	clip_3d_crds[clip_3d_coord].u = point2->u + ( t * ( point2->u - point1->u ) );

  00437	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0043a	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0043f	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00442	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00445	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0044a	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0044f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00453	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00458	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0045c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00460	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00465	c1 e0 06	 shl	 eax, 6
  00468	f3 0f 11 80 18
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+24], xmm0

; 1588 : 	clip_3d_crds[clip_3d_coord].v = point2->v + ( t * ( point2->v - point1->v ) );

  00470	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00473	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00478	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0047b	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0047e	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00483	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00488	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0048c	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00491	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00495	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00499	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0049e	c1 e0 06	 shl	 eax, 6
  004a1	f3 0f 11 80 1c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+28], xmm0

; 1589 : 
; 1590 : 	if ( ! clip_point )

  004a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  004b0	75 1e		 jne	 SHORT $LN5@insert_yma

; 1591 : 	{
; 1592 : 
; 1593 : 		clip_list = &clip_3d_crds[clip_3d_coord];

  004b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004b7	c1 e0 06	 shl	 eax, 6
  004ba	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  004bf	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 1594 : 
; 1595 : 		clip_point = clip_list;

  004c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  004c9	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 1596 : 	}
; 1597 : 	else

  004ce	eb 24		 jmp	 SHORT $LN6@insert_yma
$LN5@insert_yma:

; 1598 : 	{
; 1599 : 
; 1600 : 		clip_point->next_vertex	= &clip_3d_crds[clip_3d_coord];

  004d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004d5	c1 e0 06	 shl	 eax, 6
  004d8	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  004dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  004e3	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 1601 : 
; 1602 : 		clip_point = clip_point->next_vertex;

  004e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  004eb	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  004ee	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_yma:

; 1603 : 	}
; 1604 : 
; 1605 : 	clip_3d_coord ++;

  004f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004f9	83 c0 01	 add	 eax, 1
  004fc	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 1606 : 
; 1607 : #if REPORT_CLIP_STATISTICS
; 1608 : 
; 1609 : 	number_of_ymax_coordinates_inserted++;
; 1610 : 
; 1611 : #endif
; 1612 : }

  00501	5f		 pop	 edi
  00502	5e		 pop	 esi
  00503	5b		 pop	 ebx
  00504	8b e5		 mov	 esp, ebp
  00506	5d		 pop	 ebp
  00507	c2 08 00	 ret	 8
?insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z ENDP		; insert_ymax_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv344 = -188						; size = 8
tv431 = -180						; size = 8
tv338 = -172						; size = 8
_int_dblue$ = -100					; size = 4
_int_blue$ = -96					; size = 4
_int_dgreen$ = -92					; size = 4
_int_green$ = -88					; size = 4
_int_dred$ = -84					; size = 4
_int_red$ = -80						; size = 4
_int_dspecular$ = -76					; size = 4
_int_specular$ = -72					; size = 4
_int_dfog$ = -68					; size = 4
_int_fog$ = -64						; size = 4
_int_dalpha$ = -60					; size = 4
_int_alpha$ = -56					; size = 4
_blue$ = -52						; size = 4
_green$ = -48						; size = 4
_red$ = -44						; size = 4
_specular$ = -40					; size = 4
_fog$ = -36						; size = 4
_alpha$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z PROC		; insert_ymin_coordinate, COMDAT

; 1333 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1334 : 
; 1335 : 	vertex
; 1336 : 		*tmp;
; 1337 : 
; 1338 : 	double
; 1339 : 		t,
; 1340 : 		numerator,
; 1341 : 		denominator;
; 1342 : 
; 1343 : 	float
; 1344 : 		alpha,
; 1345 : 		fog,
; 1346 : 		specular,
; 1347 : 		red,
; 1348 : 		green,
; 1349 : 		blue;
; 1350 : 
; 1351 : 	int
; 1352 : 		int_alpha,
; 1353 : 		int_dalpha,
; 1354 : 		int_fog,
; 1355 : 		int_dfog,
; 1356 : 		int_specular,
; 1357 : 		int_dspecular,
; 1358 : 		int_red,
; 1359 : 		int_dred,
; 1360 : 		int_green,
; 1361 : 		int_dgreen,
; 1362 : 		int_blue,
; 1363 : 		int_dblue;
; 1364 : 
; 1365 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_ymi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 20	 add	 eax, 32			; 00000020H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_ymi:

; 1366 : 
; 1367 : 	if ( point1->i > point2->i )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00038	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  0003c	76 12		 jbe	 SHORT $LN3@insert_ymi

; 1368 : 	{
; 1369 : 
; 1370 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 1371 : 
; 1372 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 1373 : 
; 1374 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_ymi:

; 1375 : 	}
; 1376 : 
; 1377 : 	numerator = active_viewport.y_min - point2->j;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0005b	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 1378 : 
; 1379 : 	denominator = point2->j - point1->j;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00074	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 1380 : 
; 1381 : #ifdef DEBUG
; 1382 : 
; 1383 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv338[ebp]
  0009d	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv338[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv431[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv344[ebp]
  000c8	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv344[ebp]
  000d0	f2 0f 10 8d 4c
	ff ff ff	 movsd	 xmm1, QWORD PTR tv431[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_ymi

; 1384 : 	{
; 1385 : 
; 1386 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_ymi:

; 1387 : 	}
; 1388 : 
; 1389 : #endif
; 1390 : 
; 1391 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1392 : 
; 1393 : 	int_alpha = point2->alpha;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00101	89 4d c8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1394 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  0010b	8b 55 c8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 c4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1395 : 
; 1396 : 	int_fog = point2->fog;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  0011a	89 4d c0	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1397 : 	int_dfog = int_fog - ( int ) point1->fog;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00124	8b 55 c0	 mov	 edx, DWORD PTR _int_fog$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 bc	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1398 : 
; 1399 : 	int_specular = point2->specular;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  00133	89 4d b8	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 1400 : 	int_dspecular = int_specular - ( int ) point1->specular;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  0013d	8b 55 b8	 mov	 edx, DWORD PTR _int_specular$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 b4	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 1401 : 
; 1402 : 	int_red = point2->red;

  00145	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00148	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0014c	89 4d b0	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1403 : 	int_dred = int_red - ( int ) point1->red;

  0014f	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00152	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00156	8b 55 b0	 mov	 edx, DWORD PTR _int_red$[ebp]
  00159	2b d1		 sub	 edx, ecx
  0015b	89 55 ac	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1404 : 
; 1405 : 	int_green = point2->green;

  0015e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00161	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00165	89 4d a8	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1406 : 	int_dgreen = int_green - ( int ) point1->green;

  00168	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0016b	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0016f	8b 55 a8	 mov	 edx, DWORD PTR _int_green$[ebp]
  00172	2b d1		 sub	 edx, ecx
  00174	89 55 a4	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1407 : 
; 1408 : 	int_blue = point2->blue;

  00177	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0017a	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0017e	89 4d a0	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1409 : 	int_dblue = int_blue - ( int ) point1->blue;

  00181	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00184	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00188	8b 55 a0	 mov	 edx, DWORD PTR _int_blue$[ebp]
  0018b	2b d1		 sub	 edx, ecx
  0018d	89 55 9c	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1410 : 
; 1411 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00190	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  00195	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00199	f3 0f 2a 4d c4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  0019e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001a2	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001af	f3 0f 11 45 e0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1412 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001b4	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001b9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001bd	f3 0f 2a 4d bc	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001c2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001c6	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001cb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d3	f3 0f 11 45 dc	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1413 : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  001d8	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  001dd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e1	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  001e6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001ea	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001ef	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001f3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f7	f3 0f 11 45 d8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1414 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  001fc	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  00201	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00205	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  0020a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0020e	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00213	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00217	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0021b	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1415 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00220	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  00225	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00229	f3 0f 2a 4d a4	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  0022e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00232	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00237	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0023b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023f	f3 0f 11 45 d0	 movss	 DWORD PTR _green$[ebp], xmm0

; 1416 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  00244	f3 0f 2a 45 a0	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00249	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0024d	f3 0f 2a 4d 9c	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  00252	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00256	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0025b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00263	f3 0f 11 45 cc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1417 : 
; 1418 : 	alpha += FLOAT_FLOAT_FACTOR;

  00268	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  0026d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00275	f3 0f 11 45 e0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1419 : 	fog += FLOAT_FLOAT_FACTOR;

  0027a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _fog$[ebp]
  0027f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00287	f3 0f 11 45 dc	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1420 : 	specular += FLOAT_FLOAT_FACTOR;

  0028c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _specular$[ebp]
  00291	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00299	f3 0f 11 45 d8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1421 : 	red += FLOAT_FLOAT_FACTOR;

  0029e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _red$[ebp]
  002a3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002ab	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1422 : 	green += FLOAT_FLOAT_FACTOR;

  002b0	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _green$[ebp]
  002b5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002bd	f3 0f 11 45 d0	 movss	 DWORD PTR _green$[ebp], xmm0

; 1423 : 	blue += FLOAT_FLOAT_FACTOR;

  002c2	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _blue$[ebp]
  002c7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002cf	f3 0f 11 45 cc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1424 : 
; 1425 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  002d4	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  002d7	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002dc	89 45 c8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1426 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  002df	8b 45 dc	 mov	 eax, DWORD PTR _fog$[ebp]
  002e2	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002e7	89 45 c0	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1427 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  002ea	8b 45 d8	 mov	 eax, DWORD PTR _specular$[ebp]
  002ed	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002f2	89 45 b8	 mov	 DWORD PTR _int_specular$[ebp], eax

; 1428 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  002f5	8b 45 d4	 mov	 eax, DWORD PTR _red$[ebp]
  002f8	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002fd	89 45 b0	 mov	 DWORD PTR _int_red$[ebp], eax

; 1429 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00300	8b 45 d0	 mov	 eax, DWORD PTR _green$[ebp]
  00303	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00308	89 45 a8	 mov	 DWORD PTR _int_green$[ebp], eax

; 1430 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0030b	8b 45 cc	 mov	 eax, DWORD PTR _blue$[ebp]
  0030e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00313	89 45 a0	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1431 : 
; 1432 : 	clip_3d_crds[clip_3d_coord].alpha = int_alpha;

  00316	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0031b	c1 e0 06	 shl	 eax, 6
  0031e	8a 4d c8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00321	88 88 33 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+51], cl

; 1433 : 	clip_3d_crds[clip_3d_coord].fog = int_fog;

  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0032c	c1 e0 06	 shl	 eax, 6
  0032f	8a 4d c0	 mov	 cl, BYTE PTR _int_fog$[ebp]
  00332	88 88 2e 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+46], cl

; 1434 : 	clip_3d_crds[clip_3d_coord].specular = int_specular;

  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0033d	c1 e0 06	 shl	 eax, 6
  00340	8a 4d b8	 mov	 cl, BYTE PTR _int_specular$[ebp]
  00343	88 88 2d 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+45], cl

; 1435 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  00349	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0034e	c1 e0 06	 shl	 eax, 6
  00351	8a 4d b0	 mov	 cl, BYTE PTR _int_red$[ebp]
  00354	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 1436 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0035f	c1 e0 06	 shl	 eax, 6
  00362	8a 4d a8	 mov	 cl, BYTE PTR _int_green$[ebp]
  00365	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 1437 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  0036b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00370	c1 e0 06	 shl	 eax, 6
  00373	8a 4d a0	 mov	 cl, BYTE PTR _int_blue$[ebp]
  00376	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 1438 : 
; 1439 : 	clip_3d_crds[clip_3d_coord].i = point2->i + ( t * ( point2->i - point1->i ) );

  0037c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0037f	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  00384	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00387	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0038a	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0038f	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00394	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00398	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0039d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  003aa	c1 e0 06	 shl	 eax, 6
  003ad	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 1440 : 	clip_3d_crds[clip_3d_coord].j = active_viewport.y_min;

  003b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  003ba	c1 e0 06	 shl	 eax, 6
  003bd	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  003c5	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 1441 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  003cd	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  003d0	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  003d5	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  003d8	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  003db	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  003e0	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  003e5	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  003e9	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  003ee	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  003fb	c1 e0 06	 shl	 eax, 6
  003fe	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 1442 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  00406	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0040b	c1 e0 06	 shl	 eax, 6
  0040e	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  00416	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0041e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00422	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00426	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0042c	c1 e1 06	 shl	 ecx, 6
  0042f	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 1443 : 
; 1444 : 	clip_3d_crds[clip_3d_coord].u = point2->u + ( t * ( point2->u - point1->u ) );

  00437	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0043a	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0043f	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00442	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00445	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0044a	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0044f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00453	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00458	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0045c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00460	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00465	c1 e0 06	 shl	 eax, 6
  00468	f3 0f 11 80 18
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+24], xmm0

; 1445 : 	clip_3d_crds[clip_3d_coord].v = point2->v + ( t * ( point2->v - point1->v ) );

  00470	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00473	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00478	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0047b	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0047e	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00483	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00488	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0048c	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00491	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00495	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00499	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0049e	c1 e0 06	 shl	 eax, 6
  004a1	f3 0f 11 80 1c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+28], xmm0

; 1446 : 
; 1447 : 	if ( ! clip_point )

  004a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  004b0	75 1e		 jne	 SHORT $LN5@insert_ymi

; 1448 : 	{
; 1449 : 
; 1450 : 		clip_list = & clip_3d_crds[clip_3d_coord];

  004b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004b7	c1 e0 06	 shl	 eax, 6
  004ba	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  004bf	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 1451 : 
; 1452 : 		clip_point = clip_list;

  004c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  004c9	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 1453 : 	}
; 1454 : 	else

  004ce	eb 24		 jmp	 SHORT $LN6@insert_ymi
$LN5@insert_ymi:

; 1455 : 	{
; 1456 : 
; 1457 : 		clip_point->next_vertex = & clip_3d_crds[clip_3d_coord];

  004d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004d5	c1 e0 06	 shl	 eax, 6
  004d8	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  004dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  004e3	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 1458 : 
; 1459 : 		clip_point = clip_point->next_vertex;

  004e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  004eb	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  004ee	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_ymi:

; 1460 : 	}
; 1461 : 
; 1462 : 	clip_3d_coord ++;

  004f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004f9	83 c0 01	 add	 eax, 1
  004fc	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 1463 : 
; 1464 : #if REPORT_CLIP_STATISTICS
; 1465 : 
; 1466 : 	number_of_ymin_coordinates_inserted++;
; 1467 : 
; 1468 : #endif
; 1469 : }

  00501	5f		 pop	 edi
  00502	5e		 pop	 esi
  00503	5b		 pop	 ebx
  00504	8b e5		 mov	 esp, ebp
  00506	5d		 pop	 ebp
  00507	c2 08 00	 ret	 8
?insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z ENDP		; insert_ymin_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv344 = -188						; size = 8
tv431 = -180						; size = 8
tv338 = -172						; size = 8
_int_dblue$ = -100					; size = 4
_int_blue$ = -96					; size = 4
_int_dgreen$ = -92					; size = 4
_int_green$ = -88					; size = 4
_int_dred$ = -84					; size = 4
_int_red$ = -80						; size = 4
_int_dspecular$ = -76					; size = 4
_int_specular$ = -72					; size = 4
_int_dfog$ = -68					; size = 4
_int_fog$ = -64						; size = 4
_int_dalpha$ = -60					; size = 4
_int_alpha$ = -56					; size = 4
_blue$ = -52						; size = 4
_green$ = -48						; size = 4
_red$ = -44						; size = 4
_specular$ = -40					; size = 4
_fog$ = -36						; size = 4
_alpha$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z PROC		; insert_xmax_coordinate, COMDAT

; 1190 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1191 : 
; 1192 : 	vertex
; 1193 : 		*tmp;
; 1194 : 
; 1195 : 	double
; 1196 : 		t,
; 1197 : 		numerator,
; 1198 : 		denominator;
; 1199 : 
; 1200 : 	float
; 1201 : 		alpha,
; 1202 : 		fog,
; 1203 : 		specular,
; 1204 : 		red,
; 1205 : 		green,
; 1206 : 		blue;
; 1207 : 
; 1208 : 	int
; 1209 : 		int_alpha,
; 1210 : 		int_dalpha,
; 1211 : 		int_fog,
; 1212 : 		int_dfog,
; 1213 : 		int_specular,
; 1214 : 		int_dspecular,
; 1215 : 		int_red,
; 1216 : 		int_dred,
; 1217 : 		int_green,
; 1218 : 		int_dgreen,
; 1219 : 		int_blue,
; 1220 : 		int_dblue;
; 1221 : 
; 1222 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_xma
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 20	 add	 eax, 32			; 00000020H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_xma:

; 1223 : 
; 1224 : 	if ( point1->j > point2->j )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00038	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  0003c	76 12		 jbe	 SHORT $LN3@insert_xma

; 1225 : 	{
; 1226 : 
; 1227 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 1228 : 
; 1229 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 1230 : 
; 1231 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_xma:

; 1232 : 	}
; 1233 : 
; 1234 : 	numerator = active_viewport.x_max - point2->i;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0005b	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 1235 : 
; 1236 : 	denominator = point2->i - point1->i;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00074	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 1237 : 
; 1238 : #ifdef DEBUG
; 1239 : 
; 1240 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv338[ebp]
  0009d	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv338[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv431[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv344[ebp]
  000c8	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv344[ebp]
  000d0	f2 0f 10 8d 4c
	ff ff ff	 movsd	 xmm1, QWORD PTR tv431[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_xma

; 1241 : 	{
; 1242 : 
; 1243 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_xma:

; 1244 : 	}
; 1245 : 
; 1246 : #endif
; 1247 : 
; 1248 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1249 : 
; 1250 : 	int_alpha = point2->alpha;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00101	89 4d c8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1251 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  0010b	8b 55 c8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 c4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1252 : 
; 1253 : 	int_fog = point2->fog;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  0011a	89 4d c0	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1254 : 	int_dfog = int_fog - ( int ) point1->fog;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00124	8b 55 c0	 mov	 edx, DWORD PTR _int_fog$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 bc	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1255 : 
; 1256 : 	int_specular = point2->specular;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  00133	89 4d b8	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 1257 : 	int_dspecular = int_specular - ( int ) point1->specular;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  0013d	8b 55 b8	 mov	 edx, DWORD PTR _int_specular$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 b4	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 1258 : 
; 1259 : 	int_red = point2->red;

  00145	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00148	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0014c	89 4d b0	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1260 : 	int_dred = int_red - ( int ) point1->red;

  0014f	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00152	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00156	8b 55 b0	 mov	 edx, DWORD PTR _int_red$[ebp]
  00159	2b d1		 sub	 edx, ecx
  0015b	89 55 ac	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1261 : 
; 1262 : 	int_green = point2->green;

  0015e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00161	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00165	89 4d a8	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1263 : 	int_dgreen = int_green - ( int ) point1->green;

  00168	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0016b	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0016f	8b 55 a8	 mov	 edx, DWORD PTR _int_green$[ebp]
  00172	2b d1		 sub	 edx, ecx
  00174	89 55 a4	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1264 : 
; 1265 : 	int_blue = point2->blue;

  00177	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0017a	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0017e	89 4d a0	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1266 : 	int_dblue = int_blue - ( int ) point1->blue;

  00181	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00184	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00188	8b 55 a0	 mov	 edx, DWORD PTR _int_blue$[ebp]
  0018b	2b d1		 sub	 edx, ecx
  0018d	89 55 9c	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1267 : 
; 1268 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00190	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  00195	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00199	f3 0f 2a 4d c4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  0019e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001a2	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001af	f3 0f 11 45 e0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1269 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001b4	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001b9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001bd	f3 0f 2a 4d bc	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001c2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001c6	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001cb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d3	f3 0f 11 45 dc	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1270 : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  001d8	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  001dd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e1	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  001e6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001ea	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001ef	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001f3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f7	f3 0f 11 45 d8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1271 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  001fc	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  00201	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00205	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  0020a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0020e	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00213	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00217	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0021b	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1272 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00220	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  00225	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00229	f3 0f 2a 4d a4	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  0022e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00232	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00237	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0023b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023f	f3 0f 11 45 d0	 movss	 DWORD PTR _green$[ebp], xmm0

; 1273 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  00244	f3 0f 2a 45 a0	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00249	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0024d	f3 0f 2a 4d 9c	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  00252	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00256	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0025b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00263	f3 0f 11 45 cc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1274 : 
; 1275 : 	alpha += FLOAT_FLOAT_FACTOR;

  00268	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  0026d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00275	f3 0f 11 45 e0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1276 : 	fog += FLOAT_FLOAT_FACTOR;

  0027a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _fog$[ebp]
  0027f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00287	f3 0f 11 45 dc	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1277 : 	specular += FLOAT_FLOAT_FACTOR;

  0028c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _specular$[ebp]
  00291	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00299	f3 0f 11 45 d8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1278 : 	red += FLOAT_FLOAT_FACTOR;

  0029e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _red$[ebp]
  002a3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002ab	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1279 : 	green += FLOAT_FLOAT_FACTOR;

  002b0	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _green$[ebp]
  002b5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002bd	f3 0f 11 45 d0	 movss	 DWORD PTR _green$[ebp], xmm0

; 1280 : 	blue += FLOAT_FLOAT_FACTOR;

  002c2	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _blue$[ebp]
  002c7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002cf	f3 0f 11 45 cc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1281 : 
; 1282 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  002d4	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  002d7	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002dc	89 45 c8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1283 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  002df	8b 45 dc	 mov	 eax, DWORD PTR _fog$[ebp]
  002e2	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002e7	89 45 c0	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1284 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  002ea	8b 45 d8	 mov	 eax, DWORD PTR _specular$[ebp]
  002ed	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002f2	89 45 b8	 mov	 DWORD PTR _int_specular$[ebp], eax

; 1285 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  002f5	8b 45 d4	 mov	 eax, DWORD PTR _red$[ebp]
  002f8	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002fd	89 45 b0	 mov	 DWORD PTR _int_red$[ebp], eax

; 1286 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00300	8b 45 d0	 mov	 eax, DWORD PTR _green$[ebp]
  00303	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00308	89 45 a8	 mov	 DWORD PTR _int_green$[ebp], eax

; 1287 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0030b	8b 45 cc	 mov	 eax, DWORD PTR _blue$[ebp]
  0030e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00313	89 45 a0	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1288 : 
; 1289 : 	clip_3d_crds[clip_3d_coord].alpha = int_alpha;

  00316	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0031b	c1 e0 06	 shl	 eax, 6
  0031e	8a 4d c8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00321	88 88 33 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+51], cl

; 1290 : 	clip_3d_crds[clip_3d_coord].fog = int_fog;

  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0032c	c1 e0 06	 shl	 eax, 6
  0032f	8a 4d c0	 mov	 cl, BYTE PTR _int_fog$[ebp]
  00332	88 88 2e 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+46], cl

; 1291 : 	clip_3d_crds[clip_3d_coord].specular = int_specular;

  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0033d	c1 e0 06	 shl	 eax, 6
  00340	8a 4d b8	 mov	 cl, BYTE PTR _int_specular$[ebp]
  00343	88 88 2d 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+45], cl

; 1292 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  00349	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0034e	c1 e0 06	 shl	 eax, 6
  00351	8a 4d b0	 mov	 cl, BYTE PTR _int_red$[ebp]
  00354	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 1293 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0035f	c1 e0 06	 shl	 eax, 6
  00362	8a 4d a8	 mov	 cl, BYTE PTR _int_green$[ebp]
  00365	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 1294 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  0036b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00370	c1 e0 06	 shl	 eax, 6
  00373	8a 4d a0	 mov	 cl, BYTE PTR _int_blue$[ebp]
  00376	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 1295 : 
; 1296 : 	clip_3d_crds[clip_3d_coord].i = active_viewport.x_max;

  0037c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00381	c1 e0 06	 shl	 eax, 6
  00384	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0038c	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 1297 : 	clip_3d_crds[clip_3d_coord].j = point2->j + ( t * ( point2->j - point1->j ) );

  00394	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00397	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  0039c	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0039f	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  003a2	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  003a7	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  003ac	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  003b0	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  003b5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  003c2	c1 e0 06	 shl	 eax, 6
  003c5	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 1298 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  003cd	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  003d0	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  003d5	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  003d8	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  003db	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  003e0	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  003e5	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  003e9	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  003ee	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  003fb	c1 e0 06	 shl	 eax, 6
  003fe	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 1299 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  00406	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0040b	c1 e0 06	 shl	 eax, 6
  0040e	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  00416	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0041e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00422	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00426	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0042c	c1 e1 06	 shl	 ecx, 6
  0042f	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 1300 : 
; 1301 : 	clip_3d_crds[clip_3d_coord].u = point2->u + ( t * ( point2->u - point1->u ) );

  00437	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0043a	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0043f	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00442	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00445	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0044a	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0044f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00453	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00458	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0045c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00460	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00465	c1 e0 06	 shl	 eax, 6
  00468	f3 0f 11 80 18
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+24], xmm0

; 1302 : 	clip_3d_crds[clip_3d_coord].v = point2->v + ( t * ( point2->v - point1->v ) );

  00470	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00473	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00478	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0047b	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0047e	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00483	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00488	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0048c	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00491	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00495	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00499	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0049e	c1 e0 06	 shl	 eax, 6
  004a1	f3 0f 11 80 1c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+28], xmm0

; 1303 : 
; 1304 : 	if ( ! clip_point )

  004a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  004b0	75 1e		 jne	 SHORT $LN5@insert_xma

; 1305 : 	{
; 1306 : 
; 1307 : 		clip_list = & clip_3d_crds[clip_3d_coord];

  004b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004b7	c1 e0 06	 shl	 eax, 6
  004ba	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  004bf	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 1308 : 
; 1309 : 		clip_point = clip_list;

  004c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  004c9	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 1310 : 	}
; 1311 : 	else

  004ce	eb 24		 jmp	 SHORT $LN6@insert_xma
$LN5@insert_xma:

; 1312 : 	{
; 1313 : 
; 1314 : 		clip_point->next_vertex = & clip_3d_crds[clip_3d_coord];

  004d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004d5	c1 e0 06	 shl	 eax, 6
  004d8	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  004dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  004e3	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 1315 : 
; 1316 : 		clip_point = clip_point->next_vertex;

  004e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  004eb	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  004ee	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_xma:

; 1317 : 	}
; 1318 : 
; 1319 : 	clip_3d_coord ++;

  004f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004f9	83 c0 01	 add	 eax, 1
  004fc	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 1320 : 
; 1321 : #if REPORT_CLIP_STATISTICS
; 1322 : 
; 1323 : 	number_of_xmax_coordinates_inserted++;
; 1324 : 
; 1325 : #endif
; 1326 : }

  00501	5f		 pop	 edi
  00502	5e		 pop	 esi
  00503	5b		 pop	 ebx
  00504	8b e5		 mov	 esp, ebp
  00506	5d		 pop	 ebp
  00507	c2 08 00	 ret	 8
?insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z ENDP		; insert_xmax_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv344 = -188						; size = 8
tv431 = -180						; size = 8
tv338 = -172						; size = 8
_int_dblue$ = -100					; size = 4
_int_blue$ = -96					; size = 4
_int_dgreen$ = -92					; size = 4
_int_green$ = -88					; size = 4
_int_dred$ = -84					; size = 4
_int_red$ = -80						; size = 4
_int_dspecular$ = -76					; size = 4
_int_specular$ = -72					; size = 4
_int_dfog$ = -68					; size = 4
_int_fog$ = -64						; size = 4
_int_dalpha$ = -60					; size = 4
_int_alpha$ = -56					; size = 4
_blue$ = -52						; size = 4
_green$ = -48						; size = 4
_red$ = -44						; size = 4
_specular$ = -40					; size = 4
_fog$ = -36						; size = 4
_alpha$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z PROC		; insert_xmin_coordinate, COMDAT

; 1047 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1048 : 
; 1049 : 	vertex
; 1050 : 		*tmp;
; 1051 : 
; 1052 : 	double
; 1053 : 		t,
; 1054 : 		numerator,
; 1055 : 		denominator;
; 1056 : 
; 1057 : 	float
; 1058 : 		alpha,
; 1059 : 		fog,
; 1060 : 		specular,
; 1061 : 		red,
; 1062 : 		green,
; 1063 : 		blue;
; 1064 : 
; 1065 : 	int
; 1066 : 		int_alpha,
; 1067 : 		int_dalpha,
; 1068 : 		int_fog,
; 1069 : 		int_dfog,
; 1070 : 		int_specular,
; 1071 : 		int_dspecular,
; 1072 : 		int_red,
; 1073 : 		int_dred,
; 1074 : 		int_green,
; 1075 : 		int_dgreen,
; 1076 : 		int_blue,
; 1077 : 		int_dblue;
; 1078 : 
; 1079 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_xmi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 20	 add	 eax, 32			; 00000020H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@ILMPFKMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_xmi:

; 1080 : 
; 1081 : 	if ( point1->j > point2->j )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00038	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  0003c	76 12		 jbe	 SHORT $LN3@insert_xmi

; 1082 : 	{
; 1083 : 
; 1084 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 1085 : 
; 1086 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 1087 : 
; 1088 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_xmi:

; 1089 : 	}
; 1090 : 
; 1091 : 	numerator = active_viewport.x_min - point2->i;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0005b	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 1092 : 
; 1093 : 	denominator = point2->i - point1->i;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00074	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 1094 : 
; 1095 : #ifdef DEBUG
; 1096 : 
; 1097 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv338[ebp]
  0009d	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv338[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv431[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv344[ebp]
  000c8	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv344[ebp]
  000d0	f2 0f 10 8d 4c
	ff ff ff	 movsd	 xmm1, QWORD PTR tv431[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_xmi

; 1098 : 	{
; 1099 : 
; 1100 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_xmi:

; 1101 : 	}
; 1102 : 
; 1103 : #endif
; 1104 : 
; 1105 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1106 : 
; 1107 : 	int_alpha = point2->alpha;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00101	89 4d c8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1108 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  0010b	8b 55 c8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 c4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1109 : 
; 1110 : 	int_fog = point2->fog;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  0011a	89 4d c0	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1111 : 	int_dfog = int_fog - ( int ) point1->fog;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00124	8b 55 c0	 mov	 edx, DWORD PTR _int_fog$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 bc	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1112 : 
; 1113 : 	int_specular = point2->specular;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  00133	89 4d b8	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 1114 : 	int_dspecular = int_specular - ( int ) point1->specular;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  0013d	8b 55 b8	 mov	 edx, DWORD PTR _int_specular$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 b4	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 1115 : 
; 1116 : 	int_red = point2->red;

  00145	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00148	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0014c	89 4d b0	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1117 : 	int_dred = int_red - ( int ) point1->red;

  0014f	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00152	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00156	8b 55 b0	 mov	 edx, DWORD PTR _int_red$[ebp]
  00159	2b d1		 sub	 edx, ecx
  0015b	89 55 ac	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1118 : 
; 1119 : 	int_green = point2->green;

  0015e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00161	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00165	89 4d a8	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1120 : 	int_dgreen = int_green - ( int ) point1->green;

  00168	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0016b	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0016f	8b 55 a8	 mov	 edx, DWORD PTR _int_green$[ebp]
  00172	2b d1		 sub	 edx, ecx
  00174	89 55 a4	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1121 : 
; 1122 : 	int_blue = point2->blue;

  00177	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0017a	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0017e	89 4d a0	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1123 : 	int_dblue = int_blue - ( int ) point1->blue;

  00181	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00184	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00188	8b 55 a0	 mov	 edx, DWORD PTR _int_blue$[ebp]
  0018b	2b d1		 sub	 edx, ecx
  0018d	89 55 9c	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1124 : 
; 1125 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00190	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  00195	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00199	f3 0f 2a 4d c4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  0019e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001a2	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001af	f3 0f 11 45 e0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1126 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001b4	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001b9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001bd	f3 0f 2a 4d bc	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001c2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001c6	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001cb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d3	f3 0f 11 45 dc	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1127 : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  001d8	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  001dd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e1	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  001e6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001ea	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001ef	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001f3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f7	f3 0f 11 45 d8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1128 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  001fc	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  00201	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00205	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  0020a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0020e	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00213	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00217	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0021b	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1129 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00220	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  00225	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00229	f3 0f 2a 4d a4	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  0022e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00232	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00237	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0023b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023f	f3 0f 11 45 d0	 movss	 DWORD PTR _green$[ebp], xmm0

; 1130 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  00244	f3 0f 2a 45 a0	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00249	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0024d	f3 0f 2a 4d 9c	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  00252	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00256	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0025b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00263	f3 0f 11 45 cc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1131 : 
; 1132 : 	alpha += FLOAT_FLOAT_FACTOR;

  00268	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  0026d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00275	f3 0f 11 45 e0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1133 : 	fog += FLOAT_FLOAT_FACTOR;

  0027a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _fog$[ebp]
  0027f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00287	f3 0f 11 45 dc	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1134 : 	specular += FLOAT_FLOAT_FACTOR;

  0028c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _specular$[ebp]
  00291	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00299	f3 0f 11 45 d8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1135 : 	red += FLOAT_FLOAT_FACTOR;

  0029e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _red$[ebp]
  002a3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002ab	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1136 : 	green += FLOAT_FLOAT_FACTOR;

  002b0	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _green$[ebp]
  002b5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002bd	f3 0f 11 45 d0	 movss	 DWORD PTR _green$[ebp], xmm0

; 1137 : 	blue += FLOAT_FLOAT_FACTOR;

  002c2	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _blue$[ebp]
  002c7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002cf	f3 0f 11 45 cc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1138 : 
; 1139 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  002d4	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  002d7	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002dc	89 45 c8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1140 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  002df	8b 45 dc	 mov	 eax, DWORD PTR _fog$[ebp]
  002e2	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002e7	89 45 c0	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1141 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  002ea	8b 45 d8	 mov	 eax, DWORD PTR _specular$[ebp]
  002ed	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002f2	89 45 b8	 mov	 DWORD PTR _int_specular$[ebp], eax

; 1142 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  002f5	8b 45 d4	 mov	 eax, DWORD PTR _red$[ebp]
  002f8	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  002fd	89 45 b0	 mov	 DWORD PTR _int_red$[ebp], eax

; 1143 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00300	8b 45 d0	 mov	 eax, DWORD PTR _green$[ebp]
  00303	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00308	89 45 a8	 mov	 DWORD PTR _int_green$[ebp], eax

; 1144 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0030b	8b 45 cc	 mov	 eax, DWORD PTR _blue$[ebp]
  0030e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00313	89 45 a0	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1145 : 
; 1146 : 	clip_3d_crds[clip_3d_coord].alpha = int_alpha;

  00316	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0031b	c1 e0 06	 shl	 eax, 6
  0031e	8a 4d c8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00321	88 88 33 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+51], cl

; 1147 : 	clip_3d_crds[clip_3d_coord].fog = int_fog;

  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0032c	c1 e0 06	 shl	 eax, 6
  0032f	8a 4d c0	 mov	 cl, BYTE PTR _int_fog$[ebp]
  00332	88 88 2e 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+46], cl

; 1148 : 	clip_3d_crds[clip_3d_coord].specular = int_specular;

  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0033d	c1 e0 06	 shl	 eax, 6
  00340	8a 4d b8	 mov	 cl, BYTE PTR _int_specular$[ebp]
  00343	88 88 2d 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+45], cl

; 1149 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  00349	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0034e	c1 e0 06	 shl	 eax, 6
  00351	8a 4d b0	 mov	 cl, BYTE PTR _int_red$[ebp]
  00354	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 1150 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0035f	c1 e0 06	 shl	 eax, 6
  00362	8a 4d a8	 mov	 cl, BYTE PTR _int_green$[ebp]
  00365	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 1151 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  0036b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00370	c1 e0 06	 shl	 eax, 6
  00373	8a 4d a0	 mov	 cl, BYTE PTR _int_blue$[ebp]
  00376	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 1152 : 
; 1153 : 	clip_3d_crds[clip_3d_coord].i = active_viewport.x_min;

  0037c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00381	c1 e0 06	 shl	 eax, 6
  00384	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0038c	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 1154 : 	clip_3d_crds[clip_3d_coord].j = point2->j + ( t * ( point2->j - point1->j ) );

  00394	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00397	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  0039c	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0039f	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  003a2	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  003a7	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  003ac	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  003b0	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  003b5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  003c2	c1 e0 06	 shl	 eax, 6
  003c5	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 1155 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  003cd	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  003d0	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  003d5	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  003d8	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  003db	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  003e0	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  003e5	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  003e9	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  003ee	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  003fb	c1 e0 06	 shl	 eax, 6
  003fe	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 1156 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  00406	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0040b	c1 e0 06	 shl	 eax, 6
  0040e	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  00416	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0041e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00422	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00426	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0042c	c1 e1 06	 shl	 ecx, 6
  0042f	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 1157 : 
; 1158 : 	clip_3d_crds[clip_3d_coord].u = point2->u + ( t * ( point2->u - point1->u ) );

  00437	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0043a	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0043f	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00442	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00445	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0044a	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0044f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00453	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00458	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0045c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00460	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00465	c1 e0 06	 shl	 eax, 6
  00468	f3 0f 11 80 18
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+24], xmm0

; 1159 : 	clip_3d_crds[clip_3d_coord].v = point2->v + ( t * ( point2->v - point1->v ) );

  00470	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00473	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00478	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0047b	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0047e	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00483	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00488	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0048c	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00491	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00495	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00499	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0049e	c1 e0 06	 shl	 eax, 6
  004a1	f3 0f 11 80 1c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+28], xmm0

; 1160 : 
; 1161 : 	if ( !clip_point )

  004a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  004b0	75 1e		 jne	 SHORT $LN5@insert_xmi

; 1162 : 	{
; 1163 : 
; 1164 : 		clip_list = & clip_3d_crds[clip_3d_coord];

  004b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004b7	c1 e0 06	 shl	 eax, 6
  004ba	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  004bf	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 1165 : 
; 1166 : 		clip_point = clip_list;

  004c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  004c9	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 1167 : 	}
; 1168 : 	else

  004ce	eb 24		 jmp	 SHORT $LN6@insert_xmi
$LN5@insert_xmi:

; 1169 : 	{
; 1170 : 
; 1171 : 		clip_point->next_vertex = & clip_3d_crds[clip_3d_coord];

  004d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004d5	c1 e0 06	 shl	 eax, 6
  004d8	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  004dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  004e3	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 1172 : 
; 1173 : 		clip_point = clip_point->next_vertex;

  004e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  004eb	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  004ee	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_xmi:

; 1174 : 	}
; 1175 : 
; 1176 : 	clip_3d_coord++;

  004f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  004f9	83 c0 01	 add	 eax, 1
  004fc	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 1177 : 
; 1178 : #if REPORT_CLIP_STATISTICS
; 1179 : 
; 1180 : 	number_of_xmin_coordinates_inserted++;
; 1181 : 
; 1182 : #endif
; 1183 : }

  00501	5f		 pop	 edi
  00502	5e		 pop	 esi
  00503	5b		 pop	 ebx
  00504	8b e5		 mov	 esp, ebp
  00506	5d		 pop	 ebp
  00507	c2 08 00	 ret	 8
?insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z ENDP		; insert_xmin_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?generate_3d_j_outcode@@YGHM@Z
_TEXT	SEGMENT
_oymin$ = -20						; size = 4
_oymax$ = -16						; size = 4
_iymin$ = -12						; size = 4
_iymax$ = -8						; size = 4
_outcode$ = -4						; size = 4
_j$ = 8							; size = 4
?generate_3d_j_outcode@@YGHM@Z PROC			; generate_3d_j_outcode, COMDAT

; 2381 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2382 : 
; 2383 : 	int
; 2384 : 		outcode,
; 2385 : 		iymax,
; 2386 : 		iymin;
; 2387 : 
; 2388 : 	float
; 2389 : 		oymax,
; 2390 : 		oymin;
; 2391 : 
; 2392 : 	oymax = active_viewport.y_max - j;

  00009	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00011	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _j$[ebp]
  00016	f3 0f 11 45 f0	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 2393 : 	oymin = j - active_viewport.y_min;

  0001b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _j$[ebp]
  00020	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00028	f3 0f 11 45 ec	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 2394 : 
; 2395 : 	iymax = *( ( int * ) &oymax ) >> 31;

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _oymax$[ebp]
  00030	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00033	89 45 f8	 mov	 DWORD PTR _iymax$[ebp], eax

; 2396 : 	iymin = *( ( int * ) &oymin ) >> 31;

  00036	8b 45 ec	 mov	 eax, DWORD PTR _oymin$[ebp]
  00039	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  0003c	89 45 f4	 mov	 DWORD PTR _iymin$[ebp], eax

; 2397 : 
; 2398 : 	outcode = bottom_clip_bit_array[ iymax + 1 ];

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _iymax$[ebp]
  00042	8b 0c 85 04 00
	00 00		 mov	 ecx, DWORD PTR ?bottom_clip_bit_array@@3PAHA[eax*4+4]
  00049	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 2399 : 	outcode |= top_clip_bit_array[ iymin + 1 ];

  0004c	8b 45 f4	 mov	 eax, DWORD PTR _iymin$[ebp]
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  00052	0b 0c 85 04 00
	00 00		 or	 ecx, DWORD PTR ?top_clip_bit_array@@3PAHA[eax*4+4]
  00059	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 2400 : 
; 2401 : 	return ( outcode );

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _outcode$[ebp]

; 2402 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?generate_3d_j_outcode@@YGHM@Z ENDP			; generate_3d_j_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?generate_3d_outcode@@YGHMM@Z
_TEXT	SEGMENT
_oymin$ = -36						; size = 4
_oymax$ = -32						; size = 4
_oxmin$ = -28						; size = 4
_oxmax$ = -24						; size = 4
_iymin$ = -20						; size = 4
_iymax$ = -16						; size = 4
_ixmin$ = -12						; size = 4
_ixmax$ = -8						; size = 4
_outcode$ = -4						; size = 4
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?generate_3d_outcode@@YGHMM@Z PROC			; generate_3d_outcode, COMDAT

; 2343 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2344 : 
; 2345 : 	int
; 2346 : 		outcode,
; 2347 : 		ixmax,
; 2348 : 		ixmin,
; 2349 : 		iymax,
; 2350 : 		iymin;
; 2351 : 
; 2352 : 	float
; 2353 : 		oxmax,
; 2354 : 		oxmin,
; 2355 : 		oymax,
; 2356 : 		oymin;
; 2357 : 
; 2358 : 	oxmax = active_viewport.x_max - i;

  00009	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00011	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _i$[ebp]
  00016	f3 0f 11 45 e8	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 2359 : 	oxmin = i - active_viewport.x_min;

  0001b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _i$[ebp]
  00020	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00028	f3 0f 11 45 e4	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 2360 : 	oymax = active_viewport.y_max - j;

  0002d	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00035	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _j$[ebp]
  0003a	f3 0f 11 45 e0	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 2361 : 	oymin = j - active_viewport.y_min;

  0003f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _j$[ebp]
  00044	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0004c	f3 0f 11 45 dc	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 2362 : 
; 2363 : 	ixmax = *( ( int * ) &oxmax ) >> 31;

  00051	8b 45 e8	 mov	 eax, DWORD PTR _oxmax$[ebp]
  00054	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00057	89 45 f8	 mov	 DWORD PTR _ixmax$[ebp], eax

; 2364 : 	ixmin = *( ( int * ) &oxmin ) >> 31;

  0005a	8b 45 e4	 mov	 eax, DWORD PTR _oxmin$[ebp]
  0005d	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00060	89 45 f4	 mov	 DWORD PTR _ixmin$[ebp], eax

; 2365 : 	iymax = *( ( int * ) &oymax ) >> 31;

  00063	8b 45 e0	 mov	 eax, DWORD PTR _oymax$[ebp]
  00066	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00069	89 45 f0	 mov	 DWORD PTR _iymax$[ebp], eax

; 2366 : 	iymin = *( ( int * ) &oymin ) >> 31;

  0006c	8b 45 dc	 mov	 eax, DWORD PTR _oymin$[ebp]
  0006f	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00072	89 45 ec	 mov	 DWORD PTR _iymin$[ebp], eax

; 2367 : 
; 2368 : 	outcode = right_clip_bit_array[ ixmax + 1 ];

  00075	8b 45 f8	 mov	 eax, DWORD PTR _ixmax$[ebp]
  00078	8b 0c 85 04 00
	00 00		 mov	 ecx, DWORD PTR ?right_clip_bit_array@@3PAHA[eax*4+4]
  0007f	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 2369 : 	outcode |= left_clip_bit_array[ ixmin + 1 ];

  00082	8b 45 f4	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  00088	0b 0c 85 04 00
	00 00		 or	 ecx, DWORD PTR ?left_clip_bit_array@@3PAHA[eax*4+4]
  0008f	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 2370 : 	outcode |= bottom_clip_bit_array[ iymax + 1 ];

  00092	8b 45 f0	 mov	 eax, DWORD PTR _iymax$[ebp]
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  00098	0b 0c 85 04 00
	00 00		 or	 ecx, DWORD PTR ?bottom_clip_bit_array@@3PAHA[eax*4+4]
  0009f	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 2371 : 	outcode |= top_clip_bit_array[ iymin + 1 ];

  000a2	8b 45 ec	 mov	 eax, DWORD PTR _iymin$[ebp]
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  000a8	0b 0c 85 04 00
	00 00		 or	 ecx, DWORD PTR ?top_clip_bit_array@@3PAHA[eax*4+4]
  000af	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 2372 : 
; 2373 : 	return ( outcode );

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _outcode$[ebp]

; 2374 : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?generate_3d_outcode@@YGHMM@Z ENDP			; generate_3d_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@H@Z
_TEXT	SEGMENT
tv215 = -72						; size = 4
tv184 = -72						; size = 4
tv153 = -72						; size = 4
tv90 = -72						; size = 4
tv212 = -68						; size = 4
tv181 = -68						; size = 4
tv150 = -68						; size = 4
tv87 = -68						; size = 4
_polygon$ = 8						; size = 4
_outcode$ = 12						; size = 4
?clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@H@Z PROC ; clip_3d_dual_texture_polygon, COMDAT

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 627  : 
; 628  : 	number_of_polygons_screen_clipped++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_polygons_screen_clipped@@3HA ; number_of_polygons_screen_clipped
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_polygons_screen_clipped@@3HA, eax ; number_of_polygons_screen_clipped

; 629  : 
; 630  : 	if ( outcode & CLIP_LEFT )

  00016	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	0f 84 74 01 00
	00		 je	 $LN10@clip_3d_du

; 631  : 	{
; 632  : 	
; 633  : 		//
; 634  : 		// First clip against the left side of the viewing rectangle
; 635  : 		//
; 636  : 	
; 637  : 		clip_list = NULL;

  00022	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 638  : 	
; 639  : 		clip_point = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 640  : 	
; 641  : 		last_point = polygon;

  00036	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00039	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 642  : 	
; 643  : 		this_point = polygon->next_vertex;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00041	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00044	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 644  : 	
; 645  : 		if ( polygon->i >= active_viewport.x_min )

  0004a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0004d	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00052	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00059	72 1a		 jb	 SHORT $LN11@clip_3d_du

; 646  : 		{
; 647  : 	
; 648  : 			//
; 649  : 			// Start the clipped list off.
; 650  : 			//
; 651  : 	
; 652  : 			clip_list = polygon;

  0005b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0005e	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 653  : 	
; 654  : 			clip_point = polygon;

  00063	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 655  : 	
; 656  : 			polygon->next_vertex = NULL;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0006e	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN11@clip_3d_du:

; 657  : 		}
; 658  : 	
; 659  : 		while ( this_point )

  00075	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  0007c	0f 84 94 00 00
	00		 je	 $LN3@clip_3d_du

; 660  : 		{
; 661  : 	
; 662  : 			if ( this_point->i >= active_viewport.x_min )

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00087	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0008c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00093	72 3f		 jb	 SHORT $LN12@clip_3d_du

; 663  : 			{
; 664  : 	
; 665  : 				//
; 666  : 				// This point is inside the screen boundary
; 667  : 				//
; 668  : 	
; 669  : 				if ( last_point->i < active_viewport.x_min )

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0009a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  000a2	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  000a6	76 12		 jbe	 SHORT $LN14@clip_3d_du

; 670  : 				{
; 671  : 	
; 672  : 					//
; 673  : 					//	The last point isn't in the screen, but this one is, find intersection
; 674  : 					//
; 675  : 	
; 676  : 					insert_xmin_dual_texture_coordinate ( last_point, this_point );

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000ad	50		 push	 eax
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ?insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmin_dual_texture_coordinate
$LN14@clip_3d_du:

; 677  : 				}
; 678  : 	
; 679  : 				//
; 680  : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put 1.0 in!
; 681  : 				//
; 682  : 	
; 683  : 				clip_point->next_vertex = this_point;

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000c5	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 684  : 	
; 685  : 				clip_point = this_point;

  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000cd	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 686  : 			}
; 687  : 			else

  000d2	eb 25		 jmp	 SHORT $LN15@clip_3d_du
$LN12@clip_3d_du:

; 688  : 			{
; 689  : 	
; 690  : 				//
; 691  : 				// This point isn't in the screen area
; 692  : 				//
; 693  : 	
; 694  : 				if ( last_point->i >= active_viewport.x_min )

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000d9	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  000de	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  000e5	72 12		 jb	 SHORT $LN15@clip_3d_du

; 695  : 				{
; 696  : 	
; 697  : 					//
; 698  : 					// The last point was visible - find intersection point
; 699  : 					//
; 700  : 					
; 701  : 					insert_xmin_dual_texture_coordinate ( last_point, this_point );

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000ec	50		 push	 eax
  000ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 ?insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmin_dual_texture_coordinate
$LN15@clip_3d_du:

; 702  : 				}
; 703  : 			}
; 704  : 	
; 705  : 			last_point = this_point;

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000fe	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 706  : 	
; 707  : 			this_point = this_point->next_vertex;

  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00108	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0010b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 708  : 		}

  00111	e9 5f ff ff ff	 jmp	 $LN11@clip_3d_du
$LN3@clip_3d_du:

; 709  : 	
; 710  : 		if ( !clip_point )

  00116	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0011d	75 07		 jne	 SHORT $LN16@clip_3d_du

; 711  : 		{
; 712  : 	
; 713  : 			return ( NULL );						// If there are no valid points in the polygon, exit

  0011f	33 c0		 xor	 eax, eax
  00121	e9 f0 04 00 00	 jmp	 $LN1@clip_3d_du
$LN16@clip_3d_du:

; 714  : 		}
; 715  : 	
; 716  : 		if ( ( last_point->i < active_viewport.x_min ) ^ ( polygon->i < active_viewport.x_min ) )

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0012b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00133	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  00137	76 09		 jbe	 SHORT $LN43@clip_3d_du
  00139	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  00140	eb 07		 jmp	 SHORT $LN44@clip_3d_du
$LN43@clip_3d_du:
  00142	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN44@clip_3d_du:
  00149	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  0014c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00154	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  00158	76 09		 jbe	 SHORT $LN45@clip_3d_du
  0015a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  00161	eb 07		 jmp	 SHORT $LN46@clip_3d_du
$LN45@clip_3d_du:
  00163	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN46@clip_3d_du:
  0016a	8b 55 bc	 mov	 edx, DWORD PTR tv87[ebp]
  0016d	33 55 b8	 xor	 edx, DWORD PTR tv90[ebp]
  00170	74 10		 je	 SHORT $LN17@clip_3d_du

; 717  : 		{
; 718  : 	
; 719  : 			//
; 720  : 			// The last point in the polygon was off the screen, the first 1.0 isn't, so add a clip point
; 721  : 			//
; 722  : 	
; 723  : 			insert_xmin_dual_texture_coordinate ( last_point, polygon );

  00172	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00175	50		 push	 eax
  00176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0017c	51		 push	 ecx
  0017d	e8 00 00 00 00	 call	 ?insert_xmin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmin_dual_texture_coordinate
$LN17@clip_3d_du:

; 724  : 		}
; 725  : 	
; 726  : 		clip_point->next_vertex = NULL;

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00187	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 727  : 	
; 728  : 		polygon = clip_list;

  0018e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00193	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN10@clip_3d_du:

; 729  : 	}
; 730  : 
; 731  : 	if ( outcode & CLIP_RIGHT )

  00196	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00199	83 e0 04	 and	 eax, 4
  0019c	0f 84 74 01 00
	00		 je	 $LN18@clip_3d_du

; 732  : 	{
; 733  : 	
; 734  : 		//
; 735  : 		// Next clip against the right side of the viewing rectangle
; 736  : 		//
; 737  : 	
; 738  : 		clip_list = NULL;

  001a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 739  : 	
; 740  : 		clip_point = NULL;

  001ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 741  : 	
; 742  : 		last_point = polygon;

  001b6	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001b9	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 743  : 	
; 744  : 		this_point = polygon->next_vertex;

  001be	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001c1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001c4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 745  : 	
; 746  : 		if ( polygon->i <= active_viewport.x_max )

  001ca	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001cd	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  001d5	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  001d9	72 1a		 jb	 SHORT $LN19@clip_3d_du

; 747  : 		{
; 748  : 	
; 749  : 			//
; 750  : 			// Start the clipped list off.
; 751  : 			//
; 752  : 	
; 753  : 			clip_list = polygon;

  001db	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001de	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 754  : 	
; 755  : 			clip_point = polygon;

  001e3	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001e6	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 756  : 	
; 757  : 			polygon->next_vertex = NULL;

  001eb	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001ee	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN19@clip_3d_du:

; 758  : 		}
; 759  : 	
; 760  : 		while ( this_point )

  001f5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  001fc	0f 84 94 00 00
	00		 je	 $LN5@clip_3d_du

; 761  : 		{
; 762  : 	
; 763  : 			if ( this_point->i <= active_viewport.x_max )

  00202	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00207	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0020f	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  00213	72 3f		 jb	 SHORT $LN20@clip_3d_du

; 764  : 			{
; 765  : 	
; 766  : 				//
; 767  : 				// This point is inside the screen boundary
; 768  : 				//
; 769  : 	
; 770  : 				if ( last_point->i > active_viewport.x_max )

  00215	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0021a	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0021f	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00226	76 12		 jbe	 SHORT $LN22@clip_3d_du

; 771  : 				{
; 772  : 	
; 773  : 					//
; 774  : 					//	The last point isn't in the screen, but this one is, find intersection
; 775  : 					//
; 776  : 	
; 777  : 					insert_xmax_dual_texture_coordinate ( last_point, this_point );

  00228	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0022d	50		 push	 eax
  0022e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 ?insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmax_dual_texture_coordinate
$LN22@clip_3d_du:

; 778  : 				}
; 779  : 	
; 780  : 				//
; 781  : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put 1.0 in!
; 782  : 				//
; 783  : 	
; 784  : 				clip_point->next_vertex = this_point;

  0023a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0023f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00245	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 785  : 	
; 786  : 				clip_point = this_point;

  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0024d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 787  : 			}
; 788  : 			else

  00252	eb 25		 jmp	 SHORT $LN23@clip_3d_du
$LN20@clip_3d_du:

; 789  : 			{
; 790  : 	
; 791  : 				//
; 792  : 				// This point isn't in the screen area
; 793  : 				//
; 794  : 	
; 795  : 				if ( last_point->i <= active_viewport.x_max )

  00254	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00259	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00261	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  00265	72 12		 jb	 SHORT $LN23@clip_3d_du

; 796  : 				{
; 797  : 	
; 798  : 					//
; 799  : 					// The last point was visible - find intersection point
; 800  : 					//
; 801  : 					
; 802  : 					insert_xmax_dual_texture_coordinate ( last_point, this_point );

  00267	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0026c	50		 push	 eax
  0026d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00273	51		 push	 ecx
  00274	e8 00 00 00 00	 call	 ?insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmax_dual_texture_coordinate
$LN23@clip_3d_du:

; 803  : 				}
; 804  : 			}
; 805  : 	
; 806  : 			last_point = this_point;

  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0027e	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 807  : 	
; 808  : 			this_point = this_point->next_vertex;

  00283	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00288	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0028b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 809  : 		}

  00291	e9 5f ff ff ff	 jmp	 $LN19@clip_3d_du
$LN5@clip_3d_du:

; 810  : 	
; 811  : 		if ( !clip_point )

  00296	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0029d	75 07		 jne	 SHORT $LN24@clip_3d_du

; 812  : 		{
; 813  : 	
; 814  : 			return ( NULL );

  0029f	33 c0		 xor	 eax, eax
  002a1	e9 70 03 00 00	 jmp	 $LN1@clip_3d_du
$LN24@clip_3d_du:

; 815  : 		}
; 816  : 	
; 817  : 		if ( ( last_point->i > active_viewport.x_max ) ^ ( polygon->i > active_viewport.x_max ) )

  002a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  002ab	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  002b0	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  002b7	76 09		 jbe	 SHORT $LN47@clip_3d_du
  002b9	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv150[ebp], 1
  002c0	eb 07		 jmp	 SHORT $LN48@clip_3d_du
$LN47@clip_3d_du:
  002c2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv150[ebp], 0
$LN48@clip_3d_du:
  002c9	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  002cc	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  002d1	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  002d8	76 09		 jbe	 SHORT $LN49@clip_3d_du
  002da	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv153[ebp], 1
  002e1	eb 07		 jmp	 SHORT $LN50@clip_3d_du
$LN49@clip_3d_du:
  002e3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN50@clip_3d_du:
  002ea	8b 55 bc	 mov	 edx, DWORD PTR tv150[ebp]
  002ed	33 55 b8	 xor	 edx, DWORD PTR tv153[ebp]
  002f0	74 10		 je	 SHORT $LN25@clip_3d_du

; 818  : 		{
; 819  : 	
; 820  : 			//
; 821  : 			// The last point in the polygon was off the screen, the first 1.0 isn't, so add a clip point
; 822  : 			//
; 823  : 	
; 824  : 			insert_xmax_dual_texture_coordinate ( last_point, polygon );

  002f2	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  002f5	50		 push	 eax
  002f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  002fc	51		 push	 ecx
  002fd	e8 00 00 00 00	 call	 ?insert_xmax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmax_dual_texture_coordinate
$LN25@clip_3d_du:

; 825  : 		}
; 826  : 	
; 827  : 		clip_point->next_vertex = NULL;

  00302	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00307	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 828  : 	
; 829  : 		polygon = clip_list;

  0030e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00313	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN18@clip_3d_du:

; 830  : 	}
; 831  : 
; 832  : 	if ( outcode & CLIP_TOP )

  00316	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00319	83 e0 02	 and	 eax, 2
  0031c	0f 84 74 01 00
	00		 je	 $LN26@clip_3d_du

; 833  : 	{
; 834  : 	
; 835  : 		//
; 836  : 		// Next clip against the top of the viewing rectangle
; 837  : 		//
; 838  : 	
; 839  : 		clip_list = NULL;

  00322	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 840  : 	
; 841  : 		clip_point = NULL;

  0032c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 842  : 	
; 843  : 		last_point = polygon;

  00336	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00339	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 844  : 	
; 845  : 		this_point = polygon->next_vertex;

  0033e	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00341	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00344	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 846  : 	
; 847  : 		if ( polygon->j >= active_viewport.y_min )

  0034a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0034d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00352	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00359	72 1a		 jb	 SHORT $LN27@clip_3d_du

; 848  : 		{
; 849  : 	
; 850  : 			//
; 851  : 			// Start the clipped list off.
; 852  : 			//
; 853  : 	
; 854  : 			clip_list = polygon;

  0035b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0035e	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 855  : 	
; 856  : 			clip_point = polygon;

  00363	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00366	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 857  : 	
; 858  : 			polygon->next_vertex = NULL;

  0036b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0036e	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN27@clip_3d_du:

; 859  : 		}
; 860  : 	
; 861  : 		while ( this_point )

  00375	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  0037c	0f 84 94 00 00
	00		 je	 $LN7@clip_3d_du

; 862  : 		{
; 863  : 	
; 864  : 			if ( this_point->j >= active_viewport.y_min )

  00382	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00387	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0038c	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00393	72 3f		 jb	 SHORT $LN28@clip_3d_du

; 865  : 			{
; 866  : 	
; 867  : 				//
; 868  : 				// This point is inside the screen boundary
; 869  : 				//
; 870  : 	
; 871  : 				if ( last_point->j < active_viewport.y_min )

  00395	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0039a	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  003a2	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  003a6	76 12		 jbe	 SHORT $LN30@clip_3d_du

; 872  : 				{
; 873  : 	
; 874  : 					//
; 875  : 					//	The last point isn't in the screen, but this one is, find intersection
; 876  : 					//
; 877  : 	
; 878  : 					insert_ymin_dual_texture_coordinate ( last_point, this_point );

  003a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003ad	50		 push	 eax
  003ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  003b4	51		 push	 ecx
  003b5	e8 00 00 00 00	 call	 ?insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymin_dual_texture_coordinate
$LN30@clip_3d_du:

; 879  : 				}
; 880  : 	
; 881  : 				//
; 882  : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put one in!
; 883  : 				//
; 884  : 	
; 885  : 				clip_point->next_vertex = this_point;

  003ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  003bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003c5	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 886  : 	
; 887  : 				clip_point = this_point;

  003c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003cd	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 888  : 			}
; 889  : 			else

  003d2	eb 25		 jmp	 SHORT $LN31@clip_3d_du
$LN28@clip_3d_du:

; 890  : 			{
; 891  : 	
; 892  : 				//
; 893  : 				// This point isn't in the screen area
; 894  : 				//
; 895  : 	
; 896  : 				if ( last_point->j >= active_viewport.y_min )

  003d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  003d9	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  003de	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  003e5	72 12		 jb	 SHORT $LN31@clip_3d_du

; 897  : 				{
; 898  : 	
; 899  : 					//
; 900  : 					// The last point was visible - find intersection point
; 901  : 					//
; 902  : 					
; 903  : 					insert_ymin_dual_texture_coordinate ( last_point, this_point );

  003e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003ec	50		 push	 eax
  003ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  003f3	51		 push	 ecx
  003f4	e8 00 00 00 00	 call	 ?insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymin_dual_texture_coordinate
$LN31@clip_3d_du:

; 904  : 				}
; 905  : 			}
; 906  : 	
; 907  : 			last_point = this_point;

  003f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003fe	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 908  : 	
; 909  : 			this_point = this_point->next_vertex;

  00403	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00408	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0040b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 910  : 		}

  00411	e9 5f ff ff ff	 jmp	 $LN27@clip_3d_du
$LN7@clip_3d_du:

; 911  : 	
; 912  : 		if ( !clip_point )

  00416	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0041d	75 07		 jne	 SHORT $LN32@clip_3d_du

; 913  : 		{
; 914  : 	
; 915  : 			return ( NULL );

  0041f	33 c0		 xor	 eax, eax
  00421	e9 f0 01 00 00	 jmp	 $LN1@clip_3d_du
$LN32@clip_3d_du:

; 916  : 		}
; 917  : 	
; 918  : 		if ( ( last_point->j < active_viewport.y_min ) ^ ( polygon->j < active_viewport.y_min ) )

  00426	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0042b	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00433	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  00437	76 09		 jbe	 SHORT $LN51@clip_3d_du
  00439	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv181[ebp], 1
  00440	eb 07		 jmp	 SHORT $LN52@clip_3d_du
$LN51@clip_3d_du:
  00442	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv181[ebp], 0
$LN52@clip_3d_du:
  00449	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  0044c	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00454	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  00458	76 09		 jbe	 SHORT $LN53@clip_3d_du
  0045a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv184[ebp], 1
  00461	eb 07		 jmp	 SHORT $LN54@clip_3d_du
$LN53@clip_3d_du:
  00463	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN54@clip_3d_du:
  0046a	8b 55 bc	 mov	 edx, DWORD PTR tv181[ebp]
  0046d	33 55 b8	 xor	 edx, DWORD PTR tv184[ebp]
  00470	74 10		 je	 SHORT $LN33@clip_3d_du

; 919  : 		{
; 920  : 	
; 921  : 			//
; 922  : 			// The last point in the polygon was off the screen, the first one isn't, so add a clip point
; 923  : 			//
; 924  : 	
; 925  : 			insert_ymin_dual_texture_coordinate ( last_point, polygon );

  00472	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00475	50		 push	 eax
  00476	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0047c	51		 push	 ecx
  0047d	e8 00 00 00 00	 call	 ?insert_ymin_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymin_dual_texture_coordinate
$LN33@clip_3d_du:

; 926  : 		}
; 927  : 	
; 928  : 		clip_point->next_vertex = NULL;

  00482	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00487	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 929  : 	
; 930  : 		polygon = clip_list;

  0048e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00493	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN26@clip_3d_du:

; 931  : 	}
; 932  : 
; 933  : 	if ( outcode & CLIP_BOTTOM )

  00496	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00499	83 e0 08	 and	 eax, 8
  0049c	0f 84 71 01 00
	00		 je	 $LN34@clip_3d_du

; 934  : 	{
; 935  : 	
; 936  : 		//
; 937  : 		// Next clip against the bottom of the viewing rectangle
; 938  : 		//
; 939  : 	
; 940  : 		clip_list = NULL;

  004a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 941  : 	
; 942  : 		clip_point = NULL;

  004ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 943  : 	
; 944  : 		last_point = polygon;

  004b6	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004b9	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 945  : 	
; 946  : 		this_point = polygon->next_vertex;

  004be	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004c1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  004c4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 947  : 	
; 948  : 		if ( polygon->j <= active_viewport.y_max )

  004ca	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004cd	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  004d5	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  004d9	72 1a		 jb	 SHORT $LN35@clip_3d_du

; 949  : 		{
; 950  : 	
; 951  : 			//
; 952  : 			// Start the clipped list off.
; 953  : 			//
; 954  : 	
; 955  : 			clip_list = polygon;

  004db	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004de	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 956  : 	
; 957  : 			clip_point = polygon;

  004e3	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004e6	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 958  : 	
; 959  : 			polygon->next_vertex = NULL;

  004eb	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004ee	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN35@clip_3d_du:

; 960  : 		}
; 961  : 	
; 962  : 		while ( this_point )

  004f5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  004fc	0f 84 94 00 00
	00		 je	 $LN9@clip_3d_du

; 963  : 		{
; 964  : 	
; 965  : 			if ( this_point->j <= active_viewport.y_max )

  00502	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00507	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  0050f	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  00513	72 3f		 jb	 SHORT $LN36@clip_3d_du

; 966  : 			{
; 967  : 	
; 968  : 				//
; 969  : 				// This point is inside the screen boundary
; 970  : 				//
; 971  : 	
; 972  : 				if ( last_point->j > active_viewport.y_max )

  00515	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0051a	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0051f	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00526	76 12		 jbe	 SHORT $LN38@clip_3d_du

; 973  : 				{
; 974  : 	
; 975  : 					//
; 976  : 					//	The last point isn't in the screen, but this one is, find intersection
; 977  : 					//
; 978  : 	
; 979  : 					insert_ymax_dual_texture_coordinate ( last_point, this_point );

  00528	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0052d	50		 push	 eax
  0052e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00534	51		 push	 ecx
  00535	e8 00 00 00 00	 call	 ?insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymax_dual_texture_coordinate
$LN38@clip_3d_du:

; 980  : 				}
; 981  : 	
; 982  : 				//
; 983  : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put 1.0 in!
; 984  : 				//
; 985  : 	
; 986  : 				clip_point->next_vertex = this_point;

  0053a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0053f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00545	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 987  : 	
; 988  : 				clip_point = this_point;

  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0054d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 989  : 			}
; 990  : 			else

  00552	eb 25		 jmp	 SHORT $LN39@clip_3d_du
$LN36@clip_3d_du:

; 991  : 			{
; 992  : 	
; 993  : 				//
; 994  : 				// This point isn't in the screen area
; 995  : 				//
; 996  : 	
; 997  : 				if ( last_point->j <= active_viewport.y_max )

  00554	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00559	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00561	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  00565	72 12		 jb	 SHORT $LN39@clip_3d_du

; 998  : 				{
; 999  : 	
; 1000 : 					//
; 1001 : 					// The last point was visible - find intersection point
; 1002 : 					//
; 1003 : 					
; 1004 : 					insert_ymax_dual_texture_coordinate ( last_point, this_point );

  00567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0056c	50		 push	 eax
  0056d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00573	51		 push	 ecx
  00574	e8 00 00 00 00	 call	 ?insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymax_dual_texture_coordinate
$LN39@clip_3d_du:

; 1005 : 				}
; 1006 : 			}
; 1007 : 	
; 1008 : 			last_point = this_point;

  00579	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0057e	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 1009 : 	
; 1010 : 			this_point = this_point->next_vertex;

  00583	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00588	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0058b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 1011 : 		}

  00591	e9 5f ff ff ff	 jmp	 $LN35@clip_3d_du
$LN9@clip_3d_du:

; 1012 : 	
; 1013 : 		if ( !clip_point )

  00596	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0059d	75 04		 jne	 SHORT $LN40@clip_3d_du

; 1014 : 		{
; 1015 : 	
; 1016 : 			return ( NULL );

  0059f	33 c0		 xor	 eax, eax
  005a1	eb 73		 jmp	 SHORT $LN1@clip_3d_du
$LN40@clip_3d_du:

; 1017 : 		}
; 1018 : 	
; 1019 : 		// Case 0 last point is on screen, first point is on screen			NO ACTION
; 1020 : 		//	Case 1 last point is off screen, first point is on screen		GENERATE CLIP
; 1021 : 		// Case 2 last point is on screen, first point is off screen		GENERATE CLIP
; 1022 : 		// Case 3 last point is off screen, first point is off screen		NO ACTION
; 1023 : 	
; 1024 : 		if ( ( last_point->j > active_viewport.y_max ) ^ ( polygon->j > active_viewport.y_max ) )

  005a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  005a8	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  005ad	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  005b4	76 09		 jbe	 SHORT $LN55@clip_3d_du
  005b6	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv212[ebp], 1
  005bd	eb 07		 jmp	 SHORT $LN56@clip_3d_du
$LN55@clip_3d_du:
  005bf	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv212[ebp], 0
$LN56@clip_3d_du:
  005c6	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  005c9	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  005ce	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  005d5	76 09		 jbe	 SHORT $LN57@clip_3d_du
  005d7	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv215[ebp], 1
  005de	eb 07		 jmp	 SHORT $LN58@clip_3d_du
$LN57@clip_3d_du:
  005e0	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv215[ebp], 0
$LN58@clip_3d_du:
  005e7	8b 55 bc	 mov	 edx, DWORD PTR tv212[ebp]
  005ea	33 55 b8	 xor	 edx, DWORD PTR tv215[ebp]
  005ed	74 10		 je	 SHORT $LN41@clip_3d_du

; 1025 : 		{
; 1026 : 	
; 1027 : 			//
; 1028 : 			// The last point in the polygon was off the screen, the first one isn't, so add a clip point
; 1029 : 			//
; 1030 : 	
; 1031 : 			insert_ymax_dual_texture_coordinate ( last_point, polygon );

  005ef	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  005f2	50		 push	 eax
  005f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  005f9	51		 push	 ecx
  005fa	e8 00 00 00 00	 call	 ?insert_ymax_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymax_dual_texture_coordinate
$LN41@clip_3d_du:

; 1032 : 		}
; 1033 : 	
; 1034 : 		clip_point->next_vertex = NULL;

  005ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00604	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 1035 : 
; 1036 : 		polygon = clip_list;

  0060b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00610	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN34@clip_3d_du:

; 1037 : 	}
; 1038 : 
; 1039 : 	return ( polygon );

  00613	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
$LN1@clip_3d_du:

; 1040 : }

  00616	5f		 pop	 edi
  00617	5e		 pop	 esi
  00618	5b		 pop	 ebx
  00619	8b e5		 mov	 esp, ebp
  0061b	5d		 pop	 ebp
  0061c	c2 08 00	 ret	 8
?clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@H@Z ENDP ; clip_3d_dual_texture_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z
_TEXT	SEGMENT
tv215 = -72						; size = 4
tv184 = -72						; size = 4
tv153 = -72						; size = 4
tv90 = -72						; size = 4
tv212 = -68						; size = 4
tv181 = -68						; size = 4
tv150 = -68						; size = 4
tv87 = -68						; size = 4
_polygon$ = 8						; size = 4
_outcode$ = 12						; size = 4
?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z PROC		; clip_3d_polygon, COMDAT

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 206  : 
; 207  : 	number_of_polygons_screen_clipped++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_polygons_screen_clipped@@3HA ; number_of_polygons_screen_clipped
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_polygons_screen_clipped@@3HA, eax ; number_of_polygons_screen_clipped

; 208  : 
; 209  : 	if ( outcode & CLIP_LEFT )

  00016	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	0f 84 74 01 00
	00		 je	 $LN10@clip_3d_po

; 210  : 	{
; 211  : 	
; 212  : 		//
; 213  : 		// First clip against the left side of the viewing rectangle
; 214  : 		//
; 215  : 	
; 216  : 		clip_list = NULL;

  00022	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 217  : 	
; 218  : 		clip_point = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 219  : 	
; 220  : 		last_point = polygon;

  00036	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00039	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 221  : 	
; 222  : 		this_point = polygon->next_vertex;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00041	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00044	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 223  : 	
; 224  : 		if ( polygon->i >= active_viewport.x_min )

  0004a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0004d	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00052	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00059	72 1a		 jb	 SHORT $LN11@clip_3d_po

; 225  : 		{
; 226  : 	
; 227  : 			//
; 228  : 			// Start the clipped list off.
; 229  : 			//
; 230  : 	
; 231  : 			clip_list = polygon;

  0005b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0005e	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 232  : 	
; 233  : 			clip_point = polygon;

  00063	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 234  : 	
; 235  : 			polygon->next_vertex = NULL;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0006e	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN11@clip_3d_po:

; 236  : 		}
; 237  : 	
; 238  : 		while ( this_point )

  00075	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  0007c	0f 84 94 00 00
	00		 je	 $LN3@clip_3d_po

; 239  : 		{
; 240  : 	
; 241  : 			if ( this_point->i >= active_viewport.x_min )

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00087	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0008c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00093	72 3f		 jb	 SHORT $LN12@clip_3d_po

; 242  : 			{
; 243  : 	
; 244  : 				//
; 245  : 				// This point is inside the screen boundary
; 246  : 				//
; 247  : 	
; 248  : 				if ( last_point->i < active_viewport.x_min )

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0009a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  000a2	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  000a6	76 12		 jbe	 SHORT $LN14@clip_3d_po

; 249  : 				{
; 250  : 	
; 251  : 					//
; 252  : 					//	The last point isn't in the screen, but this one is, find intersection
; 253  : 					//
; 254  : 	
; 255  : 					insert_xmin_coordinate ( last_point, this_point );

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000ad	50		 push	 eax
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ?insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmin_coordinate
$LN14@clip_3d_po:

; 256  : 				}
; 257  : 	
; 258  : 				//
; 259  : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put 1.0 in!
; 260  : 				//
; 261  : 	
; 262  : 				clip_point->next_vertex = this_point;

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000c5	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 263  : 	
; 264  : 				clip_point = this_point;

  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000cd	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 265  : 			}
; 266  : 			else

  000d2	eb 25		 jmp	 SHORT $LN15@clip_3d_po
$LN12@clip_3d_po:

; 267  : 			{
; 268  : 	
; 269  : 				//
; 270  : 				// This point isn't in the screen area
; 271  : 				//
; 272  : 	
; 273  : 				if ( last_point->i >= active_viewport.x_min )

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000d9	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  000de	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  000e5	72 12		 jb	 SHORT $LN15@clip_3d_po

; 274  : 				{
; 275  : 	
; 276  : 					//
; 277  : 					// The last point was visible - find intersection point
; 278  : 					//
; 279  : 					
; 280  : 					insert_xmin_coordinate ( last_point, this_point );

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000ec	50		 push	 eax
  000ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 ?insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmin_coordinate
$LN15@clip_3d_po:

; 281  : 				}
; 282  : 			}
; 283  : 	
; 284  : 			last_point = this_point;

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000fe	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 285  : 	
; 286  : 			this_point = this_point->next_vertex;

  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00108	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0010b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 287  : 		}

  00111	e9 5f ff ff ff	 jmp	 $LN11@clip_3d_po
$LN3@clip_3d_po:

; 288  : 	
; 289  : 		if ( !clip_point )

  00116	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0011d	75 07		 jne	 SHORT $LN16@clip_3d_po

; 290  : 		{
; 291  : 	
; 292  : 			return ( NULL );						// If there are no valid points in the polygon, exit

  0011f	33 c0		 xor	 eax, eax
  00121	e9 f0 04 00 00	 jmp	 $LN1@clip_3d_po
$LN16@clip_3d_po:

; 293  : 		}
; 294  : 	
; 295  : 		if ( ( last_point->i < active_viewport.x_min ) ^ ( polygon->i < active_viewport.x_min ) )

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0012b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00133	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  00137	76 09		 jbe	 SHORT $LN43@clip_3d_po
  00139	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  00140	eb 07		 jmp	 SHORT $LN44@clip_3d_po
$LN43@clip_3d_po:
  00142	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN44@clip_3d_po:
  00149	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  0014c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00154	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  00158	76 09		 jbe	 SHORT $LN45@clip_3d_po
  0015a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  00161	eb 07		 jmp	 SHORT $LN46@clip_3d_po
$LN45@clip_3d_po:
  00163	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN46@clip_3d_po:
  0016a	8b 55 bc	 mov	 edx, DWORD PTR tv87[ebp]
  0016d	33 55 b8	 xor	 edx, DWORD PTR tv90[ebp]
  00170	74 10		 je	 SHORT $LN17@clip_3d_po

; 296  : 		{
; 297  : 	
; 298  : 			//
; 299  : 			// The last point in the polygon was off the screen, the first 1.0 isn't, so add a clip point
; 300  : 			//
; 301  : 	
; 302  : 			insert_xmin_coordinate ( last_point, polygon );

  00172	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00175	50		 push	 eax
  00176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0017c	51		 push	 ecx
  0017d	e8 00 00 00 00	 call	 ?insert_xmin_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmin_coordinate
$LN17@clip_3d_po:

; 303  : 		}
; 304  : 	
; 305  : 		clip_point->next_vertex = NULL;

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00187	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 306  : 	
; 307  : 		polygon = clip_list;

  0018e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00193	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN10@clip_3d_po:

; 308  : 	}
; 309  : 
; 310  : 	if ( outcode & CLIP_RIGHT )

  00196	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00199	83 e0 04	 and	 eax, 4
  0019c	0f 84 74 01 00
	00		 je	 $LN18@clip_3d_po

; 311  : 	{
; 312  : 	
; 313  : 		//
; 314  : 		// Next clip against the right side of the viewing rectangle
; 315  : 		//
; 316  : 	
; 317  : 		clip_list = NULL;

  001a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 318  : 	
; 319  : 		clip_point = NULL;

  001ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 320  : 	
; 321  : 		last_point = polygon;

  001b6	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001b9	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 322  : 	
; 323  : 		this_point = polygon->next_vertex;

  001be	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001c1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001c4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 324  : 	
; 325  : 		if ( polygon->i <= active_viewport.x_max )

  001ca	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001cd	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  001d5	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  001d9	72 1a		 jb	 SHORT $LN19@clip_3d_po

; 326  : 		{
; 327  : 	
; 328  : 			//
; 329  : 			// Start the clipped list off.
; 330  : 			//
; 331  : 	
; 332  : 			clip_list = polygon;

  001db	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001de	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 333  : 	
; 334  : 			clip_point = polygon;

  001e3	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001e6	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 335  : 	
; 336  : 			polygon->next_vertex = NULL;

  001eb	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001ee	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN19@clip_3d_po:

; 337  : 		}
; 338  : 	
; 339  : 		while ( this_point )

  001f5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  001fc	0f 84 94 00 00
	00		 je	 $LN5@clip_3d_po

; 340  : 		{
; 341  : 	
; 342  : 			if ( this_point->i <= active_viewport.x_max )

  00202	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00207	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0020f	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  00213	72 3f		 jb	 SHORT $LN20@clip_3d_po

; 343  : 			{
; 344  : 	
; 345  : 				//
; 346  : 				// This point is inside the screen boundary
; 347  : 				//
; 348  : 	
; 349  : 				if ( last_point->i > active_viewport.x_max )

  00215	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0021a	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0021f	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00226	76 12		 jbe	 SHORT $LN22@clip_3d_po

; 350  : 				{
; 351  : 	
; 352  : 					//
; 353  : 					//	The last point isn't in the screen, but this one is, find intersection
; 354  : 					//
; 355  : 	
; 356  : 					insert_xmax_coordinate ( last_point, this_point );

  00228	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0022d	50		 push	 eax
  0022e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 ?insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmax_coordinate
$LN22@clip_3d_po:

; 357  : 				}
; 358  : 	
; 359  : 				//
; 360  : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put 1.0 in!
; 361  : 				//
; 362  : 	
; 363  : 				clip_point->next_vertex = this_point;

  0023a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0023f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00245	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 364  : 	
; 365  : 				clip_point = this_point;

  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0024d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 366  : 			}
; 367  : 			else

  00252	eb 25		 jmp	 SHORT $LN23@clip_3d_po
$LN20@clip_3d_po:

; 368  : 			{
; 369  : 	
; 370  : 				//
; 371  : 				// This point isn't in the screen area
; 372  : 				//
; 373  : 	
; 374  : 				if ( last_point->i <= active_viewport.x_max )

  00254	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00259	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00261	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  00265	72 12		 jb	 SHORT $LN23@clip_3d_po

; 375  : 				{
; 376  : 	
; 377  : 					//
; 378  : 					// The last point was visible - find intersection point
; 379  : 					//
; 380  : 					
; 381  : 					insert_xmax_coordinate ( last_point, this_point );

  00267	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0026c	50		 push	 eax
  0026d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00273	51		 push	 ecx
  00274	e8 00 00 00 00	 call	 ?insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmax_coordinate
$LN23@clip_3d_po:

; 382  : 				}
; 383  : 			}
; 384  : 	
; 385  : 			last_point = this_point;

  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0027e	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 386  : 	
; 387  : 			this_point = this_point->next_vertex;

  00283	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00288	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0028b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 388  : 		}

  00291	e9 5f ff ff ff	 jmp	 $LN19@clip_3d_po
$LN5@clip_3d_po:

; 389  : 	
; 390  : 		if ( !clip_point )

  00296	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0029d	75 07		 jne	 SHORT $LN24@clip_3d_po

; 391  : 		{
; 392  : 	
; 393  : 			return ( NULL );

  0029f	33 c0		 xor	 eax, eax
  002a1	e9 70 03 00 00	 jmp	 $LN1@clip_3d_po
$LN24@clip_3d_po:

; 394  : 		}
; 395  : 	
; 396  : 		if ( ( last_point->i > active_viewport.x_max ) ^ ( polygon->i > active_viewport.x_max ) )

  002a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  002ab	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  002b0	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  002b7	76 09		 jbe	 SHORT $LN47@clip_3d_po
  002b9	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv150[ebp], 1
  002c0	eb 07		 jmp	 SHORT $LN48@clip_3d_po
$LN47@clip_3d_po:
  002c2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv150[ebp], 0
$LN48@clip_3d_po:
  002c9	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  002cc	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  002d1	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  002d8	76 09		 jbe	 SHORT $LN49@clip_3d_po
  002da	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv153[ebp], 1
  002e1	eb 07		 jmp	 SHORT $LN50@clip_3d_po
$LN49@clip_3d_po:
  002e3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN50@clip_3d_po:
  002ea	8b 55 bc	 mov	 edx, DWORD PTR tv150[ebp]
  002ed	33 55 b8	 xor	 edx, DWORD PTR tv153[ebp]
  002f0	74 10		 je	 SHORT $LN25@clip_3d_po

; 397  : 		{
; 398  : 	
; 399  : 			//
; 400  : 			// The last point in the polygon was off the screen, the first 1.0 isn't, so add a clip point
; 401  : 			//
; 402  : 	
; 403  : 			insert_xmax_coordinate ( last_point, polygon );

  002f2	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  002f5	50		 push	 eax
  002f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  002fc	51		 push	 ecx
  002fd	e8 00 00 00 00	 call	 ?insert_xmax_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmax_coordinate
$LN25@clip_3d_po:

; 404  : 		}
; 405  : 	
; 406  : 		clip_point->next_vertex = NULL;

  00302	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00307	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 407  : 	
; 408  : 		polygon = clip_list;

  0030e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00313	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN18@clip_3d_po:

; 409  : 	}
; 410  : 
; 411  : 	if ( outcode & CLIP_TOP )

  00316	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00319	83 e0 02	 and	 eax, 2
  0031c	0f 84 74 01 00
	00		 je	 $LN26@clip_3d_po

; 412  : 	{
; 413  : 	
; 414  : 		//
; 415  : 		// Next clip against the top of the viewing rectangle
; 416  : 		//
; 417  : 	
; 418  : 		clip_list = NULL;

  00322	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 419  : 	
; 420  : 		clip_point = NULL;

  0032c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 421  : 	
; 422  : 		last_point = polygon;

  00336	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00339	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 423  : 	
; 424  : 		this_point = polygon->next_vertex;

  0033e	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00341	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00344	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 425  : 	
; 426  : 		if ( polygon->j >= active_viewport.y_min )

  0034a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0034d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00352	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00359	72 1a		 jb	 SHORT $LN27@clip_3d_po

; 427  : 		{
; 428  : 	
; 429  : 			//
; 430  : 			// Start the clipped list off.
; 431  : 			//
; 432  : 	
; 433  : 			clip_list = polygon;

  0035b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0035e	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 434  : 	
; 435  : 			clip_point = polygon;

  00363	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00366	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 436  : 	
; 437  : 			polygon->next_vertex = NULL;

  0036b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0036e	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN27@clip_3d_po:

; 438  : 		}
; 439  : 	
; 440  : 		while ( this_point )

  00375	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  0037c	0f 84 94 00 00
	00		 je	 $LN7@clip_3d_po

; 441  : 		{
; 442  : 	
; 443  : 			if ( this_point->j >= active_viewport.y_min )

  00382	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00387	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0038c	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00393	72 3f		 jb	 SHORT $LN28@clip_3d_po

; 444  : 			{
; 445  : 	
; 446  : 				//
; 447  : 				// This point is inside the screen boundary
; 448  : 				//
; 449  : 	
; 450  : 				if ( last_point->j < active_viewport.y_min )

  00395	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0039a	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  003a2	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  003a6	76 12		 jbe	 SHORT $LN30@clip_3d_po

; 451  : 				{
; 452  : 	
; 453  : 					//
; 454  : 					//	The last point isn't in the screen, but this one is, find intersection
; 455  : 					//
; 456  : 	
; 457  : 					insert_ymin_coordinate ( last_point, this_point );

  003a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003ad	50		 push	 eax
  003ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  003b4	51		 push	 ecx
  003b5	e8 00 00 00 00	 call	 ?insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymin_coordinate
$LN30@clip_3d_po:

; 458  : 				}
; 459  : 	
; 460  : 				//
; 461  : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put one in!
; 462  : 				//
; 463  : 	
; 464  : 				clip_point->next_vertex = this_point;

  003ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  003bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003c5	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 465  : 	
; 466  : 				clip_point = this_point;

  003c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003cd	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 467  : 			}
; 468  : 			else

  003d2	eb 25		 jmp	 SHORT $LN31@clip_3d_po
$LN28@clip_3d_po:

; 469  : 			{
; 470  : 	
; 471  : 				//
; 472  : 				// This point isn't in the screen area
; 473  : 				//
; 474  : 	
; 475  : 				if ( last_point->j >= active_viewport.y_min )

  003d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  003d9	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  003de	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  003e5	72 12		 jb	 SHORT $LN31@clip_3d_po

; 476  : 				{
; 477  : 	
; 478  : 					//
; 479  : 					// The last point was visible - find intersection point
; 480  : 					//
; 481  : 					
; 482  : 					insert_ymin_coordinate ( last_point, this_point );

  003e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003ec	50		 push	 eax
  003ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  003f3	51		 push	 ecx
  003f4	e8 00 00 00 00	 call	 ?insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymin_coordinate
$LN31@clip_3d_po:

; 483  : 				}
; 484  : 			}
; 485  : 	
; 486  : 			last_point = this_point;

  003f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003fe	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 487  : 	
; 488  : 			this_point = this_point->next_vertex;

  00403	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00408	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0040b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 489  : 		}

  00411	e9 5f ff ff ff	 jmp	 $LN27@clip_3d_po
$LN7@clip_3d_po:

; 490  : 	
; 491  : 		if ( !clip_point )

  00416	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0041d	75 07		 jne	 SHORT $LN32@clip_3d_po

; 492  : 		{
; 493  : 	
; 494  : 			return ( NULL );

  0041f	33 c0		 xor	 eax, eax
  00421	e9 f0 01 00 00	 jmp	 $LN1@clip_3d_po
$LN32@clip_3d_po:

; 495  : 		}
; 496  : 	
; 497  : 		if ( ( last_point->j < active_viewport.y_min ) ^ ( polygon->j < active_viewport.y_min ) )

  00426	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0042b	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00433	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  00437	76 09		 jbe	 SHORT $LN51@clip_3d_po
  00439	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv181[ebp], 1
  00440	eb 07		 jmp	 SHORT $LN52@clip_3d_po
$LN51@clip_3d_po:
  00442	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv181[ebp], 0
$LN52@clip_3d_po:
  00449	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  0044c	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00454	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  00458	76 09		 jbe	 SHORT $LN53@clip_3d_po
  0045a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv184[ebp], 1
  00461	eb 07		 jmp	 SHORT $LN54@clip_3d_po
$LN53@clip_3d_po:
  00463	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN54@clip_3d_po:
  0046a	8b 55 bc	 mov	 edx, DWORD PTR tv181[ebp]
  0046d	33 55 b8	 xor	 edx, DWORD PTR tv184[ebp]
  00470	74 10		 je	 SHORT $LN33@clip_3d_po

; 498  : 		{
; 499  : 	
; 500  : 			//
; 501  : 			// The last point in the polygon was off the screen, the first one isn't, so add a clip point
; 502  : 			//
; 503  : 	
; 504  : 			insert_ymin_coordinate ( last_point, polygon );

  00472	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00475	50		 push	 eax
  00476	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0047c	51		 push	 ecx
  0047d	e8 00 00 00 00	 call	 ?insert_ymin_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymin_coordinate
$LN33@clip_3d_po:

; 505  : 		}
; 506  : 	
; 507  : 		clip_point->next_vertex = NULL;

  00482	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00487	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 508  : 	
; 509  : 		polygon = clip_list;

  0048e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00493	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN26@clip_3d_po:

; 510  : 	}
; 511  : 
; 512  : 	if ( outcode & CLIP_BOTTOM )

  00496	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00499	83 e0 08	 and	 eax, 8
  0049c	0f 84 71 01 00
	00		 je	 $LN34@clip_3d_po

; 513  : 	{
; 514  : 	
; 515  : 		//
; 516  : 		// Next clip against the bottom of the viewing rectangle
; 517  : 		//
; 518  : 	
; 519  : 		clip_list = NULL;

  004a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 520  : 	
; 521  : 		clip_point = NULL;

  004ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 522  : 	
; 523  : 		last_point = polygon;

  004b6	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004b9	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 524  : 	
; 525  : 		this_point = polygon->next_vertex;

  004be	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004c1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  004c4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 526  : 	
; 527  : 		if ( polygon->j <= active_viewport.y_max )

  004ca	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004cd	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  004d5	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  004d9	72 1a		 jb	 SHORT $LN35@clip_3d_po

; 528  : 		{
; 529  : 	
; 530  : 			//
; 531  : 			// Start the clipped list off.
; 532  : 			//
; 533  : 	
; 534  : 			clip_list = polygon;

  004db	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004de	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 535  : 	
; 536  : 			clip_point = polygon;

  004e3	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004e6	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 537  : 	
; 538  : 			polygon->next_vertex = NULL;

  004eb	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004ee	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN35@clip_3d_po:

; 539  : 		}
; 540  : 	
; 541  : 		while ( this_point )

  004f5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  004fc	0f 84 94 00 00
	00		 je	 $LN9@clip_3d_po

; 542  : 		{
; 543  : 	
; 544  : 			if ( this_point->j <= active_viewport.y_max )

  00502	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00507	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  0050f	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  00513	72 3f		 jb	 SHORT $LN36@clip_3d_po

; 545  : 			{
; 546  : 	
; 547  : 				//
; 548  : 				// This point is inside the screen boundary
; 549  : 				//
; 550  : 	
; 551  : 				if ( last_point->j > active_viewport.y_max )

  00515	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0051a	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0051f	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00526	76 12		 jbe	 SHORT $LN38@clip_3d_po

; 552  : 				{
; 553  : 	
; 554  : 					//
; 555  : 					//	The last point isn't in the screen, but this one is, find intersection
; 556  : 					//
; 557  : 	
; 558  : 					insert_ymax_coordinate ( last_point, this_point );

  00528	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0052d	50		 push	 eax
  0052e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00534	51		 push	 ecx
  00535	e8 00 00 00 00	 call	 ?insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymax_coordinate
$LN38@clip_3d_po:

; 559  : 				}
; 560  : 	
; 561  : 				//
; 562  : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put 1.0 in!
; 563  : 				//
; 564  : 	
; 565  : 				clip_point->next_vertex = this_point;

  0053a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0053f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00545	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 566  : 	
; 567  : 				clip_point = this_point;

  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0054d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 568  : 			}
; 569  : 			else

  00552	eb 25		 jmp	 SHORT $LN39@clip_3d_po
$LN36@clip_3d_po:

; 570  : 			{
; 571  : 	
; 572  : 				//
; 573  : 				// This point isn't in the screen area
; 574  : 				//
; 575  : 	
; 576  : 				if ( last_point->j <= active_viewport.y_max )

  00554	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00559	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00561	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  00565	72 12		 jb	 SHORT $LN39@clip_3d_po

; 577  : 				{
; 578  : 	
; 579  : 					//
; 580  : 					// The last point was visible - find intersection point
; 581  : 					//
; 582  : 					
; 583  : 					insert_ymax_coordinate ( last_point, this_point );

  00567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0056c	50		 push	 eax
  0056d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00573	51		 push	 ecx
  00574	e8 00 00 00 00	 call	 ?insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymax_coordinate
$LN39@clip_3d_po:

; 584  : 				}
; 585  : 			}
; 586  : 	
; 587  : 			last_point = this_point;

  00579	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0057e	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 588  : 	
; 589  : 			this_point = this_point->next_vertex;

  00583	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00588	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0058b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 590  : 		}

  00591	e9 5f ff ff ff	 jmp	 $LN35@clip_3d_po
$LN9@clip_3d_po:

; 591  : 	
; 592  : 		if ( !clip_point )

  00596	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0059d	75 04		 jne	 SHORT $LN40@clip_3d_po

; 593  : 		{
; 594  : 	
; 595  : 			return ( NULL );

  0059f	33 c0		 xor	 eax, eax
  005a1	eb 73		 jmp	 SHORT $LN1@clip_3d_po
$LN40@clip_3d_po:

; 596  : 		}
; 597  : 	
; 598  : 		// Case 0 last point is on screen, first point is on screen			NO ACTION
; 599  : 		//	Case 1 last point is off screen, first point is on screen		GENERATE CLIP
; 600  : 		// Case 2 last point is on screen, first point is off screen		GENERATE CLIP
; 601  : 		// Case 3 last point is off screen, first point is off screen		NO ACTION
; 602  : 	
; 603  : 		if ( ( last_point->j > active_viewport.y_max ) ^ ( polygon->j > active_viewport.y_max ) )

  005a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  005a8	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  005ad	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  005b4	76 09		 jbe	 SHORT $LN55@clip_3d_po
  005b6	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv212[ebp], 1
  005bd	eb 07		 jmp	 SHORT $LN56@clip_3d_po
$LN55@clip_3d_po:
  005bf	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv212[ebp], 0
$LN56@clip_3d_po:
  005c6	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  005c9	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  005ce	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  005d5	76 09		 jbe	 SHORT $LN57@clip_3d_po
  005d7	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv215[ebp], 1
  005de	eb 07		 jmp	 SHORT $LN58@clip_3d_po
$LN57@clip_3d_po:
  005e0	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv215[ebp], 0
$LN58@clip_3d_po:
  005e7	8b 55 bc	 mov	 edx, DWORD PTR tv212[ebp]
  005ea	33 55 b8	 xor	 edx, DWORD PTR tv215[ebp]
  005ed	74 10		 je	 SHORT $LN41@clip_3d_po

; 604  : 		{
; 605  : 	
; 606  : 			//
; 607  : 			// The last point in the polygon was off the screen, the first one isn't, so add a clip point
; 608  : 			//
; 609  : 	
; 610  : 			insert_ymax_coordinate ( last_point, polygon );

  005ef	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  005f2	50		 push	 eax
  005f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  005f9	51		 push	 ecx
  005fa	e8 00 00 00 00	 call	 ?insert_ymax_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymax_coordinate
$LN41@clip_3d_po:

; 611  : 		}
; 612  : 	
; 613  : 		clip_point->next_vertex = NULL;

  005ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00604	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 614  : 
; 615  : 		polygon = clip_list;

  0060b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00610	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN34@clip_3d_po:

; 616  : 	}
; 617  : 
; 618  : 	return ( polygon );

  00613	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
$LN1@clip_3d_po:

; 619  : }

  00616	5f		 pop	 edi
  00617	5e		 pop	 esi
  00618	5b		 pop	 ebx
  00619	8b e5		 mov	 esp, ebp
  0061b	5d		 pop	 ebp
  0061c	c2 08 00	 ret	 8
?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ENDP		; clip_3d_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?set_3d_clip_extents@@YGXMMMMMMMM@Z
_TEXT	SEGMENT
_yonder$ = 8						; size = 4
_hither$ = 12						; size = 4
_xmin$ = 16						; size = 4
_ymin$ = 20						; size = 4
_xmax$ = 24						; size = 4
_ymax$ = 28						; size = 4
_zbuffer_zmin$ = 32					; size = 4
_zbuffer_zmax$ = 36					; size = 4
?set_3d_clip_extents@@YGXMMMMMMMM@Z PROC		; set_3d_clip_extents, COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  : 
; 187  : 	clip_yonder = yonder;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _yonder$[ebp]
  0000e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?clip_yonder@@3MA, xmm0

; 188  : 
; 189  : 	clip_yonder_reciprocal = 1.0 / yonder;

  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _yonder$[ebp]
  0001b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00023	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00027	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0002b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?clip_yonder_reciprocal@@3MA, xmm0

; 190  : 
; 191  : 	clip_hither = hither;

  00033	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _hither$[ebp]
  00038	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?clip_hither@@3MA, xmm0

; 192  : 
; 193  : 	clip_hither_reciprocal = 1.0 / hither;

  00040	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _hither$[ebp]
  00045	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0004d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00051	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00055	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?clip_hither_reciprocal@@3MA, xmm0

; 194  : 
; 195  : 	set_full_viewport ( xmin, ymin, xmax, ymax, zbuffer_zmin, zbuffer_zmax );

  0005d	51		 push	 ecx
  0005e	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _zbuffer_zmax$[ebp]
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	51		 push	 ecx
  00069	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _zbuffer_zmin$[ebp]
  0006e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00073	51		 push	 ecx
  00074	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ymax$[ebp]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	51		 push	 ecx
  0007f	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _xmax$[ebp]
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	51		 push	 ecx
  0008a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ymin$[ebp]
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	51		 push	 ecx
  00095	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xmin$[ebp]
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	e8 00 00 00 00	 call	 ?set_full_viewport@@YGXMMMMMM@Z ; set_full_viewport

; 196  : 
; 197  : 	set_zbuffer_parameters ( hither, yonder, zbuffer_zmin, zbuffer_zmax );

  000a4	51		 push	 ecx
  000a5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _zbuffer_zmax$[ebp]
  000aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000af	51		 push	 ecx
  000b0	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _zbuffer_zmin$[ebp]
  000b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ba	51		 push	 ecx
  000bb	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _yonder$[ebp]
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	51		 push	 ecx
  000c6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _hither$[ebp]
  000cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d0	e8 00 00 00 00	 call	 ?set_zbuffer_parameters@@YGXMMMM@Z ; set_zbuffer_parameters

; 198  : }

  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 20 00	 ret	 32			; 00000020H
?set_3d_clip_extents@@YGXMMMMMMMM@Z ENDP		; set_3d_clip_extents
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?report_clip_statistics@@YGXXZ
_TEXT	SEGMENT
?report_clip_statistics@@YGXXZ PROC			; report_clip_statistics, COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 156  : 
; 157  : #if REPORT_CLIP_STATISTICS
; 158  : 
; 159  : 	debug_log ( "Hither clipped: %d, Yonder clipped: %d, Screen clipped: %d",
; 160  : 							number_of_polygons_hither_clipped,
; 161  : 							number_of_polygons_yonder_clipped,
; 162  : 							number_of_polygons_screen_clipped );
; 163  : 
; 164  : 	debug_log ( "Near inserted: %d, Far inserted: %d",
; 165  : 							number_of_near_coordinates_inserted,
; 166  : 							number_of_far_coordinates_inserted );
; 167  : 
; 168  : 	debug_log ( "Xmin inserted: %d, Xmax inserted: %d",
; 169  : 							number_of_xmin_coordinates_inserted,
; 170  : 							number_of_xmax_coordinates_inserted );
; 171  : 
; 172  : 	debug_log ( "Ymin inserted: %d, Ymax inserted: %d",
; 173  : 							number_of_ymin_coordinates_inserted,
; 174  : 							number_of_ymax_coordinates_inserted );
; 175  : 
; 176  : #endif
; 177  : 
; 178  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?report_clip_statistics@@YGXXZ ENDP			; report_clip_statistics
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?reset_clip_statistics@@YGXXZ
_TEXT	SEGMENT
?reset_clip_statistics@@YGXXZ PROC			; reset_clip_statistics, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 138  : 
; 139  : 	number_of_xmin_coordinates_inserted = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_xmin_coordinates_inserted@@3HA, 0 ; number_of_xmin_coordinates_inserted

; 140  : 
; 141  : 	number_of_xmax_coordinates_inserted = 0;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_xmax_coordinates_inserted@@3HA, 0 ; number_of_xmax_coordinates_inserted

; 142  : 
; 143  : 	number_of_ymin_coordinates_inserted = 0;

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_ymin_coordinates_inserted@@3HA, 0 ; number_of_ymin_coordinates_inserted

; 144  : 
; 145  : 	number_of_ymax_coordinates_inserted = 0;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_ymax_coordinates_inserted@@3HA, 0 ; number_of_ymax_coordinates_inserted

; 146  : 
; 147  : 	number_of_polygons_screen_clipped = 0;

  00031	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_polygons_screen_clipped@@3HA, 0 ; number_of_polygons_screen_clipped

; 148  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?reset_clip_statistics@@YGXXZ ENDP			; reset_clip_statistics
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\clip.c
;	COMDAT ?initialise_3d_clip_system@@YGXXZ
_TEXT	SEGMENT
?initialise_3d_clip_system@@YGXXZ PROC			; initialise_3d_clip_system, COMDAT

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 130  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?initialise_3d_clip_system@@YGXXZ ENDP			; initialise_3d_clip_system
_TEXT	ENDS
END
