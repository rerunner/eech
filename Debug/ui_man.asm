; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\userint2\ui_man.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?captured_object@@3PAPAUUI_OBJECT@@A		; captured_object
PUBLIC	?highlighted_object@@3PAUUI_OBJECT@@A		; highlighted_object
PUBLIC	?lock_object_capture@@3HA			; lock_object_capture
PUBLIC	?ui_user_redraw_function@@3P6GHXZA		; ui_user_redraw_function
PUBLIC	?ui_user_function@@3P6GXXZA			; ui_user_function
PUBLIC	?root_object@@3PAUUI_OBJECT@@A			; root_object
PUBLIC	?left_captured_object@@3PAUUI_OBJECT@@A		; left_captured_object
PUBLIC	?right_captured_object@@3PAUUI_OBJECT@@A	; right_captured_object
_BSS	SEGMENT
?captured_object@@3PAPAUUI_OBJECT@@A DD 01H DUP (?)	; captured_object
?highlighted_object@@3PAUUI_OBJECT@@A DD 01H DUP (?)	; highlighted_object
?lock_object_capture@@3HA DD 01H DUP (?)		; lock_object_capture
?ui_user_redraw_function@@3P6GHXZA DD 01H DUP (?)	; ui_user_redraw_function
?ui_user_function@@3P6GXXZA DD 01H DUP (?)		; ui_user_function
?root_object@@3PAUUI_OBJECT@@A DD 01H DUP (?)		; root_object
?left_captured_object@@3PAUUI_OBJECT@@A DD 01H DUP (?)	; left_captured_object
?right_captured_object@@3PAUUI_OBJECT@@A DD 01H DUP (?)	; right_captured_object
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?ui_object_manager@@YGXXZ			; ui_object_manager
PUBLIC	?ui_repaint@@YGXXZ				; ui_repaint
PUBLIC	?ui_set_root_object@@YGXPAUUI_OBJECT@@@Z	; ui_set_root_object
PUBLIC	?ui_get_root_object@@YGPAUUI_OBJECT@@XZ		; ui_get_root_object
PUBLIC	?set_ui_redraw@@YGXH@Z				; set_ui_redraw
PUBLIC	?get_ui_redraw@@YGHXZ				; get_ui_redraw
PUBLIC	?check_ui_object_for_selection@@YGPAUUI_OBJECT@@PAU1@HH@Z ; check_ui_object_for_selection
PUBLIC	?ui_left_mouse_button@@YGXPAUEVENT@@@Z		; ui_left_mouse_button
PUBLIC	?ui_right_mouse_button@@YGXPAUEVENT@@@Z		; ui_right_mouse_button
PUBLIC	?set_exit_ui@@YGXH@Z				; set_exit_ui
PUBLIC	?ui_force_update@@YGXXZ				; ui_force_update
PUBLIC	?ui_set_user_function@@YGXP6GXXZ@Z		; ui_set_user_function
PUBLIC	?ui_set_user_redraw_function@@YGXP6GHXZ@Z	; ui_set_user_redraw_function
PUBLIC	?get_ui_last_event@@YGPAUEVENT@@XZ		; get_ui_last_event
PUBLIC	?save_ui_screen@@YGXPAUEVENT@@@Z		; save_ui_screen
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?__LINE__Var@?0??ui_object_manager@@YGXXZ@4JA	; `ui_object_manager'::`1'::__LINE__Var
PUBLIC	??_C@_0DH@IDDOGDGN@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BE@HDFJPKFL@get_ui_installed?5?$CI?$CJ@	; `string'
PUBLIC	??_C@_0M@GIKIFLEA@root_object@			; `string'
PUBLIC	??_C@_0P@BKFHGBK@screen?$CF02d?4tga@		; `string'
PUBLIC	??_C@_0BB@BPHMLPAG@Screen?5Shot?5?3?5?$CFs@	; `string'
PUBLIC	??_C@_0CE@PHANCIEG@Error?5Saving?5Screen?3?5Limit?5exce@ ; `string'
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?get_mouse_x@@YGHXZ:PROC			; get_mouse_x
EXTRN	?get_mouse_y@@YGHXZ:PROC			; get_mouse_y
EXTRN	?process_events@@YGXXZ:PROC			; process_events
EXTRN	?set_delta_time@@YGXXZ:PROC			; set_delta_time
EXTRN	?get_system_time@@YGIXZ:PROC			; get_system_time
EXTRN	?system_sleep@@YGXH@Z:PROC			; system_sleep
EXTRN	?file_exist@@YGHPBD@Z:PROC			; file_exist
EXTRN	?ddraw_flip_surface@@YGHXZ:PROC			; ddraw_flip_surface
EXTRN	?draw_raw_mouse_pointer@@YGXHH@Z:PROC		; draw_raw_mouse_pointer
EXTRN	?save_tga_screen@@YGXPBD@Z:PROC			; save_tga_screen
EXTRN	?clear_zbuffer_screen@@YGXXZ:PROC		; clear_zbuffer_screen
EXTRN	?reset_tool_tips@@YGXXZ:PROC			; reset_tool_tips
EXTRN	?push_ui_screen@@YGXPAUUI_OBJECT@@@Z:PROC	; push_ui_screen
EXTRN	?update_ui_screen_stack@@YGXXZ:PROC		; update_ui_screen_stack
EXTRN	?fn_tool_tips_draw_ui_object@@3PAP6GXPAUUI_OBJECT@@@ZA:BYTE ; fn_tool_tips_draw_ui_object
EXTRN	?fn_get_ui_object_x@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x
EXTRN	?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_y
EXTRN	?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x_size
EXTRN	?fn_get_ui_object_y_size@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_y_size
EXTRN	?fn_get_ui_object_x_origin@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x_origin
EXTRN	?fn_get_ui_object_y_origin@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_y_origin
EXTRN	?fn_get_ui_object_drawable@@3PAP6GHPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_drawable
EXTRN	?fn_set_ui_object_tool_tips_timer@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_tool_tips_timer
EXTRN	?fn_get_ui_object_highlightable@@3PAP6GHPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_highlightable
EXTRN	?fn_set_ui_object_highlighted@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_highlighted
EXTRN	?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA:BYTE ; fn_get_ui_object_parent
EXTRN	?fn_get_ui_object_child@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA:BYTE ; fn_get_ui_object_child
EXTRN	?fn_get_ui_object_next@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA:BYTE ; fn_get_ui_object_next
EXTRN	?fn_get_ui_object_prev@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA:BYTE ; fn_get_ui_object_prev
EXTRN	?fn_call_ui_object_function@@3PAP6GXPAUUI_OBJECT@@PAX@ZA:BYTE ; fn_call_ui_object_function
EXTRN	?fn_call_ui_object_right_function@@3PAP6GXPAUUI_OBJECT@@PAX@ZA:BYTE ; fn_call_ui_object_right_function
EXTRN	?fn_call_ui_object_highlighted_function@@3PAP6GXPAUUI_OBJECT@@PAX@ZA:BYTE ; fn_call_ui_object_highlighted_function
EXTRN	?fn_get_ui_object_notify_on@@3PAP6G?AW4NOTIFY_TYPES@@PAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_notify_on
EXTRN	?fn_get_ui_object_highlighted_notify_on@@3PAP6G?AW4NOTIFY_TYPES@@PAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_highlighted_notify_on
EXTRN	?ui_installed@@3HA:DWORD			; ui_installed
EXTRN	?current_screen@@3PAUUI_OBJECT@@A:DWORD		; current_screen
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?exit_ui@@3HA DD 01H DUP (?)				; exit_ui
?ui_last_event@@3UEVENT@@A DB 014H DUP (?)		; ui_last_event
?mouse_button_function@@3P6GXPAUUI_OBJECT@@PAX@ZA DD 01H DUP (?) ; mouse_button_function
?last_obj@?1??do_highlighting@@YGXXZ@4PAUUI_OBJECT@@A DD 01H DUP (?) ; `do_highlighting'::`2'::last_obj
_BSS	ENDS
;	COMDAT ??_C@_0CE@PHANCIEG@Error?5Saving?5Screen?3?5Limit?5exce@
CONST	SEGMENT
??_C@_0CE@PHANCIEG@Error?5Saving?5Screen?3?5Limit?5exce@ DB 'Error Saving'
	DB	' Screen: Limit exceeded', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BPHMLPAG@Screen?5Shot?5?3?5?$CFs@
CONST	SEGMENT
??_C@_0BB@BPHMLPAG@Screen?5Shot?5?3?5?$CFs@ DB 'Screen Shot : %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BKFHGBK@screen?$CF02d?4tga@
CONST	SEGMENT
??_C@_0P@BKFHGBK@screen?$CF02d?4tga@ DB 'screen%02d.tga', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GIKIFLEA@root_object@
CONST	SEGMENT
??_C@_0M@GIKIFLEA@root_object@ DB 'root_object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HDFJPKFL@get_ui_installed?5?$CI?$CJ@
CONST	SEGMENT
??_C@_0BE@HDFJPKFL@get_ui_installed?5?$CI?$CJ@ DB 'get_ui_installed ()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@IDDOGDGN@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DH@IDDOGDGN@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\userint2\ui_man.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ui_object_manager@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ui_object_manager@@YGXXZ@4JA DD 08bH	; `ui_object_manager'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?ui_redraw@@3HA DD 01H					; ui_redraw
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?do_highlighting@@YGXXZ
_TEXT	SEGMENT
_arg$ = -4						; size = 4
?do_highlighting@@YGXXZ PROC				; do_highlighting, COMDAT

; 794  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 795  : 
; 796  : 	static ui_object
; 797  : 		*last_obj = NULL;
; 798  : 
; 799  : 	int
; 800  : 		arg = 0;

	mov	DWORD PTR _arg$[ebp], 0

; 801  : 
; 802  : 	highlighted_object = check_ui_object_for_selection (current_screen, get_mouse_x (), get_mouse_y ());

	call	?get_mouse_y@@YGHXZ			; get_mouse_y
	push	eax
	call	?get_mouse_x@@YGHXZ			; get_mouse_x
	push	eax
	mov	eax, DWORD PTR ?current_screen@@3PAUUI_OBJECT@@A ; current_screen
	push	eax
	call	?check_ui_object_for_selection@@YGPAUUI_OBJECT@@PAU1@HH@Z ; check_ui_object_for_selection
	mov	DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A, eax ; highlighted_object

; 803  : 
; 804  : 	if (highlighted_object != last_obj)

	mov	eax, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	cmp	eax, DWORD PTR ?last_obj@?1??do_highlighting@@YGXXZ@4PAUUI_OBJECT@@A
	je	$LN2@do_highlig

; 805  : 	{
; 806  : 
; 807  : 		if ((last_obj) && (get_ui_object_highlightable (last_obj)))

	cmp	DWORD PTR ?last_obj@?1??do_highlighting@@YGXXZ@4PAUUI_OBJECT@@A, 0
	je	SHORT $LN4@do_highlig
	mov	eax, DWORD PTR ?last_obj@?1??do_highlighting@@YGXXZ@4PAUUI_OBJECT@@A
	push	eax
	mov	ecx, DWORD PTR ?last_obj@?1??do_highlighting@@YGXXZ@4PAUUI_OBJECT@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_highlightable@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	test	eax, eax
	je	SHORT $LN4@do_highlig

; 808  : 		{
; 809  : 
; 810  : 			arg = BUTTON_STATE_UP;

	mov	DWORD PTR _arg$[ebp], 1

; 811  : 
; 812  : 			#if DEBUG_USERINT
; 813  : 
; 814  : 			debug_log ("UI_MAN: setting object highlighted off. Calling highlighted function (arg %d)", arg);
; 815  : 
; 816  : 			#endif
; 817  : 
; 818  : 			set_ui_object_highlighted (last_obj, FALSE);

	push	0
	mov	eax, DWORD PTR ?last_obj@?1??do_highlighting@@YGXXZ@4PAUUI_OBJECT@@A
	push	eax
	mov	ecx, DWORD PTR ?last_obj@?1??do_highlighting@@YGXXZ@4PAUUI_OBJECT@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_set_ui_object_highlighted@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
	call	eax

; 819  : 
; 820  : 			call_ui_object_highlighted_function (last_obj, (void *) arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?last_obj@?1??do_highlighting@@YGXXZ@4PAUUI_OBJECT@@A
	push	ecx
	mov	edx, DWORD PTR ?last_obj@?1??do_highlighting@@YGXXZ@4PAUUI_OBJECT@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?fn_call_ui_object_highlighted_function@@3PAP6GXPAUUI_OBJECT@@PAX@ZA[eax*4]
	call	ecx
$LN4@do_highlig:

; 821  : 		}
; 822  : 
; 823  : 		if (highlighted_object)

	cmp	DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A, 0 ; highlighted_object
	je	SHORT $LN5@do_highlig

; 824  : 		{
; 825  : 
; 826  : 			if (get_ui_object_highlightable (highlighted_object))

	mov	eax, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	push	eax
	mov	ecx, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_highlightable@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	test	eax, eax
	je	SHORT $LN6@do_highlig

; 827  : 			{
; 828  : 
; 829  : 				arg = BUTTON_STATE_DOWN;

	mov	DWORD PTR _arg$[ebp], 2

; 830  : 
; 831  : 				#if DEBUG_USERINT
; 832  : 
; 833  : 				debug_log ("UI_MAN: setting object highlighted. Calling highlighted function (arg %d)", arg);
; 834  : 
; 835  : 				#endif
; 836  : 
; 837  : 				set_ui_object_highlighted (highlighted_object, TRUE);

	push	1
	mov	eax, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	push	eax
	mov	ecx, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_set_ui_object_highlighted@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
	call	eax

; 838  : 
; 839  : 				call_ui_object_highlighted_function (highlighted_object, (void *) arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	push	ecx
	mov	edx, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?fn_call_ui_object_highlighted_function@@3PAP6GXPAUUI_OBJECT@@PAX@ZA[eax*4]
	call	ecx
$LN6@do_highlig:

; 840  : 			}
; 841  : 
; 842  : 			set_ui_object_tool_tips_timer (highlighted_object, get_system_time () + TIME_1_SECOND);

	call	?get_system_time@@YGIXZ			; get_system_time
	add	eax, 1000				; 000003e8H
	push	eax
	mov	eax, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	push	eax
	mov	ecx, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_set_ui_object_tool_tips_timer@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
	call	eax
$LN5@do_highlig:

; 843  : 		}
; 844  : 
; 845  : 		#if DEBUG_USERINT
; 846  : 
; 847  : 		debug_log ("UI_MAN: resetting tool tips");
; 848  : 
; 849  : 		#endif
; 850  : 
; 851  : 		reset_tool_tips ();

	call	?reset_tool_tips@@YGXXZ			; reset_tool_tips
	jmp	SHORT $LN3@do_highlig
$LN2@do_highlig:

; 852  : 	}
; 853  : 	else if (highlighted_object)

	cmp	DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A, 0 ; highlighted_object
	je	SHORT $LN3@do_highlig

; 854  : 	{
; 855  : 
; 856  : 		if (get_ui_object_highlightable (highlighted_object))

	mov	eax, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	push	eax
	mov	ecx, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_highlightable@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	test	eax, eax
	je	SHORT $LN3@do_highlig

; 857  : 		{
; 858  : 
; 859  : 			if (get_ui_object_highlighted_notify_on (highlighted_object) == NOTIFY_TYPE_CONTINUAL)

	mov	eax, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	push	eax
	mov	ecx, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_highlighted_notify_on@@3PAP6G?AW4NOTIFY_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	cmp	eax, 6
	jne	SHORT $LN3@do_highlig

; 860  : 			{
; 861  : 
; 862  : 				call_ui_object_highlighted_function (highlighted_object, (void *) arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	push	ecx
	mov	edx, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?fn_call_ui_object_highlighted_function@@3PAP6GXPAUUI_OBJECT@@PAX@ZA[eax*4]
	call	ecx
$LN3@do_highlig:

; 863  : 			}
; 864  : 		}
; 865  : 	}
; 866  : 
; 867  : 	if (highlighted_object)

	cmp	DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A, 0 ; highlighted_object
	je	SHORT $LN10@do_highlig

; 868  : 	{
; 869  : 
; 870  : 		tool_tips_draw_ui_object (highlighted_object);

	mov	eax, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	push	eax
	mov	ecx, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_tool_tips_draw_ui_object@@3PAP6GXPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
$LN10@do_highlig:

; 871  : 	}
; 872  : 
; 873  : 	last_obj = highlighted_object;

	mov	eax, DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A ; highlighted_object
	mov	DWORD PTR ?last_obj@?1??do_highlighting@@YGXXZ@4PAUUI_OBJECT@@A, eax

; 874  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?do_highlighting@@YGXXZ ENDP				; do_highlighting
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?call_right_function@@YGXPAUUI_OBJECT@@PAX@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
_arg$ = 12						; size = 4
?call_right_function@@YGXPAUUI_OBJECT@@PAX@Z PROC	; call_right_function, COMDAT

; 537  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 538  : 
; 539  : 	// need to do this since call_ui_object_function is a macro..
; 540  : 
; 541  : 	call_ui_object_right_function (obj, arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?fn_call_ui_object_right_function@@3PAP6GXPAUUI_OBJECT@@PAX@ZA[eax*4]
	call	ecx

; 542  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?call_right_function@@YGXPAUUI_OBJECT@@PAX@Z ENDP	; call_right_function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?call_function@@YGXPAUUI_OBJECT@@PAX@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
_arg$ = 12						; size = 4
?call_function@@YGXPAUUI_OBJECT@@PAX@Z PROC		; call_function, COMDAT

; 525  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 526  : 
; 527  : 	// need to do this since call_ui_object_function is a macro..
; 528  : 
; 529  : 	call_ui_object_function (obj, arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?fn_call_ui_object_function@@3PAP6GXPAUUI_OBJECT@@PAX@ZA[eax*4]
	call	ecx

; 530  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?call_function@@YGXPAUUI_OBJECT@@PAX@Z ENDP		; call_function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_mouse_button_up@@YGXXZ
_TEXT	SEGMENT
_state$ = -20						; size = 4
_this_captured_object$ = -16				; size = 4
_current_obj$ = -12					; size = 4
_mouse_y$ = -8						; size = 4
_mouse_x$ = -4						; size = 4
?ui_mouse_button_up@@YGXXZ PROC				; ui_mouse_button_up, COMDAT

; 549  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 550  : 
; 551  : 	int
; 552  : 		mouse_x,
; 553  : 		mouse_y;
; 554  : 
; 555  : 	ui_object
; 556  : 		*current_obj,
; 557  : 		*this_captured_object;
; 558  : 
; 559  : 	int
; 560  : 		state = BUTTON_STATE_UP;

	mov	DWORD PTR _state$[ebp], 1

; 561  : 
; 562  : 	mouse_x = get_mouse_x ();

	call	?get_mouse_x@@YGHXZ			; get_mouse_x
	mov	DWORD PTR _mouse_x$[ebp], eax

; 563  : 
; 564  : 	mouse_y = get_mouse_y ();

	call	?get_mouse_y@@YGHXZ			; get_mouse_y
	mov	DWORD PTR _mouse_y$[ebp], eax

; 565  : 
; 566  : 	current_obj = get_ui_object_child (current_screen);

	mov	eax, DWORD PTR ?current_screen@@3PAUUI_OBJECT@@A ; current_screen
	push	eax
	mov	ecx, DWORD PTR ?current_screen@@3PAUUI_OBJECT@@A ; current_screen
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_child@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
	call	eax
	mov	DWORD PTR _current_obj$[ebp], eax

; 567  : 
; 568  : 	if (!current_obj)

	cmp	DWORD PTR _current_obj$[ebp], 0
	jne	SHORT $LN2@ui_mouse_b

; 569  : 	{
; 570  : 
; 571  : 		return;

	jmp	$LN1@ui_mouse_b
$LN2@ui_mouse_b:

; 572  : 	}
; 573  : 
; 574  : 	this_captured_object = check_ui_object_for_selection (current_obj, mouse_x, mouse_y);

	mov	eax, DWORD PTR _mouse_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mouse_x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current_obj$[ebp]
	push	edx
	call	?check_ui_object_for_selection@@YGPAUUI_OBJECT@@PAU1@HH@Z ; check_ui_object_for_selection
	mov	DWORD PTR _this_captured_object$[ebp], eax

; 575  : 
; 576  : 	if (lock_object_capture)

	cmp	DWORD PTR ?lock_object_capture@@3HA, 0	; lock_object_capture
	je	SHORT $LN3@ui_mouse_b

; 577  : 	{
; 578  : 
; 579  : 		this_captured_object = *captured_object;

	mov	eax, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _this_captured_object$[ebp], ecx
$LN3@ui_mouse_b:

; 580  : 	}
; 581  : 
; 582  : 	if (*captured_object)

	mov	eax, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@ui_mouse_b

; 583  : 	{
; 584  : 
; 585  : 		if (this_captured_object)

	cmp	DWORD PTR _this_captured_object$[ebp], 0
	je	SHORT $LN5@ui_mouse_b

; 586  : 		{
; 587  : 
; 588  : 			#if DEBUG_USERINT
; 589  : 		
; 590  : 			debug_log ("USERINT: object captured = %d, at %f, %f size %f, %f", this_captured_object->type, get_ui_object_x (this_captured_object), get_ui_object_y (this_captured_object), get_ui_object_x_size (this_captured_object), get_ui_object_y_size (this_captured_object));
; 591  : 		
; 592  : 			#endif
; 593  : 		
; 594  : 			if (this_captured_object == *captured_object)

	mov	eax, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
	mov	ecx, DWORD PTR _this_captured_object$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN7@ui_mouse_b

; 595  : 			{
; 596  : 
; 597  : 				#if DEBUG_USERINT
; 598  : 		
; 599  : 				debug_log ("USERINT: calling object function");
; 600  : 
; 601  : 				#endif
; 602  : 
; 603  : 				mouse_button_function (*captured_object, (void *) state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR ?mouse_button_function@@3P6GXPAUUI_OBJECT@@PAX@ZA

; 604  : 			}
; 605  : 			else

	jmp	SHORT $LN8@ui_mouse_b
$LN7@ui_mouse_b:

; 606  : 			{
; 607  : 
; 608  : 				#if DEBUG_USERINT
; 609  : 		
; 610  : 				debug_log ("USERINT: call both object invalid_state functions");
; 611  : 
; 612  : 				#endif
; 613  : 
; 614  : 				state = BUTTON_STATE_INVALID;

	mov	DWORD PTR _state$[ebp], 0

; 615  : 
; 616  : 				mouse_button_function (this_captured_object, (void *) state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this_captured_object$[ebp]
	push	ecx
	call	DWORD PTR ?mouse_button_function@@3P6GXPAUUI_OBJECT@@PAX@ZA

; 617  : 
; 618  : 				mouse_button_function (*captured_object, (void *) state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR ?mouse_button_function@@3P6GXPAUUI_OBJECT@@PAX@ZA
$LN8@ui_mouse_b:

; 619  : 			}
; 620  : 		}
; 621  : 		else

	jmp	SHORT $LN4@ui_mouse_b
$LN5@ui_mouse_b:

; 622  : 		{
; 623  : 
; 624  : 			#if DEBUG_USERINT
; 625  : 		
; 626  : 			debug_log ("USERINT: call object invalid_state function");
; 627  : 
; 628  : 			#endif
; 629  : 
; 630  : 			state = BUTTON_STATE_INVALID;

	mov	DWORD PTR _state$[ebp], 0

; 631  : 
; 632  : 			mouse_button_function (*captured_object, (void *) state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR ?mouse_button_function@@3P6GXPAUUI_OBJECT@@PAX@ZA
$LN4@ui_mouse_b:

; 633  : 		}
; 634  : 	}
; 635  : 
; 636  : 	*captured_object = NULL;

	mov	eax, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
	mov	DWORD PTR [eax], 0
$LN1@ui_mouse_b:

; 637  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ui_mouse_button_up@@YGXXZ ENDP				; ui_mouse_button_up
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_mouse_button_down@@YGXXZ
_TEXT	SEGMENT
_mouse_y$ = -16						; size = 4
_mouse_x$ = -12						; size = 4
_state$ = -8						; size = 4
_current_obj$ = -4					; size = 4
?ui_mouse_button_down@@YGXXZ PROC			; ui_mouse_button_down, COMDAT

; 644  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 645  : 
; 646  : 	ui_object
; 647  : 		*current_obj;
; 648  : 
; 649  : 	int
; 650  : 		state = BUTTON_STATE_DOWN;

	mov	DWORD PTR _state$[ebp], 2

; 651  : 
; 652  : 	int
; 653  : 		mouse_x,
; 654  : 		mouse_y;
; 655  : 
; 656  : 	mouse_x = get_mouse_x ();

	call	?get_mouse_x@@YGHXZ			; get_mouse_x
	mov	DWORD PTR _mouse_x$[ebp], eax

; 657  : 
; 658  : 	mouse_y = get_mouse_y ();

	call	?get_mouse_y@@YGHXZ			; get_mouse_y
	mov	DWORD PTR _mouse_y$[ebp], eax

; 659  : 
; 660  : 	current_obj = get_ui_object_child (current_screen);

	mov	eax, DWORD PTR ?current_screen@@3PAUUI_OBJECT@@A ; current_screen
	push	eax
	mov	ecx, DWORD PTR ?current_screen@@3PAUUI_OBJECT@@A ; current_screen
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_child@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
	call	eax
	mov	DWORD PTR _current_obj$[ebp], eax

; 661  : 
; 662  : 	if (!current_obj)

	cmp	DWORD PTR _current_obj$[ebp], 0
	jne	SHORT $LN2@ui_mouse_b

; 663  : 	{
; 664  : 
; 665  : 		return;

	jmp	SHORT $LN1@ui_mouse_b
$LN2@ui_mouse_b:

; 666  : 	}
; 667  : 
; 668  : 	*captured_object = check_ui_object_for_selection (current_obj, mouse_x, mouse_y);

	mov	eax, DWORD PTR _mouse_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mouse_x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current_obj$[ebp]
	push	edx
	call	?check_ui_object_for_selection@@YGPAUUI_OBJECT@@PAU1@HH@Z ; check_ui_object_for_selection
	mov	ecx, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
	mov	DWORD PTR [ecx], eax

; 669  : 
; 670  : 	if (*captured_object)

	mov	eax, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@ui_mouse_b

; 671  : 	{
; 672  : 
; 673  : 		#if DEBUG_USERINT
; 674  : 	
; 675  : 		debug_log ("USERINT: object captured = %d, at %f, %f size %f, %f", ((ui_object *)*captured_object)->type, get_ui_object_x (*captured_object), get_ui_object_y (*captured_object), get_ui_object_x_size (*captured_object), get_ui_object_y_size (*captured_object));
; 676  : 	
; 677  : 		#endif
; 678  : 	
; 679  : 		mouse_button_function (*captured_object, (void *) state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR ?mouse_button_function@@3P6GXPAUUI_OBJECT@@PAX@ZA
$LN1@ui_mouse_b:

; 680  : 	}
; 681  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ui_mouse_button_down@@YGXXZ ENDP			; ui_mouse_button_down
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_check_ui_object_under_mouse@@YGHPAUUI_OBJECT@@HH@Z
_TEXT	SEGMENT
tv222 = -96						; size = 4
tv214 = -96						; size = 4
tv207 = -96						; size = 4
tv200 = -96						; size = 4
_y2$ = -28						; size = 4
_x2$ = -24						; size = 4
_y1$ = -20						; size = 4
_x1$ = -16						; size = 4
_parent_y$ = -12					; size = 4
_parent_x$ = -8						; size = 4
_parent_obj$ = -4					; size = 4
_obj$ = 8						; size = 4
_mouse_x$ = 12						; size = 4
_mouse_y$ = 16						; size = 4
?ui_check_ui_object_under_mouse@@YGHPAUUI_OBJECT@@HH@Z PROC ; ui_check_ui_object_under_mouse, COMDAT

; 402  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 403  : 
; 404  : 	ui_object
; 405  : 		*parent_obj;
; 406  : 
; 407  : 	float
; 408  : 		parent_x = 0,

	xorps	xmm0, xmm0
	movss	DWORD PTR _parent_x$[ebp], xmm0

; 409  : 		parent_y = 0,

	xorps	xmm0, xmm0
	movss	DWORD PTR _parent_y$[ebp], xmm0

; 410  : 		x1,
; 411  : 		y1,
; 412  : 		x2,
; 413  : 		y2;
; 414  : 
; 415  : 	if ((get_ui_object_drawable (obj)) && (get_ui_object_notify_on (obj) != NOTIFY_TYPE_NONE))

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_drawable@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	test	eax, eax
	je	$LN5@ui_check_u
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_notify_on@@3PAP6G?AW4NOTIFY_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	test	eax, eax
	je	$LN5@ui_check_u

; 416  : 	{
; 417  : 	
; 418  : 		parent_obj = get_ui_object_parent (obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
	call	eax
	mov	DWORD PTR _parent_obj$[ebp], eax

; 419  : 	
; 420  : 		if (parent_obj)

	cmp	DWORD PTR _parent_obj$[ebp], 0
	je	SHORT $LN3@ui_check_u

; 421  : 		{
; 422  : 				
; 423  : 			parent_x = get_ui_object_x_origin (parent_obj);

	mov	eax, DWORD PTR _parent_obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parent_obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_x_origin@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	fstp	DWORD PTR _parent_x$[ebp]

; 424  : 			parent_y = get_ui_object_y_origin (parent_obj);

	mov	eax, DWORD PTR _parent_obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parent_obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_y_origin@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	fstp	DWORD PTR _parent_y$[ebp]
$LN3@ui_check_u:

; 425  : 		}
; 426  : 	
; 427  : 		x1 = get_ui_object_x (obj) + parent_x;

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_x@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	fstp	DWORD PTR tv200[ebp]
	movss	xmm0, DWORD PTR tv200[ebp]
	addss	xmm0, DWORD PTR _parent_x$[ebp]
	movss	DWORD PTR _x1$[ebp], xmm0

; 428  : 		y1 = get_ui_object_y (obj) + parent_y;

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	fstp	DWORD PTR tv207[ebp]
	movss	xmm0, DWORD PTR tv207[ebp]
	addss	xmm0, DWORD PTR _parent_y$[ebp]
	movss	DWORD PTR _y1$[ebp], xmm0

; 429  : 	
; 430  : 		x2 = x1 + get_ui_object_x_size (obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	fstp	DWORD PTR tv214[ebp]
	movss	xmm0, DWORD PTR tv214[ebp]
	addss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 431  : 		y2 = y1 + get_ui_object_y_size (obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_y_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
	call	eax
	fstp	DWORD PTR tv222[ebp]
	movss	xmm0, DWORD PTR tv222[ebp]
	addss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR _y2$[ebp], xmm0

; 432  : 	
; 433  : 		if ((mouse_x > x1) && (mouse_x < x2))

	cvtsi2ss xmm0, DWORD PTR _mouse_x$[ebp]
	comiss	xmm0, DWORD PTR _x1$[ebp]
	jbe	SHORT $LN5@ui_check_u
	cvtsi2ss xmm0, DWORD PTR _mouse_x$[ebp]
	movss	xmm1, DWORD PTR _x2$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@ui_check_u

; 434  : 		{
; 435  : 	
; 436  : 			if (((mouse_y + MOUSE_Y_OFFSET) > y1) && ((mouse_y + MOUSE_Y_OFFSET) < y2))

	mov	eax, DWORD PTR _mouse_y$[ebp]
	add	eax, 3
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR _y1$[ebp]
	jbe	SHORT $LN5@ui_check_u
	mov	eax, DWORD PTR _mouse_y$[ebp]
	add	eax, 3
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _y2$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@ui_check_u

; 437  : 			{
; 438  : 	
; 439  : 				return ( TRUE );

	mov	eax, 1
	jmp	SHORT $LN1@ui_check_u
$LN5@ui_check_u:

; 440  : 			}
; 441  : 		}
; 442  : 	}
; 443  : 
; 444  : 	return ( FALSE );

	xor	eax, eax
$LN1@ui_check_u:

; 445  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ui_check_ui_object_under_mouse@@YGHPAUUI_OBJECT@@HH@Z ENDP ; ui_check_ui_object_under_mouse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?save_ui_screen@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_filename$ = -36					; size = 32
_file_count$ = -4					; size = 4
_arg$ = 8						; size = 4
?save_ui_screen@@YGXPAUEVENT@@@Z PROC			; save_ui_screen, COMDAT

; 762  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 763  : 
; 764  : 	int
; 765  : 		file_count;
; 766  : 
; 767  : 	char
; 768  : 		filename [32];
; 769  : 
; 770  : 	for (file_count = 0; file_count <= 99; file_count ++)

	mov	DWORD PTR _file_count$[ebp], 0
	jmp	SHORT $LN4@save_ui_sc
$LN2@save_ui_sc:
	mov	eax, DWORD PTR _file_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _file_count$[ebp], eax
$LN4@save_ui_sc:
	cmp	DWORD PTR _file_count$[ebp], 99		; 00000063H
	jg	SHORT $LN3@save_ui_sc

; 771  : 	{
; 772  : 
; 773  : 		sprintf (filename, "screen%02d.tga", file_count);

	mov	eax, DWORD PTR _file_count$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@BKFHGBK@screen?$CF02d?4tga@
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 774  : 
; 775  : 		if (!file_exist (filename))

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	?file_exist@@YGHPBD@Z			; file_exist
	test	eax, eax
	jne	SHORT $LN5@save_ui_sc

; 776  : 		{
; 777  : 
; 778  : 			debug_log ("Screen Shot : %s", filename);

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@BPHMLPAG@Screen?5Shot?5?3?5?$CFs@
	call	?debug_log@@YAXPBDZZ			; debug_log
	add	esp, 8

; 779  : 
; 780  : 			save_tga_screen (filename);

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	?save_tga_screen@@YGXPBD@Z		; save_tga_screen

; 781  : 
; 782  : 			return;

	jmp	SHORT $LN1@save_ui_sc
$LN5@save_ui_sc:

; 783  : 		}
; 784  : 	}

	jmp	SHORT $LN2@save_ui_sc
$LN3@save_ui_sc:

; 785  : 
; 786  : 	debug_log ("Error Saving Screen: Limit exceeded");

	push	OFFSET ??_C@_0CE@PHANCIEG@Error?5Saving?5Screen?3?5Limit?5exce@
	call	?debug_log@@YAXPBDZZ			; debug_log
	add	esp, 4
$LN1@save_ui_sc:

; 787  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?save_ui_screen@@YGXPAUEVENT@@@Z ENDP			; save_ui_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?get_ui_last_event@@YGPAUEVENT@@XZ
_TEXT	SEGMENT
?get_ui_last_event@@YGPAUEVENT@@XZ PROC			; get_ui_last_event, COMDAT

; 752  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 753  : 
; 754  : 	return &ui_last_event;

	mov	eax, OFFSET ?ui_last_event@@3UEVENT@@A

; 755  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_ui_last_event@@YGPAUEVENT@@XZ ENDP			; get_ui_last_event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_set_user_redraw_function@@YGXP6GHXZ@Z
_TEXT	SEGMENT
_fn$ = 8						; size = 4
?ui_set_user_redraw_function@@YGXP6GHXZ@Z PROC		; ui_set_user_redraw_function, COMDAT

; 742  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 743  : 
; 744  : 	ui_user_redraw_function = fn;

	mov	eax, DWORD PTR _fn$[ebp]
	mov	DWORD PTR ?ui_user_redraw_function@@3P6GHXZA, eax ; ui_user_redraw_function

; 745  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ui_set_user_redraw_function@@YGXP6GHXZ@Z ENDP		; ui_set_user_redraw_function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_set_user_function@@YGXP6GXXZ@Z
_TEXT	SEGMENT
_fn$ = 8						; size = 4
?ui_set_user_function@@YGXP6GXXZ@Z PROC			; ui_set_user_function, COMDAT

; 732  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 733  : 
; 734  : 	ui_user_function = fn;

	mov	eax, DWORD PTR _fn$[ebp]
	mov	DWORD PTR ?ui_user_function@@3P6GXXZA, eax ; ui_user_function

; 735  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ui_set_user_function@@YGXP6GXXZ@Z ENDP			; ui_set_user_function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_force_update@@YGXXZ
_TEXT	SEGMENT
?ui_force_update@@YGXXZ PROC				; ui_force_update, COMDAT

; 698  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 699  : 
; 700  : 	#if DEBUG_USERINT
; 701  : 
; 702  : 	debug_log ("UI_MAN OBJECT FORCE UPDATE: repainting screen");
; 703  : 
; 704  : 	#endif
; 705  : 
; 706  : 	//
; 707  : 	// Render to front screen
; 708  : 	//
; 709  : 
; 710  : 	do_highlighting ();

	call	?do_highlighting@@YGXXZ			; do_highlighting

; 711  : 
; 712  : 	ui_repaint ();

	call	?ui_repaint@@YGXXZ			; ui_repaint

; 713  : 
; 714  : 	//
; 715  : 	//
; 716  : 	//
; 717  : 
; 718  : 	set_ui_redraw (FALSE);

	push	0
	call	?set_ui_redraw@@YGXH@Z			; set_ui_redraw

; 719  : 
; 720  : 	if (ui_user_function)

	cmp	DWORD PTR ?ui_user_function@@3P6GXXZA, 0 ; ui_user_function
	je	SHORT $LN1@ui_force_u

; 721  : 	{
; 722  : 
; 723  : 		ui_user_function ();

	call	DWORD PTR ?ui_user_function@@3P6GXXZA	; ui_user_function
$LN1@ui_force_u:

; 724  : 	}
; 725  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ui_force_update@@YGXXZ ENDP				; ui_force_update
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?set_exit_ui@@YGXH@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?set_exit_ui@@YGXH@Z PROC				; set_exit_ui, COMDAT

; 688  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 689  : 
; 690  : 	exit_ui = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR ?exit_ui@@3HA, eax

; 691  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?set_exit_ui@@YGXH@Z ENDP				; set_exit_ui
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_right_mouse_button@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_ev$ = 8						; size = 4
?ui_right_mouse_button@@YGXPAUEVENT@@@Z PROC		; ui_right_mouse_button, COMDAT

; 488  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 489  : 
; 490  : 	memcpy (&ui_last_event, ev, sizeof (event));

	push	20					; 00000014H
	mov	eax, DWORD PTR _ev$[ebp]
	push	eax
	push	OFFSET ?ui_last_event@@3UEVENT@@A
	call	_memcpy
	add	esp, 12					; 0000000cH

; 491  : 
; 492  : 	mouse_button_function = call_right_function;

	mov	DWORD PTR ?mouse_button_function@@3P6GXPAUUI_OBJECT@@PAX@ZA, OFFSET ?call_right_function@@YGXPAUUI_OBJECT@@PAX@Z ; call_right_function

; 493  : 
; 494  : 	captured_object = &right_captured_object;

	mov	DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A, OFFSET ?right_captured_object@@3PAUUI_OBJECT@@A ; captured_object, right_captured_object

; 495  : 
; 496  : 	if (ev->state == BUTTON_STATE_DOWN)

	mov	eax, DWORD PTR _ev$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 2
	jne	SHORT $LN2@ui_right_m

; 497  : 	{
; 498  : 
; 499  : 		#if DEBUG_USERINT
; 500  : 
; 501  : 		debug_log ("USERINT: right mouse button down");
; 502  : 
; 503  : 		#endif
; 504  : 
; 505  : 		ui_mouse_button_down ();

	call	?ui_mouse_button_down@@YGXXZ		; ui_mouse_button_down

; 506  : 	}
; 507  : 	else

	jmp	SHORT $LN1@ui_right_m
$LN2@ui_right_m:

; 508  : 	{
; 509  : 
; 510  : 		#if DEBUG_USERINT
; 511  : 
; 512  : 		debug_log ("USERINT: right mouse button up");
; 513  : 
; 514  : 		#endif
; 515  : 
; 516  : 		ui_mouse_button_up ();

	call	?ui_mouse_button_up@@YGXXZ		; ui_mouse_button_up
$LN1@ui_right_m:

; 517  : 	}
; 518  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ui_right_mouse_button@@YGXPAUEVENT@@@Z ENDP		; ui_right_mouse_button
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_left_mouse_button@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_ev$ = 8						; size = 4
?ui_left_mouse_button@@YGXPAUEVENT@@@Z PROC		; ui_left_mouse_button, COMDAT

; 452  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 453  : 
; 454  : 	memcpy (&ui_last_event, ev, sizeof (event));

	push	20					; 00000014H
	mov	eax, DWORD PTR _ev$[ebp]
	push	eax
	push	OFFSET ?ui_last_event@@3UEVENT@@A
	call	_memcpy
	add	esp, 12					; 0000000cH

; 455  : 
; 456  : 	mouse_button_function = call_function;

	mov	DWORD PTR ?mouse_button_function@@3P6GXPAUUI_OBJECT@@PAX@ZA, OFFSET ?call_function@@YGXPAUUI_OBJECT@@PAX@Z ; call_function

; 457  : 
; 458  : 	captured_object = &left_captured_object;

	mov	DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A, OFFSET ?left_captured_object@@3PAUUI_OBJECT@@A ; captured_object, left_captured_object

; 459  : 
; 460  : 	if (ev->state == BUTTON_STATE_DOWN)

	mov	eax, DWORD PTR _ev$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 2
	jne	SHORT $LN2@ui_left_mo

; 461  : 	{
; 462  : 
; 463  : 		#if DEBUG_USERINT
; 464  : 
; 465  : 		debug_log ("USERINT: left mouse button down");
; 466  : 
; 467  : 		#endif
; 468  : 
; 469  : 		ui_mouse_button_down ();

	call	?ui_mouse_button_down@@YGXXZ		; ui_mouse_button_down

; 470  : 	}
; 471  : 	else

	jmp	SHORT $LN1@ui_left_mo
$LN2@ui_left_mo:

; 472  : 	{
; 473  : 		#if DEBUG_USERINT
; 474  : 
; 475  : 		debug_log ("USERINT: left mouse button up");
; 476  : 
; 477  : 		#endif
; 478  : 
; 479  : 		ui_mouse_button_up ();

	call	?ui_mouse_button_up@@YGXXZ		; ui_mouse_button_up
$LN1@ui_left_mo:

; 480  : 	}
; 481  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ui_left_mouse_button@@YGXPAUEVENT@@@Z ENDP		; ui_left_mouse_button
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?check_ui_object_for_selection@@YGPAUUI_OBJECT@@PAU1@HH@Z
_TEXT	SEGMENT
_child$1 = -8						; size = 4
_selected_object$ = -4					; size = 4
_obj$ = 8						; size = 4
_mouse_x$ = 12						; size = 4
_mouse_y$ = 16						; size = 4
?check_ui_object_for_selection@@YGPAUUI_OBJECT@@PAU1@HH@Z PROC ; check_ui_object_for_selection, COMDAT

; 242  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 243  : 
; 244  : 	ui_object
; 245  : 		*selected_object;
; 246  : 
; 247  : 	selected_object = NULL;

	mov	DWORD PTR _selected_object$[ebp], 0
$LN2@check_ui_o:

; 248  : 
; 249  : 	while (get_ui_object_next (obj))

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_next@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
	call	eax
	test	eax, eax
	je	SHORT $LN4@check_ui_o

; 250  : 	{
; 251  : 
; 252  : 		obj = get_ui_object_next (obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_next@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
	call	eax
	mov	DWORD PTR _obj$[ebp], eax

; 253  : 	}

	jmp	SHORT $LN2@check_ui_o
$LN4@check_ui_o:

; 254  : 
; 255  : 	while ((obj) && (!ui_check_ui_object_under_mouse (obj, mouse_x, mouse_y)))

	cmp	DWORD PTR _obj$[ebp], 0
	je	SHORT $LN5@check_ui_o
	mov	eax, DWORD PTR _mouse_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mouse_x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?ui_check_ui_object_under_mouse@@YGHPAUUI_OBJECT@@HH@Z ; ui_check_ui_object_under_mouse
	test	eax, eax
	jne	SHORT $LN5@check_ui_o

; 256  : 	{
; 257  : 
; 258  : 		obj = get_ui_object_prev (obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_prev@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
	call	eax
	mov	DWORD PTR _obj$[ebp], eax

; 259  : 	}

	jmp	SHORT $LN4@check_ui_o
$LN5@check_ui_o:

; 260  : 
; 261  : 	if (obj)

	cmp	DWORD PTR _obj$[ebp], 0
	je	SHORT $LN6@check_ui_o

; 262  : 	{
; 263  : 
; 264  : 		ui_object
; 265  : 			*child;
; 266  : 
; 267  : 		child = get_ui_object_child (obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?fn_get_ui_object_child@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
	call	eax
	mov	DWORD PTR _child$1[ebp], eax

; 268  : 
; 269  : 		if (child)

	cmp	DWORD PTR _child$1[ebp], 0
	je	SHORT $LN7@check_ui_o

; 270  : 		{
; 271  : 	
; 272  : 			selected_object = check_ui_object_for_selection (child, mouse_x, mouse_y);

	mov	eax, DWORD PTR _mouse_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mouse_x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _child$1[ebp]
	push	edx
	call	?check_ui_object_for_selection@@YGPAUUI_OBJECT@@PAU1@HH@Z ; check_ui_object_for_selection
	mov	DWORD PTR _selected_object$[ebp], eax
$LN7@check_ui_o:

; 273  : 		}
; 274  : 
; 275  : 		if (!selected_object)

	cmp	DWORD PTR _selected_object$[ebp], 0
	jne	SHORT $LN6@check_ui_o

; 276  : 		{
; 277  : 
; 278  : 			return obj;

	mov	eax, DWORD PTR _obj$[ebp]
	jmp	SHORT $LN1@check_ui_o
$LN6@check_ui_o:

; 279  : 		}
; 280  : 	}
; 281  : 
; 282  : 	return selected_object;

	mov	eax, DWORD PTR _selected_object$[ebp]
$LN1@check_ui_o:

; 283  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?check_ui_object_for_selection@@YGPAUUI_OBJECT@@PAU1@HH@Z ENDP ; check_ui_object_for_selection
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?get_ui_redraw@@YGHXZ
_TEXT	SEGMENT
?get_ui_redraw@@YGHXZ PROC				; get_ui_redraw, COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 233  : 
; 234  : 	return ui_redraw;

	mov	eax, DWORD PTR ?ui_redraw@@3HA

; 235  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_ui_redraw@@YGHXZ ENDP				; get_ui_redraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?set_ui_redraw@@YGXH@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?set_ui_redraw@@YGXH@Z PROC				; set_ui_redraw, COMDAT

; 222  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 223  : 
; 224  : 	ui_redraw = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR ?ui_redraw@@3HA, eax

; 225  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?set_ui_redraw@@YGXH@Z ENDP				; set_ui_redraw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_get_root_object@@YGPAUUI_OBJECT@@XZ
_TEXT	SEGMENT
?ui_get_root_object@@YGPAUUI_OBJECT@@XZ PROC		; ui_get_root_object, COMDAT

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 213  : 
; 214  : 	return root_object;

	mov	eax, DWORD PTR ?root_object@@3PAUUI_OBJECT@@A ; root_object

; 215  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ui_get_root_object@@YGPAUUI_OBJECT@@XZ ENDP		; ui_get_root_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_set_root_object@@YGXPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
_new_root$ = 8						; size = 4
?ui_set_root_object@@YGXPAUUI_OBJECT@@@Z PROC		; ui_set_root_object, COMDAT

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 203  : 
; 204  : 	root_object = new_root;

	mov	eax, DWORD PTR _new_root$[ebp]
	mov	DWORD PTR ?root_object@@3PAUUI_OBJECT@@A, eax ; root_object

; 205  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ui_set_root_object@@YGXPAUUI_OBJECT@@@Z ENDP		; ui_set_root_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_repaint@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?ui_repaint@@YGXXZ PROC					; ui_repaint, COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 180  : 
; 181  : 	int
; 182  : 		x,
; 183  : 		y;
; 184  : 
; 185  : 	x = get_mouse_x ();

	call	?get_mouse_x@@YGHXZ			; get_mouse_x
	mov	DWORD PTR _x$[ebp], eax

; 186  : 	y = get_mouse_y ();

	call	?get_mouse_y@@YGHXZ			; get_mouse_y
	mov	DWORD PTR _y$[ebp], eax

; 187  : 
; 188  : 	clear_zbuffer_screen ();

	call	?clear_zbuffer_screen@@YGXXZ		; clear_zbuffer_screen

; 189  : 
; 190  : 	update_ui_screen_stack ();

	call	?update_ui_screen_stack@@YGXXZ		; update_ui_screen_stack

; 191  : 
; 192  : 	draw_raw_mouse_pointer (x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	?draw_raw_mouse_pointer@@YGXHH@Z	; draw_raw_mouse_pointer

; 193  : 
; 194  : 	ddraw_flip_surface ();

	call	?ddraw_flip_surface@@YGHXZ		; ddraw_flip_surface

; 195  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ui_repaint@@YGXXZ ENDP					; ui_repaint
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_man.c
;	COMDAT ?ui_object_manager@@YGXXZ
_TEXT	SEGMENT
?ui_object_manager@@YGXXZ PROC				; ui_object_manager, COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 140  : 
; 141  : 	ASSERT (get_ui_installed ());

	cmp	DWORD PTR ?ui_installed@@3HA, 0		; ui_installed
	jne	SHORT $LN4@ui_object_
	mov	eax, DWORD PTR ?__LINE__Var@?0??ui_object_manager@@YGXXZ@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0DH@IDDOGDGN@c?3?2users?2nhv90?2projects?2eech?2mo@
	push	OFFSET ??_C@_0BE@HDFJPKFL@get_ui_installed?5?$CI?$CJ@
	call	?process_assert@@YGXPBD0H@Z		; process_assert
$LN4@ui_object_:

; 142  : 
; 143  : 	ASSERT (root_object);

	cmp	DWORD PTR ?root_object@@3PAUUI_OBJECT@@A, 0 ; root_object
	jne	SHORT $LN5@ui_object_
	mov	eax, DWORD PTR ?__LINE__Var@?0??ui_object_manager@@YGXXZ@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0DH@IDDOGDGN@c?3?2users?2nhv90?2projects?2eech?2mo@
	push	OFFSET ??_C@_0M@GIKIFLEA@root_object@
	call	?process_assert@@YGXPBD0H@Z		; process_assert
$LN5@ui_object_:

; 144  : 
; 145  : 	push_ui_screen (root_object);

	mov	eax, DWORD PTR ?root_object@@3PAUUI_OBJECT@@A ; root_object
	push	eax
	call	?push_ui_screen@@YGXPAUUI_OBJECT@@@Z	; push_ui_screen

; 146  : 
; 147  : 	highlighted_object = NULL;

	mov	DWORD PTR ?highlighted_object@@3PAUUI_OBJECT@@A, 0 ; highlighted_object
$LN2@ui_object_:

; 148  : 
; 149  :    while (!exit_ui)

	cmp	DWORD PTR ?exit_ui@@3HA, 0
	jne	SHORT $LN3@ui_object_

; 150  :    {
; 151  : 
; 152  :       process_events ();

	call	?process_events@@YGXXZ			; process_events

; 153  : 
; 154  : 		do_highlighting ();

	call	?do_highlighting@@YGXXZ			; do_highlighting

; 155  : 
; 156  : 		ui_repaint ();

	call	?ui_repaint@@YGXXZ			; ui_repaint

; 157  : 
; 158  : 		system_sleep (0);

	push	0
	call	?system_sleep@@YGXH@Z			; system_sleep

; 159  : 
; 160  : 		set_ui_redraw (FALSE);

	push	0
	call	?set_ui_redraw@@YGXH@Z			; set_ui_redraw

; 161  : 
; 162  : 		if (ui_user_function)

	cmp	DWORD PTR ?ui_user_function@@3P6GXXZA, 0 ; ui_user_function
	je	SHORT $LN6@ui_object_

; 163  : 		{
; 164  : 
; 165  : 			ui_user_function ();

	call	DWORD PTR ?ui_user_function@@3P6GXXZA	; ui_user_function
$LN6@ui_object_:

; 166  : 		}
; 167  : 
; 168  : 		set_delta_time ();

	call	?set_delta_time@@YGXXZ			; set_delta_time

; 169  :    }

	jmp	SHORT $LN2@ui_object_
$LN3@ui_object_:

; 170  : 
; 171  : 	ui_repaint ();

	call	?ui_repaint@@YGXXZ			; ui_repaint

; 172  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ui_object_manager@@YGXXZ ENDP				; ui_object_manager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	__vsprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 1793 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR __Buffer$[ebp]
	push	eax
	call	__vsnprintf_l
	add	esp, 20					; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __BufferCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Buffer$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax]
	or	edx, 1
	mov	eax, DWORD PTR [eax+4]
	push	eax
	push	edx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH
	mov	DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR __Result$[ebp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[ebp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[ebp]

; 1395 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
