; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\gfxzoom.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?load_zoomable_graphic@@YGPAUZOOMABLE_GRAPHIC@@PBD@Z ; load_zoomable_graphic
PUBLIC	?get_zoomable_graphic_width@@YGHPAUZOOMABLE_GRAPHIC@@@Z ; get_zoomable_graphic_width
PUBLIC	?get_zoomable_graphic_height@@YGHPAUZOOMABLE_GRAPHIC@@@Z ; get_zoomable_graphic_height
PUBLIC	?draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z ; draw_zoomable_graphic
PUBLIC	?unload_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@@Z ; unload_zoomable_graphic
PUBLIC	??_C@_0DH@HCJKBLGF@Only?58bit?5paletted?5zoomable?5gra@ ; `string'
PUBLIC	?__LINE__Var@?0??get_zoomable_graphic_width@@YGHPAUZOOMABLE_GRAPHIC@@@Z@4JA ; `get_zoomable_graphic_width'::`1'::__LINE__Var
PUBLIC	??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_07PGDKGDCB@graphic@			; `string'
PUBLIC	?__LINE__Var@?0??get_zoomable_graphic_height@@YGHPAUZOOMABLE_GRAPHIC@@@Z@4JA ; `get_zoomable_graphic_height'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA ; `draw_zoomable_graphic'::`1'::__LINE__Var
PUBLIC	??_C@_06EBODONHD@x?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_0BD@GHKDBAJK@x?5?$DM?5graphic?9?$DOwidth@	; `string'
PUBLIC	??_C@_06OHJEOGMH@y?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_0BE@GCOBEOGC@y?5?$DM?5graphic?9?$DOheight@ ; `string'
PUBLIC	??_C@_0BM@HDCMOBII@screen_y_min?5?$DM?5screen_y_max@ ; `string'
PUBLIC	??_C@_0BM@CHKKLBLD@screen_x_min?5?$DM?5screen_x_max@ ; `string'
PUBLIC	??_C@_0BC@IIAIOCAB@screen_y_min?5?$DO?$DN?50@	; `string'
PUBLIC	??_C@_0BN@MGHCNM@screen_y_min?5?$DM?5screen_height@ ; `string'
PUBLIC	??_C@_0BC@EJIGDNMB@screen_x_min?5?$DO?$DN?50@	; `string'
PUBLIC	??_C@_0BM@NFLKHCAA@screen_x_min?5?$DM?5screen_width@ ; `string'
PUBLIC	??_C@_0BC@FPODFAEA@screen_y_max?5?$DO?$DN?50@	; `string'
PUBLIC	??_C@_0BN@CJLIIPME@screen_y_max?5?$DM?5screen_height@ ; `string'
PUBLIC	??_C@_0BC@JOGNIPIA@screen_x_max?5?$DO?$DN?50@	; `string'
PUBLIC	??_C@_0BM@HCIOPCHJ@screen_x_max?5?$DM?5screen_width@ ; `string'
PUBLIC	??_C@_0L@LOGHKHBA@zoom?5?$DM?$DN?564@		; `string'
PUBLIC	??_C@_0M@LFCAJBON@zoom?5?$DO?$DN?5?964@		; `string'
PUBLIC	??_C@_09IDCJAAHC@zoom?5?$CB?$DN?50@		; `string'
PUBLIC	?__LINE__Var@?0??unload_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@@Z@4JA ; `unload_zoomable_graphic'::`1'::__LINE__Var
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?mclose@@YGHPAX@Z:PROC				; mclose
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_screen_width@@YGHPAUSCREEN@@@Z:PROC	; get_screen_width
EXTRN	?get_screen_height@@YGHPAUSCREEN@@@Z:PROC	; get_screen_height
EXTRN	?memory_map_tga_file@@YGPAXPBDPAPAEPAF2PAH@Z:PROC ; memory_map_tga_file
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?active_screen_red_mask@@3HA:DWORD		; active_screen_red_mask
EXTRN	?active_screen_red_shift@@3HA:DWORD		; active_screen_red_shift
EXTRN	?active_screen_green_mask@@3HA:DWORD		; active_screen_green_mask
EXTRN	?active_screen_green_shift@@3HA:DWORD		; active_screen_green_shift
EXTRN	?active_screen_blue_mask@@3HA:DWORD		; active_screen_blue_mask
EXTRN	?active_screen_blue_shift@@3HA:DWORD		; active_screen_blue_shift
EXTRN	?active_screen_alpha_mask@@3HA:DWORD		; active_screen_alpha_mask
EXTRN	?active_screen_alpha_shift@@3HA:DWORD		; active_screen_alpha_shift
EXTRN	?tga_image_palette@@3PAUtagPALETTEENTRY@@A:BYTE	; tga_image_palette
EXTRN	?tga_image_origin_bottom_left@@3HA:DWORD	; tga_image_origin_bottom_left
;	COMDAT ?__LINE__Var@?0??unload_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unload_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@@Z@4JA DD 016dH ; `unload_zoomable_graphic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09IDCJAAHC@zoom?5?$CB?$DN?50@
CONST	SEGMENT
??_C@_09IDCJAAHC@zoom?5?$CB?$DN?50@ DB 'zoom != 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LFCAJBON@zoom?5?$DO?$DN?5?964@
CONST	SEGMENT
??_C@_0M@LFCAJBON@zoom?5?$DO?$DN?5?964@ DB 'zoom >= -64', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LOGHKHBA@zoom?5?$DM?$DN?564@
CONST	SEGMENT
??_C@_0L@LOGHKHBA@zoom?5?$DM?$DN?564@ DB 'zoom <= 64', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HCIOPCHJ@screen_x_max?5?$DM?5screen_width@
CONST	SEGMENT
??_C@_0BM@HCIOPCHJ@screen_x_max?5?$DM?5screen_width@ DB 'screen_x_max < s'
	DB	'creen_width', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JOGNIPIA@screen_x_max?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_0BC@JOGNIPIA@screen_x_max?5?$DO?$DN?50@ DB 'screen_x_max >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CJLIIPME@screen_y_max?5?$DM?5screen_height@
CONST	SEGMENT
??_C@_0BN@CJLIIPME@screen_y_max?5?$DM?5screen_height@ DB 'screen_y_max < '
	DB	'screen_height', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FPODFAEA@screen_y_max?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_0BC@FPODFAEA@screen_y_max?5?$DO?$DN?50@ DB 'screen_y_max >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NFLKHCAA@screen_x_min?5?$DM?5screen_width@
CONST	SEGMENT
??_C@_0BM@NFLKHCAA@screen_x_min?5?$DM?5screen_width@ DB 'screen_x_min < s'
	DB	'creen_width', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EJIGDNMB@screen_x_min?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_0BC@EJIGDNMB@screen_x_min?5?$DO?$DN?50@ DB 'screen_x_min >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MGHCNM@screen_y_min?5?$DM?5screen_height@
CONST	SEGMENT
??_C@_0BN@MGHCNM@screen_y_min?5?$DM?5screen_height@ DB 'screen_y_min < sc'
	DB	'reen_height', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IIAIOCAB@screen_y_min?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_0BC@IIAIOCAB@screen_y_min?5?$DO?$DN?50@ DB 'screen_y_min >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CHKKLBLD@screen_x_min?5?$DM?5screen_x_max@
CONST	SEGMENT
??_C@_0BM@CHKKLBLD@screen_x_min?5?$DM?5screen_x_max@ DB 'screen_x_min < s'
	DB	'creen_x_max', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HDCMOBII@screen_y_min?5?$DM?5screen_y_max@
CONST	SEGMENT
??_C@_0BM@HDCMOBII@screen_y_min?5?$DM?5screen_y_max@ DB 'screen_y_min < s'
	DB	'creen_y_max', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GCOBEOGC@y?5?$DM?5graphic?9?$DOheight@
CONST	SEGMENT
??_C@_0BE@GCOBEOGC@y?5?$DM?5graphic?9?$DOheight@ DB 'y < graphic->height', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHJEOGMH@y?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_06OHJEOGMH@y?5?$DO?$DN?50@ DB 'y >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GHKDBAJK@x?5?$DM?5graphic?9?$DOwidth@
CONST	SEGMENT
??_C@_0BD@GHKDBAJK@x?5?$DM?5graphic?9?$DOwidth@ DB 'x < graphic->width', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBODONHD@x?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_06EBODONHD@x?5?$DO?$DN?50@ DB 'x >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA DD 0bdH ; `draw_zoomable_graphic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_zoomable_graphic_height@@YGHPAUZOOMABLE_GRAPHIC@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_zoomable_graphic_height@@YGHPAUZOOMABLE_GRAPHIC@@@Z@4JA DD 0b1H ; `get_zoomable_graphic_height'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_07PGDKGDCB@graphic@
CONST	SEGMENT
??_C@_07PGDKGDCB@graphic@ DB 'graphic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\gfxzoom.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_zoomable_graphic_width@@YGHPAUZOOMABLE_GRAPHIC@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_zoomable_graphic_width@@YGHPAUZOOMABLE_GRAPHIC@@@Z@4JA DD 0a5H ; `get_zoomable_graphic_width'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DH@HCJKBLGF@Only?58bit?5paletted?5zoomable?5gra@
CONST	SEGMENT
??_C@_0DH@HCJKBLGF@Only?58bit?5paletted?5zoomable?5gra@ DB 'Only 8bit pal'
	DB	'etted zoomable graphics are supported: %s', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\gfxzoom.c
;	COMDAT ?unload_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@@Z
_TEXT	SEGMENT
_graphic$ = 8						; size = 4
?unload_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@@Z PROC ; unload_zoomable_graphic, COMDAT

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 366  : 
; 367  : 	ASSERT ( graphic );

  00009	83 7d 08 00	 cmp	 DWORD PTR _graphic$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@unload_zoo
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unload_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_07PGDKGDCB@graphic@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@unload_zoo:

; 368  : 
; 369  : 	if ( graphic->palette )

  00027	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  0002a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0002e	74 16		 je	 SHORT $LN3@unload_zoo

; 370  : 	{
; 371  : 
; 372  : 		safe_free ( graphic->palette );

  00030	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  00033	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 373  : 
; 374  : 		graphic->palette = NULL;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  0003f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
$LN3@unload_zoo:

; 375  : 	}
; 376  : 
; 377  : 	if ( graphic->memory_mapped_file )

  00046	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  00049	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0004d	74 29		 je	 SHORT $LN4@unload_zoo

; 378  : 	if ( graphic->data )

  0004f	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  00052	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00056	74 20		 je	 SHORT $LN4@unload_zoo

; 379  : 	{
; 380  : 
; 381  : 		mclose ( graphic->memory_mapped_file );

  00058	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  0005b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?mclose@@YGHPAX@Z	; mclose

; 382  : 
; 383  : 		graphic->memory_mapped_file = NULL;

  00064	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  00067	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 384  : 
; 385  : 		graphic->data = NULL;

  0006e	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  00071	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$LN4@unload_zoo:

; 386  : 	}
; 387  : 
; 388  : 	free_mem ( graphic );

  00078	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 389  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?unload_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@@Z ENDP ; unload_zoomable_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\gfxzoom.c
;	COMDAT ?draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z
_TEXT	SEGMENT
tv258 = -144						; size = 4
tv259 = -140						; size = 4
_screen_pixel_value$1 = -72				; size = 2
_graphic_pixel_value$2 = -65				; size = 1
_pixel_value$3 = -64					; size = 2
_graphic_pixel_value$4 = -57				; size = 1
_count$5 = -56						; size = 4
_screen_line_ptr$ = -52					; size = 4
_graphic_data_line$ = -48				; size = 4
_screen_data$ = -44					; size = 4
_graphic_y_increment$ = -40				; size = 4
_zoom_y_counter$ = -36					; size = 4
_zoom_x_counter$ = -32					; size = 4
_screen_pitch$ = -28					; size = 4
_screen_height$ = -24					; size = 4
_screen_width$ = -20					; size = 4
_graphic_y$ = -16					; size = 4
_graphic_x$ = -12					; size = 4
_screen_y$ = -8						; size = 4
_screen_x$ = -4						; size = 4
_graphic$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_screen_x_min$ = 20					; size = 4
_screen_y_min$ = 24					; size = 4
_screen_x_max$ = 28					; size = 4
_screen_y_max$ = 32					; size = 4
_zoom$ = 36						; size = 4
?draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z PROC ; draw_zoomable_graphic, COMDAT

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 190  : 
; 191  : 	int
; 192  : 		screen_x,
; 193  : 		screen_y,
; 194  : 		graphic_x,
; 195  : 		graphic_y,
; 196  : 		screen_width,
; 197  : 		screen_height,
; 198  : 		screen_pitch,
; 199  : 		zoom_x_counter,
; 200  : 		zoom_y_counter,
; 201  : 		graphic_y_increment;
; 202  : 
; 203  : 	unsigned char
; 204  : 		*screen_data,
; 205  : 		*graphic_data_line;
; 206  : 
; 207  : 	unsigned short int
; 208  : 		*screen_line_ptr;
; 209  : 
; 210  : 	screen_width = get_screen_width ( active_screen );

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?get_screen_width@@YGHPAUSCREEN@@@Z ; get_screen_width
  00017	89 45 ec	 mov	 DWORD PTR _screen_width$[ebp], eax

; 211  : 	screen_height = get_screen_height ( active_screen );

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?get_screen_height@@YGHPAUSCREEN@@@Z ; get_screen_height
  00025	89 45 e8	 mov	 DWORD PTR _screen_height$[ebp], eax

; 212  : 	screen_pitch = get_screen_pitch ( active_screen );

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00033	89 45 e4	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 213  : 	screen_data = get_screen_data ( active_screen );

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00041	89 45 d4	 mov	 DWORD PTR _screen_data$[ebp], eax

; 214  : 
; 215  : 	//
; 216  : 	// Check all the parameters
; 217  : 	//
; 218  : 
; 219  : 	ASSERT ( graphic );

  00044	83 7d 08 00	 cmp	 DWORD PTR _graphic$[ebp], 0
  00048	75 18		 jne	 SHORT $LN14@draw_zooma
  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  0004f	83 c0 1e	 add	 eax, 30			; 0000001eH
  00052	50		 push	 eax
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_07PGDKGDCB@graphic@
  0005d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@draw_zooma:

; 220  : 	ASSERT ( x >= 0 );

  00062	83 7d 0c 00	 cmp	 DWORD PTR _x$[ebp], 0
  00066	7d 18		 jge	 SHORT $LN15@draw_zooma
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  0006d	83 c0 1f	 add	 eax, 31			; 0000001fH
  00070	50		 push	 eax
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_06EBODONHD@x?5?$DO?$DN?50@
  0007b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@draw_zooma:

; 221  : 	ASSERT ( x < graphic->width );

  00080	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00086	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00088	7c 18		 jl	 SHORT $LN16@draw_zooma
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  0008f	83 c0 20	 add	 eax, 32			; 00000020H
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GHKDBAJK@x?5?$DM?5graphic?9?$DOwidth@
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN16@draw_zooma:

; 222  : 	ASSERT ( y >= 0 );

  000a2	83 7d 10 00	 cmp	 DWORD PTR _y$[ebp], 0
  000a6	7d 18		 jge	 SHORT $LN17@draw_zooma
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  000ad	83 c0 21	 add	 eax, 33			; 00000021H
  000b0	50		 push	 eax
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_06OHJEOGMH@y?5?$DO?$DN?50@
  000bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN17@draw_zooma:

; 223  : 	ASSERT ( y < graphic->height );

  000c0	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  000c3	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  000c6	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000c9	7c 18		 jl	 SHORT $LN18@draw_zooma
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  000d0	83 c0 22	 add	 eax, 34			; 00000022H
  000d3	50		 push	 eax
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GCOBEOGC@y?5?$DM?5graphic?9?$DOheight@
  000de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN18@draw_zooma:

; 224  : 
; 225  : 	ASSERT ( screen_y_min < screen_y_max );

  000e3	8b 45 18	 mov	 eax, DWORD PTR _screen_y_min$[ebp]
  000e6	3b 45 20	 cmp	 eax, DWORD PTR _screen_y_max$[ebp]
  000e9	7c 18		 jl	 SHORT $LN19@draw_zooma
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  000f0	83 c0 24	 add	 eax, 36			; 00000024H
  000f3	50		 push	 eax
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HDCMOBII@screen_y_min?5?$DM?5screen_y_max@
  000fe	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN19@draw_zooma:

; 226  : 	ASSERT ( screen_x_min < screen_x_max );

  00103	8b 45 14	 mov	 eax, DWORD PTR _screen_x_min$[ebp]
  00106	3b 45 1c	 cmp	 eax, DWORD PTR _screen_x_max$[ebp]
  00109	7c 18		 jl	 SHORT $LN20@draw_zooma
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  00110	83 c0 25	 add	 eax, 37			; 00000025H
  00113	50		 push	 eax
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@CHKKLBLD@screen_x_min?5?$DM?5screen_x_max@
  0011e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN20@draw_zooma:

; 227  : 
; 228  : 	ASSERT ( screen_y_min >= 0 );

  00123	83 7d 18 00	 cmp	 DWORD PTR _screen_y_min$[ebp], 0
  00127	7d 18		 jge	 SHORT $LN21@draw_zooma
  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  0012e	83 c0 27	 add	 eax, 39			; 00000027H
  00131	50		 push	 eax
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IIAIOCAB@screen_y_min?5?$DO?$DN?50@
  0013c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN21@draw_zooma:

; 229  : 	ASSERT ( screen_y_min < screen_height );

  00141	8b 45 18	 mov	 eax, DWORD PTR _screen_y_min$[ebp]
  00144	3b 45 e8	 cmp	 eax, DWORD PTR _screen_height$[ebp]
  00147	7c 18		 jl	 SHORT $LN22@draw_zooma
  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  0014e	83 c0 28	 add	 eax, 40			; 00000028H
  00151	50		 push	 eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MGHCNM@screen_y_min?5?$DM?5screen_height@
  0015c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN22@draw_zooma:

; 230  : 	ASSERT ( screen_x_min >= 0 );

  00161	83 7d 14 00	 cmp	 DWORD PTR _screen_x_min$[ebp], 0
  00165	7d 18		 jge	 SHORT $LN23@draw_zooma
  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  0016c	83 c0 29	 add	 eax, 41			; 00000029H
  0016f	50		 push	 eax
  00170	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00175	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EJIGDNMB@screen_x_min?5?$DO?$DN?50@
  0017a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN23@draw_zooma:

; 231  : 	ASSERT ( screen_x_min < screen_width );

  0017f	8b 45 14	 mov	 eax, DWORD PTR _screen_x_min$[ebp]
  00182	3b 45 ec	 cmp	 eax, DWORD PTR _screen_width$[ebp]
  00185	7c 18		 jl	 SHORT $LN24@draw_zooma
  00187	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  0018c	83 c0 2a	 add	 eax, 42			; 0000002aH
  0018f	50		 push	 eax
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00195	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NFLKHCAA@screen_x_min?5?$DM?5screen_width@
  0019a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN24@draw_zooma:

; 232  : 
; 233  : 	ASSERT ( screen_y_max >= 0 );

  0019f	83 7d 20 00	 cmp	 DWORD PTR _screen_y_max$[ebp], 0
  001a3	7d 18		 jge	 SHORT $LN25@draw_zooma
  001a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  001aa	83 c0 2c	 add	 eax, 44			; 0000002cH
  001ad	50		 push	 eax
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  001b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FPODFAEA@screen_y_max?5?$DO?$DN?50@
  001b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN25@draw_zooma:

; 234  : 	ASSERT ( screen_y_max < screen_height );

  001bd	8b 45 20	 mov	 eax, DWORD PTR _screen_y_max$[ebp]
  001c0	3b 45 e8	 cmp	 eax, DWORD PTR _screen_height$[ebp]
  001c3	7c 18		 jl	 SHORT $LN26@draw_zooma
  001c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  001ca	83 c0 2d	 add	 eax, 45			; 0000002dH
  001cd	50		 push	 eax
  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  001d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CJLIIPME@screen_y_max?5?$DM?5screen_height@
  001d8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN26@draw_zooma:

; 235  : 	ASSERT ( screen_x_max >= 0 );

  001dd	83 7d 1c 00	 cmp	 DWORD PTR _screen_x_max$[ebp], 0
  001e1	7d 18		 jge	 SHORT $LN27@draw_zooma
  001e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  001e8	83 c0 2e	 add	 eax, 46			; 0000002eH
  001eb	50		 push	 eax
  001ec	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JOGNIPIA@screen_x_max?5?$DO?$DN?50@
  001f6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN27@draw_zooma:

; 236  : 	ASSERT ( screen_x_max < screen_width );

  001fb	8b 45 1c	 mov	 eax, DWORD PTR _screen_x_max$[ebp]
  001fe	3b 45 ec	 cmp	 eax, DWORD PTR _screen_width$[ebp]
  00201	7c 18		 jl	 SHORT $LN28@draw_zooma
  00203	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  00208	83 c0 2f	 add	 eax, 47			; 0000002fH
  0020b	50		 push	 eax
  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00211	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HCIOPCHJ@screen_x_max?5?$DM?5screen_width@
  00216	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN28@draw_zooma:

; 237  : 
; 238  : 	ASSERT ( zoom <= 64 );

  0021b	83 7d 24 40	 cmp	 DWORD PTR _zoom$[ebp], 64 ; 00000040H
  0021f	7e 18		 jle	 SHORT $LN29@draw_zooma
  00221	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  00226	83 c0 31	 add	 eax, 49			; 00000031H
  00229	50		 push	 eax
  0022a	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LOGHKHBA@zoom?5?$DM?$DN?564@
  00234	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN29@draw_zooma:

; 239  : 	ASSERT ( zoom >= -64 );

  00239	83 7d 24 c0	 cmp	 DWORD PTR _zoom$[ebp], -64 ; ffffffc0H
  0023d	7d 18		 jge	 SHORT $LN30@draw_zooma
  0023f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  00244	83 c0 32	 add	 eax, 50			; 00000032H
  00247	50		 push	 eax
  00248	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LFCAJBON@zoom?5?$DO?$DN?5?964@
  00252	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN30@draw_zooma:

; 240  : 	ASSERT ( zoom != 0 );

  00257	83 7d 24 00	 cmp	 DWORD PTR _zoom$[ebp], 0
  0025b	75 18		 jne	 SHORT $LN31@draw_zooma
  0025d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z@4JA
  00262	83 c0 33	 add	 eax, 51			; 00000033H
  00265	50		 push	 eax
  00266	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_09IDCJAAHC@zoom?5?$CB?$DN?50@
  00270	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN31@draw_zooma:

; 241  : 
; 242  : 	if ( graphic->inverted )

  00275	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  00278	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0027c	74 18		 je	 SHORT $LN32@draw_zooma

; 243  : 	{
; 244  : 
; 245  : 		y = graphic->height - y - 1;

  0027e	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  00281	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00284	2b 4d 10	 sub	 ecx, DWORD PTR _y$[ebp]
  00287	83 e9 01	 sub	 ecx, 1
  0028a	89 4d 10	 mov	 DWORD PTR _y$[ebp], ecx

; 246  : 
; 247  : 		graphic_y_increment = -1;

  0028d	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _graphic_y_increment$[ebp], -1

; 248  : 	}
; 249  : 	else

  00294	eb 07		 jmp	 SHORT $LN33@draw_zooma
$LN32@draw_zooma:

; 250  : 	{
; 251  : 
; 252  : 		graphic_y_increment = 1;

  00296	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _graphic_y_increment$[ebp], 1
$LN33@draw_zooma:

; 253  : 	}
; 254  : 
; 255  : 	if ( zoom > 0 )

  0029d	83 7d 24 00	 cmp	 DWORD PTR _zoom$[ebp], 0
  002a1	0f 8e e6 00 00
	00		 jle	 $LN34@draw_zooma

; 256  : 	{
; 257  : 
; 258  : 		int
; 259  : 			count;
; 260  : 	
; 261  : 		zoom_y_counter = zoom;

  002a7	8b 45 24	 mov	 eax, DWORD PTR _zoom$[ebp]
  002aa	89 45 dc	 mov	 DWORD PTR _zoom_y_counter$[ebp], eax

; 262  : 	
; 263  : 		graphic_y = y;

  002ad	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  002b0	89 45 f0	 mov	 DWORD PTR _graphic_y$[ebp], eax

; 264  : 	
; 265  : 		for ( screen_y = screen_y_min; screen_y <= screen_y_max; screen_y++ )

  002b3	8b 45 18	 mov	 eax, DWORD PTR _screen_y_min$[ebp]
  002b6	89 45 f8	 mov	 DWORD PTR _screen_y$[ebp], eax
  002b9	eb 09		 jmp	 SHORT $LN4@draw_zooma
$LN2@draw_zooma:
  002bb	8b 45 f8	 mov	 eax, DWORD PTR _screen_y$[ebp]
  002be	83 c0 01	 add	 eax, 1
  002c1	89 45 f8	 mov	 DWORD PTR _screen_y$[ebp], eax
$LN4@draw_zooma:
  002c4	8b 45 f8	 mov	 eax, DWORD PTR _screen_y$[ebp]
  002c7	3b 45 20	 cmp	 eax, DWORD PTR _screen_y_max$[ebp]
  002ca	0f 8f b8 00 00
	00		 jg	 $LN3@draw_zooma

; 266  : 		{
; 267  : 
; 268  : 			unsigned char
; 269  : 				graphic_pixel_value;
; 270  : 
; 271  : 			screen_line_ptr = ( unsigned short int * ) ( screen_data + ( screen_y * screen_pitch ) );

  002d0	8b 45 f8	 mov	 eax, DWORD PTR _screen_y$[ebp]
  002d3	0f af 45 e4	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  002d7	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  002da	89 45 cc	 mov	 DWORD PTR _screen_line_ptr$[ebp], eax

; 272  : 	
; 273  : 			screen_line_ptr += screen_x_min;

  002dd	8b 45 14	 mov	 eax, DWORD PTR _screen_x_min$[ebp]
  002e0	8b 4d cc	 mov	 ecx, DWORD PTR _screen_line_ptr$[ebp]
  002e3	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002e6	89 55 cc	 mov	 DWORD PTR _screen_line_ptr$[ebp], edx

; 274  : 
; 275  : 			graphic_data_line = &graphic->data[ ( graphic_y * graphic->width ) + x ];

  002e9	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  002ec	8b 4d f0	 mov	 ecx, DWORD PTR _graphic_y$[ebp]
  002ef	0f af 08	 imul	 ecx, DWORD PTR [eax]
  002f2	03 4d 0c	 add	 ecx, DWORD PTR _x$[ebp]
  002f5	8b 55 08	 mov	 edx, DWORD PTR _graphic$[ebp]
  002f8	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002fb	03 c1		 add	 eax, ecx
  002fd	89 45 d0	 mov	 DWORD PTR _graphic_data_line$[ebp], eax

; 276  : 	
; 277  : 			zoom_x_counter = zoom;

  00300	8b 45 24	 mov	 eax, DWORD PTR _zoom$[ebp]
  00303	89 45 e0	 mov	 DWORD PTR _zoom_x_counter$[ebp], eax

; 278  : 
; 279  : 			for ( count = ( screen_x_max - screen_x_min ); count >= 0; count-- )

  00306	8b 45 1c	 mov	 eax, DWORD PTR _screen_x_max$[ebp]
  00309	2b 45 14	 sub	 eax, DWORD PTR _screen_x_min$[ebp]
  0030c	89 45 c8	 mov	 DWORD PTR _count$5[ebp], eax
  0030f	eb 09		 jmp	 SHORT $LN7@draw_zooma
$LN5@draw_zooma:
  00311	8b 45 c8	 mov	 eax, DWORD PTR _count$5[ebp]
  00314	83 e8 01	 sub	 eax, 1
  00317	89 45 c8	 mov	 DWORD PTR _count$5[ebp], eax
$LN7@draw_zooma:
  0031a	83 7d c8 00	 cmp	 DWORD PTR _count$5[ebp], 0
  0031e	7c 49		 jl	 SHORT $LN6@draw_zooma

; 280  : 			{
; 281  : 	
; 282  : 				unsigned short int
; 283  : 					pixel_value;
; 284  : 	
; 285  : 				graphic_pixel_value = *graphic_data_line;

  00320	8b 45 d0	 mov	 eax, DWORD PTR _graphic_data_line$[ebp]
  00323	8a 08		 mov	 cl, BYTE PTR [eax]
  00325	88 4d c7	 mov	 BYTE PTR _graphic_pixel_value$4[ebp], cl

; 286  : 	
; 287  : 				pixel_value = graphic->palette[graphic_pixel_value];

  00328	0f b6 45 c7	 movzx	 eax, BYTE PTR _graphic_pixel_value$4[ebp]
  0032c	8b 4d 08	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0032f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00332	66 8b 04 82	 mov	 ax, WORD PTR [edx+eax*4]
  00336	66 89 45 c0	 mov	 WORD PTR _pixel_value$3[ebp], ax

; 288  : 	
; 289  : 				zoom_x_counter--;

  0033a	8b 45 e0	 mov	 eax, DWORD PTR _zoom_x_counter$[ebp]
  0033d	83 e8 01	 sub	 eax, 1
  00340	89 45 e0	 mov	 DWORD PTR _zoom_x_counter$[ebp], eax

; 290  : 	
; 291  : 				if ( zoom_x_counter == 0 )

  00343	75 0f		 jne	 SHORT $LN36@draw_zooma

; 292  : 				{
; 293  : 	
; 294  : 					graphic_data_line++;

  00345	8b 45 d0	 mov	 eax, DWORD PTR _graphic_data_line$[ebp]
  00348	83 c0 01	 add	 eax, 1
  0034b	89 45 d0	 mov	 DWORD PTR _graphic_data_line$[ebp], eax

; 295  : 
; 296  : 					zoom_x_counter = zoom;

  0034e	8b 45 24	 mov	 eax, DWORD PTR _zoom$[ebp]
  00351	89 45 e0	 mov	 DWORD PTR _zoom_x_counter$[ebp], eax
$LN36@draw_zooma:

; 297  : 				}
; 298  : 	
; 299  : 				*screen_line_ptr++ = pixel_value;

  00354	8b 45 cc	 mov	 eax, DWORD PTR _screen_line_ptr$[ebp]
  00357	66 8b 4d c0	 mov	 cx, WORD PTR _pixel_value$3[ebp]
  0035b	66 89 08	 mov	 WORD PTR [eax], cx
  0035e	8b 55 cc	 mov	 edx, DWORD PTR _screen_line_ptr$[ebp]
  00361	83 c2 02	 add	 edx, 2
  00364	89 55 cc	 mov	 DWORD PTR _screen_line_ptr$[ebp], edx

; 300  : 			}

  00367	eb a8		 jmp	 SHORT $LN5@draw_zooma
$LN6@draw_zooma:

; 301  : 
; 302  : 			zoom_y_counter--;

  00369	8b 45 dc	 mov	 eax, DWORD PTR _zoom_y_counter$[ebp]
  0036c	83 e8 01	 sub	 eax, 1
  0036f	89 45 dc	 mov	 DWORD PTR _zoom_y_counter$[ebp], eax

; 303  : 	
; 304  : 			if ( zoom_y_counter == 0 )

  00372	75 0f		 jne	 SHORT $LN37@draw_zooma

; 305  : 			{
; 306  : 	
; 307  : 				graphic_y += graphic_y_increment;

  00374	8b 45 f0	 mov	 eax, DWORD PTR _graphic_y$[ebp]
  00377	03 45 d8	 add	 eax, DWORD PTR _graphic_y_increment$[ebp]
  0037a	89 45 f0	 mov	 DWORD PTR _graphic_y$[ebp], eax

; 308  : 	
; 309  : 				zoom_y_counter = zoom;

  0037d	8b 45 24	 mov	 eax, DWORD PTR _zoom$[ebp]
  00380	89 45 dc	 mov	 DWORD PTR _zoom_y_counter$[ebp], eax
$LN37@draw_zooma:

; 310  : 			}
; 311  : 		}

  00383	e9 33 ff ff ff	 jmp	 $LN2@draw_zooma
$LN3@draw_zooma:

; 312  : 	}
; 313  : 	else

  00388	e9 0f 01 00 00	 jmp	 $LN1@draw_zooma
$LN34@draw_zooma:

; 314  : 	{
; 315  : 
; 316  : 		zoom = -zoom;

  0038d	8b 45 24	 mov	 eax, DWORD PTR _zoom$[ebp]
  00390	f7 d8		 neg	 eax
  00392	89 45 24	 mov	 DWORD PTR _zoom$[ebp], eax

; 317  : 
; 318  : 		graphic_y = y;

  00395	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00398	89 45 f0	 mov	 DWORD PTR _graphic_y$[ebp], eax

; 319  : 	
; 320  : 		for ( screen_y = screen_y_min; screen_y <= screen_y_max; screen_y++ )

  0039b	8b 45 18	 mov	 eax, DWORD PTR _screen_y_min$[ebp]
  0039e	89 45 f8	 mov	 DWORD PTR _screen_y$[ebp], eax
  003a1	eb 09		 jmp	 SHORT $LN10@draw_zooma
$LN8@draw_zooma:
  003a3	8b 45 f8	 mov	 eax, DWORD PTR _screen_y$[ebp]
  003a6	83 c0 01	 add	 eax, 1
  003a9	89 45 f8	 mov	 DWORD PTR _screen_y$[ebp], eax
$LN10@draw_zooma:
  003ac	8b 45 f8	 mov	 eax, DWORD PTR _screen_y$[ebp]
  003af	3b 45 20	 cmp	 eax, DWORD PTR _screen_y_max$[ebp]
  003b2	0f 8f e4 00 00
	00		 jg	 $LN1@draw_zooma

; 321  : 		{
; 322  : 	
; 323  : 			screen_line_ptr = ( unsigned short int * ) ( screen_data + ( screen_y * screen_pitch ) );

  003b8	8b 45 f8	 mov	 eax, DWORD PTR _screen_y$[ebp]
  003bb	0f af 45 e4	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  003bf	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  003c2	89 45 cc	 mov	 DWORD PTR _screen_line_ptr$[ebp], eax

; 324  : 	
; 325  : 			screen_line_ptr += screen_x_min;

  003c5	8b 45 14	 mov	 eax, DWORD PTR _screen_x_min$[ebp]
  003c8	8b 4d cc	 mov	 ecx, DWORD PTR _screen_line_ptr$[ebp]
  003cb	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  003ce	89 55 cc	 mov	 DWORD PTR _screen_line_ptr$[ebp], edx

; 326  : 	
; 327  : 			graphic_data_line = &graphic->data[ ( graphic_y * graphic->width ) ];

  003d1	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  003d4	8b 4d f0	 mov	 ecx, DWORD PTR _graphic_y$[ebp]
  003d7	0f af 08	 imul	 ecx, DWORD PTR [eax]
  003da	8b 55 08	 mov	 edx, DWORD PTR _graphic$[ebp]
  003dd	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003e0	03 c1		 add	 eax, ecx
  003e2	89 45 d0	 mov	 DWORD PTR _graphic_data_line$[ebp], eax

; 328  : 	
; 329  : 			graphic_x = x;

  003e5	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  003e8	89 45 f4	 mov	 DWORD PTR _graphic_x$[ebp], eax

; 330  : 	
; 331  : 			for ( screen_x = screen_x_min; screen_x <= screen_x_max; screen_x++ )

  003eb	8b 45 14	 mov	 eax, DWORD PTR _screen_x_min$[ebp]
  003ee	89 45 fc	 mov	 DWORD PTR _screen_x$[ebp], eax
  003f1	eb 09		 jmp	 SHORT $LN13@draw_zooma
$LN11@draw_zooma:
  003f3	8b 45 fc	 mov	 eax, DWORD PTR _screen_x$[ebp]
  003f6	83 c0 01	 add	 eax, 1
  003f9	89 45 fc	 mov	 DWORD PTR _screen_x$[ebp], eax
$LN13@draw_zooma:
  003fc	8b 45 fc	 mov	 eax, DWORD PTR _screen_x$[ebp]
  003ff	3b 45 1c	 cmp	 eax, DWORD PTR _screen_x_max$[ebp]
  00402	7f 3b		 jg	 SHORT $LN12@draw_zooma

; 332  : 			{
; 333  : 	
; 334  : 				unsigned char
; 335  : 					graphic_pixel_value;
; 336  : 	
; 337  : 				unsigned short int
; 338  : 					screen_pixel_value;
; 339  : 	
; 340  : 				//
; 341  : 				// Plot the pixel
; 342  : 				//
; 343  : 	
; 344  : 				graphic_pixel_value = graphic_data_line[graphic_x];	//graphic->data[ ( ( graphic_y * graphic->width ) + graphic_x ) ];

  00404	8b 45 d0	 mov	 eax, DWORD PTR _graphic_data_line$[ebp]
  00407	03 45 f4	 add	 eax, DWORD PTR _graphic_x$[ebp]
  0040a	8a 08		 mov	 cl, BYTE PTR [eax]
  0040c	88 4d bf	 mov	 BYTE PTR _graphic_pixel_value$2[ebp], cl

; 345  : 	
; 346  : 				screen_pixel_value = graphic->palette[graphic_pixel_value];

  0040f	0f b6 45 bf	 movzx	 eax, BYTE PTR _graphic_pixel_value$2[ebp]
  00413	8b 4d 08	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00416	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00419	66 8b 04 82	 mov	 ax, WORD PTR [edx+eax*4]
  0041d	66 89 45 b8	 mov	 WORD PTR _screen_pixel_value$1[ebp], ax

; 347  : 	
; 348  : 				*screen_line_ptr++ = screen_pixel_value;

  00421	8b 45 cc	 mov	 eax, DWORD PTR _screen_line_ptr$[ebp]
  00424	66 8b 4d b8	 mov	 cx, WORD PTR _screen_pixel_value$1[ebp]
  00428	66 89 08	 mov	 WORD PTR [eax], cx
  0042b	8b 55 cc	 mov	 edx, DWORD PTR _screen_line_ptr$[ebp]
  0042e	83 c2 02	 add	 edx, 2
  00431	89 55 cc	 mov	 DWORD PTR _screen_line_ptr$[ebp], edx

; 349  : 
; 350  : 				graphic_x += zoom;

  00434	8b 45 f4	 mov	 eax, DWORD PTR _graphic_x$[ebp]
  00437	03 45 24	 add	 eax, DWORD PTR _zoom$[ebp]
  0043a	89 45 f4	 mov	 DWORD PTR _graphic_x$[ebp], eax

; 351  : 			}

  0043d	eb b4		 jmp	 SHORT $LN11@draw_zooma
$LN12@draw_zooma:

; 352  : 	
; 353  : 			graphic_y += zoom * graphic_y_increment;

  0043f	8b 45 24	 mov	 eax, DWORD PTR _zoom$[ebp]
  00442	0f af 45 d8	 imul	 eax, DWORD PTR _graphic_y_increment$[ebp]
  00446	03 45 f0	 add	 eax, DWORD PTR _graphic_y$[ebp]
  00449	89 45 f0	 mov	 DWORD PTR _graphic_y$[ebp], eax

; 354  : 
; 355  : 			graphic_y = bound ( graphic_y, 0, ( graphic->height - 1 ) );

  0044c	79 0c		 jns	 SHORT $LN41@draw_zooma
  0044e	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
  00458	eb 34		 jmp	 SHORT $LN42@draw_zooma
$LN41@draw_zooma:
  0045a	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  0045d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00460	83 e9 01	 sub	 ecx, 1
  00463	39 4d f0	 cmp	 DWORD PTR _graphic_y$[ebp], ecx
  00466	7e 11		 jle	 SHORT $LN39@draw_zooma
  00468	8b 55 08	 mov	 edx, DWORD PTR _graphic$[ebp]
  0046b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0046e	83 e8 01	 sub	 eax, 1
  00471	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv258[ebp], eax
  00477	eb 09		 jmp	 SHORT $LN40@draw_zooma
$LN39@draw_zooma:
  00479	8b 4d f0	 mov	 ecx, DWORD PTR _graphic_y$[ebp]
  0047c	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv258[ebp], ecx
$LN40@draw_zooma:
  00482	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv258[ebp]
  00488	89 95 74 ff ff
	ff		 mov	 DWORD PTR tv259[ebp], edx
$LN42@draw_zooma:
  0048e	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv259[ebp]
  00494	89 45 f0	 mov	 DWORD PTR _graphic_y$[ebp], eax

; 356  : 		}

  00497	e9 07 ff ff ff	 jmp	 $LN8@draw_zooma
$LN1@draw_zooma:

; 357  : 	}
; 358  : }

  0049c	5f		 pop	 edi
  0049d	5e		 pop	 esi
  0049e	5b		 pop	 ebx
  0049f	8b e5		 mov	 esp, ebp
  004a1	5d		 pop	 ebp
  004a2	c2 20 00	 ret	 32			; 00000020H
?draw_zoomable_graphic@@YGXPAUZOOMABLE_GRAPHIC@@HHHHHHH@Z ENDP ; draw_zoomable_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\gfxzoom.c
;	COMDAT ?get_zoomable_graphic_height@@YGHPAUZOOMABLE_GRAPHIC@@@Z
_TEXT	SEGMENT
_graphic$ = 8						; size = 4
?get_zoomable_graphic_height@@YGHPAUZOOMABLE_GRAPHIC@@@Z PROC ; get_zoomable_graphic_height, COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 178  : 
; 179  : 	ASSERT ( graphic );

  00009	83 7d 08 00	 cmp	 DWORD PTR _graphic$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_zoomab
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_zoomable_graphic_height@@YGHPAUZOOMABLE_GRAPHIC@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_07PGDKGDCB@graphic@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_zoomab:

; 180  : 
; 181  : 	return ( graphic->height );

  00027	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 182  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?get_zoomable_graphic_height@@YGHPAUZOOMABLE_GRAPHIC@@@Z ENDP ; get_zoomable_graphic_height
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\gfxzoom.c
;	COMDAT ?get_zoomable_graphic_width@@YGHPAUZOOMABLE_GRAPHIC@@@Z
_TEXT	SEGMENT
_graphic$ = 8						; size = 4
?get_zoomable_graphic_width@@YGHPAUZOOMABLE_GRAPHIC@@@Z PROC ; get_zoomable_graphic_width, COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 166  : 
; 167  : 	ASSERT ( graphic );

  00009	83 7d 08 00	 cmp	 DWORD PTR _graphic$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_zoomab
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_zoomable_graphic_width@@YGHPAUZOOMABLE_GRAPHIC@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEHJEOOK@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_07PGDKGDCB@graphic@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_zoomab:

; 168  : 
; 169  : 	return ( graphic->width );

  00027	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]

; 170  : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?get_zoomable_graphic_width@@YGHPAUZOOMABLE_GRAPHIC@@@Z ENDP ; get_zoomable_graphic_width
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\gfxzoom.c
;	COMDAT ?load_zoomable_graphic@@YGPAUZOOMABLE_GRAPHIC@@PBD@Z
_TEXT	SEGMENT
_palette_colour$1 = -40					; size = 4
_colour$2 = -36						; size = 4
_count$3 = -32						; size = 4
_total$4 = -28						; size = 4
_graphic$ = -24						; size = 4
_bits$ = -20						; size = 4
_height$ = -16						; size = 2
_width$ = -12						; size = 2
_data$ = -8						; size = 4
_memory_mapped_file$ = -4				; size = 4
_filename$ = 8						; size = 4
?load_zoomable_graphic@@YGPAUZOOMABLE_GRAPHIC@@PBD@Z PROC ; load_zoomable_graphic, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 
; 76   : 	unsigned char
; 77   : 		*memory_mapped_file,
; 78   : 		*data;
; 79   : 
; 80   : 	short int
; 81   : 		width,
; 82   : 		height;
; 83   : 
; 84   : 	int
; 85   : 		bits;
; 86   : 
; 87   : 	zoomable_graphic
; 88   : 		*graphic;
; 89   : 
; 90   : 	data = ( unsigned char * ) memory_map_tga_file ( filename, &memory_mapped_file, &width, &height, &bits );

  00009	8d 45 ec	 lea	 eax, DWORD PTR _bits$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d f0	 lea	 ecx, DWORD PTR _height$[ebp]
  00010	51		 push	 ecx
  00011	8d 55 f4	 lea	 edx, DWORD PTR _width$[ebp]
  00014	52		 push	 edx
  00015	8d 45 fc	 lea	 eax, DWORD PTR _memory_mapped_file$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ?memory_map_tga_file@@YGPAXPBDPAPAEPAF2PAH@Z ; memory_map_tga_file
  00022	89 45 f8	 mov	 DWORD PTR _data$[ebp], eax

; 91   : 
; 92   : 	if ( bits != 8 )

  00025	83 7d ec 08	 cmp	 DWORD PTR _bits$[ebp], 8
  00029	74 26		 je	 SHORT $LN8@load_zooma

; 93   : 	{
; 94   : 
; 95   : 		debug_log ( "Only 8bit paletted zoomable graphics are supported: %s", filename );

  0002b	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@HCJKBLGF@Only?58bit?5paletted?5zoomable?5gra@
  00034	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00039	83 c4 08	 add	 esp, 8

; 96   : 
; 97   : 		mclose ( memory_mapped_file );

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _memory_mapped_file$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?mclose@@YGHPAX@Z	; mclose

; 98   : 
; 99   : 		return ( NULL );

  00045	33 c0		 xor	 eax, eax
  00047	e9 c2 01 00 00	 jmp	 $LN1@load_zooma

; 100  : 	}
; 101  : 	else

  0004c	e9 bd 01 00 00	 jmp	 $LN1@load_zooma
$LN8@load_zooma:

; 102  : 	{
; 103  : 
; 104  : 		int
; 105  : 			total,
; 106  : 			count;
; 107  : 
; 108  : 		graphic = ( zoomable_graphic * ) malloc_fast_mem ( sizeof ( zoomable_graphic ) );

  00051	6a 1c		 push	 28			; 0000001cH
  00053	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  00058	89 45 e8	 mov	 DWORD PTR _graphic$[ebp], eax

; 109  : 
; 110  : 		graphic->width = width;

  0005b	0f bf 45 f4	 movsx	 eax, WORD PTR _width$[ebp]
  0005f	8b 4d e8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00062	89 01		 mov	 DWORD PTR [ecx], eax

; 111  : 
; 112  : 		graphic->height = height;

  00064	0f bf 45 f0	 movsx	 eax, WORD PTR _height$[ebp]
  00068	8b 4d e8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0006b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 113  : 
; 114  : 		graphic->data = ( unsigned char * ) data;

  0006e	8b 45 e8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _data$[ebp]
  00074	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 115  : 
; 116  : 		graphic->memory_mapped_file = ( unsigned char * ) memory_mapped_file;

  00077	8b 45 e8	 mov	 eax, DWORD PTR _graphic$[ebp]
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _memory_mapped_file$[ebp]
  0007d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 117  : 
; 118  : 		graphic->inverted = tga_image_origin_bottom_left;

  00080	8b 45 e8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tga_image_origin_bottom_left@@3HA ; tga_image_origin_bottom_left
  00089	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 119  : 
; 120  : 		graphic->palette = ( unsigned int * ) safe_malloc ( 256 * sizeof ( unsigned int ) );

  0008c	68 00 04 00 00	 push	 1024			; 00000400H
  00091	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00096	8b 4d e8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00099	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 121  : 
; 122  : 		for ( count = 0; count < 256; count++ )

  0009c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _count$3[ebp], 0
  000a3	eb 09		 jmp	 SHORT $LN4@load_zooma
$LN2@load_zooma:
  000a5	8b 45 e0	 mov	 eax, DWORD PTR _count$3[ebp]
  000a8	83 c0 01	 add	 eax, 1
  000ab	89 45 e0	 mov	 DWORD PTR _count$3[ebp], eax
$LN4@load_zooma:
  000ae	81 7d e0 00 01
	00 00		 cmp	 DWORD PTR _count$3[ebp], 256 ; 00000100H
  000b5	0f 8d 0b 01 00
	00		 jge	 $LN3@load_zooma

; 123  : 		{
; 124  : 
; 125  : 			rgb_colour
; 126  : 				colour;
; 127  : 
; 128  : 			unsigned int
; 129  : 				palette_colour;
; 130  : 
; 131  : 			colour.r = tga_image_palette[count].peRed;

  000bb	8b 45 e0	 mov	 eax, DWORD PTR _count$3[ebp]
  000be	8a 0c 85 00 00
	00 00		 mov	 cl, BYTE PTR ?tga_image_palette@@3PAUtagPALETTEENTRY@@A[eax*4]
  000c5	88 4d de	 mov	 BYTE PTR _colour$2[ebp+2], cl

; 132  : 			colour.g = tga_image_palette[count].peGreen;

  000c8	8b 45 e0	 mov	 eax, DWORD PTR _count$3[ebp]
  000cb	8a 0c 85 01 00
	00 00		 mov	 cl, BYTE PTR ?tga_image_palette@@3PAUtagPALETTEENTRY@@A[eax*4+1]
  000d2	88 4d dd	 mov	 BYTE PTR _colour$2[ebp+1], cl

; 133  : 			colour.b = tga_image_palette[count].peBlue;

  000d5	8b 45 e0	 mov	 eax, DWORD PTR _count$3[ebp]
  000d8	8a 0c 85 02 00
	00 00		 mov	 cl, BYTE PTR ?tga_image_palette@@3PAUtagPALETTEENTRY@@A[eax*4+2]
  000df	88 4d dc	 mov	 BYTE PTR _colour$2[ebp], cl

; 134  : 			colour.a = 0;

  000e2	c6 45 df 00	 mov	 BYTE PTR _colour$2[ebp+3], 0

; 135  : 
; 136  : 			palette_colour = get_packed_colour ( colour );

  000e6	0f b6 45 de	 movzx	 eax, BYTE PTR _colour$2[ebp+2]
  000ea	c1 e0 18	 shl	 eax, 24			; 00000018H
  000ed	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  000f9	d3 e8		 shr	 eax, cl
  000fb	0f b6 55 dd	 movzx	 edx, BYTE PTR _colour$2[ebp+1]
  000ff	c1 e2 18	 shl	 edx, 24			; 00000018H
  00102	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00108	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  0010e	d3 ea		 shr	 edx, cl
  00110	0b c2		 or	 eax, edx
  00112	0f b6 55 dc	 movzx	 edx, BYTE PTR _colour$2[ebp]
  00116	c1 e2 18	 shl	 edx, 24			; 00000018H
  00119	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  0011f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00125	d3 ea		 shr	 edx, cl
  00127	0b c2		 or	 eax, edx
  00129	0f b6 55 df	 movzx	 edx, BYTE PTR _colour$2[ebp+3]
  0012d	c1 e2 18	 shl	 edx, 24			; 00000018H
  00130	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  0013c	d3 ea		 shr	 edx, cl
  0013e	0b c2		 or	 eax, edx
  00140	0f b7 c0	 movzx	 eax, ax
  00143	89 45 d8	 mov	 DWORD PTR _palette_colour$1[ebp], eax

; 137  : 			palette_colour <<= 16;

  00146	8b 45 d8	 mov	 eax, DWORD PTR _palette_colour$1[ebp]
  00149	c1 e0 10	 shl	 eax, 16			; 00000010H
  0014c	89 45 d8	 mov	 DWORD PTR _palette_colour$1[ebp], eax

; 138  : 			palette_colour |= get_packed_colour ( colour );

  0014f	0f b6 45 de	 movzx	 eax, BYTE PTR _colour$2[ebp+2]
  00153	c1 e0 18	 shl	 eax, 24			; 00000018H
  00156	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00162	d3 e8		 shr	 eax, cl
  00164	0f b6 55 dd	 movzx	 edx, BYTE PTR _colour$2[ebp+1]
  00168	c1 e2 18	 shl	 edx, 24			; 00000018H
  0016b	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00171	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00177	d3 ea		 shr	 edx, cl
  00179	0b c2		 or	 eax, edx
  0017b	0f b6 55 dc	 movzx	 edx, BYTE PTR _colour$2[ebp]
  0017f	c1 e2 18	 shl	 edx, 24			; 00000018H
  00182	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  0018e	d3 ea		 shr	 edx, cl
  00190	0b c2		 or	 eax, edx
  00192	0f b6 55 df	 movzx	 edx, BYTE PTR _colour$2[ebp+3]
  00196	c1 e2 18	 shl	 edx, 24			; 00000018H
  00199	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  0019f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  001a5	d3 ea		 shr	 edx, cl
  001a7	0b c2		 or	 eax, edx
  001a9	0f b7 c0	 movzx	 eax, ax
  001ac	0b 45 d8	 or	 eax, DWORD PTR _palette_colour$1[ebp]
  001af	89 45 d8	 mov	 DWORD PTR _palette_colour$1[ebp], eax

; 139  : 			graphic->palette[count] = palette_colour;

  001b2	8b 45 e8	 mov	 eax, DWORD PTR _graphic$[ebp]
  001b5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001b8	8b 55 e0	 mov	 edx, DWORD PTR _count$3[ebp]
  001bb	8b 45 d8	 mov	 eax, DWORD PTR _palette_colour$1[ebp]
  001be	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 140  : 		}

  001c1	e9 df fe ff ff	 jmp	 $LN2@load_zooma
$LN3@load_zooma:

; 141  : 
; 142  : 		//
; 143  : 		// Spin through the graphic - DO NOT REMOVE THE TOTAL - otherwise on optimised make all this will disappear.
; 144  : 		//
; 145  : 
; 146  : 		total = 0;

  001c6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _total$4[ebp], 0

; 147  : 
; 148  : 		for ( count = 0; count < ( width * height ); count += 2048 )

  001cd	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _count$3[ebp], 0
  001d4	eb 0b		 jmp	 SHORT $LN7@load_zooma
$LN5@load_zooma:
  001d6	8b 45 e0	 mov	 eax, DWORD PTR _count$3[ebp]
  001d9	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  001de	89 45 e0	 mov	 DWORD PTR _count$3[ebp], eax
$LN7@load_zooma:
  001e1	0f bf 45 f4	 movsx	 eax, WORD PTR _width$[ebp]
  001e5	0f bf 4d f0	 movsx	 ecx, WORD PTR _height$[ebp]
  001e9	0f af c1	 imul	 eax, ecx
  001ec	39 45 e0	 cmp	 DWORD PTR _count$3[ebp], eax
  001ef	7d 11		 jge	 SHORT $LN6@load_zooma

; 149  : 		{
; 150  : 
; 151  : 			total += data[count];

  001f1	8b 45 f8	 mov	 eax, DWORD PTR _data$[ebp]
  001f4	03 45 e0	 add	 eax, DWORD PTR _count$3[ebp]
  001f7	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001fa	03 4d e4	 add	 ecx, DWORD PTR _total$4[ebp]
  001fd	89 4d e4	 mov	 DWORD PTR _total$4[ebp], ecx

; 152  : 		}

  00200	eb d4		 jmp	 SHORT $LN5@load_zooma
$LN6@load_zooma:

; 153  : 
; 154  : 		graphic->total = total;

  00202	8b 45 e8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00205	8b 4d e4	 mov	 ecx, DWORD PTR _total$4[ebp]
  00208	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 155  : 
; 156  : 		return ( graphic );

  0020b	8b 45 e8	 mov	 eax, DWORD PTR _graphic$[ebp]
$LN1@load_zooma:

; 157  : 	}
; 158  : }

  0020e	5f		 pop	 edi
  0020f	5e		 pop	 esi
  00210	5b		 pop	 ebx
  00211	8b e5		 mov	 esp, ebp
  00213	5d		 pop	 ebp
  00214	c2 04 00	 ret	 4
?load_zoomable_graphic@@YGPAUZOOMABLE_GRAPHIC@@PBD@Z ENDP ; load_zoomable_graphic
_TEXT	ENDS
END
