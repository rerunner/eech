; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\misc\scrnshot.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?save_screen_image_and_viewpoint_data@@YGXXZ	; save_screen_image_and_viewpoint_data
PUBLIC	?delete_screen_image_and_viewpoint_data@@YGXXZ	; delete_screen_image_and_viewpoint_data
PUBLIC	?save_high_res_screen_image@@YGXXZ		; save_high_res_screen_image
PUBLIC	?set_high_res_screen_image_viewangle_1@@YGXXZ	; set_high_res_screen_image_viewangle_1
PUBLIC	?set_high_res_screen_image_viewangle_2@@YGXXZ	; set_high_res_screen_image_viewangle_2
PUBLIC	?set_high_res_screen_image_viewangle_3@@YGXXZ	; set_high_res_screen_image_viewangle_3
PUBLIC	?set_high_res_screen_image_viewangle_4@@YGXXZ	; set_high_res_screen_image_viewangle_4
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0BA@KOFFPGAD@SCRNSHOT?2LARGE?2@		; `string'
PUBLIC	??_C@_0BA@LBAHOKOE@?$CFsIMAGE?$CF03d?4TGA@	; `string'
PUBLIC	??_C@_09LELPOAFH@IMAGE?$CF03d@			; `string'
PUBLIC	??_C@_0BJ@DMELAHIC@Saving?5screen?5image?5?$CI?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_08EFFFDPAL@?$CFs?$CFs?4TGA@		; `string'
PUBLIC	??_C@_0BA@LHJBILID@SCRNSHOT?2SMALL?2@		; `string'
PUBLIC	??_C@_09PGCLNKBB@SCRNSHOT?2@			; `string'
PUBLIC	??_C@_08GFJKDNFC@?$CFs?$CFs?4TXT@		; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0BI@OPMFOFML@Image?5viewpoint?5data?3?6?6@ ; `string'
PUBLIC	??_C@_0BJ@DNOHEDEI@Map?5?5?5?5?5?5?5?5?5?5?5?3?5unknown?6@ ; `string'
PUBLIC	??_C@_0BG@PJCPDHPN@X?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@ ; `string'
PUBLIC	??_C@_0BG@OOAHFDDN@Y?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@ ; `string'
PUBLIC	??_C@_0BG@NHHPPOHN@Z?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@ ; `string'
PUBLIC	??_C@_0BE@ONALAIOL@X?5sector?5?$CI3D?$CJ?5?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BE@CHMFHOGH@Z?5sector?5?$CI3D?$CJ?5?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BE@OOPILKBJ@X?5sector?5?$CIAI?$CJ?5?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BE@CEDGMMJF@Z?5sector?5?$CIAI?$CJ?5?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BG@LHNAJEAF@Heading?5?$CIdegs?$CJ?3?5?$CF?42f?6@ ; `string'
PUBLIC	??_C@_0BG@NACMLLCE@Pitch?5?$CIdegs?$CJ?5?5?3?5?$CF?42f?6@ ; `string'
PUBLIC	??_C@_0BG@HFHJHHBK@Roll?5?$CIdegs?$CJ?5?5?5?3?5?$CF?42f?6@ ; `string'
PUBLIC	??_C@_0BM@NPIODENA@Exceeded?5screen?5image?5limit@ ; `string'
PUBLIC	??_C@_0BL@HCBDIING@Deleting?5all?5screen?5images@ ; `string'
PUBLIC	??_C@_0BA@FIDNICFK@?$CFsIMAGE?$CF03d?4PSD@	; `string'
PUBLIC	??_C@_08KMGPFHLF@?$CFs?$CFs?4PSD@		; `string'
PUBLIC	__real@3e8b6727
PUBLIC	__real@3eb2b8c2
PUBLIC	__real@3f51319b
PUBLIC	__real@3f8604da
PUBLIC	__real@3fa4bc9b
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fea2b8d
PUBLIC	__real@40060a92
PUBLIC	__real@42652ee0
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__remove:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ:PROC ; debug_colour_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?file_exist@@YGHPBD@Z:PROC			; file_exist
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?safe_fclose@@YGHPAU_iobuf@@@Z:PROC		; safe_fclose
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_screen_width@@YGHPAUSCREEN@@@Z:PROC	; get_screen_width
EXTRN	?get_screen_height@@YGHPAUSCREEN@@@Z:PROC	; get_screen_height
EXTRN	?save_tga_screen_with_thumbnail@@YGXPBD0@Z:PROC	; save_tga_screen_with_thumbnail
EXTRN	?write_psd_screen_file@@YGXPBDHHHPBE@Z:PROC	; write_psd_screen_file
EXTRN	?get_terrain_3d_sector@@YGXMMPAH0@Z:PROC	; get_terrain_3d_sector
EXTRN	?draw_application_highres_screen@@YGXHHHH@Z:PROC ; draw_application_highres_screen
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?full_screen_width_view_angle@@3MA:DWORD	; full_screen_width_view_angle
EXTRN	?full_screen_height_view_angle@@3MA:DWORD	; full_screen_height_view_angle
EXTRN	?main_vp@@3UVIEWPOINT@@A:BYTE			; main_vp
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?found_first_screen_shot_index@@3HA DD 01H DUP (?)	; found_first_screen_shot_index
?screen_shot_index@@3HA DD 01H DUP (?)			; screen_shot_index
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@40060a92
CONST	SEGMENT
__real@40060a92 DD 040060a92r			; 2.0944
CONST	ENDS
;	COMDAT __real@3fea2b8d
CONST	SEGMENT
__real@3fea2b8d DD 03fea2b8dr			; 1.82945
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fa4bc9b
CONST	SEGMENT
__real@3fa4bc9b DD 03fa4bc9br			; 1.28701
CONST	ENDS
;	COMDAT __real@3f8604da
CONST	SEGMENT
__real@3f8604da DD 03f8604dar			; 1.04702
CONST	ENDS
;	COMDAT __real@3f51319b
CONST	SEGMENT
__real@3f51319b DD 03f51319br			; 0.817163
CONST	ENDS
;	COMDAT __real@3eb2b8c2
CONST	SEGMENT
__real@3eb2b8c2 DD 03eb2b8c2r			; 0.349066
CONST	ENDS
;	COMDAT __real@3e8b6727
CONST	SEGMENT
__real@3e8b6727 DD 03e8b6727r			; 0.272271
CONST	ENDS
;	COMDAT ??_C@_08KMGPFHLF@?$CFs?$CFs?4PSD@
CONST	SEGMENT
??_C@_08KMGPFHLF@?$CFs?$CFs?4PSD@ DB '%s%s.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FIDNICFK@?$CFsIMAGE?$CF03d?4PSD@
CONST	SEGMENT
??_C@_0BA@FIDNICFK@?$CFsIMAGE?$CF03d?4PSD@ DB '%sIMAGE%03d.PSD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HCBDIING@Deleting?5all?5screen?5images@
CONST	SEGMENT
??_C@_0BL@HCBDIING@Deleting?5all?5screen?5images@ DB 'Deleting all screen'
	DB	' images', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NPIODENA@Exceeded?5screen?5image?5limit@
CONST	SEGMENT
??_C@_0BM@NPIODENA@Exceeded?5screen?5image?5limit@ DB 'Exceeded screen im'
	DB	'age limit', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HFHJHHBK@Roll?5?$CIdegs?$CJ?5?5?5?3?5?$CF?42f?6@
CONST	SEGMENT
??_C@_0BG@HFHJHHBK@Roll?5?$CIdegs?$CJ?5?5?5?3?5?$CF?42f?6@ DB 'Roll (degs'
	DB	')   : %.2f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NACMLLCE@Pitch?5?$CIdegs?$CJ?5?5?3?5?$CF?42f?6@
CONST	SEGMENT
??_C@_0BG@NACMLLCE@Pitch?5?$CIdegs?$CJ?5?5?3?5?$CF?42f?6@ DB 'Pitch (degs'
	DB	')  : %.2f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LHNAJEAF@Heading?5?$CIdegs?$CJ?3?5?$CF?42f?6@
CONST	SEGMENT
??_C@_0BG@LHNAJEAF@Heading?5?$CIdegs?$CJ?3?5?$CF?42f?6@ DB 'Heading (degs'
	DB	'): %.2f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CEDGMMJF@Z?5sector?5?$CIAI?$CJ?5?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BE@CEDGMMJF@Z?5sector?5?$CIAI?$CJ?5?3?5?$CFd?6@ DB 'Z sector (AI) '
	DB	': %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OOPILKBJ@X?5sector?5?$CIAI?$CJ?5?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BE@OOPILKBJ@X?5sector?5?$CIAI?$CJ?5?3?5?$CFd?6@ DB 'X sector (AI) '
	DB	': %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHMFHOGH@Z?5sector?5?$CI3D?$CJ?5?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BE@CHMFHOGH@Z?5sector?5?$CI3D?$CJ?5?3?5?$CFd?6@ DB 'Z sector (3D) '
	DB	': %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ONALAIOL@X?5sector?5?$CI3D?$CJ?5?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BE@ONALAIOL@X?5sector?5?$CI3D?$CJ?5?3?5?$CFd?6@ DB 'X sector (3D) '
	DB	': %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NHHPPOHN@Z?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@
CONST	SEGMENT
??_C@_0BG@NHHPPOHN@Z?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@ DB 'Z      '
	DB	'       : %.2f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OOAHFDDN@Y?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@
CONST	SEGMENT
??_C@_0BG@OOAHFDDN@Y?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@ DB 'Y      '
	DB	'       : %.2f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PJCPDHPN@X?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@
CONST	SEGMENT
??_C@_0BG@PJCPDHPN@X?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@ DB 'X      '
	DB	'       : %.2f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DNOHEDEI@Map?5?5?5?5?5?5?5?5?5?5?5?3?5unknown?6@
CONST	SEGMENT
??_C@_0BJ@DNOHEDEI@Map?5?5?5?5?5?5?5?5?5?5?5?3?5unknown?6@ DB 'Map       '
	DB	'    : unknown', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OPMFOFML@Image?5viewpoint?5data?3?6?6@
CONST	SEGMENT
??_C@_0BI@OPMFOFML@Image?5viewpoint?5data?3?6?6@ DB 'Image viewpoint data'
	DB	':', 0aH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08GFJKDNFC@?$CFs?$CFs?4TXT@
CONST	SEGMENT
??_C@_08GFJKDNFC@?$CFs?$CFs?4TXT@ DB '%s%s.TXT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGCLNKBB@SCRNSHOT?2@
CONST	SEGMENT
??_C@_09PGCLNKBB@SCRNSHOT?2@ DB 'SCRNSHOT\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LHJBILID@SCRNSHOT?2SMALL?2@
CONST	SEGMENT
??_C@_0BA@LHJBILID@SCRNSHOT?2SMALL?2@ DB 'SCRNSHOT\SMALL\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EFFFDPAL@?$CFs?$CFs?4TGA@
CONST	SEGMENT
??_C@_08EFFFDPAL@?$CFs?$CFs?4TGA@ DB '%s%s.TGA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DMELAHIC@Saving?5screen?5image?5?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0BJ@DMELAHIC@Saving?5screen?5image?5?$CI?$CFs?$CJ@ DB 'Saving scree'
	DB	'n image (%s)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09LELPOAFH@IMAGE?$CF03d@
CONST	SEGMENT
??_C@_09LELPOAFH@IMAGE?$CF03d@ DB 'IMAGE%03d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LBAHOKOE@?$CFsIMAGE?$CF03d?4TGA@
CONST	SEGMENT
??_C@_0BA@LBAHOKOE@?$CFsIMAGE?$CF03d?4TGA@ DB '%sIMAGE%03d.TGA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KOFFPGAD@SCRNSHOT?2LARGE?2@
CONST	SEGMENT
??_C@_0BA@KOFFPGAD@SCRNSHOT?2LARGE?2@ DB 'SCRNSHOT\LARGE\', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\scrnshot.c
;	COMDAT ?set_high_res_screen_image_viewangle_4@@YGXXZ
_TEXT	SEGMENT
?set_high_res_screen_image_viewangle_4@@YGXXZ PROC	; set_high_res_screen_image_viewangle_4, COMDAT

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 417  : 
; 418  : 	full_screen_width_view_angle = rad ( 20 );

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb2b8c2
  00011	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?full_screen_width_view_angle@@3MA, xmm0

; 419  : 
; 420  : 	full_screen_height_view_angle = rad ( 15.6 );

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8b6727
  00021	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?full_screen_height_view_angle@@3MA, xmm0

; 421  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?set_high_res_screen_image_viewangle_4@@YGXXZ ENDP	; set_high_res_screen_image_viewangle_4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\scrnshot.c
;	COMDAT ?set_high_res_screen_image_viewangle_3@@YGXXZ
_TEXT	SEGMENT
?set_high_res_screen_image_viewangle_3@@YGXXZ PROC	; set_high_res_screen_image_viewangle_3, COMDAT

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 405  : 
; 406  : 	full_screen_width_view_angle = rad ( 120 );

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40060a92
  00011	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?full_screen_width_view_angle@@3MA, xmm0

; 407  : 
; 408  : 	full_screen_height_view_angle = rad ( 104.82 );

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fea2b8d
  00021	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?full_screen_height_view_angle@@3MA, xmm0

; 409  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?set_high_res_screen_image_viewangle_3@@YGXXZ ENDP	; set_high_res_screen_image_viewangle_3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\scrnshot.c
;	COMDAT ?set_high_res_screen_image_viewangle_2@@YGXXZ
_TEXT	SEGMENT
?set_high_res_screen_image_viewangle_2@@YGXXZ PROC	; set_high_res_screen_image_viewangle_2, COMDAT

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 393  : 
; 394  : 	full_screen_width_view_angle = rad ( 90 );

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00011	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?full_screen_width_view_angle@@3MA, xmm0

; 395  : 
; 396  : 	full_screen_height_view_angle = rad ( 73.74 );

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fa4bc9b
  00021	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?full_screen_height_view_angle@@3MA, xmm0

; 397  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?set_high_res_screen_image_viewangle_2@@YGXXZ ENDP	; set_high_res_screen_image_viewangle_2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\scrnshot.c
;	COMDAT ?set_high_res_screen_image_viewangle_1@@YGXXZ
_TEXT	SEGMENT
?set_high_res_screen_image_viewangle_1@@YGXXZ PROC	; set_high_res_screen_image_viewangle_1, COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 381  : 
; 382  : 	full_screen_width_view_angle = rad ( 59.99 );

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8604da
  00011	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?full_screen_width_view_angle@@3MA, xmm0

; 383  : 
; 384  : 	full_screen_height_view_angle = rad ( 46.82 );

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51319b
  00021	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?full_screen_height_view_angle@@3MA, xmm0

; 385  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?set_high_res_screen_image_viewangle_1@@YGXXZ ENDP	; set_high_res_screen_image_viewangle_1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\scrnshot.c
;	COMDAT ?save_high_res_screen_image@@YGXXZ
_TEXT	SEGMENT
_screen_y$1 = -248					; size = 4
_screen_line$2 = -244					; size = 4
_destination_ptr$3 = -240				; size = 4
_screen_data$ = -236					; size = 4
_huge_screen_shot_memory$ = -232			; size = 4
_screen_pitch$ = -228					; size = 4
_screen_height$ = -224					; size = 4
_screen_width$ = -220					; size = 4
_y_repeat$ = -216					; size = 4
_x_repeat$ = -212					; size = 4
_y$ = -208						; size = 4
_x$ = -204						; size = 4
_image_filename$ = -200					; size = 100
_filename$ = -100					; size = 100
?save_high_res_screen_image@@YGXXZ PROC			; save_high_res_screen_image, COMDAT

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 247  : 	char
; 248  : 		filename[100],
; 249  : 		image_filename[100];
; 250  : 
; 251  : 	int
; 252  : 		x,
; 253  : 		y,
; 254  : 		x_repeat,
; 255  : 		y_repeat,
; 256  : 		screen_width,
; 257  : 		screen_height,
; 258  : 		screen_pitch;
; 259  : 
; 260  : 	unsigned short int
; 261  : 		*huge_screen_shot_memory;
; 262  : 
; 263  : 	unsigned char
; 264  : 		*screen_data;
; 265  : 
; 266  : 	x_repeat = 8;

  0000c	c7 85 2c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR _x_repeat$[ebp], 8

; 267  : 
; 268  : 	y_repeat = 8;

  00016	c7 85 28 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR _y_repeat$[ebp], 8

; 269  : 
; 270  : 	screen_width = get_screen_width ( video_screen );

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ?get_screen_width@@YGHPAUSCREEN@@@Z ; get_screen_width
  0002b	89 85 24 ff ff
	ff		 mov	 DWORD PTR _screen_width$[ebp], eax

; 271  : 
; 272  : 	screen_height = get_screen_height ( video_screen );

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?get_screen_height@@YGHPAUSCREEN@@@Z ; get_screen_height
  0003c	89 85 20 ff ff
	ff		 mov	 DWORD PTR _screen_height$[ebp], eax

; 273  : 
; 274  : 	huge_screen_shot_memory = ( unsigned short int * ) safe_malloc ( sizeof ( unsigned short int ) * screen_width * screen_height * x_repeat * y_repeat );

  00042	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _screen_width$[ebp]
  00048	d1 e0		 shl	 eax, 1
  0004a	0f af 85 20 ff
	ff ff		 imul	 eax, DWORD PTR _screen_height$[ebp]
  00051	0f af 85 2c ff
	ff ff		 imul	 eax, DWORD PTR _x_repeat$[ebp]
  00058	0f af 85 28 ff
	ff ff		 imul	 eax, DWORD PTR _y_repeat$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00065	89 85 18 ff ff
	ff		 mov	 DWORD PTR _huge_screen_shot_memory$[ebp], eax

; 275  : 
; 276  : 	for ( y = 0; y < y_repeat; y++ )

  0006b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$[ebp], 0
  00075	eb 0f		 jmp	 SHORT $LN4@save_high_
$LN2@save_high_:
  00077	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _y$[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 85 30 ff ff
	ff		 mov	 DWORD PTR _y$[ebp], eax
$LN4@save_high_:
  00086	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _y$[ebp]
  0008c	3b 85 28 ff ff
	ff		 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  00092	0f 8d 51 01 00
	00		 jge	 $LN3@save_high_

; 277  : 	{
; 278  : 
; 279  : 		for ( x = 0; x < x_repeat; x++ )

  00098	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$[ebp], 0
  000a2	eb 0f		 jmp	 SHORT $LN7@save_high_
$LN5@save_high_:
  000a4	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _x$[ebp]
  000aa	83 c0 01	 add	 eax, 1
  000ad	89 85 34 ff ff
	ff		 mov	 DWORD PTR _x$[ebp], eax
$LN7@save_high_:
  000b3	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _x$[ebp]
  000b9	3b 85 2c ff ff
	ff		 cmp	 eax, DWORD PTR _x_repeat$[ebp]
  000bf	0f 8d 1f 01 00
	00		 jge	 $LN6@save_high_

; 280  : 		{
; 281  : 
; 282  : 			unsigned short int
; 283  : 				*destination_ptr,
; 284  : 				*screen_line;
; 285  : 
; 286  : 			int
; 287  : 				screen_y;
; 288  : 
; 289  : 			//
; 290  : 			// Render the big views
; 291  : 			//
; 292  : 
; 293  : 			draw_application_highres_screen ( x, y, x_repeat, y_repeat );

  000c5	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _y_repeat$[ebp]
  000cb	50		 push	 eax
  000cc	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _x_repeat$[ebp]
  000d2	51		 push	 ecx
  000d3	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _y$[ebp]
  000d9	52		 push	 edx
  000da	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _x$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?draw_application_highres_screen@@YGXHHHH@Z ; draw_application_highres_screen

; 294  : 
; 295  : 			if ( lock_screen ( video_screen ) )

  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  000f1	85 c0		 test	 eax, eax
  000f3	0f 84 e6 00 00
	00		 je	 $LN13@save_high_

; 296  : 			{
; 297  : 	
; 298  : 				screen_data = get_screen_data ( video_screen );

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00104	89 85 14 ff ff
	ff		 mov	 DWORD PTR _screen_data$[ebp], eax

; 299  : 	
; 300  : 				screen_pitch = get_screen_pitch ( video_screen );

  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00115	89 85 1c ff ff
	ff		 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 301  : 	
; 302  : 				destination_ptr = huge_screen_shot_memory + ( y * x_repeat * screen_width * screen_height ) + ( x * screen_width );

  0011b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _y$[ebp]
  00121	0f af 85 2c ff
	ff ff		 imul	 eax, DWORD PTR _x_repeat$[ebp]
  00128	0f af 85 24 ff
	ff ff		 imul	 eax, DWORD PTR _screen_width$[ebp]
  0012f	0f af 85 20 ff
	ff ff		 imul	 eax, DWORD PTR _screen_height$[ebp]
  00136	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _huge_screen_shot_memory$[ebp]
  0013c	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0013f	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _x$[ebp]
  00145	0f af 85 24 ff
	ff ff		 imul	 eax, DWORD PTR _screen_width$[ebp]
  0014c	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  0014f	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _destination_ptr$3[ebp], ecx

; 303  : 	
; 304  : 				for ( screen_y = 0; screen_y < screen_height; screen_y++ )

  00155	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _screen_y$1[ebp], 0
  0015f	eb 0f		 jmp	 SHORT $LN10@save_high_
$LN8@save_high_:
  00161	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _screen_y$1[ebp]
  00167	83 c0 01	 add	 eax, 1
  0016a	89 85 08 ff ff
	ff		 mov	 DWORD PTR _screen_y$1[ebp], eax
$LN10@save_high_:
  00170	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _screen_y$1[ebp]
  00176	3b 85 20 ff ff
	ff		 cmp	 eax, DWORD PTR _screen_height$[ebp]
  0017c	7d 56		 jge	 SHORT $LN9@save_high_

; 305  : 				{
; 306  : 	
; 307  : 					screen_line = ( unsigned short int * ) ( screen_data + ( screen_y * screen_pitch ) );

  0017e	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _screen_y$1[ebp]
  00184	0f af 85 1c ff
	ff ff		 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0018b	03 85 14 ff ff
	ff		 add	 eax, DWORD PTR _screen_data$[ebp]
  00191	89 85 0c ff ff
	ff		 mov	 DWORD PTR _screen_line$2[ebp], eax

; 308  : 	
; 309  : 					memcpy ( destination_ptr, screen_line, screen_width * sizeof ( unsigned short int ) );

  00197	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _screen_width$[ebp]
  0019d	d1 e0		 shl	 eax, 1
  0019f	50		 push	 eax
  001a0	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _screen_line$2[ebp]
  001a6	51		 push	 ecx
  001a7	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _destination_ptr$3[ebp]
  001ad	52		 push	 edx
  001ae	e8 00 00 00 00	 call	 _memcpy
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 310  : 	
; 311  : 					destination_ptr += x_repeat * screen_width;

  001b6	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _x_repeat$[ebp]
  001bc	0f af 85 24 ff
	ff ff		 imul	 eax, DWORD PTR _screen_width$[ebp]
  001c3	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _destination_ptr$3[ebp]
  001c9	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001cc	89 95 10 ff ff
	ff		 mov	 DWORD PTR _destination_ptr$3[ebp], edx

; 312  : 				}

  001d2	eb 8d		 jmp	 SHORT $LN8@save_high_
$LN9@save_high_:

; 313  : 	
; 314  : 				unlock_screen ( video_screen );

  001d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN13@save_high_:

; 315  : 			}
; 316  : 		}

  001df	e9 c0 fe ff ff	 jmp	 $LN5@save_high_
$LN6@save_high_:

; 317  : 	}

  001e4	e9 8e fe ff ff	 jmp	 $LN2@save_high_
$LN3@save_high_:

; 318  : 
; 319  : 	//
; 320  : 	// find first screen shot index
; 321  : 	//
; 322  : 
; 323  : 	if (!found_first_screen_shot_index)

  001e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?found_first_screen_shot_index@@3HA, 0
  001f0	75 63		 jne	 SHORT $LN14@save_high_
$LN11@save_high_:

; 324  : 	{
; 325  : 		while (TRUE)

  001f2	b8 01 00 00 00	 mov	 eax, 1
  001f7	85 c0		 test	 eax, eax
  001f9	74 5a		 je	 SHORT $LN14@save_high_

; 326  : 		{
; 327  : 			sprintf (image_filename, "%sIMAGE%03d.PSD", LARGE_IMAGE_PATH, screen_shot_index);

  001fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?screen_shot_index@@3HA
  00200	50		 push	 eax
  00201	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KOFFPGAD@SCRNSHOT?2LARGE?2@
  00206	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FIDNICFK@?$CFsIMAGE?$CF03d?4PSD@
  0020b	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _image_filename$[ebp]
  00211	51		 push	 ecx
  00212	e8 00 00 00 00	 call	 _sprintf
  00217	83 c4 10	 add	 esp, 16			; 00000010H

; 328  : 
; 329  : 			if (file_exist (image_filename))

  0021a	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _image_filename$[ebp]
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00226	85 c0		 test	 eax, eax
  00228	74 1d		 je	 SHORT $LN15@save_high_

; 330  : 			{
; 331  : 				screen_shot_index++;

  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?screen_shot_index@@3HA
  0022f	83 c0 01	 add	 eax, 1
  00232	a3 00 00 00 00	 mov	 DWORD PTR ?screen_shot_index@@3HA, eax

; 332  : 
; 333  : 				if (screen_shot_index == 1000)

  00237	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?screen_shot_index@@3HA, 1000 ; 000003e8H
  00241	75 02		 jne	 SHORT $LN17@save_high_

; 334  : 				{
; 335  : 					break;

  00243	eb 10		 jmp	 SHORT $LN14@save_high_
$LN17@save_high_:

; 336  : 				}
; 337  : 			}
; 338  : 			else

  00245	eb 0c		 jmp	 SHORT $LN16@save_high_
$LN15@save_high_:

; 339  : 			{
; 340  : 				found_first_screen_shot_index = TRUE;

  00247	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?found_first_screen_shot_index@@3HA, 1

; 341  : 
; 342  : 				break;

  00251	eb 02		 jmp	 SHORT $LN14@save_high_
$LN16@save_high_:

; 343  : 			}
; 344  : 		}

  00253	eb 9d		 jmp	 SHORT $LN11@save_high_
$LN14@save_high_:

; 345  : 	}
; 346  : 
; 347  : 	//
; 348  : 	// write screen files and viewpoint data file
; 349  : 	//
; 350  : 
; 351  : 	if (screen_shot_index <= MAX_SCREEN_SHOT_INDEX)

  00255	81 3d 00 00 00
	00 e7 03 00 00	 cmp	 DWORD PTR ?screen_shot_index@@3HA, 999 ; 000003e7H
  0025f	0f 8f 93 00 00
	00		 jg	 $LN18@save_high_

; 352  : 	{
; 353  : 		sprintf (filename, "IMAGE%03d", screen_shot_index);

  00265	a1 00 00 00 00	 mov	 eax, DWORD PTR ?screen_shot_index@@3HA
  0026a	50		 push	 eax
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_09LELPOAFH@IMAGE?$CF03d@
  00270	8d 4d 9c	 lea	 ecx, DWORD PTR _filename$[ebp]
  00273	51		 push	 ecx
  00274	e8 00 00 00 00	 call	 _sprintf
  00279	83 c4 0c	 add	 esp, 12			; 0000000cH

; 354  : 
; 355  : 		debug_log ("Saving screen image (%s)", filename);

  0027c	8d 45 9c	 lea	 eax, DWORD PTR _filename$[ebp]
  0027f	50		 push	 eax
  00280	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DMELAHIC@Saving?5screen?5image?5?$CI?$CFs?$CJ@
  00285	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0028a	83 c4 08	 add	 esp, 8

; 356  : 
; 357  : 		sprintf (image_filename, "%s%s.PSD", LARGE_IMAGE_PATH, filename);

  0028d	8d 45 9c	 lea	 eax, DWORD PTR _filename$[ebp]
  00290	50		 push	 eax
  00291	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KOFFPGAD@SCRNSHOT?2LARGE?2@
  00296	68 00 00 00 00	 push	 OFFSET ??_C@_08KMGPFHLF@?$CFs?$CFs?4PSD@
  0029b	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _image_filename$[ebp]
  002a1	51		 push	 ecx
  002a2	e8 00 00 00 00	 call	 _sprintf
  002a7	83 c4 10	 add	 esp, 16			; 00000010H

; 358  : 
; 359  : 		write_psd_screen_file ( image_filename,

  002aa	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _huge_screen_shot_memory$[ebp]
  002b0	50		 push	 eax
  002b1	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _screen_width$[ebp]
  002b7	0f af 8d 2c ff
	ff ff		 imul	 ecx, DWORD PTR _x_repeat$[ebp]
  002be	d1 e1		 shl	 ecx, 1
  002c0	51		 push	 ecx
  002c1	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _screen_height$[ebp]
  002c7	0f af 95 28 ff
	ff ff		 imul	 edx, DWORD PTR _y_repeat$[ebp]
  002ce	52		 push	 edx
  002cf	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _screen_width$[ebp]
  002d5	0f af 85 2c ff
	ff ff		 imul	 eax, DWORD PTR _x_repeat$[ebp]
  002dc	50		 push	 eax
  002dd	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _image_filename$[ebp]
  002e3	51		 push	 ecx
  002e4	e8 00 00 00 00	 call	 ?write_psd_screen_file@@YGXPBDHHHPBE@Z ; write_psd_screen_file

; 360  : 												screen_width * x_repeat,
; 361  : 												screen_height * y_repeat,
; 362  : 												screen_width * x_repeat * sizeof ( unsigned short int ),
; 363  : 												( unsigned char * ) huge_screen_shot_memory );
; 364  : 
; 365  : 		screen_shot_index++;

  002e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?screen_shot_index@@3HA
  002ee	83 c0 01	 add	 eax, 1
  002f1	a3 00 00 00 00	 mov	 DWORD PTR ?screen_shot_index@@3HA, eax

; 366  : 	}
; 367  : 	else

  002f6	eb 0f		 jmp	 SHORT $LN19@save_high_
$LN18@save_high_:

; 368  : 	{
; 369  : 		debug_colour_log (DEBUG_COLOUR_RED, "Exceeded screen image limit");

  002f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NPIODENA@Exceeded?5screen?5image?5limit@
  002fd	6a 04		 push	 4
  002ff	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00304	83 c4 08	 add	 esp, 8
$LN19@save_high_:

; 370  : 	}
; 371  : 
; 372  : 	safe_free ( huge_screen_shot_memory );

  00307	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _huge_screen_shot_memory$[ebp]
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 373  : }

  00313	5f		 pop	 edi
  00314	5e		 pop	 esi
  00315	5b		 pop	 ebx
  00316	8b e5		 mov	 esp, ebp
  00318	5d		 pop	 ebp
  00319	c3		 ret	 0
?save_high_res_screen_image@@YGXXZ ENDP			; save_high_res_screen_image
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\scrnshot.c
;	COMDAT ?delete_screen_image_and_viewpoint_data@@YGXXZ
_TEXT	SEGMENT
_viewpoint_data_filename$ = -400			; size = 100
_small_image_filename$ = -300				; size = 100
_large_image_filename$ = -200				; size = 100
_filename$ = -100					; size = 100
?delete_screen_image_and_viewpoint_data@@YGXXZ PROC	; delete_screen_image_and_viewpoint_data, COMDAT

; 210  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 01 00
	00		 sub	 esp, 464		; 000001d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 211  : 	char
; 212  : 		filename[100],
; 213  : 		large_image_filename[100],
; 214  : 		small_image_filename[100],
; 215  : 		viewpoint_data_filename[100];
; 216  : 
; 217  : 	debug_colour_log (DEBUG_COLOUR_RED, "Deleting all screen images");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HCBDIING@Deleting?5all?5screen?5images@
  00011	6a 04		 push	 4
  00013	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00018	83 c4 08	 add	 esp, 8

; 218  : 
; 219  : 	for (screen_shot_index = 0; screen_shot_index < MAX_SCREEN_SHOT_INDEX; screen_shot_index++)

  0001b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?screen_shot_index@@3HA, 0
  00025	eb 0d		 jmp	 SHORT $LN4@delete_scr
$LN2@delete_scr:
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?screen_shot_index@@3HA
  0002c	83 c0 01	 add	 eax, 1
  0002f	a3 00 00 00 00	 mov	 DWORD PTR ?screen_shot_index@@3HA, eax
$LN4@delete_scr:
  00034	81 3d 00 00 00
	00 e7 03 00 00	 cmp	 DWORD PTR ?screen_shot_index@@3HA, 999 ; 000003e7H
  0003e	0f 8d a3 00 00
	00		 jge	 $LN3@delete_scr

; 220  : 	{
; 221  : 		sprintf (filename, "IMAGE%03d", screen_shot_index);

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?screen_shot_index@@3HA
  00049	50		 push	 eax
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_09LELPOAFH@IMAGE?$CF03d@
  0004f	8d 4d 9c	 lea	 ecx, DWORD PTR _filename$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 _sprintf
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH

; 222  : 
; 223  : 		sprintf (large_image_filename, "%s%s.TGA", LARGE_IMAGE_PATH, filename);

  0005b	8d 45 9c	 lea	 eax, DWORD PTR _filename$[ebp]
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KOFFPGAD@SCRNSHOT?2LARGE?2@
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_08EFFFDPAL@?$CFs?$CFs?4TGA@
  00069	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _large_image_filename$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _sprintf
  00075	83 c4 10	 add	 esp, 16			; 00000010H

; 224  : 
; 225  : 		sprintf (small_image_filename, "%s%s.TGA", SMALL_IMAGE_PATH, filename);

  00078	8d 45 9c	 lea	 eax, DWORD PTR _filename$[ebp]
  0007b	50		 push	 eax
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LHJBILID@SCRNSHOT?2SMALL?2@
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_08EFFFDPAL@?$CFs?$CFs?4TGA@
  00086	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _small_image_filename$[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 _sprintf
  00092	83 c4 10	 add	 esp, 16			; 00000010H

; 226  : 
; 227  : 		sprintf (viewpoint_data_filename, "%s%s.TXT", VIEWPOINT_DATA_PATH, filename);

  00095	8d 45 9c	 lea	 eax, DWORD PTR _filename$[ebp]
  00098	50		 push	 eax
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_09PGCLNKBB@SCRNSHOT?2@
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_08GFJKDNFC@?$CFs?$CFs?4TXT@
  000a3	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _viewpoint_data_filename$[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 _sprintf
  000af	83 c4 10	 add	 esp, 16			; 00000010H

; 228  : 
; 229  : 		remove (large_image_filename);

  000b2	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _large_image_filename$[ebp]
  000b8	50		 push	 eax
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__remove
  000bf	83 c4 04	 add	 esp, 4

; 230  : 
; 231  : 		remove (small_image_filename);

  000c2	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _small_image_filename$[ebp]
  000c8	50		 push	 eax
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__remove
  000cf	83 c4 04	 add	 esp, 4

; 232  : 
; 233  : 		remove (viewpoint_data_filename);

  000d2	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _viewpoint_data_filename$[ebp]
  000d8	50		 push	 eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__remove
  000df	83 c4 04	 add	 esp, 4

; 234  : 	}

  000e2	e9 40 ff ff ff	 jmp	 $LN2@delete_scr
$LN3@delete_scr:

; 235  : 
; 236  : 	found_first_screen_shot_index = TRUE;

  000e7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?found_first_screen_shot_index@@3HA, 1

; 237  : 
; 238  : 	screen_shot_index = 0;

  000f1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?screen_shot_index@@3HA, 0

; 239  : }

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
?delete_screen_image_and_viewpoint_data@@YGXXZ ENDP	; delete_screen_image_and_viewpoint_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\scrnshot.c
;	COMDAT ?save_screen_image_and_viewpoint_data@@YGXXZ
_TEXT	SEGMENT
tv356 = -480						; size = 4
tv341 = -480						; size = 4
tv330 = -480						; size = 4
_z_sec$ = -412						; size = 4
_x_sec$ = -408						; size = 4
_fp$ = -404						; size = 4
_viewpoint_data_filename$ = -400			; size = 100
_small_image_filename$ = -300				; size = 100
_large_image_filename$ = -200				; size = 100
_filename$ = -100					; size = 100
?save_screen_image_and_viewpoint_data@@YGXXZ PROC	; save_screen_image_and_viewpoint_data, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 01 00
	00		 sub	 esp, 480		; 000001e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 99   : 	char
; 100  : 		filename[100],
; 101  : 		large_image_filename[100],
; 102  : 		small_image_filename[100],
; 103  : 		viewpoint_data_filename[100];
; 104  : 
; 105  : 	FILE
; 106  : 		*fp;
; 107  : 
; 108  : 	int
; 109  : 		x_sec,
; 110  : 		z_sec;
; 111  : 
; 112  : 	//
; 113  : 	// find first screen shot index
; 114  : 	//
; 115  : 
; 116  : 	if (!found_first_screen_shot_index)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?found_first_screen_shot_index@@3HA, 0
  00013	75 63		 jne	 SHORT $LN3@save_scree
$LN2@save_scree:

; 117  : 	{
; 118  : 		while (TRUE)

  00015	b8 01 00 00 00	 mov	 eax, 1
  0001a	85 c0		 test	 eax, eax
  0001c	74 5a		 je	 SHORT $LN3@save_scree

; 119  : 		{
; 120  : 			sprintf (large_image_filename, "%sIMAGE%03d.TGA", LARGE_IMAGE_PATH, screen_shot_index);

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?screen_shot_index@@3HA
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KOFFPGAD@SCRNSHOT?2LARGE?2@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LBAHOKOE@?$CFsIMAGE?$CF03d?4TGA@
  0002e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _large_image_filename$[ebp]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _sprintf
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 121  : 
; 122  : 			if (file_exist (large_image_filename))

  0003d	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _large_image_filename$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00049	85 c0		 test	 eax, eax
  0004b	74 1d		 je	 SHORT $LN5@save_scree

; 123  : 			{
; 124  : 				screen_shot_index++;

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?screen_shot_index@@3HA
  00052	83 c0 01	 add	 eax, 1
  00055	a3 00 00 00 00	 mov	 DWORD PTR ?screen_shot_index@@3HA, eax

; 125  : 
; 126  : 				if (screen_shot_index == 1000)

  0005a	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?screen_shot_index@@3HA, 1000 ; 000003e8H
  00064	75 02		 jne	 SHORT $LN7@save_scree

; 127  : 				{
; 128  : 					break;

  00066	eb 10		 jmp	 SHORT $LN3@save_scree
$LN7@save_scree:

; 129  : 				}
; 130  : 			}
; 131  : 			else

  00068	eb 0c		 jmp	 SHORT $LN6@save_scree
$LN5@save_scree:

; 132  : 			{
; 133  : 				found_first_screen_shot_index = TRUE;

  0006a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?found_first_screen_shot_index@@3HA, 1

; 134  : 
; 135  : 				break;

  00074	eb 02		 jmp	 SHORT $LN3@save_scree
$LN6@save_scree:

; 136  : 			}
; 137  : 		}

  00076	eb 9d		 jmp	 SHORT $LN2@save_scree
$LN3@save_scree:

; 138  : 	}
; 139  : 
; 140  : 	//
; 141  : 	// write screen files and viewpoint data file
; 142  : 	//
; 143  : 
; 144  : 	if (screen_shot_index <= MAX_SCREEN_SHOT_INDEX)

  00078	81 3d 00 00 00
	00 e7 03 00 00	 cmp	 DWORD PTR ?screen_shot_index@@3HA, 999 ; 000003e7H
  00082	0f 8f b6 03 00
	00		 jg	 $LN8@save_scree

; 145  : 	{
; 146  : 		sprintf (filename, "IMAGE%03d", screen_shot_index);

  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR ?screen_shot_index@@3HA
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_09LELPOAFH@IMAGE?$CF03d@
  00093	8d 4d 9c	 lea	 ecx, DWORD PTR _filename$[ebp]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _sprintf
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 147  : 
; 148  : 		debug_log ("Saving screen image (%s)", filename);

  0009f	8d 45 9c	 lea	 eax, DWORD PTR _filename$[ebp]
  000a2	50		 push	 eax
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DMELAHIC@Saving?5screen?5image?5?$CI?$CFs?$CJ@
  000a8	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000ad	83 c4 08	 add	 esp, 8

; 149  : 
; 150  : 		sprintf (large_image_filename, "%s%s.TGA", LARGE_IMAGE_PATH, filename);

  000b0	8d 45 9c	 lea	 eax, DWORD PTR _filename$[ebp]
  000b3	50		 push	 eax
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KOFFPGAD@SCRNSHOT?2LARGE?2@
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_08EFFFDPAL@?$CFs?$CFs?4TGA@
  000be	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _large_image_filename$[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 _sprintf
  000ca	83 c4 10	 add	 esp, 16			; 00000010H

; 151  : 
; 152  : 		sprintf (small_image_filename, "%s%s.TGA", SMALL_IMAGE_PATH, filename);

  000cd	8d 45 9c	 lea	 eax, DWORD PTR _filename$[ebp]
  000d0	50		 push	 eax
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LHJBILID@SCRNSHOT?2SMALL?2@
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_08EFFFDPAL@?$CFs?$CFs?4TGA@
  000db	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _small_image_filename$[ebp]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 _sprintf
  000e7	83 c4 10	 add	 esp, 16			; 00000010H

; 153  : 
; 154  : 		sprintf (viewpoint_data_filename, "%s%s.TXT", VIEWPOINT_DATA_PATH, filename);

  000ea	8d 45 9c	 lea	 eax, DWORD PTR _filename$[ebp]
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_09PGCLNKBB@SCRNSHOT?2@
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_08GFJKDNFC@?$CFs?$CFs?4TXT@
  000f8	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _viewpoint_data_filename$[ebp]
  000fe	51		 push	 ecx
  000ff	e8 00 00 00 00	 call	 _sprintf
  00104	83 c4 10	 add	 esp, 16			; 00000010H

; 155  : 
; 156  : 		////////////////////////////////////////
; 157  : 
; 158  : 		if (lock_screen (video_screen))

  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00112	85 c0		 test	 eax, eax
  00114	74 1e		 je	 SHORT $LN10@save_scree

; 159  : 		{
; 160  : 
; 161  : 			save_tga_screen_with_thumbnail (large_image_filename, small_image_filename);

  00116	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _small_image_filename$[ebp]
  0011c	50		 push	 eax
  0011d	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _large_image_filename$[ebp]
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 ?save_tga_screen_with_thumbnail@@YGXPBD0@Z ; save_tga_screen_with_thumbnail

; 162  : 
; 163  : 			unlock_screen (video_screen);

  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN10@save_scree:

; 164  : 		}
; 165  : 
; 166  : 		////////////////////////////////////////
; 167  : 
; 168  : 		fp = safe_fopen (viewpoint_data_filename, "w");

  00134	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  00139	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _viewpoint_data_filename$[ebp]
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00145	89 85 6c fe ff
	ff		 mov	 DWORD PTR _fp$[ebp], eax

; 169  : 
; 170  : 		fprintf (fp, "Image viewpoint data:\n\n");

  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OPMFOFML@Image?5viewpoint?5data?3?6?6@
  00150	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 _fprintf
  0015c	83 c4 08	 add	 esp, 8

; 171  : 
; 172  : 		fprintf (fp, "Map           : unknown\n");

  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DNOHEDEI@Map?5?5?5?5?5?5?5?5?5?5?5?3?5unknown?6@
  00164	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 _fprintf
  00170	83 c4 08	 add	 esp, 8

; 173  : 
; 174  : 		fprintf (fp, "X             : %.2f\n", main_vp.x);

  00173	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A
  0017b	83 ec 08	 sub	 esp, 8
  0017e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PJCPDHPN@X?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@
  00188	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 _fprintf
  00194	83 c4 10	 add	 esp, 16			; 00000010H

; 175  : 		fprintf (fp, "Y             : %.2f\n", main_vp.y);

  00197	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A+4
  0019f	83 ec 08	 sub	 esp, 8
  001a2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@OOAHFDDN@Y?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@
  001ac	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 _fprintf
  001b8	83 c4 10	 add	 esp, 16			; 00000010H

; 176  : 		fprintf (fp, "Z             : %.2f\n", main_vp.z);

  001bb	f3 0f 5a 05 08
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A+8
  001c3	83 ec 08	 sub	 esp, 8
  001c6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NHHPPOHN@Z?5?5?5?5?5?5?5?5?5?5?5?5?5?3?5?$CF?42f?6@
  001d0	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 _fprintf
  001dc	83 c4 10	 add	 esp, 16			; 00000010H

; 177  : 
; 178  : 		get_terrain_3d_sector (main_vp.x, main_vp.z, &x_sec, &z_sec);

  001df	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR _z_sec$[ebp]
  001e5	50		 push	 eax
  001e6	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _x_sec$[ebp]
  001ec	51		 push	 ecx
  001ed	51		 push	 ecx
  001ee	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A+8
  001f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fb	51		 push	 ecx
  001fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A
  00204	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00209	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 179  : 
; 180  : 		fprintf (fp, "X sector (3D) : %d\n", x_sec);

  0020e	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _x_sec$[ebp]
  00214	50		 push	 eax
  00215	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@ONALAIOL@X?5sector?5?$CI3D?$CJ?5?3?5?$CFd?6@
  0021a	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR _fp$[ebp]
  00220	51		 push	 ecx
  00221	e8 00 00 00 00	 call	 _fprintf
  00226	83 c4 0c	 add	 esp, 12			; 0000000cH

; 181  : 		fprintf (fp, "Z sector (3D) : %d\n", z_sec);

  00229	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _z_sec$[ebp]
  0022f	50		 push	 eax
  00230	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CHMFHOGH@Z?5sector?5?$CI3D?$CJ?5?3?5?$CFd?6@
  00235	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR _fp$[ebp]
  0023b	51		 push	 ecx
  0023c	e8 00 00 00 00	 call	 _fprintf
  00241	83 c4 0c	 add	 esp, 12			; 0000000cH

; 182  : 
; 183  : 		get_x_sector (x_sec, main_vp.x);

  00244	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _x_sec$[ebp]
  0024a	50		 push	 eax
  0024b	51		 push	 ecx
  0024c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A
  00254	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00259	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0025e	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _x_sec$[ebp]
  00264	99		 cdq
  00265	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  0026b	89 85 68 fe ff
	ff		 mov	 DWORD PTR _x_sec$[ebp], eax

; 184  : 		get_z_sector (z_sec, main_vp.z);

  00271	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR _z_sec$[ebp]
  00277	50		 push	 eax
  00278	51		 push	 ecx
  00279	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A+8
  00281	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00286	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0028b	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _z_sec$[ebp]
  00291	99		 cdq
  00292	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00298	89 85 64 fe ff
	ff		 mov	 DWORD PTR _z_sec$[ebp], eax

; 185  : 
; 186  : 		fprintf (fp, "X sector (AI) : %d\n", x_sec);

  0029e	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _x_sec$[ebp]
  002a4	50		 push	 eax
  002a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OOPILKBJ@X?5sector?5?$CIAI?$CJ?5?3?5?$CFd?6@
  002aa	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR _fp$[ebp]
  002b0	51		 push	 ecx
  002b1	e8 00 00 00 00	 call	 _fprintf
  002b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 187  : 		fprintf (fp, "Z sector (AI) : %d\n", z_sec);

  002b9	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _z_sec$[ebp]
  002bf	50		 push	 eax
  002c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CEDGMMJF@Z?5sector?5?$CIAI?$CJ?5?3?5?$CFd?6@
  002c5	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR _fp$[ebp]
  002cb	51		 push	 ecx
  002cc	e8 00 00 00 00	 call	 _fprintf
  002d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 188  : 
; 189  : 		fprintf (fp, "Heading (degs): %.2f\n", deg (get_heading_from_attitude_matrix (main_vp.attitude)));

  002d4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002d9	d1 e0		 shl	 eax, 1
  002db	b9 04 00 00 00	 mov	 ecx, 4
  002e0	d1 e1		 shl	 ecx, 1
  002e2	51		 push	 ecx
  002e3	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  002ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  002f6	d1 e2		 shl	 edx, 1
  002f8	b8 04 00 00 00	 mov	 eax, 4
  002fd	6b c8 00	 imul	 ecx, eax, 0
  00300	51		 push	 ecx
  00301	f3 0f 10 84 0a
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A[edx+ecx+12]
  0030a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030f	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00314	d9 9d 20 fe ff
	ff		 fstp	 DWORD PTR tv330[ebp]
  0031a	f3 0f 10 85 20
	fe ff ff	 movss	 xmm0, DWORD PTR tv330[ebp]
  00322	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  0032a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0032e	83 ec 08	 sub	 esp, 8
  00331	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00336	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@LHNAJEAF@Heading?5?$CIdegs?$CJ?3?5?$CF?42f?6@
  0033b	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _fp$[ebp]
  00341	52		 push	 edx
  00342	e8 00 00 00 00	 call	 _fprintf
  00347	83 c4 10	 add	 esp, 16			; 00000010H

; 190  : 		fprintf (fp, "Pitch (degs)  : %.2f\n", deg (get_pitch_from_attitude_matrix (main_vp.attitude)));

  0034a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0034f	d1 e0		 shl	 eax, 1
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	c1 e1 00	 shl	 ecx, 0
  00359	51		 push	 ecx
  0035a	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  00363	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00368	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  0036d	d9 9d 20 fe ff
	ff		 fstp	 DWORD PTR tv341[ebp]
  00373	f3 0f 10 85 20
	fe ff ff	 movss	 xmm0, DWORD PTR tv341[ebp]
  0037b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00383	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00387	83 ec 08	 sub	 esp, 8
  0038a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0038f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NACMLLCE@Pitch?5?$CIdegs?$CJ?5?5?3?5?$CF?42f?6@
  00394	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _fp$[ebp]
  0039a	52		 push	 edx
  0039b	e8 00 00 00 00	 call	 _fprintf
  003a0	83 c4 10	 add	 esp, 16			; 00000010H

; 191  : 		fprintf (fp, "Roll (degs)   : %.2f\n", deg (get_roll_from_attitude_matrix (main_vp.attitude)));

  003a3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003a8	c1 e0 00	 shl	 eax, 0
  003ab	b9 04 00 00 00	 mov	 ecx, 4
  003b0	c1 e1 00	 shl	 ecx, 0
  003b3	51		 push	 ecx
  003b4	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  003bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c2	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003c7	6b c2 00	 imul	 eax, edx, 0
  003ca	b9 04 00 00 00	 mov	 ecx, 4
  003cf	c1 e1 00	 shl	 ecx, 0
  003d2	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?main_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  003db	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003e2	51		 push	 ecx
  003e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e8	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  003ed	d9 9d 20 fe ff
	ff		 fstp	 DWORD PTR tv356[ebp]
  003f3	f3 0f 10 85 20
	fe ff ff	 movss	 xmm0, DWORD PTR tv356[ebp]
  003fb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00403	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00407	83 ec 08	 sub	 esp, 8
  0040a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0040f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HFHJHHBK@Roll?5?$CIdegs?$CJ?5?5?5?3?5?$CF?42f?6@
  00414	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _fp$[ebp]
  0041a	52		 push	 edx
  0041b	e8 00 00 00 00	 call	 _fprintf
  00420	83 c4 10	 add	 esp, 16			; 00000010H

; 192  : 
; 193  : 		safe_fclose (fp);

  00423	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  00429	50		 push	 eax
  0042a	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 194  : 
; 195  : 		////////////////////////////////////////
; 196  : 
; 197  : 		screen_shot_index++;

  0042f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?screen_shot_index@@3HA
  00434	83 c0 01	 add	 eax, 1
  00437	a3 00 00 00 00	 mov	 DWORD PTR ?screen_shot_index@@3HA, eax

; 198  : 	}
; 199  : 	else

  0043c	eb 0f		 jmp	 SHORT $LN9@save_scree
$LN8@save_scree:

; 200  : 	{
; 201  : 		debug_colour_log (DEBUG_COLOUR_RED, "Exceeded screen image limit");

  0043e	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NPIODENA@Exceeded?5screen?5image?5limit@
  00443	6a 04		 push	 4
  00445	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  0044a	83 c4 08	 add	 esp, 8
$LN9@save_scree:

; 202  : 	}
; 203  : }

  0044d	5f		 pop	 edi
  0044e	5e		 pop	 esi
  0044f	5b		 pop	 ebx
  00450	8b e5		 mov	 esp, ebp
  00452	5d		 pop	 ebp
  00453	c3		 ret	 0
?save_screen_image_and_viewpoint_data@@YGXXZ ENDP	; save_screen_image_and_viewpoint_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
