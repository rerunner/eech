; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\clouds\3dclouds.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?draw_3d_cloud@@YGXPAUOBJECT_3D_INSTANCE@@@Z	; draw_3d_cloud
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4054400000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	?set_fpu_precision_mode_single@@YGXXZ:PROC	; set_fpu_precision_mode_single
EXTRN	?set_fpu_precision_mode_double@@YGXXZ:PROC	; set_fpu_precision_mode_double
EXTRN	?normalise_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_3d_vector
EXTRN	?get_object_approximation_number@@YGHHMPAH@Z:PROC ; get_object_approximation_number
EXTRN	?float_value_zero@@3MB:DWORD			; float_value_zero
EXTRN	?float_value_one@@3MB:DWORD			; float_value_one
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?objects_3d_data@@3PAUOBJECT_3D@@A:DWORD	; objects_3d_data
EXTRN	?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A:BYTE	; ambient_3d_light
EXTRN	?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A:DWORD ; current_3d_lights
EXTRN	?light_3d_array@@3PAULIGHT_3D_SOURCE@@A:BYTE	; light_3d_array
EXTRN	?rotation_3d@@3PAY02MA:BYTE			; rotation_3d
EXTRN	?transformed_3d_points@@3PAUVERTEX@@A:BYTE	; transformed_3d_points
EXTRN	?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A:BYTE ; transformed_3d_normals
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4054400000000000
CONST	SEGMENT
__real@4054400000000000 DQ 04054400000000000r	; 81
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\clouds\3dclouds.c
;	COMDAT ?transform_3d_cloud@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@H@Z
_TEXT	SEGMENT
tv231 = -272						; size = 8
tv232 = -264						; size = 8
_j$1 = -192						; size = 4
_i$2 = -188						; size = 4
_q$3 = -184						; size = 4
_z$4 = -180						; size = 4
_y$5 = -176						; size = 4
_x$6 = -172						; size = 4
_temp$7 = -168						; size = 4
_temp_intensity$8 = -164				; size = 4
_this_light$9 = -160					; size = 4
_b$10 = -156						; size = 4
_g$11 = -152						; size = 4
_r$12 = -148						; size = 4
_iymin$ = -144						; size = 4
_iymax$ = -140						; size = 4
_ixmin$ = -136						; size = 4
_ixmax$ = -132						; size = 4
_oymin$ = -128						; size = 4
_oymax$ = -124						; size = 4
_oxmin$ = -120						; size = 4
_oxmax$ = -116						; size = 4
_pos_z$ = -112						; size = 4
_pos_y$ = -108						; size = 4
_pos_x$ = -104						; size = 4
_result_normals$ = -100					; size = 4
_transformed_point_normals$ = -96			; size = 4
_tmp_vertex$ = -92					; size = 64
_result_points$ = -28					; size = 4
_last_transformed_point$ = -24				; size = 4
_point_normals$ = -20					; size = 4
_points$ = -16						; size = 4
_number_of_normals$ = -12				; size = 4
_number_of_points$ = -8					; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_points_base$ = 20					; size = 4
?transform_3d_cloud@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@H@Z PROC ; transform_3d_cloud, COMDAT

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 413  : 
; 414  : 	int
; 415  : 		count,
; 416  : 		number_of_points,
; 417  : 		number_of_normals;
; 418  : 
; 419  : 	object_short_3d_point
; 420  : 		*points;
; 421  : 
; 422  : 	object_3d_heading_pitch_normal
; 423  : 		*point_normals;
; 424  : 
; 425  : 	vertex
; 426  : 		*last_transformed_point,
; 427  : 		*result_points,
; 428  : 		tmp_vertex;
; 429  : 
; 430  : 	object_3d_transformed_point_normal
; 431  : 		*transformed_point_normals,
; 432  : 		*result_normals;
; 433  : 
; 434  : 	float
; 435  : 		pos_x,
; 436  : 		pos_y,
; 437  : 		pos_z,
; 438  : 		oxmax,
; 439  : 		oxmin,
; 440  : 		oymax,
; 441  : 		oymin;
; 442  : 
; 443  : 	int
; 444  : 		ixmax,
; 445  : 		ixmin,
; 446  : 		iymax,
; 447  : 		iymin;
; 448  : 
; 449  : 	//
; 450  : 	// We only need the fpu to be in single precision mode
; 451  : 	//
; 452  : 
; 453  : 	set_fpu_precision_mode_single ();

  0000c	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_single@@YGXXZ ; set_fpu_precision_mode_single

; 454  : 
; 455  : 	number_of_points = object->number_of_points;

  00011	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00014	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00017	89 4d f8	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 456  : 
; 457  : 	number_of_normals = object->number_of_point_normals;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0001d	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00021	89 4d f4	 mov	 DWORD PTR _number_of_normals$[ebp], ecx

; 458  : 
; 459  : 	points = object->points;

  00024	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00027	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0002a	89 4d f0	 mov	 DWORD PTR _points$[ebp], ecx

; 460  : 
; 461  : 	point_normals = object->point_normals;

  0002d	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00030	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00033	89 4d ec	 mov	 DWORD PTR _point_normals$[ebp], ecx

; 462  : 
; 463  : 	result_points = &transformed_3d_points[points_base];

  00036	8b 45 14	 mov	 eax, DWORD PTR _points_base$[ebp]
  00039	c1 e0 06	 shl	 eax, 6
  0003c	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  00041	89 45 e4	 mov	 DWORD PTR _result_points$[ebp], eax

; 464  : 
; 465  : 	result_normals = &transformed_3d_normals[points_base];

  00044	8b 45 14	 mov	 eax, DWORD PTR _points_base$[ebp]
  00047	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A[eax*8]
  0004e	89 4d 9c	 mov	 DWORD PTR _result_normals$[ebp], ecx

; 466  : 
; 467  : 	transformed_point_normals = result_normals;

  00051	8b 45 9c	 mov	 eax, DWORD PTR _result_normals$[ebp]
  00054	89 45 a0	 mov	 DWORD PTR _transformed_point_normals$[ebp], eax

; 468  : 
; 469  : 	last_transformed_point = &tmp_vertex;

  00057	8d 45 a4	 lea	 eax, DWORD PTR _tmp_vertex$[ebp]
  0005a	89 45 e8	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 470  : 
; 471  : 	pos_x = pos->x;

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00060	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00064	f3 0f 11 45 98	 movss	 DWORD PTR _pos_x$[ebp], xmm0

; 472  : 	pos_y = pos->y;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  0006c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00071	f3 0f 11 45 94	 movss	 DWORD PTR _pos_y$[ebp], xmm0

; 473  : 	pos_z = pos->z;

  00076	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00079	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0007e	f3 0f 11 45 90	 movss	 DWORD PTR _pos_z$[ebp], xmm0

; 474  : 
; 475  : 	for ( count = number_of_normals; count > 0; count-- )

  00083	8b 45 f4	 mov	 eax, DWORD PTR _number_of_normals$[ebp]
  00086	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  00089	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  0008b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0008e	83 e8 01	 sub	 eax, 1
  00091	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  00094	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00098	0f 8e 76 01 00
	00		 jle	 $LN3@transform_

; 476  : 	{
; 477  : 
; 478  : 
; 479  : 		float
; 480  : 			r,
; 481  : 			g,
; 482  : 			b;
; 483  : 
; 484  : 		light_3d_source
; 485  : 			*this_light;
; 486  : 
; 487  : 		//
; 488  : 		// Set the light levels
; 489  : 		//
; 490  : 
; 491  : 		r = ambient_3d_light.colour.red;

  0009e	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  000a6	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _r$12[ebp], xmm0

; 492  : 		g = ambient_3d_light.colour.green;

  000ae	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  000b6	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _g$11[ebp], xmm0

; 493  : 		b = ambient_3d_light.colour.blue;

  000be	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  000c6	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _b$10[ebp], xmm0

; 494  : 
; 495  : 		this_light = lights;

  000ce	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  000d1	89 85 60 ff ff
	ff		 mov	 DWORD PTR _this_light$9[ebp], eax
$LN5@transform_:

; 496  : 
; 497  : 		while ( this_light )

  000d7	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _this_light$9[ebp], 0
  000de	0f 84 96 00 00
	00		 je	 $LN6@transform_

; 498  : 		{
; 499  : 
; 500  : 			float
; 501  : 				temp_intensity;
; 502  : 
; 503  : //			temp_intensity = point_normals->x * this_light->lx + point_normals->y * this_light->ly + point_normals->z * this_light->lz;
; 504  : 			temp_intensity = 0;

  000e4	0f 57 c0	 xorps	 xmm0, xmm0
  000e7	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _temp_intensity$8[ebp], xmm0

; 505  : 
; 506  : 			if ( *( ( int *) &temp_intensity ) > *( ( int *) &float_value_zero ) )

  000ef	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _temp_intensity$8[ebp]
  000f5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  000fb	7e 69		 jle	 SHORT $LN10@transform_

; 507  : 			{
; 508  : 
; 509  : 				r += temp_intensity * this_light->colour.red;

  000fd	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$9[ebp]
  00103	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$8[ebp]
  0010b	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00110	f3 0f 58 85 6c
	ff ff ff	 addss	 xmm0, DWORD PTR _r$12[ebp]
  00118	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _r$12[ebp], xmm0

; 510  : 				g += temp_intensity * this_light->colour.green;

  00120	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$9[ebp]
  00126	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$8[ebp]
  0012e	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  00133	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _g$11[ebp]
  0013b	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _g$11[ebp], xmm0

; 511  : 				b += temp_intensity * this_light->colour.blue;

  00143	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$9[ebp]
  00149	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$8[ebp]
  00151	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  00156	f3 0f 58 85 64
	ff ff ff	 addss	 xmm0, DWORD PTR _b$10[ebp]
  0015e	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _b$10[ebp], xmm0
$LN10@transform_:

; 512  : 			}
; 513  : 
; 514  : 			this_light = this_light->succ;

  00166	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$9[ebp]
  0016c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0016f	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _this_light$9[ebp], ecx

; 515  : 		}

  00175	e9 5d ff ff ff	 jmp	 $LN5@transform_
$LN6@transform_:

; 516  : 
; 517  : 		if ( *( ( int *) &r ) > *( ( int *) &float_value_one ) )

  0017a	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _r$12[ebp]
  00180	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  00186	7e 10		 jle	 SHORT $LN11@transform_

; 518  : 		{
; 519  : 
; 520  : 			r = 1.0;

  00188	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00190	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _r$12[ebp], xmm0
$LN11@transform_:

; 521  : 		}
; 522  : 
; 523  : 		if ( *( ( int *) &g ) > *( ( int *) &float_value_one ) )

  00198	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _g$11[ebp]
  0019e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  001a4	7e 10		 jle	 SHORT $LN12@transform_

; 524  : 		{
; 525  : 
; 526  : 			g = 1.0;

  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001ae	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _g$11[ebp], xmm0
$LN12@transform_:

; 527  : 		}
; 528  : 
; 529  : 		if ( *( ( int *) &b ) > *( ( int *) &float_value_one ) )

  001b6	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _b$10[ebp]
  001bc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  001c2	7e 10		 jle	 SHORT $LN13@transform_

; 530  : 		{
; 531  : 
; 532  : 			b = 1.0;

  001c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001cc	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _b$10[ebp], xmm0
$LN13@transform_:

; 533  : 		}
; 534  : 
; 535  : 		result_normals->r = r;

  001d4	f3 0f 2c 85 6c
	ff ff ff	 cvttss2si eax, DWORD PTR _r$12[ebp]
  001dc	8b 4d 9c	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  001df	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 536  : 		result_normals->g = g;

  001e2	f3 0f 2c 85 68
	ff ff ff	 cvttss2si eax, DWORD PTR _g$11[ebp]
  001ea	8b 4d 9c	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  001ed	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 537  : 		result_normals->b = b;

  001f0	f3 0f 2c 85 64
	ff ff ff	 cvttss2si eax, DWORD PTR _b$10[ebp]
  001f8	8b 4d 9c	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  001fb	88 01		 mov	 BYTE PTR [ecx], al

; 538  : 
; 539  : 		point_normals++;

  001fd	8b 45 ec	 mov	 eax, DWORD PTR _point_normals$[ebp]
  00200	83 c0 02	 add	 eax, 2
  00203	89 45 ec	 mov	 DWORD PTR _point_normals$[ebp], eax

; 540  : 
; 541  : 		result_normals++;

  00206	8b 45 9c	 mov	 eax, DWORD PTR _result_normals$[ebp]
  00209	83 c0 08	 add	 eax, 8
  0020c	89 45 9c	 mov	 DWORD PTR _result_normals$[ebp], eax

; 542  : 	}

  0020f	e9 77 fe ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 543  : 
; 544  : 	for ( count = number_of_points; count > 0; count-- )

  00214	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00217	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  0021a	eb 09		 jmp	 SHORT $LN9@transform_
$LN7@transform_:
  0021c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0021f	83 e8 01	 sub	 eax, 1
  00222	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN9@transform_:
  00225	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00229	0f 8e 6e 04 00
	00		 jle	 $LN8@transform_

; 545  : 	{
; 546  : 
; 547  : 		{
; 548  : 
; 549  : 			float
; 550  : 				temp,
; 551  : 				x,
; 552  : 				y,
; 553  : 				z;
; 554  : 
; 555  : 			x = points->x * rotation_3d[0][0] + points->y * rotation_3d[1][0] + points->z * rotation_3d[2][0];

  0022f	8b 45 f0	 mov	 eax, DWORD PTR _points$[ebp]
  00232	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00235	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00239	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0023e	6b c2 00	 imul	 eax, edx, 0
  00241	b9 04 00 00 00	 mov	 ecx, 4
  00246	6b d1 00	 imul	 edx, ecx, 0
  00249	f3 0f 59 84 10
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00252	8b 45 f0	 mov	 eax, DWORD PTR _points$[ebp]
  00255	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00259	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  0025d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00262	c1 e2 00	 shl	 edx, 0
  00265	b8 04 00 00 00	 mov	 eax, 4
  0026a	6b c8 00	 imul	 ecx, eax, 0
  0026d	f3 0f 59 8c 0a
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx]
  00276	f3 0f 58 c1	 addss	 xmm0, xmm1
  0027a	8b 55 f0	 mov	 edx, DWORD PTR _points$[ebp]
  0027d	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00281	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00285	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0028a	d1 e1		 shl	 ecx, 1
  0028c	ba 04 00 00 00	 mov	 edx, 4
  00291	6b c2 00	 imul	 eax, edx, 0
  00294	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  0029d	f3 0f 58 c1	 addss	 xmm0, xmm1
  002a1	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _x$6[ebp], xmm0

; 556  : 			y = points->x * rotation_3d[0][1] + points->y * rotation_3d[1][1] + points->z * rotation_3d[2][1];

  002a9	8b 45 f0	 mov	 eax, DWORD PTR _points$[ebp]
  002ac	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  002af	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002b3	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  002b8	6b c2 00	 imul	 eax, edx, 0
  002bb	b9 04 00 00 00	 mov	 ecx, 4
  002c0	c1 e1 00	 shl	 ecx, 0
  002c3	f3 0f 59 84 08
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  002cc	8b 55 f0	 mov	 edx, DWORD PTR _points$[ebp]
  002cf	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  002d3	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  002d7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002dc	c1 e1 00	 shl	 ecx, 0
  002df	ba 04 00 00 00	 mov	 edx, 4
  002e4	c1 e2 00	 shl	 edx, 0
  002e7	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  002f0	f3 0f 58 c1	 addss	 xmm0, xmm1
  002f4	8b 45 f0	 mov	 eax, DWORD PTR _points$[ebp]
  002f7	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  002fb	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  002ff	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00304	d1 e2		 shl	 edx, 1
  00306	b8 04 00 00 00	 mov	 eax, 4
  0030b	c1 e0 00	 shl	 eax, 0
  0030e	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  00317	f3 0f 58 c1	 addss	 xmm0, xmm1
  0031b	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _y$5[ebp], xmm0

; 557  : 			z = points->x * rotation_3d[0][2] + points->y * rotation_3d[1][2] + points->z * rotation_3d[2][2] + pos_z;

  00323	8b 45 f0	 mov	 eax, DWORD PTR _points$[ebp]
  00326	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00329	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0032d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00332	6b c2 00	 imul	 eax, edx, 0
  00335	b9 04 00 00 00	 mov	 ecx, 4
  0033a	d1 e1		 shl	 ecx, 1
  0033c	f3 0f 59 84 08
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00345	8b 55 f0	 mov	 edx, DWORD PTR _points$[ebp]
  00348	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  0034c	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00350	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00355	c1 e1 00	 shl	 ecx, 0
  00358	ba 04 00 00 00	 mov	 edx, 4
  0035d	d1 e2		 shl	 edx, 1
  0035f	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00368	f3 0f 58 c1	 addss	 xmm0, xmm1
  0036c	8b 45 f0	 mov	 eax, DWORD PTR _points$[ebp]
  0036f	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00373	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00377	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0037c	d1 e2		 shl	 edx, 1
  0037e	b8 04 00 00 00	 mov	 eax, 4
  00383	d1 e0		 shl	 eax, 1
  00385	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  0038e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00392	f3 0f 58 45 90	 addss	 xmm0, DWORD PTR _pos_z$[ebp]
  00397	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _z$4[ebp], xmm0

; 558  : 
; 559  : //			result_points->red = transformed_point_normals[points->point_normal_index].r;
; 560  : //			result_points->green = transformed_point_normals[points->point_normal_index].g;
; 561  : //			result_points->blue = transformed_point_normals[points->point_normal_index].b;
; 562  : 
; 563  : 			temp = ( ( x * x ) + ( y * y ) );

  0039f	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _x$6[ebp]
  003a7	f3 0f 59 85 54
	ff ff ff	 mulss	 xmm0, DWORD PTR _x$6[ebp]
  003af	f3 0f 10 8d 50
	ff ff ff	 movss	 xmm1, DWORD PTR _y$5[ebp]
  003b7	f3 0f 59 8d 50
	ff ff ff	 mulss	 xmm1, DWORD PTR _y$5[ebp]
  003bf	f3 0f 58 c1	 addss	 xmm0, xmm1
  003c3	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _temp$7[ebp], xmm0

; 564  : 			temp -= ( 1.0 * 1.0 );

  003cb	f3 0f 5a 85 58
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _temp$7[ebp]
  003d3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003df	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _temp$7[ebp], xmm0

; 565  : 			temp /= ( ( 10.0 - 1.0 ) * ( 10.0 - 1.0 ) );

  003e7	f3 0f 5a 85 58
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _temp$7[ebp]
  003ef	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4054400000000000
  003f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003fb	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _temp$7[ebp], xmm0

; 566  : 			temp = bound ( temp, 0, 0.5 );

  00403	0f 57 c0	 xorps	 xmm0, xmm0
  00406	0f 2f 85 58 ff
	ff ff		 comiss	 xmm0, DWORD PTR _temp$7[ebp]
  0040d	76 0d		 jbe	 SHORT $LN19@transform_
  0040f	0f 57 c0	 xorps	 xmm0, xmm0
  00412	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv232[ebp], xmm0
  0041a	eb 44		 jmp	 SHORT $LN20@transform_
$LN19@transform_:
  0041c	f3 0f 5a 85 58
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _temp$7[ebp]
  00424	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe0000000000000
  0042c	76 12		 jbe	 SHORT $LN17@transform_
  0042e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00436	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv231[ebp], xmm0
  0043e	eb 10		 jmp	 SHORT $LN18@transform_
$LN17@transform_:
  00440	f3 0f 5a 85 58
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _temp$7[ebp]
  00448	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv231[ebp], xmm0
$LN18@transform_:
  00450	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv231[ebp]
  00458	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv232[ebp], xmm0
$LN20@transform_:
  00460	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv232[ebp]
  00468	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _temp$7[ebp], xmm0

; 567  : 
; 568  : 			result_points->alpha = 0.5 - temp;

  00470	f3 0f 5a 85 58
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _temp$7[ebp]
  00478	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00480	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00484	f2 0f 2c c1	 cvttsd2si eax, xmm1
  00488	8b 4d e4	 mov	 ecx, DWORD PTR _result_points$[ebp]
  0048b	88 41 33	 mov	 BYTE PTR [ecx+51], al

; 569  : 
; 570  : 		
; 571  : 			x += pos_x;

  0048e	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _x$6[ebp]
  00496	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR _pos_x$[ebp]
  0049b	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _x$6[ebp], xmm0

; 572  : 			y += pos_y;

  004a3	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  004ab	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR _pos_y$[ebp]
  004b0	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _y$5[ebp], xmm0

; 573  : 
; 574  : 			if ( *( ( int * ) &z ) >= *( ( int * ) &clip_hither ) )

  004b8	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _z$4[ebp]
  004be	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  004c4	0f 8c 7d 01 00
	00		 jl	 $LN14@transform_

; 575  : 			{
; 576  : 
; 577  : 				float
; 578  : 					q,
; 579  : 					i,
; 580  : 					j;
; 581  : 
; 582  : 				oxmax = active_viewport.x_max - last_transformed_point->i;

  004ca	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  004cd	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  004d5	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  004da	f3 0f 11 45 8c	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 583  : 				oxmin = last_transformed_point->i - active_viewport.x_min;

  004df	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  004e2	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  004e7	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  004ef	f3 0f 11 45 88	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 584  : 				oymax = active_viewport.y_max - last_transformed_point->j;

  004f4	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  004f7	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  004ff	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  00504	f3 0f 11 45 84	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 585  : 				oymin = last_transformed_point->j - active_viewport.y_min;

  00509	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  0050c	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00511	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00519	f3 0f 11 45 80	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 586  : 			
; 587  : 				ixmax = *( ( int * ) &oxmax );

  0051e	8b 45 8c	 mov	 eax, DWORD PTR _oxmax$[ebp]
  00521	89 85 7c ff ff
	ff		 mov	 DWORD PTR _ixmax$[ebp], eax

; 588  : 				ixmin = *( ( int * ) &oxmin );

  00527	8b 45 88	 mov	 eax, DWORD PTR _oxmin$[ebp]
  0052a	89 85 78 ff ff
	ff		 mov	 DWORD PTR _ixmin$[ebp], eax

; 589  : 				iymax = *( ( int * ) &oymax );

  00530	8b 45 84	 mov	 eax, DWORD PTR _oymax$[ebp]
  00533	89 85 74 ff ff
	ff		 mov	 DWORD PTR _iymax$[ebp], eax

; 590  : 				iymin = *( ( int * ) &oymin );

  00539	8b 45 80	 mov	 eax, DWORD PTR _oymin$[ebp]
  0053c	89 85 70 ff ff
	ff		 mov	 DWORD PTR _iymin$[ebp], eax

; 591  : 
; 592  : 				q = 1.0 / z;

  00542	f3 0f 5a 85 4c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _z$4[ebp]
  0054a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00552	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00556	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0055a	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _q$3[ebp], xmm0

; 593  : 
; 594  : 				last_transformed_point->outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00562	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _iymax$[ebp]
  00568	50		 push	 eax
  00569	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _ixmax$[ebp]
  0056f	51		 push	 ecx
  00570	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _iymin$[ebp]
  00576	52		 push	 edx
  00577	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _ixmin$[ebp]
  0057d	50		 push	 eax
  0057e	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00583	8b 4d e8	 mov	 ecx, DWORD PTR _last_transformed_point$[ebp]
  00586	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 595  : 
; 596  : 				result_points->x = x;

  00589	8b 45 e4	 mov	 eax, DWORD PTR _result_points$[ebp]
  0058c	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _x$6[ebp]
  00594	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 597  : 
; 598  : 				result_points->y = y;

  00598	8b 45 e4	 mov	 eax, DWORD PTR _result_points$[ebp]
  0059b	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  005a3	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 599  : 
; 600  : 				result_points->z = z;

  005a8	8b 45 e4	 mov	 eax, DWORD PTR _result_points$[ebp]
  005ab	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _z$4[ebp]
  005b3	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 601  : 
; 602  : 				last_transformed_point = result_points;

  005b8	8b 45 e4	 mov	 eax, DWORD PTR _result_points$[ebp]
  005bb	89 45 e8	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 603  : 
; 604  : 				i = ( active_3d_environment->screen_i_scale * x * q );

  005be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  005c3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  005c7	f3 0f 59 85 54
	ff ff ff	 mulss	 xmm0, DWORD PTR _x$6[ebp]
  005cf	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  005d7	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _i$2[ebp], xmm0

; 605  : 
; 606  : 				j = ( active_3d_environment->screen_j_scale * y * q );

  005df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  005e4	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  005e9	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _y$5[ebp]
  005f1	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  005f9	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _j$1[ebp], xmm0

; 607  : 
; 608  : 				result_points->j = active_3d_environment->y_origin - j;

  00601	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00606	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0060b	f3 0f 5c 85 40
	ff ff ff	 subss	 xmm0, DWORD PTR _j$1[ebp]
  00613	8b 4d e4	 mov	 ecx, DWORD PTR _result_points$[ebp]
  00616	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 609  : 
; 610  : 				result_points->i = active_3d_environment->x_origin + i;

  0061b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00620	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00625	f3 0f 58 85 44
	ff ff ff	 addss	 xmm0, DWORD PTR _i$2[ebp]
  0062d	8b 4d e4	 mov	 ecx, DWORD PTR _result_points$[ebp]
  00630	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 611  : 
; 612  : 				result_points->q = q;

  00635	8b 45 e4	 mov	 eax, DWORD PTR _result_points$[ebp]
  00638	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _q$3[ebp]
  00640	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 613  : 			}
; 614  : 			else

  00645	eb 36		 jmp	 SHORT $LN15@transform_
$LN14@transform_:

; 615  : 			{
; 616  : 
; 617  : 				result_points->outcode = CLIP_HITHER;

  00647	8b 45 e4	 mov	 eax, DWORD PTR _result_points$[ebp]
  0064a	c6 40 2c 20	 mov	 BYTE PTR [eax+44], 32	; 00000020H

; 618  : 
; 619  : 				result_points->z = z;

  0064e	8b 45 e4	 mov	 eax, DWORD PTR _result_points$[ebp]
  00651	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _z$4[ebp]
  00659	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 620  : 
; 621  : 				result_points->x = x;

  0065e	8b 45 e4	 mov	 eax, DWORD PTR _result_points$[ebp]
  00661	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _x$6[ebp]
  00669	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 622  : 
; 623  : 				result_points->y = y;

  0066d	8b 45 e4	 mov	 eax, DWORD PTR _result_points$[ebp]
  00670	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00678	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
$LN15@transform_:

; 624  : 			}
; 625  : 		}
; 626  : 
; 627  : 		point_normals++;

  0067d	8b 45 ec	 mov	 eax, DWORD PTR _point_normals$[ebp]
  00680	83 c0 02	 add	 eax, 2
  00683	89 45 ec	 mov	 DWORD PTR _point_normals$[ebp], eax

; 628  : 
; 629  : 		result_points++;

  00686	8b 45 e4	 mov	 eax, DWORD PTR _result_points$[ebp]
  00689	83 c0 40	 add	 eax, 64			; 00000040H
  0068c	89 45 e4	 mov	 DWORD PTR _result_points$[ebp], eax

; 630  : 
; 631  : 		points++;

  0068f	8b 45 f0	 mov	 eax, DWORD PTR _points$[ebp]
  00692	83 c0 06	 add	 eax, 6
  00695	89 45 f0	 mov	 DWORD PTR _points$[ebp], eax

; 632  : 	}

  00698	e9 7f fb ff ff	 jmp	 $LN7@transform_
$LN8@transform_:

; 633  : 
; 634  : 	oxmax = active_viewport.x_max - last_transformed_point->i;

  0069d	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  006a0	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  006a8	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  006ad	f3 0f 11 45 8c	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 635  : 	oxmin = last_transformed_point->i - active_viewport.x_min;

  006b2	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  006b5	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  006ba	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  006c2	f3 0f 11 45 88	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 636  : 	oymax = active_viewport.y_max - last_transformed_point->j;

  006c7	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  006ca	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  006d2	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  006d7	f3 0f 11 45 84	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 637  : 	oymin = last_transformed_point->j - active_viewport.y_min;

  006dc	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  006df	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  006e4	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  006ec	f3 0f 11 45 80	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 638  : 
; 639  : 	ixmax = *( ( int * ) &oxmax );

  006f1	8b 45 8c	 mov	 eax, DWORD PTR _oxmax$[ebp]
  006f4	89 85 7c ff ff
	ff		 mov	 DWORD PTR _ixmax$[ebp], eax

; 640  : 	ixmin = *( ( int * ) &oxmin );

  006fa	8b 45 88	 mov	 eax, DWORD PTR _oxmin$[ebp]
  006fd	89 85 78 ff ff
	ff		 mov	 DWORD PTR _ixmin$[ebp], eax

; 641  : 	iymax = *( ( int * ) &oymax );

  00703	8b 45 84	 mov	 eax, DWORD PTR _oymax$[ebp]
  00706	89 85 74 ff ff
	ff		 mov	 DWORD PTR _iymax$[ebp], eax

; 642  : 	iymin = *( ( int * ) &oymin );

  0070c	8b 45 80	 mov	 eax, DWORD PTR _oymin$[ebp]
  0070f	89 85 70 ff ff
	ff		 mov	 DWORD PTR _iymin$[ebp], eax

; 643  : 
; 644  : 	last_transformed_point->outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00715	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _iymax$[ebp]
  0071b	50		 push	 eax
  0071c	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _ixmax$[ebp]
  00722	51		 push	 ecx
  00723	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _iymin$[ebp]
  00729	52		 push	 edx
  0072a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _ixmin$[ebp]
  00730	50		 push	 eax
  00731	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00736	8b 4d e8	 mov	 ecx, DWORD PTR _last_transformed_point$[ebp]
  00739	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 645  : 
; 646  : 	//
; 647  : 	// Set back the fpu precision mode.
; 648  : 	//
; 649  : 
; 650  : 	set_fpu_precision_mode_double ();

  0073c	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_double@@YGXXZ ; set_fpu_precision_mode_double

; 651  : }

  00741	5f		 pop	 edi
  00742	5e		 pop	 esi
  00743	5b		 pop	 ebx
  00744	8b e5		 mov	 esp, ebp
  00746	5d		 pop	 ebp
  00747	c2 10 00	 ret	 16			; 00000010H
?transform_3d_cloud@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@H@Z ENDP ; transform_3d_cloud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\clouds\3dclouds.c
;	COMDAT ?draw_3d_cloud@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
_texture_point_index$1 = -156				; size = 4
_gouraud_point_index$2 = -152				; size = 4
_point_reference_index$3 = -148				; size = 4
_surface$4 = -144					; size = 4
_distance$5 = -140					; size = 4
_vector$6 = -136					; size = 12
_lz$7 = -124						; size = 4
_ly$8 = -120						; size = 4
_lx$9 = -116						; size = 4
_z$10 = -112						; size = 4
_y$11 = -108						; size = 4
_x$12 = -104						; size = 4
_object_pos$ = -100					; size = 12
_pos$ = -88						; size = 4
_object_base$ = -84					; size = 44
_light$ = -40						; size = 4
_light_ptr$ = -36					; size = 4
_prev_light$ = -32					; size = 4
_this_light$ = -28					; size = 4
_this_object_3d_info$ = -24				; size = 4
_faces$ = -20						; size = 4
_num_faces$ = -16					; size = 4
_count$ = -12						; size = 4
_draw_sub_objects$ = -8					; size = 4
_object_number$ = -4					; size = 4
_obj$ = 8						; size = 4
?draw_3d_cloud@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC	; draw_3d_cloud, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 83   : 
; 84   : 	int
; 85   : 		object_number,
; 86   : 		draw_sub_objects,
; 87   : 		count,
; 88   : 		num_faces;
; 89   : 
; 90   : 	object_3d_face
; 91   : 		*faces;
; 92   : 
; 93   : 	object_3d_info
; 94   : 		*this_object_3d_info;
; 95   : 
; 96   : 	light_3d_source
; 97   : 		*this_light,
; 98   : 		*prev_light,
; 99   : 		*light_ptr,
; 100  : 		*light;
; 101  : 
; 102  : 	object_3d_info
; 103  : 		object_base;
; 104  : 
; 105  : 	vec3d
; 106  : 		*pos,
; 107  : 		object_pos;
; 108  : 
; 109  : 	//
; 110  : 	// Setup the object info structure.
; 111  : 	//
; 112  : 
; 113  : 	this_object_3d_info = &object_base;

  0000c	8d 45 ac	 lea	 eax, DWORD PTR _object_base$[ebp]
  0000f	89 45 e8	 mov	 DWORD PTR _this_object_3d_info$[ebp], eax

; 114  : 
; 115  : 	//
; 116  : 	// Set up the object drawing global variables
; 117  : 	//
; 118  : 
; 119  : 	//
; 120  : 	// Calculate the object's position relative to the view.
; 121  : 	//
; 122  : 
; 123  : 	pos = &obj->view_position;

  00012	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00015	83 c0 38	 add	 eax, 56			; 00000038H
  00018	89 45 a8	 mov	 DWORD PTR _pos$[ebp], eax

; 124  : 
; 125  : 	//
; 126  : 	// Calculate the object's rotation matrix, to transform its 3d points relative to the view.
; 127  : 	//
; 128  : 
; 129  : 	rotation_3d[0][0] = ( obj->vp.xv.x * visual_3d_vp->xv.x + obj->vp.xv.y * visual_3d_vp->xv.y + obj->vp.xv.z * visual_3d_vp->xv.z );

  0001b	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00024	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00029	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  0002e	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00036	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  0003b	f3 0f 59 48 10	 mulss	 xmm1, DWORD PTR [eax+16]
  00040	f3 0f 58 c1	 addss	 xmm0, xmm1
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0004d	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00052	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00057	f3 0f 58 c1	 addss	 xmm0, xmm1
  0005b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00060	6b c8 00	 imul	 ecx, eax, 0
  00063	ba 04 00 00 00	 mov	 edx, 4
  00068	6b c2 00	 imul	 eax, edx, 0
  0006b	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 130  : 	rotation_3d[0][1] = ( obj->vp.xv.x * visual_3d_vp->yv.x + obj->vp.xv.y * visual_3d_vp->yv.y + obj->vp.xv.z * visual_3d_vp->yv.z );

  00074	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0007d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00082	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00087	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0008f	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  00094	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  00099	f3 0f 58 c1	 addss	 xmm0, xmm1
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  000a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000a6	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  000ab	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  000b0	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000b9	6b c8 00	 imul	 ecx, eax, 0
  000bc	ba 04 00 00 00	 mov	 edx, 4
  000c1	c1 e2 00	 shl	 edx, 0
  000c4	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 131  : 	rotation_3d[0][2] = ( obj->vp.xv.x * visual_3d_vp->zv.x + obj->vp.xv.y * visual_3d_vp->zv.y + obj->vp.xv.z * visual_3d_vp->zv.z );

  000cd	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000d6	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000db	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [ecx+36]
  000e0	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000e8	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  000ed	f3 0f 59 48 28	 mulss	 xmm1, DWORD PTR [eax+40]
  000f2	f3 0f 58 c1	 addss	 xmm0, xmm1
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  000f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000ff	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00104	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00109	f3 0f 58 c1	 addss	 xmm0, xmm1
  0010d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00112	6b c8 00	 imul	 ecx, eax, 0
  00115	ba 04 00 00 00	 mov	 edx, 4
  0011a	d1 e2		 shl	 edx, 1
  0011c	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 132  : 
; 133  : 	rotation_3d[1][0] = ( obj->vp.yv.x * visual_3d_vp->xv.x + obj->vp.yv.y * visual_3d_vp->xv.y + obj->vp.yv.z * visual_3d_vp->xv.z );

  00125	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0012e	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00133	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  00138	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0013b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00140	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  00145	f3 0f 59 48 10	 mulss	 xmm1, DWORD PTR [eax+16]
  0014a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00151	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00157	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  0015c	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00161	f3 0f 58 c1	 addss	 xmm0, xmm1
  00165	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0016a	c1 e0 00	 shl	 eax, 0
  0016d	b9 04 00 00 00	 mov	 ecx, 4
  00172	6b d1 00	 imul	 edx, ecx, 0
  00175	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 134  : 	rotation_3d[1][1] = ( obj->vp.yv.x * visual_3d_vp->yv.x + obj->vp.yv.y * visual_3d_vp->yv.y + obj->vp.yv.z * visual_3d_vp->yv.z );

  0017e	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00181	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00187	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  0018c	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00191	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00194	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00199	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  0019e	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  001a3	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a7	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  001aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001b0	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  001b5	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  001ba	f3 0f 58 c1	 addss	 xmm0, xmm1
  001be	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001c3	c1 e0 00	 shl	 eax, 0
  001c6	b9 04 00 00 00	 mov	 ecx, 4
  001cb	c1 e1 00	 shl	 ecx, 0
  001ce	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 135  : 	rotation_3d[1][2] = ( obj->vp.yv.x * visual_3d_vp->zv.x + obj->vp.yv.y * visual_3d_vp->zv.y + obj->vp.yv.z * visual_3d_vp->zv.z );

  001d7	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  001da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001e0	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  001e5	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [ecx+36]
  001ea	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001f2	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  001f7	f3 0f 59 48 28	 mulss	 xmm1, DWORD PTR [eax+40]
  001fc	f3 0f 58 c1	 addss	 xmm0, xmm1
  00200	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00203	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00209	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  0020e	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00213	f3 0f 58 c1	 addss	 xmm0, xmm1
  00217	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0021c	c1 e0 00	 shl	 eax, 0
  0021f	b9 04 00 00 00	 mov	 ecx, 4
  00224	d1 e1		 shl	 ecx, 1
  00226	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 136  : 
; 137  : 	rotation_3d[2][0] = ( obj->vp.zv.x * visual_3d_vp->xv.x + obj->vp.zv.y * visual_3d_vp->xv.y + obj->vp.zv.z * visual_3d_vp->xv.z );

  0022f	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00232	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00238	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  0023d	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  00242	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00245	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0024a	f3 0f 10 4a 30	 movss	 xmm1, DWORD PTR [edx+48]
  0024f	f3 0f 59 48 10	 mulss	 xmm1, DWORD PTR [eax+16]
  00254	f3 0f 58 c1	 addss	 xmm0, xmm1
  00258	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0025b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00261	f3 0f 10 49 34	 movss	 xmm1, DWORD PTR [ecx+52]
  00266	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  0026b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0026f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00274	d1 e0		 shl	 eax, 1
  00276	b9 04 00 00 00	 mov	 ecx, 4
  0027b	6b d1 00	 imul	 edx, ecx, 0
  0027e	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 138  : 	rotation_3d[2][1] = ( obj->vp.zv.x * visual_3d_vp->yv.x + obj->vp.zv.y * visual_3d_vp->yv.y + obj->vp.zv.z * visual_3d_vp->yv.z );

  00287	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0028a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00290	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00295	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  0029a	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0029d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002a2	f3 0f 10 4a 30	 movss	 xmm1, DWORD PTR [edx+48]
  002a7	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  002ac	f3 0f 58 c1	 addss	 xmm0, xmm1
  002b0	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  002b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002b9	f3 0f 10 49 34	 movss	 xmm1, DWORD PTR [ecx+52]
  002be	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  002c3	f3 0f 58 c1	 addss	 xmm0, xmm1
  002c7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002cc	d1 e0		 shl	 eax, 1
  002ce	b9 04 00 00 00	 mov	 ecx, 4
  002d3	c1 e1 00	 shl	 ecx, 0
  002d6	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 139  : 	rotation_3d[2][2] = ( obj->vp.zv.x * visual_3d_vp->zv.x + obj->vp.zv.y * visual_3d_vp->zv.y + obj->vp.zv.z * visual_3d_vp->zv.z );

  002df	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  002e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002e8	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  002ed	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [ecx+36]
  002f2	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  002f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002fa	f3 0f 10 4a 30	 movss	 xmm1, DWORD PTR [edx+48]
  002ff	f3 0f 59 48 28	 mulss	 xmm1, DWORD PTR [eax+40]
  00304	f3 0f 58 c1	 addss	 xmm0, xmm1
  00308	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0030b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00311	f3 0f 10 49 34	 movss	 xmm1, DWORD PTR [ecx+52]
  00316	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  0031b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0031f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00324	d1 e0		 shl	 eax, 1
  00326	b9 04 00 00 00	 mov	 ecx, 4
  0032b	d1 e1		 shl	 ecx, 1
  0032d	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 140  : 
; 141  : 	//
; 142  : 	// Calculate the vector from the object to the viewpoint, in the object's view system
; 143  : 	//
; 144  : 
; 145  : 	{
; 146  : 
; 147  : 		float
; 148  : 			x,
; 149  : 			y,
; 150  : 			z;
; 151  : 
; 152  : 		x = ( ( visual_3d_vp->x - obj->vp.x ) * obj->vp.xv.x );

  00336	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0033b	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0033e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00342	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00347	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0034a	f3 0f 59 42 14	 mulss	 xmm0, DWORD PTR [edx+20]
  0034f	f3 0f 11 45 98	 movss	 DWORD PTR _x$12[ebp], xmm0

; 153  : 		x += ( ( visual_3d_vp->y - obj->vp.y ) *  obj->vp.xv.y );

  00354	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00359	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0035c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00361	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  00366	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00369	f3 0f 59 42 18	 mulss	 xmm0, DWORD PTR [edx+24]
  0036e	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR _x$12[ebp]
  00373	f3 0f 11 45 98	 movss	 DWORD PTR _x$12[ebp], xmm0

; 154  : 		x += ( ( visual_3d_vp->z - obj->vp.z ) *  obj->vp.xv.z );

  00378	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0037d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00380	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00385	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  0038a	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0038d	f3 0f 59 42 1c	 mulss	 xmm0, DWORD PTR [edx+28]
  00392	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR _x$12[ebp]
  00397	f3 0f 11 45 98	 movss	 DWORD PTR _x$12[ebp], xmm0

; 155  : 
; 156  : 		y = ( ( visual_3d_vp->x - obj->vp.x ) * obj->vp.yv.x );

  0039c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003a1	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  003a4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003a8	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  003ad	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  003b0	f3 0f 59 42 20	 mulss	 xmm0, DWORD PTR [edx+32]
  003b5	f3 0f 11 45 94	 movss	 DWORD PTR _y$11[ebp], xmm0

; 157  : 		y += ( ( visual_3d_vp->y - obj->vp.y ) *  obj->vp.yv.y );

  003ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003bf	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  003c2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  003c7	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  003cc	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  003cf	f3 0f 59 42 24	 mulss	 xmm0, DWORD PTR [edx+36]
  003d4	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR _y$11[ebp]
  003d9	f3 0f 11 45 94	 movss	 DWORD PTR _y$11[ebp], xmm0

; 158  : 		y += ( ( visual_3d_vp->z - obj->vp.z ) *  obj->vp.yv.z );

  003de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003e3	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  003e6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  003eb	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  003f0	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  003f3	f3 0f 59 42 28	 mulss	 xmm0, DWORD PTR [edx+40]
  003f8	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR _y$11[ebp]
  003fd	f3 0f 11 45 94	 movss	 DWORD PTR _y$11[ebp], xmm0

; 159  : 
; 160  : 		z = ( ( visual_3d_vp->x - obj->vp.x ) * obj->vp.zv.x );

  00402	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00407	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0040a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0040e	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00413	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00416	f3 0f 59 42 2c	 mulss	 xmm0, DWORD PTR [edx+44]
  0041b	f3 0f 11 45 90	 movss	 DWORD PTR _z$10[ebp], xmm0

; 161  : 		z += ( ( visual_3d_vp->y - obj->vp.y ) *  obj->vp.zv.y );

  00420	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00425	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00428	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0042d	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  00432	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00435	f3 0f 59 42 30	 mulss	 xmm0, DWORD PTR [edx+48]
  0043a	f3 0f 58 45 90	 addss	 xmm0, DWORD PTR _z$10[ebp]
  0043f	f3 0f 11 45 90	 movss	 DWORD PTR _z$10[ebp], xmm0

; 162  : 		z += ( ( visual_3d_vp->z - obj->vp.z ) *  obj->vp.zv.z );

  00444	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00449	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0044c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00451	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00456	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00459	f3 0f 59 42 34	 mulss	 xmm0, DWORD PTR [edx+52]
  0045e	f3 0f 58 45 90	 addss	 xmm0, DWORD PTR _z$10[ebp]
  00463	f3 0f 11 45 90	 movss	 DWORD PTR _z$10[ebp], xmm0

; 163  : 
; 164  : 		object_pos.x = x;

  00468	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x$12[ebp]
  0046d	f3 0f 11 45 9c	 movss	 DWORD PTR _object_pos$[ebp], xmm0

; 165  : 		object_pos.y = y;

  00472	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y$11[ebp]
  00477	f3 0f 11 45 a0	 movss	 DWORD PTR _object_pos$[ebp+4], xmm0

; 166  : 		object_pos.z = z;

  0047c	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _z$10[ebp]
  00481	f3 0f 11 45 a4	 movss	 DWORD PTR _object_pos$[ebp+8], xmm0

; 167  : 	}
; 168  : 
; 169  : 	//
; 170  : 	// Get the object number
; 171  : 	//
; 172  : 
; 173  : 	object_number = get_object_approximation_number ( obj->object_number, pos->z, &draw_sub_objects );

  00486	8d 45 f8	 lea	 eax, DWORD PTR _draw_sub_objects$[ebp]
  00489	50		 push	 eax
  0048a	8b 4d a8	 mov	 ecx, DWORD PTR _pos$[ebp]
  0048d	51		 push	 ecx
  0048e	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00493	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00498	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0049b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0049e	50		 push	 eax
  0049f	e8 00 00 00 00	 call	 ?get_object_approximation_number@@YGHHMPAH@Z ; get_object_approximation_number
  004a4	89 45 fc	 mov	 DWORD PTR _object_number$[ebp], eax

; 174  : 
; 175  : 	//
; 176  : 	// Rotate the light source vector to be relative to the object.
; 177  : 	//
; 178  : 
; 179  : 	light_ptr = current_3d_lights;

  004a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A ; current_3d_lights
  004ac	89 45 dc	 mov	 DWORD PTR _light_ptr$[ebp], eax

; 180  : 
; 181  : 	prev_light = NULL;

  004af	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _prev_light$[ebp], 0

; 182  : 
; 183  : 	light = NULL;

  004b6	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _light$[ebp], 0

; 184  : 
; 185  : 	if ( light_ptr )

  004bd	83 7d dc 00	 cmp	 DWORD PTR _light_ptr$[ebp], 0
  004c1	0f 84 5b 05 00
	00		 je	 $LN3@draw_3d_cl

; 186  : 	{
; 187  : 
; 188  : 		light = &light_3d_array[0];

  004c7	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  004cc	6b c8 00	 imul	 ecx, eax, 0
  004cf	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?light_3d_array@@3PAULIGHT_3D_SOURCE@@A ; light_3d_array
  004d5	89 4d d8	 mov	 DWORD PTR _light$[ebp], ecx
$LN2@draw_3d_cl:

; 189  : 
; 190  : 		while ( light_ptr )

  004d8	83 7d dc 00	 cmp	 DWORD PTR _light_ptr$[ebp], 0
  004dc	0f 84 40 05 00
	00		 je	 $LN3@draw_3d_cl

; 191  : 		{
; 192  : 
; 193  : 			float
; 194  : 				lx,
; 195  : 				ly,
; 196  : 				lz;
; 197  : 
; 198  : 			if ( light_ptr->type == LIGHT_3D_TYPE_POINT )

  004e2	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  004e5	83 78 30 02	 cmp	 DWORD PTR [eax+48], 2
  004e9	0f 85 1c 03 00
	00		 jne	 $LN8@draw_3d_cl

; 199  : 			{
; 200  : 
; 201  : 				vec3d
; 202  : 					vector;
; 203  : 
; 204  : 				float
; 205  : 					distance;
; 206  : 
; 207  : 				//
; 208  : 				// Work out the distance from object to light source
; 209  : 				//
; 210  : 
; 211  : 				vector.x = - light_ptr->light_position.x + obj->vp.x;

  004ef	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  004f2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004f6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004fd	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00500	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00505	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _vector$6[ebp], xmm0

; 212  : 				vector.y = - light_ptr->light_position.y + obj->vp.y;

  0050d	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00510	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00515	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0051c	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0051f	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  00524	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _vector$6[ebp+4], xmm0

; 213  : 				vector.z = - light_ptr->light_position.z + obj->vp.z;

  0052c	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  0052f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00534	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0053b	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0053e	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  00543	f3 0f 11 45 80	 movss	 DWORD PTR _vector$6[ebp+8], xmm0

; 214  : 
; 215  : 				lx = vector.x * vector.x;

  00548	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _vector$6[ebp]
  00550	f3 0f 59 85 78
	ff ff ff	 mulss	 xmm0, DWORD PTR _vector$6[ebp]
  00558	f3 0f 11 45 8c	 movss	 DWORD PTR _lx$9[ebp], xmm0

; 216  : 				ly = vector.y * vector.y;

  0055d	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _vector$6[ebp+4]
  00565	f3 0f 59 85 7c
	ff ff ff	 mulss	 xmm0, DWORD PTR _vector$6[ebp+4]
  0056d	f3 0f 11 45 88	 movss	 DWORD PTR _ly$8[ebp], xmm0

; 217  : 				lz = vector.z * vector.z;

  00572	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _vector$6[ebp+8]
  00577	f3 0f 59 45 80	 mulss	 xmm0, DWORD PTR _vector$6[ebp+8]
  0057c	f3 0f 11 45 84	 movss	 DWORD PTR _lz$7[ebp], xmm0

; 218  : 
; 219  : 				distance = ( lx + ly + lz );

  00581	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _lx$9[ebp]
  00586	f3 0f 58 45 88	 addss	 xmm0, DWORD PTR _ly$8[ebp]
  0058b	f3 0f 58 45 84	 addss	 xmm0, DWORD PTR _lz$7[ebp]
  00590	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _distance$5[ebp], xmm0

; 220  : 
; 221  : 				if ( distance < light_ptr->radius )

  00598	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  0059b	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  005a0	0f 2f 85 74 ff
	ff ff		 comiss	 xmm0, DWORD PTR _distance$5[ebp]
  005a7	0f 86 59 02 00
	00		 jbe	 $LN10@draw_3d_cl

; 222  : 				{
; 223  : 
; 224  : 					distance = 1 - ( distance / light_ptr->radius );

  005ad	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  005b0	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _distance$5[ebp]
  005b8	f3 0f 5e 40 2c	 divss	 xmm0, DWORD PTR [eax+44]
  005bd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  005c5	f3 0f 5c c8	 subss	 xmm1, xmm0
  005c9	f3 0f 11 8d 74
	ff ff ff	 movss	 DWORD PTR _distance$5[ebp], xmm1

; 225  : 
; 226  : 					this_light = &light_3d_array[0];

  005d1	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  005d6	6b c8 00	 imul	 ecx, eax, 0
  005d9	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?light_3d_array@@3PAULIGHT_3D_SOURCE@@A ; light_3d_array
  005df	89 4d e4	 mov	 DWORD PTR _this_light$[ebp], ecx

; 227  : 			
; 228  : 					if ( prev_light )

  005e2	83 7d e0 00	 cmp	 DWORD PTR _prev_light$[ebp], 0
  005e6	74 09		 je	 SHORT $LN11@draw_3d_cl

; 229  : 					{
; 230  : 		
; 231  : 						prev_light->succ = this_light;

  005e8	8b 45 e0	 mov	 eax, DWORD PTR _prev_light$[ebp]
  005eb	8b 4d e4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  005ee	89 48 38	 mov	 DWORD PTR [eax+56], ecx
$LN11@draw_3d_cl:

; 232  : 					}
; 233  : 		
; 234  : 					this_light->pred = prev_light;

  005f1	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  005f4	8b 4d e0	 mov	 ecx, DWORD PTR _prev_light$[ebp]
  005f7	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 235  : 					this_light->succ = NULL;

  005fa	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  005fd	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 236  : 		
; 237  : 		
; 238  : 					this_light->colour.red = light_ptr->colour.red * distance;

  00604	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00607	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0060c	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _distance$5[ebp]
  00614	8b 4d e4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  00617	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 239  : 					this_light->colour.green = light_ptr->colour.green * distance;

  0061c	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  0061f	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00624	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _distance$5[ebp]
  0062c	8b 4d e4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  0062f	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 240  : 					this_light->colour.blue = light_ptr->colour.blue * distance;

  00634	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00637	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  0063c	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _distance$5[ebp]
  00644	8b 4d e4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  00647	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 241  : //					this_light->colour.intensity = light_ptr->colour.intensity * distance;
; 242  : 
; 243  : 					normalise_3d_vector ( &vector );

  0064c	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _vector$6[ebp]
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  00658	dd d8		 fstp	 ST(0)

; 244  : 
; 245  : 					lx = ( vector.x * obj->vp.attitude[0][0] );

  0065a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0065f	6b c8 00	 imul	 ecx, eax, 0
  00662	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00665	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  00669	b9 04 00 00 00	 mov	 ecx, 4
  0066e	6b d1 00	 imul	 edx, ecx, 0
  00671	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _vector$6[ebp]
  00679	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  0067e	f3 0f 11 45 8c	 movss	 DWORD PTR _lx$9[ebp], xmm0

; 246  : 					lx += ( vector.y * obj->vp.attitude[0][1] );

  00683	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00688	6b c8 00	 imul	 ecx, eax, 0
  0068b	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0068e	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  00692	b9 04 00 00 00	 mov	 ecx, 4
  00697	c1 e1 00	 shl	 ecx, 0
  0069a	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _vector$6[ebp+4]
  006a2	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  006a7	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _lx$9[ebp]
  006ac	f3 0f 11 45 8c	 movss	 DWORD PTR _lx$9[ebp], xmm0

; 247  : 					lx += ( vector.z * obj->vp.attitude[0][2] );

  006b1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006b6	6b c8 00	 imul	 ecx, eax, 0
  006b9	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  006bc	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  006c0	b9 04 00 00 00	 mov	 ecx, 4
  006c5	d1 e1		 shl	 ecx, 1
  006c7	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _vector$6[ebp+8]
  006cc	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  006d1	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _lx$9[ebp]
  006d6	f3 0f 11 45 8c	 movss	 DWORD PTR _lx$9[ebp], xmm0

; 248  : 		
; 249  : 					ly = ( vector.x * obj->vp.attitude[1][0] );

  006db	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006e0	c1 e0 00	 shl	 eax, 0
  006e3	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  006e6	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  006ea	b8 04 00 00 00	 mov	 eax, 4
  006ef	6b c8 00	 imul	 ecx, eax, 0
  006f2	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _vector$6[ebp]
  006fa	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  006ff	f3 0f 11 45 88	 movss	 DWORD PTR _ly$8[ebp], xmm0

; 250  : 					ly += ( vector.y * obj->vp.attitude[1][1] );

  00704	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00709	c1 e0 00	 shl	 eax, 0
  0070c	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0070f	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00713	b8 04 00 00 00	 mov	 eax, 4
  00718	c1 e0 00	 shl	 eax, 0
  0071b	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _vector$6[ebp+4]
  00723	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00728	f3 0f 58 45 88	 addss	 xmm0, DWORD PTR _ly$8[ebp]
  0072d	f3 0f 11 45 88	 movss	 DWORD PTR _ly$8[ebp], xmm0

; 251  : 					ly += ( vector.z * obj->vp.attitude[1][2] );

  00732	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00737	c1 e0 00	 shl	 eax, 0
  0073a	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0073d	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00741	b8 04 00 00 00	 mov	 eax, 4
  00746	d1 e0		 shl	 eax, 1
  00748	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _vector$6[ebp+8]
  0074d	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00752	f3 0f 58 45 88	 addss	 xmm0, DWORD PTR _ly$8[ebp]
  00757	f3 0f 11 45 88	 movss	 DWORD PTR _ly$8[ebp], xmm0

; 252  : 		
; 253  : 					lz = ( vector.x * obj->vp.attitude[2][0] );

  0075c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00761	d1 e0		 shl	 eax, 1
  00763	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00766	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  0076a	b8 04 00 00 00	 mov	 eax, 4
  0076f	6b c8 00	 imul	 ecx, eax, 0
  00772	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _vector$6[ebp]
  0077a	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  0077f	f3 0f 11 45 84	 movss	 DWORD PTR _lz$7[ebp], xmm0

; 254  : 					lz += ( vector.y * obj->vp.attitude[2][1] );

  00784	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00789	d1 e0		 shl	 eax, 1
  0078b	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0078e	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00792	b8 04 00 00 00	 mov	 eax, 4
  00797	c1 e0 00	 shl	 eax, 0
  0079a	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _vector$6[ebp+4]
  007a2	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  007a7	f3 0f 58 45 84	 addss	 xmm0, DWORD PTR _lz$7[ebp]
  007ac	f3 0f 11 45 84	 movss	 DWORD PTR _lz$7[ebp], xmm0

; 255  : 					lz += ( vector.z * obj->vp.attitude[2][2] );

  007b1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007b6	d1 e0		 shl	 eax, 1
  007b8	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  007bb	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  007bf	b8 04 00 00 00	 mov	 eax, 4
  007c4	d1 e0		 shl	 eax, 1
  007c6	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _vector$6[ebp+8]
  007cb	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  007d0	f3 0f 58 45 84	 addss	 xmm0, DWORD PTR _lz$7[ebp]
  007d5	f3 0f 11 45 84	 movss	 DWORD PTR _lz$7[ebp], xmm0

; 256  : 		
; 257  : 					this_light->lx = lx;

  007da	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  007dd	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _lx$9[ebp]
  007e2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 258  : 					this_light->ly = ly;

  007e6	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  007e9	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _ly$8[ebp]
  007ee	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 259  : 					this_light->lz = lz;

  007f3	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  007f6	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _lz$7[ebp]
  007fb	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 260  : 		
; 261  : 					prev_light = this_light;

  00800	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00803	89 45 e0	 mov	 DWORD PTR _prev_light$[ebp], eax
$LN10@draw_3d_cl:

; 262  : 				}
; 263  : 			}
; 264  : 			else

  00806	e9 09 02 00 00	 jmp	 $LN9@draw_3d_cl
$LN8@draw_3d_cl:

; 265  : 			{
; 266  : 	
; 267  : 				this_light = &light_3d_array[0];

  0080b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  00810	6b c8 00	 imul	 ecx, eax, 0
  00813	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?light_3d_array@@3PAULIGHT_3D_SOURCE@@A ; light_3d_array
  00819	89 4d e4	 mov	 DWORD PTR _this_light$[ebp], ecx

; 268  : 		
; 269  : 				if ( prev_light )

  0081c	83 7d e0 00	 cmp	 DWORD PTR _prev_light$[ebp], 0
  00820	74 09		 je	 SHORT $LN12@draw_3d_cl

; 270  : 				{
; 271  : 	
; 272  : 					prev_light->succ = this_light;

  00822	8b 45 e0	 mov	 eax, DWORD PTR _prev_light$[ebp]
  00825	8b 4d e4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  00828	89 48 38	 mov	 DWORD PTR [eax+56], ecx
$LN12@draw_3d_cl:

; 273  : 				}
; 274  : 	
; 275  : 				this_light->pred = prev_light;

  0082b	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  0082e	8b 4d e0	 mov	 ecx, DWORD PTR _prev_light$[ebp]
  00831	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 276  : 				this_light->succ = NULL;

  00834	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00837	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 277  : 	
; 278  : 				this_light->colour.red = light_ptr->colour.red;

  0083e	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00841	8b 4d dc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  00844	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00847	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 279  : 				this_light->colour.green = light_ptr->colour.green;

  0084a	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  0084d	8b 4d dc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  00850	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00853	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 280  : 				this_light->colour.blue = light_ptr->colour.blue;

  00856	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00859	8b 4d dc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  0085c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0085f	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 281  : //				this_light->colour.intensity = light_ptr->colour.intensity;
; 282  : 	
; 283  : 				lx = ( light_ptr->lx * obj->vp.attitude[0][0] );

  00862	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00867	6b c8 00	 imul	 ecx, eax, 0
  0086a	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0086d	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  00871	b9 04 00 00 00	 mov	 ecx, 4
  00876	6b d1 00	 imul	 edx, ecx, 0
  00879	8b 4d dc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  0087c	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00880	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00885	f3 0f 11 45 8c	 movss	 DWORD PTR _lx$9[ebp], xmm0

; 284  : 				lx +=  ( light_ptr->ly * obj->vp.attitude[0][1] );

  0088a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0088f	6b c8 00	 imul	 ecx, eax, 0
  00892	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00895	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  00899	b9 04 00 00 00	 mov	 ecx, 4
  0089e	c1 e1 00	 shl	 ecx, 0
  008a1	8b 55 dc	 mov	 edx, DWORD PTR _light_ptr$[ebp]
  008a4	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  008a9	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  008ae	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _lx$9[ebp]
  008b3	f3 0f 11 45 8c	 movss	 DWORD PTR _lx$9[ebp], xmm0

; 285  : 				lx += ( light_ptr->lz * obj->vp.attitude[0][2] );

  008b8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008bd	6b c8 00	 imul	 ecx, eax, 0
  008c0	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  008c3	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  008c7	b9 04 00 00 00	 mov	 ecx, 4
  008cc	d1 e1		 shl	 ecx, 1
  008ce	8b 55 dc	 mov	 edx, DWORD PTR _light_ptr$[ebp]
  008d1	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  008d6	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  008db	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _lx$9[ebp]
  008e0	f3 0f 11 45 8c	 movss	 DWORD PTR _lx$9[ebp], xmm0

; 286  : 	
; 287  : 				ly = ( light_ptr->lx * obj->vp.attitude[1][0] );

  008e5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008ea	c1 e0 00	 shl	 eax, 0
  008ed	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  008f0	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  008f4	b8 04 00 00 00	 mov	 eax, 4
  008f9	6b c8 00	 imul	 ecx, eax, 0
  008fc	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  008ff	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00903	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  00908	f3 0f 11 45 88	 movss	 DWORD PTR _ly$8[ebp], xmm0

; 288  : 				ly += ( light_ptr->ly * obj->vp.attitude[1][1] );

  0090d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00912	c1 e0 00	 shl	 eax, 0
  00915	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00918	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  0091c	b8 04 00 00 00	 mov	 eax, 4
  00921	c1 e0 00	 shl	 eax, 0
  00924	8b 4d dc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  00927	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0092c	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00931	f3 0f 58 45 88	 addss	 xmm0, DWORD PTR _ly$8[ebp]
  00936	f3 0f 11 45 88	 movss	 DWORD PTR _ly$8[ebp], xmm0

; 289  : 				ly += ( light_ptr->lz * obj->vp.attitude[1][2] );

  0093b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00940	c1 e0 00	 shl	 eax, 0
  00943	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00946	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  0094a	b8 04 00 00 00	 mov	 eax, 4
  0094f	d1 e0		 shl	 eax, 1
  00951	8b 4d dc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  00954	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00959	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0095e	f3 0f 58 45 88	 addss	 xmm0, DWORD PTR _ly$8[ebp]
  00963	f3 0f 11 45 88	 movss	 DWORD PTR _ly$8[ebp], xmm0

; 290  : 	
; 291  : 	
; 292  : 				lz = ( light_ptr->lx * obj->vp.attitude[2][0] );

  00968	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0096d	d1 e0		 shl	 eax, 1
  0096f	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00972	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00976	b8 04 00 00 00	 mov	 eax, 4
  0097b	6b c8 00	 imul	 ecx, eax, 0
  0097e	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00981	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00985	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  0098a	f3 0f 11 45 84	 movss	 DWORD PTR _lz$7[ebp], xmm0

; 293  : 				lz += ( light_ptr->ly * obj->vp.attitude[2][1] );

  0098f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00994	d1 e0		 shl	 eax, 1
  00996	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00999	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  0099d	b8 04 00 00 00	 mov	 eax, 4
  009a2	c1 e0 00	 shl	 eax, 0
  009a5	8b 4d dc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  009a8	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  009ad	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  009b2	f3 0f 58 45 84	 addss	 xmm0, DWORD PTR _lz$7[ebp]
  009b7	f3 0f 11 45 84	 movss	 DWORD PTR _lz$7[ebp], xmm0

; 294  : 				lz += ( light_ptr->lz * obj->vp.attitude[2][2] );

  009bc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009c1	d1 e0		 shl	 eax, 1
  009c3	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  009c6	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  009ca	b8 04 00 00 00	 mov	 eax, 4
  009cf	d1 e0		 shl	 eax, 1
  009d1	8b 4d dc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  009d4	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  009d9	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  009de	f3 0f 58 45 84	 addss	 xmm0, DWORD PTR _lz$7[ebp]
  009e3	f3 0f 11 45 84	 movss	 DWORD PTR _lz$7[ebp], xmm0

; 295  : 	
; 296  : 				this_light->lx = lx;

  009e8	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  009eb	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _lx$9[ebp]
  009f0	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 297  : 				this_light->ly = ly;

  009f4	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  009f7	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _ly$8[ebp]
  009fc	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 298  : 				this_light->lz = lz;

  00a01	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00a04	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _lz$7[ebp]
  00a09	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 299  : 	
; 300  : 				prev_light = this_light;

  00a0e	8b 45 e4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00a11	89 45 e0	 mov	 DWORD PTR _prev_light$[ebp], eax
$LN9@draw_3d_cl:

; 301  : 			}
; 302  : 	
; 303  : 			light_ptr = light_ptr->succ;

  00a14	8b 45 dc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00a17	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00a1a	89 4d dc	 mov	 DWORD PTR _light_ptr$[ebp], ecx

; 304  : 		}

  00a1d	e9 b6 fa ff ff	 jmp	 $LN2@draw_3d_cl
$LN3@draw_3d_cl:

; 305  : 	}
; 306  : 
; 307  : 	//
; 308  : 	//	Set up this objects' object info structure
; 309  : 	//
; 310  : 
; 311  : 	object_base.lights = light;

  00a22	8b 45 d8	 mov	 eax, DWORD PTR _light$[ebp]
  00a25	89 45 b0	 mov	 DWORD PTR _object_base$[ebp+4], eax

; 312  : 
; 313  : 	object_base.points_base = 0;

  00a28	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _object_base$[ebp+36], 0

; 314  : 
; 315  : 	object_base.object_number = object_number;

  00a2f	8b 45 fc	 mov	 eax, DWORD PTR _object_number$[ebp]
  00a32	89 45 cc	 mov	 DWORD PTR _object_base$[ebp+32], eax

; 316  : 
; 317  : 	this_object_3d_info = &object_base;

  00a35	8d 45 ac	 lea	 eax, DWORD PTR _object_base$[ebp]
  00a38	89 45 e8	 mov	 DWORD PTR _this_object_3d_info$[ebp], eax

; 318  : 
; 319  : 	//
; 320  : 	// Transform the object's shape data
; 321  : 	//
; 322  : 
; 323  : 	transform_3d_cloud ( &objects_3d_data[object_number], pos, light, 0 );

  00a3b	6a 00		 push	 0
  00a3d	8b 45 d8	 mov	 eax, DWORD PTR _light$[ebp]
  00a40	50		 push	 eax
  00a41	8b 4d a8	 mov	 ecx, DWORD PTR _pos$[ebp]
  00a44	51		 push	 ecx
  00a45	6b 55 fc 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  00a49	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00a4f	52		 push	 edx
  00a50	e8 00 00 00 00	 call	 ?transform_3d_cloud@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@H@Z ; transform_3d_cloud

; 324  : 
; 325  : 	//
; 326  : 	// Render the faces
; 327  : 	//
; 328  : 
; 329  : 	num_faces = objects_3d_data[object_number].number_of_faces;

  00a55	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00a59	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00a5f	0f b7 54 01 02	 movzx	 edx, WORD PTR [ecx+eax+2]
  00a64	89 55 f0	 mov	 DWORD PTR _num_faces$[ebp], edx

; 330  : 
; 331  : 	faces = objects_3d_data[object_number].faces;

  00a67	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00a6b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00a71	8b 54 01 44	 mov	 edx, DWORD PTR [ecx+eax+68]
  00a75	89 55 ec	 mov	 DWORD PTR _faces$[ebp], edx

; 332  : 
; 333  : 	{
; 334  : 
; 335  : 		int
; 336  : 			surface,
; 337  : 			point_reference_index,
; 338  : 			gouraud_point_index,
; 339  : 			texture_point_index;
; 340  : 
; 341  : 		surface = 0;

  00a78	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _surface$4[ebp], 0

; 342  : 		point_reference_index = 0;

  00a82	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _point_reference_index$3[ebp], 0

; 343  : 		gouraud_point_index = 0;

  00a8c	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _gouraud_point_index$2[ebp], 0

; 344  : 		texture_point_index = 0;

  00a96	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _texture_point_index$1[ebp], 0

; 345  : 
; 346  : 		for ( count = num_faces; count > 0; count-- )

  00aa0	8b 45 f0	 mov	 eax, DWORD PTR _num_faces$[ebp]
  00aa3	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
  00aa6	eb 09		 jmp	 SHORT $LN6@draw_3d_cl
$LN4@draw_3d_cl:
  00aa8	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  00aab	83 e8 01	 sub	 eax, 1
  00aae	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN6@draw_3d_cl:
  00ab1	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  00ab5	7e 1d		 jle	 SHORT $LN5@draw_3d_cl

; 347  : 		{
; 348  : /*
; 349  : 			if ( faces->flags & FACE_HAS_NEW_SURFACE )
; 350  : 			{
; 351  : 
; 352  : 				surface++;
; 353  : 			}
; 354  : 
; 355  : 			if ( faces->number_of_points > 2 )
; 356  : 			{
; 357  : 
; 358  : 				if ( faces->flags & FACE_TEXTURED )
; 359  : 				{
; 360  : 
; 361  : 					if ( faces->flags & FACE_GOURAUD_SHADED )
; 362  : 					{
; 363  : 
; 364  : 						render_3d_object_surface_gouraud_textured_diffuse_lit_polygon ( faces, surface, point_reference_index, gouraud_point_index, texture_point_index, this_object_3d_info );
; 365  : 					}
; 366  : 					else
; 367  : 					{
; 368  : 	
; 369  : 						render_3d_object_surface_textured_diffuse_lit_polygon ( faces, surface, point_reference_index, texture_point_index, this_object_3d_info );
; 370  : 					}
; 371  : 				}
; 372  : 				else
; 373  : 				{
; 374  : 
; 375  : 					if ( faces->flags & FACE_GOURAUD_SHADED )
; 376  : 					{
; 377  : 	
; 378  : 						render_3d_object_surface_gouraud_diffuse_lit_polygon ( faces, surface, point_reference_index, gouraud_point_index, this_object_3d_info );
; 379  : 					}
; 380  : 					else
; 381  : 					{
; 382  : 	
; 383  : 						render_3d_object_surface_diffuse_lit_polygon ( faces, surface, point_reference_index, this_object_3d_info );
; 384  : 					}
; 385  : 				}
; 386  : 			}
; 387  : 			*/
; 388  : 			point_reference_index += faces->number_of_points;

  00ab7	8b 45 ec	 mov	 eax, DWORD PTR _faces$[ebp]
  00aba	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00abd	03 8d 6c ff ff
	ff		 add	 ecx, DWORD PTR _point_reference_index$3[ebp]
  00ac3	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _point_reference_index$3[ebp], ecx

; 389  : 	
; 390  : //			if ( faces->flags & FACE_TEXTURED )
; 391  : //			{
; 392  : //
; 393  : //				texture_point_index += faces->number_of_points;
; 394  : //			}
; 395  : //
; 396  : //			if ( faces->flags & FACE_GOURAUD_SHADED )
; 397  : //			{
; 398  : //
; 399  : //				gouraud_point_index += faces->number_of_points;
; 400  : //			}
; 401  : 
; 402  : 			faces++;

  00ac9	8b 45 ec	 mov	 eax, DWORD PTR _faces$[ebp]
  00acc	83 c0 01	 add	 eax, 1
  00acf	89 45 ec	 mov	 DWORD PTR _faces$[ebp], eax

; 403  : 		}

  00ad2	eb d4		 jmp	 SHORT $LN4@draw_3d_cl
$LN5@draw_3d_cl:

; 404  : 	}
; 405  : }

  00ad4	5f		 pop	 edi
  00ad5	5e		 pop	 esi
  00ad6	5b		 pop	 ebx
  00ad7	8b e5		 mov	 esp, ebp
  00ad9	5d		 pop	 ebp
  00ada	c2 04 00	 ret	 4
?draw_3d_cloud@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP	; draw_3d_cloud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
END
