; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dkeyfr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?calculate_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_KEYFRAME@@0M@Z ; calculate_keyframe
PUBLIC	?calculate_value_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_VALUE_KEYFRAME@@0M@Z ; calculate_value_keyframe
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4008000000000000
EXTRN	__fltused:DWORD
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dkeyfr.c
;	COMDAT ?generate_hermite_values@@YGXMPAM000@Z
_TEXT	SEGMENT
_z$ = -12						; size = 4
_t3$ = -8						; size = 4
_t2$ = -4						; size = 4
_t$ = 8							; size = 4
_h1$ = 12						; size = 4
_h2$ = 16						; size = 4
_h3$ = 20						; size = 4
_h4$ = 24						; size = 4
?generate_hermite_values@@YGXMPAM000@Z PROC		; generate_hermite_values, COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 79   : 
; 80   : 	float
; 81   : 		t2,
; 82   : 		t3,
; 83   : 		z;
; 84   : 
; 85   : 	t2 = t * t;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0000e	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00013	f3 0f 11 45 fc	 movss	 DWORD PTR _t2$[ebp], xmm0

; 86   : 	t3 = t * t2;

  00018	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0001d	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _t2$[ebp]
  00022	f3 0f 11 45 f8	 movss	 DWORD PTR _t3$[ebp], xmm0

; 87   : 	z = 3.0 * t2 - t3 - t3;

  00027	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _t2$[ebp]
  0002c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4008000000000000
  00034	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _t3$[ebp]
  00039	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0003d	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _t3$[ebp]
  00042	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00046	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0004a	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0

; 88   : 
; 89   : 	*h1 = 1.0 - z;

  0004f	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  00054	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0005c	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00060	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00064	8b 45 0c	 mov	 eax, DWORD PTR _h1$[ebp]
  00067	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 90   : 	*h2 = z;

  0006b	8b 45 10	 mov	 eax, DWORD PTR _h2$[ebp]
  0006e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _z$[ebp]
  00073	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 91   : 	*h3 = t3 - t2 - t2 + t;

  00077	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _t3$[ebp]
  0007c	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _t2$[ebp]
  00081	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _t2$[ebp]
  00086	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _t$[ebp]
  0008b	8b 45 14	 mov	 eax, DWORD PTR _h3$[ebp]
  0008e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 92   : 	*h4 = t3 - t2;

  00092	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _t3$[ebp]
  00097	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _t2$[ebp]
  0009c	8b 45 18	 mov	 eax, DWORD PTR _h4$[ebp]
  0009f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 93   : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 14 00	 ret	 20			; 00000014H
?generate_hermite_values@@YGXMPAM000@Z ENDP		; generate_hermite_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dkeyfr.c
;	COMDAT ?calculate_value_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_VALUE_KEYFRAME@@0M@Z
_TEXT	SEGMENT
_ds1value$1 = -68					; size = 4
_dd0value$2 = -64					; size = 4
_dvalue$3 = -60						; size = 4
_tlength$ = -56						; size = 4
_adj1$ = -52						; size = 4
_adj0$ = -48						; size = 4
_ds1b$ = -44						; size = 4
_ds1a$ = -40						; size = 4
_dd0b$ = -36						; size = 4
_dd0a$ = -32						; size = 4
_h4$ = -28						; size = 4
_h3$ = -24						; size = 4
_h2$ = -20						; size = 4
_h1$ = -16						; size = 4
_t$ = -12						; size = 4
_key1$ = -8						; size = 4
_key0$ = -4						; size = 4
_number_of_keyframes$ = 8				; size = 4
_keyframes$ = 12					; size = 4
_result$ = 16						; size = 4
_step$ = 20						; size = 4
?calculate_value_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_VALUE_KEYFRAME@@0M@Z PROC ; calculate_value_keyframe, COMDAT

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 320  : 
; 321  : 	object_3d_sub_object_value_keyframe
; 322  : 		*key0,
; 323  : 		*key1;
; 324  : 
; 325  : 	float
; 326  : 		t,
; 327  : 		h1,
; 328  : 		h2,
; 329  : 		h3,
; 330  : 		h4,
; 331  : 		dd0a,
; 332  : 		dd0b,
; 333  : 		ds1a,
; 334  : 		ds1b,
; 335  : 		adj0,
; 336  : 		adj1;
; 337  : 
; 338  : 	int
; 339  : 		tlength;
; 340  : 
; 341  : 	//
; 342  : 	// If there is one keyframe, that is the one to return
; 343  : 	//
; 344  : 
; 345  : 	if ( number_of_keyframes == 1 )

  0000c	83 7d 08 01	 cmp	 DWORD PTR _number_of_keyframes$[ebp], 1
  00010	75 2d		 jne	 SHORT $LN4@calculate_

; 346  : 	{
; 347  : 
; 348  : 		*result = *keyframes;

  00012	8b 45 0c	 mov	 eax, DWORD PTR _keyframes$[ebp]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	89 11		 mov	 DWORD PTR [ecx], edx
  0001c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00022	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00028	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002b	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0002e	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00031	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  00034	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00037	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 349  : 	}
; 350  : 	else

  0003a	e9 91 03 00 00	 jmp	 $LN10@calculate_
$LN4@calculate_:

; 351  : 	{
; 352  : 	
; 353  : 		//
; 354  : 		// Get keyframe pair to evaluate.  This should be within the range
; 355  : 		// of the motion or this will raise an illegal access.
; 356  : 		//
; 357  : 
; 358  : 		step *= keyframes[ ( number_of_keyframes - 1 ) ].index;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _number_of_keyframes$[ebp]
  00042	83 e8 01	 sub	 eax, 1
  00045	6b c8 18	 imul	 ecx, eax, 24
  00048	8b 55 0c	 mov	 edx, DWORD PTR _keyframes$[ebp]
  0004b	f3 0f 2a 04 0a	 cvtsi2ss xmm0, DWORD PTR [edx+ecx]
  00050	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _step$[ebp]
  00055	f3 0f 11 45 14	 movss	 DWORD PTR _step$[ebp], xmm0

; 359  : 
; 360  : 		key0 = keyframes;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _keyframes$[ebp]
  0005d	89 45 fc	 mov	 DWORD PTR _key0$[ebp], eax
$LN2@calculate_:

; 361  : 	
; 362  : 		while ( step > key0[1].index )

  00060	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00065	c1 e0 00	 shl	 eax, 0
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  0006b	f3 0f 2a 04 01	 cvtsi2ss xmm0, DWORD PTR [ecx+eax]
  00070	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _step$[ebp]
  00075	0f 2f c8	 comiss	 xmm1, xmm0
  00078	76 0b		 jbe	 SHORT $LN3@calculate_

; 363  : 		{
; 364  : 	
; 365  : 			key0++;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  0007d	83 c0 18	 add	 eax, 24			; 00000018H
  00080	89 45 fc	 mov	 DWORD PTR _key0$[ebp], eax

; 366  : 		}

  00083	eb db		 jmp	 SHORT $LN2@calculate_
$LN3@calculate_:

; 367  : 	
; 368  : 		key1 = key0 + 1;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00088	83 c0 18	 add	 eax, 24			; 00000018H
  0008b	89 45 f8	 mov	 DWORD PTR _key1$[ebp], eax

; 369  : 	
; 370  : 		step -= key0->index;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00091	f3 0f 2a 00	 cvtsi2ss xmm0, DWORD PTR [eax]
  00095	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _step$[ebp]
  0009a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0009e	f3 0f 11 4d 14	 movss	 DWORD PTR _step$[ebp], xmm1

; 371  : 	
; 372  : 		//
; 373  : 		// Get tween length and fractional tween position.
; 374  : 		//
; 375  : 	
; 376  : 		tlength = key1->index - key0->index;

  000a3	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  000a9	8b 10		 mov	 edx, DWORD PTR [eax]
  000ab	2b 11		 sub	 edx, DWORD PTR [ecx]
  000ad	89 55 c8	 mov	 DWORD PTR _tlength$[ebp], edx

; 377  : 	
; 378  : 		t = step / tlength;

  000b0	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _tlength$[ebp]
  000b5	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _step$[ebp]
  000ba	f3 0f 5e c8	 divss	 xmm1, xmm0
  000be	f3 0f 11 4d f4	 movss	 DWORD PTR _t$[ebp], xmm1

; 379  : 	
; 380  : 		//
; 381  : 		// Precompute spline coefficients.
; 382  : 		//
; 383  : 	
; 384  : 		if ( !key1->linear )

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  000c6	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000ca	0f 85 a7 01 00
	00		 jne	 $LN8@calculate_

; 385  : 		{
; 386  : 	
; 387  : 			generate_hermite_values ( t, &h1, &h2, &h3, &h4 );

  000d0	8d 45 e4	 lea	 eax, DWORD PTR _h4$[ebp]
  000d3	50		 push	 eax
  000d4	8d 4d e8	 lea	 ecx, DWORD PTR _h3$[ebp]
  000d7	51		 push	 ecx
  000d8	8d 55 ec	 lea	 edx, DWORD PTR _h2$[ebp]
  000db	52		 push	 edx
  000dc	8d 45 f0	 lea	 eax, DWORD PTR _h1$[ebp]
  000df	50		 push	 eax
  000e0	51		 push	 ecx
  000e1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  000e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000eb	e8 00 00 00 00	 call	 ?generate_hermite_values@@YGXMPAM000@Z ; generate_hermite_values

; 388  : 	
; 389  : 			dd0a = ( 1.0 - key0->tension ) * ( 1.0 + key0->continuity ) * ( 1.0 + key0->bias );

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  000f3	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  000f8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00100	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00104	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  00107	f3 0f 5a 41 10	 cvtss2sd xmm0, DWORD PTR [ecx+16]
  0010c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00114	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00118	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  0011b	f3 0f 5a 42 14	 cvtss2sd xmm0, DWORD PTR [edx+20]
  00120	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00128	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0012c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00130	f3 0f 11 45 e0	 movss	 DWORD PTR _dd0a$[ebp], xmm0

; 390  : 			dd0b = ( 1.0 - key0->tension ) * ( 1.0 - key0->continuity ) * ( 1.0 - key0->bias );

  00135	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00138	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  0013d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00145	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00149	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  0014c	f3 0f 5a 41 10	 cvtss2sd xmm0, DWORD PTR [ecx+16]
  00151	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00159	f2 0f 5c d0	 subsd	 xmm2, xmm0
  0015d	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00161	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  00164	f3 0f 5a 42 14	 cvtss2sd xmm0, DWORD PTR [edx+20]
  00169	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00171	f2 0f 5c d0	 subsd	 xmm2, xmm0
  00175	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00179	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0017d	f3 0f 11 45 dc	 movss	 DWORD PTR _dd0b$[ebp], xmm0

; 391  : 			ds1a = ( 1.0 - key1->tension ) * ( 1.0 - key1->continuity ) * ( 1.0 + key1->bias );

  00182	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  00185	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  0018a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00192	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00196	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00199	f3 0f 5a 41 10	 cvtss2sd xmm0, DWORD PTR [ecx+16]
  0019e	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  001a6	f2 0f 5c d0	 subsd	 xmm2, xmm0
  001aa	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001ae	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  001b1	f3 0f 5a 42 14	 cvtss2sd xmm0, DWORD PTR [edx+20]
  001b6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001be	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001c2	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001c6	f3 0f 11 45 d8	 movss	 DWORD PTR _ds1a$[ebp], xmm0

; 392  : 			ds1b = ( 1.0 - key1->tension ) * ( 1.0 + key1->continuity ) * ( 1.0 - key1->bias );

  001cb	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  001ce	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  001d3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001db	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001df	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  001e2	f3 0f 5a 41 10	 cvtss2sd xmm0, DWORD PTR [ecx+16]
  001e7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001ef	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001f3	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  001f6	f3 0f 5a 42 14	 cvtss2sd xmm0, DWORD PTR [edx+20]
  001fb	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00203	f2 0f 5c d0	 subsd	 xmm2, xmm0
  00207	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0020b	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0020f	f3 0f 11 45 d4	 movss	 DWORD PTR _ds1b$[ebp], xmm0

; 393  : 	
; 394  : 			if ( key0->index != 0 )

  00214	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00217	83 38 00	 cmp	 DWORD PTR [eax], 0
  0021a	74 25		 je	 SHORT $LN7@calculate_

; 395  : 			{
; 396  : 	
; 397  : 				adj0 = ( float ) tlength /  ( float ) ( key1->index - key0[-1].index );

  0021c	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _tlength$[ebp]
  00221	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00226	6b c8 ff	 imul	 ecx, eax, -1
  00229	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  0022c	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  0022f	8b 12		 mov	 edx, DWORD PTR [edx]
  00231	2b 14 08	 sub	 edx, DWORD PTR [eax+ecx]
  00234	f3 0f 2a ca	 cvtsi2ss xmm1, edx
  00238	f3 0f 5e c1	 divss	 xmm0, xmm1
  0023c	f3 0f 11 45 d0	 movss	 DWORD PTR _adj0$[ebp], xmm0
$LN7@calculate_:

; 398  : 			}
; 399  : 	
; 400  : 			if ( key1 != &keyframes[ ( number_of_keyframes -1 ) ] )

  00241	8b 45 08	 mov	 eax, DWORD PTR _number_of_keyframes$[ebp]
  00244	83 e8 01	 sub	 eax, 1
  00247	6b c8 18	 imul	 ecx, eax, 24
  0024a	03 4d 0c	 add	 ecx, DWORD PTR _keyframes$[ebp]
  0024d	39 4d f8	 cmp	 DWORD PTR _key1$[ebp], ecx
  00250	74 25		 je	 SHORT $LN8@calculate_

; 401  : 			{
; 402  : 	
; 403  : 				 adj1 = ( float ) tlength / ( float ) ( key1[1].index - key0->index );

  00252	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _tlength$[ebp]
  00257	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0025c	c1 e0 00	 shl	 eax, 0
  0025f	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00262	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  00265	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00268	2b 02		 sub	 eax, DWORD PTR [edx]
  0026a	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0026e	f3 0f 5e c1	 divss	 xmm0, xmm1
  00272	f3 0f 11 45 cc	 movss	 DWORD PTR _adj1$[ebp], xmm0
$LN8@calculate_:

; 404  : 			}
; 405  : 		}
; 406  : 	
; 407  : 		//
; 408  : 		// Compute the interpolate terms
; 409  : 		//
; 410  : 	
; 411  : 		{
; 412  : 
; 413  : 			float
; 414  : 				dvalue;
; 415  : 
; 416  : 			dvalue = key1->value - key0->value;

  00277	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  0027a	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  0027d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00282	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00287	f3 0f 11 45 c4	 movss	 DWORD PTR _dvalue$3[ebp], xmm0

; 417  : 
; 418  : 			if ( !key1->linear )

  0028c	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  0028f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00293	0f 85 1d 01 00
	00		 jne	 $LN9@calculate_

; 419  : 			{
; 420  : 
; 421  : 				float
; 422  : 					dd0value, ds1value;
; 423  : 
; 424  : 				if ( key0->index == 0 )

  00299	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  0029c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0029f	75 2a		 jne	 SHORT $LN11@calculate_

; 425  : 				{
; 426  : 	
; 427  : 					dd0value	= 0.5 * ( dd0a + dd0b ) * dvalue;

  002a1	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dd0a$[ebp]
  002a6	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dd0b$[ebp]
  002ab	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002af	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002b7	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _dvalue$3[ebp]
  002bc	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c4	f3 0f 11 45 c0	 movss	 DWORD PTR _dd0value$2[ebp], xmm0

; 428  : 				}
; 429  : 				else

  002c9	eb 36		 jmp	 SHORT $LN12@calculate_
$LN11@calculate_:

; 430  : 				{
; 431  : 	
; 432  : 					dd0value	= adj0 * ( dd0a * ( key0->value - key0[-1].value ) + dd0b * dvalue );

  002cb	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  002d0	6b c8 ff	 imul	 ecx, eax, -1
  002d3	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  002d6	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  002d9	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  002de	f3 0f 5c 44 08
	08		 subss	 xmm0, DWORD PTR [eax+ecx+8]
  002e4	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dd0a$[ebp]
  002e9	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dd0b$[ebp]
  002ee	f3 0f 59 4d c4	 mulss	 xmm1, DWORD PTR _dvalue$3[ebp]
  002f3	f3 0f 58 c1	 addss	 xmm0, xmm1
  002f7	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _adj0$[ebp]
  002fc	f3 0f 11 45 c0	 movss	 DWORD PTR _dd0value$2[ebp], xmm0
$LN12@calculate_:

; 433  : 				}
; 434  : 	
; 435  : 				if ( key1 == &keyframes[( number_of_keyframes - 1 ) ] )

  00301	8b 45 08	 mov	 eax, DWORD PTR _number_of_keyframes$[ebp]
  00304	83 e8 01	 sub	 eax, 1
  00307	6b c8 18	 imul	 ecx, eax, 24
  0030a	03 4d 0c	 add	 ecx, DWORD PTR _keyframes$[ebp]
  0030d	39 4d f8	 cmp	 DWORD PTR _key1$[ebp], ecx
  00310	75 2a		 jne	 SHORT $LN13@calculate_

; 436  : 				{
; 437  : 	
; 438  : 					ds1value	= 0.5 * ( ds1a + ds1b ) * dvalue;

  00312	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  00317	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _ds1b$[ebp]
  0031c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00320	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00328	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _dvalue$3[ebp]
  0032d	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00331	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00335	f3 0f 11 45 bc	 movss	 DWORD PTR _ds1value$1[ebp], xmm0

; 439  : 				}
; 440  : 				else

  0033a	eb 36		 jmp	 SHORT $LN14@calculate_
$LN13@calculate_:

; 441  : 				{
; 442  : 	
; 443  : 					ds1value	= adj1 * ( ( ds1a * dvalue ) + ds1b * ( key1[1].value - key1->value ) );

  0033c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  00341	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _dvalue$3[ebp]
  00346	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0034b	c1 e0 00	 shl	 eax, 0
  0034e	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00351	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  00354	f3 0f 10 4c 01
	08		 movss	 xmm1, DWORD PTR [ecx+eax+8]
  0035a	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  0035f	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _ds1b$[ebp]
  00364	f3 0f 58 c1	 addss	 xmm0, xmm1
  00368	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _adj1$[ebp]
  0036d	f3 0f 11 45 bc	 movss	 DWORD PTR _ds1value$1[ebp], xmm0
$LN14@calculate_:

; 444  : 				}
; 445  : 	
; 446  : 				result->value	= key0->value * h1 + key1->value * h2 + dd0value * h3 + ds1value * h4;

  00372	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00375	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0037a	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h1$[ebp]
  0037f	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00382	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00387	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _h2$[ebp]
  0038c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00390	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _dd0value$2[ebp]
  00395	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _h3$[ebp]
  0039a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0039e	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _ds1value$1[ebp]
  003a3	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _h4$[ebp]
  003a8	f3 0f 58 c1	 addss	 xmm0, xmm1
  003ac	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  003af	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 447  : 			}
; 448  : 			else

  003b4	eb 1a		 jmp	 SHORT $LN10@calculate_
$LN9@calculate_:

; 449  : 			{
; 450  : 	
; 451  : 				result->value	= key0->value + t * dvalue;

  003b6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  003bb	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _dvalue$3[ebp]
  003c0	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  003c3	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  003c8	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  003cb	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN10@calculate_:

; 452  : 			}
; 453  : 		}
; 454  : 	}
; 455  : }

  003d0	5f		 pop	 edi
  003d1	5e		 pop	 esi
  003d2	5b		 pop	 ebx
  003d3	8b e5		 mov	 esp, ebp
  003d5	5d		 pop	 ebp
  003d6	c2 10 00	 ret	 16			; 00000010H
?calculate_value_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_VALUE_KEYFRAME@@0M@Z ENDP ; calculate_value_keyframe
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dkeyfr.c
;	COMDAT ?calculate_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_KEYFRAME@@0M@Z
_TEXT	SEGMENT
_ds1scale_z$1 = -164					; size = 4
_dd0scale_z$2 = -160					; size = 4
_ds1scale_y$3 = -156					; size = 4
_dd0scale_y$4 = -152					; size = 4
_ds1scale_x$5 = -148					; size = 4
_dd0scale_x$6 = -144					; size = 4
_ds1z$7 = -140						; size = 4
_dd0z$8 = -136						; size = 4
_ds1y$9 = -132						; size = 4
_dd0y$10 = -128						; size = 4
_ds1x$11 = -124						; size = 4
_dd0x$12 = -120						; size = 4
_ds1roll$13 = -116					; size = 4
_dd0roll$14 = -112					; size = 4
_ds1pitch$15 = -108					; size = 4
_dd0pitch$16 = -104					; size = 4
_ds1heading$17 = -100					; size = 4
_dd0heading$18 = -96					; size = 4
_dscale_z$19 = -92					; size = 4
_dscale_y$20 = -88					; size = 4
_dscale_x$21 = -84					; size = 4
_dz$22 = -80						; size = 4
_dy$23 = -76						; size = 4
_dx$24 = -72						; size = 4
_droll$25 = -68						; size = 4
_dpitch$26 = -64					; size = 4
_dheading$27 = -60					; size = 4
_tlength$ = -56						; size = 4
_adj1$ = -52						; size = 4
_adj0$ = -48						; size = 4
_ds1b$ = -44						; size = 4
_ds1a$ = -40						; size = 4
_dd0b$ = -36						; size = 4
_dd0a$ = -32						; size = 4
_h4$ = -28						; size = 4
_h3$ = -24						; size = 4
_h2$ = -20						; size = 4
_h1$ = -16						; size = 4
_t$ = -12						; size = 4
_key1$ = -8						; size = 4
_key0$ = -4						; size = 4
_number_of_keyframes$ = 8				; size = 4
_keyframes$ = 12					; size = 4
_result$ = 16						; size = 4
_step$ = 20						; size = 4
?calculate_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_KEYFRAME@@0M@Z PROC ; calculate_keyframe, COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 105  : 
; 106  : 	object_3d_sub_object_keyframe
; 107  : 		*key0,
; 108  : 		*key1;
; 109  : 
; 110  : 	float
; 111  : 		t,
; 112  : 		h1,
; 113  : 		h2,
; 114  : 		h3,
; 115  : 		h4,
; 116  : 		dd0a,
; 117  : 		dd0b,
; 118  : 		ds1a,
; 119  : 		ds1b,
; 120  : 		adj0,
; 121  : 		adj1;
; 122  : 
; 123  : 	int
; 124  : 		tlength;
; 125  : 
; 126  : 	//
; 127  : 	// If there is one keyframe, that is the one to return
; 128  : 	//
; 129  : 
; 130  : 	if ( number_of_keyframes == 1 )

  0000c	83 7d 08 01	 cmp	 DWORD PTR _number_of_keyframes$[ebp], 1
  00010	75 12		 jne	 SHORT $LN4@calculate_

; 131  : 	{
; 132  : 
; 133  : 		*result = *keyframes;

  00012	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00017	8b 75 0c	 mov	 esi, DWORD PTR _keyframes$[ebp]
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _result$[ebp]
  0001d	f3 a5		 rep movsd

; 134  : 	}
; 135  : 	else

  0001f	e9 5b 0d 00 00	 jmp	 $LN10@calculate_
$LN4@calculate_:

; 136  : 	{
; 137  : 	
; 138  : 		//
; 139  : 		// Get keyframe pair to evaluate.  This should be within the range
; 140  : 		// of the motion or this will raise an illegal access.
; 141  : 		//
; 142  : 
; 143  : 		step *= keyframes[ ( number_of_keyframes - 1 ) ].index;

  00024	8b 45 08	 mov	 eax, DWORD PTR _number_of_keyframes$[ebp]
  00027	83 e8 01	 sub	 eax, 1
  0002a	6b c8 38	 imul	 ecx, eax, 56
  0002d	8b 55 0c	 mov	 edx, DWORD PTR _keyframes$[ebp]
  00030	f3 0f 2a 04 0a	 cvtsi2ss xmm0, DWORD PTR [edx+ecx]
  00035	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _step$[ebp]
  0003a	f3 0f 11 45 14	 movss	 DWORD PTR _step$[ebp], xmm0

; 144  : 
; 145  : 		key0 = keyframes;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _keyframes$[ebp]
  00042	89 45 fc	 mov	 DWORD PTR _key0$[ebp], eax
$LN2@calculate_:

; 146  : 	
; 147  : 		while ( step > key0[1].index )

  00045	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0004a	c1 e0 00	 shl	 eax, 0
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  00050	f3 0f 2a 04 01	 cvtsi2ss xmm0, DWORD PTR [ecx+eax]
  00055	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _step$[ebp]
  0005a	0f 2f c8	 comiss	 xmm1, xmm0
  0005d	76 0b		 jbe	 SHORT $LN3@calculate_

; 148  : 		{
; 149  : 	
; 150  : 			key0++;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00062	83 c0 38	 add	 eax, 56			; 00000038H
  00065	89 45 fc	 mov	 DWORD PTR _key0$[ebp], eax

; 151  : 		}

  00068	eb db		 jmp	 SHORT $LN2@calculate_
$LN3@calculate_:

; 152  : 	
; 153  : 		key1 = key0 + 1;

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  0006d	83 c0 38	 add	 eax, 56			; 00000038H
  00070	89 45 f8	 mov	 DWORD PTR _key1$[ebp], eax

; 154  : 	
; 155  : 		step -= key0->index;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00076	f3 0f 2a 00	 cvtsi2ss xmm0, DWORD PTR [eax]
  0007a	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _step$[ebp]
  0007f	f3 0f 5c c8	 subss	 xmm1, xmm0
  00083	f3 0f 11 4d 14	 movss	 DWORD PTR _step$[ebp], xmm1

; 156  : 	
; 157  : 		//
; 158  : 		// Get tween length and fractional tween position.
; 159  : 		//
; 160  : 	
; 161  : 		tlength = key1->index - key0->index;

  00088	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  0008e	8b 10		 mov	 edx, DWORD PTR [eax]
  00090	2b 11		 sub	 edx, DWORD PTR [ecx]
  00092	89 55 c8	 mov	 DWORD PTR _tlength$[ebp], edx

; 162  : 	
; 163  : 		t = step / tlength;

  00095	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _tlength$[ebp]
  0009a	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _step$[ebp]
  0009f	f3 0f 5e c8	 divss	 xmm1, xmm0
  000a3	f3 0f 11 4d f4	 movss	 DWORD PTR _t$[ebp], xmm1

; 164  : 	
; 165  : 		//
; 166  : 		// Precompute spline coefficients.
; 167  : 		//
; 168  : 	
; 169  : 		if ( !key1->linear )

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  000ab	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000af	0f 85 a7 01 00
	00		 jne	 $LN8@calculate_

; 170  : 		{
; 171  : 	
; 172  : 			generate_hermite_values ( t, &h1, &h2, &h3, &h4 );

  000b5	8d 45 e4	 lea	 eax, DWORD PTR _h4$[ebp]
  000b8	50		 push	 eax
  000b9	8d 4d e8	 lea	 ecx, DWORD PTR _h3$[ebp]
  000bc	51		 push	 ecx
  000bd	8d 55 ec	 lea	 edx, DWORD PTR _h2$[ebp]
  000c0	52		 push	 edx
  000c1	8d 45 f0	 lea	 eax, DWORD PTR _h1$[ebp]
  000c4	50		 push	 eax
  000c5	51		 push	 ecx
  000c6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  000cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d0	e8 00 00 00 00	 call	 ?generate_hermite_values@@YGXMPAM000@Z ; generate_hermite_values

; 173  : 	
; 174  : 			dd0a = ( 1.0 - key0->tension ) * ( 1.0 + key0->continuity ) * ( 1.0 + key0->bias );

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  000d8	f3 0f 5a 40 2c	 cvtss2sd xmm0, DWORD PTR [eax+44]
  000dd	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000e5	f2 0f 5c c8	 subsd	 xmm1, xmm0
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  000ec	f3 0f 5a 41 30	 cvtss2sd xmm0, DWORD PTR [ecx+48]
  000f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000f9	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000fd	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  00100	f3 0f 5a 42 34	 cvtss2sd xmm0, DWORD PTR [edx+52]
  00105	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0010d	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00111	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00115	f3 0f 11 45 e0	 movss	 DWORD PTR _dd0a$[ebp], xmm0

; 175  : 			dd0b = ( 1.0 - key0->tension ) * ( 1.0 - key0->continuity ) * ( 1.0 - key0->bias );

  0011a	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  0011d	f3 0f 5a 40 2c	 cvtss2sd xmm0, DWORD PTR [eax+44]
  00122	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0012a	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0012e	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  00131	f3 0f 5a 41 30	 cvtss2sd xmm0, DWORD PTR [ecx+48]
  00136	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  0013e	f2 0f 5c d0	 subsd	 xmm2, xmm0
  00142	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00146	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  00149	f3 0f 5a 42 34	 cvtss2sd xmm0, DWORD PTR [edx+52]
  0014e	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00156	f2 0f 5c d0	 subsd	 xmm2, xmm0
  0015a	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0015e	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00162	f3 0f 11 45 dc	 movss	 DWORD PTR _dd0b$[ebp], xmm0

; 176  : 			ds1a = ( 1.0 - key1->tension ) * ( 1.0 - key1->continuity ) * ( 1.0 + key1->bias );

  00167	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  0016a	f3 0f 5a 40 2c	 cvtss2sd xmm0, DWORD PTR [eax+44]
  0016f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00177	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0017b	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  0017e	f3 0f 5a 41 30	 cvtss2sd xmm0, DWORD PTR [ecx+48]
  00183	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  0018b	f2 0f 5c d0	 subsd	 xmm2, xmm0
  0018f	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00193	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  00196	f3 0f 5a 42 34	 cvtss2sd xmm0, DWORD PTR [edx+52]
  0019b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001a3	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001a7	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001ab	f3 0f 11 45 d8	 movss	 DWORD PTR _ds1a$[ebp], xmm0

; 177  : 			ds1b = ( 1.0 - key1->tension ) * ( 1.0 + key1->continuity ) * ( 1.0 - key1->bias );

  001b0	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  001b3	f3 0f 5a 40 2c	 cvtss2sd xmm0, DWORD PTR [eax+44]
  001b8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001c0	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001c4	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  001c7	f3 0f 5a 41 30	 cvtss2sd xmm0, DWORD PTR [ecx+48]
  001cc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001d4	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001d8	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  001db	f3 0f 5a 42 34	 cvtss2sd xmm0, DWORD PTR [edx+52]
  001e0	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  001e8	f2 0f 5c d0	 subsd	 xmm2, xmm0
  001ec	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001f0	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001f4	f3 0f 11 45 d4	 movss	 DWORD PTR _ds1b$[ebp], xmm0

; 178  : 	
; 179  : 			if ( key0->index != 0 )

  001f9	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  001fc	83 38 00	 cmp	 DWORD PTR [eax], 0
  001ff	74 25		 je	 SHORT $LN7@calculate_

; 180  : 			{
; 181  : 	
; 182  : 				adj0 = ( float ) tlength /  ( float ) ( key1->index - key0[-1].index );

  00201	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _tlength$[ebp]
  00206	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0020b	6b c8 ff	 imul	 ecx, eax, -1
  0020e	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  00211	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00214	8b 12		 mov	 edx, DWORD PTR [edx]
  00216	2b 14 08	 sub	 edx, DWORD PTR [eax+ecx]
  00219	f3 0f 2a ca	 cvtsi2ss xmm1, edx
  0021d	f3 0f 5e c1	 divss	 xmm0, xmm1
  00221	f3 0f 11 45 d0	 movss	 DWORD PTR _adj0$[ebp], xmm0
$LN7@calculate_:

; 183  : 			}
; 184  : 	
; 185  : 			if ( key1 != &keyframes[ ( number_of_keyframes -1 ) ] )

  00226	8b 45 08	 mov	 eax, DWORD PTR _number_of_keyframes$[ebp]
  00229	83 e8 01	 sub	 eax, 1
  0022c	6b c8 38	 imul	 ecx, eax, 56
  0022f	03 4d 0c	 add	 ecx, DWORD PTR _keyframes$[ebp]
  00232	39 4d f8	 cmp	 DWORD PTR _key1$[ebp], ecx
  00235	74 25		 je	 SHORT $LN8@calculate_

; 186  : 			{
; 187  : 	
; 188  : 				 adj1 = ( float ) tlength / ( float ) ( key1[1].index - key0->index );

  00237	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _tlength$[ebp]
  0023c	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00241	c1 e0 00	 shl	 eax, 0
  00244	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00247	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  0024a	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0024d	2b 02		 sub	 eax, DWORD PTR [edx]
  0024f	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00253	f3 0f 5e c1	 divss	 xmm0, xmm1
  00257	f3 0f 11 45 cc	 movss	 DWORD PTR _adj1$[ebp], xmm0
$LN8@calculate_:

; 189  : 			}
; 190  : 		}
; 191  : 	
; 192  : 		//
; 193  : 		// Compute the interpolate terms
; 194  : 		//
; 195  : 	
; 196  : 		{
; 197  : 
; 198  : 			float
; 199  : 				dheading,
; 200  : 				dpitch,
; 201  : 				droll,
; 202  : 				dx,
; 203  : 				dy,
; 204  : 				dz,
; 205  : 				dscale_x,
; 206  : 				dscale_y,
; 207  : 				dscale_z;
; 208  : 
; 209  : 			dheading = key1->heading - key0->heading;

  0025c	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  0025f	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  00262	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00267	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  0026c	f3 0f 11 45 c4	 movss	 DWORD PTR _dheading$27[ebp], xmm0

; 210  : 			dpitch = key1->pitch - key0->pitch;

  00271	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  00274	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  00277	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0027c	f3 0f 5c 41 18	 subss	 xmm0, DWORD PTR [ecx+24]
  00281	f3 0f 11 45 c0	 movss	 DWORD PTR _dpitch$26[ebp], xmm0

; 211  : 			droll = key1->roll - key0->roll;

  00286	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  00289	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  0028c	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00291	f3 0f 5c 41 1c	 subss	 xmm0, DWORD PTR [ecx+28]
  00296	f3 0f 11 45 bc	 movss	 DWORD PTR _droll$25[ebp], xmm0

; 212  : 			dx = key1->x - key0->x;

  0029b	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  0029e	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  002a1	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  002a6	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  002ab	f3 0f 11 45 b8	 movss	 DWORD PTR _dx$24[ebp], xmm0

; 213  : 			dy = key1->y - key0->y;

  002b0	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  002b3	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  002b6	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  002bb	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  002c0	f3 0f 11 45 b4	 movss	 DWORD PTR _dy$23[ebp], xmm0

; 214  : 			dz = key1->z - key0->z;

  002c5	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  002c8	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  002cb	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  002d0	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  002d5	f3 0f 11 45 b0	 movss	 DWORD PTR _dz$22[ebp], xmm0

; 215  : 			dscale_x = key1->scale_x - key0->scale_x;

  002da	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  002dd	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  002e0	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  002e5	f3 0f 5c 41 20	 subss	 xmm0, DWORD PTR [ecx+32]
  002ea	f3 0f 11 45 ac	 movss	 DWORD PTR _dscale_x$21[ebp], xmm0

; 216  : 			dscale_y = key1->scale_y - key0->scale_y;

  002ef	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  002f2	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  002f5	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  002fa	f3 0f 5c 41 24	 subss	 xmm0, DWORD PTR [ecx+36]
  002ff	f3 0f 11 45 a8	 movss	 DWORD PTR _dscale_y$20[ebp], xmm0

; 217  : 			dscale_z = key1->scale_z - key0->scale_z;

  00304	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  00307	8b 4d fc	 mov	 ecx, DWORD PTR _key0$[ebp]
  0030a	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  0030f	f3 0f 5c 41 28	 subss	 xmm0, DWORD PTR [ecx+40]
  00314	f3 0f 11 45 a4	 movss	 DWORD PTR _dscale_z$19[ebp], xmm0

; 218  : 
; 219  : 			if ( !key1->linear )

  00319	8b 45 f8	 mov	 eax, DWORD PTR _key1$[ebp]
  0031c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00320	0f 85 6f 09 00
	00		 jne	 $LN9@calculate_

; 220  : 			{
; 221  : 
; 222  : 				float
; 223  : 					dd0heading, ds1heading,
; 224  : 					dd0pitch, ds1pitch,
; 225  : 					dd0roll, ds1roll,
; 226  : 					dd0x, ds1x,
; 227  : 					dd0y, ds1y,
; 228  : 					dd0z, ds1z,
; 229  : 					dd0scale_x, ds1scale_x,
; 230  : 					dd0scale_y, ds1scale_y,
; 231  : 					dd0scale_z, ds1scale_z;
; 232  : 
; 233  : 				if ( key0->index == 0 )

  00326	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00329	83 38 00	 cmp	 DWORD PTR [eax], 0
  0032c	0f 85 79 01 00
	00		 jne	 $LN11@calculate_

; 234  : 				{
; 235  : 	
; 236  : 					dd0heading	= 0.5 * ( dd0a + dd0b ) * dheading;

  00332	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dd0a$[ebp]
  00337	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dd0b$[ebp]
  0033c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00340	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00348	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _dheading$27[ebp]
  0034d	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00351	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00355	f3 0f 11 45 a0	 movss	 DWORD PTR _dd0heading$18[ebp], xmm0

; 237  : 					dd0pitch		= 0.5 * ( dd0a + dd0b ) * dpitch;

  0035a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dd0a$[ebp]
  0035f	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dd0b$[ebp]
  00364	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00368	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00370	f3 0f 5a 4d c0	 cvtss2sd xmm1, DWORD PTR _dpitch$26[ebp]
  00375	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00379	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0037d	f3 0f 11 45 98	 movss	 DWORD PTR _dd0pitch$16[ebp], xmm0

; 238  : 					dd0roll		= 0.5 * ( dd0a + dd0b ) * droll;

  00382	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dd0a$[ebp]
  00387	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dd0b$[ebp]
  0038c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00390	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00398	f3 0f 5a 4d bc	 cvtss2sd xmm1, DWORD PTR _droll$25[ebp]
  0039d	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a5	f3 0f 11 45 90	 movss	 DWORD PTR _dd0roll$14[ebp], xmm0

; 239  : 					dd0x			= 0.5 * ( dd0a + dd0b ) * dx;

  003aa	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dd0a$[ebp]
  003af	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dd0b$[ebp]
  003b4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003b8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  003c0	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _dx$24[ebp]
  003c5	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003cd	f3 0f 11 45 88	 movss	 DWORD PTR _dd0x$12[ebp], xmm0

; 240  : 					dd0y			= 0.5 * ( dd0a + dd0b ) * dy;

  003d2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dd0a$[ebp]
  003d7	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dd0b$[ebp]
  003dc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003e0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  003e8	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _dy$23[ebp]
  003ed	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f5	f3 0f 11 45 80	 movss	 DWORD PTR _dd0y$10[ebp], xmm0

; 241  : 					dd0z			= 0.5 * ( dd0a + dd0b ) * dz;

  003fa	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dd0a$[ebp]
  003ff	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dd0b$[ebp]
  00404	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00408	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00410	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _dz$22[ebp]
  00415	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00419	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0041d	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _dd0z$8[ebp], xmm0

; 242  : 					dd0scale_x	= 0.5 * ( dd0a + dd0b ) * dscale_x;

  00425	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dd0a$[ebp]
  0042a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dd0b$[ebp]
  0042f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00433	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0043b	f3 0f 5a 4d ac	 cvtss2sd xmm1, DWORD PTR _dscale_x$21[ebp]
  00440	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00444	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00448	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _dd0scale_x$6[ebp], xmm0

; 243  : 					dd0scale_y	= 0.5 * ( dd0a + dd0b ) * dscale_y;

  00450	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dd0a$[ebp]
  00455	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dd0b$[ebp]
  0045a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0045e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00466	f3 0f 5a 4d a8	 cvtss2sd xmm1, DWORD PTR _dscale_y$20[ebp]
  0046b	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0046f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00473	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _dd0scale_y$4[ebp], xmm0

; 244  : 					dd0scale_z	= 0.5 * ( dd0a + dd0b ) * dscale_z;

  0047b	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dd0a$[ebp]
  00480	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dd0b$[ebp]
  00485	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00489	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00491	f3 0f 5a 4d a4	 cvtss2sd xmm1, DWORD PTR _dscale_z$19[ebp]
  00496	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0049a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0049e	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _dd0scale_z$2[ebp], xmm0

; 245  : 				}
; 246  : 				else

  004a6	e9 f2 01 00 00	 jmp	 $LN12@calculate_
$LN11@calculate_:

; 247  : 				{
; 248  : 	
; 249  : 					dd0heading	= adj0 * ( dd0a * ( key0->heading - key0[-1].heading ) + dd0b * dheading );

  004ab	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  004b0	6b c8 ff	 imul	 ecx, eax, -1
  004b3	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  004b6	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  004b9	f3 0f 10 42 14	 movss	 xmm0, DWORD PTR [edx+20]
  004be	f3 0f 5c 44 08
	14		 subss	 xmm0, DWORD PTR [eax+ecx+20]
  004c4	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dd0a$[ebp]
  004c9	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dd0b$[ebp]
  004ce	f3 0f 59 4d c4	 mulss	 xmm1, DWORD PTR _dheading$27[ebp]
  004d3	f3 0f 58 c1	 addss	 xmm0, xmm1
  004d7	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _adj0$[ebp]
  004dc	f3 0f 11 45 a0	 movss	 DWORD PTR _dd0heading$18[ebp], xmm0

; 250  : 					dd0pitch		= adj0 * ( dd0a * ( key0->pitch - key0[-1].pitch ) + dd0b * dpitch );

  004e1	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  004e6	6b c8 ff	 imul	 ecx, eax, -1
  004e9	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  004ec	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  004ef	f3 0f 10 42 18	 movss	 xmm0, DWORD PTR [edx+24]
  004f4	f3 0f 5c 44 08
	18		 subss	 xmm0, DWORD PTR [eax+ecx+24]
  004fa	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dd0a$[ebp]
  004ff	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dd0b$[ebp]
  00504	f3 0f 59 4d c0	 mulss	 xmm1, DWORD PTR _dpitch$26[ebp]
  00509	f3 0f 58 c1	 addss	 xmm0, xmm1
  0050d	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _adj0$[ebp]
  00512	f3 0f 11 45 98	 movss	 DWORD PTR _dd0pitch$16[ebp], xmm0

; 251  : 					dd0roll		= adj0 * ( dd0a * ( key0->roll - key0[-1].roll ) + dd0b * droll );

  00517	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0051c	6b c8 ff	 imul	 ecx, eax, -1
  0051f	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  00522	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00525	f3 0f 10 42 1c	 movss	 xmm0, DWORD PTR [edx+28]
  0052a	f3 0f 5c 44 08
	1c		 subss	 xmm0, DWORD PTR [eax+ecx+28]
  00530	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dd0a$[ebp]
  00535	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dd0b$[ebp]
  0053a	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _droll$25[ebp]
  0053f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00543	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _adj0$[ebp]
  00548	f3 0f 11 45 90	 movss	 DWORD PTR _dd0roll$14[ebp], xmm0

; 252  : 					dd0x			= adj0 * ( dd0a * ( key0->x - key0[-1].x ) + dd0b * dx );

  0054d	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00552	6b c8 ff	 imul	 ecx, eax, -1
  00555	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  00558	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  0055b	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00560	f3 0f 5c 44 08
	08		 subss	 xmm0, DWORD PTR [eax+ecx+8]
  00566	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dd0a$[ebp]
  0056b	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dd0b$[ebp]
  00570	f3 0f 59 4d b8	 mulss	 xmm1, DWORD PTR _dx$24[ebp]
  00575	f3 0f 58 c1	 addss	 xmm0, xmm1
  00579	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _adj0$[ebp]
  0057e	f3 0f 11 45 88	 movss	 DWORD PTR _dd0x$12[ebp], xmm0

; 253  : 					dd0y			= adj0 * ( dd0a * ( key0->y - key0[-1].y ) + dd0b * dy );

  00583	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00588	6b c8 ff	 imul	 ecx, eax, -1
  0058b	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  0058e	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00591	f3 0f 10 42 0c	 movss	 xmm0, DWORD PTR [edx+12]
  00596	f3 0f 5c 44 08
	0c		 subss	 xmm0, DWORD PTR [eax+ecx+12]
  0059c	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dd0a$[ebp]
  005a1	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dd0b$[ebp]
  005a6	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _dy$23[ebp]
  005ab	f3 0f 58 c1	 addss	 xmm0, xmm1
  005af	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _adj0$[ebp]
  005b4	f3 0f 11 45 80	 movss	 DWORD PTR _dd0y$10[ebp], xmm0

; 254  : 					dd0z			= adj0 * ( dd0a * ( key0->z - key0[-1].z ) + dd0b * dz );

  005b9	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  005be	6b c8 ff	 imul	 ecx, eax, -1
  005c1	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  005c4	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  005c7	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  005cc	f3 0f 5c 44 08
	10		 subss	 xmm0, DWORD PTR [eax+ecx+16]
  005d2	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dd0a$[ebp]
  005d7	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dd0b$[ebp]
  005dc	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _dz$22[ebp]
  005e1	f3 0f 58 c1	 addss	 xmm0, xmm1
  005e5	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _adj0$[ebp]
  005ea	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _dd0z$8[ebp], xmm0

; 255  : 					dd0scale_x	= adj0 * ( dd0a * ( key0->scale_x - key0[-1].scale_x ) + dd0b * dscale_x );

  005f2	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  005f7	6b c8 ff	 imul	 ecx, eax, -1
  005fa	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  005fd	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00600	f3 0f 10 42 20	 movss	 xmm0, DWORD PTR [edx+32]
  00605	f3 0f 5c 44 08
	20		 subss	 xmm0, DWORD PTR [eax+ecx+32]
  0060b	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dd0a$[ebp]
  00610	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dd0b$[ebp]
  00615	f3 0f 59 4d ac	 mulss	 xmm1, DWORD PTR _dscale_x$21[ebp]
  0061a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0061e	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _adj0$[ebp]
  00623	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _dd0scale_x$6[ebp], xmm0

; 256  : 					dd0scale_y	= adj0 * ( dd0a * ( key0->scale_y - key0[-1].scale_y ) + dd0b * dscale_y );

  0062b	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00630	6b c8 ff	 imul	 ecx, eax, -1
  00633	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  00636	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00639	f3 0f 10 42 24	 movss	 xmm0, DWORD PTR [edx+36]
  0063e	f3 0f 5c 44 08
	24		 subss	 xmm0, DWORD PTR [eax+ecx+36]
  00644	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dd0a$[ebp]
  00649	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dd0b$[ebp]
  0064e	f3 0f 59 4d a8	 mulss	 xmm1, DWORD PTR _dscale_y$20[ebp]
  00653	f3 0f 58 c1	 addss	 xmm0, xmm1
  00657	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _adj0$[ebp]
  0065c	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _dd0scale_y$4[ebp], xmm0

; 257  : 					dd0scale_z	= adj0 * ( dd0a * ( key0->scale_z - key0[-1].scale_z ) + dd0b * dscale_z );

  00664	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00669	6b c8 ff	 imul	 ecx, eax, -1
  0066c	8b 55 fc	 mov	 edx, DWORD PTR _key0$[ebp]
  0066f	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00672	f3 0f 10 42 28	 movss	 xmm0, DWORD PTR [edx+40]
  00677	f3 0f 5c 44 08
	28		 subss	 xmm0, DWORD PTR [eax+ecx+40]
  0067d	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dd0a$[ebp]
  00682	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dd0b$[ebp]
  00687	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _dscale_z$19[ebp]
  0068c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00690	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _adj0$[ebp]
  00695	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _dd0scale_z$2[ebp], xmm0
$LN12@calculate_:

; 258  : 				}
; 259  : 	
; 260  : 				if ( key1 == &keyframes[( number_of_keyframes - 1 ) ] )

  0069d	8b 45 08	 mov	 eax, DWORD PTR _number_of_keyframes$[ebp]
  006a0	83 e8 01	 sub	 eax, 1
  006a3	6b c8 38	 imul	 ecx, eax, 56
  006a6	03 4d 0c	 add	 ecx, DWORD PTR _keyframes$[ebp]
  006a9	39 4d f8	 cmp	 DWORD PTR _key1$[ebp], ecx
  006ac	0f 85 7c 01 00
	00		 jne	 $LN13@calculate_

; 261  : 				{
; 262  : 	
; 263  : 					ds1heading	= 0.5 * ( ds1a + ds1b ) * dheading;

  006b2	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  006b7	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _ds1b$[ebp]
  006bc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  006c0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  006c8	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _dheading$27[ebp]
  006cd	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  006d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006d5	f3 0f 11 45 9c	 movss	 DWORD PTR _ds1heading$17[ebp], xmm0

; 264  : 					ds1pitch		= 0.5 * ( ds1a + ds1b ) * dpitch;

  006da	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  006df	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _ds1b$[ebp]
  006e4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  006e8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  006f0	f3 0f 5a 4d c0	 cvtss2sd xmm1, DWORD PTR _dpitch$26[ebp]
  006f5	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  006f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006fd	f3 0f 11 45 94	 movss	 DWORD PTR _ds1pitch$15[ebp], xmm0

; 265  : 					ds1roll		= 0.5 * ( ds1a + ds1b ) * droll;

  00702	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  00707	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _ds1b$[ebp]
  0070c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00710	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00718	f3 0f 5a 4d bc	 cvtss2sd xmm1, DWORD PTR _droll$25[ebp]
  0071d	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00721	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00725	f3 0f 11 45 8c	 movss	 DWORD PTR _ds1roll$13[ebp], xmm0

; 266  : 					ds1x			= 0.5 * ( ds1a + ds1b ) * dx;

  0072a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  0072f	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _ds1b$[ebp]
  00734	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00738	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00740	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _dx$24[ebp]
  00745	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00749	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0074d	f3 0f 11 45 84	 movss	 DWORD PTR _ds1x$11[ebp], xmm0

; 267  : 					ds1y			= 0.5 * ( ds1a + ds1b ) * dy;

  00752	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  00757	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _ds1b$[ebp]
  0075c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00760	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00768	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _dy$23[ebp]
  0076d	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00771	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00775	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _ds1y$9[ebp], xmm0

; 268  : 					ds1z			= 0.5 * ( ds1a + ds1b ) * dz;

  0077d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  00782	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _ds1b$[ebp]
  00787	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0078b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00793	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _dz$22[ebp]
  00798	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0079c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007a0	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _ds1z$7[ebp], xmm0

; 269  : 					ds1scale_x	= 0.5 * ( ds1a + ds1b ) * dscale_x;

  007a8	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  007ad	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _ds1b$[ebp]
  007b2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  007b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  007be	f3 0f 5a 4d ac	 cvtss2sd xmm1, DWORD PTR _dscale_x$21[ebp]
  007c3	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  007c7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007cb	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _ds1scale_x$5[ebp], xmm0

; 270  : 					ds1scale_y	= 0.5 * ( ds1a + ds1b ) * dscale_y;

  007d3	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  007d8	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _ds1b$[ebp]
  007dd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  007e1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  007e9	f3 0f 5a 4d a8	 cvtss2sd xmm1, DWORD PTR _dscale_y$20[ebp]
  007ee	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  007f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007f6	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _ds1scale_y$3[ebp], xmm0

; 271  : 					ds1scale_z	= 0.5 * ( ds1a + ds1b ) * dscale_z;

  007fe	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  00803	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _ds1b$[ebp]
  00808	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0080c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00814	f3 0f 5a 4d a4	 cvtss2sd xmm1, DWORD PTR _dscale_z$19[ebp]
  00819	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0081d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00821	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _ds1scale_z$1[ebp], xmm0

; 272  : 				}
; 273  : 				else

  00829	e9 f5 01 00 00	 jmp	 $LN14@calculate_
$LN13@calculate_:

; 274  : 				{
; 275  : 	
; 276  : 					ds1heading	= adj1 * ( ( ds1a * dheading ) + ds1b * ( key1[1].heading - key1->heading ) );

  0082e	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  00833	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _dheading$27[ebp]
  00838	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0083d	c1 e0 00	 shl	 eax, 0
  00840	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00843	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  00846	f3 0f 10 4c 01
	14		 movss	 xmm1, DWORD PTR [ecx+eax+20]
  0084c	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  00851	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _ds1b$[ebp]
  00856	f3 0f 58 c1	 addss	 xmm0, xmm1
  0085a	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _adj1$[ebp]
  0085f	f3 0f 11 45 9c	 movss	 DWORD PTR _ds1heading$17[ebp], xmm0

; 277  : 					ds1pitch		= adj1 * ( ( ds1a * dpitch ) + ds1b * ( key1[1].pitch - key1->pitch ) );

  00864	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  00869	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _dpitch$26[ebp]
  0086e	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00873	c1 e0 00	 shl	 eax, 0
  00876	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00879	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  0087c	f3 0f 10 4c 01
	18		 movss	 xmm1, DWORD PTR [ecx+eax+24]
  00882	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  00887	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _ds1b$[ebp]
  0088c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00890	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _adj1$[ebp]
  00895	f3 0f 11 45 94	 movss	 DWORD PTR _ds1pitch$15[ebp], xmm0

; 278  : 					ds1roll		= adj1 * ( ( ds1a * droll ) + ds1b * ( key1[1].roll - key1->roll ) );

  0089a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  0089f	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _droll$25[ebp]
  008a4	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  008a9	c1 e0 00	 shl	 eax, 0
  008ac	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  008af	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  008b2	f3 0f 10 4c 01
	1c		 movss	 xmm1, DWORD PTR [ecx+eax+28]
  008b8	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  008bd	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _ds1b$[ebp]
  008c2	f3 0f 58 c1	 addss	 xmm0, xmm1
  008c6	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _adj1$[ebp]
  008cb	f3 0f 11 45 8c	 movss	 DWORD PTR _ds1roll$13[ebp], xmm0

; 279  : 					ds1x			= adj1 * ( ( ds1a * dx ) + ds1b * ( key1[1].x - key1->x ) );

  008d0	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  008d5	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _dx$24[ebp]
  008da	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  008df	c1 e0 00	 shl	 eax, 0
  008e2	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  008e5	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  008e8	f3 0f 10 4c 01
	08		 movss	 xmm1, DWORD PTR [ecx+eax+8]
  008ee	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  008f3	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _ds1b$[ebp]
  008f8	f3 0f 58 c1	 addss	 xmm0, xmm1
  008fc	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _adj1$[ebp]
  00901	f3 0f 11 45 84	 movss	 DWORD PTR _ds1x$11[ebp], xmm0

; 280  : 					ds1y			= adj1 * ( ( ds1a * dy ) + ds1b * ( key1[1].y - key1->y ) );

  00906	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  0090b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _dy$23[ebp]
  00910	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00915	c1 e0 00	 shl	 eax, 0
  00918	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  0091b	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  0091e	f3 0f 10 4c 01
	0c		 movss	 xmm1, DWORD PTR [ecx+eax+12]
  00924	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  00929	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _ds1b$[ebp]
  0092e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00932	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _adj1$[ebp]
  00937	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _ds1y$9[ebp], xmm0

; 281  : 					ds1z			= adj1 * ( ( ds1a * dz ) + ds1b * ( key1[1].z - key1->z ) );

  0093f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  00944	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _dz$22[ebp]
  00949	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0094e	c1 e0 00	 shl	 eax, 0
  00951	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00954	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  00957	f3 0f 10 4c 01
	10		 movss	 xmm1, DWORD PTR [ecx+eax+16]
  0095d	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00962	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _ds1b$[ebp]
  00967	f3 0f 58 c1	 addss	 xmm0, xmm1
  0096b	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _adj1$[ebp]
  00970	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _ds1z$7[ebp], xmm0

; 282  : 					ds1scale_x	= adj1 * ( ( ds1a * dscale_x ) + ds1b * ( key1[1].scale_x - key1->scale_x ) );

  00978	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  0097d	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _dscale_x$21[ebp]
  00982	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00987	c1 e0 00	 shl	 eax, 0
  0098a	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  0098d	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  00990	f3 0f 10 4c 01
	20		 movss	 xmm1, DWORD PTR [ecx+eax+32]
  00996	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  0099b	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _ds1b$[ebp]
  009a0	f3 0f 58 c1	 addss	 xmm0, xmm1
  009a4	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _adj1$[ebp]
  009a9	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _ds1scale_x$5[ebp], xmm0

; 283  : 					ds1scale_y	= adj1 * ( ( ds1a * dscale_y ) + ds1b * ( key1[1].scale_y - key1->scale_y ) );

  009b1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  009b6	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR _dscale_y$20[ebp]
  009bb	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  009c0	c1 e0 00	 shl	 eax, 0
  009c3	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  009c6	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  009c9	f3 0f 10 4c 01
	24		 movss	 xmm1, DWORD PTR [ecx+eax+36]
  009cf	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  009d4	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _ds1b$[ebp]
  009d9	f3 0f 58 c1	 addss	 xmm0, xmm1
  009dd	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _adj1$[ebp]
  009e2	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _ds1scale_y$3[ebp], xmm0

; 284  : 					ds1scale_z	= adj1 * ( ( ds1a * dscale_z ) + ds1b * ( key1[1].scale_z - key1->scale_z ) );

  009ea	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _ds1a$[ebp]
  009ef	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _dscale_z$19[ebp]
  009f4	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  009f9	c1 e0 00	 shl	 eax, 0
  009fc	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  009ff	8b 55 f8	 mov	 edx, DWORD PTR _key1$[ebp]
  00a02	f3 0f 10 4c 01
	28		 movss	 xmm1, DWORD PTR [ecx+eax+40]
  00a08	f3 0f 5c 4a 28	 subss	 xmm1, DWORD PTR [edx+40]
  00a0d	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _ds1b$[ebp]
  00a12	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a16	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _adj1$[ebp]
  00a1b	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _ds1scale_z$1[ebp], xmm0
$LN14@calculate_:

; 285  : 				}
; 286  : 	
; 287  : 				result->heading	= key0->heading * h1 + key1->heading * h2 + dd0heading * h3 + ds1heading * h4;

  00a23	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00a26	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00a2b	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h1$[ebp]
  00a30	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00a33	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  00a38	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _h2$[ebp]
  00a3d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a41	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR _dd0heading$18[ebp]
  00a46	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _h3$[ebp]
  00a4b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a4f	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _ds1heading$17[ebp]
  00a54	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _h4$[ebp]
  00a59	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a5d	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00a60	f3 0f 11 42 14	 movss	 DWORD PTR [edx+20], xmm0

; 288  : 				result->pitch		= key0->pitch * h1 + key1->pitch * h2 + dd0pitch * h3 + ds1pitch * h4;

  00a65	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00a68	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00a6d	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h1$[ebp]
  00a72	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00a75	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00a7a	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _h2$[ebp]
  00a7f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a83	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _dd0pitch$16[ebp]
  00a88	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _h3$[ebp]
  00a8d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a91	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _ds1pitch$15[ebp]
  00a96	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _h4$[ebp]
  00a9b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a9f	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00aa2	f3 0f 11 42 18	 movss	 DWORD PTR [edx+24], xmm0

; 289  : 				result->roll		= key0->roll * h1 + key1->roll * h2 + dd0roll * h3 + ds1roll * h4;

  00aa7	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00aaa	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00aaf	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h1$[ebp]
  00ab4	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00ab7	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00abc	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _h2$[ebp]
  00ac1	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ac5	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _dd0roll$14[ebp]
  00aca	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _h3$[ebp]
  00acf	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ad3	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _ds1roll$13[ebp]
  00ad8	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _h4$[ebp]
  00add	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ae1	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00ae4	f3 0f 11 42 1c	 movss	 DWORD PTR [edx+28], xmm0

; 290  : 				result->x			= key0->x * h1 + key1->x * h2 + dd0x * h3 + ds1x * h4;

  00ae9	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00aec	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00af1	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h1$[ebp]
  00af6	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00af9	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00afe	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _h2$[ebp]
  00b03	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b07	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _dd0x$12[ebp]
  00b0c	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _h3$[ebp]
  00b11	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b15	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _ds1x$11[ebp]
  00b1a	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _h4$[ebp]
  00b1f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b23	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00b26	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 291  : 				result->y			= key0->y * h1 + key1->y * h2 + dd0y * h3 + ds1y * h4;

  00b2b	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00b2e	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00b33	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h1$[ebp]
  00b38	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00b3b	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  00b40	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _h2$[ebp]
  00b45	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b49	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR _dd0y$10[ebp]
  00b4e	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _h3$[ebp]
  00b53	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b57	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR _ds1y$9[ebp]
  00b5f	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _h4$[ebp]
  00b64	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b68	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00b6b	f3 0f 11 42 0c	 movss	 DWORD PTR [edx+12], xmm0

; 292  : 				result->z			= key0->z * h1 + key1->z * h2 + dd0z * h3 + ds1z * h4;

  00b70	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00b73	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00b78	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h1$[ebp]
  00b7d	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00b80	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  00b85	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _h2$[ebp]
  00b8a	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b8e	f3 0f 10 8d 78
	ff ff ff	 movss	 xmm1, DWORD PTR _dd0z$8[ebp]
  00b96	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _h3$[ebp]
  00b9b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b9f	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _ds1z$7[ebp]
  00ba7	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _h4$[ebp]
  00bac	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bb0	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00bb3	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 293  : 				result->scale_x	= key0->scale_x * h1 + key1->scale_x * h2 + dd0scale_x * h3 + ds1scale_x * h4;

  00bb8	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00bbb	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00bc0	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h1$[ebp]
  00bc5	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00bc8	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00bcd	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _h2$[ebp]
  00bd2	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bd6	f3 0f 10 8d 70
	ff ff ff	 movss	 xmm1, DWORD PTR _dd0scale_x$6[ebp]
  00bde	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _h3$[ebp]
  00be3	f3 0f 58 c1	 addss	 xmm0, xmm1
  00be7	f3 0f 10 8d 6c
	ff ff ff	 movss	 xmm1, DWORD PTR _ds1scale_x$5[ebp]
  00bef	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _h4$[ebp]
  00bf4	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bf8	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00bfb	f3 0f 11 42 20	 movss	 DWORD PTR [edx+32], xmm0

; 294  : 				result->scale_y	= key0->scale_y * h1 + key1->scale_y * h2 + dd0scale_y * h3 + ds1scale_y * h4;

  00c00	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00c03	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00c08	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h1$[ebp]
  00c0d	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00c10	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  00c15	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _h2$[ebp]
  00c1a	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c1e	f3 0f 10 8d 68
	ff ff ff	 movss	 xmm1, DWORD PTR _dd0scale_y$4[ebp]
  00c26	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _h3$[ebp]
  00c2b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c2f	f3 0f 10 8d 64
	ff ff ff	 movss	 xmm1, DWORD PTR _ds1scale_y$3[ebp]
  00c37	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _h4$[ebp]
  00c3c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c40	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00c43	f3 0f 11 42 24	 movss	 DWORD PTR [edx+36], xmm0

; 295  : 				result->scale_z	= key0->scale_z * h1 + key1->scale_z * h2 + dd0scale_z * h3 + ds1scale_z * h4;

  00c48	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00c4b	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  00c50	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h1$[ebp]
  00c55	8b 4d f8	 mov	 ecx, DWORD PTR _key1$[ebp]
  00c58	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  00c5d	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _h2$[ebp]
  00c62	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c66	f3 0f 10 8d 60
	ff ff ff	 movss	 xmm1, DWORD PTR _dd0scale_z$2[ebp]
  00c6e	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _h3$[ebp]
  00c73	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c77	f3 0f 10 8d 5c
	ff ff ff	 movss	 xmm1, DWORD PTR _ds1scale_z$1[ebp]
  00c7f	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _h4$[ebp]
  00c84	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c88	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00c8b	f3 0f 11 42 28	 movss	 DWORD PTR [edx+40], xmm0

; 296  : 			}
; 297  : 			else

  00c90	e9 ea 00 00 00	 jmp	 $LN10@calculate_
$LN9@calculate_:

; 298  : 			{
; 299  : 	
; 300  : 				result->heading	= key0->heading + t * dheading;

  00c95	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  00c9a	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _dheading$27[ebp]
  00c9f	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00ca2	f3 0f 58 40 14	 addss	 xmm0, DWORD PTR [eax+20]
  00ca7	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00caa	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 301  : 				result->pitch		= key0->pitch + t * dpitch;

  00caf	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  00cb4	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _dpitch$26[ebp]
  00cb9	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00cbc	f3 0f 58 40 18	 addss	 xmm0, DWORD PTR [eax+24]
  00cc1	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00cc4	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 302  : 				result->roll		= key0->roll + t * droll;

  00cc9	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  00cce	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _droll$25[ebp]
  00cd3	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00cd6	f3 0f 58 40 1c	 addss	 xmm0, DWORD PTR [eax+28]
  00cdb	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00cde	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 303  : 				result->x			= key0->x + t * dx;

  00ce3	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  00ce8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _dx$24[ebp]
  00ced	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00cf0	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00cf5	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00cf8	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 304  : 				result->y			= key0->y + t * dy;

  00cfd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  00d02	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _dy$23[ebp]
  00d07	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00d0a	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  00d0f	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00d12	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 305  : 				result->z			= key0->z + t * dz;

  00d17	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  00d1c	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _dz$22[ebp]
  00d21	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00d24	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  00d29	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00d2c	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 306  : 				result->scale_x	= key0->scale_x + t * dscale_x;

  00d31	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  00d36	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _dscale_x$21[ebp]
  00d3b	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00d3e	f3 0f 58 40 20	 addss	 xmm0, DWORD PTR [eax+32]
  00d43	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00d46	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 307  : 				result->scale_y	= key0->scale_y + t * dscale_y;

  00d4b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  00d50	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR _dscale_y$20[ebp]
  00d55	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00d58	f3 0f 58 40 24	 addss	 xmm0, DWORD PTR [eax+36]
  00d5d	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00d60	f3 0f 11 41 24	 movss	 DWORD PTR [ecx+36], xmm0

; 308  : 				result->scale_z	= key0->scale_z + t * dscale_z;

  00d65	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  00d6a	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _dscale_z$19[ebp]
  00d6f	8b 45 fc	 mov	 eax, DWORD PTR _key0$[ebp]
  00d72	f3 0f 58 40 28	 addss	 xmm0, DWORD PTR [eax+40]
  00d77	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00d7a	f3 0f 11 41 28	 movss	 DWORD PTR [ecx+40], xmm0
$LN10@calculate_:

; 309  : 			}
; 310  : 		}
; 311  : 	}
; 312  : }

  00d7f	5f		 pop	 edi
  00d80	5e		 pop	 esi
  00d81	5b		 pop	 ebx
  00d82	8b e5		 mov	 esp, ebp
  00d84	5d		 pop	 ebp
  00d85	c2 10 00	 ret	 16			; 00000010H
?calculate_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_KEYFRAME@@0M@Z ENDP ; calculate_keyframe
_TEXT	ENDS
END
