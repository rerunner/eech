; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\block.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?graphics_hatch_pattern@@3PAIA			; graphics_hatch_pattern
_DATA	SEGMENT
?graphics_hatch_pattern@@3PAIA DD 0aaaaaaaaH		; graphics_hatch_pattern
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
	DD	0aaaaaaaaH
	DD	055555555H
_DATA	ENDS
PUBLIC	?set_hatched_pattern@@YGXPAI@Z			; set_hatched_pattern
PUBLIC	?set_hatched_block@@YGXHHHHUREAL_COLOUR@@@Z	; set_hatched_block
PUBLIC	?__LINE__Var@?0??set_hatched_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA ; `set_hatched_block'::`1'::__LINE__Var
PUBLIC	??_C@_0DG@KFANNMHJ@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0O@IILHNAKB@active_screen@		; `string'
PUBLIC	??_C@_08BJEGMIO@x2?5?$DO?$DN?5x1@		; `string'
PUBLIC	??_C@_08BHCNBCPK@y2?5?$DO?$DN?5y1@		; `string'
EXTRN	_memcpy:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?active_screen_red_mask@@3HA:DWORD		; active_screen_red_mask
EXTRN	?active_screen_red_shift@@3HA:DWORD		; active_screen_red_shift
EXTRN	?active_screen_green_mask@@3HA:DWORD		; active_screen_green_mask
EXTRN	?active_screen_green_shift@@3HA:DWORD		; active_screen_green_shift
EXTRN	?active_screen_blue_mask@@3HA:DWORD		; active_screen_blue_mask
EXTRN	?active_screen_blue_shift@@3HA:DWORD		; active_screen_blue_shift
EXTRN	?active_screen_alpha_mask@@3HA:DWORD		; active_screen_alpha_mask
EXTRN	?active_screen_alpha_shift@@3HA:DWORD		; active_screen_alpha_shift
;	COMDAT ??_C@_08BHCNBCPK@y2?5?$DO?$DN?5y1@
CONST	SEGMENT
??_C@_08BHCNBCPK@y2?5?$DO?$DN?5y1@ DB 'y2 >= y1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJEGMIO@x2?5?$DO?$DN?5x1@
CONST	SEGMENT
??_C@_08BJEGMIO@x2?5?$DO?$DN?5x1@ DB 'x2 >= x1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IILHNAKB@active_screen@
CONST	SEGMENT
??_C@_0O@IILHNAKB@active_screen@ DB 'active_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KFANNMHJ@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DG@KFANNMHJ@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\block.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_hatched_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_hatched_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA DD 071H ; `set_hatched_block'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\block.c
;	COMDAT ?set_hatched_block@@YGXHHHHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_line_ptr$1 = -40					; size = 4
_line_hatch_pattern$2 = -36				; size = 4
_screen_colour$3 = -32					; size = 4
_line_ptr$4 = -28					; size = 4
_line_hatch_pattern$5 = -24				; size = 4
_screen_colour$6 = -20					; size = 2
_screen_ptr$ = -16					; size = 4
_screen_pitch$ = -12					; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_colour$ = 24						; size = 4
?set_hatched_block@@YGXHHHHUREAL_COLOUR@@@Z PROC	; set_hatched_block, COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 114  : 
; 115  : 	int
; 116  : 		x,
; 117  : 		y,
; 118  : 		screen_pitch;
; 119  : 
; 120  : 	unsigned char
; 121  : 		*screen_ptr;
; 122  : 
; 123  : 	ASSERT ( active_screen );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00010	75 18		 jne	 SHORT $LN14@set_hatche
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_hatched_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA
  00017	83 c0 0a	 add	 eax, 10			; 0000000aH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KFANNMHJ@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@set_hatche:

; 124  : 	ASSERT ( x2 >= x1 );

  0002a	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  0002d	3b 45 08	 cmp	 eax, DWORD PTR _x1$[ebp]
  00030	7d 18		 jge	 SHORT $LN15@set_hatche
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_hatched_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA
  00037	83 c0 0b	 add	 eax, 11			; 0000000bH
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KFANNMHJ@c?3?2users?2nhv90?2projects?2eech?2mo@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_08BJEGMIO@x2?5?$DO?$DN?5x1@
  00045	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@set_hatche:

; 125  : 	ASSERT ( y2 >= y1 );

  0004a	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  0004d	3b 45 0c	 cmp	 eax, DWORD PTR _y1$[ebp]
  00050	7d 18		 jge	 SHORT $LN16@set_hatche
  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_hatched_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	50		 push	 eax
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KFANNMHJ@c?3?2users?2nhv90?2projects?2eech?2mo@
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_08BHCNBCPK@y2?5?$DO?$DN?5y1@
  00065	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN16@set_hatche:

; 126  : 
; 127  : 	screen_ptr = get_screen_data ( active_screen );

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00075	89 45 f0	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 128  : 	screen_pitch = get_screen_pitch ( active_screen );

  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00083	89 45 f4	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 129  : 	screen_ptr += ( screen_pitch * y1 );

  00086	8b 45 f4	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00089	0f af 45 0c	 imul	 eax, DWORD PTR _y1$[ebp]
  0008d	03 45 f0	 add	 eax, DWORD PTR _screen_ptr$[ebp]
  00090	89 45 f0	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 130  : 
; 131  : 	if ( active_screen->pixel_length <= 16 )

  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00098	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0009c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0009f	0f 8f df 00 00
	00		 jg	 $LN17@set_hatche

; 132  : 	{
; 133  : 	
; 134  : 		USHORT
; 135  : 			screen_colour;
; 136  : 	
; 137  : 		screen_colour = get_packed_colour ( colour );

  000a5	0f b6 45 1a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  000a9	c1 e0 18	 shl	 eax, 24			; 00000018H
  000ac	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  000b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  000b8	d3 e8		 shr	 eax, cl
  000ba	0f b6 55 19	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  000be	c1 e2 18	 shl	 edx, 24			; 00000018H
  000c1	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  000c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  000cd	d3 ea		 shr	 edx, cl
  000cf	0b c2		 or	 eax, edx
  000d1	0f b6 55 18	 movzx	 edx, BYTE PTR _colour$[ebp]
  000d5	c1 e2 18	 shl	 edx, 24			; 00000018H
  000d8	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  000e4	d3 ea		 shr	 edx, cl
  000e6	0b c2		 or	 eax, edx
  000e8	0f b6 55 1b	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  000ec	c1 e2 18	 shl	 edx, 24			; 00000018H
  000ef	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  000f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  000fb	d3 ea		 shr	 edx, cl
  000fd	0b c2		 or	 eax, edx
  000ff	66 89 45 ec	 mov	 WORD PTR _screen_colour$6[ebp], ax

; 138  : 
; 139  : 		for ( y = y1; y < y2; y++ )

  00103	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  00106	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
  00109	eb 09		 jmp	 SHORT $LN4@set_hatche
$LN2@set_hatche:
  0010b	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0010e	83 c0 01	 add	 eax, 1
  00111	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN4@set_hatche:
  00114	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00117	3b 45 14	 cmp	 eax, DWORD PTR _y2$[ebp]
  0011a	7d 63		 jge	 SHORT $LN3@set_hatche

; 140  : 		{
; 141  : 	
; 142  : 			unsigned int
; 143  : 				line_hatch_pattern;
; 144  : 	
; 145  : 			USHORT
; 146  : 				*line_ptr;
; 147  : 	
; 148  : 			line_hatch_pattern = graphics_hatch_pattern[ ( y & 0x1f ) ];

  0011c	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0011f	83 e0 1f	 and	 eax, 31			; 0000001fH
  00122	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00129	89 4d e8	 mov	 DWORD PTR _line_hatch_pattern$5[ebp], ecx

; 149  : 	
; 150  : 			line_ptr = ( USHORT * ) screen_ptr;

  0012c	8b 45 f0	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  0012f	89 45 e4	 mov	 DWORD PTR _line_ptr$4[ebp], eax

; 151  : 	
; 152  : 			for ( x = x1; x < x2; x++ )

  00132	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00135	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
  00138	eb 09		 jmp	 SHORT $LN7@set_hatche
$LN5@set_hatche:
  0013a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0013d	83 c0 01	 add	 eax, 1
  00140	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@set_hatche:
  00143	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00146	3b 45 10	 cmp	 eax, DWORD PTR _x2$[ebp]
  00149	7d 29		 jge	 SHORT $LN6@set_hatche

; 153  : 			{
; 154  : 	
; 155  : 				if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & line_hatch_pattern )

  0014b	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0014e	83 e0 1f	 and	 eax, 31			; 0000001fH
  00151	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00156	2b c8		 sub	 ecx, eax
  00158	ba 01 00 00 00	 mov	 edx, 1
  0015d	d3 e2		 shl	 edx, cl
  0015f	23 55 e8	 and	 edx, DWORD PTR _line_hatch_pattern$5[ebp]
  00162	74 0e		 je	 SHORT $LN19@set_hatche

; 156  : 				{
; 157  : 	
; 158  : 					line_ptr[x] = screen_colour;

  00164	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00167	8b 4d e4	 mov	 ecx, DWORD PTR _line_ptr$4[ebp]
  0016a	66 8b 55 ec	 mov	 dx, WORD PTR _screen_colour$6[ebp]
  0016e	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN19@set_hatche:

; 159  : 				}
; 160  : 			}

  00172	eb c6		 jmp	 SHORT $LN5@set_hatche
$LN6@set_hatche:

; 161  : 	
; 162  : 			screen_ptr += screen_pitch;

  00174	8b 45 f0	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  00177	03 45 f4	 add	 eax, DWORD PTR _screen_pitch$[ebp]
  0017a	89 45 f0	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 163  : 		}

  0017d	eb 8c		 jmp	 SHORT $LN2@set_hatche
$LN3@set_hatche:

; 164  : 	}
; 165  : 	else

  0017f	e9 80 00 00 00	 jmp	 $LN1@set_hatche
$LN17@set_hatche:

; 166  : 	{
; 167  : 	
; 168  : 		ULONG
; 169  : 			screen_colour;
; 170  : 	
; 171  : 		screen_colour = colour.colour;

  00184	8b 45 18	 mov	 eax, DWORD PTR _colour$[ebp]
  00187	89 45 e0	 mov	 DWORD PTR _screen_colour$3[ebp], eax

; 172  : 
; 173  : 		for ( y = y1; y < y2; y++ )

  0018a	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  0018d	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
  00190	eb 09		 jmp	 SHORT $LN10@set_hatche
$LN8@set_hatche:
  00192	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00195	83 c0 01	 add	 eax, 1
  00198	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN10@set_hatche:
  0019b	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0019e	3b 45 14	 cmp	 eax, DWORD PTR _y2$[ebp]
  001a1	7d 61		 jge	 SHORT $LN1@set_hatche

; 174  : 		{
; 175  : 	
; 176  : 			unsigned int
; 177  : 				line_hatch_pattern;
; 178  : 	
; 179  : 			ULONG
; 180  : 				*line_ptr;
; 181  : 	
; 182  : 			line_hatch_pattern = graphics_hatch_pattern[ ( y & 0x1f ) ];

  001a3	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001a6	83 e0 1f	 and	 eax, 31			; 0000001fH
  001a9	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  001b0	89 4d dc	 mov	 DWORD PTR _line_hatch_pattern$2[ebp], ecx

; 183  : 	
; 184  : 			line_ptr = ( ULONG * ) screen_ptr;

  001b3	8b 45 f0	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  001b6	89 45 d8	 mov	 DWORD PTR _line_ptr$1[ebp], eax

; 185  : 	
; 186  : 			for ( x = x1; x < x2; x++ )

  001b9	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  001bc	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
  001bf	eb 09		 jmp	 SHORT $LN13@set_hatche
$LN11@set_hatche:
  001c1	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001c4	83 c0 01	 add	 eax, 1
  001c7	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN13@set_hatche:
  001ca	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001cd	3b 45 10	 cmp	 eax, DWORD PTR _x2$[ebp]
  001d0	7d 27		 jge	 SHORT $LN12@set_hatche

; 187  : 			{
; 188  : 	
; 189  : 				if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & line_hatch_pattern )

  001d2	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001d5	83 e0 1f	 and	 eax, 31			; 0000001fH
  001d8	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  001dd	2b c8		 sub	 ecx, eax
  001df	ba 01 00 00 00	 mov	 edx, 1
  001e4	d3 e2		 shl	 edx, cl
  001e6	23 55 dc	 and	 edx, DWORD PTR _line_hatch_pattern$2[ebp]
  001e9	74 0c		 je	 SHORT $LN20@set_hatche

; 190  : 				{
; 191  : 	
; 192  : 					line_ptr[x] = screen_colour;

  001eb	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001ee	8b 4d d8	 mov	 ecx, DWORD PTR _line_ptr$1[ebp]
  001f1	8b 55 e0	 mov	 edx, DWORD PTR _screen_colour$3[ebp]
  001f4	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN20@set_hatche:

; 193  : 				}
; 194  : 			}

  001f7	eb c8		 jmp	 SHORT $LN11@set_hatche
$LN12@set_hatche:

; 195  : 	
; 196  : 			screen_ptr += screen_pitch;

  001f9	8b 45 f0	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  001fc	03 45 f4	 add	 eax, DWORD PTR _screen_pitch$[ebp]
  001ff	89 45 f0	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 197  : 		}

  00202	eb 8e		 jmp	 SHORT $LN8@set_hatche
$LN1@set_hatche:

; 198  : 	}
; 199  : }

  00204	5f		 pop	 edi
  00205	5e		 pop	 esi
  00206	5b		 pop	 ebx
  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c2 14 00	 ret	 20			; 00000014H
?set_hatched_block@@YGXHHHHUREAL_COLOUR@@@Z ENDP	; set_hatched_block
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\block.c
;	COMDAT ?set_hatched_pattern@@YGXPAI@Z
_TEXT	SEGMENT
_pattern$ = 8						; size = 4
?set_hatched_pattern@@YGXPAI@Z PROC			; set_hatched_pattern, COMDAT

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 104  : 
; 105  : 	memcpy ( graphics_hatch_pattern, pattern, ( sizeof ( int ) * 32 ) );

  00009	68 80 00 00 00	 push	 128			; 00000080H
  0000e	8b 45 08	 mov	 eax, DWORD PTR _pattern$[ebp]
  00011	50		 push	 eax
  00012	68 00 00 00 00	 push	 OFFSET ?graphics_hatch_pattern@@3PAIA ; graphics_hatch_pattern
  00017	e8 00 00 00 00	 call	 _memcpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?set_hatched_pattern@@YGXPAI@Z ENDP			; set_hatched_pattern
_TEXT	ENDS
END
