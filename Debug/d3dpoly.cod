; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\d3dpoly.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?number_of_d3d_triangle_primitives_drawn@@3HA	; number_of_d3d_triangle_primitives_drawn
PUBLIC	?d3d_texture_batching_vertex_maximum@@3HA	; d3d_texture_batching_vertex_maximum
PUBLIC	?number_of_d3d_line_primitives_drawn@@3HA	; number_of_d3d_line_primitives_drawn
PUBLIC	?number_of_d3d_point_primitives_drawn@@3HA	; number_of_d3d_point_primitives_drawn
_BSS	SEGMENT
?number_of_d3d_triangle_primitives_drawn@@3HA DD 01H DUP (?) ; number_of_d3d_triangle_primitives_drawn
?d3d_texture_batching_vertex_maximum@@3HA DD 01H DUP (?) ; d3d_texture_batching_vertex_maximum
?number_of_d3d_line_primitives_drawn@@3HA DD 01H DUP (?) ; number_of_d3d_line_primitives_drawn
?number_of_d3d_point_primitives_drawn@@3HA DD 01H DUP (?) ; number_of_d3d_point_primitives_drawn
_BSS	ENDS
PUBLIC	?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z	; draw_fan_primitive
PUBLIC	?draw_strip_primitive@@YGXHPAU_D3DTLVERTEX@@@Z	; draw_strip_primitive
PUBLIC	?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z	; draw_line_primitive
PUBLIC	?draw_special_quad_quad_primitive@@YGXH@Z	; draw_special_quad_quad_primitive
PUBLIC	?draw_point_list_primitive@@YGXH@Z		; draw_point_list_primitive
PUBLIC	?get_d3d_raw_primitive_indices_address@@YGPAGXZ	; get_d3d_raw_primitive_indices_address
PUBLIC	?set_d3d_texture_batching@@YGXH@Z		; set_d3d_texture_batching
PUBLIC	?reset_primitives@@YGXXZ			; reset_primitives
PUBLIC	?flush_triangle_primitives@@YGXXZ		; flush_triangle_primitives
PUBLIC	?flush_line_primitives@@YGXXZ			; flush_line_primitives
PUBLIC	?finalise_primitives@@YGXXZ			; finalise_primitives
PUBLIC	?add_triangle_fan_primitive_to_buffer@@YGXHHPAE@Z ; add_triangle_fan_primitive_to_buffer
PUBLIC	?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ; force_flush_triangle_buffer
PUBLIC	?force_flush_line_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ; force_flush_line_buffer
PUBLIC	?check_primitive_vertices@@YGXPAU_D3DTLVERTEX@@H@Z ; check_primitive_vertices
PUBLIC	?__LINE__Var@?0??flush_triangle_primitives@@YGXXZ@4JA ; `flush_triangle_primitives'::`1'::__LINE__Var
PUBLIC	??_C@_0DI@CADEDAOC@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BA@PELMKNBF@d3d_in_3d_scene@		; `string'
PUBLIC	?__LINE__Var@?0??get_d3d_raw_primitive_indices_address@@YGPAGXZ@4JA ; `get_d3d_raw_primitive_indices_address'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@CFJNICEL@d3d?4triangle_buffer@	; `string'
PUBLIC	?__LINE__Var@?0??draw_point_list_primitive@@YGXH@Z@4JA ; `draw_point_list_primitive'::`1'::__LINE__Var
PUBLIC	??_C@_0BJ@OIJIBANF@number_of_vertices?5?$DM?5256@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_special_quad_quad_primitive@@YGXH@Z@4JA ; `draw_special_quad_quad_primitive'::`1'::__LINE__Var
PUBLIC	??_C@_0BI@MDHKONDO@number_of_vertices?5?$DN?$DN?59@ ; `string'
PUBLIC	??_C@_0BG@MAEJJNFL@Incorrect?5Z?5value?3?5?$CFf@ ; `string'
PUBLIC	??_C@_0M@HLPJGOHM@Error?5x?3?5?$CFf@		; `string'
PUBLIC	??_C@_0M@LAKFLNNJ@Error?5y?3?5?$CFf@		; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@407e000000000000
PUBLIC	__real@4084000000000000
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?set_d3d_int_state_no_flush@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state_no_flush
EXTRN	?reset_deferred_state_changes@@YGXXZ:PROC	; reset_deferred_state_changes
EXTRN	?assert_check_texture_match@@YGXXZ:PROC		; assert_check_texture_match
EXTRN	?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z:PROC ; f3d_vertex_unlock
EXTRN	?f3d_draw_vb@@YGXIPAUIDirect3DVertexBuffer7@@IIPAGI@Z:PROC ; f3d_draw_vb
EXTRN	?f3d_draw@@YGXIPAUIDirect3DVertexBuffer7@@II@Z:PROC ; f3d_draw
EXTRN	?d3d@@3UDIRECT_3D_VECTORS@@A:BYTE		; d3d
EXTRN	?d3d_in_3d_scene@@3HA:DWORD			; d3d_in_3d_scene
EXTRN	?number_of_d3d_triangles_drawn@@3HA:DWORD	; number_of_d3d_triangles_drawn
EXTRN	?number_of_d3d_lines_drawn@@3HA:DWORD		; number_of_d3d_lines_drawn
EXTRN	?d3d_in_order_rendering@@3HA:DWORD		; d3d_in_order_rendering
EXTRN	__fltused:DWORD
;	COMDAT __real@4084000000000000
CONST	SEGMENT
__real@4084000000000000 DQ 04084000000000000r	; 640
CONST	ENDS
;	COMDAT __real@407e000000000000
CONST	SEGMENT
__real@407e000000000000 DQ 0407e000000000000r	; 480
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0M@LAKFLNNJ@Error?5y?3?5?$CFf@
CONST	SEGMENT
??_C@_0M@LAKFLNNJ@Error?5y?3?5?$CFf@ DB 'Error y: %f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLPJGOHM@Error?5x?3?5?$CFf@
CONST	SEGMENT
??_C@_0M@HLPJGOHM@Error?5x?3?5?$CFf@ DB 'Error x: %f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MAEJJNFL@Incorrect?5Z?5value?3?5?$CFf@
CONST	SEGMENT
??_C@_0BG@MAEJJNFL@Incorrect?5Z?5value?3?5?$CFf@ DB 'Incorrect Z value: %'
	DB	'f', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MDHKONDO@number_of_vertices?5?$DN?$DN?59@
CONST	SEGMENT
??_C@_0BI@MDHKONDO@number_of_vertices?5?$DN?$DN?59@ DB 'number_of_vertice'
	DB	's == 9', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_special_quad_quad_primitive@@YGXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_special_quad_quad_primitive@@YGXH@Z@4JA DD 0232H ; `draw_special_quad_quad_primitive'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BJ@OIJIBANF@number_of_vertices?5?$DM?5256@
CONST	SEGMENT
??_C@_0BJ@OIJIBANF@number_of_vertices?5?$DM?5256@ DB 'number_of_vertices '
	DB	'< 256', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_point_list_primitive@@YGXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_point_list_primitive@@YGXH@Z@4JA DD 01f5H ; `draw_point_list_primitive'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BE@CFJNICEL@d3d?4triangle_buffer@
CONST	SEGMENT
??_C@_0BE@CFJNICEL@d3d?4triangle_buffer@ DB 'd3d.triangle_buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_d3d_raw_primitive_indices_address@@YGPAGXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_d3d_raw_primitive_indices_address@@YGPAGXZ@4JA DD 0161H ; `get_d3d_raw_primitive_indices_address'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@PELMKNBF@d3d_in_3d_scene@
CONST	SEGMENT
??_C@_0BA@PELMKNBF@d3d_in_3d_scene@ DB 'd3d_in_3d_scene', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@CADEDAOC@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DI@CADEDAOC@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\d3dpoly.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??flush_triangle_primitives@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??flush_triangle_primitives@@YGXXZ@4JA DD 0a5H ; `flush_triangle_primitives'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?check_primitive_vertices@@YGXPAU_D3DTLVERTEX@@H@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_base$ = 8						; size = 4
_number_of_vertices$ = 12				; size = 4
?check_primitive_vertices@@YGXPAU_D3DTLVERTEX@@H@Z PROC	; check_primitive_vertices, COMDAT

; 614  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 615  : 
; 616  : 	int
; 617  : 		count;
; 618  : 
; 619  : 	for ( count = 0; count < number_of_vertices; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@check_prim
$LN2@check_prim:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@check_prim:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR _number_of_vertices$[ebp]
  00021	0f 8d f1 00 00
	00		 jge	 $LN3@check_prim

; 620  : 	{
; 621  : 
; 622  : 		if ( ( base[count].sz < 0 ) || ( base[count].sz > 1 ) )

  00027	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0002a	c1 e0 05	 shl	 eax, 5
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _base$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	0f 2f 44 01 08	 comiss	 xmm0, DWORD PTR [ecx+eax+8]
  00038	77 18		 ja	 SHORT $LN6@check_prim
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003d	c1 e0 05	 shl	 eax, 5
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _base$[ebp]
  00043	f3 0f 10 44 01
	08		 movss	 xmm0, DWORD PTR [ecx+eax+8]
  00049	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00050	76 24		 jbe	 SHORT $LN5@check_prim
$LN6@check_prim:

; 623  : 		{
; 624  : 
; 625  : 			debug_log ( "Incorrect Z value: %f", base[count].sz );

  00052	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00055	c1 e0 05	 shl	 eax, 5
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _base$[ebp]
  0005b	f3 0f 5a 44 01
	08		 cvtss2sd xmm0, DWORD PTR [ecx+eax+8]
  00061	83 ec 08	 sub	 esp, 8
  00064	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MAEJJNFL@Incorrect?5Z?5value?3?5?$CFf@
  0006e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@check_prim:

; 626  : 		}
; 627  : 
; 628  : 		if ( ( base[count].sx < 0 ) || ( base[count].sx >= 640.0 ) )

  00076	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00079	c1 e0 05	 shl	 eax, 5
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _base$[ebp]
  0007f	0f 57 c0	 xorps	 xmm0, xmm0
  00082	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  00086	77 18		 ja	 SHORT $LN8@check_prim
  00088	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0008b	c1 e0 05	 shl	 eax, 5
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _base$[ebp]
  00091	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  00096	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4084000000000000
  0009e	72 23		 jb	 SHORT $LN7@check_prim
$LN8@check_prim:

; 629  : 		{
; 630  : 
; 631  : 			debug_log ( "Error x: %f", base[count].sx );

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000a3	c1 e0 05	 shl	 eax, 5
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _base$[ebp]
  000a9	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  000ae	83 ec 08	 sub	 esp, 8
  000b1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HLPJGOHM@Error?5x?3?5?$CFf@
  000bb	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@check_prim:

; 632  : 		}
; 633  : 
; 634  : 		if ( ( base[count].sy < 0 ) || ( base[count].sy >= 480.0 ) )

  000c3	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000c6	c1 e0 05	 shl	 eax, 5
  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _base$[ebp]
  000cc	0f 57 c0	 xorps	 xmm0, xmm0
  000cf	0f 2f 44 01 04	 comiss	 xmm0, DWORD PTR [ecx+eax+4]
  000d4	77 19		 ja	 SHORT $LN10@check_prim
  000d6	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000d9	c1 e0 05	 shl	 eax, 5
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR _base$[ebp]
  000df	f3 0f 5a 44 01
	04		 cvtss2sd xmm0, DWORD PTR [ecx+eax+4]
  000e5	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@407e000000000000
  000ed	72 24		 jb	 SHORT $LN9@check_prim
$LN10@check_prim:

; 635  : 		{
; 636  : 
; 637  : 			debug_log ( "Error y: %f", base[count].sy );

  000ef	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000f2	c1 e0 05	 shl	 eax, 5
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _base$[ebp]
  000f8	f3 0f 5a 44 01
	04		 cvtss2sd xmm0, DWORD PTR [ecx+eax+4]
  000fe	83 ec 08	 sub	 esp, 8
  00101	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LAKFLNNJ@Error?5y?3?5?$CFf@
  0010b	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@check_prim:

; 638  : 		}
; 639  : 	}

  00113	e9 fa fe ff ff	 jmp	 $LN2@check_prim
$LN3@check_prim:

; 640  : 	/*
; 641  : 	int
; 642  : 		degenerate,
; 643  : 		count;
; 644  : 
; 645  : 	degenerate = FALSE;
; 646  : 
; 647  : 	for ( count = 0; count < ( number_of_vertices - 1 ); count++ )
; 648  : 	{
; 649  : 
; 650  : 		int
; 651  : 			valuex1,
; 652  : 			valuex2,
; 653  : 			valuey1,
; 654  : 			valuey2;
; 655  : 
; 656  : 		//
; 657  : 		// Check the two vertices screen coordinates
; 658  : 		//
; 659  : 
; 660  : 		convert_float_to_int ( base[count].sx, &valuex1 );
; 661  : 		convert_float_to_int ( base[count + 1].sx, &valuex2 );
; 662  : 		convert_float_to_int ( base[count].sy, &valuey1 );
; 663  : 		convert_float_to_int ( base[count + 1].sy, &valuey2 );
; 664  : 
; 665  : 		if (	( valuex1 == valuex2 ) &&
; 666  : 				( valuey1 == valuey2 ) )
; 667  : 		{
; 668  : 
; 669  : 			degenerate = TRUE;
; 670  : 
; 671  : 			break;
; 672  : 		}
; 673  : 	}
; 674  : 
; 675  : 	if ( degenerate )
; 676  : 	{
; 677  : 
; 678  : 		number_of_d3d_degenerate_triangles++;
; 679  : 
; 680  : 		debug_log ( "Degenerate polygon, number of vertices: %d, vertices %d and %d", number_of_vertices, count, count + 1 );
; 681  : 
; 682  : 		for ( count = 0; count < number_of_vertices; count++ )
; 683  : 		{
; 684  : 
; 685  : 			debug_log ( "%f, %f", base[count].sx, base[count].sy );
; 686  : 		}
; 687  : 	}
; 688  : 
; 689  : 	for ( count = 0; count < number_of_vertices; count++ )
; 690  : 	{
; 691  : 
; 692  : 		debug_log ( "(%f,%f) (%f,%f) (%f)",
; 693  : 							base[count].sx,
; 694  : 							base[count].sy,
; 695  : 							base[count].tu,
; 696  : 							base[count].tv,
; 697  : 							base[count].sz );
; 698  : 	}
; 699  : 	*/
; 700  : }

  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 08 00	 ret	 8
?check_primitive_vertices@@YGXPAU_D3DTLVERTEX@@H@Z ENDP	; check_primitive_vertices
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?force_flush_line_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
?force_flush_line_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z PROC ; force_flush_line_buffer, COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 274  : 
; 275  : 	if ( buffer->vertices_used )

  00009	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0000c	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00010	74 5f		 je	 SHORT $LN2@force_flus

; 276  : 	{
; 277  : 		f3d_vertex_unlock ( buffer->buffer );

  00012	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00015	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_unlock

; 278  : 
; 279  : #if DEBUG_REPORT_PRIMITIVES
; 280  : 		debug_log ( "Drawing line primitive with %d vertices", buffer->vertices_used );
; 281  : #endif
; 282  : 
; 283  : 		//
; 284  : 		// Make sure we're not telling D3D to clip or light
; 285  : 		//
; 286  : 
; 287  : 		set_d3d_int_state_no_flush ( D3DRENDERSTATE_CLIPPING, FALSE );

  0001e	6a 00		 push	 0
  00020	68 88 00 00 00	 push	 136			; 00000088H
  00025	e8 00 00 00 00	 call	 ?set_d3d_int_state_no_flush@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state_no_flush

; 288  : 	
; 289  : 		set_d3d_int_state_no_flush ( D3DRENDERSTATE_LIGHTING, FALSE );

  0002a	6a 00		 push	 0
  0002c	68 89 00 00 00	 push	 137			; 00000089H
  00031	e8 00 00 00 00	 call	 ?set_d3d_int_state_no_flush@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state_no_flush

; 290  : 
; 291  : 		f3d_draw_vb ( D3DPT_LINELIST, buffer->buffer, 0, buffer->vertices_used, (LPWORD) &buffer->indices[0], (DWORD) buffer->indices_index );

  00036	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00039	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003c	51		 push	 ecx
  0003d	ba 02 00 00 00	 mov	 edx, 2
  00042	6b c2 00	 imul	 eax, edx, 0
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00048	8d 54 01 20	 lea	 edx, DWORD PTR [ecx+eax+32]
  0004c	52		 push	 edx
  0004d	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00050	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00053	51		 push	 ecx
  00054	6a 00		 push	 0
  00056	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00059	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0005c	50		 push	 eax
  0005d	6a 02		 push	 2
  0005f	e8 00 00 00 00	 call	 ?f3d_draw_vb@@YGXIPAUIDirect3DVertexBuffer7@@IIPAGI@Z ; f3d_draw_vb

; 292  : 
; 293  : 		number_of_d3d_line_primitives_drawn++;

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_d3d_line_primitives_drawn@@3HA ; number_of_d3d_line_primitives_drawn
  00069	83 c0 01	 add	 eax, 1
  0006c	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_d3d_line_primitives_drawn@@3HA, eax ; number_of_d3d_line_primitives_drawn
$LN2@force_flus:

; 294  : 	}
; 295  : 
; 296  : 	buffer->vertices = NULL;

  00071	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00074	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 297  : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?force_flush_line_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ENDP ; force_flush_line_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z PROC ; force_flush_triangle_buffer, COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 193  : 
; 194  : 	if ( buffer->vertices_used )

  00009	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0000c	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00010	74 5f		 je	 SHORT $LN2@force_flus

; 195  : 	{
; 196  : 		//
; 197  : 		// Unlock the vertex buffer
; 198  : 		//
; 199  : 	
; 200  : 		f3d_vertex_unlock ( buffer->buffer );

  00012	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00015	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_unlock

; 201  : 
; 202  : #if DEBUG_REPORT_PRIMITIVES
; 203  : 		debug_log ( "Drawing triangle primitive with %d vertices", buffer->vertices_used );
; 204  : #endif
; 205  : 	
; 206  : #if DEBUG_ASSESS_VERTEX_CACHES
; 207  : 		assess_vertex_cache_usage ( buffer->indices, buffer->indices_index );
; 208  : #endif
; 209  : 	
; 210  : 		//
; 211  : 		// Make sure we're not telling D3D to clip or light
; 212  : 		//
; 213  : 
; 214  : 		set_d3d_int_state_no_flush ( D3DRENDERSTATE_CLIPPING, FALSE );

  0001e	6a 00		 push	 0
  00020	68 88 00 00 00	 push	 136			; 00000088H
  00025	e8 00 00 00 00	 call	 ?set_d3d_int_state_no_flush@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state_no_flush

; 215  : 	
; 216  : 		set_d3d_int_state_no_flush ( D3DRENDERSTATE_LIGHTING, FALSE );

  0002a	6a 00		 push	 0
  0002c	68 89 00 00 00	 push	 137			; 00000089H
  00031	e8 00 00 00 00	 call	 ?set_d3d_int_state_no_flush@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state_no_flush

; 217  : 
; 218  : //		if ( d3d_texture_batching_vertex_maximum )
; 219  : 		{
; 220  : 
; 221  : //			ASSERT ( render_d3d_state_table[D3DRENDERSTATE_ALPHABLENDENABLE].value == FALSE );
; 222  : 
; 223  : //			set_d3d_current_texture_pointer ( &buffer->texture );
; 224  : 		}
; 225  : 		
; 226  : 		f3d_draw_vb ( D3DPT_TRIANGLELIST, buffer->buffer, 0, buffer->vertices_used, ( LPWORD ) &buffer->indices[0], ( DWORD ) buffer->indices_index );

  00036	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00039	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003c	51		 push	 ecx
  0003d	ba 02 00 00 00	 mov	 edx, 2
  00042	6b c2 00	 imul	 eax, edx, 0
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00048	8d 54 01 20	 lea	 edx, DWORD PTR [ecx+eax+32]
  0004c	52		 push	 edx
  0004d	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00050	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00053	51		 push	 ecx
  00054	6a 00		 push	 0
  00056	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00059	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0005c	50		 push	 eax
  0005d	6a 04		 push	 4
  0005f	e8 00 00 00 00	 call	 ?f3d_draw_vb@@YGXIPAUIDirect3DVertexBuffer7@@IIPAGI@Z ; f3d_draw_vb

; 227  : /*
; 228  : 		if ( d3d_texture_batching_vertex_maximum )
; 229  : 		{
; 230  : 	
; 231  : 			restore_d3d_current_texture_pointer ();
; 232  : 		}
; 233  : */
; 234  : //		debug_log ( "Vertices: %d, texture %08x", buffer->vertices_used, buffer->texture );
; 235  : 
; 236  : 		number_of_d3d_triangle_primitives_drawn++;

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_d3d_triangle_primitives_drawn@@3HA ; number_of_d3d_triangle_primitives_drawn
  00069	83 c0 01	 add	 eax, 1
  0006c	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_d3d_triangle_primitives_drawn@@3HA, eax ; number_of_d3d_triangle_primitives_drawn
$LN2@force_flus:

; 237  : 	}
; 238  : 
; 239  : 	buffer->vertices = NULL;

  00071	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00074	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 240  : 	buffer->texture.texture = 0;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0007e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 241  : 	buffer->texture.texture_settings = 0;

  00085	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00088	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 242  : 	buffer->vertices_used = 0;

  0008f	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00092	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 243  : 	buffer->indices_index = 0;

  00099	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0009c	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 244  : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ENDP ; force_flush_triangle_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?add_triangle_fan_primitive_to_buffer@@YGXHHPAE@Z
_TEXT	SEGMENT
_next_index$ = -20					; size = 2
_base_index$ = -16					; size = 2
_index_count$ = -12					; size = 4
_index$ = -8						; size = 4
_buffer_indices$ = -4					; size = 4
_number_of_vertices$ = 8				; size = 4
_offset$ = 12						; size = 4
_indices$ = 16						; size = 4
?add_triangle_fan_primitive_to_buffer@@YGXHHPAE@Z PROC	; add_triangle_fan_primitive_to_buffer, COMDAT

; 518  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 519  : 
; 520  : 	WORD
; 521  : 		*buffer_indices;
; 522  : 
; 523  : 	int
; 524  : 		index,
; 525  : 		index_count;
; 526  : 
; 527  : 	unsigned short int
; 528  : 		base_index,
; 529  : 		next_index;
; 530  : 
; 531  : 	base_index = indices[0] + offset;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 10	 mov	 edx, DWORD PTR _indices$[ebp]
  00014	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00018	03 45 0c	 add	 eax, DWORD PTR _offset$[ebp]
  0001b	66 89 45 f0	 mov	 WORD PTR _base_index$[ebp], ax

; 532  : 	next_index = indices[1] + offset;

  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	c1 e0 00	 shl	 eax, 0
  00027	8b 4d 10	 mov	 ecx, DWORD PTR _indices$[ebp]
  0002a	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  0002e	03 55 0c	 add	 edx, DWORD PTR _offset$[ebp]
  00031	66 89 55 ec	 mov	 WORD PTR _next_index$[ebp], dx

; 533  : 
; 534  : 	buffer_indices = d3d.triangle_buffer->indices;

  00035	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0003a	83 c0 20	 add	 eax, 32			; 00000020H
  0003d	89 45 fc	 mov	 DWORD PTR _buffer_indices$[ebp], eax

; 535  : 	index = d3d.triangle_buffer->indices_index;

  00040	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00045	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00048	89 4d f8	 mov	 DWORD PTR _index$[ebp], ecx

; 536  : 
; 537  : 	for ( index_count = 0; index_count < ( number_of_vertices - 2 ); index_count++ )

  0004b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _index_count$[ebp], 0
  00052	eb 09		 jmp	 SHORT $LN4@add_triang
$LN2@add_triang:
  00054	8b 45 f4	 mov	 eax, DWORD PTR _index_count$[ebp]
  00057	83 c0 01	 add	 eax, 1
  0005a	89 45 f4	 mov	 DWORD PTR _index_count$[ebp], eax
$LN4@add_triang:
  0005d	8b 45 08	 mov	 eax, DWORD PTR _number_of_vertices$[ebp]
  00060	83 e8 02	 sub	 eax, 2
  00063	39 45 f4	 cmp	 DWORD PTR _index_count$[ebp], eax
  00066	7d 58		 jge	 SHORT $LN3@add_triang

; 538  : 	{
; 539  : 
; 540  : 		buffer_indices[index++] = base_index;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _buffer_indices$[ebp]
  0006e	66 8b 55 f0	 mov	 dx, WORD PTR _base_index$[ebp]
  00072	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00076	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00079	83 c0 01	 add	 eax, 1
  0007c	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax

; 541  : 		buffer_indices[index++] = next_index;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _buffer_indices$[ebp]
  00085	66 8b 55 ec	 mov	 dx, WORD PTR _next_index$[ebp]
  00089	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0008d	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00090	83 c0 01	 add	 eax, 1
  00093	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax

; 542  : 
; 543  : 		next_index = indices[index_count+2] + offset;

  00096	8b 45 10	 mov	 eax, DWORD PTR _indices$[ebp]
  00099	03 45 f4	 add	 eax, DWORD PTR _index_count$[ebp]
  0009c	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  000a0	03 4d 0c	 add	 ecx, DWORD PTR _offset$[ebp]
  000a3	66 89 4d ec	 mov	 WORD PTR _next_index$[ebp], cx

; 544  : 		buffer_indices[index++] = next_index;

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _buffer_indices$[ebp]
  000ad	66 8b 55 ec	 mov	 dx, WORD PTR _next_index$[ebp]
  000b1	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  000b5	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000b8	83 c0 01	 add	 eax, 1
  000bb	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax

; 545  : 	}

  000be	eb 94		 jmp	 SHORT $LN2@add_triang
$LN3@add_triang:

; 546  : 
; 547  : 	d3d.triangle_buffer->indices_index = index;

  000c0	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  000c5	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  000c8	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 548  : 
; 549  : #if DEBUG_CHECK_END_OF_VERTEX_OVERWRITES
; 550  : 	ASSERT ( d3d.triangle_buffer->vertices_used < MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER );
; 551  : 	ASSERT ( d3d.triangle_buffer->indices_index < MAXIMUM_D3D_INDICES_IN_VERTEX_BUFFER );
; 552  : #endif
; 553  : 
; 554  : 	number_of_d3d_triangles_drawn += number_of_vertices - 2;

  000cb	8b 45 08	 mov	 eax, DWORD PTR _number_of_vertices$[ebp]
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_d3d_triangles_drawn@@3HA ; number_of_d3d_triangles_drawn
  000d4	8d 54 01 fe	 lea	 edx, DWORD PTR [ecx+eax-2]
  000d8	89 15 00 00 00
	00		 mov	 DWORD PTR ?number_of_d3d_triangles_drawn@@3HA, edx ; number_of_d3d_triangles_drawn

; 555  : }

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 0c 00	 ret	 12			; 0000000cH
?add_triangle_fan_primitive_to_buffer@@YGXHHPAE@Z ENDP	; add_triangle_fan_primitive_to_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?finalise_primitives@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?finalise_primitives@@YGXXZ PROC			; finalise_primitives, COMDAT

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 305  : 
; 306  : 	int
; 307  : 		count;
; 308  : 
; 309  : 	for ( count = 0; count < MAXIMUM_TRIANGLE_BUFFERS; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@finalise_p
$LN2@finalise_p:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@finalise_p:
  0001b	83 7d fc 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  0001f	7d 24		 jge	 SHORT $LN3@finalise_p

; 310  : 	{
; 311  : 
; 312  : 		if ( d3d.triangle_buffers[count].vertices )

  00021	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00028	83 b8 18 00 00
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+24], 0
  0002f	74 12		 je	 SHORT $LN8@finalise_p

; 313  : 		{
; 314  : 
; 315  : 			force_flush_triangle_buffer ( &d3d.triangle_buffers[count] );

  00031	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00038	05 00 00 00 00	 add	 eax, OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A ; d3d
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ; force_flush_triangle_buffer
$LN8@finalise_p:

; 316  : 		}
; 317  : 	}

  00043	eb cd		 jmp	 SHORT $LN2@finalise_p
$LN3@finalise_p:

; 318  : 
; 319  : 	d3d.triangle_buffer = NULL;

  00045	c7 05 40 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0

; 320  : 
; 321  : 	for ( count = 0; count < MAXIMUM_LINE_BUFFERS; count++ )

  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00056	eb 09		 jmp	 SHORT $LN7@finalise_p
$LN5@finalise_p:
  00058	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0005b	83 c0 01	 add	 eax, 1
  0005e	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@finalise_p:
  00061	83 7d fc 02	 cmp	 DWORD PTR _count$[ebp], 2
  00065	7d 24		 jge	 SHORT $LN6@finalise_p

; 322  : 	{
; 323  : 
; 324  : 		if ( d3d.line_buffers[count].vertices )

  00067	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  0006e	83 b8 18 04 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132120], 0
  00075	74 12		 je	 SHORT $LN9@finalise_p

; 325  : 		{
; 326  : 
; 327  : 			force_flush_line_buffer ( &d3d.line_buffers[count] );

  00077	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  0007e	05 00 04 02 00	 add	 eax, OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+132096
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?force_flush_line_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ; force_flush_line_buffer
$LN9@finalise_p:

; 328  : 		}
; 329  : 	}

  00089	eb cd		 jmp	 SHORT $LN5@finalise_p
$LN6@finalise_p:

; 330  : 
; 331  : 	d3d.line_buffer = NULL;

  0008b	c7 05 4c 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364, 0

; 332  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?finalise_primitives@@YGXXZ ENDP			; finalise_primitives
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?flush_line_primitives@@YGXXZ
_TEXT	SEGMENT
?flush_line_primitives@@YGXXZ PROC			; flush_line_primitives, COMDAT

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 252  : 
; 253  : 	if ( ( d3d.line_buffer ) && ( d3d.line_buffer->vertices_used ) )

  00009	83 3d 4c 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364, 0
  00010	74 2e		 je	 SHORT $LN1@flush_line
  00012	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  00017	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0001b	74 23		 je	 SHORT $LN1@flush_line

; 254  : 	{
; 255  : 
; 256  : 		if ( d3d_in_order_rendering )

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_in_order_rendering@@3HA, 0 ; d3d_in_order_rendering
  00024	74 05		 je	 SHORT $LN3@flush_line

; 257  : 		{
; 258  : 	
; 259  : 			flush_triangle_primitives ();

  00026	e8 00 00 00 00	 call	 ?flush_triangle_primitives@@YGXXZ ; flush_triangle_primitives
$LN3@flush_line:

; 260  : 		}
; 261  : 
; 262  : 		force_flush_line_buffer ( d3d.line_buffer );

  0002b	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?force_flush_line_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ; force_flush_line_buffer

; 263  : 
; 264  : 		d3d.line_buffer = NULL;

  00036	c7 05 4c 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364, 0
$LN1@flush_line:

; 265  : 	}
; 266  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?flush_line_primitives@@YGXXZ ENDP			; flush_line_primitives
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?flush_triangle_primitives@@YGXXZ
_TEXT	SEGMENT
?flush_triangle_primitives@@YGXXZ PROC			; flush_triangle_primitives, COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 166  : 
; 167  : 	if ( ( d3d.triangle_buffer ) && ( d3d.triangle_buffer->vertices_used ) )

  00009	83 3d 40 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0
  00010	74 43		 je	 SHORT $LN2@flush_tria
  00012	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00017	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0001b	74 38		 je	 SHORT $LN2@flush_tria

; 168  : 	{
; 169  : 
; 170  : 		ASSERT ( d3d_in_3d_scene );

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_in_3d_scene@@3HA, 0 ; d3d_in_3d_scene
  00024	75 18		 jne	 SHORT $LN4@flush_tria
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??flush_triangle_primitives@@YGXXZ@4JA
  0002b	83 c0 05	 add	 eax, 5
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@CADEDAOC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PELMKNBF@d3d_in_3d_scene@
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@flush_tria:

; 171  : 
; 172  : 	//	if ( ( !d3d.triangle_buffer->vertices ) || ( d3d.triangle_buffer->vertices_used > d3d_texture_batching_vertex_maximum ) )
; 173  : 		{
; 174  : 
; 175  : 			force_flush_triangle_buffer ( d3d.triangle_buffer );

  0003e	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ; force_flush_triangle_buffer

; 176  : 		}
; 177  : 
; 178  : 		d3d.triangle_buffer = NULL;

  00049	c7 05 40 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0

; 179  : 	}
; 180  : 	else

  00053	eb 0a		 jmp	 SHORT $LN1@flush_tria
$LN2@flush_tria:

; 181  : 	{
; 182  : 
; 183  : 		d3d.triangle_buffer = NULL;

  00055	c7 05 40 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0
$LN1@flush_tria:

; 184  : 	}
; 185  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?flush_triangle_primitives@@YGXXZ ENDP			; flush_triangle_primitives
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?reset_primitives@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?reset_primitives@@YGXXZ PROC				; reset_primitives, COMDAT

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 127  : 
; 128  : 	int
; 129  : 		count;
; 130  : 
; 131  : 	set_d3d_texture_batching ( FALSE );

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 ?set_d3d_texture_batching@@YGXH@Z ; set_d3d_texture_batching

; 132  : 
; 133  : 	for ( count = 0; count < MAXIMUM_TRIANGLE_BUFFERS; count++ )

  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@reset_prim
$LN2@reset_prim:
  00019	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@reset_prim:
  00022	83 7d fc 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  00026	7d 57		 jge	 SHORT $LN3@reset_prim

; 134  : 	{
; 135  : 
; 136  : 		d3d.triangle_buffers[count].vertices = NULL;

  00028	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  0002f	c7 80 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+24], 0

; 137  : 		d3d.triangle_buffers[count].texture.texture = 0;

  00039	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00040	c7 80 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+8], 0

; 138  : 		d3d.triangle_buffers[count].texture.texture_settings = 0;

  0004a	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00051	c7 80 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+12], 0

; 139  : 		d3d.triangle_buffers[count].vertices_used = 0;

  0005b	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00062	c7 80 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+16], 0

; 140  : 		d3d.triangle_buffers[count].indices_index = 0;

  0006c	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00073	c7 80 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+20], 0

; 141  : 	}

  0007d	eb 9a		 jmp	 SHORT $LN2@reset_prim
$LN3@reset_prim:

; 142  : 
; 143  : 	for ( count = 0; count < MAXIMUM_LINE_BUFFERS; count++ )

  0007f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00086	eb 09		 jmp	 SHORT $LN7@reset_prim
$LN5@reset_prim:
  00088	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0008b	83 c0 01	 add	 eax, 1
  0008e	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@reset_prim:
  00091	83 7d fc 02	 cmp	 DWORD PTR _count$[ebp], 2
  00095	7d 57		 jge	 SHORT $LN6@reset_prim

; 144  : 	{
; 145  : 
; 146  : 		d3d.line_buffers[count].vertices = NULL;

  00097	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  0009e	c7 80 18 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132120], 0

; 147  : 		d3d.line_buffers[count].texture.texture = 0;

  000a8	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  000af	c7 80 08 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132104], 0

; 148  : 		d3d.line_buffers[count].texture.texture_settings = 0;

  000b9	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  000c0	c7 80 0c 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132108], 0

; 149  : 		d3d.line_buffers[count].vertices_used = 0;

  000ca	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  000d1	c7 80 10 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132112], 0

; 150  : 		d3d.line_buffers[count].indices_index = 0;

  000db	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  000e2	c7 80 14 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132116], 0

; 151  : 	}

  000ec	eb 9a		 jmp	 SHORT $LN5@reset_prim
$LN6@reset_prim:

; 152  : 
; 153  : 	d3d.triangle_buffer = NULL;

  000ee	c7 05 40 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0

; 154  : 
; 155  : 	d3d.line_buffer = NULL;

  000f8	c7 05 4c 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364, 0

; 156  : 
; 157  : 	reset_deferred_state_changes ();

  00102	e8 00 00 00 00	 call	 ?reset_deferred_state_changes@@YGXXZ ; reset_deferred_state_changes

; 158  : }

  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
?reset_primitives@@YGXXZ ENDP				; reset_primitives
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?set_d3d_texture_batching@@YGXH@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?set_d3d_texture_batching@@YGXH@Z PROC			; set_d3d_texture_batching, COMDAT

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 106  : 
; 107  : 	if ( flag )

  00009	83 7d 08 00	 cmp	 DWORD PTR _flag$[ebp], 0
  0000d	74 0c		 je	 SHORT $LN2@set_d3d_te

; 108  : 	{
; 109  : 
; 110  : 		d3d_texture_batching_vertex_maximum = TEXTURE_BATCHING_VERTEX_MAXIMUM;

  0000f	c7 05 00 00 00
	00 5a 01 00 00	 mov	 DWORD PTR ?d3d_texture_batching_vertex_maximum@@3HA, 346 ; d3d_texture_batching_vertex_maximum, 0000015aH

; 111  : 	}
; 112  : 	else

  00019	eb 0f		 jmp	 SHORT $LN1@set_d3d_te
$LN2@set_d3d_te:

; 113  : 	{
; 114  : 
; 115  : 		finalise_primitives ();

  0001b	e8 00 00 00 00	 call	 ?finalise_primitives@@YGXXZ ; finalise_primitives

; 116  : 
; 117  : 		d3d_texture_batching_vertex_maximum = 0;

  00020	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_texture_batching_vertex_maximum@@3HA, 0 ; d3d_texture_batching_vertex_maximum
$LN1@set_d3d_te:

; 118  : 	}
; 119  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?set_d3d_texture_batching@@YGXH@Z ENDP			; set_d3d_texture_batching
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?get_d3d_raw_primitive_indices_address@@YGPAGXZ
_TEXT	SEGMENT
?get_d3d_raw_primitive_indices_address@@YGPAGXZ PROC	; get_d3d_raw_primitive_indices_address, COMDAT

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 354  : 
; 355  : 	ASSERT ( d3d.triangle_buffer );

  00009	83 3d 40 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0
  00010	75 18		 jne	 SHORT $LN2@get_d3d_ra
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_d3d_raw_primitive_indices_address@@YGPAGXZ@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@CADEDAOC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CFJNICEL@d3d?4triangle_buffer@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_d3d_ra:

; 356  : 
; 357  : 	return ( d3d.triangle_buffer->indices );

  0002a	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0002f	83 c0 20	 add	 eax, 32			; 00000020H

; 358  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?get_d3d_raw_primitive_indices_address@@YGPAGXZ ENDP	; get_d3d_raw_primitive_indices_address
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?draw_point_list_primitive@@YGXH@Z
_TEXT	SEGMENT
_number_of_vertices$ = 8				; size = 4
?draw_point_list_primitive@@YGXH@Z PROC			; draw_point_list_primitive, COMDAT

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 502  : 	ASSERT ( number_of_vertices < 256 );

  00009	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _number_of_vertices$[ebp], 256 ; 00000100H
  00010	7c 18		 jl	 SHORT $LN2@draw_point
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_point_list_primitive@@YGXH@Z@4JA
  00017	83 c0 01	 add	 eax, 1
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@CADEDAOC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OIJIBANF@number_of_vertices?5?$DM?5256@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_point:

; 503  : 
; 504  : 	if ( d3d.point_vertex_buffer )

  0002a	83 3d 58 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140376, 0
  00031	74 1f		 je	 SHORT $LN1@draw_point

; 505  : 	{
; 506  : 	
; 507  : 		f3d_vertex_unlock ( d3d.point_vertex_buffer );

  00033	a1 58 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140376
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_unlock

; 508  : 
; 509  : 		f3d_draw ( D3DPT_POINTLIST, d3d.point_vertex_buffer, 0, number_of_vertices );

  0003e	8b 45 08	 mov	 eax, DWORD PTR _number_of_vertices$[ebp]
  00041	50		 push	 eax
  00042	6a 00		 push	 0
  00044	8b 0d 58 24 02
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140376
  0004a	51		 push	 ecx
  0004b	6a 01		 push	 1
  0004d	e8 00 00 00 00	 call	 ?f3d_draw@@YGXIPAUIDirect3DVertexBuffer7@@II@Z ; f3d_draw
$LN1@draw_point:

; 510  : 	}
; 511  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?draw_point_list_primitive@@YGXH@Z ENDP			; draw_point_list_primitive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?draw_special_quad_quad_primitive@@YGXH@Z
_TEXT	SEGMENT
_index$ = -12						; size = 4
_vertex$ = -8						; size = 4
_indices$ = -4						; size = 4
_number_of_vertices$ = 8				; size = 4
?draw_special_quad_quad_primitive@@YGXH@Z PROC		; draw_special_quad_quad_primitive, COMDAT

; 562  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 563  : 
; 564  : 	WORD
; 565  : 		*indices;
; 566  : 
; 567  : 	int
; 568  : 		vertex,
; 569  : 		index;
; 570  : 
; 571  : 	ASSERT ( number_of_vertices == 9 );

  00009	83 7d 08 09	 cmp	 DWORD PTR _number_of_vertices$[ebp], 9
  0000d	74 18		 je	 SHORT $LN2@draw_speci
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_special_quad_quad_primitive@@YGXH@Z@4JA
  00014	83 c0 09	 add	 eax, 9
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@CADEDAOC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MDHKONDO@number_of_vertices?5?$DN?$DN?59@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_speci:

; 572  : 
; 573  : 	indices = d3d.triangle_buffer->indices;

  00027	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0002c	83 c0 20	 add	 eax, 32			; 00000020H
  0002f	89 45 fc	 mov	 DWORD PTR _indices$[ebp], eax

; 574  : 	index = d3d.triangle_buffer->indices_index;

  00032	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00037	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003a	89 4d f4	 mov	 DWORD PTR _index$[ebp], ecx

; 575  : 	vertex = d3d.triangle_buffer->vertices_used;

  0003d	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00042	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00045	89 4d f8	 mov	 DWORD PTR _vertex$[ebp], ecx

; 576  : 
; 577  : 	indices[index++] = vertex + 0;

  00048	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  0004e	66 8b 55 f8	 mov	 dx, WORD PTR _vertex$[ebp]
  00052	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00056	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00059	83 c0 01	 add	 eax, 1
  0005c	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 578  : 	indices[index++] = vertex + 1;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  00062	83 c0 01	 add	 eax, 1
  00065	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  00068	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0006b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0006f	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 579  : 	indices[index++] = vertex + 3;

  00078	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  0007b	83 c0 03	 add	 eax, 3
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  00081	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  00084	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00088	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  0008b	83 c0 01	 add	 eax, 1
  0008e	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 580  : 	indices[index++] = vertex + 1;

  00091	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  00094	83 c0 01	 add	 eax, 1
  00097	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  0009a	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0009d	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000a1	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 581  : 	indices[index++] = vertex + 4;

  000aa	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  000ad	83 c0 04	 add	 eax, 4
  000b0	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  000b3	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  000b6	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000ba	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  000bd	83 c0 01	 add	 eax, 1
  000c0	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 582  : 	indices[index++] = vertex + 3;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  000c6	83 c0 03	 add	 eax, 3
  000c9	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  000cf	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000d3	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  000d6	83 c0 01	 add	 eax, 1
  000d9	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 583  : 	indices[index++] = vertex + 1;

  000dc	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  000df	83 c0 01	 add	 eax, 1
  000e2	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  000e5	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  000e8	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000ec	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  000ef	83 c0 01	 add	 eax, 1
  000f2	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 584  : 	indices[index++] = vertex + 2;

  000f5	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  000f8	83 c0 02	 add	 eax, 2
  000fb	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  000fe	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  00101	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00105	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00108	83 c0 01	 add	 eax, 1
  0010b	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 585  : 	indices[index++] = vertex + 4;

  0010e	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  00111	83 c0 04	 add	 eax, 4
  00114	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  00117	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0011a	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0011e	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00121	83 c0 01	 add	 eax, 1
  00124	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 586  : 	indices[index++] = vertex + 2;

  00127	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  0012a	83 c0 02	 add	 eax, 2
  0012d	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  00130	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  00133	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00137	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  0013a	83 c0 01	 add	 eax, 1
  0013d	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 587  : 	indices[index++] = vertex + 5;

  00140	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  00143	83 c0 05	 add	 eax, 5
  00146	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  00149	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0014c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00150	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00153	83 c0 01	 add	 eax, 1
  00156	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 588  : 	indices[index++] = vertex + 4;

  00159	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  0015c	83 c0 04	 add	 eax, 4
  0015f	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  00162	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  00165	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00169	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  0016c	83 c0 01	 add	 eax, 1
  0016f	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 589  : 
; 590  : 	indices[index++] = vertex + 3;

  00172	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  00175	83 c0 03	 add	 eax, 3
  00178	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0017e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00182	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00185	83 c0 01	 add	 eax, 1
  00188	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 591  : 	indices[index++] = vertex + 4;

  0018b	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  0018e	83 c0 04	 add	 eax, 4
  00191	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  00194	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  00197	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0019b	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  0019e	83 c0 01	 add	 eax, 1
  001a1	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 592  : 	indices[index++] = vertex + 6;

  001a4	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  001a7	83 c0 06	 add	 eax, 6
  001aa	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  001ad	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  001b0	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001b4	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  001b7	83 c0 01	 add	 eax, 1
  001ba	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 593  : 	indices[index++] = vertex + 4;

  001bd	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  001c0	83 c0 04	 add	 eax, 4
  001c3	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  001c6	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  001c9	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001cd	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  001d0	83 c0 01	 add	 eax, 1
  001d3	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 594  : 	indices[index++] = vertex + 7;

  001d6	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  001d9	83 c0 07	 add	 eax, 7
  001dc	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  001df	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  001e2	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001e6	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  001e9	83 c0 01	 add	 eax, 1
  001ec	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 595  : 	indices[index++] = vertex + 6;

  001ef	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  001f2	83 c0 06	 add	 eax, 6
  001f5	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  001f8	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  001fb	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ff	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00202	83 c0 01	 add	 eax, 1
  00205	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 596  : 	indices[index++] = vertex + 4;

  00208	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  0020b	83 c0 04	 add	 eax, 4
  0020e	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  00211	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  00214	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00218	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  0021b	83 c0 01	 add	 eax, 1
  0021e	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 597  : 	indices[index++] = vertex + 5;

  00221	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  00224	83 c0 05	 add	 eax, 5
  00227	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  0022a	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0022d	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00231	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00234	83 c0 01	 add	 eax, 1
  00237	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 598  : 	indices[index++] = vertex + 7;

  0023a	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  0023d	83 c0 07	 add	 eax, 7
  00240	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  00243	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  00246	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0024a	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  0024d	83 c0 01	 add	 eax, 1
  00250	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 599  : 	indices[index++] = vertex + 5;

  00253	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  00256	83 c0 05	 add	 eax, 5
  00259	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  0025c	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0025f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00263	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00266	83 c0 01	 add	 eax, 1
  00269	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 600  : 	indices[index++] = vertex + 8;

  0026c	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  0026f	83 c0 08	 add	 eax, 8
  00272	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  00275	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  00278	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0027c	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  0027f	83 c0 01	 add	 eax, 1
  00282	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 601  : 	indices[index++] = vertex + 7;

  00285	8b 45 f8	 mov	 eax, DWORD PTR _vertex$[ebp]
  00288	83 c0 07	 add	 eax, 7
  0028b	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  0028e	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  00291	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00295	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00298	83 c0 01	 add	 eax, 1
  0029b	89 45 f4	 mov	 DWORD PTR _index$[ebp], eax

; 602  : 
; 603  : 	d3d.triangle_buffer->indices_index = index;

  0029e	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  002a3	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  002a6	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 604  : 	d3d.triangle_buffer->vertices_used += number_of_vertices;

  002a9	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  002ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002b1	03 4d 08	 add	 ecx, DWORD PTR _number_of_vertices$[ebp]
  002b4	8b 15 40 24 02
	00		 mov	 edx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  002ba	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 605  : 
; 606  : 	number_of_d3d_triangles_drawn += 8;

  002bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_d3d_triangles_drawn@@3HA ; number_of_d3d_triangles_drawn
  002c2	83 c0 08	 add	 eax, 8
  002c5	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_d3d_triangles_drawn@@3HA, eax ; number_of_d3d_triangles_drawn

; 607  : }

  002ca	5f		 pop	 edi
  002cb	5e		 pop	 esi
  002cc	5b		 pop	 ebx
  002cd	8b e5		 mov	 esp, ebp
  002cf	5d		 pop	 ebp
  002d0	c2 04 00	 ret	 4
?draw_special_quad_quad_primitive@@YGXH@Z ENDP		; draw_special_quad_quad_primitive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z
_TEXT	SEGMENT
_vertex$ = -12						; size = 4
_index$ = -8						; size = 4
_indices$ = -4						; size = 4
_vertices$ = 8						; size = 4
?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z PROC	; draw_line_primitive, COMDAT

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 471  : 
; 472  : 	WORD
; 473  : 		*indices;
; 474  : 
; 475  : 	int
; 476  : 		index,
; 477  : 		vertex;
; 478  : 
; 479  : #if ( CHECK_PRIMITIVE_VERTICES )
; 480  : 	check_primitive_vertices ( vertices, 2 );
; 481  : #endif
; 482  : 
; 483  : 	indices = d3d.line_buffer->indices;

  00009	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  0000e	83 c0 20	 add	 eax, 32			; 00000020H
  00011	89 45 fc	 mov	 DWORD PTR _indices$[ebp], eax

; 484  : 	index = d3d.line_buffer->indices_index;

  00014	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  00019	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001c	89 4d f8	 mov	 DWORD PTR _index$[ebp], ecx

; 485  : 	vertex = d3d.line_buffer->vertices_used;

  0001f	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  00024	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00027	89 4d f4	 mov	 DWORD PTR _vertex$[ebp], ecx

; 486  : 
; 487  : 	indices[index++] = vertex++;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  00030	66 8b 55 f4	 mov	 dx, WORD PTR _vertex$[ebp]
  00034	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00038	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
  00041	8b 4d f4	 mov	 ecx, DWORD PTR _vertex$[ebp]
  00044	83 c1 01	 add	 ecx, 1
  00047	89 4d f4	 mov	 DWORD PTR _vertex$[ebp], ecx

; 488  : 	indices[index++] = vertex++;

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  00050	66 8b 55 f4	 mov	 dx, WORD PTR _vertex$[ebp]
  00054	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00058	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0005b	83 c0 01	 add	 eax, 1
  0005e	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _vertex$[ebp]
  00064	83 c1 01	 add	 ecx, 1
  00067	89 4d f4	 mov	 DWORD PTR _vertex$[ebp], ecx

; 489  : 
; 490  : 	d3d.line_buffer->vertices_used = vertex;

  0006a	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR _vertex$[ebp]
  00072	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 491  : 	d3d.line_buffer->indices_index = index;

  00075	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  0007d	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 492  : 
; 493  : 	number_of_d3d_lines_drawn++;

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_d3d_lines_drawn@@3HA ; number_of_d3d_lines_drawn
  00085	83 c0 01	 add	 eax, 1
  00088	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_d3d_lines_drawn@@3HA, eax ; number_of_d3d_lines_drawn

; 494  : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z ENDP	; draw_line_primitive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?draw_strip_primitive@@YGXHPAU_D3DTLVERTEX@@@Z
_TEXT	SEGMENT
_point_count$ = -20					; size = 4
_direction_toggle$ = -16				; size = 4
_vertex$ = -12						; size = 4
_index$ = -8						; size = 4
_indices$ = -4						; size = 4
_number_of_vertices$ = 8				; size = 4
_vertices$ = 12						; size = 4
?draw_strip_primitive@@YGXHPAU_D3DTLVERTEX@@@Z PROC	; draw_strip_primitive, COMDAT

; 410  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 411  : 
; 412  : 	WORD
; 413  : 		*indices;
; 414  : 
; 415  : 	int
; 416  : 		index,
; 417  : 		vertex,
; 418  : 		direction_toggle,
; 419  : 		point_count;
; 420  : 
; 421  : 	direction_toggle = FALSE;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _direction_toggle$[ebp], 0

; 422  : 
; 423  : #if ( CHECK_PRIMITIVE_VERTICES )
; 424  : 	check_primitive_vertices ( vertices, number_of_vertices );
; 425  : #endif
; 426  : 
; 427  : 	indices = d3d.triangle_buffer->indices;

  00010	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00015	83 c0 20	 add	 eax, 32			; 00000020H
  00018	89 45 fc	 mov	 DWORD PTR _indices$[ebp], eax

; 428  : 	index = d3d.triangle_buffer->indices_index;

  0001b	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00020	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00023	89 4d f8	 mov	 DWORD PTR _index$[ebp], ecx

; 429  : 	vertex = d3d.triangle_buffer->vertices_used;

  00026	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0002b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002e	89 4d f4	 mov	 DWORD PTR _vertex$[ebp], ecx

; 430  : 
; 431  : 	for ( point_count = 0; point_count < ( number_of_vertices - 2 ); point_count++ )

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _point_count$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN4@draw_strip
$LN2@draw_strip:
  0003a	8b 45 ec	 mov	 eax, DWORD PTR _point_count$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 ec	 mov	 DWORD PTR _point_count$[ebp], eax
$LN4@draw_strip:
  00043	8b 45 08	 mov	 eax, DWORD PTR _number_of_vertices$[ebp]
  00046	83 e8 02	 sub	 eax, 2
  00049	39 45 ec	 cmp	 DWORD PTR _point_count$[ebp], eax
  0004c	0f 8d 98 00 00
	00		 jge	 $LN3@draw_strip

; 432  : 	{
; 433  : 
; 434  : 		if ( direction_toggle )

  00052	83 7d f0 00	 cmp	 DWORD PTR _direction_toggle$[ebp], 0
  00056	74 43		 je	 SHORT $LN5@draw_strip

; 435  : 		{
; 436  : 
; 437  : 			indices[index] = vertex + point_count + 2;

  00058	8b 45 ec	 mov	 eax, DWORD PTR _point_count$[ebp]
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR _vertex$[ebp]
  0005e	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  00062	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  00068	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 438  : 			indices[index+1] = vertex + point_count + 1;

  0006c	8b 45 ec	 mov	 eax, DWORD PTR _point_count$[ebp]
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR _vertex$[ebp]
  00072	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00076	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  0007c	66 89 54 41 02	 mov	 WORD PTR [ecx+eax*2+2], dx

; 439  : 			indices[index+2] = vertex + point_count;

  00081	8b 45 f4	 mov	 eax, DWORD PTR _vertex$[ebp]
  00084	03 45 ec	 add	 eax, DWORD PTR _point_count$[ebp]
  00087	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  0008a	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0008d	66 89 44 4a 04	 mov	 WORD PTR [edx+ecx*2+4], ax

; 440  : 			direction_toggle = FALSE;

  00092	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _direction_toggle$[ebp], 0

; 441  : 		}
; 442  : 		else

  00099	eb 41		 jmp	 SHORT $LN6@draw_strip
$LN5@draw_strip:

; 443  : 		{
; 444  : 
; 445  : 			indices[index] = vertex + point_count;

  0009b	8b 45 f4	 mov	 eax, DWORD PTR _vertex$[ebp]
  0009e	03 45 ec	 add	 eax, DWORD PTR _point_count$[ebp]
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  000a4	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  000a7	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 446  : 			indices[index+1] = vertex + point_count + 1;

  000ab	8b 45 ec	 mov	 eax, DWORD PTR _point_count$[ebp]
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR _vertex$[ebp]
  000b1	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  000b5	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  000bb	66 89 54 41 02	 mov	 WORD PTR [ecx+eax*2+2], dx

; 447  : 			indices[index+2] = vertex + point_count + 2;

  000c0	8b 45 ec	 mov	 eax, DWORD PTR _point_count$[ebp]
  000c3	8b 4d f4	 mov	 ecx, DWORD PTR _vertex$[ebp]
  000c6	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  000ca	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  000d0	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 448  : 			direction_toggle = TRUE;

  000d5	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _direction_toggle$[ebp], 1
$LN6@draw_strip:

; 449  : 		}
; 450  : 
; 451  : 		index += 3;

  000dc	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000df	83 c0 03	 add	 eax, 3
  000e2	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax

; 452  : 	}

  000e5	e9 50 ff ff ff	 jmp	 $LN2@draw_strip
$LN3@draw_strip:

; 453  : 
; 454  : 	d3d.triangle_buffer->vertices_used += number_of_vertices;

  000ea	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  000ef	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000f2	03 4d 08	 add	 ecx, DWORD PTR _number_of_vertices$[ebp]
  000f5	8b 15 40 24 02
	00		 mov	 edx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  000fb	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 455  : 	d3d.triangle_buffer->indices_index = index;

  000fe	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00103	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  00106	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 456  : 
; 457  : #if DEBUG_CHECK_END_OF_VERTEX_OVERWRITES
; 458  : 	ASSERT ( d3d.triangle_buffer->vertices_used < MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER );
; 459  : 	ASSERT ( d3d.triangle_buffer->indices_index < MAXIMUM_D3D_INDICES_IN_VERTEX_BUFFER );
; 460  : #endif
; 461  : 
; 462  : 	number_of_d3d_triangles_drawn += number_of_vertices - 2;

  00109	8b 45 08	 mov	 eax, DWORD PTR _number_of_vertices$[ebp]
  0010c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_d3d_triangles_drawn@@3HA ; number_of_d3d_triangles_drawn
  00112	8d 54 01 fe	 lea	 edx, DWORD PTR [ecx+eax-2]
  00116	89 15 00 00 00
	00		 mov	 DWORD PTR ?number_of_d3d_triangles_drawn@@3HA, edx ; number_of_d3d_triangles_drawn

; 463  : }

  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c2 08 00	 ret	 8
?draw_strip_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ENDP	; draw_strip_primitive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dpoly.c
;	COMDAT ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z
_TEXT	SEGMENT
_point_count$ = -16					; size = 4
_vertex$ = -12						; size = 4
_index$ = -8						; size = 4
_indices$ = -4						; size = 4
_number_of_vertices$ = 8				; size = 4
_vertices$ = 12						; size = 4
?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z PROC	; draw_fan_primitive, COMDAT

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 366  : 
; 367  : 	WORD
; 368  : 		*indices;
; 369  : 
; 370  : 	int
; 371  : 		index,
; 372  : 		vertex,
; 373  : 		point_count;
; 374  : 
; 375  : #if ( CHECK_PRIMITIVE_VERTICES )
; 376  : 	check_primitive_vertices ( vertices, number_of_vertices );
; 377  : #endif
; 378  : 
; 379  : 
; 380  : 	indices = d3d.triangle_buffer->indices;

  00009	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0000e	83 c0 20	 add	 eax, 32			; 00000020H
  00011	89 45 fc	 mov	 DWORD PTR _indices$[ebp], eax

; 381  : 	index = d3d.triangle_buffer->indices_index;

  00014	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00019	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001c	89 4d f8	 mov	 DWORD PTR _index$[ebp], ecx

; 382  : 	vertex = d3d.triangle_buffer->vertices_used;

  0001f	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00024	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00027	89 4d f4	 mov	 DWORD PTR _vertex$[ebp], ecx

; 383  : 
; 384  : 	for ( point_count = 1; point_count < ( number_of_vertices - 1 ); point_count++ )

  0002a	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _point_count$[ebp], 1
  00031	eb 09		 jmp	 SHORT $LN4@draw_fan_p
$LN2@draw_fan_p:
  00033	8b 45 f0	 mov	 eax, DWORD PTR _point_count$[ebp]
  00036	83 c0 01	 add	 eax, 1
  00039	89 45 f0	 mov	 DWORD PTR _point_count$[ebp], eax
$LN4@draw_fan_p:
  0003c	8b 45 08	 mov	 eax, DWORD PTR _number_of_vertices$[ebp]
  0003f	83 e8 01	 sub	 eax, 1
  00042	39 45 f0	 cmp	 DWORD PTR _point_count$[ebp], eax
  00045	7d 4f		 jge	 SHORT $LN3@draw_fan_p

; 385  : 	{
; 386  : 
; 387  : 		indices[index++] = vertex;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  0004d	66 8b 55 f4	 mov	 dx, WORD PTR _vertex$[ebp]
  00051	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00055	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax

; 388  : 		indices[index++] = vertex + point_count;

  0005e	8b 45 f4	 mov	 eax, DWORD PTR _vertex$[ebp]
  00061	03 45 f0	 add	 eax, DWORD PTR _point_count$[ebp]
  00064	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  00067	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0006a	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0006e	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00071	83 c0 01	 add	 eax, 1
  00074	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax

; 389  : 		indices[index++] = vertex + point_count + 1;

  00077	8b 45 f0	 mov	 eax, DWORD PTR _point_count$[ebp]
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR _vertex$[ebp]
  0007d	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00081	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  00087	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0008b	8b 55 f8	 mov	 edx, DWORD PTR _index$[ebp]
  0008e	83 c2 01	 add	 edx, 1
  00091	89 55 f8	 mov	 DWORD PTR _index$[ebp], edx

; 390  : 	}

  00094	eb 9d		 jmp	 SHORT $LN2@draw_fan_p
$LN3@draw_fan_p:

; 391  : 
; 392  : 	d3d.triangle_buffer->vertices_used += number_of_vertices;

  00096	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0009b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009e	03 4d 08	 add	 ecx, DWORD PTR _number_of_vertices$[ebp]
  000a1	8b 15 40 24 02
	00		 mov	 edx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  000a7	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 393  : 	d3d.triangle_buffer->indices_index = index;

  000aa	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  000af	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  000b2	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 394  : 
; 395  : #if DEBUG_CHECK_END_OF_VERTEX_OVERWRITES
; 396  : 	ASSERT ( d3d.triangle_buffer->vertices_used < MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER );
; 397  : 	ASSERT ( d3d.triangle_buffer->indices_index < MAXIMUM_D3D_INDICES_IN_VERTEX_BUFFER );
; 398  : #endif
; 399  : 
; 400  : 	assert_check_texture_match ();

  000b5	e8 00 00 00 00	 call	 ?assert_check_texture_match@@YGXXZ ; assert_check_texture_match

; 401  : 
; 402  : 	number_of_d3d_triangles_drawn += number_of_vertices - 2;

  000ba	8b 45 08	 mov	 eax, DWORD PTR _number_of_vertices$[ebp]
  000bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_d3d_triangles_drawn@@3HA ; number_of_d3d_triangles_drawn
  000c3	8d 54 01 fe	 lea	 edx, DWORD PTR [ecx+eax-2]
  000c7	89 15 00 00 00
	00		 mov	 DWORD PTR ?number_of_d3d_triangles_drawn@@3HA, edx ; number_of_d3d_triangles_drawn

; 403  : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8
?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ENDP	; draw_fan_primitive
_TEXT	ENDS
END
