; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\d3dvert.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?d3d_point_vertices@@3PAU_D3DTLVERTEX@@A	; d3d_point_vertices
PUBLIC	?number_of_d3d_point_vertices_used@@3HA		; number_of_d3d_point_vertices_used
_BSS	SEGMENT
?d3d_point_vertices@@3PAU_D3DTLVERTEX@@A DD 01H DUP (?)	; d3d_point_vertices
?number_of_d3d_point_vertices_used@@3HA DD 01H DUP (?)	; number_of_d3d_point_vertices_used
_BSS	ENDS
PUBLIC	?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
PUBLIC	?get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z ; get_d3d_vertices_points_address
PUBLIC	?get_d3d_new_vertices_points_address@@YGPAU_D3DTLVERTEX@@HPAH@Z ; get_d3d_new_vertices_points_address
PUBLIC	?unroll_d3d_vertices@@YGXH@Z			; unroll_d3d_vertices
PUBLIC	?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ ; get_d3d_line_vertices_points_address
PUBLIC	?get_d3d_point_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z ; get_d3d_point_vertices_points_address
PUBLIC	?get_d3d_alpha_vertex_buffer_vertices@@YGPAU_D3DTLVERTEX@@H@Z ; get_d3d_alpha_vertex_buffer_vertices
PUBLIC	?unlock_d3d_alpha_vertex_buffer@@YGXH@Z		; unlock_d3d_alpha_vertex_buffer
PUBLIC	?get_d3d_triangle_vertex_buffer@@YGXXZ		; get_d3d_triangle_vertex_buffer
PUBLIC	?get_d3d_line_vertex_buffer@@YGXXZ		; get_d3d_line_vertex_buffer
PUBLIC	?__LINE__Var@?0??get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z@4JA ; `get_d3d_vertices_points_address'::`1'::__LINE__Var
PUBLIC	??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BO@DLICOHKE@d3d?4triangle_buffer?9?$DOvertices@ ; `string'
PUBLIC	?__LINE__Var@?0??get_d3d_new_vertices_points_address@@YGPAU_D3DTLVERTEX@@HPAH@Z@4JA ; `get_d3d_new_vertices_points_address'::`1'::__LINE__Var
PUBLIC	??_C@_0EL@KCPELIO@d3d?4triangle_buffer?9?$DOvertices_u@ ; `string'
PUBLIC	?__LINE__Var@?0??unroll_d3d_vertices@@YGXH@Z@4JA ; `unroll_d3d_vertices'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@CFJNICEL@d3d?4triangle_buffer@	; `string'
PUBLIC	??_C@_0CI@GMJDDIDP@d3d?4triangle_buffer?9?$DOvertices_u@ ; `string'
PUBLIC	?__LINE__Var@?0??get_d3d_point_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z@4JA ; `get_d3d_point_vertices_points_address'::`1'::__LINE__Var
PUBLIC	??_C@_0DJ@BEMBMLEE@number_of_points?5?$DM?5MAXIMUM_D3D_@ ; `string'
PUBLIC	?__LINE__Var@?0??get_d3d_alpha_vertex_buffer_vertices@@YGPAU_D3DTLVERTEX@@H@Z@4JA ; `get_d3d_alpha_vertex_buffer_vertices'::`1'::__LINE__Var
PUBLIC	??_C@_0CC@ENHNCIHF@buffer?5?$DM?5MAX_ALPHA_VERTEX_BUFFE@ ; `string'
PUBLIC	?__LINE__Var@?0??unlock_d3d_alpha_vertex_buffer@@YGXH@Z@4JA ; `unlock_d3d_alpha_vertex_buffer'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_d3d_triangle_vertex_buffer@@YGXXZ@4JA ; `get_d3d_triangle_vertex_buffer'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_d3d_line_vertex_buffer@@YGXXZ@4JA ; `get_d3d_line_vertex_buffer'::`1'::__LINE__Var
PUBLIC	??_C@_0BK@DMLELEFC@d3d?4line_buffer?9?$DOvertices@ ; `string'
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?flush_line_primitives@@YGXXZ:PROC		; flush_line_primitives
EXTRN	?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z:PROC ; force_flush_triangle_buffer
EXTRN	?get_d3d_current_texture_pointer@@YGXPAUVERTEX_BUFFER_TEXTURE_DATA@@@Z:PROC ; get_d3d_current_texture_pointer
EXTRN	?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z:PROC ; f3d_vertex_lock
EXTRN	?f3d_vertex_lock_strict@@YGXPAUIDirect3DVertexBuffer7@@IPAPAX@Z:PROC ; f3d_vertex_lock_strict
EXTRN	?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z:PROC ; f3d_vertex_unlock
EXTRN	?d3d@@3UDIRECT_3D_VECTORS@@A:BYTE		; d3d
;	COMDAT ??_C@_0BK@DMLELEFC@d3d?4line_buffer?9?$DOvertices@
CONST	SEGMENT
??_C@_0BK@DMLELEFC@d3d?4line_buffer?9?$DOvertices@ DB 'd3d.line_buffer->v'
	DB	'ertices', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_d3d_line_vertex_buffer@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_d3d_line_vertex_buffer@@YGXXZ@4JA DD 0187H ; `get_d3d_line_vertex_buffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_d3d_triangle_vertex_buffer@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_d3d_triangle_vertex_buffer@@YGXXZ@4JA DD 0125H ; `get_d3d_triangle_vertex_buffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??unlock_d3d_alpha_vertex_buffer@@YGXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unlock_d3d_alpha_vertex_buffer@@YGXH@Z@4JA DD 011aH ; `unlock_d3d_alpha_vertex_buffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@ENHNCIHF@buffer?5?$DM?5MAX_ALPHA_VERTEX_BUFFE@
CONST	SEGMENT
??_C@_0CC@ENHNCIHF@buffer?5?$DM?5MAX_ALPHA_VERTEX_BUFFE@ DB 'buffer < MAX'
	DB	'_ALPHA_VERTEX_BUFFERS', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_d3d_alpha_vertex_buffer_vertices@@YGPAU_D3DTLVERTEX@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_d3d_alpha_vertex_buffer_vertices@@YGPAU_D3DTLVERTEX@@H@Z@4JA DD 0107H ; `get_d3d_alpha_vertex_buffer_vertices'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DJ@BEMBMLEE@number_of_points?5?$DM?5MAXIMUM_D3D_@
CONST	SEGMENT
??_C@_0DJ@BEMBMLEE@number_of_points?5?$DM?5MAXIMUM_D3D_@ DB 'number_of_po'
	DB	'ints < MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_d3d_point_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_d3d_point_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z@4JA DD 0f7H ; `get_d3d_point_vertices_points_address'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CI@GMJDDIDP@d3d?4triangle_buffer?9?$DOvertices_u@
CONST	SEGMENT
??_C@_0CI@GMJDDIDP@d3d?4triangle_buffer?9?$DOvertices_u@ DB 'd3d.triangle'
	DB	'_buffer->vertices_used >= 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CFJNICEL@d3d?4triangle_buffer@
CONST	SEGMENT
??_C@_0BE@CFJNICEL@d3d?4triangle_buffer@ DB 'd3d.triangle_buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unroll_d3d_vertices@@YGXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unroll_d3d_vertices@@YGXH@Z@4JA DD 0d1H ; `unroll_d3d_vertices'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EL@KCPELIO@d3d?4triangle_buffer?9?$DOvertices_u@
CONST	SEGMENT
??_C@_0EL@KCPELIO@d3d?4triangle_buffer?9?$DOvertices_u@ DB 'd3d.triangle_'
	DB	'buffer->vertices_used < MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_d3d_new_vertices_points_address@@YGPAU_D3DTLVERTEX@@HPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_d3d_new_vertices_points_address@@YGPAU_D3DTLVERTEX@@HPAH@Z@4JA DD 0acH ; `get_d3d_new_vertices_points_address'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@DLICOHKE@d3d?4triangle_buffer?9?$DOvertices@
CONST	SEGMENT
??_C@_0BO@DLICOHKE@d3d?4triangle_buffer?9?$DOvertices@ DB 'd3d.triangle_b'
	DB	'uffer->vertices', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\d3dvert.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z@4JA DD 086H ; `get_d3d_vertices_points_address'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dvert.c
;	COMDAT ?get_d3d_line_vertex_buffer@@YGXXZ
_TEXT	SEGMENT
_count$ = -20						; size = 4
_index$ = -16						; size = 4
_found$ = -12						; size = 4
_maximum_vertices$ = -8					; size = 4
_maximum_index$ = -4					; size = 4
?get_d3d_line_vertex_buffer@@YGXXZ PROC			; get_d3d_line_vertex_buffer, COMDAT

; 391  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 392  : 
; 393  : 	int
; 394  : 		maximum_index,
; 395  : 		maximum_vertices,
; 396  : 		found,
; 397  : 		index,
; 398  : 		count;
; 399  : 
; 400  : 	maximum_index = 0,

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _maximum_index$[ebp], 0
  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _maximum_vertices$[ebp], 0

; 401  : 
; 402  : 	maximum_vertices = 0;
; 403  : 
; 404  : 	found = FALSE;

  00017	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _found$[ebp], 0

; 405  : 
; 406  : 	for ( count = 0; count < MAXIMUM_LINE_BUFFERS; count++ )

  0001e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@get_d3d_li
$LN2@get_d3d_li:
  00027	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_d3d_li:
  00030	83 7d ec 02	 cmp	 DWORD PTR _count$[ebp], 2
  00034	7d 4b		 jge	 SHORT $LN3@get_d3d_li

; 407  : 	{
; 408  : 
; 409  : 		if ( d3d.line_buffers[count].vertices )

  00036	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  0003d	83 b8 18 04 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132120], 0
  00044	74 2a		 je	 SHORT $LN5@get_d3d_li

; 410  : 		{
; 411  : 
; 412  : 			if ( d3d.line_buffers[count].vertices_used > maximum_vertices )

  00046	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  0004d	8b 88 10 04 02
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132112]
  00053	3b 4d f8	 cmp	 ecx, DWORD PTR _maximum_vertices$[ebp]
  00056	7e 16		 jle	 SHORT $LN7@get_d3d_li

; 413  : 			{
; 414  : 
; 415  : 				maximum_index = count;

  00058	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0005b	89 45 fc	 mov	 DWORD PTR _maximum_index$[ebp], eax

; 416  : 
; 417  : 				maximum_vertices = d3d.line_buffers[count].vertices_used;

  0005e	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00065	8b 88 10 04 02
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132112]
  0006b	89 4d f8	 mov	 DWORD PTR _maximum_vertices$[ebp], ecx
$LN7@get_d3d_li:

; 418  : 			}
; 419  : 		}
; 420  : 		else

  0006e	eb 0f		 jmp	 SHORT $LN6@get_d3d_li
$LN5@get_d3d_li:

; 421  : 		{
; 422  : 
; 423  : 			found = TRUE;

  00070	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1

; 424  : 
; 425  : 			index = count;

  00077	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0007a	89 45 f0	 mov	 DWORD PTR _index$[ebp], eax

; 426  : 
; 427  : 			break;

  0007d	eb 02		 jmp	 SHORT $LN3@get_d3d_li
$LN6@get_d3d_li:

; 428  : 		}
; 429  : 	}

  0007f	eb a6		 jmp	 SHORT $LN2@get_d3d_li
$LN3@get_d3d_li:

; 430  : 
; 431  : 	if ( !found )

  00081	83 7d f4 00	 cmp	 DWORD PTR _found$[ebp], 0
  00085	75 1c		 jne	 SHORT $LN8@get_d3d_li

; 432  : 	{
; 433  : 
; 434  : 		d3d.line_buffer = &d3d.line_buffers[maximum_index];

  00087	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _maximum_index$[ebp], 4128
  0008e	05 00 04 02 00	 add	 eax, OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+132096
  00093	a3 4c 24 02 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364, eax

; 435  : 
; 436  : 		flush_line_primitives ();

  00098	e8 00 00 00 00	 call	 ?flush_line_primitives@@YGXXZ ; flush_line_primitives

; 437  : 
; 438  : 		index = maximum_index;

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _maximum_index$[ebp]
  000a0	89 45 f0	 mov	 DWORD PTR _index$[ebp], eax
$LN8@get_d3d_li:

; 439  : 	}
; 440  : 
; 441  : 	d3d.line_buffer = &d3d.line_buffers[index];

  000a3	69 45 f0 20 10
	00 00		 imul	 eax, DWORD PTR _index$[ebp], 4128
  000aa	05 00 04 02 00	 add	 eax, OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+132096
  000af	a3 4c 24 02 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364, eax

; 442  : 
; 443  : 	if ( !d3d.line_buffer->vertices )

  000b4	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  000b9	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000bd	75 35		 jne	 SHORT $LN9@get_d3d_li

; 444  : 	{
; 445  : 		
; 446  : 		d3d.line_buffer->vertices_used = 0;

  000bf	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  000c4	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 447  : 		d3d.line_buffer->indices_index = 0;

  000cb	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  000d0	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 448  : 	
; 449  : 		f3d_vertex_lock_strict ( d3d.line_buffer->buffer, DDLOCK_NOSYSLOCK | DDLOCK_WRITEONLY | DDLOCK_DISCARDCONTENTS | DDLOCK_SURFACEMEMORYPTR, ( LPVOID * ) &d3d.line_buffer->vertices );

  000d7	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  000dc	83 c0 18	 add	 eax, 24			; 00000018H
  000df	50		 push	 eax
  000e0	68 20 28 00 00	 push	 10272			; 00002820H
  000e5	8b 0d 4c 24 02
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  000eb	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 ?f3d_vertex_lock_strict@@YGXPAUIDirect3DVertexBuffer7@@IPAPAX@Z ; f3d_vertex_lock_strict
$LN9@get_d3d_li:

; 450  : 	}
; 451  : 
; 452  : 	ASSERT ( d3d.line_buffer->vertices );

  000f4	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  000f9	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000fd	75 18		 jne	 SHORT $LN1@get_d3d_li
  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_d3d_line_vertex_buffer@@YGXXZ@4JA
  00104	83 c0 3d	 add	 eax, 61			; 0000003dH
  00107	50		 push	 eax
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMLELEFC@d3d?4line_buffer?9?$DOvertices@
  00112	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN1@get_d3d_li:

; 453  : }

  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	5b		 pop	 ebx
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
?get_d3d_line_vertex_buffer@@YGXXZ ENDP			; get_d3d_line_vertex_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dvert.c
;	COMDAT ?get_d3d_triangle_vertex_buffer@@YGXXZ
_TEXT	SEGMENT
_data$ = -32						; size = 8
_count$ = -24						; size = 4
_index$ = -20						; size = 4
_found$ = -16						; size = 4
_maximum_vertices$ = -12				; size = 4
_maximum_index$ = -8					; size = 4
_free$ = -4						; size = 4
?get_d3d_triangle_vertex_buffer@@YGXXZ PROC		; get_d3d_triangle_vertex_buffer, COMDAT

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 294  : 	int
; 295  : 		free,
; 296  : 		maximum_index,
; 297  : 		maximum_vertices,
; 298  : 		found,
; 299  : 		index,
; 300  : 		count;
; 301  : 
; 302  : 	vertex_buffer_texture_data
; 303  : 		data;
; 304  : 
; 305  : 	index = -1;

  00009	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _index$[ebp], -1

; 306  : 	free = -1;

  00010	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _free$[ebp], -1

; 307  : 	maximum_index = 0,

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _maximum_index$[ebp], 0
  0001e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _maximum_vertices$[ebp], 0

; 308  : 	maximum_vertices = 0;
; 309  : 	found = FALSE;

  00025	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _found$[ebp], 0

; 310  : 
; 311  : 	get_d3d_current_texture_pointer ( &data );

  0002c	8d 45 e0	 lea	 eax, DWORD PTR _data$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?get_d3d_current_texture_pointer@@YGXPAUVERTEX_BUFFER_TEXTURE_DATA@@@Z ; get_d3d_current_texture_pointer

; 312  : 
; 313  : 	for ( count = 0; count < MAXIMUM_TRIANGLE_BUFFERS; count++ )

  00035	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0003c	eb 09		 jmp	 SHORT $LN4@get_d3d_tr
$LN2@get_d3d_tr:
  0003e	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  00041	83 c0 01	 add	 eax, 1
  00044	89 45 e8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_d3d_tr:
  00047	83 7d e8 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  0004b	7d 6b		 jge	 SHORT $LN3@get_d3d_tr

; 314  : 	{
; 315  : 
; 316  : 		if ( d3d.triangle_buffers[count].vertices )

  0004d	69 45 e8 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00054	83 b8 18 00 00
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+24], 0
  0005b	74 4d		 je	 SHORT $LN5@get_d3d_tr

; 317  : 		{
; 318  : 
; 319  : 			if ( d3d.triangle_buffers[count].texture.texture == data.texture )

  0005d	69 45 e8 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00064	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+8]
  0006a	3b 4d e0	 cmp	 ecx, DWORD PTR _data$[ebp]
  0006d	75 11		 jne	 SHORT $LN7@get_d3d_tr

; 320  : /*			if (	( d3d.triangle_buffers[count].texture.texture == data.texture ) &&
; 321  : 					( d3d.triangle_buffers[count].texture.texture_settings == data.texture_settings ) )*/
; 322  : 			{
; 323  : 
; 324  : 				found = TRUE;

  0006f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1

; 325  : 
; 326  : 				index = count;

  00076	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  00079	89 45 ec	 mov	 DWORD PTR _index$[ebp], eax

; 327  : 
; 328  : 				break;

  0007c	eb 3a		 jmp	 SHORT $LN3@get_d3d_tr

; 329  : 			}
; 330  : 			else

  0007e	eb 28		 jmp	 SHORT $LN8@get_d3d_tr
$LN7@get_d3d_tr:

; 331  : 			{
; 332  : 
; 333  : 				if ( d3d.triangle_buffers[count].vertices_used > maximum_vertices )

  00080	69 45 e8 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00087	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+16]
  0008d	3b 4d f4	 cmp	 ecx, DWORD PTR _maximum_vertices$[ebp]
  00090	7e 16		 jle	 SHORT $LN8@get_d3d_tr

; 334  : 				{
; 335  : 	
; 336  : 					maximum_index = count;

  00092	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  00095	89 45 f8	 mov	 DWORD PTR _maximum_index$[ebp], eax

; 337  : 	
; 338  : 					maximum_vertices = d3d.triangle_buffers[count].vertices_used;

  00098	69 45 e8 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  0009f	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+16]
  000a5	89 4d f4	 mov	 DWORD PTR _maximum_vertices$[ebp], ecx
$LN8@get_d3d_tr:

; 339  : 				}
; 340  : 			}
; 341  : 		}
; 342  : 		else

  000a8	eb 0c		 jmp	 SHORT $LN6@get_d3d_tr
$LN5@get_d3d_tr:

; 343  : 		{
; 344  : 
; 345  : 			if ( free == -1 )

  000aa	83 7d fc ff	 cmp	 DWORD PTR _free$[ebp], -1
  000ae	75 06		 jne	 SHORT $LN6@get_d3d_tr

; 346  : 			{
; 347  : 
; 348  : 				free = count;

  000b0	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  000b3	89 45 fc	 mov	 DWORD PTR _free$[ebp], eax
$LN6@get_d3d_tr:

; 349  : 			}
; 350  : 		}
; 351  : 	}

  000b6	eb 86		 jmp	 SHORT $LN2@get_d3d_tr
$LN3@get_d3d_tr:

; 352  : 
; 353  : 	if ( !found )

  000b8	83 7d f0 00	 cmp	 DWORD PTR _found$[ebp], 0
  000bc	75 26		 jne	 SHORT $LN11@get_d3d_tr

; 354  : 	{
; 355  : 
; 356  : 		if ( free != -1 )

  000be	83 7d fc ff	 cmp	 DWORD PTR _free$[ebp], -1
  000c2	74 08		 je	 SHORT $LN12@get_d3d_tr

; 357  : 		{
; 358  : 
; 359  : 			index = free;

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _free$[ebp]
  000c7	89 45 ec	 mov	 DWORD PTR _index$[ebp], eax

; 360  : 		}
; 361  : 		else

  000ca	eb 18		 jmp	 SHORT $LN11@get_d3d_tr
$LN12@get_d3d_tr:

; 362  : 		{
; 363  : 	
; 364  : 			force_flush_triangle_buffer ( &d3d.triangle_buffers[maximum_index] );

  000cc	69 45 f8 20 10
	00 00		 imul	 eax, DWORD PTR _maximum_index$[ebp], 4128
  000d3	05 00 00 00 00	 add	 eax, OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A ; d3d
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ; force_flush_triangle_buffer

; 365  : 	
; 366  : 			index = maximum_index;

  000de	8b 45 f8	 mov	 eax, DWORD PTR _maximum_index$[ebp]
  000e1	89 45 ec	 mov	 DWORD PTR _index$[ebp], eax
$LN11@get_d3d_tr:

; 367  : 		}
; 368  : 	}
; 369  : 
; 370  : 	d3d.triangle_buffer = &d3d.triangle_buffers[index];

  000e4	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _index$[ebp], 4128
  000eb	05 00 00 00 00	 add	 eax, OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A ; d3d
  000f0	a3 40 24 02 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, eax

; 371  : 
; 372  : 	if ( !d3d.triangle_buffer->vertices )

  000f5	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  000fa	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000fe	75 4b		 jne	 SHORT $LN14@get_d3d_tr

; 373  : 	{
; 374  : 	
; 375  : 		d3d.triangle_buffer->vertices_used = 0;

  00100	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00105	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 376  : 		d3d.triangle_buffer->indices_index = 0;

  0010c	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00111	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 377  : 		d3d.triangle_buffer->texture.texture = data.texture;

  00118	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0011d	8b 4d e0	 mov	 ecx, DWORD PTR _data$[ebp]
  00120	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 378  : 		d3d.triangle_buffer->texture.texture_settings = data.texture_settings;

  00123	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00128	8b 4d e4	 mov	 ecx, DWORD PTR _data$[ebp+4]
  0012b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 379  : 
; 380  : 		f3d_vertex_lock_strict ( d3d.triangle_buffer->buffer, DDLOCK_NOSYSLOCK | DDLOCK_WRITEONLY | DDLOCK_DISCARDCONTENTS | DDLOCK_SURFACEMEMORYPTR, ( LPVOID * ) &d3d.triangle_buffer->vertices );

  0012e	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00133	83 c0 18	 add	 eax, 24			; 00000018H
  00136	50		 push	 eax
  00137	68 20 28 00 00	 push	 10272			; 00002820H
  0013c	8b 0d 40 24 02
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00142	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00145	52		 push	 edx
  00146	e8 00 00 00 00	 call	 ?f3d_vertex_lock_strict@@YGXPAUIDirect3DVertexBuffer7@@IPAPAX@Z ; f3d_vertex_lock_strict
$LN14@get_d3d_tr:

; 381  : 	}
; 382  : 
; 383  : 	ASSERT ( d3d.triangle_buffer->vertices );

  0014b	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00150	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00154	75 18		 jne	 SHORT $LN1@get_d3d_tr
  00156	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_d3d_triangle_vertex_buffer@@YGXXZ@4JA
  0015b	83 c0 5a	 add	 eax, 90			; 0000005aH
  0015e	50		 push	 eax
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DLICOHKE@d3d?4triangle_buffer?9?$DOvertices@
  00169	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN1@get_d3d_tr:

; 384  : }

  0016e	5f		 pop	 edi
  0016f	5e		 pop	 esi
  00170	5b		 pop	 ebx
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c3		 ret	 0
?get_d3d_triangle_vertex_buffer@@YGXXZ ENDP		; get_d3d_triangle_vertex_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dvert.c
;	COMDAT ?unlock_d3d_alpha_vertex_buffer@@YGXH@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
?unlock_d3d_alpha_vertex_buffer@@YGXH@Z PROC		; unlock_d3d_alpha_vertex_buffer, COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 283  : 	ASSERT ( buffer < MAX_ALPHA_VERTEX_BUFFERS );

  00009	83 7d 08 10	 cmp	 DWORD PTR _buffer$[ebp], 16 ; 00000010H
  0000d	7c 18		 jl	 SHORT $LN2@unlock_d3d
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unlock_d3d_alpha_vertex_buffer@@YGXH@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@ENHNCIHF@buffer?5?$DM?5MAX_ALPHA_VERTEX_BUFFE@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@unlock_d3d:

; 284  : 
; 285  : 	f3d_vertex_unlock ( d3d.alpha_vertex_buffer[buffer] );

  00027	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0002a	8b 0c 85 60 24
	02 00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax*4+140384]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_unlock

; 286  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?unlock_d3d_alpha_vertex_buffer@@YGXH@Z ENDP		; unlock_d3d_alpha_vertex_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dvert.c
;	COMDAT ?get_d3d_alpha_vertex_buffer_vertices@@YGPAU_D3DTLVERTEX@@H@Z
_TEXT	SEGMENT
_vertices$ = -4						; size = 4
_buffer$ = 8						; size = 4
?get_d3d_alpha_vertex_buffer_vertices@@YGPAU_D3DTLVERTEX@@H@Z PROC ; get_d3d_alpha_vertex_buffer_vertices, COMDAT

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 264  : 	LPD3DTLVERTEX
; 265  : 		vertices;
; 266  : 
; 267  : 	ASSERT ( buffer < MAX_ALPHA_VERTEX_BUFFERS );

  00009	83 7d 08 10	 cmp	 DWORD PTR _buffer$[ebp], 16 ; 00000010H
  0000d	7c 18		 jl	 SHORT $LN2@get_d3d_al
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_d3d_alpha_vertex_buffer_vertices@@YGPAU_D3DTLVERTEX@@H@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@ENHNCIHF@buffer?5?$DM?5MAX_ALPHA_VERTEX_BUFFE@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_d3d_al:

; 268  : 
; 269  : 	if ( !f3d_vertex_lock ( d3d.alpha_vertex_buffer[buffer], DDLOCK_NOSYSLOCK | DDLOCK_WRITEONLY | DDLOCK_SURFACEMEMORYPTR, ( LPVOID * ) &vertices ) )

  00027	8d 45 fc	 lea	 eax, DWORD PTR _vertices$[ebp]
  0002a	50		 push	 eax
  0002b	68 20 08 00 00	 push	 2080			; 00000820H
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00033	8b 14 8d 60 24
	02 00		 mov	 edx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[ecx*4+140384]
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 ?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z ; f3d_vertex_lock
  00040	85 c0		 test	 eax, eax
  00042	75 04		 jne	 SHORT $LN3@get_d3d_al

; 270  : 	{
; 271  : 		return ( NULL );

  00044	33 c0		 xor	 eax, eax
  00046	eb 03		 jmp	 SHORT $LN1@get_d3d_al
$LN3@get_d3d_al:

; 272  : 	}
; 273  : 
; 274  : 	return ( vertices );

  00048	8b 45 fc	 mov	 eax, DWORD PTR _vertices$[ebp]
$LN1@get_d3d_al:

; 275  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?get_d3d_alpha_vertex_buffer_vertices@@YGPAU_D3DTLVERTEX@@H@Z ENDP ; get_d3d_alpha_vertex_buffer_vertices
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dvert.c
;	COMDAT ?get_d3d_point_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z
_TEXT	SEGMENT
_vertices$ = -4						; size = 4
_number_of_points$ = 8					; size = 4
?get_d3d_point_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z PROC ; get_d3d_point_vertices_points_address, COMDAT

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 248  : 	LPD3DTLVERTEX
; 249  : 		vertices;
; 250  : 
; 251  : 	ASSERT ( number_of_points < MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER );

  00009	81 7d 08 7a 01
	00 00		 cmp	 DWORD PTR _number_of_points$[ebp], 378 ; 0000017aH
  00010	7c 18		 jl	 SHORT $LN2@get_d3d_po
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_d3d_point_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@BEMBMLEE@number_of_points?5?$DM?5MAXIMUM_D3D_@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_d3d_po:

; 252  : 
; 253  : 	f3d_vertex_lock_strict ( d3d.point_vertex_buffer, DDLOCK_NOSYSLOCK | DDLOCK_WRITEONLY | DDLOCK_SURFACEMEMORYPTR, ( LPVOID * ) &vertices );

  0002a	8d 45 fc	 lea	 eax, DWORD PTR _vertices$[ebp]
  0002d	50		 push	 eax
  0002e	68 20 08 00 00	 push	 2080			; 00000820H
  00033	8b 0d 58 24 02
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140376
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?f3d_vertex_lock_strict@@YGXPAUIDirect3DVertexBuffer7@@IPAPAX@Z ; f3d_vertex_lock_strict

; 254  : 
; 255  : 	return ( vertices );

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _vertices$[ebp]

; 256  : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?get_d3d_point_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z ENDP ; get_d3d_point_vertices_points_address
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dvert.c
;	COMDAT ?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ
_TEXT	SEGMENT
?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ PROC ; get_d3d_line_vertices_points_address, COMDAT

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 224  : 
; 225  : 	if ( !d3d.line_buffer )

  00009	83 3d 4c 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364, 0
  00010	75 05		 jne	 SHORT $LN2@get_d3d_li

; 226  : 	{
; 227  : 
; 228  : 		get_d3d_line_vertex_buffer ();

  00012	e8 00 00 00 00	 call	 ?get_d3d_line_vertex_buffer@@YGXXZ ; get_d3d_line_vertex_buffer
$LN2@get_d3d_li:

; 229  : 	}
; 230  : 
; 231  : 	while ( ( d3d.line_buffer->vertices_used + 2 ) >= MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER )

  00017	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  0001c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001f	83 c1 02	 add	 ecx, 2
  00022	81 f9 7a 01 00
	00		 cmp	 ecx, 378		; 0000017aH
  00028	7c 0c		 jl	 SHORT $LN3@get_d3d_li

; 232  : 	{
; 233  : 
; 234  : 		flush_line_primitives ();

  0002a	e8 00 00 00 00	 call	 ?flush_line_primitives@@YGXXZ ; flush_line_primitives

; 235  : 
; 236  : 		get_d3d_line_vertex_buffer ();

  0002f	e8 00 00 00 00	 call	 ?get_d3d_line_vertex_buffer@@YGXXZ ; get_d3d_line_vertex_buffer

; 237  : 	}

  00034	eb e1		 jmp	 SHORT $LN2@get_d3d_li
$LN3@get_d3d_li:

; 238  : 
; 239  : 	return ( d3d.line_buffer->vertices + d3d.line_buffer->vertices_used );

  00036	a1 4c 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  0003b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0003e	c1 e0 05	 shl	 eax, 5
  00041	8b 0d 4c 24 02
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364
  00047	03 41 18	 add	 eax, DWORD PTR [ecx+24]

; 240  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ ENDP ; get_d3d_line_vertices_points_address
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dvert.c
;	COMDAT ?unroll_d3d_vertices@@YGXH@Z
_TEXT	SEGMENT
_number_of_vertices$ = 8				; size = 4
?unroll_d3d_vertices@@YGXH@Z PROC			; unroll_d3d_vertices, COMDAT

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 210  : 
; 211  : 	ASSERT ( d3d.triangle_buffer );

  00009	83 3d 40 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0
  00010	75 18		 jne	 SHORT $LN2@unroll_d3d
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unroll_d3d_vertices@@YGXH@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CFJNICEL@d3d?4triangle_buffer@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@unroll_d3d:

; 212  : 
; 213  : 	d3d.triangle_buffer->vertices_used -= number_of_vertices;

  0002a	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0002f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00032	2b 4d 08	 sub	 ecx, DWORD PTR _number_of_vertices$[ebp]
  00035	8b 15 40 24 02
	00		 mov	 edx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0003b	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 214  : 
; 215  : 	ASSERT ( d3d.triangle_buffer->vertices_used >= 0 );

  0003e	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00043	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00047	7d 18		 jge	 SHORT $LN1@unroll_d3d
  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unroll_d3d_vertices@@YGXH@Z@4JA
  0004e	83 c0 06	 add	 eax, 6
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@GMJDDIDP@d3d?4triangle_buffer?9?$DOvertices_u@
  0005c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN1@unroll_d3d:

; 216  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?unroll_d3d_vertices@@YGXH@Z ENDP			; unroll_d3d_vertices
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dvert.c
;	COMDAT ?get_d3d_new_vertices_points_address@@YGPAU_D3DTLVERTEX@@HPAH@Z
_TEXT	SEGMENT
_vertices$ = -4						; size = 4
_number_of_vertices$ = 8				; size = 4
_offset$ = 12						; size = 4
?get_d3d_new_vertices_points_address@@YGPAU_D3DTLVERTEX@@HPAH@Z PROC ; get_d3d_new_vertices_points_address, COMDAT

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 173  : 
; 174  : 	LPD3DTLVERTEX
; 175  : 		vertices;
; 176  : 
; 177  : 	if ( !d3d.triangle_buffer )

  00009	83 3d 40 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0
  00010	75 05		 jne	 SHORT $LN2@get_d3d_ne

; 178  : 	{
; 179  : 
; 180  : 		get_d3d_triangle_vertex_buffer ();

  00012	e8 00 00 00 00	 call	 ?get_d3d_triangle_vertex_buffer@@YGXXZ ; get_d3d_triangle_vertex_buffer
$LN2@get_d3d_ne:

; 181  : 	}
; 182  : 
; 183  : 	while ( ( d3d.triangle_buffer->vertices_used + number_of_vertices ) >= MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER )

  00017	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0001c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001f	03 4d 08	 add	 ecx, DWORD PTR _number_of_vertices$[ebp]
  00022	81 f9 7a 01 00
	00		 cmp	 ecx, 378		; 0000017aH
  00028	7c 1c		 jl	 SHORT $LN3@get_d3d_ne

; 184  : 	{
; 185  : 
; 186  : 		force_flush_triangle_buffer ( d3d.triangle_buffer );

  0002a	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ; force_flush_triangle_buffer

; 187  : 
; 188  : 		d3d.triangle_buffer = NULL;

  00035	c7 05 40 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0

; 189  : 
; 190  : 		get_d3d_triangle_vertex_buffer ();

  0003f	e8 00 00 00 00	 call	 ?get_d3d_triangle_vertex_buffer@@YGXXZ ; get_d3d_triangle_vertex_buffer

; 191  : 	}

  00044	eb d1		 jmp	 SHORT $LN2@get_d3d_ne
$LN3@get_d3d_ne:

; 192  : 
; 193  : 	*offset = d3d.triangle_buffer->vertices_used;

  00046	8b 45 0c	 mov	 eax, DWORD PTR _offset$[ebp]
  00049	8b 0d 40 24 02
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0004f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00052	89 10		 mov	 DWORD PTR [eax], edx

; 194  : 
; 195  : 	vertices = d3d.triangle_buffer->vertices + d3d.triangle_buffer->vertices_used;

  00054	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00059	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005c	c1 e1 05	 shl	 ecx, 5
  0005f	8b 15 40 24 02
	00		 mov	 edx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00065	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  00068	89 4d fc	 mov	 DWORD PTR _vertices$[ebp], ecx

; 196  : 
; 197  : 	d3d.triangle_buffer->vertices_used += number_of_vertices;

  0006b	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00070	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00073	03 4d 08	 add	 ecx, DWORD PTR _number_of_vertices$[ebp]
  00076	8b 15 40 24 02
	00		 mov	 edx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0007c	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 198  : 
; 199  : 	ASSERT ( d3d.triangle_buffer->vertices_used < MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER );

  0007f	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00084	81 78 10 7a 01
	00 00		 cmp	 DWORD PTR [eax+16], 378	; 0000017aH
  0008b	7c 18		 jl	 SHORT $LN5@get_d3d_ne
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_d3d_new_vertices_points_address@@YGPAU_D3DTLVERTEX@@HPAH@Z@4JA
  00092	83 c0 1b	 add	 eax, 27			; 0000001bH
  00095	50		 push	 eax
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@KCPELIO@d3d?4triangle_buffer?9?$DOvertices_u@
  000a0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_d3d_ne:

; 200  : 
; 201  : 	return ( vertices );

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _vertices$[ebp]

; 202  : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 08 00	 ret	 8
?get_d3d_new_vertices_points_address@@YGPAU_D3DTLVERTEX@@HPAH@Z ENDP ; get_d3d_new_vertices_points_address
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dvert.c
;	COMDAT ?get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z
_TEXT	SEGMENT
_second$ = -8						; size = 4
_first$ = -4						; size = 4
_number_of_vertices$ = 8				; size = 4
?get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z PROC ; get_d3d_vertices_points_address, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 135  : 
; 136  : 	int
; 137  : 		first,
; 138  : 		second;
; 139  : 
; 140  : 	first = second = 0;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _second$[ebp], 0
  00010	8b 45 f8	 mov	 eax, DWORD PTR _second$[ebp]
  00013	89 45 fc	 mov	 DWORD PTR _first$[ebp], eax

; 141  : 
; 142  : 	if ( !d3d.triangle_buffer )

  00016	83 3d 40 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0
  0001d	75 0c		 jne	 SHORT $LN2@get_d3d_ve

; 143  : 	{
; 144  : 
; 145  : 		first = TRUE;

  0001f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _first$[ebp], 1

; 146  : 
; 147  : 		get_d3d_triangle_vertex_buffer ();

  00026	e8 00 00 00 00	 call	 ?get_d3d_triangle_vertex_buffer@@YGXXZ ; get_d3d_triangle_vertex_buffer
$LN2@get_d3d_ve:

; 148  : 	}
; 149  : 
; 150  : 	while ( ( d3d.triangle_buffer->vertices_used + number_of_vertices ) >= MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER )

  0002b	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00030	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00033	03 4d 08	 add	 ecx, DWORD PTR _number_of_vertices$[ebp]
  00036	81 f9 7a 01 00
	00		 cmp	 ecx, 378		; 0000017aH
  0003c	7c 25		 jl	 SHORT $LN3@get_d3d_ve

; 151  : 	{
; 152  : 
; 153  : 		second++;

  0003e	8b 45 f8	 mov	 eax, DWORD PTR _second$[ebp]
  00041	83 c0 01	 add	 eax, 1
  00044	89 45 f8	 mov	 DWORD PTR _second$[ebp], eax

; 154  : 
; 155  : 		force_flush_triangle_buffer ( d3d.triangle_buffer );

  00047	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ; force_flush_triangle_buffer

; 156  : 
; 157  : 		d3d.triangle_buffer = NULL;

  00052	c7 05 40 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0

; 158  : 
; 159  : 		get_d3d_triangle_vertex_buffer ();

  0005c	e8 00 00 00 00	 call	 ?get_d3d_triangle_vertex_buffer@@YGXXZ ; get_d3d_triangle_vertex_buffer

; 160  : 	}

  00061	eb c8		 jmp	 SHORT $LN2@get_d3d_ve
$LN3@get_d3d_ve:

; 161  : 
; 162  : 	ASSERT ( d3d.triangle_buffer->vertices );

  00063	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00068	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0006c	75 18		 jne	 SHORT $LN5@get_d3d_ve
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z@4JA
  00073	83 c0 1c	 add	 eax, 28			; 0000001cH
  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MPMFNHIA@c?3?2users?2nhv90?2projects?2eech?2mo@
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DLICOHKE@d3d?4triangle_buffer?9?$DOvertices@
  00081	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_d3d_ve:

; 163  : 
; 164  : 	return ( d3d.triangle_buffer->vertices + d3d.triangle_buffer->vertices_used );

  00086	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  0008b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0008e	c1 e0 05	 shl	 eax, 5
  00091	8b 0d 40 24 02
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00097	03 41 18	 add	 eax, DWORD PTR [ecx+24]

; 165  : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
?get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z ENDP ; get_d3d_vertices_points_address
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3dvert.c
;	COMDAT ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z
_TEXT	SEGMENT
_number_of_vertices$ = -4				; size = 4
_polygon$ = 8						; size = 4
_return_number_of_vertices$ = 12			; size = 4
?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z PROC ; get_d3d_vertices_address, COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 94   : 
; 95   : 	int
; 96   : 		number_of_vertices;
; 97   : 
; 98   : 	number_of_vertices = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _number_of_vertices$[ebp], 0
$LN2@get_d3d_ve:

; 99   : 
; 100  : 	while ( polygon )

  00010	83 7d 08 00	 cmp	 DWORD PTR _polygon$[ebp], 0
  00014	74 14		 je	 SHORT $LN3@get_d3d_ve

; 101  : 	{
; 102  : 
; 103  : 		polygon = polygon->next_vertex;

  00016	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00019	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0001c	89 4d 08	 mov	 DWORD PTR _polygon$[ebp], ecx

; 104  : 
; 105  : 		number_of_vertices++;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _number_of_vertices$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR _number_of_vertices$[ebp], eax

; 106  : 	}

  00028	eb e6		 jmp	 SHORT $LN2@get_d3d_ve
$LN3@get_d3d_ve:

; 107  : 
; 108  : 	*return_number_of_vertices = number_of_vertices;

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _return_number_of_vertices$[ebp]
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _number_of_vertices$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 109  : 
; 110  : 	if ( !d3d.triangle_buffer )

  00032	83 3d 40 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0
  00039	75 05		 jne	 SHORT $LN4@get_d3d_ve

; 111  : 	{
; 112  : 
; 113  : 		get_d3d_triangle_vertex_buffer ();

  0003b	e8 00 00 00 00	 call	 ?get_d3d_triangle_vertex_buffer@@YGXXZ ; get_d3d_triangle_vertex_buffer
$LN4@get_d3d_ve:

; 114  : 	}
; 115  : 
; 116  : 	while ( ( d3d.triangle_buffer->vertices_used + number_of_vertices ) >= MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER )

  00040	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00045	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00048	03 4d fc	 add	 ecx, DWORD PTR _number_of_vertices$[ebp]
  0004b	81 f9 7a 01 00
	00		 cmp	 ecx, 378		; 0000017aH
  00051	7c 1c		 jl	 SHORT $LN5@get_d3d_ve

; 117  : 	{
; 118  : 
; 119  : 		force_flush_triangle_buffer ( d3d.triangle_buffer );

  00053	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?force_flush_triangle_buffer@@YGXPAUVERTEX_BUFFER_HEADER@@@Z ; force_flush_triangle_buffer

; 120  : 
; 121  : 		d3d.triangle_buffer = NULL;

  0005e	c7 05 40 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0

; 122  : 
; 123  : 		get_d3d_triangle_vertex_buffer ();

  00068	e8 00 00 00 00	 call	 ?get_d3d_triangle_vertex_buffer@@YGXXZ ; get_d3d_triangle_vertex_buffer

; 124  : 	}

  0006d	eb d1		 jmp	 SHORT $LN4@get_d3d_ve
$LN5@get_d3d_ve:

; 125  : 
; 126  : 	return ( d3d.triangle_buffer->vertices + d3d.triangle_buffer->vertices_used );

  0006f	a1 40 24 02 00	 mov	 eax, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00074	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00077	c1 e0 05	 shl	 eax, 5
  0007a	8b 0d 40 24 02
	00		 mov	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352
  00080	03 41 18	 add	 eax, DWORD PTR [ecx+24]

; 127  : }

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ENDP ; get_d3d_vertices_address
_TEXT	ENDS
END
