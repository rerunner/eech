; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\textsys.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?texture_formats@@3PAUTEXTURE_FORMAT@@A		; texture_formats
PUBLIC	?compress_system_textures@@3HA			; compress_system_textures
PUBLIC	?d3d_allow_paletted_textures@@3HA		; d3d_allow_paletted_textures
PUBLIC	?d3d_paletted_textures_supported@@3HA		; d3d_paletted_textures_supported
PUBLIC	?d3d_use_evict_textures@@3HA			; d3d_use_evict_textures
PUBLIC	?d3d_allow_32bit_textures@@3HA			; d3d_allow_32bit_textures
PUBLIC	?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
PUBLIC	?number_available_texture_formats@@3HA		; number_available_texture_formats
PUBLIC	?hardware_texture_colour_table@@3PAUtagPALETTEENTRY@@A ; hardware_texture_colour_table
_BSS	SEGMENT
?texture_formats@@3PAUTEXTURE_FORMAT@@A DB 01c0H DUP (?) ; texture_formats
?compress_system_textures@@3HA DD 01H DUP (?)		; compress_system_textures
?d3d_allow_paletted_textures@@3HA DD 01H DUP (?)	; d3d_allow_paletted_textures
?d3d_paletted_textures_supported@@3HA DD 01H DUP (?)	; d3d_paletted_textures_supported
?available_texture_formats@@3PAUTEXTURE_FORMAT@@A DB 04000H DUP (?) ; available_texture_formats
?number_available_texture_formats@@3HA DD 01H DUP (?)	; number_available_texture_formats
?hardware_texture_colour_table@@3PAUtagPALETTEENTRY@@A DD 0100H DUP (?) ; hardware_texture_colour_table
_BSS	ENDS
_DATA	SEGMENT
?d3d_use_evict_textures@@3HA DD 01H			; d3d_use_evict_textures
?d3d_allow_32bit_textures@@3HA DD 01H			; d3d_allow_32bit_textures
_DATA	ENDS
PUBLIC	?initialise_texture_system@@YGHXZ		; initialise_texture_system
PUBLIC	?initialise_system_texture_formats@@YGHXZ	; initialise_system_texture_formats
PUBLIC	?release_all_textures@@YGXXZ			; release_all_textures
PUBLIC	?free_all_hardware_textures@@YGXXZ		; free_all_hardware_textures
PUBLIC	?lock_texture@@YGHPAUSCREEN@@H@Z		; lock_texture
PUBLIC	?unlock_texture@@YGHPAUSCREEN@@@Z		; unlock_texture
PUBLIC	?report_free_texture_memory@@YGXXZ		; report_free_texture_memory
PUBLIC	?__LINE__Var@?0??initialise_system_texture_formats@@YGHXZ@4JA ; `initialise_system_texture_formats'::`1'::__LINE__Var
PUBLIC	??_C@_0DI@GKCALDPH@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0CC@OIAADEGB@get_graphics_system_initialised@ ; `string'
PUBLIC	??_C@_0DJ@DDJNAKLN@Unable?5to?5find?5a?5suitable?5textu@ ; `string'
PUBLIC	??_C@_0DC@EIIFMCBA@Texture?5?$CFd?3?5Valid?5?$CFd?5Palette?5?$CFd@ ; `string'
PUBLIC	??_C@_0DH@GGEAMGCE@Unable?5to?5find?5a?5suitable?5textu@ ; `string'
PUBLIC	??_C@_0EF@KFKJAGF@Got?5a?5wierd?5texture?5format?5that@ ; `string'
PUBLIC	??_C@_0BN@IHJAKNGM@Texture?5memory?3?5?$CFd?0?5Free?3?5?$CFd@ ; `string'
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?register_exit_function@@YGXP6GXXZ@Z:PROC	; register_exit_function
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?get_graphics_system_initialised@@YGHXZ:PROC	; get_graphics_system_initialised
EXTRN	?set_texture_pixel_formats@@YGXXZ:PROC		; set_texture_pixel_formats
EXTRN	?release_system_textures@@YGXXZ:PROC		; release_system_textures
EXTRN	?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z:PROC ; f3d_surface_description
EXTRN	?f3d_surface_render@@YGPAUIDirectDrawSurface7@@XZ:PROC ; f3d_surface_render
EXTRN	?f3d_enumerate_formats@@YGHP6GJPAU_DDPIXELFORMAT@@PAX@Z1@Z:PROC ; f3d_enumerate_formats
EXTRN	?f3d_evict_textures@@YGXXZ:PROC			; f3d_evict_textures
EXTRN	?f3d_texture_lock@@YGHPAUSCREEN@@H@Z:PROC	; f3d_texture_lock
EXTRN	?f3d_texture_unlock@@YGHPAUSCREEN@@@Z:PROC	; f3d_texture_unlock
EXTRN	?f3d_memory@@YGXPAK0@Z:PROC			; f3d_memory
;	COMDAT ??_C@_0BN@IHJAKNGM@Texture?5memory?3?5?$CFd?0?5Free?3?5?$CFd@
CONST	SEGMENT
??_C@_0BN@IHJAKNGM@Texture?5memory?3?5?$CFd?0?5Free?3?5?$CFd@ DB 'Texture'
	DB	' memory: %d, Free: %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@KFKJAGF@Got?5a?5wierd?5texture?5format?5that@
CONST	SEGMENT
??_C@_0EF@KFKJAGF@Got?5a?5wierd?5texture?5format?5that@ DB 'Got a wierd t'
	DB	'exture format that Im not quite sure about! - debug me!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GGEAMGCE@Unable?5to?5find?5a?5suitable?5textu@
CONST	SEGMENT
??_C@_0DH@GGEAMGCE@Unable?5to?5find?5a?5suitable?5textu@ DB 'Unable to fi'
	DB	'nd a suitable texture format on this card!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EIIFMCBA@Texture?5?$CFd?3?5Valid?5?$CFd?5Palette?5?$CFd@
CONST	SEGMENT
??_C@_0DC@EIIFMCBA@Texture?5?$CFd?3?5Valid?5?$CFd?5Palette?5?$CFd@ DB 'Te'
	DB	'xture %d: Valid %d Palette %d, R:%d, G:%d, B:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DDJNAKLN@Unable?5to?5find?5a?5suitable?5textu@
CONST	SEGMENT
??_C@_0DJ@DDJNAKLN@Unable?5to?5find?5a?5suitable?5textu@ DB 'Unable to fi'
	DB	'nd a suitable texture format for the 3d card', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OIAADEGB@get_graphics_system_initialised@
CONST	SEGMENT
??_C@_0CC@OIAADEGB@get_graphics_system_initialised@ DB 'get_graphics_syst'
	DB	'em_initialised()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@GKCALDPH@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DI@GKCALDPH@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\textsys.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_system_texture_formats@@YGHXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_system_texture_formats@@YGHXZ@4JA DD 079H ; `initialise_system_texture_formats'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textsys.c
;	COMDAT ?enumerate_texture_formats@@YGJPAU_DDPIXELFORMAT@@PAX@Z
_TEXT	SEGMENT
_a$ = -20						; size = 4
_b$ = -16						; size = 4
_g$ = -12						; size = 4
_r$ = -8						; size = 4
_m$ = -4						; size = 4
_format$ = 8						; size = 4
_lpContext$ = 12					; size = 4
?enumerate_texture_formats@@YGJPAU_DDPIXELFORMAT@@PAX@Z PROC ; enumerate_texture_formats, COMDAT

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 430  : 
; 431  : 	unsigned long
; 432  : 		m;
; 433  : 
; 434  : 	int
; 435  : 		r,
; 436  : 		g,
; 437  : 		b,
; 438  : 		a;
; 439  : 
; 440  : 	//
; 441  : 	// Set the surface description
; 442  : 	//
; 443  : 
; 444  : 	memset ( &available_texture_formats[number_available_texture_formats], 0, sizeof ( texture_format ) );

  00009	6a 40		 push	 64			; 00000040H
  0000b	6a 00		 push	 0
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  00012	c1 e0 06	 shl	 eax, 6
  00015	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _memset
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 445  : 	
; 446  : 	memcpy ( &available_texture_formats[number_available_texture_formats].format, format, sizeof ( DDPIXELFORMAT ) );

  00023	6a 20		 push	 32			; 00000020H
  00025	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  00028	50		 push	 eax
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  0002f	c1 e1 06	 shl	 ecx, 6
  00032	81 c1 20 00 00
	00		 add	 ecx, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A+32
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 _memcpy
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 447  : 
; 448  : 	//
; 449  : 	// Assess the texture format
; 450  : 	//
; 451  : 
; 452  : 	if ( format->dwFlags & DDPF_PALETTEINDEXED8 )

  00041	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  00044	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00047	83 e1 20	 and	 ecx, 32			; 00000020H
  0004a	0f 84 b1 00 00
	00		 je	 $LN26@enumerate_

; 453  : 	{
; 454  : 
; 455  : 		if ( d3d_allow_paletted_textures )

  00050	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_allow_paletted_textures@@3HA, 0 ; d3d_allow_paletted_textures
  00057	0f 84 95 00 00
	00		 je	 $LN28@enumerate_

; 456  : 		{
; 457  : 	
; 458  : 			available_texture_formats[number_available_texture_formats].valid = TRUE;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  00062	c1 e0 06	 shl	 eax, 6
  00065	c7 80 04 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+4], 1

; 459  : 			available_texture_formats[number_available_texture_formats].palette = TRUE;

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  00074	c1 e0 06	 shl	 eax, 6
  00077	c7 80 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax], 1

; 460  : 			available_texture_formats[number_available_texture_formats].bpp_palette = 8;

  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  00086	c1 e0 06	 shl	 eax, 6
  00089	c7 80 08 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+8], 8

; 461  : 			available_texture_formats[number_available_texture_formats].bpp_colour = 0;

  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  00098	c1 e0 06	 shl	 eax, 6
  0009b	c7 80 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+12], 0

; 462  : 			available_texture_formats[number_available_texture_formats].bpp_red = 0;

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  000aa	c1 e0 06	 shl	 eax, 6
  000ad	c7 80 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+16], 0

; 463  : 			available_texture_formats[number_available_texture_formats].bpp_green = 0;

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  000bc	c1 e0 06	 shl	 eax, 6
  000bf	c7 80 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+20], 0

; 464  : 			available_texture_formats[number_available_texture_formats].bpp_blue = 0;

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  000ce	c1 e0 06	 shl	 eax, 6
  000d1	c7 80 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+24], 0

; 465  : 
; 466  : 			d3d_paletted_textures_supported = TRUE;

  000db	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_paletted_textures_supported@@3HA, 1 ; d3d_paletted_textures_supported

; 467  : 	
; 468  : 			number_available_texture_formats ++;

  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  000ea	83 c0 01	 add	 eax, 1
  000ed	a3 00 00 00 00	 mov	 DWORD PTR ?number_available_texture_formats@@3HA, eax ; number_available_texture_formats
$LN28@enumerate_:

; 469  : 		}
; 470  : 
; 471  : 		return ( DDENUMRET_OK );

  000f2	b8 01 00 00 00	 mov	 eax, 1
  000f7	e9 65 02 00 00	 jmp	 $LN1@enumerate_
  000fc	e9 60 02 00 00	 jmp	 $LN1@enumerate_
$LN26@enumerate_:

; 472  : 	}
; 473  : 	else if ( format->dwFlags & DDPF_PALETTEINDEXED4 )

  00101	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  00104	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00107	83 e1 08	 and	 ecx, 8
  0010a	74 0f		 je	 SHORT $LN29@enumerate_

; 474  : 	{
; 475  : 
; 476  : 		//
; 477  : 		// DEBUG DEBUG - ignore 4bpp palette texture format.....
; 478  : 		//						perhaps put it back in later. ( yeah right )
; 479  : 		//
; 480  : //		available_texture_formats[number_available_texture_formats].palette = TRUE;
; 481  : 
; 482  : //		available_texture_formats[number_available_texture_formats].bpp_palette = 4;
; 483  : 
; 484  : //		number_available_texture_formats ++;
; 485  : 
; 486  : //		debug_log ( "Got palette 4bit entry texture format" );
; 487  : 
; 488  : 		return ( DDENUMRET_OK );

  0010c	b8 01 00 00 00	 mov	 eax, 1
  00111	e9 4b 02 00 00	 jmp	 $LN1@enumerate_
  00116	e9 46 02 00 00	 jmp	 $LN1@enumerate_
$LN29@enumerate_:

; 489  : 	}
; 490  : 	else if ( format->dwFlags & DDPF_RGB )

  0011b	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  0011e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00121	83 e1 40	 and	 ecx, 64			; 00000040H
  00124	0f 84 25 02 00
	00		 je	 $LN31@enumerate_

; 491  : 	{
; 492  : 
; 493  : 		available_texture_formats[number_available_texture_formats].valid = TRUE;

  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  0012f	c1 e0 06	 shl	 eax, 6
  00132	c7 80 04 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+4], 1

; 494  : 		available_texture_formats[number_available_texture_formats].palette = FALSE;

  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  00141	c1 e0 06	 shl	 eax, 6
  00144	c7 80 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax], 0

; 495  : 		available_texture_formats[number_available_texture_formats].bpp_palette = 0;

  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  00153	c1 e0 06	 shl	 eax, 6
  00156	c7 80 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+8], 0

; 496  : 
; 497  : 		for ( r=0, m=format->dwRBitMask; !(m & 1); r++, m >>= 1)

  00160	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _r$[ebp], 0
  00167	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  0016a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0016d	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
  00170	eb 11		 jmp	 SHORT $LN4@enumerate_
$LN2@enumerate_:
  00172	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  00175	83 c0 01	 add	 eax, 1
  00178	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax
  0017b	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  0017e	d1 e9		 shr	 ecx, 1
  00180	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN4@enumerate_:
  00183	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  00186	83 e0 01	 and	 eax, 1
  00189	75 02		 jne	 SHORT $LN3@enumerate_

; 498  : 				;

  0018b	eb e5		 jmp	 SHORT $LN2@enumerate_
$LN3@enumerate_:

; 499  : 		
; 500  : 		for ( r=0; m & 1; r++, m >>= 1)

  0018d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _r$[ebp], 0
  00194	eb 11		 jmp	 SHORT $LN7@enumerate_
$LN5@enumerate_:
  00196	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  00199	83 c0 01	 add	 eax, 1
  0019c	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax
  0019f	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  001a2	d1 e9		 shr	 ecx, 1
  001a4	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN7@enumerate_:
  001a7	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  001aa	83 e0 01	 and	 eax, 1
  001ad	74 02		 je	 SHORT $LN6@enumerate_

; 501  : 				;

  001af	eb e5		 jmp	 SHORT $LN5@enumerate_
$LN6@enumerate_:

; 502  : 		
; 503  : 		for ( g=0, m=format->dwGBitMask; !(m & 1); g++, m >>= 1)

  001b1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _g$[ebp], 0
  001b8	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  001bb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001be	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
  001c1	eb 11		 jmp	 SHORT $LN10@enumerate_
$LN8@enumerate_:
  001c3	8b 45 f4	 mov	 eax, DWORD PTR _g$[ebp]
  001c6	83 c0 01	 add	 eax, 1
  001c9	89 45 f4	 mov	 DWORD PTR _g$[ebp], eax
  001cc	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  001cf	d1 e9		 shr	 ecx, 1
  001d1	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN10@enumerate_:
  001d4	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  001d7	83 e0 01	 and	 eax, 1
  001da	75 02		 jne	 SHORT $LN9@enumerate_

; 504  : 				;

  001dc	eb e5		 jmp	 SHORT $LN8@enumerate_
$LN9@enumerate_:

; 505  : 		
; 506  : 		for ( g=0; m & 1; g++, m >>= 1)

  001de	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _g$[ebp], 0
  001e5	eb 11		 jmp	 SHORT $LN13@enumerate_
$LN11@enumerate_:
  001e7	8b 45 f4	 mov	 eax, DWORD PTR _g$[ebp]
  001ea	83 c0 01	 add	 eax, 1
  001ed	89 45 f4	 mov	 DWORD PTR _g$[ebp], eax
  001f0	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  001f3	d1 e9		 shr	 ecx, 1
  001f5	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN13@enumerate_:
  001f8	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  001fb	83 e0 01	 and	 eax, 1
  001fe	74 02		 je	 SHORT $LN12@enumerate_

; 507  : 				;

  00200	eb e5		 jmp	 SHORT $LN11@enumerate_
$LN12@enumerate_:

; 508  : 		
; 509  : 		for ( b=0, m=format->dwBBitMask; !(m & 1); b++, m >>= 1)

  00202	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _b$[ebp], 0
  00209	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  0020c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0020f	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
  00212	eb 11		 jmp	 SHORT $LN16@enumerate_
$LN14@enumerate_:
  00214	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00217	83 c0 01	 add	 eax, 1
  0021a	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  0021d	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  00220	d1 e9		 shr	 ecx, 1
  00222	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN16@enumerate_:
  00225	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  00228	83 e0 01	 and	 eax, 1
  0022b	75 02		 jne	 SHORT $LN15@enumerate_

; 510  : 				;

  0022d	eb e5		 jmp	 SHORT $LN14@enumerate_
$LN15@enumerate_:

; 511  : 		
; 512  : 		for ( b=0; m & 1; b++, m >>= 1)

  0022f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _b$[ebp], 0
  00236	eb 11		 jmp	 SHORT $LN19@enumerate_
$LN17@enumerate_:
  00238	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  0023b	83 c0 01	 add	 eax, 1
  0023e	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00241	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  00244	d1 e9		 shr	 ecx, 1
  00246	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN19@enumerate_:
  00249	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  0024c	83 e0 01	 and	 eax, 1
  0024f	74 02		 je	 SHORT $LN18@enumerate_

; 513  : 				;

  00251	eb e5		 jmp	 SHORT $LN17@enumerate_
$LN18@enumerate_:

; 514  : 
; 515  : 		a = 0;

  00253	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _a$[ebp], 0

; 516  : 
; 517  : 		if ( format->dwRGBAlphaBitMask )

  0025a	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  0025d	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00261	74 51		 je	 SHORT $LN33@enumerate_

; 518  : 		{
; 519  : 
; 520  : 			for ( a=0, m=format->dwRGBAlphaBitMask; !(m & 1); a++, m >>= 1)

  00263	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _a$[ebp], 0
  0026a	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  0026d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00270	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
  00273	eb 11		 jmp	 SHORT $LN22@enumerate_
$LN20@enumerate_:
  00275	8b 45 ec	 mov	 eax, DWORD PTR _a$[ebp]
  00278	83 c0 01	 add	 eax, 1
  0027b	89 45 ec	 mov	 DWORD PTR _a$[ebp], eax
  0027e	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  00281	d1 e9		 shr	 ecx, 1
  00283	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN22@enumerate_:
  00286	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  00289	83 e0 01	 and	 eax, 1
  0028c	75 02		 jne	 SHORT $LN21@enumerate_

; 521  : 					;

  0028e	eb e5		 jmp	 SHORT $LN20@enumerate_
$LN21@enumerate_:

; 522  : 	
; 523  : 			for ( a=0; m & 1; a++, m >>= 1)

  00290	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _a$[ebp], 0
  00297	eb 11		 jmp	 SHORT $LN25@enumerate_
$LN23@enumerate_:
  00299	8b 45 ec	 mov	 eax, DWORD PTR _a$[ebp]
  0029c	83 c0 01	 add	 eax, 1
  0029f	89 45 ec	 mov	 DWORD PTR _a$[ebp], eax
  002a2	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  002a5	d1 e9		 shr	 ecx, 1
  002a7	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN25@enumerate_:
  002aa	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  002ad	83 e0 01	 and	 eax, 1
  002b0	74 02		 je	 SHORT $LN33@enumerate_

; 524  : 					;

  002b2	eb e5		 jmp	 SHORT $LN23@enumerate_
$LN33@enumerate_:

; 525  : 		}
; 526  : 		
; 527  : 		available_texture_formats[number_available_texture_formats].bpp_red = r;

  002b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  002b9	c1 e0 06	 shl	 eax, 6
  002bc	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  002bf	89 88 10 00 00
	00		 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+16], ecx

; 528  : 		available_texture_formats[number_available_texture_formats].bpp_green = g;

  002c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  002ca	c1 e0 06	 shl	 eax, 6
  002cd	8b 4d f4	 mov	 ecx, DWORD PTR _g$[ebp]
  002d0	89 88 14 00 00
	00		 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+20], ecx

; 529  : 		available_texture_formats[number_available_texture_formats].bpp_blue = b;

  002d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  002db	c1 e0 06	 shl	 eax, 6
  002de	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  002e1	89 88 18 00 00
	00		 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+24], ecx

; 530  : 		available_texture_formats[number_available_texture_formats].bpp_alpha = a;

  002e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  002ec	c1 e0 06	 shl	 eax, 6
  002ef	8b 4d ec	 mov	 ecx, DWORD PTR _a$[ebp]
  002f2	89 88 1c 00 00
	00		 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+28], ecx

; 531  : 		available_texture_formats[number_available_texture_formats].bpp_colour = r + g + b;

  002f8	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  002fb	03 45 f4	 add	 eax, DWORD PTR _g$[ebp]
  002fe	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  00301	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  00307	c1 e1 06	 shl	 ecx, 6
  0030a	89 81 0c 00 00
	00		 mov	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+12], eax

; 532  : 
; 533  : 		if ( ( r + g + b + a ) <= 16 )

  00310	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  00313	03 45 f4	 add	 eax, DWORD PTR _g$[ebp]
  00316	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  00319	03 45 ec	 add	 eax, DWORD PTR _a$[ebp]
  0031c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0031f	7f 0f		 jg	 SHORT $LN34@enumerate_

; 534  : 		{
; 535  : 
; 536  : 			number_available_texture_formats ++;

  00321	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  00326	83 c0 01	 add	 eax, 1
  00329	a3 00 00 00 00	 mov	 DWORD PTR ?number_available_texture_formats@@3HA, eax ; number_available_texture_formats

; 537  : 		}
; 538  : 		else

  0032e	eb 16		 jmp	 SHORT $LN35@enumerate_
$LN34@enumerate_:

; 539  : 		{
; 540  : 
; 541  : 			if ( d3d_allow_32bit_textures )

  00330	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_allow_32bit_textures@@3HA, 0 ; d3d_allow_32bit_textures
  00337	74 0d		 je	 SHORT $LN35@enumerate_

; 542  : 			{
; 543  : 	
; 544  : 				number_available_texture_formats ++;

  00339	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  0033e	83 c0 01	 add	 eax, 1
  00341	a3 00 00 00 00	 mov	 DWORD PTR ?number_available_texture_formats@@3HA, eax ; number_available_texture_formats
$LN35@enumerate_:

; 545  : 			}
; 546  : 		}
; 547  : 
; 548  : 		return ( DDENUMRET_OK );

  00346	b8 01 00 00 00	 mov	 eax, 1
  0034b	eb 14		 jmp	 SHORT $LN1@enumerate_

; 549  : 	}
; 550  : 	else

  0034d	eb 12		 jmp	 SHORT $LN1@enumerate_
$LN31@enumerate_:

; 551  : 	{
; 552  : 
; 553  : 		debug_log ( "Got a wierd texture format that Im not quite sure about! - debug me!" );

  0034f	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@KFKJAGF@Got?5a?5wierd?5texture?5format?5that@
  00354	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00359	83 c4 04	 add	 esp, 4

; 554  : 
; 555  : 		return ( DDENUMRET_OK );

  0035c	b8 01 00 00 00	 mov	 eax, 1
$LN1@enumerate_:

; 556  : 	}
; 557  : }

  00361	5f		 pop	 edi
  00362	5e		 pop	 esi
  00363	5b		 pop	 ebx
  00364	8b e5		 mov	 esp, ebp
  00366	5d		 pop	 ebp
  00367	c2 08 00	 ret	 8
?enumerate_texture_formats@@YGJPAU_DDPIXELFORMAT@@PAX@Z ENDP ; enumerate_texture_formats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textsys.c
;	COMDAT ?report_free_texture_memory@@YGXXZ
_TEXT	SEGMENT
_free$ = -8						; size = 4
_total$ = -4						; size = 4
?report_free_texture_memory@@YGXXZ PROC			; report_free_texture_memory, COMDAT

; 635  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 636  : 	DWORD
; 637  : 		total,
; 638  : 		free;
; 639  : 
; 640  : 	f3d_memory(&total, &free);

  00009	8d 45 f8	 lea	 eax, DWORD PTR _free$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d fc	 lea	 ecx, DWORD PTR _total$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?f3d_memory@@YGXPAK0@Z	; f3d_memory

; 641  : 
; 642  : 	debug_log ( "Texture memory: %d, Free: %d", total, free );

  00016	8b 45 f8	 mov	 eax, DWORD PTR _free$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _total$[ebp]
  0001d	51		 push	 ecx
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@IHJAKNGM@Texture?5memory?3?5?$CFd?0?5Free?3?5?$CFd@
  00023	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 643  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?report_free_texture_memory@@YGXXZ ENDP			; report_free_texture_memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textsys.c
;	COMDAT ?unlock_texture@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_texture$ = 8						; size = 4
?unlock_texture@@YGHPAUSCREEN@@@Z PROC			; unlock_texture, COMDAT

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 627  : 	return f3d_texture_unlock(texture);

  00009	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?f3d_texture_unlock@@YGHPAUSCREEN@@@Z ; f3d_texture_unlock

; 628  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?unlock_texture@@YGHPAUSCREEN@@@Z ENDP			; unlock_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textsys.c
;	COMDAT ?lock_texture@@YGHPAUSCREEN@@H@Z
_TEXT	SEGMENT
_texture$ = 8						; size = 4
_mipmap_level$ = 12					; size = 4
?lock_texture@@YGHPAUSCREEN@@H@Z PROC			; lock_texture, COMDAT

; 617  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 618  : 	return f3d_texture_lock(texture, mipmap_level);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _mipmap_level$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _texture$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?f3d_texture_lock@@YGHPAUSCREEN@@H@Z ; f3d_texture_lock

; 619  : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?lock_texture@@YGHPAUSCREEN@@H@Z ENDP			; lock_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textsys.c
;	COMDAT ?free_all_hardware_textures@@YGXXZ
_TEXT	SEGMENT
?free_all_hardware_textures@@YGXXZ PROC			; free_all_hardware_textures, COMDAT

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 593  : 	//
; 594  : 	// Free the hardware textures
; 595  : 	//
; 596  : 
; 597  : 	if ( get_graphics_system_initialised () /*d3d.d3d*/ )

  00009	e8 00 00 00 00	 call	 ?get_graphics_system_initialised@@YGHXZ ; get_graphics_system_initialised
  0000e	85 c0		 test	 eax, eax
  00010	74 0e		 je	 SHORT $LN1@free_all_h

; 598  : 	{
; 599  : 
; 600  : 		if ( d3d_use_evict_textures )

  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_use_evict_textures@@3HA, 0 ; d3d_use_evict_textures
  00019	74 05		 je	 SHORT $LN1@free_all_h

; 601  : 		{
; 602  : 
; 603  : 			//
; 604  : 			// Evict any video / agp memory textures
; 605  : 			//
; 606  : 
; 607  : 			f3d_evict_textures ();

  0001b	e8 00 00 00 00	 call	 ?f3d_evict_textures@@YGXXZ ; f3d_evict_textures
$LN1@free_all_h:

; 608  : 		}
; 609  : 	}
; 610  : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?free_all_hardware_textures@@YGXXZ ENDP			; free_all_hardware_textures
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textsys.c
;	COMDAT ?release_all_textures@@YGXXZ
_TEXT	SEGMENT
?release_all_textures@@YGXXZ PROC			; release_all_textures, COMDAT

; 564  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 565  : 	//
; 566  : 	// First, the hardware textures
; 567  : 	//
; 568  : 
; 569  : 	free_all_hardware_textures ();

  00009	e8 00 00 00 00	 call	 ?free_all_hardware_textures@@YGXXZ ; free_all_hardware_textures

; 570  : 
; 571  : 	//
; 572  : 	// Now release the hardware colour palette
; 573  : 	//
; 574  : 
; 575  : 	/*if ( hardware_texture_palette )
; 576  : 	{
; 577  : 		f3d_palette_release ( &hardware_texture_palette );
; 578  : 	}*/
; 579  : 
; 580  : 	//
; 581  : 	// Finally, get rid of any system textures
; 582  : 	//
; 583  : 
; 584  : 	release_system_textures ();

  0000e	e8 00 00 00 00	 call	 ?release_system_textures@@YGXXZ ; release_system_textures

; 585  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?release_all_textures@@YGXXZ ENDP			; release_all_textures
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textsys.c
;	COMDAT ?initialise_system_texture_formats@@YGHXZ
_TEXT	SEGMENT
_ddsd$ = -128						; size = 124
_count$ = -4						; size = 4
?initialise_system_texture_formats@@YGHXZ PROC		; initialise_system_texture_formats, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 122  : 	int
; 123  : 		count;
; 124  : 
; 125  : 	DDSURFACEDESC2
; 126  : 		ddsd;
; 127  : 
; 128  : 	//
; 129  : 	// Get the surface description of the render buffer.
; 130  : 	//
; 131  : 
; 132  : 	ASSERT ( get_graphics_system_initialised() /*ddraw.lpRenderBuffer*/ );

  0000c	e8 00 00 00 00	 call	 ?get_graphics_system_initialised@@YGHXZ ; get_graphics_system_initialised
  00011	85 c0		 test	 eax, eax
  00013	75 18		 jne	 SHORT $LN8@initialise
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_system_texture_formats@@YGHXZ@4JA
  0001a	83 c0 0b	 add	 eax, 11			; 0000000bH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@GKCALDPH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@OIAADEGB@get_graphics_system_initialised@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@initialise:

; 133  : 
; 134  : 	f3d_surface_description ( f3d_surface_render (), &ddsd );

  0002d	8d 45 80	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?f3d_surface_render@@YGPAUIDirectDrawSurface7@@XZ ; f3d_surface_render
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 135  : 
; 136  : 	//
; 137  : 	// Enumerate the texture formats
; 138  : 	//
; 139  : 
; 140  : 	number_available_texture_formats = 0;

  0003c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_available_texture_formats@@3HA, 0 ; number_available_texture_formats

; 141  : 
; 142  : 	if ( !f3d_enumerate_formats ( enumerate_texture_formats, NULL ) )

  00046	6a 00		 push	 0
  00048	68 00 00 00 00	 push	 OFFSET ?enumerate_texture_formats@@YGJPAU_DDPIXELFORMAT@@PAX@Z ; enumerate_texture_formats
  0004d	e8 00 00 00 00	 call	 ?f3d_enumerate_formats@@YGHP6GJPAU_DDPIXELFORMAT@@PAX@Z1@Z ; f3d_enumerate_formats
  00052	85 c0		 test	 eax, eax
  00054	75 07		 jne	 SHORT $LN9@initialise

; 143  : 	{
; 144  : 		return ( FALSE );

  00056	33 c0		 xor	 eax, eax
  00058	e9 ee 05 00 00	 jmp	 $LN1@initialise
$LN9@initialise:

; 145  : 	}
; 146  : 
; 147  : 	//
; 148  : 	// Assume we don't have a suitable texture format for now
; 149  : 	//
; 150  : 
; 151  : 	for ( count = TEXTURE_TYPE_INVALID; count < NUMBER_OF_TEXTURE_TYPES; count++ )

  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00064	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00066	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00069	83 c0 01	 add	 eax, 1
  0006c	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  0006f	83 7d fc 07	 cmp	 DWORD PTR _count$[ebp], 7
  00073	7d 12		 jge	 SHORT $LN3@initialise

; 152  : 	{
; 153  : 
; 154  : 		texture_formats[count].valid = FALSE;

  00075	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00078	c1 e0 06	 shl	 eax, 6
  0007b	c7 80 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+4], 0

; 155  : 	}

  00085	eb df		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 156  : 
; 157  : 	for ( count = 0; count < number_available_texture_formats; count++ )

  00087	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0008e	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  00090	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00093	83 c0 01	 add	 eax, 1
  00096	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@initialise:
  00099	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0009c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_available_texture_formats@@3HA ; number_available_texture_formats
  000a2	0f 8d 77 05 00
	00		 jge	 $LN6@initialise

; 158  : 	{
; 159  : 
; 160  : 		if ( ( !available_texture_formats[count].palette ) && ( !texture_formats[TEXTURE_TYPE_SCREEN].valid ) )

  000a8	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000ab	c1 e0 06	 shl	 eax, 6
  000ae	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax], 0
  000b5	0f 85 8c 00 00
	00		 jne	 $LN10@initialise
  000bb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000c0	c1 e0 02	 shl	 eax, 2
  000c3	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+4], 0
  000ca	75 7b		 jne	 SHORT $LN10@initialise

; 161  : 		{
; 162  : 
; 163  : 			//
; 164  : 			// Check this format for the same format as the screen.
; 165  : 			//
; 166  : 
; 167  : //			if ( memcmp ( &available_texture_formats[count].format, &ddsd.ddpfPixelFormat, sizeof ( DDPIXELFORMAT ) ) == 0 )
; 168  : 			if (	( available_texture_formats[count].format.dwRBitMask == ddsd.ddpfPixelFormat.dwRBitMask ) &&
; 169  : 					( available_texture_formats[count].format.dwGBitMask == ddsd.ddpfPixelFormat.dwGBitMask ) &&
; 170  : 					( available_texture_formats[count].format.dwBBitMask == ddsd.ddpfPixelFormat.dwBBitMask ) &&

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000cf	c1 e0 06	 shl	 eax, 6
  000d2	8b 88 30 00 00
	00		 mov	 ecx, DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+48]
  000d8	3b 4d d8	 cmp	 ecx, DWORD PTR _ddsd$[ebp+88]
  000db	75 6a		 jne	 SHORT $LN10@initialise
  000dd	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000e0	c1 e0 06	 shl	 eax, 6
  000e3	8b 88 34 00 00
	00		 mov	 ecx, DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+52]
  000e9	3b 4d dc	 cmp	 ecx, DWORD PTR _ddsd$[ebp+92]
  000ec	75 59		 jne	 SHORT $LN10@initialise
  000ee	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000f1	c1 e0 06	 shl	 eax, 6
  000f4	8b 88 38 00 00
	00		 mov	 ecx, DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+56]
  000fa	3b 4d e0	 cmp	 ecx, DWORD PTR _ddsd$[ebp+96]
  000fd	75 48		 jne	 SHORT $LN10@initialise
  000ff	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00102	c1 e0 06	 shl	 eax, 6
  00105	8b 88 3c 00 00
	00		 mov	 ecx, DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+60]
  0010b	3b 4d e4	 cmp	 ecx, DWORD PTR _ddsd$[ebp+100]
  0010e	75 37		 jne	 SHORT $LN10@initialise

; 171  : 					( available_texture_formats[count].format.dwRGBAlphaBitMask == ddsd.ddpfPixelFormat.dwRGBAlphaBitMask ) )
; 172  : 			{
; 173  : 
; 174  : 				//
; 175  : 				// We have the screen format as a texture format as well ( that is good ! )
; 176  : 				//
; 177  : 
; 178  : 				memcpy ( &texture_formats[TEXTURE_TYPE_SCREEN], &available_texture_formats[count], sizeof ( texture_format ) );

  00110	6a 40		 push	 64			; 00000040H
  00112	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00115	c1 e0 06	 shl	 eax, 6
  00118	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  0011d	50		 push	 eax
  0011e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00123	c1 e1 02	 shl	 ecx, 2
  00126	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 _memcpy
  00132	83 c4 0c	 add	 esp, 12			; 0000000cH

; 179  : 
; 180  : 				texture_formats[TEXTURE_TYPE_SCREEN].valid = TRUE;

  00135	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013a	c1 e0 02	 shl	 eax, 2
  0013d	c7 80 04 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+4], 1
$LN10@initialise:

; 181  : 			}
; 182  : 		}
; 183  : 
; 184  : 		if ( ( available_texture_formats[count].palette ) && ( available_texture_formats[count].bpp_palette == 8 ) )

  00147	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0014a	c1 e0 06	 shl	 eax, 6
  0014d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax], 0
  00154	0f 84 0f 01 00
	00		 je	 $LN12@initialise
  0015a	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0015d	c1 e0 06	 shl	 eax, 6
  00160	83 b8 08 00 00
	00 08		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+8], 8
  00167	0f 85 fc 00 00
	00		 jne	 $LN12@initialise

; 185  : 		{
; 186  : 
; 187  : 			//
; 188  : 			// This is THE best just colour texture we can get. If its enabled, use it.
; 189  : 			//
; 190  : 
; 191  : 			memcpy ( &texture_formats[TEXTURE_TYPE_NOALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  0016d	6a 40		 push	 64			; 00000040H
  0016f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00172	c1 e0 06	 shl	 eax, 6
  00175	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  0017a	50		 push	 eax
  0017b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00180	c1 e1 00	 shl	 ecx, 0
  00183	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 _memcpy
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 192  : 
; 193  : 			if ( ( !texture_formats[TEXTURE_TYPE_SINGLEALPHA].valid ) || ( texture_formats[TEXTURE_TYPE_SINGLEALPHA].bpp_alpha < 1 ) )

  00192	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00197	d1 e0		 shl	 eax, 1
  00199	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+4], 0
  001a0	74 10		 je	 SHORT $LN15@initialise
  001a2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001a7	d1 e0		 shl	 eax, 1
  001a9	83 b8 1c 00 00
	00 01		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+28], 1
  001b0	7d 24		 jge	 SHORT $LN14@initialise
$LN15@initialise:

; 194  : 			{
; 195  : 
; 196  : 				memcpy ( &texture_formats[TEXTURE_TYPE_SINGLEALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  001b2	6a 40		 push	 64			; 00000040H
  001b4	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001b7	c1 e0 06	 shl	 eax, 6
  001ba	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  001bf	50		 push	 eax
  001c0	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001c5	d1 e1		 shl	 ecx, 1
  001c7	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 _memcpy
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@initialise:

; 197  : 			}
; 198  : 
; 199  : 			if ( ( !texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].valid ) || ( texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].bpp_alpha < 1 ) )

  001d6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001db	6b c8 03	 imul	 ecx, eax, 3
  001de	83 b9 04 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+4], 0
  001e5	74 11		 je	 SHORT $LN17@initialise
  001e7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ec	6b c8 03	 imul	 ecx, eax, 3
  001ef	83 b9 1c 00 00
	00 01		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+28], 1
  001f6	7d 25		 jge	 SHORT $LN16@initialise
$LN17@initialise:

; 200  : 			{
; 201  : 
; 202  : 				memcpy ( &texture_formats[TEXTURE_TYPE_MULTIPLEALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  001f8	6a 40		 push	 64			; 00000040H
  001fa	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001fd	c1 e0 06	 shl	 eax, 6
  00200	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  00205	50		 push	 eax
  00206	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0020b	6b d1 03	 imul	 edx, ecx, 3
  0020e	81 c2 00 00 00
	00		 add	 edx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  00214	52		 push	 edx
  00215	e8 00 00 00 00	 call	 _memcpy
  0021a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@initialise:

; 203  : 			}
; 204  : 
; 205  : 			if ( ( !texture_formats[TEXTURE_TYPE_MULTIPLEALPHA_16BIT].valid ) || ( texture_formats[TEXTURE_TYPE_MULTIPLEALPHA_16BIT].bpp_alpha < 1 ) )

  0021d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00222	6b c8 06	 imul	 ecx, eax, 6
  00225	83 b9 04 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+4], 0
  0022c	74 11		 je	 SHORT $LN19@initialise
  0022e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00233	6b c8 06	 imul	 ecx, eax, 6
  00236	83 b9 1c 00 00
	00 01		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+28], 1
  0023d	7d 25		 jge	 SHORT $LN18@initialise
$LN19@initialise:

; 206  : 			{
; 207  : 
; 208  : 				memcpy ( &texture_formats[TEXTURE_TYPE_MULTIPLEALPHA_16BIT], &available_texture_formats[count], sizeof ( texture_format ) );

  0023f	6a 40		 push	 64			; 00000040H
  00241	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00244	c1 e0 06	 shl	 eax, 6
  00247	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  0024c	50		 push	 eax
  0024d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00252	6b d1 06	 imul	 edx, ecx, 6
  00255	81 c2 00 00 00
	00		 add	 edx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  0025b	52		 push	 edx
  0025c	e8 00 00 00 00	 call	 _memcpy
  00261	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@initialise:

; 209  : 			}
; 210  : 		}

  00264	e9 b1 03 00 00	 jmp	 $LN13@initialise
$LN12@initialise:

; 211  : 		else if ( ( available_texture_formats[count].bpp_red > 3 ) && ( available_texture_formats[count].bpp_green > 3 ) && ( available_texture_formats[count].bpp_blue > 3 ) )

  00269	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0026c	c1 e0 06	 shl	 eax, 6
  0026f	83 b8 10 00 00
	00 03		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+16], 3
  00276	0f 8e 9e 03 00
	00		 jle	 $LN13@initialise
  0027c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0027f	c1 e0 06	 shl	 eax, 6
  00282	83 b8 14 00 00
	00 03		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+20], 3
  00289	0f 8e 8b 03 00
	00		 jle	 $LN13@initialise
  0028f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00292	c1 e0 06	 shl	 eax, 6
  00295	83 b8 18 00 00
	00 03		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+24], 3
  0029c	0f 8e 78 03 00
	00		 jle	 $LN13@initialise

; 212  : 		{
; 213  : 
; 214  : 			if ( !texture_formats[TEXTURE_TYPE_NOALPHA].valid )

  002a2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002a7	c1 e0 00	 shl	 eax, 0
  002aa	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+4], 0
  002b1	75 27		 jne	 SHORT $LN21@initialise

; 215  : 			{
; 216  : 
; 217  : 				memcpy ( &texture_formats[TEXTURE_TYPE_NOALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  002b3	6a 40		 push	 64			; 00000040H
  002b5	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  002b8	c1 e0 06	 shl	 eax, 6
  002bb	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  002c0	50		 push	 eax
  002c1	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002c6	c1 e1 00	 shl	 ecx, 0
  002c9	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  002cf	51		 push	 ecx
  002d0	e8 00 00 00 00	 call	 _memcpy
  002d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d8	eb 61		 jmp	 SHORT $LN22@initialise
$LN21@initialise:

; 218  : 			}
; 219  : 			else if ( !texture_formats[TEXTURE_TYPE_NOALPHA].palette )

  002da	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002df	c1 e0 00	 shl	 eax, 0
  002e2	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax], 0
  002e9	75 50		 jne	 SHORT $LN22@initialise

; 220  : 			{
; 221  : 
; 222  : 				//
; 223  : 				// Compare the quality of the colour ( number of bits rgb )
; 224  : 				//
; 225  : 
; 226  : 				if ( available_texture_formats[count].bpp_colour > texture_formats[TEXTURE_TYPE_NOALPHA].bpp_colour )

  002eb	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  002ee	c1 e0 06	 shl	 eax, 6
  002f1	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002f6	c1 e1 00	 shl	 ecx, 0
  002f9	8b 90 0c 00 00
	00		 mov	 edx, DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+12]
  002ff	3b 91 0c 00 00
	00		 cmp	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+12]
  00305	7e 34		 jle	 SHORT $LN22@initialise

; 227  : 				{
; 228  : 
; 229  : 					if ( available_texture_formats[count].bpp_colour <= 16 )

  00307	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0030a	c1 e0 06	 shl	 eax, 6
  0030d	83 b8 0c 00 00
	00 10		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+12], 16 ; 00000010H
  00314	7f 25		 jg	 SHORT $LN22@initialise

; 230  : 					{
; 231  : 
; 232  : 						memcpy ( &texture_formats[TEXTURE_TYPE_NOALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  00316	6a 40		 push	 64			; 00000040H
  00318	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0031b	c1 e0 06	 shl	 eax, 6
  0031e	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  00323	50		 push	 eax
  00324	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00329	c1 e1 00	 shl	 ecx, 0
  0032c	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  00332	51		 push	 ecx
  00333	e8 00 00 00 00	 call	 _memcpy
  00338	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN22@initialise:

; 233  : 					}
; 234  : 				}
; 235  : 			}
; 236  : 
; 237  : 			//
; 238  : 			// Check against the pure colour nopalette texture format
; 239  : 			//
; 240  : 
; 241  : 			if ( !texture_formats[TEXTURE_TYPE_NOALPHA_NOPALETTE].valid )

  0033b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00340	6b c8 05	 imul	 ecx, eax, 5
  00343	83 b9 04 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+4], 0
  0034a	75 27		 jne	 SHORT $LN26@initialise

; 242  : 			{
; 243  : 
; 244  : 				memcpy ( &texture_formats[TEXTURE_TYPE_NOALPHA_NOPALETTE], &available_texture_formats[count], sizeof ( texture_format ) );

  0034c	6a 40		 push	 64			; 00000040H
  0034e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00351	c1 e0 06	 shl	 eax, 6
  00354	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  00359	50		 push	 eax
  0035a	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0035f	6b d1 05	 imul	 edx, ecx, 5
  00362	81 c2 00 00 00
	00		 add	 edx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  00368	52		 push	 edx
  00369	e8 00 00 00 00	 call	 _memcpy
  0036e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 245  : 			}
; 246  : 			else

  00371	eb 50		 jmp	 SHORT $LN27@initialise
$LN26@initialise:

; 247  : 			{
; 248  : 
; 249  : 				//
; 250  : 				// Compare the quality of the colour ( number of bits rgb )
; 251  : 				//
; 252  : 
; 253  : 				if ( available_texture_formats[count].bpp_colour > texture_formats[TEXTURE_TYPE_NOALPHA_NOPALETTE].bpp_colour )

  00373	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00376	c1 e0 06	 shl	 eax, 6
  00379	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0037e	6b d1 05	 imul	 edx, ecx, 5
  00381	8b 80 0c 00 00
	00		 mov	 eax, DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+12]
  00387	3b 82 0c 00 00
	00		 cmp	 eax, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[edx+12]
  0038d	7e 34		 jle	 SHORT $LN27@initialise

; 254  : 				{
; 255  : 
; 256  : 					if ( available_texture_formats[count].bpp_colour <= 16 )

  0038f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00392	c1 e0 06	 shl	 eax, 6
  00395	83 b8 0c 00 00
	00 10		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+12], 16 ; 00000010H
  0039c	7f 25		 jg	 SHORT $LN27@initialise

; 257  : 					{
; 258  : 
; 259  : 						memcpy ( &texture_formats[TEXTURE_TYPE_NOALPHA_NOPALETTE], &available_texture_formats[count], sizeof ( texture_format ) );

  0039e	6a 40		 push	 64			; 00000040H
  003a0	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  003a3	c1 e0 06	 shl	 eax, 6
  003a6	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  003ab	50		 push	 eax
  003ac	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  003b1	6b d1 05	 imul	 edx, ecx, 5
  003b4	81 c2 00 00 00
	00		 add	 edx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  003ba	52		 push	 edx
  003bb	e8 00 00 00 00	 call	 _memcpy
  003c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@initialise:

; 260  : 					}
; 261  : 				}
; 262  : 			}
; 263  : 
; 264  : 			//
; 265  : 			// Check against the single alpha texture format
; 266  : 			//
; 267  : 
; 268  : 			if ( !texture_formats[TEXTURE_TYPE_SINGLEALPHA].valid )

  003c3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003c8	d1 e0		 shl	 eax, 1
  003ca	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+4], 0
  003d1	75 29		 jne	 SHORT $LN30@initialise

; 269  : 			{
; 270  : 
; 271  : 				memcpy ( &texture_formats[TEXTURE_TYPE_SINGLEALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  003d3	6a 40		 push	 64			; 00000040H
  003d5	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  003d8	c1 e0 06	 shl	 eax, 6
  003db	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  003e0	50		 push	 eax
  003e1	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  003e6	d1 e1		 shl	 ecx, 1
  003e8	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  003ee	51		 push	 ecx
  003ef	e8 00 00 00 00	 call	 _memcpy
  003f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f7	e9 97 00 00 00	 jmp	 $LN31@initialise
$LN30@initialise:

; 272  : 			}
; 273  : 			else if ( available_texture_formats[count].bpp_alpha )

  003fc	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  003ff	c1 e0 06	 shl	 eax, 6
  00402	83 b8 1c 00 00
	00 00		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+28], 0
  00409	0f 84 84 00 00
	00		 je	 $LN31@initialise

; 274  : 			{
; 275  : 
; 276  : 				if ( texture_formats[TEXTURE_TYPE_SINGLEALPHA].bpp_alpha )

  0040f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00414	d1 e0		 shl	 eax, 1
  00416	83 b8 1c 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+28], 0
  0041d	74 50		 je	 SHORT $LN33@initialise

; 277  : 				{
; 278  : 
; 279  : 					//
; 280  : 					// Compare the quality of the colour ( number of bits rgb )
; 281  : 					//
; 282  : 
; 283  : 					if ( available_texture_formats[count].bpp_colour > texture_formats[TEXTURE_TYPE_SINGLEALPHA].bpp_colour )

  0041f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00422	c1 e0 06	 shl	 eax, 6
  00425	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0042a	d1 e1		 shl	 ecx, 1
  0042c	8b 90 0c 00 00
	00		 mov	 edx, DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+12]
  00432	3b 91 0c 00 00
	00		 cmp	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+12]
  00438	7e 33		 jle	 SHORT $LN35@initialise

; 284  : 					{
; 285  : 
; 286  : 						if ( available_texture_formats[count].bpp_colour <= 16 )

  0043a	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0043d	c1 e0 06	 shl	 eax, 6
  00440	83 b8 0c 00 00
	00 10		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+12], 16 ; 00000010H
  00447	7f 24		 jg	 SHORT $LN35@initialise

; 287  : 						{
; 288  : 
; 289  : 							memcpy ( &texture_formats[TEXTURE_TYPE_SINGLEALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  00449	6a 40		 push	 64			; 00000040H
  0044b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0044e	c1 e0 06	 shl	 eax, 6
  00451	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  00456	50		 push	 eax
  00457	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0045c	d1 e1		 shl	 ecx, 1
  0045e	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  00464	51		 push	 ecx
  00465	e8 00 00 00 00	 call	 _memcpy
  0046a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN35@initialise:

; 290  : 						}
; 291  : 					}
; 292  : 				}
; 293  : 				else

  0046d	eb 24		 jmp	 SHORT $LN31@initialise
$LN33@initialise:

; 294  : 				{
; 295  : 
; 296  : 					memcpy ( &texture_formats[TEXTURE_TYPE_SINGLEALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  0046f	6a 40		 push	 64			; 00000040H
  00471	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00474	c1 e0 06	 shl	 eax, 6
  00477	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  0047c	50		 push	 eax
  0047d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00482	d1 e1		 shl	 ecx, 1
  00484	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  0048a	51		 push	 ecx
  0048b	e8 00 00 00 00	 call	 _memcpy
  00490	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN31@initialise:

; 297  : 				}
; 298  : 			}
; 299  : 
; 300  : 			//
; 301  : 			// Check against the multiple alpha texture format.
; 302  : 			//
; 303  : 
; 304  : 			if ( !texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].valid )

  00493	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00498	6b c8 03	 imul	 ecx, eax, 3
  0049b	83 b9 04 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+4], 0
  004a2	75 2a		 jne	 SHORT $LN37@initialise

; 305  : 			{
; 306  : 
; 307  : 				memcpy ( &texture_formats[TEXTURE_TYPE_MULTIPLEALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  004a4	6a 40		 push	 64			; 00000040H
  004a6	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  004a9	c1 e0 06	 shl	 eax, 6
  004ac	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  004b1	50		 push	 eax
  004b2	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  004b7	6b d1 03	 imul	 edx, ecx, 3
  004ba	81 c2 00 00 00
	00		 add	 edx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  004c0	52		 push	 edx
  004c1	e8 00 00 00 00	 call	 _memcpy
  004c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 308  : 			}
; 309  : 			else

  004c9	e9 b5 00 00 00	 jmp	 $LN38@initialise
$LN37@initialise:

; 310  : 			{
; 311  : 
; 312  : 				if ( available_texture_formats[count].bpp_alpha >= 1 )

  004ce	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  004d1	c1 e0 06	 shl	 eax, 6
  004d4	83 b8 1c 00 00
	00 01		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+28], 1
  004db	7c 43		 jl	 SHORT $LN39@initialise

; 313  : 				{
; 314  : 
; 315  : 					//
; 316  : 					// Compare the quality of the ALPHA
; 317  : 					//
; 318  : 
; 319  : 					if ( available_texture_formats[count].bpp_alpha > texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].bpp_alpha )

  004dd	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  004e0	c1 e0 06	 shl	 eax, 6
  004e3	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  004e8	6b d1 03	 imul	 edx, ecx, 3
  004eb	8b 80 1c 00 00
	00		 mov	 eax, DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+28]
  004f1	3b 82 1c 00 00
	00		 cmp	 eax, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[edx+28]
  004f7	7e 25		 jle	 SHORT $LN41@initialise

; 320  : 					{
; 321  : 
; 322  : 						memcpy ( &texture_formats[TEXTURE_TYPE_MULTIPLEALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  004f9	6a 40		 push	 64			; 00000040H
  004fb	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  004fe	c1 e0 06	 shl	 eax, 6
  00501	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  00506	50		 push	 eax
  00507	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0050c	6b d1 03	 imul	 edx, ecx, 3
  0050f	81 c2 00 00 00
	00		 add	 edx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  00515	52		 push	 edx
  00516	e8 00 00 00 00	 call	 _memcpy
  0051b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@initialise:

; 323  : 					}
; 324  : 				}
; 325  : 				else

  0051e	eb 63		 jmp	 SHORT $LN38@initialise
$LN39@initialise:

; 326  : 				{
; 327  : 
; 328  : 					if ( ( !texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].palette ) && ( texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].bpp_alpha <= 1 ) )

  00520	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00525	6b c8 03	 imul	 ecx, eax, 3
  00528	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx], 0
  0052f	75 52		 jne	 SHORT $LN38@initialise
  00531	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00536	6b c8 03	 imul	 ecx, eax, 3
  00539	83 b9 1c 00 00
	00 01		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+28], 1
  00540	7f 41		 jg	 SHORT $LN38@initialise

; 329  : 					{
; 330  : 
; 331  : 						//
; 332  : 						// Compare the quality of the COLOUR
; 333  : 						//
; 334  : 
; 335  : 						if ( available_texture_formats[count].bpp_colour > texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].bpp_colour )

  00542	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00545	c1 e0 06	 shl	 eax, 6
  00548	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0054d	6b d1 03	 imul	 edx, ecx, 3
  00550	8b 80 0c 00 00
	00		 mov	 eax, DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+12]
  00556	3b 82 0c 00 00
	00		 cmp	 eax, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[edx+12]
  0055c	7e 25		 jle	 SHORT $LN38@initialise

; 336  : 						{
; 337  : 	
; 338  : 							memcpy ( &texture_formats[TEXTURE_TYPE_MULTIPLEALPHA], &available_texture_formats[count], sizeof ( texture_format ) );

  0055e	6a 40		 push	 64			; 00000040H
  00560	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00563	c1 e0 06	 shl	 eax, 6
  00566	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  0056b	50		 push	 eax
  0056c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00571	6b d1 03	 imul	 edx, ecx, 3
  00574	81 c2 00 00 00
	00		 add	 edx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  0057a	52		 push	 edx
  0057b	e8 00 00 00 00	 call	 _memcpy
  00580	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN38@initialise:

; 339  : 						}
; 340  : 					}
; 341  : 				}
; 342  : 			}
; 343  : 
; 344  : 			//
; 345  : 			// Check against the multiple alpha 16bit texture format.
; 346  : 			//
; 347  : 
; 348  : 			if ( !texture_formats[TEXTURE_TYPE_MULTIPLEALPHA_16BIT].valid )

  00583	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00588	6b c8 06	 imul	 ecx, eax, 6
  0058b	83 b9 04 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+4], 0
  00592	75 27		 jne	 SHORT $LN44@initialise

; 349  : 			{
; 350  : 
; 351  : 				memcpy ( &texture_formats[TEXTURE_TYPE_MULTIPLEALPHA_16BIT], &available_texture_formats[count], sizeof ( texture_format ) );

  00594	6a 40		 push	 64			; 00000040H
  00596	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00599	c1 e0 06	 shl	 eax, 6
  0059c	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  005a1	50		 push	 eax
  005a2	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  005a7	6b d1 06	 imul	 edx, ecx, 6
  005aa	81 c2 00 00 00
	00		 add	 edx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  005b0	52		 push	 edx
  005b1	e8 00 00 00 00	 call	 _memcpy
  005b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 352  : 			}
; 353  : 			else

  005b9	eb 5f		 jmp	 SHORT $LN13@initialise
$LN44@initialise:

; 354  : 			{
; 355  : 
; 356  : 				if ( available_texture_formats[count].bpp_alpha >= 1 )

  005bb	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  005be	c1 e0 06	 shl	 eax, 6
  005c1	83 b8 1c 00 00
	00 01		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+28], 1
  005c8	7c 50		 jl	 SHORT $LN13@initialise

; 357  : 				{
; 358  : 
; 359  : 					//
; 360  : 					// Compare the quality of the ALPHA
; 361  : 					//
; 362  : 
; 363  : 					if ( available_texture_formats[count].bpp_alpha > texture_formats[TEXTURE_TYPE_MULTIPLEALPHA_16BIT].bpp_alpha )

  005ca	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  005cd	c1 e0 06	 shl	 eax, 6
  005d0	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  005d5	6b d1 06	 imul	 edx, ecx, 6
  005d8	8b 80 1c 00 00
	00		 mov	 eax, DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+28]
  005de	3b 82 1c 00 00
	00		 cmp	 eax, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[edx+28]
  005e4	7e 34		 jle	 SHORT $LN13@initialise

; 364  : 					{
; 365  : 
; 366  : 						if ( available_texture_formats[count].bpp_colour <= 16 )

  005e6	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  005e9	c1 e0 06	 shl	 eax, 6
  005ec	83 b8 0c 00 00
	00 10		 cmp	 DWORD PTR ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+12], 16 ; 00000010H
  005f3	7f 25		 jg	 SHORT $LN13@initialise

; 367  : 						{
; 368  : 		
; 369  : 							memcpy ( &texture_formats[TEXTURE_TYPE_MULTIPLEALPHA_16BIT], &available_texture_formats[count], sizeof ( texture_format ) );

  005f5	6a 40		 push	 64			; 00000040H
  005f7	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  005fa	c1 e0 06	 shl	 eax, 6
  005fd	05 00 00 00 00	 add	 eax, OFFSET ?available_texture_formats@@3PAUTEXTURE_FORMAT@@A ; available_texture_formats
  00602	50		 push	 eax
  00603	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00608	6b d1 06	 imul	 edx, ecx, 6
  0060b	81 c2 00 00 00
	00		 add	 edx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A ; texture_formats
  00611	52		 push	 edx
  00612	e8 00 00 00 00	 call	 _memcpy
  00617	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@initialise:

; 370  : 						}
; 371  : 					}
; 372  : 				}
; 373  : 			}
; 374  : 		}
; 375  : 	}

  0061a	e9 71 fa ff ff	 jmp	 $LN5@initialise
$LN6@initialise:

; 376  : 
; 377  : 	if ( !texture_formats[TEXTURE_TYPE_NOALPHA].valid )

  0061f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00624	c1 e0 00	 shl	 eax, 0
  00627	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+4], 0
  0062e	75 11		 jne	 SHORT $LN49@initialise

; 378  : 	{
; 379  : 
; 380  : 		debug_log ( "Unable to find a suitable texture format for the 3d card" );

  00630	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@DDJNAKLN@Unable?5to?5find?5a?5suitable?5textu@
  00635	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0063a	83 c4 04	 add	 esp, 4

; 381  : 
; 382  : 		return ( FALSE );

  0063d	33 c0		 xor	 eax, eax
  0063f	eb 0a		 jmp	 SHORT $LN1@initialise
$LN49@initialise:

; 383  : 	}
; 384  : 
; 385  : 	set_texture_pixel_formats ();

  00641	e8 00 00 00 00	 call	 ?set_texture_pixel_formats@@YGXXZ ; set_texture_pixel_formats

; 386  : 
; 387  : 	return ( TRUE );

  00646	b8 01 00 00 00	 mov	 eax, 1
$LN1@initialise:

; 388  : }

  0064b	5f		 pop	 edi
  0064c	5e		 pop	 esi
  0064d	5b		 pop	 ebx
  0064e	8b e5		 mov	 esp, ebp
  00650	5d		 pop	 ebp
  00651	c3		 ret	 0
?initialise_system_texture_formats@@YGHXZ ENDP		; initialise_system_texture_formats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textsys.c
;	COMDAT ?initialise_texture_system@@YGHXZ
_TEXT	SEGMENT
_count$1 = -4						; size = 4
?initialise_texture_system@@YGHXZ PROC			; initialise_texture_system, COMDAT

; 395  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 396  : 
; 397  : 	register_exit_function ( release_all_textures );

  00009	68 00 00 00 00	 push	 OFFSET ?release_all_textures@@YGXXZ ; release_all_textures
  0000e	e8 00 00 00 00	 call	 ?register_exit_function@@YGXP6GXXZ@Z ; register_exit_function

; 398  : 
; 399  : 	if ( initialise_system_texture_formats () )

  00013	e8 00 00 00 00	 call	 ?initialise_system_texture_formats@@YGHXZ ; initialise_system_texture_formats
  00018	85 c0		 test	 eax, eax
  0001a	74 75		 je	 SHORT $LN5@initialise

; 400  : 	{
; 401  : 
; 402  : 		int
; 403  : 			count;
; 404  : 
; 405  : 		for ( count = TEXTURE_TYPE_INVALID + 1; count < NUMBER_OF_TEXTURE_TYPES; count++ )

  0001c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 1
  00023	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  00028	83 c0 01	 add	 eax, 1
  0002b	89 45 fc	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@initialise:
  0002e	83 7d fc 07	 cmp	 DWORD PTR _count$1[ebp], 7
  00032	7d 54		 jge	 SHORT $LN3@initialise

; 406  : 		{
; 407  : 
; 408  : 			debug_log ( "Texture %d: Valid %d Palette %d, R:%d, G:%d, B:%d",

  00034	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  00037	c1 e0 06	 shl	 eax, 6
  0003a	8b 88 18 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+24]
  00040	51		 push	 ecx
  00041	8b 55 fc	 mov	 edx, DWORD PTR _count$1[ebp]
  00044	c1 e2 06	 shl	 edx, 6
  00047	8b 82 14 00 00
	00		 mov	 eax, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[edx+20]
  0004d	50		 push	 eax
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _count$1[ebp]
  00051	c1 e1 06	 shl	 ecx, 6
  00054	8b 91 10 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+16]
  0005a	52		 push	 edx
  0005b	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  0005e	c1 e0 06	 shl	 eax, 6
  00061	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax]
  00067	51		 push	 ecx
  00068	8b 55 fc	 mov	 edx, DWORD PTR _count$1[ebp]
  0006b	c1 e2 06	 shl	 edx, 6
  0006e	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[edx+4]
  00074	50		 push	 eax
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _count$1[ebp]
  00078	51		 push	 ecx
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@EIIFMCBA@Texture?5?$CFd?3?5Valid?5?$CFd?5Palette?5?$CFd@
  0007e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00083	83 c4 1c	 add	 esp, 28			; 0000001cH

; 409  : 								count, texture_formats[count].valid, texture_formats[count].palette,
; 410  : 								texture_formats[count].bpp_red, texture_formats[count].bpp_green, texture_formats[count].bpp_blue );
; 411  : 		}

  00086	eb 9d		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 412  : 
; 413  : 		return ( TRUE );

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	eb 11		 jmp	 SHORT $LN1@initialise

; 414  : 	}
; 415  : 	else

  0008f	eb 0f		 jmp	 SHORT $LN1@initialise
$LN5@initialise:

; 416  : 	{
; 417  : 
; 418  : 		debug_fatal ( "Unable to find a suitable texture format on this card!" );

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@GGEAMGCE@Unable?5to?5find?5a?5suitable?5textu@
  00096	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0009b	83 c4 04	 add	 esp, 4

; 419  : 
; 420  : 		return ( FALSE );

  0009e	33 c0		 xor	 eax, eax
$LN1@initialise:

; 421  : 	}
; 422  : }

  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
?initialise_texture_system@@YGHXZ ENDP			; initialise_texture_system
_TEXT	ENDS
END
