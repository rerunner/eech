; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\camera\cm_satel.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_sqrtf
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?reset_satellite_camera@@YGXPAUCAMERA@@@Z	; reset_satellite_camera
PUBLIC	?update_satellite_camera@@YGXPAUCAMERA@@@Z	; update_satellite_camera
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA ; `reset_satellite_camera'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_03DGOGAGNC@raw@				; `string'
PUBLIC	??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@ ; `string'
PUBLIC	?__LINE__Var@?0??update_satellite_camera@@YGXPAUCAMERA@@@Z@4JA ; `update_satellite_camera'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4054000000000000
PUBLIC	__real@4062c00000000000
PUBLIC	__real@447a0000
PUBLIC	__real@459c4000
PUBLIC	__real@be860a92
PUBLIC	__real@bfc00000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?get_identity_matrix3x3@@YGXQAY02M@Z:PROC	; get_identity_matrix3x3
EXTRN	?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z:PROC ; get_matrix3x3_from_unit_vec3d
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?adjust_view_left_key@@3HA:DWORD		; adjust_view_left_key
EXTRN	?adjust_view_right_key@@3HA:DWORD		; adjust_view_right_key
EXTRN	?adjust_view_up_key@@3HA:DWORD			; adjust_view_up_key
EXTRN	?adjust_view_down_key@@3HA:DWORD		; adjust_view_down_key
EXTRN	?adjust_view_zoom_in_key@@3HA:DWORD		; adjust_view_zoom_in_key
EXTRN	?adjust_view_zoom_out_key@@3HA:DWORD		; adjust_view_zoom_out_key
EXTRN	?joystick_pov_left@@3HA:DWORD			; joystick_pov_left
EXTRN	?joystick_pov_right@@3HA:DWORD			; joystick_pov_right
EXTRN	?joystick_pov_up@@3HA:DWORD			; joystick_pov_up
EXTRN	?joystick_pov_down@@3HA:DWORD			; joystick_pov_down
EXTRN	__fltused:DWORD
;	COMDAT __real@bfc00000
CONST	SEGMENT
__real@bfc00000 DD 0bfc00000r			; -1.5
CONST	ENDS
;	COMDAT __real@be860a92
CONST	SEGMENT
__real@be860a92 DD 0be860a92r			; -0.261799
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@4062c00000000000
CONST	SEGMENT
__real@4062c00000000000 DQ 04062c00000000000r	; 150
CONST	ENDS
;	COMDAT __real@4054000000000000
CONST	SEGMENT
__real@4054000000000000 DQ 04054000000000000r	; 80
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_satellite_camera@@YGXPAUCAMERA@@@Z@4JA DD 0b3H ; `update_satellite_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
CONST	SEGMENT
??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@ DB 'raw->external_view_'
	DB	'entity', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\camera\cm_sat'
	DB	'el.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA DD 052H ; `reset_satellite_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_satel.c
;	COMDAT ?update_satellite_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_en$ = -12						; size = 4
_pitch$ = -8						; size = 4
_heading$ = -4						; size = 4
_raw$ = 8						; size = 4
?update_satellite_camera@@YGXPAUCAMERA@@@Z PROC		; update_satellite_camera, COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 180  : 	float
; 181  : 		heading,
; 182  : 		pitch;
; 183  : 	
; 184  : 	/*vec3d
; 185  : 		pos;*/
; 186  : 
; 187  : 	entity
; 188  : 		*en;
; 189  : 	
; 190  : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@update_sat
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
  00014	83 c0 0b	 add	 eax, 11			; 0000000bH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_sat:

; 191  : 	
; 192  : 	en = raw->external_view_entity;

  00027	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002a	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00030	89 4d f4	 mov	 DWORD PTR _en$[ebp], ecx

; 193  : 
; 194  : 	if (adjust_view_left_key || joystick_pov_left)

  00033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_left_key@@3HA, 0 ; adjust_view_left_key
  0003a	75 09		 jne	 SHORT $LN5@update_sat
  0003c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_left@@3HA, 0 ; joystick_pov_left
  00043	74 18		 je	 SHORT $LN3@update_sat
$LN5@update_sat:

; 195  : 	{
; 196  : 		raw->position.x -= 1;

  00045	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00048	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00057	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0005b	eb 28		 jmp	 SHORT $LN6@update_sat
$LN3@update_sat:

; 197  : 	}
; 198  : 	else if (adjust_view_right_key || joystick_pov_right)

  0005d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_right_key@@3HA, 0 ; adjust_view_right_key
  00064	75 09		 jne	 SHORT $LN7@update_sat
  00066	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_right@@3HA, 0 ; joystick_pov_right
  0006d	74 16		 je	 SHORT $LN6@update_sat
$LN7@update_sat:

; 199  : 	{
; 200  : 		raw->position.x += 1;

  0006f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00072	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00076	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00081	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
$LN6@update_sat:

; 201  : 	}
; 202  : 
; 203  : 	if (adjust_view_up_key || joystick_pov_up)

  00085	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_up_key@@3HA, 0 ; adjust_view_up_key
  0008c	75 09		 jne	 SHORT $LN10@update_sat
  0008e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_up@@3HA, 0 ; joystick_pov_up
  00095	74 1a		 je	 SHORT $LN8@update_sat
$LN10@update_sat:

; 204  : 	{
; 205  : 		raw->position.z += 1;

  00097	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0009a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0009f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000aa	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  000af	eb 2a		 jmp	 SHORT $LN11@update_sat
$LN8@update_sat:

; 206  : 
; 207  : 	}
; 208  : 	else if (adjust_view_down_key || joystick_pov_down)

  000b1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_down_key@@3HA, 0 ; adjust_view_down_key
  000b8	75 09		 jne	 SHORT $LN12@update_sat
  000ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_down@@3HA, 0 ; joystick_pov_down
  000c1	74 18		 je	 SHORT $LN11@update_sat
$LN12@update_sat:

; 209  : 	{
; 210  : 		raw->position.z -= 1;

  000c3	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000c6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000cb	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000d6	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN11@update_sat:

; 211  : 	}
; 212  : 	
; 213  : 	if (adjust_view_zoom_out_key)

  000db	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_zoom_out_key@@3HA, 0 ; adjust_view_zoom_out_key
  000e2	74 51		 je	 SHORT $LN13@update_sat

; 214  : 	{
; 215  : 		raw->position.y += 1000;

  000e4	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000e7	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000ec	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@447a0000
  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000f7	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 216  : 
; 217  : 		raw->position.y = min (5000 + raw->motion_vector.y, raw->position.y);

  000fc	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00107	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  0010c	f3 0f 11 45 b0	 movss	 DWORD PTR $T2[ebp], xmm0
  00111	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00114	83 c1 04	 add	 ecx, 4
  00117	51		 push	 ecx
  00118	8d 55 b0	 lea	 edx, DWORD PTR $T2[ebp]
  0011b	52		 push	 edx
  0011c	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00124	8b 10		 mov	 edx, DWORD PTR [eax]
  00126	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 218  : 		
; 219  : 		adjust_view_zoom_out_key = FALSE;

  00129	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?adjust_view_zoom_out_key@@3HA, 0 ; adjust_view_zoom_out_key
  00133	eb 58		 jmp	 SHORT $LN15@update_sat
$LN13@update_sat:

; 220  : 	}
; 221  : 	else if (adjust_view_zoom_in_key)

  00135	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_zoom_in_key@@3HA, 0 ; adjust_view_zoom_in_key
  0013c	74 4f		 je	 SHORT $LN15@update_sat

; 222  : 	{
; 223  : 		raw->position.y -= 1000;

  0013e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00141	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00146	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@447a0000
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00151	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 224  : 
; 225  : 		raw->position.y = max (1000 + raw->motion_vector.y, raw->position.y);

  00156	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00159	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@447a0000
  00161	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  00166	f3 0f 11 45 ac	 movss	 DWORD PTR $T1[ebp], xmm0
  0016b	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0016e	83 c1 04	 add	 ecx, 4
  00171	51		 push	 ecx
  00172	8d 55 ac	 lea	 edx, DWORD PTR $T1[ebp]
  00175	52		 push	 edx
  00176	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0017b	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0017e	8b 10		 mov	 edx, DWORD PTR [eax]
  00180	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 226  : 		
; 227  : 		adjust_view_zoom_in_key = FALSE;

  00183	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?adjust_view_zoom_in_key@@3HA, 0 ; adjust_view_zoom_in_key
$LN15@update_sat:

; 228  : 	}
; 229  : 
; 230  : 	heading = 0.1;

  0018d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00195	f3 0f 11 45 fc	 movss	 DWORD PTR _heading$[ebp], xmm0

; 231  : 	
; 232  : 	pitch = -1.5;

  0019a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc00000
  001a2	f3 0f 11 45 f8	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 233  : 	
; 234  : 	/*switch (get_local_entity_type (en))
; 235  : 	{
; 236  : 		case ENTITY_TYPE_HELICOPTER:
; 237  : 		case ENTITY_TYPE_FIXED_WING:
; 238  : 		case ENTITY_TYPE_ROUTED_VEHICLE:
; 239  : 		case ENTITY_TYPE_SHIP_VEHICLE:
; 240  : 		case ENTITY_TYPE_ANTI_AIRCRAFT:
; 241  : 		case ENTITY_TYPE_GROUP:
; 242  : 		{
; 243  : 			get_local_entity_target_point (en, &pos);
; 244  : 	
; 245  : 			raw->position.x = pos.x + v.x;
; 246  : 			raw->position.z = pos.z + v.z;		
; 247  : 
; 248  : 			break;
; 249  : 		}
; 250  : 	}*/
; 251  : 
; 252  : 	get_3d_transformation_matrix (raw->attitude, heading, pitch, 0.0);

  001a7	51		 push	 ecx
  001a8	0f 57 c0	 xorps	 xmm0, xmm0
  001ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b0	51		 push	 ecx
  001b1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  001b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bb	51		 push	 ecx
  001bc	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  001c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c6	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001c9	83 c0 18	 add	 eax, 24			; 00000018H
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 253  : }

  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5b		 pop	 ebx
  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c2 04 00	 ret	 4
?update_satellite_camera@@YGXPAUCAMERA@@@Z ENDP		; update_satellite_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_satel.c
;	COMDAT ?reset_satellite_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
tv162 = -156						; size = 4
tv142 = -156						; size = 4
tv90 = -156						; size = 4
tv343 = -152						; size = 4
tv154 = -152						; size = 4
tv134 = -152						; size = 4
tv82 = -152						; size = 4
$T1 = -148						; size = 4
_length$ = -80						; size = 4
_z_max$ = -76						; size = 4
_z_min$ = -72						; size = 4
_heading$ = -68						; size = 4
_m$ = -64						; size = 36
_v$ = -28						; size = 12
_pos$ = -16						; size = 12
_en$ = -4						; size = 4
_raw$ = 8						; size = 4
?reset_satellite_camera@@YGXPAUCAMERA@@@Z PROC		; reset_satellite_camera, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 83   : 	entity
; 84   : 		*en;
; 85   : 
; 86   : 	vec3d
; 87   : 		pos,
; 88   : 		v;
; 89   : 
; 90   : 	matrix3x3
; 91   : 		m;
; 92   : 
; 93   : 	float
; 94   : 		heading,
; 95   : 		z_min,
; 96   : 		z_max,
; 97   : 		length;
; 98   : 
; 99   : 	ASSERT (raw);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@reset_sate
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
  00017	83 c0 11	 add	 eax, 17			; 00000011H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@reset_sate:

; 100  : 
; 101  : 	ASSERT (raw->external_view_entity);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002d	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00034	75 18		 jne	 SHORT $LN3@reset_sate
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
  0003b	83 c0 13	 add	 eax, 19			; 00000013H
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@reset_sate:

; 102  : 
; 103  : 	en = raw->external_view_entity;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00051	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00057	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 104  : 
; 105  : 	z_min = get_local_entity_float_value (en, FLOAT_TYPE_CHASE_VIEW_MIN_DISTANCE);

  0005a	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0005e	74 0d		 je	 SHORT $LN8@reset_sate
  00060	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  0006b	eb 24		 jmp	 SHORT $LN9@reset_sate
$LN8@reset_sate:
  0006d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
  00073	83 c2 17	 add	 edx, 23			; 00000017H
  00076	52		 push	 edx
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00087	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN9@reset_sate:
  00091	b9 01 00 00 00	 mov	 ecx, 1
  00096	85 c9		 test	 ecx, ecx
  00098	74 0c		 je	 SHORT $LN10@reset_sate
  0009a	c7 85 64 ff ff
	ff 15 00 00 00	 mov	 DWORD PTR tv90[ebp], 21	; 00000015H
  000a4	eb 24		 jmp	 SHORT $LN11@reset_sate
$LN10@reset_sate:
  000a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
  000ac	83 c2 17	 add	 edx, 23			; 00000017H
  000af	52		 push	 edx
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c0	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN11@reset_sate:
  000ca	6a 15		 push	 21			; 00000015H
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  000cf	51		 push	 ecx
  000d0	69 95 68 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv82[ebp], 700
  000da	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv90[ebp]
  000e0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000e7	ff d1		 call	 ecx
  000e9	d9 5d b8	 fstp	 DWORD PTR _z_min$[ebp]

; 106  : 	z_max = get_local_entity_float_value (en, FLOAT_TYPE_CHASE_VIEW_MAX_DISTANCE);

  000ec	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  000f0	74 0d		 je	 SHORT $LN12@reset_sate
  000f2	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv134[ebp], ecx
  000fd	eb 24		 jmp	 SHORT $LN13@reset_sate
$LN12@reset_sate:
  000ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
  00105	83 c2 18	 add	 edx, 24			; 00000018H
  00108	52		 push	 edx
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00119	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv134[ebp], 0
$LN13@reset_sate:
  00123	b9 01 00 00 00	 mov	 ecx, 1
  00128	85 c9		 test	 ecx, ecx
  0012a	74 0c		 je	 SHORT $LN14@reset_sate
  0012c	c7 85 64 ff ff
	ff 13 00 00 00	 mov	 DWORD PTR tv142[ebp], 19 ; 00000013H
  00136	eb 24		 jmp	 SHORT $LN15@reset_sate
$LN14@reset_sate:
  00138	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
  0013e	83 c2 18	 add	 edx, 24			; 00000018H
  00141	52		 push	 edx
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00152	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN15@reset_sate:
  0015c	6a 13		 push	 19			; 00000013H
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  00161	51		 push	 ecx
  00162	69 95 68 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv134[ebp], 700
  0016c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv142[ebp]
  00172	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00179	ff d1		 call	 ecx
  0017b	d9 5d b4	 fstp	 DWORD PTR _z_max$[ebp]

; 107  : 
; 108  : 	//ASSERT (z_min < z_max);
; 109  : 
; 110  : 	heading = get_local_entity_float_value (en, FLOAT_TYPE_HEADING);

  0017e	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00182	74 0d		 je	 SHORT $LN16@reset_sate
  00184	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00187	8b 08		 mov	 ecx, DWORD PTR [eax]
  00189	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv154[ebp], ecx
  0018f	eb 24		 jmp	 SHORT $LN17@reset_sate
$LN16@reset_sate:
  00191	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
  00197	83 c2 1c	 add	 edx, 28			; 0000001cH
  0019a	52		 push	 edx
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001a5	50		 push	 eax
  001a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ab	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv154[ebp], 0
$LN17@reset_sate:
  001b5	b9 01 00 00 00	 mov	 ecx, 1
  001ba	85 c9		 test	 ecx, ecx
  001bc	74 0c		 je	 SHORT $LN18@reset_sate
  001be	c7 85 64 ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv162[ebp], 52 ; 00000034H
  001c8	eb 24		 jmp	 SHORT $LN19@reset_sate
$LN18@reset_sate:
  001ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_satellite_camera@@YGXPAUCAMERA@@@Z@4JA
  001d0	83 c2 1c	 add	 edx, 28			; 0000001cH
  001d3	52		 push	 edx
  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@DCMBOCEK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e4	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv162[ebp], 0
$LN19@reset_sate:
  001ee	6a 34		 push	 52			; 00000034H
  001f0	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  001f3	51		 push	 ecx
  001f4	69 95 68 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv154[ebp], 700
  001fe	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv162[ebp]
  00204	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0020b	ff d1		 call	 ecx
  0020d	d9 5d bc	 fstp	 DWORD PTR _heading$[ebp]

; 111  : 
; 112  : 	get_3d_transformation_matrix (m, heading, CHASE_CAMERA_RESET_PITCH, 0.0);

  00210	51		 push	 ecx
  00211	0f 57 c0	 xorps	 xmm0, xmm0
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	51		 push	 ecx
  0021a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be860a92
  00222	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00227	51		 push	 ecx
  00228	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0022d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00232	8d 45 c0	 lea	 eax, DWORD PTR _m$[ebp]
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 113  : 
; 114  : 	v.x = 0.0;

  0023b	0f 57 c0	 xorps	 xmm0, xmm0
  0023e	f3 0f 11 45 e4	 movss	 DWORD PTR _v$[ebp], xmm0

; 115  : 	v.y = 0.0;

  00243	0f 57 c0	 xorps	 xmm0, xmm0
  00246	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp+4], xmm0

; 116  : 	v.z = 0.0;

  0024b	0f 57 c0	 xorps	 xmm0, xmm0
  0024e	f3 0f 11 45 ec	 movss	 DWORD PTR _v$[ebp+8], xmm0

; 117  : 
; 118  : 	multiply_matrix3x3_vec3d (&v, m, &v);

  00253	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  00256	50		 push	 eax
  00257	8d 4d c0	 lea	 ecx, DWORD PTR _m$[ebp]
  0025a	51		 push	 ecx
  0025b	8d 55 e4	 lea	 edx, DWORD PTR _v$[ebp]
  0025e	52		 push	 edx
  0025f	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 119  : 
; 120  : 	get_local_entity_target_point (en, &pos);

  00264	8d 45 f0	 lea	 eax, DWORD PTR _pos$[ebp]
  00267	50		 push	 eax
  00268	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  0026b	51		 push	 ecx
  0026c	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 121  : 
; 122  : 	raw->position.x = pos.x + v.x;

  00271	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pos$[ebp]
  00276	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _v$[ebp]
  0027b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0027e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 123  : 	raw->position.y = pos.y + v.y;

  00282	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pos$[ebp+4]
  00287	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _v$[ebp+4]
  0028c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0028f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 124  : 	raw->position.z = pos.z + v.z;

  00294	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pos$[ebp+8]
  00299	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _v$[ebp+8]
  0029e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002a1	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 125  : 	
; 126  : 	//
; 127  : 	// keep point above ground (unless point off map)
; 128  : 	//
; 129  : 	
; 130  : 		if (point_inside_map_area (&raw->position))

  002a6	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002a9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002ad	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  002b4	0f 82 96 00 00
	00		 jb	 $LN4@reset_sate
  002ba	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002bd	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  002c5	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  002c8	0f 82 82 00 00
	00		 jb	 $LN4@reset_sate
  002ce	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002d1	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  002d6	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  002dd	72 71		 jb	 SHORT $LN4@reset_sate
  002df	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002e2	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  002ea	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  002ee	72 60		 jb	 SHORT $LN4@reset_sate

; 131  : 		{
; 132  : 			raw->position.y = max (raw->position.y, get_3d_terrain_point_data (raw->position.x, raw->position.z, &raw->terrain_info) + CAMERA_MIN_HEIGHT_ABOVE_GROUND);

  002f0	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002f3	83 c0 50	 add	 eax, 80			; 00000050H
  002f6	50		 push	 eax
  002f7	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  002fa	51		 push	 ecx
  002fb	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00300	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00305	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00308	51		 push	 ecx
  00309	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00317	d9 9d 68 ff ff
	ff		 fstp	 DWORD PTR tv343[ebp]
  0031d	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR tv343[ebp]
  00325	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f8ccccd
  0032d	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  00335	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0033b	50		 push	 eax
  0033c	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0033f	83 c1 04	 add	 ecx, 4
  00342	51		 push	 ecx
  00343	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00348	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  0034b	8b 00		 mov	 eax, DWORD PTR [eax]
  0034d	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN4@reset_sate:

; 133  : 		}
; 134  : 
; 135  : 	
; 136  : 	raw->motion_vector.y = raw->position.y;

  00350	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00353	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00356	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00359	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 137  : 	
; 138  : 	raw->position.y += 5000;

  0035c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0035f	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00364	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@459c4000
  0036c	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0036f	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 139  : 		
; 140  : 	//
; 141  : 	// attitude
; 142  : 	//
; 143  : 
; 144  : 	v.x = pos.x - raw->position.x;

  00374	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00377	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pos$[ebp]
  0037c	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00380	f3 0f 11 45 e4	 movss	 DWORD PTR _v$[ebp], xmm0

; 145  : 	v.y = pos.y - raw->position.y;

  00385	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00388	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pos$[ebp+4]
  0038d	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00392	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp+4], xmm0

; 146  : 	v.z = pos.z - raw->position.z;

  00397	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0039a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pos$[ebp+8]
  0039f	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  003a4	f3 0f 11 45 ec	 movss	 DWORD PTR _v$[ebp+8], xmm0

; 147  : 
; 148  : 	length = (v.x * v.x) + (v.y * v.y) + (v.z * v.z);

  003a9	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v$[ebp]
  003ae	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _v$[ebp]
  003b3	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _v$[ebp+4]
  003b8	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _v$[ebp+4]
  003bd	f3 0f 58 c1	 addss	 xmm0, xmm1
  003c1	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _v$[ebp+8]
  003c6	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _v$[ebp+8]
  003cb	f3 0f 58 c1	 addss	 xmm0, xmm1
  003cf	f3 0f 11 45 b0	 movss	 DWORD PTR _length$[ebp], xmm0

; 149  : 
; 150  : 	if (length > 1.0)

  003d4	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  003d9	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  003e1	76 39		 jbe	 SHORT $LN5@reset_sate

; 151  : 	{
; 152  : 		length = sqrt (length);

  003e3	51		 push	 ecx
  003e4	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _length$[ebp]
  003e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ee	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  003f3	d9 5d b0	 fstp	 DWORD PTR _length$[ebp]

; 153  : 
; 154  : 		normalise_3d_vector_given_magnitude (&v, length);

  003f6	51		 push	 ecx
  003f7	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _length$[ebp]
  003fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00401	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  00404	50		 push	 eax
  00405	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 155  : 
; 156  : 		get_matrix3x3_from_unit_vec3d (raw->attitude, &v);

  0040a	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  0040d	50		 push	 eax
  0040e	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00411	83 c1 18	 add	 ecx, 24			; 00000018H
  00414	51		 push	 ecx
  00415	e8 00 00 00 00	 call	 ?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z ; get_matrix3x3_from_unit_vec3d

; 157  : 	}
; 158  : 	else

  0041a	eb 0c		 jmp	 SHORT $LN6@reset_sate
$LN5@reset_sate:

; 159  : 	{
; 160  : 		get_identity_matrix3x3 (raw->attitude);

  0041c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0041f	83 c0 18	 add	 eax, 24			; 00000018H
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 ?get_identity_matrix3x3@@YGXQAY02M@Z ; get_identity_matrix3x3
$LN6@reset_sate:

; 161  : 	}
; 162  : 
; 163  : 	//
; 164  : 	// motion vector
; 165  : 	//
; 166  : 
; 167  : 	raw->motion_vector.x = 0.0;

  00428	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0042b	0f 57 c0	 xorps	 xmm0, xmm0
  0042e	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 168  : 	raw->motion_vector.z = 0.0;

  00433	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00436	0f 57 c0	 xorps	 xmm0, xmm0
  00439	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 169  : 	
; 170  : 	raw->fly_by_camera_timer = frand1() * 150 + 80; // parasiting on the struct, can't get my own data...

  0043e	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00448	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0044d	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00452	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00458	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0045b	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00461	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00465	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  0046d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4062c00000000000
  00475	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4054000000000000
  0047d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00481	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00484	f3 0f 11 82 90
	00 00 00	 movss	 DWORD PTR [edx+144], xmm0

; 171  : 
; 172  : }

  0048c	5f		 pop	 edi
  0048d	5e		 pop	 esi
  0048e	5b		 pop	 ebx
  0048f	8b e5		 mov	 esp, ebp
  00491	5d		 pop	 ebp
  00492	c2 04 00	 ret	 4
?reset_satellite_camera@@YGXPAUCAMERA@@@Z ENDP		; reset_satellite_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
