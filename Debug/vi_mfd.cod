; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@HNJPNMMI@VIPER_MFD_MODE_OFF@		; `string'
PUBLIC	??_C@_0BH@JMBJJHKF@VIPER_MFD_MODE_DAMAGED@	; `string'
PUBLIC	??_C@_0BE@HELOCPKA@VIPER_MFD_MODE_FLIR@		; `string'
PUBLIC	??_C@_0BD@PPPODOIG@VIPER_MFD_MODE_DTV@		; `string'
PUBLIC	??_C@_0BD@NCFMAPEP@VIPER_MFD_MODE_TSD@		; `string'
PUBLIC	??_C@_0BD@KMIAJJKD@VIPER_MFD_MODE_ASE@		; `string'
PUBLIC	??_C@_0BG@GMDFBIIA@VIPER_MFD_MODE_WEAPON@	; `string'
PUBLIC	??_C@_0BG@FPJGHLND@VIPER_MFD_MODE_SYSTEM@	; `string'
PUBLIC	??_C@_0BG@LGNEDLON@VIPER_MFD_MODE_ENGINE@	; `string'
PUBLIC	??_C@_0BG@MCEPBGIL@VIPER_MFD_MODE_FLIGHT@	; `string'
PUBLIC	??_C@_0BH@IEOCHPIP@VIPER_MFD_MODE_MISSION@	; `string'
PUBLIC	??_C@_0BN@JJDJCFFB@VIPER_MFD_LOCATION_PILOT_LHS@ ; `string'
PUBLIC	??_C@_0BN@CJPPAFPN@VIPER_MFD_LOCATION_PILOT_RHS@ ; `string'
PUBLIC	??_C@_0CA@MMKDJIFC@VIPER_MFD_LOCATION_CO_PILOT_LHS@ ; `string'
PUBLIC	??_C@_0CA@HMGFLIPO@VIPER_MFD_LOCATION_CO_PILOT_RHS@ ; `string'
_BSS	SEGMENT
?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A DD 01H DUP (?) ; pilot_lhs_mfd_mode
?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A DD 01H DUP (?) ; pilot_rhs_mfd_mode
?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A DD 01H DUP (?) ; co_pilot_lhs_mfd_mode
?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A DD 01H DUP (?) ; co_pilot_rhs_mfd_mode
?pilot_dfd_mode@@3W4VIPER_MFD_MODES@@A DD 01H DUP (?)	; pilot_dfd_mode
?co_pilot_dfd_mode@@3W4VIPER_MFD_MODES@@A DD 01H DUP (?) ; co_pilot_dfd_mode
_BSS	ENDS
;	COMDAT ??_C@_0CA@HMGFLIPO@VIPER_MFD_LOCATION_CO_PILOT_RHS@
CONST	SEGMENT
??_C@_0CA@HMGFLIPO@VIPER_MFD_LOCATION_CO_PILOT_RHS@ DB 'VIPER_MFD_LOCATIO'
	DB	'N_CO_PILOT_RHS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MMKDJIFC@VIPER_MFD_LOCATION_CO_PILOT_LHS@
CONST	SEGMENT
??_C@_0CA@MMKDJIFC@VIPER_MFD_LOCATION_CO_PILOT_LHS@ DB 'VIPER_MFD_LOCATIO'
	DB	'N_CO_PILOT_LHS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CJPPAFPN@VIPER_MFD_LOCATION_PILOT_RHS@
CONST	SEGMENT
??_C@_0BN@CJPPAFPN@VIPER_MFD_LOCATION_PILOT_RHS@ DB 'VIPER_MFD_LOCATION_P'
	DB	'ILOT_RHS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JJDJCFFB@VIPER_MFD_LOCATION_PILOT_LHS@
CONST	SEGMENT
??_C@_0BN@JJDJCFFB@VIPER_MFD_LOCATION_PILOT_LHS@ DB 'VIPER_MFD_LOCATION_P'
	DB	'ILOT_LHS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IEOCHPIP@VIPER_MFD_MODE_MISSION@
CONST	SEGMENT
??_C@_0BH@IEOCHPIP@VIPER_MFD_MODE_MISSION@ DB 'VIPER_MFD_MODE_MISSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MCEPBGIL@VIPER_MFD_MODE_FLIGHT@
CONST	SEGMENT
??_C@_0BG@MCEPBGIL@VIPER_MFD_MODE_FLIGHT@ DB 'VIPER_MFD_MODE_FLIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LGNEDLON@VIPER_MFD_MODE_ENGINE@
CONST	SEGMENT
??_C@_0BG@LGNEDLON@VIPER_MFD_MODE_ENGINE@ DB 'VIPER_MFD_MODE_ENGINE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FPJGHLND@VIPER_MFD_MODE_SYSTEM@
CONST	SEGMENT
??_C@_0BG@FPJGHLND@VIPER_MFD_MODE_SYSTEM@ DB 'VIPER_MFD_MODE_SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFBIIA@VIPER_MFD_MODE_WEAPON@
CONST	SEGMENT
??_C@_0BG@GMDFBIIA@VIPER_MFD_MODE_WEAPON@ DB 'VIPER_MFD_MODE_WEAPON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KMIAJJKD@VIPER_MFD_MODE_ASE@
CONST	SEGMENT
??_C@_0BD@KMIAJJKD@VIPER_MFD_MODE_ASE@ DB 'VIPER_MFD_MODE_ASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NCFMAPEP@VIPER_MFD_MODE_TSD@
CONST	SEGMENT
??_C@_0BD@NCFMAPEP@VIPER_MFD_MODE_TSD@ DB 'VIPER_MFD_MODE_TSD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PPPODOIG@VIPER_MFD_MODE_DTV@
CONST	SEGMENT
??_C@_0BD@PPPODOIG@VIPER_MFD_MODE_DTV@ DB 'VIPER_MFD_MODE_DTV', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HELOCPKA@VIPER_MFD_MODE_FLIR@
CONST	SEGMENT
??_C@_0BE@HELOCPKA@VIPER_MFD_MODE_FLIR@ DB 'VIPER_MFD_MODE_FLIR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JMBJJHKF@VIPER_MFD_MODE_DAMAGED@
CONST	SEGMENT
??_C@_0BH@JMBJJHKF@VIPER_MFD_MODE_DAMAGED@ DB 'VIPER_MFD_MODE_DAMAGED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HNJPNMMI@VIPER_MFD_MODE_OFF@
CONST	SEGMENT
??_C@_0BD@HNJPNMMI@VIPER_MFD_MODE_OFF@ DB 'VIPER_MFD_MODE_OFF', 00H ; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	_tanf
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?tan@@YGMM@Z					; tan
PUBLIC	?initialise_viper_mfd@@YGXXZ			; initialise_viper_mfd
PUBLIC	?deinitialise_viper_mfd@@YGXXZ			; deinitialise_viper_mfd
PUBLIC	?draw_viper_mfd@@YGXXZ				; draw_viper_mfd
PUBLIC	?draw_viper_full_screen_display@@YGXXZ		; draw_viper_full_screen_display
PUBLIC	?draw_overlaid_viper_mfd@@YGXXZ			; draw_overlaid_viper_mfd
PUBLIC	?get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z ; get_viper_mfd_has_focus
PUBLIC	?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode
PUBLIC	?select_next_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ; select_next_viper_mfd
PUBLIC	?select_previous_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ; select_previous_viper_mfd
PUBLIC	?toggle_viper_mfd_on_off@@YGXW4VIPER_MFD_LOCATIONS@@@Z ; toggle_viper_mfd_on_off
PUBLIC	?select_next_viper_pilot_tsd_ase_range@@YGXXZ	; select_next_viper_pilot_tsd_ase_range
PUBLIC	?select_next_viper_co_pilot_tsd_ase_range@@YGXXZ ; select_next_viper_co_pilot_tsd_ase_range
PUBLIC	?select_previous_viper_pilot_tsd_ase_range@@YGXXZ ; select_previous_viper_pilot_tsd_ase_range
PUBLIC	?select_previous_viper_co_pilot_tsd_ase_range@@YGXXZ ; select_previous_viper_co_pilot_tsd_ase_range
PUBLIC	?select_next_viper_pilot_tsd_declutter_level@@YGXXZ ; select_next_viper_pilot_tsd_declutter_level
PUBLIC	?select_next_viper_co_pilot_tsd_declutter_level@@YGXXZ ; select_next_viper_co_pilot_tsd_declutter_level
PUBLIC	?select_previous_viper_pilot_tsd_declutter_level@@YGXXZ ; select_previous_viper_pilot_tsd_declutter_level
PUBLIC	?select_previous_viper_co_pilot_tsd_declutter_level@@YGXXZ ; select_previous_viper_co_pilot_tsd_declutter_level
PUBLIC	?toggle_viper_ase_auto_page@@YGXXZ		; toggle_viper_ase_auto_page
PUBLIC	?auto_page_viper_ase_mfd@@YGXXZ			; auto_page_viper_ase_mfd
PUBLIC	?select_viper_tads_mfd@@YGXXZ			; select_viper_tads_mfd
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA ; `transform_mfd_screen_co_ords_to_mfd_texture_co_ords'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_01CBDEGOCN@j@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_03GOOLIKIF@?$CF3d@			; `string'
PUBLIC	??_C@_04OGKJMPGK@?$CF02d@			; `string'
PUBLIC	??_C@_04HPNJOLEN@?$CF3do@			; `string'
PUBLIC	?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA ; `draw_heading_scale'::`1'::__LINE__Var
PUBLIC	??_C@_04OHGLKFFN@?$CF03d@			; `string'
PUBLIC	?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA ; `display_navigation_info'::`1'::__LINE__Var
PUBLIC	??_C@_06JCIGMCHD@?$CFc?3?$CFdm@			; `string'
PUBLIC	??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@		; `string'
PUBLIC	??_C@_07CFANIJPM@?$CFc?3?$CFdKm@		; `string'
PUBLIC	??_C@_06BAOIPBEF@?9?3?9?9?4?9@			; `string'
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@	; `string'
PUBLIC	??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@		; `string'
PUBLIC	??_C@_05KABNCBHK@?$CFd?0?$CFd@			; `string'
PUBLIC	??_C@_05MDNKIPAL@?$CFd?5lb@			; `string'
PUBLIC	?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA ; `draw_radar_target_symbol'::`1'::__LINE__Var
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BA@IIPCKJML@source_position@		; `string'
PUBLIC	??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ ; `string'
PUBLIC	??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_3d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_02KMMHFIEO@eo@				; `string'
PUBLIC	??_C@_0BF@MDEHLDP@eo_3d_texture_screen@		; `string'
PUBLIC	??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ ; `string'
PUBLIC	??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ ; `string'
PUBLIC	??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_full_screen_3d_eo_display'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA ; `draw_2d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_04MIGKMLBH@FLIR@				; `string'
PUBLIC	??_C@_03ENJJJDDH@DTV@				; `string'
PUBLIC	??_C@_03MAMPKPPK@XXX@				; `string'
PUBLIC	??_C@_08JFLECGBM@LO?5LIGHT@			; `string'
PUBLIC	??_C@_02ONPABID@LO@				; `string'
PUBLIC	??_C@_04GGBPDDBN@?$CF?41f@			; `string'
PUBLIC	??_C@_06GPMJGLEM@MARKED@			; `string'
PUBLIC	??_C@_01CPLAODJH@S@				; `string'
PUBLIC	??_C@_06BLLIFECI@?$CF3d?5FT@			; `string'
PUBLIC	??_C@_07FGFCMGOE@?$CF3d?5KTS@			; `string'
PUBLIC	??_C@_09ICGCKLLB@LOW?5LIGHT@			; `string'
PUBLIC	??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@		; `string'
PUBLIC	??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA ; `draw_heading_scale_tsd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@ ; `string'
PUBLIC	??_C@_06LLLMNJMM@NO?5ACQ@			; `string'
PUBLIC	??_C@_04DBODHFDK@TADS@				; `string'
PUBLIC	??_C@_05BDMPLNHB@HIDSS@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_03CIAFGHAC@2Km@				; `string'
PUBLIC	??_C@_03LFNCFPLL@5Km@				; `string'
PUBLIC	??_C@_04PJCLBGLO@10Km@				; `string'
PUBLIC	??_C@_04IJFFJMFM@25Km@				; `string'
PUBLIC	??_C@_03NIFPGLBG@ALL@				; `string'
PUBLIC	??_C@_03DBNGLLAD@TGT@				; `string'
PUBLIC	??_C@_03DIMJBCMI@NAV@				; `string'
PUBLIC	??_C@_03NGNKAJPJ@?$CFdm@			; `string'
PUBLIC	??_C@_06OMCABMNO@?$CF?41fKm@			; `string'
PUBLIC	?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA ; `get_closest_missile'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0L@DADPKEOI@IR?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKBKNIAL@IR?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06CNPDBJMK@IR?5XXX@			; `string'
PUBLIC	??_C@_05JBLHJOBL@IR?5ON@			; `string'
PUBLIC	??_C@_06CCMEMHEJ@IR?5OFF@			; `string'
PUBLIC	??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKIOJJOP@RD?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06JNKFDAHI@RD?5XXX@			; `string'
PUBLIC	??_C@_05BHAGAOGB@RD?5ON@			; `string'
PUBLIC	??_C@_06JCJCOOPL@RD?5OFF@			; `string'
PUBLIC	??_C@_04LMMJFDCN@AUTO@				; `string'
PUBLIC	??_C@_08GHAEIHAP@CHAFF?3XX@			; `string'
PUBLIC	??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@		; `string'
PUBLIC	??_C@_04KJNFJKOK@C?3XX@				; `string'
PUBLIC	??_C@_06GNOFKMCG@C?3?$CF02d@			; `string'
PUBLIC	??_C@_08HGDOPGOH@FLARE?3XX@			; `string'
PUBLIC	??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@		; `string'
PUBLIC	??_C@_04GBDFBFJK@F?3XX@				; `string'
PUBLIC	??_C@_06DPNNIDIB@F?3?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA ; `draw_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03GLKEJMAA@?$CF4d@			; `string'
PUBLIC	??_C@_04CPMKADPB@XXXX@				; `string'
PUBLIC	??_C@_05FOOOBDLP@CHAFF@				; `string'
PUBLIC	??_C@_01GFHCPBMG@C@				; `string'
PUBLIC	??_C@_03GPCJOALC@?$CF2d@			; `string'
PUBLIC	??_C@_02BAHDIOLJ@XX@				; `string'
PUBLIC	??_C@_05MLKBHMKD@FLARE@				; `string'
PUBLIC	??_C@_01BIAFAFID@F@				; `string'
PUBLIC	??_C@_01FHEEJDEE@A@				; `string'
PUBLIC	??_C@_03KIGHCFHP@MAN@				; `string'
PUBLIC	??_C@_01PLPBNMEI@M@				; `string'
PUBLIC	??_C@_03NHPMNECN@ARM@				; `string'
PUBLIC	??_C@_04JMNPMIJD@SAFE@				; `string'
PUBLIC	??_C@_04OKGDLNCL@NONE@				; `string'
PUBLIC	??_C@_03JKJFCLEN@FCR@				; `string'
PUBLIC	??_C@_03MGGCNFDL@LRF@				; `string'
PUBLIC	??_C@_05MJCDDMFE@TRNGL@				; `string'
PUBLIC	??_C@_04EKDNBCDP@LOAL@				; `string'
PUBLIC	??_C@_04EIHLKMGG@LOBL@				; `string'
PUBLIC	??_C@_05GPKGLDLB@SALVO@				; `string'
PUBLIC	??_C@_0CF@LHBBDA@more?5than?54?5hellfires?5on?5Viper?5@ ; `string'
PUBLIC	??_C@_0CI@JHPKLNBL@?$CB?$CCmore?5than?54?5hellfires?5on?5Vipe@ ; `string'
PUBLIC	??_C@_01DGKLNCNG@R@				; `string'
PUBLIC	??_C@_01OCOKONAJ@L@				; `string'
PUBLIC	??_C@_02MCEHGFCK@MP@				; `string'
PUBLIC	?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HM@Z@4JA ; `print_mfd_system_message'::`1'::__LINE__Var
PUBLIC	??_C@_09FJJPPKDN@equipment@			; `string'
PUBLIC	??_C@_07FPLKDJGL@warning@			; `string'
PUBLIC	??_C@_02GIPFHKNO@OK@				; `string'
PUBLIC	??_C@_04OOEBCMBF@FAIL@				; `string'
PUBLIC	??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@		; `string'
PUBLIC	??_C@_0N@JDBOFCJG@RADAR?5JAMMER@		; `string'
PUBLIC	??_C@_09MILGCPFO@IR?5JAMMER@			; `string'
PUBLIC	??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@	; `string'
PUBLIC	??_C@_0P@OEDGDHNF@COMMUNICATIONS@		; `string'
PUBLIC	??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@	; `string'
PUBLIC	??_C@_04IDKCLELC@PNVS@				; `string'
PUBLIC	??_C@_0L@LMAEBBOE@STABILISER@			; `string'
PUBLIC	??_C@_0L@FFIGCBMA@MAIN?5ROTOR@			; `string'
PUBLIC	??_C@_07OHKEFPKJ@DAMAGED@			; `string'
PUBLIC	??_C@_0L@MCBINMPD@TAIL?5ROTOR@			; `string'
PUBLIC	??_C@_08ICMALC@L?5ENGINE@			; `string'
PUBLIC	??_C@_03KMHDAHAO@SPU@				; `string'
PUBLIC	??_C@_08GEIAFJFB@R?5ENGINE@			; `string'
PUBLIC	??_C@_03IBEFMGAI@LOW@				; `string'
PUBLIC	??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@		; `string'
PUBLIC	??_C@_0N@MMJNGGCF@OIL?5PRESSURE@		; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH@				; `string'
PUBLIC	??_C@_08HFKNNLAF@FUEL?5QTY@			; `string'
PUBLIC	??_C@_07MGEFOJJP@?$CF04d?5lb@			; `string'
PUBLIC	??_C@_08PLAGFMEO@THROTTLE@			; `string'
PUBLIC	??_C@_04LMJCBFEL@OFF?5@				; `string'
PUBLIC	??_C@_04IMMGDCFE@IDLE@				; `string'
PUBLIC	??_C@_04MJEFHDBD@FLY?5@				; `string'
PUBLIC	??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@		; `string'
PUBLIC	??_C@_09PEMPOEMF@?5?$CFs?5?5OFF?5@		; `string'
PUBLIC	??_C@_09MEJLMDNK@?5?$CFs?5?5IDLE@		; `string'
PUBLIC	??_C@_09IBBIICJN@?5?$CFs?5?5FLY?5@		; `string'
PUBLIC	??_C@_0M@BAGGPIOL@?5?$CFs?5?5?$CF03d?$CF?$CF@	; `string'
PUBLIC	??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@		; `string'
PUBLIC	??_C@_02PCDHLJPB@NR@				; `string'
PUBLIC	??_C@_02MAABNLHD@NP@				; `string'
PUBLIC	??_C@_02MFICFPOF@NG@				; `string'
PUBLIC	??_C@_02MIKLMMJE@TQ@				; `string'
PUBLIC	??_C@_02NEDDHJED@TG@				; `string'
PUBLIC	?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA	; `draw_pitch_ladder'::`1'::__LINE__Var
PUBLIC	??_C@_03NJMPCKOA@?$CFd0@			; `string'
PUBLIC	?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA ; `draw_flight_display_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA ; `print_mono_font_max_length_string'::`1'::__LINE__Var
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_05KEIIKJGB@?$CF?431s@			; `string'
PUBLIC	?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA ; `get_player_rank_and_name'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer@			; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs@			; `string'
PUBLIC	?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA ; `print_target_position'::`1'::__LINE__Var
PUBLIC	??_C@_08OAGMDKAF@position@			; `string'
PUBLIC	??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA ; `draw_mission_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@		; `string'
PUBLIC	??_C@_07MLNBPDHK@company@			; `string'
PUBLIC	??_C@_03DKEJHHJP@?$CFs?3@			; `string'
PUBLIC	??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@	; `string'
PUBLIC	??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@		; `string'
PUBLIC	??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@		; `string'
PUBLIC	??_C@_06IAHIIHDD@?$CFc1?9?$CFd@			; `string'
PUBLIC	??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@		; `string'
PUBLIC	??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@ ; `string'
PUBLIC	??_C@_07PPFPLHID@MISSION@			; `string'
PUBLIC	??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@		; `string'
PUBLIC	??_C@_09MMJDMDOM@OBJECT?3?$CFs@			; `string'
PUBLIC	??_C@_09NFLHCPML@STATUS?3?$CFs@			; `string'
PUBLIC	??_C@_09MDEJFDEL@START?5?3?$CFs@		; `string'
PUBLIC	??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@		; `string'
PUBLIC	??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@ ; `string'
PUBLIC	??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA ; `draw_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0L@DHCAJMOH@mfd_screen@			; `string'
PUBLIC	??_C@_0BN@MGECJOEL@viper_mfd_mode_valid?5?$CI?$CKmode?$CJ@ ; `string'
PUBLIC	??_C@_0CE@LNFLDDNP@viper_mfd_location_valid?5?$CIlocat@ ; `string'
PUBLIC	??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_viper_mfd@@YGXXZ@4JA	; `draw_viper_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA ; `draw_overlaid_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BM@OOGHOFNN@viper_mfd_mode_valid?5?$CImode?$CJ@ ; `string'
PUBLIC	?__LINE__Var@?0??get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z@4JA ; `get_viper_mfd_has_focus'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA ; `get_default_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_mfd_damage@@YGHW4VIPER_MFD_LOCATIONS@@@Z@4JA ; `get_mfd_damage'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA ; `select_viper_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0CA@IHBMFDMF@viper_mfd_mode_valid?5?$CImfd_mode?$CJ@ ; `string'
PUBLIC	??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@		; `string'
PUBLIC	??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@ ; `string'
PUBLIC	?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W42@W4VIPER_MFD_LOCATIONS@@@Z@4JA ; `get_next_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W42@W4VIPER_MFD_LOCATIONS@@@Z@4JA ; `get_previous_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_next_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA ; `select_next_viper_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@ ; `string'
PUBLIC	?__LINE__Var@?0??select_previous_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA ; `select_previous_viper_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@ ; `string'
PUBLIC	?__LINE__Var@?0??toggle_viper_mfd_on_off@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA ; `toggle_viper_mfd_on_off'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ccccccd
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3d0f5c29
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d75c290
PUBLIC	__real@3d7c0fc1
PUBLIC	__real@3d8f5c29
PUBLIC	__real@3d99999a
PUBLIC	__real@3d9f49f5
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db851ec
PUBLIC	__real@3dcccccd
PUBLIC	__real@3df5c28f
PUBLIC	__real@3e000000
PUBLIC	__real@3e0f5c29
PUBLIC	__real@3e19999a
PUBLIC	__real@3e23d70a
PUBLIC	__real@3e2e147b
PUBLIC	__real@3e32b8c2
PUBLIC	__real@3e428f5c
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e6b851f
PUBLIC	__real@3e75c28f
PUBLIC	__real@3e800000
PUBLIC	__real@3e87ae14
PUBLIC	__real@3e8a3d71
PUBLIC	__real@3e99999a
PUBLIC	__real@3e9eb852
PUBLIC	__real@3eaaa64c
PUBLIC	__real@3eb2b8c2
PUBLIC	__real@3eb33333
PUBLIC	__real@3ebd70a4
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed1eb85
PUBLIC	__real@3ed70a3d
PUBLIC	__real@3edc28f6
PUBLIC	__real@3ee66666
PUBLIC	__real@3ee66667
PUBLIC	__real@3ef5c28f
PUBLIC	__real@3f000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f060a92
PUBLIC	__real@3f066666
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f11eb85
PUBLIC	__real@3f11eb86
PUBLIC	__real@3f133333
PUBLIC	__real@3f19999a
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f1c28f6
PUBLIC	__real@3f2147ae
PUBLIC	__real@3f23d70a
PUBLIC	__real@3f266666
PUBLIC	__real@3f2b851f
PUBLIC	__real@3f333333
PUBLIC	__real@3f3d70a4
PUBLIC	__real@3f3eb852
PUBLIC	__real@3f400000
PUBLIC	__real@3f451eb8
PUBLIC	__real@3f451eb9
PUBLIC	__real@3f466666
PUBLIC	__real@3f490fdb
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4b851f
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f500000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f50a3d7
PUBLIC	__real@3f51eb85
PUBLIC	__real@3f547ae1
PUBLIC	__real@3f570a3d
PUBLIC	__real@3f5999999999999a
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5c28f6
PUBLIC	__real@3f5d70a4
PUBLIC	__real@3f600000
PUBLIC	__real@3f6147ae
PUBLIC	__real@3f63d70a
PUBLIC	__real@3f666666
PUBLIC	__real@3f68f5c3
PUBLIC	__real@3f6bd70a
PUBLIC	__real@3f6ccccd
PUBLIC	__real@3f6e147b
PUBLIC	__real@3f7851ec
PUBLIC	__real@3f7fbe77
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f860a92
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fa1eb851eb851ec
PUBLIC	__real@3fa47ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3faeb851eb851eb8
PUBLIC	__real@3fb1eb851eb851ec
PUBLIC	__real@3fb3333333333333
PUBLIC	__real@3fb3333340000000
PUBLIC	__real@3fb3e93ea0000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fbc28f5c28f5c29
PUBLIC	__real@3fc0a3d70a3d70a4
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc3333340000000
PUBLIC	__real@3fc6571848000000
PUBLIC	__real@3fc70a3d70a3d70a
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fcc28f5c28f5c29
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd0a3d70a3d70a4
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd51eb851eb851f
PUBLIC	__real@3fd6666666666666
PUBLIC	__real@3fd893011c000000
PUBLIC	__real@3fdbecde5a000000
PUBLIC	__real@3fdeb851eb851eb8
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe3333333333333
PUBLIC	__real@3fe6666660000000
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3feff7ced916872b
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c09b332ccccd
PUBLIC	__real@3ff0c15236000000
PUBLIC	__real@3ff5d3d193333333
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@3ff85d84
PUBLIC	__real@3ff921fb51000000
PUBLIC	__real@3fff0bb080000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb51000000
PUBLIC	__real@400d1eb8
PUBLIC	__real@4010000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4016eb167e7d81e3
PUBLIC	__real@401921fb51000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@402a000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@40400000
PUBLIC	__real@4044000000000000
PUBLIC	__real@404ca5dc00000000
PUBLIC	__real@4051f948
PUBLIC	__real@4059000000000000
PUBLIC	__real@405b800000000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@4061a00000000000
PUBLIC	__real@40666666
PUBLIC	__real@4069000000000000
PUBLIC	__real@406e600000000000
PUBLIC	__real@4070000000000000
PUBLIC	__real@4072800000000000
PUBLIC	__real@4072c00000000000
PUBLIC	__real@4078d00000000000
PUBLIC	__real@407e000000000000
PUBLIC	__real@407f300000000000
PUBLIC	__real@407f400000000000
PUBLIC	__real@40800000
PUBLIC	__real@4084000000000000
PUBLIC	__real@408f380000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40c3878000000000
PUBLIC	__real@40f86a0000000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41900000
PUBLIC	__real@42652ee0
PUBLIC	__real@43000000
PUBLIC	__real@437fffbe
PUBLIC	__real@43800000
PUBLIC	__real@43960000
PUBLIC	__real@43fa0000
PUBLIC	__real@44fa0000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@46c35000
PUBLIC	__real@49742400
PUBLIC	__real@bc23d70a
PUBLIC	__real@bccccccd
PUBLIC	__real@bcf5c28f
PUBLIC	__real@bd0f5c29
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bd8f5c29
PUBLIC	__real@bd99999a
PUBLIC	__real@bda3d70a
PUBLIC	__real@bdb851ec
PUBLIC	__real@bdcccccd
PUBLIC	__real@be0f5c29
PUBLIC	__real@be2e147b
PUBLIC	__real@be32b8c2
PUBLIC	__real@be428f5c
PUBLIC	__real@be4ccccd
PUBLIC	__real@be6147ae
PUBLIC	__real@be6b851f
PUBLIC	__real@be800000
PUBLIC	__real@be8a3d71
PUBLIC	__real@be99999a
PUBLIC	__real@beaaa64c
PUBLIC	__real@beb2b8c2
PUBLIC	__real@beb33333
PUBLIC	__real@bebd70a4
PUBLIC	__real@bec28f5c
PUBLIC	__real@becccccd
PUBLIC	__real@bed1eb85
PUBLIC	__real@bed70a3d
PUBLIC	__real@bedc28f6
PUBLIC	__real@bee66666
PUBLIC	__real@beed3a07
PUBLIC	__real@bef5c28f
PUBLIC	__real@bf000000
PUBLIC	__real@bf060a92
PUBLIC	__real@bf0ccccd
PUBLIC	__real@bf11eb85
PUBLIC	__real@bf11eb86
PUBLIC	__real@bf19999a
PUBLIC	__real@bf2147ae
PUBLIC	__real@bf266666
PUBLIC	__real@bf2bf259
PUBLIC	__real@bf2ccccd
PUBLIC	__real@bf333333
PUBLIC	__real@bf3d70a4
PUBLIC	__real@bf428f5c
PUBLIC	__real@bf43d70a
PUBLIC	__real@bf451eb8
PUBLIC	__real@bf451eb9
PUBLIC	__real@bf47ae14
PUBLIC	__real@bf47ae15
PUBLIC	__real@bf490fdb
PUBLIC	__real@bf4a3d70
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf4e147b
PUBLIC	__real@bf4f5c28
PUBLIC	__real@bf4f5c29
PUBLIC	__real@bf533333
PUBLIC	__real@bf547ae1
PUBLIC	__real@bf570a3e
PUBLIC	__real@bf59999a
PUBLIC	__real@bf5ae148
PUBLIC	__real@bf5eb852
PUBLIC	__real@bf6147ae
PUBLIC	__real@bf63d70a
PUBLIC	__real@bf666666
PUBLIC	__real@bf68f5c3
PUBLIC	__real@bf6e147b
PUBLIC	__real@bf70a3d7
PUBLIC	__real@bf733333
PUBLIC	__real@bf7851ec
PUBLIC	__real@bf7ae148
PUBLIC	__real@bf800000
PUBLIC	__real@bf860a92
PUBLIC	__real@bfc3333333333333
PUBLIC	__real@bfc90fdb
PUBLIC	__real@bfc999999999999a
PUBLIC	__real@bfd893011c000000
PUBLIC	__real@bfd999999999999a
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bfe3333333333333
PUBLIC	__real@bfec28f5c0000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bff0c15236000000
PUBLIC	__real@bff921fb51000000
PUBLIC	__real@c0000000
PUBLIC	__real@c00921fb51000000
PUBLIC	__real@c024000000000000
PUBLIC	__real@c034000000000000
PUBLIC	__real@c0400000
PUBLIC	__real@c0800000
PUBLIC	__real@c0a00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c1000000
PUBLIC	__real@c1400000
PUBLIC	__real@c1980000
PUBLIC	__real@c1c80000
PUBLIC	__real@c2180000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	_tan:PROC
EXTRN	__imp__ceil:PROC
EXTRN	__imp__floor:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ:PROC ; debug_colour_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_unit_vector_dot_product
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_transpose_matrix3x3_vec3d
EXTRN	?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z:PROC ; multiply_matrix3x3_matrix3x3
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_user_texture_screen
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z:PROC ; set_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_3d_render_target@@YGHPAUSCREEN@@@Z:PROC	; set_3d_render_target
EXTRN	?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z:PROC ; finalise_3d_render_target_texture
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_half_thick_line
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_position@@YGXMM@Z:PROC		; set_mono_font_position
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_char_height@@YGMD@Z:PROC		; get_mono_font_char_height
EXTRN	?print_mono_font_char@@YGXD@Z:PROC		; print_mono_font_char
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_viewport_origin
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z:PROC ; set_2d_instance_rotation
EXTRN	?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_instance_position
EXTRN	?reset_2d_instance@@YGXPAUENV_2D@@@Z:PROC	; reset_2d_instance
EXTRN	?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z:PROC	; set_2d_pixel
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_filled_triangle
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?get_2d_world_position@@YGXMMPAM0@Z:PROC	; get_2d_world_position
EXTRN	?get_2d_int_screen_coordinates@@YGXMMPAH0@Z:PROC ; get_2d_int_screen_coordinates
EXTRN	?get_2d_float_screen_coordinates@@YGXMMPAM0@Z:PROC ; get_2d_float_screen_coordinates
EXTRN	?get_2d_float_screen_x_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_x_coordinate
EXTRN	?get_2d_float_screen_y_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_y_coordinate
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?draw_2d_hatched_area@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_hatched_area
EXTRN	?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z:PROC	; draw_2d_box
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z:PROC ; get_position_3d_screen_coordinates
EXTRN	?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z:PROC ; get_local_entity_vec3d_magnitude
EXTRN	?get_local_entity_target_bearing@@YGMPAUENTITY@@0PAM@Z:PROC ; get_local_entity_target_bearing
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_count
EXTRN	?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z:PROC ; get_local_entity_weapon_hardpoint_info
EXTRN	?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_waypoint_display_position
EXTRN	?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z:PROC ; get_keysite_entity_mfd_display_name
EXTRN	?get_player_task@@YGPAUENTITY@@PAU1@@Z:PROC	; get_player_task
EXTRN	?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_sector_entity
EXTRN	?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z:PROC ; get_simple_session_weather_at_point
EXTRN	?get_task_estimated_route_duration@@YGMPAUENTITY@@@Z:PROC ; get_task_estimated_route_duration
EXTRN	?get_task_objective_mfd_display_string@@YGXPAUENTITY@@PAD@Z:PROC ; get_task_objective_mfd_display_string
EXTRN	?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_first_waypoint
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z:PROC ; set_main_3d_params
EXTRN	?set_pilots_full_screen_params@@YGXH@Z:PROC	; set_pilots_full_screen_params
EXTRN	?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z:PROC	; draw_main_3d_scene
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_range_finder@@YG?AW4rangefinding_system@@XZ:PROC ; get_range_finder
EXTRN	?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z:PROC ; draw_tsd_terrain_map
EXTRN	?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z:PROC ; draw_tsd_contour_map
EXTRN	?Initialise_TSD_render_terrain@@YGXXZ:PROC	; Initialise_TSD_render_terrain
EXTRN	?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z:PROC ; convert_linear_view_value
EXTRN	?get_eo_tracking_point@@YGPAUVEC3D@@XZ:PROC	; get_eo_tracking_point
EXTRN	?get_range_to_target@@YGMXZ:PROC		; get_range_to_target
EXTRN	?eo_is_locked@@YGHXZ:PROC			; eo_is_locked
EXTRN	?get_viper_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z:PROC ; get_viper_eo_relative_centred_viewpoint
EXTRN	?get_crew_role@@YG?AW4CREW_ROLES@@XZ:PROC	; get_crew_role
EXTRN	?get_digital_clock_values@@YGXMPAM00@Z:PROC	; get_digital_clock_values
EXTRN	?get_digital_clock_int_values@@YGXMPAH00@Z:PROC	; get_digital_clock_int_values
EXTRN	?get_untranslated_pilot_rank_short_name@@YGPBDH@Z:PROC ; get_untranslated_pilot_rank_short_name
EXTRN	?copy_export_mfd@@YGXPAUSCREEN@@0@Z:PROC	; copy_export_mfd
EXTRN	__chkstk:PROC
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?d3d_can_render_to_texture@@3HA:DWORD		; d3d_can_render_to_texture
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?command_line_dynamics_engine_startup@@3HA:DWORD ; command_line_dynamics_engine_startup
EXTRN	?command_line_high_res_mfd@@3HA:DWORD		; command_line_high_res_mfd
EXTRN	?command_line_tsd_enemy_colours@@3HA:DWORD	; command_line_tsd_enemy_colours
EXTRN	?command_line_colour_mfd@@3HA:DWORD		; command_line_colour_mfd
EXTRN	?command_line_export_mfd@@3HA:DWORD		; command_line_export_mfd
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?formation_display_names@@3PAPBDA:BYTE		; formation_display_names
EXTRN	?task_status_names@@3PAPBDA:BYTE		; task_status_names
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA:BYTE ; fn_get_local_entity_attitude_matrix_ptr
EXTRN	?overload_invalid_char_type_message@@3PBDB:DWORD ; overload_invalid_char_type_message
EXTRN	?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA:BYTE ; fn_get_local_entity_char_value
EXTRN	?draw_eo_3d_scene@@3HA:DWORD			; draw_eo_3d_scene
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_ptr_type_message@@3PBDB:DWORD	; overload_invalid_ptr_type_message
EXTRN	?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA:BYTE ; fn_get_local_entity_ptr_value
EXTRN	?overload_invalid_string_type_message@@3PBDB:DWORD ; overload_invalid_string_type_message
EXTRN	?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA:BYTE ; fn_get_local_entity_string
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?main_vp@@3UVIEWPOINT@@A:BYTE			; main_vp
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?tsd_render_mode@@3W4TSD_RENDER_MODES@@A:DWORD	; tsd_render_mode
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?eo_low_light@@3HA:DWORD			; eo_low_light
EXTRN	?eo_ground_stabilised@@3HA:DWORD		; eo_ground_stabilised
EXTRN	?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; eo_sensor
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_max_azimuth@@3MA:DWORD			; eo_max_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	?eo_min_elevation@@3MA:DWORD			; eo_min_elevation
EXTRN	?eo_vp@@3UVIEWPOINT@@A:BYTE			; eo_vp
EXTRN	?display_mfd_layout_grid@@3HA:DWORD		; display_mfd_layout_grid
EXTRN	?large_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; large_eo_3d_texture_screen
EXTRN	?small_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; small_eo_3d_texture_screen
EXTRN	?large_display_target_symbol_selected_target@@3QBDB:BYTE ; large_display_target_symbol_selected_target
EXTRN	?large_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; large_display_target_symbol_selected_target_mask
EXTRN	?small_display_target_symbol_selected_target@@3QBDB:BYTE ; small_display_target_symbol_selected_target
EXTRN	?small_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; small_display_target_symbol_selected_target_mask
EXTRN	?large_display_target_symbols_los@@3PAPBDA:BYTE	; large_display_target_symbols_los
EXTRN	?large_display_target_symbols_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_los_mask
EXTRN	?large_display_target_symbols_no_los@@3PAPBDA:BYTE ; large_display_target_symbols_no_los
EXTRN	?large_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_no_los_mask
EXTRN	?small_display_target_symbols_los@@3PAPBDA:BYTE	; small_display_target_symbols_los
EXTRN	?small_display_target_symbols_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_los_mask
EXTRN	?small_display_target_symbols_no_los@@3PAPBDA:BYTE ; small_display_target_symbols_no_los
EXTRN	?small_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_no_los_mask
EXTRN	?rocket_salvo_size@@3HA:DWORD			; rocket_salvo_size
EXTRN	?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A:DWORD	; viper_damage
EXTRN	?viper_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE	; viper_flir
EXTRN	?viper_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE	; viper_dtv
EXTRN	?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A:DWORD ; virtual_cockpit_inst3d
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?mfd_colours@@3PAUREAL_COLOUR@@A DD 014H DUP (?)	; mfd_colours
?clear_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_mfd_colour
?display_mask@@3HA DD 01H DUP (?)			; display_mask
?mfd_env@@3PAUENV_2D@@A DD 01H DUP (?)			; mfd_env
?int_mfd_viewport_size@@3HA DD 01H DUP (?)		; int_mfd_viewport_size
?mfd_viewport_size@@3MA DD 01H DUP (?)			; mfd_viewport_size
?mfd_viewport_x_org@@3MA DD 01H DUP (?)			; mfd_viewport_x_org
?mfd_viewport_y_org@@3MA DD 01H DUP (?)			; mfd_viewport_y_org
?mfd_viewport_x_min@@3MA DD 01H DUP (?)			; mfd_viewport_x_min
?mfd_viewport_y_min@@3MA DD 01H DUP (?)			; mfd_viewport_y_min
?mfd_viewport_x_max@@3MA DD 01H DUP (?)			; mfd_viewport_x_max
?mfd_viewport_y_max@@3MA DD 01H DUP (?)			; mfd_viewport_y_max
?mfd_screen_x_min@@3MA DD 01H DUP (?)			; mfd_screen_x_min
?mfd_screen_y_min@@3MA DD 01H DUP (?)			; mfd_screen_y_min
?mfd_screen_x_max@@3MA DD 01H DUP (?)			; mfd_screen_x_max
?mfd_screen_y_max@@3MA DD 01H DUP (?)			; mfd_screen_y_max
?mfd_screen_width@@3MA DD 01H DUP (?)			; mfd_screen_width
?mfd_screen_height@@3MA DD 01H DUP (?)			; mfd_screen_height
?mfd_screen_x_scale@@3MA DD 01H DUP (?)			; mfd_screen_x_scale
?mfd_screen_y_scale@@3MA DD 01H DUP (?)			; mfd_screen_y_scale
?draw_large_mfd@@3HA DD 01H DUP (?)			; draw_large_mfd
?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; pilot_lhs_mfd_texture_screen
?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; pilot_rhs_mfd_texture_screen
?pilot_dfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; pilot_dfd_texture_screen
?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_lhs_mfd_texture_screen
?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_rhs_mfd_texture_screen
?co_pilot_dfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_dfd_texture_screen
?large_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_lhs_mfd_texture_screen
?large_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_rhs_mfd_texture_screen
?large_pilot_dfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_dfd_texture_screen
?large_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_lhs_mfd_texture_screen
?large_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_rhs_mfd_texture_screen
?large_co_pilot_dfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_dfd_texture_screen
?small_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_lhs_mfd_texture_screen
?small_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_rhs_mfd_texture_screen
?small_pilot_dfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_dfd_texture_screen
?small_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_lhs_mfd_texture_screen
?small_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_rhs_mfd_texture_screen
?small_co_pilot_dfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_dfd_texture_screen
?eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; eo_3d_texture_screen
?full_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; full_mfd_texture_screen
?pilot_tsd_ase_range@@3MA DD 01H DUP (?)		; pilot_tsd_ase_range
?co_pilot_tsd_ase_range@@3MA DD 01H DUP (?)		; co_pilot_tsd_ase_range
?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; pilot_tsd_declutter_level
?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; co_pilot_tsd_declutter_level
?pilot_tsd_threat_line_flash_timer@@3MA DD 01H DUP (?)	; pilot_tsd_threat_line_flash_timer
?co_pilot_tsd_threat_line_flash_timer@@3MA DD 01H DUP (?) ; co_pilot_tsd_threat_line_flash_timer
?pilot_tsd_draw_threat_line_status@@3HA DD 01H DUP (?)	; pilot_tsd_draw_threat_line_status
?co_pilot_tsd_draw_threat_line_status@@3HA DD 01H DUP (?) ; co_pilot_tsd_draw_threat_line_status
?pilot_ase_threat_line_flash_timer@@3MA DD 01H DUP (?)	; pilot_ase_threat_line_flash_timer
?co_pilot_ase_threat_line_flash_timer@@3MA DD 01H DUP (?) ; co_pilot_ase_threat_line_flash_timer
?pilot_ase_draw_threat_line_status@@3HA DD 01H DUP (?)	; pilot_ase_draw_threat_line_status
?co_pilot_ase_draw_threat_line_status@@3HA DD 01H DUP (?) ; co_pilot_ase_draw_threat_line_status
?main_horizon_mask@@3PADA DD 01H DUP (?)		; main_horizon_mask
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2180000
CONST	SEGMENT
__real@c2180000 DD 0c2180000r			; -38
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c1980000
CONST	SEGMENT
__real@c1980000 DD 0c1980000r			; -19
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c034000000000000
CONST	SEGMENT
__real@c034000000000000 DQ 0c034000000000000r	; -20
CONST	ENDS
;	COMDAT __real@c024000000000000
CONST	SEGMENT
__real@c024000000000000 DQ 0c024000000000000r	; -10
CONST	ENDS
;	COMDAT __real@c00921fb51000000
CONST	SEGMENT
__real@c00921fb51000000 DQ 0c00921fb51000000r	; -3.14159
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff921fb51000000
CONST	SEGMENT
__real@bff921fb51000000 DQ 0bff921fb51000000r	; -1.5708
CONST	ENDS
;	COMDAT __real@bff0c15236000000
CONST	SEGMENT
__real@bff0c15236000000 DQ 0bff0c15236000000r	; -1.0472
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfec28f5c0000000
CONST	SEGMENT
__real@bfec28f5c0000000 DQ 0bfec28f5c0000000r	; -0.88
CONST	ENDS
;	COMDAT __real@bfe3333333333333
CONST	SEGMENT
__real@bfe3333333333333 DQ 0bfe3333333333333r	; -0.6
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bfd999999999999a
CONST	SEGMENT
__real@bfd999999999999a DQ 0bfd999999999999ar	; -0.4
CONST	ENDS
;	COMDAT __real@bfd893011c000000
CONST	SEGMENT
__real@bfd893011c000000 DQ 0bfd893011c000000r	; -0.383972
CONST	ENDS
;	COMDAT __real@bfc999999999999a
CONST	SEGMENT
__real@bfc999999999999a DQ 0bfc999999999999ar	; -0.2
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bfc3333333333333
CONST	SEGMENT
__real@bfc3333333333333 DQ 0bfc3333333333333r	; -0.15
CONST	ENDS
;	COMDAT __real@bf860a92
CONST	SEGMENT
__real@bf860a92 DD 0bf860a92r			; -1.0472
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf7ae148
CONST	SEGMENT
__real@bf7ae148 DD 0bf7ae148r			; -0.98
CONST	ENDS
;	COMDAT __real@bf7851ec
CONST	SEGMENT
__real@bf7851ec DD 0bf7851ecr			; -0.97
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@bf70a3d7
CONST	SEGMENT
__real@bf70a3d7 DD 0bf70a3d7r			; -0.94
CONST	ENDS
;	COMDAT __real@bf6e147b
CONST	SEGMENT
__real@bf6e147b DD 0bf6e147br			; -0.93
CONST	ENDS
;	COMDAT __real@bf68f5c3
CONST	SEGMENT
__real@bf68f5c3 DD 0bf68f5c3r			; -0.91
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf63d70a
CONST	SEGMENT
__real@bf63d70a DD 0bf63d70ar			; -0.89
CONST	ENDS
;	COMDAT __real@bf6147ae
CONST	SEGMENT
__real@bf6147ae DD 0bf6147aer			; -0.88
CONST	ENDS
;	COMDAT __real@bf5eb852
CONST	SEGMENT
__real@bf5eb852 DD 0bf5eb852r			; -0.87
CONST	ENDS
;	COMDAT __real@bf5ae148
CONST	SEGMENT
__real@bf5ae148 DD 0bf5ae148r			; -0.855
CONST	ENDS
;	COMDAT __real@bf59999a
CONST	SEGMENT
__real@bf59999a DD 0bf59999ar			; -0.85
CONST	ENDS
;	COMDAT __real@bf570a3e
CONST	SEGMENT
__real@bf570a3e DD 0bf570a3er			; -0.84
CONST	ENDS
;	COMDAT __real@bf547ae1
CONST	SEGMENT
__real@bf547ae1 DD 0bf547ae1r			; -0.83
CONST	ENDS
;	COMDAT __real@bf533333
CONST	SEGMENT
__real@bf533333 DD 0bf533333r			; -0.825
CONST	ENDS
;	COMDAT __real@bf4f5c29
CONST	SEGMENT
__real@bf4f5c29 DD 0bf4f5c29r			; -0.81
CONST	ENDS
;	COMDAT __real@bf4f5c28
CONST	SEGMENT
__real@bf4f5c28 DD 0bf4f5c28r			; -0.81
CONST	ENDS
;	COMDAT __real@bf4e147b
CONST	SEGMENT
__real@bf4e147b DD 0bf4e147br			; -0.805
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf4a3d70
CONST	SEGMENT
__real@bf4a3d70 DD 0bf4a3d70r			; -0.79
CONST	ENDS
;	COMDAT __real@bf490fdb
CONST	SEGMENT
__real@bf490fdb DD 0bf490fdbr			; -0.785398
CONST	ENDS
;	COMDAT __real@bf47ae15
CONST	SEGMENT
__real@bf47ae15 DD 0bf47ae15r			; -0.78
CONST	ENDS
;	COMDAT __real@bf47ae14
CONST	SEGMENT
__real@bf47ae14 DD 0bf47ae14r			; -0.78
CONST	ENDS
;	COMDAT __real@bf451eb9
CONST	SEGMENT
__real@bf451eb9 DD 0bf451eb9r			; -0.77
CONST	ENDS
;	COMDAT __real@bf451eb8
CONST	SEGMENT
__real@bf451eb8 DD 0bf451eb8r			; -0.77
CONST	ENDS
;	COMDAT __real@bf43d70a
CONST	SEGMENT
__real@bf43d70a DD 0bf43d70ar			; -0.765
CONST	ENDS
;	COMDAT __real@bf428f5c
CONST	SEGMENT
__real@bf428f5c DD 0bf428f5cr			; -0.76
CONST	ENDS
;	COMDAT __real@bf3d70a4
CONST	SEGMENT
__real@bf3d70a4 DD 0bf3d70a4r			; -0.74
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf2ccccd
CONST	SEGMENT
__real@bf2ccccd DD 0bf2ccccdr			; -0.675
CONST	ENDS
;	COMDAT __real@bf2bf259
CONST	SEGMENT
__real@bf2bf259 DD 0bf2bf259r			; -0.671667
CONST	ENDS
;	COMDAT __real@bf266666
CONST	SEGMENT
__real@bf266666 DD 0bf266666r			; -0.65
CONST	ENDS
;	COMDAT __real@bf2147ae
CONST	SEGMENT
__real@bf2147ae DD 0bf2147aer			; -0.63
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf11eb86
CONST	SEGMENT
__real@bf11eb86 DD 0bf11eb86r			; -0.57
CONST	ENDS
;	COMDAT __real@bf11eb85
CONST	SEGMENT
__real@bf11eb85 DD 0bf11eb85r			; -0.57
CONST	ENDS
;	COMDAT __real@bf0ccccd
CONST	SEGMENT
__real@bf0ccccd DD 0bf0ccccdr			; -0.55
CONST	ENDS
;	COMDAT __real@bf060a92
CONST	SEGMENT
__real@bf060a92 DD 0bf060a92r			; -0.523599
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bef5c28f
CONST	SEGMENT
__real@bef5c28f DD 0bef5c28fr			; -0.48
CONST	ENDS
;	COMDAT __real@beed3a07
CONST	SEGMENT
__real@beed3a07 DD 0beed3a07r			; -0.463333
CONST	ENDS
;	COMDAT __real@bee66666
CONST	SEGMENT
__real@bee66666 DD 0bee66666r			; -0.45
CONST	ENDS
;	COMDAT __real@bedc28f6
CONST	SEGMENT
__real@bedc28f6 DD 0bedc28f6r			; -0.43
CONST	ENDS
;	COMDAT __real@bed70a3d
CONST	SEGMENT
__real@bed70a3d DD 0bed70a3dr			; -0.42
CONST	ENDS
;	COMDAT __real@bed1eb85
CONST	SEGMENT
__real@bed1eb85 DD 0bed1eb85r			; -0.41
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@bec28f5c
CONST	SEGMENT
__real@bec28f5c DD 0bec28f5cr			; -0.38
CONST	ENDS
;	COMDAT __real@bebd70a4
CONST	SEGMENT
__real@bebd70a4 DD 0bebd70a4r			; -0.37
CONST	ENDS
;	COMDAT __real@beb33333
CONST	SEGMENT
__real@beb33333 DD 0beb33333r			; -0.35
CONST	ENDS
;	COMDAT __real@beb2b8c2
CONST	SEGMENT
__real@beb2b8c2 DD 0beb2b8c2r			; -0.349066
CONST	ENDS
;	COMDAT __real@beaaa64c
CONST	SEGMENT
__real@beaaa64c DD 0beaaa64cr			; -0.3333
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be8a3d71
CONST	SEGMENT
__real@be8a3d71 DD 0be8a3d71r			; -0.27
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be6b851f
CONST	SEGMENT
__real@be6b851f DD 0be6b851fr			; -0.23
CONST	ENDS
;	COMDAT __real@be6147ae
CONST	SEGMENT
__real@be6147ae DD 0be6147aer			; -0.22
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be428f5c
CONST	SEGMENT
__real@be428f5c DD 0be428f5cr			; -0.19
CONST	ENDS
;	COMDAT __real@be32b8c2
CONST	SEGMENT
__real@be32b8c2 DD 0be32b8c2r			; -0.174533
CONST	ENDS
;	COMDAT __real@be2e147b
CONST	SEGMENT
__real@be2e147b DD 0be2e147br			; -0.17
CONST	ENDS
;	COMDAT __real@be0f5c29
CONST	SEGMENT
__real@be0f5c29 DD 0be0f5c29r			; -0.14
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bdb851ec
CONST	SEGMENT
__real@bdb851ec DD 0bdb851ecr			; -0.09
CONST	ENDS
;	COMDAT __real@bda3d70a
CONST	SEGMENT
__real@bda3d70a DD 0bda3d70ar			; -0.08
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd8f5c29
CONST	SEGMENT
__real@bd8f5c29 DD 0bd8f5c29r			; -0.07
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bd0f5c29
CONST	SEGMENT
__real@bd0f5c29 DD 0bd0f5c29r			; -0.035
CONST	ENDS
;	COMDAT __real@bcf5c28f
CONST	SEGMENT
__real@bcf5c28f DD 0bcf5c28fr			; -0.03
CONST	ENDS
;	COMDAT __real@bccccccd
CONST	SEGMENT
__real@bccccccd DD 0bccccccdr			; -0.025
CONST	ENDS
;	COMDAT __real@bc23d70a
CONST	SEGMENT
__real@bc23d70a DD 0bc23d70ar			; -0.01
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437fffbe
CONST	SEGMENT
__real@437fffbe DD 0437fffber			; 255.999
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@40f86a0000000000
CONST	SEGMENT
__real@40f86a0000000000 DQ 040f86a0000000000r	; 100000
CONST	ENDS
;	COMDAT __real@40c3878000000000
CONST	SEGMENT
__real@40c3878000000000 DQ 040c3878000000000r	; 9999
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@408f380000000000
CONST	SEGMENT
__real@408f380000000000 DQ 0408f380000000000r	; 999
CONST	ENDS
;	COMDAT __real@4084000000000000
CONST	SEGMENT
__real@4084000000000000 DQ 04084000000000000r	; 640
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@407f400000000000
CONST	SEGMENT
__real@407f400000000000 DQ 0407f400000000000r	; 500
CONST	ENDS
;	COMDAT __real@407f300000000000
CONST	SEGMENT
__real@407f300000000000 DQ 0407f300000000000r	; 499
CONST	ENDS
;	COMDAT __real@407e000000000000
CONST	SEGMENT
__real@407e000000000000 DQ 0407e000000000000r	; 480
CONST	ENDS
;	COMDAT __real@4078d00000000000
CONST	SEGMENT
__real@4078d00000000000 DQ 04078d00000000000r	; 397
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@4072800000000000
CONST	SEGMENT
__real@4072800000000000 DQ 04072800000000000r	; 296
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@406e600000000000
CONST	SEGMENT
__real@406e600000000000 DQ 0406e600000000000r	; 243
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@40666666
CONST	SEGMENT
__real@40666666 DD 040666666r			; 3.6
CONST	ENDS
;	COMDAT __real@4061a00000000000
CONST	SEGMENT
__real@4061a00000000000 DQ 04061a00000000000r	; 141
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@405b800000000000
CONST	SEGMENT
__real@405b800000000000 DQ 0405b800000000000r	; 110
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4051f948
CONST	SEGMENT
__real@4051f948 DD 04051f948r			; 3.28084
CONST	ENDS
;	COMDAT __real@404ca5dc00000000
CONST	SEGMENT
__real@404ca5dc00000000 DQ 0404ca5dc00000000r	; 57.2958
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@402a000000000000
CONST	SEGMENT
__real@402a000000000000 DQ 0402a000000000000r	; 13
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@401921fb51000000
CONST	SEGMENT
__real@401921fb51000000 DQ 0401921fb51000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@4016eb167e7d81e3
CONST	SEGMENT
__real@4016eb167e7d81e3 DQ 04016eb167e7d81e3r	; 5.72958
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400d1eb8
CONST	SEGMENT
__real@400d1eb8 DD 0400d1eb8r			; 2.205
CONST	ENDS
;	COMDAT __real@400921fb51000000
CONST	SEGMENT
__real@400921fb51000000 DQ 0400921fb51000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fff0bb080000000
CONST	SEGMENT
__real@3fff0bb080000000 DQ 03fff0bb080000000r	; 1.94035
CONST	ENDS
;	COMDAT __real@3ff921fb51000000
CONST	SEGMENT
__real@3ff921fb51000000 DQ 03ff921fb51000000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff85d84
CONST	SEGMENT
__real@3ff85d84 DD 03ff85d84r			; 1.94035
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff5d3d193333333
CONST	SEGMENT
__real@3ff5d3d193333333 DQ 03ff5d3d193333333r	; 1.36421
CONST	ENDS
;	COMDAT __real@3ff0c15236000000
CONST	SEGMENT
__real@3ff0c15236000000 DQ 03ff0c15236000000r	; 1.0472
CONST	ENDS
;	COMDAT __real@3ff0c09b332ccccd
CONST	SEGMENT
__real@3ff0c09b332ccccd DQ 03ff0c09b332ccccdr	; 1.04702
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feff7ced916872b
CONST	SEGMENT
__real@3feff7ced916872b DQ 03feff7ced916872br	; 0.999
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fe6666660000000
CONST	SEGMENT
__real@3fe6666660000000 DQ 03fe6666660000000r	; 0.7
CONST	ENDS
;	COMDAT __real@3fe3333333333333
CONST	SEGMENT
__real@3fe3333333333333 DQ 03fe3333333333333r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdeb851eb851eb8
CONST	SEGMENT
__real@3fdeb851eb851eb8 DQ 03fdeb851eb851eb8r	; 0.48
CONST	ENDS
;	COMDAT __real@3fdbecde5a000000
CONST	SEGMENT
__real@3fdbecde5a000000 DQ 03fdbecde5a000000r	; 0.436332
CONST	ENDS
;	COMDAT __real@3fd893011c000000
CONST	SEGMENT
__real@3fd893011c000000 DQ 03fd893011c000000r	; 0.383972
CONST	ENDS
;	COMDAT __real@3fd6666666666666
CONST	SEGMENT
__real@3fd6666666666666 DQ 03fd6666666666666r	; 0.35
CONST	ENDS
;	COMDAT __real@3fd51eb851eb851f
CONST	SEGMENT
__real@3fd51eb851eb851f DQ 03fd51eb851eb851fr	; 0.33
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd0a3d70a3d70a4
CONST	SEGMENT
__real@3fd0a3d70a3d70a4 DQ 03fd0a3d70a3d70a4r	; 0.26
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fcc28f5c28f5c29
CONST	SEGMENT
__real@3fcc28f5c28f5c29 DQ 03fcc28f5c28f5c29r	; 0.22
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc70a3d70a3d70a
CONST	SEGMENT
__real@3fc70a3d70a3d70a DQ 03fc70a3d70a3d70ar	; 0.18
CONST	ENDS
;	COMDAT __real@3fc6571848000000
CONST	SEGMENT
__real@3fc6571848000000 DQ 03fc6571848000000r	; 0.174533
CONST	ENDS
;	COMDAT __real@3fc3333340000000
CONST	SEGMENT
__real@3fc3333340000000 DQ 03fc3333340000000r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc0a3d70a3d70a4
CONST	SEGMENT
__real@3fc0a3d70a3d70a4 DQ 03fc0a3d70a3d70a4r	; 0.13
CONST	ENDS
;	COMDAT __real@3fbc28f5c28f5c29
CONST	SEGMENT
__real@3fbc28f5c28f5c29 DQ 03fbc28f5c28f5c29r	; 0.11
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb3e93ea0000000
CONST	SEGMENT
__real@3fb3e93ea0000000 DQ 03fb3e93ea0000000r	; 0.0777778
CONST	ENDS
;	COMDAT __real@3fb3333340000000
CONST	SEGMENT
__real@3fb3333340000000 DQ 03fb3333340000000r	; 0.075
CONST	ENDS
;	COMDAT __real@3fb3333333333333
CONST	SEGMENT
__real@3fb3333333333333 DQ 03fb3333333333333r	; 0.075
CONST	ENDS
;	COMDAT __real@3fb1eb851eb851ec
CONST	SEGMENT
__real@3fb1eb851eb851ec DQ 03fb1eb851eb851ecr	; 0.07
CONST	ENDS
;	COMDAT __real@3faeb851eb851eb8
CONST	SEGMENT
__real@3faeb851eb851eb8 DQ 03faeb851eb851eb8r	; 0.06
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa47ae147ae147b
CONST	SEGMENT
__real@3fa47ae147ae147b DQ 03fa47ae147ae147br	; 0.04
CONST	ENDS
;	COMDAT __real@3fa1eb851eb851ec
CONST	SEGMENT
__real@3fa1eb851eb851ec DQ 03fa1eb851eb851ecr	; 0.035
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3f860a92
CONST	SEGMENT
__real@3f860a92 DD 03f860a92r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fbe77
CONST	SEGMENT
__real@3f7fbe77 DD 03f7fbe77r			; 0.999
CONST	ENDS
;	COMDAT __real@3f7851ec
CONST	SEGMENT
__real@3f7851ec DD 03f7851ecr			; 0.97
CONST	ENDS
;	COMDAT __real@3f6e147b
CONST	SEGMENT
__real@3f6e147b DD 03f6e147br			; 0.93
CONST	ENDS
;	COMDAT __real@3f6ccccd
CONST	SEGMENT
__real@3f6ccccd DD 03f6ccccdr			; 0.925
CONST	ENDS
;	COMDAT __real@3f6bd70a
CONST	SEGMENT
__real@3f6bd70a DD 03f6bd70ar			; 0.92125
CONST	ENDS
;	COMDAT __real@3f68f5c3
CONST	SEGMENT
__real@3f68f5c3 DD 03f68f5c3r			; 0.91
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f63d70a
CONST	SEGMENT
__real@3f63d70a DD 03f63d70ar			; 0.89
CONST	ENDS
;	COMDAT __real@3f6147ae
CONST	SEGMENT
__real@3f6147ae DD 03f6147aer			; 0.88
CONST	ENDS
;	COMDAT __real@3f600000
CONST	SEGMENT
__real@3f600000 DD 03f600000r			; 0.875
CONST	ENDS
;	COMDAT __real@3f5d70a4
CONST	SEGMENT
__real@3f5d70a4 DD 03f5d70a4r			; 0.865
CONST	ENDS
;	COMDAT __real@3f5c28f6
CONST	SEGMENT
__real@3f5c28f6 DD 03f5c28f6r			; 0.86
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f5999999999999a
CONST	SEGMENT
__real@3f5999999999999a DQ 03f5999999999999ar	; 0.0015625
CONST	ENDS
;	COMDAT __real@3f570a3d
CONST	SEGMENT
__real@3f570a3d DD 03f570a3dr			; 0.84
CONST	ENDS
;	COMDAT __real@3f547ae1
CONST	SEGMENT
__real@3f547ae1 DD 03f547ae1r			; 0.83
CONST	ENDS
;	COMDAT __real@3f51eb85
CONST	SEGMENT
__real@3f51eb85 DD 03f51eb85r			; 0.82
CONST	ENDS
;	COMDAT __real@3f50a3d7
CONST	SEGMENT
__real@3f50a3d7 DD 03f50a3d7r			; 0.815
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f500000
CONST	SEGMENT
__real@3f500000 DD 03f500000r			; 0.8125
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4b851f
CONST	SEGMENT
__real@3f4b851f DD 03f4b851fr			; 0.795
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f490fdb
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
CONST	ENDS
;	COMDAT __real@3f466666
CONST	SEGMENT
__real@3f466666 DD 03f466666r			; 0.775
CONST	ENDS
;	COMDAT __real@3f451eb9
CONST	SEGMENT
__real@3f451eb9 DD 03f451eb9r			; 0.77
CONST	ENDS
;	COMDAT __real@3f451eb8
CONST	SEGMENT
__real@3f451eb8 DD 03f451eb8r			; 0.77
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f3eb852
CONST	SEGMENT
__real@3f3eb852 DD 03f3eb852r			; 0.745
CONST	ENDS
;	COMDAT __real@3f3d70a4
CONST	SEGMENT
__real@3f3d70a4 DD 03f3d70a4r			; 0.74
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f2b851f
CONST	SEGMENT
__real@3f2b851f DD 03f2b851fr			; 0.67
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f23d70a
CONST	SEGMENT
__real@3f23d70a DD 03f23d70ar			; 0.64
CONST	ENDS
;	COMDAT __real@3f2147ae
CONST	SEGMENT
__real@3f2147ae DD 03f2147aer			; 0.63
CONST	ENDS
;	COMDAT __real@3f1c28f6
CONST	SEGMENT
__real@3f1c28f6 DD 03f1c28f6r			; 0.61
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f133333
CONST	SEGMENT
__real@3f133333 DD 03f133333r			; 0.575
CONST	ENDS
;	COMDAT __real@3f11eb86
CONST	SEGMENT
__real@3f11eb86 DD 03f11eb86r			; 0.57
CONST	ENDS
;	COMDAT __real@3f11eb85
CONST	SEGMENT
__real@3f11eb85 DD 03f11eb85r			; 0.57
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f066666
CONST	SEGMENT
__real@3f066666 DD 03f066666r			; 0.525
CONST	ENDS
;	COMDAT __real@3f060a92
CONST	SEGMENT
__real@3f060a92 DD 03f060a92r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ef5c28f
CONST	SEGMENT
__real@3ef5c28f DD 03ef5c28fr			; 0.48
CONST	ENDS
;	COMDAT __real@3ee66667
CONST	SEGMENT
__real@3ee66667 DD 03ee66667r			; 0.45
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3edc28f6
CONST	SEGMENT
__real@3edc28f6 DD 03edc28f6r			; 0.43
CONST	ENDS
;	COMDAT __real@3ed70a3d
CONST	SEGMENT
__real@3ed70a3d DD 03ed70a3dr			; 0.42
CONST	ENDS
;	COMDAT __real@3ed1eb85
CONST	SEGMENT
__real@3ed1eb85 DD 03ed1eb85r			; 0.41
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ebd70a4
CONST	SEGMENT
__real@3ebd70a4 DD 03ebd70a4r			; 0.37
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3eb2b8c2
CONST	SEGMENT
__real@3eb2b8c2 DD 03eb2b8c2r			; 0.349066
CONST	ENDS
;	COMDAT __real@3eaaa64c
CONST	SEGMENT
__real@3eaaa64c DD 03eaaa64cr			; 0.3333
CONST	ENDS
;	COMDAT __real@3e9eb852
CONST	SEGMENT
__real@3e9eb852 DD 03e9eb852r			; 0.31
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e8a3d71
CONST	SEGMENT
__real@3e8a3d71 DD 03e8a3d71r			; 0.27
CONST	ENDS
;	COMDAT __real@3e87ae14
CONST	SEGMENT
__real@3e87ae14 DD 03e87ae14r			; 0.265
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e75c28f
CONST	SEGMENT
__real@3e75c28f DD 03e75c28fr			; 0.24
CONST	ENDS
;	COMDAT __real@3e6b851f
CONST	SEGMENT
__real@3e6b851f DD 03e6b851fr			; 0.23
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e428f5c
CONST	SEGMENT
__real@3e428f5c DD 03e428f5cr			; 0.19
CONST	ENDS
;	COMDAT __real@3e32b8c2
CONST	SEGMENT
__real@3e32b8c2 DD 03e32b8c2r			; 0.174533
CONST	ENDS
;	COMDAT __real@3e2e147b
CONST	SEGMENT
__real@3e2e147b DD 03e2e147br			; 0.17
CONST	ENDS
;	COMDAT __real@3e23d70a
CONST	SEGMENT
__real@3e23d70a DD 03e23d70ar			; 0.16
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e0f5c29
CONST	SEGMENT
__real@3e0f5c29 DD 03e0f5c29r			; 0.14
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3df5c28f
CONST	SEGMENT
__real@3df5c28f DD 03df5c28fr			; 0.12
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d9f49f5
CONST	SEGMENT
__real@3d9f49f5 DD 03d9f49f5r			; 0.0777778
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d8f5c29
CONST	SEGMENT
__real@3d8f5c29 DD 03d8f5c29r			; 0.07
CONST	ENDS
;	COMDAT __real@3d7c0fc1
CONST	SEGMENT
__real@3d7c0fc1 DD 03d7c0fc1r			; 0.0615385
CONST	ENDS
;	COMDAT __real@3d75c290
CONST	SEGMENT
__real@3d75c290 DD 03d75c290r			; 0.06
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d0f5c29
CONST	SEGMENT
__real@3d0f5c29 DD 03d0f5c29r			; 0.035
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3ccccccd
CONST	SEGMENT
__real@3ccccccd DD 03ccccccdr			; 0.025
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??toggle_viper_mfd_on_off@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??toggle_viper_mfd_on_off@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA DD 0292cH ; `toggle_viper_mfd_on_off'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@
CONST	SEGMENT
??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@ DB 'previo'
	DB	'us_mfd_mode != *mfd_mode_ptr2', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_previous_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_previous_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA DD 0290cH ; `select_previous_viper_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@
CONST	SEGMENT
??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@ DB 'next_m'
	DB	'fd_mode != *mfd_mode_ptr2', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_next_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_next_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA DD 028ecH ; `select_next_viper_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W42@W4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W42@W4VIPER_MFD_LOCATIONS@@@Z@4JA DD 02887H ; `get_previous_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W42@W4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W42@W4VIPER_MFD_LOCATIONS@@@Z@4JA DD 0281bH ; `get_next_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@
CONST	SEGMENT
??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@ DB 'default_mfd_'
	DB	'mode != mfd_mode', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
CONST	SEGMENT
??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@ DB '%s = %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IHBMFDMF@viper_mfd_mode_valid?5?$CImfd_mode?$CJ@
CONST	SEGMENT
??_C@_0CA@IHBMFDMF@viper_mfd_mode_valid?5?$CImfd_mode?$CJ@ DB 'viper_mfd_'
	DB	'mode_valid (mfd_mode)', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA DD 027e8H ; `select_viper_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_mfd_damage@@YGHW4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_mfd_damage@@YGHW4VIPER_MFD_LOCATIONS@@@Z@4JA DD 027a6H ; `get_mfd_damage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA DD 02764H ; `get_default_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ DB 'Invalid EO senso'
	DB	'r = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z@4JA DD 0271cH ; `get_viper_mfd_has_focus'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BM@OOGHOFNN@viper_mfd_mode_valid?5?$CImode?$CJ@
CONST	SEGMENT
??_C@_0BM@OOGHOFNN@viper_mfd_mode_valid?5?$CImode?$CJ@ DB 'viper_mfd_mode'
	DB	'_valid (mode)', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA DD 02488H ; `draw_overlaid_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@ DB 'Invalid view mod'
	DB	'e = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_viper_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_viper_mfd@@YGXXZ@4JA DD 02186H	; `draw_viper_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@ DB 'Invalid mai'
	DB	'n MFD mode = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LNFLDDNP@viper_mfd_location_valid?5?$CIlocat@
CONST	SEGMENT
??_C@_0CE@LNFLDDNP@viper_mfd_location_valid?5?$CIlocat@ DB 'viper_mfd_loc'
	DB	'ation_valid (location)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MGECJOEL@viper_mfd_mode_valid?5?$CI?$CKmode?$CJ@
CONST	SEGMENT
??_C@_0BN@MGECJOEL@viper_mfd_mode_valid?5?$CI?$CKmode?$CJ@ DB 'viper_mfd_'
	DB	'mode_valid (*mode)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHCAJMOH@mfd_screen@
CONST	SEGMENT
??_C@_0L@DHCAJMOH@mfd_screen@ DB 'mfd_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA DD 0203aH ; `draw_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@
CONST	SEGMENT
??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@ DB 'T'
	DB	'IME  :MT=%02d:%02d:%02d MD=%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@
CONST	SEGMENT
??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@ DB 'COUNT :K'
	DB	'ills=%d Losses=%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@
CONST	SEGMENT
??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@ DB 'END   :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MDEJFDEL@START?5?3?$CFs@
CONST	SEGMENT
??_C@_09MDEJFDEL@START?5?3?$CFs@ DB 'START :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFLHCPML@STATUS?3?$CFs@
CONST	SEGMENT
??_C@_09NFLHCPML@STATUS?3?$CFs@ DB 'STATUS:%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MMJDMDOM@OBJECT?3?$CFs@
CONST	SEGMENT
??_C@_09MMJDMDOM@OBJECT?3?$CFs@ DB 'OBJECT:%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@
CONST	SEGMENT
??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@ DB 'TYPE  :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PPFPLHID@MISSION@
CONST	SEGMENT
??_C@_07PPFPLHID@MISSION@ DB 'MISSION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@
CONST	SEGMENT
??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@ DB 'get_local_ent'
	DB	'ity_int_value (task, INT_TYPE_VISIBLE_TASK)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@
CONST	SEGMENT
??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@ DB 'FORMATION:%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAHIIHDD@?$CFc1?9?$CFd@
CONST	SEGMENT
??_C@_06IAHIIHDD@?$CFc1?9?$CFd@ DB '%c1-%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@
CONST	SEGMENT
??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@ DB '%c%s 1-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@ DB '%c1-%d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@ DB '%c%s 1-%d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DKEJHHJP@?$CFs?3@
CONST	SEGMENT
??_C@_03DKEJHHJP@?$CFs?3@ DB '%s:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MLNBPDHK@company@
CONST	SEGMENT
??_C@_07MLNBPDHK@company@ DB 'company', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
CONST	SEGMENT
??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@ DB 'FLIGHT GROUP', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA DD 01e42H ; `draw_mission_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@
CONST	SEGMENT
??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@ DB ' '
	DB	'      <%03d,%03d> %6.1fKm %3d', 07fH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OAGMDKAF@position@
CONST	SEGMENT
??_C@_08OAGMDKAF@position@ DB 'position', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA DD 01e15H ; `print_target_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs@ DB '%s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA DD 01de4H ; `get_player_rank_and_name'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05KEIIKJGB@?$CF?431s@
CONST	SEGMENT
??_C@_05KEIIKJGB@?$CF?431s@ DB '%.31s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA DD 01dd4H ; `print_mono_font_max_length_string'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA DD 01dbbH ; `draw_flight_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03NJMPCKOA@?$CFd0@
CONST	SEGMENT
??_C@_03NJMPCKOA@?$CFd0@ DB '%d0', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA DD 01c03H	; `draw_pitch_ladder'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02NEDDHJED@TG@
CONST	SEGMENT
??_C@_02NEDDHJED@TG@ DB 'TG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MIKLMMJE@TQ@
CONST	SEGMENT
??_C@_02MIKLMMJE@TQ@ DB 'TQ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MFICFPOF@NG@
CONST	SEGMENT
??_C@_02MFICFPOF@NG@ DB 'NG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MAABNLHD@NP@
CONST	SEGMENT
??_C@_02MAABNLHD@NP@ DB 'NP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCDHLJPB@NR@
CONST	SEGMENT
??_C@_02PCDHLJPB@NR@ DB 'NR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@ DB 'SPU %03d%%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BAGGPIOL@?5?$CFs?5?5?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_0M@BAGGPIOL@?5?$CFs?5?5?$CF03d?$CF?$CF@ DB ' %s  %03d%%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBBIICJN@?5?$CFs?5?5FLY?5@
CONST	SEGMENT
??_C@_09IBBIICJN@?5?$CFs?5?5FLY?5@ DB ' %s  FLY ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MEJLMDNK@?5?$CFs?5?5IDLE@
CONST	SEGMENT
??_C@_09MEJLMDNK@?5?$CFs?5?5IDLE@ DB ' %s  IDLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PEMPOEMF@?5?$CFs?5?5OFF?5@
CONST	SEGMENT
??_C@_09PEMPOEMF@?5?$CFs?5?5OFF?5@ DB ' %s  OFF ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@ DB '%03d%%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MJEFHDBD@FLY?5@
CONST	SEGMENT
??_C@_04MJEFHDBD@FLY?5@ DB 'FLY ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMMGDCFE@IDLE@
CONST	SEGMENT
??_C@_04IMMGDCFE@IDLE@ DB 'IDLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMJCBFEL@OFF?5@
CONST	SEGMENT
??_C@_04LMJCBFEL@OFF?5@ DB 'OFF ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLAGFMEO@THROTTLE@
CONST	SEGMENT
??_C@_08PLAGFMEO@THROTTLE@ DB 'THROTTLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MGEFOJJP@?$CF04d?5lb@
CONST	SEGMENT
??_C@_07MGEFOJJP@?$CF04d?5lb@ DB '%04d lb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFKNNLAF@FUEL?5QTY@
CONST	SEGMENT
??_C@_08HFKNNLAF@FUEL?5QTY@ DB 'FUEL QTY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH@ DB 'HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
CONST	SEGMENT
??_C@_0N@MMJNGGCF@OIL?5PRESSURE@ DB 'OIL PRESSURE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
CONST	SEGMENT
??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@ DB 'HYDRAULIC PRESSURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GEIAFJFB@R?5ENGINE@
CONST	SEGMENT
??_C@_08GEIAFJFB@R?5ENGINE@ DB 'R ENGINE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KMHDAHAO@SPU@
CONST	SEGMENT
??_C@_03KMHDAHAO@SPU@ DB 'SPU', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICMALC@L?5ENGINE@
CONST	SEGMENT
??_C@_08ICMALC@L?5ENGINE@ DB 'L ENGINE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
CONST	SEGMENT
??_C@_0L@MCBINMPD@TAIL?5ROTOR@ DB 'TAIL ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHKEFPKJ@DAMAGED@
CONST	SEGMENT
??_C@_07OHKEFPKJ@DAMAGED@ DB 'DAMAGED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
CONST	SEGMENT
??_C@_0L@FFIGCBMA@MAIN?5ROTOR@ DB 'MAIN ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMAEBBOE@STABILISER@
CONST	SEGMENT
??_C@_0L@LMAEBBOE@STABILISER@ DB 'STABILISER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDKCLELC@PNVS@
CONST	SEGMENT
??_C@_04IDKCLELC@PNVS@ DB 'PNVS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
CONST	SEGMENT
??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@ DB 'RADAR WARNING SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
CONST	SEGMENT
??_C@_0P@OEDGDHNF@COMMUNICATIONS@ DB 'COMMUNICATIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
CONST	SEGMENT
??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@ DB 'NAVIGATION COMPUTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MILGCPFO@IR?5JAMMER@
CONST	SEGMENT
??_C@_09MILGCPFO@IR?5JAMMER@ DB 'IR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
CONST	SEGMENT
??_C@_0N@JDBOFCJG@RADAR?5JAMMER@ DB 'RADAR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
CONST	SEGMENT
??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@ DB 'LASER DESIGNATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOEBCMBF@FAIL@
CONST	SEGMENT
??_C@_04OOEBCMBF@FAIL@ DB 'FAIL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPLKDJGL@warning@
CONST	SEGMENT
??_C@_07FPLKDJGL@warning@ DB 'warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FJJPPKDN@equipment@
CONST	SEGMENT
??_C@_09FJJPPKDN@equipment@ DB 'equipment', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HM@Z@4JA DD 018eeH ; `print_mfd_system_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02MCEHGFCK@MP@
CONST	SEGMENT
??_C@_02MCEHGFCK@MP@ DB 'MP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L@
CONST	SEGMENT
??_C@_01OCOKONAJ@L@ DB 'L', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R@
CONST	SEGMENT
??_C@_01DGKLNCNG@R@ DB 'R', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JHPKLNBL@?$CB?$CCmore?5than?54?5hellfires?5on?5Vipe@
CONST	SEGMENT
??_C@_0CI@JHPKLNBL@?$CB?$CCmore?5than?54?5hellfires?5on?5Vipe@ DB '!"more'
	DB	' than 4 hellfires on Viper pylon"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LHBBDA@more?5than?54?5hellfires?5on?5Viper?5@
CONST	SEGMENT
??_C@_0CF@LHBBDA@more?5than?54?5hellfires?5on?5Viper?5@ DB 'more than 4 h'
	DB	'ellfires on Viper pylon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPKGLDLB@SALVO@
CONST	SEGMENT
??_C@_05GPKGLDLB@SALVO@ DB 'SALVO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIHLKMGG@LOBL@
CONST	SEGMENT
??_C@_04EIHLKMGG@LOBL@ DB 'LOBL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EKDNBCDP@LOAL@
CONST	SEGMENT
??_C@_04EKDNBCDP@LOAL@ DB 'LOAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MJCDDMFE@TRNGL@
CONST	SEGMENT
??_C@_05MJCDDMFE@TRNGL@ DB 'TRNGL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGGCNFDL@LRF@
CONST	SEGMENT
??_C@_03MGGCNFDL@LRF@ DB 'LRF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKJFCLEN@FCR@
CONST	SEGMENT
??_C@_03JKJFCLEN@FCR@ DB 'FCR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE@ DB 'NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMNPMIJD@SAFE@
CONST	SEGMENT
??_C@_04JMNPMIJD@SAFE@ DB 'SAFE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NHPMNECN@ARM@
CONST	SEGMENT
??_C@_03NHPMNECN@ARM@ DB 'ARM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M@
CONST	SEGMENT
??_C@_01PLPBNMEI@M@ DB 'M', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIGHCFHP@MAN@
CONST	SEGMENT
??_C@_03KIGHCFHP@MAN@ DB 'MAN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A@
CONST	SEGMENT
??_C@_01FHEEJDEE@A@ DB 'A', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01BIAFAFID@F@
CONST	SEGMENT
??_C@_01BIAFAFID@F@ DB 'F', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLKBHMKD@FLARE@
CONST	SEGMENT
??_C@_05MLKBHMKD@FLARE@ DB 'FLARE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BAHDIOLJ@XX@
CONST	SEGMENT
??_C@_02BAHDIOLJ@XX@ DB 'XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GPCJOALC@?$CF2d@
CONST	SEGMENT
??_C@_03GPCJOALC@?$CF2d@ DB '%2d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C@
CONST	SEGMENT
??_C@_01GFHCPBMG@C@ DB 'C', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05FOOOBDLP@CHAFF@
CONST	SEGMENT
??_C@_05FOOOBDLP@CHAFF@ DB 'CHAFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CPMKADPB@XXXX@
CONST	SEGMENT
??_C@_04CPMKADPB@XXXX@ DB 'XXXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLKEJMAA@?$CF4d@
CONST	SEGMENT
??_C@_03GLKEJMAA@?$CF4d@ DB '%4d', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA DD 016d7H ; `draw_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06DPNNIDIB@F?3?$CF02d@
CONST	SEGMENT
??_C@_06DPNNIDIB@F?3?$CF02d@ DB 'F:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBDFBFJK@F?3XX@
CONST	SEGMENT
??_C@_04GBDFBFJK@F?3XX@ DB 'F:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
CONST	SEGMENT
??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@ DB 'FLARE:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDOPGOH@FLARE?3XX@
CONST	SEGMENT
??_C@_08HGDOPGOH@FLARE?3XX@ DB 'FLARE:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNOFKMCG@C?3?$CF02d@
CONST	SEGMENT
??_C@_06GNOFKMCG@C?3?$CF02d@ DB 'C:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJNFJKOK@C?3XX@
CONST	SEGMENT
??_C@_04KJNFJKOK@C?3XX@ DB 'C:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
CONST	SEGMENT
??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@ DB 'CHAFF:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAEIHAP@CHAFF?3XX@
CONST	SEGMENT
??_C@_08GHAEIHAP@CHAFF?3XX@ DB 'CHAFF:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMMJFDCN@AUTO@
CONST	SEGMENT
??_C@_04LMMJFDCN@AUTO@ DB 'AUTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCJCOOPL@RD?5OFF@
CONST	SEGMENT
??_C@_06JCJCOOPL@RD?5OFF@ DB 'RD OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BHAGAOGB@RD?5ON@
CONST	SEGMENT
??_C@_05BHAGAOGB@RD?5ON@ DB 'RD ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNKFDAHI@RD?5XXX@
CONST	SEGMENT
??_C@_06JNKFDAHI@RD?5XXX@ DB 'RD XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@ DB 'RD JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKIOJJOP@RD?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKIOJJOP@RD?5JAM?5ON@ DB 'RD JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@ DB 'RD JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCMEMHEJ@IR?5OFF@
CONST	SEGMENT
??_C@_06CCMEMHEJ@IR?5OFF@ DB 'IR OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBLHJOBL@IR?5ON@
CONST	SEGMENT
??_C@_05JBLHJOBL@IR?5ON@ DB 'IR ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNPDBJMK@IR?5XXX@
CONST	SEGMENT
??_C@_06CNPDBJMK@IR?5XXX@ DB 'IR XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@ DB 'IR JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKBKNIAL@IR?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKBKNIAL@IR?5JAM?5ON@ DB 'IR JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@DADPKEOI@IR?5JAM?5XXX@ DB 'IR JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@ DB 'LS MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@ DB 'RF MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@ DB 'IR MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA DD 0137fH ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
CONST	SEGMENT
??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ DB '(threa'
	DB	't_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_T'
	DB	'YPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA DD 01318H ; `get_closest_missile'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06OMCABMNO@?$CF?41fKm@
CONST	SEGMENT
??_C@_06OMCABMNO@?$CF?41fKm@ DB '%.1fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGNKAJPJ@?$CFdm@
CONST	SEGMENT
??_C@_03NGNKAJPJ@?$CFdm@ DB '%dm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DIMJBCMI@NAV@
CONST	SEGMENT
??_C@_03DIMJBCMI@NAV@ DB 'NAV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DBNGLLAD@TGT@
CONST	SEGMENT
??_C@_03DBNGLLAD@TGT@ DB 'TGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NIFPGLBG@ALL@
CONST	SEGMENT
??_C@_03NIFPGLBG@ALL@ DB 'ALL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJFFJMFM@25Km@
CONST	SEGMENT
??_C@_04IJFFJMFM@25Km@ DB '25Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJCLBGLO@10Km@
CONST	SEGMENT
??_C@_04PJCLBGLO@10Km@ DB '10Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFNCFPLL@5Km@
CONST	SEGMENT
??_C@_03LFNCFPLL@5Km@ DB '5Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIAFGHAC@2Km@
CONST	SEGMENT
??_C@_03CIAFGHAC@2Km@ DB '2Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05BDMPLNHB@HIDSS@
CONST	SEGMENT
??_C@_05BDMPLNHB@HIDSS@ DB 'HIDSS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBODHFDK@TADS@
CONST	SEGMENT
??_C@_04DBODHFDK@TADS@ DB 'TADS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLLMNJMM@NO?5ACQ@
CONST	SEGMENT
??_C@_06LLLMNJMM@NO?5ACQ@ DB 'NO ACQ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
CONST	SEGMENT
??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@ DB 'viper_mfd_loca'
	DB	'tion_valid (mfd_location)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA DD 0fc9H ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA DD 0eb1H ; `draw_heading_scale_tsd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@
CONST	SEGMENT
??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@ DB '%c%04d M   %3d K'
	DB	'PH', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@
CONST	SEGMENT
??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@ DB 'CP/G ID...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ICGCKLLB@LOW?5LIGHT@
CONST	SEGMENT
??_C@_09ICGCKLLB@LOW?5LIGHT@ DB 'LOW LIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FGFCMGOE@?$CF3d?5KTS@
CONST	SEGMENT
??_C@_07FGFCMGOE@?$CF3d?5KTS@ DB '%3d KTS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BLLIFECI@?$CF3d?5FT@
CONST	SEGMENT
??_C@_06BLLIFECI@?$CF3d?5FT@ DB '%3d FT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S@
CONST	SEGMENT
??_C@_01CPLAODJH@S@ DB 'S', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPMJGLEM@MARKED@
CONST	SEGMENT
??_C@_06GPMJGLEM@MARKED@ DB 'MARKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGBPDDBN@?$CF?41f@
CONST	SEGMENT
??_C@_04GGBPDDBN@?$CF?41f@ DB '%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ONPABID@LO@
CONST	SEGMENT
??_C@_02ONPABID@LO@ DB 'LO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFLECGBM@LO?5LIGHT@
CONST	SEGMENT
??_C@_08JFLECGBM@LO?5LIGHT@ DB 'LO LIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MAMPKPPK@XXX@
CONST	SEGMENT
??_C@_03MAMPKPPK@XXX@ DB 'XXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENJJJDDH@DTV@
CONST	SEGMENT
??_C@_03ENJJJDDH@DTV@ DB 'DTV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIGKMLBH@FLIR@
CONST	SEGMENT
??_C@_04MIGKMLBH@FLIR@ DB 'FLIR', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA DD 08daH ; `draw_2d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 083fH ; `draw_full_screen_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
CONST	SEGMENT
??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ DB 'Invalid target'
	DB	' acquisition system = %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
CONST	SEGMENT
??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ DB '('
	DB	'day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT'
	DB	'_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
CONST	SEGMENT
??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ DB '(weather_'
	DB	'mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LA'
	DB	'ST)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
CONST	SEGMENT
??_C@_0BF@MDEHLDP@eo_3d_texture_screen@ DB 'eo_3d_texture_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMMHFIEO@eo@
CONST	SEGMENT
??_C@_02KMMHFIEO@eo@ DB 'eo', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 078dH ; `draw_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
CONST	SEGMENT
??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ DB '('
	DB	'target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_'
	DB	'SYMBOL_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
CONST	SEGMENT
??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ DB '!get_local'
	DB	'_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIPCKJML@source_position@
CONST	SEGMENT
??_C@_0BA@IIPCKJML@source_position@ DB 'source_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA DD 0619H ; `draw_radar_target_symbol'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05MDNKIPAL@?$CFd?5lb@
CONST	SEGMENT
??_C@_05MDNKIPAL@?$CFd?5lb@ DB '%d lb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KABNCBHK@?$CFd?0?$CFd@
CONST	SEGMENT
??_C@_05KABNCBHK@?$CFd?0?$CFd@ DB '%d,%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
CONST	SEGMENT
??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@ DB '--:--:--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@ DB '%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
CONST	SEGMENT
??_C@_06BAOIPBEF@?9?3?9?9?4?9@ DB '-:--.-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
CONST	SEGMENT
??_C@_07CFANIJPM@?$CFc?3?$CFdKm@ DB '%c:%dKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
CONST	SEGMENT
??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@ DB '%c:%.1fKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
CONST	SEGMENT
??_C@_06JCIGMCHD@?$CFc?3?$CFdm@ DB '%c:%dm', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA DD 0568H ; `display_navigation_info'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04OHGLKFFN@?$CF03d@
CONST	SEGMENT
??_C@_04OHGLKFFN@?$CF03d@ DB '%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA DD 0480H ; `draw_heading_scale'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04HPNJOLEN@?$CF3do@
CONST	SEGMENT
??_C@_04HPNJOLEN@?$CF3do@ DB '%3do', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GOOLIKIF@?$CF3d@
CONST	SEGMENT
??_C@_03GOOLIKIF@?$CF3d@ DB '%3d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CBDEGOCN@j@
CONST	SEGMENT
??_C@_01CBDEGOCN@j@ DB 'j', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_m'
	DB	'fd.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA DD 0282H ; `transform_mfd_screen_co_ords_to_mfd_texture_co_ords'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?viper_mfd_mode_names@@3PAPADA DD FLAT:??_C@_0BD@HNJPNMMI@VIPER_MFD_MODE_OFF@ ; viper_mfd_mode_names
	DD	FLAT:??_C@_0BH@JMBJJHKF@VIPER_MFD_MODE_DAMAGED@
	DD	FLAT:??_C@_0BE@HELOCPKA@VIPER_MFD_MODE_FLIR@
	DD	FLAT:??_C@_0BD@PPPODOIG@VIPER_MFD_MODE_DTV@
	DD	FLAT:??_C@_0BD@NCFMAPEP@VIPER_MFD_MODE_TSD@
	DD	FLAT:??_C@_0BD@KMIAJJKD@VIPER_MFD_MODE_ASE@
	DD	FLAT:??_C@_0BG@GMDFBIIA@VIPER_MFD_MODE_WEAPON@
	DD	FLAT:??_C@_0BG@FPJGHLND@VIPER_MFD_MODE_SYSTEM@
	DD	FLAT:??_C@_0BG@LGNEDLON@VIPER_MFD_MODE_ENGINE@
	DD	FLAT:??_C@_0BG@MCEPBGIL@VIPER_MFD_MODE_FLIGHT@
	DD	FLAT:??_C@_0BH@IEOCHPIP@VIPER_MFD_MODE_MISSION@
?viper_mfd_location_names@@3PAPADA DD FLAT:??_C@_0BN@JJDJCFFB@VIPER_MFD_LOCATION_PILOT_LHS@ ; viper_mfd_location_names
	DD	FLAT:??_C@_0BN@CJPPAFPN@VIPER_MFD_LOCATION_PILOT_RHS@
	DD	FLAT:??_C@_0CA@MMKDJIFC@VIPER_MFD_LOCATION_CO_PILOT_LHS@
	DD	FLAT:??_C@_0CA@HMGFLIPO@VIPER_MFD_LOCATION_CO_PILOT_RHS@
	DD	00H
	DD	00H
?mfd_mode_ptrs@@3PAPAW4VIPER_MFD_MODES@@A DD FLAT:?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A ; mfd_mode_ptrs
	DD	FLAT:?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
	DD	FLAT:?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
	DD	FLAT:?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
	DD	FLAT:?pilot_dfd_mode@@3W4VIPER_MFD_MODES@@A
	DD	FLAT:?co_pilot_dfd_mode@@3W4VIPER_MFD_MODES@@A
?opposite_mfd_mode_ptrs@@3PAPAW4VIPER_MFD_MODES@@A DD FLAT:?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A ; opposite_mfd_mode_ptrs
	DD	FLAT:?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
	DD	FLAT:?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
	DD	FLAT:?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
	DD	FLAT:?pilot_dfd_mode@@3W4VIPER_MFD_MODES@@A
	DD	FLAT:?co_pilot_dfd_mode@@3W4VIPER_MFD_MODES@@A
?opposite_mfd_locations@@3PAW4VIPER_MFD_LOCATIONS@@A DD 01H ; opposite_mfd_locations
	DD	00H
	DD	03H
	DD	02H
	DD	04H
	DD	05H
?large_right_carat@@3PADA DB 05H			; large_right_carat
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_tsd_ase_aircraft_datum@@3PADA DB 011H		; large_tsd_ase_aircraft_datum
	DB	025H
	DB	0f8H
	DB	0f8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?large_tsd_ase_aircraft_datum_mask@@3PADA DB 013H	; large_tsd_ase_aircraft_datum_mask
	DB	027H
	DB	0f7H
	DB	0f7H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?small_tsd_ase_aircraft_datum@@3PADA DB 07H		; small_tsd_ase_aircraft_datum
	DB	0fH
	DB	0fdH
	DB	0fdH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?small_tsd_ase_aircraft_datum_mask@@3PADA DB 09H	; small_tsd_ase_aircraft_datum_mask
	DB	011H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_tsd_waypoint_marker@@3PADA DB 0cH		; large_tsd_waypoint_marker
	DB	0dH
	DB	0fbH
	DB	0faH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?small_tsd_waypoint_marker@@3PADA DB 09H		; small_tsd_waypoint_marker
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?large_ase_missile@@3PADA DB 0bH			; large_ase_missile
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
?large_ase_missile_mask@@3PADA DB 0dH			; large_ase_missile_mask
	DB	0bH
	DB	0faH
	DB	0fbH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?small_ase_missile@@3PADA DB 07H			; small_ase_missile
	DB	05H
	DB	0fdH
	DB	0feH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
?small_ase_missile_mask@@3PADA DB 09H			; small_ase_missile_mask
	DB	07H
	DB	0fcH
	DB	0fdH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?large_open_right_carat@@3PADA DB 05H			; large_open_right_carat
	DB	09H
	DB	0fcH
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_left_carat@@3PADA DB 05H				; large_left_carat
	DB	09H
	DB	00H
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+3
?large_open_left_carat@@3PADA DB 05H			; large_open_left_carat
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+3
?large_command_heading_carat@@3PADA DB 0bH		; large_command_heading_carat
	DB	06H
	DB	0fbH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+2
?small_command_heading_carat@@3PADA DB 07H		; small_command_heading_carat
	DB	04H
	DB	0fdH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; flir_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; flir_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; dtv_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; dtv_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
?hellfire_missile_data@@3PADA DB 0fH			; hellfire_missile_data
	DB	027H
	DB	0f9H
	DB	0edH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+3
?inverted_hellfire_missile_data@@3PADA DB 0fH		; inverted_hellfire_missile_data
	DB	027H
	DB	0f9H
	DB	0edH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+3
?sidewinder_missile_data@@3PADA DB 0fH			; sidewinder_missile_data
	DB	01fH
	DB	0f9H
	DB	0f1H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?inverted_sidewinder_missile_data@@3PADA DB 0fH		; inverted_sidewinder_missile_data
	DB	01fH
	DB	0f9H
	DB	0f1H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?get_previous_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W41@W4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv81 = -72						; size = 4
tv76 = -72						; size = 4
_previous_mfd_mode$ = -4				; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_previous_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W41@W4VIPER_MFD_LOCATIONS@@@Z PROC ; get_previous_mfd_mode, COMDAT

; 10375: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10376: 	viper_mfd_modes
; 10377: 		previous_mfd_mode;
; 10378: 
; 10379: 	ASSERT (viper_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_previo
  0000f	83 7d 08 0b	 cmp	 DWORD PTR _mfd_mode$[ebp], 11 ; 0000000bH
  00013	7c 18		 jl	 SHORT $LN4@get_previo
$LN5@get_previo:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W42@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IHBMFDMF@viper_mfd_mode_valid?5?$CImfd_mode?$CJ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_previo:

; 10380: 
; 10381: 	ASSERT (viper_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN7@get_previo
  00033	83 7d 0c 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00037	7c 18		 jl	 SHORT $LN6@get_previo
$LN7@get_previo:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W42@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_previo:

; 10382: 
; 10383: 	switch (mfd_mode)

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	89 45 b8	 mov	 DWORD PTR tv76[ebp], eax
  00057	83 7d b8 0a	 cmp	 DWORD PTR tv76[ebp], 10	; 0000000aH
  0005b	77 7d		 ja	 SHORT $LN2@get_previo
  0005d	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  00060	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN21@get_previo[ecx*4]
$LN8@get_previo:

; 10384: 	{
; 10385: 		////////////////////////////////////////
; 10386: 		case VIPER_MFD_MODE_OFF:
; 10387: 		////////////////////////////////////////
; 10388: 		{
; 10389: 			previous_mfd_mode = get_default_mfd_mode (mfd_location);

  00067	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; get_default_mfd_mode
  00070	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 10390: 
; 10391: 			break;

  00073	eb 65		 jmp	 SHORT $LN2@get_previo
$LN9@get_previo:

; 10392: 		}
; 10393: 		////////////////////////////////////////
; 10394: 		case VIPER_MFD_MODE_DAMAGED:
; 10395: 		////////////////////////////////////////
; 10396: 		{
; 10397: 			previous_mfd_mode = VIPER_MFD_MODE_DAMAGED;

  00075	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 1

; 10398: 
; 10399: 			break;

  0007c	eb 5c		 jmp	 SHORT $LN2@get_previo
$LN10@get_previo:

; 10400: 		}
; 10401: 		////////////////////////////////////////
; 10402: 		case VIPER_MFD_MODE_FLIR:
; 10403: 		case VIPER_MFD_MODE_DTV:
; 10404: 		////////////////////////////////////////
; 10405: 		{
; 10406: 			previous_mfd_mode = VIPER_MFD_MODE_MISSION;

  0007e	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 10 ; 0000000aH

; 10407: 
; 10408: 			break;

  00085	eb 53		 jmp	 SHORT $LN2@get_previo
$LN11@get_previo:

; 10409: 		}
; 10410: 		////////////////////////////////////////
; 10411: 		case VIPER_MFD_MODE_TSD:
; 10412: 		////////////////////////////////////////
; 10413: 		{
; 10414: 			previous_mfd_mode = get_mfd_mode_for_eo_sensor ();

  00087	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0008c	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 10415: 
; 10416: 			break;

  0008f	eb 49		 jmp	 SHORT $LN2@get_previo
$LN12@get_previo:

; 10417: 		}
; 10418: 		////////////////////////////////////////
; 10419: 		case VIPER_MFD_MODE_ASE:
; 10420: 		////////////////////////////////////////
; 10421: 		{
; 10422: 			previous_mfd_mode = VIPER_MFD_MODE_TSD;

  00091	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 4

; 10423: 
; 10424: 			break;

  00098	eb 40		 jmp	 SHORT $LN2@get_previo
$LN13@get_previo:

; 10425: 		}
; 10426: 		////////////////////////////////////////
; 10427: 		case VIPER_MFD_MODE_WEAPON:
; 10428: 		////////////////////////////////////////
; 10429: 		{
; 10430: 			previous_mfd_mode = VIPER_MFD_MODE_ASE;

  0009a	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 5

; 10431: 
; 10432: 			break;

  000a1	eb 37		 jmp	 SHORT $LN2@get_previo
$LN14@get_previo:

; 10433: 		}
; 10434: 		////////////////////////////////////////
; 10435: 		case VIPER_MFD_MODE_SYSTEM:
; 10436: 		////////////////////////////////////////
; 10437: 		{
; 10438: 			previous_mfd_mode = VIPER_MFD_MODE_WEAPON;

  000a3	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 6

; 10439: 
; 10440: 			break;

  000aa	eb 2e		 jmp	 SHORT $LN2@get_previo
$LN15@get_previo:

; 10441: 		}
; 10442: 		////////////////////////////////////////
; 10443: 		case VIPER_MFD_MODE_ENGINE:
; 10444: 		////////////////////////////////////////
; 10445: 		{
; 10446: 			previous_mfd_mode = VIPER_MFD_MODE_SYSTEM;

  000ac	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 7

; 10447: 
; 10448: 			break;

  000b3	eb 25		 jmp	 SHORT $LN2@get_previo
$LN16@get_previo:

; 10449: 		}
; 10450: 		////////////////////////////////////////
; 10451: 		case VIPER_MFD_MODE_FLIGHT:
; 10452: 		////////////////////////////////////////
; 10453: 		{
; 10454: 			previous_mfd_mode = mfd_location < VIPER_MFD_LOCATION_PILOT_DFD ? VIPER_MFD_MODE_ENGINE : VIPER_MFD_MODE_MISSION;

  000b5	83 7d 0c 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  000b9	7d 09		 jge	 SHORT $LN19@get_previo
  000bb	c7 45 b8 08 00
	00 00		 mov	 DWORD PTR tv81[ebp], 8
  000c2	eb 07		 jmp	 SHORT $LN20@get_previo
$LN19@get_previo:
  000c4	c7 45 b8 0a 00
	00 00		 mov	 DWORD PTR tv81[ebp], 10	; 0000000aH
$LN20@get_previo:
  000cb	8b 45 b8	 mov	 eax, DWORD PTR tv81[ebp]
  000ce	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 10455: 
; 10456: 			break;

  000d1	eb 07		 jmp	 SHORT $LN2@get_previo
$LN17@get_previo:

; 10457: 		}
; 10458: 		////////////////////////////////////////
; 10459: 		case VIPER_MFD_MODE_MISSION:
; 10460: 		////////////////////////////////////////
; 10461: 		{
; 10462: 			previous_mfd_mode = VIPER_MFD_MODE_FLIGHT;

  000d3	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 9
$LN2@get_previo:

; 10463: 
; 10464: 			break;
; 10465: 		}
; 10466: 	}
; 10467: 
; 10468: 	return (previous_mfd_mode);

  000da	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]

; 10469: }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
  000e6	66 90		 npad	 2
$LN21@get_previo:
  000e8	00 00 00 00	 DD	 $LN8@get_previo
  000ec	00 00 00 00	 DD	 $LN9@get_previo
  000f0	00 00 00 00	 DD	 $LN10@get_previo
  000f4	00 00 00 00	 DD	 $LN10@get_previo
  000f8	00 00 00 00	 DD	 $LN11@get_previo
  000fc	00 00 00 00	 DD	 $LN12@get_previo
  00100	00 00 00 00	 DD	 $LN13@get_previo
  00104	00 00 00 00	 DD	 $LN14@get_previo
  00108	00 00 00 00	 DD	 $LN15@get_previo
  0010c	00 00 00 00	 DD	 $LN16@get_previo
  00110	00 00 00 00	 DD	 $LN17@get_previo
?get_previous_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W41@W4VIPER_MFD_LOCATIONS@@@Z ENDP ; get_previous_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?get_next_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W41@W4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv81 = -72						; size = 4
tv76 = -72						; size = 4
_next_mfd_mode$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_next_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W41@W4VIPER_MFD_LOCATIONS@@@Z PROC ; get_next_mfd_mode, COMDAT

; 10267: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10268: 	viper_mfd_modes
; 10269: 		next_mfd_mode;
; 10270: 
; 10271: 	ASSERT (viper_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_next_m
  0000f	83 7d 08 0b	 cmp	 DWORD PTR _mfd_mode$[ebp], 11 ; 0000000bH
  00013	7c 18		 jl	 SHORT $LN4@get_next_m
$LN5@get_next_m:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W42@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IHBMFDMF@viper_mfd_mode_valid?5?$CImfd_mode?$CJ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_next_m:

; 10272: 
; 10273: 	ASSERT (viper_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN7@get_next_m
  00033	83 7d 0c 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00037	7c 18		 jl	 SHORT $LN6@get_next_m
$LN7@get_next_m:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W42@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_next_m:

; 10274: 
; 10275: 	switch (mfd_mode)

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	89 45 b8	 mov	 DWORD PTR tv76[ebp], eax
  00057	83 7d b8 0a	 cmp	 DWORD PTR tv76[ebp], 10	; 0000000aH
  0005b	0f 87 86 00 00
	00		 ja	 $LN2@get_next_m
  00061	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  00064	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN22@get_next_m[ecx*4]
$LN8@get_next_m:

; 10276: 	{
; 10277: 		////////////////////////////////////////
; 10278: 		case VIPER_MFD_MODE_OFF:
; 10279: 		////////////////////////////////////////
; 10280: 		{
; 10281: 			next_mfd_mode = get_default_mfd_mode (mfd_location);

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; get_default_mfd_mode
  00074	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 10282: 
; 10283: 			break;

  00077	eb 6e		 jmp	 SHORT $LN2@get_next_m
$LN9@get_next_m:

; 10284: 		}
; 10285: 		////////////////////////////////////////
; 10286: 		case VIPER_MFD_MODE_DAMAGED:
; 10287: 		////////////////////////////////////////
; 10288: 		{
; 10289: 			next_mfd_mode = VIPER_MFD_MODE_DAMAGED;

  00079	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 1

; 10290: 
; 10291: 			break;

  00080	eb 65		 jmp	 SHORT $LN2@get_next_m
$LN10@get_next_m:

; 10292: 		}
; 10293: 		////////////////////////////////////////
; 10294: 		case VIPER_MFD_MODE_FLIR:
; 10295: 		////////////////////////////////////////
; 10296: 		{
; 10297: 			next_mfd_mode = VIPER_MFD_MODE_TSD;

  00082	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 4

; 10298: 
; 10299: 			break;

  00089	eb 5c		 jmp	 SHORT $LN2@get_next_m
$LN11@get_next_m:

; 10300: 		}
; 10301: 		////////////////////////////////////////
; 10302: 		case VIPER_MFD_MODE_DTV:
; 10303: 		////////////////////////////////////////
; 10304: 		{
; 10305: 			next_mfd_mode = VIPER_MFD_MODE_TSD;

  0008b	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 4

; 10306: 
; 10307: 			break;

  00092	eb 53		 jmp	 SHORT $LN2@get_next_m
$LN12@get_next_m:

; 10308: 		}
; 10309: 		////////////////////////////////////////
; 10310: 		case VIPER_MFD_MODE_TSD:
; 10311: 		////////////////////////////////////////
; 10312: 		{
; 10313: 			next_mfd_mode = VIPER_MFD_MODE_ASE;

  00094	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 5

; 10314: 
; 10315: 			break;

  0009b	eb 4a		 jmp	 SHORT $LN2@get_next_m
$LN13@get_next_m:

; 10316: 		}
; 10317: 		////////////////////////////////////////
; 10318: 		case VIPER_MFD_MODE_ASE:
; 10319: 		////////////////////////////////////////
; 10320: 		{
; 10321: 			next_mfd_mode = VIPER_MFD_MODE_WEAPON;

  0009d	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 6

; 10322: 
; 10323: 			break;

  000a4	eb 41		 jmp	 SHORT $LN2@get_next_m
$LN14@get_next_m:

; 10324: 		}
; 10325: 		////////////////////////////////////////
; 10326: 		case VIPER_MFD_MODE_WEAPON:
; 10327: 		////////////////////////////////////////
; 10328: 		{
; 10329: 			next_mfd_mode = VIPER_MFD_MODE_SYSTEM;

  000a6	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 7

; 10330: 
; 10331: 			break;

  000ad	eb 38		 jmp	 SHORT $LN2@get_next_m
$LN15@get_next_m:

; 10332: 		}
; 10333: 		////////////////////////////////////////
; 10334: 		case VIPER_MFD_MODE_SYSTEM:
; 10335: 		////////////////////////////////////////
; 10336: 		{
; 10337: 			next_mfd_mode = VIPER_MFD_MODE_ENGINE;

  000af	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 10338: 
; 10339: 			break;

  000b6	eb 2f		 jmp	 SHORT $LN2@get_next_m
$LN16@get_next_m:

; 10340: 		}
; 10341: 		////////////////////////////////////////
; 10342: 		case VIPER_MFD_MODE_ENGINE:
; 10343: 		////////////////////////////////////////
; 10344: 		{
; 10345: 			next_mfd_mode = VIPER_MFD_MODE_FLIGHT;

  000b8	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 9

; 10346: 
; 10347: 			break;

  000bf	eb 26		 jmp	 SHORT $LN2@get_next_m
$LN17@get_next_m:

; 10348: 		}
; 10349: 		////////////////////////////////////////
; 10350: 		case VIPER_MFD_MODE_FLIGHT:
; 10351: 		////////////////////////////////////////
; 10352: 		{
; 10353: 			next_mfd_mode = VIPER_MFD_MODE_MISSION;

  000c1	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 10 ; 0000000aH

; 10354: 
; 10355: 			break;

  000c8	eb 1d		 jmp	 SHORT $LN2@get_next_m
$LN18@get_next_m:

; 10356: 		}
; 10357: 		////////////////////////////////////////
; 10358: 		case VIPER_MFD_MODE_MISSION:
; 10359: 		////////////////////////////////////////
; 10360: 		{
; 10361: 			next_mfd_mode = mfd_location < VIPER_MFD_LOCATION_PILOT_DFD ? get_mfd_mode_for_eo_sensor () : VIPER_MFD_MODE_FLIGHT;

  000ca	83 7d 0c 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  000ce	7d 0a		 jge	 SHORT $LN20@get_next_m
  000d0	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000d5	89 45 b8	 mov	 DWORD PTR tv81[ebp], eax
  000d8	eb 07		 jmp	 SHORT $LN21@get_next_m
$LN20@get_next_m:
  000da	c7 45 b8 09 00
	00 00		 mov	 DWORD PTR tv81[ebp], 9
$LN21@get_next_m:
  000e1	8b 45 b8	 mov	 eax, DWORD PTR tv81[ebp]
  000e4	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN2@get_next_m:

; 10362: 
; 10363: 			break;
; 10364: 		}
; 10365: 	}
; 10366: 
; 10367: 	return (next_mfd_mode);

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]

; 10368: }

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
  000f3	90		 npad	 1
$LN22@get_next_m:
  000f4	00 00 00 00	 DD	 $LN8@get_next_m
  000f8	00 00 00 00	 DD	 $LN9@get_next_m
  000fc	00 00 00 00	 DD	 $LN10@get_next_m
  00100	00 00 00 00	 DD	 $LN11@get_next_m
  00104	00 00 00 00	 DD	 $LN12@get_next_m
  00108	00 00 00 00	 DD	 $LN13@get_next_m
  0010c	00 00 00 00	 DD	 $LN14@get_next_m
  00110	00 00 00 00	 DD	 $LN15@get_next_m
  00114	00 00 00 00	 DD	 $LN16@get_next_m
  00118	00 00 00 00	 DD	 $LN17@get_next_m
  0011c	00 00 00 00	 DD	 $LN18@get_next_m
?get_next_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W41@W4VIPER_MFD_LOCATIONS@@@Z ENDP ; get_next_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?get_mfd_damage@@YGHW4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_damage$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_mfd_damage@@YGHW4VIPER_MFD_LOCATIONS@@@Z PROC	; get_mfd_damage, COMDAT

; 10150: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10151: 	int
; 10152: 		damage;
; 10153: 
; 10154: 	ASSERT (viper_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_mfd_da
  0000f	83 7d 08 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00013	7c 18		 jl	 SHORT $LN4@get_mfd_da
$LN5@get_mfd_da:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_mfd_damage@@YGHW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_mfd_da:

; 10155: 
; 10156: 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 05	 cmp	 DWORD PTR tv70[ebp], 5
  00037	77 68		 ja	 SHORT $LN2@get_mfd_da
  00039	8b 4d b8	 mov	 ecx, DWORD PTR tv70[ebp]
  0003c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN13@get_mfd_da[ecx*4]
$LN6@get_mfd_da:

; 10157: 	{
; 10158: 		////////////////////////////////////////
; 10159: 		case VIPER_MFD_LOCATION_PILOT_LHS:
; 10160: 		////////////////////////////////////////
; 10161: 		{
; 10162: 			damage = viper_damage.pilot_lh_mfd;

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00048	c1 e8 09	 shr	 eax, 9
  0004b	83 e0 01	 and	 eax, 1
  0004e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 10163: 
; 10164: 			break;

  00051	eb 4e		 jmp	 SHORT $LN2@get_mfd_da
$LN7@get_mfd_da:

; 10165: 		}
; 10166: 		////////////////////////////////////////
; 10167: 		case VIPER_MFD_LOCATION_PILOT_RHS:
; 10168: 		////////////////////////////////////////
; 10169: 		{
; 10170: 			damage = viper_damage.pilot_rh_mfd;

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00058	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  0005b	83 e0 01	 and	 eax, 1
  0005e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 10171: 
; 10172: 			break;

  00061	eb 3e		 jmp	 SHORT $LN2@get_mfd_da
$LN8@get_mfd_da:

; 10173: 		}
; 10174: 		////////////////////////////////////////
; 10175: 		case VIPER_MFD_LOCATION_CO_PILOT_LHS:
; 10176: 		////////////////////////////////////////
; 10177: 		{
; 10178: 			damage = viper_damage.co_pilot_lh_mfd;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00068	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  0006b	83 e0 01	 and	 eax, 1
  0006e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 10179: 
; 10180: 			break;

  00071	eb 2e		 jmp	 SHORT $LN2@get_mfd_da
$LN9@get_mfd_da:

; 10181: 		}
; 10182: 		////////////////////////////////////////
; 10183: 		case VIPER_MFD_LOCATION_CO_PILOT_RHS:
; 10184: 		////////////////////////////////////////
; 10185: 		{
; 10186: 			damage = viper_damage.co_pilot_rh_mfd;

  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00078	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  0007b	83 e0 01	 and	 eax, 1
  0007e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 10187: 
; 10188: 			break;

  00081	eb 1e		 jmp	 SHORT $LN2@get_mfd_da
$LN10@get_mfd_da:

; 10189: 		}
; 10190: 		////////////////////////////////////////
; 10191: 		case VIPER_MFD_LOCATION_PILOT_DFD:
; 10192: 		////////////////////////////////////////
; 10193: 		{
; 10194: 			damage = viper_damage.pilot_dfd;

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00088	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0008b	83 e0 01	 and	 eax, 1
  0008e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 10195: 
; 10196: 			break;

  00091	eb 0e		 jmp	 SHORT $LN2@get_mfd_da
$LN11@get_mfd_da:

; 10197: 		}
; 10198: 		////////////////////////////////////////
; 10199: 		case VIPER_MFD_LOCATION_CO_PILOT_DFD:
; 10200: 		////////////////////////////////////////
; 10201: 		{
; 10202: 			damage = viper_damage.co_pilot_dfd;

  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00098	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  0009b	83 e0 01	 and	 eax, 1
  0009e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax
$LN2@get_mfd_da:

; 10203: 
; 10204: 			break;
; 10205: 		}
; 10206: 	}
; 10207: 
; 10208: 	return (damage);

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _damage$[ebp]

; 10209: }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
  000ad	0f 1f 00	 npad	 3
$LN13@get_mfd_da:
  000b0	00 00 00 00	 DD	 $LN6@get_mfd_da
  000b4	00 00 00 00	 DD	 $LN7@get_mfd_da
  000b8	00 00 00 00	 DD	 $LN8@get_mfd_da
  000bc	00 00 00 00	 DD	 $LN9@get_mfd_da
  000c0	00 00 00 00	 DD	 $LN10@get_mfd_da
  000c4	00 00 00 00	 DD	 $LN11@get_mfd_da
?get_mfd_damage@@YGHW4VIPER_MFD_LOCATIONS@@@Z ENDP	; get_mfd_damage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_mfd_mode$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z PROC ; get_default_mfd_mode, COMDAT

; 10084: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10085: 	viper_mfd_modes
; 10086: 		mfd_mode;
; 10087: 
; 10088: 	ASSERT (viper_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_defaul
  0000f	83 7d 08 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00013	7c 18		 jl	 SHORT $LN4@get_defaul
$LN5@get_defaul:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_defaul:

; 10089: 
; 10090: 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 05	 cmp	 DWORD PTR tv70[ebp], 5
  00037	77 3e		 ja	 SHORT $LN2@get_defaul
  00039	8b 4d b8	 mov	 ecx, DWORD PTR tv70[ebp]
  0003c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN13@get_defaul[ecx*4]
$LN6@get_defaul:

; 10091: 	{
; 10092: 		////////////////////////////////////////
; 10093: 		case VIPER_MFD_LOCATION_PILOT_LHS:
; 10094: 		////////////////////////////////////////
; 10095: 		{
; 10096: 			mfd_mode = VIPER_MFD_MODE_ENGINE;

  00043	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 8

; 10097: 
; 10098: 			break;

  0004a	eb 2b		 jmp	 SHORT $LN2@get_defaul
$LN7@get_defaul:

; 10099: 		}
; 10100: 		////////////////////////////////////////
; 10101: 		case VIPER_MFD_LOCATION_PILOT_RHS:
; 10102: 		////////////////////////////////////////
; 10103: 		{
; 10104: 			mfd_mode = VIPER_MFD_MODE_TSD;

  0004c	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 4

; 10105: 
; 10106: 			break;

  00053	eb 22		 jmp	 SHORT $LN2@get_defaul
$LN8@get_defaul:

; 10107: 		}
; 10108: 		////////////////////////////////////////
; 10109: 		case VIPER_MFD_LOCATION_CO_PILOT_LHS:
; 10110: 		////////////////////////////////////////
; 10111: 		{
; 10112: 			mfd_mode = VIPER_MFD_MODE_ENGINE;

  00055	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 8

; 10113: 
; 10114: 			break;

  0005c	eb 19		 jmp	 SHORT $LN2@get_defaul
$LN9@get_defaul:

; 10115: 		}
; 10116: 		////////////////////////////////////////
; 10117: 		case VIPER_MFD_LOCATION_CO_PILOT_RHS:
; 10118: 		////////////////////////////////////////
; 10119: 		{
; 10120: 			mfd_mode = VIPER_MFD_MODE_TSD;

  0005e	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 4

; 10121: 
; 10122: 			break;

  00065	eb 10		 jmp	 SHORT $LN2@get_defaul
$LN10@get_defaul:

; 10123: 		}
; 10124: 		////////////////////////////////////////
; 10125: 		case VIPER_MFD_LOCATION_PILOT_DFD:
; 10126: 		////////////////////////////////////////
; 10127: 		{
; 10128: 			mfd_mode = VIPER_MFD_MODE_FLIGHT;

  00067	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 9

; 10129: 
; 10130: 			break;

  0006e	eb 07		 jmp	 SHORT $LN2@get_defaul
$LN11@get_defaul:

; 10131: 		}
; 10132: 		////////////////////////////////////////
; 10133: 		case VIPER_MFD_LOCATION_CO_PILOT_DFD:
; 10134: 		////////////////////////////////////////
; 10135: 		{
; 10136: 			mfd_mode = VIPER_MFD_MODE_MISSION;

  00070	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 10 ; 0000000aH
$LN2@get_defaul:

; 10137: 
; 10138: 			break;
; 10139: 		}
; 10140: 	}
; 10141: 
; 10142: 	return (mfd_mode);

  00077	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 10143: }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
  00083	90		 npad	 1
$LN13@get_defaul:
  00084	00 00 00 00	 DD	 $LN6@get_defaul
  00088	00 00 00 00	 DD	 $LN7@get_defaul
  0008c	00 00 00 00	 DD	 $LN8@get_defaul
  00090	00 00 00 00	 DD	 $LN9@get_defaul
  00094	00 00 00 00	 DD	 $LN10@get_defaul
  00098	00 00 00 00	 DD	 $LN11@get_defaul
?get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ENDP ; get_default_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv140 = -356						; size = 4
tv90 = -356						; size = 4
_width$1 = -288						; size = 4
_specular$2 = -284					; size = 4
_colour$3 = -280					; size = 4
_quad$4 = -276						; size = 256
_store_background_colour$5 = -20			; size = 4
_store_road_colour$6 = -16				; size = 4
_store_river_colour$7 = -12				; size = 4
_store_contour_colour$8 = -8				; size = 4
_border_size$ = -4					; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z PROC ; draw_overlaid_mfd, COMDAT

; 9352 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9353 : 	float
; 9354 : 		border_size;
; 9355 : 
; 9356 : 	ASSERT (mfd_screen);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@draw_overl
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_overl:

; 9357 : 
; 9358 : 	ASSERT (viper_mfd_mode_valid (mode));

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0002e	7c 06		 jl	 SHORT $LN8@draw_overl
  00030	83 7d 0c 0b	 cmp	 DWORD PTR _mode$[ebp], 11 ; 0000000bH
  00034	7c 18		 jl	 SHORT $LN7@draw_overl
$LN8@draw_overl:
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  0003b	83 c0 06	 add	 eax, 6
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OOGHOFNN@viper_mfd_mode_valid?5?$CImode?$CJ@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_overl:

; 9359 : 
; 9360 : 	ASSERT (viper_mfd_location_valid (location));

  0004e	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00052	7c 06		 jl	 SHORT $LN10@draw_overl
  00054	83 7d 10 06	 cmp	 DWORD PTR _location$[ebp], 6
  00058	7c 18		 jl	 SHORT $LN9@draw_overl
$LN10@draw_overl:
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  0005f	83 c0 08	 add	 eax, 8
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LNFLDDNP@viper_mfd_location_valid?5?$CIlocat@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@draw_overl:

; 9361 : 
; 9362 : 	if (mode == VIPER_MFD_MODE_OFF)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00076	75 05		 jne	 SHORT $LN11@draw_overl

; 9363 : 	{
; 9364 : 		return;

  00078	e9 79 10 00 00	 jmp	 $LN1@draw_overl
$LN11@draw_overl:

; 9365 : 	}
; 9366 : 
; 9367 : 	////////////////////////////////////////
; 9368 : 	//
; 9369 : 	// scale position and size wrt screen resolution
; 9370 : 	//
; 9371 : 	////////////////////////////////////////
; 9372 : 
; 9373 : 	border_size = 4.0 * full_screen_width * (1.0 / 640.0);

  0007d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00085	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  0008d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5999999999999a
  00095	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00099	f3 0f 11 45 fc	 movss	 DWORD PTR _border_size$[ebp], xmm0

; 9374 : 
; 9375 : 	if (get_global_unscaled_displays ())

  0009e	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  000a5	74 12		 je	 SHORT $LN12@draw_overl

; 9376 : 	{
; 9377 : 		mfd_screen_width = mfd_viewport_size;

  000a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  000af	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 9378 : 	}
; 9379 : 	else

  000b7	eb 1c		 jmp	 SHORT $LN13@draw_overl
$LN12@draw_overl:

; 9380 : 	{
; 9381 : 		mfd_screen_width = full_screen_width * (128.0 / 640.0);

  000b9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  000c1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  000c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000cd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0
$LN13@draw_overl:

; 9382 : 	}
; 9383 : 
; 9384 : 	mfd_screen_height = mfd_screen_width;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  000dd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 9385 : 
; 9386 : 	switch (location)

  000e5	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  000e8	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  000ee	83 bd 9c fe ff
	ff 03		 cmp	 DWORD PTR tv90[ebp], 3
  000f5	77 73		 ja	 SHORT $LN2@draw_overl
  000f7	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  000fd	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@draw_overl[ecx*4]
$LN14@draw_overl:

; 9387 : 	{
; 9388 : 		////////////////////////////////////////
; 9389 : 		case VIPER_MFD_LOCATION_PILOT_LHS:
; 9390 : 		case VIPER_MFD_LOCATION_CO_PILOT_LHS:
; 9391 : 		////////////////////////////////////////
; 9392 : 		{
; 9393 : 			mfd_screen_x_min = border_size;

  00104	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _border_size$[ebp]
  00109	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 9394 : 			mfd_screen_y_min = full_screen_height - border_size - mfd_screen_height;

  00111	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00119	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0011e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00126	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 9395 : 
; 9396 : 			break;

  0012e	eb 3a		 jmp	 SHORT $LN2@draw_overl
$LN15@draw_overl:

; 9397 : 		}
; 9398 : 		////////////////////////////////////////
; 9399 : 		case VIPER_MFD_LOCATION_PILOT_RHS:
; 9400 : 		case VIPER_MFD_LOCATION_CO_PILOT_RHS:
; 9401 : 		////////////////////////////////////////
; 9402 : 		{
; 9403 : 			mfd_screen_x_min = full_screen_width - border_size - mfd_screen_width;

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_width@@3MA
  00138	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0013d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  00145	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 9404 : 			mfd_screen_y_min = full_screen_height - border_size - mfd_screen_height;

  0014d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00155	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0015a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00162	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0
$LN2@draw_overl:

; 9405 : 
; 9406 : 			break;
; 9407 : 		}
; 9408 : 	}
; 9409 : 
; 9410 : 	mfd_screen_x_max = mfd_screen_x_min + mfd_screen_width - 0.0001;

  0016a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00172	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  0017a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0017e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  00186	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 9411 : 	mfd_screen_y_max = mfd_screen_y_min + mfd_screen_height - 0.0001;

  00192	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0019a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  001a2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001a6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  001ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 9412 : 
; 9413 : 	mfd_screen_x_scale = mfd_viewport_size / mfd_screen_width;

  001ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001c2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  001ca	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 9414 : 	mfd_screen_y_scale = mfd_viewport_size / mfd_screen_height;

  001d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001da	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  001e2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 9415 : 
; 9416 : 	////////////////////////////////////////
; 9417 : 	//
; 9418 : 	// draw MFD display
; 9419 : 	//
; 9420 : 	////////////////////////////////////////
; 9421 : 
; 9422 : 	switch (mode)

  001ea	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  001ed	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv140[ebp], eax
  001f3	83 bd 9c fe ff
	ff 0a		 cmp	 DWORD PTR tv140[ebp], 10 ; 0000000aH
  001fa	0f 87 f2 0a 00
	00		 ja	 $LN42@draw_overl
  00200	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv140[ebp]
  00206	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN51@draw_overl[ecx*4]
$LN16@draw_overl:

; 9423 : 	{
; 9424 : 		////////////////////////////////////////
; 9425 : 		case VIPER_MFD_MODE_OFF:
; 9426 : 		////////////////////////////////////////
; 9427 : 		{
; 9428 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0020d	51		 push	 ecx
  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00224	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00229	51		 push	 ecx
  0022a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	51		 push	 ecx
  00238	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00240	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00245	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0024a	50		 push	 eax
  0024b	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9429 : 
; 9430 : 			set_active_screen (mfd_screen);

  00250	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9431 : 
; 9432 : 			if (lock_screen (mfd_screen))

  00259	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0025c	50		 push	 eax
  0025d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00262	85 c0		 test	 eax, eax
  00264	74 3a		 je	 SHORT $LN17@draw_overl

; 9433 : 			{
; 9434 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00266	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0026b	50		 push	 eax
  0026c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00272	83 e9 01	 sub	 ecx, 1
  00275	51		 push	 ecx
  00276	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0027c	83 ea 01	 sub	 edx, 1
  0027f	52		 push	 edx
  00280	6a 00		 push	 0
  00282	6a 00		 push	 0
  00284	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9435 : 
; 9436 : 				draw_layout_grid ();

  00289	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9437 : 
; 9438 : 				flush_screen_texture_graphics (mfd_screen);

  0028e	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00291	50		 push	 eax
  00292	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9439 : 
; 9440 : 				unlock_screen (mfd_screen);

  00297	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0029a	50		 push	 eax
  0029b	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN17@draw_overl:

; 9441 : 			}
; 9442 : 
; 9443 : 			break;

  002a0	e9 5e 0a 00 00	 jmp	 $LN4@draw_overl
$LN18@draw_overl:

; 9444 : 		}
; 9445 : 		////////////////////////////////////////
; 9446 : 		case VIPER_MFD_MODE_DAMAGED:
; 9447 : 		////////////////////////////////////////
; 9448 : 		{
; 9449 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  002a5	51		 push	 ecx
  002a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  002ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b3	51		 push	 ecx
  002b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  002bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c1	51		 push	 ecx
  002c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  002ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cf	51		 push	 ecx
  002d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  002d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002dd	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9450 : 
; 9451 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  002e2	51		 push	 ecx
  002e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  002eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f0	51		 push	 ecx
  002f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  002f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fe	51		 push	 ecx
  002ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00307	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030c	51		 push	 ecx
  0030d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00315	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9452 : 
; 9453 : 			set_active_screen (mfd_screen);

  00325	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00328	50		 push	 eax
  00329	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9454 : 
; 9455 : 			if (lock_screen (mfd_screen))

  0032e	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00337	85 c0		 test	 eax, eax
  00339	74 3f		 je	 SHORT $LN19@draw_overl

; 9456 : 			{
; 9457 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  0033b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00340	50		 push	 eax
  00341	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00347	83 e9 01	 sub	 ecx, 1
  0034a	51		 push	 ecx
  0034b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00351	83 ea 01	 sub	 edx, 1
  00354	52		 push	 edx
  00355	6a 00		 push	 0
  00357	6a 00		 push	 0
  00359	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9458 : 
; 9459 : 				draw_layout_grid ();

  0035e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9460 : 
; 9461 : 				draw_damaged_mfd ();

  00363	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 9462 : 
; 9463 : 				flush_screen_texture_graphics (mfd_screen);

  00368	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0036b	50		 push	 eax
  0036c	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9464 : 
; 9465 : 				unlock_screen (mfd_screen);

  00371	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN19@draw_overl:

; 9466 : 			}
; 9467 : 
; 9468 : 			break;

  0037a	e9 84 09 00 00	 jmp	 $LN4@draw_overl
$LN20@draw_overl:

; 9469 : 		}
; 9470 : 		////////////////////////////////////////
; 9471 : 		case VIPER_MFD_MODE_FLIR:
; 9472 : 		////////////////////////////////////////
; 9473 : 		{
; 9474 : 			if (!viper_damage.flir)

  0037f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00384	83 e0 01	 and	 eax, 1
  00387	75 0e		 jne	 SHORT $LN21@draw_overl

; 9475 : 			{
; 9476 : 				draw_full_screen_3d_eo_display (&viper_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00389	6a 03		 push	 3
  0038b	68 00 00 00 00	 push	 OFFSET ?viper_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; viper_flir
  00390	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 9477 : 			}
; 9478 : 			else

  00395	eb 3d		 jmp	 SHORT $LN22@draw_overl
$LN21@draw_overl:

; 9479 : 			{
; 9480 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00397	51		 push	 ecx
  00398	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	51		 push	 ecx
  003a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  003ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b3	51		 push	 ecx
  003b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	51		 push	 ecx
  003c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  003ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cf	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN22@draw_overl:

; 9481 : 			}
; 9482 : 
; 9483 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  003d4	51		 push	 ecx
  003d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  003dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e2	51		 push	 ecx
  003e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f0	51		 push	 ecx
  003f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fe	51		 push	 ecx
  003ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00411	50		 push	 eax
  00412	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9484 : 
; 9485 : 			set_active_screen (mfd_screen);

  00417	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0041a	50		 push	 eax
  0041b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9486 : 
; 9487 : 			if (lock_screen (mfd_screen))

  00420	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00423	50		 push	 eax
  00424	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00429	85 c0		 test	 eax, eax
  0042b	74 41		 je	 SHORT $LN23@draw_overl

; 9488 : 			{
; 9489 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  0042d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00432	50		 push	 eax
  00433	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00439	83 e9 01	 sub	 ecx, 1
  0043c	51		 push	 ecx
  0043d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00443	83 ea 01	 sub	 edx, 1
  00446	52		 push	 edx
  00447	6a 00		 push	 0
  00449	6a 00		 push	 0
  0044b	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9490 : 
; 9491 : 				draw_layout_grid ();

  00450	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9492 : 
; 9493 : 				draw_2d_flir_mfd (TRUE);

  00455	6a 01		 push	 1
  00457	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 9494 : 
; 9495 : 				flush_screen_texture_graphics (mfd_screen);

  0045c	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0045f	50		 push	 eax
  00460	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9496 : 
; 9497 : 				unlock_screen (mfd_screen);

  00465	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00468	50		 push	 eax
  00469	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_overl:

; 9498 : 			}
; 9499 : 
; 9500 : 			set_pilots_full_screen_params (FALSE);

  0046e	6a 00		 push	 0
  00470	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9501 : 
; 9502 : 			break;

  00475	e9 89 08 00 00	 jmp	 $LN4@draw_overl
$LN24@draw_overl:

; 9503 : 		}
; 9504 : 		////////////////////////////////////////
; 9505 : 		case VIPER_MFD_MODE_DTV:
; 9506 : 		////////////////////////////////////////
; 9507 : 		{
; 9508 : 			if (!viper_damage.dtv)

  0047a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0047f	d1 e8		 shr	 eax, 1
  00481	83 e0 01	 and	 eax, 1
  00484	75 0e		 jne	 SHORT $LN25@draw_overl

; 9509 : 			{
; 9510 : 				draw_full_screen_3d_eo_display (&viper_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  00486	6a 04		 push	 4
  00488	68 00 00 00 00	 push	 OFFSET ?viper_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; viper_dtv
  0048d	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 9511 : 			}
; 9512 : 			else

  00492	eb 3d		 jmp	 SHORT $LN26@draw_overl
$LN25@draw_overl:

; 9513 : 			{
; 9514 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00494	51		 push	 ecx
  00495	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0049d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a2	51		 push	 ecx
  004a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  004ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b0	51		 push	 ecx
  004b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  004b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004be	51		 push	 ecx
  004bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  004c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cc	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN26@draw_overl:

; 9515 : 			}
; 9516 : 
; 9517 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  004d1	51		 push	 ecx
  004d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  004da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004df	51		 push	 ecx
  004e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  004e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ed	51		 push	 ecx
  004ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0050e	50		 push	 eax
  0050f	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9518 : 
; 9519 : 			set_active_screen (mfd_screen);

  00514	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00517	50		 push	 eax
  00518	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9520 : 
; 9521 : 			if (lock_screen (mfd_screen))

  0051d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00520	50		 push	 eax
  00521	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00526	85 c0		 test	 eax, eax
  00528	74 41		 je	 SHORT $LN27@draw_overl

; 9522 : 			{
; 9523 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  0052a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0052f	50		 push	 eax
  00530	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00536	83 e9 01	 sub	 ecx, 1
  00539	51		 push	 ecx
  0053a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00540	83 ea 01	 sub	 edx, 1
  00543	52		 push	 edx
  00544	6a 00		 push	 0
  00546	6a 00		 push	 0
  00548	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9524 : 
; 9525 : 				draw_layout_grid ();

  0054d	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9526 : 
; 9527 : 				draw_2d_dtv_mfd (TRUE);

  00552	6a 01		 push	 1
  00554	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd

; 9528 : 
; 9529 : 				flush_screen_texture_graphics (mfd_screen);

  00559	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0055c	50		 push	 eax
  0055d	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9530 : 
; 9531 : 				unlock_screen (mfd_screen);

  00562	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00565	50		 push	 eax
  00566	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN27@draw_overl:

; 9532 : 			}
; 9533 : 
; 9534 : 			set_pilots_full_screen_params (FALSE);

  0056b	6a 00		 push	 0
  0056d	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9535 : 
; 9536 : 			break;

  00572	e9 8c 07 00 00	 jmp	 $LN4@draw_overl
$LN28@draw_overl:

; 9537 : 		}
; 9538 : 		////////////////////////////////////////
; 9539 : 		case VIPER_MFD_MODE_TSD:
; 9540 : 		////////////////////////////////////////
; 9541 : 		{
; 9542 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00577	51		 push	 ecx
  00578	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00580	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00585	51		 push	 ecx
  00586	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0058e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00593	51		 push	 ecx
  00594	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0059c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a1	51		 push	 ecx
  005a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  005aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005af	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9543 : 
; 9544 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005b4	51		 push	 ecx
  005b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c2	51		 push	 ecx
  005c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d0	51		 push	 ecx
  005d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  005d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005de	51		 push	 ecx
  005df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005f1	50		 push	 eax
  005f2	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9545 : 
; 9546 : 			set_active_screen (mfd_screen);

  005f7	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  005fa	50		 push	 eax
  005fb	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9547 : 
; 9548 : 			if (lock_screen (mfd_screen))

  00600	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00603	50		 push	 eax
  00604	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00609	85 c0		 test	 eax, eax
  0060b	0f 84 5d 01 00
	00		 je	 $LN29@draw_overl

; 9549 : 			{
; 9550 : 				rgb_colour
; 9551 : 					store_contour_colour,
; 9552 : 					store_river_colour,
; 9553 : 					store_road_colour;
; 9554 : 
; 9555 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00611	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00616	50		 push	 eax
  00617	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0061d	83 e9 01	 sub	 ecx, 1
  00620	51		 push	 ecx
  00621	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00627	83 ea 01	 sub	 edx, 1
  0062a	52		 push	 edx
  0062b	6a 00		 push	 0
  0062d	6a 00		 push	 0
  0062f	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9556 : 
; 9557 : 				draw_layout_grid ();

  00634	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9558 : 
; 9559 : 				store_contour_colour	= MFD_CONTOUR_COLOUR;

  00639	b8 04 00 00 00	 mov	 eax, 4
  0063e	6b c8 06	 imul	 ecx, eax, 6
  00641	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00647	89 55 f8	 mov	 DWORD PTR _store_contour_colour$8[ebp], edx

; 9560 : 				store_river_colour	= MFD_RIVER_COLOUR;

  0064a	b8 04 00 00 00	 mov	 eax, 4
  0064f	6b c8 07	 imul	 ecx, eax, 7
  00652	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00658	89 55 f4	 mov	 DWORD PTR _store_river_colour$7[ebp], edx

; 9561 : 				store_road_colour		= MFD_ROAD_COLOUR;

  0065b	b8 04 00 00 00	 mov	 eax, 4
  00660	c1 e0 03	 shl	 eax, 3
  00663	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00669	89 4d f0	 mov	 DWORD PTR _store_road_colour$6[ebp], ecx

; 9562 : 
; 9563 : 				set_rgb_colour (MFD_CONTOUR_COLOUR,   0, 151,   0, 255);

  0066c	b8 04 00 00 00	 mov	 eax, 4
  00671	6b c8 06	 imul	 ecx, eax, 6
  00674	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0067b	b8 04 00 00 00	 mov	 eax, 4
  00680	6b c8 06	 imul	 ecx, eax, 6
  00683	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  0068a	b8 04 00 00 00	 mov	 eax, 4
  0068f	6b c8 06	 imul	 ecx, eax, 6
  00692	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00699	b8 04 00 00 00	 mov	 eax, 4
  0069e	6b c8 06	 imul	 ecx, eax, 6
  006a1	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 9564 : 				set_rgb_colour (MFD_RIVER_COLOUR,     0, 176,   0, 255);

  006a8	b8 04 00 00 00	 mov	 eax, 4
  006ad	6b c8 07	 imul	 ecx, eax, 7
  006b0	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  006b7	b8 04 00 00 00	 mov	 eax, 4
  006bc	6b c8 07	 imul	 ecx, eax, 7
  006bf	c6 81 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 176 ; 000000b0H
  006c6	b8 04 00 00 00	 mov	 eax, 4
  006cb	6b c8 07	 imul	 ecx, eax, 7
  006ce	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006d5	b8 04 00 00 00	 mov	 eax, 4
  006da	6b c8 07	 imul	 ecx, eax, 7
  006dd	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 9565 : 				set_rgb_colour (MFD_ROAD_COLOUR,      0, 200,   0, 255);

  006e4	b8 04 00 00 00	 mov	 eax, 4
  006e9	c1 e0 03	 shl	 eax, 3
  006ec	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  006f3	b8 04 00 00 00	 mov	 eax, 4
  006f8	c1 e0 03	 shl	 eax, 3
  006fb	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  00702	b8 04 00 00 00	 mov	 eax, 4
  00707	c1 e0 03	 shl	 eax, 3
  0070a	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00711	b8 04 00 00 00	 mov	 eax, 4
  00716	c1 e0 03	 shl	 eax, 3
  00719	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 9566 : 
; 9567 : 				draw_tactical_situation_display_mfd (location);

  00720	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00723	50		 push	 eax
  00724	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ; draw_tactical_situation_display_mfd

; 9568 : 
; 9569 : 				MFD_CONTOUR_COLOUR	= store_contour_colour;

  00729	b8 04 00 00 00	 mov	 eax, 4
  0072e	6b c8 06	 imul	 ecx, eax, 6
  00731	8b 55 f8	 mov	 edx, DWORD PTR _store_contour_colour$8[ebp]
  00734	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 9570 : 				MFD_RIVER_COLOUR		= store_river_colour;

  0073a	b8 04 00 00 00	 mov	 eax, 4
  0073f	6b c8 07	 imul	 ecx, eax, 7
  00742	8b 55 f4	 mov	 edx, DWORD PTR _store_river_colour$7[ebp]
  00745	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 9571 : 				MFD_ROAD_COLOUR		= store_road_colour;

  0074b	b8 04 00 00 00	 mov	 eax, 4
  00750	c1 e0 03	 shl	 eax, 3
  00753	8b 4d f0	 mov	 ecx, DWORD PTR _store_road_colour$6[ebp]
  00756	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 9572 : 
; 9573 : 				flush_screen_texture_graphics (mfd_screen);

  0075c	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0075f	50		 push	 eax
  00760	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9574 : 
; 9575 : 				unlock_screen (mfd_screen);

  00765	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00768	50		 push	 eax
  00769	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN29@draw_overl:

; 9576 : 			}
; 9577 : 
; 9578 : 			break;

  0076e	e9 90 05 00 00	 jmp	 $LN4@draw_overl
$LN30@draw_overl:

; 9579 : 		}
; 9580 : 		////////////////////////////////////////
; 9581 : 		case VIPER_MFD_MODE_ASE:
; 9582 : 		////////////////////////////////////////
; 9583 : 		{
; 9584 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00773	51		 push	 ecx
  00774	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0077c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00781	51		 push	 ecx
  00782	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0078a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078f	51		 push	 ecx
  00790	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00798	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079d	51		 push	 ecx
  0079e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  007a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ab	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9585 : 
; 9586 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  007b0	51		 push	 ecx
  007b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  007b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007be	51		 push	 ecx
  007bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  007c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cc	51		 push	 ecx
  007cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  007d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007da	51		 push	 ecx
  007db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  007e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007ed	50		 push	 eax
  007ee	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9587 : 
; 9588 : 			set_active_screen (mfd_screen);

  007f3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  007f6	50		 push	 eax
  007f7	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9589 : 
; 9590 : 			if (lock_screen (mfd_screen))

  007fc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  007ff	50		 push	 eax
  00800	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00805	85 c0		 test	 eax, eax
  00807	74 43		 je	 SHORT $LN31@draw_overl

; 9591 : 			{
; 9592 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00809	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0080e	50		 push	 eax
  0080f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00815	83 e9 01	 sub	 ecx, 1
  00818	51		 push	 ecx
  00819	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0081f	83 ea 01	 sub	 edx, 1
  00822	52		 push	 edx
  00823	6a 00		 push	 0
  00825	6a 00		 push	 0
  00827	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9593 : 
; 9594 : 				draw_layout_grid ();

  0082c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9595 : 
; 9596 : 				draw_aircraft_survivability_equipment_display_mfd (location);

  00831	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00834	50		 push	 eax
  00835	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ; draw_aircraft_survivability_equipment_display_mfd

; 9597 : 
; 9598 : 				flush_screen_texture_graphics (mfd_screen);

  0083a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0083d	50		 push	 eax
  0083e	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9599 : 
; 9600 : 				unlock_screen (mfd_screen);

  00843	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00846	50		 push	 eax
  00847	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN31@draw_overl:

; 9601 : 			}
; 9602 : 
; 9603 : 			break;

  0084c	e9 b2 04 00 00	 jmp	 $LN4@draw_overl
$LN32@draw_overl:

; 9604 : 		}
; 9605 : 		////////////////////////////////////////
; 9606 : 		case VIPER_MFD_MODE_WEAPON:
; 9607 : 		////////////////////////////////////////
; 9608 : 		{
; 9609 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00851	51		 push	 ecx
  00852	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0085a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085f	51		 push	 ecx
  00860	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00868	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086d	51		 push	 ecx
  0086e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00876	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087b	51		 push	 ecx
  0087c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00884	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00889	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9610 : 
; 9611 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0088e	51		 push	 ecx
  0088f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00897	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089c	51		 push	 ecx
  0089d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  008a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008aa	51		 push	 ecx
  008ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  008b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b8	51		 push	 ecx
  008b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  008c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008cb	50		 push	 eax
  008cc	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9612 : 
; 9613 : 			set_active_screen (mfd_screen);

  008d1	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  008d4	50		 push	 eax
  008d5	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9614 : 
; 9615 : 			if (lock_screen (mfd_screen))

  008da	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  008dd	50		 push	 eax
  008de	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  008e3	85 c0		 test	 eax, eax
  008e5	74 3f		 je	 SHORT $LN33@draw_overl

; 9616 : 			{
; 9617 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  008e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008ec	50		 push	 eax
  008ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  008f3	83 e9 01	 sub	 ecx, 1
  008f6	51		 push	 ecx
  008f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  008fd	83 ea 01	 sub	 edx, 1
  00900	52		 push	 edx
  00901	6a 00		 push	 0
  00903	6a 00		 push	 0
  00905	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9618 : 
; 9619 : 				draw_layout_grid ();

  0090a	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9620 : 
; 9621 : 				draw_weapon_display_mfd ();

  0090f	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXXZ ; draw_weapon_display_mfd

; 9622 : 
; 9623 : 				flush_screen_texture_graphics (mfd_screen);

  00914	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00917	50		 push	 eax
  00918	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9624 : 
; 9625 : 				unlock_screen (mfd_screen);

  0091d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00920	50		 push	 eax
  00921	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN33@draw_overl:

; 9626 : 			}
; 9627 : 
; 9628 : 			break;

  00926	e9 d8 03 00 00	 jmp	 $LN4@draw_overl
$LN34@draw_overl:

; 9629 : 		}
; 9630 : 		////////////////////////////////////////
; 9631 : 		case VIPER_MFD_MODE_SYSTEM:
; 9632 : 		////////////////////////////////////////
; 9633 : 		{
; 9634 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0092b	51		 push	 ecx
  0092c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00934	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00939	51		 push	 ecx
  0093a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00942	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00947	51		 push	 ecx
  00948	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00950	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00955	51		 push	 ecx
  00956	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0095e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00963	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9635 : 
; 9636 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00968	51		 push	 ecx
  00969	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00971	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00976	51		 push	 ecx
  00977	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0097f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00984	51		 push	 ecx
  00985	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0098d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00992	51		 push	 ecx
  00993	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0099b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009a5	50		 push	 eax
  009a6	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9637 : 
; 9638 : 			set_active_screen (mfd_screen);

  009ab	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009ae	50		 push	 eax
  009af	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9639 : 
; 9640 : 			if (lock_screen (mfd_screen))

  009b4	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009b7	50		 push	 eax
  009b8	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  009bd	85 c0		 test	 eax, eax
  009bf	74 3f		 je	 SHORT $LN35@draw_overl

; 9641 : 			{
; 9642 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  009c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  009c6	50		 push	 eax
  009c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  009cd	83 e9 01	 sub	 ecx, 1
  009d0	51		 push	 ecx
  009d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  009d7	83 ea 01	 sub	 edx, 1
  009da	52		 push	 edx
  009db	6a 00		 push	 0
  009dd	6a 00		 push	 0
  009df	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9643 : 
; 9644 : 				draw_layout_grid ();

  009e4	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9645 : 
; 9646 : 				draw_system_display_mfd ();

  009e9	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 9647 : 
; 9648 : 				flush_screen_texture_graphics (mfd_screen);

  009ee	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009f1	50		 push	 eax
  009f2	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9649 : 
; 9650 : 				unlock_screen (mfd_screen);

  009f7	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009fa	50		 push	 eax
  009fb	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_overl:

; 9651 : 			}
; 9652 : 
; 9653 : 			break;

  00a00	e9 fe 02 00 00	 jmp	 $LN4@draw_overl
$LN36@draw_overl:

; 9654 : 		}
; 9655 : 		////////////////////////////////////////
; 9656 : 		case VIPER_MFD_MODE_ENGINE:
; 9657 : 		////////////////////////////////////////
; 9658 : 		{
; 9659 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00a05	51		 push	 ecx
  00a06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00a0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a13	51		 push	 ecx
  00a14	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00a1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a21	51		 push	 ecx
  00a22	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00a2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2f	51		 push	 ecx
  00a30	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00a38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3d	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9660 : 
; 9661 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00a42	51		 push	 ecx
  00a43	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00a4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a50	51		 push	 ecx
  00a51	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00a59	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5e	51		 push	 ecx
  00a5f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00a67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6c	51		 push	 ecx
  00a6d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00a75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a7f	50		 push	 eax
  00a80	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9662 : 
; 9663 : 			set_active_screen (mfd_screen);

  00a85	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a88	50		 push	 eax
  00a89	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9664 : 
; 9665 : 			if (lock_screen (mfd_screen))

  00a8e	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a91	50		 push	 eax
  00a92	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00a97	85 c0		 test	 eax, eax
  00a99	74 3f		 je	 SHORT $LN37@draw_overl

; 9666 : 			{
; 9667 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00a9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00aa0	50		 push	 eax
  00aa1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00aa7	83 e9 01	 sub	 ecx, 1
  00aaa	51		 push	 ecx
  00aab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00ab1	83 ea 01	 sub	 edx, 1
  00ab4	52		 push	 edx
  00ab5	6a 00		 push	 0
  00ab7	6a 00		 push	 0
  00ab9	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9668 : 
; 9669 : 				draw_layout_grid ();

  00abe	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9670 : 
; 9671 : 				draw_engine_display_mfd ();

  00ac3	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 9672 : 
; 9673 : 				flush_screen_texture_graphics (mfd_screen);

  00ac8	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00acb	50		 push	 eax
  00acc	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9674 : 
; 9675 : 				unlock_screen (mfd_screen);

  00ad1	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ad4	50		 push	 eax
  00ad5	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_overl:

; 9676 : 			}
; 9677 : 
; 9678 : 			break;

  00ada	e9 24 02 00 00	 jmp	 $LN4@draw_overl
$LN38@draw_overl:

; 9679 : 		}
; 9680 : 		////////////////////////////////////////
; 9681 : 		case VIPER_MFD_MODE_FLIGHT:
; 9682 : 		////////////////////////////////////////
; 9683 : 		{
; 9684 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00adf	51		 push	 ecx
  00ae0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00ae8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aed	51		 push	 ecx
  00aee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00af6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00afb	51		 push	 ecx
  00afc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00b04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b09	51		 push	 ecx
  00b0a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00b12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b17	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9685 : 
; 9686 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00b1c	51		 push	 ecx
  00b1d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00b25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2a	51		 push	 ecx
  00b2b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00b33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b38	51		 push	 ecx
  00b39	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00b41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b46	51		 push	 ecx
  00b47	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00b4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b54	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b59	50		 push	 eax
  00b5a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9687 : 
; 9688 : 			set_active_screen (mfd_screen);

  00b5f	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b62	50		 push	 eax
  00b63	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9689 : 
; 9690 : 			if (lock_screen (mfd_screen))

  00b68	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b6b	50		 push	 eax
  00b6c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00b71	85 c0		 test	 eax, eax
  00b73	0f 84 9d 00 00
	00		 je	 $LN39@draw_overl

; 9691 : 			{
; 9692 : 				rgb_colour
; 9693 : 					store_background_colour;
; 9694 : 
; 9695 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00b79	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00b7e	50		 push	 eax
  00b7f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00b85	83 e9 01	 sub	 ecx, 1
  00b88	51		 push	 ecx
  00b89	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00b8f	83 ea 01	 sub	 edx, 1
  00b92	52		 push	 edx
  00b93	6a 00		 push	 0
  00b95	6a 00		 push	 0
  00b97	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9696 : 
; 9697 : 				draw_layout_grid ();

  00b9c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9698 : 
; 9699 : 				store_background_colour = MFD_BACKGROUND_COLOUR;

  00ba1	b8 04 00 00 00	 mov	 eax, 4
  00ba6	6b c8 09	 imul	 ecx, eax, 9
  00ba9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00baf	89 55 ec	 mov	 DWORD PTR _store_background_colour$5[ebp], edx

; 9700 : 
; 9701 : 				set_rgb_colour (MFD_BACKGROUND_COLOUR, 255, 255, 255, 0);

  00bb2	b8 04 00 00 00	 mov	 eax, 4
  00bb7	6b c8 09	 imul	 ecx, eax, 9
  00bba	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00bc1	b8 04 00 00 00	 mov	 eax, 4
  00bc6	6b c8 09	 imul	 ecx, eax, 9
  00bc9	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00bd0	b8 04 00 00 00	 mov	 eax, 4
  00bd5	6b c8 09	 imul	 ecx, eax, 9
  00bd8	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00bdf	b8 04 00 00 00	 mov	 eax, 4
  00be4	6b c8 09	 imul	 ecx, eax, 9
  00be7	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 9702 : 
; 9703 : 				draw_flight_display_mfd ();

  00bee	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 9704 : 
; 9705 : 				MFD_BACKGROUND_COLOUR = store_background_colour;

  00bf3	b8 04 00 00 00	 mov	 eax, 4
  00bf8	6b c8 09	 imul	 ecx, eax, 9
  00bfb	8b 55 ec	 mov	 edx, DWORD PTR _store_background_colour$5[ebp]
  00bfe	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 9706 : 
; 9707 : 				flush_screen_texture_graphics (mfd_screen);

  00c04	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c07	50		 push	 eax
  00c08	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9708 : 
; 9709 : 				unlock_screen (mfd_screen);

  00c0d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c10	50		 push	 eax
  00c11	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN39@draw_overl:

; 9710 : 			}
; 9711 : 
; 9712 : 			break;

  00c16	e9 e8 00 00 00	 jmp	 $LN4@draw_overl
$LN40@draw_overl:

; 9713 : 		}
; 9714 : 		////////////////////////////////////////
; 9715 : 		case VIPER_MFD_MODE_MISSION:
; 9716 : 		////////////////////////////////////////
; 9717 : 		{
; 9718 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00c1b	51		 push	 ecx
  00c1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00c24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c29	51		 push	 ecx
  00c2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00c32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c37	51		 push	 ecx
  00c38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00c40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c45	51		 push	 ecx
  00c46	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00c4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c53	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9719 : 
; 9720 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00c58	51		 push	 ecx
  00c59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00c61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c66	51		 push	 ecx
  00c67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00c6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c74	51		 push	 ecx
  00c75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00c7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c82	51		 push	 ecx
  00c83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00c8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c90	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c95	50		 push	 eax
  00c96	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9721 : 
; 9722 : 			set_active_screen (mfd_screen);

  00c9b	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c9e	50		 push	 eax
  00c9f	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9723 : 
; 9724 : 			if (lock_screen (mfd_screen))

  00ca4	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ca7	50		 push	 eax
  00ca8	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00cad	85 c0		 test	 eax, eax
  00caf	74 3f		 je	 SHORT $LN41@draw_overl

; 9725 : 			{
; 9726 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00cb1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00cb6	50		 push	 eax
  00cb7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00cbd	83 e9 01	 sub	 ecx, 1
  00cc0	51		 push	 ecx
  00cc1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00cc7	83 ea 01	 sub	 edx, 1
  00cca	52		 push	 edx
  00ccb	6a 00		 push	 0
  00ccd	6a 00		 push	 0
  00ccf	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9727 : 
; 9728 : 				draw_layout_grid ();

  00cd4	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9729 : 
; 9730 : 				draw_mission_display_mfd ();

  00cd9	e8 00 00 00 00	 call	 ?draw_mission_display_mfd@@YGXXZ ; draw_mission_display_mfd

; 9731 : 
; 9732 : 				flush_screen_texture_graphics (mfd_screen);

  00cde	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ce1	50		 push	 eax
  00ce2	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9733 : 
; 9734 : 				unlock_screen (mfd_screen);

  00ce7	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00cea	50		 push	 eax
  00ceb	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN41@draw_overl:

; 9735 : 			}
; 9736 : 
; 9737 : 			break;

  00cf0	eb 11		 jmp	 SHORT $LN4@draw_overl
$LN42@draw_overl:

; 9738 : 		}
; 9739 : 		////////////////////////////////////////
; 9740 : 		default:
; 9741 : 		////////////////////////////////////////
; 9742 : 		{
; 9743 : 			debug_fatal ("Invalid main MFD mode = %d", mode);

  00cf2	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00cf5	50		 push	 eax
  00cf6	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
  00cfb	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00d00	83 c4 08	 add	 esp, 8
$LN4@draw_overl:

; 9744 : 
; 9745 : 			break;
; 9746 : 		}
; 9747 : 	}
; 9748 : 
; 9749 : 	set_active_screen (video_screen);

  00d03	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00d08	50		 push	 eax
  00d09	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9750 : 
; 9751 : 	////////////////////////////////////////
; 9752 : 	//
; 9753 : 	// render MFD to screen
; 9754 : 	//
; 9755 : 	////////////////////////////////////////
; 9756 : 	{
; 9757 : 		vertex
; 9758 : 			quad[4];
; 9759 : 
; 9760 : 		real_colour
; 9761 : 			colour,
; 9762 : 			specular;
; 9763 : 
; 9764 : 		set_3d_active_environment (main_3d_env);

  00d0e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00d13	50		 push	 eax
  00d14	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 9765 : 
; 9766 : 		if (begin_3d_scene ())

  00d19	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00d1e	85 c0		 test	 eax, eax
  00d20	0f 84 d0 03 00
	00		 je	 $LN43@draw_overl

; 9767 : 		{
; 9768 : 			set_d3d_transparency_on ();

  00d26	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 9769 : 
; 9770 : 			set_d3d_zbuffer_comparison (FALSE);

  00d2b	6a 00		 push	 0
  00d2d	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9771 : 
; 9772 : 			set_d3d_culling (FALSE);

  00d32	6a 00		 push	 0
  00d34	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9773 : 
; 9774 : 			set_d3d_texture_wrapping (0, FALSE);

  00d39	6a 00		 push	 0
  00d3b	6a 00		 push	 0
  00d3d	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 9775 : 
; 9776 : 			{
; 9777 : 				int
; 9778 : 					width;
; 9779 : 
; 9780 :    			if (application_video_width >= 1280)

  00d42	81 3d 00 00 00
	00 00 05 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 1280 ; application_video_width, 00000500H
  00d4c	7c 0c		 jl	 SHORT $LN44@draw_overl

; 9781 : 				{
; 9782 : 					width = 1280;

  00d4e	c7 85 e0 fe ff
	ff 00 05 00 00	 mov	 DWORD PTR _width$1[ebp], 1280 ; 00000500H

; 9783 : 				}
; 9784 : 				else

  00d58	eb 0a		 jmp	 SHORT $LN45@draw_overl
$LN44@draw_overl:

; 9785 : 				{
; 9786 : 					width = 640;

  00d5a	c7 85 e0 fe ff
	ff 80 02 00 00	 mov	 DWORD PTR _width$1[ebp], 640 ; 00000280H
$LN45@draw_overl:

; 9787 : 				}
; 9788 : 
; 9789 : 				if ((application_video_width == width) || (get_global_unscaled_displays ()))

  00d64	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  00d69	3b 85 e0 fe ff
	ff		 cmp	 eax, DWORD PTR _width$1[ebp]
  00d6f	74 09		 je	 SHORT $LN48@draw_overl
  00d71	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  00d78	74 17		 je	 SHORT $LN46@draw_overl
$LN48@draw_overl:

; 9790 : 				{
; 9791 : 					set_d3d_texture_mag_filtering (FALSE);

  00d7a	6a 00		 push	 0
  00d7c	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 9792 : 					set_d3d_texture_min_filtering (FALSE);

  00d81	6a 00		 push	 0
  00d83	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 9793 : 					set_d3d_texture_mip_filtering (FALSE);

  00d88	6a 00		 push	 0
  00d8a	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 9794 : 				}
; 9795 : 				else

  00d8f	eb 15		 jmp	 SHORT $LN47@draw_overl
$LN46@draw_overl:

; 9796 : 				{
; 9797 : 					set_d3d_texture_mag_filtering (TRUE);

  00d91	6a 01		 push	 1
  00d93	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 9798 : 					set_d3d_texture_min_filtering (TRUE);

  00d98	6a 01		 push	 1
  00d9a	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 9799 : 					set_d3d_texture_mip_filtering (FALSE);

  00d9f	6a 00		 push	 0
  00da1	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering
$LN47@draw_overl:

; 9800 : 				}
; 9801 : 			}
; 9802 : 
; 9803 : 			set_d3d_flat_shaded_textured_renderstate (mfd_screen);

  00da6	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00da9	50		 push	 eax
  00daa	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 9804 : 
; 9805 :       	////////////////////////////////////////
; 9806 :       	//
; 9807 : 
; 9808 : 			colour.red				= MFD_COLOUR1.r;

  00daf	b8 04 00 00 00	 mov	 eax, 4
  00db4	6b c8 00	 imul	 ecx, eax, 0
  00db7	8a 91 02 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2]
  00dbd	88 95 ea fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+2], dl

; 9809 : 			colour.green			= MFD_COLOUR1.g;

  00dc3	b8 04 00 00 00	 mov	 eax, 4
  00dc8	6b c8 00	 imul	 ecx, eax, 0
  00dcb	8a 91 01 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1]
  00dd1	88 95 e9 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+1], dl

; 9810 : 			colour.blue				= MFD_COLOUR1.b;

  00dd7	b8 04 00 00 00	 mov	 eax, 4
  00ddc	6b c8 00	 imul	 ecx, eax, 0
  00ddf	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00de5	88 95 e8 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp], dl

; 9811 : 			colour.alpha			= MFD_COLOUR1.a;

  00deb	b8 04 00 00 00	 mov	 eax, 4
  00df0	6b c8 00	 imul	 ecx, eax, 0
  00df3	8a 91 03 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3]
  00df9	88 95 eb fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+3], dl

; 9812 : 
; 9813 : 			specular.red			= 0;

  00dff	c6 85 e6 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+2], 0

; 9814 : 			specular.green			= 0;

  00e06	c6 85 e5 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+1], 0

; 9815 : 			specular.blue			= 0;

  00e0d	c6 85 e4 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp], 0

; 9816 : 			specular.alpha			= 255;

  00e14	c6 85 e7 fe ff
	ff ff		 mov	 BYTE PTR _specular$2[ebp+3], 255 ; 000000ffH

; 9817 : 
; 9818 : 			quad[0].i				= mfd_screen_x_min;

  00e1b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e20	6b c8 00	 imul	 ecx, eax, 0
  00e23	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00e2b	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+16], xmm0

; 9819 : 			quad[0].j	  			= mfd_screen_y_min;

  00e34	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e39	6b c8 00	 imul	 ecx, eax, 0
  00e3c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00e44	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+20], xmm0

; 9820 : 			quad[0].z	  			= 0.5;

  00e4d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e52	6b c8 00	 imul	 ecx, eax, 0
  00e55	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e5d	f3 0f 11 84 0d
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+8], xmm0

; 9821 : 			quad[0].q	  			= 0.5;

  00e66	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e6b	6b c8 00	 imul	 ecx, eax, 0
  00e6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e76	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+12], xmm0

; 9822 : 			quad[0].u	  			= 0.0;

  00e7f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e84	6b c8 00	 imul	 ecx, eax, 0
  00e87	0f 57 c0	 xorps	 xmm0, xmm0
  00e8a	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+24], xmm0

; 9823 : 			quad[0].v	  			= 0.0;

  00e93	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e98	6b c8 00	 imul	 ecx, eax, 0
  00e9b	0f 57 c0	 xorps	 xmm0, xmm0
  00e9e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+28], xmm0

; 9824 : 
; 9825 : 			quad[1].i				= mfd_screen_x_max;

  00ea7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00eac	c1 e0 00	 shl	 eax, 0
  00eaf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00eb7	f3 0f 11 84 05
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+16], xmm0

; 9826 : 			quad[1].j  				= mfd_screen_y_min;

  00ec0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ec5	c1 e0 00	 shl	 eax, 0
  00ec8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00ed0	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+20], xmm0

; 9827 : 			quad[1].z  				= 0.5;

  00ed9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ede	c1 e0 00	 shl	 eax, 0
  00ee1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ee9	f3 0f 11 84 05
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+8], xmm0

; 9828 : 			quad[1].q  				= 0.5;

  00ef2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ef7	c1 e0 00	 shl	 eax, 0
  00efa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f02	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+12], xmm0

; 9829 : 			quad[1].u  				= 1.0;

  00f0b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f10	c1 e0 00	 shl	 eax, 0
  00f13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f1b	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+24], xmm0

; 9830 : 			quad[1].v  				= 0.0;

  00f24	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f29	c1 e0 00	 shl	 eax, 0
  00f2c	0f 57 c0	 xorps	 xmm0, xmm0
  00f2f	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+28], xmm0

; 9831 : 
; 9832 : 			quad[2].i				= mfd_screen_x_max;

  00f38	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f3d	d1 e0		 shl	 eax, 1
  00f3f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00f47	f3 0f 11 84 05
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+16], xmm0

; 9833 : 			quad[2].j 				= mfd_screen_y_max;

  00f50	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f55	d1 e0		 shl	 eax, 1
  00f57	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00f5f	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+20], xmm0

; 9834 : 			quad[2].z  				= 0.5;

  00f68	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f6d	d1 e0		 shl	 eax, 1
  00f6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f77	f3 0f 11 84 05
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+8], xmm0

; 9835 : 			quad[2].q  				= 0.5;

  00f80	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f85	d1 e0		 shl	 eax, 1
  00f87	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f8f	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+12], xmm0

; 9836 : 			quad[2].u  				= 1.0;

  00f98	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f9d	d1 e0		 shl	 eax, 1
  00f9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00fa7	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+24], xmm0

; 9837 : 			quad[2].v  				= 1.0;

  00fb0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fb5	d1 e0		 shl	 eax, 1
  00fb7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00fbf	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+28], xmm0

; 9838 : 
; 9839 : 			quad[3].i				= mfd_screen_x_min;

  00fc8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fcd	6b c8 03	 imul	 ecx, eax, 3
  00fd0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00fd8	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+16], xmm0

; 9840 : 			quad[3].j				= mfd_screen_y_max;

  00fe1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fe6	6b c8 03	 imul	 ecx, eax, 3
  00fe9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00ff1	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+20], xmm0

; 9841 : 			quad[3].z				= 0.5;

  00ffa	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fff	6b c8 03	 imul	 ecx, eax, 3
  01002	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0100a	f3 0f 11 84 0d
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+8], xmm0

; 9842 : 			quad[3].q				= 0.5;

  01013	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01018	6b c8 03	 imul	 ecx, eax, 3
  0101b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01023	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+12], xmm0

; 9843 : 			quad[3].u				= 0.0;

  0102c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01031	6b c8 03	 imul	 ecx, eax, 3
  01034	0f 57 c0	 xorps	 xmm0, xmm0
  01037	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+24], xmm0

; 9844 : 			quad[3].v				= 1.0;

  01040	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01045	6b c8 03	 imul	 ecx, eax, 3
  01048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01050	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+28], xmm0

; 9845 : 
; 9846 : 			quad[0].next_vertex	= &quad[1];

  01059	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0105e	c1 e0 00	 shl	 eax, 0
  01061	8d 8c 05 ec fe
	ff ff		 lea	 ecx, DWORD PTR _quad$4[ebp+eax]
  01068	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0106d	6b c2 00	 imul	 eax, edx, 0
  01070	89 8c 05 14 ff
	ff ff		 mov	 DWORD PTR _quad$4[ebp+eax+40], ecx

; 9847 : 			quad[1].next_vertex	= &quad[2];

  01077	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0107c	d1 e0		 shl	 eax, 1
  0107e	8d 8c 05 ec fe
	ff ff		 lea	 ecx, DWORD PTR _quad$4[ebp+eax]
  01085	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0108a	c1 e2 00	 shl	 edx, 0
  0108d	89 8c 15 14 ff
	ff ff		 mov	 DWORD PTR _quad$4[ebp+edx+40], ecx

; 9848 : 			quad[2].next_vertex	= &quad[3];

  01094	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01099	6b c8 03	 imul	 ecx, eax, 3
  0109c	8d 94 0d ec fe
	ff ff		 lea	 edx, DWORD PTR _quad$4[ebp+ecx]
  010a3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010a8	d1 e0		 shl	 eax, 1
  010aa	89 94 05 14 ff
	ff ff		 mov	 DWORD PTR _quad$4[ebp+eax+40], edx

; 9849 : 			quad[3].next_vertex	= NULL;

  010b1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010b6	6b c8 03	 imul	 ecx, eax, 3
  010b9	c7 84 0d 14 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$4[ebp+ecx+40], 0

; 9850 : 
; 9851 :       	//
; 9852 :       	////////////////////////////////////////
; 9853 : 
; 9854 : 			draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  010c4	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$2[ebp]
  010ca	50		 push	 eax
  010cb	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$3[ebp]
  010d1	51		 push	 ecx
  010d2	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _quad$4[ebp]
  010d8	52		 push	 edx
  010d9	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 9855 : 
; 9856 : 			set_d3d_transparency_off ();

  010de	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 9857 : 
; 9858 : 			set_d3d_zbuffer_comparison (TRUE);

  010e3	6a 01		 push	 1
  010e5	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9859 : 
; 9860 : 			set_d3d_culling (TRUE);

  010ea	6a 01		 push	 1
  010ec	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9861 : 
; 9862 : 			end_3d_scene ();

  010f1	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN43@draw_overl:
$LN1@draw_overl:

; 9863 : 		}
; 9864 : 	}
; 9865 : }

  010f6	5f		 pop	 edi
  010f7	5e		 pop	 esi
  010f8	5b		 pop	 ebx
  010f9	8b e5		 mov	 esp, ebp
  010fb	5d		 pop	 ebp
  010fc	c2 0c 00	 ret	 12			; 0000000cH
  010ff	90		 npad	 1
$LN50@draw_overl:
  01100	00 00 00 00	 DD	 $LN14@draw_overl
  01104	00 00 00 00	 DD	 $LN15@draw_overl
  01108	00 00 00 00	 DD	 $LN14@draw_overl
  0110c	00 00 00 00	 DD	 $LN15@draw_overl
$LN51@draw_overl:
  01110	00 00 00 00	 DD	 $LN16@draw_overl
  01114	00 00 00 00	 DD	 $LN18@draw_overl
  01118	00 00 00 00	 DD	 $LN20@draw_overl
  0111c	00 00 00 00	 DD	 $LN24@draw_overl
  01120	00 00 00 00	 DD	 $LN28@draw_overl
  01124	00 00 00 00	 DD	 $LN30@draw_overl
  01128	00 00 00 00	 DD	 $LN32@draw_overl
  0112c	00 00 00 00	 DD	 $LN34@draw_overl
  01130	00 00 00 00	 DD	 $LN36@draw_overl
  01134	00 00 00 00	 DD	 $LN38@draw_overl
  01138	00 00 00 00	 DD	 $LN40@draw_overl
?draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ENDP ; draw_overlaid_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_translucent_mfd_background@@YGXMMMM@Z
_TEXT	SEGMENT
_specular$ = -264					; size = 4
_colour$ = -260						; size = 4
_quad$ = -256						; size = 256
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?draw_translucent_mfd_background@@YGXMMMM@Z PROC	; draw_translucent_mfd_background, COMDAT

; 9283 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9284 : 	vertex
; 9285 : 		quad[4];
; 9286 : 
; 9287 : 	real_colour
; 9288 : 		colour,
; 9289 : 		specular;
; 9290 : 
; 9291 : 	set_3d_active_environment (main_3d_env);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 9292 : 
; 9293 : 	if (begin_3d_scene ())

  00017	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 5a 02 00
	00		 je	 $LN2@draw_trans

; 9294 : 	{
; 9295 : 		colour.red = 0;

  00024	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+2], 0

; 9296 : 		colour.green = 0;

  0002b	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+1], 0

; 9297 : 		colour.blue = 0;

  00032	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp], 0

; 9298 : 		colour.alpha = 64;

  00039	c6 85 ff fe ff
	ff 40		 mov	 BYTE PTR _colour$[ebp+3], 64 ; 00000040H

; 9299 : 
; 9300 : 		specular.red = 0;

  00040	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 9301 : 		specular.green = 0;

  00047	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 9302 : 		specular.blue = 0;

  0004e	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 9303 : 		specular.alpha = 255;

  00055	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 9304 : 
; 9305 : 		set_d3d_transparency_on ();

  0005c	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 9306 : 
; 9307 : 		set_d3d_zbuffer_comparison (FALSE);

  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9308 : 
; 9309 : 		set_d3d_plain_renderstate ();

  00068	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 9310 : 
; 9311 : 		set_d3d_culling (FALSE);

  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9312 : 
; 9313 : 		quad[0].i = x_min;

  00074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00079	6b c8 00	 imul	 ecx, eax, 0
  0007c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00081	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 9314 : 		quad[0].j = y_min;

  0008a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00097	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 9315 : 		quad[0].z = 0.5;

  000a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b0	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 9316 : 		quad[0].q = 0.5;

  000b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c9	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 9317 : 		quad[0].next_vertex = &quad[1];

  000d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000d7	c1 e0 00	 shl	 eax, 0
  000da	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000e1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e6	6b c2 00	 imul	 eax, edx, 0
  000e9	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 9318 : 
; 9319 : 		quad[1].i = x_max;

  000f0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f5	c1 e0 00	 shl	 eax, 0
  000f8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  000fd	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 9320 : 		quad[1].j = y_min;

  00106	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00113	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 9321 : 		quad[1].z = 0.5;

  0011c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00121	c1 e0 00	 shl	 eax, 0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0012c	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 9322 : 		quad[1].q = 0.5;

  00135	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013a	c1 e0 00	 shl	 eax, 0
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00145	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 9323 : 		quad[1].next_vertex = &quad[2];

  0014e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00153	d1 e0		 shl	 eax, 1
  00155	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  0015c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00161	c1 e2 00	 shl	 edx, 0
  00164	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 9324 : 
; 9325 : 		quad[2].i = x_max;

  0016b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00170	d1 e0		 shl	 eax, 1
  00172	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00177	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 9326 : 		quad[2].j = y_max;

  00180	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00185	d1 e0		 shl	 eax, 1
  00187	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0018c	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 9327 : 		quad[2].z = 0.5;

  00195	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0019a	d1 e0		 shl	 eax, 1
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001a4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 9328 : 		quad[2].q = 0.5;

  001ad	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b2	d1 e0		 shl	 eax, 1
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001bc	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 9329 : 		quad[2].next_vertex = &quad[3];

  001c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ca	6b c8 03	 imul	 ecx, eax, 3
  001cd	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  001d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d9	d1 e0		 shl	 eax, 1
  001db	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 9330 : 
; 9331 : 		quad[3].i = x_min;

  001e2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e7	6b c8 03	 imul	 ecx, eax, 3
  001ea	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001ef	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 9332 : 		quad[3].j = y_max;

  001f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001fd	6b c8 03	 imul	 ecx, eax, 3
  00200	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00205	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 9333 : 		quad[3].z = 0.5;

  0020e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00213	6b c8 03	 imul	 ecx, eax, 3
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0021e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 9334 : 		quad[3].q = 0.5;

  00227	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022c	6b c8 03	 imul	 ecx, eax, 3
  0022f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00237	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 9335 : 		quad[3].next_vertex = NULL;

  00240	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00245	6b c8 03	 imul	 ecx, eax, 3
  00248	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 9336 : 
; 9337 : 		draw_wbuffered_plain_polygon (quad, colour, specular);

  00253	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00259	50		 push	 eax
  0025a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00260	51		 push	 ecx
  00261	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 9338 : 
; 9339 : 		set_d3d_transparency_off ();

  0026d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 9340 : 
; 9341 : 		set_d3d_zbuffer_comparison (TRUE);

  00272	6a 01		 push	 1
  00274	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9342 : 
; 9343 : 		end_3d_scene ();

  00279	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN2@draw_trans:

; 9344 : 	}
; 9345 : }

  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
  00280	5b		 pop	 ebx
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 10 00	 ret	 16			; 00000010H
?draw_translucent_mfd_background@@YGXMMMM@Z ENDP	; draw_translucent_mfd_background
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?initalize_horizon_mask@@YGXHPAPAD@Z
_TEXT	SEGMENT
tv211 = -112						; size = 4
tv216 = -108						; size = 4
_x_limit$1 = -40					; size = 4
_height_val$2 = -36					; size = 4
_semi_begin$ = -32					; size = 4
_semi_radius$ = -28					; size = 4
_side_border_width$ = -24				; size = 4
_height$ = -20						; size = 4
_horizon_mask$ = -16					; size = 4
_row$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_width$ = 8						; size = 4
_mask$ = 12						; size = 4
?initalize_horizon_mask@@YGXHPAPAD@Z PROC		; initalize_horizon_mask, COMDAT

; 8381 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8382 : 	int i,j;
; 8383 : 	char *row;
; 8384 : 	char* horizon_mask;
; 8385 : 	int height = LARGE_MFD_VIEWPORT_SIZE * 0.62;

  00009	c7 45 ec 9e 00
	00 00		 mov	 DWORD PTR _height$[ebp], 158 ; 0000009eH

; 8386 : 	int side_border_width = LARGE_MFD_VIEWPORT_SIZE * 0.175;

  00010	c7 45 e8 2c 00
	00 00		 mov	 DWORD PTR _side_border_width$[ebp], 44 ; 0000002cH

; 8387 : 	int semi_radius = ((width - 2*side_border_width) / 2);

  00017	8b 45 e8	 mov	 eax, DWORD PTR _side_border_width$[ebp]
  0001a	d1 e0		 shl	 eax, 1
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  0001f	2b c8		 sub	 ecx, eax
  00021	8b c1		 mov	 eax, ecx
  00023	99		 cdq
  00024	2b c2		 sub	 eax, edx
  00026	d1 f8		 sar	 eax, 1
  00028	89 45 e4	 mov	 DWORD PTR _semi_radius$[ebp], eax

; 8388 : 	int semi_begin = height - 2 - semi_radius;

  0002b	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  0002e	83 e8 02	 sub	 eax, 2
  00031	2b 45 e4	 sub	 eax, DWORD PTR _semi_radius$[ebp]
  00034	89 45 e0	 mov	 DWORD PTR _semi_begin$[ebp], eax

; 8389 : 
; 8390 : 	if (*mask)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  0003a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003d	74 0b		 je	 SHORT $LN8@initalize_

; 8391 : 		safe_free(*mask);

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN8@initalize_:

; 8392 : 	horizon_mask = (char *) safe_malloc((width * height) + 4);

  0004a	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0004d	0f af 45 ec	 imul	 eax, DWORD PTR _height$[ebp]
  00051	83 c0 04	 add	 eax, 4
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0005a	89 45 f0	 mov	 DWORD PTR _horizon_mask$[ebp], eax

; 8393 : 	*mask = horizon_mask;

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00060	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  00063	89 08		 mov	 DWORD PTR [eax], ecx

; 8394 : 
; 8395 : 	horizon_mask[0] = width;

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	6b c8 00	 imul	 ecx, eax, 0
  0006d	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  00070	8a 45 08	 mov	 al, BYTE PTR _width$[ebp]
  00073	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 8396 : 	horizon_mask[1] = height;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	c1 e0 00	 shl	 eax, 0
  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  00081	8a 55 ec	 mov	 dl, BYTE PTR _height$[ebp]
  00084	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 8397 : 	horizon_mask[2] = -(width / 2);

  00087	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0008a	99		 cdq
  0008b	2b c2		 sub	 eax, edx
  0008d	d1 f8		 sar	 eax, 1
  0008f	f7 d8		 neg	 eax
  00091	b9 01 00 00 00	 mov	 ecx, 1
  00096	d1 e1		 shl	 ecx, 1
  00098	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  0009b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 8398 : 	horizon_mask[3] = 0;

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	6b c8 03	 imul	 ecx, eax, 3
  000a6	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  000a9	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0

; 8399 : 
; 8400 : 	for (i = 0; i < height; i++)

  000ad	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b4	eb 09		 jmp	 SHORT $LN4@initalize_
$LN2@initalize_:
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000b9	83 c0 01	 add	 eax, 1
  000bc	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initalize_:
  000bf	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c2	3b 45 ec	 cmp	 eax, DWORD PTR _height$[ebp]
  000c5	0f 8d 18 01 00
	00		 jge	 $LN3@initalize_

; 8401 : 	{
; 8402 : 		row = &horizon_mask[4 + (i*width)];

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ce	0f af 45 08	 imul	 eax, DWORD PTR _width$[ebp]
  000d2	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  000d5	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000d9	89 55 f4	 mov	 DWORD PTR _row$[ebp], edx

; 8403 : 		for (j = 0; j < width; j++)

  000dc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  000e3	eb 09		 jmp	 SHORT $LN7@initalize_
$LN5@initalize_:
  000e5	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000e8	83 c0 01	 add	 eax, 1
  000eb	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN7@initalize_:
  000ee	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000f1	3b 45 08	 cmp	 eax, DWORD PTR _width$[ebp]
  000f4	0f 8d e4 00 00
	00		 jge	 $LN6@initalize_

; 8404 : 		{
; 8405 : 			if (i < 2 || i >= semi_begin + semi_radius)

  000fa	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  000fe	7c 0b		 jl	 SHORT $LN10@initalize_
  00100	8b 45 e0	 mov	 eax, DWORD PTR _semi_begin$[ebp]
  00103	03 45 e4	 add	 eax, DWORD PTR _semi_radius$[ebp]
  00106	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00109	7c 0b		 jl	 SHORT $LN9@initalize_
$LN10@initalize_:

; 8406 : 			{
; 8407 : 				row[j] = 1;

  0010b	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  0010e	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  00111	c6 00 01	 mov	 BYTE PTR [eax], 1

; 8408 : 				continue;

  00114	eb cf		 jmp	 SHORT $LN5@initalize_
$LN9@initalize_:

; 8409 : 			}
; 8410 : 
; 8411 : 			if (i < semi_begin)

  00116	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00119	3b 45 e0	 cmp	 eax, DWORD PTR _semi_begin$[ebp]
  0011c	7d 2c		 jge	 SHORT $LN11@initalize_

; 8412 : 			{
; 8413 : 				if (j < side_border_width || j >= (width - side_border_width))

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00121	3b 45 e8	 cmp	 eax, DWORD PTR _side_border_width$[ebp]
  00124	7c 0b		 jl	 SHORT $LN15@initalize_
  00126	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00129	2b 45 e8	 sub	 eax, DWORD PTR _side_border_width$[ebp]
  0012c	39 45 f8	 cmp	 DWORD PTR _j$[ebp], eax
  0012f	7c 0b		 jl	 SHORT $LN13@initalize_
$LN15@initalize_:

; 8414 : 					row[j] = 1;

  00131	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  00134	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  00137	c6 00 01	 mov	 BYTE PTR [eax], 1

; 8415 : 				else

  0013a	eb 09		 jmp	 SHORT $LN14@initalize_
$LN13@initalize_:

; 8416 : 					row[j] = 0;

  0013c	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  0013f	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  00142	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN14@initalize_:

; 8417 : 			}
; 8418 : 			else

  00145	e9 8f 00 00 00	 jmp	 $LN17@initalize_
$LN11@initalize_:

; 8419 : 			{
; 8420 : 				float height_val = ((float)i - semi_begin);

  0014a	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _i$[ebp]
  0014f	f3 0f 2a 4d e0	 cvtsi2ss xmm1, DWORD PTR _semi_begin$[ebp]
  00154	f3 0f 5c c1	 subss	 xmm0, xmm1
  00158	f3 0f 11 45 dc	 movss	 DWORD PTR _height_val$2[ebp], xmm0

; 8421 : 				float x_limit = side_border_width + semi_radius - sqrt((semi_radius * semi_radius) - (height_val * height_val));

  0015d	8b 45 e8	 mov	 eax, DWORD PTR _side_border_width$[ebp]
  00160	03 45 e4	 add	 eax, DWORD PTR _semi_radius$[ebp]
  00163	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00167	8b 4d e4	 mov	 ecx, DWORD PTR _semi_radius$[ebp]
  0016a	0f af 4d e4	 imul	 ecx, DWORD PTR _semi_radius$[ebp]
  0016e	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00172	f3 0f 10 55 dc	 movss	 xmm2, DWORD PTR _height_val$2[ebp]
  00177	f3 0f 59 55 dc	 mulss	 xmm2, DWORD PTR _height_val$2[ebp]
  0017c	f3 0f 5c ca	 subss	 xmm1, xmm2
  00180	51		 push	 ecx
  00181	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00186	f3 0f 11 45 94	 movss	 DWORD PTR tv216[ebp], xmm0
  0018b	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00190	d9 5d 90	 fstp	 DWORD PTR tv211[ebp]
  00193	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv216[ebp]
  00198	f3 0f 5c 45 90	 subss	 xmm0, DWORD PTR tv211[ebp]
  0019d	f3 0f 11 45 d8	 movss	 DWORD PTR _x_limit$1[ebp], xmm0

; 8422 : 
; 8423 : 				if (j < x_limit || j >= (width - x_limit))

  001a2	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _j$[ebp]
  001a7	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _x_limit$1[ebp]
  001ac	0f 2f c8	 comiss	 xmm1, xmm0
  001af	77 14		 ja	 SHORT $LN18@initalize_
  001b1	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _j$[ebp]
  001b6	f3 0f 2a 4d 08	 cvtsi2ss xmm1, DWORD PTR _width$[ebp]
  001bb	f3 0f 5c 4d d8	 subss	 xmm1, DWORD PTR _x_limit$1[ebp]
  001c0	0f 2f c1	 comiss	 xmm0, xmm1
  001c3	72 0b		 jb	 SHORT $LN16@initalize_
$LN18@initalize_:

; 8424 : 					row[j] = 1;

  001c5	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  001c8	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  001cb	c6 00 01	 mov	 BYTE PTR [eax], 1

; 8425 : 				else

  001ce	eb 09		 jmp	 SHORT $LN17@initalize_
$LN16@initalize_:

; 8426 : 					row[j] = 0;

  001d0	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  001d3	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  001d6	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN17@initalize_:

; 8427 : 			}
; 8428 : 		}

  001d9	e9 07 ff ff ff	 jmp	 $LN5@initalize_
$LN6@initalize_:

; 8429 : 	}

  001de	e9 d3 fe ff ff	 jmp	 $LN2@initalize_
$LN3@initalize_:

; 8430 : }

  001e3	5f		 pop	 edi
  001e4	5e		 pop	 esi
  001e5	5b		 pop	 ebx
  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c2 08 00	 ret	 8
?initalize_horizon_mask@@YGXHPAPAD@Z ENDP		; initalize_horizon_mask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv130 = -68						; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z PROC ; draw_mfd, COMDAT

; 8250 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8251 : 	ASSERT (mfd_screen);

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@draw_mfd
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_mfd:

; 8252 : 
; 8253 : 	ASSERT (viper_mfd_mode_valid (*mode));

  00027	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	7c 08		 jl	 SHORT $LN6@draw_mfd
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00032	83 38 0b	 cmp	 DWORD PTR [eax], 11	; 0000000bH
  00035	7c 18		 jl	 SHORT $LN5@draw_mfd
$LN6@draw_mfd:
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  0003c	83 c0 03	 add	 eax, 3
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MGECJOEL@viper_mfd_mode_valid?5?$CI?$CKmode?$CJ@
  0004a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_mfd:

; 8254 : 
; 8255 : 	ASSERT (viper_mfd_location_valid (location));

  0004f	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00053	7c 06		 jl	 SHORT $LN8@draw_mfd
  00055	83 7d 10 06	 cmp	 DWORD PTR _location$[ebp], 6
  00059	7c 18		 jl	 SHORT $LN7@draw_mfd
$LN8@draw_mfd:
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  00060	83 c0 05	 add	 eax, 5
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LNFLDDNP@viper_mfd_location_valid?5?$CIlocat@
  0006e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_mfd:

; 8256 : 
; 8257 : 	if ((get_undamaged_eo_display_mode (*mode) && d3d_can_render_to_texture))

  00073	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4VIPER_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0007e	85 c0		 test	 eax, eax
  00080	74 0e		 je	 SHORT $LN9@draw_mfd
  00082	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00089	74 05		 je	 SHORT $LN9@draw_mfd

; 8258 : 	{
; 8259 : 		return;

  0008b	e9 e4 00 00 00	 jmp	 $LN1@draw_mfd
$LN9@draw_mfd:

; 8260 : 	}
; 8261 : 
; 8262 : 	set_active_screen (mfd_screen);

  00090	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8263 : 
; 8264 : 	if (lock_screen (mfd_screen))

  00099	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  000a2	85 c0		 test	 eax, eax
  000a4	0f 84 bf 00 00
	00		 je	 $LN10@draw_mfd

; 8265 : 	{
; 8266 : 		set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, MFD_BACKGROUND_COLOUR);

  000aa	b8 04 00 00 00	 mov	 eax, 4
  000af	6b c8 09	 imul	 ecx, eax, 9
  000b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000b8	52		 push	 edx
  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?int_mfd_viewport_size@@3HA
  000be	83 e8 01	 sub	 eax, 1
  000c1	50		 push	 eax
  000c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  000c8	83 e9 01	 sub	 ecx, 1
  000cb	51		 push	 ecx
  000cc	6a 00		 push	 0
  000ce	6a 00		 push	 0
  000d0	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8267 : 
; 8268 : 		draw_layout_grid ();

  000d5	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8269 : 
; 8270 : 		switch (*mode)

  000da	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000df	89 4d bc	 mov	 DWORD PTR tv130[ebp], ecx
  000e2	83 7d bc 0a	 cmp	 DWORD PTR tv130[ebp], 10 ; 0000000aH
  000e6	77 5e		 ja	 SHORT $LN22@draw_mfd
  000e8	8b 55 bc	 mov	 edx, DWORD PTR tv130[ebp]
  000eb	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN24@draw_mfd[edx*4]
$LN11@draw_mfd:

; 8271 : 		{
; 8272 : 			////////////////////////////////////////
; 8273 : 			case VIPER_MFD_MODE_OFF:
; 8274 : 			////////////////////////////////////////
; 8275 : 			{
; 8276 : 				break;

  000f2	eb 63		 jmp	 SHORT $LN2@draw_mfd
$LN12@draw_mfd:

; 8277 : 			}
; 8278 : 			////////////////////////////////////////
; 8279 : 			case VIPER_MFD_MODE_DAMAGED:
; 8280 : 			////////////////////////////////////////
; 8281 : 			{
; 8282 : 				draw_damaged_mfd ();

  000f4	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 8283 : 
; 8284 : 				break;

  000f9	eb 5c		 jmp	 SHORT $LN2@draw_mfd
$LN13@draw_mfd:

; 8285 : 			}
; 8286 : 			////////////////////////////////////////
; 8287 : 			case VIPER_MFD_MODE_FLIR:
; 8288 : 			////////////////////////////////////////
; 8289 : 			{
; 8290 : 				draw_2d_flir_mfd (FALSE);

  000fb	6a 00		 push	 0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 8291 : 
; 8292 : 				break;

  00102	eb 53		 jmp	 SHORT $LN2@draw_mfd
$LN14@draw_mfd:

; 8293 : 			}
; 8294 : 			////////////////////////////////////////
; 8295 : 			case VIPER_MFD_MODE_DTV:
; 8296 : 			////////////////////////////////////////
; 8297 : 			{
; 8298 : 				draw_2d_dtv_mfd (FALSE);

  00104	6a 00		 push	 0
  00106	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd

; 8299 : 
; 8300 : 				break;

  0010b	eb 4a		 jmp	 SHORT $LN2@draw_mfd
$LN15@draw_mfd:

; 8301 : 			}
; 8302 : 			////////////////////////////////////////
; 8303 : 			case VIPER_MFD_MODE_TSD:
; 8304 : 			////////////////////////////////////////
; 8305 : 			{
; 8306 : 				draw_tactical_situation_display_mfd (location);

  0010d	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ; draw_tactical_situation_display_mfd

; 8307 : 
; 8308 : 				break;

  00116	eb 3f		 jmp	 SHORT $LN2@draw_mfd
$LN16@draw_mfd:

; 8309 : 			}
; 8310 : 			////////////////////////////////////////
; 8311 : 			case VIPER_MFD_MODE_ASE:
; 8312 : 			////////////////////////////////////////
; 8313 : 			{
; 8314 : 				draw_aircraft_survivability_equipment_display_mfd (location);

  00118	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ; draw_aircraft_survivability_equipment_display_mfd

; 8315 : 
; 8316 : 				break;

  00121	eb 34		 jmp	 SHORT $LN2@draw_mfd
$LN17@draw_mfd:

; 8317 : 			}
; 8318 : 			////////////////////////////////////////
; 8319 : 			case VIPER_MFD_MODE_WEAPON:
; 8320 : 			////////////////////////////////////////
; 8321 : 			{
; 8322 : 				draw_weapon_display_mfd ();

  00123	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXXZ ; draw_weapon_display_mfd

; 8323 : 
; 8324 : 				break;

  00128	eb 2d		 jmp	 SHORT $LN2@draw_mfd
$LN18@draw_mfd:

; 8325 : 			}
; 8326 : 			////////////////////////////////////////
; 8327 : 			case VIPER_MFD_MODE_SYSTEM:
; 8328 : 			////////////////////////////////////////
; 8329 : 			{
; 8330 : 				draw_system_display_mfd ();

  0012a	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 8331 : 
; 8332 : 				break;

  0012f	eb 26		 jmp	 SHORT $LN2@draw_mfd
$LN19@draw_mfd:

; 8333 : 			}
; 8334 : 			////////////////////////////////////////
; 8335 : 			case VIPER_MFD_MODE_ENGINE:
; 8336 : 			////////////////////////////////////////
; 8337 : 			{
; 8338 : 				draw_engine_display_mfd ();

  00131	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 8339 : 
; 8340 : 				break;

  00136	eb 1f		 jmp	 SHORT $LN2@draw_mfd
$LN20@draw_mfd:

; 8341 : 			}
; 8342 : 			////////////////////////////////////////
; 8343 : 			case VIPER_MFD_MODE_FLIGHT:
; 8344 : 			////////////////////////////////////////
; 8345 : 			{
; 8346 : 				draw_flight_display_mfd ();

  00138	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 8347 : 
; 8348 : 				break;

  0013d	eb 18		 jmp	 SHORT $LN2@draw_mfd
$LN21@draw_mfd:

; 8349 : 			}
; 8350 : 			////////////////////////////////////////
; 8351 : 			case VIPER_MFD_MODE_MISSION:
; 8352 : 			////////////////////////////////////////
; 8353 : 			{
; 8354 : 				draw_mission_display_mfd ();

  0013f	e8 00 00 00 00	 call	 ?draw_mission_display_mfd@@YGXXZ ; draw_mission_display_mfd

; 8355 : 
; 8356 : 				break;

  00144	eb 11		 jmp	 SHORT $LN2@draw_mfd
$LN22@draw_mfd:

; 8357 : 			}
; 8358 : 			////////////////////////////////////////
; 8359 : 			default:
; 8360 : 			////////////////////////////////////////
; 8361 : 			{
; 8362 : 				debug_fatal ("Invalid main MFD mode = %d", mode);

  00146	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00149	50		 push	 eax
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
  0014f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00154	83 c4 08	 add	 esp, 8
$LN2@draw_mfd:

; 8363 : 
; 8364 : 				break;
; 8365 : 			}
; 8366 : 		}
; 8367 : 
; 8368 : 		flush_screen_texture_graphics (mfd_screen);

  00157	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8369 : 
; 8370 : 		unlock_screen (mfd_screen);

  00160	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN10@draw_mfd:

; 8371 : 	}
; 8372 : 
; 8373 : 	set_active_screen (video_screen);

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN1@draw_mfd:

; 8374 : }

  00174	5f		 pop	 edi
  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c2 0c 00	 ret	 12			; 0000000cH
  0017d	0f 1f 00	 npad	 3
$LN24@draw_mfd:
  00180	00 00 00 00	 DD	 $LN11@draw_mfd
  00184	00 00 00 00	 DD	 $LN12@draw_mfd
  00188	00 00 00 00	 DD	 $LN13@draw_mfd
  0018c	00 00 00 00	 DD	 $LN14@draw_mfd
  00190	00 00 00 00	 DD	 $LN15@draw_mfd
  00194	00 00 00 00	 DD	 $LN16@draw_mfd
  00198	00 00 00 00	 DD	 $LN17@draw_mfd
  0019c	00 00 00 00	 DD	 $LN18@draw_mfd
  001a0	00 00 00 00	 DD	 $LN19@draw_mfd
  001a4	00 00 00 00	 DD	 $LN20@draw_mfd
  001a8	00 00 00 00	 DD	 $LN21@draw_mfd
?draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ENDP ; draw_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_mission_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv813 = -4112						; size = 4
tv400 = -4112						; size = 4
tv327 = -4112						; size = 4
tv805 = -4108						; size = 4
tv392 = -4108						; size = 4
tv319 = -4108						; size = 4
tv1457 = -4104						; size = 8
tv1210 = -4104						; size = 8
tv1002 = -4104						; size = 8
tv902 = -4104						; size = 4
tv843 = -4104						; size = 4
tv792 = -4104						; size = 4
tv752 = -4104						; size = 4
tv681 = -4104						; size = 4
tv648 = -4104						; size = 4
tv609 = -4104						; size = 4
tv579 = -4104						; size = 4
tv509 = -4104						; size = 4
tv473 = -4104						; size = 4
tv453 = -4104						; size = 4
tv425 = -4104						; size = 4
tv379 = -4104						; size = 4
tv353 = -4104						; size = 4
tv306 = -4104						; size = 4
tv278 = -4104						; size = 4
tv259 = -4104						; size = 4
tv233 = -4104						; size = 4
tv207 = -4104						; size = 4
tv141 = -4104						; size = 4
tv894 = -4100						; size = 4
tv835 = -4100						; size = 4
tv784 = -4100						; size = 4
tv744 = -4100						; size = 4
tv673 = -4100						; size = 4
tv640 = -4100						; size = 4
tv601 = -4100						; size = 4
tv571 = -4100						; size = 4
tv501 = -4100						; size = 4
tv465 = -4100						; size = 4
tv445 = -4100						; size = 4
tv417 = -4100						; size = 4
tv371 = -4100						; size = 4
tv345 = -4100						; size = 4
tv298 = -4100						; size = 4
tv271 = -4100						; size = 4
tv251 = -4100						; size = 4
tv225 = -4100						; size = 4
tv199 = -4100						; size = 4
tv133 = -4100						; size = 4
_buffer$1 = -3584					; size = 1024
_buffer$2 = -2560					; size = 1024
_buffer$3 = -1536					; size = 1024
_objective$ = -512					; size = 4
_keysite$ = -508					; size = 4
_task$ = -504						; size = 4
_member$ = -500						; size = 4
_company$ = -496					; size = 4
_group$ = -492						; size = 4
_en$ = -488						; size = 4
_estimated_time$ = -484					; size = 4
_mission_time$ = -480					; size = 4
_time$ = -476						; size = 4
_x_max$ = -472						; size = 4
_x_mid$ = -468						; size = 4
_x_min$ = -464						; size = 4
_y_adjust$ = -460					; size = 4
_x_adjust$ = -456					; size = 4
_char_height$ = -452					; size = 4
_estimated_seconds$ = -448				; size = 4
_estimated_minutes$ = -444				; size = 4
_estimated_hours$ = -440				; size = 4
_mission_seconds$ = -436				; size = 4
_mission_minutes$ = -432				; size = 4
_mission_hours$ = -428					; size = 4
_seconds$ = -424					; size = 4
_minutes$ = -420					; size = 4
_hours$ = -416						; size = 4
_status_name$ = -412					; size = 4
_formation$ = -408					; size = 4
_s2$ = -404						; size = 200
_s1$ = -204						; size = 200
_c$ = -1						; size = 1
?draw_mission_display_mfd@@YGXXZ PROC			; draw_mission_display_mfd, COMDAT

; 7746 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 10 00 00	 mov	 eax, 4112		; 00001010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 7747 : 	char
; 7748 : 		c,
; 7749 : 		s1[200],
; 7750 : 		s2[200];
; 7751 : 
; 7752 : 	int
; 7753 : 		formation,
; 7754 : 		status_name,
; 7755 : 		hours,
; 7756 : 		minutes,
; 7757 : 		seconds,
; 7758 : 		mission_hours,
; 7759 : 		mission_minutes,
; 7760 : 		mission_seconds,
; 7761 : 		estimated_hours,
; 7762 : 		estimated_minutes,
; 7763 : 		estimated_seconds;
; 7764 : 
; 7765 : 	float
; 7766 : 		char_height,
; 7767 : 		x_adjust,
; 7768 : 		y_adjust,
; 7769 : 		x_min,
; 7770 : 		x_mid,
; 7771 : 		x_max,
; 7772 : 		time,
; 7773 : 		mission_time,
; 7774 : 		estimated_time;
; 7775 : 
; 7776 : 	entity
; 7777 : 		*en,
; 7778 : 		*group,
; 7779 : 		*company,
; 7780 : 		*member,
; 7781 : 		*task,
; 7782 : 		*keysite,
; 7783 : 		*objective;
; 7784 : 
; 7785 : 	en = get_gunship_entity ();

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00015	89 85 18 fe ff
	ff		 mov	 DWORD PTR _en$[ebp], eax

; 7786 : 
; 7787 : 	get_2d_float_screen_y_coordinate (1.0, &y_adjust);

  0001b	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _y_adjust$[ebp]
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0002b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7788 : 
; 7789 : 	get_2d_float_screen_x_coordinate (-1.0, &x_min);

  00035	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _x_min$[ebp]
  0003b	50		 push	 eax
  0003c	51		 push	 ecx
  0003d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7790 : 
; 7791 : 	get_2d_float_screen_x_coordinate (0.0, &x_mid);

  0004f	8d 85 2c fe ff
	ff		 lea	 eax, DWORD PTR _x_mid$[ebp]
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7792 : 
; 7793 : 	get_2d_float_screen_x_coordinate (1.0, &x_max);

  00064	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR _x_max$[ebp]
  0006a	50		 push	 eax
  0006b	51		 push	 ecx
  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7794 : 
; 7795 : 	if (draw_large_mfd)

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00085	74 5d		 je	 SHORT $LN4@draw_missi

; 7796 : 	{
; 7797 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00087	6a 05		 push	 5
  00089	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7798 : 
; 7799 : 		y_adjust += 3.0;

  0008e	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00096	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0009e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7800 : 
; 7801 : 		x_min += 3.0;

  000aa	f3 0f 5a 85 30
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  000b2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  000ba	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000be	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 7802 : 
; 7803 : 		x_max -= 3.0;

  000c6	f3 0f 5a 85 28
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_max$[ebp]
  000ce	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4008000000000000
  000d6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000da	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 7804 : 	}
; 7805 : 	else

  000e2	eb 5b		 jmp	 SHORT $LN5@draw_missi
$LN4@draw_missi:

; 7806 : 	{
; 7807 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000e4	6a 00		 push	 0
  000e6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7808 : 
; 7809 : 		y_adjust += 2.0;

  000eb	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  000f3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  000fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ff	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7810 : 
; 7811 : 		x_min += 2.0;

  00107	f3 0f 5a 85 30
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  0010f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00117	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011b	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 7812 : 
; 7813 : 		x_max -= 2.0;

  00123	f3 0f 5a 85 28
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_max$[ebp]
  0012b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  00133	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00137	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR _x_max$[ebp], xmm0
$LN5@draw_missi:

; 7814 : 	}
; 7815 : 
; 7816 : 	char_height = get_mono_font_char_height ('X');

  0013f	6a 58		 push	 88			; 00000058H
  00141	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00146	d9 9d 3c fe ff
	ff		 fstp	 DWORD PTR _char_height$[ebp]

; 7817 : 
; 7818 : 	////////////////////////////////////////
; 7819 : 	//
; 7820 : 	// flight group
; 7821 : 	//
; 7822 : 	////////////////////////////////////////
; 7823 : 
; 7824 : 	group = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  0014c	83 bd 18 fe ff
	ff 00		 cmp	 DWORD PTR _en$[ebp], 0
  00153	74 10		 je	 SHORT $LN35@draw_missi
  00155	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _en$[ebp]
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv133[ebp], ecx
  00163	eb 24		 jmp	 SHORT $LN36@draw_missi
$LN35@draw_missi:
  00165	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0016b	83 c2 4e	 add	 edx, 78			; 0000004eH
  0016e	52		 push	 edx
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0017f	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv133[ebp], 0
$LN36@draw_missi:
  00189	b9 01 00 00 00	 mov	 ecx, 1
  0018e	85 c9		 test	 ecx, ecx
  00190	74 0c		 je	 SHORT $LN37@draw_missi
  00192	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv141[ebp], 25 ; 00000019H
  0019c	eb 24		 jmp	 SHORT $LN38@draw_missi
$LN37@draw_missi:
  0019e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  001a4	83 c2 4e	 add	 edx, 78			; 0000004eH
  001a7	52		 push	 edx
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b8	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], 0
$LN38@draw_missi:
  001c2	6a 19		 push	 25			; 00000019H
  001c4	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  001ca	51		 push	 ecx
  001cb	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv133[ebp], 180
  001d5	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv141[ebp]
  001db	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  001e2	ff d1		 call	 ecx
  001e4	89 85 14 fe ff
	ff		 mov	 DWORD PTR _group$[ebp], eax

; 7825 : 
; 7826 : 	if (group)

  001ea	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  001f1	0f 84 3a 0b 00
	00		 je	 $LN6@draw_missi

; 7827 : 	{
; 7828 : 		//
; 7829 : 		// title
; 7830 : 		//
; 7831 : 
; 7832 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  001f7	b8 04 00 00 00	 mov	 eax, 4
  001fc	6b c8 13	 imul	 ecx, eax, 19
  001ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00205	52		 push	 edx
  00206	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7833 : 
; 7834 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  0020b	b8 04 00 00 00	 mov	 eax, 4
  00210	6b c8 13	 imul	 ecx, eax, 19
  00213	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00219	52		 push	 edx
  0021a	51		 push	 ecx
  0021b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00228	51		 push	 ecx
  00229	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00236	51		 push	 ecx
  00237	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	51		 push	 ecx
  00245	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0024d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00252	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7835 : 
; 7836 : 		y_adjust += 2.0;

  00257	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0025f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00267	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7837 : 
; 7838 : 		x_adjust = get_mono_font_string_width ("FLIGHT GROUP") * 0.5;

  00273	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
  00278	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0027d	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1002[ebp]
  00283	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1002[ebp]
  0028b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00293	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00297	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7839 : 
; 7840 : 		set_mono_font_position (x_mid - x_adjust, y_adjust);

  0029f	51		 push	 ecx
  002a0	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  002b5	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002bd	51		 push	 ecx
  002be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c3	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7841 : 
; 7842 : 		print_mono_font_string ("FLIGHT GROUP");

  002c8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
  002cd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7843 : 
; 7844 : 		y_adjust += char_height;

  002d2	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002da	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  002e2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7845 : 
; 7846 : 		if (draw_large_mfd)

  002ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002f1	74 1c		 je	 SHORT $LN7@draw_missi

; 7847 : 		{
; 7848 : 			y_adjust -= 1.0;

  002f3	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  002fb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00303	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00307	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_missi:

; 7849 : 		}
; 7850 : 
; 7851 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  0030f	b8 04 00 00 00	 mov	 eax, 4
  00314	6b c8 13	 imul	 ecx, eax, 19
  00317	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0031d	52		 push	 edx
  0031e	51		 push	 ecx
  0031f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00327	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032c	51		 push	 ecx
  0032d	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00335	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033a	51		 push	 ecx
  0033b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00343	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00348	51		 push	 ecx
  00349	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00351	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00356	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7852 : 
; 7853 : 		if (draw_large_mfd)

  0035b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00362	74 1e		 je	 SHORT $LN8@draw_missi

; 7854 : 		{
; 7855 : 			y_adjust += 3.0;

  00364	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0036c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00374	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00378	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7856 : 		}
; 7857 : 		else

  00380	eb 1c		 jmp	 SHORT $LN9@draw_missi
$LN8@draw_missi:

; 7858 : 		{
; 7859 : 			y_adjust += 2.0;

  00382	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0038a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00392	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00396	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN9@draw_missi:

; 7860 : 		}
; 7861 : 
; 7862 : 		set_mono_font_colour (MFD_COLOUR_RED);

  0039e	b8 04 00 00 00	 mov	 eax, 4
  003a3	6b c8 0f	 imul	 ecx, eax, 15
  003a6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ac	52		 push	 edx
  003ad	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7863 : 
; 7864 : 		//
; 7865 : 		// division name
; 7866 : 		//
; 7867 : 
; 7868 : 		if (get_global_current_language () != LANGUAGE_RUSSIAN)

  003b2	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  003b9	0f 84 b4 01 00
	00		 je	 $LN10@draw_missi

; 7869 : 		{
; 7870 : 			company = get_local_entity_parent (group, LIST_TYPE_DIVISION);

  003bf	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  003c6	74 10		 je	 SHORT $LN39@draw_missi
  003c8	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  003ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d0	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv199[ebp], ecx
  003d6	eb 24		 jmp	 SHORT $LN40@draw_missi
$LN39@draw_missi:
  003d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  003de	83 c2 7c	 add	 edx, 124		; 0000007cH
  003e1	52		 push	 edx
  003e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ec	50		 push	 eax
  003ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f2	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN40@draw_missi:
  003fc	b9 01 00 00 00	 mov	 ecx, 1
  00401	85 c9		 test	 ecx, ecx
  00403	74 0c		 je	 SHORT $LN41@draw_missi
  00405	c7 85 f8 ef ff
	ff 0b 00 00 00	 mov	 DWORD PTR tv207[ebp], 11 ; 0000000bH
  0040f	eb 24		 jmp	 SHORT $LN42@draw_missi
$LN41@draw_missi:
  00411	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00417	83 c2 7c	 add	 edx, 124		; 0000007cH
  0041a	52		 push	 edx
  0041b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00420	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00425	50		 push	 eax
  00426	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0042b	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN42@draw_missi:
  00435	6a 0b		 push	 11			; 0000000bH
  00437	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  0043d	51		 push	 ecx
  0043e	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv199[ebp], 180
  00448	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv207[ebp]
  0044e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00455	ff d1		 call	 ecx
  00457	89 85 10 fe ff
	ff		 mov	 DWORD PTR _company$[ebp], eax

; 7871 : 
; 7872 : 			ASSERT (company);

  0045d	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _company$[ebp], 0
  00464	75 18		 jne	 SHORT $LN11@draw_missi
  00466	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0046b	83 c0 7e	 add	 eax, 126		; 0000007eH
  0046e	50		 push	 eax
  0046f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00474	68 00 00 00 00	 push	 OFFSET ??_C@_07MLNBPDHK@company@
  00479	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_missi:

; 7873 : 
; 7874 : 			sprintf (s1, "%s:", get_local_entity_string (company, STRING_TYPE_DIVISION_NAME));

  0047e	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _company$[ebp], 0
  00485	74 10		 je	 SHORT $LN43@draw_missi
  00487	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _company$[ebp]
  0048d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048f	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv225[ebp], ecx
  00495	eb 27		 jmp	 SHORT $LN44@draw_missi
$LN43@draw_missi:
  00497	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0049d	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  004a3	52		 push	 edx
  004a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004ae	50		 push	 eax
  004af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b4	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
$LN44@draw_missi:
  004be	b9 01 00 00 00	 mov	 ecx, 1
  004c3	85 c9		 test	 ecx, ecx
  004c5	74 0c		 je	 SHORT $LN45@draw_missi
  004c7	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
  004d1	eb 27		 jmp	 SHORT $LN46@draw_missi
$LN45@draw_missi:
  004d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  004d9	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  004df	52		 push	 edx
  004e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  004e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f0	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
$LN46@draw_missi:
  004fa	6a 00		 push	 0
  004fc	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR _company$[ebp]
  00502	51		 push	 ecx
  00503	6b 95 fc ef ff
	ff 34		 imul	 edx, DWORD PTR tv225[ebp], 52
  0050a	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv233[ebp]
  00510	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00517	ff d1		 call	 ecx
  00519	50		 push	 eax
  0051a	68 00 00 00 00	 push	 OFFSET ??_C@_03DKEJHHJP@?$CFs?3@
  0051f	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00525	52		 push	 edx
  00526	e8 00 00 00 00	 call	 _sprintf
  0052b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7875 : 
; 7876 : 			set_mono_font_position (x_min, y_adjust);

  0052e	51		 push	 ecx
  0052f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053c	51		 push	 ecx
  0053d	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00545	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054a	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7877 : 
; 7878 : 			print_mono_font_max_length_string (s1);

  0054f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00555	50		 push	 eax
  00556	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7879 : 
; 7880 : 			y_adjust += char_height;

  0055b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00563	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0056b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN10@draw_missi:

; 7881 : 		}
; 7882 : 
; 7883 : 		//
; 7884 : 		// members (callsign, players' rank and name, group leader)
; 7885 : 		//
; 7886 : 
; 7887 : 		member = get_local_entity_first_child (group, LIST_TYPE_MEMBER);

  00573	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0057a	74 10		 je	 SHORT $LN47@draw_missi
  0057c	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00582	8b 08		 mov	 ecx, DWORD PTR [eax]
  00584	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv251[ebp], ecx
  0058a	eb 27		 jmp	 SHORT $LN48@draw_missi
$LN47@draw_missi:
  0058c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00592	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  00598	52		 push	 edx
  00599	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0059e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005a3	50		 push	 eax
  005a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005a9	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv251[ebp], 0
$LN48@draw_missi:
  005b3	b9 01 00 00 00	 mov	 ecx, 1
  005b8	85 c9		 test	 ecx, ecx
  005ba	74 0c		 je	 SHORT $LN49@draw_missi
  005bc	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv259[ebp], 25 ; 00000019H
  005c6	eb 27		 jmp	 SHORT $LN50@draw_missi
$LN49@draw_missi:
  005c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  005ce	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  005d4	52		 push	 edx
  005d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  005da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  005df	50		 push	 eax
  005e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005e5	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
$LN50@draw_missi:
  005ef	6a 19		 push	 25			; 00000019H
  005f1	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  005f7	51		 push	 ecx
  005f8	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv251[ebp], 180
  00602	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv259[ebp]
  00608	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0060f	ff d1		 call	 ecx
  00611	89 85 0c fe ff
	ff		 mov	 DWORD PTR _member$[ebp], eax
$LN2@draw_missi:

; 7888 : 
; 7889 : 		while (member)

  00617	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0061e	0f 84 f2 05 00
	00		 je	 $LN3@draw_missi

; 7890 : 		{
; 7891 : 			if (get_local_entity_int_value (member, INT_TYPE_GROUP_LEADER))

  00624	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0062b	74 10		 je	 SHORT $LN51@draw_missi
  0062d	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00633	8b 08		 mov	 ecx, DWORD PTR [eax]
  00635	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv271[ebp], ecx
  0063b	eb 20		 jmp	 SHORT $LN52@draw_missi
$LN51@draw_missi:
  0063d	68 d3 1e 00 00	 push	 7891			; 00001ed3H
  00642	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00647	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0064d	52		 push	 edx
  0064e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00653	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv271[ebp], 0
$LN52@draw_missi:
  0065d	b8 01 00 00 00	 mov	 eax, 1
  00662	85 c0		 test	 eax, eax
  00664	74 0c		 je	 SHORT $LN53@draw_missi
  00666	c7 85 f8 ef ff
	ff 48 00 00 00	 mov	 DWORD PTR tv278[ebp], 72 ; 00000048H
  00670	eb 20		 jmp	 SHORT $LN54@draw_missi
$LN53@draw_missi:
  00672	68 d3 1e 00 00	 push	 7891			; 00001ed3H
  00677	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0067c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00682	51		 push	 ecx
  00683	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00688	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv278[ebp], 0
$LN54@draw_missi:
  00692	6a 48		 push	 72			; 00000048H
  00694	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  0069a	52		 push	 edx
  0069b	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv271[ebp], 1116
  006a5	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv278[ebp]
  006ab	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  006b2	ff d2		 call	 edx
  006b4	85 c0		 test	 eax, eax
  006b6	74 06		 je	 SHORT $LN12@draw_missi

; 7892 : 			{
; 7893 : 				c = '>';

  006b8	c6 45 ff 3e	 mov	 BYTE PTR _c$[ebp], 62	; 0000003eH

; 7894 : 			}
; 7895 : 			else

  006bc	eb 04		 jmp	 SHORT $LN13@draw_missi
$LN12@draw_missi:

; 7896 : 			{
; 7897 : 				c = ' ';

  006be	c6 45 ff 20	 mov	 BYTE PTR _c$[ebp], 32	; 00000020H
$LN13@draw_missi:

; 7898 : 			}
; 7899 : 
; 7900 : 			if (get_player_rank_and_name (member, s2))

  006c2	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _s2$[ebp]
  006c8	50		 push	 eax
  006c9	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  006cf	51		 push	 ecx
  006d0	e8 00 00 00 00	 call	 ?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z ; get_player_rank_and_name
  006d5	85 c0		 test	 eax, eax
  006d7	0f 84 2f 02 00
	00		 je	 $LN14@draw_missi

; 7901 : 			{
; 7902 : 				if (get_global_current_language () != LANGUAGE_RUSSIAN)

  006dd	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  006e4	0f 84 5e 01 00
	00		 je	 $LN16@draw_missi

; 7903 : 				{
; 7904 : 					sprintf

  006ea	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  006f1	74 10		 je	 SHORT $LN55@draw_missi
  006f3	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  006f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  006fb	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv298[ebp], ecx
  00701	eb 27		 jmp	 SHORT $LN56@draw_missi
$LN55@draw_missi:
  00703	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00709	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  0070f	52		 push	 edx
  00710	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00715	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0071a	50		 push	 eax
  0071b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00720	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv298[ebp], 0
$LN56@draw_missi:
  0072a	b9 01 00 00 00	 mov	 ecx, 1
  0072f	85 c9		 test	 ecx, ecx
  00731	74 0c		 je	 SHORT $LN57@draw_missi
  00733	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv306[ebp], 74 ; 0000004aH
  0073d	eb 27		 jmp	 SHORT $LN58@draw_missi
$LN57@draw_missi:
  0073f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00745	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  0074b	52		 push	 edx
  0074c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00751	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00756	50		 push	 eax
  00757	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0075c	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv306[ebp], 0
$LN58@draw_missi:
  00766	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0076d	74 10		 je	 SHORT $LN59@draw_missi
  0076f	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00775	8b 11		 mov	 edx, DWORD PTR [ecx]
  00777	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv319[ebp], edx
  0077d	eb 26		 jmp	 SHORT $LN60@draw_missi
$LN59@draw_missi:
  0077f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00784	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  00789	50		 push	 eax
  0078a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0078f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00795	51		 push	 ecx
  00796	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0079b	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv319[ebp], 0
$LN60@draw_missi:
  007a5	ba 01 00 00 00	 mov	 edx, 1
  007aa	85 d2		 test	 edx, edx
  007ac	74 0c		 je	 SHORT $LN61@draw_missi
  007ae	c7 85 f0 ef ff
	ff 04 00 00 00	 mov	 DWORD PTR tv327[ebp], 4
  007b8	eb 26		 jmp	 SHORT $LN62@draw_missi
$LN61@draw_missi:
  007ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  007bf	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  007c4	50		 push	 eax
  007c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  007ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  007d0	51		 push	 ecx
  007d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007d6	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], 0
$LN62@draw_missi:
  007e0	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR _s2$[ebp]
  007e6	52		 push	 edx
  007e7	6a 4a		 push	 74			; 0000004aH
  007e9	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  007ef	50		 push	 eax
  007f0	69 8d fc ef ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv298[ebp], 1116
  007fa	8b 95 f8 ef ff
	ff		 mov	 edx, DWORD PTR tv306[ebp]
  00800	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  00807	ff d0		 call	 eax
  00809	50		 push	 eax
  0080a	6a 04		 push	 4
  0080c	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00812	51		 push	 ecx
  00813	6b 95 f4 ef ff
	ff 34		 imul	 edx, DWORD PTR tv319[ebp], 52
  0081a	8b 85 f0 ef ff
	ff		 mov	 eax, DWORD PTR tv327[ebp]
  00820	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00827	ff d1		 call	 ecx
  00829	50		 push	 eax
  0082a	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  0082e	52		 push	 edx
  0082f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@
  00834	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0083a	50		 push	 eax
  0083b	e8 00 00 00 00	 call	 _sprintf
  00840	83 c4 18	 add	 esp, 24			; 00000018H

; 7905 : 					(
; 7906 : 						s1,
; 7907 : 						"%c%s 1-%d %s",
; 7908 : 						c,
; 7909 : 						get_local_entity_string (group, STRING_TYPE_GROUP_CALLSIGN),
; 7910 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID),
; 7911 : 						s2
; 7912 : 					);
; 7913 : 				}
; 7914 : 				else

  00843	e9 bf 00 00 00	 jmp	 $LN17@draw_missi
$LN16@draw_missi:

; 7915 : 				{
; 7916 : 					sprintf

  00848	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0084f	74 10		 je	 SHORT $LN63@draw_missi
  00851	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00857	8b 08		 mov	 ecx, DWORD PTR [eax]
  00859	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv345[ebp], ecx
  0085f	eb 27		 jmp	 SHORT $LN64@draw_missi
$LN63@draw_missi:
  00861	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00867	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  0086d	52		 push	 edx
  0086e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00873	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00878	50		 push	 eax
  00879	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0087e	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv345[ebp], 0
$LN64@draw_missi:
  00888	b9 01 00 00 00	 mov	 ecx, 1
  0088d	85 c9		 test	 ecx, ecx
  0088f	74 0c		 je	 SHORT $LN65@draw_missi
  00891	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv353[ebp], 74 ; 0000004aH
  0089b	eb 27		 jmp	 SHORT $LN66@draw_missi
$LN65@draw_missi:
  0089d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  008a3	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  008a9	52		 push	 edx
  008aa	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  008af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008b4	50		 push	 eax
  008b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008ba	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv353[ebp], 0
$LN66@draw_missi:
  008c4	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _s2$[ebp]
  008ca	51		 push	 ecx
  008cb	6a 4a		 push	 74			; 0000004aH
  008cd	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  008d3	52		 push	 edx
  008d4	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv345[ebp], 1116
  008de	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv353[ebp]
  008e4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  008eb	ff d2		 call	 edx
  008ed	50		 push	 eax
  008ee	0f b6 45 ff	 movzx	 eax, BYTE PTR _c$[ebp]
  008f2	50		 push	 eax
  008f3	68 00 00 00 00	 push	 OFFSET ??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@
  008f8	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  008fe	51		 push	 ecx
  008ff	e8 00 00 00 00	 call	 _sprintf
  00904	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@draw_missi:

; 7917 : 					(
; 7918 : 						s1,
; 7919 : 						"%c1-%d %s",
; 7920 : 						c,
; 7921 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID),
; 7922 : 						s2
; 7923 : 					);
; 7924 : 				}
; 7925 : 			}
; 7926 : 			else

  00907	e9 1c 02 00 00	 jmp	 $LN19@draw_missi
$LN14@draw_missi:

; 7927 : 			{
; 7928 : 				if (get_global_current_language () != LANGUAGE_RUSSIAN)

  0090c	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  00913	0f 84 57 01 00
	00		 je	 $LN18@draw_missi

; 7929 : 				{
; 7930 : 					sprintf

  00919	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00920	74 10		 je	 SHORT $LN67@draw_missi
  00922	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00928	8b 08		 mov	 ecx, DWORD PTR [eax]
  0092a	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv371[ebp], ecx
  00930	eb 27		 jmp	 SHORT $LN68@draw_missi
$LN67@draw_missi:
  00932	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00938	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  0093e	52		 push	 edx
  0093f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00944	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00949	50		 push	 eax
  0094a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0094f	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv371[ebp], 0
$LN68@draw_missi:
  00959	b9 01 00 00 00	 mov	 ecx, 1
  0095e	85 c9		 test	 ecx, ecx
  00960	74 0c		 je	 SHORT $LN69@draw_missi
  00962	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv379[ebp], 74 ; 0000004aH
  0096c	eb 27		 jmp	 SHORT $LN70@draw_missi
$LN69@draw_missi:
  0096e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00974	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  0097a	52		 push	 edx
  0097b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00980	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00985	50		 push	 eax
  00986	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0098b	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv379[ebp], 0
$LN70@draw_missi:
  00995	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0099c	74 10		 je	 SHORT $LN71@draw_missi
  0099e	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  009a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  009a6	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv392[ebp], edx
  009ac	eb 26		 jmp	 SHORT $LN72@draw_missi
$LN71@draw_missi:
  009ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  009b3	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  009b8	50		 push	 eax
  009b9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  009be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009c4	51		 push	 ecx
  009c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009ca	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv392[ebp], 0
$LN72@draw_missi:
  009d4	ba 01 00 00 00	 mov	 edx, 1
  009d9	85 d2		 test	 edx, edx
  009db	74 0c		 je	 SHORT $LN73@draw_missi
  009dd	c7 85 f0 ef ff
	ff 04 00 00 00	 mov	 DWORD PTR tv400[ebp], 4
  009e7	eb 26		 jmp	 SHORT $LN74@draw_missi
$LN73@draw_missi:
  009e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  009ee	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  009f3	50		 push	 eax
  009f4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  009f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  009ff	51		 push	 ecx
  00a00	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a05	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv400[ebp], 0
$LN74@draw_missi:
  00a0f	6a 4a		 push	 74			; 0000004aH
  00a11	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  00a17	52		 push	 edx
  00a18	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv371[ebp], 1116
  00a22	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv379[ebp]
  00a28	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a2f	ff d2		 call	 edx
  00a31	50		 push	 eax
  00a32	6a 04		 push	 4
  00a34	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00a3a	50		 push	 eax
  00a3b	6b 8d f4 ef ff
	ff 34		 imul	 ecx, DWORD PTR tv392[ebp], 52
  00a42	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR tv400[ebp]
  00a48	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[ecx+edx*4]
  00a4f	ff d0		 call	 eax
  00a51	50		 push	 eax
  00a52	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00a56	51		 push	 ecx
  00a57	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@
  00a5c	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00a62	52		 push	 edx
  00a63	e8 00 00 00 00	 call	 _sprintf
  00a68	83 c4 14	 add	 esp, 20			; 00000014H

; 7931 : 					(
; 7932 : 						s1,
; 7933 : 						"%c%s 1-%d",
; 7934 : 						c,
; 7935 : 						get_local_entity_string (group, STRING_TYPE_GROUP_CALLSIGN),
; 7936 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID)
; 7937 : 					);
; 7938 : 				}
; 7939 : 				else

  00a6b	e9 b8 00 00 00	 jmp	 $LN19@draw_missi
$LN18@draw_missi:

; 7940 : 				{
; 7941 : 					sprintf

  00a70	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00a77	74 10		 je	 SHORT $LN75@draw_missi
  00a79	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00a7f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a81	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv417[ebp], ecx
  00a87	eb 27		 jmp	 SHORT $LN76@draw_missi
$LN75@draw_missi:
  00a89	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00a8f	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00a95	52		 push	 edx
  00a96	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00aa0	50		 push	 eax
  00aa1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00aa6	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv417[ebp], 0
$LN76@draw_missi:
  00ab0	b9 01 00 00 00	 mov	 ecx, 1
  00ab5	85 c9		 test	 ecx, ecx
  00ab7	74 0c		 je	 SHORT $LN77@draw_missi
  00ab9	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv425[ebp], 74 ; 0000004aH
  00ac3	eb 27		 jmp	 SHORT $LN78@draw_missi
$LN77@draw_missi:
  00ac5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00acb	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00ad1	52		 push	 edx
  00ad2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ad7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00adc	50		 push	 eax
  00add	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ae2	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv425[ebp], 0
$LN78@draw_missi:
  00aec	6a 4a		 push	 74			; 0000004aH
  00aee	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  00af4	51		 push	 ecx
  00af5	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv417[ebp], 1116
  00aff	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv425[ebp]
  00b05	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00b0c	ff d1		 call	 ecx
  00b0e	50		 push	 eax
  00b0f	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  00b13	52		 push	 edx
  00b14	68 00 00 00 00	 push	 OFFSET ??_C@_06IAHIIHDD@?$CFc1?9?$CFd@
  00b19	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00b1f	50		 push	 eax
  00b20	e8 00 00 00 00	 call	 _sprintf
  00b25	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@draw_missi:

; 7942 : 					(
; 7943 : 						s1,
; 7944 : 						"%c1-%d",
; 7945 : 						c,
; 7946 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID)
; 7947 : 					);
; 7948 : 				}
; 7949 : 			}
; 7950 : 
; 7951 : 			set_mono_font_position (x_min, y_adjust);

  00b28	51		 push	 ecx
  00b29	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b36	51		 push	 ecx
  00b37	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00b3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b44	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7952 : 
; 7953 : 			print_mono_font_max_length_string (s1);

  00b49	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00b4f	50		 push	 eax
  00b50	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7954 : 
; 7955 : 			y_adjust += char_height;

  00b55	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b5d	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  00b65	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7956 : 
; 7957 : 			member = get_local_entity_child_succ (member, LIST_TYPE_MEMBER);

  00b6d	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00b74	74 10		 je	 SHORT $LN79@draw_missi
  00b76	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00b7c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b7e	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv445[ebp], ecx
  00b84	eb 27		 jmp	 SHORT $LN80@draw_missi
$LN79@draw_missi:
  00b86	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00b8c	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00b92	52		 push	 edx
  00b93	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b98	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b9d	50		 push	 eax
  00b9e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ba3	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv445[ebp], 0
$LN80@draw_missi:
  00bad	b9 01 00 00 00	 mov	 ecx, 1
  00bb2	85 c9		 test	 ecx, ecx
  00bb4	74 0c		 je	 SHORT $LN81@draw_missi
  00bb6	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv453[ebp], 25 ; 00000019H
  00bc0	eb 27		 jmp	 SHORT $LN82@draw_missi
$LN81@draw_missi:
  00bc2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00bc8	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00bce	52		 push	 edx
  00bcf	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bd4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00bd9	50		 push	 eax
  00bda	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bdf	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv453[ebp], 0
$LN82@draw_missi:
  00be9	6a 19		 push	 25			; 00000019H
  00beb	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  00bf1	51		 push	 ecx
  00bf2	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv445[ebp], 180
  00bfc	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv453[ebp]
  00c02	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c09	ff d1		 call	 ecx
  00c0b	89 85 0c fe ff
	ff		 mov	 DWORD PTR _member$[ebp], eax

; 7958 : 		}

  00c11	e9 01 fa ff ff	 jmp	 $LN2@draw_missi
$LN3@draw_missi:

; 7959 : 
; 7960 : 		//
; 7961 : 		// formation
; 7962 : 		//
; 7963 : 
; 7964 : 		formation = get_local_entity_int_value (group, INT_TYPE_GROUP_FORMATION);

  00c16	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  00c1d	74 10		 je	 SHORT $LN83@draw_missi
  00c1f	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00c25	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c27	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv465[ebp], ecx
  00c2d	eb 27		 jmp	 SHORT $LN84@draw_missi
$LN83@draw_missi:
  00c2f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00c35	81 c2 da 00 00
	00		 add	 edx, 218		; 000000daH
  00c3b	52		 push	 edx
  00c3c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c41	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c46	50		 push	 eax
  00c47	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c4c	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv465[ebp], 0
$LN84@draw_missi:
  00c56	b9 01 00 00 00	 mov	 ecx, 1
  00c5b	85 c9		 test	 ecx, ecx
  00c5d	74 0c		 je	 SHORT $LN85@draw_missi
  00c5f	c7 85 f8 ef ff
	ff 47 00 00 00	 mov	 DWORD PTR tv473[ebp], 71 ; 00000047H
  00c69	eb 27		 jmp	 SHORT $LN86@draw_missi
$LN85@draw_missi:
  00c6b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00c71	81 c2 da 00 00
	00		 add	 edx, 218		; 000000daH
  00c77	52		 push	 edx
  00c78	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c7d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00c82	50		 push	 eax
  00c83	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c88	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv473[ebp], 0
$LN86@draw_missi:
  00c92	6a 47		 push	 71			; 00000047H
  00c94	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00c9a	51		 push	 ecx
  00c9b	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv465[ebp], 1116
  00ca5	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv473[ebp]
  00cab	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00cb2	ff d1		 call	 ecx
  00cb4	89 85 68 fe ff
	ff		 mov	 DWORD PTR _formation$[ebp], eax

; 7965 : 
; 7966 : 		sprintf (s1, "FORMATION:%s", formation_display_names[formation]);

  00cba	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _formation$[ebp]
  00cc0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?formation_display_names@@3PAPBDA[eax*4]
  00cc7	51		 push	 ecx
  00cc8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@
  00ccd	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00cd3	52		 push	 edx
  00cd4	e8 00 00 00 00	 call	 _sprintf
  00cd9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7967 : 
; 7968 : 		set_mono_font_position (x_min, y_adjust);

  00cdc	51		 push	 ecx
  00cdd	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00ce5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cea	51		 push	 ecx
  00ceb	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00cf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf8	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7969 : 
; 7970 : 		print_mono_font_max_length_string (s1);

  00cfd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00d03	50		 push	 eax
  00d04	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7971 : 
; 7972 : 		y_adjust += char_height + 2.0;

  00d09	f3 0f 5a 85 3c
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _char_height$[ebp]
  00d11	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00d19	f3 0f 5a 8d 34
	fe ff ff	 cvtss2sd xmm1, DWORD PTR _y_adjust$[ebp]
  00d21	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00d25	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00d29	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN6@draw_missi:

; 7973 : 	}
; 7974 : 
; 7975 : 	////////////////////////////////////////
; 7976 : 	//
; 7977 : 	// mission
; 7978 : 	//
; 7979 : 	////////////////////////////////////////
; 7980 : 
; 7981 : 	task = get_player_task (NULL);

  00d31	6a 00		 push	 0
  00d33	e8 00 00 00 00	 call	 ?get_player_task@@YGPAUENTITY@@PAU1@@Z ; get_player_task
  00d38	89 85 08 fe ff
	ff		 mov	 DWORD PTR _task$[ebp], eax

; 7982 : 
; 7983 : 	if (task)

  00d3e	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00d45	0f 84 ae 0c 00
	00		 je	 $LN20@draw_missi

; 7984 : 	{
; 7985 : 		ASSERT (get_local_entity_int_value (task, INT_TYPE_VISIBLE_TASK));

  00d4b	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00d52	74 10		 je	 SHORT $LN87@draw_missi
  00d54	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  00d5a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d5c	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv501[ebp], ecx
  00d62	eb 27		 jmp	 SHORT $LN88@draw_missi
$LN87@draw_missi:
  00d64	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00d6a	81 c2 ef 00 00
	00		 add	 edx, 239		; 000000efH
  00d70	52		 push	 edx
  00d71	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d76	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d7b	50		 push	 eax
  00d7c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d81	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN88@draw_missi:
  00d8b	b9 01 00 00 00	 mov	 ecx, 1
  00d90	85 c9		 test	 ecx, ecx
  00d92	74 0c		 je	 SHORT $LN89@draw_missi
  00d94	c7 85 f8 ef ff
	ff fa 00 00 00	 mov	 DWORD PTR tv509[ebp], 250 ; 000000faH
  00d9e	eb 27		 jmp	 SHORT $LN90@draw_missi
$LN89@draw_missi:
  00da0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00da6	81 c2 ef 00 00
	00		 add	 edx, 239		; 000000efH
  00dac	52		 push	 edx
  00dad	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00db2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00db7	50		 push	 eax
  00db8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dbd	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv509[ebp], 0
$LN90@draw_missi:
  00dc7	68 fa 00 00 00	 push	 250			; 000000faH
  00dcc	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  00dd2	51		 push	 ecx
  00dd3	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv501[ebp], 1116
  00ddd	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv509[ebp]
  00de3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00dea	ff d1		 call	 ecx
  00dec	85 c0		 test	 eax, eax
  00dee	75 1a		 jne	 SHORT $LN21@draw_missi
  00df0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00df5	05 ef 00 00 00	 add	 eax, 239		; 000000efH
  00dfa	50		 push	 eax
  00dfb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e00	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@
  00e05	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN21@draw_missi:

; 7986 : 
; 7987 : 		//
; 7988 : 		// title
; 7989 : 		//
; 7990 : 
; 7991 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00e0a	b8 04 00 00 00	 mov	 eax, 4
  00e0f	6b c8 13	 imul	 ecx, eax, 19
  00e12	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e18	52		 push	 edx
  00e19	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7992 : 
; 7993 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  00e1e	b8 04 00 00 00	 mov	 eax, 4
  00e23	6b c8 13	 imul	 ecx, eax, 19
  00e26	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e2c	52		 push	 edx
  00e2d	51		 push	 ecx
  00e2e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00e36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3b	51		 push	 ecx
  00e3c	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00e44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e49	51		 push	 ecx
  00e4a	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00e52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e57	51		 push	 ecx
  00e58	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00e60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e65	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7994 : 
; 7995 : 		y_adjust += 2.0;

  00e6a	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00e72	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00e7a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e7e	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7996 : 
; 7997 : 		x_adjust = get_mono_font_string_width ("MISSION") * 0.5;

  00e86	68 00 00 00 00	 push	 OFFSET ??_C@_07PPFPLHID@MISSION@
  00e8b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00e90	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1210[ebp]
  00e96	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1210[ebp]
  00e9e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00ea6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00eaa	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7998 : 
; 7999 : 		set_mono_font_position (x_mid - x_adjust, y_adjust);

  00eb2	51		 push	 ecx
  00eb3	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00ebb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec0	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  00ec8	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00ed0	51		 push	 ecx
  00ed1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed6	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8000 : 
; 8001 : 		print_mono_font_string ("MISSION");

  00edb	68 00 00 00 00	 push	 OFFSET ??_C@_07PPFPLHID@MISSION@
  00ee0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8002 : 
; 8003 : 		y_adjust += char_height;

  00ee5	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00eed	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  00ef5	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8004 : 
; 8005 : 		if (draw_large_mfd)

  00efd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f04	74 1c		 je	 SHORT $LN22@draw_missi

; 8006 : 		{
; 8007 : 			y_adjust -= 1.0;

  00f06	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f0e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00f16	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f1a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN22@draw_missi:

; 8008 : 		}
; 8009 : 
; 8010 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  00f22	b8 04 00 00 00	 mov	 eax, 4
  00f27	6b c8 13	 imul	 ecx, eax, 19
  00f2a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f30	52		 push	 edx
  00f31	51		 push	 ecx
  00f32	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f3f	51		 push	 ecx
  00f40	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00f48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4d	51		 push	 ecx
  00f4e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5b	51		 push	 ecx
  00f5c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00f64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f69	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8011 : 
; 8012 : 		if (draw_large_mfd)

  00f6e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f75	74 1e		 je	 SHORT $LN23@draw_missi

; 8013 : 		{
; 8014 : 			y_adjust += 3.0;

  00f77	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f7f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00f87	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f8b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8015 : 		}
; 8016 : 		else

  00f93	eb 1c		 jmp	 SHORT $LN24@draw_missi
$LN23@draw_missi:

; 8017 : 		{
; 8018 : 			y_adjust += 2.0;

  00f95	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f9d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00fa5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fa9	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN24@draw_missi:

; 8019 : 		}
; 8020 : 
; 8021 : 		set_mono_font_colour (MFD_COLOUR_RED);

  00fb1	b8 04 00 00 00	 mov	 eax, 4
  00fb6	6b c8 0f	 imul	 ecx, eax, 15
  00fb9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fbf	52		 push	 edx
  00fc0	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8022 : 
; 8023 : 		//
; 8024 : 		// type
; 8025 : 		//
; 8026 : 
; 8027 : 		sprintf (s1, "TYPE  :%s", get_local_entity_string (task, STRING_TYPE_SHORT_DISPLAY_NAME));

  00fc5	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00fcc	74 10		 je	 SHORT $LN91@draw_missi
  00fce	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  00fd4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fd6	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv571[ebp], ecx
  00fdc	eb 27		 jmp	 SHORT $LN92@draw_missi
$LN91@draw_missi:
  00fde	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00fe4	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  00fea	52		 push	 edx
  00feb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ff0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ff5	50		 push	 eax
  00ff6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ffb	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv571[ebp], 0
$LN92@draw_missi:
  01005	b9 01 00 00 00	 mov	 ecx, 1
  0100a	85 c9		 test	 ecx, ecx
  0100c	74 0c		 je	 SHORT $LN93@draw_missi
  0100e	c7 85 f8 ef ff
	ff 0c 00 00 00	 mov	 DWORD PTR tv579[ebp], 12 ; 0000000cH
  01018	eb 27		 jmp	 SHORT $LN94@draw_missi
$LN93@draw_missi:
  0101a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01020	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  01026	52		 push	 edx
  01027	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0102c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  01031	50		 push	 eax
  01032	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01037	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv579[ebp], 0
$LN94@draw_missi:
  01041	6a 0c		 push	 12			; 0000000cH
  01043	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01049	51		 push	 ecx
  0104a	6b 95 fc ef ff
	ff 34		 imul	 edx, DWORD PTR tv571[ebp], 52
  01051	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv579[ebp]
  01057	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  0105e	ff d1		 call	 ecx
  01060	50		 push	 eax
  01061	68 00 00 00 00	 push	 OFFSET ??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@
  01066	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  0106c	52		 push	 edx
  0106d	e8 00 00 00 00	 call	 _sprintf
  01072	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8028 : 
; 8029 : 		set_mono_font_position (x_min, y_adjust);

  01075	51		 push	 ecx
  01076	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0107e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01083	51		 push	 ecx
  01084	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0108c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01091	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8030 : 
; 8031 : 		print_mono_font_max_length_string (s1);

  01096	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0109c	50		 push	 eax
  0109d	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 8032 : 
; 8033 : 		y_adjust += char_height;

  010a2	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  010aa	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  010b2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8034 : 
; 8035 : 		if (draw_large_mfd)

  010ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  010c1	74 1c		 je	 SHORT $LN25@draw_missi

; 8036 : 		{
; 8037 : 			y_adjust += 2.0;

  010c3	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  010cb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  010d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010d7	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_missi:

; 8038 : 		}
; 8039 : 
; 8040 : 		//
; 8041 : 		// objective
; 8042 : 		//
; 8043 : 
; 8044 : 		objective = get_local_entity_parent (task, LIST_TYPE_TASK_DEPENDENT);

  010df	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  010e6	74 10		 je	 SHORT $LN95@draw_missi
  010e8	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  010ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  010f0	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv601[ebp], ecx
  010f6	eb 27		 jmp	 SHORT $LN96@draw_missi
$LN95@draw_missi:
  010f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  010fe	81 c2 2a 01 00
	00		 add	 edx, 298		; 0000012aH
  01104	52		 push	 edx
  01105	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0110a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0110f	50		 push	 eax
  01110	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01115	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv601[ebp], 0
$LN96@draw_missi:
  0111f	b9 01 00 00 00	 mov	 ecx, 1
  01124	85 c9		 test	 ecx, ecx
  01126	74 0c		 je	 SHORT $LN97@draw_missi
  01128	c7 85 f8 ef ff
	ff 27 00 00 00	 mov	 DWORD PTR tv609[ebp], 39 ; 00000027H
  01132	eb 27		 jmp	 SHORT $LN98@draw_missi
$LN97@draw_missi:
  01134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0113a	81 c2 2a 01 00
	00		 add	 edx, 298		; 0000012aH
  01140	52		 push	 edx
  01141	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01146	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0114b	50		 push	 eax
  0114c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01151	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN98@draw_missi:
  0115b	6a 27		 push	 39			; 00000027H
  0115d	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01163	51		 push	 ecx
  01164	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv601[ebp], 180
  0116e	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv609[ebp]
  01174	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0117b	ff d1		 call	 ecx
  0117d	89 85 00 fe ff
	ff		 mov	 DWORD PTR _objective$[ebp], eax

; 8045 : 
; 8046 : 		if (objective)

  01183	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _objective$[ebp], 0
  0118a	0f 84 e4 00 00
	00		 je	 $LN27@draw_missi

; 8047 : 		{
; 8048 : 			char
; 8049 : 				buffer[1024];
; 8050 : 
; 8051 : 			get_task_objective_mfd_display_string (task, buffer);

  01190	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  01196	50		 push	 eax
  01197	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0119d	51		 push	 ecx
  0119e	e8 00 00 00 00	 call	 ?get_task_objective_mfd_display_string@@YGXPAUENTITY@@PAD@Z ; get_task_objective_mfd_display_string

; 8052 : 
; 8053 : 			sprintf (s1, "OBJECT:%s", buffer);

  011a3	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  011a9	50		 push	 eax
  011aa	68 00 00 00 00	 push	 OFFSET ??_C@_09MMJDMDOM@OBJECT?3?$CFs@
  011af	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  011b5	51		 push	 ecx
  011b6	e8 00 00 00 00	 call	 _sprintf
  011bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8054 : 
; 8055 : 			set_mono_font_position (x_min, y_adjust);

  011be	51		 push	 ecx
  011bf	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  011c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011cc	51		 push	 ecx
  011cd	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  011d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011da	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8056 : 
; 8057 : 			print_mono_font_max_length_string (s1);

  011df	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  011e5	50		 push	 eax
  011e6	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 8058 : 
; 8059 : 			y_adjust += char_height;

  011eb	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  011f3	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  011fb	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8060 : 
; 8061 : 			set_mono_font_position (x_min, y_adjust);

  01203	51		 push	 ecx
  01204	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0120c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01211	51		 push	 ecx
  01212	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0121a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121f	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8062 : 
; 8063 : 			print_target_position (en, objective);

  01224	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _objective$[ebp]
  0122a	50		 push	 eax
  0122b	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  01231	51		 push	 ecx
  01232	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 8064 : 
; 8065 : 			y_adjust += char_height;

  01237	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0123f	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01247	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8066 : 
; 8067 : 			if (draw_large_mfd)

  0124f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01256	74 1c		 je	 SHORT $LN27@draw_missi

; 8068 : 			{
; 8069 : 				y_adjust += 2.0;

  01258	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01260	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01268	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0126c	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN27@draw_missi:

; 8070 : 			}
; 8071 : 		}
; 8072 : 
; 8073 : 		//
; 8074 : 		// status
; 8075 : 		//
; 8076 : 
; 8077 : 		status_name = get_local_entity_int_value (task, INT_TYPE_TASK_COMPLETED);

  01274	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  0127b	74 10		 je	 SHORT $LN99@draw_missi
  0127d	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01283	8b 08		 mov	 ecx, DWORD PTR [eax]
  01285	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv640[ebp], ecx
  0128b	eb 27		 jmp	 SHORT $LN100@draw_missi
$LN99@draw_missi:
  0128d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01293	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  01299	52		 push	 edx
  0129a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0129f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012a4	50		 push	 eax
  012a5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012aa	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv640[ebp], 0
$LN100@draw_missi:
  012b4	b9 01 00 00 00	 mov	 ecx, 1
  012b9	85 c9		 test	 ecx, ecx
  012bb	74 0c		 je	 SHORT $LN101@draw_missi
  012bd	c7 85 f8 ef ff
	ff d9 00 00 00	 mov	 DWORD PTR tv648[ebp], 217 ; 000000d9H
  012c7	eb 27		 jmp	 SHORT $LN102@draw_missi
$LN101@draw_missi:
  012c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  012cf	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  012d5	52		 push	 edx
  012d6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  012db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  012e0	50		 push	 eax
  012e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012e6	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv648[ebp], 0
$LN102@draw_missi:
  012f0	68 d9 00 00 00	 push	 217			; 000000d9H
  012f5	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  012fb	51		 push	 ecx
  012fc	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv640[ebp], 1116
  01306	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv648[ebp]
  0130c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01313	ff d1		 call	 ecx
  01315	89 85 64 fe ff
	ff		 mov	 DWORD PTR _status_name$[ebp], eax

; 8078 : 
; 8079 : 		sprintf (s1, "STATUS:%s", task_status_names[status_name]);

  0131b	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _status_name$[ebp]
  01321	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?task_status_names@@3PAPBDA[eax*4]
  01328	51		 push	 ecx
  01329	68 00 00 00 00	 push	 OFFSET ??_C@_09NFLHCPML@STATUS?3?$CFs@
  0132e	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  01334	52		 push	 edx
  01335	e8 00 00 00 00	 call	 _sprintf
  0133a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8080 : 
; 8081 : 		set_mono_font_position (x_min, y_adjust);

  0133d	51		 push	 ecx
  0133e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0134b	51		 push	 ecx
  0134c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01359	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8082 : 
; 8083 : 		print_mono_font_max_length_string (s1);

  0135e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01364	50		 push	 eax
  01365	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 8084 : 
; 8085 : 		y_adjust += char_height;

  0136a	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01372	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0137a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8086 : 
; 8087 : 		if (draw_large_mfd)

  01382	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01389	74 1c		 je	 SHORT $LN28@draw_missi

; 8088 : 		{
; 8089 : 			y_adjust += 2.0;

  0138b	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01393	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0139b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0139f	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN28@draw_missi:

; 8090 : 		}
; 8091 : 
; 8092 : 		//
; 8093 : 		// start base
; 8094 : 		//
; 8095 : 
; 8096 : 		keysite = get_local_entity_parent (task, LIST_TYPE_ASSIGNED_TASK);

  013a7	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  013ae	74 10		 je	 SHORT $LN103@draw_missi
  013b0	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  013b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  013b8	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv673[ebp], ecx
  013be	eb 27		 jmp	 SHORT $LN104@draw_missi
$LN103@draw_missi:
  013c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  013c6	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  013cc	52		 push	 edx
  013cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  013d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  013d7	50		 push	 eax
  013d8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013dd	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv673[ebp], 0
$LN104@draw_missi:
  013e7	b9 01 00 00 00	 mov	 ecx, 1
  013ec	85 c9		 test	 ecx, ecx
  013ee	74 0c		 je	 SHORT $LN105@draw_missi
  013f0	c7 85 f8 ef ff
	ff 03 00 00 00	 mov	 DWORD PTR tv681[ebp], 3
  013fa	eb 27		 jmp	 SHORT $LN106@draw_missi
$LN105@draw_missi:
  013fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01402	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  01408	52		 push	 edx
  01409	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0140e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01413	50		 push	 eax
  01414	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01419	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv681[ebp], 0
$LN106@draw_missi:
  01423	6a 03		 push	 3
  01425	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0142b	51		 push	 ecx
  0142c	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv673[ebp], 180
  01436	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv681[ebp]
  0143c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01443	ff d1		 call	 ecx
  01445	89 85 04 fe ff
	ff		 mov	 DWORD PTR _keysite$[ebp], eax

; 8097 : 
; 8098 : 		if (keysite)

  0144b	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _keysite$[ebp], 0
  01452	0f 84 e4 00 00
	00		 je	 $LN30@draw_missi

; 8099 : 		{
; 8100 : 			char
; 8101 : 				buffer[1024];
; 8102 : 
; 8103 : 			get_keysite_entity_mfd_display_name (keysite, buffer);

  01458	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  0145e	50		 push	 eax
  0145f	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _keysite$[ebp]
  01465	51		 push	 ecx
  01466	e8 00 00 00 00	 call	 ?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z ; get_keysite_entity_mfd_display_name

; 8104 : 
; 8105 : 			sprintf (s1, "START :%s", buffer);

  0146b	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01471	50		 push	 eax
  01472	68 00 00 00 00	 push	 OFFSET ??_C@_09MDEJFDEL@START?5?3?$CFs@
  01477	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  0147d	51		 push	 ecx
  0147e	e8 00 00 00 00	 call	 _sprintf
  01483	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8106 : 
; 8107 : 			set_mono_font_position (x_min, y_adjust);

  01486	51		 push	 ecx
  01487	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0148f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01494	51		 push	 ecx
  01495	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0149d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a2	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8108 : 
; 8109 : 			print_mono_font_max_length_string (s1);

  014a7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  014ad	50		 push	 eax
  014ae	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 8110 : 
; 8111 : 			y_adjust += char_height;

  014b3	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  014bb	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  014c3	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8112 : 
; 8113 : 			set_mono_font_position (x_min, y_adjust);

  014cb	51		 push	 ecx
  014cc	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  014d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d9	51		 push	 ecx
  014da	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  014e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e7	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8114 : 
; 8115 : 			print_target_position (en, keysite);

  014ec	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _keysite$[ebp]
  014f2	50		 push	 eax
  014f3	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  014f9	51		 push	 ecx
  014fa	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 8116 : 
; 8117 : 			y_adjust += char_height;

  014ff	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01507	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0150f	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8118 : 
; 8119 : 			if (draw_large_mfd)

  01517	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0151e	74 1c		 je	 SHORT $LN30@draw_missi

; 8120 : 			{
; 8121 : 				y_adjust += 2.0;

  01520	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01528	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01530	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01534	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN30@draw_missi:

; 8122 : 			}
; 8123 : 		}
; 8124 : 
; 8125 : 		//
; 8126 : 		// end base
; 8127 : 		//
; 8128 : 
; 8129 : 		keysite = (entity *) get_local_entity_ptr_value (task, PTR_TYPE_RETURN_KEYSITE);

  0153c	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  01543	74 10		 je	 SHORT $LN107@draw_missi
  01545	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  0154b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0154d	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv744[ebp], ecx
  01553	eb 27		 jmp	 SHORT $LN108@draw_missi
$LN107@draw_missi:
  01555	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0155b	81 c2 7f 01 00
	00		 add	 edx, 383		; 0000017fH
  01561	52		 push	 edx
  01562	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0156c	50		 push	 eax
  0156d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01572	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv744[ebp], 0
$LN108@draw_missi:
  0157c	b9 01 00 00 00	 mov	 ecx, 1
  01581	85 c9		 test	 ecx, ecx
  01583	74 0c		 je	 SHORT $LN109@draw_missi
  01585	c7 85 f8 ef ff
	ff 08 00 00 00	 mov	 DWORD PTR tv752[ebp], 8
  0158f	eb 27		 jmp	 SHORT $LN110@draw_missi
$LN109@draw_missi:
  01591	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01597	81 c2 7f 01 00
	00		 add	 edx, 383		; 0000017fH
  0159d	52		 push	 edx
  0159e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  015a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  015a8	50		 push	 eax
  015a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015ae	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv752[ebp], 0
$LN110@draw_missi:
  015b8	6a 08		 push	 8
  015ba	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  015c0	51		 push	 ecx
  015c1	6b 95 fc ef ff
	ff 50		 imul	 edx, DWORD PTR tv744[ebp], 80
  015c8	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv752[ebp]
  015ce	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA[edx+eax*4]
  015d5	ff d1		 call	 ecx
  015d7	89 85 04 fe ff
	ff		 mov	 DWORD PTR _keysite$[ebp], eax

; 8130 : 
; 8131 : 		if (keysite)

  015dd	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _keysite$[ebp], 0
  015e4	0f 84 e4 00 00
	00		 je	 $LN32@draw_missi

; 8132 : 		{
; 8133 : 			char
; 8134 : 				buffer[1024];
; 8135 : 
; 8136 : 			get_keysite_entity_mfd_display_name (keysite, buffer);

  015ea	8d 85 00 f2 ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  015f0	50		 push	 eax
  015f1	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _keysite$[ebp]
  015f7	51		 push	 ecx
  015f8	e8 00 00 00 00	 call	 ?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z ; get_keysite_entity_mfd_display_name

; 8137 : 
; 8138 : 			sprintf (s1, "END   :%s", buffer);

  015fd	8d 85 00 f2 ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  01603	50		 push	 eax
  01604	68 00 00 00 00	 push	 OFFSET ??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@
  01609	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  0160f	51		 push	 ecx
  01610	e8 00 00 00 00	 call	 _sprintf
  01615	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8139 : 
; 8140 : 			set_mono_font_position (x_min, y_adjust);

  01618	51		 push	 ecx
  01619	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01621	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01626	51		 push	 ecx
  01627	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0162f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01634	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8141 : 
; 8142 : 			print_mono_font_max_length_string (s1);

  01639	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0163f	50		 push	 eax
  01640	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 8143 : 
; 8144 : 			y_adjust += char_height;

  01645	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0164d	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01655	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8145 : 
; 8146 : 			set_mono_font_position (x_min, y_adjust);

  0165d	51		 push	 ecx
  0165e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01666	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166b	51		 push	 ecx
  0166c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01674	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01679	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8147 : 
; 8148 : 			print_target_position (en, keysite);

  0167e	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _keysite$[ebp]
  01684	50		 push	 eax
  01685	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  0168b	51		 push	 ecx
  0168c	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 8149 : 
; 8150 : 			y_adjust += char_height;

  01691	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01699	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  016a1	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8151 : 
; 8152 : 			if (draw_large_mfd)

  016a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  016b0	74 1c		 je	 SHORT $LN32@draw_missi

; 8153 : 			{
; 8154 : 				y_adjust += 2.0;

  016b2	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  016ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  016c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016c6	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN32@draw_missi:

; 8155 : 			}
; 8156 : 		}
; 8157 : 
; 8158 : 		//
; 8159 : 		// count (kills and losses)
; 8160 : 		//
; 8161 : 
; 8162 : 		sprintf

  016ce	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  016d5	74 10		 je	 SHORT $LN111@draw_missi
  016d7	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  016dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  016df	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv784[ebp], ecx
  016e5	eb 27		 jmp	 SHORT $LN112@draw_missi
$LN111@draw_missi:
  016e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  016ed	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  016f3	52		 push	 edx
  016f4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  016f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016fe	50		 push	 eax
  016ff	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01704	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv784[ebp], 0
$LN112@draw_missi:
  0170e	b9 01 00 00 00	 mov	 ecx, 1
  01713	85 c9		 test	 ecx, ecx
  01715	74 0c		 je	 SHORT $LN113@draw_missi
  01717	c7 85 f8 ef ff
	ff 7f 00 00 00	 mov	 DWORD PTR tv792[ebp], 127 ; 0000007fH
  01721	eb 27		 jmp	 SHORT $LN114@draw_missi
$LN113@draw_missi:
  01723	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01729	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  0172f	52		 push	 edx
  01730	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01735	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0173a	50		 push	 eax
  0173b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01740	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv792[ebp], 0
$LN114@draw_missi:
  0174a	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  01751	74 10		 je	 SHORT $LN115@draw_missi
  01753	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01759	8b 11		 mov	 edx, DWORD PTR [ecx]
  0175b	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv805[ebp], edx
  01761	eb 26		 jmp	 SHORT $LN116@draw_missi
$LN115@draw_missi:
  01763	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01768	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  0176d	50		 push	 eax
  0176e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01773	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01779	51		 push	 ecx
  0177a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0177f	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv805[ebp], 0
$LN116@draw_missi:
  01789	ba 01 00 00 00	 mov	 edx, 1
  0178e	85 d2		 test	 edx, edx
  01790	74 0c		 je	 SHORT $LN117@draw_missi
  01792	c7 85 f0 ef ff
	ff 72 00 00 00	 mov	 DWORD PTR tv813[ebp], 114 ; 00000072H
  0179c	eb 26		 jmp	 SHORT $LN118@draw_missi
$LN117@draw_missi:
  0179e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  017a3	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  017a8	50		 push	 eax
  017a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  017ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  017b4	51		 push	 ecx
  017b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017ba	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv813[ebp], 0
$LN118@draw_missi:
  017c4	6a 7f		 push	 127			; 0000007fH
  017c6	8b 95 08 fe ff
	ff		 mov	 edx, DWORD PTR _task$[ebp]
  017cc	52		 push	 edx
  017cd	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv784[ebp], 1116
  017d7	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv792[ebp]
  017dd	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  017e4	ff d2		 call	 edx
  017e6	50		 push	 eax
  017e7	6a 72		 push	 114			; 00000072H
  017e9	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  017ef	50		 push	 eax
  017f0	69 8d f4 ef ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv805[ebp], 1116
  017fa	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR tv813[ebp]
  01800	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  01807	ff d0		 call	 eax
  01809	50		 push	 eax
  0180a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@
  0180f	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  01815	51		 push	 ecx
  01816	e8 00 00 00 00	 call	 _sprintf
  0181b	83 c4 10	 add	 esp, 16			; 00000010H

; 8163 : 		(
; 8164 : 			s1,
; 8165 : 			"COUNT :Kills=%d Losses=%d",
; 8166 : 			get_local_entity_int_value (task, INT_TYPE_KILLS),
; 8167 : 			get_local_entity_int_value (task, INT_TYPE_LOSSES)
; 8168 : 		);
; 8169 : 
; 8170 : 		set_mono_font_position (x_min, y_adjust);

  0181e	51		 push	 ecx
  0181f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182c	51		 push	 ecx
  0182d	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183a	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8171 : 
; 8172 : 		print_mono_font_max_length_string (s1);

  0183f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01845	50		 push	 eax
  01846	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 8173 : 
; 8174 : 		y_adjust += char_height;

  0184b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01853	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0185b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8175 : 
; 8176 : 		if (draw_large_mfd)

  01863	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0186a	74 1c		 je	 SHORT $LN33@draw_missi

; 8177 : 		{
; 8178 : 			y_adjust += 2.0;

  0186c	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01874	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0187c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01880	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN33@draw_missi:

; 8179 : 		}
; 8180 : 
; 8181 : 		//
; 8182 : 		// time
; 8183 : 		//
; 8184 : 
; 8185 : 		mission_time = get_local_entity_float_value (task, FLOAT_TYPE_ELAPSED_MISSION_TIME);

  01888	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  0188f	74 10		 je	 SHORT $LN119@draw_missi
  01891	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01897	8b 08		 mov	 ecx, DWORD PTR [eax]
  01899	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv835[ebp], ecx
  0189f	eb 27		 jmp	 SHORT $LN120@draw_missi
$LN119@draw_missi:
  018a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  018a7	81 c2 b7 01 00
	00		 add	 edx, 439		; 000001b7H
  018ad	52		 push	 edx
  018ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  018b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018b8	50		 push	 eax
  018b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018be	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv835[ebp], 0
$LN120@draw_missi:
  018c8	b9 01 00 00 00	 mov	 ecx, 1
  018cd	85 c9		 test	 ecx, ecx
  018cf	74 0c		 je	 SHORT $LN121@draw_missi
  018d1	c7 85 f8 ef ff
	ff 22 00 00 00	 mov	 DWORD PTR tv843[ebp], 34 ; 00000022H
  018db	eb 27		 jmp	 SHORT $LN122@draw_missi
$LN121@draw_missi:
  018dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  018e3	81 c2 b7 01 00
	00		 add	 edx, 439		; 000001b7H
  018e9	52		 push	 edx
  018ea	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  018ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  018f4	50		 push	 eax
  018f5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018fa	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv843[ebp], 0
$LN122@draw_missi:
  01904	6a 22		 push	 34			; 00000022H
  01906	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0190c	51		 push	 ecx
  0190d	69 95 fc ef ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv835[ebp], 700
  01917	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv843[ebp]
  0191d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01924	ff d1		 call	 ecx
  01926	d9 9d 20 fe ff
	ff		 fstp	 DWORD PTR _mission_time$[ebp]

; 8186 : 
; 8187 : 		get_digital_clock_int_values (mission_time, &mission_hours, &mission_minutes, &mission_seconds);

  0192c	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _mission_seconds$[ebp]
  01932	50		 push	 eax
  01933	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR _mission_minutes$[ebp]
  01939	51		 push	 ecx
  0193a	8d 95 54 fe ff
	ff		 lea	 edx, DWORD PTR _mission_hours$[ebp]
  01940	52		 push	 edx
  01941	51		 push	 ecx
  01942	f3 0f 10 85 20
	fe ff ff	 movss	 xmm0, DWORD PTR _mission_time$[ebp]
  0194a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0194f	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 8188 : 
; 8189 : 		estimated_time = get_task_estimated_route_duration (task);

  01954	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  0195a	50		 push	 eax
  0195b	e8 00 00 00 00	 call	 ?get_task_estimated_route_duration@@YGMPAUENTITY@@@Z ; get_task_estimated_route_duration
  01960	d9 9d 1c fe ff
	ff		 fstp	 DWORD PTR _estimated_time$[ebp]

; 8190 : 
; 8191 : 		get_digital_clock_int_values (estimated_time, &estimated_hours, &estimated_minutes, &estimated_seconds);

  01966	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _estimated_seconds$[ebp]
  0196c	50		 push	 eax
  0196d	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR _estimated_minutes$[ebp]
  01973	51		 push	 ecx
  01974	8d 95 48 fe ff
	ff		 lea	 edx, DWORD PTR _estimated_hours$[ebp]
  0197a	52		 push	 edx
  0197b	51		 push	 ecx
  0197c	f3 0f 10 85 1c
	fe ff ff	 movss	 xmm0, DWORD PTR _estimated_time$[ebp]
  01984	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01989	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 8192 : 
; 8193 : 		sprintf

  0198e	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _estimated_seconds$[ebp]
  01994	50		 push	 eax
  01995	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _estimated_minutes$[ebp]
  0199b	51		 push	 ecx
  0199c	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _estimated_hours$[ebp]
  019a2	52		 push	 edx
  019a3	8b 85 4c fe ff
	ff		 mov	 eax, DWORD PTR _mission_seconds$[ebp]
  019a9	50		 push	 eax
  019aa	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _mission_minutes$[ebp]
  019b0	51		 push	 ecx
  019b1	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _mission_hours$[ebp]
  019b7	52		 push	 edx
  019b8	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@
  019bd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  019c3	50		 push	 eax
  019c4	e8 00 00 00 00	 call	 _sprintf
  019c9	83 c4 20	 add	 esp, 32			; 00000020H

; 8194 : 		(
; 8195 : 			s1,
; 8196 : 			"TIME  :MT=%02d:%02d:%02d MD=%02d:%02d:%02d",
; 8197 : 			mission_hours,
; 8198 : 			mission_minutes,
; 8199 : 			mission_seconds,
; 8200 : 			estimated_hours,
; 8201 : 			estimated_minutes,
; 8202 : 			estimated_seconds
; 8203 : 		);
; 8204 : 
; 8205 : 		set_mono_font_position (x_min, y_adjust);

  019cc	51		 push	 ecx
  019cd	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  019d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019da	51		 push	 ecx
  019db	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  019e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e8	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8206 : 
; 8207 : 		print_mono_font_max_length_string (s1);

  019ed	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  019f3	50		 push	 eax
  019f4	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string
$LN20@draw_missi:

; 8208 : 	}
; 8209 : 
; 8210 : 	////////////////////////////////////////
; 8211 : 	//
; 8212 : 	// time of day
; 8213 : 	//
; 8214 : 	////////////////////////////////////////
; 8215 : 
; 8216 : 	set_mono_font_colour (MFD_COLOUR_WHITE);

  019f9	b8 04 00 00 00	 mov	 eax, 4
  019fe	6b c8 13	 imul	 ecx, eax, 19
  01a01	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a07	52		 push	 edx
  01a08	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8217 : 
; 8218 : 	get_2d_float_screen_y_coordinate (-0.9, &y_adjust);

  01a0d	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _y_adjust$[ebp]
  01a13	50		 push	 eax
  01a14	51		 push	 ecx
  01a15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01a1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a22	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8219 : 
; 8220 : 	y_adjust -= 2.0;

  01a27	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a2f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  01a37	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a3b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8221 : 
; 8222 : 	draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  01a43	b8 04 00 00 00	 mov	 eax, 4
  01a48	6b c8 13	 imul	 ecx, eax, 19
  01a4b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a51	52		 push	 edx
  01a52	51		 push	 ecx
  01a53	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a60	51		 push	 ecx
  01a61	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  01a69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a6e	51		 push	 ecx
  01a6f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7c	51		 push	 ecx
  01a7d	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8223 : 
; 8224 : 	y_adjust += 2.0;

  01a8f	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a97	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01a9f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01aa3	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8225 : 
; 8226 : 	time = get_local_entity_float_value (get_session_entity (), FLOAT_TYPE_TIME_OF_DAY);

  01aab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  01ab2	74 0f		 je	 SHORT $LN123@draw_missi
  01ab4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01ab9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01abb	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv894[ebp], ecx
  01ac1	eb 27		 jmp	 SHORT $LN124@draw_missi
$LN123@draw_missi:
  01ac3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01ac9	81 c2 e0 01 00
	00		 add	 edx, 480		; 000001e0H
  01acf	52		 push	 edx
  01ad0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ad5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ada	50		 push	 eax
  01adb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ae0	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv894[ebp], 0
$LN124@draw_missi:
  01aea	b9 01 00 00 00	 mov	 ecx, 1
  01aef	85 c9		 test	 ecx, ecx
  01af1	74 0c		 je	 SHORT $LN125@draw_missi
  01af3	c7 85 f8 ef ff
	ff 8e 00 00 00	 mov	 DWORD PTR tv902[ebp], 142 ; 0000008eH
  01afd	eb 27		 jmp	 SHORT $LN126@draw_missi
$LN125@draw_missi:
  01aff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01b05	81 c2 e0 01 00
	00		 add	 edx, 480		; 000001e0H
  01b0b	52		 push	 edx
  01b0c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b11	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  01b16	50		 push	 eax
  01b17	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b1c	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv902[ebp], 0
$LN126@draw_missi:
  01b26	68 8e 00 00 00	 push	 142			; 0000008eH
  01b2b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01b31	51		 push	 ecx
  01b32	69 95 fc ef ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv894[ebp], 700
  01b3c	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv902[ebp]
  01b42	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01b49	ff d1		 call	 ecx
  01b4b	d9 9d 24 fe ff
	ff		 fstp	 DWORD PTR _time$[ebp]

; 8227 : 
; 8228 : 	get_digital_clock_int_values (time, &hours, &minutes, &seconds);

  01b51	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _seconds$[ebp]
  01b57	50		 push	 eax
  01b58	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$[ebp]
  01b5e	51		 push	 ecx
  01b5f	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR _hours$[ebp]
  01b65	52		 push	 edx
  01b66	51		 push	 ecx
  01b67	f3 0f 10 85 24
	fe ff ff	 movss	 xmm0, DWORD PTR _time$[ebp]
  01b6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b74	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 8229 : 
; 8230 : 	sprintf (s1, "%02d:%02d:%02d", hours, minutes, seconds);

  01b79	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _seconds$[ebp]
  01b7f	50		 push	 eax
  01b80	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _minutes$[ebp]
  01b86	51		 push	 ecx
  01b87	8b 95 60 fe ff
	ff		 mov	 edx, DWORD PTR _hours$[ebp]
  01b8d	52		 push	 edx
  01b8e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  01b93	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01b99	50		 push	 eax
  01b9a	e8 00 00 00 00	 call	 _sprintf
  01b9f	83 c4 14	 add	 esp, 20			; 00000014H

; 8231 : 
; 8232 : 	x_adjust = get_mono_font_string_width (s1) * 0.5;

  01ba2	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01ba8	50		 push	 eax
  01ba9	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01bae	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1457[ebp]
  01bb4	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1457[ebp]
  01bbc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01bc4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bc8	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8233 : 
; 8234 : 	set_mono_font_position (x_mid - x_adjust, y_adjust);

  01bd0	51		 push	 ecx
  01bd1	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01bd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bde	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  01be6	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01bee	51		 push	 ecx
  01bef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf4	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 8235 : 
; 8236 : 	print_mono_font_string (s1);

  01bf9	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01bff	50		 push	 eax
  01c00	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8237 : }

  01c05	5f		 pop	 edi
  01c06	5e		 pop	 esi
  01c07	5b		 pop	 ebx
  01c08	8b e5		 mov	 esp, ebp
  01c0a	5d		 pop	 ebp
  01c0b	c3		 ret	 0
?draw_mission_display_mfd@@YGXXZ ENDP			; draw_mission_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?print_target_position@@YGXPAUENTITY@@0@Z
_TEXT	SEGMENT
tv88 = -172						; size = 4
tv193 = -168						; size = 4
tv80 = -168						; size = 4
_position$ = -100					; size = 4
_range$ = -96						; size = 4
_bearing$ = -92						; size = 4
_z_sector$ = -88					; size = 4
_x_sector$ = -84					; size = 4
_s$ = -80						; size = 80
_source$ = 8						; size = 4
_target$ = 12						; size = 4
?print_target_position@@YGXPAUENTITY@@0@Z PROC		; print_target_position, COMDAT

; 7701 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7702 : 	char
; 7703 : 		s[80];
; 7704 : 
; 7705 : 	int
; 7706 : 		x_sector,
; 7707 : 		z_sector,
; 7708 : 		bearing;
; 7709 : 
; 7710 : 	float
; 7711 : 		range;
; 7712 : 
; 7713 : 	vec3d
; 7714 : 		*position;
; 7715 : 
; 7716 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@print_targ
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00017	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_targ:

; 7717 : 
; 7718 : 	ASSERT (target);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@print_targ
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00035	83 c0 11	 add	 eax, 17			; 00000011H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_targ:

; 7719 : 
; 7720 : 	position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00048	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0004c	74 0d		 je	 SHORT $LN7@print_targ
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], ecx
  00059	eb 24		 jmp	 SHORT $LN8@print_targ
$LN7@print_targ:
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00061	83 c2 13	 add	 edx, 19			; 00000013H
  00064	52		 push	 edx
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00075	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN8@print_targ:
  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	85 c9		 test	 ecx, ecx
  00086	74 0c		 je	 SHORT $LN9@print_targ
  00088	c7 85 54 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv88[ebp], 8
  00092	eb 24		 jmp	 SHORT $LN10@print_targ
$LN9@print_targ:
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  0009a	83 c2 13	 add	 edx, 19			; 00000013H
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ae	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN10@print_targ:
  000b8	6a 08		 push	 8
  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  000bd	51		 push	 ecx
  000be	6b 95 58 ff ff
	ff 60		 imul	 edx, DWORD PTR tv80[ebp], 96
  000c5	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv88[ebp]
  000cb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000d2	ff d1		 call	 ecx
  000d4	89 45 9c	 mov	 DWORD PTR _position$[ebp], eax

; 7721 : 
; 7722 : 	ASSERT (position);

  000d7	83 7d 9c 00	 cmp	 DWORD PTR _position$[ebp], 0
  000db	75 18		 jne	 SHORT $LN4@print_targ
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  000e2	83 c0 15	 add	 eax, 21			; 00000015H
  000e5	50		 push	 eax
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_08OAGMDKAF@position@
  000f0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@print_targ:

; 7723 : 
; 7724 : 	get_x_sector (x_sector, position->x);

  000f5	8d 45 ac	 lea	 eax, DWORD PTR _x_sector$[ebp]
  000f8	50		 push	 eax
  000f9	8b 4d 9c	 mov	 ecx, DWORD PTR _position$[ebp]
  000fc	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00100	51		 push	 ecx
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0010b	8b 45 ac	 mov	 eax, DWORD PTR _x_sector$[ebp]
  0010e	99		 cdq
  0010f	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00115	89 45 ac	 mov	 DWORD PTR _x_sector$[ebp], eax

; 7725 : 	get_z_sector (z_sector, position->z);

  00118	8d 45 a8	 lea	 eax, DWORD PTR _z_sector$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d 9c	 mov	 ecx, DWORD PTR _position$[ebp]
  0011f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00124	51		 push	 ecx
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0012f	8b 45 a8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  00132	99		 cdq
  00133	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00139	89 45 a8	 mov	 DWORD PTR _z_sector$[ebp], eax

; 7726 : 
; 7727 : 	bearing = (int) (deg (get_local_entity_target_bearing (source, target, &range)));

  0013c	8d 45 a0	 lea	 eax, DWORD PTR _range$[ebp]
  0013f	50		 push	 eax
  00140	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00143	51		 push	 ecx
  00144	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00147	52		 push	 edx
  00148	e8 00 00 00 00	 call	 ?get_local_entity_target_bearing@@YGMPAUENTITY@@0PAM@Z ; get_local_entity_target_bearing
  0014d	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR tv193[ebp]
  00153	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv193[ebp]
  0015b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00163	f3 0f 2c c0	 cvttss2si eax, xmm0
  00167	89 45 a4	 mov	 DWORD PTR _bearing$[ebp], eax

; 7728 : 
; 7729 : 	if (bearing == 0)

  0016a	83 7d a4 00	 cmp	 DWORD PTR _bearing$[ebp], 0
  0016e	75 07		 jne	 SHORT $LN5@print_targ

; 7730 : 	{
; 7731 : 		bearing = 360;

  00170	c7 45 a4 68 01
	00 00		 mov	 DWORD PTR _bearing$[ebp], 360 ; 00000168H
$LN5@print_targ:

; 7732 : 	}
; 7733 : 
; 7734 : 	range *= (float) (1.0 / 1000.0);

  00177	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _range$[ebp]
  0017c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a83126f
  00184	f3 0f 11 45 a0	 movss	 DWORD PTR _range$[ebp], xmm0

; 7735 : 
; 7736 : 	sprintf (s, "       <%03d,%03d> %6.1fKm %3d\x7f", x_sector, z_sector, range, bearing);

  00189	8b 45 a4	 mov	 eax, DWORD PTR _bearing$[ebp]
  0018c	50		 push	 eax
  0018d	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00192	83 ec 08	 sub	 esp, 8
  00195	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0019a	8b 4d a8	 mov	 ecx, DWORD PTR _z_sector$[ebp]
  0019d	51		 push	 ecx
  0019e	8b 55 ac	 mov	 edx, DWORD PTR _x_sector$[ebp]
  001a1	52		 push	 edx
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@
  001a7	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 _sprintf
  001b0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 7737 : 
; 7738 : 	print_mono_font_max_length_string (s);

  001b3	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7739 : }

  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 08 00	 ret	 8
?print_target_position@@YGXPAUENTITY@@0@Z ENDP		; print_target_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z
_TEXT	SEGMENT
tv222 = -84						; size = 4
tv201 = -84						; size = 4
tv179 = -84						; size = 4
tv158 = -84						; size = 4
tv139 = -84						; size = 4
tv86 = -84						; size = 4
tv214 = -80						; size = 4
tv193 = -80						; size = 4
tv171 = -80						; size = 4
tv151 = -80						; size = 4
tv131 = -80						; size = 4
tv79 = -80						; size = 4
_aircrew$ = -12						; size = 4
_name$ = -8						; size = 4
_rank$ = -4						; size = 4
_en$ = 8						; size = 4
_buffer$ = 12						; size = 4
?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z PROC	; get_player_rank_and_name, COMDAT

; 7652 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7653 : 	const char
; 7654 : 		*rank,
; 7655 : 		*name;
; 7656 : 
; 7657 : 	entity
; 7658 : 		*aircrew;
; 7659 : 
; 7660 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@get_player
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_player:

; 7661 : 
; 7662 : 	ASSERT (buffer);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN5@get_player
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00032	83 c0 0a	 add	 eax, 10			; 0000000aH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_player:

; 7663 : 
; 7664 : 	if (get_local_entity_int_value (en, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  00045	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00049	74 0a		 je	 SHORT $LN11@get_player
  0004b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d b0	 mov	 DWORD PTR tv79[ebp], ecx
  00053	eb 1d		 jmp	 SHORT $LN12@get_player
$LN11@get_player:
  00055	68 f0 1d 00 00	 push	 7664			; 00001df0H
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN12@get_player:
  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	85 c0		 test	 eax, eax
  00079	74 09		 je	 SHORT $LN13@get_player
  0007b	c7 45 ac 9c 00
	00 00		 mov	 DWORD PTR tv86[ebp], 156 ; 0000009cH
  00082	eb 1d		 jmp	 SHORT $LN14@get_player
$LN13@get_player:
  00084	68 f0 1d 00 00	 push	 7664			; 00001df0H
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN14@get_player:
  000a1	68 9c 00 00 00	 push	 156			; 0000009cH
  000a6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000a9	52		 push	 edx
  000aa	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv79[ebp], 1116
  000b1	8b 4d ac	 mov	 ecx, DWORD PTR tv86[ebp]
  000b4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000bb	ff d2		 call	 edx
  000bd	85 c0		 test	 eax, eax
  000bf	0f 84 e7 02 00
	00		 je	 $LN6@get_player

; 7665 : 	{
; 7666 : 		aircrew = get_local_entity_first_child (en, LIST_TYPE_AIRCREW);

  000c5	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000c9	74 0a		 je	 SHORT $LN15@get_player
  000cb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	89 4d b0	 mov	 DWORD PTR tv131[ebp], ecx
  000d3	eb 21		 jmp	 SHORT $LN16@get_player
$LN15@get_player:
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  000db	83 c2 0e	 add	 edx, 14			; 0000000eH
  000de	52		 push	 edx
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ef	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN16@get_player:
  000f6	b9 01 00 00 00	 mov	 ecx, 1
  000fb	85 c9		 test	 ecx, ecx
  000fd	74 09		 je	 SHORT $LN17@get_player
  000ff	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
  00106	eb 21		 jmp	 SHORT $LN18@get_player
$LN17@get_player:
  00108	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  0010e	83 c2 0e	 add	 edx, 14			; 0000000eH
  00111	52		 push	 edx
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00122	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN18@get_player:
  00129	6a 01		 push	 1
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0012e	51		 push	 ecx
  0012f	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv131[ebp], 180
  00136	8b 45 ac	 mov	 eax, DWORD PTR tv139[ebp]
  00139	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00140	ff d1		 call	 ecx
  00142	89 45 f4	 mov	 DWORD PTR _aircrew$[ebp], eax
$LN2@get_player:

; 7667 : 
; 7668 : 		while (aircrew)

  00145	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00149	0f 84 03 01 00
	00		 je	 $LN3@get_player

; 7669 : 		{
; 7670 : 			if (get_local_entity_int_value (aircrew, INT_TYPE_ENTITY_SUB_TYPE) == ENTITY_SUB_TYPE_PILOT_PILOT)

  0014f	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00153	74 0a		 je	 SHORT $LN19@get_player
  00155	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  00158	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015a	89 4d b0	 mov	 DWORD PTR tv151[ebp], ecx
  0015d	eb 1d		 jmp	 SHORT $LN20@get_player
$LN19@get_player:
  0015f	68 f6 1d 00 00	 push	 7670			; 00001df6H
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00169	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0016f	52		 push	 edx
  00170	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00175	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN20@get_player:
  0017c	b8 01 00 00 00	 mov	 eax, 1
  00181	85 c0		 test	 eax, eax
  00183	74 09		 je	 SHORT $LN21@get_player
  00185	c7 45 ac 34 00
	00 00		 mov	 DWORD PTR tv158[ebp], 52 ; 00000034H
  0018c	eb 1d		 jmp	 SHORT $LN22@get_player
$LN21@get_player:
  0018e	68 f6 1d 00 00	 push	 7670			; 00001df6H
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00198	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0019e	51		 push	 ecx
  0019f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN22@get_player:
  001ab	6a 34		 push	 52			; 00000034H
  001ad	8b 55 f4	 mov	 edx, DWORD PTR _aircrew$[ebp]
  001b0	52		 push	 edx
  001b1	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv151[ebp], 1116
  001b8	8b 4d ac	 mov	 ecx, DWORD PTR tv158[ebp]
  001bb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  001c2	ff d2		 call	 edx
  001c4	85 c0		 test	 eax, eax
  001c6	75 05		 jne	 SHORT $LN7@get_player

; 7671 : 			{
; 7672 : 				break;

  001c8	e9 85 00 00 00	 jmp	 $LN3@get_player
$LN7@get_player:

; 7673 : 			}
; 7674 : 
; 7675 : 			aircrew = get_local_entity_child_succ (aircrew, LIST_TYPE_AIRCREW);

  001cd	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  001d1	74 0a		 je	 SHORT $LN23@get_player
  001d3	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  001d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d8	89 4d b0	 mov	 DWORD PTR tv171[ebp], ecx
  001db	eb 21		 jmp	 SHORT $LN24@get_player
$LN23@get_player:
  001dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  001e3	83 c2 17	 add	 edx, 23			; 00000017H
  001e6	52		 push	 edx
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv171[ebp], 0
$LN24@get_player:
  001fe	b9 01 00 00 00	 mov	 ecx, 1
  00203	85 c9		 test	 ecx, ecx
  00205	74 09		 je	 SHORT $LN25@get_player
  00207	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv179[ebp], 1
  0020e	eb 21		 jmp	 SHORT $LN26@get_player
$LN25@get_player:
  00210	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00216	83 c2 17	 add	 edx, 23			; 00000017H
  00219	52		 push	 edx
  0021a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0021f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0022a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], 0
$LN26@get_player:
  00231	6a 01		 push	 1
  00233	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  00236	51		 push	 ecx
  00237	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv171[ebp], 180
  0023e	8b 45 ac	 mov	 eax, DWORD PTR tv179[ebp]
  00241	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00248	ff d1		 call	 ecx
  0024a	89 45 f4	 mov	 DWORD PTR _aircrew$[ebp], eax

; 7676 : 		}

  0024d	e9 f3 fe ff ff	 jmp	 $LN2@get_player
$LN3@get_player:

; 7677 : 
; 7678 : 		if (aircrew)

  00252	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00256	0f 84 50 01 00
	00		 je	 $LN6@get_player

; 7679 : 		{
; 7680 : 			rank = get_untranslated_pilot_rank_short_name (get_local_entity_int_value (aircrew, INT_TYPE_PILOT_RANK));

  0025c	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00260	74 0a		 je	 SHORT $LN27@get_player
  00262	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  00265	8b 08		 mov	 ecx, DWORD PTR [eax]
  00267	89 4d b0	 mov	 DWORD PTR tv193[ebp], ecx
  0026a	eb 21		 jmp	 SHORT $LN28@get_player
$LN27@get_player:
  0026c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00272	83 c2 1c	 add	 edx, 28			; 0000001cH
  00275	52		 push	 edx
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00286	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN28@get_player:
  0028d	b9 01 00 00 00	 mov	 ecx, 1
  00292	85 c9		 test	 ecx, ecx
  00294	74 09		 je	 SHORT $LN29@get_player
  00296	c7 45 ac 9a 00
	00 00		 mov	 DWORD PTR tv201[ebp], 154 ; 0000009aH
  0029d	eb 21		 jmp	 SHORT $LN30@get_player
$LN29@get_player:
  0029f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  002a5	83 c2 1c	 add	 edx, 28			; 0000001cH
  002a8	52		 push	 edx
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b9	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv201[ebp], 0
$LN30@get_player:
  002c0	68 9a 00 00 00	 push	 154			; 0000009aH
  002c5	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  002c8	51		 push	 ecx
  002c9	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv193[ebp], 1116
  002d0	8b 45 ac	 mov	 eax, DWORD PTR tv201[ebp]
  002d3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  002da	ff d1		 call	 ecx
  002dc	50		 push	 eax
  002dd	e8 00 00 00 00	 call	 ?get_untranslated_pilot_rank_short_name@@YGPBDH@Z ; get_untranslated_pilot_rank_short_name
  002e2	89 45 fc	 mov	 DWORD PTR _rank$[ebp], eax

; 7681 : 
; 7682 : 			name = get_local_entity_string (aircrew, STRING_TYPE_PILOTS_NAME);

  002e5	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  002e9	74 0a		 je	 SHORT $LN31@get_player
  002eb	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  002ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f0	89 4d b0	 mov	 DWORD PTR tv214[ebp], ecx
  002f3	eb 21		 jmp	 SHORT $LN32@get_player
$LN31@get_player:
  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  002fb	83 c2 1e	 add	 edx, 30			; 0000001eH
  002fe	52		 push	 edx
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00304	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0030f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
$LN32@get_player:
  00316	b9 01 00 00 00	 mov	 ecx, 1
  0031b	85 c9		 test	 ecx, ecx
  0031d	74 09		 je	 SHORT $LN33@get_player
  0031f	c7 45 ac 0a 00
	00 00		 mov	 DWORD PTR tv222[ebp], 10 ; 0000000aH
  00326	eb 21		 jmp	 SHORT $LN34@get_player
$LN33@get_player:
  00328	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  0032e	83 c2 1e	 add	 edx, 30			; 0000001eH
  00331	52		 push	 edx
  00332	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00337	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00342	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv222[ebp], 0
$LN34@get_player:
  00349	6a 0a		 push	 10			; 0000000aH
  0034b	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  0034e	51		 push	 ecx
  0034f	6b 55 b0 34	 imul	 edx, DWORD PTR tv214[ebp], 52
  00353	8b 45 ac	 mov	 eax, DWORD PTR tv222[ebp]
  00356	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  0035d	ff d1		 call	 ecx
  0035f	89 45 f8	 mov	 DWORD PTR _name$[ebp], eax

; 7683 : 
; 7684 : 			if ((rank && strlen (rank)) && (name && strlen (name)))

  00362	83 7d fc 00	 cmp	 DWORD PTR _rank$[ebp], 0
  00366	74 44		 je	 SHORT $LN6@get_player
  00368	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  0036b	50		 push	 eax
  0036c	e8 00 00 00 00	 call	 _strlen
  00371	83 c4 04	 add	 esp, 4
  00374	85 c0		 test	 eax, eax
  00376	74 34		 je	 SHORT $LN6@get_player
  00378	83 7d f8 00	 cmp	 DWORD PTR _name$[ebp], 0
  0037c	74 2e		 je	 SHORT $LN6@get_player
  0037e	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00381	50		 push	 eax
  00382	e8 00 00 00 00	 call	 _strlen
  00387	83 c4 04	 add	 esp, 4
  0038a	85 c0		 test	 eax, eax
  0038c	74 1e		 je	 SHORT $LN6@get_player

; 7685 : 			{
; 7686 : 				sprintf (buffer, "%s %s", rank, name);

  0038e	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00391	50		 push	 eax
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _rank$[ebp]
  00395	51		 push	 ecx
  00396	68 00 00 00 00	 push	 OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
  0039b	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  0039e	52		 push	 edx
  0039f	e8 00 00 00 00	 call	 _sprintf
  003a4	83 c4 10	 add	 esp, 16			; 00000010H

; 7687 : 
; 7688 : 				return (buffer);

  003a7	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  003aa	eb 02		 jmp	 SHORT $LN1@get_player
$LN6@get_player:

; 7689 : 			}
; 7690 : 		}
; 7691 : 	}
; 7692 : 
; 7693 : 	return (NULL);

  003ac	33 c0		 xor	 eax, eax
$LN1@get_player:

; 7694 : }

  003ae	5f		 pop	 edi
  003af	5e		 pop	 esi
  003b0	5b		 pop	 ebx
  003b1	8b e5		 mov	 esp, ebp
  003b3	5d		 pop	 ebp
  003b4	c2 08 00	 ret	 8
?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z ENDP	; get_player_rank_and_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?print_mono_font_max_length_string@@YGXPAD@Z
_TEXT	SEGMENT
_buffer$ = -200						; size = 200
_s$ = 8							; size = 4
?print_mono_font_max_length_string@@YGXPAD@Z PROC	; print_mono_font_max_length_string, COMDAT

; 7636 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7637 : 	char
; 7638 : 		buffer[200];
; 7639 : 
; 7640 : 	ASSERT (s);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _s$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@print_mono
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_01LKDEMHDF@s@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_mono:

; 7641 : 
; 7642 : 	sprintf (buffer, "%.31s", s);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_05KEIIKJGB@?$CF?431s@
  00033	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _sprintf
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7643 : 
; 7644 : 	print_mono_font_string (buffer);

  00042	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7645 : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?print_mono_font_max_length_string@@YGXPAD@Z ENDP	; print_mono_font_max_length_string
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_flight_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv138 = -76						; size = 4
tv82 = -72						; size = 4
tv74 = -68						; size = 4
?draw_flight_display_mfd@@YGXXZ PROC			; draw_flight_display_mfd, COMDAT

; 7611 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7612 : 	set_mono_font_colour (MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7613 : 
; 7614 : 	draw_pitch_ladder ();

  0001d	e8 00 00 00 00	 call	 ?draw_pitch_ladder@@YGXXZ ; draw_pitch_ladder

; 7615 : 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING), TRUE);

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00029	74 0c		 je	 SHORT $LN3@draw_fligh
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d bc	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN4@draw_fligh
$LN3@draw_fligh:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  0003d	83 c2 04	 add	 edx, 4
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@draw_fligh:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN5@draw_fligh
  00061	c7 45 b8 34 00
	00 00		 mov	 DWORD PTR tv82[ebp], 52	; 00000034H
  00068	eb 21		 jmp	 SHORT $LN6@draw_fligh
$LN5@draw_fligh:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  00070	83 c2 04	 add	 edx, 4
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN6@draw_fligh:
  0008b	6a 01		 push	 1
  0008d	6a 34		 push	 52			; 00000034H
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00095	51		 push	 ecx
  00096	69 55 bc bc 02
	00 00		 imul	 edx, DWORD PTR tv74[ebp], 700
  0009d	8b 45 b8	 mov	 eax, DWORD PTR tv82[ebp]
  000a0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a7	ff d1		 call	 ecx
  000a9	d9 5d b4	 fstp	 DWORD PTR tv138[ebp]
  000ac	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv138[ebp]
  000b1	51		 push	 ecx
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXMH@Z ; draw_heading_scale

; 7616 : 
; 7617 : 	draw_airspeed_scale();

  000bc	e8 00 00 00 00	 call	 ?draw_airspeed_scale@@YGXXZ ; draw_airspeed_scale

; 7618 : 	draw_radar_altitude_scale();

  000c1	e8 00 00 00 00	 call	 ?draw_radar_altitude_scale@@YGXXZ ; draw_radar_altitude_scale

; 7619 : 	draw_barometric_altitude_scale();

  000c6	e8 00 00 00 00	 call	 ?draw_barometric_altitude_scale@@YGXXZ ; draw_barometric_altitude_scale

; 7620 : 
; 7621 : 	draw_torque_scale();

  000cb	e8 00 00 00 00	 call	 ?draw_torque_scale@@YGXXZ ; draw_torque_scale

; 7622 : 	display_navigation_info();

  000d0	e8 00 00 00 00	 call	 ?display_navigation_info@@YGXXZ ; display_navigation_info

; 7623 : }

  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
?draw_flight_display_mfd@@YGXXZ ENDP			; draw_flight_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_pitch_ladder@@YGXXZ
_TEXT	SEGMENT
tv970 = -332						; size = 8
tv792 = -332						; size = 8
tv772 = -332						; size = 8
tv754 = -332						; size = 8
tv1430 = -324						; size = 8
tv1231 = -324						; size = 8
tv1225 = -324						; size = 8
tv1217 = -324						; size = 8
tv971 = -324						; size = 8
tv793 = -324						; size = 8
tv773 = -324						; size = 8
tv755 = -324						; size = 8
tv238 = -324						; size = 4
tv95 = -324						; size = 4
tv1651 = -320						; size = 4
tv1623 = -320						; size = 4
tv1585 = -320						; size = 4
tv1210 = -320						; size = 4
tv1204 = -320						; size = 4
tv1192 = -320						; size = 4
tv407 = -320						; size = 4
tv230 = -320						; size = 4
tv191 = -320						; size = 4
tv87 = -320						; size = 4
_pitch_y$1 = -252					; size = 4
_buffer$2 = -248					; size = 8
_y_adjust$3 = -240					; size = 4
_x_adjust$4 = -236					; size = 4
_i$5 = -232						; size = 4
_x_tick$6 = -228					; size = 4
_x_half_tick$7 = -224					; size = 4
_x_end$8 = -220						; size = 4
_y_coarse_step$9 = -216					; size = 4
_y_fine_step$10 = -212					; size = 4
_y_coarse_height$11 = -208				; size = 4
_y_fine_height$12 = -204				; size = 4
_current_y$13 = -200					; size = 4
_right_colour$14 = -196					; size = 4
_left_colour$15 = -192					; size = 4
_tmp$16 = -188						; size = 4
_end_x$17 = -184					; size = 4
_start_x$18 = -180					; size = 4
_right_y$19 = -176					; size = 4
_left_y$20 = -172					; size = 4
_incline$21 = -168					; size = 4
_inverted$22 = -164					; size = 4
_tan_pitch$23 = -160					; size = 4
_y_horizon_abs$24 = -156				; size = 4
_x_horizon_abs$25 = -152				; size = 4
_ground_colour$ = -148					; size = 4
_sky_colour$ = -144					; size = 4
_x_adjust$ = -140					; size = 4
_y_10_deg_step$ = -136					; size = 4
_x_10_deg_step$ = -132					; size = 4
_y_horizon$ = -128					; size = 4
_x_horizon$ = -124					; size = 4
_y_scale$ = -120					; size = 4
_x_scale$ = -116					; size = 4
_lower_edge$ = -112					; size = 4
_upper_edge$ = -108					; size = 4
_right_edge$ = -104					; size = 4
_left_edge$ = -100					; size = 4
_y$ = -96						; size = 4
_x$ = -92						; size = 4
_v$ = -88						; size = 4
_u$ = -84						; size = 4
_roll$ = -80						; size = 4
_pitch_bar_scale$ = -76					; size = 4
_tan_mod_pitch$ = -72					; size = 4
_mod_pitch$ = -68					; size = 4
_pitch$ = -64						; size = 4
_vp_size$ = -60						; size = 4
_vsize$ = -56						; size = 4
_size$ = -52						; size = 4
_y_centre$ = -48					; size = 4
_x_centre$ = -44					; size = 4
_y_adjust_below_line$ = -40				; size = 4
_y_adjust_above_line$ = -36				; size = 4
_loop$ = -32						; size = 4
_step_direction$ = -28					; size = 4
_int_pitch$ = -24					; size = 4
_s$ = -20						; size = 20
?draw_pitch_ladder@@YGXXZ PROC				; draw_pitch_ladder, COMDAT

; 7171 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7172 : 	char
; 7173 : 		s[20];
; 7174 : 
; 7175 : 	int
; 7176 : 		int_pitch,
; 7177 : 		step_direction,
; 7178 : 		loop;
; 7179 : 
; 7180 : 	float
; 7181 : 		y_adjust_above_line,
; 7182 : 		y_adjust_below_line,
; 7183 : 		x_centre,
; 7184 : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 d0	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 7185 : 		size,
; 7186 : 		vsize,
; 7187 : 		vp_size,
; 7188 : 		pitch,
; 7189 : 		mod_pitch,
; 7190 : 		tan_mod_pitch,
; 7191 : 		pitch_bar_scale,
; 7192 : 		roll,
; 7193 : 		u,
; 7194 : 		v,
; 7195 : 		x,
; 7196 : 		y,
; 7197 : 		left_edge,
; 7198 : 		right_edge,
; 7199 : 		upper_edge,
; 7200 : 		lower_edge,
; 7201 : 		x_scale,
; 7202 : 		y_scale,
; 7203 : 		x_horizon,
; 7204 : 		y_horizon,
; 7205 : 		x_10_deg_step,
; 7206 : 		y_10_deg_step,
; 7207 : 		x_adjust;
; 7208 : 
; 7209 : 	rgb_colour
; 7210 : 		sky_colour,
; 7211 : 		ground_colour;
; 7212 : 
; 7213 : 	if (command_line_colour_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00020	74 3a		 je	 SHORT $LN16@draw_pitch

; 7214 : 	{
; 7215 : 		sky_colour.red = 44;

  00022	c6 85 72 ff ff
	ff 2c		 mov	 BYTE PTR _sky_colour$[ebp+2], 44 ; 0000002cH

; 7216 : 		sky_colour.green = 13;

  00029	c6 85 71 ff ff
	ff 0d		 mov	 BYTE PTR _sky_colour$[ebp+1], 13 ; 0000000dH

; 7217 : 		sky_colour.blue = 116;

  00030	c6 85 70 ff ff
	ff 74		 mov	 BYTE PTR _sky_colour$[ebp], 116 ; 00000074H

; 7218 : 		sky_colour.alpha = 255;

  00037	c6 85 73 ff ff
	ff ff		 mov	 BYTE PTR _sky_colour$[ebp+3], 255 ; 000000ffH

; 7219 : 
; 7220 : 		ground_colour.red = 155;

  0003e	c6 85 6e ff ff
	ff 9b		 mov	 BYTE PTR _ground_colour$[ebp+2], 155 ; 0000009bH

; 7221 : 		ground_colour.green = 131;

  00045	c6 85 6d ff ff
	ff 83		 mov	 BYTE PTR _ground_colour$[ebp+1], 131 ; 00000083H

; 7222 : 		ground_colour.blue = 107;

  0004c	c6 85 6c ff ff
	ff 6b		 mov	 BYTE PTR _ground_colour$[ebp], 107 ; 0000006bH

; 7223 : 		ground_colour.alpha = 255;

  00053	c6 85 6f ff ff
	ff ff		 mov	 BYTE PTR _ground_colour$[ebp+3], 255 ; 000000ffH

; 7224 : 	}
; 7225 : 	else

  0005a	eb 28		 jmp	 SHORT $LN17@draw_pitch
$LN16@draw_pitch:

; 7226 : 	{
; 7227 : 		sky_colour = MFD_COLOUR2;

  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	c1 e0 00	 shl	 eax, 0
  00064	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0006a	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _sky_colour$[ebp], ecx

; 7228 : 		ground_colour = MFD_COLOUR5;

  00070	b8 04 00 00 00	 mov	 eax, 4
  00075	c1 e0 02	 shl	 eax, 2
  00078	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0007e	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _ground_colour$[ebp], ecx
$LN17@draw_pitch:

; 7229 : 	}
; 7230 : 
; 7231 : 	if (draw_large_mfd)

  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0008b	74 23		 je	 SHORT $LN18@draw_pitch

; 7232 : 	{
; 7233 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  0008d	6a 02		 push	 2
  0008f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7234 : 
; 7235 : 		y_adjust_above_line = -3.0;

  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  0009c	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 7236 : 		y_adjust_below_line = -3.0;

  000a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000a9	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0

; 7237 : 	}
; 7238 : 	else

  000ae	eb 21		 jmp	 SHORT $LN19@draw_pitch
$LN18@draw_pitch:

; 7239 : 	{
; 7240 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000b0	6a 00		 push	 0
  000b2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7241 : 
; 7242 : 		y_adjust_above_line = -3.0;

  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000bf	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 7243 : 		y_adjust_below_line = -1.0;

  000c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000cc	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0
$LN19@draw_pitch:

; 7244 : 	}
; 7245 : 
; 7246 : 	x_centre = 0.0;

  000d1	0f 57 c0	 xorps	 xmm0, xmm0
  000d4	f3 0f 11 45 d4	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 7247 : 
; 7248 : 	size = 0.4;

  000d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  000e1	f3 0f 11 45 cc	 movss	 DWORD PTR _size$[ebp], xmm0

; 7249 : 	pitch_bar_scale = 0.6;

  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  000ee	f3 0f 11 45 b4	 movss	 DWORD PTR _pitch_bar_scale$[ebp], xmm0

; 7250 : 
; 7251 : 	vsize = size * 1.5;

  000f3	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  000f8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00100	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00104	f3 0f 11 45 c8	 movss	 DWORD PTR _vsize$[ebp], xmm0

; 7252 : 
; 7253 : 	//
; 7254 : 	//
; 7255 : 
; 7256 : 	get_2d_float_screen_coordinates (PITCH_DATUM_X, PITCH_DATUM_Y, &u, &v);

  00109	8d 45 a8	 lea	 eax, DWORD PTR _v$[ebp]
  0010c	50		 push	 eax
  0010d	8d 4d ac	 lea	 ecx, DWORD PTR _u$[ebp]
  00110	51		 push	 ecx
  00111	51		 push	 ecx
  00112	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0011a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011f	51		 push	 ecx
  00120	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7257 : 	roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  0012f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00136	74 0f		 je	 SHORT $LN36@draw_pitch
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0013d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013f	89 8d c0 fe ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00145	eb 24		 jmp	 SHORT $LN37@draw_pitch
$LN36@draw_pitch:
  00147	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  0014d	83 c2 56	 add	 edx, 86			; 00000056H
  00150	52		 push	 edx
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00156	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00161	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv87[ebp], 0
$LN37@draw_pitch:
  0016b	b9 01 00 00 00	 mov	 ecx, 1
  00170	85 c9		 test	 ecx, ecx
  00172	74 0c		 je	 SHORT $LN38@draw_pitch
  00174	c7 85 bc fe ff
	ff 71 00 00 00	 mov	 DWORD PTR tv95[ebp], 113 ; 00000071H
  0017e	eb 24		 jmp	 SHORT $LN39@draw_pitch
$LN38@draw_pitch:
  00180	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  00186	83 c2 56	 add	 edx, 86			; 00000056H
  00189	52		 push	 edx
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0019a	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv95[ebp], 0
$LN39@draw_pitch:
  001a4	6a 71		 push	 113			; 00000071H
  001a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  001ac	51		 push	 ecx
  001ad	69 95 c0 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv87[ebp], 700
  001b7	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv95[ebp]
  001bd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001c4	ff d1		 call	 ecx
  001c6	d9 5d b0	 fstp	 DWORD PTR _roll$[ebp]

; 7258 : 
; 7259 : //	set_2d_instance_position (mfd_env, PITCH_DATUM_X, PITCH_DATUM_Y - size);
; 7260 : 
; 7261 : 	//
; 7262 : 	// set 2D environment
; 7263 : 	//
; 7264 : 
; 7265 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * size, MFD_WINDOW_Y_MIN * size, MFD_WINDOW_X_MAX * size, MFD_WINDOW_Y_MAX * size);

  001c9	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001ce	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  001d6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001da	51		 push	 ecx
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001e5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  001ed	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f1	51		 push	 ecx
  001f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f7	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001fc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  00204	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00208	51		 push	 ecx
  00209	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020e	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00213	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  0021b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0021f	51		 push	 ecx
  00220	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00225	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 7266 : 
; 7267 : 	vp_size = mfd_viewport_size * size * 0.5;

  00230	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00238	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _size$[ebp]
  0023d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00241	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00249	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024d	f3 0f 11 45 c4	 movss	 DWORD PTR _vp_size$[ebp], xmm0

; 7268 : 	set_2d_viewport (mfd_env, u - (vp_size * 1.5), v - vp_size, u + (vp_size * 1.5) - 0.001, v + (2.0 * vp_size) - 0.001);

  00252	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  00257	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _vp_size$[ebp]
  0025c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  00264	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00268	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00270	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00274	51		 push	 ecx
  00275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027a	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  0027f	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _vp_size$[ebp]
  00284	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff8000000000000
  0028c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00290	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00298	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0029c	51		 push	 ecx
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _v$[ebp]
  002a7	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  002ac	51		 push	 ecx
  002ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b2	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  002b7	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _vp_size$[ebp]
  002bc	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff8000000000000
  002c4	f2 0f 5c c1	 subsd	 xmm0, xmm1
  002c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002cc	51		 push	 ecx
  002cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7269 : 
; 7270 : 	upper_edge = 0.5 * size;

  002dd	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002e2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	f3 0f 11 45 94	 movss	 DWORD PTR _upper_edge$[ebp], xmm0

; 7271 : 	left_edge = -(size * 0.75);

  002f3	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002f8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe8000000000000
  00300	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00307	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0030b	f3 0f 11 45 9c	 movss	 DWORD PTR _left_edge$[ebp], xmm0

; 7272 : 	right_edge = (size * 0.75);

  00310	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00315	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe8000000000000
  0031d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00321	f3 0f 11 45 98	 movss	 DWORD PTR _right_edge$[ebp], xmm0

; 7273 : 	lower_edge = -size;

  00326	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  0032b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00332	f3 0f 11 45 90	 movss	 DWORD PTR _lower_edge$[ebp], xmm0

; 7274 : 
; 7275 : //	set_2d_viewport (mfd_env, u + left_edge, v + upper_edge, u + right_edge, v + lower_edge);
; 7276 : 
; 7277 : 
; 7278 : 	//
; 7279 : 	// pitch
; 7280 : 	//
; 7281 : 
; 7282 : 	{
; 7283 : 		float
; 7284 : 			x_horizon_abs,
; 7285 : 			y_horizon_abs,
; 7286 : 			tan_pitch;
; 7287 : 
; 7288 : 		int inverted = (roll < -rad(90)) || (roll > rad(90));

  00337	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  0033f	0f 2f 45 b0	 comiss	 xmm0, DWORD PTR _roll$[ebp]
  00343	77 1a		 ja	 SHORT $LN40@draw_pitch
  00345	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0034a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3fc90fdb
  00351	77 0c		 ja	 SHORT $LN40@draw_pitch
  00353	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv191[ebp], 0
  0035d	eb 0a		 jmp	 SHORT $LN41@draw_pitch
$LN40@draw_pitch:
  0035f	c7 85 c0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv191[ebp], 1
$LN41@draw_pitch:
  00369	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv191[ebp]
  0036f	89 85 5c ff ff
	ff		 mov	 DWORD PTR _inverted$22[ebp], eax

; 7289 : 
; 7290 : 		pitch = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_PITCH);

  00375	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0037c	74 0f		 je	 SHORT $LN42@draw_pitch
  0037e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00383	8b 08		 mov	 ecx, DWORD PTR [eax]
  00385	89 8d c0 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], ecx
  0038b	eb 24		 jmp	 SHORT $LN43@draw_pitch
$LN42@draw_pitch:
  0038d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  00393	83 c2 77	 add	 edx, 119		; 00000077H
  00396	52		 push	 edx
  00397	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0039c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003a1	50		 push	 eax
  003a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003a7	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv230[ebp], 0
$LN43@draw_pitch:
  003b1	b9 01 00 00 00	 mov	 ecx, 1
  003b6	85 c9		 test	 ecx, ecx
  003b8	74 0c		 je	 SHORT $LN44@draw_pitch
  003ba	c7 85 bc fe ff
	ff 54 00 00 00	 mov	 DWORD PTR tv238[ebp], 84 ; 00000054H
  003c4	eb 24		 jmp	 SHORT $LN45@draw_pitch
$LN44@draw_pitch:
  003c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  003cc	83 c2 77	 add	 edx, 119		; 00000077H
  003cf	52		 push	 edx
  003d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  003d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  003da	50		 push	 eax
  003db	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e0	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv238[ebp], 0
$LN45@draw_pitch:
  003ea	6a 54		 push	 84			; 00000054H
  003ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003f2	51		 push	 ecx
  003f3	69 95 c0 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv230[ebp], 700
  003fd	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv238[ebp]
  00403	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0040a	ff d1		 call	 ecx
  0040c	d9 5d c0	 fstp	 DWORD PTR _pitch$[ebp]

; 7291 : 		tan_pitch = -tan(pitch);

  0040f	51		 push	 ecx
  00410	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00415	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041a	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  0041f	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1192[ebp]
  00425	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1192[ebp]
  0042d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00434	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tan_pitch$23[ebp], xmm0

; 7292 : 		mod_pitch = fmod (pitch, rad (10.0f));

  0043c	51		 push	 ecx
  0043d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	51		 push	 ecx
  0044b	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00450	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00455	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  0045a	d9 5d bc	 fstp	 DWORD PTR _mod_pitch$[ebp]

; 7293 : 		tan_mod_pitch = -tan (mod_pitch);

  0045d	51		 push	 ecx
  0045e	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _mod_pitch$[ebp]
  00463	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00468	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  0046d	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1204[ebp]
  00473	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1204[ebp]
  0047b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00482	f3 0f 11 45 b8	 movss	 DWORD PTR _tan_mod_pitch$[ebp], xmm0

; 7294 : 		int_pitch = (int) (pitch * (1.0 / rad (10.0)));

  00487	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  0048c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4016eb167e7d81e3
  00494	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00498	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 7295 : 
; 7296 : 		//
; 7297 : 		// get x and y scale factors
; 7298 : 		//
; 7299 : 
; 7300 : 		x_scale = -sin (roll) * 1.5 * pitch_bar_scale;

  0049b	51		 push	 ecx
  0049c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  004a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a6	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  004ab	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1210[ebp]
  004b1	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1210[ebp]
  004b9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004c0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  004c4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  004cc	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  004d1	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  004d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004d9	f3 0f 11 45 8c	 movss	 DWORD PTR _x_scale$[ebp], xmm0

; 7301 : 		y_scale = cos (roll) * 1.5 * pitch_bar_scale;

  004de	51		 push	 ecx
  004df	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  004e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e9	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  004ee	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1217[ebp]
  004f4	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1217[ebp]
  004fc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00504	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  00509	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0050d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00511	f3 0f 11 45 88	 movss	 DWORD PTR _y_scale$[ebp], xmm0

; 7302 : 
; 7303 : 		x_horizon = tan_mod_pitch * x_scale;

  00516	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  0051b	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  00520	f3 0f 11 45 84	 movss	 DWORD PTR _x_horizon$[ebp], xmm0

; 7304 : 		y_horizon = tan_mod_pitch * y_scale;

  00525	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  0052a	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  0052f	f3 0f 11 45 80	 movss	 DWORD PTR _y_horizon$[ebp], xmm0

; 7305 : 
; 7306 : 		x_10_deg_step = tan (rad (10.0)) * x_scale;

  00534	83 ec 08	 sub	 esp, 8
  00537	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  0053f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00544	e8 00 00 00 00	 call	 _tan
  00549	83 c4 08	 add	 esp, 8
  0054c	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1225[ebp]
  00552	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1225[ebp]
  0055a	f3 0f 5a 4d 8c	 cvtss2sd xmm1, DWORD PTR _x_scale$[ebp]
  0055f	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00563	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00567	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_10_deg_step$[ebp], xmm0

; 7307 : 		y_10_deg_step = tan (rad (10.0)) * y_scale;

  0056f	83 ec 08	 sub	 esp, 8
  00572	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  0057a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0057f	e8 00 00 00 00	 call	 _tan
  00584	83 c4 08	 add	 esp, 8
  00587	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1231[ebp]
  0058d	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1231[ebp]
  00595	f3 0f 5a 4d 88	 cvtss2sd xmm1, DWORD PTR _y_scale$[ebp]
  0059a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0059e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005a2	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _y_10_deg_step$[ebp], xmm0

; 7308 : 
; 7309 : 		x_horizon_abs = tan_pitch * x_scale;

  005aa	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _tan_pitch$23[ebp]
  005b2	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  005b7	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _x_horizon_abs$25[ebp], xmm0

; 7310 : 		y_horizon_abs = tan_pitch * y_scale;

  005bf	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _tan_pitch$23[ebp]
  005c7	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  005cc	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _y_horizon_abs$24[ebp], xmm0

; 7311 : 
; 7312 : 		// draw horizon
; 7313 : 		set_2d_pixel(x_horizon_abs, y_horizon_abs, MFD_COLOUR1);

  005d4	b8 04 00 00 00	 mov	 eax, 4
  005d9	6b c8 00	 imul	 ecx, eax, 0
  005dc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005e2	52		 push	 edx
  005e3	51		 push	 ecx
  005e4	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  005ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f1	51		 push	 ecx
  005f2	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  005fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ff	e8 00 00 00 00	 call	 ?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z ; set_2d_pixel

; 7314 : 		if (roll != -rad(90) && roll != rad(90))

  00604	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00609	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@bfc90fdb
  00610	9f		 lahf
  00611	f6 c4 44	 test	 ah, 68			; 00000044H
  00614	0f 8b 58 03 00
	00		 jnp	 $LN20@draw_pitch
  0061a	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0061f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  00626	9f		 lahf
  00627	f6 c4 44	 test	 ah, 68			; 00000044H
  0062a	0f 8b 42 03 00
	00		 jnp	 $LN20@draw_pitch

; 7315 : 		{
; 7316 : 			float incline = tan(roll);

  00630	51		 push	 ecx
  00631	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00636	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063b	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00640	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR _incline$21[ebp]

; 7317 : 			float left_y, right_y;
; 7318 : 			float start_x = -1.0, end_x = 1.0;

  00646	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0064e	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _start_x$18[ebp], xmm0
  00656	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0065e	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _end_x$17[ebp], xmm0

; 7319 : 
; 7320 : 			left_y = (x_horizon_abs - left_edge) * -incline;

  00666	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  0066e	f3 0f 5c 45 9c	 subss	 xmm0, DWORD PTR _left_edge$[ebp]
  00673	f3 0f 10 8d 58
	ff ff ff	 movss	 xmm1, DWORD PTR _incline$21[ebp]
  0067b	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00682	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00686	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _left_y$20[ebp], xmm0

; 7321 : 			right_y = (right_edge - x_horizon_abs) * incline;

  0068e	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _right_edge$[ebp]
  00693	f3 0f 5c 85 68
	ff ff ff	 subss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  0069b	f3 0f 59 85 58
	ff ff ff	 mulss	 xmm0, DWORD PTR _incline$21[ebp]
  006a3	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _right_y$19[ebp], xmm0

; 7322 : 
; 7323 : 			if (incline < 0.0)

  006ab	f3 0f 5a 85 58
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _incline$21[ebp]
  006b3	0f 57 c9	 xorps	 xmm1, xmm1
  006b6	66 0f 2f c8	 comisd	 xmm1, xmm0
  006ba	76 50		 jbe	 SHORT $LN22@draw_pitch

; 7324 : 			{
; 7325 : 				// find where horizon intersects top and bottom
; 7326 : 				start_x = x_horizon_abs + ((1 - y_horizon_abs) / incline);

  006bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006c4	f3 0f 5c 85 64
	ff ff ff	 subss	 xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  006cc	f3 0f 5e 85 58
	ff ff ff	 divss	 xmm0, DWORD PTR _incline$21[ebp]
  006d4	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  006dc	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _start_x$18[ebp], xmm0

; 7327 : 				end_x = x_horizon_abs + ((-2 - y_horizon_abs) / incline);

  006e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  006ec	f3 0f 5c 85 64
	ff ff ff	 subss	 xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  006f4	f3 0f 5e 85 58
	ff ff ff	 divss	 xmm0, DWORD PTR _incline$21[ebp]
  006fc	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00704	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _end_x$17[ebp], xmm0
$LN22@draw_pitch:

; 7328 : 			}
; 7329 : 
; 7330 : 			draw_2d_line(left_edge, left_y, right_edge, right_y, sys_col_red);

  0070c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00711	50		 push	 eax
  00712	51		 push	 ecx
  00713	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  0071b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00720	51		 push	 ecx
  00721	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _right_edge$[ebp]
  00726	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072b	51		 push	 ecx
  0072c	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  00734	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00739	51		 push	 ecx
  0073a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _left_edge$[ebp]
  0073f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00744	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7331 : 
; 7332 : 			left_y = y_horizon_abs + (1.0 + x_horizon_abs) * -incline;

  00749	f3 0f 5a 85 64
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  00751	f3 0f 5a 8d 68
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_horizon_abs$25[ebp]
  00759	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00761	f3 0f 10 95 58
	ff ff ff	 movss	 xmm2, DWORD PTR _incline$21[ebp]
  00769	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00770	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  00774	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00778	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0077c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00780	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _left_y$20[ebp], xmm0

; 7333 : 			right_y = y_horizon_abs + (1.0 - x_horizon_abs) * incline;

  00788	f3 0f 5a 85 64
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  00790	f3 0f 5a 8d 68
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_horizon_abs$25[ebp]
  00798	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  007a0	f2 0f 5c d1	 subsd	 xmm2, xmm1
  007a4	f3 0f 5a 8d 58
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _incline$21[ebp]
  007ac	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  007b0	f2 0f 58 c2	 addsd	 xmm0, xmm2
  007b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007b8	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _right_y$19[ebp], xmm0

; 7334 : 
; 7335 : 			if (inverted)

  007c0	83 bd 5c ff ff
	ff 00		 cmp	 DWORD PTR _inverted$22[ebp], 0
  007c7	74 24		 je	 SHORT $LN23@draw_pitch

; 7336 : 			{
; 7337 : 				rgb_colour tmp = sky_colour;

  007c9	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  007cf	89 85 44 ff ff
	ff		 mov	 DWORD PTR _tmp$16[ebp], eax

; 7338 : 				sky_colour = ground_colour;

  007d5	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  007db	89 85 70 ff ff
	ff		 mov	 DWORD PTR _sky_colour$[ebp], eax

; 7339 : 				ground_colour = tmp;

  007e1	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _tmp$16[ebp]
  007e7	89 85 6c ff ff
	ff		 mov	 DWORD PTR _ground_colour$[ebp], eax
$LN23@draw_pitch:

; 7340 : 			}
; 7341 : 
; 7342 : 			draw_2d_filled_triangle(-1.0, left_y, -1.0, 1.0, 1.0, right_y, sky_colour);

  007ed	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  007f3	50		 push	 eax
  007f4	51		 push	 ecx
  007f5	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  007fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00802	51		 push	 ecx
  00803	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0080b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00810	51		 push	 ecx
  00811	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	51		 push	 ecx
  0081f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082c	51		 push	 ecx
  0082d	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  00835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083a	51		 push	 ecx
  0083b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00843	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00848	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 7343 : 			draw_2d_filled_triangle(start_x, 1.0, 1.0, 1.0, 1.0, right_y, sky_colour);

  0084d	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  00853	50		 push	 eax
  00854	51		 push	 ecx
  00855	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  0085d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00862	51		 push	 ecx
  00863	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0086b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00870	51		 push	 ecx
  00871	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00879	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087e	51		 push	 ecx
  0087f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00887	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088c	51		 push	 ecx
  0088d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00895	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089a	51		 push	 ecx
  0089b	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _start_x$18[ebp]
  008a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a8	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 7344 : 
; 7345 : 			draw_2d_filled_triangle(-1.0, left_y, end_x, -2.0, -1.0, -2.0, ground_colour);

  008ad	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  008b3	50		 push	 eax
  008b4	51		 push	 ecx
  008b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  008bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c2	51		 push	 ecx
  008c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  008cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d0	51		 push	 ecx
  008d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  008d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008de	51		 push	 ecx
  008df	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _end_x$17[ebp]
  008e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ec	51		 push	 ecx
  008ed	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  008f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fa	51		 push	 ecx
  008fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00903	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00908	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 7346 : 			draw_2d_filled_triangle(-1.0, left_y, 1.0, right_y, 1.0, -2.0, ground_colour);

  0090d	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  00913	50		 push	 eax
  00914	51		 push	 ecx
  00915	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0091d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00922	51		 push	 ecx
  00923	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0092b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00930	51		 push	 ecx
  00931	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  00939	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093e	51		 push	 ecx
  0093f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00947	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094c	51		 push	 ecx
  0094d	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  00955	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095a	51		 push	 ecx
  0095b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00963	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00968	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 7347 : 		}
; 7348 : 		else  // 90 degree bank

  0096d	e9 cc 01 00 00	 jmp	 $LN21@draw_pitch
$LN20@draw_pitch:

; 7349 : 		{
; 7350 : 			rgb_colour
; 7351 : 				*left_colour,
; 7352 : 				*right_colour;
; 7353 : 
; 7354 : 			if (roll == rad(90))

  00972	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00977	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  0097e	9f		 lahf
  0097f	f6 c4 44	 test	 ah, 68			; 00000044H
  00982	7a 1a		 jp	 SHORT $LN24@draw_pitch

; 7355 : 			{
; 7356 : 				left_colour = &ground_colour;

  00984	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _ground_colour$[ebp]
  0098a	89 85 40 ff ff
	ff		 mov	 DWORD PTR _left_colour$15[ebp], eax

; 7357 : 				right_colour = &sky_colour;

  00990	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _sky_colour$[ebp]
  00996	89 85 3c ff ff
	ff		 mov	 DWORD PTR _right_colour$14[ebp], eax

; 7358 : 			}
; 7359 : 			else

  0099c	eb 18		 jmp	 SHORT $LN25@draw_pitch
$LN24@draw_pitch:

; 7360 : 			{
; 7361 : 				left_colour = &sky_colour;

  0099e	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _sky_colour$[ebp]
  009a4	89 85 40 ff ff
	ff		 mov	 DWORD PTR _left_colour$15[ebp], eax

; 7362 : 				right_colour = &ground_colour;

  009aa	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _ground_colour$[ebp]
  009b0	89 85 3c ff ff
	ff		 mov	 DWORD PTR _right_colour$14[ebp], eax
$LN25@draw_pitch:

; 7363 : 			}
; 7364 : 
; 7365 : 			draw_2d_filled_triangle(x_horizon_abs, 1.0, 1.0, 1.0, 1.0, -1.0, *right_colour);

  009b6	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _right_colour$14[ebp]
  009bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  009be	51		 push	 ecx
  009bf	51		 push	 ecx
  009c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  009c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009cd	51		 push	 ecx
  009ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009db	51		 push	 ecx
  009dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e9	51		 push	 ecx
  009ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f7	51		 push	 ecx
  009f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a05	51		 push	 ecx
  00a06	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00a0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a13	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 7366 : 			draw_2d_filled_triangle(1.0, -1.0, x_horizon_abs, -1.0, x_horizon_abs, 1.0, *right_colour);

  00a18	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _right_colour$14[ebp]
  00a1e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a20	51		 push	 ecx
  00a21	51		 push	 ecx
  00a22	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2f	51		 push	 ecx
  00a30	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00a38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3d	51		 push	 ecx
  00a3e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4b	51		 push	 ecx
  00a4c	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00a54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a59	51		 push	 ecx
  00a5a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a67	51		 push	 ecx
  00a68	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a75	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 7367 : 
; 7368 : 			draw_2d_filled_triangle(-1.0, 1.0, x_horizon_abs, 1.0, x_horizon_abs, -1.0, *left_colour);

  00a7a	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _left_colour$15[ebp]
  00a80	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a82	51		 push	 ecx
  00a83	51		 push	 ecx
  00a84	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a91	51		 push	 ecx
  00a92	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00a9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a9f	51		 push	 ecx
  00aa0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00aa8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aad	51		 push	 ecx
  00aae	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00ab6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00abb	51		 push	 ecx
  00abc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ac4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac9	51		 push	 ecx
  00aca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00ad2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad7	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 7369 : 			draw_2d_filled_triangle(x_horizon_abs, -1.0, -1.0, -1.0, -1.0, 1.0, *left_colour);

  00adc	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _left_colour$15[ebp]
  00ae2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ae4	51		 push	 ecx
  00ae5	51		 push	 ecx
  00ae6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00aee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af3	51		 push	 ecx
  00af4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00afc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b01	51		 push	 ecx
  00b02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b0f	51		 push	 ecx
  00b10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1d	51		 push	 ecx
  00b1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2b	51		 push	 ecx
  00b2c	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00b34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b39	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle
$LN21@draw_pitch:

; 7370 : 		}
; 7371 : 
; 7372 : 		////////////////////////////////////////
; 7373 : 		//
; 7374 : 		// draw pitch ladder
; 7375 : 		//
; 7376 : 		////////////////////////////////////////
; 7377 : 
; 7378 : 		step_direction = -1;

  00b3e	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _step_direction$[ebp], -1

; 7379 : 
; 7380 : 		int_pitch = limit_pitch (int_pitch + 3, &step_direction);

  00b45	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  00b48	50		 push	 eax
  00b49	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  00b4c	83 c1 03	 add	 ecx, 3
  00b4f	51		 push	 ecx
  00b50	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  00b55	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 7381 : 
; 7382 : 		x = x_horizon + x_10_deg_step * 3.0;

  00b58	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _x_horizon$[ebp]
  00b5d	f3 0f 5a 8d 7c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_10_deg_step$[ebp]
  00b65	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00b6d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b71	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b75	f3 0f 11 45 a4	 movss	 DWORD PTR _x$[ebp], xmm0

; 7383 : 		y = y_horizon + y_10_deg_step * 3.0;

  00b7a	f3 0f 5a 45 80	 cvtss2sd xmm0, DWORD PTR _y_horizon$[ebp]
  00b7f	f3 0f 5a 8d 78
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _y_10_deg_step$[ebp]
  00b87	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00b8f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b93	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b97	f3 0f 11 45 a0	 movss	 DWORD PTR _y$[ebp], xmm0

; 7384 : 
; 7385 : 		set_2d_instance_rotation (mfd_env, roll);

  00b9c	51		 push	 ecx
  00b9d	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00ba2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00bac	50		 push	 eax
  00bad	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7386 : 
; 7387 : 		for (loop = 0; loop < 7; loop++)

  00bb2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00bb9	eb 09		 jmp	 SHORT $LN4@draw_pitch
$LN2@draw_pitch:
  00bbb	8b 45 e0	 mov	 eax, DWORD PTR _loop$[ebp]
  00bbe	83 c0 01	 add	 eax, 1
  00bc1	89 45 e0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_pitch:
  00bc4	83 7d e0 07	 cmp	 DWORD PTR _loop$[ebp], 7
  00bc8	0f 8d 2b 05 00
	00		 jge	 $LN3@draw_pitch

; 7388 : 		{
; 7389 : 			set_2d_instance_position (mfd_env, x, y);

  00bce	51		 push	 ecx
  00bcf	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00bd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd9	51		 push	 ecx
  00bda	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00bdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00be9	50		 push	 eax
  00bea	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 7390 : 
; 7391 : 			switch (int_pitch)

  00bef	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00bf2	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv407[ebp], eax
  00bf8	83 bd c0 fe ff
	ff f7		 cmp	 DWORD PTR tv407[ebp], -9 ; fffffff7H
  00bff	0f 84 8a 02 00
	00		 je	 $LN29@draw_pitch
  00c05	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR tv407[ebp], 0
  00c0c	74 0f		 je	 SHORT $LN26@draw_pitch
  00c0e	83 bd c0 fe ff
	ff 09		 cmp	 DWORD PTR tv407[ebp], 9
  00c15	0f 84 b5 01 00
	00		 je	 $LN28@draw_pitch
  00c1b	eb 69		 jmp	 SHORT $LN27@draw_pitch
$LN26@draw_pitch:

; 7392 : 			{
; 7393 : 				////////////////////////////////////////
; 7394 : 				case 0:
; 7395 : 				////////////////////////////////////////
; 7396 : 				{
; 7397 : 					draw_2d_line (-PITCH_BAR_X3, PITCH_BAR_Y3, PITCH_BAR_X3, -PITCH_BAR_Y3, MFD_COLOUR1);

  00c1d	b8 04 00 00 00	 mov	 eax, 4
  00c22	6b c8 00	 imul	 ecx, eax, 0
  00c25	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c2b	52		 push	 edx
  00c2c	0f 57 c0	 xorps	 xmm0, xmm0
  00c2f	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c34	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c3b	51		 push	 ecx
  00c3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00c49	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c4e	51		 push	 ecx
  00c4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c54	0f 57 c0	 xorps	 xmm0, xmm0
  00c57	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c5c	51		 push	 ecx
  00c5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c62	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00c6a	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c6f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c76	51		 push	 ecx
  00c77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7398 : 
; 7399 : 					break;

  00c81	e9 37 04 00 00	 jmp	 $LN5@draw_pitch
$LN27@draw_pitch:

; 7400 : 				}
; 7401 : 				////////////////////////////////////////
; 7402 : 				default:
; 7403 : 				////////////////////////////////////////
; 7404 : 				{
; 7405 : 					draw_2d_line (-PITCH_BAR_X3, PITCH_BAR_Y3, PITCH_BAR_X3, -PITCH_BAR_Y3, MFD_COLOUR1);

  00c86	b8 04 00 00 00	 mov	 eax, 4
  00c8b	6b c8 00	 imul	 ecx, eax, 0
  00c8e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c94	52		 push	 edx
  00c95	0f 57 c0	 xorps	 xmm0, xmm0
  00c98	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c9d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00ca4	51		 push	 ecx
  00ca5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00caa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00cb2	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cb7	51		 push	 ecx
  00cb8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cbd	0f 57 c0	 xorps	 xmm0, xmm0
  00cc0	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cc5	51		 push	 ecx
  00cc6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ccb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00cd3	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cd8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00cdf	51		 push	 ecx
  00ce0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7406 : 
; 7407 : 					sprintf (s, "%d0", int_pitch);

  00cea	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00ced	50		 push	 eax
  00cee	68 00 00 00 00	 push	 OFFSET ??_C@_03NJMPCKOA@?$CFd0@
  00cf3	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  00cf6	51		 push	 ecx
  00cf7	e8 00 00 00 00	 call	 _sprintf
  00cfc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7408 : 					x_adjust = get_mono_font_string_width (s) * -0.5;

  00cff	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00d02	50		 push	 eax
  00d03	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d08	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1430[ebp]
  00d0e	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1430[ebp]
  00d16	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00d1e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d22	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7409 : 
; 7410 : 					set_2d_mono_font_position (+PITCH_BAR_X4, +PITCH_BAR_Y4);

  00d2a	0f 57 c0	 xorps	 xmm0, xmm0
  00d2d	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d32	51		 push	 ecx
  00d33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00d40	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d45	51		 push	 ecx
  00d46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d4b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7411 : 					set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00d50	51		 push	 ecx
  00d51	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00d56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5b	51		 push	 ecx
  00d5c	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00d64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d69	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7412 : 					print_mono_font_string (s);

  00d6e	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00d71	50		 push	 eax
  00d72	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7413 : 
; 7414 : 					set_2d_mono_font_position (-PITCH_BAR_X4, +PITCH_BAR_Y4);

  00d77	0f 57 c0	 xorps	 xmm0, xmm0
  00d7a	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d7f	51		 push	 ecx
  00d80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00d8d	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d92	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d99	51		 push	 ecx
  00d9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7415 : 					set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00da4	51		 push	 ecx
  00da5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00daa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00daf	51		 push	 ecx
  00db0	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00db8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dbd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7416 : 					print_mono_font_string (s);

  00dc2	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00dc5	50		 push	 eax
  00dc6	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7417 : 
; 7418 : 					break;

  00dcb	e9 ed 02 00 00	 jmp	 $LN5@draw_pitch
$LN28@draw_pitch:

; 7419 : 				}
; 7420 : 				////////////////////////////////////////
; 7421 : 				case 9:
; 7422 : 				////////////////////////////////////////
; 7423 : 				{
; 7424 : 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  00dd0	b8 04 00 00 00	 mov	 eax, 4
  00dd5	6b c8 00	 imul	 ecx, eax, 0
  00dd8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00dde	52		 push	 edx
  00ddf	0f 57 c0	 xorps	 xmm0, xmm0
  00de2	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00de7	51		 push	 ecx
  00de8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ded	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00df5	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00dfa	51		 push	 ecx
  00dfb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e00	0f 57 c0	 xorps	 xmm0, xmm0
  00e03	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e08	51		 push	 ecx
  00e09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e0e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00e16	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e1b	51		 push	 ecx
  00e1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e21	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7425 : 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  00e26	b8 04 00 00 00	 mov	 eax, 4
  00e2b	6b c8 00	 imul	 ecx, eax, 0
  00e2e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e34	52		 push	 edx
  00e35	0f 57 c0	 xorps	 xmm0, xmm0
  00e38	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e3d	51		 push	 ecx
  00e3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e43	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00e4b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e50	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e57	51		 push	 ecx
  00e58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5d	0f 57 c0	 xorps	 xmm0, xmm0
  00e60	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e65	51		 push	 ecx
  00e66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e6b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00e73	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e78	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e7f	51		 push	 ecx
  00e80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e85	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7426 : 
; 7427 : 					break;

  00e8a	e9 2e 02 00 00	 jmp	 $LN5@draw_pitch
$LN29@draw_pitch:

; 7428 : 				}
; 7429 : 				////////////////////////////////////////
; 7430 : 				case -9:
; 7431 : 				////////////////////////////////////////
; 7432 : 				{
; 7433 : 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR1);

  00e8f	b8 04 00 00 00	 mov	 eax, 4
  00e94	6b c8 00	 imul	 ecx, eax, 0
  00e97	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e9d	52		 push	 edx
  00e9e	0f 57 c0	 xorps	 xmm0, xmm0
  00ea1	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ea6	51		 push	 ecx
  00ea7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e23d70a
  00eb4	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00eb9	51		 push	 ecx
  00eba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ebf	0f 57 c0	 xorps	 xmm0, xmm0
  00ec2	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ec7	51		 push	 ecx
  00ec8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ecd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00ed5	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00eda	51		 push	 ecx
  00edb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7434 : 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR1);

  00ee5	b8 04 00 00 00	 mov	 eax, 4
  00eea	6b c8 00	 imul	 ecx, eax, 0
  00eed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ef3	52		 push	 edx
  00ef4	0f 57 c0	 xorps	 xmm0, xmm0
  00ef7	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00efc	51		 push	 ecx
  00efd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e23d70a
  00f0a	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f0f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00f16	51		 push	 ecx
  00f17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f1c	0f 57 c0	 xorps	 xmm0, xmm0
  00f1f	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f24	51		 push	 ecx
  00f25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00f32	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f37	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00f3e	51		 push	 ecx
  00f3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f44	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7435 : 
; 7436 : 					draw_2d_line (+PITCH_BAR_X3, +PITCH_BAR_Y3, +PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR1);

  00f49	b8 04 00 00 00	 mov	 eax, 4
  00f4e	6b c8 00	 imul	 ecx, eax, 0
  00f51	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f57	52		 push	 edx
  00f58	0f 57 c0	 xorps	 xmm0, xmm0
  00f5b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f60	51		 push	 ecx
  00f61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f66	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00f6e	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f73	51		 push	 ecx
  00f74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f79	0f 57 c0	 xorps	 xmm0, xmm0
  00f7c	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f81	51		 push	 ecx
  00f82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f87	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00f8f	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f94	51		 push	 ecx
  00f95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f9a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7437 : 					draw_2d_line (-PITCH_BAR_X3, +PITCH_BAR_Y3, -PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR1);

  00f9f	b8 04 00 00 00	 mov	 eax, 4
  00fa4	6b c8 00	 imul	 ecx, eax, 0
  00fa7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fad	52		 push	 edx
  00fae	0f 57 c0	 xorps	 xmm0, xmm0
  00fb1	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fb6	51		 push	 ecx
  00fb7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fbc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00fc4	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fc9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00fd0	51		 push	 ecx
  00fd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd6	0f 57 c0	 xorps	 xmm0, xmm0
  00fd9	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fde	51		 push	 ecx
  00fdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00fec	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ff1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00ff8	51		 push	 ecx
  00ff9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ffe	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7438 : 
; 7439 : 					draw_2d_line (+PITCH_BAR_X5, +PITCH_BAR_Y5, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  01003	b8 04 00 00 00	 mov	 eax, 4
  01008	6b c8 00	 imul	 ecx, eax, 0
  0100b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01011	52		 push	 edx
  01012	0f 57 c0	 xorps	 xmm0, xmm0
  01015	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0101a	51		 push	 ecx
  0101b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01028	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0102d	51		 push	 ecx
  0102e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01033	0f 57 c0	 xorps	 xmm0, xmm0
  01036	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0103b	51		 push	 ecx
  0103c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e87ae14
  01049	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0104e	51		 push	 ecx
  0104f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01054	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7440 : 					draw_2d_line (-PITCH_BAR_X5, +PITCH_BAR_Y5, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  01059	b8 04 00 00 00	 mov	 eax, 4
  0105e	6b c8 00	 imul	 ecx, eax, 0
  01061	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01067	52		 push	 edx
  01068	0f 57 c0	 xorps	 xmm0, xmm0
  0106b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01070	51		 push	 ecx
  01071	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01076	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0107e	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01083	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0108a	51		 push	 ecx
  0108b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01090	0f 57 c0	 xorps	 xmm0, xmm0
  01093	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01098	51		 push	 ecx
  01099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0109e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e87ae14
  010a6	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010ab	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  010b2	51		 push	 ecx
  010b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN5@draw_pitch:

; 7441 : 
; 7442 : 					break;
; 7443 : 				}
; 7444 : 			}
; 7445 : 
; 7446 : 			int_pitch = limit_pitch (int_pitch + step_direction, &step_direction);

  010bd	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  010c0	50		 push	 eax
  010c1	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  010c4	03 4d e4	 add	 ecx, DWORD PTR _step_direction$[ebp]
  010c7	51		 push	 ecx
  010c8	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  010cd	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 7447 : 
; 7448 : 			x -= x_10_deg_step;

  010d0	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _x$[ebp]
  010d5	f3 0f 5c 85 7c
	ff ff ff	 subss	 xmm0, DWORD PTR _x_10_deg_step$[ebp]
  010dd	f3 0f 11 45 a4	 movss	 DWORD PTR _x$[ebp], xmm0

; 7449 : 			y -= y_10_deg_step;

  010e2	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y$[ebp]
  010e7	f3 0f 5c 85 78
	ff ff ff	 subss	 xmm0, DWORD PTR _y_10_deg_step$[ebp]
  010ef	f3 0f 11 45 a0	 movss	 DWORD PTR _y$[ebp], xmm0

; 7450 : 		}

  010f4	e9 c2 fa ff ff	 jmp	 $LN2@draw_pitch
$LN3@draw_pitch:

; 7451 : 	}
; 7452 : 
; 7453 : 	//
; 7454 : 	// restore 2D environment
; 7455 : 	//
; 7456 : 
; 7457 : 	reset_2d_instance (mfd_env);

  010f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  010fe	50		 push	 eax
  010ff	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 7458 : 
; 7459 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  01104	51		 push	 ecx
  01105	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0110d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01112	51		 push	 ecx
  01113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0111b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01120	51		 push	 ecx
  01121	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01129	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0112e	51		 push	 ecx
  0112f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0113c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01141	50		 push	 eax
  01142	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 7460 : 
; 7461 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01147	51		 push	 ecx
  01148	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01150	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01155	51		 push	 ecx
  01156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0115e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01163	51		 push	 ecx
  01164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0116c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01171	51		 push	 ecx
  01172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0117a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0117f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01184	50		 push	 eax
  01185	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7462 : 
; 7463 : 	draw_2d_mono_sprite (main_horizon_mask, x_centre, 0.41 + PITCH_DATUM_Y, MFD_BACKGROUND_COLOUR);

  0118a	b8 04 00 00 00	 mov	 eax, 4
  0118f	6b c8 09	 imul	 ecx, eax, 9
  01192	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01198	52		 push	 edx
  01199	51		 push	 ecx
  0119a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1c28f6
  011a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011a7	51		 push	 ecx
  011a8	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  011ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_horizon_mask@@3PADA
  011b7	50		 push	 eax
  011b8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 7464 : 
; 7465 : 	// pitch scale
; 7466 : 	{
; 7467 : 		float
; 7468 : 			current_y,
; 7469 : 			y_fine_height = 0.24,    // -10 to 10 degrees

  011bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e75c28f
  011c5	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y_fine_height$12[ebp], xmm0

; 7470 : 			y_coarse_height = 0.12,  // above 10 and below 10

  011cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  011d5	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_coarse_height$11[ebp], xmm0

; 7471 : 			y_fine_step = y_fine_height / 4,

  011dd	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y_fine_height$12[ebp]
  011e5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40800000
  011ed	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _y_fine_step$10[ebp], xmm0

; 7472 : 			y_coarse_step = y_coarse_height / 2,

  011f5	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_coarse_height$11[ebp]
  011fd	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  01205	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_coarse_step$9[ebp], xmm0

; 7473 : 			x_end = -0.41,

  0120d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed1eb85
  01215	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _x_end$8[ebp], xmm0

; 7474 : 			x_half_tick = x_end - 0.02,

  0121d	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x_end$8[ebp]
  01225	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  0122d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01231	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_half_tick$7[ebp], xmm0

; 7475 : 			x_tick = x_end - 0.04;

  01239	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x_end$8[ebp]
  01241	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  01249	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0124d	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _x_tick$6[ebp], xmm0

; 7476 : 
; 7477 : 		int i;
; 7478 : 
; 7479 : 		float x_adjust, y_adjust;
; 7480 : 		char buffer[8];
; 7481 : 
; 7482 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  01255	6a 01		 push	 1
  01257	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7483 : 		y_adjust = -2.0;

  0125c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  01264	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _y_adjust$3[ebp], xmm0

; 7484 : 
; 7485 : 		current_y = y_centre + y_coarse_height + y_fine_height + y_coarse_step;

  0126c	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  01271	f3 0f 58 85 30
	ff ff ff	 addss	 xmm0, DWORD PTR _y_coarse_height$11[ebp]
  01279	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y_fine_height$12[ebp]
  01281	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _y_coarse_step$9[ebp]
  01289	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 7486 : 		for (i = 3; i >= 1; i--)

  01291	c7 85 18 ff ff
	ff 03 00 00 00	 mov	 DWORD PTR _i$5[ebp], 3
  0129b	eb 0f		 jmp	 SHORT $LN9@draw_pitch
$LN7@draw_pitch:
  0129d	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  012a3	83 e8 01	 sub	 eax, 1
  012a6	89 85 18 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN9@draw_pitch:
  012ac	83 bd 18 ff ff
	ff 01		 cmp	 DWORD PTR _i$5[ebp], 1
  012b3	0f 8c 03 01 00
	00		 jl	 $LN8@draw_pitch

; 7487 : 		{
; 7488 : 			current_y -= y_coarse_step;

  012b9	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  012c1	f3 0f 5c 85 28
	ff ff ff	 subss	 xmm0, DWORD PTR _y_coarse_step$9[ebp]
  012c9	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 7489 : 			draw_2d_line(x_tick, current_y, x_end, current_y, MFD_COLOUR1);

  012d1	b8 04 00 00 00	 mov	 eax, 4
  012d6	6b c8 00	 imul	 ecx, eax, 0
  012d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012df	52		 push	 edx
  012e0	51		 push	 ecx
  012e1	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  012e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ee	51		 push	 ecx
  012ef	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  012f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012fc	51		 push	 ecx
  012fd	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01305	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0130a	51		 push	 ecx
  0130b	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  01313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01318	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7490 : 
; 7491 : 			sprintf(buffer, "%d", i);

  0131d	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01323	50		 push	 eax
  01324	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  01329	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$2[ebp]
  0132f	51		 push	 ecx
  01330	e8 00 00 00 00	 call	 _sprintf
  01335	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7492 : 			x_adjust = get_mono_font_string_width(buffer) + 1;

  01338	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  0133e	50		 push	 eax
  0133f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01344	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1585[ebp]
  0134a	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1585[ebp]
  01352	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0135a	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _x_adjust$4[ebp], xmm0

; 7493 : 
; 7494 : 			set_2d_mono_font_position (x_tick, current_y);

  01362	51		 push	 ecx
  01363	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0136b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01370	51		 push	 ecx
  01371	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  01379	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7495 : 			set_mono_font_rel_position (-x_adjust, y_adjust);

  01383	51		 push	 ecx
  01384	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$3[ebp]
  0138c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01391	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$4[ebp]
  01399	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  013a0	51		 push	 ecx
  013a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7496 : 			print_mono_font_string(buffer);

  013ab	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  013b1	50		 push	 eax
  013b2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7497 : 		}

  013b7	e9 e1 fe ff ff	 jmp	 $LN7@draw_pitch
$LN8@draw_pitch:

; 7498 : 
; 7499 : 		for (i = 0; i < 7; i++)

  013bc	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$5[ebp], 0
  013c6	eb 0f		 jmp	 SHORT $LN12@draw_pitch
$LN10@draw_pitch:
  013c8	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  013ce	83 c0 01	 add	 eax, 1
  013d1	89 85 18 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN12@draw_pitch:
  013d7	83 bd 18 ff ff
	ff 07		 cmp	 DWORD PTR _i$5[ebp], 7
  013de	0f 8d cd 00 00
	00		 jge	 $LN11@draw_pitch

; 7500 : 		{
; 7501 : 			current_y -= y_fine_step;

  013e4	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  013ec	f3 0f 5c 85 2c
	ff ff ff	 subss	 xmm0, DWORD PTR _y_fine_step$10[ebp]
  013f4	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 7502 : 			if ((i % 2) != 0)

  013fc	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01402	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  01407	79 05		 jns	 SHORT $LN62@draw_pitch
  01409	48		 dec	 eax
  0140a	83 c8 fe	 or	 eax, -2			; fffffffeH
  0140d	40		 inc	 eax
$LN62@draw_pitch:
  0140e	85 c0		 test	 eax, eax
  01410	74 4e		 je	 SHORT $LN30@draw_pitch

; 7503 : 				draw_2d_line(x_tick, current_y, x_end, current_y, MFD_COLOUR1);

  01412	b8 04 00 00 00	 mov	 eax, 4
  01417	6b c8 00	 imul	 ecx, eax, 0
  0141a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01420	52		 push	 edx
  01421	51		 push	 ecx
  01422	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0142a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0142f	51		 push	 ecx
  01430	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  01438	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143d	51		 push	 ecx
  0143e	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01446	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0144b	51		 push	 ecx
  0144c	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  01454	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01459	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7504 : 			else

  0145e	eb 4c		 jmp	 SHORT $LN31@draw_pitch
$LN30@draw_pitch:

; 7505 : 				draw_2d_line(x_half_tick, current_y, x_end, current_y, MFD_COLOUR1);

  01460	b8 04 00 00 00	 mov	 eax, 4
  01465	6b c8 00	 imul	 ecx, eax, 0
  01468	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0146e	52		 push	 edx
  0146f	51		 push	 ecx
  01470	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01478	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0147d	51		 push	 ecx
  0147e	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  01486	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0148b	51		 push	 ecx
  0148c	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01494	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01499	51		 push	 ecx
  0149a	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_half_tick$7[ebp]
  014a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN31@draw_pitch:

; 7506 : 		}

  014ac	e9 17 ff ff ff	 jmp	 $LN10@draw_pitch
$LN11@draw_pitch:

; 7507 : 
; 7508 : 		sprintf(buffer, "%d", 0);

  014b1	6a 00		 push	 0
  014b3	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  014b8	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  014be	50		 push	 eax
  014bf	e8 00 00 00 00	 call	 _sprintf
  014c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7509 : 		x_adjust = get_mono_font_string_width(buffer) + 1;

  014c7	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  014cd	50		 push	 eax
  014ce	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  014d3	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1623[ebp]
  014d9	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1623[ebp]
  014e1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  014e9	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _x_adjust$4[ebp], xmm0

; 7510 : 
; 7511 : 		set_2d_mono_font_position (x_tick, y_centre);

  014f1	51		 push	 ecx
  014f2	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  014f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014fc	51		 push	 ecx
  014fd	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  01505	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0150a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7512 : 		set_mono_font_rel_position (-x_adjust, y_adjust);

  0150f	51		 push	 ecx
  01510	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$3[ebp]
  01518	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0151d	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$4[ebp]
  01525	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0152c	51		 push	 ecx
  0152d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01532	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7513 : 		print_mono_font_string(buffer);

  01537	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  0153d	50		 push	 eax
  0153e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7514 : 
; 7515 : 		current_y -= y_fine_step;

  01543	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0154b	f3 0f 5c 85 2c
	ff ff ff	 subss	 xmm0, DWORD PTR _y_fine_step$10[ebp]
  01553	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 7516 : 		for (i = -1; i >= -3; i--)

  0155b	c7 85 18 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _i$5[ebp], -1
  01565	eb 0f		 jmp	 SHORT $LN15@draw_pitch
$LN13@draw_pitch:
  01567	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  0156d	83 e8 01	 sub	 eax, 1
  01570	89 85 18 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN15@draw_pitch:
  01576	83 bd 18 ff ff
	ff fd		 cmp	 DWORD PTR _i$5[ebp], -3	; fffffffdH
  0157d	0f 8c 03 01 00
	00		 jl	 $LN14@draw_pitch

; 7517 : 		{
; 7518 : 			draw_2d_line(x_tick, current_y, x_end, current_y, MFD_COLOUR1);

  01583	b8 04 00 00 00	 mov	 eax, 4
  01588	6b c8 00	 imul	 ecx, eax, 0
  0158b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01591	52		 push	 edx
  01592	51		 push	 ecx
  01593	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0159b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a0	51		 push	 ecx
  015a1	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  015a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015ae	51		 push	 ecx
  015af	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  015b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015bc	51		 push	 ecx
  015bd	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  015c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7519 : 
; 7520 : 			sprintf(buffer, "%d", i);

  015cf	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  015d5	50		 push	 eax
  015d6	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  015db	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$2[ebp]
  015e1	51		 push	 ecx
  015e2	e8 00 00 00 00	 call	 _sprintf
  015e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7521 : 			x_adjust = get_mono_font_string_width(buffer) + 1;

  015ea	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  015f0	50		 push	 eax
  015f1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  015f6	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1651[ebp]
  015fc	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1651[ebp]
  01604	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0160c	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _x_adjust$4[ebp], xmm0

; 7522 : 
; 7523 : 			set_2d_mono_font_position (x_tick, current_y);

  01614	51		 push	 ecx
  01615	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0161d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01622	51		 push	 ecx
  01623	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  0162b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01630	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7524 : 			set_mono_font_rel_position (-x_adjust, y_adjust);

  01635	51		 push	 ecx
  01636	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$3[ebp]
  0163e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01643	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$4[ebp]
  0164b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01652	51		 push	 ecx
  01653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01658	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7525 : 			print_mono_font_string(buffer);

  0165d	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01663	50		 push	 eax
  01664	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7526 : 			current_y -= y_coarse_step;

  01669	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01671	f3 0f 5c 85 28
	ff ff ff	 subss	 xmm0, DWORD PTR _y_coarse_step$9[ebp]
  01679	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 7527 : 		}

  01681	e9 e1 fe ff ff	 jmp	 $LN13@draw_pitch
$LN14@draw_pitch:

; 7528 : 
; 7529 : 		// draw marker
; 7530 : 
; 7531 : 		{
; 7532 : 			float
; 7533 : 				pitch_y;
; 7534 : 
; 7535 : 			pitch_y = bound(deg(pitch), -10.0, 10.0) * y_fine_height * 0.1;

  01686	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0168b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01693	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01697	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c024000000000000
  0169f	66 0f 2f c8	 comisd	 xmm1, xmm0
  016a3	76 12		 jbe	 SHORT $LN48@draw_pitch
  016a5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c024000000000000
  016ad	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv755[ebp], xmm0
  016b5	eb 56		 jmp	 SHORT $LN49@draw_pitch
$LN48@draw_pitch:
  016b7	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  016bc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  016c4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  016c8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  016d0	76 12		 jbe	 SHORT $LN46@draw_pitch
  016d2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  016da	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv754[ebp], xmm0
  016e2	eb 19		 jmp	 SHORT $LN47@draw_pitch
$LN46@draw_pitch:
  016e4	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  016e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  016f1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  016f5	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv754[ebp], xmm0
$LN47@draw_pitch:
  016fd	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv754[ebp]
  01705	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv755[ebp], xmm0
$LN49@draw_pitch:
  0170d	f3 0f 5a 85 34
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_fine_height$12[ebp]
  01715	f2 0f 59 85 bc
	fe ff ff	 mulsd	 xmm0, QWORD PTR tv755[ebp]
  0171d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  01725	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01729	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0

; 7536 : 			if (pitch < rad(-10))

  01731	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be32b8c2
  01739	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR _pitch$[ebp]
  0173d	0f 86 cf 00 00
	00		 jbe	 $LN32@draw_pitch

; 7537 : 				pitch_y += bound(deg(pitch) + 10.0, -20.0, 0.0) * y_coarse_height * 0.05;

  01743	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  01748	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01750	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01754	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  0175c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c034000000000000
  01764	66 0f 2f c8	 comisd	 xmm1, xmm0
  01768	76 12		 jbe	 SHORT $LN52@draw_pitch
  0176a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c034000000000000
  01772	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv773[ebp], xmm0
  0177a	eb 61		 jmp	 SHORT $LN53@draw_pitch
$LN52@draw_pitch:
  0177c	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  01781	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01789	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0178d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  01795	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0179d	76 0d		 jbe	 SHORT $LN50@draw_pitch
  0179f	0f 57 c0	 xorps	 xmm0, xmm0
  017a2	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv772[ebp], xmm0
  017aa	eb 21		 jmp	 SHORT $LN51@draw_pitch
$LN50@draw_pitch:
  017ac	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  017b1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  017b9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  017bd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  017c5	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv772[ebp], xmm0
$LN51@draw_pitch:
  017cd	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv772[ebp]
  017d5	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv773[ebp], xmm0
$LN53@draw_pitch:
  017dd	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_coarse_height$11[ebp]
  017e5	f2 0f 59 85 bc
	fe ff ff	 mulsd	 xmm0, QWORD PTR tv773[ebp]
  017ed	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  017f5	f3 0f 5a 8d 04
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _pitch_y$1[ebp]
  017fd	f2 0f 58 c8	 addsd	 xmm1, xmm0
  01801	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  01805	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0
  0180d	e9 d7 00 00 00	 jmp	 $LN34@draw_pitch
$LN32@draw_pitch:

; 7538 : 			else if (pitch > rad(10))

  01812	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  01817	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3e32b8c2
  0181e	0f 86 c5 00 00
	00		 jbe	 $LN34@draw_pitch

; 7539 : 				pitch_y += bound(deg(pitch) - 10.0, 0.0, 20.0) * y_coarse_height * 0.05;

  01824	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  01829	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01831	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01835	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  0183d	0f 57 c9	 xorps	 xmm1, xmm1
  01840	66 0f 2f c8	 comisd	 xmm1, xmm0
  01844	76 0d		 jbe	 SHORT $LN56@draw_pitch
  01846	0f 57 c0	 xorps	 xmm0, xmm0
  01849	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv793[ebp], xmm0
  01851	eb 66		 jmp	 SHORT $LN57@draw_pitch
$LN56@draw_pitch:
  01853	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  01858	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01860	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01864	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  0186c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4034000000000000
  01874	76 12		 jbe	 SHORT $LN54@draw_pitch
  01876	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4034000000000000
  0187e	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv792[ebp], xmm0
  01886	eb 21		 jmp	 SHORT $LN55@draw_pitch
$LN54@draw_pitch:
  01888	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0188d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01895	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01899	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  018a1	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv792[ebp], xmm0
$LN55@draw_pitch:
  018a9	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv792[ebp]
  018b1	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv793[ebp], xmm0
$LN57@draw_pitch:
  018b9	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_coarse_height$11[ebp]
  018c1	f2 0f 59 85 bc
	fe ff ff	 mulsd	 xmm0, QWORD PTR tv793[ebp]
  018c9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  018d1	f3 0f 5a 8d 04
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _pitch_y$1[ebp]
  018d9	f2 0f 58 c8	 addsd	 xmm1, xmm0
  018dd	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  018e1	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0
$LN34@draw_pitch:

; 7540 : 
; 7541 : 			pitch_y += y_centre;

  018e9	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _pitch_y$1[ebp]
  018f1	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _y_centre$[ebp]
  018f6	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0

; 7542 : 
; 7543 : 			draw_2d_mono_sprite(large_right_carat, x_end, pitch_y, MFD_COLOUR1);

  018fe	b8 04 00 00 00	 mov	 eax, 4
  01903	6b c8 00	 imul	 ecx, eax, 0
  01906	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0190c	52		 push	 edx
  0190d	51		 push	 ecx
  0190e	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _pitch_y$1[ebp]
  01916	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0191b	51		 push	 ecx
  0191c	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  01924	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01929	68 00 00 00 00	 push	 OFFSET ?large_right_carat@@3PADA
  0192e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 7544 : 		}
; 7545 : 	}
; 7546 : 
; 7547 : 
; 7548 : 	//
; 7549 : 	// roll
; 7550 : 	//
; 7551 : 
; 7552 : 	{
; 7553 : 		set_2d_instance_position (mfd_env, PITCH_DATUM_X, PITCH_DATUM_Y - size);

  01933	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0193b	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _size$[ebp]
  01940	51		 push	 ecx
  01941	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01946	51		 push	 ecx
  01947	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0194c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01951	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01956	50		 push	 eax
  01957	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 7554 : 
; 7555 : 		set_2d_instance_rotation (mfd_env, rad (0.0));

  0195c	51		 push	 ecx
  0195d	0f 57 c0	 xorps	 xmm0, xmm0
  01960	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01965	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0196a	50		 push	 eax
  0196b	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7556 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01970	b8 04 00 00 00	 mov	 eax, 4
  01975	6b c8 00	 imul	 ecx, eax, 0
  01978	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0197e	52		 push	 edx
  0197f	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01984	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0198b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0198f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01997	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0199b	51		 push	 ecx
  0199c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a1	51		 push	 ecx
  019a2	0f 57 c0	 xorps	 xmm0, xmm0
  019a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019aa	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  019af	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  019b6	51		 push	 ecx
  019b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019bc	51		 push	 ecx
  019bd	0f 57 c0	 xorps	 xmm0, xmm0
  019c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019c5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7557 : 
; 7558 : 		set_2d_instance_rotation (mfd_env, rad (10.0));

  019ca	51		 push	 ecx
  019cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  019d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  019dd	50		 push	 eax
  019de	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7559 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  019e3	b8 04 00 00 00	 mov	 eax, 4
  019e8	6b c8 00	 imul	 ecx, eax, 0
  019eb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019f1	52		 push	 edx
  019f2	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  019f7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  019fe	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01a02	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01a0a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a0e	51		 push	 ecx
  01a0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a14	51		 push	 ecx
  01a15	0f 57 c0	 xorps	 xmm0, xmm0
  01a18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a1d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01a22	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01a29	51		 push	 ecx
  01a2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a2f	51		 push	 ecx
  01a30	0f 57 c0	 xorps	 xmm0, xmm0
  01a33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a38	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7560 : 		set_2d_instance_rotation (mfd_env, rad (-10.0));

  01a3d	51		 push	 ecx
  01a3e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be32b8c2
  01a46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a4b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01a50	50		 push	 eax
  01a51	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7561 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01a56	b8 04 00 00 00	 mov	 eax, 4
  01a5b	6b c8 00	 imul	 ecx, eax, 0
  01a5e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a64	52		 push	 edx
  01a65	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01a6a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01a71	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01a75	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01a7d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a81	51		 push	 ecx
  01a82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a87	51		 push	 ecx
  01a88	0f 57 c0	 xorps	 xmm0, xmm0
  01a8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a90	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01a95	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01a9c	51		 push	 ecx
  01a9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa2	51		 push	 ecx
  01aa3	0f 57 c0	 xorps	 xmm0, xmm0
  01aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aab	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7562 : 
; 7563 : 		set_2d_instance_rotation (mfd_env, rad (20.0));

  01ab0	51		 push	 ecx
  01ab1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb2b8c2
  01ab9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01abe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01ac3	50		 push	 eax
  01ac4	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7564 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01ac9	b8 04 00 00 00	 mov	 eax, 4
  01ace	6b c8 00	 imul	 ecx, eax, 0
  01ad1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ad7	52		 push	 edx
  01ad8	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01add	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01ae4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01ae8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01af0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01af4	51		 push	 ecx
  01af5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01afa	51		 push	 ecx
  01afb	0f 57 c0	 xorps	 xmm0, xmm0
  01afe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b03	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01b08	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01b0f	51		 push	 ecx
  01b10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b15	51		 push	 ecx
  01b16	0f 57 c0	 xorps	 xmm0, xmm0
  01b19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b1e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7565 : 		set_2d_instance_rotation (mfd_env, rad (-20.0));

  01b23	51		 push	 ecx
  01b24	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb2b8c2
  01b2c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b31	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01b36	50		 push	 eax
  01b37	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7566 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01b3c	b8 04 00 00 00	 mov	 eax, 4
  01b41	6b c8 00	 imul	 ecx, eax, 0
  01b44	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b4a	52		 push	 edx
  01b4b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01b50	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01b57	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01b5b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01b63	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b67	51		 push	 ecx
  01b68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b6d	51		 push	 ecx
  01b6e	0f 57 c0	 xorps	 xmm0, xmm0
  01b71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b76	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01b7b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01b82	51		 push	 ecx
  01b83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b88	51		 push	 ecx
  01b89	0f 57 c0	 xorps	 xmm0, xmm0
  01b8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b91	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7567 : 
; 7568 : 		set_2d_instance_rotation (mfd_env, rad (30.0));

  01b96	51		 push	 ecx
  01b97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f060a92
  01b9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ba4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01ba9	50		 push	 eax
  01baa	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7569 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01baf	b8 04 00 00 00	 mov	 eax, 4
  01bb4	6b c8 00	 imul	 ecx, eax, 0
  01bb7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bbd	52		 push	 edx
  01bbe	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01bc3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01bca	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01bce	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01bd6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bda	51		 push	 ecx
  01bdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be0	51		 push	 ecx
  01be1	0f 57 c0	 xorps	 xmm0, xmm0
  01be4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be9	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01bee	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01bf5	51		 push	 ecx
  01bf6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bfb	51		 push	 ecx
  01bfc	0f 57 c0	 xorps	 xmm0, xmm0
  01bff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c04	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7570 : 		set_2d_instance_rotation (mfd_env, rad (-30.0));

  01c09	51		 push	 ecx
  01c0a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf060a92
  01c12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c17	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01c1c	50		 push	 eax
  01c1d	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7571 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01c22	b8 04 00 00 00	 mov	 eax, 4
  01c27	6b c8 00	 imul	 ecx, eax, 0
  01c2a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c30	52		 push	 edx
  01c31	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01c36	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01c3d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01c41	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01c49	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c4d	51		 push	 ecx
  01c4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c53	51		 push	 ecx
  01c54	0f 57 c0	 xorps	 xmm0, xmm0
  01c57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c5c	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01c61	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01c68	51		 push	 ecx
  01c69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c6e	51		 push	 ecx
  01c6f	0f 57 c0	 xorps	 xmm0, xmm0
  01c72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c77	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7572 : 
; 7573 : 		set_2d_instance_rotation (mfd_env, rad (45.0));

  01c7c	51		 push	 ecx
  01c7d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f490fdb
  01c85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01c8f	50		 push	 eax
  01c90	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7574 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01c95	b8 04 00 00 00	 mov	 eax, 4
  01c9a	6b c8 00	 imul	 ecx, eax, 0
  01c9d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ca3	52		 push	 edx
  01ca4	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01ca9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01cb0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01cb4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01cbc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cc0	51		 push	 ecx
  01cc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cc6	51		 push	 ecx
  01cc7	0f 57 c0	 xorps	 xmm0, xmm0
  01cca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ccf	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01cd4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01cdb	51		 push	 ecx
  01cdc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ce1	51		 push	 ecx
  01ce2	0f 57 c0	 xorps	 xmm0, xmm0
  01ce5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cea	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7575 : 		set_2d_instance_rotation (mfd_env, rad (-45.0));

  01cef	51		 push	 ecx
  01cf0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf490fdb
  01cf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cfd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01d02	50		 push	 eax
  01d03	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7576 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01d08	b8 04 00 00 00	 mov	 eax, 4
  01d0d	6b c8 00	 imul	 ecx, eax, 0
  01d10	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d16	52		 push	 edx
  01d17	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01d1c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d23	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01d27	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01d2f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d33	51		 push	 ecx
  01d34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d39	51		 push	 ecx
  01d3a	0f 57 c0	 xorps	 xmm0, xmm0
  01d3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d42	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01d47	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d4e	51		 push	 ecx
  01d4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d54	51		 push	 ecx
  01d55	0f 57 c0	 xorps	 xmm0, xmm0
  01d58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d5d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7577 : 
; 7578 : 		set_2d_instance_rotation (mfd_env, rad (60.0));

  01d62	51		 push	 ecx
  01d63	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f860a92
  01d6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d70	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01d75	50		 push	 eax
  01d76	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7579 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01d7b	b8 04 00 00 00	 mov	 eax, 4
  01d80	6b c8 00	 imul	 ecx, eax, 0
  01d83	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d89	52		 push	 edx
  01d8a	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01d8f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d96	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01d9a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01da2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01da6	51		 push	 ecx
  01da7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dac	51		 push	 ecx
  01dad	0f 57 c0	 xorps	 xmm0, xmm0
  01db0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01db5	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01dba	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01dc1	51		 push	 ecx
  01dc2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dc7	51		 push	 ecx
  01dc8	0f 57 c0	 xorps	 xmm0, xmm0
  01dcb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dd0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7580 : 		set_2d_instance_rotation (mfd_env, rad (-60.0));

  01dd5	51		 push	 ecx
  01dd6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf860a92
  01dde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01de3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01de8	50		 push	 eax
  01de9	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7581 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01dee	b8 04 00 00 00	 mov	 eax, 4
  01df3	6b c8 00	 imul	 ecx, eax, 0
  01df6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01dfc	52		 push	 edx
  01dfd	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01e02	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01e09	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01e0d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01e15	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e19	51		 push	 ecx
  01e1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e1f	51		 push	 ecx
  01e20	0f 57 c0	 xorps	 xmm0, xmm0
  01e23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e28	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01e2d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01e34	51		 push	 ecx
  01e35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e3a	51		 push	 ecx
  01e3b	0f 57 c0	 xorps	 xmm0, xmm0
  01e3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e43	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7582 : 
; 7583 : 		set_2d_instance_rotation (mfd_env, bound (roll, rad(-60.0), rad(60.0)));

  01e48	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  01e4d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0c15236000000
  01e55	66 0f 2f c8	 comisd	 xmm1, xmm0
  01e59	76 12		 jbe	 SHORT $LN60@draw_pitch
  01e5b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0c15236000000
  01e63	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv971[ebp], xmm0
  01e6b	eb 3e		 jmp	 SHORT $LN61@draw_pitch
$LN60@draw_pitch:
  01e6d	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  01e72	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0c15236000000
  01e7a	76 12		 jbe	 SHORT $LN58@draw_pitch
  01e7c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  01e84	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv970[ebp], xmm0
  01e8c	eb 0d		 jmp	 SHORT $LN59@draw_pitch
$LN58@draw_pitch:
  01e8e	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  01e93	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv970[ebp], xmm0
$LN59@draw_pitch:
  01e9b	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv970[ebp]
  01ea3	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv971[ebp], xmm0
$LN61@draw_pitch:
  01eab	f2 0f 5a 85 bc
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv971[ebp]
  01eb3	51		 push	 ecx
  01eb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eb9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01ebe	50		 push	 eax
  01ebf	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 7584 : 		draw_2d_filled_triangle(0.0, -size, -0.035, -size + 0.075, 0.035, -size + 0.075, MFD_COLOUR4);

  01ec4	b8 04 00 00 00	 mov	 eax, 4
  01ec9	6b c8 03	 imul	 ecx, eax, 3
  01ecc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ed2	52		 push	 edx
  01ed3	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01ed8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01edf	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01ee3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb3333333333333
  01eeb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01eef	51		 push	 ecx
  01ef0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ef5	51		 push	 ecx
  01ef6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  01efe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f03	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01f08	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01f0f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01f13	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb3333333333333
  01f1b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f1f	51		 push	 ecx
  01f20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f25	51		 push	 ecx
  01f26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  01f2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f33	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01f38	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01f3f	51		 push	 ecx
  01f40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f45	51		 push	 ecx
  01f46	0f 57 c0	 xorps	 xmm0, xmm0
  01f49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f4e	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 7585 : 	}
; 7586 : 
; 7587 : 	//
; 7588 : 	// restore 2D environment
; 7589 : 	//
; 7590 : 
; 7591 : 	reset_2d_instance (mfd_env);

  01f53	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01f58	50		 push	 eax
  01f59	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 7592 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  01f5e	51		 push	 ecx
  01f5f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  01f67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f6c	51		 push	 ecx
  01f6d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  01f75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f7a	51		 push	 ecx
  01f7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f88	51		 push	 ecx
  01f89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f96	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01f9b	50		 push	 eax
  01f9c	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 7593 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01fa1	51		 push	 ecx
  01fa2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01faa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01faf	51		 push	 ecx
  01fb0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  01fb8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fbd	51		 push	 ecx
  01fbe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  01fc6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fcb	51		 push	 ecx
  01fcc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  01fd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fd9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01fde	50		 push	 eax
  01fdf	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7594 : 
; 7595 : 	// datum
; 7596 : 	draw_2d_line(x_centre, 0.0, x_centre + 0.05, -0.05, MFD_COLOUR6);

  01fe4	b8 04 00 00 00	 mov	 eax, 4
  01fe9	6b c8 05	 imul	 ecx, eax, 5
  01fec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ff2	52		 push	 edx
  01ff3	51		 push	 ecx
  01ff4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01ffc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02001	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02006	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0200e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02012	51		 push	 ecx
  02013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02018	51		 push	 ecx
  02019	0f 57 c0	 xorps	 xmm0, xmm0
  0201c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02021	51		 push	 ecx
  02022	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  02027	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0202c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7597 : 	draw_2d_line(x_centre, 0.0, x_centre - 0.05, -0.05, MFD_COLOUR6);

  02031	b8 04 00 00 00	 mov	 eax, 4
  02036	6b c8 05	 imul	 ecx, eax, 5
  02039	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0203f	52		 push	 edx
  02040	51		 push	 ecx
  02041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  02049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0204e	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02053	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0205b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0205f	51		 push	 ecx
  02060	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02065	51		 push	 ecx
  02066	0f 57 c0	 xorps	 xmm0, xmm0
  02069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0206e	51		 push	 ecx
  0206f	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  02074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02079	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7598 : 
; 7599 : 	draw_2d_line(x_centre + 0.05, -0.05, x_centre + 0.10, 0.0, MFD_COLOUR6);

  0207e	b8 04 00 00 00	 mov	 eax, 4
  02083	6b c8 05	 imul	 ecx, eax, 5
  02086	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0208c	52		 push	 edx
  0208d	51		 push	 ecx
  0208e	0f 57 c0	 xorps	 xmm0, xmm0
  02091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02096	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  0209b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  020a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020a7	51		 push	 ecx
  020a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ad	51		 push	 ecx
  020ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  020b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020bb	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  020c0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  020c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020cc	51		 push	 ecx
  020cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020d2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7600 : 	draw_2d_line(x_centre - 0.05, -0.05, x_centre - 0.10, 0.0, MFD_COLOUR6);

  020d7	b8 04 00 00 00	 mov	 eax, 4
  020dc	6b c8 05	 imul	 ecx, eax, 5
  020df	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020e5	52		 push	 edx
  020e6	51		 push	 ecx
  020e7	0f 57 c0	 xorps	 xmm0, xmm0
  020ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ef	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  020f4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  020fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02100	51		 push	 ecx
  02101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02106	51		 push	 ecx
  02107	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  0210f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02114	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02119	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02121	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02125	51		 push	 ecx
  02126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0212b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7601 : 
; 7602 : 	draw_2d_line(x_centre + 0.10, 0.0, x_centre + 0.20, 0.0, MFD_COLOUR6);

  02130	b8 04 00 00 00	 mov	 eax, 4
  02135	6b c8 05	 imul	 ecx, eax, 5
  02138	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0213e	52		 push	 edx
  0213f	51		 push	 ecx
  02140	0f 57 c0	 xorps	 xmm0, xmm0
  02143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02148	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  0214d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  02155	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02159	51		 push	 ecx
  0215a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0215f	51		 push	 ecx
  02160	0f 57 c0	 xorps	 xmm0, xmm0
  02163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02168	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  0216d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  02175	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02179	51		 push	 ecx
  0217a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0217f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7603 : 	draw_2d_line(x_centre - 0.10, 0.0, x_centre - 0.20, 0.0, MFD_COLOUR6);

  02184	b8 04 00 00 00	 mov	 eax, 4
  02189	6b c8 05	 imul	 ecx, eax, 5
  0218c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02192	52		 push	 edx
  02193	51		 push	 ecx
  02194	0f 57 c0	 xorps	 xmm0, xmm0
  02197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0219c	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  021a1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  021a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021ad	51		 push	 ecx
  021ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b3	51		 push	 ecx
  021b4	0f 57 c0	 xorps	 xmm0, xmm0
  021b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021bc	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  021c1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  021c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021cd	51		 push	 ecx
  021ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021d3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7604 : }

  021d8	5f		 pop	 edi
  021d9	5e		 pop	 esi
  021da	5b		 pop	 ebx
  021db	8b e5		 mov	 esp, ebp
  021dd	5d		 pop	 ebp
  021de	c3		 ret	 0
?draw_pitch_ladder@@YGXXZ ENDP				; draw_pitch_ladder
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?limit_pitch@@YGHHPAH@Z
_TEXT	SEGMENT
_pitch$ = 8						; size = 4
_step_direction$ = 12					; size = 4
?limit_pitch@@YGHHPAH@Z PROC				; limit_pitch, COMDAT

; 7145 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7146 : 	if (pitch > 9)

  00009	83 7d 08 09	 cmp	 DWORD PTR _pitch$[ebp], 9
  0000d	7e 1f		 jle	 SHORT $LN2@limit_pitc

; 7147 : 	{
; 7148 : 		pitch -= 18;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00012	83 e8 12	 sub	 eax, 18			; 00000012H
  00015	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 7149 : 
; 7150 : 		pitch = -pitch;

  00018	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  0001b	f7 d8		 neg	 eax
  0001d	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 7151 : 
; 7152 : 		*step_direction = -(*step_direction);

  00020	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	f7 d9		 neg	 ecx
  00027	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx
  0002c	eb 23		 jmp	 SHORT $LN3@limit_pitc
$LN2@limit_pitc:

; 7153 : 	}
; 7154 : 	else if (pitch < -9)

  0002e	83 7d 08 f7	 cmp	 DWORD PTR _pitch$[ebp], -9 ; fffffff7H
  00032	7d 1d		 jge	 SHORT $LN3@limit_pitc

; 7155 : 	{
; 7156 : 		pitch += 18;

  00034	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00037	83 c0 12	 add	 eax, 18			; 00000012H
  0003a	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 7157 : 
; 7158 : 		pitch = -pitch;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00040	f7 d8		 neg	 eax
  00042	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 7159 : 
; 7160 : 		*step_direction = -(*step_direction);

  00045	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	f7 d9		 neg	 ecx
  0004c	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0004f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@limit_pitc:

; 7161 : 	}
; 7162 : 
; 7163 : 	return (pitch);

  00051	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]

; 7164 : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?limit_pitch@@YGHHPAH@Z ENDP				; limit_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_engine_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv726 = -188						; size = 8
tv679 = -188						; size = 8
tv632 = -188						; size = 8
tv585 = -188						; size = 8
tv538 = -188						; size = 8
tv491 = -188						; size = 8
tv444 = -188						; size = 8
tv397 = -188						; size = 8
tv350 = -188						; size = 8
tv264 = -188						; size = 8
tv216 = -188						; size = 8
tv183 = -188						; size = 8
tv146 = -188						; size = 8
tv1467 = -180						; size = 8
tv1441 = -180						; size = 8
tv1417 = -180						; size = 8
tv1391 = -180						; size = 8
tv1367 = -180						; size = 8
tv1341 = -180						; size = 8
tv1317 = -180						; size = 8
tv1291 = -180						; size = 8
tv1267 = -180						; size = 8
tv1241 = -180						; size = 8
tv1217 = -180						; size = 8
tv1191 = -180						; size = 8
tv1167 = -180						; size = 8
tv1141 = -180						; size = 8
tv1117 = -180						; size = 8
tv1091 = -180						; size = 8
tv1067 = -180						; size = 8
tv1041 = -180						; size = 8
tv929 = -180						; size = 8
tv877 = -180						; size = 8
tv863 = -180						; size = 8
tv830 = -180						; size = 8
tv727 = -180						; size = 8
tv680 = -180						; size = 8
tv633 = -180						; size = 8
tv586 = -180						; size = 8
tv539 = -180						; size = 8
tv492 = -180						; size = 8
tv445 = -180						; size = 8
tv398 = -180						; size = 8
tv351 = -180						; size = 8
tv265 = -180						; size = 8
tv217 = -180						; size = 8
tv184 = -180						; size = 8
tv147 = -180						; size = 8
tv817 = -176						; size = 4
_fvalue$ = -108						; size = 4
_x_adjust$ = -104					; size = 4
_bottom_edge$ = -100					; size = 4
_ivalue$ = -96						; size = 4
_s2$ = -92						; size = 10
_s$ = -80						; size = 80
?draw_engine_display_mfd@@YGXXZ PROC			; draw_engine_display_mfd, COMDAT

; 6513 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6514 : 	char
; 6515 : 		s[80], s2[10];
; 6516 : 
; 6517 : 	int
; 6518 : 		ivalue;
; 6519 : 
; 6520 : 	float
; 6521 : 		bottom_edge,
; 6522 : 		x_adjust,
; 6523 : 		fvalue;
; 6524 : 
; 6525 : 	set_mono_font_colour (MFD_COLOUR1);

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6526 : 
; 6527 : 	if (draw_large_mfd)

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00027	74 09		 je	 SHORT $LN2@draw_engin

; 6528 : 	{
; 6529 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00029	6a 04		 push	 4
  0002b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6530 : 	}
; 6531 : 	else

  00030	eb 07		 jmp	 SHORT $LN3@draw_engin
$LN2@draw_engin:

; 6532 : 	{
; 6533 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN3@draw_engin:

; 6534 : 	}
; 6535 : 
; 6536 : 	////////////////////////////////////////
; 6537 : 
; 6538 : 	set_2d_mono_font_position (-0.8, 0.9);

  00039	51		 push	 ecx
  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	51		 push	 ecx
  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6539 : 
; 6540 : 	set_mono_font_rel_position (1.0, 0.0);

  0005a	51		 push	 ecx
  0005b	0f 57 c0	 xorps	 xmm0, xmm0
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	51		 push	 ecx
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6541 : 
; 6542 : 	print_mono_font_string ("L ENGINE");

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_08ICMALC@L?5ENGINE@
  0007b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6543 : 
; 6544 : 	set_2d_mono_font_position (0.8, 0.9);

  00080	51		 push	 ecx
  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	51		 push	 ecx
  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6545 : 
; 6546 : 	x_adjust = -get_mono_font_string_width ("R ENGINE");

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  000a6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000ab	d9 9d 50 ff ff
	ff		 fstp	 DWORD PTR tv817[ebp]
  000b1	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv817[ebp]
  000b9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000c0	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6547 : 
; 6548 : 	set_mono_font_rel_position (x_adjust, 0.0);

  000c5	51		 push	 ecx
  000c6	0f 57 c0	 xorps	 xmm0, xmm0
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	51		 push	 ecx
  000cf	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6549 : 
; 6550 : 	print_mono_font_string ("R ENGINE");

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  000e3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6551 : 
; 6552 : 	////////////////////////////////////////
; 6553 : 
; 6554 : 	set_2d_mono_font_position (-0.7, -0.6);

  000e8	51		 push	 ecx
  000e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	51		 push	 ecx
  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6555 : 
; 6556 : 	x_adjust = get_mono_font_string_width ("FUEL QTY") * -0.5;

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_08HFKNNLAF@FUEL?5QTY@
  0010e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00113	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv830[ebp]
  00119	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv830[ebp]
  00121	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00129	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0012d	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6557 : 
; 6558 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00132	51		 push	 ecx
  00133	0f 57 c0	 xorps	 xmm0, xmm0
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	51		 push	 ecx
  0013c	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6559 : 
; 6560 : 	print_mono_font_string ("FUEL QTY");

  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_08HFKNNLAF@FUEL?5QTY@
  00150	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6561 : 
; 6562 : 	set_2d_mono_font_position (-0.7, -0.7);

  00155	51		 push	 ecx
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0015e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00163	51		 push	 ecx
  00164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6563 : 
; 6564 : /*	x_adjust = get_mono_font_string_width ("LB") * -0.5;
; 6565 : 
; 6566 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 6567 : 
; 6568 : 	print_mono_font_string ("LB"); */
; 6569 : 
; 6570 : 	set_2d_mono_font_position (-0.7, -0.7);

  00176	51		 push	 ecx
  00177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0017f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00184	51		 push	 ecx
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6571 : 
; 6572 : 	fvalue = bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 9999.0);

  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0019c	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  001a4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  001ac	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001b0	0f 57 c9	 xorps	 xmm1, xmm1
  001b3	66 0f 2f c8	 comisd	 xmm1, xmm0
  001b7	76 0d		 jbe	 SHORT $LN19@draw_engin
  001b9	0f 57 c0	 xorps	 xmm0, xmm0
  001bc	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv147[ebp], xmm0
  001c4	eb 68		 jmp	 SHORT $LN20@draw_engin
$LN19@draw_engin:
  001c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001cc	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  001d4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  001dc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40c3878000000000
  001e8	76 12		 jbe	 SHORT $LN17@draw_engin
  001ea	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3878000000000
  001f2	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv146[ebp], xmm0
  001fa	eb 22		 jmp	 SHORT $LN18@draw_engin
$LN17@draw_engin:
  001fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00202	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  0020a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00212	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00216	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv146[ebp], xmm0
$LN18@draw_engin:
  0021e	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv146[ebp]
  00226	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv147[ebp], xmm0
$LN20@draw_engin:
  0022e	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv147[ebp]
  00236	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6573 : 
; 6574 : 	convert_float_to_int (fvalue, &ivalue);

  0023b	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  0023e	50		 push	 eax
  0023f	51		 push	 ecx
  00240	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6575 : 
; 6576 : 	sprintf (s, "%04d lb", ivalue);

  0024f	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00252	50		 push	 eax
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_07MGEFOJJP@?$CF04d?5lb@
  00258	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0025b	51		 push	 ecx
  0025c	e8 00 00 00 00	 call	 _sprintf
  00261	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6577 : 
; 6578 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00264	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00267	50		 push	 eax
  00268	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0026d	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv863[ebp]
  00273	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv863[ebp]
  0027b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00283	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00287	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6579 : 
; 6580 : 	set_mono_font_rel_position (x_adjust, 0.0);

  0028c	51		 push	 ecx
  0028d	0f 57 c0	 xorps	 xmm0, xmm0
  00290	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00295	51		 push	 ecx
  00296	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0029b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6581 : 
; 6582 : 	print_mono_font_string (s);

  002a5	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  002a8	50		 push	 eax
  002a9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6583 : 
; 6584 : 	////////////////////////////////////////
; 6585 : 
; 6586 : 	set_2d_mono_font_position (0.0, -0.6);

  002ae	51		 push	 ecx
  002af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bc	51		 push	 ecx
  002bd	0f 57 c0	 xorps	 xmm0, xmm0
  002c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6587 : 
; 6588 : 	x_adjust = get_mono_font_string_width ("THROTTLE") * -0.5;

  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_08PLAGFMEO@THROTTLE@
  002cf	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  002d4	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv877[ebp]
  002da	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv877[ebp]
  002e2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6589 : 
; 6590 : 	set_mono_font_rel_position (x_adjust, 0.0);

  002f3	51		 push	 ecx
  002f4	0f 57 c0	 xorps	 xmm0, xmm0
  002f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fc	51		 push	 ecx
  002fd	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00302	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00307	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6591 : 
; 6592 : 	print_mono_font_string ("THROTTLE");

  0030c	68 00 00 00 00	 push	 OFFSET ??_C@_08PLAGFMEO@THROTTLE@
  00311	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6593 : 
; 6594 : //	set_2d_mono_font_position (0.0, -0.7);
; 6595 : 
; 6596 : 	fvalue = bound (current_flight_dynamics->left_engine_n1_rpm.max, 0.0, 110.0);

  00316	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0031b	f3 0f 5a 80 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7328]
  00323	0f 57 c9	 xorps	 xmm1, xmm1
  00326	66 0f 2f c8	 comisd	 xmm1, xmm0
  0032a	76 0d		 jbe	 SHORT $LN23@draw_engin
  0032c	0f 57 c0	 xorps	 xmm0, xmm0
  0032f	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv184[ebp], xmm0
  00337	eb 50		 jmp	 SHORT $LN24@draw_engin
$LN23@draw_engin:
  00339	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0033f	f3 0f 5a 81 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7328]
  00347	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  0034f	76 12		 jbe	 SHORT $LN21@draw_engin
  00351	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  00359	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv183[ebp], xmm0
  00361	eb 16		 jmp	 SHORT $LN22@draw_engin
$LN21@draw_engin:
  00363	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00369	f3 0f 5a 82 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7328]
  00371	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv183[ebp], xmm0
$LN22@draw_engin:
  00379	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv183[ebp]
  00381	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv184[ebp], xmm0
$LN24@draw_engin:
  00389	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv184[ebp]
  00391	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6597 : 	convert_float_to_int (fvalue, &ivalue);

  00396	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00399	50		 push	 eax
  0039a	51		 push	 ecx
  0039b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6598 : 
; 6599 : 	if (ivalue < 60)

  003aa	83 7d a0 3c	 cmp	 DWORD PTR _ivalue$[ebp], 60 ; 0000003cH
  003ae	7d 13		 jge	 SHORT $LN4@draw_engin

; 6600 : 		sprintf(s2, "OFF ");

  003b0	68 00 00 00 00	 push	 OFFSET ??_C@_04LMJCBFEL@OFF?5@
  003b5	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  003b8	50		 push	 eax
  003b9	e8 00 00 00 00	 call	 _sprintf
  003be	83 c4 08	 add	 esp, 8
  003c1	eb 58		 jmp	 SHORT $LN9@draw_engin
$LN4@draw_engin:

; 6601 : 	else if (ivalue == 60)

  003c3	83 7d a0 3c	 cmp	 DWORD PTR _ivalue$[ebp], 60 ; 0000003cH
  003c7	75 13		 jne	 SHORT $LN6@draw_engin

; 6602 : 		sprintf(s2, "IDLE");

  003c9	68 00 00 00 00	 push	 OFFSET ??_C@_04IMMGDCFE@IDLE@
  003ce	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  003d1	50		 push	 eax
  003d2	e8 00 00 00 00	 call	 _sprintf
  003d7	83 c4 08	 add	 esp, 8
  003da	eb 3f		 jmp	 SHORT $LN9@draw_engin
$LN6@draw_engin:

; 6603 : 	else if (ivalue == 110.0)

  003dc	f2 0f 2a 45 a0	 cvtsi2sd xmm0, DWORD PTR _ivalue$[ebp]
  003e1	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  003e9	9f		 lahf
  003ea	f6 c4 44	 test	 ah, 68			; 00000044H
  003ed	7a 13		 jp	 SHORT $LN8@draw_engin

; 6604 : 		sprintf(s2, "FLY ");

  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_04MJEFHDBD@FLY?5@
  003f4	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  003f7	50		 push	 eax
  003f8	e8 00 00 00 00	 call	 _sprintf
  003fd	83 c4 08	 add	 esp, 8

; 6605 : 	else

  00400	eb 19		 jmp	 SHORT $LN9@draw_engin
$LN8@draw_engin:

; 6606 : 		sprintf(s2, "%03d%%", (ivalue-60) * 2);

  00402	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00405	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  00409	51		 push	 ecx
  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
  0040f	8d 55 a4	 lea	 edx, DWORD PTR _s2$[ebp]
  00412	52		 push	 edx
  00413	e8 00 00 00 00	 call	 _sprintf
  00418	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@draw_engin:

; 6607 : 
; 6608 : 	/*
; 6609 : 	x_adjust = get_mono_font_string_width (s) * -0.5;
; 6610 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 6611 : 	print_mono_font_string (s);
; 6612 : 	*/
; 6613 : 
; 6614 : 	set_2d_mono_font_position (0.0, -0.7);

  0041b	51		 push	 ecx
  0041c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00424	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00429	51		 push	 ecx
  0042a	0f 57 c0	 xorps	 xmm0, xmm0
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6615 : 
; 6616 : 	fvalue = bound (current_flight_dynamics->right_engine_n1_rpm.max, 0.0, 110.0);

  00437	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0043c	f3 0f 5a 80 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7424]
  00444	0f 57 c9	 xorps	 xmm1, xmm1
  00447	66 0f 2f c8	 comisd	 xmm1, xmm0
  0044b	76 0d		 jbe	 SHORT $LN27@draw_engin
  0044d	0f 57 c0	 xorps	 xmm0, xmm0
  00450	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv217[ebp], xmm0
  00458	eb 50		 jmp	 SHORT $LN28@draw_engin
$LN27@draw_engin:
  0045a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00460	f3 0f 5a 81 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7424]
  00468	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  00470	76 12		 jbe	 SHORT $LN25@draw_engin
  00472	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  0047a	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv216[ebp], xmm0
  00482	eb 16		 jmp	 SHORT $LN26@draw_engin
$LN25@draw_engin:
  00484	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0048a	f3 0f 5a 82 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7424]
  00492	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv216[ebp], xmm0
$LN26@draw_engin:
  0049a	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv216[ebp]
  004a2	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv217[ebp], xmm0
$LN28@draw_engin:
  004aa	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv217[ebp]
  004b2	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6617 : 	convert_float_to_int (fvalue, &ivalue);

  004b7	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  004ba	50		 push	 eax
  004bb	51		 push	 ecx
  004bc	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  004c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c6	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6618 : 
; 6619 : 	if (ivalue < 60)

  004cb	83 7d a0 3c	 cmp	 DWORD PTR _ivalue$[ebp], 60 ; 0000003cH
  004cf	7d 17		 jge	 SHORT $LN10@draw_engin

; 6620 : 		sprintf(s, " %s  OFF ", s2);

  004d1	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  004d4	50		 push	 eax
  004d5	68 00 00 00 00	 push	 OFFSET ??_C@_09PEMPOEMF@?5?$CFs?5?5OFF?5@
  004da	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  004dd	51		 push	 ecx
  004de	e8 00 00 00 00	 call	 _sprintf
  004e3	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e6	eb 64		 jmp	 SHORT $LN15@draw_engin
$LN10@draw_engin:

; 6621 : 	else if (ivalue == 60)

  004e8	83 7d a0 3c	 cmp	 DWORD PTR _ivalue$[ebp], 60 ; 0000003cH
  004ec	75 17		 jne	 SHORT $LN12@draw_engin

; 6622 : 		sprintf(s, " %s  IDLE", s2);

  004ee	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  004f1	50		 push	 eax
  004f2	68 00 00 00 00	 push	 OFFSET ??_C@_09MEJLMDNK@?5?$CFs?5?5IDLE@
  004f7	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  004fa	51		 push	 ecx
  004fb	e8 00 00 00 00	 call	 _sprintf
  00500	83 c4 0c	 add	 esp, 12			; 0000000cH
  00503	eb 47		 jmp	 SHORT $LN15@draw_engin
$LN12@draw_engin:

; 6623 : 	else if (ivalue == 110.0)

  00505	f2 0f 2a 45 a0	 cvtsi2sd xmm0, DWORD PTR _ivalue$[ebp]
  0050a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  00512	9f		 lahf
  00513	f6 c4 44	 test	 ah, 68			; 00000044H
  00516	7a 17		 jp	 SHORT $LN14@draw_engin

; 6624 : 		sprintf(s, " %s  FLY ", s2);

  00518	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  0051b	50		 push	 eax
  0051c	68 00 00 00 00	 push	 OFFSET ??_C@_09IBBIICJN@?5?$CFs?5?5FLY?5@
  00521	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00524	51		 push	 ecx
  00525	e8 00 00 00 00	 call	 _sprintf
  0052a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6625 : 	else

  0052d	eb 1d		 jmp	 SHORT $LN15@draw_engin
$LN14@draw_engin:

; 6626 : 		sprintf(s, " %s  %03d%%", s2, (ivalue-60) * 2);

  0052f	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00532	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  00536	51		 push	 ecx
  00537	8d 55 a4	 lea	 edx, DWORD PTR _s2$[ebp]
  0053a	52		 push	 edx
  0053b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BAGGPIOL@?5?$CFs?5?5?$CF03d?$CF?$CF@
  00540	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00543	50		 push	 eax
  00544	e8 00 00 00 00	 call	 _sprintf
  00549	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@draw_engin:

; 6627 : 
; 6628 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  0054c	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0054f	50		 push	 eax
  00550	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00555	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv929[ebp]
  0055b	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv929[ebp]
  00563	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0056b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0056f	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6629 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00574	51		 push	 ecx
  00575	0f 57 c0	 xorps	 xmm0, xmm0
  00578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057d	51		 push	 ecx
  0057e	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00583	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00588	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6630 : 	print_mono_font_string (s);

  0058d	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00590	50		 push	 eax
  00591	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6631 : 
; 6632 : 	////////////////////////////////////////
; 6633 : 
; 6634 : 	set_2d_mono_font_position (0.5, -0.6);

  00596	51		 push	 ecx
  00597	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0059f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a4	51		 push	 ecx
  005a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6635 : 
; 6636 : 	fvalue = bound (current_flight_dynamics->apu_rpm.value + 0.5, 0.0, 100.0);

  005b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005bc	f3 0f 5a 80 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7484]
  005c4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  005cc	0f 57 c9	 xorps	 xmm1, xmm1
  005cf	66 0f 2f c8	 comisd	 xmm1, xmm0
  005d3	76 0d		 jbe	 SHORT $LN31@draw_engin
  005d5	0f 57 c0	 xorps	 xmm0, xmm0
  005d8	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv265[ebp], xmm0
  005e0	eb 60		 jmp	 SHORT $LN32@draw_engin
$LN31@draw_engin:
  005e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005e8	f3 0f 5a 81 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7484]
  005f0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  005f8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4059000000000000
  00600	76 12		 jbe	 SHORT $LN29@draw_engin
  00602	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4059000000000000
  0060a	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv264[ebp], xmm0
  00612	eb 1e		 jmp	 SHORT $LN30@draw_engin
$LN29@draw_engin:
  00614	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0061a	f3 0f 5a 82 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7484]
  00622	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0062a	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv264[ebp], xmm0
$LN30@draw_engin:
  00632	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv264[ebp]
  0063a	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv265[ebp], xmm0
$LN32@draw_engin:
  00642	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv265[ebp]
  0064a	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6637 : 	convert_float_to_int (fvalue, &ivalue);

  0064f	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00652	50		 push	 eax
  00653	51		 push	 ecx
  00654	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00659	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6638 : 
; 6639 : 	sprintf(s, "SPU %03d%%", ivalue);

  00663	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00666	50		 push	 eax
  00667	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@
  0066c	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0066f	51		 push	 ecx
  00670	e8 00 00 00 00	 call	 _sprintf
  00675	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6640 : 
; 6641 : 	print_mono_font_string (s);

  00678	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0067b	50		 push	 eax
  0067c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6642 : 
; 6643 : 	////////////////////////////////////////
; 6644 : 
; 6645 : 	draw_2d_line (-0.7500 - 0.02, 0.3333, -0.6500 + 0.02, 0.3333, MFD_COLOUR1);

  00681	b8 04 00 00 00	 mov	 eax, 4
  00686	6b c8 00	 imul	 ecx, eax, 0
  00689	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0068f	52		 push	 edx
  00690	51		 push	 ecx
  00691	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00699	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069e	51		 push	 ecx
  0069f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  006a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ac	51		 push	 ecx
  006ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  006b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ba	51		 push	 ecx
  006bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf451eb8
  006c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6646 : 	draw_2d_line (-0.5500 - 0.02, 0.3333, -0.4500 + 0.02, 0.3333, MFD_COLOUR1);

  006cd	b8 04 00 00 00	 mov	 eax, 4
  006d2	6b c8 00	 imul	 ecx, eax, 0
  006d5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006db	52		 push	 edx
  006dc	51		 push	 ecx
  006dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  006e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ea	51		 push	 ecx
  006eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  006f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f8	51		 push	 ecx
  006f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00701	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00706	51		 push	 ecx
  00707	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  0070f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00714	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6647 : 	draw_2d_line (-0.3500 - 0.02, 0.3333, -0.2500 + 0.02, 0.3333, MFD_COLOUR1);

  00719	b8 04 00 00 00	 mov	 eax, 4
  0071e	6b c8 00	 imul	 ecx, eax, 0
  00721	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00727	52		 push	 edx
  00728	51		 push	 ecx
  00729	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00731	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00736	51		 push	 ecx
  00737	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6b851f
  0073f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00744	51		 push	 ecx
  00745	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0074d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00752	51		 push	 ecx
  00753	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bebd70a4
  0075b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00760	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6648 : 	draw_2d_line (-0.1500 - 0.02, 0.3333, -0.0500 + 0.02, 0.3333, MFD_COLOUR1);

  00765	b8 04 00 00 00	 mov	 eax, 4
  0076a	6b c8 00	 imul	 ecx, eax, 0
  0076d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00773	52		 push	 edx
  00774	51		 push	 ecx
  00775	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0077d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00782	51		 push	 ecx
  00783	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  0078b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00790	51		 push	 ecx
  00791	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079e	51		 push	 ecx
  0079f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2e147b
  007a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ac	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6649 : 
; 6650 : 	draw_2d_line ( 0.7500 + 0.00, 0.3333,  0.6500 - 0.02, 0.3333, MFD_COLOUR1);

  007b1	b8 04 00 00 00	 mov	 eax, 4
  007b6	6b c8 00	 imul	 ecx, eax, 0
  007b9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007bf	52		 push	 edx
  007c0	51		 push	 ecx
  007c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  007c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ce	51		 push	 ecx
  007cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2147ae
  007d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007dc	51		 push	 ecx
  007dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  007e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ea	51		 push	 ecx
  007eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  007f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6651 : 	draw_2d_line ( 0.5500 + 0.02, 0.3333,  0.4500 - 0.02, 0.3333, MFD_COLOUR1);

  007fd	b8 04 00 00 00	 mov	 eax, 4
  00802	6b c8 00	 imul	 ecx, eax, 0
  00805	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0080b	52		 push	 edx
  0080c	51		 push	 ecx
  0080d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00815	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081a	51		 push	 ecx
  0081b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  00823	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00828	51		 push	 ecx
  00829	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00831	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00836	51		 push	 ecx
  00837	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb85
  0083f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00844	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6652 : 	draw_2d_line ( 0.3500 + 0.02, 0.3333,  0.2500 - 0.02, 0.3333, MFD_COLOUR1);

  00849	b8 04 00 00 00	 mov	 eax, 4
  0084e	6b c8 00	 imul	 ecx, eax, 0
  00851	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00857	52		 push	 edx
  00858	51		 push	 ecx
  00859	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00861	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00866	51		 push	 ecx
  00867	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  0086f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00874	51		 push	 ecx
  00875	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0087d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00882	51		 push	 ecx
  00883	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebd70a4
  0088b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00890	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6653 : 	draw_2d_line ( 0.1500 + 0.02, 0.3333,  0.0500 - 0.02, 0.3333, MFD_COLOUR1);

  00895	b8 04 00 00 00	 mov	 eax, 4
  0089a	6b c8 00	 imul	 ecx, eax, 0
  0089d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008a3	52		 push	 edx
  008a4	51		 push	 ecx
  008a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  008ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b2	51		 push	 ecx
  008b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  008bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c0	51		 push	 ecx
  008c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  008c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ce	51		 push	 ecx
  008cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  008d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008dc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6654 : 
; 6655 : 	////////////////////////////////////////
; 6656 : 
; 6657 : 	//
; 6658 : 	// Nr
; 6659 : 	//
; 6660 : 
; 6661 : 	#define X_ORG	((float) (0.0))
; 6662 : 	#define Y_ORG	((float) (0.5))
; 6663 : 	#define WIDTH	((float) (0.06))
; 6664 : 	#define HEIGHT	((float) (1.0))
; 6665 : 
; 6666 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 6667 : 	// as a constant as a function parameter will use a double (even though
; 6668 : 	// definition is available and says float), which causes later parameters
; 6669 : 	// to be wrong
; 6670 : 	bottom_edge = (Y_ORG - HEIGHT);

  008e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  008e9	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 6671 : 
; 6672 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  008ee	51		 push	 ecx
  008ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  008f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fc	51		 push	 ecx
  008fd	0f 57 c0	 xorps	 xmm0, xmm0
  00900	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00905	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6673 : 
; 6674 : 	x_adjust = get_mono_font_string_width ("NR") * -0.5;

  0090a	68 00 00 00 00	 push	 OFFSET ??_C@_02PCDHLJPB@NR@
  0090f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00914	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1041[ebp]
  0091a	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1041[ebp]
  00922	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0092a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0092e	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6675 : 
; 6676 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00933	51		 push	 ecx
  00934	0f 57 c0	 xorps	 xmm0, xmm0
  00937	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093c	51		 push	 ecx
  0093d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00942	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00947	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6677 : 
; 6678 : 	print_mono_font_string ("NR");

  0094c	68 00 00 00 00	 push	 OFFSET ??_C@_02PCDHLJPB@NR@
  00951	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6679 : 
; 6680 : 	////////////////////////////////////////
; 6681 : 
; 6682 : 	fvalue = bound (current_flight_dynamics->main_rotor_rpm.value, 0.0, 120.0);

  00956	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0095b	f3 0f 5a 80 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7700]
  00963	0f 57 c9	 xorps	 xmm1, xmm1
  00966	66 0f 2f c8	 comisd	 xmm1, xmm0
  0096a	76 0d		 jbe	 SHORT $LN35@draw_engin
  0096c	0f 57 c0	 xorps	 xmm0, xmm0
  0096f	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv351[ebp], xmm0
  00977	eb 50		 jmp	 SHORT $LN36@draw_engin
$LN35@draw_engin:
  00979	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0097f	f3 0f 5a 81 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7700]
  00987	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0098f	76 12		 jbe	 SHORT $LN33@draw_engin
  00991	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00999	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv350[ebp], xmm0
  009a1	eb 16		 jmp	 SHORT $LN34@draw_engin
$LN33@draw_engin:
  009a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009a9	f3 0f 5a 82 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7700]
  009b1	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv350[ebp], xmm0
$LN34@draw_engin:
  009b9	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv350[ebp]
  009c1	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv351[ebp], xmm0
$LN36@draw_engin:
  009c9	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv351[ebp]
  009d1	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6683 : 
; 6684 : 	convert_float_to_int (fvalue, &ivalue);

  009d6	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  009d9	50		 push	 eax
  009da	51		 push	 ecx
  009db	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  009e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e5	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6685 : 
; 6686 : 	sprintf (s, "%03d", ivalue);

  009ea	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  009ed	50		 push	 eax
  009ee	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  009f3	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  009f6	51		 push	 ecx
  009f7	e8 00 00 00 00	 call	 _sprintf
  009fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6687 : 
; 6688 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  009ff	51		 push	 ecx
  00a00	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00a08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0d	51		 push	 ecx
  00a0e	0f 57 c0	 xorps	 xmm0, xmm0
  00a11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a16	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6689 : 
; 6690 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00a1b	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a1e	50		 push	 eax
  00a1f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00a24	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1067[ebp]
  00a2a	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1067[ebp]
  00a32	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00a3a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a3e	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6691 : 
; 6692 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00a43	51		 push	 ecx
  00a44	0f 57 c0	 xorps	 xmm0, xmm0
  00a47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4c	51		 push	 ecx
  00a4d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00a52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a57	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6693 : 
; 6694 : 	print_mono_font_string (s);

  00a5c	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a5f	50		 push	 eax
  00a60	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6695 : 
; 6696 : 	////////////////////////////////////////
; 6697 : 
; 6698 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00a65	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00a6a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00a72	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a76	51		 push	 ecx
  00a77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7c	51		 push	 ecx
  00a7d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00a82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a87	51		 push	 ecx
  00a88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  00a90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a95	51		 push	 ecx
  00a96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa3	51		 push	 ecx
  00aa4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  00aac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab1	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 6699 : 
; 6700 : 	#undef X_ORG
; 6701 : 	#undef Y_ORG
; 6702 : 	#undef WIDTH
; 6703 : 	#undef HEIGHT
; 6704 : 
; 6705 : 	//
; 6706 : 	// Np1
; 6707 : 	//
; 6708 : 
; 6709 : 	#define X_ORG	((float) (-0.2))
; 6710 : 	#define Y_ORG	((float) (0.5))
; 6711 : 	#define WIDTH	((float)	(0.06))
; 6712 : 	#define HEIGHT	((float) (1.0))
; 6713 : 
; 6714 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 6715 : 	// as a constant as a function parameter will use a double (even though
; 6716 : 	// definition is available and says const float), which causes later parameters
; 6717 : 	// to be wrong
; 6718 : 	bottom_edge = (Y_ORG - HEIGHT);

  00ab6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00abe	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 6719 : 
; 6720 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00ac3	51		 push	 ecx
  00ac4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00acc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad1	51		 push	 ecx
  00ad2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00ada	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00adf	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6721 : 
; 6722 : 	x_adjust = get_mono_font_string_width ("NP") * -0.5;

  00ae4	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00ae9	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00aee	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1091[ebp]
  00af4	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1091[ebp]
  00afc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00b04	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b08	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6723 : 
; 6724 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00b0d	51		 push	 ecx
  00b0e	0f 57 c0	 xorps	 xmm0, xmm0
  00b11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b16	51		 push	 ecx
  00b17	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b21	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6725 : 
; 6726 : 	print_mono_font_string ("NP");

  00b26	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00b2b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6727 : 
; 6728 : 	////////////////////////////////////////
; 6729 : 
; 6730 : 	fvalue = bound (current_flight_dynamics->left_engine_rpm.value, 0.0, 120.0);

  00b30	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b35	f3 0f 5a 80 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7292]
  00b3d	0f 57 c9	 xorps	 xmm1, xmm1
  00b40	66 0f 2f c8	 comisd	 xmm1, xmm0
  00b44	76 0d		 jbe	 SHORT $LN39@draw_engin
  00b46	0f 57 c0	 xorps	 xmm0, xmm0
  00b49	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv398[ebp], xmm0
  00b51	eb 50		 jmp	 SHORT $LN40@draw_engin
$LN39@draw_engin:
  00b53	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b59	f3 0f 5a 81 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7292]
  00b61	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00b69	76 12		 jbe	 SHORT $LN37@draw_engin
  00b6b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00b73	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv397[ebp], xmm0
  00b7b	eb 16		 jmp	 SHORT $LN38@draw_engin
$LN37@draw_engin:
  00b7d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b83	f3 0f 5a 82 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7292]
  00b8b	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv397[ebp], xmm0
$LN38@draw_engin:
  00b93	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv397[ebp]
  00b9b	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv398[ebp], xmm0
$LN40@draw_engin:
  00ba3	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv398[ebp]
  00bab	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6731 : 
; 6732 : 	convert_float_to_int (fvalue, &ivalue);

  00bb0	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00bb3	50		 push	 eax
  00bb4	51		 push	 ecx
  00bb5	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbf	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6733 : 
; 6734 : 	sprintf (s, "%03d", ivalue);

  00bc4	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00bc7	50		 push	 eax
  00bc8	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00bcd	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00bd0	51		 push	 ecx
  00bd1	e8 00 00 00 00	 call	 _sprintf
  00bd6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6735 : 
; 6736 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00bd9	51		 push	 ecx
  00bda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00be2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be7	51		 push	 ecx
  00be8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00bf0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6737 : 
; 6738 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00bfa	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00bfd	50		 push	 eax
  00bfe	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c03	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1117[ebp]
  00c09	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1117[ebp]
  00c11	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c19	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c1d	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6739 : 
; 6740 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00c22	51		 push	 ecx
  00c23	0f 57 c0	 xorps	 xmm0, xmm0
  00c26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c2b	51		 push	 ecx
  00c2c	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00c31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c36	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6741 : 
; 6742 : 	print_mono_font_string (s);

  00c3b	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00c3e	50		 push	 eax
  00c3f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6743 : 
; 6744 : 	////////////////////////////////////////
; 6745 : 
; 6746 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00c44	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00c49	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00c51	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c55	51		 push	 ecx
  00c56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5b	51		 push	 ecx
  00c5c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00c61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c66	51		 push	 ecx
  00c67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2e147b
  00c6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c74	51		 push	 ecx
  00c75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00c7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c82	51		 push	 ecx
  00c83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6b851f
  00c8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c90	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 6747 : 
; 6748 : 	#undef X_ORG
; 6749 : 	#undef Y_ORG
; 6750 : 	#undef WIDTH
; 6751 : 	#undef HEIGHT
; 6752 : 
; 6753 : 	//
; 6754 : 	// Np2
; 6755 : 	//
; 6756 : 
; 6757 : 	#define X_ORG	((float) (0.2))
; 6758 : 	#define Y_ORG	((float) (0.5))
; 6759 : 	#define WIDTH	((float) (0.06))
; 6760 : 	#define HEIGHT	((float) (1.0))
; 6761 : 
; 6762 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 6763 : 	// as a constant as a function parameter will use a double (even though
; 6764 : 	// definition is available and says const float), which causes later parameters
; 6765 : 	// to be wrong
; 6766 : 	bottom_edge = (Y_ORG - HEIGHT);

  00c95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00c9d	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 6767 : 
; 6768 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00ca2	51		 push	 ecx
  00ca3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00cab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb0	51		 push	 ecx
  00cb1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00cb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cbe	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6769 : 
; 6770 : 	x_adjust = get_mono_font_string_width ("NP") * -0.5;

  00cc3	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00cc8	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ccd	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1141[ebp]
  00cd3	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1141[ebp]
  00cdb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00ce3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ce7	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6771 : 
; 6772 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00cec	51		 push	 ecx
  00ced	0f 57 c0	 xorps	 xmm0, xmm0
  00cf0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf5	51		 push	 ecx
  00cf6	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00cfb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d00	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6773 : 
; 6774 : 	print_mono_font_string ("NP");

  00d05	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00d0a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6775 : 
; 6776 : 	////////////////////////////////////////
; 6777 : 
; 6778 : 	fvalue = bound (current_flight_dynamics->right_engine_rpm.value, 0.0, 120.0);

  00d0f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d14	f3 0f 5a 80 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7388]
  00d1c	0f 57 c9	 xorps	 xmm1, xmm1
  00d1f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00d23	76 0d		 jbe	 SHORT $LN43@draw_engin
  00d25	0f 57 c0	 xorps	 xmm0, xmm0
  00d28	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv445[ebp], xmm0
  00d30	eb 50		 jmp	 SHORT $LN44@draw_engin
$LN43@draw_engin:
  00d32	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d38	f3 0f 5a 81 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7388]
  00d40	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00d48	76 12		 jbe	 SHORT $LN41@draw_engin
  00d4a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00d52	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv444[ebp], xmm0
  00d5a	eb 16		 jmp	 SHORT $LN42@draw_engin
$LN41@draw_engin:
  00d5c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d62	f3 0f 5a 82 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7388]
  00d6a	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv444[ebp], xmm0
$LN42@draw_engin:
  00d72	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv444[ebp]
  00d7a	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv445[ebp], xmm0
$LN44@draw_engin:
  00d82	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv445[ebp]
  00d8a	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6779 : 
; 6780 : 	convert_float_to_int (fvalue, &ivalue);

  00d8f	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00d92	50		 push	 eax
  00d93	51		 push	 ecx
  00d94	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00d99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6781 : 
; 6782 : 	sprintf (s, "%03d", ivalue);

  00da3	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00da6	50		 push	 eax
  00da7	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00dac	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00daf	51		 push	 ecx
  00db0	e8 00 00 00 00	 call	 _sprintf
  00db5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6783 : 
; 6784 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00db8	51		 push	 ecx
  00db9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00dc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc6	51		 push	 ecx
  00dc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00dcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd4	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6785 : 
; 6786 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00dd9	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ddc	50		 push	 eax
  00ddd	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00de2	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1167[ebp]
  00de8	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1167[ebp]
  00df0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00df8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00dfc	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6787 : 
; 6788 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00e01	51		 push	 ecx
  00e02	0f 57 c0	 xorps	 xmm0, xmm0
  00e05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e0a	51		 push	 ecx
  00e0b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00e10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e15	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6789 : 
; 6790 : 	print_mono_font_string (s);

  00e1a	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e1d	50		 push	 eax
  00e1e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6791 : 
; 6792 : 	////////////////////////////////////////
; 6793 : 
; 6794 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00e23	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00e28	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00e30	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e34	51		 push	 ecx
  00e35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3a	51		 push	 ecx
  00e3b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00e40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e45	51		 push	 ecx
  00e46	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00e4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e53	51		 push	 ecx
  00e54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e61	51		 push	 ecx
  00e62	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  00e6a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e6f	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 6795 : 
; 6796 : 	#undef X_ORG
; 6797 : 	#undef Y_ORG
; 6798 : 	#undef WIDTH
; 6799 : 	#undef HEIGHT
; 6800 : 
; 6801 : 	//
; 6802 : 	// NG1
; 6803 : 	//
; 6804 : 
; 6805 : 	#define X_ORG	((float) (-0.4))
; 6806 : 	#define Y_ORG	((float) (0.5))
; 6807 : 	#define WIDTH	((float) (0.06))
; 6808 : 	#define HEIGHT	((float) (1.0))
; 6809 : 
; 6810 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 6811 : 	// as a constant as a function parameter will use a double (even though
; 6812 : 	// definition is available and says const float), which causes later parameters
; 6813 : 	// to be wrong
; 6814 : 	bottom_edge = (Y_ORG - HEIGHT);

  00e74	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00e7c	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 6815 : 
; 6816 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00e81	51		 push	 ecx
  00e82	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00e8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e8f	51		 push	 ecx
  00e90	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00e98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6817 : 
; 6818 : 	x_adjust = get_mono_font_string_width ("NG") * -0.5;

  00ea2	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  00ea7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00eac	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1191[ebp]
  00eb2	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1191[ebp]
  00eba	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00ec2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ec6	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6819 : 
; 6820 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00ecb	51		 push	 ecx
  00ecc	0f 57 c0	 xorps	 xmm0, xmm0
  00ecf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed4	51		 push	 ecx
  00ed5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00eda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00edf	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6821 : 
; 6822 : 	print_mono_font_string ("NG");

  00ee4	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  00ee9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6823 : 
; 6824 : 	////////////////////////////////////////
; 6825 : 
; 6826 : 	fvalue = bound (current_flight_dynamics->left_engine_n1_rpm.value, 0.0, 120.0);

  00eee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00ef3	f3 0f 5a 80 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7316]
  00efb	0f 57 c9	 xorps	 xmm1, xmm1
  00efe	66 0f 2f c8	 comisd	 xmm1, xmm0
  00f02	76 0d		 jbe	 SHORT $LN47@draw_engin
  00f04	0f 57 c0	 xorps	 xmm0, xmm0
  00f07	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv492[ebp], xmm0
  00f0f	eb 50		 jmp	 SHORT $LN48@draw_engin
$LN47@draw_engin:
  00f11	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f17	f3 0f 5a 81 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7316]
  00f1f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00f27	76 12		 jbe	 SHORT $LN45@draw_engin
  00f29	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00f31	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv491[ebp], xmm0
  00f39	eb 16		 jmp	 SHORT $LN46@draw_engin
$LN45@draw_engin:
  00f3b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f41	f3 0f 5a 82 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7316]
  00f49	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv491[ebp], xmm0
$LN46@draw_engin:
  00f51	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv491[ebp]
  00f59	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv492[ebp], xmm0
$LN48@draw_engin:
  00f61	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv492[ebp]
  00f69	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6827 : 
; 6828 : 	convert_float_to_int (fvalue, &ivalue);

  00f6e	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00f71	50		 push	 eax
  00f72	51		 push	 ecx
  00f73	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00f78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6829 : 
; 6830 : 	sprintf (s, "%03d", ivalue);

  00f82	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00f85	50		 push	 eax
  00f86	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00f8b	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00f8e	51		 push	 ecx
  00f8f	e8 00 00 00 00	 call	 _sprintf
  00f94	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6831 : 
; 6832 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00f97	51		 push	 ecx
  00f98	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00fa0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa5	51		 push	 ecx
  00fa6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00fae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6833 : 
; 6834 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00fb8	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00fbb	50		 push	 eax
  00fbc	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00fc1	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1217[ebp]
  00fc7	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1217[ebp]
  00fcf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00fd7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fdb	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6835 : 
; 6836 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00fe0	51		 push	 ecx
  00fe1	0f 57 c0	 xorps	 xmm0, xmm0
  00fe4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe9	51		 push	 ecx
  00fea	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00fef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6837 : 
; 6838 : 	print_mono_font_string (s);

  00ff9	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ffc	50		 push	 eax
  00ffd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6839 : 
; 6840 : 	////////////////////////////////////////
; 6841 : 
; 6842 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  01002	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  01007	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  0100f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01013	51		 push	 ecx
  01014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01019	51		 push	 ecx
  0101a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  0101f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01024	51		 push	 ecx
  01025	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bebd70a4
  0102d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01032	51		 push	 ecx
  01033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0103b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01040	51		 push	 ecx
  01041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  01049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104e	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 6843 : 
; 6844 : 	#undef X_ORG
; 6845 : 	#undef Y_ORG
; 6846 : 	#undef WIDTH
; 6847 : 	#undef HEIGHT
; 6848 : 
; 6849 : 	//
; 6850 : 	// NG2
; 6851 : 	//
; 6852 : 
; 6853 : 	#define X_ORG	((float) (0.4))
; 6854 : 	#define Y_ORG	((float) (0.5))
; 6855 : 	#define WIDTH	((float) (0.06))
; 6856 : 	#define HEIGHT	((float) (1.0))
; 6857 : 
; 6858 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 6859 : 	// as a constant as a function parameter will use a double (even though
; 6860 : 	// definition is available and says const float), which causes later parameters
; 6861 : 	// to be wrong
; 6862 : 	bottom_edge = (Y_ORG - HEIGHT);

  01053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0105b	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 6863 : 
; 6864 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  01060	51		 push	 ecx
  01061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106e	51		 push	 ecx
  0106f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  01077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6865 : 
; 6866 : 	x_adjust = get_mono_font_string_width ("NG") * -0.5;

  01081	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  01086	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0108b	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1241[ebp]
  01091	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1241[ebp]
  01099	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  010a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010a5	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6867 : 
; 6868 : 	set_mono_font_rel_position (x_adjust, 0.0);

  010aa	51		 push	 ecx
  010ab	0f 57 c0	 xorps	 xmm0, xmm0
  010ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b3	51		 push	 ecx
  010b4	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  010b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010be	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6869 : 
; 6870 : 	print_mono_font_string ("NG");

  010c3	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  010c8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6871 : 
; 6872 : 	////////////////////////////////////////
; 6873 : 
; 6874 : 	fvalue = bound (current_flight_dynamics->right_engine_n1_rpm.value, 0.0, 120.0);

  010cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010d2	f3 0f 5a 80 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7412]
  010da	0f 57 c9	 xorps	 xmm1, xmm1
  010dd	66 0f 2f c8	 comisd	 xmm1, xmm0
  010e1	76 0d		 jbe	 SHORT $LN51@draw_engin
  010e3	0f 57 c0	 xorps	 xmm0, xmm0
  010e6	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv539[ebp], xmm0
  010ee	eb 50		 jmp	 SHORT $LN52@draw_engin
$LN51@draw_engin:
  010f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010f6	f3 0f 5a 81 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7412]
  010fe	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  01106	76 12		 jbe	 SHORT $LN49@draw_engin
  01108	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  01110	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv538[ebp], xmm0
  01118	eb 16		 jmp	 SHORT $LN50@draw_engin
$LN49@draw_engin:
  0111a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01120	f3 0f 5a 82 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7412]
  01128	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv538[ebp], xmm0
$LN50@draw_engin:
  01130	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv538[ebp]
  01138	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv539[ebp], xmm0
$LN52@draw_engin:
  01140	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv539[ebp]
  01148	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6875 : 
; 6876 : 	convert_float_to_int (fvalue, &ivalue);

  0114d	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  01150	50		 push	 eax
  01151	51		 push	 ecx
  01152	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  01157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0115c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6877 : 
; 6878 : 	sprintf (s, "%03d", ivalue);

  01161	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  01164	50		 push	 eax
  01165	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  0116a	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0116d	51		 push	 ecx
  0116e	e8 00 00 00 00	 call	 _sprintf
  01173	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6879 : 
; 6880 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  01176	51		 push	 ecx
  01177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0117f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01184	51		 push	 ecx
  01185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0118d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01192	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6881 : 
; 6882 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01197	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0119a	50		 push	 eax
  0119b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  011a0	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1267[ebp]
  011a6	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1267[ebp]
  011ae	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  011b6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011ba	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6883 : 
; 6884 : 	set_mono_font_rel_position (x_adjust, 0.0);

  011bf	51		 push	 ecx
  011c0	0f 57 c0	 xorps	 xmm0, xmm0
  011c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c8	51		 push	 ecx
  011c9	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  011ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6885 : 
; 6886 : 	print_mono_font_string (s);

  011d8	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  011db	50		 push	 eax
  011dc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6887 : 
; 6888 : 	////////////////////////////////////////
; 6889 : 
; 6890 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  011e1	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  011e6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  011ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011f2	51		 push	 ecx
  011f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f8	51		 push	 ecx
  011f9	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  011fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01203	51		 push	 ecx
  01204	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  0120c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01211	51		 push	 ecx
  01212	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0121a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121f	51		 push	 ecx
  01220	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebd70a4
  01228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122d	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 6891 : 
; 6892 : 	#undef X_ORG
; 6893 : 	#undef Y_ORG
; 6894 : 	#undef WIDTH
; 6895 : 	#undef HEIGHT
; 6896 : 
; 6897 : 	//
; 6898 : 	// TQ1
; 6899 : 	//
; 6900 : 
; 6901 : 	#define X_ORG	((float) (-0.6))
; 6902 : 	#define Y_ORG	((float) (0.5))
; 6903 : 	#define WIDTH	((float) (0.06))
; 6904 : 	#define HEIGHT	((float) (1.0))
; 6905 : 
; 6906 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 6907 : 	// as a constant as a function parameter will use a double (even though
; 6908 : 	// definition is available and says const float), which causes later parameters
; 6909 : 	// to be wrong
; 6910 : 	bottom_edge = (Y_ORG - HEIGHT);

  01232	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0123a	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 6911 : 
; 6912 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  0123f	51		 push	 ecx
  01240	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0124d	51		 push	 ecx
  0124e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  01256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0125b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6913 : 
; 6914 : 	x_adjust = get_mono_font_string_width ("TQ") * -0.5;

  01260	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  01265	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0126a	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1291[ebp]
  01270	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1291[ebp]
  01278	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01280	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01284	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6915 : 
; 6916 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01289	51		 push	 ecx
  0128a	0f 57 c0	 xorps	 xmm0, xmm0
  0128d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01292	51		 push	 ecx
  01293	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0129d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6917 : 
; 6918 : 	print_mono_font_string ("TQ");

  012a2	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  012a7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6919 : 
; 6920 : 	////////////////////////////////////////
; 6921 : 
; 6922 : 	fvalue = bound (current_flight_dynamics->left_engine_torque.value, 0.0, 120.0);

  012ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  012b1	f3 0f 5a 80 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7340]
  012b9	0f 57 c9	 xorps	 xmm1, xmm1
  012bc	66 0f 2f c8	 comisd	 xmm1, xmm0
  012c0	76 0d		 jbe	 SHORT $LN55@draw_engin
  012c2	0f 57 c0	 xorps	 xmm0, xmm0
  012c5	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv586[ebp], xmm0
  012cd	eb 50		 jmp	 SHORT $LN56@draw_engin
$LN55@draw_engin:
  012cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  012d5	f3 0f 5a 81 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7340]
  012dd	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  012e5	76 12		 jbe	 SHORT $LN53@draw_engin
  012e7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  012ef	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv585[ebp], xmm0
  012f7	eb 16		 jmp	 SHORT $LN54@draw_engin
$LN53@draw_engin:
  012f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  012ff	f3 0f 5a 82 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7340]
  01307	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv585[ebp], xmm0
$LN54@draw_engin:
  0130f	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv585[ebp]
  01317	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv586[ebp], xmm0
$LN56@draw_engin:
  0131f	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv586[ebp]
  01327	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6923 : 
; 6924 : 	convert_float_to_int (fvalue, &ivalue);

  0132c	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  0132f	50		 push	 eax
  01330	51		 push	 ecx
  01331	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  01336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0133b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6925 : 
; 6926 : 	sprintf (s, "%03d", ivalue);

  01340	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  01343	50		 push	 eax
  01344	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01349	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0134c	51		 push	 ecx
  0134d	e8 00 00 00 00	 call	 _sprintf
  01352	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6927 : 
; 6928 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  01355	51		 push	 ecx
  01356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0135e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01363	51		 push	 ecx
  01364	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0136c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01371	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6929 : 
; 6930 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01376	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01379	50		 push	 eax
  0137a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0137f	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1317[ebp]
  01385	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1317[ebp]
  0138d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01395	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01399	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6931 : 
; 6932 : 	set_mono_font_rel_position (x_adjust, 0.0);

  0139e	51		 push	 ecx
  0139f	0f 57 c0	 xorps	 xmm0, xmm0
  013a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a7	51		 push	 ecx
  013a8	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  013ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013b2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6933 : 
; 6934 : 	print_mono_font_string (s);

  013b7	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  013ba	50		 push	 eax
  013bb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6935 : 
; 6936 : 	////////////////////////////////////////
; 6937 : 
; 6938 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  013c0	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  013c5	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  013cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013d1	51		 push	 ecx
  013d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d7	51		 push	 ecx
  013d8	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  013dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e2	51		 push	 ecx
  013e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb86
  013eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f0	51		 push	 ecx
  013f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  013f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013fe	51		 push	 ecx
  013ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  01407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0140c	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 6939 : 
; 6940 : 	#undef X_ORG
; 6941 : 	#undef Y_ORG
; 6942 : 	#undef WIDTH
; 6943 : 	#undef HEIGHT
; 6944 : 
; 6945 : 	//
; 6946 : 	// TQ2
; 6947 : 	//
; 6948 : 
; 6949 : 	#define X_ORG	((float) (0.6))
; 6950 : 	#define Y_ORG	((float) (0.5))
; 6951 : 	#define WIDTH	((float) (0.06))
; 6952 : 	#define HEIGHT	((float) (1.0))
; 6953 : 
; 6954 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 6955 : 	// as a constant as a function parameter will use a double (even though
; 6956 : 	// definition is available and says const float), which causes later parameters
; 6957 : 	// to be wrong
; 6958 : 	bottom_edge = (Y_ORG - HEIGHT);

  01411	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  01419	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 6959 : 
; 6960 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  0141e	51		 push	 ecx
  0141f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01427	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0142c	51		 push	 ecx
  0142d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  01435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6961 : 
; 6962 : 	x_adjust = get_mono_font_string_width ("TQ") * -0.5;

  0143f	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  01444	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01449	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1341[ebp]
  0144f	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1341[ebp]
  01457	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0145f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01463	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6963 : 
; 6964 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01468	51		 push	 ecx
  01469	0f 57 c0	 xorps	 xmm0, xmm0
  0146c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01471	51		 push	 ecx
  01472	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01477	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0147c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6965 : 
; 6966 : 	print_mono_font_string ("TQ");

  01481	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  01486	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6967 : 
; 6968 : 	////////////////////////////////////////
; 6969 : 
; 6970 : 	fvalue = bound (current_flight_dynamics->right_engine_torque.value, 0.0, 120.0);

  0148b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01490	f3 0f 5a 80 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7436]
  01498	0f 57 c9	 xorps	 xmm1, xmm1
  0149b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0149f	76 0d		 jbe	 SHORT $LN59@draw_engin
  014a1	0f 57 c0	 xorps	 xmm0, xmm0
  014a4	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv633[ebp], xmm0
  014ac	eb 50		 jmp	 SHORT $LN60@draw_engin
$LN59@draw_engin:
  014ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  014b4	f3 0f 5a 81 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7436]
  014bc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  014c4	76 12		 jbe	 SHORT $LN57@draw_engin
  014c6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  014ce	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv632[ebp], xmm0
  014d6	eb 16		 jmp	 SHORT $LN58@draw_engin
$LN57@draw_engin:
  014d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  014de	f3 0f 5a 82 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7436]
  014e6	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv632[ebp], xmm0
$LN58@draw_engin:
  014ee	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv632[ebp]
  014f6	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv633[ebp], xmm0
$LN60@draw_engin:
  014fe	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv633[ebp]
  01506	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 6971 : 
; 6972 : 	convert_float_to_int (fvalue, &ivalue);

  0150b	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  0150e	50		 push	 eax
  0150f	51		 push	 ecx
  01510	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  01515	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0151a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6973 : 
; 6974 : 	sprintf (s, "%03d", ivalue);

  0151f	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  01522	50		 push	 eax
  01523	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01528	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0152b	51		 push	 ecx
  0152c	e8 00 00 00 00	 call	 _sprintf
  01531	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6975 : 
; 6976 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  01534	51		 push	 ecx
  01535	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0153d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01542	51		 push	 ecx
  01543	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0154b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01550	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6977 : 
; 6978 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01555	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01558	50		 push	 eax
  01559	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0155e	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1367[ebp]
  01564	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1367[ebp]
  0156c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01574	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01578	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6979 : 
; 6980 : 	set_mono_font_rel_position (x_adjust, 0.0);

  0157d	51		 push	 ecx
  0157e	0f 57 c0	 xorps	 xmm0, xmm0
  01581	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01586	51		 push	 ecx
  01587	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0158c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01591	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6981 : 
; 6982 : 	print_mono_font_string (s);

  01596	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01599	50		 push	 eax
  0159a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6983 : 
; 6984 : 	////////////////////////////////////////
; 6985 : 
; 6986 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  0159f	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  015a4	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  015ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015b0	51		 push	 ecx
  015b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b6	51		 push	 ecx
  015b7	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  015bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015c1	51		 push	 ecx
  015c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2147ae
  015ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015cf	51		 push	 ecx
  015d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  015d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015dd	51		 push	 ecx
  015de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb86
  015e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015eb	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 6987 : 
; 6988 : 	#undef X_ORG
; 6989 : 	#undef Y_ORG
; 6990 : 	#undef WIDTH
; 6991 : 	#undef HEIGHT
; 6992 : 
; 6993 : 	//
; 6994 : 	// TGT1
; 6995 : 	//
; 6996 : 
; 6997 : 	#define X_ORG	((float) (-0.8))
; 6998 : 	#define Y_ORG	((float) (0.5))
; 6999 : 	#define WIDTH	((float) (0.06))
; 7000 : 	#define HEIGHT	((float) (0.8333))
; 7001 : 
; 7002 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 7003 : 	// as a constant as a function parameter will use a double (even though
; 7004 : 	// definition is available and says const float), which causes later parameters
; 7005 : 	// to be wrong
; 7006 : 	bottom_edge = (Y_ORG - HEIGHT);

  015f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beaaa64c
  015f8	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 7007 : 
; 7008 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  015fd	51		 push	 ecx
  015fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160b	51		 push	 ecx
  0160c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01619	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7009 : 
; 7010 : 	x_adjust = get_mono_font_string_width ("TG") * -0.5;

  0161e	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  01623	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01628	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1391[ebp]
  0162e	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1391[ebp]
  01636	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0163e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01642	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7011 : 
; 7012 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01647	51		 push	 ecx
  01648	0f 57 c0	 xorps	 xmm0, xmm0
  0164b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01650	51		 push	 ecx
  01651	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01656	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0165b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7013 : 
; 7014 : 	print_mono_font_string ("TG");

  01660	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  01665	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7015 : 
; 7016 : 	////////////////////////////////////////
; 7017 : 
; 7018 : 	fvalue = bound (current_flight_dynamics->left_engine_temp.value, 0.0, 999.0);

  0166a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0166f	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  01677	0f 57 c9	 xorps	 xmm1, xmm1
  0167a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0167e	76 0d		 jbe	 SHORT $LN63@draw_engin
  01680	0f 57 c0	 xorps	 xmm0, xmm0
  01683	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv680[ebp], xmm0
  0168b	eb 50		 jmp	 SHORT $LN64@draw_engin
$LN63@draw_engin:
  0168d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01693	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  0169b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f380000000000
  016a3	76 12		 jbe	 SHORT $LN61@draw_engin
  016a5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f380000000000
  016ad	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv679[ebp], xmm0
  016b5	eb 16		 jmp	 SHORT $LN62@draw_engin
$LN61@draw_engin:
  016b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  016bd	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  016c5	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv679[ebp], xmm0
$LN62@draw_engin:
  016cd	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv679[ebp]
  016d5	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv680[ebp], xmm0
$LN64@draw_engin:
  016dd	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv680[ebp]
  016e5	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 7019 : 
; 7020 : 	convert_float_to_int (fvalue, &ivalue);

  016ea	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  016ed	50		 push	 eax
  016ee	51		 push	 ecx
  016ef	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  016f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f9	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 7021 : 
; 7022 : 	sprintf (s, "%03d", ivalue);

  016fe	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  01701	50		 push	 eax
  01702	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01707	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0170a	51		 push	 ecx
  0170b	e8 00 00 00 00	 call	 _sprintf
  01710	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7023 : 
; 7024 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  01713	51		 push	 ecx
  01714	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0171c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01721	51		 push	 ecx
  01722	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0172a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0172f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7025 : 
; 7026 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01734	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01737	50		 push	 eax
  01738	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0173d	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1417[ebp]
  01743	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1417[ebp]
  0174b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01753	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01757	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7027 : 
; 7028 : 	set_mono_font_rel_position (x_adjust, 0.0);

  0175c	51		 push	 ecx
  0175d	0f 57 c0	 xorps	 xmm0, xmm0
  01760	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01765	51		 push	 ecx
  01766	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0176b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01770	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7029 : 
; 7030 : 	print_mono_font_string (s);

  01775	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01778	50		 push	 eax
  01779	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7031 : 
; 7032 : 	////////////////////////////////////////
; 7033 : 
; 7034 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 1000.0);

  0177e	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  01783	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  0178b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0178f	51		 push	 ecx
  01790	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01795	51		 push	 ecx
  01796	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  0179b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a0	51		 push	 ecx
  017a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf451eb9
  017a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ae	51		 push	 ecx
  017af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  017b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017bc	51		 push	 ecx
  017bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  017c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ca	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 7035 : 
; 7036 : 	#undef X_ORG
; 7037 : 	#undef Y_ORG
; 7038 : 	#undef WIDTH
; 7039 : 	#undef HEIGHT
; 7040 : 
; 7041 : 	//
; 7042 : 	// TGT2
; 7043 : 	//
; 7044 : 
; 7045 : 	#define X_ORG	((float) (0.8))
; 7046 : 	#define Y_ORG	((float) (0.5))
; 7047 : 	#define WIDTH	((float) (0.06))
; 7048 : 	#define HEIGHT	((float) (0.8333))
; 7049 : 
; 7050 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 7051 : 	// as a constant as a function parameter will use a double (even though
; 7052 : 	// definition is available and says const float), which causes later parameters
; 7053 : 	// to be wrong
; 7054 : 	bottom_edge = (Y_ORG - HEIGHT);

  017cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beaaa64c
  017d7	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 7055 : 
; 7056 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  017dc	51		 push	 ecx
  017dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  017e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ea	51		 push	 ecx
  017eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  017f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017f8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7057 : 
; 7058 : 	x_adjust = get_mono_font_string_width ("TG") * -0.5;

  017fd	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  01802	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01807	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1441[ebp]
  0180d	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1441[ebp]
  01815	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0181d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01821	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7059 : 
; 7060 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01826	51		 push	 ecx
  01827	0f 57 c0	 xorps	 xmm0, xmm0
  0182a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182f	51		 push	 ecx
  01830	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7061 : 
; 7062 : 	print_mono_font_string ("TG");

  0183f	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  01844	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7063 : 
; 7064 : 	////////////////////////////////////////
; 7065 : 
; 7066 : 	fvalue = bound (current_flight_dynamics->right_engine_temp.value, 0.0, 999.0);

  01849	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0184e	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  01856	0f 57 c9	 xorps	 xmm1, xmm1
  01859	66 0f 2f c8	 comisd	 xmm1, xmm0
  0185d	76 0d		 jbe	 SHORT $LN67@draw_engin
  0185f	0f 57 c0	 xorps	 xmm0, xmm0
  01862	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv727[ebp], xmm0
  0186a	eb 50		 jmp	 SHORT $LN68@draw_engin
$LN67@draw_engin:
  0186c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01872	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  0187a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f380000000000
  01882	76 12		 jbe	 SHORT $LN65@draw_engin
  01884	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f380000000000
  0188c	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv726[ebp], xmm0
  01894	eb 16		 jmp	 SHORT $LN66@draw_engin
$LN65@draw_engin:
  01896	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0189c	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  018a4	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv726[ebp], xmm0
$LN66@draw_engin:
  018ac	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv726[ebp]
  018b4	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv727[ebp], xmm0
$LN68@draw_engin:
  018bc	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv727[ebp]
  018c4	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 7067 : 
; 7068 : 	convert_float_to_int (fvalue, &ivalue);

  018c9	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  018cc	50		 push	 eax
  018cd	51		 push	 ecx
  018ce	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  018d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d8	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 7069 : 
; 7070 : 	sprintf (s, "%03d", ivalue);

  018dd	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  018e0	50		 push	 eax
  018e1	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  018e6	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  018e9	51		 push	 ecx
  018ea	e8 00 00 00 00	 call	 _sprintf
  018ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7071 : 
; 7072 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  018f2	51		 push	 ecx
  018f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  018fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01900	51		 push	 ecx
  01901	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01909	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0190e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7073 : 
; 7074 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01913	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01916	50		 push	 eax
  01917	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0191c	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1467[ebp]
  01922	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1467[ebp]
  0192a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01932	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01936	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7075 : 
; 7076 : 	set_mono_font_rel_position (x_adjust, 0.0);

  0193b	51		 push	 ecx
  0193c	0f 57 c0	 xorps	 xmm0, xmm0
  0193f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01944	51		 push	 ecx
  01945	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0194a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0194f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7077 : 
; 7078 : 	print_mono_font_string (s);

  01954	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01957	50		 push	 eax
  01958	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7079 : 
; 7080 : 	////////////////////////////////////////
; 7081 : 
; 7082 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 1000.0);

  0195d	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  01962	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  0196a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0196e	51		 push	 ecx
  0196f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01974	51		 push	 ecx
  01975	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  0197a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0197f	51		 push	 ecx
  01980	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f547ae1
  01988	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0198d	51		 push	 ecx
  0198e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01996	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0199b	51		 push	 ecx
  0199c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb9
  019a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a9	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 7083 : 
; 7084 : 	#undef X_ORG
; 7085 : 	#undef Y_ORG
; 7086 : 	#undef WIDTH
; 7087 : 	#undef HEIGHT
; 7088 : }

  019ae	5f		 pop	 edi
  019af	5e		 pop	 esi
  019b0	5b		 pop	 ebx
  019b1	8b e5		 mov	 esp, ebp
  019b3	5d		 pop	 ebp
  019b4	c3		 ret	 0
?draw_engine_display_mfd@@YGXXZ ENDP			; draw_engine_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_engine_bar@@YGXMMMMM@Z
_TEXT	SEGMENT
_y2$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_f_x1$ = 8						; size = 4
_f_y1$ = 12						; size = 4
_f_x2$ = 16						; size = 4
_f_y2$ = 20						; size = 4
_fvalue$ = 24						; size = 4
?draw_engine_bar@@YGXMMMMM@Z PROC			; draw_engine_bar, COMDAT

; 6502 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6503 : 	int x1, x2, y1, y2;
; 6504 : 
; 6505 : 	draw_2d_box(f_x1, f_y1, f_x2, f_y2, FALSE, FALSE, MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _f_y2$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	51		 push	 ecx
  00028	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _f_x2$[ebp]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	51		 push	 ecx
  00033	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f_y1$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	51		 push	 ecx
  0003e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _f_x1$[ebp]
  00043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00048	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 6506 : 
; 6507 : 	get_2d_int_screen_coordinates (f_x1, f_y2 + (fvalue * (f_y1 - f_y2)), &x1, &y1);

  0004d	8d 45 f4	 lea	 eax, DWORD PTR _y1$[ebp]
  00050	50		 push	 eax
  00051	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f_y1$[ebp]
  0005a	f3 0f 5c 45 14	 subss	 xmm0, DWORD PTR _f_y2$[ebp]
  0005f	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _fvalue$[ebp]
  00064	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _f_y2$[ebp]
  00069	51		 push	 ecx
  0006a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006f	51		 push	 ecx
  00070	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _f_x1$[ebp]
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 6508 : 	get_2d_int_screen_coordinates (f_x2, f_y2, &x2, &y2);

  0007f	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  00082	50		 push	 eax
  00083	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00086	51		 push	 ecx
  00087	51		 push	 ecx
  00088	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _f_y2$[ebp]
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	51		 push	 ecx
  00093	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _f_x2$[ebp]
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 6509 : 	set_block (x1, y1, x2, y2, MFD_COLOUR1);

  000a2	b8 04 00 00 00	 mov	 eax, 4
  000a7	6b c8 00	 imul	 ecx, eax, 0
  000aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000b0	52		 push	 edx
  000b1	8b 45 f0	 mov	 eax, DWORD PTR _y2$[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _x2$[ebp]
  000b8	51		 push	 ecx
  000b9	8b 55 f4	 mov	 edx, DWORD PTR _y1$[ebp]
  000bc	52		 push	 edx
  000bd	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 6510 : }

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 14 00	 ret	 20			; 00000014H
?draw_engine_bar@@YGXMMMMM@Z ENDP			; draw_engine_bar
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_system_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv250 = -72						; size = 4
tv241 = -72						; size = 4
tv234 = -72						; size = 4
tv227 = -72						; size = 4
tv218 = -72						; size = 4
tv209 = -72						; size = 4
tv200 = -72						; size = 4
tv191 = -72						; size = 4
tv182 = -72						; size = 4
tv173 = -72						; size = 4
_y_adjust$ = -4						; size = 4
?draw_system_display_mfd@@YGXXZ PROC			; draw_system_display_mfd, COMDAT

; 6430 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6431 : 	float
; 6432 : 		y_adjust;
; 6433 : 
; 6434 : 	if (draw_large_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00010	74 11		 je	 SHORT $LN2@draw_syste

; 6435 : 	{
; 6436 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00012	6a 05		 push	 5
  00014	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6437 : 
; 6438 : 		y_adjust = 0.0;

  00019	0f 57 c0	 xorps	 xmm0, xmm0
  0001c	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6439 : 	}
; 6440 : 	else

  00021	eb 0f		 jmp	 SHORT $LN3@draw_syste
$LN2@draw_syste:

; 6441 : 	{
; 6442 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6443 : 
; 6444 : 		y_adjust = 0.0;

  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN3@draw_syste:

; 6445 : 	}
; 6446 : 
; 6447 : 	y_adjust = print_mfd_system_message ("FLIR", "FAIL", viper_damage.flir, y_adjust);

  00032	51		 push	 ecx
  00033	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00042	83 e0 01	 and	 eax, 1
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00050	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  00055	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6448 : 
; 6449 : 	y_adjust = print_mfd_system_message ("DTV", "FAIL", viper_damage.dtv, y_adjust);

  00058	51		 push	 ecx
  00059	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00068	d1 e8		 shr	 eax, 1
  0006a	83 e0 01	 and	 eax, 1
  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  00078	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  0007d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6450 : 
; 6451 : 	y_adjust = print_mfd_system_message ("LASER DESIGNATOR", "FAIL", viper_damage.laser_designator, y_adjust);

  00080	51		 push	 ecx
  00081	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00090	c1 e8 02	 shr	 eax, 2
  00093	83 e0 01	 and	 eax, 1
  00096	50		 push	 eax
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
  000a1	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  000a6	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6452 : 
; 6453 : 	y_adjust = print_mfd_system_message ("RADAR JAMMER", "FAIL", viper_damage.radar_jammer, y_adjust);

  000a9	51		 push	 ecx
  000aa	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  000b9	c1 e8 03	 shr	 eax, 3
  000bc	83 e0 01	 and	 eax, 1
  000bf	50		 push	 eax
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
  000ca	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  000cf	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6454 : 
; 6455 : 	y_adjust = print_mfd_system_message ("IR JAMMER", "FAIL", viper_damage.infra_red_jammer, y_adjust);

  000d2	51		 push	 ecx
  000d3	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  000e2	c1 e8 04	 shr	 eax, 4
  000e5	83 e0 01	 and	 eax, 1
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_09MILGCPFO@IR?5JAMMER@
  000f3	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  000f8	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6456 : 
; 6457 : 	y_adjust = print_mfd_system_message ("NAVIGATION COMPUTER", "FAIL", viper_damage.navigation_computer, y_adjust);

  000fb	51		 push	 ecx
  000fc	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0010b	c1 e8 05	 shr	 eax, 5
  0010e	83 e0 01	 and	 eax, 1
  00111	50		 push	 eax
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
  0011c	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  00121	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6458 : 
; 6459 : 	y_adjust = print_mfd_system_message ("COMMUNICATIONS", "FAIL", viper_damage.communications, y_adjust);

  00124	51		 push	 ecx
  00125	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00134	c1 e8 06	 shr	 eax, 6
  00137	83 e0 01	 and	 eax, 1
  0013a	50		 push	 eax
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
  00145	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  0014a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6460 : 
; 6461 : 	y_adjust = print_mfd_system_message ("RADAR WARNING SYSTEM", "FAIL", viper_damage.radar_warning_system, y_adjust);

  0014d	51		 push	 ecx
  0014e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0015d	c1 e8 07	 shr	 eax, 7
  00160	83 e0 01	 and	 eax, 1
  00163	50		 push	 eax
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
  0016e	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  00173	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6462 : 
; 6463 : 	y_adjust = print_mfd_system_message ("HIDSS", "FAIL", viper_damage.hidss, y_adjust);

  00176	51		 push	 ecx
  00177	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00186	c1 e8 08	 shr	 eax, 8
  00189	83 e0 01	 and	 eax, 1
  0018c	50		 push	 eax
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_05BDMPLNHB@HIDSS@
  00197	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  0019c	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6464 : 
; 6465 : 	y_adjust = print_mfd_system_message ("PNVS", "FAIL", viper_damage.pnvs, y_adjust);

  0019f	51		 push	 ecx
  001a0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  001af	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  001b2	83 e0 01	 and	 eax, 1
  001b5	50		 push	 eax
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_04IDKCLELC@PNVS@
  001c0	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  001c5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6466 : 
; 6467 : 	y_adjust = print_mfd_system_message ("STABILISER", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_STABILISER), y_adjust);

  001c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001cd	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  001d3	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  001d9	74 09		 je	 SHORT $LN7@draw_syste
  001db	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv173[ebp], 1
  001e2	eb 07		 jmp	 SHORT $LN8@draw_syste
$LN7@draw_syste:
  001e4	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv173[ebp], 0
$LN8@draw_syste:
  001eb	51		 push	 ecx
  001ec	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f6	8b 55 b8	 mov	 edx, DWORD PTR tv173[ebp]
  001f9	52		 push	 edx
  001fa	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LMAEBBOE@STABILISER@
  00204	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  00209	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6468 : 
; 6469 : 	y_adjust = print_mfd_system_message ("MAIN ROTOR", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_MAIN_ROTOR), y_adjust);

  0020c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00211	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00217	83 e1 02	 and	 ecx, 2
  0021a	74 09		 je	 SHORT $LN9@draw_syste
  0021c	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv182[ebp], 1
  00223	eb 07		 jmp	 SHORT $LN10@draw_syste
$LN9@draw_syste:
  00225	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN10@draw_syste:
  0022c	51		 push	 ecx
  0022d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	8b 55 b8	 mov	 edx, DWORD PTR tv182[ebp]
  0023a	52		 push	 edx
  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00240	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
  00245	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  0024a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6470 : 
; 6471 : 	y_adjust = print_mfd_system_message ("TAIL ROTOR", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_TAIL_ROTOR), y_adjust);

  0024d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00252	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00258	83 e1 04	 and	 ecx, 4
  0025b	74 09		 je	 SHORT $LN11@draw_syste
  0025d	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv191[ebp], 1
  00264	eb 07		 jmp	 SHORT $LN12@draw_syste
$LN11@draw_syste:
  00266	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv191[ebp], 0
$LN12@draw_syste:
  0026d	51		 push	 ecx
  0026e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00273	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00278	8b 55 b8	 mov	 edx, DWORD PTR tv191[ebp]
  0027b	52		 push	 edx
  0027c	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00281	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
  00286	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  0028b	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6472 : 
; 6473 : 	y_adjust = print_mfd_system_message ("L ENGINE", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_LEFT_ENGINE), y_adjust);

  0028e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00293	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00299	83 e1 08	 and	 ecx, 8
  0029c	74 09		 je	 SHORT $LN13@draw_syste
  0029e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv200[ebp], 1
  002a5	eb 07		 jmp	 SHORT $LN14@draw_syste
$LN13@draw_syste:
  002a7	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv200[ebp], 0
$LN14@draw_syste:
  002ae	51		 push	 ecx
  002af	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b9	8b 55 b8	 mov	 edx, DWORD PTR tv200[ebp]
  002bc	52		 push	 edx
  002bd	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  002c2	68 00 00 00 00	 push	 OFFSET ??_C@_08ICMALC@L?5ENGINE@
  002c7	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  002cc	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6474 : 
; 6475 : 	y_adjust = print_mfd_system_message ("SPU", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_APU), y_adjust);

  002cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002d4	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  002da	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  002e0	74 09		 je	 SHORT $LN15@draw_syste
  002e2	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv209[ebp], 1
  002e9	eb 07		 jmp	 SHORT $LN16@draw_syste
$LN15@draw_syste:
  002eb	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv209[ebp], 0
$LN16@draw_syste:
  002f2	51		 push	 ecx
  002f3	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	8b 55 b8	 mov	 edx, DWORD PTR tv209[ebp]
  00300	52		 push	 edx
  00301	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00306	68 00 00 00 00	 push	 OFFSET ??_C@_03KMHDAHAO@SPU@
  0030b	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  00310	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6476 : 
; 6477 : 	y_adjust = print_mfd_system_message ("R ENGINE", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_RIGHT_ENGINE), y_adjust);

  00313	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00318	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0031e	83 e1 10	 and	 ecx, 16			; 00000010H
  00321	74 09		 je	 SHORT $LN17@draw_syste
  00323	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv218[ebp], 1
  0032a	eb 07		 jmp	 SHORT $LN18@draw_syste
$LN17@draw_syste:
  0032c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv218[ebp], 0
$LN18@draw_syste:
  00333	51		 push	 ecx
  00334	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00339	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033e	8b 55 b8	 mov	 edx, DWORD PTR tv218[ebp]
  00341	52		 push	 edx
  00342	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00347	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  0034c	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  00351	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6478 : 
; 6479 : 	y_adjust = print_mfd_system_message ("HYDRAULIC PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_HYDRAULICS), y_adjust);

  00354	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00359	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0035f	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00365	74 09		 je	 SHORT $LN19@draw_syste
  00367	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv227[ebp], 1
  0036e	eb 07		 jmp	 SHORT $LN20@draw_syste
$LN19@draw_syste:
  00370	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv227[ebp], 0
$LN20@draw_syste:
  00377	51		 push	 ecx
  00378	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0037d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00382	8b 55 b8	 mov	 edx, DWORD PTR tv227[ebp]
  00385	52		 push	 edx
  00386	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  0038b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
  00390	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  00395	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6480 : 
; 6481 : 	if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  00398	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0039d	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003a3	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  003a9	74 09		 je	 SHORT $LN21@draw_syste
  003ab	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv234[ebp], 1
  003b2	eb 07		 jmp	 SHORT $LN22@draw_syste
$LN21@draw_syste:
  003b4	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv234[ebp], 0
$LN22@draw_syste:
  003bb	83 7d b8 00	 cmp	 DWORD PTR tv234[ebp], 0
  003bf	74 46		 je	 SHORT $LN4@draw_syste

; 6482 : 	{
; 6483 : 		y_adjust = print_mfd_system_message ("OIL PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE), y_adjust);

  003c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003c6	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003cc	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  003d2	74 09		 je	 SHORT $LN23@draw_syste
  003d4	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv241[ebp], 1
  003db	eb 07		 jmp	 SHORT $LN24@draw_syste
$LN23@draw_syste:
  003dd	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv241[ebp], 0
$LN24@draw_syste:
  003e4	51		 push	 ecx
  003e5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	8b 55 b8	 mov	 edx, DWORD PTR tv241[ebp]
  003f2	52		 push	 edx
  003f3	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  003f8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  003fd	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  00402	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6484 : 	}
; 6485 : 	else

  00405	eb 44		 jmp	 SHORT $LN5@draw_syste
$LN4@draw_syste:

; 6486 : 	{
; 6487 : 		y_adjust = print_mfd_system_message ("OIL PRESSURE", "HIGH", get_dynamics_damage_type (DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE), y_adjust);

  00407	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0040c	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00412	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00418	74 09		 je	 SHORT $LN25@draw_syste
  0041a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv250[ebp], 1
  00421	eb 07		 jmp	 SHORT $LN26@draw_syste
$LN25@draw_syste:
  00423	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv250[ebp], 0
$LN26@draw_syste:
  0042a	51		 push	 ecx
  0042b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00430	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00435	8b 55 b8	 mov	 edx, DWORD PTR tv250[ebp]
  00438	52		 push	 edx
  00439	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  0043e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  00443	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HM@Z ; print_mfd_system_message
  00448	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]
$LN5@draw_syste:

; 6488 : 	}
; 6489 : }

  0044b	5f		 pop	 edi
  0044c	5e		 pop	 esi
  0044d	5b		 pop	 ebx
  0044e	8b e5		 mov	 esp, ebp
  00450	5d		 pop	 ebp
  00451	c3		 ret	 0
?draw_system_display_mfd@@YGXXZ ENDP			; draw_system_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?print_mfd_system_message@@YGMPAD0HM@Z
_TEXT	SEGMENT
tv160 = -76						; size = 4
_width$ = -8						; size = 4
_status$ = -4						; size = 4
_equipment$ = 8						; size = 4
_warning$ = 12						; size = 4
_fail$ = 16						; size = 4
_y_adjust$ = 20						; size = 4
?print_mfd_system_message@@YGMPAD0HM@Z PROC		; print_mfd_system_message, COMDAT

; 6382 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6383 : 	char
; 6384 : 		*status;
; 6385 : 
; 6386 : 	float
; 6387 : 		width;
; 6388 : 
; 6389 : 	ASSERT (equipment);

  00009	83 7d 08 00	 cmp	 DWORD PTR _equipment$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@print_mfd_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HM@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_09FJJPPKDN@equipment@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_mfd_:

; 6390 : 
; 6391 : 	ASSERT (warning);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _warning$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@print_mfd_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HM@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07FPLKDJGL@warning@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_mfd_:

; 6392 : 
; 6393 : 	if (fail)

  00045	83 7d 10 00	 cmp	 DWORD PTR _fail$[ebp], 0
  00049	74 1c		 je	 SHORT $LN4@print_mfd_

; 6394 : 	{
; 6395 : 		set_mono_font_colour (MFD_COLOUR_RED);

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 0f	 imul	 ecx, eax, 15
  00053	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6396 : 
; 6397 : 		status = warning;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _warning$[ebp]
  00062	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 6398 : 	}
; 6399 : 	else

  00065	eb 1b		 jmp	 SHORT $LN5@print_mfd_
$LN4@print_mfd_:

; 6400 : 	{
; 6401 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	6b c8 13	 imul	 ecx, eax, 19
  0006f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6402 : 
; 6403 : 		status = "OK";

  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], OFFSET ??_C@_02GIPFHKNO@OK@
$LN5@print_mfd_:

; 6404 : 	}
; 6405 : 
; 6406 : 	set_2d_mono_font_position (-0.9, 0.92125);

  00082	51		 push	 ecx
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6bd70a
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	51		 push	 ecx
  00091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6407 : 
; 6408 : 	set_mono_font_rel_position (1.0, y_adjust);

  000a3	51		 push	 ecx
  000a4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6409 : 
; 6410 : 	print_mono_font_string (equipment);

  000c1	8b 45 08	 mov	 eax, DWORD PTR _equipment$[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6411 : 
; 6412 : 	width = get_mono_font_string_width (status);

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000d3	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 6413 : 
; 6414 : 	set_2d_mono_font_position (0.9, 0.92125);

  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6bd70a
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6415 : 
; 6416 : 	set_mono_font_rel_position (-width, y_adjust);

  000f7	51		 push	 ecx
  000f8	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  00107	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0010e	51		 push	 ecx
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6417 : 
; 6418 : 	print_mono_font_string (status);

  00119	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6419 : 
; 6420 : 	y_adjust += get_mono_font_char_height ('X');

  00122	6a 58		 push	 88			; 00000058H
  00124	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00129	d9 5d b4	 fstp	 DWORD PTR tv160[ebp]
  0012c	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv160[ebp]
  00131	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00136	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6421 : 
; 6422 : 	return (y_adjust);

  0013b	d9 45 14	 fld	 DWORD PTR _y_adjust$[ebp]

; 6423 : }

  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 10 00	 ret	 16			; 00000010H
?print_mfd_system_message@@YGMPAD0HM@Z ENDP		; print_mfd_system_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_weapon_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv2173 = -304						; size = 8
tv2157 = -304						; size = 8
tv2060 = -304						; size = 8
tv1968 = -304						; size = 8
tv1950 = -304						; size = 8
tv1924 = -304						; size = 8
tv1890 = -304						; size = 8
tv1864 = -304						; size = 8
tv1836 = -304						; size = 8
tv1687 = -304						; size = 8
tv1670 = -304						; size = 8
tv1648 = -304						; size = 8
tv1632 = -304						; size = 8
tv1610 = -304						; size = 8
tv1594 = -304						; size = 8
tv715 = -304						; size = 4
tv78 = -304						; size = 4
tv1000 = -300						; size = 4
tv998 = -300						; size = 4
tv880 = -300						; size = 4
tv874 = -300						; size = 4
tv784 = -300						; size = 4
tv779 = -300						; size = 4
tv768 = -300						; size = 4
tv741 = -300						; size = 4
tv708 = -300						; size = 4
tv650 = -300						; size = 4
tv627 = -300						; size = 4
tv605 = -300						; size = 4
tv507 = -300						; size = 4
tv483 = -300						; size = 4
tv481 = -300						; size = 4
tv446 = -300						; size = 4
tv412 = -300						; size = 4
tv267 = -300						; size = 4
tv85 = -300						; size = 4
tv70 = -300						; size = 4
$T1 = -296						; size = 4
_y_offset$2 = -228					; size = 4
_y2$3 = -224						; size = 4
_x2$4 = -220						; size = 4
_y1$5 = -216						; size = 4
_x1$6 = -212						; size = 4
_height$7 = -208					; size = 4
_width$8 = -204						; size = 4
_tip$9 = -200						; size = 4
_left_tip$10 = -196					; size = 4
_selected$11 = -192					; size = 4
_text_colour$12 = -188					; size = 4
_selected$13 = -184					; size = 4
_missile_y$14 = -180					; size = 4
_missile_x$15 = -176					; size = 4
_last_offset$16 = -172					; size = 4
_i$17 = -168						; size = 4
_pylon_y$18 = -164					; size = 4
_pylon_x$19 = -160					; size = 4
_selected$ = -156					; size = 4
_weapon_sub_type$ = -152				; size = 4
_pylon$ = -148						; size = 4
_selected_weapon$ = -144				; size = 4
_damaged$ = -140					; size = 4
_number$ = -136						; size = 4
_x_adjust$ = -132					; size = 4
_s_ptr$ = -128						; size = 4
_s$ = -124						; size = 80
_wing_tip_right$ = -44					; size = 4
_wing_tip_left$ = -40					; size = 4
_rear_wing$ = -36					; size = 4
_forward_wing$ = -32					; size = 4
_y3$ = -28						; size = 4
_y2$ = -24						; size = 4
_y1$ = -20						; size = 4
_x4$ = -16						; size = 4
_x3$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
?draw_weapon_display_mfd@@YGXXZ PROC			; draw_weapon_display_mfd, COMDAT

; 5847 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5848 : 	float
; 5849 : 		x1, x2, x3, x4, y1, y2, y3;
; 5850 : 	float
; 5851 : 		forward_wing, rear_wing, wing_tip_left, wing_tip_right;
; 5852 : 	char
; 5853 : 		s[80];
; 5854 : 	const char
; 5855 : 		*s_ptr;
; 5856 : 	float
; 5857 : 		x_adjust;
; 5858 : 	int
; 5859 : 		number, damaged, selected_weapon, pylon;
; 5860 : 	entity_sub_types
; 5861 : 		weapon_sub_type;
; 5862 : 	int
; 5863 : 		selected;
; 5864 : 
; 5865 : 	selected_weapon = get_local_entity_int_value(get_gunship_entity (), INT_TYPE_SELECTED_WEAPON);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00013	74 0f		 je	 SHORT $LN82@draw_weapo
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00022	eb 24		 jmp	 SHORT $LN83@draw_weapo
$LN82@draw_weapo:
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  0002a	83 c2 12	 add	 edx, 18			; 00000012H
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003e	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN83@draw_weapo:
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 0c		 je	 SHORT $LN84@draw_weapo
  00051	c7 85 d0 fe ff
	ff b8 00 00 00	 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0005b	eb 24		 jmp	 SHORT $LN85@draw_weapo
$LN84@draw_weapo:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  00063	83 c2 12	 add	 edx, 18			; 00000012H
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN85@draw_weapo:
  00081	68 b8 00 00 00	 push	 184			; 000000b8H
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0008c	51		 push	 ecx
  0008d	69 95 d4 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  00097	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a4	ff d1		 call	 ecx
  000a6	89 85 70 ff ff
	ff		 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 5866 : 
; 5867 : 	set_mono_font_type (draw_large_mfd ? MONO_FONT_TYPE_7X12 : MONO_FONT_TYPE_5X7);

  000ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000b3	74 0c		 je	 SHORT $LN86@draw_weapo
  000b5	c7 85 d4 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv85[ebp], 5
  000bf	eb 0a		 jmp	 SHORT $LN87@draw_weapo
$LN86@draw_weapo:
  000c1	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv85[ebp], 1
$LN87@draw_weapo:
  000cb	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5868 : 
; 5869 : 	get_2d_float_screen_coordinates (-0.25, 0.5, &x1, &y1);

  000d7	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  000da	50		 push	 eax
  000db	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  000de	51		 push	 ecx
  000df	51		 push	 ecx
  000e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	51		 push	 ecx
  000ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  000f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fb	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 5870 : 	get_2d_float_screen_coordinates (-0.1, 0.525, &x2, &y2);

  00100	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00103	50		 push	 eax
  00104	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00107	51		 push	 ecx
  00108	51		 push	 ecx
  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f066666
  00111	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00116	51		 push	 ecx
  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 5871 : 	get_2d_float_screen_coordinates (-0.075, 0.6, &x3, &y3);

  00129	8d 45 e4	 lea	 eax, DWORD PTR _y3$[ebp]
  0012c	50		 push	 eax
  0012d	8d 4d f4	 lea	 ecx, DWORD PTR _x3$[ebp]
  00130	51		 push	 ecx
  00131	51		 push	 ecx
  00132	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0013a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013f	51		 push	 ecx
  00140	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014d	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 5872 : 	get_2d_float_screen_x_coordinate (0.075, &x4);

  00152	8d 45 f0	 lea	 eax, DWORD PTR _x4$[ebp]
  00155	50		 push	 eax
  00156	51		 push	 ecx
  00157	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  0015f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00164	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5873 : 	
; 5874 : 	draw_line (x1, y1, x2, y2, MFD_COLOUR1);

  00169	b8 04 00 00 00	 mov	 eax, 4
  0016e	6b c8 00	 imul	 ecx, eax, 0
  00171	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00177	52		 push	 edx
  00178	51		 push	 ecx
  00179	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	51		 push	 ecx
  00184	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00189	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018e	51		 push	 ecx
  0018f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00194	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00199	51		 push	 ecx
  0019a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0019f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5875 : 	draw_line (x2, y2, x3, y3, MFD_COLOUR1);

  001a9	b8 04 00 00 00	 mov	 eax, 4
  001ae	6b c8 00	 imul	 ecx, eax, 0
  001b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001b7	52		 push	 edx
  001b8	51		 push	 ecx
  001b9	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  001be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c3	51		 push	 ecx
  001c4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  001c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ce	51		 push	 ecx
  001cf	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d9	51		 push	 ecx
  001da	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5876 : 	draw_line (x3, y3, x4, y3, MFD_COLOUR1);

  001e9	b8 04 00 00 00	 mov	 eax, 4
  001ee	6b c8 00	 imul	 ecx, eax, 0
  001f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f7	52		 push	 edx
  001f8	51		 push	 ecx
  001f9	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  001fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00203	51		 push	 ecx
  00204	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00209	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020e	51		 push	 ecx
  0020f	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	51		 push	 ecx
  0021a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  0021f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00224	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5877 : 
; 5878 : 	get_2d_float_screen_x_coordinate (0.1, &x3);

  00229	8d 45 f4	 lea	 eax, DWORD PTR _x3$[ebp]
  0022c	50		 push	 eax
  0022d	51		 push	 ecx
  0022e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00236	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023b	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5879 : 	get_2d_float_screen_x_coordinate (0.25, &x2);

  00240	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  00243	50		 push	 eax
  00244	51		 push	 ecx
  00245	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0024d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00252	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5880 : 
; 5881 : 	draw_line (x4, y3, x3, y2, MFD_COLOUR1);

  00257	b8 04 00 00 00	 mov	 eax, 4
  0025c	6b c8 00	 imul	 ecx, eax, 0
  0025f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00265	52		 push	 edx
  00266	51		 push	 ecx
  00267	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0026c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00271	51		 push	 ecx
  00272	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027c	51		 push	 ecx
  0027d	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00282	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00287	51		 push	 ecx
  00288	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  0028d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00292	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5882 : 	draw_line (x3, y2, x2, y1, MFD_COLOUR1);

  00297	b8 04 00 00 00	 mov	 eax, 4
  0029c	6b c8 00	 imul	 ecx, eax, 0
  0029f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002a5	52		 push	 edx
  002a6	51		 push	 ecx
  002a7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  002ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b1	51		 push	 ecx
  002b2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  002b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bc	51		 push	 ecx
  002bd	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  002c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c7	51		 push	 ecx
  002c8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  002cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d2	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5883 : 
; 5884 : 	// body
; 5885 : 	
; 5886 : 	get_2d_float_screen_y_coordinate (-0.1, &forward_wing);

  002d7	8d 45 e0	 lea	 eax, DWORD PTR _forward_wing$[ebp]
  002da	50		 push	 eax
  002db	51		 push	 ecx
  002dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  002e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e9	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 5887 : 	get_2d_float_screen_y_coordinate (-0.5, &rear_wing);

  002ee	8d 45 dc	 lea	 eax, DWORD PTR _rear_wing$[ebp]
  002f1	50		 push	 eax
  002f2	51		 push	 ecx
  002f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  002fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00300	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 5888 : 	get_2d_float_screen_x_coordinate (-0.97, &wing_tip_left);

  00305	8d 45 d8	 lea	 eax, DWORD PTR _wing_tip_left$[ebp]
  00308	50		 push	 eax
  00309	51		 push	 ecx
  0030a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7851ec
  00312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00317	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5889 : 	get_2d_float_screen_x_coordinate (0.97, &wing_tip_right);

  0031c	8d 45 d4	 lea	 eax, DWORD PTR _wing_tip_right$[ebp]
  0031f	50		 push	 eax
  00320	51		 push	 ecx
  00321	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7851ec
  00329	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032e	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5890 : 
; 5891 : 	draw_line (x1, y1, x1, forward_wing, MFD_COLOUR1);

  00333	b8 04 00 00 00	 mov	 eax, 4
  00338	6b c8 00	 imul	 ecx, eax, 0
  0033b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00341	52		 push	 edx
  00342	51		 push	 ecx
  00343	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00348	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034d	51		 push	 ecx
  0034e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	51		 push	 ecx
  00359	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	51		 push	 ecx
  00364	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00369	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5892 : 	draw_line (x2, y1, x2, forward_wing, MFD_COLOUR1);

  00373	b8 04 00 00 00	 mov	 eax, 4
  00378	6b c8 00	 imul	 ecx, eax, 0
  0037b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00381	52		 push	 edx
  00382	51		 push	 ecx
  00383	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	51		 push	 ecx
  0038e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00393	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00398	51		 push	 ecx
  00399	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0039e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a3	51		 push	 ecx
  003a4	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  003a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ae	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5893 : 	draw_line (x1, forward_wing, wing_tip_left, forward_wing, MFD_COLOUR1);

  003b3	b8 04 00 00 00	 mov	 eax, 4
  003b8	6b c8 00	 imul	 ecx, eax, 0
  003bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003c1	52		 push	 edx
  003c2	51		 push	 ecx
  003c3	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  003c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cd	51		 push	 ecx
  003ce	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  003d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d8	51		 push	 ecx
  003d9	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  003de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e3	51		 push	 ecx
  003e4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  003e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ee	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5894 : 	draw_line (x2, forward_wing, wing_tip_right, forward_wing, MFD_COLOUR1);

  003f3	b8 04 00 00 00	 mov	 eax, 4
  003f8	6b c8 00	 imul	 ecx, eax, 0
  003fb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00401	52		 push	 edx
  00402	51		 push	 ecx
  00403	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	51		 push	 ecx
  0040e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  00413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00418	51		 push	 ecx
  00419	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0041e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00423	51		 push	 ecx
  00424	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00429	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5895 : 
; 5896 : 	draw_line (wing_tip_left, forward_wing, wing_tip_left, rear_wing, MFD_COLOUR1);

  00433	b8 04 00 00 00	 mov	 eax, 4
  00438	6b c8 00	 imul	 ecx, eax, 0
  0043b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00441	52		 push	 edx
  00442	51		 push	 ecx
  00443	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00448	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044d	51		 push	 ecx
  0044e	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  00453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00458	51		 push	 ecx
  00459	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0045e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00463	51		 push	 ecx
  00464	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  00469	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5897 : 	draw_line (wing_tip_right, forward_wing, wing_tip_right, rear_wing, MFD_COLOUR1);

  00473	b8 04 00 00 00	 mov	 eax, 4
  00478	6b c8 00	 imul	 ecx, eax, 0
  0047b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00481	52		 push	 edx
  00482	51		 push	 ecx
  00483	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00488	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048d	51		 push	 ecx
  0048e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  00493	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00498	51		 push	 ecx
  00499	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0049e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a3	51		 push	 ecx
  004a4	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  004a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ae	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5898 : 	draw_line (x1, rear_wing, wing_tip_left, rear_wing, MFD_COLOUR1);

  004b3	b8 04 00 00 00	 mov	 eax, 4
  004b8	6b c8 00	 imul	 ecx, eax, 0
  004bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004c1	52		 push	 edx
  004c2	51		 push	 ecx
  004c3	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  004c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cd	51		 push	 ecx
  004ce	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  004d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d8	51		 push	 ecx
  004d9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  004de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e3	51		 push	 ecx
  004e4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ee	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5899 : 	draw_line (x2, rear_wing, wing_tip_right, rear_wing, MFD_COLOUR1);

  004f3	b8 04 00 00 00	 mov	 eax, 4
  004f8	6b c8 00	 imul	 ecx, eax, 0
  004fb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00501	52		 push	 edx
  00502	51		 push	 ecx
  00503	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00508	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050d	51		 push	 ecx
  0050e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  00513	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00518	51		 push	 ecx
  00519	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  0051e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00523	51		 push	 ecx
  00524	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00529	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5900 : 
; 5901 : 	get_2d_float_screen_y_coordinate (-0.8, &y2);

  00533	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00536	50		 push	 eax
  00537	51		 push	 ecx
  00538	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00540	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00545	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 5902 : 
; 5903 : 	draw_line (x1, rear_wing, x1, y2, MFD_COLOUR1);

  0054a	b8 04 00 00 00	 mov	 eax, 4
  0054f	6b c8 00	 imul	 ecx, eax, 0
  00552	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00558	52		 push	 edx
  00559	51		 push	 ecx
  0055a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0055f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00564	51		 push	 ecx
  00565	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0056a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056f	51		 push	 ecx
  00570	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00575	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057a	51		 push	 ecx
  0057b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00580	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00585	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5904 : 	draw_line (x2, rear_wing, x2, y2, MFD_COLOUR1);

  0058a	b8 04 00 00 00	 mov	 eax, 4
  0058f	6b c8 00	 imul	 ecx, eax, 0
  00592	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00598	52		 push	 edx
  00599	51		 push	 ecx
  0059a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0059f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a4	51		 push	 ecx
  005a5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005af	51		 push	 ecx
  005b0	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  005b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ba	51		 push	 ecx
  005bb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c5	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5905 : 	draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  005ca	b8 04 00 00 00	 mov	 eax, 4
  005cf	6b c8 00	 imul	 ecx, eax, 0
  005d2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005d8	52		 push	 edx
  005d9	51		 push	 ecx
  005da	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e4	51		 push	 ecx
  005e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ef	51		 push	 ecx
  005f0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fa	51		 push	 ecx
  005fb	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00600	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00605	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5906 : 
; 5907 : 
; 5908 : 	get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  0060a	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00610	50		 push	 eax
  00611	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00617	51		 push	 ecx
  00618	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0061e	52		 push	 edx
  0061f	6a 00		 push	 0
  00621	6a 00		 push	 0
  00623	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00628	50		 push	 eax
  00629	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 5909 : 		COBRA_CANNON_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, 
; 5910 : 		&weapon_sub_type, &number, &damaged);
; 5911 : 
; 5912 : 	selected = (weapon_sub_type == selected_weapon) && !damaged;

  0062e	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00634	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0063a	75 15		 jne	 SHORT $LN88@draw_weapo
  0063c	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00643	75 0c		 jne	 SHORT $LN88@draw_weapo
  00645	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv267[ebp], 1
  0064f	eb 0a		 jmp	 SHORT $LN89@draw_weapo
$LN88@draw_weapo:
  00651	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv267[ebp], 0
$LN89@draw_weapo:
  0065b	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv267[ebp]
  00661	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _selected$[ebp], ecx

; 5913 : 
; 5914 : 	// cannon
; 5915 : 	{
; 5916 : 		get_2d_float_screen_coordinates (-0.01, 0.575, &x1, &y1);

  00667	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  0066a	50		 push	 eax
  0066b	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  0066e	51		 push	 ecx
  0066f	51		 push	 ecx
  00670	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f133333
  00678	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067d	51		 push	 ecx
  0067e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bc23d70a
  00686	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068b	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 5917 : 		get_2d_float_screen_x_coordinate (0.01, &x2);

  00690	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  00693	50		 push	 eax
  00694	51		 push	 ecx
  00695	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  0069d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a2	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5918 : 		get_2d_float_screen_y_coordinate (0.35, &y2);

  006a7	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  006aa	50		 push	 eax
  006ab	51		 push	 ecx
  006ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  006b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b9	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 5919 : 		get_2d_float_screen_x_coordinate (-0.08, &x3);

  006be	8d 45 f4	 lea	 eax, DWORD PTR _x3$[ebp]
  006c1	50		 push	 eax
  006c2	51		 push	 ecx
  006c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  006cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d0	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5920 : 		get_2d_float_screen_x_coordinate (0.08, &x4);

  006d5	8d 45 f0	 lea	 eax, DWORD PTR _x4$[ebp]
  006d8	50		 push	 eax
  006d9	51		 push	 ecx
  006da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  006e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e7	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5921 : 		get_2d_float_screen_y_coordinate (0.2, &y3);

  006ec	8d 45 e4	 lea	 eax, DWORD PTR _y3$[ebp]
  006ef	50		 push	 eax
  006f0	51		 push	 ecx
  006f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  006f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fe	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 5922 : 		
; 5923 : 		if (selected)

  00703	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _selected$[ebp], 0
  0070a	74 5d		 je	 SHORT $LN18@draw_weapo

; 5924 : 		{
; 5925 : 			set_block (x1, y1, x2, y2, MFD_COLOUR1);

  0070c	b8 04 00 00 00	 mov	 eax, 4
  00711	6b c8 00	 imul	 ecx, eax, 0
  00714	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0071a	52		 push	 edx
  0071b	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _y2$[ebp]
  00720	50		 push	 eax
  00721	f3 0f 2c 4d f8	 cvttss2si ecx, DWORD PTR _x2$[ebp]
  00726	51		 push	 ecx
  00727	f3 0f 2c 55 ec	 cvttss2si edx, DWORD PTR _y1$[ebp]
  0072c	52		 push	 edx
  0072d	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _x1$[ebp]
  00732	50		 push	 eax
  00733	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 5926 : 			set_block (x3, y2, x4, y3, MFD_COLOUR1);	

  00738	b8 04 00 00 00	 mov	 eax, 4
  0073d	6b c8 00	 imul	 ecx, eax, 0
  00740	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00746	52		 push	 edx
  00747	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR _y3$[ebp]
  0074c	50		 push	 eax
  0074d	f3 0f 2c 4d f0	 cvttss2si ecx, DWORD PTR _x4$[ebp]
  00752	51		 push	 ecx
  00753	f3 0f 2c 55 e8	 cvttss2si edx, DWORD PTR _y2$[ebp]
  00758	52		 push	 edx
  00759	f3 0f 2c 45 f4	 cvttss2si eax, DWORD PTR _x3$[ebp]
  0075e	50		 push	 eax
  0075f	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 5927 : 		}
; 5928 : 		else

  00764	e9 c0 01 00 00	 jmp	 $LN19@draw_weapo
$LN18@draw_weapo:

; 5929 : 		{
; 5930 : 			draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  00769	b8 04 00 00 00	 mov	 eax, 4
  0076e	6b c8 00	 imul	 ecx, eax, 0
  00771	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00777	52		 push	 edx
  00778	51		 push	 ecx
  00779	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0077e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00783	51		 push	 ecx
  00784	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00789	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078e	51		 push	 ecx
  0078f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00794	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00799	51		 push	 ecx
  0079a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0079f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5931 : 			draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  007a9	b8 04 00 00 00	 mov	 eax, 4
  007ae	6b c8 00	 imul	 ecx, eax, 0
  007b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007b7	52		 push	 edx
  007b8	51		 push	 ecx
  007b9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  007be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c3	51		 push	 ecx
  007c4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ce	51		 push	 ecx
  007cf	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  007d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d9	51		 push	 ecx
  007da	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5932 : 			draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  007e9	b8 04 00 00 00	 mov	 eax, 4
  007ee	6b c8 00	 imul	 ecx, eax, 0
  007f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007f7	52		 push	 edx
  007f8	51		 push	 ecx
  007f9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  007fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00803	51		 push	 ecx
  00804	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00809	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080e	51		 push	 ecx
  0080f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00814	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00819	51		 push	 ecx
  0081a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0081f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00824	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5933 : 			draw_line (x1, y2, x3, y2, MFD_COLOUR1);

  00829	b8 04 00 00 00	 mov	 eax, 4
  0082e	6b c8 00	 imul	 ecx, eax, 0
  00831	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00837	52		 push	 edx
  00838	51		 push	 ecx
  00839	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0083e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00843	51		 push	 ecx
  00844	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00849	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084e	51		 push	 ecx
  0084f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00854	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00859	51		 push	 ecx
  0085a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0085f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00864	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5934 : 			draw_line (x2, y2, x4, y2, MFD_COLOUR1);

  00869	b8 04 00 00 00	 mov	 eax, 4
  0086e	6b c8 00	 imul	 ecx, eax, 0
  00871	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00877	52		 push	 edx
  00878	51		 push	 ecx
  00879	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0087e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00883	51		 push	 ecx
  00884	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00889	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088e	51		 push	 ecx
  0088f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00894	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00899	51		 push	 ecx
  0089a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0089f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5935 : 			draw_line (x3, y2, x3, y3, MFD_COLOUR1);

  008a9	b8 04 00 00 00	 mov	 eax, 4
  008ae	6b c8 00	 imul	 ecx, eax, 0
  008b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008b7	52		 push	 edx
  008b8	51		 push	 ecx
  008b9	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  008be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c3	51		 push	 ecx
  008c4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  008c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ce	51		 push	 ecx
  008cf	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  008d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d9	51		 push	 ecx
  008da	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  008df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5936 : 			draw_line (x4, y2, x4, y3, MFD_COLOUR1);

  008e9	b8 04 00 00 00	 mov	 eax, 4
  008ee	6b c8 00	 imul	 ecx, eax, 0
  008f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008f7	52		 push	 edx
  008f8	51		 push	 ecx
  008f9	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  008fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00903	51		 push	 ecx
  00904	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00909	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090e	51		 push	 ecx
  0090f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00914	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00919	51		 push	 ecx
  0091a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  0091f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00924	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN19@draw_weapo:

; 5937 : 		}
; 5938 : 		
; 5939 : 		get_2d_float_screen_coordinates (-0.2, 0.2, &x1, &y1);

  00929	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  0092c	50		 push	 eax
  0092d	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00930	51		 push	 ecx
  00931	51		 push	 ecx
  00932	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0093a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093f	51		 push	 ecx
  00940	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00948	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094d	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 5940 : 		get_2d_float_screen_coordinates (0.2, 0.05, &x2, &y2);

  00952	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00955	50		 push	 eax
  00956	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00959	51		 push	 ecx
  0095a	51		 push	 ecx
  0095b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00963	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00968	51		 push	 ecx
  00969	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00971	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00976	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 5941 : 		
; 5942 : 		set_mono_font_colour (MFD_COLOUR1);	

  0097b	b8 04 00 00 00	 mov	 eax, 4
  00980	6b c8 00	 imul	 ecx, eax, 0
  00983	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00989	52		 push	 edx
  0098a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5943 : 		draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  0098f	b8 04 00 00 00	 mov	 eax, 4
  00994	6b c8 00	 imul	 ecx, eax, 0
  00997	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0099d	52		 push	 edx
  0099e	51		 push	 ecx
  0099f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a9	51		 push	 ecx
  009aa	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  009af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b4	51		 push	 ecx
  009b5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009bf	51		 push	 ecx
  009c0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  009c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ca	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5944 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  009cf	b8 04 00 00 00	 mov	 eax, 4
  009d4	6b c8 00	 imul	 ecx, eax, 0
  009d7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009dd	52		 push	 edx
  009de	51		 push	 ecx
  009df	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  009e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e9	51		 push	 ecx
  009ea	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  009ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f4	51		 push	 ecx
  009f5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ff	51		 push	 ecx
  00a00	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00a05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5945 : 		draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  00a0f	b8 04 00 00 00	 mov	 eax, 4
  00a14	6b c8 00	 imul	 ecx, eax, 0
  00a17	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a1d	52		 push	 edx
  00a1e	51		 push	 ecx
  00a1f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a29	51		 push	 ecx
  00a2a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00a2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a34	51		 push	 ecx
  00a35	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3f	51		 push	 ecx
  00a40	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00a45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5946 : 		draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  00a4f	b8 04 00 00 00	 mov	 eax, 4
  00a54	6b c8 00	 imul	 ecx, eax, 0
  00a57	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a5d	52		 push	 edx
  00a5e	51		 push	 ecx
  00a5f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a69	51		 push	 ecx
  00a6a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00a6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a74	51		 push	 ecx
  00a75	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00a7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7f	51		 push	 ecx
  00a80	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5947 : 
; 5948 : 		set_2d_mono_font_position (0.0, 0.15);

  00a8f	51		 push	 ecx
  00a90	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00a98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a9d	51		 push	 ecx
  00a9e	0f 57 c0	 xorps	 xmm0, xmm0
  00aa1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5949 : 
; 5950 : 		if (!damaged)

  00aab	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00ab2	75 1a		 jne	 SHORT $LN20@draw_weapo

; 5951 : 			sprintf (s, "%4d", number);

  00ab4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00aba	50		 push	 eax
  00abb	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  00ac0	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00ac3	51		 push	 ecx
  00ac4	e8 00 00 00 00	 call	 _sprintf
  00ac9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5952 : 		else

  00acc	eb 11		 jmp	 SHORT $LN21@draw_weapo
$LN20@draw_weapo:

; 5953 : 			sprintf (s, "XXXX");

  00ace	68 00 00 00 00	 push	 OFFSET ??_C@_04CPMKADPB@XXXX@
  00ad3	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00ad6	50		 push	 eax
  00ad7	e8 00 00 00 00	 call	 _sprintf
  00adc	83 c4 08	 add	 esp, 8
$LN21@draw_weapo:

; 5954 : 	
; 5955 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00adf	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00ae2	50		 push	 eax
  00ae3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ae8	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1594[ebp]
  00aee	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1594[ebp]
  00af6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00afe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b02	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5956 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00b0a	51		 push	 ecx
  00b0b	0f 57 c0	 xorps	 xmm0, xmm0
  00b0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b13	51		 push	 ecx
  00b14	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b21	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5957 : 		print_mono_font_string (s);

  00b26	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00b29	50		 push	 eax
  00b2a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5958 : 	}
; 5959 : 
; 5960 : 	// Chaff
; 5961 : 	set_2d_mono_font_position (0.0, -0.2);

  00b2f	51		 push	 ecx
  00b30	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00b38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3d	51		 push	 ecx
  00b3e	0f 57 c0	 xorps	 xmm0, xmm0
  00b41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b46	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5962 : 
; 5963 : 	s_ptr = draw_large_mfd ? "CHAFF" : "C";

  00b4b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b52	74 0c		 je	 SHORT $LN90@draw_weapo
  00b54	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv412[ebp], OFFSET ??_C@_05FOOOBDLP@CHAFF@
  00b5e	eb 0a		 jmp	 SHORT $LN91@draw_weapo
$LN90@draw_weapo:
  00b60	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv412[ebp], OFFSET ??_C@_01GFHCPBMG@C@
$LN91@draw_weapo:
  00b6a	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv412[ebp]
  00b70	89 45 80	 mov	 DWORD PTR _s_ptr$[ebp], eax

; 5964 : 		
; 5965 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00b73	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00b76	50		 push	 eax
  00b77	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00b7c	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1610[ebp]
  00b82	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1610[ebp]
  00b8a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00b92	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b96	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5966 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00b9e	51		 push	 ecx
  00b9f	0f 57 c0	 xorps	 xmm0, xmm0
  00ba2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba7	51		 push	 ecx
  00ba8	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00bb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5967 : 	print_mono_font_string (s_ptr);

  00bba	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00bbd	50		 push	 eax
  00bbe	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5968 : 
; 5969 : 	set_2d_mono_font_position (0.0, -0.3);

  00bc3	51		 push	 ecx
  00bc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00bcc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd1	51		 push	 ecx
  00bd2	0f 57 c0	 xorps	 xmm0, xmm0
  00bd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bda	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5970 : 
; 5971 : 	get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  00bdf	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00be5	50		 push	 eax
  00be6	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00bec	51		 push	 ecx
  00bed	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00bf3	52		 push	 edx
  00bf4	6a 43		 push	 67			; 00000043H
  00bf6	6a 09		 push	 9
  00bf8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00bfd	50		 push	 eax
  00bfe	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 5972 : 		VIPER_LBHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF,
; 5973 : 		&weapon_sub_type, &number, &damaged);
; 5974 : 
; 5975 : 	if (!damaged)

  00c03	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00c0a	75 1a		 jne	 SHORT $LN22@draw_weapo

; 5976 : 		sprintf (s, "%2d", number);

  00c0c	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00c12	50		 push	 eax
  00c13	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  00c18	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00c1b	51		 push	 ecx
  00c1c	e8 00 00 00 00	 call	 _sprintf
  00c21	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5977 : 	else

  00c24	eb 11		 jmp	 SHORT $LN23@draw_weapo
$LN22@draw_weapo:

; 5978 : 		sprintf (s, "XX");

  00c26	68 00 00 00 00	 push	 OFFSET ??_C@_02BAHDIOLJ@XX@
  00c2b	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c2e	50		 push	 eax
  00c2f	e8 00 00 00 00	 call	 _sprintf
  00c34	83 c4 08	 add	 esp, 8
$LN23@draw_weapo:

; 5979 : 	
; 5980 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00c37	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c3a	50		 push	 eax
  00c3b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c40	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1632[ebp]
  00c46	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1632[ebp]
  00c4e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c56	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c5a	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5981 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00c62	51		 push	 ecx
  00c63	0f 57 c0	 xorps	 xmm0, xmm0
  00c66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6b	51		 push	 ecx
  00c6c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00c74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c79	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5982 : 	print_mono_font_string (s);

  00c7e	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c81	50		 push	 eax
  00c82	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5983 : 
; 5984 : 
; 5985 : 	// Flares
; 5986 : 	set_2d_mono_font_position (0.0, -0.45);

  00c87	51		 push	 ecx
  00c88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  00c90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c95	51		 push	 ecx
  00c96	0f 57 c0	 xorps	 xmm0, xmm0
  00c99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c9e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5987 : 
; 5988 : 	s_ptr = draw_large_mfd ? "FLARE" : "F";

  00ca3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00caa	74 0c		 je	 SHORT $LN92@draw_weapo
  00cac	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv446[ebp], OFFSET ??_C@_05MLKBHMKD@FLARE@
  00cb6	eb 0a		 jmp	 SHORT $LN93@draw_weapo
$LN92@draw_weapo:
  00cb8	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv446[ebp], OFFSET ??_C@_01BIAFAFID@F@
$LN93@draw_weapo:
  00cc2	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv446[ebp]
  00cc8	89 45 80	 mov	 DWORD PTR _s_ptr$[ebp], eax

; 5989 : 
; 5990 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00ccb	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00cce	50		 push	 eax
  00ccf	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00cd4	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1648[ebp]
  00cda	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1648[ebp]
  00ce2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00cea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00cee	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5991 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00cf6	51		 push	 ecx
  00cf7	0f 57 c0	 xorps	 xmm0, xmm0
  00cfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cff	51		 push	 ecx
  00d00	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00d08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d0d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5992 : 	print_mono_font_string (s_ptr);

  00d12	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00d15	50		 push	 eax
  00d16	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5993 : 
; 5994 : 	set_2d_mono_font_position (0.0, -0.55);

  00d1b	51		 push	 ecx
  00d1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00d24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d29	51		 push	 ecx
  00d2a	0f 57 c0	 xorps	 xmm0, xmm0
  00d2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d32	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5995 : 
; 5996 : 
; 5997 : 	get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  00d37	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00d3d	50		 push	 eax
  00d3e	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00d44	51		 push	 ecx
  00d45	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00d4b	52		 push	 edx
  00d4c	6a 44		 push	 68			; 00000044H
  00d4e	6a 09		 push	 9
  00d50	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00d55	50		 push	 eax
  00d56	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 5998 : 		VIPER_LBHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE,
; 5999 : 		&weapon_sub_type, &number, &damaged);
; 6000 : 
; 6001 : 	if (!damaged)

  00d5b	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00d62	75 1a		 jne	 SHORT $LN24@draw_weapo

; 6002 : 		sprintf (s, "%2d", number);

  00d64	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00d6a	50		 push	 eax
  00d6b	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  00d70	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00d73	51		 push	 ecx
  00d74	e8 00 00 00 00	 call	 _sprintf
  00d79	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6003 : 	else

  00d7c	eb 11		 jmp	 SHORT $LN25@draw_weapo
$LN24@draw_weapo:

; 6004 : 		sprintf (s, "XX");

  00d7e	68 00 00 00 00	 push	 OFFSET ??_C@_02BAHDIOLJ@XX@
  00d83	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00d86	50		 push	 eax
  00d87	e8 00 00 00 00	 call	 _sprintf
  00d8c	83 c4 08	 add	 esp, 8
$LN25@draw_weapo:

; 6005 : 
; 6006 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00d8f	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00d92	50		 push	 eax
  00d93	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d98	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1670[ebp]
  00d9e	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1670[ebp]
  00da6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00dae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00db2	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6007 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00dba	51		 push	 ecx
  00dbb	0f 57 c0	 xorps	 xmm0, xmm0
  00dbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc3	51		 push	 ecx
  00dc4	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00dcc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6008 : 	print_mono_font_string (s);

  00dd6	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00dd9	50		 push	 eax
  00dda	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6009 : 
; 6010 : 	// auto CM
; 6011 : 	set_2d_mono_font_position (0.0, -0.7);

  00ddf	51		 push	 ecx
  00de0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00de8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ded	51		 push	 ecx
  00dee	0f 57 c0	 xorps	 xmm0, xmm0
  00df1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00df6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6012 : 
; 6013 : 	if (get_global_auto_counter_measures ())

  00dfb	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  00e02	74 2a		 je	 SHORT $LN26@draw_weapo

; 6014 : 		s_ptr = draw_large_mfd ? "AUTO" : "A";

  00e04	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00e0b	74 0c		 je	 SHORT $LN94@draw_weapo
  00e0d	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv481[ebp], OFFSET ??_C@_04LMMJFDCN@AUTO@
  00e17	eb 0a		 jmp	 SHORT $LN95@draw_weapo
$LN94@draw_weapo:
  00e19	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv481[ebp], OFFSET ??_C@_01FHEEJDEE@A@
$LN95@draw_weapo:
  00e23	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv481[ebp]
  00e29	89 45 80	 mov	 DWORD PTR _s_ptr$[ebp], eax

; 6015 : 	else

  00e2c	eb 28		 jmp	 SHORT $LN27@draw_weapo
$LN26@draw_weapo:

; 6016 : 		s_ptr = draw_large_mfd ? "MAN" : "M";

  00e2e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00e35	74 0c		 je	 SHORT $LN96@draw_weapo
  00e37	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv483[ebp], OFFSET ??_C@_03KIGHCFHP@MAN@
  00e41	eb 0a		 jmp	 SHORT $LN97@draw_weapo
$LN96@draw_weapo:
  00e43	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv483[ebp], OFFSET ??_C@_01PLPBNMEI@M@
$LN97@draw_weapo:
  00e4d	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv483[ebp]
  00e53	89 45 80	 mov	 DWORD PTR _s_ptr$[ebp], eax
$LN27@draw_weapo:

; 6017 : 
; 6018 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00e56	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00e59	50		 push	 eax
  00e5a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00e5f	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1687[ebp]
  00e65	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1687[ebp]
  00e6d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00e75	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e79	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6019 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00e81	51		 push	 ecx
  00e82	0f 57 c0	 xorps	 xmm0, xmm0
  00e85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e8a	51		 push	 ecx
  00e8b	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00e93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e98	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6020 : 	print_mono_font_string (s_ptr);

  00e9d	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00ea0	50		 push	 eax
  00ea1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6021 : 
; 6022 : 	// master arm box
; 6023 : 
; 6024 : 	set_2d_mono_font_position (0.0, 0.89);

  00ea6	51		 push	 ecx
  00ea7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f63d70a
  00eaf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb4	51		 push	 ecx
  00eb5	0f 57 c0	 xorps	 xmm0, xmm0
  00eb8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ebd	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6025 : 
; 6026 : 	if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00ec2	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  00ec9	0f 84 e6 03 00
	00		 je	 $LN28@draw_weapo

; 6027 : 	{
; 6028 : 		draw_box(-0.25, 0.7, 0.25, 1.0, TRUE, MFD_COLOUR1);

  00ecf	b8 04 00 00 00	 mov	 eax, 4
  00ed4	6b c8 00	 imul	 ecx, eax, 0
  00ed7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00edd	52		 push	 edx
  00ede	6a 01		 push	 1
  00ee0	51		 push	 ecx
  00ee1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ee9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eee	51		 push	 ecx
  00eef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00ef7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00efc	51		 push	 ecx
  00efd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00f05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f0a	51		 push	 ecx
  00f0b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00f13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f18	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6029 : 
; 6030 : 		set_mono_font_colour (MFD_CLEAR_COLOUR);

  00f1d	b8 04 00 00 00	 mov	 eax, 4
  00f22	6b c8 0a	 imul	 ecx, eax, 10
  00f25	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f2b	52		 push	 edx
  00f2c	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6031 : 		s_ptr = draw_large_mfd ? "ARM" : "A";

  00f31	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f38	74 0c		 je	 SHORT $LN98@draw_weapo
  00f3a	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv507[ebp], OFFSET ??_C@_03NHPMNECN@ARM@
  00f44	eb 0a		 jmp	 SHORT $LN99@draw_weapo
$LN98@draw_weapo:
  00f46	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv507[ebp], OFFSET ??_C@_01FHEEJDEE@A@
$LN99@draw_weapo:
  00f50	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv507[ebp]
  00f56	89 45 80	 mov	 DWORD PTR _s_ptr$[ebp], eax

; 6032 : 
; 6033 : 		draw_box(-0.14, 0.93,-0.09, 1.00, TRUE, MFD_CLEAR_COLOUR);	

  00f59	b8 04 00 00 00	 mov	 eax, 4
  00f5e	6b c8 0a	 imul	 ecx, eax, 10
  00f61	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f67	52		 push	 edx
  00f68	6a 01		 push	 1
  00f6a	51		 push	 ecx
  00f6b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f78	51		 push	 ecx
  00f79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb851ec
  00f81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f86	51		 push	 ecx
  00f87	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  00f8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f94	51		 push	 ecx
  00f95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  00f9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa2	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6034 : 		draw_box(-0.03, 0.93, 0.03, 1.00, TRUE, MFD_CLEAR_COLOUR);	

  00fa7	b8 04 00 00 00	 mov	 eax, 4
  00fac	6b c8 0a	 imul	 ecx, eax, 10
  00faf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fb5	52		 push	 edx
  00fb6	6a 01		 push	 1
  00fb8	51		 push	 ecx
  00fb9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00fc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc6	51		 push	 ecx
  00fc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  00fcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd4	51		 push	 ecx
  00fd5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  00fdd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe2	51		 push	 ecx
  00fe3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  00feb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff0	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6035 : 		draw_box( 0.10, 0.93, 0.15, 1.00, TRUE, MFD_CLEAR_COLOUR);	

  00ff5	b8 04 00 00 00	 mov	 eax, 4
  00ffa	6b c8 0a	 imul	 ecx, eax, 10
  00ffd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01003	52		 push	 edx
  01004	6a 01		 push	 1
  01006	51		 push	 ecx
  01007	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0100f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01014	51		 push	 ecx
  01015	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0101d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01022	51		 push	 ecx
  01023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  0102b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01030	51		 push	 ecx
  01031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103e	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6036 : 		draw_box(-0.25, 0.93,-0.19, 0.88, TRUE, MFD_CLEAR_COLOUR);	

  01043	b8 04 00 00 00	 mov	 eax, 4
  01048	6b c8 0a	 imul	 ecx, eax, 10
  0104b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01051	52		 push	 edx
  01052	6a 01		 push	 1
  01054	51		 push	 ecx
  01055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6147ae
  0105d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01062	51		 push	 ecx
  01063	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be428f5c
  0106b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01070	51		 push	 ecx
  01071	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107e	51		 push	 ecx
  0107f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108c	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6037 : 		draw_box(-0.25, 0.77,-0.19, 0.82, TRUE, MFD_CLEAR_COLOUR);	

  01091	b8 04 00 00 00	 mov	 eax, 4
  01096	6b c8 0a	 imul	 ecx, eax, 10
  01099	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0109f	52		 push	 edx
  010a0	6a 01		 push	 1
  010a2	51		 push	 ecx
  010a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  010ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b0	51		 push	 ecx
  010b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be428f5c
  010b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010be	51		 push	 ecx
  010bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  010c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010cc	51		 push	 ecx
  010cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  010d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010da	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6038 : 		draw_box( 0.25, 0.93, 0.19, 0.88, TRUE, MFD_CLEAR_COLOUR);	

  010df	b8 04 00 00 00	 mov	 eax, 4
  010e4	6b c8 0a	 imul	 ecx, eax, 10
  010e7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010ed	52		 push	 edx
  010ee	6a 01		 push	 1
  010f0	51		 push	 ecx
  010f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6147ae
  010f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010fe	51		 push	 ecx
  010ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  01107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110c	51		 push	 ecx
  0110d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0111a	51		 push	 ecx
  0111b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01128	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6039 : 		draw_box( 0.25, 0.77, 0.19, 0.82, TRUE, MFD_CLEAR_COLOUR);	

  0112d	b8 04 00 00 00	 mov	 eax, 4
  01132	6b c8 0a	 imul	 ecx, eax, 10
  01135	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0113b	52		 push	 edx
  0113c	6a 01		 push	 1
  0113e	51		 push	 ecx
  0113f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  01147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0114c	51		 push	 ecx
  0114d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  01155	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0115a	51		 push	 ecx
  0115b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  01163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01168	51		 push	 ecx
  01169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01176	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6040 : 		draw_box(-0.14, 0.77,-0.09, 0.70, TRUE, MFD_CLEAR_COLOUR);	

  0117b	b8 04 00 00 00	 mov	 eax, 4
  01180	6b c8 0a	 imul	 ecx, eax, 10
  01183	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01189	52		 push	 edx
  0118a	6a 01		 push	 1
  0118c	51		 push	 ecx
  0118d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0119a	51		 push	 ecx
  0119b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb851ec
  011a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011a8	51		 push	 ecx
  011a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  011b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b6	51		 push	 ecx
  011b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  011bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c4	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6041 : 		draw_box(-0.03, 0.77, 0.03, 0.70, TRUE, MFD_CLEAR_COLOUR);	

  011c9	b8 04 00 00 00	 mov	 eax, 4
  011ce	6b c8 0a	 imul	 ecx, eax, 10
  011d1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011d7	52		 push	 edx
  011d8	6a 01		 push	 1
  011da	51		 push	 ecx
  011db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  011e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e8	51		 push	 ecx
  011e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  011f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f6	51		 push	 ecx
  011f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  011ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01204	51		 push	 ecx
  01205	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  0120d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01212	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6042 : 		draw_box( 0.10, 0.77, 0.15, 0.70, TRUE, MFD_CLEAR_COLOUR);

  01217	b8 04 00 00 00	 mov	 eax, 4
  0121c	6b c8 0a	 imul	 ecx, eax, 10
  0121f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01225	52		 push	 edx
  01226	6a 01		 push	 1
  01228	51		 push	 ecx
  01229	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01236	51		 push	 ecx
  01237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0123f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01244	51		 push	 ecx
  01245	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  0124d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01252	51		 push	 ecx
  01253	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0125b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01260	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6043 : 
; 6044 : 		draw_box(-0.25, 0.7, 0.25, 1.0, FALSE, MFD_COLOUR1);

  01265	b8 04 00 00 00	 mov	 eax, 4
  0126a	6b c8 00	 imul	 ecx, eax, 0
  0126d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01273	52		 push	 edx
  01274	6a 00		 push	 0
  01276	51		 push	 ecx
  01277	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0127f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01284	51		 push	 ecx
  01285	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0128d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01292	51		 push	 ecx
  01293	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0129b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012a0	51		 push	 ecx
  012a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  012a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ae	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6045 : 	}
; 6046 : 	else

  012b3	eb 76		 jmp	 SHORT $LN29@draw_weapo
$LN28@draw_weapo:

; 6047 : 	{
; 6048 : 		draw_box(-0.25, 0.7, 0.25, 1.0, FALSE, MFD_COLOUR1);

  012b5	b8 04 00 00 00	 mov	 eax, 4
  012ba	6b c8 00	 imul	 ecx, eax, 0
  012bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012c3	52		 push	 edx
  012c4	6a 00		 push	 0
  012c6	51		 push	 ecx
  012c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  012cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d4	51		 push	 ecx
  012d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  012dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012e2	51		 push	 ecx
  012e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  012eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012f0	51		 push	 ecx
  012f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  012f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012fe	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6049 : 		s_ptr = draw_large_mfd ? "SAFE" : "S";

  01303	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0130a	74 0c		 je	 SHORT $LN100@draw_weapo
  0130c	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv605[ebp], OFFSET ??_C@_04JMNPMIJD@SAFE@
  01316	eb 0a		 jmp	 SHORT $LN101@draw_weapo
$LN100@draw_weapo:
  01318	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv605[ebp], OFFSET ??_C@_01CPLAODJH@S@
$LN101@draw_weapo:
  01322	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv605[ebp]
  01328	89 45 80	 mov	 DWORD PTR _s_ptr$[ebp], eax
$LN29@draw_weapo:

; 6050 : 	}
; 6051 : 
; 6052 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  0132b	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  0132e	50		 push	 eax
  0132f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01334	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1836[ebp]
  0133a	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1836[ebp]
  01342	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0134a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0134e	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6053 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01356	51		 push	 ecx
  01357	0f 57 c0	 xorps	 xmm0, xmm0
  0135a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135f	51		 push	 ecx
  01360	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01368	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0136d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6054 : 	print_mono_font_string (s_ptr);

  01372	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01375	50		 push	 eax
  01376	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6055 : 
; 6056 : 	// targeting system
; 6057 : 	draw_box(-0.85, 0.8, -0.4, 0.55, FALSE, MFD_COLOUR1);

  0137b	b8 04 00 00 00	 mov	 eax, 4
  01380	6b c8 00	 imul	 ecx, eax, 0
  01383	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01389	52		 push	 edx
  0138a	6a 00		 push	 0
  0138c	51		 push	 ecx
  0138d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  01395	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0139a	51		 push	 ecx
  0139b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  013a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a8	51		 push	 ecx
  013a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  013b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013b6	51		 push	 ecx
  013b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  013bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c4	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6058 : 
; 6059 : 	set_2d_mono_font_position (-0.63, 0.7);

  013c9	51		 push	 ecx
  013ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  013d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d7	51		 push	 ecx
  013d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  013e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6060 : 	set_mono_font_colour (MFD_COLOUR1);

  013ea	b8 04 00 00 00	 mov	 eax, 4
  013ef	6b c8 00	 imul	 ecx, eax, 0
  013f2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013f8	52		 push	 edx
  013f9	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6061 : 
; 6062 : 	switch (target_acquisition_system)

  013fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  01403	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv627[ebp], eax
  01409	83 bd d4 fe ff
	ff 03		 cmp	 DWORD PTR tv627[ebp], 3
  01410	7c 26		 jl	 SHORT $LN32@draw_weapo
  01412	83 bd d4 fe ff
	ff 04		 cmp	 DWORD PTR tv627[ebp], 4
  01419	7e 0b		 jle	 SHORT $LN30@draw_weapo
  0141b	83 bd d4 fe ff
	ff 09		 cmp	 DWORD PTR tv627[ebp], 9
  01422	74 0b		 je	 SHORT $LN31@draw_weapo
  01424	eb 12		 jmp	 SHORT $LN32@draw_weapo
$LN30@draw_weapo:

; 6063 : 	{
; 6064 : 	case TARGET_ACQUISITION_SYSTEM_FLIR:
; 6065 : 	case TARGET_ACQUISITION_SYSTEM_DTV:
; 6066 : 		s_ptr = "TADS";

  01426	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 6067 : 		break;

  0142d	eb 10		 jmp	 SHORT $LN2@draw_weapo
$LN31@draw_weapo:

; 6068 : 	case TARGET_ACQUISITION_SYSTEM_HIDSS:
; 6069 : 		s_ptr = "HIDSS";

  0142f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05BDMPLNHB@HIDSS@

; 6070 : 		break;

  01436	eb 07		 jmp	 SHORT $LN2@draw_weapo
$LN32@draw_weapo:

; 6071 : 	case TARGET_ACQUISITION_SYSTEM_OFF:
; 6072 : 	default:
; 6073 : 		s_ptr = "NONE";

  01438	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04OKGDLNCL@NONE@
$LN2@draw_weapo:

; 6074 : 		break;
; 6075 : 	}
; 6076 : 
; 6077 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  0143f	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01442	50		 push	 eax
  01443	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01448	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1864[ebp]
  0144e	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1864[ebp]
  01456	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0145e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01462	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6078 : 	set_mono_font_rel_position (x_adjust, 0.0);

  0146a	51		 push	 ecx
  0146b	0f 57 c0	 xorps	 xmm0, xmm0
  0146e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01473	51		 push	 ecx
  01474	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0147c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01481	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6079 : 	print_mono_font_string (s_ptr);

  01486	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01489	50		 push	 eax
  0148a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6080 : 
; 6081 : 	// range finding system
; 6082 : 	draw_box(0.85, 0.8, 0.4, 0.55, FALSE, MFD_COLOUR1);

  0148f	b8 04 00 00 00	 mov	 eax, 4
  01494	6b c8 00	 imul	 ecx, eax, 0
  01497	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0149d	52		 push	 edx
  0149e	6a 00		 push	 0
  014a0	51		 push	 ecx
  014a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  014a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ae	51		 push	 ecx
  014af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  014b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014bc	51		 push	 ecx
  014bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  014c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ca	51		 push	 ecx
  014cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  014d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d8	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6083 : 
; 6084 : 	set_2d_mono_font_position (0.64, 0.7);

  014dd	51		 push	 ecx
  014de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  014e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014eb	51		 push	 ecx
  014ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f23d70a
  014f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014f9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6085 : 
; 6086 : 	switch (get_range_finder())

  014fe	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  01503	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv650[ebp], eax
  01509	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR tv650[ebp], 0
  01510	74 0b		 je	 SHORT $LN33@draw_weapo
  01512	83 bd d4 fe ff
	ff 01		 cmp	 DWORD PTR tv650[ebp], 1
  01519	74 0b		 je	 SHORT $LN34@draw_weapo
  0151b	eb 12		 jmp	 SHORT $LN35@draw_weapo
$LN33@draw_weapo:

; 6087 : 	{
; 6088 : 	case RANGEFINDER_FCR:
; 6089 : 		s_ptr = "FCR";

  0151d	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 6090 : 		break;

  01524	eb 10		 jmp	 SHORT $LN4@draw_weapo
$LN34@draw_weapo:

; 6091 : 	case RANGEFINDER_LASER:
; 6092 : 		s_ptr = "LRF";

  01526	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03MGGCNFDL@LRF@

; 6093 : 		break;

  0152d	eb 07		 jmp	 SHORT $LN4@draw_weapo
$LN35@draw_weapo:

; 6094 : 	case RANGEFINDER_TRIANGULATION:
; 6095 : 	default:
; 6096 : 		s_ptr = "TRNGL";

  0152f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05MJCDDMFE@TRNGL@
$LN4@draw_weapo:

; 6097 : 		break;
; 6098 : 	}
; 6099 : 
; 6100 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  01536	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01539	50		 push	 eax
  0153a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0153f	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1890[ebp]
  01545	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1890[ebp]
  0154d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01555	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01559	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6101 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01561	51		 push	 ecx
  01562	0f 57 c0	 xorps	 xmm0, xmm0
  01565	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0156a	51		 push	 ecx
  0156b	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01573	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01578	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6102 : 	print_mono_font_string (s_ptr);

  0157d	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01580	50		 push	 eax
  01581	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6103 : 
; 6104 : 	// launch mode
; 6105 : 	draw_box(-0.9, 0.45, -0.45, 0.2, FALSE, MFD_COLOUR1);

  01586	b8 04 00 00 00	 mov	 eax, 4
  0158b	6b c8 00	 imul	 ecx, eax, 0
  0158e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01594	52		 push	 edx
  01595	6a 00		 push	 0
  01597	51		 push	 ecx
  01598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  015a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a5	51		 push	 ecx
  015a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  015ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b3	51		 push	 ecx
  015b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  015bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015c1	51		 push	 ecx
  015c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  015ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015cf	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6106 : 
; 6107 : 	set_2d_mono_font_position (-0.65, 0.35);

  015d4	51		 push	 ecx
  015d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  015dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015e2	51		 push	 ecx
  015e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  015eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015f0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6108 : 
; 6109 : 	if (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_LOCK_ON_AFTER_LAUNCH))

  015f5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  015fc	74 0f		 je	 SHORT $LN102@draw_weapo
  015fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01603	8b 08		 mov	 ecx, DWORD PTR [eax]
  01605	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv708[ebp], ecx
  0160b	eb 20		 jmp	 SHORT $LN103@draw_weapo
$LN102@draw_weapo:
  0160d	68 dd 17 00 00	 push	 6109			; 000017ddH
  01612	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01617	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0161d	52		 push	 edx
  0161e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01623	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv708[ebp], 0
$LN103@draw_weapo:
  0162d	b8 01 00 00 00	 mov	 eax, 1
  01632	85 c0		 test	 eax, eax
  01634	74 0c		 je	 SHORT $LN104@draw_weapo
  01636	c7 85 d0 fe ff
	ff 7e 00 00 00	 mov	 DWORD PTR tv715[ebp], 126 ; 0000007eH
  01640	eb 20		 jmp	 SHORT $LN105@draw_weapo
$LN104@draw_weapo:
  01642	68 dd 17 00 00	 push	 6109			; 000017ddH
  01647	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0164c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01652	51		 push	 ecx
  01653	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01658	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv715[ebp], 0
$LN105@draw_weapo:
  01662	6a 7e		 push	 126			; 0000007eH
  01664	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0166a	52		 push	 edx
  0166b	69 85 d4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv708[ebp], 1116
  01675	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv715[ebp]
  0167b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01682	ff d2		 call	 edx
  01684	85 c0		 test	 eax, eax
  01686	74 09		 je	 SHORT $LN36@draw_weapo

; 6110 : 		s_ptr = "LOAL";

  01688	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04EKDNBCDP@LOAL@

; 6111 : 	else

  0168f	eb 07		 jmp	 SHORT $LN37@draw_weapo
$LN36@draw_weapo:

; 6112 : 		s_ptr = "LOBL";

  01691	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04EIHLKMGG@LOBL@
$LN37@draw_weapo:

; 6113 : 
; 6114 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  01698	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  0169b	50		 push	 eax
  0169c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  016a1	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1924[ebp]
  016a7	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1924[ebp]
  016af	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  016b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016bb	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6115 : 	set_mono_font_rel_position (x_adjust, 0.0);

  016c3	51		 push	 ecx
  016c4	0f 57 c0	 xorps	 xmm0, xmm0
  016c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016cc	51		 push	 ecx
  016cd	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  016d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016da	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6116 : 	print_mono_font_string (s_ptr);

  016df	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  016e2	50		 push	 eax
  016e3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6117 : 
; 6118 : 	// rocket salve
; 6119 : 	draw_box(0.9, 0.45, 0.45, 0.2, FALSE, MFD_COLOUR1);

  016e8	b8 04 00 00 00	 mov	 eax, 4
  016ed	6b c8 00	 imul	 ecx, eax, 0
  016f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016f6	52		 push	 edx
  016f7	6a 00		 push	 0
  016f9	51		 push	 ecx
  016fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01702	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01707	51		 push	 ecx
  01708	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  01710	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01715	51		 push	 ecx
  01716	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  0171e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01723	51		 push	 ecx
  01724	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0172c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01731	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 6120 : 
; 6121 : 	set_2d_mono_font_position (0.67, 0.42);

  01736	51		 push	 ecx
  01737	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  0173f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01744	51		 push	 ecx
  01745	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  0174d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01752	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6122 : 	s_ptr = draw_large_mfd ? "SALVO" : "S";

  01757	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0175e	74 0c		 je	 SHORT $LN106@draw_weapo
  01760	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv741[ebp], OFFSET ??_C@_05GPKGLDLB@SALVO@
  0176a	eb 0a		 jmp	 SHORT $LN107@draw_weapo
$LN106@draw_weapo:
  0176c	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv741[ebp], OFFSET ??_C@_01CPLAODJH@S@
$LN107@draw_weapo:
  01776	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv741[ebp]
  0177c	89 45 80	 mov	 DWORD PTR _s_ptr$[ebp], eax

; 6123 : 
; 6124 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  0177f	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01782	50		 push	 eax
  01783	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01788	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1950[ebp]
  0178e	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1950[ebp]
  01796	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0179e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017a2	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6125 : 	set_mono_font_rel_position (x_adjust, 0.0);

  017aa	51		 push	 ecx
  017ab	0f 57 c0	 xorps	 xmm0, xmm0
  017ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b3	51		 push	 ecx
  017b4	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  017bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017c1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6126 : 	print_mono_font_string (s_ptr);

  017c6	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  017c9	50		 push	 eax
  017ca	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6127 : 
; 6128 : 	set_2d_mono_font_position (0.67, 0.31);

  017cf	51		 push	 ecx
  017d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e9eb852
  017d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017dd	51		 push	 ecx
  017de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  017e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017eb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6129 : 	if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  017f0	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  017fa	75 13		 jne	 SHORT $LN38@draw_weapo

; 6130 : 		sprintf(s, "ALL");

  017fc	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  01801	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01804	50		 push	 eax
  01805	e8 00 00 00 00	 call	 _sprintf
  0180a	83 c4 08	 add	 esp, 8

; 6131 : 	else

  0180d	eb 17		 jmp	 SHORT $LN39@draw_weapo
$LN38@draw_weapo:

; 6132 : 		sprintf(s, "%2d", rocket_salvo_size);

  0180f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  01814	50		 push	 eax
  01815	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  0181a	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  0181d	51		 push	 ecx
  0181e	e8 00 00 00 00	 call	 _sprintf
  01823	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN39@draw_weapo:

; 6133 : 
; 6134 : 	x_adjust = get_mono_font_string_width (s) * -0.6;

  01826	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01829	50		 push	 eax
  0182a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0182f	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1968[ebp]
  01835	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1968[ebp]
  0183d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe3333333333333
  01845	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01849	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6135 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01851	51		 push	 ecx
  01852	0f 57 c0	 xorps	 xmm0, xmm0
  01855	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0185a	51		 push	 ecx
  0185b	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01863	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01868	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6136 : 	print_mono_font_string (s);

  0186d	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01870	50		 push	 eax
  01871	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6137 : 
; 6138 : 	// weapon pylons
; 6139 : 	for (pylon = VIPER_LHS_INNER_PYLON; pylon <= VIPER_RHS_WING_TIP_MOUNT; pylon++)

  01876	c7 85 6c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _pylon$[ebp], 1
  01880	eb 0f		 jmp	 SHORT $LN8@draw_weapo
$LN6@draw_weapo:
  01882	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  01888	83 c0 01	 add	 eax, 1
  0188b	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pylon$[ebp], eax
$LN8@draw_weapo:
  01891	83 bd 6c ff ff
	ff 06		 cmp	 DWORD PTR _pylon$[ebp], 6
  01898	0f 8f a4 0e 00
	00		 jg	 $LN7@draw_weapo

; 6140 : 	{
; 6141 : 		float pylon_x, pylon_y;
; 6142 : 
; 6143 : 		pylon_y = -0.35;

  0189e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  018a6	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _pylon_y$18[ebp], xmm0

; 6144 : 
; 6145 : 		switch (pylon)

  018ae	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  018b4	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv768[ebp], eax
  018ba	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv768[ebp]
  018c0	83 e9 01	 sub	 ecx, 1
  018c3	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv768[ebp], ecx
  018c9	83 bd d4 fe ff
	ff 05		 cmp	 DWORD PTR tv768[ebp], 5
  018d0	77 77		 ja	 SHORT $LN9@draw_weapo
  018d2	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR tv768[ebp]
  018d8	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN117@draw_weapo[edx*4]
$LN40@draw_weapo:

; 6146 : 		{
; 6147 : 		case VIPER_LHS_INNER_PYLON:
; 6148 : 			pylon_x = -0.42;

  018df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  018e7	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 6149 : 			break;

  018ef	eb 58		 jmp	 SHORT $LN9@draw_weapo
$LN41@draw_weapo:

; 6150 : 		case VIPER_RHS_INNER_PYLON:
; 6151 : 			pylon_x = 0.42;

  018f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  018f9	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 6152 : 			break;

  01901	eb 46		 jmp	 SHORT $LN9@draw_weapo
$LN42@draw_weapo:

; 6153 : 		case VIPER_LHS_OUTER_PYLON:
; 6154 : 			pylon_x = -0.74;

  01903	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  0190b	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 6155 : 			break;

  01913	eb 34		 jmp	 SHORT $LN9@draw_weapo
$LN43@draw_weapo:

; 6156 : 		case VIPER_RHS_OUTER_PYLON:
; 6157 : 			pylon_x = 0.74;

  01915	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3d70a4
  0191d	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 6158 : 			break;

  01925	eb 22		 jmp	 SHORT $LN9@draw_weapo
$LN44@draw_weapo:

; 6159 : 		case VIPER_LHS_WING_TIP_MOUNT:
; 6160 : 			pylon_x = -0.97;

  01927	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7851ec
  0192f	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 6161 : 			break;

  01937	eb 10		 jmp	 SHORT $LN9@draw_weapo
$LN45@draw_weapo:

; 6162 : 		case VIPER_RHS_WING_TIP_MOUNT:
; 6163 : 			pylon_x = 0.97;

  01939	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7851ec
  01941	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0
$LN9@draw_weapo:

; 6164 : 			break;
; 6165 : 		}
; 6166 : 
; 6167 : 		if (get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  01949	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  0194f	50		 push	 eax
  01950	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  01956	51		 push	 ecx
  01957	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0195d	52		 push	 edx
  0195e	6a 00		 push	 0
  01960	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  01966	50		 push	 eax
  01967	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0196d	51		 push	 ecx
  0196e	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01973	85 c0		 test	 eax, eax
  01975	0f 84 c2 0d 00
	00		 je	 $LN77@draw_weapo

; 6168 : 			pylon, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON,
; 6169 : 			&weapon_sub_type, &number, &damaged))
; 6170 : 		{
; 6171 : 			switch (weapon_sub_type)

  0197b	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01981	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv779[ebp], eax
  01987	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv779[ebp]
  0198d	83 e9 1e	 sub	 ecx, 30			; 0000001eH
  01990	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv779[ebp], ecx
  01996	83 bd d4 fe ff
	ff 10		 cmp	 DWORD PTR tv779[ebp], 16 ; 00000010H
  0199d	0f 87 cc 0b 00
	00		 ja	 $LN11@draw_weapo
  019a3	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR tv779[ebp]
  019a9	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN116@draw_weapo[edx]
  019b0	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN118@draw_weapo[eax*4]
$LN47@draw_weapo:

; 6172 : 			{
; 6173 : 			case ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE:
; 6174 : 			case ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II:
; 6175 : 			{
; 6176 : 				int i;
; 6177 : 				float last_offset;  // is last missile on the left or right side of pylon
; 6178 : 
; 6179 : 				if (pylon == VIPER_LHS_INNER_PYLON || pylon == VIPER_LHS_OUTER_PYLON)

  019b7	83 bd 6c ff ff
	ff 01		 cmp	 DWORD PTR _pylon$[ebp], 1
  019be	74 09		 je	 SHORT $LN50@draw_weapo
  019c0	83 bd 6c ff ff
	ff 03		 cmp	 DWORD PTR _pylon$[ebp], 3
  019c7	75 12		 jne	 SHORT $LN48@draw_weapo
$LN50@draw_weapo:

; 6180 : 					last_offset = 0.07;

  019c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d8f5c29
  019d1	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _last_offset$16[ebp], xmm0

; 6181 : 				else

  019d9	eb 10		 jmp	 SHORT $LN49@draw_weapo
$LN48@draw_weapo:

; 6182 : 					last_offset = -0.07;

  019db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd8f5c29
  019e3	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _last_offset$16[ebp], xmm0
$LN49@draw_weapo:

; 6183 : 
; 6184 : 				for (i = 1; i <= number; i++)

  019eb	c7 85 58 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _i$17[ebp], 1
  019f5	eb 0f		 jmp	 SHORT $LN15@draw_weapo
$LN13@draw_weapo:
  019f7	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  019fd	83 c0 01	 add	 eax, 1
  01a00	89 85 58 ff ff
	ff		 mov	 DWORD PTR _i$17[ebp], eax
$LN15@draw_weapo:
  01a06	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  01a0c	3b 85 78 ff ff
	ff		 cmp	 eax, DWORD PTR _number$[ebp]
  01a12	0f 8f 70 03 00
	00		 jg	 $LN14@draw_weapo

; 6185 : 				{
; 6186 : 					float missile_x, missile_y;
; 6187 : 					
; 6188 : 					switch (i)

  01a18	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  01a1e	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv784[ebp], eax
  01a24	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv784[ebp]
  01a2a	83 e9 01	 sub	 ecx, 1
  01a2d	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv784[ebp], ecx
  01a33	83 bd d4 fe ff
	ff 03		 cmp	 DWORD PTR tv784[ebp], 3
  01a3a	0f 87 eb 00 00
	00		 ja	 $LN55@draw_weapo
  01a40	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR tv784[ebp]
  01a46	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN119@draw_weapo[edx*4]
$LN51@draw_weapo:

; 6189 : 					{
; 6190 : 						case 1:
; 6191 : 							missile_x = pylon_x + last_offset;

  01a4d	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  01a55	f3 0f 58 85 54
	ff ff ff	 addss	 xmm0, DWORD PTR _last_offset$16[ebp]
  01a5d	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 6192 : 							missile_y = pylon_y - 0.18;

  01a65	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01a6d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  01a75	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a79	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 6193 : 							break;

  01a81	e9 c8 00 00 00	 jmp	 $LN16@draw_weapo
$LN52@draw_weapo:

; 6194 : 						case 2:
; 6195 : 							missile_x = pylon_x - last_offset;

  01a86	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  01a8e	f3 0f 5c 85 54
	ff ff ff	 subss	 xmm0, DWORD PTR _last_offset$16[ebp]
  01a96	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 6196 : 							missile_y = pylon_y - 0.18;

  01a9e	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01aa6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  01aae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ab2	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 6197 : 							break;

  01aba	e9 8f 00 00 00	 jmp	 $LN16@draw_weapo
$LN53@draw_weapo:

; 6198 : 						case 3:
; 6199 : 							missile_x = pylon_x + last_offset;

  01abf	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  01ac7	f3 0f 58 85 54
	ff ff ff	 addss	 xmm0, DWORD PTR _last_offset$16[ebp]
  01acf	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 6200 : 							missile_y = pylon_y + 0.22;

  01ad7	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01adf	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcc28f5c28f5c29
  01ae7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01aeb	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 6201 : 							break;

  01af3	eb 59		 jmp	 SHORT $LN16@draw_weapo
$LN54@draw_weapo:

; 6202 : 						case 4:
; 6203 : 							missile_x = pylon_x - last_offset;

  01af5	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  01afd	f3 0f 5c 85 54
	ff ff ff	 subss	 xmm0, DWORD PTR _last_offset$16[ebp]
  01b05	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 6204 : 							missile_y = pylon_y + 0.22;

  01b0d	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01b15	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcc28f5c28f5c29
  01b1d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b21	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 6205 : 							break;

  01b29	eb 23		 jmp	 SHORT $LN16@draw_weapo
$LN55@draw_weapo:

; 6206 : 						default:
; 6207 : 							ASSERT(!"more than 4 hellfires on Viper pylon");

  01b2b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CF@LHBBDA@more?5than?54?5hellfires?5on?5Viper?5@
  01b30	85 c0		 test	 eax, eax
  01b32	74 1a		 je	 SHORT $LN56@draw_weapo
  01b34	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  01b39	05 68 01 00 00	 add	 eax, 360		; 00000168H
  01b3e	50		 push	 eax
  01b3f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b44	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@JHPKLNBL@?$CB?$CCmore?5than?54?5hellfires?5on?5Vipe@
  01b49	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN56@draw_weapo:
$LN16@draw_weapo:

; 6208 : 					}
; 6209 : 
; 6210 : 					// remove wing
; 6211 : 					get_2d_float_screen_x_coordinate(missile_x + 0.06, &x1);

  01b4e	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  01b51	50		 push	 eax
  01b52	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_x$15[ebp]
  01b5a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  01b62	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b66	51		 push	 ecx
  01b67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b6c	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6212 : 					get_2d_float_screen_x_coordinate(missile_x - 0.06, &x2);

  01b71	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  01b74	50		 push	 eax
  01b75	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_x$15[ebp]
  01b7d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  01b85	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b89	51		 push	 ecx
  01b8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b8f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6213 : 	
; 6214 : 					if (missile_y > pylon_y)

  01b94	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$14[ebp]
  01b9c	0f 2f 85 5c ff
	ff ff		 comiss	 xmm0, DWORD PTR _pylon_y$18[ebp]
  01ba3	76 42		 jbe	 SHORT $LN57@draw_weapo

; 6215 : 						draw_line(x1, forward_wing, x2, forward_wing, MFD_CLEAR_COLOUR);

  01ba5	b8 04 00 00 00	 mov	 eax, 4
  01baa	6b c8 0a	 imul	 ecx, eax, 10
  01bad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bb3	52		 push	 edx
  01bb4	51		 push	 ecx
  01bb5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbf	51		 push	 ecx
  01bc0	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01bc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bca	51		 push	 ecx
  01bcb	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01bd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bd5	51		 push	 ecx
  01bd6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01bdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6216 : 					else

  01be5	eb 40		 jmp	 SHORT $LN58@draw_weapo
$LN57@draw_weapo:

; 6217 : 						draw_line(x1, rear_wing, x2, rear_wing, MFD_CLEAR_COLOUR);

  01be7	b8 04 00 00 00	 mov	 eax, 4
  01bec	6b c8 0a	 imul	 ecx, eax, 10
  01bef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bf5	52		 push	 edx
  01bf6	51		 push	 ecx
  01bf7	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01bfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c01	51		 push	 ecx
  01c02	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01c07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0c	51		 push	 ecx
  01c0d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01c12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c17	51		 push	 ecx
  01c18	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01c1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c22	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN58@draw_weapo:

; 6218 : 		
; 6219 : 					// draw missile
; 6220 : 					if ((weapon_sub_type == selected_weapon) && !damaged)

  01c27	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c2d	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c33	75 54		 jne	 SHORT $LN59@draw_weapo
  01c35	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  01c3c	75 4b		 jne	 SHORT $LN59@draw_weapo

; 6221 : 					{
; 6222 : 						draw_2d_mono_sprite(inverted_hellfire_missile_data, missile_x, missile_y, MFD_COLOUR1);

  01c3e	b8 04 00 00 00	 mov	 eax, 4
  01c43	6b c8 00	 imul	 ecx, eax, 0
  01c46	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c4c	52		 push	 edx
  01c4d	51		 push	 ecx
  01c4e	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$14[ebp]
  01c56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c5b	51		 push	 ecx
  01c5c	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$15[ebp]
  01c64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c69	68 00 00 00 00	 push	 OFFSET ?inverted_hellfire_missile_data@@3PADA
  01c6e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6223 : 						set_mono_font_colour (MFD_CLEAR_COLOUR);

  01c73	b8 04 00 00 00	 mov	 eax, 4
  01c78	6b c8 0a	 imul	 ecx, eax, 10
  01c7b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c81	52		 push	 edx
  01c82	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6224 : 					}
; 6225 : 					else

  01c87	eb 49		 jmp	 SHORT $LN60@draw_weapo
$LN59@draw_weapo:

; 6226 : 					{
; 6227 : 						draw_2d_mono_sprite(hellfire_missile_data, missile_x, missile_y, MFD_COLOUR1);

  01c89	b8 04 00 00 00	 mov	 eax, 4
  01c8e	6b c8 00	 imul	 ecx, eax, 0
  01c91	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c97	52		 push	 edx
  01c98	51		 push	 ecx
  01c99	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$14[ebp]
  01ca1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ca6	51		 push	 ecx
  01ca7	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$15[ebp]
  01caf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cb4	68 00 00 00 00	 push	 OFFSET ?hellfire_missile_data@@3PADA
  01cb9	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6228 : 						set_mono_font_colour (MFD_COLOUR1);

  01cbe	b8 04 00 00 00	 mov	 eax, 4
  01cc3	6b c8 00	 imul	 ecx, eax, 0
  01cc6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ccc	52		 push	 edx
  01ccd	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN60@draw_weapo:

; 6229 : 					}
; 6230 : 					set_mono_font_type (MONO_FONT_TYPE_7X12);

  01cd2	6a 05		 push	 5
  01cd4	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6231 : 					set_2d_mono_font_position (missile_x, missile_y-0.05);

  01cd9	f3 0f 5a 85 4c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_y$14[ebp]
  01ce1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01ce9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ced	51		 push	 ecx
  01cee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cf3	51		 push	 ecx
  01cf4	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$15[ebp]
  01cfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d01	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6232 : 		
; 6233 : 					if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE)

  01d06	83 bd 68 ff ff
	ff 2d		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 45 ; 0000002dH
  01d0d	75 13		 jne	 SHORT $LN61@draw_weapo

; 6234 : 						sprintf(s, "R");

  01d0f	68 00 00 00 00	 push	 OFFSET ??_C@_01DGKLNCNG@R@
  01d14	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01d17	50		 push	 eax
  01d18	e8 00 00 00 00	 call	 _sprintf
  01d1d	83 c4 08	 add	 esp, 8

; 6235 : 					else

  01d20	eb 11		 jmp	 SHORT $LN62@draw_weapo
$LN61@draw_weapo:

; 6236 : 						sprintf(s, "L");

  01d22	68 00 00 00 00	 push	 OFFSET ??_C@_01OCOKONAJ@L@
  01d27	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01d2a	50		 push	 eax
  01d2b	e8 00 00 00 00	 call	 _sprintf
  01d30	83 c4 08	 add	 esp, 8
$LN62@draw_weapo:

; 6237 : 
; 6238 : 					x_adjust = get_mono_font_string_width (s) * -0.4;

  01d33	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01d36	50		 push	 eax
  01d37	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01d3c	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv2060[ebp]
  01d42	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2060[ebp]
  01d4a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  01d52	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d56	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6239 : 					set_mono_font_rel_position (x_adjust, 0.0);

  01d5e	51		 push	 ecx
  01d5f	0f 57 c0	 xorps	 xmm0, xmm0
  01d62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d67	51		 push	 ecx
  01d68	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01d70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d75	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6240 : 					print_mono_font_string (s);

  01d7a	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01d7d	50		 push	 eax
  01d7e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6241 : 				}

  01d83	e9 6f fc ff ff	 jmp	 $LN13@draw_weapo
$LN14@draw_weapo:

; 6242 : 				break;

  01d88	e9 e2 07 00 00	 jmp	 $LN11@draw_weapo
$LN63@draw_weapo:

; 6243 : 			}
; 6244 : 			case ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255:
; 6245 : 			{
; 6246 : 				int selected = (weapon_sub_type == selected_weapon) && !damaged;

  01d8d	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01d93	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01d99	75 15		 jne	 SHORT $LN108@draw_weapo
  01d9b	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  01da2	75 0c		 jne	 SHORT $LN108@draw_weapo
  01da4	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv874[ebp], 1
  01dae	eb 0a		 jmp	 SHORT $LN109@draw_weapo
$LN108@draw_weapo:
  01db0	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv874[ebp], 0
$LN109@draw_weapo:
  01dba	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv874[ebp]
  01dc0	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _selected$13[ebp], ecx

; 6247 : 				rgb_colour text_colour = selected ? MFD_CLEAR_COLOUR : MFD_COLOUR1;

  01dc6	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _selected$13[ebp], 0
  01dcd	74 16		 je	 SHORT $LN110@draw_weapo
  01dcf	b8 04 00 00 00	 mov	 eax, 4
  01dd4	6b c8 0a	 imul	 ecx, eax, 10
  01dd7	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?mfd_colours@@3PAUREAL_COLOUR@@A
  01ddd	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv880[ebp], ecx
  01de3	eb 13		 jmp	 SHORT $LN111@draw_weapo
$LN110@draw_weapo:
  01de5	ba 04 00 00 00	 mov	 edx, 4
  01dea	6b c2 00	 imul	 eax, edx, 0
  01ded	05 00 00 00 00	 add	 eax, OFFSET ?mfd_colours@@3PAUREAL_COLOUR@@A
  01df2	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv880[ebp], eax
$LN111@draw_weapo:
  01df8	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv880[ebp]
  01dfe	89 8d d8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  01e04	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  01e0a	8b 02		 mov	 eax, DWORD PTR [edx]
  01e0c	89 85 44 ff ff
	ff		 mov	 DWORD PTR _text_colour$12[ebp], eax

; 6248 : 
; 6249 : 				set_mono_font_colour (text_colour);

  01e12	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _text_colour$12[ebp]
  01e18	50		 push	 eax
  01e19	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6250 : 
; 6251 : 				// remove wing under pod
; 6252 : 				get_2d_float_screen_x_coordinate(pylon_x + 0.11, &x1);

  01e1e	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  01e21	50		 push	 eax
  01e22	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01e2a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01e32	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e36	51		 push	 ecx
  01e37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e3c	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6253 : 				get_2d_float_screen_x_coordinate(pylon_x - 0.11, &x2);

  01e41	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  01e44	50		 push	 eax
  01e45	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01e4d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01e55	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e59	51		 push	 ecx
  01e5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e5f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6254 : 
; 6255 : 				draw_line(x1, forward_wing, x2, forward_wing, MFD_CLEAR_COLOUR);

  01e64	b8 04 00 00 00	 mov	 eax, 4
  01e69	6b c8 0a	 imul	 ecx, eax, 10
  01e6c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e72	52		 push	 edx
  01e73	51		 push	 ecx
  01e74	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01e79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e7e	51		 push	 ecx
  01e7f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01e84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e89	51		 push	 ecx
  01e8a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01e8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e94	51		 push	 ecx
  01e95	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01e9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e9f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6256 : 				draw_line(x1, rear_wing, x2, rear_wing, MFD_CLEAR_COLOUR);

  01ea4	b8 04 00 00 00	 mov	 eax, 4
  01ea9	6b c8 0a	 imul	 ecx, eax, 10
  01eac	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01eb2	52		 push	 edx
  01eb3	51		 push	 ecx
  01eb4	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01eb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ebe	51		 push	 ecx
  01ebf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01ec4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ec9	51		 push	 ecx
  01eca	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01ecf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ed4	51		 push	 ecx
  01ed5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01eda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01edf	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6257 : 
; 6258 : 				// draw rocket pod
; 6259 : 				get_2d_float_screen_coordinates (pylon_x - 0.11, pylon_y + 0.3, &x1, &y1);

  01ee4	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  01ee7	50		 push	 eax
  01ee8	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  01eeb	51		 push	 ecx
  01eec	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01ef4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01efc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f00	51		 push	 ecx
  01f01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f06	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01f0e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01f16	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f1a	51		 push	 ecx
  01f1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f20	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 6260 : 				get_2d_float_screen_coordinates (pylon_x + 0.11, pylon_y - 0.3, &x2, &y2);

  01f25	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  01f28	50		 push	 eax
  01f29	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  01f2c	51		 push	 ecx
  01f2d	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01f35	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01f3d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f41	51		 push	 ecx
  01f42	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f47	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01f4f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01f57	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f5b	51		 push	 ecx
  01f5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f61	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 6261 : 
; 6262 : 				if (selected)

  01f66	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _selected$13[ebp], 0
  01f6d	74 31		 je	 SHORT $LN64@draw_weapo

; 6263 : 					set_block (x1, y1, x2, y2, MFD_COLOUR1);

  01f6f	b8 04 00 00 00	 mov	 eax, 4
  01f74	6b c8 00	 imul	 ecx, eax, 0
  01f77	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f7d	52		 push	 edx
  01f7e	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _y2$[ebp]
  01f83	50		 push	 eax
  01f84	f3 0f 2c 4d f8	 cvttss2si ecx, DWORD PTR _x2$[ebp]
  01f89	51		 push	 ecx
  01f8a	f3 0f 2c 55 ec	 cvttss2si edx, DWORD PTR _y1$[ebp]
  01f8f	52		 push	 edx
  01f90	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _x1$[ebp]
  01f95	50		 push	 eax
  01f96	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 6264 : 				else

  01f9b	e9 00 01 00 00	 jmp	 $LN65@draw_weapo
$LN64@draw_weapo:

; 6265 : 				{
; 6266 : 					draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  01fa0	b8 04 00 00 00	 mov	 eax, 4
  01fa5	6b c8 00	 imul	 ecx, eax, 0
  01fa8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01fae	52		 push	 edx
  01faf	51		 push	 ecx
  01fb0	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01fb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fba	51		 push	 ecx
  01fbb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01fc0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fc5	51		 push	 ecx
  01fc6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01fcb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fd0	51		 push	 ecx
  01fd1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01fd6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fdb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6267 : 					draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01fe0	b8 04 00 00 00	 mov	 eax, 4
  01fe5	6b c8 00	 imul	 ecx, eax, 0
  01fe8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01fee	52		 push	 edx
  01fef	51		 push	 ecx
  01ff0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01ff5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ffa	51		 push	 ecx
  01ffb	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02000	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02005	51		 push	 ecx
  02006	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0200b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02010	51		 push	 ecx
  02011	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0201b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6268 : 					draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  02020	b8 04 00 00 00	 mov	 eax, 4
  02025	6b c8 00	 imul	 ecx, eax, 0
  02028	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0202e	52		 push	 edx
  0202f	51		 push	 ecx
  02030	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02035	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0203a	51		 push	 ecx
  0203b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  02040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02045	51		 push	 ecx
  02046	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0204b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02050	51		 push	 ecx
  02051	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0205b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6269 : 					draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  02060	b8 04 00 00 00	 mov	 eax, 4
  02065	6b c8 00	 imul	 ecx, eax, 0
  02068	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0206e	52		 push	 edx
  0206f	51		 push	 ecx
  02070	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0207a	51		 push	 ecx
  0207b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  02080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02085	51		 push	 ecx
  02086	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0208b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02090	51		 push	 ecx
  02091	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  02096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0209b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN65@draw_weapo:

; 6270 : 				}
; 6271 : 
; 6272 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  020a0	6a 05		 push	 5
  020a2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6273 : 				set_2d_mono_font_position (pylon_x, pylon_y);

  020a7	51		 push	 ecx
  020a8	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_y$18[ebp]
  020b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020b5	51		 push	 ecx
  020b6	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  020be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020c3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6274 : 	
; 6275 : 				sprintf(s, "MP");

  020c8	68 00 00 00 00	 push	 OFFSET ??_C@_02MCEHGFCK@MP@
  020cd	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  020d0	50		 push	 eax
  020d1	e8 00 00 00 00	 call	 _sprintf
  020d6	83 c4 08	 add	 esp, 8

; 6276 : 
; 6277 : 				x_adjust = get_mono_font_string_width (s) * -0.4;

  020d9	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  020dc	50		 push	 eax
  020dd	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  020e2	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv2157[ebp]
  020e8	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2157[ebp]
  020f0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  020f8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020fc	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6278 : 				set_mono_font_rel_position (x_adjust, 0.0);

  02104	51		 push	 ecx
  02105	0f 57 c0	 xorps	 xmm0, xmm0
  02108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0210d	51		 push	 ecx
  0210e	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  02116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0211b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6279 : 				print_mono_font_string (s);

  02120	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  02123	50		 push	 eax
  02124	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6280 : 
; 6281 : 				set_2d_mono_font_position (pylon_x, pylon_y - 0.1);

  02129	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  02131	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  02139	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0213d	51		 push	 ecx
  0213e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02143	51		 push	 ecx
  02144	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  0214c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02151	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6282 : 				sprintf(s, "%2d", number);

  02156	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  0215c	50		 push	 eax
  0215d	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  02162	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  02165	51		 push	 ecx
  02166	e8 00 00 00 00	 call	 _sprintf
  0216b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6283 : 				x_adjust = get_mono_font_string_width (s) * -0.4;

  0216e	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  02171	50		 push	 eax
  02172	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02177	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv2173[ebp]
  0217d	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2173[ebp]
  02185	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  0218d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02191	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6284 : 				set_mono_font_rel_position (x_adjust, 0.0);

  02199	51		 push	 ecx
  0219a	0f 57 c0	 xorps	 xmm0, xmm0
  0219d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021a2	51		 push	 ecx
  021a3	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  021ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6285 : 				print_mono_font_string (s);

  021b5	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  021b8	50		 push	 eax
  021b9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6286 : 
; 6287 : 				break;

  021be	e9 ac 03 00 00	 jmp	 $LN11@draw_weapo
$LN66@draw_weapo:

; 6288 : 			}
; 6289 : 			case ENTITY_SUB_TYPE_WEAPON_AIM9M_SIDEWINDER:
; 6290 : 			{
; 6291 : 				int selected = (weapon_sub_type == selected_weapon) && !damaged;

  021c3	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  021c9	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  021cf	75 15		 jne	 SHORT $LN112@draw_weapo
  021d1	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  021d8	75 0c		 jne	 SHORT $LN112@draw_weapo
  021da	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv998[ebp], 1
  021e4	eb 0a		 jmp	 SHORT $LN113@draw_weapo
$LN112@draw_weapo:
  021e6	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv998[ebp], 0
$LN113@draw_weapo:
  021f0	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv998[ebp]
  021f6	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _selected$11[ebp], ecx

; 6292 : 				// Left or right wingtip
; 6293 : 				int left_tip = pylon == VIPER_LHS_WING_TIP_MOUNT;

  021fc	83 bd 6c ff ff
	ff 05		 cmp	 DWORD PTR _pylon$[ebp], 5
  02203	75 0c		 jne	 SHORT $LN114@draw_weapo
  02205	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1000[ebp], 1
  0220f	eb 0a		 jmp	 SHORT $LN115@draw_weapo
$LN114@draw_weapo:
  02211	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1000[ebp], 0
$LN115@draw_weapo:
  0221b	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv1000[ebp]
  02221	89 85 3c ff ff
	ff		 mov	 DWORD PTR _left_tip$10[ebp], eax

; 6294 : 				float tip;
; 6295 : 
; 6296 : 				if (number == 2)

  02227	83 bd 78 ff ff
	ff 02		 cmp	 DWORD PTR _number$[ebp], 2
  0222e	0f 85 97 01 00
	00		 jne	 $LN71@draw_weapo

; 6297 : 				{
; 6298 : 					// remove wing drawing
; 6299 : 					if (left_tip)

  02234	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _left_tip$10[ebp], 0
  0223b	74 3d		 je	 SHORT $LN68@draw_weapo

; 6300 : 					{
; 6301 : 						tip = wing_tip_left;

  0223d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  02242	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 6302 : 						get_2d_float_screen_x_coordinate(-0.93, &x1);

  0224a	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  0224d	50		 push	 eax
  0224e	51		 push	 ecx
  0224f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  02257	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0225c	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6303 : 						get_2d_float_screen_y_coordinate(-0.22, &y1);

  02261	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  02264	50		 push	 eax
  02265	51		 push	 ecx
  02266	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  0226e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02273	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 6304 : 					}
; 6305 : 					else

  02278	eb 3b		 jmp	 SHORT $LN69@draw_weapo
$LN68@draw_weapo:

; 6306 : 					{
; 6307 : 						tip = wing_tip_right;

  0227a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  0227f	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 6308 : 						get_2d_float_screen_x_coordinate(0.93, &x1);

  02287	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  0228a	50		 push	 eax
  0228b	51		 push	 ecx
  0228c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  02294	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02299	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6309 : 						get_2d_float_screen_y_coordinate(-0.22, &y1);

  0229e	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  022a1	50		 push	 eax
  022a2	51		 push	 ecx
  022a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  022ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022b0	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate
$LN69@draw_weapo:

; 6310 : 					}
; 6311 : 					draw_line(x1, forward_wing, tip, forward_wing, MFD_CLEAR_COLOUR);

  022b5	b8 04 00 00 00	 mov	 eax, 4
  022ba	6b c8 0a	 imul	 ecx, eax, 10
  022bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  022c3	52		 push	 edx
  022c4	51		 push	 ecx
  022c5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  022ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022cf	51		 push	 ecx
  022d0	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  022d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022dd	51		 push	 ecx
  022de	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  022e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022e8	51		 push	 ecx
  022e9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  022ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022f3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6312 : 					draw_line(tip, forward_wing, tip, y1, MFD_CLEAR_COLOUR);

  022f8	b8 04 00 00 00	 mov	 eax, 4
  022fd	6b c8 0a	 imul	 ecx, eax, 10
  02300	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02306	52		 push	 edx
  02307	51		 push	 ecx
  02308	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0230d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02312	51		 push	 ecx
  02313	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  0231b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02320	51		 push	 ecx
  02321	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  02326	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0232b	51		 push	 ecx
  0232c	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02334	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02339	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6313 : 
; 6314 : 					// draw missile
; 6315 : 					if (selected)

  0233e	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _selected$11[ebp], 0
  02345	74 43		 je	 SHORT $LN70@draw_weapo

; 6316 : 						draw_2d_mono_sprite(inverted_sidewinder_missile_data, pylon_x, pylon_y + 0.25, MFD_COLOUR1);

  02347	b8 04 00 00 00	 mov	 eax, 4
  0234c	6b c8 00	 imul	 ecx, eax, 0
  0234f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02355	52		 push	 edx
  02356	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  0235e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  02366	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0236a	51		 push	 ecx
  0236b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02370	51		 push	 ecx
  02371	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  02379	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0237e	68 00 00 00 00	 push	 OFFSET ?inverted_sidewinder_missile_data@@3PADA
  02383	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6317 : 					else

  02388	eb 41		 jmp	 SHORT $LN71@draw_weapo
$LN70@draw_weapo:

; 6318 : 						draw_2d_mono_sprite(sidewinder_missile_data, pylon_x, pylon_y + 0.25, MFD_COLOUR1);

  0238a	b8 04 00 00 00	 mov	 eax, 4
  0238f	6b c8 00	 imul	 ecx, eax, 0
  02392	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02398	52		 push	 edx
  02399	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  023a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  023a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  023ad	51		 push	 ecx
  023ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023b3	51		 push	 ecx
  023b4	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  023bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023c1	68 00 00 00 00	 push	 OFFSET ?sidewinder_missile_data@@3PADA
  023c6	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN71@draw_weapo:

; 6319 : 				}
; 6320 : 
; 6321 : 				if (number >= 1)

  023cb	83 bd 78 ff ff
	ff 01		 cmp	 DWORD PTR _number$[ebp], 1
  023d2	0f 8c 97 01 00
	00		 jl	 $LN76@draw_weapo

; 6322 : 				{
; 6323 : 					// remove wing drawing
; 6324 : 					if (left_tip)

  023d8	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _left_tip$10[ebp], 0
  023df	74 3d		 je	 SHORT $LN73@draw_weapo

; 6325 : 					{
; 6326 : 						tip = wing_tip_left;

  023e1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  023e6	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 6327 : 						get_2d_float_screen_x_coordinate(-0.91, &x1);

  023ee	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  023f1	50		 push	 eax
  023f2	51		 push	 ecx
  023f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf68f5c3
  023fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02400	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6328 : 						get_2d_float_screen_y_coordinate(-0.27, &y1);

  02405	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  02408	50		 push	 eax
  02409	51		 push	 ecx
  0240a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  02412	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02417	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 6329 : 					}
; 6330 : 					else

  0241c	eb 3b		 jmp	 SHORT $LN74@draw_weapo
$LN73@draw_weapo:

; 6331 : 					{
; 6332 : 						tip = wing_tip_right;

  0241e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  02423	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 6333 : 						get_2d_float_screen_x_coordinate(0.91, &x1);

  0242b	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  0242e	50		 push	 eax
  0242f	51		 push	 ecx
  02430	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  02438	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0243d	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6334 : 						get_2d_float_screen_y_coordinate(-0.27, &y1);

  02442	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  02445	50		 push	 eax
  02446	51		 push	 ecx
  02447	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  0244f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02454	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate
$LN74@draw_weapo:

; 6335 : 					}
; 6336 : 					draw_line(x1, rear_wing, tip, rear_wing, MFD_CLEAR_COLOUR);

  02459	b8 04 00 00 00	 mov	 eax, 4
  0245e	6b c8 0a	 imul	 ecx, eax, 10
  02461	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02467	52		 push	 edx
  02468	51		 push	 ecx
  02469	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  0246e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02473	51		 push	 ecx
  02474	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  0247c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02481	51		 push	 ecx
  02482	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02487	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0248c	51		 push	 ecx
  0248d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02492	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02497	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6337 : 					draw_line(tip, rear_wing, tip, y1, MFD_CLEAR_COLOUR);

  0249c	b8 04 00 00 00	 mov	 eax, 4
  024a1	6b c8 0a	 imul	 ecx, eax, 10
  024a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024aa	52		 push	 edx
  024ab	51		 push	 ecx
  024ac	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  024b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024b6	51		 push	 ecx
  024b7	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  024bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024c4	51		 push	 ecx
  024c5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  024ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024cf	51		 push	 ecx
  024d0	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  024d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024dd	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6338 : 
; 6339 : 					// draw missile
; 6340 : 					if (selected)

  024e2	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _selected$11[ebp], 0
  024e9	74 43		 je	 SHORT $LN75@draw_weapo

; 6341 : 						draw_2d_mono_sprite(inverted_sidewinder_missile_data, pylon_x, pylon_y - 0.05, MFD_COLOUR1);

  024eb	b8 04 00 00 00	 mov	 eax, 4
  024f0	6b c8 00	 imul	 ecx, eax, 0
  024f3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024f9	52		 push	 edx
  024fa	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  02502	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0250a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0250e	51		 push	 ecx
  0250f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02514	51		 push	 ecx
  02515	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  0251d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02522	68 00 00 00 00	 push	 OFFSET ?inverted_sidewinder_missile_data@@3PADA
  02527	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6342 : 					else

  0252c	eb 41		 jmp	 SHORT $LN76@draw_weapo
$LN75@draw_weapo:

; 6343 : 						draw_2d_mono_sprite(sidewinder_missile_data, pylon_x, pylon_y - 0.05, MFD_COLOUR1);

  0252e	b8 04 00 00 00	 mov	 eax, 4
  02533	6b c8 00	 imul	 ecx, eax, 0
  02536	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0253c	52		 push	 edx
  0253d	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  02545	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0254d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02551	51		 push	 ecx
  02552	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02557	51		 push	 ecx
  02558	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  02560	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02565	68 00 00 00 00	 push	 OFFSET ?sidewinder_missile_data@@3PADA
  0256a	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN76@draw_weapo:
$LN11@draw_weapo:

; 6344 : 				}
; 6345 : 			}
; 6346 : 			}
; 6347 : 
; 6348 : 			// if damaged, draw X across pylon
; 6349 : 			if (damaged)

  0256f	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  02576	0f 84 c1 01 00
	00		 je	 $LN77@draw_weapo

; 6350 : 			{
; 6351 : 				float width, height = 0.7, x1, y1, x2, y2, y_offset = 0.0;

  0257c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  02584	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _height$7[ebp], xmm0
  0258c	0f 57 c0	 xorps	 xmm0, xmm0
  0258f	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_offset$2[ebp], xmm0

; 6352 : 				
; 6353 : 				if (pylon == VIPER_LHS_WING_TIP_MOUNT || pylon == VIPER_RHS_WING_TIP_MOUNT)

  02597	83 bd 6c ff ff
	ff 05		 cmp	 DWORD PTR _pylon$[ebp], 5
  0259e	74 09		 je	 SHORT $LN80@draw_weapo
  025a0	83 bd 6c ff ff
	ff 06		 cmp	 DWORD PTR _pylon$[ebp], 6
  025a7	75 22		 jne	 SHORT $LN78@draw_weapo
$LN80@draw_weapo:

; 6354 : 				{
; 6355 : 					// sidewinders are narrower and drawn more forward than other pylons
; 6356 : 					y_offset = 0.1;

  025a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  025b1	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_offset$2[ebp], xmm0

; 6357 : 					width = 0.125;

  025b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  025c1	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _width$8[ebp], xmm0

; 6358 : 				}
; 6359 : 				else

  025c9	eb 10		 jmp	 SHORT $LN79@draw_weapo
$LN78@draw_weapo:

; 6360 : 					width = 0.25;

  025cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  025d3	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _width$8[ebp], xmm0
$LN79@draw_weapo:

; 6361 : 				get_2d_float_screen_coordinates(pylon_x - 0.5 * width, pylon_y - 0.5 * height, &x1, &y1);

  025db	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _y1$5[ebp]
  025e1	50		 push	 eax
  025e2	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _x1$6[ebp]
  025e8	51		 push	 ecx
  025e9	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  025f1	f3 0f 5a 8d 30
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _height$7[ebp]
  025f9	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  02601	f2 0f 5c c1	 subsd	 xmm0, xmm1
  02605	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02609	51		 push	 ecx
  0260a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0260f	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  02617	f3 0f 5a 8d 34
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _width$8[ebp]
  0261f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  02627	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0262b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0262f	51		 push	 ecx
  02630	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02635	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 6362 : 				get_2d_float_screen_coordinates(pylon_x + 0.5 * width, pylon_y + y_offset + 0.5 * height, &x2, &y2);

  0263a	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _y2$3[ebp]
  02640	50		 push	 eax
  02641	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _x2$4[ebp]
  02647	51		 push	 ecx
  02648	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_y$18[ebp]
  02650	f3 0f 58 85 1c
	ff ff ff	 addss	 xmm0, DWORD PTR _y_offset$2[ebp]
  02658	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0265c	f3 0f 5a 8d 30
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _height$7[ebp]
  02664	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0266c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  02670	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02674	51		 push	 ecx
  02675	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0267a	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  02682	f3 0f 5a 8d 34
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _width$8[ebp]
  0268a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  02692	f2 0f 58 c1	 addsd	 xmm0, xmm1
  02696	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0269a	51		 push	 ecx
  0269b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026a0	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 6363 : 
; 6364 : 				draw_half_thick_line(x1, y1, x2, y2, MFD_COLOUR1);

  026a5	b8 04 00 00 00	 mov	 eax, 4
  026aa	6b c8 00	 imul	 ecx, eax, 0
  026ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  026b3	52		 push	 edx
  026b4	51		 push	 ecx
  026b5	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y2$3[ebp]
  026bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026c2	51		 push	 ecx
  026c3	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x2$4[ebp]
  026cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026d0	51		 push	 ecx
  026d1	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y1$5[ebp]
  026d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026de	51		 push	 ecx
  026df	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _x1$6[ebp]
  026e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026ec	e8 00 00 00 00	 call	 ?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_half_thick_line

; 6365 : 				draw_half_thick_line(x1, y2, x2, y1, MFD_COLOUR1);

  026f1	b8 04 00 00 00	 mov	 eax, 4
  026f6	6b c8 00	 imul	 ecx, eax, 0
  026f9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  026ff	52		 push	 edx
  02700	51		 push	 ecx
  02701	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y1$5[ebp]
  02709	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0270e	51		 push	 ecx
  0270f	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x2$4[ebp]
  02717	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0271c	51		 push	 ecx
  0271d	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y2$3[ebp]
  02725	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0272a	51		 push	 ecx
  0272b	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _x1$6[ebp]
  02733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02738	e8 00 00 00 00	 call	 ?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_half_thick_line
$LN77@draw_weapo:

; 6366 : 			}
; 6367 : 		}
; 6368 : 	}

  0273d	e9 40 f1 ff ff	 jmp	 $LN6@draw_weapo
$LN7@draw_weapo:

; 6369 : }

  02742	5f		 pop	 edi
  02743	5e		 pop	 esi
  02744	5b		 pop	 ebx
  02745	8b e5		 mov	 esp, ebp
  02747	5d		 pop	 ebp
  02748	c3		 ret	 0
  02749	0f 1f 00	 npad	 3
$LN117@draw_weapo:
  0274c	00 00 00 00	 DD	 $LN40@draw_weapo
  02750	00 00 00 00	 DD	 $LN41@draw_weapo
  02754	00 00 00 00	 DD	 $LN42@draw_weapo
  02758	00 00 00 00	 DD	 $LN43@draw_weapo
  0275c	00 00 00 00	 DD	 $LN44@draw_weapo
  02760	00 00 00 00	 DD	 $LN45@draw_weapo
$LN118@draw_weapo:
  02764	00 00 00 00	 DD	 $LN63@draw_weapo
  02768	00 00 00 00	 DD	 $LN66@draw_weapo
  0276c	00 00 00 00	 DD	 $LN47@draw_weapo
  02770	00 00 00 00	 DD	 $LN11@draw_weapo
$LN116@draw_weapo:
  02774	00		 DB	 0
  02775	03		 DB	 3
  02776	03		 DB	 3
  02777	03		 DB	 3
  02778	03		 DB	 3
  02779	03		 DB	 3
  0277a	03		 DB	 3
  0277b	01		 DB	 1
  0277c	03		 DB	 3
  0277d	03		 DB	 3
  0277e	03		 DB	 3
  0277f	03		 DB	 3
  02780	03		 DB	 3
  02781	03		 DB	 3
  02782	03		 DB	 3
  02783	02		 DB	 2
  02784	02		 DB	 2
  02785	0f 1f 00	 npad	 3
$LN119@draw_weapo:
  02788	00 00 00 00	 DD	 $LN51@draw_weapo
  0278c	00 00 00 00	 DD	 $LN52@draw_weapo
  02790	00 00 00 00	 DD	 $LN53@draw_weapo
  02794	00 00 00 00	 DD	 $LN54@draw_weapo
?draw_weapon_display_mfd@@YGXXZ ENDP			; draw_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_y_max$1 = -32						; size = 4
_y_min$2 = -28						; size = 4
_x_max$3 = -24						; size = 4
_x_min$4 = -20						; size = 4
_y2$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_x1_c$ = 8						; size = 4
_y1_c$ = 12						; size = 4
_x2_c$ = 16						; size = 4
_y2_c$ = 20						; size = 4
_filled$ = 24						; size = 4
_colour$ = 28						; size = 4
?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z PROC		; draw_box, COMDAT

; 5823 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5824 : 	float x1, x2, y1, y2;
; 5825 : 	
; 5826 : 	get_2d_float_screen_coordinates (x1_c, y1_c, &x1, &y1);

  00009	8d 45 f4	 lea	 eax, DWORD PTR _y1$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00010	51		 push	 ecx
  00011	51		 push	 ecx
  00012	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1_c$[ebp]
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1_c$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 5827 : 	get_2d_float_screen_coordinates (x2_c, y2_c, &x2, &y2);

  0002c	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00033	51		 push	 ecx
  00034	51		 push	 ecx
  00035	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2_c$[ebp]
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	51		 push	 ecx
  00040	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2_c$[ebp]
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 5828 : 
; 5829 : 	if (filled)

  0004f	83 7d 18 00	 cmp	 DWORD PTR _filled$[ebp], 0
  00053	74 7e		 je	 SHORT $LN2@draw_box

; 5830 : 	{
; 5831 : 		float x_min = min(x1, x2), x_max = max(x1, x2);

  00055	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  00058	50		 push	 eax
  00059	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00062	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00066	f3 0f 11 45 ec	 movss	 DWORD PTR _x_min$4[ebp], xmm0
  0006b	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  0006e	50		 push	 eax
  0006f	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00078	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0007c	f3 0f 11 45 e8	 movss	 DWORD PTR _x_max$3[ebp], xmm0

; 5832 : 		float y_min = min(y1, y2), y_max = max(y1, y2);

  00081	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  00084	50		 push	 eax
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _y1$[ebp]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0008e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00092	f3 0f 11 45 e4	 movss	 DWORD PTR _y_min$2[ebp], xmm0
  00097	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  0009a	50		 push	 eax
  0009b	8d 4d f4	 lea	 ecx, DWORD PTR _y1$[ebp]
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000a4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a8	f3 0f 11 45 e0	 movss	 DWORD PTR _y_max$1[ebp], xmm0

; 5833 : 
; 5834 : 		// set block likes to have its smallest arguments first		
; 5835 : 		set_block(x_min, y_min, x_max, y_max, colour);

  000ad	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  000b0	50		 push	 eax
  000b1	f3 0f 2c 4d e0	 cvttss2si ecx, DWORD PTR _y_max$1[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 2c 55 e8	 cvttss2si edx, DWORD PTR _x_max$3[ebp]
  000bc	52		 push	 edx
  000bd	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR _y_min$2[ebp]
  000c2	50		 push	 eax
  000c3	f3 0f 2c 4d ec	 cvttss2si ecx, DWORD PTR _x_min$4[ebp]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 5836 : 	}
; 5837 : 	else

  000ce	e9 d4 00 00 00	 jmp	 $LN3@draw_box
$LN2@draw_box:

; 5838 : 	{
; 5839 : 		draw_line(x1, y1, x2, y1, colour);

  000d3	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  000d6	50		 push	 eax
  000d7	51		 push	 ecx
  000d8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	51		 push	 ecx
  000e3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	51		 push	 ecx
  000ee	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	51		 push	 ecx
  000f9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5840 : 		draw_line(x1, y1, x1, y2, colour);

  00108	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  0010b	50		 push	 eax
  0010c	51		 push	 ecx
  0010d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	51		 push	 ecx
  00123	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	51		 push	 ecx
  0012e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5841 : 		draw_line(x1, y2, x2, y2, colour);

  0013d	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  00140	50		 push	 eax
  00141	51		 push	 ecx
  00142	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	51		 push	 ecx
  0014d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00157	51		 push	 ecx
  00158	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	51		 push	 ecx
  00163	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016d	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5842 : 		draw_line(x2, y1, x2, y2, colour);

  00172	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  00175	50		 push	 eax
  00176	51		 push	 ecx
  00177	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	51		 push	 ecx
  00182	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	51		 push	 ecx
  0018d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0019d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a2	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN3@draw_box:

; 5843 : 	}
; 5844 : }

  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi
  001a9	5b		 pop	 ebx
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 18 00	 ret	 24			; 00000018H
?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ENDP		; draw_box
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv1370 = -364						; size = 4
tv1060 = -360						; size = 4
tv1038 = -360						; size = 4
tv1010 = -360						; size = 4
tv988 = -360						; size = 4
tv822 = -360						; size = 4
tv769 = -360						; size = 4
tv746 = -360						; size = 4
tv725 = -360						; size = 4
tv705 = -360						; size = 4
tv670 = -360						; size = 4
tv649 = -360						; size = 4
tv628 = -360						; size = 4
tv609 = -360						; size = 4
tv590 = -360						; size = 4
tv569 = -360						; size = 4
tv548 = -360						; size = 4
tv527 = -360						; size = 4
tv508 = -360						; size = 4
tv489 = -360						; size = 4
tv470 = -360						; size = 4
tv450 = -360						; size = 4
tv422 = -360						; size = 4
tv401 = -360						; size = 4
tv382 = -360						; size = 4
tv363 = -360						; size = 4
tv343 = -360						; size = 4
tv316 = -360						; size = 4
tv288 = -360						; size = 4
tv266 = -360						; size = 4
tv245 = -360						; size = 4
tv226 = -360						; size = 4
tv207 = -360						; size = 4
tv178 = -360						; size = 4
tv158 = -360						; size = 4
tv138 = -360						; size = 4
tv86 = -360						; size = 4
tv1053 = -356						; size = 4
tv1031 = -356						; size = 4
tv1003 = -356						; size = 4
tv981 = -356						; size = 4
tv814 = -356						; size = 4
tv761 = -356						; size = 4
tv738 = -356						; size = 4
tv717 = -356						; size = 4
tv697 = -356						; size = 4
tv662 = -356						; size = 4
tv641 = -356						; size = 4
tv621 = -356						; size = 4
tv602 = -356						; size = 4
tv582 = -356						; size = 4
tv562 = -356						; size = 4
tv540 = -356						; size = 4
tv520 = -356						; size = 4
tv501 = -356						; size = 4
tv482 = -356						; size = 4
tv462 = -356						; size = 4
tv442 = -356						; size = 4
tv414 = -356						; size = 4
tv394 = -356						; size = 4
tv375 = -356						; size = 4
tv355 = -356						; size = 4
tv335 = -356						; size = 4
tv308 = -356						; size = 4
tv280 = -356						; size = 4
tv258 = -356						; size = 4
tv238 = -356						; size = 4
tv219 = -356						; size = 4
tv199 = -356						; size = 4
tv170 = -356						; size = 4
tv150 = -356						; size = 4
tv130 = -356						; size = 4
tv78 = -356						; size = 4
tv70 = -356						; size = 4
_time_to_impact$1 = -288				; size = 4
_closest_missile$2 = -284				; size = 4
_dy$3 = -280						; size = 4
_dx$4 = -276						; size = 4
_air_scan_range$5 = -272				; size = 4
_draw_threat_line$6 = -268				; size = 4
_threat_type$7 = -264					; size = 4
_threat_position$8 = -260				; size = 4
_launched_weapon$9 = -256				; size = 4
_threat$10 = -252					; size = 4
_source_position$ = -248				; size = 4
_source_target$ = -244					; size = 4
_source$ = -240						; size = 4
_ase_threat_line_flash_timer$ = -236			; size = 4
_tsd_ase_range$ = -232					; size = 4
_source_heading$ = -228					; size = 4
_y_adjust$ = -224					; size = 4
_width$ = -220						; size = 4
_scale$ = -216						; size = 4
_ase_draw_threat_line_status$ = -212			; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z PROC ; draw_aircraft_survivability_equipment_display_mfd, COMDAT

; 4991 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4992 : 	char
; 4993 : 		*s,
; 4994 : 		buffer[200];
; 4995 : 
; 4996 : 	entity_sides
; 4997 : 		source_side;
; 4998 : 
; 4999 : 	int
; 5000 : 		*ase_draw_threat_line_status;
; 5001 : 
; 5002 : 	float
; 5003 : 		scale,
; 5004 : 		width,
; 5005 : 		y_adjust,
; 5006 : 		source_heading,
; 5007 : 		tsd_ase_range,
; 5008 : 		*ase_threat_line_flash_timer;
; 5009 : 
; 5010 : 	entity
; 5011 : 		*source,
; 5012 : 		*source_target;
; 5013 : 
; 5014 : 	vec3d
; 5015 : 		*source_position;
; 5016 : 
; 5017 : 	ASSERT (viper_mfd_location_valid (mfd_location));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN15@draw_aircr
  00012	83 7d 08 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00016	7c 18		 jl	 SHORT $LN14@draw_aircr
$LN15@draw_aircr:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 1a	 add	 eax, 26			; 0000001aH
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@draw_aircr:

; 5018 : 
; 5019 : 	switch (mfd_location)

  00030	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00033	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00039	83 bd 9c fe ff
	ff 03		 cmp	 DWORD PTR tv70[ebp], 3
  00040	77 57		 ja	 SHORT $LN2@draw_aircr
  00042	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv70[ebp]
  00048	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN243@draw_aircr[ecx*4]
$LN16@draw_aircr:

; 5020 : 	{
; 5021 : 		////////////////////////////////////////
; 5022 : 		case VIPER_MFD_LOCATION_PILOT_LHS:
; 5023 : 		case VIPER_MFD_LOCATION_PILOT_RHS:
; 5024 : 		////////////////////////////////////////
; 5025 : 		{
; 5026 : 			tsd_ase_range						= pilot_tsd_ase_range;

  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00057	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 5027 : 			ase_threat_line_flash_timer	= &pilot_ase_threat_line_flash_timer;

  0005f	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_threat_line_flash_timer$[ebp], OFFSET ?pilot_ase_threat_line_flash_timer@@3MA

; 5028 : 			ase_draw_threat_line_status	= &pilot_ase_draw_threat_line_status;

  00069	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_draw_threat_line_status$[ebp], OFFSET ?pilot_ase_draw_threat_line_status@@3HA

; 5029 : 
; 5030 : 			break;

  00073	eb 24		 jmp	 SHORT $LN2@draw_aircr
$LN17@draw_aircr:

; 5031 : 		}
; 5032 : 		////////////////////////////////////////
; 5033 : 		case VIPER_MFD_LOCATION_CO_PILOT_LHS:
; 5034 : 		case VIPER_MFD_LOCATION_CO_PILOT_RHS:
; 5035 : 		////////////////////////////////////////
; 5036 : 		{
; 5037 : 			tsd_ase_range						= co_pilot_tsd_ase_range;

  00075	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0007d	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 5038 : 			ase_threat_line_flash_timer	= &co_pilot_ase_threat_line_flash_timer;

  00085	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_threat_line_flash_timer$[ebp], OFFSET ?co_pilot_ase_threat_line_flash_timer@@3MA

; 5039 : 			ase_draw_threat_line_status	= &co_pilot_ase_draw_threat_line_status;

  0008f	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_draw_threat_line_status$[ebp], OFFSET ?co_pilot_ase_draw_threat_line_status@@3HA
$LN2@draw_aircr:

; 5040 : 
; 5041 : 			break;
; 5042 : 		}
; 5043 : 	}
; 5044 : 
; 5045 : 	source = get_gunship_entity ();

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0009e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 5046 : 
; 5047 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000a4	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000ab	74 10		 je	 SHORT $LN99@draw_aircr
  000ad	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b5	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv78[ebp], ecx
  000bb	eb 24		 jmp	 SHORT $LN100@draw_aircr
$LN99@draw_aircr:
  000bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  000c3	83 c2 38	 add	 edx, 56			; 00000038H
  000c6	52		 push	 edx
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d7	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN100@draw_aircr:
  000e1	b9 01 00 00 00	 mov	 ecx, 1
  000e6	85 c9		 test	 ecx, ecx
  000e8	74 0c		 je	 SHORT $LN101@draw_aircr
  000ea	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv86[ebp], 187 ; 000000bbH
  000f4	eb 24		 jmp	 SHORT $LN102@draw_aircr
$LN101@draw_aircr:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  000fc	83 c2 38	 add	 edx, 56			; 00000038H
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN102@draw_aircr:
  0011a	68 bb 00 00 00	 push	 187			; 000000bbH
  0011f	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00125	51		 push	 ecx
  00126	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv78[ebp], 1116
  00130	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]
  00136	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0013d	ff d1		 call	 ecx
  0013f	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 5048 : 
; 5049 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  00145	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0014c	74 10		 je	 SHORT $LN103@draw_aircr
  0014e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00154	8b 08		 mov	 ecx, DWORD PTR [eax]
  00156	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv130[ebp], ecx
  0015c	eb 24		 jmp	 SHORT $LN104@draw_aircr
$LN103@draw_aircr:
  0015e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00164	83 c2 3a	 add	 edx, 58			; 0000003aH
  00167	52		 push	 edx
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0016d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00178	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN104@draw_aircr:
  00182	b9 01 00 00 00	 mov	 ecx, 1
  00187	85 c9		 test	 ecx, ecx
  00189	74 0c		 je	 SHORT $LN105@draw_aircr
  0018b	c7 85 98 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv138[ebp], 52 ; 00000034H
  00195	eb 24		 jmp	 SHORT $LN106@draw_aircr
$LN105@draw_aircr:
  00197	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0019d	83 c2 3a	 add	 edx, 58			; 0000003aH
  001a0	52		 push	 edx
  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b1	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], 0
$LN106@draw_aircr:
  001bb	6a 34		 push	 52			; 00000034H
  001bd	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001c3	51		 push	 ecx
  001c4	69 95 9c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv130[ebp], 700
  001ce	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv138[ebp]
  001d4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001db	ff d1		 call	 ecx
  001dd	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 5050 : 
; 5051 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  001e3	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  001ea	74 10		 je	 SHORT $LN107@draw_aircr
  001ec	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  001f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f4	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  001fa	eb 24		 jmp	 SHORT $LN108@draw_aircr
$LN107@draw_aircr:
  001fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00202	83 c2 3c	 add	 edx, 60			; 0000003cH
  00205	52		 push	 edx
  00206	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0020b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00216	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN108@draw_aircr:
  00220	b9 01 00 00 00	 mov	 ecx, 1
  00225	85 c9		 test	 ecx, ecx
  00227	74 0c		 je	 SHORT $LN109@draw_aircr
  00229	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv158[ebp], 8
  00233	eb 24		 jmp	 SHORT $LN110@draw_aircr
$LN109@draw_aircr:
  00235	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0023b	83 c2 3c	 add	 edx, 60			; 0000003cH
  0023e	52		 push	 edx
  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00244	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0024f	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN110@draw_aircr:
  00259	6a 08		 push	 8
  0025b	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00261	51		 push	 ecx
  00262	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv150[ebp], 96
  00269	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  0026f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00276	ff d1		 call	 ecx
  00278	89 85 08 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 5052 : 
; 5053 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  0027e	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00285	74 10		 je	 SHORT $LN111@draw_aircr
  00287	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0028d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028f	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv170[ebp], ecx
  00295	eb 24		 jmp	 SHORT $LN112@draw_aircr
$LN111@draw_aircr:
  00297	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0029d	83 c2 3e	 add	 edx, 62			; 0000003eH
  002a0	52		 push	 edx
  002a1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b1	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN112@draw_aircr:
  002bb	b9 01 00 00 00	 mov	 ecx, 1
  002c0	85 c9		 test	 ecx, ecx
  002c2	74 0c		 je	 SHORT $LN113@draw_aircr
  002c4	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv178[ebp], 38 ; 00000026H
  002ce	eb 24		 jmp	 SHORT $LN114@draw_aircr
$LN113@draw_aircr:
  002d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  002d6	83 c2 3e	 add	 edx, 62			; 0000003eH
  002d9	52		 push	 edx
  002da	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  002df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002e4	50		 push	 eax
  002e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ea	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN114@draw_aircr:
  002f4	6a 26		 push	 38			; 00000026H
  002f6	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  002fc	51		 push	 ecx
  002fd	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv170[ebp], 180
  00307	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv178[ebp]
  0030d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00314	ff d1		 call	 ecx
  00316	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 5054 : 
; 5055 : 	scale = RADIUS / tsd_ase_range;

  0031c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  00324	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0032c	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00330	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00334	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 5056 : 
; 5057 : 	////////////////////////////////////////
; 5058 : 	//
; 5059 : 	// threats
; 5060 : 	//
; 5061 : 	////////////////////////////////////////
; 5062 : 
; 5063 : 	{
; 5064 : 		entity
; 5065 : 			*threat,
; 5066 : 			*launched_weapon;
; 5067 : 
; 5068 : 		vec3d
; 5069 : 			*threat_position;
; 5070 : 
; 5071 : 		threat_types
; 5072 : 			threat_type;
; 5073 : 
; 5074 : 		int
; 5075 : 			draw_threat_line;
; 5076 : 
; 5077 : 		float
; 5078 : 			air_scan_range,
; 5079 : 			dx,
; 5080 : 			dy;
; 5081 : 
; 5082 : 		*ase_threat_line_flash_timer -= get_delta_time ();

  0033c	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00342	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00346	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0034e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00354	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 5083 : 
; 5084 : 		if (*ase_threat_line_flash_timer < 0.0)

  00358	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  0035e	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00362	0f 57 c9	 xorps	 xmm1, xmm1
  00365	66 0f 2f c8	 comisd	 xmm1, xmm0
  00369	76 25		 jbe	 SHORT $LN18@draw_aircr

; 5085 : 		{
; 5086 : 			*ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  0036b	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00371	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00379	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 5087 : 
; 5088 : 			*ase_draw_threat_line_status ^= 1;

  0037d	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ase_draw_threat_line_status$[ebp]
  00383	8b 08		 mov	 ecx, DWORD PTR [eax]
  00385	83 f1 01	 xor	 ecx, 1
  00388	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _ase_draw_threat_line_status$[ebp]
  0038e	89 0a		 mov	 DWORD PTR [edx], ecx
$LN18@draw_aircr:

; 5089 : 		}
; 5090 : 
; 5091 : 		set_2d_window_rotation (mfd_env, source_heading);

  00390	51		 push	 ecx
  00391	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5092 : 
; 5093 : 		//
; 5094 : 		// display enemy SAM and AAA threat range circles
; 5095 : 		//
; 5096 : 		// (use the gunship target list so that threats which are not targetting the player are still visible)
; 5097 : 		//
; 5098 : 
; 5099 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  003a9	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  003b0	74 10		 je	 SHORT $LN115@draw_aircr
  003b2	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  003b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ba	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv199[ebp], ecx
  003c0	eb 24		 jmp	 SHORT $LN116@draw_aircr
$LN115@draw_aircr:
  003c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  003c8	83 c2 6c	 add	 edx, 108		; 0000006cH
  003cb	52		 push	 edx
  003cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  003d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003d6	50		 push	 eax
  003d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003dc	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN116@draw_aircr:
  003e6	b9 01 00 00 00	 mov	 ecx, 1
  003eb	85 c9		 test	 ecx, ecx
  003ed	74 0c		 je	 SHORT $LN117@draw_aircr
  003ef	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv207[ebp], 18 ; 00000012H
  003f9	eb 24		 jmp	 SHORT $LN118@draw_aircr
$LN117@draw_aircr:
  003fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00401	83 c2 6c	 add	 edx, 108		; 0000006cH
  00404	52		 push	 edx
  00405	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0040a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00415	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN118@draw_aircr:
  0041f	6a 12		 push	 18			; 00000012H
  00421	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00427	51		 push	 ecx
  00428	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv199[ebp], 180
  00432	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv207[ebp]
  00438	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0043f	ff d1		 call	 ecx
  00441	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN4@draw_aircr:

; 5100 : 
; 5101 : 		while (threat)

  00447	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0044e	0f 84 70 04 00
	00		 je	 $LN5@draw_aircr

; 5102 : 		{
; 5103 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00454	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0045b	74 10		 je	 SHORT $LN119@draw_aircr
  0045d	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00463	8b 08		 mov	 ecx, DWORD PTR [eax]
  00465	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv219[ebp], ecx
  0046b	eb 20		 jmp	 SHORT $LN120@draw_aircr
$LN119@draw_aircr:
  0046d	68 ef 13 00 00	 push	 5103			; 000013efH
  00472	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00477	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0047d	52		 push	 edx
  0047e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00483	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv219[ebp], 0
$LN120@draw_aircr:
  0048d	b8 01 00 00 00	 mov	 eax, 1
  00492	85 c0		 test	 eax, eax
  00494	74 0c		 je	 SHORT $LN121@draw_aircr
  00496	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv226[ebp], 66 ; 00000042H
  004a0	eb 20		 jmp	 SHORT $LN122@draw_aircr
$LN121@draw_aircr:
  004a2	68 ef 13 00 00	 push	 5103			; 000013efH
  004a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004b2	51		 push	 ecx
  004b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b8	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN122@draw_aircr:
  004c2	6a 42		 push	 66			; 00000042H
  004c4	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  004ca	52		 push	 edx
  004cb	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv219[ebp], 1116
  004d5	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv226[ebp]
  004db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  004e2	ff d2		 call	 edx
  004e4	85 c0		 test	 eax, eax
  004e6	0f 85 2f 03 00
	00		 jne	 $LN21@draw_aircr

; 5104 : 			{
; 5105 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  004ec	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  004f3	74 10		 je	 SHORT $LN123@draw_aircr
  004f5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  004fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  004fd	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv238[ebp], ecx
  00503	eb 20		 jmp	 SHORT $LN124@draw_aircr
$LN123@draw_aircr:
  00505	68 f1 13 00 00	 push	 5105			; 000013f1H
  0050a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0050f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00515	52		 push	 edx
  00516	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0051b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv238[ebp], 0
$LN124@draw_aircr:
  00525	b8 01 00 00 00	 mov	 eax, 1
  0052a	85 c0		 test	 eax, eax
  0052c	74 0c		 je	 SHORT $LN125@draw_aircr
  0052e	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv245[ebp], 187 ; 000000bbH
  00538	eb 20		 jmp	 SHORT $LN126@draw_aircr
$LN125@draw_aircr:
  0053a	68 f1 13 00 00	 push	 5105			; 000013f1H
  0053f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00544	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0054a	51		 push	 ecx
  0054b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00550	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv245[ebp], 0
$LN126@draw_aircr:
  0055a	68 bb 00 00 00	 push	 187			; 000000bbH
  0055f	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00565	52		 push	 edx
  00566	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv238[ebp], 1116
  00570	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv245[ebp]
  00576	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0057d	ff d2		 call	 edx
  0057f	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00585	0f 84 90 02 00
	00		 je	 $LN21@draw_aircr

; 5106 : 				{
; 5107 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  0058b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00592	74 10		 je	 SHORT $LN127@draw_aircr
  00594	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0059a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0059c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv258[ebp], ecx
  005a2	eb 24		 jmp	 SHORT $LN128@draw_aircr
$LN127@draw_aircr:
  005a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  005aa	83 c2 74	 add	 edx, 116		; 00000074H
  005ad	52		 push	 edx
  005ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005b8	50		 push	 eax
  005b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005be	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv258[ebp], 0
$LN128@draw_aircr:
  005c8	b9 01 00 00 00	 mov	 ecx, 1
  005cd	85 c9		 test	 ecx, ecx
  005cf	74 0c		 je	 SHORT $LN129@draw_aircr
  005d1	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv266[ebp], 233 ; 000000e9H
  005db	eb 24		 jmp	 SHORT $LN130@draw_aircr
$LN129@draw_aircr:
  005dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  005e3	83 c2 74	 add	 edx, 116		; 00000074H
  005e6	52		 push	 edx
  005e7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  005ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  005f1	50		 push	 eax
  005f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005f7	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv266[ebp], 0
$LN130@draw_aircr:
  00601	68 e9 00 00 00	 push	 233			; 000000e9H
  00606	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0060c	51		 push	 ecx
  0060d	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv258[ebp], 1116
  00617	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv266[ebp]
  0061d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00624	ff d1		 call	 ecx
  00626	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 5108 : 
; 5109 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  0062c	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00633	74 0d		 je	 SHORT $LN22@draw_aircr
  00635	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  0063c	0f 85 d9 01 00
	00		 jne	 $LN21@draw_aircr
$LN22@draw_aircr:

; 5110 : 					{
; 5111 : 						threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  00642	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00649	74 10		 je	 SHORT $LN131@draw_aircr
  0064b	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00651	8b 08		 mov	 ecx, DWORD PTR [eax]
  00653	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv280[ebp], ecx
  00659	eb 24		 jmp	 SHORT $LN132@draw_aircr
$LN131@draw_aircr:
  0065b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00661	83 c2 78	 add	 edx, 120		; 00000078H
  00664	52		 push	 edx
  00665	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0066a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00675	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv280[ebp], 0
$LN132@draw_aircr:
  0067f	b9 01 00 00 00	 mov	 ecx, 1
  00684	85 c9		 test	 ecx, ecx
  00686	74 0c		 je	 SHORT $LN133@draw_aircr
  00688	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv288[ebp], 8
  00692	eb 24		 jmp	 SHORT $LN134@draw_aircr
$LN133@draw_aircr:
  00694	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0069a	83 c2 78	 add	 edx, 120		; 00000078H
  0069d	52		 push	 edx
  0069e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  006a8	50		 push	 eax
  006a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006ae	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv288[ebp], 0
$LN134@draw_aircr:
  006b8	6a 08		 push	 8
  006ba	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  006c0	51		 push	 ecx
  006c1	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv280[ebp], 96
  006c8	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  006ce	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  006d5	ff d1		 call	 ecx
  006d7	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 5112 : 
; 5113 : 						dx = (threat_position->x - source_position->x) * scale;

  006dd	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  006e3	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  006e9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006ed	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  006f1	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  006f9	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 5114 : 						dy = (threat_position->z - source_position->z) * scale;

  00701	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  00707	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0070d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00712	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00717	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0071f	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 5115 : 
; 5116 : 						air_scan_range = get_local_entity_float_value (threat, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  00727	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0072e	74 10		 je	 SHORT $LN135@draw_aircr
  00730	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00736	8b 08		 mov	 ecx, DWORD PTR [eax]
  00738	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv308[ebp], ecx
  0073e	eb 24		 jmp	 SHORT $LN136@draw_aircr
$LN135@draw_aircr:
  00740	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00746	83 c2 7d	 add	 edx, 125		; 0000007dH
  00749	52		 push	 edx
  0074a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0074f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00754	50		 push	 eax
  00755	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0075a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv308[ebp], 0
$LN136@draw_aircr:
  00764	b9 01 00 00 00	 mov	 ecx, 1
  00769	85 c9		 test	 ecx, ecx
  0076b	74 0c		 je	 SHORT $LN137@draw_aircr
  0076d	c7 85 98 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv316[ebp], 5
  00777	eb 24		 jmp	 SHORT $LN138@draw_aircr
$LN137@draw_aircr:
  00779	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0077f	83 c2 7d	 add	 edx, 125		; 0000007dH
  00782	52		 push	 edx
  00783	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00788	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0078d	50		 push	 eax
  0078e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00793	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv316[ebp], 0
$LN138@draw_aircr:
  0079d	6a 05		 push	 5
  0079f	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  007a5	51		 push	 ecx
  007a6	69 95 9c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv308[ebp], 700
  007b0	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv316[ebp]
  007b6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  007bd	ff d1		 call	 ecx
  007bf	d9 9d 94 fe ff
	ff		 fstp	 DWORD PTR tv1370[ebp]
  007c5	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR tv1370[ebp]
  007cd	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  007d5	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _air_scan_range$5[ebp], xmm0

; 5117 : 
; 5118 : 						draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR2);

  007dd	b8 04 00 00 00	 mov	 eax, 4
  007e2	c1 e0 00	 shl	 eax, 0
  007e5	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  007eb	51		 push	 ecx
  007ec	51		 push	 ecx
  007ed	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  007f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fa	51		 push	 ecx
  007fb	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  00803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00808	51		 push	 ecx
  00809	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  00811	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00816	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN21@draw_aircr:

; 5119 : 					}
; 5120 : 				}
; 5121 : 			}
; 5122 : 
; 5123 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  0081b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00822	74 10		 je	 SHORT $LN139@draw_aircr
  00824	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0082a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0082c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv335[ebp], ecx
  00832	eb 27		 jmp	 SHORT $LN140@draw_aircr
$LN139@draw_aircr:
  00834	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0083a	81 c2 84 00 00
	00		 add	 edx, 132		; 00000084H
  00840	52		 push	 edx
  00841	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00846	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0084b	50		 push	 eax
  0084c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00851	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv335[ebp], 0
$LN140@draw_aircr:
  0085b	b9 01 00 00 00	 mov	 ecx, 1
  00860	85 c9		 test	 ecx, ecx
  00862	74 0c		 je	 SHORT $LN141@draw_aircr
  00864	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv343[ebp], 18 ; 00000012H
  0086e	eb 27		 jmp	 SHORT $LN142@draw_aircr
$LN141@draw_aircr:
  00870	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00876	81 c2 84 00 00
	00		 add	 edx, 132		; 00000084H
  0087c	52		 push	 edx
  0087d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00882	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00887	50		 push	 eax
  00888	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0088d	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv343[ebp], 0
$LN142@draw_aircr:
  00897	6a 12		 push	 18			; 00000012H
  00899	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0089f	51		 push	 ecx
  008a0	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv335[ebp], 180
  008aa	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp]
  008b0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  008b7	ff d1		 call	 ecx
  008b9	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 5124 : 		}

  008bf	e9 83 fb ff ff	 jmp	 $LN4@draw_aircr
$LN5@draw_aircr:

; 5125 : 
; 5126 : 		//
; 5127 : 		// display enemy SAM, AAA and AIRBORNE_RADAR threats
; 5128 : 		//
; 5129 : 
; 5130 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  008c4	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  008cb	74 10		 je	 SHORT $LN143@draw_aircr
  008cd	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  008d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  008d5	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv355[ebp], ecx
  008db	eb 27		 jmp	 SHORT $LN144@draw_aircr
$LN143@draw_aircr:
  008dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  008e3	81 c2 8b 00 00
	00		 add	 edx, 139		; 0000008bH
  008e9	52		 push	 edx
  008ea	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008f4	50		 push	 eax
  008f5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008fa	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv355[ebp], 0
$LN144@draw_aircr:
  00904	b9 01 00 00 00	 mov	 ecx, 1
  00909	85 c9		 test	 ecx, ecx
  0090b	74 0c		 je	 SHORT $LN145@draw_aircr
  0090d	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv363[ebp], 18 ; 00000012H
  00917	eb 27		 jmp	 SHORT $LN146@draw_aircr
$LN145@draw_aircr:
  00919	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0091f	81 c2 8b 00 00
	00		 add	 edx, 139		; 0000008bH
  00925	52		 push	 edx
  00926	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0092b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00930	50		 push	 eax
  00931	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00936	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv363[ebp], 0
$LN146@draw_aircr:
  00940	6a 12		 push	 18			; 00000012H
  00942	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00948	51		 push	 ecx
  00949	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv355[ebp], 180
  00953	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv363[ebp]
  00959	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00960	ff d1		 call	 ecx
  00962	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN6@draw_aircr:

; 5131 : 
; 5132 : 		while (threat)

  00968	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0096f	0f 84 c7 02 00
	00		 je	 $LN7@draw_aircr

; 5133 : 		{
; 5134 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00975	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0097c	74 10		 je	 SHORT $LN147@draw_aircr
  0097e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00984	8b 08		 mov	 ecx, DWORD PTR [eax]
  00986	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv375[ebp], ecx
  0098c	eb 20		 jmp	 SHORT $LN148@draw_aircr
$LN147@draw_aircr:
  0098e	68 0e 14 00 00	 push	 5134			; 0000140eH
  00993	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00998	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0099e	52		 push	 edx
  0099f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009a4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv375[ebp], 0
$LN148@draw_aircr:
  009ae	b8 01 00 00 00	 mov	 eax, 1
  009b3	85 c0		 test	 eax, eax
  009b5	74 0c		 je	 SHORT $LN149@draw_aircr
  009b7	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv382[ebp], 66 ; 00000042H
  009c1	eb 20		 jmp	 SHORT $LN150@draw_aircr
$LN149@draw_aircr:
  009c3	68 0e 14 00 00	 push	 5134			; 0000140eH
  009c8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  009cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  009d3	51		 push	 ecx
  009d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009d9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv382[ebp], 0
$LN150@draw_aircr:
  009e3	6a 42		 push	 66			; 00000042H
  009e5	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  009eb	52		 push	 edx
  009ec	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv375[ebp], 1116
  009f6	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv382[ebp]
  009fc	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a03	ff d2		 call	 edx
  00a05	85 c0		 test	 eax, eax
  00a07	0f 85 86 01 00
	00		 jne	 $LN25@draw_aircr

; 5135 : 			{
; 5136 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00a0d	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00a14	74 10		 je	 SHORT $LN151@draw_aircr
  00a16	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00a1c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a1e	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv394[ebp], ecx
  00a24	eb 20		 jmp	 SHORT $LN152@draw_aircr
$LN151@draw_aircr:
  00a26	68 10 14 00 00	 push	 5136			; 00001410H
  00a2b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a30	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a36	52		 push	 edx
  00a37	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a3c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv394[ebp], 0
$LN152@draw_aircr:
  00a46	b8 01 00 00 00	 mov	 eax, 1
  00a4b	85 c0		 test	 eax, eax
  00a4d	74 0c		 je	 SHORT $LN153@draw_aircr
  00a4f	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv401[ebp], 187 ; 000000bbH
  00a59	eb 20		 jmp	 SHORT $LN154@draw_aircr
$LN153@draw_aircr:
  00a5b	68 10 14 00 00	 push	 5136			; 00001410H
  00a60	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a65	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00a6b	51		 push	 ecx
  00a6c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a71	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv401[ebp], 0
$LN154@draw_aircr:
  00a7b	68 bb 00 00 00	 push	 187			; 000000bbH
  00a80	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00a86	52		 push	 edx
  00a87	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv394[ebp], 1116
  00a91	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv401[ebp]
  00a97	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a9e	ff d2		 call	 edx
  00aa0	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00aa6	0f 84 e7 00 00
	00		 je	 $LN25@draw_aircr

; 5137 : 				{
; 5138 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00aac	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ab3	74 10		 je	 SHORT $LN155@draw_aircr
  00ab5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00abb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00abd	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv414[ebp], ecx
  00ac3	eb 27		 jmp	 SHORT $LN156@draw_aircr
$LN155@draw_aircr:
  00ac5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00acb	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  00ad1	52		 push	 edx
  00ad2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ad7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00adc	50		 push	 eax
  00add	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ae2	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv414[ebp], 0
$LN156@draw_aircr:
  00aec	b9 01 00 00 00	 mov	 ecx, 1
  00af1	85 c9		 test	 ecx, ecx
  00af3	74 0c		 je	 SHORT $LN157@draw_aircr
  00af5	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv422[ebp], 233 ; 000000e9H
  00aff	eb 27		 jmp	 SHORT $LN158@draw_aircr
$LN157@draw_aircr:
  00b01	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00b07	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  00b0d	52		 push	 edx
  00b0e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b13	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00b18	50		 push	 eax
  00b19	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b1e	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv422[ebp], 0
$LN158@draw_aircr:
  00b28	68 e9 00 00 00	 push	 233			; 000000e9H
  00b2d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b33	51		 push	 ecx
  00b34	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv414[ebp], 1116
  00b3e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv422[ebp]
  00b44	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00b4b	ff d1		 call	 ecx
  00b4d	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 5139 : 
; 5140 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00b53	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00b5a	74 12		 je	 SHORT $LN26@draw_aircr
  00b5c	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00b63	74 09		 je	 SHORT $LN26@draw_aircr
  00b65	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00b6c	75 25		 jne	 SHORT $LN25@draw_aircr
$LN26@draw_aircr:

; 5141 : 					{
; 5142 : //VJ 030423 TSD render mod
; 5143 : 						draw_radar_target_symbol (threat, source_position, scale, FALSE, FALSE);

  00b6e	6a 00		 push	 0
  00b70	6a 00		 push	 0
  00b72	51		 push	 ecx
  00b73	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00b7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b80	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00b86	50		 push	 eax
  00b87	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b8d	51		 push	 ecx
  00b8e	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN25@draw_aircr:

; 5144 : 					}
; 5145 : 				}
; 5146 : 			}
; 5147 : 
; 5148 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  00b93	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00b9a	74 10		 je	 SHORT $LN159@draw_aircr
  00b9c	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ba2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ba4	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv442[ebp], ecx
  00baa	eb 27		 jmp	 SHORT $LN160@draw_aircr
$LN159@draw_aircr:
  00bac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00bb2	81 c2 9d 00 00
	00		 add	 edx, 157		; 0000009dH
  00bb8	52		 push	 edx
  00bb9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bbe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bc3	50		 push	 eax
  00bc4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bc9	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv442[ebp], 0
$LN160@draw_aircr:
  00bd3	b9 01 00 00 00	 mov	 ecx, 1
  00bd8	85 c9		 test	 ecx, ecx
  00bda	74 0c		 je	 SHORT $LN161@draw_aircr
  00bdc	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv450[ebp], 18 ; 00000012H
  00be6	eb 27		 jmp	 SHORT $LN162@draw_aircr
$LN161@draw_aircr:
  00be8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00bee	81 c2 9d 00 00
	00		 add	 edx, 157		; 0000009dH
  00bf4	52		 push	 edx
  00bf5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bfa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00bff	50		 push	 eax
  00c00	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c05	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv450[ebp], 0
$LN162@draw_aircr:
  00c0f	6a 12		 push	 18			; 00000012H
  00c11	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00c17	51		 push	 ecx
  00c18	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv442[ebp], 180
  00c22	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv450[ebp]
  00c28	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c2f	ff d1		 call	 ecx
  00c31	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 5149 : 		}

  00c37	e9 2c fd ff ff	 jmp	 $LN6@draw_aircr
$LN7@draw_aircr:

; 5150 : 
; 5151 : 		//
; 5152 : 		// draw threat line if gunship is targetted (flash if missile fired)
; 5153 : 		//
; 5154 : 
; 5155 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00c3c	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00c43	74 10		 je	 SHORT $LN163@draw_aircr
  00c45	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00c4b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c4d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv462[ebp], ecx
  00c53	eb 27		 jmp	 SHORT $LN164@draw_aircr
$LN163@draw_aircr:
  00c55	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00c5b	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00c61	52		 push	 edx
  00c62	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c67	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c6c	50		 push	 eax
  00c6d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c72	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv462[ebp], 0
$LN164@draw_aircr:
  00c7c	b9 01 00 00 00	 mov	 ecx, 1
  00c81	85 c9		 test	 ecx, ecx
  00c83	74 0c		 je	 SHORT $LN165@draw_aircr
  00c85	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv470[ebp], 18 ; 00000012H
  00c8f	eb 27		 jmp	 SHORT $LN166@draw_aircr
$LN165@draw_aircr:
  00c91	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00c97	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00c9d	52		 push	 edx
  00c9e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ca3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00ca8	50		 push	 eax
  00ca9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cae	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv470[ebp], 0
$LN166@draw_aircr:
  00cb8	6a 12		 push	 18			; 00000012H
  00cba	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00cc0	51		 push	 ecx
  00cc1	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv462[ebp], 180
  00ccb	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv470[ebp]
  00cd1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00cd8	ff d1		 call	 ecx
  00cda	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN8@draw_aircr:

; 5156 : 
; 5157 : 		while (threat)

  00ce0	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ce7	0f 84 c1 07 00
	00		 je	 $LN9@draw_aircr

; 5158 : 		{
; 5159 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00ced	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00cf4	74 10		 je	 SHORT $LN167@draw_aircr
  00cf6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00cfc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cfe	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv482[ebp], ecx
  00d04	eb 20		 jmp	 SHORT $LN168@draw_aircr
$LN167@draw_aircr:
  00d06	68 27 14 00 00	 push	 5159			; 00001427H
  00d0b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d10	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d16	52		 push	 edx
  00d17	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d1c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv482[ebp], 0
$LN168@draw_aircr:
  00d26	b8 01 00 00 00	 mov	 eax, 1
  00d2b	85 c0		 test	 eax, eax
  00d2d	74 0c		 je	 SHORT $LN169@draw_aircr
  00d2f	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv489[ebp], 66 ; 00000042H
  00d39	eb 20		 jmp	 SHORT $LN170@draw_aircr
$LN169@draw_aircr:
  00d3b	68 27 14 00 00	 push	 5159			; 00001427H
  00d40	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d45	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d4b	51		 push	 ecx
  00d4c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d51	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv489[ebp], 0
$LN170@draw_aircr:
  00d5b	6a 42		 push	 66			; 00000042H
  00d5d	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00d63	52		 push	 edx
  00d64	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv482[ebp], 1116
  00d6e	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv489[ebp]
  00d74	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00d7b	ff d2		 call	 edx
  00d7d	85 c0		 test	 eax, eax
  00d7f	0f 85 80 06 00
	00		 jne	 $LN35@draw_aircr

; 5160 : 			{
; 5161 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00d85	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00d8c	74 10		 je	 SHORT $LN171@draw_aircr
  00d8e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00d94	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d96	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv501[ebp], ecx
  00d9c	eb 20		 jmp	 SHORT $LN172@draw_aircr
$LN171@draw_aircr:
  00d9e	68 29 14 00 00	 push	 5161			; 00001429H
  00da3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00da8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00dae	52		 push	 edx
  00daf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00db4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN172@draw_aircr:
  00dbe	b8 01 00 00 00	 mov	 eax, 1
  00dc3	85 c0		 test	 eax, eax
  00dc5	74 0c		 je	 SHORT $LN173@draw_aircr
  00dc7	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv508[ebp], 187 ; 000000bbH
  00dd1	eb 20		 jmp	 SHORT $LN174@draw_aircr
$LN173@draw_aircr:
  00dd3	68 29 14 00 00	 push	 5161			; 00001429H
  00dd8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ddd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00de3	51		 push	 ecx
  00de4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00de9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv508[ebp], 0
$LN174@draw_aircr:
  00df3	68 bb 00 00 00	 push	 187			; 000000bbH
  00df8	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00dfe	52		 push	 edx
  00dff	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv501[ebp], 1116
  00e09	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv508[ebp]
  00e0f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00e16	ff d2		 call	 edx
  00e18	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00e1e	0f 84 e1 05 00
	00		 je	 $LN35@draw_aircr

; 5162 : 				{
; 5163 : 					if (get_local_entity_int_value (threat, INT_TYPE_RADAR_ON))

  00e24	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00e2b	74 10		 je	 SHORT $LN175@draw_aircr
  00e2d	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00e33	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e35	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv520[ebp], ecx
  00e3b	eb 20		 jmp	 SHORT $LN176@draw_aircr
$LN175@draw_aircr:
  00e3d	68 2b 14 00 00	 push	 5163			; 0000142bH
  00e42	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e47	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e4d	52		 push	 edx
  00e4e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e53	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv520[ebp], 0
$LN176@draw_aircr:
  00e5d	b8 01 00 00 00	 mov	 eax, 1
  00e62	85 c0		 test	 eax, eax
  00e64	74 0c		 je	 SHORT $LN177@draw_aircr
  00e66	c7 85 98 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv527[ebp], 169 ; 000000a9H
  00e70	eb 20		 jmp	 SHORT $LN178@draw_aircr
$LN177@draw_aircr:
  00e72	68 2b 14 00 00	 push	 5163			; 0000142bH
  00e77	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e7c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e82	51		 push	 ecx
  00e83	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e88	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv527[ebp], 0
$LN178@draw_aircr:
  00e92	68 a9 00 00 00	 push	 169			; 000000a9H
  00e97	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00e9d	52		 push	 edx
  00e9e	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv520[ebp], 1116
  00ea8	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv527[ebp]
  00eae	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00eb5	ff d2		 call	 edx
  00eb7	85 c0		 test	 eax, eax
  00eb9	0f 84 46 05 00
	00		 je	 $LN35@draw_aircr

; 5164 : 					{
; 5165 : 						threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00ebf	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ec6	74 10		 je	 SHORT $LN179@draw_aircr
  00ec8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ece	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ed0	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv540[ebp], ecx
  00ed6	eb 27		 jmp	 SHORT $LN180@draw_aircr
$LN179@draw_aircr:
  00ed8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00ede	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  00ee4	52		 push	 edx
  00ee5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00eea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00eef	50		 push	 eax
  00ef0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ef5	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv540[ebp], 0
$LN180@draw_aircr:
  00eff	b9 01 00 00 00	 mov	 ecx, 1
  00f04	85 c9		 test	 ecx, ecx
  00f06	74 0c		 je	 SHORT $LN181@draw_aircr
  00f08	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv548[ebp], 233 ; 000000e9H
  00f12	eb 27		 jmp	 SHORT $LN182@draw_aircr
$LN181@draw_aircr:
  00f14	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00f1a	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  00f20	52		 push	 edx
  00f21	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f26	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00f2b	50		 push	 eax
  00f2c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f31	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv548[ebp], 0
$LN182@draw_aircr:
  00f3b	68 e9 00 00 00	 push	 233			; 000000e9H
  00f40	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00f46	51		 push	 ecx
  00f47	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv540[ebp], 1116
  00f51	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv548[ebp]
  00f57	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00f5e	ff d1		 call	 ecx
  00f60	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 5166 : 
; 5167 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00f66	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00f6d	74 16		 je	 SHORT $LN31@draw_aircr
  00f6f	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00f76	74 0d		 je	 SHORT $LN31@draw_aircr
  00f78	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00f7f	0f 85 80 04 00
	00		 jne	 $LN35@draw_aircr
$LN31@draw_aircr:

; 5168 : 						{
; 5169 : 							if (get_local_entity_parent (threat, LIST_TYPE_TARGET) == source)

  00f85	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00f8c	74 10		 je	 SHORT $LN183@draw_aircr
  00f8e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00f94	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f96	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv562[ebp], ecx
  00f9c	eb 20		 jmp	 SHORT $LN184@draw_aircr
$LN183@draw_aircr:
  00f9e	68 31 14 00 00	 push	 5169			; 00001431H
  00fa3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fa8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fae	52		 push	 edx
  00faf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fb4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv562[ebp], 0
$LN184@draw_aircr:
  00fbe	b8 01 00 00 00	 mov	 eax, 1
  00fc3	85 c0		 test	 eax, eax
  00fc5	74 0c		 je	 SHORT $LN185@draw_aircr
  00fc7	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv569[ebp], 38 ; 00000026H
  00fd1	eb 20		 jmp	 SHORT $LN186@draw_aircr
$LN185@draw_aircr:
  00fd3	68 31 14 00 00	 push	 5169			; 00001431H
  00fd8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fdd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00fe3	51		 push	 ecx
  00fe4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fe9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv569[ebp], 0
$LN186@draw_aircr:
  00ff3	6a 26		 push	 38			; 00000026H
  00ff5	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00ffb	52		 push	 edx
  00ffc	69 85 9c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv562[ebp], 180
  01006	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv569[ebp]
  0100c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01013	ff d2		 call	 edx
  01015	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  0101b	0f 85 e4 03 00
	00		 jne	 $LN35@draw_aircr

; 5170 : 							{
; 5171 : 								draw_threat_line = TRUE;

  01021	c7 85 f4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$6[ebp], 1

; 5172 : 
; 5173 : 								launched_weapon = get_local_entity_first_child (threat, LIST_TYPE_LAUNCHED_WEAPON);

  0102b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01032	74 10		 je	 SHORT $LN187@draw_aircr
  01034	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0103a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0103c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv582[ebp], ecx
  01042	eb 27		 jmp	 SHORT $LN188@draw_aircr
$LN187@draw_aircr:
  01044	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0104a	81 c2 b6 00 00
	00		 add	 edx, 182		; 000000b6H
  01050	52		 push	 edx
  01051	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0105b	50		 push	 eax
  0105c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01061	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv582[ebp], 0
$LN188@draw_aircr:
  0106b	b9 01 00 00 00	 mov	 ecx, 1
  01070	85 c9		 test	 ecx, ecx
  01072	74 0c		 je	 SHORT $LN189@draw_aircr
  01074	c7 85 98 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv590[ebp], 24 ; 00000018H
  0107e	eb 27		 jmp	 SHORT $LN190@draw_aircr
$LN189@draw_aircr:
  01080	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01086	81 c2 b6 00 00
	00		 add	 edx, 182		; 000000b6H
  0108c	52		 push	 edx
  0108d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01097	50		 push	 eax
  01098	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0109d	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv590[ebp], 0
$LN190@draw_aircr:
  010a7	6a 18		 push	 24			; 00000018H
  010a9	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  010af	51		 push	 ecx
  010b0	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv582[ebp], 180
  010ba	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv590[ebp]
  010c0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  010c7	ff d1		 call	 ecx
  010c9	89 85 00 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax
$LN10@draw_aircr:

; 5174 : 
; 5175 : 								while (launched_weapon)

  010cf	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  010d6	0f 84 ef 01 00
	00		 je	 $LN11@draw_aircr

; 5176 : 								{
; 5177 : 									if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  010dc	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  010e3	74 10		 je	 SHORT $LN191@draw_aircr
  010e5	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  010eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  010ed	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv602[ebp], ecx
  010f3	eb 20		 jmp	 SHORT $LN192@draw_aircr
$LN191@draw_aircr:
  010f5	68 39 14 00 00	 push	 5177			; 00001439H
  010fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  010ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01105	52		 push	 edx
  01106	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0110b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv602[ebp], 0
$LN192@draw_aircr:
  01115	b8 01 00 00 00	 mov	 eax, 1
  0111a	85 c0		 test	 eax, eax
  0111c	74 0c		 je	 SHORT $LN193@draw_aircr
  0111e	c7 85 98 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv609[ebp], 263 ; 00000107H
  01128	eb 20		 jmp	 SHORT $LN194@draw_aircr
$LN193@draw_aircr:
  0112a	68 39 14 00 00	 push	 5177			; 00001439H
  0112f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0113a	51		 push	 ecx
  0113b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01140	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN194@draw_aircr:
  0114a	68 07 01 00 00	 push	 263			; 00000107H
  0114f	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  01155	52		 push	 edx
  01156	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv602[ebp], 1116
  01160	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv609[ebp]
  01166	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0116d	ff d2		 call	 edx
  0116f	85 c0		 test	 eax, eax
  01171	0f 84 ab 00 00
	00		 je	 $LN34@draw_aircr

; 5178 : 									{
; 5179 : 										if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  01177	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  0117e	74 10		 je	 SHORT $LN195@draw_aircr
  01180	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01186	8b 08		 mov	 ecx, DWORD PTR [eax]
  01188	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv621[ebp], ecx
  0118e	eb 20		 jmp	 SHORT $LN196@draw_aircr
$LN195@draw_aircr:
  01190	68 3b 14 00 00	 push	 5179			; 0000143bH
  01195	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0119a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011a0	52		 push	 edx
  011a1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011a6	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv621[ebp], 0
$LN196@draw_aircr:
  011b0	b8 01 00 00 00	 mov	 eax, 1
  011b5	85 c0		 test	 eax, eax
  011b7	74 0c		 je	 SHORT $LN197@draw_aircr
  011b9	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv628[ebp], 38 ; 00000026H
  011c3	eb 20		 jmp	 SHORT $LN198@draw_aircr
$LN197@draw_aircr:
  011c5	68 3b 14 00 00	 push	 5179			; 0000143bH
  011ca	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  011cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  011d5	51		 push	 ecx
  011d6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011db	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv628[ebp], 0
$LN198@draw_aircr:
  011e5	6a 26		 push	 38			; 00000026H
  011e7	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  011ed	52		 push	 edx
  011ee	69 85 9c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv621[ebp], 180
  011f8	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv628[ebp]
  011fe	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01205	ff d2		 call	 edx
  01207	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  0120d	75 13		 jne	 SHORT $LN34@draw_aircr

; 5180 : 										{
; 5181 : 											draw_threat_line = *ase_draw_threat_line_status;

  0120f	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ase_draw_threat_line_status$[ebp]
  01215	8b 08		 mov	 ecx, DWORD PTR [eax]
  01217	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$6[ebp], ecx

; 5182 : 
; 5183 : 											break;

  0121d	e9 a9 00 00 00	 jmp	 $LN11@draw_aircr
$LN34@draw_aircr:

; 5184 : 										}
; 5185 : 									}
; 5186 : 
; 5187 : 									launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01222	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01229	74 10		 je	 SHORT $LN199@draw_aircr
  0122b	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01231	8b 08		 mov	 ecx, DWORD PTR [eax]
  01233	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv641[ebp], ecx
  01239	eb 27		 jmp	 SHORT $LN200@draw_aircr
$LN199@draw_aircr:
  0123b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01241	81 c2 c4 00 00
	00		 add	 edx, 196		; 000000c4H
  01247	52		 push	 edx
  01248	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0124d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01252	50		 push	 eax
  01253	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01258	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv641[ebp], 0
$LN200@draw_aircr:
  01262	b9 01 00 00 00	 mov	 ecx, 1
  01267	85 c9		 test	 ecx, ecx
  01269	74 0c		 je	 SHORT $LN201@draw_aircr
  0126b	c7 85 98 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv649[ebp], 24 ; 00000018H
  01275	eb 27		 jmp	 SHORT $LN202@draw_aircr
$LN201@draw_aircr:
  01277	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0127d	81 c2 c4 00 00
	00		 add	 edx, 196		; 000000c4H
  01283	52		 push	 edx
  01284	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01289	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0128e	50		 push	 eax
  0128f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01294	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv649[ebp], 0
$LN202@draw_aircr:
  0129e	6a 18		 push	 24			; 00000018H
  012a0	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$9[ebp]
  012a6	51		 push	 ecx
  012a7	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv641[ebp], 180
  012b1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv649[ebp]
  012b7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  012be	ff d1		 call	 ecx
  012c0	89 85 00 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax

; 5188 : 								}

  012c6	e9 04 fe ff ff	 jmp	 $LN10@draw_aircr
$LN11@draw_aircr:

; 5189 : 
; 5190 : 								if (draw_threat_line)

  012cb	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$6[ebp], 0
  012d2	0f 84 2d 01 00
	00		 je	 $LN35@draw_aircr

; 5191 : 								{
; 5192 : 									threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  012d8	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  012df	74 10		 je	 SHORT $LN203@draw_aircr
  012e1	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  012e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  012e9	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv662[ebp], ecx
  012ef	eb 27		 jmp	 SHORT $LN204@draw_aircr
$LN203@draw_aircr:
  012f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  012f7	81 c2 c9 00 00
	00		 add	 edx, 201		; 000000c9H
  012fd	52		 push	 edx
  012fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01303	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01308	50		 push	 eax
  01309	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0130e	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv662[ebp], 0
$LN204@draw_aircr:
  01318	b9 01 00 00 00	 mov	 ecx, 1
  0131d	85 c9		 test	 ecx, ecx
  0131f	74 0c		 je	 SHORT $LN205@draw_aircr
  01321	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv670[ebp], 8
  0132b	eb 27		 jmp	 SHORT $LN206@draw_aircr
$LN205@draw_aircr:
  0132d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01333	81 c2 c9 00 00
	00		 add	 edx, 201		; 000000c9H
  01339	52		 push	 edx
  0133a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0133f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01344	50		 push	 eax
  01345	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0134a	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv670[ebp], 0
$LN206@draw_aircr:
  01354	6a 08		 push	 8
  01356	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0135c	51		 push	 ecx
  0135d	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv662[ebp], 96
  01364	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv670[ebp]
  0136a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01371	ff d1		 call	 ecx
  01373	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 5193 : 
; 5194 : 									dx = (threat_position->x - source_position->x) * scale;

  01379	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0137f	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01385	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01389	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0138d	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01395	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 5195 : 									dy = (threat_position->z - source_position->z) * scale;

  0139d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  013a3	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  013a9	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  013ae	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  013b3	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  013bb	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 5196 : 
; 5197 : 									draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  013c3	b8 04 00 00 00	 mov	 eax, 4
  013c8	6b c8 00	 imul	 ecx, eax, 0
  013cb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013d1	52		 push	 edx
  013d2	51		 push	 ecx
  013d3	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  013db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e0	51		 push	 ecx
  013e1	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  013e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013ee	51		 push	 ecx
  013ef	0f 57 c0	 xorps	 xmm0, xmm0
  013f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f7	51		 push	 ecx
  013f8	0f 57 c0	 xorps	 xmm0, xmm0
  013fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01400	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN35@draw_aircr:

; 5198 : 								}
; 5199 : 							}
; 5200 : 						}
; 5201 : 					}
; 5202 : 				}
; 5203 : 			}
; 5204 : 
; 5205 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  01405	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0140c	74 10		 je	 SHORT $LN207@draw_aircr
  0140e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01414	8b 08		 mov	 ecx, DWORD PTR [eax]
  01416	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv697[ebp], ecx
  0141c	eb 27		 jmp	 SHORT $LN208@draw_aircr
$LN207@draw_aircr:
  0141e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01424	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  0142a	52		 push	 edx
  0142b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01430	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01435	50		 push	 eax
  01436	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0143b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv697[ebp], 0
$LN208@draw_aircr:
  01445	b9 01 00 00 00	 mov	 ecx, 1
  0144a	85 c9		 test	 ecx, ecx
  0144c	74 0c		 je	 SHORT $LN209@draw_aircr
  0144e	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv705[ebp], 18 ; 00000012H
  01458	eb 27		 jmp	 SHORT $LN210@draw_aircr
$LN209@draw_aircr:
  0145a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01460	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  01466	52		 push	 edx
  01467	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0146c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01471	50		 push	 eax
  01472	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01477	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv705[ebp], 0
$LN210@draw_aircr:
  01481	6a 12		 push	 18			; 00000012H
  01483	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01489	51		 push	 ecx
  0148a	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv697[ebp], 180
  01494	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv705[ebp]
  0149a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  014a1	ff d1		 call	 ecx
  014a3	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 5206 : 		}

  014a9	e9 32 f8 ff ff	 jmp	 $LN8@draw_aircr
$LN9@draw_aircr:

; 5207 : 
; 5208 : 		//
; 5209 : 		// draw incoming missiles
; 5210 : 		//
; 5211 : 
; 5212 : 		threat = get_local_entity_first_child (source, LIST_TYPE_TARGET);

  014ae	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  014b5	74 10		 je	 SHORT $LN211@draw_aircr
  014b7	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  014bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  014bf	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv717[ebp], ecx
  014c5	eb 27		 jmp	 SHORT $LN212@draw_aircr
$LN211@draw_aircr:
  014c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  014cd	81 c2 dd 00 00
	00		 add	 edx, 221		; 000000ddH
  014d3	52		 push	 edx
  014d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  014d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014de	50		 push	 eax
  014df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014e4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv717[ebp], 0
$LN212@draw_aircr:
  014ee	b9 01 00 00 00	 mov	 ecx, 1
  014f3	85 c9		 test	 ecx, ecx
  014f5	74 0c		 je	 SHORT $LN213@draw_aircr
  014f7	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv725[ebp], 38 ; 00000026H
  01501	eb 27		 jmp	 SHORT $LN214@draw_aircr
$LN213@draw_aircr:
  01503	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01509	81 c2 dd 00 00
	00		 add	 edx, 221		; 000000ddH
  0150f	52		 push	 edx
  01510	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01515	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0151a	50		 push	 eax
  0151b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01520	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv725[ebp], 0
$LN214@draw_aircr:
  0152a	6a 26		 push	 38			; 00000026H
  0152c	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01532	51		 push	 ecx
  01533	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv717[ebp], 180
  0153d	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv725[ebp]
  01543	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0154a	ff d1		 call	 ecx
  0154c	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN12@draw_aircr:

; 5213 : 
; 5214 : 		while (threat)

  01552	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01559	0f 84 39 03 00
	00		 je	 $LN13@draw_aircr

; 5215 : 		{
; 5216 : 			threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  0155f	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01566	74 10		 je	 SHORT $LN215@draw_aircr
  01568	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0156e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01570	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv738[ebp], ecx
  01576	eb 27		 jmp	 SHORT $LN216@draw_aircr
$LN215@draw_aircr:
  01578	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0157e	81 c2 e1 00 00
	00		 add	 edx, 225		; 000000e1H
  01584	52		 push	 edx
  01585	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0158a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0158f	50		 push	 eax
  01590	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01595	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv738[ebp], 0
$LN216@draw_aircr:
  0159f	b9 01 00 00 00	 mov	 ecx, 1
  015a4	85 c9		 test	 ecx, ecx
  015a6	74 0c		 je	 SHORT $LN217@draw_aircr
  015a8	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv746[ebp], 233 ; 000000e9H
  015b2	eb 27		 jmp	 SHORT $LN218@draw_aircr
$LN217@draw_aircr:
  015b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  015ba	81 c2 e1 00 00
	00		 add	 edx, 225		; 000000e1H
  015c0	52		 push	 edx
  015c1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  015c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  015cb	50		 push	 eax
  015cc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015d1	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv746[ebp], 0
$LN218@draw_aircr:
  015db	68 e9 00 00 00	 push	 233			; 000000e9H
  015e0	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  015e6	51		 push	 ecx
  015e7	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv738[ebp], 1116
  015f1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv746[ebp]
  015f7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  015fe	ff d1		 call	 ecx
  01600	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 5217 : 
; 5218 : 			if ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE))

  01606	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _threat_type$7[ebp], 1
  0160d	74 16		 je	 SHORT $LN37@draw_aircr
  0160f	83 bd f8 fe ff
	ff 02		 cmp	 DWORD PTR _threat_type$7[ebp], 2
  01616	74 0d		 je	 SHORT $LN37@draw_aircr
  01618	83 bd f8 fe ff
	ff 03		 cmp	 DWORD PTR _threat_type$7[ebp], 3
  0161f	0f 85 ca 01 00
	00		 jne	 $LN39@draw_aircr
$LN37@draw_aircr:

; 5219 : 			{
; 5220 : 				threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  01625	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0162c	74 10		 je	 SHORT $LN219@draw_aircr
  0162e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01634	8b 08		 mov	 ecx, DWORD PTR [eax]
  01636	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv761[ebp], ecx
  0163c	eb 27		 jmp	 SHORT $LN220@draw_aircr
$LN219@draw_aircr:
  0163e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01644	81 c2 e5 00 00
	00		 add	 edx, 229		; 000000e5H
  0164a	52		 push	 edx
  0164b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01650	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01655	50		 push	 eax
  01656	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0165b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv761[ebp], 0
$LN220@draw_aircr:
  01665	b9 01 00 00 00	 mov	 ecx, 1
  0166a	85 c9		 test	 ecx, ecx
  0166c	74 0c		 je	 SHORT $LN221@draw_aircr
  0166e	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv769[ebp], 8
  01678	eb 27		 jmp	 SHORT $LN222@draw_aircr
$LN221@draw_aircr:
  0167a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01680	81 c2 e5 00 00
	00		 add	 edx, 229		; 000000e5H
  01686	52		 push	 edx
  01687	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0168c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01691	50		 push	 eax
  01692	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01697	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv769[ebp], 0
$LN222@draw_aircr:
  016a1	6a 08		 push	 8
  016a3	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  016a9	51		 push	 ecx
  016aa	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv761[ebp], 96
  016b1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv769[ebp]
  016b7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  016be	ff d1		 call	 ecx
  016c0	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 5221 : 
; 5222 : 				dx = (threat_position->x - source_position->x) * scale;

  016c6	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  016cc	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  016d2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  016d6	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  016da	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  016e2	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 5223 : 				dy = (threat_position->z - source_position->z) * scale;

  016ea	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  016f0	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  016f6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  016fb	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01700	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01708	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 5224 : 
; 5225 : 				if (draw_large_mfd)

  01710	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01717	74 6c		 je	 SHORT $LN38@draw_aircr

; 5226 : 				{
; 5227 : 					draw_2d_mono_sprite (large_ase_missile_mask, dx, dy, MFD_COLOUR6);

  01719	b8 04 00 00 00	 mov	 eax, 4
  0171e	6b c8 05	 imul	 ecx, eax, 5
  01721	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01727	52		 push	 edx
  01728	51		 push	 ecx
  01729	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01731	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01736	51		 push	 ecx
  01737	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0173f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01744	68 00 00 00 00	 push	 OFFSET ?large_ase_missile_mask@@3PADA
  01749	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5228 : 
; 5229 : 					draw_2d_mono_sprite (large_ase_missile, dx, dy, MFD_COLOUR1);

  0174e	b8 04 00 00 00	 mov	 eax, 4
  01753	6b c8 00	 imul	 ecx, eax, 0
  01756	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0175c	52		 push	 edx
  0175d	51		 push	 ecx
  0175e	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01766	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0176b	51		 push	 ecx
  0176c	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01774	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01779	68 00 00 00 00	 push	 OFFSET ?large_ase_missile@@3PADA
  0177e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5230 : 				}
; 5231 : 				else

  01783	eb 6a		 jmp	 SHORT $LN39@draw_aircr
$LN38@draw_aircr:

; 5232 : 				{
; 5233 : 					draw_2d_mono_sprite (small_ase_missile_mask, dx, dy, MFD_COLOUR6);

  01785	b8 04 00 00 00	 mov	 eax, 4
  0178a	6b c8 05	 imul	 ecx, eax, 5
  0178d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01793	52		 push	 edx
  01794	51		 push	 ecx
  01795	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0179d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a2	51		 push	 ecx
  017a3	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  017ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b0	68 00 00 00 00	 push	 OFFSET ?small_ase_missile_mask@@3PADA
  017b5	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5234 : 
; 5235 : 					draw_2d_mono_sprite (small_ase_missile, dx, dy, MFD_COLOUR1);

  017ba	b8 04 00 00 00	 mov	 eax, 4
  017bf	6b c8 00	 imul	 ecx, eax, 0
  017c2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017c8	52		 push	 edx
  017c9	51		 push	 ecx
  017ca	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  017d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017d7	51		 push	 ecx
  017d8	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  017e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017e5	68 00 00 00 00	 push	 OFFSET ?small_ase_missile@@3PADA
  017ea	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN39@draw_aircr:

; 5236 : 				}
; 5237 : 			}
; 5238 : 
; 5239 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  017ef	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  017f6	74 10		 je	 SHORT $LN223@draw_aircr
  017f8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  017fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  01800	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv814[ebp], ecx
  01806	eb 27		 jmp	 SHORT $LN224@draw_aircr
$LN223@draw_aircr:
  01808	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0180e	81 c2 f8 00 00
	00		 add	 edx, 248		; 000000f8H
  01814	52		 push	 edx
  01815	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0181a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0181f	50		 push	 eax
  01820	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01825	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv814[ebp], 0
$LN224@draw_aircr:
  0182f	b9 01 00 00 00	 mov	 ecx, 1
  01834	85 c9		 test	 ecx, ecx
  01836	74 0c		 je	 SHORT $LN225@draw_aircr
  01838	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv822[ebp], 38 ; 00000026H
  01842	eb 27		 jmp	 SHORT $LN226@draw_aircr
$LN225@draw_aircr:
  01844	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0184a	81 c2 f8 00 00
	00		 add	 edx, 248		; 000000f8H
  01850	52		 push	 edx
  01851	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01856	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0185b	50		 push	 eax
  0185c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01861	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv822[ebp], 0
$LN226@draw_aircr:
  0186b	6a 26		 push	 38			; 00000026H
  0186d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01873	51		 push	 ecx
  01874	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv814[ebp], 180
  0187e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv822[ebp]
  01884	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0188b	ff d1		 call	 ecx
  0188d	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 5240 : 		}

  01893	e9 ba fc ff ff	 jmp	 $LN12@draw_aircr
$LN13@draw_aircr:

; 5241 : 
; 5242 : 		set_2d_window_rotation (mfd_env, 0.0);

  01898	51		 push	 ecx
  01899	0f 57 c0	 xorps	 xmm0, xmm0
  0189c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  018a6	50		 push	 eax
  018a7	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5243 : 	}
; 5244 : 
; 5245 : 	////////////////////////////////////////
; 5246 : 	//
; 5247 : 	// aircraft datum symbol
; 5248 : 	//
; 5249 : 	////////////////////////////////////////
; 5250 : 
; 5251 : 	if (draw_large_mfd)

  018ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  018b3	74 58		 je	 SHORT $LN40@draw_aircr

; 5252 : 	{
; 5253 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  018b5	b8 04 00 00 00	 mov	 eax, 4
  018ba	6b c8 05	 imul	 ecx, eax, 5
  018bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018c3	52		 push	 edx
  018c4	51		 push	 ecx
  018c5	0f 57 c0	 xorps	 xmm0, xmm0
  018c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018cd	51		 push	 ecx
  018ce	0f 57 c0	 xorps	 xmm0, xmm0
  018d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d6	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  018db	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5254 : 
; 5255 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  018e0	b8 04 00 00 00	 mov	 eax, 4
  018e5	6b c8 00	 imul	 ecx, eax, 0
  018e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018ee	52		 push	 edx
  018ef	51		 push	 ecx
  018f0	0f 57 c0	 xorps	 xmm0, xmm0
  018f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f8	51		 push	 ecx
  018f9	0f 57 c0	 xorps	 xmm0, xmm0
  018fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01901	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  01906	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5256 : 	}
; 5257 : 	else

  0190b	eb 56		 jmp	 SHORT $LN41@draw_aircr
$LN40@draw_aircr:

; 5258 : 	{
; 5259 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  0190d	b8 04 00 00 00	 mov	 eax, 4
  01912	6b c8 05	 imul	 ecx, eax, 5
  01915	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0191b	52		 push	 edx
  0191c	51		 push	 ecx
  0191d	0f 57 c0	 xorps	 xmm0, xmm0
  01920	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01925	51		 push	 ecx
  01926	0f 57 c0	 xorps	 xmm0, xmm0
  01929	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0192e	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  01933	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5260 : 
; 5261 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  01938	b8 04 00 00 00	 mov	 eax, 4
  0193d	6b c8 00	 imul	 ecx, eax, 0
  01940	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01946	52		 push	 edx
  01947	51		 push	 ecx
  01948	0f 57 c0	 xorps	 xmm0, xmm0
  0194b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01950	51		 push	 ecx
  01951	0f 57 c0	 xorps	 xmm0, xmm0
  01954	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01959	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  0195e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_aircr:

; 5262 : 	}
; 5263 : 
; 5264 : 	set_mono_font_colour (MFD_COLOUR1);

  01963	b8 04 00 00 00	 mov	 eax, 4
  01968	6b c8 00	 imul	 ecx, eax, 0
  0196b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01971	52		 push	 edx
  01972	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5265 : 
; 5266 : 	if (draw_large_mfd)

  01977	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0197e	74 09		 je	 SHORT $LN42@draw_aircr

; 5267 : 	{
; 5268 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  01980	6a 05		 push	 5
  01982	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5269 : 	}
; 5270 : 	else

  01987	eb 07		 jmp	 SHORT $LN43@draw_aircr
$LN42@draw_aircr:

; 5271 : 	{
; 5272 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  01989	6a 01		 push	 1
  0198b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN43@draw_aircr:

; 5273 : 	}
; 5274 : 
; 5275 : 	////////////////////////////////////////
; 5276 : 	//
; 5277 : 	// text
; 5278 : 	//
; 5279 : 	////////////////////////////////////////
; 5280 : 
; 5281 : 	//
; 5282 : 	// closest incoming missile
; 5283 : 	//
; 5284 : 
; 5285 : 	{
; 5286 : 		entity
; 5287 : 			*closest_missile;
; 5288 : 
; 5289 : 		float
; 5290 : 			time_to_impact;
; 5291 : 
; 5292 : 		if (draw_large_mfd)

  01990	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01997	74 12		 je	 SHORT $LN44@draw_aircr

; 5293 : 		{
; 5294 : 			y_adjust = 5.0;

  01999	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  019a1	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5295 : 		}
; 5296 : 		else

  019a9	eb 10		 jmp	 SHORT $LN45@draw_aircr
$LN44@draw_aircr:

; 5297 : 		{
; 5298 : 			y_adjust = 2.0;

  019ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  019b3	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN45@draw_aircr:

; 5299 : 		}
; 5300 : 
; 5301 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_IR_MISSILE, &time_to_impact);

  019bb	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  019c1	50		 push	 eax
  019c2	6a 02		 push	 2
  019c4	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  019ca	51		 push	 ecx
  019cb	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  019d1	52		 push	 edx
  019d2	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  019d7	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5302 : 
; 5303 : 		if (closest_missile)

  019dd	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  019e4	0f 84 b5 00 00
	00		 je	 $LN48@draw_aircr

; 5304 : 		{
; 5305 : 			set_2d_mono_font_position (-1.0, 1.0);

  019ea	51		 push	 ecx
  019eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  019f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f8	51		 push	 ecx
  019f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01a01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a06	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5306 : 
; 5307 : 			set_mono_font_rel_position (1.0, y_adjust);

  01a0b	51		 push	 ecx
  01a0c	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a19	51		 push	 ecx
  01a1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a27	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5308 : 
; 5309 : 			sprintf (buffer, "IR MSL:%.1f", time_to_impact);

  01a2c	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01a34	83 ec 08	 sub	 esp, 8
  01a37	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01a3c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
  01a41	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a47	50		 push	 eax
  01a48	e8 00 00 00 00	 call	 _sprintf
  01a4d	83 c4 10	 add	 esp, 16			; 00000010H

; 5310 : 
; 5311 : 			print_mono_font_string (buffer);

  01a50	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a56	50		 push	 eax
  01a57	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5312 : 
; 5313 : 			if (draw_large_mfd)

  01a5c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a63	74 1e		 je	 SHORT $LN47@draw_aircr

; 5314 : 			{
; 5315 : 				y_adjust += 13.0;

  01a65	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a6d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01a75	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a79	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5316 : 			}
; 5317 : 			else

  01a81	eb 1c		 jmp	 SHORT $LN48@draw_aircr
$LN47@draw_aircr:

; 5318 : 			{
; 5319 : 				y_adjust += 7.0;

  01a83	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a8b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  01a93	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a97	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN48@draw_aircr:

; 5320 : 			}
; 5321 : 		}
; 5322 : 
; 5323 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_RF_MISSILE, &time_to_impact);

  01a9f	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01aa5	50		 push	 eax
  01aa6	6a 01		 push	 1
  01aa8	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01aae	51		 push	 ecx
  01aaf	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ab5	52		 push	 edx
  01ab6	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01abb	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5324 : 
; 5325 : 		if (closest_missile)

  01ac1	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01ac8	0f 84 b5 00 00
	00		 je	 $LN51@draw_aircr

; 5326 : 		{
; 5327 : 			set_2d_mono_font_position (-1.0, 1.0);

  01ace	51		 push	 ecx
  01acf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ad7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01adc	51		 push	 ecx
  01add	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01ae5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aea	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5328 : 
; 5329 : 			set_mono_font_rel_position (1.0, y_adjust);

  01aef	51		 push	 ecx
  01af0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01af8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01afd	51		 push	 ecx
  01afe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b0b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5330 : 
; 5331 : 			sprintf (buffer, "RF MSL:%.1f", time_to_impact);

  01b10	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01b18	83 ec 08	 sub	 esp, 8
  01b1b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01b20	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
  01b25	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b2b	50		 push	 eax
  01b2c	e8 00 00 00 00	 call	 _sprintf
  01b31	83 c4 10	 add	 esp, 16			; 00000010H

; 5332 : 
; 5333 : 			print_mono_font_string (buffer);

  01b34	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b3a	50		 push	 eax
  01b3b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5334 : 
; 5335 : 			if (draw_large_mfd)

  01b40	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01b47	74 1e		 je	 SHORT $LN50@draw_aircr

; 5336 : 			{
; 5337 : 				y_adjust += 13.0;

  01b49	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01b51	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01b59	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b5d	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5338 : 			}
; 5339 : 			else

  01b65	eb 1c		 jmp	 SHORT $LN51@draw_aircr
$LN50@draw_aircr:

; 5340 : 			{
; 5341 : 				y_adjust += 7.0;

  01b67	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01b6f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  01b77	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b7b	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN51@draw_aircr:

; 5342 : 			}
; 5343 : 		}
; 5344 : 
; 5345 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_LASER_MISSILE, &time_to_impact);

  01b83	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01b89	50		 push	 eax
  01b8a	6a 03		 push	 3
  01b8c	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01b92	51		 push	 ecx
  01b93	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01b99	52		 push	 edx
  01b9a	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01b9f	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5346 : 
; 5347 : 		if (closest_missile)

  01ba5	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01bac	74 72		 je	 SHORT $LN52@draw_aircr

; 5348 : 		{
; 5349 : 			set_2d_mono_font_position (-1.0, 1.0);

  01bae	51		 push	 ecx
  01baf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01bb7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbc	51		 push	 ecx
  01bbd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01bc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bca	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5350 : 
; 5351 : 			set_mono_font_rel_position (1.0, y_adjust);

  01bcf	51		 push	 ecx
  01bd0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01bd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdd	51		 push	 ecx
  01bde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01be6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01beb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5352 : 
; 5353 : 			sprintf (buffer, "LS MSL:%.1f", time_to_impact);

  01bf0	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01bf8	83 ec 08	 sub	 esp, 8
  01bfb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01c00	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
  01c05	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01c0b	50		 push	 eax
  01c0c	e8 00 00 00 00	 call	 _sprintf
  01c11	83 c4 10	 add	 esp, 16			; 00000010H

; 5354 : 
; 5355 : 			print_mono_font_string (buffer);

  01c14	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01c1a	50		 push	 eax
  01c1b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN52@draw_aircr:

; 5356 : 		}
; 5357 : 	}
; 5358 : 
; 5359 : 	//
; 5360 : 	// ASE range
; 5361 : 	//
; 5362 : 
; 5363 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  01c20	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c28	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  01c2f	9f		 lahf
  01c30	f6 c4 44	 test	 ah, 68			; 00000044H
  01c33	7a 09		 jp	 SHORT $LN53@draw_aircr

; 5364 : 	{
; 5365 : 		s = "2Km";

  01c35	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  01c3c	eb 61		 jmp	 SHORT $LN60@draw_aircr
$LN53@draw_aircr:

; 5366 : 	}
; 5367 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  01c3e	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c46	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  01c4d	9f		 lahf
  01c4e	f6 c4 44	 test	 ah, 68			; 00000044H
  01c51	7a 09		 jp	 SHORT $LN55@draw_aircr

; 5368 : 	{
; 5369 : 		s = "5Km";

  01c53	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  01c5a	eb 43		 jmp	 SHORT $LN60@draw_aircr
$LN55@draw_aircr:

; 5370 : 	}
; 5371 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  01c5c	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c64	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  01c6b	9f		 lahf
  01c6c	f6 c4 44	 test	 ah, 68			; 00000044H
  01c6f	7a 09		 jp	 SHORT $LN57@draw_aircr

; 5372 : 	{
; 5373 : 		s = "10Km";

  01c71	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  01c78	eb 25		 jmp	 SHORT $LN60@draw_aircr
$LN57@draw_aircr:

; 5374 : 	}
; 5375 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  01c7a	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c82	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  01c89	9f		 lahf
  01c8a	f6 c4 44	 test	 ah, 68			; 00000044H
  01c8d	7a 09		 jp	 SHORT $LN59@draw_aircr

; 5376 : 	{
; 5377 : 		s = "25Km";

  01c8f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 5378 : 	}
; 5379 : 	else

  01c96	eb 07		 jmp	 SHORT $LN60@draw_aircr
$LN59@draw_aircr:

; 5380 : 	{
; 5381 : 		s = "XXX";

  01c98	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN60@draw_aircr:

; 5382 : 	}
; 5383 : 
; 5384 : 	width = get_mono_font_string_width (s);

  01c9f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01ca2	50		 push	 eax
  01ca3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01ca8	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5385 : 
; 5386 : 	if (draw_large_mfd)

  01cae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01cb5	74 2e		 je	 SHORT $LN61@draw_aircr

; 5387 : 	{
; 5388 : 		width += 2.0;

  01cb7	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01cbf	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01cc7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ccb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5389 : 
; 5390 : 		y_adjust = 5.0;

  01cd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01cdb	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5391 : 	}
; 5392 : 	else

  01ce3	eb 2c		 jmp	 SHORT $LN62@draw_aircr
$LN61@draw_aircr:

; 5393 : 	{
; 5394 : 		width += 1.0;

  01ce5	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01ced	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01cf5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cf9	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5395 : 
; 5396 : 		y_adjust = 2.0;

  01d01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01d09	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN62@draw_aircr:

; 5397 : 	}
; 5398 : 
; 5399 : 	set_2d_mono_font_position (1.0, 1.0);

  01d11	51		 push	 ecx
  01d12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d1f	51		 push	 ecx
  01d20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d2d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5400 : 
; 5401 : 	set_mono_font_rel_position (-width, y_adjust);

  01d32	51		 push	 ecx
  01d33	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01d3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d40	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  01d48	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d4f	51		 push	 ecx
  01d50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d55	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5402 : 
; 5403 : 	print_mono_font_string (s);

  01d5a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01d5d	50		 push	 eax
  01d5e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5404 : 
; 5405 : 	//
; 5406 : 	// jammers
; 5407 : 	//
; 5408 : 
; 5409 : 	if (draw_large_mfd)

  01d63	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01d6a	0f 84 d2 00 00
	00		 je	 $LN63@draw_aircr

; 5410 : 	{
; 5411 : 		if (viper_damage.infra_red_jammer)

  01d70	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  01d75	c1 e8 04	 shr	 eax, 4
  01d78	83 e0 01	 and	 eax, 1
  01d7b	74 0c		 je	 SHORT $LN65@draw_aircr

; 5412 : 		{
; 5413 : 			s = "IR JAM XXX";

  01d7d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@

; 5414 : 		}
; 5415 : 		else

  01d84	e9 a4 00 00 00	 jmp	 $LN68@draw_aircr
$LN65@draw_aircr:

; 5416 : 		{
; 5417 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01d89	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01d90	74 10		 je	 SHORT $LN227@draw_aircr
  01d92	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01d98	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d9a	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv981[ebp], ecx
  01da0	eb 20		 jmp	 SHORT $LN228@draw_aircr
$LN227@draw_aircr:
  01da2	68 29 15 00 00	 push	 5417			; 00001529H
  01da7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01dac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01db2	52		 push	 edx
  01db3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01db8	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv981[ebp], 0
$LN228@draw_aircr:
  01dc2	b8 01 00 00 00	 mov	 eax, 1
  01dc7	85 c0		 test	 eax, eax
  01dc9	74 0c		 je	 SHORT $LN229@draw_aircr
  01dcb	c7 85 98 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv988[ebp], 104 ; 00000068H
  01dd5	eb 20		 jmp	 SHORT $LN230@draw_aircr
$LN229@draw_aircr:
  01dd7	68 29 15 00 00	 push	 5417			; 00001529H
  01ddc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01de1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01de7	51		 push	 ecx
  01de8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ded	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv988[ebp], 0
$LN230@draw_aircr:
  01df7	6a 68		 push	 104			; 00000068H
  01df9	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01dff	52		 push	 edx
  01e00	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv981[ebp], 1116
  01e0a	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv988[ebp]
  01e10	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01e17	ff d2		 call	 edx
  01e19	85 c0		 test	 eax, eax
  01e1b	74 09		 je	 SHORT $LN67@draw_aircr

; 5418 : 			{
; 5419 : 				s = "IR JAM ON";

  01e1d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKBKNIAL@IR?5JAM?5ON@

; 5420 : 			}
; 5421 : 			else

  01e24	eb 07		 jmp	 SHORT $LN68@draw_aircr
$LN67@draw_aircr:

; 5422 : 			{
; 5423 : 				s = "IR JAM OFF";

  01e26	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
$LN68@draw_aircr:

; 5424 : 			}
; 5425 : 		}
; 5426 : 
; 5427 : 		y_adjust = -25.0;

  01e2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  01e35	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5428 : 	}
; 5429 : 	else

  01e3d	e9 cd 00 00 00	 jmp	 $LN64@draw_aircr
$LN63@draw_aircr:

; 5430 : 	{
; 5431 : 		if (viper_damage.infra_red_jammer)

  01e42	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  01e47	c1 e8 04	 shr	 eax, 4
  01e4a	83 e0 01	 and	 eax, 1
  01e4d	74 0c		 je	 SHORT $LN69@draw_aircr

; 5432 : 		{
; 5433 : 			s = "IR XXX";

  01e4f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CNPDBJMK@IR?5XXX@

; 5434 : 		}
; 5435 : 		else

  01e56	e9 a4 00 00 00	 jmp	 $LN72@draw_aircr
$LN69@draw_aircr:

; 5436 : 		{
; 5437 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01e5b	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01e62	74 10		 je	 SHORT $LN231@draw_aircr
  01e64	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01e6a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e6c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1003[ebp], ecx
  01e72	eb 20		 jmp	 SHORT $LN232@draw_aircr
$LN231@draw_aircr:
  01e74	68 3d 15 00 00	 push	 5437			; 0000153dH
  01e79	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e7e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e84	52		 push	 edx
  01e85	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e8a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1003[ebp], 0
$LN232@draw_aircr:
  01e94	b8 01 00 00 00	 mov	 eax, 1
  01e99	85 c0		 test	 eax, eax
  01e9b	74 0c		 je	 SHORT $LN233@draw_aircr
  01e9d	c7 85 98 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv1010[ebp], 104 ; 00000068H
  01ea7	eb 20		 jmp	 SHORT $LN234@draw_aircr
$LN233@draw_aircr:
  01ea9	68 3d 15 00 00	 push	 5437			; 0000153dH
  01eae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01eb3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01eb9	51		 push	 ecx
  01eba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ebf	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1010[ebp], 0
$LN234@draw_aircr:
  01ec9	6a 68		 push	 104			; 00000068H
  01ecb	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ed1	52		 push	 edx
  01ed2	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1003[ebp], 1116
  01edc	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1010[ebp]
  01ee2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01ee9	ff d2		 call	 edx
  01eeb	85 c0		 test	 eax, eax
  01eed	74 09		 je	 SHORT $LN71@draw_aircr

; 5438 : 			{
; 5439 : 				s = "IR ON";

  01eef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05JBLHJOBL@IR?5ON@

; 5440 : 			}
; 5441 : 			else

  01ef6	eb 07		 jmp	 SHORT $LN72@draw_aircr
$LN71@draw_aircr:

; 5442 : 			{
; 5443 : 				s = "IR OFF";

  01ef8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CCMEMHEJ@IR?5OFF@
$LN72@draw_aircr:

; 5444 : 			}
; 5445 : 		}
; 5446 : 
; 5447 : 		y_adjust = -12.0;

  01eff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01f07	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN64@draw_aircr:

; 5448 : 	}
; 5449 : 
; 5450 : 	set_2d_mono_font_position (-1.0, -1.0);

  01f0f	51		 push	 ecx
  01f10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f1d	51		 push	 ecx
  01f1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f2b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5451 : 
; 5452 : 	set_mono_font_rel_position (1.0, y_adjust);

  01f30	51		 push	 ecx
  01f31	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01f39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f3e	51		 push	 ecx
  01f3f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01f47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f4c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5453 : 
; 5454 : 	print_mono_font_string (s);

  01f51	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01f54	50		 push	 eax
  01f55	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5455 : 
; 5456 : 	if (draw_large_mfd)

  01f5a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01f61	0f 84 d5 00 00
	00		 je	 $LN73@draw_aircr

; 5457 : 	{
; 5458 : 		if (viper_damage.radar_jammer)

  01f67	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  01f6c	c1 e8 03	 shr	 eax, 3
  01f6f	83 e0 01	 and	 eax, 1
  01f72	74 0c		 je	 SHORT $LN75@draw_aircr

; 5459 : 		{
; 5460 : 			s = "RD JAM XXX";

  01f74	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@

; 5461 : 		}
; 5462 : 		else

  01f7b	e9 a7 00 00 00	 jmp	 $LN78@draw_aircr
$LN75@draw_aircr:

; 5463 : 		{
; 5464 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  01f80	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01f87	74 10		 je	 SHORT $LN235@draw_aircr
  01f89	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01f8f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f91	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1031[ebp], ecx
  01f97	eb 20		 jmp	 SHORT $LN236@draw_aircr
$LN235@draw_aircr:
  01f99	68 58 15 00 00	 push	 5464			; 00001558H
  01f9e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fa3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01fa9	52		 push	 edx
  01faa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01faf	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1031[ebp], 0
$LN236@draw_aircr:
  01fb9	b8 01 00 00 00	 mov	 eax, 1
  01fbe	85 c0		 test	 eax, eax
  01fc0	74 0c		 je	 SHORT $LN237@draw_aircr
  01fc2	c7 85 98 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1038[ebp], 168 ; 000000a8H
  01fcc	eb 20		 jmp	 SHORT $LN238@draw_aircr
$LN237@draw_aircr:
  01fce	68 58 15 00 00	 push	 5464			; 00001558H
  01fd3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fd8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01fde	51		 push	 ecx
  01fdf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01fe4	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1038[ebp], 0
$LN238@draw_aircr:
  01fee	68 a8 00 00 00	 push	 168			; 000000a8H
  01ff3	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ff9	52		 push	 edx
  01ffa	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1031[ebp], 1116
  02004	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1038[ebp]
  0200a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  02011	ff d2		 call	 edx
  02013	85 c0		 test	 eax, eax
  02015	74 09		 je	 SHORT $LN77@draw_aircr

; 5465 : 			{
; 5466 : 				s = "RD JAM ON";

  02017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKIOJJOP@RD?5JAM?5ON@

; 5467 : 			}
; 5468 : 			else

  0201e	eb 07		 jmp	 SHORT $LN78@draw_aircr
$LN77@draw_aircr:

; 5469 : 			{
; 5470 : 				s = "RD JAM OFF";

  02020	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
$LN78@draw_aircr:

; 5471 : 			}
; 5472 : 		}
; 5473 : 
; 5474 : 		y_adjust = -12.0;

  02027	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0202f	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5475 : 	}
; 5476 : 	else

  02037	e9 d0 00 00 00	 jmp	 $LN74@draw_aircr
$LN73@draw_aircr:

; 5477 : 	{
; 5478 : 		if (viper_damage.radar_jammer)

  0203c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  02041	c1 e8 03	 shr	 eax, 3
  02044	83 e0 01	 and	 eax, 1
  02047	74 0c		 je	 SHORT $LN79@draw_aircr

; 5479 : 		{
; 5480 : 			s = "RD XXX";

  02049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JNKFDAHI@RD?5XXX@

; 5481 : 		}
; 5482 : 		else

  02050	e9 a7 00 00 00	 jmp	 $LN82@draw_aircr
$LN79@draw_aircr:

; 5483 : 		{
; 5484 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  02055	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0205c	74 10		 je	 SHORT $LN239@draw_aircr
  0205e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02064	8b 08		 mov	 ecx, DWORD PTR [eax]
  02066	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1053[ebp], ecx
  0206c	eb 20		 jmp	 SHORT $LN240@draw_aircr
$LN239@draw_aircr:
  0206e	68 6c 15 00 00	 push	 5484			; 0000156cH
  02073	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  02078	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0207e	52		 push	 edx
  0207f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02084	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1053[ebp], 0
$LN240@draw_aircr:
  0208e	b8 01 00 00 00	 mov	 eax, 1
  02093	85 c0		 test	 eax, eax
  02095	74 0c		 je	 SHORT $LN241@draw_aircr
  02097	c7 85 98 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1060[ebp], 168 ; 000000a8H
  020a1	eb 20		 jmp	 SHORT $LN242@draw_aircr
$LN241@draw_aircr:
  020a3	68 6c 15 00 00	 push	 5484			; 0000156cH
  020a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  020ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  020b3	51		 push	 ecx
  020b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  020b9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1060[ebp], 0
$LN242@draw_aircr:
  020c3	68 a8 00 00 00	 push	 168			; 000000a8H
  020c8	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  020ce	52		 push	 edx
  020cf	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1053[ebp], 1116
  020d9	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1060[ebp]
  020df	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  020e6	ff d2		 call	 edx
  020e8	85 c0		 test	 eax, eax
  020ea	74 09		 je	 SHORT $LN81@draw_aircr

; 5485 : 			{
; 5486 : 				s = "RD ON";

  020ec	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05BHAGAOGB@RD?5ON@

; 5487 : 			}
; 5488 : 			else

  020f3	eb 07		 jmp	 SHORT $LN82@draw_aircr
$LN81@draw_aircr:

; 5489 : 			{
; 5490 : 				s = "RD OFF";

  020f5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JCJCOOPL@RD?5OFF@
$LN82@draw_aircr:

; 5491 : 			}
; 5492 : 		}
; 5493 : 
; 5494 : 		y_adjust = -5.0;

  020fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02104	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN74@draw_aircr:

; 5495 : 	}
; 5496 : 
; 5497 : 	set_2d_mono_font_position (-1.0, -1.0);

  0210c	51		 push	 ecx
  0210d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0211a	51		 push	 ecx
  0211b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02128	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5498 : 
; 5499 : 	set_mono_font_rel_position (1.0, y_adjust);

  0212d	51		 push	 ecx
  0212e	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0213b	51		 push	 ecx
  0213c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02149	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5500 : 
; 5501 : 	print_mono_font_string (s);

  0214e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02151	50		 push	 eax
  02152	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5502 : 
; 5503 : 	//
; 5504 : 	// auto-countermeasures
; 5505 : 	//
; 5506 : 
; 5507 : 	if (get_global_auto_counter_measures ())

  02157	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  0215e	0f 84 16 01 00
	00		 je	 $LN83@draw_aircr

; 5508 : 	{
; 5509 : 		s = "AUTO";

  02164	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04LMMJFDCN@AUTO@

; 5510 : 
; 5511 : 		width = get_mono_font_string_width (s);

  0216b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0216e	50		 push	 eax
  0216f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02174	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5512 : 
; 5513 : 		if (draw_large_mfd)

  0217a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02181	74 2e		 je	 SHORT $LN84@draw_aircr

; 5514 : 		{
; 5515 : 			width += 2.0;

  02183	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0218b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02193	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02197	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5516 : 
; 5517 : 			y_adjust = -38.0;

  0219f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  021a7	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5518 : 		}
; 5519 : 		else

  021af	eb 2c		 jmp	 SHORT $LN85@draw_aircr
$LN84@draw_aircr:

; 5520 : 		{
; 5521 : 			width += 1.0;

  021b1	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  021b9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  021c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021c5	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5522 : 
; 5523 : 			y_adjust = -19.0;

  021cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  021d5	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN85@draw_aircr:

; 5524 : 		}
; 5525 : 
; 5526 : 		set_2d_mono_font_position (-1.0, -1.0);

  021dd	51		 push	 ecx
  021de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  021e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021eb	51		 push	 ecx
  021ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  021f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5527 : 
; 5528 : 		set_mono_font_rel_position (1.0, y_adjust);

  021fe	51		 push	 ecx
  021ff	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0220c	51		 push	 ecx
  0220d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0221a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5529 : 
; 5530 : 		print_mono_font_string (s);

  0221f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02222	50		 push	 eax
  02223	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5531 : 
; 5532 : 		set_2d_mono_font_position (1.0, -1.0);

  02228	51		 push	 ecx
  02229	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02236	51		 push	 ecx
  02237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0223f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02244	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5533 : 
; 5534 : 		set_mono_font_rel_position (-width, y_adjust);

  02249	51		 push	 ecx
  0224a	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02257	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0225f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02266	51		 push	 ecx
  02267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0226c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5535 : 
; 5536 : 		print_mono_font_string (s);

  02271	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02274	50		 push	 eax
  02275	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN83@draw_aircr:

; 5537 : 	}
; 5538 : 
; 5539 : 	//
; 5540 : 	// chaff
; 5541 : 	//
; 5542 : 
; 5543 : 	if (draw_large_mfd)

  0227a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02281	0f 84 89 00 00
	00		 je	 $LN86@draw_aircr

; 5544 : 	{
; 5545 : 		if (viper_damage.chaff_dispenser)

  02287	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0228c	c1 e8 17	 shr	 eax, 23			; 00000017H
  0228f	83 e0 01	 and	 eax, 1
  02292	74 16		 je	 SHORT $LN88@draw_aircr

; 5546 : 		{
; 5547 : 			sprintf (buffer, "CHAFF:XX");

  02294	68 00 00 00 00	 push	 OFFSET ??_C@_08GHAEIHAP@CHAFF?3XX@
  02299	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0229f	50		 push	 eax
  022a0	e8 00 00 00 00	 call	 _sprintf
  022a5	83 c4 08	 add	 esp, 8

; 5548 : 		}
; 5549 : 		else

  022a8	eb 23		 jmp	 SHORT $LN89@draw_aircr
$LN88@draw_aircr:

; 5550 : 		{
; 5551 : 			sprintf (buffer, "CHAFF:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  022aa	6a 43		 push	 67			; 00000043H
  022ac	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  022b2	50		 push	 eax
  022b3	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  022b8	50		 push	 eax
  022b9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
  022be	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  022c4	51		 push	 ecx
  022c5	e8 00 00 00 00	 call	 _sprintf
  022ca	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN89@draw_aircr:

; 5552 : 		}
; 5553 : 
; 5554 : 		width = get_mono_font_string_width (buffer);

  022cd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022d3	50		 push	 eax
  022d4	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  022d9	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5555 : 
; 5556 : 		width += 2.0;

  022df	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  022e7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  022ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  022f3	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5557 : 
; 5558 : 		y_adjust = -25.0;

  022fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  02303	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5559 : 	}
; 5560 : 	else

  0230b	e9 84 00 00 00	 jmp	 $LN87@draw_aircr
$LN86@draw_aircr:

; 5561 : 	{
; 5562 : 		if (viper_damage.chaff_dispenser)

  02310	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  02315	c1 e8 17	 shr	 eax, 23			; 00000017H
  02318	83 e0 01	 and	 eax, 1
  0231b	74 16		 je	 SHORT $LN90@draw_aircr

; 5563 : 		{
; 5564 : 			sprintf (buffer, "C:XX");

  0231d	68 00 00 00 00	 push	 OFFSET ??_C@_04KJNFJKOK@C?3XX@
  02322	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02328	50		 push	 eax
  02329	e8 00 00 00 00	 call	 _sprintf
  0232e	83 c4 08	 add	 esp, 8

; 5565 : 		}
; 5566 : 		else

  02331	eb 23		 jmp	 SHORT $LN91@draw_aircr
$LN90@draw_aircr:

; 5567 : 		{
; 5568 : 			sprintf (buffer, "C:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  02333	6a 43		 push	 67			; 00000043H
  02335	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0233b	50		 push	 eax
  0233c	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02341	50		 push	 eax
  02342	68 00 00 00 00	 push	 OFFSET ??_C@_06GNOFKMCG@C?3?$CF02d@
  02347	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0234d	51		 push	 ecx
  0234e	e8 00 00 00 00	 call	 _sprintf
  02353	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN91@draw_aircr:

; 5569 : 		}
; 5570 : 
; 5571 : 		width = get_mono_font_string_width (buffer);

  02356	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0235c	50		 push	 eax
  0235d	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02362	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5572 : 
; 5573 : 		width += 1.0;

  02368	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02370	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02378	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0237c	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5574 : 
; 5575 : 		y_adjust = -12.0;

  02384	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0238c	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN87@draw_aircr:

; 5576 : 	}
; 5577 : 
; 5578 : 	set_2d_mono_font_position (1.0, -1.0);

  02394	51		 push	 ecx
  02395	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0239d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023a2	51		 push	 ecx
  023a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  023ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023b0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5579 : 
; 5580 : 	set_mono_font_rel_position (-width, y_adjust);

  023b5	51		 push	 ecx
  023b6	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  023be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023c3	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  023cb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  023d2	51		 push	 ecx
  023d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023d8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5581 : 
; 5582 : 	print_mono_font_string (buffer);

  023dd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  023e3	50		 push	 eax
  023e4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5583 : 
; 5584 : 	//
; 5585 : 	// flares
; 5586 : 	//
; 5587 : 
; 5588 : 	if (draw_large_mfd)

  023e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  023f0	0f 84 89 00 00
	00		 je	 $LN92@draw_aircr

; 5589 : 	{
; 5590 : 		if (viper_damage.flare_dispenser)

  023f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  023fb	c1 e8 18	 shr	 eax, 24			; 00000018H
  023fe	83 e0 01	 and	 eax, 1
  02401	74 16		 je	 SHORT $LN94@draw_aircr

; 5591 : 		{
; 5592 : 			sprintf (buffer, "FLARE:XX");

  02403	68 00 00 00 00	 push	 OFFSET ??_C@_08HGDOPGOH@FLARE?3XX@
  02408	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0240e	50		 push	 eax
  0240f	e8 00 00 00 00	 call	 _sprintf
  02414	83 c4 08	 add	 esp, 8

; 5593 : 		}
; 5594 : 		else

  02417	eb 23		 jmp	 SHORT $LN95@draw_aircr
$LN94@draw_aircr:

; 5595 : 		{
; 5596 : 			sprintf (buffer, "FLARE:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  02419	6a 44		 push	 68			; 00000044H
  0241b	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02421	50		 push	 eax
  02422	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02427	50		 push	 eax
  02428	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
  0242d	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02433	51		 push	 ecx
  02434	e8 00 00 00 00	 call	 _sprintf
  02439	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN95@draw_aircr:

; 5597 : 		}
; 5598 : 
; 5599 : 		width = get_mono_font_string_width (buffer);

  0243c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02442	50		 push	 eax
  02443	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02448	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5600 : 
; 5601 : 		width += 2.0;

  0244e	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02456	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0245e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02462	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5602 : 
; 5603 : 		y_adjust = -12.0;

  0246a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02472	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5604 : 	}
; 5605 : 	else

  0247a	e9 84 00 00 00	 jmp	 $LN93@draw_aircr
$LN92@draw_aircr:

; 5606 : 	{
; 5607 : 		if (viper_damage.flare_dispenser)

  0247f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  02484	c1 e8 18	 shr	 eax, 24			; 00000018H
  02487	83 e0 01	 and	 eax, 1
  0248a	74 16		 je	 SHORT $LN96@draw_aircr

; 5608 : 		{
; 5609 : 			sprintf (buffer, "F:XX");

  0248c	68 00 00 00 00	 push	 OFFSET ??_C@_04GBDFBFJK@F?3XX@
  02491	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02497	50		 push	 eax
  02498	e8 00 00 00 00	 call	 _sprintf
  0249d	83 c4 08	 add	 esp, 8

; 5610 : 		}
; 5611 : 		else

  024a0	eb 23		 jmp	 SHORT $LN97@draw_aircr
$LN96@draw_aircr:

; 5612 : 		{
; 5613 : 			sprintf (buffer, "F:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  024a2	6a 44		 push	 68			; 00000044H
  024a4	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  024aa	50		 push	 eax
  024ab	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  024b0	50		 push	 eax
  024b1	68 00 00 00 00	 push	 OFFSET ??_C@_06DPNNIDIB@F?3?$CF02d@
  024b6	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  024bc	51		 push	 ecx
  024bd	e8 00 00 00 00	 call	 _sprintf
  024c2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN97@draw_aircr:

; 5614 : 		}
; 5615 : 
; 5616 : 		width = get_mono_font_string_width (buffer);

  024c5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  024cb	50		 push	 eax
  024cc	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  024d1	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5617 : 
; 5618 : 		width += 1.0;

  024d7	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  024df	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  024e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  024eb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5619 : 
; 5620 : 		y_adjust = -5.0;

  024f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  024fb	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN93@draw_aircr:

; 5621 : 	}
; 5622 : 
; 5623 : 	set_2d_mono_font_position (1.0, -1.0);

  02503	51		 push	 ecx
  02504	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0250c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02511	51		 push	 ecx
  02512	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0251a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0251f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5624 : 
; 5625 : 	set_mono_font_rel_position (-width, y_adjust);

  02524	51		 push	 ecx
  02525	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0252d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02532	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0253a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02541	51		 push	 ecx
  02542	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02547	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5626 : 
; 5627 : 	print_mono_font_string (buffer);

  0254c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02552	50		 push	 eax
  02553	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5628 : }

  02558	5f		 pop	 edi
  02559	5e		 pop	 esi
  0255a	5b		 pop	 ebx
  0255b	8b e5		 mov	 esp, ebp
  0255d	5d		 pop	 ebp
  0255e	c2 04 00	 ret	 4
  02561	0f 1f 00	 npad	 3
$LN243@draw_aircr:
  02564	00 00 00 00	 DD	 $LN16@draw_aircr
  02568	00 00 00 00	 DD	 $LN16@draw_aircr
  0256c	00 00 00 00	 DD	 $LN17@draw_aircr
  02570	00 00 00 00	 DD	 $LN17@draw_aircr
?draw_aircraft_survivability_equipment_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ENDP ; draw_aircraft_survivability_equipment_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z
_TEXT	SEGMENT
tv253 = -128						; size = 4
tv190 = -128						; size = 4
tv167 = -128						; size = 4
tv146 = -128						; size = 4
tv95 = -128						; size = 4
tv245 = -124						; size = 4
tv223 = -124						; size = 4
tv182 = -124						; size = 4
tv159 = -124						; size = 4
tv139 = -124						; size = 4
tv87 = -124						; size = 4
$T1 = -120						; size = 4
_attitude$ = -52					; size = 4
_uvec_threat_to_target$ = -48				; size = 12
_threat_position$ = -36					; size = 4
_cos_error$ = -32					; size = 4
_length$ = -28						; size = 4
_time_to_impact$ = -24					; size = 4
_threat_velocity$ = -20					; size = 4
_threat_range$ = -16					; size = 4
_overshot$ = -12					; size = 4
_closest_missile$ = -8					; size = 4
_threat$ = -4						; size = 4
_source$ = 8						; size = 4
_source_position$ = 12					; size = 4
_threat_type$ = 16					; size = 4
_closest_missile_time_to_impact$ = 20			; size = 4
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z PROC ; get_closest_missile, COMDAT

; 4888 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4889 : 	entity
; 4890 : 		*threat,
; 4891 : 		*closest_missile;
; 4892 : 
; 4893 : 	int
; 4894 : 		overshot;
; 4895 : 
; 4896 : 	float
; 4897 : 		threat_range,
; 4898 : 		threat_velocity,
; 4899 : 		time_to_impact,
; 4900 : 		length,
; 4901 : 		cos_error;
; 4902 : 
; 4903 : 	vec3d
; 4904 : 		*threat_position,
; 4905 : 		uvec_threat_to_target;
; 4906 : 
; 4907 : 	matrix3x3
; 4908 : 		*attitude;
; 4909 : 
; 4910 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@get_closes
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_closes:

; 4911 : 
; 4912 : 	ASSERT (source_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN5@get_closes
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_closes:

; 4913 : 
; 4914 : 	ASSERT ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE));

  00048	83 7d 10 01	 cmp	 DWORD PTR _threat_type$[ebp], 1
  0004c	74 24		 je	 SHORT $LN6@get_closes
  0004e	83 7d 10 02	 cmp	 DWORD PTR _threat_type$[ebp], 2
  00052	74 1e		 je	 SHORT $LN6@get_closes
  00054	83 7d 10 03	 cmp	 DWORD PTR _threat_type$[ebp], 3
  00058	74 18		 je	 SHORT $LN6@get_closes
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0005f	83 c0 1a	 add	 eax, 26			; 0000001aH
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_closes:

; 4915 : 
; 4916 : 	closest_missile = NULL;

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _closest_missile$[ebp], 0

; 4917 : 
; 4918 : 	*closest_missile_time_to_impact = 1000000.0;

  00079	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49742400
  00084	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 4919 : 
; 4920 : 	threat = get_local_entity_first_child (get_gunship_entity (), LIST_TYPE_TARGET);

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008f	74 0c		 je	 SHORT $LN15@get_closes
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	89 4d 84	 mov	 DWORD PTR tv87[ebp], ecx
  0009b	eb 21		 jmp	 SHORT $LN16@get_closes
$LN15@get_closes:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000a3	83 c2 20	 add	 edx, 32			; 00000020H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN16@get_closes:
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 09		 je	 SHORT $LN17@get_closes
  000c7	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv95[ebp], 38	; 00000026H
  000ce	eb 21		 jmp	 SHORT $LN18@get_closes
$LN17@get_closes:
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000d6	83 c2 20	 add	 edx, 32			; 00000020H
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ea	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN18@get_closes:
  000f1	6a 26		 push	 38			; 00000026H
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f9	51		 push	 ecx
  000fa	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 180
  00101	8b 45 80	 mov	 eax, DWORD PTR tv95[ebp]
  00104	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0010b	ff d1		 call	 ecx
  0010d	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax
$LN2@get_closes:

; 4921 : 
; 4922 : 	while (threat)

  00110	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00114	0f 84 74 03 00
	00		 je	 $LN3@get_closes

; 4923 : 	{
; 4924 : 		if (get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE) == threat_type)

  0011a	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0011e	74 0a		 je	 SHORT $LN19@get_closes
  00120	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	89 4d 84	 mov	 DWORD PTR tv139[ebp], ecx
  00128	eb 1d		 jmp	 SHORT $LN20@get_closes
$LN19@get_closes:
  0012a	68 3c 13 00 00	 push	 4924			; 0000133cH
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00140	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN20@get_closes:
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	74 09		 je	 SHORT $LN21@get_closes
  00150	c7 45 80 e9 00
	00 00		 mov	 DWORD PTR tv146[ebp], 233 ; 000000e9H
  00157	eb 1d		 jmp	 SHORT $LN22@get_closes
$LN21@get_closes:
  00159	68 3c 13 00 00	 push	 4924			; 0000133cH
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN22@get_closes:
  00176	68 e9 00 00 00	 push	 233			; 000000e9H
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _threat$[ebp]
  0017e	52		 push	 edx
  0017f	69 45 84 5c 04
	00 00		 imul	 eax, DWORD PTR tv139[ebp], 1116
  00186	8b 4d 80	 mov	 ecx, DWORD PTR tv146[ebp]
  00189	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00190	ff d2		 call	 edx
  00192	3b 45 10	 cmp	 eax, DWORD PTR _threat_type$[ebp]
  00195	0f 85 6e 02 00
	00		 jne	 $LN13@get_closes

; 4925 : 		{
; 4926 : 			threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0019b	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0019f	74 0a		 je	 SHORT $LN23@get_closes
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	89 4d 84	 mov	 DWORD PTR tv159[ebp], ecx
  001a9	eb 21		 jmp	 SHORT $LN24@get_closes
$LN23@get_closes:
  001ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001b1	83 c2 26	 add	 edx, 38			; 00000026H
  001b4	52		 push	 edx
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c5	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN24@get_closes:
  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 09		 je	 SHORT $LN25@get_closes
  001d5	c7 45 80 08 00
	00 00		 mov	 DWORD PTR tv167[ebp], 8
  001dc	eb 21		 jmp	 SHORT $LN26@get_closes
$LN25@get_closes:
  001de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001e4	83 c2 26	 add	 edx, 38			; 00000026H
  001e7	52		 push	 edx
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN26@get_closes:
  001ff	6a 08		 push	 8
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00204	51		 push	 ecx
  00205	6b 55 84 60	 imul	 edx, DWORD PTR tv159[ebp], 96
  00209	8b 45 80	 mov	 eax, DWORD PTR tv167[ebp]
  0020c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00213	ff d1		 call	 ecx
  00215	89 45 dc	 mov	 DWORD PTR _threat_position$[ebp], eax

; 4927 : 
; 4928 : 			threat_range = get_3d_range (source_position, threat_position);

  00218	8b 45 dc	 mov	 eax, DWORD PTR _threat_position$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00225	d9 5d f0	 fstp	 DWORD PTR _threat_range$[ebp]

; 4929 : 
; 4930 : 			threat_velocity = get_local_entity_float_value (threat, FLOAT_TYPE_VELOCITY);

  00228	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0022c	74 0a		 je	 SHORT $LN27@get_closes
  0022e	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00231	8b 08		 mov	 ecx, DWORD PTR [eax]
  00233	89 4d 84	 mov	 DWORD PTR tv182[ebp], ecx
  00236	eb 21		 jmp	 SHORT $LN28@get_closes
$LN27@get_closes:
  00238	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0023e	83 c2 2a	 add	 edx, 42			; 0000002aH
  00241	52		 push	 edx
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00252	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN28@get_closes:
  00259	b9 01 00 00 00	 mov	 ecx, 1
  0025e	85 c9		 test	 ecx, ecx
  00260	74 09		 je	 SHORT $LN29@get_closes
  00262	c7 45 80 93 00
	00 00		 mov	 DWORD PTR tv190[ebp], 147 ; 00000093H
  00269	eb 21		 jmp	 SHORT $LN30@get_closes
$LN29@get_closes:
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00271	83 c2 2a	 add	 edx, 42			; 0000002aH
  00274	52		 push	 edx
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00285	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN30@get_closes:
  0028c	68 93 00 00 00	 push	 147			; 00000093H
  00291	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00294	51		 push	 ecx
  00295	69 55 84 bc 02
	00 00		 imul	 edx, DWORD PTR tv182[ebp], 700
  0029c	8b 45 80	 mov	 eax, DWORD PTR tv190[ebp]
  0029f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002a6	ff d1		 call	 ecx
  002a8	d9 5d ec	 fstp	 DWORD PTR _threat_velocity$[ebp]

; 4931 : 
; 4932 : 			time_to_impact = threat_range / max (threat_velocity, 1.0f);

  002ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b3	f3 0f 11 45 88	 movss	 DWORD PTR $T1[ebp], xmm0
  002b8	8d 45 88	 lea	 eax, DWORD PTR $T1[ebp]
  002bb	50		 push	 eax
  002bc	8d 4d ec	 lea	 ecx, DWORD PTR _threat_velocity$[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002c5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _threat_range$[ebp]
  002ca	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  002ce	f3 0f 11 45 e8	 movss	 DWORD PTR _time_to_impact$[ebp], xmm0

; 4933 : 
; 4934 : 			//
; 4935 : 			// guard against 'overshot target' to prevent spurious indications
; 4936 : 			//
; 4937 : 
; 4938 : 			overshot = FALSE;

  002d3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 0

; 4939 : 
; 4940 : 			if (time_to_impact < 1.0)

  002da	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _time_to_impact$[ebp]
  002df	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002e7	66 0f 2f c8	 comisd	 xmm1, xmm0
  002eb	0f 86 f3 00 00
	00		 jbe	 $LN10@get_closes

; 4941 : 			{
; 4942 : 				uvec_threat_to_target.x = source_position->x - threat_position->x;

  002f1	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  002f4	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  002f7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002fb	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  002ff	f3 0f 11 45 d0	 movss	 DWORD PTR _uvec_threat_to_target$[ebp], xmm0

; 4943 : 				uvec_threat_to_target.y = source_position->y - threat_position->y;

  00304	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  00307	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0030a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0030f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00314	f3 0f 11 45 d4	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+4], xmm0

; 4944 : 				uvec_threat_to_target.z = source_position->z - threat_position->z;

  00319	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  0031c	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0031f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00324	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00329	f3 0f 11 45 d8	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+8], xmm0

; 4945 : 
; 4946 : 				length = get_3d_vector_magnitude (&uvec_threat_to_target);

  0032e	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00337	d9 5d e4	 fstp	 DWORD PTR _length$[ebp]

; 4947 : 
; 4948 : 				if (length > 1.0)

  0033a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0033f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00347	0f 86 90 00 00
	00		 jbe	 $LN9@get_closes

; 4949 : 				{
; 4950 : 					normalise_3d_vector_given_magnitude (&uvec_threat_to_target, length);

  0034d	51		 push	 ecx
  0034e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _length$[ebp]
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 4951 : 
; 4952 : 					attitude = get_local_entity_attitude_matrix_ptr (threat);

  00361	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00365	74 0a		 je	 SHORT $LN31@get_closes
  00367	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  0036a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036c	89 4d 84	 mov	 DWORD PTR tv223[ebp], ecx
  0036f	eb 21		 jmp	 SHORT $LN32@get_closes
$LN31@get_closes:
  00371	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00377	83 c2 40	 add	 edx, 64			; 00000040H
  0037a	52		 push	 edx
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00380	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN32@get_closes:
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00395	51		 push	 ecx
  00396	8b 55 84	 mov	 edx, DWORD PTR tv223[ebp]
  00399	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  003a0	ff d0		 call	 eax
  003a2	89 45 cc	 mov	 DWORD PTR _attitude$[ebp], eax

; 4953 : 
; 4954 : 					cos_error = get_3d_unit_vector_dot_product ((vec3d *) &((*attitude) [2][0]), &uvec_threat_to_target);

  003a5	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  003a8	50		 push	 eax
  003a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003ae	d1 e1		 shl	 ecx, 1
  003b0	03 4d cc	 add	 ecx, DWORD PTR _attitude$[ebp]
  003b3	ba 04 00 00 00	 mov	 edx, 4
  003b8	6b c2 00	 imul	 eax, edx, 0
  003bb	03 c8		 add	 ecx, eax
  003bd	51		 push	 ecx
  003be	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  003c3	d9 5d e0	 fstp	 DWORD PTR _cos_error$[ebp]

; 4955 : 
; 4956 : 					if (cos_error < 0.0)

  003c6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _cos_error$[ebp]
  003cb	0f 57 c9	 xorps	 xmm1, xmm1
  003ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  003d2	76 07		 jbe	 SHORT $LN11@get_closes

; 4957 : 					{
; 4958 : 						overshot = TRUE;

  003d4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN11@get_closes:

; 4959 : 					}
; 4960 : 				}
; 4961 : 				else

  003db	eb 07		 jmp	 SHORT $LN10@get_closes
$LN9@get_closes:

; 4962 : 				{
; 4963 : 					overshot = TRUE;

  003dd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN10@get_closes:

; 4964 : 				}
; 4965 : 			}
; 4966 : 
; 4967 : 			if (!overshot)

  003e4	83 7d f4 00	 cmp	 DWORD PTR _overshot$[ebp], 0
  003e8	75 1f		 jne	 SHORT $LN13@get_closes

; 4968 : 			{
; 4969 : 				if (time_to_impact < *closest_missile_time_to_impact)

  003ea	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  003ed	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f1	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  003f5	76 12		 jbe	 SHORT $LN13@get_closes

; 4970 : 				{
; 4971 : 					closest_missile = threat;

  003f7	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  003fa	89 45 f8	 mov	 DWORD PTR _closest_missile$[ebp], eax

; 4972 : 
; 4973 : 					*closest_missile_time_to_impact = time_to_impact;

  003fd	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  00400	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  00405	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN13@get_closes:

; 4974 : 				}
; 4975 : 			}
; 4976 : 		}
; 4977 : 
; 4978 : 		threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  00409	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0040d	74 0a		 je	 SHORT $LN33@get_closes
  0040f	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00412	8b 08		 mov	 ecx, DWORD PTR [eax]
  00414	89 4d 84	 mov	 DWORD PTR tv245[ebp], ecx
  00417	eb 21		 jmp	 SHORT $LN34@get_closes
$LN33@get_closes:
  00419	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0041f	83 c2 5a	 add	 edx, 90			; 0000005aH
  00422	52		 push	 edx
  00423	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00433	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], 0
$LN34@get_closes:
  0043a	b9 01 00 00 00	 mov	 ecx, 1
  0043f	85 c9		 test	 ecx, ecx
  00441	74 09		 je	 SHORT $LN35@get_closes
  00443	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv253[ebp], 38 ; 00000026H
  0044a	eb 21		 jmp	 SHORT $LN36@get_closes
$LN35@get_closes:
  0044c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00452	83 c2 5a	 add	 edx, 90			; 0000005aH
  00455	52		 push	 edx
  00456	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0045b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00466	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv253[ebp], 0
$LN36@get_closes:
  0046d	6a 26		 push	 38			; 00000026H
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00472	51		 push	 ecx
  00473	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv245[ebp], 180
  0047a	8b 45 80	 mov	 eax, DWORD PTR tv253[ebp]
  0047d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00484	ff d1		 call	 ecx
  00486	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax

; 4979 : 	}

  00489	e9 82 fc ff ff	 jmp	 $LN2@get_closes
$LN3@get_closes:

; 4980 : 
; 4981 : 	return (closest_missile);

  0048e	8b 45 f8	 mov	 eax, DWORD PTR _closest_missile$[ebp]

; 4982 : }

  00491	5f		 pop	 edi
  00492	5e		 pop	 esi
  00493	5b		 pop	 ebx
  00494	8b e5		 mov	 esp, ebp
  00496	5d		 pop	 ebp
  00497	c2 10 00	 ret	 16			; 00000010H
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ENDP ; get_closest_missile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv2204 = -460						; size = 4
tv1931 = -460						; size = 4
tv1361 = -456						; size = 4
tv1332 = -456						; size = 4
tv1296 = -456						; size = 4
tv1223 = -456						; size = 4
tv1139 = -456						; size = 4
tv1081 = -456						; size = 4
tv1046 = -456						; size = 4
tv1025 = -456						; size = 4
tv1004 = -456						; size = 4
tv985 = -456						; size = 4
tv966 = -456						; size = 4
tv913 = -456						; size = 4
tv892 = -456						; size = 4
tv871 = -456						; size = 4
tv852 = -456						; size = 4
tv833 = -456						; size = 4
tv814 = -456						; size = 4
tv782 = -456						; size = 4
tv750 = -456						; size = 4
tv731 = -456						; size = 4
tv711 = -456						; size = 4
tv670 = -456						; size = 4
tv642 = -456						; size = 4
tv620 = -456						; size = 4
tv599 = -456						; size = 4
tv580 = -456						; size = 4
tv561 = -456						; size = 4
tv524 = -456						; size = 4
tv471 = -456						; size = 4
tv398 = -456						; size = 4
tv337 = -456						; size = 4
tv178 = -456						; size = 4
tv158 = -456						; size = 4
tv138 = -456						; size = 4
tv86 = -456						; size = 4
tv1353 = -452						; size = 4
tv1324 = -452						; size = 4
tv1288 = -452						; size = 4
tv1215 = -452						; size = 4
tv1162 = -452						; size = 4
tv1154 = -452						; size = 4
tv1131 = -452						; size = 4
tv1073 = -452						; size = 4
tv1038 = -452						; size = 4
tv1017 = -452						; size = 4
tv997 = -452						; size = 4
tv978 = -452						; size = 4
tv926 = -452						; size = 4
tv906 = -452						; size = 4
tv884 = -452						; size = 4
tv864 = -452						; size = 4
tv845 = -452						; size = 4
tv826 = -452						; size = 4
tv806 = -452						; size = 4
tv774 = -452						; size = 4
tv743 = -452						; size = 4
tv723 = -452						; size = 4
tv703 = -452						; size = 4
tv662 = -452						; size = 4
tv634 = -452						; size = 4
tv612 = -452						; size = 4
tv592 = -452						; size = 4
tv573 = -452						; size = 4
tv553 = -452						; size = 4
tv516 = -452						; size = 4
tv463 = -452						; size = 4
tv390 = -452						; size = 4
tv329 = -452						; size = 4
tv170 = -452						; size = 4
tv150 = -452						; size = 4
tv130 = -452						; size = 4
tv78 = -452						; size = 4
tv70 = -452						; size = 4
_seconds$1 = -384					; size = 4
_minutes$2 = -380					; size = 4
_hours$3 = -376						; size = 4
_time_to_go$4 = -372					; size = 4
_f$5 = -368						; size = 4
_i$6 = -364						; size = 4
_waypoint_range$7 = -360				; size = 4
_waypoint_position$8 = -356				; size = 12
_wp$9 = -344						; size = 4
_target_range$10 = -340					; size = 4
_target_position$11 = -336				; size = 4
_dy$12 = -332						; size = 4
_dx$13 = -328						; size = 4
_air_scan_range$14 = -324				; size = 4
_draw_threat_line$15 = -320				; size = 4
_threat_type$16 = -316					; size = 4
_target_position$17 = -312				; size = 4
_launched_weapon$18 = -308				; size = 4
_target$19 = -304					; size = 4
_wp2_rel_position$20 = -300				; size = 12
_wp1_rel_position$21 = -288				; size = 12
_wp2$22 = -276						; size = 4
_wp1$23 = -272						; size = 4
_source_position$ = -268				; size = 4
_source_target$ = -264					; size = 4
_source$ = -260						; size = 4
_tsd_threat_line_flash_timer$ = -256			; size = 4
_tsd_ase_range$ = -252					; size = 4
_source_heading$ = -248					; size = 4
_y_adjust$ = -244					; size = 4
_width$ = -240						; size = 4
_y_origin$ = -236					; size = 4
_x_origin$ = -232					; size = 4
_scale$ = -228						; size = 4
_v$ = -224						; size = 4
_u$ = -220						; size = 4
_tsd_declutter_level$ = -216				; size = 4
_source_side$ = -212					; size = 4
_tsd_draw_threat_line_status$ = -208			; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z PROC ; draw_tactical_situation_display_mfd, COMDAT

; 4041 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 01 00
	00		 sub	 esp, 460		; 000001ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4042 : 	char
; 4043 : 		*s,
; 4044 : 		buffer[200];
; 4045 : 
; 4046 : 	int
; 4047 : 		*tsd_draw_threat_line_status;
; 4048 : 
; 4049 : 	entity_sides
; 4050 : 		source_side;
; 4051 : 
; 4052 : 	tsd_declutter_levels
; 4053 : 		tsd_declutter_level;
; 4054 : 
; 4055 : 	float
; 4056 : 		u,
; 4057 : 		v,
; 4058 : 		scale,
; 4059 : 		x_origin,
; 4060 : 		y_origin,
; 4061 : 		width,
; 4062 : 		y_adjust,
; 4063 : 		source_heading,
; 4064 : 		tsd_ase_range,
; 4065 : 		*tsd_threat_line_flash_timer;
; 4066 : 
; 4067 : 	entity
; 4068 : 		*source,
; 4069 : 		*source_target;
; 4070 : 
; 4071 : 	vec3d
; 4072 : 		*source_position;
; 4073 : 
; 4074 : 	ASSERT (viper_mfd_location_valid (mfd_location));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN21@draw_tacti
  00012	83 7d 08 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00016	7c 18		 jl	 SHORT $LN20@draw_tacti
$LN21@draw_tacti:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 21	 add	 eax, 33			; 00000021H
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN20@draw_tacti:

; 4075 : 
; 4076 : 	switch (mfd_location)

  00030	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00033	89 85 3c fe ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00039	83 bd 3c fe ff
	ff 03		 cmp	 DWORD PTR tv70[ebp], 3
  00040	77 6d		 ja	 SHORT $LN2@draw_tacti
  00042	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR tv70[ebp]
  00048	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN270@draw_tacti[ecx*4]
$LN22@draw_tacti:

; 4077 : 	{
; 4078 : 		////////////////////////////////////////
; 4079 : 		case VIPER_MFD_LOCATION_PILOT_LHS:
; 4080 : 		case VIPER_MFD_LOCATION_PILOT_RHS:
; 4081 : 		////////////////////////////////////////
; 4082 : 		{
; 4083 : 			tsd_ase_range						= pilot_tsd_ase_range;

  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00057	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 4084 : 			tsd_declutter_level				= pilot_tsd_declutter_level;

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
  00064	89 85 28 ff ff
	ff		 mov	 DWORD PTR _tsd_declutter_level$[ebp], eax

; 4085 : 			tsd_threat_line_flash_timer	= &pilot_tsd_threat_line_flash_timer;

  0006a	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_threat_line_flash_timer$[ebp], OFFSET ?pilot_tsd_threat_line_flash_timer@@3MA

; 4086 : 			tsd_draw_threat_line_status	= &pilot_tsd_draw_threat_line_status;

  00074	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_draw_threat_line_status$[ebp], OFFSET ?pilot_tsd_draw_threat_line_status@@3HA

; 4087 : 
; 4088 : 			break;

  0007e	eb 2f		 jmp	 SHORT $LN2@draw_tacti
$LN23@draw_tacti:

; 4089 : 		}
; 4090 : 		////////////////////////////////////////
; 4091 : 		case VIPER_MFD_LOCATION_CO_PILOT_LHS:
; 4092 : 		case VIPER_MFD_LOCATION_CO_PILOT_RHS:
; 4093 : 		////////////////////////////////////////
; 4094 : 		{
; 4095 : 			tsd_ase_range						= co_pilot_tsd_ase_range;

  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00088	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 4096 : 			tsd_declutter_level				= co_pilot_tsd_declutter_level;

  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
  00095	89 85 28 ff ff
	ff		 mov	 DWORD PTR _tsd_declutter_level$[ebp], eax

; 4097 : 			tsd_threat_line_flash_timer	= &co_pilot_tsd_threat_line_flash_timer;

  0009b	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_threat_line_flash_timer$[ebp], OFFSET ?co_pilot_tsd_threat_line_flash_timer@@3MA

; 4098 : 			tsd_draw_threat_line_status	= &co_pilot_tsd_draw_threat_line_status;

  000a5	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_draw_threat_line_status$[ebp], OFFSET ?co_pilot_tsd_draw_threat_line_status@@3HA
$LN2@draw_tacti:

; 4099 : 
; 4100 : 			break;
; 4101 : 		}
; 4102 : 	}
; 4103 : 
; 4104 : 	source = get_gunship_entity ();

  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000b4	89 85 fc fe ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 4105 : 
; 4106 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000ba	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000c1	74 10		 je	 SHORT $LN128@draw_tacti
  000c3	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cb	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv78[ebp], ecx
  000d1	eb 24		 jmp	 SHORT $LN129@draw_tacti
$LN128@draw_tacti:
  000d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  000d9	83 c2 41	 add	 edx, 65			; 00000041H
  000dc	52		 push	 edx
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ed	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN129@draw_tacti:
  000f7	b9 01 00 00 00	 mov	 ecx, 1
  000fc	85 c9		 test	 ecx, ecx
  000fe	74 0c		 je	 SHORT $LN130@draw_tacti
  00100	c7 85 38 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv86[ebp], 187 ; 000000bbH
  0010a	eb 24		 jmp	 SHORT $LN131@draw_tacti
$LN130@draw_tacti:
  0010c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00112	83 c2 41	 add	 edx, 65			; 00000041H
  00115	52		 push	 edx
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00126	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN131@draw_tacti:
  00130	68 bb 00 00 00	 push	 187			; 000000bbH
  00135	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0013b	51		 push	 ecx
  0013c	69 95 3c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv78[ebp], 1116
  00146	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]
  0014c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00153	ff d1		 call	 ecx
  00155	89 85 2c ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 4107 : 
; 4108 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0015b	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00162	74 10		 je	 SHORT $LN132@draw_tacti
  00164	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv130[ebp], ecx
  00172	eb 24		 jmp	 SHORT $LN133@draw_tacti
$LN132@draw_tacti:
  00174	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0017a	83 c2 43	 add	 edx, 67			; 00000043H
  0017d	52		 push	 edx
  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0018e	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN133@draw_tacti:
  00198	b9 01 00 00 00	 mov	 ecx, 1
  0019d	85 c9		 test	 ecx, ecx
  0019f	74 0c		 je	 SHORT $LN134@draw_tacti
  001a1	c7 85 38 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv138[ebp], 52 ; 00000034H
  001ab	eb 24		 jmp	 SHORT $LN135@draw_tacti
$LN134@draw_tacti:
  001ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  001b3	83 c2 43	 add	 edx, 67			; 00000043H
  001b6	52		 push	 edx
  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c7	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], 0
$LN135@draw_tacti:
  001d1	6a 34		 push	 52			; 00000034H
  001d3	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001d9	51		 push	 ecx
  001da	69 95 3c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv130[ebp], 700
  001e4	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv138[ebp]
  001ea	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001f1	ff d1		 call	 ecx
  001f3	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 4109 : 
; 4110 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  001f9	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00200	74 10		 je	 SHORT $LN136@draw_tacti
  00202	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00208	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020a	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  00210	eb 24		 jmp	 SHORT $LN137@draw_tacti
$LN136@draw_tacti:
  00212	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00218	83 c2 45	 add	 edx, 69			; 00000045H
  0021b	52		 push	 edx
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00221	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0022c	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN137@draw_tacti:
  00236	b9 01 00 00 00	 mov	 ecx, 1
  0023b	85 c9		 test	 ecx, ecx
  0023d	74 0c		 je	 SHORT $LN138@draw_tacti
  0023f	c7 85 38 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv158[ebp], 8
  00249	eb 24		 jmp	 SHORT $LN139@draw_tacti
$LN138@draw_tacti:
  0024b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00251	83 c2 45	 add	 edx, 69			; 00000045H
  00254	52		 push	 edx
  00255	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0025a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00265	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN139@draw_tacti:
  0026f	6a 08		 push	 8
  00271	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00277	51		 push	 ecx
  00278	6b 95 3c fe ff
	ff 60		 imul	 edx, DWORD PTR tv150[ebp], 96
  0027f	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  00285	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0028c	ff d1		 call	 ecx
  0028e	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 4111 : 
; 4112 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00294	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0029b	74 10		 je	 SHORT $LN140@draw_tacti
  0029d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  002a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a5	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv170[ebp], ecx
  002ab	eb 24		 jmp	 SHORT $LN141@draw_tacti
$LN140@draw_tacti:
  002ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  002b3	83 c2 47	 add	 edx, 71			; 00000047H
  002b6	52		 push	 edx
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c7	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN141@draw_tacti:
  002d1	b9 01 00 00 00	 mov	 ecx, 1
  002d6	85 c9		 test	 ecx, ecx
  002d8	74 0c		 je	 SHORT $LN142@draw_tacti
  002da	c7 85 38 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv178[ebp], 38 ; 00000026H
  002e4	eb 24		 jmp	 SHORT $LN143@draw_tacti
$LN142@draw_tacti:
  002e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  002ec	83 c2 47	 add	 edx, 71			; 00000047H
  002ef	52		 push	 edx
  002f0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  002f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00300	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN143@draw_tacti:
  0030a	6a 26		 push	 38			; 00000026H
  0030c	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00312	51		 push	 ecx
  00313	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv170[ebp], 180
  0031d	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv178[ebp]
  00323	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0032a	ff d1		 call	 ecx
  0032c	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 4113 : 
; 4114 : 	scale = RADIUS / tsd_ase_range;

  00332	f3 0f 5a 85 04
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0033a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  00342	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00346	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0034a	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 4115 : 
; 4116 : 	//
; 4117 : 	// match ground radar origin
; 4118 : 	//
; 4119 : 
; 4120 : 	if (draw_large_mfd)

  00352	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00359	74 1d		 je	 SHORT $LN24@draw_tacti

; 4121 : 	{
; 4122 : 		x_origin = 0.0;

  0035b	0f 57 c0	 xorps	 xmm0, xmm0
  0035e	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 4123 : 		y_origin = -0.6;

  00366	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0036e	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0

; 4124 : 	}
; 4125 : 	else

  00376	eb 1b		 jmp	 SHORT $LN25@draw_tacti
$LN24@draw_tacti:

; 4126 : 	{
; 4127 : 		x_origin = 0.0;

  00378	0f 57 c0	 xorps	 xmm0, xmm0
  0037b	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 4128 : 		y_origin = -0.675;

  00383	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  0038b	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0
$LN25@draw_tacti:

; 4129 : 	}
; 4130 : 
; 4131 : 	get_2d_float_screen_coordinates (x_origin, y_origin, &u, &v);

  00393	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _v$[ebp]
  00399	50		 push	 eax
  0039a	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _u$[ebp]
  003a0	51		 push	 ecx
  003a1	51		 push	 ecx
  003a2	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	51		 push	 ecx
  003b0	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 4132 : 
; 4133 : 	u -= mfd_viewport_x_min;

  003c2	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  003ca	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003d2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _u$[ebp], xmm0

; 4134 : 	v -= mfd_viewport_y_min;

  003da	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  003e2	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003ea	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _v$[ebp], xmm0

; 4135 : 
; 4136 : 	////////////////////////////////////////
; 4137 : 	//
; 4138 : 	//VJ 030423 TSD RENDER MOD
; 4139 : 	//
; 4140 : 	////////////////////////////////////////
; 4141 : 
; 4142 : 	if (tsd_render_mode != TSD_RENDER_CONTOUR_MODE && !viper_damage.navigation_computer)

  003f2	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  003f9	0f 84 05 02 00
	00		 je	 $LN26@draw_tacti
  003ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00404	c1 e8 05	 shr	 eax, 5
  00407	83 e0 01	 and	 eax, 1
  0040a	0f 85 f4 01 00
	00		 jne	 $LN26@draw_tacti

; 4143 : 	{
; 4144 : 		//VJ 030423 TSD render mod
; 4145 : 		set_rgb_colour (MFD_COLOUR1,   0, 0,  96, 255);  //dark blue

  00410	b8 04 00 00 00	 mov	 eax, 4
  00415	6b c8 00	 imul	 ecx, eax, 0
  00418	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0041f	b8 04 00 00 00	 mov	 eax, 4
  00424	6b c8 00	 imul	 ecx, eax, 0
  00427	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  0042e	b8 04 00 00 00	 mov	 eax, 4
  00433	6b c8 00	 imul	 ecx, eax, 0
  00436	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  0043d	b8 04 00 00 00	 mov	 eax, 4
  00442	6b c8 00	 imul	 ecx, eax, 0
  00445	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4146 : 	   set_rgb_colour (MFD_COLOUR2,	32, 32,  164, 255); //light blue

  0044c	b8 04 00 00 00	 mov	 eax, 4
  00451	c1 e0 00	 shl	 eax, 0
  00454	c6 80 02 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 32 ; 00000020H
  0045b	b8 04 00 00 00	 mov	 eax, 4
  00460	c1 e0 00	 shl	 eax, 0
  00463	c6 80 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 32 ; 00000020H
  0046a	b8 04 00 00 00	 mov	 eax, 4
  0046f	c1 e0 00	 shl	 eax, 0
  00472	c6 80 00 00 00
	00 a4		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 164 ; 000000a4H
  00479	b8 04 00 00 00	 mov	 eax, 4
  0047e	c1 e0 00	 shl	 eax, 0
  00481	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 4147 : 		set_rgb_colour (MFD_COLOUR3, 220, 48,   0, 255); //bright red

  00488	b8 04 00 00 00	 mov	 eax, 4
  0048d	d1 e0		 shl	 eax, 1
  0048f	c6 80 02 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 220 ; 000000dcH
  00496	b8 04 00 00 00	 mov	 eax, 4
  0049b	d1 e0		 shl	 eax, 1
  0049d	c6 80 01 00 00
	00 30		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 48 ; 00000030H
  004a4	b8 04 00 00 00	 mov	 eax, 4
  004a9	d1 e0		 shl	 eax, 1
  004ab	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  004b2	b8 04 00 00 00	 mov	 eax, 4
  004b7	d1 e0		 shl	 eax, 1
  004b9	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 4148 : 		set_rgb_colour (MFD_COLOUR4, 148, 32,   0, 255);//dark red

  004c0	b8 04 00 00 00	 mov	 eax, 4
  004c5	6b c8 03	 imul	 ecx, eax, 3
  004c8	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  004cf	b8 04 00 00 00	 mov	 eax, 4
  004d4	6b c8 03	 imul	 ecx, eax, 3
  004d7	c6 81 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 32 ; 00000020H
  004de	b8 04 00 00 00	 mov	 eax, 4
  004e3	6b c8 03	 imul	 ecx, eax, 3
  004e6	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  004ed	b8 04 00 00 00	 mov	 eax, 4
  004f2	6b c8 03	 imul	 ecx, eax, 3
  004f5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4149 : 
; 4150 : 		set_rgb_colour (MFD_COLOUR6,  255, 255,  0, 255);

  004fc	b8 04 00 00 00	 mov	 eax, 4
  00501	6b c8 05	 imul	 ecx, eax, 5
  00504	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0050b	b8 04 00 00 00	 mov	 eax, 4
  00510	6b c8 05	 imul	 ecx, eax, 5
  00513	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0051a	b8 04 00 00 00	 mov	 eax, 4
  0051f	6b c8 05	 imul	 ecx, eax, 5
  00522	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00529	b8 04 00 00 00	 mov	 eax, 4
  0052e	6b c8 05	 imul	 ecx, eax, 5
  00531	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4151 : 		//VJ 030511 colours 7 and 8 are grays when enemy colour option is off in eech.ini
; 4152 : 		//VJ 030530 colour tweaks: black and dark gray are best
; 4153 : 		set_rgb_colour (MFD_COLOUR7,    64, 64, 64, 255);

  00538	b8 04 00 00 00	 mov	 eax, 4
  0053d	6b c8 0b	 imul	 ecx, eax, 11
  00540	c6 81 02 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 64 ; 00000040H
  00547	b8 04 00 00 00	 mov	 eax, 4
  0054c	6b c8 0b	 imul	 ecx, eax, 11
  0054f	c6 81 01 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 64 ; 00000040H
  00556	b8 04 00 00 00	 mov	 eax, 4
  0055b	6b c8 0b	 imul	 ecx, eax, 11
  0055e	c6 81 00 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 64 ; 00000040H
  00565	b8 04 00 00 00	 mov	 eax, 4
  0056a	6b c8 0b	 imul	 ecx, eax, 11
  0056d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4154 : 		set_rgb_colour (MFD_COLOUR8,    0,0,0, 255);

  00574	b8 04 00 00 00	 mov	 eax, 4
  00579	6b c8 0c	 imul	 ecx, eax, 12
  0057c	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00583	b8 04 00 00 00	 mov	 eax, 4
  00588	6b c8 0c	 imul	 ecx, eax, 12
  0058b	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00592	b8 04 00 00 00	 mov	 eax, 4
  00597	6b c8 0c	 imul	 ecx, eax, 12
  0059a	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  005a1	b8 04 00 00 00	 mov	 eax, 4
  005a6	6b c8 0c	 imul	 ecx, eax, 12
  005a9	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4155 : 
; 4156 : 	   draw_tsd_terrain_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, FALSE);

  005b0	6a 00		 push	 0
  005b2	51		 push	 ecx
  005b3	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  005bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c0	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  005c6	50		 push	 eax
  005c7	51		 push	 ecx
  005c8	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  005d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d5	51		 push	 ecx
  005d6	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  005de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e3	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  005eb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005f2	51		 push	 ecx
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005fe	51		 push	 ecx
  005ff	e8 00 00 00 00	 call	 ?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z ; draw_tsd_terrain_map
$LN26@draw_tacti:

; 4157 : 	}
; 4158 : 
; 4159 : 	////////////////////////////////////////
; 4160 : 	//
; 4161 : 	// contour map
; 4162 : 	//
; 4163 : 	////////////////////////////////////////
; 4164 : 
; 4165 : //VJ 030423 TSD render mod, added mfd_env
; 4166 : 	if (!viper_damage.navigation_computer)

  00604	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00609	c1 e8 05	 shr	 eax, 5
  0060c	83 e0 01	 and	 eax, 1
  0060f	75 5a		 jne	 SHORT $LN27@draw_tacti

; 4167 : 		draw_tsd_contour_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, draw_large_mfd, FALSE);

  00611	6a 00		 push	 0
  00613	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00618	50		 push	 eax
  00619	51		 push	 ecx
  0061a	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00622	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00627	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0062d	51		 push	 ecx
  0062e	51		 push	 ecx
  0062f	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	51		 push	 ecx
  0063d	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  00645	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064a	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  00652	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00659	51		 push	 ecx
  0065a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00665	52		 push	 edx
  00666	e8 00 00 00 00	 call	 ?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z ; draw_tsd_contour_map
$LN27@draw_tacti:

; 4168 : 
; 4169 : 	////////////////////////////////////////
; 4170 : 	//
; 4171 : 	// waypoint route
; 4172 : 	//
; 4173 : 	////////////////////////////////////////
; 4174 : 
; 4175 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !viper_damage.navigation_computer)

  0066b	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  00672	0f 84 e1 07 00
	00		 je	 $LN29@draw_tacti
  00678	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0067d	c1 e8 05	 shr	 eax, 5
  00680	83 e0 01	 and	 eax, 1
  00683	0f 85 d0 07 00
	00		 jne	 $LN29@draw_tacti

; 4176 : 	{
; 4177 : 		entity
; 4178 : 			*wp1,
; 4179 : 			*wp2;
; 4180 : 
; 4181 : 		vec3d
; 4182 : 			wp1_rel_position,
; 4183 : 			wp2_rel_position;
; 4184 : 
; 4185 : 		wp1 = get_local_entity_first_waypoint (source);

  00689	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0068f	50		 push	 eax
  00690	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00695	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 4186 : 
; 4187 : 		if (wp1)

  0069b	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  006a2	0f 84 b1 07 00
	00		 je	 $LN29@draw_tacti

; 4188 : 		{
; 4189 : 			set_2d_viewport_origin (mfd_env, u, v);

  006a8	51		 push	 ecx
  006a9	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  006b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b6	51		 push	 ecx
  006b7	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  006bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006c9	50		 push	 eax
  006ca	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4190 : 
; 4191 : 			set_2d_window_rotation (mfd_env, source_heading);

  006cf	51		 push	 ecx
  006d0	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  006d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006e2	50		 push	 eax
  006e3	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4192 : 
; 4193 : 			//
; 4194 : 			// waypoint route
; 4195 : 			//
; 4196 : 
; 4197 : 			get_waypoint_display_position (source, wp1, &wp1_rel_position);

  006e8	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$21[ebp]
  006ee	50		 push	 eax
  006ef	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  006f5	51		 push	 ecx
  006f6	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  006fc	52		 push	 edx
  006fd	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4198 : 
; 4199 : 			wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00702	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00708	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00710	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00714	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0071c	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp], xmm0

; 4200 : 			wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00724	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  0072a	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00732	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00737	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0073f	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp+8], xmm0

; 4201 : 
; 4202 : 			wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00747	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  0074e	74 10		 je	 SHORT $LN144@draw_tacti
  00750	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  00756	8b 08		 mov	 ecx, DWORD PTR [eax]
  00758	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv329[ebp], ecx
  0075e	eb 27		 jmp	 SHORT $LN145@draw_tacti
$LN144@draw_tacti:
  00760	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00766	81 c2 a1 00 00
	00		 add	 edx, 161		; 000000a1H
  0076c	52		 push	 edx
  0076d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00772	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00777	50		 push	 eax
  00778	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0077d	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv329[ebp], 0
$LN145@draw_tacti:
  00787	b9 01 00 00 00	 mov	 ecx, 1
  0078c	85 c9		 test	 ecx, ecx
  0078e	74 0c		 je	 SHORT $LN146@draw_tacti
  00790	c7 85 38 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv337[ebp], 44 ; 0000002cH
  0079a	eb 27		 jmp	 SHORT $LN147@draw_tacti
$LN146@draw_tacti:
  0079c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  007a2	81 c2 a1 00 00
	00		 add	 edx, 161		; 000000a1H
  007a8	52		 push	 edx
  007a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  007ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  007b3	50		 push	 eax
  007b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007b9	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv337[ebp], 0
$LN147@draw_tacti:
  007c3	6a 2c		 push	 44			; 0000002cH
  007c5	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  007cb	51		 push	 ecx
  007cc	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv329[ebp], 180
  007d6	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv337[ebp]
  007dc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  007e3	ff d1		 call	 ecx
  007e5	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp2$22[ebp], eax
$LN4@draw_tacti:

; 4203 : 
; 4204 : 			while (wp2)

  007eb	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp2$22[ebp], 0
  007f2	0f 84 90 02 00
	00		 je	 $LN5@draw_tacti

; 4205 : 			{
; 4206 : 				get_waypoint_display_position (source, wp2, &wp2_rel_position);

  007f8	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _wp2_rel_position$20[ebp]
  007fe	50		 push	 eax
  007ff	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp2$22[ebp]
  00805	51		 push	 ecx
  00806	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  0080c	52		 push	 edx
  0080d	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4207 : 
; 4208 : 				wp2_rel_position.x = (wp2_rel_position.x - source_position->x) * scale;

  00812	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00818	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00820	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00824	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0082c	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$20[ebp], xmm0

; 4209 : 				wp2_rel_position.z = (wp2_rel_position.z - source_position->z) * scale;

  00834	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  0083a	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00842	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00847	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0084f	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$20[ebp+8], xmm0

; 4210 : //VJ 030423 TSD render mod
; 4211 : 				if (draw_large_mfd)

  00857	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0085e	0f 84 a8 00 00
	00		 je	 $LN30@draw_tacti

; 4212 : 				{
; 4213 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00864	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  0086b	75 4e		 jne	 SHORT $LN32@draw_tacti

; 4214 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR2);

  0086d	b8 04 00 00 00	 mov	 eax, 4
  00872	c1 e0 00	 shl	 eax, 0
  00875	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0087b	51		 push	 ecx
  0087c	51		 push	 ecx
  0087d	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00885	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088a	51		 push	 ecx
  0088b	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00893	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00898	51		 push	 ecx
  00899	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  008a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a6	51		 push	 ecx
  008a7	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  008af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b4	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4215 : 					else

  008b9	eb 4c		 jmp	 SHORT $LN33@draw_tacti
$LN32@draw_tacti:

; 4216 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR5);

  008bb	b8 04 00 00 00	 mov	 eax, 4
  008c0	c1 e0 02	 shl	 eax, 2
  008c3	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  008c9	51		 push	 ecx
  008ca	51		 push	 ecx
  008cb	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  008d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d8	51		 push	 ecx
  008d9	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  008e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e6	51		 push	 ecx
  008e7	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  008ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f4	51		 push	 ecx
  008f5	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  008fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00902	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN33@draw_tacti:

; 4217 : 				}
; 4218 : 				else

  00907	e9 a3 00 00 00	 jmp	 $LN35@draw_tacti
$LN30@draw_tacti:

; 4219 : 				{
; 4220 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  0090c	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00913	75 4e		 jne	 SHORT $LN34@draw_tacti

; 4221 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR2);

  00915	b8 04 00 00 00	 mov	 eax, 4
  0091a	c1 e0 00	 shl	 eax, 0
  0091d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00923	51		 push	 ecx
  00924	51		 push	 ecx
  00925	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  0092d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00932	51		 push	 ecx
  00933	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  0093b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00940	51		 push	 ecx
  00941	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00949	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094e	51		 push	 ecx
  0094f	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00957	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4222 : 					else

  00961	eb 4c		 jmp	 SHORT $LN35@draw_tacti
$LN34@draw_tacti:

; 4223 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR5);

  00963	b8 04 00 00 00	 mov	 eax, 4
  00968	c1 e0 02	 shl	 eax, 2
  0096b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00971	51		 push	 ecx
  00972	51		 push	 ecx
  00973	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  0097b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00980	51		 push	 ecx
  00981	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00989	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098e	51		 push	 ecx
  0098f	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00997	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099c	51		 push	 ecx
  0099d	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  009a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009aa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN35@draw_tacti:

; 4224 : 				}
; 4225 : 
; 4226 : 				wp1 = wp2;

  009af	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _wp2$22[ebp]
  009b5	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 4227 : 
; 4228 : 				wp1_rel_position = wp2_rel_position;

  009bb	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _wp2_rel_position$20[ebp]
  009c1	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp], eax
  009c7	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2_rel_position$20[ebp+4]
  009cd	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp+4], ecx
  009d3	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _wp2_rel_position$20[ebp+8]
  009d9	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp+8], edx

; 4229 : 
; 4230 : 				wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  009df	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  009e6	74 10		 je	 SHORT $LN148@draw_tacti
  009e8	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  009ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  009f0	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv390[ebp], ecx
  009f6	eb 27		 jmp	 SHORT $LN149@draw_tacti
$LN148@draw_tacti:
  009f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  009fe	81 c2 bd 00 00
	00		 add	 edx, 189		; 000000bdH
  00a04	52		 push	 edx
  00a05	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a0a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a0f	50		 push	 eax
  00a10	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a15	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv390[ebp], 0
$LN149@draw_tacti:
  00a1f	b9 01 00 00 00	 mov	 ecx, 1
  00a24	85 c9		 test	 ecx, ecx
  00a26	74 0c		 je	 SHORT $LN150@draw_tacti
  00a28	c7 85 38 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv398[ebp], 44 ; 0000002cH
  00a32	eb 27		 jmp	 SHORT $LN151@draw_tacti
$LN150@draw_tacti:
  00a34	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00a3a	81 c2 bd 00 00
	00		 add	 edx, 189		; 000000bdH
  00a40	52		 push	 edx
  00a41	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a46	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00a4b	50		 push	 eax
  00a4c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a51	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv398[ebp], 0
$LN151@draw_tacti:
  00a5b	6a 2c		 push	 44			; 0000002cH
  00a5d	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00a63	51		 push	 ecx
  00a64	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv390[ebp], 180
  00a6e	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv398[ebp]
  00a74	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00a7b	ff d1		 call	 ecx
  00a7d	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp2$22[ebp], eax

; 4231 : 			}

  00a83	e9 63 fd ff ff	 jmp	 $LN4@draw_tacti
$LN5@draw_tacti:

; 4232 : 
; 4233 : 			//
; 4234 : 			// waypoint markers
; 4235 : 			//
; 4236 : 
; 4237 : 			set_mono_font_colour (MFD_COLOUR6);

  00a88	b8 04 00 00 00	 mov	 eax, 4
  00a8d	6b c8 05	 imul	 ecx, eax, 5
  00a90	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a96	52		 push	 edx
  00a97	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4238 : 
; 4239 : 			if (draw_large_mfd)

  00a9c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00aa3	74 09		 je	 SHORT $LN36@draw_tacti

; 4240 : 			{
; 4241 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  00aa5	6a 05		 push	 5
  00aa7	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4242 : 			}
; 4243 : 			else

  00aac	eb 07		 jmp	 SHORT $LN37@draw_tacti
$LN36@draw_tacti:

; 4244 : 			{
; 4245 : 				set_mono_font_type (MONO_FONT_TYPE_5X7);

  00aae	6a 01		 push	 1
  00ab0	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN37@draw_tacti:

; 4246 : 			}
; 4247 : 
; 4248 : 			wp1 = get_local_entity_first_waypoint (source);

  00ab5	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00abb	50		 push	 eax
  00abc	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00ac1	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax
$LN6@draw_tacti:

; 4249 : 
; 4250 : 			while (wp1)

  00ac7	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00ace	0f 84 2e 03 00
	00		 je	 $LN7@draw_tacti

; 4251 : 			{
; 4252 : 				get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00ad4	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$21[ebp]
  00ada	50		 push	 eax
  00adb	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00ae1	51		 push	 ecx
  00ae2	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00ae8	52		 push	 edx
  00ae9	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4253 : 
; 4254 : 				wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00aee	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00af4	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00afc	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00b00	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00b08	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp], xmm0

; 4255 : 				wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00b10	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00b16	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00b1e	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00b23	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00b2b	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp+8], xmm0

; 4256 : 
; 4257 : 				if (draw_large_mfd)

  00b33	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b3a	0f 84 bc 00 00
	00		 je	 $LN38@draw_tacti

; 4258 : 				{
; 4259 : //VJ 030423 TSD render mod
; 4260 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00b40	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00b47	75 37		 jne	 SHORT $LN40@draw_tacti

; 4261 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR2);

  00b49	b8 04 00 00 00	 mov	 eax, 4
  00b4e	c1 e0 00	 shl	 eax, 0
  00b51	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00b57	51		 push	 ecx
  00b58	51		 push	 ecx
  00b59	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00b61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b66	51		 push	 ecx
  00b67	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00b6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b74	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00b79	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4262 : 					else

  00b7e	eb 35		 jmp	 SHORT $LN41@draw_tacti
$LN40@draw_tacti:

; 4263 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR5);

  00b80	b8 04 00 00 00	 mov	 eax, 4
  00b85	c1 e0 02	 shl	 eax, 2
  00b88	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00b8e	51		 push	 ecx
  00b8f	51		 push	 ecx
  00b90	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00b98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b9d	51		 push	 ecx
  00b9e	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00ba6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bab	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00bb0	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_tacti:

; 4264 : 
; 4265 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00bb5	51		 push	 ecx
  00bb6	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00bbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc3	51		 push	 ecx
  00bc4	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00bcc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4266 : 
; 4267 : 					set_mono_font_rel_position (-2.0, -4.0);

  00bd6	51		 push	 ecx
  00bd7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00bdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be4	51		 push	 ecx
  00be5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00bed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4268 : 				}
; 4269 : 				else

  00bf7	e9 b7 00 00 00	 jmp	 $LN39@draw_tacti
$LN38@draw_tacti:

; 4270 : 				{
; 4271 : //VJ 030423 TSD render mod
; 4272 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00bfc	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00c03	75 37		 jne	 SHORT $LN42@draw_tacti

; 4273 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR2);

  00c05	b8 04 00 00 00	 mov	 eax, 4
  00c0a	c1 e0 00	 shl	 eax, 0
  00c0d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00c13	51		 push	 ecx
  00c14	51		 push	 ecx
  00c15	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00c1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c22	51		 push	 ecx
  00c23	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00c2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c30	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00c35	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4274 : 					else

  00c3a	eb 35		 jmp	 SHORT $LN43@draw_tacti
$LN42@draw_tacti:

; 4275 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR5);

  00c3c	b8 04 00 00 00	 mov	 eax, 4
  00c41	c1 e0 02	 shl	 eax, 2
  00c44	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00c4a	51		 push	 ecx
  00c4b	51		 push	 ecx
  00c4c	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00c54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c59	51		 push	 ecx
  00c5a	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00c62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c67	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00c6c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN43@draw_tacti:

; 4276 : 
; 4277 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00c71	51		 push	 ecx
  00c72	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00c7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7f	51		 push	 ecx
  00c80	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00c88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4278 : 
; 4279 : 					set_mono_font_rel_position (-2.0, -2.0);

  00c92	51		 push	 ecx
  00c93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00c9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca0	51		 push	 ecx
  00ca1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00ca9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cae	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN39@draw_tacti:

; 4280 : 				}
; 4281 : 
; 4282 : 				print_mono_font_char (get_local_entity_char_value (wp1, CHAR_TYPE_TAG));

  00cb3	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00cba	74 10		 je	 SHORT $LN152@draw_tacti
  00cbc	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  00cc2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cc4	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv463[ebp], ecx
  00cca	eb 27		 jmp	 SHORT $LN153@draw_tacti
$LN152@draw_tacti:
  00ccc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00cd2	81 c2 f1 00 00
	00		 add	 edx, 241		; 000000f1H
  00cd8	52		 push	 edx
  00cd9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cde	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ce3	50		 push	 eax
  00ce4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ce9	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv463[ebp], 0
$LN153@draw_tacti:
  00cf3	b9 01 00 00 00	 mov	 ecx, 1
  00cf8	85 c9		 test	 ecx, ecx
  00cfa	74 0c		 je	 SHORT $LN154@draw_tacti
  00cfc	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv471[ebp], 0
  00d06	eb 27		 jmp	 SHORT $LN155@draw_tacti
$LN154@draw_tacti:
  00d08	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00d0e	81 c2 f1 00 00
	00		 add	 edx, 241		; 000000f1H
  00d14	52		 push	 edx
  00d15	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d1a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00d1f	50		 push	 eax
  00d20	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d25	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv471[ebp], 0
$LN155@draw_tacti:
  00d2f	6a 00		 push	 0
  00d31	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00d37	51		 push	 ecx
  00d38	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR tv471[ebp]
  00d3e	c1 e2 02	 shl	 edx, 2
  00d41	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR tv463[ebp]
  00d47	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  00d4e	ff d1		 call	 ecx
  00d50	0f b6 d0	 movzx	 edx, al
  00d53	52		 push	 edx
  00d54	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 4283 : 
; 4284 : 				wp1 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00d59	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00d60	74 10		 je	 SHORT $LN156@draw_tacti
  00d62	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  00d68	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d6a	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv516[ebp], ecx
  00d70	eb 27		 jmp	 SHORT $LN157@draw_tacti
$LN156@draw_tacti:
  00d72	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00d78	81 c2 f3 00 00
	00		 add	 edx, 243		; 000000f3H
  00d7e	52		 push	 edx
  00d7f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d84	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d89	50		 push	 eax
  00d8a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d8f	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv516[ebp], 0
$LN157@draw_tacti:
  00d99	b9 01 00 00 00	 mov	 ecx, 1
  00d9e	85 c9		 test	 ecx, ecx
  00da0	74 0c		 je	 SHORT $LN158@draw_tacti
  00da2	c7 85 38 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv524[ebp], 44 ; 0000002cH
  00dac	eb 27		 jmp	 SHORT $LN159@draw_tacti
$LN158@draw_tacti:
  00dae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00db4	81 c2 f3 00 00
	00		 add	 edx, 243		; 000000f3H
  00dba	52		 push	 edx
  00dbb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dc0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00dc5	50		 push	 eax
  00dc6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dcb	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv524[ebp], 0
$LN159@draw_tacti:
  00dd5	6a 2c		 push	 44			; 0000002cH
  00dd7	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00ddd	51		 push	 ecx
  00dde	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv516[ebp], 180
  00de8	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv524[ebp]
  00dee	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00df5	ff d1		 call	 ecx
  00df7	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 4285 : 			}

  00dfd	e9 c5 fc ff ff	 jmp	 $LN6@draw_tacti
$LN7@draw_tacti:

; 4286 : 
; 4287 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00e02	51		 push	 ecx
  00e03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00e0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e10	51		 push	 ecx
  00e11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00e19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1e	51		 push	 ecx
  00e1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00e27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2c	51		 push	 ecx
  00e2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00e35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00e3f	50		 push	 eax
  00e40	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4288 : 
; 4289 : 			set_2d_window_rotation (mfd_env, 0.0);

  00e45	51		 push	 ecx
  00e46	0f 57 c0	 xorps	 xmm0, xmm0
  00e49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e4e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00e53	50		 push	 eax
  00e54	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN29@draw_tacti:

; 4290 : 		}
; 4291 : 	}
; 4292 : 
; 4293 : 	////////////////////////////////////////
; 4294 : 	//
; 4295 : 	// targets
; 4296 : 	//
; 4297 : 	////////////////////////////////////////
; 4298 : 
; 4299 : 	{
; 4300 : 		entity
; 4301 : 			*target,
; 4302 : 			*launched_weapon;
; 4303 : 
; 4304 : 		vec3d
; 4305 : 			*target_position;
; 4306 : 
; 4307 : 		threat_types
; 4308 : 			threat_type;
; 4309 : 
; 4310 : 		int
; 4311 : 			draw_threat_line;
; 4312 : 
; 4313 : 		float
; 4314 : 			air_scan_range,
; 4315 : 			dx,
; 4316 : 			dy;
; 4317 : 
; 4318 : 		if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  00e59	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  00e60	0f 84 c6 11 00
	00		 je	 $LN44@draw_tacti

; 4319 : 		{
; 4320 : 			*tsd_threat_line_flash_timer -= get_delta_time ();

  00e66	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  00e6c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00e70	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00e78	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  00e7e	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 4321 : 
; 4322 : 			if (*tsd_threat_line_flash_timer < 0.0)

  00e82	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  00e88	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00e8c	0f 57 c9	 xorps	 xmm1, xmm1
  00e8f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00e93	76 25		 jbe	 SHORT $LN45@draw_tacti

; 4323 : 			{
; 4324 : 				*tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  00e95	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  00e9b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00ea3	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 4325 : 
; 4326 : 				*tsd_draw_threat_line_status ^= 1;

  00ea7	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  00ead	8b 08		 mov	 ecx, DWORD PTR [eax]
  00eaf	83 f1 01	 xor	 ecx, 1
  00eb2	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  00eb8	89 0a		 mov	 DWORD PTR [edx], ecx
$LN45@draw_tacti:

; 4327 : 			}
; 4328 : 
; 4329 : 			set_2d_viewport_origin (mfd_env, u, v);

  00eba	51		 push	 ecx
  00ebb	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  00ec3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec8	51		 push	 ecx
  00ec9	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  00ed1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00edb	50		 push	 eax
  00edc	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4330 : 
; 4331 : 			set_2d_window_rotation (mfd_env, source_heading);

  00ee1	51		 push	 ecx
  00ee2	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00eea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00ef4	50		 push	 eax
  00ef5	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4332 : 
; 4333 : 			//
; 4334 : 			// display enemy SAM and AAA threat range circles
; 4335 : 			//
; 4336 : 
; 4337 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00efa	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00f01	74 10		 je	 SHORT $LN160@draw_tacti
  00f03	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00f09	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f0b	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv553[ebp], ecx
  00f11	eb 27		 jmp	 SHORT $LN161@draw_tacti
$LN160@draw_tacti:
  00f13	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00f19	81 c2 28 01 00
	00		 add	 edx, 296		; 00000128H
  00f1f	52		 push	 edx
  00f20	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f25	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f2a	50		 push	 eax
  00f2b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f30	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv553[ebp], 0
$LN161@draw_tacti:
  00f3a	b9 01 00 00 00	 mov	 ecx, 1
  00f3f	85 c9		 test	 ecx, ecx
  00f41	74 0c		 je	 SHORT $LN162@draw_tacti
  00f43	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv561[ebp], 18 ; 00000012H
  00f4d	eb 27		 jmp	 SHORT $LN163@draw_tacti
$LN162@draw_tacti:
  00f4f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00f55	81 c2 28 01 00
	00		 add	 edx, 296		; 00000128H
  00f5b	52		 push	 edx
  00f5c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f61	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00f66	50		 push	 eax
  00f67	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f6c	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv561[ebp], 0
$LN163@draw_tacti:
  00f76	6a 12		 push	 18			; 00000012H
  00f78	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00f7e	51		 push	 ecx
  00f7f	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv553[ebp], 180
  00f89	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv561[ebp]
  00f8f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00f96	ff d1		 call	 ecx
  00f98	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN8@draw_tacti:

; 4338 : 
; 4339 : 			while (target)

  00f9e	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  00fa5	0f 84 17 05 00
	00		 je	 $LN9@draw_tacti

; 4340 : 			{
; 4341 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  00fab	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  00fb2	74 10		 je	 SHORT $LN164@draw_tacti
  00fb4	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  00fba	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fbc	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv573[ebp], ecx
  00fc2	eb 20		 jmp	 SHORT $LN165@draw_tacti
$LN164@draw_tacti:
  00fc4	68 f5 10 00 00	 push	 4341			; 000010f5H
  00fc9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fd4	52		 push	 edx
  00fd5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fda	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv573[ebp], 0
$LN165@draw_tacti:
  00fe4	b8 01 00 00 00	 mov	 eax, 1
  00fe9	85 c0		 test	 eax, eax
  00feb	74 0c		 je	 SHORT $LN166@draw_tacti
  00fed	c7 85 38 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv580[ebp], 66 ; 00000042H
  00ff7	eb 20		 jmp	 SHORT $LN167@draw_tacti
$LN166@draw_tacti:
  00ff9	68 f5 10 00 00	 push	 4341			; 000010f5H
  00ffe	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01009	51		 push	 ecx
  0100a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0100f	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv580[ebp], 0
$LN167@draw_tacti:
  01019	6a 42		 push	 66			; 00000042H
  0101b	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01021	52		 push	 edx
  01022	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv573[ebp], 1116
  0102c	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv580[ebp]
  01032	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01039	ff d2		 call	 edx
  0103b	85 c0		 test	 eax, eax
  0103d	0f 85 d6 03 00
	00		 jne	 $LN53@draw_tacti

; 4342 : 				{
; 4343 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  01043	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0104a	74 10		 je	 SHORT $LN168@draw_tacti
  0104c	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01052	8b 08		 mov	 ecx, DWORD PTR [eax]
  01054	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv592[ebp], ecx
  0105a	eb 20		 jmp	 SHORT $LN169@draw_tacti
$LN168@draw_tacti:
  0105c	68 f7 10 00 00	 push	 4343			; 000010f7H
  01061	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01066	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0106c	52		 push	 edx
  0106d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01072	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv592[ebp], 0
$LN169@draw_tacti:
  0107c	b8 01 00 00 00	 mov	 eax, 1
  01081	85 c0		 test	 eax, eax
  01083	74 0c		 je	 SHORT $LN170@draw_tacti
  01085	c7 85 38 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv599[ebp], 187 ; 000000bbH
  0108f	eb 20		 jmp	 SHORT $LN171@draw_tacti
$LN170@draw_tacti:
  01091	68 f7 10 00 00	 push	 4343			; 000010f7H
  01096	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0109b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  010a1	51		 push	 ecx
  010a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010a7	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv599[ebp], 0
$LN171@draw_tacti:
  010b1	68 bb 00 00 00	 push	 187			; 000000bbH
  010b6	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  010bc	52		 push	 edx
  010bd	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv592[ebp], 1116
  010c7	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv599[ebp]
  010cd	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  010d4	ff d2		 call	 edx
  010d6	39 85 2c ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  010dc	0f 84 37 03 00
	00		 je	 $LN53@draw_tacti

; 4344 : 					{
; 4345 : 						threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  010e2	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  010e9	74 10		 je	 SHORT $LN172@draw_tacti
  010eb	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  010f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  010f3	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv612[ebp], ecx
  010f9	eb 27		 jmp	 SHORT $LN173@draw_tacti
$LN172@draw_tacti:
  010fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01101	81 c2 30 01 00
	00		 add	 edx, 304		; 00000130H
  01107	52		 push	 edx
  01108	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0110d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01112	50		 push	 eax
  01113	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01118	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv612[ebp], 0
$LN173@draw_tacti:
  01122	b9 01 00 00 00	 mov	 ecx, 1
  01127	85 c9		 test	 ecx, ecx
  01129	74 0c		 je	 SHORT $LN174@draw_tacti
  0112b	c7 85 38 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv620[ebp], 233 ; 000000e9H
  01135	eb 27		 jmp	 SHORT $LN175@draw_tacti
$LN174@draw_tacti:
  01137	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0113d	81 c2 30 01 00
	00		 add	 edx, 304		; 00000130H
  01143	52		 push	 edx
  01144	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0114e	50		 push	 eax
  0114f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01154	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv620[ebp], 0
$LN175@draw_tacti:
  0115e	68 e9 00 00 00	 push	 233			; 000000e9H
  01163	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01169	51		 push	 ecx
  0116a	69 95 3c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv612[ebp], 1116
  01174	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv620[ebp]
  0117a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01181	ff d1		 call	 ecx
  01183	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _threat_type$16[ebp], eax

; 4346 : 
; 4347 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  01189	83 bd c4 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$16[ebp], 5
  01190	74 0d		 je	 SHORT $LN49@draw_tacti
  01192	83 bd c4 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$16[ebp], 6
  01199	0f 85 7a 02 00
	00		 jne	 $LN53@draw_tacti
$LN49@draw_tacti:

; 4348 : 						{
; 4349 : 							target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  0119f	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  011a6	74 10		 je	 SHORT $LN176@draw_tacti
  011a8	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  011ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  011b0	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv634[ebp], ecx
  011b6	eb 27		 jmp	 SHORT $LN177@draw_tacti
$LN176@draw_tacti:
  011b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  011be	81 c2 34 01 00
	00		 add	 edx, 308		; 00000134H
  011c4	52		 push	 edx
  011c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  011ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011cf	50		 push	 eax
  011d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011d5	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv634[ebp], 0
$LN177@draw_tacti:
  011df	b9 01 00 00 00	 mov	 ecx, 1
  011e4	85 c9		 test	 ecx, ecx
  011e6	74 0c		 je	 SHORT $LN178@draw_tacti
  011e8	c7 85 38 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv642[ebp], 8
  011f2	eb 27		 jmp	 SHORT $LN179@draw_tacti
$LN178@draw_tacti:
  011f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  011fa	81 c2 34 01 00
	00		 add	 edx, 308		; 00000134H
  01200	52		 push	 edx
  01201	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01206	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0120b	50		 push	 eax
  0120c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01211	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv642[ebp], 0
$LN179@draw_tacti:
  0121b	6a 08		 push	 8
  0121d	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01223	51		 push	 ecx
  01224	6b 95 3c fe ff
	ff 60		 imul	 edx, DWORD PTR tv634[ebp], 96
  0122b	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv642[ebp]
  01231	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01238	ff d1		 call	 ecx
  0123a	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _target_position$17[ebp], eax

; 4350 : 
; 4351 : 							dx = (target_position->x - source_position->x) * scale;

  01240	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  01246	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0124c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01250	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01254	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0125c	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _dx$13[ebp], xmm0

; 4352 : 							dy = (target_position->z - source_position->z) * scale;

  01264	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  0126a	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01270	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01275	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0127a	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01282	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _dy$12[ebp], xmm0

; 4353 : 
; 4354 : 							air_scan_range = get_local_entity_float_value (target, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  0128a	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01291	74 10		 je	 SHORT $LN180@draw_tacti
  01293	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01299	8b 08		 mov	 ecx, DWORD PTR [eax]
  0129b	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv662[ebp], ecx
  012a1	eb 27		 jmp	 SHORT $LN181@draw_tacti
$LN180@draw_tacti:
  012a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  012a9	81 c2 39 01 00
	00		 add	 edx, 313		; 00000139H
  012af	52		 push	 edx
  012b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  012b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012ba	50		 push	 eax
  012bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012c0	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv662[ebp], 0
$LN181@draw_tacti:
  012ca	b9 01 00 00 00	 mov	 ecx, 1
  012cf	85 c9		 test	 ecx, ecx
  012d1	74 0c		 je	 SHORT $LN182@draw_tacti
  012d3	c7 85 38 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv670[ebp], 5
  012dd	eb 27		 jmp	 SHORT $LN183@draw_tacti
$LN182@draw_tacti:
  012df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  012e5	81 c2 39 01 00
	00		 add	 edx, 313		; 00000139H
  012eb	52		 push	 edx
  012ec	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  012f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  012f6	50		 push	 eax
  012f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012fc	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv670[ebp], 0
$LN183@draw_tacti:
  01306	6a 05		 push	 5
  01308	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  0130e	51		 push	 ecx
  0130f	69 95 3c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv662[ebp], 700
  01319	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv670[ebp]
  0131f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01326	ff d1		 call	 ecx
  01328	d9 9d 34 fe ff
	ff		 fstp	 DWORD PTR tv1931[ebp]
  0132e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR tv1931[ebp]
  01336	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0133e	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _air_scan_range$14[ebp], xmm0

; 4355 : 
; 4356 : //VJ 030423 TSD render mod, enemy of viper so red
; 4357 : //VJ 030511 TSD render mod, enemy optional in eech.ini
; 4358 : //VJ 030530 TSD render mod, corrected colour vor original view MFD_COLOUR2
; 4359 : 							if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  01346	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  0134d	75 43		 jne	 SHORT $LN50@draw_tacti

; 4360 : 								draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR2);

  0134f	b8 04 00 00 00	 mov	 eax, 4
  01354	c1 e0 00	 shl	 eax, 0
  01357	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0135d	51		 push	 ecx
  0135e	51		 push	 ecx
  0135f	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  01367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0136c	51		 push	 ecx
  0136d	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  01375	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137a	51		 push	 ecx
  0137b	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  01383	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01388	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 4361 : 							else

  0138d	e9 87 00 00 00	 jmp	 $LN53@draw_tacti
$LN50@draw_tacti:

; 4362 : 								if (command_line_tsd_enemy_colours)

  01392	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  01399	74 40		 je	 SHORT $LN52@draw_tacti

; 4363 : 									draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR4);

  0139b	b8 04 00 00 00	 mov	 eax, 4
  013a0	6b c8 03	 imul	 ecx, eax, 3
  013a3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013a9	52		 push	 edx
  013aa	51		 push	 ecx
  013ab	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  013b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013b8	51		 push	 ecx
  013b9	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  013c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c6	51		 push	 ecx
  013c7	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  013cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d4	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 4364 : 								else

  013d9	eb 3e		 jmp	 SHORT $LN53@draw_tacti
$LN52@draw_tacti:

; 4365 : 									draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR8);

  013db	b8 04 00 00 00	 mov	 eax, 4
  013e0	6b c8 0c	 imul	 ecx, eax, 12
  013e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013e9	52		 push	 edx
  013ea	51		 push	 ecx
  013eb	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  013f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f8	51		 push	 ecx
  013f9	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  01401	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01406	51		 push	 ecx
  01407	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  0140f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01414	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN53@draw_tacti:

; 4366 : 						}
; 4367 : 					}
; 4368 : 				}
; 4369 : 
; 4370 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01419	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01420	74 10		 je	 SHORT $LN184@draw_tacti
  01422	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01428	8b 08		 mov	 ecx, DWORD PTR [eax]
  0142a	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv703[ebp], ecx
  01430	eb 27		 jmp	 SHORT $LN185@draw_tacti
$LN184@draw_tacti:
  01432	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01438	81 c2 49 01 00
	00		 add	 edx, 329		; 00000149H
  0143e	52		 push	 edx
  0143f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01444	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01449	50		 push	 eax
  0144a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0144f	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv703[ebp], 0
$LN185@draw_tacti:
  01459	b9 01 00 00 00	 mov	 ecx, 1
  0145e	85 c9		 test	 ecx, ecx
  01460	74 0c		 je	 SHORT $LN186@draw_tacti
  01462	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv711[ebp], 18 ; 00000012H
  0146c	eb 27		 jmp	 SHORT $LN187@draw_tacti
$LN186@draw_tacti:
  0146e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01474	81 c2 49 01 00
	00		 add	 edx, 329		; 00000149H
  0147a	52		 push	 edx
  0147b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01480	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01485	50		 push	 eax
  01486	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0148b	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv711[ebp], 0
$LN187@draw_tacti:
  01495	6a 12		 push	 18			; 00000012H
  01497	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  0149d	51		 push	 ecx
  0149e	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv703[ebp], 180
  014a8	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv711[ebp]
  014ae	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  014b5	ff d1		 call	 ecx
  014b7	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 4371 : 			}

  014bd	e9 dc fa ff ff	 jmp	 $LN8@draw_tacti
$LN9@draw_tacti:

; 4372 : 
; 4373 : 			//
; 4374 : 			// display all gunship targets (do not show ground radar clutter)
; 4375 : 			//
; 4376 : 
; 4377 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  014c2	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  014c9	74 10		 je	 SHORT $LN188@draw_tacti
  014cb	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  014d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  014d3	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv723[ebp], ecx
  014d9	eb 27		 jmp	 SHORT $LN189@draw_tacti
$LN188@draw_tacti:
  014db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  014e1	81 c2 50 01 00
	00		 add	 edx, 336		; 00000150H
  014e7	52		 push	 edx
  014e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  014ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014f2	50		 push	 eax
  014f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014f8	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv723[ebp], 0
$LN189@draw_tacti:
  01502	b9 01 00 00 00	 mov	 ecx, 1
  01507	85 c9		 test	 ecx, ecx
  01509	74 0c		 je	 SHORT $LN190@draw_tacti
  0150b	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv731[ebp], 18 ; 00000012H
  01515	eb 27		 jmp	 SHORT $LN191@draw_tacti
$LN190@draw_tacti:
  01517	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0151d	81 c2 50 01 00
	00		 add	 edx, 336		; 00000150H
  01523	52		 push	 edx
  01524	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01529	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0152e	50		 push	 eax
  0152f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01534	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv731[ebp], 0
$LN191@draw_tacti:
  0153e	6a 12		 push	 18			; 00000012H
  01540	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01546	51		 push	 ecx
  01547	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv723[ebp], 180
  01551	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv731[ebp]
  01557	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0155e	ff d1		 call	 ecx
  01560	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN10@draw_tacti:

; 4378 : 
; 4379 : 			while (target)

  01566	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0156d	0f 84 92 01 00
	00		 je	 $LN11@draw_tacti

; 4380 : 			{
; 4381 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01573	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0157a	74 10		 je	 SHORT $LN192@draw_tacti
  0157c	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01582	8b 08		 mov	 ecx, DWORD PTR [eax]
  01584	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv743[ebp], ecx
  0158a	eb 20		 jmp	 SHORT $LN193@draw_tacti
$LN192@draw_tacti:
  0158c	68 1d 11 00 00	 push	 4381			; 0000111dH
  01591	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01596	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0159c	52		 push	 edx
  0159d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015a2	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv743[ebp], 0
$LN193@draw_tacti:
  015ac	b8 01 00 00 00	 mov	 eax, 1
  015b1	85 c0		 test	 eax, eax
  015b3	74 0c		 je	 SHORT $LN194@draw_tacti
  015b5	c7 85 38 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv750[ebp], 66 ; 00000042H
  015bf	eb 20		 jmp	 SHORT $LN195@draw_tacti
$LN194@draw_tacti:
  015c1	68 1d 11 00 00	 push	 4381			; 0000111dH
  015c6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  015cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  015d1	51		 push	 ecx
  015d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015d7	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv750[ebp], 0
$LN195@draw_tacti:
  015e1	6a 42		 push	 66			; 00000042H
  015e3	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  015e9	52		 push	 edx
  015ea	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv743[ebp], 1116
  015f4	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv750[ebp]
  015fa	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01601	ff d2		 call	 edx
  01603	85 c0		 test	 eax, eax
  01605	75 55		 jne	 SHORT $LN56@draw_tacti

; 4382 : 				{
; 4383 : 					//VJ 030423 TSD render mod
; 4384 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  01607	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  0160e	75 27		 jne	 SHORT $LN55@draw_tacti

; 4385 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  01610	6a 00		 push	 0
  01612	6a 00		 push	 0
  01614	51		 push	 ecx
  01615	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0161d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01622	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01628	50		 push	 eax
  01629	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  0162f	51		 push	 ecx
  01630	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 4386 : 					else

  01635	eb 25		 jmp	 SHORT $LN56@draw_tacti
$LN55@draw_tacti:

; 4387 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, TRUE);

  01637	6a 01		 push	 1
  01639	6a 00		 push	 0
  0163b	51		 push	 ecx
  0163c	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01644	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01649	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  0164f	50		 push	 eax
  01650	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01656	51		 push	 ecx
  01657	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN56@draw_tacti:

; 4388 : 				}
; 4389 : 
; 4390 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  0165c	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01663	74 10		 je	 SHORT $LN196@draw_tacti
  01665	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  0166b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0166d	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv774[ebp], ecx
  01673	eb 27		 jmp	 SHORT $LN197@draw_tacti
$LN196@draw_tacti:
  01675	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0167b	81 c2 5d 01 00
	00		 add	 edx, 349		; 0000015dH
  01681	52		 push	 edx
  01682	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01687	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0168c	50		 push	 eax
  0168d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01692	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv774[ebp], 0
$LN197@draw_tacti:
  0169c	b9 01 00 00 00	 mov	 ecx, 1
  016a1	85 c9		 test	 ecx, ecx
  016a3	74 0c		 je	 SHORT $LN198@draw_tacti
  016a5	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv782[ebp], 18 ; 00000012H
  016af	eb 27		 jmp	 SHORT $LN199@draw_tacti
$LN198@draw_tacti:
  016b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  016b7	81 c2 5d 01 00
	00		 add	 edx, 349		; 0000015dH
  016bd	52		 push	 edx
  016be	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  016c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  016c8	50		 push	 eax
  016c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  016ce	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv782[ebp], 0
$LN199@draw_tacti:
  016d8	6a 12		 push	 18			; 00000012H
  016da	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  016e0	51		 push	 ecx
  016e1	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv774[ebp], 180
  016eb	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv782[ebp]
  016f1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  016f8	ff d1		 call	 ecx
  016fa	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 4391 : 			}

  01700	e9 61 fe ff ff	 jmp	 $LN10@draw_tacti
$LN11@draw_tacti:

; 4392 : 
; 4393 : 			//
; 4394 : 			// draw selected target last
; 4395 : 			//
; 4396 : 
; 4397 : 			if (source_target)

  01705	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  0170c	74 55		 je	 SHORT $LN59@draw_tacti

; 4398 : 			{
; 4399 : 				//VJ 030423 TSD render mod
; 4400 : 				if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  0170e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  01715	75 27		 jne	 SHORT $LN58@draw_tacti

; 4401 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, FALSE);

  01717	6a 00		 push	 0
  01719	6a 01		 push	 1
  0171b	51		 push	 ecx
  0171c	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01724	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01729	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  0172f	50		 push	 eax
  01730	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  01736	51		 push	 ecx
  01737	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 4402 : 				else

  0173c	eb 25		 jmp	 SHORT $LN59@draw_tacti
$LN58@draw_tacti:

; 4403 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, TRUE);

  0173e	6a 01		 push	 1
  01740	6a 01		 push	 1
  01742	51		 push	 ecx
  01743	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0174b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01750	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01756	50		 push	 eax
  01757	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  0175d	51		 push	 ecx
  0175e	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN59@draw_tacti:

; 4404 : 			}
; 4405 : 
; 4406 : 			//
; 4407 : 			// draw threat line if gunship is targetted (flash if missile fired)
; 4408 : 			//
; 4409 : 
; 4410 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01763	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0176a	74 10		 je	 SHORT $LN200@draw_tacti
  0176c	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01772	8b 08		 mov	 ecx, DWORD PTR [eax]
  01774	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv806[ebp], ecx
  0177a	eb 27		 jmp	 SHORT $LN201@draw_tacti
$LN200@draw_tacti:
  0177c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01782	81 c2 71 01 00
	00		 add	 edx, 369		; 00000171H
  01788	52		 push	 edx
  01789	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0178e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01793	50		 push	 eax
  01794	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01799	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv806[ebp], 0
$LN201@draw_tacti:
  017a3	b9 01 00 00 00	 mov	 ecx, 1
  017a8	85 c9		 test	 ecx, ecx
  017aa	74 0c		 je	 SHORT $LN202@draw_tacti
  017ac	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv814[ebp], 18 ; 00000012H
  017b6	eb 27		 jmp	 SHORT $LN203@draw_tacti
$LN202@draw_tacti:
  017b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  017be	81 c2 71 01 00
	00		 add	 edx, 369		; 00000171H
  017c4	52		 push	 edx
  017c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  017ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  017cf	50		 push	 eax
  017d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017d5	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv814[ebp], 0
$LN203@draw_tacti:
  017df	6a 12		 push	 18			; 00000012H
  017e1	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  017e7	51		 push	 ecx
  017e8	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv806[ebp], 180
  017f2	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv814[ebp]
  017f8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  017ff	ff d1		 call	 ecx
  01801	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN12@draw_tacti:

; 4411 : 
; 4412 : 			while (target)

  01807	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0180e	0f 84 c1 07 00
	00		 je	 $LN13@draw_tacti

; 4413 : 			{
; 4414 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01814	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0181b	74 10		 je	 SHORT $LN204@draw_tacti
  0181d	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01823	8b 08		 mov	 ecx, DWORD PTR [eax]
  01825	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv826[ebp], ecx
  0182b	eb 20		 jmp	 SHORT $LN205@draw_tacti
$LN204@draw_tacti:
  0182d	68 3e 11 00 00	 push	 4414			; 0000113eH
  01832	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01837	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0183d	52		 push	 edx
  0183e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01843	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv826[ebp], 0
$LN205@draw_tacti:
  0184d	b8 01 00 00 00	 mov	 eax, 1
  01852	85 c0		 test	 eax, eax
  01854	74 0c		 je	 SHORT $LN206@draw_tacti
  01856	c7 85 38 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv833[ebp], 66 ; 00000042H
  01860	eb 20		 jmp	 SHORT $LN207@draw_tacti
$LN206@draw_tacti:
  01862	68 3e 11 00 00	 push	 4414			; 0000113eH
  01867	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0186c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01872	51		 push	 ecx
  01873	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01878	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv833[ebp], 0
$LN207@draw_tacti:
  01882	6a 42		 push	 66			; 00000042H
  01884	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  0188a	52		 push	 edx
  0188b	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv826[ebp], 1116
  01895	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv833[ebp]
  0189b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  018a2	ff d2		 call	 edx
  018a4	85 c0		 test	 eax, eax
  018a6	0f 85 80 06 00
	00		 jne	 $LN68@draw_tacti

; 4415 : 				{
; 4416 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  018ac	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  018b3	74 10		 je	 SHORT $LN208@draw_tacti
  018b5	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  018bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  018bd	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv845[ebp], ecx
  018c3	eb 20		 jmp	 SHORT $LN209@draw_tacti
$LN208@draw_tacti:
  018c5	68 40 11 00 00	 push	 4416			; 00001140H
  018ca	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  018cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018d5	52		 push	 edx
  018d6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018db	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv845[ebp], 0
$LN209@draw_tacti:
  018e5	b8 01 00 00 00	 mov	 eax, 1
  018ea	85 c0		 test	 eax, eax
  018ec	74 0c		 je	 SHORT $LN210@draw_tacti
  018ee	c7 85 38 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv852[ebp], 187 ; 000000bbH
  018f8	eb 20		 jmp	 SHORT $LN211@draw_tacti
$LN210@draw_tacti:
  018fa	68 40 11 00 00	 push	 4416			; 00001140H
  018ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01904	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0190a	51		 push	 ecx
  0190b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01910	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv852[ebp], 0
$LN211@draw_tacti:
  0191a	68 bb 00 00 00	 push	 187			; 000000bbH
  0191f	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01925	52		 push	 edx
  01926	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv845[ebp], 1116
  01930	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv852[ebp]
  01936	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0193d	ff d2		 call	 edx
  0193f	39 85 2c ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01945	0f 84 e1 05 00
	00		 je	 $LN68@draw_tacti

; 4417 : 					{
; 4418 : 						if (get_local_entity_int_value (target, INT_TYPE_RADAR_ON))

  0194b	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01952	74 10		 je	 SHORT $LN212@draw_tacti
  01954	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  0195a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0195c	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv864[ebp], ecx
  01962	eb 20		 jmp	 SHORT $LN213@draw_tacti
$LN212@draw_tacti:
  01964	68 42 11 00 00	 push	 4418			; 00001142H
  01969	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0196e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01974	52		 push	 edx
  01975	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0197a	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv864[ebp], 0
$LN213@draw_tacti:
  01984	b8 01 00 00 00	 mov	 eax, 1
  01989	85 c0		 test	 eax, eax
  0198b	74 0c		 je	 SHORT $LN214@draw_tacti
  0198d	c7 85 38 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv871[ebp], 169 ; 000000a9H
  01997	eb 20		 jmp	 SHORT $LN215@draw_tacti
$LN214@draw_tacti:
  01999	68 42 11 00 00	 push	 4418			; 00001142H
  0199e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  019a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  019a9	51		 push	 ecx
  019aa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  019af	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv871[ebp], 0
$LN215@draw_tacti:
  019b9	68 a9 00 00 00	 push	 169			; 000000a9H
  019be	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  019c4	52		 push	 edx
  019c5	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv864[ebp], 1116
  019cf	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv871[ebp]
  019d5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  019dc	ff d2		 call	 edx
  019de	85 c0		 test	 eax, eax
  019e0	0f 84 46 05 00
	00		 je	 $LN68@draw_tacti

; 4419 : 						{
; 4420 : 							threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  019e6	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  019ed	74 10		 je	 SHORT $LN216@draw_tacti
  019ef	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  019f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  019f7	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv884[ebp], ecx
  019fd	eb 27		 jmp	 SHORT $LN217@draw_tacti
$LN216@draw_tacti:
  019ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01a05	81 c2 7b 01 00
	00		 add	 edx, 379		; 0000017bH
  01a0b	52		 push	 edx
  01a0c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a11	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01a16	50		 push	 eax
  01a17	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a1c	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv884[ebp], 0
$LN217@draw_tacti:
  01a26	b9 01 00 00 00	 mov	 ecx, 1
  01a2b	85 c9		 test	 ecx, ecx
  01a2d	74 0c		 je	 SHORT $LN218@draw_tacti
  01a2f	c7 85 38 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv892[ebp], 233 ; 000000e9H
  01a39	eb 27		 jmp	 SHORT $LN219@draw_tacti
$LN218@draw_tacti:
  01a3b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01a41	81 c2 7b 01 00
	00		 add	 edx, 379		; 0000017bH
  01a47	52		 push	 edx
  01a48	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a4d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01a52	50		 push	 eax
  01a53	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a58	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv892[ebp], 0
$LN219@draw_tacti:
  01a62	68 e9 00 00 00	 push	 233			; 000000e9H
  01a67	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01a6d	51		 push	 ecx
  01a6e	69 95 3c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv884[ebp], 1116
  01a78	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv892[ebp]
  01a7e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01a85	ff d1		 call	 ecx
  01a87	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _threat_type$16[ebp], eax

; 4421 : 
; 4422 : 							if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  01a8d	83 bd c4 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$16[ebp], 5
  01a94	74 16		 je	 SHORT $LN64@draw_tacti
  01a96	83 bd c4 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$16[ebp], 6
  01a9d	74 0d		 je	 SHORT $LN64@draw_tacti
  01a9f	83 bd c4 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$16[ebp], 4
  01aa6	0f 85 80 04 00
	00		 jne	 $LN68@draw_tacti
$LN64@draw_tacti:

; 4423 : 							{
; 4424 : 								if (get_local_entity_parent (target, LIST_TYPE_TARGET) == source)

  01aac	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01ab3	74 10		 je	 SHORT $LN220@draw_tacti
  01ab5	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01abb	8b 08		 mov	 ecx, DWORD PTR [eax]
  01abd	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv906[ebp], ecx
  01ac3	eb 20		 jmp	 SHORT $LN221@draw_tacti
$LN220@draw_tacti:
  01ac5	68 48 11 00 00	 push	 4424			; 00001148H
  01aca	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01acf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ad5	52		 push	 edx
  01ad6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01adb	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv906[ebp], 0
$LN221@draw_tacti:
  01ae5	b8 01 00 00 00	 mov	 eax, 1
  01aea	85 c0		 test	 eax, eax
  01aec	74 0c		 je	 SHORT $LN222@draw_tacti
  01aee	c7 85 38 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv913[ebp], 38 ; 00000026H
  01af8	eb 20		 jmp	 SHORT $LN223@draw_tacti
$LN222@draw_tacti:
  01afa	68 48 11 00 00	 push	 4424			; 00001148H
  01aff	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b04	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01b0a	51		 push	 ecx
  01b0b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b10	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv913[ebp], 0
$LN223@draw_tacti:
  01b1a	6a 26		 push	 38			; 00000026H
  01b1c	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01b22	52		 push	 edx
  01b23	69 85 3c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv906[ebp], 180
  01b2d	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv913[ebp]
  01b33	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01b3a	ff d2		 call	 edx
  01b3c	3b 85 fc fe ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01b42	0f 85 e4 03 00
	00		 jne	 $LN68@draw_tacti

; 4425 : 								{
; 4426 : 									draw_threat_line = TRUE;

  01b48	c7 85 c0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$15[ebp], 1

; 4427 : 
; 4428 : 									launched_weapon = get_local_entity_first_child (target, LIST_TYPE_LAUNCHED_WEAPON);

  01b52	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01b59	74 10		 je	 SHORT $LN224@draw_tacti
  01b5b	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01b61	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b63	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv926[ebp], ecx
  01b69	eb 27		 jmp	 SHORT $LN225@draw_tacti
$LN224@draw_tacti:
  01b6b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01b71	81 c2 83 01 00
	00		 add	 edx, 387		; 00000183H
  01b77	52		 push	 edx
  01b78	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b7d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01b82	50		 push	 eax
  01b83	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b88	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv926[ebp], 0
$LN225@draw_tacti:
  01b92	b9 01 00 00 00	 mov	 ecx, 1
  01b97	85 c9		 test	 ecx, ecx
  01b99	74 0c		 je	 SHORT $LN226@draw_tacti
  01b9b	c7 85 38 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv966[ebp], 24 ; 00000018H
  01ba5	eb 27		 jmp	 SHORT $LN227@draw_tacti
$LN226@draw_tacti:
  01ba7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01bad	81 c2 83 01 00
	00		 add	 edx, 387		; 00000183H
  01bb3	52		 push	 edx
  01bb4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01bb9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01bbe	50		 push	 eax
  01bbf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01bc4	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv966[ebp], 0
$LN227@draw_tacti:
  01bce	6a 18		 push	 24			; 00000018H
  01bd0	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01bd6	51		 push	 ecx
  01bd7	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv926[ebp], 180
  01be1	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv966[ebp]
  01be7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01bee	ff d1		 call	 ecx
  01bf0	89 85 cc fe ff
	ff		 mov	 DWORD PTR _launched_weapon$18[ebp], eax
$LN14@draw_tacti:

; 4429 : 
; 4430 : 									while (launched_weapon)

  01bf6	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  01bfd	0f 84 ef 01 00
	00		 je	 $LN15@draw_tacti

; 4431 : 									{
; 4432 : 										if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  01c03	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  01c0a	74 10		 je	 SHORT $LN228@draw_tacti
  01c0c	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  01c12	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c14	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv978[ebp], ecx
  01c1a	eb 20		 jmp	 SHORT $LN229@draw_tacti
$LN228@draw_tacti:
  01c1c	68 50 11 00 00	 push	 4432			; 00001150H
  01c21	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c26	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01c2c	52		 push	 edx
  01c2d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c32	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv978[ebp], 0
$LN229@draw_tacti:
  01c3c	b8 01 00 00 00	 mov	 eax, 1
  01c41	85 c0		 test	 eax, eax
  01c43	74 0c		 je	 SHORT $LN230@draw_tacti
  01c45	c7 85 38 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv985[ebp], 263 ; 00000107H
  01c4f	eb 20		 jmp	 SHORT $LN231@draw_tacti
$LN230@draw_tacti:
  01c51	68 50 11 00 00	 push	 4432			; 00001150H
  01c56	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c5b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01c61	51		 push	 ecx
  01c62	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c67	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv985[ebp], 0
$LN231@draw_tacti:
  01c71	68 07 01 00 00	 push	 263			; 00000107H
  01c76	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$18[ebp]
  01c7c	52		 push	 edx
  01c7d	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv978[ebp], 1116
  01c87	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv985[ebp]
  01c8d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01c94	ff d2		 call	 edx
  01c96	85 c0		 test	 eax, eax
  01c98	0f 84 ab 00 00
	00		 je	 $LN67@draw_tacti

; 4433 : 										{
; 4434 : 											if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  01c9e	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  01ca5	74 10		 je	 SHORT $LN232@draw_tacti
  01ca7	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  01cad	8b 08		 mov	 ecx, DWORD PTR [eax]
  01caf	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv997[ebp], ecx
  01cb5	eb 20		 jmp	 SHORT $LN233@draw_tacti
$LN232@draw_tacti:
  01cb7	68 52 11 00 00	 push	 4434			; 00001152H
  01cbc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01cc1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01cc7	52		 push	 edx
  01cc8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ccd	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv997[ebp], 0
$LN233@draw_tacti:
  01cd7	b8 01 00 00 00	 mov	 eax, 1
  01cdc	85 c0		 test	 eax, eax
  01cde	74 0c		 je	 SHORT $LN234@draw_tacti
  01ce0	c7 85 38 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1004[ebp], 38 ; 00000026H
  01cea	eb 20		 jmp	 SHORT $LN235@draw_tacti
$LN234@draw_tacti:
  01cec	68 52 11 00 00	 push	 4434			; 00001152H
  01cf1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01cf6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01cfc	51		 push	 ecx
  01cfd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d02	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1004[ebp], 0
$LN235@draw_tacti:
  01d0c	6a 26		 push	 38			; 00000026H
  01d0e	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$18[ebp]
  01d14	52		 push	 edx
  01d15	69 85 3c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv997[ebp], 180
  01d1f	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv1004[ebp]
  01d25	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01d2c	ff d2		 call	 edx
  01d2e	3b 85 fc fe ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01d34	75 13		 jne	 SHORT $LN67@draw_tacti

; 4435 : 											{
; 4436 : 												draw_threat_line = *tsd_draw_threat_line_status;

  01d36	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  01d3c	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d3e	89 8d c0 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$15[ebp], ecx

; 4437 : 
; 4438 : 												break;

  01d44	e9 a9 00 00 00	 jmp	 $LN15@draw_tacti
$LN67@draw_tacti:

; 4439 : 											}
; 4440 : 										}
; 4441 : 
; 4442 : 										launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01d49	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  01d50	74 10		 je	 SHORT $LN236@draw_tacti
  01d52	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  01d58	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d5a	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1017[ebp], ecx
  01d60	eb 27		 jmp	 SHORT $LN237@draw_tacti
$LN236@draw_tacti:
  01d62	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01d68	81 c2 91 01 00
	00		 add	 edx, 401		; 00000191H
  01d6e	52		 push	 edx
  01d6f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d74	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d79	50		 push	 eax
  01d7a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d7f	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1017[ebp], 0
$LN237@draw_tacti:
  01d89	b9 01 00 00 00	 mov	 ecx, 1
  01d8e	85 c9		 test	 ecx, ecx
  01d90	74 0c		 je	 SHORT $LN238@draw_tacti
  01d92	c7 85 38 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1025[ebp], 24 ; 00000018H
  01d9c	eb 27		 jmp	 SHORT $LN239@draw_tacti
$LN238@draw_tacti:
  01d9e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01da4	81 c2 91 01 00
	00		 add	 edx, 401		; 00000191H
  01daa	52		 push	 edx
  01dab	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01db0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01db5	50		 push	 eax
  01db6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01dbb	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1025[ebp], 0
$LN239@draw_tacti:
  01dc5	6a 18		 push	 24			; 00000018H
  01dc7	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$18[ebp]
  01dcd	51		 push	 ecx
  01dce	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1017[ebp], 180
  01dd8	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1025[ebp]
  01dde	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01de5	ff d1		 call	 ecx
  01de7	89 85 cc fe ff
	ff		 mov	 DWORD PTR _launched_weapon$18[ebp], eax

; 4443 : 									}

  01ded	e9 04 fe ff ff	 jmp	 $LN14@draw_tacti
$LN15@draw_tacti:

; 4444 : 
; 4445 : 									if (draw_threat_line)

  01df2	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$15[ebp], 0
  01df9	0f 84 2d 01 00
	00		 je	 $LN68@draw_tacti

; 4446 : 									{
; 4447 : 										target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  01dff	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01e06	74 10		 je	 SHORT $LN240@draw_tacti
  01e08	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01e0e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e10	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1038[ebp], ecx
  01e16	eb 27		 jmp	 SHORT $LN241@draw_tacti
$LN240@draw_tacti:
  01e18	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01e1e	81 c2 96 01 00
	00		 add	 edx, 406		; 00000196H
  01e24	52		 push	 edx
  01e25	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e2a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e2f	50		 push	 eax
  01e30	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e35	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1038[ebp], 0
$LN241@draw_tacti:
  01e3f	b9 01 00 00 00	 mov	 ecx, 1
  01e44	85 c9		 test	 ecx, ecx
  01e46	74 0c		 je	 SHORT $LN242@draw_tacti
  01e48	c7 85 38 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1046[ebp], 8
  01e52	eb 27		 jmp	 SHORT $LN243@draw_tacti
$LN242@draw_tacti:
  01e54	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01e5a	81 c2 96 01 00
	00		 add	 edx, 406		; 00000196H
  01e60	52		 push	 edx
  01e61	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e66	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01e6b	50		 push	 eax
  01e6c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e71	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1046[ebp], 0
$LN243@draw_tacti:
  01e7b	6a 08		 push	 8
  01e7d	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01e83	51		 push	 ecx
  01e84	6b 95 3c fe ff
	ff 60		 imul	 edx, DWORD PTR tv1038[ebp], 96
  01e8b	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1046[ebp]
  01e91	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01e98	ff d1		 call	 ecx
  01e9a	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _target_position$17[ebp], eax

; 4448 : 
; 4449 : 										dx = (target_position->x - source_position->x) * scale;

  01ea0	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  01ea6	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01eac	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01eb0	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01eb4	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01ebc	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _dx$13[ebp], xmm0

; 4450 : 										dy = (target_position->z - source_position->z) * scale;

  01ec4	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  01eca	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01ed0	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01ed5	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01eda	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01ee2	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _dy$12[ebp], xmm0

; 4451 : 
; 4452 : 										draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  01eea	b8 04 00 00 00	 mov	 eax, 4
  01eef	6b c8 00	 imul	 ecx, eax, 0
  01ef2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ef8	52		 push	 edx
  01ef9	51		 push	 ecx
  01efa	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  01f02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f07	51		 push	 ecx
  01f08	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  01f10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f15	51		 push	 ecx
  01f16	0f 57 c0	 xorps	 xmm0, xmm0
  01f19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f1e	51		 push	 ecx
  01f1f	0f 57 c0	 xorps	 xmm0, xmm0
  01f22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f27	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN68@draw_tacti:

; 4453 : 									}
; 4454 : 								}
; 4455 : 							}
; 4456 : 						}
; 4457 : 					}
; 4458 : 				}
; 4459 : 
; 4460 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01f2c	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01f33	74 10		 je	 SHORT $LN244@draw_tacti
  01f35	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01f3b	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f3d	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1073[ebp], ecx
  01f43	eb 27		 jmp	 SHORT $LN245@draw_tacti
$LN244@draw_tacti:
  01f45	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01f4b	81 c2 a3 01 00
	00		 add	 edx, 419		; 000001a3H
  01f51	52		 push	 edx
  01f52	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f57	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01f5c	50		 push	 eax
  01f5d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f62	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1073[ebp], 0
$LN245@draw_tacti:
  01f6c	b9 01 00 00 00	 mov	 ecx, 1
  01f71	85 c9		 test	 ecx, ecx
  01f73	74 0c		 je	 SHORT $LN246@draw_tacti
  01f75	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv1081[ebp], 18 ; 00000012H
  01f7f	eb 27		 jmp	 SHORT $LN247@draw_tacti
$LN246@draw_tacti:
  01f81	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  01f87	81 c2 a3 01 00
	00		 add	 edx, 419		; 000001a3H
  01f8d	52		 push	 edx
  01f8e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f93	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01f98	50		 push	 eax
  01f99	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f9e	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1081[ebp], 0
$LN247@draw_tacti:
  01fa8	6a 12		 push	 18			; 00000012H
  01faa	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01fb0	51		 push	 ecx
  01fb1	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1073[ebp], 180
  01fbb	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1081[ebp]
  01fc1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01fc8	ff d1		 call	 ecx
  01fca	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 4461 : 			}

  01fd0	e9 32 f8 ff ff	 jmp	 $LN12@draw_tacti
$LN13@draw_tacti:

; 4462 : 
; 4463 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01fd5	51		 push	 ecx
  01fd6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01fde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fe3	51		 push	 ecx
  01fe4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  01fec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ff1	51		 push	 ecx
  01ff2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  01ffa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fff	51		 push	 ecx
  02000	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  02008	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0200d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  02012	50		 push	 eax
  02013	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4464 : 
; 4465 : 			set_2d_window_rotation (mfd_env, 0.0);

  02018	51		 push	 ecx
  02019	0f 57 c0	 xorps	 xmm0, xmm0
  0201c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  02026	50		 push	 eax
  02027	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN44@draw_tacti:

; 4466 : 		}
; 4467 : 	}
; 4468 : 
; 4469 : 	////////////////////////////////////////
; 4470 : 	//
; 4471 : 	// aircraft datum symbol
; 4472 : 	//
; 4473 : 	////////////////////////////////////////
; 4474 : 
; 4475 : 	if (draw_large_mfd)

  0202c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02033	74 6c		 je	 SHORT $LN69@draw_tacti

; 4476 : 	{
; 4477 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR6);

  02035	b8 04 00 00 00	 mov	 eax, 4
  0203a	6b c8 05	 imul	 ecx, eax, 5
  0203d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02043	52		 push	 edx
  02044	51		 push	 ecx
  02045	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0204d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02052	51		 push	 ecx
  02053	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  0205b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02060	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  02065	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4478 : 
; 4479 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR1);

  0206a	b8 04 00 00 00	 mov	 eax, 4
  0206f	6b c8 00	 imul	 ecx, eax, 0
  02072	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02078	52		 push	 edx
  02079	51		 push	 ecx
  0207a	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02082	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02087	51		 push	 ecx
  02088	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  02090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02095	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  0209a	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4480 : 	}
; 4481 : 	else

  0209f	eb 6a		 jmp	 SHORT $LN70@draw_tacti
$LN69@draw_tacti:

; 4482 : 	{
; 4483 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR6);

  020a1	b8 04 00 00 00	 mov	 eax, 4
  020a6	6b c8 05	 imul	 ecx, eax, 5
  020a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020af	52		 push	 edx
  020b0	51		 push	 ecx
  020b1	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  020b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020be	51		 push	 ecx
  020bf	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  020c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020cc	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  020d1	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4484 : 
; 4485 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR1);

  020d6	b8 04 00 00 00	 mov	 eax, 4
  020db	6b c8 00	 imul	 ecx, eax, 0
  020de	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020e4	52		 push	 edx
  020e5	51		 push	 ecx
  020e6	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  020ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020f3	51		 push	 ecx
  020f4	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  020fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02101	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  02106	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN70@draw_tacti:

; 4486 : 	}
; 4487 : 
; 4488 : 	// ATARIBABY added heading tape to TSD NAV display
; 4489 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION || tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  0210b	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  02112	74 0d		 je	 SHORT $LN72@draw_tacti
  02114	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 0
  0211b	0f 85 cc 00 00
	00		 jne	 $LN71@draw_tacti
$LN72@draw_tacti:

; 4490 : 	{
; 4491 : 		set_mono_font_colour (MFD_COLOUR1);

  02121	b8 04 00 00 00	 mov	 eax, 4
  02126	6b c8 00	 imul	 ecx, eax, 0
  02129	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0212f	52		 push	 edx
  02130	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4492 : 		draw_heading_scale_tsd (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING), TRUE);

  02135	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0213c	74 0f		 je	 SHORT $LN248@draw_tacti
  0213e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  02143	8b 08		 mov	 ecx, DWORD PTR [eax]
  02145	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1131[ebp], ecx
  0214b	eb 27		 jmp	 SHORT $LN249@draw_tacti
$LN248@draw_tacti:
  0214d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  02153	81 c2 c3 01 00
	00		 add	 edx, 451		; 000001c3H
  02159	52		 push	 edx
  0215a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0215f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02164	50		 push	 eax
  02165	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0216a	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1131[ebp], 0
$LN249@draw_tacti:
  02174	b9 01 00 00 00	 mov	 ecx, 1
  02179	85 c9		 test	 ecx, ecx
  0217b	74 0c		 je	 SHORT $LN250@draw_tacti
  0217d	c7 85 38 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv1139[ebp], 52 ; 00000034H
  02187	eb 27		 jmp	 SHORT $LN251@draw_tacti
$LN250@draw_tacti:
  02189	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0218f	81 c2 c3 01 00
	00		 add	 edx, 451		; 000001c3H
  02195	52		 push	 edx
  02196	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0219b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  021a0	50		 push	 eax
  021a1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  021a6	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1139[ebp], 0
$LN251@draw_tacti:
  021b0	6a 01		 push	 1
  021b2	6a 34		 push	 52			; 00000034H
  021b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  021ba	51		 push	 ecx
  021bb	69 95 3c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv1131[ebp], 700
  021c5	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1139[ebp]
  021cb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  021d2	ff d1		 call	 ecx
  021d4	d9 9d 34 fe ff
	ff		 fstp	 DWORD PTR tv2204[ebp]
  021da	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR tv2204[ebp]
  021e2	51		 push	 ecx
  021e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021e8	e8 00 00 00 00	 call	 ?draw_heading_scale_tsd@@YGXMH@Z ; draw_heading_scale_tsd
$LN71@draw_tacti:

; 4493 : 	}
; 4494 : 
; 4495 : 	////////////////////////////////////////
; 4496 : 	//
; 4497 : 	// text
; 4498 : 	//
; 4499 : 	////////////////////////////////////////
; 4500 : 
; 4501 : 	set_mono_font_colour (MFD_COLOUR1);

  021ed	b8 04 00 00 00	 mov	 eax, 4
  021f2	6b c8 00	 imul	 ecx, eax, 0
  021f5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021fb	52		 push	 edx
  021fc	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4502 : 
; 4503 : 	if (draw_large_mfd)

  02201	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02208	74 09		 je	 SHORT $LN73@draw_tacti

; 4504 : 	{
; 4505 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0220a	6a 05		 push	 5
  0220c	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4506 : 	}
; 4507 : 	else

  02211	eb 07		 jmp	 SHORT $LN74@draw_tacti
$LN73@draw_tacti:

; 4508 : 	{
; 4509 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  02213	6a 01		 push	 1
  02215	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN74@draw_tacti:

; 4510 : 	}
; 4511 : 
; 4512 : 	//
; 4513 : 	// sensor type
; 4514 : 	//
; 4515 : 
; 4516 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  0221a	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  02221	0f 84 89 01 00
	00		 je	 $LN75@draw_tacti

; 4517 : 	{
; 4518 : 		switch (target_acquisition_system)

  02227	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  0222c	89 85 3c fe ff
	ff		 mov	 DWORD PTR tv1154[ebp], eax
  02232	83 bd 3c fe ff
	ff 09		 cmp	 DWORD PTR tv1154[ebp], 9
  02239	77 2f		 ja	 SHORT $LN79@draw_tacti
  0223b	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR tv1154[ebp]
  02241	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN268@draw_tacti[ecx]
  02248	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN271@draw_tacti[edx*4]
$LN76@draw_tacti:

; 4519 : 		{
; 4520 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 4521 : 			{
; 4522 : 				s = "NO ACQ";

  0224f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06LLLMNJMM@NO?5ACQ@

; 4523 : 
; 4524 : 				break;

  02256	eb 19		 jmp	 SHORT $LN16@draw_tacti
$LN77@draw_tacti:

; 4525 : 			}
; 4526 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 4527 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 4528 : 			{
; 4529 : 				s = "TADS";

  02258	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 4530 : 
; 4531 : 				break;

  0225f	eb 10		 jmp	 SHORT $LN16@draw_tacti
$LN78@draw_tacti:

; 4532 : 			}
; 4533 : 			case TARGET_ACQUISITION_SYSTEM_HIDSS:
; 4534 : 			{
; 4535 : 				s = "HIDSS";

  02261	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05BDMPLNHB@HIDSS@

; 4536 : 
; 4537 : 				break;

  02268	eb 07		 jmp	 SHORT $LN16@draw_tacti
$LN79@draw_tacti:

; 4538 : 			}
; 4539 : 			default:
; 4540 : 			{
; 4541 : 				s = "XXX";

  0226a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN16@draw_tacti:

; 4542 : 
; 4543 : 				break;
; 4544 : 			}
; 4545 : 		}
; 4546 : 
; 4547 : 		if (draw_large_mfd)

  02271	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02278	74 12		 je	 SHORT $LN80@draw_tacti

; 4548 : 		{
; 4549 : 			y_adjust = 5.0;

  0227a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02282	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4550 : 		}
; 4551 : 		else

  0228a	eb 10		 jmp	 SHORT $LN81@draw_tacti
$LN80@draw_tacti:

; 4552 : 		{
; 4553 : 			y_adjust = 2.0;

  0228c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02294	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN81@draw_tacti:

; 4554 : 		}
; 4555 : 
; 4556 : 		set_2d_mono_font_position (-1.0, 1.0);

  0229c	51		 push	 ecx
  0229d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  022a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022aa	51		 push	 ecx
  022ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  022b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022b8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4557 : 
; 4558 : 		set_mono_font_rel_position (1.0, y_adjust);

  022bd	51		 push	 ecx
  022be	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  022c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022cb	51		 push	 ecx
  022cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  022d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022d9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4559 : 
; 4560 : 		print_mono_font_string (s);

  022de	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  022e1	50		 push	 eax
  022e2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4561 : 
; 4562 : 		switch (target_acquisition_system)

  022e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  022ec	89 85 3c fe ff
	ff		 mov	 DWORD PTR tv1162[ebp], eax
  022f2	83 bd 3c fe ff
	ff 09		 cmp	 DWORD PTR tv1162[ebp], 9
  022f9	77 38		 ja	 SHORT $LN86@draw_tacti
  022fb	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR tv1162[ebp]
  02301	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN269@draw_tacti[ecx]
  02308	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN272@draw_tacti[edx*4]
$LN82@draw_tacti:

; 4563 : 		{
; 4564 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 4565 : 			{
; 4566 : 				s = "";

  0230f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 4567 : 
; 4568 : 				break;

  02316	eb 22		 jmp	 SHORT $LN18@draw_tacti
$LN83@draw_tacti:

; 4569 : 			}
; 4570 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 4571 : 			{
; 4572 : 				s = "FLIR";

  02318	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04MIGKMLBH@FLIR@

; 4573 : 
; 4574 : 				break;

  0231f	eb 19		 jmp	 SHORT $LN18@draw_tacti
$LN84@draw_tacti:

; 4575 : 			}
; 4576 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 4577 : 			{
; 4578 : 				s = "DTV";

  02321	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03ENJJJDDH@DTV@

; 4579 : 
; 4580 : 				break;

  02328	eb 10		 jmp	 SHORT $LN18@draw_tacti
$LN85@draw_tacti:

; 4581 : 			}
; 4582 : 			case TARGET_ACQUISITION_SYSTEM_HIDSS:
; 4583 : 			{
; 4584 : 				s = "";

  0232a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 4585 : 
; 4586 : 				break;

  02331	eb 07		 jmp	 SHORT $LN18@draw_tacti
$LN86@draw_tacti:

; 4587 : 			}
; 4588 : 			default:
; 4589 : 			{
; 4590 : 				s = "XXX";

  02333	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN18@draw_tacti:

; 4591 : 
; 4592 : 				break;
; 4593 : 			}
; 4594 : 		}
; 4595 : 
; 4596 : 		if (draw_large_mfd)

  0233a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02341	74 12		 je	 SHORT $LN87@draw_tacti

; 4597 : 		{
; 4598 : 			y_adjust = 18.0;

  02343	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  0234b	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4599 : 		}
; 4600 : 		else

  02353	eb 10		 jmp	 SHORT $LN88@draw_tacti
$LN87@draw_tacti:

; 4601 : 		{
; 4602 : 			y_adjust = 9.0;

  02355	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  0235d	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN88@draw_tacti:

; 4603 : 		}
; 4604 : 
; 4605 : 		set_2d_mono_font_position (-1.0, 1.0);

  02365	51		 push	 ecx
  02366	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0236e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02373	51		 push	 ecx
  02374	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0237c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02381	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4606 : 
; 4607 : 		set_mono_font_rel_position (1.0, y_adjust);

  02386	51		 push	 ecx
  02387	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0238f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02394	51		 push	 ecx
  02395	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0239d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023a2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4608 : 
; 4609 : 		print_mono_font_string (s);

  023a7	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  023aa	50		 push	 eax
  023ab	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN75@draw_tacti:

; 4610 : 	}
; 4611 : 
; 4612 : 	//
; 4613 : 	// TSD range
; 4614 : 	//
; 4615 : 
; 4616 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  023b0	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  023b8	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  023bf	9f		 lahf
  023c0	f6 c4 44	 test	 ah, 68			; 00000044H
  023c3	7a 09		 jp	 SHORT $LN89@draw_tacti

; 4617 : 	{
; 4618 : 		s = "2Km";

  023c5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  023cc	eb 61		 jmp	 SHORT $LN96@draw_tacti
$LN89@draw_tacti:

; 4619 : 	}
; 4620 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  023ce	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  023d6	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  023dd	9f		 lahf
  023de	f6 c4 44	 test	 ah, 68			; 00000044H
  023e1	7a 09		 jp	 SHORT $LN91@draw_tacti

; 4621 : 	{
; 4622 : 		s = "5Km";

  023e3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  023ea	eb 43		 jmp	 SHORT $LN96@draw_tacti
$LN91@draw_tacti:

; 4623 : 	}
; 4624 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  023ec	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  023f4	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  023fb	9f		 lahf
  023fc	f6 c4 44	 test	 ah, 68			; 00000044H
  023ff	7a 09		 jp	 SHORT $LN93@draw_tacti

; 4625 : 	{
; 4626 : 		s = "10Km";

  02401	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  02408	eb 25		 jmp	 SHORT $LN96@draw_tacti
$LN93@draw_tacti:

; 4627 : 	}
; 4628 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  0240a	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  02412	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  02419	9f		 lahf
  0241a	f6 c4 44	 test	 ah, 68			; 00000044H
  0241d	7a 09		 jp	 SHORT $LN95@draw_tacti

; 4629 : 	{
; 4630 : 		s = "25Km";

  0241f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 4631 : 	}
; 4632 : 	else

  02426	eb 07		 jmp	 SHORT $LN96@draw_tacti
$LN95@draw_tacti:

; 4633 : 	{
; 4634 : 		s = "XXX";

  02428	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN96@draw_tacti:

; 4635 : 	}
; 4636 : 
; 4637 : 	width = get_mono_font_string_width (s);

  0242f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02432	50		 push	 eax
  02433	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02438	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4638 : 
; 4639 : 	if (draw_large_mfd)

  0243e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02445	74 2e		 je	 SHORT $LN97@draw_tacti

; 4640 : 	{
; 4641 : 		width += 2.0;

  02447	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0244f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02457	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0245b	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4642 : 
; 4643 : 		y_adjust = 5.0;

  02463	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0246b	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4644 : 	}
; 4645 : 	else

  02473	eb 2c		 jmp	 SHORT $LN98@draw_tacti
$LN97@draw_tacti:

; 4646 : 	{
; 4647 : 		width += 1.0;

  02475	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0247d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02485	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02489	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4648 : 
; 4649 : 		y_adjust = 2.0;

  02491	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02499	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN98@draw_tacti:

; 4650 : 	}
; 4651 : 
; 4652 : 	set_2d_mono_font_position (1.0, 1.0);

  024a1	51		 push	 ecx
  024a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024af	51		 push	 ecx
  024b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024bd	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4653 : 
; 4654 : 	set_mono_font_rel_position (-width, y_adjust);

  024c2	51		 push	 ecx
  024c3	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  024cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024d0	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  024d8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  024df	51		 push	 ecx
  024e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024e5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4655 : 
; 4656 : 	print_mono_font_string (s);

  024ea	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  024ed	50		 push	 eax
  024ee	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4657 : 
; 4658 : 	//
; 4659 : 	// TSD declutter level
; 4660 : 	//
; 4661 : 
; 4662 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  024f3	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 0
  024fa	75 09		 jne	 SHORT $LN99@draw_tacti

; 4663 : 	{
; 4664 : 		s = "ALL";

  024fc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03NIFPGLBG@ALL@
  02503	eb 2b		 jmp	 SHORT $LN104@draw_tacti
$LN99@draw_tacti:

; 4665 : 	}
; 4666 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  02505	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  0250c	75 09		 jne	 SHORT $LN101@draw_tacti

; 4667 : 	{
; 4668 : 		s = "TGT";

  0250e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DBNGLLAD@TGT@
  02515	eb 19		 jmp	 SHORT $LN104@draw_tacti
$LN101@draw_tacti:

; 4669 : 	}
; 4670 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  02517	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  0251e	75 09		 jne	 SHORT $LN103@draw_tacti

; 4671 : 	{
; 4672 : 		s = "NAV";

  02520	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DIMJBCMI@NAV@

; 4673 : 	}
; 4674 : 	else

  02527	eb 07		 jmp	 SHORT $LN104@draw_tacti
$LN103@draw_tacti:

; 4675 : 	{
; 4676 : 		s = "XXX";

  02529	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN104@draw_tacti:

; 4677 : 	}
; 4678 : 
; 4679 : 	width = get_mono_font_string_width (s);

  02530	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02533	50		 push	 eax
  02534	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02539	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4680 : 
; 4681 : 	if (draw_large_mfd)

  0253f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02546	74 2e		 je	 SHORT $LN105@draw_tacti

; 4682 : 	{
; 4683 : 		width += 2.0;

  02548	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02550	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02558	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0255c	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4684 : 
; 4685 : 		y_adjust = 18.0;

  02564	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  0256c	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4686 : 	}
; 4687 : 	else

  02574	eb 2c		 jmp	 SHORT $LN106@draw_tacti
$LN105@draw_tacti:

; 4688 : 	{
; 4689 : 		width += 1.0;

  02576	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0257e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02586	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0258a	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4690 : 
; 4691 : 		y_adjust = 9.0;

  02592	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  0259a	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN106@draw_tacti:

; 4692 : 	}
; 4693 : 
; 4694 : 	set_2d_mono_font_position (1.0, 1.0);

  025a2	51		 push	 ecx
  025a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  025ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025b0	51		 push	 ecx
  025b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  025b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025be	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4695 : 
; 4696 : 	set_mono_font_rel_position (-width, y_adjust);

  025c3	51		 push	 ecx
  025c4	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  025cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025d1	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  025d9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  025e0	51		 push	 ecx
  025e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025e6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4697 : 
; 4698 : 	print_mono_font_string (s);

  025eb	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  025ee	50		 push	 eax
  025ef	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4699 : 
; 4700 : 	//
; 4701 : 	// target range
; 4702 : 	//
; 4703 : 
; 4704 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  025f4	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  025fb	0f 84 ff 01 00
	00		 je	 $LN108@draw_tacti

; 4705 : 	{
; 4706 : 		if (source_target)

  02601	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  02608	0f 84 f2 01 00
	00		 je	 $LN108@draw_tacti

; 4707 : 		{
; 4708 : 			vec3d
; 4709 : 				*target_position;
; 4710 : 
; 4711 : 			float
; 4712 : 				target_range;
; 4713 : 
; 4714 : 			target_position = get_local_entity_vec3d_ptr (source_target, VEC3D_TYPE_POSITION);

  0260e	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  02615	74 10		 je	 SHORT $LN252@draw_tacti
  02617	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _source_target$[ebp]
  0261d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0261f	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1215[ebp], ecx
  02625	eb 27		 jmp	 SHORT $LN253@draw_tacti
$LN252@draw_tacti:
  02627	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0262d	81 c2 a1 02 00
	00		 add	 edx, 673		; 000002a1H
  02633	52		 push	 edx
  02634	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  02639	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0263e	50		 push	 eax
  0263f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02644	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1215[ebp], 0
$LN253@draw_tacti:
  0264e	b9 01 00 00 00	 mov	 ecx, 1
  02653	85 c9		 test	 ecx, ecx
  02655	74 0c		 je	 SHORT $LN254@draw_tacti
  02657	c7 85 38 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1223[ebp], 8
  02661	eb 27		 jmp	 SHORT $LN255@draw_tacti
$LN254@draw_tacti:
  02663	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  02669	81 c2 a1 02 00
	00		 add	 edx, 673		; 000002a1H
  0266f	52		 push	 edx
  02670	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  02675	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0267a	50		 push	 eax
  0267b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02680	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1223[ebp], 0
$LN255@draw_tacti:
  0268a	6a 08		 push	 8
  0268c	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  02692	51		 push	 ecx
  02693	6b 95 3c fe ff
	ff 60		 imul	 edx, DWORD PTR tv1215[ebp], 96
  0269a	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1223[ebp]
  026a0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  026a7	ff d1		 call	 ecx
  026a9	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _target_position$11[ebp], eax

; 4715 : 
; 4716 : 			target_range = get_3d_range (source_position, target_position);

  026af	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$11[ebp]
  026b5	50		 push	 eax
  026b6	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  026bc	51		 push	 ecx
  026bd	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  026c2	d9 9d ac fe ff
	ff		 fstp	 DWORD PTR _target_range$10[ebp]

; 4717 : 
; 4718 : 			if ((target_range < 1000.0) && (!viper_damage.laser_designator))

  026c8	f3 0f 5a 85 ac
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$10[ebp]
  026d0	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  026d8	66 0f 2f c8	 comisd	 xmm1, xmm0
  026dc	76 2c		 jbe	 SHORT $LN109@draw_tacti
  026de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  026e3	c1 e8 02	 shr	 eax, 2
  026e6	83 e0 01	 and	 eax, 1
  026e9	75 1f		 jne	 SHORT $LN109@draw_tacti

; 4719 : 			{
; 4720 : 				sprintf (buffer, "%dm", (int) target_range);

  026eb	f3 0f 2c 85 ac
	fe ff ff	 cvttss2si eax, DWORD PTR _target_range$10[ebp]
  026f3	50		 push	 eax
  026f4	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  026f9	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  026ff	51		 push	 ecx
  02700	e8 00 00 00 00	 call	 _sprintf
  02705	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4721 : 			}
; 4722 : 			else

  02708	eb 2c		 jmp	 SHORT $LN110@draw_tacti
$LN109@draw_tacti:

; 4723 : 			{
; 4724 : 				sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  0270a	f3 0f 5a 85 ac
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$10[ebp]
  02712	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0271a	83 ec 08	 sub	 esp, 8
  0271d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02722	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  02727	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0272d	50		 push	 eax
  0272e	e8 00 00 00 00	 call	 _sprintf
  02733	83 c4 10	 add	 esp, 16			; 00000010H
$LN110@draw_tacti:

; 4725 : 			}
; 4726 : 
; 4727 : 			width = get_mono_font_string_width (buffer);

  02736	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0273c	50		 push	 eax
  0273d	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02742	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4728 : 
; 4729 : 			if (draw_large_mfd)

  02748	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0274f	74 2e		 je	 SHORT $LN111@draw_tacti

; 4730 : 			{
; 4731 : 				width += 2.0;

  02751	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02759	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02761	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02765	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4732 : 
; 4733 : 				y_adjust = -12.0;

  0276d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02775	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4734 : 			}
; 4735 : 			else

  0277d	eb 2c		 jmp	 SHORT $LN112@draw_tacti
$LN111@draw_tacti:

; 4736 : 			{
; 4737 : 				width += 1.0;

  0277f	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02787	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0278f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02793	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4738 : 
; 4739 : 				y_adjust = -5.0;

  0279b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  027a3	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN112@draw_tacti:

; 4740 : 			}
; 4741 : 
; 4742 : 			set_2d_mono_font_position (1.0, -1.0);

  027ab	51		 push	 ecx
  027ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  027b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027b9	51		 push	 ecx
  027ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  027c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027c7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4743 : 
; 4744 : 			set_mono_font_rel_position (-width, y_adjust);

  027cc	51		 push	 ecx
  027cd	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  027d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027da	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  027e2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  027e9	51		 push	 ecx
  027ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027ef	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4745 : 
; 4746 : 			print_mono_font_string (buffer);

  027f4	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  027fa	50		 push	 eax
  027fb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN108@draw_tacti:

; 4747 : 		}
; 4748 : 	}
; 4749 : 
; 4750 : 	//
; 4751 : 	// waypoint information
; 4752 : 	//
; 4753 : 
; 4754 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !viper_damage.navigation_computer)

  02800	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  02807	0f 84 f7 04 00
	00		 je	 $LN114@draw_tacti
  0280d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  02812	c1 e8 05	 shr	 eax, 5
  02815	83 e0 01	 and	 eax, 1
  02818	0f 85 e6 04 00
	00		 jne	 $LN114@draw_tacti

; 4755 : 	{
; 4756 : 		entity
; 4757 : 			*wp;
; 4758 : 
; 4759 : 		vec3d
; 4760 : 			waypoint_position;
; 4761 : 
; 4762 : 		float
; 4763 : 			waypoint_range;
; 4764 : 
; 4765 : 		wp = get_local_entity_current_waypoint (source);

  0281e	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02824	50		 push	 eax
  02825	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  0282a	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _wp$9[ebp], eax

; 4766 : 
; 4767 : 		if (wp)

  02830	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02837	0f 84 c7 04 00
	00		 je	 $LN114@draw_tacti

; 4768 : 		{
; 4769 : 			get_waypoint_display_position (source, wp, &waypoint_position);

  0283d	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$8[ebp]
  02843	50		 push	 eax
  02844	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp$9[ebp]
  0284a	51		 push	 ecx
  0284b	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  02851	52		 push	 edx
  02852	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4770 : 
; 4771 : 			//
; 4772 : 			// waypoint id & range
; 4773 : 			//
; 4774 : 
; 4775 : 			waypoint_range = get_2d_range (source_position, &waypoint_position);

  02857	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$8[ebp]
  0285d	50		 push	 eax
  0285e	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02864	51		 push	 ecx
  02865	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  0286a	d9 9d 98 fe ff
	ff		 fstp	 DWORD PTR _waypoint_range$7[ebp]

; 4776 : 
; 4777 : 			if (!viper_damage.navigation_computer)

  02870	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  02875	c1 e8 05	 shr	 eax, 5
  02878	83 e0 01	 and	 eax, 1
  0287b	0f 85 cb 02 00
	00		 jne	 $LN115@draw_tacti

; 4778 : 			{
; 4779 : 				if (waypoint_range < 1000.0)

  02881	f3 0f 5a 85 98
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  02889	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  02891	66 0f 2f c8	 comisd	 xmm1, xmm0
  02895	0f 86 c3 00 00
	00		 jbe	 $LN117@draw_tacti

; 4780 : 				{
; 4781 : 					sprintf (buffer, "%c:%dm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  0289b	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  028a2	74 10		 je	 SHORT $LN256@draw_tacti
  028a4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  028aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  028ac	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1288[ebp], ecx
  028b2	eb 27		 jmp	 SHORT $LN257@draw_tacti
$LN256@draw_tacti:
  028b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  028ba	81 c2 e4 02 00
	00		 add	 edx, 740		; 000002e4H
  028c0	52		 push	 edx
  028c1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  028c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  028cb	50		 push	 eax
  028cc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  028d1	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1288[ebp], 0
$LN257@draw_tacti:
  028db	b9 01 00 00 00	 mov	 ecx, 1
  028e0	85 c9		 test	 ecx, ecx
  028e2	74 0c		 je	 SHORT $LN258@draw_tacti
  028e4	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1296[ebp], 0
  028ee	eb 27		 jmp	 SHORT $LN259@draw_tacti
$LN258@draw_tacti:
  028f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  028f6	81 c2 e4 02 00
	00		 add	 edx, 740		; 000002e4H
  028fc	52		 push	 edx
  028fd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  02902	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02907	50		 push	 eax
  02908	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0290d	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1296[ebp], 0
$LN259@draw_tacti:
  02917	f3 0f 2c 8d 98
	fe ff ff	 cvttss2si ecx, DWORD PTR _waypoint_range$7[ebp]
  0291f	51		 push	 ecx
  02920	6a 00		 push	 0
  02922	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _wp$9[ebp]
  02928	52		 push	 edx
  02929	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1296[ebp]
  0292f	c1 e0 02	 shl	 eax, 2
  02932	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR tv1288[ebp]
  02938	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  0293f	ff d2		 call	 edx
  02941	0f b6 c0	 movzx	 eax, al
  02944	50		 push	 eax
  02945	68 00 00 00 00	 push	 OFFSET ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
  0294a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02950	51		 push	 ecx
  02951	e8 00 00 00 00	 call	 _sprintf
  02956	83 c4 10	 add	 esp, 16			; 00000010H
  02959	e9 ec 01 00 00	 jmp	 $LN120@draw_tacti
$LN117@draw_tacti:

; 4782 : 				}
; 4783 : 				else if (waypoint_range < 100000.0)

  0295e	f3 0f 5a 85 98
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  02966	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  0296e	66 0f 2f c8	 comisd	 xmm1, xmm0
  02972	0f 86 08 01 00
	00		 jbe	 $LN119@draw_tacti

; 4784 : 				{
; 4785 : 					int
; 4786 : 						i;
; 4787 : 
; 4788 : 					float
; 4789 : 						f;
; 4790 : 
; 4791 : 					//
; 4792 : 					// this is required to prevent rounding errors around the 100Km mark
; 4793 : 					//
; 4794 : 
; 4795 : 					i = (int) waypoint_range * (1.0 / 100.0);

  02978	f3 0f 2c 85 98
	fe ff ff	 cvttss2si eax, DWORD PTR _waypoint_range$7[ebp]
  02980	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  02984	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  0298c	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02990	89 8d 94 fe ff
	ff		 mov	 DWORD PTR _i$6[ebp], ecx

; 4796 : 
; 4797 : 					f = (float) i * (1.0 / 10.0);

  02996	f3 0f 2a 85 94
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  0299e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  029a2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  029aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  029ae	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _f$5[ebp], xmm0

; 4798 : 
; 4799 : 					sprintf (buffer, "%c:%.1fKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  029b6	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  029bd	74 10		 je	 SHORT $LN260@draw_tacti
  029bf	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  029c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  029c7	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1324[ebp], ecx
  029cd	eb 27		 jmp	 SHORT $LN261@draw_tacti
$LN260@draw_tacti:
  029cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  029d5	81 c2 f6 02 00
	00		 add	 edx, 758		; 000002f6H
  029db	52		 push	 edx
  029dc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  029e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  029e6	50		 push	 eax
  029e7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  029ec	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1324[ebp], 0
$LN261@draw_tacti:
  029f6	b9 01 00 00 00	 mov	 ecx, 1
  029fb	85 c9		 test	 ecx, ecx
  029fd	74 0c		 je	 SHORT $LN262@draw_tacti
  029ff	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1332[ebp], 0
  02a09	eb 27		 jmp	 SHORT $LN263@draw_tacti
$LN262@draw_tacti:
  02a0b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  02a11	81 c2 f6 02 00
	00		 add	 edx, 758		; 000002f6H
  02a17	52		 push	 edx
  02a18	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  02a1d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02a22	50		 push	 eax
  02a23	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02a28	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1332[ebp], 0
$LN263@draw_tacti:
  02a32	f3 0f 5a 85 90
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _f$5[ebp]
  02a3a	83 ec 08	 sub	 esp, 8
  02a3d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02a42	6a 00		 push	 0
  02a44	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp$9[ebp]
  02a4a	51		 push	 ecx
  02a4b	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR tv1332[ebp]
  02a51	c1 e2 02	 shl	 edx, 2
  02a54	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR tv1324[ebp]
  02a5a	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  02a61	ff d1		 call	 ecx
  02a63	0f b6 d0	 movzx	 edx, al
  02a66	52		 push	 edx
  02a67	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
  02a6c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02a72	50		 push	 eax
  02a73	e8 00 00 00 00	 call	 _sprintf
  02a78	83 c4 14	 add	 esp, 20			; 00000014H

; 4800 : 				}
; 4801 : 				else

  02a7b	e9 ca 00 00 00	 jmp	 $LN120@draw_tacti
$LN119@draw_tacti:

; 4802 : 				{
; 4803 : 					sprintf (buffer, "%c:%dKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  02a80	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02a87	74 10		 je	 SHORT $LN264@draw_tacti
  02a89	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  02a8f	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a91	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1353[ebp], ecx
  02a97	eb 27		 jmp	 SHORT $LN265@draw_tacti
$LN264@draw_tacti:
  02a99	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  02a9f	81 c2 fa 02 00
	00		 add	 edx, 762		; 000002faH
  02aa5	52		 push	 edx
  02aa6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  02aab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02ab0	50		 push	 eax
  02ab1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02ab6	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1353[ebp], 0
$LN265@draw_tacti:
  02ac0	b9 01 00 00 00	 mov	 ecx, 1
  02ac5	85 c9		 test	 ecx, ecx
  02ac7	74 0c		 je	 SHORT $LN266@draw_tacti
  02ac9	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1361[ebp], 0
  02ad3	eb 27		 jmp	 SHORT $LN267@draw_tacti
$LN266@draw_tacti:
  02ad5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  02adb	81 c2 fa 02 00
	00		 add	 edx, 762		; 000002faH
  02ae1	52		 push	 edx
  02ae2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  02ae7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02aec	50		 push	 eax
  02aed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02af2	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1361[ebp], 0
$LN267@draw_tacti:
  02afc	f3 0f 5a 85 98
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  02b04	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  02b0c	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02b10	51		 push	 ecx
  02b11	6a 00		 push	 0
  02b13	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _wp$9[ebp]
  02b19	52		 push	 edx
  02b1a	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1361[ebp]
  02b20	c1 e0 02	 shl	 eax, 2
  02b23	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR tv1353[ebp]
  02b29	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  02b30	ff d2		 call	 edx
  02b32	0f b6 c0	 movzx	 eax, al
  02b35	50		 push	 eax
  02b36	68 00 00 00 00	 push	 OFFSET ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
  02b3b	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02b41	51		 push	 ecx
  02b42	e8 00 00 00 00	 call	 _sprintf
  02b47	83 c4 10	 add	 esp, 16			; 00000010H
$LN120@draw_tacti:

; 4804 : 				}
; 4805 : 			}
; 4806 : 			else

  02b4a	eb 14		 jmp	 SHORT $LN116@draw_tacti
$LN115@draw_tacti:

; 4807 : 			{
; 4808 : 				sprintf (buffer, "-:--.-");

  02b4c	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  02b51	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02b57	50		 push	 eax
  02b58	e8 00 00 00 00	 call	 _sprintf
  02b5d	83 c4 08	 add	 esp, 8
$LN116@draw_tacti:

; 4809 : 			}
; 4810 : 
; 4811 : 			if (draw_large_mfd)

  02b60	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02b67	74 12		 je	 SHORT $LN121@draw_tacti

; 4812 : 			{
; 4813 : 				y_adjust = -25.0;

  02b69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  02b71	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4814 : 			}
; 4815 : 			else

  02b79	eb 10		 jmp	 SHORT $LN122@draw_tacti
$LN121@draw_tacti:

; 4816 : 			{
; 4817 : 				y_adjust = -12.0;

  02b7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02b83	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN122@draw_tacti:

; 4818 : 			}
; 4819 : 
; 4820 : 			set_2d_mono_font_position (-1.0, -1.0);

  02b8b	51		 push	 ecx
  02b8c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02b94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b99	51		 push	 ecx
  02b9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02ba2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ba7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4821 : 
; 4822 : 			set_mono_font_rel_position (1.0, y_adjust);

  02bac	51		 push	 ecx
  02bad	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02bb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bba	51		 push	 ecx
  02bbb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02bc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bc8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4823 : 
; 4824 : 			print_mono_font_string (buffer);

  02bcd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02bd3	50		 push	 eax
  02bd4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4825 : 
; 4826 : 			//
; 4827 : 			// time to go
; 4828 : 			//
; 4829 : 
; 4830 : 			if ((current_flight_dynamics->velocity_z.value > 0.1) && (!viper_damage.navigation_computer))

  02bd9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02bde	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  02be6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  02bee	0f 86 83 00 00
	00		 jbe	 $LN123@draw_tacti
  02bf4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  02bf9	c1 e8 05	 shr	 eax, 5
  02bfc	83 e0 01	 and	 eax, 1
  02bff	75 76		 jne	 SHORT $LN123@draw_tacti

; 4831 : 			{
; 4832 : 				float
; 4833 : 					time_to_go,
; 4834 : 					hours,
; 4835 : 					minutes,
; 4836 : 					seconds;
; 4837 : 
; 4838 : 				time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  02c01	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02c06	f3 0f 10 85 98
	fe ff ff	 movss	 xmm0, DWORD PTR _waypoint_range$7[ebp]
  02c0e	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  02c16	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _time_to_go$4[ebp], xmm0

; 4839 : 
; 4840 : 				get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  02c1e	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _seconds$1[ebp]
  02c24	50		 push	 eax
  02c25	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$2[ebp]
  02c2b	51		 push	 ecx
  02c2c	8d 95 88 fe ff
	ff		 lea	 edx, DWORD PTR _hours$3[ebp]
  02c32	52		 push	 edx
  02c33	51		 push	 ecx
  02c34	f3 0f 10 85 8c
	fe ff ff	 movss	 xmm0, DWORD PTR _time_to_go$4[ebp]
  02c3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c41	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 4841 : 
; 4842 : 				sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  02c46	f3 0f 2c 85 80
	fe ff ff	 cvttss2si eax, DWORD PTR _seconds$1[ebp]
  02c4e	50		 push	 eax
  02c4f	f3 0f 2c 8d 84
	fe ff ff	 cvttss2si ecx, DWORD PTR _minutes$2[ebp]
  02c57	51		 push	 ecx
  02c58	f3 0f 2c 95 88
	fe ff ff	 cvttss2si edx, DWORD PTR _hours$3[ebp]
  02c60	52		 push	 edx
  02c61	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  02c66	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02c6c	50		 push	 eax
  02c6d	e8 00 00 00 00	 call	 _sprintf
  02c72	83 c4 14	 add	 esp, 20			; 00000014H

; 4843 : 			}
; 4844 : 			else

  02c75	eb 14		 jmp	 SHORT $LN124@draw_tacti
$LN123@draw_tacti:

; 4845 : 			{
; 4846 : 				strcpy (buffer, "--:--:--");

  02c77	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  02c7c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02c82	50		 push	 eax
  02c83	e8 00 00 00 00	 call	 _strcpy
  02c88	83 c4 08	 add	 esp, 8
$LN124@draw_tacti:

; 4847 : 			}
; 4848 : 
; 4849 : 			if (draw_large_mfd)

  02c8b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02c92	74 12		 je	 SHORT $LN125@draw_tacti

; 4850 : 			{
; 4851 : 				y_adjust = -12.0;

  02c94	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02c9c	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4852 : 			}
; 4853 : 			else

  02ca4	eb 10		 jmp	 SHORT $LN126@draw_tacti
$LN125@draw_tacti:

; 4854 : 			{
; 4855 : 				y_adjust = -5.0;

  02ca6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02cae	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN126@draw_tacti:

; 4856 : 			}
; 4857 : 
; 4858 : 			set_2d_mono_font_position (-1.0, -1.0);

  02cb6	51		 push	 ecx
  02cb7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02cbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cc4	51		 push	 ecx
  02cc5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02ccd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cd2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4859 : 
; 4860 : 			set_mono_font_rel_position (1.0, y_adjust);

  02cd7	51		 push	 ecx
  02cd8	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02ce0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ce5	51		 push	 ecx
  02ce6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02cee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cf3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4861 : 
; 4862 : 			print_mono_font_string (buffer);

  02cf8	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02cfe	50		 push	 eax
  02cff	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN114@draw_tacti:

; 4863 : 		}
; 4864 : 	}
; 4865 : 
; 4866 : //VJ 030423 TSD render mod
; 4867 : 	set_rgb_colour (MFD_COLOUR1,              0, 255,   0, 255);

  02d04	b8 04 00 00 00	 mov	 eax, 4
  02d09	6b c8 00	 imul	 ecx, eax, 0
  02d0c	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  02d13	b8 04 00 00 00	 mov	 eax, 4
  02d18	6b c8 00	 imul	 ecx, eax, 0
  02d1b	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  02d22	b8 04 00 00 00	 mov	 eax, 4
  02d27	6b c8 00	 imul	 ecx, eax, 0
  02d2a	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  02d31	b8 04 00 00 00	 mov	 eax, 4
  02d36	6b c8 00	 imul	 ecx, eax, 0
  02d39	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4868 : 	set_rgb_colour (MFD_COLOUR2,              0, 200,   0, 255);

  02d40	b8 04 00 00 00	 mov	 eax, 4
  02d45	c1 e0 00	 shl	 eax, 0
  02d48	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  02d4f	b8 04 00 00 00	 mov	 eax, 4
  02d54	c1 e0 00	 shl	 eax, 0
  02d57	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  02d5e	b8 04 00 00 00	 mov	 eax, 4
  02d63	c1 e0 00	 shl	 eax, 0
  02d66	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  02d6d	b8 04 00 00 00	 mov	 eax, 4
  02d72	c1 e0 00	 shl	 eax, 0
  02d75	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 4869 : 	set_rgb_colour (MFD_COLOUR3,              0, 176,   0, 255);

  02d7c	b8 04 00 00 00	 mov	 eax, 4
  02d81	d1 e0		 shl	 eax, 1
  02d83	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  02d8a	b8 04 00 00 00	 mov	 eax, 4
  02d8f	d1 e0		 shl	 eax, 1
  02d91	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  02d98	b8 04 00 00 00	 mov	 eax, 4
  02d9d	d1 e0		 shl	 eax, 1
  02d9f	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  02da6	b8 04 00 00 00	 mov	 eax, 4
  02dab	d1 e0		 shl	 eax, 1
  02dad	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 4870 : 	set_rgb_colour (MFD_COLOUR4,              0, 151,   0, 255);

  02db4	b8 04 00 00 00	 mov	 eax, 4
  02db9	6b c8 03	 imul	 ecx, eax, 3
  02dbc	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  02dc3	b8 04 00 00 00	 mov	 eax, 4
  02dc8	6b c8 03	 imul	 ecx, eax, 3
  02dcb	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  02dd2	b8 04 00 00 00	 mov	 eax, 4
  02dd7	6b c8 03	 imul	 ecx, eax, 3
  02dda	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  02de1	b8 04 00 00 00	 mov	 eax, 4
  02de6	6b c8 03	 imul	 ecx, eax, 3
  02de9	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4871 : 	set_rgb_colour (MFD_COLOUR5,              0, 128,   0, 255);

  02df0	b8 04 00 00 00	 mov	 eax, 4
  02df5	c1 e0 02	 shl	 eax, 2
  02df8	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  02dff	b8 04 00 00 00	 mov	 eax, 4
  02e04	c1 e0 02	 shl	 eax, 2
  02e07	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  02e0e	b8 04 00 00 00	 mov	 eax, 4
  02e13	c1 e0 02	 shl	 eax, 2
  02e16	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  02e1d	b8 04 00 00 00	 mov	 eax, 4
  02e22	c1 e0 02	 shl	 eax, 2
  02e25	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 4872 : 	set_rgb_colour (MFD_COLOUR6,             40,  68,  56, 255);

  02e2c	b8 04 00 00 00	 mov	 eax, 4
  02e31	6b c8 05	 imul	 ecx, eax, 5
  02e34	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  02e3b	b8 04 00 00 00	 mov	 eax, 4
  02e40	6b c8 05	 imul	 ecx, eax, 5
  02e43	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  02e4a	b8 04 00 00 00	 mov	 eax, 4
  02e4f	6b c8 05	 imul	 ecx, eax, 5
  02e52	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  02e59	b8 04 00 00 00	 mov	 eax, 4
  02e5e	6b c8 05	 imul	 ecx, eax, 5
  02e61	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4873 : }

  02e68	5f		 pop	 edi
  02e69	5e		 pop	 esi
  02e6a	5b		 pop	 ebx
  02e6b	8b e5		 mov	 esp, ebp
  02e6d	5d		 pop	 ebp
  02e6e	c2 04 00	 ret	 4
  02e71	0f 1f 00	 npad	 3
$LN270@draw_tacti:
  02e74	00 00 00 00	 DD	 $LN22@draw_tacti
  02e78	00 00 00 00	 DD	 $LN22@draw_tacti
  02e7c	00 00 00 00	 DD	 $LN23@draw_tacti
  02e80	00 00 00 00	 DD	 $LN23@draw_tacti
$LN271@draw_tacti:
  02e84	00 00 00 00	 DD	 $LN76@draw_tacti
  02e88	00 00 00 00	 DD	 $LN77@draw_tacti
  02e8c	00 00 00 00	 DD	 $LN78@draw_tacti
  02e90	00 00 00 00	 DD	 $LN79@draw_tacti
$LN268@draw_tacti:
  02e94	00		 DB	 0
  02e95	03		 DB	 3
  02e96	03		 DB	 3
  02e97	01		 DB	 1
  02e98	01		 DB	 1
  02e99	03		 DB	 3
  02e9a	03		 DB	 3
  02e9b	03		 DB	 3
  02e9c	03		 DB	 3
  02e9d	02		 DB	 2
  02e9e	66 90		 npad	 2
$LN272@draw_tacti:
  02ea0	00 00 00 00	 DD	 $LN82@draw_tacti
  02ea4	00 00 00 00	 DD	 $LN83@draw_tacti
  02ea8	00 00 00 00	 DD	 $LN84@draw_tacti
  02eac	00 00 00 00	 DD	 $LN85@draw_tacti
  02eb0	00 00 00 00	 DD	 $LN86@draw_tacti
$LN269@draw_tacti:
  02eb4	00		 DB	 0
  02eb5	04		 DB	 4
  02eb6	04		 DB	 4
  02eb7	01		 DB	 1
  02eb8	02		 DB	 2
  02eb9	04		 DB	 4
  02eba	04		 DB	 4
  02ebb	04		 DB	 4
  02ebc	04		 DB	 4
  02ebd	03		 DB	 3
?draw_tactical_situation_display_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ENDP ; draw_tactical_situation_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_heading_scale_tsd@@YGXMH@Z
_TEXT	SEGMENT
tv192 = -196						; size = 8
tv193 = -188						; size = 8
tv160 = -188						; size = 4
tv326 = -184						; size = 4
tv323 = -184						; size = 4
tv252 = -184						; size = 4
tv152 = -184						; size = 4
_command_heading$1 = -116				; size = 4
_bearing$2 = -112					; size = 4
_dz$3 = -108						; size = 4
_dx$4 = -104						; size = 4
_waypoint_position$5 = -100				; size = 12
_gunship_position$6 = -88				; size = 4
_wp$7 = -84						; size = 4
_tick_type$ = -80					; size = 4
_int_heading_step_10$ = -76				; size = 4
_loop$ = -72						; size = 4
_mod_heading_step_10$ = -68				; size = 4
_heading_step_10$ = -64					; size = 4
_u$ = -60						; size = 4
_x$ = -56						; size = 4
_mfd_vp_x_max$ = -52					; size = 4
_mfd_vp_x_min$ = -48					; size = 4
_tick_datum_bottom$ = -44				; size = 4
_tick_datum_top$ = -40					; size = 4
_tick_30_deg_bottom$ = -36				; size = 4
_tick_30_deg_top$ = -32					; size = 4
_tick_10_deg_bottom$ = -28				; size = 4
_tick_10_deg_top$ = -24					; size = 4
_y_adjust$ = -20					; size = 4
_x_adjust_double$ = -16					; size = 4
_x_adjust_single$ = -12					; size = 4
_heading_tick_x_spacing$ = -8				; size = 4
_heading_width_ratio$ = -4				; size = 4
_heading$ = 8						; size = 4
_draw_command_heading$ = 12				; size = 4
?draw_heading_scale_tsd@@YGXMH@Z PROC			; draw_heading_scale_tsd, COMDAT

; 3761 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3762 : 	float
; 3763 : 		heading_width_ratio,
; 3764 : 		heading_tick_x_spacing,
; 3765 : 		x_adjust_single,
; 3766 : 		x_adjust_double,
; 3767 : 		y_adjust,
; 3768 : 		tick_10_deg_top,
; 3769 : 		tick_10_deg_bottom,
; 3770 : 		tick_30_deg_top,
; 3771 : 		tick_30_deg_bottom,
; 3772 : 		tick_datum_top,
; 3773 : 		tick_datum_bottom,
; 3774 : 		mfd_vp_x_min,
; 3775 : 		mfd_vp_x_max,
; 3776 : 		x,
; 3777 : 		u,
; 3778 : 		heading_step_10,
; 3779 : 		mod_heading_step_10;
; 3780 : 
; 3781 : 	int
; 3782 : 		loop,
; 3783 : 		int_heading_step_10,
; 3784 : 		tick_type;
; 3785 : 
; 3786 : 	//
; 3787 : 	// sort large and small mfd differences
; 3788 : 	//
; 3789 : 
; 3790 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	0f 84 9b 00 00
	00		 je	 $LN7@draw_headi

; 3791 : 	{
; 3792 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  00019	6a 02		 push	 2
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3793 : 
; 3794 : 		heading_width_ratio		= 0.4;

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 3795 : 
; 3796 : 		heading_tick_x_spacing	= 0.4 / 6.5;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d7c0fc1
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 3797 : 
; 3798 : 		x_adjust_single  			= -2.0;

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00042	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 3799 : 		x_adjust_double  			= -5.0;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0004f	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 3800 : 		y_adjust			  			= -8.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0005c	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3801 : 
; 3802 : 		tick_10_deg_top			= 0.925 - 0.015;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  00069	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 3803 : 		tick_10_deg_bottom  		= 0.925 - 0.015 - 0.045;

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5d70a4
  00076	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 3804 : 		tick_30_deg_top	  		= 0.925;

  0007b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6ccccd
  00083	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 3805 : 		tick_30_deg_bottom  		= 0.925 - 0.075;

  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00090	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 3806 : 		tick_datum_top		  		= 0.925 - 0.075 - 0.010;

  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f570a3d
  0009d	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 3807 : 		tick_datum_bottom	  		= 0.925 - 0.075 - 0.010 - 0.045;

  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4b851f
  000aa	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0

; 3808 : 	}
; 3809 : 	else

  000af	e9 96 00 00 00	 jmp	 $LN8@draw_headi
$LN7@draw_headi:

; 3810 : 	{
; 3811 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000b4	6a 00		 push	 0
  000b6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3812 : 
; 3813 : 		heading_width_ratio		= 0.3;

  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000c3	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 3814 : 
; 3815 : 		heading_tick_x_spacing	= 0.4 / 5.0;

  000c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  000d0	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 3816 : 
; 3817 : 		x_adjust_single			= -1.0;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000dd	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 3818 : 		x_adjust_double  			= -3.0;

  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000ea	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 3819 : 		y_adjust			  			= -6.0;

  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  000f7	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3820 : 
; 3821 : 		tick_10_deg_top  			= 0.875 - 0.015;

  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5c28f6
  00104	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 3822 : 		tick_10_deg_bottom 		= 0.875 - 0.015 - 0.045;

  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f50a3d7
  00111	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 3823 : 		tick_30_deg_top	  		= 0.875;

  00116	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f600000
  0011e	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 3824 : 		tick_30_deg_bottom  		= 0.875 - 0.075;

  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0012b	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 3825 : 		tick_datum_top		  		= 0.875 - 0.075 - 0.010;

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  00138	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 3826 : 		tick_datum_bottom	  		= 0.875 - 0.075 - 0.010 - 0.045;

  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  00145	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0
$LN8@draw_headi:

; 3827 : 	}
; 3828 : 
; 3829 : 	//
; 3830 : 	// adjust 2D environment for heading scale clipping
; 3831 : 	//
; 3832 : 
; 3833 : 	get_2d_float_screen_x_coordinate (0.0, &u);

  0014a	8d 45 c4	 lea	 eax, DWORD PTR _u$[ebp]
  0014d	50		 push	 eax
  0014e	51		 push	 ecx
  0014f	0f 57 c0	 xorps	 xmm0, xmm0
  00152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00157	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 3834 : 
; 3835 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * heading_width_ratio, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * heading_width_ratio, MFD_WINDOW_Y_MAX);

  0015c	51		 push	 ecx
  0015d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0016f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  00177	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0017b	51		 push	 ecx
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	51		 push	 ecx
  00182	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  00194	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  0019c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a0	51		 push	 ecx
  001a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 3836 : 
; 3837 : 	mfd_vp_x_min = u - (mfd_viewport_size * (heading_width_ratio * 0.5));

  001b1	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  001b6	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001be	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  001c3	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  001cb	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001cf	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d7	f3 0f 11 45 d0	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 3838 : 
; 3839 : 	mfd_vp_x_max = u + (mfd_viewport_size * (heading_width_ratio * 0.5)) - 0.001;

  001dc	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  001e1	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001e9	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  001ee	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  001f6	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001fa	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001fe	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00206	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020a	f3 0f 11 45 cc	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 3840 : 
; 3841 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  0020f	51		 push	 ecx
  00210	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00218	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021d	51		 push	 ecx
  0021e	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  00223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00228	51		 push	 ecx
  00229	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00236	51		 push	 ecx
  00237	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  0023c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00241	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00246	50		 push	 eax
  00247	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3842 : 
; 3843 : 	//
; 3844 : 	// draw heading datum tick
; 3845 : 	//
; 3846 : 
; 3847 : 	draw_2d_line (0.0, tick_datum_top, 0.0, tick_datum_bottom, MFD_COLOUR1);

  0024c	b8 04 00 00 00	 mov	 eax, 4
  00251	6b c8 00	 imul	 ecx, eax, 0
  00254	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0025a	52		 push	 edx
  0025b	51		 push	 ecx
  0025c	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00261	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00266	51		 push	 ecx
  00267	0f 57 c0	 xorps	 xmm0, xmm0
  0026a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026f	51		 push	 ecx
  00270	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  00275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027a	51		 push	 ecx
  0027b	0f 57 c0	 xorps	 xmm0, xmm0
  0027e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00283	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3848 : 
; 3849 : 	//
; 3850 : 	// draw command heading carat
; 3851 : 	//
; 3852 : 
; 3853 : 	if (draw_command_heading)

  00288	83 7d 0c 00	 cmp	 DWORD PTR _draw_command_heading$[ebp], 0
  0028c	0f 84 97 02 00
	00		 je	 $LN16@draw_headi

; 3854 : 	{
; 3855 : 		if (!viper_damage.navigation_computer)

  00292	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00297	c1 e8 05	 shr	 eax, 5
  0029a	83 e0 01	 and	 eax, 1
  0029d	0f 85 86 02 00
	00		 jne	 $LN16@draw_headi

; 3856 : 		{
; 3857 : 			entity
; 3858 : 				*wp;
; 3859 : 
; 3860 : 			wp = get_local_entity_current_waypoint (get_gunship_entity ());

  002a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002a8	50		 push	 eax
  002a9	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  002ae	89 45 ac	 mov	 DWORD PTR _wp$7[ebp], eax

; 3861 : 
; 3862 : 			if (wp)

  002b1	83 7d ac 00	 cmp	 DWORD PTR _wp$7[ebp], 0
  002b5	0f 84 6e 02 00
	00		 je	 $LN16@draw_headi

; 3863 : 			{
; 3864 : 				vec3d
; 3865 : 					*gunship_position,
; 3866 : 					waypoint_position;
; 3867 : 
; 3868 : 				float
; 3869 : 					dx,
; 3870 : 					dz,
; 3871 : 					bearing,
; 3872 : 					command_heading;
; 3873 : 
; 3874 : 				gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  002bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  002c2	74 0f		 je	 SHORT $LN28@draw_headi
  002c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cb	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv152[ebp], ecx
  002d1	eb 24		 jmp	 SHORT $LN29@draw_headi
$LN28@draw_headi:
  002d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA
  002d9	83 c2 71	 add	 edx, 113		; 00000071H
  002dc	52		 push	 edx
  002dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002e7	50		 push	 eax
  002e8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ed	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], 0
$LN29@draw_headi:
  002f7	b9 01 00 00 00	 mov	 ecx, 1
  002fc	85 c9		 test	 ecx, ecx
  002fe	74 0c		 je	 SHORT $LN30@draw_headi
  00300	c7 85 44 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv160[ebp], 8
  0030a	eb 24		 jmp	 SHORT $LN31@draw_headi
$LN30@draw_headi:
  0030c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA
  00312	83 c2 71	 add	 edx, 113		; 00000071H
  00315	52		 push	 edx
  00316	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0031b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00320	50		 push	 eax
  00321	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00326	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv160[ebp], 0
$LN31@draw_headi:
  00330	6a 08		 push	 8
  00332	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00338	51		 push	 ecx
  00339	6b 95 48 ff ff
	ff 60		 imul	 edx, DWORD PTR tv152[ebp], 96
  00340	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv160[ebp]
  00346	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0034d	ff d1		 call	 ecx
  0034f	89 45 a8	 mov	 DWORD PTR _gunship_position$6[ebp], eax

; 3875 : 
; 3876 : 				get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  00352	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$5[ebp]
  00355	50		 push	 eax
  00356	8b 4d ac	 mov	 ecx, DWORD PTR _wp$7[ebp]
  00359	51		 push	 ecx
  0035a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00360	52		 push	 edx
  00361	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 3877 : 
; 3878 : 				dx = waypoint_position.x - gunship_position->x;

  00366	8b 45 a8	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  00369	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp]
  0036e	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00372	f3 0f 11 45 98	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 3879 : 				dz = waypoint_position.z - gunship_position->z;

  00377	8b 45 a8	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  0037a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp+8]
  0037f	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00384	f3 0f 11 45 94	 movss	 DWORD PTR _dz$3[ebp], xmm0

; 3880 : 
; 3881 : 				bearing = atan2 (dx, dz);

  00389	51		 push	 ecx
  0038a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _dz$3[ebp]
  0038f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00394	51		 push	 ecx
  00395	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0039a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039f	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  003a4	d9 5d 90	 fstp	 DWORD PTR _bearing$2[ebp]

; 3882 : 
; 3883 : 				command_heading = bearing - heading;

  003a7	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bearing$2[ebp]
  003ac	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _heading$[ebp]
  003b1	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 3884 : 
; 3885 : 				if (command_heading > rad (180.0))

  003b6	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  003bb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  003c3	76 18		 jbe	 SHORT $LN12@draw_headi

; 3886 : 				{
; 3887 : 					command_heading -= rad (360.0);

  003c5	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  003ca	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  003d2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003d6	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
  003db	eb 29		 jmp	 SHORT $LN14@draw_headi
$LN12@draw_headi:

; 3888 : 				}
; 3889 : 				else if (command_heading < rad (-180.0))

  003dd	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  003e2	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  003ea	66 0f 2f c8	 comisd	 xmm1, xmm0
  003ee	76 16		 jbe	 SHORT $LN14@draw_headi

; 3890 : 				{
; 3891 : 					command_heading += rad (360.0);

  003f0	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  003f5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  003fd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00401	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
$LN14@draw_headi:

; 3892 : 				}
; 3893 : 
; 3894 : 				command_heading = bound (command_heading, rad (-90.0), rad (90.0));

  00406	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  0040b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff921fb51000000
  00413	66 0f 2f c8	 comisd	 xmm1, xmm0
  00417	76 12		 jbe	 SHORT $LN34@draw_headi
  00419	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff921fb51000000
  00421	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv193[ebp], xmm0
  00429	eb 3e		 jmp	 SHORT $LN35@draw_headi
$LN34@draw_headi:
  0042b	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00430	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff921fb51000000
  00438	76 12		 jbe	 SHORT $LN32@draw_headi
  0043a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff921fb51000000
  00442	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv192[ebp], xmm0
  0044a	eb 0d		 jmp	 SHORT $LN33@draw_headi
$LN32@draw_headi:
  0044c	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00451	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv192[ebp], xmm0
$LN33@draw_headi:
  00459	f2 0f 10 85 3c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv192[ebp]
  00461	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv193[ebp], xmm0
$LN35@draw_headi:
  00469	f2 0f 5a 85 44
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv193[ebp]
  00471	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 3895 : 
; 3896 : 				if (draw_large_mfd)

  00476	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0047d	74 56		 je	 SHORT $LN15@draw_headi

; 3897 : 				{
; 3898 : 					draw_2d_mono_sprite (large_command_heading_carat, 0.0 + (command_heading * ((heading_width_ratio - 0.035) / rad (90.0))), tick_datum_top, MFD_COLOUR1);

  0047f	b8 04 00 00 00	 mov	 eax, 4
  00484	6b c8 00	 imul	 ecx, eax, 0
  00487	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0048d	52		 push	 edx
  0048e	51		 push	 ecx
  0048f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  00494	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00499	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  0049e	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _heading_width_ratio$[ebp]
  004a3	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3fa1eb851eb851ec
  004ab	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@3ff921fb51000000
  004b3	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  004b7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  004bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004c3	51		 push	 ecx
  004c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c9	68 00 00 00 00	 push	 OFFSET ?large_command_heading_carat@@3PADA
  004ce	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3899 : 				}
; 3900 : 				else

  004d3	eb 54		 jmp	 SHORT $LN16@draw_headi
$LN15@draw_headi:

; 3901 : 				{
; 3902 : 					draw_2d_mono_sprite (small_command_heading_carat, 0.0 + (command_heading * ((heading_width_ratio - 0.050) / rad (90.0))), tick_datum_top, MFD_COLOUR1);

  004d5	b8 04 00 00 00	 mov	 eax, 4
  004da	6b c8 00	 imul	 ecx, eax, 0
  004dd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004e3	52		 push	 edx
  004e4	51		 push	 ecx
  004e5	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  004ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ef	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  004f4	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _heading_width_ratio$[ebp]
  004f9	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3fa999999999999a
  00501	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@3ff921fb51000000
  00509	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0050d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  00515	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00519	51		 push	 ecx
  0051a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051f	68 00 00 00 00	 push	 OFFSET ?small_command_heading_carat@@3PADA
  00524	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN16@draw_headi:

; 3903 : 				}
; 3904 : 			}
; 3905 : 		}
; 3906 : 	}
; 3907 : 
; 3908 : 	//
; 3909 : 	// draw heading scale
; 3910 : 	//
; 3911 : 
; 3912 : 	heading_step_10 = deg (heading * 0.1);

  00529	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  0052e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00536	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@404ca5dc00000000
  0053e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00542	f3 0f 11 45 c0	 movss	 DWORD PTR _heading_step_10$[ebp], xmm0

; 3913 : 
; 3914 : 	int_heading_step_10 = (int) heading_step_10;

  00547	f3 0f 2c 45 c0	 cvttss2si eax, DWORD PTR _heading_step_10$[ebp]
  0054c	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 3915 : 
; 3916 : 	mod_heading_step_10 = heading_step_10 - (float) int_heading_step_10;

  0054f	f3 0f 2a 45 b4	 cvtsi2ss xmm0, DWORD PTR _int_heading_step_10$[ebp]
  00554	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _heading_step_10$[ebp]
  00559	f3 0f 5c c8	 subss	 xmm1, xmm0
  0055d	f3 0f 11 4d bc	 movss	 DWORD PTR _mod_heading_step_10$[ebp], xmm1

; 3917 : 
; 3918 : 	int_heading_step_10 -= 10;

  00562	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00565	83 e8 0a	 sub	 eax, 10			; 0000000aH
  00568	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 3919 : 
; 3920 : 	if (int_heading_step_10 < 0)

  0056b	79 09		 jns	 SHORT $LN17@draw_headi

; 3921 : 	{
; 3922 : 		int_heading_step_10 += 36;

  0056d	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00570	83 c0 24	 add	 eax, 36			; 00000024H
  00573	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
$LN17@draw_headi:

; 3923 : 	}
; 3924 : 
; 3925 : 	// tick type:-
; 3926 : 	//
; 3927 : 	//		0 = long tick (30 degs)
; 3928 : 	//		1 = short tick (10 degs)
; 3929 : 	//		2 = short tick (20 degs)
; 3930 : 
; 3931 : 	tick_type = int_heading_step_10 % 3;

  00576	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00579	99		 cdq
  0057a	b9 03 00 00 00	 mov	 ecx, 3
  0057f	f7 f9		 idiv	 ecx
  00581	89 55 b0	 mov	 DWORD PTR _tick_type$[ebp], edx

; 3932 : 
; 3933 : 	x = - (10.0 + mod_heading_step_10) * heading_tick_x_spacing;

  00584	f3 0f 5a 45 bc	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  00589	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  00591	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00598	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _heading_tick_x_spacing$[ebp]
  0059d	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  005a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005a5	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 3934 : 
; 3935 : 	for (loop = 0; loop <= 20; loop++)

  005aa	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  005b1	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  005b3	8b 45 b8	 mov	 eax, DWORD PTR _loop$[ebp]
  005b6	83 c0 01	 add	 eax, 1
  005b9	89 45 b8	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  005bc	83 7d b8 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  005c0	0f 8f 4a 02 00
	00		 jg	 $LN3@draw_headi

; 3936 : 	{
; 3937 : 		if (tick_type == 0)

  005c6	83 7d b0 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  005ca	0f 85 92 01 00
	00		 jne	 $LN18@draw_headi

; 3938 : 		{
; 3939 : 			draw_2d_line (x, tick_30_deg_top, x, tick_30_deg_bottom, MFD_COLOUR1);

  005d0	b8 04 00 00 00	 mov	 eax, 4
  005d5	6b c8 00	 imul	 ecx, eax, 0
  005d8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005de	52		 push	 edx
  005df	51		 push	 ecx
  005e0	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_30_deg_bottom$[ebp]
  005e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ea	51		 push	 ecx
  005eb	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  005f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f5	51		 push	 ecx
  005f6	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  005fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00600	51		 push	 ecx
  00601	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3940 : 
; 3941 : 			set_2d_mono_font_position (x, tick_30_deg_top);

  00610	51		 push	 ecx
  00611	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	51		 push	 ecx
  0061c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00621	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00626	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3942 : 
; 3943 : 			switch (int_heading_step_10)

  0062b	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0062e	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv252[ebp], eax
  00634	83 bd 48 ff ff
	ff 1b		 cmp	 DWORD PTR tv252[ebp], 27 ; 0000001bH
  0063b	0f 87 ad 00 00
	00		 ja	 $LN24@draw_headi
  00641	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv252[ebp]
  00647	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN40@draw_headi[ecx]
  0064e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN41@draw_headi[edx*4]
$LN20@draw_headi:

; 3944 : 			{
; 3945 : 				////////////////////////////////////////
; 3946 : 				case 0:
; 3947 : 				////////////////////////////////////////
; 3948 : 				{
; 3949 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  00655	51		 push	 ecx
  00656	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0065b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00660	51		 push	 ecx
  00661	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00666	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3950 : 
; 3951 : 					print_mono_font_char ('N');

  00670	6a 4e		 push	 78			; 0000004eH
  00672	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3952 : 
; 3953 : 					break;

  00677	e9 e4 00 00 00	 jmp	 $LN5@draw_headi
$LN21@draw_headi:

; 3954 : 				}
; 3955 : 				////////////////////////////////////////
; 3956 : 				case 9:
; 3957 : 				////////////////////////////////////////
; 3958 : 				{
; 3959 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  0067c	51		 push	 ecx
  0067d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00682	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00687	51		 push	 ecx
  00688	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  0068d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00692	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3960 : 
; 3961 : 					print_mono_font_char ('E');

  00697	6a 45		 push	 69			; 00000045H
  00699	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3962 : 
; 3963 : 					break;

  0069e	e9 bd 00 00 00	 jmp	 $LN5@draw_headi
$LN22@draw_headi:

; 3964 : 				}
; 3965 : 				////////////////////////////////////////
; 3966 : 				case 18:
; 3967 : 				////////////////////////////////////////
; 3968 : 				{
; 3969 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  006a3	51		 push	 ecx
  006a4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ae	51		 push	 ecx
  006af	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  006b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3970 : 
; 3971 : 					print_mono_font_char ('S');

  006be	6a 53		 push	 83			; 00000053H
  006c0	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3972 : 
; 3973 : 					break;

  006c5	e9 96 00 00 00	 jmp	 $LN5@draw_headi
$LN23@draw_headi:

; 3974 : 				}
; 3975 : 				////////////////////////////////////////
; 3976 : 				case 27:
; 3977 : 				////////////////////////////////////////
; 3978 : 				{
; 3979 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  006ca	51		 push	 ecx
  006cb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d5	51		 push	 ecx
  006d6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  006db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3980 : 
; 3981 : 					print_mono_font_char ('W');

  006e5	6a 57		 push	 87			; 00000057H
  006e7	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3982 : 
; 3983 : 					break;

  006ec	eb 72		 jmp	 SHORT $LN5@draw_headi
$LN24@draw_headi:

; 3984 : 				}
; 3985 : 				////////////////////////////////////////
; 3986 : 				default:
; 3987 : 				////////////////////////////////////////
; 3988 : 				{
; 3989 : 					if (int_heading_step_10 < 10)

  006ee	83 7d b4 0a	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 10 ; 0000000aH
  006f2	7d 29		 jge	 SHORT $LN25@draw_headi

; 3990 : 					{
; 3991 : 						set_mono_font_rel_position (x_adjust_single, y_adjust);

  006f4	51		 push	 ecx
  006f5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ff	51		 push	 ecx
  00700	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00705	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3992 : 
; 3993 : 						print_mono_font_char ('0' + int_heading_step_10);

  0070f	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00712	83 c0 30	 add	 eax, 48			; 00000030H
  00715	50		 push	 eax
  00716	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3994 : 					}
; 3995 : 					else

  0071b	eb 43		 jmp	 SHORT $LN26@draw_headi
$LN25@draw_headi:

; 3996 : 					{
; 3997 : 						set_mono_font_rel_position (x_adjust_double, y_adjust);

  0071d	51		 push	 ecx
  0071e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00723	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00728	51		 push	 ecx
  00729	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_adjust_double$[ebp]
  0072e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00733	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3998 : 
; 3999 : 						print_mono_font_char ('0' + int_heading_step_10 / 10);

  00738	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0073b	99		 cdq
  0073c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00741	f7 f9		 idiv	 ecx
  00743	83 c0 30	 add	 eax, 48			; 00000030H
  00746	50		 push	 eax
  00747	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 4000 : 
; 4001 : 						print_mono_font_char ('0' + int_heading_step_10 % 10);

  0074c	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0074f	99		 cdq
  00750	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00755	f7 f9		 idiv	 ecx
  00757	83 c2 30	 add	 edx, 48			; 00000030H
  0075a	52		 push	 edx
  0075b	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN26@draw_headi:
$LN5@draw_headi:

; 4002 : 					}
; 4003 : 
; 4004 : 					break;
; 4005 : 				}
; 4006 : 			}
; 4007 : 		}
; 4008 : 		else

  00760	eb 40		 jmp	 SHORT $LN19@draw_headi
$LN18@draw_headi:

; 4009 : 		{
; 4010 : 			draw_2d_line (x, tick_10_deg_top, x, tick_10_deg_bottom, MFD_COLOUR1);

  00762	b8 04 00 00 00	 mov	 eax, 4
  00767	6b c8 00	 imul	 ecx, eax, 0
  0076a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00770	52		 push	 edx
  00771	51		 push	 ecx
  00772	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _tick_10_deg_bottom$[ebp]
  00777	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077c	51		 push	 ecx
  0077d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00782	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00787	51		 push	 ecx
  00788	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_10_deg_top$[ebp]
  0078d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00792	51		 push	 ecx
  00793	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00798	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN19@draw_headi:

; 4011 : 		}
; 4012 : 
; 4013 : 		int_heading_step_10 = (++int_heading_step_10 == 36) ? 0 : int_heading_step_10;

  007a2	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  007a5	83 c0 01	 add	 eax, 1
  007a8	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
  007ab	83 7d b4 24	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 36 ; 00000024H
  007af	75 0c		 jne	 SHORT $LN36@draw_headi
  007b1	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv323[ebp], 0
  007bb	eb 09		 jmp	 SHORT $LN37@draw_headi
$LN36@draw_headi:
  007bd	8b 4d b4	 mov	 ecx, DWORD PTR _int_heading_step_10$[ebp]
  007c0	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv323[ebp], ecx
$LN37@draw_headi:
  007c6	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv323[ebp]
  007cc	89 55 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], edx

; 4014 : 
; 4015 : 		tick_type = (++tick_type == 3) ? 0 : tick_type;

  007cf	8b 45 b0	 mov	 eax, DWORD PTR _tick_type$[ebp]
  007d2	83 c0 01	 add	 eax, 1
  007d5	89 45 b0	 mov	 DWORD PTR _tick_type$[ebp], eax
  007d8	83 7d b0 03	 cmp	 DWORD PTR _tick_type$[ebp], 3
  007dc	75 0c		 jne	 SHORT $LN38@draw_headi
  007de	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv326[ebp], 0
  007e8	eb 09		 jmp	 SHORT $LN39@draw_headi
$LN38@draw_headi:
  007ea	8b 4d b0	 mov	 ecx, DWORD PTR _tick_type$[ebp]
  007ed	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv326[ebp], ecx
$LN39@draw_headi:
  007f3	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv326[ebp]
  007f9	89 55 b0	 mov	 DWORD PTR _tick_type$[ebp], edx

; 4016 : 
; 4017 : 		x += heading_tick_x_spacing;

  007fc	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00801	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _heading_tick_x_spacing$[ebp]
  00806	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 4018 : 	}

  0080b	e9 a3 fd ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 4019 : 
; 4020 : 	//
; 4021 : 	// restore 2D environment
; 4022 : 	//
; 4023 : 
; 4024 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00810	51		 push	 ecx
  00811	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	51		 push	 ecx
  0081f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082c	51		 push	 ecx
  0082d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083a	51		 push	 ecx
  0083b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00843	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00848	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0084d	50		 push	 eax
  0084e	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 4025 : 
; 4026 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00853	51		 push	 ecx
  00854	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0085c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00861	51		 push	 ecx
  00862	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0086a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086f	51		 push	 ecx
  00870	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00878	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087d	51		 push	 ecx
  0087e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00886	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00890	50		 push	 eax
  00891	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4027 : }

  00896	5f		 pop	 edi
  00897	5e		 pop	 esi
  00898	5b		 pop	 ebx
  00899	8b e5		 mov	 esp, ebp
  0089b	5d		 pop	 ebp
  0089c	c2 08 00	 ret	 8
  0089f	90		 npad	 1
$LN41@draw_headi:
  008a0	00 00 00 00	 DD	 $LN20@draw_headi
  008a4	00 00 00 00	 DD	 $LN21@draw_headi
  008a8	00 00 00 00	 DD	 $LN22@draw_headi
  008ac	00 00 00 00	 DD	 $LN23@draw_headi
  008b0	00 00 00 00	 DD	 $LN24@draw_headi
$LN40@draw_headi:
  008b4	00		 DB	 0
  008b5	04		 DB	 4
  008b6	04		 DB	 4
  008b7	04		 DB	 4
  008b8	04		 DB	 4
  008b9	04		 DB	 4
  008ba	04		 DB	 4
  008bb	04		 DB	 4
  008bc	04		 DB	 4
  008bd	01		 DB	 1
  008be	04		 DB	 4
  008bf	04		 DB	 4
  008c0	04		 DB	 4
  008c1	04		 DB	 4
  008c2	04		 DB	 4
  008c3	04		 DB	 4
  008c4	04		 DB	 4
  008c5	04		 DB	 4
  008c6	02		 DB	 2
  008c7	04		 DB	 4
  008c8	04		 DB	 4
  008c9	04		 DB	 4
  008ca	04		 DB	 4
  008cb	04		 DB	 4
  008cc	04		 DB	 4
  008cd	04		 DB	 4
  008ce	04		 DB	 4
  008cf	03		 DB	 3
?draw_heading_scale_tsd@@YGXMH@Z ENDP			; draw_heading_scale_tsd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_2d_dtv_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_dtv_mfd@@YGXH@Z PROC				; draw_2d_dtv_mfd, COMDAT

; 2791 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2792 : 	draw_2d_eo_display (&viper_dtv, TARGET_ACQUISITION_SYSTEM_DTV, viper_damage.dtv, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00013	d1 e9		 shr	 ecx, 1
  00015	83 e1 01	 and	 ecx, 1
  00018	51		 push	 ecx
  00019	6a 04		 push	 4
  0001b	68 00 00 00 00	 push	 OFFSET ?viper_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; viper_dtv
  00020	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 2793 : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?draw_2d_dtv_mfd@@YGXH@Z ENDP				; draw_2d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_3d_dtv_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_dtv_mfd@@YGXH@Z PROC				; draw_3d_dtv_mfd, COMDAT

; 2772 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2773 : 	if (!viper_damage.dtv)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0000e	d1 e8		 shr	 eax, 1
  00010	83 e0 01	 and	 eax, 1
  00013	75 20		 jne	 SHORT $LN1@draw_3d_dt

; 2774 : 	{
; 2775 : 		if (full_screen)

  00015	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  00019	74 0e		 je	 SHORT $LN3@draw_3d_dt

; 2776 : 		{
; 2777 : 			draw_full_screen_3d_eo_display (&viper_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  0001b	6a 04		 push	 4
  0001d	68 00 00 00 00	 push	 OFFSET ?viper_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; viper_dtv
  00022	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 2778 : 		}
; 2779 : 		else

  00027	eb 0c		 jmp	 SHORT $LN1@draw_3d_dt
$LN3@draw_3d_dt:

; 2780 : 		{
; 2781 : 			draw_3d_eo_display (&viper_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  00029	6a 04		 push	 4
  0002b	68 00 00 00 00	 push	 OFFSET ?viper_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; viper_dtv
  00030	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_dt:

; 2782 : 		}
; 2783 : 	}
; 2784 : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?draw_3d_dtv_mfd@@YGXH@Z ENDP				; draw_3d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_2d_flir_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_flir_mfd@@YGXH@Z PROC				; draw_2d_flir_mfd, COMDAT

; 2757 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2758 : 	draw_2d_eo_display (&viper_flir, TARGET_ACQUISITION_SYSTEM_FLIR, viper_damage.flir, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00013	83 e1 01	 and	 ecx, 1
  00016	51		 push	 ecx
  00017	6a 03		 push	 3
  00019	68 00 00 00 00	 push	 OFFSET ?viper_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; viper_flir
  0001e	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 2759 : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?draw_2d_flir_mfd@@YGXH@Z ENDP				; draw_2d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_3d_flir_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_flir_mfd@@YGXH@Z PROC				; draw_3d_flir_mfd, COMDAT

; 2738 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2739 : 	if (!viper_damage.flir)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0000e	83 e0 01	 and	 eax, 1
  00011	75 20		 jne	 SHORT $LN1@draw_3d_fl

; 2740 : 	{
; 2741 : 		if (full_screen)

  00013	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  00017	74 0e		 je	 SHORT $LN3@draw_3d_fl

; 2742 : 		{
; 2743 : 			draw_full_screen_3d_eo_display (&viper_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00019	6a 03		 push	 3
  0001b	68 00 00 00 00	 push	 OFFSET ?viper_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; viper_flir
  00020	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 2744 : 		}
; 2745 : 		else

  00025	eb 0c		 jmp	 SHORT $LN1@draw_3d_fl
$LN3@draw_3d_fl:

; 2746 : 		{
; 2747 : 			draw_3d_eo_display (&viper_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00027	6a 03		 push	 3
  00029	68 00 00 00 00	 push	 OFFSET ?viper_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; viper_flir
  0002e	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_fl:

; 2748 : 		}
; 2749 : 	}
; 2750 : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?draw_3d_flir_mfd@@YGXH@Z ENDP				; draw_3d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z
_TEXT	SEGMENT
tv474 = -432						; size = 4
tv467 = -428						; size = 4
tv908 = -424						; size = 8
tv456 = -424						; size = 4
tv268 = -424						; size = 4
tv249 = -424						; size = 4
tv158 = -424						; size = 4
tv137 = -424						; size = 4
tv85 = -424						; size = 4
tv1189 = -420						; size = 4
tv1182 = -420						; size = 4
tv1138 = -420						; size = 4
tv985 = -420						; size = 4
tv449 = -420						; size = 4
tv261 = -420						; size = 4
tv241 = -420						; size = 4
tv176 = -420						; size = 4
tv150 = -420						; size = 4
tv129 = -420						; size = 4
tv77 = -420						; size = 4
tv537 = -417						; size = 1
$T1 = -416						; size = 4
$T2 = -412						; size = 4
_target_velocity$3 = -344				; size = 4
_range_char$4 = -337					; size = 1
_x_adjust$5 = -336					; size = 4
_tracking_point$6 = -332				; size = 4
_altitude$7 = -328					; size = 4
_speed$8 = -324						; size = 4
_level$9 = -320						; size = 4
_range_finder$ = -316					; size = 4
_visibility$ = -312					; size = 4
_tmp$ = -308						; size = 48
_target_point$ = -260					; size = 12
_target_position$ = -248				; size = 4
_source_position$ = -244				; size = 4
_target$ = -240						; size = 4
_source$ = -236						; size = 4
_y$ = -232						; size = 4
_x$ = -228						; size = 4
_j$ = -224						; size = 4
_i$ = -220						; size = 4
_y_adjust$ = -216					; size = 4
_target_range$ = -212					; size = 4
_width$ = -208						; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_damaged$ = 16						; size = 4
_valid_3d$ = 20						; size = 4
?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z PROC ; draw_2d_eo_display, COMDAT

; 2266 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 01 00
	00		 sub	 esp, 432		; 000001b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2267 : 	const char
; 2268 : 		*s;
; 2269 : 	char
; 2270 : 		buffer[200];
; 2271 : 
; 2272 : 	float
; 2273 : 		width,
; 2274 : 		target_range = get_range_to_target(),

  0000c	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  00011	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _target_range$[ebp]

; 2275 : 		y_adjust,
; 2276 : 		i,
; 2277 : 		j,
; 2278 : 		x,
; 2279 : 		y;
; 2280 : 
; 2281 : 	entity
; 2282 : 		*source,
; 2283 : 		*target;
; 2284 : 
; 2285 : 	vec3d
; 2286 : 		*source_position,
; 2287 : 		*target_position,
; 2288 : 		target_point;
; 2289 : 
; 2290 : 	viewpoint
; 2291 : 		tmp;
; 2292 : 
; 2293 : 	object_3d_visibility
; 2294 : 		visibility;
; 2295 : 
; 2296 : 	rangefinding_system
; 2297 : 		range_finder = get_range_finder();

  00017	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  0001c	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _range_finder$[ebp], eax

; 2298 : 
; 2299 : 	ASSERT (eo);

  00022	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00026	75 18		 jne	 SHORT $LN4@draw_2d_eo
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0002d	83 c0 21	 add	 eax, 33			; 00000021H
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  0003b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_2d_eo:

; 2300 : 
; 2301 : 	source = get_gunship_entity ();

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00045	89 85 14 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 2302 : 
; 2303 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  0004b	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00052	74 10		 je	 SHORT $LN53@draw_2d_eo
  00054	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  00062	eb 24		 jmp	 SHORT $LN54@draw_2d_eo
$LN53@draw_2d_eo:
  00064	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0006a	83 c2 25	 add	 edx, 37			; 00000025H
  0006d	52		 push	 edx
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007e	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN54@draw_2d_eo:
  00088	b9 01 00 00 00	 mov	 ecx, 1
  0008d	85 c9		 test	 ecx, ecx
  0008f	74 0c		 je	 SHORT $LN55@draw_2d_eo
  00091	c7 85 58 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv85[ebp], 8
  0009b	eb 24		 jmp	 SHORT $LN56@draw_2d_eo
$LN55@draw_2d_eo:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  000a3	83 c2 25	 add	 edx, 37			; 00000025H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN56@draw_2d_eo:
  000c1	6a 08		 push	 8
  000c3	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  000c9	51		 push	 ecx
  000ca	6b 95 5c fe ff
	ff 60		 imul	 edx, DWORD PTR tv77[ebp], 96
  000d1	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  000d7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000de	ff d1		 call	 ecx
  000e0	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 2304 : 
; 2305 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  000e6	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000ed	74 10		 je	 SHORT $LN57@draw_2d_eo
  000ef	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv129[ebp], ecx
  000fd	eb 24		 jmp	 SHORT $LN58@draw_2d_eo
$LN57@draw_2d_eo:
  000ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00105	83 c2 27	 add	 edx, 39			; 00000027H
  00108	52		 push	 edx
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00119	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN58@draw_2d_eo:
  00123	b9 01 00 00 00	 mov	 ecx, 1
  00128	85 c9		 test	 ecx, ecx
  0012a	74 0c		 je	 SHORT $LN59@draw_2d_eo
  0012c	c7 85 58 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv137[ebp], 38 ; 00000026H
  00136	eb 24		 jmp	 SHORT $LN60@draw_2d_eo
$LN59@draw_2d_eo:
  00138	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0013e	83 c2 27	 add	 edx, 39			; 00000027H
  00141	52		 push	 edx
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00152	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN60@draw_2d_eo:
  0015c	6a 26		 push	 38			; 00000026H
  0015e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00164	51		 push	 ecx
  00165	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv129[ebp], 180
  0016f	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00175	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0017c	ff d1		 call	 ecx
  0017e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 2306 : 
; 2307 : 	if (target)

  00184	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  0018b	0f 84 9d 00 00
	00		 je	 $LN5@draw_2d_eo

; 2308 : 		target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00191	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00198	74 10		 je	 SHORT $LN61@draw_2d_eo
  0019a	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  001a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a2	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  001a8	eb 24		 jmp	 SHORT $LN62@draw_2d_eo
$LN61@draw_2d_eo:
  001aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  001b0	83 c2 2a	 add	 edx, 42			; 0000002aH
  001b3	52		 push	 edx
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c4	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN62@draw_2d_eo:
  001ce	b9 01 00 00 00	 mov	 ecx, 1
  001d3	85 c9		 test	 ecx, ecx
  001d5	74 0c		 je	 SHORT $LN63@draw_2d_eo
  001d7	c7 85 58 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv158[ebp], 8
  001e1	eb 24		 jmp	 SHORT $LN64@draw_2d_eo
$LN63@draw_2d_eo:
  001e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  001e9	83 c2 2a	 add	 edx, 42			; 0000002aH
  001ec	52		 push	 edx
  001ed	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001fd	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN64@draw_2d_eo:
  00207	6a 08		 push	 8
  00209	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  0020f	51		 push	 ecx
  00210	6b 95 5c fe ff
	ff 60		 imul	 edx, DWORD PTR tv150[ebp], 96
  00217	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  0021d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00224	ff d1		 call	 ecx
  00226	89 85 08 ff ff
	ff		 mov	 DWORD PTR _target_position$[ebp], eax

; 2309 : 	else

  0022c	eb 0b		 jmp	 SHORT $LN6@draw_2d_eo
$LN5@draw_2d_eo:

; 2310 : 		target_position = get_eo_tracking_point();

  0022e	e8 00 00 00 00	 call	 ?get_eo_tracking_point@@YGPAUVEC3D@@XZ ; get_eo_tracking_point
  00233	89 85 08 ff ff
	ff		 mov	 DWORD PTR _target_position$[ebp], eax
$LN6@draw_2d_eo:

; 2311 : 
; 2312 : 	////////////////////////////////////////
; 2313 : 	//
; 2314 : 	// text
; 2315 : 	//
; 2316 : 	////////////////////////////////////////
; 2317 : 
; 2318 : 	set_mono_font_colour (MFD_COLOUR1);

  00239	b8 04 00 00 00	 mov	 eax, 4
  0023e	6b c8 00	 imul	 ecx, eax, 0
  00241	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00247	52		 push	 edx
  00248	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2319 : 
; 2320 : 	if (draw_large_mfd)

  0024d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00254	74 09		 je	 SHORT $LN7@draw_2d_eo

; 2321 : 	{
; 2322 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00256	6a 05		 push	 5
  00258	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2323 : 	}
; 2324 : 	else

  0025d	eb 07		 jmp	 SHORT $LN8@draw_2d_eo
$LN7@draw_2d_eo:

; 2325 : 	{
; 2326 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0025f	6a 01		 push	 1
  00261	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN8@draw_2d_eo:

; 2327 : 	}
; 2328 : 
; 2329 : 	//
; 2330 : 	// sensor type
; 2331 : 	//
; 2332 : 
; 2333 : 	if (draw_large_mfd)

  00266	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0026d	74 12		 je	 SHORT $LN9@draw_2d_eo

; 2334 : 	{
; 2335 : 		y_adjust = 5.0;

  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00277	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2336 : 	}
; 2337 : 	else

  0027f	eb 10		 jmp	 SHORT $LN10@draw_2d_eo
$LN9@draw_2d_eo:

; 2338 : 	{
; 2339 : 		y_adjust = 2.0;

  00281	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00289	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN10@draw_2d_eo:

; 2340 : 	}
; 2341 : 
; 2342 : 	set_2d_mono_font_position (-1.0, 1.0);

  00291	51		 push	 ecx
  00292	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	51		 push	 ecx
  002a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2343 : 
; 2344 : 	set_mono_font_rel_position (1.0, y_adjust);

  002b2	51		 push	 ecx
  002b3	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c0	51		 push	 ecx
  002c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ce	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2345 : 
; 2346 : 	switch (system)

  002d3	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  002d6	89 85 5c fe ff
	ff		 mov	 DWORD PTR tv176[ebp], eax
  002dc	83 bd 5c fe ff
	ff 03		 cmp	 DWORD PTR tv176[ebp], 3
  002e3	74 0b		 je	 SHORT $LN11@draw_2d_eo
  002e5	83 bd 5c fe ff
	ff 04		 cmp	 DWORD PTR tv176[ebp], 4
  002ec	74 0e		 je	 SHORT $LN12@draw_2d_eo
  002ee	eb 18		 jmp	 SHORT $LN13@draw_2d_eo
$LN11@draw_2d_eo:

; 2347 : 	{
; 2348 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2349 : 		{
; 2350 : 			print_mono_font_string ("FLIR");

  002f0	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  002f5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2351 : 
; 2352 : 			break;

  002fa	eb 16		 jmp	 SHORT $LN2@draw_2d_eo
$LN12@draw_2d_eo:

; 2353 : 		}
; 2354 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 2355 : 		{
; 2356 : 			print_mono_font_string ("DTV");

  002fc	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  00301	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2357 : 
; 2358 : 			break;

  00306	eb 0a		 jmp	 SHORT $LN2@draw_2d_eo
$LN13@draw_2d_eo:

; 2359 : 		}
; 2360 : 		default:
; 2361 : 		{
; 2362 : 			print_mono_font_string ("XXX");

  00308	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  0030d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@draw_2d_eo:

; 2363 : 
; 2364 : 			break;
; 2365 : 		}
; 2366 : 	}
; 2367 : 
; 2368 : 	//
; 2369 : 	// damaged
; 2370 : 	//
; 2371 : 
; 2372 : 	if (damaged)

  00312	83 7d 10 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00316	0f 84 9d 00 00
	00		 je	 $LN14@draw_2d_eo

; 2373 : 	{
; 2374 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  0031c	b8 04 00 00 00	 mov	 eax, 4
  00321	6b c8 00	 imul	 ecx, eax, 0
  00324	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0032a	52		 push	 edx
  0032b	51		 push	 ecx
  0032c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00334	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00339	51		 push	 ecx
  0033a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00342	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00347	51		 push	 ecx
  00348	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2375 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	6b c8 00	 imul	 ecx, eax, 0
  00370	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00376	52		 push	 edx
  00377	51		 push	 ecx
  00378	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	51		 push	 ecx
  00386	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	51		 push	 ecx
  00394	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0039c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a1	51		 push	 ecx
  003a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2376 : 
; 2377 : 		return;

  003b4	e9 e7 12 00 00	 jmp	 $LN1@draw_2d_eo
$LN14@draw_2d_eo:

; 2378 : 	}
; 2379 : 
; 2380 : 	if (eo_low_light)

  003b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_low_light@@3HA, 0 ; eo_low_light
  003c0	0f 84 8c 00 00
	00		 je	 $LN19@draw_2d_eo

; 2381 : 	{
; 2382 : 		if (draw_large_mfd)

  003c6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  003cd	74 12		 je	 SHORT $LN16@draw_2d_eo

; 2383 : 		{
; 2384 : 			y_adjust = 18.0;

  003cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  003d7	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2385 : 		}
; 2386 : 		else

  003df	eb 10		 jmp	 SHORT $LN17@draw_2d_eo
$LN16@draw_2d_eo:

; 2387 : 		{
; 2388 : 			y_adjust = 9.0;

  003e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  003e9	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN17@draw_2d_eo:

; 2389 : 		}
; 2390 : 
; 2391 : 		set_2d_mono_font_position (-1.0, 1.0);

  003f1	51		 push	 ecx
  003f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ff	51		 push	 ecx
  00400	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2392 : 
; 2393 : 		set_mono_font_rel_position (1.0, y_adjust);

  00412	51		 push	 ecx
  00413	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0041b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00420	51		 push	 ecx
  00421	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00429	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2394 : 
; 2395 : 		if (draw_large_mfd)

  00433	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0043a	74 0c		 je	 SHORT $LN18@draw_2d_eo

; 2396 : 		{
; 2397 : 			print_mono_font_string ("LO LIGHT");

  0043c	68 00 00 00 00	 push	 OFFSET ??_C@_08JFLECGBM@LO?5LIGHT@
  00441	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2398 : 		}
; 2399 : 		else

  00446	eb 0a		 jmp	 SHORT $LN19@draw_2d_eo
$LN18@draw_2d_eo:

; 2400 : 		{
; 2401 : 			print_mono_font_string ("LO");

  00448	68 00 00 00 00	 push	 OFFSET ??_C@_02ONPABID@LO@
  0044d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN19@draw_2d_eo:

; 2402 : 		}
; 2403 : 	}
; 2404 : 
; 2405 : 	//
; 2406 : 	// field of view
; 2407 : 	//
; 2408 : 
; 2409 : #ifdef OLD_EO
; 2410 : 	switch (eo->field_of_view)
; 2411 : 	{
; 2412 : 		case EO_FOV_NARROW:
; 2413 : 		{
; 2414 : 			if (draw_large_mfd)
; 2415 : 			{
; 2416 : 				s = "NARROW";
; 2417 : 			}
; 2418 : 			else
; 2419 : 			{
; 2420 : 				s = "NAR";
; 2421 : 			}
; 2422 : 
; 2423 : 			break;
; 2424 : 		}
; 2425 : 		case EO_FOV_MEDIUM:
; 2426 : 		{
; 2427 : 			if (draw_large_mfd)
; 2428 : 			{
; 2429 : 				s = "MEDIUM";
; 2430 : 			}
; 2431 : 			else
; 2432 : 			{
; 2433 : 				s = "MED";
; 2434 : 			}
; 2435 : 
; 2436 : 			break;
; 2437 : 		}
; 2438 : 		case EO_FOV_WIDE:
; 2439 : 		{
; 2440 : 			s = "WIDE";
; 2441 : 
; 2442 : 			break;
; 2443 : 		}
; 2444 : 		default:
; 2445 : 		{
; 2446 : 			s = "XXX";
; 2447 : 
; 2448 : 			break;
; 2449 : 		}
; 2450 : 	}
; 2451 : #else
; 2452 : 	{
; 2453 : 		float level = 1.0 / convert_linear_view_value (eo);

  00452	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  0045b	dd 9d 58 fe ff
	ff		 fstp	 QWORD PTR tv908[ebp]
  00461	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00469	f2 0f 5e 85 58
	fe ff ff	 divsd	 xmm0, QWORD PTR tv908[ebp]
  00471	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00475	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _level$9[ebp], xmm0

; 2454 : 
; 2455 : 		if (level < 10)

  0047d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00485	0f 2f 85 c0 fe
	ff ff		 comiss	 xmm0, DWORD PTR _level$9[ebp]
  0048c	76 26		 jbe	 SHORT $LN20@draw_2d_eo

; 2456 : 		{
; 2457 : 			sprintf (buffer, "%.1f", level);

  0048e	f3 0f 5a 85 c0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _level$9[ebp]
  00496	83 ec 08	 sub	 esp, 8
  00499	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0049e	68 00 00 00 00	 push	 OFFSET ??_C@_04GGBPDDBN@?$CF?41f@
  004a3	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  004a9	50		 push	 eax
  004aa	e8 00 00 00 00	 call	 _sprintf
  004af	83 c4 10	 add	 esp, 16			; 00000010H

; 2458 : 		}
; 2459 : 		else

  004b2	eb 1d		 jmp	 SHORT $LN21@draw_2d_eo
$LN20@draw_2d_eo:

; 2460 : 		{
; 2461 : 			sprintf (buffer, "%d", (int)level);

  004b4	f3 0f 2c 85 c0
	fe ff ff	 cvttss2si eax, DWORD PTR _level$9[ebp]
  004bc	50		 push	 eax
  004bd	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  004c2	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  004c8	51		 push	 ecx
  004c9	e8 00 00 00 00	 call	 _sprintf
  004ce	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@draw_2d_eo:

; 2462 : 		}
; 2463 : 
; 2464 : 		s = buffer;

  004d1	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  004d7	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 2465 : 	}
; 2466 : #endif
; 2467 : 
; 2468 : 	width = get_mono_font_string_width (s);

  004da	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004dd	50		 push	 eax
  004de	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004e3	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2469 : 
; 2470 : 	if (draw_large_mfd)

  004e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004f0	74 2e		 je	 SHORT $LN22@draw_2d_eo

; 2471 : 	{
; 2472 : 		width += 2.0;

  004f2	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  004fa	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00502	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00506	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2473 : 
; 2474 : 		y_adjust = 5.0;

  0050e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00516	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2475 : 	}
; 2476 : 	else

  0051e	eb 2c		 jmp	 SHORT $LN23@draw_2d_eo
$LN22@draw_2d_eo:

; 2477 : 	{
; 2478 : 		width += 1.0;

  00520	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  00528	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00530	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00534	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2479 : 
; 2480 : 		y_adjust = 2.0;

  0053c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00544	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN23@draw_2d_eo:

; 2481 : 	}
; 2482 : 
; 2483 : 	set_2d_mono_font_position (1.0, 1.0);

  0054c	51		 push	 ecx
  0054d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00555	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055a	51		 push	 ecx
  0055b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00563	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00568	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2484 : 
; 2485 : 	set_mono_font_rel_position (-width, y_adjust);

  0056d	51		 push	 ecx
  0056e	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057b	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00583	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0058a	51		 push	 ecx
  0058b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00590	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2486 : 
; 2487 : 	print_mono_font_string (s);

  00595	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00598	50		 push	 eax
  00599	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2488 : 
; 2489 : 
; 2490 : // Jabberwock 031107 Designated targets
; 2491 : 
; 2492 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  0059e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  005a5	74 0f		 je	 SHORT $LN65@draw_2d_eo
  005a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  005ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  005ae	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv241[ebp], ecx
  005b4	eb 27		 jmp	 SHORT $LN66@draw_2d_eo
$LN65@draw_2d_eo:
  005b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  005bc	81 c2 e2 00 00
	00		 add	 edx, 226		; 000000e2H
  005c2	52		 push	 edx
  005c3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  005c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005cd	50		 push	 eax
  005ce	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005d3	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv241[ebp], 0
$LN66@draw_2d_eo:
  005dd	b9 01 00 00 00	 mov	 ecx, 1
  005e2	85 c9		 test	 ecx, ecx
  005e4	74 0c		 je	 SHORT $LN67@draw_2d_eo
  005e6	c7 85 58 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv249[ebp], 38 ; 00000026H
  005f0	eb 27		 jmp	 SHORT $LN68@draw_2d_eo
$LN67@draw_2d_eo:
  005f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  005f8	81 c2 e2 00 00
	00		 add	 edx, 226		; 000000e2H
  005fe	52		 push	 edx
  005ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00604	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00609	50		 push	 eax
  0060a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0060f	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv249[ebp], 0
$LN68@draw_2d_eo:
  00619	6a 26		 push	 38			; 00000026H
  0061b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00621	51		 push	 ecx
  00622	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv241[ebp], 180
  0062c	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv249[ebp]
  00632	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00639	ff d1		 call	 ecx
  0063b	89 85 10 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 2493 : 
; 2494 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  00641	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00648	0f 84 36 01 00
	00		 je	 $LN24@draw_2d_eo
  0064e	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00655	74 10		 je	 SHORT $LN69@draw_2d_eo
  00657	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  0065d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0065f	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv261[ebp], ecx
  00665	eb 20		 jmp	 SHORT $LN70@draw_2d_eo
$LN69@draw_2d_eo:
  00667	68 be 09 00 00	 push	 2494			; 000009beH
  0066c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00671	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00677	52		 push	 edx
  00678	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0067d	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv261[ebp], 0
$LN70@draw_2d_eo:
  00687	b8 01 00 00 00	 mov	 eax, 1
  0068c	85 c0		 test	 eax, eax
  0068e	74 0c		 je	 SHORT $LN71@draw_2d_eo
  00690	c7 85 58 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv268[ebp], 10 ; 0000000aH
  0069a	eb 20		 jmp	 SHORT $LN72@draw_2d_eo
$LN71@draw_2d_eo:
  0069c	68 be 09 00 00	 push	 2494			; 000009beH
  006a1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  006ac	51		 push	 ecx
  006ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006b2	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv268[ebp], 0
$LN72@draw_2d_eo:
  006bc	6a 0a		 push	 10			; 0000000aH
  006be	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  006c4	52		 push	 edx
  006c5	69 85 5c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv261[ebp], 180
  006cf	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv268[ebp]
  006d5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  006dc	ff d2		 call	 edx
  006de	85 c0		 test	 eax, eax
  006e0	0f 84 9e 00 00
	00		 je	 $LN24@draw_2d_eo

; 2495 : 	{
; 2496 : 		if (draw_large_mfd)

  006e6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  006ed	74 12		 je	 SHORT $LN25@draw_2d_eo

; 2497 : 		{
; 2498 : 			y_adjust = -25.0;

  006ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  006f7	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2499 : 		}
; 2500 : 		else

  006ff	eb 10		 jmp	 SHORT $LN26@draw_2d_eo
$LN25@draw_2d_eo:

; 2501 : 		{
; 2502 : 			y_adjust = -12.0;

  00701	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00709	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN26@draw_2d_eo:

; 2503 : 		}
; 2504 : 
; 2505 : 		width = get_mono_font_string_width ("MARKED");

  00711	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00716	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0071b	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2506 : 
; 2507 : 		set_2d_mono_font_position (1.0, -1.0);

  00721	51		 push	 ecx
  00722	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0072a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072f	51		 push	 ecx
  00730	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00738	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2508 : 
; 2509 : 		set_mono_font_rel_position (-width-1.0, y_adjust);

  00742	51		 push	 ecx
  00743	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0074b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00750	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00758	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0075f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00763	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0076b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0076f	51		 push	 ecx
  00770	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00775	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2510 : 
; 2511 : 		print_mono_font_string ("MARKED");

  0077a	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  0077f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN24@draw_2d_eo:

; 2512 : 	}
; 2513 : // Jabberwock 031107 ends
; 2514 : 
; 2515 : 	//
; 2516 : 	// 030418 loke
; 2517 : 	// draw an indication if ground stablisation is enabled
; 2518 : 	//
; 2519 : 
; 2520 : 	if (eo_ground_stabilised)

  00784	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised
  0078b	0f 84 8e 00 00
	00		 je	 $LN27@draw_2d_eo

; 2521 : 	{
; 2522 : 		if (draw_large_mfd) // Jabberwock 031107 Designated targets - moved the stab indicator one line up, sorry!

  00791	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00798	74 12		 je	 SHORT $LN28@draw_2d_eo

; 2523 : 		{
; 2524 : 			y_adjust = -38.0;

  0079a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  007a2	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2525 : 		}
; 2526 : 		else

  007aa	eb 10		 jmp	 SHORT $LN29@draw_2d_eo
$LN28@draw_2d_eo:

; 2527 : 		{
; 2528 : 			y_adjust = -19.0;

  007ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  007b4	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN29@draw_2d_eo:

; 2529 : 		}
; 2530 : 
; 2531 : 		width = get_mono_font_string_width ("S");

  007bc	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  007c1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  007c6	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2532 : 
; 2533 : 		set_2d_mono_font_position (1.0, -1.0);

  007cc	51		 push	 ecx
  007cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007da	51		 push	 ecx
  007db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2534 : 
; 2535 : 		set_mono_font_rel_position (-width, y_adjust);

  007ed	51		 push	 ecx
  007ee	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  007f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fb	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00803	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0080a	51		 push	 ecx
  0080b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00810	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2536 : 
; 2537 : 		print_mono_font_string ("S");

  00815	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  0081a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN27@draw_2d_eo:

; 2538 : 	}
; 2539 : 
; 2540 : 	////////////////////////////////////////
; 2541 : 	//
; 2542 : 	// draw heading scale
; 2543 : 	//
; 2544 : 	////////////////////////////////////////
; 2545 : 
; 2546 : 	draw_heading_scale (get_heading_from_attitude_matrix (eo_vp.attitude), FALSE);

  0081f	6a 00		 push	 0
  00821	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00826	d1 e0		 shl	 eax, 1
  00828	b9 04 00 00 00	 mov	 ecx, 4
  0082d	d1 e1		 shl	 ecx, 1
  0082f	51		 push	 ecx
  00830	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  00839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00843	d1 e2		 shl	 edx, 1
  00845	b8 04 00 00 00	 mov	 eax, 4
  0084a	6b c8 00	 imul	 ecx, eax, 0
  0084d	51		 push	 ecx
  0084e	f3 0f 10 84 0a
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[edx+ecx+12]
  00857	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085c	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00861	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv985[ebp]
  00867	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv985[ebp]
  0086f	51		 push	 ecx
  00870	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00875	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXMH@Z ; draw_heading_scale

; 2547 : 
; 2548 : 	// draw speed and altitude
; 2549 : 
; 2550 : 	{
; 2551 : 		float
; 2552 : 			speed = knots(current_flight_dynamics->velocity_z.value),

  0087a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0087f	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  00887	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  0088f	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _speed$8[ebp], xmm0

; 2553 : 			altitude = min(feet(current_flight_dynamics->radar_altitude.value), 500.0f);

  00897	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  0089f	f3 0f 11 85 64
	fe ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  008a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  008ac	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  008b4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  008bc	f3 0f 11 85 60
	fe ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  008c4	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  008ca	51		 push	 ecx
  008cb	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  008d1	52		 push	 edx
  008d2	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  008d7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  008db	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _altitude$7[ebp], xmm0

; 2554 : 
; 2555 : 		y_adjust = 0.0;

  008e3	0f 57 c0	 xorps	 xmm0, xmm0
  008e6	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2556 : 
; 2557 : 		sprintf(buffer, "%3d FT", (int)altitude);

  008ee	f3 0f 2c 85 b8
	fe ff ff	 cvttss2si eax, DWORD PTR _altitude$7[ebp]
  008f6	50		 push	 eax
  008f7	68 00 00 00 00	 push	 OFFSET ??_C@_06BLLIFECI@?$CF3d?5FT@
  008fc	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00902	51		 push	 ecx
  00903	e8 00 00 00 00	 call	 _sprintf
  00908	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2558 : 
; 2559 : 		set_2d_mono_font_position (-0.4, -0.7);

  0090b	51		 push	 ecx
  0090c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00914	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00919	51		 push	 ecx
  0091a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00922	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00927	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2560 : 		set_mono_font_rel_position (0.0, y_adjust);

  0092c	51		 push	 ecx
  0092d	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00935	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093a	51		 push	 ecx
  0093b	0f 57 c0	 xorps	 xmm0, xmm0
  0093e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00943	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2561 : 		print_mono_font_string (buffer);

  00948	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0094e	50		 push	 eax
  0094f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2562 : 
; 2563 : 
; 2564 : 		sprintf(buffer, "%3d KTS", (int)speed);

  00954	f3 0f 2c 85 bc
	fe ff ff	 cvttss2si eax, DWORD PTR _speed$8[ebp]
  0095c	50		 push	 eax
  0095d	68 00 00 00 00	 push	 OFFSET ??_C@_07FGFCMGOE@?$CF3d?5KTS@
  00962	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00968	51		 push	 ecx
  00969	e8 00 00 00 00	 call	 _sprintf
  0096e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2565 : 		width = get_mono_font_string_width (buffer);

  00971	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00977	50		 push	 eax
  00978	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0097d	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2566 : 
; 2567 : 		set_2d_mono_font_position (0.4, -0.7);

  00983	51		 push	 ecx
  00984	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0098c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00991	51		 push	 ecx
  00992	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0099a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2568 : 		set_mono_font_rel_position (-width, y_adjust);

  009a4	51		 push	 ecx
  009a5	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  009ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b2	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  009ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  009c1	51		 push	 ecx
  009c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2569 : 		print_mono_font_string (buffer);

  009cc	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  009d2	50		 push	 eax
  009d3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2570 : 	}
; 2571 : 
; 2572 : 	////////////////////////////////////////
; 2573 : 	//
; 2574 : 	// draw field of regard and view boxes
; 2575 : 	//
; 2576 : 	////////////////////////////////////////
; 2577 : 
; 2578 : 	draw_field_of_regard_and_view_boxes ();

  009d8	e8 00 00 00 00	 call	 ?draw_field_of_regard_and_view_boxes@@YGXXZ ; draw_field_of_regard_and_view_boxes

; 2579 : 
; 2580 : 	////////////////////////////////////////
; 2581 : 	//
; 2582 : 	// line graphics
; 2583 : 	//
; 2584 : 	////////////////////////////////////////
; 2585 : 
; 2586 : 	//
; 2587 : 	// datum
; 2588 : 	//
; 2589 : 
; 2590 : 	if (draw_large_mfd)

  009dd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  009e4	0f 84 0d 01 00
	00		 je	 $LN30@draw_2d_eo

; 2591 : 	{
; 2592 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);

  009ea	b8 04 00 00 00	 mov	 eax, 4
  009ef	6b c8 00	 imul	 ecx, eax, 0
  009f2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009f8	52		 push	 edx
  009f9	51		 push	 ecx
  009fa	0f 57 c0	 xorps	 xmm0, xmm0
  009fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a02	51		 push	 ecx
  00a03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00a0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a10	51		 push	 ecx
  00a11	0f 57 c0	 xorps	 xmm0, xmm0
  00a14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a19	51		 push	 ecx
  00a1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00a22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a27	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2593 : 
; 2594 : 		draw_2d_line (0.035, 0.0, 0.08, 0.0, MFD_COLOUR1);

  00a2c	b8 04 00 00 00	 mov	 eax, 4
  00a31	6b c8 00	 imul	 ecx, eax, 0
  00a34	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a3a	52		 push	 edx
  00a3b	51		 push	 ecx
  00a3c	0f 57 c0	 xorps	 xmm0, xmm0
  00a3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a44	51		 push	 ecx
  00a45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a52	51		 push	 ecx
  00a53	0f 57 c0	 xorps	 xmm0, xmm0
  00a56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5b	51		 push	 ecx
  00a5c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00a64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a69	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2595 : 
; 2596 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);

  00a6e	b8 04 00 00 00	 mov	 eax, 4
  00a73	6b c8 00	 imul	 ecx, eax, 0
  00a76	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a7c	52		 push	 edx
  00a7d	51		 push	 ecx
  00a7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00a86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8b	51		 push	 ecx
  00a8c	0f 57 c0	 xorps	 xmm0, xmm0
  00a8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a94	51		 push	 ecx
  00a95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00a9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa2	51		 push	 ecx
  00aa3	0f 57 c0	 xorps	 xmm0, xmm0
  00aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aab	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2597 : 
; 2598 : 		draw_2d_line (0.0, 0.035, 0.0, 0.08, MFD_COLOUR1);

  00ab0	b8 04 00 00 00	 mov	 eax, 4
  00ab5	6b c8 00	 imul	 ecx, eax, 0
  00ab8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00abe	52		 push	 edx
  00abf	51		 push	 ecx
  00ac0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00ac8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00acd	51		 push	 ecx
  00ace	0f 57 c0	 xorps	 xmm0, xmm0
  00ad1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad6	51		 push	 ecx
  00ad7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00adf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae4	51		 push	 ecx
  00ae5	0f 57 c0	 xorps	 xmm0, xmm0
  00ae8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aed	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2599 : 	}
; 2600 : 	else

  00af2	e9 08 01 00 00	 jmp	 $LN31@draw_2d_eo
$LN30@draw_2d_eo:

; 2601 : 	{
; 2602 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);

  00af7	b8 04 00 00 00	 mov	 eax, 4
  00afc	6b c8 00	 imul	 ecx, eax, 0
  00aff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b05	52		 push	 edx
  00b06	51		 push	 ecx
  00b07	0f 57 c0	 xorps	 xmm0, xmm0
  00b0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b0f	51		 push	 ecx
  00b10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00b18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1d	51		 push	 ecx
  00b1e	0f 57 c0	 xorps	 xmm0, xmm0
  00b21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b26	51		 push	 ecx
  00b27	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00b2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b34	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2603 : 
; 2604 : 		draw_2d_line (0.035, 0.0, 0.09, 0.0, MFD_COLOUR1);

  00b39	b8 04 00 00 00	 mov	 eax, 4
  00b3e	6b c8 00	 imul	 ecx, eax, 0
  00b41	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b47	52		 push	 edx
  00b48	51		 push	 ecx
  00b49	0f 57 c0	 xorps	 xmm0, xmm0
  00b4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b51	51		 push	 ecx
  00b52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00b5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b5f	51		 push	 ecx
  00b60	0f 57 c0	 xorps	 xmm0, xmm0
  00b63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b68	51		 push	 ecx
  00b69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00b71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b76	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2605 : 
; 2606 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);

  00b7b	b8 04 00 00 00	 mov	 eax, 4
  00b80	6b c8 00	 imul	 ecx, eax, 0
  00b83	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b89	52		 push	 edx
  00b8a	51		 push	 ecx
  00b8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00b93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b98	51		 push	 ecx
  00b99	0f 57 c0	 xorps	 xmm0, xmm0
  00b9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba1	51		 push	 ecx
  00ba2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00baa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00baf	51		 push	 ecx
  00bb0	0f 57 c0	 xorps	 xmm0, xmm0
  00bb3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2607 : 
; 2608 : 		draw_2d_line (0.0, 0.035, 0.0, 0.09, MFD_COLOUR1);

  00bbd	b8 04 00 00 00	 mov	 eax, 4
  00bc2	6b c8 00	 imul	 ecx, eax, 0
  00bc5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bcb	52		 push	 edx
  00bcc	51		 push	 ecx
  00bcd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00bd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bda	51		 push	 ecx
  00bdb	0f 57 c0	 xorps	 xmm0, xmm0
  00bde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be3	51		 push	 ecx
  00be4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00bec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf1	51		 push	 ecx
  00bf2	0f 57 c0	 xorps	 xmm0, xmm0
  00bf5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN31@draw_2d_eo:

; 2609 : 	}
; 2610 : 
; 2611 : 	//
; 2612 : 	// target gates
; 2613 : 	//
; 2614 : 
; 2615 : 	if (valid_3d)

  00bff	83 7d 14 00	 cmp	 DWORD PTR _valid_3d$[ebp], 0
  00c03	0f 84 97 0a 00
	00		 je	 $LN35@draw_2d_eo

; 2616 : 	{
; 2617 : 		vec3d* tracking_point = get_eo_tracking_point();

  00c09	e8 00 00 00 00	 call	 ?get_eo_tracking_point@@YGPAUVEC3D@@XZ ; get_eo_tracking_point
  00c0e	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _tracking_point$6[ebp], eax

; 2618 : 
; 2619 : 		if (target || tracking_point)

  00c14	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00c1b	75 0d		 jne	 SHORT $LN34@draw_2d_eo
  00c1d	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _tracking_point$6[ebp], 0
  00c24	0f 84 76 0a 00
	00		 je	 $LN35@draw_2d_eo
$LN34@draw_2d_eo:

; 2620 : 		{
; 2621 : 			if (!((!d3d_can_render_to_texture) && (!draw_large_mfd)))

  00c2a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00c31	75 0d		 jne	 SHORT $LN36@draw_2d_eo
  00c33	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00c3a	0f 84 60 0a 00
	00		 je	 $LN35@draw_2d_eo
$LN36@draw_2d_eo:

; 2622 : 			{
; 2623 : 				if (target)

  00c40	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00c47	74 15		 je	 SHORT $LN37@draw_2d_eo

; 2624 : 					get_local_entity_target_point (target, &target_point);

  00c49	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _target_point$[ebp]
  00c4f	50		 push	 eax
  00c50	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  00c56	51		 push	 ecx
  00c57	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 2625 : 				else

  00c5c	eb 20		 jmp	 SHORT $LN38@draw_2d_eo
$LN37@draw_2d_eo:

; 2626 : 					target_point = *tracking_point;

  00c5e	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _tracking_point$6[ebp]
  00c64	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c66	89 8d fc fe ff
	ff		 mov	 DWORD PTR _target_point$[ebp], ecx
  00c6c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00c6f	89 95 00 ff ff
	ff		 mov	 DWORD PTR _target_point$[ebp+4], edx
  00c75	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00c78	89 85 04 ff ff
	ff		 mov	 DWORD PTR _target_point$[ebp+8], eax
$LN38@draw_2d_eo:

; 2627 : 
; 2628 : 				tmp = main_vp;

  00c7e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00c83	be 00 00 00 00	 mov	 esi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  00c88	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR _tmp$[ebp]
  00c8e	f3 a5		 rep movsd

; 2629 : 
; 2630 : 				main_vp = eo_vp;

  00c90	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00c95	be 00 00 00 00	 mov	 esi, OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  00c9a	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  00c9f	f3 a5		 rep movsd

; 2631 : 
; 2632 : 				visibility = get_position_3d_screen_coordinates (&target_point, &i, &j);

  00ca1	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  00ca7	50		 push	 eax
  00ca8	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  00cae	51		 push	 ecx
  00caf	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _target_point$[ebp]
  00cb5	52		 push	 edx
  00cb6	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  00cbb	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _visibility$[ebp], eax

; 2633 : 
; 2634 : 				if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  00cc1	83 bd c8 fe ff
	ff 01		 cmp	 DWORD PTR _visibility$[ebp], 1
  00cc8	74 0d		 je	 SHORT $LN40@draw_2d_eo
  00cca	83 bd c8 fe ff
	ff 02		 cmp	 DWORD PTR _visibility$[ebp], 2
  00cd1	0f 85 b7 09 00
	00		 jne	 $LN51@draw_2d_eo
$LN40@draw_2d_eo:

; 2635 : 				{
; 2636 : 					float x_adjust;
; 2637 : 					transform_mfd_screen_co_ords_to_mfd_texture_co_ords (&i, &j);

  00cd7	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  00cdd	50		 push	 eax
  00cde	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  00ce4	51		 push	 ecx
  00ce5	e8 00 00 00 00	 call	 ?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords

; 2638 : 
; 2639 : 					get_2d_world_position (i, j, &x, &y);

  00cea	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _y$[ebp]
  00cf0	50		 push	 eax
  00cf1	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _x$[ebp]
  00cf7	51		 push	 ecx
  00cf8	51		 push	 ecx
  00cf9	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  00d01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d06	51		 push	 ecx
  00d07	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  00d0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d14	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 2640 : 
; 2641 : 
; 2642 : 					//
; 2643 : 					// target name
; 2644 : 					//
; 2645 : 
; 2646 : 					if (target)

  00d19	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00d20	0f 84 56 02 00
	00		 je	 $LN42@draw_2d_eo

; 2647 : 					{
; 2648 : 						s = get_target_display_name (target, buffer, FALSE);

  00d26	6a 00		 push	 0
  00d28	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00d2e	50		 push	 eax
  00d2f	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  00d35	51		 push	 ecx
  00d36	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  00d3b	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 2649 : 
; 2650 : 						if (s)

  00d3e	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00d42	0f 84 34 02 00
	00		 je	 $LN42@draw_2d_eo

; 2651 : 						{
; 2652 : 							y_adjust = -12.0;

  00d48	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00d50	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2653 : 							x_adjust = -get_mono_font_string_width (s) / 2.0;

  00d58	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00d5b	50		 push	 eax
  00d5c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d61	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv1138[ebp]
  00d67	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv1138[ebp]
  00d6f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d76	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00d7a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  00d82	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d86	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _x_adjust$5[ebp], xmm0

; 2654 : 
; 2655 : 							if (strcmp(s, "LOW LIGHT") == 0
; 2656 : 								|| strcmp(s, "CP/G ID...") == 0)

  00d8e	68 00 00 00 00	 push	 OFFSET ??_C@_09ICGCKLLB@LOW?5LIGHT@
  00d93	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00d96	50		 push	 eax
  00d97	e8 00 00 00 00	 call	 _strcmp
  00d9c	83 c4 08	 add	 esp, 8
  00d9f	85 c0		 test	 eax, eax
  00da1	74 15		 je	 SHORT $LN45@draw_2d_eo
  00da3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@
  00da8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00dab	50		 push	 eax
  00dac	e8 00 00 00 00	 call	 _strcmp
  00db1	83 c4 08	 add	 esp, 8
  00db4	85 c0		 test	 eax, eax
  00db6	75 19		 jne	 SHORT $LN43@draw_2d_eo
$LN45@draw_2d_eo:

; 2657 : 							{
; 2658 : 								set_mono_font_colour (MFD_COLOUR_YELLOW);

  00db8	b8 04 00 00 00	 mov	 eax, 4
  00dbd	6b c8 0d	 imul	 ecx, eax, 13
  00dc0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00dc6	52		 push	 edx
  00dc7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
  00dcc	e9 54 01 00 00	 jmp	 $LN47@draw_2d_eo
$LN43@draw_2d_eo:

; 2659 : 							}
; 2660 : 							else if (get_local_entity_int_value(get_gunship_entity(), INT_TYPE_SIDE) !=

  00dd1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00dd8	74 0f		 je	 SHORT $LN73@draw_2d_eo
  00dda	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00ddf	8b 08		 mov	 ecx, DWORD PTR [eax]
  00de1	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv449[ebp], ecx
  00de7	eb 20		 jmp	 SHORT $LN74@draw_2d_eo
$LN73@draw_2d_eo:
  00de9	68 64 0a 00 00	 push	 2660			; 00000a64H
  00dee	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00df3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00df9	52		 push	 edx
  00dfa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dff	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv449[ebp], 0
$LN74@draw_2d_eo:
  00e09	b8 01 00 00 00	 mov	 eax, 1
  00e0e	85 c0		 test	 eax, eax
  00e10	74 0c		 je	 SHORT $LN75@draw_2d_eo
  00e12	c7 85 58 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv456[ebp], 187 ; 000000bbH
  00e1c	eb 20		 jmp	 SHORT $LN76@draw_2d_eo
$LN75@draw_2d_eo:
  00e1e	68 64 0a 00 00	 push	 2660			; 00000a64H
  00e23	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e28	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e2e	51		 push	 ecx
  00e2f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e34	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv456[ebp], 0
$LN76@draw_2d_eo:
  00e3e	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00e45	74 10		 je	 SHORT $LN77@draw_2d_eo
  00e47	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  00e4d	8b 02		 mov	 eax, DWORD PTR [edx]
  00e4f	89 85 54 fe ff
	ff		 mov	 DWORD PTR tv467[ebp], eax
  00e55	eb 20		 jmp	 SHORT $LN78@draw_2d_eo
$LN77@draw_2d_eo:
  00e57	68 65 0a 00 00	 push	 2661			; 00000a65H
  00e5c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e61	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e67	51		 push	 ecx
  00e68	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e6d	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv467[ebp], 0
$LN78@draw_2d_eo:
  00e77	ba 01 00 00 00	 mov	 edx, 1
  00e7c	85 d2		 test	 edx, edx
  00e7e	74 0c		 je	 SHORT $LN79@draw_2d_eo
  00e80	c7 85 50 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv474[ebp], 187 ; 000000bbH
  00e8a	eb 1f		 jmp	 SHORT $LN80@draw_2d_eo
$LN79@draw_2d_eo:
  00e8c	68 65 0a 00 00	 push	 2661			; 00000a65H
  00e91	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e96	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e9b	50		 push	 eax
  00e9c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ea1	c7 85 50 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv474[ebp], 0
$LN80@draw_2d_eo:
  00eab	68 bb 00 00 00	 push	 187			; 000000bbH
  00eb0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00eb6	51		 push	 ecx
  00eb7	69 95 5c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv449[ebp], 1116
  00ec1	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv456[ebp]
  00ec7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00ece	ff d1		 call	 ecx
  00ed0	8b f0		 mov	 esi, eax
  00ed2	68 bb 00 00 00	 push	 187			; 000000bbH
  00ed7	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  00edd	52		 push	 edx
  00ede	69 85 54 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv467[ebp], 1116
  00ee8	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR tv474[ebp]
  00eee	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00ef5	ff d2		 call	 edx
  00ef7	3b f0		 cmp	 esi, eax
  00ef9	74 16		 je	 SHORT $LN46@draw_2d_eo

; 2661 : 								get_local_entity_int_value(target, INT_TYPE_SIDE))
; 2662 : 							{
; 2663 : 								set_mono_font_colour (MFD_COLOUR_RED);

  00efb	b8 04 00 00 00	 mov	 eax, 4
  00f00	6b c8 0f	 imul	 ecx, eax, 15
  00f03	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f09	52		 push	 edx
  00f0a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2664 : 							}
; 2665 : 							else

  00f0f	eb 14		 jmp	 SHORT $LN47@draw_2d_eo
$LN46@draw_2d_eo:

; 2666 : 								set_mono_font_colour (MFD_COLOUR1);

  00f11	b8 04 00 00 00	 mov	 eax, 4
  00f16	6b c8 00	 imul	 ecx, eax, 0
  00f19	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f1f	52		 push	 edx
  00f20	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN47@draw_2d_eo:

; 2667 : 
; 2668 : 							set_2d_mono_font_position (x, y - 0.33);

  00f25	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00f2d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd51eb851eb851f
  00f35	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f39	51		 push	 ecx
  00f3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f3f	51		 push	 ecx
  00f40	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$[ebp]
  00f48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2669 : 							set_mono_font_rel_position (x_adjust, y_adjust);

  00f52	51		 push	 ecx
  00f53	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f60	51		 push	 ecx
  00f61	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_adjust$5[ebp]
  00f69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f6e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2670 : 
; 2671 : 							print_mono_font_string (s);

  00f73	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00f76	50		 push	 eax
  00f77	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN42@draw_2d_eo:

; 2672 : 						}
; 2673 : 					}
; 2674 : 
; 2675 : 					set_mono_font_colour (MFD_COLOUR1);

  00f7c	b8 04 00 00 00	 mov	 eax, 4
  00f81	6b c8 00	 imul	 ecx, eax, 0
  00f84	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f8a	52		 push	 edx
  00f8b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2676 : 
; 2677 : 					// target range, speed and bearing
; 2678 : 					{
; 2679 : 						char
; 2680 : 							range_char = 'R';

  00f90	c6 85 af fe ff
	ff 52		 mov	 BYTE PTR _range_char$4[ebp], 82 ; 00000052H

; 2681 : 
; 2682 : 						float
; 2683 : 							target_velocity = 0.0;

  00f97	0f 57 c0	 xorps	 xmm0, xmm0
  00f9a	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _target_velocity$3[ebp], xmm0

; 2684 : 
; 2685 : 						if (range_finder == RANGEFINDER_TRIANGULATION)

  00fa2	83 bd c4 fe ff
	ff 02		 cmp	 DWORD PTR _range_finder$[ebp], 2
  00fa9	75 09		 jne	 SHORT $LN48@draw_2d_eo

; 2686 : 							range_char = 'A';

  00fab	c6 85 af fe ff
	ff 41		 mov	 BYTE PTR _range_char$4[ebp], 65 ; 00000041H

; 2687 : 						else

  00fb2	eb 5a		 jmp	 SHORT $LN49@draw_2d_eo
$LN48@draw_2d_eo:

; 2688 : 						{
; 2689 : 							if (target)

  00fb4	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00fbb	74 2c		 je	 SHORT $LN50@draw_2d_eo

; 2690 : 								target_velocity = kilometres_per_hour(get_local_entity_vec3d_magnitude (target, VEC3D_TYPE_MOTION_VECTOR));

  00fbd	6a 06		 push	 6
  00fbf	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  00fc5	50		 push	 eax
  00fc6	e8 00 00 00 00	 call	 ?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z ; get_local_entity_vec3d_magnitude
  00fcb	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv1182[ebp]
  00fd1	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv1182[ebp]
  00fd9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  00fe1	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _target_velocity$3[ebp], xmm0
$LN50@draw_2d_eo:

; 2691 : 							range_char = (range_finder == RANGEFINDER_FCR) ? 'R' : 'L';

  00fe9	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _range_finder$[ebp], 0
  00ff0	75 09		 jne	 SHORT $LN81@draw_2d_eo
  00ff2	c6 85 5f fe ff
	ff 52		 mov	 BYTE PTR tv537[ebp], 82	; 00000052H
  00ff9	eb 07		 jmp	 SHORT $LN82@draw_2d_eo
$LN81@draw_2d_eo:
  00ffb	c6 85 5f fe ff
	ff 4c		 mov	 BYTE PTR tv537[ebp], 76	; 0000004cH
$LN82@draw_2d_eo:
  01002	8a 85 5f fe ff
	ff		 mov	 al, BYTE PTR tv537[ebp]
  01008	88 85 af fe ff
	ff		 mov	 BYTE PTR _range_char$4[ebp], al
$LN49@draw_2d_eo:

; 2692 : 						}
; 2693 : 
; 2694 : 						sprintf (buffer, "%c%04d M   %3d KPH", range_char, (int)target_range, (int)target_velocity);

  0100e	f3 0f 2c 85 a8
	fe ff ff	 cvttss2si eax, DWORD PTR _target_velocity$3[ebp]
  01016	50		 push	 eax
  01017	f3 0f 2c 8d 2c
	ff ff ff	 cvttss2si ecx, DWORD PTR _target_range$[ebp]
  0101f	51		 push	 ecx
  01020	0f b6 95 af fe
	ff ff		 movzx	 edx, BYTE PTR _range_char$4[ebp]
  01027	52		 push	 edx
  01028	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@
  0102d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01033	50		 push	 eax
  01034	e8 00 00 00 00	 call	 _sprintf
  01039	83 c4 14	 add	 esp, 20			; 00000014H

; 2695 : 
; 2696 : 						width = get_mono_font_string_width (buffer) / 2;

  0103c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01042	50		 push	 eax
  01043	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01048	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv1189[ebp]
  0104e	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv1189[ebp]
  01056	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0105e	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2697 : 						set_2d_mono_font_position (0.0, 0.75);

  01066	51		 push	 ecx
  01067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  0106f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01074	51		 push	 ecx
  01075	0f 57 c0	 xorps	 xmm0, xmm0
  01078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2698 : 						set_mono_font_rel_position (-width, 0.0);

  01082	51		 push	 ecx
  01083	0f 57 c0	 xorps	 xmm0, xmm0
  01086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108b	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  01093	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0109a	51		 push	 ecx
  0109b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2699 : 
; 2700 : 						print_mono_font_string (buffer);

  010a5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  010ab	50		 push	 eax
  010ac	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2701 : 					}
; 2702 : 
; 2703 : 					draw_2d_line (x - 0.30, y + 0.20, x - 0.15, y + 0.20, MFD_COLOUR1);

  010b1	b8 04 00 00 00	 mov	 eax, 4
  010b6	6b c8 00	 imul	 ecx, eax, 0
  010b9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010bf	52		 push	 edx
  010c0	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  010c8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  010d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010d4	51		 push	 ecx
  010d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010da	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  010e2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  010ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010ee	51		 push	 ecx
  010ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f4	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  010fc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01104	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01108	51		 push	 ecx
  01109	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110e	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01116	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0111e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01122	51		 push	 ecx
  01123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01128	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2704 : 					draw_2d_line (x + 0.30, y + 0.20, x + 0.15, y + 0.20, MFD_COLOUR1);

  0112d	b8 04 00 00 00	 mov	 eax, 4
  01132	6b c8 00	 imul	 ecx, eax, 0
  01135	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0113b	52		 push	 edx
  0113c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01144	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0114c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01150	51		 push	 ecx
  01151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01156	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0115e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01166	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0116a	51		 push	 ecx
  0116b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01170	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01178	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01180	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01184	51		 push	 ecx
  01185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118a	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01192	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0119a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0119e	51		 push	 ecx
  0119f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011a4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2705 : 					draw_2d_line (x - 0.30, y - 0.20, x - 0.15, y - 0.20, MFD_COLOUR1);

  011a9	b8 04 00 00 00	 mov	 eax, 4
  011ae	6b c8 00	 imul	 ecx, eax, 0
  011b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011b7	52		 push	 edx
  011b8	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  011c0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  011c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011cc	51		 push	 ecx
  011cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d2	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  011da	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  011e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011e6	51		 push	 ecx
  011e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ec	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  011f4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  011fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01200	51		 push	 ecx
  01201	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01206	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0120e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01216	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0121a	51		 push	 ecx
  0121b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01220	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2706 : 					draw_2d_line (x + 0.30, y - 0.20, x + 0.15, y - 0.20, MFD_COLOUR1);

  01225	b8 04 00 00 00	 mov	 eax, 4
  0122a	6b c8 00	 imul	 ecx, eax, 0
  0122d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01233	52		 push	 edx
  01234	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0123c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01244	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01248	51		 push	 ecx
  01249	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0124e	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01256	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  0125e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01262	51		 push	 ecx
  01263	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01268	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01270	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01278	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0127c	51		 push	 ecx
  0127d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01282	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0128a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01292	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01296	51		 push	 ecx
  01297	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0129c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2707 : 					draw_2d_line (x - 0.30, y + 0.20, x - 0.30, y + 0.15, MFD_COLOUR1);

  012a1	b8 04 00 00 00	 mov	 eax, 4
  012a6	6b c8 00	 imul	 ecx, eax, 0
  012a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012af	52		 push	 edx
  012b0	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  012b8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  012c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012c4	51		 push	 ecx
  012c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ca	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  012d2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  012da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012de	51		 push	 ecx
  012df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012e4	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  012ec	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  012f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012f8	51		 push	 ecx
  012f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012fe	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01306	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0130e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01312	51		 push	 ecx
  01313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01318	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2708 : 					draw_2d_line (x - 0.30, y - 0.20, x - 0.30, y - 0.15, MFD_COLOUR1);

  0131d	b8 04 00 00 00	 mov	 eax, 4
  01322	6b c8 00	 imul	 ecx, eax, 0
  01325	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0132b	52		 push	 edx
  0132c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01334	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  0133c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01340	51		 push	 ecx
  01341	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01346	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0134e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01356	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0135a	51		 push	 ecx
  0135b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01360	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01368	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01370	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01374	51		 push	 ecx
  01375	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137a	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01382	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0138a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0138e	51		 push	 ecx
  0138f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01394	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2709 : 					draw_2d_line (x + 0.30, y + 0.20, x + 0.30, y + 0.15, MFD_COLOUR1);

  01399	b8 04 00 00 00	 mov	 eax, 4
  0139e	6b c8 00	 imul	 ecx, eax, 0
  013a1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013a7	52		 push	 edx
  013a8	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  013b0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  013b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013bc	51		 push	 ecx
  013bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c2	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  013ca	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  013d2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013d6	51		 push	 ecx
  013d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013dc	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  013e4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  013ec	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013f0	51		 push	 ecx
  013f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f6	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  013fe	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01406	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0140a	51		 push	 ecx
  0140b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01410	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2710 : 					draw_2d_line (x + 0.30, y - 0.20, x + 0.30, y - 0.15, MFD_COLOUR1);

  01415	b8 04 00 00 00	 mov	 eax, 4
  0141a	6b c8 00	 imul	 ecx, eax, 0
  0141d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01423	52		 push	 edx
  01424	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0142c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01434	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01438	51		 push	 ecx
  01439	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143e	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01446	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0144e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01452	51		 push	 ecx
  01453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01458	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01460	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01468	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0146c	51		 push	 ecx
  0146d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01472	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0147a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01482	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01486	51		 push	 ecx
  01487	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0148c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2711 : 
; 2712 : 					if (eo_is_locked())

  01491	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  01496	85 c0		 test	 eax, eax
  01498	0f 84 f0 01 00
	00		 je	 $LN51@draw_2d_eo

; 2713 : 					{
; 2714 : 						draw_2d_line (x - 0.35, y + 0.35, x - 0.6, y + 0.6, MFD_COLOUR1);

  0149e	b8 04 00 00 00	 mov	 eax, 4
  014a3	6b c8 00	 imul	 ecx, eax, 0
  014a6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014ac	52		 push	 edx
  014ad	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  014b5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  014bd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  014c1	51		 push	 ecx
  014c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c7	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  014cf	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  014d7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  014db	51		 push	 ecx
  014dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e1	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  014e9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  014f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  014f5	51		 push	 ecx
  014f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014fb	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01503	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  0150b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0150f	51		 push	 ecx
  01510	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01515	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2715 : 						draw_2d_line (x - 0.35, y - 0.35, x - 0.6, y - 0.6, MFD_COLOUR1);

  0151a	b8 04 00 00 00	 mov	 eax, 4
  0151f	6b c8 00	 imul	 ecx, eax, 0
  01522	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01528	52		 push	 edx
  01529	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01531	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  01539	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0153d	51		 push	 ecx
  0153e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01543	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0154b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  01553	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01557	51		 push	 ecx
  01558	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0155d	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01565	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  0156d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01571	51		 push	 ecx
  01572	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01577	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0157f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01587	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0158b	51		 push	 ecx
  0158c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01591	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2716 : 						draw_2d_line (x + 0.35, y + 0.35, x + 0.6, y + 0.6, MFD_COLOUR1);

  01596	b8 04 00 00 00	 mov	 eax, 4
  0159b	6b c8 00	 imul	 ecx, eax, 0
  0159e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015a4	52		 push	 edx
  015a5	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  015ad	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  015b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015b9	51		 push	 ecx
  015ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015bf	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  015c7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  015cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015d3	51		 push	 ecx
  015d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015d9	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  015e1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  015e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015ed	51		 push	 ecx
  015ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015f3	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  015fb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01603	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01607	51		 push	 ecx
  01608	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2717 : 						draw_2d_line (x + 0.35, y - 0.35, x + 0.6, y - 0.6, MFD_COLOUR1);

  01612	b8 04 00 00 00	 mov	 eax, 4
  01617	6b c8 00	 imul	 ecx, eax, 0
  0161a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01620	52		 push	 edx
  01621	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01629	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  01631	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01635	51		 push	 ecx
  01636	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0163b	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01643	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  0164b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0164f	51		 push	 ecx
  01650	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01655	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0165d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01665	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01669	51		 push	 ecx
  0166a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166f	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01677	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  0167f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01683	51		 push	 ecx
  01684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01689	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN51@draw_2d_eo:

; 2718 : 					}
; 2719 : 				}
; 2720 : 
; 2721 : 				main_vp = tmp;

  0168e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01693	8d b5 cc fe ff
	ff		 lea	 esi, DWORD PTR _tmp$[ebp]
  01699	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  0169e	f3 a5		 rep movsd
$LN35@draw_2d_eo:
$LN1@draw_2d_eo:

; 2722 : 			}
; 2723 : 		}
; 2724 : 	}
; 2725 : }

  016a0	5f		 pop	 edi
  016a1	5e		 pop	 esi
  016a2	5b		 pop	 ebx
  016a3	8b e5		 mov	 esp, ebp
  016a5	5d		 pop	 ebp
  016a6	c2 10 00	 ret	 16			; 00000010H
?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ENDP ; draw_2d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv225 = -288						; size = 4
tv145 = -288						; size = 4
tv85 = -288						; size = 4
tv217 = -284						; size = 4
tv157 = -284						; size = 4
tv137 = -284						; size = 4
tv77 = -284						; size = 4
_m$1 = -216						; size = 36
_tmp_vp$2 = -180					; size = 48
_rotated_eo_vp$3 = -132					; size = 48
_centered_eo_vp$4 = -84					; size = 48
_position$5 = -36					; size = 12
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_full_screen_3d_eo_display, COMDAT

; 2111 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2112 : 	float
; 2113 : 		zoom;
; 2114 : 
; 2115 : 	display_3d_light_levels
; 2116 : 		light_level;
; 2117 : 
; 2118 : 	display_3d_noise_levels
; 2119 : 		noise_level;
; 2120 : 
; 2121 : 	vec3d
; 2122 : 		*position;
; 2123 : 
; 2124 : 	weathermodes
; 2125 : 		weather_mode;
; 2126 : 
; 2127 : 	day_segment_types
; 2128 : 		day_segment_type;
; 2129 : 
; 2130 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@draw_full_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00017	83 c0 13	 add	 eax, 19			; 00000013H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_full_:

; 2131 : 
; 2132 : #ifdef OLD_EO
; 2133 : 	switch (eo->field_of_view)
; 2134 : 	{
; 2135 : 		case EO_FOV_NARROW:
; 2136 : 		{
; 2137 : 			zoom = 1.0 / 128.0;
; 2138 : 
; 2139 : 			break;
; 2140 : 		}
; 2141 : 		case EO_FOV_MEDIUM:
; 2142 : 		{
; 2143 : 			zoom = 1.0 / 8.0;
; 2144 : 
; 2145 : 			break;
; 2146 : 		}
; 2147 : 		case EO_FOV_WIDE:
; 2148 : 		{
; 2149 : 			zoom = 1.0;
; 2150 : 
; 2151 : 			break;
; 2152 : 		}
; 2153 : 		default:
; 2154 : 		{
; 2155 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);
; 2156 : 
; 2157 : 			break;
; 2158 : 		}
; 2159 : 	}
; 2160 : #else
; 2161 : 	zoom = convert_linear_view_value (eo);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00033	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 2162 : #endif
; 2163 : 
; 2164 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0003d	74 0f		 je	 SHORT $LN13@draw_full_
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  0004c	eb 24		 jmp	 SHORT $LN14@draw_full_
$LN13@draw_full_:
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00054	83 c2 35	 add	 edx, 53			; 00000035H
  00057	52		 push	 edx
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00068	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN14@draw_full_:
  00072	b9 01 00 00 00	 mov	 ecx, 1
  00077	85 c9		 test	 ecx, ecx
  00079	74 0c		 je	 SHORT $LN15@draw_full_
  0007b	c7 85 e0 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv85[ebp], 8
  00085	eb 24		 jmp	 SHORT $LN16@draw_full_
$LN15@draw_full_:
  00087	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0008d	83 c2 35	 add	 edx, 53			; 00000035H
  00090	52		 push	 edx
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a1	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN16@draw_full_:
  000ab	6a 08		 push	 8
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000b3	51		 push	 ecx
  000b4	6b 95 e4 fe ff
	ff 60		 imul	 edx, DWORD PTR tv77[ebp], 96
  000bb	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  000c1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000c8	ff d1		 call	 ecx
  000ca	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 2165 : 
; 2166 : 	weather_mode = get_simple_session_weather_at_point (position);

  000cd	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  000d6	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 2167 : 
; 2168 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  000d9	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  000dd	7e 06		 jle	 SHORT $LN6@draw_full_
  000df	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  000e3	7c 18		 jl	 SHORT $LN5@draw_full_
$LN6@draw_full_:
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000ea	83 c0 39	 add	 eax, 57			; 00000039H
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  000f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_full_:

; 2169 : 
; 2170 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  000fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00104	74 0f		 je	 SHORT $LN17@draw_full_
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], ecx
  00113	eb 24		 jmp	 SHORT $LN18@draw_full_
$LN17@draw_full_:
  00115	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0011b	83 c2 3b	 add	 edx, 59			; 0000003bH
  0011e	52		 push	 edx
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012f	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN18@draw_full_:
  00139	b9 01 00 00 00	 mov	 ecx, 1
  0013e	85 c9		 test	 ecx, ecx
  00140	74 0c		 je	 SHORT $LN19@draw_full_
  00142	c7 85 e0 fe ff
	ff 27 00 00 00	 mov	 DWORD PTR tv145[ebp], 39 ; 00000027H
  0014c	eb 24		 jmp	 SHORT $LN20@draw_full_
$LN19@draw_full_:
  0014e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00154	83 c2 3b	 add	 edx, 59			; 0000003bH
  00157	52		 push	 edx
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00168	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv145[ebp], 0
$LN20@draw_full_:
  00172	6a 27		 push	 39			; 00000027H
  00174	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0017a	51		 push	 ecx
  0017b	69 95 e4 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv137[ebp], 1116
  00185	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv145[ebp]
  0018b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00192	ff d1		 call	 ecx
  00194	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 2171 : 
; 2172 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  00197	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  0019b	7c 06		 jl	 SHORT $LN8@draw_full_
  0019d	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001a1	7c 18		 jl	 SHORT $LN7@draw_full_
$LN8@draw_full_:
  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001a8	83 c0 3d	 add	 eax, 61			; 0000003dH
  001ab	50		 push	 eax
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001b6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_full_:

; 2173 : 
; 2174 : 	switch (system)

  001bb	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001be	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  001c4	83 bd e4 fe ff
	ff 03		 cmp	 DWORD PTR tv157[ebp], 3
  001cb	74 0b		 je	 SHORT $LN9@draw_full_
  001cd	83 bd e4 fe ff
	ff 04		 cmp	 DWORD PTR tv157[ebp], 4
  001d4	74 2a		 je	 SHORT $LN10@draw_full_
  001d6	eb 50		 jmp	 SHORT $LN11@draw_full_
$LN9@draw_full_:

; 2175 : 	{
; 2176 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2177 : 		{
; 2178 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001d8	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001db	c1 e0 04	 shl	 eax, 4
  001de	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001e1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  001e8	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2179 : 
; 2180 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  001eb	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001ee	c1 e0 04	 shl	 eax, 4
  001f1	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001f4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  001fb	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2181 : 
; 2182 : 			break;

  001fe	eb 39		 jmp	 SHORT $LN2@draw_full_
$LN10@draw_full_:

; 2183 : 		}
; 2184 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 2185 : 		{
; 2186 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  00200	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00203	c1 e0 04	 shl	 eax, 4
  00206	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00209	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00210	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2187 : 
; 2188 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  00213	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00216	c1 e0 04	 shl	 eax, 4
  00219	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0021c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00223	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2189 : 
; 2190 : 			break;

  00226	eb 11		 jmp	 SHORT $LN2@draw_full_
$LN11@draw_full_:

; 2191 : 		}
; 2192 : 		default:
; 2193 : 		{
; 2194 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00228	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  0022b	50		 push	 eax
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00231	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00236	83 c4 08	 add	 esp, 8
$LN2@draw_full_:

; 2195 : 
; 2196 : 			break;
; 2197 : 		}
; 2198 : 	}
; 2199 : 
; 2200 : 	set_main_3d_params

  00239	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  0023e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00246	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024a	51		 push	 ecx
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00255	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0025d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00261	51		 push	 ecx
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	51		 push	 ecx
  00268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00275	51		 push	 ecx
  00276	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  0027e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00283	51		 push	 ecx
  00284	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0028c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00291	51		 push	 ecx
  00292	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  002a2	50		 push	 eax
  002a3	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  002a6	51		 push	 ecx
  002a7	6a 03		 push	 3
  002a9	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2201 : 	(
; 2202 : 		DISPLAY_3D_TINT_GREEN,
; 2203 : 		light_level,
; 2204 : 		noise_level,
; 2205 : 		mfd_screen_x_min,
; 2206 : 		mfd_screen_y_min,
; 2207 : 		mfd_screen_width,
; 2208 : 		mfd_screen_height,
; 2209 : 		rad (59.99) * zoom,
; 2210 : 		rad (59.99) * zoom
; 2211 : 	);
; 2212 : 
; 2213 : 	//
; 2214 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 2215 : 	//
; 2216 : 
; 2217 : 	{
; 2218 : 		vec3d
; 2219 : 			position;
; 2220 : 
; 2221 : 		viewpoint
; 2222 : 			centered_eo_vp,
; 2223 : 			rotated_eo_vp,
; 2224 : 			tmp_vp;
; 2225 : 
; 2226 : 		matrix3x3
; 2227 : 			m;
; 2228 : 
; 2229 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  002ae	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  002b4	83 c6 08	 add	 esi, 8
  002b7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002bc	8d bd 4c ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  002c2	f3 a5		 rep movsd

; 2230 : 
; 2231 : 		get_viper_eo_relative_centred_viewpoint (&centered_eo_vp);

  002c4	8d 45 ac	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  002c7	50		 push	 eax
  002c8	e8 00 00 00 00	 call	 ?get_viper_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_viper_eo_relative_centred_viewpoint

; 2232 : 
; 2233 : 		rotated_eo_vp.position = centered_eo_vp.position;

  002cd	8b 45 ac	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  002d0	89 85 7c ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  002d6	8b 4d b0	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  002d9	89 4d 80	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  002dc	8b 55 b4	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  002df	89 55 84	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 2234 : 
; 2235 : 		get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  002e2	51		 push	 ecx
  002e3	0f 57 c0	 xorps	 xmm0, xmm0
  002e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002eb	51		 push	 ecx
  002ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  002f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f9	51		 push	 ecx
  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00302	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00307	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 2236 : 
; 2237 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  00313	8d 45 b8	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  00316	50		 push	 eax
  00317	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  0031d	51		 push	 ecx
  0031e	8d 55 88	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00321	52		 push	 edx
  00322	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 2238 : 
; 2239 : 		position.x = -rotated_eo_vp.x;

  00327	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  0032f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00336	f3 0f 11 45 dc	 movss	 DWORD PTR _position$5[ebp], xmm0

; 2240 : 		position.y = -rotated_eo_vp.y;

  0033b	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  00340	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00347	f3 0f 11 45 e0	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 2241 : 		position.z = -rotated_eo_vp.z;

  0034c	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  00351	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00358	f3 0f 11 45 e4	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 2242 : 
; 2243 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  0035d	8d 45 dc	 lea	 eax, DWORD PTR _position$5[ebp]
  00360	50		 push	 eax
  00361	8d 4d 88	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00364	51		 push	 ecx
  00365	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  0036b	83 c2 08	 add	 edx, 8
  0036e	52		 push	 edx
  0036f	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 2244 : 
; 2245 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  00374	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0037b	74 0f		 je	 SHORT $LN21@draw_full_
  0037d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00382	8b 08		 mov	 ecx, DWORD PTR [eax]
  00384	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv217[ebp], ecx
  0038a	eb 27		 jmp	 SHORT $LN22@draw_full_
$LN21@draw_full_:
  0038c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00392	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  00398	52		 push	 edx
  00399	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0039e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003a9	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv217[ebp], 0
$LN22@draw_full_:
  003b3	b9 01 00 00 00	 mov	 ecx, 1
  003b8	85 c9		 test	 ecx, ecx
  003ba	74 0c		 je	 SHORT $LN23@draw_full_
  003bc	c7 85 e0 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv225[ebp], 8
  003c6	eb 27		 jmp	 SHORT $LN24@draw_full_
$LN23@draw_full_:
  003c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  003ce	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  003d4	52		 push	 edx
  003d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  003da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  003df	50		 push	 eax
  003e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e5	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
$LN24@draw_full_:
  003ef	8d 4d dc	 lea	 ecx, DWORD PTR _position$5[ebp]
  003f2	51		 push	 ecx
  003f3	6a 08		 push	 8
  003f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003fb	52		 push	 edx
  003fc	6b 85 e4 fe ff
	ff 60		 imul	 eax, DWORD PTR tv217[ebp], 96
  00403	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv225[ebp]
  00409	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00410	ff d2		 call	 edx

; 2246 : 
; 2247 : 		rotated_eo_vp.x += position.x;

  00412	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  0041a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _position$5[ebp]
  0041f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 2248 : 		rotated_eo_vp.y += position.y;

  00427	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  0042c	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  00431	f3 0f 11 45 80	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 2249 : 		rotated_eo_vp.z += position.z;

  00436	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  0043b	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  00440	f3 0f 11 45 84	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 2250 : 
; 2251 : 		draw_eo_3d_scene = TRUE;

  00445	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 2252 : 
; 2253 : 		draw_main_3d_scene (&rotated_eo_vp);

  0044f	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 2254 : 
; 2255 : 		draw_eo_3d_scene = FALSE;

  0045b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 2256 : 
; 2257 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  00465	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  0046b	83 c7 08	 add	 edi, 8
  0046e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00473	8d b5 4c ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  00479	f3 a5		 rep movsd

; 2258 : 	}
; 2259 : }

  0047b	5f		 pop	 edi
  0047c	5e		 pop	 esi
  0047d	5b		 pop	 ebx
  0047e	8b e5		 mov	 esp, ebp
  00480	5d		 pop	 ebp
  00481	c2 08 00	 ret	 8
?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_full_screen_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv234 = -292						; size = 4
tv150 = -292						; size = 4
tv90 = -292						; size = 4
tv226 = -288						; size = 4
tv162 = -288						; size = 4
tv142 = -288						; size = 4
tv82 = -288						; size = 4
_m$1 = -220						; size = 36
_tmp_vp$2 = -184					; size = 48
_rotated_eo_vp$3 = -136					; size = 48
_centered_eo_vp$4 = -88					; size = 48
_position$5 = -40					; size = 12
_day_segment_type$ = -28				; size = 4
_weather_mode$ = -24					; size = 4
_position$ = -20					; size = 4
_noise_level$ = -16					; size = 4
_light_level$ = -12					; size = 4
_tint$ = -8						; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_3d_eo_display, COMDAT

; 1933 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1934 : 	float
; 1935 : 		zoom;
; 1936 : 
; 1937 : 	display_3d_tints
; 1938 : 		tint;
; 1939 : 
; 1940 : 	display_3d_light_levels
; 1941 : 		light_level;
; 1942 : 
; 1943 : 	display_3d_noise_levels
; 1944 : 		noise_level;
; 1945 : 
; 1946 : 	vec3d
; 1947 : 		*position;
; 1948 : 
; 1949 : 	weathermodes
; 1950 : 		weather_mode;
; 1951 : 
; 1952 : 	day_segment_types
; 1953 : 		day_segment_type;
; 1954 : 
; 1955 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@draw_3d_eo
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_3d_eo:

; 1956 : 
; 1957 : 	ASSERT (eo_3d_texture_screen);

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  00031	75 18		 jne	 SHORT $LN5@draw_3d_eo
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00038	83 c0 18	 add	 eax, 24			; 00000018H
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_3d_eo:

; 1958 : 
; 1959 : #ifdef OLD_EO
; 1960 : 	switch (eo->field_of_view)
; 1961 : 	{
; 1962 : 		case EO_FOV_NARROW:
; 1963 : 		{
; 1964 : 			zoom = 1.0 / 128.0;
; 1965 : 
; 1966 : 			break;
; 1967 : 		}
; 1968 : 		case EO_FOV_MEDIUM:
; 1969 : 		{
; 1970 : 			zoom = 1.0 / 8.0;
; 1971 : 
; 1972 : 			break;
; 1973 : 		}
; 1974 : 		case EO_FOV_WIDE:
; 1975 : 		{
; 1976 : 			zoom = 1.0;
; 1977 : 
; 1978 : 			break;
; 1979 : 		}
; 1980 : 		default:
; 1981 : 		{
; 1982 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);
; 1983 : 
; 1984 : 			break;
; 1985 : 		}
; 1986 : 	}
; 1987 : #else
; 1988 : 	zoom = convert_linear_view_value (eo);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00054	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 1989 : #endif
; 1990 : 
; 1991 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0005e	74 0f		 je	 SHORT $LN18@draw_3d_eo
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  0006d	eb 24		 jmp	 SHORT $LN19@draw_3d_eo
$LN18@draw_3d_eo:
  0006f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00075	83 c2 3a	 add	 edx, 58			; 0000003aH
  00078	52		 push	 edx
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00089	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN19@draw_3d_eo:
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	85 c9		 test	 ecx, ecx
  0009a	74 0c		 je	 SHORT $LN20@draw_3d_eo
  0009c	c7 85 dc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv90[ebp], 8
  000a6	eb 24		 jmp	 SHORT $LN21@draw_3d_eo
$LN20@draw_3d_eo:
  000a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000ae	83 c2 3a	 add	 edx, 58			; 0000003aH
  000b1	52		 push	 edx
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c2	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN21@draw_3d_eo:
  000cc	6a 08		 push	 8
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000d4	51		 push	 ecx
  000d5	6b 95 e0 fe ff
	ff 60		 imul	 edx, DWORD PTR tv82[ebp], 96
  000dc	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv90[ebp]
  000e2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000e9	ff d1		 call	 ecx
  000eb	89 45 ec	 mov	 DWORD PTR _position$[ebp], eax

; 1992 : 
; 1993 : 	weather_mode = get_simple_session_weather_at_point (position);

  000ee	8b 45 ec	 mov	 eax, DWORD PTR _position$[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  000f7	89 45 e8	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 1994 : 
; 1995 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  000fa	83 7d e8 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  000fe	7e 06		 jle	 SHORT $LN7@draw_3d_eo
  00100	83 7d e8 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  00104	7c 18		 jl	 SHORT $LN6@draw_3d_eo
$LN7@draw_3d_eo:
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0010b	83 c0 3e	 add	 eax, 62			; 0000003eH
  0010e	50		 push	 eax
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00119	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 1996 : 
; 1997 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  0011e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00125	74 0f		 je	 SHORT $LN22@draw_3d_eo
  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  00134	eb 24		 jmp	 SHORT $LN23@draw_3d_eo
$LN22@draw_3d_eo:
  00136	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0013c	83 c2 40	 add	 edx, 64			; 00000040H
  0013f	52		 push	 edx
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00150	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN23@draw_3d_eo:
  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	85 c9		 test	 ecx, ecx
  00161	74 0c		 je	 SHORT $LN24@draw_3d_eo
  00163	c7 85 dc fe ff
	ff 27 00 00 00	 mov	 DWORD PTR tv150[ebp], 39 ; 00000027H
  0016d	eb 24		 jmp	 SHORT $LN25@draw_3d_eo
$LN24@draw_3d_eo:
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00175	83 c2 40	 add	 edx, 64			; 00000040H
  00178	52		 push	 edx
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00189	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN25@draw_3d_eo:
  00193	6a 27		 push	 39			; 00000027H
  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0019b	51		 push	 ecx
  0019c	69 95 e0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv142[ebp], 1116
  001a6	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001ac	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001b3	ff d1		 call	 ecx
  001b5	89 45 e4	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 1998 : 
; 1999 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001b8	83 7d e4 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001bc	7c 06		 jl	 SHORT $LN9@draw_3d_eo
  001be	83 7d e4 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001c2	7c 18		 jl	 SHORT $LN8@draw_3d_eo
$LN9@draw_3d_eo:
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001c9	83 c0 42	 add	 eax, 66			; 00000042H
  001cc	50		 push	 eax
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_3d_eo:

; 2000 : 
; 2001 : 	switch (system)

  001dc	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001df	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv162[ebp], eax
  001e5	83 bd e0 fe ff
	ff 03		 cmp	 DWORD PTR tv162[ebp], 3
  001ec	74 0e		 je	 SHORT $LN10@draw_3d_eo
  001ee	83 bd e0 fe ff
	ff 04		 cmp	 DWORD PTR tv162[ebp], 4
  001f5	74 46		 je	 SHORT $LN13@draw_3d_eo
  001f7	e9 82 00 00 00	 jmp	 $LN16@draw_3d_eo
$LN10@draw_3d_eo:

; 2002 : 	{
; 2003 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2004 : 		{
; 2005 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001fc	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001ff	c1 e0 04	 shl	 eax, 4
  00202	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00205	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0020c	89 55 f4	 mov	 DWORD PTR _light_level$[ebp], edx

; 2006 : 
; 2007 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0020f	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00212	c1 e0 04	 shl	 eax, 4
  00215	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00218	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0021f	89 55 f0	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2008 : 
; 2009 : 			if (command_line_colour_mfd)

  00222	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00229	74 09		 je	 SHORT $LN11@draw_3d_eo

; 2010 : 				tint = DISPLAY_3D_TINT_BLUE;

  0022b	c7 45 f8 09 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 9

; 2011 : 			else

  00232	eb 07		 jmp	 SHORT $LN12@draw_3d_eo
$LN11@draw_3d_eo:

; 2012 : 				tint = DISPLAY_3D_TINT_GREEN;

  00234	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3
$LN12@draw_3d_eo:

; 2013 : 
; 2014 : 			break;

  0023b	eb 52		 jmp	 SHORT $LN2@draw_3d_eo
$LN13@draw_3d_eo:

; 2015 : 		}
; 2016 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 2017 : 		{
; 2018 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  0023d	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00240	c1 e0 04	 shl	 eax, 4
  00243	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00246	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0024d	89 55 f4	 mov	 DWORD PTR _light_level$[ebp], edx

; 2019 : 
; 2020 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  00250	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00253	c1 e0 04	 shl	 eax, 4
  00256	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00259	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00260	89 55 f0	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2021 : 
; 2022 : 			if (command_line_colour_mfd)

  00263	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  0026a	74 09		 je	 SHORT $LN14@draw_3d_eo

; 2023 : 				tint = DISPLAY_3D_TINT_CLEAR;

  0026c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 0

; 2024 : 			else

  00273	eb 07		 jmp	 SHORT $LN15@draw_3d_eo
$LN14@draw_3d_eo:

; 2025 : 				tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  00275	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4
$LN15@draw_3d_eo:

; 2026 : 
; 2027 : 			break;

  0027c	eb 11		 jmp	 SHORT $LN2@draw_3d_eo
$LN16@draw_3d_eo:

; 2028 : 		}
; 2029 : 		default:
; 2030 : 		{
; 2031 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  0027e	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00281	50		 push	 eax
  00282	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00287	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0028c	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 2032 : 
; 2033 : 			break;
; 2034 : 		}
; 2035 : 	}
; 2036 : 
; 2037 : 	set_3d_render_target (eo_3d_texture_screen);

  0028f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00294	50		 push	 eax
  00295	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 2038 : 
; 2039 : 	set_active_screen (eo_3d_texture_screen);

  0029a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0029f	50		 push	 eax
  002a0	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2040 : 
; 2041 : /*		if (command_line_green_mfd)
; 2042 : 		{
; 2043 : 			tint = DISPLAY_3D_TINT_GREEN;
; 2044 : 		}
; 2045 : 		else
; 2046 : 		{
; 2047 : 			tint = DISPLAY_3D_TINT_GREY;
; 2048 : 		}*/
; 2049 : 
; 2050 : 		set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_size, mfd_viewport_size, rad (59.99) * zoom, rad (59.99) * zoom);

  002a5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002aa	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002b2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b6	51		 push	 ecx
  002b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bc	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002c1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002cd	51		 push	 ecx
  002ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d3	51		 push	 ecx
  002d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	51		 push	 ecx
  002f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	51		 push	 ecx
  002fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00306	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030b	8b 45 f0	 mov	 eax, DWORD PTR _noise_level$[ebp]
  0030e	50		 push	 eax
  0030f	8b 4d f4	 mov	 ecx, DWORD PTR _light_level$[ebp]
  00312	51		 push	 ecx
  00313	8b 55 f8	 mov	 edx, DWORD PTR _tint$[ebp]
  00316	52		 push	 edx
  00317	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2051 : 
; 2052 : 	//
; 2053 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 2054 : 	//
; 2055 : 
; 2056 : 	{
; 2057 : 		vec3d
; 2058 : 			position;
; 2059 : 
; 2060 : 		viewpoint
; 2061 : 			centered_eo_vp,
; 2062 : 			rotated_eo_vp,
; 2063 : 			tmp_vp;
; 2064 : 
; 2065 : 		matrix3x3
; 2066 : 			m;
; 2067 : 
; 2068 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  0031c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00322	83 c6 08	 add	 esi, 8
  00325	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0032a	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  00330	f3 a5		 rep movsd

; 2069 : 
; 2070 : 		get_viper_eo_relative_centred_viewpoint (&centered_eo_vp);

  00332	8d 45 a8	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  00335	50		 push	 eax
  00336	e8 00 00 00 00	 call	 ?get_viper_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_viper_eo_relative_centred_viewpoint

; 2071 : 
; 2072 : 		rotated_eo_vp.position = centered_eo_vp.position;

  0033b	8b 45 a8	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  0033e	89 85 78 ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  00344	8b 4d ac	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  00347	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  0034d	8b 55 b0	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  00350	89 55 80	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 2073 : 
; 2074 : 		get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  00353	51		 push	 ecx
  00354	0f 57 c0	 xorps	 xmm0, xmm0
  00357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035c	51		 push	 ecx
  0035d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00365	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036a	51		 push	 ecx
  0036b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00373	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00378	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  0037e	50		 push	 eax
  0037f	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 2075 : 
; 2076 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  00384	8d 45 b4	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  00387	50		 push	 eax
  00388	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  0038e	51		 push	 ecx
  0038f	8d 55 84	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00392	52		 push	 edx
  00393	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 2077 : 
; 2078 : 		position.x = -rotated_eo_vp.x;

  00398	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  003a0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003a7	f3 0f 11 45 d8	 movss	 DWORD PTR _position$5[ebp], xmm0

; 2079 : 		position.y = -rotated_eo_vp.y;

  003ac	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  003b4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003bb	f3 0f 11 45 dc	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 2080 : 		position.z = -rotated_eo_vp.z;

  003c0	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  003c5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003cc	f3 0f 11 45 e0	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 2081 : 
; 2082 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  003d1	8d 45 d8	 lea	 eax, DWORD PTR _position$5[ebp]
  003d4	50		 push	 eax
  003d5	8d 4d 84	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  003d8	51		 push	 ecx
  003d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  003df	83 c2 08	 add	 edx, 8
  003e2	52		 push	 edx
  003e3	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 2083 : 
; 2084 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  003e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  003ef	74 0f		 je	 SHORT $LN26@draw_3d_eo
  003f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f8	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv226[ebp], ecx
  003fe	eb 27		 jmp	 SHORT $LN27@draw_3d_eo
$LN26@draw_3d_eo:
  00400	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00406	81 c2 97 00 00
	00		 add	 edx, 151		; 00000097H
  0040c	52		 push	 edx
  0040d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00412	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00417	50		 push	 eax
  00418	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0041d	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN27@draw_3d_eo:
  00427	b9 01 00 00 00	 mov	 ecx, 1
  0042c	85 c9		 test	 ecx, ecx
  0042e	74 0c		 je	 SHORT $LN28@draw_3d_eo
  00430	c7 85 dc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv234[ebp], 8
  0043a	eb 27		 jmp	 SHORT $LN29@draw_3d_eo
$LN28@draw_3d_eo:
  0043c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00442	81 c2 97 00 00
	00		 add	 edx, 151		; 00000097H
  00448	52		 push	 edx
  00449	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0044e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00459	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv234[ebp], 0
$LN29@draw_3d_eo:
  00463	8d 4d d8	 lea	 ecx, DWORD PTR _position$5[ebp]
  00466	51		 push	 ecx
  00467	6a 08		 push	 8
  00469	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0046f	52		 push	 edx
  00470	6b 85 e0 fe ff
	ff 60		 imul	 eax, DWORD PTR tv226[ebp], 96
  00477	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv234[ebp]
  0047d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00484	ff d2		 call	 edx

; 2085 : 
; 2086 : 		rotated_eo_vp.x += position.x;

  00486	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  0048e	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _position$5[ebp]
  00493	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 2087 : 		rotated_eo_vp.y += position.y;

  0049b	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  004a3	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  004a8	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 2088 : 		rotated_eo_vp.z += position.z;

  004b0	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  004b5	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  004ba	f3 0f 11 45 80	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 2089 : 
; 2090 :  		draw_eo_3d_scene = TRUE;

  004bf	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 2091 : 
; 2092 : 		draw_main_3d_scene (&rotated_eo_vp);

  004c9	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  004cf	50		 push	 eax
  004d0	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 2093 : 
; 2094 : 		draw_eo_3d_scene = FALSE;

  004d5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 2095 : 
; 2096 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  004df	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  004e5	83 c7 08	 add	 edi, 8
  004e8	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004ed	8d b5 48 ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  004f3	f3 a5		 rep movsd

; 2097 : 	}
; 2098 : 
; 2099 : 	finalise_3d_render_target_texture (eo_3d_texture_screen);

  004f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004fa	50		 push	 eax
  004fb	e8 00 00 00 00	 call	 ?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ; finalise_3d_render_target_texture

; 2100 : 
; 2101 : 	set_3d_render_target (video_screen);

  00500	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00505	50		 push	 eax
  00506	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 2102 : 
; 2103 : 	set_active_screen (video_screen);

  0050b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00510	50		 push	 eax
  00511	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2104 : }

  00516	5f		 pop	 edi
  00517	5e		 pop	 esi
  00518	5b		 pop	 ebx
  00519	8b e5		 mov	 esp, ebp
  0051b	5d		 pop	 ebp
  0051c	c2 08 00	 ret	 8
?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?get_undamaged_eo_display_mode@@YGHW4VIPER_MFD_MODES@@@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?get_undamaged_eo_display_mode@@YGHW4VIPER_MFD_MODES@@@Z PROC ; get_undamaged_eo_display_mode, COMDAT

; 1914 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1915 : 	if ((mode == VIPER_MFD_MODE_FLIR) && (!viper_damage.flir))

  00009	83 7d 08 02	 cmp	 DWORD PTR _mode$[ebp], 2
  0000d	75 11		 jne	 SHORT $LN2@get_undama
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00014	83 e0 01	 and	 eax, 1
  00017	75 07		 jne	 SHORT $LN2@get_undama

; 1916 : 	{
; 1917 : 		return (TRUE);

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	eb 1b		 jmp	 SHORT $LN1@get_undama
$LN2@get_undama:

; 1918 : 	}
; 1919 : 
; 1920 : 	if ((mode == VIPER_MFD_MODE_DTV) && (!viper_damage.dtv))

  00020	83 7d 08 03	 cmp	 DWORD PTR _mode$[ebp], 3
  00024	75 13		 jne	 SHORT $LN3@get_undama
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0002b	d1 e8		 shr	 eax, 1
  0002d	83 e0 01	 and	 eax, 1
  00030	75 07		 jne	 SHORT $LN3@get_undama

; 1921 : 	{
; 1922 : 		return (TRUE);

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	eb 02		 jmp	 SHORT $LN1@get_undama
$LN3@get_undama:

; 1923 : 	}
; 1924 : 
; 1925 : 	return (FALSE);

  00039	33 c0		 xor	 eax, eax
$LN1@get_undama:

; 1926 : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?get_undamaged_eo_display_mode@@YGHW4VIPER_MFD_MODES@@@Z ENDP ; get_undamaged_eo_display_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z
_TEXT	SEGMENT
tv367 = -100						; size = 4
tv288 = -100						; size = 4
tv256 = -100						; size = 4
tv223 = -100						; size = 4
tv193 = -100						; size = 4
tv165 = -100						; size = 4
tv145 = -100						; size = 4
tv88 = -100						; size = 4
tv360 = -96						; size = 4
tv281 = -96						; size = 4
tv249 = -96						; size = 4
tv216 = -96						; size = 4
tv185 = -96						; size = 4
tv157 = -96						; size = 4
tv137 = -96						; size = 4
tv80 = -96						; size = 4
_target_position$ = -28					; size = 4
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_source$ = -16						; size = 4
_source_side$ = -12					; size = 4
_target_symbol_colour$ = -8				; size = 4
_target_symbol_type$ = -4				; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
_selected_target$ = 20					; size = 4
_display_on_tsd$ = 24					; size = 4
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z PROC ; draw_radar_target_symbol, COMDAT

; 1561 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1562 : 	target_symbol_types
; 1563 : 		target_symbol_type;
; 1564 : 
; 1565 : 	rgb_colour
; 1566 : 		target_symbol_colour;
; 1567 : 
; 1568 : //VJ 030423 TSD render mod
; 1569 : 	entity_sides
; 1570 : 		source_side;
; 1571 : 	entity
; 1572 : 		*source;
; 1573 : 
; 1574 : 	float
; 1575 : 		dx,
; 1576 : 		dy;
; 1577 : 
; 1578 : 	vec3d
; 1579 : 		*target_position;
; 1580 : 
; 1581 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_radar
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00014	83 c0 14	 add	 eax, 20			; 00000014H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_radar:

; 1582 : 
; 1583 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_radar
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00032	83 c0 16	 add	 eax, 22			; 00000016H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_radar:

; 1584 : 
; 1585 : 	ASSERT (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER));

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN46@draw_radar
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN47@draw_radar
$LN46@draw_radar:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0005b	83 c2 18	 add	 edx, 24			; 00000018H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN47@draw_radar:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN48@draw_radar
  0007f	c7 45 9c 42 00
	00 00		 mov	 DWORD PTR tv88[ebp], 66	; 00000042H
  00086	eb 21		 jmp	 SHORT $LN49@draw_radar
$LN48@draw_radar:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0008e	83 c2 18	 add	 edx, 24			; 00000018H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN49@draw_radar:
  000a9	6a 42		 push	 66			; 00000042H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 1116
  000b6	8b 45 9c	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	85 c0		 test	 eax, eax
  000c4	74 18		 je	 SHORT $LN4@draw_radar
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000cb	83 c0 18	 add	 eax, 24			; 00000018H
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_radar:

; 1586 : 
; 1587 : //VJ 030423 TSD render mod
; 1588 : 	source = get_gunship_entity ();

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e3	89 45 f0	 mov	 DWORD PTR _source$[ebp], eax

; 1589 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000e6	83 7d f0 00	 cmp	 DWORD PTR _source$[ebp], 0
  000ea	74 0a		 je	 SHORT $LN50@draw_radar
  000ec	8b 45 f0	 mov	 eax, DWORD PTR _source$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	89 4d a0	 mov	 DWORD PTR tv137[ebp], ecx
  000f4	eb 21		 jmp	 SHORT $LN51@draw_radar
$LN50@draw_radar:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000fc	83 c2 1c	 add	 edx, 28			; 0000001cH
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN51@draw_radar:
  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	85 c9		 test	 ecx, ecx
  0011e	74 09		 je	 SHORT $LN52@draw_radar
  00120	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv145[ebp], 187 ; 000000bbH
  00127	eb 21		 jmp	 SHORT $LN53@draw_radar
$LN52@draw_radar:
  00129	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0012f	83 c2 1c	 add	 edx, 28			; 0000001cH
  00132	52		 push	 edx
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00143	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN53@draw_radar:
  0014a	68 bb 00 00 00	 push	 187			; 000000bbH
  0014f	8b 4d f0	 mov	 ecx, DWORD PTR _source$[ebp]
  00152	51		 push	 ecx
  00153	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv137[ebp], 1116
  0015a	8b 45 9c	 mov	 eax, DWORD PTR tv145[ebp]
  0015d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00164	ff d1		 call	 ecx
  00166	89 45 f4	 mov	 DWORD PTR _source_side$[ebp], eax

; 1590 : 
; 1591 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00169	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0016d	74 0a		 je	 SHORT $LN54@draw_radar
  0016f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	89 4d a0	 mov	 DWORD PTR tv157[ebp], ecx
  00177	eb 21		 jmp	 SHORT $LN55@draw_radar
$LN54@draw_radar:
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0017f	83 c2 1e	 add	 edx, 30			; 0000001eH
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00193	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN55@draw_radar:
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 09		 je	 SHORT $LN56@draw_radar
  001a3	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv165[ebp], 8
  001aa	eb 21		 jmp	 SHORT $LN57@draw_radar
$LN56@draw_radar:
  001ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  001b2	83 c2 1e	 add	 edx, 30			; 0000001eH
  001b5	52		 push	 edx
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN57@draw_radar:
  001cd	6a 08		 push	 8
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001d2	51		 push	 ecx
  001d3	6b 55 a0 60	 imul	 edx, DWORD PTR tv157[ebp], 96
  001d7	8b 45 9c	 mov	 eax, DWORD PTR tv165[ebp]
  001da	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e1	ff d1		 call	 ecx
  001e3	89 45 e4	 mov	 DWORD PTR _target_position$[ebp], eax

; 1592 : 
; 1593 : 	dx = (target_position->x - source_position->x) * scale;

  001e6	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  001e9	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  001ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001f0	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001f4	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001f9	f3 0f 11 45 ec	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1594 : 	dy = (target_position->z - source_position->z) * scale;

  001fe	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  00201	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00204	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00209	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0020e	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00213	f3 0f 11 45 e8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1595 : 
; 1596 : 	target_symbol_type = (target_symbol_types) get_local_entity_int_value (target, INT_TYPE_TARGET_SYMBOL_TYPE);

  00218	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0021c	74 0a		 je	 SHORT $LN58@draw_radar
  0021e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00221	8b 08		 mov	 ecx, DWORD PTR [eax]
  00223	89 4d a0	 mov	 DWORD PTR tv185[ebp], ecx
  00226	eb 21		 jmp	 SHORT $LN59@draw_radar
$LN58@draw_radar:
  00228	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0022e	83 c2 23	 add	 edx, 35			; 00000023H
  00231	52		 push	 edx
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00242	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN59@draw_radar:
  00249	b9 01 00 00 00	 mov	 ecx, 1
  0024e	85 c9		 test	 ecx, ecx
  00250	74 09		 je	 SHORT $LN60@draw_radar
  00252	c7 45 9c d5 00
	00 00		 mov	 DWORD PTR tv193[ebp], 213 ; 000000d5H
  00259	eb 21		 jmp	 SHORT $LN61@draw_radar
$LN60@draw_radar:
  0025b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00261	83 c2 23	 add	 edx, 35			; 00000023H
  00264	52		 push	 edx
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00275	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN61@draw_radar:
  0027c	68 d5 00 00 00	 push	 213			; 000000d5H
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00284	51		 push	 ecx
  00285	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 1116
  0028c	8b 45 9c	 mov	 eax, DWORD PTR tv193[ebp]
  0028f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00296	ff d1		 call	 ecx
  00298	89 45 fc	 mov	 DWORD PTR _target_symbol_type$[ebp], eax

; 1597 : 
; 1598 : 	ASSERT ((target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_SYMBOL_TYPES));

  0029b	83 7d fc 00	 cmp	 DWORD PTR _target_symbol_type$[ebp], 0
  0029f	7c 06		 jl	 SHORT $LN6@draw_radar
  002a1	83 7d fc 08	 cmp	 DWORD PTR _target_symbol_type$[ebp], 8
  002a5	7c 18		 jl	 SHORT $LN5@draw_radar
$LN6@draw_radar:
  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  002ac	83 c0 25	 add	 eax, 37			; 00000025H
  002af	50		 push	 eax
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
  002ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_radar:

; 1599 : 
; 1600 : 	if (get_local_entity_index (target) & 1)

  002bf	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002c2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  002c8	c1 f8 04	 sar	 eax, 4
  002cb	83 e0 01	 and	 eax, 1
  002ce	0f 84 e2 00 00
	00		 je	 $LN7@draw_radar

; 1601 : 	{
; 1602 : //VJ 030423 TSD render mod
; 1603 : 		if (display_on_tsd)

  002d4	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  002d8	0f 84 c2 00 00
	00		 je	 $LN9@draw_radar

; 1604 : 		{
; 1605 : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 1606 : 			if (command_line_tsd_enemy_colours)

  002de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  002e5	0f 84 a2 00 00
	00		 je	 $LN11@draw_radar

; 1607 : 			{
; 1608 : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  002eb	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  002ef	74 0a		 je	 SHORT $LN62@draw_radar
  002f1	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f6	89 4d a0	 mov	 DWORD PTR tv216[ebp], ecx
  002f9	eb 1d		 jmp	 SHORT $LN63@draw_radar
$LN62@draw_radar:
  002fb	68 48 06 00 00	 push	 1608			; 00000648H
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00305	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0030b	52		 push	 edx
  0030c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00311	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv216[ebp], 0
$LN63@draw_radar:
  00318	b8 01 00 00 00	 mov	 eax, 1
  0031d	85 c0		 test	 eax, eax
  0031f	74 09		 je	 SHORT $LN64@draw_radar
  00321	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv223[ebp], 187 ; 000000bbH
  00328	eb 1d		 jmp	 SHORT $LN65@draw_radar
$LN64@draw_radar:
  0032a	68 48 06 00 00	 push	 1608			; 00000648H
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00334	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0033a	51		 push	 ecx
  0033b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00340	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN65@draw_radar:
  00347	68 bb 00 00 00	 push	 187			; 000000bbH
  0034c	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0034f	52		 push	 edx
  00350	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv216[ebp], 1116
  00357	8b 4d 9c	 mov	 ecx, DWORD PTR tv223[ebp]
  0035a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00361	ff d2		 call	 edx
  00363	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00366	75 13		 jne	 SHORT $LN13@draw_radar

; 1609 : 					target_symbol_colour = MFD_COLOUR1;

  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	6b c8 00	 imul	 ecx, eax, 0
  00370	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00376	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1610 : 				else

  00379	eb 10		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:

; 1611 : 					target_symbol_colour = MFD_COLOUR3;

  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	d1 e0		 shl	 eax, 1
  00382	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00388	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx
$LN14@draw_radar:

; 1612 : 			}
; 1613 : 			else

  0038b	eb 11		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:

; 1614 : 			{
; 1615 : 					target_symbol_colour = MFD_COLOUR8;

  0038d	b8 04 00 00 00	 mov	 eax, 4
  00392	6b c8 0c	 imul	 ecx, eax, 12
  00395	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0039b	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN12@draw_radar:

; 1616 : 			}
; 1617 : 		}
; 1618 : 		else

  0039e	eb 11		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:

; 1619 : 			target_symbol_colour = MFD_COLOUR2;

  003a0	b8 04 00 00 00	 mov	 eax, 4
  003a5	c1 e0 00	 shl	 eax, 0
  003a8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  003ae	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx
$LN10@draw_radar:

; 1620 : 	}
; 1621 : 	else

  003b1	e9 de 00 00 00	 jmp	 $LN16@draw_radar
$LN7@draw_radar:

; 1622 : 	{
; 1623 : //VJ 030423 TSD render mod
; 1624 : 		if (display_on_tsd)

  003b6	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  003ba	0f 84 c3 00 00
	00		 je	 $LN15@draw_radar

; 1625 : 		{
; 1626 : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 1627 : 			if (command_line_tsd_enemy_colours)

  003c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  003c7	0f 84 a3 00 00
	00		 je	 $LN17@draw_radar

; 1628 : 			{
; 1629 : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  003cd	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  003d1	74 0a		 je	 SHORT $LN66@draw_radar
  003d3	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d8	89 4d a0	 mov	 DWORD PTR tv249[ebp], ecx
  003db	eb 1d		 jmp	 SHORT $LN67@draw_radar
$LN66@draw_radar:
  003dd	68 5d 06 00 00	 push	 1629			; 0000065dH
  003e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ed	52		 push	 edx
  003ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f3	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv249[ebp], 0
$LN67@draw_radar:
  003fa	b8 01 00 00 00	 mov	 eax, 1
  003ff	85 c0		 test	 eax, eax
  00401	74 09		 je	 SHORT $LN68@draw_radar
  00403	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv256[ebp], 187 ; 000000bbH
  0040a	eb 1d		 jmp	 SHORT $LN69@draw_radar
$LN68@draw_radar:
  0040c	68 5d 06 00 00	 push	 1629			; 0000065dH
  00411	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00416	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0041c	51		 push	 ecx
  0041d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00422	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv256[ebp], 0
$LN69@draw_radar:
  00429	68 bb 00 00 00	 push	 187			; 000000bbH
  0042e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00431	52		 push	 edx
  00432	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv249[ebp], 1116
  00439	8b 4d 9c	 mov	 ecx, DWORD PTR tv256[ebp]
  0043c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00443	ff d2		 call	 edx
  00445	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00448	75 13		 jne	 SHORT $LN19@draw_radar

; 1630 : 					target_symbol_colour = MFD_COLOUR2;

  0044a	b8 04 00 00 00	 mov	 eax, 4
  0044f	c1 e0 00	 shl	 eax, 0
  00452	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00458	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx

; 1631 : 				else

  0045b	eb 11		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:

; 1632 : 					target_symbol_colour = MFD_COLOUR4;

  0045d	b8 04 00 00 00	 mov	 eax, 4
  00462	6b c8 03	 imul	 ecx, eax, 3
  00465	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0046b	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN20@draw_radar:

; 1633 : 			}
; 1634 : 			else

  0046e	eb 11		 jmp	 SHORT $LN18@draw_radar
$LN17@draw_radar:

; 1635 : 			{
; 1636 : 					target_symbol_colour = MFD_COLOUR7;

  00470	b8 04 00 00 00	 mov	 eax, 4
  00475	6b c8 0b	 imul	 ecx, eax, 11
  00478	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0047e	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN18@draw_radar:

; 1637 : 			}
; 1638 : 		}
; 1639 : 		else

  00481	eb 11		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:

; 1640 : 			target_symbol_colour = MFD_COLOUR1;

  00483	b8 04 00 00 00	 mov	 eax, 4
  00488	6b c8 00	 imul	 ecx, eax, 0
  0048b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00491	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN16@draw_radar:

; 1641 : 	}
; 1642 : 
; 1643 : 	if (draw_large_mfd)

  00494	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0049b	0f 84 44 02 00
	00		 je	 $LN21@draw_radar

; 1644 : 	{
; 1645 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  004a1	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004a5	74 0a		 je	 SHORT $LN70@draw_radar
  004a7	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ac	89 4d a0	 mov	 DWORD PTR tv281[ebp], ecx
  004af	eb 1d		 jmp	 SHORT $LN71@draw_radar
$LN70@draw_radar:
  004b1	68 6d 06 00 00	 push	 1645			; 0000066dH
  004b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  004bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004c1	52		 push	 edx
  004c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c7	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv281[ebp], 0
$LN71@draw_radar:
  004ce	b8 01 00 00 00	 mov	 eax, 1
  004d3	85 c0		 test	 eax, eax
  004d5	74 09		 je	 SHORT $LN72@draw_radar
  004d7	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv288[ebp], 80 ; 00000050H
  004de	eb 1d		 jmp	 SHORT $LN73@draw_radar
$LN72@draw_radar:
  004e0	68 6d 06 00 00	 push	 1645			; 0000066dH
  004e5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004f0	51		 push	 ecx
  004f1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN73@draw_radar:
  004fd	6a 50		 push	 80			; 00000050H
  004ff	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00502	52		 push	 edx
  00503	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv281[ebp], 1116
  0050a	8b 4d 9c	 mov	 ecx, DWORD PTR tv288[ebp]
  0050d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00514	ff d2		 call	 edx
  00516	85 c0		 test	 eax, eax
  00518	0f 84 9e 00 00
	00		 je	 $LN23@draw_radar

; 1646 : 		{
; 1647 : 			if (selected_target)

  0051e	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00522	74 69		 je	 SHORT $LN27@draw_radar

; 1648 : 			{
; 1649 : //VJ 030423 TSD render mod
; 1650 : 				if (display_on_tsd)

  00524	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00528	74 2e		 je	 SHORT $LN26@draw_radar

; 1651 : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0052a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0052f	50		 push	 eax
  00530	51		 push	 ecx
  00531	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00536	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053b	51		 push	 ecx
  0053c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00549	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00550	52		 push	 edx
  00551	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1652 : 				else

  00556	eb 35		 jmp	 SHORT $LN27@draw_radar
$LN26@draw_radar:

; 1653 : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  00558	b8 04 00 00 00	 mov	 eax, 4
  0055d	6b c8 05	 imul	 ecx, eax, 5
  00560	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00566	52		 push	 edx
  00567	51		 push	 ecx
  00568	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0056d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00572	51		 push	 ecx
  00573	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057d	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00580	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  00587	51		 push	 ecx
  00588	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN27@draw_radar:

; 1654 : 			}
; 1655 : 
; 1656 : 			draw_2d_mono_sprite (large_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  0058d	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00590	50		 push	 eax
  00591	51		 push	 ecx
  00592	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00597	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059c	51		 push	 ecx
  0059d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a7	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005aa	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los@@3PAPBDA[ecx*4]
  005b1	52		 push	 edx
  005b2	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1657 : 		}
; 1658 : 		else

  005b7	e9 99 00 00 00	 jmp	 $LN24@draw_radar
$LN23@draw_radar:

; 1659 : 		{
; 1660 : 			if (selected_target)

  005bc	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  005c0	74 69		 je	 SHORT $LN30@draw_radar

; 1661 : 			{
; 1662 : //VJ 030423 TSD render mod
; 1663 : 				if (display_on_tsd)

  005c2	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  005c6	74 2e		 je	 SHORT $LN29@draw_radar

; 1664 : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  005c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005cd	50		 push	 eax
  005ce	51		 push	 ecx
  005cf	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  005d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d9	51		 push	 ecx
  005da	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e4	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005e7	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  005ee	52		 push	 edx
  005ef	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1665 : 				else

  005f4	eb 35		 jmp	 SHORT $LN30@draw_radar
$LN29@draw_radar:

; 1666 : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  005f6	b8 04 00 00 00	 mov	 eax, 4
  005fb	6b c8 05	 imul	 ecx, eax, 5
  005fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00604	52		 push	 edx
  00605	51		 push	 ecx
  00606	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	51		 push	 ecx
  00611	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  0061e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  00625	51		 push	 ecx
  00626	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN30@draw_radar:

; 1667 : 			}
; 1668 : 
; 1669 : 			draw_2d_mono_sprite (large_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0062b	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0062e	50		 push	 eax
  0062f	51		 push	 ecx
  00630	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00635	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063a	51		 push	 ecx
  0063b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00640	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00645	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00648	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  0064f	52		 push	 edx
  00650	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN24@draw_radar:

; 1670 : 		}
; 1671 : 
; 1672 : 		if (selected_target)

  00655	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00659	0f 84 81 00 00
	00		 je	 $LN31@draw_radar

; 1673 : 		{
; 1674 : //VJ 030423 TSD render mod
; 1675 : 			if (display_on_tsd)

  0065f	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00663	74 28		 je	 SHORT $LN32@draw_radar

; 1676 : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  00665	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0066a	50		 push	 eax
  0066b	51		 push	 ecx
  0066c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00671	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00676	51		 push	 ecx
  00677	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0067c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00681	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  00686	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1677 : 			else

  0068b	eb 2f		 jmp	 SHORT $LN33@draw_radar
$LN32@draw_radar:

; 1678 : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  0068d	b8 04 00 00 00	 mov	 eax, 4
  00692	6b c8 05	 imul	 ecx, eax, 5
  00695	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0069b	52		 push	 edx
  0069c	51		 push	 ecx
  0069d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a7	51		 push	 ecx
  006a8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b2	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  006b7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN33@draw_radar:

; 1679 : 
; 1680 : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  006bc	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  006bf	50		 push	 eax
  006c0	51		 push	 ecx
  006c1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cb	51		 push	 ecx
  006cc	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d6	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target@@3QBDB ; large_display_target_symbol_selected_target
  006db	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN31@draw_radar:

; 1681 : 		}
; 1682 : 	}
; 1683 : 	else

  006e0	e9 3f 02 00 00	 jmp	 $LN42@draw_radar
$LN21@draw_radar:

; 1684 : 	{
; 1685 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  006e5	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  006e9	74 0a		 je	 SHORT $LN74@draw_radar
  006eb	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  006ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f0	89 4d a0	 mov	 DWORD PTR tv360[ebp], ecx
  006f3	eb 1d		 jmp	 SHORT $LN75@draw_radar
$LN74@draw_radar:
  006f5	68 95 06 00 00	 push	 1685			; 00000695H
  006fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  006ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00705	52		 push	 edx
  00706	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0070b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv360[ebp], 0
$LN75@draw_radar:
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	85 c0		 test	 eax, eax
  00719	74 09		 je	 SHORT $LN76@draw_radar
  0071b	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv367[ebp], 80 ; 00000050H
  00722	eb 1d		 jmp	 SHORT $LN77@draw_radar
$LN76@draw_radar:
  00724	68 95 06 00 00	 push	 1685			; 00000695H
  00729	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0072e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00734	51		 push	 ecx
  00735	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0073a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv367[ebp], 0
$LN77@draw_radar:
  00741	6a 50		 push	 80			; 00000050H
  00743	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00746	52		 push	 edx
  00747	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv360[ebp], 1116
  0074e	8b 4d 9c	 mov	 ecx, DWORD PTR tv367[ebp]
  00751	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00758	ff d2		 call	 edx
  0075a	85 c0		 test	 eax, eax
  0075c	0f 84 9e 00 00
	00		 je	 $LN34@draw_radar

; 1686 : 		{
; 1687 : 			if (selected_target)

  00762	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00766	74 69		 je	 SHORT $LN38@draw_radar

; 1688 : 			{
; 1689 : //VJ 030423 TSD render mod
; 1690 : 				if (display_on_tsd)

  00768	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0076c	74 2e		 je	 SHORT $LN37@draw_radar

; 1691 : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0076e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00773	50		 push	 eax
  00774	51		 push	 ecx
  00775	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0077a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077f	51		 push	 ecx
  00780	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00785	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078a	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0078d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00794	52		 push	 edx
  00795	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1692 : 				else

  0079a	eb 35		 jmp	 SHORT $LN38@draw_radar
$LN37@draw_radar:

; 1693 : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0079c	b8 04 00 00 00	 mov	 eax, 4
  007a1	6b c8 05	 imul	 ecx, eax, 5
  007a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007aa	52		 push	 edx
  007ab	51		 push	 ecx
  007ac	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b6	51		 push	 ecx
  007b7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c1	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  007c4	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  007cb	51		 push	 ecx
  007cc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN38@draw_radar:

; 1694 : 			}
; 1695 : 
; 1696 : 			draw_2d_mono_sprite (small_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  007d1	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  007d4	50		 push	 eax
  007d5	51		 push	 ecx
  007d6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e0	51		 push	 ecx
  007e1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007eb	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  007ee	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los@@3PAPBDA[ecx*4]
  007f5	52		 push	 edx
  007f6	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1697 : 		}
; 1698 : 		else

  007fb	e9 99 00 00 00	 jmp	 $LN35@draw_radar
$LN34@draw_radar:

; 1699 : 		{
; 1700 : 			if (selected_target)

  00800	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00804	74 69		 je	 SHORT $LN41@draw_radar

; 1701 : 			{
; 1702 : //VJ 030423 TSD render mod
; 1703 : 				if (display_on_tsd)

  00806	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0080a	74 2e		 je	 SHORT $LN40@draw_radar

; 1704 : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0080c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00811	50		 push	 eax
  00812	51		 push	 ecx
  00813	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00818	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081d	51		 push	 ecx
  0081e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00823	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00828	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0082b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  00832	52		 push	 edx
  00833	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1705 : 				else

  00838	eb 35		 jmp	 SHORT $LN41@draw_radar
$LN40@draw_radar:

; 1706 : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0083a	b8 04 00 00 00	 mov	 eax, 4
  0083f	6b c8 05	 imul	 ecx, eax, 5
  00842	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00848	52		 push	 edx
  00849	51		 push	 ecx
  0084a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0084f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00854	51		 push	 ecx
  00855	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0085a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085f	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00862	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  00869	51		 push	 ecx
  0086a	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_radar:

; 1707 : 			}
; 1708 : 
; 1709 : 			draw_2d_mono_sprite (small_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0086f	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00872	50		 push	 eax
  00873	51		 push	 ecx
  00874	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00879	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087e	51		 push	 ecx
  0087f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00884	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00889	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0088c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00893	52		 push	 edx
  00894	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN35@draw_radar:

; 1710 : 		}
; 1711 : 
; 1712 : 		if (selected_target)

  00899	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  0089d	0f 84 81 00 00
	00		 je	 $LN42@draw_radar

; 1713 : 		{
; 1714 : //VJ 030423 TSD render mod
; 1715 : 			if (display_on_tsd)

  008a3	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  008a7	74 28		 je	 SHORT $LN43@draw_radar

; 1716 : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  008a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008ae	50		 push	 eax
  008af	51		 push	 ecx
  008b0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ba	51		 push	 ecx
  008bb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c5	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008ca	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1717 : 			else

  008cf	eb 2f		 jmp	 SHORT $LN44@draw_radar
$LN43@draw_radar:

; 1718 : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  008d1	b8 04 00 00 00	 mov	 eax, 4
  008d6	6b c8 05	 imul	 ecx, eax, 5
  008d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008df	52		 push	 edx
  008e0	51		 push	 ecx
  008e1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008eb	51		 push	 ecx
  008ec	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008fb	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN44@draw_radar:

; 1719 : 
; 1720 : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  00900	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00903	50		 push	 eax
  00904	51		 push	 ecx
  00905	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0090a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090f	51		 push	 ecx
  00910	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00915	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091a	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target@@3QBDB ; small_display_target_symbol_selected_target
  0091f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN42@draw_radar:

; 1721 : 		}
; 1722 : 	}
; 1723 : }

  00924	5f		 pop	 edi
  00925	5e		 pop	 esi
  00926	5b		 pop	 ebx
  00927	8b e5		 mov	 esp, ebp
  00929	5d		 pop	 ebp
  0092a	c2 14 00	 ret	 20			; 00000014H
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ENDP ; draw_radar_target_symbol
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_field_of_regard_and_view_boxes@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_field_of_regard_and_view_boxes@@YGXXZ PROC	; draw_field_of_regard_and_view_boxes, COMDAT

; 1532 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1533 : 	float
; 1534 : 		x,
; 1535 : 		y;
; 1536 : 
; 1537 : 	draw_2d_line (-0.4800, -0.7650,  0.4800, -0.7650, MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	51		 push	 ecx
  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  00021	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00026	51		 push	 ecx
  00027	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	51		 push	 ecx
  00035	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	51		 push	 ecx
  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef5c28f
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1538 : 	draw_2d_line (-0.4800, -0.7650, -0.4800, -1.0000, MFD_COLOUR1);

  00055	b8 04 00 00 00	 mov	 eax, 4
  0005a	6b c8 00	 imul	 ecx, eax, 0
  0005d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00063	52		 push	 edx
  00064	51		 push	 ecx
  00065	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	51		 push	 ecx
  00073	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef5c28f
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	51		 push	 ecx
  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	51		 push	 ecx
  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef5c28f
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1539 : 	draw_2d_line ( 0.4800, -0.7650,  0.4800, -1.0000, MFD_COLOUR1);

  000a1	b8 04 00 00 00	 mov	 eax, 4
  000a6	6b c8 00	 imul	 ecx, eax, 0
  000a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000af	52		 push	 edx
  000b0	51		 push	 ecx
  000b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	51		 push	 ecx
  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	51		 push	 ecx
  000cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  000d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000da	51		 push	 ecx
  000db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  000e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1540 : 
; 1541 : 	x = eo_azimuth / eo_max_azimuth * 0.48;

  000ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  000f5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  000fd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00101	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fdeb851eb851eb8
  00109	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0010d	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1542 : 	y = (eo_elevation / eo_min_elevation * -0.15) - 0.850;

  00112	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  0011a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  00122	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00126	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfc3333333333333
  0012e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3feb333333333333
  00136	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0013a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 1543 : 
; 1544 : 	draw_2d_line (x - 0.0400, y - 0.0300, x + 0.0400, y - 0.0300, MFD_COLOUR1);

  0013f	b8 04 00 00 00	 mov	 eax, 4
  00144	6b c8 00	 imul	 ecx, eax, 0
  00147	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0014d	52		 push	 edx
  0014e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00153	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0015b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015f	51		 push	 ecx
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0016a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00172	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00176	51		 push	 ecx
  00177	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00181	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00189	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018d	51		 push	 ecx
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00198	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  001a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a4	51		 push	 ecx
  001a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001aa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1545 : 	draw_2d_line (x - 0.0400, y + 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  001af	b8 04 00 00 00	 mov	 eax, 4
  001b4	6b c8 00	 imul	 ecx, eax, 0
  001b7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001bd	52		 push	 edx
  001be	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  001c3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  001cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  001da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  001e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e6	51		 push	 ecx
  001e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ec	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  001f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  001f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fd	51		 push	 ecx
  001fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00203	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00208	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00210	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00214	51		 push	 ecx
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1546 : 	draw_2d_line (x - 0.0400, y - 0.0300, x - 0.0400, y + 0.0300, MFD_COLOUR1);

  0021f	b8 04 00 00 00	 mov	 eax, 4
  00224	6b c8 00	 imul	 ecx, eax, 0
  00227	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0022d	52		 push	 edx
  0022e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00233	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0023b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00245	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0024a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00252	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00256	51		 push	 ecx
  00257	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00261	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00269	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026d	51		 push	 ecx
  0026e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00273	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00278	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00280	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00284	51		 push	 ecx
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1547 : 	draw_2d_line (x + 0.0400, y - 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  0028f	b8 04 00 00 00	 mov	 eax, 4
  00294	6b c8 00	 imul	 ecx, eax, 0
  00297	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0029d	52		 push	 edx
  0029e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  002a3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  002ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002af	51		 push	 ecx
  002b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  002ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  002c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c6	51		 push	 ecx
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  002d1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  002d9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002dd	51		 push	 ecx
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  002e8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  002f0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f4	51		 push	 ecx
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1548 : }

  002ff	5f		 pop	 edi
  00300	5e		 pop	 esi
  00301	5b		 pop	 ebx
  00302	8b e5		 mov	 esp, ebp
  00304	5d		 pop	 ebp
  00305	c3		 ret	 0
?draw_field_of_regard_and_view_boxes@@YGXXZ ENDP	; draw_field_of_regard_and_view_boxes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?display_navigation_info@@YGXXZ
_TEXT	SEGMENT
tv399 = -260						; size = 8
tv400 = -252						; size = 8
tv367 = -252						; size = 4
tv347 = -252						; size = 4
tv283 = -252						; size = 4
tv254 = -252						; size = 4
tv218 = -252						; size = 4
tv78 = -252						; size = 4
tv708 = -248						; size = 4
tv647 = -248						; size = 4
tv359 = -248						; size = 4
tv339 = -248						; size = 4
tv275 = -248						; size = 4
tv246 = -248						; size = 4
tv210 = -248						; size = 4
tv70 = -248						; size = 4
_fvalue$1 = -180					; size = 4
_x_adjust$2 = -176					; size = 4
_sec$3 = -172						; size = 4
_sx$4 = -168						; size = 4
_sz$5 = -164						; size = 4
_seconds$6 = -160					; size = 4
_minutes$7 = -156					; size = 4
_hours$8 = -152						; size = 4
_time_to_go$9 = -148					; size = 4
_f$10 = -144						; size = 4
_i$11 = -140						; size = 4
_waypoint_range$12 = -136				; size = 4
_x_adjust$13 = -132					; size = 4
_waypoint_position$14 = -128				; size = 12
_buffer$ = -116						; size = 80
_gunship_position$ = -36				; size = 4
_wp$ = -32						; size = 4
_mid_y$ = -28						; size = 4
_top$ = -24						; size = 4
_bottom$ = -20						; size = 4
_upper_left$ = -16					; size = 4
_upper_right$ = -12					; size = 4
_right_edge$ = -8					; size = 4
_left_edge$ = -4					; size = 4
?display_navigation_info@@YGXXZ PROC			; display_navigation_info, COMDAT

; 1384 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1385 : 	const float
; 1386 : 		left_edge = -0.6,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _left_edge$[ebp], xmm0

; 1387 : 		right_edge = 0.6,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _right_edge$[ebp], xmm0

; 1388 : 		upper_right = -0.2,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _upper_right$[ebp], xmm0

; 1389 : 		upper_left = 0.2,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0003b	f3 0f 11 45 f0	 movss	 DWORD PTR _upper_left$[ebp], xmm0

; 1390 : 		bottom = -0.98,

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00048	f3 0f 11 45 ec	 movss	 DWORD PTR _bottom$[ebp], xmm0

; 1391 : 		top = -0.78,

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00055	f3 0f 11 45 e8	 movss	 DWORD PTR _top$[ebp], xmm0

; 1392 : 		mid_y = -0.88;

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00062	f3 0f 11 45 e4	 movss	 DWORD PTR _mid_y$[ebp], xmm0

; 1393 : 
; 1394 : 	entity
; 1395 : 		*wp;
; 1396 : 
; 1397 : 	vec3d
; 1398 : 		*gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00067	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0006e	74 0f		 je	 SHORT $LN12@display_na
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00075	8b 08		 mov	 ecx, DWORD PTR [eax]
  00077	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  0007d	eb 24		 jmp	 SHORT $LN13@display_na
$LN12@display_na:
  0007f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00085	83 c2 0e	 add	 edx, 14			; 0000000eH
  00088	52		 push	 edx
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00099	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN13@display_na:
  000a3	b9 01 00 00 00	 mov	 ecx, 1
  000a8	85 c9		 test	 ecx, ecx
  000aa	74 0c		 je	 SHORT $LN14@display_na
  000ac	c7 85 04 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv78[ebp], 8
  000b6	eb 24		 jmp	 SHORT $LN15@display_na
$LN14@display_na:
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  000be	83 c2 0e	 add	 edx, 14			; 0000000eH
  000c1	52		 push	 edx
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d2	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN15@display_na:
  000dc	6a 08		 push	 8
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e4	51		 push	 ecx
  000e5	6b 95 08 ff ff
	ff 60		 imul	 edx, DWORD PTR tv70[ebp], 96
  000ec	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  000f2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000f9	ff d1		 call	 ecx
  000fb	89 45 dc	 mov	 DWORD PTR _gunship_position$[ebp], eax

; 1399 : 
; 1400 : 	char
; 1401 : 		buffer[80];
; 1402 : 
; 1403 : 
; 1404 : 	// draw surrounding box
; 1405 : 	draw_2d_line(left_edge, mid_y, right_edge, mid_y, MFD_COLOUR1);

  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	6b c8 00	 imul	 ecx, eax, 0
  00106	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0010c	52		 push	 edx
  0010d	51		 push	 ecx
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	51		 push	 ecx
  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	51		 push	 ecx
  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00140	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00145	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1406 : 	draw_2d_line(left_edge, bottom, right_edge, bottom, MFD_COLOUR1);

  0014a	b8 04 00 00 00	 mov	 eax, 4
  0014f	6b c8 00	 imul	 ecx, eax, 0
  00152	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00158	52		 push	 edx
  00159	51		 push	 ecx
  0015a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00162	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00167	51		 push	 ecx
  00168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	51		 push	 ecx
  00176	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	51		 push	 ecx
  00184	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0018c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00191	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1407 : 	draw_2d_line(left_edge, mid_y, left_edge, bottom, MFD_COLOUR1);

  00196	b8 04 00 00 00	 mov	 eax, 4
  0019b	6b c8 00	 imul	 ecx, eax, 0
  0019e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001a4	52		 push	 edx
  001a5	51		 push	 ecx
  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	51		 push	 ecx
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  001bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c1	51		 push	 ecx
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1408 : 	draw_2d_line(right_edge, mid_y, right_edge, bottom, MFD_COLOUR1);

  001e2	b8 04 00 00 00	 mov	 eax, 4
  001e7	6b c8 00	 imul	 ecx, eax, 0
  001ea	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f0	52		 push	 edx
  001f1	51		 push	 ecx
  001f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00224	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00229	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1409 : 
; 1410 : 	draw_2d_line(left_edge, top, upper_right, top, MFD_COLOUR1);

  0022e	b8 04 00 00 00	 mov	 eax, 4
  00233	6b c8 00	 imul	 ecx, eax, 0
  00236	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0023c	52		 push	 edx
  0023d	51		 push	 ecx
  0023e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00246	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024b	51		 push	 ecx
  0024c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00254	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00259	51		 push	 ecx
  0025a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	51		 push	 ecx
  00268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00275	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1411 : 	draw_2d_line(left_edge, top, left_edge, mid_y, MFD_COLOUR1);

  0027a	b8 04 00 00 00	 mov	 eax, 4
  0027f	6b c8 00	 imul	 ecx, eax, 0
  00282	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00288	52		 push	 edx
  00289	51		 push	 ecx
  0028a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	51		 push	 ecx
  00298	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a5	51		 push	 ecx
  002a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  002ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b3	51		 push	 ecx
  002b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1412 : 	draw_2d_line(upper_right, top, upper_right, mid_y, MFD_COLOUR1);

  002c6	b8 04 00 00 00	 mov	 eax, 4
  002cb	6b c8 00	 imul	 ecx, eax, 0
  002ce	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d4	52		 push	 edx
  002d5	51		 push	 ecx
  002d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	51		 push	 ecx
  002e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  002ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f1	51		 push	 ecx
  002f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  002fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ff	51		 push	 ecx
  00300	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00308	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1413 : 
; 1414 : 	draw_2d_line(right_edge, top, upper_left, top, MFD_COLOUR1);

  00312	b8 04 00 00 00	 mov	 eax, 4
  00317	6b c8 00	 imul	 ecx, eax, 0
  0031a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00320	52		 push	 edx
  00321	51		 push	 ecx
  00322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  0032a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032f	51		 push	 ecx
  00330	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00338	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033d	51		 push	 ecx
  0033e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034b	51		 push	 ecx
  0034c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1415 : 	draw_2d_line(right_edge, top, right_edge, mid_y, MFD_COLOUR1);

  0035e	b8 04 00 00 00	 mov	 eax, 4
  00363	6b c8 00	 imul	 ecx, eax, 0
  00366	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036c	52		 push	 edx
  0036d	51		 push	 ecx
  0036e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037b	51		 push	 ecx
  0037c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00389	51		 push	 ecx
  0038a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00392	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00397	51		 push	 ecx
  00398	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1416 : 	draw_2d_line(upper_left, top, upper_left, mid_y, MFD_COLOUR1);

  003aa	b8 04 00 00 00	 mov	 eax, 4
  003af	6b c8 00	 imul	 ecx, eax, 0
  003b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003b8	52		 push	 edx
  003b9	51		 push	 ecx
  003ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  003c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c7	51		 push	 ecx
  003c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	51		 push	 ecx
  003d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  003de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e3	51		 push	 ecx
  003e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  003ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1417 : 
; 1418 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  003f6	6a 04		 push	 4
  003f8	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1419 : 
; 1420 : 	wp = get_local_entity_current_waypoint (get_gunship_entity ());

  003fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00402	50		 push	 eax
  00403	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00408	89 45 e0	 mov	 DWORD PTR _wp$[ebp], eax

; 1421 : 	if (wp)

  0040b	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0040f	0f 84 46 04 00
	00		 je	 $LN2@display_na

; 1422 : 	{
; 1423 : 		vec3d
; 1424 : 			waypoint_position;
; 1425 : 
; 1426 : 		float
; 1427 : 			x_adjust,
; 1428 : 			waypoint_range;
; 1429 : 
; 1430 : 		get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  00415	8d 45 80	 lea	 eax, DWORD PTR _waypoint_position$14[ebp]
  00418	50		 push	 eax
  00419	8b 4d e0	 mov	 ecx, DWORD PTR _wp$[ebp]
  0041c	51		 push	 ecx
  0041d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00423	52		 push	 edx
  00424	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 1431 : 
; 1432 : 		//
; 1433 : 		// waypoint id & range
; 1434 : 		//
; 1435 : 
; 1436 : 		waypoint_range = get_2d_range (gunship_position, &waypoint_position);

  00429	8d 45 80	 lea	 eax, DWORD PTR _waypoint_position$14[ebp]
  0042c	50		 push	 eax
  0042d	8b 4d dc	 mov	 ecx, DWORD PTR _gunship_position$[ebp]
  00430	51		 push	 ecx
  00431	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  00436	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR _waypoint_range$12[ebp]

; 1437 : 		if (!viper_damage.navigation_computer)

  0043c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00441	c1 e8 05	 shr	 eax, 5
  00444	83 e0 01	 and	 eax, 1
  00447	0f 85 95 02 00
	00		 jne	 $LN3@display_na

; 1438 : 		{
; 1439 : 			if (waypoint_range < 1000.0)

  0044d	f3 0f 5a 85 78
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$12[ebp]
  00455	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  0045d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00461	0f 86 b1 00 00
	00		 jbe	 $LN5@display_na

; 1440 : 				sprintf (buffer, "%c:%dm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  00467	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0046b	74 0d		 je	 SHORT $LN16@display_na
  0046d	8b 45 e0	 mov	 eax, DWORD PTR _wp$[ebp]
  00470	8b 08		 mov	 ecx, DWORD PTR [eax]
  00472	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv210[ebp], ecx
  00478	eb 24		 jmp	 SHORT $LN17@display_na
$LN16@display_na:
  0047a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00480	83 c2 38	 add	 edx, 56			; 00000038H
  00483	52		 push	 edx
  00484	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00489	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00494	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv210[ebp], 0
$LN17@display_na:
  0049e	b9 01 00 00 00	 mov	 ecx, 1
  004a3	85 c9		 test	 ecx, ecx
  004a5	74 0c		 je	 SHORT $LN18@display_na
  004a7	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
  004b1	eb 24		 jmp	 SHORT $LN19@display_na
$LN18@display_na:
  004b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  004b9	83 c2 38	 add	 edx, 56			; 00000038H
  004bc	52		 push	 edx
  004bd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  004c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  004c7	50		 push	 eax
  004c8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004cd	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
$LN19@display_na:
  004d7	f3 0f 2c 8d 78
	ff ff ff	 cvttss2si ecx, DWORD PTR _waypoint_range$12[ebp]
  004df	51		 push	 ecx
  004e0	6a 00		 push	 0
  004e2	8b 55 e0	 mov	 edx, DWORD PTR _wp$[ebp]
  004e5	52		 push	 edx
  004e6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv218[ebp]
  004ec	c1 e0 02	 shl	 eax, 2
  004ef	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv210[ebp]
  004f5	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  004fc	ff d2		 call	 edx
  004fe	0f b6 c0	 movzx	 eax, al
  00501	50		 push	 eax
  00502	68 00 00 00 00	 push	 OFFSET ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
  00507	8d 4d 8c	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0050a	51		 push	 ecx
  0050b	e8 00 00 00 00	 call	 _sprintf
  00510	83 c4 10	 add	 esp, 16			; 00000010H
  00513	e9 c8 01 00 00	 jmp	 $LN8@display_na
$LN5@display_na:

; 1441 : 			else if (waypoint_range < 100000.0)

  00518	f3 0f 5a 85 78
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$12[ebp]
  00520	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  00528	66 0f 2f c8	 comisd	 xmm1, xmm0
  0052c	0f 86 f6 00 00
	00		 jbe	 $LN7@display_na

; 1442 : 			{
; 1443 : 				int
; 1444 : 					i;
; 1445 : 
; 1446 : 				float
; 1447 : 					f;
; 1448 : 
; 1449 : 				//
; 1450 : 				// this is required to prevent rounding errors around the 100Km mark
; 1451 : 				//
; 1452 : 
; 1453 : 				i = (int) waypoint_range * (1.0 / 100.0);

  00532	f3 0f 2c 85 78
	ff ff ff	 cvttss2si eax, DWORD PTR _waypoint_range$12[ebp]
  0053a	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  0053e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00546	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0054a	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _i$11[ebp], ecx

; 1454 : 				f = (float) i * (1.0 / 10.0);

  00550	f3 0f 2a 85 74
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _i$11[ebp]
  00558	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0055c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00564	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00568	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _f$10[ebp], xmm0

; 1455 : 
; 1456 : 				sprintf (buffer, "%c:%.1fKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  00570	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00574	74 0d		 je	 SHORT $LN20@display_na
  00576	8b 45 e0	 mov	 eax, DWORD PTR _wp$[ebp]
  00579	8b 08		 mov	 ecx, DWORD PTR [eax]
  0057b	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
  00581	eb 24		 jmp	 SHORT $LN21@display_na
$LN20@display_na:
  00583	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00589	83 c2 48	 add	 edx, 72			; 00000048H
  0058c	52		 push	 edx
  0058d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00592	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00597	50		 push	 eax
  00598	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0059d	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv246[ebp], 0
$LN21@display_na:
  005a7	b9 01 00 00 00	 mov	 ecx, 1
  005ac	85 c9		 test	 ecx, ecx
  005ae	74 0c		 je	 SHORT $LN22@display_na
  005b0	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv254[ebp], 0
  005ba	eb 24		 jmp	 SHORT $LN23@display_na
$LN22@display_na:
  005bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  005c2	83 c2 48	 add	 edx, 72			; 00000048H
  005c5	52		 push	 edx
  005c6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  005cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  005d0	50		 push	 eax
  005d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005d6	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv254[ebp], 0
$LN23@display_na:
  005e0	f3 0f 5a 85 70
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _f$10[ebp]
  005e8	83 ec 08	 sub	 esp, 8
  005eb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005f0	6a 00		 push	 0
  005f2	8b 4d e0	 mov	 ecx, DWORD PTR _wp$[ebp]
  005f5	51		 push	 ecx
  005f6	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv254[ebp]
  005fc	c1 e2 02	 shl	 edx, 2
  005ff	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR tv246[ebp]
  00605	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  0060c	ff d1		 call	 ecx
  0060e	0f b6 d0	 movzx	 edx, al
  00611	52		 push	 edx
  00612	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
  00617	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  0061a	50		 push	 eax
  0061b	e8 00 00 00 00	 call	 _sprintf
  00620	83 c4 14	 add	 esp, 20			; 00000014H

; 1457 : 			}
; 1458 : 			else

  00623	e9 b8 00 00 00	 jmp	 $LN8@display_na
$LN7@display_na:

; 1459 : 				sprintf (buffer, "%c:%dKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  00628	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0062c	74 0d		 je	 SHORT $LN24@display_na
  0062e	8b 45 e0	 mov	 eax, DWORD PTR _wp$[ebp]
  00631	8b 08		 mov	 ecx, DWORD PTR [eax]
  00633	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv275[ebp], ecx
  00639	eb 24		 jmp	 SHORT $LN25@display_na
$LN24@display_na:
  0063b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00641	83 c2 4b	 add	 edx, 75			; 0000004bH
  00644	52		 push	 edx
  00645	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0064a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0064f	50		 push	 eax
  00650	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00655	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv275[ebp], 0
$LN25@display_na:
  0065f	b9 01 00 00 00	 mov	 ecx, 1
  00664	85 c9		 test	 ecx, ecx
  00666	74 0c		 je	 SHORT $LN26@display_na
  00668	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv283[ebp], 0
  00672	eb 24		 jmp	 SHORT $LN27@display_na
$LN26@display_na:
  00674	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  0067a	83 c2 4b	 add	 edx, 75			; 0000004bH
  0067d	52		 push	 edx
  0067e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00683	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00688	50		 push	 eax
  00689	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0068e	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv283[ebp], 0
$LN27@display_na:
  00698	f3 0f 5a 85 78
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$12[ebp]
  006a0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  006a8	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  006ac	51		 push	 ecx
  006ad	6a 00		 push	 0
  006af	8b 55 e0	 mov	 edx, DWORD PTR _wp$[ebp]
  006b2	52		 push	 edx
  006b3	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv283[ebp]
  006b9	c1 e0 02	 shl	 eax, 2
  006bc	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv275[ebp]
  006c2	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  006c9	ff d2		 call	 edx
  006cb	0f b6 c0	 movzx	 eax, al
  006ce	50		 push	 eax
  006cf	68 00 00 00 00	 push	 OFFSET ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
  006d4	8d 4d 8c	 lea	 ecx, DWORD PTR _buffer$[ebp]
  006d7	51		 push	 ecx
  006d8	e8 00 00 00 00	 call	 _sprintf
  006dd	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@display_na:

; 1460 : 		}
; 1461 : 		else

  006e0	eb 11		 jmp	 SHORT $LN4@display_na
$LN3@display_na:

; 1462 : 			sprintf (buffer, "-:--.-");

  006e2	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  006e7	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  006ea	50		 push	 eax
  006eb	e8 00 00 00 00	 call	 _sprintf
  006f0	83 c4 08	 add	 esp, 8
$LN4@display_na:

; 1463 : 
; 1464 : 		set_2d_mono_font_position (left_edge + 0.1, mid_y);

  006f3	51		 push	 ecx
  006f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  006fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00701	51		 push	 ecx
  00702	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0070a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1465 : 		set_mono_font_rel_position (1.0, 3.0);

  00714	51		 push	 ecx
  00715	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  0071d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00722	51		 push	 ecx
  00723	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0072b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00730	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1466 : 		print_mono_font_string (buffer);

  00735	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00738	50		 push	 eax
  00739	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1467 : 
; 1468 : 		//
; 1469 : 		// time to go
; 1470 : 		//
; 1471 : 
; 1472 : 		if ((current_flight_dynamics->velocity_z.value > 0.1) && (!viper_damage.navigation_computer))

  0073e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00743	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  0074b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  00753	0f 86 80 00 00
	00		 jbe	 $LN9@display_na
  00759	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0075e	c1 e8 05	 shr	 eax, 5
  00761	83 e0 01	 and	 eax, 1
  00764	75 73		 jne	 SHORT $LN9@display_na

; 1473 : 		{
; 1474 : 			float
; 1475 : 				time_to_go,
; 1476 : 				hours,
; 1477 : 				minutes,
; 1478 : 				seconds;
; 1479 : 
; 1480 : 			time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  00766	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0076b	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _waypoint_range$12[ebp]
  00773	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  0077b	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _time_to_go$9[ebp], xmm0

; 1481 : 			get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  00783	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _seconds$6[ebp]
  00789	50		 push	 eax
  0078a	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _minutes$7[ebp]
  00790	51		 push	 ecx
  00791	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _hours$8[ebp]
  00797	52		 push	 edx
  00798	51		 push	 ecx
  00799	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _time_to_go$9[ebp]
  007a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a6	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 1482 : 			sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  007ab	f3 0f 2c 85 60
	ff ff ff	 cvttss2si eax, DWORD PTR _seconds$6[ebp]
  007b3	50		 push	 eax
  007b4	f3 0f 2c 8d 64
	ff ff ff	 cvttss2si ecx, DWORD PTR _minutes$7[ebp]
  007bc	51		 push	 ecx
  007bd	f3 0f 2c 95 68
	ff ff ff	 cvttss2si edx, DWORD PTR _hours$8[ebp]
  007c5	52		 push	 edx
  007c6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  007cb	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  007ce	50		 push	 eax
  007cf	e8 00 00 00 00	 call	 _sprintf
  007d4	83 c4 14	 add	 esp, 20			; 00000014H

; 1483 : 		}
; 1484 : 		else

  007d7	eb 11		 jmp	 SHORT $LN10@display_na
$LN9@display_na:

; 1485 : 			strcpy (buffer, "--:--:--");

  007d9	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  007de	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  007e1	50		 push	 eax
  007e2	e8 00 00 00 00	 call	 _strcpy
  007e7	83 c4 08	 add	 esp, 8
$LN10@display_na:

; 1486 : 
; 1487 : 		x_adjust = -get_mono_font_string_width(buffer);

  007ea	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  007ed	50		 push	 eax
  007ee	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  007f3	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR tv647[ebp]
  007f9	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR tv647[ebp]
  00801	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00808	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$13[ebp], xmm0

; 1488 : 		set_2d_mono_font_position (right_edge - 0.1, mid_y);

  00810	51		 push	 ecx
  00811	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	51		 push	 ecx
  0081f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1489 : 		set_mono_font_rel_position (x_adjust, 3.0);

  00831	51		 push	 ecx
  00832	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  0083a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083f	51		 push	 ecx
  00840	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$13[ebp]
  00848	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1490 : 		print_mono_font_string (buffer);

  00852	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00855	50		 push	 eax
  00856	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_na:

; 1491 : 	}
; 1492 : 
; 1493 : 	// sector:
; 1494 : 	{
; 1495 : 		int sz, sx;
; 1496 : 		entity* sec = get_local_sector_entity(gunship_position);

  0085b	8b 45 dc	 mov	 eax, DWORD PTR _gunship_position$[ebp]
  0085e	50		 push	 eax
  0085f	e8 00 00 00 00	 call	 ?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z ; get_local_sector_entity
  00864	89 85 54 ff ff
	ff		 mov	 DWORD PTR _sec$3[ebp], eax

; 1497 : 
; 1498 : 		sx = get_local_entity_int_value(sec, INT_TYPE_X_SECTOR);

  0086a	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _sec$3[ebp], 0
  00871	74 10		 je	 SHORT $LN28@display_na
  00873	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _sec$3[ebp]
  00879	8b 08		 mov	 ecx, DWORD PTR [eax]
  0087b	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv339[ebp], ecx
  00881	eb 24		 jmp	 SHORT $LN29@display_na
$LN28@display_na:
  00883	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00889	83 c2 72	 add	 edx, 114		; 00000072H
  0088c	52		 push	 edx
  0088d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00892	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00897	50		 push	 eax
  00898	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0089d	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv339[ebp], 0
$LN29@display_na:
  008a7	b9 01 00 00 00	 mov	 ecx, 1
  008ac	85 c9		 test	 ecx, ecx
  008ae	74 0c		 je	 SHORT $LN30@display_na
  008b0	c7 85 04 ff ff
	ff 15 01 00 00	 mov	 DWORD PTR tv347[ebp], 277 ; 00000115H
  008ba	eb 24		 jmp	 SHORT $LN31@display_na
$LN30@display_na:
  008bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  008c2	83 c2 72	 add	 edx, 114		; 00000072H
  008c5	52		 push	 edx
  008c6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  008cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008d0	50		 push	 eax
  008d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008d6	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv347[ebp], 0
$LN31@display_na:
  008e0	68 15 01 00 00	 push	 277			; 00000115H
  008e5	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _sec$3[ebp]
  008eb	51		 push	 ecx
  008ec	69 95 08 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv339[ebp], 1116
  008f6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv347[ebp]
  008fc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00903	ff d1		 call	 ecx
  00905	89 85 58 ff ff
	ff		 mov	 DWORD PTR _sx$4[ebp], eax

; 1499 : 		sz = get_local_entity_int_value(sec, INT_TYPE_Z_SECTOR);

  0090b	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _sec$3[ebp], 0
  00912	74 10		 je	 SHORT $LN32@display_na
  00914	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _sec$3[ebp]
  0091a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0091c	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv359[ebp], ecx
  00922	eb 24		 jmp	 SHORT $LN33@display_na
$LN32@display_na:
  00924	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  0092a	83 c2 73	 add	 edx, 115		; 00000073H
  0092d	52		 push	 edx
  0092e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00933	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00938	50		 push	 eax
  00939	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0093e	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv359[ebp], 0
$LN33@display_na:
  00948	b9 01 00 00 00	 mov	 ecx, 1
  0094d	85 c9		 test	 ecx, ecx
  0094f	74 0c		 je	 SHORT $LN34@display_na
  00951	c7 85 04 ff ff
	ff 16 01 00 00	 mov	 DWORD PTR tv367[ebp], 278 ; 00000116H
  0095b	eb 24		 jmp	 SHORT $LN35@display_na
$LN34@display_na:
  0095d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00963	83 c2 73	 add	 edx, 115		; 00000073H
  00966	52		 push	 edx
  00967	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0096c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00971	50		 push	 eax
  00972	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00977	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv367[ebp], 0
$LN35@display_na:
  00981	68 16 01 00 00	 push	 278			; 00000116H
  00986	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _sec$3[ebp]
  0098c	51		 push	 ecx
  0098d	69 95 08 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv359[ebp], 1116
  00997	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv367[ebp]
  0099d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  009a4	ff d1		 call	 ecx
  009a6	89 85 5c ff ff
	ff		 mov	 DWORD PTR _sz$5[ebp], eax

; 1500 : 
; 1501 : 		sprintf(buffer, "%d,%d", sx, sz);

  009ac	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _sz$5[ebp]
  009b2	50		 push	 eax
  009b3	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _sx$4[ebp]
  009b9	51		 push	 ecx
  009ba	68 00 00 00 00	 push	 OFFSET ??_C@_05KABNCBHK@?$CFd?0?$CFd@
  009bf	8d 55 8c	 lea	 edx, DWORD PTR _buffer$[ebp]
  009c2	52		 push	 edx
  009c3	e8 00 00 00 00	 call	 _sprintf
  009c8	83 c4 10	 add	 esp, 16			; 00000010H

; 1502 : 		set_2d_mono_font_position (left_edge, top);

  009cb	51		 push	 ecx
  009cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  009d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d9	51		 push	 ecx
  009da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  009e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1503 : 		set_mono_font_rel_position (4.0, 3.0);

  009ec	51		 push	 ecx
  009ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  009f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fa	51		 push	 ecx
  009fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  00a03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a08	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1504 : 		print_mono_font_string (buffer);

  00a0d	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00a10	50		 push	 eax
  00a11	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1505 : 	}
; 1506 : 
; 1507 : 	// fuel
; 1508 : 	{
; 1509 : 		float x_adjust;
; 1510 : 		float fvalue = bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 9999.0);

  00a16	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a1b	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  00a23	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00a2b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a2f	0f 57 c9	 xorps	 xmm1, xmm1
  00a32	66 0f 2f c8	 comisd	 xmm1, xmm0
  00a36	76 0d		 jbe	 SHORT $LN38@display_na
  00a38	0f 57 c0	 xorps	 xmm0, xmm0
  00a3b	f2 0f 11 85 04
	ff ff ff	 movsd	 QWORD PTR tv400[ebp], xmm0
  00a43	eb 68		 jmp	 SHORT $LN39@display_na
$LN38@display_na:
  00a45	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a4b	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  00a53	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00a5b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a5f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40c3878000000000
  00a67	76 12		 jbe	 SHORT $LN36@display_na
  00a69	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3878000000000
  00a71	f2 0f 11 85 fc
	fe ff ff	 movsd	 QWORD PTR tv399[ebp], xmm0
  00a79	eb 22		 jmp	 SHORT $LN37@display_na
$LN36@display_na:
  00a7b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a81	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  00a89	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00a91	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a95	f2 0f 11 85 fc
	fe ff ff	 movsd	 QWORD PTR tv399[ebp], xmm0
$LN37@display_na:
  00a9d	f2 0f 10 85 fc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv399[ebp]
  00aa5	f2 0f 11 85 04
	ff ff ff	 movsd	 QWORD PTR tv400[ebp], xmm0
$LN39@display_na:
  00aad	f2 0f 5a 85 04
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv400[ebp]
  00ab5	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _fvalue$1[ebp], xmm0

; 1511 : 
; 1512 : 		sprintf(buffer, "%d lb", (int)fvalue);

  00abd	f3 0f 2c 85 4c
	ff ff ff	 cvttss2si eax, DWORD PTR _fvalue$1[ebp]
  00ac5	50		 push	 eax
  00ac6	68 00 00 00 00	 push	 OFFSET ??_C@_05MDNKIPAL@?$CFd?5lb@
  00acb	8d 4d 8c	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00ace	51		 push	 ecx
  00acf	e8 00 00 00 00	 call	 _sprintf
  00ad4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1513 : 		x_adjust = -get_mono_font_string_width(buffer) - 2.0;

  00ad7	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00ada	50		 push	 eax
  00adb	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ae0	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR tv708[ebp]
  00ae6	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR tv708[ebp]
  00aee	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00af5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00af9	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  00b01	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b05	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 1514 : 
; 1515 : 		set_2d_mono_font_position (right_edge, top);

  00b0d	51		 push	 ecx
  00b0e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00b16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1b	51		 push	 ecx
  00b1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00b24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b29	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1516 : 		set_mono_font_rel_position (x_adjust, 3.0);

  00b2e	51		 push	 ecx
  00b2f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00b37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3c	51		 push	 ecx
  00b3d	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  00b45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1517 : 		print_mono_font_string (buffer);

  00b4f	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00b52	50		 push	 eax
  00b53	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1518 : 	}
; 1519 : }

  00b58	5f		 pop	 edi
  00b59	5e		 pop	 esi
  00b5a	5b		 pop	 ebx
  00b5b	8b e5		 mov	 esp, ebp
  00b5d	5d		 pop	 ebp
  00b5e	c3		 ret	 0
?display_navigation_info@@YGXXZ ENDP			; display_navigation_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_torque_scale@@YGXXZ
_TEXT	SEGMENT
tv355 = -160						; size = 4
_v2$ = -92						; size = 4
_v1$ = -88						; size = 4
_u2$ = -84						; size = 4
_u1$ = -80						; size = 4
_buffer$ = -76						; size = 8
_y_adjust$ = -68					; size = 4
_x_adjust$ = -64					; size = 4
_y_torque$ = -60					; size = 4
_torque$ = -56						; size = 4
_tick_right$ = -52					; size = 4
_tick_left$ = -48					; size = 4
_scale_right$ = -44					; size = 4
_scale_left$ = -40					; size = 4
_scale_centre$ = -36					; size = 4
_scale_top$ = -32					; size = 4
_scale_50_torque$ = -28					; size = 4
_scale_100_torque$ = -24				; size = 4
_scale_height$ = -20					; size = 4
_box_bottom$ = -16					; size = 4
_box_top$ = -12						; size = 4
_box_end$ = -8						; size = 4
_box_start$ = -4					; size = 4
?draw_torque_scale@@YGXXZ PROC				; draw_torque_scale, COMDAT

; 1316 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1317 : 	const float
; 1318 : 		box_start = -0.94,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 1319 : 		box_end = box_start + 0.2,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 1320 : 		box_top = -0.88,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 1321 : 		box_bottom = box_top - 0.1,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  0003b	f3 0f 11 45 f0	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 1322 : 		scale_height = 0.5,

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00048	f3 0f 11 45 ec	 movss	 DWORD PTR _scale_height$[ebp], xmm0

; 1323 : 		scale_100_torque = box_top + scale_height * 100.0/120.0,

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  00055	f3 0f 11 45 e8	 movss	 DWORD PTR _scale_100_torque$[ebp], xmm0

; 1324 : 		scale_50_torque = box_top + scale_height * 50.0 / 120.0,

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2bf259
  00062	f3 0f 11 45 e4	 movss	 DWORD PTR _scale_50_torque$[ebp], xmm0

; 1325 : 		scale_top = box_top + scale_height,

  00067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  0006f	f3 0f 11 45 e0	 movss	 DWORD PTR _scale_top$[ebp], xmm0

; 1326 : 		scale_centre = (box_end + box_start) / 2,

  00074	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf570a3e
  0007c	f3 0f 11 45 dc	 movss	 DWORD PTR _scale_centre$[ebp], xmm0

; 1327 : 		scale_left = box_start + 0.085,

  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5ae148
  00089	f3 0f 11 45 d8	 movss	 DWORD PTR _scale_left$[ebp], xmm0

; 1328 : 		scale_right = box_end - 0.085,

  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  00096	f3 0f 11 45 d4	 movss	 DWORD PTR _scale_right$[ebp], xmm0

; 1329 : 		tick_left = box_start + 0.07,

  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  000a3	f3 0f 11 45 d0	 movss	 DWORD PTR _tick_left$[ebp], xmm0

; 1330 : 		tick_right = box_end - 0.07;

  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  000b0	f3 0f 11 45 cc	 movss	 DWORD PTR _tick_right$[ebp], xmm0

; 1331 : 
; 1332 : 	float
; 1333 : 		torque = current_flight_dynamics->combined_engine_torque.value,

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ba	f3 0f 10 80 8c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9356]
  000c2	f3 0f 11 45 c8	 movss	 DWORD PTR _torque$[ebp], xmm0

; 1334 : 		y_torque = box_top + (torque / 120.0) * scale_height,

  000c7	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _torque$[ebp]
  000cc	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  000d4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000dc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfec28f5c0000000
  000e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e8	f3 0f 11 45 c4	 movss	 DWORD PTR _y_torque$[ebp], xmm0

; 1335 : 		x_adjust,
; 1336 : 		y_adjust;
; 1337 : 
; 1338 : 	char
; 1339 : 		buffer[8];
; 1340 : 
; 1341 : 	int
; 1342 : 		u1, u2, v1, v2;
; 1343 : 
; 1344 : 	// draw torque scale
; 1345 : 	get_2d_int_screen_coordinates (scale_left, box_top, &u1, &v1);

  000ed	8d 45 a8	 lea	 eax, DWORD PTR _v1$[ebp]
  000f0	50		 push	 eax
  000f1	8d 4d b0	 lea	 ecx, DWORD PTR _u1$[ebp]
  000f4	51		 push	 ecx
  000f5	51		 push	 ecx
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	51		 push	 ecx
  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5ae148
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1346 : 	if (torque > 100.0)

  00116	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _torque$[ebp]
  0011b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4059000000000000
  00123	76 74		 jbe	 SHORT $LN2@draw_torqu

; 1347 : 	{
; 1348 : 		get_2d_int_screen_coordinates (scale_right, scale_100_torque, &u2, &v2);

  00125	8d 45 a4	 lea	 eax, DWORD PTR _v2$[ebp]
  00128	50		 push	 eax
  00129	8d 4d ac	 lea	 ecx, DWORD PTR _u2$[ebp]
  0012c	51		 push	 ecx
  0012d	51		 push	 ecx
  0012e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	51		 push	 ecx
  0013c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  00144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00149	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1349 : 		draw_2d_hatched_area(scale_left, box_top, scale_right+ 0.02, y_torque, MFD_COLOUR_RED);

  0014e	b8 04 00 00 00	 mov	 eax, 4
  00153	6b c8 0f	 imul	 ecx, eax, 15
  00156	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0015c	52		 push	 edx
  0015d	51		 push	 ecx
  0015e	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y_torque$[ebp]
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4e147b
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	51		 push	 ecx
  00177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0017f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00184	51		 push	 ecx
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5ae148
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	e8 00 00 00 00	 call	 ?draw_2d_hatched_area@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_area

; 1350 : 	}
; 1351 : 	else

  00197	eb 26		 jmp	 SHORT $LN3@draw_torqu
$LN2@draw_torqu:

; 1352 : 		get_2d_int_screen_coordinates (scale_right, y_torque, &u2, &v2);

  00199	8d 45 a4	 lea	 eax, DWORD PTR _v2$[ebp]
  0019c	50		 push	 eax
  0019d	8d 4d ac	 lea	 ecx, DWORD PTR _u2$[ebp]
  001a0	51		 push	 ecx
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y_torque$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates
$LN3@draw_torqu:

; 1353 : 
; 1354 : 	set_block(u1, v2, u2, v1, MFD_COLOUR1);

  001bf	b8 04 00 00 00	 mov	 eax, 4
  001c4	6b c8 00	 imul	 ecx, eax, 0
  001c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001cd	52		 push	 edx
  001ce	8b 45 a8	 mov	 eax, DWORD PTR _v1$[ebp]
  001d1	50		 push	 eax
  001d2	8b 4d ac	 mov	 ecx, DWORD PTR _u2$[ebp]
  001d5	51		 push	 ecx
  001d6	8b 55 a4	 mov	 edx, DWORD PTR _v2$[ebp]
  001d9	52		 push	 edx
  001da	8b 45 b0	 mov	 eax, DWORD PTR _u1$[ebp]
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 1355 : 
; 1356 : 	draw_2d_line(scale_centre, y_torque, scale_centre, scale_top, MFD_COLOUR1);

  001e3	b8 04 00 00 00	 mov	 eax, 4
  001e8	6b c8 00	 imul	 ecx, eax, 0
  001eb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f1	52		 push	 edx
  001f2	51		 push	 ecx
  001f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  001fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00200	51		 push	 ecx
  00201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf570a3e
  00209	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020e	51		 push	 ecx
  0020f	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y_torque$[ebp]
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	51		 push	 ecx
  0021a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf570a3e
  00222	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00227	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1357 : 
; 1358 : 	draw_2d_line(tick_left, scale_50_torque, tick_right, scale_50_torque, MFD_COLOUR1);

  0022c	b8 04 00 00 00	 mov	 eax, 4
  00231	6b c8 00	 imul	 ecx, eax, 0
  00234	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0023a	52		 push	 edx
  0023b	51		 push	 ecx
  0023c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2bf259
  00244	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00249	51		 push	 ecx
  0024a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	51		 push	 ecx
  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2bf259
  00260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00265	51		 push	 ecx
  00266	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  0026e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00273	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1359 : 	draw_2d_line(tick_left, scale_100_torque, tick_right, scale_100_torque, MFD_COLOUR1);

  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 00	 imul	 ecx, eax, 0
  00280	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00286	52		 push	 edx
  00287	51		 push	 ecx
  00288	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  00290	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00295	51		 push	 ecx
  00296	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  0029e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a3	51		 push	 ecx
  002a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  002ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b1	51		 push	 ecx
  002b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  002ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1360 : 
; 1361 : 	// draw surrounding box
; 1362 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR1);

  002c4	b8 04 00 00 00	 mov	 eax, 4
  002c9	6b c8 00	 imul	 ecx, eax, 0
  002cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d2	52		 push	 edx
  002d3	51		 push	 ecx
  002d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	51		 push	 ecx
  002f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	51		 push	 ecx
  002fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00306	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1363 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR1);

  00310	b8 04 00 00 00	 mov	 eax, 4
  00315	6b c8 00	 imul	 ecx, eax, 0
  00318	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0031e	52		 push	 edx
  0031f	51		 push	 ecx
  00320	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032d	51		 push	 ecx
  0032e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	51		 push	 ecx
  0033c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00344	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00349	51		 push	 ecx
  0034a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00352	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00357	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1364 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR1);

  0035c	b8 04 00 00 00	 mov	 eax, 4
  00361	6b c8 00	 imul	 ecx, eax, 0
  00364	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036a	52		 push	 edx
  0036b	51		 push	 ecx
  0036c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00374	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00379	51		 push	 ecx
  0037a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00382	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00387	51		 push	 ecx
  00388	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00390	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00395	51		 push	 ecx
  00396	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  0039e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1365 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR1);

  003a8	b8 04 00 00 00	 mov	 eax, 4
  003ad	6b c8 00	 imul	 ecx, eax, 0
  003b0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003b6	52		 push	 edx
  003b7	51		 push	 ecx
  003b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  003c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c5	51		 push	 ecx
  003c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  003ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d3	51		 push	 ecx
  003d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  003dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e1	51		 push	 ecx
  003e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1366 : 
; 1367 : 	// print digital readout
; 1368 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  003f4	6a 04		 push	 4
  003f6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1369 : 	y_adjust = 3.0;

  003fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00403	f3 0f 11 45 bc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1370 : 
; 1371 : 	sprintf(buffer, "%3d", (int)(torque + 0.5));

  00408	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _torque$[ebp]
  0040d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00415	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00419	50		 push	 eax
  0041a	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  0041f	8d 4d b4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00422	51		 push	 ecx
  00423	e8 00 00 00 00	 call	 _sprintf
  00428	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1372 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  0042b	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  0042e	50		 push	 eax
  0042f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00434	d9 9d 60 ff ff
	ff		 fstp	 DWORD PTR tv355[ebp]
  0043a	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR tv355[ebp]
  00442	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00449	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00451	f3 0f 11 45 c0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 1373 : 
; 1374 : 	set_2d_mono_font_position (box_end, box_top);

  00456	51		 push	 ecx
  00457	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0045f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00464	51		 push	 ecx
  00465	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  0046d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00472	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1375 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  00477	51		 push	 ecx
  00478	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0047d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00482	51		 push	 ecx
  00483	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00488	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1376 : 	print_mono_font_string(buffer);

  00492	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00495	50		 push	 eax
  00496	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1377 : }

  0049b	5f		 pop	 edi
  0049c	5e		 pop	 esi
  0049d	5b		 pop	 ebx
  0049e	8b e5		 mov	 esp, ebp
  004a0	5d		 pop	 ebp
  004a1	c3		 ret	 0
?draw_torque_scale@@YGXXZ ENDP				; draw_torque_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_heading_scale@@YGXMH@Z
_TEXT	SEGMENT
tv186 = -192						; size = 4
tv468 = -188						; size = 4
tv287 = -188						; size = 4
tv285 = -188						; size = 4
tv178 = -188						; size = 4
_buffer$1 = -120					; size = 8
_x_adjust$2 = -112					; size = 4
_command_heading$3 = -108				; size = 4
_bearing$4 = -104					; size = 4
_dz$5 = -100						; size = 4
_dx$6 = -96						; size = 4
_waypoint_position$7 = -92				; size = 12
_gunship_position$8 = -80				; size = 4
_wp$9 = -76						; size = 4
_tick_type$ = -72					; size = 4
_int_heading_step_5$ = -68				; size = 4
_loop$ = -64						; size = 4
_mod_heading_step_5$ = -60				; size = 4
_heading_step_5$ = -56					; size = 4
_u$ = -52						; size = 4
_x$ = -48						; size = 4
_mfd_vp_x_max$ = -44					; size = 4
_mfd_vp_x_min$ = -40					; size = 4
_tick_datum_bottom$ = -36				; size = 4
_tick_datum_top$ = -32					; size = 4
_tick_bottom$ = -28					; size = 4
_tick_top$ = -24					; size = 4
_y_adjust$ = -20					; size = 4
_x_adjust_double$ = -16					; size = 4
_x_adjust_single$ = -12					; size = 4
_heading_tick_x_spacing$ = -8				; size = 4
_heading_width_ratio$ = -4				; size = 4
_heading$ = 8						; size = 4
_draw_command_heading$ = 12				; size = 4
?draw_heading_scale@@YGXMH@Z PROC			; draw_heading_scale, COMDAT

; 1152 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1153 : 	float
; 1154 : 		heading_width_ratio,
; 1155 : 		heading_tick_x_spacing,
; 1156 : 		x_adjust_single,
; 1157 : 		x_adjust_double,
; 1158 : 		y_adjust,
; 1159 : 		tick_top,
; 1160 : 		tick_bottom,
; 1161 : 		tick_datum_top,
; 1162 : 		tick_datum_bottom,
; 1163 : 		mfd_vp_x_min,
; 1164 : 		mfd_vp_x_max,
; 1165 : 		x,
; 1166 : 		u,
; 1167 : 		heading_step_5,
; 1168 : 		mod_heading_step_5;
; 1169 : 
; 1170 : 	int
; 1171 : 		loop,
; 1172 : 		int_heading_step_5,
; 1173 : 		tick_type;
; 1174 : 
; 1175 : 	//
; 1176 : 	// sort large and small mfd differences
; 1177 : 	//
; 1178 : 
; 1179 : 	set_mono_font_type (MONO_FONT_TYPE_5X9);

  0000c	6a 02		 push	 2
  0000e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1180 : 
; 1181 : 	x_adjust_single  			= -2.0;

  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0001b	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 1182 : 	x_adjust_double  			= -5.0;

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  00028	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 1183 : 	y_adjust			  		= -12.0;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00035	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1184 : 
; 1185 : 	tick_top                   = 0.85;

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00042	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_top$[ebp], xmm0

; 1186 : 	tick_bottom                = 0.85 - 0.075;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f466666
  0004f	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_bottom$[ebp], xmm0

; 1187 : 	tick_datum_top		  		= tick_top + 0.020;

  00054	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _tick_top$[ebp]
  00059	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00061	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00065	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 1188 : 	tick_datum_bottom	  		= tick_bottom - 0.020;

  0006a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _tick_bottom$[ebp]
  0006f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00077	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007b	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0

; 1189 : 
; 1190 : 	//
; 1191 : 	// adjust 2D environment for heading scale clipping
; 1192 : 	//
; 1193 : 
; 1194 : 	heading_width_ratio		= 0.65;

  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00088	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1195 : 	heading_tick_x_spacing = heading_width_ratio / 5;

  0008d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  00092	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40a00000
  0009a	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1196 : 	get_2d_float_screen_x_coordinate (0.0, &u);

  0009f	8d 45 cc	 lea	 eax, DWORD PTR _u$[ebp]
  000a2	50		 push	 eax
  000a3	51		 push	 ecx
  000a4	0f 57 c0	 xorps	 xmm0, xmm0
  000a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ac	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 1197 : 
; 1198 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * heading_width_ratio, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * heading_width_ratio, MFD_WINDOW_Y_MAX);

  000b1	51		 push	 ecx
  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  000c4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  000cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d0	51		 push	 ecx
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  000e9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  000f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f5	51		 push	 ecx
  000f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1199 : 	mfd_vp_x_min = u - (mfd_viewport_size * (heading_width_ratio * 0.5));

  00106	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  0010b	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00113	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  00118	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  00120	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00124	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00128	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0012c	f3 0f 11 45 d8	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 1200 : 	mfd_vp_x_max = u + (mfd_viewport_size * (heading_width_ratio * 0.5)) - 0.001;

  00131	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  00136	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0013e	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  00143	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  0014b	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0014f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00153	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0015b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015f	f3 0f 11 45 d4	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 1201 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  00164	51		 push	 ecx
  00165	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	51		 push	 ecx
  00173	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  00178	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017d	51		 push	 ecx
  0017e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1202 : 
; 1203 : 	//
; 1204 : 	// draw heading datum tick
; 1205 : 	//
; 1206 : 
; 1207 : 	draw_2d_line (0.0, tick_datum_top, 0.0, tick_datum_bottom, MFD_COLOUR1);

  001a1	b8 04 00 00 00	 mov	 eax, 4
  001a6	6b c8 00	 imul	 ecx, eax, 0
  001a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001af	52		 push	 edx
  001b0	51		 push	 ecx
  001b1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  001b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bb	51		 push	 ecx
  001bc	0f 57 c0	 xorps	 xmm0, xmm0
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	51		 push	 ecx
  001c5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	51		 push	 ecx
  001d0	0f 57 c0	 xorps	 xmm0, xmm0
  001d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1208 : 	draw_2d_line (-0.025, tick_datum_top, 0.025, tick_datum_top, MFD_COLOUR1);

  001dd	b8 04 00 00 00	 mov	 eax, 4
  001e2	6b c8 00	 imul	 ecx, eax, 0
  001e5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001eb	52		 push	 edx
  001ec	51		 push	 ecx
  001ed	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  001f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f7	51		 push	 ecx
  001f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ccccccd
  00200	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00205	51		 push	 ecx
  00206	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	51		 push	 ecx
  00211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00219	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1209 : 	draw_2d_line (-0.025, tick_datum_bottom, 0.025, tick_datum_bottom, MFD_COLOUR1);

  00223	b8 04 00 00 00	 mov	 eax, 4
  00228	6b c8 00	 imul	 ecx, eax, 0
  0022b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00231	52		 push	 edx
  00232	51		 push	 ecx
  00233	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	51		 push	 ecx
  0023e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ccccccd
  00246	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024b	51		 push	 ecx
  0024c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00251	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00256	51		 push	 ecx
  00257	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  0025f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00264	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1210 : 
; 1211 : 	draw_2d_line (-1.0, 0.8125, 1.0, 0.8125, MFD_COLOUR1);

  00269	b8 04 00 00 00	 mov	 eax, 4
  0026e	6b c8 00	 imul	 ecx, eax, 0
  00271	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00277	52		 push	 edx
  00278	51		 push	 ecx
  00279	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f500000
  00281	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00286	51		 push	 ecx
  00287	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0028f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00294	51		 push	 ecx
  00295	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f500000
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	51		 push	 ecx
  002a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1212 : 
; 1213 : 	//
; 1214 : 	// draw command heading carat
; 1215 : 	//
; 1216 : 
; 1217 : 	if (draw_command_heading)

  002b5	83 7d 0c 00	 cmp	 DWORD PTR _draw_command_heading$[ebp], 0
  002b9	0f 84 4e 02 00
	00		 je	 $LN14@draw_headi

; 1218 : 	{
; 1219 : 		if (!viper_damage.navigation_computer)

  002bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  002c4	c1 e8 05	 shr	 eax, 5
  002c7	83 e0 01	 and	 eax, 1
  002ca	0f 85 3d 02 00
	00		 jne	 $LN14@draw_headi

; 1220 : 		{
; 1221 : 			entity
; 1222 : 				*wp;
; 1223 : 
; 1224 : 			wp = get_local_entity_current_waypoint (get_gunship_entity ());

  002d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002d5	50		 push	 eax
  002d6	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  002db	89 45 b4	 mov	 DWORD PTR _wp$9[ebp], eax

; 1225 : 
; 1226 : 			if (wp)

  002de	83 7d b4 00	 cmp	 DWORD PTR _wp$9[ebp], 0
  002e2	0f 84 25 02 00
	00		 je	 $LN14@draw_headi

; 1227 : 			{
; 1228 : 				vec3d
; 1229 : 					*gunship_position,
; 1230 : 					waypoint_position;
; 1231 : 
; 1232 : 				float
; 1233 : 					dx,
; 1234 : 					dz,
; 1235 : 					bearing,
; 1236 : 					command_heading;
; 1237 : 
; 1238 : 				gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  002e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  002ef	74 0f		 je	 SHORT $LN18@draw_headi
  002f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f8	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv178[ebp], ecx
  002fe	eb 24		 jmp	 SHORT $LN19@draw_headi
$LN18@draw_headi:
  00300	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
  00306	83 c2 56	 add	 edx, 86			; 00000056H
  00309	52		 push	 edx
  0030a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0030f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00314	50		 push	 eax
  00315	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0031a	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN19@draw_headi:
  00324	b9 01 00 00 00	 mov	 ecx, 1
  00329	85 c9		 test	 ecx, ecx
  0032b	74 0c		 je	 SHORT $LN20@draw_headi
  0032d	c7 85 40 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv186[ebp], 8
  00337	eb 24		 jmp	 SHORT $LN21@draw_headi
$LN20@draw_headi:
  00339	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
  0033f	83 c2 56	 add	 edx, 86			; 00000056H
  00342	52		 push	 edx
  00343	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00348	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0034d	50		 push	 eax
  0034e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00353	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv186[ebp], 0
$LN21@draw_headi:
  0035d	6a 08		 push	 8
  0035f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00365	51		 push	 ecx
  00366	6b 95 44 ff ff
	ff 60		 imul	 edx, DWORD PTR tv178[ebp], 96
  0036d	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv186[ebp]
  00373	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0037a	ff d1		 call	 ecx
  0037c	89 45 b0	 mov	 DWORD PTR _gunship_position$8[ebp], eax

; 1239 : 
; 1240 : 				get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  0037f	8d 45 a4	 lea	 eax, DWORD PTR _waypoint_position$7[ebp]
  00382	50		 push	 eax
  00383	8b 4d b4	 mov	 ecx, DWORD PTR _wp$9[ebp]
  00386	51		 push	 ecx
  00387	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0038d	52		 push	 edx
  0038e	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 1241 : 				dx = waypoint_position.x - gunship_position->x;

  00393	8b 45 b0	 mov	 eax, DWORD PTR _gunship_position$8[ebp]
  00396	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _waypoint_position$7[ebp]
  0039b	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0039f	f3 0f 11 45 a0	 movss	 DWORD PTR _dx$6[ebp], xmm0

; 1242 : 				dz = waypoint_position.z - gunship_position->z;

  003a4	8b 45 b0	 mov	 eax, DWORD PTR _gunship_position$8[ebp]
  003a7	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _waypoint_position$7[ebp+8]
  003ac	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  003b1	f3 0f 11 45 9c	 movss	 DWORD PTR _dz$5[ebp], xmm0

; 1243 : 
; 1244 : 				bearing = atan2 (dx, dz);

  003b6	51		 push	 ecx
  003b7	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _dz$5[ebp]
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	51		 push	 ecx
  003c2	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _dx$6[ebp]
  003c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cc	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  003d1	d9 5d 98	 fstp	 DWORD PTR _bearing$4[ebp]

; 1245 : 				command_heading = bearing - heading;

  003d4	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _bearing$4[ebp]
  003d9	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _heading$[ebp]
  003de	f3 0f 11 45 94	 movss	 DWORD PTR _command_heading$3[ebp], xmm0

; 1246 : 
; 1247 : 				if (command_heading > rad (180.0))

  003e3	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  003e8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  003f0	76 18		 jbe	 SHORT $LN8@draw_headi

; 1248 : 					command_heading -= rad (360.0);

  003f2	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  003f7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  003ff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00403	f3 0f 11 45 94	 movss	 DWORD PTR _command_heading$3[ebp], xmm0
  00408	eb 29		 jmp	 SHORT $LN10@draw_headi
$LN8@draw_headi:

; 1249 : 				else if (command_heading < rad (-180.0))

  0040a	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  0040f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  00417	66 0f 2f c8	 comisd	 xmm1, xmm0
  0041b	76 16		 jbe	 SHORT $LN10@draw_headi

; 1250 : 					command_heading += rad (360.0);

  0041d	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00422	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  0042a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0042e	f3 0f 11 45 94	 movss	 DWORD PTR _command_heading$3[ebp], xmm0
$LN10@draw_headi:

; 1251 : 
; 1252 : 				if (command_heading < rad(-22.0))

  00433	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00438	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfd893011c000000
  00440	66 0f 2f c8	 comisd	 xmm1, xmm0
  00444	76 3b		 jbe	 SHORT $LN11@draw_headi

; 1253 : 					draw_2d_mono_sprite (large_open_left_carat, -heading_width_ratio, tick_datum_bottom, MFD_COLOUR1);

  00446	b8 04 00 00 00	 mov	 eax, 4
  0044b	6b c8 00	 imul	 ecx, eax, 0
  0044e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00454	52		 push	 edx
  00455	51		 push	 ecx
  00456	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  0045b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00460	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  00465	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0046c	51		 push	 ecx
  0046d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00472	68 00 00 00 00	 push	 OFFSET ?large_open_left_carat@@3PADA
  00477	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
  0047c	e9 8c 00 00 00	 jmp	 $LN14@draw_headi
$LN11@draw_headi:

; 1254 : 				else if (command_heading > rad(22.0))

  00481	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00486	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd893011c000000
  0048e	76 31		 jbe	 SHORT $LN13@draw_headi

; 1255 : 					draw_2d_mono_sprite (large_open_right_carat, heading_width_ratio, tick_datum_bottom, MFD_COLOUR1);

  00490	b8 04 00 00 00	 mov	 eax, 4
  00495	6b c8 00	 imul	 ecx, eax, 0
  00498	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0049e	52		 push	 edx
  0049f	51		 push	 ecx
  004a0	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  004a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004aa	51		 push	 ecx
  004ab	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  004b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b5	68 00 00 00 00	 push	 OFFSET ?large_open_right_carat@@3PADA
  004ba	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1256 : 				else

  004bf	eb 4c		 jmp	 SHORT $LN14@draw_headi
$LN13@draw_headi:

; 1257 : 					draw_2d_mono_sprite (large_command_heading_carat, 0.0 + (command_heading * ((heading_width_ratio) / rad (25.0))), tick_datum_bottom, MFD_COLOUR1);

  004c1	b8 04 00 00 00	 mov	 eax, 4
  004c6	6b c8 00	 imul	 ecx, eax, 0
  004c9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004cf	52		 push	 edx
  004d0	51		 push	 ecx
  004d1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  004d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004db	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  004e0	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _heading_width_ratio$[ebp]
  004e5	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@3fdbecde5a000000
  004ed	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  004f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  004f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004fd	51		 push	 ecx
  004fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00503	68 00 00 00 00	 push	 OFFSET ?large_command_heading_carat@@3PADA
  00508	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN14@draw_headi:

; 1258 : 			}
; 1259 : 		}
; 1260 : 	}
; 1261 : 
; 1262 : 	//
; 1263 : 	// draw heading scale
; 1264 : 	//
; 1265 : 
; 1266 : 	heading_step_5 = deg (heading * 0.2);

  0050d	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  00512	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0051a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@404ca5dc00000000
  00522	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00526	f3 0f 11 45 c8	 movss	 DWORD PTR _heading_step_5$[ebp], xmm0

; 1267 : 	int_heading_step_5 = (int) heading_step_5;

  0052b	f3 0f 2c 45 c8	 cvttss2si eax, DWORD PTR _heading_step_5$[ebp]
  00530	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax

; 1268 : 	mod_heading_step_5 = heading_step_5 - (float) int_heading_step_5;

  00533	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_heading_step_5$[ebp]
  00538	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _heading_step_5$[ebp]
  0053d	f3 0f 5c c8	 subss	 xmm1, xmm0
  00541	f3 0f 11 4d c4	 movss	 DWORD PTR _mod_heading_step_5$[ebp], xmm1

; 1269 : 	int_heading_step_5 -= 5;

  00546	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  00549	83 e8 05	 sub	 eax, 5
  0054c	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax

; 1270 : 
; 1271 : 	if (int_heading_step_5 < 0)

  0054f	79 09		 jns	 SHORT $LN15@draw_headi

; 1272 : 	{
; 1273 : 		int_heading_step_5 += 72;

  00551	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  00554	83 c0 48	 add	 eax, 72			; 00000048H
  00557	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax
$LN15@draw_headi:

; 1274 : 	}
; 1275 : 
; 1276 : 	tick_type = int_heading_step_5 % 2;

  0055a	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  0055d	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00562	79 05		 jns	 SHORT $LN26@draw_headi
  00564	48		 dec	 eax
  00565	83 c8 fe	 or	 eax, -2			; fffffffeH
  00568	40		 inc	 eax
$LN26@draw_headi:
  00569	89 45 b8	 mov	 DWORD PTR _tick_type$[ebp], eax

; 1277 : 	x = - (5.0 + mod_heading_step_5) * heading_tick_x_spacing;

  0056c	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_5$[ebp]
  00571	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  00579	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00580	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _heading_tick_x_spacing$[ebp]
  00585	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00589	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0058d	f3 0f 11 45 d0	 movss	 DWORD PTR _x$[ebp], xmm0

; 1278 : 
; 1279 : 	for (loop = 0; loop <= 20; loop++)

  00592	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00599	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  0059b	8b 45 c0	 mov	 eax, DWORD PTR _loop$[ebp]
  0059e	83 c0 01	 add	 eax, 1
  005a1	89 45 c0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  005a4	83 7d c0 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  005a8	0f 8f 30 01 00
	00		 jg	 $LN3@draw_headi

; 1280 : 	{
; 1281 : 		draw_2d_line (x, tick_top, x, tick_bottom, MFD_COLOUR1);

  005ae	b8 04 00 00 00	 mov	 eax, 4
  005b3	6b c8 00	 imul	 ecx, eax, 0
  005b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005bc	52		 push	 edx
  005bd	51		 push	 ecx
  005be	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _tick_bottom$[ebp]
  005c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c8	51		 push	 ecx
  005c9	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  005ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d3	51		 push	 ecx
  005d4	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_top$[ebp]
  005d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005de	51		 push	 ecx
  005df	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1282 : 
; 1283 : 		if (tick_type == 0)

  005ee	83 7d b8 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  005f2	0f 85 80 00 00
	00		 jne	 $LN16@draw_headi

; 1284 : 		{
; 1285 : 			float x_adjust;
; 1286 : 			char buffer[8];
; 1287 : 
; 1288 : 			sprintf(buffer, "%03d", int_heading_step_5 * 5);

  005f8	6b 45 bc 05	 imul	 eax, DWORD PTR _int_heading_step_5$[ebp], 5
  005fc	50		 push	 eax
  005fd	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00602	8d 4d 88	 lea	 ecx, DWORD PTR _buffer$1[ebp]
  00605	51		 push	 ecx
  00606	e8 00 00 00 00	 call	 _sprintf
  0060b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1289 : 			x_adjust = get_mono_font_string_width(buffer) / 2;

  0060e	8d 45 88	 lea	 eax, DWORD PTR _buffer$1[ebp]
  00611	50		 push	 eax
  00612	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00617	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv468[ebp]
  0061d	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv468[ebp]
  00625	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0062d	f3 0f 11 45 90	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 1290 : 
; 1291 : 			set_2d_mono_font_position (x, tick_top);

  00632	51		 push	 ecx
  00633	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_top$[ebp]
  00638	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063d	51		 push	 ecx
  0063e	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  00643	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00648	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1292 : 			set_mono_font_rel_position (-x_adjust, y_adjust);

  0064d	51		 push	 ecx
  0064e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00658	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  0065d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00664	51		 push	 ecx
  00665	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1293 : 			print_mono_font_string(buffer);

  0066f	8d 45 88	 lea	 eax, DWORD PTR _buffer$1[ebp]
  00672	50		 push	 eax
  00673	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN16@draw_headi:

; 1294 : 		}
; 1295 : 
; 1296 : 		int_heading_step_5 = (++int_heading_step_5 == 72) ? 0 : int_heading_step_5;

  00678	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  0067b	83 c0 01	 add	 eax, 1
  0067e	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax
  00681	83 7d bc 48	 cmp	 DWORD PTR _int_heading_step_5$[ebp], 72 ; 00000048H
  00685	75 0c		 jne	 SHORT $LN22@draw_headi
  00687	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv285[ebp], 0
  00691	eb 09		 jmp	 SHORT $LN23@draw_headi
$LN22@draw_headi:
  00693	8b 4d bc	 mov	 ecx, DWORD PTR _int_heading_step_5$[ebp]
  00696	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv285[ebp], ecx
$LN23@draw_headi:
  0069c	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv285[ebp]
  006a2	89 55 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], edx

; 1297 : 
; 1298 : 		tick_type = !tick_type;

  006a5	83 7d b8 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  006a9	75 0c		 jne	 SHORT $LN24@draw_headi
  006ab	c7 85 44 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv287[ebp], 1
  006b5	eb 0a		 jmp	 SHORT $LN25@draw_headi
$LN24@draw_headi:
  006b7	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv287[ebp], 0
$LN25@draw_headi:
  006c1	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv287[ebp]
  006c7	89 45 b8	 mov	 DWORD PTR _tick_type$[ebp], eax

; 1299 : 
; 1300 : 		x += heading_tick_x_spacing;

  006ca	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  006cf	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _heading_tick_x_spacing$[ebp]
  006d4	f3 0f 11 45 d0	 movss	 DWORD PTR _x$[ebp], xmm0

; 1301 : 	}

  006d9	e9 bd fe ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 1302 : 
; 1303 : 	//
; 1304 : 	// restore 2D environment
; 1305 : 	//
; 1306 : 
; 1307 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  006de	51		 push	 ecx
  006df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  006e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ec	51		 push	 ecx
  006ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  006f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fa	51		 push	 ecx
  006fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00703	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00708	51		 push	 ecx
  00709	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00711	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00716	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0071b	50		 push	 eax
  0071c	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1308 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00721	51		 push	 ecx
  00722	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0072a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072f	51		 push	 ecx
  00730	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00738	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073d	51		 push	 ecx
  0073e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00746	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0074b	51		 push	 ecx
  0074c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00754	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00759	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0075e	50		 push	 eax
  0075f	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1309 : }

  00764	5f		 pop	 edi
  00765	5e		 pop	 esi
  00766	5b		 pop	 ebx
  00767	8b e5		 mov	 esp, ebp
  00769	5d		 pop	 ebp
  0076a	c2 08 00	 ret	 8
?draw_heading_scale@@YGXMH@Z ENDP			; draw_heading_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_barometric_altitude_scale@@YGXXZ
_TEXT	SEGMENT
tv564 = -220						; size = 4
tv402 = -220						; size = 4
tv191 = -220						; size = 4
tv135 = -220						; size = 4
_buffer$1 = -152					; size = 8
_x_adjust$2 = -144					; size = 4
_ground_y$3 = -140					; size = 4
_loop$4 = -136						; size = 4
_y$5 = -132						; size = 4
_tick_type$6 = -128					; size = 4
_mod_scale_step_5$7 = -124				; size = 4
_int_scale_step_5$8 = -120				; size = 4
_scale_step_5$9 = -116					; size = 4
_displayed_altitude$ = -112				; size = 4
_v2$ = -108						; size = 4
_v1$ = -104						; size = 4
_u2$ = -100						; size = 4
_u1$ = -96						; size = 4
_buffer$ = -92						; size = 8
_ground_level$ = -84					; size = 4
_barometric_altitude$ = -80				; size = 4
_radar_altitude$ = -76					; size = 4
_y_adjust$ = -72					; size = 4
_x_adjust$ = -68					; size = 4
_mfd_vp_y_max$ = -64					; size = 4
_mfd_vp_y_min$ = -60					; size = 4
_v$ = -56						; size = 4
_scale_step$ = -52					; size = 4
_scale_bottom$ = -48					; size = 4
_scale_top$ = -44					; size = 4
_x4$ = -40						; size = 4
_x5$ = -36						; size = 4
_x3$ = -32						; size = 4
_x2$ = -28						; size = 4
_x1$ = -24						; size = 4
_box_bottom$ = -20					; size = 4
_box_top$ = -16						; size = 4
_box_end$ = -12						; size = 4
_box_start$ = -8					; size = 4
_y_centre$ = -4						; size = 4
?draw_barometric_altitude_scale@@YGXXZ PROC		; draw_barometric_altitude_scale, COMDAT

; 1013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1014 : 	const float
; 1015 : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 1016 : 		box_start = -0.98,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 1017 : 		box_end = box_start + 0.20,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 1018 : 		box_top = y_centre + 0.04,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0003b	f3 0f 11 45 f0	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 1019 : 		box_bottom = y_centre - 0.04,

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  00048	f3 0f 11 45 ec	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 1020 : 		x1 = -0.95,

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00055	f3 0f 11 45 e8	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1021 : 		x2 = x1 + 0.02,

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  00062	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1022 : 		x3 = x1 + 0.08,

  00067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  0006f	f3 0f 11 45 e0	 movss	 DWORD PTR _x3$[ebp], xmm0

; 1023 : 		x5 = x1 + 0.16,

  00074	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  0007c	f3 0f 11 45 dc	 movss	 DWORD PTR _x5$[ebp], xmm0

; 1024 : 		x4 = x5 - 0.02,

  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c28
  00089	f3 0f 11 45 d8	 movss	 DWORD PTR _x4$[ebp], xmm0

; 1025 : 		scale_top = y_centre + 0.35,

  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  00096	f3 0f 11 45 d4	 movss	 DWORD PTR _scale_top$[ebp], xmm0

; 1026 : 		scale_bottom = y_centre - 0.35,

  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  000a3	f3 0f 11 45 d0	 movss	 DWORD PTR _scale_bottom$[ebp], xmm0

; 1027 : 		scale_step = 0.35 / 4.5;

  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d9f49f5
  000b0	f3 0f 11 45 cc	 movss	 DWORD PTR _scale_step$[ebp], xmm0

; 1028 : 
; 1029 : 	float
; 1030 : 		v,
; 1031 : 		mfd_vp_y_min,
; 1032 : 		mfd_vp_y_max,
; 1033 : 		x_adjust,
; 1034 : 		y_adjust = y_centre,

  000b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000bd	f3 0f 11 45 b8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1035 : 		radar_altitude = feet(current_flight_dynamics->radar_altitude.value),

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000c7	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  000cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  000d7	f3 0f 11 45 b4	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 1036 : 		barometric_altitude = feet (current_flight_dynamics->barometric_altitude.value),

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000e1	f3 0f 10 80 2c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9260]
  000e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  000f1	f3 0f 11 45 b0	 movss	 DWORD PTR _barometric_altitude$[ebp], xmm0

; 1037 : 		ground_level = barometric_altitude - radar_altitude;

  000f6	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  000fb	f3 0f 5c 45 b4	 subss	 xmm0, DWORD PTR _radar_altitude$[ebp]
  00100	f3 0f 11 45 ac	 movss	 DWORD PTR _ground_level$[ebp], xmm0

; 1038 : 
; 1039 : 
; 1040 : 	char
; 1041 : 		buffer[8];
; 1042 : 
; 1043 : 	int
; 1044 : 		u1, u2, v1, v2,
; 1045 : 		displayed_altitude = (int)((barometric_altitude + 5) / 10);

  00105	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  0010a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40a00000
  00112	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  0011a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0011e	89 45 90	 mov	 DWORD PTR _displayed_altitude$[ebp], eax

; 1046 : 
; 1047 : 	// draw scale
; 1048 : 	get_2d_float_screen_x_coordinate (-y_centre, &v);

  00121	8d 45 c8	 lea	 eax, DWORD PTR _v$[ebp]
  00124	50		 push	 eax
  00125	51		 push	 ecx
  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 1049 : 
; 1050 : 	mfd_vp_y_min = v - (0.5 * mfd_viewport_size * (scale_top - scale_bottom));

  00138	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  0013d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00145	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0014d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe6666660000000
  00155	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00159	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015d	f3 0f 11 45 c4	 movss	 DWORD PTR _mfd_vp_y_min$[ebp], xmm0

; 1051 : 	mfd_vp_y_max = v + (0.5 * mfd_viewport_size * (scale_top - scale_bottom)) - 0.001;

  00162	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  00167	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0016f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00177	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe6666660000000
  0017f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00183	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0018b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018f	f3 0f 11 45 c0	 movss	 DWORD PTR _mfd_vp_y_max$[ebp], xmm0

; 1052 : 
; 1053 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_vp_y_min, mfd_viewport_x_max, mfd_vp_y_max);

  00194	51		 push	 ecx
  00195	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	51		 push	 ecx
  001a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  001c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1054 : 
; 1055 : 	//
; 1056 : 	// draw scale
; 1057 : 	//
; 1058 : 
; 1059 : 	{
; 1060 : 		float scale_step_5 = barometric_altitude * 0.2;

  001d1	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _barometric_altitude$[ebp]
  001d6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  001de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e2	f3 0f 11 45 8c	 movss	 DWORD PTR _scale_step_5$9[ebp], xmm0

; 1061 : 		int int_scale_step_5 = (int) scale_step_5;

  001e7	f3 0f 2c 45 8c	 cvttss2si eax, DWORD PTR _scale_step_5$9[ebp]
  001ec	89 45 88	 mov	 DWORD PTR _int_scale_step_5$8[ebp], eax

; 1062 : 		float mod_scale_step_5 = scale_step_5 - (float) int_scale_step_5;

  001ef	f3 0f 2a 45 88	 cvtsi2ss xmm0, DWORD PTR _int_scale_step_5$8[ebp]
  001f4	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _scale_step_5$9[ebp]
  001f9	f3 0f 5c c8	 subss	 xmm1, xmm0
  001fd	f3 0f 11 4d 84	 movss	 DWORD PTR _mod_scale_step_5$7[ebp], xmm1

; 1063 : 
; 1064 : 		int tick_type = (int_scale_step_5 % 2) == 0;

  00202	8b 45 88	 mov	 eax, DWORD PTR _int_scale_step_5$8[ebp]
  00205	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0020a	79 05		 jns	 SHORT $LN15@draw_barom
  0020c	48		 dec	 eax
  0020d	83 c8 fe	 or	 eax, -2			; fffffffeH
  00210	40		 inc	 eax
$LN15@draw_barom:
  00211	85 c0		 test	 eax, eax
  00213	75 0c		 jne	 SHORT $LN11@draw_barom
  00215	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv135[ebp], 1
  0021f	eb 0a		 jmp	 SHORT $LN12@draw_barom
$LN11@draw_barom:
  00221	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], 0
$LN12@draw_barom:
  0022b	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00231	89 4d 80	 mov	 DWORD PTR _tick_type$6[ebp], ecx

; 1065 : 		float y = -(5.0 + mod_scale_step_5) * scale_step;

  00234	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _mod_scale_step_5$7[ebp]
  00239	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  00241	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00248	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb3e93ea0000000
  00250	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00254	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _y$5[ebp], xmm0

; 1066 : 		int loop;
; 1067 : 		float ground_y = -1.0;

  0025c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00264	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _ground_y$3[ebp], xmm0

; 1068 : 
; 1069 : 		int_scale_step_5 -= 5;

  0026c	8b 45 88	 mov	 eax, DWORD PTR _int_scale_step_5$8[ebp]
  0026f	83 e8 05	 sub	 eax, 5
  00272	89 45 88	 mov	 DWORD PTR _int_scale_step_5$8[ebp], eax

; 1070 : 
; 1071 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00275	6a 01		 push	 1
  00277	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1072 : 		y_adjust = -2.0;

  0027c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00284	f3 0f 11 45 b8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1073 : 
; 1074 : 		for (loop = 0; loop <= 10; loop++)

  00289	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _loop$4[ebp], 0
  00293	eb 0f		 jmp	 SHORT $LN4@draw_barom
$LN2@draw_barom:
  00295	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _loop$4[ebp]
  0029b	83 c0 01	 add	 eax, 1
  0029e	89 85 78 ff ff
	ff		 mov	 DWORD PTR _loop$4[ebp], eax
$LN4@draw_barom:
  002a4	83 bd 78 ff ff
	ff 0a		 cmp	 DWORD PTR _loop$4[ebp], 10 ; 0000000aH
  002ab	0f 8f 17 02 00
	00		 jg	 $LN3@draw_barom

; 1075 : 		{
; 1076 : 			if (int_scale_step_5 * 5 > (ground_level + 5))

  002b1	6b 45 88 05	 imul	 eax, DWORD PTR _int_scale_step_5$8[ebp], 5
  002b5	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002b9	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _ground_level$[ebp]
  002be	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@40a00000
  002c6	0f 2f c1	 comiss	 xmm0, xmm1
  002c9	0f 86 8f 01 00
	00		 jbe	 $LN5@draw_barom

; 1077 : 			{
; 1078 : 				if (tick_type == 0)

  002cf	83 7d 80 00	 cmp	 DWORD PTR _tick_type$6[ebp], 0
  002d3	0f 85 37 01 00
	00		 jne	 $LN7@draw_barom

; 1079 : 				{
; 1080 : 					float x_adjust;
; 1081 : 					char buffer[8];
; 1082 : 
; 1083 : 					draw_2d_line (x1, y, x2, y, MFD_COLOUR1);

  002d9	b8 04 00 00 00	 mov	 eax, 4
  002de	6b c8 00	 imul	 ecx, eax, 0
  002e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002e7	52		 push	 edx
  002e8	51		 push	 ecx
  002e9	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  002f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f6	51		 push	 ecx
  002f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  002ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00304	51		 push	 ecx
  00305	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	51		 push	 ecx
  00313	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0031b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00320	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1084 : 					draw_2d_line (x4, y, x5, y, MFD_COLOUR1);

  00325	b8 04 00 00 00	 mov	 eax, 4
  0032a	6b c8 00	 imul	 ecx, eax, 0
  0032d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00333	52		 push	 edx
  00334	51		 push	 ecx
  00335	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  0033d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00342	51		 push	 ecx
  00343	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  0034b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00350	51		 push	 ecx
  00351	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00359	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035e	51		 push	 ecx
  0035f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c28
  00367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1085 : 
; 1086 : 					sprintf(buffer, "%02d", (int_scale_step_5 * 5) % 100);

  00371	6b 45 88 05	 imul	 eax, DWORD PTR _int_scale_step_5$8[ebp], 5
  00375	99		 cdq
  00376	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0037b	f7 f9		 idiv	 ecx
  0037d	52		 push	 edx
  0037e	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  00383	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _buffer$1[ebp]
  00389	52		 push	 edx
  0038a	e8 00 00 00 00	 call	 _sprintf
  0038f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1087 : 					x_adjust = get_mono_font_string_width(buffer) / 2;

  00392	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0039e	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv402[ebp]
  003a4	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv402[ebp]
  003ac	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  003b4	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 1088 : 
; 1089 : 					set_2d_mono_font_position (x3, y);

  003bc	51		 push	 ecx
  003bd	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  003d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1090 : 					set_mono_font_rel_position (-x_adjust, y_adjust);

  003dd	51		 push	 ecx
  003de	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e8	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  003f0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003f7	51		 push	 ecx
  003f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1091 : 					print_mono_font_string(buffer);

  00402	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00408	50		 push	 eax
  00409	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1092 : 				}
; 1093 : 				else

  0040e	eb 4c		 jmp	 SHORT $LN8@draw_barom
$LN7@draw_barom:

; 1094 : 					draw_2d_line (x3 - 0.02, y, x3 + 0.02, y, MFD_COLOUR1);

  00410	b8 04 00 00 00	 mov	 eax, 4
  00415	6b c8 00	 imul	 ecx, eax, 0
  00418	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0041e	52		 push	 edx
  0041f	51		 push	 ecx
  00420	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042d	51		 push	 ecx
  0042e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00436	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043b	51		 push	 ecx
  0043c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00449	51		 push	 ecx
  0044a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  00452	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00457	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN8@draw_barom:

; 1095 : 			}
; 1096 : 			else

  0045c	eb 1f		 jmp	 SHORT $LN6@draw_barom
$LN5@draw_barom:

; 1097 : 				ground_y = max(y, ground_y);

  0045e	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _ground_y$3[ebp]
  00464	50		 push	 eax
  00465	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _y$5[ebp]
  0046b	51		 push	 ecx
  0046c	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00471	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00475	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _ground_y$3[ebp], xmm0
$LN6@draw_barom:

; 1098 : 
; 1099 : 			int_scale_step_5++;

  0047d	8b 45 88	 mov	 eax, DWORD PTR _int_scale_step_5$8[ebp]
  00480	83 c0 01	 add	 eax, 1
  00483	89 45 88	 mov	 DWORD PTR _int_scale_step_5$8[ebp], eax

; 1100 : 			tick_type = !tick_type;

  00486	83 7d 80 00	 cmp	 DWORD PTR _tick_type$6[ebp], 0
  0048a	75 0c		 jne	 SHORT $LN13@draw_barom
  0048c	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv191[ebp], 1
  00496	eb 0a		 jmp	 SHORT $LN14@draw_barom
$LN13@draw_barom:
  00498	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv191[ebp], 0
$LN14@draw_barom:
  004a2	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv191[ebp]
  004a8	89 45 80	 mov	 DWORD PTR _tick_type$6[ebp], eax

; 1101 : 			y += scale_step;

  004ab	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  004b3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d9f49f5
  004bb	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _y$5[ebp], xmm0

; 1102 : 		}

  004c3	e9 cd fd ff ff	 jmp	 $LN2@draw_barom
$LN3@draw_barom:

; 1103 : 
; 1104 : 		if (ground_y != -1.0)

  004c8	f3 0f 5a 85 74
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _ground_y$3[ebp]
  004d0	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  004d8	9f		 lahf
  004d9	f6 c4 44	 test	 ah, 68			; 00000044H
  004dc	7b 4c		 jnp	 SHORT $LN9@draw_barom

; 1105 : 			draw_2d_hatched_area(x1, -0.5, x5, ground_y, MFD_COLOUR_RED);

  004de	b8 04 00 00 00	 mov	 eax, 4
  004e3	6b c8 0f	 imul	 ecx, eax, 15
  004e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004ec	52		 push	 edx
  004ed	51		 push	 ecx
  004ee	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _ground_y$3[ebp]
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	51		 push	 ecx
  0050a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00512	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00517	51		 push	 ecx
  00518	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00520	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00525	e8 00 00 00 00	 call	 ?draw_2d_hatched_area@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_area
$LN9@draw_barom:

; 1106 : 	}
; 1107 : 
; 1108 : 	//
; 1109 : 	// restore 2D environment
; 1110 : 	//
; 1111 : 
; 1112 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0052a	51		 push	 ecx
  0052b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00533	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00538	51		 push	 ecx
  00539	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	51		 push	 ecx
  00547	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0054f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00554	51		 push	 ecx
  00555	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0055d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00562	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00567	50		 push	 eax
  00568	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1113 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0056d	51		 push	 ecx
  0056e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057b	51		 push	 ecx
  0057c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	51		 push	 ecx
  0058a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00592	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00597	51		 push	 ecx
  00598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005aa	50		 push	 eax
  005ab	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1114 : 
; 1115 : 	// draw box around
; 1116 : 	draw_2d_line (x1, scale_top, x5, scale_top, MFD_COLOUR1);

  005b0	b8 04 00 00 00	 mov	 eax, 4
  005b5	6b c8 00	 imul	 ecx, eax, 0
  005b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005be	52		 push	 edx
  005bf	51		 push	 ecx
  005c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  005c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cd	51		 push	 ecx
  005ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  005d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005db	51		 push	 ecx
  005dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	51		 push	 ecx
  005ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1117 : 	draw_2d_line (x1, scale_bottom, x5, scale_bottom, MFD_COLOUR1);

  005fc	b8 04 00 00 00	 mov	 eax, 4
  00601	6b c8 00	 imul	 ecx, eax, 0
  00604	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0060a	52		 push	 edx
  0060b	51		 push	 ecx
  0060c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00619	51		 push	 ecx
  0061a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  00622	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00627	51		 push	 ecx
  00628	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00630	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00635	51		 push	 ecx
  00636	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0063e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00643	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1118 : 	draw_2d_line (x1, scale_top, x1, scale_bottom, MFD_COLOUR1);

  00648	b8 04 00 00 00	 mov	 eax, 4
  0064d	6b c8 00	 imul	 ecx, eax, 0
  00650	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00656	52		 push	 edx
  00657	51		 push	 ecx
  00658	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00665	51		 push	 ecx
  00666	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0066e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00673	51		 push	 ecx
  00674	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  0067c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00681	51		 push	 ecx
  00682	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0068a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1119 : 	draw_2d_line (x5, scale_top, x5, scale_bottom, MFD_COLOUR1);

  00694	b8 04 00 00 00	 mov	 eax, 4
  00699	6b c8 00	 imul	 ecx, eax, 0
  0069c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006a2	52		 push	 edx
  006a3	51		 push	 ecx
  006a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  006ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b1	51		 push	 ecx
  006b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  006ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bf	51		 push	 ecx
  006c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  006c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cd	51		 push	 ecx
  006ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  006d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006db	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1120 : 
; 1121 : 	// draw box with digital altitude readout
; 1122 : 
; 1123 : 	// clear background area
; 1124 : 	get_2d_int_screen_coordinates (box_start, box_top, &u1, &v1);

  006e0	8d 45 98	 lea	 eax, DWORD PTR _v1$[ebp]
  006e3	50		 push	 eax
  006e4	8d 4d a0	 lea	 ecx, DWORD PTR _u1$[ebp]
  006e7	51		 push	 ecx
  006e8	51		 push	 ecx
  006e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  006f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f6	51		 push	 ecx
  006f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  006ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00704	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1125 : 	get_2d_int_screen_coordinates (box_end, box_bottom, &u2, &v2);

  00709	8d 45 94	 lea	 eax, DWORD PTR _v2$[ebp]
  0070c	50		 push	 eax
  0070d	8d 4d 9c	 lea	 ecx, DWORD PTR _u2$[ebp]
  00710	51		 push	 ecx
  00711	51		 push	 ecx
  00712	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  0071a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071f	51		 push	 ecx
  00720	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  00728	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072d	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1126 : 	set_block(u1, v1, u2, v2, MFD_BACKGROUND_COLOUR);

  00732	b8 04 00 00 00	 mov	 eax, 4
  00737	6b c8 09	 imul	 ecx, eax, 9
  0073a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00740	52		 push	 edx
  00741	8b 45 94	 mov	 eax, DWORD PTR _v2$[ebp]
  00744	50		 push	 eax
  00745	8b 4d 9c	 mov	 ecx, DWORD PTR _u2$[ebp]
  00748	51		 push	 ecx
  00749	8b 55 98	 mov	 edx, DWORD PTR _v1$[ebp]
  0074c	52		 push	 edx
  0074d	8b 45 a0	 mov	 eax, DWORD PTR _u1$[ebp]
  00750	50		 push	 eax
  00751	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 1127 : 
; 1128 : 	// draw surrounding box
; 1129 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR1);

  00756	b8 04 00 00 00	 mov	 eax, 4
  0075b	6b c8 00	 imul	 ecx, eax, 0
  0075e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00764	52		 push	 edx
  00765	51		 push	 ecx
  00766	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0076e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00773	51		 push	 ecx
  00774	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  0077c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00781	51		 push	 ecx
  00782	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0078a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078f	51		 push	 ecx
  00790	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00798	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1130 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR1);

  007a2	b8 04 00 00 00	 mov	 eax, 4
  007a7	6b c8 00	 imul	 ecx, eax, 0
  007aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007b0	52		 push	 edx
  007b1	51		 push	 ecx
  007b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  007ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bf	51		 push	 ecx
  007c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  007c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cd	51		 push	 ecx
  007ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  007d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007db	51		 push	 ecx
  007dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  007e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1131 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR1);

  007ee	b8 04 00 00 00	 mov	 eax, 4
  007f3	6b c8 00	 imul	 ecx, eax, 0
  007f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007fc	52		 push	 edx
  007fd	51		 push	 ecx
  007fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  00806	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080b	51		 push	 ecx
  0080c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00814	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00819	51		 push	 ecx
  0081a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  00822	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00827	51		 push	 ecx
  00828	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00830	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00835	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1132 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR1);

  0083a	b8 04 00 00 00	 mov	 eax, 4
  0083f	6b c8 00	 imul	 ecx, eax, 0
  00842	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00848	52		 push	 edx
  00849	51		 push	 ecx
  0084a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  00852	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00857	51		 push	 ecx
  00858	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  00860	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00865	51		 push	 ecx
  00866	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0086e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00873	51		 push	 ecx
  00874	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  0087c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00881	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1133 : 
; 1134 : 	// print digital readout
; 1135 : 
; 1136 : 	set_mono_font_type (MONO_FONT_TYPE_5X7);

  00886	6a 01		 push	 1
  00888	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1137 : 	y_adjust = -2.0;

  0088d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00895	f3 0f 11 45 b8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1138 : 
; 1139 : 	sprintf(buffer, "%3do", displayed_altitude);

  0089a	8b 45 90	 mov	 eax, DWORD PTR _displayed_altitude$[ebp]
  0089d	50		 push	 eax
  0089e	68 00 00 00 00	 push	 OFFSET ??_C@_04HPNJOLEN@?$CF3do@
  008a3	8d 4d a4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  008a6	51		 push	 ecx
  008a7	e8 00 00 00 00	 call	 _sprintf
  008ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1140 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  008af	8d 45 a4	 lea	 eax, DWORD PTR _buffer$[ebp]
  008b2	50		 push	 eax
  008b3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  008b8	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv564[ebp]
  008be	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv564[ebp]
  008c6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  008cd	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  008d5	f3 0f 11 45 bc	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 1141 : 
; 1142 : 	set_2d_mono_font_position (box_end, y_centre);

  008da	51		 push	 ecx
  008db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  008e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e8	51		 push	 ecx
  008e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1143 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  008fb	51		 push	 ecx
  008fc	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00901	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00906	51		 push	 ecx
  00907	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0090c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00911	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1144 : 	print_mono_font_string(buffer);

  00916	8d 45 a4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00919	50		 push	 eax
  0091a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1145 : }

  0091f	5f		 pop	 edi
  00920	5e		 pop	 esi
  00921	5b		 pop	 ebx
  00922	8b e5		 mov	 esp, ebp
  00924	5d		 pop	 ebp
  00925	c3		 ret	 0
?draw_barometric_altitude_scale@@YGXXZ ENDP		; draw_barometric_altitude_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_radar_altitude_scale@@YGXXZ
_TEXT	SEGMENT
tv222 = -164						; size = 8
tv206 = -164						; size = 8
tv177 = -164						; size = 8
tv81 = -164						; size = 8
tv223 = -156						; size = 8
tv207 = -156						; size = 8
tv178 = -156						; size = 8
tv82 = -156						; size = 8
tv403 = -152						; size = 4
_i$1 = -84						; size = 4
_current_y$2 = -80					; size = 4
_high_step$3 = -76					; size = 4
_low_step$4 = -72					; size = 4
_high_height$5 = -68					; size = 4
_low_height$6 = -64					; size = 4
_scale_height$7 = -60					; size = 4
_roc$8 = -56						; size = 4
_buffer$ = -52						; size = 8
_radar_altitude$ = -44					; size = 4
_y_adjust$ = -40					; size = 4
_x_adjust$ = -36					; size = 4
_box_end$ = -32						; size = 4
_box_start$ = -28					; size = 4
_tick_end$ = -24					; size = 4
_x_end$ = -20						; size = 4
_x_start$ = -16						; size = 4
_box_bottom$ = -12					; size = 4
_box_top$ = -8						; size = 4
_y_centre$ = -4						; size = 4
?draw_radar_altitude_scale@@YGXXZ PROC			; draw_radar_altitude_scale, COMDAT

; 922  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 923  : 	const float
; 924  : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 925  : 		box_top = y_centre + 0.05,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 926  : 		box_bottom = y_centre - 0.05;

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 927  : 
; 928  : 	float
; 929  : 		x_start,
; 930  : 		x_end,
; 931  : 		tick_end,
; 932  : 		box_start,
; 933  : 		box_end,
; 934  : 		x_adjust,
; 935  : 		y_adjust = y_centre,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0003b	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 936  : 		radar_altitude = bound(feet(current_flight_dynamics->radar_altitude.value), 0.0, 500.0);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00045	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  0004d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  00055	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00059	0f 57 c9	 xorps	 xmm1, xmm1
  0005c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00060	76 0d		 jbe	 SHORT $LN9@draw_radar
  00062	0f 57 c0	 xorps	 xmm0, xmm0
  00065	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv82[ebp], xmm0
  0006d	eb 68		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00075	f3 0f 10 81 44
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9284]
  0007d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  00085	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00089	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@407f400000000000
  00091	76 12		 jbe	 SHORT $LN7@draw_radar
  00093	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@407f400000000000
  0009b	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv81[ebp], xmm0
  000a3	eb 22		 jmp	 SHORT $LN8@draw_radar
$LN7@draw_radar:
  000a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ab	f3 0f 10 82 44
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9284]
  000b3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  000bb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000bf	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv81[ebp], xmm0
$LN8@draw_radar:
  000c7	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv81[ebp]
  000cf	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv82[ebp], xmm0
$LN10@draw_radar:
  000d7	f2 0f 5a 85 64
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv82[ebp]
  000df	f3 0f 11 45 d4	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 937  : 
; 938  : 	char
; 939  : 		buffer[8];
; 940  : 
; 941  : 	x_start = -0.76;

  000e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  000ec	f3 0f 11 45 f0	 movss	 DWORD PTR _x_start$[ebp], xmm0

; 942  : 
; 943  : 	x_end = x_start + 0.04;

  000f1	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _x_start$[ebp]
  000f6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  000fe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00102	f3 0f 11 45 ec	 movss	 DWORD PTR _x_end$[ebp], xmm0

; 944  : 	tick_end = x_end + 0.02;

  00107	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x_end$[ebp]
  0010c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00114	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00118	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_end$[ebp], xmm0

; 945  : 	box_start = x_start + 0.07;

  0011d	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _x_start$[ebp]
  00122	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb1eb851eb851ec
  0012a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0012e	f3 0f 11 45 e4	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 946  : 	box_end = box_start + 0.18;

  00133	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _box_start$[ebp]
  00138	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  00140	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 947  : 
; 948  : 	// draw box with digital radar altitude readout
; 949  : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR1);

  00149	b8 04 00 00 00	 mov	 eax, 4
  0014e	6b c8 00	 imul	 ecx, eax, 0
  00151	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00157	52		 push	 edx
  00158	51		 push	 ecx
  00159	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00161	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00166	51		 push	 ecx
  00167	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	51		 push	 ecx
  00172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	51		 push	 ecx
  00180	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  00185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 950  : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR1);

  0018f	b8 04 00 00 00	 mov	 eax, 4
  00194	6b c8 00	 imul	 ecx, eax, 0
  00197	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0019d	52		 push	 edx
  0019e	51		 push	 ecx
  0019f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	51		 push	 ecx
  001b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  001c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c5	51		 push	 ecx
  001c6	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 951  : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR1);

  001d5	b8 04 00 00 00	 mov	 eax, 4
  001da	6b c8 00	 imul	 ecx, eax, 0
  001dd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001e3	52		 push	 edx
  001e4	51		 push	 ecx
  001e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  001ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f2	51		 push	 ecx
  001f3	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  001f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fd	51		 push	 ecx
  001fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00206	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020b	51		 push	 ecx
  0020c	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  00211	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00216	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 952  : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR1);

  0021b	b8 04 00 00 00	 mov	 eax, 4
  00220	6b c8 00	 imul	 ecx, eax, 0
  00223	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00229	52		 push	 edx
  0022a	51		 push	 ecx
  0022b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	51		 push	 ecx
  00239	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  0023e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00243	51		 push	 ecx
  00244	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0024c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00251	51		 push	 ecx
  00252	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  00257	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 953  : 
; 954  : 	draw_2d_line(x_start, y_centre, box_start, y_centre, MFD_COLOUR1);

  00261	b8 04 00 00 00	 mov	 eax, 4
  00266	6b c8 00	 imul	 ecx, eax, 0
  00269	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0026f	52		 push	 edx
  00270	51		 push	 ecx
  00271	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00279	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027e	51		 push	 ecx
  0027f	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  00284	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00289	51		 push	 ecx
  0028a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	51		 push	 ecx
  00298	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 955  : 
; 956  : 	// rate_of_climb
; 957  : 	{
; 958  : 		float roc = bound(current_flight_dynamics->world_velocity_y.value * 0.05, -0.2, 0.2);

  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002ac	f3 0f 5a 80 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8468]
  002b4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  002bc	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfc999999999999a
  002c4	66 0f 2f c8	 comisd	 xmm1, xmm0
  002c8	76 12		 jbe	 SHORT $LN13@draw_radar
  002ca	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfc999999999999a
  002d2	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv178[ebp], xmm0
  002da	eb 60		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:
  002dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002e2	f3 0f 5a 81 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+8468]
  002ea	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  002f2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fc999999999999a
  002fa	76 12		 jbe	 SHORT $LN11@draw_radar
  002fc	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00304	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv177[ebp], xmm0
  0030c	eb 1e		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:
  0030e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00314	f3 0f 5a 82 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [edx+8468]
  0031c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00324	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv177[ebp], xmm0
$LN12@draw_radar:
  0032c	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv177[ebp]
  00334	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv178[ebp], xmm0
$LN14@draw_radar:
  0033c	f2 0f 5a 85 64
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv178[ebp]
  00344	f3 0f 11 45 c8	 movss	 DWORD PTR _roc$8[ebp], xmm0

; 959  : 		draw_2d_mono_sprite (large_left_carat, x_end, y_centre + roc, MFD_COLOUR1);

  00349	b8 04 00 00 00	 mov	 eax, 4
  0034e	6b c8 00	 imul	 ecx, eax, 0
  00351	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00357	52		 push	 edx
  00358	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00360	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _roc$8[ebp]
  00365	51		 push	 ecx
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	51		 push	 ecx
  0036c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  00371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00376	68 00 00 00 00	 push	 OFFSET ?large_left_carat@@3PADA
  0037b	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 960  : 	}
; 961  : 
; 962  : 	// print digital readout
; 963  : 
; 964  : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  00380	6a 04		 push	 4
  00382	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 965  : 	y_adjust = -4.0;

  00387	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0038f	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 966  : 
; 967  : 	sprintf(buffer, "%3d", (int)radar_altitude);

  00394	f3 0f 2c 45 d4	 cvttss2si eax, DWORD PTR _radar_altitude$[ebp]
  00399	50		 push	 eax
  0039a	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  0039f	8d 4d cc	 lea	 ecx, DWORD PTR _buffer$[ebp]
  003a2	51		 push	 ecx
  003a3	e8 00 00 00 00	 call	 _sprintf
  003a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 968  : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  003ab	8d 45 cc	 lea	 eax, DWORD PTR _buffer$[ebp]
  003ae	50		 push	 eax
  003af	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003b4	d9 9d 68 ff ff
	ff		 fstp	 DWORD PTR tv403[ebp]
  003ba	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR tv403[ebp]
  003c2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003c9	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  003d1	f3 0f 11 45 dc	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 969  : 
; 970  : 	set_2d_mono_font_position (box_end, y_centre);

  003d6	51		 push	 ecx
  003d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  003df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e4	51		 push	 ecx
  003e5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 971  : 	set_mono_font_rel_position (x_adjust, y_adjust);

  003f4	51		 push	 ecx
  003f5	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ff	51		 push	 ecx
  00400	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00405	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 972  : 	print_mono_font_string(buffer);

  0040f	8d 45 cc	 lea	 eax, DWORD PTR _buffer$[ebp]
  00412	50		 push	 eax
  00413	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 973  : 
; 974  : 	// draw altitude scale
; 975  : 	{
; 976  : 		const float
; 977  : 			scale_height = 0.6,

  00418	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00420	f3 0f 11 45 c4	 movss	 DWORD PTR _scale_height$7[ebp], xmm0

; 978  : 			low_height = scale_height * 0.75,

  00425	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66667
  0042d	f3 0f 11 45 c0	 movss	 DWORD PTR _low_height$6[ebp], xmm0

; 979  : 			high_height = scale_height - low_height,

  00432	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0043a	f3 0f 11 45 bc	 movss	 DWORD PTR _high_height$5[ebp], xmm0

; 980  : 			low_step = low_height / 3,

  0043f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00447	f3 0f 11 45 b8	 movss	 DWORD PTR _low_step$4[ebp], xmm0

; 981  : 			high_step = high_height / 2;

  0044c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  00454	f3 0f 11 45 b4	 movss	 DWORD PTR _high_step$3[ebp], xmm0

; 982  : 
; 983  : 		float
; 984  : 			current_y;
; 985  : 
; 986  : 		int i;
; 987  : 
; 988  : 		// adjust start of altitude scale
; 989  : 		current_y = y_centre;

  00459	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00461	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 990  : 		current_y -= bound(radar_altitude, 0.0, 300.0) * low_step * 0.01;

  00466	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  0046b	0f 57 c9	 xorps	 xmm1, xmm1
  0046e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00472	76 0d		 jbe	 SHORT $LN17@draw_radar
  00474	0f 57 c0	 xorps	 xmm0, xmm0
  00477	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv207[ebp], xmm0
  0047f	eb 3e		 jmp	 SHORT $LN18@draw_radar
$LN17@draw_radar:
  00481	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00486	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4072c00000000000
  0048e	76 12		 jbe	 SHORT $LN15@draw_radar
  00490	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4072c00000000000
  00498	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv206[ebp], xmm0
  004a0	eb 0d		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:
  004a2	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  004a7	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv206[ebp], xmm0
$LN16@draw_radar:
  004af	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv206[ebp]
  004b7	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv207[ebp], xmm0
$LN18@draw_radar:
  004bf	f2 0f 10 85 64
	ff ff ff	 movsd	 xmm0, QWORD PTR tv207[ebp]
  004c7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc3333340000000
  004cf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  004d7	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _current_y$2[ebp]
  004dc	f2 0f 5c c8	 subsd	 xmm1, xmm0
  004e0	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004e4	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 991  : 		if (radar_altitude > 300)

  004e9	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _radar_altitude$[ebp]
  004ee	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@43960000
  004f5	0f 86 9b 00 00
	00		 jbe	 $LN5@draw_radar

; 992  : 			current_y -= bound(radar_altitude - 300.0, 0.0, 200.0) * high_step * 0.01;

  004fb	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00500	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4072c00000000000
  00508	0f 57 c9	 xorps	 xmm1, xmm1
  0050b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0050f	76 0d		 jbe	 SHORT $LN21@draw_radar
  00511	0f 57 c0	 xorps	 xmm0, xmm0
  00514	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv223[ebp], xmm0
  0051c	eb 4e		 jmp	 SHORT $LN22@draw_radar
$LN21@draw_radar:
  0051e	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00523	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4072c00000000000
  0052b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4069000000000000
  00533	76 12		 jbe	 SHORT $LN19@draw_radar
  00535	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4069000000000000
  0053d	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv222[ebp], xmm0
  00545	eb 15		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:
  00547	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  0054c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4072c00000000000
  00554	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv222[ebp], xmm0
$LN20@draw_radar:
  0055c	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv222[ebp]
  00564	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv223[ebp], xmm0
$LN22@draw_radar:
  0056c	f2 0f 10 85 64
	ff ff ff	 movsd	 xmm0, QWORD PTR tv223[ebp]
  00574	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb3333340000000
  0057c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00584	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _current_y$2[ebp]
  00589	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0058d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00591	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0
$LN5@draw_radar:

; 993  : 
; 994  : 		// draw main box
; 995  : 		draw_2d_line(x_start, current_y, tick_end, current_y, MFD_COLOUR1);

  00596	b8 04 00 00 00	 mov	 eax, 4
  0059b	6b c8 00	 imul	 ecx, eax, 0
  0059e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005a4	52		 push	 edx
  005a5	51		 push	 ecx
  005a6	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  005ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b0	51		 push	 ecx
  005b1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  005b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005bb	51		 push	 ecx
  005bc	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  005c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c6	51		 push	 ecx
  005c7	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  005cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 996  : 		draw_2d_line(x_start, current_y + scale_height, tick_end, current_y + scale_height, MFD_COLOUR1);

  005d6	b8 04 00 00 00	 mov	 eax, 4
  005db	6b c8 00	 imul	 ecx, eax, 0
  005de	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005e4	52		 push	 edx
  005e5	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  005ea	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  005f2	51		 push	 ecx
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	51		 push	 ecx
  005f9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  005fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00603	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00608	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  00610	51		 push	 ecx
  00611	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00616	51		 push	 ecx
  00617	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  0061c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00621	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 997  : 		draw_2d_line(x_start, current_y, x_start, current_y + scale_height, MFD_COLOUR1);

  00626	b8 04 00 00 00	 mov	 eax, 4
  0062b	6b c8 00	 imul	 ecx, eax, 0
  0062e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00634	52		 push	 edx
  00635	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  0063a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  00642	51		 push	 ecx
  00643	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00648	51		 push	 ecx
  00649	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  0064e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00653	51		 push	 ecx
  00654	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00659	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065e	51		 push	 ecx
  0065f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  00664	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00669	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 998  : 		draw_2d_line(x_end, current_y, x_end, current_y + scale_height, MFD_COLOUR1);

  0066e	b8 04 00 00 00	 mov	 eax, 4
  00673	6b c8 00	 imul	 ecx, eax, 0
  00676	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0067c	52		 push	 edx
  0067d	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00682	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  0068a	51		 push	 ecx
  0068b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00690	51		 push	 ecx
  00691	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  00696	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069b	51		 push	 ecx
  0069c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  006a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a6	51		 push	 ecx
  006a7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  006ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 999  : 
; 1000 : 		// draw tick marks
; 1001 : 		for (i = 0; i < 3; i++)

  006b6	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  006bd	eb 09		 jmp	 SHORT $LN4@draw_radar
$LN2@draw_radar:
  006bf	8b 45 ac	 mov	 eax, DWORD PTR _i$1[ebp]
  006c2	83 c0 01	 add	 eax, 1
  006c5	89 45 ac	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@draw_radar:
  006c8	83 7d ac 03	 cmp	 DWORD PTR _i$1[ebp], 3
  006cc	7d 54		 jge	 SHORT $LN3@draw_radar

; 1002 : 		{
; 1003 : 			current_y += low_step;

  006ce	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  006d3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3e19999a
  006db	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 1004 : 			draw_2d_line(x_end, current_y, tick_end, current_y, MFD_COLOUR1);

  006e0	b8 04 00 00 00	 mov	 eax, 4
  006e5	6b c8 00	 imul	 ecx, eax, 0
  006e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006ee	52		 push	 edx
  006ef	51		 push	 ecx
  006f0	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  006f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fa	51		 push	 ecx
  006fb	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  00700	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00705	51		 push	 ecx
  00706	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  0070b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00710	51		 push	 ecx
  00711	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  00716	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1005 : 		}

  00720	eb 9d		 jmp	 SHORT $LN2@draw_radar
$LN3@draw_radar:

; 1006 : 
; 1007 : 		current_y += high_step;

  00722	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00727	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d99999a
  0072f	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 1008 : 		draw_2d_line(x_end, current_y, tick_end, current_y, MFD_COLOUR1);

  00734	b8 04 00 00 00	 mov	 eax, 4
  00739	6b c8 00	 imul	 ecx, eax, 0
  0073c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00742	52		 push	 edx
  00743	51		 push	 ecx
  00744	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00749	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0074e	51		 push	 ecx
  0074f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  00754	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00759	51		 push	 ecx
  0075a	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  0075f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00764	51		 push	 ecx
  00765	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  0076a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1009 : 	}
; 1010 : }

  00774	5f		 pop	 edi
  00775	5e		 pop	 esi
  00776	5b		 pop	 ebx
  00777	8b e5		 mov	 esp, ebp
  00779	5d		 pop	 ebp
  0077a	c3		 ret	 0
?draw_radar_altitude_scale@@YGXXZ ENDP			; draw_radar_altitude_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_airspeed_scale@@YGXXZ
_TEXT	SEGMENT
tv568 = -208						; size = 4
tv438 = -208						; size = 4
tv225 = -208						; size = 4
tv175 = -208						; size = 4
_buffer$1 = -140					; size = 8
_x_adjust$2 = -132					; size = 4
_v2$3 = -128						; size = 4
_v1$4 = -124						; size = 4
_u2$5 = -120						; size = 4
_u1$6 = -116						; size = 4
_bottom$7 = -112					; size = 4
_top$8 = -108						; size = 4
_x_end$9 = -104						; size = 4
_x_start$10 = -100					; size = 4
_buffer$11 = -96					; size = 8
_x_adjust$12 = -88					; size = 4
_loop$13 = -84						; size = 4
_y$14 = -80						; size = 4
_tick_type$15 = -76					; size = 4
_mod_scale_step_5$16 = -72				; size = 4
_int_scale_step_5$17 = -68				; size = 4
_scale_step_5$18 = -64					; size = 4
_x7$ = -60						; size = 4
_x6$ = -56						; size = 4
_x5$ = -52						; size = 4
_x4$ = -48						; size = 4
_x3$ = -44						; size = 4
_x2$ = -40						; size = 4
_x1$ = -36						; size = 4
_mfd_vp_y_max$ = -32					; size = 4
_mfd_vp_y_min$ = -28					; size = 4
_y_adjust$ = -24					; size = 4
_airspeed$ = -20					; size = 4
_tick_y_spacing$ = -16					; size = 4
_scale_height_ratio$ = -12				; size = 4
_y_centre$ = -8						; size = 4
_v$ = -4						; size = 4
?draw_airspeed_scale@@YGXXZ PROC			; draw_airspeed_scale, COMDAT

; 786  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 787  : 	float
; 788  : 		v,
; 789  : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 f8	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 790  : 		scale_height_ratio = 0.35,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00021	f3 0f 11 45 f4	 movss	 DWORD PTR _scale_height_ratio$[ebp], xmm0

; 791  : 		tick_y_spacing = 0.27,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8a3d71
  0002e	f3 0f 11 45 f0	 movss	 DWORD PTR _tick_y_spacing$[ebp], xmm0

; 792  : 		airspeed = current_flight_dynamics->velocity_z.value,

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00038	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  00040	f3 0f 11 45 ec	 movss	 DWORD PTR _airspeed$[ebp], xmm0

; 793  : 		y_adjust,
; 794  : 		mfd_vp_y_min,
; 795  : 		mfd_vp_y_max;
; 796  : 
; 797  : 	float x1, x2, x3, x4, x5, x6, x7;
; 798  : 
; 799  : 	x1 = 0.41;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed1eb85
  0004d	f3 0f 11 45 dc	 movss	 DWORD PTR _x1$[ebp], xmm0

; 800  : 
; 801  : 	x2 = x1 + 0.04;

  00052	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00057	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  0005f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00063	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 802  : 	x4 = x1 + 0.13;

  00068	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0006d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0a3d70a3d70a4
  00075	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00079	f3 0f 11 45 d0	 movss	 DWORD PTR _x4$[ebp], xmm0

; 803  : 	x3 = x4 - 0.02;

  0007e	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _x4$[ebp]
  00083	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	f3 0f 11 45 d4	 movss	 DWORD PTR _x3$[ebp], xmm0

; 804  : 	x5 = x4 + 0.02;

  00094	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _x4$[ebp]
  00099	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  000a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a5	f3 0f 11 45 cc	 movss	 DWORD PTR _x5$[ebp], xmm0

; 805  : 	x7 = x1 + 0.26;

  000aa	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  000af	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0a3d70a3d70a4
  000b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000bb	f3 0f 11 45 c4	 movss	 DWORD PTR _x7$[ebp], xmm0

; 806  : 	x6 = x7 - 0.04;

  000c0	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _x7$[ebp]
  000c5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  000cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d1	f3 0f 11 45 c8	 movss	 DWORD PTR _x6$[ebp], xmm0

; 807  : 
; 808  : 	get_2d_float_screen_x_coordinate (-y_centre, &v);

  000d6	8d 45 fc	 lea	 eax, DWORD PTR _v$[ebp]
  000d9	50		 push	 eax
  000da	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  000df	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e6	51		 push	 ecx
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 809  : 
; 810  : 	// draw box around
; 811  : 	draw_2d_line (x1, y_centre + scale_height_ratio, x7, y_centre + scale_height_ratio, MFD_COLOUR1);

  000f1	b8 04 00 00 00	 mov	 eax, 4
  000f6	6b c8 00	 imul	 ecx, eax, 0
  000f9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000ff	52		 push	 edx
  00100	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00105	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  0010a	51		 push	 ecx
  0010b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00110	51		 push	 ecx
  00111	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00120	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  00125	51		 push	 ecx
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	51		 push	 ecx
  0012c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00131	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00136	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 812  : 	draw_2d_line (x1, y_centre - scale_height_ratio, x7, y_centre - scale_height_ratio, MFD_COLOUR1);

  0013b	b8 04 00 00 00	 mov	 eax, 4
  00140	6b c8 00	 imul	 ecx, eax, 0
  00143	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00149	52		 push	 edx
  0014a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0014f	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  00154	51		 push	 ecx
  00155	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015a	51		 push	 ecx
  0015b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0016a	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  0016f	51		 push	 ecx
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	51		 push	 ecx
  00176	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0017b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00180	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 813  : 	draw_2d_line (x7, y_centre + scale_height_ratio, x7, y_centre - scale_height_ratio, MFD_COLOUR1);

  00185	b8 04 00 00 00	 mov	 eax, 4
  0018a	6b c8 00	 imul	 ecx, eax, 0
  0018d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00193	52		 push	 edx
  00194	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00199	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  0019e	51		 push	 ecx
  0019f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a4	51		 push	 ecx
  001a5	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  001aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001af	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  001b4	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  001b9	51		 push	 ecx
  001ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bf	51		 push	 ecx
  001c0	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  001c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 814  : 
; 815  : 	mfd_vp_y_min = v - (0.5 * mfd_viewport_size * (scale_height_ratio));

  001cf	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  001d4	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001dc	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001e4	f3 0f 5a 55 f4	 cvtss2sd xmm2, DWORD PTR _scale_height_ratio$[ebp]
  001e9	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001ed	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f5	f3 0f 11 45 e4	 movss	 DWORD PTR _mfd_vp_y_min$[ebp], xmm0

; 816  : 	mfd_vp_y_max = v + (0.5 * mfd_viewport_size * (scale_height_ratio)) - 0.001;

  001fa	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  001ff	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00207	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0020f	f3 0f 5a 55 f4	 cvtss2sd xmm2, DWORD PTR _scale_height_ratio$[ebp]
  00214	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00218	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0021c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00224	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00228	f3 0f 11 45 e0	 movss	 DWORD PTR _mfd_vp_y_max$[ebp], xmm0

; 817  : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_vp_y_min, mfd_viewport_x_max, mfd_vp_y_max);

  0022d	51		 push	 ecx
  0022e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	51		 push	 ecx
  00239	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	51		 push	 ecx
  00247	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  0024c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00251	51		 push	 ecx
  00252	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0025a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00264	50		 push	 eax
  00265	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 818  : 
; 819  : 	//
; 820  : 	// draw speed scale
; 821  : 	//
; 822  : 
; 823  : 	{
; 824  : 		float scale_step_5 = knots(airspeed * 0.2);

  0026a	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  0026f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00277	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fff0bb080000000
  0027f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00283	f3 0f 11 45 c0	 movss	 DWORD PTR _scale_step_5$18[ebp], xmm0

; 825  : 		int int_scale_step_5 = (int) scale_step_5;

  00288	f3 0f 2c 45 c0	 cvttss2si eax, DWORD PTR _scale_step_5$18[ebp]
  0028d	89 45 bc	 mov	 DWORD PTR _int_scale_step_5$17[ebp], eax

; 826  : 		float mod_scale_step_5 = scale_step_5 - (float) int_scale_step_5;

  00290	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_scale_step_5$17[ebp]
  00295	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _scale_step_5$18[ebp]
  0029a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0029e	f3 0f 11 4d b8	 movss	 DWORD PTR _mod_scale_step_5$16[ebp], xmm1

; 827  : 
; 828  : 		int tick_type = (int_scale_step_5 % 2) == 0;

  002a3	8b 45 bc	 mov	 eax, DWORD PTR _int_scale_step_5$17[ebp]
  002a6	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  002ab	79 05		 jns	 SHORT $LN13@draw_airsp
  002ad	48		 dec	 eax
  002ae	83 c8 fe	 or	 eax, -2			; fffffffeH
  002b1	40		 inc	 eax
$LN13@draw_airsp:
  002b2	85 c0		 test	 eax, eax
  002b4	75 0c		 jne	 SHORT $LN9@draw_airsp
  002b6	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv175[ebp], 1
  002c0	eb 0a		 jmp	 SHORT $LN10@draw_airsp
$LN9@draw_airsp:
  002c2	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv175[ebp], 0
$LN10@draw_airsp:
  002cc	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv175[ebp]
  002d2	89 4d b4	 mov	 DWORD PTR _tick_type$15[ebp], ecx

; 829  : 		float y = -(5.0 + mod_scale_step_5) * tick_y_spacing;

  002d5	f3 0f 5a 45 b8	 cvtss2sd xmm0, DWORD PTR _mod_scale_step_5$16[ebp]
  002da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  002e2	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  002e9	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _tick_y_spacing$[ebp]
  002ee	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f6	f3 0f 11 45 b0	 movss	 DWORD PTR _y$14[ebp], xmm0

; 830  : 		int loop;
; 831  : 
; 832  : 		int_scale_step_5 -= 5;

  002fb	8b 45 bc	 mov	 eax, DWORD PTR _int_scale_step_5$17[ebp]
  002fe	83 e8 05	 sub	 eax, 5
  00301	89 45 bc	 mov	 DWORD PTR _int_scale_step_5$17[ebp], eax

; 833  : 
; 834  : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00304	6a 01		 push	 1
  00306	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 835  : 		y_adjust = -2.0;

  0030b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00313	f3 0f 11 45 e8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 836  : 
; 837  : 		for (loop = 0; loop <= 10; loop++)

  00318	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _loop$13[ebp], 0
  0031f	eb 09		 jmp	 SHORT $LN4@draw_airsp
$LN2@draw_airsp:
  00321	8b 45 ac	 mov	 eax, DWORD PTR _loop$13[ebp]
  00324	83 c0 01	 add	 eax, 1
  00327	89 45 ac	 mov	 DWORD PTR _loop$13[ebp], eax
$LN4@draw_airsp:
  0032a	83 7d ac 0a	 cmp	 DWORD PTR _loop$13[ebp], 10 ; 0000000aH
  0032e	0f 8f 98 01 00
	00		 jg	 $LN3@draw_airsp

; 838  : 		{
; 839  : 			if (int_scale_step_5 >= 0)

  00334	83 7d bc 00	 cmp	 DWORD PTR _int_scale_step_5$17[ebp], 0
  00338	0f 8c 4c 01 00
	00		 jl	 $LN7@draw_airsp

; 840  : 			{
; 841  : 				if (tick_type == 0)

  0033e	83 7d b4 00	 cmp	 DWORD PTR _tick_type$15[ebp], 0
  00342	0f 85 02 01 00
	00		 jne	 $LN6@draw_airsp

; 842  : 				{
; 843  : 					float x_adjust;
; 844  : 					char buffer[8];
; 845  : 
; 846  : 					draw_2d_line (x1, y, x2, y, MFD_COLOUR1);

  00348	b8 04 00 00 00	 mov	 eax, 4
  0034d	6b c8 00	 imul	 ecx, eax, 0
  00350	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00356	52		 push	 edx
  00357	51		 push	 ecx
  00358	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  0035d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00362	51		 push	 ecx
  00363	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00368	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036d	51		 push	 ecx
  0036e	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  00373	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00378	51		 push	 ecx
  00379	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 847  : 					draw_2d_line (x6, y, x7, y, MFD_COLOUR1);

  00388	b8 04 00 00 00	 mov	 eax, 4
  0038d	6b c8 00	 imul	 ecx, eax, 0
  00390	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00396	52		 push	 edx
  00397	51		 push	 ecx
  00398	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  0039d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a2	51		 push	 ecx
  003a3	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  003a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ad	51		 push	 ecx
  003ae	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  003b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b8	51		 push	 ecx
  003b9	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x6$[ebp]
  003be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 848  : 
; 849  : 					sprintf(buffer, "%d", int_scale_step_5 * 5);

  003c8	6b 45 bc 05	 imul	 eax, DWORD PTR _int_scale_step_5$17[ebp], 5
  003cc	50		 push	 eax
  003cd	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  003d2	8d 4d a0	 lea	 ecx, DWORD PTR _buffer$11[ebp]
  003d5	51		 push	 ecx
  003d6	e8 00 00 00 00	 call	 _sprintf
  003db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 850  : 					x_adjust = get_mono_font_string_width(buffer) / 2;

  003de	8d 45 a0	 lea	 eax, DWORD PTR _buffer$11[ebp]
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003e7	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv438[ebp]
  003ed	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv438[ebp]
  003f5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  003fd	f3 0f 11 45 a8	 movss	 DWORD PTR _x_adjust$12[ebp], xmm0

; 851  : 
; 852  : 					set_2d_mono_font_position (x4, y);

  00402	51		 push	 ecx
  00403	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	51		 push	 ecx
  0040e	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00418	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 853  : 					set_mono_font_rel_position (-x_adjust, y_adjust);

  0041d	51		 push	 ecx
  0041e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00423	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00428	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x_adjust$12[ebp]
  0042d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00434	51		 push	 ecx
  00435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 854  : 					print_mono_font_string(buffer);

  0043f	8d 45 a0	 lea	 eax, DWORD PTR _buffer$11[ebp]
  00442	50		 push	 eax
  00443	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 855  : 				}
; 856  : 				else

  00448	eb 40		 jmp	 SHORT $LN7@draw_airsp
$LN6@draw_airsp:

; 857  : 					draw_2d_line (x3, y, x5, y, MFD_COLOUR1);

  0044a	b8 04 00 00 00	 mov	 eax, 4
  0044f	6b c8 00	 imul	 ecx, eax, 0
  00452	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00458	52		 push	 edx
  00459	51		 push	 ecx
  0045a	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  0045f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00464	51		 push	 ecx
  00465	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x5$[ebp]
  0046a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046f	51		 push	 ecx
  00470	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  00475	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047a	51		 push	 ecx
  0047b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00480	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00485	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN7@draw_airsp:

; 858  : 			}
; 859  : 
; 860  : 			int_scale_step_5++;

  0048a	8b 45 bc	 mov	 eax, DWORD PTR _int_scale_step_5$17[ebp]
  0048d	83 c0 01	 add	 eax, 1
  00490	89 45 bc	 mov	 DWORD PTR _int_scale_step_5$17[ebp], eax

; 861  : 			tick_type = !tick_type;

  00493	83 7d b4 00	 cmp	 DWORD PTR _tick_type$15[ebp], 0
  00497	75 0c		 jne	 SHORT $LN11@draw_airsp
  00499	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv225[ebp], 1
  004a3	eb 0a		 jmp	 SHORT $LN12@draw_airsp
$LN11@draw_airsp:
  004a5	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
$LN12@draw_airsp:
  004af	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv225[ebp]
  004b5	89 45 b4	 mov	 DWORD PTR _tick_type$15[ebp], eax

; 862  : 			y += tick_y_spacing;

  004b8	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  004bd	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _tick_y_spacing$[ebp]
  004c2	f3 0f 11 45 b0	 movss	 DWORD PTR _y$14[ebp], xmm0

; 863  : 		}

  004c7	e9 55 fe ff ff	 jmp	 $LN2@draw_airsp
$LN3@draw_airsp:

; 864  : 	}
; 865  : 
; 866  : 	//
; 867  : 	// restore 2D environment
; 868  : 	//
; 869  : 
; 870  : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  004cc	51		 push	 ecx
  004cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  004d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004da	51		 push	 ecx
  004db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  004e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e8	51		 push	 ecx
  004e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  004f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f6	51		 push	 ecx
  004f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  004ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00504	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00509	50		 push	 eax
  0050a	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 871  : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0050f	51		 push	 ecx
  00510	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00518	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051d	51		 push	 ecx
  0051e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00526	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052b	51		 push	 ecx
  0052c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00534	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00539	51		 push	 ecx
  0053a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00542	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00547	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0054c	50		 push	 eax
  0054d	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 872  : 
; 873  : 	// draw centre box with digital airspeed
; 874  : 
; 875  : 	{
; 876  : 		float
; 877  : 			x_start = x1 + 0.04,

  00552	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00557	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  0055f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00563	f3 0f 11 45 9c	 movss	 DWORD PTR _x_start$10[ebp], xmm0

; 878  : 			x_end = x7 + 0.02,

  00568	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _x7$[ebp]
  0056d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00575	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00579	f3 0f 11 45 98	 movss	 DWORD PTR _x_end$9[ebp], xmm0

; 879  : 			top = y_centre + 0.05,

  0057e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  00583	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0058b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0058f	f3 0f 11 45 94	 movss	 DWORD PTR _top$8[ebp], xmm0

; 880  : 			bottom = y_centre - 0.05;

  00594	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  00599	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  005a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005a5	f3 0f 11 45 90	 movss	 DWORD PTR _bottom$7[ebp], xmm0

; 881  : 
; 882  : 		int u1, u2, v1, v2;
; 883  : 
; 884  : 		float x_adjust;
; 885  : 		char buffer[8];
; 886  : 
; 887  : 		get_2d_int_screen_coordinates (x_start, top, &u1, &v1);

  005aa	8d 45 84	 lea	 eax, DWORD PTR _v1$4[ebp]
  005ad	50		 push	 eax
  005ae	8d 4d 8c	 lea	 ecx, DWORD PTR _u1$6[ebp]
  005b1	51		 push	 ecx
  005b2	51		 push	 ecx
  005b3	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  005b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005bd	51		 push	 ecx
  005be	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  005c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c8	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 888  : 		get_2d_int_screen_coordinates (x_end, bottom, &u2, &v2);

  005cd	8d 45 80	 lea	 eax, DWORD PTR _v2$3[ebp]
  005d0	50		 push	 eax
  005d1	8d 4d 88	 lea	 ecx, DWORD PTR _u2$5[ebp]
  005d4	51		 push	 ecx
  005d5	51		 push	 ecx
  005d6	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  005db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e0	51		 push	 ecx
  005e1	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  005e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005eb	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 889  : 
; 890  : 		// clear background area
; 891  : 
; 892  : 		set_block(u1, v1, u2, v2, MFD_BACKGROUND_COLOUR);

  005f0	b8 04 00 00 00	 mov	 eax, 4
  005f5	6b c8 09	 imul	 ecx, eax, 9
  005f8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005fe	52		 push	 edx
  005ff	8b 45 80	 mov	 eax, DWORD PTR _v2$3[ebp]
  00602	50		 push	 eax
  00603	8b 4d 88	 mov	 ecx, DWORD PTR _u2$5[ebp]
  00606	51		 push	 ecx
  00607	8b 55 84	 mov	 edx, DWORD PTR _v1$4[ebp]
  0060a	52		 push	 edx
  0060b	8b 45 8c	 mov	 eax, DWORD PTR _u1$6[ebp]
  0060e	50		 push	 eax
  0060f	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 893  : 		draw_2d_filled_triangle(x1, y_centre, x_start, top, x_start, bottom, MFD_BACKGROUND_COLOUR);

  00614	b8 04 00 00 00	 mov	 eax, 4
  00619	6b c8 09	 imul	 ecx, eax, 9
  0061c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00622	52		 push	 edx
  00623	51		 push	 ecx
  00624	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	51		 push	 ecx
  0062f	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  00634	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00639	51		 push	 ecx
  0063a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  0063f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00644	51		 push	 ecx
  00645	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  0064a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064f	51		 push	 ecx
  00650	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00655	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065a	51		 push	 ecx
  0065b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00665	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 894  : 
; 895  : 		// draw surrounding box
; 896  : 
; 897  : 		draw_2d_line(x_start, top, x_end, top, MFD_COLOUR1);

  0066a	b8 04 00 00 00	 mov	 eax, 4
  0066f	6b c8 00	 imul	 ecx, eax, 0
  00672	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00678	52		 push	 edx
  00679	51		 push	 ecx
  0067a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  0067f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00684	51		 push	 ecx
  00685	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  0068a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068f	51		 push	 ecx
  00690	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  00695	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069a	51		 push	 ecx
  0069b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  006a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 898  : 		draw_2d_line(x_start, bottom, x_end, bottom, MFD_COLOUR1);

  006aa	b8 04 00 00 00	 mov	 eax, 4
  006af	6b c8 00	 imul	 ecx, eax, 0
  006b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006b8	52		 push	 edx
  006b9	51		 push	 ecx
  006ba	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  006bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c4	51		 push	 ecx
  006c5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  006ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cf	51		 push	 ecx
  006d0	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  006d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006da	51		 push	 ecx
  006db	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  006e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 899  : 		draw_2d_line(x_end, top, x_end, bottom, MFD_COLOUR1);

  006ea	b8 04 00 00 00	 mov	 eax, 4
  006ef	6b c8 00	 imul	 ecx, eax, 0
  006f2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006f8	52		 push	 edx
  006f9	51		 push	 ecx
  006fa	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  006ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00704	51		 push	 ecx
  00705	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  0070a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070f	51		 push	 ecx
  00710	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  00715	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071a	51		 push	 ecx
  0071b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  00720	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00725	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 900  : 		draw_2d_line(x1, y_centre, x_start, top, MFD_COLOUR1);

  0072a	b8 04 00 00 00	 mov	 eax, 4
  0072f	6b c8 00	 imul	 ecx, eax, 0
  00732	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00738	52		 push	 edx
  00739	51		 push	 ecx
  0073a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  0073f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00744	51		 push	 ecx
  00745	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  0074a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0074f	51		 push	 ecx
  00750	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00755	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075a	51		 push	 ecx
  0075b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00760	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00765	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 901  : 		draw_2d_line(x1, y_centre, x_start, bottom, MFD_COLOUR1);

  0076a	b8 04 00 00 00	 mov	 eax, 4
  0076f	6b c8 00	 imul	 ecx, eax, 0
  00772	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00778	52		 push	 edx
  00779	51		 push	 ecx
  0077a	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  0077f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00784	51		 push	 ecx
  00785	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  0078a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078f	51		 push	 ecx
  00790	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00795	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079a	51		 push	 ecx
  0079b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 902  : 
; 903  : 		// print digital readout
; 904  : 
; 905  : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  007aa	6a 05		 push	 5
  007ac	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 906  : 		y_adjust = -4.0;

  007b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  007b9	f3 0f 11 45 e8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 907  : 
; 908  : 		sprintf(buffer, "%3d", (int)knots(airspeed));

  007be	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _airspeed$[ebp]
  007c3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  007cb	f3 0f 2c c0	 cvttss2si eax, xmm0
  007cf	50		 push	 eax
  007d0	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  007d5	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$1[ebp]
  007db	51		 push	 ecx
  007dc	e8 00 00 00 00	 call	 _sprintf
  007e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 909  : 		x_adjust = -get_mono_font_string_width(buffer);

  007e4	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  007ea	50		 push	 eax
  007eb	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  007f0	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv568[ebp]
  007f6	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv568[ebp]
  007fe	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00805	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 910  : 
; 911  : 		set_2d_mono_font_position (x7, y_centre);

  0080d	51		 push	 ecx
  0080e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00813	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00818	51		 push	 ecx
  00819	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  0081e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00823	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 912  : 		set_mono_font_rel_position (x_adjust, y_adjust);

  00828	51		 push	 ecx
  00829	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0082e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00833	51		 push	 ecx
  00834	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  0083c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00841	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 913  : 		print_mono_font_string(buffer);

  00846	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  0084c	50		 push	 eax
  0084d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 914  : 	}
; 915  : }

  00852	5f		 pop	 edi
  00853	5e		 pop	 esi
  00854	5b		 pop	 ebx
  00855	8b e5		 mov	 esp, ebp
  00857	5d		 pop	 ebp
  00858	c3		 ret	 0
?draw_airspeed_scale@@YGXXZ ENDP			; draw_airspeed_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_damaged_mfd@@YGXXZ PROC				; draw_damaged_mfd, COMDAT

; 694  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 695  : 	int
; 696  : 		count,
; 697  : 		max_lines,
; 698  : 		i;
; 699  : 
; 700  : 	rgb_colour
; 701  : 		col;
; 702  : 
; 703  : 	float
; 704  : 		x_centre,
; 705  : 		x_delta,
; 706  : 		x_left,
; 707  : 		x_right,
; 708  : 		y;
; 709  : 
; 710  : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 711  : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 712  : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 713  : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 714  : 
; 715  : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_damag

; 716  : 	{
; 717  : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 718  : 	}
; 719  : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_damag
$LN5@draw_damag:

; 720  : 	{
; 721  : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_damag:

; 722  : 	}
; 723  : 
; 724  : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_damag
$LN2@draw_damag:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_damag:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 71 01 00
	00		 jge	 $LN3@draw_damag

; 725  : 	{
; 726  : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 727  : 
; 728  : 		col.g = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 729  : 
; 730  : 		x_centre = sfrand1 ();

  000a5	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000af	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000b4	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000bf	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000c2	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000c8	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000ce	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000d2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000de	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 731  : 
; 732  : 		x_delta = (frand1 () * 0.5) + 0.25;

  000e3	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ed	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000f2	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000fd	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00100	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00106	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0010a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00112	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0011a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00122	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00126	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 733  : 
; 734  : 		x_left = x_centre - x_delta;

  0012b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00130	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00135	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 735  : 
; 736  : 		x_right = x_centre + x_delta;

  0013a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013f	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 737  : 
; 738  : 		y = sfrand1 ();

  00149	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00153	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00158	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00163	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00166	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0016c	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00172	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00176	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  0017e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00182	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 739  : 
; 740  : 		draw_2d_line (x_left, y, x_right, y, col);

  00187	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  0018a	50		 push	 eax
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	51		 push	 ecx
  00197	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 741  : 	}

  001bc	e9 7a fe ff ff	 jmp	 $LN2@draw_damag
$LN3@draw_damag:

; 742  : }

  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
?draw_damaged_mfd@@YGXXZ ENDP				; draw_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 664  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 665  : 	float
; 666  : 		x,
; 667  : 		y;
; 668  : 
; 669  : 	if (display_mfd_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_mfd_layout_grid@@3HA, 0 ; display_mfd_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 670  : 	{
; 671  : 		for (x = -1.0; x <= 1.0; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 672  : 		{
; 673  : 			draw_2d_line (x, -1.0, x, 1.0, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 674  : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 675  : 
; 676  : 		for (y = -1.0; y <= 1.0; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 677  : 		{
; 678  : 			draw_2d_line (-1.0, y, 1.0, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 679  : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 680  : 	}
; 681  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z PROC ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords, COMDAT

; 642  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  : 	ASSERT (i);

  00009	83 7d 08 00	 cmp	 DWORD PTR _i$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@transform_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@transform_:

; 644  : 	ASSERT (j);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _j$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@transform_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
  00032	83 c0 02	 add	 eax, 2
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01CBDEGOCN@j@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@transform_:

; 645  : 
; 646  : 	*i -= mfd_screen_x_min;

  00045	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00048	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00057	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 647  : 	*j -= mfd_screen_y_min;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0005e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00062	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  0006d	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 648  : 
; 649  : 	*i *= mfd_screen_x_scale;

  00071	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00074	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00078	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?mfd_screen_x_scale@@3MA
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00083	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 650  : 	*j *= mfd_screen_y_scale;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0008a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?mfd_screen_y_scale@@3MA
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  00099	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 651  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z ENDP ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ
_TEXT	SEGMENT
_mfd_mode$ = -4						; size = 4
?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ PROC ; get_mfd_mode_for_eo_sensor, COMDAT

; 10059: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10060: 	viper_mfd_modes
; 10061: 		mfd_mode;
; 10062: 
; 10063: 	if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  00009	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  00010	75 09		 jne	 SHORT $LN2@get_mfd_mo

; 10064: 	{
; 10065: 		mfd_mode = VIPER_MFD_MODE_FLIR;

  00012	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 2
  00019	eb 25		 jmp	 SHORT $LN3@get_mfd_mo
$LN2@get_mfd_mo:

; 10066: 	}
; 10067: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DTV)

  0001b	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 4 ; eo_sensor
  00022	75 09		 jne	 SHORT $LN4@get_mfd_mo

; 10068: 	{
; 10069: 		mfd_mode = VIPER_MFD_MODE_DTV;

  00024	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 3

; 10070: 	}
; 10071: 	else

  0002b	eb 13		 jmp	 SHORT $LN3@get_mfd_mo
$LN4@get_mfd_mo:

; 10072: 	{
; 10073: 		debug_fatal ("Invalid EO sensor = %d", eo_sensor);

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
  00038	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0003d	83 c4 08	 add	 esp, 8
$LN3@get_mfd_mo:

; 10074: 	}
; 10075: 
; 10076: 	return (mfd_mode);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 10077: }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ENDP ; get_mfd_mode_for_eo_sensor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_viper_tads_mfd@@YGXXZ
_TEXT	SEGMENT
?select_viper_tads_mfd@@YGXXZ PROC			; select_viper_tads_mfd, COMDAT

; 10888: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10889: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00009	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 2b 01 00
	00		 jne	 $LN2@select_vip

; 10890: 	{
; 10891: 		////////////////////////////////////////
; 10892: 		//
; 10893: 		// PILOT
; 10894: 		//
; 10895: 		////////////////////////////////////////
; 10896: 
; 10897: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!viper_damage.pilot_lh_mfd))

  00016	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0001d	75 1f		 jne	 SHORT $LN4@select_vip
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00024	c1 e8 09	 shr	 eax, 9
  00027	83 e0 01	 and	 eax, 1
  0002a	75 12		 jne	 SHORT $LN4@select_vip

; 10898: 		{
; 10899: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_PILOT_LHS);

  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10900: 
; 10901: 			return;

  00039	e9 1b 02 00 00	 jmp	 $LN1@select_vip
$LN4@select_vip:

; 10902: 		}
; 10903: 
; 10904: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!viper_damage.pilot_rh_mfd))

  0003e	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  00045	75 1f		 jne	 SHORT $LN5@select_vip
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0004c	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  0004f	83 e0 01	 and	 eax, 1
  00052	75 12		 jne	 SHORT $LN5@select_vip

; 10905: 		{
; 10906: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_PILOT_RHS);

  00054	6a 01		 push	 1
  00056	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10907: 
; 10908: 			return;

  00061	e9 f3 01 00 00	 jmp	 $LN1@select_vip
$LN5@select_vip:

; 10909: 		}
; 10910: 
; 10911: 		if
; 10912: 		(
; 10913: 			(pilot_lhs_mfd_mode == VIPER_MFD_MODE_FLIR) ||

  00066	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 2
  0006d	74 09		 je	 SHORT $LN7@select_vip
  0006f	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 3
  00076	75 12		 jne	 SHORT $LN6@select_vip
$LN7@select_vip:

; 10914: 			(pilot_lhs_mfd_mode == VIPER_MFD_MODE_DTV)
; 10915: 		)
; 10916: 		{
; 10917: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_PILOT_LHS);

  00078	6a 00		 push	 0
  0007a	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10918: 
; 10919: 			return;

  00085	e9 cf 01 00 00	 jmp	 $LN1@select_vip
$LN6@select_vip:

; 10920: 		}
; 10921: 
; 10922: 		if
; 10923: 		(
; 10924: 			(pilot_rhs_mfd_mode == VIPER_MFD_MODE_FLIR) ||

  0008a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 2
  00091	74 09		 je	 SHORT $LN9@select_vip
  00093	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 3
  0009a	75 12		 jne	 SHORT $LN8@select_vip
$LN9@select_vip:

; 10925: 			(pilot_rhs_mfd_mode == VIPER_MFD_MODE_DTV)
; 10926: 		)
; 10927: 		{
; 10928: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_PILOT_RHS);

  0009c	6a 01		 push	 1
  0009e	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10929: 
; 10930: 			return;

  000a9	e9 ab 01 00 00	 jmp	 $LN1@select_vip
$LN8@select_vip:

; 10931: 		}
; 10932: 
; 10933: 		if ((pilot_lhs_mfd_mode == VIPER_MFD_MODE_OFF) && (!viper_damage.pilot_lh_mfd))

  000ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 0
  000b5	75 1f		 jne	 SHORT $LN10@select_vip
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  000bc	c1 e8 09	 shr	 eax, 9
  000bf	83 e0 01	 and	 eax, 1
  000c2	75 12		 jne	 SHORT $LN10@select_vip

; 10934: 		{
; 10935: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_PILOT_LHS);

  000c4	6a 00		 push	 0
  000c6	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10936: 
; 10937: 			return;

  000d1	e9 83 01 00 00	 jmp	 $LN1@select_vip
$LN10@select_vip:

; 10938: 		}
; 10939: 
; 10940: 		if ((pilot_rhs_mfd_mode == VIPER_MFD_MODE_OFF) && (!viper_damage.pilot_rh_mfd))

  000d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 0
  000dd	75 1f		 jne	 SHORT $LN11@select_vip
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  000e4	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  000e7	83 e0 01	 and	 eax, 1
  000ea	75 12		 jne	 SHORT $LN11@select_vip

; 10941: 		{
; 10942: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_PILOT_RHS);

  000ec	6a 01		 push	 1
  000ee	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10943: 
; 10944: 			return;

  000f9	e9 5b 01 00 00	 jmp	 $LN1@select_vip
$LN11@select_vip:

; 10945: 		}
; 10946: 
; 10947: 		if (!viper_damage.pilot_lh_mfd)

  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00103	c1 e8 09	 shr	 eax, 9
  00106	83 e0 01	 and	 eax, 1
  00109	75 12		 jne	 SHORT $LN12@select_vip

; 10948: 		{
; 10949: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_PILOT_LHS);

  0010b	6a 00		 push	 0
  0010d	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10950: 
; 10951: 			return;

  00118	e9 3c 01 00 00	 jmp	 $LN1@select_vip
$LN12@select_vip:

; 10952: 		}
; 10953: 
; 10954: 		if (!viper_damage.pilot_rh_mfd)

  0011d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00122	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00125	83 e0 01	 and	 eax, 1
  00128	75 12		 jne	 SHORT $LN13@select_vip

; 10955: 		{
; 10956: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_PILOT_RHS);

  0012a	6a 01		 push	 1
  0012c	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10957: 
; 10958: 			return;

  00137	e9 1d 01 00 00	 jmp	 $LN1@select_vip
$LN13@select_vip:

; 10959: 		}
; 10960: 	}
; 10961: 	else

  0013c	e9 18 01 00 00	 jmp	 $LN1@select_vip
$LN2@select_vip:

; 10962: 	{
; 10963: 		////////////////////////////////////////
; 10964: 		//
; 10965: 		// CO-PILOT
; 10966: 		//
; 10967: 		////////////////////////////////////////
; 10968: 
; 10969: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!viper_damage.co_pilot_lh_mfd))

  00141	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  00148	75 1f		 jne	 SHORT $LN14@select_vip
  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0014f	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00152	83 e0 01	 and	 eax, 1
  00155	75 12		 jne	 SHORT $LN14@select_vip

; 10970: 		{
; 10971: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_CO_PILOT_LHS);

  00157	6a 02		 push	 2
  00159	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10972: 
; 10973: 			return;

  00164	e9 f0 00 00 00	 jmp	 $LN1@select_vip
$LN14@select_vip:

; 10974: 		}
; 10975: 
; 10976: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!viper_damage.co_pilot_rh_mfd))

  00169	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00170	75 1f		 jne	 SHORT $LN15@select_vip
  00172	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00177	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  0017a	83 e0 01	 and	 eax, 1
  0017d	75 12		 jne	 SHORT $LN15@select_vip

; 10977: 		{
; 10978: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_CO_PILOT_RHS);

  0017f	6a 03		 push	 3
  00181	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10979: 
; 10980: 			return;

  0018c	e9 c8 00 00 00	 jmp	 $LN1@select_vip
$LN15@select_vip:

; 10981: 		}
; 10982: 
; 10983: 		if
; 10984: 		(
; 10985: 			(co_pilot_lhs_mfd_mode == VIPER_MFD_MODE_FLIR) ||

  00191	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 2
  00198	74 09		 je	 SHORT $LN17@select_vip
  0019a	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 3
  001a1	75 12		 jne	 SHORT $LN16@select_vip
$LN17@select_vip:

; 10986: 			(co_pilot_lhs_mfd_mode == VIPER_MFD_MODE_DTV)
; 10987: 		)
; 10988: 		{
; 10989: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_CO_PILOT_LHS);

  001a3	6a 02		 push	 2
  001a5	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10990: 
; 10991: 			return;

  001b0	e9 a4 00 00 00	 jmp	 $LN1@select_vip
$LN16@select_vip:

; 10992: 		}
; 10993: 
; 10994: 		if
; 10995: 		(
; 10996: 			(co_pilot_rhs_mfd_mode == VIPER_MFD_MODE_FLIR) ||

  001b5	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 2
  001bc	74 09		 je	 SHORT $LN19@select_vip
  001be	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 3
  001c5	75 12		 jne	 SHORT $LN18@select_vip
$LN19@select_vip:

; 10997: 			(co_pilot_rhs_mfd_mode == VIPER_MFD_MODE_DTV)
; 10998: 		)
; 10999: 		{
; 11000: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_CO_PILOT_RHS);

  001c7	6a 03		 push	 3
  001c9	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 11001: 
; 11002: 			return;

  001d4	e9 80 00 00 00	 jmp	 $LN1@select_vip
$LN18@select_vip:

; 11003: 		}
; 11004: 
; 11005: 		if ((co_pilot_lhs_mfd_mode == VIPER_MFD_MODE_OFF) && (!viper_damage.co_pilot_lh_mfd))

  001d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 0
  001e0	75 1c		 jne	 SHORT $LN20@select_vip
  001e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  001e7	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  001ea	83 e0 01	 and	 eax, 1
  001ed	75 0f		 jne	 SHORT $LN20@select_vip

; 11006: 		{
; 11007: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_CO_PILOT_LHS);

  001ef	6a 02		 push	 2
  001f1	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 11008: 
; 11009: 			return;

  001fc	eb 5b		 jmp	 SHORT $LN1@select_vip
$LN20@select_vip:

; 11010: 		}
; 11011: 
; 11012: 		if ((co_pilot_rhs_mfd_mode == VIPER_MFD_MODE_OFF) && (!viper_damage.co_pilot_rh_mfd))

  001fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 0
  00205	75 1c		 jne	 SHORT $LN21@select_vip
  00207	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0020c	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  0020f	83 e0 01	 and	 eax, 1
  00212	75 0f		 jne	 SHORT $LN21@select_vip

; 11013: 		{
; 11014: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_CO_PILOT_RHS);

  00214	6a 03		 push	 3
  00216	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0021b	50		 push	 eax
  0021c	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 11015: 
; 11016: 			return;

  00221	eb 36		 jmp	 SHORT $LN1@select_vip
$LN21@select_vip:

; 11017: 		}
; 11018: 
; 11019: 		if (!viper_damage.co_pilot_lh_mfd)

  00223	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00228	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  0022b	83 e0 01	 and	 eax, 1
  0022e	75 0f		 jne	 SHORT $LN22@select_vip

; 11020: 		{
; 11021: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_CO_PILOT_LHS);

  00230	6a 02		 push	 2
  00232	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 11022: 
; 11023: 			return;

  0023d	eb 1a		 jmp	 SHORT $LN1@select_vip
$LN22@select_vip:

; 11024: 		}
; 11025: 
; 11026: 		if (!viper_damage.co_pilot_rh_mfd)

  0023f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00244	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00247	83 e0 01	 and	 eax, 1
  0024a	75 0d		 jne	 SHORT $LN1@select_vip

; 11027: 		{
; 11028: 			select_viper_mfd_mode (get_mfd_mode_for_eo_sensor (), VIPER_MFD_LOCATION_CO_PILOT_RHS);

  0024c	6a 03		 push	 3
  0024e	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode
$LN1@select_vip:

; 11029: 
; 11030: 			return;
; 11031: 		}
; 11032: 	}
; 11033: }

  00259	5f		 pop	 edi
  0025a	5e		 pop	 esi
  0025b	5b		 pop	 ebx
  0025c	8b e5		 mov	 esp, ebp
  0025e	5d		 pop	 ebp
  0025f	c3		 ret	 0
?select_viper_tads_mfd@@YGXXZ ENDP			; select_viper_tads_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?auto_page_viper_ase_mfd@@YGXXZ
_TEXT	SEGMENT
?auto_page_viper_ase_mfd@@YGXXZ PROC			; auto_page_viper_ase_mfd, COMDAT

; 10727: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10728: 	if (!get_global_ase_auto_page ())

  00009	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  00010	75 05		 jne	 SHORT $LN2@auto_page_

; 10729: 	{
; 10730: 		return;

  00012	e9 5d 02 00 00	 jmp	 $LN1@auto_page_
$LN2@auto_page_:

; 10731: 	}
; 10732: 
; 10733: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00017	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0001c	85 c0		 test	 eax, eax
  0001e	0f 85 33 01 00
	00		 jne	 $LN3@auto_page_

; 10734: 	{
; 10735: 		////////////////////////////////////////
; 10736: 		//
; 10737: 		// PILOT
; 10738: 		//
; 10739: 		////////////////////////////////////////
; 10740: 
; 10741: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!viper_damage.pilot_lh_mfd))

  00024	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0002b	75 1b		 jne	 SHORT $LN5@auto_page_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00032	c1 e8 09	 shr	 eax, 9
  00035	83 e0 01	 and	 eax, 1
  00038	75 0e		 jne	 SHORT $LN5@auto_page_

; 10742: 		{
; 10743: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_PILOT_LHS);

  0003a	6a 00		 push	 0
  0003c	6a 05		 push	 5
  0003e	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10744: 
; 10745: 			return;

  00043	e9 2c 02 00 00	 jmp	 $LN1@auto_page_
$LN5@auto_page_:

; 10746: 		}
; 10747: 
; 10748: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!viper_damage.pilot_rh_mfd))

  00048	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  0004f	75 1b		 jne	 SHORT $LN6@auto_page_
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00056	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00059	83 e0 01	 and	 eax, 1
  0005c	75 0e		 jne	 SHORT $LN6@auto_page_

; 10749: 		{
; 10750: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_PILOT_RHS);

  0005e	6a 01		 push	 1
  00060	6a 05		 push	 5
  00062	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10751: 
; 10752: 			return;

  00067	e9 08 02 00 00	 jmp	 $LN1@auto_page_
$LN6@auto_page_:

; 10753: 		}
; 10754: 
; 10755: 		if (pilot_lhs_mfd_mode == VIPER_MFD_MODE_ASE)

  0006c	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 5
  00073	75 05		 jne	 SHORT $LN7@auto_page_

; 10756: 		{
; 10757: 			return;

  00075	e9 fa 01 00 00	 jmp	 $LN1@auto_page_
$LN7@auto_page_:

; 10758: 		}
; 10759: 
; 10760: 		if (pilot_rhs_mfd_mode == VIPER_MFD_MODE_ASE)

  0007a	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 5
  00081	75 05		 jne	 SHORT $LN8@auto_page_

; 10761: 		{
; 10762: 			return;

  00083	e9 ec 01 00 00	 jmp	 $LN1@auto_page_
$LN8@auto_page_:

; 10763: 		}
; 10764: 
; 10765: 		if ((pilot_lhs_mfd_mode == VIPER_MFD_MODE_OFF) && (!viper_damage.pilot_lh_mfd))

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 0
  0008f	75 1b		 jne	 SHORT $LN9@auto_page_
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00096	c1 e8 09	 shr	 eax, 9
  00099	83 e0 01	 and	 eax, 1
  0009c	75 0e		 jne	 SHORT $LN9@auto_page_

; 10766: 		{
; 10767: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_PILOT_LHS);

  0009e	6a 00		 push	 0
  000a0	6a 05		 push	 5
  000a2	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10768: 
; 10769: 			return;

  000a7	e9 c8 01 00 00	 jmp	 $LN1@auto_page_
$LN9@auto_page_:

; 10770: 		}
; 10771: 
; 10772: 		if ((pilot_rhs_mfd_mode == VIPER_MFD_MODE_OFF) && (!viper_damage.pilot_rh_mfd))

  000ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 0
  000b3	75 1b		 jne	 SHORT $LN10@auto_page_
  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  000ba	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  000bd	83 e0 01	 and	 eax, 1
  000c0	75 0e		 jne	 SHORT $LN10@auto_page_

; 10773: 		{
; 10774: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_PILOT_RHS);

  000c2	6a 01		 push	 1
  000c4	6a 05		 push	 5
  000c6	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10775: 
; 10776: 			return;

  000cb	e9 a4 01 00 00	 jmp	 $LN1@auto_page_
$LN10@auto_page_:

; 10777: 		}
; 10778: 
; 10779: 		if ((!get_viper_mfd_has_focus (VIPER_MFD_LOCATION_PILOT_LHS)) && (!viper_damage.pilot_lh_mfd))

  000d0	6a 00		 push	 0
  000d2	e8 00 00 00 00	 call	 ?get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z ; get_viper_mfd_has_focus
  000d7	85 c0		 test	 eax, eax
  000d9	75 1b		 jne	 SHORT $LN11@auto_page_
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  000e0	c1 e8 09	 shr	 eax, 9
  000e3	83 e0 01	 and	 eax, 1
  000e6	75 0e		 jne	 SHORT $LN11@auto_page_

; 10780: 		{
; 10781: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_PILOT_LHS);

  000e8	6a 00		 push	 0
  000ea	6a 05		 push	 5
  000ec	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10782: 
; 10783: 			return;

  000f1	e9 7e 01 00 00	 jmp	 $LN1@auto_page_
$LN11@auto_page_:

; 10784: 		}
; 10785: 
; 10786: 		if ((!get_viper_mfd_has_focus (VIPER_MFD_LOCATION_PILOT_RHS)) && (!viper_damage.pilot_rh_mfd))

  000f6	6a 01		 push	 1
  000f8	e8 00 00 00 00	 call	 ?get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z ; get_viper_mfd_has_focus
  000fd	85 c0		 test	 eax, eax
  000ff	75 1b		 jne	 SHORT $LN12@auto_page_
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00106	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00109	83 e0 01	 and	 eax, 1
  0010c	75 0e		 jne	 SHORT $LN12@auto_page_

; 10787: 		{
; 10788: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_PILOT_RHS);

  0010e	6a 01		 push	 1
  00110	6a 05		 push	 5
  00112	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10789: 
; 10790: 			return;

  00117	e9 58 01 00 00	 jmp	 $LN1@auto_page_
$LN12@auto_page_:

; 10791: 		}
; 10792: 
; 10793: 		if (!viper_damage.pilot_lh_mfd)

  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00121	c1 e8 09	 shr	 eax, 9
  00124	83 e0 01	 and	 eax, 1
  00127	75 0e		 jne	 SHORT $LN13@auto_page_

; 10794: 		{
; 10795: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_PILOT_LHS);

  00129	6a 00		 push	 0
  0012b	6a 05		 push	 5
  0012d	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10796: 
; 10797: 			return;

  00132	e9 3d 01 00 00	 jmp	 $LN1@auto_page_
$LN13@auto_page_:

; 10798: 		}
; 10799: 
; 10800: 		if (!viper_damage.pilot_rh_mfd)

  00137	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0013c	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  0013f	83 e0 01	 and	 eax, 1
  00142	75 0e		 jne	 SHORT $LN14@auto_page_

; 10801: 		{
; 10802: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_PILOT_RHS);

  00144	6a 01		 push	 1
  00146	6a 05		 push	 5
  00148	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10803: 
; 10804: 			return;

  0014d	e9 22 01 00 00	 jmp	 $LN1@auto_page_
$LN14@auto_page_:

; 10805: 		}
; 10806: 	}
; 10807: 	else

  00152	e9 1d 01 00 00	 jmp	 $LN1@auto_page_
$LN3@auto_page_:

; 10808: 	{
; 10809: 		////////////////////////////////////////
; 10810: 		//
; 10811: 		// CO-PILOT
; 10812: 		//
; 10813: 		////////////////////////////////////////
; 10814: 
; 10815: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!viper_damage.co_pilot_lh_mfd))

  00157	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  0015e	75 1b		 jne	 SHORT $LN15@auto_page_
  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00165	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00168	83 e0 01	 and	 eax, 1
  0016b	75 0e		 jne	 SHORT $LN15@auto_page_

; 10816: 		{
; 10817: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_CO_PILOT_LHS);

  0016d	6a 02		 push	 2
  0016f	6a 05		 push	 5
  00171	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10818: 
; 10819: 			return;

  00176	e9 f9 00 00 00	 jmp	 $LN1@auto_page_
$LN15@auto_page_:

; 10820: 		}
; 10821: 
; 10822: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!viper_damage.co_pilot_rh_mfd))

  0017b	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00182	75 1b		 jne	 SHORT $LN16@auto_page_
  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00189	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  0018c	83 e0 01	 and	 eax, 1
  0018f	75 0e		 jne	 SHORT $LN16@auto_page_

; 10823: 		{
; 10824: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_CO_PILOT_RHS);

  00191	6a 03		 push	 3
  00193	6a 05		 push	 5
  00195	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10825: 
; 10826: 			return;

  0019a	e9 d5 00 00 00	 jmp	 $LN1@auto_page_
$LN16@auto_page_:

; 10827: 		}
; 10828: 
; 10829: 		if (co_pilot_lhs_mfd_mode == VIPER_MFD_MODE_ASE)

  0019f	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 5
  001a6	75 05		 jne	 SHORT $LN17@auto_page_

; 10830: 		{
; 10831: 			return;

  001a8	e9 c7 00 00 00	 jmp	 $LN1@auto_page_
$LN17@auto_page_:

; 10832: 		}
; 10833: 
; 10834: 		if (co_pilot_rhs_mfd_mode == VIPER_MFD_MODE_ASE)

  001ad	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 5
  001b4	75 05		 jne	 SHORT $LN18@auto_page_

; 10835: 		{
; 10836: 			return;

  001b6	e9 b9 00 00 00	 jmp	 $LN1@auto_page_
$LN18@auto_page_:

; 10837: 		}
; 10838: 
; 10839: 		if ((co_pilot_lhs_mfd_mode == VIPER_MFD_MODE_OFF) && (!viper_damage.co_pilot_lh_mfd))

  001bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 0
  001c2	75 1b		 jne	 SHORT $LN19@auto_page_
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  001c9	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  001cc	83 e0 01	 and	 eax, 1
  001cf	75 0e		 jne	 SHORT $LN19@auto_page_

; 10840: 		{
; 10841: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_CO_PILOT_LHS);

  001d1	6a 02		 push	 2
  001d3	6a 05		 push	 5
  001d5	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10842: 
; 10843: 			return;

  001da	e9 95 00 00 00	 jmp	 $LN1@auto_page_
$LN19@auto_page_:

; 10844: 		}
; 10845: 
; 10846: 		if ((co_pilot_rhs_mfd_mode == VIPER_MFD_MODE_OFF) && (!viper_damage.co_pilot_rh_mfd))

  001df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A, 0
  001e6	75 18		 jne	 SHORT $LN20@auto_page_
  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  001ed	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  001f0	83 e0 01	 and	 eax, 1
  001f3	75 0b		 jne	 SHORT $LN20@auto_page_

; 10847: 		{
; 10848: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_CO_PILOT_RHS);

  001f5	6a 03		 push	 3
  001f7	6a 05		 push	 5
  001f9	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10849: 
; 10850: 			return;

  001fe	eb 74		 jmp	 SHORT $LN1@auto_page_
$LN20@auto_page_:

; 10851: 		}
; 10852: 
; 10853: 		if ((!get_viper_mfd_has_focus (VIPER_MFD_LOCATION_CO_PILOT_LHS)) && (!viper_damage.co_pilot_lh_mfd))

  00200	6a 02		 push	 2
  00202	e8 00 00 00 00	 call	 ?get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z ; get_viper_mfd_has_focus
  00207	85 c0		 test	 eax, eax
  00209	75 18		 jne	 SHORT $LN21@auto_page_
  0020b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00210	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00213	83 e0 01	 and	 eax, 1
  00216	75 0b		 jne	 SHORT $LN21@auto_page_

; 10854: 		{
; 10855: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_CO_PILOT_LHS);

  00218	6a 02		 push	 2
  0021a	6a 05		 push	 5
  0021c	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10856: 
; 10857: 			return;

  00221	eb 51		 jmp	 SHORT $LN1@auto_page_
$LN21@auto_page_:

; 10858: 		}
; 10859: 
; 10860: 		if ((!get_viper_mfd_has_focus (VIPER_MFD_LOCATION_CO_PILOT_RHS)) && (!viper_damage.co_pilot_rh_mfd))

  00223	6a 03		 push	 3
  00225	e8 00 00 00 00	 call	 ?get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z ; get_viper_mfd_has_focus
  0022a	85 c0		 test	 eax, eax
  0022c	75 18		 jne	 SHORT $LN22@auto_page_
  0022e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00233	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00236	83 e0 01	 and	 eax, 1
  00239	75 0b		 jne	 SHORT $LN22@auto_page_

; 10861: 		{
; 10862: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_CO_PILOT_RHS);

  0023b	6a 03		 push	 3
  0023d	6a 05		 push	 5
  0023f	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10863: 
; 10864: 			return;

  00244	eb 2e		 jmp	 SHORT $LN1@auto_page_
$LN22@auto_page_:

; 10865: 		}
; 10866: 
; 10867: 		if (!viper_damage.co_pilot_lh_mfd)

  00246	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  0024b	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  0024e	83 e0 01	 and	 eax, 1
  00251	75 0b		 jne	 SHORT $LN23@auto_page_

; 10868: 		{
; 10869: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_CO_PILOT_LHS);

  00253	6a 02		 push	 2
  00255	6a 05		 push	 5
  00257	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10870: 
; 10871: 			return;

  0025c	eb 16		 jmp	 SHORT $LN1@auto_page_
$LN23@auto_page_:

; 10872: 		}
; 10873: 
; 10874: 		if (!viper_damage.co_pilot_rh_mfd)

  0025e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?viper_damage@@3TVIPER_DAMAGE_FLAGS@@A ; viper_damage
  00263	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00266	83 e0 01	 and	 eax, 1
  00269	75 09		 jne	 SHORT $LN1@auto_page_

; 10875: 		{
; 10876: 			select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_CO_PILOT_RHS);

  0026b	6a 03		 push	 3
  0026d	6a 05		 push	 5
  0026f	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode
$LN1@auto_page_:

; 10877: 
; 10878: 			return;
; 10879: 		}
; 10880: 	}
; 10881: }

  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	5b		 pop	 ebx
  00277	8b e5		 mov	 esp, ebp
  00279	5d		 pop	 ebp
  0027a	c3		 ret	 0
?auto_page_viper_ase_mfd@@YGXXZ ENDP			; auto_page_viper_ase_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?toggle_viper_ase_auto_page@@YGXXZ
_TEXT	SEGMENT
?toggle_viper_ase_auto_page@@YGXXZ PROC			; toggle_viper_ase_auto_page, COMDAT

; 10718: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10719: 	set_global_ase_auto_page (get_global_ase_auto_page () ^ 1);

  00009	a1 64 03 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868
  0000e	83 f0 01	 xor	 eax, 1
  00011	a3 64 03 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, eax

; 10720: }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?toggle_viper_ase_auto_page@@YGXXZ ENDP			; toggle_viper_ase_auto_page
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_previous_viper_co_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_viper_co_pilot_tsd_declutter_level@@YGXXZ PROC ; select_previous_viper_co_pilot_tsd_declutter_level, COMDAT

; 10698: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10699: 	if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 10700: 	{
; 10701: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 10702: 	}
; 10703: 	else if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 10704: 	{
; 10705: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 10706: 	}
; 10707: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 10708: 	{
; 10709: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 10710: 	}
; 10711: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_viper_co_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_previous_viper_co_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_previous_viper_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_viper_pilot_tsd_declutter_level@@YGXXZ PROC ; select_previous_viper_pilot_tsd_declutter_level, COMDAT

; 10678: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10679: 	if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 10680: 	{
; 10681: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 10682: 	}
; 10683: 	else if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 10684: 	{
; 10685: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 10686: 	}
; 10687: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 10688: 	{
; 10689: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 10690: 	}
; 10691: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_viper_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_previous_viper_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_next_viper_co_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_viper_co_pilot_tsd_declutter_level@@YGXXZ PROC ; select_next_viper_co_pilot_tsd_declutter_level, COMDAT

; 10658: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10659: 	if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 10660: 	{
; 10661: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 10662: 	}
; 10663: 	else if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 10664: 	{
; 10665: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 10666: 	}
; 10667: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 10668: 	{
; 10669: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 10670: 	}
; 10671: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_viper_co_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_next_viper_co_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_next_viper_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_viper_pilot_tsd_declutter_level@@YGXXZ PROC ; select_next_viper_pilot_tsd_declutter_level, COMDAT

; 10638: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10639: 	if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 10640: 	{
; 10641: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 10642: 	}
; 10643: 	else if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 10644: 	{
; 10645: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 10646: 	}
; 10647: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 10648: 	{
; 10649: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 10650: 	}
; 10651: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_viper_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_next_viper_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_previous_viper_co_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_viper_co_pilot_tsd_ase_range@@YGXXZ PROC ; select_previous_viper_co_pilot_tsd_ase_range, COMDAT

; 10618: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10619: 	if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 10620: 	{
; 10621: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 10622: 	}
; 10623: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 10624: 	{
; 10625: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 10626: 	}
; 10627: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 10628: 	{
; 10629: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 10630: 	}
; 10631: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_viper_co_pilot_tsd_ase_range@@YGXXZ ENDP ; select_previous_viper_co_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_previous_viper_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_viper_pilot_tsd_ase_range@@YGXXZ PROC	; select_previous_viper_pilot_tsd_ase_range, COMDAT

; 10598: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10599: 	if (pilot_tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 10600: 	{
; 10601: 		pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 10602: 	}
; 10603: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 10604: 	{
; 10605: 		pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 10606: 	}
; 10607: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 10608: 	{
; 10609: 		pilot_tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 10610: 	}
; 10611: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_viper_pilot_tsd_ase_range@@YGXXZ ENDP	; select_previous_viper_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_next_viper_co_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_viper_co_pilot_tsd_ase_range@@YGXXZ PROC	; select_next_viper_co_pilot_tsd_ase_range, COMDAT

; 10578: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10579: 	if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 10580: 	{
; 10581: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 10582: 	}
; 10583: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 10584: 	{
; 10585: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 10586: 	}
; 10587: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 10588: 	{
; 10589: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 10590: 	}
; 10591: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_viper_co_pilot_tsd_ase_range@@YGXXZ ENDP	; select_next_viper_co_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_next_viper_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_viper_pilot_tsd_ase_range@@YGXXZ PROC	; select_next_viper_pilot_tsd_ase_range, COMDAT

; 10558: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10559: 	if (pilot_tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 10560: 	{
; 10561: 		pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 10562: 	}
; 10563: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 10564: 	{
; 10565: 		pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 10566: 	}
; 10567: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 10568: 	{
; 10569: 		pilot_tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 10570: 	}
; 10571: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_viper_pilot_tsd_ase_range@@YGXXZ ENDP	; select_next_viper_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?toggle_viper_mfd_on_off@@YGXW4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_mfd_location$ = 8					; size = 4
?toggle_viper_mfd_on_off@@YGXW4VIPER_MFD_LOCATIONS@@@Z PROC ; toggle_viper_mfd_on_off, COMDAT

; 10540: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10541: 	ASSERT (viper_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@toggle_vip
  0000f	83 7d 08 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00013	7c 18		 jl	 SHORT $LN2@toggle_vip
$LN3@toggle_vip:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??toggle_viper_mfd_on_off@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@toggle_vip:

; 10542: 
; 10543: 	if (*mfd_mode_ptrs[mfd_location] != VIPER_MFD_MODE_OFF)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4VIPER_MFD_MODES@@A[eax*4]
  00037	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0003a	74 0d		 je	 SHORT $LN4@toggle_vip

; 10544: 	{
; 10545: 		select_viper_mfd_mode (VIPER_MFD_MODE_OFF, mfd_location);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10546: 	}
; 10547: 	else

  00047	eb 09		 jmp	 SHORT $LN1@toggle_vip
$LN4@toggle_vip:

; 10548: 	{
; 10549: 		select_next_viper_mfd (mfd_location);

  00049	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?select_next_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ; select_next_viper_mfd
$LN1@toggle_vip:

; 10550: 	}
; 10551: }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?toggle_viper_mfd_on_off@@YGXW4VIPER_MFD_LOCATIONS@@@Z ENDP ; toggle_viper_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_previous_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_previous_mfd_mode$ = -12				; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_previous_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z PROC ; select_previous_viper_mfd, COMDAT

; 10508: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10509: 	viper_mfd_modes
; 10510: 		*mfd_mode_ptr1,
; 10511: 		*mfd_mode_ptr2,
; 10512: 		previous_mfd_mode;
; 10513: 
; 10514: 	ASSERT (viper_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_pre
  0000f	83 7d 08 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00013	7c 18		 jl	 SHORT $LN2@select_pre
$LN3@select_pre:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_pre:

; 10515: 
; 10516: 	mfd_mode_ptr1 = mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4VIPER_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 10517: 
; 10518: 	mfd_mode_ptr2 = opposite_mfd_mode_ptrs[mfd_location];

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_mfd_mode_ptrs@@3PAPAW4VIPER_MFD_MODES@@A[eax*4]
  00044	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 10519: 
; 10520: 	previous_mfd_mode = get_previous_mfd_mode (*mfd_mode_ptr1, mfd_location);

  00047	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W41@W4VIPER_MFD_LOCATIONS@@@Z ; get_previous_mfd_mode
  00056	89 45 f4	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 10521: 
; 10522: 	if (previous_mfd_mode != VIPER_MFD_MODE_DAMAGED)

  00059	83 7d f4 01	 cmp	 DWORD PTR _previous_mfd_mode$[ebp], 1
  0005d	74 3c		 je	 SHORT $LN4@select_pre

; 10523: 	{
; 10524: 		if (previous_mfd_mode == *mfd_mode_ptr2)

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  00065	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00067	75 10		 jne	 SHORT $LN5@select_pre

; 10525: 		{
; 10526: 			previous_mfd_mode = get_previous_mfd_mode (previous_mfd_mode, mfd_location);

  00069	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W41@W4VIPER_MFD_LOCATIONS@@@Z ; get_previous_mfd_mode
  00076	89 45 f4	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax
$LN5@select_pre:

; 10527: 		}
; 10528: 
; 10529: 		ASSERT (previous_mfd_mode != *mfd_mode_ptr2);

  00079	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  0007f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00081	75 18		 jne	 SHORT $LN4@select_pre
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00088	83 c0 15	 add	 eax, 21			; 00000015H
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@
  00096	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_pre:

; 10530: 	}
; 10531: 
; 10532: 	select_viper_mfd_mode (previous_mfd_mode, mfd_location);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10533: }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?select_previous_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ENDP ; select_previous_viper_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_next_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_next_mfd_mode$ = -12					; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_next_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z PROC ; select_next_viper_mfd, COMDAT

; 10476: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10477: 	viper_mfd_modes
; 10478: 		*mfd_mode_ptr1,
; 10479: 		*mfd_mode_ptr2,
; 10480: 		next_mfd_mode;
; 10481: 
; 10482: 	ASSERT (viper_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_nex
  0000f	83 7d 08 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00013	7c 18		 jl	 SHORT $LN2@select_nex
$LN3@select_nex:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_nex:

; 10483: 
; 10484: 	mfd_mode_ptr1 = mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4VIPER_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 10485: 
; 10486: 	mfd_mode_ptr2 = opposite_mfd_mode_ptrs[mfd_location];

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_mfd_mode_ptrs@@3PAPAW4VIPER_MFD_MODES@@A[eax*4]
  00044	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 10487: 
; 10488: 	next_mfd_mode = get_next_mfd_mode (*mfd_mode_ptr1, mfd_location);

  00047	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W41@W4VIPER_MFD_LOCATIONS@@@Z ; get_next_mfd_mode
  00056	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 10489: 
; 10490: 	if (next_mfd_mode != VIPER_MFD_MODE_DAMAGED)

  00059	83 7d f4 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  0005d	74 3c		 je	 SHORT $LN4@select_nex

; 10491: 	{
; 10492: 		if (next_mfd_mode == *mfd_mode_ptr2)

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00065	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00067	75 10		 jne	 SHORT $LN5@select_nex

; 10493: 		{
; 10494: 			next_mfd_mode = get_next_mfd_mode (next_mfd_mode, mfd_location);

  00069	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W41@W4VIPER_MFD_LOCATIONS@@@Z ; get_next_mfd_mode
  00076	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN5@select_nex:

; 10495: 		}
; 10496: 
; 10497: 		ASSERT (next_mfd_mode != *mfd_mode_ptr2);

  00079	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  0007f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00081	75 18		 jne	 SHORT $LN4@select_nex
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z@4JA
  00088	83 c0 15	 add	 eax, 21			; 00000015H
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@
  00096	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_nex:

; 10498: 	}
; 10499: 
; 10500: 	select_viper_mfd_mode (next_mfd_mode, mfd_location);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 10501: }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?select_next_viper_mfd@@YGXW4VIPER_MFD_LOCATIONS@@@Z ENDP ; select_next_viper_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_default_mfd_mode$ = -12				; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z PROC ; select_viper_mfd_mode, COMDAT

; 10216: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10217: 	viper_mfd_modes
; 10218: 		*mfd_mode_ptr1,
; 10219: 		*mfd_mode_ptr2,
; 10220: 		default_mfd_mode;
; 10221: 
; 10222: 	ASSERT (viper_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_vip
  0000f	83 7d 08 0b	 cmp	 DWORD PTR _mfd_mode$[ebp], 11 ; 0000000bH
  00013	7c 18		 jl	 SHORT $LN2@select_vip
$LN3@select_vip:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IHBMFDMF@viper_mfd_mode_valid?5?$CImfd_mode?$CJ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_vip:

; 10223: 
; 10224: 	ASSERT (viper_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN5@select_vip
  00033	83 7d 0c 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00037	7c 18		 jl	 SHORT $LN4@select_vip
$LN5@select_vip:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 08	 add	 eax, 8
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_vip:

; 10225: 
; 10226: 	debug_colour_log (DEBUG_COLOUR_AMBER, "%s = %s", viper_mfd_location_names[mfd_location], viper_mfd_mode_names[mfd_mode]);

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?viper_mfd_mode_names@@3PAPADA[eax*4]
  0005b	51		 push	 ecx
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _mfd_location$[ebp]
  0005f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?viper_mfd_location_names@@3PAPADA[edx*4]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
  0006c	6a 17		 push	 23			; 00000017H
  0006e	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 10227: 
; 10228: 	mfd_mode_ptr1 = mfd_mode_ptrs[mfd_location];

  00076	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00079	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4VIPER_MFD_MODES@@A[eax*4]
  00080	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 10229: 
; 10230: 	mfd_mode_ptr2 = opposite_mfd_mode_ptrs[mfd_location];

  00083	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00086	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_mfd_mode_ptrs@@3PAPAW4VIPER_MFD_MODES@@A[eax*4]
  0008d	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 10231: 
; 10232: 	if ((mfd_mode == VIPER_MFD_MODE_DAMAGED) && (*mfd_mode_ptr1 == VIPER_MFD_MODE_OFF))

  00090	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  00094	75 0f		 jne	 SHORT $LN6@select_vip
  00096	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  00099	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009c	75 07		 jne	 SHORT $LN6@select_vip

; 10233: 	{
; 10234: 		mfd_mode = VIPER_MFD_MODE_OFF;

  0009e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 0
$LN6@select_vip:

; 10235: 	}
; 10236: 
; 10237: 	if (get_mfd_damage (mfd_location))

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?get_mfd_damage@@YGHW4VIPER_MFD_LOCATIONS@@@Z ; get_mfd_damage
  000ae	85 c0		 test	 eax, eax
  000b0	74 0d		 je	 SHORT $LN7@select_vip

; 10238: 	{
; 10239: 		if (mfd_mode != VIPER_MFD_MODE_OFF)

  000b2	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000b6	74 07		 je	 SHORT $LN7@select_vip

; 10240: 		{
; 10241: 			mfd_mode = VIPER_MFD_MODE_DAMAGED;

  000b8	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN7@select_vip:

; 10242: 		}
; 10243: 	}
; 10244: 
; 10245: 	if ((mfd_mode != VIPER_MFD_MODE_OFF) && (mfd_mode != VIPER_MFD_MODE_DAMAGED) && (mfd_mode == *mfd_mode_ptr2))

  000bf	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000c3	74 5f		 je	 SHORT $LN9@select_vip
  000c5	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  000c9	74 59		 je	 SHORT $LN9@select_vip
  000cb	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  000d1	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000d3	75 4f		 jne	 SHORT $LN9@select_vip

; 10246: 	{
; 10247: 		default_mfd_mode = get_default_mfd_mode (opposite_mfd_locations[mfd_location]);

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000d8	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_mfd_locations@@3PAW4VIPER_MFD_LOCATIONS@@A[eax*4]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 ?get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; get_default_mfd_mode
  000e5	89 45 f4	 mov	 DWORD PTR _default_mfd_mode$[ebp], eax

; 10248: 
; 10249: 		if (default_mfd_mode == mfd_mode)

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _default_mfd_mode$[ebp]
  000eb	3b 45 08	 cmp	 eax, DWORD PTR _mfd_mode$[ebp]
  000ee	75 2c		 jne	 SHORT $LN10@select_vip

; 10250: 		{
; 10251: 			default_mfd_mode = get_default_mfd_mode (mfd_location);

  000f0	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?get_default_mfd_mode@@YG?AW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; get_default_mfd_mode
  000f9	89 45 f4	 mov	 DWORD PTR _default_mfd_mode$[ebp], eax

; 10252: 
; 10253: 			ASSERT (default_mfd_mode != mfd_mode);

  000fc	8b 45 f4	 mov	 eax, DWORD PTR _default_mfd_mode$[ebp]
  000ff	3b 45 08	 cmp	 eax, DWORD PTR _mfd_mode$[ebp]
  00102	75 18		 jne	 SHORT $LN10@select_vip
  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z@4JA
  00109	83 c0 25	 add	 eax, 37			; 00000025H
  0010c	50		 push	 eax
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@
  00117	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@select_vip:

; 10254: 		}
; 10255: 
; 10256: 		*mfd_mode_ptr2 = default_mfd_mode;

  0011c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0011f	8b 4d f4	 mov	 ecx, DWORD PTR _default_mfd_mode$[ebp]
  00122	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@select_vip:

; 10257: 	}
; 10258: 
; 10259: 	*mfd_mode_ptr1 = mfd_mode;

  00124	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  0012a	89 08		 mov	 DWORD PTR [eax], ecx

; 10260: }

  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 08 00	 ret	 8
?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ENDP ; select_viper_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv77 = -76						; size = 4
tv75 = -76						; size = 4
tv73 = -76						; size = 4
_mfd_mode$ = -8						; size = 4
_result$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z PROC ; get_viper_mfd_has_focus, COMDAT

; 10012: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10013: 	int
; 10014: 		result;
; 10015: 
; 10016: 	viper_mfd_modes
; 10017: 		mfd_mode;
; 10018: 
; 10019: 	ASSERT (viper_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_viper_
  0000f	83 7d 08 06	 cmp	 DWORD PTR _mfd_location$[ebp], 6
  00013	7c 18		 jl	 SHORT $LN4@get_viper_
$LN5@get_viper_:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 07	 add	 eax, 7
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGHJGBC@viper_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_viper_:

; 10020: 
; 10021: 	mfd_mode = *mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4VIPER_MFD_MODES@@A[eax*4]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	89 55 f8	 mov	 DWORD PTR _mfd_mode$[ebp], edx

; 10022: 
; 10023: 	switch (target_acquisition_system)

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  00041	89 45 b4	 mov	 DWORD PTR tv73[ebp], eax
  00044	83 7d b4 03	 cmp	 DWORD PTR tv73[ebp], 3
  00048	74 08		 je	 SHORT $LN6@get_viper_
  0004a	83 7d b4 04	 cmp	 DWORD PTR tv73[ebp], 4
  0004e	74 20		 je	 SHORT $LN7@get_viper_
  00050	eb 3c		 jmp	 SHORT $LN8@get_viper_
$LN6@get_viper_:

; 10024: 	{
; 10025: 		////////////////////////////////////////
; 10026: 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 10027: 		////////////////////////////////////////
; 10028: 		{
; 10029: 			result = (mfd_mode == VIPER_MFD_MODE_FLIR);

  00052	83 7d f8 02	 cmp	 DWORD PTR _mfd_mode$[ebp], 2
  00056	75 09		 jne	 SHORT $LN10@get_viper_
  00058	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
  0005f	eb 07		 jmp	 SHORT $LN11@get_viper_
$LN10@get_viper_:
  00061	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN11@get_viper_:
  00068	8b 45 b4	 mov	 eax, DWORD PTR tv75[ebp]
  0006b	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10030: 
; 10031: 			break;

  0006e	eb 25		 jmp	 SHORT $LN2@get_viper_
$LN7@get_viper_:

; 10032: 		}
; 10033: 		////////////////////////////////////////
; 10034: 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 10035: 		////////////////////////////////////////
; 10036: 		{
; 10037: 			result = (mfd_mode == VIPER_MFD_MODE_DTV);

  00070	83 7d f8 03	 cmp	 DWORD PTR _mfd_mode$[ebp], 3
  00074	75 09		 jne	 SHORT $LN12@get_viper_
  00076	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0007d	eb 07		 jmp	 SHORT $LN13@get_viper_
$LN12@get_viper_:
  0007f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN13@get_viper_:
  00086	8b 45 b4	 mov	 eax, DWORD PTR tv77[ebp]
  00089	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10038: 
; 10039: 			break;

  0008c	eb 07		 jmp	 SHORT $LN2@get_viper_
$LN8@get_viper_:

; 10040: 		}
; 10041: 		////////////////////////////////////////
; 10042: 		default:
; 10043: 		////////////////////////////////////////
; 10044: 		{
; 10045: 			result = FALSE;

  0008e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@get_viper_:

; 10046: 
; 10047: 			break;
; 10048: 		}
; 10049: 	}
; 10050: 
; 10051: 	return (result);

  00095	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]

; 10052: }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
?get_viper_mfd_has_focus@@YGHW4VIPER_MFD_LOCATIONS@@@Z ENDP ; get_viper_mfd_has_focus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_overlaid_viper_mfd@@YGXXZ
_TEXT	SEGMENT
?draw_overlaid_viper_mfd@@YGXXZ PROC			; draw_overlaid_viper_mfd, COMDAT

; 9872 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9873 : 	////////////////////////////////////////
; 9874 : 	//
; 9875 : 	// SELECT LARGE OR SMALL MFD TEXTURES
; 9876 : 	//
; 9877 : 	////////////////////////////////////////
; 9878 : 
; 9879 : //   if (application_video_width >= 1280)
; 9880 :    {
; 9881 :       draw_large_mfd = TRUE;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 9882 : 
; 9883 :       pilot_lhs_mfd_texture_screen = large_pilot_lhs_mfd_texture_screen;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 9884 :       pilot_rhs_mfd_texture_screen = large_pilot_rhs_mfd_texture_screen;

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00022	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 9885 :       pilot_dfd_texture_screen = large_pilot_dfd_texture_screen;

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  0002c	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_dfd_texture_screen@@3PAUSCREEN@@A, eax

; 9886 : 
; 9887 :       co_pilot_lhs_mfd_texture_screen = large_co_pilot_lhs_mfd_texture_screen;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 9888 :       co_pilot_rhs_mfd_texture_screen = large_co_pilot_rhs_mfd_texture_screen;

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00040	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 9889 :       co_pilot_dfd_texture_screen = large_co_pilot_dfd_texture_screen;

  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_dfd_texture_screen@@3PAUSCREEN@@A, eax

; 9890 : 
; 9891 :       eo_3d_texture_screen = large_eo_3d_texture_screen;

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00054	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 9892 :    }
; 9893 : /*   else
; 9894 :    {
; 9895 :       draw_large_mfd = FALSE;
; 9896 : 
; 9897 :       pilot_lhs_mfd_texture_screen = small_pilot_lhs_mfd_texture_screen;
; 9898 :       pilot_rhs_mfd_texture_screen = small_pilot_rhs_mfd_texture_screen;
; 9899 :       pilot_dfd_texture_screen = small_pilot_dfd_texture_screen;
; 9900 : 
; 9901 :       co_pilot_lhs_mfd_texture_screen = small_co_pilot_lhs_mfd_texture_screen;
; 9902 :       co_pilot_rhs_mfd_texture_screen = small_co_pilot_rhs_mfd_texture_screen;
; 9903 :       co_pilot_dfd_texture_screen = small_co_pilot_dfd_texture_screen;
; 9904 : 
; 9905 :       eo_3d_texture_screen = small_eo_3d_texture_screen;
; 9906 :    }
; 9907 : */
; 9908 : 	set_system_texture_screen (pilot_lhs_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD2);

  00059	68 55 06 00 00	 push	 1621			; 00000655H
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 9909 : 	set_system_texture_screen (pilot_rhs_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD3);

  00069	68 56 06 00 00	 push	 1622			; 00000656H
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 9910 : 	set_system_texture_screen (pilot_dfd_texture_screen, TEXTURE_INDEX_COMANCHE_TEXT);

  00079	68 5d 06 00 00	 push	 1629			; 0000065dH
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_dfd_texture_screen@@3PAUSCREEN@@A
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 9911 : 
; 9912 : 	set_system_texture_screen (co_pilot_lhs_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD6);

  00089	68 59 06 00 00	 push	 1625			; 00000659H
  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 9913 : 	set_system_texture_screen (co_pilot_rhs_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD7);

  00099	68 5a 06 00 00	 push	 1626			; 0000065aH
  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 9914 : 	set_system_texture_screen (co_pilot_dfd_texture_screen, TEXTURE_INDEX_COMANCHE_TEXT2);

  000a9	68 5e 06 00 00	 push	 1630			; 0000065eH
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 9915 : 
; 9916 : 	////////////////////////////////////////
; 9917 : 	//
; 9918 : 	// SELECT VISIBLE DISPLAYS
; 9919 : 	//
; 9920 : 	////////////////////////////////////////
; 9921 : 
; 9922 :    if (get_crew_role () == CREW_ROLE_PILOT)

  000b9	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  000be	85 c0		 test	 eax, eax
  000c0	75 0c		 jne	 SHORT $LN2@draw_overl

; 9923 :    {
; 9924 :       display_mask = PILOT_LHS_MFD | PILOT_RHS_MFD;

  000c2	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 3

; 9925 :    }
; 9926 :    else

  000cc	eb 0a		 jmp	 SHORT $LN3@draw_overl
$LN2@draw_overl:

; 9927 :    {
; 9928 :       display_mask = CO_PILOT_LHS_MFD | CO_PILOT_RHS_MFD;

  000ce	c7 05 00 00 00
	00 60 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 96 ; 00000060H
$LN3@draw_overl:

; 9929 :    }
; 9930 : 
; 9931 : 	////////////////////////////////////////
; 9932 : 	//
; 9933 : 	// SET UP MFD 2D ENVIRONMENT
; 9934 : 	//
; 9935 : 	////////////////////////////////////////
; 9936 : 
; 9937 : 	set_2d_active_environment (mfd_env);

  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 9938 : 
; 9939 : 	//
; 9940 : 	// window
; 9941 : 	//
; 9942 : 
; 9943 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  000e3	51		 push	 ecx
  000e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f1	51		 push	 ecx
  000f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ff	51		 push	 ecx
  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	51		 push	 ecx
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 9944 : 
; 9945 : 	//
; 9946 : 	// viewport
; 9947 : 	//
; 9948 : 
; 9949 : 	if (draw_large_mfd)

  00126	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0012d	74 1c		 je	 SHORT $LN4@draw_overl

; 9950 : 	{
; 9951 : 		mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  0012f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  00137	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 9952 : 
; 9953 : 		int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  0013f	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 9954 : 	}
; 9955 : 	else

  00149	eb 1a		 jmp	 SHORT $LN5@draw_overl
$LN4@draw_overl:

; 9956 : 	{
; 9957 : 		mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  0014b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00153	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 9958 : 
; 9959 : 		int_mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  0015b	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 128 ; 00000080H
$LN5@draw_overl:

; 9960 : 	}
; 9961 : 
; 9962 : 	mfd_viewport_x_org = mfd_viewport_size * 0.5;

  00165	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0016d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00175	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00179	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 9963 : 
; 9964 : 	mfd_viewport_y_org = mfd_viewport_size * 0.5;

  00181	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00189	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00191	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00195	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 9965 : 
; 9966 : 	mfd_viewport_x_min = 0.0;

  0019d	0f 57 c0	 xorps	 xmm0, xmm0
  001a0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 9967 : 
; 9968 : 	mfd_viewport_y_min = 0.0;

  001a8	0f 57 c0	 xorps	 xmm0, xmm0
  001ab	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 9969 : 
; 9970 : 	mfd_viewport_x_max = mfd_viewport_size - 0.001;

  001b3	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001bb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 9971 : 
; 9972 : 	mfd_viewport_y_max = mfd_viewport_size - 0.001;

  001cf	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001d7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 9973 : 
; 9974 : 	////////////////////////////////////////
; 9975 : 	//
; 9976 : 	// DRAW DISPLAYS
; 9977 : 	//
; 9978 : 	////////////////////////////////////////
; 9979 : 
; 9980 : 	if (display_mask & PILOT_LHS_MFD)

  001eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  001f0	83 e0 01	 and	 eax, 1
  001f3	74 14		 je	 SHORT $LN6@draw_overl

; 9981 : 	{
; 9982 :       draw_overlaid_mfd (pilot_lhs_mfd_texture_screen, pilot_lhs_mfd_mode, VIPER_MFD_LOCATION_PILOT_LHS);

  001f5	6a 00		 push	 0
  001f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  001fc	50		 push	 eax
  001fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00203	51		 push	 ecx
  00204	e8 00 00 00 00	 call	 ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; draw_overlaid_mfd
$LN6@draw_overl:

; 9983 : 	}
; 9984 : 
; 9985 : 	if (display_mask & PILOT_RHS_MFD)

  00209	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0020e	83 e0 02	 and	 eax, 2
  00211	74 14		 je	 SHORT $LN7@draw_overl

; 9986 : 	{
; 9987 :       draw_overlaid_mfd (pilot_rhs_mfd_texture_screen, pilot_rhs_mfd_mode, VIPER_MFD_LOCATION_PILOT_RHS);

  00213	6a 01		 push	 1
  00215	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  0021a	50		 push	 eax
  0021b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00221	51		 push	 ecx
  00222	e8 00 00 00 00	 call	 ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; draw_overlaid_mfd
$LN7@draw_overl:

; 9988 : 	}
; 9989 : 
; 9990 : 	if (display_mask & CO_PILOT_LHS_MFD)

  00227	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0022c	83 e0 20	 and	 eax, 32			; 00000020H
  0022f	74 14		 je	 SHORT $LN8@draw_overl

; 9991 : 	{
; 9992 :       draw_overlaid_mfd (co_pilot_lhs_mfd_texture_screen, co_pilot_lhs_mfd_mode, VIPER_MFD_LOCATION_CO_PILOT_LHS);

  00231	6a 02		 push	 2
  00233	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  00238	50		 push	 eax
  00239	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0023f	51		 push	 ecx
  00240	e8 00 00 00 00	 call	 ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; draw_overlaid_mfd
$LN8@draw_overl:

; 9993 : 	}
; 9994 : 
; 9995 : 	if (display_mask & CO_PILOT_RHS_MFD)

  00245	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0024a	83 e0 40	 and	 eax, 64			; 00000040H
  0024d	74 14		 je	 SHORT $LN9@draw_overl

; 9996 : 	{
; 9997 :       draw_overlaid_mfd (co_pilot_rhs_mfd_texture_screen, co_pilot_rhs_mfd_mode, VIPER_MFD_LOCATION_CO_PILOT_RHS);

  0024f	6a 03		 push	 3
  00251	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  00256	50		 push	 eax
  00257	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0025d	51		 push	 ecx
  0025e	e8 00 00 00 00	 call	 ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; draw_overlaid_mfd
$LN9@draw_overl:

; 9998 : 	}
; 9999 : }

  00263	5f		 pop	 edi
  00264	5e		 pop	 esi
  00265	5b		 pop	 ebx
  00266	8b e5		 mov	 esp, ebp
  00268	5d		 pop	 ebp
  00269	c3		 ret	 0
?draw_overlaid_viper_mfd@@YGXXZ ENDP			; draw_overlaid_viper_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_viper_full_screen_display@@YGXXZ
_TEXT	SEGMENT
tv270 = -340						; size = 4
tv230 = -340						; size = 4
tv73 = -340						; size = 4
tv65 = -340						; size = 4
_store_mfd_colour$1 = -272				; size = 4
_specular$ = -268					; size = 4
_colour$ = -264						; size = 4
_quad$ = -260						; size = 256
_mode$ = -4						; size = 4
?draw_viper_full_screen_display@@YGXXZ PROC		; draw_viper_full_screen_display, COMDAT

; 8967 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 8968 : 	viper_mfd_modes
; 8969 : 		mode;
; 8970 : 
; 8971 : 	vertex
; 8972 : 		quad[4];
; 8973 : 
; 8974 : 	real_colour
; 8975 : 		colour,
; 8976 : 		specular;
; 8977 : 
; 8978 : 	////////////////////////////////////////
; 8979 : 	//
; 8980 : 	// determine if full screen display is required
; 8981 : 	//
; 8982 : 	////////////////////////////////////////
; 8983 : 
; 8984 : 	if (d3d_can_render_to_texture)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00013	74 05		 je	 SHORT $LN10@draw_viper

; 8985 : 	{
; 8986 : 		return;

  00015	e9 8e 0a 00 00	 jmp	 $LN1@draw_viper
$LN10@draw_viper:

; 8987 : 	}
; 8988 : 
; 8989 : 	switch (get_view_mode ())

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  0001f	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00025	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  0002b	83 e9 26	 sub	 ecx, 38			; 00000026H
  0002e	89 8d ac fe ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
  00034	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv65[ebp], 3
  0003b	77 35		 ja	 SHORT $LN15@draw_viper
  0003d	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00043	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN28@draw_viper[edx*4]
$LN11@draw_viper:

; 8990 : 	{
; 8991 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 8992 : 		{
; 8993 : 			mode = pilot_lhs_mfd_mode;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  0004f	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 8994 : 
; 8995 : 			break;

  00052	eb 31		 jmp	 SHORT $LN2@draw_viper
$LN12@draw_viper:

; 8996 : 		}
; 8997 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 8998 : 		{
; 8999 : 			mode = pilot_rhs_mfd_mode;

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  00059	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 9000 : 
; 9001 : 			break;

  0005c	eb 27		 jmp	 SHORT $LN2@draw_viper
$LN13@draw_viper:

; 9002 : 		}
; 9003 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 9004 : 		{
; 9005 : 			mode = co_pilot_lhs_mfd_mode;

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  00063	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 9006 : 
; 9007 : 			break;

  00066	eb 1d		 jmp	 SHORT $LN2@draw_viper
$LN14@draw_viper:

; 9008 : 		}
; 9009 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 9010 : 		{
; 9011 : 			mode = co_pilot_rhs_mfd_mode;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  0006d	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 9012 : 
; 9013 : 			break;

  00070	eb 13		 jmp	 SHORT $LN2@draw_viper
$LN15@draw_viper:

; 9014 : 		}
; 9015 : 		default:
; 9016 : 		{
; 9017 : 			debug_fatal ("Invalid view mode = %d", get_view_mode ());

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@
  0007d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00082	83 c4 08	 add	 esp, 8
$LN2@draw_viper:

; 9018 : 
; 9019 : 			break;
; 9020 : 		}
; 9021 : 	}
; 9022 : 
; 9023 : 	if (!get_undamaged_eo_display_mode (mode))

  00085	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4VIPER_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0008e	85 c0		 test	 eax, eax
  00090	75 05		 jne	 SHORT $LN16@draw_viper

; 9024 : 	{
; 9025 : 		return;

  00092	e9 11 0a 00 00	 jmp	 $LN1@draw_viper
$LN16@draw_viper:

; 9026 : 	}
; 9027 : 
; 9028 : 	////////////////////////////////////////
; 9029 : 	//
; 9030 : 	// render 3D display
; 9031 : 	//
; 9032 : 	////////////////////////////////////////
; 9033 : 
; 9034 : 	switch (get_view_mode ())

  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  0009c	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
  000a2	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  000a8	83 e9 26	 sub	 ecx, 38			; 00000026H
  000ab	89 8d ac fe ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  000b1	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv73[ebp], 3
  000b8	0f 87 0c 03 00
	00		 ja	 $LN4@draw_viper
  000be	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  000c4	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN29@draw_viper[edx*4]
$LN17@draw_viper:

; 9035 : 	{
; 9036 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 9037 : 		{
; 9038 : 			mfd_screen_x_min = floor ((243.0 * full_screen_width) / 640.0);

  000cb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  000d3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406e600000000000
  000db	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  000e3	83 ec 08	 sub	 esp, 8
  000e6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  000f1	83 c4 08	 add	 esp, 8
  000f4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 9039 : 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  000fa	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00102	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  0010a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00112	83 ec 08	 sub	 esp, 8
  00115	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00120	83 c4 08	 add	 esp, 8
  00123	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 9040 : 
; 9041 : 			mfd_screen_x_max = ceil ((499.0 * full_screen_width) / 640.0);

  00129	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00131	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@407f300000000000
  00139	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00141	83 ec 08	 sub	 esp, 8
  00144	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0014f	83 c4 08	 add	 esp, 8
  00152	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 9042 : 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  00158	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00160	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  00168	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00170	83 ec 08	 sub	 esp, 8
  00173	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0017e	83 c4 08	 add	 esp, 8
  00181	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 9043 : 
; 9044 : 			break;

  00187	e9 3e 02 00 00	 jmp	 $LN4@draw_viper
$LN18@draw_viper:

; 9045 : 		}
; 9046 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 9047 : 		{
; 9048 : 			mfd_screen_x_min = floor ((141.0 * full_screen_width) / 640.0);

  0018c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00194	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4061a00000000000
  0019c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  001a4	83 ec 08	 sub	 esp, 8
  001a7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  001b2	83 c4 08	 add	 esp, 8
  001b5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 9049 : 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  001bb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  001c3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  001cb	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  001d3	83 ec 08	 sub	 esp, 8
  001d6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  001e1	83 c4 08	 add	 esp, 8
  001e4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 9050 : 
; 9051 : 			mfd_screen_x_max = ceil ((397.0 * full_screen_width) / 640.0);

  001ea	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  001f2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4078d00000000000
  001fa	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00202	83 ec 08	 sub	 esp, 8
  00205	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  00210	83 c4 08	 add	 esp, 8
  00213	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 9052 : 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  00219	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00221	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  00229	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00231	83 ec 08	 sub	 esp, 8
  00234	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00239	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0023f	83 c4 08	 add	 esp, 8
  00242	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 9053 : 
; 9054 : 			break;

  00248	e9 7d 01 00 00	 jmp	 $LN4@draw_viper
$LN19@draw_viper:

; 9055 : 		}
; 9056 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 9057 : 		{
; 9058 : 			mfd_screen_x_min = floor ((243.0 * full_screen_width) / 640.0);

  0024d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00255	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406e600000000000
  0025d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00265	83 ec 08	 sub	 esp, 8
  00268	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0026d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00273	83 c4 08	 add	 esp, 8
  00276	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 9059 : 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  0027c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00284	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  0028c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00294	83 ec 08	 sub	 esp, 8
  00297	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  002a2	83 c4 08	 add	 esp, 8
  002a5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 9060 : 
; 9061 : 			mfd_screen_x_max = ceil ((499.0 * full_screen_width) / 640.0);

  002ab	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  002b3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@407f300000000000
  002bb	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  002c3	83 ec 08	 sub	 esp, 8
  002c6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  002d1	83 c4 08	 add	 esp, 8
  002d4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 9062 : 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  002da	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  002e2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  002ea	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  002f2	83 ec 08	 sub	 esp, 8
  002f5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  00300	83 c4 08	 add	 esp, 8
  00303	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 9063 : 
; 9064 : 			break;

  00309	e9 bc 00 00 00	 jmp	 $LN4@draw_viper
$LN20@draw_viper:

; 9065 : 		}
; 9066 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 9067 : 		{
; 9068 : 			mfd_screen_x_min = floor ((141.0 * full_screen_width) / 640.0);

  0030e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00316	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4061a00000000000
  0031e	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00326	83 ec 08	 sub	 esp, 8
  00329	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0032e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00334	83 c4 08	 add	 esp, 8
  00337	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 9069 : 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  0033d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00345	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  0034d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00355	83 ec 08	 sub	 esp, 8
  00358	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0035d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00363	83 c4 08	 add	 esp, 8
  00366	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 9070 : 
; 9071 : 			mfd_screen_x_max = ceil ((397.0 * full_screen_width) / 640.0);

  0036c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00374	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4078d00000000000
  0037c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00384	83 ec 08	 sub	 esp, 8
  00387	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0038c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  00392	83 c4 08	 add	 esp, 8
  00395	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 9072 : 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  0039b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  003a3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  003ab	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  003b3	83 ec 08	 sub	 esp, 8
  003b6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  003c1	83 c4 08	 add	 esp, 8
  003c4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA
$LN4@draw_viper:

; 9073 : 
; 9074 : 			break;
; 9075 : 		}
; 9076 : 	}
; 9077 : 
; 9078 : 	//
; 9079 : 	// widen by 1 pixel either side to ensure the MFD is covered at all resolutions
; 9080 : 	//
; 9081 : 
; 9082 : 	mfd_screen_x_min -= 1.0;

  003ca	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  003d2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003de	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 9083 : 	mfd_screen_y_min -= 1.0;

  003e6	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  003ee	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003f6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003fa	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 9084 : 
; 9085 : 	mfd_screen_x_max += 1.0;

  00402	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0040a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00412	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00416	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 9086 : 	mfd_screen_y_max += 1.0;

  0041e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00426	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0042e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00432	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 9087 : 
; 9088 : 	mfd_screen_width = mfd_screen_x_max - mfd_screen_x_min;

  0043a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00442	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0044a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 9089 : 	mfd_screen_height = mfd_screen_y_max - mfd_screen_y_min;

  00452	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0045a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00462	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 9090 : 
; 9091 : 	mfd_screen_x_max -= 0.001;

  0046a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00472	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0047a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0047e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 9092 : 	mfd_screen_y_max -= 0.001;

  00486	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0048e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00496	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0049a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 9093 : 
; 9094 : 	mfd_screen_x_scale = 256.0 / mfd_screen_width;

  004a2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_width@@3MA
  004aa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  004b2	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004b6	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004ba	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 9095 : 	mfd_screen_y_scale = 256.0 / mfd_screen_height;

  004c2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_height@@3MA
  004ca	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  004d2	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004d6	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004da	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 9096 : 
; 9097 : 	switch (mode)

  004e2	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  004e5	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv230[ebp], eax
  004eb	83 bd ac fe ff
	ff 02		 cmp	 DWORD PTR tv230[ebp], 2
  004f2	74 0b		 je	 SHORT $LN21@draw_viper
  004f4	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv230[ebp], 3
  004fb	74 0b		 je	 SHORT $LN22@draw_viper
  004fd	eb 10		 jmp	 SHORT $LN6@draw_viper
$LN21@draw_viper:

; 9098 : 	{
; 9099 : 		case VIPER_MFD_MODE_FLIR:
; 9100 : 		{
; 9101 : 			draw_3d_flir_mfd (TRUE);

  004ff	6a 01		 push	 1
  00501	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXH@Z ; draw_3d_flir_mfd

; 9102 : 
; 9103 : 			break;

  00506	eb 07		 jmp	 SHORT $LN6@draw_viper
$LN22@draw_viper:

; 9104 : 		}
; 9105 : 		case VIPER_MFD_MODE_DTV:
; 9106 : 		{
; 9107 : 			draw_3d_dtv_mfd (TRUE);

  00508	6a 01		 push	 1
  0050a	e8 00 00 00 00	 call	 ?draw_3d_dtv_mfd@@YGXH@Z ; draw_3d_dtv_mfd
$LN6@draw_viper:

; 9108 : 
; 9109 : 			break;
; 9110 : 		}
; 9111 : 	}
; 9112 : 
; 9113 : 	////////////////////////////////////////
; 9114 : 	//
; 9115 : 	// render 2D display
; 9116 : 	//
; 9117 : 	////////////////////////////////////////
; 9118 : 
; 9119 : 	set_2d_active_environment (mfd_env);

  0050f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00514	50		 push	 eax
  00515	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 9120 : 
; 9121 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0051a	51		 push	 ecx
  0051b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00523	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00528	51		 push	 ecx
  00529	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00531	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00536	51		 push	 ecx
  00537	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0053f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00544	51		 push	 ecx
  00545	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0054d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00552	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00557	50		 push	 eax
  00558	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 9122 : 
; 9123 : 	draw_large_mfd = TRUE;

  0055d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 9124 : 
; 9125 : 	mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00567	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0056f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 9126 : 
; 9127 : 	int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00577	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 9128 : 
; 9129 : 	mfd_viewport_x_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  00581	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00589	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 9130 : 
; 9131 : 	mfd_viewport_y_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  00591	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00599	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 9132 : 
; 9133 : 	mfd_viewport_x_min = 0.0;

  005a1	0f 57 c0	 xorps	 xmm0, xmm0
  005a4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 9134 : 
; 9135 : 	mfd_viewport_y_min = 0.0;

  005ac	0f 57 c0	 xorps	 xmm0, xmm0
  005af	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 9136 : 
; 9137 : 	mfd_viewport_x_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  005b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  005bf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 9138 : 
; 9139 : 	mfd_viewport_y_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  005c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  005cf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 9140 : 
; 9141 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005d7	51		 push	 ecx
  005d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e5	51		 push	 ecx
  005e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f3	51		 push	 ecx
  005f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  005fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00601	51		 push	 ecx
  00602	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0060a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00614	50		 push	 eax
  00615	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9142 : 
; 9143 : 	//
; 9144 : 	// draw MFD on texture
; 9145 : 	//
; 9146 : 
; 9147 : 	set_active_screen (full_mfd_texture_screen);

  0061a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  0061f	50		 push	 eax
  00620	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9148 : 
; 9149 : 	if (lock_screen (full_mfd_texture_screen))

  00625	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  0062a	50		 push	 eax
  0062b	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00630	85 c0		 test	 eax, eax
  00632	0f 84 c5 00 00
	00		 je	 $LN23@draw_viper

; 9150 : 	{
; 9151 :       rgb_colour
; 9152 :          store_mfd_colour;
; 9153 : 
; 9154 :       store_mfd_colour = MFD_COLOUR1;

  00638	b8 04 00 00 00	 mov	 eax, 4
  0063d	6b c8 00	 imul	 ecx, eax, 0
  00640	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00646	89 95 f0 fe ff
	ff		 mov	 DWORD PTR _store_mfd_colour$1[ebp], edx

; 9155 : 
; 9156 :       set_rgb_colour (MFD_COLOUR1, 255, 255, 255, 255);

  0064c	b8 04 00 00 00	 mov	 eax, 4
  00651	6b c8 00	 imul	 ecx, eax, 0
  00654	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0065b	b8 04 00 00 00	 mov	 eax, 4
  00660	6b c8 00	 imul	 ecx, eax, 0
  00663	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0066a	b8 04 00 00 00	 mov	 eax, 4
  0066f	6b c8 00	 imul	 ecx, eax, 0
  00672	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00679	b8 04 00 00 00	 mov	 eax, 4
  0067e	6b c8 00	 imul	 ecx, eax, 0
  00681	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 9157 : 
; 9158 :       set_block (0, 0, LARGE_MFD_VIEWPORT_SIZE - 1, LARGE_MFD_VIEWPORT_SIZE - 1, clear_mfd_colour);

  00688	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0068d	50		 push	 eax
  0068e	68 ff 00 00 00	 push	 255			; 000000ffH
  00693	68 ff 00 00 00	 push	 255			; 000000ffH
  00698	6a 00		 push	 0
  0069a	6a 00		 push	 0
  0069c	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9159 : 
; 9160 : 		draw_layout_grid ();

  006a1	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9161 : 
; 9162 : 		switch (mode)

  006a6	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  006a9	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv270[ebp], eax
  006af	83 bd ac fe ff
	ff 02		 cmp	 DWORD PTR tv270[ebp], 2
  006b6	74 0b		 je	 SHORT $LN24@draw_viper
  006b8	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv270[ebp], 3
  006bf	74 0b		 je	 SHORT $LN25@draw_viper
  006c1	eb 10		 jmp	 SHORT $LN8@draw_viper
$LN24@draw_viper:

; 9163 : 		{
; 9164 : 			case VIPER_MFD_MODE_FLIR:
; 9165 : 			{
; 9166 : 				draw_2d_flir_mfd (TRUE);

  006c3	6a 01		 push	 1
  006c5	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 9167 : 
; 9168 : 				break;

  006ca	eb 07		 jmp	 SHORT $LN8@draw_viper
$LN25@draw_viper:

; 9169 : 			}
; 9170 : 			case VIPER_MFD_MODE_DTV:
; 9171 : 			{
; 9172 : 				draw_2d_dtv_mfd (TRUE);

  006cc	6a 01		 push	 1
  006ce	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd
$LN8@draw_viper:

; 9173 : 
; 9174 : 				break;
; 9175 : 			}
; 9176 : 		}
; 9177 : 
; 9178 : 		MFD_COLOUR1 = store_mfd_colour;

  006d3	b8 04 00 00 00	 mov	 eax, 4
  006d8	6b c8 00	 imul	 ecx, eax, 0
  006db	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _store_mfd_colour$1[ebp]
  006e1	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 9179 : 
; 9180 : 		flush_screen_texture_graphics (full_mfd_texture_screen);

  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  006ec	50		 push	 eax
  006ed	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9181 : 
; 9182 : 		unlock_screen (full_mfd_texture_screen);

  006f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  006f7	50		 push	 eax
  006f8	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_viper:

; 9183 : 	}
; 9184 : 
; 9185 : 	set_active_screen (video_screen);

  006fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00702	50		 push	 eax
  00703	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9186 : 
; 9187 : 	////////////////////////////////////////
; 9188 : 	//
; 9189 : 	// render MFD to screen
; 9190 : 	//
; 9191 : 	////////////////////////////////////////
; 9192 : 
; 9193 : 	set_3d_active_environment (main_3d_env);

  00708	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  0070d	50		 push	 eax
  0070e	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 9194 : 
; 9195 : 	if (begin_3d_scene ())

  00713	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00718	85 c0		 test	 eax, eax
  0071a	0f 84 88 03 00
	00		 je	 $LN26@draw_viper

; 9196 : 	{
; 9197 : 		set_d3d_transparency_on ();

  00720	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 9198 : 
; 9199 : 		set_d3d_zbuffer_comparison (FALSE);

  00725	6a 00		 push	 0
  00727	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9200 : 
; 9201 : 		set_d3d_culling (FALSE);

  0072c	6a 00		 push	 0
  0072e	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9202 : 
; 9203 : 		set_d3d_texture_wrapping (0, FALSE);

  00733	6a 00		 push	 0
  00735	6a 00		 push	 0
  00737	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 9204 : 
; 9205 :       set_d3d_texture_mag_filtering (TRUE);

  0073c	6a 01		 push	 1
  0073e	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 9206 :       set_d3d_texture_min_filtering (TRUE);

  00743	6a 01		 push	 1
  00745	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 9207 :       set_d3d_texture_mip_filtering (FALSE);

  0074a	6a 00		 push	 0
  0074c	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 9208 : 
; 9209 : 		set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD));

  00751	68 f9 00 00 00	 push	 249			; 000000f9H
  00756	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  0075b	50		 push	 eax
  0075c	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 9210 : 
; 9211 :       ////////////////////////////////////////
; 9212 :       //
; 9213 : 
; 9214 : 		colour.red				= MFD_COLOUR1.r;

  00761	b8 04 00 00 00	 mov	 eax, 4
  00766	6b c8 00	 imul	 ecx, eax, 0
  00769	8a 91 02 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2]
  0076f	88 95 fa fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+2], dl

; 9215 : 		colour.green			= MFD_COLOUR1.g;

  00775	b8 04 00 00 00	 mov	 eax, 4
  0077a	6b c8 00	 imul	 ecx, eax, 0
  0077d	8a 91 01 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1]
  00783	88 95 f9 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+1], dl

; 9216 : 		colour.blue				= MFD_COLOUR1.b;

  00789	b8 04 00 00 00	 mov	 eax, 4
  0078e	6b c8 00	 imul	 ecx, eax, 0
  00791	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00797	88 95 f8 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp], dl

; 9217 : 		colour.alpha			= MFD_COLOUR1.a;

  0079d	b8 04 00 00 00	 mov	 eax, 4
  007a2	6b c8 00	 imul	 ecx, eax, 0
  007a5	8a 91 03 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3]
  007ab	88 95 fb fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+3], dl

; 9218 : 
; 9219 : 		specular.red			= 0;

  007b1	c6 85 f6 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 9220 : 		specular.green			= 0;

  007b8	c6 85 f5 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 9221 : 		specular.blue			= 0;

  007bf	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 9222 : 		specular.alpha			= 255;

  007c6	c6 85 f7 fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 9223 : 
; 9224 : 		quad[0].i				= mfd_screen_x_min;

  007cd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007d2	6b c8 00	 imul	 ecx, eax, 0
  007d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  007dd	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 9225 : 		quad[0].j	  			= mfd_screen_y_min;

  007e6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007eb	6b c8 00	 imul	 ecx, eax, 0
  007ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  007f6	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 9226 : 		quad[0].z	  			= 0.5;

  007ff	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00804	6b c8 00	 imul	 ecx, eax, 0
  00807	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0080f	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 9227 : 		quad[0].q	  			= 0.5;

  00818	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0081d	6b c8 00	 imul	 ecx, eax, 0
  00820	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00828	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 9228 : 		quad[0].u	  			= 0.0;

  00831	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00836	6b c8 00	 imul	 ecx, eax, 0
  00839	0f 57 c0	 xorps	 xmm0, xmm0
  0083c	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 9229 : 		quad[0].v	  			= 0.0;

  00845	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0084a	6b c8 00	 imul	 ecx, eax, 0
  0084d	0f 57 c0	 xorps	 xmm0, xmm0
  00850	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 9230 : 
; 9231 : 		quad[1].i				= mfd_screen_x_max;

  00859	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0085e	c1 e0 00	 shl	 eax, 0
  00861	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00869	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 9232 : 		quad[1].j  				= mfd_screen_y_min;

  00872	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00877	c1 e0 00	 shl	 eax, 0
  0087a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00882	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 9233 : 		quad[1].z  				= 0.5;

  0088b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00890	c1 e0 00	 shl	 eax, 0
  00893	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0089b	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 9234 : 		quad[1].q  				= 0.5;

  008a4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008a9	c1 e0 00	 shl	 eax, 0
  008ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  008b4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 9235 : 		quad[1].u  				= 1.0;

  008bd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008c2	c1 e0 00	 shl	 eax, 0
  008c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008cd	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 9236 : 		quad[1].v  				= 0.0;

  008d6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008db	c1 e0 00	 shl	 eax, 0
  008de	0f 57 c0	 xorps	 xmm0, xmm0
  008e1	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 9237 : 
; 9238 : 		quad[2].i				= mfd_screen_x_max;

  008ea	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008ef	d1 e0		 shl	 eax, 1
  008f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  008f9	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 9239 : 		quad[2].j 				= mfd_screen_y_max;

  00902	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00907	d1 e0		 shl	 eax, 1
  00909	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00911	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 9240 : 		quad[2].z  				= 0.5;

  0091a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0091f	d1 e0		 shl	 eax, 1
  00921	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00929	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 9241 : 		quad[2].q  				= 0.5;

  00932	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00937	d1 e0		 shl	 eax, 1
  00939	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00941	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 9242 : 		quad[2].u  				= 1.0;

  0094a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0094f	d1 e0		 shl	 eax, 1
  00951	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00959	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 9243 : 		quad[2].v  				= 1.0;

  00962	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00967	d1 e0		 shl	 eax, 1
  00969	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00971	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 9244 : 
; 9245 : 		quad[3].i				= mfd_screen_x_min;

  0097a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0097f	6b c8 03	 imul	 ecx, eax, 3
  00982	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0098a	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 9246 : 		quad[3].j				= mfd_screen_y_max;

  00993	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00998	6b c8 03	 imul	 ecx, eax, 3
  0099b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  009a3	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 9247 : 		quad[3].z				= 0.5;

  009ac	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009b1	6b c8 03	 imul	 ecx, eax, 3
  009b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  009bc	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 9248 : 		quad[3].q				= 0.5;

  009c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009ca	6b c8 03	 imul	 ecx, eax, 3
  009cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  009d5	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 9249 : 		quad[3].u				= 0.0;

  009de	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009e3	6b c8 03	 imul	 ecx, eax, 3
  009e6	0f 57 c0	 xorps	 xmm0, xmm0
  009e9	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 9250 : 		quad[3].v				= 1.0;

  009f2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009f7	6b c8 03	 imul	 ecx, eax, 3
  009fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a02	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 9251 : 
; 9252 : 		quad[0].next_vertex	= &quad[1];

  00a0b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a10	c1 e0 00	 shl	 eax, 0
  00a13	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00a1a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00a1f	6b c2 00	 imul	 eax, edx, 0
  00a22	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 9253 : 		quad[1].next_vertex	= &quad[2];

  00a29	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a2e	d1 e0		 shl	 eax, 1
  00a30	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00a37	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00a3c	c1 e2 00	 shl	 edx, 0
  00a3f	89 8c 15 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 9254 : 		quad[2].next_vertex	= &quad[3];

  00a46	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a4b	6b c8 03	 imul	 ecx, eax, 3
  00a4e	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  00a55	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a5a	d1 e0		 shl	 eax, 1
  00a5c	89 94 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 9255 : 		quad[3].next_vertex	= NULL;

  00a63	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a68	6b c8 03	 imul	 ecx, eax, 3
  00a6b	c7 84 0d 24 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 9256 : 
; 9257 :       //
; 9258 :       ////////////////////////////////////////
; 9259 : 
; 9260 : 		draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  00a76	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00a7c	50		 push	 eax
  00a7d	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00a83	51		 push	 ecx
  00a84	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00a8a	52		 push	 edx
  00a8b	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 9261 : 
; 9262 : 		set_d3d_transparency_off ();

  00a90	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 9263 : 
; 9264 : 		set_d3d_zbuffer_comparison (TRUE);

  00a95	6a 01		 push	 1
  00a97	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9265 : 
; 9266 : 		set_d3d_culling (TRUE);

  00a9c	6a 01		 push	 1
  00a9e	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9267 : 
; 9268 : 		end_3d_scene ();

  00aa3	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN26@draw_viper:
$LN1@draw_viper:

; 9269 : 	}
; 9270 : }

  00aa8	5f		 pop	 edi
  00aa9	5e		 pop	 esi
  00aaa	5b		 pop	 ebx
  00aab	8b e5		 mov	 esp, ebp
  00aad	5d		 pop	 ebp
  00aae	c3		 ret	 0
  00aaf	90		 npad	 1
$LN28@draw_viper:
  00ab0	00 00 00 00	 DD	 $LN11@draw_viper
  00ab4	00 00 00 00	 DD	 $LN12@draw_viper
  00ab8	00 00 00 00	 DD	 $LN13@draw_viper
  00abc	00 00 00 00	 DD	 $LN14@draw_viper
$LN29@draw_viper:
  00ac0	00 00 00 00	 DD	 $LN17@draw_viper
  00ac4	00 00 00 00	 DD	 $LN18@draw_viper
  00ac8	00 00 00 00	 DD	 $LN19@draw_viper
  00acc	00 00 00 00	 DD	 $LN20@draw_viper
?draw_viper_full_screen_display@@YGXXZ ENDP		; draw_viper_full_screen_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?draw_viper_mfd@@YGXXZ
_TEXT	SEGMENT
tv228 = -84						; size = 4
tv218 = -84						; size = 4
tv83 = -84						; size = 4
tv65 = -84						; size = 4
_draw_eo_display$1 = -16				; size = 4
_large_mfd$ = -12					; size = 4
_export_right$ = -8					; size = 4
_export_left$ = -4					; size = 4
?draw_viper_mfd@@YGXXZ PROC				; draw_viper_mfd, COMDAT

; 8582 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8583 : 	screen *export_left, *export_right;
; 8584 : 
; 8585 : 	////////////////////////////////////////
; 8586 : 	//
; 8587 : 	// SELECT LARGE OR SMALL MFD TEXTURES
; 8588 : 	//
; 8589 : 	////////////////////////////////////////
; 8590 : 
; 8591 : 	// loke 030420
; 8592 : 	// support for high resolution mfd's
; 8593 : 	int
; 8594 : 		large_mfd;
; 8595 : 
; 8596 : 	if (!command_line_high_res_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_high_res_mfd@@3HA, 0 ; command_line_high_res_mfd
  00010	75 28		 jne	 SHORT $LN10@draw_viper

; 8597 : 	{
; 8598 : 		switch (get_view_mode ())

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00017	89 45 ac	 mov	 DWORD PTR tv65[ebp], eax
  0001a	83 7d ac 26	 cmp	 DWORD PTR tv65[ebp], 38	; 00000026H
  0001e	7c 11		 jl	 SHORT $LN13@draw_viper
  00020	83 7d ac 29	 cmp	 DWORD PTR tv65[ebp], 41	; 00000029H
  00024	7e 02		 jle	 SHORT $LN12@draw_viper
  00026	eb 09		 jmp	 SHORT $LN13@draw_viper
$LN12@draw_viper:

; 8599 : 		{
; 8600 : 			////////////////////////////////////////
; 8601 : 			case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 8602 : 			case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 8603 : 			case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 8604 : 			case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 8605 : 			////////////////////////////////////////
; 8606 : 			{
; 8607 : 
; 8608 : 				large_mfd = 1;

  00028	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 1

; 8609 : 
; 8610 : 				break;

  0002f	eb 07		 jmp	 SHORT $LN2@draw_viper
$LN13@draw_viper:

; 8611 : 			}
; 8612 : 			////////////////////////////////////////
; 8613 : 			default:
; 8614 : 			////////////////////////////////////////
; 8615 : 			{
; 8616 : 
; 8617 : 				large_mfd = 0;

  00031	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 0
$LN2@draw_viper:

; 8618 : 
; 8619 : 				break;
; 8620 : 			}
; 8621 : 		}
; 8622 : 	}
; 8623 : 	else

  00038	eb 07		 jmp	 SHORT $LN11@draw_viper
$LN10@draw_viper:

; 8624 : 	{
; 8625 : 		large_mfd = 1;

  0003a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 1
$LN11@draw_viper:

; 8626 : 	}
; 8627 : 
; 8628 : 	if (large_mfd)

  00041	83 7d f4 00	 cmp	 DWORD PTR _large_mfd$[ebp], 0
  00045	74 52		 je	 SHORT $LN14@draw_viper

; 8629 : 	{
; 8630 : 		draw_large_mfd = TRUE;

  00047	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 8631 : 
; 8632 : 		pilot_lhs_mfd_texture_screen = large_pilot_lhs_mfd_texture_screen;

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00056	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8633 : 		pilot_rhs_mfd_texture_screen = large_pilot_rhs_mfd_texture_screen;

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00060	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8634 : 		pilot_dfd_texture_screen = large_pilot_dfd_texture_screen;

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  0006a	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_dfd_texture_screen@@3PAUSCREEN@@A, eax

; 8635 : 
; 8636 : 		co_pilot_lhs_mfd_texture_screen = large_co_pilot_lhs_mfd_texture_screen;

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00074	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8637 : 		co_pilot_rhs_mfd_texture_screen = large_co_pilot_rhs_mfd_texture_screen;

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0007e	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8638 : 		co_pilot_dfd_texture_screen = large_co_pilot_dfd_texture_screen;

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  00088	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_dfd_texture_screen@@3PAUSCREEN@@A, eax

; 8639 : 
; 8640 : 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00092	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 8641 : 	}
; 8642 : 	else

  00097	eb 50		 jmp	 SHORT $LN15@draw_viper
$LN14@draw_viper:

; 8643 : 	{
; 8644 : 		draw_large_mfd = FALSE;

  00099	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0

; 8645 : 
; 8646 : 		pilot_lhs_mfd_texture_screen = small_pilot_lhs_mfd_texture_screen;

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  000a8	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8647 : 		pilot_rhs_mfd_texture_screen = small_pilot_rhs_mfd_texture_screen;

  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  000b2	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8648 : 		pilot_dfd_texture_screen = small_pilot_dfd_texture_screen;

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  000bc	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_dfd_texture_screen@@3PAUSCREEN@@A, eax

; 8649 : 
; 8650 : 		co_pilot_lhs_mfd_texture_screen = small_co_pilot_lhs_mfd_texture_screen;

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  000c6	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8651 : 		co_pilot_rhs_mfd_texture_screen = small_co_pilot_rhs_mfd_texture_screen;

  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  000d0	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8652 : 		co_pilot_dfd_texture_screen = small_co_pilot_dfd_texture_screen;

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  000da	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_dfd_texture_screen@@3PAUSCREEN@@A, eax

; 8653 : 
; 8654 : 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  000e4	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax
$LN15@draw_viper:

; 8655 : 	}
; 8656 : 
; 8657 : 	if (get_crew_role () == CREW_ROLE_PILOT)

  000e9	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  000ee	85 c0		 test	 eax, eax
  000f0	75 12		 jne	 SHORT $LN16@draw_viper

; 8658 : 	{
; 8659 : 		export_left=pilot_lhs_mfd_texture_screen;

  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  000f7	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 8660 : 		export_right=pilot_rhs_mfd_texture_screen;

  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  000ff	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax

; 8661 : 	}
; 8662 : 	else

  00102	eb 10		 jmp	 SHORT $LN17@draw_viper
$LN16@draw_viper:

; 8663 : 	{
; 8664 : 		export_left=co_pilot_lhs_mfd_texture_screen;

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00109	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 8665 : 		export_right=co_pilot_rhs_mfd_texture_screen;

  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00111	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax
$LN17@draw_viper:

; 8666 : 	}
; 8667 : 
; 8668 : 	set_system_texture_screen (pilot_lhs_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD2);

  00114	68 55 06 00 00	 push	 1621			; 00000655H
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8669 : 	set_system_texture_screen (pilot_rhs_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD3);

  00124	68 56 06 00 00	 push	 1622			; 00000656H
  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8670 : 	set_system_texture_screen (pilot_dfd_texture_screen, TEXTURE_INDEX_COMANCHE_TEXT);

  00134	68 5d 06 00 00	 push	 1629			; 0000065dH
  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_dfd_texture_screen@@3PAUSCREEN@@A
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8671 : 
; 8672 : 	set_system_texture_screen (co_pilot_lhs_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD6);

  00144	68 59 06 00 00	 push	 1625			; 00000659H
  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8673 : 	set_system_texture_screen (co_pilot_rhs_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD7);

  00154	68 5a 06 00 00	 push	 1626			; 0000065aH
  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8674 : 	set_system_texture_screen (co_pilot_dfd_texture_screen, TEXTURE_INDEX_COMANCHE_TEXT2);

  00164	68 5e 06 00 00	 push	 1630			; 0000065eH
  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8675 : 
; 8676 : 	////////////////////////////////////////
; 8677 : 	//
; 8678 : 	// SELECT VISIBLE DISPLAYS
; 8679 : 	//
; 8680 : 	////////////////////////////////////////
; 8681 : 
; 8682 : 	switch (get_view_mode ())

  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00179	89 45 ac	 mov	 DWORD PTR tv83[ebp], eax
  0017c	8b 4d ac	 mov	 ecx, DWORD PTR tv83[ebp]
  0017f	83 e9 20	 sub	 ecx, 32			; 00000020H
  00182	89 4d ac	 mov	 DWORD PTR tv83[ebp], ecx
  00185	83 7d ac 09	 cmp	 DWORD PTR tv83[ebp], 9
  00189	77 5b		 ja	 SHORT $LN25@draw_viper
  0018b	8b 55 ac	 mov	 edx, DWORD PTR tv83[ebp]
  0018e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN48@draw_viper[edx*4]
$LN18@draw_viper:

; 8683 : 	{
; 8684 : 		////////////////////////////////////////
; 8685 : 		case VIEW_MODE_VIRTUAL_COCKPIT:
; 8686 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PADLOCK:
; 8687 : 		case VIEW_MODE_VIRTUAL_COCKPIT_TRACK_TARGET:
; 8688 : 		////////////////////////////////////////
; 8689 : 		{
; 8690 : 			if (get_crew_role () == CREW_ROLE_PILOT)

  00195	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0019a	85 c0		 test	 eax, eax
  0019c	75 0c		 jne	 SHORT $LN19@draw_viper

; 8691 : 			{
; 8692 : 				display_mask =

  0019e	c7 05 00 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 19 ; 00000013H

; 8693 : 					PILOT_LHS_MFD |
; 8694 : 					PILOT_RHS_MFD |
; 8695 : 					PILOT_DFD;
; 8696 : 			}
; 8697 : 			else

  001a8	eb 0a		 jmp	 SHORT $LN20@draw_viper
$LN19@draw_viper:

; 8698 : 			{
; 8699 : 				display_mask =

  001aa	c7 05 00 00 00
	00 60 02 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 608 ; 00000260H
$LN20@draw_viper:

; 8700 : 					CO_PILOT_LHS_MFD |
; 8701 : 					CO_PILOT_RHS_MFD |
; 8702 : 					CO_PILOT_DFD;
; 8703 : 			}
; 8704 : 
; 8705 : 			break;

  001b4	eb 3a		 jmp	 SHORT $LN4@draw_viper
$LN21@draw_viper:

; 8706 : 		}
; 8707 : 		////////////////////////////////////////
; 8708 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 8709 : 		////////////////////////////////////////
; 8710 : 		{
; 8711 : 			display_mask =

  001b6	c7 05 00 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 19 ; 00000013H

; 8712 : 				PILOT_LHS_MFD |
; 8713 : 				PILOT_RHS_MFD |
; 8714 : 				PILOT_DFD;
; 8715 : 
; 8716 : 			break;

  001c0	eb 2e		 jmp	 SHORT $LN4@draw_viper
$LN22@draw_viper:

; 8717 : 		}
; 8718 : 		////////////////////////////////////////
; 8719 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 8720 : 		////////////////////////////////////////
; 8721 : 		{
; 8722 : 			display_mask =

  001c2	c7 05 00 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 19 ; 00000013H

; 8723 : 				PILOT_LHS_MFD |
; 8724 : 				PILOT_RHS_MFD |
; 8725 : 				PILOT_DFD;
; 8726 : 
; 8727 : 			break;

  001cc	eb 22		 jmp	 SHORT $LN4@draw_viper
$LN23@draw_viper:

; 8728 : 		}
; 8729 : 		////////////////////////////////////////
; 8730 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 8731 : 		////////////////////////////////////////
; 8732 : 		{
; 8733 : 			display_mask =

  001ce	c7 05 00 00 00
	00 60 02 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 608 ; 00000260H

; 8734 : 				CO_PILOT_LHS_MFD |
; 8735 : 				CO_PILOT_RHS_MFD |
; 8736 : 				CO_PILOT_DFD;
; 8737 : 
; 8738 : 			break;

  001d8	eb 16		 jmp	 SHORT $LN4@draw_viper
$LN24@draw_viper:

; 8739 : 		}
; 8740 : 		////////////////////////////////////////
; 8741 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 8742 : 		////////////////////////////////////////
; 8743 : 		{
; 8744 : 			display_mask =

  001da	c7 05 00 00 00
	00 60 02 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 608 ; 00000260H

; 8745 : 				CO_PILOT_LHS_MFD |
; 8746 : 				CO_PILOT_RHS_MFD |
; 8747 : 				CO_PILOT_DFD;
; 8748 : 
; 8749 : 			break;

  001e4	eb 0a		 jmp	 SHORT $LN4@draw_viper
$LN25@draw_viper:

; 8750 : 		}
; 8751 : 		////////////////////////////////////////
; 8752 : 		default:
; 8753 : 		////////////////////////////////////////
; 8754 : 		{
; 8755 : 			display_mask =

  001e6	c7 05 00 00 00
	00 73 02 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 627 ; 00000273H
$LN4@draw_viper:

; 8756 : 				PILOT_LHS_MFD |
; 8757 : 				PILOT_RHS_MFD |
; 8758 : 				PILOT_DFD |
; 8759 : 				CO_PILOT_LHS_MFD |
; 8760 : 				CO_PILOT_RHS_MFD |
; 8761 : 				CO_PILOT_DFD;
; 8762 : 
; 8763 : 			break;
; 8764 : 		}
; 8765 : 	}
; 8766 : 
; 8767 : 	////////////////////////////////////////
; 8768 : 	//
; 8769 : 	// SET UP MFD 2D ENVIRONMENT
; 8770 : 	//
; 8771 : 	////////////////////////////////////////
; 8772 : 
; 8773 : 	set_2d_active_environment (mfd_env);

  001f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 8774 : 
; 8775 : 	//
; 8776 : 	// window
; 8777 : 	//
; 8778 : 
; 8779 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  001fb	51		 push	 ecx
  001fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00204	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00209	51		 push	 ecx
  0020a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00212	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00217	51		 push	 ecx
  00218	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00220	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00225	51		 push	 ecx
  00226	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 8780 : 
; 8781 : 	//
; 8782 : 	// viewport
; 8783 : 	//
; 8784 : 
; 8785 : 	if (draw_large_mfd)

  0023e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00245	74 1c		 je	 SHORT $LN26@draw_viper

; 8786 : 	{
; 8787 : 		mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00247	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0024f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 8788 : 
; 8789 : 		int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00257	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 8790 : 	}
; 8791 : 	else

  00261	eb 1a		 jmp	 SHORT $LN27@draw_viper
$LN26@draw_viper:

; 8792 : 	{
; 8793 : 		mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  00263	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0026b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 8794 : 
; 8795 : 		int_mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  00273	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 128 ; 00000080H
$LN27@draw_viper:

; 8796 : 	}
; 8797 : 
; 8798 : 	mfd_viewport_x_org = mfd_viewport_size * 0.5;

  0027d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00285	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0028d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00291	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 8799 : 
; 8800 : 	mfd_viewport_y_org = mfd_viewport_size * 0.5;

  00299	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002a1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ad	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 8801 : 
; 8802 : 	mfd_viewport_x_min = 0.0;

  002b5	0f 57 c0	 xorps	 xmm0, xmm0
  002b8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 8803 : 
; 8804 : 	mfd_viewport_y_min = 0.0;

  002c0	0f 57 c0	 xorps	 xmm0, xmm0
  002c3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 8805 : 
; 8806 : 	mfd_viewport_x_max = mfd_viewport_size - 0.001;

  002cb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002d3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  002db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002df	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 8807 : 
; 8808 : 	mfd_viewport_y_max = mfd_viewport_size - 0.001;

  002e7	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002ef	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  002f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002fb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 8809 : 
; 8810 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00303	51		 push	 ecx
  00304	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0030c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00311	51		 push	 ecx
  00312	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0031a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031f	51		 push	 ecx
  00320	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032d	51		 push	 ecx
  0032e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00340	50		 push	 eax
  00341	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8811 : 
; 8812 : 	mfd_screen_x_min = 0.0;

  00346	0f 57 c0	 xorps	 xmm0, xmm0
  00349	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 8813 : 	mfd_screen_y_min = 0.0;

  00351	0f 57 c0	 xorps	 xmm0, xmm0
  00354	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 8814 : 
; 8815 : 	mfd_screen_x_max = mfd_viewport_size - 0.001;

  0035c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00364	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0036c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00370	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 8816 : 	mfd_screen_y_max = mfd_viewport_size - 0.001;

  00378	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00380	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00388	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 8817 : 
; 8818 : 	mfd_screen_width = mfd_viewport_size;

  00394	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0039c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 8819 : 	mfd_screen_height = mfd_viewport_size;

  003a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  003ac	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 8820 : 
; 8821 : 	mfd_screen_x_scale = 1.0;

  003b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003bc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 8822 : 	mfd_screen_y_scale = 1.0;

  003c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003cc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 8823 : 
; 8824 : 	////////////////////////////////////////
; 8825 : 	//
; 8826 : 	// render EO 3D display (if required)
; 8827 : 	//
; 8828 : 	////////////////////////////////////////
; 8829 : 
; 8830 : 	{
; 8831 : 		int
; 8832 : 			draw_eo_display;
; 8833 : 
; 8834 : 		if (d3d_can_render_to_texture)

  003d4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  003db	0f 84 a0 01 00
	00		 je	 $LN34@draw_viper

; 8835 : 		{
; 8836 : 			ASSERT (eo_3d_texture_screen);

  003e1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  003e8	75 1a		 jne	 SHORT $LN29@draw_viper
  003ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_viper_mfd@@YGXXZ@4JA
  003ef	05 fe 00 00 00	 add	 eax, 254		; 000000feH
  003f4	50		 push	 eax
  003f5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FEEKGJNI@c?3?2users?2nhv90?2projects?2eech?2ap@
  003fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  003ff	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN29@draw_viper:

; 8837 : 
; 8838 : 			draw_eo_display = FALSE;

  00404	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 0

; 8839 : 
; 8840 : 			if (get_undamaged_eo_display_mode (pilot_lhs_mfd_mode) && (display_mask & PILOT_LHS_MFD))

  0040b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  00410	50		 push	 eax
  00411	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4VIPER_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  00416	85 c0		 test	 eax, eax
  00418	74 29		 je	 SHORT $LN30@draw_viper
  0041a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0041f	83 e0 01	 and	 eax, 1
  00422	74 1f		 je	 SHORT $LN30@draw_viper

; 8841 : 			{
; 8842 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_COMANCHE_MFD2);

  00424	68 55 06 00 00	 push	 1621			; 00000655H
  00429	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0042e	50		 push	 eax
  0042f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8843 : 				export_left=eo_3d_texture_screen;

  00434	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00439	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 8844 : 
; 8845 : 				draw_eo_display = TRUE;

  0043c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN30@draw_viper:

; 8846 : 			}
; 8847 : 
; 8848 : 			if (get_undamaged_eo_display_mode (pilot_rhs_mfd_mode) && (display_mask & PILOT_RHS_MFD))

  00443	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  00448	50		 push	 eax
  00449	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4VIPER_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0044e	85 c0		 test	 eax, eax
  00450	74 29		 je	 SHORT $LN31@draw_viper
  00452	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00457	83 e0 02	 and	 eax, 2
  0045a	74 1f		 je	 SHORT $LN31@draw_viper

; 8849 : 			{
; 8850 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_COMANCHE_MFD3);

  0045c	68 56 06 00 00	 push	 1622			; 00000656H
  00461	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00466	50		 push	 eax
  00467	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8851 : 				export_right=eo_3d_texture_screen;

  0046c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00471	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax

; 8852 : 
; 8853 : 				draw_eo_display = TRUE;

  00474	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN31@draw_viper:

; 8854 : 			}
; 8855 : 
; 8856 : 			if (get_undamaged_eo_display_mode (co_pilot_lhs_mfd_mode) && (display_mask & CO_PILOT_LHS_MFD))

  0047b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  00480	50		 push	 eax
  00481	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4VIPER_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  00486	85 c0		 test	 eax, eax
  00488	74 29		 je	 SHORT $LN32@draw_viper
  0048a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0048f	83 e0 20	 and	 eax, 32			; 00000020H
  00492	74 1f		 je	 SHORT $LN32@draw_viper

; 8857 : 			{
; 8858 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_COMANCHE_MFD6);

  00494	68 59 06 00 00	 push	 1625			; 00000659H
  00499	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0049e	50		 push	 eax
  0049f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8859 : 				export_left=eo_3d_texture_screen;

  004a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004a9	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 8860 : 
; 8861 : 				draw_eo_display = TRUE;

  004ac	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN32@draw_viper:

; 8862 : 			}
; 8863 : 
; 8864 : 			if (get_undamaged_eo_display_mode (co_pilot_rhs_mfd_mode) && (display_mask & CO_PILOT_RHS_MFD))

  004b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  004b8	50		 push	 eax
  004b9	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4VIPER_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  004be	85 c0		 test	 eax, eax
  004c0	74 29		 je	 SHORT $LN33@draw_viper
  004c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  004c7	83 e0 40	 and	 eax, 64			; 00000040H
  004ca	74 1f		 je	 SHORT $LN33@draw_viper

; 8865 : 			{
; 8866 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_COMANCHE_MFD7);

  004cc	68 5a 06 00 00	 push	 1626			; 0000065aH
  004d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004d6	50		 push	 eax
  004d7	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8867 : 				export_right=eo_3d_texture_screen;

  004dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004e1	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax

; 8868 : 
; 8869 : 				draw_eo_display = TRUE;

  004e4	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN33@draw_viper:

; 8870 : 			}
; 8871 : 
; 8872 : 			if (draw_eo_display)

  004eb	83 7d f0 00	 cmp	 DWORD PTR _draw_eo_display$1[ebp], 0
  004ef	0f 84 8c 00 00
	00		 je	 $LN34@draw_viper

; 8873 : 			{
; 8874 : 				switch (get_mfd_mode_for_eo_sensor ())

  004f5	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  004fa	89 45 ac	 mov	 DWORD PTR tv218[ebp], eax
  004fd	83 7d ac 02	 cmp	 DWORD PTR tv218[ebp], 2
  00501	74 08		 je	 SHORT $LN35@draw_viper
  00503	83 7d ac 03	 cmp	 DWORD PTR tv218[ebp], 3
  00507	74 0b		 je	 SHORT $LN36@draw_viper
  00509	eb 10		 jmp	 SHORT $LN6@draw_viper
$LN35@draw_viper:

; 8875 : 				{
; 8876 : 					case VIPER_MFD_MODE_FLIR:
; 8877 : 					{
; 8878 : 						draw_3d_flir_mfd (FALSE);

  0050b	6a 00		 push	 0
  0050d	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXH@Z ; draw_3d_flir_mfd

; 8879 : 
; 8880 : 						break;

  00512	eb 07		 jmp	 SHORT $LN6@draw_viper
$LN36@draw_viper:

; 8881 : 					}
; 8882 : 					case VIPER_MFD_MODE_DTV:
; 8883 : 					{
; 8884 : 						draw_3d_dtv_mfd (FALSE);

  00514	6a 00		 push	 0
  00516	e8 00 00 00 00	 call	 ?draw_3d_dtv_mfd@@YGXH@Z ; draw_3d_dtv_mfd
$LN6@draw_viper:

; 8885 : 
; 8886 : 						break;
; 8887 : 					}
; 8888 : 				}
; 8889 : 
; 8890 : 				set_active_screen (eo_3d_texture_screen);

  0051b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00520	50		 push	 eax
  00521	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8891 : 
; 8892 : 				if (lock_screen (eo_3d_texture_screen))

  00526	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0052b	50		 push	 eax
  0052c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00531	85 c0		 test	 eax, eax
  00533	74 41		 je	 SHORT $LN37@draw_viper

; 8893 : 				{
; 8894 : 					draw_layout_grid ();

  00535	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8895 : 
; 8896 : 					switch (get_mfd_mode_for_eo_sensor ())

  0053a	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4VIPER_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0053f	89 45 ac	 mov	 DWORD PTR tv228[ebp], eax
  00542	83 7d ac 02	 cmp	 DWORD PTR tv228[ebp], 2
  00546	74 08		 je	 SHORT $LN38@draw_viper
  00548	83 7d ac 03	 cmp	 DWORD PTR tv228[ebp], 3
  0054c	74 0b		 je	 SHORT $LN39@draw_viper
  0054e	eb 10		 jmp	 SHORT $LN8@draw_viper
$LN38@draw_viper:

; 8897 : 					{
; 8898 : 						case VIPER_MFD_MODE_FLIR:
; 8899 : 						{
; 8900 : 							draw_2d_flir_mfd (TRUE);

  00550	6a 01		 push	 1
  00552	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 8901 : 
; 8902 : 							break;

  00557	eb 07		 jmp	 SHORT $LN8@draw_viper
$LN39@draw_viper:

; 8903 : 						}
; 8904 : 						case VIPER_MFD_MODE_DTV:
; 8905 : 						{
; 8906 : 							draw_2d_dtv_mfd (TRUE);

  00559	6a 01		 push	 1
  0055b	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd
$LN8@draw_viper:

; 8907 : 
; 8908 : 							break;
; 8909 : 						}
; 8910 : 					}
; 8911 : 
; 8912 : 					flush_screen_texture_graphics (eo_3d_texture_screen);

  00560	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00565	50		 push	 eax
  00566	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8913 : 
; 8914 : 					unlock_screen (eo_3d_texture_screen);

  0056b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00570	50		 push	 eax
  00571	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_viper:

; 8915 : 				}
; 8916 : 
; 8917 : 				set_active_screen (video_screen);

  00576	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0057b	50		 push	 eax
  0057c	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN34@draw_viper:

; 8918 : 			}
; 8919 : 		}
; 8920 : 	}
; 8921 : 
; 8922 : 	////////////////////////////////////////
; 8923 : 	//
; 8924 : 	// DRAW DISPLAYS
; 8925 : 	//
; 8926 : 	////////////////////////////////////////
; 8927 : 
; 8928 : 	if (display_mask & PILOT_LHS_MFD)

  00581	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00586	83 e0 01	 and	 eax, 1
  00589	74 12		 je	 SHORT $LN40@draw_viper

; 8929 : 	{
; 8930 : 		draw_mfd (pilot_lhs_mfd_texture_screen, &pilot_lhs_mfd_mode, VIPER_MFD_LOCATION_PILOT_LHS);

  0058b	6a 00		 push	 0
  0058d	68 00 00 00 00	 push	 OFFSET ?pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  00592	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00597	50		 push	 eax
  00598	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; draw_mfd
$LN40@draw_viper:

; 8931 : 	}
; 8932 : 
; 8933 : 	if (display_mask & PILOT_RHS_MFD)

  0059d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  005a2	83 e0 02	 and	 eax, 2
  005a5	74 12		 je	 SHORT $LN41@draw_viper

; 8934 : 	{
; 8935 : 		draw_mfd (pilot_rhs_mfd_texture_screen, &pilot_rhs_mfd_mode, VIPER_MFD_LOCATION_PILOT_RHS);

  005a7	6a 01		 push	 1
  005a9	68 00 00 00 00	 push	 OFFSET ?pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  005ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  005b3	50		 push	 eax
  005b4	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; draw_mfd
$LN41@draw_viper:

; 8936 : 	}
; 8937 : 
; 8938 : 	if (display_mask & PILOT_DFD)

  005b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  005be	83 e0 10	 and	 eax, 16			; 00000010H
  005c1	74 12		 je	 SHORT $LN42@draw_viper

; 8939 : 	{
; 8940 : 		draw_mfd (pilot_dfd_texture_screen, &pilot_dfd_mode, VIPER_MFD_LOCATION_PILOT_DFD);

  005c3	6a 04		 push	 4
  005c5	68 00 00 00 00	 push	 OFFSET ?pilot_dfd_mode@@3W4VIPER_MFD_MODES@@A
  005ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_dfd_texture_screen@@3PAUSCREEN@@A
  005cf	50		 push	 eax
  005d0	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; draw_mfd
$LN42@draw_viper:

; 8941 : 	}
; 8942 : 
; 8943 : 	if (display_mask & CO_PILOT_LHS_MFD)

  005d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  005da	83 e0 20	 and	 eax, 32			; 00000020H
  005dd	74 12		 je	 SHORT $LN43@draw_viper

; 8944 : 	{
; 8945 : 		draw_mfd (co_pilot_lhs_mfd_texture_screen, &co_pilot_lhs_mfd_mode, VIPER_MFD_LOCATION_CO_PILOT_LHS);

  005df	6a 02		 push	 2
  005e1	68 00 00 00 00	 push	 OFFSET ?co_pilot_lhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  005e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  005eb	50		 push	 eax
  005ec	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; draw_mfd
$LN43@draw_viper:

; 8946 : 	}
; 8947 : 
; 8948 : 	if (display_mask & CO_PILOT_RHS_MFD)

  005f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  005f6	83 e0 40	 and	 eax, 64			; 00000040H
  005f9	74 12		 je	 SHORT $LN44@draw_viper

; 8949 : 	{
; 8950 : 		draw_mfd (co_pilot_rhs_mfd_texture_screen, &co_pilot_rhs_mfd_mode, VIPER_MFD_LOCATION_CO_PILOT_RHS);

  005fb	6a 03		 push	 3
  005fd	68 00 00 00 00	 push	 OFFSET ?co_pilot_rhs_mfd_mode@@3W4VIPER_MFD_MODES@@A
  00602	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00607	50		 push	 eax
  00608	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; draw_mfd
$LN44@draw_viper:

; 8951 : 	}
; 8952 : 
; 8953 : 	if (display_mask & CO_PILOT_DFD)

  0060d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00612	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00617	74 12		 je	 SHORT $LN45@draw_viper

; 8954 : 	{
; 8955 : 		draw_mfd (co_pilot_dfd_texture_screen, &co_pilot_dfd_mode, VIPER_MFD_LOCATION_CO_PILOT_DFD);

  00619	6a 05		 push	 5
  0061b	68 00 00 00 00	 push	 OFFSET ?co_pilot_dfd_mode@@3W4VIPER_MFD_MODES@@A
  00620	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  00625	50		 push	 eax
  00626	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; draw_mfd
$LN45@draw_viper:

; 8956 : 	}
; 8957 : 
; 8958 : 	if(command_line_export_mfd)

  0062b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  00632	74 0d		 je	 SHORT $LN46@draw_viper

; 8959 : 		copy_export_mfd(export_left,export_right);

  00634	8b 45 f8	 mov	 eax, DWORD PTR _export_right$[ebp]
  00637	50		 push	 eax
  00638	8b 4d fc	 mov	 ecx, DWORD PTR _export_left$[ebp]
  0063b	51		 push	 ecx
  0063c	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd
$LN46@draw_viper:

; 8960 : }

  00641	5f		 pop	 edi
  00642	5e		 pop	 esi
  00643	5b		 pop	 ebx
  00644	8b e5		 mov	 esp, ebp
  00646	5d		 pop	 ebp
  00647	c3		 ret	 0
$LN48@draw_viper:
  00648	00 00 00 00	 DD	 $LN18@draw_viper
  0064c	00 00 00 00	 DD	 $LN18@draw_viper
  00650	00 00 00 00	 DD	 $LN18@draw_viper
  00654	00 00 00 00	 DD	 $LN25@draw_viper
  00658	00 00 00 00	 DD	 $LN25@draw_viper
  0065c	00 00 00 00	 DD	 $LN25@draw_viper
  00660	00 00 00 00	 DD	 $LN21@draw_viper
  00664	00 00 00 00	 DD	 $LN22@draw_viper
  00668	00 00 00 00	 DD	 $LN23@draw_viper
  0066c	00 00 00 00	 DD	 $LN24@draw_viper
?draw_viper_mfd@@YGXXZ ENDP				; draw_viper_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?deinitialise_viper_mfd@@YGXXZ
_TEXT	SEGMENT
?deinitialise_viper_mfd@@YGXXZ PROC			; deinitialise_viper_mfd, COMDAT

; 8553 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8554 : 	destroy_2d_environment (mfd_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 8555 : 
; 8556 : 	////////////////////////////////////////
; 8557 : 
; 8558 : 	destroy_screen (large_pilot_lhs_mfd_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8559 : 	destroy_screen (large_pilot_rhs_mfd_texture_screen);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8560 : 	destroy_screen (large_pilot_dfd_texture_screen);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8561 : 
; 8562 : 	destroy_screen (large_co_pilot_lhs_mfd_texture_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8563 : 	destroy_screen (large_co_pilot_rhs_mfd_texture_screen);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8564 : 	destroy_screen (large_co_pilot_dfd_texture_screen);

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8565 : 
; 8566 : 	destroy_screen (small_pilot_lhs_mfd_texture_screen);

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8567 : 	destroy_screen (small_pilot_rhs_mfd_texture_screen);

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8568 : 	destroy_screen (small_pilot_dfd_texture_screen);

  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8569 : 
; 8570 : 	destroy_screen (small_co_pilot_lhs_mfd_texture_screen);

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8571 : 	destroy_screen (small_co_pilot_rhs_mfd_texture_screen);

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8572 : 	destroy_screen (small_co_pilot_dfd_texture_screen);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_dfd_texture_screen@@3PAUSCREEN@@A
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8573 : 
; 8574 : 	destroy_screen (full_mfd_texture_screen);

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8575 : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?deinitialise_viper_mfd@@YGXXZ ENDP			; deinitialise_viper_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\viper\vi_mfd.c
;	COMDAT ?initialise_viper_mfd@@YGXXZ
_TEXT	SEGMENT
?initialise_viper_mfd@@YGXXZ PROC			; initialise_viper_mfd, COMDAT

; 8443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8444 : 	if (command_line_dynamics_engine_startup)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_dynamics_engine_startup@@3HA, 0 ; command_line_dynamics_engine_startup
  00010	74 14		 je	 SHORT $LN2@initialise

; 8445 : 	{
; 8446 : 		select_viper_mfd_mode (VIPER_MFD_MODE_OFF, VIPER_MFD_LOCATION_PILOT_LHS);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 8447 : 		select_viper_mfd_mode (VIPER_MFD_MODE_OFF, VIPER_MFD_LOCATION_PILOT_RHS);

  0001b	6a 01		 push	 1
  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 8448 : 	}
; 8449 : 	else

  00024	eb 12		 jmp	 SHORT $LN3@initialise
$LN2@initialise:

; 8450 : 	{
; 8451 : 		select_viper_mfd_mode (VIPER_MFD_MODE_ASE, VIPER_MFD_LOCATION_PILOT_LHS);

  00026	6a 00		 push	 0
  00028	6a 05		 push	 5
  0002a	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 8452 : 		select_viper_mfd_mode (VIPER_MFD_MODE_TSD, VIPER_MFD_LOCATION_PILOT_RHS);

  0002f	6a 01		 push	 1
  00031	6a 04		 push	 4
  00033	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode
$LN3@initialise:

; 8453 : 	}
; 8454 : 
; 8455 : 	select_viper_mfd_mode (VIPER_MFD_MODE_MISSION, VIPER_MFD_LOCATION_CO_PILOT_LHS);

  00038	6a 02		 push	 2
  0003a	6a 0a		 push	 10			; 0000000aH
  0003c	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 8456 : 	select_viper_mfd_mode (VIPER_MFD_MODE_TSD, VIPER_MFD_LOCATION_CO_PILOT_RHS);

  00041	6a 03		 push	 3
  00043	6a 04		 push	 4
  00045	e8 00 00 00 00	 call	 ?select_viper_mfd_mode@@YGXW4VIPER_MFD_MODES@@W4VIPER_MFD_LOCATIONS@@@Z ; select_viper_mfd_mode

; 8457 : 
; 8458 : 	////////////////////////////////////////
; 8459 : 
; 8460 : 	pilot_tsd_ase_range							= TSD_ASE_RANGE_5000;

  0004a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00052	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0

; 8461 : 	pilot_tsd_declutter_level					= TSD_DECLUTTER_LEVEL_NAVIGATION;

  0005a	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 8462 : 	pilot_tsd_threat_line_flash_timer		= TSD_THREAT_LINE_FLASH_RATE;

  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0006c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_threat_line_flash_timer@@3MA, xmm0

; 8463 : 	pilot_tsd_draw_threat_line_status		= 0;

  00074	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_draw_threat_line_status@@3HA, 0

; 8464 : 	pilot_ase_threat_line_flash_timer		= ASE_THREAT_LINE_FLASH_RATE;

  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00086	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_ase_threat_line_flash_timer@@3MA, xmm0

; 8465 : 	pilot_ase_draw_threat_line_status		= 0;

  0008e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_ase_draw_threat_line_status@@3HA, 0

; 8466 : 
; 8467 : 	co_pilot_tsd_ase_range						= TSD_ASE_RANGE_5000;

  00098	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  000a0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0

; 8468 : 	co_pilot_tsd_declutter_level				= TSD_DECLUTTER_LEVEL_TARGET;

  000a8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1

; 8469 : 	co_pilot_tsd_threat_line_flash_timer	= TSD_THREAT_LINE_FLASH_RATE;

  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000ba	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_threat_line_flash_timer@@3MA, xmm0

; 8470 : 	co_pilot_tsd_draw_threat_line_status	= 0;

  000c2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_draw_threat_line_status@@3HA, 0

; 8471 : 	co_pilot_ase_threat_line_flash_timer	= ASE_THREAT_LINE_FLASH_RATE;

  000cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000d4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_ase_threat_line_flash_timer@@3MA, xmm0

; 8472 : 	co_pilot_ase_draw_threat_line_status	= 0;

  000dc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_ase_draw_threat_line_status@@3HA, 0

; 8473 : 
; 8474 : 	////////////////////////////////////////
; 8475 : 
; 8476 : 	mfd_env = create_2d_environment ();

  000e6	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  000eb	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_env@@3PAUENV_2D@@A, eax

; 8477 : 
; 8478 : 	////////////////////////////////////////
; 8479 : 	large_pilot_lhs_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  000f0	6a 00		 push	 0
  000f2	6a 02		 push	 2
  000f4	68 00 01 00 00	 push	 256			; 00000100H
  000f9	68 00 01 00 00	 push	 256			; 00000100H
  000fe	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00103	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8480 : 	large_pilot_rhs_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00108	6a 00		 push	 0
  0010a	6a 02		 push	 2
  0010c	68 00 01 00 00	 push	 256			; 00000100H
  00111	68 00 01 00 00	 push	 256			; 00000100H
  00116	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0011b	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8481 : 	large_co_pilot_lhs_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00120	6a 00		 push	 0
  00122	6a 02		 push	 2
  00124	68 00 01 00 00	 push	 256			; 00000100H
  00129	68 00 01 00 00	 push	 256			; 00000100H
  0012e	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00133	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8482 : 	large_co_pilot_rhs_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00138	6a 00		 push	 0
  0013a	6a 02		 push	 2
  0013c	68 00 01 00 00	 push	 256			; 00000100H
  00141	68 00 01 00 00	 push	 256			; 00000100H
  00146	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0014b	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8483 : 	large_pilot_dfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00150	6a 00		 push	 0
  00152	6a 02		 push	 2
  00154	68 00 01 00 00	 push	 256			; 00000100H
  00159	68 00 01 00 00	 push	 256			; 00000100H
  0015e	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00163	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_dfd_texture_screen@@3PAUSCREEN@@A, eax

; 8484 : 
; 8485 : 	large_co_pilot_dfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00168	6a 00		 push	 0
  0016a	6a 02		 push	 2
  0016c	68 00 01 00 00	 push	 256			; 00000100H
  00171	68 00 01 00 00	 push	 256			; 00000100H
  00176	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0017b	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_dfd_texture_screen@@3PAUSCREEN@@A, eax

; 8486 : 
; 8487 : 	small_pilot_lhs_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00180	6a 00		 push	 0
  00182	6a 02		 push	 2
  00184	68 80 00 00 00	 push	 128			; 00000080H
  00189	68 80 00 00 00	 push	 128			; 00000080H
  0018e	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00193	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8488 : 	small_pilot_rhs_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00198	6a 00		 push	 0
  0019a	6a 02		 push	 2
  0019c	68 80 00 00 00	 push	 128			; 00000080H
  001a1	68 80 00 00 00	 push	 128			; 00000080H
  001a6	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001ab	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8489 : 	small_pilot_dfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001b0	6a 00		 push	 0
  001b2	6a 02		 push	 2
  001b4	68 80 00 00 00	 push	 128			; 00000080H
  001b9	68 80 00 00 00	 push	 128			; 00000080H
  001be	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001c3	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_dfd_texture_screen@@3PAUSCREEN@@A, eax

; 8490 : 
; 8491 : 	small_co_pilot_lhs_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001c8	6a 00		 push	 0
  001ca	6a 02		 push	 2
  001cc	68 80 00 00 00	 push	 128			; 00000080H
  001d1	68 80 00 00 00	 push	 128			; 00000080H
  001d6	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001db	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8492 : 	small_co_pilot_rhs_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001e0	6a 00		 push	 0
  001e2	6a 02		 push	 2
  001e4	68 80 00 00 00	 push	 128			; 00000080H
  001e9	68 80 00 00 00	 push	 128			; 00000080H
  001ee	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001f3	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8493 : 	small_co_pilot_dfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001f8	6a 00		 push	 0
  001fa	6a 02		 push	 2
  001fc	68 80 00 00 00	 push	 128			; 00000080H
  00201	68 80 00 00 00	 push	 128			; 00000080H
  00206	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0020b	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_dfd_texture_screen@@3PAUSCREEN@@A, eax

; 8494 : 
; 8495 : 	full_mfd_texture_screen = create_system_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  00210	6a 02		 push	 2
  00212	68 f9 00 00 00	 push	 249			; 000000f9H
  00217	68 00 01 00 00	 push	 256			; 00000100H
  0021c	68 00 01 00 00	 push	 256			; 00000100H
  00221	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00226	a3 00 00 00 00	 mov	 DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8496 : 
; 8497 : 	set_rgb_colour (MFD_COLOUR1,              0, 255,   0, 255);

  0022b	b8 04 00 00 00	 mov	 eax, 4
  00230	6b c8 00	 imul	 ecx, eax, 0
  00233	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0023a	b8 04 00 00 00	 mov	 eax, 4
  0023f	6b c8 00	 imul	 ecx, eax, 0
  00242	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00249	b8 04 00 00 00	 mov	 eax, 4
  0024e	6b c8 00	 imul	 ecx, eax, 0
  00251	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00258	b8 04 00 00 00	 mov	 eax, 4
  0025d	6b c8 00	 imul	 ecx, eax, 0
  00260	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8498 : 	set_rgb_colour (MFD_COLOUR2,              0, 200,   0, 255);

  00267	b8 04 00 00 00	 mov	 eax, 4
  0026c	c1 e0 00	 shl	 eax, 0
  0026f	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00276	b8 04 00 00 00	 mov	 eax, 4
  0027b	c1 e0 00	 shl	 eax, 0
  0027e	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  00285	b8 04 00 00 00	 mov	 eax, 4
  0028a	c1 e0 00	 shl	 eax, 0
  0028d	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	c1 e0 00	 shl	 eax, 0
  0029c	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8499 : 	set_rgb_colour (MFD_COLOUR3,              0, 176,   0, 255);

  002a3	b8 04 00 00 00	 mov	 eax, 4
  002a8	d1 e0		 shl	 eax, 1
  002aa	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  002b1	b8 04 00 00 00	 mov	 eax, 4
  002b6	d1 e0		 shl	 eax, 1
  002b8	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  002bf	b8 04 00 00 00	 mov	 eax, 4
  002c4	d1 e0		 shl	 eax, 1
  002c6	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  002cd	b8 04 00 00 00	 mov	 eax, 4
  002d2	d1 e0		 shl	 eax, 1
  002d4	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8500 : 	set_rgb_colour (MFD_COLOUR4,              0, 151,   0, 255);

  002db	b8 04 00 00 00	 mov	 eax, 4
  002e0	6b c8 03	 imul	 ecx, eax, 3
  002e3	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  002ea	b8 04 00 00 00	 mov	 eax, 4
  002ef	6b c8 03	 imul	 ecx, eax, 3
  002f2	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  002f9	b8 04 00 00 00	 mov	 eax, 4
  002fe	6b c8 03	 imul	 ecx, eax, 3
  00301	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00308	b8 04 00 00 00	 mov	 eax, 4
  0030d	6b c8 03	 imul	 ecx, eax, 3
  00310	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8501 : 	set_rgb_colour (MFD_COLOUR5,              0, 128,   0, 255);

  00317	b8 04 00 00 00	 mov	 eax, 4
  0031c	c1 e0 02	 shl	 eax, 2
  0031f	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00326	b8 04 00 00 00	 mov	 eax, 4
  0032b	c1 e0 02	 shl	 eax, 2
  0032e	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  00335	b8 04 00 00 00	 mov	 eax, 4
  0033a	c1 e0 02	 shl	 eax, 2
  0033d	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00344	b8 04 00 00 00	 mov	 eax, 4
  00349	c1 e0 02	 shl	 eax, 2
  0034c	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8502 : 	set_rgb_colour (MFD_COLOUR6,             40,  68,  56, 255);

  00353	b8 04 00 00 00	 mov	 eax, 4
  00358	6b c8 05	 imul	 ecx, eax, 5
  0035b	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  00362	b8 04 00 00 00	 mov	 eax, 4
  00367	6b c8 05	 imul	 ecx, eax, 5
  0036a	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  00371	b8 04 00 00 00	 mov	 eax, 4
  00376	6b c8 05	 imul	 ecx, eax, 5
  00379	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  00380	b8 04 00 00 00	 mov	 eax, 4
  00385	6b c8 05	 imul	 ecx, eax, 5
  00388	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8503 : 	set_rgb_colour (MFD_CONTOUR_COLOUR,     255, 100,   0, 255);

  0038f	b8 04 00 00 00	 mov	 eax, 4
  00394	6b c8 06	 imul	 ecx, eax, 6
  00397	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0039e	b8 04 00 00 00	 mov	 eax, 4
  003a3	6b c8 06	 imul	 ecx, eax, 6
  003a6	c6 81 01 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 100 ; 00000064H
  003ad	b8 04 00 00 00	 mov	 eax, 4
  003b2	6b c8 06	 imul	 ecx, eax, 6
  003b5	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  003bc	b8 04 00 00 00	 mov	 eax, 4
  003c1	6b c8 06	 imul	 ecx, eax, 6
  003c4	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8504 : 	set_rgb_colour (MFD_RIVER_COLOUR,        50,  75, 225, 255);

  003cb	b8 04 00 00 00	 mov	 eax, 4
  003d0	6b c8 07	 imul	 ecx, eax, 7
  003d3	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  003da	b8 04 00 00 00	 mov	 eax, 4
  003df	6b c8 07	 imul	 ecx, eax, 7
  003e2	c6 81 01 00 00
	00 4b		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 75 ; 0000004bH
  003e9	b8 04 00 00 00	 mov	 eax, 4
  003ee	6b c8 07	 imul	 ecx, eax, 7
  003f1	c6 81 00 00 00
	00 e1		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 225 ; 000000e1H
  003f8	b8 04 00 00 00	 mov	 eax, 4
  003fd	6b c8 07	 imul	 ecx, eax, 7
  00400	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8505 : 	set_rgb_colour (MFD_ROAD_COLOUR,        255, 200,   0, 255);

  00407	b8 04 00 00 00	 mov	 eax, 4
  0040c	c1 e0 03	 shl	 eax, 3
  0040f	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00416	b8 04 00 00 00	 mov	 eax, 4
  0041b	c1 e0 03	 shl	 eax, 3
  0041e	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  00425	b8 04 00 00 00	 mov	 eax, 4
  0042a	c1 e0 03	 shl	 eax, 3
  0042d	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00434	b8 04 00 00 00	 mov	 eax, 4
  00439	c1 e0 03	 shl	 eax, 3
  0043c	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8506 : 	set_rgb_colour (MFD_BACKGROUND_COLOUR,   15,  24,  16, 255);

  00443	b8 04 00 00 00	 mov	 eax, 4
  00448	6b c8 09	 imul	 ecx, eax, 9
  0044b	c6 81 02 00 00
	00 0f		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 15 ; 0000000fH
  00452	b8 04 00 00 00	 mov	 eax, 4
  00457	6b c8 09	 imul	 ecx, eax, 9
  0045a	c6 81 01 00 00
	00 18		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 24 ; 00000018H
  00461	b8 04 00 00 00	 mov	 eax, 4
  00466	6b c8 09	 imul	 ecx, eax, 9
  00469	c6 81 00 00 00
	00 10		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 16 ; 00000010H
  00470	b8 04 00 00 00	 mov	 eax, 4
  00475	6b c8 09	 imul	 ecx, eax, 9
  00478	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8507 : 	set_rgb_colour (MFD_CLEAR_COLOUR,         0,   0,   0,   0);

  0047f	b8 04 00 00 00	 mov	 eax, 4
  00484	6b c8 0a	 imul	 ecx, eax, 10
  00487	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0048e	b8 04 00 00 00	 mov	 eax, 4
  00493	6b c8 0a	 imul	 ecx, eax, 10
  00496	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  0049d	b8 04 00 00 00	 mov	 eax, 4
  004a2	6b c8 0a	 imul	 ecx, eax, 10
  004a5	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  004ac	b8 04 00 00 00	 mov	 eax, 4
  004b1	6b c8 0a	 imul	 ecx, eax, 10
  004b4	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 8508 : 
; 8509 : 	if (command_line_colour_mfd)

  004bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  004c2	0f 84 e5 01 00
	00		 je	 $LN4@initialise

; 8510 : 	{
; 8511 : 		set_rgb_colour (MFD_COLOUR_BLUE,          60, 160, 255,  255);

  004c8	b8 04 00 00 00	 mov	 eax, 4
  004cd	6b c8 0c	 imul	 ecx, eax, 12
  004d0	c6 81 02 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 60 ; 0000003cH
  004d7	b8 04 00 00 00	 mov	 eax, 4
  004dc	6b c8 0c	 imul	 ecx, eax, 12
  004df	c6 81 01 00 00
	00 a0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 160 ; 000000a0H
  004e6	b8 04 00 00 00	 mov	 eax, 4
  004eb	6b c8 0c	 imul	 ecx, eax, 12
  004ee	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  004f5	b8 04 00 00 00	 mov	 eax, 4
  004fa	6b c8 0c	 imul	 ecx, eax, 12
  004fd	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8512 : 		set_rgb_colour (MFD_COLOUR_DARK_BLUE,	   0,   0,  96,  255);

  00504	b8 04 00 00 00	 mov	 eax, 4
  00509	6b c8 11	 imul	 ecx, eax, 17
  0050c	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00513	b8 04 00 00 00	 mov	 eax, 4
  00518	6b c8 11	 imul	 ecx, eax, 17
  0051b	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00522	b8 04 00 00 00	 mov	 eax, 4
  00527	6b c8 11	 imul	 ecx, eax, 17
  0052a	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  00531	b8 04 00 00 00	 mov	 eax, 4
  00536	6b c8 11	 imul	 ecx, eax, 17
  00539	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8513 : 		set_rgb_colour (MFD_COLOUR_YELLOW,       230, 230,  40,  255);

  00540	b8 04 00 00 00	 mov	 eax, 4
  00545	6b c8 0d	 imul	 ecx, eax, 13
  00548	c6 81 02 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 230 ; 000000e6H
  0054f	b8 04 00 00 00	 mov	 eax, 4
  00554	6b c8 0d	 imul	 ecx, eax, 13
  00557	c6 81 01 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 230 ; 000000e6H
  0055e	b8 04 00 00 00	 mov	 eax, 4
  00563	6b c8 0d	 imul	 ecx, eax, 13
  00566	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  0056d	b8 04 00 00 00	 mov	 eax, 4
  00572	6b c8 0d	 imul	 ecx, eax, 13
  00575	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8514 : 		set_rgb_colour (MFD_COLOUR_DARK_YELLOW,  165, 165,  30,  255);

  0057c	b8 04 00 00 00	 mov	 eax, 4
  00581	6b c8 0e	 imul	 ecx, eax, 14
  00584	c6 81 02 00 00
	00 a5		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 165 ; 000000a5H
  0058b	b8 04 00 00 00	 mov	 eax, 4
  00590	6b c8 0e	 imul	 ecx, eax, 14
  00593	c6 81 01 00 00
	00 a5		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 165 ; 000000a5H
  0059a	b8 04 00 00 00	 mov	 eax, 4
  0059f	6b c8 0e	 imul	 ecx, eax, 14
  005a2	c6 81 00 00 00
	00 1e		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 30 ; 0000001eH
  005a9	b8 04 00 00 00	 mov	 eax, 4
  005ae	6b c8 0e	 imul	 ecx, eax, 14
  005b1	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8515 : 		set_rgb_colour (MFD_COLOUR_RED,          255,  40,  40,  255);

  005b8	b8 04 00 00 00	 mov	 eax, 4
  005bd	6b c8 0f	 imul	 ecx, eax, 15
  005c0	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  005c7	b8 04 00 00 00	 mov	 eax, 4
  005cc	6b c8 0f	 imul	 ecx, eax, 15
  005cf	c6 81 01 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 40 ; 00000028H
  005d6	b8 04 00 00 00	 mov	 eax, 4
  005db	6b c8 0f	 imul	 ecx, eax, 15
  005de	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  005e5	b8 04 00 00 00	 mov	 eax, 4
  005ea	6b c8 0f	 imul	 ecx, eax, 15
  005ed	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8516 : 		set_rgb_colour (MFD_COLOUR_DARK_RED,	 148,   8,   8,  255);

  005f4	b8 04 00 00 00	 mov	 eax, 4
  005f9	6b c8 12	 imul	 ecx, eax, 18
  005fc	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  00603	b8 04 00 00 00	 mov	 eax, 4
  00608	6b c8 12	 imul	 ecx, eax, 18
  0060b	c6 81 01 00 00
	00 08		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 8
  00612	b8 04 00 00 00	 mov	 eax, 4
  00617	6b c8 12	 imul	 ecx, eax, 18
  0061a	c6 81 00 00 00
	00 08		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 8
  00621	b8 04 00 00 00	 mov	 eax, 4
  00626	6b c8 12	 imul	 ecx, eax, 18
  00629	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8517 : 		set_rgb_colour (MFD_COLOUR_CYAN,          60, 255, 230,  255);

  00630	b8 04 00 00 00	 mov	 eax, 4
  00635	c1 e0 04	 shl	 eax, 4
  00638	c6 80 02 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 60 ; 0000003cH
  0063f	b8 04 00 00 00	 mov	 eax, 4
  00644	c1 e0 04	 shl	 eax, 4
  00647	c6 80 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 255 ; 000000ffH
  0064e	b8 04 00 00 00	 mov	 eax, 4
  00653	c1 e0 04	 shl	 eax, 4
  00656	c6 80 00 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 230 ; 000000e6H
  0065d	b8 04 00 00 00	 mov	 eax, 4
  00662	c1 e0 04	 shl	 eax, 4
  00665	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8518 : 		set_rgb_colour (MFD_COLOUR_WHITE,        200, 200, 240,  255);

  0066c	b8 04 00 00 00	 mov	 eax, 4
  00671	6b c8 13	 imul	 ecx, eax, 19
  00674	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  0067b	b8 04 00 00 00	 mov	 eax, 4
  00680	6b c8 13	 imul	 ecx, eax, 19
  00683	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  0068a	b8 04 00 00 00	 mov	 eax, 4
  0068f	6b c8 13	 imul	 ecx, eax, 19
  00692	c6 81 00 00 00
	00 f0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 240 ; 000000f0H
  00699	b8 04 00 00 00	 mov	 eax, 4
  0069e	6b c8 13	 imul	 ecx, eax, 19
  006a1	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8519 : 	}
; 8520 : 	else

  006a8	e9 e0 01 00 00	 jmp	 $LN5@initialise
$LN4@initialise:

; 8521 : 	{
; 8522 : 		set_rgb_colour (MFD_COLOUR_BLUE,           0, 200,   0, 255);

  006ad	b8 04 00 00 00	 mov	 eax, 4
  006b2	6b c8 0c	 imul	 ecx, eax, 12
  006b5	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  006bc	b8 04 00 00 00	 mov	 eax, 4
  006c1	6b c8 0c	 imul	 ecx, eax, 12
  006c4	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  006cb	b8 04 00 00 00	 mov	 eax, 4
  006d0	6b c8 0c	 imul	 ecx, eax, 12
  006d3	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006da	b8 04 00 00 00	 mov	 eax, 4
  006df	6b c8 0c	 imul	 ecx, eax, 12
  006e2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8523 : 		set_rgb_colour (MFD_COLOUR_DARK_BLUE,      0, 128,   0, 255);

  006e9	b8 04 00 00 00	 mov	 eax, 4
  006ee	6b c8 11	 imul	 ecx, eax, 17
  006f1	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  006f8	b8 04 00 00 00	 mov	 eax, 4
  006fd	6b c8 11	 imul	 ecx, eax, 17
  00700	c6 81 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 128 ; 00000080H
  00707	b8 04 00 00 00	 mov	 eax, 4
  0070c	6b c8 11	 imul	 ecx, eax, 17
  0070f	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00716	b8 04 00 00 00	 mov	 eax, 4
  0071b	6b c8 11	 imul	 ecx, eax, 17
  0071e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8524 : 		set_rgb_colour (MFD_COLOUR_YELLOW,         0, 255,   0, 255);

  00725	b8 04 00 00 00	 mov	 eax, 4
  0072a	6b c8 0d	 imul	 ecx, eax, 13
  0072d	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00734	b8 04 00 00 00	 mov	 eax, 4
  00739	6b c8 0d	 imul	 ecx, eax, 13
  0073c	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00743	b8 04 00 00 00	 mov	 eax, 4
  00748	6b c8 0d	 imul	 ecx, eax, 13
  0074b	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00752	b8 04 00 00 00	 mov	 eax, 4
  00757	6b c8 0d	 imul	 ecx, eax, 13
  0075a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8525 : 		set_rgb_colour (MFD_COLOUR_DARK_YELLOW,    0, 200,   0, 255);

  00761	b8 04 00 00 00	 mov	 eax, 4
  00766	6b c8 0e	 imul	 ecx, eax, 14
  00769	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00770	b8 04 00 00 00	 mov	 eax, 4
  00775	6b c8 0e	 imul	 ecx, eax, 14
  00778	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  0077f	b8 04 00 00 00	 mov	 eax, 4
  00784	6b c8 0e	 imul	 ecx, eax, 14
  00787	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0078e	b8 04 00 00 00	 mov	 eax, 4
  00793	6b c8 0e	 imul	 ecx, eax, 14
  00796	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8526 : 		set_rgb_colour (MFD_COLOUR_RED,            0, 200,   0, 255);

  0079d	b8 04 00 00 00	 mov	 eax, 4
  007a2	6b c8 0f	 imul	 ecx, eax, 15
  007a5	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  007ac	b8 04 00 00 00	 mov	 eax, 4
  007b1	6b c8 0f	 imul	 ecx, eax, 15
  007b4	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  007bb	b8 04 00 00 00	 mov	 eax, 4
  007c0	6b c8 0f	 imul	 ecx, eax, 15
  007c3	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  007ca	b8 04 00 00 00	 mov	 eax, 4
  007cf	6b c8 0f	 imul	 ecx, eax, 15
  007d2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8527 : 		set_rgb_colour (MFD_COLOUR_DARK_RED,       0, 128,   0, 255);

  007d9	b8 04 00 00 00	 mov	 eax, 4
  007de	6b c8 12	 imul	 ecx, eax, 18
  007e1	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  007e8	b8 04 00 00 00	 mov	 eax, 4
  007ed	6b c8 12	 imul	 ecx, eax, 18
  007f0	c6 81 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 128 ; 00000080H
  007f7	b8 04 00 00 00	 mov	 eax, 4
  007fc	6b c8 12	 imul	 ecx, eax, 18
  007ff	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00806	b8 04 00 00 00	 mov	 eax, 4
  0080b	6b c8 12	 imul	 ecx, eax, 18
  0080e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8528 : 		set_rgb_colour (MFD_COLOUR_CYAN,           0, 255,   0, 255);

  00815	b8 04 00 00 00	 mov	 eax, 4
  0081a	c1 e0 04	 shl	 eax, 4
  0081d	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00824	b8 04 00 00 00	 mov	 eax, 4
  00829	c1 e0 04	 shl	 eax, 4
  0082c	c6 80 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 255 ; 000000ffH
  00833	b8 04 00 00 00	 mov	 eax, 4
  00838	c1 e0 04	 shl	 eax, 4
  0083b	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00842	b8 04 00 00 00	 mov	 eax, 4
  00847	c1 e0 04	 shl	 eax, 4
  0084a	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8529 : 		set_rgb_colour (MFD_COLOUR_WHITE,          0, 255,   0, 255);

  00851	b8 04 00 00 00	 mov	 eax, 4
  00856	6b c8 13	 imul	 ecx, eax, 19
  00859	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00860	b8 04 00 00 00	 mov	 eax, 4
  00865	6b c8 13	 imul	 ecx, eax, 19
  00868	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0086f	b8 04 00 00 00	 mov	 eax, 4
  00874	6b c8 13	 imul	 ecx, eax, 19
  00877	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0087e	b8 04 00 00 00	 mov	 eax, 4
  00883	6b c8 13	 imul	 ecx, eax, 19
  00886	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH
$LN5@initialise:

; 8530 : 	}
; 8531 : 
; 8532 :    set_rgb_colour (clear_mfd_colour, 255, 255, 255, 0);

  0088d	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  00894	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  0089b	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, 255 ; 000000ffH
  008a2	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+3, 0

; 8533 : 
; 8534 : 	////////////////////////////////////////
; 8535 : 	//
; 8536 : 	// weapon display lines
; 8537 : 	//
; 8538 : 	////////////////////////////////////////
; 8539 : 
; 8540 : 	initalize_horizon_mask(LARGE_MFD_VIEWPORT_SIZE * 3 / 4, &main_horizon_mask);

  008a9	68 00 00 00 00	 push	 OFFSET ?main_horizon_mask@@3PADA
  008ae	68 c0 00 00 00	 push	 192			; 000000c0H
  008b3	e8 00 00 00 00	 call	 ?initalize_horizon_mask@@YGXHPAPAD@Z ; initalize_horizon_mask

; 8541 : 
; 8542 : //VJ 030423 TSd render mod
; 8543 : 
; 8544 :    Initialise_TSD_render_terrain();

  008b8	e8 00 00 00 00	 call	 ?Initialise_TSD_render_terrain@@YGXXZ ; Initialise_TSD_render_terrain

; 8545 : 
; 8546 : }

  008bd	5f		 pop	 edi
  008be	5e		 pop	 esi
  008bf	5b		 pop	 ebx
  008c0	8b e5		 mov	 esp, ebp
  008c2	5d		 pop	 ebp
  008c3	c3		 ret	 0
?initialise_viper_mfd@@YGXXZ ENDP			; initialise_viper_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?tan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?tan@@YGMM@Z PROC					; tan, COMDAT

; 299  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	return (_CSTD tanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _tanf
  00019	83 c4 04	 add	 esp, 4

; 301  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?tan@@YGMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  :             return (float)tan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _tan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 766  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
