; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_pack.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?overload_smoke_list_pack_functions@@YGXXZ	; overload_smoke_list_pack_functions
PUBLIC	?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA ; `pack_local_data'::`1'::__LINE__Var
PUBLIC	??_C@_0FF@IGJAAPIO@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA ; `unpack_local_data'::`1'::__LINE__Var
PUBLIC	__real@bf800000
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?malloc_heap_memory@@YGPAXI@Z:PROC		; malloc_heap_memory
EXTRN	?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z:PROC	; pack_entity_type
EXTRN	?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z:PROC ; insert_local_entity_into_parents_child_list
EXTRN	?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z:PROC ; pack_float_value
EXTRN	?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z:PROC ; unpack_float_value
EXTRN	?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z:PROC ; pack_int_value
EXTRN	?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z:PROC ; unpack_int_value
EXTRN	?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z:PROC ; pack_vec3d
EXTRN	?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z:PROC ; unpack_vec3d
EXTRN	?get_free_entity@@YGPAUENTITY@@H@Z:PROC		; get_free_entity
EXTRN	?unpack_entity_safe_index@@YGHXZ:PROC		; unpack_entity_safe_index
EXTRN	?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z:PROC	; pack_entity_safe_ptr
EXTRN	?pack_effect_data@@YGXPAUENTITY@@PAUEFFECT@@W4PACK_MODES@@@Z:PROC ; pack_effect_data
EXTRN	?unpack_effect_data@@YGXPAUENTITY@@PAUEFFECT@@W4PACK_MODES@@@Z:PROC ; unpack_effect_data
EXTRN	?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_sector_entity
EXTRN	?command_line_downwash@@3HA:DWORD		; command_line_downwash
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA:BYTE ; fn_pack_local_entity_data
EXTRN	?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA:BYTE ; fn_unpack_local_entity_data
EXTRN	?effect_database@@3QBUEFFECT_DATA@@B:BYTE	; effect_database
EXTRN	?update_entity@@3PAUENTITY@@A:DWORD		; update_entity
EXTRN	__fltused:DWORD
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA DD 0b6H ; `unpack_local_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
CONST	SEGMENT
??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@ DB '('
	DB	'mode >= 0) && (mode < NUM_PACK_MODES)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@IGJAAPIO@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FF@IGJAAPIO@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\effect\smokel'
	DB	'st\sl_pack.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA DD 050H ; `pack_local_data'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_pack.c
;	COMDAT ?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv147 = -84						; size = 4
tv70 = -84						; size = 4
_raw$1 = -16						; size = 4
_number_of_slots$2 = -12				; size = 4
_index$3 = -8						; size = 4
_loop$4 = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_mode$ = 16						; size = 4
?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z PROC ; unpack_local_data, COMDAT

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 183  : 	ASSERT ((mode >= 0) && (mode < NUM_PACK_MODES));

  00009	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN8@unpack_loc
  0000f	83 7d 10 04	 cmp	 DWORD PTR _mode$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN7@unpack_loc
$LN8@unpack_loc:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@IGJAAPIO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@unpack_loc:

; 184  : 
; 185  : 	switch (mode)

  0002d	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00030	89 45 ac	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d ac 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	0f 8c 50 02 00
	00		 jl	 $LN2@unpack_loc
  0003d	83 7d ac 01	 cmp	 DWORD PTR tv70[ebp], 1
  00041	7e 05		 jle	 SHORT $LN9@unpack_loc
  00043	e9 45 02 00 00	 jmp	 $LN2@unpack_loc
$LN9@unpack_loc:

; 186  : 	{
; 187  : 		////////////////////////////////////////
; 188  : 		case PACK_MODE_SERVER_SESSION:
; 189  : 		case PACK_MODE_CLIENT_SESSION:
; 190  : 		////////////////////////////////////////
; 191  : 		{
; 192  : 			int
; 193  : 				loop,
; 194  : 				index,
; 195  : 				number_of_slots;
; 196  : 
; 197  : 			smoke_list
; 198  : 				*raw;
; 199  : 
; 200  : 			//
; 201  : 			// create entity
; 202  : 			//
; 203  : 
; 204  : 			index = unpack_entity_safe_index ();

  00048	e8 00 00 00 00	 call	 ?unpack_entity_safe_index@@YGHXZ ; unpack_entity_safe_index
  0004d	89 45 f8	 mov	 DWORD PTR _index$3[ebp], eax

; 205  : 
; 206  : 			en = get_free_entity (index);

  00050	8b 45 f8	 mov	 eax, DWORD PTR _index$3[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?get_free_entity@@YGPAUENTITY@@H@Z ; get_free_entity
  00059	89 45 08	 mov	 DWORD PTR _en$[ebp], eax

; 207  : 
; 208  : 			set_local_entity_type (en, type);

  0005c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00062	89 08		 mov	 DWORD PTR [eax], ecx

; 209  : 
; 210  : 			raw = (smoke_list *) malloc_heap_mem (sizeof (smoke_list));

  00064	68 8c 00 00 00	 push	 140			; 0000008cH
  00069	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  0006e	89 45 f0	 mov	 DWORD PTR _raw$1[ebp], eax

; 211  : 
; 212  : 			set_local_entity_data (en, raw);

  00071	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  00077	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 213  : 
; 214  : 			memset (raw, 0, sizeof (smoke_list));

  0007a	68 8c 00 00 00	 push	 140			; 0000008cH
  0007f	6a 00		 push	 0
  00081	8b 45 f0	 mov	 eax, DWORD PTR _raw$1[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _memset
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  : 
; 216  : 			//
; 217  : 			// unpack effect data (in exactly the same order as the data was packed)
; 218  : 			//
; 219  : 
; 220  : 			unpack_effect_data( en, &raw->eff, mode );

  0008d	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00090	50		 push	 eax
  00091	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  00094	51		 push	 ecx
  00095	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 ?unpack_effect_data@@YGXPAUENTITY@@PAUEFFECT@@W4PACK_MODES@@@Z ; unpack_effect_data

; 221  : 
; 222  : 			//
; 223  : 			// unpack smokelist data
; 224  : 			//
; 225  : 
; 226  : 			raw->smoke_type = (smoke_list_types) unpack_int_value (en, INT_TYPE_SMOKE_TYPE);

  0009e	68 bd 00 00 00	 push	 189			; 000000bdH
  000a3	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  000af	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 227  : 
; 228  : 			raw->frequency = unpack_float_value (en, FLOAT_TYPE_FREQUENCY);

  000b2	6a 2d		 push	 45			; 0000002dH
  000b4	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  000bd	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  000c0	d9 59 2c	 fstp	 DWORD PTR [ecx+44]

; 229  : 
; 230  : 			raw->generator_lifetime = unpack_float_value (en, FLOAT_TYPE_GENERATOR_LIFETIME);

  000c3	6a 32		 push	 50			; 00000032H
  000c5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  000ce	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  000d1	d9 59 30	 fstp	 DWORD PTR [ecx+48]

; 231  : 
; 232  : 			// Xhit: added scale and alpha_percentage for downwash effect. (030328)
; 233  : 			//VJ 030508 if downwash 
; 234  : 			if (command_line_downwash)

  000d4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_downwash@@3HA, 0 ; command_line_downwash
  000db	74 22		 je	 SHORT $LN10@unpack_loc

; 235  : 			{			
; 236  : 				raw->scale = unpack_float_value (en, FLOAT_TYPE_SCALE);

  000dd	6a 73		 push	 115			; 00000073H
  000df	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  000e8	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  000eb	d9 59 44	 fstp	 DWORD PTR [ecx+68]

; 237  : 				raw->alpha_percentage = unpack_int_value (en, INT_TYPE_COLOUR_ALPHA);

  000ee	6a 1d		 push	 29			; 0000001dH
  000f0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  000f9	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  000fc	88 41 48	 mov	 BYTE PTR [ecx+72], al
$LN10@unpack_loc:

; 238  : 			}	
; 239  : 
; 240  : 			// smoke_sleep
; 241  : 
; 242  : 			raw->smoke_lifetime = unpack_float_value (en, FLOAT_TYPE_SMOKE_LIFETIME);

  000ff	6a 76		 push	 118			; 00000076H
  00101	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  0010a	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  0010d	d9 59 38	 fstp	 DWORD PTR [ecx+56]

; 243  : 
; 244  : 			// texture_distance 
; 245  : 
; 246  : 			// width adjustment
; 247  : 
; 248  : 			// alive_count
; 249  : 
; 250  : 			raw->infinite_generator = unpack_int_value (en, INT_TYPE_INFINITE_GENERATOR);

  00110	6a 66		 push	 102			; 00000066H
  00112	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0011b	89 45 ac	 mov	 DWORD PTR tv147[ebp], eax
  0011e	8b 4d ac	 mov	 ecx, DWORD PTR tv147[ebp]
  00121	83 e1 01	 and	 ecx, 1
  00124	c1 e1 0f	 shl	 ecx, 15			; 0000000fH
  00127	8b 55 f0	 mov	 edx, DWORD PTR _raw$1[ebp]
  0012a	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  0012d	25 ff 7f ff ff	 and	 eax, -32769		; ffff7fffH
  00132	0b c1		 or	 eax, ecx
  00134	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  00137	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 251  : 
; 252  : 			// head 
; 253  : 
; 254  : 			// tail
; 255  : 
; 256  : 			unpack_vec3d (en, VEC3D_TYPE_INITIAL_VELOCITY, &raw->initial_velocity);

  0013a	8b 45 f0	 mov	 eax, DWORD PTR _raw$1[ebp]
  0013d	83 c0 54	 add	 eax, 84			; 00000054H
  00140	50		 push	 eax
  00141	6a 05		 push	 5
  00143	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 257  : 
; 258  : 			// motion_vector
; 259  : 
; 260  : 			// position 
; 261  : 
; 262  : 			// start_rotation 
; 263  : 
; 264  : 			// current_rotation
; 265  : 
; 266  : 			// valid flags
; 267  : 
; 268  : 			unpack_vec3d (en, VEC3D_TYPE_RELATIVE_POSITION, &raw->relative_position);

  0014c	8b 45 f0	 mov	 eax, DWORD PTR _raw$1[ebp]
  0014f	83 c0 60	 add	 eax, 96			; 00000060H
  00152	50		 push	 eax
  00153	6a 09		 push	 9
  00155	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00158	51		 push	 ecx
  00159	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 269  : 
; 270  : 			// sector_link
; 271  : 
; 272  : 			////////////////////////////////////////
; 273  : 			//
; 274  : 			// BUILD COMPONENTS
; 275  : 			//
; 276  : 			////////////////////////////////////////
; 277  : 	
; 278  : 			number_of_slots = raw->smoke_lifetime / raw->frequency;

  0015e	8b 45 f0	 mov	 eax, DWORD PTR _raw$1[ebp]
  00161	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  00164	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00169	f3 0f 5e 41 2c	 divss	 xmm0, DWORD PTR [ecx+44]
  0016e	f3 0f 2c d0	 cvttss2si edx, xmm0
  00172	89 55 f4	 mov	 DWORD PTR _number_of_slots$2[ebp], edx

; 279  : 	
; 280  : 			//
; 281  : 			// Build array of smoke positions, and mark all as inactive ( -1, -1, -1 )
; 282  : 			// 
; 283  : 	
; 284  : 			raw->position = (vec3d *) malloc_fast_mem (sizeof (vec3d) * number_of_slots);

  00175	6b 45 f4 0c	 imul	 eax, DWORD PTR _number_of_slots$2[ebp], 12
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  0017f	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  00182	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 285  : 	
; 286  : 			raw->valid = (unsigned char *) malloc_fast_mem (sizeof (unsigned char) * number_of_slots);

  00185	8b 45 f4	 mov	 eax, DWORD PTR _number_of_slots$2[ebp]
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  0018e	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  00191	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 287  : 	
; 288  : 			for ( loop = number_of_slots - 1 ; loop >= 0 ; loop -- )

  00194	8b 45 f4	 mov	 eax, DWORD PTR _number_of_slots$2[ebp]
  00197	83 e8 01	 sub	 eax, 1
  0019a	89 45 fc	 mov	 DWORD PTR _loop$4[ebp], eax
  0019d	eb 09		 jmp	 SHORT $LN6@unpack_loc
$LN4@unpack_loc:
  0019f	8b 45 fc	 mov	 eax, DWORD PTR _loop$4[ebp]
  001a2	83 e8 01	 sub	 eax, 1
  001a5	89 45 fc	 mov	 DWORD PTR _loop$4[ebp], eax
$LN6@unpack_loc:
  001a8	83 7d fc 00	 cmp	 DWORD PTR _loop$4[ebp], 0
  001ac	7c 56		 jl	 SHORT $LN5@unpack_loc

; 289  : 			{
; 290  : 				raw->valid[ loop ] = FALSE;

  001ae	8b 45 f0	 mov	 eax, DWORD PTR _raw$1[ebp]
  001b1	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  001b4	8b 55 fc	 mov	 edx, DWORD PTR _loop$4[ebp]
  001b7	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0

; 291  : 
; 292  : 				raw->position[ loop ].x = -1.0;

  001bb	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$4[ebp], 12
  001bf	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  001c2	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  001c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001cd	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 293  : 				raw->position[ loop ].y = -1.0;

  001d2	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$4[ebp], 12
  001d6	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  001d9	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  001dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001e4	f3 0f 11 44 02
	04		 movss	 DWORD PTR [edx+eax+4], xmm0

; 294  : 				raw->position[ loop ].z = -1.0;

  001ea	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$4[ebp], 12
  001ee	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  001f1	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  001f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001fc	f3 0f 11 44 02
	08		 movss	 DWORD PTR [edx+eax+8], xmm0

; 295  : 			}

  00202	eb 9b		 jmp	 SHORT $LN4@unpack_loc
$LN5@unpack_loc:

; 296  : 	
; 297  : 			raw->motion_vector = (vec3d *) malloc_fast_mem (sizeof (vec3d) * number_of_slots);

  00204	6b 45 f4 0c	 imul	 eax, DWORD PTR _number_of_slots$2[ebp], 12
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  0020e	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  00211	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 298  : 	
; 299  : 			memset( raw->motion_vector, 0, sizeof( vec3d ) * number_of_slots );

  00214	6b 45 f4 0c	 imul	 eax, DWORD PTR _number_of_slots$2[ebp], 12
  00218	50		 push	 eax
  00219	6a 00		 push	 0
  0021b	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  0021e	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00221	52		 push	 edx
  00222	e8 00 00 00 00	 call	 _memset
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH

; 300  : 	
; 301  : 			raw->start_rotation = (float *) malloc_fast_mem (sizeof (float) * number_of_slots);

  0022a	8b 45 f4	 mov	 eax, DWORD PTR _number_of_slots$2[ebp]
  0022d	c1 e0 02	 shl	 eax, 2
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  00236	8b 4d f0	 mov	 ecx, DWORD PTR _raw$1[ebp]
  00239	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 302  : 
; 303  : 			raw->head = 0;

  0023c	8b 45 f0	 mov	 eax, DWORD PTR _raw$1[ebp]
  0023f	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00242	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00248	8b 55 f0	 mov	 edx, DWORD PTR _raw$1[ebp]
  0024b	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 304  : 	
; 305  : 			raw->tail = 0;

  0024e	8b 45 f0	 mov	 eax, DWORD PTR _raw$1[ebp]
  00251	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00254	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  0025a	8b 55 f0	 mov	 edx, DWORD PTR _raw$1[ebp]
  0025d	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 306  : 	
; 307  : 			//
; 308  : 			// link into system
; 309  : 			//
; 310  : 
; 311  : 			insert_local_entity_into_parents_child_list (en, LIST_TYPE_SECTOR, get_local_sector_entity (&raw->eff.position), NULL);

  00260	6a 00		 push	 0
  00262	8b 45 f0	 mov	 eax, DWORD PTR _raw$1[ebp]
  00265	83 c0 04	 add	 eax, 4
  00268	50		 push	 eax
  00269	e8 00 00 00 00	 call	 ?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z ; get_local_sector_entity
  0026e	50		 push	 eax
  0026f	6a 21		 push	 33			; 00000021H
  00271	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00274	51		 push	 ecx
  00275	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list

; 312  : 
; 313  : 			insert_local_entity_into_parents_child_list (en, LIST_TYPE_UPDATE, get_update_entity (), NULL);

  0027a	6a 00		 push	 0
  0027c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?update_entity@@3PAUENTITY@@A ; update_entity
  00281	50		 push	 eax
  00282	6a 29		 push	 41			; 00000029H
  00284	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00287	51		 push	 ecx
  00288	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list
$LN2@unpack_loc:

; 314  : 
; 315  : 			break;
; 316  : 		}
; 317  : 		////////////////////////////////////////
; 318  : 		case PACK_MODE_BROWSE_SESSION:
; 319  : 		////////////////////////////////////////
; 320  : 		{
; 321  : 			break;
; 322  : 		}
; 323  : 		////////////////////////////////////////
; 324  : 		case PACK_MODE_UPDATE_ENTITY:
; 325  : 		////////////////////////////////////////
; 326  : 		{
; 327  : 			//
; 328  : 			// always use access functions to set the data
; 329  : 			//
; 330  : 
; 331  : 			break;
; 332  : 		}
; 333  : 	}
; 334  : }

  0028d	5f		 pop	 edi
  0028e	5e		 pop	 esi
  0028f	5b		 pop	 ebx
  00290	8b e5		 mov	 esp, ebp
  00292	5d		 pop	 ebp
  00293	c2 0c 00	 ret	 12			; 0000000cH
?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ENDP ; unpack_local_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_pack.c
;	COMDAT ?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv84 = -72						; size = 4
tv70 = -72						; size = 4
_raw$1 = -4						; size = 4
_en$ = 8						; size = 4
_mode$ = 12						; size = 4
?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z PROC	; pack_local_data, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 	ASSERT ((mode >= 0) && (mode < NUM_PACK_MODES));

  00009	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@pack_local
  0000f	83 7d 0c 04	 cmp	 DWORD PTR _mode$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN4@pack_local
$LN5@pack_local:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@IGJAAPIO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@pack_local:

; 82   : 
; 83   : 	switch (mode)

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	0f 8c 4d 01 00
	00		 jl	 $LN2@pack_local
  0003d	83 7d b8 01	 cmp	 DWORD PTR tv70[ebp], 1
  00041	7e 05		 jle	 SHORT $LN6@pack_local
  00043	e9 42 01 00 00	 jmp	 $LN2@pack_local
$LN6@pack_local:

; 84   : 	{
; 85   : 		////////////////////////////////////////
; 86   : 		case PACK_MODE_SERVER_SESSION:
; 87   : 		case PACK_MODE_CLIENT_SESSION:
; 88   : 		////////////////////////////////////////
; 89   : 		{
; 90   : 			smoke_list
; 91   : 				*raw;
; 92   : 
; 93   : 			raw = (smoke_list *) get_local_entity_data (en);

  00048	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004e	89 4d fc	 mov	 DWORD PTR _raw$1[ebp], ecx

; 94   : 
; 95   : 			if (effect_database [raw->eff.sub_type].constructed_locally)

  00051	8b 45 fc	 mov	 eax, DWORD PTR _raw$1[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	83 3c 8d 00 00
	00 00 00	 cmp	 DWORD PTR ?effect_database@@3QBUEFFECT_DATA@@B[ecx*4], 0
  0005e	74 05		 je	 SHORT $LN7@pack_local

; 96   : 			{
; 97   : 				return;

  00060	e9 25 01 00 00	 jmp	 $LN1@pack_local
$LN7@pack_local:

; 98   : 			}
; 99   : 
; 100  : 			pack_entity_type (get_local_entity_type (en));

  00065	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00069	74 0a		 je	 SHORT $LN12@pack_local
  0006b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	89 4d b8	 mov	 DWORD PTR tv84[ebp], ecx
  00073	eb 21		 jmp	 SHORT $LN13@pack_local
$LN12@pack_local:
  00075	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  0007b	83 c2 14	 add	 edx, 20			; 00000014H
  0007e	52		 push	 edx
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@IGJAAPIO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0008f	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN13@pack_local:
  00096	8b 4d b8	 mov	 ecx, DWORD PTR tv84[ebp]
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 101  : 
; 102  : 			pack_entity_safe_ptr (en);

  0009f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z ; pack_entity_safe_ptr

; 103  : 
; 104  : 			//
; 105  : 			// pack effect data
; 106  : 			//
; 107  : 
; 108  : 			pack_effect_data (en, &raw->eff, mode);

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000ab	50		 push	 eax
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _raw$1[ebp]
  000af	51		 push	 ecx
  000b0	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000b3	52		 push	 edx
  000b4	e8 00 00 00 00	 call	 ?pack_effect_data@@YGXPAUENTITY@@PAUEFFECT@@W4PACK_MODES@@@Z ; pack_effect_data

; 109  : 
; 110  : 			//
; 111  : 			// pack smokelist data
; 112  : 			//
; 113  : 
; 114  : 			pack_int_value (en, INT_TYPE_SMOKE_TYPE, raw->smoke_type);

  000b9	8b 45 fc	 mov	 eax, DWORD PTR _raw$1[ebp]
  000bc	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000bf	51		 push	 ecx
  000c0	68 bd 00 00 00	 push	 189			; 000000bdH
  000c5	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 115  : 
; 116  : 			pack_float_value (en, FLOAT_TYPE_FREQUENCY, raw->frequency);

  000ce	8b 45 fc	 mov	 eax, DWORD PTR _raw$1[ebp]
  000d1	51		 push	 ecx
  000d2	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	6a 2d		 push	 45			; 0000002dH
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 117  : 
; 118  : 			pack_float_value (en, FLOAT_TYPE_GENERATOR_LIFETIME, raw->generator_lifetime);

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _raw$1[ebp]
  000ea	51		 push	 ecx
  000eb	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	6a 32		 push	 50			; 00000032H
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000fa	51		 push	 ecx
  000fb	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 119  : 
; 120  : 			// Xhit: added scale and alpha_percentage for downwash effect. (030328)
; 121  : 			//VJ 030508 if downwash 
; 122  : 			if (command_line_downwash)

  00100	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_downwash@@3HA, 0 ; command_line_downwash
  00107	74 2c		 je	 SHORT $LN8@pack_local

; 123  : 			{
; 124  : 				pack_float_value (en, FLOAT_TYPE_SCALE, raw->scale);

  00109	8b 45 fc	 mov	 eax, DWORD PTR _raw$1[ebp]
  0010c	51		 push	 ecx
  0010d	f3 0f 10 40 44	 movss	 xmm0, DWORD PTR [eax+68]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	6a 73		 push	 115			; 00000073H
  00119	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0011c	51		 push	 ecx
  0011d	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 125  : 				pack_int_value (en, INT_TYPE_COLOUR_ALPHA, raw->alpha_percentage);

  00122	8b 45 fc	 mov	 eax, DWORD PTR _raw$1[ebp]
  00125	0f b6 48 48	 movzx	 ecx, BYTE PTR [eax+72]
  00129	51		 push	 ecx
  0012a	6a 1d		 push	 29			; 0000001dH
  0012c	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN8@pack_local:

; 126  : 			}	
; 127  : 
; 128  : 			// smoke_sleep
; 129  : 
; 130  : 			pack_float_value (en, FLOAT_TYPE_SMOKE_LIFETIME, raw->smoke_lifetime);

  00135	8b 45 fc	 mov	 eax, DWORD PTR _raw$1[ebp]
  00138	51		 push	 ecx
  00139	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  0013e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00143	6a 76		 push	 118			; 00000076H
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 131  : 
; 132  : 			// texture_distance
; 133  : 
; 134  : 			// width_adjustment
; 135  : 
; 136  : 			// alive_count
; 137  : 
; 138  : 			pack_int_value (en, INT_TYPE_INFINITE_GENERATOR, raw->infinite_generator);

  0014e	8b 45 fc	 mov	 eax, DWORD PTR _raw$1[ebp]
  00151	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00154	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  00157	83 e1 01	 and	 ecx, 1
  0015a	51		 push	 ecx
  0015b	6a 66		 push	 102			; 00000066H
  0015d	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 139  : 
; 140  : 			// head
; 141  : 
; 142  : 			// tail
; 143  : 
; 144  : 			pack_vec3d (en, VEC3D_TYPE_INITIAL_VELOCITY, &raw->initial_velocity);

  00166	8b 45 fc	 mov	 eax, DWORD PTR _raw$1[ebp]
  00169	83 c0 54	 add	 eax, 84			; 00000054H
  0016c	50		 push	 eax
  0016d	6a 05		 push	 5
  0016f	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00172	51		 push	 ecx
  00173	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 145  : 
; 146  : 			// motion vectors 
; 147  : 
; 148  : 			// positions 
; 149  : 
; 150  : 			// start_rotation 
; 151  : 
; 152  : 			// current_frame
; 153  : 
; 154  : 			// valid flags
; 155  : 
; 156  : 			pack_vec3d (en, VEC3D_TYPE_RELATIVE_POSITION, &raw->relative_position);

  00178	8b 45 fc	 mov	 eax, DWORD PTR _raw$1[ebp]
  0017b	83 c0 60	 add	 eax, 96			; 00000060H
  0017e	50		 push	 eax
  0017f	6a 09		 push	 9
  00181	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00184	51		 push	 ecx
  00185	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d
$LN2@pack_local:
$LN1@pack_local:

; 157  : 
; 158  : 			// sector_link 
; 159  : 
; 160  : 			break;
; 161  : 		}
; 162  : 		////////////////////////////////////////
; 163  : 		case PACK_MODE_BROWSE_SESSION:
; 164  : 		////////////////////////////////////////
; 165  : 		{
; 166  : 			break;
; 167  : 		}
; 168  : 		////////////////////////////////////////
; 169  : 		case PACK_MODE_UPDATE_ENTITY:
; 170  : 		////////////////////////////////////////
; 171  : 		{
; 172  : 			break;
; 173  : 		}
; 174  : 	}
; 175  : }

  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c2 08 00	 ret	 8
?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z ENDP	; pack_local_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_pack.c
;	COMDAT ?overload_smoke_list_pack_functions@@YGXXZ
_TEXT	SEGMENT
?overload_smoke_list_pack_functions@@YGXXZ PROC		; overload_smoke_list_pack_functions, COMDAT

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 342  : 	fn_pack_local_entity_data[ENTITY_TYPE_SMOKE_LIST]		= pack_local_data;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 1f	 imul	 ecx, eax, 31
  00011	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA[ecx], OFFSET ?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z ; pack_local_data

; 343  : 
; 344  : 	fn_unpack_local_entity_data[ENTITY_TYPE_SMOKE_LIST]	= unpack_local_data;

  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	6b c8 1f	 imul	 ecx, eax, 31
  00023	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA[ecx], OFFSET ?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ; unpack_local_data

; 345  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?overload_smoke_list_pack_functions@@YGXXZ ENDP		; overload_smoke_list_pack_functions
_TEXT	ENDS
END
