; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dobjvis.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?set_object_3d_instance_relative_position@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; set_object_3d_instance_relative_position
PUBLIC	?get_position_3d_relative_position@@YGXPAUVEC3D@@0@Z ; get_position_3d_relative_position
PUBLIC	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
PUBLIC	?get_object_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@PAM1@Z ; get_object_3d_screen_coordinates
PUBLIC	?get_object_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_object_3d_instance_visibility
PUBLIC	?get_scene_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@HPAUVEC3D@@@Z ; get_scene_3d_instance_visibility
PUBLIC	?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z ; get_object_3d_bounding_box
PUBLIC	?get_object_3d_bounding_box_without_lines@@YGPAUOBJECT_3D_BOUNDS@@H@Z ; get_object_3d_bounding_box_without_lines
PUBLIC	?get_object_3d_radius@@YGMH@Z			; get_object_3d_radius
PUBLIC	?get_object_3d_outcode@@YGHHPAUVEC3D@@PAH@Z	; get_object_3d_outcode
PUBLIC	?get_scaled_object_3d_outcode@@YGHHPAUVEC3D@@0PAH@Z ; get_scaled_object_3d_outcode
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?generate_3d_outcode@@YGHMM@Z:PROC		; generate_3d_outcode
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A:DWORD ; objects_3d_scene_database
EXTRN	?objects_3d_data@@3PAUOBJECT_3D@@A:DWORD	; objects_3d_data
EXTRN	?rotation_3d@@3PAY02MA:BYTE			; rotation_3d
EXTRN	__fltused:DWORD
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?get_scaled_object_3d_outcode@@YGHHPAUVEC3D@@0PAH@Z
_TEXT	SEGMENT
_this_outcode$1 = -228					; size = 4
_j$2 = -224						; size = 4
_i$3 = -220						; size = 4
_q$4 = -216						; size = 4
_z$5 = -212						; size = 4
_y$6 = -208						; size = 4
_x$7 = -204						; size = 4
_iymin$8 = -200						; size = 4
_iymax$9 = -196						; size = 4
_ixmin$10 = -192					; size = 4
_ixmax$11 = -188					; size = 4
_oymin$12 = -184					; size = 4
_oymax$13 = -180					; size = 4
_oxmin$14 = -176					; size = 4
_oxmax$15 = -172					; size = 4
_box$ = -168						; size = 96
_object_bounds$ = -72					; size = 24
_object_maximum$ = -48					; size = 12
_object_minimum$ = -36					; size = 12
_object_centre$ = -24					; size = 12
_object_outcode2$ = -12					; size = 4
_object_outcode$ = -8					; size = 4
_bound_count$ = -4					; size = 4
_object_number$ = 8					; size = 4
_pos$ = 12						; size = 4
_scale$ = 16						; size = 4
_outcode$ = 20						; size = 4
?get_scaled_object_3d_outcode@@YGHHPAUVEC3D@@0PAH@Z PROC ; get_scaled_object_3d_outcode, COMDAT

; 683  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 684  : 
; 685  : 	int
; 686  : 		bound_count,
; 687  : 		object_outcode,
; 688  : 		object_outcode2;
; 689  : 
; 690  : 	vec3d
; 691  : 		object_centre,
; 692  : 		object_minimum,
; 693  : 		object_maximum;
; 694  : 
; 695  : 	object_3d_bounds
; 696  : 		object_bounds;
; 697  : 
; 698  : 	vec3d
; 699  : 		box[8];
; 700  : 
; 701  : 	//
; 702  : 	// Calculate the bounding box of the object
; 703  : 	//
; 704  : 
; 705  : 	object_centre.x = ( objects_3d_data[object_number].bounding_box.xmax + objects_3d_data[object_number].bounding_box.xmin ) / 2;

  0000c	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00010	6b 4d 08 68	 imul	 ecx, DWORD PTR _object_number$[ebp], 104
  00014	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0001a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00020	f3 0f 10 44 02
	14		 movss	 xmm0, DWORD PTR [edx+eax+20]
  00026	f3 0f 58 44 0e
	10		 addss	 xmm0, DWORD PTR [esi+ecx+16]
  0002c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00034	f3 0f 11 45 e8	 movss	 DWORD PTR _object_centre$[ebp], xmm0

; 706  : 	object_centre.y = ( objects_3d_data[object_number].bounding_box.ymax + objects_3d_data[object_number].bounding_box.ymin ) / 2;

  00039	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0003d	6b 4d 08 68	 imul	 ecx, DWORD PTR _object_number$[ebp], 104
  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00047	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0004d	f3 0f 10 44 02
	1c		 movss	 xmm0, DWORD PTR [edx+eax+28]
  00053	f3 0f 58 44 0e
	18		 addss	 xmm0, DWORD PTR [esi+ecx+24]
  00059	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00061	f3 0f 11 45 ec	 movss	 DWORD PTR _object_centre$[ebp+4], xmm0

; 707  : 	object_centre.z = ( objects_3d_data[object_number].bounding_box.zmax + objects_3d_data[object_number].bounding_box.zmin ) / 2;

  00066	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0006a	6b 4d 08 68	 imul	 ecx, DWORD PTR _object_number$[ebp], 104
  0006e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00074	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0007a	f3 0f 10 44 02
	24		 movss	 xmm0, DWORD PTR [edx+eax+36]
  00080	f3 0f 58 44 0e
	20		 addss	 xmm0, DWORD PTR [esi+ecx+32]
  00086	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0008e	f3 0f 11 45 f0	 movss	 DWORD PTR _object_centre$[ebp+8], xmm0

; 708  : 
; 709  : 	object_minimum.x = ( object_centre.x - objects_3d_data[object_number].bounding_box.xmin ) * scale->x;

  00093	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0009d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _object_centre$[ebp]
  000a2	f3 0f 5c 44 01
	10		 subss	 xmm0, DWORD PTR [ecx+eax+16]
  000a8	8b 55 10	 mov	 edx, DWORD PTR _scale$[ebp]
  000ab	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  000af	f3 0f 11 45 dc	 movss	 DWORD PTR _object_minimum$[ebp], xmm0

; 710  : 	object_minimum.y = ( object_centre.y - objects_3d_data[object_number].bounding_box.ymin ) * scale->y;

  000b4	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000be	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _object_centre$[ebp+4]
  000c3	f3 0f 5c 44 01
	18		 subss	 xmm0, DWORD PTR [ecx+eax+24]
  000c9	8b 55 10	 mov	 edx, DWORD PTR _scale$[ebp]
  000cc	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  000d1	f3 0f 11 45 e0	 movss	 DWORD PTR _object_minimum$[ebp+4], xmm0

; 711  : 	object_minimum.z = ( object_centre.z - objects_3d_data[object_number].bounding_box.zmin ) * scale->z;

  000d6	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000e0	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _object_centre$[ebp+8]
  000e5	f3 0f 5c 44 01
	20		 subss	 xmm0, DWORD PTR [ecx+eax+32]
  000eb	8b 55 10	 mov	 edx, DWORD PTR _scale$[ebp]
  000ee	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  000f3	f3 0f 11 45 e4	 movss	 DWORD PTR _object_minimum$[ebp+8], xmm0

; 712  : 
; 713  : 	object_maximum.x = ( object_centre.x + objects_3d_data[object_number].bounding_box.xmax ) * scale->x;

  000f8	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00102	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _object_centre$[ebp]
  00107	f3 0f 58 44 01
	14		 addss	 xmm0, DWORD PTR [ecx+eax+20]
  0010d	8b 55 10	 mov	 edx, DWORD PTR _scale$[ebp]
  00110	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  00114	f3 0f 11 45 d0	 movss	 DWORD PTR _object_maximum$[ebp], xmm0

; 714  : 	object_maximum.y = ( object_centre.y + objects_3d_data[object_number].bounding_box.ymax ) * scale->y;

  00119	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0011d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00123	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _object_centre$[ebp+4]
  00128	f3 0f 58 44 01
	1c		 addss	 xmm0, DWORD PTR [ecx+eax+28]
  0012e	8b 55 10	 mov	 edx, DWORD PTR _scale$[ebp]
  00131	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  00136	f3 0f 11 45 d4	 movss	 DWORD PTR _object_maximum$[ebp+4], xmm0

; 715  : 	object_maximum.z = ( object_centre.z + objects_3d_data[object_number].bounding_box.zmax ) * scale->z;

  0013b	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0013f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00145	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _object_centre$[ebp+8]
  0014a	f3 0f 58 44 01
	24		 addss	 xmm0, DWORD PTR [ecx+eax+36]
  00150	8b 55 10	 mov	 edx, DWORD PTR _scale$[ebp]
  00153	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  00158	f3 0f 11 45 d8	 movss	 DWORD PTR _object_maximum$[ebp+8], xmm0

; 716  : 
; 717  : 	object_bounds.xmin = object_centre.x + object_minimum.x;

  0015d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _object_centre$[ebp]
  00162	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _object_minimum$[ebp]
  00167	f3 0f 11 45 b8	 movss	 DWORD PTR _object_bounds$[ebp], xmm0

; 718  : 	object_bounds.xmax = object_centre.x + object_maximum.x;

  0016c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _object_centre$[ebp]
  00171	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _object_maximum$[ebp]
  00176	f3 0f 11 45 bc	 movss	 DWORD PTR _object_bounds$[ebp+4], xmm0

; 719  : 	object_bounds.ymin = object_centre.y + object_minimum.y;

  0017b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _object_centre$[ebp+4]
  00180	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _object_minimum$[ebp+4]
  00185	f3 0f 11 45 c0	 movss	 DWORD PTR _object_bounds$[ebp+8], xmm0

; 720  : 	object_bounds.ymax = object_centre.y + object_maximum.y;

  0018a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _object_centre$[ebp+4]
  0018f	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _object_maximum$[ebp+4]
  00194	f3 0f 11 45 c4	 movss	 DWORD PTR _object_bounds$[ebp+12], xmm0

; 721  : 	object_bounds.zmin = object_centre.z + object_minimum.z;

  00199	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _object_centre$[ebp+8]
  0019e	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _object_minimum$[ebp+8]
  001a3	f3 0f 11 45 c8	 movss	 DWORD PTR _object_bounds$[ebp+16], xmm0

; 722  : 	object_bounds.zmax = object_centre.z + object_maximum.z;

  001a8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _object_centre$[ebp+8]
  001ad	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _object_maximum$[ebp+8]
  001b2	f3 0f 11 45 cc	 movss	 DWORD PTR _object_bounds$[ebp+20], xmm0

; 723  : 
; 724  : 
; 725  : 	box[0].x = object_bounds.xmin;

  001b7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001bc	6b c8 00	 imul	 ecx, eax, 0
  001bf	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _object_bounds$[ebp]
  001c4	f3 0f 11 84 0d
	58 ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx], xmm0

; 726  : 	box[0].y = object_bounds.ymin;

  001cd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001d2	6b c8 00	 imul	 ecx, eax, 0
  001d5	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+8]
  001da	f3 0f 11 84 0d
	5c ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx+4], xmm0

; 727  : 	box[0].z = object_bounds.zmin;

  001e3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001e8	6b c8 00	 imul	 ecx, eax, 0
  001eb	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+16]
  001f0	f3 0f 11 84 0d
	60 ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx+8], xmm0

; 728  : 
; 729  : 	box[1].x = object_bounds.xmin;

  001f9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001fe	c1 e0 00	 shl	 eax, 0
  00201	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _object_bounds$[ebp]
  00206	f3 0f 11 84 05
	58 ff ff ff	 movss	 DWORD PTR _box$[ebp+eax], xmm0

; 730  : 	box[1].y = object_bounds.ymin;

  0020f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00214	c1 e0 00	 shl	 eax, 0
  00217	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+8]
  0021c	f3 0f 11 84 05
	5c ff ff ff	 movss	 DWORD PTR _box$[ebp+eax+4], xmm0

; 731  : 	box[1].z = object_bounds.zmax;

  00225	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0022a	c1 e0 00	 shl	 eax, 0
  0022d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+20]
  00232	f3 0f 11 84 05
	60 ff ff ff	 movss	 DWORD PTR _box$[ebp+eax+8], xmm0

; 732  : 
; 733  : 	box[2].x = object_bounds.xmin;

  0023b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00240	d1 e0		 shl	 eax, 1
  00242	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _object_bounds$[ebp]
  00247	f3 0f 11 84 05
	58 ff ff ff	 movss	 DWORD PTR _box$[ebp+eax], xmm0

; 734  : 	box[2].y = object_bounds.ymax;

  00250	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00255	d1 e0		 shl	 eax, 1
  00257	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+12]
  0025c	f3 0f 11 84 05
	5c ff ff ff	 movss	 DWORD PTR _box$[ebp+eax+4], xmm0

; 735  : 	box[2].z = object_bounds.zmin;

  00265	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0026a	d1 e0		 shl	 eax, 1
  0026c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+16]
  00271	f3 0f 11 84 05
	60 ff ff ff	 movss	 DWORD PTR _box$[ebp+eax+8], xmm0

; 736  : 
; 737  : 	box[3].x = object_bounds.xmin;

  0027a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0027f	6b c8 03	 imul	 ecx, eax, 3
  00282	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _object_bounds$[ebp]
  00287	f3 0f 11 84 0d
	58 ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx], xmm0

; 738  : 	box[3].y = object_bounds.ymax;

  00290	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00295	6b c8 03	 imul	 ecx, eax, 3
  00298	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+12]
  0029d	f3 0f 11 84 0d
	5c ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx+4], xmm0

; 739  : 	box[3].z = object_bounds.zmax;

  002a6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002ab	6b c8 03	 imul	 ecx, eax, 3
  002ae	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+20]
  002b3	f3 0f 11 84 0d
	60 ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx+8], xmm0

; 740  : 
; 741  : 	box[4].x = object_bounds.xmax;

  002bc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002c1	c1 e0 02	 shl	 eax, 2
  002c4	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+4]
  002c9	f3 0f 11 84 05
	58 ff ff ff	 movss	 DWORD PTR _box$[ebp+eax], xmm0

; 742  : 	box[4].y = object_bounds.ymin;

  002d2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002d7	c1 e0 02	 shl	 eax, 2
  002da	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+8]
  002df	f3 0f 11 84 05
	5c ff ff ff	 movss	 DWORD PTR _box$[ebp+eax+4], xmm0

; 743  : 	box[4].z = object_bounds.zmin;

  002e8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002ed	c1 e0 02	 shl	 eax, 2
  002f0	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+16]
  002f5	f3 0f 11 84 05
	60 ff ff ff	 movss	 DWORD PTR _box$[ebp+eax+8], xmm0

; 744  : 
; 745  : 	box[5].x = object_bounds.xmax;

  002fe	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00303	6b c8 05	 imul	 ecx, eax, 5
  00306	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+4]
  0030b	f3 0f 11 84 0d
	58 ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx], xmm0

; 746  : 	box[5].y = object_bounds.ymin;

  00314	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00319	6b c8 05	 imul	 ecx, eax, 5
  0031c	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+8]
  00321	f3 0f 11 84 0d
	5c ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx+4], xmm0

; 747  : 	box[5].z = object_bounds.zmax;

  0032a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0032f	6b c8 05	 imul	 ecx, eax, 5
  00332	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+20]
  00337	f3 0f 11 84 0d
	60 ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx+8], xmm0

; 748  : 
; 749  : 	box[6].x = object_bounds.xmax;

  00340	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00345	6b c8 06	 imul	 ecx, eax, 6
  00348	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+4]
  0034d	f3 0f 11 84 0d
	58 ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx], xmm0

; 750  : 	box[6].y = object_bounds.ymax;

  00356	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0035b	6b c8 06	 imul	 ecx, eax, 6
  0035e	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+12]
  00363	f3 0f 11 84 0d
	5c ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx+4], xmm0

; 751  : 	box[6].z = object_bounds.zmin;

  0036c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00371	6b c8 06	 imul	 ecx, eax, 6
  00374	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+16]
  00379	f3 0f 11 84 0d
	60 ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx+8], xmm0

; 752  : 
; 753  : 	box[7].x = object_bounds.xmax;

  00382	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00387	6b c8 07	 imul	 ecx, eax, 7
  0038a	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+4]
  0038f	f3 0f 11 84 0d
	58 ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx], xmm0

; 754  : 	box[7].y = object_bounds.ymax;

  00398	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0039d	6b c8 07	 imul	 ecx, eax, 7
  003a0	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+12]
  003a5	f3 0f 11 84 0d
	5c ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx+4], xmm0

; 755  : 	box[7].z = object_bounds.zmax;

  003ae	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003b3	6b c8 07	 imul	 ecx, eax, 7
  003b6	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _object_bounds$[ebp+20]
  003bb	f3 0f 11 84 0d
	60 ff ff ff	 movss	 DWORD PTR _box$[ebp+ecx+8], xmm0

; 756  : 
; 757  : 	object_outcode = 0;

  003c4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _object_outcode$[ebp], 0

; 758  : 	object_outcode2 = CLIP_ALL;

  003cb	c7 45 f4 3f 00
	00 00		 mov	 DWORD PTR _object_outcode2$[ebp], 63 ; 0000003fH

; 759  : 
; 760  : 	for ( bound_count = 0; bound_count < 8; bound_count++ )

  003d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bound_count$[ebp], 0
  003d9	eb 09		 jmp	 SHORT $LN4@get_scaled
$LN2@get_scaled:
  003db	8b 45 fc	 mov	 eax, DWORD PTR _bound_count$[ebp]
  003de	83 c0 01	 add	 eax, 1
  003e1	89 45 fc	 mov	 DWORD PTR _bound_count$[ebp], eax
$LN4@get_scaled:
  003e4	83 7d fc 08	 cmp	 DWORD PTR _bound_count$[ebp], 8
  003e8	0f 8d a0 03 00
	00		 jge	 $LN3@get_scaled

; 761  : 	{
; 762  : 
; 763  : 		float
; 764  : 			oxmax,
; 765  : 			oxmin,
; 766  : 			oymax,
; 767  : 			oymin;
; 768  : 	
; 769  : 		int
; 770  : 			ixmax,
; 771  : 			ixmin,
; 772  : 			iymax,
; 773  : 			iymin;
; 774  : 	
; 775  : 		float
; 776  : 			x,
; 777  : 			y,
; 778  : 			z;
; 779  : 
; 780  : 		x = box[bound_count].x * rotation_3d[0][0];

  003ee	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  003f2	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003f7	6b d1 00	 imul	 edx, ecx, 0
  003fa	b9 04 00 00 00	 mov	 ecx, 4
  003ff	6b c9 00	 imul	 ecx, ecx, 0
  00402	f3 0f 10 84 05
	58 ff ff ff	 movss	 xmm0, DWORD PTR _box$[ebp+eax]
  0040b	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx]
  00414	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _x$7[ebp], xmm0

; 781  : 		y = box[bound_count].x * rotation_3d[0][1];

  0041c	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  00420	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00425	6b d1 00	 imul	 edx, ecx, 0
  00428	b9 04 00 00 00	 mov	 ecx, 4
  0042d	c1 e1 00	 shl	 ecx, 0
  00430	f3 0f 10 84 05
	58 ff ff ff	 movss	 xmm0, DWORD PTR _box$[ebp+eax]
  00439	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx]
  00442	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y$6[ebp], xmm0

; 782  : 		z = box[bound_count].x * rotation_3d[0][2];

  0044a	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  0044e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00453	6b d1 00	 imul	 edx, ecx, 0
  00456	b9 04 00 00 00	 mov	 ecx, 4
  0045b	d1 e1		 shl	 ecx, 1
  0045d	f3 0f 10 84 05
	58 ff ff ff	 movss	 xmm0, DWORD PTR _box$[ebp+eax]
  00466	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx]
  0046f	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _z$5[ebp], xmm0

; 783  : 
; 784  : 		x += box[bound_count].y * rotation_3d[1][0];

  00477	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  0047b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00480	c1 e1 00	 shl	 ecx, 0
  00483	ba 04 00 00 00	 mov	 edx, 4
  00488	6b d2 00	 imul	 edx, edx, 0
  0048b	f3 0f 10 84 05
	5c ff ff ff	 movss	 xmm0, DWORD PTR _box$[ebp+eax+4]
  00494	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  0049d	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _x$7[ebp]
  004a5	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _x$7[ebp], xmm0

; 785  : 		y += box[bound_count].y * rotation_3d[1][1];

  004ad	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  004b1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004b6	c1 e1 00	 shl	 ecx, 0
  004b9	ba 04 00 00 00	 mov	 edx, 4
  004be	c1 e2 00	 shl	 edx, 0
  004c1	f3 0f 10 84 05
	5c ff ff ff	 movss	 xmm0, DWORD PTR _box$[ebp+eax+4]
  004ca	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  004d3	f3 0f 58 85 30
	ff ff ff	 addss	 xmm0, DWORD PTR _y$6[ebp]
  004db	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y$6[ebp], xmm0

; 786  : 		z += box[bound_count].y * rotation_3d[1][2];

  004e3	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  004e7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004ec	c1 e1 00	 shl	 ecx, 0
  004ef	ba 04 00 00 00	 mov	 edx, 4
  004f4	d1 e2		 shl	 edx, 1
  004f6	f3 0f 10 84 05
	5c ff ff ff	 movss	 xmm0, DWORD PTR _box$[ebp+eax+4]
  004ff	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00508	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _z$5[ebp]
  00510	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _z$5[ebp], xmm0

; 787  : 
; 788  : 		x += box[bound_count].z * rotation_3d[2][0];

  00518	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  0051c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00521	d1 e1		 shl	 ecx, 1
  00523	ba 04 00 00 00	 mov	 edx, 4
  00528	6b d2 00	 imul	 edx, edx, 0
  0052b	f3 0f 10 84 05
	60 ff ff ff	 movss	 xmm0, DWORD PTR _box$[ebp+eax+8]
  00534	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  0053d	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _x$7[ebp]
  00545	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _x$7[ebp], xmm0

; 789  : 		y += box[bound_count].z * rotation_3d[2][1];

  0054d	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  00551	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00556	d1 e1		 shl	 ecx, 1
  00558	ba 04 00 00 00	 mov	 edx, 4
  0055d	c1 e2 00	 shl	 edx, 0
  00560	f3 0f 10 84 05
	60 ff ff ff	 movss	 xmm0, DWORD PTR _box$[ebp+eax+8]
  00569	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00572	f3 0f 58 85 30
	ff ff ff	 addss	 xmm0, DWORD PTR _y$6[ebp]
  0057a	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y$6[ebp], xmm0

; 790  : 		z += box[bound_count].z * rotation_3d[2][2];

  00582	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  00586	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0058b	d1 e1		 shl	 ecx, 1
  0058d	ba 04 00 00 00	 mov	 edx, 4
  00592	d1 e2		 shl	 edx, 1
  00594	f3 0f 10 84 05
	60 ff ff ff	 movss	 xmm0, DWORD PTR _box$[ebp+eax+8]
  0059d	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  005a6	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _z$5[ebp]
  005ae	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _z$5[ebp], xmm0

; 791  : 
; 792  : 		x += pos->x;

  005b6	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  005b9	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _x$7[ebp]
  005c1	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  005c5	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _x$7[ebp], xmm0

; 793  : 		y += pos->y;

  005cd	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  005d0	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y$6[ebp]
  005d8	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  005dd	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y$6[ebp], xmm0

; 794  : 		z += pos->z;

  005e5	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  005e8	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _z$5[ebp]
  005f0	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  005f5	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _z$5[ebp], xmm0

; 795  : 
; 796  : 		if ( *( ( int * ) &z ) >= *( ( int * ) &clip_hither ) )

  005fd	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _z$5[ebp]
  00603	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  00609	0f 8c 68 01 00
	00		 jl	 $LN5@get_scaled

; 797  : 		{
; 798  : 
; 799  : 			float
; 800  : 				q,
; 801  : 				i,
; 802  : 				j;
; 803  : 
; 804  : 			int
; 805  : 				this_outcode;
; 806  : 
; 807  : 			q = 1.0 / z;

  0060f	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _z$5[ebp]
  00617	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0061f	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00623	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00627	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _q$4[ebp], xmm0

; 808  : 
; 809  : 			i = ( active_3d_environment->screen_i_scale * x * q );

  0062f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00634	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00638	f3 0f 59 85 34
	ff ff ff	 mulss	 xmm0, DWORD PTR _x$7[ebp]
  00640	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$4[ebp]
  00648	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _i$3[ebp], xmm0

; 810  : 			j = ( active_3d_environment->screen_j_scale * y * q );

  00650	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00655	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0065a	f3 0f 59 85 30
	ff ff ff	 mulss	 xmm0, DWORD PTR _y$6[ebp]
  00662	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$4[ebp]
  0066a	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _j$2[ebp], xmm0

; 811  : 
; 812  : 			j = active_3d_environment->y_origin - j;

  00672	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00677	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0067c	f3 0f 5c 85 20
	ff ff ff	 subss	 xmm0, DWORD PTR _j$2[ebp]
  00684	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _j$2[ebp], xmm0

; 813  : 			i = active_3d_environment->x_origin + i;

  0068c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00691	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00696	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _i$3[ebp]
  0069e	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _i$3[ebp], xmm0

; 814  : 
; 815  : 			oxmax = active_viewport.x_max - i; oxmin = i - active_viewport.x_min;

  006a6	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  006ae	f3 0f 5c 85 24
	ff ff ff	 subss	 xmm0, DWORD PTR _i$3[ebp]
  006b6	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _oxmax$15[ebp], xmm0
  006be	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _i$3[ebp]
  006c6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  006ce	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _oxmin$14[ebp], xmm0

; 816  : 			oymax = active_viewport.y_max - j; oymin = j - active_viewport.y_min;

  006d6	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  006de	f3 0f 5c 85 20
	ff ff ff	 subss	 xmm0, DWORD PTR _j$2[ebp]
  006e6	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _oymax$13[ebp], xmm0
  006ee	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _j$2[ebp]
  006f6	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  006fe	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _oymin$12[ebp], xmm0

; 817  : 
; 818  : 			ixmax = *( ( int * ) &oxmax ); ixmin = *( ( int * ) &oxmin );

  00706	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _oxmax$15[ebp]
  0070c	89 85 44 ff ff
	ff		 mov	 DWORD PTR _ixmax$11[ebp], eax
  00712	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _oxmin$14[ebp]
  00718	89 85 40 ff ff
	ff		 mov	 DWORD PTR _ixmin$10[ebp], eax

; 819  : 			iymax = *( ( int * ) &oymax ); iymin = *( ( int * ) &oymin );

  0071e	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _oymax$13[ebp]
  00724	89 85 3c ff ff
	ff		 mov	 DWORD PTR _iymax$9[ebp], eax
  0072a	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _oymin$12[ebp]
  00730	89 85 38 ff ff
	ff		 mov	 DWORD PTR _iymin$8[ebp], eax

; 820  : 
; 821  : 			this_outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00736	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _iymax$9[ebp]
  0073c	50		 push	 eax
  0073d	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _ixmax$11[ebp]
  00743	51		 push	 ecx
  00744	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _iymin$8[ebp]
  0074a	52		 push	 edx
  0074b	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _ixmin$10[ebp]
  00751	50		 push	 eax
  00752	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00757	89 85 1c ff ff
	ff		 mov	 DWORD PTR _this_outcode$1[ebp], eax

; 822  : 
; 823  : 			object_outcode |= this_outcode;

  0075d	8b 45 f8	 mov	 eax, DWORD PTR _object_outcode$[ebp]
  00760	0b 85 1c ff ff
	ff		 or	 eax, DWORD PTR _this_outcode$1[ebp]
  00766	89 45 f8	 mov	 DWORD PTR _object_outcode$[ebp], eax

; 824  : 			object_outcode2 &= this_outcode;

  00769	8b 45 f4	 mov	 eax, DWORD PTR _object_outcode2$[ebp]
  0076c	23 85 1c ff ff
	ff		 and	 eax, DWORD PTR _this_outcode$1[ebp]
  00772	89 45 f4	 mov	 DWORD PTR _object_outcode2$[ebp], eax

; 825  : 		}
; 826  : 		else

  00775	eb 12		 jmp	 SHORT $LN6@get_scaled
$LN5@get_scaled:

; 827  : 		{
; 828  : 
; 829  : 			object_outcode |= CLIP_HITHER;

  00777	8b 45 f8	 mov	 eax, DWORD PTR _object_outcode$[ebp]
  0077a	83 c8 20	 or	 eax, 32			; 00000020H
  0077d	89 45 f8	 mov	 DWORD PTR _object_outcode$[ebp], eax

; 830  : 			object_outcode2 &= CLIP_HITHER;

  00780	8b 45 f4	 mov	 eax, DWORD PTR _object_outcode2$[ebp]
  00783	83 e0 20	 and	 eax, 32			; 00000020H
  00786	89 45 f4	 mov	 DWORD PTR _object_outcode2$[ebp], eax
$LN6@get_scaled:

; 831  : 		}
; 832  : 	}

  00789	e9 4d fc ff ff	 jmp	 $LN2@get_scaled
$LN3@get_scaled:

; 833  : 
; 834  : 	*outcode = object_outcode;

  0078e	8b 45 14	 mov	 eax, DWORD PTR _outcode$[ebp]
  00791	8b 4d f8	 mov	 ecx, DWORD PTR _object_outcode$[ebp]
  00794	89 08		 mov	 DWORD PTR [eax], ecx

; 835  : 
; 836  : 	return ( object_outcode2 );

  00796	8b 45 f4	 mov	 eax, DWORD PTR _object_outcode2$[ebp]

; 837  : }

  00799	5f		 pop	 edi
  0079a	5e		 pop	 esi
  0079b	5b		 pop	 ebx
  0079c	8b e5		 mov	 esp, ebp
  0079e	5d		 pop	 ebp
  0079f	c2 10 00	 ret	 16			; 00000010H
?get_scaled_object_3d_outcode@@YGHHPAUVEC3D@@0PAH@Z ENDP ; get_scaled_object_3d_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?get_object_3d_outcode@@YGHHPAUVEC3D@@PAH@Z
_TEXT	SEGMENT
_this_outcode$1 = -168					; size = 4
_j$2 = -164						; size = 4
_i$3 = -160						; size = 4
_q$4 = -156						; size = 4
_z$5 = -152						; size = 4
_y$6 = -148						; size = 4
_x$7 = -144						; size = 4
_iymin$8 = -140						; size = 4
_iymax$9 = -136						; size = 4
_ixmin$10 = -132					; size = 4
_ixmax$11 = -128					; size = 4
_oymin$12 = -124					; size = 4
_oymax$13 = -120					; size = 4
_oxmin$14 = -116					; size = 4
_oxmax$15 = -112					; size = 4
_box$ = -108						; size = 96
_object_outcode2$ = -12					; size = 4
_object_outcode$ = -8					; size = 4
_bound_count$ = -4					; size = 4
_object_number$ = 8					; size = 4
_pos$ = 12						; size = 4
_outcode$ = 16						; size = 4
?get_object_3d_outcode@@YGHHPAUVEC3D@@PAH@Z PROC	; get_object_3d_outcode, COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 547  : 
; 548  : 	int
; 549  : 		bound_count,
; 550  : 		object_outcode,
; 551  : 		object_outcode2;
; 552  : 
; 553  : 	vec3d
; 554  : 		box[8];
; 555  : 
; 556  : 	//
; 557  : 	// Calculate the bounding box of the object
; 558  : 	//
; 559  : 
; 560  : 	box[0].x = objects_3d_data[object_number].bounding_box.xmin;

  0000c	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00010	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00015	6b d1 00	 imul	 edx, ecx, 0
  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0001e	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00022	89 44 15 94	 mov	 DWORD PTR _box$[ebp+edx], eax

; 561  : 	box[0].y = objects_3d_data[object_number].bounding_box.ymin;

  00026	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0002a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0002f	6b d1 00	 imul	 edx, ecx, 0
  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00038	8b 44 01 18	 mov	 eax, DWORD PTR [ecx+eax+24]
  0003c	89 44 15 98	 mov	 DWORD PTR _box$[ebp+edx+4], eax

; 562  : 	box[0].z = objects_3d_data[object_number].bounding_box.zmin;

  00040	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00044	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00049	6b d1 00	 imul	 edx, ecx, 0
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00052	8b 44 01 20	 mov	 eax, DWORD PTR [ecx+eax+32]
  00056	89 44 15 9c	 mov	 DWORD PTR _box$[ebp+edx+8], eax

; 563  : 
; 564  : 	box[1].x = objects_3d_data[object_number].bounding_box.xmin;

  0005a	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0005e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00063	c1 e1 00	 shl	 ecx, 0
  00066	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0006c	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  00070	89 44 0d 94	 mov	 DWORD PTR _box$[ebp+ecx], eax

; 565  : 	box[1].y = objects_3d_data[object_number].bounding_box.ymin;

  00074	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00078	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0007d	c1 e1 00	 shl	 ecx, 0
  00080	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00086	8b 44 02 18	 mov	 eax, DWORD PTR [edx+eax+24]
  0008a	89 44 0d 98	 mov	 DWORD PTR _box$[ebp+ecx+4], eax

; 566  : 	box[1].z = objects_3d_data[object_number].bounding_box.zmax;

  0008e	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00092	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00097	c1 e1 00	 shl	 ecx, 0
  0009a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000a0	8b 44 02 24	 mov	 eax, DWORD PTR [edx+eax+36]
  000a4	89 44 0d 9c	 mov	 DWORD PTR _box$[ebp+ecx+8], eax

; 567  : 
; 568  : 	box[2].x = objects_3d_data[object_number].bounding_box.xmin;

  000a8	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000ac	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000b1	d1 e1		 shl	 ecx, 1
  000b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000b9	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  000bd	89 44 0d 94	 mov	 DWORD PTR _box$[ebp+ecx], eax

; 569  : 	box[2].y = objects_3d_data[object_number].bounding_box.ymax;

  000c1	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000c5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000ca	d1 e1		 shl	 ecx, 1
  000cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000d2	8b 44 02 1c	 mov	 eax, DWORD PTR [edx+eax+28]
  000d6	89 44 0d 98	 mov	 DWORD PTR _box$[ebp+ecx+4], eax

; 570  : 	box[2].z = objects_3d_data[object_number].bounding_box.zmin;

  000da	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000de	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000e3	d1 e1		 shl	 ecx, 1
  000e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000eb	8b 44 02 20	 mov	 eax, DWORD PTR [edx+eax+32]
  000ef	89 44 0d 9c	 mov	 DWORD PTR _box$[ebp+ecx+8], eax

; 571  : 
; 572  : 	box[3].x = objects_3d_data[object_number].bounding_box.xmin;

  000f3	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000f7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000fc	6b d1 03	 imul	 edx, ecx, 3
  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00105	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00109	89 44 15 94	 mov	 DWORD PTR _box$[ebp+edx], eax

; 573  : 	box[3].y = objects_3d_data[object_number].bounding_box.ymax;

  0010d	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00111	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00116	6b d1 03	 imul	 edx, ecx, 3
  00119	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0011f	8b 44 01 1c	 mov	 eax, DWORD PTR [ecx+eax+28]
  00123	89 44 15 98	 mov	 DWORD PTR _box$[ebp+edx+4], eax

; 574  : 	box[3].z = objects_3d_data[object_number].bounding_box.zmax;

  00127	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0012b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00130	6b d1 03	 imul	 edx, ecx, 3
  00133	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00139	8b 44 01 24	 mov	 eax, DWORD PTR [ecx+eax+36]
  0013d	89 44 15 9c	 mov	 DWORD PTR _box$[ebp+edx+8], eax

; 575  : 
; 576  : 	box[4].x = objects_3d_data[object_number].bounding_box.xmax;

  00141	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00145	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0014a	c1 e1 02	 shl	 ecx, 2
  0014d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00153	8b 44 02 14	 mov	 eax, DWORD PTR [edx+eax+20]
  00157	89 44 0d 94	 mov	 DWORD PTR _box$[ebp+ecx], eax

; 577  : 	box[4].y = objects_3d_data[object_number].bounding_box.ymin;

  0015b	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0015f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00164	c1 e1 02	 shl	 ecx, 2
  00167	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0016d	8b 44 02 18	 mov	 eax, DWORD PTR [edx+eax+24]
  00171	89 44 0d 98	 mov	 DWORD PTR _box$[ebp+ecx+4], eax

; 578  : 	box[4].z = objects_3d_data[object_number].bounding_box.zmin;

  00175	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00179	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0017e	c1 e1 02	 shl	 ecx, 2
  00181	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00187	8b 44 02 20	 mov	 eax, DWORD PTR [edx+eax+32]
  0018b	89 44 0d 9c	 mov	 DWORD PTR _box$[ebp+ecx+8], eax

; 579  : 
; 580  : 	box[5].x = objects_3d_data[object_number].bounding_box.xmax;

  0018f	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00193	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00198	6b d1 05	 imul	 edx, ecx, 5
  0019b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  001a1	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  001a5	89 44 15 94	 mov	 DWORD PTR _box$[ebp+edx], eax

; 581  : 	box[5].y = objects_3d_data[object_number].bounding_box.ymin;

  001a9	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001ad	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  001b2	6b d1 05	 imul	 edx, ecx, 5
  001b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  001bb	8b 44 01 18	 mov	 eax, DWORD PTR [ecx+eax+24]
  001bf	89 44 15 98	 mov	 DWORD PTR _box$[ebp+edx+4], eax

; 582  : 	box[5].z = objects_3d_data[object_number].bounding_box.zmax;

  001c3	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001c7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  001cc	6b d1 05	 imul	 edx, ecx, 5
  001cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  001d5	8b 44 01 24	 mov	 eax, DWORD PTR [ecx+eax+36]
  001d9	89 44 15 9c	 mov	 DWORD PTR _box$[ebp+edx+8], eax

; 583  : 
; 584  : 	box[6].x = objects_3d_data[object_number].bounding_box.xmax;

  001dd	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001e1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  001e6	6b d1 06	 imul	 edx, ecx, 6
  001e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  001ef	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  001f3	89 44 15 94	 mov	 DWORD PTR _box$[ebp+edx], eax

; 585  : 	box[6].y = objects_3d_data[object_number].bounding_box.ymax;

  001f7	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001fb	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00200	6b d1 06	 imul	 edx, ecx, 6
  00203	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00209	8b 44 01 1c	 mov	 eax, DWORD PTR [ecx+eax+28]
  0020d	89 44 15 98	 mov	 DWORD PTR _box$[ebp+edx+4], eax

; 586  : 	box[6].z = objects_3d_data[object_number].bounding_box.zmin;

  00211	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00215	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0021a	6b d1 06	 imul	 edx, ecx, 6
  0021d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00223	8b 44 01 20	 mov	 eax, DWORD PTR [ecx+eax+32]
  00227	89 44 15 9c	 mov	 DWORD PTR _box$[ebp+edx+8], eax

; 587  : 
; 588  : 	box[7].x = objects_3d_data[object_number].bounding_box.xmax;

  0022b	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0022f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00234	6b d1 07	 imul	 edx, ecx, 7
  00237	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0023d	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  00241	89 44 15 94	 mov	 DWORD PTR _box$[ebp+edx], eax

; 589  : 	box[7].y = objects_3d_data[object_number].bounding_box.ymax;

  00245	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00249	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0024e	6b d1 07	 imul	 edx, ecx, 7
  00251	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00257	8b 44 01 1c	 mov	 eax, DWORD PTR [ecx+eax+28]
  0025b	89 44 15 98	 mov	 DWORD PTR _box$[ebp+edx+4], eax

; 590  : 	box[7].z = objects_3d_data[object_number].bounding_box.zmax;

  0025f	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00263	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00268	6b d1 07	 imul	 edx, ecx, 7
  0026b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00271	8b 44 01 24	 mov	 eax, DWORD PTR [ecx+eax+36]
  00275	89 44 15 9c	 mov	 DWORD PTR _box$[ebp+edx+8], eax

; 591  : 
; 592  : 	object_outcode = 0;

  00279	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _object_outcode$[ebp], 0

; 593  : 	object_outcode2 = CLIP_ALL;

  00280	c7 45 f4 3f 00
	00 00		 mov	 DWORD PTR _object_outcode2$[ebp], 63 ; 0000003fH

; 594  : 
; 595  : 	for ( bound_count = 0; bound_count < 8; bound_count++ )

  00287	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bound_count$[ebp], 0
  0028e	eb 09		 jmp	 SHORT $LN4@get_object
$LN2@get_object:
  00290	8b 45 fc	 mov	 eax, DWORD PTR _bound_count$[ebp]
  00293	83 c0 01	 add	 eax, 1
  00296	89 45 fc	 mov	 DWORD PTR _bound_count$[ebp], eax
$LN4@get_object:
  00299	83 7d fc 08	 cmp	 DWORD PTR _bound_count$[ebp], 8
  0029d	0f 8d 67 03 00
	00		 jge	 $LN3@get_object

; 596  : 	{
; 597  : 
; 598  : 		float
; 599  : 			oxmax,
; 600  : 			oxmin,
; 601  : 			oymax,
; 602  : 			oymin;
; 603  : 	
; 604  : 		int
; 605  : 			ixmax,
; 606  : 			ixmin,
; 607  : 			iymax,
; 608  : 			iymin;
; 609  : 	
; 610  : 		float
; 611  : 			x,
; 612  : 			y,
; 613  : 			z;
; 614  : 
; 615  : 		x = box[bound_count].x * rotation_3d[0][0];

  002a3	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  002a7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002ac	6b d1 00	 imul	 edx, ecx, 0
  002af	b9 04 00 00 00	 mov	 ecx, 4
  002b4	6b c9 00	 imul	 ecx, ecx, 0
  002b7	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _box$[ebp+eax]
  002bd	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx]
  002c6	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _x$7[ebp], xmm0

; 616  : 		y = box[bound_count].x * rotation_3d[0][1];

  002ce	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  002d2	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002d7	6b d1 00	 imul	 edx, ecx, 0
  002da	b9 04 00 00 00	 mov	 ecx, 4
  002df	c1 e1 00	 shl	 ecx, 0
  002e2	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _box$[ebp+eax]
  002e8	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx]
  002f1	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _y$6[ebp], xmm0

; 617  : 		z = box[bound_count].x * rotation_3d[0][2];

  002f9	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  002fd	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00302	6b d1 00	 imul	 edx, ecx, 0
  00305	b9 04 00 00 00	 mov	 ecx, 4
  0030a	d1 e1		 shl	 ecx, 1
  0030c	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _box$[ebp+eax]
  00312	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx]
  0031b	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _z$5[ebp], xmm0

; 618  : 
; 619  : 		x += box[bound_count].y * rotation_3d[1][0];

  00323	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  00327	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0032c	c1 e1 00	 shl	 ecx, 0
  0032f	ba 04 00 00 00	 mov	 edx, 4
  00334	6b d2 00	 imul	 edx, edx, 0
  00337	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _box$[ebp+eax+4]
  0033d	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00346	f3 0f 58 85 70
	ff ff ff	 addss	 xmm0, DWORD PTR _x$7[ebp]
  0034e	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _x$7[ebp], xmm0

; 620  : 		y += box[bound_count].y * rotation_3d[1][1];

  00356	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  0035a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0035f	c1 e1 00	 shl	 ecx, 0
  00362	ba 04 00 00 00	 mov	 edx, 4
  00367	c1 e2 00	 shl	 edx, 0
  0036a	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _box$[ebp+eax+4]
  00370	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00379	f3 0f 58 85 6c
	ff ff ff	 addss	 xmm0, DWORD PTR _y$6[ebp]
  00381	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _y$6[ebp], xmm0

; 621  : 		z += box[bound_count].y * rotation_3d[1][2];

  00389	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  0038d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00392	c1 e1 00	 shl	 ecx, 0
  00395	ba 04 00 00 00	 mov	 edx, 4
  0039a	d1 e2		 shl	 edx, 1
  0039c	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _box$[ebp+eax+4]
  003a2	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  003ab	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _z$5[ebp]
  003b3	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _z$5[ebp], xmm0

; 622  : 
; 623  : 		x += box[bound_count].z * rotation_3d[2][0];

  003bb	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  003bf	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003c4	d1 e1		 shl	 ecx, 1
  003c6	ba 04 00 00 00	 mov	 edx, 4
  003cb	6b d2 00	 imul	 edx, edx, 0
  003ce	f3 0f 10 44 05
	9c		 movss	 xmm0, DWORD PTR _box$[ebp+eax+8]
  003d4	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  003dd	f3 0f 58 85 70
	ff ff ff	 addss	 xmm0, DWORD PTR _x$7[ebp]
  003e5	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _x$7[ebp], xmm0

; 624  : 		y += box[bound_count].z * rotation_3d[2][1];

  003ed	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  003f1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003f6	d1 e1		 shl	 ecx, 1
  003f8	ba 04 00 00 00	 mov	 edx, 4
  003fd	c1 e2 00	 shl	 edx, 0
  00400	f3 0f 10 44 05
	9c		 movss	 xmm0, DWORD PTR _box$[ebp+eax+8]
  00406	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  0040f	f3 0f 58 85 6c
	ff ff ff	 addss	 xmm0, DWORD PTR _y$6[ebp]
  00417	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _y$6[ebp], xmm0

; 625  : 		z += box[bound_count].z * rotation_3d[2][2];

  0041f	6b 45 fc 0c	 imul	 eax, DWORD PTR _bound_count$[ebp], 12
  00423	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00428	d1 e1		 shl	 ecx, 1
  0042a	ba 04 00 00 00	 mov	 edx, 4
  0042f	d1 e2		 shl	 edx, 1
  00431	f3 0f 10 44 05
	9c		 movss	 xmm0, DWORD PTR _box$[ebp+eax+8]
  00437	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00440	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _z$5[ebp]
  00448	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _z$5[ebp], xmm0

; 626  : 
; 627  : 		x += pos->x;

  00450	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00453	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _x$7[ebp]
  0045b	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0045f	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _x$7[ebp], xmm0

; 628  : 		y += pos->y;

  00467	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  0046a	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$6[ebp]
  00472	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00477	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _y$6[ebp], xmm0

; 629  : 		z += pos->z;

  0047f	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00482	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _z$5[ebp]
  0048a	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  0048f	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _z$5[ebp], xmm0

; 630  : 
; 631  : 		if ( *( ( int * ) &z ) >= *( ( int * ) &clip_hither ) )

  00497	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _z$5[ebp]
  0049d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  004a3	0f 8c 4a 01 00
	00		 jl	 $LN5@get_object

; 632  : 		{
; 633  : 
; 634  : 			float
; 635  : 				q,
; 636  : 				i,
; 637  : 				j;
; 638  : 
; 639  : 			int
; 640  : 				this_outcode;
; 641  : 
; 642  : 			q = 1.0 / z;

  004a9	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _z$5[ebp]
  004b1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  004b9	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004bd	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004c1	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _q$4[ebp], xmm0

; 643  : 
; 644  : 			i = ( active_3d_environment->screen_i_scale * x * q );

  004c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  004ce	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004d2	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _x$7[ebp]
  004da	f3 0f 59 85 64
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$4[ebp]
  004e2	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _i$3[ebp], xmm0

; 645  : 			j = ( active_3d_environment->screen_j_scale * y * q );

  004ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  004ef	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  004f4	f3 0f 59 85 6c
	ff ff ff	 mulss	 xmm0, DWORD PTR _y$6[ebp]
  004fc	f3 0f 59 85 64
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$4[ebp]
  00504	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _j$2[ebp], xmm0

; 646  : 
; 647  : 			j = active_3d_environment->y_origin - j;

  0050c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00511	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00516	f3 0f 5c 85 5c
	ff ff ff	 subss	 xmm0, DWORD PTR _j$2[ebp]
  0051e	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _j$2[ebp], xmm0

; 648  : 			i = active_3d_environment->x_origin + i;

  00526	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0052b	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00530	f3 0f 58 85 60
	ff ff ff	 addss	 xmm0, DWORD PTR _i$3[ebp]
  00538	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _i$3[ebp], xmm0

; 649  : 
; 650  : 			oxmax = active_viewport.x_max - i; oxmin = i - active_viewport.x_min;

  00540	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00548	f3 0f 5c 85 60
	ff ff ff	 subss	 xmm0, DWORD PTR _i$3[ebp]
  00550	f3 0f 11 45 90	 movss	 DWORD PTR _oxmax$15[ebp], xmm0
  00555	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _i$3[ebp]
  0055d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00565	f3 0f 11 45 8c	 movss	 DWORD PTR _oxmin$14[ebp], xmm0

; 651  : 			oymax = active_viewport.y_max - j; oymin = j - active_viewport.y_min;

  0056a	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00572	f3 0f 5c 85 5c
	ff ff ff	 subss	 xmm0, DWORD PTR _j$2[ebp]
  0057a	f3 0f 11 45 88	 movss	 DWORD PTR _oymax$13[ebp], xmm0
  0057f	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _j$2[ebp]
  00587	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0058f	f3 0f 11 45 84	 movss	 DWORD PTR _oymin$12[ebp], xmm0

; 652  : 
; 653  : 			ixmax = *( ( int * ) &oxmax ); ixmin = *( ( int * ) &oxmin );

  00594	8b 45 90	 mov	 eax, DWORD PTR _oxmax$15[ebp]
  00597	89 45 80	 mov	 DWORD PTR _ixmax$11[ebp], eax
  0059a	8b 45 8c	 mov	 eax, DWORD PTR _oxmin$14[ebp]
  0059d	89 85 7c ff ff
	ff		 mov	 DWORD PTR _ixmin$10[ebp], eax

; 654  : 			iymax = *( ( int * ) &oymax ); iymin = *( ( int * ) &oymin );

  005a3	8b 45 88	 mov	 eax, DWORD PTR _oymax$13[ebp]
  005a6	89 85 78 ff ff
	ff		 mov	 DWORD PTR _iymax$9[ebp], eax
  005ac	8b 45 84	 mov	 eax, DWORD PTR _oymin$12[ebp]
  005af	89 85 74 ff ff
	ff		 mov	 DWORD PTR _iymin$8[ebp], eax

; 655  : 
; 656  : 			this_outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  005b5	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _iymax$9[ebp]
  005bb	50		 push	 eax
  005bc	8b 4d 80	 mov	 ecx, DWORD PTR _ixmax$11[ebp]
  005bf	51		 push	 ecx
  005c0	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _iymin$8[ebp]
  005c6	52		 push	 edx
  005c7	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ixmin$10[ebp]
  005cd	50		 push	 eax
  005ce	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  005d3	89 85 58 ff ff
	ff		 mov	 DWORD PTR _this_outcode$1[ebp], eax

; 657  : 
; 658  : 			object_outcode |= this_outcode;

  005d9	8b 45 f8	 mov	 eax, DWORD PTR _object_outcode$[ebp]
  005dc	0b 85 58 ff ff
	ff		 or	 eax, DWORD PTR _this_outcode$1[ebp]
  005e2	89 45 f8	 mov	 DWORD PTR _object_outcode$[ebp], eax

; 659  : 			object_outcode2 &= this_outcode;

  005e5	8b 45 f4	 mov	 eax, DWORD PTR _object_outcode2$[ebp]
  005e8	23 85 58 ff ff
	ff		 and	 eax, DWORD PTR _this_outcode$1[ebp]
  005ee	89 45 f4	 mov	 DWORD PTR _object_outcode2$[ebp], eax

; 660  : 		}
; 661  : 		else

  005f1	eb 12		 jmp	 SHORT $LN6@get_object
$LN5@get_object:

; 662  : 		{
; 663  : 
; 664  : 			object_outcode |= CLIP_HITHER;

  005f3	8b 45 f8	 mov	 eax, DWORD PTR _object_outcode$[ebp]
  005f6	83 c8 20	 or	 eax, 32			; 00000020H
  005f9	89 45 f8	 mov	 DWORD PTR _object_outcode$[ebp], eax

; 665  : 			object_outcode2 &= CLIP_HITHER;

  005fc	8b 45 f4	 mov	 eax, DWORD PTR _object_outcode2$[ebp]
  005ff	83 e0 20	 and	 eax, 32			; 00000020H
  00602	89 45 f4	 mov	 DWORD PTR _object_outcode2$[ebp], eax
$LN6@get_object:

; 666  : 		}
; 667  : 	}

  00605	e9 86 fc ff ff	 jmp	 $LN2@get_object
$LN3@get_object:

; 668  : 
; 669  : 	*outcode = object_outcode;

  0060a	8b 45 10	 mov	 eax, DWORD PTR _outcode$[ebp]
  0060d	8b 4d f8	 mov	 ecx, DWORD PTR _object_outcode$[ebp]
  00610	89 08		 mov	 DWORD PTR [eax], ecx

; 670  : 
; 671  : 	return ( object_outcode2 );

  00612	8b 45 f4	 mov	 eax, DWORD PTR _object_outcode2$[ebp]

; 672  : }

  00615	5f		 pop	 edi
  00616	5e		 pop	 esi
  00617	5b		 pop	 ebx
  00618	8b e5		 mov	 esp, ebp
  0061a	5d		 pop	 ebp
  0061b	c2 0c 00	 ret	 12			; 0000000cH
?get_object_3d_outcode@@YGHHPAUVEC3D@@PAH@Z ENDP	; get_object_3d_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?get_object_3d_radius@@YGMH@Z
_TEXT	SEGMENT
tv70 = -68						; size = 4
_object$ = 8						; size = 4
?get_object_3d_radius@@YGMH@Z PROC			; get_object_3d_radius, COMDAT

; 864  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 865  : 
; 866  : 	return ( objects_3d_scene_database[object].radius );

  00009	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _object$[ebp], 224
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00016	f3 0f 10 44 01
	74		 movss	 xmm0, DWORD PTR [ecx+eax+116]
  0001c	f3 0f 11 45 bc	 movss	 DWORD PTR tv70[ebp], xmm0
  00021	d9 45 bc	 fld	 DWORD PTR tv70[ebp]

; 867  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?get_object_3d_radius@@YGMH@Z ENDP			; get_object_3d_radius
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?get_object_3d_bounding_box_without_lines@@YGPAUOBJECT_3D_BOUNDS@@H@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
?get_object_3d_bounding_box_without_lines@@YGPAUOBJECT_3D_BOUNDS@@H@Z PROC ; get_object_3d_bounding_box_without_lines, COMDAT

; 854  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 855  : 
; 856  : 	return ( &objects_3d_scene_database[object].bounding_box2 );

  00009	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _object$[ebp], 224
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00016	8d 84 01 90 00
	00 00		 lea	 eax, DWORD PTR [ecx+eax+144]

; 857  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_object_3d_bounding_box_without_lines@@YGPAUOBJECT_3D_BOUNDS@@H@Z ENDP ; get_object_3d_bounding_box_without_lines
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z PROC ; get_object_3d_bounding_box, COMDAT

; 844  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 845  : 
; 846  : 	return ( &objects_3d_scene_database[object].bounding_box );

  00009	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _object$[ebp], 224
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00016	8d 44 01 78	 lea	 eax, DWORD PTR [ecx+eax+120]

; 847  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z ENDP ; get_object_3d_bounding_box
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?get_scene_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@HPAUVEC3D@@@Z
_TEXT	SEGMENT
_height$ = -48						; size = 4
_width$ = -44						; size = 4
_screeny$ = -40						; size = 4
_screenx$ = -36						; size = 4
_outcode2$ = -32					; size = 4
_outcode1$ = -28					; size = 4
_outcode$ = -24						; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_q$ = -12						; size = 4
_z$ = -8						; size = 4
_radius$ = -4						; size = 4
_index$ = 8						; size = 4
_view_position$ = 12					; size = 4
?get_scene_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@HPAUVEC3D@@@Z PROC ; get_scene_3d_instance_visibility, COMDAT

; 432  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 433  : 
; 434  : 	float
; 435  : 		radius,
; 436  : 		z,
; 437  : 		q,
; 438  : 		i,
; 439  : 		j;
; 440  : 
; 441  : 	int
; 442  : 		outcode,
; 443  : 		outcode1,
; 444  : 		outcode2;
; 445  : 
; 446  : 	float
; 447  : 		screenx,
; 448  : 		screeny,
; 449  : 		width,
; 450  : 		height;
; 451  : 
; 452  : 	radius = objects_3d_scene_database[index].radius;

  00009	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _index$[ebp], 224
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00016	f3 0f 10 44 01
	74		 movss	 xmm0, DWORD PTR [ecx+eax+116]
  0001c	f3 0f 11 45 fc	 movss	 DWORD PTR _radius$[ebp], xmm0

; 453  : 
; 454  : 	if ( ( view_position->z + radius ) < clip_hither )

  00021	8b 45 0c	 mov	 eax, DWORD PTR _view_position$[ebp]
  00024	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00029	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _radius$[ebp]
  0002e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?clip_hither@@3MA
  00036	0f 2f c8	 comiss	 xmm1, xmm0
  00039	76 0a		 jbe	 SHORT $LN2@get_scene_

; 455  : 	{
; 456  : 
; 457  : 		return ( OBJECT_3D_NOT_VISIBLE );

  0003b	b8 03 00 00 00	 mov	 eax, 3
  00040	e9 53 02 00 00	 jmp	 $LN4@get_scene_
$LN2@get_scene_:

; 458  : 	}
; 459  : 
; 460  : 	z = view_position->z - radius;

  00045	8b 45 0c	 mov	 eax, DWORD PTR _view_position$[ebp]
  00048	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0004d	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _radius$[ebp]
  00052	f3 0f 11 45 f8	 movss	 DWORD PTR _z$[ebp], xmm0

; 461  : 
; 462  : 	if ( z > clip_hither )

  00057	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z$[ebp]
  0005c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?clip_hither@@3MA
  00063	0f 86 2a 02 00
	00		 jbe	 $LN3@get_scene_

; 463  : 	{
; 464  : 
; 465  : 		//
; 466  : 		// It is possible for this object to be labelled completely visible.
; 467  : 		//
; 468  : 
; 469  : 		z += radius;

  00069	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z$[ebp]
  0006e	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _radius$[ebp]
  00073	f3 0f 11 45 f8	 movss	 DWORD PTR _z$[ebp], xmm0

; 470  : 
; 471  : 		q = 1.0 / z;

  00078	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  0007d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00085	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00089	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0008d	f3 0f 11 45 f4	 movss	 DWORD PTR _q$[ebp], xmm0

; 472  : 	
; 473  : 		i = ( active_3d_environment->screen_i_scale * view_position->x * q );

  00092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _view_position$[ebp]
  0009a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0009e	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  000a2	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  000a7	f3 0f 11 45 f0	 movss	 DWORD PTR _i$[ebp], xmm0

; 474  : 	
; 475  : 		j = ( active_3d_environment->screen_j_scale * view_position->y * q );

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _view_position$[ebp]
  000b4	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000b9	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  000be	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  000c3	f3 0f 11 45 ec	 movss	 DWORD PTR _j$[ebp], xmm0

; 476  : 	
; 477  : 		width = active_3d_environment->screen_i_scale * radius * q;

  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000cd	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000d1	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  000d6	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  000db	f3 0f 11 45 d4	 movss	 DWORD PTR _width$[ebp], xmm0

; 478  : 	
; 479  : 		height = active_3d_environment->screen_j_scale * radius * q;

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000e5	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000ea	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  000ef	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  000f4	f3 0f 11 45 d0	 movss	 DWORD PTR _height$[ebp], xmm0

; 480  : 	
; 481  : 		screeny = ( active_3d_environment->y_origin - j );

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000fe	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00103	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _j$[ebp]
  00108	f3 0f 11 45 d8	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 482  : 	
; 483  : 		screenx = ( active_3d_environment->x_origin + i );

  0010d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00112	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00117	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _i$[ebp]
  0011c	f3 0f 11 45 dc	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 484  : 	
; 485  : 		outcode = generate_3d_outcode ( screenx, screeny );

  00121	51		 push	 ecx
  00122	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  00127	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012c	51		 push	 ecx
  0012d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  0013c	89 45 e8	 mov	 DWORD PTR _outcode$[ebp], eax

; 486  : 		outcode1 = outcode;

  0013f	8b 45 e8	 mov	 eax, DWORD PTR _outcode$[ebp]
  00142	89 45 e4	 mov	 DWORD PTR _outcode1$[ebp], eax

; 487  : 		outcode2 = outcode;

  00145	8b 45 e8	 mov	 eax, DWORD PTR _outcode$[ebp]
  00148	89 45 e0	 mov	 DWORD PTR _outcode2$[ebp], eax

; 488  : 
; 489  : 		screenx += width;

  0014b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  00150	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _width$[ebp]
  00155	f3 0f 11 45 dc	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 490  : 		outcode = generate_3d_outcode ( screenx, screeny );

  0015a	51		 push	 ecx
  0015b	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	51		 push	 ecx
  00166	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00175	89 45 e8	 mov	 DWORD PTR _outcode$[ebp], eax

; 491  : 		outcode1 |= outcode;

  00178	8b 45 e4	 mov	 eax, DWORD PTR _outcode1$[ebp]
  0017b	0b 45 e8	 or	 eax, DWORD PTR _outcode$[ebp]
  0017e	89 45 e4	 mov	 DWORD PTR _outcode1$[ebp], eax

; 492  : 		outcode2 &= outcode;

  00181	8b 45 e0	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00184	23 45 e8	 and	 eax, DWORD PTR _outcode$[ebp]
  00187	89 45 e0	 mov	 DWORD PTR _outcode2$[ebp], eax

; 493  : 
; 494  : 		screenx -= width;

  0018a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  0018f	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _width$[ebp]
  00194	f3 0f 11 45 dc	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 495  : 		screeny += height;

  00199	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  0019e	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _height$[ebp]
  001a3	f3 0f 11 45 d8	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 496  : 		outcode = generate_3d_outcode ( screenx, screeny );

  001a8	51		 push	 ecx
  001a9	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	51		 push	 ecx
  001b4	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  001b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001be	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  001c3	89 45 e8	 mov	 DWORD PTR _outcode$[ebp], eax

; 497  : 		outcode1 |= outcode;

  001c6	8b 45 e4	 mov	 eax, DWORD PTR _outcode1$[ebp]
  001c9	0b 45 e8	 or	 eax, DWORD PTR _outcode$[ebp]
  001cc	89 45 e4	 mov	 DWORD PTR _outcode1$[ebp], eax

; 498  : 		outcode2 &= outcode;

  001cf	8b 45 e0	 mov	 eax, DWORD PTR _outcode2$[ebp]
  001d2	23 45 e8	 and	 eax, DWORD PTR _outcode$[ebp]
  001d5	89 45 e0	 mov	 DWORD PTR _outcode2$[ebp], eax

; 499  : 
; 500  : 		screenx -= width;

  001d8	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  001dd	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _width$[ebp]
  001e2	f3 0f 11 45 dc	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 501  : 		screeny -= height;

  001e7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  001ec	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _height$[ebp]
  001f1	f3 0f 11 45 d8	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 502  : 		outcode = generate_3d_outcode ( screenx, screeny );

  001f6	51		 push	 ecx
  001f7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  001fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00201	51		 push	 ecx
  00202	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  00207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020c	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00211	89 45 e8	 mov	 DWORD PTR _outcode$[ebp], eax

; 503  : 		outcode1 |= outcode;

  00214	8b 45 e4	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00217	0b 45 e8	 or	 eax, DWORD PTR _outcode$[ebp]
  0021a	89 45 e4	 mov	 DWORD PTR _outcode1$[ebp], eax

; 504  : 		outcode2 &= outcode;

  0021d	8b 45 e0	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00220	23 45 e8	 and	 eax, DWORD PTR _outcode$[ebp]
  00223	89 45 e0	 mov	 DWORD PTR _outcode2$[ebp], eax

; 505  : 
; 506  : 		screenx += width;

  00226	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  0022b	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _width$[ebp]
  00230	f3 0f 11 45 dc	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 507  : 		screeny -= height;

  00235	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  0023a	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _height$[ebp]
  0023f	f3 0f 11 45 d8	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 508  : 		outcode = generate_3d_outcode ( screenx, screeny );

  00244	51		 push	 ecx
  00245	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  0024a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024f	51		 push	 ecx
  00250	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  00255	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025a	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  0025f	89 45 e8	 mov	 DWORD PTR _outcode$[ebp], eax

; 509  : 		outcode1 |= outcode;

  00262	8b 45 e4	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00265	0b 45 e8	 or	 eax, DWORD PTR _outcode$[ebp]
  00268	89 45 e4	 mov	 DWORD PTR _outcode1$[ebp], eax

; 510  : 		outcode2 &= outcode;

  0026b	8b 45 e0	 mov	 eax, DWORD PTR _outcode2$[ebp]
  0026e	23 45 e8	 and	 eax, DWORD PTR _outcode$[ebp]
  00271	89 45 e0	 mov	 DWORD PTR _outcode2$[ebp], eax

; 511  : 	
; 512  : 		if ( outcode2 != 0 )

  00274	74 07		 je	 SHORT $LN5@get_scene_

; 513  : 		{
; 514  : 
; 515  : 			return ( OBJECT_3D_NOT_VISIBLE );

  00276	b8 03 00 00 00	 mov	 eax, 3
  0027b	eb 1b		 jmp	 SHORT $LN4@get_scene_
$LN5@get_scene_:

; 516  : 		}
; 517  : 	
; 518  : 		if ( outcode1 == 0 )

  0027d	83 7d e4 00	 cmp	 DWORD PTR _outcode1$[ebp], 0
  00281	75 07		 jne	 SHORT $LN6@get_scene_

; 519  : 		{
; 520  : 
; 521  : 			return ( OBJECT_3D_COMPLETELY_VISIBLE );

  00283	b8 01 00 00 00	 mov	 eax, 1
  00288	eb 0e		 jmp	 SHORT $LN4@get_scene_
$LN6@get_scene_:

; 522  : 		}
; 523  : 	
; 524  : 		return ( OBJECT_3D_PARTIALLY_VISIBLE );

  0028a	b8 02 00 00 00	 mov	 eax, 2
  0028f	eb 07		 jmp	 SHORT $LN4@get_scene_

; 525  : 	}
; 526  : 	else

  00291	eb 05		 jmp	 SHORT $LN4@get_scene_
$LN3@get_scene_:

; 527  : 	{
; 528  : 
; 529  : 		//
; 530  : 		// The object cannot be completely visible, as it intersects the eye_distance plane
; 531  : 		//
; 532  : 
; 533  : 		return ( OBJECT_3D_PARTIALLY_VISIBLE );

  00293	b8 02 00 00 00	 mov	 eax, 2
$LN4@get_scene_:

; 534  : 	}
; 535  : }

  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	5b		 pop	 ebx
  0029b	8b e5		 mov	 esp, ebp
  0029d	5d		 pop	 ebp
  0029e	c2 08 00	 ret	 8
?get_scene_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@HPAUVEC3D@@@Z ENDP ; get_scene_3d_instance_visibility
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?get_object_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
$T1 = -124						; size = 4
_scale$ = -56						; size = 4
_height$ = -52						; size = 4
_width$ = -48						; size = 4
_screeny$ = -44						; size = 4
_screenx$ = -40						; size = 4
_outcode2$ = -36					; size = 4
_outcode1$ = -32					; size = 4
_outcode$ = -28						; size = 4
_object_number$ = -24					; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_q$ = -12						; size = 4
_z$ = -8						; size = 4
_radius$ = -4						; size = 4
_obj$ = 8						; size = 4
?get_object_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z PROC ; get_object_3d_instance_visibility, COMDAT

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 258  : 
; 259  : 	float
; 260  : 		radius,
; 261  : 		z,
; 262  : 		q,
; 263  : 		i,
; 264  : 		j;
; 265  : 
; 266  : 	int
; 267  : 		object_number,
; 268  : 		outcode,
; 269  : 		outcode1,
; 270  : 		outcode2;
; 271  : 
; 272  : 	float
; 273  : 		screenx,
; 274  : 		screeny,
; 275  : 		width,
; 276  : 		height,
; 277  : 		scale;
; 278  : 
; 279  : 	object_number = objects_3d_scene_database[obj->object_number].index;

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	69 48 04 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 224
  00013	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00019	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0001c	89 45 e8	 mov	 DWORD PTR _object_number$[ebp], eax

; 280  : 
; 281  : 	radius = objects_3d_scene_database[obj->object_number].radius;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00022	69 48 04 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 224
  00029	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0002f	f3 0f 10 44 0a
	74		 movss	 xmm0, DWORD PTR [edx+ecx+116]
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _radius$[ebp], xmm0

; 282  : 
; 283  : 	scale = max ( 1.0f, obj->relative_scale.x );

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00042	f3 0f 11 45 84	 movss	 DWORD PTR $T1[ebp], xmm0
  00047	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0004a	83 c0 44	 add	 eax, 68			; 00000044H
  0004d	50		 push	 eax
  0004e	8d 4d 84	 lea	 ecx, DWORD PTR $T1[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00057	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0005b	f3 0f 11 45 c8	 movss	 DWORD PTR _scale$[ebp], xmm0

; 284  : 	scale = max ( scale, obj->relative_scale.y );

  00060	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00063	83 c0 48	 add	 eax, 72			; 00000048H
  00066	50		 push	 eax
  00067	8d 4d c8	 lea	 ecx, DWORD PTR _scale$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00070	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00074	f3 0f 11 45 c8	 movss	 DWORD PTR _scale$[ebp], xmm0

; 285  : 	scale = max ( scale, obj->relative_scale.z );

  00079	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0007c	83 c0 4c	 add	 eax, 76			; 0000004cH
  0007f	50		 push	 eax
  00080	8d 4d c8	 lea	 ecx, DWORD PTR _scale$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00089	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008d	f3 0f 11 45 c8	 movss	 DWORD PTR _scale$[ebp], xmm0

; 286  : 
; 287  : 	radius *= scale;

  00092	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00097	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0009c	f3 0f 11 45 fc	 movss	 DWORD PTR _radius$[ebp], xmm0

; 288  : 
; 289  : 	if ( ( obj->view_position.z + radius ) < clip_hither )

  000a1	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000a4	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  000a9	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _radius$[ebp]
  000ae	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?clip_hither@@3MA
  000b6	0f 2f c8	 comiss	 xmm1, xmm0
  000b9	76 0a		 jbe	 SHORT $LN2@get_object

; 290  : 	{
; 291  : 
; 292  : 		return ( OBJECT_3D_NOT_VISIBLE );

  000bb	b8 03 00 00 00	 mov	 eax, 3
  000c0	e9 54 02 00 00	 jmp	 $LN4@get_object
$LN2@get_object:

; 293  : 	}
; 294  : 
; 295  : 	z = obj->view_position.z - radius;

  000c5	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000c8	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  000cd	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _radius$[ebp]
  000d2	f3 0f 11 45 f8	 movss	 DWORD PTR _z$[ebp], xmm0

; 296  : 
; 297  : 	if ( z > clip_hither )

  000d7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z$[ebp]
  000dc	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?clip_hither@@3MA
  000e3	0f 86 2b 02 00
	00		 jbe	 $LN3@get_object

; 298  : 	{
; 299  : 
; 300  : 		//
; 301  : 		// It is possible for this object to be labelled completely visible.
; 302  : 		//
; 303  : 
; 304  : 		z += radius;

  000e9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z$[ebp]
  000ee	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _radius$[ebp]
  000f3	f3 0f 11 45 f8	 movss	 DWORD PTR _z$[ebp], xmm0

; 305  : 
; 306  : 		q = 1.0 / z;

  000f8	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  000fd	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00105	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00109	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0010d	f3 0f 11 45 f4	 movss	 DWORD PTR _q$[ebp], xmm0

; 307  : 	
; 308  : 		i = ( active_3d_environment->screen_i_scale * obj->view_position.x * q );

  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00117	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0011a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0011e	f3 0f 59 41 38	 mulss	 xmm0, DWORD PTR [ecx+56]
  00123	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  00128	f3 0f 11 45 f0	 movss	 DWORD PTR _i$[ebp], xmm0

; 309  : 	
; 310  : 		j = ( active_3d_environment->screen_j_scale * obj->view_position.y * q );

  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00132	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00135	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0013a	f3 0f 59 41 3c	 mulss	 xmm0, DWORD PTR [ecx+60]
  0013f	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  00144	f3 0f 11 45 ec	 movss	 DWORD PTR _j$[ebp], xmm0

; 311  : 	
; 312  : 		width = active_3d_environment->screen_i_scale * radius * q;

  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0014e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00152	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  00157	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  0015c	f3 0f 11 45 d0	 movss	 DWORD PTR _width$[ebp], xmm0

; 313  : 	
; 314  : 		height = active_3d_environment->screen_j_scale * radius * q;

  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00166	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0016b	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  00170	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  00175	f3 0f 11 45 cc	 movss	 DWORD PTR _height$[ebp], xmm0

; 315  : 	
; 316  : 		screeny = ( active_3d_environment->y_origin - j );

  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0017f	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00184	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _j$[ebp]
  00189	f3 0f 11 45 d4	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 317  : 	
; 318  : 		screenx = ( active_3d_environment->x_origin + i );

  0018e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00193	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00198	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _i$[ebp]
  0019d	f3 0f 11 45 d8	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 319  : 	
; 320  : 		outcode = generate_3d_outcode ( screenx, screeny );

  001a2	51		 push	 ecx
  001a3	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  001bd	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 321  : 		outcode1 = outcode;

  001c0	8b 45 e4	 mov	 eax, DWORD PTR _outcode$[ebp]
  001c3	89 45 e0	 mov	 DWORD PTR _outcode1$[ebp], eax

; 322  : 		outcode2 = outcode;

  001c6	8b 45 e4	 mov	 eax, DWORD PTR _outcode$[ebp]
  001c9	89 45 dc	 mov	 DWORD PTR _outcode2$[ebp], eax

; 323  : 
; 324  : 		screenx += width;

  001cc	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  001d1	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _width$[ebp]
  001d6	f3 0f 11 45 d8	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 325  : 		outcode = generate_3d_outcode ( screenx, screeny );

  001db	51		 push	 ecx
  001dc	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  001e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e6	51		 push	 ecx
  001e7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  001ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f1	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  001f6	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 326  : 		outcode1 |= outcode;

  001f9	8b 45 e0	 mov	 eax, DWORD PTR _outcode1$[ebp]
  001fc	0b 45 e4	 or	 eax, DWORD PTR _outcode$[ebp]
  001ff	89 45 e0	 mov	 DWORD PTR _outcode1$[ebp], eax

; 327  : 		outcode2 &= outcode;

  00202	8b 45 dc	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00205	23 45 e4	 and	 eax, DWORD PTR _outcode$[ebp]
  00208	89 45 dc	 mov	 DWORD PTR _outcode2$[ebp], eax

; 328  : 
; 329  : 		screenx -= width;

  0020b	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  00210	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _width$[ebp]
  00215	f3 0f 11 45 d8	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 330  : 		screeny += height;

  0021a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  0021f	f3 0f 58 45 cc	 addss	 xmm0, DWORD PTR _height$[ebp]
  00224	f3 0f 11 45 d4	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 331  : 		outcode = generate_3d_outcode ( screenx, screeny );

  00229	51		 push	 ecx
  0022a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  0022f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00234	51		 push	 ecx
  00235	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00244	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 332  : 		outcode1 |= outcode;

  00247	8b 45 e0	 mov	 eax, DWORD PTR _outcode1$[ebp]
  0024a	0b 45 e4	 or	 eax, DWORD PTR _outcode$[ebp]
  0024d	89 45 e0	 mov	 DWORD PTR _outcode1$[ebp], eax

; 333  : 		outcode2 &= outcode;

  00250	8b 45 dc	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00253	23 45 e4	 and	 eax, DWORD PTR _outcode$[ebp]
  00256	89 45 dc	 mov	 DWORD PTR _outcode2$[ebp], eax

; 334  : 
; 335  : 		screenx -= width;

  00259	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  0025e	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _width$[ebp]
  00263	f3 0f 11 45 d8	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 336  : 		screeny -= height;

  00268	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  0026d	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _height$[ebp]
  00272	f3 0f 11 45 d4	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 337  : 		outcode = generate_3d_outcode ( screenx, screeny );

  00277	51		 push	 ecx
  00278	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  0027d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00282	51		 push	 ecx
  00283	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00292	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 338  : 		outcode1 |= outcode;

  00295	8b 45 e0	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00298	0b 45 e4	 or	 eax, DWORD PTR _outcode$[ebp]
  0029b	89 45 e0	 mov	 DWORD PTR _outcode1$[ebp], eax

; 339  : 		outcode2 &= outcode;

  0029e	8b 45 dc	 mov	 eax, DWORD PTR _outcode2$[ebp]
  002a1	23 45 e4	 and	 eax, DWORD PTR _outcode$[ebp]
  002a4	89 45 dc	 mov	 DWORD PTR _outcode2$[ebp], eax

; 340  : 
; 341  : 		screenx += width;

  002a7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  002ac	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _width$[ebp]
  002b1	f3 0f 11 45 d8	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 342  : 		screeny -= height;

  002b6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  002bb	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _height$[ebp]
  002c0	f3 0f 11 45 d4	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 343  : 		outcode = generate_3d_outcode ( screenx, screeny );

  002c5	51		 push	 ecx
  002c6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	51		 push	 ecx
  002d1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  002d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002db	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  002e0	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 344  : 		outcode1 |= outcode;

  002e3	8b 45 e0	 mov	 eax, DWORD PTR _outcode1$[ebp]
  002e6	0b 45 e4	 or	 eax, DWORD PTR _outcode$[ebp]
  002e9	89 45 e0	 mov	 DWORD PTR _outcode1$[ebp], eax

; 345  : 		outcode2 &= outcode;

  002ec	8b 45 dc	 mov	 eax, DWORD PTR _outcode2$[ebp]
  002ef	23 45 e4	 and	 eax, DWORD PTR _outcode$[ebp]
  002f2	89 45 dc	 mov	 DWORD PTR _outcode2$[ebp], eax

; 346  : 	
; 347  : 		if ( outcode2 != 0 )

  002f5	74 07		 je	 SHORT $LN5@get_object

; 348  : 		{
; 349  : 
; 350  : 			return ( OBJECT_3D_NOT_VISIBLE );

  002f7	b8 03 00 00 00	 mov	 eax, 3
  002fc	eb 1b		 jmp	 SHORT $LN4@get_object
$LN5@get_object:

; 351  : 		}
; 352  : 	
; 353  : 		if ( outcode1 == 0 )

  002fe	83 7d e0 00	 cmp	 DWORD PTR _outcode1$[ebp], 0
  00302	75 07		 jne	 SHORT $LN6@get_object

; 354  : 		{
; 355  : 
; 356  : 			return ( OBJECT_3D_COMPLETELY_VISIBLE );

  00304	b8 01 00 00 00	 mov	 eax, 1
  00309	eb 0e		 jmp	 SHORT $LN4@get_object
$LN6@get_object:

; 357  : 		}
; 358  : 	
; 359  : 		return ( OBJECT_3D_PARTIALLY_VISIBLE );

  0030b	b8 02 00 00 00	 mov	 eax, 2
  00310	eb 07		 jmp	 SHORT $LN4@get_object

; 360  : 	}
; 361  : 	else

  00312	eb 05		 jmp	 SHORT $LN4@get_object
$LN3@get_object:

; 362  : 	{
; 363  : 
; 364  : 		//
; 365  : 		// The object cannot be completely visible, as it intersects the eye_distance plane
; 366  : 		//
; 367  : 
; 368  : 		return ( OBJECT_3D_PARTIALLY_VISIBLE );

  00314	b8 02 00 00 00	 mov	 eax, 2
$LN4@get_object:

; 369  : /*
; 370  : 		z = obj->view_position.z + radius;
; 371  : 	
; 372  : 		q = 1.0 / z;
; 373  : 	
; 374  : 		i = ( active_3d_environment->screen_i_scale * obj->view_position.x * q );
; 375  : 	
; 376  : 		j = ( active_3d_environment->screen_j_scale * obj->view_position.y * q );
; 377  : 	
; 378  : 		width = active_3d_environment->screen_i_scale * radius * q;
; 379  : 	
; 380  : 		height = active_3d_environment->screen_j_scale * radius * q;
; 381  : 	
; 382  : 		screeny = ( active_3d_environment->y_origin - j );
; 383  : 	
; 384  : 		screenx = ( active_3d_environment->x_origin + i );
; 385  : 	
; 386  : 		outcode = generate_3d_outcode ( screenx, screeny );// ( *( ( int * ) &screenx ), *( ( int * ) &screeny ) ); // ( screenx, screeny )
; 387  : 		outcode1 = outcode;
; 388  : 		outcode2 = outcode;
; 389  : 
; 390  : 		screenx += width;
; 391  : 		outcode = generate_3d_outcode ( screenx, screeny );// ( *( ( int * ) &screenx ), *( ( int * ) &screeny ) ); // ( screenx + width, screeny )
; 392  : 		outcode1 |= outcode;
; 393  : 		outcode2 &= outcode;
; 394  : 
; 395  : 		screenx -= width;
; 396  : 		screeny += height;
; 397  : 		outcode = generate_3d_outcode ( screenx, screeny );// ( *( ( int * ) &screenx ), *( ( int * ) &screeny ) ); // ( screenx, screeny + height )
; 398  : 		outcode1 |= outcode;
; 399  : 		outcode2 &= outcode;
; 400  : 
; 401  : 		screenx -= width;
; 402  : 		screeny -= height;
; 403  : 		outcode = generate_3d_outcode ( screenx, screeny );// ( *( ( int * ) &screenx ), *( ( int * ) &screeny ) ); // ( screenx - width, screeny )
; 404  : 		outcode1 |= outcode;
; 405  : 		outcode2 &= outcode;
; 406  : 
; 407  : 		screenx += width;
; 408  : 		screeny -= height;
; 409  : 		outcode = generate_3d_outcode ( screenx, screeny );// ( *( ( int * ) &screenx ), *( ( int * ) &screeny ) ); // ( screenx, screeny - height )
; 410  : 		outcode1 |= outcode;
; 411  : 		outcode2 &= outcode;
; 412  : 	
; 413  : 		if ( outcode2 != 0 )
; 414  : 		{
; 415  : 
; 416  : 			return ( OBJECT_3D_NOT_VISIBLE );
; 417  : 		}
; 418  : 		else
; 419  : 		{
; 420  : 
; 421  : 			return ( OBJECT_3D_PARTIALLY_VISIBLE );
; 422  : 		}
; 423  : 		*/
; 424  : 	}
; 425  : }

  00319	5f		 pop	 edi
  0031a	5e		 pop	 esi
  0031b	5b		 pop	 ebx
  0031c	8b e5		 mov	 esp, ebp
  0031e	5d		 pop	 ebp
  0031f	c2 04 00	 ret	 4
?get_object_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ENDP ; get_object_3d_instance_visibility
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?get_object_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@PAM1@Z
_TEXT	SEGMENT
_height$ = -52						; size = 4
_width$ = -48						; size = 4
_screeny$ = -44						; size = 4
_screenx$ = -40						; size = 4
_outcode2$ = -36					; size = 4
_outcode1$ = -32					; size = 4
_outcode$ = -28						; size = 4
_object_number$ = -24					; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_q$ = -12						; size = 4
_z$ = -8						; size = 4
_radius$ = -4						; size = 4
_obj$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?get_object_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@PAM1@Z PROC ; get_object_3d_screen_coordinates, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 147  : 
; 148  : 	float
; 149  : 		radius,
; 150  : 		z,
; 151  : 		q,
; 152  : 		i,
; 153  : 		j;
; 154  : 
; 155  : 	int
; 156  : 		object_number,
; 157  : 		outcode,
; 158  : 		outcode1,
; 159  : 		outcode2;
; 160  : 
; 161  : 	float
; 162  : 		screenx,
; 163  : 		screeny,
; 164  : 		width,
; 165  : 		height;
; 166  : 
; 167  : 	set_object_3d_instance_relative_position ( obj );

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?set_object_3d_instance_relative_position@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; set_object_3d_instance_relative_position

; 168  : 
; 169  : 	object_number = objects_3d_scene_database[obj->object_number].index;

  00012	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00015	69 48 04 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 224
  0001c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00022	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00025	89 45 e8	 mov	 DWORD PTR _object_number$[ebp], eax

; 170  : 
; 171  : 	radius = objects_3d_scene_database[obj->object_number].radius;

  00028	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0002b	69 48 04 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 224
  00032	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00038	f3 0f 10 44 0a
	74		 movss	 xmm0, DWORD PTR [edx+ecx+116]
  0003e	f3 0f 11 45 fc	 movss	 DWORD PTR _radius$[ebp], xmm0

; 172  : 
; 173  : //	if ( obj->rel_vp.z < clip_hither )
; 174  : 	if ( obj->view_position.z < clip_hither )

  00043	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clip_hither@@3MA
  0004e	0f 2f 40 40	 comiss	 xmm0, DWORD PTR [eax+64]
  00052	76 0a		 jbe	 SHORT $LN2@get_object

; 175  : 	{
; 176  : 
; 177  : 		return ( OBJECT_3D_NOT_VISIBLE );

  00054	b8 03 00 00 00	 mov	 eax, 3
  00059	e9 7d 02 00 00	 jmp	 $LN1@get_object
$LN2@get_object:

; 178  : 	}
; 179  : 
; 180  : 	z = obj->view_position.z;	//rel_vp.z;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00061	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  00066	f3 0f 11 45 f8	 movss	 DWORD PTR _z$[ebp], xmm0

; 181  : 
; 182  : 	//
; 183  : 	// It is possible for this object to be labelled completely visible.
; 184  : 	//
; 185  : 
; 186  : 	q = 1.0 / z;

  0006b	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  00070	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00078	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0007c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00080	f3 0f 11 45 f4	 movss	 DWORD PTR _q$[ebp], xmm0

; 187  : 
; 188  : //	i = ( active_3d_environment->screen_i_scale * obj->rel_vp.x * q );
; 189  : 	i = ( active_3d_environment->screen_i_scale * obj->view_position.x * q );

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0008d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00091	f3 0f 59 41 38	 mulss	 xmm0, DWORD PTR [ecx+56]
  00096	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _i$[ebp], xmm0

; 190  : 
; 191  : //	j = ( active_3d_environment->screen_j_scale * obj->rel_vp.y * q );
; 192  : 	j = ( active_3d_environment->screen_j_scale * obj->view_position.y * q );

  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  000a8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000ad	f3 0f 59 41 3c	 mulss	 xmm0, DWORD PTR [ecx+60]
  000b2	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  000b7	f3 0f 11 45 ec	 movss	 DWORD PTR _j$[ebp], xmm0

; 193  : 
; 194  : 	width = active_3d_environment->screen_i_scale * radius * q;

  000bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000c1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c5	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  000ca	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  000cf	f3 0f 11 45 d0	 movss	 DWORD PTR _width$[ebp], xmm0

; 195  : 
; 196  : 	height = active_3d_environment->screen_j_scale * radius * q;

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000d9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000de	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  000e3	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _q$[ebp]
  000e8	f3 0f 11 45 cc	 movss	 DWORD PTR _height$[ebp], xmm0

; 197  : 
; 198  : 	screeny = ( active_3d_environment->y_origin - j );

  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000f2	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000f7	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _j$[ebp]
  000fc	f3 0f 11 45 d4	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 199  : 
; 200  : 	screenx = ( active_3d_environment->x_origin + i );

  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00106	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0010b	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _i$[ebp]
  00110	f3 0f 11 45 d8	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 201  : 
; 202  : 	outcode = generate_3d_outcode ( screenx, screeny );

  00115	51		 push	 ecx
  00116	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  0011b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00120	51		 push	 ecx
  00121	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00130	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 203  : 	outcode1 = outcode;

  00133	8b 45 e4	 mov	 eax, DWORD PTR _outcode$[ebp]
  00136	89 45 e0	 mov	 DWORD PTR _outcode1$[ebp], eax

; 204  : 	outcode2 = outcode;

  00139	8b 45 e4	 mov	 eax, DWORD PTR _outcode$[ebp]
  0013c	89 45 dc	 mov	 DWORD PTR _outcode2$[ebp], eax

; 205  : 
; 206  : 	screenx += width;

  0013f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  00144	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _width$[ebp]
  00149	f3 0f 11 45 d8	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 207  : 	outcode = generate_3d_outcode ( screenx, screeny );

  0014e	51		 push	 ecx
  0014f	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	51		 push	 ecx
  0015a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  0015f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00164	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00169	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 208  : 	outcode1 |= outcode;

  0016c	8b 45 e0	 mov	 eax, DWORD PTR _outcode1$[ebp]
  0016f	0b 45 e4	 or	 eax, DWORD PTR _outcode$[ebp]
  00172	89 45 e0	 mov	 DWORD PTR _outcode1$[ebp], eax

; 209  : 	outcode2 &= outcode;

  00175	8b 45 dc	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00178	23 45 e4	 and	 eax, DWORD PTR _outcode$[ebp]
  0017b	89 45 dc	 mov	 DWORD PTR _outcode2$[ebp], eax

; 210  : 
; 211  : 	screenx -= width;

  0017e	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  00183	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _width$[ebp]
  00188	f3 0f 11 45 d8	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 212  : 	screeny += height;

  0018d	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  00192	f3 0f 58 45 cc	 addss	 xmm0, DWORD PTR _height$[ebp]
  00197	f3 0f 11 45 d4	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 213  : 	outcode = generate_3d_outcode ( screenx, screeny );

  0019c	51		 push	 ecx
  0019d	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  001a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a7	51		 push	 ecx
  001a8	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  001ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b2	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  001b7	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 214  : 	outcode1 |= outcode;

  001ba	8b 45 e0	 mov	 eax, DWORD PTR _outcode1$[ebp]
  001bd	0b 45 e4	 or	 eax, DWORD PTR _outcode$[ebp]
  001c0	89 45 e0	 mov	 DWORD PTR _outcode1$[ebp], eax

; 215  : 	outcode2 &= outcode;

  001c3	8b 45 dc	 mov	 eax, DWORD PTR _outcode2$[ebp]
  001c6	23 45 e4	 and	 eax, DWORD PTR _outcode$[ebp]
  001c9	89 45 dc	 mov	 DWORD PTR _outcode2$[ebp], eax

; 216  : 
; 217  : 	screenx -= width;

  001cc	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  001d1	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _width$[ebp]
  001d6	f3 0f 11 45 d8	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 218  : 	screeny -= height;

  001db	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  001e0	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _height$[ebp]
  001e5	f3 0f 11 45 d4	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 219  : 	outcode = generate_3d_outcode ( screenx, screeny );

  001ea	51		 push	 ecx
  001eb	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  001f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f5	51		 push	 ecx
  001f6	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  001fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00200	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00205	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 220  : 	outcode1 |= outcode;

  00208	8b 45 e0	 mov	 eax, DWORD PTR _outcode1$[ebp]
  0020b	0b 45 e4	 or	 eax, DWORD PTR _outcode$[ebp]
  0020e	89 45 e0	 mov	 DWORD PTR _outcode1$[ebp], eax

; 221  : 	outcode2 &= outcode;

  00211	8b 45 dc	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00214	23 45 e4	 and	 eax, DWORD PTR _outcode$[ebp]
  00217	89 45 dc	 mov	 DWORD PTR _outcode2$[ebp], eax

; 222  : 
; 223  : 	screenx += width;

  0021a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  0021f	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _width$[ebp]
  00224	f3 0f 11 45 d8	 movss	 DWORD PTR _screenx$[ebp], xmm0

; 224  : 	screeny -= height;

  00229	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  0022e	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _height$[ebp]
  00233	f3 0f 11 45 d4	 movss	 DWORD PTR _screeny$[ebp], xmm0

; 225  : 	outcode = generate_3d_outcode ( screenx, screeny );

  00238	51		 push	 ecx
  00239	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _screeny$[ebp]
  0023e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00243	51		 push	 ecx
  00244	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _screenx$[ebp]
  00249	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024e	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00253	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 226  : 	outcode1 |= outcode;

  00256	8b 45 e0	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00259	0b 45 e4	 or	 eax, DWORD PTR _outcode$[ebp]
  0025c	89 45 e0	 mov	 DWORD PTR _outcode1$[ebp], eax

; 227  : 	outcode2 &= outcode;

  0025f	8b 45 dc	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00262	23 45 e4	 and	 eax, DWORD PTR _outcode$[ebp]
  00265	89 45 dc	 mov	 DWORD PTR _outcode2$[ebp], eax

; 228  : 
; 229  : 	if ( outcode2 != 0 )

  00268	74 07		 je	 SHORT $LN3@get_object

; 230  : 	{
; 231  : 
; 232  : 		return ( OBJECT_3D_NOT_VISIBLE );

  0026a	b8 03 00 00 00	 mov	 eax, 3
  0026f	eb 6a		 jmp	 SHORT $LN1@get_object
$LN3@get_object:

; 233  : 	}
; 234  : 
; 235  : 	if ( outcode1 == 0 )

  00271	83 7d e0 00	 cmp	 DWORD PTR _outcode1$[ebp], 0
  00275	75 33		 jne	 SHORT $LN4@get_object

; 236  : 	{
; 237  : 
; 238  : 		*x = i + active_3d_environment->x_origin;

  00277	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0027c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  00281	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  00286	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00289	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 239  : 
; 240  : 		*y = active_3d_environment->y_origin - j;

  0028d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00292	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00297	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _j$[ebp]
  0029c	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  0029f	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 241  : 	
; 242  : 		return ( OBJECT_3D_COMPLETELY_VISIBLE );

  002a3	b8 01 00 00 00	 mov	 eax, 1
  002a8	eb 31		 jmp	 SHORT $LN1@get_object
$LN4@get_object:

; 243  : 	}
; 244  : 
; 245  : 	*x = i + active_3d_environment->x_origin;

  002aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002af	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  002b4	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  002b9	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  002bc	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 246  : 
; 247  : 	*y = active_3d_environment->y_origin - j;

  002c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002c5	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  002ca	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _j$[ebp]
  002cf	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  002d2	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 248  : 
; 249  : 	return ( OBJECT_3D_PARTIALLY_VISIBLE );

  002d6	b8 02 00 00 00	 mov	 eax, 2
$LN1@get_object:

; 250  : }

  002db	5f		 pop	 edi
  002dc	5e		 pop	 esi
  002dd	5b		 pop	 ebx
  002de	8b e5		 mov	 esp, ebp
  002e0	5d		 pop	 ebp
  002e1	c2 0c 00	 ret	 12			; 0000000cH
?get_object_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@PAM1@Z ENDP ; get_object_3d_screen_coordinates
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z
_TEXT	SEGMENT
_j$ = -24						; size = 4
_i$ = -20						; size = 4
_q$ = -16						; size = 4
_relative_position$ = -12				; size = 12
_position$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z PROC ; get_position_3d_screen_coordinates, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 
; 114  : 	vec3d
; 115  : 		relative_position;
; 116  : 
; 117  : 	float
; 118  : 		q,
; 119  : 		i,
; 120  : 		j;
; 121  : 
; 122  : 	get_position_3d_relative_position ( position, &relative_position );

  00009	8d 45 f4	 lea	 eax, DWORD PTR _relative_position$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _position$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?get_position_3d_relative_position@@YGXPAUVEC3D@@0@Z ; get_position_3d_relative_position

; 123  : 
; 124  : 	if ( relative_position.z < clip_hither )

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clip_hither@@3MA
  0001e	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR _relative_position$[ebp+8]
  00022	76 07		 jbe	 SHORT $LN2@get_positi

; 125  : 	{
; 126  : 
; 127  : 		return ( OBJECT_3D_NOT_VISIBLE );

  00024	b8 03 00 00 00	 mov	 eax, 3
  00029	eb 7c		 jmp	 SHORT $LN1@get_positi
$LN2@get_positi:

; 128  : 	}
; 129  : 
; 130  : 	q = 1.0 / relative_position.z;

  0002b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _relative_position$[ebp+8]
  00030	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00038	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0003c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00040	f3 0f 11 45 f0	 movss	 DWORD PTR _q$[ebp], xmm0

; 131  : 
; 132  : 	i = ( active_3d_environment->screen_i_scale * relative_position.x * q );

  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0004a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004e	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _relative_position$[ebp]
  00053	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _q$[ebp]
  00058	f3 0f 11 45 ec	 movss	 DWORD PTR _i$[ebp], xmm0

; 133  : 	j = ( active_3d_environment->screen_j_scale * relative_position.y * q );

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00062	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00067	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _relative_position$[ebp+4]
  0006c	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _q$[ebp]
  00071	f3 0f 11 45 e8	 movss	 DWORD PTR _j$[ebp], xmm0

; 134  : 
; 135  : 	*x = active_3d_environment->x_origin + i;

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0007b	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00080	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _i$[ebp]
  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00088	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 136  : 	*y = active_3d_environment->y_origin - j;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00091	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00096	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _j$[ebp]
  0009b	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  0009e	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 137  : 
; 138  : 	return ( OBJECT_3D_COMPLETELY_VISIBLE );

  000a2	b8 01 00 00 00	 mov	 eax, 1
$LN1@get_positi:

; 139  : }

  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 0c 00	 ret	 12			; 0000000cH
?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ENDP ; get_position_3d_screen_coordinates
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?get_position_3d_relative_position@@YGXPAUVEC3D@@0@Z
_TEXT	SEGMENT
_relative_position$ = -12				; size = 12
_position$ = 8						; size = 4
_r$ = 12						; size = 4
?get_position_3d_relative_position@@YGXPAUVEC3D@@0@Z PROC ; get_position_3d_relative_position, COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 94   : 
; 95   : 	vec3d
; 96   : 		relative_position;
; 97   : 
; 98   : 	relative_position.x = position->x - visual_3d_vp->x;

  00009	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00012	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00016	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0001a	f3 0f 11 45 f4	 movss	 DWORD PTR _relative_position$[ebp], xmm0

; 99   : 	relative_position.y = position->y - visual_3d_vp->y;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00028	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0002d	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00032	f3 0f 11 45 f8	 movss	 DWORD PTR _relative_position$[ebp+4], xmm0

; 100  : 	relative_position.z = position->z - visual_3d_vp->z;

  00037	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00040	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00045	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0004a	f3 0f 11 45 fc	 movss	 DWORD PTR _relative_position$[ebp+8], xmm0

; 101  : 
; 102  : 	r->x = ( relative_position.x * visual_3d_vp->xv.x + relative_position.y * visual_3d_vp->xv.y + relative_position.z * visual_3d_vp->xv.z );

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00054	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _relative_position$[ebp]
  00059	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00064	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _relative_position$[ebp+4]
  00069	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  0006e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00072	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00078	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _relative_position$[ebp+8]
  0007d	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00082	f3 0f 58 c1	 addss	 xmm0, xmm1
  00086	8b 45 0c	 mov	 eax, DWORD PTR _r$[ebp]
  00089	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 103  : 	r->y = ( relative_position.x * visual_3d_vp->yv.x + relative_position.y * visual_3d_vp->yv.y + relative_position.z * visual_3d_vp->yv.z );

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00092	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _relative_position$[ebp]
  00097	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000a2	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _relative_position$[ebp+4]
  000a7	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  000ac	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000b6	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _relative_position$[ebp+8]
  000bb	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  000c0	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c4	8b 45 0c	 mov	 eax, DWORD PTR _r$[ebp]
  000c7	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 104  : 	r->z = ( relative_position.x * visual_3d_vp->zv.x + relative_position.y * visual_3d_vp->zv.y + relative_position.z * visual_3d_vp->zv.z );

  000cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000d1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _relative_position$[ebp]
  000d6	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000e1	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _relative_position$[ebp+4]
  000e6	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  000eb	f3 0f 58 c1	 addss	 xmm0, xmm1
  000ef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000f5	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _relative_position$[ebp+8]
  000fa	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  000ff	f3 0f 58 c1	 addss	 xmm0, xmm1
  00103	8b 45 0c	 mov	 eax, DWORD PTR _r$[ebp]
  00106	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 105  : }

  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 08 00	 ret	 8
?get_position_3d_relative_position@@YGXPAUVEC3D@@0@Z ENDP ; get_position_3d_relative_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvis.c
;	COMDAT ?set_object_3d_instance_relative_position@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
_relative_position$ = -12				; size = 12
_obj$ = 8						; size = 4
?set_object_3d_instance_relative_position@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC ; set_object_3d_instance_relative_position, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 
; 76   : 	vec3d
; 77   : 		relative_position;
; 78   : 
; 79   : 	relative_position.x = obj->vp.x - visual_3d_vp->x;

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00012	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00017	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0001b	f3 0f 11 45 f4	 movss	 DWORD PTR _relative_position$[ebp], xmm0

; 80   : 	relative_position.y = obj->vp.y - visual_3d_vp->y;

  00020	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00029	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0002e	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00033	f3 0f 11 45 f8	 movss	 DWORD PTR _relative_position$[ebp+4], xmm0

; 81   : 	relative_position.z = obj->vp.z - visual_3d_vp->z;

  00038	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00041	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00046	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0004b	f3 0f 11 45 fc	 movss	 DWORD PTR _relative_position$[ebp+8], xmm0

; 82   : 
; 83   : 	obj->view_position.x = ( relative_position.x * visual_3d_vp->xv.x + relative_position.y * visual_3d_vp->xv.y + relative_position.z * visual_3d_vp->xv.z );

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00055	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _relative_position$[ebp]
  0005a	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00065	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _relative_position$[ebp+4]
  0006a	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  0006f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00073	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00079	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _relative_position$[ebp+8]
  0007e	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00083	f3 0f 58 c1	 addss	 xmm0, xmm1
  00087	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0008a	f3 0f 11 40 38	 movss	 DWORD PTR [eax+56], xmm0

; 84   : 	obj->view_position.y = ( relative_position.x * visual_3d_vp->yv.x + relative_position.y * visual_3d_vp->yv.y + relative_position.z * visual_3d_vp->yv.z );

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00094	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _relative_position$[ebp]
  00099	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000a4	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _relative_position$[ebp+4]
  000a9	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  000ae	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000b8	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _relative_position$[ebp+8]
  000bd	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  000c2	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c6	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000c9	f3 0f 11 40 3c	 movss	 DWORD PTR [eax+60], xmm0

; 85   : 	obj->view_position.z = ( relative_position.x * visual_3d_vp->zv.x + relative_position.y * visual_3d_vp->zv.y + relative_position.z * visual_3d_vp->zv.z );

  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000d3	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _relative_position$[ebp]
  000d8	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  000dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000e3	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _relative_position$[ebp+4]
  000e8	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  000ed	f3 0f 58 c1	 addss	 xmm0, xmm1
  000f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000f7	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _relative_position$[ebp+8]
  000fc	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00101	f3 0f 58 c1	 addss	 xmm0, xmm1
  00105	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00108	f3 0f 11 40 40	 movss	 DWORD PTR [eax+64], xmm0

; 86   : }

  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 04 00	 ret	 4
?set_object_3d_instance_relative_position@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP ; set_object_3d_instance_relative_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
END
