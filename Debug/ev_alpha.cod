; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\system\ev_alpha.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?set_alpha_events@@YGXXZ			; set_alpha_events
PUBLIC	?set_alpha_event_functions@@YGXP6GXH@Z00@Z	; set_alpha_event_functions
PUBLIC	??_C@_0CG@IBBLINPC@ERROR?3?5Alpha?5event?5function?5not@ ; `string'
EXTRN	__imp__tolower:PROC
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z:PROC	; set_event
EXTRN	?pop_event@@YGXP6GXXZ@Z:PROC			; pop_event
EXTRN	?dinput_to_ascii@@YGDH@Z:PROC			; dinput_to_ascii
EXTRN	?dinput_to_upper_ascii@@YGDH@Z:PROC		; dinput_to_upper_ascii
_BSS	SEGMENT
?alpha_entry_function@@3P6GXH@ZA DD 01H DUP (?)		; alpha_entry_function
?end_alpha_entry_function@@3P6GXH@ZA DD 01H DUP (?)	; end_alpha_entry_function
?abort_alpha_entry_function@@3P6GXH@ZA DD 01H DUP (?)	; abort_alpha_entry_function
_BSS	ENDS
;	COMDAT ??_C@_0CG@IBBLINPC@ERROR?3?5Alpha?5event?5function?5not@
CONST	SEGMENT
??_C@_0CG@IBBLINPC@ERROR?3?5Alpha?5event?5function?5not@ DB 'ERROR: Alpha'
	DB	' event function not setup', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_alpha.c
;	COMDAT ?abort_alpha_entry@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_old_abort_alpha_entry_function$ = -4			; size = 4
_ev$ = 8						; size = 4
?abort_alpha_entry@@YGXPAUEVENT@@@Z PROC		; abort_alpha_entry, COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 257  : 
; 258  : 	void
; 259  : 		((*old_abort_alpha_entry_function) (int key));
; 260  : 
; 261  : 	old_abort_alpha_entry_function = abort_alpha_entry_function;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?abort_alpha_entry_function@@3P6GXH@ZA
  0000e	89 45 fc	 mov	 DWORD PTR _old_abort_alpha_entry_function$[ebp], eax

; 262  : 
; 263  : 	pop_event (NULL);

  00011	6a 00		 push	 0
  00013	e8 00 00 00 00	 call	 ?pop_event@@YGXP6GXXZ@Z	; pop_event

; 264  : 
; 265  : 	end_alpha_entry_function = NULL;

  00018	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?end_alpha_entry_function@@3P6GXH@ZA, 0

; 266  : 
; 267  : 	abort_alpha_entry_function = NULL;

  00022	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?abort_alpha_entry_function@@3P6GXH@ZA, 0

; 268  : 
; 269  : 	alpha_entry_function = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?alpha_entry_function@@3P6GXH@ZA, 0

; 270  : 
; 271  : 	if (old_abort_alpha_entry_function)

  00036	83 7d fc 00	 cmp	 DWORD PTR _old_abort_alpha_entry_function$[ebp], 0
  0003a	74 0b		 je	 SHORT $LN1@abort_alph

; 272  : 	{
; 273  : 
; 274  : 		old_abort_alpha_entry_function (((event *) ev)->key);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0003f	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00043	51		 push	 ecx
  00044	ff 55 fc	 call	 DWORD PTR _old_abort_alpha_entry_function$[ebp]
$LN1@abort_alph:

; 275  : 	}
; 276  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?abort_alpha_entry@@YGXPAUEVENT@@@Z ENDP		; abort_alpha_entry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_alpha.c
;	COMDAT ?end_alpha_entry@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_old_end_alpha_entry_function$ = -4			; size = 4
_ev$ = 8						; size = 4
?end_alpha_entry@@YGXPAUEVENT@@@Z PROC			; end_alpha_entry, COMDAT

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 230  : 
; 231  : 	void
; 232  : 		((*old_end_alpha_entry_function) (int key));
; 233  : 
; 234  : 	old_end_alpha_entry_function = end_alpha_entry_function;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?end_alpha_entry_function@@3P6GXH@ZA
  0000e	89 45 fc	 mov	 DWORD PTR _old_end_alpha_entry_function$[ebp], eax

; 235  : 
; 236  : 	pop_event (NULL);

  00011	6a 00		 push	 0
  00013	e8 00 00 00 00	 call	 ?pop_event@@YGXP6GXXZ@Z	; pop_event

; 237  : 
; 238  : 	end_alpha_entry_function = NULL;

  00018	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?end_alpha_entry_function@@3P6GXH@ZA, 0

; 239  : 
; 240  : 	abort_alpha_entry_function = NULL;

  00022	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?abort_alpha_entry_function@@3P6GXH@ZA, 0

; 241  : 
; 242  : 	alpha_entry_function = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?alpha_entry_function@@3P6GXH@ZA, 0

; 243  : 
; 244  : 	if (old_end_alpha_entry_function)

  00036	83 7d fc 00	 cmp	 DWORD PTR _old_end_alpha_entry_function$[ebp], 0
  0003a	74 0b		 je	 SHORT $LN1@end_alpha_

; 245  : 	{
; 246  : 
; 247  : 		old_end_alpha_entry_function (((event *) ev)->key);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0003f	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00043	51		 push	 ecx
  00044	ff 55 fc	 call	 DWORD PTR _old_end_alpha_entry_function$[ebp]
$LN1@end_alpha_:

; 248  : 	}
; 249  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?end_alpha_entry@@YGXPAUEVENT@@@Z ENDP			; end_alpha_entry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_alpha.c
;	COMDAT ?alpha_entry_uppercase@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_c$ = -4						; size = 4
_ev$ = 8						; size = 4
?alpha_entry_uppercase@@YGXPAUEVENT@@@Z PROC		; alpha_entry_uppercase, COMDAT

; 210  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 211  : 
; 212  : 	int
; 213  : 		c;
; 214  : 
; 215  : 	if (alpha_entry_function)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?alpha_entry_function@@3P6GXH@ZA, 0
  00010	74 1d		 je	 SHORT $LN1@alpha_entr

; 216  : 	{
; 217  : 
; 218  : 		c = dinput_to_upper_ascii (((event *) ev)->key);

  00012	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00015	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?dinput_to_upper_ascii@@YGDH@Z ; dinput_to_upper_ascii
  0001f	0f b6 d0	 movzx	 edx, al
  00022	89 55 fc	 mov	 DWORD PTR _c$[ebp], edx

; 219  : 
; 220  : 		alpha_entry_function (c);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _c$[ebp]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?alpha_entry_function@@3P6GXH@ZA
$LN1@alpha_entr:

; 221  : 	}
; 222  : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?alpha_entry_uppercase@@YGXPAUEVENT@@@Z ENDP		; alpha_entry_uppercase
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_alpha.c
;	COMDAT ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_c$ = -4						; size = 4
_ev$ = 8						; size = 4
?alpha_entry_lowercase@@YGXPAUEVENT@@@Z PROC		; alpha_entry_lowercase, COMDAT

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 190  : 
; 191  : 	int
; 192  : 		c;
; 193  : 
; 194  : 	if (alpha_entry_function)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?alpha_entry_function@@3P6GXH@ZA, 0
  00010	74 2d		 je	 SHORT $LN1@alpha_entr

; 195  : 	{
; 196  : 
; 197  : 		c = dinput_to_ascii (((event *) ev)->key);

  00012	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00015	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?dinput_to_ascii@@YGDH@Z ; dinput_to_ascii
  0001f	0f b6 d0	 movzx	 edx, al
  00022	89 55 fc	 mov	 DWORD PTR _c$[ebp], edx

; 198  : 
; 199  : 		c = tolower (c);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _c$[ebp]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tolower
  0002f	83 c4 04	 add	 esp, 4
  00032	89 45 fc	 mov	 DWORD PTR _c$[ebp], eax

; 200  : 
; 201  : 		alpha_entry_function (c);

  00035	8b 45 fc	 mov	 eax, DWORD PTR _c$[ebp]
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR ?alpha_entry_function@@3P6GXH@ZA
$LN1@alpha_entr:

; 202  : 	}
; 203  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ENDP		; alpha_entry_lowercase
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_alpha.c
;	COMDAT ?set_alpha_event_functions@@YGXP6GXH@Z00@Z
_TEXT	SEGMENT
_function$ = 8						; size = 4
_end_function$ = 12					; size = 4
_abort_function$ = 16					; size = 4
?set_alpha_event_functions@@YGXP6GXH@Z00@Z PROC		; set_alpha_event_functions, COMDAT

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 286  : 
; 287  : 	alpha_entry_function = function;

  00009	8b 45 08	 mov	 eax, DWORD PTR _function$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?alpha_entry_function@@3P6GXH@ZA, eax

; 288  : 
; 289  : 	end_alpha_entry_function = end_function;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _end_function$[ebp]
  00014	a3 00 00 00 00	 mov	 DWORD PTR ?end_alpha_entry_function@@3P6GXH@ZA, eax

; 290  : 
; 291  : 	abort_alpha_entry_function = abort_function;

  00019	8b 45 10	 mov	 eax, DWORD PTR _abort_function$[ebp]
  0001c	a3 00 00 00 00	 mov	 DWORD PTR ?abort_alpha_entry_function@@3P6GXH@ZA, eax

; 292  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
?set_alpha_event_functions@@YGXP6GXH@Z00@Z ENDP		; set_alpha_event_functions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_alpha.c
;	COMDAT ?set_alpha_events@@YGXXZ
_TEXT	SEGMENT
_loop$ = -4						; size = 4
?set_alpha_events@@YGXXZ PROC				; set_alpha_events, COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 
; 97   : 	int
; 98   : 		loop;
; 99   : 
; 100  : 	if (!alpha_entry_function)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?alpha_entry_function@@3P6GXH@ZA, 0
  00010	75 0d		 jne	 SHORT $LN17@set_alpha_

; 101  : 	{
; 102  : 
; 103  : 		debug_fatal ("ERROR: Alpha event function not setup");

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IBBLINPC@ERROR?3?5Alpha?5event?5function?5not@
  00017	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0001c	83 c4 04	 add	 esp, 4
$LN17@set_alpha_:

; 104  : 	}
; 105  : 
; 106  : 	//
; 107  : 	// Many special keys need to be uppercase so set all keys first to upper
; 108  : 	//
; 109  : 
; 110  : 	for (loop = DIK_1; loop <= DIK_APPS; loop ++)

  0001f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 2
  00026	eb 09		 jmp	 SHORT $LN4@set_alpha_
$LN2@set_alpha_:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0002b	83 c0 01	 add	 eax, 1
  0002e	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@set_alpha_:
  00031	81 7d fc dd 00
	00 00		 cmp	 DWORD PTR _loop$[ebp], 221 ; 000000ddH
  00038	7f 44		 jg	 SHORT $LN3@set_alpha_

; 111  : 	{
; 112  : 			
; 113  : 		set_event (loop, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_uppercase);

  0003a	68 00 00 00 00	 push	 OFFSET ?alpha_entry_uppercase@@YGXPAUEVENT@@@Z ; alpha_entry_uppercase
  0003f	6a 02		 push	 2
  00041	6a 00		 push	 0
  00043	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 114  : 
; 115  : 		if ((loop != DIK_LSHIFT) && (loop != DIK_RSHIFT))

  0004c	83 7d fc 2a	 cmp	 DWORD PTR _loop$[ebp], 42 ; 0000002aH
  00050	74 2a		 je	 SHORT $LN18@set_alpha_
  00052	83 7d fc 36	 cmp	 DWORD PTR _loop$[ebp], 54 ; 00000036H
  00056	74 24		 je	 SHORT $LN18@set_alpha_

; 116  : 		{
; 117  : 	
; 118  : 			set_event (loop, MODIFIER_LEFT_SHIFT, KEY_STATE_DOWN, alpha_entry_uppercase);

  00058	68 00 00 00 00	 push	 OFFSET ?alpha_entry_uppercase@@YGXPAUEVENT@@@Z ; alpha_entry_uppercase
  0005d	6a 02		 push	 2
  0005f	6a 01		 push	 1
  00061	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 119  : 			set_event (loop, MODIFIER_RIGHT_SHIFT, KEY_STATE_DOWN, alpha_entry_uppercase);

  0006a	68 00 00 00 00	 push	 OFFSET ?alpha_entry_uppercase@@YGXPAUEVENT@@@Z ; alpha_entry_uppercase
  0006f	6a 02		 push	 2
  00071	6a 04		 push	 4
  00073	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event
$LN18@set_alpha_:

; 120  : 		}
; 121  : 	}

  0007c	eb aa		 jmp	 SHORT $LN2@set_alpha_
$LN3@set_alpha_:

; 122  : 
; 123  : 	//
; 124  : 	// lowercase alpha keys
; 125  : 	// 	
; 126  : 
; 127  : 	for (loop = DIK_Q; loop <= DIK_P; loop ++)

  0007e	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 16 ; 00000010H
  00085	eb 09		 jmp	 SHORT $LN7@set_alpha_
$LN5@set_alpha_:
  00087	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN7@set_alpha_:
  00090	83 7d fc 19	 cmp	 DWORD PTR _loop$[ebp], 25 ; 00000019H
  00094	7f 14		 jg	 SHORT $LN6@set_alpha_

; 128  : 	{
; 129  : 			
; 130  : 		set_event (loop, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  00096	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  0009b	6a 02		 push	 2
  0009d	6a 00		 push	 0
  0009f	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 131  : 	}

  000a8	eb dd		 jmp	 SHORT $LN5@set_alpha_
$LN6@set_alpha_:

; 132  : 
; 133  : 	for (loop = DIK_A; loop <= DIK_L; loop ++)

  000aa	c7 45 fc 1e 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 30 ; 0000001eH
  000b1	eb 09		 jmp	 SHORT $LN10@set_alpha_
$LN8@set_alpha_:
  000b3	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000b6	83 c0 01	 add	 eax, 1
  000b9	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN10@set_alpha_:
  000bc	83 7d fc 26	 cmp	 DWORD PTR _loop$[ebp], 38 ; 00000026H
  000c0	7f 14		 jg	 SHORT $LN9@set_alpha_

; 134  : 	{
; 135  : 			
; 136  : 		set_event (loop, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  000c2	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  000c7	6a 02		 push	 2
  000c9	6a 00		 push	 0
  000cb	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 137  : 	}

  000d4	eb dd		 jmp	 SHORT $LN8@set_alpha_
$LN9@set_alpha_:

; 138  : 
; 139  : 	for (loop = DIK_Z; loop <= DIK_M; loop ++)

  000d6	c7 45 fc 2c 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 44 ; 0000002cH
  000dd	eb 09		 jmp	 SHORT $LN13@set_alpha_
$LN11@set_alpha_:
  000df	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000e2	83 c0 01	 add	 eax, 1
  000e5	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN13@set_alpha_:
  000e8	83 7d fc 32	 cmp	 DWORD PTR _loop$[ebp], 50 ; 00000032H
  000ec	7f 14		 jg	 SHORT $LN12@set_alpha_

; 140  : 	{
; 141  : 			
; 142  : 		set_event (loop, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  000ee	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  000f3	6a 02		 push	 2
  000f5	6a 00		 push	 0
  000f7	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 143  : 	}

  00100	eb dd		 jmp	 SHORT $LN11@set_alpha_
$LN12@set_alpha_:

; 144  : 
; 145  : 	for (loop = DIK_1; loop <= DIK_EQUALS; loop++)

  00102	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 2
  00109	eb 09		 jmp	 SHORT $LN16@set_alpha_
$LN14@set_alpha_:
  0010b	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0010e	83 c0 01	 add	 eax, 1
  00111	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN16@set_alpha_:
  00114	83 7d fc 0d	 cmp	 DWORD PTR _loop$[ebp], 13 ; 0000000dH
  00118	7f 14		 jg	 SHORT $LN15@set_alpha_

; 146  : 	{
; 147  : 
; 148  : 		set_event (loop, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  0011a	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  0011f	6a 02		 push	 2
  00121	6a 00		 push	 0
  00123	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 149  : 	}

  0012c	eb dd		 jmp	 SHORT $LN14@set_alpha_
$LN15@set_alpha_:

; 150  : 
; 151  : 	set_event (DIK_COMMA, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  0012e	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  00133	6a 02		 push	 2
  00135	6a 00		 push	 0
  00137	6a 33		 push	 51			; 00000033H
  00139	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 152  : 	set_event (DIK_PERIOD, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  0013e	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  00143	6a 02		 push	 2
  00145	6a 00		 push	 0
  00147	6a 34		 push	 52			; 00000034H
  00149	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 153  : 	set_event (DIK_SLASH, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  0014e	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  00153	6a 02		 push	 2
  00155	6a 00		 push	 0
  00157	6a 35		 push	 53			; 00000035H
  00159	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 154  : 	set_event (DIK_MINUS, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  0015e	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  00163	6a 02		 push	 2
  00165	6a 00		 push	 0
  00167	6a 0c		 push	 12			; 0000000cH
  00169	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 155  : 	set_event (DIK_SUBTRACT, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  0016e	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  00173	6a 02		 push	 2
  00175	6a 00		 push	 0
  00177	6a 4a		 push	 74			; 0000004aH
  00179	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 156  : 	set_event (DIK_LBRACKET, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  0017e	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  00183	6a 02		 push	 2
  00185	6a 00		 push	 0
  00187	6a 1a		 push	 26			; 0000001aH
  00189	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 157  : 	set_event (DIK_RBRACKET, MODIFIER_NONE, KEY_STATE_DOWN, alpha_entry_lowercase);

  0018e	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  00193	6a 02		 push	 2
  00195	6a 00		 push	 0
  00197	6a 1b		 push	 27			; 0000001bH
  00199	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 158  : 
; 159  : 	set_event (DIK_UNDERLINE, MODIFIER_LEFT_SHIFT, KEY_STATE_DOWN, alpha_entry_lowercase);

  0019e	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  001a3	6a 02		 push	 2
  001a5	6a 01		 push	 1
  001a7	68 93 00 00 00	 push	 147			; 00000093H
  001ac	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 160  : 	set_event (DIK_UNDERLINE, MODIFIER_RIGHT_SHIFT, KEY_STATE_DOWN, alpha_entry_lowercase);

  001b1	68 00 00 00 00	 push	 OFFSET ?alpha_entry_lowercase@@YGXPAUEVENT@@@Z ; alpha_entry_lowercase
  001b6	6a 02		 push	 2
  001b8	6a 04		 push	 4
  001ba	68 93 00 00 00	 push	 147			; 00000093H
  001bf	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 161  : 
; 162  : 	//
; 163  : 	// special keys, clear shift keys
; 164  : 	//
; 165  : 
; 166  : 	set_event (DIK_LSHIFT, MODIFIER_NONE, KEY_STATE_EITHER, NULL);

  001c4	6a 00		 push	 0
  001c6	6a 03		 push	 3
  001c8	6a 00		 push	 0
  001ca	6a 2a		 push	 42			; 0000002aH
  001cc	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 167  : 	set_event (DIK_RSHIFT, MODIFIER_NONE, KEY_STATE_EITHER, NULL);

  001d1	6a 00		 push	 0
  001d3	6a 03		 push	 3
  001d5	6a 00		 push	 0
  001d7	6a 36		 push	 54			; 00000036H
  001d9	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 168  : 
; 169  : 	//
; 170  : 	// end and abort keys
; 171  : 	//
; 172  : 
; 173  : 	set_event (DIK_RETURN, MODIFIER_NONE, KEY_STATE_DOWN, end_alpha_entry);

  001de	68 00 00 00 00	 push	 OFFSET ?end_alpha_entry@@YGXPAUEVENT@@@Z ; end_alpha_entry
  001e3	6a 02		 push	 2
  001e5	6a 00		 push	 0
  001e7	6a 1c		 push	 28			; 0000001cH
  001e9	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 174  : 	set_event (DIK_ESCAPE, MODIFIER_NONE, KEY_STATE_DOWN, abort_alpha_entry);

  001ee	68 00 00 00 00	 push	 OFFSET ?abort_alpha_entry@@YGXPAUEVENT@@@Z ; abort_alpha_entry
  001f3	6a 02		 push	 2
  001f5	6a 00		 push	 0
  001f7	6a 01		 push	 1
  001f9	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 175  : 
; 176  : 	//
; 177  : 	// mouse buttons
; 178  : 	//
; 179  : 
; 180  : 	set_event (MOUSE_LEFT_BUTTON, MODIFIER_NONE, BUTTON_STATE_DOWN, end_alpha_entry);

  001fe	68 00 00 00 00	 push	 OFFSET ?end_alpha_entry@@YGXPAUEVENT@@@Z ; end_alpha_entry
  00203	6a 02		 push	 2
  00205	6a 00		 push	 0
  00207	68 00 01 00 00	 push	 256			; 00000100H
  0020c	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 181  : 	set_event (MOUSE_RIGHT_BUTTON, MODIFIER_NONE, BUTTON_STATE_DOWN, end_alpha_entry);

  00211	68 00 00 00 00	 push	 OFFSET ?end_alpha_entry@@YGXPAUEVENT@@@Z ; end_alpha_entry
  00216	6a 02		 push	 2
  00218	6a 00		 push	 0
  0021a	68 01 01 00 00	 push	 257			; 00000101H
  0021f	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 182  : }

  00224	5f		 pop	 edi
  00225	5e		 pop	 esi
  00226	5b		 pop	 ebx
  00227	8b e5		 mov	 esp, ebp
  00229	5d		 pop	 ebp
  0022a	c3		 ret	 0
?set_alpha_events@@YGXXZ ENDP				; set_alpha_events
_TEXT	ENDS
END
