; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\vcache.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?vertex_cache_size@@3HA				; vertex_cache_size
PUBLIC	?number_of_vertex_cache_hits@@3HA		; number_of_vertex_cache_hits
PUBLIC	?number_of_vertex_cache_misses@@3HA		; number_of_vertex_cache_misses
PUBLIC	?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A	; vertex_cache_indices
_BSS	SEGMENT
?number_of_vertex_cache_hits@@3HA DD 01H DUP (?)	; number_of_vertex_cache_hits
?number_of_vertex_cache_misses@@3HA DD 01H DUP (?)	; number_of_vertex_cache_misses
?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A DD 01H DUP (?) ; vertex_cache_indices
_BSS	ENDS
_DATA	SEGMENT
?vertex_cache_size@@3HA DD 02H				; vertex_cache_size
_DATA	ENDS
PUBLIC	?set_vertex_cache_size@@YGXH@Z			; set_vertex_cache_size
PUBLIC	?reset_vertex_cache_data@@YGXXZ			; reset_vertex_cache_data
PUBLIC	?report_vertex_cache_statistics@@YGXXZ		; report_vertex_cache_statistics
PUBLIC	?assess_vertex_cache_usage@@YGXPAGH@Z		; assess_vertex_cache_usage
PUBLIC	?__LINE__Var@?0??set_vertex_cache_size@@YGXH@Z@4JA ; `set_vertex_cache_size'::`1'::__LINE__Var
PUBLIC	??_C@_0DH@GMGIDNND@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_08CAHIFPJJ@size?5?$DO?51@			; `string'
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
;	COMDAT ??_C@_08CAHIFPJJ@size?5?$DO?51@
CONST	SEGMENT
??_C@_08CAHIFPJJ@size?5?$DO?51@ DB 'size > 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GMGIDNND@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DH@GMGIDNND@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\vcache.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_vertex_cache_size@@YGXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_vertex_cache_size@@YGXH@Z@4JA DD 078H ; `set_vertex_cache_size'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\vcache.c
;	COMDAT ?age_vertex_cache@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?age_vertex_cache@@YGXXZ PROC				; age_vertex_cache, COMDAT

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 280  : 
; 281  : 	int
; 282  : 		count;
; 283  : 
; 284  : 	for ( count = 0; count < vertex_cache_size; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@age_vertex
$LN2@age_vertex:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@age_vertex:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?vertex_cache_size@@3HA ; vertex_cache_size
  00024	7d 1f		 jge	 SHORT $LN1@age_vertex

; 285  : 	{
; 286  : 
; 287  : 		vertex_cache_indices[count].age++;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  0002f	8b 54 c1 04	 mov	 edx, DWORD PTR [ecx+eax*8+4]
  00033	83 c2 01	 add	 edx, 1
  00036	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  0003f	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx

; 288  : 	}

  00043	eb cd		 jmp	 SHORT $LN2@age_vertex
$LN1@age_vertex:

; 289  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?age_vertex_cache@@YGXXZ ENDP				; age_vertex_cache
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\vcache.c
;	COMDAT ?get_oldest_vertex_cache_index@@YGHXZ
_TEXT	SEGMENT
_oldest_age$ = -12					; size = 4
_oldest_index$ = -8					; size = 4
_count$ = -4						; size = 4
?get_oldest_vertex_cache_index@@YGHXZ PROC		; get_oldest_vertex_cache_index, COMDAT

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 249  : 
; 250  : 	int
; 251  : 		count,
; 252  : 		oldest_index,
; 253  : 		oldest_age;
; 254  : 
; 255  : 	oldest_index = 0;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _oldest_index$[ebp], 0

; 256  : 
; 257  : 	oldest_age = vertex_cache_indices[0].age;

  00010	b8 08 00 00 00	 mov	 eax, 8
  00015	6b c8 00	 imul	 ecx, eax, 0
  00018	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  0001e	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  00022	89 45 f4	 mov	 DWORD PTR _oldest_age$[ebp], eax

; 258  : 
; 259  : 	for ( count = 1; count < vertex_cache_size; count++ )

  00025	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  0002c	eb 09		 jmp	 SHORT $LN4@get_oldest
$LN2@get_oldest:
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_oldest:
  00037	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?vertex_cache_size@@3HA ; vertex_cache_size
  00040	7d 2a		 jge	 SHORT $LN3@get_oldest

; 260  : 	{
; 261  : 
; 262  : 		if ( vertex_cache_indices[count].age > oldest_age )

  00042	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  0004b	8b 54 c1 04	 mov	 edx, DWORD PTR [ecx+eax*8+4]
  0004f	3b 55 f4	 cmp	 edx, DWORD PTR _oldest_age$[ebp]
  00052	7e 16		 jle	 SHORT $LN5@get_oldest

; 263  : 		{
; 264  : 
; 265  : 			oldest_index = count;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00057	89 45 f8	 mov	 DWORD PTR _oldest_index$[ebp], eax

; 266  : 
; 267  : 			oldest_age = vertex_cache_indices[count].age;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  00063	8b 54 c1 04	 mov	 edx, DWORD PTR [ecx+eax*8+4]
  00067	89 55 f4	 mov	 DWORD PTR _oldest_age$[ebp], edx
$LN5@get_oldest:

; 268  : 		}
; 269  : 	}

  0006a	eb c2		 jmp	 SHORT $LN2@get_oldest
$LN3@get_oldest:

; 270  : 
; 271  : 	return ( oldest_index );

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _oldest_index$[ebp]

; 272  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?get_oldest_vertex_cache_index@@YGHXZ ENDP		; get_oldest_vertex_cache_index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\vcache.c
;	COMDAT ?index_is_in_vertex_cache@@YGHH@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_index$ = 8						; size = 4
?index_is_in_vertex_cache@@YGHH@Z PROC			; index_is_in_vertex_cache, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 226  : 
; 227  : 	int
; 228  : 		count;
; 229  : 
; 230  : 	for ( count = 0; count < vertex_cache_size; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@index_is_i
$LN2@index_is_i:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@index_is_i:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?vertex_cache_size@@3HA ; vertex_cache_size
  00024	7d 18		 jge	 SHORT $LN3@index_is_i

; 231  : 	{
; 232  : 
; 233  : 		if ( vertex_cache_indices[count].index == index )

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  0002f	8b 14 c1	 mov	 edx, DWORD PTR [ecx+eax*8]
  00032	3b 55 08	 cmp	 edx, DWORD PTR _index$[ebp]
  00035	75 05		 jne	 SHORT $LN5@index_is_i

; 234  : 		{
; 235  : 
; 236  : 			return ( count );

  00037	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003a	eb 05		 jmp	 SHORT $LN1@index_is_i
$LN5@index_is_i:

; 237  : 		}
; 238  : 	}

  0003c	eb d4		 jmp	 SHORT $LN2@index_is_i
$LN3@index_is_i:

; 239  : 
; 240  : 	return ( -1 );

  0003e	83 c8 ff	 or	 eax, -1
$LN1@index_is_i:

; 241  : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?index_is_in_vertex_cache@@YGHH@Z ENDP			; index_is_in_vertex_cache
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\vcache.c
;	COMDAT ?assess_vertex_cache_usage@@YGXPAGH@Z
_TEXT	SEGMENT
_cache_index$1 = -12					; size = 4
_index$2 = -8						; size = 4
_count$ = -4						; size = 4
_indices$ = 8						; size = 4
_number_of_indices$ = 12				; size = 4
?assess_vertex_cache_usage@@YGXPAGH@Z PROC		; assess_vertex_cache_usage, COMDAT

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 167  : 
; 168  : 	int
; 169  : 		count;
; 170  : 
; 171  : 	for ( count = 0; count < vertex_cache_size; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@assess_ver
$LN2@assess_ver:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@assess_ver:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?vertex_cache_size@@3HA ; vertex_cache_size
  00024	7d 25		 jge	 SHORT $LN3@assess_ver

; 172  : 	{
; 173  : 
; 174  : 		vertex_cache_indices[count].index = -1;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  0002f	c7 04 c1 ff ff
	ff ff		 mov	 DWORD PTR [ecx+eax*8], -1

; 175  : 		vertex_cache_indices[count].age = vertex_cache_size;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  0003f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?vertex_cache_size@@3HA ; vertex_cache_size
  00045	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx

; 176  : 	}

  00049	eb c7		 jmp	 SHORT $LN2@assess_ver
$LN3@assess_ver:

; 177  : 
; 178  : 	for ( count = 0; count < number_of_indices; count++ )

  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00052	eb 09		 jmp	 SHORT $LN7@assess_ver
$LN5@assess_ver:
  00054	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00057	83 c0 01	 add	 eax, 1
  0005a	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@assess_ver:
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00060	3b 45 0c	 cmp	 eax, DWORD PTR _number_of_indices$[ebp]
  00063	0f 8d 85 00 00
	00		 jge	 $LN1@assess_ver

; 179  : 	{
; 180  : 
; 181  : 		int
; 182  : 			index,
; 183  : 			cache_index;
; 184  : 
; 185  : 		index = ( int ) indices[count];

  00069	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _indices$[ebp]
  0006f	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00073	89 55 f8	 mov	 DWORD PTR _index$2[ebp], edx

; 186  : 
; 187  : 		//
; 188  : 		// Check to see if the vertex is in the cache
; 189  : 		//
; 190  : 
; 191  : 		cache_index = index_is_in_vertex_cache ( index );

  00076	8b 45 f8	 mov	 eax, DWORD PTR _index$2[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?index_is_in_vertex_cache@@YGHH@Z ; index_is_in_vertex_cache
  0007f	89 45 f4	 mov	 DWORD PTR _cache_index$1[ebp], eax

; 192  : 
; 193  : 		if ( cache_index != -1 )

  00082	83 7d f4 ff	 cmp	 DWORD PTR _cache_index$1[ebp], -1
  00086	74 27		 je	 SHORT $LN8@assess_ver

; 194  : 		{
; 195  : 
; 196  : 			age_vertex_cache ();

  00088	e8 00 00 00 00	 call	 ?age_vertex_cache@@YGXXZ ; age_vertex_cache

; 197  : 
; 198  : 			vertex_cache_indices[cache_index].age = 0;

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _cache_index$1[ebp]
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  00096	c7 44 c1 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+4], 0

; 199  : 
; 200  : 			number_of_vertex_cache_hits++;

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_vertex_cache_hits@@3HA ; number_of_vertex_cache_hits
  000a3	83 c0 01	 add	 eax, 1
  000a6	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_vertex_cache_hits@@3HA, eax ; number_of_vertex_cache_hits

; 201  : 
; 202  : 			continue;

  000ab	eb a7		 jmp	 SHORT $LN5@assess_ver

; 203  : 		}
; 204  : 		else

  000ad	eb 3a		 jmp	 SHORT $LN9@assess_ver
$LN8@assess_ver:

; 205  : 		{
; 206  : 
; 207  : 			cache_index = get_oldest_vertex_cache_index ();

  000af	e8 00 00 00 00	 call	 ?get_oldest_vertex_cache_index@@YGHXZ ; get_oldest_vertex_cache_index
  000b4	89 45 f4	 mov	 DWORD PTR _cache_index$1[ebp], eax

; 208  : 
; 209  : 			age_vertex_cache ();

  000b7	e8 00 00 00 00	 call	 ?age_vertex_cache@@YGXXZ ; age_vertex_cache

; 210  : 
; 211  : 			vertex_cache_indices[cache_index].index = index;

  000bc	8b 45 f4	 mov	 eax, DWORD PTR _cache_index$1[ebp]
  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  000c5	8b 55 f8	 mov	 edx, DWORD PTR _index$2[ebp]
  000c8	89 14 c1	 mov	 DWORD PTR [ecx+eax*8], edx

; 212  : 
; 213  : 			vertex_cache_indices[cache_index].age = 0;

  000cb	8b 45 f4	 mov	 eax, DWORD PTR _cache_index$1[ebp]
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  000d4	c7 44 c1 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+4], 0

; 214  : 
; 215  : 			number_of_vertex_cache_misses++;

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_vertex_cache_misses@@3HA ; number_of_vertex_cache_misses
  000e1	83 c0 01	 add	 eax, 1
  000e4	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_vertex_cache_misses@@3HA, eax ; number_of_vertex_cache_misses
$LN9@assess_ver:

; 216  : 		}
; 217  : 	}

  000e9	e9 66 ff ff ff	 jmp	 $LN5@assess_ver
$LN1@assess_ver:

; 218  : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 08 00	 ret	 8
?assess_vertex_cache_usage@@YGXPAGH@Z ENDP		; assess_vertex_cache_usage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\vcache.c
;	COMDAT ?report_vertex_cache_statistics@@YGXXZ
_TEXT	SEGMENT
?report_vertex_cache_statistics@@YGXXZ PROC		; report_vertex_cache_statistics, COMDAT

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 155  : 
; 156  : #if REPORT_CACHE_STATS
; 157  : 	debug_log ( "Vertex cache:- Size: %d, Hits: %d, Misses: %d", vertex_cache_size, number_of_vertex_cache_hits, number_of_vertex_cache_misses );
; 158  : #endif
; 159  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?report_vertex_cache_statistics@@YGXXZ ENDP		; report_vertex_cache_statistics
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\vcache.c
;	COMDAT ?reset_vertex_cache_data@@YGXXZ
_TEXT	SEGMENT
?reset_vertex_cache_data@@YGXXZ PROC			; reset_vertex_cache_data, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 143  : 
; 144  : 	number_of_vertex_cache_hits = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_vertex_cache_hits@@3HA, 0 ; number_of_vertex_cache_hits

; 145  : 
; 146  : 	number_of_vertex_cache_misses = 0;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_vertex_cache_misses@@3HA, 0 ; number_of_vertex_cache_misses

; 147  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?reset_vertex_cache_data@@YGXXZ ENDP			; reset_vertex_cache_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\vcache.c
;	COMDAT ?set_vertex_cache_size@@YGXH@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?set_vertex_cache_size@@YGXH@Z PROC			; set_vertex_cache_size, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 121  : 
; 122  : 	ASSERT ( size > 1 );

  00009	83 7d 08 01	 cmp	 DWORD PTR _size$[ebp], 1
  0000d	7f 18		 jg	 SHORT $LN2@set_vertex
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_vertex_cache_size@@YGXH@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@GMGIDNND@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08CAHIFPJJ@size?5?$DO?51@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_vertex:

; 123  : 
; 124  : 	if ( vertex_cache_indices )

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A, 0 ; vertex_cache_indices
  0002e	74 15		 je	 SHORT $LN3@set_vertex

; 125  : 	{
; 126  : 
; 127  : 		safe_free ( vertex_cache_indices );

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A ; vertex_cache_indices
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 128  : 
; 129  : 		vertex_cache_indices = NULL;

  0003b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A, 0 ; vertex_cache_indices
$LN3@set_vertex:

; 130  : 	}
; 131  : 
; 132  : 	vertex_cache_indices = ( vertex_cache_info * ) safe_malloc ( sizeof ( vertex_cache_info ) * size );

  00045	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00048	c1 e0 03	 shl	 eax, 3
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00051	a3 00 00 00 00	 mov	 DWORD PTR ?vertex_cache_indices@@3PAUVERTEX_CACHE_INFO@@A, eax ; vertex_cache_indices

; 133  : 
; 134  : 	vertex_cache_size = size;

  00056	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00059	a3 00 00 00 00	 mov	 DWORD PTR ?vertex_cache_size@@3HA, eax ; vertex_cache_size

; 135  : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?set_vertex_cache_size@@YGXH@Z ENDP			; set_vertex_cache_size
_TEXT	ENDS
END
