; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_updt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?overload_smoke_list_update_functions@@YGXXZ	; overload_smoke_list_update_functions
PUBLIC	?get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z ; get_new_smoke_position
PUBLIC	?__LINE__Var@?0??update_server@@YGXPAUENTITY@@@Z@4JA ; `update_server'::`1'::__LINE__Var
PUBLIC	??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	?__LINE__Var@?0??update_client@@YGXPAUENTITY@@@Z@4JA ; `update_client'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_smoke@@YGHPAUENTITY@@@Z@4JA ; `update_smoke'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA ; `get_new_smoke_position'::`1'::__LINE__Var
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f10000000000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@bf800000
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?get_texture_animation_number_of_frames@@YGHW4TEXTURE_ANIMATION_INDICES@@@Z:PROC ; get_texture_animation_number_of_frames
EXTRN	?delete_local_entity_from_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@@Z:PROC ; delete_local_entity_from_parents_child_list
EXTRN	?smoke_list_movement@@YGXPAUENTITY@@@Z:PROC	; smoke_list_movement
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?command_line_downwash@@3HA:DWORD		; command_line_downwash
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA:BYTE ; fn_get_local_entity_attitude_matrix
EXTRN	?fn_destroy_client_server_entity_family@@3PAY01P6GXPAUENTITY@@@ZA:BYTE ; fn_destroy_client_server_entity_family
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?fn_update_client_server_entity@@3PAY01P6GXPAUENTITY@@@ZA:BYTE ; fn_update_client_server_entity
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?start_of_local_entity_heap@@3HA:DWORD		; start_of_local_entity_heap
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?smoke_list_database@@3PAUSMOKE_LIST_DATA@@A:DWORD ; smoke_list_database
EXTRN	__fltused:DWORD
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA DD 01ecH ; `get_new_smoke_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_smoke@@YGHPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_smoke@@YGHPAUENTITY@@@Z@4JA DD 07aH ; `update_smoke'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_client@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_client@@YGXPAUENTITY@@@Z@4JA DD 064H ; `update_client'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\effect\smokel'
	DB	'st\sl_updt.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_server@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_server@@YGXPAUENTITY@@@Z@4JA DD 058H ; `update_server'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_updt.c
;	COMDAT ?update_client@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv77 = -68						; size = 4
_en$ = 8						; size = 4
?update_client@@YGXPAUENTITY@@@Z PROC			; update_client, COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 101  : 	//VJ 030508 if downwash 
; 102  : 	if (command_line_downwash)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_downwash@@3HA, 0 ; command_line_downwash
  00010	74 6d		 je	 SHORT $LN2@update_cli

; 103  : 	{
; 104  : 		//Xhit: if this is a local created entity then it should also be destroyed localy. (030428)
; 105  : 		if ( !update_smoke( en ) && (get_local_entity_index( en ) >= start_of_local_entity_heap))

  00012	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?update_smoke@@YGHPAUENTITY@@@Z ; update_smoke
  0001b	85 c0		 test	 eax, eax
  0001d	75 5e		 jne	 SHORT $LN4@update_cli
  0001f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00022	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  00028	c1 f8 04	 sar	 eax, 4
  0002b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?start_of_local_entity_heap@@3HA ; start_of_local_entity_heap
  00031	7c 4a		 jl	 SHORT $LN4@update_cli

; 106  : 		{
; 107  : 			destroy_client_server_entity_family( en );

  00033	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00037	74 0a		 je	 SHORT $LN6@update_cli
  00039	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d bc	 mov	 DWORD PTR tv77[ebp], ecx
  00041	eb 21		 jmp	 SHORT $LN7@update_cli
$LN6@update_cli:
  00043	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_client@@YGXPAUENTITY@@@Z@4JA
  00049	83 c2 07	 add	 edx, 7
  0004c	52		 push	 edx
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0005d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN7@update_cli:
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  0006e	c1 e2 02	 shl	 edx, 2
  00071	8b 45 bc	 mov	 eax, DWORD PTR tv77[ebp]
  00074	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_destroy_client_server_entity_family@@3PAY01P6GXPAUENTITY@@@ZA[edx+eax*8]
  0007b	ff d1		 call	 ecx
$LN4@update_cli:

; 108  : 		}
; 109  : 	}
; 110  : 	else

  0007d	eb 09		 jmp	 SHORT $LN1@update_cli
$LN2@update_cli:

; 111  : 	{
; 112  : 			update_smoke( en );

  0007f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?update_smoke@@YGHPAUENTITY@@@Z ; update_smoke
$LN1@update_cli:

; 113  : 	}
; 114  : 	
; 115  : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?update_client@@YGXPAUENTITY@@@Z ENDP			; update_client
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_updt.c
;	COMDAT ?update_server@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv73 = -68						; size = 4
_en$ = 8						; size = 4
?update_server@@YGXPAUENTITY@@@Z PROC			; update_server, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 89   : 	if ( !update_smoke( en ) )

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?update_smoke@@YGHPAUENTITY@@@Z ; update_smoke
  00012	85 c0		 test	 eax, eax
  00014	75 4a		 jne	 SHORT $LN1@update_ser

; 90   : 	{
; 91   : 		destroy_client_server_entity_family( en );

  00016	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0001a	74 0a		 je	 SHORT $LN4@update_ser
  0001c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	89 4d bc	 mov	 DWORD PTR tv73[ebp], ecx
  00024	eb 21		 jmp	 SHORT $LN5@update_ser
$LN4@update_ser:
  00026	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_server@@YGXPAUENTITY@@@Z@4JA
  0002c	83 c2 03	 add	 edx, 3
  0002f	52		 push	 edx
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00040	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN5@update_ser:
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0004a	51		 push	 ecx
  0004b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  00051	c1 e2 02	 shl	 edx, 2
  00054	8b 45 bc	 mov	 eax, DWORD PTR tv73[ebp]
  00057	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_destroy_client_server_entity_family@@3PAY01P6GXPAUENTITY@@@ZA[edx+eax*8]
  0005e	ff d1		 call	 ecx
$LN1@update_ser:

; 92   : 	}
; 93   : }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
?update_server@@YGXPAUENTITY@@@Z ENDP			; update_server
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_updt.c
;	COMDAT ?create_new_point@@YGXPAUENTITY@@PAUVEC3D@@1W4SMOKE_LIST_TYPES@@H@Z
_TEXT	SEGMENT
_iv_noise$ = -12					; size = 4
_raw$ = -8						; size = 4
_head_pos$ = -4						; size = 4
_en$ = 8						; size = 4
_new_pos$ = 12						; size = 4
_initial_velocity$ = 16					; size = 4
_smoke_type$ = 20					; size = 4
_number_of_slots$ = 24					; size = 4
?create_new_point@@YGXPAUENTITY@@PAUVEC3D@@1W4SMOKE_LIST_TYPES@@H@Z PROC ; create_new_point, COMDAT

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 419  : 
; 420  : 	vec3d
; 421  : 		*head_pos;
; 422  : 
; 423  : 	smoke_list
; 424  : 		*raw;
; 425  : 
; 426  : 	float
; 427  : 		iv_noise;
; 428  : 	
; 429  : 	raw = (smoke_list *) get_local_entity_data( en );

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 430  : 
; 431  : 	//
; 432  : 	// set position
; 433  : 	//
; 434  : 
; 435  : 	head_pos = &(raw->position[ raw->head ]);

  00012	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00015	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00018	c1 e1 00	 shl	 ecx, 0
  0001b	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0001e	6b d1 0c	 imul	 edx, ecx, 12
  00021	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00024	03 50 70	 add	 edx, DWORD PTR [eax+112]
  00027	89 55 fc	 mov	 DWORD PTR _head_pos$[ebp], edx

; 436  : 
; 437  : 	head_pos->x = new_pos->x;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _head_pos$[ebp]
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	89 10		 mov	 DWORD PTR [eax], edx

; 438  : 	head_pos->y = new_pos->y;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _head_pos$[ebp]
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  0003a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 439  : 	head_pos->z = new_pos->z;

  00040	8b 45 fc	 mov	 eax, DWORD PTR _head_pos$[ebp]
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  00046	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00049	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 440  : 
; 441  : 	//
; 442  : 	// set intital motion vector
; 443  : 	//
; 444  : 
; 445  : 	iv_noise = smoke_list_initial_velocity_noise( smoke_type );

  0004c	6b 45 14 44	 imul	 eax, DWORD PTR _smoke_type$[ebp], 68
  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?smoke_list_database@@3PAUSMOKE_LIST_DATA@@A ; smoke_list_database
  00056	f3 0f 10 44 01
	30		 movss	 xmm0, DWORD PTR [ecx+eax+48]
  0005c	f3 0f 11 45 f4	 movss	 DWORD PTR _iv_noise$[ebp], xmm0

; 446  : 
; 447  : 	raw->motion_vector[ raw->head ].x = initial_velocity->x + ( sfrand1() * iv_noise );

  00061	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0006b	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00070	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00075	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _iv_noise$[ebp]
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00080	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00083	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00089	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  0008f	f2 0f 2a c9	 cvtsi2sd xmm1, ecx
  00093	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f10000000000000
  0009b	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0009f	8b 55 10	 mov	 edx, DWORD PTR _initial_velocity$[ebp]
  000a2	f3 0f 5a 02	 cvtss2sd xmm0, DWORD PTR [edx]
  000a6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ae	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  000b1	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000b4	c1 e1 00	 shl	 ecx, 0
  000b7	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000ba	6b d1 0c	 imul	 edx, ecx, 12
  000bd	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  000c0	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  000c3	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 448  : 	raw->motion_vector[ raw->head ].z = initial_velocity->z + ( sfrand1() * iv_noise );

  000c8	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000d2	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000d7	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000dc	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _iv_noise$[ebp]
  000e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000e7	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000ea	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000f0	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000f6	f2 0f 2a c9	 cvtsi2sd xmm1, ecx
  000fa	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f10000000000000
  00102	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00106	8b 55 10	 mov	 edx, DWORD PTR _initial_velocity$[ebp]
  00109	f3 0f 5a 42 08	 cvtss2sd xmm0, DWORD PTR [edx+8]
  0010e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00112	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00116	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00119	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0011c	c1 e1 00	 shl	 ecx, 0
  0011f	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00122	6b d1 0c	 imul	 edx, ecx, 12
  00125	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00128	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0012b	f3 0f 11 44 11
	08		 movss	 DWORD PTR [ecx+edx+8], xmm0

; 449  : 
; 450  : 	if ( smoke_list_ground_based( smoke_type ) )

  00131	6b 45 14 44	 imul	 eax, DWORD PTR _smoke_type$[ebp], 68
  00135	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?smoke_list_database@@3PAUSMOKE_LIST_DATA@@A ; smoke_list_database
  0013b	66 8b 54 01 40	 mov	 dx, WORD PTR [ecx+eax+64]
  00140	66 c1 ea 03	 shr	 dx, 3
  00144	66 83 e2 01	 and	 dx, 1
  00148	0f b7 c2	 movzx	 eax, dx
  0014b	85 c0		 test	 eax, eax
  0014d	74 65		 je	 SHORT $LN2@create_new

; 451  : 	{
; 452  : 		raw->motion_vector[ raw->head ].y = initial_velocity->y + ( frand1() * iv_noise );

  0014f	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00159	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0015e	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00163	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _iv_noise$[ebp]
  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0016e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00171	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00177	f2 0f 2a c9	 cvtsi2sd xmm1, ecx
  0017b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f00002000400080
  00183	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00187	8b 55 10	 mov	 edx, DWORD PTR _initial_velocity$[ebp]
  0018a	f3 0f 5a 42 04	 cvtss2sd xmm0, DWORD PTR [edx+4]
  0018f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00193	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00197	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  0019a	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0019d	c1 e1 00	 shl	 ecx, 0
  001a0	c1 f9 10	 sar	 ecx, 16			; 00000010H
  001a3	6b d1 0c	 imul	 edx, ecx, 12
  001a6	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  001a9	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  001ac	f3 0f 11 44 11
	04		 movss	 DWORD PTR [ecx+edx+4], xmm0

; 453  : 	}
; 454  : 	else

  001b2	eb 69		 jmp	 SHORT $LN3@create_new
$LN2@create_new:

; 455  : 	{
; 456  : 		raw->motion_vector[ raw->head ].y = initial_velocity->y + ( sfrand1() * iv_noise );

  001b4	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  001be	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  001c3	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  001c8	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _iv_noise$[ebp]
  001cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  001d3	c1 f9 10	 sar	 ecx, 16			; 00000010H
  001d6	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  001dc	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  001e2	f2 0f 2a c9	 cvtsi2sd xmm1, ecx
  001e6	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f10000000000000
  001ee	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001f2	8b 55 10	 mov	 edx, DWORD PTR _initial_velocity$[ebp]
  001f5	f3 0f 5a 42 04	 cvtss2sd xmm0, DWORD PTR [edx+4]
  001fa	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001fe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00202	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00205	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00208	c1 e1 00	 shl	 ecx, 0
  0020b	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0020e	6b d1 0c	 imul	 edx, ecx, 12
  00211	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00214	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00217	f3 0f 11 44 11
	04		 movss	 DWORD PTR [ecx+edx+4], xmm0
$LN3@create_new:

; 457  : 	}
; 458  : 
; 459  : 	//
; 460  : 	// give random rotation value
; 461  : 	//
; 462  : 
; 463  : 	raw->start_rotation[ raw->head ] = sfrand1() * PI;

  0021d	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00227	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0022c	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00231	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00237	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0023a	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00240	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00246	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0024a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00252	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb60000000
  0025a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025e	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  00261	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00264	c1 e0 00	 shl	 eax, 0
  00267	c1 f8 10	 sar	 eax, 16			; 00000010H
  0026a	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  0026d	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00270	f3 0f 11 04 82	 movss	 DWORD PTR [edx+eax*4], xmm0

; 464  : 
; 465  : 	#if DEBUG_MODULE
; 466  : 
; 467  : 	debug_log( "SMOKE LIST : Creating Point at %f, %f, %f ", head_pos->x, head_pos->y, head_pos->z );
; 468  : 
; 469  : 	#endif
; 470  : 
; 471  : 	//
; 472  : 	// update
; 473  : 	//
; 474  : 
; 475  : 	raw->valid[ raw->head ] = TRUE;

  00275	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00278	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0027b	c1 e1 00	 shl	 ecx, 0
  0027e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00281	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  00284	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00287	c6 04 08 01	 mov	 BYTE PTR [eax+ecx], 1

; 476  : 
; 477  : 	raw->alive_count ++;

  0028b	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  0028e	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00291	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00297	83 c1 01	 add	 ecx, 1
  0029a	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  002a0	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  002a3	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  002a6	25 00 80 ff ff	 and	 eax, -32768		; ffff8000H
  002ab	0b c1		 or	 eax, ecx
  002ad	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  002b0	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 478  : 
; 479  : 	raw->head ++;

  002b3	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  002b6	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  002b9	c1 e1 00	 shl	 ecx, 0
  002bc	c1 f9 10	 sar	 ecx, 16			; 00000010H
  002bf	83 c1 01	 add	 ecx, 1
  002c2	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002c8	c1 e1 10	 shl	 ecx, 16			; 00000010H
  002cb	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  002ce	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  002d1	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  002d6	0b c1		 or	 eax, ecx
  002d8	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  002db	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 480  : 	
; 481  : 	if ( raw->head >= number_of_slots )

  002de	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  002e1	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  002e4	c1 e1 00	 shl	 ecx, 0
  002e7	c1 f9 10	 sar	 ecx, 16			; 00000010H
  002ea	3b 4d 18	 cmp	 ecx, DWORD PTR _number_of_slots$[ebp]
  002ed	7c 12		 jl	 SHORT $LN4@create_new

; 482  : 	{
; 483  : 		raw->head = 0;

  002ef	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  002f2	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  002f5	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002fb	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  002fe	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
$LN4@create_new:

; 484  : 	}
; 485  : }

  00301	5f		 pop	 edi
  00302	5e		 pop	 esi
  00303	5b		 pop	 ebx
  00304	8b e5		 mov	 esp, ebp
  00306	5d		 pop	 ebp
  00307	c2 14 00	 ret	 20			; 00000014H
?create_new_point@@YGXPAUENTITY@@PAUVEC3D@@1W4SMOKE_LIST_TYPES@@H@Z ENDP ; create_new_point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_updt.c
;	COMDAT ?update_smoke@@YGHPAUENTITY@@@Z
_TEXT	SEGMENT
tv232 = -168						; size = 4
tv459 = -164						; size = 4
tv224 = -164						; size = 4
_distance$ = -96					; size = 4
_t$ = -92						; size = 4
_smoke_type$ = -88					; size = 4
_number_of_frames$ = -84				; size = 4
_number_of_slots$ = -80					; size = 4
_last_tail$ = -76					; size = 4
_last_index$ = -72					; size = 4
_create_count$ = -68					; size = 4
_create_loop$ = -64					; size = 4
_initial_velocity$ = -60				; size = 12
_d$ = -48						; size = 12
_interpolated_pos$ = -36				; size = 12
_new_pos$ = -24						; size = 12
_last_pos$ = -12					; size = 4
_tail_pos$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?update_smoke@@YGHPAUENTITY@@@Z PROC			; update_smoke, COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 123  : 	smoke_list
; 124  : 		*raw;
; 125  : 
; 126  : 	vec3d
; 127  : 		*tail_pos,
; 128  : 		*last_pos,
; 129  : 		new_pos,
; 130  : 		interpolated_pos,
; 131  : 		d,
; 132  : 		initial_velocity;
; 133  : 
; 134  : 	int
; 135  : 		create_loop,
; 136  : 		create_count,
; 137  : 		last_index,
; 138  : 		last_tail,
; 139  : 		number_of_slots,
; 140  : 		number_of_frames;
; 141  : 
; 142  : 	smoke_list_types
; 143  : 		smoke_type;
; 144  : 
; 145  : 	float
; 146  : 		t,
; 147  : 		distance;
; 148  : 
; 149  : 	#if DEBUG_MODULE
; 150  : 
; 151  : 	debug_log ("SL_UPDT: update smoke");
; 152  : 
; 153  : 	#endif
; 154  : 
; 155  : 	raw = (smoke_list *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 156  : 
; 157  : 	number_of_slots = raw->smoke_lifetime / raw->frequency;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0001b	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00020	f3 0f 5e 41 2c	 divss	 xmm0, DWORD PTR [ecx+44]
  00025	f3 0f 2c d0	 cvttss2si edx, xmm0
  00029	89 55 b0	 mov	 DWORD PTR _number_of_slots$[ebp], edx

; 158  : 
; 159  : 	smoke_type = raw->smoke_type;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0002f	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00032	89 4d a8	 mov	 DWORD PTR _smoke_type$[ebp], ecx

; 160  : 
; 161  : 	//
; 162  : 	// Check if the entity should stop producing more smoke
; 163  : 	//
; 164  : 
; 165  : 	if ( raw->generator_lifetime <= 0.0 )

  00035	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00038	f3 0f 5a 40 30	 cvtss2sd xmm0, DWORD PTR [eax+48]
  0003d	0f 57 c9	 xorps	 xmm1, xmm1
  00040	66 0f 2f c8	 comisd	 xmm1, xmm0
  00044	72 4e		 jb	 SHORT $LN14@update_smo

; 166  : 	{
; 167  : 		if ( raw->alive_count == 0 )

  00046	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00049	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0004c	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00052	75 3e		 jne	 SHORT $LN18@update_smo

; 168  : 		{
; 169  : 			if ( raw->infinite_generator )

  00054	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00057	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0005a	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  0005d	83 e1 01	 and	 ecx, 1
  00060	74 29		 je	 SHORT $LN17@update_smo

; 170  : 			{
; 171  : 				//
; 172  : 				// infinite generator is not generating, and has no active points - so temporarily remove it from the update list
; 173  : 				//
; 174  : 
; 175  : 				if (raw->eff.special_effect_link.parent)

  00062	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00065	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00069	74 17		 je	 SHORT $LN19@update_smo

; 176  : 				{
; 177  : 					delete_local_entity_from_parents_child_list (en, LIST_TYPE_UPDATE);

  0006b	6a 29		 push	 41			; 00000029H
  0006d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?delete_local_entity_from_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@@Z ; delete_local_entity_from_parents_child_list

; 178  : 
; 179  : 					return TRUE;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	e9 92 05 00 00	 jmp	 $LN1@update_smo

; 180  : 				}
; 181  : 				else

  00080	eb 07		 jmp	 SHORT $LN20@update_smo
$LN19@update_smo:

; 182  : 				{
; 183  : 					return FALSE;

  00082	33 c0		 xor	 eax, eax
  00084	e9 89 05 00 00	 jmp	 $LN1@update_smo
$LN20@update_smo:

; 184  : 				}
; 185  : 			}
; 186  : 			else

  00089	eb 07		 jmp	 SHORT $LN18@update_smo
$LN17@update_smo:

; 187  : 			{
; 188  : 				//
; 189  : 				// The entity is no longer producing smoke, and all the smoke points are inactive - so kill the entity
; 190  : 				//
; 191  : 
; 192  : 				#if DEBUG_MODULE
; 193  : 
; 194  : 				debug_log ("SMOKE LIST: DESTROYING SMOKE ENTITY");
; 195  : 
; 196  : 				#endif
; 197  : 
; 198  : 				return FALSE;

  0008b	33 c0		 xor	 eax, eax
  0008d	e9 80 05 00 00	 jmp	 $LN1@update_smo
$LN18@update_smo:

; 199  : 			}
; 200  : 		}
; 201  : 	}
; 202  : 	else

  00092	eb 26		 jmp	 SHORT $LN21@update_smo
$LN14@update_smo:

; 203  : 	{
; 204  : 		if ( !(raw->infinite_generator) )

  00094	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00097	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0009a	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  0009d	83 e1 01	 and	 ecx, 1
  000a0	75 18		 jne	 SHORT $LN21@update_smo

; 205  : 		{
; 206  : 			raw->generator_lifetime -= get_delta_time ();

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000a5	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  000aa	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  000b5	f3 0f 11 41 30	 movss	 DWORD PTR [ecx+48], xmm0
$LN21@update_smo:

; 207  : 		}
; 208  : 	}
; 209  : 
; 210  : 	//
; 211  : 	// Create / Destroy individual smoke points
; 212  : 	//
; 213  : 
; 214  : 	raw->smoke_sleep -= get_delta_time ();

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000bd	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  000c2	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  000cd	f3 0f 11 41 34	 movss	 DWORD PTR [ecx+52], xmm0

; 215  : 
; 216  : 	create_count = 0;

  000d2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _create_count$[ebp], 0
$LN2@update_smo:

; 217  : 
; 218  : 	while ( raw->smoke_sleep < 0.0 )

  000d9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000dc	f3 0f 5a 40 34	 cvtss2sd xmm0, DWORD PTR [eax+52]
  000e1	0f 57 c9	 xorps	 xmm1, xmm1
  000e4	66 0f 2f c8	 comisd	 xmm1, xmm0
  000e8	0f 86 93 01 00
	00		 jbe	 $LN3@update_smo

; 219  : 	{
; 220  : 		//
; 221  : 		// update timer
; 222  : 		//
; 223  : 
; 224  : 		raw->smoke_sleep += raw->frequency;

  000ee	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000f1	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  000f4	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  000f9	f3 0f 58 41 2c	 addss	 xmm0, DWORD PTR [ecx+44]
  000fe	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00101	f3 0f 11 42 34	 movss	 DWORD PTR [edx+52], xmm0

; 225  : 
; 226  : 		create_count ++;

  00106	8b 45 bc	 mov	 eax, DWORD PTR _create_count$[ebp]
  00109	83 c0 01	 add	 eax, 1
  0010c	89 45 bc	 mov	 DWORD PTR _create_count$[ebp], eax

; 227  : 
; 228  : 		//
; 229  : 		// move tail regardless of whether there are any points alive ( for the purpose of inf. generators )
; 230  : 		//
; 231  : 		
; 232  : 		last_tail = raw->tail;

  0010f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00112	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00115	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00118	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0011b	89 4d b4	 mov	 DWORD PTR _last_tail$[ebp], ecx

; 233  : 
; 234  : 		raw->tail ++;

  0011e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00121	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00124	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00127	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0012a	83 c1 01	 add	 ecx, 1
  0012d	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00133	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00136	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00139	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  0013e	0b c1		 or	 eax, ecx
  00140	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00143	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 235  : 
; 236  : 		if ( raw->tail >= number_of_slots )

  00146	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00149	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0014c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0014f	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00152	3b 4d b0	 cmp	 ecx, DWORD PTR _number_of_slots$[ebp]
  00155	7c 12		 jl	 SHORT $LN22@update_smo

; 237  : 		{
; 238  : 			raw->tail = 0;

  00157	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0015a	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0015d	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  00163	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00166	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN22@update_smo:

; 239  : 		}
; 240  : 
; 241  : 		//
; 242  : 		// Destroy smoke at the tail end
; 243  : 		//
; 244  : 
; 245  : 		if ( raw->alive_count > 0 )

  00169	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0016c	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0016f	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00175	0f 86 01 01 00
	00		 jbe	 $LN24@update_smo

; 246  : 		{
; 247  : 			if ( raw->valid[ last_tail ] )

  0017b	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0017e	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00181	8b 55 b4	 mov	 edx, DWORD PTR _last_tail$[ebp]
  00184	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  00188	85 c0		 test	 eax, eax
  0018a	0f 84 ec 00 00
	00		 je	 $LN24@update_smo

; 248  : 			{
; 249  : 				last_pos = &(raw->position[ last_tail ]);

  00190	6b 45 b4 0c	 imul	 eax, DWORD PTR _last_tail$[ebp], 12
  00194	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00197	03 41 70	 add	 eax, DWORD PTR [ecx+112]
  0019a	89 45 f4	 mov	 DWORD PTR _last_pos$[ebp], eax

; 250  : 	
; 251  : 				if ( ( smoke_list_draw_mode( smoke_type ) == SMOKE_DRAW_TYPE_TRAILS ) && ( raw->valid[ raw->tail ] ) )

  0019d	6b 45 a8 44	 imul	 eax, DWORD PTR _smoke_type$[ebp], 68
  001a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?smoke_list_database@@3PAUSMOKE_LIST_DATA@@A ; smoke_list_database
  001a7	66 8b 54 01 40	 mov	 dx, WORD PTR [ecx+eax+64]
  001ac	66 d1 ea	 shr	 dx, 1
  001af	66 83 e2 01	 and	 dx, 1
  001b3	0f b7 c2	 movzx	 eax, dx
  001b6	83 f8 01	 cmp	 eax, 1
  001b9	75 5d		 jne	 SHORT $LN25@update_smo
  001bb	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001be	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001c1	c1 e1 10	 shl	 ecx, 16			; 00000010H
  001c4	c1 f9 10	 sar	 ecx, 16			; 00000010H
  001c7	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  001ca	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  001cd	0f b6 0c 08	 movzx	 ecx, BYTE PTR [eax+ecx]
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 43		 je	 SHORT $LN25@update_smo

; 252  : 				{
; 253  : 					//
; 254  : 					// adjust texture distance
; 255  : 					//
; 256  : 
; 257  : 					tail_pos = &(raw->position[ raw->tail ]);

  001d5	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001d8	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001db	c1 e1 10	 shl	 ecx, 16			; 00000010H
  001de	c1 f9 10	 sar	 ecx, 16			; 00000010H
  001e1	6b d1 0c	 imul	 edx, ecx, 12
  001e4	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001e7	03 50 70	 add	 edx, DWORD PTR [eax+112]
  001ea	89 55 f8	 mov	 DWORD PTR _tail_pos$[ebp], edx

; 258  : 					
; 259  : 					raw->texture_distance += get_3d_range( tail_pos, last_pos );

  001ed	8b 45 f4	 mov	 eax, DWORD PTR _last_pos$[ebp]
  001f0	50		 push	 eax
  001f1	8b 4d f8	 mov	 ecx, DWORD PTR _tail_pos$[ebp]
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  001fa	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR tv459[ebp]
  00200	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00203	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR tv459[ebp]
  0020b	f3 0f 58 42 3c	 addss	 xmm0, DWORD PTR [edx+60]
  00210	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00213	f3 0f 11 40 3c	 movss	 DWORD PTR [eax+60], xmm0
$LN25@update_smo:

; 260  : 				}
; 261  : 	
; 262  : 				last_pos->x = -1.0;

  00218	8b 45 f4	 mov	 eax, DWORD PTR _last_pos$[ebp]
  0021b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00223	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 263  : 				last_pos->y = -1.0;

  00227	8b 45 f4	 mov	 eax, DWORD PTR _last_pos$[ebp]
  0022a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00232	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 264  : 				last_pos->z = -1.0;

  00237	8b 45 f4	 mov	 eax, DWORD PTR _last_pos$[ebp]
  0023a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00242	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 265  : 		
; 266  : 				raw->valid[ last_tail ] = FALSE;

  00247	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0024a	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0024d	8b 55 b4	 mov	 edx, DWORD PTR _last_tail$[ebp]
  00250	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0

; 267  : 
; 268  : 				raw->alive_count --;

  00254	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00257	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0025a	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00260	83 e9 01	 sub	 ecx, 1
  00263	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00269	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0026c	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  0026f	25 00 80 ff ff	 and	 eax, -32768		; ffff8000H
  00274	0b c1		 or	 eax, ecx
  00276	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00279	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN24@update_smo:

; 269  : 			}
; 270  : 		}	
; 271  : 	}

  0027c	e9 58 fe ff ff	 jmp	 $LN2@update_smo
$LN3@update_smo:

; 272  : 
; 273  : 	if ( ( create_count > 0 ) && ( raw->generator_lifetime > 0.0 ) )

  00281	83 7d bc 00	 cmp	 DWORD PTR _create_count$[ebp], 0
  00285	0f 8e 59 02 00
	00		 jle	 $LN26@update_smo
  0028b	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0028e	f3 0f 5a 40 30	 cvtss2sd xmm0, DWORD PTR [eax+48]
  00293	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0029b	0f 86 43 02 00
	00		 jbe	 $LN26@update_smo

; 274  : 	{
; 275  : 
; 276  : 		//
; 277  : 		// create more smoke ( if still generating )
; 278  : 		//
; 279  : 
; 280  : 		get_new_smoke_position (en, &new_pos);

  002a1	8d 45 e8	 lea	 eax, DWORD PTR _new_pos$[ebp]
  002a4	50		 push	 eax
  002a5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002a8	51		 push	 ecx
  002a9	e8 00 00 00 00	 call	 ?get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z ; get_new_smoke_position

; 281  : 	
; 282  : 		get_local_entity_vec3d( en, VEC3D_TYPE_INITIAL_VELOCITY, &initial_velocity );

  002ae	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  002b2	74 0d		 je	 SHORT $LN38@update_smo
  002b4	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b9	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv224[ebp], ecx
  002bf	eb 27		 jmp	 SHORT $LN39@update_smo
$LN38@update_smo:
  002c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_smoke@@YGHPAUENTITY@@@Z@4JA
  002c7	81 c2 a0 00 00
	00		 add	 edx, 160		; 000000a0H
  002cd	52		 push	 edx
  002ce	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  002d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002d8	50		 push	 eax
  002d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002de	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv224[ebp], 0
$LN39@update_smo:
  002e8	b9 01 00 00 00	 mov	 ecx, 1
  002ed	85 c9		 test	 ecx, ecx
  002ef	74 0c		 je	 SHORT $LN40@update_smo
  002f1	c7 85 58 ff ff
	ff 05 00 00 00	 mov	 DWORD PTR tv232[ebp], 5
  002fb	eb 27		 jmp	 SHORT $LN41@update_smo
$LN40@update_smo:
  002fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_smoke@@YGHPAUENTITY@@@Z@4JA
  00303	81 c2 a0 00 00
	00		 add	 edx, 160		; 000000a0H
  00309	52		 push	 edx
  0030a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  0030f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00314	50		 push	 eax
  00315	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0031a	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv232[ebp], 0
$LN41@update_smo:
  00324	8d 4d c4	 lea	 ecx, DWORD PTR _initial_velocity$[ebp]
  00327	51		 push	 ecx
  00328	6a 05		 push	 5
  0032a	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0032d	52		 push	 edx
  0032e	6b 85 5c ff ff
	ff 60		 imul	 eax, DWORD PTR tv224[ebp], 96
  00335	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv232[ebp]
  0033b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00342	ff d2		 call	 edx

; 283  : 
; 284  : 		#if DEBUG_MODULE
; 285  : 
; 286  : 		debug_log("SMOKE LIST : creating %d new points", create_count);
; 287  : 
; 288  : 		#endif
; 289  : 
; 290  : 		if ( smoke_list_draw_mode( smoke_type ) == SMOKE_DRAW_TYPE_TRAILS )

  00344	6b 45 a8 44	 imul	 eax, DWORD PTR _smoke_type$[ebp], 68
  00348	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?smoke_list_database@@3PAUSMOKE_LIST_DATA@@A ; smoke_list_database
  0034e	66 8b 54 01 40	 mov	 dx, WORD PTR [ecx+eax+64]
  00353	66 d1 ea	 shr	 dx, 1
  00356	66 83 e2 01	 and	 dx, 1
  0035a	0f b7 c2	 movzx	 eax, dx
  0035d	83 f8 01	 cmp	 eax, 1
  00360	0f 85 47 01 00
	00		 jne	 $LN28@update_smo

; 291  : 		{
; 292  : 			//
; 293  : 			// smoke trails
; 294  : 			//
; 295  : 
; 296  : 			//
; 297  : 			// required for interpolating points
; 298  : 			//
; 299  : 
; 300  : 			last_index = raw->head - 1;

  00366	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00369	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0036c	c1 e1 00	 shl	 ecx, 0
  0036f	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00372	83 e9 01	 sub	 ecx, 1
  00375	89 4d b8	 mov	 DWORD PTR _last_index$[ebp], ecx

; 301  : 					
; 302  : 			if ( last_index < 0 )

  00378	79 09		 jns	 SHORT $LN30@update_smo

; 303  : 			{
; 304  : 				last_index = number_of_slots - 1;

  0037a	8b 45 b0	 mov	 eax, DWORD PTR _number_of_slots$[ebp]
  0037d	83 e8 01	 sub	 eax, 1
  00380	89 45 b8	 mov	 DWORD PTR _last_index$[ebp], eax
$LN30@update_smo:

; 305  : 			}
; 306  : 	
; 307  : 			last_pos = &(raw->position[ last_index ]);

  00383	6b 45 b8 0c	 imul	 eax, DWORD PTR _last_index$[ebp], 12
  00387	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0038a	03 41 70	 add	 eax, DWORD PTR [ecx+112]
  0038d	89 45 f4	 mov	 DWORD PTR _last_pos$[ebp], eax

; 308  : 
; 309  : 			d.x = new_pos.x - last_pos->x;

  00390	8b 45 f4	 mov	 eax, DWORD PTR _last_pos$[ebp]
  00393	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _new_pos$[ebp]
  00398	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0039c	f3 0f 11 45 d0	 movss	 DWORD PTR _d$[ebp], xmm0

; 310  : 			d.y = new_pos.y - last_pos->y;

  003a1	8b 45 f4	 mov	 eax, DWORD PTR _last_pos$[ebp]
  003a4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _new_pos$[ebp+4]
  003a9	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  003ae	f3 0f 11 45 d4	 movss	 DWORD PTR _d$[ebp+4], xmm0

; 311  : 			d.z = new_pos.z - last_pos->z;

  003b3	8b 45 f4	 mov	 eax, DWORD PTR _last_pos$[ebp]
  003b6	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _new_pos$[ebp+8]
  003bb	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  003c0	f3 0f 11 45 d8	 movss	 DWORD PTR _d$[ebp+8], xmm0

; 312  : 
; 313  : 			distance = get_3d_vector_magnitude( &d );

  003c5	8d 45 d0	 lea	 eax, DWORD PTR _d$[ebp]
  003c8	50		 push	 eax
  003c9	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  003ce	d9 5d a0	 fstp	 DWORD PTR _distance$[ebp]

; 314  : 					
; 315  : 			if ( distance > 0.0 )

  003d1	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _distance$[ebp]
  003d6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  003de	0f 86 c7 00 00
	00		 jbe	 $LN31@update_smo

; 316  : 			{
; 317  : 	
; 318  : 				if ( ( create_count > 1 ) && ( raw->valid[ last_index ] ) )

  003e4	83 7d bc 01	 cmp	 DWORD PTR _create_count$[ebp], 1
  003e8	0f 8e a4 00 00
	00		 jle	 $LN5@update_smo
  003ee	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  003f1	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  003f4	8b 55 b8	 mov	 edx, DWORD PTR _last_index$[ebp]
  003f7	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  003fb	85 c0		 test	 eax, eax
  003fd	0f 84 8f 00 00
	00		 je	 $LN5@update_smo

; 319  : 				{
; 320  : 	
; 321  : 					//
; 322  : 					// create "create_count" - 1 number of interpolated points ( requires previous point to be active )
; 323  : 					//
; 324  : 		
; 325  : 					for ( create_loop = 1 ; create_loop < create_count ; create_loop ++ )

  00403	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR _create_loop$[ebp], 1
  0040a	eb 09		 jmp	 SHORT $LN6@update_smo
$LN4@update_smo:
  0040c	8b 45 c0	 mov	 eax, DWORD PTR _create_loop$[ebp]
  0040f	83 c0 01	 add	 eax, 1
  00412	89 45 c0	 mov	 DWORD PTR _create_loop$[ebp], eax
$LN6@update_smo:
  00415	8b 45 c0	 mov	 eax, DWORD PTR _create_loop$[ebp]
  00418	3b 45 bc	 cmp	 eax, DWORD PTR _create_count$[ebp]
  0041b	7d 75		 jge	 SHORT $LN5@update_smo

; 326  : 					{
; 327  : 		
; 328  : 						t = (float)create_loop / (float)create_count;

  0041d	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _create_loop$[ebp]
  00422	f3 0f 2a 4d bc	 cvtsi2ss xmm1, DWORD PTR _create_count$[ebp]
  00427	f3 0f 5e c1	 divss	 xmm0, xmm1
  0042b	f3 0f 11 45 a4	 movss	 DWORD PTR _t$[ebp], xmm0

; 329  : 		
; 330  : 						interpolated_pos.x = last_pos->x + ( d.x * t );

  00430	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _d$[ebp]
  00435	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0043a	8b 45 f4	 mov	 eax, DWORD PTR _last_pos$[ebp]
  0043d	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00441	f3 0f 11 45 dc	 movss	 DWORD PTR _interpolated_pos$[ebp], xmm0

; 331  : 						interpolated_pos.y = last_pos->y + ( d.y * t );

  00446	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _d$[ebp+4]
  0044b	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00450	8b 45 f4	 mov	 eax, DWORD PTR _last_pos$[ebp]
  00453	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00458	f3 0f 11 45 e0	 movss	 DWORD PTR _interpolated_pos$[ebp+4], xmm0

; 332  : 						interpolated_pos.z = last_pos->z + ( d.z * t );

  0045d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _d$[ebp+8]
  00462	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00467	8b 45 f4	 mov	 eax, DWORD PTR _last_pos$[ebp]
  0046a	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  0046f	f3 0f 11 45 e4	 movss	 DWORD PTR _interpolated_pos$[ebp+8], xmm0

; 333  : 		
; 334  : 						create_new_point( en, &interpolated_pos, &initial_velocity, smoke_type, number_of_slots );

  00474	8b 45 b0	 mov	 eax, DWORD PTR _number_of_slots$[ebp]
  00477	50		 push	 eax
  00478	8b 4d a8	 mov	 ecx, DWORD PTR _smoke_type$[ebp]
  0047b	51		 push	 ecx
  0047c	8d 55 c4	 lea	 edx, DWORD PTR _initial_velocity$[ebp]
  0047f	52		 push	 edx
  00480	8d 45 dc	 lea	 eax, DWORD PTR _interpolated_pos$[ebp]
  00483	50		 push	 eax
  00484	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00487	51		 push	 ecx
  00488	e8 00 00 00 00	 call	 ?create_new_point@@YGXPAUENTITY@@PAUVEC3D@@1W4SMOKE_LIST_TYPES@@H@Z ; create_new_point

; 335  : 			
; 336  : 					}

  0048d	e9 7a ff ff ff	 jmp	 $LN4@update_smo
$LN5@update_smo:

; 337  : 				}
; 338  : 	
; 339  : 				//
; 340  : 				// create new point at current position
; 341  : 				//
; 342  : 	
; 343  : 				create_new_point( en, &new_pos, &initial_velocity, smoke_type, number_of_slots );

  00492	8b 45 b0	 mov	 eax, DWORD PTR _number_of_slots$[ebp]
  00495	50		 push	 eax
  00496	8b 4d a8	 mov	 ecx, DWORD PTR _smoke_type$[ebp]
  00499	51		 push	 ecx
  0049a	8d 55 c4	 lea	 edx, DWORD PTR _initial_velocity$[ebp]
  0049d	52		 push	 edx
  0049e	8d 45 e8	 lea	 eax, DWORD PTR _new_pos$[ebp]
  004a1	50		 push	 eax
  004a2	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  004a5	51		 push	 ecx
  004a6	e8 00 00 00 00	 call	 ?create_new_point@@YGXPAUENTITY@@PAUVEC3D@@1W4SMOKE_LIST_TYPES@@H@Z ; create_new_point
$LN31@update_smo:

; 344  : 			}
; 345  : 		}
; 346  : 		else

  004ab	eb 35		 jmp	 SHORT $LN8@update_smo
$LN28@update_smo:

; 347  : 		{
; 348  : 			//
; 349  : 			// smoke puffs
; 350  : 			//
; 351  : 
; 352  : 			for ( create_loop = 0 ; create_loop < create_count ; create_loop ++ )

  004ad	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _create_loop$[ebp], 0
  004b4	eb 09		 jmp	 SHORT $LN9@update_smo
$LN7@update_smo:
  004b6	8b 45 c0	 mov	 eax, DWORD PTR _create_loop$[ebp]
  004b9	83 c0 01	 add	 eax, 1
  004bc	89 45 c0	 mov	 DWORD PTR _create_loop$[ebp], eax
$LN9@update_smo:
  004bf	8b 45 c0	 mov	 eax, DWORD PTR _create_loop$[ebp]
  004c2	3b 45 bc	 cmp	 eax, DWORD PTR _create_count$[ebp]
  004c5	7d 1b		 jge	 SHORT $LN8@update_smo

; 353  : 			{
; 354  : 				//
; 355  : 				// create new point at current position
; 356  : 				//
; 357  : 
; 358  : 				create_new_point( en, &new_pos, &initial_velocity, smoke_type, number_of_slots );

  004c7	8b 45 b0	 mov	 eax, DWORD PTR _number_of_slots$[ebp]
  004ca	50		 push	 eax
  004cb	8b 4d a8	 mov	 ecx, DWORD PTR _smoke_type$[ebp]
  004ce	51		 push	 ecx
  004cf	8d 55 c4	 lea	 edx, DWORD PTR _initial_velocity$[ebp]
  004d2	52		 push	 edx
  004d3	8d 45 e8	 lea	 eax, DWORD PTR _new_pos$[ebp]
  004d6	50		 push	 eax
  004d7	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  004da	51		 push	 ecx
  004db	e8 00 00 00 00	 call	 ?create_new_point@@YGXPAUENTITY@@PAUVEC3D@@1W4SMOKE_LIST_TYPES@@H@Z ; create_new_point

; 359  : 			}

  004e0	eb d4		 jmp	 SHORT $LN7@update_smo
$LN8@update_smo:

; 360  : 		}

  004e2	eb 6f		 jmp	 SHORT $LN11@update_smo
$LN26@update_smo:

; 361  : 	}
; 362  : 	else if ( create_count > 0 )

  004e4	83 7d bc 00	 cmp	 DWORD PTR _create_count$[ebp], 0
  004e8	7e 69		 jle	 SHORT $LN11@update_smo

; 363  : 	{
; 364  : 		//
; 365  : 		// smoke generator is not generating, but tail is moving - so move head as well
; 366  : 		// ( Currently a result of infinite generator being turned off )
; 367  : 		//
; 368  : 
; 369  : 		raw->head += create_count;

  004ea	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  004ed	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  004f0	c1 e1 00	 shl	 ecx, 0
  004f3	c1 f9 10	 sar	 ecx, 16			; 00000010H
  004f6	03 4d bc	 add	 ecx, DWORD PTR _create_count$[ebp]
  004f9	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  004ff	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00502	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00505	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00508	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0050d	0b c1		 or	 eax, ecx
  0050f	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00512	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN10@update_smo:

; 370  : 	
; 371  : 		while ( raw->head >= number_of_slots )

  00515	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00518	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0051b	c1 e1 00	 shl	 ecx, 0
  0051e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00521	3b 4d b0	 cmp	 ecx, DWORD PTR _number_of_slots$[ebp]
  00524	7c 2d		 jl	 SHORT $LN11@update_smo

; 372  : 		{
; 373  : 			raw->head -= number_of_slots;

  00526	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00529	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0052c	c1 e1 00	 shl	 ecx, 0
  0052f	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00532	2b 4d b0	 sub	 ecx, DWORD PTR _number_of_slots$[ebp]
  00535	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0053b	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0053e	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00541	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00544	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00549	0b c1		 or	 eax, ecx
  0054b	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0054e	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 374  : 		}

  00551	eb c2		 jmp	 SHORT $LN10@update_smo
$LN11@update_smo:

; 375  : 	}
; 376  : 
; 377  : 	//
; 378  : 	// texture animation
; 379  : 	//
; 380  : 
; 381  : 	//-- Werewolf: Sanity check to fix a crash 4 Apr 2003
; 382  : 	// Sometimes, smoke_list_texture (smoke_type) is undefined, because smoke_list_database[smoke_type] is invalid
; 383  : 	// I suspect that a smoke_type value of 21 is too high, or that the smoke_list_database becomes corrupted sometimes.
; 384  : 	// What we would need to do are lots of sanity checks instead of blindly accessing arrays.
; 385  :     number_of_frames = 0;

  00553	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _number_of_frames$[ebp], 0

; 386  :     if (smoke_list_database[smoke_type].texture>=0)

  0055a	6b 45 a8 44	 imul	 eax, DWORD PTR _smoke_type$[ebp], 68
  0055e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?smoke_list_database@@3PAUSMOKE_LIST_DATA@@A ; smoke_list_database
  00564	83 7c 01 34 00	 cmp	 DWORD PTR [ecx+eax+52], 0
  00569	7c 17		 jl	 SHORT $LN34@update_smo

; 387  : 	//-- Werewolf
; 388  : 	number_of_frames = get_texture_animation_number_of_frames (smoke_list_texture (smoke_type));

  0056b	6b 45 a8 44	 imul	 eax, DWORD PTR _smoke_type$[ebp], 68
  0056f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?smoke_list_database@@3PAUSMOKE_LIST_DATA@@A ; smoke_list_database
  00575	8b 54 01 34	 mov	 edx, DWORD PTR [ecx+eax+52]
  00579	52		 push	 edx
  0057a	e8 00 00 00 00	 call	 ?get_texture_animation_number_of_frames@@YGHW4TEXTURE_ANIMATION_INDICES@@@Z ; get_texture_animation_number_of_frames
  0057f	89 45 ac	 mov	 DWORD PTR _number_of_frames$[ebp], eax
$LN34@update_smo:

; 389  : 
; 390  : 	if ((number_of_frames > 1) && (smoke_list_animation_rate (smoke_type) > 0.0))

  00582	83 7d ac 01	 cmp	 DWORD PTR _number_of_frames$[ebp], 1
  00586	7e 71		 jle	 SHORT $LN35@update_smo
  00588	6b 45 a8 44	 imul	 eax, DWORD PTR _smoke_type$[ebp], 68
  0058c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?smoke_list_database@@3PAUSMOKE_LIST_DATA@@A ; smoke_list_database
  00592	f3 0f 5a 44 01
	3c		 cvtss2sd xmm0, DWORD PTR [ecx+eax+60]
  00598	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  005a0	76 57		 jbe	 SHORT $LN35@update_smo

; 391  : 	{
; 392  : 		raw->current_frame += (get_delta_time () / smoke_list_animation_rate (smoke_type));

  005a2	6b 45 a8 44	 imul	 eax, DWORD PTR _smoke_type$[ebp], 68
  005a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?smoke_list_database@@3PAUSMOKE_LIST_DATA@@A ; smoke_list_database
  005ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  005b4	f3 0f 5e 44 01
	3c		 divss	 xmm0, DWORD PTR [ecx+eax+60]
  005ba	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  005bd	f3 0f 58 42 78	 addss	 xmm0, DWORD PTR [edx+120]
  005c2	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  005c5	f3 0f 11 40 78	 movss	 DWORD PTR [eax+120], xmm0
$LN12@update_smo:

; 393  : 
; 394  : 		while (raw->current_frame >= number_of_frames)

  005ca	f3 0f 2a 45 ac	 cvtsi2ss xmm0, DWORD PTR _number_of_frames$[ebp]
  005cf	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  005d2	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  005d7	0f 2f c8	 comiss	 xmm1, xmm0
  005da	72 1b		 jb	 SHORT $LN13@update_smo

; 395  : 		{
; 396  : 			raw->current_frame -= number_of_frames;

  005dc	f3 0f 2a 45 ac	 cvtsi2ss xmm0, DWORD PTR _number_of_frames$[ebp]
  005e1	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  005e4	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  005e9	f3 0f 5c c8	 subss	 xmm1, xmm0
  005ed	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  005f0	f3 0f 11 49 78	 movss	 DWORD PTR [ecx+120], xmm1

; 397  : 		}

  005f5	eb d3		 jmp	 SHORT $LN12@update_smo
$LN13@update_smo:

; 398  : 	}
; 399  : 	else

  005f7	eb 0b		 jmp	 SHORT $LN36@update_smo
$LN35@update_smo:

; 400  : 	{
; 401  : 		raw->current_frame = 0;

  005f9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  005fc	0f 57 c0	 xorps	 xmm0, xmm0
  005ff	f3 0f 11 40 78	 movss	 DWORD PTR [eax+120], xmm0
$LN36@update_smo:

; 402  : 	}
; 403  : 
; 404  : 	//
; 405  : 	// update all individual smoke points
; 406  : 	//
; 407  : 
; 408  : 	smoke_list_movement( en );

  00604	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00607	50		 push	 eax
  00608	e8 00 00 00 00	 call	 ?smoke_list_movement@@YGXPAUENTITY@@@Z ; smoke_list_movement

; 409  : 
; 410  : 	return TRUE;

  0060d	b8 01 00 00 00	 mov	 eax, 1
$LN1@update_smo:

; 411  : }

  00612	5f		 pop	 edi
  00613	5e		 pop	 esi
  00614	5b		 pop	 ebx
  00615	8b e5		 mov	 esp, ebp
  00617	5d		 pop	 ebp
  00618	c2 04 00	 ret	 4
?update_smoke@@YGHPAUENTITY@@@Z ENDP			; update_smoke
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_updt.c
;	COMDAT ?get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z
_TEXT	SEGMENT
tv365 = -120						; size = 8
tv300 = -120						; size = 4
tv190 = -120						; size = 4
tv170 = -120						; size = 4
tv149 = -120						; size = 4
tv129 = -120						; size = 4
tv76 = -120						; size = 4
tv292 = -116						; size = 4
tv212 = -116						; size = 4
tv182 = -116						; size = 4
tv162 = -116						; size = 4
tv141 = -116						; size = 4
tv89 = -116						; size = 4
tv69 = -116						; size = 4
_m$1 = -48						; size = 36
_raw_position$2 = -12					; size = 4
_offset$3 = -8						; size = 4
_parent$ = -4						; size = 4
_en$ = 8						; size = 4
_new_pos$ = 12						; size = 4
?get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z PROC ; get_new_smoke_position, COMDAT

; 492  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 493  : 
; 494  : 	//
; 495  : 	// set new smoke position to the position of a specified sub object of it's parent
; 496  : 	//
; 497  : 
; 498  : 	entity
; 499  : 		*parent;
; 500  : 
; 501  : 	if (get_local_entity_int_value (en, INT_TYPE_ENTITY_SUB_TYPE) == ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_EXPLOSION_PARTICLE)

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	74 0a		 je	 SHORT $LN8@get_new_sm
  0000f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00017	eb 1d		 jmp	 SHORT $LN9@get_new_sm
$LN8@get_new_sm:
  00019	68 f5 01 00 00	 push	 501			; 000001f5H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0002f	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN9@get_new_sm:
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	85 c0		 test	 eax, eax
  0003d	74 09		 je	 SHORT $LN10@get_new_sm
  0003f	c7 45 88 34 00
	00 00		 mov	 DWORD PTR tv76[ebp], 52	; 00000034H
  00046	eb 1d		 jmp	 SHORT $LN11@get_new_sm
$LN10@get_new_sm:
  00048	68 f5 01 00 00	 push	 501			; 000001f5H
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0005e	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN11@get_new_sm:
  00065	6a 34		 push	 52			; 00000034H
  00067	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0006a	52		 push	 edx
  0006b	69 45 8c 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  00072	8b 4d 88	 mov	 ecx, DWORD PTR tv76[ebp]
  00075	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0007c	ff d2		 call	 edx
  0007e	83 f8 02	 cmp	 eax, 2
  00081	0f 85 88 00 00
	00		 jne	 $LN2@get_new_sm

; 502  : 	{
; 503  : 		//
; 504  : 		// special case for particles - ignore parent
; 505  : 		//
; 506  : 
; 507  : 		get_local_entity_vec3d (en, VEC3D_TYPE_POSITION, new_pos);

  00087	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0008b	74 0a		 je	 SHORT $LN12@get_new_sm
  0008d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
  00092	89 4d 8c	 mov	 DWORD PTR tv89[ebp], ecx
  00095	eb 21		 jmp	 SHORT $LN13@get_new_sm
$LN12@get_new_sm:
  00097	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  0009d	83 c2 0f	 add	 edx, 15			; 0000000fH
  000a0	52		 push	 edx
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b1	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN13@get_new_sm:
  000b8	b9 01 00 00 00	 mov	 ecx, 1
  000bd	85 c9		 test	 ecx, ecx
  000bf	74 09		 je	 SHORT $LN14@get_new_sm
  000c1	c7 45 88 08 00
	00 00		 mov	 DWORD PTR tv129[ebp], 8
  000c8	eb 21		 jmp	 SHORT $LN15@get_new_sm
$LN14@get_new_sm:
  000ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  000d0	83 c2 0f	 add	 edx, 15			; 0000000fH
  000d3	52		 push	 edx
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e4	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN15@get_new_sm:
  000eb	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  000ee	51		 push	 ecx
  000ef	6a 08		 push	 8
  000f1	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000f4	52		 push	 edx
  000f5	6b 45 8c 60	 imul	 eax, DWORD PTR tv89[ebp], 96
  000f9	8b 4d 88	 mov	 ecx, DWORD PTR tv129[ebp]
  000fc	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00103	ff d2		 call	 edx

; 508  : 
; 509  : 		return TRUE;

  00105	b8 01 00 00 00	 mov	 eax, 1
  0010a	e9 fa 03 00 00	 jmp	 $LN1@get_new_sm
$LN2@get_new_sm:

; 510  : 	}
; 511  : 
; 512  : 	parent = get_local_entity_parent (en, LIST_TYPE_SPECIAL_EFFECT);

  0010f	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00113	74 0a		 je	 SHORT $LN16@get_new_sm
  00115	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00118	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011a	89 4d 8c	 mov	 DWORD PTR tv141[ebp], ecx
  0011d	eb 21		 jmp	 SHORT $LN17@get_new_sm
$LN16@get_new_sm:
  0011f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  00125	83 c2 14	 add	 edx, 20			; 00000014H
  00128	52		 push	 edx
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00139	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$LN17@get_new_sm:
  00140	b9 01 00 00 00	 mov	 ecx, 1
  00145	85 c9		 test	 ecx, ecx
  00147	74 09		 je	 SHORT $LN18@get_new_sm
  00149	c7 45 88 24 00
	00 00		 mov	 DWORD PTR tv149[ebp], 36 ; 00000024H
  00150	eb 21		 jmp	 SHORT $LN19@get_new_sm
$LN18@get_new_sm:
  00152	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  00158	83 c2 14	 add	 edx, 20			; 00000014H
  0015b	52		 push	 edx
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016c	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN19@get_new_sm:
  00173	6a 24		 push	 36			; 00000024H
  00175	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00178	51		 push	 ecx
  00179	69 55 8c b4 00
	00 00		 imul	 edx, DWORD PTR tv141[ebp], 180
  00180	8b 45 88	 mov	 eax, DWORD PTR tv149[ebp]
  00183	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0018a	ff d1		 call	 ecx
  0018c	89 45 fc	 mov	 DWORD PTR _parent$[ebp], eax

; 513  : 
; 514  : 	if (parent)

  0018f	83 7d fc 00	 cmp	 DWORD PTR _parent$[ebp], 0
  00193	0f 84 ed 02 00
	00		 je	 $LN3@get_new_sm

; 515  : 	{
; 516  : 		vec3d
; 517  : 			*offset,
; 518  : 			*raw_position;
; 519  : 
; 520  : 		matrix3x3
; 521  : 			m;
; 522  : 
; 523  : 		raw_position = get_local_entity_vec3d_ptr (parent, VEC3D_TYPE_POSITION);

  00199	83 7d fc 00	 cmp	 DWORD PTR _parent$[ebp], 0
  0019d	74 0a		 je	 SHORT $LN20@get_new_sm
  0019f	8b 45 fc	 mov	 eax, DWORD PTR _parent$[ebp]
  001a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a4	89 4d 8c	 mov	 DWORD PTR tv162[ebp], ecx
  001a7	eb 21		 jmp	 SHORT $LN21@get_new_sm
$LN20@get_new_sm:
  001a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  001af	83 c2 1f	 add	 edx, 31			; 0000001fH
  001b2	52		 push	 edx
  001b3	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c3	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv162[ebp], 0
$LN21@get_new_sm:
  001ca	b9 01 00 00 00	 mov	 ecx, 1
  001cf	85 c9		 test	 ecx, ecx
  001d1	74 09		 je	 SHORT $LN22@get_new_sm
  001d3	c7 45 88 08 00
	00 00		 mov	 DWORD PTR tv170[ebp], 8
  001da	eb 21		 jmp	 SHORT $LN23@get_new_sm
$LN22@get_new_sm:
  001dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  001e2	83 c2 1f	 add	 edx, 31			; 0000001fH
  001e5	52		 push	 edx
  001e6	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  001eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f0	50		 push	 eax
  001f1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f6	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv170[ebp], 0
$LN23@get_new_sm:
  001fd	6a 08		 push	 8
  001ff	8b 4d fc	 mov	 ecx, DWORD PTR _parent$[ebp]
  00202	51		 push	 ecx
  00203	6b 55 8c 60	 imul	 edx, DWORD PTR tv162[ebp], 96
  00207	8b 45 88	 mov	 eax, DWORD PTR tv170[ebp]
  0020a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00211	ff d1		 call	 ecx
  00213	89 45 f4	 mov	 DWORD PTR _raw_position$2[ebp], eax

; 524  : 
; 525  : 		offset = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_RELATIVE_POSITION);

  00216	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0021a	74 0a		 je	 SHORT $LN24@get_new_sm
  0021c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0021f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00221	89 4d 8c	 mov	 DWORD PTR tv182[ebp], ecx
  00224	eb 21		 jmp	 SHORT $LN25@get_new_sm
$LN24@get_new_sm:
  00226	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  0022c	83 c2 21	 add	 edx, 33			; 00000021H
  0022f	52		 push	 edx
  00230	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00235	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00240	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN25@get_new_sm:
  00247	b9 01 00 00 00	 mov	 ecx, 1
  0024c	85 c9		 test	 ecx, ecx
  0024e	74 09		 je	 SHORT $LN26@get_new_sm
  00250	c7 45 88 09 00
	00 00		 mov	 DWORD PTR tv190[ebp], 9
  00257	eb 21		 jmp	 SHORT $LN27@get_new_sm
$LN26@get_new_sm:
  00259	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  0025f	83 c2 21	 add	 edx, 33			; 00000021H
  00262	52		 push	 edx
  00263	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00268	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00273	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN27@get_new_sm:
  0027a	6a 09		 push	 9
  0027c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0027f	51		 push	 ecx
  00280	6b 55 8c 60	 imul	 edx, DWORD PTR tv182[ebp], 96
  00284	8b 45 88	 mov	 eax, DWORD PTR tv190[ebp]
  00287	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0028e	ff d1		 call	 ecx
  00290	89 45 f8	 mov	 DWORD PTR _offset$3[ebp], eax

; 526  : 
; 527  : 		if (check_zero_3d_vector (offset))

  00293	8b 45 f8	 mov	 eax, DWORD PTR _offset$3[ebp]
  00296	50		 push	 eax
  00297	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  0029c	dd 5d 88	 fstp	 QWORD PTR tv365[ebp]
  0029f	f2 0f 10 45 88	 movsd	 xmm0, QWORD PTR tv365[ebp]
  002a4	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  002ac	9f		 lahf
  002ad	f6 c4 44	 test	 ah, 68			; 00000044H
  002b0	7a 27		 jp	 SHORT $LN5@get_new_sm

; 528  : 		{
; 529  : 			new_pos->x = raw_position->x;

  002b2	8b 45 0c	 mov	 eax, DWORD PTR _new_pos$[ebp]
  002b5	8b 4d f4	 mov	 ecx, DWORD PTR _raw_position$2[ebp]
  002b8	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ba	89 10		 mov	 DWORD PTR [eax], edx

; 530  : 			new_pos->y = raw_position->y;

  002bc	8b 45 0c	 mov	 eax, DWORD PTR _new_pos$[ebp]
  002bf	8b 4d f4	 mov	 ecx, DWORD PTR _raw_position$2[ebp]
  002c2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002c5	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 531  : 			new_pos->z = raw_position->z;

  002c8	8b 45 0c	 mov	 eax, DWORD PTR _new_pos$[ebp]
  002cb	8b 4d f4	 mov	 ecx, DWORD PTR _raw_position$2[ebp]
  002ce	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002d1	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 532  : 		}
; 533  : 		else

  002d4	e9 ab 01 00 00	 jmp	 $LN6@get_new_sm
$LN5@get_new_sm:

; 534  : 		{	
; 535  : 			get_local_entity_attitude_matrix (parent, m);

  002d9	83 7d fc 00	 cmp	 DWORD PTR _parent$[ebp], 0
  002dd	74 0a		 je	 SHORT $LN28@get_new_sm
  002df	8b 45 fc	 mov	 eax, DWORD PTR _parent$[ebp]
  002e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e4	89 4d 8c	 mov	 DWORD PTR tv212[ebp], ecx
  002e7	eb 21		 jmp	 SHORT $LN29@get_new_sm
$LN28@get_new_sm:
  002e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  002ef	83 c2 2b	 add	 edx, 43			; 0000002bH
  002f2	52		 push	 edx
  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002fd	50		 push	 eax
  002fe	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00303	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv212[ebp], 0
$LN29@get_new_sm:
  0030a	8d 4d d0	 lea	 ecx, DWORD PTR _m$1[ebp]
  0030d	51		 push	 ecx
  0030e	8b 55 fc	 mov	 edx, DWORD PTR _parent$[ebp]
  00311	52		 push	 edx
  00312	8b 45 8c	 mov	 eax, DWORD PTR tv212[ebp]
  00315	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA[eax*4]
  0031c	ff d1		 call	 ecx

; 536  : 	
; 537  : 			new_pos->x = raw_position->x + ( ( offset->x * m[0][0] ) + ( offset->y * m[1][0] ) + ( offset->z * m[2][0] ) );

  0031e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00323	6b c8 00	 imul	 ecx, eax, 0
  00326	8d 54 0d d0	 lea	 edx, DWORD PTR _m$1[ebp+ecx]
  0032a	b8 04 00 00 00	 mov	 eax, 4
  0032f	6b c8 00	 imul	 ecx, eax, 0
  00332	8b 45 f8	 mov	 eax, DWORD PTR _offset$3[ebp]
  00335	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00339	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  0033e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00343	c1 e1 00	 shl	 ecx, 0
  00346	8d 54 0d d0	 lea	 edx, DWORD PTR _m$1[ebp+ecx]
  0034a	b8 04 00 00 00	 mov	 eax, 4
  0034f	6b c8 00	 imul	 ecx, eax, 0
  00352	8b 45 f8	 mov	 eax, DWORD PTR _offset$3[ebp]
  00355	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0035a	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  0035f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00363	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00368	d1 e1		 shl	 ecx, 1
  0036a	8d 54 0d d0	 lea	 edx, DWORD PTR _m$1[ebp+ecx]
  0036e	b8 04 00 00 00	 mov	 eax, 4
  00373	6b c8 00	 imul	 ecx, eax, 0
  00376	8b 45 f8	 mov	 eax, DWORD PTR _offset$3[ebp]
  00379	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0037e	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  00383	f3 0f 58 c1	 addss	 xmm0, xmm1
  00387	8b 4d f4	 mov	 ecx, DWORD PTR _raw_position$2[ebp]
  0038a	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0038e	8b 55 0c	 mov	 edx, DWORD PTR _new_pos$[ebp]
  00391	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 538  : 			new_pos->y = raw_position->y + ( ( offset->x * m[0][1] ) + ( offset->y * m[1][1] ) + ( offset->z * m[2][1] ) );

  00395	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0039a	6b c8 00	 imul	 ecx, eax, 0
  0039d	8d 54 0d d0	 lea	 edx, DWORD PTR _m$1[ebp+ecx]
  003a1	b8 04 00 00 00	 mov	 eax, 4
  003a6	c1 e0 00	 shl	 eax, 0
  003a9	8b 4d f8	 mov	 ecx, DWORD PTR _offset$3[ebp]
  003ac	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  003b0	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  003b5	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003ba	c1 e2 00	 shl	 edx, 0
  003bd	8d 44 15 d0	 lea	 eax, DWORD PTR _m$1[ebp+edx]
  003c1	b9 04 00 00 00	 mov	 ecx, 4
  003c6	c1 e1 00	 shl	 ecx, 0
  003c9	8b 55 f8	 mov	 edx, DWORD PTR _offset$3[ebp]
  003cc	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  003d1	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  003d6	f3 0f 58 c1	 addss	 xmm0, xmm1
  003da	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003df	d1 e0		 shl	 eax, 1
  003e1	8d 4c 05 d0	 lea	 ecx, DWORD PTR _m$1[ebp+eax]
  003e5	ba 04 00 00 00	 mov	 edx, 4
  003ea	c1 e2 00	 shl	 edx, 0
  003ed	8b 45 f8	 mov	 eax, DWORD PTR _offset$3[ebp]
  003f0	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  003f5	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  003fa	f3 0f 58 c1	 addss	 xmm0, xmm1
  003fe	8b 4d f4	 mov	 ecx, DWORD PTR _raw_position$2[ebp]
  00401	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00406	8b 55 0c	 mov	 edx, DWORD PTR _new_pos$[ebp]
  00409	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 539  : 			new_pos->z = raw_position->z + ( ( offset->x * m[0][2] ) + ( offset->y * m[1][2] ) + ( offset->z * m[2][2] ) );

  0040e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00413	6b c8 00	 imul	 ecx, eax, 0
  00416	8d 54 0d d0	 lea	 edx, DWORD PTR _m$1[ebp+ecx]
  0041a	b8 04 00 00 00	 mov	 eax, 4
  0041f	d1 e0		 shl	 eax, 1
  00421	8b 4d f8	 mov	 ecx, DWORD PTR _offset$3[ebp]
  00424	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00428	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0042d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00432	c1 e2 00	 shl	 edx, 0
  00435	8d 44 15 d0	 lea	 eax, DWORD PTR _m$1[ebp+edx]
  00439	b9 04 00 00 00	 mov	 ecx, 4
  0043e	d1 e1		 shl	 ecx, 1
  00440	8b 55 f8	 mov	 edx, DWORD PTR _offset$3[ebp]
  00443	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00448	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  0044d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00451	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00456	d1 e0		 shl	 eax, 1
  00458	8d 4c 05 d0	 lea	 ecx, DWORD PTR _m$1[ebp+eax]
  0045c	ba 04 00 00 00	 mov	 edx, 4
  00461	d1 e2		 shl	 edx, 1
  00463	8b 45 f8	 mov	 eax, DWORD PTR _offset$3[ebp]
  00466	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0046b	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  00470	f3 0f 58 c1	 addss	 xmm0, xmm1
  00474	8b 4d f4	 mov	 ecx, DWORD PTR _raw_position$2[ebp]
  00477	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0047c	8b 55 0c	 mov	 edx, DWORD PTR _new_pos$[ebp]
  0047f	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0
$LN6@get_new_sm:

; 540  : 		}
; 541  : 	}
; 542  : 	else

  00484	eb 7e		 jmp	 SHORT $LN4@get_new_sm
$LN3@get_new_sm:

; 543  : 	{			
; 544  : 		get_local_entity_vec3d (en, VEC3D_TYPE_POSITION, new_pos);

  00486	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0048a	74 0a		 je	 SHORT $LN30@get_new_sm
  0048c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0048f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00491	89 4d 8c	 mov	 DWORD PTR tv292[ebp], ecx
  00494	eb 21		 jmp	 SHORT $LN31@get_new_sm
$LN30@get_new_sm:
  00496	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  0049c	83 c2 34	 add	 edx, 52			; 00000034H
  0049f	52		 push	 edx
  004a0	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004aa	50		 push	 eax
  004ab	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b0	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv292[ebp], 0
$LN31@get_new_sm:
  004b7	b9 01 00 00 00	 mov	 ecx, 1
  004bc	85 c9		 test	 ecx, ecx
  004be	74 09		 je	 SHORT $LN32@get_new_sm
  004c0	c7 45 88 08 00
	00 00		 mov	 DWORD PTR tv300[ebp], 8
  004c7	eb 21		 jmp	 SHORT $LN33@get_new_sm
$LN32@get_new_sm:
  004c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z@4JA
  004cf	83 c2 34	 add	 edx, 52			; 00000034H
  004d2	52		 push	 edx
  004d3	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KGHIGKMO@c?3?2users?2nhv90?2projects?2eech?2ap@
  004d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  004dd	50		 push	 eax
  004de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004e3	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv300[ebp], 0
$LN33@get_new_sm:
  004ea	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  004ed	51		 push	 ecx
  004ee	6a 08		 push	 8
  004f0	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004f3	52		 push	 edx
  004f4	6b 45 8c 60	 imul	 eax, DWORD PTR tv292[ebp], 96
  004f8	8b 4d 88	 mov	 ecx, DWORD PTR tv300[ebp]
  004fb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00502	ff d2		 call	 edx
$LN4@get_new_sm:

; 545  : 	}
; 546  : 
; 547  : 	return TRUE;

  00504	b8 01 00 00 00	 mov	 eax, 1
$LN1@get_new_sm:

; 548  : }

  00509	5f		 pop	 edi
  0050a	5e		 pop	 esi
  0050b	5b		 pop	 ebx
  0050c	8b e5		 mov	 esp, ebp
  0050e	5d		 pop	 ebp
  0050f	c2 08 00	 ret	 8
?get_new_smoke_position@@YGHPAUENTITY@@PAUVEC3D@@@Z ENDP ; get_new_smoke_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\smokelst\sl_updt.c
;	COMDAT ?overload_smoke_list_update_functions@@YGXXZ
_TEXT	SEGMENT
?overload_smoke_list_update_functions@@YGXXZ PROC	; overload_smoke_list_update_functions, COMDAT

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 556  : 	fn_update_client_server_entity[ENTITY_TYPE_SMOKE_LIST][COMMS_MODEL_SERVER]  	= update_server;

  00009	b8 08 00 00 00	 mov	 eax, 8
  0000e	6b c8 1f	 imul	 ecx, eax, 31
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_update_client_server_entity@@3PAY01P6GXPAUENTITY@@@ZA[ecx+eax], OFFSET ?update_server@@YGXPAUENTITY@@@Z ; update_server

; 557  : 
; 558  : 	fn_update_client_server_entity[ENTITY_TYPE_SMOKE_LIST][COMMS_MODEL_CLIENT]  	= update_client;

  00024	b8 08 00 00 00	 mov	 eax, 8
  00029	6b c8 1f	 imul	 ecx, eax, 31
  0002c	ba 04 00 00 00	 mov	 edx, 4
  00031	c1 e2 00	 shl	 edx, 0
  00034	c7 84 11 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_update_client_server_entity@@3PAY01P6GXPAUENTITY@@@ZA[ecx+edx], OFFSET ?update_client@@YGXPAUENTITY@@@Z ; update_client

; 559  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?overload_smoke_list_update_functions@@YGXXZ ENDP	; overload_smoke_list_update_functions
_TEXT	ENDS
END
