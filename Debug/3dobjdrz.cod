; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dobjdrz.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?old_visual_3d_vp@@3UVEC3D@@A			; old_visual_3d_vp
_BSS	SEGMENT
?old_visual_3d_vp@@3UVEC3D@@A DB 0cH DUP (?)		; old_visual_3d_vp
_BSS	ENDS
PUBLIC	?asm_convert_float_to_int@@YGXMPAH@Z		; asm_convert_float_to_int
PUBLIC	?draw_zbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z ; draw_zbuffered_3d_object
PUBLIC	__real@406fe00000000000
PUBLIC	__real@40800000
PUBLIC	__real@437f0000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_memcpy:PROC
EXTRN	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_any_3d_vector
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?get_fog_distance_value@@YGMM@Z:PROC		; get_fog_distance_value
EXTRN	?set_d3d_fog_face_intensity@@YGXH@Z:PROC	; set_d3d_fog_face_intensity
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?get_translucent_sorted_polygon_buffer@@YGPAUPOLYGON_BUFFER@@XZ:PROC ; get_translucent_sorted_polygon_buffer
EXTRN	?finalise_translucent_sorted_polygon_buffer@@YGHPAUPOLYGON_BUFFER@@@Z:PROC ; finalise_translucent_sorted_polygon_buffer
EXTRN	?remove_translucent_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z:PROC ; remove_translucent_polygon_buffer
EXTRN	?draw_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z:PROC ; draw_polygon_buffer
EXTRN	?reset_temporary_buffered_translucent_polygons@@YGXXZ:PROC ; reset_temporary_buffered_translucent_polygons
EXTRN	?get_number_of_temporary_translucent_polygons@@YGHXZ:PROC ; get_number_of_temporary_translucent_polygons
EXTRN	?draw_temporary_translucent_polygons@@YGXXZ:PROC ; draw_temporary_translucent_polygons
EXTRN	?initialise_object_texture_animations@@YGXPAUOBJECT_3D_INSTANCE@@@Z:PROC ; initialise_object_texture_animations
EXTRN	?get_object_approximation_number@@YGHHMPAH@Z:PROC ; get_object_approximation_number
EXTRN	?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ:PROC ; get_3d_scene_slot
EXTRN	?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z:PROC ; insert_zbiased_object_into_3d_scene
EXTRN	?insert_transparent_buffer_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; insert_transparent_buffer_into_3d_scene
EXTRN	?generate_relative_lights@@YGPAULIGHT_3D_SOURCE@@PAUVIEWPOINT@@PAUVEC3D@@PAU1@@Z:PROC ; generate_relative_lights
EXTRN	?draw_3d_object_clipped_faces@@YGXH@Z:PROC	; draw_3d_object_clipped_faces
EXTRN	?draw_3d_object_unclipped_faces@@YGXH@Z:PROC	; draw_3d_object_unclipped_faces
EXTRN	?draw_3d_object_untextured_clipped_faces@@YGXH@Z:PROC ; draw_3d_object_untextured_clipped_faces
EXTRN	?draw_3d_object_untextured_unclipped_faces@@YGXH@Z:PROC ; draw_3d_object_untextured_unclipped_faces
EXTRN	?get_object_3d_outcode@@YGHHPAUVEC3D@@PAH@Z:PROC ; get_object_3d_outcode
EXTRN	?illuminate_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z:PROC ; illuminate_3d_object
EXTRN	?transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z:PROC ; transform_3d_object
EXTRN	?transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z:PROC ; transform_flat_3d_object
EXTRN	?transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z:PROC ; transform_unclipped_3d_object
EXTRN	?transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z:PROC ; transform_unclipped_flat_3d_object
EXTRN	?d3d_transparency_enabled@@3HA:DWORD		; d3d_transparency_enabled
EXTRN	?system_textures@@3PAPAUSCREEN@@A:BYTE		; system_textures
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A:DWORD ; objects_3d_scene_database
EXTRN	?objects_3d_data@@3PAUOBJECT_3D@@A:DWORD	; objects_3d_data
EXTRN	?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A:DWORD ; current_3d_lights
EXTRN	?current_object_3d_light_maps_enabled@@3HA:DWORD ; current_object_3d_light_maps_enabled
EXTRN	?current_object_3d_dissolve_factor@@3MA:DWORD	; current_object_3d_dissolve_factor
EXTRN	?current_object_3d_dissolve_value@@3EA:BYTE	; current_object_3d_dissolve_value
EXTRN	?object_3d_approximation_level@@3HA:DWORD	; object_3d_approximation_level
EXTRN	?current_3d_object_is_flat@@3HA:DWORD		; current_3d_object_is_flat
EXTRN	?object_3d_points_current_base@@3HA:DWORD	; object_3d_points_current_base
EXTRN	?object_3d_object_current_base@@3HA:DWORD	; object_3d_object_current_base
EXTRN	?object_3d_light_3d_current_base@@3HA:DWORD	; object_3d_light_3d_current_base
EXTRN	?object_3d_perform_lod_calculations@@3HA:DWORD	; object_3d_perform_lod_calculations
EXTRN	?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A:DWORD ; current_object_3d_object_base
EXTRN	?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A:BYTE ; object_3d_object_base
EXTRN	?object_3d_scale@@3UVEC3D@@A:BYTE		; object_3d_scale
EXTRN	?textured_object_rendering_enabled@@3HA:DWORD	; textured_object_rendering_enabled
EXTRN	?current_object_3d_translucent_surfaces@@3PAUTRANSLUCENT_OBJECT_SURFACE@@A:DWORD ; current_object_3d_translucent_surfaces
EXTRN	?current_object_3d_relative_position@@3PAUVEC3D@@A:DWORD ; current_object_3d_relative_position
EXTRN	?current_object_3d_unit_position@@3PAUVEC3D@@A:DWORD ; current_object_3d_unit_position
EXTRN	?rotation_3d@@3PAY02MA:BYTE			; rotation_3d
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjdrz.c
;	COMDAT ?draw_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@H@Z
_TEXT	SEGMENT
_itmp$1 = -292						; size = 4
_object_outcode$2 = -288				; size = 4
_z$3 = -284						; size = 4
_y$4 = -280						; size = 4
_x$5 = -276						; size = 4
_rel_pos$6 = -272					; size = 12
_itmp$7 = -260						; size = 4
_tmp$8 = -256						; size = 4
_vp$ = -252						; size = 48
_light$ = -204						; size = 4
_relative_roll$ = -200					; size = 4
_relative_pitch$ = -196					; size = 4
_relative_heading$ = -192				; size = 4
_old_current_object_3d_relative_position$ = -188	; size = 4
_relative_scale$ = -184					; size = 12
_relative_position$ = -172				; size = 12
_sub_pos$ = -160					; size = 12
_object_unit_pos$ = -148				; size = 12
_temp_scale$ = -136					; size = 12
_scaled_relative_position$ = -124			; size = 12
_object_camera_direction$ = -112			; size = 12
_object_camera_position$ = -100				; size = 12
_temp_matrix$ = -88					; size = 36
_relative_attitude$ = -52				; size = 36
_old_current_object_3d_dissolve_factor$ = -16		; size = 4
_relative_dissolve$ = -12				; size = 4
_object_number$ = -8					; size = 4
_count$ = -4						; size = 4
_obj$ = 8						; size = 4
_scene$ = 12						; size = 4
_parent_viewpoint$ = 16					; size = 4
_position$ = 20						; size = 4
_infrared_override$ = 24				; size = 4
?draw_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@H@Z PROC ; draw_sub_object, COMDAT

; 632  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 633  : 
; 634  : 	int
; 635  : 		count,
; 636  : 		object_number,
; 637  : 		relative_dissolve;
; 638  : 
; 639  : 	float
; 640  : 		old_current_object_3d_dissolve_factor;
; 641  : 
; 642  : 	matrix3x3
; 643  : 		relative_attitude,
; 644  : 		temp_matrix;
; 645  : 
; 646  : 	vec3d
; 647  : 		object_camera_position,
; 648  : 		object_camera_direction,
; 649  : 		scaled_relative_position,
; 650  : 		temp_scale,
; 651  : 		object_unit_pos,
; 652  : 		sub_pos,
; 653  : 		relative_position,
; 654  : 		relative_scale,
; 655  : 		*old_current_object_3d_relative_position;
; 656  : 
; 657  : 	float
; 658  : 		relative_heading,
; 659  : 		relative_pitch,
; 660  : 		relative_roll;
; 661  : 
; 662  : 	light_3d_source
; 663  : 		*light;
; 664  : 
; 665  : 	viewpoint
; 666  : 		vp;
; 667  : 
; 668  : 	//
; 669  : 	// We no longer need the lights to be used for all the objects, so just reset the stats!
; 670  : 	//
; 671  : 
; 672  : 	object_3d_points_current_base = 0;

  0000c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_points_current_base@@3HA, 0 ; object_3d_points_current_base

; 673  : 
; 674  : 	object_3d_object_current_base = 0;

  00016	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_object_current_base@@3HA, 0 ; object_3d_object_current_base

; 675  : 
; 676  : 	object_3d_light_3d_current_base = 0;

  00020	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_light_3d_current_base@@3HA, 0 ; object_3d_light_3d_current_base

; 677  : 
; 678  : 	//
; 679  : 	// Get the positions & object number
; 680  : 	//
; 681  : 
; 682  : 	if ( obj )

  0002a	83 7d 08 00	 cmp	 DWORD PTR _obj$[ebp], 0
  0002e	0f 84 87 00 00
	00		 je	 $LN8@draw_sub_o

; 683  : 	{
; 684  : 
; 685  : 		relative_position = obj->relative_position;

  00034	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00037	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	89 8d 54 ff ff
	ff		 mov	 DWORD PTR _relative_position$[ebp], ecx
  00042	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00045	89 95 58 ff ff
	ff		 mov	 DWORD PTR _relative_position$[ebp+4], edx
  0004b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0004e	89 85 5c ff ff
	ff		 mov	 DWORD PTR _relative_position$[ebp+8], eax

; 686  : 		relative_scale = obj->relative_scale;

  00054	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00057	83 c0 24	 add	 eax, 36			; 00000024H
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _relative_scale$[ebp], ecx
  00062	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00065	89 95 4c ff ff
	ff		 mov	 DWORD PTR _relative_scale$[ebp+4], edx
  0006b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006e	89 85 50 ff ff
	ff		 mov	 DWORD PTR _relative_scale$[ebp+8], eax

; 687  : 		relative_heading = obj->relative_heading;

  00074	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00077	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0007c	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _relative_heading$[ebp], xmm0

; 688  : 		relative_pitch = obj->relative_pitch;

  00084	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00087	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  0008c	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _relative_pitch$[ebp], xmm0

; 689  : 		relative_roll = obj->relative_roll;

  00094	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00097	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  0009c	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _relative_roll$[ebp], xmm0

; 690  : 		relative_dissolve = obj->object_dissolve_value;

  000a4	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000a7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000aa	c1 e9 04	 shr	 ecx, 4
  000ad	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000b3	89 4d f4	 mov	 DWORD PTR _relative_dissolve$[ebp], ecx

; 691  : 	}
; 692  : 	else

  000b6	e9 13 01 00 00	 jmp	 $LN9@draw_sub_o
$LN8@draw_sub_o:

; 693  : 	{
; 694  : 
; 695  : 		relative_position.x = scene->keyframes[0].x;

  000bb	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  000c0	6b c8 00	 imul	 ecx, eax, 0
  000c3	8b 55 0c	 mov	 edx, DWORD PTR _scene$[ebp]
  000c6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000c9	f3 0f 10 44 08
	08		 movss	 xmm0, DWORD PTR [eax+ecx+8]
  000cf	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _relative_position$[ebp], xmm0

; 696  : 		relative_position.y = scene->keyframes[0].y;

  000d7	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  000dc	6b c8 00	 imul	 ecx, eax, 0
  000df	8b 55 0c	 mov	 edx, DWORD PTR _scene$[ebp]
  000e2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000e5	f3 0f 10 44 08
	0c		 movss	 xmm0, DWORD PTR [eax+ecx+12]
  000eb	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _relative_position$[ebp+4], xmm0

; 697  : 		relative_position.z = scene->keyframes[0].z;

  000f3	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  000f8	6b c8 00	 imul	 ecx, eax, 0
  000fb	8b 55 0c	 mov	 edx, DWORD PTR _scene$[ebp]
  000fe	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00101	f3 0f 10 44 08
	10		 movss	 xmm0, DWORD PTR [eax+ecx+16]
  00107	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _relative_position$[ebp+8], xmm0

; 698  : 		relative_scale.x = scene->keyframes[0].scale_x;

  0010f	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00114	6b c8 00	 imul	 ecx, eax, 0
  00117	8b 55 0c	 mov	 edx, DWORD PTR _scene$[ebp]
  0011a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0011d	f3 0f 10 44 08
	20		 movss	 xmm0, DWORD PTR [eax+ecx+32]
  00123	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _relative_scale$[ebp], xmm0

; 699  : 		relative_scale.y = scene->keyframes[0].scale_y;

  0012b	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00130	6b c8 00	 imul	 ecx, eax, 0
  00133	8b 55 0c	 mov	 edx, DWORD PTR _scene$[ebp]
  00136	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00139	f3 0f 10 44 08
	24		 movss	 xmm0, DWORD PTR [eax+ecx+36]
  0013f	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _relative_scale$[ebp+4], xmm0

; 700  : 		relative_scale.z = scene->keyframes[0].scale_z;

  00147	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0014c	6b c8 00	 imul	 ecx, eax, 0
  0014f	8b 55 0c	 mov	 edx, DWORD PTR _scene$[ebp]
  00152	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00155	f3 0f 10 44 08
	28		 movss	 xmm0, DWORD PTR [eax+ecx+40]
  0015b	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _relative_scale$[ebp+8], xmm0

; 701  : 		relative_heading = scene->keyframes[0].heading;

  00163	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00168	6b c8 00	 imul	 ecx, eax, 0
  0016b	8b 55 0c	 mov	 edx, DWORD PTR _scene$[ebp]
  0016e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00171	f3 0f 10 44 08
	14		 movss	 xmm0, DWORD PTR [eax+ecx+20]
  00177	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _relative_heading$[ebp], xmm0

; 702  : 		relative_pitch = scene->keyframes[0].pitch;

  0017f	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00184	6b c8 00	 imul	 ecx, eax, 0
  00187	8b 55 0c	 mov	 edx, DWORD PTR _scene$[ebp]
  0018a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0018d	f3 0f 10 44 08
	18		 movss	 xmm0, DWORD PTR [eax+ecx+24]
  00193	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _relative_pitch$[ebp], xmm0

; 703  : 		relative_roll = scene->keyframes[0].roll;

  0019b	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  001a0	6b c8 00	 imul	 ecx, eax, 0
  001a3	8b 55 0c	 mov	 edx, DWORD PTR _scene$[ebp]
  001a6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001a9	f3 0f 10 44 08
	1c		 movss	 xmm0, DWORD PTR [eax+ecx+28]
  001af	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _relative_roll$[ebp], xmm0

; 704  : 		relative_dissolve = scene->object_dissolve * 255.0;

  001b7	8b 45 0c	 mov	 eax, DWORD PTR _scene$[ebp]
  001ba	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  001bf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406fe00000000000
  001c7	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  001cb	89 4d f4	 mov	 DWORD PTR _relative_dissolve$[ebp], ecx
$LN9@draw_sub_o:

; 705  : 	}
; 706  : 
; 707  : 	object_number = scene->index;

  001ce	8b 45 0c	 mov	 eax, DWORD PTR _scene$[ebp]
  001d1	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001d4	89 4d f8	 mov	 DWORD PTR _object_number$[ebp], ecx

; 708  : 
; 709  : 	//
; 710  : 	// Set the object dissolve variables
; 711  : 	//
; 712  : 
; 713  : 	{
; 714  : 
; 715  : 		float
; 716  : 			tmp;
; 717  : 
; 718  : 		int
; 719  : 			itmp;
; 720  : 
; 721  : 		old_current_object_3d_dissolve_factor = current_object_3d_dissolve_factor;

  001d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  001df	f3 0f 11 45 f0	 movss	 DWORD PTR _old_current_object_3d_dissolve_factor$[ebp], xmm0

; 722  : 
; 723  : 		current_object_3d_dissolve_value = relative_dissolve;	//obj->object_dissolve_value;

  001e4	8a 45 f4	 mov	 al, BYTE PTR _relative_dissolve$[ebp]
  001e7	a2 00 00 00 00	 mov	 BYTE PTR ?current_object_3d_dissolve_value@@3EA, al ; current_object_3d_dissolve_value

; 724  : 
; 725  : 		tmp = current_object_3d_dissolve_value;

  001ec	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  001f3	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001f7	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _tmp$8[ebp], xmm0

; 726  : 		tmp /= 255.0;

  001ff	f3 0f 5a 85 00
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tmp$8[ebp]
  00207	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  0020f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00213	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _tmp$8[ebp], xmm0

; 727  : 
; 728  : 		current_object_3d_dissolve_factor *= tmp;

  0021b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  00223	f3 0f 59 85 00
	ff ff ff	 mulss	 xmm0, DWORD PTR _tmp$8[ebp]
  0022b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_object_3d_dissolve_factor@@3MA, xmm0

; 729  : 
; 730  : 		asm_convert_float_to_int ( current_object_3d_dissolve_factor * 255.0, &itmp );

  00233	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _itmp$7[ebp]
  00239	50		 push	 eax
  0023a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  00242	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406fe00000000000
  0024a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024e	51		 push	 ecx
  0024f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00254	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 731  : 
; 732  : 		current_object_3d_dissolve_value = itmp;

  00259	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR _itmp$7[ebp]
  0025f	a2 00 00 00 00	 mov	 BYTE PTR ?current_object_3d_dissolve_value@@3EA, al ; current_object_3d_dissolve_value

; 733  : 	}
; 734  : 
; 735  : 	//
; 736  : 	// Calculate the object's position relative to the viewer.
; 737  : 	//
; 738  : 	// NOTE:
; 739  : 	//		BECAUSE THIS USES THE ROTATION_3D MATRIX, IT TAKES INTO ACCOUNT THE PARENT'S SCALE
; 740  : 	//
; 741  : 
; 742  : 	sub_pos.x = ( ( relative_position.x * rotation_3d[0][0] ) +

  00264	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00269	6b c8 00	 imul	 ecx, eax, 0
  0026c	ba 04 00 00 00	 mov	 edx, 4
  00271	6b c2 00	 imul	 eax, edx, 0
  00274	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _relative_position$[ebp]
  0027c	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00285	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0028a	c1 e1 00	 shl	 ecx, 0
  0028d	ba 04 00 00 00	 mov	 edx, 4
  00292	6b c2 00	 imul	 eax, edx, 0
  00295	f3 0f 10 8d 58
	ff ff ff	 movss	 xmm1, DWORD PTR _relative_position$[ebp+4]
  0029d	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  002a6	f3 0f 58 c1	 addss	 xmm0, xmm1
  002aa	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002af	d1 e1		 shl	 ecx, 1
  002b1	ba 04 00 00 00	 mov	 edx, 4
  002b6	6b c2 00	 imul	 eax, edx, 0
  002b9	f3 0f 10 8d 5c
	ff ff ff	 movss	 xmm1, DWORD PTR _relative_position$[ebp+8]
  002c1	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  002ca	f3 0f 58 c1	 addss	 xmm0, xmm1
  002ce	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp], xmm0

; 743  : 					  ( relative_position.y * rotation_3d[1][0] ) +
; 744  : 					  ( relative_position.z * rotation_3d[2][0] ) );
; 745  : 	sub_pos.y = ( ( relative_position.x * rotation_3d[0][1] ) +

  002d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002db	6b c8 00	 imul	 ecx, eax, 0
  002de	ba 04 00 00 00	 mov	 edx, 4
  002e3	c1 e2 00	 shl	 edx, 0
  002e6	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _relative_position$[ebp]
  002ee	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  002f7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002fc	c1 e0 00	 shl	 eax, 0
  002ff	b9 04 00 00 00	 mov	 ecx, 4
  00304	c1 e1 00	 shl	 ecx, 0
  00307	f3 0f 10 8d 58
	ff ff ff	 movss	 xmm1, DWORD PTR _relative_position$[ebp+4]
  0030f	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00318	f3 0f 58 c1	 addss	 xmm0, xmm1
  0031c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00321	d1 e2		 shl	 edx, 1
  00323	b8 04 00 00 00	 mov	 eax, 4
  00328	c1 e0 00	 shl	 eax, 0
  0032b	f3 0f 10 8d 5c
	ff ff ff	 movss	 xmm1, DWORD PTR _relative_position$[ebp+8]
  00333	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  0033c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00340	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp+4], xmm0

; 746  : 					  ( relative_position.y * rotation_3d[1][1] ) +
; 747  : 					  ( relative_position.z * rotation_3d[2][1] ) );
; 748  : 	sub_pos.z = ( ( relative_position.x * rotation_3d[0][2] ) +

  00348	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0034d	6b c8 00	 imul	 ecx, eax, 0
  00350	ba 04 00 00 00	 mov	 edx, 4
  00355	d1 e2		 shl	 edx, 1
  00357	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _relative_position$[ebp]
  0035f	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00368	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0036d	c1 e0 00	 shl	 eax, 0
  00370	b9 04 00 00 00	 mov	 ecx, 4
  00375	d1 e1		 shl	 ecx, 1
  00377	f3 0f 10 8d 58
	ff ff ff	 movss	 xmm1, DWORD PTR _relative_position$[ebp+4]
  0037f	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00388	f3 0f 58 c1	 addss	 xmm0, xmm1
  0038c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00391	d1 e2		 shl	 edx, 1
  00393	b8 04 00 00 00	 mov	 eax, 4
  00398	d1 e0		 shl	 eax, 1
  0039a	f3 0f 10 8d 5c
	ff ff ff	 movss	 xmm1, DWORD PTR _relative_position$[ebp+8]
  003a2	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  003ab	f3 0f 58 c1	 addss	 xmm0, xmm1
  003af	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp+8], xmm0

; 749  : 					  ( relative_position.y * rotation_3d[1][2] ) +
; 750  : 					  ( relative_position.z * rotation_3d[2][2] ) );
; 751  : 
; 752  : 	sub_pos.x += position->x;

  003b7	8b 45 14	 mov	 eax, DWORD PTR _position$[ebp]
  003ba	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _sub_pos$[ebp]
  003c2	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  003c6	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp], xmm0

; 753  : 	sub_pos.y += position->y;

  003ce	8b 45 14	 mov	 eax, DWORD PTR _position$[ebp]
  003d1	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _sub_pos$[ebp+4]
  003d9	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  003de	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp+4], xmm0

; 754  : 	sub_pos.z += position->z;

  003e6	8b 45 14	 mov	 eax, DWORD PTR _position$[ebp]
  003e9	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _sub_pos$[ebp+8]
  003f1	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  003f6	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp+8], xmm0

; 755  : 
; 756  : 	old_current_object_3d_relative_position = current_object_3d_relative_position;

  003fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00403	89 85 44 ff ff
	ff		 mov	 DWORD PTR _old_current_object_3d_relative_position$[ebp], eax

; 757  : 
; 758  : 	current_object_3d_relative_position = &sub_pos;

  00409	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _sub_pos$[ebp]
  0040f	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A, eax ; current_object_3d_relative_position

; 759  : 
; 760  : 	//
; 761  : 	// Calculate the object's real world position
; 762  : 	//
; 763  : 
; 764  : 	scaled_relative_position.x = relative_position.x * object_3d_scale.x;

  00414	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _relative_position$[ebp]
  0041c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00424	f3 0f 11 45 84	 movss	 DWORD PTR _scaled_relative_position$[ebp], xmm0

; 765  : 	scaled_relative_position.y = relative_position.y * object_3d_scale.y;

  00429	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _relative_position$[ebp+4]
  00431	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00439	f3 0f 11 45 88	 movss	 DWORD PTR _scaled_relative_position$[ebp+4], xmm0

; 766  : 	scaled_relative_position.z = relative_position.z * object_3d_scale.z;

  0043e	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _relative_position$[ebp+8]
  00446	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  0044e	f3 0f 11 45 8c	 movss	 DWORD PTR _scaled_relative_position$[ebp+8], xmm0

; 767  : 
; 768  : 	vp.x = (	( scaled_relative_position.x * parent_viewpoint->xv.x ) +

  00453	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  00456	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _scaled_relative_position$[ebp]
  0045b	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00460	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00463	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+4]
  00468	f3 0f 59 49 18	 mulss	 xmm1, DWORD PTR [ecx+24]
  0046d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00471	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00474	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+8]
  00479	f3 0f 59 4a 24	 mulss	 xmm1, DWORD PTR [edx+36]
  0047e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00482	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _vp$[ebp], xmm0

; 769  : 				( scaled_relative_position.y * parent_viewpoint->yv.x ) +
; 770  : 				( scaled_relative_position.z * parent_viewpoint->zv.x ) );
; 771  : 
; 772  : 	vp.y = (	( scaled_relative_position.x * parent_viewpoint->xv.y ) +

  0048a	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  0048d	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _scaled_relative_position$[ebp]
  00492	f3 0f 59 40 10	 mulss	 xmm0, DWORD PTR [eax+16]
  00497	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  0049a	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+4]
  0049f	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  004a4	f3 0f 58 c1	 addss	 xmm0, xmm1
  004a8	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  004ab	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+8]
  004b0	f3 0f 59 4a 28	 mulss	 xmm1, DWORD PTR [edx+40]
  004b5	f3 0f 58 c1	 addss	 xmm0, xmm1
  004b9	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+4], xmm0

; 773  : 				( scaled_relative_position.y * parent_viewpoint->yv.y ) +
; 774  : 				( scaled_relative_position.z * parent_viewpoint->zv.y ) );
; 775  : 
; 776  : 	vp.z = (	( scaled_relative_position.x * parent_viewpoint->xv.z ) +

  004c1	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  004c4	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _scaled_relative_position$[ebp]
  004c9	f3 0f 59 40 14	 mulss	 xmm0, DWORD PTR [eax+20]
  004ce	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  004d1	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+4]
  004d6	f3 0f 59 49 20	 mulss	 xmm1, DWORD PTR [ecx+32]
  004db	f3 0f 58 c1	 addss	 xmm0, xmm1
  004df	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  004e2	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+8]
  004e7	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  004ec	f3 0f 58 c1	 addss	 xmm0, xmm1
  004f0	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+8], xmm0

; 777  : 				( scaled_relative_position.y * parent_viewpoint->yv.z ) +
; 778  : 				( scaled_relative_position.z * parent_viewpoint->zv.z ) );
; 779  : 
; 780  : 	vp.x += parent_viewpoint->x;

  004f8	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  004fb	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp]
  00503	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00507	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _vp$[ebp], xmm0

; 781  : 	vp.y += parent_viewpoint->y;

  0050f	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  00512	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+4]
  0051a	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0051f	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+4], xmm0

; 782  : 	vp.z += parent_viewpoint->z;

  00527	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  0052a	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+8]
  00532	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00537	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+8], xmm0

; 783  : 
; 784  : 	//
; 785  : 	//	Store the rotation matrix, so when we go back to the parent, other sub objects can inherit the matrix safely
; 786  : 	//
; 787  : 
; 788  : 	memcpy ( temp_matrix, rotation_3d, sizeof ( matrix3x3 ) );

  0053f	6a 24		 push	 36			; 00000024H
  00541	68 00 00 00 00	 push	 OFFSET ?rotation_3d@@3PAY02MA ; rotation_3d
  00546	8d 45 a8	 lea	 eax, DWORD PTR _temp_matrix$[ebp]
  00549	50		 push	 eax
  0054a	e8 00 00 00 00	 call	 _memcpy
  0054f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 789  : 
; 790  : 	//
; 791  : 	// Store the scaling before we trash it
; 792  : 	//
; 793  : 
; 794  : 	memcpy ( &temp_scale, &object_3d_scale, sizeof ( vec3d ) );

  00552	6a 0c		 push	 12			; 0000000cH
  00554	68 00 00 00 00	 push	 OFFSET ?object_3d_scale@@3UVEC3D@@A ; object_3d_scale
  00559	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _temp_scale$[ebp]
  0055f	50		 push	 eax
  00560	e8 00 00 00 00	 call	 _memcpy
  00565	83 c4 0c	 add	 esp, 12			; 0000000cH

; 795  : 
; 796  : 	//
; 797  : 	// Alter the scaling according to this object's scale
; 798  : 	//
; 799  : 
; 800  : 	object_3d_scale.x *= relative_scale.x;

  00568	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00570	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _relative_scale$[ebp]
  00578	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A, xmm0

; 801  : 	object_3d_scale.y *= relative_scale.y;

  00580	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00588	f3 0f 59 85 4c
	ff ff ff	 mulss	 xmm0, DWORD PTR _relative_scale$[ebp+4]
  00590	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4, xmm0

; 802  : 	object_3d_scale.z *= relative_scale.z;

  00598	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  005a0	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _relative_scale$[ebp+8]
  005a8	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8, xmm0

; 803  : 
; 804  : 	//
; 805  : 	// Compute the sub object's relative attitude matrix
; 806  : 	//
; 807  : 
; 808  : 	get_3d_transformation_matrix ( relative_attitude, relative_heading, -relative_pitch, -relative_roll );

  005b0	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _relative_roll$[ebp]
  005b8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005bf	51		 push	 ecx
  005c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c5	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR _relative_pitch$[ebp]
  005cd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005d4	51		 push	 ecx
  005d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005da	51		 push	 ecx
  005db	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _relative_heading$[ebp]
  005e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e8	8d 45 cc	 lea	 eax, DWORD PTR _relative_attitude$[ebp]
  005eb	50		 push	 eax
  005ec	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 809  : 
; 810  : 	//
; 811  : 	// Calculate the sub object's rotation matrix, to transform its 3d points relative to the parent object.
; 812  : 	//
; 813  : 
; 814  : 	vp.xv.x = ( ( relative_attitude[0][0] * parent_viewpoint->xv.x ) + ( relative_attitude[0][1] * parent_viewpoint->yv.x ) + ( relative_attitude[0][2] * parent_viewpoint->zv.x ) );

  005f1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005f6	6b c8 00	 imul	 ecx, eax, 0
  005f9	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  005fd	b8 04 00 00 00	 mov	 eax, 4
  00602	6b c8 00	 imul	 ecx, eax, 0
  00605	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  00608	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0060d	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00612	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00617	6b d1 00	 imul	 edx, ecx, 0
  0061a	8d 44 15 cc	 lea	 eax, DWORD PTR _relative_attitude$[ebp+edx]
  0061e	b9 04 00 00 00	 mov	 ecx, 4
  00623	c1 e1 00	 shl	 ecx, 0
  00626	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00629	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  0062e	f3 0f 59 4a 18	 mulss	 xmm1, DWORD PTR [edx+24]
  00633	f3 0f 58 c1	 addss	 xmm0, xmm1
  00637	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0063c	6b c8 00	 imul	 ecx, eax, 0
  0063f	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  00643	b8 04 00 00 00	 mov	 eax, 4
  00648	d1 e0		 shl	 eax, 1
  0064a	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  0064d	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00652	f3 0f 59 49 24	 mulss	 xmm1, DWORD PTR [ecx+36]
  00657	f3 0f 58 c1	 addss	 xmm0, xmm1
  0065b	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+12], xmm0

; 815  : 	vp.xv.y = ( ( relative_attitude[0][0] * parent_viewpoint->xv.y ) + ( relative_attitude[0][1] * parent_viewpoint->yv.y ) + ( relative_attitude[0][2] * parent_viewpoint->zv.y ) );

  00663	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00668	6b c8 00	 imul	 ecx, eax, 0
  0066b	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  0066f	b8 04 00 00 00	 mov	 eax, 4
  00674	6b c8 00	 imul	 ecx, eax, 0
  00677	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  0067a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0067f	f3 0f 59 40 10	 mulss	 xmm0, DWORD PTR [eax+16]
  00684	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00689	6b d1 00	 imul	 edx, ecx, 0
  0068c	8d 44 15 cc	 lea	 eax, DWORD PTR _relative_attitude$[ebp+edx]
  00690	b9 04 00 00 00	 mov	 ecx, 4
  00695	c1 e1 00	 shl	 ecx, 0
  00698	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  0069b	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  006a0	f3 0f 59 4a 1c	 mulss	 xmm1, DWORD PTR [edx+28]
  006a5	f3 0f 58 c1	 addss	 xmm0, xmm1
  006a9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006ae	6b c8 00	 imul	 ecx, eax, 0
  006b1	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  006b5	b8 04 00 00 00	 mov	 eax, 4
  006ba	d1 e0		 shl	 eax, 1
  006bc	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  006bf	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  006c4	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  006c9	f3 0f 58 c1	 addss	 xmm0, xmm1
  006cd	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+16], xmm0

; 816  : 	vp.xv.z = ( ( relative_attitude[0][0] * parent_viewpoint->xv.z ) + ( relative_attitude[0][1] * parent_viewpoint->yv.z ) + ( relative_attitude[0][2] * parent_viewpoint->zv.z ) );

  006d5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006da	6b c8 00	 imul	 ecx, eax, 0
  006dd	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  006e1	b8 04 00 00 00	 mov	 eax, 4
  006e6	6b c8 00	 imul	 ecx, eax, 0
  006e9	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  006ec	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  006f1	f3 0f 59 40 14	 mulss	 xmm0, DWORD PTR [eax+20]
  006f6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006fb	6b d1 00	 imul	 edx, ecx, 0
  006fe	8d 44 15 cc	 lea	 eax, DWORD PTR _relative_attitude$[ebp+edx]
  00702	b9 04 00 00 00	 mov	 ecx, 4
  00707	c1 e1 00	 shl	 ecx, 0
  0070a	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  0070d	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  00712	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  00717	f3 0f 58 c1	 addss	 xmm0, xmm1
  0071b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00720	6b c8 00	 imul	 ecx, eax, 0
  00723	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  00727	b8 04 00 00 00	 mov	 eax, 4
  0072c	d1 e0		 shl	 eax, 1
  0072e	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00731	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00736	f3 0f 59 49 2c	 mulss	 xmm1, DWORD PTR [ecx+44]
  0073b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0073f	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+20], xmm0

; 817  : 
; 818  : 	vp.yv.x = ( ( relative_attitude[1][0] * parent_viewpoint->xv.x ) + ( relative_attitude[1][1] * parent_viewpoint->yv.x ) + ( relative_attitude[1][2] * parent_viewpoint->zv.x ) );

  00747	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0074c	c1 e0 00	 shl	 eax, 0
  0074f	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00753	ba 04 00 00 00	 mov	 edx, 4
  00758	6b c2 00	 imul	 eax, edx, 0
  0075b	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  0075e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00763	f3 0f 59 42 0c	 mulss	 xmm0, DWORD PTR [edx+12]
  00768	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0076d	c1 e0 00	 shl	 eax, 0
  00770	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00774	ba 04 00 00 00	 mov	 edx, 4
  00779	c1 e2 00	 shl	 edx, 0
  0077c	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  0077f	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00784	f3 0f 59 48 18	 mulss	 xmm1, DWORD PTR [eax+24]
  00789	f3 0f 58 c1	 addss	 xmm0, xmm1
  0078d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00792	c1 e1 00	 shl	 ecx, 0
  00795	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  00799	b8 04 00 00 00	 mov	 eax, 4
  0079e	d1 e0		 shl	 eax, 1
  007a0	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  007a3	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  007a8	f3 0f 59 49 24	 mulss	 xmm1, DWORD PTR [ecx+36]
  007ad	f3 0f 58 c1	 addss	 xmm0, xmm1
  007b1	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+24], xmm0

; 819  : 	vp.yv.y = ( ( relative_attitude[1][0] * parent_viewpoint->xv.y ) + ( relative_attitude[1][1] * parent_viewpoint->yv.y ) + ( relative_attitude[1][2] * parent_viewpoint->zv.y ) );

  007b9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007be	c1 e0 00	 shl	 eax, 0
  007c1	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  007c5	ba 04 00 00 00	 mov	 edx, 4
  007ca	6b c2 00	 imul	 eax, edx, 0
  007cd	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  007d0	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  007d5	f3 0f 59 42 10	 mulss	 xmm0, DWORD PTR [edx+16]
  007da	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007df	c1 e0 00	 shl	 eax, 0
  007e2	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  007e6	ba 04 00 00 00	 mov	 edx, 4
  007eb	c1 e2 00	 shl	 edx, 0
  007ee	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  007f1	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  007f6	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  007fb	f3 0f 58 c1	 addss	 xmm0, xmm1
  007ff	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00804	c1 e1 00	 shl	 ecx, 0
  00807	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  0080b	b8 04 00 00 00	 mov	 eax, 4
  00810	d1 e0		 shl	 eax, 1
  00812	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00815	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0081a	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  0081f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00823	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+28], xmm0

; 820  : 	vp.yv.z = ( ( relative_attitude[1][0] * parent_viewpoint->xv.z ) + ( relative_attitude[1][1] * parent_viewpoint->yv.z ) + ( relative_attitude[1][2] * parent_viewpoint->zv.z ) );

  0082b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00830	c1 e0 00	 shl	 eax, 0
  00833	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00837	ba 04 00 00 00	 mov	 edx, 4
  0083c	6b c2 00	 imul	 eax, edx, 0
  0083f	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00842	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00847	f3 0f 59 42 14	 mulss	 xmm0, DWORD PTR [edx+20]
  0084c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00851	c1 e0 00	 shl	 eax, 0
  00854	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00858	ba 04 00 00 00	 mov	 edx, 4
  0085d	c1 e2 00	 shl	 edx, 0
  00860	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  00863	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00868	f3 0f 59 48 20	 mulss	 xmm1, DWORD PTR [eax+32]
  0086d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00871	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00876	c1 e1 00	 shl	 ecx, 0
  00879	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  0087d	b8 04 00 00 00	 mov	 eax, 4
  00882	d1 e0		 shl	 eax, 1
  00884	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00887	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0088c	f3 0f 59 49 2c	 mulss	 xmm1, DWORD PTR [ecx+44]
  00891	f3 0f 58 c1	 addss	 xmm0, xmm1
  00895	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+32], xmm0

; 821  : 
; 822  : 	vp.zv.x = ( ( relative_attitude[2][0] * parent_viewpoint->xv.x ) + ( relative_attitude[2][1] * parent_viewpoint->yv.x ) + ( relative_attitude[2][2] * parent_viewpoint->zv.x ) );

  0089d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008a2	d1 e0		 shl	 eax, 1
  008a4	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  008a8	ba 04 00 00 00	 mov	 edx, 4
  008ad	6b c2 00	 imul	 eax, edx, 0
  008b0	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  008b3	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  008b8	f3 0f 59 42 0c	 mulss	 xmm0, DWORD PTR [edx+12]
  008bd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008c2	d1 e0		 shl	 eax, 1
  008c4	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  008c8	ba 04 00 00 00	 mov	 edx, 4
  008cd	c1 e2 00	 shl	 edx, 0
  008d0	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  008d3	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  008d8	f3 0f 59 48 18	 mulss	 xmm1, DWORD PTR [eax+24]
  008dd	f3 0f 58 c1	 addss	 xmm0, xmm1
  008e1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  008e6	d1 e1		 shl	 ecx, 1
  008e8	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  008ec	b8 04 00 00 00	 mov	 eax, 4
  008f1	d1 e0		 shl	 eax, 1
  008f3	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  008f6	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  008fb	f3 0f 59 49 24	 mulss	 xmm1, DWORD PTR [ecx+36]
  00900	f3 0f 58 c1	 addss	 xmm0, xmm1
  00904	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+36], xmm0

; 823  : 	vp.zv.y = ( ( relative_attitude[2][0] * parent_viewpoint->xv.y ) + ( relative_attitude[2][1] * parent_viewpoint->yv.y ) + ( relative_attitude[2][2] * parent_viewpoint->zv.y ) );

  0090c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00911	d1 e0		 shl	 eax, 1
  00913	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00917	ba 04 00 00 00	 mov	 edx, 4
  0091c	6b c2 00	 imul	 eax, edx, 0
  0091f	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00922	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00927	f3 0f 59 42 10	 mulss	 xmm0, DWORD PTR [edx+16]
  0092c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00931	d1 e0		 shl	 eax, 1
  00933	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00937	ba 04 00 00 00	 mov	 edx, 4
  0093c	c1 e2 00	 shl	 edx, 0
  0093f	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  00942	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00947	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  0094c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00950	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00955	d1 e1		 shl	 ecx, 1
  00957	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  0095b	b8 04 00 00 00	 mov	 eax, 4
  00960	d1 e0		 shl	 eax, 1
  00962	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00965	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0096a	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  0096f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00973	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+40], xmm0

; 824  : 	vp.zv.z = ( ( relative_attitude[2][0] * parent_viewpoint->xv.z ) + ( relative_attitude[2][1] * parent_viewpoint->yv.z ) + ( relative_attitude[2][2] * parent_viewpoint->zv.z ) );

  0097b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00980	d1 e0		 shl	 eax, 1
  00982	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00986	ba 04 00 00 00	 mov	 edx, 4
  0098b	6b c2 00	 imul	 eax, edx, 0
  0098e	8b 55 10	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00991	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00996	f3 0f 59 42 14	 mulss	 xmm0, DWORD PTR [edx+20]
  0099b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009a0	d1 e0		 shl	 eax, 1
  009a2	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  009a6	ba 04 00 00 00	 mov	 edx, 4
  009ab	c1 e2 00	 shl	 edx, 0
  009ae	8b 45 10	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  009b1	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  009b6	f3 0f 59 48 20	 mulss	 xmm1, DWORD PTR [eax+32]
  009bb	f3 0f 58 c1	 addss	 xmm0, xmm1
  009bf	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  009c4	d1 e1		 shl	 ecx, 1
  009c6	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  009ca	b8 04 00 00 00	 mov	 eax, 4
  009cf	d1 e0		 shl	 eax, 1
  009d1	8b 4d 10	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  009d4	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  009d9	f3 0f 59 49 2c	 mulss	 xmm1, DWORD PTR [ecx+44]
  009de	f3 0f 58 c1	 addss	 xmm0, xmm1
  009e2	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+44], xmm0

; 825  : 
; 826  : 	//
; 827  : 	// Calculate the main matrix to transform the points to the screen
; 828  : 	//
; 829  : 
; 830  : 	rotation_3d[0][0] = ( ( vp.xv.x * visual_3d_vp->xv.x ) + ( vp.xv.y * visual_3d_vp->xv.y ) + ( vp.xv.z * visual_3d_vp->xv.z ) );

  009ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  009ef	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+12]
  009f7	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  009fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a02	f3 0f 10 8d 14
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+16]
  00a0a	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  00a0f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a13	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a19	f3 0f 10 8d 18
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+20]
  00a21	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00a26	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a2a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a2f	6b c8 00	 imul	 ecx, eax, 0
  00a32	ba 04 00 00 00	 mov	 edx, 4
  00a37	6b c2 00	 imul	 eax, edx, 0
  00a3a	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 831  : 	rotation_3d[0][1] = ( ( vp.xv.x * visual_3d_vp->yv.x ) + ( vp.xv.y * visual_3d_vp->yv.y ) + ( vp.xv.z * visual_3d_vp->yv.z ) );

  00a43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a48	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+12]
  00a50	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00a55	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a5b	f3 0f 10 8d 14
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+16]
  00a63	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  00a68	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a6c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a72	f3 0f 10 8d 18
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+20]
  00a7a	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  00a7f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a83	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a88	6b c8 00	 imul	 ecx, eax, 0
  00a8b	ba 04 00 00 00	 mov	 edx, 4
  00a90	c1 e2 00	 shl	 edx, 0
  00a93	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 832  : 	rotation_3d[0][2] = ( ( vp.xv.x * visual_3d_vp->zv.x ) + ( vp.xv.y * visual_3d_vp->zv.y ) + ( vp.xv.z * visual_3d_vp->zv.z ) );

  00a9c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00aa1	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+12]
  00aa9	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  00aae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00ab4	f3 0f 10 8d 14
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+16]
  00abc	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  00ac1	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ac5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00acb	f3 0f 10 8d 18
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+20]
  00ad3	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00ad8	f3 0f 58 c1	 addss	 xmm0, xmm1
  00adc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ae1	6b c8 00	 imul	 ecx, eax, 0
  00ae4	ba 04 00 00 00	 mov	 edx, 4
  00ae9	d1 e2		 shl	 edx, 1
  00aeb	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 833  : 
; 834  : 	rotation_3d[1][0] = ( ( vp.yv.x * visual_3d_vp->xv.x ) + ( vp.yv.y * visual_3d_vp->xv.y ) + ( vp.yv.z * visual_3d_vp->xv.z ) );

  00af4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00af9	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+24]
  00b01	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00b06	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b0c	f3 0f 10 8d 20
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+28]
  00b14	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  00b19	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b1d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b23	f3 0f 10 8d 24
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+32]
  00b2b	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00b30	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b34	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b39	c1 e0 00	 shl	 eax, 0
  00b3c	b9 04 00 00 00	 mov	 ecx, 4
  00b41	6b d1 00	 imul	 edx, ecx, 0
  00b44	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 835  : 	rotation_3d[1][1] = ( ( vp.yv.x * visual_3d_vp->yv.x ) + ( vp.yv.y * visual_3d_vp->yv.y ) + ( vp.yv.z * visual_3d_vp->yv.z ) );

  00b4d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b52	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+24]
  00b5a	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00b5f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b65	f3 0f 10 8d 20
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+28]
  00b6d	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  00b72	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b76	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b7c	f3 0f 10 8d 24
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+32]
  00b84	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  00b89	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b8d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b92	c1 e0 00	 shl	 eax, 0
  00b95	b9 04 00 00 00	 mov	 ecx, 4
  00b9a	c1 e1 00	 shl	 ecx, 0
  00b9d	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 836  : 	rotation_3d[1][2] = ( ( vp.yv.x * visual_3d_vp->zv.x ) + ( vp.yv.y * visual_3d_vp->zv.y ) + ( vp.yv.z * visual_3d_vp->zv.z ) );

  00ba6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00bab	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+24]
  00bb3	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  00bb8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00bbe	f3 0f 10 8d 20
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+28]
  00bc6	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  00bcb	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bcf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00bd5	f3 0f 10 8d 24
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+32]
  00bdd	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00be2	f3 0f 58 c1	 addss	 xmm0, xmm1
  00be6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00beb	c1 e0 00	 shl	 eax, 0
  00bee	b9 04 00 00 00	 mov	 ecx, 4
  00bf3	d1 e1		 shl	 ecx, 1
  00bf5	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 837  : 
; 838  : 	rotation_3d[2][0] = ( ( vp.zv.x * visual_3d_vp->xv.x ) + ( vp.zv.y * visual_3d_vp->xv.y ) + ( vp.zv.z * visual_3d_vp->xv.z ) );

  00bfe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00c03	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+36]
  00c0b	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00c10	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00c16	f3 0f 10 8d 2c
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+40]
  00c1e	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  00c23	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c27	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00c2d	f3 0f 10 8d 30
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+44]
  00c35	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00c3a	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c3e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c43	d1 e0		 shl	 eax, 1
  00c45	b9 04 00 00 00	 mov	 ecx, 4
  00c4a	6b d1 00	 imul	 edx, ecx, 0
  00c4d	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 839  : 	rotation_3d[2][1] = ( ( vp.zv.x * visual_3d_vp->yv.x ) + ( vp.zv.y * visual_3d_vp->yv.y ) + ( vp.zv.z * visual_3d_vp->yv.z ) );

  00c56	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00c5b	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+36]
  00c63	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00c68	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00c6e	f3 0f 10 8d 2c
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+40]
  00c76	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  00c7b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c7f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00c85	f3 0f 10 8d 30
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+44]
  00c8d	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  00c92	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c96	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c9b	d1 e0		 shl	 eax, 1
  00c9d	b9 04 00 00 00	 mov	 ecx, 4
  00ca2	c1 e1 00	 shl	 ecx, 0
  00ca5	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 840  : 	rotation_3d[2][2] = ( ( vp.zv.x * visual_3d_vp->zv.x ) + ( vp.zv.y * visual_3d_vp->zv.y ) + ( vp.zv.z * visual_3d_vp->zv.z ) );

  00cae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00cb3	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+36]
  00cbb	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  00cc0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00cc6	f3 0f 10 8d 2c
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+40]
  00cce	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  00cd3	f3 0f 58 c1	 addss	 xmm0, xmm1
  00cd7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00cdd	f3 0f 10 8d 30
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+44]
  00ce5	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00cea	f3 0f 58 c1	 addss	 xmm0, xmm1
  00cee	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00cf3	d1 e0		 shl	 eax, 1
  00cf5	b9 04 00 00 00	 mov	 ecx, 4
  00cfa	d1 e1		 shl	 ecx, 1
  00cfc	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 841  : 
; 842  : 	//
; 843  : 	// Scale the rotation matrix
; 844  : 	//
; 845  : 
; 846  : 	rotation_3d[0][0] *= object_3d_scale.x;

  00d05	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d0a	6b c8 00	 imul	 ecx, eax, 0
  00d0d	ba 04 00 00 00	 mov	 edx, 4
  00d12	6b c2 00	 imul	 eax, edx, 0
  00d15	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00d1e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00d26	b9 04 00 00 00	 mov	 ecx, 4
  00d2b	6b d1 00	 imul	 edx, ecx, 0
  00d2e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d33	6b c8 00	 imul	 ecx, eax, 0
  00d36	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 847  : 	rotation_3d[1][0] *= object_3d_scale.y;

  00d3f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d44	c1 e0 00	 shl	 eax, 0
  00d47	b9 04 00 00 00	 mov	 ecx, 4
  00d4c	6b d1 00	 imul	 edx, ecx, 0
  00d4f	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00d58	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00d60	b8 04 00 00 00	 mov	 eax, 4
  00d65	6b c8 00	 imul	 ecx, eax, 0
  00d68	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00d6d	c1 e2 00	 shl	 edx, 0
  00d70	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx], xmm0

; 848  : 	rotation_3d[2][0] *= object_3d_scale.z;

  00d79	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d7e	d1 e0		 shl	 eax, 1
  00d80	b9 04 00 00 00	 mov	 ecx, 4
  00d85	6b d1 00	 imul	 edx, ecx, 0
  00d88	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00d91	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  00d99	b8 04 00 00 00	 mov	 eax, 4
  00d9e	6b c8 00	 imul	 ecx, eax, 0
  00da1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00da6	d1 e2		 shl	 edx, 1
  00da8	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx], xmm0

; 849  : 
; 850  : 	rotation_3d[0][1] *= object_3d_scale.x;

  00db1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00db6	6b c8 00	 imul	 ecx, eax, 0
  00db9	ba 04 00 00 00	 mov	 edx, 4
  00dbe	c1 e2 00	 shl	 edx, 0
  00dc1	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00dca	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00dd2	b8 04 00 00 00	 mov	 eax, 4
  00dd7	c1 e0 00	 shl	 eax, 0
  00dda	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00ddf	6b d1 00	 imul	 edx, ecx, 0
  00de2	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 851  : 	rotation_3d[1][1] *= object_3d_scale.y;

  00deb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00df0	c1 e0 00	 shl	 eax, 0
  00df3	b9 04 00 00 00	 mov	 ecx, 4
  00df8	c1 e1 00	 shl	 ecx, 0
  00dfb	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00e04	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00e0c	ba 04 00 00 00	 mov	 edx, 4
  00e11	c1 e2 00	 shl	 edx, 0
  00e14	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e19	c1 e0 00	 shl	 eax, 0
  00e1c	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 852  : 	rotation_3d[2][1] *= object_3d_scale.z;

  00e25	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e2a	d1 e0		 shl	 eax, 1
  00e2c	b9 04 00 00 00	 mov	 ecx, 4
  00e31	c1 e1 00	 shl	 ecx, 0
  00e34	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00e3d	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  00e45	ba 04 00 00 00	 mov	 edx, 4
  00e4a	c1 e2 00	 shl	 edx, 0
  00e4d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e52	d1 e0		 shl	 eax, 1
  00e54	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 853  : 
; 854  : 	rotation_3d[0][2] *= object_3d_scale.x;

  00e5d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e62	6b c8 00	 imul	 ecx, eax, 0
  00e65	ba 04 00 00 00	 mov	 edx, 4
  00e6a	d1 e2		 shl	 edx, 1
  00e6c	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00e75	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00e7d	b8 04 00 00 00	 mov	 eax, 4
  00e82	d1 e0		 shl	 eax, 1
  00e84	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00e89	6b d1 00	 imul	 edx, ecx, 0
  00e8c	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 855  : 	rotation_3d[1][2] *= object_3d_scale.y;

  00e95	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e9a	c1 e0 00	 shl	 eax, 0
  00e9d	b9 04 00 00 00	 mov	 ecx, 4
  00ea2	d1 e1		 shl	 ecx, 1
  00ea4	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00ead	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00eb5	ba 04 00 00 00	 mov	 edx, 4
  00eba	d1 e2		 shl	 edx, 1
  00ebc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ec1	c1 e0 00	 shl	 eax, 0
  00ec4	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 856  : 	rotation_3d[2][2] *= object_3d_scale.z;

  00ecd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ed2	d1 e0		 shl	 eax, 1
  00ed4	b9 04 00 00 00	 mov	 ecx, 4
  00ed9	d1 e1		 shl	 ecx, 1
  00edb	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00ee4	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  00eec	ba 04 00 00 00	 mov	 edx, 4
  00ef1	d1 e2		 shl	 edx, 1
  00ef3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ef8	d1 e0		 shl	 eax, 1
  00efa	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 857  : 
; 858  : 	if ( object_number )

  00f03	83 7d f8 00	 cmp	 DWORD PTR _object_number$[ebp], 0
  00f07	0f 84 1a 07 00
	00		 je	 $LN25@draw_sub_o

; 859  : 	{
; 860  : 
; 861  : 		//
; 862  : 		// Calculate the relative camera position in the object viewspace
; 863  : 		//
; 864  : 	
; 865  : 		{
; 866  : 	
; 867  : 			vec3d
; 868  : 				rel_pos;
; 869  : 	
; 870  : 			rel_pos.x = visual_3d_vp->x - vp.x;

  00f0d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00f12	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00f16	f3 0f 5c 85 04
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp]
  00f1e	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _rel_pos$6[ebp], xmm0

; 871  : 			rel_pos.y = visual_3d_vp->y - vp.y;

  00f26	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00f2b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00f30	f3 0f 5c 85 08
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+4]
  00f38	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _rel_pos$6[ebp+4], xmm0

; 872  : 			rel_pos.z = visual_3d_vp->z - vp.z;

  00f40	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00f45	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00f4a	f3 0f 5c 85 0c
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+8]
  00f52	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _rel_pos$6[ebp+8], xmm0

; 873  : 	
; 874  : 			object_camera_position.x = ( rel_pos.x * vp.attitude[0][0] + rel_pos.y * vp.attitude[0][1] + rel_pos.z * vp.attitude[0][2] );

  00f5a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00f5f	6b c8 00	 imul	 ecx, eax, 0
  00f62	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  00f69	b8 04 00 00 00	 mov	 eax, 4
  00f6e	6b c8 00	 imul	 ecx, eax, 0
  00f71	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _rel_pos$6[ebp]
  00f79	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  00f7e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00f83	6b c2 00	 imul	 eax, edx, 0
  00f86	8d 8c 05 10 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  00f8d	ba 04 00 00 00	 mov	 edx, 4
  00f92	c1 e2 00	 shl	 edx, 0
  00f95	f3 0f 10 8d f4
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$6[ebp+4]
  00f9d	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  00fa2	f3 0f 58 c1	 addss	 xmm0, xmm1
  00fa6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00fab	6b c8 00	 imul	 ecx, eax, 0
  00fae	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  00fb5	b8 04 00 00 00	 mov	 eax, 4
  00fba	d1 e0		 shl	 eax, 1
  00fbc	f3 0f 10 8d f8
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$6[ebp+8]
  00fc4	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00fc9	f3 0f 58 c1	 addss	 xmm0, xmm1
  00fcd	f3 0f 11 45 9c	 movss	 DWORD PTR _object_camera_position$[ebp], xmm0

; 875  : 			object_camera_position.y = ( rel_pos.x * vp.attitude[1][0] + rel_pos.y * vp.attitude[1][1] + rel_pos.z * vp.attitude[1][2] );

  00fd2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00fd7	c1 e0 00	 shl	 eax, 0
  00fda	8d 8c 05 10 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  00fe1	ba 04 00 00 00	 mov	 edx, 4
  00fe6	6b c2 00	 imul	 eax, edx, 0
  00fe9	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _rel_pos$6[ebp]
  00ff1	f3 0f 59 04 01	 mulss	 xmm0, DWORD PTR [ecx+eax]
  00ff6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00ffb	c1 e1 00	 shl	 ecx, 0
  00ffe	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  01005	b8 04 00 00 00	 mov	 eax, 4
  0100a	c1 e0 00	 shl	 eax, 0
  0100d	f3 0f 10 8d f4
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$6[ebp+4]
  01015	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  0101a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0101e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01023	c1 e1 00	 shl	 ecx, 0
  01026	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  0102d	b8 04 00 00 00	 mov	 eax, 4
  01032	d1 e0		 shl	 eax, 1
  01034	f3 0f 10 8d f8
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$6[ebp+8]
  0103c	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  01041	f3 0f 58 c1	 addss	 xmm0, xmm1
  01045	f3 0f 11 45 a0	 movss	 DWORD PTR _object_camera_position$[ebp+4], xmm0

; 876  : 			object_camera_position.z = ( rel_pos.x * vp.attitude[2][0] + rel_pos.y * vp.attitude[2][1] + rel_pos.z * vp.attitude[2][2] );

  0104a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0104f	d1 e0		 shl	 eax, 1
  01051	8d 8c 05 10 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  01058	ba 04 00 00 00	 mov	 edx, 4
  0105d	6b c2 00	 imul	 eax, edx, 0
  01060	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _rel_pos$6[ebp]
  01068	f3 0f 59 04 01	 mulss	 xmm0, DWORD PTR [ecx+eax]
  0106d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01072	d1 e1		 shl	 ecx, 1
  01074	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  0107b	b8 04 00 00 00	 mov	 eax, 4
  01080	c1 e0 00	 shl	 eax, 0
  01083	f3 0f 10 8d f4
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$6[ebp+4]
  0108b	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  01090	f3 0f 58 c1	 addss	 xmm0, xmm1
  01094	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01099	d1 e1		 shl	 ecx, 1
  0109b	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  010a2	b8 04 00 00 00	 mov	 eax, 4
  010a7	d1 e0		 shl	 eax, 1
  010a9	f3 0f 10 8d f8
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$6[ebp+8]
  010b1	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  010b6	f3 0f 58 c1	 addss	 xmm0, xmm1
  010ba	f3 0f 11 45 a4	 movss	 DWORD PTR _object_camera_position$[ebp+8], xmm0

; 877  : 	
; 878  : 			object_camera_direction.x = ( visual_3d_vp->zv.x * vp.attitude[0][0] + visual_3d_vp->zv.y * vp.attitude[1][0] + visual_3d_vp->zv.z * vp.attitude[2][0] );

  010bf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  010c4	6b c8 00	 imul	 ecx, eax, 0
  010c7	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  010ce	b8 04 00 00 00	 mov	 eax, 4
  010d3	6b c8 00	 imul	 ecx, eax, 0
  010d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  010db	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  010e0	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  010e5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  010ea	c1 e1 00	 shl	 ecx, 0
  010ed	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  010f4	b8 04 00 00 00	 mov	 eax, 4
  010f9	6b c8 00	 imul	 ecx, eax, 0
  010fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01101	f3 0f 10 48 28	 movss	 xmm1, DWORD PTR [eax+40]
  01106	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  0110b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0110f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01114	d1 e1		 shl	 ecx, 1
  01116	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  0111d	b8 04 00 00 00	 mov	 eax, 4
  01122	6b c8 00	 imul	 ecx, eax, 0
  01125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0112a	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  0112f	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  01134	f3 0f 58 c1	 addss	 xmm0, xmm1
  01138	f3 0f 11 45 90	 movss	 DWORD PTR _object_camera_direction$[ebp], xmm0

; 879  : 			object_camera_direction.y = ( visual_3d_vp->zv.x * vp.attitude[0][1] + visual_3d_vp->zv.y * vp.attitude[1][1] + visual_3d_vp->zv.z * vp.attitude[2][1] );

  0113d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01142	6b c8 00	 imul	 ecx, eax, 0
  01145	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  0114c	b8 04 00 00 00	 mov	 eax, 4
  01151	c1 e0 00	 shl	 eax, 0
  01154	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0115a	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  0115f	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  01164	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01169	c1 e2 00	 shl	 edx, 0
  0116c	8d 84 15 10 ff
	ff ff		 lea	 eax, DWORD PTR _vp$[ebp+edx+12]
  01173	b9 04 00 00 00	 mov	 ecx, 4
  01178	c1 e1 00	 shl	 ecx, 0
  0117b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01181	f3 0f 10 4a 28	 movss	 xmm1, DWORD PTR [edx+40]
  01186	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  0118b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0118f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01194	d1 e0		 shl	 eax, 1
  01196	8d 8c 05 10 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  0119d	ba 04 00 00 00	 mov	 edx, 4
  011a2	c1 e2 00	 shl	 edx, 0
  011a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  011aa	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  011af	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  011b4	f3 0f 58 c1	 addss	 xmm0, xmm1
  011b8	f3 0f 11 45 94	 movss	 DWORD PTR _object_camera_direction$[ebp+4], xmm0

; 880  : 			object_camera_direction.z = ( visual_3d_vp->zv.x * vp.attitude[0][2] + visual_3d_vp->zv.y * vp.attitude[1][2] + visual_3d_vp->zv.z * vp.attitude[2][2] );

  011bd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  011c2	6b c8 00	 imul	 ecx, eax, 0
  011c5	8d 94 0d 10 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  011cc	b8 04 00 00 00	 mov	 eax, 4
  011d1	d1 e0		 shl	 eax, 1
  011d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  011d9	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  011de	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  011e3	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  011e8	c1 e2 00	 shl	 edx, 0
  011eb	8d 84 15 10 ff
	ff ff		 lea	 eax, DWORD PTR _vp$[ebp+edx+12]
  011f2	b9 04 00 00 00	 mov	 ecx, 4
  011f7	d1 e1		 shl	 ecx, 1
  011f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  011ff	f3 0f 10 4a 28	 movss	 xmm1, DWORD PTR [edx+40]
  01204	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  01209	f3 0f 58 c1	 addss	 xmm0, xmm1
  0120d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01212	d1 e0		 shl	 eax, 1
  01214	8d 8c 05 10 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  0121b	ba 04 00 00 00	 mov	 edx, 4
  01220	d1 e2		 shl	 edx, 1
  01222	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01227	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  0122c	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  01231	f3 0f 58 c1	 addss	 xmm0, xmm1
  01235	f3 0f 11 45 98	 movss	 DWORD PTR _object_camera_direction$[ebp+8], xmm0

; 881  : 		}
; 882  : 	
; 883  : 		//
; 884  : 		// Calculate the vector from the object to the viewpoint, in the object's view system
; 885  : 		//
; 886  : 	
; 887  : 		{
; 888  : 	
; 889  : 			float
; 890  : 				x,
; 891  : 				y,
; 892  : 				z;
; 893  : 	
; 894  : 			x = ( ( visual_3d_vp->x - vp.x ) * vp.xv.x );

  0123a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0123f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01243	f3 0f 5c 85 04
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp]
  0124b	f3 0f 59 85 10
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+12]
  01253	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _x$5[ebp], xmm0

; 895  : 			x += ( ( visual_3d_vp->y - vp.y ) *  vp.xv.y );

  0125b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01260	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01265	f3 0f 5c 85 08
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+4]
  0126d	f3 0f 59 85 14
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+16]
  01275	f3 0f 58 85 ec
	fe ff ff	 addss	 xmm0, DWORD PTR _x$5[ebp]
  0127d	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _x$5[ebp], xmm0

; 896  : 			x += ( ( visual_3d_vp->z - vp.z ) *  vp.xv.z );

  01285	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0128a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0128f	f3 0f 5c 85 0c
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+8]
  01297	f3 0f 59 85 18
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+20]
  0129f	f3 0f 58 85 ec
	fe ff ff	 addss	 xmm0, DWORD PTR _x$5[ebp]
  012a7	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _x$5[ebp], xmm0

; 897  : 	
; 898  : 			y = ( ( visual_3d_vp->x - vp.x ) * vp.yv.x );

  012af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  012b4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  012b8	f3 0f 5c 85 04
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp]
  012c0	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+24]
  012c8	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _y$4[ebp], xmm0

; 899  : 			y += ( ( visual_3d_vp->y - vp.y ) *  vp.yv.y );

  012d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  012d5	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  012da	f3 0f 5c 85 08
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+4]
  012e2	f3 0f 59 85 20
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+28]
  012ea	f3 0f 58 85 e8
	fe ff ff	 addss	 xmm0, DWORD PTR _y$4[ebp]
  012f2	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _y$4[ebp], xmm0

; 900  : 			y += ( ( visual_3d_vp->z - vp.z ) *  vp.yv.z );

  012fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  012ff	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01304	f3 0f 5c 85 0c
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+8]
  0130c	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+32]
  01314	f3 0f 58 85 e8
	fe ff ff	 addss	 xmm0, DWORD PTR _y$4[ebp]
  0131c	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _y$4[ebp], xmm0

; 901  : 	
; 902  : 			z = ( ( visual_3d_vp->x - vp.x ) * vp.zv.x );

  01324	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01329	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0132d	f3 0f 5c 85 04
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp]
  01335	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+36]
  0133d	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _z$3[ebp], xmm0

; 903  : 			z += ( ( visual_3d_vp->y - vp.y ) *  vp.zv.y );

  01345	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0134a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0134f	f3 0f 5c 85 08
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+4]
  01357	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+40]
  0135f	f3 0f 58 85 e4
	fe ff ff	 addss	 xmm0, DWORD PTR _z$3[ebp]
  01367	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _z$3[ebp], xmm0

; 904  : 			z += ( ( visual_3d_vp->z - vp.z ) *  vp.zv.z );

  0136f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01374	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01379	f3 0f 5c 85 0c
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+8]
  01381	f3 0f 59 85 30
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+44]
  01389	f3 0f 58 85 e4
	fe ff ff	 addss	 xmm0, DWORD PTR _z$3[ebp]
  01391	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _z$3[ebp], xmm0

; 905  : 	
; 906  : 			object_unit_pos.x = x;

  01399	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _x$5[ebp]
  013a1	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _object_unit_pos$[ebp], xmm0

; 907  : 			object_unit_pos.y = y;

  013a9	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _y$4[ebp]
  013b1	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _object_unit_pos$[ebp+4], xmm0

; 908  : 			object_unit_pos.z = z;

  013b9	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _z$3[ebp]
  013c1	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _object_unit_pos$[ebp+8], xmm0

; 909  : 	
; 910  : 			normalise_any_3d_vector ( &object_unit_pos );

  013c9	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _object_unit_pos$[ebp]
  013cf	50		 push	 eax
  013d0	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  013d5	dd d8		 fstp	 ST(0)

; 911  : 
; 912  : 			current_object_3d_unit_position = &object_unit_pos;

  013d7	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _object_unit_pos$[ebp]
  013dd	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_unit_position@@3PAUVEC3D@@A, eax ; current_object_3d_unit_position

; 913  : 		}
; 914  : 	
; 915  : 		//
; 916  : 		// Rotate the light source vector to be relative to the object.
; 917  : 		//
; 918  : 	
; 919  : 		light = generate_relative_lights ( &vp, current_object_3d_unit_position, current_3d_lights );

  013e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A ; current_3d_lights
  013e7	50		 push	 eax
  013e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_unit_position@@3PAUVEC3D@@A ; current_object_3d_unit_position
  013ee	51		 push	 ecx
  013ef	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR _vp$[ebp]
  013f5	52		 push	 edx
  013f6	e8 00 00 00 00	 call	 ?generate_relative_lights@@YGPAULIGHT_3D_SOURCE@@PAUVIEWPOINT@@PAUVEC3D@@PAU1@@Z ; generate_relative_lights
  013fb	89 85 34 ff ff
	ff		 mov	 DWORD PTR _light$[ebp], eax

; 920  : 	
; 921  : 		object_3d_object_base[object_3d_object_current_base].lights = light;

  01401	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  01408	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR _light$[ebp]
  0140e	89 88 04 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+4], ecx

; 922  : 	
; 923  : 		//
; 924  : 		//	Set up this objects' object info structure
; 925  : 		//
; 926  : 	
; 927  : 		object_3d_object_base[object_3d_object_current_base].points_base = object_3d_points_current_base;

  01414	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  0141b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  01421	89 88 24 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+36], ecx

; 928  : 		object_3d_object_base[object_3d_object_current_base].camera_position = object_camera_position;

  01427	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  0142e	05 08 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A+8
  01433	8b 4d 9c	 mov	 ecx, DWORD PTR _object_camera_position$[ebp]
  01436	89 08		 mov	 DWORD PTR [eax], ecx
  01438	8b 55 a0	 mov	 edx, DWORD PTR _object_camera_position$[ebp+4]
  0143b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0143e	8b 4d a4	 mov	 ecx, DWORD PTR _object_camera_position$[ebp+8]
  01441	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 929  : 		object_3d_object_base[object_3d_object_current_base].camera_direction = object_camera_direction;

  01444	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  0144b	05 14 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A+20
  01450	8b 4d 90	 mov	 ecx, DWORD PTR _object_camera_direction$[ebp]
  01453	89 08		 mov	 DWORD PTR [eax], ecx
  01455	8b 55 94	 mov	 edx, DWORD PTR _object_camera_direction$[ebp+4]
  01458	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0145b	8b 4d 98	 mov	 ecx, DWORD PTR _object_camera_direction$[ebp+8]
  0145e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 930  : 		object_3d_object_base[object_3d_object_current_base].object_vp = &vp;

  01461	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  01468	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _vp$[ebp]
  0146e	89 88 28 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+40], ecx

; 931  : 		object_3d_object_base[object_3d_object_current_base].object_number = object_number;

  01474	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  0147b	8b 4d f8	 mov	 ecx, DWORD PTR _object_number$[ebp]
  0147e	89 88 20 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+32], ecx

; 932  : 	
; 933  : 		current_object_3d_object_base = &object_3d_object_base[object_3d_object_current_base];

  01484	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  0148b	05 00 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A ; object_3d_object_base
  01490	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A, eax ; current_object_3d_object_base

; 934  : 	
; 935  : 		if ( objects_3d_data[object_number].number_of_points )

  01495	6b 45 f8 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  01499	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0149f	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  014a3	85 d2		 test	 edx, edx
  014a5	0f 84 7c 01 00
	00		 je	 $LN25@draw_sub_o

; 936  : 		{
; 937  : 		
; 938  : 			int
; 939  : 				object_outcode;
; 940  : 	
; 941  : 			//
; 942  : 			// Setup the objects scaling information
; 943  : 			//
; 944  : 		
; 945  : 			if ( !get_object_3d_outcode ( object_number, current_object_3d_relative_position, &object_outcode ) )

  014ab	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _object_outcode$2[ebp]
  014b1	50		 push	 eax
  014b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  014b8	51		 push	 ecx
  014b9	8b 55 f8	 mov	 edx, DWORD PTR _object_number$[ebp]
  014bc	52		 push	 edx
  014bd	e8 00 00 00 00	 call	 ?get_object_3d_outcode@@YGHHPAUVEC3D@@PAH@Z ; get_object_3d_outcode
  014c2	85 c0		 test	 eax, eax
  014c4	0f 85 5d 01 00
	00		 jne	 $LN25@draw_sub_o

; 946  : 			{
; 947  : 		
; 948  : 				illuminate_3d_object ( &objects_3d_data[object_number], current_object_3d_relative_position, object_3d_object_base[object_3d_object_current_base].lights, &object_camera_position, object_3d_points_current_base );

  014ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  014cf	50		 push	 eax
  014d0	8d 4d 9c	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  014d3	51		 push	 ecx
  014d4	6b 15 00 00 00
	00 2c		 imul	 edx, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  014db	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[edx+4]
  014e1	50		 push	 eax
  014e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  014e8	51		 push	 ecx
  014e9	6b 55 f8 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  014ed	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  014f3	52		 push	 edx
  014f4	e8 00 00 00 00	 call	 ?illuminate_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; illuminate_3d_object

; 949  : 
; 950  : 				if ( object_outcode )

  014f9	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _object_outcode$2[ebp], 0
  01500	74 6b		 je	 SHORT $LN13@draw_sub_o

; 951  : 				{
; 952  : 		
; 953  : 					if ( current_3d_object_is_flat )

  01502	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_3d_object_is_flat@@3HA, 0 ; current_3d_object_is_flat
  01509	74 31		 je	 SHORT $LN15@draw_sub_o

; 954  : 					{
; 955  : 			
; 956  : 						transform_flat_3d_object ( &objects_3d_data[object_number], current_object_3d_relative_position, object_3d_object_base[object_3d_object_current_base].lights, &object_camera_position, object_3d_points_current_base );

  0150b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  01510	50		 push	 eax
  01511	8d 4d 9c	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  01514	51		 push	 ecx
  01515	6b 15 00 00 00
	00 2c		 imul	 edx, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  0151c	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[edx+4]
  01522	50		 push	 eax
  01523	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  01529	51		 push	 ecx
  0152a	6b 55 f8 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  0152e	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  01534	52		 push	 edx
  01535	e8 00 00 00 00	 call	 ?transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_flat_3d_object

; 957  : 					}
; 958  : 					else

  0153a	eb 2f		 jmp	 SHORT $LN16@draw_sub_o
$LN15@draw_sub_o:

; 959  : 					{
; 960  : 			
; 961  : 						transform_3d_object ( &objects_3d_data[object_number], current_object_3d_relative_position, object_3d_object_base[object_3d_object_current_base].lights, &object_camera_position, object_3d_points_current_base );

  0153c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  01541	50		 push	 eax
  01542	8d 4d 9c	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  01545	51		 push	 ecx
  01546	6b 15 00 00 00
	00 2c		 imul	 edx, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  0154d	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[edx+4]
  01553	50		 push	 eax
  01554	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  0155a	51		 push	 ecx
  0155b	6b 55 f8 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  0155f	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  01565	52		 push	 edx
  01566	e8 00 00 00 00	 call	 ?transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_3d_object
$LN16@draw_sub_o:

; 962  : 					}
; 963  : 				}
; 964  : 				else

  0156b	eb 69		 jmp	 SHORT $LN18@draw_sub_o
$LN13@draw_sub_o:

; 965  : 				{
; 966  : 		
; 967  : 					if ( current_3d_object_is_flat )

  0156d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_3d_object_is_flat@@3HA, 0 ; current_3d_object_is_flat
  01574	74 31		 je	 SHORT $LN17@draw_sub_o

; 968  : 					{
; 969  : 			
; 970  : 						transform_unclipped_flat_3d_object ( &objects_3d_data[object_number], current_object_3d_relative_position, object_3d_object_base[object_3d_object_current_base].lights, &object_camera_position, object_3d_points_current_base );

  01576	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  0157b	50		 push	 eax
  0157c	8d 4d 9c	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  0157f	51		 push	 ecx
  01580	6b 15 00 00 00
	00 2c		 imul	 edx, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  01587	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[edx+4]
  0158d	50		 push	 eax
  0158e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  01594	51		 push	 ecx
  01595	6b 55 f8 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  01599	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0159f	52		 push	 edx
  015a0	e8 00 00 00 00	 call	 ?transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_unclipped_flat_3d_object

; 971  : 					}
; 972  : 					else

  015a5	eb 2f		 jmp	 SHORT $LN18@draw_sub_o
$LN17@draw_sub_o:

; 973  : 					{
; 974  : 			
; 975  : 						transform_unclipped_3d_object ( &objects_3d_data[object_number], current_object_3d_relative_position, object_3d_object_base[object_3d_object_current_base].lights, &object_camera_position, object_3d_points_current_base );

  015a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  015ac	50		 push	 eax
  015ad	8d 4d 9c	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  015b0	51		 push	 ecx
  015b1	6b 15 00 00 00
	00 2c		 imul	 edx, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  015b8	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[edx+4]
  015be	50		 push	 eax
  015bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  015c5	51		 push	 ecx
  015c6	6b 55 f8 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  015ca	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  015d0	52		 push	 edx
  015d1	e8 00 00 00 00	 call	 ?transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_unclipped_3d_object
$LN18@draw_sub_o:

; 976  : 					}
; 977  : 				}
; 978  : 		
; 979  : 				//
; 980  : 				// Render the faces now.
; 981  : 				//
; 982  : 		
; 983  : 				if ( object_outcode )

  015d6	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _object_outcode$2[ebp], 0
  015dd	74 25		 je	 SHORT $LN19@draw_sub_o

; 984  : 				{
; 985  : 		
; 986  : 					if ( ( textured_object_rendering_enabled ) || ( infrared_override ) )

  015df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?textured_object_rendering_enabled@@3HA, 0 ; textured_object_rendering_enabled
  015e6	75 06		 jne	 SHORT $LN23@draw_sub_o
  015e8	83 7d 18 00	 cmp	 DWORD PTR _infrared_override$[ebp], 0
  015ec	74 0b		 je	 SHORT $LN21@draw_sub_o
$LN23@draw_sub_o:

; 987  : 					{
; 988  : 			
; 989  : 						draw_3d_object_clipped_faces ( object_number );

  015ee	8b 45 f8	 mov	 eax, DWORD PTR _object_number$[ebp]
  015f1	50		 push	 eax
  015f2	e8 00 00 00 00	 call	 ?draw_3d_object_clipped_faces@@YGXH@Z ; draw_3d_object_clipped_faces

; 990  : 					}
; 991  : 					else

  015f7	eb 09		 jmp	 SHORT $LN22@draw_sub_o
$LN21@draw_sub_o:

; 992  : 					{
; 993  : 			
; 994  : 						draw_3d_object_untextured_clipped_faces ( object_number );

  015f9	8b 45 f8	 mov	 eax, DWORD PTR _object_number$[ebp]
  015fc	50		 push	 eax
  015fd	e8 00 00 00 00	 call	 ?draw_3d_object_untextured_clipped_faces@@YGXH@Z ; draw_3d_object_untextured_clipped_faces
$LN22@draw_sub_o:

; 995  : 					}
; 996  : 				}
; 997  : 				else

  01602	eb 23		 jmp	 SHORT $LN25@draw_sub_o
$LN19@draw_sub_o:

; 998  : 				{
; 999  : 		
; 1000 : 					if ( ( textured_object_rendering_enabled ) || ( infrared_override ) )

  01604	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?textured_object_rendering_enabled@@3HA, 0 ; textured_object_rendering_enabled
  0160b	75 06		 jne	 SHORT $LN26@draw_sub_o
  0160d	83 7d 18 00	 cmp	 DWORD PTR _infrared_override$[ebp], 0
  01611	74 0b		 je	 SHORT $LN24@draw_sub_o
$LN26@draw_sub_o:

; 1001 : 					{
; 1002 : 			
; 1003 : 						draw_3d_object_unclipped_faces ( object_number );

  01613	8b 45 f8	 mov	 eax, DWORD PTR _object_number$[ebp]
  01616	50		 push	 eax
  01617	e8 00 00 00 00	 call	 ?draw_3d_object_unclipped_faces@@YGXH@Z ; draw_3d_object_unclipped_faces

; 1004 : 					}
; 1005 : 					else

  0161c	eb 09		 jmp	 SHORT $LN25@draw_sub_o
$LN24@draw_sub_o:

; 1006 : 					{
; 1007 : 			
; 1008 : 						draw_3d_object_untextured_unclipped_faces ( object_number );

  0161e	8b 45 f8	 mov	 eax, DWORD PTR _object_number$[ebp]
  01621	50		 push	 eax
  01622	e8 00 00 00 00	 call	 ?draw_3d_object_untextured_unclipped_faces@@YGXH@Z ; draw_3d_object_untextured_unclipped_faces
$LN25@draw_sub_o:

; 1009 : 					}
; 1010 : 				}
; 1011 : 			}
; 1012 : 		}
; 1013 : 	}
; 1014 : 
; 1015 : 	//
; 1016 : 	// Recurse down any sub objects
; 1017 : 	//
; 1018 : 
; 1019 : 	if ( scene->number_of_sub_objects )

  01627	8b 45 0c	 mov	 eax, DWORD PTR _scene$[ebp]
  0162a	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0162e	85 c9		 test	 ecx, ecx
  01630	0f 84 36 01 00
	00		 je	 $LN6@draw_sub_o

; 1020 : 	{
; 1021 : 
; 1022 : 		if ( ( obj ) && ( obj->sub_objects ) )

  01636	83 7d 08 00	 cmp	 DWORD PTR _obj$[ebp], 0
  0163a	0f 84 a0 00 00
	00		 je	 $LN28@draw_sub_o
  01640	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  01643	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  01647	0f 84 93 00 00
	00		 je	 $LN28@draw_sub_o

; 1023 : 		{
; 1024 : 	
; 1025 : 			for ( count = ( scene->number_of_sub_objects -1 ); count >= 0; count-- )

  0164d	8b 45 0c	 mov	 eax, DWORD PTR _scene$[ebp]
  01650	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  01654	83 e9 01	 sub	 ecx, 1
  01657	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  0165a	eb 09		 jmp	 SHORT $LN4@draw_sub_o
$LN2@draw_sub_o:
  0165c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0165f	83 e8 01	 sub	 eax, 1
  01662	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_sub_o:
  01665	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  01669	7c 70		 jl	 SHORT $LN3@draw_sub_o

; 1026 : 			{
; 1027 : 	
; 1028 : 				if (	( obj->sub_objects[count].visible_object ) &&
; 1029 : 						( scene->sub_objects[count].sub_object_approximation_in_level <= object_3d_approximation_level ) &&

  0166b	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  0166f	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  01672	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01675	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  01679	83 e0 01	 and	 eax, 1
  0167c	74 5b		 je	 SHORT $LN30@draw_sub_o
  0167e	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  01682	8b 4d 0c	 mov	 ecx, DWORD PTR _scene$[ebp]
  01685	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01688	0f b6 44 02 05	 movzx	 eax, BYTE PTR [edx+eax+5]
  0168d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  01693	7f 44		 jg	 SHORT $LN30@draw_sub_o
  01695	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  01699	8b 4d 0c	 mov	 ecx, DWORD PTR _scene$[ebp]
  0169c	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0169f	0f b6 44 02 06	 movzx	 eax, BYTE PTR [edx+eax+6]
  016a4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  016aa	7c 2d		 jl	 SHORT $LN30@draw_sub_o

; 1030 : 						( scene->sub_objects[count].sub_object_approximation_out_level >= object_3d_approximation_level ) )
; 1031 : 				{
; 1032 : 	
; 1033 : 					draw_sub_object ( &obj->sub_objects[count], &scene->sub_objects[count], &vp, current_object_3d_relative_position, infrared_override );

  016ac	8b 45 18	 mov	 eax, DWORD PTR _infrared_override$[ebp]
  016af	50		 push	 eax
  016b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  016b6	51		 push	 ecx
  016b7	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR _vp$[ebp]
  016bd	52		 push	 edx
  016be	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  016c2	8b 4d 0c	 mov	 ecx, DWORD PTR _scene$[ebp]
  016c5	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  016c8	50		 push	 eax
  016c9	6b 55 fc 30	 imul	 edx, DWORD PTR _count$[ebp], 48
  016cd	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  016d0	03 50 04	 add	 edx, DWORD PTR [eax+4]
  016d3	52		 push	 edx
  016d4	e8 00 00 00 00	 call	 ?draw_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@H@Z ; draw_sub_object
$LN30@draw_sub_o:

; 1034 : 				}
; 1035 : 			}

  016d9	eb 81		 jmp	 SHORT $LN2@draw_sub_o
$LN3@draw_sub_o:

; 1036 : 		}
; 1037 : 		else

  016db	e9 8c 00 00 00	 jmp	 $LN6@draw_sub_o
$LN28@draw_sub_o:

; 1038 : 		{
; 1039 : 	
; 1040 : 			for ( count = ( scene->number_of_sub_objects -1 ); count >= 0; count-- )

  016e0	8b 45 0c	 mov	 eax, DWORD PTR _scene$[ebp]
  016e3	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  016e7	83 e9 01	 sub	 ecx, 1
  016ea	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  016ed	eb 09		 jmp	 SHORT $LN7@draw_sub_o
$LN5@draw_sub_o:
  016ef	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  016f2	83 e8 01	 sub	 eax, 1
  016f5	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@draw_sub_o:
  016f8	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  016fc	7c 6e		 jl	 SHORT $LN6@draw_sub_o

; 1041 : 			{
; 1042 : 	
; 1043 : 				if (	( scene->sub_objects[count].default_visibility ) &&
; 1044 : 						( scene->sub_objects[count].sub_object_approximation_in_level <= object_3d_approximation_level ) &&

  016fe	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  01702	8b 4d 0c	 mov	 ecx, DWORD PTR _scene$[ebp]
  01705	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01708	8a 44 02 07	 mov	 al, BYTE PTR [edx+eax+7]
  0170c	c0 e8 06	 shr	 al, 6
  0170f	24 01		 and	 al, 1
  01711	0f b6 c8	 movzx	 ecx, al
  01714	85 c9		 test	 ecx, ecx
  01716	74 52		 je	 SHORT $LN31@draw_sub_o
  01718	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  0171c	8b 4d 0c	 mov	 ecx, DWORD PTR _scene$[ebp]
  0171f	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01722	0f b6 44 02 05	 movzx	 eax, BYTE PTR [edx+eax+5]
  01727	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  0172d	7f 3b		 jg	 SHORT $LN31@draw_sub_o
  0172f	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  01733	8b 4d 0c	 mov	 ecx, DWORD PTR _scene$[ebp]
  01736	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01739	0f b6 44 02 06	 movzx	 eax, BYTE PTR [edx+eax+6]
  0173e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  01744	7c 24		 jl	 SHORT $LN31@draw_sub_o

; 1045 : 						( scene->sub_objects[count].sub_object_approximation_out_level >= object_3d_approximation_level ) )
; 1046 : 				{
; 1047 : 	
; 1048 : 					draw_sub_object ( NULL, &scene->sub_objects[count], &vp, current_object_3d_relative_position, infrared_override );

  01746	8b 45 18	 mov	 eax, DWORD PTR _infrared_override$[ebp]
  01749	50		 push	 eax
  0174a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  01750	51		 push	 ecx
  01751	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR _vp$[ebp]
  01757	52		 push	 edx
  01758	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  0175c	8b 4d 0c	 mov	 ecx, DWORD PTR _scene$[ebp]
  0175f	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  01762	50		 push	 eax
  01763	6a 00		 push	 0
  01765	e8 00 00 00 00	 call	 ?draw_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@H@Z ; draw_sub_object
$LN31@draw_sub_o:

; 1049 : 				}
; 1050 : 			}

  0176a	eb 83		 jmp	 SHORT $LN5@draw_sub_o
$LN6@draw_sub_o:

; 1051 : 		}
; 1052 : 	}
; 1053 : 
; 1054 : 	//
; 1055 : 	// Restore object dissolve
; 1056 : 	//
; 1057 : 
; 1058 : 	{
; 1059 : 
; 1060 : 		int
; 1061 : 			itmp;
; 1062 : 
; 1063 : 		current_object_3d_dissolve_factor = old_current_object_3d_dissolve_factor;

  0176c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _old_current_object_3d_dissolve_factor$[ebp]
  01771	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_object_3d_dissolve_factor@@3MA, xmm0

; 1064 : 
; 1065 : 		asm_convert_float_to_int ( current_object_3d_dissolve_factor * 255, &itmp );

  01779	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _itmp$1[ebp]
  0177f	50		 push	 eax
  01780	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  01788	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  01790	51		 push	 ecx
  01791	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01796	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1066 : 
; 1067 : 		current_object_3d_dissolve_value = itmp;

  0179b	8a 85 dc fe ff
	ff		 mov	 al, BYTE PTR _itmp$1[ebp]
  017a1	a2 00 00 00 00	 mov	 BYTE PTR ?current_object_3d_dissolve_value@@3EA, al ; current_object_3d_dissolve_value

; 1068 : 	}
; 1069 : 
; 1070 : 	//
; 1071 : 	// Restore the object rotation matrix
; 1072 : 	//
; 1073 : 
; 1074 : 	memcpy ( rotation_3d, temp_matrix, sizeof ( matrix3x3 ) );

  017a6	6a 24		 push	 36			; 00000024H
  017a8	8d 45 a8	 lea	 eax, DWORD PTR _temp_matrix$[ebp]
  017ab	50		 push	 eax
  017ac	68 00 00 00 00	 push	 OFFSET ?rotation_3d@@3PAY02MA ; rotation_3d
  017b1	e8 00 00 00 00	 call	 _memcpy
  017b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1075 : 
; 1076 : 	memcpy ( &object_3d_scale, &temp_scale, sizeof ( vec3d ) );

  017b9	6a 0c		 push	 12			; 0000000cH
  017bb	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _temp_scale$[ebp]
  017c1	50		 push	 eax
  017c2	68 00 00 00 00	 push	 OFFSET ?object_3d_scale@@3UVEC3D@@A ; object_3d_scale
  017c7	e8 00 00 00 00	 call	 _memcpy
  017cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1077 : 
; 1078 : 	current_object_3d_relative_position = old_current_object_3d_relative_position;

  017cf	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _old_current_object_3d_relative_position$[ebp]
  017d5	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A, eax ; current_object_3d_relative_position

; 1079 : }

  017da	5f		 pop	 edi
  017db	5e		 pop	 esi
  017dc	5b		 pop	 ebx
  017dd	8b e5		 mov	 esp, ebp
  017df	5d		 pop	 ebp
  017e0	c2 14 00	 ret	 20			; 00000014H
?draw_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@H@Z ENDP ; draw_sub_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjdrz.c
;	COMDAT ?draw_zbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z
_TEXT	SEGMENT
_position$1 = -208					; size = 12
_count$2 = -196						; size = 4
_sprite$3 = -192					; size = 32
_buffer$4 = -160					; size = 4
_buffer$5 = -156					; size = 4
_count$6 = -152						; size = 4
_object_outcode$7 = -148				; size = 4
_rel_pos$8 = -144					; size = 12
_v2$9 = -132						; size = 12
_v1$10 = -120						; size = 12
_ifog_intensity$11 = -108				; size = 4
_fog_intensity$12 = -104				; size = 4
_old_object_vp$ = -100					; size = 48
_scene$ = -52						; size = 4
_translucent_sorted_buffer$ = -48			; size = 4
_object_unit_pos$ = -44					; size = 12
_object_camera_direction$ = -32				; size = 12
_object_camera_position$ = -20				; size = 12
_light$ = -8						; size = 4
_object_number$ = -4					; size = 4
_obj$ = 8						; size = 4
_object_is_flat$ = 12					; size = 4
_infrared_override$ = 16				; size = 4
?draw_zbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z PROC ; draw_zbuffered_3d_object, COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 98   : 
; 99   : 	int
; 100  : 		object_number;
; 101  : 
; 102  : 	light_3d_source
; 103  : 		*light;
; 104  : 
; 105  : 	vec3d
; 106  : 		object_camera_position,
; 107  : 		object_camera_direction,
; 108  : 		object_unit_pos;
; 109  : 
; 110  : 	polygon_buffer
; 111  : 		*translucent_sorted_buffer;
; 112  : 
; 113  : 	object_3d_scene_database_entry
; 114  : 		*scene;
; 115  : 
; 116  : 	viewpoint
; 117  : 		old_object_vp;
; 118  : 
; 119  : 	//
; 120  : 	// Set the scene pointer
; 121  : 	//
; 122  : 
; 123  : 	scene = &objects_3d_scene_database[obj->object_number];

  0000c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000f	69 48 04 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 224
  00016	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0001c	89 4d cc	 mov	 DWORD PTR _scene$[ebp], ecx

; 124  : 
; 125  : 	//
; 126  : 	// Set up the texture animations for this object.
; 127  : 	//
; 128  : 
; 129  : 	initialise_object_texture_animations ( obj );

  0001f	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?initialise_object_texture_animations@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; initialise_object_texture_animations

; 130  : 
; 131  : 	//
; 132  : 	// Set up the object drawing global variables
; 133  : 	//
; 134  : 
; 135  : 	object_3d_points_current_base = 0;

  00028	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_points_current_base@@3HA, 0 ; object_3d_points_current_base

; 136  : 	object_3d_object_current_base = 0;

  00032	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_object_current_base@@3HA, 0 ; object_3d_object_current_base

; 137  : 	object_3d_light_3d_current_base = 0;

  0003c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_light_3d_current_base@@3HA, 0 ; object_3d_light_3d_current_base

; 138  : 
; 139  : 	current_3d_object_is_flat = object_is_flat;

  00046	8b 45 0c	 mov	 eax, DWORD PTR _object_is_flat$[ebp]
  00049	a3 00 00 00 00	 mov	 DWORD PTR ?current_3d_object_is_flat@@3HA, eax ; current_3d_object_is_flat

; 140  : 
; 141  : 	current_object_3d_light_maps_enabled = obj->object_internal_lighting;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00051	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00054	c1 e9 03	 shr	 ecx, 3
  00057	83 e1 01	 and	 ecx, 1
  0005a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_light_maps_enabled@@3HA, ecx ; current_object_3d_light_maps_enabled

; 142  : 
; 143  : 	//
; 144  : 	// Get the object's position relative to the camera
; 145  : 	//
; 146  : 
; 147  : 	current_object_3d_relative_position = &obj->view_position;

  00060	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00063	83 c0 38	 add	 eax, 56			; 00000038H
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A, eax ; current_object_3d_relative_position

; 148  : 
; 149  : 	{
; 150  : 
; 151  : 		float
; 152  : 			fog_intensity;
; 153  : 
; 154  : 		int
; 155  : 			ifog_intensity;
; 156  : 
; 157  : 		fog_intensity = get_fog_distance_value ( current_object_3d_relative_position->z );

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00070	51		 push	 ecx
  00071	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	e8 00 00 00 00	 call	 ?get_fog_distance_value@@YGMM@Z ; get_fog_distance_value
  00080	d9 5d 98	 fstp	 DWORD PTR _fog_intensity$12[ebp]

; 158  : 
; 159  : 		asm_convert_float_to_int ( fog_intensity, &ifog_intensity );

  00083	8d 45 94	 lea	 eax, DWORD PTR _ifog_intensity$11[ebp]
  00086	50		 push	 eax
  00087	51		 push	 ecx
  00088	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fog_intensity$12[ebp]
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 160  : 
; 161  : 		set_d3d_fog_face_intensity ( ifog_intensity );

  00097	8b 45 94	 mov	 eax, DWORD PTR _ifog_intensity$11[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?set_d3d_fog_face_intensity@@YGXH@Z ; set_d3d_fog_face_intensity

; 162  : 	}
; 163  : 
; 164  : 	//
; 165  : 	// Set the main objects' scaling values
; 166  : 	//
; 167  : 
; 168  : 	object_3d_scale.x = obj->relative_scale.x;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000a3	f3 0f 10 40 44	 movss	 xmm0, DWORD PTR [eax+68]
  000a8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A, xmm0

; 169  : 	object_3d_scale.y = obj->relative_scale.y;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000b3	f3 0f 10 40 48	 movss	 xmm0, DWORD PTR [eax+72]
  000b8	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4, xmm0

; 170  : 	object_3d_scale.z = obj->relative_scale.z;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000c3	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [eax+76]
  000c8	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8, xmm0

; 171  : 
; 172  : 	//
; 173  : 	// Set the object dissolve variables
; 174  : 	//
; 175  : 
; 176  : 	current_object_3d_dissolve_value = obj->object_dissolve_value;

  000d0	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000d3	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  000d6	c1 e9 04	 shr	 ecx, 4
  000d9	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000df	88 0d 00 00 00
	00		 mov	 BYTE PTR ?current_object_3d_dissolve_value@@3EA, cl ; current_object_3d_dissolve_value

; 177  : 	current_object_3d_dissolve_factor = current_object_3d_dissolve_value;

  000e5	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  000ec	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000f0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_object_3d_dissolve_factor@@3MA, xmm0

; 178  : 	current_object_3d_dissolve_factor /= 255.0;

  000f8	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  00100	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  00108	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0010c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_object_3d_dissolve_factor@@3MA, xmm0

; 179  : 
; 180  : 	//
; 181  : 	// Calculate the object's rotation matrix, to transform its 3d points relative to the view.
; 182  : 	//
; 183  : 
; 184  : 	rotation_3d[0][0] = ( obj->vp.xv.x * visual_3d_vp->xv.x + obj->vp.xv.y * visual_3d_vp->xv.y + obj->vp.xv.z * visual_3d_vp->xv.z );

  00114	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00117	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0011d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00122	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  00127	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0012f	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  00134	f3 0f 59 48 10	 mulss	 xmm1, DWORD PTR [eax+16]
  00139	f3 0f 58 c1	 addss	 xmm0, xmm1
  0013d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00140	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00146	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0014b	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00150	f3 0f 58 c1	 addss	 xmm0, xmm1
  00154	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00159	6b c8 00	 imul	 ecx, eax, 0
  0015c	ba 04 00 00 00	 mov	 edx, 4
  00161	6b c2 00	 imul	 eax, edx, 0
  00164	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 185  : 	rotation_3d[0][1] = ( obj->vp.xv.x * visual_3d_vp->yv.x + obj->vp.xv.y * visual_3d_vp->yv.y + obj->vp.xv.z * visual_3d_vp->yv.z );

  0016d	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00170	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00176	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0017b	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00180	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00188	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  0018d	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  00192	f3 0f 58 c1	 addss	 xmm0, xmm1
  00196	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00199	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0019f	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  001a4	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  001a9	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ad	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001b2	6b c8 00	 imul	 ecx, eax, 0
  001b5	ba 04 00 00 00	 mov	 edx, 4
  001ba	c1 e2 00	 shl	 edx, 0
  001bd	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 186  : 	rotation_3d[0][2] = ( obj->vp.xv.x * visual_3d_vp->zv.x + obj->vp.xv.y * visual_3d_vp->zv.y + obj->vp.xv.z * visual_3d_vp->zv.z );

  001c6	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  001c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001cf	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  001d4	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [ecx+36]
  001d9	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  001dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001e1	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  001e6	f3 0f 59 48 28	 mulss	 xmm1, DWORD PTR [eax+40]
  001eb	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ef	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  001f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001f8	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  001fd	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00202	f3 0f 58 c1	 addss	 xmm0, xmm1
  00206	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0020b	6b c8 00	 imul	 ecx, eax, 0
  0020e	ba 04 00 00 00	 mov	 edx, 4
  00213	d1 e2		 shl	 edx, 1
  00215	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 187  : 
; 188  : 	rotation_3d[1][0] = ( obj->vp.yv.x * visual_3d_vp->xv.x + obj->vp.yv.y * visual_3d_vp->xv.y + obj->vp.yv.z * visual_3d_vp->xv.z );

  0021e	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00221	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00227	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  0022c	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  00231	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00234	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00239	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  0023e	f3 0f 59 48 10	 mulss	 xmm1, DWORD PTR [eax+16]
  00243	f3 0f 58 c1	 addss	 xmm0, xmm1
  00247	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0024a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00250	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  00255	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  0025a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0025e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00263	c1 e0 00	 shl	 eax, 0
  00266	b9 04 00 00 00	 mov	 ecx, 4
  0026b	6b d1 00	 imul	 edx, ecx, 0
  0026e	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 189  : 	rotation_3d[1][1] = ( obj->vp.yv.x * visual_3d_vp->yv.x + obj->vp.yv.y * visual_3d_vp->yv.y + obj->vp.yv.z * visual_3d_vp->yv.z );

  00277	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0027a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00280	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00285	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  0028a	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0028d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00292	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  00297	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  0029c	f3 0f 58 c1	 addss	 xmm0, xmm1
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  002a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002a9	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  002ae	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  002b3	f3 0f 58 c1	 addss	 xmm0, xmm1
  002b7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002bc	c1 e0 00	 shl	 eax, 0
  002bf	b9 04 00 00 00	 mov	 ecx, 4
  002c4	c1 e1 00	 shl	 ecx, 0
  002c7	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 190  : 	rotation_3d[1][2] = ( obj->vp.yv.x * visual_3d_vp->zv.x + obj->vp.yv.y * visual_3d_vp->zv.y + obj->vp.yv.z * visual_3d_vp->zv.z );

  002d0	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  002d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002d9	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  002de	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [ecx+36]
  002e3	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  002e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002eb	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  002f0	f3 0f 59 48 28	 mulss	 xmm1, DWORD PTR [eax+40]
  002f5	f3 0f 58 c1	 addss	 xmm0, xmm1
  002f9	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  002fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00302	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  00307	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  0030c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00310	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00315	c1 e0 00	 shl	 eax, 0
  00318	b9 04 00 00 00	 mov	 ecx, 4
  0031d	d1 e1		 shl	 ecx, 1
  0031f	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 191  : 
; 192  : 	rotation_3d[2][0] = ( obj->vp.zv.x * visual_3d_vp->xv.x + obj->vp.zv.y * visual_3d_vp->xv.y + obj->vp.zv.z * visual_3d_vp->xv.z );

  00328	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0032b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00331	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00336	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  0033b	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0033e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00343	f3 0f 10 4a 30	 movss	 xmm1, DWORD PTR [edx+48]
  00348	f3 0f 59 48 10	 mulss	 xmm1, DWORD PTR [eax+16]
  0034d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00351	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00354	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0035a	f3 0f 10 49 34	 movss	 xmm1, DWORD PTR [ecx+52]
  0035f	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00364	f3 0f 58 c1	 addss	 xmm0, xmm1
  00368	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0036d	d1 e0		 shl	 eax, 1
  0036f	b9 04 00 00 00	 mov	 ecx, 4
  00374	6b d1 00	 imul	 edx, ecx, 0
  00377	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 193  : 	rotation_3d[2][1] = ( obj->vp.zv.x * visual_3d_vp->yv.x + obj->vp.zv.y * visual_3d_vp->yv.y + obj->vp.zv.z * visual_3d_vp->yv.z );

  00380	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00383	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00389	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  0038e	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00393	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00396	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0039b	f3 0f 10 4a 30	 movss	 xmm1, DWORD PTR [edx+48]
  003a0	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  003a5	f3 0f 58 c1	 addss	 xmm0, xmm1
  003a9	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  003ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003b2	f3 0f 10 49 34	 movss	 xmm1, DWORD PTR [ecx+52]
  003b7	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  003bc	f3 0f 58 c1	 addss	 xmm0, xmm1
  003c0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003c5	d1 e0		 shl	 eax, 1
  003c7	b9 04 00 00 00	 mov	 ecx, 4
  003cc	c1 e1 00	 shl	 ecx, 0
  003cf	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 194  : 	rotation_3d[2][2] = ( obj->vp.zv.x * visual_3d_vp->zv.x + obj->vp.zv.y * visual_3d_vp->zv.y + obj->vp.zv.z * visual_3d_vp->zv.z );

  003d8	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  003db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003e1	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  003e6	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [ecx+36]
  003eb	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  003ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003f3	f3 0f 10 4a 30	 movss	 xmm1, DWORD PTR [edx+48]
  003f8	f3 0f 59 48 28	 mulss	 xmm1, DWORD PTR [eax+40]
  003fd	f3 0f 58 c1	 addss	 xmm0, xmm1
  00401	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00404	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0040a	f3 0f 10 49 34	 movss	 xmm1, DWORD PTR [ecx+52]
  0040f	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00414	f3 0f 58 c1	 addss	 xmm0, xmm1
  00418	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0041d	d1 e0		 shl	 eax, 1
  0041f	b9 04 00 00 00	 mov	 ecx, 4
  00424	d1 e1		 shl	 ecx, 1
  00426	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 195  : 
; 196  : 	rotation_3d[0][0] *= object_3d_scale.x;

  0042f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00434	6b c8 00	 imul	 ecx, eax, 0
  00437	ba 04 00 00 00	 mov	 edx, 4
  0043c	6b c2 00	 imul	 eax, edx, 0
  0043f	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00448	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00450	b9 04 00 00 00	 mov	 ecx, 4
  00455	6b d1 00	 imul	 edx, ecx, 0
  00458	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0045d	6b c8 00	 imul	 ecx, eax, 0
  00460	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 197  : 	rotation_3d[1][0] *= object_3d_scale.y;

  00469	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0046e	c1 e0 00	 shl	 eax, 0
  00471	b9 04 00 00 00	 mov	 ecx, 4
  00476	6b d1 00	 imul	 edx, ecx, 0
  00479	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00482	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  0048a	b8 04 00 00 00	 mov	 eax, 4
  0048f	6b c8 00	 imul	 ecx, eax, 0
  00492	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00497	c1 e2 00	 shl	 edx, 0
  0049a	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx], xmm0

; 198  : 	rotation_3d[2][0] *= object_3d_scale.z;

  004a3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004a8	d1 e0		 shl	 eax, 1
  004aa	b9 04 00 00 00	 mov	 ecx, 4
  004af	6b d1 00	 imul	 edx, ecx, 0
  004b2	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  004bb	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  004c3	b8 04 00 00 00	 mov	 eax, 4
  004c8	6b c8 00	 imul	 ecx, eax, 0
  004cb	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  004d0	d1 e2		 shl	 edx, 1
  004d2	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx], xmm0

; 199  : 
; 200  : 	rotation_3d[0][1] *= object_3d_scale.x;

  004db	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004e0	6b c8 00	 imul	 ecx, eax, 0
  004e3	ba 04 00 00 00	 mov	 edx, 4
  004e8	c1 e2 00	 shl	 edx, 0
  004eb	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  004f4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  004fc	b8 04 00 00 00	 mov	 eax, 4
  00501	c1 e0 00	 shl	 eax, 0
  00504	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00509	6b d1 00	 imul	 edx, ecx, 0
  0050c	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 201  : 	rotation_3d[1][1] *= object_3d_scale.y;

  00515	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0051a	c1 e0 00	 shl	 eax, 0
  0051d	b9 04 00 00 00	 mov	 ecx, 4
  00522	c1 e1 00	 shl	 ecx, 0
  00525	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0052e	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00536	ba 04 00 00 00	 mov	 edx, 4
  0053b	c1 e2 00	 shl	 edx, 0
  0053e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00543	c1 e0 00	 shl	 eax, 0
  00546	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 202  : 	rotation_3d[2][1] *= object_3d_scale.z;

  0054f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00554	d1 e0		 shl	 eax, 1
  00556	b9 04 00 00 00	 mov	 ecx, 4
  0055b	c1 e1 00	 shl	 ecx, 0
  0055e	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00567	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  0056f	ba 04 00 00 00	 mov	 edx, 4
  00574	c1 e2 00	 shl	 edx, 0
  00577	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0057c	d1 e0		 shl	 eax, 1
  0057e	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 203  : 
; 204  : 	rotation_3d[0][2] *= object_3d_scale.x;

  00587	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0058c	6b c8 00	 imul	 ecx, eax, 0
  0058f	ba 04 00 00 00	 mov	 edx, 4
  00594	d1 e2		 shl	 edx, 1
  00596	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  0059f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  005a7	b8 04 00 00 00	 mov	 eax, 4
  005ac	d1 e0		 shl	 eax, 1
  005ae	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  005b3	6b d1 00	 imul	 edx, ecx, 0
  005b6	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 205  : 	rotation_3d[1][2] *= object_3d_scale.y;

  005bf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005c4	c1 e0 00	 shl	 eax, 0
  005c7	b9 04 00 00 00	 mov	 ecx, 4
  005cc	d1 e1		 shl	 ecx, 1
  005ce	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  005d7	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  005df	ba 04 00 00 00	 mov	 edx, 4
  005e4	d1 e2		 shl	 edx, 1
  005e6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005eb	c1 e0 00	 shl	 eax, 0
  005ee	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 206  : 	rotation_3d[2][2] *= object_3d_scale.z;

  005f7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005fc	d1 e0		 shl	 eax, 1
  005fe	b9 04 00 00 00	 mov	 ecx, 4
  00603	d1 e1		 shl	 ecx, 1
  00605	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0060e	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  00616	ba 04 00 00 00	 mov	 edx, 4
  0061b	d1 e2		 shl	 edx, 1
  0061d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00622	d1 e0		 shl	 eax, 1
  00624	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 207  : 
; 208  : 	//
; 209  : 	// Calculate the vector from the object to the viewpoint, in the object's view system
; 210  : 	//
; 211  : 
; 212  : 	old_object_vp.position = obj->vp.position;

  0062d	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00630	83 c0 08	 add	 eax, 8
  00633	8b 08		 mov	 ecx, DWORD PTR [eax]
  00635	89 4d 9c	 mov	 DWORD PTR _old_object_vp$[ebp], ecx
  00638	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0063b	89 55 a0	 mov	 DWORD PTR _old_object_vp$[ebp+4], edx
  0063e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00641	89 45 a4	 mov	 DWORD PTR _old_object_vp$[ebp+8], eax

; 213  : 
; 214  : 	{
; 215  : 
; 216  : 		vec3d
; 217  : 			v1,
; 218  : 			v2;
; 219  : 
; 220  : 		multiply_matrix3x3_vec3d ( &v1, visual_3d_vp->attitude, current_object_3d_relative_position );

  00644	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00649	50		 push	 eax
  0064a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00650	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00653	51		 push	 ecx
  00654	8d 55 88	 lea	 edx, DWORD PTR _v1$10[ebp]
  00657	52		 push	 edx
  00658	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 221  : //		v1.x = -v1.x;
; 222  : //		v1.y = -v1.y;
; 223  : //		v1.z = -v1.z;
; 224  : 
; 225  : 		obj->vp.x = v1.x;

  0065d	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00660	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _v1$10[ebp]
  00665	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 226  : 		obj->vp.y = v1.y;

  0066a	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0066d	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _v1$10[ebp+4]
  00672	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 227  : 		obj->vp.z = v1.z;

  00677	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0067a	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _v1$10[ebp+8]
  0067f	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 228  : //		obj->vp.x = visual_3d_vp->x + v1.x;
; 229  : //		obj->vp.y = visual_3d_vp->y + v1.y;
; 230  : //		obj->vp.z = visual_3d_vp->z + v1.z;
; 231  : 
; 232  : 		v2.x = ( v1.x * obj->vp.xv.x );

  00684	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00687	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _v1$10[ebp]
  0068c	f3 0f 59 40 14	 mulss	 xmm0, DWORD PTR [eax+20]
  00691	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _v2$9[ebp], xmm0

; 233  : 		v2.x += ( v1.y * obj->vp.xv.y );

  00699	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0069c	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _v1$10[ebp+4]
  006a1	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  006a6	f3 0f 58 85 7c
	ff ff ff	 addss	 xmm0, DWORD PTR _v2$9[ebp]
  006ae	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _v2$9[ebp], xmm0

; 234  : 		v2.x += ( v1.z * obj->vp.xv.z );

  006b6	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  006b9	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _v1$10[ebp+8]
  006be	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  006c3	f3 0f 58 85 7c
	ff ff ff	 addss	 xmm0, DWORD PTR _v2$9[ebp]
  006cb	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _v2$9[ebp], xmm0

; 235  : 
; 236  : 		v2.y = ( v1.x * obj->vp.yv.x );

  006d3	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  006d6	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _v1$10[ebp]
  006db	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  006e0	f3 0f 11 45 80	 movss	 DWORD PTR _v2$9[ebp+4], xmm0

; 237  : 		v2.y += ( v1.y * obj->vp.yv.y );

  006e5	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  006e8	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _v1$10[ebp+4]
  006ed	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  006f2	f3 0f 58 45 80	 addss	 xmm0, DWORD PTR _v2$9[ebp+4]
  006f7	f3 0f 11 45 80	 movss	 DWORD PTR _v2$9[ebp+4], xmm0

; 238  : 		v2.y += ( v1.z * obj->vp.yv.z );

  006fc	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  006ff	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _v1$10[ebp+8]
  00704	f3 0f 59 40 28	 mulss	 xmm0, DWORD PTR [eax+40]
  00709	f3 0f 58 45 80	 addss	 xmm0, DWORD PTR _v2$9[ebp+4]
  0070e	f3 0f 11 45 80	 movss	 DWORD PTR _v2$9[ebp+4], xmm0

; 239  : 
; 240  : 		v2.z = ( v1.x * obj->vp.zv.x );

  00713	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00716	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _v1$10[ebp]
  0071b	f3 0f 59 40 2c	 mulss	 xmm0, DWORD PTR [eax+44]
  00720	f3 0f 11 45 84	 movss	 DWORD PTR _v2$9[ebp+8], xmm0

; 241  : 		v2.z += ( v1.y * obj->vp.zv.y );

  00725	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00728	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _v1$10[ebp+4]
  0072d	f3 0f 59 40 30	 mulss	 xmm0, DWORD PTR [eax+48]
  00732	f3 0f 58 45 84	 addss	 xmm0, DWORD PTR _v2$9[ebp+8]
  00737	f3 0f 11 45 84	 movss	 DWORD PTR _v2$9[ebp+8], xmm0

; 242  : 		v2.z += ( v1.z * obj->vp.zv.z );

  0073c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0073f	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _v1$10[ebp+8]
  00744	f3 0f 59 40 34	 mulss	 xmm0, DWORD PTR [eax+52]
  00749	f3 0f 58 45 84	 addss	 xmm0, DWORD PTR _v2$9[ebp+8]
  0074e	f3 0f 11 45 84	 movss	 DWORD PTR _v2$9[ebp+8], xmm0

; 243  : 
; 244  : 		object_unit_pos.x = -v2.x;

  00753	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _v2$9[ebp]
  0075b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00762	f3 0f 11 45 d4	 movss	 DWORD PTR _object_unit_pos$[ebp], xmm0

; 245  : 		object_unit_pos.y = -v2.y;

  00767	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _v2$9[ebp+4]
  0076c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00773	f3 0f 11 45 d8	 movss	 DWORD PTR _object_unit_pos$[ebp+4], xmm0

; 246  : 		object_unit_pos.z = -v2.z;

  00778	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _v2$9[ebp+8]
  0077d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00784	f3 0f 11 45 dc	 movss	 DWORD PTR _object_unit_pos$[ebp+8], xmm0

; 247  : 
; 248  : 		normalise_any_3d_vector ( &object_unit_pos );

  00789	8d 45 d4	 lea	 eax, DWORD PTR _object_unit_pos$[ebp]
  0078c	50		 push	 eax
  0078d	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00792	dd d8		 fstp	 ST(0)

; 249  : 
; 250  : 		current_object_3d_unit_position = &object_unit_pos;

  00794	8d 45 d4	 lea	 eax, DWORD PTR _object_unit_pos$[ebp]
  00797	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_unit_position@@3PAUVEC3D@@A, eax ; current_object_3d_unit_position

; 251  : 
; 252  : 	}
; 253  : 
; 254  : 	//
; 255  : 	// Set the camera to ( 0, 0, 0 )
; 256  : 	//
; 257  : 
; 258  : 	old_visual_3d_vp = visual_3d_vp->position;

  0079c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  007a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  007a3	89 0d 00 00 00
	00		 mov	 DWORD PTR ?old_visual_3d_vp@@3UVEC3D@@A, ecx
  007a9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  007ac	89 15 04 00 00
	00		 mov	 DWORD PTR ?old_visual_3d_vp@@3UVEC3D@@A+4, edx
  007b2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  007b5	a3 08 00 00 00	 mov	 DWORD PTR ?old_visual_3d_vp@@3UVEC3D@@A+8, eax

; 259  : 
; 260  : 	//
; 261  : 	// Get the object number
; 262  : 	//
; 263  : 
; 264  : #if DEBUG_MANUAL_VIEWS
; 265  : 
; 266  : 	object_number = get_object_approximation_number ( obj->object_number, 0, &object_3d_approximation_level );
; 267  : 
; 268  : #else
; 269  : 
; 270  : 	if ( object_3d_perform_lod_calculations )

  007ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?object_3d_perform_lod_calculations@@3HA, 0 ; object_3d_perform_lod_calculations
  007c1	74 26		 je	 SHORT $LN11@draw_zbuff

; 271  : 	{
; 272  : 
; 273  : 		object_number = get_object_approximation_number ( obj->object_number, current_object_3d_relative_position->z, &object_3d_approximation_level );

  007c3	68 00 00 00 00	 push	 OFFSET ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  007c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  007cd	51		 push	 ecx
  007ce	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  007d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d8	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  007db	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  007de	52		 push	 edx
  007df	e8 00 00 00 00	 call	 ?get_object_approximation_number@@YGHHMPAH@Z ; get_object_approximation_number
  007e4	89 45 fc	 mov	 DWORD PTR _object_number$[ebp], eax

; 274  : 	}
; 275  : 	else

  007e7	eb 1d		 jmp	 SHORT $LN12@draw_zbuff
$LN11@draw_zbuff:

; 276  : 	{
; 277  : 
; 278  : 		object_number = get_object_approximation_number ( obj->object_number, 0, &object_3d_approximation_level );

  007e9	68 00 00 00 00	 push	 OFFSET ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  007ee	51		 push	 ecx
  007ef	0f 57 c0	 xorps	 xmm0, xmm0
  007f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f7	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  007fa	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  007fd	51		 push	 ecx
  007fe	e8 00 00 00 00	 call	 ?get_object_approximation_number@@YGHHMPAH@Z ; get_object_approximation_number
  00803	89 45 fc	 mov	 DWORD PTR _object_number$[ebp], eax
$LN12@draw_zbuff:

; 279  : 	}
; 280  : 
; 281  : #endif
; 282  : 
; 283  : 	//
; 284  : 	// Rotate the light source vector to be relative to the object.
; 285  : 	//
; 286  : 
; 287  : 	light = generate_relative_lights ( &obj->vp, current_object_3d_unit_position, current_3d_lights );

  00806	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A ; current_3d_lights
  0080b	50		 push	 eax
  0080c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_unit_position@@3PAUVEC3D@@A ; current_object_3d_unit_position
  00812	51		 push	 ecx
  00813	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00816	83 c2 08	 add	 edx, 8
  00819	52		 push	 edx
  0081a	e8 00 00 00 00	 call	 ?generate_relative_lights@@YGPAULIGHT_3D_SOURCE@@PAUVIEWPOINT@@PAUVEC3D@@PAU1@@Z ; generate_relative_lights
  0081f	89 45 f8	 mov	 DWORD PTR _light$[ebp], eax

; 288  : 
; 289  : 	{
; 290  : 
; 291  : 		vec3d
; 292  : 			rel_pos;
; 293  : 
; 294  : 		//
; 295  : 		// Calculate the relative camera position in the object viewspace
; 296  : 		//
; 297  : 
; 298  : 		rel_pos.x = visual_3d_vp->x - obj->vp.x;

  00822	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00827	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0082a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0082e	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00833	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _rel_pos$8[ebp], xmm0

; 299  : 		rel_pos.y = visual_3d_vp->y - obj->vp.y;

  0083b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00840	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00843	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00848	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  0084d	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _rel_pos$8[ebp+4], xmm0

; 300  : 		rel_pos.z = visual_3d_vp->z - obj->vp.z;

  00855	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0085a	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0085d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00862	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00867	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _rel_pos$8[ebp+8], xmm0

; 301  : 
; 302  : 		object_camera_position.x = ( rel_pos.x * obj->vp.attitude[0][0] + rel_pos.y * obj->vp.attitude[0][1] + rel_pos.z * obj->vp.attitude[0][2] );

  0086f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00874	6b c8 00	 imul	 ecx, eax, 0
  00877	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0087a	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  0087e	b9 04 00 00 00	 mov	 ecx, 4
  00883	6b d1 00	 imul	 edx, ecx, 0
  00886	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _rel_pos$8[ebp]
  0088e	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00893	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00898	6b c8 00	 imul	 ecx, eax, 0
  0089b	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0089e	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  008a2	b9 04 00 00 00	 mov	 ecx, 4
  008a7	c1 e1 00	 shl	 ecx, 0
  008aa	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _rel_pos$8[ebp+4]
  008b2	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  008b7	f3 0f 58 c1	 addss	 xmm0, xmm1
  008bb	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  008c0	6b c2 00	 imul	 eax, edx, 0
  008c3	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  008c6	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  008ca	b8 04 00 00 00	 mov	 eax, 4
  008cf	d1 e0		 shl	 eax, 1
  008d1	f3 0f 10 8d 78
	ff ff ff	 movss	 xmm1, DWORD PTR _rel_pos$8[ebp+8]
  008d9	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  008de	f3 0f 58 c1	 addss	 xmm0, xmm1
  008e2	f3 0f 11 45 ec	 movss	 DWORD PTR _object_camera_position$[ebp], xmm0

; 303  : 		object_camera_position.y = ( rel_pos.x * obj->vp.attitude[1][0] + rel_pos.y * obj->vp.attitude[1][1] + rel_pos.z * obj->vp.attitude[1][2] );

  008e7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008ec	c1 e0 00	 shl	 eax, 0
  008ef	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  008f2	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  008f6	b8 04 00 00 00	 mov	 eax, 4
  008fb	6b c8 00	 imul	 ecx, eax, 0
  008fe	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _rel_pos$8[ebp]
  00906	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  0090b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00910	c1 e2 00	 shl	 edx, 0
  00913	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00916	8d 4c 10 14	 lea	 ecx, DWORD PTR [eax+edx+20]
  0091a	ba 04 00 00 00	 mov	 edx, 4
  0091f	c1 e2 00	 shl	 edx, 0
  00922	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _rel_pos$8[ebp+4]
  0092a	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  0092f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00933	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00938	c1 e0 00	 shl	 eax, 0
  0093b	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0093e	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00942	b8 04 00 00 00	 mov	 eax, 4
  00947	d1 e0		 shl	 eax, 1
  00949	f3 0f 10 8d 78
	ff ff ff	 movss	 xmm1, DWORD PTR _rel_pos$8[ebp+8]
  00951	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00956	f3 0f 58 c1	 addss	 xmm0, xmm1
  0095a	f3 0f 11 45 f0	 movss	 DWORD PTR _object_camera_position$[ebp+4], xmm0

; 304  : 		object_camera_position.z = ( rel_pos.x * obj->vp.attitude[2][0] + rel_pos.y * obj->vp.attitude[2][1] + rel_pos.z * obj->vp.attitude[2][2] );

  0095f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00964	d1 e0		 shl	 eax, 1
  00966	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00969	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  0096d	b8 04 00 00 00	 mov	 eax, 4
  00972	6b c8 00	 imul	 ecx, eax, 0
  00975	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _rel_pos$8[ebp]
  0097d	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  00982	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00987	d1 e2		 shl	 edx, 1
  00989	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0098c	8d 4c 10 14	 lea	 ecx, DWORD PTR [eax+edx+20]
  00990	ba 04 00 00 00	 mov	 edx, 4
  00995	c1 e2 00	 shl	 edx, 0
  00998	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _rel_pos$8[ebp+4]
  009a0	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  009a5	f3 0f 58 c1	 addss	 xmm0, xmm1
  009a9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009ae	d1 e0		 shl	 eax, 1
  009b0	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  009b3	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  009b7	b8 04 00 00 00	 mov	 eax, 4
  009bc	d1 e0		 shl	 eax, 1
  009be	f3 0f 10 8d 78
	ff ff ff	 movss	 xmm1, DWORD PTR _rel_pos$8[ebp+8]
  009c6	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  009cb	f3 0f 58 c1	 addss	 xmm0, xmm1
  009cf	f3 0f 11 45 f4	 movss	 DWORD PTR _object_camera_position$[ebp+8], xmm0

; 305  : 
; 306  : 		object_camera_direction.x = ( visual_3d_vp->zv.x * obj->vp.attitude[0][0] + visual_3d_vp->zv.y * obj->vp.attitude[1][0] + visual_3d_vp->zv.z * obj->vp.attitude[2][0] );

  009d4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009d9	6b c8 00	 imul	 ecx, eax, 0
  009dc	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  009df	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  009e3	b9 04 00 00 00	 mov	 ecx, 4
  009e8	6b d1 00	 imul	 edx, ecx, 0
  009eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  009f1	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  009f6	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  009fb	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00a00	c1 e2 00	 shl	 edx, 0
  00a03	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00a06	8d 4c 10 14	 lea	 ecx, DWORD PTR [eax+edx+20]
  00a0a	ba 04 00 00 00	 mov	 edx, 4
  00a0f	6b c2 00	 imul	 eax, edx, 0
  00a12	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a18	f3 0f 10 4a 28	 movss	 xmm1, DWORD PTR [edx+40]
  00a1d	f3 0f 59 0c 01	 mulss	 xmm1, DWORD PTR [ecx+eax]
  00a22	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a26	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a2b	d1 e0		 shl	 eax, 1
  00a2d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00a30	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00a34	b8 04 00 00 00	 mov	 eax, 4
  00a39	6b c8 00	 imul	 ecx, eax, 0
  00a3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a41	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  00a46	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  00a4b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a4f	f3 0f 11 45 e0	 movss	 DWORD PTR _object_camera_direction$[ebp], xmm0

; 307  : 		object_camera_direction.y = ( visual_3d_vp->zv.x * obj->vp.attitude[0][1] + visual_3d_vp->zv.y * obj->vp.attitude[1][1] + visual_3d_vp->zv.z * obj->vp.attitude[2][1] );

  00a54	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a59	6b c8 00	 imul	 ecx, eax, 0
  00a5c	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00a5f	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  00a63	b9 04 00 00 00	 mov	 ecx, 4
  00a68	c1 e1 00	 shl	 ecx, 0
  00a6b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a71	f3 0f 10 42 24	 movss	 xmm0, DWORD PTR [edx+36]
  00a76	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  00a7b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a80	c1 e0 00	 shl	 eax, 0
  00a83	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00a86	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00a8a	b8 04 00 00 00	 mov	 eax, 4
  00a8f	c1 e0 00	 shl	 eax, 0
  00a92	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a98	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  00a9d	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00aa2	f3 0f 58 c1	 addss	 xmm0, xmm1
  00aa6	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00aab	d1 e2		 shl	 edx, 1
  00aad	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00ab0	8d 4c 10 14	 lea	 ecx, DWORD PTR [eax+edx+20]
  00ab4	ba 04 00 00 00	 mov	 edx, 4
  00ab9	c1 e2 00	 shl	 edx, 0
  00abc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00ac1	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  00ac6	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  00acb	f3 0f 58 c1	 addss	 xmm0, xmm1
  00acf	f3 0f 11 45 e4	 movss	 DWORD PTR _object_camera_direction$[ebp+4], xmm0

; 308  : 		object_camera_direction.z = ( visual_3d_vp->zv.x * obj->vp.attitude[0][2] + visual_3d_vp->zv.y * obj->vp.attitude[1][2] + visual_3d_vp->zv.z * obj->vp.attitude[2][2] );

  00ad4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ad9	6b c8 00	 imul	 ecx, eax, 0
  00adc	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00adf	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  00ae3	b9 04 00 00 00	 mov	 ecx, 4
  00ae8	d1 e1		 shl	 ecx, 1
  00aea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00af0	f3 0f 10 42 24	 movss	 xmm0, DWORD PTR [edx+36]
  00af5	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  00afa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00aff	c1 e0 00	 shl	 eax, 0
  00b02	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00b05	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00b09	b8 04 00 00 00	 mov	 eax, 4
  00b0e	d1 e0		 shl	 eax, 1
  00b10	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b16	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  00b1b	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00b20	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b24	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00b29	d1 e2		 shl	 edx, 1
  00b2b	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00b2e	8d 4c 10 14	 lea	 ecx, DWORD PTR [eax+edx+20]
  00b32	ba 04 00 00 00	 mov	 edx, 4
  00b37	d1 e2		 shl	 edx, 1
  00b39	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b3e	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  00b43	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  00b48	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b4c	f3 0f 11 45 e8	 movss	 DWORD PTR _object_camera_direction$[ebp+8], xmm0

; 309  : 	}
; 310  : 
; 311  : 
; 312  : 	//
; 313  : 	//	Set up this objects' object info structure
; 314  : 	//
; 315  : 
; 316  : 	object_3d_object_base[object_3d_object_current_base].lights = light;

  00b51	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00b58	8b 4d f8	 mov	 ecx, DWORD PTR _light$[ebp]
  00b5b	89 88 04 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+4], ecx

; 317  : 
; 318  : 	object_3d_object_base[object_3d_object_current_base].camera_position = object_camera_position;

  00b61	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00b68	05 08 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A+8
  00b6d	8b 4d ec	 mov	 ecx, DWORD PTR _object_camera_position$[ebp]
  00b70	89 08		 mov	 DWORD PTR [eax], ecx
  00b72	8b 55 f0	 mov	 edx, DWORD PTR _object_camera_position$[ebp+4]
  00b75	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00b78	8b 4d f4	 mov	 ecx, DWORD PTR _object_camera_position$[ebp+8]
  00b7b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 319  : 
; 320  : 	object_3d_object_base[object_3d_object_current_base].camera_direction = object_camera_direction;

  00b7e	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00b85	05 14 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A+20
  00b8a	8b 4d e0	 mov	 ecx, DWORD PTR _object_camera_direction$[ebp]
  00b8d	89 08		 mov	 DWORD PTR [eax], ecx
  00b8f	8b 55 e4	 mov	 edx, DWORD PTR _object_camera_direction$[ebp+4]
  00b92	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00b95	8b 4d e8	 mov	 ecx, DWORD PTR _object_camera_direction$[ebp+8]
  00b98	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 321  : 
; 322  : 	object_3d_object_base[object_3d_object_current_base].points_base = object_3d_points_current_base;

  00b9b	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00ba2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  00ba8	89 88 24 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+36], ecx

; 323  : 
; 324  : 	object_3d_object_base[object_3d_object_current_base].object_number = object_number;

  00bae	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00bb5	8b 4d fc	 mov	 ecx, DWORD PTR _object_number$[ebp]
  00bb8	89 88 20 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+32], ecx

; 325  : 
; 326  : 	object_3d_object_base[object_3d_object_current_base].object_vp = &obj->vp;

  00bbe	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00bc1	83 c0 08	 add	 eax, 8
  00bc4	6b 0d 00 00 00
	00 2c		 imul	 ecx, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00bcb	89 81 28 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[ecx+40], eax

; 327  : 
; 328  : 	current_object_3d_object_base = &object_3d_object_base[object_3d_object_current_base];

  00bd1	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00bd8	05 00 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A ; object_3d_object_base
  00bdd	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A, eax ; current_object_3d_object_base

; 329  : 
; 330  : 	//
; 331  : 	// Set up the face sorting variables
; 332  : 	//
; 333  : 
; 334  : 	current_object_3d_translucent_surfaces = NULL;

  00be2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_translucent_surfaces@@3PAUTRANSLUCENT_OBJECT_SURFACE@@A, 0 ; current_object_3d_translucent_surfaces

; 335  : 
; 336  : 	translucent_sorted_buffer = get_translucent_sorted_polygon_buffer ();

  00bec	e8 00 00 00 00	 call	 ?get_translucent_sorted_polygon_buffer@@YGPAUPOLYGON_BUFFER@@XZ ; get_translucent_sorted_polygon_buffer
  00bf1	89 45 d0	 mov	 DWORD PTR _translucent_sorted_buffer$[ebp], eax

; 337  : 
; 338  : 	//
; 339  : 	// Reset the temporary buffered faces
; 340  : 	//
; 341  : 
; 342  : 	reset_temporary_buffered_translucent_polygons ();

  00bf4	e8 00 00 00 00	 call	 ?reset_temporary_buffered_translucent_polygons@@YGXXZ ; reset_temporary_buffered_translucent_polygons

; 343  : 
; 344  : 	//
; 345  : 	// Now start transforming etc
; 346  : 	//
; 347  : 
; 348  : 	if ( objects_3d_data[object_number].number_of_points )

  00bf9	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00bfd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00c03	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00c07	85 d2		 test	 edx, edx
  00c09	0f 84 45 01 00
	00		 je	 $LN27@draw_zbuff

; 349  : 	{
; 350  : 
; 351  : 		int
; 352  : 			object_outcode;
; 353  : 
; 354  : 		if ( !get_object_3d_outcode ( object_number, current_object_3d_relative_position, &object_outcode ) )

  00c0f	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _object_outcode$7[ebp]
  00c15	50		 push	 eax
  00c16	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00c1c	51		 push	 ecx
  00c1d	8b 55 fc	 mov	 edx, DWORD PTR _object_number$[ebp]
  00c20	52		 push	 edx
  00c21	e8 00 00 00 00	 call	 ?get_object_3d_outcode@@YGHHPAUVEC3D@@PAH@Z ; get_object_3d_outcode
  00c26	85 c0		 test	 eax, eax
  00c28	0f 85 26 01 00
	00		 jne	 $LN27@draw_zbuff

; 355  : 		{
; 356  : 
; 357  : 			illuminate_3d_object ( &objects_3d_data[object_number], current_object_3d_relative_position, light, &object_camera_position, object_3d_points_current_base );

  00c2e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  00c33	50		 push	 eax
  00c34	8d 4d ec	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  00c37	51		 push	 ecx
  00c38	8b 55 f8	 mov	 edx, DWORD PTR _light$[ebp]
  00c3b	52		 push	 edx
  00c3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00c41	50		 push	 eax
  00c42	6b 4d fc 68	 imul	 ecx, DWORD PTR _object_number$[ebp], 104
  00c46	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00c4c	51		 push	 ecx
  00c4d	e8 00 00 00 00	 call	 ?illuminate_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; illuminate_3d_object

; 358  : 
; 359  : 			if ( object_outcode )

  00c52	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _object_outcode$7[ebp], 0
  00c59	74 55		 je	 SHORT $LN15@draw_zbuff

; 360  : 			{
; 361  : 
; 362  : 				if ( current_3d_object_is_flat )

  00c5b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_3d_object_is_flat@@3HA, 0 ; current_3d_object_is_flat
  00c62	74 26		 je	 SHORT $LN17@draw_zbuff

; 363  : 				{
; 364  : 
; 365  : 
; 366  : 					transform_flat_3d_object ( &objects_3d_data[object_number], current_object_3d_relative_position, light, &object_camera_position, object_3d_points_current_base );

  00c64	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  00c69	50		 push	 eax
  00c6a	8d 4d ec	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  00c6d	51		 push	 ecx
  00c6e	8b 55 f8	 mov	 edx, DWORD PTR _light$[ebp]
  00c71	52		 push	 edx
  00c72	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00c77	50		 push	 eax
  00c78	6b 4d fc 68	 imul	 ecx, DWORD PTR _object_number$[ebp], 104
  00c7c	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00c82	51		 push	 ecx
  00c83	e8 00 00 00 00	 call	 ?transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_flat_3d_object

; 367  : 				}
; 368  : 				else

  00c88	eb 24		 jmp	 SHORT $LN18@draw_zbuff
$LN17@draw_zbuff:

; 369  : 				{
; 370  : 
; 371  : 					transform_3d_object ( &objects_3d_data[object_number], current_object_3d_relative_position, light, &object_camera_position, object_3d_points_current_base );

  00c8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  00c8f	50		 push	 eax
  00c90	8d 4d ec	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  00c93	51		 push	 ecx
  00c94	8b 55 f8	 mov	 edx, DWORD PTR _light$[ebp]
  00c97	52		 push	 edx
  00c98	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00c9d	50		 push	 eax
  00c9e	6b 4d fc 68	 imul	 ecx, DWORD PTR _object_number$[ebp], 104
  00ca2	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00ca8	51		 push	 ecx
  00ca9	e8 00 00 00 00	 call	 ?transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_3d_object
$LN18@draw_zbuff:

; 372  : 				}
; 373  : 			}
; 374  : 			else

  00cae	eb 53		 jmp	 SHORT $LN20@draw_zbuff
$LN15@draw_zbuff:

; 375  : 			{
; 376  : 
; 377  : 				if ( current_3d_object_is_flat )

  00cb0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_3d_object_is_flat@@3HA, 0 ; current_3d_object_is_flat
  00cb7	74 26		 je	 SHORT $LN19@draw_zbuff

; 378  : 				{
; 379  : 
; 380  : 					transform_unclipped_flat_3d_object ( &objects_3d_data[object_number], current_object_3d_relative_position, light, &object_camera_position, object_3d_points_current_base );

  00cb9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  00cbe	50		 push	 eax
  00cbf	8d 4d ec	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  00cc2	51		 push	 ecx
  00cc3	8b 55 f8	 mov	 edx, DWORD PTR _light$[ebp]
  00cc6	52		 push	 edx
  00cc7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00ccc	50		 push	 eax
  00ccd	6b 4d fc 68	 imul	 ecx, DWORD PTR _object_number$[ebp], 104
  00cd1	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00cd7	51		 push	 ecx
  00cd8	e8 00 00 00 00	 call	 ?transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_unclipped_flat_3d_object

; 381  : 				}
; 382  : 				else

  00cdd	eb 24		 jmp	 SHORT $LN20@draw_zbuff
$LN19@draw_zbuff:

; 383  : 				{
; 384  : 
; 385  : 					transform_unclipped_3d_object ( &objects_3d_data[object_number], current_object_3d_relative_position, light, &object_camera_position, object_3d_points_current_base );

  00cdf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  00ce4	50		 push	 eax
  00ce5	8d 4d ec	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  00ce8	51		 push	 ecx
  00ce9	8b 55 f8	 mov	 edx, DWORD PTR _light$[ebp]
  00cec	52		 push	 edx
  00ced	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00cf2	50		 push	 eax
  00cf3	6b 4d fc 68	 imul	 ecx, DWORD PTR _object_number$[ebp], 104
  00cf7	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00cfd	51		 push	 ecx
  00cfe	e8 00 00 00 00	 call	 ?transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_unclipped_3d_object
$LN20@draw_zbuff:

; 386  : 				}
; 387  : 			}
; 388  : 
; 389  : 			if ( object_outcode )

  00d03	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _object_outcode$7[ebp], 0
  00d0a	74 25		 je	 SHORT $LN21@draw_zbuff

; 390  : 			{
; 391  : 
; 392  : 				if ( ( textured_object_rendering_enabled ) || ( infrared_override ) )

  00d0c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?textured_object_rendering_enabled@@3HA, 0 ; textured_object_rendering_enabled
  00d13	75 06		 jne	 SHORT $LN25@draw_zbuff
  00d15	83 7d 10 00	 cmp	 DWORD PTR _infrared_override$[ebp], 0
  00d19	74 0b		 je	 SHORT $LN23@draw_zbuff
$LN25@draw_zbuff:

; 393  : 				{
; 394  : 
; 395  : 					draw_3d_object_clipped_faces ( object_number );

  00d1b	8b 45 fc	 mov	 eax, DWORD PTR _object_number$[ebp]
  00d1e	50		 push	 eax
  00d1f	e8 00 00 00 00	 call	 ?draw_3d_object_clipped_faces@@YGXH@Z ; draw_3d_object_clipped_faces

; 396  : 				}
; 397  : 				else

  00d24	eb 09		 jmp	 SHORT $LN24@draw_zbuff
$LN23@draw_zbuff:

; 398  : 				{
; 399  : 
; 400  : 					draw_3d_object_untextured_clipped_faces ( object_number );

  00d26	8b 45 fc	 mov	 eax, DWORD PTR _object_number$[ebp]
  00d29	50		 push	 eax
  00d2a	e8 00 00 00 00	 call	 ?draw_3d_object_untextured_clipped_faces@@YGXH@Z ; draw_3d_object_untextured_clipped_faces
$LN24@draw_zbuff:

; 401  : 				}
; 402  : 			}
; 403  : 			else

  00d2f	eb 23		 jmp	 SHORT $LN27@draw_zbuff
$LN21@draw_zbuff:

; 404  : 			{
; 405  : 
; 406  : 				if ( ( textured_object_rendering_enabled ) || ( infrared_override ) )

  00d31	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?textured_object_rendering_enabled@@3HA, 0 ; textured_object_rendering_enabled
  00d38	75 06		 jne	 SHORT $LN28@draw_zbuff
  00d3a	83 7d 10 00	 cmp	 DWORD PTR _infrared_override$[ebp], 0
  00d3e	74 0b		 je	 SHORT $LN26@draw_zbuff
$LN28@draw_zbuff:

; 407  : 				{
; 408  : 
; 409  : 					draw_3d_object_unclipped_faces ( object_number );

  00d40	8b 45 fc	 mov	 eax, DWORD PTR _object_number$[ebp]
  00d43	50		 push	 eax
  00d44	e8 00 00 00 00	 call	 ?draw_3d_object_unclipped_faces@@YGXH@Z ; draw_3d_object_unclipped_faces

; 410  : 				}
; 411  : 				else

  00d49	eb 09		 jmp	 SHORT $LN27@draw_zbuff
$LN26@draw_zbuff:

; 412  : 				{
; 413  : 
; 414  : 					draw_3d_object_untextured_unclipped_faces ( object_number );

  00d4b	8b 45 fc	 mov	 eax, DWORD PTR _object_number$[ebp]
  00d4e	50		 push	 eax
  00d4f	e8 00 00 00 00	 call	 ?draw_3d_object_untextured_unclipped_faces@@YGXH@Z ; draw_3d_object_untextured_unclipped_faces
$LN27@draw_zbuff:

; 415  : 				}
; 416  : 			}
; 417  : 		}
; 418  : 	}
; 419  : 
; 420  : 	//
; 421  : 	// Recurse down any sub objects
; 422  : 	//
; 423  : 
; 424  : 	if ( scene->number_of_sub_objects )

  00d54	8b 45 cc	 mov	 eax, DWORD PTR _scene$[ebp]
  00d57	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00d5e	0f 84 86 01 00
	00		 je	 $LN6@draw_zbuff

; 425  : 	{
; 426  : 
; 427  : 		int
; 428  : 			count;
; 429  : 
; 430  : 		if ( obj->sub_objects )

  00d64	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00d67	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00d6b	0f 84 c0 00 00
	00		 je	 $LN30@draw_zbuff

; 431  : 		{
; 432  : 
; 433  : 			for ( count = ( scene->number_of_sub_objects -1 ); count >= 0; count-- )

  00d71	8b 45 cc	 mov	 eax, DWORD PTR _scene$[ebp]
  00d74	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00d7a	83 e9 01	 sub	 ecx, 1
  00d7d	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _count$6[ebp], ecx
  00d83	eb 0f		 jmp	 SHORT $LN4@draw_zbuff
$LN2@draw_zbuff:
  00d85	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _count$6[ebp]
  00d8b	83 e8 01	 sub	 eax, 1
  00d8e	89 85 68 ff ff
	ff		 mov	 DWORD PTR _count$6[ebp], eax
$LN4@draw_zbuff:
  00d94	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _count$6[ebp], 0
  00d9b	0f 8c 8b 00 00
	00		 jl	 $LN3@draw_zbuff

; 434  : 			{
; 435  : 
; 436  : 				if (	( obj->sub_objects[count].visible_object ) &&
; 437  : 						( scene->sub_objects[count].sub_object_approximation_in_level <= object_3d_approximation_level ) &&

  00da1	6b 85 68 ff ff
	ff 30		 imul	 eax, DWORD PTR _count$6[ebp], 48
  00da8	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00dab	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  00dae	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00db2	83 e0 01	 and	 eax, 1
  00db5	74 70		 je	 SHORT $LN32@draw_zbuff
  00db7	6b 85 68 ff ff
	ff 38		 imul	 eax, DWORD PTR _count$6[ebp], 56
  00dbe	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  00dc1	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  00dc7	0f b6 44 02 05	 movzx	 eax, BYTE PTR [edx+eax+5]
  00dcc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  00dd2	7f 53		 jg	 SHORT $LN32@draw_zbuff
  00dd4	6b 85 68 ff ff
	ff 38		 imul	 eax, DWORD PTR _count$6[ebp], 56
  00ddb	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  00dde	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  00de4	0f b6 44 02 06	 movzx	 eax, BYTE PTR [edx+eax+6]
  00de9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  00def	7c 36		 jl	 SHORT $LN32@draw_zbuff

; 438  : 						( scene->sub_objects[count].sub_object_approximation_out_level >= object_3d_approximation_level ) )
; 439  : 				{
; 440  : 
; 441  : 					draw_sub_object ( &obj->sub_objects[count], &scene->sub_objects[count], &obj->vp, current_object_3d_relative_position, infrared_override );

  00df1	8b 45 10	 mov	 eax, DWORD PTR _infrared_override$[ebp]
  00df4	50		 push	 eax
  00df5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00dfb	51		 push	 ecx
  00dfc	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00dff	83 c2 08	 add	 edx, 8
  00e02	52		 push	 edx
  00e03	6b 85 68 ff ff
	ff 38		 imul	 eax, DWORD PTR _count$6[ebp], 56
  00e0a	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  00e0d	03 81 d8 00 00
	00		 add	 eax, DWORD PTR [ecx+216]
  00e13	50		 push	 eax
  00e14	6b 95 68 ff ff
	ff 30		 imul	 edx, DWORD PTR _count$6[ebp], 48
  00e1b	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00e1e	03 50 58	 add	 edx, DWORD PTR [eax+88]
  00e21	52		 push	 edx
  00e22	e8 00 00 00 00	 call	 ?draw_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@H@Z ; draw_sub_object
$LN32@draw_zbuff:

; 442  : 				}
; 443  : 			}

  00e27	e9 59 ff ff ff	 jmp	 $LN2@draw_zbuff
$LN3@draw_zbuff:

; 444  : 		}
; 445  : 		else

  00e2c	e9 b9 00 00 00	 jmp	 $LN6@draw_zbuff
$LN30@draw_zbuff:

; 446  : 		{
; 447  : 
; 448  : 			for ( count = ( scene->number_of_sub_objects -1 ); count >= 0; count-- )

  00e31	8b 45 cc	 mov	 eax, DWORD PTR _scene$[ebp]
  00e34	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00e3a	83 e9 01	 sub	 ecx, 1
  00e3d	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _count$6[ebp], ecx
  00e43	eb 0f		 jmp	 SHORT $LN7@draw_zbuff
$LN5@draw_zbuff:
  00e45	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _count$6[ebp]
  00e4b	83 e8 01	 sub	 eax, 1
  00e4e	89 85 68 ff ff
	ff		 mov	 DWORD PTR _count$6[ebp], eax
$LN7@draw_zbuff:
  00e54	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _count$6[ebp], 0
  00e5b	0f 8c 89 00 00
	00		 jl	 $LN6@draw_zbuff

; 449  : 			{
; 450  : 
; 451  : 				if (	( scene->sub_objects[count].default_visibility ) &&
; 452  : 						( scene->sub_objects[count].sub_object_approximation_in_level <= object_3d_approximation_level ) &&

  00e61	6b 85 68 ff ff
	ff 38		 imul	 eax, DWORD PTR _count$6[ebp], 56
  00e68	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  00e6b	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  00e71	8a 44 02 07	 mov	 al, BYTE PTR [edx+eax+7]
  00e75	c0 e8 06	 shr	 al, 6
  00e78	24 01		 and	 al, 1
  00e7a	0f b6 c8	 movzx	 ecx, al
  00e7d	85 c9		 test	 ecx, ecx
  00e7f	74 64		 je	 SHORT $LN33@draw_zbuff
  00e81	6b 85 68 ff ff
	ff 38		 imul	 eax, DWORD PTR _count$6[ebp], 56
  00e88	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  00e8b	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  00e91	0f b6 44 02 05	 movzx	 eax, BYTE PTR [edx+eax+5]
  00e96	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  00e9c	7f 47		 jg	 SHORT $LN33@draw_zbuff
  00e9e	6b 85 68 ff ff
	ff 38		 imul	 eax, DWORD PTR _count$6[ebp], 56
  00ea5	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  00ea8	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  00eae	0f b6 44 02 06	 movzx	 eax, BYTE PTR [edx+eax+6]
  00eb3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  00eb9	7c 2a		 jl	 SHORT $LN33@draw_zbuff

; 453  : 						( scene->sub_objects[count].sub_object_approximation_out_level >= object_3d_approximation_level ) )
; 454  : 				{
; 455  : 
; 456  : 					draw_sub_object ( NULL, &scene->sub_objects[count], &obj->vp, current_object_3d_relative_position, infrared_override );

  00ebb	8b 45 10	 mov	 eax, DWORD PTR _infrared_override$[ebp]
  00ebe	50		 push	 eax
  00ebf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_relative_position@@3PAUVEC3D@@A ; current_object_3d_relative_position
  00ec5	51		 push	 ecx
  00ec6	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00ec9	83 c2 08	 add	 edx, 8
  00ecc	52		 push	 edx
  00ecd	6b 85 68 ff ff
	ff 38		 imul	 eax, DWORD PTR _count$6[ebp], 56
  00ed4	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  00ed7	03 81 d8 00 00
	00		 add	 eax, DWORD PTR [ecx+216]
  00edd	50		 push	 eax
  00ede	6a 00		 push	 0
  00ee0	e8 00 00 00 00	 call	 ?draw_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@H@Z ; draw_sub_object
$LN33@draw_zbuff:

; 457  : 				}
; 458  : 			}

  00ee5	e9 5b ff ff ff	 jmp	 $LN5@draw_zbuff
$LN6@draw_zbuff:

; 459  : 		}
; 460  : 	}
; 461  : 
; 462  : 	//
; 463  : 	// If there are any temporary tranlucent polygons, draw them now
; 464  : 	//
; 465  : 
; 466  : 	if ( get_number_of_temporary_translucent_polygons () )

  00eea	e8 00 00 00 00	 call	 ?get_number_of_temporary_translucent_polygons@@YGHXZ ; get_number_of_temporary_translucent_polygons
  00eef	85 c0		 test	 eax, eax
  00ef1	74 38		 je	 SHORT $LN36@draw_zbuff

; 467  : 	{
; 468  : 
; 469  : 		//
; 470  : 		// Set the translucent rendering mode - and turn off specular highlighting
; 471  : 		//
; 472  : 
; 473  : 		set_d3d_int_state ( D3DRENDERSTATE_SPECULARENABLE, FALSE );

  00ef3	6a 00		 push	 0
  00ef5	6a 1d		 push	 29			; 0000001dH
  00ef7	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 474  : 
; 475  : 		if ( d3d_transparency_enabled )

  00efc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_transparency_enabled@@3HA, 0 ; d3d_transparency_enabled
  00f03	74 07		 je	 SHORT $LN35@draw_zbuff

; 476  : 		{
; 477  : 
; 478  : 			draw_temporary_translucent_polygons ();

  00f05	e8 00 00 00 00	 call	 ?draw_temporary_translucent_polygons@@YGXXZ ; draw_temporary_translucent_polygons

; 479  : 		}
; 480  : 		else

  00f0a	eb 1f		 jmp	 SHORT $LN36@draw_zbuff
$LN35@draw_zbuff:

; 481  : 		{
; 482  : 
; 483  : 			set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, TRUE, FALSE );

  00f0c	6a 00		 push	 0
  00f0e	6a 01		 push	 1
  00f10	6a 00		 push	 0
  00f12	6a 01		 push	 1
  00f14	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 484  : 
; 485  : 			draw_temporary_translucent_polygons ();

  00f19	e8 00 00 00 00	 call	 ?draw_temporary_translucent_polygons@@YGXXZ ; draw_temporary_translucent_polygons

; 486  : 
; 487  : 			set_d3d_alpha_fog_zbuffer ( FALSE, TRUE, TRUE, TRUE );

  00f1e	6a 01		 push	 1
  00f20	6a 01		 push	 1
  00f22	6a 01		 push	 1
  00f24	6a 00		 push	 0
  00f26	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer
$LN36@draw_zbuff:

; 488  : 		}
; 489  : 	}
; 490  : 
; 491  : 	if ( current_object_3d_translucent_surfaces )

  00f2b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_translucent_surfaces@@3PAUTRANSLUCENT_OBJECT_SURFACE@@A, 0 ; current_object_3d_translucent_surfaces
  00f32	74 5a		 je	 SHORT $LN40@draw_zbuff

; 492  : 	{
; 493  : 
; 494  : //		draw_3d_translucent_object ( current_object_3d_translucent_surfaces );
; 495  : 		if ( obj->requires_immediate_render )

  00f34	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00f37	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00f3a	d1 e9		 shr	 ecx, 1
  00f3c	83 e1 01	 and	 ecx, 1
  00f3f	74 02		 je	 SHORT $LN38@draw_zbuff

; 496  : 		{
; 497  : 		}
; 498  : 		else

  00f41	eb 4b		 jmp	 SHORT $LN40@draw_zbuff
$LN38@draw_zbuff:

; 499  : 		{
; 500  : 
; 501  : 			scene_slot_drawing_list
; 502  : 				*buffer;
; 503  : 
; 504  : 			//
; 505  : 			// Insert surface list into renderer
; 506  : 			//
; 507  : 
; 508  : 			buffer = get_3d_scene_slot ();

  00f43	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  00f48	89 85 64 ff ff
	ff		 mov	 DWORD PTR _buffer$5[ebp], eax

; 509  : 
; 510  : 			if ( buffer )

  00f4e	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _buffer$5[ebp], 0
  00f55	74 37		 je	 SHORT $LN40@draw_zbuff

; 511  : 			{
; 512  : 
; 513  : 				buffer->type = OBJECT_3D_DRAW_TYPE_TRANSLUCENT_OBJECT;

  00f57	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _buffer$5[ebp]
  00f5d	c7 40 08 15 00
	00 00		 mov	 DWORD PTR [eax+8], 21	; 00000015H

; 514  : 
; 515  : 				buffer->z = *( ( int * ) &obj->view_position );

  00f64	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _buffer$5[ebp]
  00f6a	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00f6d	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00f70	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 516  : 
; 517  : 				buffer->translucent_surfaces = current_object_3d_translucent_surfaces;

  00f73	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _buffer$5[ebp]
  00f79	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_translucent_surfaces@@3PAUTRANSLUCENT_OBJECT_SURFACE@@A ; current_object_3d_translucent_surfaces
  00f7f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 518  : 
; 519  : 				insert_transparent_buffer_into_3d_scene ( buffer );

  00f82	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _buffer$5[ebp]
  00f88	50		 push	 eax
  00f89	e8 00 00 00 00	 call	 ?insert_transparent_buffer_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_transparent_buffer_into_3d_scene
$LN40@draw_zbuff:

; 520  : 			}
; 521  : 		}
; 522  : 	}
; 523  : 
; 524  : 	//
; 525  : 	// Now finish sorting the translucent polygons.
; 526  : 	//
; 527  : 
; 528  : 	if ( finalise_translucent_sorted_polygon_buffer ( translucent_sorted_buffer ) )

  00f8e	8b 45 d0	 mov	 eax, DWORD PTR _translucent_sorted_buffer$[ebp]
  00f91	50		 push	 eax
  00f92	e8 00 00 00 00	 call	 ?finalise_translucent_sorted_polygon_buffer@@YGHPAUPOLYGON_BUFFER@@@Z ; finalise_translucent_sorted_polygon_buffer
  00f97	85 c0		 test	 eax, eax
  00f99	0f 84 97 00 00
	00		 je	 $LN46@draw_zbuff

; 529  : 	{
; 530  : 
; 531  : 		if ( obj->requires_immediate_render )

  00f9f	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00fa2	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00fa5	d1 e9		 shr	 ecx, 1
  00fa7	83 e1 01	 and	 ecx, 1
  00faa	74 42		 je	 SHORT $LN42@draw_zbuff

; 532  : 		{
; 533  : 
; 534  : 			if ( d3d_transparency_enabled )

  00fac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_transparency_enabled@@3HA, 0 ; d3d_transparency_enabled
  00fb3	74 0b		 je	 SHORT $LN44@draw_zbuff

; 535  : 			{
; 536  : 
; 537  : 				draw_polygon_buffer ( translucent_sorted_buffer );

  00fb5	8b 45 d0	 mov	 eax, DWORD PTR _translucent_sorted_buffer$[ebp]
  00fb8	50		 push	 eax
  00fb9	e8 00 00 00 00	 call	 ?draw_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z ; draw_polygon_buffer

; 538  : 			}
; 539  : 			else

  00fbe	eb 23		 jmp	 SHORT $LN45@draw_zbuff
$LN44@draw_zbuff:

; 540  : 			{
; 541  : 
; 542  : 				set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, TRUE, FALSE );

  00fc0	6a 00		 push	 0
  00fc2	6a 01		 push	 1
  00fc4	6a 00		 push	 0
  00fc6	6a 01		 push	 1
  00fc8	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 543  : 
; 544  : 				draw_polygon_buffer ( translucent_sorted_buffer );

  00fcd	8b 45 d0	 mov	 eax, DWORD PTR _translucent_sorted_buffer$[ebp]
  00fd0	50		 push	 eax
  00fd1	e8 00 00 00 00	 call	 ?draw_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z ; draw_polygon_buffer

; 545  : 
; 546  : 				set_d3d_alpha_fog_zbuffer ( FALSE, TRUE, TRUE, TRUE );

  00fd6	6a 01		 push	 1
  00fd8	6a 01		 push	 1
  00fda	6a 01		 push	 1
  00fdc	6a 00		 push	 0
  00fde	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer
$LN45@draw_zbuff:

; 547  : 			}
; 548  : 
; 549  : 			remove_translucent_polygon_buffer ( translucent_sorted_buffer );

  00fe3	8b 45 d0	 mov	 eax, DWORD PTR _translucent_sorted_buffer$[ebp]
  00fe6	50		 push	 eax
  00fe7	e8 00 00 00 00	 call	 ?remove_translucent_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z ; remove_translucent_polygon_buffer

; 550  : 		}
; 551  : 		else

  00fec	eb 48		 jmp	 SHORT $LN46@draw_zbuff
$LN42@draw_zbuff:

; 552  : 		{
; 553  : 
; 554  : 			scene_slot_drawing_list
; 555  : 				*buffer;
; 556  : 
; 557  : 			//
; 558  : 			// There were translucencies there, insert this buffer into the scene list
; 559  : 			//
; 560  : 
; 561  : 			buffer = get_3d_scene_slot ();

  00fee	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  00ff3	89 85 60 ff ff
	ff		 mov	 DWORD PTR _buffer$4[ebp], eax

; 562  : 
; 563  : 			if ( buffer )

  00ff9	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _buffer$4[ebp], 0
  01000	74 34		 je	 SHORT $LN46@draw_zbuff

; 564  : 			{
; 565  : 
; 566  : 				buffer->type = OBJECT_3D_DRAW_TYPE_TRANSLUCENT_POLYGON_BUFFER;

  01002	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _buffer$4[ebp]
  01008	c7 40 08 05 00
	00 00		 mov	 DWORD PTR [eax+8], 5

; 567  : 
; 568  : 				buffer->z = *( ( int * ) &obj->view_position );

  0100f	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _buffer$4[ebp]
  01015	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  01018	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0101b	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 569  : 
; 570  : 				buffer->translucent_buffer = translucent_sorted_buffer;

  0101e	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _buffer$4[ebp]
  01024	8b 4d d0	 mov	 ecx, DWORD PTR _translucent_sorted_buffer$[ebp]
  01027	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 571  : 
; 572  : 				insert_transparent_buffer_into_3d_scene ( buffer );

  0102a	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _buffer$4[ebp]
  01030	50		 push	 eax
  01031	e8 00 00 00 00	 call	 ?insert_transparent_buffer_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_transparent_buffer_into_3d_scene
$LN46@draw_zbuff:

; 573  : 			}
; 574  : 		}
; 575  : 	}
; 576  : 
; 577  : 	if ( ( obj->object_sprite_lights ) && ( scene->number_of_sprite_lights ) )

  01036	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  01039	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0103c	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  0103f	83 e1 01	 and	 ecx, 1
  01042	0f 84 19 03 00
	00		 je	 $LN9@draw_zbuff
  01048	8b 45 cc	 mov	 eax, DWORD PTR _scene$[ebp]
  0104b	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0104f	0f 84 0c 03 00
	00		 je	 $LN9@draw_zbuff

; 578  : 	{
; 579  : 
; 580  : 		object_3d_sprite
; 581  : 			sprite;
; 582  : 
; 583  : 		int
; 584  : 			count;
; 585  : 
; 586  : 		for ( count = 0; count < scene->number_of_sprite_lights; count++ )

  01055	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$2[ebp], 0
  0105f	eb 0f		 jmp	 SHORT $LN10@draw_zbuff
$LN8@draw_zbuff:
  01061	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _count$2[ebp]
  01067	83 c0 01	 add	 eax, 1
  0106a	89 85 3c ff ff
	ff		 mov	 DWORD PTR _count$2[ebp], eax
$LN10@draw_zbuff:
  01070	8b 45 cc	 mov	 eax, DWORD PTR _scene$[ebp]
  01073	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _count$2[ebp]
  01079	3b 48 30	 cmp	 ecx, DWORD PTR [eax+48]
  0107c	0f 8d df 02 00
	00		 jge	 $LN9@draw_zbuff

; 587  : 		{
; 588  : 
; 589  : 			vec3d
; 590  : 				position;
; 591  : 
; 592  : 			position.x = scene->sprite_lights[count].position.x * obj->vp.attitude[0][0] +

  01082	6b 85 3c ff ff
	ff 1c		 imul	 eax, DWORD PTR _count$2[ebp], 28
  01089	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  0108c	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  0108f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01094	6b c9 00	 imul	 ecx, ecx, 0
  01097	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  0109a	8d 4c 0e 14	 lea	 ecx, DWORD PTR [esi+ecx+20]
  0109e	be 04 00 00 00	 mov	 esi, 4
  010a3	6b f6 00	 imul	 esi, esi, 0
  010a6	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  010ab	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  010b0	6b 95 3c ff ff
	ff 1c		 imul	 edx, DWORD PTR _count$2[ebp], 28
  010b7	8b 45 cc	 mov	 eax, DWORD PTR _scene$[ebp]
  010ba	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  010bd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  010c2	c1 e0 00	 shl	 eax, 0
  010c5	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  010c8	8d 44 06 14	 lea	 eax, DWORD PTR [esi+eax+20]
  010cc	be 04 00 00 00	 mov	 esi, 4
  010d1	6b f6 00	 imul	 esi, esi, 0
  010d4	f3 0f 10 4c 11
	04		 movss	 xmm1, DWORD PTR [ecx+edx+4]
  010da	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  010df	f3 0f 58 c1	 addss	 xmm0, xmm1
  010e3	6b 8d 3c ff ff
	ff 1c		 imul	 ecx, DWORD PTR _count$2[ebp], 28
  010ea	8b 55 cc	 mov	 edx, DWORD PTR _scene$[ebp]
  010ed	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  010f0	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  010f5	d1 e2		 shl	 edx, 1
  010f7	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  010fa	8d 54 16 14	 lea	 edx, DWORD PTR [esi+edx+20]
  010fe	be 04 00 00 00	 mov	 esi, 4
  01103	6b f6 00	 imul	 esi, esi, 0
  01106	f3 0f 10 4c 08
	08		 movss	 xmm1, DWORD PTR [eax+ecx+8]
  0110c	f3 0f 59 0c 32	 mulss	 xmm1, DWORD PTR [edx+esi]
  01111	f3 0f 58 c1	 addss	 xmm0, xmm1
  01115	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _position$1[ebp], xmm0

; 593  : 								scene->sprite_lights[count].position.y * obj->vp.attitude[1][0] +
; 594  : 								scene->sprite_lights[count].position.z * obj->vp.attitude[2][0];
; 595  : 
; 596  : 			position.y = scene->sprite_lights[count].position.x * obj->vp.attitude[0][1] +

  0111d	6b 85 3c ff ff
	ff 1c		 imul	 eax, DWORD PTR _count$2[ebp], 28
  01124	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  01127	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  0112a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0112f	6b c9 00	 imul	 ecx, ecx, 0
  01132	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  01135	8d 4c 0e 14	 lea	 ecx, DWORD PTR [esi+ecx+20]
  01139	be 04 00 00 00	 mov	 esi, 4
  0113e	c1 e6 00	 shl	 esi, 0
  01141	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  01146	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  0114b	6b 95 3c ff ff
	ff 1c		 imul	 edx, DWORD PTR _count$2[ebp], 28
  01152	8b 45 cc	 mov	 eax, DWORD PTR _scene$[ebp]
  01155	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  01158	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0115d	c1 e0 00	 shl	 eax, 0
  01160	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  01163	8d 44 06 14	 lea	 eax, DWORD PTR [esi+eax+20]
  01167	be 04 00 00 00	 mov	 esi, 4
  0116c	c1 e6 00	 shl	 esi, 0
  0116f	f3 0f 10 4c 11
	04		 movss	 xmm1, DWORD PTR [ecx+edx+4]
  01175	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  0117a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0117e	6b 8d 3c ff ff
	ff 1c		 imul	 ecx, DWORD PTR _count$2[ebp], 28
  01185	8b 55 cc	 mov	 edx, DWORD PTR _scene$[ebp]
  01188	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  0118b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01190	d1 e2		 shl	 edx, 1
  01192	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  01195	8d 54 16 14	 lea	 edx, DWORD PTR [esi+edx+20]
  01199	be 04 00 00 00	 mov	 esi, 4
  0119e	c1 e6 00	 shl	 esi, 0
  011a1	f3 0f 10 4c 08
	08		 movss	 xmm1, DWORD PTR [eax+ecx+8]
  011a7	f3 0f 59 0c 32	 mulss	 xmm1, DWORD PTR [edx+esi]
  011ac	f3 0f 58 c1	 addss	 xmm0, xmm1
  011b0	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _position$1[ebp+4], xmm0

; 597  : 								scene->sprite_lights[count].position.y * obj->vp.attitude[1][1] +
; 598  : 								scene->sprite_lights[count].position.z * obj->vp.attitude[2][1];
; 599  : 
; 600  : 			position.z = scene->sprite_lights[count].position.x * obj->vp.attitude[0][2] +

  011b8	6b 85 3c ff ff
	ff 1c		 imul	 eax, DWORD PTR _count$2[ebp], 28
  011bf	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  011c2	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  011c5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  011ca	6b c9 00	 imul	 ecx, ecx, 0
  011cd	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  011d0	8d 4c 0e 14	 lea	 ecx, DWORD PTR [esi+ecx+20]
  011d4	be 04 00 00 00	 mov	 esi, 4
  011d9	d1 e6		 shl	 esi, 1
  011db	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  011e0	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  011e5	6b 95 3c ff ff
	ff 1c		 imul	 edx, DWORD PTR _count$2[ebp], 28
  011ec	8b 45 cc	 mov	 eax, DWORD PTR _scene$[ebp]
  011ef	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  011f2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  011f7	c1 e0 00	 shl	 eax, 0
  011fa	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  011fd	8d 44 06 14	 lea	 eax, DWORD PTR [esi+eax+20]
  01201	be 04 00 00 00	 mov	 esi, 4
  01206	d1 e6		 shl	 esi, 1
  01208	f3 0f 10 4c 11
	04		 movss	 xmm1, DWORD PTR [ecx+edx+4]
  0120e	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  01213	f3 0f 58 c1	 addss	 xmm0, xmm1
  01217	6b 8d 3c ff ff
	ff 1c		 imul	 ecx, DWORD PTR _count$2[ebp], 28
  0121e	8b 55 cc	 mov	 edx, DWORD PTR _scene$[ebp]
  01221	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  01224	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01229	d1 e2		 shl	 edx, 1
  0122b	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  0122e	8d 54 16 14	 lea	 edx, DWORD PTR [esi+edx+20]
  01232	be 04 00 00 00	 mov	 esi, 4
  01237	d1 e6		 shl	 esi, 1
  01239	f3 0f 10 4c 08
	08		 movss	 xmm1, DWORD PTR [eax+ecx+8]
  0123f	f3 0f 59 0c 32	 mulss	 xmm1, DWORD PTR [edx+esi]
  01244	f3 0f 58 c1	 addss	 xmm0, xmm1
  01248	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _position$1[ebp+8], xmm0

; 601  : 								scene->sprite_lights[count].position.y * obj->vp.attitude[1][2] +
; 602  : 								scene->sprite_lights[count].position.z * obj->vp.attitude[2][2];
; 603  : 
; 604  : 			position.x += obj->vp.position.x;

  01250	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  01253	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _position$1[ebp]
  0125b	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  01260	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _position$1[ebp], xmm0

; 605  : 			position.y += obj->vp.position.y;

  01268	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0126b	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _position$1[ebp+4]
  01273	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  01278	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _position$1[ebp+4], xmm0

; 606  : 			position.z += obj->vp.position.z;

  01280	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  01283	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _position$1[ebp+8]
  0128b	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  01290	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _position$1[ebp+8], xmm0

; 607  : 
; 608  : 			sprite.position = position;

  01298	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _position$1[ebp]
  0129e	89 85 40 ff ff
	ff		 mov	 DWORD PTR _sprite$3[ebp], eax
  012a4	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR _position$1[ebp+4]
  012aa	89 8d 44 ff ff
	ff		 mov	 DWORD PTR _sprite$3[ebp+4], ecx
  012b0	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _position$1[ebp+8]
  012b6	89 95 48 ff ff
	ff		 mov	 DWORD PTR _sprite$3[ebp+8], edx

; 609  : 			sprite.radius = scene->sprite_lights[count].scale.x * 4;

  012bc	6b 85 3c ff ff
	ff 1c		 imul	 eax, DWORD PTR _count$2[ebp], 28
  012c3	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  012c6	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  012c9	f3 0f 10 44 02
	0c		 movss	 xmm0, DWORD PTR [edx+eax+12]
  012cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  012d7	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _sprite$3[ebp+16], xmm0

; 610  : 			sprite.red = scene->sprite_lights[count].colour.red;

  012df	6b 85 3c ff ff
	ff 1c		 imul	 eax, DWORD PTR _count$2[ebp], 28
  012e6	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  012e9	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  012ec	8a 44 02 1a	 mov	 al, BYTE PTR [edx+eax+26]
  012f0	88 85 4e ff ff
	ff		 mov	 BYTE PTR _sprite$3[ebp+14], al

; 611  : 			sprite.green = scene->sprite_lights[count].colour.green;

  012f6	6b 85 3c ff ff
	ff 1c		 imul	 eax, DWORD PTR _count$2[ebp], 28
  012fd	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  01300	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  01303	8a 44 02 19	 mov	 al, BYTE PTR [edx+eax+25]
  01307	88 85 4d ff ff
	ff		 mov	 BYTE PTR _sprite$3[ebp+13], al

; 612  : 			sprite.blue = scene->sprite_lights[count].colour.blue;

  0130d	6b 85 3c ff ff
	ff 1c		 imul	 eax, DWORD PTR _count$2[ebp], 28
  01314	8b 4d cc	 mov	 ecx, DWORD PTR _scene$[ebp]
  01317	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  0131a	8a 44 02 18	 mov	 al, BYTE PTR [edx+eax+24]
  0131e	88 85 4c ff ff
	ff		 mov	 BYTE PTR _sprite$3[ebp+12], al

; 613  : 			sprite.additive = TRUE;

  01324	c7 85 58 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _sprite$3[ebp+24], 1

; 614  : 			//DEBUG// THIS LINE WAS COMMENTED OUT
; 615  : 			sprite.texture = system_textures[TEXTURE_INDEX_FLARE001];

  0132e	b8 04 00 00 00	 mov	 eax, 4
  01333	69 c8 6e 06 00
	00		 imul	 ecx, eax, 1646
  01339	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[ecx]
  0133f	89 95 5c ff ff
	ff		 mov	 DWORD PTR _sprite$3[ebp+28], edx

; 616  : 			//DEBUG// THIS LINE WAS COMMENTED OUT
; 617  : 
; 618  : 			insert_zbiased_object_into_3d_scene ( OBJECT_3D_DRAW_TYPE_SPRITE, &sprite, 0 );

  01345	51		 push	 ecx
  01346	0f 57 c0	 xorps	 xmm0, xmm0
  01349	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0134e	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _sprite$3[ebp]
  01354	50		 push	 eax
  01355	6a 10		 push	 16			; 00000010H
  01357	e8 00 00 00 00	 call	 ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene

; 619  : 		}

  0135c	e9 00 fd ff ff	 jmp	 $LN8@draw_zbuff
$LN9@draw_zbuff:

; 620  : 	}
; 621  : 
; 622  : 	obj->vp.position = old_object_vp.position;

  01361	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  01364	83 c0 08	 add	 eax, 8
  01367	8b 4d 9c	 mov	 ecx, DWORD PTR _old_object_vp$[ebp]
  0136a	89 08		 mov	 DWORD PTR [eax], ecx
  0136c	8b 55 a0	 mov	 edx, DWORD PTR _old_object_vp$[ebp+4]
  0136f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  01372	8b 4d a4	 mov	 ecx, DWORD PTR _old_object_vp$[ebp+8]
  01375	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 623  : 
; 624  : 	visual_3d_vp->position = old_visual_3d_vp;

  01378	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0137d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?old_visual_3d_vp@@3UVEC3D@@A
  01383	89 08		 mov	 DWORD PTR [eax], ecx
  01385	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?old_visual_3d_vp@@3UVEC3D@@A+4
  0138b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0138e	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?old_visual_3d_vp@@3UVEC3D@@A+8
  01394	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 625  : }

  01397	5f		 pop	 edi
  01398	5e		 pop	 esi
  01399	5b		 pop	 ebx
  0139a	8b e5		 mov	 esp, ebp
  0139c	5d		 pop	 ebp
  0139d	c2 0c 00	 ret	 12			; 0000000cH
?draw_zbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z ENDP ; draw_zbuffered_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\fpu.h
;	COMDAT ?asm_convert_float_to_int@@YGXMPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_integer$ = 12						; size = 4
?asm_convert_float_to_int@@YGXMPAH@Z PROC		; asm_convert_float_to_int, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 
; 132  : 	__asm
; 133  : 	{
; 134  : 
; 135  : 		fld value

  00009	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 136  : 		mov edx, integer

  0000c	8b 55 0c	 mov	 edx, DWORD PTR _integer$[ebp]

; 137  : 		fistp dword ptr [edx]

  0000f	db 1a		 fistp	 DWORD PTR [edx]

; 138  : 	}
; 139  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?asm_convert_float_to_int@@YGXMPAH@Z ENDP		; asm_convert_float_to_int
_TEXT	ENDS
END
