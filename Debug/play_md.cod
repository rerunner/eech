; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\ui_menu\player\play_md.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?player_medals_screen@@3PAUUI_OBJECT@@A		; player_medals_screen
PUBLIC	?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A	; medals_screen_texture
PUBLIC	?medals_title_text@@3PAUUI_OBJECT@@A		; medals_title_text
PUBLIC	?medals_text_name@@3PAUUI_OBJECT@@A		; medals_text_name
PUBLIC	?medals_text_info@@3PAUUI_OBJECT@@A		; medals_text_info
PUBLIC	?us_area@@3PAUUI_OBJECT@@A			; us_area
PUBLIC	?russian_area@@3PAUUI_OBJECT@@A			; russian_area
PUBLIC	?exit_button@@3PAUUI_OBJECT@@A			; exit_button
PUBLIC	?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A	; medal_graphics
PUBLIC	?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A	; us_medal_info_array
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A ; russian_medal_info_array
PUBLIC	?us_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A ; us_medal_graphic_array
PUBLIC	??_C@_0CA@JAHCKGLN@graphics?2ui?2cohokum?2USSaudi?4psd@ ; `string'
PUBLIC	??_C@_0BO@JPLJLLOL@graphics?2ui?2cohokum?2USLeb?4psd@ ; `string'
PUBLIC	??_C@_0CB@JFGCKOKA@graphics?2ui?2cohokum?2USTaiwan?4ps@ ; `string'
PUBLIC	??_C@_0CB@DKBEEEFD@graphics?2ui?2cohokum?2armaviat?4ps@ ; `string'
PUBLIC	??_C@_0CB@PCNDFLA@graphics?2ui?2cohokum?2senaviat?4ps@ ; `string'
PUBLIC	??_C@_0CB@CHKICNGJ@graphics?2ui?2cohokum?2masaviat?4ps@ ; `string'
PUBLIC	??_C@_0CB@PGJICKBG@graphics?2ui?2cohokum?2purheart?4ps@ ; `string'
PUBLIC	??_C@_0CB@IBGBDGLB@graphics?2ui?2cohokum?2airmedal?4ps@ ; `string'
PUBLIC	??_C@_0CA@LODMLBJE@graphics?2ui?2cohokum?2distfly?4psd@ ; `string'
PUBLIC	??_C@_0CB@OMEJNJMJ@graphics?2ui?2cohokum?2silvstar?4ps@ ; `string'
PUBLIC	??_C@_0CB@PFLJCEPB@graphics?2ui?2cohokum?2distser2?4ps@ ; `string'
PUBLIC	??_C@_0CA@ELEGMCJL@graphics?2ui?2cohokum?2medhon2?4psd@ ; `string'
PUBLIC	??_C@_0CB@HDCNFGFP@graphics?2ui?2cohokum?2distser1?4ps@ ; `string'
PUBLIC	??_C@_0CA@MNNCLADF@graphics?2ui?2cohokum?2medhon1?4psd@ ; `string'
PUBLIC	?russian_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A ; russian_medal_graphic_array
PUBLIC	??_C@_0BO@NIDAIOOD@graphics?2ui?2cohokum?2SVLeb?4psd@ ; `string'
PUBLIC	??_C@_0CA@FAPKHPEI@graphics?2ui?2cohokum?2SVYemen?4psd@ ; `string'
PUBLIC	??_C@_0CB@KNCEAGGN@graphics?2ui?2cohokum?2SVTaiwan?4ps@ ; `string'
PUBLIC	??_C@_0CA@BANCGGMG@graphics?2ui?2cohokum?23rdServ?4psd@ ; `string'
PUBLIC	??_C@_0CA@CPJLHMKF@graphics?2ui?2cohokum?22ndServ?4psd@ ; `string'
PUBLIC	??_C@_0CA@JMFFCJKG@graphics?2ui?2cohokum?21StServ?4psd@ ; `string'
PUBLIC	??_C@_0CB@FPKLBKOB@graphics?2ui?2cohokum?2OrdGlory?4ps@ ; `string'
PUBLIC	??_C@_0CB@EJCNNIMB@graphics?2ui?2cohokum?2RdBanner?4ps@ ; `string'
PUBLIC	??_C@_0BO@BCBIGHLF@graphics?2ui?2cohokum?2Lenin?4psd@ ; `string'
PUBLIC	??_C@_0CA@DBJCKKLD@graphics?2ui?2cohokum?2OrdServ?4psd@ ; `string'
PUBLIC	??_C@_0CA@HJMKCFLD@graphics?2ui?2cohokum?2OrdVic2?4psd@ ; `string'
PUBLIC	??_C@_0CB@KJMJNOAI@graphics?2ui?2cohokum?2GldStar2?4ps@ ; `string'
PUBLIC	??_C@_0CA@PPFOFHBN@graphics?2ui?2cohokum?2OrdVic1?4psd@ ; `string'
PUBLIC	??_C@_0CB@CPFNKMKG@graphics?2ui?2cohokum?2GldStar1?4ps@ ; `string'
PUBLIC	?valour_medal_award_criteria@@3PAUPLAYER_MEDAL_CRITERIA@@A ; valour_medal_award_criteria
_BSS	SEGMENT
?player_medals_screen@@3PAUUI_OBJECT@@A DD 01H DUP (?)	; player_medals_screen
?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A DD 01H DUP (?) ; medals_screen_texture
?medals_title_text@@3PAUUI_OBJECT@@A DD 01H DUP (?)	; medals_title_text
?medals_text_name@@3PAUUI_OBJECT@@A DD 01H DUP (?)	; medals_text_name
?medals_text_info@@3PAUUI_OBJECT@@A DD 01H DUP (?)	; medals_text_info
?us_area@@3PAUUI_OBJECT@@A DD 01H DUP (?)		; us_area
?russian_area@@3PAUUI_OBJECT@@A DD 01H DUP (?)		; russian_area
?exit_button@@3PAUUI_OBJECT@@A DD 01H DUP (?)		; exit_button
?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A DD 0fH DUP (?) ; medal_graphics
_BSS	ENDS
;	COMDAT ??_C@_0CB@CPFNKMKG@graphics?2ui?2cohokum?2GldStar1?4ps@
CONST	SEGMENT
??_C@_0CB@CPFNKMKG@graphics?2ui?2cohokum?2GldStar1?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\GldStar1.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PPFOFHBN@graphics?2ui?2cohokum?2OrdVic1?4psd@
CONST	SEGMENT
??_C@_0CA@PPFOFHBN@graphics?2ui?2cohokum?2OrdVic1?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\OrdVic1.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KJMJNOAI@graphics?2ui?2cohokum?2GldStar2?4ps@
CONST	SEGMENT
??_C@_0CB@KJMJNOAI@graphics?2ui?2cohokum?2GldStar2?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\GldStar2.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HJMKCFLD@graphics?2ui?2cohokum?2OrdVic2?4psd@
CONST	SEGMENT
??_C@_0CA@HJMKCFLD@graphics?2ui?2cohokum?2OrdVic2?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\OrdVic2.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DBJCKKLD@graphics?2ui?2cohokum?2OrdServ?4psd@
CONST	SEGMENT
??_C@_0CA@DBJCKKLD@graphics?2ui?2cohokum?2OrdServ?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\OrdServ.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BCBIGHLF@graphics?2ui?2cohokum?2Lenin?4psd@
CONST	SEGMENT
??_C@_0BO@BCBIGHLF@graphics?2ui?2cohokum?2Lenin?4psd@ DB 'graphics\ui\coh'
	DB	'okum\Lenin.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EJCNNIMB@graphics?2ui?2cohokum?2RdBanner?4ps@
CONST	SEGMENT
??_C@_0CB@EJCNNIMB@graphics?2ui?2cohokum?2RdBanner?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\RdBanner.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FPKLBKOB@graphics?2ui?2cohokum?2OrdGlory?4ps@
CONST	SEGMENT
??_C@_0CB@FPKLBKOB@graphics?2ui?2cohokum?2OrdGlory?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\OrdGlory.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JMFFCJKG@graphics?2ui?2cohokum?21StServ?4psd@
CONST	SEGMENT
??_C@_0CA@JMFFCJKG@graphics?2ui?2cohokum?21StServ?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\1StServ.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CPJLHMKF@graphics?2ui?2cohokum?22ndServ?4psd@
CONST	SEGMENT
??_C@_0CA@CPJLHMKF@graphics?2ui?2cohokum?22ndServ?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\2ndServ.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BANCGGMG@graphics?2ui?2cohokum?23rdServ?4psd@
CONST	SEGMENT
??_C@_0CA@BANCGGMG@graphics?2ui?2cohokum?23rdServ?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\3rdServ.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KNCEAGGN@graphics?2ui?2cohokum?2SVTaiwan?4ps@
CONST	SEGMENT
??_C@_0CB@KNCEAGGN@graphics?2ui?2cohokum?2SVTaiwan?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\SVTaiwan.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FAPKHPEI@graphics?2ui?2cohokum?2SVYemen?4psd@
CONST	SEGMENT
??_C@_0CA@FAPKHPEI@graphics?2ui?2cohokum?2SVYemen?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\SVYemen.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NIDAIOOD@graphics?2ui?2cohokum?2SVLeb?4psd@
CONST	SEGMENT
??_C@_0BO@NIDAIOOD@graphics?2ui?2cohokum?2SVLeb?4psd@ DB 'graphics\ui\coh'
	DB	'okum\SVLeb.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MNNCLADF@graphics?2ui?2cohokum?2medhon1?4psd@
CONST	SEGMENT
??_C@_0CA@MNNCLADF@graphics?2ui?2cohokum?2medhon1?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\medhon1.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HDCNFGFP@graphics?2ui?2cohokum?2distser1?4ps@
CONST	SEGMENT
??_C@_0CB@HDCNFGFP@graphics?2ui?2cohokum?2distser1?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\distser1.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@ELEGMCJL@graphics?2ui?2cohokum?2medhon2?4psd@
CONST	SEGMENT
??_C@_0CA@ELEGMCJL@graphics?2ui?2cohokum?2medhon2?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\medhon2.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PFLJCEPB@graphics?2ui?2cohokum?2distser2?4ps@
CONST	SEGMENT
??_C@_0CB@PFLJCEPB@graphics?2ui?2cohokum?2distser2?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\distser2.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OMEJNJMJ@graphics?2ui?2cohokum?2silvstar?4ps@
CONST	SEGMENT
??_C@_0CB@OMEJNJMJ@graphics?2ui?2cohokum?2silvstar?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\silvstar.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LODMLBJE@graphics?2ui?2cohokum?2distfly?4psd@
CONST	SEGMENT
??_C@_0CA@LODMLBJE@graphics?2ui?2cohokum?2distfly?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\distfly.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IBGBDGLB@graphics?2ui?2cohokum?2airmedal?4ps@
CONST	SEGMENT
??_C@_0CB@IBGBDGLB@graphics?2ui?2cohokum?2airmedal?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\airmedal.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PGJICKBG@graphics?2ui?2cohokum?2purheart?4ps@
CONST	SEGMENT
??_C@_0CB@PGJICKBG@graphics?2ui?2cohokum?2purheart?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\purheart.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CHKICNGJ@graphics?2ui?2cohokum?2masaviat?4ps@
CONST	SEGMENT
??_C@_0CB@CHKICNGJ@graphics?2ui?2cohokum?2masaviat?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\masaviat.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PCNDFLA@graphics?2ui?2cohokum?2senaviat?4ps@
CONST	SEGMENT
??_C@_0CB@PCNDFLA@graphics?2ui?2cohokum?2senaviat?4ps@ DB 'graphics\ui\co'
	DB	'hokum\senaviat.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DKBEEEFD@graphics?2ui?2cohokum?2armaviat?4ps@
CONST	SEGMENT
??_C@_0CB@DKBEEEFD@graphics?2ui?2cohokum?2armaviat?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\armaviat.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JFGCKOKA@graphics?2ui?2cohokum?2USTaiwan?4ps@
CONST	SEGMENT
??_C@_0CB@JFGCKOKA@graphics?2ui?2cohokum?2USTaiwan?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\USTaiwan.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JPLJLLOL@graphics?2ui?2cohokum?2USLeb?4psd@
CONST	SEGMENT
??_C@_0BO@JPLJLLOL@graphics?2ui?2cohokum?2USLeb?4psd@ DB 'graphics\ui\coh'
	DB	'okum\USLeb.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JAHCKGLN@graphics?2ui?2cohokum?2USSaudi?4psd@
CONST	SEGMENT
??_C@_0CA@JAHCKGLN@graphics?2ui?2cohokum?2USSaudi?4psd@ DB 'graphics\ui\c'
	DB	'ohokum\USSaudi.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A DD FLAT:??_C@_00CNPNBAHC@@ ; us_medal_info_array
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f1df3b6r			; 0.617
	DD	000000000r			; 0
	DD	03de353f8r			; 0.111
	DD	03ea353f8r			; 0.319
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f3e353fr			; 0.743
	DD	03cd4fdf4r			; 0.026
	DD	03ddd2f1br			; 0.108
	DD	03eb0a3d7r			; 0.345
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f5a1cacr			; 0.852
	DD	03dc08312r			; 0.094
	DD	03dd2f1aar			; 0.103
	DD	03ea5e354r			; 0.324
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f42d0e5r			; 0.761
	DD	03f4d9168r			; 0.803
	DD	03e26e979r			; 0.163
	DD	03ddf3b64r			; 0.109
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f3b645ar			; 0.732
	DD	03f2353f8r			; 0.638
	DD	03e560419r			; 0.209
	DD	03e16872br			; 0.147
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f32b021r			; 0.698
	DD	03edcac08r			; 0.431
	DD	03e851eb8r			; 0.26
	DD	03e46a7f0r			; 0.194
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03eb8d4fer			; 0.361
	DD	03f224dd3r			; 0.634
	DD	03e09374cr			; 0.134
	DD	03e77ced9r			; 0.242
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f004189r			; 0.501
	DD	03f116873r			; 0.568
	DD	03e09374cr			; 0.134
	DD	03e581062r			; 0.211
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03e3f7ceer			; 0.187
	DD	03eed9168r			; 0.464
	DD	03e29fbe7r			; 0.166
	DD	03ec41893r			; 0.383
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03c23d70ar			; 0.01
	DD	03ef020c5r			; 0.469
	DD	03e333333r			; 0.175
	DD	03e73b646r			; 0.238
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03d9374bcr			; 0.072
	DD	03da1cac1r			; 0.079
	DD	03e6c8b44r			; 0.231
	DD	03ec49ba6r			; 0.384
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03ea5e354r			; 0.324
	DD	03d48b439r			; 0.049
	DD	03e83126fr			; 0.256
	DD	03f03126fr			; 0.512
?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A DD FLAT:??_C@_00CNPNBAHC@@ ; russian_medal_info_array
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f1db22dr			; 0.616
	DD	000000000r			; 0
	DD	03ded9168r			; 0.116
	DD	03ea147aer			; 0.315
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f3d2f1br			; 0.739
	DD	03bc49ba6r			; 0.006
	DD	03de56042r			; 0.112
	DD	03eb9db23r			; 0.363
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f59999ar			; 0.85
	DD	03d8b4396r			; 0.068
	DD	03de76c8br			; 0.113
	DD	03eb851ecr			; 0.36
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f604189r			; 0.876
	DD	03f1e353fr			; 0.618
	DD	03da3d70ar			; 0.08
	DD	03e958106r			; 0.292
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f2f9db2r			; 0.686
	DD	03f0f9db2r			; 0.561
	DD	03dba5e35r			; 0.091
	DD	03ea7ef9er			; 0.328
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f472b02r			; 0.778
	DD	03edd2f1br			; 0.432
	DD	03dbe76c9r			; 0.093
	DD	03ea147aer			; 0.315
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03ec51eb8r			; 0.385
	DD	03f0e147br			; 0.555
	DD	03e1cac08r			; 0.153
	DD	03ea66666r			; 0.325
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f0b4396r			; 0.544
	DD	03f0d4fdfr			; 0.552
	DD	03de56042r			; 0.112
	DD	03e6978d5r			; 0.228
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03e560419r			; 0.209
	DD	03ee147aer			; 0.44
	DD	03e1db22dr			; 0.154
	DD	03ecbc6a8r			; 0.398
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03c8b4396r			; 0.017
	DD	03ee147aer			; 0.44
	DD	03e428f5cr			; 0.19
	DD	03e8ac083r			; 0.271
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03d5d2f1br			; 0.054
	DD	03ddd2f1br			; 0.108
	DD	03e89ba5er			; 0.269
	DD	03eb2b021r			; 0.349
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03eba5e35r			; 0.364
	DD	000000000r			; 0
	DD	03e6f9db2r			; 0.234
	DD	03f0d9168r			; 0.553
?us_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A DD FLAT:??_C@_00CNPNBAHC@@ ; us_medal_graphic_array
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	FLAT:??_C@_0CA@JAHCKGLN@graphics?2ui?2cohokum?2USSaudi?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f1ae148r			; 0.605
	DD	000000000r			; 0
	DD	03e083127r			; 0.133
	DD	03ead0e56r			; 0.338
	DD	FLAT:??_C@_0BO@JPLJLLOL@graphics?2ui?2cohokum?2USLeb?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f3c28f6r			; 0.735
	DD	03cac0831r			; 0.021
	DD	03df9db23r			; 0.122
	DD	03ebdf3b6r			; 0.371
	DD	FLAT:??_C@_0CB@JFGCKOKA@graphics?2ui?2cohokum?2USTaiwan?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f5851ecr			; 0.845
	DD	03da7ef9er			; 0.082
	DD	03df5c28fr			; 0.12
	DD	03eb53f7dr			; 0.354
	DD	FLAT:??_C@_0CB@DKBEEEFD@graphics?2ui?2cohokum?2armaviat?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f408312r			; 0.752
	DD	03f4b4396r			; 0.794
	DD	03e3851ecr			; 0.18
	DD	03e0c49bar			; 0.137
	DD	FLAT:??_C@_0CB@PCNDFLA@graphics?2ui?2cohokum?2senaviat?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f391687r			; 0.723
	DD	03f208312r			; 0.627
	DD	03e6872b0r			; 0.227
	DD	03e322d0er			; 0.174
	DD	FLAT:??_C@_0CB@CHKICNGJ@graphics?2ui?2cohokum?2masaviat?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f3020c5r			; 0.688
	DD	03ed89375r			; 0.423
	DD	03e8e5604r			; 0.278
	DD	03e5e353fr			; 0.217
	DD	FLAT:??_C@_0CB@PGJICKBG@graphics?2ui?2cohokum?2purheart?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03eb43958r			; 0.352
	DD	03ed60419r			; 0.418
	DD	03e1a9fber			; 0.151
	DD	03ef4bc6ar			; 0.478
	DD	FLAT:??_C@_0CB@IBGBDGLB@graphics?2ui?2cohokum?2airmedal?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03efd70a4r			; 0.495
	DD	03ec28f5cr			; 0.38
	DD	03e147ae1r			; 0.145
	DD	03ed26e98r			; 0.411
	DD	FLAT:??_C@_0CA@LODMLBJE@graphics?2ui?2cohokum?2distfly?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03e27ef9er			; 0.164
	DD	03e9d2f1br			; 0.307
	DD	03e54fdf4r			; 0.208
	DD	03f0f5c29r			; 0.56
	DD	FLAT:??_C@_0CB@OMEJNJMJ@graphics?2ui?2cohokum?2silvstar?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	000000000r			; 0
	DD	03e158106r			; 0.146
	DD	03e676c8br			; 0.226
	DD	03f13b646r			; 0.577
	DD	FLAT:??_C@_0CB@PFLJCEPB@graphics?2ui?2cohokum?2distser2?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03d75c28fr			; 0.06
	DD	000000000r			; 0
	DD	03e820c4ar			; 0.254
	DD	03efd70a4r			; 0.495
	DD	FLAT:??_C@_0CA@ELEGMCJL@graphics?2ui?2cohokum?2medhon2?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03ea147aer			; 0.315
	DD	000000000r			; 0
	DD	03e8ac083r			; 0.271
	DD	03f1cac08r			; 0.612
	DD	FLAT:??_C@_0CB@HDCNFGFP@graphics?2ui?2cohokum?2distser1?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03d75c28fr			; 0.06
	DD	000000000r			; 0
	DD	03e820c4ar			; 0.254
	DD	03efd70a4r			; 0.495
	DD	FLAT:??_C@_0CA@MNNCLADF@graphics?2ui?2cohokum?2medhon1?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03ea147aer			; 0.315
	DD	000000000r			; 0
	DD	03e8ac083r			; 0.271
	DD	03f1cac08r			; 0.612
?russian_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A DD FLAT:??_C@_00CNPNBAHC@@ ; russian_medal_graphic_array
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	FLAT:??_C@_0BO@NIDAIOOD@graphics?2ui?2cohokum?2SVLeb?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f1a9fber			; 0.604
	DD	000000000r			; 0
	DD	03e116873r			; 0.142
	DD	03eb020c5r			; 0.344
	DD	FLAT:??_C@_0CA@FAPKHPEI@graphics?2ui?2cohokum?2SVYemen?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f3a1cacr			; 0.727
	DD	000000000r			; 0
	DD	03e09374cr			; 0.134
	DD	03ec9ba5er			; 0.394
	DD	FLAT:??_C@_0CB@KNCEAGGN@graphics?2ui?2cohokum?2SVTaiwan?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f5645a2r			; 0.837
	DD	03d851eb8r			; 0.065
	DD	03e0d4fdfr			; 0.138
	DD	03ec83127r			; 0.391
	DD	FLAT:??_C@_0CA@BANCGGMG@graphics?2ui?2cohokum?23rdServ?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f5ced91r			; 0.863
	DD	03f1be76dr			; 0.609
	DD	03dd4fdf4r			; 0.104
	DD	03ea66666r			; 0.325
	DD	FLAT:??_C@_0CA@CPJLHMKF@graphics?2ui?2cohokum?22ndServ?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f2c0831r			; 0.672
	DD	03f0c8b44r			; 0.549
	DD	03df9db23r			; 0.122
	DD	03ebae148r			; 0.365
	DD	FLAT:??_C@_0CA@JMFFCJKG@graphics?2ui?2cohokum?21StServ?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f3fbe77r			; 0.749
	DD	03ebb645ar			; 0.366
	DD	03e072b02r			; 0.132
	DD	03ecfdf3br			; 0.406
	DD	FLAT:??_C@_0CB@FPKLBKOB@graphics?2ui?2cohokum?2OrdGlory?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03ebdf3b6r			; 0.371
	DD	03ee1cac1r			; 0.441
	DD	03e3126e9r			; 0.173
	DD	03eea7efar			; 0.458
	DD	FLAT:??_C@_0CB@EJCNNIMB@graphics?2ui?2cohokum?2RdBanner?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03f06e979r			; 0.527
	DD	03ec5a1cbr			; 0.386
	DD	03e0b4396r			; 0.136
	DD	03ed47ae1r			; 0.415
	DD	FLAT:??_C@_0BO@BCBIGHLF@graphics?2ui?2cohokum?2Lenin?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03e4ccccdr			; 0.2
	DD	03ed26e98r			; 0.411
	DD	03e3e76c9r			; 0.186
	DD	03eef9db2r			; 0.468
	DD	FLAT:??_C@_0CA@DBJCKKLD@graphics?2ui?2cohokum?2OrdServ?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03c03126fr			; 0.008
	DD	03ede353fr			; 0.434
	DD	03e6147aer			; 0.22
	DD	03e989375r			; 0.298
	DD	FLAT:??_C@_0CA@HJMKCFLD@graphics?2ui?2cohokum?2OrdVic2?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03d23d70ar			; 0.04
	DD	03dc49ba6r			; 0.096
	DD	03e989375r			; 0.298
	DD	03ecf5c29r			; 0.405
	DD	FLAT:??_C@_0CB@KJMJNOAI@graphics?2ui?2cohokum?2GldStar2?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03eb020c5r			; 0.344
	DD	000000000r			; 0
	DD	03e883127r			; 0.266
	DD	03f143958r			; 0.579
	DD	FLAT:??_C@_0CA@PPFOFHBN@graphics?2ui?2cohokum?2OrdVic1?4psd@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03d23d70ar			; 0.04
	DD	03dc49ba6r			; 0.096
	DD	03e989375r			; 0.298
	DD	03ecf5c29r			; 0.405
	DD	FLAT:??_C@_0CB@CPFNKMKG@graphics?2ui?2cohokum?2GldStar1?4ps@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	03eb020c5r			; 0.344
	DD	000000000r			; 0
	DD	03e883127r			; 0.266
	DD	03f143958r			; 0.579
?valour_medal_award_criteria@@3PAUPLAYER_MEDAL_CRITERIA@@A DD 01388H ; valour_medal_award_criteria
	DD	03H
	DD	05H
	DD	02H
	DD	0bH
	DD	02H
	DD	0fa0H
	DD	02H
	DD	04H
	DD	01H
	DD	0aH
	DD	03H
	DD	0c80H
	DD	01H
	DD	00H
	DD	00H
	DD	09H
	DD	02H
	DD	0a28H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?define_medals_page_objects@@YGXXZ		; define_medals_page_objects
PUBLIC	?award_campaign_medal@@YGXHH@Z			; award_campaign_medal
PUBLIC	?award_aviator_wings@@YGHH@Z			; award_aviator_wings
PUBLIC	?award_valour_medal@@YGHHH@Z			; award_valour_medal
PUBLIC	?award_purple_heart_medal@@YGHH@Z		; award_purple_heart_medal
PUBLIC	?award_air_medal_medal@@YGHHH@Z			; award_air_medal_medal
PUBLIC	?award_player_rank@@YGHH@Z			; award_player_rank
PUBLIC	?set_medal_states@@YGXQAPAUUI_OBJECT@@@Z	; set_medal_states
PUBLIC	?notify_medals_screen@@YGXPAUUI_OBJECT@@@Z	; notify_medals_screen
PUBLIC	?medals_highlight_off_function@@YGXPAUUI_OBJECT@@@Z ; medals_highlight_off_function
PUBLIC	?highlight_us_medal_info@@YGXPAUUI_OBJECT@@PAX@Z ; highlight_us_medal_info
PUBLIC	?highlight_russian_medal_info@@YGXPAUUI_OBJECT@@PAX@Z ; highlight_russian_medal_info
PUBLIC	?define_us_medal_objects@@YGXXZ			; define_us_medal_objects
PUBLIC	?define_russian_medal_objects@@YGXXZ		; define_russian_medal_objects
PUBLIC	?query_award_medal@@YGHPAUPLAYER_LOG_TYPE@@PAHPAUPLAYER_MEDAL_CRITERIA@@HH@Z ; query_award_medal
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_02PLFPMECB@US@				; `string'
PUBLIC	??_C@_0CB@DBHDJGJN@graphics?2ui?2cohokum?2medalsUS?4ps@ ; `string'
PUBLIC	??_C@_07PEAPJBGG@Russian@			; `string'
PUBLIC	??_C@_0CB@CGODCBE@graphics?2ui?2cohokum?2medalsSV?4ps@ ; `string'
PUBLIC	??_C@_05LMLILOOH@UI_OK@				; `string'
PUBLIC	??_C@_0M@FJMAMPGJ@Medal?5Saudi@			; `string'
PUBLIC	??_C@_0P@DAAOEBFG@Medal?5Campaign@		; `string'
PUBLIC	??_C@_0O@BNCBBOEF@Medal?5Lebanon@		; `string'
PUBLIC	??_C@_0N@ODEBLCNO@Medal?5Taiwan@		; `string'
PUBLIC	??_C@_0BB@EMDGHCDK@Medal?5Army?5Wings@		; `string'
PUBLIC	??_C@_0BD@OBPADMBM@Medal?5Army?5Aviator@	; `string'
PUBLIC	??_C@_0BD@JPKHHCMM@Medal?5Senior?5Wings@	; `string'
PUBLIC	??_C@_0BF@KDBGKJLG@Medal?5Senior?5Aviator@	; `string'
PUBLIC	??_C@_0BD@PAFMOKND@Medal?5Master?5Wings@	; `string'
PUBLIC	??_C@_0BF@JAJINDKF@Medal?5Master?5Aviator@	; `string'
PUBLIC	??_C@_0N@OOICACPC@Medal?5Purple@		; `string'
PUBLIC	??_C@_0N@OCFENGOB@Medal?5Injury@		; `string'
PUBLIC	??_C@_09NPPFACME@Medal?5Air@			; `string'
PUBLIC	??_C@_0N@NEMLAFAG@Medal?5Valour@		; `string'
PUBLIC	??_C@_0BE@BJOEHDAH@Medal?5Distinguished@	; `string'
PUBLIC	??_C@_0N@FLJHBDKJ@Medal?5Silver@		; `string'
PUBLIC	??_C@_0O@BOJFGMNN@Medal?5Service@		; `string'
PUBLIC	??_C@_0N@KDOANAIF@Medal?5Honour@		; `string'
PUBLIC	??_C@_0BB@JNGBKPHG@Medal?5SV?5Lebanon@		; `string'
PUBLIC	??_C@_0P@GPNPPMPN@Medal?5SV?5Yemen@		; `string'
PUBLIC	??_C@_0BA@MGJHEKEL@Medal?5SV?5Taiwan@		; `string'
PUBLIC	??_C@_0BE@OBBJPHBK@Medal?5SV?5Army?5Wings@	; `string'
PUBLIC	??_C@_0BG@JHPBIMOO@Medal?5SV?5Senior?5Wings@	; `string'
PUBLIC	??_C@_0BG@PIAKBEPB@Medal?5SV?5Master?5Wings@	; `string'
PUBLIC	??_C@_0P@ONPAAEIP@Medal?5SV?5Glory@		; `string'
PUBLIC	??_C@_0BA@LMNGNCDL@Medal?5SV?5Banner@		; `string'
PUBLIC	??_C@_0P@CHGLDJFP@Medal?5SV?5Lenin@		; `string'
PUBLIC	??_C@_0BB@JONFNNOO@Medal?5SV?5Service@		; `string'
PUBLIC	??_C@_0BB@HNCHPAGG@Medal?5SV?5Victory@		; `string'
PUBLIC	??_C@_0O@GLANAFCA@Medal?5SV?5Star@		; `string'
PUBLIC	??_C@_07OINJEOHH@?$CI?$CFd?$CJ?5?$CFs@		; `string'
PUBLIC	?__LINE__Var@?0??award_aviator_wings@@YGHH@Z@4JA ; `award_aviator_wings'::`1'::__LINE__Var
PUBLIC	??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CK@EDPCIMHH@?$CIside?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIside?5?$DM?$DN?5NUM_ENT@ ; `string'
PUBLIC	?__LINE__Var@?0??award_campaign_medal@@YGXHH@Z@4JA ; `award_campaign_medal'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??award_valour_medal@@YGHHH@Z@4JA ; `award_valour_medal'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??award_purple_heart_medal@@YGHH@Z@4JA ; `award_purple_heart_medal'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??award_air_medal_medal@@YGHHH@Z@4JA ; `award_air_medal_medal'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??award_player_rank@@YGHH@Z@4JA	; `award_player_rank'::`1'::__LINE__Var
PUBLIC	__real@3d0b4396
PUBLIC	__real@3d54fdf4
PUBLIC	__real@3db020c5
PUBLIC	__real@3dc49ba6
PUBLIC	__real@3eac0831
PUBLIC	__real@3f4ed917
PUBLIC	__real@3f53f7cf
PUBLIC	__real@3f67ae14
PUBLIC	__real@3f753f7d
PUBLIC	__real@3f800000
PUBLIC	__real@3f999999a0000000
PUBLIC	__real@3fa374bc60000000
PUBLIC	__real@3fa3f7cee0000000
PUBLIC	__real@3fa99999a0000000
PUBLIC	__real@3fad2f1aa0000000
PUBLIC	__real@3fc3333340000000
PUBLIC	__real@3fdee978e0000000
PUBLIC	__real@3fea872b00000000
PUBLIC	__real@3fed9999a0000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40800000
PUBLIC	__real@41700000
PUBLIC	__real@42480000
PUBLIC	__real@45610000
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?blit_front_buffer_to_render_buffer@@YGXXZ:PROC	; blit_front_buffer_to_render_buffer
EXTRN	?create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z:PROC ; create_texture_graphic
EXTRN	?destroy_texture_graphic@@YGXPAUTEXTURE_GRAPHIC@@@Z:PROC ; destroy_texture_graphic
EXTRN	?create_ui_object@@YAPAUUI_OBJECT@@HZZ:PROC	; create_ui_object
EXTRN	?reset_time_values@@YGXPAUUI_OBJECT@@@Z:PROC	; reset_time_values
EXTRN	?recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z:PROC ; recursively_set_object_time
EXTRN	?pop_ui_screen@@YGXW4SCREEN_POP_TYPES@@@Z:PROC	; pop_ui_screen
EXTRN	?get_trans@@YGPBDPBD@Z:PROC			; get_trans
EXTRN	?get_current_player_log@@YGPAUPLAYER_LOG_TYPE@@XZ:PROC ; get_current_player_log
EXTRN	?get_player_rank_from_points@@YGHH@Z:PROC	; get_player_rank_from_points
EXTRN	?get_player_log_flying_seconds@@YGMHPAUPLAYER_LOG_TYPE@@@Z:PROC ; get_player_log_flying_seconds
EXTRN	?set_text_option_backdrop_object@@YGXPAUUI_OBJECT@@0@Z:PROC ; set_text_option_backdrop_object
EXTRN	?fn_set_ui_object_x_size@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_x_size
EXTRN	?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_drawable
EXTRN	?fn_get_ui_object_drawable@@3PAP6GHPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_drawable
EXTRN	?fn_set_ui_object_redraw@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_redraw
EXTRN	?fn_get_ui_object_item_number@@3PAP6GHPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_item_number
EXTRN	?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA:BYTE ; fn_set_ui_object_text
EXTRN	?fn_set_ui_object_graphic@@3PAP6GXPAUUI_OBJECT@@PAG@ZA:BYTE ; fn_set_ui_object_graphic
EXTRN	?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA:BYTE ; fn_set_ui_object_texture_graphic
EXTRN	?fn_set_ui_object_graphic_type@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_graphic_type
EXTRN	?ui_screen_title_text_colour@@3UREAL_COLOUR@@A:DWORD ; ui_screen_title_text_colour
EXTRN	?ui_option_title_text_colour@@3UREAL_COLOUR@@A:DWORD ; ui_option_title_text_colour
EXTRN	?ui_option_text_default_colour@@3UREAL_COLOUR@@A:DWORD ; ui_option_text_default_colour
EXTRN	?ui_option_text_hilite_colour@@3UREAL_COLOUR@@A:DWORD ; ui_option_text_hilite_colour
EXTRN	?graphics_files@@3PAUFILE_DATA@@A:BYTE		; graphics_files
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	?text_option_bdrop@@3PAUTEXTURE_GRAPHIC@@A:DWORD ; text_option_bdrop
EXTRN	?player_log_current_side@@3W4ENTITY_SIDES@@A:DWORD ; player_log_current_side
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?russian_medal_objects@@3PAPAUUI_OBJECT@@A DD 0fH DUP (?) ; russian_medal_objects
?us_medal_objects@@3PAPAUUI_OBJECT@@A DD 0fH DUP (?)	; us_medal_objects
_BSS	ENDS
;	COMDAT __real@45610000
CONST	SEGMENT
__real@45610000 DD 045610000r			; 3600
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fed9999a0000000
CONST	SEGMENT
__real@3fed9999a0000000 DQ 03fed9999a0000000r	; 0.925
CONST	ENDS
;	COMDAT __real@3fea872b00000000
CONST	SEGMENT
__real@3fea872b00000000 DQ 03fea872b00000000r	; 0.829
CONST	ENDS
;	COMDAT __real@3fdee978e0000000
CONST	SEGMENT
__real@3fdee978e0000000 DQ 03fdee978e0000000r	; 0.483
CONST	ENDS
;	COMDAT __real@3fc3333340000000
CONST	SEGMENT
__real@3fc3333340000000 DQ 03fc3333340000000r	; 0.15
CONST	ENDS
;	COMDAT __real@3fad2f1aa0000000
CONST	SEGMENT
__real@3fad2f1aa0000000 DQ 03fad2f1aa0000000r	; 0.057
CONST	ENDS
;	COMDAT __real@3fa99999a0000000
CONST	SEGMENT
__real@3fa99999a0000000 DQ 03fa99999a0000000r	; 0.05
CONST	ENDS
;	COMDAT __real@3fa3f7cee0000000
CONST	SEGMENT
__real@3fa3f7cee0000000 DQ 03fa3f7cee0000000r	; 0.039
CONST	ENDS
;	COMDAT __real@3fa374bc60000000
CONST	SEGMENT
__real@3fa374bc60000000 DQ 03fa374bc60000000r	; 0.038
CONST	ENDS
;	COMDAT __real@3f999999a0000000
CONST	SEGMENT
__real@3f999999a0000000 DQ 03f999999a0000000r	; 0.025
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f753f7d
CONST	SEGMENT
__real@3f753f7d DD 03f753f7dr			; 0.958
CONST	ENDS
;	COMDAT __real@3f67ae14
CONST	SEGMENT
__real@3f67ae14 DD 03f67ae14r			; 0.905
CONST	ENDS
;	COMDAT __real@3f53f7cf
CONST	SEGMENT
__real@3f53f7cf DD 03f53f7cfr			; 0.828
CONST	ENDS
;	COMDAT __real@3f4ed917
CONST	SEGMENT
__real@3f4ed917 DD 03f4ed917r			; 0.808
CONST	ENDS
;	COMDAT __real@3eac0831
CONST	SEGMENT
__real@3eac0831 DD 03eac0831r			; 0.336
CONST	ENDS
;	COMDAT __real@3dc49ba6
CONST	SEGMENT
__real@3dc49ba6 DD 03dc49ba6r			; 0.096
CONST	ENDS
;	COMDAT __real@3db020c5
CONST	SEGMENT
__real@3db020c5 DD 03db020c5r			; 0.086
CONST	ENDS
;	COMDAT __real@3d54fdf4
CONST	SEGMENT
__real@3d54fdf4 DD 03d54fdf4r			; 0.052
CONST	ENDS
;	COMDAT __real@3d0b4396
CONST	SEGMENT
__real@3d0b4396 DD 03d0b4396r			; 0.034
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??award_player_rank@@YGHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??award_player_rank@@YGHH@Z@4JA DD 0579H	; `award_player_rank'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??award_air_medal_medal@@YGHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??award_air_medal_medal@@YGHHH@Z@4JA DD 053cH ; `award_air_medal_medal'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??award_purple_heart_medal@@YGHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??award_purple_heart_medal@@YGHH@Z@4JA DD 0501H ; `award_purple_heart_medal'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??award_valour_medal@@YGHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??award_valour_medal@@YGHHH@Z@4JA DD 04bfH ; `award_valour_medal'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??award_campaign_medal@@YGXHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??award_campaign_medal@@YGXHH@Z@4JA DD 044aH ; `award_campaign_medal'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CK@EDPCIMHH@?$CIside?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIside?5?$DM?$DN?5NUM_ENT@
CONST	SEGMENT
??_C@_0CK@EDPCIMHH@?$CIside?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIside?5?$DM?$DN?5NUM_ENT@ DB '('
	DB	'side >= 0) && (side <= NUM_ENTITY_SIDES)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\ui_menu\player\play_md.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??award_aviator_wings@@YGHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??award_aviator_wings@@YGHH@Z@4JA DD 0409H ; `award_aviator_wings'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_07OINJEOHH@?$CI?$CFd?$CJ?5?$CFs@
CONST	SEGMENT
??_C@_07OINJEOHH@?$CI?$CFd?$CJ?5?$CFs@ DB '(%d) %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GLANAFCA@Medal?5SV?5Star@
CONST	SEGMENT
??_C@_0O@GLANAFCA@Medal?5SV?5Star@ DB 'Medal SV Star', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HNCHPAGG@Medal?5SV?5Victory@
CONST	SEGMENT
??_C@_0BB@HNCHPAGG@Medal?5SV?5Victory@ DB 'Medal SV Victory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JONFNNOO@Medal?5SV?5Service@
CONST	SEGMENT
??_C@_0BB@JONFNNOO@Medal?5SV?5Service@ DB 'Medal SV Service', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CHGLDJFP@Medal?5SV?5Lenin@
CONST	SEGMENT
??_C@_0P@CHGLDJFP@Medal?5SV?5Lenin@ DB 'Medal SV Lenin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LMNGNCDL@Medal?5SV?5Banner@
CONST	SEGMENT
??_C@_0BA@LMNGNCDL@Medal?5SV?5Banner@ DB 'Medal SV Banner', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONPAAEIP@Medal?5SV?5Glory@
CONST	SEGMENT
??_C@_0P@ONPAAEIP@Medal?5SV?5Glory@ DB 'Medal SV Glory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PIAKBEPB@Medal?5SV?5Master?5Wings@
CONST	SEGMENT
??_C@_0BG@PIAKBEPB@Medal?5SV?5Master?5Wings@ DB 'Medal SV Master Wings', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JHPBIMOO@Medal?5SV?5Senior?5Wings@
CONST	SEGMENT
??_C@_0BG@JHPBIMOO@Medal?5SV?5Senior?5Wings@ DB 'Medal SV Senior Wings', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OBBJPHBK@Medal?5SV?5Army?5Wings@
CONST	SEGMENT
??_C@_0BE@OBBJPHBK@Medal?5SV?5Army?5Wings@ DB 'Medal SV Army Wings', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MGJHEKEL@Medal?5SV?5Taiwan@
CONST	SEGMENT
??_C@_0BA@MGJHEKEL@Medal?5SV?5Taiwan@ DB 'Medal SV Taiwan', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GPNPPMPN@Medal?5SV?5Yemen@
CONST	SEGMENT
??_C@_0P@GPNPPMPN@Medal?5SV?5Yemen@ DB 'Medal SV Yemen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JNGBKPHG@Medal?5SV?5Lebanon@
CONST	SEGMENT
??_C@_0BB@JNGBKPHG@Medal?5SV?5Lebanon@ DB 'Medal SV Lebanon', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KDOANAIF@Medal?5Honour@
CONST	SEGMENT
??_C@_0N@KDOANAIF@Medal?5Honour@ DB 'Medal Honour', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BOJFGMNN@Medal?5Service@
CONST	SEGMENT
??_C@_0O@BOJFGMNN@Medal?5Service@ DB 'Medal Service', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FLJHBDKJ@Medal?5Silver@
CONST	SEGMENT
??_C@_0N@FLJHBDKJ@Medal?5Silver@ DB 'Medal Silver', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BJOEHDAH@Medal?5Distinguished@
CONST	SEGMENT
??_C@_0BE@BJOEHDAH@Medal?5Distinguished@ DB 'Medal Distinguished', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NEMLAFAG@Medal?5Valour@
CONST	SEGMENT
??_C@_0N@NEMLAFAG@Medal?5Valour@ DB 'Medal Valour', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NPPFACME@Medal?5Air@
CONST	SEGMENT
??_C@_09NPPFACME@Medal?5Air@ DB 'Medal Air', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OCFENGOB@Medal?5Injury@
CONST	SEGMENT
??_C@_0N@OCFENGOB@Medal?5Injury@ DB 'Medal Injury', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OOICACPC@Medal?5Purple@
CONST	SEGMENT
??_C@_0N@OOICACPC@Medal?5Purple@ DB 'Medal Purple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JAJINDKF@Medal?5Master?5Aviator@
CONST	SEGMENT
??_C@_0BF@JAJINDKF@Medal?5Master?5Aviator@ DB 'Medal Master Aviator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PAFMOKND@Medal?5Master?5Wings@
CONST	SEGMENT
??_C@_0BD@PAFMOKND@Medal?5Master?5Wings@ DB 'Medal Master Wings', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KDBGKJLG@Medal?5Senior?5Aviator@
CONST	SEGMENT
??_C@_0BF@KDBGKJLG@Medal?5Senior?5Aviator@ DB 'Medal Senior Aviator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JPKHHCMM@Medal?5Senior?5Wings@
CONST	SEGMENT
??_C@_0BD@JPKHHCMM@Medal?5Senior?5Wings@ DB 'Medal Senior Wings', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OBPADMBM@Medal?5Army?5Aviator@
CONST	SEGMENT
??_C@_0BD@OBPADMBM@Medal?5Army?5Aviator@ DB 'Medal Army Aviator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EMDGHCDK@Medal?5Army?5Wings@
CONST	SEGMENT
??_C@_0BB@EMDGHCDK@Medal?5Army?5Wings@ DB 'Medal Army Wings', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ODEBLCNO@Medal?5Taiwan@
CONST	SEGMENT
??_C@_0N@ODEBLCNO@Medal?5Taiwan@ DB 'Medal Taiwan', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNCBBOEF@Medal?5Lebanon@
CONST	SEGMENT
??_C@_0O@BNCBBOEF@Medal?5Lebanon@ DB 'Medal Lebanon', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DAAOEBFG@Medal?5Campaign@
CONST	SEGMENT
??_C@_0P@DAAOEBFG@Medal?5Campaign@ DB 'Medal Campaign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FJMAMPGJ@Medal?5Saudi@
CONST	SEGMENT
??_C@_0M@FJMAMPGJ@Medal?5Saudi@ DB 'Medal Saudi', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LMLILOOH@UI_OK@
CONST	SEGMENT
??_C@_05LMLILOOH@UI_OK@ DB 'UI_OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CGODCBE@graphics?2ui?2cohokum?2medalsSV?4ps@
CONST	SEGMENT
??_C@_0CB@CGODCBE@graphics?2ui?2cohokum?2medalsSV?4ps@ DB 'graphics\ui\co'
	DB	'hokum\medalsSV.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PEAPJBGG@Russian@
CONST	SEGMENT
??_C@_07PEAPJBGG@Russian@ DB 'Russian', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DBHDJGJN@graphics?2ui?2cohokum?2medalsUS?4ps@
CONST	SEGMENT
??_C@_0CB@DBHDJGJN@graphics?2ui?2cohokum?2medalsUS?4ps@ DB 'graphics\ui\c'
	DB	'ohokum\medalsUS.psd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PLFPMECB@US@
CONST	SEGMENT
??_C@_02PLFPMECB@US@ DB 'US', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?query_award_medal@@YGHPAUPLAYER_LOG_TYPE@@PAHPAUPLAYER_MEDAL_CRITERIA@@HH@Z
_TEXT	SEGMENT
_num_medals_required$1 = -8				; size = 4
_num_medals$2 = -4					; size = 4
_log$ = 8						; size = 4
_medals$ = 12						; size = 4
_criteria$ = 16						; size = 4
_medal_type$ = 20					; size = 4
_side$ = 24						; size = 4
?query_award_medal@@YGHPAUPLAYER_LOG_TYPE@@PAHPAUPLAYER_MEDAL_CRITERIA@@HH@Z PROC ; query_award_medal, COMDAT

; 1145 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1146 : 	//
; 1147 : 	// ensure players rank is high enough
; 1148 : 	//
; 1149 : 	
; 1150 : 	if (criteria->pilot_rank > log->side_log[side].rank)

  00009	69 45 18 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  00010	8b 4d 10	 mov	 ecx, DWORD PTR _criteria$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _log$[ebp]
  00016	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00019	3b 4c 02 0c	 cmp	 ecx, DWORD PTR [edx+eax+12]
  0001d	7e 07		 jle	 SHORT $LN2@query_awar

; 1151 : 	{
; 1152 : 		return FALSE;

  0001f	33 c0		 xor	 eax, eax
  00021	e9 b2 00 00 00	 jmp	 $LN1@query_awar
$LN2@query_awar:

; 1153 : 	}
; 1154 : 
; 1155 : 	//
; 1156 : 	// test to see if the log has enough flight hours
; 1157 : 	//
; 1158 : 
; 1159 : 	if (criteria->wings_medal != MEDAL_TYPE_NONE)

  00026	8b 45 10	 mov	 eax, DWORD PTR _criteria$[ebp]
  00029	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0002d	74 16		 je	 SHORT $LN3@query_awar

; 1160 : 	{
; 1161 : 		if (!(medals [criteria->wings_medal]))

  0002f	8b 45 10	 mov	 eax, DWORD PTR _criteria$[ebp]
  00032	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00035	8b 55 0c	 mov	 edx, DWORD PTR _medals$[ebp]
  00038	83 3c 8a 00	 cmp	 DWORD PTR [edx+ecx*4], 0
  0003c	75 07		 jne	 SHORT $LN3@query_awar

; 1162 : 		{
; 1163 : 			return FALSE;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 93 00 00 00	 jmp	 $LN1@query_awar
$LN3@query_awar:

; 1164 : 		}
; 1165 : 	}
; 1166 : 
; 1167 : 	//
; 1168 : 	// test for enough campaign medals
; 1169 : 	//
; 1170 : 
; 1171 : 	if (criteria->num_campaign_medals)

  00045	8b 45 10	 mov	 eax, DWORD PTR _criteria$[ebp]
  00048	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0004c	74 51		 je	 SHORT $LN5@query_awar

; 1172 : 	{
; 1173 : 		int
; 1174 : 			num_medals;
; 1175 : 
; 1176 : 		num_medals = 0;

  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _num_medals$2[ebp], 0

; 1177 : 
; 1178 : 		num_medals += medals [MEDAL_SAUDI];

  00055	b8 04 00 00 00	 mov	 eax, 4
  0005a	c1 e0 00	 shl	 eax, 0
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _medals$[ebp]
  00060	8b 55 fc	 mov	 edx, DWORD PTR _num_medals$2[ebp]
  00063	03 14 01	 add	 edx, DWORD PTR [ecx+eax]
  00066	89 55 fc	 mov	 DWORD PTR _num_medals$2[ebp], edx

; 1179 : 
; 1180 : 		num_medals += medals [MEDAL_LEBANON];

  00069	b8 04 00 00 00	 mov	 eax, 4
  0006e	d1 e0		 shl	 eax, 1
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _medals$[ebp]
  00073	8b 55 fc	 mov	 edx, DWORD PTR _num_medals$2[ebp]
  00076	03 14 01	 add	 edx, DWORD PTR [ecx+eax]
  00079	89 55 fc	 mov	 DWORD PTR _num_medals$2[ebp], edx

; 1181 : 
; 1182 : 		num_medals += medals [MEDAL_TAIWAN];

  0007c	b8 04 00 00 00	 mov	 eax, 4
  00081	6b c8 03	 imul	 ecx, eax, 3
  00084	8b 55 0c	 mov	 edx, DWORD PTR _medals$[ebp]
  00087	8b 45 fc	 mov	 eax, DWORD PTR _num_medals$2[ebp]
  0008a	03 04 0a	 add	 eax, DWORD PTR [edx+ecx]
  0008d	89 45 fc	 mov	 DWORD PTR _num_medals$2[ebp], eax

; 1183 : 
; 1184 : 		if (num_medals < criteria->num_campaign_medals)

  00090	8b 45 10	 mov	 eax, DWORD PTR _criteria$[ebp]
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _num_medals$2[ebp]
  00096	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00099	7d 04		 jge	 SHORT $LN5@query_awar

; 1185 : 		{
; 1186 : 			return FALSE;

  0009b	33 c0		 xor	 eax, eax
  0009d	eb 39		 jmp	 SHORT $LN1@query_awar
$LN5@query_awar:

; 1187 : 		}
; 1188 : 	}
; 1189 : 
; 1190 : 	//
; 1191 : 	// test for medal required
; 1192 : 	//
; 1193 : 
; 1194 : 	if (criteria->medal_required != MEDAL_TYPE_NONE)

  0009f	8b 45 10	 mov	 eax, DWORD PTR _criteria$[ebp]
  000a2	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000a6	74 2b		 je	 SHORT $LN7@query_awar

; 1195 : 	{
; 1196 : 		int
; 1197 : 			num_medals_required;
; 1198 : 
; 1199 : 		num_medals_required = (medals [medal_type] + 1) * criteria->medal_multiplier;

  000a8	8b 45 14	 mov	 eax, DWORD PTR _medal_type$[ebp]
  000ab	8b 4d 0c	 mov	 ecx, DWORD PTR _medals$[ebp]
  000ae	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000b1	83 c2 01	 add	 edx, 1
  000b4	8b 45 10	 mov	 eax, DWORD PTR _criteria$[ebp]
  000b7	0f af 50 14	 imul	 edx, DWORD PTR [eax+20]
  000bb	89 55 f8	 mov	 DWORD PTR _num_medals_required$1[ebp], edx

; 1200 : 
; 1201 : 		if (medals [criteria->medal_required] < num_medals_required)

  000be	8b 45 10	 mov	 eax, DWORD PTR _criteria$[ebp]
  000c1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000c4	8b 55 0c	 mov	 edx, DWORD PTR _medals$[ebp]
  000c7	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000ca	3b 45 f8	 cmp	 eax, DWORD PTR _num_medals_required$1[ebp]
  000cd	7d 04		 jge	 SHORT $LN7@query_awar

; 1202 : 		{
; 1203 : 			return FALSE;

  000cf	33 c0		 xor	 eax, eax
  000d1	eb 05		 jmp	 SHORT $LN1@query_awar
$LN7@query_awar:

; 1204 : 		}
; 1205 : 	}
; 1206 : 
; 1207 : 	return TRUE;	

  000d3	b8 01 00 00 00	 mov	 eax, 1
$LN1@query_awar:

; 1208 : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 14 00	 ret	 20			; 00000014H
?query_award_medal@@YGHPAUPLAYER_LOG_TYPE@@PAHPAUPLAYER_MEDAL_CRITERIA@@HH@Z ENDP ; query_award_medal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?define_russian_medal_objects@@YGXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?define_russian_medal_objects@@YGXXZ PROC		; define_russian_medal_objects, COMDAT

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 712  : 	int
; 713  : 		i;
; 714  : 	
; 715  : 	// don't bother with text for object MEDAL_TYPE_NONE
; 716  : 
; 717  : 	russian_medal_info_array [MEDAL_LEBANON].name = get_trans ("Medal SV Lebanon");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JNGBKPHG@Medal?5SV?5Lebanon@
  0000e	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00013	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00018	d1 e1		 shl	 ecx, 1
  0001a	89 81 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx], eax

; 718  : 	russian_medal_info_array [MEDAL_LEBANON].info = get_trans ("Medal Campaign");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DAAOEBFG@Medal?5Campaign@
  00025	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  0002a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0002f	d1 e1		 shl	 ecx, 1
  00031	89 81 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+4], eax

; 719  : 
; 720  : 	russian_medal_info_array [MEDAL_SAUDI].name = get_trans ("Medal SV Yemen");

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GPNPPMPN@Medal?5SV?5Yemen@
  0003c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00041	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00046	c1 e1 00	 shl	 ecx, 0
  00049	89 81 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx], eax

; 721  : 	russian_medal_info_array [MEDAL_SAUDI].info = get_trans ("Medal Campaign");

  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DAAOEBFG@Medal?5Campaign@
  00054	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00059	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0005e	c1 e1 00	 shl	 ecx, 0
  00061	89 81 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+4], eax

; 722  : 
; 723  : 	russian_medal_info_array [MEDAL_TAIWAN].name = get_trans ("Medal SV Taiwan");

  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MGJHEKEL@Medal?5SV?5Taiwan@
  0006c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00071	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00076	6b d1 03	 imul	 edx, ecx, 3
  00079	89 82 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 724  : 	russian_medal_info_array [MEDAL_TAIWAN].info = get_trans ("Medal Campaign");

  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DAAOEBFG@Medal?5Campaign@
  00084	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00089	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0008e	6b d1 03	 imul	 edx, ecx, 3
  00091	89 82 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 725  : 
; 726  : 	russian_medal_info_array [MEDAL_ARMY_AVIATOR].name = get_trans ("Medal SV Army Wings");

  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OBBJPHBK@Medal?5SV?5Army?5Wings@
  0009c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  000a1	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000a6	c1 e1 02	 shl	 ecx, 2
  000a9	89 81 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx], eax

; 727  : 	russian_medal_info_array [MEDAL_ARMY_AVIATOR].info = get_trans ("Medal Army Aviator");

  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OBPADMBM@Medal?5Army?5Aviator@
  000b4	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  000b9	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000be	c1 e1 02	 shl	 ecx, 2
  000c1	89 81 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+4], eax

; 728  : 
; 729  : 	russian_medal_info_array [MEDAL_SENIOR_AVIATOR].name = get_trans ("Medal SV Senior Wings");

  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JHPBIMOO@Medal?5SV?5Senior?5Wings@
  000cc	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  000d1	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000d6	6b d1 05	 imul	 edx, ecx, 5
  000d9	89 82 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 730  : 	russian_medal_info_array [MEDAL_SENIOR_AVIATOR].info = get_trans ("Medal Senior Aviator");

  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KDBGKJLG@Medal?5Senior?5Aviator@
  000e4	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  000e9	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000ee	6b d1 05	 imul	 edx, ecx, 5
  000f1	89 82 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 731  : 
; 732  : 	russian_medal_info_array [MEDAL_MASTER_AVIATOR].name = get_trans ("Medal SV Master Wings");

  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PIAKBEPB@Medal?5SV?5Master?5Wings@
  000fc	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00101	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00106	6b d1 06	 imul	 edx, ecx, 6
  00109	89 82 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 733  : 	russian_medal_info_array [MEDAL_MASTER_AVIATOR].info = get_trans ("Medal Master Aviator");

  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JAJINDKF@Medal?5Master?5Aviator@
  00114	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00119	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0011e	6b d1 06	 imul	 edx, ecx, 6
  00121	89 82 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 734  : 
; 735  : 	russian_medal_info_array [MEDAL_PURPLE_HEART].name = get_trans ("Medal SV Glory");

  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ONPAAEIP@Medal?5SV?5Glory@
  0012c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00131	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00136	6b d1 07	 imul	 edx, ecx, 7
  00139	89 82 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 736  : 	russian_medal_info_array [MEDAL_PURPLE_HEART].info = get_trans ("Medal Injury");

  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OCFENGOB@Medal?5Injury@
  00144	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00149	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0014e	6b d1 07	 imul	 edx, ecx, 7
  00151	89 82 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 737  : 
; 738  : 	russian_medal_info_array [MEDAL_AIR_MEDAL].name = get_trans ("Medal SV Banner");

  00157	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LMNGNCDL@Medal?5SV?5Banner@
  0015c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00161	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00166	c1 e1 03	 shl	 ecx, 3
  00169	89 81 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx], eax

; 739  : 	russian_medal_info_array [MEDAL_AIR_MEDAL].info = get_trans ("Medal Valour");

  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEMLAFAG@Medal?5Valour@
  00174	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00179	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0017e	c1 e1 03	 shl	 ecx, 3
  00181	89 81 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+4], eax

; 740  : 
; 741  : 	russian_medal_info_array [MEDAL_FLYING_CROSS].name = get_trans ("Medal SV Lenin");

  00187	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CHGLDJFP@Medal?5SV?5Lenin@
  0018c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00191	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00196	6b d1 09	 imul	 edx, ecx, 9
  00199	89 82 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 742  : 	russian_medal_info_array [MEDAL_FLYING_CROSS].info = get_trans ("Medal Valour");

  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEMLAFAG@Medal?5Valour@
  001a4	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  001a9	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001ae	6b d1 09	 imul	 edx, ecx, 9
  001b1	89 82 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 743  : 
; 744  : 	russian_medal_info_array [MEDAL_SILVER_STAR].name = get_trans ("Medal SV Service");

  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JONFNNOO@Medal?5SV?5Service@
  001bc	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  001c1	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001c6	6b d1 0a	 imul	 edx, ecx, 10
  001c9	89 82 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 745  : 	russian_medal_info_array [MEDAL_SILVER_STAR].info = get_trans ("Medal Valour");

  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEMLAFAG@Medal?5Valour@
  001d4	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  001d9	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001de	6b d1 0a	 imul	 edx, ecx, 10
  001e1	89 82 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 746  : 
; 747  : 	russian_medal_info_array [MEDAL_DISTINGUISHED_SERVICE].name = get_trans ("Medal SV Victory");

  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HNCHPAGG@Medal?5SV?5Victory@
  001ec	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  001f1	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001f6	6b d1 0b	 imul	 edx, ecx, 11
  001f9	89 82 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 748  : 	russian_medal_info_array [MEDAL_DISTINGUISHED_SERVICE].info = get_trans ("Medal Valour");

  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEMLAFAG@Medal?5Valour@
  00204	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00209	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0020e	6b d1 0b	 imul	 edx, ecx, 11
  00211	89 82 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 749  : 
; 750  : 	russian_medal_info_array [MEDAL_MEDAL_OF_HONOUR].name = get_trans ("Medal SV Star");

  00217	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GLANAFCA@Medal?5SV?5Star@
  0021c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00221	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00226	6b d1 0c	 imul	 edx, ecx, 12
  00229	89 82 00 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 751  : 	russian_medal_info_array [MEDAL_MEDAL_OF_HONOUR].info = get_trans ("Medal Valour");

  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEMLAFAG@Medal?5Valour@
  00234	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00239	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0023e	6b d1 0c	 imul	 edx, ecx, 12
  00241	89 82 04 00 00
	00		 mov	 DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 752  : 
; 753  : 	/////////////////////////////////////////////////////////////////
; 754  : 	// Medals Areas
; 755  : 
; 756  : 	russian_area = create_ui_object

  00247	6a 11		 push	 17			; 00000011H
  00249	6a 01		 push	 1
  0024b	6a 07		 push	 7
  0024d	6a 00		 push	 0
  0024f	6a 10		 push	 16			; 00000010H
  00251	68 ff 00 00 00	 push	 255			; 000000ffH
  00256	68 ff 00 00 00	 push	 255			; 000000ffH
  0025b	68 ff 00 00 00	 push	 255			; 000000ffH
  00260	68 ff 00 00 00	 push	 255			; 000000ffH
  00265	6a 0a		 push	 10			; 0000000aH
  00267	6a 00		 push	 0
  00269	68 ff 00 00 00	 push	 255			; 000000ffH
  0026e	68 ff 00 00 00	 push	 255			; 000000ffH
  00273	68 ff 00 00 00	 push	 255			; 000000ffH
  00278	6a 0b		 push	 11			; 0000000bH
  0027a	83 ec 08	 sub	 esp, 8
  0027d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00285	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0028a	83 ec 08	 sub	 esp, 8
  0028d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00295	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0029a	6a 59		 push	 89			; 00000059H
  0029c	83 ec 08	 sub	 esp, 8
  0029f	0f 57 c0	 xorps	 xmm0, xmm0
  002a2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002a7	83 ec 08	 sub	 esp, 8
  002aa	0f 57 c0	 xorps	 xmm0, xmm0
  002ad	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002b2	6a 58		 push	 88			; 00000058H
  002b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  002b9	50		 push	 eax
  002ba	6a 32		 push	 50			; 00000032H
  002bc	6a 01		 push	 1
  002be	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  002c3	83 c4 70	 add	 esp, 112		; 00000070H
  002c6	a3 00 00 00 00	 mov	 DWORD PTR ?russian_area@@3PAUUI_OBJECT@@A, eax ; russian_area

; 757  : 		(
; 758  : 			UI_TYPE_AREA,
; 759  : 			UI_ATTR_PARENT (player_medals_screen),
; 760  : 			UI_ATTR_VIRTUAL_POSITION (0.0, 0.0),
; 761  : 			UI_ATTR_VIRTUAL_SIZE (1.0, 1.0),
; 762  : 			UI_ATTR_COLOUR_START (255,255,255,0),
; 763  : 			UI_ATTR_COLOUR_END (255,255,255,255),
; 764  : 			UI_ATTR_DRAWABLE (FALSE),
; 765  : 			UI_ATTR_CLEAR (TRUE),
; 766  : 			UI_ATTR_END
; 767  : 		);
; 768  : 
; 769  : 	// create basic medal ui objects
; 770  : 	for (i = 0; i < NUMBER_OF_MEDAL_GRAPHICS; i++)

  002cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002d2	eb 09		 jmp	 SHORT $LN4@define_rus
$LN2@define_rus:
  002d4	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002d7	83 c0 01	 add	 eax, 1
  002da	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@define_rus:
  002dd	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  002e1	0f 8d b1 00 00
	00		 jge	 $LN3@define_rus

; 771  : 	{
; 772  : 		russian_medal_objects [i] = create_ui_object

  002e7	6a 11		 push	 17			; 00000011H
  002e9	68 ff 00 00 00	 push	 255			; 000000ffH
  002ee	68 ff 00 00 00	 push	 255			; 000000ffH
  002f3	68 ff 00 00 00	 push	 255			; 000000ffH
  002f8	68 ff 00 00 00	 push	 255			; 000000ffH
  002fd	6a 0a		 push	 10			; 0000000aH
  002ff	6a 00		 push	 0
  00301	68 ff 00 00 00	 push	 255			; 000000ffH
  00306	68 ff 00 00 00	 push	 255			; 000000ffH
  0030b	68 ff 00 00 00	 push	 255			; 000000ffH
  00310	6a 0b		 push	 11			; 0000000bH
  00312	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  00316	f3 0f 10 80 14
	00 00 00	 movss	 xmm0, DWORD PTR ?russian_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A[eax+20]
  0031e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00322	83 ec 08	 sub	 esp, 8
  00325	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0032a	6b 4d fc 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  0032e	f3 0f 10 81 10
	00 00 00	 movss	 xmm0, DWORD PTR ?russian_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+16]
  00336	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0033a	83 ec 08	 sub	 esp, 8
  0033d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00342	6a 59		 push	 89			; 00000059H
  00344	6b 55 fc 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  00348	f3 0f 10 82 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?russian_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+12]
  00350	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00354	83 ec 08	 sub	 esp, 8
  00357	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0035c	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  00360	f3 0f 10 80 08
	00 00 00	 movss	 xmm0, DWORD PTR ?russian_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A[eax+8]
  00368	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0036c	83 ec 08	 sub	 esp, 8
  0036f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00374	6a 58		 push	 88			; 00000058H
  00376	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?russian_area@@3PAUUI_OBJECT@@A ; russian_area
  0037c	51		 push	 ecx
  0037d	6a 32		 push	 50			; 00000032H
  0037f	6a 01		 push	 1
  00381	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  00386	83 c4 60	 add	 esp, 96			; 00000060H
  00389	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0038c	89 04 95 00 00
	00 00		 mov	 DWORD PTR ?russian_medal_objects@@3PAPAUUI_OBJECT@@A[edx*4], eax

; 773  : 		(
; 774  : 			UI_TYPE_AREA,
; 775  : 			UI_ATTR_PARENT (russian_area),
; 776  : 			UI_ATTR_VIRTUAL_POSITION (russian_medal_graphic_array[i].x1, russian_medal_graphic_array[i].y1),
; 777  : 			UI_ATTR_VIRTUAL_SIZE (russian_medal_graphic_array[i].x2, russian_medal_graphic_array[i].y2),
; 778  : 			UI_ATTR_COLOUR_START (255,255,255,0),
; 779  : 			UI_ATTR_COLOUR_END (255,255,255,255),
; 780  : 			UI_ATTR_END
; 781  : 		);
; 782  : 	}

  00393	e9 3c ff ff ff	 jmp	 $LN2@define_rus
$LN3@define_rus:

; 783  : 
; 784  : 	// create highlight areas
; 785  : 	
; 786  : 	for (i = MEDAL_TYPE_NONE; i < NUM_MEDAL_TYPES; i++)

  00398	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0039f	eb 09		 jmp	 SHORT $LN7@define_rus
$LN5@define_rus:
  003a1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003a4	83 c0 01	 add	 eax, 1
  003a7	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@define_rus:
  003aa	83 7d fc 0d	 cmp	 DWORD PTR _i$[ebp], 13	; 0000000dH
  003ae	0f 8d 9e 00 00
	00		 jge	 $LN6@define_rus

; 787  : 	{
; 788  : 		create_ui_object

  003b4	6a 11		 push	 17			; 00000011H
  003b6	6a 03		 push	 3
  003b8	6a 25		 push	 37			; 00000025H
  003ba	68 00 00 00 00	 push	 OFFSET ?highlight_russian_medal_info@@YGXPAUUI_OBJECT@@PAX@Z ; highlight_russian_medal_info
  003bf	6a 24		 push	 36			; 00000024H
  003c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A ; medals_text_info
  003c6	50		 push	 eax
  003c7	6a 04		 push	 4
  003c9	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  003cc	51		 push	 ecx
  003cd	6a 29		 push	 41			; 00000029H
  003cf	6a 01		 push	 1
  003d1	6a 1b		 push	 27			; 0000001bH
  003d3	6a 01		 push	 1
  003d5	6a 07		 push	 7
  003d7	6b 55 fc 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  003db	f3 0f 10 82 14
	00 00 00	 movss	 xmm0, DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+20]
  003e3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003e7	83 ec 08	 sub	 esp, 8
  003ea	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003ef	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  003f3	f3 0f 10 80 10
	00 00 00	 movss	 xmm0, DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[eax+16]
  003fb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003ff	83 ec 08	 sub	 esp, 8
  00402	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00407	6a 59		 push	 89			; 00000059H
  00409	6b 4d fc 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  0040d	f3 0f 10 81 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+12]
  00415	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00419	83 ec 08	 sub	 esp, 8
  0041c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00421	6b 55 fc 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  00425	f3 0f 10 82 08
	00 00 00	 movss	 xmm0, DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+8]
  0042d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00431	83 ec 08	 sub	 esp, 8
  00434	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00439	6a 58		 push	 88			; 00000058H
  0043b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_area@@3PAUUI_OBJECT@@A ; russian_area
  00440	50		 push	 eax
  00441	6a 32		 push	 50			; 00000032H
  00443	6a 01		 push	 1
  00445	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  0044a	83 c4 68	 add	 esp, 104		; 00000068H

; 789  : 				(
; 790  : 					UI_TYPE_AREA,
; 791  : 					UI_ATTR_PARENT (russian_area),
; 792  : 					UI_ATTR_VIRTUAL_POSITION (russian_medal_info_array [i].x1, russian_medal_info_array [i].y1),
; 793  : 					UI_ATTR_VIRTUAL_SIZE (russian_medal_info_array [i].x2, russian_medal_info_array [i].y2),
; 794  : 					UI_ATTR_CLEAR (TRUE),
; 795  : 					UI_ATTR_HIGHLIGHTABLE (TRUE),
; 796  : 					UI_ATTR_ITEM_NUMBER ( i ),
; 797  : 					UI_ATTR_ASSOCIATION (medals_text_info),
; 798  : 					UI_ATTR_HIGHLIGHTED_FUNCTION (highlight_russian_medal_info),
; 799  : 					UI_ATTR_HIGHLIGHTED_NOTIFY_ON (NOTIFY_TYPE_BUTTON_EITHER),
; 800  : #if DEBUG_MODULE
; 801  : 					UI_ATTR_FUNCTION (notify_award_clicked_medal),
; 802  : 					UI_ATTR_NOTIFY_ON (NOTIFY_TYPE_BUTTON_UP),
; 803  : #endif
; 804  : 					UI_ATTR_END
; 805  : 	
; 806  : 				);
; 807  : 	}

  0044d	e9 4f ff ff ff	 jmp	 $LN5@define_rus
$LN6@define_rus:

; 808  : 
; 809  : }

  00452	5f		 pop	 edi
  00453	5e		 pop	 esi
  00454	5b		 pop	 ebx
  00455	8b e5		 mov	 esp, ebp
  00457	5d		 pop	 ebp
  00458	c3		 ret	 0
?define_russian_medal_objects@@YGXXZ ENDP		; define_russian_medal_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?define_us_medal_objects@@YGXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?define_us_medal_objects@@YGXXZ PROC			; define_us_medal_objects, COMDAT

; 603  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 604  : 
; 605  : 	int
; 606  : 		i;
; 607  : 
; 608  : 	// don't bother with text for object MEDAL_TYPE_NONE
; 609  : 	
; 610  : 	us_medal_info_array[MEDAL_SAUDI].name = get_trans ("Medal Saudi");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FJMAMPGJ@Medal?5Saudi@
  0000e	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00013	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00018	c1 e1 00	 shl	 ecx, 0
  0001b	89 81 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx], eax

; 611  : 	us_medal_info_array[MEDAL_SAUDI].info = get_trans ("Medal Campaign");

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DAAOEBFG@Medal?5Campaign@
  00026	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  0002b	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00030	c1 e1 00	 shl	 ecx, 0
  00033	89 81 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+4], eax

; 612  : 
; 613  : 	us_medal_info_array[MEDAL_LEBANON].name = get_trans ("Medal Lebanon");

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNCBBOEF@Medal?5Lebanon@
  0003e	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00043	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00048	d1 e1		 shl	 ecx, 1
  0004a	89 81 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx], eax

; 614  : 	us_medal_info_array[MEDAL_LEBANON].info =	get_trans ("Medal Campaign");

  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DAAOEBFG@Medal?5Campaign@
  00055	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  0005a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0005f	d1 e1		 shl	 ecx, 1
  00061	89 81 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+4], eax

; 615  : 
; 616  : 	us_medal_info_array[MEDAL_TAIWAN].name = get_trans ("Medal Taiwan");

  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ODEBLCNO@Medal?5Taiwan@
  0006c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00071	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00076	6b d1 03	 imul	 edx, ecx, 3
  00079	89 82 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 617  : 	us_medal_info_array[MEDAL_TAIWAN].info = get_trans ("Medal Campaign");

  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DAAOEBFG@Medal?5Campaign@
  00084	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00089	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0008e	6b d1 03	 imul	 edx, ecx, 3
  00091	89 82 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 618  : 
; 619  : 	us_medal_info_array[MEDAL_ARMY_AVIATOR].name = get_trans ("Medal Army Wings");

  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EMDGHCDK@Medal?5Army?5Wings@
  0009c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  000a1	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000a6	c1 e1 02	 shl	 ecx, 2
  000a9	89 81 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx], eax

; 620  : 	us_medal_info_array[MEDAL_ARMY_AVIATOR].info = get_trans ("Medal Army Aviator");

  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OBPADMBM@Medal?5Army?5Aviator@
  000b4	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  000b9	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000be	c1 e1 02	 shl	 ecx, 2
  000c1	89 81 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+4], eax

; 621  : 
; 622  : 	us_medal_info_array[MEDAL_SENIOR_AVIATOR].name = get_trans ("Medal Senior Wings");

  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JPKHHCMM@Medal?5Senior?5Wings@
  000cc	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  000d1	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000d6	6b d1 05	 imul	 edx, ecx, 5
  000d9	89 82 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 623  : 	us_medal_info_array[MEDAL_SENIOR_AVIATOR].info = get_trans ("Medal Senior Aviator");

  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KDBGKJLG@Medal?5Senior?5Aviator@
  000e4	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  000e9	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000ee	6b d1 05	 imul	 edx, ecx, 5
  000f1	89 82 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 624  : 
; 625  : 	us_medal_info_array[MEDAL_MASTER_AVIATOR].name = get_trans ("Medal Master Wings");

  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PAFMOKND@Medal?5Master?5Wings@
  000fc	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00101	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00106	6b d1 06	 imul	 edx, ecx, 6
  00109	89 82 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 626  : 	us_medal_info_array[MEDAL_MASTER_AVIATOR].info = get_trans ("Medal Master Aviator");

  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JAJINDKF@Medal?5Master?5Aviator@
  00114	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00119	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0011e	6b d1 06	 imul	 edx, ecx, 6
  00121	89 82 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 627  : 
; 628  : 	us_medal_info_array[MEDAL_PURPLE_HEART].name = get_trans ("Medal Purple");

  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OOICACPC@Medal?5Purple@
  0012c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00131	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00136	6b d1 07	 imul	 edx, ecx, 7
  00139	89 82 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 629  : 	us_medal_info_array[MEDAL_PURPLE_HEART].info = get_trans ("Medal Injury");

  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OCFENGOB@Medal?5Injury@
  00144	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00149	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0014e	6b d1 07	 imul	 edx, ecx, 7
  00151	89 82 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 630  : 
; 631  : 	us_medal_info_array[MEDAL_AIR_MEDAL].name = get_trans ("Medal Air");

  00157	68 00 00 00 00	 push	 OFFSET ??_C@_09NPPFACME@Medal?5Air@
  0015c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00161	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00166	c1 e1 03	 shl	 ecx, 3
  00169	89 81 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx], eax

; 632  : 	us_medal_info_array[MEDAL_AIR_MEDAL].info = get_trans ("Medal Valour");

  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEMLAFAG@Medal?5Valour@
  00174	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00179	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0017e	c1 e1 03	 shl	 ecx, 3
  00181	89 81 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+4], eax

; 633  : 
; 634  : 	us_medal_info_array[MEDAL_FLYING_CROSS].name = get_trans ("Medal Distinguished");

  00187	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BJOEHDAH@Medal?5Distinguished@
  0018c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00191	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00196	6b d1 09	 imul	 edx, ecx, 9
  00199	89 82 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 635  : 	us_medal_info_array[MEDAL_FLYING_CROSS].info = get_trans ("Medal Valour");

  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEMLAFAG@Medal?5Valour@
  001a4	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  001a9	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001ae	6b d1 09	 imul	 edx, ecx, 9
  001b1	89 82 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 636  : 
; 637  : 	us_medal_info_array[MEDAL_SILVER_STAR].name = get_trans ("Medal Silver");

  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FLJHBDKJ@Medal?5Silver@
  001bc	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  001c1	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001c6	6b d1 0a	 imul	 edx, ecx, 10
  001c9	89 82 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 638  : 	us_medal_info_array[MEDAL_SILVER_STAR].info = get_trans ("Medal Valour");

  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEMLAFAG@Medal?5Valour@
  001d4	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  001d9	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001de	6b d1 0a	 imul	 edx, ecx, 10
  001e1	89 82 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 639  : 
; 640  : 	us_medal_info_array[MEDAL_DISTINGUISHED_SERVICE].name = get_trans ("Medal Service");

  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BOJFGMNN@Medal?5Service@
  001ec	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  001f1	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001f6	6b d1 0b	 imul	 edx, ecx, 11
  001f9	89 82 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 641  : 	us_medal_info_array[MEDAL_DISTINGUISHED_SERVICE].info = get_trans ("Medal Valour");

  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEMLAFAG@Medal?5Valour@
  00204	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00209	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0020e	6b d1 0b	 imul	 edx, ecx, 11
  00211	89 82 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 642  : 
; 643  : 	us_medal_info_array[MEDAL_MEDAL_OF_HONOUR].name = get_trans ("Medal Honour");

  00217	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KDOANAIF@Medal?5Honour@
  0021c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00221	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00226	6b d1 0c	 imul	 edx, ecx, 12
  00229	89 82 00 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx], eax

; 644  : 	us_medal_info_array[MEDAL_MEDAL_OF_HONOUR].info = get_trans ("Medal Valour");

  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEMLAFAG@Medal?5Valour@
  00234	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00239	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0023e	6b d1 0c	 imul	 edx, ecx, 12
  00241	89 82 04 00 00
	00		 mov	 DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+4], eax

; 645  : 
; 646  : 	/////////////////////////////////////////////////////////////////
; 647  : 	// Medals Areas
; 648  : 
; 649  : 	us_area = create_ui_object

  00247	6a 11		 push	 17			; 00000011H
  00249	6a 01		 push	 1
  0024b	6a 07		 push	 7
  0024d	6a 00		 push	 0
  0024f	6a 10		 push	 16			; 00000010H
  00251	68 ff 00 00 00	 push	 255			; 000000ffH
  00256	68 ff 00 00 00	 push	 255			; 000000ffH
  0025b	68 ff 00 00 00	 push	 255			; 000000ffH
  00260	68 ff 00 00 00	 push	 255			; 000000ffH
  00265	6a 0a		 push	 10			; 0000000aH
  00267	6a 00		 push	 0
  00269	68 ff 00 00 00	 push	 255			; 000000ffH
  0026e	68 ff 00 00 00	 push	 255			; 000000ffH
  00273	68 ff 00 00 00	 push	 255			; 000000ffH
  00278	6a 0b		 push	 11			; 0000000bH
  0027a	83 ec 08	 sub	 esp, 8
  0027d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00285	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0028a	83 ec 08	 sub	 esp, 8
  0028d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00295	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0029a	6a 59		 push	 89			; 00000059H
  0029c	83 ec 08	 sub	 esp, 8
  0029f	0f 57 c0	 xorps	 xmm0, xmm0
  002a2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002a7	83 ec 08	 sub	 esp, 8
  002aa	0f 57 c0	 xorps	 xmm0, xmm0
  002ad	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002b2	6a 58		 push	 88			; 00000058H
  002b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  002b9	50		 push	 eax
  002ba	6a 32		 push	 50			; 00000032H
  002bc	6a 01		 push	 1
  002be	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  002c3	83 c4 70	 add	 esp, 112		; 00000070H
  002c6	a3 00 00 00 00	 mov	 DWORD PTR ?us_area@@3PAUUI_OBJECT@@A, eax ; us_area

; 650  : 		(
; 651  : 			UI_TYPE_AREA,
; 652  : 			UI_ATTR_PARENT (player_medals_screen),
; 653  : 			UI_ATTR_VIRTUAL_POSITION (0.0, 0.0),
; 654  : 			UI_ATTR_VIRTUAL_SIZE (1.0, 1.0),
; 655  : 			UI_ATTR_COLOUR_START (255,255,255,0),
; 656  : 			UI_ATTR_COLOUR_END (255,255,255,255),
; 657  : 			UI_ATTR_DRAWABLE (FALSE),
; 658  : 			UI_ATTR_CLEAR (TRUE),
; 659  : 			UI_ATTR_END
; 660  : 		);
; 661  : 
; 662  : 	// create basic medal ui objects
; 663  : 	for (i = 0; i < NUMBER_OF_MEDAL_GRAPHICS; i++)

  002cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002d2	eb 09		 jmp	 SHORT $LN4@define_us_
$LN2@define_us_:
  002d4	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002d7	83 c0 01	 add	 eax, 1
  002da	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@define_us_:
  002dd	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  002e1	0f 8d b5 00 00
	00		 jge	 $LN3@define_us_

; 664  : 	{
; 665  : 		us_medal_objects [i] = create_ui_object

  002e7	6a 11		 push	 17			; 00000011H
  002e9	6a 00		 push	 0
  002eb	6a 10		 push	 16			; 00000010H
  002ed	68 ff 00 00 00	 push	 255			; 000000ffH
  002f2	68 ff 00 00 00	 push	 255			; 000000ffH
  002f7	68 ff 00 00 00	 push	 255			; 000000ffH
  002fc	68 ff 00 00 00	 push	 255			; 000000ffH
  00301	6a 0a		 push	 10			; 0000000aH
  00303	6a 00		 push	 0
  00305	68 ff 00 00 00	 push	 255			; 000000ffH
  0030a	68 ff 00 00 00	 push	 255			; 000000ffH
  0030f	68 ff 00 00 00	 push	 255			; 000000ffH
  00314	6a 0b		 push	 11			; 0000000bH
  00316	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0031a	f3 0f 10 80 14
	00 00 00	 movss	 xmm0, DWORD PTR ?us_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A[eax+20]
  00322	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00326	83 ec 08	 sub	 esp, 8
  00329	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0032e	6b 4d fc 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  00332	f3 0f 10 81 10
	00 00 00	 movss	 xmm0, DWORD PTR ?us_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+16]
  0033a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0033e	83 ec 08	 sub	 esp, 8
  00341	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00346	6a 59		 push	 89			; 00000059H
  00348	6b 55 fc 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  0034c	f3 0f 10 82 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?us_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+12]
  00354	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00358	83 ec 08	 sub	 esp, 8
  0035b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00360	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  00364	f3 0f 10 80 08
	00 00 00	 movss	 xmm0, DWORD PTR ?us_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A[eax+8]
  0036c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00370	83 ec 08	 sub	 esp, 8
  00373	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00378	6a 58		 push	 88			; 00000058H
  0037a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?us_area@@3PAUUI_OBJECT@@A ; us_area
  00380	51		 push	 ecx
  00381	6a 32		 push	 50			; 00000032H
  00383	6a 01		 push	 1
  00385	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  0038a	83 c4 68	 add	 esp, 104		; 00000068H
  0038d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00390	89 04 95 00 00
	00 00		 mov	 DWORD PTR ?us_medal_objects@@3PAPAUUI_OBJECT@@A[edx*4], eax

; 666  : 		(
; 667  : 			UI_TYPE_AREA,
; 668  : 			UI_ATTR_PARENT (us_area),
; 669  : 			UI_ATTR_VIRTUAL_POSITION (us_medal_graphic_array[i].x1, us_medal_graphic_array[i].y1),
; 670  : 			UI_ATTR_VIRTUAL_SIZE (us_medal_graphic_array[i].x2, us_medal_graphic_array[i].y2),
; 671  : 			UI_ATTR_COLOUR_START (255,255,255,0),
; 672  : 			UI_ATTR_COLOUR_END (255,255,255,255),
; 673  : 			UI_ATTR_DRAWABLE (FALSE),
; 674  : 			UI_ATTR_END
; 675  : 		);
; 676  : 
; 677  : 	}

  00397	e9 38 ff ff ff	 jmp	 $LN2@define_us_
$LN3@define_us_:

; 678  : 
; 679  : 	// create highlight areas
; 680  : 	
; 681  : 	for (i = MEDAL_TYPE_NONE; i < NUM_MEDAL_TYPES; i++)

  0039c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003a3	eb 09		 jmp	 SHORT $LN7@define_us_
$LN5@define_us_:
  003a5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003a8	83 c0 01	 add	 eax, 1
  003ab	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@define_us_:
  003ae	83 7d fc 0d	 cmp	 DWORD PTR _i$[ebp], 13	; 0000000dH
  003b2	0f 8d 9e 00 00
	00		 jge	 $LN6@define_us_

; 682  : 	{
; 683  : 		create_ui_object

  003b8	6a 11		 push	 17			; 00000011H
  003ba	6a 03		 push	 3
  003bc	6a 25		 push	 37			; 00000025H
  003be	68 00 00 00 00	 push	 OFFSET ?highlight_us_medal_info@@YGXPAUUI_OBJECT@@PAX@Z ; highlight_us_medal_info
  003c3	6a 24		 push	 36			; 00000024H
  003c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A ; medals_text_info
  003ca	50		 push	 eax
  003cb	6a 04		 push	 4
  003cd	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  003d0	51		 push	 ecx
  003d1	6a 29		 push	 41			; 00000029H
  003d3	6a 01		 push	 1
  003d5	6a 1b		 push	 27			; 0000001bH
  003d7	6a 01		 push	 1
  003d9	6a 07		 push	 7
  003db	6b 55 fc 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  003df	f3 0f 10 82 14
	00 00 00	 movss	 xmm0, DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+20]
  003e7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003eb	83 ec 08	 sub	 esp, 8
  003ee	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003f3	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  003f7	f3 0f 10 80 10
	00 00 00	 movss	 xmm0, DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[eax+16]
  003ff	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00403	83 ec 08	 sub	 esp, 8
  00406	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0040b	6a 59		 push	 89			; 00000059H
  0040d	6b 4d fc 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  00411	f3 0f 10 81 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[ecx+12]
  00419	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0041d	83 ec 08	 sub	 esp, 8
  00420	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00425	6b 55 fc 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  00429	f3 0f 10 82 08
	00 00 00	 movss	 xmm0, DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[edx+8]
  00431	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00435	83 ec 08	 sub	 esp, 8
  00438	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0043d	6a 58		 push	 88			; 00000058H
  0043f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_area@@3PAUUI_OBJECT@@A ; us_area
  00444	50		 push	 eax
  00445	6a 32		 push	 50			; 00000032H
  00447	6a 01		 push	 1
  00449	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  0044e	83 c4 68	 add	 esp, 104		; 00000068H

; 684  : 				(
; 685  : 					UI_TYPE_AREA,
; 686  : 					UI_ATTR_PARENT (us_area),
; 687  : 					UI_ATTR_VIRTUAL_POSITION (us_medal_info_array [i].x1, us_medal_info_array [i].y1),
; 688  : 					UI_ATTR_VIRTUAL_SIZE (us_medal_info_array [i].x2, us_medal_info_array [i].y2),
; 689  : 					UI_ATTR_CLEAR (TRUE),
; 690  : 					UI_ATTR_HIGHLIGHTABLE (TRUE),
; 691  : 					UI_ATTR_ITEM_NUMBER ( i ),
; 692  : 					UI_ATTR_ASSOCIATION (medals_text_info),
; 693  : 					UI_ATTR_HIGHLIGHTED_FUNCTION (highlight_us_medal_info),
; 694  : 					UI_ATTR_HIGHLIGHTED_NOTIFY_ON (NOTIFY_TYPE_BUTTON_EITHER),
; 695  : #if DEBUG_MODULE
; 696  : 					UI_ATTR_FUNCTION (notify_award_clicked_medal),
; 697  : 					UI_ATTR_NOTIFY_ON (NOTIFY_TYPE_BUTTON_UP),
; 698  : #endif
; 699  : 					UI_ATTR_END
; 700  : 	
; 701  : 				);
; 702  : 	}

  00451	e9 4f ff ff ff	 jmp	 $LN5@define_us_
$LN6@define_us_:

; 703  : 
; 704  : }

  00456	5f		 pop	 edi
  00457	5e		 pop	 esi
  00458	5b		 pop	 ebx
  00459	8b e5		 mov	 esp, ebp
  0045b	5d		 pop	 ebp
  0045c	c3		 ret	 0
?define_us_medal_objects@@YGXXZ ENDP			; define_us_medal_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?highlight_russian_medal_info@@YGXPAUUI_OBJECT@@PAX@Z
_TEXT	SEGMENT
_medal_count$ = -268					; size = 4
_medal_number$ = -264					; size = 4
_info_text$ = -260					; size = 128
_name_text$ = -132					; size = 128
_player$ = -4						; size = 4
_obj$ = 8						; size = 4
_arg$ = 12						; size = 4
?highlight_russian_medal_info@@YGXPAUUI_OBJECT@@PAX@Z PROC ; highlight_russian_medal_info, COMDAT

; 913  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 914  : 
; 915  : 	player_log_type
; 916  : 		*player;
; 917  : 		
; 918  : 	char
; 919  : 		name_text [128],
; 920  : 		info_text [128];
; 921  : 
; 922  : 	int
; 923  : 		medal_number,
; 924  : 		medal_count;
; 925  : 
; 926  : 	player = get_current_player_log ();

  0000c	e8 00 00 00 00	 call	 ?get_current_player_log@@YGPAUPLAYER_LOG_TYPE@@XZ ; get_current_player_log
  00011	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax

; 927  : 
; 928  : 	medal_number = get_ui_object_item_number (obj);

  00014	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_item_number@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
  00024	ff d0		 call	 eax
  00026	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _medal_number$[ebp], eax

; 929  : 
; 930  : 	medal_count = player->side_log [player_log_current_side].medals [medal_number];

  0002c	69 05 00 00 00
	00 4c 03 00 00	 imul	 eax, DWORD PTR ?player_log_current_side@@3W4ENTITY_SIDES@@A, 844 ; player_log_current_side
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00039	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  0003d	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _medal_number$[ebp]
  00043	8b 4c 82 18	 mov	 ecx, DWORD PTR [edx+eax*4+24]
  00047	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _medal_count$[ebp], ecx

; 931  : 
; 932  : 	if (	(medal_number != MEDAL_MASTER_AVIATOR) &&
; 933  : 			(medal_number != MEDAL_SENIOR_AVIATOR) &&

  0004d	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _medal_number$[ebp], 6
  00054	74 3d		 je	 SHORT $LN2@highlight_
  00056	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _medal_number$[ebp], 5
  0005d	74 34		 je	 SHORT $LN2@highlight_
  0005f	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _medal_number$[ebp], 4
  00066	74 2b		 je	 SHORT $LN2@highlight_

; 934  : 			(medal_number != MEDAL_ARMY_AVIATOR) )
; 935  : 	{
; 936  : 		sprintf (name_text, "(%d) %s", medal_count, russian_medal_info_array [medal_number].name);

  00068	6b 85 f8 fe ff
	ff 18		 imul	 eax, DWORD PTR _medal_number$[ebp], 24
  0006f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[eax]
  00075	51		 push	 ecx
  00076	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _medal_count$[ebp]
  0007c	52		 push	 edx
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_07OINJEOHH@?$CI?$CFd?$CJ?5?$CFs@
  00082	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _name_text$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _sprintf
  0008e	83 c4 10	 add	 esp, 16			; 00000010H

; 937  : 	}
; 938  : 	else

  00091	eb 22		 jmp	 SHORT $LN3@highlight_
$LN2@highlight_:

; 939  : 	{
; 940  : 		sprintf (name_text, "%s", russian_medal_info_array [medal_number].name);

  00093	6b 85 f8 fe ff
	ff 18		 imul	 eax, DWORD PTR _medal_number$[ebp], 24
  0009a	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[eax]
  000a0	51		 push	 ecx
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000a6	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _name_text$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 _sprintf
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@highlight_:

; 941  : 	}
; 942  : 
; 943  : 	sprintf (info_text, "%s", russian_medal_info_array [medal_number].info);

  000b5	6b 85 f8 fe ff
	ff 18		 imul	 eax, DWORD PTR _medal_number$[ebp], 24
  000bc	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?russian_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[eax+4]
  000c2	51		 push	 ecx
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000c8	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _info_text$[ebp]
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 _sprintf
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 944  : 
; 945  : 	if ((int) arg == BUTTON_STATE_DOWN)

  000d7	83 7d 0c 02	 cmp	 DWORD PTR _arg$[ebp], 2
  000db	75 40		 jne	 SHORT $LN4@highlight_

; 946  : 	{
; 947  : 		set_ui_object_text (medals_text_name, name_text);

  000dd	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _name_text$[ebp]
  000e3	50		 push	 eax
  000e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?medals_text_name@@3PAUUI_OBJECT@@A ; medals_text_name
  000ea	51		 push	 ecx
  000eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?medals_text_name@@3PAUUI_OBJECT@@A ; medals_text_name
  000f1	8b 02		 mov	 eax, DWORD PTR [edx]
  000f3	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[eax*4]
  000fa	ff d1		 call	 ecx

; 948  : 
; 949  : 		set_ui_object_text (medals_text_info, info_text);

  000fc	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _info_text$[ebp]
  00102	50		 push	 eax
  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A ; medals_text_info
  00109	51		 push	 ecx
  0010a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A ; medals_text_info
  00110	8b 02		 mov	 eax, DWORD PTR [edx]
  00112	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[eax*4]
  00119	ff d1		 call	 ecx

; 950  : 	}
; 951  : 	else

  0011b	eb 38		 jmp	 SHORT $LN1@highlight_
$LN4@highlight_:

; 952  : 	{
; 953  : 		set_ui_object_text (medals_text_name, "");

  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_text_name@@3PAUUI_OBJECT@@A ; medals_text_name
  00127	50		 push	 eax
  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?medals_text_name@@3PAUUI_OBJECT@@A ; medals_text_name
  0012e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00130	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[edx*4]
  00137	ff d0		 call	 eax

; 954  : 
; 955  : 		set_ui_object_text (medals_text_info, "");

  00139	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A ; medals_text_info
  00143	50		 push	 eax
  00144	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A ; medals_text_info
  0014a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0014c	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[edx*4]
  00153	ff d0		 call	 eax
$LN1@highlight_:

; 956  : 	}
; 957  : 
; 958  : }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 08 00	 ret	 8
?highlight_russian_medal_info@@YGXPAUUI_OBJECT@@PAX@Z ENDP ; highlight_russian_medal_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?highlight_us_medal_info@@YGXPAUUI_OBJECT@@PAX@Z
_TEXT	SEGMENT
_medal_count$ = -268					; size = 4
_medal_number$ = -264					; size = 4
_info_text$ = -260					; size = 128
_name_text$ = -132					; size = 128
_player$ = -4						; size = 4
_obj$ = 8						; size = 4
_arg$ = 12						; size = 4
?highlight_us_medal_info@@YGXPAUUI_OBJECT@@PAX@Z PROC	; highlight_us_medal_info, COMDAT

; 861  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 862  : 
; 863  : 	player_log_type
; 864  : 		*player;
; 865  : 		
; 866  : 	char
; 867  : 		name_text [128],
; 868  : 		info_text [128];
; 869  : 
; 870  : 	int
; 871  : 		medal_number,
; 872  : 		medal_count;
; 873  : 
; 874  : 	player = get_current_player_log ();

  0000c	e8 00 00 00 00	 call	 ?get_current_player_log@@YGPAUPLAYER_LOG_TYPE@@XZ ; get_current_player_log
  00011	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax

; 875  : 
; 876  : 	medal_number = get_ui_object_item_number (obj);

  00014	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_item_number@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
  00024	ff d0		 call	 eax
  00026	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _medal_number$[ebp], eax

; 877  : 	
; 878  : 	medal_count = player->side_log [player_log_current_side].medals [medal_number];

  0002c	69 05 00 00 00
	00 4c 03 00 00	 imul	 eax, DWORD PTR ?player_log_current_side@@3W4ENTITY_SIDES@@A, 844 ; player_log_current_side
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00039	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  0003d	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _medal_number$[ebp]
  00043	8b 4c 82 18	 mov	 ecx, DWORD PTR [edx+eax*4+24]
  00047	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _medal_count$[ebp], ecx

; 879  : 
; 880  : 	if (	(medal_number != MEDAL_MASTER_AVIATOR) &&
; 881  : 			(medal_number != MEDAL_SENIOR_AVIATOR) &&

  0004d	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _medal_number$[ebp], 6
  00054	74 3d		 je	 SHORT $LN2@highlight_
  00056	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _medal_number$[ebp], 5
  0005d	74 34		 je	 SHORT $LN2@highlight_
  0005f	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _medal_number$[ebp], 4
  00066	74 2b		 je	 SHORT $LN2@highlight_

; 882  : 			(medal_number != MEDAL_ARMY_AVIATOR) )
; 883  : 	{
; 884  : 		sprintf (name_text, "(%d) %s", medal_count, us_medal_info_array [medal_number].name);

  00068	6b 85 f8 fe ff
	ff 18		 imul	 eax, DWORD PTR _medal_number$[ebp], 24
  0006f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[eax]
  00075	51		 push	 ecx
  00076	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _medal_count$[ebp]
  0007c	52		 push	 edx
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_07OINJEOHH@?$CI?$CFd?$CJ?5?$CFs@
  00082	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _name_text$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _sprintf
  0008e	83 c4 10	 add	 esp, 16			; 00000010H

; 885  : 	}
; 886  : 	else

  00091	eb 22		 jmp	 SHORT $LN3@highlight_
$LN2@highlight_:

; 887  : 	{
; 888  : 		sprintf (name_text, "%s", us_medal_info_array [medal_number].name);

  00093	6b 85 f8 fe ff
	ff 18		 imul	 eax, DWORD PTR _medal_number$[ebp], 24
  0009a	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[eax]
  000a0	51		 push	 ecx
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000a6	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _name_text$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 _sprintf
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@highlight_:

; 889  : 	}
; 890  : 
; 891  : 	sprintf (info_text, "%s", us_medal_info_array [medal_number].info);

  000b5	6b 85 f8 fe ff
	ff 18		 imul	 eax, DWORD PTR _medal_number$[ebp], 24
  000bc	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?us_medal_info_array@@3PAUPLAYER_MEDAL_INFO@@A[eax+4]
  000c2	51		 push	 ecx
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000c8	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _info_text$[ebp]
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 _sprintf
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 892  : 
; 893  : 	if ((int) arg == BUTTON_STATE_DOWN)

  000d7	83 7d 0c 02	 cmp	 DWORD PTR _arg$[ebp], 2
  000db	75 40		 jne	 SHORT $LN4@highlight_

; 894  : 	{
; 895  : 		set_ui_object_text (medals_text_name, name_text);

  000dd	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _name_text$[ebp]
  000e3	50		 push	 eax
  000e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?medals_text_name@@3PAUUI_OBJECT@@A ; medals_text_name
  000ea	51		 push	 ecx
  000eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?medals_text_name@@3PAUUI_OBJECT@@A ; medals_text_name
  000f1	8b 02		 mov	 eax, DWORD PTR [edx]
  000f3	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[eax*4]
  000fa	ff d1		 call	 ecx

; 896  : 
; 897  : 		set_ui_object_text (medals_text_info, info_text);

  000fc	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _info_text$[ebp]
  00102	50		 push	 eax
  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A ; medals_text_info
  00109	51		 push	 ecx
  0010a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A ; medals_text_info
  00110	8b 02		 mov	 eax, DWORD PTR [edx]
  00112	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[eax*4]
  00119	ff d1		 call	 ecx

; 898  : 	}
; 899  : 	else

  0011b	eb 38		 jmp	 SHORT $LN1@highlight_
$LN4@highlight_:

; 900  : 	{
; 901  : 		set_ui_object_text (medals_text_name, "");

  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_text_name@@3PAUUI_OBJECT@@A ; medals_text_name
  00127	50		 push	 eax
  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?medals_text_name@@3PAUUI_OBJECT@@A ; medals_text_name
  0012e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00130	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[edx*4]
  00137	ff d0		 call	 eax

; 902  : 
; 903  : 		set_ui_object_text (medals_text_info, "");

  00139	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A ; medals_text_info
  00143	50		 push	 eax
  00144	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A ; medals_text_info
  0014a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0014c	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[edx*4]
  00153	ff d0		 call	 eax
$LN1@highlight_:

; 904  : 	}
; 905  : 
; 906  : }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 08 00	 ret	 8
?highlight_us_medal_info@@YGXPAUUI_OBJECT@@PAX@Z ENDP	; highlight_us_medal_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?medals_highlight_off_function@@YGXPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?medals_highlight_off_function@@YGXPAUUI_OBJECT@@@Z PROC ; medals_highlight_off_function, COMDAT

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 852  : 
; 853  : 	set_ui_object_text (obj, "");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00015	8b 11		 mov	 edx, DWORD PTR [ecx]
  00017	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[edx*4]
  0001e	ff d0		 call	 eax

; 854  : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?medals_highlight_off_function@@YGXPAUUI_OBJECT@@@Z ENDP ; medals_highlight_off_function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?notify_medals_screen@@YGXPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_obj$ = 8						; size = 4
?notify_medals_screen@@YGXPAUUI_OBJECT@@@Z PROC		; notify_medals_screen, COMDAT

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 346  : 
; 347  : 	int
; 348  : 		i;
; 349  : 
; 350  : 	if ( get_ui_object_drawable (obj) )

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_drawable@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
  00019	ff d0		 call	 eax
  0001b	85 c0		 test	 eax, eax
  0001d	0f 84 66 02 00
	00		 je	 $LN14@notify_med

; 351  : 	{
; 352  : 
; 353  : 		if (medals_screen_texture)

  00023	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A, 0 ; medals_screen_texture
  0002a	74 4d		 je	 SHORT $LN16@notify_med

; 354  : 		{
; 355  : 			for (i = 1; i < NUMBER_OF_MEDAL_GRAPHICS; i++)

  0002c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00033	eb 09		 jmp	 SHORT $LN4@notify_med
$LN2@notify_med:
  00035	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@notify_med:
  0003e	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  00042	7d 20		 jge	 SHORT $LN3@notify_med

; 356  : 			{
; 357  : 				destroy_texture_graphic (medal_graphics [i]);

  00044	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00047	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A[eax*4]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ?destroy_texture_graphic@@YGXPAUTEXTURE_GRAPHIC@@@Z ; destroy_texture_graphic

; 358  : 	
; 359  : 				medal_graphics [i] = NULL;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00057	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A[eax*4], 0

; 360  : 			}

  00062	eb d1		 jmp	 SHORT $LN2@notify_med
$LN3@notify_med:

; 361  : 	
; 362  : 			destroy_texture_graphic (medals_screen_texture);

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A ; medals_screen_texture
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?destroy_texture_graphic@@YGXPAUTEXTURE_GRAPHIC@@@Z ; destroy_texture_graphic

; 363  : 
; 364  : 			medals_screen_texture = NULL;

  0006f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A, 0 ; medals_screen_texture
$LN16@notify_med:

; 365  : 		}
; 366  : 
; 367  : 		if (player_log_current_side == ENTITY_SIDE_BLUE_FORCE)

  00079	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?player_log_current_side@@3W4ENTITY_SIDES@@A, 1 ; player_log_current_side
  00080	0f 85 e3 00 00
	00		 jne	 $LN17@notify_med

; 368  : 		{	
; 369  : 			set_ui_object_text (medals_title_text, get_trans("US"));

  00086	68 00 00 00 00	 push	 OFFSET ??_C@_02PLFPMECB@US@
  0008b	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00090	50		 push	 eax
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_title_text@@3PAUUI_OBJECT@@A ; medals_title_text
  00096	50		 push	 eax
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?medals_title_text@@3PAUUI_OBJECT@@A ; medals_title_text
  0009d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[edx*4]
  000a6	ff d0		 call	 eax

; 370  : 
; 371  : 			medals_screen_texture = create_texture_graphic ( "graphics\\ui\\cohokum\\medalsUS.psd" );

  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@DBHDJGJN@graphics?2ui?2cohokum?2medalsUS?4ps@
  000ad	e8 00 00 00 00	 call	 ?create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z ; create_texture_graphic
  000b2	a3 00 00 00 00	 mov	 DWORD PTR ?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A, eax ; medals_screen_texture

; 372  : 
; 373  : 			set_ui_object_drawable (russian_area, FALSE);

  000b7	6a 00		 push	 0
  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_area@@3PAUUI_OBJECT@@A ; russian_area
  000be	50		 push	 eax
  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?russian_area@@3PAUUI_OBJECT@@A ; russian_area
  000c5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c7	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  000ce	ff d0		 call	 eax

; 374  : 			
; 375  : 			set_ui_object_drawable (us_area, TRUE);

  000d0	6a 01		 push	 1
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_area@@3PAUUI_OBJECT@@A ; us_area
  000d7	50		 push	 eax
  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?us_area@@3PAUUI_OBJECT@@A ; us_area
  000de	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e0	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  000e7	ff d0		 call	 eax

; 376  : 			
; 377  : 			// create medal texture graphic objects, except MEDAL_TYPE_NONE
; 378  : 			for (i = 1; i < NUMBER_OF_MEDAL_GRAPHICS; i++)

  000e9	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  000f0	eb 09		 jmp	 SHORT $LN7@notify_med
$LN5@notify_med:
  000f2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000f5	83 c0 01	 add	 eax, 1
  000f8	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@notify_med:
  000fb	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  000ff	7d 47		 jge	 SHORT $LN6@notify_med

; 379  : 			{
; 380  : 				medal_graphics [i] = create_texture_graphic (us_medal_graphic_array[i].name);

  00101	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  00105	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?us_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A[eax]
  0010b	51		 push	 ecx
  0010c	e8 00 00 00 00	 call	 ?create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z ; create_texture_graphic
  00111	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00114	89 04 95 00 00
	00 00		 mov	 DWORD PTR ?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A[edx*4], eax

; 381  : 
; 382  : 				set_ui_object_texture_graphic (us_medal_objects [i], medal_graphics [i]);

  0011b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0011e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A[eax*4]
  00125	51		 push	 ecx
  00126	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00129	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?us_medal_objects@@3PAPAUUI_OBJECT@@A[edx*4]
  00130	50		 push	 eax
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00134	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?us_medal_objects@@3PAPAUUI_OBJECT@@A[ecx*4]
  0013b	8b 02		 mov	 eax, DWORD PTR [edx]
  0013d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  00144	ff d1		 call	 ecx

; 383  : 			}

  00146	eb aa		 jmp	 SHORT $LN5@notify_med
$LN6@notify_med:

; 384  : 
; 385  : 			medal_graphics [0] = NULL;

  00148	b8 04 00 00 00	 mov	 eax, 4
  0014d	6b c8 00	 imul	 ecx, eax, 0
  00150	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A[ecx], 0

; 386  : 			
; 387  : 			// set medal states
; 388  : 			set_medal_states (us_medal_objects);

  0015a	68 00 00 00 00	 push	 OFFSET ?us_medal_objects@@3PAPAUUI_OBJECT@@A
  0015f	e8 00 00 00 00	 call	 ?set_medal_states@@YGXQAPAUUI_OBJECT@@@Z ; set_medal_states

; 389  : 		}
; 390  : 		else

  00164	e9 de 00 00 00	 jmp	 $LN18@notify_med
$LN17@notify_med:

; 391  : 		{
; 392  : 			set_ui_object_text (medals_title_text, get_trans("Russian"));

  00169	68 00 00 00 00	 push	 OFFSET ??_C@_07PEAPJBGG@Russian@
  0016e	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00173	50		 push	 eax
  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_title_text@@3PAUUI_OBJECT@@A ; medals_title_text
  00179	50		 push	 eax
  0017a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?medals_title_text@@3PAUUI_OBJECT@@A ; medals_title_text
  00180	8b 11		 mov	 edx, DWORD PTR [ecx]
  00182	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[edx*4]
  00189	ff d0		 call	 eax

; 393  : 
; 394  : 			medals_screen_texture = create_texture_graphic ( "graphics\\ui\\cohokum\\medalsSV.psd" );

  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CGODCBE@graphics?2ui?2cohokum?2medalsSV?4ps@
  00190	e8 00 00 00 00	 call	 ?create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z ; create_texture_graphic
  00195	a3 00 00 00 00	 mov	 DWORD PTR ?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A, eax ; medals_screen_texture

; 395  : 
; 396  : 			set_ui_object_drawable (russian_area, TRUE);

  0019a	6a 01		 push	 1
  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_area@@3PAUUI_OBJECT@@A ; russian_area
  001a1	50		 push	 eax
  001a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?russian_area@@3PAUUI_OBJECT@@A ; russian_area
  001a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  001aa	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  001b1	ff d0		 call	 eax

; 397  : 			
; 398  : 			set_ui_object_drawable (us_area, FALSE);

  001b3	6a 00		 push	 0
  001b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_area@@3PAUUI_OBJECT@@A ; us_area
  001ba	50		 push	 eax
  001bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?us_area@@3PAUUI_OBJECT@@A ; us_area
  001c1	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c3	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  001ca	ff d0		 call	 eax

; 399  : 
; 400  : 			// create medal texture graphic objects, except MEDAL_TYPE_NONE
; 401  : 			for (i = 1; i < NUMBER_OF_MEDAL_GRAPHICS; i++)

  001cc	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  001d3	eb 09		 jmp	 SHORT $LN10@notify_med
$LN8@notify_med:
  001d5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001d8	83 c0 01	 add	 eax, 1
  001db	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN10@notify_med:
  001de	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  001e2	7d 47		 jge	 SHORT $LN9@notify_med

; 402  : 			{			
; 403  : 				medal_graphics [i] = create_texture_graphic (russian_medal_graphic_array[i].name);

  001e4	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  001e8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?russian_medal_graphic_array@@3PAUPLAYER_MEDAL_INFO@@A[eax]
  001ee	51		 push	 ecx
  001ef	e8 00 00 00 00	 call	 ?create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z ; create_texture_graphic
  001f4	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  001f7	89 04 95 00 00
	00 00		 mov	 DWORD PTR ?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A[edx*4], eax

; 404  : 
; 405  : 				set_ui_object_texture_graphic (russian_medal_objects [i], medal_graphics [i]);

  001fe	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00201	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A[eax*4]
  00208	51		 push	 ecx
  00209	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0020c	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?russian_medal_objects@@3PAPAUUI_OBJECT@@A[edx*4]
  00213	50		 push	 eax
  00214	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00217	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?russian_medal_objects@@3PAPAUUI_OBJECT@@A[ecx*4]
  0021e	8b 02		 mov	 eax, DWORD PTR [edx]
  00220	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  00227	ff d1		 call	 ecx

; 406  : 			}

  00229	eb aa		 jmp	 SHORT $LN8@notify_med
$LN9@notify_med:

; 407  : 			
; 408  : 			medal_graphics [0] = NULL;

  0022b	b8 04 00 00 00	 mov	 eax, 4
  00230	6b c8 00	 imul	 ecx, eax, 0
  00233	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A[ecx], 0

; 409  : 			
; 410  : 			// set medal states
; 411  : 			set_medal_states (russian_medal_objects);	

  0023d	68 00 00 00 00	 push	 OFFSET ?russian_medal_objects@@3PAPAUUI_OBJECT@@A
  00242	e8 00 00 00 00	 call	 ?set_medal_states@@YGXQAPAUUI_OBJECT@@@Z ; set_medal_states
$LN18@notify_med:

; 412  : 		}
; 413  : 
; 414  : 		set_ui_object_texture_graphic (player_medals_screen, medals_screen_texture);

  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A ; medals_screen_texture
  0024c	50		 push	 eax
  0024d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  00253	51		 push	 ecx
  00254	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  0025a	8b 02		 mov	 eax, DWORD PTR [edx]
  0025c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  00263	ff d1		 call	 ecx

; 415  : 	
; 416  : 		recursively_set_object_time (player_medals_screen, MEDALS_AREA_FADE_TIME, MEDALS_AREA_OFFSET_TIME);

  00265	6a 00		 push	 0
  00267	68 f4 01 00 00	 push	 500			; 000001f4H
  0026c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 ?recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z ; recursively_set_object_time

; 417  : 
; 418  : 		reset_time_values (player_medals_screen);

  00277	a1 00 00 00 00	 mov	 eax, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 ?reset_time_values@@YGXPAUUI_OBJECT@@@Z ; reset_time_values

; 419  : 
; 420  : 		blit_front_buffer_to_render_buffer ();

  00282	e8 00 00 00 00	 call	 ?blit_front_buffer_to_render_buffer@@YGXXZ ; blit_front_buffer_to_render_buffer

; 421  : 	}
; 422  : 	else

  00287	eb 56		 jmp	 SHORT $LN1@notify_med
$LN14@notify_med:

; 423  : 	{
; 424  : 
; 425  : 		if (medals_screen_texture )

  00289	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A, 0 ; medals_screen_texture
  00290	74 4d		 je	 SHORT $LN1@notify_med

; 426  : 		{	
; 427  : 			for (i = 1; i < NUMBER_OF_MEDAL_GRAPHICS; i++)

  00292	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00299	eb 09		 jmp	 SHORT $LN13@notify_med
$LN11@notify_med:
  0029b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0029e	83 c0 01	 add	 eax, 1
  002a1	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN13@notify_med:
  002a4	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  002a8	7d 20		 jge	 SHORT $LN12@notify_med

; 428  : 			{
; 429  : 				destroy_texture_graphic (medal_graphics [i]);

  002aa	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002ad	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A[eax*4]
  002b4	51		 push	 ecx
  002b5	e8 00 00 00 00	 call	 ?destroy_texture_graphic@@YGXPAUTEXTURE_GRAPHIC@@@Z ; destroy_texture_graphic

; 430  : 	
; 431  : 				medal_graphics [i] = NULL;

  002ba	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002bd	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?medal_graphics@@3PAPAUTEXTURE_GRAPHIC@@A[eax*4], 0

; 432  : 			}

  002c8	eb d1		 jmp	 SHORT $LN11@notify_med
$LN12@notify_med:

; 433  : 	
; 434  : 			destroy_texture_graphic (medals_screen_texture);

  002ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A ; medals_screen_texture
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 ?destroy_texture_graphic@@YGXPAUTEXTURE_GRAPHIC@@@Z ; destroy_texture_graphic

; 435  : 
; 436  : 			medals_screen_texture = NULL;

  002d5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?medals_screen_texture@@3PAUTEXTURE_GRAPHIC@@A, 0 ; medals_screen_texture
$LN1@notify_med:

; 437  : 		}
; 438  : 	}
; 439  : 
; 440  : 	#if DEBUG_MODULE
; 441  : 		debug_filtered_log("Inside show_medals_screen");
; 442  : 	#endif
; 443  : }

  002df	5f		 pop	 edi
  002e0	5e		 pop	 esi
  002e1	5b		 pop	 ebx
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c2 04 00	 ret	 4
?notify_medals_screen@@YGXPAUUI_OBJECT@@@Z ENDP		; notify_medals_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?set_medal_states@@YGXQAPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
_player$ = -12						; size = 4
_i$ = -8						; size = 4
_medals$ = -4						; size = 4
_medal_objects$ = 8					; size = 4
?set_medal_states@@YGXQAPAUUI_OBJECT@@@Z PROC		; set_medal_states, COMDAT

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 296  : 	int
; 297  : 		*medals,
; 298  : 		i;
; 299  : 		
; 300  : 	player_log_type
; 301  : 		*player;
; 302  : 
; 303  : 	player = get_current_player_log ();

  00009	e8 00 00 00 00	 call	 ?get_current_player_log@@YGPAUPLAYER_LOG_TYPE@@XZ ; get_current_player_log
  0000e	89 45 f4	 mov	 DWORD PTR _player$[ebp], eax

; 304  : 
; 305  : 	medals = player->side_log[player_log_current_side].medals;

  00011	69 05 00 00 00
	00 4c 03 00 00	 imul	 eax, DWORD PTR ?player_log_current_side@@3W4ENTITY_SIDES@@A, 844 ; player_log_current_side
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR _player$[ebp]
  0001e	8d 54 01 24	 lea	 edx, DWORD PTR [ecx+eax+36]
  00022	89 55 fc	 mov	 DWORD PTR _medals$[ebp], edx

; 306  : 
; 307  : 	for (i = 1; i < (NUM_MEDAL_TYPES); i++)

  00025	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0002c	eb 09		 jmp	 SHORT $LN4@set_medal_
$LN2@set_medal_:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@set_medal_:
  00037	83 7d f8 0d	 cmp	 DWORD PTR _i$[ebp], 13	; 0000000dH
  0003b	7d 50		 jge	 SHORT $LN3@set_medal_

; 308  : 	{
; 309  : 		if (medals [i])

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _medals$[ebp]
  00043	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00047	74 22		 je	 SHORT $LN5@set_medal_

; 310  : 		{
; 311  : 			set_ui_object_drawable (medal_objects [i], TRUE);

  00049	6a 01		 push	 1
  0004b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _medal_objects$[ebp]
  00051	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00054	52		 push	 edx
  00055	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _medal_objects$[ebp]
  0005b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0005e	8b 02		 mov	 eax, DWORD PTR [edx]
  00060	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[eax*4]
  00067	ff d1		 call	 ecx

; 312  : 		}
; 313  : 		else

  00069	eb 20		 jmp	 SHORT $LN6@set_medal_
$LN5@set_medal_:

; 314  : 		{
; 315  : 			set_ui_object_drawable (medal_objects [i], FALSE);

  0006b	6a 00		 push	 0
  0006d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _medal_objects$[ebp]
  00073	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00076	52		 push	 edx
  00077	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _medal_objects$[ebp]
  0007d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[eax*4]
  00089	ff d1		 call	 ecx
$LN6@set_medal_:

; 316  : 		}
; 317  : 	}

  0008b	eb a1		 jmp	 SHORT $LN2@set_medal_
$LN3@set_medal_:

; 318  : 
; 319  : 	// always draw medal backdrops for dist.service & medal of honour
; 320  : 
; 321  : 	if (medals [MEDAL_DISTINGUISHED_SERVICE])

  0008d	b8 04 00 00 00	 mov	 eax, 4
  00092	6b c8 0b	 imul	 ecx, eax, 11
  00095	8b 55 fc	 mov	 edx, DWORD PTR _medals$[ebp]
  00098	83 3c 0a 00	 cmp	 DWORD PTR [edx+ecx], 0
  0009c	74 2c		 je	 SHORT $LN7@set_medal_

; 322  : 	{
; 323  : 		set_ui_object_drawable (medal_objects [MEDAL_DISTINGUISHED_SERVICE + 2], FALSE);

  0009e	6a 00		 push	 0
  000a0	b8 04 00 00 00	 mov	 eax, 4
  000a5	6b c8 0d	 imul	 ecx, eax, 13
  000a8	8b 55 08	 mov	 edx, DWORD PTR _medal_objects$[ebp]
  000ab	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000ae	50		 push	 eax
  000af	b9 04 00 00 00	 mov	 ecx, 4
  000b4	6b d1 0d	 imul	 edx, ecx, 13
  000b7	8b 45 08	 mov	 eax, DWORD PTR _medal_objects$[ebp]
  000ba	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bf	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  000c6	ff d0		 call	 eax

; 324  : 	}
; 325  : 	else

  000c8	eb 2a		 jmp	 SHORT $LN8@set_medal_
$LN7@set_medal_:

; 326  : 	{
; 327  : 		set_ui_object_drawable (medal_objects [MEDAL_DISTINGUISHED_SERVICE + 2], TRUE);

  000ca	6a 01		 push	 1
  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	6b c8 0d	 imul	 ecx, eax, 13
  000d4	8b 55 08	 mov	 edx, DWORD PTR _medal_objects$[ebp]
  000d7	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000da	50		 push	 eax
  000db	b9 04 00 00 00	 mov	 ecx, 4
  000e0	6b d1 0d	 imul	 edx, ecx, 13
  000e3	8b 45 08	 mov	 eax, DWORD PTR _medal_objects$[ebp]
  000e6	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000e9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000eb	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  000f2	ff d0		 call	 eax
$LN8@set_medal_:

; 328  : 	}
; 329  : 	
; 330  : 	if (medals [MEDAL_MEDAL_OF_HONOUR])

  000f4	b8 04 00 00 00	 mov	 eax, 4
  000f9	6b c8 0c	 imul	 ecx, eax, 12
  000fc	8b 55 fc	 mov	 edx, DWORD PTR _medals$[ebp]
  000ff	83 3c 0a 00	 cmp	 DWORD PTR [edx+ecx], 0
  00103	74 2c		 je	 SHORT $LN9@set_medal_

; 331  : 	{
; 332  : 		set_ui_object_drawable (medal_objects [MEDAL_MEDAL_OF_HONOUR + 2], FALSE);

  00105	6a 00		 push	 0
  00107	b8 04 00 00 00	 mov	 eax, 4
  0010c	6b c8 0e	 imul	 ecx, eax, 14
  0010f	8b 55 08	 mov	 edx, DWORD PTR _medal_objects$[ebp]
  00112	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00115	50		 push	 eax
  00116	b9 04 00 00 00	 mov	 ecx, 4
  0011b	6b d1 0e	 imul	 edx, ecx, 14
  0011e	8b 45 08	 mov	 eax, DWORD PTR _medal_objects$[ebp]
  00121	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00124	8b 11		 mov	 edx, DWORD PTR [ecx]
  00126	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  0012d	ff d0		 call	 eax

; 333  : 	}
; 334  : 	else

  0012f	eb 2a		 jmp	 SHORT $LN1@set_medal_
$LN9@set_medal_:

; 335  : 	{
; 336  : 		set_ui_object_drawable (medal_objects [MEDAL_MEDAL_OF_HONOUR + 2], TRUE);

  00131	6a 01		 push	 1
  00133	b8 04 00 00 00	 mov	 eax, 4
  00138	6b c8 0e	 imul	 ecx, eax, 14
  0013b	8b 55 08	 mov	 edx, DWORD PTR _medal_objects$[ebp]
  0013e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00141	50		 push	 eax
  00142	b9 04 00 00 00	 mov	 ecx, 4
  00147	6b d1 0e	 imul	 edx, ecx, 14
  0014a	8b 45 08	 mov	 eax, DWORD PTR _medal_objects$[ebp]
  0014d	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00150	8b 11		 mov	 edx, DWORD PTR [ecx]
  00152	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  00159	ff d0		 call	 eax
$LN1@set_medal_:

; 337  : 	}
; 338  : }

  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 04 00	 ret	 4
?set_medal_states@@YGXQAPAUUI_OBJECT@@@Z ENDP		; set_medal_states
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?notify_medals_screen_exit_button@@YGXPAUUI_OBJECT@@PAX@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
_arg$ = 12						; size = 4
?notify_medals_screen_exit_button@@YGXPAUUI_OBJECT@@PAX@Z PROC ; notify_medals_screen_exit_button, COMDAT

; 816  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 817  : 
; 818  : 	obj;
; 819  : 	arg;
; 820  : 
; 821  : 	if ((int) arg == BUTTON_STATE_DOWN)

  00009	83 7d 0c 02	 cmp	 DWORD PTR _arg$[ebp], 2
  0000d	75 29		 jne	 SHORT $LN2@notify_med

; 822  : 	{
; 823  : 
; 824  : 		set_ui_object_graphic (obj, (unsigned short int *) get_graphics_file_data (GRAPHICS_UI_APACHE_PLANNER_BACK_BUTTON_SELECTED));

  0000f	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00014	69 c8 60 01 00
	00		 imul	 ecx, eax, 352
  0001a	8b 91 1c 00 00
	00		 mov	 edx, DWORD PTR ?graphics_files@@3PAUFILE_DATA@@A[ecx+28]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00028	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002a	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_graphic@@3PAP6GXPAUUI_OBJECT@@PAG@ZA[edx*4]
  00031	ff d0		 call	 eax
  00033	e9 89 00 00 00	 jmp	 $LN3@notify_med
$LN2@notify_med:

; 825  : 	}
; 826  : 	else if ((int) arg == BUTTON_STATE_UP)

  00038	83 7d 0c 01	 cmp	 DWORD PTR _arg$[ebp], 1
  0003c	75 46		 jne	 SHORT $LN4@notify_med

; 827  : 	{
; 828  : 
; 829  : 		set_ui_object_graphic (obj, (unsigned short int *) get_graphics_file_data (GRAPHICS_UI_APACHE_PLANNER_BACK_BUTTON_UNSELECTED));

  0003e	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00043	69 c8 5f 01 00
	00		 imul	 ecx, eax, 351
  00049	8b 91 1c 00 00
	00		 mov	 edx, DWORD PTR ?graphics_files@@3PAUFILE_DATA@@A[ecx+28]
  0004f	52		 push	 edx
  00050	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00053	50		 push	 eax
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00057	8b 11		 mov	 edx, DWORD PTR [ecx]
  00059	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_graphic@@3PAP6GXPAUUI_OBJECT@@PAG@ZA[edx*4]
  00060	ff d0		 call	 eax

; 830  : 
; 831  : 		set_ui_object_redraw (player_medals_screen, TRUE);

  00062	6a 01		 push	 1
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  00069	50		 push	 eax
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  00070	8b 11		 mov	 edx, DWORD PTR [ecx]
  00072	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_redraw@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  00079	ff d0		 call	 eax

; 832  : 
; 833  : 		pop_ui_screen (SCREEN_POP_ACTUAL);

  0007b	6a 00		 push	 0
  0007d	e8 00 00 00 00	 call	 ?pop_ui_screen@@YGXW4SCREEN_POP_TYPES@@@Z ; pop_ui_screen

; 834  : 	}
; 835  : 	else 

  00082	eb 3d		 jmp	 SHORT $LN3@notify_med
$LN4@notify_med:

; 836  : 	{
; 837  : 
; 838  : 		set_ui_object_graphic (obj, (unsigned short int *) get_graphics_file_data (GRAPHICS_UI_APACHE_PLANNER_BACK_BUTTON_UNSELECTED));

  00084	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00089	69 c8 5f 01 00
	00		 imul	 ecx, eax, 351
  0008f	8b 91 1c 00 00
	00		 mov	 edx, DWORD PTR ?graphics_files@@3PAUFILE_DATA@@A[ecx+28]
  00095	52		 push	 edx
  00096	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0009d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_graphic@@3PAP6GXPAUUI_OBJECT@@PAG@ZA[edx*4]
  000a6	ff d0		 call	 eax

; 839  : 
; 840  : 		set_ui_object_redraw (player_medals_screen, TRUE);

  000a8	6a 01		 push	 1
  000aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  000af	50		 push	 eax
  000b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  000b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b8	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_redraw@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  000bf	ff d0		 call	 eax
$LN3@notify_med:

; 841  : 	}
; 842  : 
; 843  : 	set_ui_object_graphic_type (obj, UI_OBJECT_ALPHA_GRAPHIC);

  000c1	6a 03		 push	 3
  000c3	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000c6	50		 push	 eax
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  000ca	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cc	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_graphic_type@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  000d3	ff d0		 call	 eax

; 844  : }

  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 08 00	 ret	 8
?notify_medals_screen_exit_button@@YGXPAUUI_OBJECT@@PAX@Z ENDP ; notify_medals_screen_exit_button
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?award_player_rank@@YGHH@Z
_TEXT	SEGMENT
_new_rank$ = -8						; size = 4
_player$ = -4						; size = 4
_side$ = 8						; size = 4
?award_player_rank@@YGHH@Z PROC				; award_player_rank, COMDAT

; 1401 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1402 : 	player_log_type
; 1403 : 		*player;
; 1404 : 
; 1405 : 	int
; 1406 : 		new_rank;
; 1407 : 
; 1408 : 	ASSERT ((side >= 0) && (side <= NUM_ENTITY_SIDES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _side$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@award_play
  0000f	83 7d 08 03	 cmp	 DWORD PTR _side$[ebp], 3
  00013	7e 18		 jle	 SHORT $LN2@award_play
$LN3@award_play:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??award_player_rank@@YGHH@Z@4JA
  0001a	83 c0 07	 add	 eax, 7
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@EDPCIMHH@?$CIside?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIside?5?$DM?$DN?5NUM_ENT@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@award_play:

; 1409 : 
; 1410 : 	player = get_current_player_log ();

  0002d	e8 00 00 00 00	 call	 ?get_current_player_log@@YGPAUPLAYER_LOG_TYPE@@XZ ; get_current_player_log
  00032	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax

; 1411 : 
; 1412 : 	new_rank = get_player_rank_from_points (player->side_log[side].experience);

  00035	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0003f	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 ?get_player_rank_from_points@@YGHH@Z ; get_player_rank_from_points
  00049	89 45 f8	 mov	 DWORD PTR _new_rank$[ebp], eax

; 1413 : 
; 1414 : 	if (new_rank != player->side_log[side].rank)

  0004c	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00056	8b 55 f8	 mov	 edx, DWORD PTR _new_rank$[ebp]
  00059	3b 54 01 0c	 cmp	 edx, DWORD PTR [ecx+eax+12]
  0005d	74 18		 je	 SHORT $LN4@award_play

; 1415 : 	{
; 1416 : 		player->side_log[side].rank = new_rank;

  0005f	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00069	8b 55 f8	 mov	 edx, DWORD PTR _new_rank$[ebp]
  0006c	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1417 : 
; 1418 : 		return new_rank;

  00070	8b 45 f8	 mov	 eax, DWORD PTR _new_rank$[ebp]
  00073	eb 04		 jmp	 SHORT $LN1@award_play

; 1419 : 	}
; 1420 : 	else

  00075	eb 02		 jmp	 SHORT $LN1@award_play
$LN4@award_play:

; 1421 : 	{
; 1422 : 		return PILOT_RANK_NONE;

  00077	33 c0		 xor	 eax, eax
$LN1@award_play:

; 1423 : 	}
; 1424 : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?award_player_rank@@YGHH@Z ENDP				; award_player_rank
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?award_air_medal_medal@@YGHHH@Z
_TEXT	SEGMENT
_medals$ = -8						; size = 4
_player$ = -4						; size = 4
_side$ = 8						; size = 4
_success$ = 12						; size = 4
?award_air_medal_medal@@YGHHH@Z PROC			; award_air_medal_medal, COMDAT

; 1340 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1341 : 	player_log_type
; 1342 : 		*player;
; 1343 : 	
; 1344 : 	int
; 1345 : 		*medals;
; 1346 : 	
; 1347 : 	ASSERT ((side >= 0) && (side <= NUM_ENTITY_SIDES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _side$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@award_air_
  0000f	83 7d 08 03	 cmp	 DWORD PTR _side$[ebp], 3
  00013	7e 18		 jle	 SHORT $LN2@award_air_
$LN3@award_air_:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??award_air_medal_medal@@YGHHH@Z@4JA
  0001a	83 c0 07	 add	 eax, 7
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@EDPCIMHH@?$CIside?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIside?5?$DM?$DN?5NUM_ENT@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@award_air_:

; 1348 : 	
; 1349 : 	player = get_current_player_log ();

  0002d	e8 00 00 00 00	 call	 ?get_current_player_log@@YGPAUPLAYER_LOG_TYPE@@XZ ; get_current_player_log
  00032	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax

; 1350 : 	
; 1351 : 	medals = player->side_log[side].medals;

  00035	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0003f	8d 54 01 24	 lea	 edx, DWORD PTR [ecx+eax+36]
  00043	89 55 f8	 mov	 DWORD PTR _medals$[ebp], edx

; 1352 : 	
; 1353 : 	if (success)

  00046	83 7d 0c 00	 cmp	 DWORD PTR _success$[ebp], 0
  0004a	74 70		 je	 SHORT $LN4@award_air_

; 1354 : 	{
; 1355 : 		player->side_log [side].air_medal_counter++;

  0004c	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00056	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  0005a	83 c2 01	 add	 edx, 1
  0005d	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00067	89 54 01 20	 mov	 DWORD PTR [ecx+eax+32], edx

; 1356 : 		
; 1357 : 		if (player->side_log [side].air_medal_counter >= NUM_NEEDED_TO_AWARD_AIR_MEDAL)

  0006b	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00075	83 7c 01 20 03	 cmp	 DWORD PTR [ecx+eax+32], 3
  0007a	7c 3a		 jl	 SHORT $LN6@award_air_

; 1358 : 		{
; 1359 : 			medals [MEDAL_AIR_MEDAL] += 1;

  0007c	b8 04 00 00 00	 mov	 eax, 4
  00081	c1 e0 03	 shl	 eax, 3
  00084	8b 4d f8	 mov	 ecx, DWORD PTR _medals$[ebp]
  00087	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0008a	83 c2 01	 add	 edx, 1
  0008d	b8 04 00 00 00	 mov	 eax, 4
  00092	c1 e0 03	 shl	 eax, 3
  00095	8b 4d f8	 mov	 ecx, DWORD PTR _medals$[ebp]
  00098	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 1360 : 			
; 1361 : 			player->side_log [side].air_medal_counter = 0;

  0009b	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000a5	c7 44 01 20 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+32], 0

; 1362 : 			
; 1363 : 			#if DEBUG_MODULE
; 1364 : 
; 1365 : 			debug_filtered_log ("Awarded Air Medal, reset counter");
; 1366 : 
; 1367 : 			#endif
; 1368 : 			
; 1369 : 			return MEDAL_AIR_MEDAL;

  000ad	b8 08 00 00 00	 mov	 eax, 8
  000b2	eb 1c		 jmp	 SHORT $LN1@award_air_

; 1370 : 		}
; 1371 : 		else

  000b4	eb 04		 jmp	 SHORT $LN7@award_air_
$LN6@award_air_:

; 1372 : 		{
; 1373 : 			#if DEBUG_MODULE
; 1374 : 
; 1375 : 			debug_filtered_log ("Air Medal Not Awarded (count = %d)", player->side_log[side].air_medal_counter);
; 1376 : 
; 1377 : 			#endif
; 1378 : 			
; 1379 : 			return MEDAL_TYPE_NONE;

  000b6	33 c0		 xor	 eax, eax
  000b8	eb 16		 jmp	 SHORT $LN1@award_air_
$LN7@award_air_:

; 1380 : 		}
; 1381 : 	}
; 1382 : 	else

  000ba	eb 12		 jmp	 SHORT $LN5@award_air_
$LN4@award_air_:

; 1383 : 	{
; 1384 : 		#if DEBUG_MODULE
; 1385 : 
; 1386 : 		debug_filtered_log ("Air Medal Not Awarded: resetting	air_medal_counter");
; 1387 : 
; 1388 : 		#endif
; 1389 : 		
; 1390 : 		player->side_log [side].air_medal_counter = 0;

  000bc	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000c6	c7 44 01 20 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+32], 0
$LN5@award_air_:

; 1391 : 	}
; 1392 : 	
; 1393 : 	return MEDAL_TYPE_NONE;

  000ce	33 c0		 xor	 eax, eax
$LN1@award_air_:

; 1394 : }

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 08 00	 ret	 8
?award_air_medal_medal@@YGHHH@Z ENDP			; award_air_medal_medal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?award_purple_heart_medal@@YGHH@Z
_TEXT	SEGMENT
tv92 = -84						; size = 4
tv85 = -80						; size = 4
tv78 = -80						; size = 4
_damage$ = -12						; size = 4
_medals$ = -8						; size = 4
_player$ = -4						; size = 4
_side$ = 8						; size = 4
?award_purple_heart_medal@@YGHH@Z PROC			; award_purple_heart_medal, COMDAT

; 1281 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1282 : 	player_log_type
; 1283 : 		*player;
; 1284 : 
; 1285 : 	int
; 1286 : 		*medals,
; 1287 : 		damage;
; 1288 : 
; 1289 : 	ASSERT ((side >= 0) && (side <= NUM_ENTITY_SIDES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _side$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@award_purp
  0000f	83 7d 08 03	 cmp	 DWORD PTR _side$[ebp], 3
  00013	7e 18		 jle	 SHORT $LN2@award_purp
$LN3@award_purp:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??award_purple_heart_medal@@YGHH@Z@4JA
  0001a	83 c0 08	 add	 eax, 8
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@EDPCIMHH@?$CIside?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIside?5?$DM?$DN?5NUM_ENT@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@award_purp:

; 1290 : 
; 1291 : 	player = get_current_player_log ();

  0002d	e8 00 00 00 00	 call	 ?get_current_player_log@@YGPAUPLAYER_LOG_TYPE@@XZ ; get_current_player_log
  00032	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax

; 1292 : 
; 1293 : 	medals = player->side_log[side].medals;

  00035	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0003f	8d 54 01 24	 lea	 edx, DWORD PTR [ecx+eax+36]
  00043	89 55 f8	 mov	 DWORD PTR _medals$[ebp], edx

; 1294 : 
; 1295 : 	// get helicopter damage
; 1296 : 
; 1297 : 	damage = get_dynamics_damage_type (DYNAMICS_DAMAGE_MAIN_ROTOR |

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0004b	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00051	81 e1 fe 0d 00
	00		 and	 ecx, 3582		; 00000dfeH
  00057	74 09		 je	 SHORT $LN7@award_purp
  00059	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  00060	eb 07		 jmp	 SHORT $LN8@award_purp
$LN7@award_purp:
  00062	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN8@award_purp:
  00069	8b 55 b0	 mov	 edx, DWORD PTR tv78[ebp]
  0006c	89 55 f4	 mov	 DWORD PTR _damage$[ebp], edx

; 1298 : 													DYNAMICS_DAMAGE_TAIL_ROTOR |
; 1299 : 													DYNAMICS_DAMAGE_LEFT_ENGINE |
; 1300 : 													DYNAMICS_DAMAGE_RIGHT_ENGINE |
; 1301 : 													DYNAMICS_DAMAGE_LEFT_ENGINE_FIRE |
; 1302 : 													DYNAMICS_DAMAGE_RIGHT_ENGINE_FIRE |
; 1303 : 													DYNAMICS_DAMAGE_LOW_HYDRAULICS |
; 1304 : 													DYNAMICS_DAMAGE_LOW_OIL_PRESSURE |
; 1305 : 													DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE |
; 1306 : 													DYNAMICS_DAMAGE_STABILISER);
; 1307 : 
; 1308 : 	if ((get_gunship_entity ()) && (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_ALIVE)))

  0006f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00076	0f 84 ad 00 00
	00		 je	 $LN4@award_purp
  0007c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00083	74 0c		 je	 SHORT $LN9@award_purp
  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	89 4d b0	 mov	 DWORD PTR tv85[ebp], ecx
  0008f	eb 1d		 jmp	 SHORT $LN10@award_purp
$LN9@award_purp:
  00091	68 1c 05 00 00	 push	 1308			; 0000051cH
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000a1	52		 push	 edx
  000a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN10@award_purp:
  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	85 c0		 test	 eax, eax
  000b5	74 09		 je	 SHORT $LN11@award_purp
  000b7	c7 45 ac 07 00
	00 00		 mov	 DWORD PTR tv92[ebp], 7
  000be	eb 1d		 jmp	 SHORT $LN12@award_purp
$LN11@award_purp:
  000c0	68 1c 05 00 00	 push	 1308			; 0000051cH
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d6	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN12@award_purp:
  000dd	6a 07		 push	 7
  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e5	52		 push	 edx
  000e6	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv85[ebp], 1116
  000ed	8b 4d ac	 mov	 ecx, DWORD PTR tv92[ebp]
  000f0	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000f7	ff d2		 call	 edx
  000f9	85 c0		 test	 eax, eax
  000fb	74 2c		 je	 SHORT $LN4@award_purp

; 1309 : 	{
; 1310 : 		if (damage)

  000fd	83 7d f4 00	 cmp	 DWORD PTR _damage$[ebp], 0
  00101	74 26		 je	 SHORT $LN4@award_purp

; 1311 : 		{
; 1312 : 			medals [MEDAL_PURPLE_HEART] += 1;

  00103	b8 04 00 00 00	 mov	 eax, 4
  00108	6b c8 07	 imul	 ecx, eax, 7
  0010b	8b 55 f8	 mov	 edx, DWORD PTR _medals$[ebp]
  0010e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00111	83 c0 01	 add	 eax, 1
  00114	b9 04 00 00 00	 mov	 ecx, 4
  00119	6b d1 07	 imul	 edx, ecx, 7
  0011c	8b 4d f8	 mov	 ecx, DWORD PTR _medals$[ebp]
  0011f	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 1313 : 	
; 1314 : 			#if DEBUG_MODULE
; 1315 : 
; 1316 : 			debug_filtered_log ("Awarded Purple Heart Medal");
; 1317 : 
; 1318 : 			#endif
; 1319 : 	
; 1320 : 			return MEDAL_PURPLE_HEART;

  00122	b8 07 00 00 00	 mov	 eax, 7
  00127	eb 02		 jmp	 SHORT $LN1@award_purp
$LN4@award_purp:

; 1321 : 		}
; 1322 : 	}
; 1323 : 
; 1324 : 	#if DEBUG_MODULE
; 1325 : 
; 1326 : 	debug_filtered_log ("Purple Heart Medal Not Awarded");	
; 1327 : 
; 1328 : 	#endif
; 1329 : 
; 1330 : 	return MEDAL_TYPE_NONE;

  00129	33 c0		 xor	 eax, eax
$LN1@award_purp:

; 1331 : }

  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 04 00	 ret	 4
?award_purple_heart_medal@@YGHH@Z ENDP			; award_purple_heart_medal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?award_valour_medal@@YGHHH@Z
_TEXT	SEGMENT
_medal_type$ = -24					; size = 4
_i$ = -20						; size = 4
_award$ = -16						; size = 4
_medals$ = -12						; size = 4
_criteria$ = -8						; size = 4
_player$ = -4						; size = 4
_side$ = 8						; size = 4
_points$ = 12						; size = 4
?award_valour_medal@@YGHHH@Z PROC			; award_valour_medal, COMDAT

; 1215 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1216 : 
; 1217 : 	player_log_type
; 1218 : 		*player;
; 1219 : 
; 1220 : 	player_medal_criteria
; 1221 : 		*criteria;
; 1222 : 
; 1223 : 	int
; 1224 : 		*medals,
; 1225 : 		award,
; 1226 : 		i;
; 1227 : 
; 1228 : 	medal_types
; 1229 : 		medal_type;
; 1230 : 
; 1231 : 	// find out which medal the mission points qualify the player for
; 1232 : 
; 1233 : 	ASSERT ((side >= 0) && (side <= NUM_ENTITY_SIDES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _side$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@award_valo
  0000f	83 7d 08 03	 cmp	 DWORD PTR _side$[ebp], 3
  00013	7e 18		 jle	 SHORT $LN4@award_valo
$LN5@award_valo:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??award_valour_medal@@YGHHH@Z@4JA
  0001a	83 c0 12	 add	 eax, 18			; 00000012H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@EDPCIMHH@?$CIside?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIside?5?$DM?$DN?5NUM_ENT@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@award_valo:

; 1234 : 
; 1235 : 	i = award = 0;

  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _award$[ebp], 0
  00034	8b 45 f0	 mov	 eax, DWORD PTR _award$[ebp]
  00037	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax

; 1236 : 	
; 1237 : 	player = get_current_player_log ();

  0003a	e8 00 00 00 00	 call	 ?get_current_player_log@@YGPAUPLAYER_LOG_TYPE@@XZ ; get_current_player_log
  0003f	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax

; 1238 : 
; 1239 : 	medals = player->side_log[side].medals;

  00042	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0004c	8d 54 01 24	 lea	 edx, DWORD PTR [ecx+eax+36]
  00050	89 55 f4	 mov	 DWORD PTR _medals$[ebp], edx

; 1240 : 
; 1241 : 	criteria = valour_medal_award_criteria;

  00053	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _criteria$[ebp], OFFSET ?valour_medal_award_criteria@@3PAUPLAYER_MEDAL_CRITERIA@@A ; valour_medal_award_criteria

; 1242 : 
; 1243 : 	medal_type = MEDAL_MEDAL_OF_HONOUR;

  0005a	c7 45 e8 0c 00
	00 00		 mov	 DWORD PTR _medal_type$[ebp], 12 ; 0000000cH
$LN2@award_valo:

; 1244 : 
; 1245 : 	while ((!award) && (i < NUMBER_OF_VALOUR_MEDALS))

  00061	83 7d f0 00	 cmp	 DWORD PTR _award$[ebp], 0
  00065	75 4f		 jne	 SHORT $LN3@award_valo
  00067	83 7d ec 04	 cmp	 DWORD PTR _i$[ebp], 4
  0006b	7d 49		 jge	 SHORT $LN3@award_valo

; 1246 : 	{
; 1247 : 		if (points > criteria->points_req)

  0006d	8b 45 f8	 mov	 eax, DWORD PTR _criteria$[ebp]
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _points$[ebp]
  00073	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00075	7e 1c		 jle	 SHORT $LN6@award_valo

; 1248 : 		{
; 1249 : 			award = query_award_medal (player, medals, criteria, medal_type, side);

  00077	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d e8	 mov	 ecx, DWORD PTR _medal_type$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _criteria$[ebp]
  00082	52		 push	 edx
  00083	8b 45 f4	 mov	 eax, DWORD PTR _medals$[ebp]
  00086	50		 push	 eax
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 ?query_award_medal@@YGHPAUPLAYER_LOG_TYPE@@PAHPAUPLAYER_MEDAL_CRITERIA@@HH@Z ; query_award_medal
  00090	89 45 f0	 mov	 DWORD PTR _award$[ebp], eax
$LN6@award_valo:

; 1250 : 		}
; 1251 : 
; 1252 : 		if (!award)

  00093	83 7d f0 00	 cmp	 DWORD PTR _award$[ebp], 0
  00097	75 1b		 jne	 SHORT $LN7@award_valo

; 1253 : 		{
; 1254 : 			i++;

  00099	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  0009c	83 c0 01	 add	 eax, 1
  0009f	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax

; 1255 : 	
; 1256 : 			criteria++;

  000a2	8b 45 f8	 mov	 eax, DWORD PTR _criteria$[ebp]
  000a5	83 c0 18	 add	 eax, 24			; 00000018H
  000a8	89 45 f8	 mov	 DWORD PTR _criteria$[ebp], eax

; 1257 : 	
; 1258 : 			medal_type = (medal_types)((int)medal_type - 1);

  000ab	8b 45 e8	 mov	 eax, DWORD PTR _medal_type$[ebp]
  000ae	83 e8 01	 sub	 eax, 1
  000b1	89 45 e8	 mov	 DWORD PTR _medal_type$[ebp], eax
$LN7@award_valo:

; 1259 : 		}
; 1260 : 	}

  000b4	eb ab		 jmp	 SHORT $LN2@award_valo
$LN3@award_valo:

; 1261 : 
; 1262 : 	if (award)

  000b6	83 7d f0 00	 cmp	 DWORD PTR _award$[ebp], 0
  000ba	74 1c		 je	 SHORT $LN8@award_valo

; 1263 : 	{
; 1264 : 		medals [medal_type] += 1;

  000bc	8b 45 e8	 mov	 eax, DWORD PTR _medal_type$[ebp]
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR _medals$[ebp]
  000c2	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000c5	83 c2 01	 add	 edx, 1
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _medal_type$[ebp]
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR _medals$[ebp]
  000ce	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 1265 : 
; 1266 : 		return medal_type;

  000d1	8b 45 e8	 mov	 eax, DWORD PTR _medal_type$[ebp]
  000d4	eb 04		 jmp	 SHORT $LN1@award_valo

; 1267 : 	}
; 1268 : 	else

  000d6	eb 02		 jmp	 SHORT $LN1@award_valo
$LN8@award_valo:

; 1269 : 	{
; 1270 : 		return MEDAL_TYPE_NONE;

  000d8	33 c0		 xor	 eax, eax
$LN1@award_valo:

; 1271 : 	}
; 1272 : }

  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 08 00	 ret	 8
?award_valour_medal@@YGHHH@Z ENDP			; award_valour_medal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?award_aviator_wings@@YGHH@Z
_TEXT	SEGMENT
tv128 = -88						; size = 4
_hours$ = -20						; size = 4
_award_medal$ = -16					; size = 4
_medal_type$ = -12					; size = 4
_medals$ = -8						; size = 4
_player$ = -4						; size = 4
_side$ = 8						; size = 4
?award_aviator_wings@@YGHH@Z PROC			; award_aviator_wings, COMDAT

; 1033 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1034 : 	player_log_type
; 1035 : 		*player;
; 1036 : 
; 1037 : 	int
; 1038 : 		*medals,
; 1039 : 		medal_type,
; 1040 : 		award_medal;
; 1041 : 
; 1042 : 	float
; 1043 : 		hours;
; 1044 : 
; 1045 : 	ASSERT ((side >= 0) && (side <= NUM_ENTITY_SIDES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _side$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@award_avia
  0000f	83 7d 08 03	 cmp	 DWORD PTR _side$[ebp], 3
  00013	7e 18		 jle	 SHORT $LN2@award_avia
$LN3@award_avia:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??award_aviator_wings@@YGHH@Z@4JA
  0001a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@EDPCIMHH@?$CIside?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIside?5?$DM?$DN?5NUM_ENT@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@award_avia:

; 1046 : 
; 1047 : 	award_medal = 1;

  0002d	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _award_medal$[ebp], 1

; 1048 : 	
; 1049 : 	player = get_current_player_log ();

  00034	e8 00 00 00 00	 call	 ?get_current_player_log@@YGPAUPLAYER_LOG_TYPE@@XZ ; get_current_player_log
  00039	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax

; 1050 : 
; 1051 : 	medals = player->side_log[side].medals;

  0003c	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00046	8d 54 01 24	 lea	 edx, DWORD PTR [ecx+eax+36]
  0004a	89 55 f8	 mov	 DWORD PTR _medals$[ebp], edx

; 1052 : 
; 1053 : 	hours = get_player_log_flying_seconds (side, player) / ONE_HOUR;

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _side$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ?get_player_log_flying_seconds@@YGMHPAUPLAYER_LOG_TYPE@@@Z ; get_player_log_flying_seconds
  0005a	d9 5d a8	 fstp	 DWORD PTR tv128[ebp]
  0005d	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv128[ebp]
  00062	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@45610000
  0006a	f3 0f 11 45 ec	 movss	 DWORD PTR _hours$[ebp], xmm0

; 1054 : 
; 1055 : 	if (hours >= MEDAL_HOURS_TO_BECOME_MASTER_AVIATOR)

  0006f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _hours$[ebp]
  00074	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@42480000
  0007b	72 09		 jb	 SHORT $LN4@award_avia

; 1056 : 	{
; 1057 : 		medal_type = MEDAL_MASTER_AVIATOR;

  0007d	c7 45 f4 06 00
	00 00		 mov	 DWORD PTR _medal_type$[ebp], 6
  00084	eb 35		 jmp	 SHORT $LN9@award_avia
$LN4@award_avia:

; 1058 : 	}
; 1059 : 	else if (hours >= MEDAL_HOURS_TO_BECOME_SENIOR_AVIATOR)

  00086	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _hours$[ebp]
  0008b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@41700000
  00092	72 09		 jb	 SHORT $LN6@award_avia

; 1060 : 	{
; 1061 : 		medal_type = MEDAL_SENIOR_AVIATOR;

  00094	c7 45 f4 05 00
	00 00		 mov	 DWORD PTR _medal_type$[ebp], 5
  0009b	eb 1e		 jmp	 SHORT $LN9@award_avia
$LN6@award_avia:

; 1062 : 	}
; 1063 : 	else if (hours >= MEDAL_HOURS_TO_BECOME_ARMY_AVIATOR)

  0009d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _hours$[ebp]
  000a2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40800000
  000a9	72 09		 jb	 SHORT $LN8@award_avia

; 1064 : 	{
; 1065 : 		medal_type = MEDAL_ARMY_AVIATOR;

  000ab	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _medal_type$[ebp], 4

; 1066 : 	}
; 1067 : 	else

  000b2	eb 07		 jmp	 SHORT $LN9@award_avia
$LN8@award_avia:

; 1068 : 	{
; 1069 : 		award_medal = 0;

  000b4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _award_medal$[ebp], 0
$LN9@award_avia:

; 1070 : 	}
; 1071 : 
; 1072 : 	// aviator badges only awarded once
; 1073 : 
; 1074 : 	if (award_medal)

  000bb	83 7d f0 00	 cmp	 DWORD PTR _award_medal$[ebp], 0
  000bf	74 26		 je	 SHORT $LN10@award_avia

; 1075 : 	{
; 1076 : 		if (medals [medal_type])

  000c1	8b 45 f4	 mov	 eax, DWORD PTR _medal_type$[ebp]
  000c4	8b 4d f8	 mov	 ecx, DWORD PTR _medals$[ebp]
  000c7	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  000cb	74 06		 je	 SHORT $LN12@award_avia

; 1077 : 		{
; 1078 : 			return MEDAL_TYPE_NONE;

  000cd	33 c0		 xor	 eax, eax
  000cf	eb 18		 jmp	 SHORT $LN11@award_avia

; 1079 : 		}
; 1080 : 		else

  000d1	eb 12		 jmp	 SHORT $LN13@award_avia
$LN12@award_avia:

; 1081 : 		{
; 1082 : 			medals [medal_type] = 1;

  000d3	8b 45 f4	 mov	 eax, DWORD PTR _medal_type$[ebp]
  000d6	8b 4d f8	 mov	 ecx, DWORD PTR _medals$[ebp]
  000d9	c7 04 81 01 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 1

; 1083 : 	
; 1084 : 			return medal_type;

  000e0	8b 45 f4	 mov	 eax, DWORD PTR _medal_type$[ebp]
  000e3	eb 04		 jmp	 SHORT $LN11@award_avia
$LN13@award_avia:

; 1085 : 		}
; 1086 : 	}
; 1087 : 	else

  000e5	eb 02		 jmp	 SHORT $LN11@award_avia
$LN10@award_avia:

; 1088 : 	{
; 1089 : 		return MEDAL_TYPE_NONE;

  000e7	33 c0		 xor	 eax, eax
$LN11@award_avia:

; 1090 : 	}
; 1091 : }

  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c2 04 00	 ret	 4
?award_aviator_wings@@YGHH@Z ENDP			; award_aviator_wings
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?award_campaign_medal@@YGXHH@Z
_TEXT	SEGMENT
_medals$ = -8						; size = 4
_player$ = -4						; size = 4
_side$ = 8						; size = 4
_medal$ = 12						; size = 4
?award_campaign_medal@@YGXHH@Z PROC			; award_campaign_medal, COMDAT

; 1098 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1099 : 	
; 1100 : 	player_log_type
; 1101 : 		*player;
; 1102 : 
; 1103 : 	int
; 1104 : 		*medals;
; 1105 : 		
; 1106 : 	ASSERT ((side >= 0) && (side <= NUM_ENTITY_SIDES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _side$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@award_camp
  0000f	83 7d 08 03	 cmp	 DWORD PTR _side$[ebp], 3
  00013	7e 18		 jle	 SHORT $LN2@award_camp
$LN3@award_camp:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??award_campaign_medal@@YGXHH@Z@4JA
  0001a	83 c0 08	 add	 eax, 8
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@EDOIIPJD@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@EDPCIMHH@?$CIside?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIside?5?$DM?$DN?5NUM_ENT@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@award_camp:

; 1107 : 
; 1108 : 	player = get_current_player_log ();

  0002d	e8 00 00 00 00	 call	 ?get_current_player_log@@YGPAUPLAYER_LOG_TYPE@@XZ ; get_current_player_log
  00032	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax

; 1109 : 	
; 1110 : 	medals = player->side_log [side].medals;

  00035	69 45 08 4c 03
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 844
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0003f	8d 54 01 24	 lea	 edx, DWORD PTR [ecx+eax+36]
  00043	89 55 f8	 mov	 DWORD PTR _medals$[ebp], edx

; 1111 : 	
; 1112 : 	if ((medal > MEDAL_TYPE_NONE) && (medal <= MEDAL_TAIWAN))

  00046	83 7d 0c 00	 cmp	 DWORD PTR _medal$[ebp], 0
  0004a	7e 1b		 jle	 SHORT $LN1@award_camp
  0004c	83 7d 0c 03	 cmp	 DWORD PTR _medal$[ebp], 3
  00050	7f 15		 jg	 SHORT $LN1@award_camp

; 1113 : 	{
; 1114 : 		medals [medal] += 1;

  00052	8b 45 0c	 mov	 eax, DWORD PTR _medal$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _medals$[ebp]
  00058	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0005b	83 c2 01	 add	 edx, 1
  0005e	8b 45 0c	 mov	 eax, DWORD PTR _medal$[ebp]
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _medals$[ebp]
  00064	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN1@award_camp:

; 1115 : 	}
; 1116 : 
; 1117 : 	#if DEBUG_MEDALS
; 1118 : 
; 1119 : 	// clear medals
; 1120 : 	memset (medals, 0, sizeof (int) * (NUM_MEDAL_TYPES - 1));
; 1121 : 
; 1122 : 	if (check_key (DIK_F1))
; 1123 : 	{
; 1124 : 		medals [MEDAL_SAUDI] = 1;
; 1125 : 	}
; 1126 : 
; 1127 : 	if (check_key (DIK_F2))
; 1128 : 	{
; 1129 : 		medals [MEDAL_LEBANON] = 1;
; 1130 : 	}
; 1131 : 
; 1132 : 	if (check_key (DIK_F3))
; 1133 : 	{
; 1134 : 		medals [MEDAL_TAIWAN] = 1;
; 1135 : 	}
; 1136 : 
; 1137 : 	#endif
; 1138 : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
?award_campaign_medal@@YGXHH@Z ENDP			; award_campaign_medal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\player\play_md.c
;	COMDAT ?define_medals_page_objects@@YGXXZ
_TEXT	SEGMENT
_y2$ = -24						; size = 4
_x2$ = -20						; size = 4
_y1$ = -16						; size = 4
_x1$ = -12						; size = 4
_option_bdrop$ = -8					; size = 4
_temp_obj$ = -4						; size = 4
?define_medals_page_objects@@YGXXZ PROC			; define_medals_page_objects, COMDAT

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 451  : 	ui_object
; 452  : 		*temp_obj,
; 453  : 		*option_bdrop;
; 454  : 
; 455  : 	float
; 456  : 		x1,
; 457  : 		y1,
; 458  : 		x2,
; 459  : 		y2;
; 460  : 
; 461  : 	/////////////////////////////////////////////////////////////////
; 462  : 	// medal Log Area
; 463  : 
; 464  : 	x1 = 0.0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 465  : 	y1 = 0.0;

  00011	0f 57 c0	 xorps	 xmm0, xmm0
  00014	f3 0f 11 45 f0	 movss	 DWORD PTR _y1$[ebp], xmm0

; 466  : 	x2 = 1.0;

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00021	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 467  : 	y2 = 1.0;

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0002e	f3 0f 11 45 e8	 movss	 DWORD PTR _y2$[ebp], xmm0

; 468  : 
; 469  :    player_medals_screen = create_ui_object

  00033	6a 11		 push	 17			; 00000011H
  00035	68 00 00 00 00	 push	 OFFSET ?notify_medals_screen@@YGXPAUUI_OBJECT@@@Z ; notify_medals_screen
  0003a	6a 16		 push	 22			; 00000016H
  0003c	6a 03		 push	 3
  0003e	6a 2f		 push	 47			; 0000002fH
  00040	6a 00		 push	 0
  00042	6a 30		 push	 48			; 00000030H
  00044	68 f4 01 00 00	 push	 500			; 000001f4H
  00049	6a 4d		 push	 77			; 0000004dH
  0004b	68 ff 00 00 00	 push	 255			; 000000ffH
  00050	68 ff 00 00 00	 push	 255			; 000000ffH
  00055	68 ff 00 00 00	 push	 255			; 000000ffH
  0005a	68 ff 00 00 00	 push	 255			; 000000ffH
  0005f	6a 0a		 push	 10			; 0000000aH
  00061	6a 00		 push	 0
  00063	68 ff 00 00 00	 push	 255			; 000000ffH
  00068	68 ff 00 00 00	 push	 255			; 000000ffH
  0006d	68 ff 00 00 00	 push	 255			; 000000ffH
  00072	6a 0b		 push	 11			; 0000000bH
  00074	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _y2$[ebp]
  00079	83 ec 08	 sub	 esp, 8
  0007c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00081	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x2$[ebp]
  00086	83 ec 08	 sub	 esp, 8
  00089	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008e	6a 59		 push	 89			; 00000059H
  00090	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  00095	83 ec 08	 sub	 esp, 8
  00098	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0009d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  000a2	83 ec 08	 sub	 esp, 8
  000a5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000aa	6a 58		 push	 88			; 00000058H
  000ac	6a 06		 push	 6
  000ae	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  000b3	83 c4 78	 add	 esp, 120		; 00000078H
  000b6	a3 00 00 00 00	 mov	 DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A, eax ; player_medals_screen

; 470  : 									(
; 471  : 										UI_TYPE_SCREEN,
; 472  : 										UI_ATTR_VIRTUAL_POSITION (x1, y1),
; 473  : 										UI_ATTR_VIRTUAL_SIZE (x2, y2),
; 474  : 										UI_ATTR_COLOUR_START (255, 255, 255,0),
; 475  : 										UI_ATTR_COLOUR_END (255,255,255,255),
; 476  : 										UI_ATTR_TIME_LENGTH (500),
; 477  : 										UI_ATTR_OFFSET_TIME (0),
; 478  : 										UI_ATTR_NOTIFY_ON (NOTIFY_TYPE_BUTTON_EITHER),
; 479  : 										UI_ATTR_FUNCTION (notify_medals_screen),
; 480  : 										UI_ATTR_END
; 481  : 									);
; 482  : 
; 483  :    medals_title_text = create_ui_object

  000bb	6a 11		 push	 17			; 00000011H
  000bd	6a 01		 push	 1
  000bf	6a 07		 push	 7
  000c1	6a 00		 push	 0
  000c3	6a 1b		 push	 27			; 0000001bH
  000c5	68 ff 00 00 00	 push	 255			; 000000ffH
  000ca	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ui_screen_title_text_colour@@3UREAL_COLOUR@@A
  000d1	50		 push	 eax
  000d2	0f b6 0d 01 00
	00 00		 movzx	 ecx, BYTE PTR ?ui_screen_title_text_colour@@3UREAL_COLOUR@@A+1
  000d9	51		 push	 ecx
  000da	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ?ui_screen_title_text_colour@@3UREAL_COLOUR@@A+2
  000e1	52		 push	 edx
  000e2	6a 14		 push	 20			; 00000014H
  000e4	6a 00		 push	 0
  000e6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ui_screen_title_text_colour@@3UREAL_COLOUR@@A
  000ed	50		 push	 eax
  000ee	0f b6 0d 01 00
	00 00		 movzx	 ecx, BYTE PTR ?ui_screen_title_text_colour@@3UREAL_COLOUR@@A+1
  000f5	51		 push	 ecx
  000f6	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ?ui_screen_title_text_colour@@3UREAL_COLOUR@@A+2
  000fd	52		 push	 edx
  000fe	6a 15		 push	 21			; 00000015H
  00100	6a 07		 push	 7
  00102	6a 4b		 push	 75			; 0000004bH
  00104	6a 0c		 push	 12			; 0000000cH
  00106	6a 12		 push	 18			; 00000012H
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0010d	6a 4a		 push	 74			; 0000004aH
  0010f	83 ec 08	 sub	 esp, 8
  00112	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fa3f7cee0000000
  0011a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011f	83 ec 08	 sub	 esp, 8
  00122	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fed9999a0000000
  0012a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0012f	6a 59		 push	 89			; 00000059H
  00131	83 ec 08	 sub	 esp, 8
  00134	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fa3f7cee0000000
  0013c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00141	83 ec 08	 sub	 esp, 8
  00144	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f999999a0000000
  0014c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00151	6a 58		 push	 88			; 00000058H
  00153	6a 00		 push	 0
  00155	6a 30		 push	 48			; 00000030H
  00157	6a 00		 push	 0
  00159	6a 4d		 push	 77			; 0000004dH
  0015b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  00160	50		 push	 eax
  00161	6a 32		 push	 50			; 00000032H
  00163	6a 05		 push	 5
  00165	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  0016a	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  00170	a3 00 00 00 00	 mov	 DWORD PTR ?medals_title_text@@3PAUUI_OBJECT@@A, eax ; medals_title_text

; 484  :             (
; 485  :                UI_TYPE_TEXT,
; 486  :                UI_ATTR_PARENT (player_medals_screen),
; 487  : 					UI_ATTR_TIME_LENGTH (0),
; 488  : 					UI_ATTR_OFFSET_TIME (0),
; 489  :                UI_ATTR_VIRTUAL_POSITION (TITLE_TEXT_POSITION_X, TITLE_TEXT_POSITION_Y),
; 490  : 					UI_ATTR_VIRTUAL_SIZE (TITLE_TEXT_WIDTH, TITLE_TEXT_HEIGHT),
; 491  : 					UI_ATTR_TEXT (""),
; 492  : 					UI_ATTR_FONT_TYPE (UI_FONT_IMPACT_22),
; 493  : 					UI_ATTR_TEXT_JUSTIFY (TEXT_JUSTIFY_LEFT_BOTTOM),
; 494  :                UI_ATTR_FONT_COLOUR_START (ui_screen_title_text_colour.r, ui_screen_title_text_colour.g, ui_screen_title_text_colour.b, 0),
; 495  :                UI_ATTR_FONT_COLOUR_END (ui_screen_title_text_colour.r, ui_screen_title_text_colour.g, ui_screen_title_text_colour.b, 255),
; 496  : 					UI_ATTR_HIGHLIGHTABLE (FALSE),
; 497  : 					UI_ATTR_CLEAR (TRUE),
; 498  :                UI_ATTR_END
; 499  :             );
; 500  : 
; 501  : 	/////////////////////////////////////////////////////////////////
; 502  : 	// Medal Text Areas
; 503  : 
; 504  : 	x1 = 0.096;

  00175	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dc49ba6
  0017d	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 505  : 	y1 = 0.905;

  00182	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f67ae14
  0018a	f3 0f 11 45 f0	 movss	 DWORD PTR _y1$[ebp], xmm0

; 506  : //	x2 = 0.508;
; 507  : 	x2 = 0.808;

  0018f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ed917
  00197	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 508  : 	y2 = 0.052;

  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d54fdf4
  001a4	f3 0f 11 45 e8	 movss	 DWORD PTR _y2$[ebp], xmm0

; 509  : 
; 510  :    medals_text_name = create_ui_object

  001a9	6a 11		 push	 17			; 00000011H
  001ab	6a 01		 push	 1
  001ad	6a 07		 push	 7
  001af	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  001b4	6a 4a		 push	 74			; 0000004aH
  001b6	6a 00		 push	 0
  001b8	6a 4b		 push	 75			; 0000004bH
  001ba	68 ff 00 00 00	 push	 255			; 000000ffH
  001bf	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A
  001c6	50		 push	 eax
  001c7	0f b6 0d 01 00
	00 00		 movzx	 ecx, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A+1
  001ce	51		 push	 ecx
  001cf	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A+2
  001d6	52		 push	 edx
  001d7	6a 14		 push	 20			; 00000014H
  001d9	6a 00		 push	 0
  001db	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A
  001e2	50		 push	 eax
  001e3	0f b6 0d 01 00
	00 00		 movzx	 ecx, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A+1
  001ea	51		 push	 ecx
  001eb	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A+2
  001f2	52		 push	 edx
  001f3	6a 15		 push	 21			; 00000015H
  001f5	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _y2$[ebp]
  001fa	83 ec 08	 sub	 esp, 8
  001fd	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00202	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x2$[ebp]
  00207	83 ec 08	 sub	 esp, 8
  0020a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0020f	6a 59		 push	 89			; 00000059H
  00211	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  00216	83 ec 08	 sub	 esp, 8
  00219	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0021e	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00223	83 ec 08	 sub	 esp, 8
  00226	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0022b	6a 58		 push	 88			; 00000058H
  0022d	6a 05		 push	 5
  0022f	6a 12		 push	 18			; 00000012H
  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  00236	50		 push	 eax
  00237	6a 32		 push	 50			; 00000032H
  00239	6a 01		 push	 1
  0023b	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  00240	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  00246	a3 00 00 00 00	 mov	 DWORD PTR ?medals_text_name@@3PAUUI_OBJECT@@A, eax ; medals_text_name

; 511  : 	(
; 512  : 		UI_TYPE_AREA,
; 513  : 		UI_ATTR_PARENT (player_medals_screen),
; 514  : 		UI_ATTR_FONT_TYPE (UI_FONT_ARIAL_18),
; 515  : 		UI_ATTR_VIRTUAL_POSITION (x1, y1),
; 516  : 		UI_ATTR_VIRTUAL_SIZE (x2, y2),
; 517  :       UI_ATTR_FONT_COLOUR_START (ui_option_title_text_colour.r, ui_option_title_text_colour.g, ui_option_title_text_colour.b, 0),
; 518  :       UI_ATTR_FONT_COLOUR_END (ui_option_title_text_colour.r, ui_option_title_text_colour.g, ui_option_title_text_colour.b, 255),
; 519  : 		UI_ATTR_TEXT_JUSTIFY (TEXT_JUSTIFY_CENTRE),
; 520  : 		UI_ATTR_TEXT (""),
; 521  : 		UI_ATTR_CLEAR (TRUE),
; 522  : 		UI_ATTR_END
; 523  : 	);
; 524  : 
; 525  : 	x1 = 0.086;

  0024b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db020c5
  00253	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 526  : 	y1 = 0.958;

  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f753f7d
  00260	f3 0f 11 45 f0	 movss	 DWORD PTR _y1$[ebp], xmm0

; 527  : //	x2 = 0.628;
; 528  : 	x2 = 0.828;

  00265	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f53f7cf
  0026d	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 529  : 	y2 = 0.034;

  00272	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0b4396
  0027a	f3 0f 11 45 e8	 movss	 DWORD PTR _y2$[ebp], xmm0

; 530  : 
; 531  :    medals_text_info = create_ui_object

  0027f	6a 11		 push	 17			; 00000011H
  00281	6a 01		 push	 1
  00283	6a 07		 push	 7
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0028a	6a 4a		 push	 74			; 0000004aH
  0028c	6a 00		 push	 0
  0028e	6a 4b		 push	 75			; 0000004bH
  00290	68 ff 00 00 00	 push	 255			; 000000ffH
  00295	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A
  0029c	50		 push	 eax
  0029d	0f b6 0d 01 00
	00 00		 movzx	 ecx, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A+1
  002a4	51		 push	 ecx
  002a5	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A+2
  002ac	52		 push	 edx
  002ad	6a 14		 push	 20			; 00000014H
  002af	6a 00		 push	 0
  002b1	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A
  002b8	50		 push	 eax
  002b9	0f b6 0d 01 00
	00 00		 movzx	 ecx, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A+1
  002c0	51		 push	 ecx
  002c1	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ?ui_option_title_text_colour@@3UREAL_COLOUR@@A+2
  002c8	52		 push	 edx
  002c9	6a 15		 push	 21			; 00000015H
  002cb	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _y2$[ebp]
  002d0	83 ec 08	 sub	 esp, 8
  002d3	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002d8	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x2$[ebp]
  002dd	83 ec 08	 sub	 esp, 8
  002e0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002e5	6a 59		 push	 89			; 00000059H
  002e7	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  002ec	83 ec 08	 sub	 esp, 8
  002ef	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002f4	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  002f9	83 ec 08	 sub	 esp, 8
  002fc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00301	6a 58		 push	 88			; 00000058H
  00303	6a 01		 push	 1
  00305	6a 12		 push	 18			; 00000012H
  00307	a1 00 00 00 00	 mov	 eax, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  0030c	50		 push	 eax
  0030d	6a 32		 push	 50			; 00000032H
  0030f	6a 01		 push	 1
  00311	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  00316	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  0031c	a3 00 00 00 00	 mov	 DWORD PTR ?medals_text_info@@3PAUUI_OBJECT@@A, eax ; medals_text_info

; 532  : 	(
; 533  : 		UI_TYPE_AREA,
; 534  : 		UI_ATTR_PARENT (player_medals_screen),
; 535  : 		UI_ATTR_FONT_TYPE (UI_FONT_ARIAL_14),
; 536  : 		UI_ATTR_VIRTUAL_POSITION (x1, y1),
; 537  : 		UI_ATTR_VIRTUAL_SIZE (x2, y2),
; 538  :       UI_ATTR_FONT_COLOUR_START (ui_option_title_text_colour.r, ui_option_title_text_colour.g, ui_option_title_text_colour.b, 0),
; 539  :       UI_ATTR_FONT_COLOUR_END (ui_option_title_text_colour.r, ui_option_title_text_colour.g, ui_option_title_text_colour.b, 255),
; 540  : 		UI_ATTR_TEXT_JUSTIFY (TEXT_JUSTIFY_CENTRE),
; 541  : 		UI_ATTR_TEXT (""),
; 542  : 		UI_ATTR_CLEAR (TRUE),
; 543  : 		UI_ATTR_END
; 544  : 	);
; 545  : 
; 546  : 	/////////////////////////////////////////////////////////////////
; 547  : 	// Medals
; 548  : 
; 549  : 	define_us_medal_objects ();

  00321	e8 00 00 00 00	 call	 ?define_us_medal_objects@@YGXXZ ; define_us_medal_objects

; 550  : 
; 551  : 	define_russian_medal_objects ();

  00326	e8 00 00 00 00	 call	 ?define_russian_medal_objects@@YGXXZ ; define_russian_medal_objects

; 552  : 
; 553  : 	/////////////////////////////////////////////////////////////////
; 554  : 
; 555  : 	/////////////////////////////////////////////////////////////////
; 556  : 	// Ok Button
; 557  : 
; 558  : 	option_bdrop = create_ui_object

  0032b	6a 11		 push	 17			; 00000011H
  0032d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?text_option_bdrop@@3PAUTEXTURE_GRAPHIC@@A ; text_option_bdrop
  00332	50		 push	 eax
  00333	6a 4c		 push	 76			; 0000004cH
  00335	68 ff 00 00 00	 push	 255			; 000000ffH
  0033a	68 ff 00 00 00	 push	 255			; 000000ffH
  0033f	68 ff 00 00 00	 push	 255			; 000000ffH
  00344	68 ff 00 00 00	 push	 255			; 000000ffH
  00349	6a 0a		 push	 10			; 0000000aH
  0034b	68 ff 00 00 00	 push	 255			; 000000ffH
  00350	68 ff 00 00 00	 push	 255			; 000000ffH
  00355	68 ff 00 00 00	 push	 255			; 000000ffH
  0035a	68 ff 00 00 00	 push	 255			; 000000ffH
  0035f	6a 0b		 push	 11			; 0000000bH
  00361	83 ec 08	 sub	 esp, 8
  00364	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fad2f1aa0000000
  0036c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00371	83 ec 08	 sub	 esp, 8
  00374	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fdee978e0000000
  0037c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00381	6a 59		 push	 89			; 00000059H
  00383	83 ec 08	 sub	 esp, 8
  00386	0f 57 c0	 xorps	 xmm0, xmm0
  00389	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0038e	83 ec 08	 sub	 esp, 8
  00391	0f 57 c0	 xorps	 xmm0, xmm0
  00394	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00399	6a 58		 push	 88			; 00000058H
  0039b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  003a1	51		 push	 ecx
  003a2	6a 32		 push	 50			; 00000032H
  003a4	6a 01		 push	 1
  003a6	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  003ab	83 c4 68	 add	 esp, 104		; 00000068H
  003ae	89 45 f8	 mov	 DWORD PTR _option_bdrop$[ebp], eax

; 559  : 	(
; 560  : 		UI_TYPE_AREA,
; 561  : 		UI_ATTR_PARENT (player_medals_screen),
; 562  : 		UI_ATTR_VIRTUAL_POSITION (0.0, 0.0),
; 563  : 		UI_ATTR_VIRTUAL_SIZE (TEXT_OPTION_BDROP_WIDTH, TEXT_OPTION_BDROP_HEIGHT),
; 564  : 		UI_ATTR_COLOUR_START (255, 255, 255, 255),
; 565  : 		UI_ATTR_COLOUR_END (255, 255, 255, 255),
; 566  : 		UI_ATTR_TEXTURE_GRAPHIC (text_option_bdrop),
; 567  : 		UI_ATTR_END
; 568  : 	);
; 569  : 
; 570  : 	temp_obj = create_ui_object

  003b1	6a 11		 push	 17			; 00000011H
  003b3	6a 01		 push	 1
  003b5	6a 07		 push	 7
  003b7	6a 01		 push	 1
  003b9	6a 1b		 push	 27			; 0000001bH
  003bb	68 ff 00 00 00	 push	 255			; 000000ffH
  003c0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ui_option_text_hilite_colour@@3UREAL_COLOUR@@A
  003c7	50		 push	 eax
  003c8	0f b6 0d 01 00
	00 00		 movzx	 ecx, BYTE PTR ?ui_option_text_hilite_colour@@3UREAL_COLOUR@@A+1
  003cf	51		 push	 ecx
  003d0	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ?ui_option_text_hilite_colour@@3UREAL_COLOUR@@A+2
  003d7	52		 push	 edx
  003d8	6a 22		 push	 34			; 00000022H
  003da	6a 00		 push	 0
  003dc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ui_option_text_hilite_colour@@3UREAL_COLOUR@@A
  003e3	50		 push	 eax
  003e4	0f b6 0d 01 00
	00 00		 movzx	 ecx, BYTE PTR ?ui_option_text_hilite_colour@@3UREAL_COLOUR@@A+1
  003eb	51		 push	 ecx
  003ec	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ?ui_option_text_hilite_colour@@3UREAL_COLOUR@@A+2
  003f3	52		 push	 edx
  003f4	6a 23		 push	 35			; 00000023H
  003f6	68 ff 00 00 00	 push	 255			; 000000ffH
  003fb	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ui_option_text_default_colour@@3UREAL_COLOUR@@A
  00402	50		 push	 eax
  00403	0f b6 0d 01 00
	00 00		 movzx	 ecx, BYTE PTR ?ui_option_text_default_colour@@3UREAL_COLOUR@@A+1
  0040a	51		 push	 ecx
  0040b	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ?ui_option_text_default_colour@@3UREAL_COLOUR@@A+2
  00412	52		 push	 edx
  00413	6a 14		 push	 20			; 00000014H
  00415	6a 00		 push	 0
  00417	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ui_option_text_default_colour@@3UREAL_COLOUR@@A
  0041e	50		 push	 eax
  0041f	0f b6 0d 01 00
	00 00		 movzx	 ecx, BYTE PTR ?ui_option_text_default_colour@@3UREAL_COLOUR@@A+1
  00426	51		 push	 ecx
  00427	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ?ui_option_text_default_colour@@3UREAL_COLOUR@@A+2
  0042e	52		 push	 edx
  0042f	6a 15		 push	 21			; 00000015H
  00431	6a 01		 push	 1
  00433	6a 4b		 push	 75			; 0000004bH
  00435	6a 08		 push	 8
  00437	6a 12		 push	 18			; 00000012H
  00439	68 00 00 00 00	 push	 OFFSET ?notify_medals_screen_exit_button@@YGXPAUUI_OBJECT@@PAX@Z ; notify_medals_screen_exit_button
  0043e	6a 16		 push	 22			; 00000016H
  00440	6a 01		 push	 1
  00442	6a 2f		 push	 47			; 0000002fH
  00444	68 00 00 00 00	 push	 OFFSET ??_C@_05LMLILOOH@UI_OK@
  00449	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  0044e	50		 push	 eax
  0044f	6a 4a		 push	 74			; 0000004aH
  00451	83 ec 08	 sub	 esp, 8
  00454	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fa99999a0000000
  0045c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00461	83 ec 08	 sub	 esp, 8
  00464	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc3333340000000
  0046c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00471	6a 59		 push	 89			; 00000059H
  00473	83 ec 08	 sub	 esp, 8
  00476	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fea872b00000000
  0047e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00483	83 ec 08	 sub	 esp, 8
  00486	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fa374bc60000000
  0048e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00493	6a 58		 push	 88			; 00000058H
  00495	a1 00 00 00 00	 mov	 eax, DWORD PTR ?player_medals_screen@@3PAUUI_OBJECT@@A ; player_medals_screen
  0049a	50		 push	 eax
  0049b	6a 32		 push	 50			; 00000032H
  0049d	6a 02		 push	 2
  0049f	e8 00 00 00 00	 call	 ?create_ui_object@@YAPAUUI_OBJECT@@HZZ ; create_ui_object
  004a4	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  004aa	89 45 fc	 mov	 DWORD PTR _temp_obj$[ebp], eax

; 571  : 			(
; 572  : 				UI_TYPE_BUTTON,
; 573  : 				UI_ATTR_PARENT (player_medals_screen),
; 574  : 				UI_ATTR_VIRTUAL_POSITION (OPTIONS_OK_BUTTON_POS_X, OPTIONS_OK_BUTTON_POS_Y),
; 575  : 				UI_ATTR_VIRTUAL_SIZE (OPTIONS_OK_BUTTON_X, OPTIONS_OK_BUTTON_Y),
; 576  : 				UI_ATTR_TEXT (get_trans("UI_OK")),
; 577  : 				UI_ATTR_NOTIFY_ON (NOTIFY_TYPE_BUTTON_UP),
; 578  : 				UI_ATTR_FUNCTION (notify_medals_screen_exit_button),
; 579  : 				UI_ATTR_FONT_TYPE (UI_FONT_THICK_ITALIC_ARIAL_18),
; 580  : 				UI_ATTR_TEXT_JUSTIFY (TEXT_JUSTIFY_LEFT_CENTRE),
; 581  : 		      UI_ATTR_FONT_COLOUR_START (ui_option_text_default_colour.r, ui_option_text_default_colour.g, ui_option_text_default_colour.b, 0),
; 582  :    		   UI_ATTR_FONT_COLOUR_END (ui_option_text_default_colour.r, ui_option_text_default_colour.g, ui_option_text_default_colour.b, 255),
; 583  :       		UI_ATTR_HIGHLIGHTED_FONT_COLOUR_START (ui_option_text_hilite_colour.r, ui_option_text_hilite_colour.g, ui_option_text_hilite_colour.b, 0),
; 584  :       		UI_ATTR_HIGHLIGHTED_FONT_COLOUR_END (ui_option_text_hilite_colour.r, ui_option_text_hilite_colour.g, ui_option_text_hilite_colour.b, 255),
; 585  : 				UI_ATTR_HIGHLIGHTABLE (TRUE),
; 586  : 				UI_ATTR_CLEAR (TRUE),
; 587  : 				UI_ATTR_END
; 588  : 			);
; 589  : 			
; 590  : 	// special case - reduce option bdrop width so it doesn't overlap the medal shadow on russian page...
; 591  : 
; 592  : 	set_text_option_backdrop_object (option_bdrop, temp_obj);

  004ad	8b 45 fc	 mov	 eax, DWORD PTR _temp_obj$[ebp]
  004b0	50		 push	 eax
  004b1	8b 4d f8	 mov	 ecx, DWORD PTR _option_bdrop$[ebp]
  004b4	51		 push	 ecx
  004b5	e8 00 00 00 00	 call	 ?set_text_option_backdrop_object@@YGXPAUUI_OBJECT@@0@Z ; set_text_option_backdrop_object

; 593  : 
; 594  : 	set_ui_object_x_size (option_bdrop, 0.336);

  004ba	51		 push	 ecx
  004bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eac0831
  004c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c8	8b 45 f8	 mov	 eax, DWORD PTR _option_bdrop$[ebp]
  004cb	50		 push	 eax
  004cc	8b 4d f8	 mov	 ecx, DWORD PTR _option_bdrop$[ebp]
  004cf	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d1	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_size@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  004d8	ff d0		 call	 eax

; 595  : 
; 596  : }

  004da	5f		 pop	 edi
  004db	5e		 pop	 esi
  004dc	5b		 pop	 ebx
  004dd	8b e5		 mov	 esp, ebp
  004df	5d		 pop	 ebp
  004e0	c3		 ret	 0
?define_medals_page_objects@@YGXXZ ENDP			; define_medals_page_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
