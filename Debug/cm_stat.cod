; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\camera\cm_stat.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_fmodf
PUBLIC	_sqrtf
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?reset_static_camera@@YGXPAUCAMERA@@@Z		; reset_static_camera
PUBLIC	?update_static_camera@@YGXPAUCAMERA@@@Z		; update_static_camera
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA ; `reset_static_camera'::`1'::__LINE__Var
PUBLIC	??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_03DGOGAGNC@raw@				; `string'
PUBLIC	??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@ ; `string'
PUBLIC	??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@		; `string'
PUBLIC	?__LINE__Var@?0??update_static_camera@@YGXPAUCAMERA@@@Z@4JA ; `update_static_camera'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@3f490fdb
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fd54fdf3b645a1d
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40149d6340000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@be860a92
PUBLIC	__real@bfc90fdb
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	_fmod:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?normalise_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_3d_vector
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?get_identity_matrix3x3@@YGXQAY02M@Z:PROC	; get_identity_matrix3x3
EXTRN	?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z:PROC ; get_matrix3x3_from_unit_vec3d
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z:PROC ; get_local_entity_vec3d_magnitude
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?adjust_view_left_key@@3HA:DWORD		; adjust_view_left_key
EXTRN	?adjust_view_right_key@@3HA:DWORD		; adjust_view_right_key
EXTRN	?adjust_view_up_key@@3HA:DWORD			; adjust_view_up_key
EXTRN	?adjust_view_down_key@@3HA:DWORD		; adjust_view_down_key
EXTRN	?joystick_pov_left@@3HA:DWORD			; joystick_pov_left
EXTRN	?joystick_pov_right@@3HA:DWORD			; joystick_pov_right
EXTRN	?joystick_pov_up@@3HA:DWORD			; joystick_pov_up
EXTRN	?joystick_pov_down@@3HA:DWORD			; joystick_pov_down
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@be860a92
CONST	SEGMENT
__real@be860a92 DD 0be860a92r			; -0.261799
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40149d6340000000
CONST	SEGMENT
__real@40149d6340000000 DQ 040149d6340000000r	; 5.1537
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fd54fdf3b645a1d
CONST	SEGMENT
__real@3fd54fdf3b645a1d DQ 03fd54fdf3b645a1dr	; 0.333
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f490fdb
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_static_camera@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_static_camera@@YGXPAUCAMERA@@@Z@4JA DD 0cfH ; `update_static_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@
CONST	SEGMENT
??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@ DB 'z_min < z_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
CONST	SEGMENT
??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@ DB 'raw->external_view_'
	DB	'entity', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\camera\cm_sta'
	DB	't.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA DD 058H ; `reset_static_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_stat.c
;	COMDAT ?update_static_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_pitch$ = -8						; size = 4
_heading$ = -4						; size = 4
_raw$ = 8						; size = 4
?update_static_camera@@YGXPAUCAMERA@@@Z PROC		; update_static_camera, COMDAT

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 208  : 	float
; 209  : 		heading,
; 210  : 		pitch;
; 211  : 
; 212  : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@update_sta
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_static_camera@@YGXPAUCAMERA@@@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_sta:

; 213  : 
; 214  : 	heading = get_heading_from_attitude_matrix (raw->attitude);

  00027	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002c	d1 e0		 shl	 eax, 1
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00031	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  00035	b8 04 00 00 00	 mov	 eax, 4
  0003a	d1 e0		 shl	 eax, 1
  0003c	51		 push	 ecx
  0003d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0004c	d1 e1		 shl	 ecx, 1
  0004e	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00051	8d 44 0a 18	 lea	 eax, DWORD PTR [edx+ecx+24]
  00055	b9 04 00 00 00	 mov	 ecx, 4
  0005a	6b d1 00	 imul	 edx, ecx, 0
  0005d	51		 push	 ecx
  0005e	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0006d	d9 5d fc	 fstp	 DWORD PTR _heading$[ebp]

; 215  : 
; 216  : 	pitch = get_pitch_from_attitude_matrix (raw->attitude);

  00070	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00075	d1 e0		 shl	 eax, 1
  00077	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0007a	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  0007e	b8 04 00 00 00	 mov	 eax, 4
  00083	c1 e0 00	 shl	 eax, 0
  00086	51		 push	 ecx
  00087	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  00096	d9 5d f8	 fstp	 DWORD PTR _pitch$[ebp]

; 217  : 
; 218  : 	//
; 219  : 	// adjust camera heading
; 220  : 	//
; 221  : 
; 222  : 	if (adjust_view_left_key || joystick_pov_left)

  00099	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_left_key@@3HA, 0 ; adjust_view_left_key
  000a0	75 09		 jne	 SHORT $LN5@update_sta
  000a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_left@@3HA, 0 ; joystick_pov_left
  000a9	74 20		 je	 SHORT $LN3@update_sta
$LN5@update_sta:

; 223  : 	{
; 224  : 		heading -= STATIC_CAMERA_ROTATE_RATE * get_delta_time ();

  000ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f490fdb
  000b3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  000bb	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _heading$[ebp]
  000c0	f3 0f 5c c8	 subss	 xmm1, xmm0
  000c4	f3 0f 11 4d fc	 movss	 DWORD PTR _heading$[ebp], xmm1
  000c9	eb 2c		 jmp	 SHORT $LN6@update_sta
$LN3@update_sta:

; 225  : 	}
; 226  : 	else if (adjust_view_right_key || joystick_pov_right)

  000cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_right_key@@3HA, 0 ; adjust_view_right_key
  000d2	75 09		 jne	 SHORT $LN7@update_sta
  000d4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_right@@3HA, 0 ; joystick_pov_right
  000db	74 1a		 je	 SHORT $LN6@update_sta
$LN7@update_sta:

; 227  : 	{
; 228  : 		heading += STATIC_CAMERA_ROTATE_RATE * get_delta_time ();

  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f490fdb
  000e5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  000ed	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _heading$[ebp]
  000f2	f3 0f 11 45 fc	 movss	 DWORD PTR _heading$[ebp], xmm0
$LN6@update_sta:

; 229  : 	}
; 230  : 
; 231  : 	heading = wrap_angle (heading);

  000f7	51		 push	 ecx
  000f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00100	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00105	51		 push	 ecx
  00106	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0010b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00110	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00115	d9 5d fc	 fstp	 DWORD PTR _heading$[ebp]

; 232  : 
; 233  : 	//
; 234  : 	// adjust camera pitch
; 235  : 	//
; 236  : 
; 237  : 	if (adjust_view_up_key || joystick_pov_up)

  00118	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_up_key@@3HA, 0 ; adjust_view_up_key
  0011f	75 09		 jne	 SHORT $LN10@update_sta
  00121	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_up@@3HA, 0 ; joystick_pov_up
  00128	74 3f		 je	 SHORT $LN8@update_sta
$LN10@update_sta:

; 238  : 	{
; 239  : 		pitch += STATIC_CAMERA_ROTATE_RATE * get_delta_time ();

  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f490fdb
  00132	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0013a	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _pitch$[ebp]
  0013f	f3 0f 11 45 f8	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 240  : 
; 241  : 		pitch = min (STATIC_CAMERA_ROTATE_UP_LIMIT, pitch);

  00144	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  0014c	f3 0f 11 45 b4	 movss	 DWORD PTR $T2[ebp], xmm0
  00151	8d 45 f8	 lea	 eax, DWORD PTR _pitch$[ebp]
  00154	50		 push	 eax
  00155	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  00158	51		 push	 ecx
  00159	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0015e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00162	f3 0f 11 45 f8	 movss	 DWORD PTR _pitch$[ebp], xmm0
  00167	eb 53		 jmp	 SHORT $LN11@update_sta
$LN8@update_sta:

; 242  : 	}
; 243  : 	else if (adjust_view_down_key || joystick_pov_down)

  00169	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_down_key@@3HA, 0 ; adjust_view_down_key
  00170	75 09		 jne	 SHORT $LN12@update_sta
  00172	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_down@@3HA, 0 ; joystick_pov_down
  00179	74 41		 je	 SHORT $LN11@update_sta
$LN12@update_sta:

; 244  : 	{
; 245  : 		pitch -= STATIC_CAMERA_ROTATE_RATE * get_delta_time ();

  0017b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f490fdb
  00183	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0018b	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _pitch$[ebp]
  00190	f3 0f 5c c8	 subss	 xmm1, xmm0
  00194	f3 0f 11 4d f8	 movss	 DWORD PTR _pitch$[ebp], xmm1

; 246  : 
; 247  : 		pitch = max (STATIC_CAMERA_ROTATE_DOWN_LIMIT, pitch);

  00199	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  001a1	f3 0f 11 45 b0	 movss	 DWORD PTR $T1[ebp], xmm0
  001a6	8d 45 f8	 lea	 eax, DWORD PTR _pitch$[ebp]
  001a9	50		 push	 eax
  001aa	8d 4d b0	 lea	 ecx, DWORD PTR $T1[ebp]
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001b3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001b7	f3 0f 11 45 f8	 movss	 DWORD PTR _pitch$[ebp], xmm0
$LN11@update_sta:

; 248  : 	}
; 249  : 
; 250  : 	get_3d_transformation_matrix (raw->attitude, heading, pitch, 0.0);

  001bc	51		 push	 ecx
  001bd	0f 57 c0	 xorps	 xmm0, xmm0
  001c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c5	51		 push	 ecx
  001c6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	51		 push	 ecx
  001d1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  001d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001db	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001de	83 c0 18	 add	 eax, 24			; 00000018H
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 251  : }

  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi
  001e9	5b		 pop	 ebx
  001ea	8b e5		 mov	 esp, ebp
  001ec	5d		 pop	 ebp
  001ed	c2 04 00	 ret	 4
?update_static_camera@@YGXPAUCAMERA@@@Z ENDP		; update_static_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_stat.c
;	COMDAT ?reset_static_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
tv388 = -164						; size = 8
tv225 = -164						; size = 4
tv201 = -164						; size = 4
tv174 = -164						; size = 4
tv142 = -164						; size = 4
tv90 = -164						; size = 4
tv455 = -160						; size = 4
tv217 = -160						; size = 4
tv193 = -160						; size = 4
tv167 = -160						; size = 4
tv134 = -160						; size = 4
tv82 = -160						; size = 4
$T1 = -156						; size = 4
_fast_airborne$ = -88					; size = 4
_length$ = -84						; size = 4
_radius$ = -80						; size = 4
_z_max$ = -76						; size = 4
_z_min$ = -72						; size = 4
_heading$ = -68						; size = 4
_m$ = -64						; size = 36
_v$ = -28						; size = 12
_pos$ = -16						; size = 12
_en$ = -4						; size = 4
_raw$ = 8						; size = 4
?reset_static_camera@@YGXPAUCAMERA@@@Z PROC		; reset_static_camera, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 89   : 	entity
; 90   : 		*en;
; 91   : 
; 92   : 	vec3d
; 93   : 		pos,
; 94   : 		v;
; 95   : 
; 96   : 	matrix3x3
; 97   : 		m;
; 98   : 
; 99   : 	float
; 100  : 		heading,
; 101  : 		z_min,
; 102  : 		z_max,
; 103  : 		radius,
; 104  : 		length;
; 105  : 
; 106  : 	int
; 107  : 		fast_airborne;
; 108  : 
; 109  : 	ASSERT (raw);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@reset_stat
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  00017	83 c0 15	 add	 eax, 21			; 00000015H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@reset_stat:

; 110  : 
; 111  : 	ASSERT (raw->external_view_entity);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002d	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00034	75 18		 jne	 SHORT $LN3@reset_stat
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  0003b	83 c0 17	 add	 eax, 23			; 00000017H
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@reset_stat:

; 112  : 
; 113  : 	en = raw->external_view_entity;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00051	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00057	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 114  : 
; 115  : 	z_min = get_local_entity_float_value (en, FLOAT_TYPE_CHASE_VIEW_MIN_DISTANCE);

  0005a	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0005e	74 0d		 je	 SHORT $LN13@reset_stat
  00060	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  0006b	eb 24		 jmp	 SHORT $LN14@reset_stat
$LN13@reset_stat:
  0006d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  00073	83 c2 1b	 add	 edx, 27			; 0000001bH
  00076	52		 push	 edx
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00087	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN14@reset_stat:
  00091	b9 01 00 00 00	 mov	 ecx, 1
  00096	85 c9		 test	 ecx, ecx
  00098	74 0c		 je	 SHORT $LN15@reset_stat
  0009a	c7 85 5c ff ff
	ff 15 00 00 00	 mov	 DWORD PTR tv90[ebp], 21	; 00000015H
  000a4	eb 24		 jmp	 SHORT $LN16@reset_stat
$LN15@reset_stat:
  000a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  000ac	83 c2 1b	 add	 edx, 27			; 0000001bH
  000af	52		 push	 edx
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c0	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN16@reset_stat:
  000ca	6a 15		 push	 21			; 00000015H
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  000cf	51		 push	 ecx
  000d0	69 95 60 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv82[ebp], 700
  000da	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv90[ebp]
  000e0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000e7	ff d1		 call	 ecx
  000e9	d9 5d b8	 fstp	 DWORD PTR _z_min$[ebp]

; 116  : 	z_max = get_local_entity_float_value (en, FLOAT_TYPE_CHASE_VIEW_MAX_DISTANCE);

  000ec	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  000f0	74 0d		 je	 SHORT $LN17@reset_stat
  000f2	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv134[ebp], ecx
  000fd	eb 24		 jmp	 SHORT $LN18@reset_stat
$LN17@reset_stat:
  000ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  00105	83 c2 1c	 add	 edx, 28			; 0000001cH
  00108	52		 push	 edx
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00119	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv134[ebp], 0
$LN18@reset_stat:
  00123	b9 01 00 00 00	 mov	 ecx, 1
  00128	85 c9		 test	 ecx, ecx
  0012a	74 0c		 je	 SHORT $LN19@reset_stat
  0012c	c7 85 5c ff ff
	ff 13 00 00 00	 mov	 DWORD PTR tv142[ebp], 19 ; 00000013H
  00136	eb 24		 jmp	 SHORT $LN20@reset_stat
$LN19@reset_stat:
  00138	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  0013e	83 c2 1c	 add	 edx, 28			; 0000001cH
  00141	52		 push	 edx
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00152	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN20@reset_stat:
  0015c	6a 13		 push	 19			; 00000013H
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  00161	51		 push	 ecx
  00162	69 95 60 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv134[ebp], 700
  0016c	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv142[ebp]
  00172	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00179	ff d1		 call	 ecx
  0017b	d9 5d b4	 fstp	 DWORD PTR _z_max$[ebp]

; 117  : 
; 118  : 	ASSERT (z_min < z_max);

  0017e	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  00183	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _z_min$[ebp]
  00187	77 18		 ja	 SHORT $LN4@reset_stat
  00189	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  0018e	83 c0 1e	 add	 eax, 30			; 0000001eH
  00191	50		 push	 eax
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@
  0019c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@reset_stat:

; 119  : 
; 120  : 	radius = -(((z_max - z_min) * CHASE_CAMERA_RESET_ZOOM * CHASE_CAMERA_RESET_ZOOM) + z_min);

  001a1	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  001a6	f3 0f 5c 45 b8	 subss	 xmm0, DWORD PTR _z_min$[ebp]
  001ab	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001af	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd54fdf3b645a1d
  001b7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd54fdf3b645a1d
  001bf	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _z_min$[ebp]
  001c4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001c8	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  001cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d3	f3 0f 11 45 b0	 movss	 DWORD PTR _radius$[ebp], xmm0

; 121  : 
; 122  : 	fast_airborne = FALSE;

  001d8	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _fast_airborne$[ebp], 0

; 123  : 
; 124  : 	if (get_local_entity_int_value (en, INT_TYPE_AIRBORNE_AIRCRAFT))

  001df	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  001e3	74 0d		 je	 SHORT $LN21@reset_stat
  001e5	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  001e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ea	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv167[ebp], ecx
  001f0	eb 1d		 jmp	 SHORT $LN22@reset_stat
$LN21@reset_stat:
  001f2	6a 7c		 push	 124			; 0000007cH
  001f4	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001ff	52		 push	 edx
  00200	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00205	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv167[ebp], 0
$LN22@reset_stat:
  0020f	b8 01 00 00 00	 mov	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 0c		 je	 SHORT $LN23@reset_stat
  00218	c7 85 5c ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv174[ebp], 4
  00222	eb 1d		 jmp	 SHORT $LN24@reset_stat
$LN23@reset_stat:
  00224	6a 7c		 push	 124			; 0000007cH
  00226	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  0022b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00231	51		 push	 ecx
  00232	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00237	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv174[ebp], 0
$LN24@reset_stat:
  00241	6a 04		 push	 4
  00243	8b 55 fc	 mov	 edx, DWORD PTR _en$[ebp]
  00246	52		 push	 edx
  00247	69 85 60 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv167[ebp], 1116
  00251	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv174[ebp]
  00257	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0025e	ff d2		 call	 edx
  00260	85 c0		 test	 eax, eax
  00262	74 2a		 je	 SHORT $LN6@reset_stat

; 125  : 	{
; 126  : 		if (get_local_entity_vec3d_magnitude (en, VEC3D_TYPE_MOTION_VECTOR) >= knots_to_metres_per_second (10.0))

  00264	6a 06		 push	 6
  00266	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 ?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z ; get_local_entity_vec3d_magnitude
  0026f	dd 9d 5c ff ff
	ff		 fstp	 QWORD PTR tv388[ebp]
  00275	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv388[ebp]
  0027d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40149d6340000000
  00285	72 07		 jb	 SHORT $LN6@reset_stat

; 127  : 		{
; 128  : 			fast_airborne = TRUE;

  00287	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _fast_airborne$[ebp], 1
$LN6@reset_stat:

; 129  : 		}
; 130  : 	}
; 131  : 
; 132  : 	if (fast_airborne)

  0028e	83 7d a8 00	 cmp	 DWORD PTR _fast_airborne$[ebp], 0
  00292	0f 84 cd 00 00
	00		 je	 $LN7@reset_stat

; 133  : 	{
; 134  : 		get_local_entity_vec3d (en, VEC3D_TYPE_MOTION_VECTOR, &v);

  00298	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0029c	74 0d		 je	 SHORT $LN25@reset_stat
  0029e	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  002a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a3	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv193[ebp], ecx
  002a9	eb 24		 jmp	 SHORT $LN26@reset_stat
$LN25@reset_stat:
  002ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  002b1	83 c2 2e	 add	 edx, 46			; 0000002eH
  002b4	52		 push	 edx
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002bf	50		 push	 eax
  002c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c5	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv193[ebp], 0
$LN26@reset_stat:
  002cf	b9 01 00 00 00	 mov	 ecx, 1
  002d4	85 c9		 test	 ecx, ecx
  002d6	74 0c		 je	 SHORT $LN27@reset_stat
  002d8	c7 85 5c ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv201[ebp], 6
  002e2	eb 24		 jmp	 SHORT $LN28@reset_stat
$LN27@reset_stat:
  002e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  002ea	83 c2 2e	 add	 edx, 46			; 0000002eH
  002ed	52		 push	 edx
  002ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  002f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  002f8	50		 push	 eax
  002f9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002fe	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv201[ebp], 0
$LN28@reset_stat:
  00308	8d 4d e4	 lea	 ecx, DWORD PTR _v$[ebp]
  0030b	51		 push	 ecx
  0030c	6a 06		 push	 6
  0030e	8b 55 fc	 mov	 edx, DWORD PTR _en$[ebp]
  00311	52		 push	 edx
  00312	6b 85 60 ff ff
	ff 60		 imul	 eax, DWORD PTR tv193[ebp], 96
  00319	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv201[ebp]
  0031f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00326	ff d2		 call	 edx

; 135  : 
; 136  : 		normalise_3d_vector (&v);

  00328	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  00331	dd d8		 fstp	 ST(0)

; 137  : 
; 138  : 		v.x *= radius;

  00333	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00338	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  0033d	f3 0f 11 45 e4	 movss	 DWORD PTR _v$[ebp], xmm0

; 139  : 		v.y *= radius;

  00342	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _v$[ebp+4]
  00347	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  0034c	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp+4], xmm0

; 140  : 		v.z *= radius;

  00351	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _v$[ebp+8]
  00356	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  0035b	f3 0f 11 45 ec	 movss	 DWORD PTR _v$[ebp+8], xmm0

; 141  : 	}
; 142  : 	else

  00360	e9 e8 00 00 00	 jmp	 $LN8@reset_stat
$LN7@reset_stat:

; 143  : 	{
; 144  : 		heading = get_local_entity_float_value (en, FLOAT_TYPE_HEADING);

  00365	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00369	74 0d		 je	 SHORT $LN29@reset_stat
  0036b	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  0036e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00370	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv217[ebp], ecx
  00376	eb 24		 jmp	 SHORT $LN30@reset_stat
$LN29@reset_stat:
  00378	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  0037e	83 c2 38	 add	 edx, 56			; 00000038H
  00381	52		 push	 edx
  00382	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00387	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0038c	50		 push	 eax
  0038d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00392	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv217[ebp], 0
$LN30@reset_stat:
  0039c	b9 01 00 00 00	 mov	 ecx, 1
  003a1	85 c9		 test	 ecx, ecx
  003a3	74 0c		 je	 SHORT $LN31@reset_stat
  003a5	c7 85 5c ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv225[ebp], 52 ; 00000034H
  003af	eb 24		 jmp	 SHORT $LN32@reset_stat
$LN31@reset_stat:
  003b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_static_camera@@YGXPAUCAMERA@@@Z@4JA
  003b7	83 c2 38	 add	 edx, 56			; 00000038H
  003ba	52		 push	 edx
  003bb	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OIECEKAI@c?3?2users?2nhv90?2projects?2eech?2ap@
  003c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  003c5	50		 push	 eax
  003c6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003cb	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
$LN32@reset_stat:
  003d5	6a 34		 push	 52			; 00000034H
  003d7	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  003da	51		 push	 ecx
  003db	69 95 60 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv217[ebp], 700
  003e5	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv225[ebp]
  003eb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  003f2	ff d1		 call	 ecx
  003f4	d9 5d bc	 fstp	 DWORD PTR _heading$[ebp]

; 145  : 
; 146  : 		get_3d_transformation_matrix (m, heading, CHASE_CAMERA_RESET_PITCH, 0.0);

  003f7	51		 push	 ecx
  003f8	0f 57 c0	 xorps	 xmm0, xmm0
  003fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00400	51		 push	 ecx
  00401	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be860a92
  00409	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040e	51		 push	 ecx
  0040f	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00414	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00419	8d 45 c0	 lea	 eax, DWORD PTR _m$[ebp]
  0041c	50		 push	 eax
  0041d	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 147  : 
; 148  : 		v.x = 0.0;

  00422	0f 57 c0	 xorps	 xmm0, xmm0
  00425	f3 0f 11 45 e4	 movss	 DWORD PTR _v$[ebp], xmm0

; 149  : 		v.y = 0.0;

  0042a	0f 57 c0	 xorps	 xmm0, xmm0
  0042d	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp+4], xmm0

; 150  : 		v.z = radius;

  00432	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00437	f3 0f 11 45 ec	 movss	 DWORD PTR _v$[ebp+8], xmm0

; 151  : 
; 152  : 		multiply_matrix3x3_vec3d (&v, m, &v);

  0043c	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  0043f	50		 push	 eax
  00440	8d 4d c0	 lea	 ecx, DWORD PTR _m$[ebp]
  00443	51		 push	 ecx
  00444	8d 55 e4	 lea	 edx, DWORD PTR _v$[ebp]
  00447	52		 push	 edx
  00448	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d
$LN8@reset_stat:

; 153  : 	}
; 154  : 
; 155  : 	get_local_entity_target_point (en, &pos);

  0044d	8d 45 f0	 lea	 eax, DWORD PTR _pos$[ebp]
  00450	50		 push	 eax
  00451	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  00454	51		 push	 ecx
  00455	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 156  : 
; 157  : 	raw->position.x = pos.x + v.x;

  0045a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pos$[ebp]
  0045f	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _v$[ebp]
  00464	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00467	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 158  : 	raw->position.y = pos.y + v.y;

  0046b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pos$[ebp+4]
  00470	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _v$[ebp+4]
  00475	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00478	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 159  : 	raw->position.z = pos.z + v.z;

  0047d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pos$[ebp+8]
  00482	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _v$[ebp+8]
  00487	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0048a	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 160  : 
; 161  : 	//
; 162  : 	// keep point above ground (unless point off map)
; 163  : 	//
; 164  : 
; 165  : 	if (point_inside_map_area (&raw->position))

  0048f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00492	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00496	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  0049d	0f 82 96 00 00
	00		 jb	 $LN9@reset_stat
  004a3	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  004a6	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  004ae	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  004b1	0f 82 82 00 00
	00		 jb	 $LN9@reset_stat
  004b7	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  004ba	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004bf	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  004c6	72 71		 jb	 SHORT $LN9@reset_stat
  004c8	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  004cb	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  004d3	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  004d7	72 60		 jb	 SHORT $LN9@reset_stat

; 166  : 	{
; 167  : 		raw->position.y = max (raw->position.y, get_3d_terrain_point_data (raw->position.x, raw->position.z, &raw->terrain_info) + CAMERA_MIN_HEIGHT_ABOVE_GROUND);

  004d9	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  004dc	83 c0 50	 add	 eax, 80			; 00000050H
  004df	50		 push	 eax
  004e0	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  004e3	51		 push	 ecx
  004e4	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  004e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ee	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  004f1	51		 push	 ecx
  004f2	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00500	d9 9d 60 ff ff
	ff		 fstp	 DWORD PTR tv455[ebp]
  00506	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR tv455[ebp]
  0050e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f8ccccd
  00516	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  0051e	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00524	50		 push	 eax
  00525	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00528	83 c1 04	 add	 ecx, 4
  0052b	51		 push	 ecx
  0052c	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00531	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00534	8b 00		 mov	 eax, DWORD PTR [eax]
  00536	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN9@reset_stat:

; 168  : 	}
; 169  : 
; 170  : 	//
; 171  : 	// attitude
; 172  : 	//
; 173  : 
; 174  : 	v.x = pos.x - raw->position.x;

  00539	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0053c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pos$[ebp]
  00541	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00545	f3 0f 11 45 e4	 movss	 DWORD PTR _v$[ebp], xmm0

; 175  : 	v.y = pos.y - raw->position.y;

  0054a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0054d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pos$[ebp+4]
  00552	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00557	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp+4], xmm0

; 176  : 	v.z = pos.z - raw->position.z;

  0055c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0055f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pos$[ebp+8]
  00564	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00569	f3 0f 11 45 ec	 movss	 DWORD PTR _v$[ebp+8], xmm0

; 177  : 
; 178  : 	length = (v.x * v.x) + (v.y * v.y) + (v.z * v.z);

  0056e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00573	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _v$[ebp]
  00578	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _v$[ebp+4]
  0057d	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _v$[ebp+4]
  00582	f3 0f 58 c1	 addss	 xmm0, xmm1
  00586	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _v$[ebp+8]
  0058b	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _v$[ebp+8]
  00590	f3 0f 58 c1	 addss	 xmm0, xmm1
  00594	f3 0f 11 45 ac	 movss	 DWORD PTR _length$[ebp], xmm0

; 179  : 
; 180  : 	if (length > 1.0)

  00599	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0059e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  005a6	76 39		 jbe	 SHORT $LN10@reset_stat

; 181  : 	{
; 182  : 		length = sqrt (length);

  005a8	51		 push	 ecx
  005a9	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _length$[ebp]
  005ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b3	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  005b8	d9 5d ac	 fstp	 DWORD PTR _length$[ebp]

; 183  : 
; 184  : 		normalise_3d_vector_given_magnitude (&v, length);

  005bb	51		 push	 ecx
  005bc	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _length$[ebp]
  005c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c6	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  005c9	50		 push	 eax
  005ca	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 185  : 
; 186  : 		get_matrix3x3_from_unit_vec3d (raw->attitude, &v);

  005cf	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  005d2	50		 push	 eax
  005d3	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  005d6	83 c1 18	 add	 ecx, 24			; 00000018H
  005d9	51		 push	 ecx
  005da	e8 00 00 00 00	 call	 ?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z ; get_matrix3x3_from_unit_vec3d

; 187  : 	}
; 188  : 	else

  005df	eb 0c		 jmp	 SHORT $LN11@reset_stat
$LN10@reset_stat:

; 189  : 	{
; 190  : 		get_identity_matrix3x3 (raw->attitude);

  005e1	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  005e4	83 c0 18	 add	 eax, 24			; 00000018H
  005e7	50		 push	 eax
  005e8	e8 00 00 00 00	 call	 ?get_identity_matrix3x3@@YGXQAY02M@Z ; get_identity_matrix3x3
$LN11@reset_stat:

; 191  : 	}
; 192  : 
; 193  : 	//
; 194  : 	// motion vector
; 195  : 	//
; 196  : 
; 197  : 	raw->motion_vector.x = 0.0;

  005ed	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  005f0	0f 57 c0	 xorps	 xmm0, xmm0
  005f3	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 198  : 	raw->motion_vector.y = 0.0;

  005f8	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  005fb	0f 57 c0	 xorps	 xmm0, xmm0
  005fe	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 199  : 	raw->motion_vector.z = 0.0;

  00603	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00606	0f 57 c0	 xorps	 xmm0, xmm0
  00609	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 200  : }

  0060e	5f		 pop	 edi
  0060f	5e		 pop	 esi
  00610	5b		 pop	 ebx
  00611	8b e5		 mov	 esp, ebp
  00613	5d		 pop	 ebp
  00614	c2 04 00	 ret	 4
?reset_static_camera@@YGXPAUCAMERA@@@Z ENDP		; reset_static_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
END
