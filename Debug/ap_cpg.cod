; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\cockpits\apache\ap_cpg.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_fabsf
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?initialise_co_pilot_head_animations@@YGXXZ	; initialise_co_pilot_head_animations
PUBLIC	?animate_co_pilot_head@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; animate_co_pilot_head
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3e32b8c2
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f060a92
PUBLIC	__real@3f800000
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd6571848000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe0c15236000000
PUBLIC	__real@3fe6571848000000
PUBLIC	__real@3febecde5a000000
PUBLIC	__real@3ff0c15236000000
PUBLIC	__real@3ff38c353f000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40a00000
PUBLIC	__real@bdb2b8c2
PUBLIC	__real@bf800000
PUBLIC	__real@bfb6571848000000
PUBLIC	__real@bfd6571848000000
PUBLIC	__real@bfe0c15236000000
PUBLIC	__real@bfe6571848000000
PUBLIC	__real@bfe921fb51000000
PUBLIC	__real@bfebecde5a000000
PUBLIC	__real@bff38c353f000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__rand:PROC
EXTRN	_fabs:PROC
EXTRN	?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z:PROC ; find_object_3d_sub_object
EXTRN	?get_crew_role@@YG?AW4CREW_ROLES@@XZ:PROC	; get_crew_role
EXTRN	?get_time_acceleration@@YGHXZ:PROC		; get_time_acceleration
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?time_until_state_change@@3MA DD 01H DUP (?)		; time_until_state_change
?current_movement_rate_heading@@3MA DD 01H DUP (?)	; current_movement_rate_heading
?current_movement_rate_pitch@@3MA DD 01H DUP (?)	; current_movement_rate_pitch
?requested_bend@@3MA DD 01H DUP (?)			; requested_bend
?requested_heading@@3MA DD 01H DUP (?)			; requested_heading
?requested_pitch@@3MA DD 01H DUP (?)			; requested_pitch
?looking_state@@3W4head_looking_states@@A DD 01H DUP (?) ; looking_state
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff38c353f000000
CONST	SEGMENT
__real@bff38c353f000000 DQ 0bff38c353f000000r	; -1.22173
CONST	ENDS
;	COMDAT __real@bfebecde5a000000
CONST	SEGMENT
__real@bfebecde5a000000 DQ 0bfebecde5a000000r	; -0.872665
CONST	ENDS
;	COMDAT __real@bfe921fb51000000
CONST	SEGMENT
__real@bfe921fb51000000 DQ 0bfe921fb51000000r	; -0.785398
CONST	ENDS
;	COMDAT __real@bfe6571848000000
CONST	SEGMENT
__real@bfe6571848000000 DQ 0bfe6571848000000r	; -0.698132
CONST	ENDS
;	COMDAT __real@bfe0c15236000000
CONST	SEGMENT
__real@bfe0c15236000000 DQ 0bfe0c15236000000r	; -0.523599
CONST	ENDS
;	COMDAT __real@bfd6571848000000
CONST	SEGMENT
__real@bfd6571848000000 DQ 0bfd6571848000000r	; -0.349066
CONST	ENDS
;	COMDAT __real@bfb6571848000000
CONST	SEGMENT
__real@bfb6571848000000 DQ 0bfb6571848000000r	; -0.0872665
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bdb2b8c2
CONST	SEGMENT
__real@bdb2b8c2 DD 0bdb2b8c2r			; -0.0872665
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff38c353f000000
CONST	SEGMENT
__real@3ff38c353f000000 DQ 03ff38c353f000000r	; 1.22173
CONST	ENDS
;	COMDAT __real@3ff0c15236000000
CONST	SEGMENT
__real@3ff0c15236000000 DQ 03ff0c15236000000r	; 1.0472
CONST	ENDS
;	COMDAT __real@3febecde5a000000
CONST	SEGMENT
__real@3febecde5a000000 DQ 03febecde5a000000r	; 0.872665
CONST	ENDS
;	COMDAT __real@3fe6571848000000
CONST	SEGMENT
__real@3fe6571848000000 DQ 03fe6571848000000r	; 0.698132
CONST	ENDS
;	COMDAT __real@3fe0c15236000000
CONST	SEGMENT
__real@3fe0c15236000000 DQ 03fe0c15236000000r	; 0.523599
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd6571848000000
CONST	SEGMENT
__real@3fd6571848000000 DQ 03fd6571848000000r	; 0.349066
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f060a92
CONST	SEGMENT
__real@3f060a92 DD 03f060a92r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3e32b8c2
CONST	SEGMENT
__real@3e32b8c2 DD 03e32b8c2r			; 0.174533
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\apache\ap_cpg.c
;	COMDAT ?switch_head_aiming_state@@YGXPAUOBJECT_3D_SUB_INSTANCE@@@Z
_TEXT	SEGMENT
tv136 = -84						; size = 4
tv69 = -84						; size = 4
_state_multiplier$ = -16				; size = 4
_cur_pitch$ = -12					; size = 4
_cur_heading$ = -8					; size = 4
_valid_state$ = -4					; size = 4
_helmet_inst$ = 8					; size = 4
?switch_head_aiming_state@@YGXPAUOBJECT_3D_SUB_INSTANCE@@@Z PROC ; switch_head_aiming_state, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 170  : 	int
; 171  : 		valid_state = FALSE;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _valid_state$[ebp], 0

; 172  : 
; 173  : 	float
; 174  : 		cur_heading = helmet_inst->relative_heading,

  00010	8b 45 08	 mov	 eax, DWORD PTR _helmet_inst$[ebp]
  00013	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00018	f3 0f 11 45 f8	 movss	 DWORD PTR _cur_heading$[ebp], xmm0

; 175  : 		cur_pitch = helmet_inst->relative_pitch,

  0001d	8b 45 08	 mov	 eax, DWORD PTR _helmet_inst$[ebp]
  00020	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00025	f3 0f 11 45 f4	 movss	 DWORD PTR _cur_pitch$[ebp], xmm0

; 176  : 		state_multiplier = 1.0;

  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00032	f3 0f 11 45 f0	 movss	 DWORD PTR _state_multiplier$[ebp], xmm0
$LN2@switch_hea:

; 177  : 
; 178  : 	while (!valid_state)  // until we have a valid new state

  00037	83 7d fc 00	 cmp	 DWORD PTR _valid_state$[ebp], 0
  0003b	0f 85 8b 00 00
	00		 jne	 $LN3@switch_hea

; 179  : 	{
; 180  : 		looking_state = (head_looking_states) (rand() % NUM_CPG_ANIM_STATES);

  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00047	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  0004c	79 05		 jns	 SHORT $LN11@switch_hea
  0004e	48		 dec	 eax
  0004f	83 c8 f8	 or	 eax, -8			; fffffff8H
  00052	40		 inc	 eax
$LN11@switch_hea:
  00053	a3 00 00 00 00	 mov	 DWORD PTR ?looking_state@@3W4head_looking_states@@A, eax

; 181  : 
; 182  : 		#if DEBUG_MODULE
; 183  : 		debug_log("try state: %d", looking_state);
; 184  : 		#endif
; 185  : 
; 186  : 		switch (looking_state)

  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?looking_state@@3W4head_looking_states@@A
  0005d	89 45 ac	 mov	 DWORD PTR tv69[ebp], eax
  00060	83 7d ac 07	 cmp	 DWORD PTR tv69[ebp], 7
  00064	77 0a		 ja	 SHORT $LN6@switch_hea
  00066	8b 4d ac	 mov	 ecx, DWORD PTR tv69[ebp]
  00069	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN12@switch_hea[ecx*4]
$LN6@switch_hea:

; 187  : 		{
; 188  : 		default:
; 189  : 			break;

  00070	eb 55		 jmp	 SHORT $LN4@switch_hea
$LN7@switch_hea:

; 190  : 		case CPG_ANIM_STATE_REST:
; 191  : 		case CPG_ANIM_STATE_MFD_LEFT:
; 192  : 		case CPG_ANIM_STATE_MFD_RIGHT:
; 193  : 		case CPG_ANIM_STATE_LOOK_LEFT:
; 194  : 		case CPG_ANIM_STATE_LOOK_RIGHT:
; 195  : 		case CPG_ANIM_STATE_LOOK_UP:
; 196  : 			valid_state = set_new_static_direction(cur_heading, cur_pitch);

  00072	51		 push	 ecx
  00073	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _cur_pitch$[ebp]
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	51		 push	 ecx
  0007e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cur_heading$[ebp]
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	e8 00 00 00 00	 call	 ?set_new_static_direction@@YGHMM@Z ; set_new_static_direction
  0008d	89 45 fc	 mov	 DWORD PTR _valid_state$[ebp], eax

; 197  : 			break;

  00090	eb 35		 jmp	 SHORT $LN4@switch_hea
$LN8@switch_hea:

; 198  : 		case CPG_ANIM_STATE_EO:
; 199  : 			valid_state = set_new_follow_eo_state(cur_heading, cur_pitch);

  00092	51		 push	 ecx
  00093	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _cur_pitch$[ebp]
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	51		 push	 ecx
  0009e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cur_heading$[ebp]
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	e8 00 00 00 00	 call	 ?set_new_follow_eo_state@@YGHMM@Z ; set_new_follow_eo_state
  000ad	89 45 fc	 mov	 DWORD PTR _valid_state$[ebp], eax

; 200  : 			break;

  000b0	eb 15		 jmp	 SHORT $LN4@switch_hea
$LN9@switch_hea:

; 201  : 		case CPG_ANIM_STATE_ORT:
; 202  : 			valid_state = set_new_ort_position();

  000b2	e8 00 00 00 00	 call	 ?set_new_ort_position@@YGHXZ ; set_new_ort_position
  000b7	89 45 fc	 mov	 DWORD PTR _valid_state$[ebp], eax

; 203  : 			// look through ORT longer than other states
; 204  : 			state_multiplier = 3.0;

  000ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  000c2	f3 0f 11 45 f0	 movss	 DWORD PTR _state_multiplier$[ebp], xmm0
$LN4@switch_hea:

; 205  : 			break;
; 206  : 		}
; 207  : 	};

  000c7	e9 6b ff ff ff	 jmp	 $LN2@switch_hea
$LN3@switch_hea:

; 208  : 
; 209  : 	time_until_state_change = get_reset_co_pilot_anim_delay() * state_multiplier;

  000cc	e8 00 00 00 00	 call	 ?get_reset_co_pilot_anim_delay@@YGMXZ ; get_reset_co_pilot_anim_delay
  000d1	d9 5d ac	 fstp	 DWORD PTR tv136[ebp]
  000d4	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv136[ebp]
  000d9	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _state_multiplier$[ebp]
  000de	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?time_until_state_change@@3MA, xmm0

; 210  : 
; 211  : 	#if DEBUG_MODULE
; 212  : 	debug_log("next state change in %.1f seconds", time_until_state_change);
; 213  : 	#endif
; 214  : }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
  000ef	90		 npad	 1
$LN12@switch_hea:
  000f0	00 00 00 00	 DD	 $LN7@switch_hea
  000f4	00 00 00 00	 DD	 $LN8@switch_hea
  000f8	00 00 00 00	 DD	 $LN9@switch_hea
  000fc	00 00 00 00	 DD	 $LN7@switch_hea
  00100	00 00 00 00	 DD	 $LN7@switch_hea
  00104	00 00 00 00	 DD	 $LN7@switch_hea
  00108	00 00 00 00	 DD	 $LN7@switch_hea
  0010c	00 00 00 00	 DD	 $LN7@switch_hea
?switch_head_aiming_state@@YGXPAUOBJECT_3D_SUB_INSTANCE@@@Z ENDP ; switch_head_aiming_state
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\apache\ap_cpg.c
;	COMDAT ?set_new_ort_position@@YGHXZ
_TEXT	SEGMENT
?set_new_ort_position@@YGHXZ PROC			; set_new_ort_position, COMDAT

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 149  : 	// don't look through ORT if EO is not active
; 150  : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_OFF)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 0 ; target_acquisition_system
  00010	75 04		 jne	 SHORT $LN2@set_new_or

; 151  : 		return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	eb 4b		 jmp	 SHORT $LN1@set_new_or
$LN2@set_new_or:

; 152  : 
; 153  : 	// bend forward and keep head pointing ahead
; 154  : 	requested_heading = 0.0;

  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_heading@@3MA, xmm0

; 155  : 	requested_pitch = 0.0;

  00021	0f 57 c0	 xorps	 xmm0, xmm0
  00024	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_pitch@@3MA, xmm0

; 156  : 	requested_bend = MAX_BEND;

  0002c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f060a92
  00034	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_bend@@3MA, xmm0

; 157  : 
; 158  : 	current_movement_rate_heading = MAX_MOVEMENT_RATE;

  0003c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  00044	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_movement_rate_heading@@3MA, xmm0

; 159  : 	current_movement_rate_pitch = MAX_MOVEMENT_RATE;

  0004c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  00054	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_movement_rate_pitch@@3MA, xmm0

; 160  : 
; 161  : 	return TRUE;

  0005c	b8 01 00 00 00	 mov	 eax, 1
$LN1@set_new_or:

; 162  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?set_new_ort_position@@YGHXZ ENDP			; set_new_ort_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\apache\ap_cpg.c
;	COMDAT ?update_follow_eo@@YGXXZ
_TEXT	SEGMENT
?update_follow_eo@@YGXXZ PROC				; update_follow_eo, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 138  : 	// update heading and pitch to where EO is pointing now
; 139  : 	requested_heading = eo_azimuth;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00011	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_heading@@3MA, xmm0

; 140  : 	requested_pitch = -eo_elevation;

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00021	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00028	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_pitch@@3MA, xmm0

; 141  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?update_follow_eo@@YGXXZ ENDP				; update_follow_eo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\apache\ap_cpg.c
;	COMDAT ?set_new_follow_eo_state@@YGHMM@Z
_TEXT	SEGMENT
_cur_heading$ = 8					; size = 4
_cur_pitch$ = 12					; size = 4
?set_new_follow_eo_state@@YGHMM@Z PROC			; set_new_follow_eo_state, COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 120  : 	// don't follow EO if it's not active
; 121  : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_OFF)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 0 ; target_acquisition_system
  00010	75 04		 jne	 SHORT $LN2@set_new_fo

; 122  : 		return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	eb 70		 jmp	 SHORT $LN1@set_new_fo
$LN2@set_new_fo:

; 123  : 
; 124  : 	current_movement_rate_heading = rad(60.0) + frand1() * rad(60.0);

  00016	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00020	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00025	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00030	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00033	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00039	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0003d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00045	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  0004d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  00055	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00059	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_movement_rate_heading@@3MA, xmm0

; 125  : 	current_movement_rate_pitch = current_movement_rate_pitch;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_movement_rate_pitch@@3MA
  00069	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_movement_rate_pitch@@3MA, xmm0

; 126  : 
; 127  : 	requested_bend = MIN_BEND;

  00071	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb2b8c2
  00079	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_bend@@3MA, xmm0

; 128  : 
; 129  : 	return TRUE;

  00081	b8 01 00 00 00	 mov	 eax, 1
$LN1@set_new_fo:

; 130  : }

  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
?set_new_follow_eo_state@@YGHMM@Z ENDP			; set_new_follow_eo_state
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\apache\ap_cpg.c
;	COMDAT ?set_new_static_direction@@YGHMM@Z
_TEXT	SEGMENT
tv276 = -100						; size = 4
tv254 = -100						; size = 4
tv190 = -96						; size = 8
tv170 = -96						; size = 8
tv269 = -88						; size = 4
tv247 = -88						; size = 4
tv191 = -84						; size = 8
tv171 = -84						; size = 8
tv261 = -76						; size = 4
tv239 = -76						; size = 4
tv77 = -76						; size = 4
_multiplier$ = -8					; size = 4
_movement_time$ = -4					; size = 4
_cur_heading$ = 8					; size = 4
_cur_pitch$ = 12					; size = 4
?set_new_static_direction@@YGHMM@Z PROC			; set_new_static_direction, COMDAT

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 64   : 	float movement_time = 0.25 + frand1() * 0.5;

  00009	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00013	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00023	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00026	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0002c	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00030	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00038	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00040	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00048	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0004c	f3 0f 11 45 fc	 movss	 DWORD PTR _movement_time$[ebp], xmm0

; 65   : 	float multiplier = 1.0;

  00051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00059	f3 0f 11 45 f8	 movss	 DWORD PTR _multiplier$[ebp], xmm0

; 66   : 
; 67   : 	// don't use the fixed headings as often when we have a target
; 68   : 	if (target_acquisition_system != TARGET_ACQUISITION_SYSTEM_OFF && (rand() % 3 != 0))

  0005e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 0 ; target_acquisition_system
  00065	74 19		 je	 SHORT $LN4@set_new_st
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0006d	99		 cdq
  0006e	b9 03 00 00 00	 mov	 ecx, 3
  00073	f7 f9		 idiv	 ecx
  00075	85 d2		 test	 edx, edx
  00077	74 07		 je	 SHORT $LN4@set_new_st

; 69   : 		return FALSE;

  00079	33 c0		 xor	 eax, eax
  0007b	e9 62 03 00 00	 jmp	 $LN1@set_new_st
$LN4@set_new_st:

; 70   : 
; 71   : 	switch (looking_state)

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?looking_state@@3W4head_looking_states@@A
  00085	89 45 b4	 mov	 DWORD PTR tv77[ebp], eax
  00088	8b 4d b4	 mov	 ecx, DWORD PTR tv77[ebp]
  0008b	83 e9 03	 sub	 ecx, 3
  0008e	89 4d b4	 mov	 DWORD PTR tv77[ebp], ecx
  00091	83 7d b4 04	 cmp	 DWORD PTR tv77[ebp], 4
  00095	77 0a		 ja	 SHORT $LN5@set_new_st
  00097	8b 55 b4	 mov	 edx, DWORD PTR tv77[ebp]
  0009a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN20@set_new_st[edx*4]
$LN5@set_new_st:

; 72   : 	{
; 73   : 	default:
; 74   : 	case CPG_ANIM_STATE_REST:
; 75   : 		requested_heading = 0.0;

  000a1	0f 57 c0	 xorps	 xmm0, xmm0
  000a4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_heading@@3MA, xmm0

; 76   : 		requested_pitch = 5.0;

  000ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  000b4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_pitch@@3MA, xmm0

; 77   : 		break;

  000bc	e9 86 01 00 00	 jmp	 $LN2@set_new_st
$LN6@set_new_st:

; 78   : 	case CPG_ANIM_STATE_MFD_RIGHT:
; 79   : 		multiplier = -1.0;

  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000c9	f3 0f 11 45 f8	 movss	 DWORD PTR _multiplier$[ebp], xmm0
$LN7@set_new_st:

; 80   : 		// fall through
; 81   : 	case CPG_ANIM_STATE_MFD_LEFT:
; 82   : 		requested_heading = -rad(5.0) * multiplier;

  000ce	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _multiplier$[ebp]
  000d3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfb6571848000000
  000db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000df	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_heading@@3MA, xmm0

; 83   : 		requested_pitch = rad(10.0);

  000e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  000ef	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_pitch@@3MA, xmm0

; 84   : 		break;

  000f7	e9 4b 01 00 00	 jmp	 $LN2@set_new_st
$LN8@set_new_st:

; 85   : 	case CPG_ANIM_STATE_LOOK_RIGHT:
; 86   : 		multiplier = -1.0;

  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00104	f3 0f 11 45 f8	 movss	 DWORD PTR _multiplier$[ebp], xmm0
$LN9@set_new_st:

; 87   : 		// fall through
; 88   : 	case CPG_ANIM_STATE_LOOK_LEFT:
; 89   : 		requested_heading = (-rad(20.0) - (rad(60.0)) * frand1()) * multiplier;

  00109	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00113	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00118	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0011d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00123	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00126	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0012c	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00130	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00138	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  00140	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfd6571848000000
  00148	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0014c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _multiplier$[ebp]
  00151	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00155	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00159	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_heading@@3MA, xmm0

; 90   : 		requested_pitch = -rad(30.0) + (rad(50.0)) * frand1();

  00161	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0016b	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00170	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0017b	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0017e	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00184	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00188	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00190	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3febecde5a000000
  00198	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe0c15236000000
  001a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_pitch@@3MA, xmm0

; 91   : 		break;

  001ac	e9 96 00 00 00	 jmp	 $LN2@set_new_st
$LN10@set_new_st:

; 92   : 	case CPG_ANIM_STATE_LOOK_UP:
; 93   : 		requested_heading = (-rad(20.0) + (rad(40.0)) * frand1());

  001b1	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  001bb	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  001c0	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  001c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  001cb	c1 f9 10	 sar	 ecx, 16			; 00000010H
  001ce	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  001d4	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  001d8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  001e0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe6571848000000
  001e8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6571848000000
  001f0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_heading@@3MA, xmm0

; 94   : 		requested_pitch = -rad(40.0) + (rad(50.0)) * frand1();

  001fc	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00206	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0020b	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00210	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00216	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00219	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0021f	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00223	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  0022b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3febecde5a000000
  00233	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe6571848000000
  0023b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_pitch@@3MA, xmm0
$LN2@set_new_st:

; 95   : 		break;
; 96   : 	}
; 97   : 
; 98   : 	requested_bend = MIN_BEND;

  00247	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb2b8c2
  0024f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_bend@@3MA, xmm0

; 99   : 
; 100  : 	#if DEBUG_MODULE
; 101  : 	debug_log("new heading: %.0f %.0f, move for %.1f seconds", deg(requested_heading), deg(requested_pitch), movement_time);
; 102  : 	#endif
; 103  : 
; 104  : 	current_movement_rate_heading = bound(fabs(requested_heading - cur_heading) / movement_time, 0.0, MAX_TURN_ANGLE);

  00257	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_heading@@3MA
  0025f	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _cur_heading$[ebp]
  00264	51		 push	 ecx
  00265	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026a	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0026f	d9 5d b4	 fstp	 DWORD PTR tv239[ebp]
  00272	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv239[ebp]
  00277	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _movement_time$[ebp]
  0027c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00280	0f 57 c9	 xorps	 xmm1, xmm1
  00283	66 0f 2f c8	 comisd	 xmm1, xmm0
  00287	76 0a		 jbe	 SHORT $LN14@set_new_st
  00289	0f 57 c0	 xorps	 xmm0, xmm0
  0028c	f2 0f 11 45 ac	 movsd	 QWORD PTR tv171[ebp], xmm0
  00291	eb 7a		 jmp	 SHORT $LN15@set_new_st
$LN14@set_new_st:
  00293	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_heading@@3MA
  0029b	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _cur_heading$[ebp]
  002a0	51		 push	 ecx
  002a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a6	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  002ab	d9 5d a8	 fstp	 DWORD PTR tv247[ebp]
  002ae	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv247[ebp]
  002b3	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _movement_time$[ebp]
  002b8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002bc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff38c353f000000
  002c4	76 0f		 jbe	 SHORT $LN12@set_new_st
  002c6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff38c353f000000
  002ce	f2 0f 11 45 a0	 movsd	 QWORD PTR tv170[ebp], xmm0
  002d3	eb 2e		 jmp	 SHORT $LN13@set_new_st
$LN12@set_new_st:
  002d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_heading@@3MA
  002dd	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _cur_heading$[ebp]
  002e2	51		 push	 ecx
  002e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e8	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  002ed	d9 5d 9c	 fstp	 DWORD PTR tv254[ebp]
  002f0	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv254[ebp]
  002f5	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _movement_time$[ebp]
  002fa	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002fe	f2 0f 11 45 a0	 movsd	 QWORD PTR tv170[ebp], xmm0
$LN13@set_new_st:
  00303	f2 0f 10 45 a0	 movsd	 xmm0, QWORD PTR tv170[ebp]
  00308	f2 0f 11 45 ac	 movsd	 QWORD PTR tv171[ebp], xmm0
$LN15@set_new_st:
  0030d	f2 0f 5a 45 ac	 cvtsd2ss xmm0, QWORD PTR tv171[ebp]
  00312	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_movement_rate_heading@@3MA, xmm0

; 105  : 	current_movement_rate_pitch = bound(fabs(requested_pitch - cur_pitch) / movement_time, 0.0, MAX_PITCH);

  0031a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_pitch@@3MA
  00322	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _cur_pitch$[ebp]
  00327	51		 push	 ecx
  00328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032d	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00332	d9 5d b4	 fstp	 DWORD PTR tv261[ebp]
  00335	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv261[ebp]
  0033a	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _movement_time$[ebp]
  0033f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00343	0f 57 c9	 xorps	 xmm1, xmm1
  00346	66 0f 2f c8	 comisd	 xmm1, xmm0
  0034a	76 0a		 jbe	 SHORT $LN18@set_new_st
  0034c	0f 57 c0	 xorps	 xmm0, xmm0
  0034f	f2 0f 11 45 ac	 movsd	 QWORD PTR tv191[ebp], xmm0
  00354	eb 7a		 jmp	 SHORT $LN19@set_new_st
$LN18@set_new_st:
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_pitch@@3MA
  0035e	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _cur_pitch$[ebp]
  00363	51		 push	 ecx
  00364	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00369	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0036e	d9 5d a8	 fstp	 DWORD PTR tv269[ebp]
  00371	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv269[ebp]
  00376	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _movement_time$[ebp]
  0037b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0037f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd6571848000000
  00387	76 0f		 jbe	 SHORT $LN16@set_new_st
  00389	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fd6571848000000
  00391	f2 0f 11 45 a0	 movsd	 QWORD PTR tv190[ebp], xmm0
  00396	eb 2e		 jmp	 SHORT $LN17@set_new_st
$LN16@set_new_st:
  00398	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_pitch@@3MA
  003a0	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _cur_pitch$[ebp]
  003a5	51		 push	 ecx
  003a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ab	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  003b0	d9 5d 9c	 fstp	 DWORD PTR tv276[ebp]
  003b3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv276[ebp]
  003b8	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _movement_time$[ebp]
  003bd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003c1	f2 0f 11 45 a0	 movsd	 QWORD PTR tv190[ebp], xmm0
$LN17@set_new_st:
  003c6	f2 0f 10 45 a0	 movsd	 xmm0, QWORD PTR tv190[ebp]
  003cb	f2 0f 11 45 ac	 movsd	 QWORD PTR tv191[ebp], xmm0
$LN19@set_new_st:
  003d0	f2 0f 5a 45 ac	 cvtsd2ss xmm0, QWORD PTR tv191[ebp]
  003d5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_movement_rate_pitch@@3MA, xmm0

; 106  : 
; 107  : 	#if DEBUG_MODULE
; 108  : 	debug_log("movement rate: %.0f %.0f", deg(current_movement_rate_heading), deg(current_movement_rate_pitch));
; 109  : 	#endif
; 110  : 
; 111  : 	return TRUE;

  003dd	b8 01 00 00 00	 mov	 eax, 1
$LN1@set_new_st:

; 112  : }

  003e2	5f		 pop	 edi
  003e3	5e		 pop	 esi
  003e4	5b		 pop	 ebx
  003e5	8b e5		 mov	 esp, ebp
  003e7	5d		 pop	 ebp
  003e8	c2 08 00	 ret	 8
  003eb	90		 npad	 1
$LN20@set_new_st:
  003ec	00 00 00 00	 DD	 $LN7@set_new_st
  003f0	00 00 00 00	 DD	 $LN6@set_new_st
  003f4	00 00 00 00	 DD	 $LN9@set_new_st
  003f8	00 00 00 00	 DD	 $LN8@set_new_st
  003fc	00 00 00 00	 DD	 $LN10@set_new_st
?set_new_static_direction@@YGHMM@Z ENDP			; set_new_static_direction
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\apache\ap_cpg.c
;	COMDAT ?get_reset_co_pilot_anim_delay@@YGMXZ
_TEXT	SEGMENT
tv85 = -68						; size = 4
?get_reset_co_pilot_anim_delay@@YGMXZ PROC		; get_reset_co_pilot_anim_delay, COMDAT

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 52   : 	if (frand1 () < 0.2)

  00009	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00013	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00023	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00026	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0002c	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00030	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00038	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fc999999999999a
  00040	66 0f 2f c8	 comisd	 xmm1, xmm0
  00044	76 04		 jbe	 SHORT $LN2@get_reset_

; 53   : 		return 0.0;

  00046	d9 ee		 fldz
  00048	eb 4b		 jmp	 SHORT $LN1@get_reset_
$LN2@get_reset_:

; 54   : 
; 55   : 	return (frand1 () * 3.0) + 2.0;

  0004a	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00054	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00059	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00064	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00067	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0006d	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00071	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00079	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4008000000000000
  00081	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00089	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008d	f3 0f 11 45 bc	 movss	 DWORD PTR tv85[ebp], xmm0
  00092	d9 45 bc	 fld	 DWORD PTR tv85[ebp]
$LN1@get_reset_:

; 56   : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?get_reset_co_pilot_anim_delay@@YGMXZ ENDP		; get_reset_co_pilot_anim_delay
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\apache\ap_cpg.c
;	COMDAT ?animate_co_pilot_head@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
tv203 = -156						; size = 8
tv176 = -156						; size = 8
tv148 = -156						; size = 8
tv204 = -148						; size = 8
tv177 = -148						; size = 8
tv161 = -148						; size = 4
tv149 = -148						; size = 8
tv133 = -148						; size = 4
tv78 = -148						; size = 4
tv162 = -144						; size = 4
tv134 = -144						; size = 4
tv89 = -144						; size = 4
tv74 = -144						; size = 4
_search$ = -76						; size = 56
_helmet_inst$ = -20					; size = 4
_torso_inst$ = -16					; size = 4
_delta$ = -12						; size = 4
_dt$ = -8						; size = 4
_diff$ = -4						; size = 4
_cockpit_inst3d$ = 8					; size = 4
?animate_co_pilot_head@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC ; animate_co_pilot_head, COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 222  : 	float
; 223  : 		diff = 0.0,

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 fc	 movss	 DWORD PTR _diff$[ebp], xmm0

; 224  : 		dt = get_delta_time(),

  00014	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0001c	f3 0f 11 45 f8	 movss	 DWORD PTR _dt$[ebp], xmm0

; 225  : 		delta;
; 226  : 	object_3d_sub_instance
; 227  : 		*torso_inst,
; 228  : 		*helmet_inst;
; 229  : 	object_3d_sub_object_search_data
; 230  : 		search;
; 231  : 
; 232  : 	search.search_depth = 0;

  00021	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _search$[ebp+8], 0

; 233  : 	search.search_object = cockpit_inst3d;

  00028	8b 45 08	 mov	 eax, DWORD PTR _cockpit_inst3d$[ebp]
  0002b	89 45 b4	 mov	 DWORD PTR _search$[ebp], eax

; 234  : 	search.sub_object_index = OBJECT_3D_SUB_OBJECT_WSO_CHEST;

  0002e	c7 45 c0 a1 00
	00 00		 mov	 DWORD PTR _search$[ebp+12], 161 ; 000000a1H

; 235  : 	if ( find_object_3d_sub_object ( &search ) != SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND )

  00035	8d 45 b4	 lea	 eax, DWORD PTR _search$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  0003e	83 f8 01	 cmp	 eax, 1
  00041	74 05		 je	 SHORT $LN4@animate_co

; 236  : 		return;

  00043	e9 5f 04 00 00	 jmp	 $LN1@animate_co
$LN4@animate_co:

; 237  : 	torso_inst = search.result_sub_object;

  00048	8b 45 b8	 mov	 eax, DWORD PTR _search$[ebp+4]
  0004b	89 45 f0	 mov	 DWORD PTR _torso_inst$[ebp], eax

; 238  : 
; 239  : 	search.search_depth = 0;

  0004e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _search$[ebp+8], 0

; 240  : 	search.search_object = cockpit_inst3d;

  00055	8b 45 08	 mov	 eax, DWORD PTR _cockpit_inst3d$[ebp]
  00058	89 45 b4	 mov	 DWORD PTR _search$[ebp], eax

; 241  : 	search.sub_object_index = OBJECT_3D_SUB_OBJECT_WSO_HEAD;

  0005b	c7 45 c0 ad 00
	00 00		 mov	 DWORD PTR _search$[ebp+12], 173 ; 000000adH

; 242  : 	if ( find_object_3d_sub_object ( &search ) != SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND )

  00062	8d 45 b4	 lea	 eax, DWORD PTR _search$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  0006b	83 f8 01	 cmp	 eax, 1
  0006e	74 05		 je	 SHORT $LN5@animate_co

; 243  : 		return;

  00070	e9 32 04 00 00	 jmp	 $LN1@animate_co
$LN5@animate_co:

; 244  : 	helmet_inst = search.result_sub_object;

  00075	8b 45 b8	 mov	 eax, DWORD PTR _search$[ebp+4]
  00078	89 45 ec	 mov	 DWORD PTR _helmet_inst$[ebp], eax

; 245  : 
; 246  : 	// don't display co-pilot's helmet when you are co-pilot. it's just in the way
; 247  : 	torso_inst->visible_object = helmet_inst->visible_object = get_crew_role() == CREW_ROLE_PILOT;

  0007b	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  00080	85 c0		 test	 eax, eax
  00082	75 0c		 jne	 SHORT $LN15@animate_co
  00084	c7 85 70 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv74[ebp], 1
  0008e	eb 0a		 jmp	 SHORT $LN16@animate_co
$LN15@animate_co:
  00090	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv74[ebp], 0
$LN16@animate_co:
  0009a	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]
  000a0	83 e0 01	 and	 eax, 1
  000a3	8b 4d ec	 mov	 ecx, DWORD PTR _helmet_inst$[ebp]
  000a6	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000a9	83 e2 fe	 and	 edx, -2			; fffffffeH
  000ac	0b d0		 or	 edx, eax
  000ae	89 95 6c ff ff
	ff		 mov	 DWORD PTR tv78[ebp], edx
  000b4	8b 45 ec	 mov	 eax, DWORD PTR _helmet_inst$[ebp]
  000b7	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR tv78[ebp]
  000bd	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000c0	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv78[ebp]
  000c6	83 e2 01	 and	 edx, 1
  000c9	83 e2 01	 and	 edx, 1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _torso_inst$[ebp]
  000cf	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000d2	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000d5	0b ca		 or	 ecx, edx
  000d7	8b 55 f0	 mov	 edx, DWORD PTR _torso_inst$[ebp]
  000da	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 248  : 
; 249  : 	if (get_time_acceleration() == 0)

  000dd	e8 00 00 00 00	 call	 ?get_time_acceleration@@YGHXZ ; get_time_acceleration
  000e2	85 c0		 test	 eax, eax
  000e4	75 05		 jne	 SHORT $LN6@animate_co

; 250  : 		return;

  000e6	e9 bc 03 00 00	 jmp	 $LN1@animate_co
$LN6@animate_co:

; 251  : 
; 252  : 	// switch to different state when time runs out
; 253  : 	if (time_until_state_change <= 0.0)

  000eb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?time_until_state_change@@3MA
  000f3	0f 57 c9	 xorps	 xmm1, xmm1
  000f6	66 0f 2f c8	 comisd	 xmm1, xmm0
  000fa	72 09		 jb	 SHORT $LN7@animate_co

; 254  : 		switch_head_aiming_state(helmet_inst);

  000fc	8b 45 ec	 mov	 eax, DWORD PTR _helmet_inst$[ebp]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?switch_head_aiming_state@@YGXPAUOBJECT_3D_SUB_INSTANCE@@@Z ; switch_head_aiming_state
$LN7@animate_co:

; 255  : 
; 256  : 	switch (looking_state)

  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?looking_state@@3W4head_looking_states@@A
  0010a	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  00110	83 bd 70 ff ff
	ff 01		 cmp	 DWORD PTR tv89[ebp], 1
  00117	74 02		 je	 SHORT $LN8@animate_co
  00119	eb 05		 jmp	 SHORT $LN9@animate_co
$LN8@animate_co:

; 257  : 	{
; 258  : 	case CPG_ANIM_STATE_EO:
; 259  : 		update_follow_eo();

  0011b	e8 00 00 00 00	 call	 ?update_follow_eo@@YGXXZ ; update_follow_eo
$LN9@animate_co:

; 260  : 		break;
; 261  : 	default:
; 262  : 		// most states don't need update between state changes
; 263  : 		break;
; 264  : 	}
; 265  : 
; 266  : 	// update head rotation
; 267  : 	delta = bound(requested_heading - helmet_inst->relative_heading, -current_movement_rate_heading, current_movement_rate_heading) * get_delta_time();

  00120	8b 45 ec	 mov	 eax, DWORD PTR _helmet_inst$[ebp]
  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_heading@@3MA
  0012b	f3 0f 5c 40 18	 subss	 xmm0, DWORD PTR [eax+24]
  00130	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?current_movement_rate_heading@@3MA
  00138	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0013f	0f 2f c8	 comiss	 xmm1, xmm0
  00142	76 19		 jbe	 SHORT $LN19@animate_co
  00144	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_movement_rate_heading@@3MA
  0014c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00153	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR tv134[ebp], xmm0
  0015b	eb 53		 jmp	 SHORT $LN20@animate_co
$LN19@animate_co:
  0015d	8b 4d ec	 mov	 ecx, DWORD PTR _helmet_inst$[ebp]
  00160	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_heading@@3MA
  00168	f3 0f 5c 41 18	 subss	 xmm0, DWORD PTR [ecx+24]
  0016d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?current_movement_rate_heading@@3MA
  00174	76 12		 jbe	 SHORT $LN17@animate_co
  00176	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_movement_rate_heading@@3MA
  0017e	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR tv133[ebp], xmm0
  00186	eb 18		 jmp	 SHORT $LN18@animate_co
$LN17@animate_co:
  00188	8b 55 ec	 mov	 edx, DWORD PTR _helmet_inst$[ebp]
  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_heading@@3MA
  00193	f3 0f 5c 42 18	 subss	 xmm0, DWORD PTR [edx+24]
  00198	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR tv133[ebp], xmm0
$LN18@animate_co:
  001a0	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR tv133[ebp]
  001a8	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR tv134[ebp], xmm0
$LN20@animate_co:
  001b0	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR tv134[ebp]
  001b8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  001c0	f3 0f 11 45 f4	 movss	 DWORD PTR _delta$[ebp], xmm0

; 268  : 	helmet_inst->relative_heading = bound(helmet_inst->relative_heading + delta, -MAX_TURN_ANGLE, MAX_TURN_ANGLE);

  001c5	8b 45 ec	 mov	 eax, DWORD PTR _helmet_inst$[ebp]
  001c8	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  001cd	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _delta$[ebp]
  001d2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001d6	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff38c353f000000
  001de	66 0f 2f c8	 comisd	 xmm1, xmm0
  001e2	76 12		 jbe	 SHORT $LN23@animate_co
  001e4	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff38c353f000000
  001ec	f2 0f 11 85 6c
	ff ff ff	 movsd	 QWORD PTR tv149[ebp], xmm0
  001f4	eb 56		 jmp	 SHORT $LN24@animate_co
$LN23@animate_co:
  001f6	8b 4d ec	 mov	 ecx, DWORD PTR _helmet_inst$[ebp]
  001f9	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  001fe	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _delta$[ebp]
  00203	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00207	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff38c353f000000
  0020f	76 12		 jbe	 SHORT $LN21@animate_co
  00211	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff38c353f000000
  00219	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv148[ebp], xmm0
  00221	eb 19		 jmp	 SHORT $LN22@animate_co
$LN21@animate_co:
  00223	8b 55 ec	 mov	 edx, DWORD PTR _helmet_inst$[ebp]
  00226	f3 0f 10 42 18	 movss	 xmm0, DWORD PTR [edx+24]
  0022b	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _delta$[ebp]
  00230	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00234	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv148[ebp], xmm0
$LN22@animate_co:
  0023c	f2 0f 10 85 64
	ff ff ff	 movsd	 xmm0, QWORD PTR tv148[ebp]
  00244	f2 0f 11 85 6c
	ff ff ff	 movsd	 QWORD PTR tv149[ebp], xmm0
$LN24@animate_co:
  0024c	f2 0f 5a 85 6c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv149[ebp]
  00254	8b 45 ec	 mov	 eax, DWORD PTR _helmet_inst$[ebp]
  00257	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 269  : 
; 270  : 	delta = bound(requested_pitch - helmet_inst->relative_pitch, -current_movement_rate_pitch, current_movement_rate_pitch) * get_delta_time();

  0025c	8b 45 ec	 mov	 eax, DWORD PTR _helmet_inst$[ebp]
  0025f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_pitch@@3MA
  00267	f3 0f 5c 40 1c	 subss	 xmm0, DWORD PTR [eax+28]
  0026c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?current_movement_rate_pitch@@3MA
  00274	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0027b	0f 2f c8	 comiss	 xmm1, xmm0
  0027e	76 19		 jbe	 SHORT $LN27@animate_co
  00280	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_movement_rate_pitch@@3MA
  00288	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0028f	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR tv162[ebp], xmm0
  00297	eb 53		 jmp	 SHORT $LN28@animate_co
$LN27@animate_co:
  00299	8b 4d ec	 mov	 ecx, DWORD PTR _helmet_inst$[ebp]
  0029c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_pitch@@3MA
  002a4	f3 0f 5c 41 1c	 subss	 xmm0, DWORD PTR [ecx+28]
  002a9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?current_movement_rate_pitch@@3MA
  002b0	76 12		 jbe	 SHORT $LN25@animate_co
  002b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_movement_rate_pitch@@3MA
  002ba	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR tv161[ebp], xmm0
  002c2	eb 18		 jmp	 SHORT $LN26@animate_co
$LN25@animate_co:
  002c4	8b 55 ec	 mov	 edx, DWORD PTR _helmet_inst$[ebp]
  002c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_pitch@@3MA
  002cf	f3 0f 5c 42 1c	 subss	 xmm0, DWORD PTR [edx+28]
  002d4	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR tv161[ebp], xmm0
$LN26@animate_co:
  002dc	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR tv161[ebp]
  002e4	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR tv162[ebp], xmm0
$LN28@animate_co:
  002ec	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR tv162[ebp]
  002f4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  002fc	f3 0f 11 45 f4	 movss	 DWORD PTR _delta$[ebp], xmm0

; 271  : 	helmet_inst->relative_pitch = bound(helmet_inst->relative_pitch + delta, MIN_PITCH, MAX_PITCH);

  00301	8b 45 ec	 mov	 eax, DWORD PTR _helmet_inst$[ebp]
  00304	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00309	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _delta$[ebp]
  0030e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00312	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfe921fb51000000
  0031a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0031e	76 12		 jbe	 SHORT $LN31@animate_co
  00320	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfe921fb51000000
  00328	f2 0f 11 85 6c
	ff ff ff	 movsd	 QWORD PTR tv177[ebp], xmm0
  00330	eb 56		 jmp	 SHORT $LN32@animate_co
$LN31@animate_co:
  00332	8b 4d ec	 mov	 ecx, DWORD PTR _helmet_inst$[ebp]
  00335	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  0033a	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _delta$[ebp]
  0033f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00343	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd6571848000000
  0034b	76 12		 jbe	 SHORT $LN29@animate_co
  0034d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fd6571848000000
  00355	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv176[ebp], xmm0
  0035d	eb 19		 jmp	 SHORT $LN30@animate_co
$LN29@animate_co:
  0035f	8b 55 ec	 mov	 edx, DWORD PTR _helmet_inst$[ebp]
  00362	f3 0f 10 42 1c	 movss	 xmm0, DWORD PTR [edx+28]
  00367	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _delta$[ebp]
  0036c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00370	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv176[ebp], xmm0
$LN30@animate_co:
  00378	f2 0f 10 85 64
	ff ff ff	 movsd	 xmm0, QWORD PTR tv176[ebp]
  00380	f2 0f 11 85 6c
	ff ff ff	 movsd	 QWORD PTR tv177[ebp], xmm0
$LN32@animate_co:
  00388	f2 0f 5a 85 6c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv177[ebp]
  00390	8b 45 ec	 mov	 eax, DWORD PTR _helmet_inst$[ebp]
  00393	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 272  : 
; 273  : 	// update torso bending
; 274  : 	diff = requested_bend - torso_inst->relative_pitch;

  00398	8b 45 f0	 mov	 eax, DWORD PTR _torso_inst$[ebp]
  0039b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?requested_bend@@3MA
  003a3	f3 0f 5c 40 1c	 subss	 xmm0, DWORD PTR [eax+28]
  003a8	f3 0f 11 45 fc	 movss	 DWORD PTR _diff$[ebp], xmm0

; 275  : 	if (diff < 0.0)

  003ad	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _diff$[ebp]
  003b2	0f 57 c9	 xorps	 xmm1, xmm1
  003b5	66 0f 2f c8	 comisd	 xmm1, xmm0
  003b9	76 18		 jbe	 SHORT $LN10@animate_co

; 276  : 		delta = -MAX_BENDING_RATE * dt;

  003bb	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _dt$[ebp]
  003c0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfebecde5a000000
  003c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003cc	f3 0f 11 45 f4	 movss	 DWORD PTR _delta$[ebp], xmm0
  003d1	eb 2f		 jmp	 SHORT $LN13@animate_co
$LN10@animate_co:

; 277  : 	else if (diff > 0.0)

  003d3	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _diff$[ebp]
  003d8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  003e0	76 18		 jbe	 SHORT $LN12@animate_co

; 278  : 		delta = MAX_BENDING_RATE * dt;

  003e2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _dt$[ebp]
  003e7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3febecde5a000000
  003ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f3	f3 0f 11 45 f4	 movss	 DWORD PTR _delta$[ebp], xmm0

; 279  : 	else

  003f8	eb 08		 jmp	 SHORT $LN13@animate_co
$LN12@animate_co:

; 280  : 		delta = 0.0;

  003fa	0f 57 c0	 xorps	 xmm0, xmm0
  003fd	f3 0f 11 45 f4	 movss	 DWORD PTR _delta$[ebp], xmm0
$LN13@animate_co:

; 281  : 	torso_inst->relative_pitch = bound(torso_inst->relative_pitch + delta, 0.0, MAX_BEND);

  00402	8b 45 f0	 mov	 eax, DWORD PTR _torso_inst$[ebp]
  00405	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  0040a	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _delta$[ebp]
  0040f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00413	0f 57 c9	 xorps	 xmm1, xmm1
  00416	66 0f 2f c8	 comisd	 xmm1, xmm0
  0041a	76 0d		 jbe	 SHORT $LN35@animate_co
  0041c	0f 57 c0	 xorps	 xmm0, xmm0
  0041f	f2 0f 11 85 6c
	ff ff ff	 movsd	 QWORD PTR tv204[ebp], xmm0
  00427	eb 56		 jmp	 SHORT $LN36@animate_co
$LN35@animate_co:
  00429	8b 4d f0	 mov	 ecx, DWORD PTR _torso_inst$[ebp]
  0042c	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  00431	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _delta$[ebp]
  00436	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0043a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe0c15236000000
  00442	76 12		 jbe	 SHORT $LN33@animate_co
  00444	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0c15236000000
  0044c	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv203[ebp], xmm0
  00454	eb 19		 jmp	 SHORT $LN34@animate_co
$LN33@animate_co:
  00456	8b 55 f0	 mov	 edx, DWORD PTR _torso_inst$[ebp]
  00459	f3 0f 10 42 1c	 movss	 xmm0, DWORD PTR [edx+28]
  0045e	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _delta$[ebp]
  00463	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00467	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv203[ebp], xmm0
$LN34@animate_co:
  0046f	f2 0f 10 85 64
	ff ff ff	 movsd	 xmm0, QWORD PTR tv203[ebp]
  00477	f2 0f 11 85 6c
	ff ff ff	 movsd	 QWORD PTR tv204[ebp], xmm0
$LN36@animate_co:
  0047f	f2 0f 5a 85 6c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv204[ebp]
  00487	8b 45 f0	 mov	 eax, DWORD PTR _torso_inst$[ebp]
  0048a	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 282  : 
; 283  : 	time_until_state_change -= get_delta_time();

  0048f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?time_until_state_change@@3MA
  00497	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0049f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?time_until_state_change@@3MA, xmm0
$LN1@animate_co:

; 284  : }

  004a7	5f		 pop	 edi
  004a8	5e		 pop	 esi
  004a9	5b		 pop	 ebx
  004aa	8b e5		 mov	 esp, ebp
  004ac	5d		 pop	 ebp
  004ad	c2 04 00	 ret	 4
?animate_co_pilot_head@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP ; animate_co_pilot_head
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\apache\ap_cpg.c
;	COMDAT ?initialise_co_pilot_head_animations@@YGXXZ
_TEXT	SEGMENT
?initialise_co_pilot_head_animations@@YGXXZ PROC	; initialise_co_pilot_head_animations, COMDAT

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 292  : 	looking_state = CPG_ANIM_STATE_REST;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?looking_state@@3W4head_looking_states@@A, 0

; 293  : 
; 294  : 	time_until_state_change = 0.0;

  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?time_until_state_change@@3MA, xmm0

; 295  : 
; 296  : 	current_movement_rate_heading = 0.0;

  0001e	0f 57 c0	 xorps	 xmm0, xmm0
  00021	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_movement_rate_heading@@3MA, xmm0

; 297  : 	current_movement_rate_pitch = 0.0;

  00029	0f 57 c0	 xorps	 xmm0, xmm0
  0002c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_movement_rate_pitch@@3MA, xmm0

; 298  : 
; 299  : 	requested_heading = 0.0;

  00034	0f 57 c0	 xorps	 xmm0, xmm0
  00037	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_heading@@3MA, xmm0

; 300  : 	requested_pitch = 5.0;

  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00047	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_pitch@@3MA, xmm0

; 301  : 	requested_bend = 0.0;

  0004f	0f 57 c0	 xorps	 xmm0, xmm0
  00052	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?requested_bend@@3MA, xmm0

; 302  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?initialise_co_pilot_head_animations@@YGXXZ ENDP	; initialise_co_pilot_head_animations
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
