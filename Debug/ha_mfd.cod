; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_atan2f
PUBLIC	_fmodf
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?initialise_havoc_mfd@@YGXXZ			; initialise_havoc_mfd
PUBLIC	?deinitialise_havoc_mfd@@YGXXZ			; deinitialise_havoc_mfd
PUBLIC	?select_havoc_mfd_mode@@YGXW4MFD_MODES@@@Z	; select_havoc_mfd_mode
PUBLIC	?select_next_havoc_mfd_mode@@YGXXZ		; select_next_havoc_mfd_mode
PUBLIC	?get_havoc_mfd_mode@@YG?AW4MFD_MODES@@XZ	; get_havoc_mfd_mode
PUBLIC	?draw_havoc_mfd_on_cockpit@@YGXMMHH@Z		; draw_havoc_mfd_on_cockpit
PUBLIC	?draw_havoc_mfd_on_texture@@YGXXZ		; draw_havoc_mfd_on_texture
PUBLIC	?draw_overlaid_havoc_mfd@@YGXMMM@Z		; draw_overlaid_havoc_mfd
PUBLIC	?get_havoc_eo_display_visible@@YGHXZ		; get_havoc_eo_display_visible
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_06NBEADFGO@?$CF?40fKm@			; `string'
PUBLIC	??_C@_03MAMPKPPK@XXX@				; `string'
PUBLIC	?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA ; `display_radar_target_details'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_05EMNNHGFM@radar@				; `string'
PUBLIC	??_C@_03NGNKAJPJ@?$CFdm@			; `string'
PUBLIC	??_C@_06OMCABMNO@?$CF?41fKm@			; `string'
PUBLIC	??_C@_06HCPKJKPH@NO?5LOS@			; `string'
PUBLIC	??_C@_04LMMJFDCN@AUTO@				; `string'
PUBLIC	??_C@_06KODELPLK@LOCKED@			; `string'
PUBLIC	??_C@_06GPMJGLEM@MARKED@			; `string'
PUBLIC	?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA ; `draw_radar_target_symbol'::`1'::__LINE__Var
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BA@IIPCKJML@source_position@		; `string'
PUBLIC	??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ ; `string'
PUBLIC	??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_heading_scale@@YGXXZ@4JA ; `draw_ground_radar_heading_scale'::`1'::__LINE__Var
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_03MDIFNIHN@360@				; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA ; `draw_ground_radar_clutter'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA ; `draw_ground_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03NIFPGLBG@ALL@				; `string'
PUBLIC	??_C@_03IBEFMGAI@LOW@				; `string'
PUBLIC	??_C@_06HMBFJLMK@MEDIUM@			; `string'
PUBLIC	??_C@_03FFIBGFCJ@MED@				; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH@				; `string'
PUBLIC	??_C@_04MGKDMHFC@MARK@				; `string'
PUBLIC	?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA	; `draw_air_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_05EJJKHDCK@ENEMY@				; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_3d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_02KMMHFIEO@eo@				; `string'
PUBLIC	??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ ; `string'
PUBLIC	??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ ; `string'
PUBLIC	??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_3d_eo_display_on_texture'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@MDEHLDP@eo_3d_texture_screen@		; `string'
PUBLIC	??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@	; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA ; `draw_overlaid_3d_eo_display'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA ; `draw_2d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_04MIGKMLBH@FLIR@				; `string'
PUBLIC	??_C@_05PNDCLKDI@LLLTV@				; `string'
PUBLIC	??_C@_09ICGCKLLB@LOW?5LIGHT@			; `string'
PUBLIC	??_C@_06BPEIKNIA@NARROW@			; `string'
PUBLIC	??_C@_03FMKFNHMM@NAR@				; `string'
PUBLIC	??_C@_04KPGPJCNC@WIDE@				; `string'
PUBLIC	??_C@_01CPLAODJH@S@				; `string'
PUBLIC	?__LINE__Var@?0??draw_havoc_mfd_on_texture@@YGXXZ@4JA ; `draw_havoc_mfd_on_texture'::`1'::__LINE__Var
PUBLIC	??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c000000
PUBLIC	__real@3d0f5c29
PUBLIC	__real@3d23d70a
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db2b8c2
PUBLIC	__real@3db851ec
PUBLIC	__real@3e000000
PUBLIC	__real@3e2786c2
PUBLIC	__real@3e35c28f
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e59999a
PUBLIC	__real@3e7b645a
PUBLIC	__real@3e8f5c29
PUBLIC	__real@3e99999a
PUBLIC	__real@3eb504f3
PUBLIC	__real@3ed9999a
PUBLIC	__real@3effbe77
PUBLIC	__real@3f000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f233333
PUBLIC	__real@3f30cccd
PUBLIC	__real@3f3504f3
PUBLIC	__real@3f451eb8
PUBLIC	__real@3f47ae14
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4c0000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f4f5c29
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f51eb85
PUBLIC	__real@3f547ae1
PUBLIC	__real@3f566666
PUBLIC	__real@3f5999999999999a
PUBLIC	__real@3f59999a
PUBLIC	__real@3f61111111111111
PUBLIC	__real@3f666666
PUBLIC	__real@3f68f5c3
PUBLIC	__real@3f6b851f
PUBLIC	__real@3f6e147b
PUBLIC	__real@3f7fbe77
PUBLIC	__real@3f800000
PUBLIC	__real@3f87c3b6
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fb504f3
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe7886594af4f0e
PUBLIC	__real@3fe8c154c985f06f
PUBLIC	__real@3fea2633554ccccd
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c09b332ccccd
PUBLIC	__real@40000000
PUBLIC	__real@401921fb51000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4026eb1686b280e6
PUBLIC	__real@4031000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@403f000000000000
PUBLIC	__real@4053800000000000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@4060800000000000
PUBLIC	__real@4066000000000000
PUBLIC	__real@40845f306446f9b4
PUBLIC	__real@408f400000000000
PUBLIC	__real@409f400000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41000000
PUBLIC	__real@41200000
PUBLIC	__real@41600000
PUBLIC	__real@42480000
PUBLIC	__real@42652ee0
PUBLIC	__real@42e40000
PUBLIC	__real@43040000
PUBLIC	__real@43300000
PUBLIC	__real@43520000
PUBLIC	__real@43b70000
PUBLIC	__real@43f40000
PUBLIC	__real@447a0000
PUBLIC	__real@bccccccd
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bd99999a
PUBLIC	__real@bdcccccd
PUBLIC	__real@be000000
PUBLIC	__real@be19999a
PUBLIC	__real@be2786c2
PUBLIC	__real@be333333
PUBLIC	__real@be35c28f
PUBLIC	__real@be4ccccd
PUBLIC	__real@be666666
PUBLIC	__real@be7b645a
PUBLIC	__real@be800000
PUBLIC	__real@be8ccccd
PUBLIC	__real@be8f5c29
PUBLIC	__real@be99999a
PUBLIC	__real@becccccd
PUBLIC	__real@bf000000
PUBLIC	__real@bf19999a
PUBLIC	__real@bf266666
PUBLIC	__real@bf30cccd
PUBLIC	__real@bf333333
PUBLIC	__real@bf38f5c3
PUBLIC	__real@bf3c432d
PUBLIC	__real@bf400000
PUBLIC	__real@bf451eb8
PUBLIC	__real@bf460aa6
PUBLIC	__real@bf4c0000
PUBLIC	__real@bf538ef3
PUBLIC	__real@bf53d70a
PUBLIC	__real@bf583127
PUBLIC	__real@bf58adac
PUBLIC	__real@bf5eb852
PUBLIC	__real@bf6147ae
PUBLIC	__real@bf63d70a
PUBLIC	__real@bf666666
PUBLIC	__real@bf68f5c3
PUBLIC	__real@bf6b851f
PUBLIC	__real@bf6e147b
PUBLIC	__real@bf800000
PUBLIC	__real@bfb29c779a6b50b1
PUBLIC	__real@bfbbedfa43fe5c92
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bfe3333333333333
PUBLIC	__real@c0400000
PUBLIC	__real@c0800000
PUBLIC	__real@c0c00000
PUBLIC	__real@c1000000
PUBLIC	__real@c1300000
PUBLIC	__real@c1400000
PUBLIC	__real@c1980000
PUBLIC	__real@c1a80000
PUBLIC	__real@c1c80000
PUBLIC	__real@c2180000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan2:PROC
EXTRN	_fmod:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?get_approx_2d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_approx_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z:PROC ; create_screen_for_system_texture
EXTRN	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z:PROC ; set_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_3d_render_target@@YGHPAUSCREEN@@@Z:PROC	; set_3d_render_target
EXTRN	?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z:PROC ; finalise_3d_render_target_texture
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?set_hatched_pattern@@YGXPAI@Z:PROC		; set_hatched_pattern
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_mono_sprite
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_viewport_origin
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?get_2d_world_position@@YGXMMPAM0@Z:PROC	; get_2d_world_position
EXTRN	?get_2d_float_screen_coordinates@@YGXMMPAM0@Z:PROC ; get_2d_float_screen_coordinates
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_hatched_circle
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z:PROC ; get_position_3d_screen_coordinates
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z:PROC ; get_simple_session_weather_at_point
EXTRN	?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z:PROC ; set_main_3d_params
EXTRN	?set_pilots_full_screen_params@@YGXH@Z:PROC	; set_pilots_full_screen_params
EXTRN	?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z:PROC	; draw_main_3d_scene
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_range_finder@@YG?AW4rangefinding_system@@XZ:PROC ; get_range_finder
EXTRN	?get_range_to_target@@YGMXZ:PROC		; get_range_to_target
EXTRN	?eo_is_locked@@YGHXZ:PROC			; eo_is_locked
EXTRN	?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_ground_radar
EXTRN	?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z:PROC ; get_target_matches_ground_radar_declutter_criteria
EXTRN	?ground_radar_is_active@@YGHXZ:PROC		; ground_radar_is_active
EXTRN	?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_air_radar
EXTRN	?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z:PROC ; get_target_matches_air_radar_declutter_criteria
EXTRN	?air_radar_is_active@@YGHXZ:PROC		; air_radar_is_active
EXTRN	?copy_export_mfd@@YGXPAUSCREEN@@0@Z:PROC	; copy_export_mfd
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?sine_table@@3PAMA:BYTE				; sine_table
EXTRN	?d3d_can_render_to_texture@@3HA:DWORD		; d3d_can_render_to_texture
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?command_line_high_res_mfd@@3HA:DWORD		; command_line_high_res_mfd
EXTRN	?command_line_export_mfd@@3HA:DWORD		; command_line_export_mfd
EXTRN	?global_mfd_size@@3MA:DWORD			; global_mfd_size
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?draw_eo_3d_scene@@3HA:DWORD			; draw_eo_3d_scene
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?main_vp@@3UVIEWPOINT@@A:BYTE			; main_vp
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?eo_low_light@@3HA:DWORD			; eo_low_light
EXTRN	?eo_ground_stabilised@@3HA:DWORD		; eo_ground_stabilised
EXTRN	?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; eo_sensor
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_max_azimuth@@3MA:DWORD			; eo_max_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	?eo_min_elevation@@3MA:DWORD			; eo_min_elevation
EXTRN	?eo_max_elevation@@3MA:DWORD			; eo_max_elevation
EXTRN	?eo_max_visual_range@@3MA:DWORD			; eo_max_visual_range
EXTRN	?eo_vp@@3UVIEWPOINT@@A:BYTE			; eo_vp
EXTRN	?display_mfd_layout_grid@@3HA:DWORD		; display_mfd_layout_grid
EXTRN	?large_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; large_eo_3d_texture_screen
EXTRN	?small_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; small_eo_3d_texture_screen
EXTRN	?ground_radar@@3URADAR_PARAMS@@A:BYTE		; ground_radar
EXTRN	?air_radar@@3URADAR_PARAMS@@A:BYTE		; air_radar
EXTRN	?radar_clutter_hatch_pattern@@3PAIA:BYTE	; radar_clutter_hatch_pattern
EXTRN	?large_display_target_symbol_selected_target@@3QBDB:BYTE ; large_display_target_symbol_selected_target
EXTRN	?large_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; large_display_target_symbol_selected_target_mask
EXTRN	?small_display_target_symbol_selected_target@@3QBDB:BYTE ; small_display_target_symbol_selected_target
EXTRN	?small_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; small_display_target_symbol_selected_target_mask
EXTRN	?large_display_target_symbols_los@@3PAPBDA:BYTE	; large_display_target_symbols_los
EXTRN	?large_display_target_symbols_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_los_mask
EXTRN	?large_display_target_symbols_no_los@@3PAPBDA:BYTE ; large_display_target_symbols_no_los
EXTRN	?large_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_no_los_mask
EXTRN	?small_display_target_symbols_los@@3PAPBDA:BYTE	; small_display_target_symbols_los
EXTRN	?small_display_target_symbols_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_los_mask
EXTRN	?small_display_target_symbols_no_los@@3PAPBDA:BYTE ; small_display_target_symbols_no_los
EXTRN	?small_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_no_los_mask
EXTRN	?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A:DWORD	; havoc_damage
EXTRN	?havoc_flir@@3UEO_PARAMS@@A:BYTE		; havoc_flir
EXTRN	?havoc_llltv@@3UEO_PARAMS@@A:BYTE		; havoc_llltv
EXTRN	?HAVOC_RADAR_SCAN_RANGE_1000@@3MA:DWORD		; HAVOC_RADAR_SCAN_RANGE_1000
EXTRN	?HAVOC_RADAR_SCAN_RANGE_2000@@3MA:DWORD		; HAVOC_RADAR_SCAN_RANGE_2000
EXTRN	?HAVOC_RADAR_SCAN_RANGE_4000@@3MA:DWORD		; HAVOC_RADAR_SCAN_RANGE_4000
EXTRN	?HAVOC_RADAR_SCAN_RANGE_6000@@3MA:DWORD		; HAVOC_RADAR_SCAN_RANGE_6000
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?mfd_mode@@3W4MFD_MODES@@A DD 01H DUP (?)		; mfd_mode
?mfd_colours@@3PAUREAL_COLOUR@@A DD 06H DUP (?)		; mfd_colours
?mfd_env@@3PAUENV_2D@@A DD 01H DUP (?)			; mfd_env
?mfd_viewport_size@@3MA DD 01H DUP (?)			; mfd_viewport_size
?mfd_viewport_x_org@@3MA DD 01H DUP (?)			; mfd_viewport_x_org
?mfd_viewport_y_org@@3MA DD 01H DUP (?)			; mfd_viewport_y_org
?mfd_viewport_x_min@@3MA DD 01H DUP (?)			; mfd_viewport_x_min
?mfd_viewport_y_min@@3MA DD 01H DUP (?)			; mfd_viewport_y_min
?mfd_viewport_x_max@@3MA DD 01H DUP (?)			; mfd_viewport_x_max
?mfd_viewport_y_max@@3MA DD 01H DUP (?)			; mfd_viewport_y_max
?mfd_texture_size@@3HA DD 01H DUP (?)			; mfd_texture_size
?mfd_viewport_texture_x_org@@3HA DD 01H DUP (?)		; mfd_viewport_texture_x_org
?mfd_viewport_texture_y_org@@3HA DD 01H DUP (?)		; mfd_viewport_texture_y_org
?draw_large_mfd@@3HA DD 01H DUP (?)			; draw_large_mfd
?i_translate_3d@@3MA DD 01H DUP (?)			; i_translate_3d
?j_translate_3d@@3MA DD 01H DUP (?)			; j_translate_3d
?i_scale_3d@@3MA DD 01H DUP (?)				; i_scale_3d
?j_scale_3d@@3MA DD 01H DUP (?)				; j_scale_3d
?mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; mfd_texture_screen
?eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; eo_3d_texture_screen
?overlaid_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; overlaid_mfd_texture_screen
?clear_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_mfd_colour
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2180000
CONST	SEGMENT
__real@c2180000 DD 0c2180000r			; -38
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c1a80000
CONST	SEGMENT
__real@c1a80000 DD 0c1a80000r			; -21
CONST	ENDS
;	COMDAT __real@c1980000
CONST	SEGMENT
__real@c1980000 DD 0c1980000r			; -19
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1300000
CONST	SEGMENT
__real@c1300000 DD 0c1300000r			; -11
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@bfe3333333333333
CONST	SEGMENT
__real@bfe3333333333333 DQ 0bfe3333333333333r	; -0.6
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bfbbedfa43fe5c92
CONST	SEGMENT
__real@bfbbedfa43fe5c92 DQ 0bfbbedfa43fe5c92r	; -0.1091
CONST	ENDS
;	COMDAT __real@bfb29c779a6b50b1
CONST	SEGMENT
__real@bfb29c779a6b50b1 DQ 0bfb29c779a6b50b1r	; -0.0727
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf6e147b
CONST	SEGMENT
__real@bf6e147b DD 0bf6e147br			; -0.93
CONST	ENDS
;	COMDAT __real@bf6b851f
CONST	SEGMENT
__real@bf6b851f DD 0bf6b851fr			; -0.92
CONST	ENDS
;	COMDAT __real@bf68f5c3
CONST	SEGMENT
__real@bf68f5c3 DD 0bf68f5c3r			; -0.91
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf63d70a
CONST	SEGMENT
__real@bf63d70a DD 0bf63d70ar			; -0.89
CONST	ENDS
;	COMDAT __real@bf6147ae
CONST	SEGMENT
__real@bf6147ae DD 0bf6147aer			; -0.88
CONST	ENDS
;	COMDAT __real@bf5eb852
CONST	SEGMENT
__real@bf5eb852 DD 0bf5eb852r			; -0.87
CONST	ENDS
;	COMDAT __real@bf58adac
CONST	SEGMENT
__real@bf58adac DD 0bf58adacr			; -0.8464
CONST	ENDS
;	COMDAT __real@bf583127
CONST	SEGMENT
__real@bf583127 DD 0bf583127r			; -0.8445
CONST	ENDS
;	COMDAT __real@bf53d70a
CONST	SEGMENT
__real@bf53d70a DD 0bf53d70ar			; -0.8275
CONST	ENDS
;	COMDAT __real@bf538ef3
CONST	SEGMENT
__real@bf538ef3 DD 0bf538ef3r			; -0.8264
CONST	ENDS
;	COMDAT __real@bf4c0000
CONST	SEGMENT
__real@bf4c0000 DD 0bf4c0000r			; -0.796875
CONST	ENDS
;	COMDAT __real@bf460aa6
CONST	SEGMENT
__real@bf460aa6 DD 0bf460aa6r			; -0.7736
CONST	ENDS
;	COMDAT __real@bf451eb8
CONST	SEGMENT
__real@bf451eb8 DD 0bf451eb8r			; -0.77
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf3c432d
CONST	SEGMENT
__real@bf3c432d DD 0bf3c432dr			; -0.7354
CONST	ENDS
;	COMDAT __real@bf38f5c3
CONST	SEGMENT
__real@bf38f5c3 DD 0bf38f5c3r			; -0.7225
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf30cccd
CONST	SEGMENT
__real@bf30cccd DD 0bf30cccdr			; -0.690625
CONST	ENDS
;	COMDAT __real@bf266666
CONST	SEGMENT
__real@bf266666 DD 0bf266666r			; -0.65
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be8f5c29
CONST	SEGMENT
__real@be8f5c29 DD 0be8f5c29r			; -0.28
CONST	ENDS
;	COMDAT __real@be8ccccd
CONST	SEGMENT
__real@be8ccccd DD 0be8ccccdr			; -0.275
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be7b645a
CONST	SEGMENT
__real@be7b645a DD 0be7b645ar			; -0.2455
CONST	ENDS
;	COMDAT __real@be666666
CONST	SEGMENT
__real@be666666 DD 0be666666r			; -0.225
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be35c28f
CONST	SEGMENT
__real@be35c28f DD 0be35c28fr			; -0.1775
CONST	ENDS
;	COMDAT __real@be333333
CONST	SEGMENT
__real@be333333 DD 0be333333r			; -0.175
CONST	ENDS
;	COMDAT __real@be2786c2
CONST	SEGMENT
__real@be2786c2 DD 0be2786c2r			; -0.1636
CONST	ENDS
;	COMDAT __real@be19999a
CONST	SEGMENT
__real@be19999a DD 0be19999ar			; -0.15
CONST	ENDS
;	COMDAT __real@be000000
CONST	SEGMENT
__real@be000000 DD 0be000000r			; -0.125
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bccccccd
CONST	SEGMENT
__real@bccccccd DD 0bccccccdr			; -0.025
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43f40000
CONST	SEGMENT
__real@43f40000 DD 043f40000r			; 488
CONST	ENDS
;	COMDAT __real@43b70000
CONST	SEGMENT
__real@43b70000 DD 043b70000r			; 366
CONST	ENDS
;	COMDAT __real@43520000
CONST	SEGMENT
__real@43520000 DD 043520000r			; 210
CONST	ENDS
;	COMDAT __real@43300000
CONST	SEGMENT
__real@43300000 DD 043300000r			; 176
CONST	ENDS
;	COMDAT __real@43040000
CONST	SEGMENT
__real@43040000 DD 043040000r			; 132
CONST	ENDS
;	COMDAT __real@42e40000
CONST	SEGMENT
__real@42e40000 DD 042e40000r			; 114
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@409f400000000000
CONST	SEGMENT
__real@409f400000000000 DQ 0409f400000000000r	; 2000
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40845f306446f9b4
CONST	SEGMENT
__real@40845f306446f9b4 DQ 040845f306446f9b4r	; 651.899
CONST	ENDS
;	COMDAT __real@4066000000000000
CONST	SEGMENT
__real@4066000000000000 DQ 04066000000000000r	; 176
CONST	ENDS
;	COMDAT __real@4060800000000000
CONST	SEGMENT
__real@4060800000000000 DQ 04060800000000000r	; 132
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@4053800000000000
CONST	SEGMENT
__real@4053800000000000 DQ 04053800000000000r	; 78
CONST	ENDS
;	COMDAT __real@403f000000000000
CONST	SEGMENT
__real@403f000000000000 DQ 0403f000000000000r	; 31
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@4031000000000000
CONST	SEGMENT
__real@4031000000000000 DQ 04031000000000000r	; 17
CONST	ENDS
;	COMDAT __real@4026eb1686b280e6
CONST	SEGMENT
__real@4026eb1686b280e6 DQ 04026eb1686b280e6r	; 11.4592
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@401921fb51000000
CONST	SEGMENT
__real@401921fb51000000 DQ 0401921fb51000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0c09b332ccccd
CONST	SEGMENT
__real@3ff0c09b332ccccd DQ 03ff0c09b332ccccdr	; 1.04702
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fea2633554ccccd
CONST	SEGMENT
__real@3fea2633554ccccd DQ 03fea2633554ccccdr	; 0.817163
CONST	ENDS
;	COMDAT __real@3fe8c154c985f06f
CONST	SEGMENT
__real@3fe8c154c985f06f DQ 03fe8c154c985f06fr	; 0.7736
CONST	ENDS
;	COMDAT __real@3fe7886594af4f0e
CONST	SEGMENT
__real@3fe7886594af4f0e DQ 03fe7886594af4f0er	; 0.7354
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb504f3
CONST	SEGMENT
__real@3fb504f3 DD 03fb504f3r			; 1.41421
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f87c3b6
CONST	SEGMENT
__real@3f87c3b6 DD 03f87c3b6r			; 1.06066
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fbe77
CONST	SEGMENT
__real@3f7fbe77 DD 03f7fbe77r			; 0.999
CONST	ENDS
;	COMDAT __real@3f6e147b
CONST	SEGMENT
__real@3f6e147b DD 03f6e147br			; 0.93
CONST	ENDS
;	COMDAT __real@3f6b851f
CONST	SEGMENT
__real@3f6b851f DD 03f6b851fr			; 0.92
CONST	ENDS
;	COMDAT __real@3f68f5c3
CONST	SEGMENT
__real@3f68f5c3 DD 03f68f5c3r			; 0.91
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f61111111111111
CONST	SEGMENT
__real@3f61111111111111 DQ 03f61111111111111r	; 0.00208333
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f5999999999999a
CONST	SEGMENT
__real@3f5999999999999a DQ 03f5999999999999ar	; 0.0015625
CONST	ENDS
;	COMDAT __real@3f566666
CONST	SEGMENT
__real@3f566666 DD 03f566666r			; 0.8375
CONST	ENDS
;	COMDAT __real@3f547ae1
CONST	SEGMENT
__real@3f547ae1 DD 03f547ae1r			; 0.83
CONST	ENDS
;	COMDAT __real@3f51eb85
CONST	SEGMENT
__real@3f51eb85 DD 03f51eb85r			; 0.82
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f4f5c29
CONST	SEGMENT
__real@3f4f5c29 DD 03f4f5c29r			; 0.81
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4c0000
CONST	SEGMENT
__real@3f4c0000 DD 03f4c0000r			; 0.796875
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f47ae14
CONST	SEGMENT
__real@3f47ae14 DD 03f47ae14r			; 0.78
CONST	ENDS
;	COMDAT __real@3f451eb8
CONST	SEGMENT
__real@3f451eb8 DD 03f451eb8r			; 0.77
CONST	ENDS
;	COMDAT __real@3f3504f3
CONST	SEGMENT
__real@3f3504f3 DD 03f3504f3r			; 0.707107
CONST	ENDS
;	COMDAT __real@3f30cccd
CONST	SEGMENT
__real@3f30cccd DD 03f30cccdr			; 0.690625
CONST	ENDS
;	COMDAT __real@3f233333
CONST	SEGMENT
__real@3f233333 DD 03f233333r			; 0.6375
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3effbe77
CONST	SEGMENT
__real@3effbe77 DD 03effbe77r			; 0.4995
CONST	ENDS
;	COMDAT __real@3ed9999a
CONST	SEGMENT
__real@3ed9999a DD 03ed9999ar			; 0.425
CONST	ENDS
;	COMDAT __real@3eb504f3
CONST	SEGMENT
__real@3eb504f3 DD 03eb504f3r			; 0.353553
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e8f5c29
CONST	SEGMENT
__real@3e8f5c29 DD 03e8f5c29r			; 0.28
CONST	ENDS
;	COMDAT __real@3e7b645a
CONST	SEGMENT
__real@3e7b645a DD 03e7b645ar			; 0.2455
CONST	ENDS
;	COMDAT __real@3e59999a
CONST	SEGMENT
__real@3e59999a DD 03e59999ar			; 0.2125
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e35c28f
CONST	SEGMENT
__real@3e35c28f DD 03e35c28fr			; 0.1775
CONST	ENDS
;	COMDAT __real@3e2786c2
CONST	SEGMENT
__real@3e2786c2 DD 03e2786c2r			; 0.1636
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3db2b8c2
CONST	SEGMENT
__real@3db2b8c2 DD 03db2b8c2r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3d0f5c29
CONST	SEGMENT
__real@3d0f5c29 DD 03d0f5c29r			; 0.035
CONST	ENDS
;	COMDAT __real@3c000000
CONST	SEGMENT
__real@3c000000 DD 03c000000r			; 0.0078125
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
CONST	SEGMENT
??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@ DB 'mfd_viewp'
	DB	'ort_size <= mfd_texture_size', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_havoc_mfd_on_texture@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_havoc_mfd_on_texture@@YGXXZ@4JA DD 0babH ; `draw_havoc_mfd_on_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01CPLAODJH@S@
CONST	SEGMENT
??_C@_01CPLAODJH@S@ DB 'S', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPGPJCNC@WIDE@
CONST	SEGMENT
??_C@_04KPGPJCNC@WIDE@ DB 'WIDE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FMKFNHMM@NAR@
CONST	SEGMENT
??_C@_03FMKFNHMM@NAR@ DB 'NAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPEIKNIA@NARROW@
CONST	SEGMENT
??_C@_06BPEIKNIA@NARROW@ DB 'NARROW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09ICGCKLLB@LOW?5LIGHT@
CONST	SEGMENT
??_C@_09ICGCKLLB@LOW?5LIGHT@ DB 'LOW LIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PNDCLKDI@LLLTV@
CONST	SEGMENT
??_C@_05PNDCLKDI@LLLTV@ DB 'LLLTV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIGKMLBH@FLIR@
CONST	SEGMENT
??_C@_04MIGKMLBH@FLIR@ DB 'FLIR', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA DD 0864H ; `draw_2d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA DD 07a9H ; `draw_overlaid_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@
CONST	SEGMENT
??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@ DB 'd3d_can_render_to_textu'
	DB	're', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
CONST	SEGMENT
??_C@_0BF@MDEHLDP@eo_3d_texture_screen@ DB 'eo_3d_texture_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 0731H ; `draw_3d_eo_display_on_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
CONST	SEGMENT
??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ DB 'Invalid target'
	DB	' acquisition system = %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
CONST	SEGMENT
??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ DB '('
	DB	'day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT'
	DB	'_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
CONST	SEGMENT
??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ DB '(weather_'
	DB	'mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LA'
	DB	'ST)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@ DB 'Invalid fie'
	DB	'ld of view = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMMHFIEO@eo@
CONST	SEGMENT
??_C@_02KMMHFIEO@eo@ DB 'eo', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 06c7H ; `draw_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05EJJKHDCK@ENEMY@
CONST	SEGMENT
??_C@_05EJJKHDCK@ENEMY@ DB 'ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA DD 054eH	; `draw_air_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04MGKDMHFC@MARK@
CONST	SEGMENT
??_C@_04MGKDMHFC@MARK@ DB 'MARK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH@ DB 'HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFIBGFCJ@MED@
CONST	SEGMENT
??_C@_03FFIBGFCJ@MED@ DB 'MED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMBFJLMK@MEDIUM@
CONST	SEGMENT
??_C@_06HMBFJLMK@MEDIUM@ DB 'MEDIUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NIFPGLBG@ALL@
CONST	SEGMENT
??_C@_03NIFPGLBG@ALL@ DB 'ALL', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA DD 0408H ; `draw_ground_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
CONST	SEGMENT
??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ DB 'get_local'
	DB	'_entity_type (target) == ENTITY_TYPE_CITY', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA DD 03daH ; `draw_ground_radar_clutter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03MDIFNIHN@360@
CONST	SEGMENT
??_C@_03MDIFNIHN@360@ DB '360', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_heading_scale@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_heading_scale@@YGXXZ@4JA DD 033dH ; `draw_ground_radar_heading_scale'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?large_ground_radar_heading_scale_datum@@3PADA DB 05H	; large_ground_radar_heading_scale_datum
	DB	06H
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+2
?small_ground_radar_heading_scale_datum@@3PADA DB 05H	; small_ground_radar_heading_scale_datum
	DB	03H
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; flir_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; flir_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
?llltv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; llltv_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?llltv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; llltv_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
?large_azimuth_marker@@3PADA DB 05H			; large_azimuth_marker
	DB	0cH
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?small_azimuth_marker@@3PADA DB 03H			; small_azimuth_marker
	DB	08H
	DB	0ffH
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+4
?large_elevation_marker@@3PADA DB 0cH			; large_elevation_marker
	DB	05H
	DB	01H
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?small_elevation_marker@@3PADA DB 08H			; small_elevation_marker
	DB	03H
	DB	01H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+4
?large_range_marker@@3PADA DB 0cH			; large_range_marker
	DB	05H
	DB	0f4H
	DB	0feH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?small_range_marker@@3PADA DB 08H			; small_range_marker
	DB	03H
	DB	0f8H
	DB	0ffH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
;	COMDAT ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
CONST	SEGMENT
??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ DB '('
	DB	'target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_'
	DB	'SYMBOL_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
CONST	SEGMENT
??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ DB '!get_local'
	DB	'_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIPCKJML@source_position@
CONST	SEGMENT
??_C@_0BA@IIPCKJML@source_position@ DB 'source_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA DD 02b5H ; `draw_radar_target_symbol'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06GPMJGLEM@MARKED@
CONST	SEGMENT
??_C@_06GPMJGLEM@MARKED@ DB 'MARKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KODELPLK@LOCKED@
CONST	SEGMENT
??_C@_06KODELPLK@LOCKED@ DB 'LOCKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMMJFDCN@AUTO@
CONST	SEGMENT
??_C@_04LMMJFDCN@AUTO@ DB 'AUTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCPKJKPH@NO?5LOS@
CONST	SEGMENT
??_C@_06HCPKJKPH@NO?5LOS@ DB 'NO LOS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMCABMNO@?$CF?41fKm@
CONST	SEGMENT
??_C@_06OMCABMNO@?$CF?41fKm@ DB '%.1fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGNKAJPJ@?$CFdm@
CONST	SEGMENT
??_C@_03NGNKAJPJ@?$CFdm@ DB '%dm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNNHGFM@radar@
CONST	SEGMENT
??_C@_05EMNNHGFM@radar@ DB 'radar', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_m'
	DB	'fd.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA DD 01e9H ; `display_radar_target_details'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03MAMPKPPK@XXX@
CONST	SEGMENT
??_C@_03MAMPKPPK@XXX@ DB 'XXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBEADFGO@?$CF?40fKm@
CONST	SEGMENT
??_C@_06NBEADFGO@?$CF?40fKm@ DB '%.0fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@ DB 'Invalid mfd mode '
	DB	'= %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_translucent_mfd_background@@YGXMMMM@Z
_TEXT	SEGMENT
_specular$ = -264					; size = 4
_colour$ = -260						; size = 4
_quad$ = -256						; size = 256
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?draw_translucent_mfd_background@@YGXMMMM@Z PROC	; draw_translucent_mfd_background, COMDAT

; 3205 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3206 : 	vertex
; 3207 : 		quad[4];
; 3208 : 
; 3209 : 	real_colour
; 3210 : 		colour,
; 3211 : 		specular;
; 3212 : 
; 3213 : 	set_3d_active_environment (main_3d_env);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 3214 : 
; 3215 : 	if (begin_3d_scene ())

  00017	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 5a 02 00
	00		 je	 $LN2@draw_trans

; 3216 : 	{
; 3217 : 		colour.red = 0;

  00024	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+2], 0

; 3218 : 		colour.green = 0;

  0002b	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+1], 0

; 3219 : 		colour.blue = 0;

  00032	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp], 0

; 3220 : 		colour.alpha = 64;

  00039	c6 85 ff fe ff
	ff 40		 mov	 BYTE PTR _colour$[ebp+3], 64 ; 00000040H

; 3221 : 
; 3222 : 		specular.red = 0;

  00040	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 3223 : 		specular.green = 0;

  00047	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 3224 : 		specular.blue = 0;

  0004e	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 3225 : 		specular.alpha = 255;

  00055	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 3226 : 
; 3227 : 		set_d3d_transparency_on ();

  0005c	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 3228 : 
; 3229 : 		set_d3d_zbuffer_comparison (FALSE);

  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 3230 : 
; 3231 : 		set_d3d_plain_renderstate ();

  00068	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 3232 : 
; 3233 : 		set_d3d_culling (FALSE);

  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 3234 : 
; 3235 : 		quad[0].i = x_min;

  00074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00079	6b c8 00	 imul	 ecx, eax, 0
  0007c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00081	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 3236 : 		quad[0].j = y_min;

  0008a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00097	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 3237 : 		quad[0].z = 0.5;

  000a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b0	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 3238 : 		quad[0].q = 0.5;

  000b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c9	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 3239 : 		quad[0].next_vertex = &quad[1];

  000d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000d7	c1 e0 00	 shl	 eax, 0
  000da	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000e1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e6	6b c2 00	 imul	 eax, edx, 0
  000e9	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 3240 : 
; 3241 : 		quad[1].i = x_max;

  000f0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f5	c1 e0 00	 shl	 eax, 0
  000f8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  000fd	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 3242 : 		quad[1].j = y_min;

  00106	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00113	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 3243 : 		quad[1].z = 0.5;

  0011c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00121	c1 e0 00	 shl	 eax, 0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0012c	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 3244 : 		quad[1].q = 0.5;

  00135	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013a	c1 e0 00	 shl	 eax, 0
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00145	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 3245 : 		quad[1].next_vertex = &quad[2];

  0014e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00153	d1 e0		 shl	 eax, 1
  00155	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  0015c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00161	c1 e2 00	 shl	 edx, 0
  00164	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 3246 : 
; 3247 : 		quad[2].i = x_max;

  0016b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00170	d1 e0		 shl	 eax, 1
  00172	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00177	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 3248 : 		quad[2].j = y_max;

  00180	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00185	d1 e0		 shl	 eax, 1
  00187	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0018c	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 3249 : 		quad[2].z = 0.5;

  00195	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0019a	d1 e0		 shl	 eax, 1
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001a4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 3250 : 		quad[2].q = 0.5;

  001ad	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b2	d1 e0		 shl	 eax, 1
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001bc	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 3251 : 		quad[2].next_vertex = &quad[3];

  001c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ca	6b c8 03	 imul	 ecx, eax, 3
  001cd	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  001d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d9	d1 e0		 shl	 eax, 1
  001db	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 3252 : 
; 3253 : 		quad[3].i = x_min;

  001e2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e7	6b c8 03	 imul	 ecx, eax, 3
  001ea	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001ef	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 3254 : 		quad[3].j = y_max;

  001f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001fd	6b c8 03	 imul	 ecx, eax, 3
  00200	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00205	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 3255 : 		quad[3].z = 0.5;

  0020e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00213	6b c8 03	 imul	 ecx, eax, 3
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0021e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 3256 : 		quad[3].q = 0.5;

  00227	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022c	6b c8 03	 imul	 ecx, eax, 3
  0022f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00237	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 3257 : 		quad[3].next_vertex = NULL;

  00240	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00245	6b c8 03	 imul	 ecx, eax, 3
  00248	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 3258 : 
; 3259 : 		draw_wbuffered_plain_polygon (quad, colour, specular);

  00253	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00259	50		 push	 eax
  0025a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00260	51		 push	 ecx
  00261	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 3260 : 
; 3261 : 		set_d3d_transparency_off ();

  0026d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 3262 : 
; 3263 : 		set_d3d_zbuffer_comparison (TRUE);

  00272	6a 01		 push	 1
  00274	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 3264 : 
; 3265 : 		end_3d_scene ();

  00279	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN2@draw_trans:

; 3266 : 	}
; 3267 : }

  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
  00280	5b		 pop	 ebx
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 10 00	 ret	 16			; 00000010H
?draw_translucent_mfd_background@@YGXMMMM@Z ENDP	; draw_translucent_mfd_background
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_2d_llltv_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_llltv_mfd@@YGXHH@Z PROC			; draw_2d_llltv_mfd, COMDAT

; 2704 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2705 : 	draw_2d_eo_display (&havoc_llltv, TARGET_ACQUISITION_SYSTEM_LLLTV, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	6a 06		 push	 6
  00013	68 00 00 00 00	 push	 OFFSET ?havoc_llltv@@3UEO_PARAMS@@A ; havoc_llltv
  00018	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 2706 : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?draw_2d_llltv_mfd@@YGXHH@Z ENDP			; draw_2d_llltv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_3d_llltv_mfd@@YGXXZ
_TEXT	SEGMENT
?draw_3d_llltv_mfd@@YGXXZ PROC				; draw_3d_llltv_mfd, COMDAT

; 2695 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2696 : 	draw_3d_eo_display (&havoc_llltv, TARGET_ACQUISITION_SYSTEM_LLLTV);

  00009	6a 06		 push	 6
  0000b	68 00 00 00 00	 push	 OFFSET ?havoc_llltv@@3UEO_PARAMS@@A ; havoc_llltv
  00010	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display

; 2697 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?draw_3d_llltv_mfd@@YGXXZ ENDP				; draw_3d_llltv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_2d_flir_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_flir_mfd@@YGXHH@Z PROC				; draw_2d_flir_mfd, COMDAT

; 2680 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2681 : 	draw_2d_eo_display (&havoc_flir, TARGET_ACQUISITION_SYSTEM_FLIR, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	6a 03		 push	 3
  00013	68 00 00 00 00	 push	 OFFSET ?havoc_flir@@3UEO_PARAMS@@A ; havoc_flir
  00018	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 2682 : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?draw_2d_flir_mfd@@YGXHH@Z ENDP				; draw_2d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_3d_flir_mfd@@YGXXZ
_TEXT	SEGMENT
?draw_3d_flir_mfd@@YGXXZ PROC				; draw_3d_flir_mfd, COMDAT

; 2671 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2672 : 	draw_3d_eo_display (&havoc_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00009	6a 03		 push	 3
  0000b	68 00 00 00 00	 push	 OFFSET ?havoc_flir@@3UEO_PARAMS@@A ; havoc_flir
  00010	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display

; 2673 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?draw_3d_flir_mfd@@YGXXZ ENDP				; draw_3d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z
_TEXT	SEGMENT
tv299 = -400						; size = 4
tv161 = -400						; size = 4
tv136 = -400						; size = 4
tv84 = -400						; size = 4
tv292 = -396						; size = 4
tv229 = -396						; size = 4
tv212 = -396						; size = 4
tv153 = -396						; size = 4
tv144 = -396						; size = 4
tv128 = -396						; size = 4
tv76 = -396						; size = 4
_visibility$ = -328					; size = 4
_tmp$ = -324						; size = 48
_target_point$ = -276					; size = 12
_target_position$ = -264				; size = 4
_source_position$ = -260				; size = 4
_target$ = -256						; size = 4
_source$ = -252						; size = 4
_y$ = -248						; size = 4
_x$ = -244						; size = 4
_j$ = -240						; size = 4
_i$ = -236						; size = 4
_y_adjust$ = -232					; size = 4
_target_range$ = -228					; size = 4
_marker_position$ = -224				; size = 4
_heading$ = -220					; size = 4
_width$ = -216						; size = 4
_has_range$ = -212					; size = 4
_heading_readout$ = -208				; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_valid_3d$ = 16						; size = 4
_scaled_3d$ = 20					; size = 4
?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z PROC ; draw_2d_eo_display, COMDAT

; 2148 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2149 : 	const char
; 2150 : 		*s;
; 2151 : 	char
; 2152 : 		buffer[200];
; 2153 : 
; 2154 : 	int
; 2155 : 		heading_readout,
; 2156 : 		has_range;
; 2157 : 
; 2158 : 	float
; 2159 : 		width,
; 2160 : 		heading,
; 2161 : 		marker_position,
; 2162 : 		target_range = get_range_to_target(),

  0000c	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  00011	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _target_range$[ebp]

; 2163 : 		y_adjust,
; 2164 : 		i,
; 2165 : 		j,
; 2166 : 		x,
; 2167 : 		y;
; 2168 : 
; 2169 : 	entity
; 2170 : 		*source,
; 2171 : 		*target;
; 2172 : 
; 2173 : 	vec3d
; 2174 : 		*source_position,
; 2175 : 		*target_position,
; 2176 : 		target_point;
; 2177 : 
; 2178 : 	viewpoint
; 2179 : 		tmp;
; 2180 : 
; 2181 : 	object_3d_visibility
; 2182 : 		visibility;
; 2183 : 
; 2184 : 	ASSERT (eo);

  00017	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0001b	75 18		 jne	 SHORT $LN6@draw_2d_eo
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00022	83 c0 24	 add	 eax, 36			; 00000024H
  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00030	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_2d_eo:

; 2185 : 
; 2186 : 	source = get_gunship_entity ();

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0003a	89 85 04 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 2187 : 
; 2188 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00040	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00047	74 10		 je	 SHORT $LN60@draw_2d_eo
  00049	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv76[ebp], ecx
  00057	eb 24		 jmp	 SHORT $LN61@draw_2d_eo
$LN60@draw_2d_eo:
  00059	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0005f	83 c2 28	 add	 edx, 40			; 00000028H
  00062	52		 push	 edx
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00073	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv76[ebp], 0
$LN61@draw_2d_eo:
  0007d	b9 01 00 00 00	 mov	 ecx, 1
  00082	85 c9		 test	 ecx, ecx
  00084	74 0c		 je	 SHORT $LN62@draw_2d_eo
  00086	c7 85 70 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv84[ebp], 8
  00090	eb 24		 jmp	 SHORT $LN63@draw_2d_eo
$LN62@draw_2d_eo:
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00098	83 c2 28	 add	 edx, 40			; 00000028H
  0009b	52		 push	 edx
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ac	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN63@draw_2d_eo:
  000b6	6a 08		 push	 8
  000b8	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  000be	51		 push	 ecx
  000bf	6b 95 74 fe ff
	ff 60		 imul	 edx, DWORD PTR tv76[ebp], 96
  000c6	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv84[ebp]
  000cc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000d3	ff d1		 call	 ecx
  000d5	89 85 fc fe ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 2189 : 
; 2190 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  000db	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000e2	74 10		 je	 SHORT $LN64@draw_2d_eo
  000e4	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ec	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv128[ebp], ecx
  000f2	eb 24		 jmp	 SHORT $LN65@draw_2d_eo
$LN64@draw_2d_eo:
  000f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  000fa	83 c2 2a	 add	 edx, 42			; 0000002aH
  000fd	52		 push	 edx
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010e	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN65@draw_2d_eo:
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	85 c9		 test	 ecx, ecx
  0011f	74 0c		 je	 SHORT $LN66@draw_2d_eo
  00121	c7 85 70 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv136[ebp], 38 ; 00000026H
  0012b	eb 24		 jmp	 SHORT $LN67@draw_2d_eo
$LN66@draw_2d_eo:
  0012d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00133	83 c2 2a	 add	 edx, 42			; 0000002aH
  00136	52		 push	 edx
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00147	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv136[ebp], 0
$LN67@draw_2d_eo:
  00151	6a 26		 push	 38			; 00000026H
  00153	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00159	51		 push	 ecx
  0015a	69 95 74 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv128[ebp], 180
  00164	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv136[ebp]
  0016a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00171	ff d1		 call	 ecx
  00173	89 85 00 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 2191 : 
; 2192 : 	has_range = get_range_finder() != RANGEFINDER_TRIANGULATION;

  00179	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  0017e	83 f8 02	 cmp	 eax, 2
  00181	74 0c		 je	 SHORT $LN68@draw_2d_eo
  00183	c7 85 74 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv144[ebp], 1
  0018d	eb 0a		 jmp	 SHORT $LN69@draw_2d_eo
$LN68@draw_2d_eo:
  0018f	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv144[ebp], 0
$LN69@draw_2d_eo:
  00199	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR tv144[ebp]
  0019f	89 85 2c ff ff
	ff		 mov	 DWORD PTR _has_range$[ebp], eax

; 2193 : 
; 2194 : 	if (target && has_range)

  001a5	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  001ac	0f 84 a8 00 00
	00		 je	 $LN7@draw_2d_eo
  001b2	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR _has_range$[ebp], 0
  001b9	0f 84 9b 00 00
	00		 je	 $LN7@draw_2d_eo

; 2195 : 		target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  001bf	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  001c6	74 10		 je	 SHORT $LN70@draw_2d_eo
  001c8	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  001ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d0	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv153[ebp], ecx
  001d6	eb 24		 jmp	 SHORT $LN71@draw_2d_eo
$LN70@draw_2d_eo:
  001d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  001de	83 c2 2f	 add	 edx, 47			; 0000002fH
  001e1	52		 push	 edx
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f2	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv153[ebp], 0
$LN71@draw_2d_eo:
  001fc	b9 01 00 00 00	 mov	 ecx, 1
  00201	85 c9		 test	 ecx, ecx
  00203	74 0c		 je	 SHORT $LN72@draw_2d_eo
  00205	c7 85 70 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv161[ebp], 8
  0020f	eb 24		 jmp	 SHORT $LN73@draw_2d_eo
$LN72@draw_2d_eo:
  00211	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00217	83 c2 2f	 add	 edx, 47			; 0000002fH
  0021a	52		 push	 edx
  0021b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00220	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0022b	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv161[ebp], 0
$LN73@draw_2d_eo:
  00235	6a 08		 push	 8
  00237	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  0023d	51		 push	 ecx
  0023e	6b 95 74 fe ff
	ff 60		 imul	 edx, DWORD PTR tv153[ebp], 96
  00245	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv161[ebp]
  0024b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00252	ff d1		 call	 ecx
  00254	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _target_position$[ebp], eax
$LN7@draw_2d_eo:

; 2196 : 
; 2197 : 	////////////////////////////////////////
; 2198 : 	//
; 2199 : 	// text
; 2200 : 	//
; 2201 : 	////////////////////////////////////////
; 2202 : 
; 2203 : 	set_mono_font_colour (MFD_COLOUR1);

  0025a	b8 04 00 00 00	 mov	 eax, 4
  0025f	6b c8 00	 imul	 ecx, eax, 0
  00262	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00268	52		 push	 edx
  00269	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2204 : 
; 2205 : 	if (draw_large_mfd)

  0026e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00275	74 09		 je	 SHORT $LN8@draw_2d_eo

; 2206 : 	{
; 2207 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00277	6a 05		 push	 5
  00279	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2208 : 	}
; 2209 : 	else

  0027e	eb 07		 jmp	 SHORT $LN9@draw_2d_eo
$LN8@draw_2d_eo:

; 2210 : 	{
; 2211 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00280	6a 01		 push	 1
  00282	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN9@draw_2d_eo:

; 2212 : 	}
; 2213 : 
; 2214 : 	//
; 2215 : 	// heading
; 2216 : 	//
; 2217 : 
; 2218 : 	heading = get_heading_from_attitude_matrix (eo_vp.attitude);

  00287	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0028c	d1 e0		 shl	 eax, 1
  0028e	b9 04 00 00 00	 mov	 ecx, 4
  00293	d1 e1		 shl	 ecx, 1
  00295	51		 push	 ecx
  00296	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  0029f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  002a9	d1 e2		 shl	 edx, 1
  002ab	b8 04 00 00 00	 mov	 eax, 4
  002b0	6b c8 00	 imul	 ecx, eax, 0
  002b3	51		 push	 ecx
  002b4	f3 0f 10 84 0a
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[edx+ecx+12]
  002bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c2	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  002c7	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _heading$[ebp]

; 2219 : 
; 2220 : 	if (heading < 0.0)

  002cd	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  002d5	0f 57 c9	 xorps	 xmm1, xmm1
  002d8	66 0f 2f c8	 comisd	 xmm1, xmm0
  002dc	76 1c		 jbe	 SHORT $LN10@draw_2d_eo

; 2221 : 	{
; 2222 : 		heading += rad (360.0);

  002de	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  002e6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  002ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _heading$[ebp], xmm0
$LN10@draw_2d_eo:

; 2223 : 	}
; 2224 : 
; 2225 : 	heading_readout = (int) deg (heading);

  002fa	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00302	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  0030a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0030e	89 85 30 ff ff
	ff		 mov	 DWORD PTR _heading_readout$[ebp], eax

; 2226 : 
; 2227 : 	if (heading_readout == 0)

  00314	83 bd 30 ff ff
	ff 00		 cmp	 DWORD PTR _heading_readout$[ebp], 0
  0031b	75 0a		 jne	 SHORT $LN11@draw_2d_eo

; 2228 : 	{
; 2229 : 		heading_readout = 360;

  0031d	c7 85 30 ff ff
	ff 68 01 00 00	 mov	 DWORD PTR _heading_readout$[ebp], 360 ; 00000168H
$LN11@draw_2d_eo:

; 2230 : 	}
; 2231 : 
; 2232 : 	sprintf (buffer, "%d", heading_readout);

  00327	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _heading_readout$[ebp]
  0032d	50		 push	 eax
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00333	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00339	51		 push	 ecx
  0033a	e8 00 00 00 00	 call	 _sprintf
  0033f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2233 : 
; 2234 : 	width = get_mono_font_string_width (buffer);

  00342	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00348	50		 push	 eax
  00349	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0034e	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2235 : 
; 2236 : 	set_2d_mono_font_position (0.0, 1.0);

  00354	51		 push	 ecx
  00355	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0035d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00362	51		 push	 ecx
  00363	0f 57 c0	 xorps	 xmm0, xmm0
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2237 : 
; 2238 : 	set_mono_font_rel_position ((-width * 0.5) + 1.0, 1.0);

  00370	51		 push	 ecx
  00371	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00379	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037e	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00386	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0038d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00391	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00399	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a5	51		 push	 ecx
  003a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ab	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2239 : 
; 2240 : 	print_mono_font_string (buffer);

  003b0	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  003b6	50		 push	 eax
  003b7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2241 : 
; 2242 : 	//
; 2243 : 	// sensor type
; 2244 : 	//
; 2245 : 
; 2246 : 	set_2d_mono_font_position (-1.0, 1.0);

  003bc	51		 push	 ecx
  003bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2247 : 
; 2248 : 	set_mono_font_rel_position (1.0, 1.0);

  003dd	51		 push	 ecx
  003de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003eb	51		 push	 ecx
  003ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2249 : 
; 2250 : 	switch (system)

  003fe	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00401	89 85 74 fe ff
	ff		 mov	 DWORD PTR tv212[ebp], eax
  00407	83 bd 74 fe ff
	ff 03		 cmp	 DWORD PTR tv212[ebp], 3
  0040e	74 0b		 je	 SHORT $LN12@draw_2d_eo
  00410	83 bd 74 fe ff
	ff 06		 cmp	 DWORD PTR tv212[ebp], 6
  00417	74 0e		 je	 SHORT $LN13@draw_2d_eo
  00419	eb 18		 jmp	 SHORT $LN14@draw_2d_eo
$LN12@draw_2d_eo:

; 2251 : 	{
; 2252 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2253 : 		{
; 2254 : 			print_mono_font_string ("FLIR");

  0041b	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00420	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2255 : 
; 2256 : 			break;

  00425	eb 16		 jmp	 SHORT $LN2@draw_2d_eo
$LN13@draw_2d_eo:

; 2257 : 		}
; 2258 : 		case TARGET_ACQUISITION_SYSTEM_LLLTV:
; 2259 : 		{
; 2260 : 			print_mono_font_string ("LLLTV");

  00427	68 00 00 00 00	 push	 OFFSET ??_C@_05PNDCLKDI@LLLTV@
  0042c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2261 : 
; 2262 : 			break;

  00431	eb 0a		 jmp	 SHORT $LN2@draw_2d_eo
$LN14@draw_2d_eo:

; 2263 : 		}
; 2264 : 		default:
; 2265 : 		{
; 2266 : 			print_mono_font_string ("XXX");

  00433	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  00438	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@draw_2d_eo:

; 2267 : 
; 2268 : 			break;
; 2269 : 		}
; 2270 : 	}
; 2271 : 
; 2272 : 	if (eo_low_light)

  0043d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_low_light@@3HA, 0 ; eo_low_light
  00444	0f 84 82 00 00
	00		 je	 $LN17@draw_2d_eo

; 2273 : 	{
; 2274 : 		set_2d_mono_font_position (-1.0, 0.9);

  0044a	51		 push	 ecx
  0044b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00458	51		 push	 ecx
  00459	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00461	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00466	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2275 : 
; 2276 : 		if (draw_large_mfd)

  0046b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00472	74 2d		 je	 SHORT $LN16@draw_2d_eo

; 2277 : 		{
; 2278 : 			set_mono_font_rel_position (1.0, -3.0);

  00474	51		 push	 ecx
  00475	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  0047d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00482	51		 push	 ecx
  00483	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0048b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00490	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2279 : 
; 2280 : 			print_mono_font_string ("LOW LIGHT");

  00495	68 00 00 00 00	 push	 OFFSET ??_C@_09ICGCKLLB@LOW?5LIGHT@
  0049a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2281 : 		}
; 2282 : 		else

  0049f	eb 2b		 jmp	 SHORT $LN17@draw_2d_eo
$LN16@draw_2d_eo:

; 2283 : 		{
; 2284 : 			set_mono_font_rel_position (1.0, 2.0);

  004a1	51		 push	 ecx
  004a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  004aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004af	51		 push	 ecx
  004b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2285 : 
; 2286 : 			print_mono_font_string ("LOW");

  004c2	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  004c7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN17@draw_2d_eo:

; 2287 : 		}
; 2288 : 	}
; 2289 : 
; 2290 : 	//
; 2291 : 	// field of view
; 2292 : 	//
; 2293 : 
; 2294 : 	switch (eo->field_of_view)

  004cc	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  004cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d1	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv229[ebp], ecx
  004d7	83 bd 74 fe ff
	ff 01		 cmp	 DWORD PTR tv229[ebp], 1
  004de	74 14		 je	 SHORT $LN18@draw_2d_eo
  004e0	83 bd 74 fe ff
	ff 02		 cmp	 DWORD PTR tv229[ebp], 2
  004e7	74 26		 je	 SHORT $LN21@draw_2d_eo
  004e9	83 bd 74 fe ff
	ff 03		 cmp	 DWORD PTR tv229[ebp], 3
  004f0	74 38		 je	 SHORT $LN24@draw_2d_eo
  004f2	eb 3f		 jmp	 SHORT $LN25@draw_2d_eo
$LN18@draw_2d_eo:

; 2295 : 	{
; 2296 : 		case EO_FOV_NARROW:
; 2297 : 		{
; 2298 : 			if (draw_large_mfd)

  004f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004fb	74 09		 je	 SHORT $LN19@draw_2d_eo

; 2299 : 			{
; 2300 : 				s = "NARROW";

  004fd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06BPEIKNIA@NARROW@

; 2301 : 			}
; 2302 : 			else

  00504	eb 07		 jmp	 SHORT $LN20@draw_2d_eo
$LN19@draw_2d_eo:

; 2303 : 			{
; 2304 : 				s = "NAR";

  00506	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03FMKFNHMM@NAR@
$LN20@draw_2d_eo:

; 2305 : 			}
; 2306 : 
; 2307 : 			break;

  0050d	eb 2b		 jmp	 SHORT $LN4@draw_2d_eo
$LN21@draw_2d_eo:

; 2308 : 		}
; 2309 : 		case EO_FOV_MEDIUM:
; 2310 : 		{
; 2311 : 			if (draw_large_mfd)

  0050f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00516	74 09		 je	 SHORT $LN22@draw_2d_eo

; 2312 : 			{
; 2313 : 				s = "MEDIUM";

  00518	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06HMBFJLMK@MEDIUM@

; 2314 : 			}
; 2315 : 			else

  0051f	eb 07		 jmp	 SHORT $LN23@draw_2d_eo
$LN22@draw_2d_eo:

; 2316 : 			{
; 2317 : 				s = "MED";

  00521	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03FFIBGFCJ@MED@
$LN23@draw_2d_eo:

; 2318 : 			}
; 2319 : 
; 2320 : 			break;

  00528	eb 10		 jmp	 SHORT $LN4@draw_2d_eo
$LN24@draw_2d_eo:

; 2321 : 		}
; 2322 : 		case EO_FOV_WIDE:
; 2323 : 		{
; 2324 : 			s = "WIDE";

  0052a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04KPGPJCNC@WIDE@

; 2325 : 
; 2326 : 			break;

  00531	eb 07		 jmp	 SHORT $LN4@draw_2d_eo
$LN25@draw_2d_eo:

; 2327 : 		}
; 2328 : 		default:
; 2329 : 		{
; 2330 : 			s = "XXX";

  00533	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN4@draw_2d_eo:

; 2331 : 
; 2332 : 			break;
; 2333 : 		}
; 2334 : 	}
; 2335 : 
; 2336 : 	width = get_mono_font_string_width (s);

  0053a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0053d	50		 push	 eax
  0053e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00543	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2337 : 
; 2338 : 	set_2d_mono_font_position (1.0, 1.0);

  00549	51		 push	 ecx
  0054a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00552	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00557	51		 push	 ecx
  00558	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00560	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00565	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2339 : 
; 2340 : 	set_mono_font_rel_position (-width, 1.0);

  0056a	51		 push	 ecx
  0056b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00573	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00578	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00580	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00587	51		 push	 ecx
  00588	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2341 : 
; 2342 : 	print_mono_font_string (s);

  00592	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00595	50		 push	 eax
  00596	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2343 : 
; 2344 : 	//
; 2345 : 	// target name
; 2346 : 	//
; 2347 : 
; 2348 : 	if (draw_large_mfd)

  0059b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  005a2	74 12		 je	 SHORT $LN26@draw_2d_eo

; 2349 : 	{
; 2350 : 		y_adjust = -8.0;

  005a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  005ac	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2351 : 	}
; 2352 : 	else

  005b4	eb 10		 jmp	 SHORT $LN27@draw_2d_eo
$LN26@draw_2d_eo:

; 2353 : 	{
; 2354 : 		y_adjust = -4.0;

  005b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  005be	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN27@draw_2d_eo:

; 2355 : 	}
; 2356 : 
; 2357 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  005c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  005cb	50		 push	 eax
  005cc	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  005d2	51		 push	 ecx
  005d3	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  005d9	52		 push	 edx
  005da	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  005df	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 2358 : 
; 2359 : 	if (s)

  005e2	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  005e6	74 4b		 je	 SHORT $LN28@draw_2d_eo

; 2360 : 	{
; 2361 : 		set_2d_mono_font_position (-1.0, -1.0);

  005e8	51		 push	 ecx
  005e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  005f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f6	51		 push	 ecx
  005f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  005ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00604	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2362 : 
; 2363 : 		set_mono_font_rel_position (1.0, y_adjust);

  00609	51		 push	 ecx
  0060a	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00612	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00617	51		 push	 ecx
  00618	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00620	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00625	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2364 : 
; 2365 : 		print_mono_font_string (s);

  0062a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0062d	50		 push	 eax
  0062e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN28@draw_2d_eo:

; 2366 : 	}
; 2367 : 
; 2368 : 	//
; 2369 : 	// target range
; 2370 : 	//
; 2371 : 
; 2372 : 	if (target_range > 0.0)

  00633	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  0063b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00643	0f 86 d5 00 00
	00		 jbe	 $LN29@draw_2d_eo

; 2373 : 	{
; 2374 : 		if ((target_range < 1000.0) && (!havoc_damage.laser_range_finder))

  00649	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00651	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00659	66 0f 2f c8	 comisd	 xmm1, xmm0
  0065d	76 2c		 jbe	 SHORT $LN30@draw_2d_eo
  0065f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00664	c1 e8 04	 shr	 eax, 4
  00667	83 e0 01	 and	 eax, 1
  0066a	75 1f		 jne	 SHORT $LN30@draw_2d_eo

; 2375 : 		{
; 2376 : 			sprintf (buffer, "%dm", (int) target_range);

  0066c	f3 0f 2c 85 1c
	ff ff ff	 cvttss2si eax, DWORD PTR _target_range$[ebp]
  00674	50		 push	 eax
  00675	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  0067a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00680	51		 push	 ecx
  00681	e8 00 00 00 00	 call	 _sprintf
  00686	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2377 : 		}
; 2378 : 		else

  00689	eb 2c		 jmp	 SHORT $LN31@draw_2d_eo
$LN30@draw_2d_eo:

; 2379 : 		{
; 2380 : 			sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  0068b	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00693	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0069b	83 ec 08	 sub	 esp, 8
  0069e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  006a3	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  006a8	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  006ae	50		 push	 eax
  006af	e8 00 00 00 00	 call	 _sprintf
  006b4	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@draw_2d_eo:

; 2381 : 		}
; 2382 : 
; 2383 : 		width = get_mono_font_string_width (buffer);

  006b7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  006bd	50		 push	 eax
  006be	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  006c3	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2384 : 
; 2385 : 		set_2d_mono_font_position (1.0, -1.0);

  006c9	51		 push	 ecx
  006ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d7	51		 push	 ecx
  006d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2386 : 
; 2387 : 		set_mono_font_rel_position (-width, y_adjust);

  006ea	51		 push	 ecx
  006eb	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f8	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00700	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00707	51		 push	 ecx
  00708	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2388 : 
; 2389 : 		print_mono_font_string (buffer);

  00712	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00718	50		 push	 eax
  00719	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN29@draw_2d_eo:

; 2390 : 	}
; 2391 : 
; 2392 : 	//
; 2393 : 	// locked
; 2394 : 	//
; 2395 : 
; 2396 : 	if (eo_is_locked())

  0071e	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  00723	85 c0		 test	 eax, eax
  00725	74 77		 je	 SHORT $LN32@draw_2d_eo

; 2397 : 	{
; 2398 : 		if (draw_large_mfd)

  00727	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0072e	74 12		 je	 SHORT $LN33@draw_2d_eo

; 2399 : 		{
; 2400 : 			y_adjust = -21.0;

  00730	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1a80000
  00738	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2401 : 		}
; 2402 : 		else

  00740	eb 10		 jmp	 SHORT $LN34@draw_2d_eo
$LN33@draw_2d_eo:

; 2403 : 		{
; 2404 : 			y_adjust = -11.0;

  00742	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1300000
  0074a	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN34@draw_2d_eo:

; 2405 : 		}
; 2406 : 
; 2407 : 		set_2d_mono_font_position (-1.0, -1.0);

  00752	51		 push	 ecx
  00753	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0075b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00760	51		 push	 ecx
  00761	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00769	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2408 : 
; 2409 : 		set_mono_font_rel_position (1.0, y_adjust);

  00773	51		 push	 ecx
  00774	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0077c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00781	51		 push	 ecx
  00782	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0078a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2410 : 
; 2411 : 		print_mono_font_string ("LOCKED");

  00794	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  00799	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN32@draw_2d_eo:

; 2412 : 	}
; 2413 : // Jabberwock 031107 Designated targets
; 2414 : 	
; 2415 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  0079e	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  007a5	0f 84 36 01 00
	00		 je	 $LN35@draw_2d_eo
  007ab	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  007b2	74 10		 je	 SHORT $LN74@draw_2d_eo
  007b4	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  007ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  007bc	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv292[ebp], ecx
  007c2	eb 20		 jmp	 SHORT $LN75@draw_2d_eo
$LN74@draw_2d_eo:
  007c4	68 6f 09 00 00	 push	 2415			; 0000096fH
  007c9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  007ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007d4	52		 push	 edx
  007d5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007da	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv292[ebp], 0
$LN75@draw_2d_eo:
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	85 c0		 test	 eax, eax
  007eb	74 0c		 je	 SHORT $LN76@draw_2d_eo
  007ed	c7 85 70 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv299[ebp], 10 ; 0000000aH
  007f7	eb 20		 jmp	 SHORT $LN77@draw_2d_eo
$LN76@draw_2d_eo:
  007f9	68 6f 09 00 00	 push	 2415			; 0000096fH
  007fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00803	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00809	51		 push	 ecx
  0080a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0080f	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv299[ebp], 0
$LN77@draw_2d_eo:
  00819	6a 0a		 push	 10			; 0000000aH
  0081b	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  00821	52		 push	 edx
  00822	69 85 74 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv292[ebp], 180
  0082c	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv299[ebp]
  00832	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  00839	ff d2		 call	 edx
  0083b	85 c0		 test	 eax, eax
  0083d	0f 84 9e 00 00
	00		 je	 $LN35@draw_2d_eo

; 2416 : 	{
; 2417 : 		if (draw_large_mfd)

  00843	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0084a	74 12		 je	 SHORT $LN36@draw_2d_eo

; 2418 : 		{
; 2419 : 			y_adjust = -25.0;

  0084c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  00854	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2420 : 		}
; 2421 : 		else

  0085c	eb 10		 jmp	 SHORT $LN37@draw_2d_eo
$LN36@draw_2d_eo:

; 2422 : 		{
; 2423 : 			y_adjust = -12.0;

  0085e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00866	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN37@draw_2d_eo:

; 2424 : 		}
; 2425 : 
; 2426 : 		width = get_mono_font_string_width ("MARKED");

  0086e	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00873	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00878	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2427 : 		
; 2428 : 		set_2d_mono_font_position (1.0, -1.0);

  0087e	51		 push	 ecx
  0087f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00887	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088c	51		 push	 ecx
  0088d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00895	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2429 : 
; 2430 : 		set_mono_font_rel_position (-width - 1.0, y_adjust);

  0089f	51		 push	 ecx
  008a0	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  008a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ad	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  008b5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  008bc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  008c0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  008c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008cc	51		 push	 ecx
  008cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2431 : 		
; 2432 : 		print_mono_font_string ("MARKED");		

  008d7	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  008dc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN35@draw_2d_eo:

; 2433 : 	}
; 2434 : // Jabberwock 031107 ends
; 2435 : 
; 2436 : // added ground stabi by GCsDriver 08-12-2007
; 2437 : 	//
; 2438 : 	// 030418 loke
; 2439 : 	// draw an indication if ground stablisation is enabled
; 2440 : 	//
; 2441 : 
; 2442 : 	if (eo_ground_stabilised)

  008e1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised
  008e8	0f 84 8e 00 00
	00		 je	 $LN38@draw_2d_eo

; 2443 : 	{
; 2444 : 		if (draw_large_mfd) // Jabberwock 031107 Designated targets - moved the stab indicator one line up, sorry!

  008ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  008f5	74 12		 je	 SHORT $LN39@draw_2d_eo

; 2445 : 		{
; 2446 : 			y_adjust = -38.0;

  008f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  008ff	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2447 : 		}
; 2448 : 		else

  00907	eb 10		 jmp	 SHORT $LN40@draw_2d_eo
$LN39@draw_2d_eo:

; 2449 : 		{
; 2450 : 			y_adjust = -19.0;

  00909	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  00911	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN40@draw_2d_eo:

; 2451 : 		}
; 2452 : 
; 2453 : 		width = get_mono_font_string_width ("S");

  00919	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  0091e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00923	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2454 : 
; 2455 : 		set_2d_mono_font_position (1.0, -1.0);

  00929	51		 push	 ecx
  0092a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00932	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00937	51		 push	 ecx
  00938	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00940	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00945	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2456 : 
; 2457 : 		set_mono_font_rel_position (-width, y_adjust);

  0094a	51		 push	 ecx
  0094b	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00953	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00958	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00960	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00967	51		 push	 ecx
  00968	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2458 : 
; 2459 : 		print_mono_font_string ("S");

  00972	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  00977	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN38@draw_2d_eo:

; 2460 : 	}
; 2461 : 
; 2462 : 	////////////////////////////////////////
; 2463 : 	//
; 2464 : 	// line graphics
; 2465 : 	//
; 2466 : 	////////////////////////////////////////
; 2467 : 
; 2468 : 	//
; 2469 : 	// datum
; 2470 : 	//
; 2471 : 
; 2472 : 	if (draw_large_mfd)

  0097c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00983	0f 84 0d 01 00
	00		 je	 $LN41@draw_2d_eo

; 2473 : 	{
; 2474 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);

  00989	b8 04 00 00 00	 mov	 eax, 4
  0098e	6b c8 00	 imul	 ecx, eax, 0
  00991	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00997	52		 push	 edx
  00998	51		 push	 ecx
  00999	0f 57 c0	 xorps	 xmm0, xmm0
  0099c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a1	51		 push	 ecx
  009a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  009aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009af	51		 push	 ecx
  009b0	0f 57 c0	 xorps	 xmm0, xmm0
  009b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b8	51		 push	 ecx
  009b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  009c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2475 : 
; 2476 : 		draw_2d_line (0.035, 0.0, 0.08, 0.0, MFD_COLOUR1);

  009cb	b8 04 00 00 00	 mov	 eax, 4
  009d0	6b c8 00	 imul	 ecx, eax, 0
  009d3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009d9	52		 push	 edx
  009da	51		 push	 ecx
  009db	0f 57 c0	 xorps	 xmm0, xmm0
  009de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e3	51		 push	 ecx
  009e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  009ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f1	51		 push	 ecx
  009f2	0f 57 c0	 xorps	 xmm0, xmm0
  009f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fa	51		 push	 ecx
  009fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00a03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a08	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2477 : 
; 2478 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);

  00a0d	b8 04 00 00 00	 mov	 eax, 4
  00a12	6b c8 00	 imul	 ecx, eax, 0
  00a15	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a1b	52		 push	 edx
  00a1c	51		 push	 ecx
  00a1d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00a25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2a	51		 push	 ecx
  00a2b	0f 57 c0	 xorps	 xmm0, xmm0
  00a2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a33	51		 push	 ecx
  00a34	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00a3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a41	51		 push	 ecx
  00a42	0f 57 c0	 xorps	 xmm0, xmm0
  00a45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2479 : 
; 2480 : 		draw_2d_line (0.0, 0.035, 0.0, 0.08, MFD_COLOUR1);

  00a4f	b8 04 00 00 00	 mov	 eax, 4
  00a54	6b c8 00	 imul	 ecx, eax, 0
  00a57	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a5d	52		 push	 edx
  00a5e	51		 push	 ecx
  00a5f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00a67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6c	51		 push	 ecx
  00a6d	0f 57 c0	 xorps	 xmm0, xmm0
  00a70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a75	51		 push	 ecx
  00a76	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00a7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a83	51		 push	 ecx
  00a84	0f 57 c0	 xorps	 xmm0, xmm0
  00a87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2481 : 	}
; 2482 : 	else

  00a91	e9 08 01 00 00	 jmp	 $LN42@draw_2d_eo
$LN41@draw_2d_eo:

; 2483 : 	{
; 2484 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);

  00a96	b8 04 00 00 00	 mov	 eax, 4
  00a9b	6b c8 00	 imul	 ecx, eax, 0
  00a9e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00aa4	52		 push	 edx
  00aa5	51		 push	 ecx
  00aa6	0f 57 c0	 xorps	 xmm0, xmm0
  00aa9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aae	51		 push	 ecx
  00aaf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00ab7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00abc	51		 push	 ecx
  00abd	0f 57 c0	 xorps	 xmm0, xmm0
  00ac0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac5	51		 push	 ecx
  00ac6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00ace	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2485 : 
; 2486 : 		draw_2d_line (0.035, 0.0, 0.09, 0.0, MFD_COLOUR1);

  00ad8	b8 04 00 00 00	 mov	 eax, 4
  00add	6b c8 00	 imul	 ecx, eax, 0
  00ae0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ae6	52		 push	 edx
  00ae7	51		 push	 ecx
  00ae8	0f 57 c0	 xorps	 xmm0, xmm0
  00aeb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af0	51		 push	 ecx
  00af1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00af9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00afe	51		 push	 ecx
  00aff	0f 57 c0	 xorps	 xmm0, xmm0
  00b02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b07	51		 push	 ecx
  00b08	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00b10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b15	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2487 : 
; 2488 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);

  00b1a	b8 04 00 00 00	 mov	 eax, 4
  00b1f	6b c8 00	 imul	 ecx, eax, 0
  00b22	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b28	52		 push	 edx
  00b29	51		 push	 ecx
  00b2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00b32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b37	51		 push	 ecx
  00b38	0f 57 c0	 xorps	 xmm0, xmm0
  00b3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b40	51		 push	 ecx
  00b41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00b49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4e	51		 push	 ecx
  00b4f	0f 57 c0	 xorps	 xmm0, xmm0
  00b52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b57	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2489 : 
; 2490 : 		draw_2d_line (0.0, 0.035, 0.0, 0.09, MFD_COLOUR1);

  00b5c	b8 04 00 00 00	 mov	 eax, 4
  00b61	6b c8 00	 imul	 ecx, eax, 0
  00b64	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b6a	52		 push	 edx
  00b6b	51		 push	 ecx
  00b6c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00b74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b79	51		 push	 ecx
  00b7a	0f 57 c0	 xorps	 xmm0, xmm0
  00b7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b82	51		 push	 ecx
  00b83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00b8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b90	51		 push	 ecx
  00b91	0f 57 c0	 xorps	 xmm0, xmm0
  00b94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b99	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN42@draw_2d_eo:

; 2491 : 	}
; 2492 : 
; 2493 : 	//
; 2494 : 	// azimuth
; 2495 : 	//
; 2496 : 
; 2497 : 	draw_2d_line (-0.5, 0.8, 0.5, 0.8, MFD_COLOUR1);

  00b9e	b8 04 00 00 00	 mov	 eax, 4
  00ba3	6b c8 00	 imul	 ecx, eax, 0
  00ba6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bac	52		 push	 edx
  00bad	51		 push	 ecx
  00bae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00bb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbb	51		 push	 ecx
  00bbc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00bc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc9	51		 push	 ecx
  00bca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00bd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd7	51		 push	 ecx
  00bd8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00be0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2498 : 
; 2499 : 	marker_position = (eo_azimuth / eo_max_azimuth) * 0.5;

  00bea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00bf2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  00bfa	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00bfe	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00c06	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c0a	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0

; 2500 : 
; 2501 : 	if (draw_large_mfd)

  00c12	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00c19	0f 84 14 01 00
	00		 je	 $LN43@draw_2d_eo

; 2502 : 	{
; 2503 : 		draw_2d_line (-0.5, 0.8 - 0.02, -0.5, 0.8 + 0.02, MFD_COLOUR1);

  00c1f	b8 04 00 00 00	 mov	 eax, 4
  00c24	6b c8 00	 imul	 ecx, eax, 0
  00c27	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c2d	52		 push	 edx
  00c2e	51		 push	 ecx
  00c2f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  00c37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3c	51		 push	 ecx
  00c3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00c45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c4a	51		 push	 ecx
  00c4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00c53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c58	51		 push	 ecx
  00c59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00c61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c66	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2504 : 
; 2505 : 		draw_2d_line (0.5, 0.8 - 0.02, 0.5, 0.8 + 0.02, MFD_COLOUR1);

  00c6b	b8 04 00 00 00	 mov	 eax, 4
  00c70	6b c8 00	 imul	 ecx, eax, 0
  00c73	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c79	52		 push	 edx
  00c7a	51		 push	 ecx
  00c7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  00c83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c88	51		 push	 ecx
  00c89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00c91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c96	51		 push	 ecx
  00c97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00c9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca4	51		 push	 ecx
  00ca5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00cad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2506 : 
; 2507 : 		draw_2d_line (0.0, 0.8 - 0.01, 0.0, 0.8 + 0.01, MFD_COLOUR1);

  00cb7	b8 04 00 00 00	 mov	 eax, 4
  00cbc	6b c8 00	 imul	 ecx, eax, 0
  00cbf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cc5	52		 push	 edx
  00cc6	51		 push	 ecx
  00cc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4f5c29
  00ccf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd4	51		 push	 ecx
  00cd5	0f 57 c0	 xorps	 xmm0, xmm0
  00cd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cdd	51		 push	 ecx
  00cde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  00ce6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ceb	51		 push	 ecx
  00cec	0f 57 c0	 xorps	 xmm0, xmm0
  00cef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2508 : 
; 2509 : 		draw_2d_mono_sprite (large_azimuth_marker, marker_position, 0.8, MFD_COLOUR1);

  00cf9	b8 04 00 00 00	 mov	 eax, 4
  00cfe	6b c8 00	 imul	 ecx, eax, 0
  00d01	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d07	52		 push	 edx
  00d08	51		 push	 ecx
  00d09	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00d11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d16	51		 push	 ecx
  00d17	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  00d1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d24	68 00 00 00 00	 push	 OFFSET ?large_azimuth_marker@@3PADA
  00d29	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2510 : 	}
; 2511 : 	else

  00d2e	e9 0f 01 00 00	 jmp	 $LN44@draw_2d_eo
$LN43@draw_2d_eo:

; 2512 : 	{
; 2513 : 		draw_2d_line (-0.5, 0.8 - 0.03, -0.5, 0.8 + 0.03, MFD_COLOUR1);

  00d33	b8 04 00 00 00	 mov	 eax, 4
  00d38	6b c8 00	 imul	 ecx, eax, 0
  00d3b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d41	52		 push	 edx
  00d42	51		 push	 ecx
  00d43	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f547ae1
  00d4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d50	51		 push	 ecx
  00d51	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d59	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5e	51		 push	 ecx
  00d5f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  00d67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6c	51		 push	 ecx
  00d6d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2514 : 
; 2515 : 		draw_2d_line (0.5, 0.8 - 0.03, 0.5, 0.8 + 0.03, MFD_COLOUR1);

  00d7f	b8 04 00 00 00	 mov	 eax, 4
  00d84	6b c8 00	 imul	 ecx, eax, 0
  00d87	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d8d	52		 push	 edx
  00d8e	51		 push	 ecx
  00d8f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f547ae1
  00d97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9c	51		 push	 ecx
  00d9d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00da5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00daa	51		 push	 ecx
  00dab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  00db3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db8	51		 push	 ecx
  00db9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00dc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2516 : 
; 2517 : 		draw_2d_line (0.0, 0.8 - 0.02, 0.0, 0.8 + 0.02, MFD_COLOUR1);

  00dcb	b8 04 00 00 00	 mov	 eax, 4
  00dd0	6b c8 00	 imul	 ecx, eax, 0
  00dd3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00dd9	52		 push	 edx
  00dda	51		 push	 ecx
  00ddb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  00de3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de8	51		 push	 ecx
  00de9	0f 57 c0	 xorps	 xmm0, xmm0
  00dec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00df1	51		 push	 ecx
  00df2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00dfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dff	51		 push	 ecx
  00e00	0f 57 c0	 xorps	 xmm0, xmm0
  00e03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e08	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2518 : 
; 2519 : 		draw_2d_mono_sprite (small_azimuth_marker, marker_position, 0.8, MFD_COLOUR1);

  00e0d	b8 04 00 00 00	 mov	 eax, 4
  00e12	6b c8 00	 imul	 ecx, eax, 0
  00e15	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e1b	52		 push	 edx
  00e1c	51		 push	 ecx
  00e1d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00e25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2a	51		 push	 ecx
  00e2b	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  00e33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e38	68 00 00 00 00	 push	 OFFSET ?small_azimuth_marker@@3PADA
  00e3d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN44@draw_2d_eo:

; 2520 : 	}
; 2521 : 
; 2522 : 	//
; 2523 : 	// elevation
; 2524 : 	//
; 2525 : 
; 2526 : 	draw_2d_line (-0.9, 0.2, -0.9, -0.6, MFD_COLOUR1);

  00e42	b8 04 00 00 00	 mov	 eax, 4
  00e47	6b c8 00	 imul	 ecx, eax, 0
  00e4a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e50	52		 push	 edx
  00e51	51		 push	 ecx
  00e52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00e5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5f	51		 push	 ecx
  00e60	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00e68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e6d	51		 push	 ecx
  00e6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00e76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e7b	51		 push	 ecx
  00e7c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00e84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e89	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2527 : 
; 2528 : 	if (eo_elevation < 0.0)

  00e8e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?eo_elevation@@3MA
  00e96	0f 57 c9	 xorps	 xmm1, xmm1
  00e99	66 0f 2f c8	 comisd	 xmm1, xmm0
  00e9d	76 2a		 jbe	 SHORT $LN45@draw_2d_eo

; 2529 : 	{
; 2530 : 		marker_position = (eo_elevation / eo_min_elevation) * -0.6;

  00e9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00ea7	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  00eaf	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00eb3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe3333333333333
  00ebb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ebf	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0

; 2531 : 	}
; 2532 : 	else

  00ec7	eb 28		 jmp	 SHORT $LN46@draw_2d_eo
$LN45@draw_2d_eo:

; 2533 : 	{
; 2534 : 		marker_position = (eo_elevation / eo_max_elevation) * 0.2;

  00ec9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00ed1	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_elevation@@3MA
  00ed9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00edd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00ee5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ee9	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0
$LN46@draw_2d_eo:

; 2535 : 	}
; 2536 : 
; 2537 : 	if (draw_large_mfd)

  00ef1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00ef8	0f 84 14 01 00
	00		 je	 $LN47@draw_2d_eo

; 2538 : 	{
; 2539 : 		draw_2d_line (-0.9 - 0.02, 0.2, -0.9 + 0.02, 0.2, MFD_COLOUR1);

  00efe	b8 04 00 00 00	 mov	 eax, 4
  00f03	6b c8 00	 imul	 ecx, eax, 0
  00f06	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f0c	52		 push	 edx
  00f0d	51		 push	 ecx
  00f0e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00f16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f1b	51		 push	 ecx
  00f1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00f24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f29	51		 push	 ecx
  00f2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00f32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f37	51		 push	 ecx
  00f38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  00f40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f45	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2540 : 
; 2541 : 		draw_2d_line (-0.9 - 0.02, -0.6, -0.9 + 0.02, -0.6, MFD_COLOUR1);

  00f4a	b8 04 00 00 00	 mov	 eax, 4
  00f4f	6b c8 00	 imul	 ecx, eax, 0
  00f52	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f58	52		 push	 edx
  00f59	51		 push	 ecx
  00f5a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00f62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f67	51		 push	 ecx
  00f68	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00f70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f75	51		 push	 ecx
  00f76	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00f7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f83	51		 push	 ecx
  00f84	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  00f8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f91	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2542 : 
; 2543 : 		draw_2d_line (-0.9 - 0.01, 0.0, -0.9 + 0.01, 0.0, MFD_COLOUR1);

  00f96	b8 04 00 00 00	 mov	 eax, 4
  00f9b	6b c8 00	 imul	 ecx, eax, 0
  00f9e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fa4	52		 push	 edx
  00fa5	51		 push	 ecx
  00fa6	0f 57 c0	 xorps	 xmm0, xmm0
  00fa9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fae	51		 push	 ecx
  00faf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  00fb7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fbc	51		 push	 ecx
  00fbd	0f 57 c0	 xorps	 xmm0, xmm0
  00fc0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc5	51		 push	 ecx
  00fc6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf68f5c3
  00fce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2544 : 
; 2545 : 		draw_2d_mono_sprite (large_elevation_marker, -0.9, marker_position, MFD_COLOUR1);

  00fd8	b8 04 00 00 00	 mov	 eax, 4
  00fdd	6b c8 00	 imul	 ecx, eax, 0
  00fe0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fe6	52		 push	 edx
  00fe7	51		 push	 ecx
  00fe8	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  00ff0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff5	51		 push	 ecx
  00ff6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00ffe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01003	68 00 00 00 00	 push	 OFFSET ?large_elevation_marker@@3PADA
  01008	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2546 : 	}
; 2547 : 	else

  0100d	e9 0f 01 00 00	 jmp	 $LN48@draw_2d_eo
$LN47@draw_2d_eo:

; 2548 : 	{
; 2549 : 		draw_2d_line (-0.9 - 0.03, 0.2, -0.9 + 0.03, 0.2, MFD_COLOUR1);

  01012	b8 04 00 00 00	 mov	 eax, 4
  01017	6b c8 00	 imul	 ecx, eax, 0
  0101a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01020	52		 push	 edx
  01021	51		 push	 ecx
  01022	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0102a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102f	51		 push	 ecx
  01030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  01038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103d	51		 push	 ecx
  0103e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104b	51		 push	 ecx
  0104c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  01054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01059	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2550 : 
; 2551 : 		draw_2d_line (-0.9 - 0.03, -0.6, -0.9 + 0.03, -0.6, MFD_COLOUR1);

  0105e	b8 04 00 00 00	 mov	 eax, 4
  01063	6b c8 00	 imul	 ecx, eax, 0
  01066	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0106c	52		 push	 edx
  0106d	51		 push	 ecx
  0106e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  01076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107b	51		 push	 ecx
  0107c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  01084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01089	51		 push	 ecx
  0108a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  01092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01097	51		 push	 ecx
  01098	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  010a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2552 : 
; 2553 : 		draw_2d_line (-0.9 - 0.02, 0.0, -0.9 + 0.02, 0.0, MFD_COLOUR1);

  010aa	b8 04 00 00 00	 mov	 eax, 4
  010af	6b c8 00	 imul	 ecx, eax, 0
  010b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010b8	52		 push	 edx
  010b9	51		 push	 ecx
  010ba	0f 57 c0	 xorps	 xmm0, xmm0
  010bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010c2	51		 push	 ecx
  010c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  010cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d0	51		 push	 ecx
  010d1	0f 57 c0	 xorps	 xmm0, xmm0
  010d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d9	51		 push	 ecx
  010da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  010e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010e7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2554 : 
; 2555 : 		draw_2d_mono_sprite (small_elevation_marker, -0.9, marker_position, MFD_COLOUR1);

  010ec	b8 04 00 00 00	 mov	 eax, 4
  010f1	6b c8 00	 imul	 ecx, eax, 0
  010f4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010fa	52		 push	 edx
  010fb	51		 push	 ecx
  010fc	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  01104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01109	51		 push	 ecx
  0110a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01117	68 00 00 00 00	 push	 OFFSET ?small_elevation_marker@@3PADA
  0111c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN48@draw_2d_eo:

; 2556 : 	}
; 2557 : 
; 2558 : 	//
; 2559 : 	// range
; 2560 : 	//
; 2561 : 
; 2562 : 	draw_2d_line (0.9, 0.0, 0.9, -0.5, MFD_COLOUR1);

  01121	b8 04 00 00 00	 mov	 eax, 4
  01126	6b c8 00	 imul	 ecx, eax, 0
  01129	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0112f	52		 push	 edx
  01130	51		 push	 ecx
  01131	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  01139	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0113e	51		 push	 ecx
  0113f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0114c	51		 push	 ecx
  0114d	0f 57 c0	 xorps	 xmm0, xmm0
  01150	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01155	51		 push	 ecx
  01156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0115e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01163	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2563 : 
; 2564 : 	if (draw_large_mfd)

  01168	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0116f	0f 84 6f 04 00
	00		 je	 $LN49@draw_2d_eo

; 2565 : 	{
; 2566 : 		draw_2d_line (0.9,  0.000, 0.9 + 0.02,  0.000, MFD_COLOUR1);

  01175	b8 04 00 00 00	 mov	 eax, 4
  0117a	6b c8 00	 imul	 ecx, eax, 0
  0117d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01183	52		 push	 edx
  01184	51		 push	 ecx
  01185	0f 57 c0	 xorps	 xmm0, xmm0
  01188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118d	51		 push	 ecx
  0118e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  01196	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0119b	51		 push	 ecx
  0119c	0f 57 c0	 xorps	 xmm0, xmm0
  0119f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011a4	51		 push	 ecx
  011a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  011ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2567 : 		draw_2d_line (0.9, -0.025, 0.9 + 0.01, -0.025, MFD_COLOUR1);

  011b7	b8 04 00 00 00	 mov	 eax, 4
  011bc	6b c8 00	 imul	 ecx, eax, 0
  011bf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011c5	52		 push	 edx
  011c6	51		 push	 ecx
  011c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  011cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d4	51		 push	 ecx
  011d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  011dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e2	51		 push	 ecx
  011e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  011eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f0	51		 push	 ecx
  011f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  011f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011fe	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2568 : 		draw_2d_line (0.9, -0.050, 0.9 + 0.01, -0.050, MFD_COLOUR1);

  01203	b8 04 00 00 00	 mov	 eax, 4
  01208	6b c8 00	 imul	 ecx, eax, 0
  0120b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01211	52		 push	 edx
  01212	51		 push	 ecx
  01213	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  0121b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01220	51		 push	 ecx
  01221	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122e	51		 push	 ecx
  0122f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0123c	51		 push	 ecx
  0123d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0124a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2569 : 		draw_2d_line (0.9, -0.075, 0.9 + 0.01, -0.075, MFD_COLOUR1);

  0124f	b8 04 00 00 00	 mov	 eax, 4
  01254	6b c8 00	 imul	 ecx, eax, 0
  01257	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0125d	52		 push	 edx
  0125e	51		 push	 ecx
  0125f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  01267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126c	51		 push	 ecx
  0126d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0127a	51		 push	 ecx
  0127b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  01283	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01288	51		 push	 ecx
  01289	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01296	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2570 : 
; 2571 : 		draw_2d_line (0.9, -0.100, 0.9 + 0.02, -0.100, MFD_COLOUR1);

  0129b	b8 04 00 00 00	 mov	 eax, 4
  012a0	6b c8 00	 imul	 ecx, eax, 0
  012a3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012a9	52		 push	 edx
  012aa	51		 push	 ecx
  012ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  012b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012b8	51		 push	 ecx
  012b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  012c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012c6	51		 push	 ecx
  012c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  012cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d4	51		 push	 ecx
  012d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  012dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012e2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2572 : 		draw_2d_line (0.9, -0.125, 0.9 + 0.01, -0.125, MFD_COLOUR1);

  012e7	b8 04 00 00 00	 mov	 eax, 4
  012ec	6b c8 00	 imul	 ecx, eax, 0
  012ef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012f5	52		 push	 edx
  012f6	51		 push	 ecx
  012f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be000000
  012ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01304	51		 push	 ecx
  01305	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  0130d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01312	51		 push	 ecx
  01313	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be000000
  0131b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01320	51		 push	 ecx
  01321	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01329	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0132e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2573 : 		draw_2d_line (0.9, -0.150, 0.9 + 0.01, -0.150, MFD_COLOUR1);

  01333	b8 04 00 00 00	 mov	 eax, 4
  01338	6b c8 00	 imul	 ecx, eax, 0
  0133b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01341	52		 push	 edx
  01342	51		 push	 ecx
  01343	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0134b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01350	51		 push	 ecx
  01351	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01359	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135e	51		 push	 ecx
  0135f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  01367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0136c	51		 push	 ecx
  0136d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01375	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2574 : 		draw_2d_line (0.9, -0.175, 0.9 + 0.01, -0.175, MFD_COLOUR1);

  0137f	b8 04 00 00 00	 mov	 eax, 4
  01384	6b c8 00	 imul	 ecx, eax, 0
  01387	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0138d	52		 push	 edx
  0138e	51		 push	 ecx
  0138f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  01397	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0139c	51		 push	 ecx
  0139d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  013a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013aa	51		 push	 ecx
  013ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  013b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013b8	51		 push	 ecx
  013b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  013c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2575 : 
; 2576 : 		draw_2d_line (0.9, -0.200, 0.9 + 0.02, -0.200, MFD_COLOUR1);

  013cb	b8 04 00 00 00	 mov	 eax, 4
  013d0	6b c8 00	 imul	 ecx, eax, 0
  013d3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013d9	52		 push	 edx
  013da	51		 push	 ecx
  013db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  013e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e8	51		 push	 ecx
  013e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  013f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f6	51		 push	 ecx
  013f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  013ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01404	51		 push	 ecx
  01405	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0140d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01412	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2577 : 		draw_2d_line (0.9, -0.225, 0.9 + 0.01, -0.225, MFD_COLOUR1);

  01417	b8 04 00 00 00	 mov	 eax, 4
  0141c	6b c8 00	 imul	 ecx, eax, 0
  0141f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01425	52		 push	 edx
  01426	51		 push	 ecx
  01427	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  0142f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01434	51		 push	 ecx
  01435	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  0143d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01442	51		 push	 ecx
  01443	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  0144b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01450	51		 push	 ecx
  01451	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01459	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0145e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2578 : 		draw_2d_line (0.9, -0.250, 0.9 + 0.01, -0.250, MFD_COLOUR1);

  01463	b8 04 00 00 00	 mov	 eax, 4
  01468	6b c8 00	 imul	 ecx, eax, 0
  0146b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01471	52		 push	 edx
  01472	51		 push	 ecx
  01473	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  0147b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01480	51		 push	 ecx
  01481	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01489	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0148e	51		 push	 ecx
  0148f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01497	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0149c	51		 push	 ecx
  0149d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  014a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014aa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2579 : 		draw_2d_line (0.9, -0.275, 0.9 + 0.01, -0.275, MFD_COLOUR1);

  014af	b8 04 00 00 00	 mov	 eax, 4
  014b4	6b c8 00	 imul	 ecx, eax, 0
  014b7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014bd	52		 push	 edx
  014be	51		 push	 ecx
  014bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8ccccd
  014c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014cc	51		 push	 ecx
  014cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  014d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014da	51		 push	 ecx
  014db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8ccccd
  014e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e8	51		 push	 ecx
  014e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  014f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014f6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2580 : 
; 2581 : 		draw_2d_line (0.9, -0.300, 0.9 + 0.02, -0.300, MFD_COLOUR1);

  014fb	b8 04 00 00 00	 mov	 eax, 4
  01500	6b c8 00	 imul	 ecx, eax, 0
  01503	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01509	52		 push	 edx
  0150a	51		 push	 ecx
  0150b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  01513	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01518	51		 push	 ecx
  01519	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  01521	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01526	51		 push	 ecx
  01527	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0152f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01534	51		 push	 ecx
  01535	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0153d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01542	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2582 : 
; 2583 : 		draw_2d_line (0.9, -0.400, 0.9 + 0.02, -0.400, MFD_COLOUR1);

  01547	b8 04 00 00 00	 mov	 eax, 4
  0154c	6b c8 00	 imul	 ecx, eax, 0
  0154f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01555	52		 push	 edx
  01556	51		 push	 ecx
  01557	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0155f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01564	51		 push	 ecx
  01565	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  0156d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01572	51		 push	 ecx
  01573	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0157b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01580	51		 push	 ecx
  01581	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01589	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0158e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2584 : 
; 2585 : 		draw_2d_line (0.9, -0.500, 0.9 + 0.02, -0.500, MFD_COLOUR1);

  01593	b8 04 00 00 00	 mov	 eax, 4
  01598	6b c8 00	 imul	 ecx, eax, 0
  0159b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015a1	52		 push	 edx
  015a2	51		 push	 ecx
  015a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  015ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b0	51		 push	 ecx
  015b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  015b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015be	51		 push	 ecx
  015bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  015c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015cc	51		 push	 ecx
  015cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  015d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015da	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2586 : 	}
; 2587 : 	else

  015df	e9 be 01 00 00	 jmp	 $LN50@draw_2d_eo
$LN49@draw_2d_eo:

; 2588 : 	{
; 2589 : 		draw_2d_line (0.9,  0.000, 0.9 + 0.03,  0.000, MFD_COLOUR1);

  015e4	b8 04 00 00 00	 mov	 eax, 4
  015e9	6b c8 00	 imul	 ecx, eax, 0
  015ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015f2	52		 push	 edx
  015f3	51		 push	 ecx
  015f4	0f 57 c0	 xorps	 xmm0, xmm0
  015f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015fc	51		 push	 ecx
  015fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01605	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160a	51		 push	 ecx
  0160b	0f 57 c0	 xorps	 xmm0, xmm0
  0160e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01613	51		 push	 ecx
  01614	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0161c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01621	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2590 : 
; 2591 : 		draw_2d_line (0.9, -0.100, 0.9 + 0.03, -0.100, MFD_COLOUR1);

  01626	b8 04 00 00 00	 mov	 eax, 4
  0162b	6b c8 00	 imul	 ecx, eax, 0
  0162e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01634	52		 push	 edx
  01635	51		 push	 ecx
  01636	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0163e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01643	51		 push	 ecx
  01644	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  0164c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01651	51		 push	 ecx
  01652	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0165a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0165f	51		 push	 ecx
  01660	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01668	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2592 : 
; 2593 : 		draw_2d_line (0.9, -0.200, 0.9 + 0.03, -0.200, MFD_COLOUR1);

  01672	b8 04 00 00 00	 mov	 eax, 4
  01677	6b c8 00	 imul	 ecx, eax, 0
  0167a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01680	52		 push	 edx
  01681	51		 push	 ecx
  01682	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0168a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0168f	51		 push	 ecx
  01690	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01698	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0169d	51		 push	 ecx
  0169e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  016a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ab	51		 push	 ecx
  016ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  016b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016b9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2594 : 
; 2595 : 		draw_2d_line (0.9, -0.300, 0.9 + 0.03, -0.300, MFD_COLOUR1);

  016be	b8 04 00 00 00	 mov	 eax, 4
  016c3	6b c8 00	 imul	 ecx, eax, 0
  016c6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016cc	52		 push	 edx
  016cd	51		 push	 ecx
  016ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  016d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016db	51		 push	 ecx
  016dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  016e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016e9	51		 push	 ecx
  016ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  016f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f7	51		 push	 ecx
  016f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01700	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01705	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2596 : 
; 2597 : 		draw_2d_line (0.9, -0.400, 0.9 + 0.03, -0.400, MFD_COLOUR1);

  0170a	b8 04 00 00 00	 mov	 eax, 4
  0170f	6b c8 00	 imul	 ecx, eax, 0
  01712	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01718	52		 push	 edx
  01719	51		 push	 ecx
  0171a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  01722	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01727	51		 push	 ecx
  01728	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01730	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01735	51		 push	 ecx
  01736	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0173e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01743	51		 push	 ecx
  01744	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0174c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01751	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2598 : 
; 2599 : 		draw_2d_line (0.9, -0.500, 0.9 + 0.03, -0.500, MFD_COLOUR1);

  01756	b8 04 00 00 00	 mov	 eax, 4
  0175b	6b c8 00	 imul	 ecx, eax, 0
  0175e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01764	52		 push	 edx
  01765	51		 push	 ecx
  01766	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0176e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01773	51		 push	 ecx
  01774	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  0177c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01781	51		 push	 ecx
  01782	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0178a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0178f	51		 push	 ecx
  01790	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01798	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0179d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN50@draw_2d_eo:

; 2600 : 	}
; 2601 : 
; 2602 : 	if (target_range > 0.0)

  017a2	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  017aa	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  017b2	0f 86 aa 00 00
	00		 jbe	 $LN53@draw_2d_eo

; 2603 : 	{
; 2604 : 		marker_position = (min (target_range, eo_max_visual_range) / eo_max_visual_range) * -0.5;

  017b8	68 00 00 00 00	 push	 OFFSET ?eo_max_visual_range@@3MA ; eo_max_visual_range
  017bd	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _target_range$[ebp]
  017c3	50		 push	 eax
  017c4	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  017c9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  017cd	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_visual_range@@3MA
  017d5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  017d9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  017e1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017e5	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0

; 2605 : 
; 2606 : 		if (draw_large_mfd)

  017ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  017f4	74 37		 je	 SHORT $LN52@draw_2d_eo

; 2607 : 		{
; 2608 : 			draw_2d_mono_sprite (large_range_marker, 0.9, marker_position, MFD_COLOUR1);

  017f6	b8 04 00 00 00	 mov	 eax, 4
  017fb	6b c8 00	 imul	 ecx, eax, 0
  017fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01804	52		 push	 edx
  01805	51		 push	 ecx
  01806	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  0180e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01813	51		 push	 ecx
  01814	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0181c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01821	68 00 00 00 00	 push	 OFFSET ?large_range_marker@@3PADA
  01826	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2609 : 		}
; 2610 : 		else

  0182b	eb 35		 jmp	 SHORT $LN53@draw_2d_eo
$LN52@draw_2d_eo:

; 2611 : 		{
; 2612 : 			draw_2d_mono_sprite (small_range_marker, 0.9, marker_position, MFD_COLOUR1);

  0182d	b8 04 00 00 00	 mov	 eax, 4
  01832	6b c8 00	 imul	 ecx, eax, 0
  01835	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0183b	52		 push	 edx
  0183c	51		 push	 ecx
  0183d	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  01845	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0184a	51		 push	 ecx
  0184b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01853	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01858	68 00 00 00 00	 push	 OFFSET ?small_range_marker@@3PADA
  0185d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN53@draw_2d_eo:

; 2613 : 		}
; 2614 : 	}
; 2615 : 
; 2616 : 	//
; 2617 : 	// target gates
; 2618 : 	//
; 2619 : 
; 2620 : 	if (target)

  01862	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  01869	0f 84 fd 04 00
	00		 je	 $LN55@draw_2d_eo

; 2621 : 	{
; 2622 : 		if (valid_3d)

  0186f	83 7d 10 00	 cmp	 DWORD PTR _valid_3d$[ebp], 0
  01873	0f 84 f3 04 00
	00		 je	 $LN55@draw_2d_eo

; 2623 : 		{
; 2624 : 			tmp = main_vp;

  01879	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0187e	be 00 00 00 00	 mov	 esi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  01883	8d bd bc fe ff
	ff		 lea	 edi, DWORD PTR _tmp$[ebp]
  01889	f3 a5		 rep movsd

; 2625 : 
; 2626 : 			main_vp = eo_vp;

  0188b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01890	be 00 00 00 00	 mov	 esi, OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  01895	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  0189a	f3 a5		 rep movsd

; 2627 : 
; 2628 : 			get_local_entity_target_point (target, &target_point);

  0189c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _target_point$[ebp]
  018a2	50		 push	 eax
  018a3	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  018a9	51		 push	 ecx
  018aa	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 2629 : 
; 2630 : 			visibility = get_position_3d_screen_coordinates (&target_point, &i, &j);

  018af	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  018b5	50		 push	 eax
  018b6	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  018bc	51		 push	 ecx
  018bd	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _target_point$[ebp]
  018c3	52		 push	 edx
  018c4	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  018c9	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _visibility$[ebp], eax

; 2631 : 
; 2632 : 			if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  018cf	83 bd b8 fe ff
	ff 01		 cmp	 DWORD PTR _visibility$[ebp], 1
  018d6	74 0d		 je	 SHORT $LN57@draw_2d_eo
  018d8	83 bd b8 fe ff
	ff 02		 cmp	 DWORD PTR _visibility$[ebp], 2
  018df	0f 85 75 04 00
	00		 jne	 $LN56@draw_2d_eo
$LN57@draw_2d_eo:

; 2633 : 			{
; 2634 : 				if (scaled_3d)

  018e5	83 7d 14 00	 cmp	 DWORD PTR _scaled_3d$[ebp], 0
  018e9	74 60		 je	 SHORT $LN58@draw_2d_eo

; 2635 : 				{
; 2636 : 					i -= i_translate_3d;

  018eb	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  018f3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?i_translate_3d@@3MA
  018fb	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _i$[ebp], xmm0

; 2637 : 					j -= j_translate_3d;

  01903	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  0190b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?j_translate_3d@@3MA
  01913	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _j$[ebp], xmm0

; 2638 : 
; 2639 : 					i *= i_scale_3d;

  0191b	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  01923	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?i_scale_3d@@3MA
  0192b	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _i$[ebp], xmm0

; 2640 : 					j *= j_scale_3d;

  01933	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  0193b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?j_scale_3d@@3MA
  01943	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _j$[ebp], xmm0
$LN58@draw_2d_eo:

; 2641 : 				}
; 2642 : 
; 2643 : 				get_2d_world_position (i, j, &x, &y);

  0194b	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _y$[ebp]
  01951	50		 push	 eax
  01952	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _x$[ebp]
  01958	51		 push	 ecx
  01959	51		 push	 ecx
  0195a	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  01962	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01967	51		 push	 ecx
  01968	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  01970	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01975	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 2644 : 
; 2645 : 				draw_2d_line (x - 0.20, y + 0.20, x - 0.15, y + 0.20, MFD_COLOUR1);

  0197a	b8 04 00 00 00	 mov	 eax, 4
  0197f	6b c8 00	 imul	 ecx, eax, 0
  01982	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01988	52		 push	 edx
  01989	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01991	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01999	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0199d	51		 push	 ecx
  0199e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a3	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  019ab	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  019b3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019b7	51		 push	 ecx
  019b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019bd	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  019c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  019cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019d1	51		 push	 ecx
  019d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d7	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  019df	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  019e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019eb	51		 push	 ecx
  019ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2646 : 				draw_2d_line (x + 0.20, y + 0.20, x + 0.15, y + 0.20, MFD_COLOUR1);

  019f6	b8 04 00 00 00	 mov	 eax, 4
  019fb	6b c8 00	 imul	 ecx, eax, 0
  019fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a04	52		 push	 edx
  01a05	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01a0d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01a15	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a19	51		 push	 ecx
  01a1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a1f	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01a27	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01a2f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a33	51		 push	 ecx
  01a34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a39	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01a41	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01a49	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a4d	51		 push	 ecx
  01a4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a53	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01a5b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01a63	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a67	51		 push	 ecx
  01a68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a6d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2647 : 				draw_2d_line (x - 0.20, y - 0.20, x - 0.15, y - 0.20, MFD_COLOUR1);

  01a72	b8 04 00 00 00	 mov	 eax, 4
  01a77	6b c8 00	 imul	 ecx, eax, 0
  01a7a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a80	52		 push	 edx
  01a81	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01a89	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01a91	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a95	51		 push	 ecx
  01a96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a9b	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01aa3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01aab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01aaf	51		 push	 ecx
  01ab0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ab5	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01abd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01ac5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ac9	51		 push	 ecx
  01aca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01acf	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01ad7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01adf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ae3	51		 push	 ecx
  01ae4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ae9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2648 : 				draw_2d_line (x + 0.20, y - 0.20, x + 0.15, y - 0.20, MFD_COLOUR1);

  01aee	b8 04 00 00 00	 mov	 eax, 4
  01af3	6b c8 00	 imul	 ecx, eax, 0
  01af6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01afc	52		 push	 edx
  01afd	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01b05	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b0d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b11	51		 push	 ecx
  01b12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b17	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01b1f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01b27	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b2b	51		 push	 ecx
  01b2c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b31	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01b39	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b41	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b45	51		 push	 ecx
  01b46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b4b	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01b53	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b5b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b5f	51		 push	 ecx
  01b60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b65	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2649 : 				draw_2d_line (x - 0.20, y + 0.20, x - 0.20, y + 0.15, MFD_COLOUR1);

  01b6a	b8 04 00 00 00	 mov	 eax, 4
  01b6f	6b c8 00	 imul	 ecx, eax, 0
  01b72	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b78	52		 push	 edx
  01b79	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01b81	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01b89	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b8d	51		 push	 ecx
  01b8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b93	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01b9b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01ba3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ba7	51		 push	 ecx
  01ba8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bad	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01bb5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01bbd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bc1	51		 push	 ecx
  01bc2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bc7	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01bcf	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01bd7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bdb	51		 push	 ecx
  01bdc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2650 : 				draw_2d_line (x - 0.20, y - 0.20, x - 0.20, y - 0.15, MFD_COLOUR1);

  01be6	b8 04 00 00 00	 mov	 eax, 4
  01beb	6b c8 00	 imul	 ecx, eax, 0
  01bee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bf4	52		 push	 edx
  01bf5	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01bfd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01c05	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c09	51		 push	 ecx
  01c0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0f	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01c17	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c1f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c23	51		 push	 ecx
  01c24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c29	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01c31	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c39	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c3d	51		 push	 ecx
  01c3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c43	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01c4b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c53	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c57	51		 push	 ecx
  01c58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c5d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2651 : 				draw_2d_line (x + 0.20, y + 0.20, x + 0.20, y + 0.15, MFD_COLOUR1);

  01c62	b8 04 00 00 00	 mov	 eax, 4
  01c67	6b c8 00	 imul	 ecx, eax, 0
  01c6a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c70	52		 push	 edx
  01c71	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01c79	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01c81	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c85	51		 push	 ecx
  01c86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c8b	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01c93	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c9b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c9f	51		 push	 ecx
  01ca0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ca5	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01cad	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01cb5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cb9	51		 push	 ecx
  01cba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cbf	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01cc7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01ccf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cd3	51		 push	 ecx
  01cd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cd9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2652 : 				draw_2d_line (x + 0.20, y - 0.20, x + 0.20, y - 0.15, MFD_COLOUR1);

  01cde	b8 04 00 00 00	 mov	 eax, 4
  01ce3	6b c8 00	 imul	 ecx, eax, 0
  01ce6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01cec	52		 push	 edx
  01ced	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01cf5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01cfd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d01	51		 push	 ecx
  01d02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d07	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01d0f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d17	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d1b	51		 push	 ecx
  01d1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d21	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01d29	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d31	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d35	51		 push	 ecx
  01d36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d3b	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01d43	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d4b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d4f	51		 push	 ecx
  01d50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d55	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN56@draw_2d_eo:

; 2653 : 			}
; 2654 : 
; 2655 : 			main_vp = tmp;

  01d5a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01d5f	8d b5 bc fe ff
	ff		 lea	 esi, DWORD PTR _tmp$[ebp]
  01d65	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  01d6a	f3 a5		 rep movsd
$LN55@draw_2d_eo:

; 2656 : 		}
; 2657 : 	}
; 2658 : }

  01d6c	5f		 pop	 edi
  01d6d	5e		 pop	 esi
  01d6e	5b		 pop	 ebx
  01d6f	8b e5		 mov	 esp, ebp
  01d71	5d		 pop	 ebp
  01d72	c2 10 00	 ret	 16			; 00000010H
?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ENDP ; draw_2d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z
_TEXT	SEGMENT
tv151 = -96						; size = 4
tv91 = -96						; size = 4
tv163 = -92						; size = 4
tv143 = -92						; size = 4
tv83 = -92						; size = 4
tv70 = -92						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_size$ = 24						; size = 4
?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z PROC ; draw_overlaid_3d_eo_display, COMDAT

; 1961 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1962 : 	float
; 1963 : 		zoom;
; 1964 : 
; 1965 : 	display_3d_light_levels
; 1966 : 		light_level;
; 1967 : 
; 1968 : 	display_3d_noise_levels
; 1969 : 		noise_level;
; 1970 : 
; 1971 : 	vec3d
; 1972 : 		*position;
; 1973 : 
; 1974 : 	weathermodes
; 1975 : 		weather_mode;
; 1976 : 
; 1977 : 	day_segment_types
; 1978 : 		day_segment_type;
; 1979 : 
; 1980 : 	ASSERT (eo);

  00009	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@draw_overl
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00014	83 c0 13	 add	 eax, 19			; 00000013H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_overl:

; 1981 : 
; 1982 : 	switch (eo->field_of_view)

  00027	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d a4	 mov	 DWORD PTR tv70[ebp], ecx
  0002f	83 7d a4 01	 cmp	 DWORD PTR tv70[ebp], 1
  00033	74 0e		 je	 SHORT $LN7@draw_overl
  00035	83 7d a4 02	 cmp	 DWORD PTR tv70[ebp], 2
  00039	74 17		 je	 SHORT $LN8@draw_overl
  0003b	83 7d a4 03	 cmp	 DWORD PTR tv70[ebp], 3
  0003f	74 20		 je	 SHORT $LN9@draw_overl
  00041	eb 2d		 jmp	 SHORT $LN10@draw_overl
$LN7@draw_overl:

; 1983 : 	{
; 1984 : 		case EO_FOV_NARROW:
; 1985 : 		{
; 1986 : 			zoom = 1.0 / 128.0;

  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c000000
  0004b	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 1987 : 
; 1988 : 			break;

  00050	eb 31		 jmp	 SHORT $LN2@draw_overl
$LN8@draw_overl:

; 1989 : 		}
; 1990 : 		case EO_FOV_MEDIUM:
; 1991 : 		{
; 1992 : 			zoom = 1.0 / 8.0;

  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  0005a	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 1993 : 
; 1994 : 			break;

  0005f	eb 22		 jmp	 SHORT $LN2@draw_overl
$LN9@draw_overl:

; 1995 : 		}
; 1996 : 		case EO_FOV_WIDE:
; 1997 : 		{
; 1998 : 			zoom = 1.0;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00069	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 1999 : 
; 2000 : 			break;

  0006e	eb 13		 jmp	 SHORT $LN2@draw_overl
$LN10@draw_overl:

; 2001 : 		}
; 2002 : 		default:
; 2003 : 		{
; 2004 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  00070	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	51		 push	 ecx
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  0007b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00080	83 c4 08	 add	 esp, 8
$LN2@draw_overl:

; 2005 : 
; 2006 : 			break;
; 2007 : 		}
; 2008 : 	}
; 2009 : 
; 2010 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008a	74 0c		 je	 SHORT $LN19@draw_overl
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	89 4d a4	 mov	 DWORD PTR tv83[ebp], ecx
  00096	eb 21		 jmp	 SHORT $LN20@draw_overl
$LN19@draw_overl:
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  0009e	83 c2 31	 add	 edx, 49			; 00000031H
  000a1	52		 push	 edx
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b2	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN20@draw_overl:
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	85 c9		 test	 ecx, ecx
  000c0	74 09		 je	 SHORT $LN21@draw_overl
  000c2	c7 45 a0 08 00
	00 00		 mov	 DWORD PTR tv91[ebp], 8
  000c9	eb 21		 jmp	 SHORT $LN22@draw_overl
$LN21@draw_overl:
  000cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  000d1	83 c2 31	 add	 edx, 49			; 00000031H
  000d4	52		 push	 edx
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e5	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN22@draw_overl:
  000ec	6a 08		 push	 8
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f4	51		 push	 ecx
  000f5	6b 55 a4 60	 imul	 edx, DWORD PTR tv83[ebp], 96
  000f9	8b 45 a0	 mov	 eax, DWORD PTR tv91[ebp]
  000fc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00103	ff d1		 call	 ecx
  00105	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 2011 : 
; 2012 : 	weather_mode = get_simple_session_weather_at_point (position);

  00108	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  00111	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 2013 : 
; 2014 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  00114	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  00118	7e 06		 jle	 SHORT $LN12@draw_overl
  0011a	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  0011e	7c 18		 jl	 SHORT $LN11@draw_overl
$LN12@draw_overl:
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00125	83 c0 35	 add	 eax, 53			; 00000035H
  00128	50		 push	 eax
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00133	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_overl:

; 2015 : 
; 2016 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  00138	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0013f	74 0c		 je	 SHORT $LN23@draw_overl
  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00146	8b 08		 mov	 ecx, DWORD PTR [eax]
  00148	89 4d a4	 mov	 DWORD PTR tv143[ebp], ecx
  0014b	eb 21		 jmp	 SHORT $LN24@draw_overl
$LN23@draw_overl:
  0014d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00153	83 c2 37	 add	 edx, 55			; 00000037H
  00156	52		 push	 edx
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00167	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv143[ebp], 0
$LN24@draw_overl:
  0016e	b9 01 00 00 00	 mov	 ecx, 1
  00173	85 c9		 test	 ecx, ecx
  00175	74 09		 je	 SHORT $LN25@draw_overl
  00177	c7 45 a0 27 00
	00 00		 mov	 DWORD PTR tv151[ebp], 39 ; 00000027H
  0017e	eb 21		 jmp	 SHORT $LN26@draw_overl
$LN25@draw_overl:
  00180	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00186	83 c2 37	 add	 edx, 55			; 00000037H
  00189	52		 push	 edx
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0019a	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN26@draw_overl:
  001a1	6a 27		 push	 39			; 00000027H
  001a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001a9	51		 push	 ecx
  001aa	69 55 a4 5c 04
	00 00		 imul	 edx, DWORD PTR tv143[ebp], 1116
  001b1	8b 45 a0	 mov	 eax, DWORD PTR tv151[ebp]
  001b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001bb	ff d1		 call	 ecx
  001bd	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 2017 : 
; 2018 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001c0	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001c4	7c 06		 jl	 SHORT $LN14@draw_overl
  001c6	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001ca	7c 18		 jl	 SHORT $LN13@draw_overl
$LN14@draw_overl:
  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  001d1	83 c0 39	 add	 eax, 57			; 00000039H
  001d4	50		 push	 eax
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@draw_overl:

; 2019 : 
; 2020 : 	switch (system)

  001e4	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001e7	89 45 a4	 mov	 DWORD PTR tv163[ebp], eax
  001ea	83 7d a4 03	 cmp	 DWORD PTR tv163[ebp], 3
  001ee	74 08		 je	 SHORT $LN15@draw_overl
  001f0	83 7d a4 06	 cmp	 DWORD PTR tv163[ebp], 6
  001f4	74 2a		 je	 SHORT $LN16@draw_overl
  001f6	eb 50		 jmp	 SHORT $LN17@draw_overl
$LN15@draw_overl:

; 2021 : 	{
; 2022 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2023 : 		{
; 2024 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001f8	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001fb	c1 e0 04	 shl	 eax, 4
  001fe	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00201	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00208	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2025 : 
; 2026 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0020b	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0020e	c1 e0 04	 shl	 eax, 4
  00211	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00214	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0021b	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2027 : 
; 2028 : 			break;

  0021e	eb 39		 jmp	 SHORT $LN4@draw_overl
$LN16@draw_overl:

; 2029 : 		}
; 2030 : 		case TARGET_ACQUISITION_SYSTEM_LLLTV:
; 2031 : 		{
; 2032 : 			light_level = llltv_light_levels[weather_mode][day_segment_type];

  00220	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00223	c1 e0 04	 shl	 eax, 4
  00226	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00229	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?llltv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00230	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2033 : 
; 2034 : 			noise_level = llltv_noise_levels[weather_mode][day_segment_type];

  00233	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00236	c1 e0 04	 shl	 eax, 4
  00239	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0023c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?llltv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00243	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2035 : 
; 2036 : 			break;

  00246	eb 11		 jmp	 SHORT $LN4@draw_overl
$LN17@draw_overl:

; 2037 : 		}
; 2038 : 		default:
; 2039 : 		{
; 2040 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00248	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  0024b	50		 push	 eax
  0024c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00251	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00256	83 c4 08	 add	 esp, 8
$LN4@draw_overl:

; 2041 : 
; 2042 : 			break;
; 2043 : 		}
; 2044 : 	}
; 2045 : 
; 2046 : 	set_main_3d_params (DISPLAY_3D_TINT_AMBER, light_level, noise_level, x, y, size, size, rad (59.99) * zoom, rad (59.99) * zoom);

  00259	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  0025e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00266	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026a	51		 push	 ecx
  0026b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00270	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00275	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0027d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00281	51		 push	 ecx
  00282	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00287	51		 push	 ecx
  00288	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _size$[ebp]
  0028d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00292	51		 push	 ecx
  00293	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _size$[ebp]
  00298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029d	51		 push	 ecx
  0029e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y$[ebp]
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	51		 push	 ecx
  002a9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x$[ebp]
  002ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b3	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  002b6	50		 push	 eax
  002b7	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  002ba	51		 push	 ecx
  002bb	6a 01		 push	 1
  002bd	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2047 : 
; 2048 : 	draw_eo_3d_scene = TRUE;

  002c2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 2049 : 
; 2050 : 	draw_main_3d_scene (&eo_vp);

  002cc	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  002d1	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 2051 : 
; 2052 : 	draw_eo_3d_scene = FALSE;

  002d6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 2053 : }

  002e0	5f		 pop	 edi
  002e1	5e		 pop	 esi
  002e2	5b		 pop	 ebx
  002e3	8b e5		 mov	 esp, ebp
  002e5	5d		 pop	 ebp
  002e6	c2 14 00	 ret	 20			; 00000014H
?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ENDP ; draw_overlaid_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv161 = -100						; size = 4
tv133 = -100						; size = 4
tv173 = -96						; size = 4
tv153 = -96						; size = 4
tv93 = -96						; size = 4
tv80 = -96						; size = 4
_tint$ = -28						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_3d_eo_display_on_texture, COMDAT

; 1841 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1842 : 	float
; 1843 : 		zoom;
; 1844 : 
; 1845 : 	display_3d_light_levels
; 1846 : 		light_level;
; 1847 : 
; 1848 : 	display_3d_noise_levels
; 1849 : 		noise_level;
; 1850 : 
; 1851 : 	vec3d
; 1852 : 		*position;
; 1853 : 
; 1854 : 	weathermodes
; 1855 : 		weather_mode;
; 1856 : 
; 1857 : 	day_segment_types
; 1858 : 		day_segment_type;
; 1859 : 
; 1860 : 	display_3d_tints
; 1861 : 		tint;
; 1862 : 
; 1863 : 	ASSERT (eo);

  00009	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@draw_3d_eo
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00014	83 c0 16	 add	 eax, 22			; 00000016H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 1864 : 
; 1865 : 	ASSERT (eo_3d_texture_screen);

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  0002e	75 18		 jne	 SHORT $LN7@draw_3d_eo
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_3d_eo:

; 1866 : 
; 1867 : 	ASSERT (d3d_can_render_to_texture);

  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  0004f	75 18		 jne	 SHORT $LN8@draw_3d_eo
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00056	83 c0 1a	 add	 eax, 26			; 0000001aH
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_3d_eo:

; 1868 : 
; 1869 : 	switch (eo->field_of_view)

  00069	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00071	83 7d a0 01	 cmp	 DWORD PTR tv80[ebp], 1
  00075	74 0e		 je	 SHORT $LN9@draw_3d_eo
  00077	83 7d a0 02	 cmp	 DWORD PTR tv80[ebp], 2
  0007b	74 17		 je	 SHORT $LN10@draw_3d_eo
  0007d	83 7d a0 03	 cmp	 DWORD PTR tv80[ebp], 3
  00081	74 20		 je	 SHORT $LN11@draw_3d_eo
  00083	eb 2d		 jmp	 SHORT $LN12@draw_3d_eo
$LN9@draw_3d_eo:

; 1870 : 	{
; 1871 : 		case EO_FOV_NARROW:
; 1872 : 		{
; 1873 : 			zoom = 1.0 / 128.0;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c000000
  0008d	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 1874 : 
; 1875 : 			break;

  00092	eb 31		 jmp	 SHORT $LN2@draw_3d_eo
$LN10@draw_3d_eo:

; 1876 : 		}
; 1877 : 		case EO_FOV_MEDIUM:
; 1878 : 		{
; 1879 : 			zoom = 1.0 / 8.0;

  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  0009c	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 1880 : 
; 1881 : 			break;

  000a1	eb 22		 jmp	 SHORT $LN2@draw_3d_eo
$LN11@draw_3d_eo:

; 1882 : 		}
; 1883 : 		case EO_FOV_WIDE:
; 1884 : 		{
; 1885 : 			zoom = 1.0;

  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ab	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 1886 : 
; 1887 : 			break;

  000b0	eb 13		 jmp	 SHORT $LN2@draw_3d_eo
$LN12@draw_3d_eo:

; 1888 : 		}
; 1889 : 		default:
; 1890 : 		{
; 1891 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  000b2	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	51		 push	 ecx
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  000bd	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000c2	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 1892 : 
; 1893 : 			break;
; 1894 : 		}
; 1895 : 	}
; 1896 : 
; 1897 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  000c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  000cc	74 0c		 je	 SHORT $LN21@draw_3d_eo
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	89 4d a0	 mov	 DWORD PTR tv93[ebp], ecx
  000d8	eb 21		 jmp	 SHORT $LN22@draw_3d_eo
$LN21@draw_3d_eo:
  000da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000e0	83 c2 38	 add	 edx, 56			; 00000038H
  000e3	52		 push	 edx
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f4	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
$LN22@draw_3d_eo:
  000fb	b9 01 00 00 00	 mov	 ecx, 1
  00100	85 c9		 test	 ecx, ecx
  00102	74 09		 je	 SHORT $LN23@draw_3d_eo
  00104	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv133[ebp], 8
  0010b	eb 21		 jmp	 SHORT $LN24@draw_3d_eo
$LN23@draw_3d_eo:
  0010d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00113	83 c2 38	 add	 edx, 56			; 00000038H
  00116	52		 push	 edx
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00127	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN24@draw_3d_eo:
  0012e	6a 08		 push	 8
  00130	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00136	51		 push	 ecx
  00137	6b 55 a0 60	 imul	 edx, DWORD PTR tv93[ebp], 96
  0013b	8b 45 9c	 mov	 eax, DWORD PTR tv133[ebp]
  0013e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00145	ff d1		 call	 ecx
  00147	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 1898 : 
; 1899 : 	weather_mode = get_simple_session_weather_at_point (position);

  0014a	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  00153	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 1900 : 
; 1901 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  00156	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  0015a	7e 06		 jle	 SHORT $LN14@draw_3d_eo
  0015c	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  00160	7c 18		 jl	 SHORT $LN13@draw_3d_eo
$LN14@draw_3d_eo:
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00167	83 c0 3c	 add	 eax, 60			; 0000003cH
  0016a	50		 push	 eax
  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00170	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00175	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@draw_3d_eo:

; 1902 : 
; 1903 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  0017a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00181	74 0c		 je	 SHORT $LN25@draw_3d_eo
  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00188	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018a	89 4d a0	 mov	 DWORD PTR tv153[ebp], ecx
  0018d	eb 21		 jmp	 SHORT $LN26@draw_3d_eo
$LN25@draw_3d_eo:
  0018f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00195	83 c2 3e	 add	 edx, 62			; 0000003eH
  00198	52		 push	 edx
  00199	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a9	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN26@draw_3d_eo:
  001b0	b9 01 00 00 00	 mov	 ecx, 1
  001b5	85 c9		 test	 ecx, ecx
  001b7	74 09		 je	 SHORT $LN27@draw_3d_eo
  001b9	c7 45 9c 27 00
	00 00		 mov	 DWORD PTR tv161[ebp], 39 ; 00000027H
  001c0	eb 21		 jmp	 SHORT $LN28@draw_3d_eo
$LN27@draw_3d_eo:
  001c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001c8	83 c2 3e	 add	 edx, 62			; 0000003eH
  001cb	52		 push	 edx
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001dc	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv161[ebp], 0
$LN28@draw_3d_eo:
  001e3	6a 27		 push	 39			; 00000027H
  001e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001eb	51		 push	 ecx
  001ec	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv153[ebp], 1116
  001f3	8b 45 9c	 mov	 eax, DWORD PTR tv161[ebp]
  001f6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001fd	ff d1		 call	 ecx
  001ff	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 1904 : 
; 1905 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  00202	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  00206	7c 06		 jl	 SHORT $LN16@draw_3d_eo
  00208	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  0020c	7c 18		 jl	 SHORT $LN15@draw_3d_eo
$LN16@draw_3d_eo:
  0020e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00213	83 c0 40	 add	 eax, 64			; 00000040H
  00216	50		 push	 eax
  00217	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  00221	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@draw_3d_eo:

; 1906 : 
; 1907 : 	switch (system)

  00226	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00229	89 45 a0	 mov	 DWORD PTR tv173[ebp], eax
  0022c	83 7d a0 03	 cmp	 DWORD PTR tv173[ebp], 3
  00230	74 08		 je	 SHORT $LN17@draw_3d_eo
  00232	83 7d a0 06	 cmp	 DWORD PTR tv173[ebp], 6
  00236	74 31		 je	 SHORT $LN18@draw_3d_eo
  00238	eb 5e		 jmp	 SHORT $LN19@draw_3d_eo
$LN17@draw_3d_eo:

; 1908 : 	{
; 1909 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 1910 : 		{
; 1911 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  0023a	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0023d	c1 e0 04	 shl	 eax, 4
  00240	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00243	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0024a	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 1912 : 
; 1913 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0024d	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00250	c1 e0 04	 shl	 eax, 4
  00253	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00256	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0025d	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 1914 : 
; 1915 : 			tint = DISPLAY_3D_TINT_AMBER;

  00260	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 1

; 1916 : 
; 1917 : 			break;

  00267	eb 40		 jmp	 SHORT $LN4@draw_3d_eo
$LN18@draw_3d_eo:

; 1918 : 		}
; 1919 : 		case TARGET_ACQUISITION_SYSTEM_LLLTV:
; 1920 : 		{
; 1921 : 			light_level = llltv_light_levels[weather_mode][day_segment_type];

  00269	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0026c	c1 e0 04	 shl	 eax, 4
  0026f	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00272	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?llltv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00279	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 1922 : 
; 1923 : 			noise_level = llltv_noise_levels[weather_mode][day_segment_type];

  0027c	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0027f	c1 e0 04	 shl	 eax, 4
  00282	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00285	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?llltv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0028c	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 1924 : 
; 1925 : 			tint = DISPLAY_3D_TINT_AMBER_VISUAL;

  0028f	c7 45 e4 02 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 2

; 1926 : 
; 1927 : 			break;

  00296	eb 11		 jmp	 SHORT $LN4@draw_3d_eo
$LN19@draw_3d_eo:

; 1928 : 		}
; 1929 : 		default:
; 1930 : 		{
; 1931 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00298	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  0029b	50		 push	 eax
  0029c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  002a1	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002a6	83 c4 08	 add	 esp, 8
$LN4@draw_3d_eo:

; 1932 : 
; 1933 : 			break;
; 1934 : 		}
; 1935 : 	}
; 1936 : 
; 1937 : 	set_3d_render_target (eo_3d_texture_screen);

  002a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  002ae	50		 push	 eax
  002af	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 1938 : 
; 1939 : 	set_active_screen (eo_3d_texture_screen);

  002b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  002b9	50		 push	 eax
  002ba	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 1940 : 
; 1941 : 	set_main_3d_params (tint, light_level, noise_level, 0.0, 0.0, mfd_texture_size - 0.001, mfd_texture_size - 0.001, rad (59.99) * zoom, rad (59.99) * zoom);

  002bf	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002c4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d0	51		 push	 ecx
  002d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d6	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002db	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002e7	51		 push	 ecx
  002e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ed	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR ?mfd_texture_size@@3HA
  002f5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  002fd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00301	51		 push	 ecx
  00302	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00307	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR ?mfd_texture_size@@3HA
  0030f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00317	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0031b	51		 push	 ecx
  0031c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00321	51		 push	 ecx
  00322	0f 57 c0	 xorps	 xmm0, xmm0
  00325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032a	51		 push	 ecx
  0032b	0f 57 c0	 xorps	 xmm0, xmm0
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  00336	50		 push	 eax
  00337	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  0033a	51		 push	 ecx
  0033b	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  0033e	52		 push	 edx
  0033f	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 1942 : 
; 1943 : 	draw_eo_3d_scene = TRUE;

  00344	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 1944 : 
; 1945 : 	draw_main_3d_scene (&eo_vp);

  0034e	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  00353	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 1946 : 
; 1947 : 	draw_eo_3d_scene = FALSE;

  00358	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 1948 : 
; 1949 : 	finalise_3d_render_target_texture (eo_3d_texture_screen);

  00362	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00367	50		 push	 eax
  00368	e8 00 00 00 00	 call	 ?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ; finalise_3d_render_target_texture

; 1950 : 
; 1951 : 	set_3d_render_target (video_screen);

  0036d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00372	50		 push	 eax
  00373	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 1952 : 
; 1953 : 	set_active_screen (video_screen);

  00378	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0037d	50		 push	 eax
  0037e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 1954 : }

  00383	5f		 pop	 edi
  00384	5e		 pop	 esi
  00385	5b		 pop	 ebx
  00386	8b e5		 mov	 esp, ebp
  00388	5d		 pop	 ebp
  00389	c2 08 00	 ret	 8
?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_3d_eo_display_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv151 = -96						; size = 4
tv91 = -96						; size = 4
tv163 = -92						; size = 4
tv143 = -92						; size = 4
tv83 = -92						; size = 4
tv70 = -92						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_3d_eo_display, COMDAT

; 1735 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1736 : 	float
; 1737 : 		zoom;
; 1738 : 
; 1739 : 	display_3d_light_levels
; 1740 : 		light_level;
; 1741 : 
; 1742 : 	display_3d_noise_levels
; 1743 : 		noise_level;
; 1744 : 
; 1745 : 	vec3d
; 1746 : 		*position;
; 1747 : 
; 1748 : 	weathermodes
; 1749 : 		weather_mode;
; 1750 : 
; 1751 : 	day_segment_types
; 1752 : 		day_segment_type;
; 1753 : 
; 1754 : 	ASSERT (eo);

  00009	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@draw_3d_eo
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00014	83 c0 13	 add	 eax, 19			; 00000013H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 1755 : 
; 1756 : 	switch (eo->field_of_view)

  00027	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d a4	 mov	 DWORD PTR tv70[ebp], ecx
  0002f	83 7d a4 01	 cmp	 DWORD PTR tv70[ebp], 1
  00033	74 0e		 je	 SHORT $LN7@draw_3d_eo
  00035	83 7d a4 02	 cmp	 DWORD PTR tv70[ebp], 2
  00039	74 17		 je	 SHORT $LN8@draw_3d_eo
  0003b	83 7d a4 03	 cmp	 DWORD PTR tv70[ebp], 3
  0003f	74 20		 je	 SHORT $LN9@draw_3d_eo
  00041	eb 2d		 jmp	 SHORT $LN10@draw_3d_eo
$LN7@draw_3d_eo:

; 1757 : 	{
; 1758 : 		case EO_FOV_NARROW:
; 1759 : 		{
; 1760 : 			zoom = 1.0 / 128.0;

  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c000000
  0004b	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 1761 : 
; 1762 : 			break;

  00050	eb 31		 jmp	 SHORT $LN2@draw_3d_eo
$LN8@draw_3d_eo:

; 1763 : 		}
; 1764 : 		case EO_FOV_MEDIUM:
; 1765 : 		{
; 1766 : 			zoom = 1.0 / 8.0;

  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  0005a	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 1767 : 
; 1768 : 			break;

  0005f	eb 22		 jmp	 SHORT $LN2@draw_3d_eo
$LN9@draw_3d_eo:

; 1769 : 		}
; 1770 : 		case EO_FOV_WIDE:
; 1771 : 		{
; 1772 : 			zoom = 1.0;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00069	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 1773 : 
; 1774 : 			break;

  0006e	eb 13		 jmp	 SHORT $LN2@draw_3d_eo
$LN10@draw_3d_eo:

; 1775 : 		}
; 1776 : 		default:
; 1777 : 		{
; 1778 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  00070	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	51		 push	 ecx
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  0007b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00080	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 1779 : 
; 1780 : 			break;
; 1781 : 		}
; 1782 : 	}
; 1783 : 
; 1784 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008a	74 0c		 je	 SHORT $LN21@draw_3d_eo
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	89 4d a4	 mov	 DWORD PTR tv83[ebp], ecx
  00096	eb 21		 jmp	 SHORT $LN22@draw_3d_eo
$LN21@draw_3d_eo:
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0009e	83 c2 31	 add	 edx, 49			; 00000031H
  000a1	52		 push	 edx
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b2	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN22@draw_3d_eo:
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	85 c9		 test	 ecx, ecx
  000c0	74 09		 je	 SHORT $LN23@draw_3d_eo
  000c2	c7 45 a0 08 00
	00 00		 mov	 DWORD PTR tv91[ebp], 8
  000c9	eb 21		 jmp	 SHORT $LN24@draw_3d_eo
$LN23@draw_3d_eo:
  000cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000d1	83 c2 31	 add	 edx, 49			; 00000031H
  000d4	52		 push	 edx
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e5	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN24@draw_3d_eo:
  000ec	6a 08		 push	 8
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f4	51		 push	 ecx
  000f5	6b 55 a4 60	 imul	 edx, DWORD PTR tv83[ebp], 96
  000f9	8b 45 a0	 mov	 eax, DWORD PTR tv91[ebp]
  000fc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00103	ff d1		 call	 ecx
  00105	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 1785 : 
; 1786 : 	weather_mode = get_simple_session_weather_at_point (position);

  00108	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  00111	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 1787 : 
; 1788 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  00114	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  00118	7e 06		 jle	 SHORT $LN12@draw_3d_eo
  0011a	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  0011e	7c 18		 jl	 SHORT $LN11@draw_3d_eo
$LN12@draw_3d_eo:
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00125	83 c0 35	 add	 eax, 53			; 00000035H
  00128	50		 push	 eax
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00133	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_3d_eo:

; 1789 : 
; 1790 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  00138	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0013f	74 0c		 je	 SHORT $LN25@draw_3d_eo
  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00146	8b 08		 mov	 ecx, DWORD PTR [eax]
  00148	89 4d a4	 mov	 DWORD PTR tv143[ebp], ecx
  0014b	eb 21		 jmp	 SHORT $LN26@draw_3d_eo
$LN25@draw_3d_eo:
  0014d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00153	83 c2 37	 add	 edx, 55			; 00000037H
  00156	52		 push	 edx
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00167	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv143[ebp], 0
$LN26@draw_3d_eo:
  0016e	b9 01 00 00 00	 mov	 ecx, 1
  00173	85 c9		 test	 ecx, ecx
  00175	74 09		 je	 SHORT $LN27@draw_3d_eo
  00177	c7 45 a0 27 00
	00 00		 mov	 DWORD PTR tv151[ebp], 39 ; 00000027H
  0017e	eb 21		 jmp	 SHORT $LN28@draw_3d_eo
$LN27@draw_3d_eo:
  00180	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00186	83 c2 37	 add	 edx, 55			; 00000037H
  00189	52		 push	 edx
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0019a	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN28@draw_3d_eo:
  001a1	6a 27		 push	 39			; 00000027H
  001a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001a9	51		 push	 ecx
  001aa	69 55 a4 5c 04
	00 00		 imul	 edx, DWORD PTR tv143[ebp], 1116
  001b1	8b 45 a0	 mov	 eax, DWORD PTR tv151[ebp]
  001b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001bb	ff d1		 call	 ecx
  001bd	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 1791 : 
; 1792 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001c0	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001c4	7c 06		 jl	 SHORT $LN14@draw_3d_eo
  001c6	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001ca	7c 18		 jl	 SHORT $LN13@draw_3d_eo
$LN14@draw_3d_eo:
  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001d1	83 c0 39	 add	 eax, 57			; 00000039H
  001d4	50		 push	 eax
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@draw_3d_eo:

; 1793 : 
; 1794 : 	switch (system)

  001e4	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001e7	89 45 a4	 mov	 DWORD PTR tv163[ebp], eax
  001ea	83 7d a4 03	 cmp	 DWORD PTR tv163[ebp], 3
  001ee	74 08		 je	 SHORT $LN15@draw_3d_eo
  001f0	83 7d a4 06	 cmp	 DWORD PTR tv163[ebp], 6
  001f4	74 2a		 je	 SHORT $LN16@draw_3d_eo
  001f6	eb 50		 jmp	 SHORT $LN17@draw_3d_eo
$LN15@draw_3d_eo:

; 1795 : 	{
; 1796 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 1797 : 		{
; 1798 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001f8	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001fb	c1 e0 04	 shl	 eax, 4
  001fe	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00201	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00208	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 1799 : 
; 1800 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0020b	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0020e	c1 e0 04	 shl	 eax, 4
  00211	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00214	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0021b	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 1801 : 
; 1802 : 			break;

  0021e	eb 39		 jmp	 SHORT $LN4@draw_3d_eo
$LN16@draw_3d_eo:

; 1803 : 		}
; 1804 : 		case TARGET_ACQUISITION_SYSTEM_LLLTV:
; 1805 : 		{
; 1806 : 			light_level = llltv_light_levels[weather_mode][day_segment_type];

  00220	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00223	c1 e0 04	 shl	 eax, 4
  00226	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00229	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?llltv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00230	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 1807 : 
; 1808 : 			noise_level = llltv_noise_levels[weather_mode][day_segment_type];

  00233	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00236	c1 e0 04	 shl	 eax, 4
  00239	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0023c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?llltv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00243	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 1809 : 
; 1810 : 			break;

  00246	eb 11		 jmp	 SHORT $LN4@draw_3d_eo
$LN17@draw_3d_eo:

; 1811 : 		}
; 1812 : 		default:
; 1813 : 		{
; 1814 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00248	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  0024b	50		 push	 eax
  0024c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00251	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00256	83 c4 08	 add	 esp, 8
$LN4@draw_3d_eo:

; 1815 : 
; 1816 : 			break;
; 1817 : 		}
; 1818 : 	}
; 1819 : 
; 1820 : 	if (draw_large_mfd)

  00259	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00260	0f 84 92 00 00
	00		 je	 $LN18@draw_3d_eo

; 1821 : 	{
; 1822 : 		set_main_3d_params (DISPLAY_3D_TINT_AMBER, light_level, noise_level, mfd_viewport_x_min - 78.0, mfd_viewport_y_min - 17.0, 488.0, 366.0, rad (59.99) * zoom, rad (46.82) * zoom);

  00266	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  0026b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fea2633554ccccd
  00273	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00277	51		 push	 ecx
  00278	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00282	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0028a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0028e	51		 push	 ecx
  0028f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00294	51		 push	 ecx
  00295	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43b70000
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	51		 push	 ecx
  002a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43f40000
  002ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b0	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  002b8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4031000000000000
  002c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c4	51		 push	 ecx
  002c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ca	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  002d2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4053800000000000
  002da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002de	51		 push	 ecx
  002df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e4	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  002e7	50		 push	 eax
  002e8	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  002eb	51		 push	 ecx
  002ec	6a 01		 push	 1
  002ee	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 1823 : 	}
; 1824 : 	else

  002f3	e9 8d 00 00 00	 jmp	 $LN19@draw_3d_eo
$LN18@draw_3d_eo:

; 1825 : 	{
; 1826 : 		set_main_3d_params (DISPLAY_3D_TINT_AMBER, light_level, noise_level, mfd_viewport_x_min - 31.0, mfd_viewport_y_min - 10.0, 176.0, 132.0, rad (59.99) * zoom, rad (46.82) * zoom);

  002f8	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002fd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fea2633554ccccd
  00305	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00309	51		 push	 ecx
  0030a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00314	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0031c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00320	51		 push	 ecx
  00321	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00326	51		 push	 ecx
  00327	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43040000
  0032f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00334	51		 push	 ecx
  00335	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43300000
  0033d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00342	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0034a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  00352	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00356	51		 push	 ecx
  00357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00364	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@403f000000000000
  0036c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00370	51		 push	 ecx
  00371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00376	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  00379	50		 push	 eax
  0037a	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  0037d	51		 push	 ecx
  0037e	6a 01		 push	 1
  00380	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params
$LN19@draw_3d_eo:

; 1827 : 	}
; 1828 : 
; 1829 : 	draw_eo_3d_scene = TRUE;

  00385	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 1830 : 
; 1831 : 	draw_main_3d_scene (&eo_vp);

  0038f	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  00394	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 1832 : 
; 1833 : 	draw_eo_3d_scene = FALSE;

  00399	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 1834 : }

  003a3	5f		 pop	 edi
  003a4	5e		 pop	 esi
  003a5	5b		 pop	 ebx
  003a6	8b e5		 mov	 esp, ebp
  003a8	5d		 pop	 ebp
  003a9	c2 08 00	 ret	 8
?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_air_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv410 = -104						; size = 4
tv390 = -104						; size = 4
tv358 = -104						; size = 4
tv333 = -104						; size = 4
tv185 = -104						; size = 4
tv164 = -104						; size = 4
tv130 = -104						; size = 4
tv78 = -104						; size = 4
tv402 = -100						; size = 4
tv382 = -100						; size = 4
tv350 = -100						; size = 4
tv325 = -100						; size = 4
tv177 = -100						; size = 4
tv156 = -100						; size = 4
tv90 = -100						; size = 4
tv70 = -100						; size = 4
_target_position$ = -32					; size = 4
_source_position$ = -28					; size = 4
_target$ = -24						; size = 4
_source$ = -20						; size = 4
_target_range$ = -16					; size = 4
_scale$ = -12						; size = 4
_source_heading$ = -8					; size = 4
_source_side$ = -4					; size = 4
?draw_air_radar_mfd@@YGXXZ PROC				; draw_air_radar_mfd, COMDAT

; 1358 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1359 : 	entity_sides
; 1360 : 		source_side;
; 1361 : 
; 1362 : 	float
; 1363 : 		source_heading,
; 1364 : 		scale,
; 1365 : 		target_range;
; 1366 : 
; 1367 : 	entity
; 1368 : 		*source,
; 1369 : 		*target;
; 1370 : 
; 1371 : 	vec3d
; 1372 : 		*source_position,
; 1373 : 		*target_position;
; 1374 : 
; 1375 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 ec	 mov	 DWORD PTR _source$[ebp], eax

; 1376 : 
; 1377 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d ec 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN17@draw_air_r
  00017	8b 45 ec	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 9c	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN18@draw_air_r
$LN17@draw_air_r:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00027	83 c2 13	 add	 edx, 19			; 00000013H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN18@draw_air_r:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN19@draw_air_r
  0004b	c7 45 98 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN20@draw_air_r
$LN19@draw_air_r:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 13	 add	 edx, 19			; 00000013H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN20@draw_air_r:
  00075	6a 08		 push	 8
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 9c 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 98	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 e4	 mov	 DWORD PTR _source_position$[ebp], eax

; 1378 : 
; 1379 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  0008e	83 7d ec 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN21@draw_air_r
  00094	8b 45 ec	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 9c	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN22@draw_air_r
$LN21@draw_air_r:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 15	 add	 edx, 21			; 00000015H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN22@draw_air_r:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN23@draw_air_r
  000c8	c7 45 98 bb 00
	00 00		 mov	 DWORD PTR tv130[ebp], 187 ; 000000bbH
  000cf	eb 21		 jmp	 SHORT $LN24@draw_air_r
$LN23@draw_air_r:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 15	 add	 edx, 21			; 00000015H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN24@draw_air_r:
  000f2	68 bb 00 00 00	 push	 187			; 000000bbH
  000f7	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  000fa	51		 push	 ecx
  000fb	69 55 9c 5c 04
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 1116
  00102	8b 45 98	 mov	 eax, DWORD PTR tv130[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 fc	 mov	 DWORD PTR _source_side$[ebp], eax

; 1380 : 
; 1381 : 	////////////////////////////////////////
; 1382 : 	//
; 1383 : 	// text
; 1384 : 	//
; 1385 : 	////////////////////////////////////////
; 1386 : 
; 1387 : 	set_mono_font_colour (MFD_COLOUR1);

  00111	b8 04 00 00 00	 mov	 eax, 4
  00116	6b c8 00	 imul	 ecx, eax, 0
  00119	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 1388 : 
; 1389 : 	if (draw_large_mfd)

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0012c	74 09		 je	 SHORT $LN4@draw_air_r

; 1390 : 	{
; 1391 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0012e	6a 05		 push	 5
  00130	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1392 : 	}
; 1393 : 	else

  00135	eb 07		 jmp	 SHORT $LN5@draw_air_r
$LN4@draw_air_r:

; 1394 : 	{
; 1395 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00137	6a 01		 push	 1
  00139	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN5@draw_air_r:

; 1396 : 	}
; 1397 : 
; 1398 : 	//
; 1399 : 	// declutter status
; 1400 : 	//
; 1401 : 
; 1402 : 	set_2d_mono_font_position (-1.0, 1.0);

  0013e	51		 push	 ecx
  0013f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	51		 push	 ecx
  0014d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00155	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1403 : 
; 1404 : 	set_mono_font_rel_position (1.0, 1.0);

  0015f	51		 push	 ecx
  00160	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016d	51		 push	 ecx
  0016e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00176	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1405 : 
; 1406 : 	if (air_radar.show_allied_targets)

  00180	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+28, 0
  00187	74 0c		 je	 SHORT $LN6@draw_air_r

; 1407 : 	{
; 1408 : 		print_mono_font_string ("ALL");

  00189	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  0018e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1409 : 	}
; 1410 : 	else

  00193	eb 0a		 jmp	 SHORT $LN7@draw_air_r
$LN6@draw_air_r:

; 1411 : 	{
; 1412 : 		print_mono_font_string ("ENEMY");

  00195	68 00 00 00 00	 push	 OFFSET ??_C@_05EJJKHDCK@ENEMY@
  0019a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN7@draw_air_r:

; 1413 : 	}
; 1414 : 
; 1415 : 	//
; 1416 : 	// scan range
; 1417 : 	//
; 1418 : 
; 1419 : 	display_radar_scan_range (air_radar.scan_range);

  0019f	51		 push	 ecx
  001a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXM@Z ; display_radar_scan_range

; 1420 : 
; 1421 : 	//
; 1422 : 	// target details
; 1423 : 	//
; 1424 : 
; 1425 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  001b2	83 7d ec 00	 cmp	 DWORD PTR _source$[ebp], 0
  001b6	74 0a		 je	 SHORT $LN25@draw_air_r
  001b8	8b 45 ec	 mov	 eax, DWORD PTR _source$[ebp]
  001bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bd	89 4d 9c	 mov	 DWORD PTR tv156[ebp], ecx
  001c0	eb 21		 jmp	 SHORT $LN26@draw_air_r
$LN25@draw_air_r:
  001c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  001c8	83 c2 43	 add	 edx, 67			; 00000043H
  001cb	52		 push	 edx
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001dc	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv156[ebp], 0
$LN26@draw_air_r:
  001e3	b9 01 00 00 00	 mov	 ecx, 1
  001e8	85 c9		 test	 ecx, ecx
  001ea	74 09		 je	 SHORT $LN27@draw_air_r
  001ec	c7 45 98 26 00
	00 00		 mov	 DWORD PTR tv164[ebp], 38 ; 00000026H
  001f3	eb 21		 jmp	 SHORT $LN28@draw_air_r
$LN27@draw_air_r:
  001f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  001fb	83 c2 43	 add	 edx, 67			; 00000043H
  001fe	52		 push	 edx
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00204	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0020f	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv164[ebp], 0
$LN28@draw_air_r:
  00216	6a 26		 push	 38			; 00000026H
  00218	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  0021b	51		 push	 ecx
  0021c	69 55 9c b4 00
	00 00		 imul	 edx, DWORD PTR tv156[ebp], 180
  00223	8b 45 98	 mov	 eax, DWORD PTR tv164[ebp]
  00226	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0022d	ff d1		 call	 ecx
  0022f	89 45 e8	 mov	 DWORD PTR _target$[ebp], eax

; 1426 : 
; 1427 : 	if (target)

  00232	83 7d e8 00	 cmp	 DWORD PTR _target$[ebp], 0
  00236	0f 84 8f 00 00
	00		 je	 $LN8@draw_air_r

; 1428 : 	{
; 1429 : 		target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  0023c	83 7d e8 00	 cmp	 DWORD PTR _target$[ebp], 0
  00240	74 0a		 je	 SHORT $LN29@draw_air_r
  00242	8b 45 e8	 mov	 eax, DWORD PTR _target$[ebp]
  00245	8b 08		 mov	 ecx, DWORD PTR [eax]
  00247	89 4d 9c	 mov	 DWORD PTR tv177[ebp], ecx
  0024a	eb 21		 jmp	 SHORT $LN30@draw_air_r
$LN29@draw_air_r:
  0024c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00252	83 c2 47	 add	 edx, 71			; 00000047H
  00255	52		 push	 edx
  00256	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0025b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00266	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv177[ebp], 0
$LN30@draw_air_r:
  0026d	b9 01 00 00 00	 mov	 ecx, 1
  00272	85 c9		 test	 ecx, ecx
  00274	74 09		 je	 SHORT $LN31@draw_air_r
  00276	c7 45 98 08 00
	00 00		 mov	 DWORD PTR tv185[ebp], 8
  0027d	eb 21		 jmp	 SHORT $LN32@draw_air_r
$LN31@draw_air_r:
  0027f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00285	83 c2 47	 add	 edx, 71			; 00000047H
  00288	52		 push	 edx
  00289	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0028e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00293	50		 push	 eax
  00294	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00299	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN32@draw_air_r:
  002a0	6a 08		 push	 8
  002a2	8b 4d e8	 mov	 ecx, DWORD PTR _target$[ebp]
  002a5	51		 push	 ecx
  002a6	6b 55 9c 60	 imul	 edx, DWORD PTR tv177[ebp], 96
  002aa	8b 45 98	 mov	 eax, DWORD PTR tv185[ebp]
  002ad	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  002b4	ff d1		 call	 ecx
  002b6	89 45 e0	 mov	 DWORD PTR _target_position$[ebp], eax

; 1430 : 
; 1431 : 		target_range = get_3d_range (source_position, target_position);

  002b9	8b 45 e0	 mov	 eax, DWORD PTR _target_position$[ebp]
  002bc	50		 push	 eax
  002bd	8b 4d e4	 mov	 ecx, DWORD PTR _source_position$[ebp]
  002c0	51		 push	 ecx
  002c1	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  002c6	d9 5d f0	 fstp	 DWORD PTR _target_range$[ebp]

; 1432 : 	}
; 1433 : 	else

  002c9	eb 08		 jmp	 SHORT $LN9@draw_air_r
$LN8@draw_air_r:

; 1434 : 	{
; 1435 : 		target_range = 0.0;

  002cb	0f 57 c0	 xorps	 xmm0, xmm0
  002ce	f3 0f 11 45 f0	 movss	 DWORD PTR _target_range$[ebp], xmm0
$LN9@draw_air_r:

; 1436 : 	}
; 1437 : 
; 1438 : 	display_radar_target_details (target, target_range, &air_radar);

  002d3	68 00 00 00 00	 push	 OFFSET ?air_radar@@3URADAR_PARAMS@@A ; air_radar
  002d8	51		 push	 ecx
  002d9	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	8b 45 e8	 mov	 eax, DWORD PTR _target$[ebp]
  002e6	50		 push	 eax
  002e7	e8 00 00 00 00	 call	 ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ; display_radar_target_details

; 1439 : 
; 1440 : 	////////////////////////////////////////
; 1441 : 	//
; 1442 : 	// line graphics
; 1443 : 	//
; 1444 : 	////////////////////////////////////////
; 1445 : 
; 1446 : 	//
; 1447 : 	// datum markers
; 1448 : 	//
; 1449 : 
; 1450 : 	draw_2d_line ( 0.00,  TICK1,  0.00,  TICK2, MFD_COLOUR4);

  002ec	b8 04 00 00 00	 mov	 eax, 4
  002f1	6b c8 03	 imul	 ecx, eax, 3
  002f4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002fa	52		 push	 edx
  002fb	51		 push	 ecx
  002fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4c0000
  00304	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00309	51		 push	 ecx
  0030a	0f 57 c0	 xorps	 xmm0, xmm0
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	51		 push	 ecx
  00313	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f30cccd
  0031b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00320	51		 push	 ecx
  00321	0f 57 c0	 xorps	 xmm0, xmm0
  00324	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00329	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1451 : 	draw_2d_line ( TICK1,  0.00,  TICK2,  0.00, MFD_COLOUR4);

  0032e	b8 04 00 00 00	 mov	 eax, 4
  00333	6b c8 03	 imul	 ecx, eax, 3
  00336	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0033c	52		 push	 edx
  0033d	51		 push	 ecx
  0033e	0f 57 c0	 xorps	 xmm0, xmm0
  00341	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00346	51		 push	 ecx
  00347	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4c0000
  0034f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00354	51		 push	 ecx
  00355	0f 57 c0	 xorps	 xmm0, xmm0
  00358	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035d	51		 push	 ecx
  0035e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f30cccd
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1452 : 	draw_2d_line ( 0.00, -TICK1,  0.00, -TICK2, MFD_COLOUR4);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 03	 imul	 ecx, eax, 3
  00378	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0037e	52		 push	 edx
  0037f	51		 push	 ecx
  00380	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4c0000
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	51		 push	 ecx
  0038e	0f 57 c0	 xorps	 xmm0, xmm0
  00391	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00396	51		 push	 ecx
  00397	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf30cccd
  0039f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a4	51		 push	 ecx
  003a5	0f 57 c0	 xorps	 xmm0, xmm0
  003a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ad	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1453 : 	draw_2d_line (-TICK1,  0.00, -TICK2,  0.00, MFD_COLOUR4);

  003b2	b8 04 00 00 00	 mov	 eax, 4
  003b7	6b c8 03	 imul	 ecx, eax, 3
  003ba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003c0	52		 push	 edx
  003c1	51		 push	 ecx
  003c2	0f 57 c0	 xorps	 xmm0, xmm0
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4c0000
  003d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d8	51		 push	 ecx
  003d9	0f 57 c0	 xorps	 xmm0, xmm0
  003dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e1	51		 push	 ecx
  003e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf30cccd
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1454 : 
; 1455 : 	//
; 1456 : 	// range markers
; 1457 : 	//
; 1458 : 
; 1459 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.25, MFD_COLOUR4);

  003f4	b8 04 00 00 00	 mov	 eax, 4
  003f9	6b c8 03	 imul	 ecx, eax, 3
  003fc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00402	52		 push	 edx
  00403	51		 push	 ecx
  00404	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e59999a
  0040c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00411	51		 push	 ecx
  00412	0f 57 c0	 xorps	 xmm0, xmm0
  00415	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041a	51		 push	 ecx
  0041b	0f 57 c0	 xorps	 xmm0, xmm0
  0041e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00423	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 1460 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.50, MFD_COLOUR4);

  00428	b8 04 00 00 00	 mov	 eax, 4
  0042d	6b c8 03	 imul	 ecx, eax, 3
  00430	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00436	52		 push	 edx
  00437	51		 push	 ecx
  00438	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed9999a
  00440	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00445	51		 push	 ecx
  00446	0f 57 c0	 xorps	 xmm0, xmm0
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	51		 push	 ecx
  0044f	0f 57 c0	 xorps	 xmm0, xmm0
  00452	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00457	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 1461 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.75, MFD_COLOUR4);

  0045c	b8 04 00 00 00	 mov	 eax, 4
  00461	6b c8 03	 imul	 ecx, eax, 3
  00464	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0046a	52		 push	 edx
  0046b	51		 push	 ecx
  0046c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f233333
  00474	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00479	51		 push	 ecx
  0047a	0f 57 c0	 xorps	 xmm0, xmm0
  0047d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00482	51		 push	 ecx
  00483	0f 57 c0	 xorps	 xmm0, xmm0
  00486	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048b	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 1462 : 
; 1463 : 	//
; 1464 : 	// scan limits
; 1465 : 	//
; 1466 : 
; 1467 : 	if (air_radar.scan_arc_size == HAVOC_RADAR_SCAN_ARC_SIZE_360)

  00490	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00498	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@40c90fdb
  0049f	9f		 lahf
  004a0	f6 c4 44	 test	 ah, 68			; 00000044H
  004a3	7a 39		 jp	 SHORT $LN10@draw_air_r

; 1468 : 	{
; 1469 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR1);

  004a5	b8 04 00 00 00	 mov	 eax, 4
  004aa	6b c8 00	 imul	 ecx, eax, 0
  004ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004b3	52		 push	 edx
  004b4	51		 push	 ecx
  004b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  004bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c2	51		 push	 ecx
  004c3	0f 57 c0	 xorps	 xmm0, xmm0
  004c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cb	51		 push	 ecx
  004cc	0f 57 c0	 xorps	 xmm0, xmm0
  004cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d4	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 1470 : 	}
; 1471 : 	else

  004d9	e9 ab 01 00 00	 jmp	 $LN11@draw_air_r
$LN10@draw_air_r:

; 1472 : 	{
; 1473 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR4);

  004de	b8 04 00 00 00	 mov	 eax, 4
  004e3	6b c8 03	 imul	 ecx, eax, 3
  004e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004ec	52		 push	 edx
  004ed	51		 push	 ecx
  004ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	51		 push	 ecx
  004fc	0f 57 c0	 xorps	 xmm0, xmm0
  004ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00504	51		 push	 ecx
  00505	0f 57 c0	 xorps	 xmm0, xmm0
  00508	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050d	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 1474 : 
; 1475 : 		set_2d_window_rotation (mfd_env, -air_radar.scan_datum);

  00512	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  0051a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00521	51		 push	 ecx
  00522	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00527	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0052c	50		 push	 eax
  0052d	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1476 : 
; 1477 : 		draw_radar_arc (air_radar.scan_arc_size, RADIUS, MFD_COLOUR1);

  00532	b8 04 00 00 00	 mov	 eax, 4
  00537	6b c8 00	 imul	 ecx, eax, 0
  0053a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00540	52		 push	 edx
  00541	51		 push	 ecx
  00542	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0054a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054f	51		 push	 ecx
  00550	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00558	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055d	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1478 : 
; 1479 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00562	b8 04 00 00 00	 mov	 eax, 4
  00567	6b c8 00	 imul	 ecx, eax, 0
  0056a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00570	52		 push	 edx
  00571	51		 push	 ecx
  00572	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0057a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057f	51		 push	 ecx
  00580	0f 57 c0	 xorps	 xmm0, xmm0
  00583	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00588	51		 push	 ecx
  00589	0f 57 c0	 xorps	 xmm0, xmm0
  0058c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00591	51		 push	 ecx
  00592	0f 57 c0	 xorps	 xmm0, xmm0
  00595	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1480 : 
; 1481 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum - (air_radar.scan_arc_size * 0.5)));

  0059f	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  005a7	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  005af	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  005b7	f2 0f 5c c1	 subsd	 xmm0, xmm1
  005bb	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  005c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c6	51		 push	 ecx
  005c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005d1	50		 push	 eax
  005d2	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1482 : 
; 1483 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  005d7	b8 04 00 00 00	 mov	 eax, 4
  005dc	6b c8 00	 imul	 ecx, eax, 0
  005df	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005e5	52		 push	 edx
  005e6	51		 push	 ecx
  005e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  005ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f4	51		 push	 ecx
  005f5	0f 57 c0	 xorps	 xmm0, xmm0
  005f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fd	51		 push	 ecx
  005fe	0f 57 c0	 xorps	 xmm0, xmm0
  00601	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00606	51		 push	 ecx
  00607	0f 57 c0	 xorps	 xmm0, xmm0
  0060a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1484 : 
; 1485 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + (air_radar.scan_arc_size * 0.5)));

  00614	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  0061c	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00624	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0062c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00630	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00637	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0063b	51		 push	 ecx
  0063c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00641	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00646	50		 push	 eax
  00647	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1486 : 
; 1487 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  0064c	b8 04 00 00 00	 mov	 eax, 4
  00651	6b c8 00	 imul	 ecx, eax, 0
  00654	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0065a	52		 push	 edx
  0065b	51		 push	 ecx
  0065c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00664	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00669	51		 push	 ecx
  0066a	0f 57 c0	 xorps	 xmm0, xmm0
  0066d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00672	51		 push	 ecx
  00673	0f 57 c0	 xorps	 xmm0, xmm0
  00676	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067b	51		 push	 ecx
  0067c	0f 57 c0	 xorps	 xmm0, xmm0
  0067f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00684	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN11@draw_air_r:

; 1488 : 	}
; 1489 : 
; 1490 : 	//
; 1491 : 	// sweep
; 1492 : 	//
; 1493 : 
; 1494 : 	if (air_radar_is_active())

  00689	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  0068e	85 c0		 test	 eax, eax
  00690	74 79		 je	 SHORT $LN12@draw_air_r

; 1495 : 	{
; 1496 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + air_radar.sweep_offset));

  00692	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  0069a	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+12
  006a2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006a9	51		 push	 ecx
  006aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006b4	50		 push	 eax
  006b5	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1497 : 	
; 1498 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  006ba	b8 04 00 00 00	 mov	 eax, 4
  006bf	6b c8 00	 imul	 ecx, eax, 0
  006c2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006c8	52		 push	 edx
  006c9	51		 push	 ecx
  006ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  006d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d7	51		 push	 ecx
  006d8	0f 57 c0	 xorps	 xmm0, xmm0
  006db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e0	51		 push	 ecx
  006e1	0f 57 c0	 xorps	 xmm0, xmm0
  006e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e9	51		 push	 ecx
  006ea	0f 57 c0	 xorps	 xmm0, xmm0
  006ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1499 : 	
; 1500 : 		set_2d_window_rotation (mfd_env, 0.0);

  006f7	51		 push	 ecx
  006f8	0f 57 c0	 xorps	 xmm0, xmm0
  006fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00705	50		 push	 eax
  00706	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN12@draw_air_r:

; 1501 : 	}
; 1502 : 
; 1503 : 	////////////////////////////////////////
; 1504 : 	//
; 1505 : 	// draw targets
; 1506 : 	//
; 1507 : 	////////////////////////////////////////
; 1508 : 
; 1509 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0070b	83 7d ec 00	 cmp	 DWORD PTR _source$[ebp], 0
  0070f	74 0a		 je	 SHORT $LN33@draw_air_r
  00711	8b 45 ec	 mov	 eax, DWORD PTR _source$[ebp]
  00714	8b 08		 mov	 ecx, DWORD PTR [eax]
  00716	89 4d 9c	 mov	 DWORD PTR tv325[ebp], ecx
  00719	eb 24		 jmp	 SHORT $LN34@draw_air_r
$LN33@draw_air_r:
  0071b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00721	81 c2 97 00 00
	00		 add	 edx, 151		; 00000097H
  00727	52		 push	 edx
  00728	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0072d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00732	50		 push	 eax
  00733	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00738	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv325[ebp], 0
$LN34@draw_air_r:
  0073f	b9 01 00 00 00	 mov	 ecx, 1
  00744	85 c9		 test	 ecx, ecx
  00746	74 09		 je	 SHORT $LN35@draw_air_r
  00748	c7 45 98 34 00
	00 00		 mov	 DWORD PTR tv333[ebp], 52 ; 00000034H
  0074f	eb 24		 jmp	 SHORT $LN36@draw_air_r
$LN35@draw_air_r:
  00751	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00757	81 c2 97 00 00
	00		 add	 edx, 151		; 00000097H
  0075d	52		 push	 edx
  0075e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00763	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00768	50		 push	 eax
  00769	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0076e	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv333[ebp], 0
$LN36@draw_air_r:
  00775	6a 34		 push	 52			; 00000034H
  00777	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  0077a	51		 push	 ecx
  0077b	69 55 9c bc 02
	00 00		 imul	 edx, DWORD PTR tv325[ebp], 700
  00782	8b 45 98	 mov	 eax, DWORD PTR tv333[ebp]
  00785	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0078c	ff d1		 call	 ecx
  0078e	d9 5d f8	 fstp	 DWORD PTR _source_heading$[ebp]

; 1510 : 
; 1511 : 	set_2d_window_rotation (mfd_env, source_heading);

  00791	51		 push	 ecx
  00792	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00797	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007a1	50		 push	 eax
  007a2	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1512 : 
; 1513 : 	scale = RADIUS / air_radar.scan_range;

  007a7	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  007af	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3feb333333333333
  007b7	f2 0f 5e c8	 divsd	 xmm1, xmm0
  007bb	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  007bf	f3 0f 11 45 f4	 movss	 DWORD PTR _scale$[ebp], xmm0

; 1514 : 
; 1515 : 	target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  007c4	83 7d ec 00	 cmp	 DWORD PTR _source$[ebp], 0
  007c8	74 0a		 je	 SHORT $LN37@draw_air_r
  007ca	8b 45 ec	 mov	 eax, DWORD PTR _source$[ebp]
  007cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  007cf	89 4d 9c	 mov	 DWORD PTR tv350[ebp], ecx
  007d2	eb 24		 jmp	 SHORT $LN38@draw_air_r
$LN37@draw_air_r:
  007d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  007da	81 c2 9d 00 00
	00		 add	 edx, 157		; 0000009dH
  007e0	52		 push	 edx
  007e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  007e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007eb	50		 push	 eax
  007ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007f1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv350[ebp], 0
$LN38@draw_air_r:
  007f8	b9 01 00 00 00	 mov	 ecx, 1
  007fd	85 c9		 test	 ecx, ecx
  007ff	74 09		 je	 SHORT $LN39@draw_air_r
  00801	c7 45 98 12 00
	00 00		 mov	 DWORD PTR tv358[ebp], 18 ; 00000012H
  00808	eb 24		 jmp	 SHORT $LN40@draw_air_r
$LN39@draw_air_r:
  0080a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00810	81 c2 9d 00 00
	00		 add	 edx, 157		; 0000009dH
  00816	52		 push	 edx
  00817	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0081c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00821	50		 push	 eax
  00822	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00827	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv358[ebp], 0
$LN40@draw_air_r:
  0082e	6a 12		 push	 18			; 00000012H
  00830	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  00833	51		 push	 ecx
  00834	69 55 9c b4 00
	00 00		 imul	 edx, DWORD PTR tv350[ebp], 180
  0083b	8b 45 98	 mov	 eax, DWORD PTR tv358[ebp]
  0083e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00845	ff d1		 call	 ecx
  00847	89 45 e8	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_air_r:

; 1516 : 
; 1517 : 	while (target)

  0084a	83 7d e8 00	 cmp	 DWORD PTR _target$[ebp], 0
  0084e	0f 84 c3 00 00
	00		 je	 $LN3@draw_air_r

; 1518 : 	{
; 1519 : 		if (get_gunship_target_valid_for_air_radar (target))

  00854	8b 45 e8	 mov	 eax, DWORD PTR _target$[ebp]
  00857	50		 push	 eax
  00858	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_air_radar
  0085d	85 c0		 test	 eax, eax
  0085f	74 2b		 je	 SHORT $LN14@draw_air_r

; 1520 : 		{
; 1521 : 			if (get_target_matches_air_radar_declutter_criteria (target, source_side))

  00861	8b 45 fc	 mov	 eax, DWORD PTR _source_side$[ebp]
  00864	50		 push	 eax
  00865	8b 4d e8	 mov	 ecx, DWORD PTR _target$[ebp]
  00868	51		 push	 ecx
  00869	e8 00 00 00 00	 call	 ?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_target_matches_air_radar_declutter_criteria
  0086e	85 c0		 test	 eax, eax
  00870	74 1a		 je	 SHORT $LN14@draw_air_r

; 1522 : 			{
; 1523 : 				draw_radar_target_symbol (target, source_position, scale, FALSE);

  00872	6a 00		 push	 0
  00874	51		 push	 ecx
  00875	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0087a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087f	8b 45 e4	 mov	 eax, DWORD PTR _source_position$[ebp]
  00882	50		 push	 eax
  00883	8b 4d e8	 mov	 ecx, DWORD PTR _target$[ebp]
  00886	51		 push	 ecx
  00887	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z ; draw_radar_target_symbol
$LN14@draw_air_r:

; 1524 : 			}
; 1525 : 		}
; 1526 : 
; 1527 : 		target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  0088c	83 7d e8 00	 cmp	 DWORD PTR _target$[ebp], 0
  00890	74 0a		 je	 SHORT $LN41@draw_air_r
  00892	8b 45 e8	 mov	 eax, DWORD PTR _target$[ebp]
  00895	8b 08		 mov	 ecx, DWORD PTR [eax]
  00897	89 4d 9c	 mov	 DWORD PTR tv382[ebp], ecx
  0089a	eb 24		 jmp	 SHORT $LN42@draw_air_r
$LN41@draw_air_r:
  0089c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  008a2	81 c2 a9 00 00
	00		 add	 edx, 169		; 000000a9H
  008a8	52		 push	 edx
  008a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008b3	50		 push	 eax
  008b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008b9	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv382[ebp], 0
$LN42@draw_air_r:
  008c0	b9 01 00 00 00	 mov	 ecx, 1
  008c5	85 c9		 test	 ecx, ecx
  008c7	74 09		 je	 SHORT $LN43@draw_air_r
  008c9	c7 45 98 12 00
	00 00		 mov	 DWORD PTR tv390[ebp], 18 ; 00000012H
  008d0	eb 24		 jmp	 SHORT $LN44@draw_air_r
$LN43@draw_air_r:
  008d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  008d8	81 c2 a9 00 00
	00		 add	 edx, 169		; 000000a9H
  008de	52		 push	 edx
  008df	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  008e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  008e9	50		 push	 eax
  008ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008ef	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv390[ebp], 0
$LN44@draw_air_r:
  008f6	6a 12		 push	 18			; 00000012H
  008f8	8b 4d e8	 mov	 ecx, DWORD PTR _target$[ebp]
  008fb	51		 push	 ecx
  008fc	69 55 9c b4 00
	00 00		 imul	 edx, DWORD PTR tv382[ebp], 180
  00903	8b 45 98	 mov	 eax, DWORD PTR tv390[ebp]
  00906	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0090d	ff d1		 call	 ecx
  0090f	89 45 e8	 mov	 DWORD PTR _target$[ebp], eax

; 1528 : 	}

  00912	e9 33 ff ff ff	 jmp	 $LN2@draw_air_r
$LN3@draw_air_r:

; 1529 : 
; 1530 : 	//
; 1531 : 	// draw selected target last
; 1532 : 	//
; 1533 : 
; 1534 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00917	83 7d ec 00	 cmp	 DWORD PTR _source$[ebp], 0
  0091b	74 0a		 je	 SHORT $LN45@draw_air_r
  0091d	8b 45 ec	 mov	 eax, DWORD PTR _source$[ebp]
  00920	8b 08		 mov	 ecx, DWORD PTR [eax]
  00922	89 4d 9c	 mov	 DWORD PTR tv402[ebp], ecx
  00925	eb 24		 jmp	 SHORT $LN46@draw_air_r
$LN45@draw_air_r:
  00927	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0092d	81 c2 b0 00 00
	00		 add	 edx, 176		; 000000b0H
  00933	52		 push	 edx
  00934	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00939	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0093e	50		 push	 eax
  0093f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00944	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv402[ebp], 0
$LN46@draw_air_r:
  0094b	b9 01 00 00 00	 mov	 ecx, 1
  00950	85 c9		 test	 ecx, ecx
  00952	74 09		 je	 SHORT $LN47@draw_air_r
  00954	c7 45 98 26 00
	00 00		 mov	 DWORD PTR tv410[ebp], 38 ; 00000026H
  0095b	eb 24		 jmp	 SHORT $LN48@draw_air_r
$LN47@draw_air_r:
  0095d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00963	81 c2 b0 00 00
	00		 add	 edx, 176		; 000000b0H
  00969	52		 push	 edx
  0096a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0096f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00974	50		 push	 eax
  00975	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0097a	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv410[ebp], 0
$LN48@draw_air_r:
  00981	6a 26		 push	 38			; 00000026H
  00983	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  00986	51		 push	 ecx
  00987	69 55 9c b4 00
	00 00		 imul	 edx, DWORD PTR tv402[ebp], 180
  0098e	8b 45 98	 mov	 eax, DWORD PTR tv410[ebp]
  00991	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00998	ff d1		 call	 ecx
  0099a	89 45 e8	 mov	 DWORD PTR _target$[ebp], eax

; 1535 : 
; 1536 : 	if (target)

  0099d	83 7d e8 00	 cmp	 DWORD PTR _target$[ebp], 0
  009a1	74 1a		 je	 SHORT $LN15@draw_air_r

; 1537 : 	{
; 1538 : 		draw_radar_target_symbol (target, source_position, scale, TRUE);

  009a3	6a 01		 push	 1
  009a5	51		 push	 ecx
  009a6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  009ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b0	8b 45 e4	 mov	 eax, DWORD PTR _source_position$[ebp]
  009b3	50		 push	 eax
  009b4	8b 4d e8	 mov	 ecx, DWORD PTR _target$[ebp]
  009b7	51		 push	 ecx
  009b8	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z ; draw_radar_target_symbol
$LN15@draw_air_r:

; 1539 : 	}
; 1540 : 
; 1541 : 	set_2d_window_rotation (mfd_env, 0.0);

  009bd	51		 push	 ecx
  009be	0f 57 c0	 xorps	 xmm0, xmm0
  009c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009cb	50		 push	 eax
  009cc	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1542 : }

  009d1	5f		 pop	 edi
  009d2	5e		 pop	 esi
  009d3	5b		 pop	 ebx
  009d4	8b e5		 mov	 esp, ebp
  009d6	5d		 pop	 ebp
  009d7	c3		 ret	 0
?draw_air_radar_mfd@@YGXXZ ENDP				; draw_air_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_ground_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv682 = -116						; size = 4
tv662 = -116						; size = 4
tv631 = -116						; size = 4
tv279 = -116						; size = 4
tv258 = -116						; size = 4
tv211 = -116						; size = 4
tv187 = -116						; size = 4
tv168 = -116						; size = 4
tv130 = -116						; size = 4
tv78 = -116						; size = 4
tv674 = -112						; size = 4
tv654 = -112						; size = 4
tv623 = -112						; size = 4
tv271 = -112						; size = 4
tv250 = -112						; size = 4
tv234 = -112						; size = 4
tv203 = -112						; size = 4
tv180 = -112						; size = 4
tv160 = -112						; size = 4
tv90 = -112						; size = 4
tv70 = -112						; size = 4
_target_position$ = -44					; size = 4
_source_position$ = -40					; size = 4
_target$ = -36						; size = 4
_source$ = -32						; size = 4
_y$ = -28						; size = 4
_x$ = -24						; size = 4
_target_range$ = -20					; size = 4
_scale$ = -16						; size = 4
_source_heading$ = -12					; size = 4
_v$ = -8						; size = 4
_u$ = -4						; size = 4
?draw_ground_radar_mfd@@YGXXZ PROC			; draw_ground_radar_mfd, COMDAT

; 1032 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1033 : 	float
; 1034 : 		u,
; 1035 : 		v,
; 1036 : 		source_heading,
; 1037 : 		scale,
; 1038 : 		target_range,
; 1039 : 		x,
; 1040 : 		y;
; 1041 : 
; 1042 : 	entity
; 1043 : 		*source,
; 1044 : 		*target;
; 1045 : 
; 1046 : 	vec3d
; 1047 : 		*source_position,
; 1048 : 		*target_position;
; 1049 : 
; 1050 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e0	 mov	 DWORD PTR _source$[ebp], eax

; 1051 : 
; 1052 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e0 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN29@draw_groun
  00017	8b 45 e0	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 90	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN30@draw_groun
$LN29@draw_groun:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00027	83 c2 14	 add	 edx, 20			; 00000014H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN30@draw_groun:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN31@draw_groun
  0004b	c7 45 8c 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN32@draw_groun
$LN31@draw_groun:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 14	 add	 edx, 20			; 00000014H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN32@draw_groun:
  00075	6a 08		 push	 8
  00077	8b 4d e0	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 90 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 8c	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 d8	 mov	 DWORD PTR _source_position$[ebp], eax

; 1053 : 
; 1054 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0008e	83 7d e0 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN33@draw_groun
  00094	8b 45 e0	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 90	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN34@draw_groun
$LN33@draw_groun:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 16	 add	 edx, 22			; 00000016H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN34@draw_groun:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN35@draw_groun
  000c8	c7 45 8c 34 00
	00 00		 mov	 DWORD PTR tv130[ebp], 52 ; 00000034H
  000cf	eb 21		 jmp	 SHORT $LN36@draw_groun
$LN35@draw_groun:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 16	 add	 edx, 22			; 00000016H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN36@draw_groun:
  000f2	6a 34		 push	 52			; 00000034H
  000f4	8b 4d e0	 mov	 ecx, DWORD PTR _source$[ebp]
  000f7	51		 push	 ecx
  000f8	69 55 90 bc 02
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 700
  000ff	8b 45 8c	 mov	 eax, DWORD PTR tv130[ebp]
  00102	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00109	ff d1		 call	 ecx
  0010b	d9 5d f4	 fstp	 DWORD PTR _source_heading$[ebp]

; 1055 : 
; 1056 : 	scale = RADIUS / ground_radar.scan_range;

  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fb504f3
  00116	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  0011e	f3 0f 11 45 f0	 movss	 DWORD PTR _scale$[ebp], xmm0

; 1057 : 
; 1058 : 	if (draw_large_mfd)

  00123	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0012a	74 26		 je	 SHORT $LN8@draw_groun

; 1059 : 	{
; 1060 : 		get_2d_float_screen_coordinates (0.0, -0.65, &u, &v);

  0012c	8d 45 f8	 lea	 eax, DWORD PTR _v$[ebp]
  0012f	50		 push	 eax
  00130	8d 4d fc	 lea	 ecx, DWORD PTR _u$[ebp]
  00133	51		 push	 ecx
  00134	51		 push	 ecx
  00135	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	51		 push	 ecx
  00143	0f 57 c0	 xorps	 xmm0, xmm0
  00146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014b	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 1061 : 	}
; 1062 : 	else

  00150	eb 24		 jmp	 SHORT $LN9@draw_groun
$LN8@draw_groun:

; 1063 : 	{
; 1064 : 		get_2d_float_screen_coordinates (0.0, -0.7, &u, &v);

  00152	8d 45 f8	 lea	 eax, DWORD PTR _v$[ebp]
  00155	50		 push	 eax
  00156	8d 4d fc	 lea	 ecx, DWORD PTR _u$[ebp]
  00159	51		 push	 ecx
  0015a	51		 push	 ecx
  0015b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	0f 57 c0	 xorps	 xmm0, xmm0
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates
$LN9@draw_groun:

; 1065 : 	}
; 1066 : 
; 1067 : 	u -= mfd_viewport_x_min;

  00176	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _u$[ebp]
  0017b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00183	f3 0f 11 45 fc	 movss	 DWORD PTR _u$[ebp], xmm0

; 1068 : 	v -= mfd_viewport_y_min;

  00188	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _v$[ebp]
  0018d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00195	f3 0f 11 45 f8	 movss	 DWORD PTR _v$[ebp], xmm0

; 1069 : 
; 1070 : 	////////////////////////////////////////
; 1071 : 	//
; 1072 : 	// draw radar clutter
; 1073 : 	//
; 1074 : 	////////////////////////////////////////
; 1075 : 
; 1076 : 	set_hatched_pattern (radar_clutter_hatch_pattern);

  0019a	68 00 00 00 00	 push	 OFFSET ?radar_clutter_hatch_pattern@@3PAIA ; radar_clutter_hatch_pattern
  0019f	e8 00 00 00 00	 call	 ?set_hatched_pattern@@YGXPAI@Z ; set_hatched_pattern

; 1077 : 
; 1078 : 	set_2d_viewport_origin (mfd_env, u, v);

  001a4	51		 push	 ecx
  001a5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _v$[ebp]
  001aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001af	51		 push	 ecx
  001b0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _u$[ebp]
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 1079 : 
; 1080 : 	set_2d_window_rotation (mfd_env, source_heading);

  001c5	51		 push	 ecx
  001c6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1081 : 
; 1082 : 	target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  001db	83 7d e0 00	 cmp	 DWORD PTR _source$[ebp], 0
  001df	74 0a		 je	 SHORT $LN37@draw_groun
  001e1	8b 45 e0	 mov	 eax, DWORD PTR _source$[ebp]
  001e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e6	89 4d 90	 mov	 DWORD PTR tv160[ebp], ecx
  001e9	eb 21		 jmp	 SHORT $LN38@draw_groun
$LN37@draw_groun:
  001eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  001f1	83 c2 32	 add	 edx, 50			; 00000032H
  001f4	52		 push	 edx
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00205	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN38@draw_groun:
  0020c	b9 01 00 00 00	 mov	 ecx, 1
  00211	85 c9		 test	 ecx, ecx
  00213	74 09		 je	 SHORT $LN39@draw_groun
  00215	c7 45 8c 12 00
	00 00		 mov	 DWORD PTR tv168[ebp], 18 ; 00000012H
  0021c	eb 21		 jmp	 SHORT $LN40@draw_groun
$LN39@draw_groun:
  0021e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00224	83 c2 32	 add	 edx, 50			; 00000032H
  00227	52		 push	 edx
  00228	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0022d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00238	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv168[ebp], 0
$LN40@draw_groun:
  0023f	6a 12		 push	 18			; 00000012H
  00241	8b 4d e0	 mov	 ecx, DWORD PTR _source$[ebp]
  00244	51		 push	 ecx
  00245	69 55 90 b4 00
	00 00		 imul	 edx, DWORD PTR tv160[ebp], 180
  0024c	8b 45 8c	 mov	 eax, DWORD PTR tv168[ebp]
  0024f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00256	ff d1		 call	 ecx
  00258	89 45 dc	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_groun:

; 1083 : 
; 1084 : 	while (target)

  0025b	83 7d dc 00	 cmp	 DWORD PTR _target$[ebp], 0
  0025f	0f 84 16 01 00
	00		 je	 $LN3@draw_groun

; 1085 : 	{
; 1086 : 		if (get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  00265	83 7d dc 00	 cmp	 DWORD PTR _target$[ebp], 0
  00269	74 0a		 je	 SHORT $LN41@draw_groun
  0026b	8b 45 dc	 mov	 eax, DWORD PTR _target$[ebp]
  0026e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00270	89 4d 90	 mov	 DWORD PTR tv180[ebp], ecx
  00273	eb 1d		 jmp	 SHORT $LN42@draw_groun
$LN41@draw_groun:
  00275	68 3e 04 00 00	 push	 1086			; 0000043eH
  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00285	52		 push	 edx
  00286	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0028b	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN42@draw_groun:
  00292	b8 01 00 00 00	 mov	 eax, 1
  00297	85 c0		 test	 eax, eax
  00299	74 09		 je	 SHORT $LN43@draw_groun
  0029b	c7 45 8c 42 00
	00 00		 mov	 DWORD PTR tv187[ebp], 66 ; 00000042H
  002a2	eb 1d		 jmp	 SHORT $LN44@draw_groun
$LN43@draw_groun:
  002a4	68 3e 04 00 00	 push	 1086			; 0000043eH
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002b4	51		 push	 ecx
  002b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ba	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv187[ebp], 0
$LN44@draw_groun:
  002c1	6a 42		 push	 66			; 00000042H
  002c3	8b 55 dc	 mov	 edx, DWORD PTR _target$[ebp]
  002c6	52		 push	 edx
  002c7	69 45 90 5c 04
	00 00		 imul	 eax, DWORD PTR tv180[ebp], 1116
  002ce	8b 4d 8c	 mov	 ecx, DWORD PTR tv187[ebp]
  002d1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002d8	ff d2		 call	 edx
  002da	85 c0		 test	 eax, eax
  002dc	74 18		 je	 SHORT $LN10@draw_groun

; 1087 : 		{
; 1088 : 			draw_ground_radar_clutter (target, source_position, scale);

  002de	51		 push	 ecx
  002df	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _scale$[ebp]
  002e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e9	8b 45 d8	 mov	 eax, DWORD PTR _source_position$[ebp]
  002ec	50		 push	 eax
  002ed	8b 4d dc	 mov	 ecx, DWORD PTR _target$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ; draw_ground_radar_clutter
$LN10@draw_groun:

; 1089 : 		}
; 1090 : 
; 1091 : 		target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  002f6	83 7d dc 00	 cmp	 DWORD PTR _target$[ebp], 0
  002fa	74 0a		 je	 SHORT $LN45@draw_groun
  002fc	8b 45 dc	 mov	 eax, DWORD PTR _target$[ebp]
  002ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00301	89 4d 90	 mov	 DWORD PTR tv203[ebp], ecx
  00304	eb 21		 jmp	 SHORT $LN46@draw_groun
$LN45@draw_groun:
  00306	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0030c	83 c2 3b	 add	 edx, 59			; 0000003bH
  0030f	52		 push	 edx
  00310	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00315	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0031a	50		 push	 eax
  0031b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00320	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv203[ebp], 0
$LN46@draw_groun:
  00327	b9 01 00 00 00	 mov	 ecx, 1
  0032c	85 c9		 test	 ecx, ecx
  0032e	74 09		 je	 SHORT $LN47@draw_groun
  00330	c7 45 8c 12 00
	00 00		 mov	 DWORD PTR tv211[ebp], 18 ; 00000012H
  00337	eb 21		 jmp	 SHORT $LN48@draw_groun
$LN47@draw_groun:
  00339	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0033f	83 c2 3b	 add	 edx, 59			; 0000003bH
  00342	52		 push	 edx
  00343	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00348	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0034d	50		 push	 eax
  0034e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00353	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv211[ebp], 0
$LN48@draw_groun:
  0035a	6a 12		 push	 18			; 00000012H
  0035c	8b 4d dc	 mov	 ecx, DWORD PTR _target$[ebp]
  0035f	51		 push	 ecx
  00360	69 55 90 b4 00
	00 00		 imul	 edx, DWORD PTR tv203[ebp], 180
  00367	8b 45 8c	 mov	 eax, DWORD PTR tv211[ebp]
  0036a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00371	ff d1		 call	 ecx
  00373	89 45 dc	 mov	 DWORD PTR _target$[ebp], eax

; 1092 : 	}

  00376	e9 e0 fe ff ff	 jmp	 $LN2@draw_groun
$LN3@draw_groun:

; 1093 : 
; 1094 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0037b	51		 push	 ecx
  0037c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00389	51		 push	 ecx
  0038a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00392	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00397	51		 push	 ecx
  00398	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	51		 push	 ecx
  003a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003b8	50		 push	 eax
  003b9	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1095 : 
; 1096 : 	set_2d_window_rotation (mfd_env, 0.0);

  003be	51		 push	 ecx
  003bf	0f 57 c0	 xorps	 xmm0, xmm0
  003c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003cc	50		 push	 eax
  003cd	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1097 : 
; 1098 : 	////////////////////////////////////////
; 1099 : 	//
; 1100 : 	// text
; 1101 : 	//
; 1102 : 	////////////////////////////////////////
; 1103 : 
; 1104 : 	set_mono_font_colour (MFD_COLOUR1);

  003d2	b8 04 00 00 00	 mov	 eax, 4
  003d7	6b c8 00	 imul	 ecx, eax, 0
  003da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003e0	52		 push	 edx
  003e1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 1105 : 
; 1106 : 	if (draw_large_mfd)

  003e6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  003ed	74 09		 je	 SHORT $LN11@draw_groun

; 1107 : 	{
; 1108 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  003ef	6a 05		 push	 5
  003f1	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1109 : 	}
; 1110 : 	else

  003f6	eb 07		 jmp	 SHORT $LN12@draw_groun
$LN11@draw_groun:

; 1111 : 	{
; 1112 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  003f8	6a 01		 push	 1
  003fa	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN12@draw_groun:

; 1113 : 	}
; 1114 : 
; 1115 : 	//
; 1116 : 	// declutter status
; 1117 : 	//
; 1118 : 
; 1119 : 	set_2d_mono_font_position (-1.0, 1.0);

  003ff	51		 push	 ecx
  00400	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	51		 push	 ecx
  0040e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00416	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1120 : 
; 1121 : 	set_mono_font_rel_position (1.0, 1.0);

  00420	51		 push	 ecx
  00421	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00429	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042e	51		 push	 ecx
  0042f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00437	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1122 : 
; 1123 : 	switch (ground_radar.target_priority_type)

  00441	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+44
  00446	89 45 90	 mov	 DWORD PTR tv234[ebp], eax
  00449	83 7d 90 04	 cmp	 DWORD PTR tv234[ebp], 4
  0044d	77 59		 ja	 SHORT $LN4@draw_groun
  0044f	8b 4d 90	 mov	 ecx, DWORD PTR tv234[ebp]
  00452	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN69@draw_groun[ecx*4]
$LN13@draw_groun:

; 1124 : 	{
; 1125 : 		case TARGET_PRIORITY_UNKNOWN:
; 1126 : 		{
; 1127 : 			print_mono_font_string ("ALL");

  00459	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  0045e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1128 : 
; 1129 : 			break;

  00463	eb 43		 jmp	 SHORT $LN4@draw_groun
$LN14@draw_groun:

; 1130 : 		}
; 1131 : 		case TARGET_PRIORITY_LOW:
; 1132 : 		{
; 1133 : 			print_mono_font_string ("LOW");

  00465	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  0046a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1134 : 
; 1135 : 			break;

  0046f	eb 37		 jmp	 SHORT $LN4@draw_groun
$LN15@draw_groun:

; 1136 : 		}
; 1137 : 		case TARGET_PRIORITY_MEDIUM:
; 1138 : 		{
; 1139 : 			if (draw_large_mfd)

  00471	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00478	74 0c		 je	 SHORT $LN16@draw_groun

; 1140 : 			{
; 1141 : 				print_mono_font_string ("MEDIUM");

  0047a	68 00 00 00 00	 push	 OFFSET ??_C@_06HMBFJLMK@MEDIUM@
  0047f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1142 : 			}
; 1143 : 			else

  00484	eb 0a		 jmp	 SHORT $LN17@draw_groun
$LN16@draw_groun:

; 1144 : 			{
; 1145 : 				print_mono_font_string ("MED");

  00486	68 00 00 00 00	 push	 OFFSET ??_C@_03FFIBGFCJ@MED@
  0048b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN17@draw_groun:

; 1146 : 			}
; 1147 : 
; 1148 : 			break;

  00490	eb 16		 jmp	 SHORT $LN4@draw_groun
$LN18@draw_groun:

; 1149 : 		}
; 1150 : 		case TARGET_PRIORITY_HIGH:
; 1151 : 		{
; 1152 : 			print_mono_font_string ("HIGH");

  00492	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  00497	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1153 : 
; 1154 : 			break;

  0049c	eb 0a		 jmp	 SHORT $LN4@draw_groun
$LN19@draw_groun:

; 1155 : 		}
; 1156 : 		// Jabberwock 031107 Designated targets
; 1157 : 		case TARGET_PRIORITY_DESIGNATED:
; 1158 : 		{
; 1159 : 			print_mono_font_string ("MARK");

  0049e	68 00 00 00 00	 push	 OFFSET ??_C@_04MGKDMHFC@MARK@
  004a3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN4@draw_groun:

; 1160 : 
; 1161 : 			break;
; 1162 : 		}
; 1163 : 		// Jabberwock 031107 ends	
; 1164 : 	}
; 1165 : 	//
; 1166 : 	// scan range
; 1167 : 	//
; 1168 : 
; 1169 : 	display_radar_scan_range (ground_radar.scan_range);

  004a8	51		 push	 ecx
  004a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  004b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b6	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXM@Z ; display_radar_scan_range

; 1170 : 
; 1171 : 	//
; 1172 : 	// target details
; 1173 : 	//
; 1174 : 
; 1175 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  004bb	83 7d e0 00	 cmp	 DWORD PTR _source$[ebp], 0
  004bf	74 0a		 je	 SHORT $LN49@draw_groun
  004c1	8b 45 e0	 mov	 eax, DWORD PTR _source$[ebp]
  004c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004c6	89 4d 90	 mov	 DWORD PTR tv250[ebp], ecx
  004c9	eb 24		 jmp	 SHORT $LN50@draw_groun
$LN49@draw_groun:
  004cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  004d1	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  004d7	52		 push	 edx
  004d8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  004dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004e2	50		 push	 eax
  004e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004e8	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv250[ebp], 0
$LN50@draw_groun:
  004ef	b9 01 00 00 00	 mov	 ecx, 1
  004f4	85 c9		 test	 ecx, ecx
  004f6	74 09		 je	 SHORT $LN51@draw_groun
  004f8	c7 45 8c 26 00
	00 00		 mov	 DWORD PTR tv258[ebp], 38 ; 00000026H
  004ff	eb 24		 jmp	 SHORT $LN52@draw_groun
$LN51@draw_groun:
  00501	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00507	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  0050d	52		 push	 edx
  0050e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00513	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00518	50		 push	 eax
  00519	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0051e	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv258[ebp], 0
$LN52@draw_groun:
  00525	6a 26		 push	 38			; 00000026H
  00527	8b 4d e0	 mov	 ecx, DWORD PTR _source$[ebp]
  0052a	51		 push	 ecx
  0052b	69 55 90 b4 00
	00 00		 imul	 edx, DWORD PTR tv250[ebp], 180
  00532	8b 45 8c	 mov	 eax, DWORD PTR tv258[ebp]
  00535	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0053c	ff d1		 call	 ecx
  0053e	89 45 dc	 mov	 DWORD PTR _target$[ebp], eax

; 1176 : 
; 1177 : 	if (target)

  00541	83 7d dc 00	 cmp	 DWORD PTR _target$[ebp], 0
  00545	0f 84 95 00 00
	00		 je	 $LN20@draw_groun

; 1178 : 	{
; 1179 : 		target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  0054b	83 7d dc 00	 cmp	 DWORD PTR _target$[ebp], 0
  0054f	74 0a		 je	 SHORT $LN53@draw_groun
  00551	8b 45 dc	 mov	 eax, DWORD PTR _target$[ebp]
  00554	8b 08		 mov	 ecx, DWORD PTR [eax]
  00556	89 4d 90	 mov	 DWORD PTR tv271[ebp], ecx
  00559	eb 24		 jmp	 SHORT $LN54@draw_groun
$LN53@draw_groun:
  0055b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00561	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  00567	52		 push	 edx
  00568	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0056d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00572	50		 push	 eax
  00573	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00578	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv271[ebp], 0
$LN54@draw_groun:
  0057f	b9 01 00 00 00	 mov	 ecx, 1
  00584	85 c9		 test	 ecx, ecx
  00586	74 09		 je	 SHORT $LN55@draw_groun
  00588	c7 45 8c 08 00
	00 00		 mov	 DWORD PTR tv279[ebp], 8
  0058f	eb 24		 jmp	 SHORT $LN56@draw_groun
$LN55@draw_groun:
  00591	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00597	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  0059d	52		 push	 edx
  0059e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  005a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  005a8	50		 push	 eax
  005a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005ae	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv279[ebp], 0
$LN56@draw_groun:
  005b5	6a 08		 push	 8
  005b7	8b 4d dc	 mov	 ecx, DWORD PTR _target$[ebp]
  005ba	51		 push	 ecx
  005bb	6b 55 90 60	 imul	 edx, DWORD PTR tv271[ebp], 96
  005bf	8b 45 8c	 mov	 eax, DWORD PTR tv279[ebp]
  005c2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  005c9	ff d1		 call	 ecx
  005cb	89 45 d4	 mov	 DWORD PTR _target_position$[ebp], eax

; 1180 : 
; 1181 : 		target_range = get_3d_range (source_position, target_position);

  005ce	8b 45 d4	 mov	 eax, DWORD PTR _target_position$[ebp]
  005d1	50		 push	 eax
  005d2	8b 4d d8	 mov	 ecx, DWORD PTR _source_position$[ebp]
  005d5	51		 push	 ecx
  005d6	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  005db	d9 5d ec	 fstp	 DWORD PTR _target_range$[ebp]

; 1182 : 	}
; 1183 : 	else

  005de	eb 08		 jmp	 SHORT $LN21@draw_groun
$LN20@draw_groun:

; 1184 : 	{
; 1185 : 		target_range = 0.0;

  005e0	0f 57 c0	 xorps	 xmm0, xmm0
  005e3	f3 0f 11 45 ec	 movss	 DWORD PTR _target_range$[ebp], xmm0
$LN21@draw_groun:

; 1186 : 	}
; 1187 : 
; 1188 : 	display_radar_target_details (target, target_range, &ground_radar);

  005e8	68 00 00 00 00	 push	 OFFSET ?ground_radar@@3URADAR_PARAMS@@A ; ground_radar
  005ed	51		 push	 ecx
  005ee	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	8b 45 dc	 mov	 eax, DWORD PTR _target$[ebp]
  005fb	50		 push	 eax
  005fc	e8 00 00 00 00	 call	 ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ; display_radar_target_details

; 1189 : 
; 1190 : 	////////////////////////////////////////
; 1191 : 	//
; 1192 : 	// draw heading scale
; 1193 : 	//
; 1194 : 	////////////////////////////////////////
; 1195 : 
; 1196 : 	draw_ground_radar_heading_scale ();

  00601	e8 00 00 00 00	 call	 ?draw_ground_radar_heading_scale@@YGXXZ ; draw_ground_radar_heading_scale

; 1197 : 
; 1198 : 	////////////////////////////////////////
; 1199 : 	//
; 1200 : 	// draw field of regard and view
; 1201 : 	//
; 1202 : 	////////////////////////////////////////
; 1203 : 
; 1204 : 	if (draw_large_mfd)

  00606	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0060d	0f 84 0b 04 00
	00		 je	 $LN22@draw_groun

; 1205 : 	{
; 1206 : 		draw_2d_line (-0.3000, -0.7000,  0.3000, -0.7000, MFD_COLOUR1);

  00613	b8 04 00 00 00	 mov	 eax, 4
  00618	6b c8 00	 imul	 ecx, eax, 0
  0061b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00621	52		 push	 edx
  00622	51		 push	 ecx
  00623	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0062b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00630	51		 push	 ecx
  00631	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00639	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063e	51		 push	 ecx
  0063f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00647	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064c	51		 push	 ecx
  0064d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00655	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1207 : 		draw_2d_line (-0.3000, -0.8445,  0.3000, -0.8445, MFD_COLOUR1);

  0065f	b8 04 00 00 00	 mov	 eax, 4
  00664	6b c8 00	 imul	 ecx, eax, 0
  00667	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0066d	52		 push	 edx
  0066e	51		 push	 ecx
  0066f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf583127
  00677	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067c	51		 push	 ecx
  0067d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00685	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068a	51		 push	 ecx
  0068b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf583127
  00693	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00698	51		 push	 ecx
  00699	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  006a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1208 : 		draw_2d_line (-0.3000, -0.7000, -0.3000, -0.8445, MFD_COLOUR1);

  006ab	b8 04 00 00 00	 mov	 eax, 4
  006b0	6b c8 00	 imul	 ecx, eax, 0
  006b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006b9	52		 push	 edx
  006ba	51		 push	 ecx
  006bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf583127
  006c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c8	51		 push	 ecx
  006c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  006d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d6	51		 push	 ecx
  006d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  006df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e4	51		 push	 ecx
  006e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  006ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1209 : 		draw_2d_line ( 0.3000, -0.7000,  0.3000, -0.8445, MFD_COLOUR1);

  006f7	b8 04 00 00 00	 mov	 eax, 4
  006fc	6b c8 00	 imul	 ecx, eax, 0
  006ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00705	52		 push	 edx
  00706	51		 push	 ecx
  00707	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf583127
  0070f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00714	51		 push	 ecx
  00715	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0071d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00722	51		 push	 ecx
  00723	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0072b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00730	51		 push	 ecx
  00731	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00739	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1210 : 
; 1211 : 		draw_2d_line ( 0.0000, -0.7000,  0.0000, -0.7225, MFD_COLOUR1);

  00743	b8 04 00 00 00	 mov	 eax, 4
  00748	6b c8 00	 imul	 ecx, eax, 0
  0074b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00751	52		 push	 edx
  00752	51		 push	 ecx
  00753	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf38f5c3
  0075b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00760	51		 push	 ecx
  00761	0f 57 c0	 xorps	 xmm0, xmm0
  00764	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00769	51		 push	 ecx
  0076a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00772	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00777	51		 push	 ecx
  00778	0f 57 c0	 xorps	 xmm0, xmm0
  0077b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00780	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1212 : 		draw_2d_line (-0.2455, -0.7000, -0.2455, -0.7225, MFD_COLOUR1);

  00785	b8 04 00 00 00	 mov	 eax, 4
  0078a	6b c8 00	 imul	 ecx, eax, 0
  0078d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00793	52		 push	 edx
  00794	51		 push	 ecx
  00795	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf38f5c3
  0079d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a2	51		 push	 ecx
  007a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be7b645a
  007ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b0	51		 push	 ecx
  007b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  007b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007be	51		 push	 ecx
  007bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be7b645a
  007c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1213 : 		draw_2d_line ( 0.2455, -0.7000,  0.2455, -0.7225, MFD_COLOUR1);

  007d1	b8 04 00 00 00	 mov	 eax, 4
  007d6	6b c8 00	 imul	 ecx, eax, 0
  007d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007df	52		 push	 edx
  007e0	51		 push	 ecx
  007e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf38f5c3
  007e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ee	51		 push	 ecx
  007ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e7b645a
  007f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fc	51		 push	 ecx
  007fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00805	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080a	51		 push	 ecx
  0080b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e7b645a
  00813	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00818	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1214 : 
; 1215 : 		draw_2d_line ( 0.0000, -0.8275,  0.0000, -0.8445, MFD_COLOUR1);

  0081d	b8 04 00 00 00	 mov	 eax, 4
  00822	6b c8 00	 imul	 ecx, eax, 0
  00825	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0082b	52		 push	 edx
  0082c	51		 push	 ecx
  0082d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf583127
  00835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083a	51		 push	 ecx
  0083b	0f 57 c0	 xorps	 xmm0, xmm0
  0083e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00843	51		 push	 ecx
  00844	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf53d70a
  0084c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00851	51		 push	 ecx
  00852	0f 57 c0	 xorps	 xmm0, xmm0
  00855	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1216 : 		draw_2d_line (-0.2455, -0.8275, -0.2455, -0.8445, MFD_COLOUR1);

  0085f	b8 04 00 00 00	 mov	 eax, 4
  00864	6b c8 00	 imul	 ecx, eax, 0
  00867	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0086d	52		 push	 edx
  0086e	51		 push	 ecx
  0086f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf583127
  00877	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087c	51		 push	 ecx
  0087d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be7b645a
  00885	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088a	51		 push	 ecx
  0088b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf53d70a
  00893	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00898	51		 push	 ecx
  00899	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be7b645a
  008a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1217 : 		draw_2d_line ( 0.2455, -0.8275,  0.2455, -0.8445, MFD_COLOUR1);

  008ab	b8 04 00 00 00	 mov	 eax, 4
  008b0	6b c8 00	 imul	 ecx, eax, 0
  008b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008b9	52		 push	 edx
  008ba	51		 push	 ecx
  008bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf583127
  008c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c8	51		 push	 ecx
  008c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e7b645a
  008d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d6	51		 push	 ecx
  008d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf53d70a
  008df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e4	51		 push	 ecx
  008e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e7b645a
  008ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1218 : 
; 1219 : 		draw_2d_line (-0.3000, -0.7354, -0.2800, -0.7354, MFD_COLOUR1);

  008f7	b8 04 00 00 00	 mov	 eax, 4
  008fc	6b c8 00	 imul	 ecx, eax, 0
  008ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00905	52		 push	 edx
  00906	51		 push	 ecx
  00907	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3c432d
  0090f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00914	51		 push	 ecx
  00915	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8f5c29
  0091d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00922	51		 push	 ecx
  00923	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3c432d
  0092b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00930	51		 push	 ecx
  00931	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00939	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1220 : 		draw_2d_line ( 0.3000, -0.7354,  0.2800, -0.7354, MFD_COLOUR1);

  00943	b8 04 00 00 00	 mov	 eax, 4
  00948	6b c8 00	 imul	 ecx, eax, 0
  0094b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00951	52		 push	 edx
  00952	51		 push	 ecx
  00953	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3c432d
  0095b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00960	51		 push	 ecx
  00961	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  00969	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096e	51		 push	 ecx
  0096f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3c432d
  00977	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097c	51		 push	 ecx
  0097d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00985	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1221 : 
; 1222 : 		x = eo_azimuth / eo_max_azimuth * 0.3;

  0098f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00997	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  0099f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  009a3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  009ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009af	f3 0f 11 45 e8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1223 : 		y = (eo_elevation / eo_min_elevation * -0.1091) - 0.7354;

  009b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  009bc	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  009c4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  009c8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfbbedfa43fe5c92
  009d0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe7886594af4f0e
  009d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009dc	f3 0f 11 45 e4	 movss	 DWORD PTR _y$[ebp], xmm0

; 1224 : 
; 1225 : 		draw_2d_circle (x, y, 0.04, MFD_COLOUR1);

  009e1	b8 04 00 00 00	 mov	 eax, 4
  009e6	6b c8 00	 imul	 ecx, eax, 0
  009e9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009ef	52		 push	 edx
  009f0	51		 push	 ecx
  009f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  009f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fe	51		 push	 ecx
  009ff	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00a04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a09	51		 push	 ecx
  00a0a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00a0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a14	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 1226 : 	}
; 1227 : 	else

  00a19	e9 06 04 00 00	 jmp	 $LN23@draw_groun
$LN22@draw_groun:

; 1228 : 	{
; 1229 : 		draw_2d_line (-0.2000, -0.7500,  0.2000, -0.7500, MFD_COLOUR1);

  00a1e	b8 04 00 00 00	 mov	 eax, 4
  00a23	6b c8 00	 imul	 ecx, eax, 0
  00a26	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a2c	52		 push	 edx
  00a2d	51		 push	 ecx
  00a2e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00a36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3b	51		 push	 ecx
  00a3c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00a44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a49	51		 push	 ecx
  00a4a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00a52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a57	51		 push	 ecx
  00a58	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00a60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a65	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1230 : 		draw_2d_line (-0.2000, -0.8464,  0.2000, -0.8464, MFD_COLOUR1);

  00a6a	b8 04 00 00 00	 mov	 eax, 4
  00a6f	6b c8 00	 imul	 ecx, eax, 0
  00a72	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a78	52		 push	 edx
  00a79	51		 push	 ecx
  00a7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58adac
  00a82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a87	51		 push	 ecx
  00a88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00a90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a95	51		 push	 ecx
  00a96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58adac
  00a9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa3	51		 push	 ecx
  00aa4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00aac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1231 : 		draw_2d_line (-0.2000, -0.7500, -0.2000, -0.8464, MFD_COLOUR1);

  00ab6	b8 04 00 00 00	 mov	 eax, 4
  00abb	6b c8 00	 imul	 ecx, eax, 0
  00abe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ac4	52		 push	 edx
  00ac5	51		 push	 ecx
  00ac6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58adac
  00ace	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad3	51		 push	 ecx
  00ad4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00adc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae1	51		 push	 ecx
  00ae2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00aea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aef	51		 push	 ecx
  00af0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00af8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00afd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1232 : 		draw_2d_line ( 0.2000, -0.7500,  0.2000, -0.8464, MFD_COLOUR1);

  00b02	b8 04 00 00 00	 mov	 eax, 4
  00b07	6b c8 00	 imul	 ecx, eax, 0
  00b0a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b10	52		 push	 edx
  00b11	51		 push	 ecx
  00b12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58adac
  00b1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1f	51		 push	 ecx
  00b20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00b28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2d	51		 push	 ecx
  00b2e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00b36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3b	51		 push	 ecx
  00b3c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00b44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b49	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1233 : 
; 1234 : 		draw_2d_line ( 0.0000, -0.7500,  0.0000, -0.7700, MFD_COLOUR1);

  00b4e	b8 04 00 00 00	 mov	 eax, 4
  00b53	6b c8 00	 imul	 ecx, eax, 0
  00b56	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b5c	52		 push	 edx
  00b5d	51		 push	 ecx
  00b5e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf451eb8
  00b66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b6b	51		 push	 ecx
  00b6c	0f 57 c0	 xorps	 xmm0, xmm0
  00b6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b74	51		 push	 ecx
  00b75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00b7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b82	51		 push	 ecx
  00b83	0f 57 c0	 xorps	 xmm0, xmm0
  00b86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b8b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1235 : 		draw_2d_line (-0.1636, -0.7500, -0.1636, -0.7700, MFD_COLOUR1);

  00b90	b8 04 00 00 00	 mov	 eax, 4
  00b95	6b c8 00	 imul	 ecx, eax, 0
  00b98	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b9e	52		 push	 edx
  00b9f	51		 push	 ecx
  00ba0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf451eb8
  00ba8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bad	51		 push	 ecx
  00bae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2786c2
  00bb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbb	51		 push	 ecx
  00bbc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00bc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc9	51		 push	 ecx
  00bca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2786c2
  00bd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1236 : 		draw_2d_line ( 0.1636, -0.7500,  0.1636, -0.7700, MFD_COLOUR1);

  00bdc	b8 04 00 00 00	 mov	 eax, 4
  00be1	6b c8 00	 imul	 ecx, eax, 0
  00be4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bea	52		 push	 edx
  00beb	51		 push	 ecx
  00bec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf451eb8
  00bf4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf9	51		 push	 ecx
  00bfa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2786c2
  00c02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c07	51		 push	 ecx
  00c08	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00c10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c15	51		 push	 ecx
  00c16	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2786c2
  00c1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c23	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1237 : 
; 1238 : 		draw_2d_line ( 0.0000, -0.8264,  0.0000, -0.8464, MFD_COLOUR1);

  00c28	b8 04 00 00 00	 mov	 eax, 4
  00c2d	6b c8 00	 imul	 ecx, eax, 0
  00c30	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c36	52		 push	 edx
  00c37	51		 push	 ecx
  00c38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58adac
  00c40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c45	51		 push	 ecx
  00c46	0f 57 c0	 xorps	 xmm0, xmm0
  00c49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c4e	51		 push	 ecx
  00c4f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf538ef3
  00c57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5c	51		 push	 ecx
  00c5d	0f 57 c0	 xorps	 xmm0, xmm0
  00c60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c65	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1239 : 		draw_2d_line (-0.1636, -0.8264, -0.1636, -0.8464, MFD_COLOUR1);

  00c6a	b8 04 00 00 00	 mov	 eax, 4
  00c6f	6b c8 00	 imul	 ecx, eax, 0
  00c72	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c78	52		 push	 edx
  00c79	51		 push	 ecx
  00c7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58adac
  00c82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c87	51		 push	 ecx
  00c88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2786c2
  00c90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c95	51		 push	 ecx
  00c96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf538ef3
  00c9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca3	51		 push	 ecx
  00ca4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2786c2
  00cac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1240 : 		draw_2d_line ( 0.1636, -0.8264,  0.1636, -0.8464, MFD_COLOUR1);

  00cb6	b8 04 00 00 00	 mov	 eax, 4
  00cbb	6b c8 00	 imul	 ecx, eax, 0
  00cbe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cc4	52		 push	 edx
  00cc5	51		 push	 ecx
  00cc6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58adac
  00cce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd3	51		 push	 ecx
  00cd4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2786c2
  00cdc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce1	51		 push	 ecx
  00ce2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf538ef3
  00cea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cef	51		 push	 ecx
  00cf0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2786c2
  00cf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1241 : 
; 1242 : 		draw_2d_line (-0.2000, -0.7736, -0.1775, -0.7736, MFD_COLOUR1);

  00d02	b8 04 00 00 00	 mov	 eax, 4
  00d07	6b c8 00	 imul	 ecx, eax, 0
  00d0a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d10	52		 push	 edx
  00d11	51		 push	 ecx
  00d12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf460aa6
  00d1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1f	51		 push	 ecx
  00d20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be35c28f
  00d28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2d	51		 push	 ecx
  00d2e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf460aa6
  00d36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d3b	51		 push	 ecx
  00d3c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00d44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d49	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1243 : 		draw_2d_line ( 0.2000, -0.7736,  0.1775, -0.7736, MFD_COLOUR1);

  00d4e	b8 04 00 00 00	 mov	 eax, 4
  00d53	6b c8 00	 imul	 ecx, eax, 0
  00d56	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d5c	52		 push	 edx
  00d5d	51		 push	 ecx
  00d5e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf460aa6
  00d66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6b	51		 push	 ecx
  00d6c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e35c28f
  00d74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d79	51		 push	 ecx
  00d7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf460aa6
  00d82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d87	51		 push	 ecx
  00d88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00d90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d95	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1244 : 
; 1245 : 		x = eo_azimuth / eo_max_azimuth * 0.2;

  00d9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00da2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  00daa	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00dae	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00db6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00dba	f3 0f 11 45 e8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1246 : 		y = (eo_elevation / eo_min_elevation * -0.0727) - 0.7736;

  00dbf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00dc7	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  00dcf	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00dd3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfb29c779a6b50b1
  00ddb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe8c154c985f06f
  00de3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00de7	f3 0f 11 45 e4	 movss	 DWORD PTR _y$[ebp], xmm0

; 1247 : 
; 1248 : 		draw_2d_circle (x, y, 0.04, MFD_COLOUR1);

  00dec	b8 04 00 00 00	 mov	 eax, 4
  00df1	6b c8 00	 imul	 ecx, eax, 0
  00df4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00dfa	52		 push	 edx
  00dfb	51		 push	 ecx
  00dfc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00e04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e09	51		 push	 ecx
  00e0a	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00e0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e14	51		 push	 ecx
  00e15	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00e1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1f	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN23@draw_groun:

; 1249 : 	}
; 1250 : 
; 1251 : 	////////////////////////////////////////
; 1252 : 	//
; 1253 : 	// line graphics
; 1254 : 	//
; 1255 : 	////////////////////////////////////////
; 1256 : 
; 1257 : 	set_2d_viewport_origin (mfd_env, u, v);

  00e24	51		 push	 ecx
  00e25	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _v$[ebp]
  00e2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2f	51		 push	 ecx
  00e30	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _u$[ebp]
  00e35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00e3f	50		 push	 eax
  00e40	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 1258 : 
; 1259 : 	//
; 1260 : 	// max scan limits
; 1261 : 	//
; 1262 : 
; 1263 : 	draw_2d_line (0.0, 0.0, -1.0, 1.0, MFD_COLOUR4);

  00e45	b8 04 00 00 00	 mov	 eax, 4
  00e4a	6b c8 03	 imul	 ecx, eax, 3
  00e4d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e53	52		 push	 edx
  00e54	51		 push	 ecx
  00e55	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e62	51		 push	 ecx
  00e63	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00e6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e70	51		 push	 ecx
  00e71	0f 57 c0	 xorps	 xmm0, xmm0
  00e74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e79	51		 push	 ecx
  00e7a	0f 57 c0	 xorps	 xmm0, xmm0
  00e7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e82	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1264 : 
; 1265 : 	draw_2d_line (0.0, 0.0, 1.0, 1.0, MFD_COLOUR4);

  00e87	b8 04 00 00 00	 mov	 eax, 4
  00e8c	6b c8 03	 imul	 ecx, eax, 3
  00e8f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e95	52		 push	 edx
  00e96	51		 push	 ecx
  00e97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea4	51		 push	 ecx
  00ea5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ead	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb2	51		 push	 ecx
  00eb3	0f 57 c0	 xorps	 xmm0, xmm0
  00eb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ebb	51		 push	 ecx
  00ebc	0f 57 c0	 xorps	 xmm0, xmm0
  00ebf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1266 : 
; 1267 : 	draw_radar_arc (HAVOC_RADAR_SCAN_ARC_SIZE_90, RADIUS, MFD_COLOUR4);

  00ec9	b8 04 00 00 00	 mov	 eax, 4
  00ece	6b c8 03	 imul	 ecx, eax, 3
  00ed1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ed7	52		 push	 edx
  00ed8	51		 push	 ecx
  00ed9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fb504f3
  00ee1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee6	51		 push	 ecx
  00ee7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00eef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef4	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1268 : 
; 1269 : 	//
; 1270 : 	// scan limits and range markers
; 1271 : 	//
; 1272 : 
; 1273 : 	set_2d_window_rotation (mfd_env, -ground_radar.scan_datum);

  00ef9	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00f01	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00f08	51		 push	 ecx
  00f09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f0e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00f13	50		 push	 eax
  00f14	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1274 : 
; 1275 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS, MFD_COLOUR1);

  00f19	b8 04 00 00 00	 mov	 eax, 4
  00f1e	6b c8 00	 imul	 ecx, eax, 0
  00f21	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f27	52		 push	 edx
  00f28	51		 push	 ecx
  00f29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fb504f3
  00f31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f36	51		 push	 ecx
  00f37	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00f3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f44	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1276 : 
; 1277 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.25, MFD_COLOUR4);

  00f49	b8 04 00 00 00	 mov	 eax, 4
  00f4e	6b c8 03	 imul	 ecx, eax, 3
  00f51	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f57	52		 push	 edx
  00f58	51		 push	 ecx
  00f59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb504f3
  00f61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f66	51		 push	 ecx
  00f67	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00f6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f74	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1278 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.50, MFD_COLOUR4);

  00f79	b8 04 00 00 00	 mov	 eax, 4
  00f7e	6b c8 03	 imul	 ecx, eax, 3
  00f81	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f87	52		 push	 edx
  00f88	51		 push	 ecx
  00f89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3504f3
  00f91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f96	51		 push	 ecx
  00f97	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00f9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa4	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1279 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.75, MFD_COLOUR4);

  00fa9	b8 04 00 00 00	 mov	 eax, 4
  00fae	6b c8 03	 imul	 ecx, eax, 3
  00fb1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fb7	52		 push	 edx
  00fb8	51		 push	 ecx
  00fb9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f87c3b6
  00fc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc6	51		 push	 ecx
  00fc7	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00fcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd4	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1280 : 
; 1281 : 	set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum - (ground_radar.scan_arc_size * 0.5)));

  00fd9	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00fe1	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00fe9	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00ff1	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00ff5	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00ffc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01000	51		 push	 ecx
  01001	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0100b	50		 push	 eax
  0100c	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1282 : 
; 1283 : 	draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  01011	b8 04 00 00 00	 mov	 eax, 4
  01016	6b c8 00	 imul	 ecx, eax, 0
  01019	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0101f	52		 push	 edx
  01020	51		 push	 ecx
  01021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fb504f3
  01029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102e	51		 push	 ecx
  0102f	0f 57 c0	 xorps	 xmm0, xmm0
  01032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01037	51		 push	 ecx
  01038	0f 57 c0	 xorps	 xmm0, xmm0
  0103b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01040	51		 push	 ecx
  01041	0f 57 c0	 xorps	 xmm0, xmm0
  01044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01049	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1284 : 
; 1285 : 	set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + (ground_radar.scan_arc_size * 0.5)));

  0104e	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  01056	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  0105e	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  01066	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0106a	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  01071	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01075	51		 push	 ecx
  01076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01080	50		 push	 eax
  01081	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1286 : 
; 1287 : 	draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  01086	b8 04 00 00 00	 mov	 eax, 4
  0108b	6b c8 00	 imul	 ecx, eax, 0
  0108e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01094	52		 push	 edx
  01095	51		 push	 ecx
  01096	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fb504f3
  0109e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a3	51		 push	 ecx
  010a4	0f 57 c0	 xorps	 xmm0, xmm0
  010a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ac	51		 push	 ecx
  010ad	0f 57 c0	 xorps	 xmm0, xmm0
  010b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b5	51		 push	 ecx
  010b6	0f 57 c0	 xorps	 xmm0, xmm0
  010b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010be	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1288 : 
; 1289 : 	//
; 1290 : 	// sweep
; 1291 : 	//
; 1292 : 
; 1293 : 	if (ground_radar_is_active())

  010c3	e8 00 00 00 00	 call	 ?ground_radar_is_active@@YGHXZ ; ground_radar_is_active
  010c8	85 c0		 test	 eax, eax
  010ca	74 79		 je	 SHORT $LN24@draw_groun

; 1294 : 	{
; 1295 : 		set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + ground_radar.sweep_offset));

  010cc	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  010d4	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+12
  010dc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  010e3	51		 push	 ecx
  010e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  010ee	50		 push	 eax
  010ef	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1296 : 	
; 1297 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  010f4	b8 04 00 00 00	 mov	 eax, 4
  010f9	6b c8 00	 imul	 ecx, eax, 0
  010fc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01102	52		 push	 edx
  01103	51		 push	 ecx
  01104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fb504f3
  0110c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01111	51		 push	 ecx
  01112	0f 57 c0	 xorps	 xmm0, xmm0
  01115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0111a	51		 push	 ecx
  0111b	0f 57 c0	 xorps	 xmm0, xmm0
  0111e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01123	51		 push	 ecx
  01124	0f 57 c0	 xorps	 xmm0, xmm0
  01127	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0112c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1298 : 	
; 1299 : 		set_2d_window_rotation (mfd_env, 0.0);

  01131	51		 push	 ecx
  01132	0f 57 c0	 xorps	 xmm0, xmm0
  01135	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0113a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0113f	50		 push	 eax
  01140	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN24@draw_groun:

; 1300 : 	}
; 1301 : 
; 1302 : 	////////////////////////////////////////
; 1303 : 	//
; 1304 : 	// targets
; 1305 : 	//
; 1306 : 	////////////////////////////////////////
; 1307 : 
; 1308 : 	set_2d_window_rotation (mfd_env, source_heading);

  01145	51		 push	 ecx
  01146	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  0114b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01155	50		 push	 eax
  01156	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1309 : 
; 1310 : 	target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  0115b	83 7d e0 00	 cmp	 DWORD PTR _source$[ebp], 0
  0115f	74 0a		 je	 SHORT $LN57@draw_groun
  01161	8b 45 e0	 mov	 eax, DWORD PTR _source$[ebp]
  01164	8b 08		 mov	 ecx, DWORD PTR [eax]
  01166	89 4d 90	 mov	 DWORD PTR tv623[ebp], ecx
  01169	eb 24		 jmp	 SHORT $LN58@draw_groun
$LN57@draw_groun:
  0116b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  01171	81 c2 16 01 00
	00		 add	 edx, 278		; 00000116H
  01177	52		 push	 edx
  01178	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0117d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01182	50		 push	 eax
  01183	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01188	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv623[ebp], 0
$LN58@draw_groun:
  0118f	b9 01 00 00 00	 mov	 ecx, 1
  01194	85 c9		 test	 ecx, ecx
  01196	74 09		 je	 SHORT $LN59@draw_groun
  01198	c7 45 8c 12 00
	00 00		 mov	 DWORD PTR tv631[ebp], 18 ; 00000012H
  0119f	eb 24		 jmp	 SHORT $LN60@draw_groun
$LN59@draw_groun:
  011a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  011a7	81 c2 16 01 00
	00		 add	 edx, 278		; 00000116H
  011ad	52		 push	 edx
  011ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  011b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  011b8	50		 push	 eax
  011b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011be	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv631[ebp], 0
$LN60@draw_groun:
  011c5	6a 12		 push	 18			; 00000012H
  011c7	8b 4d e0	 mov	 ecx, DWORD PTR _source$[ebp]
  011ca	51		 push	 ecx
  011cb	69 55 90 b4 00
	00 00		 imul	 edx, DWORD PTR tv623[ebp], 180
  011d2	8b 45 8c	 mov	 eax, DWORD PTR tv631[ebp]
  011d5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  011dc	ff d1		 call	 ecx
  011de	89 45 dc	 mov	 DWORD PTR _target$[ebp], eax
$LN6@draw_groun:

; 1311 : 
; 1312 : 	while (target)

  011e1	83 7d dc 00	 cmp	 DWORD PTR _target$[ebp], 0
  011e5	0f 84 bf 00 00
	00		 je	 $LN7@draw_groun

; 1313 : 	{
; 1314 : 		if (get_gunship_target_valid_for_ground_radar (target))

  011eb	8b 45 dc	 mov	 eax, DWORD PTR _target$[ebp]
  011ee	50		 push	 eax
  011ef	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_ground_radar
  011f4	85 c0		 test	 eax, eax
  011f6	74 27		 je	 SHORT $LN26@draw_groun

; 1315 : 		{
; 1316 : 			if (get_target_matches_ground_radar_declutter_criteria (target))

  011f8	8b 45 dc	 mov	 eax, DWORD PTR _target$[ebp]
  011fb	50		 push	 eax
  011fc	e8 00 00 00 00	 call	 ?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z ; get_target_matches_ground_radar_declutter_criteria
  01201	85 c0		 test	 eax, eax
  01203	74 1a		 je	 SHORT $LN26@draw_groun

; 1317 : 			{
; 1318 : 				draw_radar_target_symbol (target, source_position, scale, FALSE);

  01205	6a 00		 push	 0
  01207	51		 push	 ecx
  01208	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0120d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01212	8b 45 d8	 mov	 eax, DWORD PTR _source_position$[ebp]
  01215	50		 push	 eax
  01216	8b 4d dc	 mov	 ecx, DWORD PTR _target$[ebp]
  01219	51		 push	 ecx
  0121a	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z ; draw_radar_target_symbol
$LN26@draw_groun:

; 1319 : 			}
; 1320 : 		}
; 1321 : 
; 1322 : 		target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  0121f	83 7d dc 00	 cmp	 DWORD PTR _target$[ebp], 0
  01223	74 0a		 je	 SHORT $LN61@draw_groun
  01225	8b 45 dc	 mov	 eax, DWORD PTR _target$[ebp]
  01228	8b 08		 mov	 ecx, DWORD PTR [eax]
  0122a	89 4d 90	 mov	 DWORD PTR tv654[ebp], ecx
  0122d	eb 24		 jmp	 SHORT $LN62@draw_groun
$LN61@draw_groun:
  0122f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  01235	81 c2 22 01 00
	00		 add	 edx, 290		; 00000122H
  0123b	52		 push	 edx
  0123c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  01241	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01246	50		 push	 eax
  01247	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0124c	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv654[ebp], 0
$LN62@draw_groun:
  01253	b9 01 00 00 00	 mov	 ecx, 1
  01258	85 c9		 test	 ecx, ecx
  0125a	74 09		 je	 SHORT $LN63@draw_groun
  0125c	c7 45 8c 12 00
	00 00		 mov	 DWORD PTR tv662[ebp], 18 ; 00000012H
  01263	eb 24		 jmp	 SHORT $LN64@draw_groun
$LN63@draw_groun:
  01265	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0126b	81 c2 22 01 00
	00		 add	 edx, 290		; 00000122H
  01271	52		 push	 edx
  01272	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  01277	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0127c	50		 push	 eax
  0127d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01282	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv662[ebp], 0
$LN64@draw_groun:
  01289	6a 12		 push	 18			; 00000012H
  0128b	8b 4d dc	 mov	 ecx, DWORD PTR _target$[ebp]
  0128e	51		 push	 ecx
  0128f	69 55 90 b4 00
	00 00		 imul	 edx, DWORD PTR tv654[ebp], 180
  01296	8b 45 8c	 mov	 eax, DWORD PTR tv662[ebp]
  01299	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  012a0	ff d1		 call	 ecx
  012a2	89 45 dc	 mov	 DWORD PTR _target$[ebp], eax

; 1323 : 	}

  012a5	e9 37 ff ff ff	 jmp	 $LN6@draw_groun
$LN7@draw_groun:

; 1324 : 
; 1325 : 	//
; 1326 : 	// draw selected target last
; 1327 : 	//
; 1328 : 
; 1329 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  012aa	83 7d e0 00	 cmp	 DWORD PTR _source$[ebp], 0
  012ae	74 0a		 je	 SHORT $LN65@draw_groun
  012b0	8b 45 e0	 mov	 eax, DWORD PTR _source$[ebp]
  012b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  012b5	89 4d 90	 mov	 DWORD PTR tv674[ebp], ecx
  012b8	eb 24		 jmp	 SHORT $LN66@draw_groun
$LN65@draw_groun:
  012ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  012c0	81 c2 29 01 00
	00		 add	 edx, 297		; 00000129H
  012c6	52		 push	 edx
  012c7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  012cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012d1	50		 push	 eax
  012d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012d7	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv674[ebp], 0
$LN66@draw_groun:
  012de	b9 01 00 00 00	 mov	 ecx, 1
  012e3	85 c9		 test	 ecx, ecx
  012e5	74 09		 je	 SHORT $LN67@draw_groun
  012e7	c7 45 8c 26 00
	00 00		 mov	 DWORD PTR tv682[ebp], 38 ; 00000026H
  012ee	eb 24		 jmp	 SHORT $LN68@draw_groun
$LN67@draw_groun:
  012f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  012f6	81 c2 29 01 00
	00		 add	 edx, 297		; 00000129H
  012fc	52		 push	 edx
  012fd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  01302	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01307	50		 push	 eax
  01308	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0130d	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv682[ebp], 0
$LN68@draw_groun:
  01314	6a 26		 push	 38			; 00000026H
  01316	8b 4d e0	 mov	 ecx, DWORD PTR _source$[ebp]
  01319	51		 push	 ecx
  0131a	69 55 90 b4 00
	00 00		 imul	 edx, DWORD PTR tv674[ebp], 180
  01321	8b 45 8c	 mov	 eax, DWORD PTR tv682[ebp]
  01324	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0132b	ff d1		 call	 ecx
  0132d	89 45 dc	 mov	 DWORD PTR _target$[ebp], eax

; 1330 : 
; 1331 : 	if (target)

  01330	83 7d dc 00	 cmp	 DWORD PTR _target$[ebp], 0
  01334	74 1a		 je	 SHORT $LN27@draw_groun

; 1332 : 	{
; 1333 : 		draw_radar_target_symbol (target, source_position, scale, TRUE);

  01336	6a 01		 push	 1
  01338	51		 push	 ecx
  01339	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0133e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01343	8b 45 d8	 mov	 eax, DWORD PTR _source_position$[ebp]
  01346	50		 push	 eax
  01347	8b 4d dc	 mov	 ecx, DWORD PTR _target$[ebp]
  0134a	51		 push	 ecx
  0134b	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z ; draw_radar_target_symbol
$LN27@draw_groun:

; 1334 : 	}
; 1335 : 
; 1336 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01350	51		 push	 ecx
  01351	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01359	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135e	51		 push	 ecx
  0135f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  01367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0136c	51		 push	 ecx
  0136d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  01375	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137a	51		 push	 ecx
  0137b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  01383	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01388	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0138d	50		 push	 eax
  0138e	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1337 : 
; 1338 : 	set_2d_window_rotation (mfd_env, 0.0);

  01393	51		 push	 ecx
  01394	0f 57 c0	 xorps	 xmm0, xmm0
  01397	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0139c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  013a1	50		 push	 eax
  013a2	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1339 : }

  013a7	5f		 pop	 edi
  013a8	5e		 pop	 esi
  013a9	5b		 pop	 ebx
  013aa	8b e5		 mov	 esp, ebp
  013ac	5d		 pop	 ebp
  013ad	c3		 ret	 0
  013ae	66 90		 npad	 2
$LN69@draw_groun:
  013b0	00 00 00 00	 DD	 $LN13@draw_groun
  013b4	00 00 00 00	 DD	 $LN14@draw_groun
  013b8	00 00 00 00	 DD	 $LN15@draw_groun
  013bc	00 00 00 00	 DD	 $LN18@draw_groun
  013c0	00 00 00 00	 DD	 $LN19@draw_groun
?draw_ground_radar_mfd@@YGXXZ ENDP			; draw_ground_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z
_TEXT	SEGMENT
tv180 = -100						; size = 4
tv160 = -100						; size = 4
tv132 = -100						; size = 4
tv172 = -96						; size = 4
tv152 = -96						; size = 4
tv92 = -96						; size = 4
tv80 = -96						; size = 4
$T1 = -92						; size = 4
_bounding_box_max$ = -24				; size = 4
_bounding_box_min$ = -20				; size = 4
_target_position$ = -16					; size = 4
_radius$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z PROC ; draw_ground_radar_clutter, COMDAT

; 986  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 987  : 	float
; 988  : 		dx,
; 989  : 		dy,
; 990  : 		radius;
; 991  : 
; 992  : 	vec3d
; 993  : 		*target_position,
; 994  : 		*bounding_box_min,
; 995  : 		*bounding_box_max;
; 996  : 
; 997  : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_groun
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00014	83 c0 0b	 add	 eax, 11			; 0000000bH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_groun:

; 998  : 
; 999  : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_groun
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00032	83 c0 0d	 add	 eax, 13			; 0000000dH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_groun:

; 1000 : 
; 1001 : 	ASSERT (get_local_entity_type (target) == ENTITY_TYPE_CITY);

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN7@draw_groun
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN8@draw_groun
$LN7@draw_groun:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0005b	83 c2 0f	 add	 edx, 15			; 0000000fH
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN8@draw_groun:
  00076	83 7d a0 05	 cmp	 DWORD PTR tv80[ebp], 5
  0007a	74 18		 je	 SHORT $LN4@draw_groun
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00081	83 c0 0f	 add	 eax, 15			; 0000000fH
  00084	50		 push	 eax
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
  0008f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_groun:

; 1002 : 
; 1003 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00094	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00098	74 0a		 je	 SHORT $LN9@draw_groun
  0009a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 4d a0	 mov	 DWORD PTR tv92[ebp], ecx
  000a2	eb 21		 jmp	 SHORT $LN10@draw_groun
$LN9@draw_groun:
  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000aa	83 c2 11	 add	 edx, 17			; 00000011H
  000ad	52		 push	 edx
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000be	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN10@draw_groun:
  000c5	b9 01 00 00 00	 mov	 ecx, 1
  000ca	85 c9		 test	 ecx, ecx
  000cc	74 09		 je	 SHORT $LN11@draw_groun
  000ce	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv132[ebp], 8
  000d5	eb 21		 jmp	 SHORT $LN12@draw_groun
$LN11@draw_groun:
  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000dd	83 c2 11	 add	 edx, 17			; 00000011H
  000e0	52		 push	 edx
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN12@draw_groun:
  000f8	6a 08		 push	 8
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000fd	51		 push	 ecx
  000fe	6b 55 a0 60	 imul	 edx, DWORD PTR tv92[ebp], 96
  00102	8b 45 9c	 mov	 eax, DWORD PTR tv132[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 f0	 mov	 DWORD PTR _target_position$[ebp], eax

; 1004 : 
; 1005 : 	dx = (target_position->x - source_position->x) * scale;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00114	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00117	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0011b	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0011f	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00124	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1006 : 	dy = (target_position->z - source_position->z) * scale;

  00129	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  0012c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0012f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00134	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00139	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0013e	f3 0f 11 45 f8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1007 : 
; 1008 : 	bounding_box_min = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MIN);

  00143	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00147	74 0a		 je	 SHORT $LN13@draw_groun
  00149	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0014c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014e	89 4d a0	 mov	 DWORD PTR tv152[ebp], ecx
  00151	eb 21		 jmp	 SHORT $LN14@draw_groun
$LN13@draw_groun:
  00153	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00159	83 c2 16	 add	 edx, 22			; 00000016H
  0015c	52		 push	 edx
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016d	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
$LN14@draw_groun:
  00174	b9 01 00 00 00	 mov	 ecx, 1
  00179	85 c9		 test	 ecx, ecx
  0017b	74 09		 je	 SHORT $LN15@draw_groun
  0017d	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv160[ebp], 1
  00184	eb 21		 jmp	 SHORT $LN16@draw_groun
$LN15@draw_groun:
  00186	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0018c	83 c2 16	 add	 edx, 22			; 00000016H
  0018f	52		 push	 edx
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a0	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN16@draw_groun:
  001a7	6a 01		 push	 1
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001ac	51		 push	 ecx
  001ad	6b 55 a0 60	 imul	 edx, DWORD PTR tv152[ebp], 96
  001b1	8b 45 9c	 mov	 eax, DWORD PTR tv160[ebp]
  001b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001bb	ff d1		 call	 ecx
  001bd	89 45 ec	 mov	 DWORD PTR _bounding_box_min$[ebp], eax

; 1009 : 	bounding_box_max = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MAX);

  001c0	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001c4	74 0a		 je	 SHORT $LN17@draw_groun
  001c6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cb	89 4d a0	 mov	 DWORD PTR tv172[ebp], ecx
  001ce	eb 21		 jmp	 SHORT $LN18@draw_groun
$LN17@draw_groun:
  001d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  001d6	83 c2 17	 add	 edx, 23			; 00000017H
  001d9	52		 push	 edx
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ea	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN18@draw_groun:
  001f1	b9 01 00 00 00	 mov	 ecx, 1
  001f6	85 c9		 test	 ecx, ecx
  001f8	74 09		 je	 SHORT $LN19@draw_groun
  001fa	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
  00201	eb 21		 jmp	 SHORT $LN20@draw_groun
$LN19@draw_groun:
  00203	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00209	83 c2 17	 add	 edx, 23			; 00000017H
  0020c	52		 push	 edx
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN20@draw_groun:
  00224	6a 00		 push	 0
  00226	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00229	51		 push	 ecx
  0022a	6b 55 a0 60	 imul	 edx, DWORD PTR tv172[ebp], 96
  0022e	8b 45 9c	 mov	 eax, DWORD PTR tv180[ebp]
  00231	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00238	ff d1		 call	 ecx
  0023a	89 45 e8	 mov	 DWORD PTR _bounding_box_max$[ebp], eax

; 1010 : 
; 1011 : 	radius = get_approx_2d_range (bounding_box_min, bounding_box_max);

  0023d	8b 45 e8	 mov	 eax, DWORD PTR _bounding_box_max$[ebp]
  00240	50		 push	 eax
  00241	8b 4d ec	 mov	 ecx, DWORD PTR _bounding_box_min$[ebp]
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 ?get_approx_2d_range@@YGMPBUVEC3D@@0@Z ; get_approx_2d_range
  0024a	d9 5d f4	 fstp	 DWORD PTR _radius$[ebp]

; 1012 : 
; 1013 : 	//
; 1014 : 	// radius check to ignore oil pipelines and overly large city blocks
; 1015 : 	//
; 1016 : 
; 1017 : 	if (radius < 2000.0)

  0024d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  00252	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@409f400000000000
  0025a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0025e	76 5d		 jbe	 SHORT $LN5@draw_groun

; 1018 : 	{
; 1019 : 		radius = max (50.0f, radius);

  00260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00268	f3 0f 11 45 a4	 movss	 DWORD PTR $T1[ebp], xmm0
  0026d	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  00270	50		 push	 eax
  00271	8d 4d a4	 lea	 ecx, DWORD PTR $T1[ebp]
  00274	51		 push	 ecx
  00275	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0027a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0027e	f3 0f 11 45 f4	 movss	 DWORD PTR _radius$[ebp], xmm0

; 1020 : 
; 1021 : 		draw_2d_hatched_circle (dx, dy, radius * scale, MFD_COLOUR5);

  00283	b8 04 00 00 00	 mov	 eax, 4
  00288	c1 e0 02	 shl	 eax, 2
  0028b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00291	51		 push	 ecx
  00292	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00297	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0029c	51		 push	 ecx
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	51		 push	 ecx
  002a3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	51		 push	 ecx
  002ae	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  002b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b8	e8 00 00 00 00	 call	 ?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_circle
$LN5@draw_groun:

; 1022 : 	}
; 1023 : }

  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	5b		 pop	 ebx
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c2 0c 00	 ret	 12			; 0000000cH
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ENDP ; draw_ground_radar_clutter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_ground_radar_heading_scale@@YGXXZ
_TEXT	SEGMENT
tv131 = -136						; size = 4
tv91 = -132						; size = 4
_s$ = -64						; size = 20
_int_heading_step_10$ = -44				; size = 4
_loop$ = -40						; size = 4
_j$ = -36						; size = 4
_i$ = -32						; size = 4
_width$ = -28						; size = 4
_x$ = -24						; size = 4
_mod_heading_step_10$ = -20				; size = 4
_heading$ = -16						; size = 4
_mfd_vp_x_max$ = -12					; size = 4
_mfd_vp_x_min$ = -8					; size = 4
_y_position$ = -4					; size = 4
?draw_ground_radar_heading_scale@@YGXXZ PROC		; draw_ground_radar_heading_scale, COMDAT

; 829  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 830  : 	float
; 831  : 		y_position,
; 832  : 		mfd_vp_x_min,
; 833  : 		mfd_vp_x_max,
; 834  : 		heading,
; 835  : 		mod_heading_step_10,
; 836  : 		x,
; 837  : 		width,
; 838  : 		i,
; 839  : 		j;
; 840  : 
; 841  : 	int
; 842  : 		loop,
; 843  : 		int_heading_step_10;
; 844  : 
; 845  : 	char
; 846  : 		s[20];
; 847  : 
; 848  : 	//
; 849  : 	// adjust 2D environment for heading scale clipping
; 850  : 	//
; 851  : 
; 852  : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * 0.5, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * 0.5, MFD_WINDOW_Y_MAX);

  0000c	51		 push	 ecx
  0000d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00015	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001a	51		 push	 ecx
  0001b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3effbe77
  00023	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00028	51		 push	 ecx
  00029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00036	51		 push	 ecx
  00037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 853  : 
; 854  : 	mfd_vp_x_min = mfd_viewport_x_org - (mfd_viewport_size * (0.5 * 0.5));

  0004f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00057	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0005f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  00067	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0006b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0006f	f3 0f 11 45 f8	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 855  : 
; 856  : 	mfd_vp_x_max = mfd_viewport_x_org + (mfd_viewport_size * (0.5 * 0.5)) - 0.001;

  00074	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  0007c	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00084	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  0008c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00090	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00098	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0009c	f3 0f 11 45 f4	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 857  : 
; 858  : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  000a1	51		 push	 ecx
  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  000aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000af	51		 push	 ecx
  000b0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  000b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ba	51		 push	 ecx
  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	51		 push	 ecx
  000c9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  000ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 859  : 
; 860  : 	//
; 861  : 	// sort first major tick position (draw 2 major ticks either side of centre)
; 862  : 	//
; 863  : 
; 864  : 	heading = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING);

  000de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  000e5	74 0f		 je	 SHORT $LN14@draw_groun
  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ee	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv91[ebp], ecx
  000f4	eb 24		 jmp	 SHORT $LN15@draw_groun
$LN14@draw_groun:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_heading_scale@@YGXXZ@4JA
  000fc	83 c2 23	 add	 edx, 35			; 00000023H
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv91[ebp], 0
$LN15@draw_groun:
  0011a	b9 01 00 00 00	 mov	 ecx, 1
  0011f	85 c9		 test	 ecx, ecx
  00121	74 0c		 je	 SHORT $LN16@draw_groun
  00123	c7 85 78 ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv131[ebp], 52 ; 00000034H
  0012d	eb 24		 jmp	 SHORT $LN17@draw_groun
$LN16@draw_groun:
  0012f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_heading_scale@@YGXXZ@4JA
  00135	83 c2 23	 add	 edx, 35			; 00000023H
  00138	52		 push	 edx
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00149	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv131[ebp], 0
$LN17@draw_groun:
  00153	6a 34		 push	 52			; 00000034H
  00155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0015b	51		 push	 ecx
  0015c	69 95 7c ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv91[ebp], 700
  00166	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv131[ebp]
  0016c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00173	ff d1		 call	 ecx
  00175	d9 5d f0	 fstp	 DWORD PTR _heading$[ebp]

; 865  : 
; 866  : 	heading = deg (heading);

  00178	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0017d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00185	f3 0f 11 45 f0	 movss	 DWORD PTR _heading$[ebp], xmm0

; 867  : 
; 868  : 	mod_heading_step_10 = fmod (heading, 10.0f);

  0018a	51		 push	 ecx
  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	51		 push	 ecx
  00199	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0019e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a3	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  001a8	d9 5d ec	 fstp	 DWORD PTR _mod_heading_step_10$[ebp]

; 869  : 
; 870  : 	int_heading_step_10 = ((int) (heading * 0.1) * 10);

  001ab	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  001b0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  001b8	f2 0f 2c c0	 cvttsd2si eax, xmm0
  001bc	6b c8 0a	 imul	 ecx, eax, 10
  001bf	89 4d d4	 mov	 DWORD PTR _int_heading_step_10$[ebp], ecx

; 871  : 
; 872  : 	int_heading_step_10 -= 20;

  001c2	8b 45 d4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  001c5	83 e8 14	 sub	 eax, 20			; 00000014H
  001c8	89 45 d4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 873  : 
; 874  : 	if (int_heading_step_10 < 0)

  001cb	79 0b		 jns	 SHORT $LN5@draw_groun

; 875  : 	{
; 876  : 		int_heading_step_10 += 360;

  001cd	8b 45 d4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  001d0	05 68 01 00 00	 add	 eax, 360		; 00000168H
  001d5	89 45 d4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
$LN5@draw_groun:

; 877  : 	}
; 878  : 
; 879  : 	x = - (20.0 + mod_heading_step_10) * 0.05;

  001d8	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  001dd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  001e5	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  001ec	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  001f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f8	f3 0f 11 45 e8	 movss	 DWORD PTR _x$[ebp], xmm0

; 880  : 
; 881  : 	//
; 882  : 	// large and small MFD position
; 883  : 	//
; 884  : 
; 885  : 	y_position = 0.8375;

  001fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f566666
  00205	f3 0f 11 45 fc	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 886  : 
; 887  : 	//
; 888  : 	// draw heading scale line
; 889  : 	//
; 890  : 
; 891  : 	draw_2d_line (-0.5, y_position, 0.5, y_position, MFD_COLOUR1);

  0020a	b8 04 00 00 00	 mov	 eax, 4
  0020f	6b c8 00	 imul	 ecx, eax, 0
  00212	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00218	52		 push	 edx
  00219	51		 push	 ecx
  0021a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  0021f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00224	51		 push	 ecx
  00225	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0022d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00232	51		 push	 ecx
  00233	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	51		 push	 ecx
  0023e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00246	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 892  : 
; 893  : 	//
; 894  : 	// large and small MFD differences
; 895  : 	//
; 896  : 
; 897  : 	get_2d_float_screen_coordinates (0.0, y_position, &i, &j);

  00250	8d 45 dc	 lea	 eax, DWORD PTR _j$[ebp]
  00253	50		 push	 eax
  00254	8d 4d e0	 lea	 ecx, DWORD PTR _i$[ebp]
  00257	51		 push	 ecx
  00258	51		 push	 ecx
  00259	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  0025e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00263	51		 push	 ecx
  00264	0f 57 c0	 xorps	 xmm0, xmm0
  00267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026c	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 898  : 
; 899  : 	if (draw_large_mfd)

  00271	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00278	74 44		 je	 SHORT $LN6@draw_groun

; 900  : 	{
; 901  : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  0027a	6a 04		 push	 4
  0027c	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 902  : 
; 903  : 		draw_mono_sprite (large_ground_radar_heading_scale_datum, i, j + 1.0, MFD_COLOUR1);

  00281	b8 04 00 00 00	 mov	 eax, 4
  00286	6b c8 00	 imul	 ecx, eax, 0
  00289	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0028f	52		 push	 edx
  00290	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _j$[ebp]
  00295	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0029d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a1	51		 push	 ecx
  002a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a7	51		 push	 ecx
  002a8	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _i$[ebp]
  002ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b2	68 00 00 00 00	 push	 OFFSET ?large_ground_radar_heading_scale_datum@@3PADA
  002b7	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 904  : 	}
; 905  : 	else

  002bc	eb 42		 jmp	 SHORT $LN7@draw_groun
$LN6@draw_groun:

; 906  : 	{
; 907  : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  002be	6a 01		 push	 1
  002c0	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 908  : 
; 909  : 		draw_mono_sprite (small_ground_radar_heading_scale_datum, i, j + 1.0, MFD_COLOUR1);

  002c5	b8 04 00 00 00	 mov	 eax, 4
  002ca	6b c8 00	 imul	 ecx, eax, 0
  002cd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d3	52		 push	 edx
  002d4	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _j$[ebp]
  002d9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  002e1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002e5	51		 push	 ecx
  002e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002eb	51		 push	 ecx
  002ec	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _i$[ebp]
  002f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f6	68 00 00 00 00	 push	 OFFSET ?small_ground_radar_heading_scale_datum@@3PADA
  002fb	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN7@draw_groun:

; 910  : 	}
; 911  : 
; 912  : 	//
; 913  : 	// draw heading scale ticks and heading value
; 914  : 	//
; 915  : 
; 916  : 	for (loop = 0; loop < 5; loop++)

  00300	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00307	eb 09		 jmp	 SHORT $LN4@draw_groun
$LN2@draw_groun:
  00309	8b 45 d8	 mov	 eax, DWORD PTR _loop$[ebp]
  0030c	83 c0 01	 add	 eax, 1
  0030f	89 45 d8	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_groun:
  00312	83 7d d8 05	 cmp	 DWORD PTR _loop$[ebp], 5
  00316	0f 8d d3 01 00
	00		 jge	 $LN3@draw_groun

; 917  : 	{
; 918  : 		//
; 919  : 		// major tick every 10 degrees
; 920  : 		//
; 921  : 
; 922  : 		draw_2d_line (x, y_position, x, y_position + 0.05, MFD_COLOUR1);

  0031c	b8 04 00 00 00	 mov	 eax, 4
  00321	6b c8 00	 imul	 ecx, eax, 0
  00324	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0032a	52		 push	 edx
  0032b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  00330	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00338	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0033c	51		 push	 ecx
  0033d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00342	51		 push	 ecx
  00343	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00348	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034d	51		 push	 ecx
  0034e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	51		 push	 ecx
  00359	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 923  : 
; 924  : 		//
; 925  : 		// minor tick every 5 degrees
; 926  : 		//
; 927  : 
; 928  : 		draw_2d_line (x + 0.25, y_position, x + 0.25, y_position + 0.025, MFD_COLOUR1);

  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	6b c8 00	 imul	 ecx, eax, 0
  00370	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00376	52		 push	 edx
  00377	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  0037c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00384	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00388	51		 push	 ecx
  00389	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038e	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00393	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  0039b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0039f	51		 push	 ecx
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	51		 push	 ecx
  003a6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  003ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b0	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  003b5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  003bd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003c1	51		 push	 ecx
  003c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 929  : 
; 930  : 		//
; 931  : 		// heading value ('0' displayed as '360')
; 932  : 		//
; 933  : 
; 934  : 		if (int_heading_step_10 != 0)

  003cc	83 7d d4 00	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 0
  003d0	74 17		 je	 SHORT $LN8@draw_groun

; 935  : 		{
; 936  : 			sprintf (s, "%d", int_heading_step_10);

  003d2	8b 45 d4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  003d5	50		 push	 eax
  003d6	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  003db	8d 4d c0	 lea	 ecx, DWORD PTR _s$[ebp]
  003de	51		 push	 ecx
  003df	e8 00 00 00 00	 call	 _sprintf
  003e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 937  : 		}
; 938  : 		else

  003e7	eb 11		 jmp	 SHORT $LN9@draw_groun
$LN8@draw_groun:

; 939  : 		{
; 940  : 			sprintf (s, "360");

  003e9	68 00 00 00 00	 push	 OFFSET ??_C@_03MDIFNIHN@360@
  003ee	8d 45 c0	 lea	 eax, DWORD PTR _s$[ebp]
  003f1	50		 push	 eax
  003f2	e8 00 00 00 00	 call	 _sprintf
  003f7	83 c4 08	 add	 esp, 8
$LN9@draw_groun:

; 941  : 		}
; 942  : 
; 943  : 		set_2d_mono_font_position (x, y_position + 0.05);

  003fa	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  003ff	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00407	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0040b	51		 push	 ecx
  0040c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00411	51		 push	 ecx
  00412	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00417	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 944  : 
; 945  : 		width = get_mono_font_string_width (s);

  00421	8d 45 c0	 lea	 eax, DWORD PTR _s$[ebp]
  00424	50		 push	 eax
  00425	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0042a	d9 5d e4	 fstp	 DWORD PTR _width$[ebp]

; 946  : 
; 947  : 		if (draw_large_mfd)

  0042d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00434	74 3f		 je	 SHORT $LN10@draw_groun

; 948  : 		{
; 949  : 			set_mono_font_rel_position ((-width * 0.5) + 1.0, -8.0);

  00436	51		 push	 ecx
  00437	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0043f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00444	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _width$[ebp]
  00449	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00450	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00454	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0045c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00464	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00468	51		 push	 ecx
  00469	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 950  : 		}
; 951  : 		else

  00473	eb 3d		 jmp	 SHORT $LN11@draw_groun
$LN10@draw_groun:

; 952  : 		{
; 953  : 			set_mono_font_rel_position ((-width * 0.5) + 1.0, -6.0);

  00475	51		 push	 ecx
  00476	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0047e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00483	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _width$[ebp]
  00488	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0048f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00493	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0049b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  004a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004a7	51		 push	 ecx
  004a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ad	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN11@draw_groun:

; 954  : 		}
; 955  : 
; 956  : 		print_mono_font_string (s);

  004b2	8d 45 c0	 lea	 eax, DWORD PTR _s$[ebp]
  004b5	50		 push	 eax
  004b6	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 957  : 
; 958  : 		//
; 959  : 		// next heading value
; 960  : 		//
; 961  : 
; 962  : 		int_heading_step_10 += 10;

  004bb	8b 45 d4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  004be	83 c0 0a	 add	 eax, 10			; 0000000aH
  004c1	89 45 d4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 963  : 
; 964  : 		if (int_heading_step_10 == 360)

  004c4	81 7d d4 68 01
	00 00		 cmp	 DWORD PTR _int_heading_step_10$[ebp], 360 ; 00000168H
  004cb	75 07		 jne	 SHORT $LN12@draw_groun

; 965  : 		{
; 966  : 			int_heading_step_10 = 0;

  004cd	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _int_heading_step_10$[ebp], 0
$LN12@draw_groun:

; 967  : 		}
; 968  : 
; 969  : 		x += 0.5;

  004d4	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  004d9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  004e1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e5	f3 0f 11 45 e8	 movss	 DWORD PTR _x$[ebp], xmm0

; 970  : 	}

  004ea	e9 1a fe ff ff	 jmp	 $LN2@draw_groun
$LN3@draw_groun:

; 971  : 
; 972  : 	//
; 973  : 	// restore 2D environment
; 974  : 	//
; 975  : 
; 976  : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  004ef	51		 push	 ecx
  004f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  004f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fd	51		 push	 ecx
  004fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00506	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050b	51		 push	 ecx
  0050c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00514	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00519	51		 push	 ecx
  0051a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00522	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00527	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0052c	50		 push	 eax
  0052d	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 977  : 
; 978  : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00532	51		 push	 ecx
  00533	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0053b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00540	51		 push	 ecx
  00541	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00549	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054e	51		 push	 ecx
  0054f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00557	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055c	51		 push	 ecx
  0055d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00565	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0056f	50		 push	 eax
  00570	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 979  : }

  00575	5f		 pop	 edi
  00576	5e		 pop	 esi
  00577	5b		 pop	 ebx
  00578	8b e5		 mov	 esp, ebp
  0057a	5d		 pop	 ebp
  0057b	c3		 ret	 0
?draw_ground_radar_heading_scale@@YGXXZ ENDP		; draw_ground_radar_heading_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z
_TEXT	SEGMENT
tv268 = -92						; size = 4
tv208 = -92						; size = 4
tv173 = -92						; size = 4
tv145 = -92						; size = 4
tv88 = -92						; size = 4
tv261 = -88						; size = 4
tv201 = -88						; size = 4
tv165 = -88						; size = 4
tv137 = -88						; size = 4
tv80 = -88						; size = 4
_target_position$ = -20					; size = 4
_dy$ = -16						; size = 4
_dx$ = -12						; size = 4
_target_symbol_colour$ = -8				; size = 4
_target_symbol_type$ = -4				; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
_selected_target$ = 20					; size = 4
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z PROC ; draw_radar_target_symbol, COMDAT

; 693  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 694  : 	target_symbol_types
; 695  : 		target_symbol_type;
; 696  : 
; 697  : 	rgb_colour
; 698  : 		target_symbol_colour;
; 699  : 
; 700  : 	float
; 701  : 		dx,
; 702  : 		dy;
; 703  : 
; 704  : 	vec3d
; 705  : 		*target_position;
; 706  : 
; 707  : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_radar
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
  00014	83 c0 0e	 add	 eax, 14			; 0000000eH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_radar:

; 708  : 
; 709  : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_radar
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
  00032	83 c0 10	 add	 eax, 16			; 00000010H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_radar:

; 710  : 
; 711  : 	ASSERT (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER));

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN22@draw_radar
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a8	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN23@draw_radar
$LN22@draw_radar:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
  0005b	83 c2 12	 add	 edx, 18			; 00000012H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN23@draw_radar:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN24@draw_radar
  0007f	c7 45 a4 42 00
	00 00		 mov	 DWORD PTR tv88[ebp], 66	; 00000042H
  00086	eb 21		 jmp	 SHORT $LN25@draw_radar
$LN24@draw_radar:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
  0008e	83 c2 12	 add	 edx, 18			; 00000012H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN25@draw_radar:
  000a9	6a 42		 push	 66			; 00000042H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 a8 5c 04
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 1116
  000b6	8b 45 a4	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	85 c0		 test	 eax, eax
  000c4	74 18		 je	 SHORT $LN4@draw_radar
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
  000cb	83 c0 12	 add	 eax, 18			; 00000012H
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_radar:

; 712  : 
; 713  : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  000de	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  000e2	74 0a		 je	 SHORT $LN26@draw_radar
  000e4	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e9	89 4d a8	 mov	 DWORD PTR tv137[ebp], ecx
  000ec	eb 21		 jmp	 SHORT $LN27@draw_radar
$LN26@draw_radar:
  000ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
  000f4	83 c2 14	 add	 edx, 20			; 00000014H
  000f7	52		 push	 edx
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00108	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN27@draw_radar:
  0010f	b9 01 00 00 00	 mov	 ecx, 1
  00114	85 c9		 test	 ecx, ecx
  00116	74 09		 je	 SHORT $LN28@draw_radar
  00118	c7 45 a4 08 00
	00 00		 mov	 DWORD PTR tv145[ebp], 8
  0011f	eb 21		 jmp	 SHORT $LN29@draw_radar
$LN28@draw_radar:
  00121	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
  00127	83 c2 14	 add	 edx, 20			; 00000014H
  0012a	52		 push	 edx
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0013b	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN29@draw_radar:
  00142	6a 08		 push	 8
  00144	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00147	51		 push	 ecx
  00148	6b 55 a8 60	 imul	 edx, DWORD PTR tv137[ebp], 96
  0014c	8b 45 a4	 mov	 eax, DWORD PTR tv145[ebp]
  0014f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00156	ff d1		 call	 ecx
  00158	89 45 ec	 mov	 DWORD PTR _target_position$[ebp], eax

; 714  : 
; 715  : 	dx = (target_position->x - source_position->x) * scale;

  0015b	8b 45 ec	 mov	 eax, DWORD PTR _target_position$[ebp]
  0015e	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00161	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00165	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00169	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0016e	f3 0f 11 45 f4	 movss	 DWORD PTR _dx$[ebp], xmm0

; 716  : 	dy = (target_position->z - source_position->z) * scale;

  00173	8b 45 ec	 mov	 eax, DWORD PTR _target_position$[ebp]
  00176	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00179	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0017e	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00183	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00188	f3 0f 11 45 f0	 movss	 DWORD PTR _dy$[ebp], xmm0

; 717  : 
; 718  : 	target_symbol_type = (target_symbol_types) get_local_entity_int_value (target, INT_TYPE_TARGET_SYMBOL_TYPE);

  0018d	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00191	74 0a		 je	 SHORT $LN30@draw_radar
  00193	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00196	8b 08		 mov	 ecx, DWORD PTR [eax]
  00198	89 4d a8	 mov	 DWORD PTR tv165[ebp], ecx
  0019b	eb 21		 jmp	 SHORT $LN31@draw_radar
$LN30@draw_radar:
  0019d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
  001a3	83 c2 19	 add	 edx, 25			; 00000019H
  001a6	52		 push	 edx
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b7	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN31@draw_radar:
  001be	b9 01 00 00 00	 mov	 ecx, 1
  001c3	85 c9		 test	 ecx, ecx
  001c5	74 09		 je	 SHORT $LN32@draw_radar
  001c7	c7 45 a4 d5 00
	00 00		 mov	 DWORD PTR tv173[ebp], 213 ; 000000d5H
  001ce	eb 21		 jmp	 SHORT $LN33@draw_radar
$LN32@draw_radar:
  001d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
  001d6	83 c2 19	 add	 edx, 25			; 00000019H
  001d9	52		 push	 edx
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ea	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv173[ebp], 0
$LN33@draw_radar:
  001f1	68 d5 00 00 00	 push	 213			; 000000d5H
  001f6	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001f9	51		 push	 ecx
  001fa	69 55 a8 5c 04
	00 00		 imul	 edx, DWORD PTR tv165[ebp], 1116
  00201	8b 45 a4	 mov	 eax, DWORD PTR tv173[ebp]
  00204	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0020b	ff d1		 call	 ecx
  0020d	89 45 fc	 mov	 DWORD PTR _target_symbol_type$[ebp], eax

; 719  : 
; 720  : 	ASSERT ((target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_SYMBOL_TYPES));

  00210	83 7d fc 00	 cmp	 DWORD PTR _target_symbol_type$[ebp], 0
  00214	7c 06		 jl	 SHORT $LN6@draw_radar
  00216	83 7d fc 08	 cmp	 DWORD PTR _target_symbol_type$[ebp], 8
  0021a	7c 18		 jl	 SHORT $LN5@draw_radar
$LN6@draw_radar:
  0021c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z@4JA
  00221	83 c0 1b	 add	 eax, 27			; 0000001bH
  00224	50		 push	 eax
  00225	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0022a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
  0022f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_radar:

; 721  : 
; 722  : 	if (get_local_entity_index (target) & 1)

  00234	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00237	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  0023d	c1 f8 04	 sar	 eax, 4
  00240	83 e0 01	 and	 eax, 1
  00243	74 13		 je	 SHORT $LN7@draw_radar

; 723  : 	{
; 724  : 		target_symbol_colour = MFD_COLOUR2;

  00245	b8 04 00 00 00	 mov	 eax, 4
  0024a	c1 e0 00	 shl	 eax, 0
  0024d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00253	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx

; 725  : 	}
; 726  : 	else

  00256	eb 11		 jmp	 SHORT $LN8@draw_radar
$LN7@draw_radar:

; 727  : 	{
; 728  : 		target_symbol_colour = MFD_COLOUR1;

  00258	b8 04 00 00 00	 mov	 eax, 4
  0025d	6b c8 00	 imul	 ecx, eax, 0
  00260	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00266	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN8@draw_radar:

; 729  : 	}
; 730  : 
; 731  : 	if (draw_large_mfd)

  00269	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00270	0f 84 a3 01 00
	00		 je	 $LN9@draw_radar

; 732  : 	{
; 733  : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  00276	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0027a	74 0a		 je	 SHORT $LN34@draw_radar
  0027c	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0027f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00281	89 4d a8	 mov	 DWORD PTR tv201[ebp], ecx
  00284	eb 1d		 jmp	 SHORT $LN35@draw_radar
$LN34@draw_radar:
  00286	68 dd 02 00 00	 push	 733			; 000002ddH
  0028b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00290	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00296	52		 push	 edx
  00297	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0029c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv201[ebp], 0
$LN35@draw_radar:
  002a3	b8 01 00 00 00	 mov	 eax, 1
  002a8	85 c0		 test	 eax, eax
  002aa	74 09		 je	 SHORT $LN36@draw_radar
  002ac	c7 45 a4 50 00
	00 00		 mov	 DWORD PTR tv208[ebp], 80 ; 00000050H
  002b3	eb 1d		 jmp	 SHORT $LN37@draw_radar
$LN36@draw_radar:
  002b5	68 dd 02 00 00	 push	 733			; 000002ddH
  002ba	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002c5	51		 push	 ecx
  002c6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002cb	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv208[ebp], 0
$LN37@draw_radar:
  002d2	6a 50		 push	 80			; 00000050H
  002d4	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  002d7	52		 push	 edx
  002d8	69 45 a8 5c 04
	00 00		 imul	 eax, DWORD PTR tv201[ebp], 1116
  002df	8b 4d a4	 mov	 ecx, DWORD PTR tv208[ebp]
  002e2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002e9	ff d2		 call	 edx
  002eb	85 c0		 test	 eax, eax
  002ed	74 67		 je	 SHORT $LN11@draw_radar

; 734  : 		{
; 735  : 			if (selected_target)

  002ef	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  002f3	74 35		 je	 SHORT $LN13@draw_radar

; 736  : 			{
; 737  : 				draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  002f5	b8 04 00 00 00	 mov	 eax, 4
  002fa	6b c8 05	 imul	 ecx, eax, 5
  002fd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00303	52		 push	 edx
  00304	51		 push	 ecx
  00305	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0030a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030f	51		 push	 ecx
  00310	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00315	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031a	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  0031d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN13@draw_radar:

; 738  : 			}
; 739  : 
; 740  : 			draw_2d_mono_sprite (large_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  0032a	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0032d	50		 push	 eax
  0032e	51		 push	 ecx
  0032f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00334	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00339	51		 push	 ecx
  0033a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0033f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00344	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00347	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los@@3PAPBDA[ecx*4]
  0034e	52		 push	 edx
  0034f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 741  : 		}
; 742  : 		else

  00354	eb 65		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:

; 743  : 		{
; 744  : 			if (selected_target)

  00356	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  0035a	74 35		 je	 SHORT $LN14@draw_radar

; 745  : 			{
; 746  : 				draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0035c	b8 04 00 00 00	 mov	 eax, 4
  00361	6b c8 05	 imul	 ecx, eax, 5
  00364	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036a	52		 push	 edx
  0036b	51		 push	 ecx
  0036c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00376	51		 push	 ecx
  00377	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0037c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00381	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00384	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  0038b	51		 push	 ecx
  0038c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN14@draw_radar:

; 747  : 			}
; 748  : 
; 749  : 			draw_2d_mono_sprite (large_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  00391	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00394	50		 push	 eax
  00395	51		 push	 ecx
  00396	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0039b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a0	51		 push	 ecx
  003a1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  003a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ab	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  003ae	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  003b5	52		 push	 edx
  003b6	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN12@draw_radar:

; 750  : 		}
; 751  : 
; 752  : 		if (selected_target)

  003bb	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  003bf	74 53		 je	 SHORT $LN15@draw_radar

; 753  : 		{
; 754  : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  003c1	b8 04 00 00 00	 mov	 eax, 4
  003c6	6b c8 05	 imul	 ecx, eax, 5
  003c9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003cf	52		 push	 edx
  003d0	51		 push	 ecx
  003d1	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  003d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003db	51		 push	 ecx
  003dc	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  003e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e6	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  003eb	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 755  : 
; 756  : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  003f0	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  003f3	50		 push	 eax
  003f4	51		 push	 ecx
  003f5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  003fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ff	51		 push	 ecx
  00400	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00405	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040a	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target@@3QBDB ; large_display_target_symbol_selected_target
  0040f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN15@draw_radar:

; 757  : 		}
; 758  : 	}
; 759  : 	else

  00414	e9 9e 01 00 00	 jmp	 $LN20@draw_radar
$LN9@draw_radar:

; 760  : 	{
; 761  : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  00419	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0041d	74 0a		 je	 SHORT $LN38@draw_radar
  0041f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00422	8b 08		 mov	 ecx, DWORD PTR [eax]
  00424	89 4d a8	 mov	 DWORD PTR tv261[ebp], ecx
  00427	eb 1d		 jmp	 SHORT $LN39@draw_radar
$LN38@draw_radar:
  00429	68 f9 02 00 00	 push	 761			; 000002f9H
  0042e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00433	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00439	52		 push	 edx
  0043a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0043f	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv261[ebp], 0
$LN39@draw_radar:
  00446	b8 01 00 00 00	 mov	 eax, 1
  0044b	85 c0		 test	 eax, eax
  0044d	74 09		 je	 SHORT $LN40@draw_radar
  0044f	c7 45 a4 50 00
	00 00		 mov	 DWORD PTR tv268[ebp], 80 ; 00000050H
  00456	eb 1d		 jmp	 SHORT $LN41@draw_radar
$LN40@draw_radar:
  00458	68 f9 02 00 00	 push	 761			; 000002f9H
  0045d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00462	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00468	51		 push	 ecx
  00469	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0046e	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv268[ebp], 0
$LN41@draw_radar:
  00475	6a 50		 push	 80			; 00000050H
  00477	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0047a	52		 push	 edx
  0047b	69 45 a8 5c 04
	00 00		 imul	 eax, DWORD PTR tv261[ebp], 1116
  00482	8b 4d a4	 mov	 ecx, DWORD PTR tv268[ebp]
  00485	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0048c	ff d2		 call	 edx
  0048e	85 c0		 test	 eax, eax
  00490	74 67		 je	 SHORT $LN16@draw_radar

; 762  : 		{
; 763  : 			if (selected_target)

  00492	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00496	74 35		 je	 SHORT $LN18@draw_radar

; 764  : 			{
; 765  : 				draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  00498	b8 04 00 00 00	 mov	 eax, 4
  0049d	6b c8 05	 imul	 ecx, eax, 5
  004a0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004a6	52		 push	 edx
  004a7	51		 push	 ecx
  004a8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  004ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b2	51		 push	 ecx
  004b3	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  004b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bd	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  004c0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  004c7	51		 push	 ecx
  004c8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN18@draw_radar:

; 766  : 			}
; 767  : 
; 768  : 			draw_2d_mono_sprite (small_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  004cd	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  004d0	50		 push	 eax
  004d1	51		 push	 ecx
  004d2	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  004d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004dc	51		 push	 ecx
  004dd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  004e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e7	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  004ea	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los@@3PAPBDA[ecx*4]
  004f1	52		 push	 edx
  004f2	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 769  : 		}
; 770  : 		else

  004f7	eb 65		 jmp	 SHORT $LN17@draw_radar
$LN16@draw_radar:

; 771  : 		{
; 772  : 			if (selected_target)

  004f9	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  004fd	74 35		 je	 SHORT $LN19@draw_radar

; 773  : 			{
; 774  : 				draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  004ff	b8 04 00 00 00	 mov	 eax, 4
  00504	6b c8 05	 imul	 ecx, eax, 5
  00507	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0050d	52		 push	 edx
  0050e	51		 push	 ecx
  0050f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00514	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00519	51		 push	 ecx
  0051a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0051f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00524	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00527	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  0052e	51		 push	 ecx
  0052f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN19@draw_radar:

; 775  : 			}
; 776  : 
; 777  : 			draw_2d_mono_sprite (small_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  00534	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00537	50		 push	 eax
  00538	51		 push	 ecx
  00539	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0053e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00543	51		 push	 ecx
  00544	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00549	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054e	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00551	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00558	52		 push	 edx
  00559	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN17@draw_radar:

; 778  : 		}
; 779  : 
; 780  : 		if (selected_target)

  0055e	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00562	74 53		 je	 SHORT $LN20@draw_radar

; 781  : 		{
; 782  : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  00564	b8 04 00 00 00	 mov	 eax, 4
  00569	6b c8 05	 imul	 ecx, eax, 5
  0056c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00572	52		 push	 edx
  00573	51		 push	 ecx
  00574	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  0058e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 783  : 
; 784  : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  00593	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00596	50		 push	 eax
  00597	51		 push	 ecx
  00598	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0059d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a2	51		 push	 ecx
  005a3	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ad	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target@@3QBDB ; small_display_target_symbol_selected_target
  005b2	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN20@draw_radar:

; 785  : 		}
; 786  : 	}
; 787  : }

  005b7	5f		 pop	 edi
  005b8	5e		 pop	 esi
  005b9	5b		 pop	 ebx
  005ba	8b e5		 mov	 esp, ebp
  005bc	5d		 pop	 ebp
  005bd	c2 10 00	 ret	 16			; 00000010H
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MH@Z ENDP ; draw_radar_target_symbol
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv90 = -108						; size = 4
_index$1 = -40						; size = 4
_index$2 = -36						; size = 4
_y2$ = -32						; size = 4
_x2$ = -28						; size = 4
_y1$ = -24						; size = 4
_x1$ = -20						; size = 4
_cos_theta$ = -16					; size = 4
_sin_theta$ = -12					; size = 4
_theta$ = -8						; size = 4
_num_segments$ = -4					; size = 4
_arc_size$ = 8						; size = 4
_radius$ = 12						; size = 4
_colour$ = 16						; size = 4
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z PROC		; draw_radar_arc, COMDAT

; 647  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 648  : 	int
; 649  : 		num_segments;
; 650  : 
; 651  : 	float
; 652  : 		theta,
; 653  : 		sin_theta,
; 654  : 		cos_theta,
; 655  : 		x1,
; 656  : 		y1,
; 657  : 		x2,
; 658  : 		y2;
; 659  : 
; 660  : 	num_segments = (int) (arc_size * (1.0 / HAVOC_RADAR_SCAN_ARC_SEGMENT_SIZE));

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0000e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4026eb1686b280e6
  00016	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0001a	89 45 fc	 mov	 DWORD PTR _num_segments$[ebp], eax

; 661  : 
; 662  : 	if (num_segments > 0)

  0001d	83 7d fc 00	 cmp	 DWORD PTR _num_segments$[ebp], 0
  00021	0f 8e 9f 01 00
	00		 jle	 $LN3@draw_radar

; 663  : 	{
; 664  : 		theta = arc_size * 0.5;

  00027	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0002c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 665  : 
; 666  : 		sine_cosine (theta, &sin_theta, &cos_theta);

  0003d	8d 45 dc	 lea	 eax, DWORD PTR _index$2[ebp]
  00040	50		 push	 eax
  00041	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  00046	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  0004e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00052	51		 push	 ecx
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0005d	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00060	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00065	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00068	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0006b	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00074	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  00079	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0007c	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00081	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00084	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00087	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0008c	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  0008f	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00092	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 667  : 
; 668  : 		x1 = -radius * sin_theta;

  000a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ac	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  000b1	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 669  : 		y1 = radius * cos_theta;

  000b6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000bb	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  000c0	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0
$LN2@draw_radar:

; 670  : 
; 671  : 		while (num_segments--)

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _num_segments$[ebp]
  000c8	89 45 94	 mov	 DWORD PTR tv90[ebp], eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _num_segments$[ebp]
  000ce	83 e9 01	 sub	 ecx, 1
  000d1	89 4d fc	 mov	 DWORD PTR _num_segments$[ebp], ecx
  000d4	83 7d 94 00	 cmp	 DWORD PTR tv90[ebp], 0
  000d8	0f 84 e8 00 00
	00		 je	 $LN3@draw_radar

; 672  : 		{
; 673  : 			theta -= HAVOC_RADAR_SCAN_ARC_SEGMENT_SIZE;

  000de	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  000e3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3db2b8c2
  000eb	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 674  : 
; 675  : 			sine_cosine (theta, &sin_theta, &cos_theta);

  000f0	8d 45 d8	 lea	 eax, DWORD PTR _index$1[ebp]
  000f3	50		 push	 eax
  000f4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  000f9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  00101	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00105	51		 push	 ecx
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00110	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00113	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00118	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  0011b	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0011e	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00127	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  0012c	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0012f	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00134	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00137	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0013a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0013f	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00142	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00145	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0014e	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 676  : 
; 677  : 			x2 = -radius * sin_theta;

  00153	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00158	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0015f	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  00164	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 678  : 			y2 = radius * cos_theta;

  00169	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  0016e	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  00173	f3 0f 11 45 e0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 679  : 
; 680  : 			draw_2d_line (x1, y1, x2, y2, colour);

  00178	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  0017b	50		 push	 eax
  0017c	51		 push	 ecx
  0017d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00182	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00187	51		 push	 ecx
  00188	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	51		 push	 ecx
  0019e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 681  : 
; 682  : 			x1 = x2;

  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001b2	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 683  : 			y1 = y2;

  001b7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001bc	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0

; 684  : 		}

  001c1	e9 ff fe ff ff	 jmp	 $LN2@draw_radar
$LN3@draw_radar:

; 685  : 	}
; 686  : }

  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c2 0c 00	 ret	 12			; 0000000cH
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ENDP		; draw_radar_arc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z
_TEXT	SEGMENT
tv212 = -284						; size = 4
tv193 = -284						; size = 4
tv147 = -284						; size = 4
tv205 = -280						; size = 4
tv185 = -280						; size = 4
tv140 = -280						; size = 4
_width$ = -212						; size = 4
_y_adjust$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_target$ = 8						; size = 4
_target_range$ = 12					; size = 4
_radar$ = 16						; size = 4
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z PROC ; display_radar_target_details, COMDAT

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 490  : 	const char
; 491  : 		*s;
; 492  : 	char
; 493  : 		buffer[200];
; 494  : 
; 495  : 	float
; 496  : 		y_adjust,
; 497  : 		width;
; 498  : 
; 499  : 	ASSERT (radar);

  0000c	83 7d 10 00	 cmp	 DWORD PTR _radar$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@display_ra
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  00017	83 c0 0a	 add	 eax, 10			; 0000000aH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05EMNNHGFM@radar@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@display_ra:

; 500  : 
; 501  : 	if (draw_large_mfd)

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00031	74 12		 je	 SHORT $LN3@display_ra

; 502  : 	{
; 503  : 		y_adjust = -8.0;

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0003b	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 504  : 	}
; 505  : 	else

  00043	eb 10		 jmp	 SHORT $LN4@display_ra
$LN3@display_ra:

; 506  : 	{
; 507  : 		y_adjust = -4.0;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0004d	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN4@display_ra:

; 508  : 	}
; 509  : 
; 510  : 	//
; 511  : 	// name
; 512  : 	//
; 513  : 
; 514  : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  0005a	50		 push	 eax
  0005b	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00061	51		 push	 ecx
  00062	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  0006b	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 515  : 
; 516  : 	if (s)

  0006e	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00072	74 4b		 je	 SHORT $LN5@display_ra

; 517  : 	{
; 518  : 		set_2d_mono_font_position (-1.0, -1.0);

  00074	51		 push	 ecx
  00075	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0007d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00082	51		 push	 ecx
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 519  : 
; 520  : 		set_mono_font_rel_position (1.0, y_adjust);

  00095	51		 push	 ecx
  00096	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	51		 push	 ecx
  000a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 521  : 
; 522  : 		print_mono_font_string (s);

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN5@display_ra:

; 523  : 	}
; 524  : 
; 525  : 	if (target)

  000bf	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  000c3	0f 84 e9 01 00
	00		 je	 $LN9@display_ra

; 526  : 	{
; 527  : 		//
; 528  : 		// range
; 529  : 		//
; 530  : 
; 531  : 		if ((target_range < 1000.0) && (!havoc_damage.laser_range_finder))

  000c9	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  000ce	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  000d6	66 0f 2f c8	 comisd	 xmm1, xmm0
  000da	76 29		 jbe	 SHORT $LN7@display_ra
  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  000e1	c1 e8 04	 shr	 eax, 4
  000e4	83 e0 01	 and	 eax, 1
  000e7	75 1c		 jne	 SHORT $LN7@display_ra

; 532  : 		{
; 533  : 			sprintf (buffer, "%dm", (int) target_range);

  000e9	f3 0f 2c 45 0c	 cvttss2si eax, DWORD PTR _target_range$[ebp]
  000ee	50		 push	 eax
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  000f4	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000fa	51		 push	 ecx
  000fb	e8 00 00 00 00	 call	 _sprintf
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH

; 534  : 		}
; 535  : 		else

  00103	eb 29		 jmp	 SHORT $LN8@display_ra
$LN7@display_ra:

; 536  : 		{
; 537  : 			sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  00105	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  0010a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00112	83 ec 08	 sub	 esp, 8
  00115	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  0011f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 _sprintf
  0012b	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@display_ra:

; 538  : 		}
; 539  : 
; 540  : 		width = get_mono_font_string_width (buffer);

  0012e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0013a	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 541  : 
; 542  : 		set_2d_mono_font_position (1.0, -1.0);

  00140	51		 push	 ecx
  00141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	51		 push	 ecx
  0014f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 543  : 
; 544  : 		set_mono_font_rel_position (-width, y_adjust);

  00161	51		 push	 ecx
  00162	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0016a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016f	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00177	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0017e	51		 push	 ecx
  0017f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00184	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 545  : 
; 546  : 		print_mono_font_string (buffer);

  00189	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 547  : 
; 548  : 		//
; 549  : 		// no line of sight
; 550  : 		//
; 551  : 
; 552  : 		if (!get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  00195	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00199	74 0d		 je	 SHORT $LN22@display_ra
  0019b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0019e	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a0	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv140[ebp], ecx
  001a6	eb 20		 jmp	 SHORT $LN23@display_ra
$LN22@display_ra:
  001a8	68 28 02 00 00	 push	 552			; 00000228H
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001b8	52		 push	 edx
  001b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001be	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
$LN23@display_ra:
  001c8	b8 01 00 00 00	 mov	 eax, 1
  001cd	85 c0		 test	 eax, eax
  001cf	74 0c		 je	 SHORT $LN24@display_ra
  001d1	c7 85 e4 fe ff
	ff 50 00 00 00	 mov	 DWORD PTR tv147[ebp], 80 ; 00000050H
  001db	eb 20		 jmp	 SHORT $LN25@display_ra
$LN24@display_ra:
  001dd	68 28 02 00 00	 push	 552			; 00000228H
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001ed	51		 push	 ecx
  001ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f3	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv147[ebp], 0
$LN25@display_ra:
  001fd	6a 50		 push	 80			; 00000050H
  001ff	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00202	52		 push	 edx
  00203	69 85 e8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv140[ebp], 1116
  0020d	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv147[ebp]
  00213	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0021a	ff d2		 call	 edx
  0021c	85 c0		 test	 eax, eax
  0021e	0f 85 8e 00 00
	00		 jne	 $LN9@display_ra

; 553  : 		{
; 554  : 			if (draw_large_mfd)

  00224	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0022b	74 12		 je	 SHORT $LN10@display_ra

; 555  : 			{
; 556  : 				y_adjust = -21.0;

  0022d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1a80000
  00235	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 557  : 			}
; 558  : 			else

  0023d	eb 10		 jmp	 SHORT $LN11@display_ra
$LN10@display_ra:

; 559  : 			{
; 560  : 				y_adjust = -11.0;

  0023f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1300000
  00247	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN11@display_ra:

; 561  : 			}
; 562  : 
; 563  : 			width = get_mono_font_string_width ("NO LOS");

  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  00254	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00259	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 564  : 
; 565  : 			set_2d_mono_font_position (1.0, -1.0);

  0025f	51		 push	 ecx
  00260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00268	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026d	51		 push	 ecx
  0026e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00276	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 566  : 
; 567  : 			set_mono_font_rel_position (-width, y_adjust);

  00280	51		 push	 ecx
  00281	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00289	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028e	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00296	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0029d	51		 push	 ecx
  0029e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 568  : 
; 569  : 			print_mono_font_string ("NO LOS");

  002a8	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  002ad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN9@display_ra:

; 570  : 		}
; 571  : 	}
; 572  : 
; 573  : 	//
; 574  : 	// auto
; 575  : 	//
; 576  : 
; 577  : 	if (radar->auto_target)

  002b2	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  002b5	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  002b9	74 77		 je	 SHORT $LN12@display_ra

; 578  : 	{
; 579  : 		if (draw_large_mfd)

  002bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002c2	74 12		 je	 SHORT $LN13@display_ra

; 580  : 		{
; 581  : 			y_adjust = 14.0;

  002c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41600000
  002cc	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 582  : 		}
; 583  : 		else

  002d4	eb 10		 jmp	 SHORT $LN14@display_ra
$LN13@display_ra:

; 584  : 		{
; 585  : 			y_adjust = 8.0;

  002d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  002de	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN14@display_ra:

; 586  : 		}
; 587  : 
; 588  : 		set_2d_mono_font_position (-1.0, 1.0);

  002e6	51		 push	 ecx
  002e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f4	51		 push	 ecx
  002f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00302	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 589  : 
; 590  : 		set_mono_font_rel_position (1.0, y_adjust);

  00307	51		 push	 ecx
  00308	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00315	51		 push	 ecx
  00316	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0031e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00323	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 591  : 
; 592  : 		print_mono_font_string ("AUTO");

  00328	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  0032d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN12@display_ra:

; 593  : 	}
; 594  : 
; 595  : 	//
; 596  : 	// locked
; 597  : 	//
; 598  : 
; 599  : 	if (radar->target_locked)

  00332	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  00335	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00339	74 77		 je	 SHORT $LN15@display_ra

; 600  : 	{
; 601  : 		if (draw_large_mfd)

  0033b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00342	74 12		 je	 SHORT $LN16@display_ra

; 602  : 		{
; 603  : 			y_adjust = -21.0;

  00344	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1a80000
  0034c	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 604  : 		}
; 605  : 		else

  00354	eb 10		 jmp	 SHORT $LN17@display_ra
$LN16@display_ra:

; 606  : 		{
; 607  : 			y_adjust = -11.0;

  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1300000
  0035e	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN17@display_ra:

; 608  : 		}
; 609  : 
; 610  : 		set_2d_mono_font_position (-1.0, -1.0);

  00366	51		 push	 ecx
  00367	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0036f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00374	51		 push	 ecx
  00375	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0037d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00382	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 611  : 
; 612  : 		set_mono_font_rel_position (1.0, y_adjust);

  00387	51		 push	 ecx
  00388	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00390	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00395	51		 push	 ecx
  00396	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0039e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 613  : 
; 614  : 		print_mono_font_string ("LOCKED");

  003a8	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  003ad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN15@display_ra:

; 615  : 	}
; 616  : // Jabberwock 031107 Designated targets
; 617  : 
; 618  : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  003b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  003b9	74 0f		 je	 SHORT $LN26@display_ra
  003bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c2	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv185[ebp], ecx
  003c8	eb 27		 jmp	 SHORT $LN27@display_ra
$LN26@display_ra:
  003ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  003d0	81 c2 81 00 00
	00		 add	 edx, 129		; 00000081H
  003d6	52		 push	 edx
  003d7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  003dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e7	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv185[ebp], 0
$LN27@display_ra:
  003f1	b9 01 00 00 00	 mov	 ecx, 1
  003f6	85 c9		 test	 ecx, ecx
  003f8	74 0c		 je	 SHORT $LN28@display_ra
  003fa	c7 85 e4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv193[ebp], 38 ; 00000026H
  00404	eb 27		 jmp	 SHORT $LN29@display_ra
$LN28@display_ra:
  00406	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  0040c	81 c2 81 00 00
	00		 add	 edx, 129		; 00000081H
  00412	52		 push	 edx
  00413	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0041d	50		 push	 eax
  0041e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00423	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv193[ebp], 0
$LN29@display_ra:
  0042d	6a 26		 push	 38			; 00000026H
  0042f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00435	51		 push	 ecx
  00436	69 95 e8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv185[ebp], 180
  00440	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv193[ebp]
  00446	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0044d	ff d1		 call	 ecx
  0044f	89 45 08	 mov	 DWORD PTR _target$[ebp], eax

; 619  : 
; 620  : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  00452	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00456	0f 84 2d 01 00
	00		 je	 $LN18@display_ra
  0045c	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00460	74 0d		 je	 SHORT $LN30@display_ra
  00462	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00465	8b 08		 mov	 ecx, DWORD PTR [eax]
  00467	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv205[ebp], ecx
  0046d	eb 20		 jmp	 SHORT $LN31@display_ra
$LN30@display_ra:
  0046f	68 6c 02 00 00	 push	 620			; 0000026cH
  00474	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00479	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0047f	52		 push	 edx
  00480	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00485	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv205[ebp], 0
$LN31@display_ra:
  0048f	b8 01 00 00 00	 mov	 eax, 1
  00494	85 c0		 test	 eax, eax
  00496	74 0c		 je	 SHORT $LN32@display_ra
  00498	c7 85 e4 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv212[ebp], 10 ; 0000000aH
  004a2	eb 20		 jmp	 SHORT $LN33@display_ra
$LN32@display_ra:
  004a4	68 6c 02 00 00	 push	 620			; 0000026cH
  004a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  004b4	51		 push	 ecx
  004b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004ba	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv212[ebp], 0
$LN33@display_ra:
  004c4	6a 0a		 push	 10			; 0000000aH
  004c6	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  004c9	52		 push	 edx
  004ca	69 85 e8 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv205[ebp], 180
  004d4	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv212[ebp]
  004da	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  004e1	ff d2		 call	 edx
  004e3	85 c0		 test	 eax, eax
  004e5	0f 84 9e 00 00
	00		 je	 $LN18@display_ra

; 621  : 	{
; 622  : 		if (draw_large_mfd)

  004eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004f2	74 12		 je	 SHORT $LN19@display_ra

; 623  : 		{
; 624  : 			y_adjust = -25.0;

  004f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  004fc	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 625  : 		}
; 626  : 		else

  00504	eb 10		 jmp	 SHORT $LN20@display_ra
$LN19@display_ra:

; 627  : 		{
; 628  : 			y_adjust = -12.0;

  00506	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0050e	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN20@display_ra:

; 629  : 		}
; 630  : 
; 631  : 		width = get_mono_font_string_width ("MARKED");

  00516	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  0051b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00520	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 632  : 
; 633  : 		set_2d_mono_font_position (1.0, -1.0);

  00526	51		 push	 ecx
  00527	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0052f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00534	51		 push	 ecx
  00535	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0053d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00542	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 634  : 
; 635  : 		set_mono_font_rel_position (-width -1.0, y_adjust);

  00547	51		 push	 ecx
  00548	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00550	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00555	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0055d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00564	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00568	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00570	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00574	51		 push	 ecx
  00575	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 636  : 
; 637  : 		print_mono_font_string ("MARKED");		

  0057f	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00584	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN18@display_ra:

; 638  : 	}
; 639  : // Jabberwock 031107 ends
; 640  : }

  00589	5f		 pop	 edi
  0058a	5e		 pop	 esi
  0058b	5b		 pop	 ebx
  0058c	8b e5		 mov	 esp, ebp
  0058e	5d		 pop	 ebp
  0058f	c2 0c 00	 ret	 12			; 0000000cH
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ENDP ; display_radar_target_details
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?display_radar_scan_range@@YGXM@Z
_TEXT	SEGMENT
_width$ = -12						; size = 4
_s$ = -8						; size = 8
_scan_range$ = 8					; size = 4
?display_radar_scan_range@@YGXM@Z PROC			; display_radar_scan_range, COMDAT

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 441  : //VJ 030807 radar range adjustable
; 442  : 	char
; 443  : 		s[8];
; 444  : //		*s;
; 445  : 
; 446  : 	float
; 447  : 		width;
; 448  : 
; 449  : 	if (scan_range == HAVOC_RADAR_SCAN_RANGE_1000)

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0000e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?HAVOC_RADAR_SCAN_RANGE_1000@@3MA
  00015	9f		 lahf
  00016	f6 c4 44	 test	 ah, 68			; 00000044H
  00019	7a 32		 jp	 SHORT $LN2@display_ra

; 450  : 	{
; 451  : //		s = "1Km";
; 452  : 		sprintf(s,"%.0fKm",HAVOC_RADAR_SCAN_RANGE_1000/1000);	

  0001b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?HAVOC_RADAR_SCAN_RANGE_1000@@3MA
  00023	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0002b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0002f	83 ec 08	 sub	 esp, 8
  00032	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  0003c	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _sprintf
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	e9 d7 00 00 00	 jmp	 $LN9@display_ra
$LN2@display_ra:

; 453  : 	}
; 454  : 	else if (scan_range == HAVOC_RADAR_SCAN_RANGE_2000)

  0004d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  00052	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?HAVOC_RADAR_SCAN_RANGE_2000@@3MA
  00059	9f		 lahf
  0005a	f6 c4 44	 test	 ah, 68			; 00000044H
  0005d	7a 32		 jp	 SHORT $LN4@display_ra

; 455  : 	{
; 456  : //		s = "2Km";
; 457  : 		sprintf(s,"%.0fKm",HAVOC_RADAR_SCAN_RANGE_2000/1000);	

  0005f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?HAVOC_RADAR_SCAN_RANGE_2000@@3MA
  00067	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0006f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00073	83 ec 08	 sub	 esp, 8
  00076	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00080	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _sprintf
  00089	83 c4 10	 add	 esp, 16			; 00000010H
  0008c	e9 93 00 00 00	 jmp	 $LN9@display_ra
$LN4@display_ra:

; 458  : 	}
; 459  : 	else if (scan_range == HAVOC_RADAR_SCAN_RANGE_4000)

  00091	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  00096	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?HAVOC_RADAR_SCAN_RANGE_4000@@3MA
  0009d	9f		 lahf
  0009e	f6 c4 44	 test	 ah, 68			; 00000044H
  000a1	7a 2f		 jp	 SHORT $LN6@display_ra

; 460  : 	{
; 461  : //		s = "4Km";
; 462  : 		sprintf(s,"%.0fKm",HAVOC_RADAR_SCAN_RANGE_4000/1000);	

  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?HAVOC_RADAR_SCAN_RANGE_4000@@3MA
  000ab	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  000b3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000b7	83 ec 08	 sub	 esp, 8
  000ba	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  000c4	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _sprintf
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
  000d0	eb 52		 jmp	 SHORT $LN9@display_ra
$LN6@display_ra:

; 463  : 	}
; 464  : 	else if (scan_range == HAVOC_RADAR_SCAN_RANGE_6000)

  000d2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  000d7	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?HAVOC_RADAR_SCAN_RANGE_6000@@3MA
  000de	9f		 lahf
  000df	f6 c4 44	 test	 ah, 68			; 00000044H
  000e2	7a 2f		 jp	 SHORT $LN8@display_ra

; 465  : 	{
; 466  : //		s = "6Km";
; 467  : 		sprintf(s,"%.0fKm",HAVOC_RADAR_SCAN_RANGE_6000/1000);	

  000e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?HAVOC_RADAR_SCAN_RANGE_6000@@3MA
  000ec	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  000f4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000f8	83 ec 08	 sub	 esp, 8
  000fb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00105	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _sprintf
  0010e	83 c4 10	 add	 esp, 16			; 00000010H

; 468  : 	}
; 469  : 	else

  00111	eb 11		 jmp	 SHORT $LN9@display_ra
$LN8@display_ra:

; 470  : 	{
; 471  : //		s = "XXX";
; 472  : 		sprintf(s,"XXX");		

  00113	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  00118	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _sprintf
  00121	83 c4 08	 add	 esp, 8
$LN9@display_ra:

; 473  : 	}
; 474  : 
; 475  : 	width = get_mono_font_string_width (s);

  00124	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0012d	d9 5d f4	 fstp	 DWORD PTR _width$[ebp]

; 476  : 
; 477  : 	set_2d_mono_font_position (1.0, 1.0);

  00130	51		 push	 ecx
  00131	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00139	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013e	51		 push	 ecx
  0013f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 478  : 
; 479  : 	set_mono_font_rel_position (-width, 1.0);

  00151	51		 push	 ecx
  00152	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0015a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _width$[ebp]
  00164	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0016b	51		 push	 ecx
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 480  : 
; 481  : 	print_mono_font_string (s);

  00176	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 482  : }

  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	5b		 pop	 ebx
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c2 04 00	 ret	 4
?display_radar_scan_range@@YGXM@Z ENDP			; display_radar_scan_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_damaged_mfd@@YGXXZ PROC				; draw_damaged_mfd, COMDAT

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 379  : 	int
; 380  : 		count,
; 381  : 		max_lines,
; 382  : 		i;
; 383  : 
; 384  : 	rgb_colour
; 385  : 		col;
; 386  : 
; 387  : 	float
; 388  : 		x_centre,
; 389  : 		x_delta,
; 390  : 		x_left,
; 391  : 		x_right,
; 392  : 		y;
; 393  : 
; 394  : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 395  : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 396  : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 397  : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 398  : 
; 399  : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_damag

; 400  : 	{
; 401  : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 402  : 	}
; 403  : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_damag
$LN5@draw_damag:

; 404  : 	{
; 405  : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_damag:

; 406  : 	}
; 407  : 
; 408  : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_damag
$LN2@draw_damag:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_damag:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 7c 01 00
	00		 jge	 $LN3@draw_damag

; 409  : 	{
; 410  : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 411  : 
; 412  : 		col.r = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f2	 mov	 BYTE PTR _col$[ebp+2], al

; 413  : 		col.g = i + 128;

  000a5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000a8	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000ad	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 414  : 
; 415  : 		x_centre = sfrand1 ();

  000b0	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ba	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000ca	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000cd	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000d3	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000d9	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000dd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e9	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 416  : 
; 417  : 		x_delta = (frand1 () * 0.5) + 0.25;

  000ee	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000f8	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000fd	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00108	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0010b	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00111	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00115	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  0011d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00125	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  0012d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00131	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 418  : 
; 419  : 		x_left = x_centre - x_delta;

  00136	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013b	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00140	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 420  : 
; 421  : 		x_right = x_centre + x_delta;

  00145	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0014a	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  0014f	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 422  : 
; 423  : 		y = sfrand1 ();

  00154	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0015e	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00163	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0016e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00171	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00177	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  0017d	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00181	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00189	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018d	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 424  : 
; 425  : 		draw_2d_line (x_left, y, x_right, y, col);

  00192	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  00195	50		 push	 eax
  00196	51		 push	 ecx
  00197	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	51		 push	 ecx
  001b8	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 426  : 	}

  001c7	e9 6f fe ff ff	 jmp	 $LN2@draw_damag
$LN3@draw_damag:

; 427  : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
?draw_damaged_mfd@@YGXXZ ENDP				; draw_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 349  : 	float
; 350  : 		x,
; 351  : 		y;
; 352  : 
; 353  : 	if (display_mfd_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_mfd_layout_grid@@3HA, 0 ; display_mfd_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 354  : 	{
; 355  : 		for (x = -1.0; x <= 1.0; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 356  : 		{
; 357  : 			draw_2d_line (x, -1.0, x, 1.0, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 358  : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 359  : 
; 360  : 		for (y = -1.0; y <= 1.0; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 361  : 		{
; 362  : 			draw_2d_line (-1.0, y, 1.0, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 363  : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 364  : 	}
; 365  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?get_havoc_eo_display_visible@@YGHXZ
_TEXT	SEGMENT
tv66 = -68						; size = 4
?get_havoc_eo_display_visible@@YGHXZ PROC		; get_havoc_eo_display_visible, COMDAT

; 3681 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3682 : 	return

  00009	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 4
  00010	74 12		 je	 SHORT $LN3@get_havoc_
  00012	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 7
  00019	74 09		 je	 SHORT $LN3@get_havoc_
  0001b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00022	eb 07		 jmp	 SHORT $LN4@get_havoc_
$LN3@get_havoc_:
  00024	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN4@get_havoc_:
  0002b	8b 45 bc	 mov	 eax, DWORD PTR tv66[ebp]

; 3683 : 	(
; 3684 : 		(mfd_mode == MFD_MODE_FLIR) ||
; 3685 : 		(mfd_mode == MFD_MODE_LLLTV)
; 3686 : 	);
; 3687 : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?get_havoc_eo_display_visible@@YGHXZ ENDP		; get_havoc_eo_display_visible
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_overlaid_havoc_mfd@@YGXMMM@Z
_TEXT	SEGMENT
tv175 = -372						; size = 4
_specular$1 = -304					; size = 4
_colour$2 = -300					; size = 4
_quad$3 = -296						; size = 256
_scaley$4 = -40						; size = 4
_scalex$5 = -36						; size = 4
_mfd_screen_y_max$ = -32				; size = 4
_mfd_screen_x_max$ = -28				; size = 4
_mfd_screen_y_min$ = -24				; size = 4
_mfd_screen_x_min$ = -20				; size = 4
_mfd_screen_y_org$ = -16				; size = 4
_mfd_screen_x_org$ = -12				; size = 4
_mfd_screen_half_size$ = -8				; size = 4
_mfd_screen_size$ = -4					; size = 4
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
_size$ = 16						; size = 4
?draw_overlaid_havoc_mfd@@YGXMMM@Z PROC			; draw_overlaid_havoc_mfd, COMDAT

; 3274 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3275 : 	float
; 3276 : 		mfd_screen_size,
; 3277 : 		mfd_screen_half_size,
; 3278 : 		mfd_screen_x_org,
; 3279 : 		mfd_screen_y_org,
; 3280 : 		mfd_screen_x_min,
; 3281 : 		mfd_screen_y_min,
; 3282 : 		mfd_screen_x_max,
; 3283 : 		mfd_screen_y_max;
; 3284 : 
; 3285 : 	if (havoc_damage.tv_display)

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00011	c1 e8 12	 shr	 eax, 18			; 00000012H
  00014	83 e0 01	 and	 eax, 1
  00017	74 15		 je	 SHORT $LN4@draw_overl

; 3286 : 	{
; 3287 : 		if (mfd_mode != MFD_MODE_OFF)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 0
  00020	74 0a		 je	 SHORT $LN6@draw_overl

; 3288 : 		{
; 3289 : 			mfd_mode = MFD_MODE_DAMAGED;

  00022	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 1
$LN6@draw_overl:

; 3290 : 		}
; 3291 : 	}
; 3292 : 	else

  0002c	eb 13		 jmp	 SHORT $LN7@draw_overl
$LN4@draw_overl:

; 3293 : 	{
; 3294 : 		if (mfd_mode == MFD_MODE_DAMAGED)

  0002e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 1
  00035	75 0a		 jne	 SHORT $LN7@draw_overl

; 3295 : 		{
; 3296 : 			mfd_mode = MFD_MODE_OFF;

  00037	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 0
$LN7@draw_overl:

; 3297 : 		}
; 3298 : 	}
; 3299 : 
; 3300 : 	if (mfd_mode == MFD_MODE_OFF)

  00041	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 0
  00048	75 05		 jne	 SHORT $LN8@draw_overl

; 3301 : 	{
; 3302 : 		return;

  0004a	e9 77 0b 00 00	 jmp	 $LN1@draw_overl
$LN8@draw_overl:

; 3303 : 	}
; 3304 : 
; 3305 : 	////////////////////////////////////////
; 3306 : 	//
; 3307 : 	// scale position and size wrt screen resolution
; 3308 : 	//
; 3309 : 	////////////////////////////////////////
; 3310 : 
; 3311 : /*	if (get_global_unscaled_displays ())
; 3312 : 	{
; 3313 : 		float
; 3314 : 			org_offset;
; 3315 : 
; 3316 : 		mfd_screen_size = size;
; 3317 : 
; 3318 : 		mfd_screen_half_size = mfd_screen_size * 0.5;
; 3319 : 
; 3320 : 		mfd_screen_x_org = x_org * full_screen_width * (1.0 / 640.0);
; 3321 : 		mfd_screen_y_org = y_org * full_screen_height * (1.0 / 480.0);
; 3322 : 
; 3323 : 		org_offset = ((size * full_screen_width * (1.0 / 640.0)) - size) * 0.5;
; 3324 : 
; 3325 : 		mfd_screen_x_org -= org_offset;
; 3326 : 		mfd_screen_y_org += org_offset;
; 3327 : 
; 3328 : 		mfd_screen_x_min = mfd_screen_x_org - mfd_screen_half_size;
; 3329 : 		mfd_screen_y_min = mfd_screen_y_org - mfd_screen_half_size;
; 3330 : 		mfd_screen_x_max = mfd_screen_x_org + mfd_screen_half_size - 0.001;
; 3331 : 		mfd_screen_y_max = mfd_screen_y_org + mfd_screen_half_size - 0.001;
; 3332 : 	}
; 3333 : 	else */
; 3334 : 	{
; 3335 : 		float
; 3336 : 			scalex,
; 3337 : 			scaley;
; 3338 : 
; 3339 : 		scalex = full_screen_width * (1.0 / 640.0);

  0004f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00057	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5999999999999a
  0005f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00063	f3 0f 11 45 dc	 movss	 DWORD PTR _scalex$5[ebp], xmm0

; 3340 : 		scaley = full_screen_height * (1.0 / 480.0);

  00068	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00070	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f61111111111111
  00078	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007c	f3 0f 11 45 d8	 movss	 DWORD PTR _scaley$4[ebp], xmm0

; 3341 : 
; 3342 : 		mfd_screen_size = size * global_mfd_size * scalex;

  00081	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  00086	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?global_mfd_size@@3MA
  0008e	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _scalex$5[ebp]
  00093	f3 0f 11 45 fc	 movss	 DWORD PTR _mfd_screen_size$[ebp], xmm0

; 3343 : 		mfd_screen_half_size = mfd_screen_size * 0.5;

  00098	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _mfd_screen_size$[ebp]
  0009d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000a5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a9	f3 0f 11 45 f8	 movss	 DWORD PTR _mfd_screen_half_size$[ebp], xmm0

; 3344 : 
; 3345 : 		mfd_screen_x_org = x_org * scalex;

  000ae	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  000b3	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _scalex$5[ebp]
  000b8	f3 0f 11 45 f4	 movss	 DWORD PTR _mfd_screen_x_org$[ebp], xmm0

; 3346 : 		mfd_screen_y_org = y_org * scaley;

  000bd	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  000c2	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _scaley$4[ebp]
  000c7	f3 0f 11 45 f0	 movss	 DWORD PTR _mfd_screen_y_org$[ebp], xmm0

; 3347 : 
; 3348 : 		mfd_screen_x_org -= size * scalex * 0.5 - mfd_screen_half_size;

  000cc	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  000d1	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _scalex$5[ebp]
  000d6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000da	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000e2	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _mfd_screen_half_size$[ebp]
  000e7	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000eb	f3 0f 5a 4d f4	 cvtss2sd xmm1, DWORD PTR _mfd_screen_x_org$[ebp]
  000f0	f2 0f 5c c8	 subsd	 xmm1, xmm0
  000f4	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000f8	f3 0f 11 45 f4	 movss	 DWORD PTR _mfd_screen_x_org$[ebp], xmm0

; 3349 : 		mfd_screen_y_org += size * scaley * 0.5 - mfd_screen_half_size;

  000fd	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  00102	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _scaley$4[ebp]
  00107	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0010b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00113	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _mfd_screen_half_size$[ebp]
  00118	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0011c	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _mfd_screen_y_org$[ebp]
  00121	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00125	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00129	f3 0f 11 45 f0	 movss	 DWORD PTR _mfd_screen_y_org$[ebp], xmm0

; 3350 : 
; 3351 : 		mfd_screen_x_min = mfd_screen_x_org - mfd_screen_half_size;

  0012e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  00133	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  00138	f3 0f 11 45 ec	 movss	 DWORD PTR _mfd_screen_x_min$[ebp], xmm0

; 3352 : 		mfd_screen_y_min = mfd_screen_y_org - mfd_screen_half_size;

  0013d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_y_org$[ebp]
  00142	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  00147	f3 0f 11 45 e8	 movss	 DWORD PTR _mfd_screen_y_min$[ebp], xmm0

; 3353 : 		mfd_screen_x_max = mfd_screen_x_org + mfd_screen_half_size - 0.001;

  0014c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  00151	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  00156	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0015a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00162	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00166	f3 0f 11 45 e4	 movss	 DWORD PTR _mfd_screen_x_max$[ebp], xmm0

; 3354 : 		mfd_screen_y_max = mfd_screen_y_org + mfd_screen_half_size - 0.001;

  0016b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_y_org$[ebp]
  00170	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  00175	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00179	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00181	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00185	f3 0f 11 45 e0	 movss	 DWORD PTR _mfd_screen_y_max$[ebp], xmm0

; 3355 : 	}
; 3356 : 
; 3357 : 	////////////////////////////////////////
; 3358 : 	//
; 3359 : 	// set up MFD 2D environment
; 3360 : 	//
; 3361 : 	////////////////////////////////////////
; 3362 : 
; 3363 : 	set_2d_active_environment (mfd_env);

  0018a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 3364 : 
; 3365 : 	//
; 3366 : 	// window
; 3367 : 	//
; 3368 : 
; 3369 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00195	51		 push	 ecx
  00196	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0019e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a3	51		 push	 ecx
  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	51		 push	 ecx
  001b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bf	51		 push	 ecx
  001c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 3370 : 
; 3371 : 	//
; 3372 : 	// viewport
; 3373 : 	//
; 3374 : 
; 3375 : 	mfd_viewport_x_org = mfd_viewport_texture_x_org;

  001d8	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_x_org@@3HA
  001e0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 3376 : 
; 3377 : 	mfd_viewport_y_org = mfd_viewport_texture_y_org;

  001e8	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_y_org@@3HA
  001f0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 3378 : 
; 3379 : 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  001f8	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00200	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00208	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00210	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00214	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00218	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 3380 : 
; 3381 : 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  00220	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00228	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00230	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00238	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0023c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00240	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 3382 : 
; 3383 : 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  00248	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00250	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00258	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00260	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00264	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0026c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00270	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 3384 : 
; 3385 : 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  00278	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00280	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00288	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00290	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00294	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0029c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 3386 : 	
; 3387 : 	//
; 3388 : 	// translate & scale values (EO 3D display does not match texture)
; 3389 : 	//
; 3390 : 
; 3391 : 	i_translate_3d = mfd_screen_x_min;

  002a8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  002ad	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?i_translate_3d@@3MA, xmm0

; 3392 : 	j_translate_3d = mfd_screen_y_min;

  002b5	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  002ba	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?j_translate_3d@@3MA, xmm0

; 3393 : 
; 3394 : 	i_scale_3d = mfd_texture_size / mfd_screen_size;

  002c2	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  002ca	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  002cf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?i_scale_3d@@3MA, xmm0

; 3395 : 	j_scale_3d = mfd_texture_size / mfd_screen_size;

  002d7	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  002df	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  002e4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?j_scale_3d@@3MA, xmm0

; 3396 : 
; 3397 : 	////////////////////////////////////////
; 3398 : 	//
; 3399 : 	// draw MFD display
; 3400 : 	//
; 3401 : 	////////////////////////////////////////
; 3402 : 
; 3403 : 	switch (mfd_mode)

  002ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A
  002f1	89 85 8c fe ff
	ff		 mov	 DWORD PTR tv175[ebp], eax
  002f7	83 bd 8c fe ff
	ff 07		 cmp	 DWORD PTR tv175[ebp], 7
  002fe	0f 87 63 05 00
	00		 ja	 $LN2@draw_overl
  00304	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR tv175[ebp]
  0030a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN27@draw_overl[ecx*4]
$LN9@draw_overl:

; 3404 : 	{
; 3405 : 		////////////////////////////////////////
; 3406 : 		case MFD_MODE_OFF:
; 3407 : 		////////////////////////////////////////
; 3408 : 		{
; 3409 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00311	51		 push	 ecx
  00312	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0031a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031f	51		 push	 ecx
  00320	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032d	51		 push	 ecx
  0032e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	51		 push	 ecx
  0033c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00344	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00349	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0034e	50		 push	 eax
  0034f	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3410 : 
; 3411 : 			set_active_screen (overlaid_mfd_texture_screen);

  00354	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00359	50		 push	 eax
  0035a	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3412 : 
; 3413 : 			if (lock_screen (overlaid_mfd_texture_screen))

  0035f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00364	50		 push	 eax
  00365	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0036a	85 c0		 test	 eax, eax
  0036c	74 3e		 je	 SHORT $LN10@draw_overl

; 3414 : 			{
; 3415 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  0036e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00373	50		 push	 eax
  00374	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0037a	83 e9 01	 sub	 ecx, 1
  0037d	51		 push	 ecx
  0037e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00384	83 ea 01	 sub	 edx, 1
  00387	52		 push	 edx
  00388	6a 00		 push	 0
  0038a	6a 00		 push	 0
  0038c	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3416 : 
; 3417 : 				draw_layout_grid ();

  00391	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3418 : 
; 3419 : 				flush_screen_texture_graphics (overlaid_mfd_texture_screen);

  00396	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0039b	50		 push	 eax
  0039c	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3420 : 
; 3421 : 				unlock_screen (overlaid_mfd_texture_screen);

  003a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  003a6	50		 push	 eax
  003a7	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN10@draw_overl:

; 3422 : 			}
; 3423 : 
; 3424 : 			break;

  003ac	e9 b6 04 00 00	 jmp	 $LN2@draw_overl
$LN11@draw_overl:

; 3425 : 		}
; 3426 : 		////////////////////////////////////////
; 3427 : 		case MFD_MODE_DAMAGED:
; 3428 : 		////////////////////////////////////////
; 3429 : 		{
; 3430 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  003b1	51		 push	 ecx
  003b2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  003b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bc	51		 push	 ecx
  003bd	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  003c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c7	51		 push	 ecx
  003c8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  003cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d2	51		 push	 ecx
  003d3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  003d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dd	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 3431 : 
; 3432 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  003e2	51		 push	 ecx
  003e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  003eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f0	51		 push	 ecx
  003f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fe	51		 push	 ecx
  003ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040c	51		 push	 ecx
  0040d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00415	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0041f	50		 push	 eax
  00420	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3433 : 
; 3434 : 			set_active_screen (overlaid_mfd_texture_screen);

  00425	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3435 : 
; 3436 : 			if (lock_screen (overlaid_mfd_texture_screen))

  00430	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00435	50		 push	 eax
  00436	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0043b	85 c0		 test	 eax, eax
  0043d	74 43		 je	 SHORT $LN12@draw_overl

; 3437 : 			{
; 3438 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  0043f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00444	50		 push	 eax
  00445	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0044b	83 e9 01	 sub	 ecx, 1
  0044e	51		 push	 ecx
  0044f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00455	83 ea 01	 sub	 edx, 1
  00458	52		 push	 edx
  00459	6a 00		 push	 0
  0045b	6a 00		 push	 0
  0045d	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3439 : 
; 3440 : 				draw_layout_grid ();

  00462	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3441 : 
; 3442 : 				draw_damaged_mfd ();

  00467	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 3443 : 
; 3444 : 				flush_screen_texture_graphics (overlaid_mfd_texture_screen);

  0046c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00471	50		 push	 eax
  00472	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3445 : 
; 3446 : 				unlock_screen (overlaid_mfd_texture_screen);

  00477	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0047c	50		 push	 eax
  0047d	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN12@draw_overl:

; 3447 : 			}
; 3448 : 
; 3449 : 			break;

  00482	e9 e0 03 00 00	 jmp	 $LN2@draw_overl
$LN13@draw_overl:

; 3450 : 		}
; 3451 : 		////////////////////////////////////////
; 3452 : 		case MFD_MODE_GROUND_RADAR:
; 3453 : 		////////////////////////////////////////
; 3454 : 		{
; 3455 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00487	51		 push	 ecx
  00488	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  0048d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00492	51		 push	 ecx
  00493	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00498	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049d	51		 push	 ecx
  0049e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  004a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a8	51		 push	 ecx
  004a9	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  004ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b3	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 3456 : 
; 3457 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  004b8	51		 push	 ecx
  004b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  004c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c6	51		 push	 ecx
  004c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  004cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d4	51		 push	 ecx
  004d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  004dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e2	51		 push	 ecx
  004e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  004eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  004f5	50		 push	 eax
  004f6	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3458 : 
; 3459 : 			set_active_screen (overlaid_mfd_texture_screen);

  004fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00500	50		 push	 eax
  00501	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3460 : 
; 3461 : 			if (lock_screen (overlaid_mfd_texture_screen))

  00506	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0050b	50		 push	 eax
  0050c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00511	85 c0		 test	 eax, eax
  00513	74 43		 je	 SHORT $LN14@draw_overl

; 3462 : 			{
; 3463 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00515	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0051a	50		 push	 eax
  0051b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00521	83 e9 01	 sub	 ecx, 1
  00524	51		 push	 ecx
  00525	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0052b	83 ea 01	 sub	 edx, 1
  0052e	52		 push	 edx
  0052f	6a 00		 push	 0
  00531	6a 00		 push	 0
  00533	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3464 : 
; 3465 : 				draw_layout_grid ();

  00538	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3466 : 
; 3467 : 			 	draw_ground_radar_mfd ();

  0053d	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 3468 : 
; 3469 : 				flush_screen_texture_graphics (overlaid_mfd_texture_screen);

  00542	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00547	50		 push	 eax
  00548	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3470 : 
; 3471 : 				unlock_screen (overlaid_mfd_texture_screen);

  0054d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00552	50		 push	 eax
  00553	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN14@draw_overl:

; 3472 : 			}
; 3473 : 
; 3474 : 			break;

  00558	e9 0a 03 00 00	 jmp	 $LN2@draw_overl
$LN15@draw_overl:

; 3475 : 		}
; 3476 : 		////////////////////////////////////////
; 3477 : 		case MFD_MODE_AIR_RADAR:
; 3478 : 		////////////////////////////////////////
; 3479 : 		{
; 3480 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0055d	51		 push	 ecx
  0055e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00563	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00568	51		 push	 ecx
  00569	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  0056e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00573	51		 push	 ecx
  00574	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 3481 : 
; 3482 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0058e	51		 push	 ecx
  0058f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00597	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059c	51		 push	 ecx
  0059d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005aa	51		 push	 ecx
  005ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  005b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b8	51		 push	 ecx
  005b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005cb	50		 push	 eax
  005cc	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3483 : 
; 3484 : 			set_active_screen (overlaid_mfd_texture_screen);

  005d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  005d6	50		 push	 eax
  005d7	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3485 : 
; 3486 : 			if (lock_screen (overlaid_mfd_texture_screen))

  005dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  005e1	50		 push	 eax
  005e2	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005e7	85 c0		 test	 eax, eax
  005e9	74 43		 je	 SHORT $LN16@draw_overl

; 3487 : 			{
; 3488 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  005eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005f0	50		 push	 eax
  005f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  005f7	83 e9 01	 sub	 ecx, 1
  005fa	51		 push	 ecx
  005fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00601	83 ea 01	 sub	 edx, 1
  00604	52		 push	 edx
  00605	6a 00		 push	 0
  00607	6a 00		 push	 0
  00609	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3489 : 
; 3490 : 				draw_layout_grid ();

  0060e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3491 : 
; 3492 : 				draw_air_radar_mfd ();

  00613	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 3493 : 
; 3494 : 				flush_screen_texture_graphics (overlaid_mfd_texture_screen);

  00618	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0061d	50		 push	 eax
  0061e	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3495 : 
; 3496 : 				unlock_screen (overlaid_mfd_texture_screen);

  00623	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00628	50		 push	 eax
  00629	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN16@draw_overl:

; 3497 : 			}
; 3498 : 
; 3499 : 			break;

  0062e	e9 34 02 00 00	 jmp	 $LN2@draw_overl
$LN17@draw_overl:

; 3500 : 		}
; 3501 : 		////////////////////////////////////////
; 3502 : 		case MFD_MODE_FLIR:
; 3503 : 		////////////////////////////////////////
; 3504 : 		{
; 3505 : 			if (!havoc_damage.flir)

  00633	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00638	d1 e8		 shr	 eax, 1
  0063a	83 e0 01	 and	 eax, 1
  0063d	75 2f		 jne	 SHORT $LN18@draw_overl

; 3506 : 			{
; 3507 : 				draw_overlaid_3d_eo_display (&havoc_flir, TARGET_ACQUISITION_SYSTEM_FLIR, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  0063f	51		 push	 ecx
  00640	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  00645	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064a	51		 push	 ecx
  0064b	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00650	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00655	51		 push	 ecx
  00656	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  0065b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00660	6a 03		 push	 3
  00662	68 00 00 00 00	 push	 OFFSET ?havoc_flir@@3UEO_PARAMS@@A ; havoc_flir
  00667	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display

; 3508 : 			}
; 3509 : 			else

  0066c	eb 31		 jmp	 SHORT $LN19@draw_overl
$LN18@draw_overl:

; 3510 : 			{
; 3511 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0066e	51		 push	 ecx
  0066f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00674	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00679	51		 push	 ecx
  0067a	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  0067f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00684	51		 push	 ecx
  00685	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0068a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068f	51		 push	 ecx
  00690	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00695	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069a	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN19@draw_overl:

; 3512 : 			}
; 3513 : 
; 3514 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0069f	51		 push	 ecx
  006a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  006a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ad	51		 push	 ecx
  006ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  006b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bb	51		 push	 ecx
  006bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  006c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c9	51		 push	 ecx
  006ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  006d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006dc	50		 push	 eax
  006dd	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3515 : 
; 3516 : 			set_active_screen (overlaid_mfd_texture_screen);

  006e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  006e7	50		 push	 eax
  006e8	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3517 : 
; 3518 : 			if (lock_screen (overlaid_mfd_texture_screen))

  006ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  006f2	50		 push	 eax
  006f3	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006f8	85 c0		 test	 eax, eax
  006fa	74 47		 je	 SHORT $LN20@draw_overl

; 3519 : 			{
; 3520 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  006fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00701	50		 push	 eax
  00702	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00708	83 e9 01	 sub	 ecx, 1
  0070b	51		 push	 ecx
  0070c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00712	83 ea 01	 sub	 edx, 1
  00715	52		 push	 edx
  00716	6a 00		 push	 0
  00718	6a 00		 push	 0
  0071a	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3521 : 
; 3522 : 				draw_layout_grid ();

  0071f	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3523 : 
; 3524 : 				draw_2d_flir_mfd (TRUE, TRUE);

  00724	6a 01		 push	 1
  00726	6a 01		 push	 1
  00728	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 3525 : 
; 3526 : 				flush_screen_texture_graphics (overlaid_mfd_texture_screen);

  0072d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00732	50		 push	 eax
  00733	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3527 : 
; 3528 : 				unlock_screen (overlaid_mfd_texture_screen);

  00738	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0073d	50		 push	 eax
  0073e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN20@draw_overl:

; 3529 : 			}
; 3530 : 
; 3531 : 			set_pilots_full_screen_params (FALSE);

  00743	6a 00		 push	 0
  00745	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 3532 : 
; 3533 : 			break;

  0074a	e9 18 01 00 00	 jmp	 $LN2@draw_overl
$LN21@draw_overl:

; 3534 : 		}
; 3535 : 		////////////////////////////////////////
; 3536 : 		case MFD_MODE_LLLTV:
; 3537 : 		////////////////////////////////////////
; 3538 : 		{
; 3539 : 			if (!havoc_damage.llltv)

  0074f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00754	c1 e8 03	 shr	 eax, 3
  00757	83 e0 01	 and	 eax, 1
  0075a	75 2f		 jne	 SHORT $LN22@draw_overl

; 3540 : 			{
; 3541 : 				draw_overlaid_3d_eo_display (&havoc_llltv, TARGET_ACQUISITION_SYSTEM_LLLTV, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  0075c	51		 push	 ecx
  0075d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  00762	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00767	51		 push	 ecx
  00768	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0076d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00772	51		 push	 ecx
  00773	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00778	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077d	6a 06		 push	 6
  0077f	68 00 00 00 00	 push	 OFFSET ?havoc_llltv@@3UEO_PARAMS@@A ; havoc_llltv
  00784	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display

; 3542 : 			}
; 3543 : 			else

  00789	eb 31		 jmp	 SHORT $LN23@draw_overl
$LN22@draw_overl:

; 3544 : 			{
; 3545 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0078b	51		 push	 ecx
  0078c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00791	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00796	51		 push	 ecx
  00797	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  0079c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a1	51		 push	 ecx
  007a2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  007a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ac	51		 push	 ecx
  007ad	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  007b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b7	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN23@draw_overl:

; 3546 : 			}
; 3547 : 
; 3548 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  007bc	51		 push	 ecx
  007bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  007c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ca	51		 push	 ecx
  007cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  007d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d8	51		 push	 ecx
  007d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  007e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e6	51		 push	 ecx
  007e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  007ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007f9	50		 push	 eax
  007fa	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3549 : 
; 3550 : 			set_active_screen (overlaid_mfd_texture_screen);

  007ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00804	50		 push	 eax
  00805	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3551 : 
; 3552 : 			if (lock_screen (overlaid_mfd_texture_screen))

  0080a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0080f	50		 push	 eax
  00810	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00815	85 c0		 test	 eax, eax
  00817	74 47		 je	 SHORT $LN24@draw_overl

; 3553 : 			{
; 3554 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00819	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0081e	50		 push	 eax
  0081f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00825	83 e9 01	 sub	 ecx, 1
  00828	51		 push	 ecx
  00829	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0082f	83 ea 01	 sub	 edx, 1
  00832	52		 push	 edx
  00833	6a 00		 push	 0
  00835	6a 00		 push	 0
  00837	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3555 : 
; 3556 : 				draw_layout_grid ();

  0083c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3557 : 
; 3558 : 				draw_2d_llltv_mfd (TRUE, TRUE);

  00841	6a 01		 push	 1
  00843	6a 01		 push	 1
  00845	e8 00 00 00 00	 call	 ?draw_2d_llltv_mfd@@YGXHH@Z ; draw_2d_llltv_mfd

; 3559 : 
; 3560 : 				flush_screen_texture_graphics (overlaid_mfd_texture_screen);

  0084a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0084f	50		 push	 eax
  00850	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3561 : 
; 3562 : 				unlock_screen (overlaid_mfd_texture_screen);

  00855	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0085a	50		 push	 eax
  0085b	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN24@draw_overl:

; 3563 : 			}
; 3564 : 
; 3565 : 			set_pilots_full_screen_params (FALSE);

  00860	6a 00		 push	 0
  00862	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params
$LN2@draw_overl:

; 3566 : 
; 3567 : 			break;
; 3568 : 		}
; 3569 : 	}
; 3570 : 
; 3571 : 	set_active_screen (video_screen);

  00867	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0086c	50		 push	 eax
  0086d	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3572 : 
; 3573 : 	////////////////////////////////////////
; 3574 : 	//
; 3575 : 	// render MFD to screen
; 3576 : 	//
; 3577 : 	////////////////////////////////////////
; 3578 : 	{
; 3579 : 		vertex
; 3580 : 			quad[4];
; 3581 : 
; 3582 : 		real_colour
; 3583 : 			colour,
; 3584 : 			specular;
; 3585 : 
; 3586 : 		set_3d_active_environment (main_3d_env);

  00872	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00877	50		 push	 eax
  00878	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 3587 : 
; 3588 : 		if (begin_3d_scene ())

  0087d	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00882	85 c0		 test	 eax, eax
  00884	0f 84 3c 03 00
	00		 je	 $LN25@draw_overl

; 3589 : 		{
; 3590 : 			set_d3d_transparency_on ();

  0088a	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 3591 : 
; 3592 : 			set_d3d_zbuffer_comparison (FALSE);

  0088f	6a 00		 push	 0
  00891	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 3593 : 
; 3594 : 			set_d3d_culling (FALSE);

  00896	6a 00		 push	 0
  00898	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 3595 : 
; 3596 : 			set_d3d_texture_wrapping (0, FALSE);

  0089d	6a 00		 push	 0
  0089f	6a 00		 push	 0
  008a1	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 3597 : 
; 3598 : /*
; 3599 : 			if ((application_video_width == 640) || (get_global_unscaled_displays ()))
; 3600 : 			{
; 3601 : 				set_d3d_texture_mag_filtering (FALSE);
; 3602 : 				set_d3d_texture_min_filtering (FALSE);
; 3603 : 				set_d3d_texture_mip_filtering (FALSE);
; 3604 : 			}
; 3605 : 			else */
; 3606 : 			{
; 3607 : 				set_d3d_texture_mag_filtering (TRUE);

  008a6	6a 01		 push	 1
  008a8	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 3608 : 				set_d3d_texture_min_filtering (TRUE);

  008ad	6a 01		 push	 1
  008af	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 3609 : 				set_d3d_texture_mip_filtering (FALSE);

  008b4	6a 00		 push	 0
  008b6	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 3610 : 			}
; 3611 : 
; 3612 : 			set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (OVERLAID_MFD_TEXTURE_INDEX));

  008bb	68 54 06 00 00	 push	 1620			; 00000654H
  008c0	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  008c5	50		 push	 eax
  008c6	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 3613 : 
; 3614 : 			////////////////////////////////////////
; 3615 : 			//
; 3616 : 
; 3617 : 			colour.red	 			= 255;

  008cb	c6 85 d6 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+2], 255 ; 000000ffH

; 3618 : 			colour.green			= 255;

  008d2	c6 85 d5 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+1], 255 ; 000000ffH

; 3619 : 			colour.blue	 			= 255;

  008d9	c6 85 d4 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp], 255 ; 000000ffH

; 3620 : 			colour.alpha  			= 255;

  008e0	c6 85 d7 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+3], 255 ; 000000ffH

; 3621 : 
; 3622 : 			specular.red 			= 0;

  008e7	c6 85 d2 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp+2], 0

; 3623 : 			specular.green	 		= 0;

  008ee	c6 85 d1 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp+1], 0

; 3624 : 			specular.blue 			= 0;

  008f5	c6 85 d0 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp], 0

; 3625 : 			specular.alpha	  		= 255;

  008fc	c6 85 d3 fe ff
	ff ff		 mov	 BYTE PTR _specular$1[ebp+3], 255 ; 000000ffH

; 3626 : 
; 3627 : 			quad[0].i 				= mfd_screen_x_min;

  00903	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00908	6b c8 00	 imul	 ecx, eax, 0
  0090b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00910	f3 0f 11 84 0d
	e8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+16], xmm0

; 3628 : 			quad[0].j  				= mfd_screen_y_min;

  00919	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0091e	6b c8 00	 imul	 ecx, eax, 0
  00921	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00926	f3 0f 11 84 0d
	ec fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+20], xmm0

; 3629 : 			quad[0].z  				= 0.5;

  0092f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00934	6b c8 00	 imul	 ecx, eax, 0
  00937	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0093f	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+8], xmm0

; 3630 : 			quad[0].q  				= 0.5;

  00948	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0094d	6b c8 00	 imul	 ecx, eax, 0
  00950	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00958	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+12], xmm0

; 3631 : 			quad[0].u  				= 0.0;

  00961	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00966	6b c8 00	 imul	 ecx, eax, 0
  00969	0f 57 c0	 xorps	 xmm0, xmm0
  0096c	f3 0f 11 84 0d
	f0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+24], xmm0

; 3632 : 			quad[0].v				= 0.0;

  00975	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0097a	6b c8 00	 imul	 ecx, eax, 0
  0097d	0f 57 c0	 xorps	 xmm0, xmm0
  00980	f3 0f 11 84 0d
	f4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+28], xmm0

; 3633 : 
; 3634 : 			quad[1].i  				= mfd_screen_x_max;

  00989	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0098e	c1 e0 00	 shl	 eax, 0
  00991	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00996	f3 0f 11 84 05
	e8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+16], xmm0

; 3635 : 			quad[1].j  				= mfd_screen_y_min;

  0099f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009a4	c1 e0 00	 shl	 eax, 0
  009a7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  009ac	f3 0f 11 84 05
	ec fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+20], xmm0

; 3636 : 			quad[1].z  				= 0.5;

  009b5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009ba	c1 e0 00	 shl	 eax, 0
  009bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  009c5	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+8], xmm0

; 3637 : 			quad[1].q  				= 0.5;

  009ce	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009d3	c1 e0 00	 shl	 eax, 0
  009d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  009de	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+12], xmm0

; 3638 : 			quad[1].u  				= 1.0;

  009e7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009ec	c1 e0 00	 shl	 eax, 0
  009ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009f7	f3 0f 11 84 05
	f0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+24], xmm0

; 3639 : 			quad[1].v  				= 0.0;

  00a00	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a05	c1 e0 00	 shl	 eax, 0
  00a08	0f 57 c0	 xorps	 xmm0, xmm0
  00a0b	f3 0f 11 84 05
	f4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+28], xmm0

; 3640 : 
; 3641 : 			quad[2].i				= mfd_screen_x_max;

  00a14	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a19	d1 e0		 shl	 eax, 1
  00a1b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00a20	f3 0f 11 84 05
	e8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+16], xmm0

; 3642 : 			quad[2].j  				= mfd_screen_y_max;

  00a29	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a2e	d1 e0		 shl	 eax, 1
  00a30	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00a35	f3 0f 11 84 05
	ec fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+20], xmm0

; 3643 : 			quad[2].z  				= 0.5;

  00a3e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a43	d1 e0		 shl	 eax, 1
  00a45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a4d	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+8], xmm0

; 3644 : 			quad[2].q  				= 0.5;

  00a56	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a5b	d1 e0		 shl	 eax, 1
  00a5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a65	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+12], xmm0

; 3645 : 			quad[2].u  				= 1.0;

  00a6e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a73	d1 e0		 shl	 eax, 1
  00a75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a7d	f3 0f 11 84 05
	f0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+24], xmm0

; 3646 : 			quad[2].v  				= 1.0;

  00a86	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a8b	d1 e0		 shl	 eax, 1
  00a8d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a95	f3 0f 11 84 05
	f4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+28], xmm0

; 3647 : 
; 3648 : 			quad[3].i  				= mfd_screen_x_min;

  00a9e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00aa3	6b c8 03	 imul	 ecx, eax, 3
  00aa6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00aab	f3 0f 11 84 0d
	e8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+16], xmm0

; 3649 : 			quad[3].j  				= mfd_screen_y_max;

  00ab4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ab9	6b c8 03	 imul	 ecx, eax, 3
  00abc	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00ac1	f3 0f 11 84 0d
	ec fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+20], xmm0

; 3650 : 			quad[3].z  				= 0.5;

  00aca	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00acf	6b c8 03	 imul	 ecx, eax, 3
  00ad2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ada	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+8], xmm0

; 3651 : 			quad[3].q  				= 0.5;

  00ae3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ae8	6b c8 03	 imul	 ecx, eax, 3
  00aeb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00af3	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+12], xmm0

; 3652 : 			quad[3].u				= 0.0;

  00afc	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00b01	6b c8 03	 imul	 ecx, eax, 3
  00b04	0f 57 c0	 xorps	 xmm0, xmm0
  00b07	f3 0f 11 84 0d
	f0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+24], xmm0

; 3653 : 			quad[3].v				= 1.0;

  00b10	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00b15	6b c8 03	 imul	 ecx, eax, 3
  00b18	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b20	f3 0f 11 84 0d
	f4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+28], xmm0

; 3654 : 
; 3655 : 			quad[0].next_vertex	= &quad[1];

  00b29	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00b2e	c1 e0 00	 shl	 eax, 0
  00b31	8d 8c 05 d8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$3[ebp+eax]
  00b38	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00b3d	6b c2 00	 imul	 eax, edx, 0
  00b40	89 8c 05 00 ff
	ff ff		 mov	 DWORD PTR _quad$3[ebp+eax+40], ecx

; 3656 : 			quad[1].next_vertex	= &quad[2];

  00b47	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00b4c	d1 e0		 shl	 eax, 1
  00b4e	8d 8c 05 d8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$3[ebp+eax]
  00b55	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00b5a	c1 e2 00	 shl	 edx, 0
  00b5d	89 8c 15 00 ff
	ff ff		 mov	 DWORD PTR _quad$3[ebp+edx+40], ecx

; 3657 : 			quad[2].next_vertex	= &quad[3];

  00b64	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00b69	6b c8 03	 imul	 ecx, eax, 3
  00b6c	8d 94 0d d8 fe
	ff ff		 lea	 edx, DWORD PTR _quad$3[ebp+ecx]
  00b73	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00b78	d1 e0		 shl	 eax, 1
  00b7a	89 94 05 00 ff
	ff ff		 mov	 DWORD PTR _quad$3[ebp+eax+40], edx

; 3658 : 			quad[3].next_vertex	= NULL;

  00b81	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00b86	6b c8 03	 imul	 ecx, eax, 3
  00b89	c7 84 0d 00 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$3[ebp+ecx+40], 0

; 3659 : 
; 3660 : 			//
; 3661 : 			////////////////////////////////////////
; 3662 : 
; 3663 : 			draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  00b94	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _specular$1[ebp]
  00b9a	50		 push	 eax
  00b9b	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$2[ebp]
  00ba1	51		 push	 ecx
  00ba2	8d 95 d8 fe ff
	ff		 lea	 edx, DWORD PTR _quad$3[ebp]
  00ba8	52		 push	 edx
  00ba9	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 3664 : 
; 3665 : 			set_d3d_transparency_off ();

  00bae	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 3666 : 
; 3667 : 			set_d3d_zbuffer_comparison (TRUE);

  00bb3	6a 01		 push	 1
  00bb5	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 3668 : 
; 3669 : 			set_d3d_culling (TRUE);

  00bba	6a 01		 push	 1
  00bbc	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 3670 : 
; 3671 : 			end_3d_scene ();

  00bc1	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN25@draw_overl:
$LN1@draw_overl:

; 3672 : 		}
; 3673 : 	}
; 3674 : }

  00bc6	5f		 pop	 edi
  00bc7	5e		 pop	 esi
  00bc8	5b		 pop	 ebx
  00bc9	8b e5		 mov	 esp, ebp
  00bcb	5d		 pop	 ebp
  00bcc	c2 0c 00	 ret	 12			; 0000000cH
  00bcf	90		 npad	 1
$LN27@draw_overl:
  00bd0	00 00 00 00	 DD	 $LN9@draw_overl
  00bd4	00 00 00 00	 DD	 $LN11@draw_overl
  00bd8	00 00 00 00	 DD	 $LN13@draw_overl
  00bdc	00 00 00 00	 DD	 $LN15@draw_overl
  00be0	00 00 00 00	 DD	 $LN17@draw_overl
  00be4	00 00 00 00	 DD	 $LN2@draw_overl
  00be8	00 00 00 00	 DD	 $LN2@draw_overl
  00bec	00 00 00 00	 DD	 $LN21@draw_overl
?draw_overlaid_havoc_mfd@@YGXMMM@Z ENDP			; draw_overlaid_havoc_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_havoc_mfd_on_texture@@YGXXZ
_TEXT	SEGMENT
tv145 = -72						; size = 4
_export_screen$ = -4					; size = 4
?draw_havoc_mfd_on_texture@@YGXXZ PROC			; draw_havoc_mfd_on_texture, COMDAT

; 2987 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2988 : 	screen* export_screen;
; 2989 : 	if (havoc_damage.tv_display)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  0000e	c1 e8 12	 shr	 eax, 18			; 00000012H
  00011	83 e0 01	 and	 eax, 1
  00014	74 15		 je	 SHORT $LN4@draw_havoc

; 2990 : 	{
; 2991 : 		if (mfd_mode != MFD_MODE_OFF)

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 0
  0001d	74 0a		 je	 SHORT $LN6@draw_havoc

; 2992 : 		{
; 2993 : 			mfd_mode = MFD_MODE_DAMAGED;

  0001f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 1
$LN6@draw_havoc:

; 2994 : 		}
; 2995 : 	}
; 2996 : 	else

  00029	eb 13		 jmp	 SHORT $LN7@draw_havoc
$LN4@draw_havoc:

; 2997 : 	{
; 2998 : 		if (mfd_mode == MFD_MODE_DAMAGED)

  0002b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 1
  00032	75 0a		 jne	 SHORT $LN7@draw_havoc

; 2999 : 		{
; 3000 : 			mfd_mode = MFD_MODE_OFF;

  00034	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 0
$LN7@draw_havoc:

; 3001 : 		}
; 3002 : 	}
; 3003 : 
; 3004 : 	set_system_texture_screen (mfd_texture_screen, TEXTURE_INDEX_HVCKPT_DISPLAY_CRT);

  0003e	68 e3 06 00 00	 push	 1763			; 000006e3H
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 3005 : 
; 3006 : 	////////////////////////////////////////
; 3007 : 	//
; 3008 : 	// set up MFD 2D environment
; 3009 : 	//
; 3010 : 	////////////////////////////////////////
; 3011 : 
; 3012 : 	set_2d_active_environment (mfd_env);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 3013 : 
; 3014 : 	//
; 3015 : 	// window
; 3016 : 	//
; 3017 : 
; 3018 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00059	51		 push	 ecx
  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00067	51		 push	 ecx
  00068	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	51		 push	 ecx
  00076	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0007e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 3019 : 
; 3020 : 	//
; 3021 : 	// viewport
; 3022 : 	//
; 3023 : 
; 3024 : 	if (draw_large_mfd)

  0009c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000a3	74 12		 je	 SHORT $LN8@draw_havoc

; 3025 : 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  000a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43520000
  000ad	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 3026 : 	else

  000b5	eb 10		 jmp	 SHORT $LN9@draw_havoc
$LN8@draw_havoc:

; 3027 : 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42e40000
  000bf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0
$LN9@draw_havoc:

; 3028 : 
; 3029 : 	ASSERT (mfd_viewport_size <= mfd_texture_size);

  000c7	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  000cf	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  000d6	73 18		 jae	 SHORT $LN10@draw_havoc
  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_havoc_mfd_on_texture@@YGXXZ@4JA
  000dd	83 c0 2a	 add	 eax, 42			; 0000002aH
  000e0	50		 push	 eax
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
  000eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@draw_havoc:

; 3030 : 
; 3031 : 
; 3032 : 	mfd_viewport_x_org = mfd_viewport_texture_x_org;

  000f0	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_x_org@@3HA
  000f8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 3033 : 	mfd_viewport_y_org = mfd_viewport_texture_y_org;

  00100	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_y_org@@3HA
  00108	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 3034 : 
; 3035 : 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  00110	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00118	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00120	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00128	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0012c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00130	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 3036 : 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  00138	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00140	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00148	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00150	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00154	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00158	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 3037 : 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  00160	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00168	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00170	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00178	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0017c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00184	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00188	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 3038 : 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  00190	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00198	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001a0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001a8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ac	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 3039 : 
; 3040 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  001c0	51		 push	 ecx
  001c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  001c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ce	51		 push	 ecx
  001cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  001d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dc	51		 push	 ecx
  001dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  001e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ea	51		 push	 ecx
  001eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  001f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3041 : 
; 3042 : 	////////////////////////////////////////
; 3043 : 	//
; 3044 : 	// draw MFD display
; 3045 : 	//
; 3046 : 	////////////////////////////////////////
; 3047 : 
; 3048 : 	switch (mfd_mode)

  00203	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A
  00208	89 45 b8	 mov	 DWORD PTR tv145[ebp], eax
  0020b	83 7d b8 07	 cmp	 DWORD PTR tv145[ebp], 7
  0020f	0f 87 b7 02 00
	00		 ja	 $LN2@draw_havoc
  00215	8b 4d b8	 mov	 ecx, DWORD PTR tv145[ebp]
  00218	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN35@draw_havoc[ecx*4]
$LN11@draw_havoc:

; 3049 : 	{
; 3050 : 		////////////////////////////////////////
; 3051 : 		case MFD_MODE_OFF:
; 3052 : 		////////////////////////////////////////
; 3053 : 		{
; 3054 : 			set_active_screen (mfd_texture_screen);

  0021f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3055 : 
; 3056 : 			if (lock_screen (mfd_texture_screen))

  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  0022f	50		 push	 eax
  00230	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00235	85 c0		 test	 eax, eax
  00237	74 3e		 je	 SHORT $LN12@draw_havoc

; 3057 : 			{
; 3058 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00239	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0023e	50		 push	 eax
  0023f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00245	83 e9 01	 sub	 ecx, 1
  00248	51		 push	 ecx
  00249	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0024f	83 ea 01	 sub	 edx, 1
  00252	52		 push	 edx
  00253	6a 00		 push	 0
  00255	6a 00		 push	 0
  00257	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3059 : 
; 3060 : 				draw_layout_grid ();

  0025c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3061 : 
; 3062 : 				flush_screen_texture_graphics (mfd_texture_screen);

  00261	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  00266	50		 push	 eax
  00267	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3063 : 
; 3064 : 				unlock_screen (mfd_texture_screen);

  0026c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN12@draw_havoc:

; 3065 : 			}
; 3066 : 
; 3067 : 			break;

  00277	e9 50 02 00 00	 jmp	 $LN2@draw_havoc
$LN13@draw_havoc:

; 3068 : 		}
; 3069 : 		////////////////////////////////////////
; 3070 : 		case MFD_MODE_DAMAGED:
; 3071 : 		////////////////////////////////////////
; 3072 : 		{
; 3073 : 			set_active_screen (mfd_texture_screen);

  0027c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  00281	50		 push	 eax
  00282	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3074 : 
; 3075 : 			if (lock_screen (mfd_texture_screen))

  00287	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  0028c	50		 push	 eax
  0028d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00292	85 c0		 test	 eax, eax
  00294	74 43		 je	 SHORT $LN14@draw_havoc

; 3076 : 			{
; 3077 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00296	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0029b	50		 push	 eax
  0029c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  002a2	83 e9 01	 sub	 ecx, 1
  002a5	51		 push	 ecx
  002a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  002ac	83 ea 01	 sub	 edx, 1
  002af	52		 push	 edx
  002b0	6a 00		 push	 0
  002b2	6a 00		 push	 0
  002b4	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3078 : 
; 3079 : 				draw_layout_grid ();

  002b9	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3080 : 
; 3081 : 				draw_damaged_mfd ();

  002be	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 3082 : 
; 3083 : 				flush_screen_texture_graphics (mfd_texture_screen);

  002c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3084 : 
; 3085 : 				unlock_screen (mfd_texture_screen);

  002ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  002d3	50		 push	 eax
  002d4	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN14@draw_havoc:

; 3086 : 			}
; 3087 : 
; 3088 : 			break;

  002d9	e9 ee 01 00 00	 jmp	 $LN2@draw_havoc
$LN15@draw_havoc:

; 3089 : 		}
; 3090 : 		////////////////////////////////////////
; 3091 : 		case MFD_MODE_GROUND_RADAR:
; 3092 : 		case MFD_MODE_AIR_RADAR:
; 3093 : 		////////////////////////////////////////
; 3094 : 		{
; 3095 : 			set_active_screen (mfd_texture_screen);

  002de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3096 : 
; 3097 : 			if (lock_screen (mfd_texture_screen))

  002e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  002ee	50		 push	 eax
  002ef	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  002f4	85 c0		 test	 eax, eax
  002f6	74 53		 je	 SHORT $LN16@draw_havoc

; 3098 : 			{
; 3099 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  002fd	50		 push	 eax
  002fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00304	83 e9 01	 sub	 ecx, 1
  00307	51		 push	 ecx
  00308	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0030e	83 ea 01	 sub	 edx, 1
  00311	52		 push	 edx
  00312	6a 00		 push	 0
  00314	6a 00		 push	 0
  00316	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3100 : 
; 3101 : 				draw_layout_grid ();

  0031b	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3102 : 
; 3103 : 				if (mfd_mode == MFD_MODE_GROUND_RADAR)

  00320	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 2
  00327	75 07		 jne	 SHORT $LN17@draw_havoc

; 3104 : 				 	draw_ground_radar_mfd ();

  00329	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 3105 : 				else

  0032e	eb 05		 jmp	 SHORT $LN18@draw_havoc
$LN17@draw_havoc:

; 3106 : 				 	draw_air_radar_mfd ();

  00330	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd
$LN18@draw_havoc:

; 3107 : 
; 3108 : 				flush_screen_texture_graphics (mfd_texture_screen);

  00335	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  0033a	50		 push	 eax
  0033b	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3109 : 
; 3110 : 				unlock_screen (mfd_texture_screen);

  00340	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  00345	50		 push	 eax
  00346	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN16@draw_havoc:

; 3111 : 			}
; 3112 : 
; 3113 : 			break;

  0034b	e9 7c 01 00 00	 jmp	 $LN2@draw_havoc
$LN19@draw_havoc:

; 3114 : 		}
; 3115 : 		////////////////////////////////////////
; 3116 : 		case MFD_MODE_FLIR:
; 3117 : 		case MFD_MODE_LLLTV:
; 3118 : 		////////////////////////////////////////
; 3119 : 		{
; 3120 : 			if
; 3121 : 			(
; 3122 : 				(d3d_can_render_to_texture) &&
; 3123 : 				(!havoc_damage.flir) &&
; 3124 : 				(get_view_mode () != VIEW_MODE_COCKPIT_PANEL_DOWN20_LEFT30) &&

  00350	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00357	0f 84 fa 00 00
	00		 je	 $LN20@draw_havoc
  0035d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00362	d1 e8		 shr	 eax, 1
  00364	83 e0 01	 and	 eax, 1
  00367	0f 85 ea 00 00
	00		 jne	 $LN20@draw_havoc
  0036d	83 3d 00 00 00
	00 17		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 23 ; view_mode, 00000017H
  00374	0f 84 dd 00 00
	00		 je	 $LN20@draw_havoc
  0037a	83 3d 00 00 00
	00 19		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 25 ; view_mode, 00000019H
  00381	0f 84 d0 00 00
	00		 je	 $LN20@draw_havoc

; 3125 : 				(get_view_mode () != VIEW_MODE_COCKPIT_PANEL_DOWN20_RIGHT30)
; 3126 : 			)
; 3127 : 			{
; 3128 : 				ASSERT (eo_3d_texture_screen);

  00387	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  0038e	75 1a		 jne	 SHORT $LN22@draw_havoc
  00390	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_havoc_mfd_on_texture@@YGXXZ@4JA
  00395	05 8d 00 00 00	 add	 eax, 141		; 0000008dH
  0039a	50		 push	 eax
  0039b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FMEPFODF@c?3?2users?2nhv90?2projects?2eech?2ap@
  003a0	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  003a5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN22@draw_havoc:

; 3129 : 
; 3130 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_HVCKPT_DISPLAY_CRT);

  003aa	68 e3 06 00 00	 push	 1763			; 000006e3H
  003af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003b4	50		 push	 eax
  003b5	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 3131 : 
; 3132 : 				if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  003ba	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  003c1	75 0c		 jne	 SHORT $LN23@draw_havoc

; 3133 : 					mfd_mode = MFD_MODE_FLIR;

  003c3	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 4

; 3134 : 				else

  003cd	eb 0a		 jmp	 SHORT $LN24@draw_havoc
$LN23@draw_havoc:

; 3135 : 					mfd_mode = MFD_MODE_LLLTV;

  003cf	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 7
$LN24@draw_havoc:

; 3136 : 
; 3137 : 				if (mfd_mode == MFD_MODE_FLIR)

  003d9	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 4
  003e0	75 0e		 jne	 SHORT $LN25@draw_havoc

; 3138 : 					draw_3d_eo_display_on_texture (&havoc_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  003e2	6a 03		 push	 3
  003e4	68 00 00 00 00	 push	 OFFSET ?havoc_flir@@3UEO_PARAMS@@A ; havoc_flir
  003e9	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture

; 3139 : 				else

  003ee	eb 0c		 jmp	 SHORT $LN26@draw_havoc
$LN25@draw_havoc:

; 3140 : 					draw_3d_eo_display_on_texture (&havoc_llltv, TARGET_ACQUISITION_SYSTEM_LLLTV);

  003f0	6a 06		 push	 6
  003f2	68 00 00 00 00	 push	 OFFSET ?havoc_llltv@@3UEO_PARAMS@@A ; havoc_llltv
  003f7	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture
$LN26@draw_havoc:

; 3141 : 
; 3142 : 				set_active_screen (eo_3d_texture_screen);

  003fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3143 : 
; 3144 : 				if (lock_screen (eo_3d_texture_screen))

  00407	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0040c	50		 push	 eax
  0040d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00412	85 c0		 test	 eax, eax
  00414	74 38		 je	 SHORT $LN27@draw_havoc

; 3145 : 				{
; 3146 : 					draw_layout_grid ();

  00416	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3147 : 
; 3148 : 					if (mfd_mode == MFD_MODE_FLIR)

  0041b	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 4
  00422	75 0b		 jne	 SHORT $LN28@draw_havoc

; 3149 : 						draw_2d_flir_mfd (TRUE, FALSE);

  00424	6a 00		 push	 0
  00426	6a 01		 push	 1
  00428	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 3150 : 					else

  0042d	eb 09		 jmp	 SHORT $LN29@draw_havoc
$LN28@draw_havoc:

; 3151 : 						draw_2d_llltv_mfd (TRUE, FALSE);

  0042f	6a 00		 push	 0
  00431	6a 01		 push	 1
  00433	e8 00 00 00 00	 call	 ?draw_2d_llltv_mfd@@YGXHH@Z ; draw_2d_llltv_mfd
$LN29@draw_havoc:

; 3152 : 
; 3153 : 					flush_screen_texture_graphics (eo_3d_texture_screen);

  00438	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0043d	50		 push	 eax
  0043e	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3154 : 
; 3155 : 					unlock_screen (eo_3d_texture_screen);

  00443	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00448	50		 push	 eax
  00449	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN27@draw_havoc:

; 3156 : 				}
; 3157 : 
; 3158 : 				set_pilots_full_screen_params (FALSE);

  0044e	6a 00		 push	 0
  00450	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 3159 : 			}
; 3160 : 			else

  00455	eb 75		 jmp	 SHORT $LN30@draw_havoc
$LN20@draw_havoc:

; 3161 : 			{
; 3162 : 				set_active_screen (mfd_texture_screen);

  00457	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  0045c	50		 push	 eax
  0045d	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3163 : 
; 3164 : 				if (lock_screen (mfd_texture_screen))

  00462	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  00467	50		 push	 eax
  00468	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0046d	85 c0		 test	 eax, eax
  0046f	74 5b		 je	 SHORT $LN30@draw_havoc

; 3165 : 				{
; 3166 : 					set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00471	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00476	50		 push	 eax
  00477	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0047d	83 e9 01	 sub	 ecx, 1
  00480	51		 push	 ecx
  00481	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00487	83 ea 01	 sub	 edx, 1
  0048a	52		 push	 edx
  0048b	6a 00		 push	 0
  0048d	6a 00		 push	 0
  0048f	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3167 : 
; 3168 : 					draw_layout_grid ();

  00494	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 3169 : 
; 3170 : 					if (mfd_mode == MFD_MODE_FLIR)

  00499	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 4
  004a0	75 0b		 jne	 SHORT $LN31@draw_havoc

; 3171 : 						draw_2d_flir_mfd (FALSE, FALSE);

  004a2	6a 00		 push	 0
  004a4	6a 00		 push	 0
  004a6	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 3172 : 					else

  004ab	eb 09		 jmp	 SHORT $LN32@draw_havoc
$LN31@draw_havoc:

; 3173 : 						draw_2d_llltv_mfd (FALSE, FALSE);

  004ad	6a 00		 push	 0
  004af	6a 00		 push	 0
  004b1	e8 00 00 00 00	 call	 ?draw_2d_llltv_mfd@@YGXHH@Z ; draw_2d_llltv_mfd
$LN32@draw_havoc:

; 3174 : 
; 3175 : 					flush_screen_texture_graphics (mfd_texture_screen);

  004b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  004bb	50		 push	 eax
  004bc	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 3176 : 
; 3177 : 					unlock_screen (mfd_texture_screen);

  004c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  004c6	50		 push	 eax
  004c7	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN30@draw_havoc:
$LN2@draw_havoc:

; 3178 : 				}
; 3179 : 			}
; 3180 : 
; 3181 : 			break;
; 3182 : 		}
; 3183 : 
; 3184 : 	}
; 3185 : 
; 3186 : 	set_active_screen (video_screen);

  004cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  004d1	50		 push	 eax
  004d2	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3187 : 	if(command_line_export_mfd)

  004d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  004de	74 18		 je	 SHORT $LN33@draw_havoc

; 3188 : 	{
; 3189 : 		export_screen=create_screen_for_system_texture (TEXTURE_INDEX_HVCKPT_DISPLAY_CRT);

  004e0	68 e3 06 00 00	 push	 1763			; 000006e3H
  004e5	e8 00 00 00 00	 call	 ?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ; create_screen_for_system_texture
  004ea	89 45 fc	 mov	 DWORD PTR _export_screen$[ebp], eax

; 3190 : 		copy_export_mfd(export_screen,NULL);

  004ed	6a 00		 push	 0
  004ef	8b 45 fc	 mov	 eax, DWORD PTR _export_screen$[ebp]
  004f2	50		 push	 eax
  004f3	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd
$LN33@draw_havoc:

; 3191 : 	}
; 3192 : }

  004f8	5f		 pop	 edi
  004f9	5e		 pop	 esi
  004fa	5b		 pop	 ebx
  004fb	8b e5		 mov	 esp, ebp
  004fd	5d		 pop	 ebp
  004fe	c3		 ret	 0
  004ff	90		 npad	 1
$LN35@draw_havoc:
  00500	00 00 00 00	 DD	 $LN11@draw_havoc
  00504	00 00 00 00	 DD	 $LN13@draw_havoc
  00508	00 00 00 00	 DD	 $LN15@draw_havoc
  0050c	00 00 00 00	 DD	 $LN15@draw_havoc
  00510	00 00 00 00	 DD	 $LN19@draw_havoc
  00514	00 00 00 00	 DD	 $LN2@draw_havoc
  00518	00 00 00 00	 DD	 $LN2@draw_havoc
  0051c	00 00 00 00	 DD	 $LN19@draw_havoc
?draw_havoc_mfd_on_texture@@YGXXZ ENDP			; draw_havoc_mfd_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?draw_havoc_mfd_on_cockpit@@YGXMMHH@Z
_TEXT	SEGMENT
tv226 = -348						; size = 4
_y_max$1 = -280						; size = 4
_x_max$2 = -276						; size = 4
_y_min$3 = -272						; size = 4
_x_min$4 = -268						; size = 4
_specular$5 = -264					; size = 4
_colour$6 = -260					; size = 4
_quad$7 = -256						; size = 256
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
_large_mfd$ = 16					; size = 4
_draw_translucent_background$ = 20			; size = 4
?draw_havoc_mfd_on_cockpit@@YGXMMHH@Z PROC		; draw_havoc_mfd_on_cockpit, COMDAT

; 2719 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2720 : 	if (havoc_damage.tv_display)

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00011	c1 e8 12	 shr	 eax, 18			; 00000012H
  00014	83 e0 01	 and	 eax, 1
  00017	74 15		 je	 SHORT $LN4@draw_havoc

; 2721 : 	{
; 2722 : 		if (mfd_mode != MFD_MODE_OFF)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 0
  00020	74 0a		 je	 SHORT $LN6@draw_havoc

; 2723 : 		{
; 2724 : 			mfd_mode = MFD_MODE_DAMAGED;

  00022	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 1
$LN6@draw_havoc:

; 2725 : 		}
; 2726 : 	}
; 2727 : 	else

  0002c	eb 13		 jmp	 SHORT $LN7@draw_havoc
$LN4@draw_havoc:

; 2728 : 	{
; 2729 : 		if (mfd_mode == MFD_MODE_DAMAGED)

  0002e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 1
  00035	75 0a		 jne	 SHORT $LN7@draw_havoc

; 2730 : 		{
; 2731 : 			mfd_mode = MFD_MODE_OFF;

  00037	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 0
$LN7@draw_havoc:

; 2732 : 		}
; 2733 : 	}
; 2734 : 
; 2735 : 	////////////////////////////////////////
; 2736 : 	//
; 2737 : 	// set up MFD 2D environment
; 2738 : 	//
; 2739 : 	////////////////////////////////////////
; 2740 : 
; 2741 : 	set_2d_active_environment (mfd_env);

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 2742 : 
; 2743 : 	//
; 2744 : 	// window
; 2745 : 	//
; 2746 : 
; 2747 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0004c	51		 push	 ecx
  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00055	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005a	51		 push	 ecx
  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	51		 push	 ecx
  00069	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00071	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00076	51		 push	 ecx
  00077	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0007f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 2748 : 
; 2749 : 	//
; 2750 : 	// viewport
; 2751 : 	//
; 2752 : 
; 2753 : 	draw_large_mfd = large_mfd;

  0008f	8b 45 10	 mov	 eax, DWORD PTR _large_mfd$[ebp]
  00092	a3 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, eax

; 2754 : 
; 2755 : 	if (draw_large_mfd)

  00097	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0009e	74 12		 je	 SHORT $LN8@draw_havoc

; 2756 : 	{
; 2757 : 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  000a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43520000
  000a8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 2758 : 	}
; 2759 : 	else

  000b0	eb 10		 jmp	 SHORT $LN9@draw_havoc
$LN8@draw_havoc:

; 2760 : 	{
; 2761 : 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42e40000
  000ba	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0
$LN9@draw_havoc:

; 2762 : 	}
; 2763 : 
; 2764 : 	mfd_viewport_x_org = x_org;

  000c2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  000c7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 2765 : 
; 2766 : 	mfd_viewport_y_org = y_org;

  000cf	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  000d4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 2767 : 
; 2768 : 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  000dc	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  000e4	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  000ec	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000f4	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000f8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000fc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 2769 : 
; 2770 : 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  00104	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  0010c	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00114	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0011c	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00120	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00124	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 2771 : 
; 2772 : 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  0012c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00134	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0013c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00144	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00148	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00150	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00154	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 2773 : 
; 2774 : 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  0015c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00164	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0016c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00174	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00178	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00180	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00184	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 2775 : 
; 2776 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0018c	51		 push	 ecx
  0018d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	51		 push	 ecx
  0019b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	51		 push	 ecx
  001a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  001b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b6	51		 push	 ecx
  001b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001c9	50		 push	 eax
  001ca	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2777 : 
; 2778 : 	////////////////////////////////////////
; 2779 : 	//
; 2780 : 	// draw translucent background
; 2781 : 	//
; 2782 : 	////////////////////////////////////////
; 2783 : 
; 2784 : 	if (draw_translucent_background)

  001cf	83 7d 14 00	 cmp	 DWORD PTR _draw_translucent_background$[ebp], 0
  001d3	0f 84 1b 03 00
	00		 je	 $LN14@draw_havoc

; 2785 : 	{
; 2786 : 		if (!draw_large_mfd)

  001d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001e0	0f 85 0e 03 00
	00		 jne	 $LN14@draw_havoc

; 2787 : 		{
; 2788 : 			if
; 2789 : 			(
; 2790 : 				(mfd_mode == MFD_MODE_DAMAGED) ||
; 2791 : 				(mfd_mode == MFD_MODE_GROUND_RADAR) ||

  001e6	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 1
  001ed	74 16		 je	 SHORT $LN13@draw_havoc
  001ef	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 2
  001f6	74 0d		 je	 SHORT $LN13@draw_havoc
  001f8	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 3
  001ff	0f 85 ef 02 00
	00		 jne	 $LN14@draw_havoc
$LN13@draw_havoc:

; 2792 : 				(mfd_mode == MFD_MODE_AIR_RADAR)
; 2793 : 			)
; 2794 : 			{
; 2795 : 				vertex
; 2796 : 					quad[4];
; 2797 : 
; 2798 : 				real_colour
; 2799 : 					colour,
; 2800 : 					specular;
; 2801 : 
; 2802 : 				float
; 2803 : 					x_min,
; 2804 : 					y_min,
; 2805 : 					x_max,
; 2806 : 					y_max;
; 2807 : 
; 2808 : 				if (begin_3d_scene ())

  00205	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0020a	85 c0		 test	 eax, eax
  0020c	0f 84 e2 02 00
	00		 je	 $LN14@draw_havoc

; 2809 : 				{
; 2810 : 					colour.red = 0;

  00212	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp+2], 0

; 2811 : 					colour.green = 0;

  00219	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp+1], 0

; 2812 : 					colour.blue = 0;

  00220	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp], 0

; 2813 : 					colour.alpha = 64;

  00227	c6 85 ff fe ff
	ff 40		 mov	 BYTE PTR _colour$6[ebp+3], 64 ; 00000040H

; 2814 : 
; 2815 : 					specular.red = 0;

  0022e	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp+2], 0

; 2816 : 					specular.green = 0;

  00235	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp+1], 0

; 2817 : 					specular.blue = 0;

  0023c	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp], 0

; 2818 : 					specular.alpha = 255;

  00243	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _specular$5[ebp+3], 255 ; 000000ffH

; 2819 : 
; 2820 : 					set_d3d_transparency_on ();

  0024a	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 2821 : 
; 2822 : 					set_d3d_zbuffer_comparison (FALSE);

  0024f	6a 00		 push	 0
  00251	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 2823 : 
; 2824 : 					set_d3d_plain_renderstate ();

  00256	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 2825 : 
; 2826 : 					set_d3d_culling (FALSE);

  0025b	6a 00		 push	 0
  0025d	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 2827 : 
; 2828 : 					//
; 2829 : 					// match co-ordinates with small EO 3D display
; 2830 : 					//
; 2831 : 
; 2832 : 					x_min = mfd_viewport_x_min - 31.0;

  00262	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0026a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@403f000000000000
  00272	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00276	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _x_min$4[ebp], xmm0

; 2833 : 					y_min = mfd_viewport_y_min - 10.0;

  0027e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00286	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  0028e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00292	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _y_min$3[ebp], xmm0

; 2834 : 					x_max = x_min + 176.0;

  0029a	f3 0f 5a 85 f4
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$4[ebp]
  002a2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4066000000000000
  002aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ae	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _x_max$2[ebp], xmm0

; 2835 : 					y_max = y_min + 132.0;

  002b6	f3 0f 5a 85 f0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_min$3[ebp]
  002be	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4060800000000000
  002c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ca	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _y_max$1[ebp], xmm0

; 2836 : 
; 2837 : 					quad[0].i = x_min;

  002d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002d7	6b c8 00	 imul	 ecx, eax, 0
  002da	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$4[ebp]
  002e2	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+16], xmm0

; 2838 : 					quad[0].j = y_min;

  002eb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002f0	6b c8 00	 imul	 ecx, eax, 0
  002f3	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _y_min$3[ebp]
  002fb	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+20], xmm0

; 2839 : 					quad[0].z = 0.5;

  00304	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00309	6b c8 00	 imul	 ecx, eax, 0
  0030c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00314	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+8], xmm0

; 2840 : 					quad[0].q = 0.5;

  0031d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00322	6b c8 00	 imul	 ecx, eax, 0
  00325	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0032d	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+12], xmm0

; 2841 : 					quad[0].next_vertex = &quad[1];

  00336	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0033b	c1 e0 00	 shl	 eax, 0
  0033e	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$7[ebp+eax]
  00345	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0034a	6b c2 00	 imul	 eax, edx, 0
  0034d	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+eax+40], ecx

; 2842 : 
; 2843 : 					quad[1].i = x_max;

  00354	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00359	c1 e0 00	 shl	 eax, 0
  0035c	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$2[ebp]
  00364	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+16], xmm0

; 2844 : 					quad[1].j = y_min;

  0036d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00372	c1 e0 00	 shl	 eax, 0
  00375	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _y_min$3[ebp]
  0037d	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+20], xmm0

; 2845 : 					quad[1].z = 0.5;

  00386	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0038b	c1 e0 00	 shl	 eax, 0
  0038e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00396	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+8], xmm0

; 2846 : 					quad[1].q = 0.5;

  0039f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003a4	c1 e0 00	 shl	 eax, 0
  003a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003af	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+12], xmm0

; 2847 : 					quad[1].next_vertex = &quad[2];

  003b8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003bd	d1 e0		 shl	 eax, 1
  003bf	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$7[ebp+eax]
  003c6	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003cb	c1 e2 00	 shl	 edx, 0
  003ce	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+edx+40], ecx

; 2848 : 
; 2849 : 					quad[2].i = x_max;

  003d5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003da	d1 e0		 shl	 eax, 1
  003dc	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$2[ebp]
  003e4	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+16], xmm0

; 2850 : 					quad[2].j = y_max;

  003ed	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003f2	d1 e0		 shl	 eax, 1
  003f4	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _y_max$1[ebp]
  003fc	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+20], xmm0

; 2851 : 					quad[2].z = 0.5;

  00405	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0040a	d1 e0		 shl	 eax, 1
  0040c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00414	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+8], xmm0

; 2852 : 					quad[2].q = 0.5;

  0041d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00422	d1 e0		 shl	 eax, 1
  00424	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0042c	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+12], xmm0

; 2853 : 					quad[2].next_vertex = &quad[3];

  00435	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0043a	6b c8 03	 imul	 ecx, eax, 3
  0043d	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$7[ebp+ecx]
  00444	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00449	d1 e0		 shl	 eax, 1
  0044b	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+eax+40], edx

; 2854 : 
; 2855 : 					quad[3].i = x_min;

  00452	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00457	6b c8 03	 imul	 ecx, eax, 3
  0045a	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$4[ebp]
  00462	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+16], xmm0

; 2856 : 					quad[3].j = y_max;

  0046b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00470	6b c8 03	 imul	 ecx, eax, 3
  00473	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _y_max$1[ebp]
  0047b	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+20], xmm0

; 2857 : 					quad[3].z = 0.5;

  00484	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00489	6b c8 03	 imul	 ecx, eax, 3
  0048c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00494	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+8], xmm0

; 2858 : 					quad[3].q = 0.5;

  0049d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004a2	6b c8 03	 imul	 ecx, eax, 3
  004a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  004ad	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+12], xmm0

; 2859 : 					quad[3].next_vertex = NULL;

  004b6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004bb	6b c8 03	 imul	 ecx, eax, 3
  004be	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$7[ebp+ecx+40], 0

; 2860 : 
; 2861 : 					draw_wbuffered_plain_polygon (quad, colour, specular);

  004c9	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$5[ebp]
  004cf	50		 push	 eax
  004d0	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _colour$6[ebp]
  004d6	51		 push	 ecx
  004d7	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$7[ebp]
  004dd	52		 push	 edx
  004de	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 2862 : 
; 2863 : 					set_d3d_transparency_off ();

  004e3	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 2864 : 
; 2865 : 					set_d3d_zbuffer_comparison (TRUE);

  004e8	6a 01		 push	 1
  004ea	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 2866 : 
; 2867 : 					end_3d_scene ();

  004ef	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN14@draw_havoc:

; 2868 : 				}
; 2869 : 			}
; 2870 : 		}
; 2871 : 	}
; 2872 : 
; 2873 : 	////////////////////////////////////////
; 2874 : 	//
; 2875 : 	// draw MFD
; 2876 : 	//
; 2877 : 	////////////////////////////////////////
; 2878 : 
; 2879 : 	switch (mfd_mode)

  004f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A
  004f9	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv226[ebp], eax
  004ff	83 bd a4 fe ff
	ff 07		 cmp	 DWORD PTR tv226[ebp], 7
  00506	0f 87 05 01 00
	00		 ja	 $LN2@draw_havoc
  0050c	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv226[ebp]
  00512	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN28@draw_havoc[ecx*4]
$LN15@draw_havoc:

; 2880 : 	{
; 2881 : 		////////////////////////////////////////
; 2882 : 		case MFD_MODE_OFF:
; 2883 : 		////////////////////////////////////////
; 2884 : 		{
; 2885 : 			if (lock_screen (active_screen))

  00519	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0051e	50		 push	 eax
  0051f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00524	85 c0		 test	 eax, eax
  00526	74 10		 je	 SHORT $LN16@draw_havoc

; 2886 : 			{
; 2887 : 				draw_layout_grid ();

  00528	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 2888 : 
; 2889 : 				unlock_screen (active_screen);

  0052d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00532	50		 push	 eax
  00533	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN16@draw_havoc:

; 2890 : 			}
; 2891 : 
; 2892 : 			break;

  00538	e9 d4 00 00 00	 jmp	 $LN2@draw_havoc
$LN17@draw_havoc:

; 2893 : 		}
; 2894 : 		////////////////////////////////////////
; 2895 : 		case MFD_MODE_DAMAGED:
; 2896 : 		////////////////////////////////////////
; 2897 : 		{
; 2898 : 			if (lock_screen (active_screen))

  0053d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00542	50		 push	 eax
  00543	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00548	85 c0		 test	 eax, eax
  0054a	74 15		 je	 SHORT $LN18@draw_havoc

; 2899 : 			{
; 2900 : 				draw_layout_grid ();

  0054c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 2901 : 
; 2902 : 				draw_damaged_mfd ();

  00551	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 2903 : 
; 2904 : 				unlock_screen (active_screen);

  00556	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0055b	50		 push	 eax
  0055c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN18@draw_havoc:

; 2905 : 			}
; 2906 : 
; 2907 : 			break;

  00561	e9 ab 00 00 00	 jmp	 $LN2@draw_havoc
$LN19@draw_havoc:

; 2908 : 		}
; 2909 : 		////////////////////////////////////////
; 2910 : 		case MFD_MODE_GROUND_RADAR:
; 2911 : 		////////////////////////////////////////
; 2912 : 		{
; 2913 : 			if (lock_screen (active_screen))

  00566	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0056b	50		 push	 eax
  0056c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00571	85 c0		 test	 eax, eax
  00573	74 15		 je	 SHORT $LN20@draw_havoc

; 2914 : 			{
; 2915 : 				draw_layout_grid ();

  00575	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 2916 : 
; 2917 : 				draw_ground_radar_mfd ();

  0057a	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 2918 : 
; 2919 : 				unlock_screen (active_screen);

  0057f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00584	50		 push	 eax
  00585	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN20@draw_havoc:

; 2920 : 			}
; 2921 : 
; 2922 : 			break;

  0058a	e9 82 00 00 00	 jmp	 $LN2@draw_havoc
$LN21@draw_havoc:

; 2923 : 		}
; 2924 : 		////////////////////////////////////////
; 2925 : 		case MFD_MODE_AIR_RADAR:
; 2926 : 		////////////////////////////////////////
; 2927 : 		{
; 2928 : 			if (lock_screen (active_screen))

  0058f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00594	50		 push	 eax
  00595	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0059a	85 c0		 test	 eax, eax
  0059c	74 15		 je	 SHORT $LN22@draw_havoc

; 2929 : 			{
; 2930 : 				draw_layout_grid ();

  0059e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 2931 : 
; 2932 : 				draw_air_radar_mfd ();

  005a3	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 2933 : 
; 2934 : 				unlock_screen (active_screen);

  005a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005ad	50		 push	 eax
  005ae	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN22@draw_havoc:

; 2935 : 			}
; 2936 : 
; 2937 : 			break;

  005b3	eb 5c		 jmp	 SHORT $LN2@draw_havoc
$LN23@draw_havoc:

; 2938 : 		}
; 2939 : 		////////////////////////////////////////
; 2940 : 		case MFD_MODE_FLIR:
; 2941 : 		////////////////////////////////////////
; 2942 : 		{
; 2943 : 			draw_3d_flir_mfd ();

  005b5	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXXZ ; draw_3d_flir_mfd

; 2944 : 
; 2945 : 			if (lock_screen (active_screen))

  005ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005bf	50		 push	 eax
  005c0	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005c5	85 c0		 test	 eax, eax
  005c7	74 19		 je	 SHORT $LN24@draw_havoc

; 2946 : 			{
; 2947 : 				draw_layout_grid ();

  005c9	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 2948 : 
; 2949 : 				draw_2d_flir_mfd (TRUE, FALSE);

  005ce	6a 00		 push	 0
  005d0	6a 01		 push	 1
  005d2	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 2950 : 
; 2951 : 				unlock_screen (active_screen);

  005d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005dc	50		 push	 eax
  005dd	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN24@draw_havoc:

; 2952 : 			}
; 2953 : 
; 2954 : 			break;

  005e2	eb 2d		 jmp	 SHORT $LN2@draw_havoc
$LN25@draw_havoc:

; 2955 : 		}
; 2956 : 		////////////////////////////////////////
; 2957 : 		case MFD_MODE_LLLTV:
; 2958 : 		////////////////////////////////////////
; 2959 : 		{
; 2960 : 			draw_3d_llltv_mfd ();

  005e4	e8 00 00 00 00	 call	 ?draw_3d_llltv_mfd@@YGXXZ ; draw_3d_llltv_mfd

; 2961 : 
; 2962 : 			if (lock_screen (active_screen))

  005e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005ee	50		 push	 eax
  005ef	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005f4	85 c0		 test	 eax, eax
  005f6	74 19		 je	 SHORT $LN26@draw_havoc

; 2963 : 			{
; 2964 : 				draw_layout_grid ();

  005f8	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 2965 : 
; 2966 : 				draw_2d_llltv_mfd (TRUE, FALSE);

  005fd	6a 00		 push	 0
  005ff	6a 01		 push	 1
  00601	e8 00 00 00 00	 call	 ?draw_2d_llltv_mfd@@YGXHH@Z ; draw_2d_llltv_mfd

; 2967 : 
; 2968 : 				unlock_screen (active_screen);

  00606	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0060b	50		 push	 eax
  0060c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN26@draw_havoc:
$LN2@draw_havoc:

; 2969 : 			}
; 2970 : 
; 2971 : 			break;
; 2972 : 		}
; 2973 : 	}
; 2974 : }

  00611	5f		 pop	 edi
  00612	5e		 pop	 esi
  00613	5b		 pop	 ebx
  00614	8b e5		 mov	 esp, ebp
  00616	5d		 pop	 ebp
  00617	c2 10 00	 ret	 16			; 00000010H
  0061a	66 90		 npad	 2
$LN28@draw_havoc:
  0061c	00 00 00 00	 DD	 $LN15@draw_havoc
  00620	00 00 00 00	 DD	 $LN17@draw_havoc
  00624	00 00 00 00	 DD	 $LN19@draw_havoc
  00628	00 00 00 00	 DD	 $LN21@draw_havoc
  0062c	00 00 00 00	 DD	 $LN23@draw_havoc
  00630	00 00 00 00	 DD	 $LN2@draw_havoc
  00634	00 00 00 00	 DD	 $LN2@draw_havoc
  00638	00 00 00 00	 DD	 $LN25@draw_havoc
?draw_havoc_mfd_on_cockpit@@YGXMMHH@Z ENDP		; draw_havoc_mfd_on_cockpit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?get_havoc_mfd_mode@@YG?AW4MFD_MODES@@XZ
_TEXT	SEGMENT
?get_havoc_mfd_mode@@YG?AW4MFD_MODES@@XZ PROC		; get_havoc_mfd_mode, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 226  : 	return mfd_mode;	

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A

; 227  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?get_havoc_mfd_mode@@YG?AW4MFD_MODES@@XZ ENDP		; get_havoc_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?select_next_havoc_mfd_mode@@YGXXZ
_TEXT	SEGMENT
tv64 = -68						; size = 4
?select_next_havoc_mfd_mode@@YGXXZ PROC			; select_next_havoc_mfd_mode, COMDAT

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 235  : 	switch (mfd_mode)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A
  0000e	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  00011	83 7d bc 07	 cmp	 DWORD PTR tv64[ebp], 7
  00015	77 73		 ja	 SHORT $LN14@select_nex
  00017	8b 4d bc	 mov	 ecx, DWORD PTR tv64[ebp]
  0001a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN16@select_nex[ecx*4]
$LN4@select_nex:

; 236  : 	{
; 237  : 	case MFD_MODE_OFF:
; 238  : 		if (!havoc_damage.tv_display)

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00026	c1 e8 12	 shr	 eax, 18			; 00000012H
  00029	83 e0 01	 and	 eax, 1
  0002c	75 0c		 jne	 SHORT $LN5@select_nex

; 239  : 			mfd_mode = MFD_MODE_LLLTV;

  0002e	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 7

; 240  : 		else

  00038	eb 0a		 jmp	 SHORT $LN6@select_nex
$LN5@select_nex:

; 241  : 			mfd_mode = MFD_MODE_DAMAGED;

  0003a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 1
$LN6@select_nex:

; 242  : 		break;

  00044	eb 57		 jmp	 SHORT $LN1@select_nex
$LN7@select_nex:

; 243  : 
; 244  : 	case MFD_MODE_DAMAGED:
; 245  : 		// do nothing
; 246  : 		break;

  00046	eb 55		 jmp	 SHORT $LN1@select_nex
$LN8@select_nex:

; 247  : 
; 248  : 	case MFD_MODE_GROUND_RADAR:
; 249  : 	case MFD_MODE_AIR_RADAR:
; 250  : 		mfd_mode = MFD_MODE_LLLTV;

  00048	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 7

; 251  : 		break;

  00052	eb 49		 jmp	 SHORT $LN1@select_nex
$LN9@select_nex:

; 252  : 
; 253  : 	case MFD_MODE_FLIR:
; 254  : 		if (air_radar_is_active() || (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR))

  00054	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  00059	85 c0		 test	 eax, eax
  0005b	75 09		 jne	 SHORT $LN12@select_nex
  0005d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  00064	75 0c		 jne	 SHORT $LN10@select_nex
$LN12@select_nex:

; 255  : 			mfd_mode = MFD_MODE_AIR_RADAR;

  00066	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 3

; 256  : 		else

  00070	eb 0a		 jmp	 SHORT $LN11@select_nex
$LN10@select_nex:

; 257  : 			mfd_mode = MFD_MODE_GROUND_RADAR;

  00072	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 2
$LN11@select_nex:

; 258  : 		break;

  0007c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN13@select_nex:

; 259  : 
; 260  : 	case MFD_MODE_LLLTV:
; 261  : 		mfd_mode = MFD_MODE_FLIR;

  0007e	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 4

; 262  : 		break;

  00088	eb 13		 jmp	 SHORT $LN1@select_nex
$LN14@select_nex:

; 263  : 
; 264  : 	default:
; 265  : 		debug_fatal ("Invalid mfd mode = %d", mfd_mode);

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
  00095	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0009a	83 c4 08	 add	 esp, 8
$LN1@select_nex:

; 266  : 		break;
; 267  : 	}
; 268  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
$LN16@select_nex:
  000a4	00 00 00 00	 DD	 $LN4@select_nex
  000a8	00 00 00 00	 DD	 $LN7@select_nex
  000ac	00 00 00 00	 DD	 $LN8@select_nex
  000b0	00 00 00 00	 DD	 $LN8@select_nex
  000b4	00 00 00 00	 DD	 $LN9@select_nex
  000b8	00 00 00 00	 DD	 $LN14@select_nex
  000bc	00 00 00 00	 DD	 $LN14@select_nex
  000c0	00 00 00 00	 DD	 $LN13@select_nex
?select_next_havoc_mfd_mode@@YGXXZ ENDP			; select_next_havoc_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?select_havoc_mfd_mode@@YGXW4MFD_MODES@@@Z
_TEXT	SEGMENT
tv64 = -68						; size = 4
_mode$ = 8						; size = 4
?select_havoc_mfd_mode@@YGXW4MFD_MODES@@@Z PROC		; select_havoc_mfd_mode, COMDAT

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 276  : 	switch (mode)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d bc 07	 cmp	 DWORD PTR tv64[ebp], 7
  00013	77 46		 ja	 SHORT $LN10@select_hav
  00015	8b 4d bc	 mov	 ecx, DWORD PTR tv64[ebp]
  00018	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN12@select_hav[ecx*4]
$LN4@select_hav:

; 277  : 	{
; 278  : 		////////////////////////////////////////
; 279  : 		case MFD_MODE_OFF:
; 280  : 		////////////////////////////////////////
; 281  : 		{
; 282  : 			mfd_mode = mode;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  00022	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, eax

; 283  : 
; 284  : 			break;

  00027	eb 43		 jmp	 SHORT $LN1@select_hav
$LN5@select_hav:

; 285  : 		}
; 286  : 		////////////////////////////////////////
; 287  : 		case MFD_MODE_DAMAGED:
; 288  : 		////////////////////////////////////////
; 289  : 		{
; 290  : 			mfd_mode = mode;

  00029	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  0002c	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, eax

; 291  : 
; 292  : 			break;

  00031	eb 39		 jmp	 SHORT $LN1@select_hav
$LN6@select_hav:

; 293  : 		}
; 294  : 		////////////////////////////////////////
; 295  : 		case MFD_MODE_GROUND_RADAR:
; 296  : 		////////////////////////////////////////
; 297  : 		{
; 298  : 			mfd_mode = mode;

  00033	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, eax

; 299  : 
; 300  : 			break;

  0003b	eb 2f		 jmp	 SHORT $LN1@select_hav
$LN7@select_hav:

; 301  : 		}
; 302  : 		////////////////////////////////////////
; 303  : 		case MFD_MODE_AIR_RADAR:
; 304  : 		////////////////////////////////////////
; 305  : 		{
; 306  : 			mfd_mode = mode;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  00040	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, eax

; 307  : 
; 308  : 			break;

  00045	eb 25		 jmp	 SHORT $LN1@select_hav
$LN8@select_hav:

; 309  : 		}
; 310  : 		////////////////////////////////////////
; 311  : 		case MFD_MODE_FLIR:
; 312  : 		////////////////////////////////////////
; 313  : 		{
; 314  : 			mfd_mode = mode;

  00047	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, eax

; 315  : 
; 316  : 			break;

  0004f	eb 1b		 jmp	 SHORT $LN1@select_hav
$LN9@select_hav:

; 317  : 		}
; 318  : 		////////////////////////////////////////
; 319  : 		case MFD_MODE_LLLTV:
; 320  : 		////////////////////////////////////////
; 321  : 		{
; 322  : 			mfd_mode = mode;

  00051	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  00054	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, eax

; 323  : 
; 324  : 			break;

  00059	eb 11		 jmp	 SHORT $LN1@select_hav
$LN10@select_hav:

; 325  : 		}
; 326  : 		////////////////////////////////////////
; 327  : 		default:
; 328  : 		////////////////////////////////////////
; 329  : 		{
; 330  : 			debug_fatal ("Invalid mfd mode = %d", mode);

  0005b	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
  00064	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00069	83 c4 08	 add	 esp, 8
$LN1@select_hav:

; 331  : 
; 332  : 			break;
; 333  : 		}
; 334  : 	}
; 335  : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
  00075	0f 1f 00	 npad	 3
$LN12@select_hav:
  00078	00 00 00 00	 DD	 $LN4@select_hav
  0007c	00 00 00 00	 DD	 $LN5@select_hav
  00080	00 00 00 00	 DD	 $LN6@select_hav
  00084	00 00 00 00	 DD	 $LN7@select_hav
  00088	00 00 00 00	 DD	 $LN8@select_hav
  0008c	00 00 00 00	 DD	 $LN10@select_hav
  00090	00 00 00 00	 DD	 $LN10@select_hav
  00094	00 00 00 00	 DD	 $LN9@select_hav
?select_havoc_mfd_mode@@YGXW4MFD_MODES@@@Z ENDP		; select_havoc_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?deinitialise_havoc_mfd@@YGXXZ
_TEXT	SEGMENT
?deinitialise_havoc_mfd@@YGXXZ PROC			; deinitialise_havoc_mfd, COMDAT

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 213  : 	destroy_2d_environment (mfd_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 214  : 
; 215  : 	destroy_screen (mfd_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 216  : 
; 217  : 	destroy_screen (overlaid_mfd_texture_screen);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 218  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?deinitialise_havoc_mfd@@YGXXZ ENDP			; deinitialise_havoc_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_mfd.c
;	COMDAT ?initialise_havoc_mfd@@YGXXZ
_TEXT	SEGMENT
?initialise_havoc_mfd@@YGXXZ PROC			; initialise_havoc_mfd, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 157  : 	mfd_mode = MFD_MODE_OFF;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mfd_mode@@3W4MFD_MODES@@A, 0

; 158  : 
; 159  : 	mfd_env = create_2d_environment ();

  00013	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_env@@3PAUENV_2D@@A, eax

; 160  : 
; 161  : 	if (command_line_high_res_mfd)

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_high_res_mfd@@3HA, 0 ; command_line_high_res_mfd
  00024	74 30		 je	 SHORT $LN2@initialise

; 162  : 	{
; 163  : 		draw_large_mfd = TRUE;

  00026	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 164  : 		
; 165  : 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43520000
  00038	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 166  : 		mfd_texture_size = MFD_LARGE_TEXTURE_SIZE;

  00040	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?mfd_texture_size@@3HA, 256 ; 00000100H

; 167  : 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  0004f	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 168  : 	}
; 169  : 	else

  00054	eb 2e		 jmp	 SHORT $LN3@initialise
$LN2@initialise:

; 170  : 	{
; 171  : 		draw_large_mfd = FALSE;

  00056	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0

; 172  : 
; 173  : 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  00060	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42e40000
  00068	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 174  : 		mfd_texture_size = MFD_SMALL_TEXTURE_SIZE;

  00070	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?mfd_texture_size@@3HA, 128 ; 00000080H

; 175  : 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  0007f	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax
$LN3@initialise:

; 176  : 	}
; 177  : 
; 178  : 	mfd_viewport_texture_x_org = mfd_texture_size / 2;		

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00089	99		 cdq
  0008a	2b c2		 sub	 eax, edx
  0008c	d1 f8		 sar	 eax, 1
  0008e	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_viewport_texture_x_org@@3HA, eax

; 179  : 	mfd_viewport_texture_y_org = mfd_texture_size / 2;

  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00098	99		 cdq
  00099	2b c2		 sub	 eax, edx
  0009b	d1 f8		 sar	 eax, 1
  0009d	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_viewport_texture_y_org@@3HA, eax

; 180  : 
; 181  : 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  000a2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  000aa	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  000b2	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000ba	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000c2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 182  : 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  000ca	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  000d2	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  000da	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000e2	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000e6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ea	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 183  : 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  000f2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  000fa	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00102	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0010a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0010e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00116	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 184  : 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  00122	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  0012a	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00132	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0013a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0013e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00146	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0014a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 185  : 
; 186  : 	mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, TEXTURE_INDEX_HVCKPT_DISPLAY_CRT, TEXTURE_TYPE_SINGLEALPHA);

  00152	6a 02		 push	 2
  00154	68 e3 06 00 00	 push	 1763			; 000006e3H
  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  0015e	50		 push	 eax
  0015f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00165	51		 push	 ecx
  00166	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  0016b	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_texture_screen@@3PAUSCREEN@@A, eax

; 187  : 
; 188  : 	overlaid_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, OVERLAID_MFD_TEXTURE_INDEX, TEXTURE_TYPE_SINGLEALPHA);

  00170	6a 02		 push	 2
  00172	68 54 06 00 00	 push	 1620			; 00000654H
  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  0017c	50		 push	 eax
  0017d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00189	a3 00 00 00 00	 mov	 DWORD PTR ?overlaid_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 189  : 
; 190  : 	set_rgb_colour (MFD_COLOUR1, 255, 160,   0, 255);

  0018e	b8 04 00 00 00	 mov	 eax, 4
  00193	6b c8 00	 imul	 ecx, eax, 0
  00196	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0019d	b8 04 00 00 00	 mov	 eax, 4
  001a2	6b c8 00	 imul	 ecx, eax, 0
  001a5	c6 81 01 00 00
	00 a0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 160 ; 000000a0H
  001ac	b8 04 00 00 00	 mov	 eax, 4
  001b1	6b c8 00	 imul	 ecx, eax, 0
  001b4	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  001bb	b8 04 00 00 00	 mov	 eax, 4
  001c0	6b c8 00	 imul	 ecx, eax, 0
  001c3	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 191  : 	set_rgb_colour (MFD_COLOUR2, 200, 130,   0, 255);

  001ca	b8 04 00 00 00	 mov	 eax, 4
  001cf	c1 e0 00	 shl	 eax, 0
  001d2	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  001d9	b8 04 00 00 00	 mov	 eax, 4
  001de	c1 e0 00	 shl	 eax, 0
  001e1	c6 80 01 00 00
	00 82		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 130 ; 00000082H
  001e8	b8 04 00 00 00	 mov	 eax, 4
  001ed	c1 e0 00	 shl	 eax, 0
  001f0	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  001f7	b8 04 00 00 00	 mov	 eax, 4
  001fc	c1 e0 00	 shl	 eax, 0
  001ff	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 192  : 	set_rgb_colour (MFD_COLOUR3, 176, 126,   0, 255);

  00206	b8 04 00 00 00	 mov	 eax, 4
  0020b	d1 e0		 shl	 eax, 1
  0020d	c6 80 02 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 176 ; 000000b0H
  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	d1 e0		 shl	 eax, 1
  0021b	c6 80 01 00 00
	00 7e		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 126 ; 0000007eH
  00222	b8 04 00 00 00	 mov	 eax, 4
  00227	d1 e0		 shl	 eax, 1
  00229	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00230	b8 04 00 00 00	 mov	 eax, 4
  00235	d1 e0		 shl	 eax, 1
  00237	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 193  : 	set_rgb_colour (MFD_COLOUR4, 151, 100,   0, 255);

  0023e	b8 04 00 00 00	 mov	 eax, 4
  00243	6b c8 03	 imul	 ecx, eax, 3
  00246	c6 81 02 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 151 ; 00000097H
  0024d	b8 04 00 00 00	 mov	 eax, 4
  00252	6b c8 03	 imul	 ecx, eax, 3
  00255	c6 81 01 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 100 ; 00000064H
  0025c	b8 04 00 00 00	 mov	 eax, 4
  00261	6b c8 03	 imul	 ecx, eax, 3
  00264	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0026b	b8 04 00 00 00	 mov	 eax, 4
  00270	6b c8 03	 imul	 ecx, eax, 3
  00273	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 194  : 	set_rgb_colour (MFD_COLOUR5, 140,  90,   0, 255);

  0027a	b8 04 00 00 00	 mov	 eax, 4
  0027f	c1 e0 02	 shl	 eax, 2
  00282	c6 80 02 00 00
	00 8c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 140 ; 0000008cH
  00289	b8 04 00 00 00	 mov	 eax, 4
  0028e	c1 e0 02	 shl	 eax, 2
  00291	c6 80 01 00 00
	00 5a		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 90 ; 0000005aH
  00298	b8 04 00 00 00	 mov	 eax, 4
  0029d	c1 e0 02	 shl	 eax, 2
  002a0	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  002a7	b8 04 00 00 00	 mov	 eax, 4
  002ac	c1 e0 02	 shl	 eax, 2
  002af	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 195  : 	set_rgb_colour (MFD_COLOUR6,  80,  62,   8, 255);

  002b6	b8 04 00 00 00	 mov	 eax, 4
  002bb	6b c8 05	 imul	 ecx, eax, 5
  002be	c6 81 02 00 00
	00 50		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 80 ; 00000050H
  002c5	b8 04 00 00 00	 mov	 eax, 4
  002ca	6b c8 05	 imul	 ecx, eax, 5
  002cd	c6 81 01 00 00
	00 3e		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 62 ; 0000003eH
  002d4	b8 04 00 00 00	 mov	 eax, 4
  002d9	6b c8 05	 imul	 ecx, eax, 5
  002dc	c6 81 00 00 00
	00 08		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 8
  002e3	b8 04 00 00 00	 mov	 eax, 4
  002e8	6b c8 05	 imul	 ecx, eax, 5
  002eb	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 196  : 
; 197  : 	if(command_line_export_mfd)

  002f2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  002f9	74 1e		 je	 SHORT $LN4@initialise

; 198  : 	{
; 199  : 		set_rgb_colour (clear_mfd_colour,  80,  62,   8, 0);

  002fb	c6 05 02 00 00
	00 50		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+2, 80 ; 00000050H
  00302	c6 05 01 00 00
	00 3e		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+1, 62 ; 0000003eH
  00309	c6 05 00 00 00
	00 08		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, 8
  00310	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+3, 0

; 200  : 	}
; 201  : 	else

  00317	eb 1c		 jmp	 SHORT $LN5@initialise
$LN4@initialise:

; 202  : 	{
; 203  : 		set_rgb_colour (clear_mfd_colour, 255, 255, 0, 0);

  00319	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  00320	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  00327	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, 0
  0032e	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+3, 0
$LN5@initialise:

; 204  : 	}
; 205  : }

  00335	5f		 pop	 edi
  00336	5e		 pop	 esi
  00337	5b		 pop	 ebx
  00338	8b e5		 mov	 esp, ebp
  0033a	5d		 pop	 ebp
  0033b	c3		 ret	 0
?initialise_havoc_mfd@@YGXXZ ENDP			; initialise_havoc_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
