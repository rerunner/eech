; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\line.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z		; draw_line
PUBLIC	?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z	; draw_half_thick_line
PUBLIC	?draw_thick_line@@YGXMMMMUREAL_COLOUR@@M@Z	; draw_thick_line
PUBLIC	?clip_line@@YGHPAM000@Z				; clip_line
PUBLIC	?generate_outcode@@YGHMM@Z			; generate_outcode
PUBLIC	?draw_arrow@@YGXMMMMMMUREAL_COLOUR@@@Z		; draw_arrow
PUBLIC	?__LINE__Var@?0??draw_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA ; `draw_line'::`1'::__LINE__Var
PUBLIC	??_C@_0DF@PIKNMACE@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0O@IILHNAKB@active_screen@		; `string'
PUBLIC	?__LINE__Var@?0??draw_thick_line@@YGXMMMMUREAL_COLOUR@@M@Z@4JA ; `draw_thick_line'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA ; `draw_half_thick_line'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@ ; `string'
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3ff199999999999a
PUBLIC	__real@40000000
PUBLIC	__real@4000cccccccccccd
PUBLIC	__real@41200000
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_any_3d_vector
EXTRN	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z:PROC	; clip_3d_polygon
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_screen_locked@@YGHPAUSCREEN@@@Z:PROC	; get_screen_locked
EXTRN	?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z:PROC ; draw_line_primitive
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?set_d3d_texture_stage_state@@YGXHHH@Z:PROC	; set_d3d_texture_stage_state
EXTRN	?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ:PROC ; get_d3d_line_vertices_points_address
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?d3d_in_3d_scene@@3HA:DWORD			; d3d_in_3d_scene
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?active_int_viewport@@3UINT_VIEWPORT@@A:BYTE	; active_int_viewport
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?active_screen_red_mask@@3HA:DWORD		; active_screen_red_mask
EXTRN	?active_screen_red_shift@@3HA:DWORD		; active_screen_red_shift
EXTRN	?active_screen_green_mask@@3HA:DWORD		; active_screen_green_mask
EXTRN	?active_screen_green_shift@@3HA:DWORD		; active_screen_green_shift
EXTRN	?active_screen_blue_mask@@3HA:DWORD		; active_screen_blue_mask
EXTRN	?active_screen_blue_shift@@3HA:DWORD		; active_screen_blue_shift
EXTRN	?active_screen_alpha_mask@@3HA:DWORD		; active_screen_alpha_mask
EXTRN	?active_screen_alpha_shift@@3HA:DWORD		; active_screen_alpha_shift
EXTRN	?d3d_fog_intensity@@3KA:DWORD			; d3d_fog_intensity
EXTRN	?zbuffer_constant@@3NA:QWORD			; zbuffer_constant
EXTRN	?zbuffer_constant_elevated_bias@@3NA:QWORD	; zbuffer_constant_elevated_bias
EXTRN	?zbuffer_constant_normal_bias@@3NA:QWORD	; zbuffer_constant_normal_bias
EXTRN	__fltused:DWORD
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@4000cccccccccccd
CONST	SEGMENT
__real@4000cccccccccccd DQ 04000cccccccccccdr	; 2.1
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff199999999999a
CONST	SEGMENT
__real@3ff199999999999a DQ 03ff199999999999ar	; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT ??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@
CONST	SEGMENT
??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@ DB 'get_screen_l'
	DB	'ocked ( active_screen )', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA DD 02cfH ; `draw_half_thick_line'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_thick_line@@YGXMMMMUREAL_COLOUR@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_thick_line@@YGXMMMMUREAL_COLOUR@@M@Z@4JA DD 0269H ; `draw_thick_line'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0O@IILHNAKB@active_screen@
CONST	SEGMENT
??_C@_0O@IILHNAKB@active_screen@ DB 'active_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@PIKNMACE@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DF@PIKNMACE@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\line.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA DD 058H ; `draw_line'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\line.c
;	COMDAT ?clip_line_bottom@@YGXPAM000@Z
_TEXT	SEGMENT
_t$ = -12						; size = 4
_denominator$ = -8					; size = 4
_numerator$ = -4					; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?clip_line_bottom@@YGXPAM000@Z PROC			; clip_line_bottom, COMDAT

; 1450 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1451 : 	float
; 1452 : 		numerator,
; 1453 : 		denominator,
; 1454 : 		t;
; 1455 : 
; 1456 : 	numerator = active_viewport.y_max - *y2;

  00009	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  0000c	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00014	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00018	f3 0f 11 45 fc	 movss	 DWORD PTR _numerator$[ebp], xmm0

; 1457 : 
; 1458 : 	denominator = *y2 - *y1;

  0001d	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _y1$[ebp]
  00023	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00027	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0002b	f3 0f 11 45 f8	 movss	 DWORD PTR _denominator$[ebp], xmm0

; 1459 : 
; 1460 : 	t = numerator / denominator;

  00030	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _numerator$[ebp]
  00035	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _denominator$[ebp]
  0003a	f3 0f 11 45 f4	 movss	 DWORD PTR _t$[ebp], xmm0

; 1461 : 
; 1462 : 	*x1 = *x2 + ( t * ( *x2 - *x1 ) );

  0003f	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  00045	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00049	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0004d	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00052	8b 55 10	 mov	 edx, DWORD PTR _x2$[ebp]
  00055	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00059	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  0005c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1463 : 
; 1464 : 	*y1 = active_viewport.y_max;

  00060	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  00063	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  0006b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1465 : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 10 00	 ret	 16			; 00000010H
?clip_line_bottom@@YGXPAM000@Z ENDP			; clip_line_bottom
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\line.c
;	COMDAT ?clip_line_top@@YGXPAM000@Z
_TEXT	SEGMENT
_t$ = -12						; size = 4
_denominator$ = -8					; size = 4
_numerator$ = -4					; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?clip_line_top@@YGXPAM000@Z PROC			; clip_line_top, COMDAT

; 1427 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1428 : 
; 1429 : 	float
; 1430 : 		numerator,
; 1431 : 		denominator,
; 1432 : 		t;
; 1433 : 
; 1434 : 	numerator = active_viewport.y_min - *y2;

  00009	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  0000c	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00014	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00018	f3 0f 11 45 fc	 movss	 DWORD PTR _numerator$[ebp], xmm0

; 1435 : 
; 1436 : 	denominator = *y2 - *y1;

  0001d	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _y1$[ebp]
  00023	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00027	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0002b	f3 0f 11 45 f8	 movss	 DWORD PTR _denominator$[ebp], xmm0

; 1437 : 
; 1438 : 	t = numerator / denominator;

  00030	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _numerator$[ebp]
  00035	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _denominator$[ebp]
  0003a	f3 0f 11 45 f4	 movss	 DWORD PTR _t$[ebp], xmm0

; 1439 : 
; 1440 : 	*x1 = *x2 + ( t * ( *x2 - *x1 ) );

  0003f	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  00045	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00049	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0004d	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00052	8b 55 10	 mov	 edx, DWORD PTR _x2$[ebp]
  00055	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00059	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  0005c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1441 : 
; 1442 : 	*y1 = active_viewport.y_min;

  00060	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  00063	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0006b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1443 : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 10 00	 ret	 16			; 00000010H
?clip_line_top@@YGXPAM000@Z ENDP			; clip_line_top
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\line.c
;	COMDAT ?clip_line_right@@YGXPAM000@Z
_TEXT	SEGMENT
_t$ = -12						; size = 4
_denominator$ = -8					; size = 4
_numerator$ = -4					; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?clip_line_right@@YGXPAM000@Z PROC			; clip_line_right, COMDAT

; 1404 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1405 : 
; 1406 : 	float
; 1407 : 		numerator,
; 1408 : 		denominator,
; 1409 : 		t;
; 1410 : 
; 1411 : 	numerator = active_viewport.x_max - *x2;

  00009	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  0000c	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00014	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00018	f3 0f 11 45 fc	 movss	 DWORD PTR _numerator$[ebp], xmm0

; 1412 : 
; 1413 : 	denominator = *x2 - *x1;

  0001d	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  00023	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00027	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0002b	f3 0f 11 45 f8	 movss	 DWORD PTR _denominator$[ebp], xmm0

; 1414 : 
; 1415 : 	t = numerator / denominator;

  00030	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _numerator$[ebp]
  00035	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _denominator$[ebp]
  0003a	f3 0f 11 45 f4	 movss	 DWORD PTR _t$[ebp], xmm0

; 1416 : 
; 1417 : 	*x1 = active_viewport.x_max;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00042	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0004a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1418 : 
; 1419 : 	*y1 = *y2 + ( t * ( *y2 - *y1 ) );

  0004e	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _y1$[ebp]
  00054	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00058	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0005c	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00061	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  00064	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00068	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  0006b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1420 : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 10 00	 ret	 16			; 00000010H
?clip_line_right@@YGXPAM000@Z ENDP			; clip_line_right
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\line.c
;	COMDAT ?clip_line_left@@YGXPAM000@Z
_TEXT	SEGMENT
_t$ = -12						; size = 4
_denominator$ = -8					; size = 4
_numerator$ = -4					; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?clip_line_left@@YGXPAM000@Z PROC			; clip_line_left, COMDAT

; 1381 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1382 : 
; 1383 : 	float
; 1384 : 		numerator,
; 1385 : 		denominator,
; 1386 : 		t;
; 1387 : 
; 1388 : 	numerator = active_viewport.x_min - *x2;

  00009	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00014	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00018	f3 0f 11 45 fc	 movss	 DWORD PTR _numerator$[ebp], xmm0

; 1389 : 
; 1390 : 	denominator = *x2 - *x1;

  0001d	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  00023	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00027	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0002b	f3 0f 11 45 f8	 movss	 DWORD PTR _denominator$[ebp], xmm0

; 1391 : 
; 1392 : 	t = numerator / denominator;

  00030	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _numerator$[ebp]
  00035	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _denominator$[ebp]
  0003a	f3 0f 11 45 f4	 movss	 DWORD PTR _t$[ebp], xmm0

; 1393 : 
; 1394 : 	*x1 = active_viewport.x_min;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0004a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1395 : 
; 1396 : 	*y1 = *y2 + ( t * ( *y2 - *y1 ) );

  0004e	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _y1$[ebp]
  00054	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00058	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0005c	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00061	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  00064	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00068	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  0006b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1397 : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 10 00	 ret	 16			; 00000010H
?clip_line_left@@YGXPAM000@Z ENDP			; clip_line_left
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\line.c
;	COMDAT ?draw_arrow@@YGXMMMMMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_centre_x$ = 8						; size = 4
_centre_y$ = 12						; size = 4
_dot_x$ = 16						; size = 4
_dot_y$ = 20						; size = 4
_scale_x$ = 24						; size = 4
_scale_y$ = 28						; size = 4
_colour$ = 32						; size = 4
?draw_arrow@@YGXMMMMMMUREAL_COLOUR@@@Z PROC		; draw_arrow, COMDAT

; 1515 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1516 : 	draw_line (centre_x, centre_y, dot_x, dot_y, colour);

  00009	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  00013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00018	51		 push	 ecx
  00019	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  0001e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00023	51		 push	 ecx
  00024	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  00029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002e	51		 push	 ecx
  0002f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  00034	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00039	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1517 : 	if (scale_x > 1.1)

  0003e	f3 0f 5a 45 18	 cvtss2sd xmm0, DWORD PTR _scale_x$[ebp]
  00043	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff199999999999a
  0004b	0f 86 14 01 00
	00		 jbe	 $LN2@draw_arrow

; 1518 : 	{
; 1519 : 		draw_line (centre_x + 1, centre_y, dot_x + 1, dot_y, colour);

  00051	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  00054	50		 push	 eax
  00055	51		 push	 ecx
  00056	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  0005b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00060	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  00065	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0006d	51		 push	 ecx
  0006e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00073	51		 push	 ecx
  00074	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  00083	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0008b	51		 push	 ecx
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1520 : 		draw_line (centre_x - 1, centre_y, dot_x - 1, dot_y, colour);

  00096	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  00099	50		 push	 eax
  0009a	51		 push	 ecx
  0009b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  000a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a5	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  000aa	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000b2	51		 push	 ecx
  000b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b8	51		 push	 ecx
  000b9	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  000be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c3	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  000c8	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000d0	51		 push	 ecx
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1521 : 		draw_line (centre_x + 1, centre_y, dot_x + 1, dot_y, colour);

  000db	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  000de	50		 push	 eax
  000df	51		 push	 ecx
  000e0	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  000ef	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000f7	51		 push	 ecx
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	51		 push	 ecx
  000fe	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  0010d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00115	51		 push	 ecx
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1522 : 		draw_line (centre_x - 1, centre_y, dot_x - 1, dot_y, colour);

  00120	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  00123	50		 push	 eax
  00124	51		 push	 ecx
  00125	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  00134	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0013c	51		 push	 ecx
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	51		 push	 ecx
  00143	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  00148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  00152	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0015a	51		 push	 ecx
  0015b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00160	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN2@draw_arrow:

; 1523 : 	}
; 1524 : 	if (scale_y > 1.1)

  00165	f3 0f 5a 45 1c	 cvtss2sd xmm0, DWORD PTR _scale_y$[ebp]
  0016a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff199999999999a
  00172	0f 86 14 01 00
	00		 jbe	 $LN3@draw_arrow

; 1525 : 	{
; 1526 : 		draw_line (centre_x, centre_y + 1, dot_x, dot_y + 1, colour);

  00178	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  0017b	50		 push	 eax
  0017c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  00181	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00189	51		 push	 ecx
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	51		 push	 ecx
  00190	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  0019f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  001a7	51		 push	 ecx
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1527 : 		draw_line (centre_x, centre_y - 1, dot_x, dot_y - 1, colour);

  001bd	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  001c0	50		 push	 eax
  001c1	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  001c6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  001ce	51		 push	 ecx
  001cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d4	51		 push	 ecx
  001d5	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  001da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001df	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  001e4	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  001ec	51		 push	 ecx
  001ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f2	51		 push	 ecx
  001f3	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  001f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fd	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1528 : 		draw_line (centre_x, centre_y + 1, dot_x, dot_y + 1, colour);

  00202	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  00205	50		 push	 eax
  00206	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  0020b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00213	51		 push	 ecx
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	51		 push	 ecx
  0021a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  0021f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00224	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  00229	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00231	51		 push	 ecx
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	51		 push	 ecx
  00238	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  0023d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00242	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1529 : 		draw_line (centre_x, centre_y - 1, dot_x, dot_y - 1, colour);

  00247	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  0024a	50		 push	 eax
  0024b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  00250	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00258	51		 push	 ecx
  00259	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025e	51		 push	 ecx
  0025f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  0026e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00276	51		 push	 ecx
  00277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027c	51		 push	 ecx
  0027d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  00282	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00287	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN3@draw_arrow:

; 1530 : 	}
; 1531 : 	if (scale_x > 2.1)

  0028c	f3 0f 5a 45 18	 cvtss2sd xmm0, DWORD PTR _scale_x$[ebp]
  00291	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4000cccccccccccd
  00299	0f 86 14 01 00
	00		 jbe	 $LN4@draw_arrow

; 1532 : 	{
; 1533 : 		draw_line (centre_x + 2, centre_y, dot_x + 2, dot_y, colour);

  0029f	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  002a2	50		 push	 eax
  002a3	51		 push	 ecx
  002a4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  002b3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  002bb	51		 push	 ecx
  002bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c1	51		 push	 ecx
  002c2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  002d1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  002d9	51		 push	 ecx
  002da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002df	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1534 : 		draw_line (centre_x - 2, centre_y, dot_x - 2, dot_y, colour);

  002e4	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  002e7	50		 push	 eax
  002e8	51		 push	 ecx
  002e9	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  002ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f3	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  002f8	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  00300	51		 push	 ecx
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	51		 push	 ecx
  00307	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  0030c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00311	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  00316	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  0031e	51		 push	 ecx
  0031f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00324	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1535 : 		draw_line (centre_x + 2, centre_y, dot_x + 2, dot_y, colour);

  00329	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  0032c	50		 push	 eax
  0032d	51		 push	 ecx
  0032e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  00333	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00338	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  0033d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  00345	51		 push	 ecx
  00346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034b	51		 push	 ecx
  0034c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  00351	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00356	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  0035b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  00363	51		 push	 ecx
  00364	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00369	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1536 : 		draw_line (centre_x - 2, centre_y, dot_x - 2, dot_y, colour);

  0036e	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  00371	50		 push	 eax
  00372	51		 push	 ecx
  00373	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  00378	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  00382	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  0038a	51		 push	 ecx
  0038b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00390	51		 push	 ecx
  00391	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  00396	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  003a0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  003a8	51		 push	 ecx
  003a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ae	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN4@draw_arrow:

; 1537 : 	}
; 1538 : 	if (scale_y > 2.1)

  003b3	f3 0f 5a 45 1c	 cvtss2sd xmm0, DWORD PTR _scale_y$[ebp]
  003b8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4000cccccccccccd
  003c0	0f 86 14 01 00
	00		 jbe	 $LN5@draw_arrow

; 1539 : 	{
; 1540 : 		draw_line (centre_x, centre_y + 2, dot_x, dot_y + 2, colour);

  003c6	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  003c9	50		 push	 eax
  003ca	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  003cf	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  003d7	51		 push	 ecx
  003d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dd	51		 push	 ecx
  003de	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  003e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  003ed	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  003f5	51		 push	 ecx
  003f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fb	51		 push	 ecx
  003fc	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  00401	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00406	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1541 : 		draw_line (centre_x, centre_y - 2, dot_x, dot_y - 2, colour);

  0040b	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  0040e	50		 push	 eax
  0040f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  00414	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  0041c	51		 push	 ecx
  0041d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00422	51		 push	 ecx
  00423	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  00428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  00432	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  0043a	51		 push	 ecx
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	51		 push	 ecx
  00441	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  00446	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1542 : 		draw_line (centre_x, centre_y + 2, dot_x, dot_y + 2, colour);

  00450	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  00453	50		 push	 eax
  00454	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  00459	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  00461	51		 push	 ecx
  00462	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00467	51		 push	 ecx
  00468	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  0046d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00472	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  00477	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  0047f	51		 push	 ecx
  00480	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00485	51		 push	 ecx
  00486	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  0048b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00490	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1543 : 		draw_line (centre_x, centre_y - 2, dot_x, dot_y - 2, colour);

  00495	8b 45 20	 mov	 eax, DWORD PTR _colour$[ebp]
  00498	50		 push	 eax
  00499	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _dot_y$[ebp]
  0049e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  004a6	51		 push	 ecx
  004a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ac	51		 push	 ecx
  004ad	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _dot_x$[ebp]
  004b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b7	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  004bc	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  004c4	51		 push	 ecx
  004c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ca	51		 push	 ecx
  004cb	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  004d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d5	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN5@draw_arrow:

; 1544 : 	}
; 1545 : }

  004da	5f		 pop	 edi
  004db	5e		 pop	 esi
  004dc	5b		 pop	 ebx
  004dd	8b e5		 mov	 esp, ebp
  004df	5d		 pop	 ebp
  004e0	c2 1c 00	 ret	 28			; 0000001cH
?draw_arrow@@YGXMMMMMMUREAL_COLOUR@@@Z ENDP		; draw_arrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\line.c
;	COMDAT ?generate_outcode@@YGHMM@Z
_TEXT	SEGMENT
_oymin$ = -32						; size = 4
_oymax$ = -28						; size = 4
_oxmin$ = -24						; size = 4
_oxmax$ = -20						; size = 4
_iymin$ = -16						; size = 4
_iymax$ = -12						; size = 4
_ixmin$ = -8						; size = 4
_ixmax$ = -4						; size = 4
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?generate_outcode@@YGHMM@Z PROC				; generate_outcode, COMDAT

; 1472 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1473 : 
; 1474 : 	unsigned int
; 1475 : 		ixmax,
; 1476 : 		ixmin,
; 1477 : 		iymax,
; 1478 : 		iymin;
; 1479 : 
; 1480 : 	float
; 1481 : 		oxmax,
; 1482 : 		oxmin,
; 1483 : 		oymax,
; 1484 : 		oymin;
; 1485 : 
; 1486 : 	oxmax = active_viewport.x_max - i;

  00009	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00011	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _i$[ebp]
  00016	f3 0f 11 45 ec	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 1487 : 	oxmin = i - active_viewport.x_min;

  0001b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _i$[ebp]
  00020	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00028	f3 0f 11 45 e8	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 1488 : 	oymax = active_viewport.y_max - j;

  0002d	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00035	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _j$[ebp]
  0003a	f3 0f 11 45 e4	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 1489 : 	oymin = j - active_viewport.y_min;

  0003f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _j$[ebp]
  00044	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0004c	f3 0f 11 45 e0	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 1490 : 
; 1491 : 	ixmax = *( ( unsigned int * ) &oxmax );

  00051	8b 45 ec	 mov	 eax, DWORD PTR _oxmax$[ebp]
  00054	89 45 fc	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1492 : 	ixmin = *( ( unsigned int * ) &oxmin );

  00057	8b 45 e8	 mov	 eax, DWORD PTR _oxmin$[ebp]
  0005a	89 45 f8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1493 : 	iymax = *( ( unsigned int * ) &oymax );

  0005d	8b 45 e4	 mov	 eax, DWORD PTR _oymax$[ebp]
  00060	89 45 f4	 mov	 DWORD PTR _iymax$[ebp], eax

; 1494 : 	iymin = *( ( unsigned int * ) &oymin );

  00063	8b 45 e0	 mov	 eax, DWORD PTR _oymin$[ebp]
  00066	89 45 f0	 mov	 DWORD PTR _iymin$[ebp], eax

; 1495 : 
; 1496 : 	ixmin >>= 31;

  00069	8b 45 f8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0006c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006f	89 45 f8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1497 : 	iymin &= 0x80000000;

  00072	8b 45 f0	 mov	 eax, DWORD PTR _iymin$[ebp]
  00075	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0007a	89 45 f0	 mov	 DWORD PTR _iymin$[ebp], eax

; 1498 : 	ixmax >>= 29;

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _ixmax$[ebp]
  00080	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  00083	89 45 fc	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1499 : 	iymax &= 0x80000000;

  00086	8b 45 f4	 mov	 eax, DWORD PTR _iymax$[ebp]
  00089	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0008e	89 45 f4	 mov	 DWORD PTR _iymax$[ebp], eax

; 1500 : 	iymin >>= 30;

  00091	8b 45 f0	 mov	 eax, DWORD PTR _iymin$[ebp]
  00094	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  00097	89 45 f0	 mov	 DWORD PTR _iymin$[ebp], eax

; 1501 : 	ixmin &= 0x00000001;

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0009d	83 e0 01	 and	 eax, 1
  000a0	89 45 f8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1502 : 	iymax >>= 28;

  000a3	8b 45 f4	 mov	 eax, DWORD PTR _iymax$[ebp]
  000a6	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  000a9	89 45 f4	 mov	 DWORD PTR _iymax$[ebp], eax

; 1503 : 	ixmax &= 0x00000004;

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _ixmax$[ebp]
  000af	83 e0 04	 and	 eax, 4
  000b2	89 45 fc	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1504 : 	ixmin |= iymin;

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  000b8	0b 45 f0	 or	 eax, DWORD PTR _iymin$[ebp]
  000bb	89 45 f8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1505 : 	ixmax |= iymax;

  000be	8b 45 fc	 mov	 eax, DWORD PTR _ixmax$[ebp]
  000c1	0b 45 f4	 or	 eax, DWORD PTR _iymax$[ebp]
  000c4	89 45 fc	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1506 : 
; 1507 : 	return ( ixmin | ixmax );

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  000ca	0b 45 fc	 or	 eax, DWORD PTR _ixmax$[ebp]

; 1508 : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8
?generate_outcode@@YGHMM@Z ENDP				; generate_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\line.c
;	COMDAT ?clip_line@@YGHPAM000@Z
_TEXT	SEGMENT
_outcode2$ = -8						; size = 4
_outcode1$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?clip_line@@YGHPAM000@Z PROC				; clip_line, COMDAT

; 1286 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1287 : 
; 1288 : 	int
; 1289 : 		outcode1,
; 1290 : 		outcode2;
; 1291 : 
; 1292 : 	outcode1 = generate_outcode ( *x1, *y1 );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  0000c	51		 push	 ecx
  0000d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  00019	51		 push	 ecx
  0001a	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0001e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  00028	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax

; 1293 : 
; 1294 : 	outcode2 = generate_outcode ( *x2, *y2 );

  0002b	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  0002e	51		 push	 ecx
  0002f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00038	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  0003b	51		 push	 ecx
  0003c	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  0004a	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax

; 1295 : 
; 1296 : 	if ( outcode1 & outcode2 )

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00050	23 45 f8	 and	 eax, DWORD PTR _outcode2$[ebp]
  00053	74 09		 je	 SHORT $LN2@clip_line

; 1297 : 	{
; 1298 : 
; 1299 : 		//
; 1300 : 		// Line does not intersect with the screen
; 1301 : 		//
; 1302 : 
; 1303 : 		return ( FALSE );

  00055	33 c0		 xor	 eax, eax
  00057	e9 79 01 00 00	 jmp	 $LN1@clip_line

; 1304 : 	}
; 1305 : 	else

  0005c	eb 12		 jmp	 SHORT $LN4@clip_line
$LN2@clip_line:

; 1306 : 	{
; 1307 : 
; 1308 : 		if ( ! ( outcode1 | outcode2 ) )

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00061	0b 45 f8	 or	 eax, DWORD PTR _outcode2$[ebp]
  00064	75 0a		 jne	 SHORT $LN4@clip_line

; 1309 : 		{
; 1310 : 
; 1311 : 			return ( TRUE );

  00066	b8 01 00 00 00	 mov	 eax, 1
  0006b	e9 65 01 00 00	 jmp	 $LN1@clip_line
$LN4@clip_line:

; 1312 : 		}
; 1313 : 	}
; 1314 : 
; 1315 : 	if ( *( int * ) x1 < *( ( int * ) &active_viewport.x_min ) )

  00070	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0007b	7d 15		 jge	 SHORT $LN5@clip_line

; 1316 : 	{
; 1317 : 
; 1318 : 		clip_line_left ( x1, y1, x2, y2 );

  0007d	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  00084	51		 push	 ecx
  00085	8b 55 0c	 mov	 edx, DWORD PTR _y1$[ebp]
  00088	52		 push	 edx
  00089	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?clip_line_left@@YGXPAM000@Z ; clip_line_left
$LN5@clip_line:

; 1319 : 	}
; 1320 : 
; 1321 : 	if ( *( int * ) x2 < *( ( int * ) &active_viewport.x_min ) )

  00092	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0009d	7d 15		 jge	 SHORT $LN6@clip_line

; 1322 : 	{
; 1323 : 
; 1324 : 		clip_line_left ( x2, y2, x1, y1 );

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  000a2	50		 push	 eax
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  000a6	51		 push	 ecx
  000a7	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  000aa	52		 push	 edx
  000ab	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?clip_line_left@@YGXPAM000@Z ; clip_line_left
$LN6@clip_line:

; 1325 : 	}
; 1326 : 
; 1327 : 	if ( *( int * ) x1 > *( ( int * ) &active_viewport.x_max ) )

  000b4	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  000bf	7e 15		 jle	 SHORT $LN7@clip_line

; 1328 : 	{
; 1329 : 
; 1330 : 		clip_line_right ( x1, y1, x2, y2 );

  000c1	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 0c	 mov	 edx, DWORD PTR _y1$[ebp]
  000cc	52		 push	 edx
  000cd	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?clip_line_right@@YGXPAM000@Z ; clip_line_right
$LN7@clip_line:

; 1331 : 	}
; 1332 : 
; 1333 : 	if ( *( int * ) x2 > *( ( int * ) &active_viewport.x_max ) )

  000d6	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  000e1	7e 15		 jle	 SHORT $LN8@clip_line

; 1334 : 	{
; 1335 : 
; 1336 : 		clip_line_right ( x2, y2, x1, y1 );

  000e3	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  000e6	50		 push	 eax
  000e7	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  000ea	51		 push	 ecx
  000eb	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  000ee	52		 push	 edx
  000ef	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 ?clip_line_right@@YGXPAM000@Z ; clip_line_right
$LN8@clip_line:

; 1337 : 	}
; 1338 : 
; 1339 : 	if ( *( int * ) y1 < *( ( int * ) &active_viewport.y_min ) )

  000f8	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00103	7d 15		 jge	 SHORT $LN9@clip_line

; 1340 : 	{
; 1341 : 
; 1342 : 		clip_line_top ( x1, y1, x2, y2 );

  00105	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00108	50		 push	 eax
  00109	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  0010c	51		 push	 ecx
  0010d	8b 55 0c	 mov	 edx, DWORD PTR _y1$[ebp]
  00110	52		 push	 edx
  00111	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ?clip_line_top@@YGXPAM000@Z ; clip_line_top
$LN9@clip_line:

; 1343 : 	}
; 1344 : 
; 1345 : 	if ( *( int * ) y2 < *( ( int * ) &active_viewport.y_min ) )

  0011a	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  0011d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011f	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00125	7d 15		 jge	 SHORT $LN10@clip_line

; 1346 : 	{
; 1347 : 
; 1348 : 		clip_line_top ( x2, y2, x1, y1 );

  00127	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  0012a	50		 push	 eax
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  0012e	51		 push	 ecx
  0012f	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  00132	52		 push	 edx
  00133	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 ?clip_line_top@@YGXPAM000@Z ; clip_line_top
$LN10@clip_line:

; 1349 : 	}
; 1350 : 
; 1351 : 	if ( *( int * ) y1 > *( ( int * ) &active_viewport.y_max ) )

  0013c	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  0013f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00141	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00147	7e 15		 jle	 SHORT $LN11@clip_line

; 1352 : 	{
; 1353 : 
; 1354 : 		clip_line_bottom ( x1, y1, x2, y2 );

  00149	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  0014c	50		 push	 eax
  0014d	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  00150	51		 push	 ecx
  00151	8b 55 0c	 mov	 edx, DWORD PTR _y1$[ebp]
  00154	52		 push	 edx
  00155	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ?clip_line_bottom@@YGXPAM000@Z ; clip_line_bottom
$LN11@clip_line:

; 1355 : 	}
; 1356 : 
; 1357 : 	if ( *( int * ) y2 > *( ( int * ) &active_viewport.y_max ) )

  0015e	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00161	8b 08		 mov	 ecx, DWORD PTR [eax]
  00163	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00169	7e 15		 jle	 SHORT $LN12@clip_line

; 1358 : 	{
; 1359 : 
; 1360 : 		clip_line_bottom ( x2, y2, x1, y1 );

  0016b	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  0016e	50		 push	 eax
  0016f	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  00172	51		 push	 ecx
  00173	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  00176	52		 push	 edx
  00177	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 ?clip_line_bottom@@YGXPAM000@Z ; clip_line_bottom
$LN12@clip_line:

; 1361 : 	}
; 1362 : 
; 1363 : 	outcode1 = generate_outcode ( *x1, *y1 );

  00180	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  00183	51		 push	 ecx
  00184	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018d	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  00190	51		 push	 ecx
  00191	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  0019f	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax

; 1364 : 
; 1365 : 	outcode2 = generate_outcode ( *x2, *y2 );

  001a2	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  001a5	51		 push	 ecx
  001a6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001af	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  001b2	51		 push	 ecx
  001b3	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  001b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bc	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  001c1	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax

; 1366 : 
; 1367 : 	if ( outcode1 | outcode2 )

  001c4	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  001c7	0b 45 f8	 or	 eax, DWORD PTR _outcode2$[ebp]
  001ca	74 04		 je	 SHORT $LN13@clip_line

; 1368 : 	{
; 1369 : 
; 1370 : 		return ( FALSE );

  001cc	33 c0		 xor	 eax, eax
  001ce	eb 05		 jmp	 SHORT $LN1@clip_line
$LN13@clip_line:

; 1371 : 	}
; 1372 : 
; 1373 : 	return ( TRUE );

  001d0	b8 01 00 00 00	 mov	 eax, 1
$LN1@clip_line:

; 1374 : }

  001d5	5f		 pop	 edi
  001d6	5e		 pop	 esi
  001d7	5b		 pop	 ebx
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c2 10 00	 ret	 16			; 00000010H
?clip_line@@YGHPAM000@Z ENDP				; clip_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\line.c
;	COMDAT ?draw_thick_line@@YGXMMMMUREAL_COLOUR@@M@Z
_TEXT	SEGMENT
_poly$1 = -284						; size = 4
_specular$2 = -280					; size = 4
_colour$3 = -276					; size = 4
_normal$4 = -272					; size = 12
_vertices$5 = -260					; size = 256
_outcode2$6 = -2					; size = 1
_outcode$7 = -1						; size = 1
_fx1$ = 8						; size = 4
_fy1$ = 12						; size = 4
_fx2$ = 16						; size = 4
_fy2$ = 20						; size = 4
_colour_rgb$ = 24					; size = 4
_thickness$ = 28					; size = 4
?draw_thick_line@@YGXMMMMUREAL_COLOUR@@M@Z PROC		; draw_thick_line, COMDAT

; 617  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 618  : 
; 619  : 	ASSERT ( active_screen );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 18		 jne	 SHORT $LN2@draw_thick
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_thick_line@@YGXMMMMUREAL_COLOUR@@M@Z@4JA
  0001a	83 c0 02	 add	 eax, 2
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@PIKNMACE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_thick:

; 620  : 
; 621  : 	if ( d3d_in_3d_scene )

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_in_3d_scene@@3HA, 0 ; d3d_in_3d_scene
  00034	0f 84 10 05 00
	00		 je	 $LN6@draw_thick

; 622  : 	{
; 623  : 	
; 624  : 		unsigned char
; 625  : 			outcode,
; 626  : 			outcode2;
; 627  : 	
; 628  : 		vertex
; 629  : 			vertices[4];
; 630  : 	
; 631  : 		vec3d
; 632  : 			normal;
; 633  : 	
; 634  : 		real_colour
; 635  : 			colour,
; 636  : 			specular;
; 637  : 	
; 638  : 		specular.red = 0;

  0003a	c6 85 ea fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+2], 0

; 639  : 		specular.green = 0;

  00041	c6 85 e9 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+1], 0

; 640  : 		specular.blue = 0;

  00048	c6 85 e8 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp], 0

; 641  : 		specular.alpha = 255;

  0004f	c6 85 eb fe ff
	ff ff		 mov	 BYTE PTR _specular$2[ebp+3], 255 ; 000000ffH

; 642  : 
; 643  : 		colour.red = colour_rgb.r;

  00056	8a 45 1a	 mov	 al, BYTE PTR _colour_rgb$[ebp+2]
  00059	88 85 ee fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+2], al

; 644  : 		colour.green = colour_rgb.g;

  0005f	8a 45 19	 mov	 al, BYTE PTR _colour_rgb$[ebp+1]
  00062	88 85 ed fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+1], al

; 645  : 		colour.blue = colour_rgb.b;

  00068	8a 45 18	 mov	 al, BYTE PTR _colour_rgb$[ebp]
  0006b	88 85 ec fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp], al

; 646  : 		colour.alpha = colour_rgb.a;

  00071	8a 45 1b	 mov	 al, BYTE PTR _colour_rgb$[ebp+3]
  00074	88 85 ef fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+3], al

; 647  : 
; 648  : 		normal.x = fy2 - fy1;

  0007a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy2$[ebp]
  0007f	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _fy1$[ebp]
  00084	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _normal$4[ebp], xmm0

; 649  : 		normal.z = fx1 - fx2;

  0008c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx1$[ebp]
  00091	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _fx2$[ebp]
  00096	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _normal$4[ebp+8], xmm0

; 650  : 		normal.y = 0;

  0009e	0f 57 c0	 xorps	 xmm0, xmm0
  000a1	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _normal$4[ebp+4], xmm0

; 651  : 
; 652  : 		normalise_any_3d_vector ( &normal );

  000a9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _normal$4[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  000b5	dd d8		 fstp	 ST(0)

; 653  : 		normal.x *= thickness;

  000b7	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _normal$4[ebp]
  000bf	f3 0f 59 45 1c	 mulss	 xmm0, DWORD PTR _thickness$[ebp]
  000c4	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _normal$4[ebp], xmm0

; 654  : 		normal.z *= thickness;

  000cc	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _normal$4[ebp+8]
  000d4	f3 0f 59 45 1c	 mulss	 xmm0, DWORD PTR _thickness$[ebp]
  000d9	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _normal$4[ebp+8], xmm0

; 655  : 	
; 656  : 		vertices[0].i = fx1 - normal.x;

  000e1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx1$[ebp]
  000e6	f3 0f 5c 85 f0
	fe ff ff	 subss	 xmm0, DWORD PTR _normal$4[ebp]
  000ee	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f3	6b c8 00	 imul	 ecx, eax, 0
  000f6	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+ecx+16], xmm0

; 657  : 		vertices[0].j = fy1 - normal.z;

  000ff	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy1$[ebp]
  00104	f3 0f 5c 85 f8
	fe ff ff	 subss	 xmm0, DWORD PTR _normal$4[ebp+8]
  0010c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00111	6b c8 00	 imul	 ecx, eax, 0
  00114	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+ecx+20], xmm0

; 658  : 		vertices[1].i = fx1 + normal.x;

  0011d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx1$[ebp]
  00122	f3 0f 58 85 f0
	fe ff ff	 addss	 xmm0, DWORD PTR _normal$4[ebp]
  0012a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0012f	c1 e0 00	 shl	 eax, 0
  00132	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+eax+16], xmm0

; 659  : 		vertices[1].j = fy1 + normal.z;

  0013b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy1$[ebp]
  00140	f3 0f 58 85 f8
	fe ff ff	 addss	 xmm0, DWORD PTR _normal$4[ebp+8]
  00148	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0014d	c1 e0 00	 shl	 eax, 0
  00150	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+eax+20], xmm0

; 660  : 		vertices[2].i = fx2 - normal.x;

  00159	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fx2$[ebp]
  0015e	f3 0f 5c 85 f0
	fe ff ff	 subss	 xmm0, DWORD PTR _normal$4[ebp]
  00166	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0016b	d1 e0		 shl	 eax, 1
  0016d	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+eax+16], xmm0

; 661  : 		vertices[2].j = fy2 - normal.z;

  00176	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy2$[ebp]
  0017b	f3 0f 5c 85 f8
	fe ff ff	 subss	 xmm0, DWORD PTR _normal$4[ebp+8]
  00183	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00188	d1 e0		 shl	 eax, 1
  0018a	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+eax+20], xmm0

; 662  : 		vertices[3].i = fx2 + normal.x;

  00193	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fx2$[ebp]
  00198	f3 0f 58 85 f0
	fe ff ff	 addss	 xmm0, DWORD PTR _normal$4[ebp]
  001a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001a5	6b c8 03	 imul	 ecx, eax, 3
  001a8	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+ecx+16], xmm0

; 663  : 		vertices[3].j = fy2 + normal.z;

  001b1	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy2$[ebp]
  001b6	f3 0f 58 85 f8
	fe ff ff	 addss	 xmm0, DWORD PTR _normal$4[ebp+8]
  001be	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001c3	6b c8 03	 imul	 ecx, eax, 3
  001c6	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+ecx+20], xmm0

; 664  : 	
; 665  : 		vertices[0].outcode = generate_outcode ( vertices[0].i, vertices[0].j );

  001cf	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d4	6b c8 00	 imul	 ecx, eax, 0
  001d7	51		 push	 ecx
  001d8	f3 0f 10 84 0d
	10 ff ff ff	 movss	 xmm0, DWORD PTR _vertices$5[ebp+ecx+20]
  001e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e6	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001eb	6b c2 00	 imul	 eax, edx, 0
  001ee	51		 push	 ecx
  001ef	f3 0f 10 84 05
	0c ff ff ff	 movss	 xmm0, DWORD PTR _vertices$5[ebp+eax+16]
  001f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fd	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  00202	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00207	6b d1 00	 imul	 edx, ecx, 0
  0020a	88 84 15 28 ff
	ff ff		 mov	 BYTE PTR _vertices$5[ebp+edx+44], al

; 666  : 		vertices[1].outcode = generate_outcode ( vertices[1].i, vertices[1].j );

  00211	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00216	c1 e0 00	 shl	 eax, 0
  00219	51		 push	 ecx
  0021a	f3 0f 10 84 05
	10 ff ff ff	 movss	 xmm0, DWORD PTR _vertices$5[ebp+eax+20]
  00223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00228	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0022d	c1 e1 00	 shl	 ecx, 0
  00230	51		 push	 ecx
  00231	f3 0f 10 84 0d
	0c ff ff ff	 movss	 xmm0, DWORD PTR _vertices$5[ebp+ecx+16]
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  00244	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00249	c1 e2 00	 shl	 edx, 0
  0024c	88 84 15 28 ff
	ff ff		 mov	 BYTE PTR _vertices$5[ebp+edx+44], al

; 667  : 		vertices[2].outcode = generate_outcode ( vertices[2].i, vertices[2].j );

  00253	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00258	d1 e0		 shl	 eax, 1
  0025a	51		 push	 ecx
  0025b	f3 0f 10 84 05
	10 ff ff ff	 movss	 xmm0, DWORD PTR _vertices$5[ebp+eax+20]
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0026e	d1 e1		 shl	 ecx, 1
  00270	51		 push	 ecx
  00271	f3 0f 10 84 0d
	0c ff ff ff	 movss	 xmm0, DWORD PTR _vertices$5[ebp+ecx+16]
  0027a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027f	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  00284	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00289	d1 e2		 shl	 edx, 1
  0028b	88 84 15 28 ff
	ff ff		 mov	 BYTE PTR _vertices$5[ebp+edx+44], al

; 668  : 		vertices[3].outcode = generate_outcode ( vertices[3].i, vertices[3].j );

  00292	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00297	6b c8 03	 imul	 ecx, eax, 3
  0029a	51		 push	 ecx
  0029b	f3 0f 10 84 0d
	10 ff ff ff	 movss	 xmm0, DWORD PTR _vertices$5[ebp+ecx+20]
  002a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a9	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002ae	6b c2 03	 imul	 eax, edx, 3
  002b1	51		 push	 ecx
  002b2	f3 0f 10 84 05
	0c ff ff ff	 movss	 xmm0, DWORD PTR _vertices$5[ebp+eax+16]
  002bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c0	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  002c5	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002ca	6b d1 03	 imul	 edx, ecx, 3
  002cd	88 84 15 28 ff
	ff ff		 mov	 BYTE PTR _vertices$5[ebp+edx+44], al

; 669  : 	
; 670  : 		vertices[0].next_vertex = &vertices[1];

  002d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002d9	c1 e0 00	 shl	 eax, 0
  002dc	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _vertices$5[ebp+eax]
  002e3	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002e8	6b c2 00	 imul	 eax, edx, 0
  002eb	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _vertices$5[ebp+eax+40], ecx

; 671  : 		vertices[1].next_vertex = &vertices[3];

  002f2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002f7	6b c8 03	 imul	 ecx, eax, 3
  002fa	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _vertices$5[ebp+ecx]
  00301	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00306	c1 e0 00	 shl	 eax, 0
  00309	89 94 05 24 ff
	ff ff		 mov	 DWORD PTR _vertices$5[ebp+eax+40], edx

; 672  : 		vertices[3].next_vertex = &vertices[2];

  00310	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00315	d1 e0		 shl	 eax, 1
  00317	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _vertices$5[ebp+eax]
  0031e	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00323	6b c2 03	 imul	 eax, edx, 3
  00326	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _vertices$5[ebp+eax+40], ecx

; 673  : 		vertices[2].next_vertex = NULL;

  0032d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00332	d1 e0		 shl	 eax, 1
  00334	c7 84 05 24 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _vertices$5[ebp+eax+40], 0

; 674  : 	
; 675  : 		vertices[0].z = 10; vertices[0].q = 0.1;

  0033f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00344	6b c8 00	 imul	 ecx, eax, 0
  00347	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0034f	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+ecx+8], xmm0
  00358	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0035d	6b c8 00	 imul	 ecx, eax, 0
  00360	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00368	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+ecx+12], xmm0

; 676  : 		vertices[1].z = 10; vertices[1].q = 0.1;

  00371	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00376	c1 e0 00	 shl	 eax, 0
  00379	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00381	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+eax+8], xmm0
  0038a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0038f	c1 e0 00	 shl	 eax, 0
  00392	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0039a	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+eax+12], xmm0

; 677  : 		vertices[2].z = 10; vertices[2].q = 0.1;

  003a3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003a8	d1 e0		 shl	 eax, 1
  003aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  003b2	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+eax+8], xmm0
  003bb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003c0	d1 e0		 shl	 eax, 1
  003c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  003ca	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+eax+12], xmm0

; 678  : 		vertices[3].z = 10; vertices[3].q = 0.1;

  003d3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003d8	6b c8 03	 imul	 ecx, eax, 3
  003db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  003e3	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+ecx+8], xmm0
  003ec	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003f1	6b c8 03	 imul	 ecx, eax, 3
  003f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  003fc	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _vertices$5[ebp+ecx+12], xmm0

; 679  : 	
; 680  : 		outcode = vertices[0].outcode; outcode2 = vertices[0].outcode;

  00405	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0040a	6b c8 00	 imul	 ecx, eax, 0
  0040d	8a 94 0d 28 ff
	ff ff		 mov	 dl, BYTE PTR _vertices$5[ebp+ecx+44]
  00414	88 55 ff	 mov	 BYTE PTR _outcode$7[ebp], dl
  00417	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0041c	6b c8 00	 imul	 ecx, eax, 0
  0041f	8a 94 0d 28 ff
	ff ff		 mov	 dl, BYTE PTR _vertices$5[ebp+ecx+44]
  00426	88 55 fe	 mov	 BYTE PTR _outcode2$6[ebp], dl

; 681  : 		outcode |= vertices[1].outcode; outcode2 &= vertices[1].outcode;

  00429	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0042e	c1 e0 00	 shl	 eax, 0
  00431	0f b6 8c 05 28
	ff ff ff	 movzx	 ecx, BYTE PTR _vertices$5[ebp+eax+44]
  00439	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$7[ebp]
  0043d	0b d1		 or	 edx, ecx
  0043f	88 55 ff	 mov	 BYTE PTR _outcode$7[ebp], dl
  00442	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00447	c1 e0 00	 shl	 eax, 0
  0044a	0f b6 8c 05 28
	ff ff ff	 movzx	 ecx, BYTE PTR _vertices$5[ebp+eax+44]
  00452	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$6[ebp]
  00456	23 d1		 and	 edx, ecx
  00458	88 55 fe	 mov	 BYTE PTR _outcode2$6[ebp], dl

; 682  : 		outcode |= vertices[2].outcode; outcode2 &= vertices[2].outcode;

  0045b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00460	d1 e0		 shl	 eax, 1
  00462	0f b6 8c 05 28
	ff ff ff	 movzx	 ecx, BYTE PTR _vertices$5[ebp+eax+44]
  0046a	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$7[ebp]
  0046e	0b d1		 or	 edx, ecx
  00470	88 55 ff	 mov	 BYTE PTR _outcode$7[ebp], dl
  00473	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00478	d1 e0		 shl	 eax, 1
  0047a	0f b6 8c 05 28
	ff ff ff	 movzx	 ecx, BYTE PTR _vertices$5[ebp+eax+44]
  00482	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$6[ebp]
  00486	23 d1		 and	 edx, ecx
  00488	88 55 fe	 mov	 BYTE PTR _outcode2$6[ebp], dl

; 683  : 		outcode |= vertices[3].outcode; outcode2 &= vertices[3].outcode;

  0048b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00490	6b c8 03	 imul	 ecx, eax, 3
  00493	0f b6 94 0d 28
	ff ff ff	 movzx	 edx, BYTE PTR _vertices$5[ebp+ecx+44]
  0049b	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$7[ebp]
  0049f	0b c2		 or	 eax, edx
  004a1	88 45 ff	 mov	 BYTE PTR _outcode$7[ebp], al
  004a4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004a9	6b c8 03	 imul	 ecx, eax, 3
  004ac	0f b6 94 0d 28
	ff ff ff	 movzx	 edx, BYTE PTR _vertices$5[ebp+ecx+44]
  004b4	0f b6 45 fe	 movzx	 eax, BYTE PTR _outcode2$6[ebp]
  004b8	23 c2		 and	 eax, edx
  004ba	88 45 fe	 mov	 BYTE PTR _outcode2$6[ebp], al

; 684  : 	
; 685  : 		if ( outcode2 == 0 )

  004bd	0f b6 45 fe	 movzx	 eax, BYTE PTR _outcode2$6[ebp]
  004c1	85 c0		 test	 eax, eax
  004c3	0f 85 81 00 00
	00		 jne	 $LN6@draw_thick

; 686  : 		{
; 687  : 	
; 688  : 			vertex
; 689  : 				*poly;
; 690  : 	
; 691  : 			poly = &vertices[0];

  004c9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004ce	6b c8 00	 imul	 ecx, eax, 0
  004d1	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _vertices$5[ebp+ecx]
  004d8	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _poly$1[ebp], edx

; 692  : 	
; 693  : 			if ( outcode )

  004de	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$7[ebp]
  004e2	85 c0		 test	 eax, eax
  004e4	74 21		 je	 SHORT $LN5@draw_thick

; 694  : 			{
; 695  : 	
; 696  : 				clip_3d_coord = 0;;

  004e6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 697  : 	
; 698  : 				poly = clip_3d_polygon ( poly, outcode );

  004f0	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$7[ebp]
  004f4	50		 push	 eax
  004f5	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _poly$1[ebp]
  004fb	51		 push	 ecx
  004fc	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  00501	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _poly$1[ebp], eax
$LN5@draw_thick:

; 699  : 			}
; 700  : 	
; 701  : 			if ( poly )

  00507	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _poly$1[ebp], 0
  0050e	74 3a		 je	 SHORT $LN6@draw_thick

; 702  : 			{
; 703  : 	
; 704  : 				zbuffer_constant = zbuffer_constant_elevated_bias;

  00510	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?zbuffer_constant_elevated_bias@@3NA
  00518	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?zbuffer_constant@@3NA, xmm0

; 705  : 	
; 706  : 				draw_wbuffered_plain_polygon ( poly, colour, specular );

  00520	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$2[ebp]
  00526	50		 push	 eax
  00527	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _colour$3[ebp]
  0052d	51		 push	 ecx
  0052e	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _poly$1[ebp]
  00534	52		 push	 edx
  00535	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 707  : 	
; 708  : 				zbuffer_constant = zbuffer_constant_normal_bias;

  0053a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?zbuffer_constant_normal_bias@@3NA
  00542	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?zbuffer_constant@@3NA, xmm0
$LN6@draw_thick:

; 709  : 			}
; 710  : 		}
; 711  : 	}
; 712  : }

  0054a	5f		 pop	 edi
  0054b	5e		 pop	 esi
  0054c	5b		 pop	 ebx
  0054d	8b e5		 mov	 esp, ebp
  0054f	5d		 pop	 ebp
  00550	c2 18 00	 ret	 24			; 00000018H
?draw_thick_line@@YGXMMMMUREAL_COLOUR@@M@Z ENDP		; draw_thick_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\line.c
;	COMDAT ?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_col$1 = -52						; size = 4
_col$2 = -48						; size = 2
_screen_data$ = -44					; size = 4
_screen_pitch$ = -40					; size = 4
_error$ = -36						; size = 4
_dy$ = -32						; size = 4
_dx$ = -28						; size = 4
_y2$ = -24						; size = 4
_x2$ = -20						; size = 4
_y1$ = -16						; size = 4
_x1$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_fx1$ = 8						; size = 4
_fy1$ = 12						; size = 4
_fx2$ = 16						; size = 4
_fy2$ = 20						; size = 4
_colour$ = 24						; size = 4
?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z PROC	; draw_half_thick_line, COMDAT

; 719  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 720  : 
; 721  : 	int
; 722  : 		x,
; 723  : 		y,
; 724  : 		x1,
; 725  : 		y1,
; 726  : 		x2,
; 727  : 		y2,
; 728  : 		dx,
; 729  : 		dy,
; 730  : 		error,
; 731  : 		screen_pitch;
; 732  : 
; 733  : 	unsigned char
; 734  : 		*screen_data;
; 735  : 
; 736  : 	if ( active_screen->pixel_length <= 16 )

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0000e	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00012	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00015	0f 8f 9b 05 00
	00		 jg	 $LN50@draw_half_

; 737  : 	{
; 738  : 		
; 739  : 		USHORT
; 740  : 			col;
; 741  : 	
; 742  : 		ASSERT ( active_screen );

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00022	75 18		 jne	 SHORT $LN52@draw_half_
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA
  00029	83 c0 17	 add	 eax, 23			; 00000017H
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@PIKNMACE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00037	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN52@draw_half_:

; 743  : 		ASSERT ( get_screen_locked ( active_screen ) );

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?get_screen_locked@@YGHPAUSCREEN@@@Z ; get_screen_locked
  00047	85 c0		 test	 eax, eax
  00049	75 18		 jne	 SHORT $LN53@draw_half_
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA
  00050	83 c0 18	 add	 eax, 24			; 00000018H
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@PIKNMACE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN53@draw_half_:

; 744  : 	
; 745  : 		col = get_packed_colour (colour);

  00063	0f b6 45 1a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  00067	c1 e0 18	 shl	 eax, 24			; 00000018H
  0006a	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00076	d3 e8		 shr	 eax, cl
  00078	0f b6 55 19	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  0007c	c1 e2 18	 shl	 edx, 24			; 00000018H
  0007f	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  0008b	d3 ea		 shr	 edx, cl
  0008d	0b c2		 or	 eax, edx
  0008f	0f b6 55 18	 movzx	 edx, BYTE PTR _colour$[ebp]
  00093	c1 e2 18	 shl	 edx, 24			; 00000018H
  00096	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  000a2	d3 ea		 shr	 edx, cl
  000a4	0b c2		 or	 eax, edx
  000a6	0f b6 55 1b	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  000aa	c1 e2 18	 shl	 edx, 24			; 00000018H
  000ad	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  000b9	d3 ea		 shr	 edx, cl
  000bb	0b c2		 or	 eax, edx
  000bd	66 89 45 d0	 mov	 WORD PTR _col$2[ebp], ax

; 746  : 	
; 747  : 		screen_data = get_screen_data (active_screen);

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000cc	89 45 d4	 mov	 DWORD PTR _screen_data$[ebp], eax

; 748  : 		screen_pitch = get_screen_pitch (active_screen);

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  000da	89 45 d8	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 749  : 	
; 750  : 		convert_float_to_int ( fx1, &x1 );

  000dd	8d 45 f4	 lea	 eax, DWORD PTR _x1$[ebp]
  000e0	50		 push	 eax
  000e1	51		 push	 ecx
  000e2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx1$[ebp]
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 751  : 		convert_float_to_int ( fy1, &y1 );

  000f1	8d 45 f0	 lea	 eax, DWORD PTR _y1$[ebp]
  000f4	50		 push	 eax
  000f5	51		 push	 ecx
  000f6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy1$[ebp]
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 752  : 		convert_float_to_int ( fx2, &x2 );

  00105	8d 45 ec	 lea	 eax, DWORD PTR _x2$[ebp]
  00108	50		 push	 eax
  00109	51		 push	 ecx
  0010a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fx2$[ebp]
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 753  : 		convert_float_to_int ( fy2, &y2 );

  00119	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  0011c	50		 push	 eax
  0011d	51		 push	 ecx
  0011e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy2$[ebp]
  00123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00128	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 754  : 	
; 755  : 		dx = x2 - x1;

  0012d	8b 45 ec	 mov	 eax, DWORD PTR _x2$[ebp]
  00130	2b 45 f4	 sub	 eax, DWORD PTR _x1$[ebp]
  00133	89 45 e4	 mov	 DWORD PTR _dx$[ebp], eax

; 756  : 	
; 757  : 		if ( dx < 0 )

  00136	0f 89 41 02 00
	00		 jns	 $LN54@draw_half_

; 758  : 		{
; 759  : 	
; 760  : 			dx = -dx;

  0013c	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  0013f	f7 d8		 neg	 eax
  00141	89 45 e4	 mov	 DWORD PTR _dx$[ebp], eax

; 761  : 	
; 762  : 			dy = y2 - y1;

  00144	8b 45 e8	 mov	 eax, DWORD PTR _y2$[ebp]
  00147	2b 45 f0	 sub	 eax, DWORD PTR _y1$[ebp]
  0014a	89 45 e0	 mov	 DWORD PTR _dy$[ebp], eax

; 763  : 	
; 764  : 			if ( dy < 0 )

  0014d	0f 89 19 01 00
	00		 jns	 $LN56@draw_half_

; 765  : 			{
; 766  : 	
; 767  : 				dy = -dy;

  00153	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  00156	f7 d8		 neg	 eax
  00158	89 45 e0	 mov	 DWORD PTR _dy$[ebp], eax

; 768  : 	
; 769  : 				if ( dx > dy )

  0015b	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  0015e	3b 45 e0	 cmp	 eax, DWORD PTR _dy$[ebp]
  00161	0f 8e 81 00 00
	00		 jle	 $LN58@draw_half_

; 770  : 				{
; 771  : 	
; 772  : 					error = ( ( dx + 1 ) >> 1 );

  00167	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  0016a	83 c0 01	 add	 eax, 1
  0016d	d1 f8		 sar	 eax, 1
  0016f	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 773  : 	
; 774  : 					for ( ; x1 >= x2; x1-- )

  00172	eb 09		 jmp	 SHORT $LN4@draw_half_
$LN2@draw_half_:
  00174	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00177	83 e8 01	 sub	 eax, 1
  0017a	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN4@draw_half_:
  0017d	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00180	3b 45 ec	 cmp	 eax, DWORD PTR _x2$[ebp]
  00183	7c 61		 jl	 SHORT $LN3@draw_half_

; 775  : 					{
; 776  : 	
; 777  : 						*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  00185	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00188	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0018c	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  0018f	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  00192	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  00196	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 778  : 	
; 779  : 						y = y1 - 1;

  0019a	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0019d	83 e8 01	 sub	 eax, 1
  001a0	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 780  : 	
; 781  : 						if ( y >= active_int_viewport.y_min )

  001a3	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001a6	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  001ac	7c 15		 jl	 SHORT $LN60@draw_half_

; 782  : 						{
; 783  : 	
; 784  : 							*((USHORT *) (screen_data + y * screen_pitch) + x1 ) = col;

  001ae	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001b1	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  001b5	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  001b8	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  001bb	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  001bf	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN60@draw_half_:

; 785  : 						}
; 786  : 	
; 787  : 						if ( ( error -= dy ) <= 0 )

  001c3	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  001c6	2b 45 e0	 sub	 eax, DWORD PTR _dy$[ebp]
  001c9	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  001cc	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  001d0	7f 12		 jg	 SHORT $LN61@draw_half_

; 788  : 						{
; 789  : 	
; 790  : 							error += dx;

  001d2	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  001d5	03 45 e4	 add	 eax, DWORD PTR _dx$[ebp]
  001d8	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 791  : 	
; 792  : 							y1--;

  001db	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  001de	83 e8 01	 sub	 eax, 1
  001e1	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN61@draw_half_:

; 793  : 						}
; 794  : 					}

  001e4	eb 8e		 jmp	 SHORT $LN2@draw_half_
$LN3@draw_half_:

; 795  : 				}
; 796  : 				else

  001e6	eb 7f		 jmp	 SHORT $LN6@draw_half_
$LN58@draw_half_:

; 797  : 				{
; 798  : 	
; 799  : 					error = ( (  dy + 1 ) >> 1 );

  001e8	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  001eb	83 c0 01	 add	 eax, 1
  001ee	d1 f8		 sar	 eax, 1
  001f0	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 800  : 	
; 801  : 					for ( ; y1>=y2; y1-- )

  001f3	eb 09		 jmp	 SHORT $LN7@draw_half_
$LN5@draw_half_:
  001f5	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  001f8	83 e8 01	 sub	 eax, 1
  001fb	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN7@draw_half_:
  001fe	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00201	3b 45 e8	 cmp	 eax, DWORD PTR _y2$[ebp]
  00204	7c 61		 jl	 SHORT $LN6@draw_half_

; 802  : 					{
; 803  : 	
; 804  : 						*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  00206	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00209	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0020d	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00210	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  00213	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  00217	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 805  : 	
; 806  : 						x = x1 - 1;

  0021b	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  0021e	83 e8 01	 sub	 eax, 1
  00221	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 807  : 	
; 808  : 						if ( x >= active_int_viewport.x_min )

  00224	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00227	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0022d	7c 15		 jl	 SHORT $LN62@draw_half_

; 809  : 						{
; 810  : 	
; 811  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x ) = col;

  0022f	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00232	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00236	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00239	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0023c	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  00240	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN62@draw_half_:

; 812  : 						}
; 813  : 	
; 814  : 						if ( ( error -= dx ) <= 0 )

  00244	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00247	2b 45 e4	 sub	 eax, DWORD PTR _dx$[ebp]
  0024a	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  0024d	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  00251	7f 12		 jg	 SHORT $LN63@draw_half_

; 815  : 						{
; 816  : 	
; 817  : 							error += dy;

  00253	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00256	03 45 e0	 add	 eax, DWORD PTR _dy$[ebp]
  00259	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 818  : 	
; 819  : 							x1--;

  0025c	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  0025f	83 e8 01	 sub	 eax, 1
  00262	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN63@draw_half_:

; 820  : 						}
; 821  : 					}

  00265	eb 8e		 jmp	 SHORT $LN5@draw_half_
$LN6@draw_half_:

; 822  : 				}
; 823  : 			}
; 824  : 			else

  00267	e9 0c 01 00 00	 jmp	 $LN12@draw_half_
$LN56@draw_half_:

; 825  : 			{
; 826  : 	
; 827  : 				if ( dx > dy )

  0026c	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  0026f	3b 45 e0	 cmp	 eax, DWORD PTR _dy$[ebp]
  00272	0f 8e 81 00 00
	00		 jle	 $LN64@draw_half_

; 828  : 				{
; 829  : 	
; 830  : 					error = ( ( dx + 1 ) >> 1 );

  00278	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  0027b	83 c0 01	 add	 eax, 1
  0027e	d1 f8		 sar	 eax, 1
  00280	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 831  : 	
; 832  : 					for ( ; x1 >= x2; x1-- )

  00283	eb 09		 jmp	 SHORT $LN10@draw_half_
$LN8@draw_half_:
  00285	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00288	83 e8 01	 sub	 eax, 1
  0028b	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN10@draw_half_:
  0028e	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00291	3b 45 ec	 cmp	 eax, DWORD PTR _x2$[ebp]
  00294	7c 61		 jl	 SHORT $LN9@draw_half_

; 833  : 					{
; 834  : 	
; 835  : 						*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  00296	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00299	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0029d	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  002a0	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  002a3	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  002a7	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 836  : 	
; 837  : 						y = y1 - 1;

  002ab	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  002ae	83 e8 01	 sub	 eax, 1
  002b1	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 838  : 	
; 839  : 						if ( y >= active_int_viewport.y_min )

  002b4	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  002b7	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  002bd	7c 15		 jl	 SHORT $LN66@draw_half_

; 840  : 						{
; 841  : 	
; 842  : 							*((USHORT *) (screen_data + y * screen_pitch) + x1 ) = col;

  002bf	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  002c2	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  002c6	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  002c9	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  002cc	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  002d0	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN66@draw_half_:

; 843  : 						}
; 844  : 	
; 845  : 						if ( ( error -= dy ) <= 0 )

  002d4	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  002d7	2b 45 e0	 sub	 eax, DWORD PTR _dy$[ebp]
  002da	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  002dd	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  002e1	7f 12		 jg	 SHORT $LN67@draw_half_

; 846  : 						{
; 847  : 	
; 848  : 							error += dx;

  002e3	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  002e6	03 45 e4	 add	 eax, DWORD PTR _dx$[ebp]
  002e9	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 849  : 	
; 850  : 							y1++;

  002ec	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  002ef	83 c0 01	 add	 eax, 1
  002f2	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN67@draw_half_:

; 851  : 						}
; 852  : 					}

  002f5	eb 8e		 jmp	 SHORT $LN8@draw_half_
$LN9@draw_half_:

; 853  : 				}
; 854  : 				else

  002f7	eb 7f		 jmp	 SHORT $LN12@draw_half_
$LN64@draw_half_:

; 855  : 				{
; 856  : 	
; 857  : 					error = ( ( dy + 1 ) >> 1 );

  002f9	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  002fc	83 c0 01	 add	 eax, 1
  002ff	d1 f8		 sar	 eax, 1
  00301	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 858  : 	
; 859  : 					for ( ; y1 <= y2; y1++ )

  00304	eb 09		 jmp	 SHORT $LN13@draw_half_
$LN11@draw_half_:
  00306	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00309	83 c0 01	 add	 eax, 1
  0030c	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN13@draw_half_:
  0030f	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00312	3b 45 e8	 cmp	 eax, DWORD PTR _y2$[ebp]
  00315	7f 61		 jg	 SHORT $LN12@draw_half_

; 860  : 					{
; 861  : 	
; 862  : 						*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  00317	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0031a	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0031e	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00321	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  00324	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  00328	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 863  : 	
; 864  : 						x = x1 - 1;

  0032c	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  0032f	83 e8 01	 sub	 eax, 1
  00332	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 865  : 	
; 866  : 						if ( x >= active_int_viewport.x_min )

  00335	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00338	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0033e	7c 15		 jl	 SHORT $LN68@draw_half_

; 867  : 						{
; 868  : 	
; 869  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x ) = col;

  00340	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00343	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00347	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  0034a	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0034d	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  00351	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN68@draw_half_:

; 870  : 						}
; 871  : 	
; 872  : 						if ( ( error -= dx ) <= 0 )

  00355	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00358	2b 45 e4	 sub	 eax, DWORD PTR _dx$[ebp]
  0035b	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  0035e	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  00362	7f 12		 jg	 SHORT $LN69@draw_half_

; 873  : 						{
; 874  : 	
; 875  : 							error += dy;

  00364	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00367	03 45 e0	 add	 eax, DWORD PTR _dy$[ebp]
  0036a	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 876  : 	
; 877  : 							x1--;

  0036d	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00370	83 e8 01	 sub	 eax, 1
  00373	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN69@draw_half_:

; 878  : 						}
; 879  : 					}

  00376	eb 8e		 jmp	 SHORT $LN11@draw_half_
$LN12@draw_half_:

; 880  : 				}
; 881  : 			}
; 882  : 		}
; 883  : 		else

  00378	e9 34 02 00 00	 jmp	 $LN24@draw_half_
$LN54@draw_half_:

; 884  : 		{
; 885  : 
; 886  : 			dy = y2 - y1;

  0037d	8b 45 e8	 mov	 eax, DWORD PTR _y2$[ebp]
  00380	2b 45 f0	 sub	 eax, DWORD PTR _y1$[ebp]
  00383	89 45 e0	 mov	 DWORD PTR _dy$[ebp], eax

; 887  : 	
; 888  : 			if ( dy < 0 )

  00386	0f 89 19 01 00
	00		 jns	 $LN70@draw_half_

; 889  : 			{
; 890  : 	
; 891  : 				dy = -dy;

  0038c	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  0038f	f7 d8		 neg	 eax
  00391	89 45 e0	 mov	 DWORD PTR _dy$[ebp], eax

; 892  : 	
; 893  : 				if ( dx > dy )

  00394	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  00397	3b 45 e0	 cmp	 eax, DWORD PTR _dy$[ebp]
  0039a	0f 8e 81 00 00
	00		 jle	 $LN72@draw_half_

; 894  : 				{
; 895  : 	
; 896  : 					error = ( ( dx + 1 ) >> 1 );

  003a0	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  003a3	83 c0 01	 add	 eax, 1
  003a6	d1 f8		 sar	 eax, 1
  003a8	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 897  : 	
; 898  : 					for ( ; x1 <= x2; x1++ )

  003ab	eb 09		 jmp	 SHORT $LN16@draw_half_
$LN14@draw_half_:
  003ad	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  003b0	83 c0 01	 add	 eax, 1
  003b3	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN16@draw_half_:
  003b6	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  003b9	3b 45 ec	 cmp	 eax, DWORD PTR _x2$[ebp]
  003bc	7f 61		 jg	 SHORT $LN15@draw_half_

; 899  : 					{
; 900  : 	
; 901  : 						*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  003be	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  003c1	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  003c5	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  003c8	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  003cb	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  003cf	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 902  : 	
; 903  : 						y = y1 - 1;

  003d3	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  003d6	83 e8 01	 sub	 eax, 1
  003d9	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 904  : 	
; 905  : 						if ( y >= active_int_viewport.y_min )

  003dc	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  003df	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  003e5	7c 15		 jl	 SHORT $LN74@draw_half_

; 906  : 						{
; 907  : 	
; 908  : 							*((USHORT *) (screen_data + y * screen_pitch) + x1 ) = col;

  003e7	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  003ea	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  003ee	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  003f1	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  003f4	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  003f8	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN74@draw_half_:

; 909  : 						}
; 910  : 	
; 911  : 						if ( ( error -= dy ) <= 0 )

  003fc	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  003ff	2b 45 e0	 sub	 eax, DWORD PTR _dy$[ebp]
  00402	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  00405	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  00409	7f 12		 jg	 SHORT $LN75@draw_half_

; 912  : 						{
; 913  : 	
; 914  : 							error += dx;

  0040b	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  0040e	03 45 e4	 add	 eax, DWORD PTR _dx$[ebp]
  00411	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 915  : 	
; 916  : 							y1--;

  00414	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00417	83 e8 01	 sub	 eax, 1
  0041a	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN75@draw_half_:

; 917  : 						}
; 918  : 					}

  0041d	eb 8e		 jmp	 SHORT $LN14@draw_half_
$LN15@draw_half_:

; 919  : 				}
; 920  : 				else

  0041f	eb 7f		 jmp	 SHORT $LN18@draw_half_
$LN72@draw_half_:

; 921  : 				{
; 922  : 	
; 923  : 					error = ( ( dy + 1 ) >> 1 );

  00421	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  00424	83 c0 01	 add	 eax, 1
  00427	d1 f8		 sar	 eax, 1
  00429	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 924  : 	
; 925  : 					for ( ; y1 >= y2; y1 -- )

  0042c	eb 09		 jmp	 SHORT $LN19@draw_half_
$LN17@draw_half_:
  0042e	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00431	83 e8 01	 sub	 eax, 1
  00434	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN19@draw_half_:
  00437	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0043a	3b 45 e8	 cmp	 eax, DWORD PTR _y2$[ebp]
  0043d	7c 61		 jl	 SHORT $LN18@draw_half_

; 926  : 					{
; 927  : 	
; 928  : 						*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  0043f	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00442	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00446	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00449	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  0044c	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  00450	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 929  : 	
; 930  : 						x = x1 - 1;

  00454	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00457	83 e8 01	 sub	 eax, 1
  0045a	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 931  : 	
; 932  : 						if ( x >= active_int_viewport.x_min )

  0045d	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00460	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00466	7c 15		 jl	 SHORT $LN76@draw_half_

; 933  : 						{
; 934  : 	
; 935  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x ) = col;

  00468	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0046b	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0046f	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00472	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00475	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  00479	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN76@draw_half_:

; 936  : 						}
; 937  : 	
; 938  : 						if ( ( error -= dx ) <= 0 )

  0047d	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00480	2b 45 e4	 sub	 eax, DWORD PTR _dx$[ebp]
  00483	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  00486	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  0048a	7f 12		 jg	 SHORT $LN77@draw_half_

; 939  : 						{
; 940  : 	
; 941  : 							error += dy;

  0048c	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  0048f	03 45 e0	 add	 eax, DWORD PTR _dy$[ebp]
  00492	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 942  : 	
; 943  : 							x1++;

  00495	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00498	83 c0 01	 add	 eax, 1
  0049b	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN77@draw_half_:

; 944  : 						}
; 945  : 					}

  0049e	eb 8e		 jmp	 SHORT $LN17@draw_half_
$LN18@draw_half_:

; 946  : 				}
; 947  : 			}
; 948  : 			else

  004a0	e9 0c 01 00 00	 jmp	 $LN24@draw_half_
$LN70@draw_half_:

; 949  : 			{
; 950  : 	
; 951  : 				if ( dx > dy )

  004a5	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  004a8	3b 45 e0	 cmp	 eax, DWORD PTR _dy$[ebp]
  004ab	0f 8e 81 00 00
	00		 jle	 $LN78@draw_half_

; 952  : 				{
; 953  : 	
; 954  : 					error = ( ( dx + 1 ) >> 1 );

  004b1	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  004b4	83 c0 01	 add	 eax, 1
  004b7	d1 f8		 sar	 eax, 1
  004b9	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 955  : 	
; 956  : 					for ( ; x1 <= x2; x1 ++ )

  004bc	eb 09		 jmp	 SHORT $LN22@draw_half_
$LN20@draw_half_:
  004be	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  004c1	83 c0 01	 add	 eax, 1
  004c4	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN22@draw_half_:
  004c7	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  004ca	3b 45 ec	 cmp	 eax, DWORD PTR _x2$[ebp]
  004cd	7f 61		 jg	 SHORT $LN21@draw_half_

; 957  : 					{
; 958  : 	
; 959  : 						*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  004cf	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  004d2	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  004d6	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  004d9	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  004dc	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  004e0	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 960  : 	
; 961  : 						y = y1 - 1;

  004e4	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  004e7	83 e8 01	 sub	 eax, 1
  004ea	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 962  : 	
; 963  : 						if ( y >= active_int_viewport.y_min )

  004ed	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  004f0	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  004f6	7c 15		 jl	 SHORT $LN80@draw_half_

; 964  : 						{
; 965  : 	
; 966  : 							*((USHORT *) (screen_data + y * screen_pitch) + x1 ) = col;

  004f8	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  004fb	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  004ff	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00502	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  00505	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  00509	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN80@draw_half_:

; 967  : 						}
; 968  : 	
; 969  : 						if ( ( error -= dy ) <= 0 )

  0050d	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00510	2b 45 e0	 sub	 eax, DWORD PTR _dy$[ebp]
  00513	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  00516	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  0051a	7f 12		 jg	 SHORT $LN81@draw_half_

; 970  : 						{
; 971  : 	
; 972  : 							error += dx;

  0051c	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  0051f	03 45 e4	 add	 eax, DWORD PTR _dx$[ebp]
  00522	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 973  : 	
; 974  : 							y1 ++;

  00525	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00528	83 c0 01	 add	 eax, 1
  0052b	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN81@draw_half_:

; 975  : 						}
; 976  : 					}

  0052e	eb 8e		 jmp	 SHORT $LN20@draw_half_
$LN21@draw_half_:

; 977  : 				}
; 978  : 				else

  00530	eb 7f		 jmp	 SHORT $LN24@draw_half_
$LN78@draw_half_:

; 979  : 				{
; 980  : 	
; 981  : 					error = ( ( dy + 1 ) >> 1 );

  00532	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  00535	83 c0 01	 add	 eax, 1
  00538	d1 f8		 sar	 eax, 1
  0053a	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 982  : 	
; 983  : 					for ( ; y1 <= y2; y1++ )

  0053d	eb 09		 jmp	 SHORT $LN25@draw_half_
$LN23@draw_half_:
  0053f	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00542	83 c0 01	 add	 eax, 1
  00545	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN25@draw_half_:
  00548	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0054b	3b 45 e8	 cmp	 eax, DWORD PTR _y2$[ebp]
  0054e	7f 61		 jg	 SHORT $LN24@draw_half_

; 984  : 					{
; 985  : 	
; 986  : 						*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  00550	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00553	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00557	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  0055a	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  0055d	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  00561	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 987  : 	
; 988  : 						x = x1 - 1;

  00565	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00568	83 e8 01	 sub	 eax, 1
  0056b	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 989  : 	
; 990  : 						if ( x >= active_int_viewport.x_min )

  0056e	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00571	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00577	7c 15		 jl	 SHORT $LN82@draw_half_

; 991  : 						{
; 992  : 	
; 993  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x ) = col;

  00579	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0057c	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00580	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00583	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00586	66 8b 55 d0	 mov	 dx, WORD PTR _col$2[ebp]
  0058a	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN82@draw_half_:

; 994  : 						}
; 995  : 	
; 996  : 						if ( ( error -= dx ) <= 0 )

  0058e	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00591	2b 45 e4	 sub	 eax, DWORD PTR _dx$[ebp]
  00594	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  00597	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  0059b	7f 12		 jg	 SHORT $LN83@draw_half_

; 997  : 						{
; 998  : 	
; 999  : 							error += dy;

  0059d	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  005a0	03 45 e0	 add	 eax, DWORD PTR _dy$[ebp]
  005a3	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1000 : 	
; 1001 : 							x1 ++;

  005a6	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  005a9	83 c0 01	 add	 eax, 1
  005ac	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN83@draw_half_:

; 1002 : 						}
; 1003 : 					}

  005af	eb 8e		 jmp	 SHORT $LN23@draw_half_
$LN24@draw_half_:

; 1004 : 				}
; 1005 : 			}
; 1006 : 		}
; 1007 : 	}
; 1008 : 	else

  005b1	e9 12 05 00 00	 jmp	 $LN48@draw_half_
$LN50@draw_half_:

; 1009 : 	{
; 1010 : 		
; 1011 : 		ULONG
; 1012 : 			col;
; 1013 : 	
; 1014 : 		ASSERT ( active_screen );

  005b6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  005bd	75 1a		 jne	 SHORT $LN84@draw_half_
  005bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA
  005c4	05 27 01 00 00	 add	 eax, 295		; 00000127H
  005c9	50		 push	 eax
  005ca	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@PIKNMACE@c?3?2users?2nhv90?2projects?2eech?2mo@
  005cf	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  005d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN84@draw_half_:

; 1015 : 		ASSERT ( get_screen_locked ( active_screen ) );

  005d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005de	50		 push	 eax
  005df	e8 00 00 00 00	 call	 ?get_screen_locked@@YGHPAUSCREEN@@@Z ; get_screen_locked
  005e4	85 c0		 test	 eax, eax
  005e6	75 1a		 jne	 SHORT $LN85@draw_half_
  005e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA
  005ed	05 28 01 00 00	 add	 eax, 296		; 00000128H
  005f2	50		 push	 eax
  005f3	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@PIKNMACE@c?3?2users?2nhv90?2projects?2eech?2mo@
  005f8	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@
  005fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN85@draw_half_:

; 1016 : 	
; 1017 : 		col = colour.colour;

  00602	8b 45 18	 mov	 eax, DWORD PTR _colour$[ebp]
  00605	89 45 cc	 mov	 DWORD PTR _col$1[ebp], eax

; 1018 : 	
; 1019 : 		screen_data = get_screen_data (active_screen);

  00608	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0060d	50		 push	 eax
  0060e	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00613	89 45 d4	 mov	 DWORD PTR _screen_data$[ebp], eax

; 1020 : 		screen_pitch = get_screen_pitch (active_screen);

  00616	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0061b	50		 push	 eax
  0061c	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00621	89 45 d8	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 1021 : 	
; 1022 : 		convert_float_to_int ( fx1, &x1 );

  00624	8d 45 f4	 lea	 eax, DWORD PTR _x1$[ebp]
  00627	50		 push	 eax
  00628	51		 push	 ecx
  00629	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx1$[ebp]
  0062e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00633	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1023 : 		convert_float_to_int ( fy1, &y1 );

  00638	8d 45 f0	 lea	 eax, DWORD PTR _y1$[ebp]
  0063b	50		 push	 eax
  0063c	51		 push	 ecx
  0063d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy1$[ebp]
  00642	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00647	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1024 : 		convert_float_to_int ( fx2, &x2 );

  0064c	8d 45 ec	 lea	 eax, DWORD PTR _x2$[ebp]
  0064f	50		 push	 eax
  00650	51		 push	 ecx
  00651	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fx2$[ebp]
  00656	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1025 : 		convert_float_to_int ( fy2, &y2 );

  00660	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00663	50		 push	 eax
  00664	51		 push	 ecx
  00665	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy2$[ebp]
  0066a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066f	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1026 : 	
; 1027 : 		dx = x2 - x1;

  00674	8b 45 ec	 mov	 eax, DWORD PTR _x2$[ebp]
  00677	2b 45 f4	 sub	 eax, DWORD PTR _x1$[ebp]
  0067a	89 45 e4	 mov	 DWORD PTR _dx$[ebp], eax

; 1028 : 	
; 1029 : 		if ( dx < 0 )

  0067d	0f 89 29 02 00
	00		 jns	 $LN86@draw_half_

; 1030 : 		{
; 1031 : 	
; 1032 : 			dx = -dx;

  00683	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  00686	f7 d8		 neg	 eax
  00688	89 45 e4	 mov	 DWORD PTR _dx$[ebp], eax

; 1033 : 	
; 1034 : 			dy = y2 - y1;

  0068b	8b 45 e8	 mov	 eax, DWORD PTR _y2$[ebp]
  0068e	2b 45 f0	 sub	 eax, DWORD PTR _y1$[ebp]
  00691	89 45 e0	 mov	 DWORD PTR _dy$[ebp], eax

; 1035 : 	
; 1036 : 			if ( dy < 0 )

  00694	0f 89 0d 01 00
	00		 jns	 $LN88@draw_half_

; 1037 : 			{
; 1038 : 	
; 1039 : 				dy = -dy;

  0069a	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  0069d	f7 d8		 neg	 eax
  0069f	89 45 e0	 mov	 DWORD PTR _dy$[ebp], eax

; 1040 : 	
; 1041 : 				if ( dx > dy )

  006a2	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  006a5	3b 45 e0	 cmp	 eax, DWORD PTR _dy$[ebp]
  006a8	7e 7d		 jle	 SHORT $LN90@draw_half_

; 1042 : 				{
; 1043 : 	
; 1044 : 					error = ( ( dx + 1 ) >> 1 );

  006aa	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  006ad	83 c0 01	 add	 eax, 1
  006b0	d1 f8		 sar	 eax, 1
  006b2	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1045 : 	
; 1046 : 					for ( ; x1 >= x2; x1-- )

  006b5	eb 09		 jmp	 SHORT $LN28@draw_half_
$LN26@draw_half_:
  006b7	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  006ba	83 e8 01	 sub	 eax, 1
  006bd	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN28@draw_half_:
  006c0	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  006c3	3b 45 ec	 cmp	 eax, DWORD PTR _x2$[ebp]
  006c6	7c 5d		 jl	 SHORT $LN27@draw_half_

; 1047 : 					{
; 1048 : 	
; 1049 : 						*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  006c8	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  006cb	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  006cf	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  006d2	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  006d5	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  006d8	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1050 : 	
; 1051 : 						y = y1 - 1;

  006db	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  006de	83 e8 01	 sub	 eax, 1
  006e1	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1052 : 	
; 1053 : 						if ( y >= active_int_viewport.y_min )

  006e4	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  006e7	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  006ed	7c 13		 jl	 SHORT $LN92@draw_half_

; 1054 : 						{
; 1055 : 	
; 1056 : 							*((ULONG *) (screen_data + y * screen_pitch) + x1 ) = col;

  006ef	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  006f2	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  006f6	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  006f9	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  006fc	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  006ff	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN92@draw_half_:

; 1057 : 						}
; 1058 : 	
; 1059 : 						if ( ( error -= dy ) <= 0 )

  00702	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00705	2b 45 e0	 sub	 eax, DWORD PTR _dy$[ebp]
  00708	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  0070b	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  0070f	7f 12		 jg	 SHORT $LN93@draw_half_

; 1060 : 						{
; 1061 : 	
; 1062 : 							error += dx;

  00711	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00714	03 45 e4	 add	 eax, DWORD PTR _dx$[ebp]
  00717	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1063 : 	
; 1064 : 							y1--;

  0071a	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0071d	83 e8 01	 sub	 eax, 1
  00720	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN93@draw_half_:

; 1065 : 						}
; 1066 : 					}

  00723	eb 92		 jmp	 SHORT $LN26@draw_half_
$LN27@draw_half_:

; 1067 : 				}
; 1068 : 				else

  00725	eb 7b		 jmp	 SHORT $LN30@draw_half_
$LN90@draw_half_:

; 1069 : 				{
; 1070 : 	
; 1071 : 					error = ( (  dy + 1 ) >> 1 );

  00727	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  0072a	83 c0 01	 add	 eax, 1
  0072d	d1 f8		 sar	 eax, 1
  0072f	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1072 : 	
; 1073 : 					for ( ; y1>=y2; y1-- )

  00732	eb 09		 jmp	 SHORT $LN31@draw_half_
$LN29@draw_half_:
  00734	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00737	83 e8 01	 sub	 eax, 1
  0073a	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN31@draw_half_:
  0073d	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00740	3b 45 e8	 cmp	 eax, DWORD PTR _y2$[ebp]
  00743	7c 5d		 jl	 SHORT $LN30@draw_half_

; 1074 : 					{
; 1075 : 	
; 1076 : 						*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  00745	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00748	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0074c	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  0074f	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  00752	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  00755	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1077 : 	
; 1078 : 						x = x1 - 1;

  00758	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  0075b	83 e8 01	 sub	 eax, 1
  0075e	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1079 : 	
; 1080 : 						if ( x >= active_int_viewport.x_min )

  00761	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00764	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0076a	7c 13		 jl	 SHORT $LN94@draw_half_

; 1081 : 						{
; 1082 : 	
; 1083 : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x ) = col;

  0076c	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0076f	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00773	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00776	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00779	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  0077c	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN94@draw_half_:

; 1084 : 						}
; 1085 : 	
; 1086 : 						if ( ( error -= dx ) <= 0 )

  0077f	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00782	2b 45 e4	 sub	 eax, DWORD PTR _dx$[ebp]
  00785	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  00788	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  0078c	7f 12		 jg	 SHORT $LN95@draw_half_

; 1087 : 						{
; 1088 : 	
; 1089 : 							error += dy;

  0078e	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00791	03 45 e0	 add	 eax, DWORD PTR _dy$[ebp]
  00794	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1090 : 	
; 1091 : 							x1--;

  00797	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  0079a	83 e8 01	 sub	 eax, 1
  0079d	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN95@draw_half_:

; 1092 : 						}
; 1093 : 					}

  007a0	eb 92		 jmp	 SHORT $LN29@draw_half_
$LN30@draw_half_:

; 1094 : 				}
; 1095 : 			}
; 1096 : 			else

  007a2	e9 00 01 00 00	 jmp	 $LN36@draw_half_
$LN88@draw_half_:

; 1097 : 			{
; 1098 : 	
; 1099 : 				if ( dx > dy )

  007a7	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  007aa	3b 45 e0	 cmp	 eax, DWORD PTR _dy$[ebp]
  007ad	7e 7d		 jle	 SHORT $LN96@draw_half_

; 1100 : 				{
; 1101 : 	
; 1102 : 					error = ( ( dx + 1 ) >> 1 );

  007af	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  007b2	83 c0 01	 add	 eax, 1
  007b5	d1 f8		 sar	 eax, 1
  007b7	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1103 : 	
; 1104 : 					for ( ; x1 >= x2; x1-- )

  007ba	eb 09		 jmp	 SHORT $LN34@draw_half_
$LN32@draw_half_:
  007bc	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  007bf	83 e8 01	 sub	 eax, 1
  007c2	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN34@draw_half_:
  007c5	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  007c8	3b 45 ec	 cmp	 eax, DWORD PTR _x2$[ebp]
  007cb	7c 5d		 jl	 SHORT $LN33@draw_half_

; 1105 : 					{
; 1106 : 	
; 1107 : 						*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  007cd	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  007d0	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  007d4	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  007d7	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  007da	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  007dd	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1108 : 	
; 1109 : 						y = y1 - 1;

  007e0	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  007e3	83 e8 01	 sub	 eax, 1
  007e6	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1110 : 	
; 1111 : 						if ( y >= active_int_viewport.y_min )

  007e9	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  007ec	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  007f2	7c 13		 jl	 SHORT $LN98@draw_half_

; 1112 : 						{
; 1113 : 	
; 1114 : 							*((ULONG *) (screen_data + y * screen_pitch) + x1 ) = col;

  007f4	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  007f7	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  007fb	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  007fe	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  00801	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  00804	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN98@draw_half_:

; 1115 : 						}
; 1116 : 	
; 1117 : 						if ( ( error -= dy ) <= 0 )

  00807	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  0080a	2b 45 e0	 sub	 eax, DWORD PTR _dy$[ebp]
  0080d	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  00810	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  00814	7f 12		 jg	 SHORT $LN99@draw_half_

; 1118 : 						{
; 1119 : 	
; 1120 : 							error += dx;

  00816	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00819	03 45 e4	 add	 eax, DWORD PTR _dx$[ebp]
  0081c	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1121 : 	
; 1122 : 							y1++;

  0081f	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00822	83 c0 01	 add	 eax, 1
  00825	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN99@draw_half_:

; 1123 : 						}
; 1124 : 					}

  00828	eb 92		 jmp	 SHORT $LN32@draw_half_
$LN33@draw_half_:

; 1125 : 				}
; 1126 : 				else

  0082a	eb 7b		 jmp	 SHORT $LN36@draw_half_
$LN96@draw_half_:

; 1127 : 				{
; 1128 : 	
; 1129 : 					error = ( ( dy + 1 ) >> 1 );

  0082c	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  0082f	83 c0 01	 add	 eax, 1
  00832	d1 f8		 sar	 eax, 1
  00834	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1130 : 	
; 1131 : 					for ( ; y1 <= y2; y1++ )

  00837	eb 09		 jmp	 SHORT $LN37@draw_half_
$LN35@draw_half_:
  00839	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0083c	83 c0 01	 add	 eax, 1
  0083f	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN37@draw_half_:
  00842	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00845	3b 45 e8	 cmp	 eax, DWORD PTR _y2$[ebp]
  00848	7f 5d		 jg	 SHORT $LN36@draw_half_

; 1132 : 					{
; 1133 : 	
; 1134 : 						*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  0084a	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0084d	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00851	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00854	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  00857	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  0085a	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1135 : 	
; 1136 : 						x = x1 - 1;

  0085d	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00860	83 e8 01	 sub	 eax, 1
  00863	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1137 : 	
; 1138 : 						if ( x >= active_int_viewport.x_min )

  00866	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00869	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0086f	7c 13		 jl	 SHORT $LN100@draw_half_

; 1139 : 						{
; 1140 : 	
; 1141 : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x ) = col;

  00871	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00874	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00878	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  0087b	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0087e	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  00881	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN100@draw_half_:

; 1142 : 						}
; 1143 : 	
; 1144 : 						if ( ( error -= dx ) <= 0 )

  00884	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00887	2b 45 e4	 sub	 eax, DWORD PTR _dx$[ebp]
  0088a	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  0088d	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  00891	7f 12		 jg	 SHORT $LN101@draw_half_

; 1145 : 						{
; 1146 : 	
; 1147 : 							error += dy;

  00893	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00896	03 45 e0	 add	 eax, DWORD PTR _dy$[ebp]
  00899	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1148 : 	
; 1149 : 							x1--;

  0089c	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  0089f	83 e8 01	 sub	 eax, 1
  008a2	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN101@draw_half_:

; 1150 : 						}
; 1151 : 					}

  008a5	eb 92		 jmp	 SHORT $LN35@draw_half_
$LN36@draw_half_:

; 1152 : 				}
; 1153 : 			}
; 1154 : 		}
; 1155 : 		else

  008a7	e9 1c 02 00 00	 jmp	 $LN48@draw_half_
$LN86@draw_half_:

; 1156 : 		{
; 1157 : 			dy = y2 - y1;

  008ac	8b 45 e8	 mov	 eax, DWORD PTR _y2$[ebp]
  008af	2b 45 f0	 sub	 eax, DWORD PTR _y1$[ebp]
  008b2	89 45 e0	 mov	 DWORD PTR _dy$[ebp], eax

; 1158 : 	
; 1159 : 			if ( dy < 0 )

  008b5	0f 89 0d 01 00
	00		 jns	 $LN102@draw_half_

; 1160 : 			{
; 1161 : 	
; 1162 : 				dy = -dy;

  008bb	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  008be	f7 d8		 neg	 eax
  008c0	89 45 e0	 mov	 DWORD PTR _dy$[ebp], eax

; 1163 : 	
; 1164 : 				if ( dx > dy )

  008c3	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  008c6	3b 45 e0	 cmp	 eax, DWORD PTR _dy$[ebp]
  008c9	7e 7d		 jle	 SHORT $LN104@draw_half_

; 1165 : 				{
; 1166 : 	
; 1167 : 					error = ( ( dx + 1 ) >> 1 );

  008cb	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  008ce	83 c0 01	 add	 eax, 1
  008d1	d1 f8		 sar	 eax, 1
  008d3	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1168 : 	
; 1169 : 					for ( ; x1 <= x2; x1++ )

  008d6	eb 09		 jmp	 SHORT $LN40@draw_half_
$LN38@draw_half_:
  008d8	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  008db	83 c0 01	 add	 eax, 1
  008de	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN40@draw_half_:
  008e1	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  008e4	3b 45 ec	 cmp	 eax, DWORD PTR _x2$[ebp]
  008e7	7f 5d		 jg	 SHORT $LN39@draw_half_

; 1170 : 					{
; 1171 : 	
; 1172 : 						*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  008e9	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  008ec	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  008f0	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  008f3	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  008f6	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  008f9	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1173 : 	
; 1174 : 						y = y1 - 1;

  008fc	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  008ff	83 e8 01	 sub	 eax, 1
  00902	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1175 : 	
; 1176 : 						if ( y >= active_int_viewport.y_min )

  00905	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00908	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0090e	7c 13		 jl	 SHORT $LN106@draw_half_

; 1177 : 						{
; 1178 : 	
; 1179 : 							*((ULONG *) (screen_data + y * screen_pitch) + x1 ) = col;

  00910	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00913	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00917	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  0091a	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  0091d	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  00920	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN106@draw_half_:

; 1180 : 						}
; 1181 : 	
; 1182 : 						if ( ( error -= dy ) <= 0 )

  00923	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00926	2b 45 e0	 sub	 eax, DWORD PTR _dy$[ebp]
  00929	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  0092c	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  00930	7f 12		 jg	 SHORT $LN107@draw_half_

; 1183 : 						{
; 1184 : 	
; 1185 : 							error += dx;

  00932	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00935	03 45 e4	 add	 eax, DWORD PTR _dx$[ebp]
  00938	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1186 : 	
; 1187 : 							y1--;

  0093b	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  0093e	83 e8 01	 sub	 eax, 1
  00941	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN107@draw_half_:

; 1188 : 						}
; 1189 : 					}

  00944	eb 92		 jmp	 SHORT $LN38@draw_half_
$LN39@draw_half_:

; 1190 : 				}
; 1191 : 				else

  00946	eb 7b		 jmp	 SHORT $LN42@draw_half_
$LN104@draw_half_:

; 1192 : 				{
; 1193 : 	
; 1194 : 					error = ( ( dy + 1 ) >> 1 );

  00948	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  0094b	83 c0 01	 add	 eax, 1
  0094e	d1 f8		 sar	 eax, 1
  00950	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1195 : 	
; 1196 : 					for ( ; y1 >= y2; y1 -- )

  00953	eb 09		 jmp	 SHORT $LN43@draw_half_
$LN41@draw_half_:
  00955	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00958	83 e8 01	 sub	 eax, 1
  0095b	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN43@draw_half_:
  0095e	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00961	3b 45 e8	 cmp	 eax, DWORD PTR _y2$[ebp]
  00964	7c 5d		 jl	 SHORT $LN42@draw_half_

; 1197 : 					{
; 1198 : 	
; 1199 : 						*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  00966	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00969	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0096d	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00970	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  00973	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  00976	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1200 : 	
; 1201 : 						x = x1 - 1;

  00979	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  0097c	83 e8 01	 sub	 eax, 1
  0097f	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1202 : 	
; 1203 : 						if ( x >= active_int_viewport.x_min )

  00982	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00985	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0098b	7c 13		 jl	 SHORT $LN108@draw_half_

; 1204 : 						{
; 1205 : 	
; 1206 : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x ) = col;

  0098d	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00990	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00994	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00997	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0099a	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  0099d	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN108@draw_half_:

; 1207 : 						}
; 1208 : 	
; 1209 : 						if ( ( error -= dx ) <= 0 )

  009a0	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  009a3	2b 45 e4	 sub	 eax, DWORD PTR _dx$[ebp]
  009a6	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  009a9	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  009ad	7f 12		 jg	 SHORT $LN109@draw_half_

; 1210 : 						{
; 1211 : 	
; 1212 : 							error += dy;

  009af	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  009b2	03 45 e0	 add	 eax, DWORD PTR _dy$[ebp]
  009b5	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1213 : 	
; 1214 : 							x1++;

  009b8	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  009bb	83 c0 01	 add	 eax, 1
  009be	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN109@draw_half_:

; 1215 : 						}
; 1216 : 					}

  009c1	eb 92		 jmp	 SHORT $LN41@draw_half_
$LN42@draw_half_:

; 1217 : 				}
; 1218 : 			}
; 1219 : 			else

  009c3	e9 00 01 00 00	 jmp	 $LN48@draw_half_
$LN102@draw_half_:

; 1220 : 			{
; 1221 : 	
; 1222 : 				if ( dx > dy )

  009c8	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  009cb	3b 45 e0	 cmp	 eax, DWORD PTR _dy$[ebp]
  009ce	7e 7d		 jle	 SHORT $LN110@draw_half_

; 1223 : 				{
; 1224 : 	
; 1225 : 					error = ( ( dx + 1 ) >> 1 );

  009d0	8b 45 e4	 mov	 eax, DWORD PTR _dx$[ebp]
  009d3	83 c0 01	 add	 eax, 1
  009d6	d1 f8		 sar	 eax, 1
  009d8	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1226 : 	
; 1227 : 					for ( ; x1 <= x2; x1 ++ )

  009db	eb 09		 jmp	 SHORT $LN46@draw_half_
$LN44@draw_half_:
  009dd	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  009e0	83 c0 01	 add	 eax, 1
  009e3	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN46@draw_half_:
  009e6	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  009e9	3b 45 ec	 cmp	 eax, DWORD PTR _x2$[ebp]
  009ec	7f 5d		 jg	 SHORT $LN45@draw_half_

; 1228 : 					{
; 1229 : 	
; 1230 : 						*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  009ee	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  009f1	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  009f5	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  009f8	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  009fb	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  009fe	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1231 : 	
; 1232 : 						y = y1 - 1;

  00a01	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00a04	83 e8 01	 sub	 eax, 1
  00a07	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1233 : 	
; 1234 : 						if ( y >= active_int_viewport.y_min )

  00a0a	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00a0d	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00a13	7c 13		 jl	 SHORT $LN112@draw_half_

; 1235 : 						{
; 1236 : 	
; 1237 : 							*((ULONG *) (screen_data + y * screen_pitch) + x1 ) = col;

  00a15	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00a18	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00a1c	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00a1f	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  00a22	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  00a25	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN112@draw_half_:

; 1238 : 						}
; 1239 : 	
; 1240 : 						if ( ( error -= dy ) <= 0 )

  00a28	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00a2b	2b 45 e0	 sub	 eax, DWORD PTR _dy$[ebp]
  00a2e	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  00a31	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  00a35	7f 12		 jg	 SHORT $LN113@draw_half_

; 1241 : 						{
; 1242 : 	
; 1243 : 							error += dx;

  00a37	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00a3a	03 45 e4	 add	 eax, DWORD PTR _dx$[ebp]
  00a3d	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1244 : 	
; 1245 : 							y1 ++;

  00a40	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00a43	83 c0 01	 add	 eax, 1
  00a46	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN113@draw_half_:

; 1246 : 						}
; 1247 : 					}

  00a49	eb 92		 jmp	 SHORT $LN44@draw_half_
$LN45@draw_half_:

; 1248 : 				}
; 1249 : 				else

  00a4b	eb 7b		 jmp	 SHORT $LN48@draw_half_
$LN110@draw_half_:

; 1250 : 				{
; 1251 : 	
; 1252 : 					error = ( ( dy + 1 ) >> 1 );

  00a4d	8b 45 e0	 mov	 eax, DWORD PTR _dy$[ebp]
  00a50	83 c0 01	 add	 eax, 1
  00a53	d1 f8		 sar	 eax, 1
  00a55	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1253 : 	
; 1254 : 					for ( ; y1 <= y2; y1++ )

  00a58	eb 09		 jmp	 SHORT $LN49@draw_half_
$LN47@draw_half_:
  00a5a	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00a5d	83 c0 01	 add	 eax, 1
  00a60	89 45 f0	 mov	 DWORD PTR _y1$[ebp], eax
$LN49@draw_half_:
  00a63	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00a66	3b 45 e8	 cmp	 eax, DWORD PTR _y2$[ebp]
  00a69	7f 5d		 jg	 SHORT $LN48@draw_half_

; 1255 : 					{
; 1256 : 	
; 1257 : 						*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  00a6b	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00a6e	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00a72	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00a75	8b 4d f4	 mov	 ecx, DWORD PTR _x1$[ebp]
  00a78	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  00a7b	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1258 : 	
; 1259 : 						x = x1 - 1;

  00a7e	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00a81	83 e8 01	 sub	 eax, 1
  00a84	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1260 : 	
; 1261 : 						if ( x >= active_int_viewport.x_min )

  00a87	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00a8a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00a90	7c 13		 jl	 SHORT $LN114@draw_half_

; 1262 : 						{
; 1263 : 	
; 1264 : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x ) = col;

  00a92	8b 45 f0	 mov	 eax, DWORD PTR _y1$[ebp]
  00a95	0f af 45 d8	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00a99	03 45 d4	 add	 eax, DWORD PTR _screen_data$[ebp]
  00a9c	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00a9f	8b 55 cc	 mov	 edx, DWORD PTR _col$1[ebp]
  00aa2	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN114@draw_half_:

; 1265 : 						}
; 1266 : 	
; 1267 : 						if ( ( error -= dx ) <= 0 )

  00aa5	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00aa8	2b 45 e4	 sub	 eax, DWORD PTR _dx$[ebp]
  00aab	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax
  00aae	83 7d dc 00	 cmp	 DWORD PTR _error$[ebp], 0
  00ab2	7f 12		 jg	 SHORT $LN115@draw_half_

; 1268 : 						{
; 1269 : 	
; 1270 : 							error += dy;

  00ab4	8b 45 dc	 mov	 eax, DWORD PTR _error$[ebp]
  00ab7	03 45 e0	 add	 eax, DWORD PTR _dy$[ebp]
  00aba	89 45 dc	 mov	 DWORD PTR _error$[ebp], eax

; 1271 : 	
; 1272 : 							x1 ++;

  00abd	8b 45 f4	 mov	 eax, DWORD PTR _x1$[ebp]
  00ac0	83 c0 01	 add	 eax, 1
  00ac3	89 45 f4	 mov	 DWORD PTR _x1$[ebp], eax
$LN115@draw_half_:

; 1273 : 						}
; 1274 : 					}

  00ac6	eb 92		 jmp	 SHORT $LN47@draw_half_
$LN48@draw_half_:

; 1275 : 				}
; 1276 : 			}
; 1277 : 		}
; 1278 : 	}
; 1279 : }

  00ac8	5f		 pop	 edi
  00ac9	5e		 pop	 esi
  00aca	5b		 pop	 ebx
  00acb	8b e5		 mov	 esp, ebp
  00acd	5d		 pop	 ebp
  00ace	c2 14 00	 ret	 20			; 00000014H
?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ENDP	; draw_half_thick_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\line.c
;	COMDAT ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_col$1 = -200						; size = 4
_outcode2$2 = -196					; size = 4
_outcode$3 = -192					; size = 4
_vertices$4 = -188					; size = 4
_line$5 = -184						; size = 128
_point2$6 = -56						; size = 4
_point1$7 = -52						; size = 4
_poly$8 = -48						; size = 4
_col$9 = -44						; size = 4
_col$10 = -40						; size = 2
_screen_data$11 = -36					; size = 4
_screen_pitch$12 = -32					; size = 4
_error$13 = -28						; size = 4
_dy$14 = -24						; size = 4
_dx$15 = -20						; size = 4
_y2$16 = -16						; size = 4
_x2$17 = -12						; size = 4
_y1$18 = -8						; size = 4
_x1$19 = -4						; size = 4
_fx1$ = 8						; size = 4
_fy1$ = 12						; size = 4
_fx2$ = 16						; size = 4
_fy2$ = 20						; size = 4
_colour$ = 24						; size = 4
?draw_line@@YGXMMMMUREAL_COLOUR@@@Z PROC		; draw_line, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 89   : 
; 90   : 	ASSERT ( active_screen );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 18		 jne	 SHORT $LN50@draw_line
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_line@@YGXMMMMUREAL_COLOUR@@@Z@4JA
  0001a	83 c0 02	 add	 eax, 2
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@PIKNMACE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN50@draw_line:

; 91   : 
; 92   : 	if ( get_screen_locked ( active_screen ) )

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?get_screen_locked@@YGHPAUSCREEN@@@Z ; get_screen_locked
  00038	85 c0		 test	 eax, eax
  0003a	0f 84 a0 07 00
	00		 je	 $LN51@draw_line

; 93   : 	{
; 94   : 	
; 95   : 		int
; 96   : 			x1,
; 97   : 			y1,
; 98   : 			x2,
; 99   : 			y2,
; 100  : 			dx,
; 101  : 			dy,
; 102  : 			error,
; 103  : 			screen_pitch;
; 104  : 		
; 105  : 
; 106  : 		unsigned char
; 107  : 			*screen_data;
; 108  : 	
; 109  : 		if ( active_screen->pixel_length <= 16 )

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00045	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00049	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0004c	0f 8f fb 03 00
	00		 jg	 $LN53@draw_line

; 110  : 		{
; 111  : 		
; 112  : 			unsigned short int
; 113  : 				col;
; 114  : 	
; 115  : 			col = get_packed_colour (colour);

  00052	0f b6 45 1a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  00056	c1 e0 18	 shl	 eax, 24			; 00000018H
  00059	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00065	d3 e8		 shr	 eax, cl
  00067	0f b6 55 19	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  0006b	c1 e2 18	 shl	 edx, 24			; 00000018H
  0006e	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  0007a	d3 ea		 shr	 edx, cl
  0007c	0b c2		 or	 eax, edx
  0007e	0f b6 55 18	 movzx	 edx, BYTE PTR _colour$[ebp]
  00082	c1 e2 18	 shl	 edx, 24			; 00000018H
  00085	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00091	d3 ea		 shr	 edx, cl
  00093	0b c2		 or	 eax, edx
  00095	0f b6 55 1b	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  00099	c1 e2 18	 shl	 edx, 24			; 00000018H
  0009c	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  000a8	d3 ea		 shr	 edx, cl
  000aa	0b c2		 or	 eax, edx
  000ac	66 89 45 d8	 mov	 WORD PTR _col$10[ebp], ax

; 116  : 		
; 117  : 			screen_data = get_screen_data (active_screen);

  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000bb	89 45 dc	 mov	 DWORD PTR _screen_data$11[ebp], eax

; 118  : 			screen_pitch = get_screen_pitch (active_screen);

  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  000c9	89 45 e0	 mov	 DWORD PTR _screen_pitch$12[ebp], eax

; 119  : 		
; 120  : 			convert_float_to_int ( fx1, &x1 );

  000cc	8d 45 fc	 lea	 eax, DWORD PTR _x1$19[ebp]
  000cf	50		 push	 eax
  000d0	51		 push	 ecx
  000d1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx1$[ebp]
  000d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000db	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 121  : 			convert_float_to_int ( fy1, &y1 );

  000e0	8d 45 f8	 lea	 eax, DWORD PTR _y1$18[ebp]
  000e3	50		 push	 eax
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy1$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 122  : 			convert_float_to_int ( fx2, &x2 );

  000f4	8d 45 f4	 lea	 eax, DWORD PTR _x2$17[ebp]
  000f7	50		 push	 eax
  000f8	51		 push	 ecx
  000f9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fx2$[ebp]
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 123  : 			convert_float_to_int ( fy2, &y2 );

  00108	8d 45 f0	 lea	 eax, DWORD PTR _y2$16[ebp]
  0010b	50		 push	 eax
  0010c	51		 push	 ecx
  0010d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy2$[ebp]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 124  : 		
; 125  : 			dx = x2 - x1;

  0011c	8b 45 f4	 mov	 eax, DWORD PTR _x2$17[ebp]
  0011f	2b 45 fc	 sub	 eax, DWORD PTR _x1$19[ebp]
  00122	89 45 ec	 mov	 DWORD PTR _dx$15[ebp], eax

; 126  : 		
; 127  : 			if ( dx < 0 )

  00125	0f 89 95 01 00
	00		 jns	 $LN55@draw_line

; 128  : 			{
; 129  : 		
; 130  : 				dx = -dx;

  0012b	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  0012e	f7 d8		 neg	 eax
  00130	89 45 ec	 mov	 DWORD PTR _dx$15[ebp], eax

; 131  : 		
; 132  : 				dy = y2 - y1;

  00133	8b 45 f0	 mov	 eax, DWORD PTR _y2$16[ebp]
  00136	2b 45 f8	 sub	 eax, DWORD PTR _y1$18[ebp]
  00139	89 45 e8	 mov	 DWORD PTR _dy$14[ebp], eax

; 133  : 		
; 134  : 				if ( dy < 0 )

  0013c	0f 89 c3 00 00
	00		 jns	 $LN57@draw_line

; 135  : 				{
; 136  : 		
; 137  : 					dy = -dy;

  00142	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  00145	f7 d8		 neg	 eax
  00147	89 45 e8	 mov	 DWORD PTR _dy$14[ebp], eax

; 138  : 		
; 139  : 					if ( dx > dy )

  0014a	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  0014d	3b 45 e8	 cmp	 eax, DWORD PTR _dy$14[ebp]
  00150	7e 58		 jle	 SHORT $LN59@draw_line

; 140  : 					{
; 141  : 		
; 142  : 						error = ( ( dx + 1 ) >> 1 );

  00152	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  00155	83 c0 01	 add	 eax, 1
  00158	d1 f8		 sar	 eax, 1
  0015a	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 143  : 		
; 144  : 						for ( ; x1 >= x2; x1-- )

  0015d	eb 09		 jmp	 SHORT $LN4@draw_line
$LN2@draw_line:
  0015f	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  00162	83 e8 01	 sub	 eax, 1
  00165	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN4@draw_line:
  00168	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  0016b	3b 45 f4	 cmp	 eax, DWORD PTR _x2$17[ebp]
  0016e	7c 38		 jl	 SHORT $LN3@draw_line

; 145  : 						{
; 146  : 		
; 147  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  00170	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00173	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  00177	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  0017a	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  0017d	66 8b 55 d8	 mov	 dx, WORD PTR _col$10[ebp]
  00181	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 148  : 		
; 149  : 							if ( ( error -= dy ) <= 0 )

  00185	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00188	2b 45 e8	 sub	 eax, DWORD PTR _dy$14[ebp]
  0018b	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  0018e	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  00192	7f 12		 jg	 SHORT $LN61@draw_line

; 150  : 							{
; 151  : 		
; 152  : 								error += dx;

  00194	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00197	03 45 ec	 add	 eax, DWORD PTR _dx$15[ebp]
  0019a	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 153  : 		
; 154  : 								y1--;

  0019d	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  001a0	83 e8 01	 sub	 eax, 1
  001a3	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN61@draw_line:

; 155  : 							}
; 156  : 						}

  001a6	eb b7		 jmp	 SHORT $LN2@draw_line
$LN3@draw_line:

; 157  : 					}
; 158  : 					else

  001a8	eb 56		 jmp	 SHORT $LN6@draw_line
$LN59@draw_line:

; 159  : 					{
; 160  : 		
; 161  : 						error = ( (  dy + 1 ) >> 1 );

  001aa	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  001ad	83 c0 01	 add	 eax, 1
  001b0	d1 f8		 sar	 eax, 1
  001b2	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 162  : 		
; 163  : 						for ( ; y1>=y2; y1-- )

  001b5	eb 09		 jmp	 SHORT $LN7@draw_line
$LN5@draw_line:
  001b7	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  001ba	83 e8 01	 sub	 eax, 1
  001bd	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN7@draw_line:
  001c0	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  001c3	3b 45 f0	 cmp	 eax, DWORD PTR _y2$16[ebp]
  001c6	7c 38		 jl	 SHORT $LN6@draw_line

; 164  : 						{
; 165  : 		
; 166  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  001c8	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  001cb	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  001cf	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  001d2	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  001d5	66 8b 55 d8	 mov	 dx, WORD PTR _col$10[ebp]
  001d9	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 167  : 		
; 168  : 							if ( ( error -= dx ) <= 0 )

  001dd	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  001e0	2b 45 ec	 sub	 eax, DWORD PTR _dx$15[ebp]
  001e3	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  001e6	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  001ea	7f 12		 jg	 SHORT $LN62@draw_line

; 169  : 							{
; 170  : 		
; 171  : 								error += dy;

  001ec	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  001ef	03 45 e8	 add	 eax, DWORD PTR _dy$14[ebp]
  001f2	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 172  : 		
; 173  : 								x1--;

  001f5	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  001f8	83 e8 01	 sub	 eax, 1
  001fb	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN62@draw_line:

; 174  : 							}
; 175  : 						}

  001fe	eb b7		 jmp	 SHORT $LN5@draw_line
$LN6@draw_line:

; 176  : 					}
; 177  : 				}
; 178  : 				else

  00200	e9 b6 00 00 00	 jmp	 $LN12@draw_line
$LN57@draw_line:

; 179  : 				{
; 180  : 		
; 181  : 					if ( dx > dy )

  00205	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  00208	3b 45 e8	 cmp	 eax, DWORD PTR _dy$14[ebp]
  0020b	7e 58		 jle	 SHORT $LN63@draw_line

; 182  : 					{
; 183  : 		
; 184  : 						error = ( ( dx + 1 ) >> 1 );

  0020d	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  00210	83 c0 01	 add	 eax, 1
  00213	d1 f8		 sar	 eax, 1
  00215	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 185  : 		
; 186  : 						for ( ; x1 >= x2; x1-- )

  00218	eb 09		 jmp	 SHORT $LN10@draw_line
$LN8@draw_line:
  0021a	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  0021d	83 e8 01	 sub	 eax, 1
  00220	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN10@draw_line:
  00223	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  00226	3b 45 f4	 cmp	 eax, DWORD PTR _x2$17[ebp]
  00229	7c 38		 jl	 SHORT $LN9@draw_line

; 187  : 						{
; 188  : 		
; 189  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  0022b	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  0022e	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  00232	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  00235	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  00238	66 8b 55 d8	 mov	 dx, WORD PTR _col$10[ebp]
  0023c	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 190  : 		
; 191  : 							if ( ( error -= dy ) <= 0 )

  00240	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00243	2b 45 e8	 sub	 eax, DWORD PTR _dy$14[ebp]
  00246	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  00249	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  0024d	7f 12		 jg	 SHORT $LN65@draw_line

; 192  : 							{
; 193  : 		
; 194  : 								error += dx;

  0024f	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00252	03 45 ec	 add	 eax, DWORD PTR _dx$15[ebp]
  00255	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 195  : 		
; 196  : 								y1++;

  00258	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  0025b	83 c0 01	 add	 eax, 1
  0025e	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN65@draw_line:

; 197  : 							}
; 198  : 						}

  00261	eb b7		 jmp	 SHORT $LN8@draw_line
$LN9@draw_line:

; 199  : 					}
; 200  : 					else

  00263	eb 56		 jmp	 SHORT $LN12@draw_line
$LN63@draw_line:

; 201  : 					{
; 202  : 		
; 203  : 						error = ( ( dy + 1 ) >> 1 );

  00265	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  00268	83 c0 01	 add	 eax, 1
  0026b	d1 f8		 sar	 eax, 1
  0026d	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 204  : 		
; 205  : 						for ( ; y1 <= y2; y1++ )

  00270	eb 09		 jmp	 SHORT $LN13@draw_line
$LN11@draw_line:
  00272	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00275	83 c0 01	 add	 eax, 1
  00278	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN13@draw_line:
  0027b	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  0027e	3b 45 f0	 cmp	 eax, DWORD PTR _y2$16[ebp]
  00281	7f 38		 jg	 SHORT $LN12@draw_line

; 206  : 						{
; 207  : 		
; 208  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  00283	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00286	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  0028a	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  0028d	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  00290	66 8b 55 d8	 mov	 dx, WORD PTR _col$10[ebp]
  00294	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 209  : 		
; 210  : 							if ( ( error -= dx ) <= 0 )

  00298	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  0029b	2b 45 ec	 sub	 eax, DWORD PTR _dx$15[ebp]
  0029e	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  002a1	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  002a5	7f 12		 jg	 SHORT $LN66@draw_line

; 211  : 							{
; 212  : 		
; 213  : 								error += dy;

  002a7	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  002aa	03 45 e8	 add	 eax, DWORD PTR _dy$14[ebp]
  002ad	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 214  : 		
; 215  : 								x1--;

  002b0	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  002b3	83 e8 01	 sub	 eax, 1
  002b6	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN66@draw_line:

; 216  : 							}
; 217  : 						}

  002b9	eb b7		 jmp	 SHORT $LN11@draw_line
$LN12@draw_line:

; 218  : 					}
; 219  : 				}
; 220  : 			}
; 221  : 			else

  002bb	e9 88 01 00 00	 jmp	 $LN24@draw_line
$LN55@draw_line:

; 222  : 			{
; 223  : 				dy = y2 - y1;

  002c0	8b 45 f0	 mov	 eax, DWORD PTR _y2$16[ebp]
  002c3	2b 45 f8	 sub	 eax, DWORD PTR _y1$18[ebp]
  002c6	89 45 e8	 mov	 DWORD PTR _dy$14[ebp], eax

; 224  : 		
; 225  : 				if ( dy < 0 )

  002c9	0f 89 c3 00 00
	00		 jns	 $LN67@draw_line

; 226  : 				{
; 227  : 		
; 228  : 					dy = -dy;

  002cf	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  002d2	f7 d8		 neg	 eax
  002d4	89 45 e8	 mov	 DWORD PTR _dy$14[ebp], eax

; 229  : 		
; 230  : 					if ( dx > dy )

  002d7	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  002da	3b 45 e8	 cmp	 eax, DWORD PTR _dy$14[ebp]
  002dd	7e 58		 jle	 SHORT $LN69@draw_line

; 231  : 					{
; 232  : 		
; 233  : 						error = ( ( dx + 1 ) >> 1 );

  002df	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  002e2	83 c0 01	 add	 eax, 1
  002e5	d1 f8		 sar	 eax, 1
  002e7	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 234  : 		
; 235  : 						for ( ; x1 <= x2; x1++ )

  002ea	eb 09		 jmp	 SHORT $LN16@draw_line
$LN14@draw_line:
  002ec	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  002ef	83 c0 01	 add	 eax, 1
  002f2	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN16@draw_line:
  002f5	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  002f8	3b 45 f4	 cmp	 eax, DWORD PTR _x2$17[ebp]
  002fb	7f 38		 jg	 SHORT $LN15@draw_line

; 236  : 						{
; 237  : 		
; 238  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  002fd	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00300	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  00304	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  00307	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  0030a	66 8b 55 d8	 mov	 dx, WORD PTR _col$10[ebp]
  0030e	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 239  : 		
; 240  : 							if ( ( error -= dy ) <= 0 )

  00312	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00315	2b 45 e8	 sub	 eax, DWORD PTR _dy$14[ebp]
  00318	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  0031b	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  0031f	7f 12		 jg	 SHORT $LN71@draw_line

; 241  : 							{
; 242  : 		
; 243  : 								error += dx;

  00321	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00324	03 45 ec	 add	 eax, DWORD PTR _dx$15[ebp]
  00327	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 244  : 		
; 245  : 								y1--;

  0032a	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  0032d	83 e8 01	 sub	 eax, 1
  00330	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN71@draw_line:

; 246  : 							}
; 247  : 						}

  00333	eb b7		 jmp	 SHORT $LN14@draw_line
$LN15@draw_line:

; 248  : 					}
; 249  : 					else

  00335	eb 56		 jmp	 SHORT $LN18@draw_line
$LN69@draw_line:

; 250  : 					{
; 251  : 		
; 252  : 						error = ( ( dy + 1 ) >> 1 );

  00337	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  0033a	83 c0 01	 add	 eax, 1
  0033d	d1 f8		 sar	 eax, 1
  0033f	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 253  : 		
; 254  : 						for ( ; y1 >= y2; y1 -- )

  00342	eb 09		 jmp	 SHORT $LN19@draw_line
$LN17@draw_line:
  00344	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00347	83 e8 01	 sub	 eax, 1
  0034a	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN19@draw_line:
  0034d	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00350	3b 45 f0	 cmp	 eax, DWORD PTR _y2$16[ebp]
  00353	7c 38		 jl	 SHORT $LN18@draw_line

; 255  : 						{
; 256  : 		
; 257  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  00355	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00358	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  0035c	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  0035f	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  00362	66 8b 55 d8	 mov	 dx, WORD PTR _col$10[ebp]
  00366	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 258  : 		
; 259  : 							if ( ( error -= dx ) <= 0 )

  0036a	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  0036d	2b 45 ec	 sub	 eax, DWORD PTR _dx$15[ebp]
  00370	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  00373	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  00377	7f 12		 jg	 SHORT $LN72@draw_line

; 260  : 							{
; 261  : 		
; 262  : 								error += dy;

  00379	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  0037c	03 45 e8	 add	 eax, DWORD PTR _dy$14[ebp]
  0037f	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 263  : 		
; 264  : 								x1++;

  00382	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  00385	83 c0 01	 add	 eax, 1
  00388	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN72@draw_line:

; 265  : 							}
; 266  : 						}

  0038b	eb b7		 jmp	 SHORT $LN17@draw_line
$LN18@draw_line:

; 267  : 					}
; 268  : 				}
; 269  : 				else

  0038d	e9 b6 00 00 00	 jmp	 $LN24@draw_line
$LN67@draw_line:

; 270  : 				{
; 271  : 		
; 272  : 					if ( dx > dy )

  00392	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  00395	3b 45 e8	 cmp	 eax, DWORD PTR _dy$14[ebp]
  00398	7e 58		 jle	 SHORT $LN73@draw_line

; 273  : 					{
; 274  : 		
; 275  : 						error = ( ( dx + 1 ) >> 1 );

  0039a	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  0039d	83 c0 01	 add	 eax, 1
  003a0	d1 f8		 sar	 eax, 1
  003a2	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 276  : 		
; 277  : 						for ( ; x1 <= x2; x1 ++ )

  003a5	eb 09		 jmp	 SHORT $LN22@draw_line
$LN20@draw_line:
  003a7	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  003aa	83 c0 01	 add	 eax, 1
  003ad	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN22@draw_line:
  003b0	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  003b3	3b 45 f4	 cmp	 eax, DWORD PTR _x2$17[ebp]
  003b6	7f 38		 jg	 SHORT $LN21@draw_line

; 278  : 						{
; 279  : 		
; 280  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  003b8	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  003bb	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  003bf	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  003c2	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  003c5	66 8b 55 d8	 mov	 dx, WORD PTR _col$10[ebp]
  003c9	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 281  : 		
; 282  : 							if ( ( error -= dy ) <= 0 )

  003cd	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  003d0	2b 45 e8	 sub	 eax, DWORD PTR _dy$14[ebp]
  003d3	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  003d6	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  003da	7f 12		 jg	 SHORT $LN75@draw_line

; 283  : 							{
; 284  : 		
; 285  : 								error += dx;

  003dc	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  003df	03 45 ec	 add	 eax, DWORD PTR _dx$15[ebp]
  003e2	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 286  : 		
; 287  : 								y1 ++;

  003e5	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  003e8	83 c0 01	 add	 eax, 1
  003eb	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN75@draw_line:

; 288  : 							}
; 289  : 						}

  003ee	eb b7		 jmp	 SHORT $LN20@draw_line
$LN21@draw_line:

; 290  : 					}
; 291  : 					else

  003f0	eb 56		 jmp	 SHORT $LN24@draw_line
$LN73@draw_line:

; 292  : 					{
; 293  : 		
; 294  : 						error = ( ( dy + 1 ) >> 1 );

  003f2	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  003f5	83 c0 01	 add	 eax, 1
  003f8	d1 f8		 sar	 eax, 1
  003fa	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 295  : 		
; 296  : 						for ( ; y1 <= y2; y1++ )

  003fd	eb 09		 jmp	 SHORT $LN25@draw_line
$LN23@draw_line:
  003ff	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00402	83 c0 01	 add	 eax, 1
  00405	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN25@draw_line:
  00408	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  0040b	3b 45 f0	 cmp	 eax, DWORD PTR _y2$16[ebp]
  0040e	7f 38		 jg	 SHORT $LN24@draw_line

; 297  : 						{
; 298  : 		
; 299  : 							*((USHORT *) (screen_data + y1 * screen_pitch) + x1) = col;

  00410	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00413	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  00417	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  0041a	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  0041d	66 8b 55 d8	 mov	 dx, WORD PTR _col$10[ebp]
  00421	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 300  : 		
; 301  : 							if ( ( error -= dx ) <= 0 )

  00425	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00428	2b 45 ec	 sub	 eax, DWORD PTR _dx$15[ebp]
  0042b	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  0042e	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  00432	7f 12		 jg	 SHORT $LN76@draw_line

; 302  : 							{
; 303  : 		
; 304  : 								error += dy;

  00434	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00437	03 45 e8	 add	 eax, DWORD PTR _dy$14[ebp]
  0043a	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 305  : 		
; 306  : 								x1 ++;

  0043d	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  00440	83 c0 01	 add	 eax, 1
  00443	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN76@draw_line:

; 307  : 							}
; 308  : 						}

  00446	eb b7		 jmp	 SHORT $LN23@draw_line
$LN24@draw_line:

; 309  : 					}
; 310  : 				}
; 311  : 			}
; 312  : 		}
; 313  : 		else

  00448	e9 8e 03 00 00	 jmp	 $LN48@draw_line
$LN53@draw_line:

; 314  : 		{
; 315  : 		
; 316  : 			unsigned int
; 317  : 				col;
; 318  : 	
; 319  : 			col = colour.colour;

  0044d	8b 45 18	 mov	 eax, DWORD PTR _colour$[ebp]
  00450	89 45 d4	 mov	 DWORD PTR _col$9[ebp], eax

; 320  : 		
; 321  : 			screen_data = get_screen_data (active_screen);

  00453	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00458	50		 push	 eax
  00459	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0045e	89 45 dc	 mov	 DWORD PTR _screen_data$11[ebp], eax

; 322  : 			screen_pitch = get_screen_pitch (active_screen);

  00461	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00466	50		 push	 eax
  00467	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0046c	89 45 e0	 mov	 DWORD PTR _screen_pitch$12[ebp], eax

; 323  : 		
; 324  : 			convert_float_to_int ( fx1, &x1 );

  0046f	8d 45 fc	 lea	 eax, DWORD PTR _x1$19[ebp]
  00472	50		 push	 eax
  00473	51		 push	 ecx
  00474	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx1$[ebp]
  00479	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 325  : 			convert_float_to_int ( fy1, &y1 );

  00483	8d 45 f8	 lea	 eax, DWORD PTR _y1$18[ebp]
  00486	50		 push	 eax
  00487	51		 push	 ecx
  00488	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy1$[ebp]
  0048d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00492	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 326  : 			convert_float_to_int ( fx2, &x2 );

  00497	8d 45 f4	 lea	 eax, DWORD PTR _x2$17[ebp]
  0049a	50		 push	 eax
  0049b	51		 push	 ecx
  0049c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fx2$[ebp]
  004a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a6	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 327  : 			convert_float_to_int ( fy2, &y2 );

  004ab	8d 45 f0	 lea	 eax, DWORD PTR _y2$16[ebp]
  004ae	50		 push	 eax
  004af	51		 push	 ecx
  004b0	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy2$[ebp]
  004b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ba	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 328  : 		
; 329  : 			dx = x2 - x1;

  004bf	8b 45 f4	 mov	 eax, DWORD PTR _x2$17[ebp]
  004c2	2b 45 fc	 sub	 eax, DWORD PTR _x1$19[ebp]
  004c5	89 45 ec	 mov	 DWORD PTR _dx$15[ebp], eax

; 330  : 		
; 331  : 			if ( dx < 0 )

  004c8	0f 89 8d 01 00
	00		 jns	 $LN77@draw_line

; 332  : 			{
; 333  : 		
; 334  : 				dx = -dx;

  004ce	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  004d1	f7 d8		 neg	 eax
  004d3	89 45 ec	 mov	 DWORD PTR _dx$15[ebp], eax

; 335  : 		
; 336  : 				dy = y2 - y1;

  004d6	8b 45 f0	 mov	 eax, DWORD PTR _y2$16[ebp]
  004d9	2b 45 f8	 sub	 eax, DWORD PTR _y1$18[ebp]
  004dc	89 45 e8	 mov	 DWORD PTR _dy$14[ebp], eax

; 337  : 		
; 338  : 				if ( dy < 0 )

  004df	0f 89 bf 00 00
	00		 jns	 $LN79@draw_line

; 339  : 				{
; 340  : 		
; 341  : 					dy = -dy;

  004e5	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  004e8	f7 d8		 neg	 eax
  004ea	89 45 e8	 mov	 DWORD PTR _dy$14[ebp], eax

; 342  : 		
; 343  : 					if ( dx > dy )

  004ed	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  004f0	3b 45 e8	 cmp	 eax, DWORD PTR _dy$14[ebp]
  004f3	7e 56		 jle	 SHORT $LN81@draw_line

; 344  : 					{
; 345  : 		
; 346  : 						error = ( ( dx + 1 ) >> 1 );

  004f5	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  004f8	83 c0 01	 add	 eax, 1
  004fb	d1 f8		 sar	 eax, 1
  004fd	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 347  : 		
; 348  : 						for ( ; x1 >= x2; x1-- )

  00500	eb 09		 jmp	 SHORT $LN28@draw_line
$LN26@draw_line:
  00502	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  00505	83 e8 01	 sub	 eax, 1
  00508	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN28@draw_line:
  0050b	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  0050e	3b 45 f4	 cmp	 eax, DWORD PTR _x2$17[ebp]
  00511	7c 36		 jl	 SHORT $LN27@draw_line

; 349  : 						{
; 350  : 		
; 351  : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  00513	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00516	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  0051a	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  0051d	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  00520	8b 55 d4	 mov	 edx, DWORD PTR _col$9[ebp]
  00523	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 352  : 		
; 353  : 							if ( ( error -= dy ) <= 0 )

  00526	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00529	2b 45 e8	 sub	 eax, DWORD PTR _dy$14[ebp]
  0052c	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  0052f	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  00533	7f 12		 jg	 SHORT $LN83@draw_line

; 354  : 							{
; 355  : 		
; 356  : 								error += dx;

  00535	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00538	03 45 ec	 add	 eax, DWORD PTR _dx$15[ebp]
  0053b	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 357  : 		
; 358  : 								y1--;

  0053e	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00541	83 e8 01	 sub	 eax, 1
  00544	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN83@draw_line:

; 359  : 							}
; 360  : 						}

  00547	eb b9		 jmp	 SHORT $LN26@draw_line
$LN27@draw_line:

; 361  : 					}
; 362  : 					else

  00549	eb 54		 jmp	 SHORT $LN30@draw_line
$LN81@draw_line:

; 363  : 					{
; 364  : 		
; 365  : 						error = ( (  dy + 1 ) >> 1 );

  0054b	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  0054e	83 c0 01	 add	 eax, 1
  00551	d1 f8		 sar	 eax, 1
  00553	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 366  : 		
; 367  : 						for ( ; y1>=y2; y1-- )

  00556	eb 09		 jmp	 SHORT $LN31@draw_line
$LN29@draw_line:
  00558	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  0055b	83 e8 01	 sub	 eax, 1
  0055e	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN31@draw_line:
  00561	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00564	3b 45 f0	 cmp	 eax, DWORD PTR _y2$16[ebp]
  00567	7c 36		 jl	 SHORT $LN30@draw_line

; 368  : 						{
; 369  : 		
; 370  : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  00569	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  0056c	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  00570	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  00573	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  00576	8b 55 d4	 mov	 edx, DWORD PTR _col$9[ebp]
  00579	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 371  : 		
; 372  : 							if ( ( error -= dx ) <= 0 )

  0057c	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  0057f	2b 45 ec	 sub	 eax, DWORD PTR _dx$15[ebp]
  00582	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  00585	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  00589	7f 12		 jg	 SHORT $LN84@draw_line

; 373  : 							{
; 374  : 		
; 375  : 								error += dy;

  0058b	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  0058e	03 45 e8	 add	 eax, DWORD PTR _dy$14[ebp]
  00591	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 376  : 		
; 377  : 								x1--;

  00594	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  00597	83 e8 01	 sub	 eax, 1
  0059a	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN84@draw_line:

; 378  : 							}
; 379  : 						}

  0059d	eb b9		 jmp	 SHORT $LN29@draw_line
$LN30@draw_line:

; 380  : 					}
; 381  : 				}
; 382  : 				else

  0059f	e9 b2 00 00 00	 jmp	 $LN36@draw_line
$LN79@draw_line:

; 383  : 				{
; 384  : 		
; 385  : 					if ( dx > dy )

  005a4	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  005a7	3b 45 e8	 cmp	 eax, DWORD PTR _dy$14[ebp]
  005aa	7e 56		 jle	 SHORT $LN85@draw_line

; 386  : 					{
; 387  : 		
; 388  : 						error = ( ( dx + 1 ) >> 1 );

  005ac	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  005af	83 c0 01	 add	 eax, 1
  005b2	d1 f8		 sar	 eax, 1
  005b4	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 389  : 		
; 390  : 						for ( ; x1 >= x2; x1-- )

  005b7	eb 09		 jmp	 SHORT $LN34@draw_line
$LN32@draw_line:
  005b9	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  005bc	83 e8 01	 sub	 eax, 1
  005bf	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN34@draw_line:
  005c2	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  005c5	3b 45 f4	 cmp	 eax, DWORD PTR _x2$17[ebp]
  005c8	7c 36		 jl	 SHORT $LN33@draw_line

; 391  : 						{
; 392  : 		
; 393  : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  005ca	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  005cd	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  005d1	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  005d4	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  005d7	8b 55 d4	 mov	 edx, DWORD PTR _col$9[ebp]
  005da	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 394  : 		
; 395  : 							if ( ( error -= dy ) <= 0 )

  005dd	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  005e0	2b 45 e8	 sub	 eax, DWORD PTR _dy$14[ebp]
  005e3	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  005e6	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  005ea	7f 12		 jg	 SHORT $LN87@draw_line

; 396  : 							{
; 397  : 		
; 398  : 								error += dx;

  005ec	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  005ef	03 45 ec	 add	 eax, DWORD PTR _dx$15[ebp]
  005f2	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 399  : 		
; 400  : 								y1++;

  005f5	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  005f8	83 c0 01	 add	 eax, 1
  005fb	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN87@draw_line:

; 401  : 							}
; 402  : 						}

  005fe	eb b9		 jmp	 SHORT $LN32@draw_line
$LN33@draw_line:

; 403  : 					}
; 404  : 					else

  00600	eb 54		 jmp	 SHORT $LN36@draw_line
$LN85@draw_line:

; 405  : 					{
; 406  : 		
; 407  : 						error = ( ( dy + 1 ) >> 1 );

  00602	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  00605	83 c0 01	 add	 eax, 1
  00608	d1 f8		 sar	 eax, 1
  0060a	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 408  : 		
; 409  : 						for ( ; y1 <= y2; y1++ )

  0060d	eb 09		 jmp	 SHORT $LN37@draw_line
$LN35@draw_line:
  0060f	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00612	83 c0 01	 add	 eax, 1
  00615	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN37@draw_line:
  00618	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  0061b	3b 45 f0	 cmp	 eax, DWORD PTR _y2$16[ebp]
  0061e	7f 36		 jg	 SHORT $LN36@draw_line

; 410  : 						{
; 411  : 		
; 412  : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  00620	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00623	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  00627	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  0062a	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  0062d	8b 55 d4	 mov	 edx, DWORD PTR _col$9[ebp]
  00630	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 413  : 		
; 414  : 							if ( ( error -= dx ) <= 0 )

  00633	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00636	2b 45 ec	 sub	 eax, DWORD PTR _dx$15[ebp]
  00639	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  0063c	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  00640	7f 12		 jg	 SHORT $LN88@draw_line

; 415  : 							{
; 416  : 		
; 417  : 								error += dy;

  00642	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00645	03 45 e8	 add	 eax, DWORD PTR _dy$14[ebp]
  00648	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 418  : 		
; 419  : 								x1--;

  0064b	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  0064e	83 e8 01	 sub	 eax, 1
  00651	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN88@draw_line:

; 420  : 							}
; 421  : 						}

  00654	eb b9		 jmp	 SHORT $LN35@draw_line
$LN36@draw_line:

; 422  : 					}
; 423  : 				}
; 424  : 			}
; 425  : 			else

  00656	e9 80 01 00 00	 jmp	 $LN48@draw_line
$LN77@draw_line:

; 426  : 			{
; 427  : 				dy = y2 - y1;

  0065b	8b 45 f0	 mov	 eax, DWORD PTR _y2$16[ebp]
  0065e	2b 45 f8	 sub	 eax, DWORD PTR _y1$18[ebp]
  00661	89 45 e8	 mov	 DWORD PTR _dy$14[ebp], eax

; 428  : 		
; 429  : 				if ( dy < 0 )

  00664	0f 89 bf 00 00
	00		 jns	 $LN89@draw_line

; 430  : 				{
; 431  : 		
; 432  : 					dy = -dy;

  0066a	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  0066d	f7 d8		 neg	 eax
  0066f	89 45 e8	 mov	 DWORD PTR _dy$14[ebp], eax

; 433  : 		
; 434  : 					if ( dx > dy )

  00672	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  00675	3b 45 e8	 cmp	 eax, DWORD PTR _dy$14[ebp]
  00678	7e 56		 jle	 SHORT $LN91@draw_line

; 435  : 					{
; 436  : 		
; 437  : 						error = ( ( dx + 1 ) >> 1 );

  0067a	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  0067d	83 c0 01	 add	 eax, 1
  00680	d1 f8		 sar	 eax, 1
  00682	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 438  : 		
; 439  : 						for ( ; x1 <= x2; x1++ )

  00685	eb 09		 jmp	 SHORT $LN40@draw_line
$LN38@draw_line:
  00687	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  0068a	83 c0 01	 add	 eax, 1
  0068d	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN40@draw_line:
  00690	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  00693	3b 45 f4	 cmp	 eax, DWORD PTR _x2$17[ebp]
  00696	7f 36		 jg	 SHORT $LN39@draw_line

; 440  : 						{
; 441  : 		
; 442  : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  00698	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  0069b	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  0069f	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  006a2	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  006a5	8b 55 d4	 mov	 edx, DWORD PTR _col$9[ebp]
  006a8	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 443  : 		
; 444  : 							if ( ( error -= dy ) <= 0 )

  006ab	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  006ae	2b 45 e8	 sub	 eax, DWORD PTR _dy$14[ebp]
  006b1	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  006b4	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  006b8	7f 12		 jg	 SHORT $LN93@draw_line

; 445  : 							{
; 446  : 		
; 447  : 								error += dx;

  006ba	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  006bd	03 45 ec	 add	 eax, DWORD PTR _dx$15[ebp]
  006c0	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 448  : 		
; 449  : 								y1--;

  006c3	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  006c6	83 e8 01	 sub	 eax, 1
  006c9	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN93@draw_line:

; 450  : 							}
; 451  : 						}

  006cc	eb b9		 jmp	 SHORT $LN38@draw_line
$LN39@draw_line:

; 452  : 					}
; 453  : 					else

  006ce	eb 54		 jmp	 SHORT $LN42@draw_line
$LN91@draw_line:

; 454  : 					{
; 455  : 		
; 456  : 						error = ( ( dy + 1 ) >> 1 );

  006d0	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  006d3	83 c0 01	 add	 eax, 1
  006d6	d1 f8		 sar	 eax, 1
  006d8	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 457  : 		
; 458  : 						for ( ; y1 >= y2; y1 -- )

  006db	eb 09		 jmp	 SHORT $LN43@draw_line
$LN41@draw_line:
  006dd	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  006e0	83 e8 01	 sub	 eax, 1
  006e3	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN43@draw_line:
  006e6	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  006e9	3b 45 f0	 cmp	 eax, DWORD PTR _y2$16[ebp]
  006ec	7c 36		 jl	 SHORT $LN42@draw_line

; 459  : 						{
; 460  : 		
; 461  : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  006ee	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  006f1	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  006f5	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  006f8	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  006fb	8b 55 d4	 mov	 edx, DWORD PTR _col$9[ebp]
  006fe	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 462  : 		
; 463  : 							if ( ( error -= dx ) <= 0 )

  00701	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00704	2b 45 ec	 sub	 eax, DWORD PTR _dx$15[ebp]
  00707	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  0070a	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  0070e	7f 12		 jg	 SHORT $LN94@draw_line

; 464  : 							{
; 465  : 		
; 466  : 								error += dy;

  00710	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00713	03 45 e8	 add	 eax, DWORD PTR _dy$14[ebp]
  00716	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 467  : 		
; 468  : 								x1++;

  00719	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  0071c	83 c0 01	 add	 eax, 1
  0071f	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN94@draw_line:

; 469  : 							}
; 470  : 						}

  00722	eb b9		 jmp	 SHORT $LN41@draw_line
$LN42@draw_line:

; 471  : 					}
; 472  : 				}
; 473  : 				else

  00724	e9 b2 00 00 00	 jmp	 $LN48@draw_line
$LN89@draw_line:

; 474  : 				{
; 475  : 		
; 476  : 					if ( dx > dy )

  00729	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  0072c	3b 45 e8	 cmp	 eax, DWORD PTR _dy$14[ebp]
  0072f	7e 56		 jle	 SHORT $LN95@draw_line

; 477  : 					{
; 478  : 		
; 479  : 						error = ( ( dx + 1 ) >> 1 );

  00731	8b 45 ec	 mov	 eax, DWORD PTR _dx$15[ebp]
  00734	83 c0 01	 add	 eax, 1
  00737	d1 f8		 sar	 eax, 1
  00739	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 480  : 		
; 481  : 						for ( ; x1 <= x2; x1 ++ )

  0073c	eb 09		 jmp	 SHORT $LN46@draw_line
$LN44@draw_line:
  0073e	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  00741	83 c0 01	 add	 eax, 1
  00744	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN46@draw_line:
  00747	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  0074a	3b 45 f4	 cmp	 eax, DWORD PTR _x2$17[ebp]
  0074d	7f 36		 jg	 SHORT $LN45@draw_line

; 482  : 						{
; 483  : 		
; 484  : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  0074f	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00752	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  00756	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  00759	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  0075c	8b 55 d4	 mov	 edx, DWORD PTR _col$9[ebp]
  0075f	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 485  : 		
; 486  : 							if ( ( error -= dy ) <= 0 )

  00762	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00765	2b 45 e8	 sub	 eax, DWORD PTR _dy$14[ebp]
  00768	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  0076b	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  0076f	7f 12		 jg	 SHORT $LN97@draw_line

; 487  : 							{
; 488  : 		
; 489  : 								error += dx;

  00771	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  00774	03 45 ec	 add	 eax, DWORD PTR _dx$15[ebp]
  00777	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 490  : 		
; 491  : 								y1 ++;

  0077a	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  0077d	83 c0 01	 add	 eax, 1
  00780	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN97@draw_line:

; 492  : 							}
; 493  : 						}

  00783	eb b9		 jmp	 SHORT $LN44@draw_line
$LN45@draw_line:

; 494  : 					}
; 495  : 					else

  00785	eb 54		 jmp	 SHORT $LN48@draw_line
$LN95@draw_line:

; 496  : 					{
; 497  : 		
; 498  : 						error = ( ( dy + 1 ) >> 1 );

  00787	8b 45 e8	 mov	 eax, DWORD PTR _dy$14[ebp]
  0078a	83 c0 01	 add	 eax, 1
  0078d	d1 f8		 sar	 eax, 1
  0078f	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 499  : 		
; 500  : 						for ( ; y1 <= y2; y1++ )

  00792	eb 09		 jmp	 SHORT $LN49@draw_line
$LN47@draw_line:
  00794	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  00797	83 c0 01	 add	 eax, 1
  0079a	89 45 f8	 mov	 DWORD PTR _y1$18[ebp], eax
$LN49@draw_line:
  0079d	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  007a0	3b 45 f0	 cmp	 eax, DWORD PTR _y2$16[ebp]
  007a3	7f 36		 jg	 SHORT $LN48@draw_line

; 501  : 						{
; 502  : 		
; 503  : 							*((ULONG *) (screen_data + y1 * screen_pitch) + x1) = col;

  007a5	8b 45 f8	 mov	 eax, DWORD PTR _y1$18[ebp]
  007a8	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$12[ebp]
  007ac	03 45 dc	 add	 eax, DWORD PTR _screen_data$11[ebp]
  007af	8b 4d fc	 mov	 ecx, DWORD PTR _x1$19[ebp]
  007b2	8b 55 d4	 mov	 edx, DWORD PTR _col$9[ebp]
  007b5	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 504  : 		
; 505  : 							if ( ( error -= dx ) <= 0 )

  007b8	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  007bb	2b 45 ec	 sub	 eax, DWORD PTR _dx$15[ebp]
  007be	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax
  007c1	83 7d e4 00	 cmp	 DWORD PTR _error$13[ebp], 0
  007c5	7f 12		 jg	 SHORT $LN98@draw_line

; 506  : 							{
; 507  : 		
; 508  : 								error += dy;

  007c7	8b 45 e4	 mov	 eax, DWORD PTR _error$13[ebp]
  007ca	03 45 e8	 add	 eax, DWORD PTR _dy$14[ebp]
  007cd	89 45 e4	 mov	 DWORD PTR _error$13[ebp], eax

; 509  : 		
; 510  : 								x1 ++;

  007d0	8b 45 fc	 mov	 eax, DWORD PTR _x1$19[ebp]
  007d3	83 c0 01	 add	 eax, 1
  007d6	89 45 fc	 mov	 DWORD PTR _x1$19[ebp], eax
$LN98@draw_line:

; 511  : 							}
; 512  : 						}

  007d9	eb b9		 jmp	 SHORT $LN47@draw_line
$LN48@draw_line:

; 513  : 					}
; 514  : 				}
; 515  : 			}
; 516  : 		}
; 517  : 	}
; 518  : 	else

  007db	e9 22 03 00 00	 jmp	 $LN100@draw_line
$LN51@draw_line:

; 519  : 	{
; 520  : 
; 521  : 		if ( d3d_in_3d_scene )

  007e0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_in_3d_scene@@3HA, 0 ; d3d_in_3d_scene
  007e7	0f 84 15 03 00
	00		 je	 $LN100@draw_line

; 522  : 		{
; 523  : 
; 524  : 			vertex
; 525  : 				*poly,
; 526  : 				*point1,
; 527  : 				*point2,
; 528  : 				line[2];
; 529  : 
; 530  : 			LPD3DTLVERTEX
; 531  : 				vertices;
; 532  : 
; 533  : 			int
; 534  : 				outcode,
; 535  : 				outcode2;
; 536  : 		
; 537  : 			line[0].i = fx1;

  007ed	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007f2	6b c8 00	 imul	 ecx, eax, 0
  007f5	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx1$[ebp]
  007fa	f3 0f 11 84 0d
	58 ff ff ff	 movss	 DWORD PTR _line$5[ebp+ecx+16], xmm0

; 538  : 			line[0].j = fy1;

  00803	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00808	6b c8 00	 imul	 ecx, eax, 0
  0080b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy1$[ebp]
  00810	f3 0f 11 84 0d
	5c ff ff ff	 movss	 DWORD PTR _line$5[ebp+ecx+20], xmm0

; 539  : 			line[0].outcode = generate_outcode ( fx1, fy1 );

  00819	51		 push	 ecx
  0081a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy1$[ebp]
  0081f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00824	51		 push	 ecx
  00825	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx1$[ebp]
  0082a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082f	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  00834	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00839	6b d1 00	 imul	 edx, ecx, 0
  0083c	88 84 15 74 ff
	ff ff		 mov	 BYTE PTR _line$5[ebp+edx+44], al

; 540  : 			line[0].next_vertex = &line[1];

  00843	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00848	c1 e0 00	 shl	 eax, 0
  0084b	8d 8c 05 48 ff
	ff ff		 lea	 ecx, DWORD PTR _line$5[ebp+eax]
  00852	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00857	6b c2 00	 imul	 eax, edx, 0
  0085a	89 8c 05 70 ff
	ff ff		 mov	 DWORD PTR _line$5[ebp+eax+40], ecx

; 541  : 
; 542  : 			line[1].i = fx2;

  00861	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00866	c1 e0 00	 shl	 eax, 0
  00869	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fx2$[ebp]
  0086e	f3 0f 11 84 05
	58 ff ff ff	 movss	 DWORD PTR _line$5[ebp+eax+16], xmm0

; 543  : 			line[1].j = fy2;

  00877	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0087c	c1 e0 00	 shl	 eax, 0
  0087f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy2$[ebp]
  00884	f3 0f 11 84 05
	5c ff ff ff	 movss	 DWORD PTR _line$5[ebp+eax+20], xmm0

; 544  : 			line[1].outcode = generate_outcode ( fx2, fy2 );

  0088d	51		 push	 ecx
  0088e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy2$[ebp]
  00893	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00898	51		 push	 ecx
  00899	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fx2$[ebp]
  0089e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a3	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  008a8	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  008ad	c1 e1 00	 shl	 ecx, 0
  008b0	88 84 0d 74 ff
	ff ff		 mov	 BYTE PTR _line$5[ebp+ecx+44], al

; 545  : 			line[1].next_vertex = NULL;

  008b7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008bc	c1 e0 00	 shl	 eax, 0
  008bf	c7 84 05 70 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _line$5[ebp+eax+40], 0

; 546  : 
; 547  : 			outcode = outcode2 = line[0].outcode;

  008ca	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008cf	6b c8 00	 imul	 ecx, eax, 0
  008d2	0f b6 94 0d 74
	ff ff ff	 movzx	 edx, BYTE PTR _line$5[ebp+ecx+44]
  008da	89 95 3c ff ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], edx
  008e0	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _outcode2$2[ebp]
  008e6	89 85 40 ff ff
	ff		 mov	 DWORD PTR _outcode$3[ebp], eax

; 548  : 			outcode |= line[1].outcode;

  008ec	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008f1	c1 e0 00	 shl	 eax, 0
  008f4	0f b6 8c 05 74
	ff ff ff	 movzx	 ecx, BYTE PTR _line$5[ebp+eax+44]
  008fc	0b 8d 40 ff ff
	ff		 or	 ecx, DWORD PTR _outcode$3[ebp]
  00902	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _outcode$3[ebp], ecx

; 549  : 			outcode2 &= line[1].outcode;

  00908	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0090d	c1 e0 00	 shl	 eax, 0
  00910	0f b6 8c 05 74
	ff ff ff	 movzx	 ecx, BYTE PTR _line$5[ebp+eax+44]
  00918	23 8d 3c ff ff
	ff		 and	 ecx, DWORD PTR _outcode2$2[ebp]
  0091e	89 8d 3c ff ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], ecx

; 550  : 
; 551  : 			poly = line;

  00924	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _line$5[ebp]
  0092a	89 45 d0	 mov	 DWORD PTR _poly$8[ebp], eax

; 552  : 
; 553  : 			if ( outcode2 == 0 )

  0092d	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _outcode2$2[ebp], 0
  00934	0f 85 c8 01 00
	00		 jne	 $LN100@draw_line

; 554  : 			{
; 555  : 	
; 556  : 				real_colour
; 557  : 					col;
; 558  : 		
; 559  : 				if ( outcode )

  0093a	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _outcode$3[ebp], 0
  00941	74 1e		 je	 SHORT $LN101@draw_line

; 560  : 				{
; 561  : 
; 562  : 					clip_3d_coord = 0;

  00943	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 563  : 
; 564  : 					poly = clip_3d_polygon ( poly, ( unsigned char ) outcode );

  0094d	0f b6 85 40 ff
	ff ff		 movzx	 eax, BYTE PTR _outcode$3[ebp]
  00954	50		 push	 eax
  00955	8b 4d d0	 mov	 ecx, DWORD PTR _poly$8[ebp]
  00958	51		 push	 ecx
  00959	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  0095e	89 45 d0	 mov	 DWORD PTR _poly$8[ebp], eax
$LN101@draw_line:

; 565  : 				}
; 566  : 			
; 567  : 				if ( !poly )

  00961	83 7d d0 00	 cmp	 DWORD PTR _poly$8[ebp], 0
  00965	75 05		 jne	 SHORT $LN102@draw_line

; 568  : 				{
; 569  : 		
; 570  : 					return;

  00967	e9 96 01 00 00	 jmp	 $LN1@draw_line
$LN102@draw_line:

; 571  : 				}
; 572  : 
; 573  : 				col.red = colour.r;

  0096c	8a 45 1a	 mov	 al, BYTE PTR _colour$[ebp+2]
  0096f	88 85 3a ff ff
	ff		 mov	 BYTE PTR _col$1[ebp+2], al

; 574  : 				col.green = colour.g;

  00975	8a 45 19	 mov	 al, BYTE PTR _colour$[ebp+1]
  00978	88 85 39 ff ff
	ff		 mov	 BYTE PTR _col$1[ebp+1], al

; 575  : 				col.blue = colour.b;

  0097e	8a 45 18	 mov	 al, BYTE PTR _colour$[ebp]
  00981	88 85 38 ff ff
	ff		 mov	 BYTE PTR _col$1[ebp], al

; 576  : 				col.alpha = 255;	//colour.a;

  00987	c6 85 3b ff ff
	ff ff		 mov	 BYTE PTR _col$1[ebp+3], 255 ; 000000ffH

; 577  : 
; 578  : 				set_d3d_alpha_fog_zbuffer ( FALSE, TRUE, FALSE, FALSE );

  0098e	6a 00		 push	 0
  00990	6a 00		 push	 0
  00992	6a 01		 push	 1
  00994	6a 00		 push	 0
  00996	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 579  : //				set_d3d_alpha_blending ( FALSE );
; 580  : //				set_d3d_zbuffer_comparison ( FALSE );
; 581  : //				set_d3d_zbuffer_writing ( FALSE );
; 582  : 
; 583  : 				set_d3d_int_state ( D3DRENDERSTATE_SPECULARENABLE, FALSE );

  0099b	6a 00		 push	 0
  0099d	6a 1d		 push	 29			; 0000001dH
  0099f	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 584  : 
; 585  : 				set_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );

  009a4	6a 01		 push	 1
  009a6	6a 01		 push	 1
  009a8	6a 00		 push	 0
  009aa	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 586  : 	
; 587  : 				vertices = get_d3d_line_vertices_points_address ();

  009af	e8 00 00 00 00	 call	 ?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ ; get_d3d_line_vertices_points_address
  009b4	89 85 44 ff ff
	ff		 mov	 DWORD PTR _vertices$4[ebp], eax

; 588  : 			
; 589  : 				point1 = poly->next_vertex;

  009ba	8b 45 d0	 mov	 eax, DWORD PTR _poly$8[ebp]
  009bd	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  009c0	89 4d cc	 mov	 DWORD PTR _point1$7[ebp], ecx

; 590  : 				point2 = poly;

  009c3	8b 45 d0	 mov	 eax, DWORD PTR _poly$8[ebp]
  009c6	89 45 c8	 mov	 DWORD PTR _point2$6[ebp], eax

; 591  : 			
; 592  : 				vertices[0].sx = point1->i;

  009c9	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  009ce	6b c8 00	 imul	 ecx, eax, 0
  009d1	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _vertices$4[ebp]
  009d7	8b 45 cc	 mov	 eax, DWORD PTR _point1$7[ebp]
  009da	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  009dd	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 593  : 				vertices[0].sy = point1->j;

  009e0	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  009e5	6b c8 00	 imul	 ecx, eax, 0
  009e8	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _vertices$4[ebp]
  009ee	8b 45 cc	 mov	 eax, DWORD PTR _point1$7[ebp]
  009f1	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  009f4	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 594  : 				vertices[0].rhw = 0.1;//point1->q;

  009f8	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  009fd	6b c8 00	 imul	 ecx, eax, 0
  00a00	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _vertices$4[ebp]
  00a06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00a0e	f3 0f 11 44 0a
	0c		 movss	 DWORD PTR [edx+ecx+12], xmm0

; 595  : 				vertices[0].sz = 0.1;//( point1->q * zbuffer_factor ) + zbuffer_constant;

  00a14	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00a19	6b c8 00	 imul	 ecx, eax, 0
  00a1c	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _vertices$4[ebp]
  00a22	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00a2a	f3 0f 11 44 0a
	08		 movss	 DWORD PTR [edx+ecx+8], xmm0

; 596  : 				vertices[0].color = col.colour;	//*( ( D3DCOLOR * ) &colour );

  00a30	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00a35	6b c8 00	 imul	 ecx, eax, 0
  00a38	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _vertices$4[ebp]
  00a3e	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _col$1[ebp]
  00a44	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 597  : 				vertices[0].specular = d3d_fog_intensity;

  00a48	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00a4d	6b c8 00	 imul	 ecx, eax, 0
  00a50	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _vertices$4[ebp]
  00a56	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  00a5b	89 44 0a 14	 mov	 DWORD PTR [edx+ecx+20], eax

; 598  : 			
; 599  : 				vertices[1].sx = point2->i;

  00a5f	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00a64	c1 e0 00	 shl	 eax, 0
  00a67	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$4[ebp]
  00a6d	8b 55 c8	 mov	 edx, DWORD PTR _point2$6[ebp]
  00a70	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00a73	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 600  : 				vertices[1].sy = point2->j;

  00a76	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00a7b	c1 e0 00	 shl	 eax, 0
  00a7e	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$4[ebp]
  00a84	8b 55 c8	 mov	 edx, DWORD PTR _point2$6[ebp]
  00a87	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00a8a	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 601  : 				vertices[1].rhw = 0.1;	//point2->q;

  00a8e	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00a93	c1 e0 00	 shl	 eax, 0
  00a96	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$4[ebp]
  00a9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00aa4	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 602  : 				vertices[1].sz = 0.1;	//( point2->q * zbuffer_factor ) + zbuffer_constant;

  00aaa	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00aaf	c1 e0 00	 shl	 eax, 0
  00ab2	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$4[ebp]
  00ab8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00ac0	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 603  : 				vertices[1].color = col.colour;	//*( ( D3DCOLOR * ) &colour );

  00ac6	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00acb	c1 e0 00	 shl	 eax, 0
  00ace	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$4[ebp]
  00ad4	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _col$1[ebp]
  00ada	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 604  : 				vertices[1].specular = d3d_fog_intensity;

  00ade	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00ae3	c1 e0 00	 shl	 eax, 0
  00ae6	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$4[ebp]
  00aec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  00af2	89 54 01 14	 mov	 DWORD PTR [ecx+eax+20], edx

; 605  : 
; 606  : 				draw_line_primitive ( vertices );

  00af6	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _vertices$4[ebp]
  00afc	50		 push	 eax
  00afd	e8 00 00 00 00	 call	 ?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z ; draw_line_primitive
$LN100@draw_line:
$LN1@draw_line:

; 607  : 			}
; 608  : 		}
; 609  : 	}
; 610  : }

  00b02	5f		 pop	 edi
  00b03	5e		 pop	 esi
  00b04	5b		 pop	 ebx
  00b05	8b e5		 mov	 esp, ebp
  00b07	5d		 pop	 ebp
  00b08	c2 14 00	 ret	 20			; 00000014H
?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ENDP		; draw_line
_TEXT	ENDS
END
