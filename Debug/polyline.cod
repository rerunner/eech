; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\polyline.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?draw_software_plain_line@@YGXPAUVERTEX@@IMMM@Z	; draw_software_plain_line
PUBLIC	?draw_software_gouraud_shaded_line@@YGXPAUVERTEX@@IMMM@Z ; draw_software_gouraud_shaded_line
PUBLIC	?__LINE__Var@?0??draw_software_plain_line@@YGXPAUVERTEX@@IMMM@Z@4JA ; `draw_software_plain_line'::`1'::__LINE__Var
PUBLIC	??_C@_0DJ@JONGOGKP@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0O@IILHNAKB@active_screen@		; `string'
PUBLIC	??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@ ; `string'
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_screen_locked@@YGHPAUSCREEN@@@Z:PROC	; get_screen_locked
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@
CONST	SEGMENT
??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@ DB 'get_screen_l'
	DB	'ocked ( active_screen )', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IILHNAKB@active_screen@
CONST	SEGMENT
??_C@_0O@IILHNAKB@active_screen@ DB 'active_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@JONGOGKP@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DJ@JONGOGKP@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\polyline.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_software_plain_line@@YGXPAUVERTEX@@IMMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_software_plain_line@@YGXPAUVERTEX@@IMMM@Z@4JA DD 066H ; `draw_software_plain_line'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyline.c
;	COMDAT ?set_software_pixel@@YGXHHG@Z
_TEXT	SEGMENT
_pixels$ = -8						; size = 4
_data$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_colour$ = 16						; size = 2
?set_software_pixel@@YGXHHG@Z PROC			; set_software_pixel, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 
; 82   : 	unsigned char
; 83   : 		*data;
; 84   : 
; 85   : 	unsigned short int
; 86   : 		*pixels;
; 87   : 
; 88   : 	data = get_screen_data ( active_screen );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00014	89 45 fc	 mov	 DWORD PTR _data$[ebp], eax

; 89   : 
; 90   : 	pixels = ( unsigned short int * ) ( data + ( y * get_screen_pitch ( active_screen ) ) );

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00022	0f af 45 0c	 imul	 eax, DWORD PTR _y$[ebp]
  00026	03 45 fc	 add	 eax, DWORD PTR _data$[ebp]
  00029	89 45 f8	 mov	 DWORD PTR _pixels$[ebp], eax

; 91   : 
; 92   : 	pixels += x;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _pixels$[ebp]
  00032	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00035	89 55 f8	 mov	 DWORD PTR _pixels$[ebp], edx

; 93   : 
; 94   : 	*pixels = colour;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _pixels$[ebp]
  0003b	66 8b 4d 10	 mov	 cx, WORD PTR _colour$[ebp]
  0003f	66 89 08	 mov	 WORD PTR [eax], cx

; 95   : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
?set_software_pixel@@YGXHHG@Z ENDP			; set_software_pixel
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyline.c
;	COMDAT ?draw_software_gouraud_shaded_line@@YGXPAUVERTEX@@IMMM@Z
_TEXT	SEGMENT
_line$ = 8						; size = 4
_colour$ = 12						; size = 4
_red$ = 16						; size = 4
_green$ = 20						; size = 4
_blue$ = 24						; size = 4
?draw_software_gouraud_shaded_line@@YGXPAUVERTEX@@IMMM@Z PROC ; draw_software_gouraud_shaded_line, COMDAT

; 324  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 325  : /*
; 326  : 	int
; 327  : 		x1,
; 328  : 		y1,
; 329  : 		x2,
; 330  : 		y2,
; 331  : 		dx,
; 332  : 		dy,
; 333  : 		error,
; 334  : 		int_intensity;
; 335  : 
; 336  : 	unsigned int
; 337  : 		*colour_table;
; 338  : 
; 339  : 	float
; 340  : 		intensity,
; 341  : 		intensity2,
; 342  : 		dintensity;
; 343  : 
; 344  : 	ASSERT ( active_screen );
; 345  : 
; 346  : 	ASSERT ( get_screen_locked ( active_screen ) );
; 347  : 
; 348  : 	convert_float_to_int ( line->i, &x1 );
; 349  : 
; 350  : 	convert_float_to_int ( line->j, &y1 );
; 351  : 
; 352  : 	convert_float_to_int ( line->next_vertex->i, &x2 );
; 353  : 
; 354  : 	convert_float_to_int ( line->next_vertex->j, &y2 );
; 355  : 
; 356  : 	intensity = line->intensity;
; 357  : 
; 358  : 	intensity2 = line->next_vertex->intensity;
; 359  : 
; 360  : 	dintensity = intensity2 - intensity;
; 361  : 
; 362  : 	dx = x2 - x1;
; 363  : 
; 364  : 	colour_table = application_shading_table[colour];
; 365  : 
; 366  : 	if ( dx < 0 )
; 367  : 	{
; 368  : 
; 369  : 		dx = -dx;
; 370  : 
; 371  : 		dy = y2 - y1;
; 372  : 
; 373  : 		if ( dy < 0 )
; 374  : 		{
; 375  : 
; 376  : 			dy = -dy;
; 377  : 
; 378  : 			if ( dx > dy )
; 379  : 			{
; 380  : 
; 381  : 				error = ( ( dx + 1 ) >> 1 );
; 382  : 
; 383  : 				dintensity /= dx;
; 384  : 			
; 385  : 				for ( ; x1 >= x2; x1-- )
; 386  : 				{
; 387  : 
; 388  : 					convert_float_to_int ( ( intensity * 31 ), &int_intensity );
; 389  : 			
; 390  : 					int_intensity = bound ( int_intensity, 0, 31 );
; 391  : 			
; 392  : 					set_software_pixel ( x1, y1, colour_table[int_intensity] );
; 393  : 			
; 394  : //					set_software_pixel ( x1, y1, colour );
; 395  : 			
; 396  : 					if ( ( error -= dy ) < 0 )
; 397  : 					{
; 398  : 
; 399  : 						error += dx;
; 400  : 			
; 401  : 						y1--;
; 402  : 					}
; 403  : 
; 404  : 					intensity += dintensity;
; 405  : 				}
; 406  : 			}
; 407  : 			else
; 408  : 			{
; 409  : 
; 410  : 				error = ( (  dy + 1 ) >> 1 );
; 411  : 
; 412  : 				dintensity /= dy;
; 413  : 			
; 414  : 				for ( ; y1>=y2; y1-- )
; 415  : 				{
; 416  : 
; 417  : 					convert_float_to_int ( ( intensity * 31 ), &int_intensity );
; 418  : 			
; 419  : 					int_intensity = bound ( int_intensity, 0, 31 );
; 420  : 			
; 421  : 					set_software_pixel ( x1, y1, colour_table[int_intensity] );
; 422  : 			
; 423  : //					set_software_pixel ( x1, y1, colour );
; 424  : 			
; 425  : 					if ( ( error -= dx ) < 0 )
; 426  : 					{
; 427  : 
; 428  : 						error += dy;
; 429  : 			
; 430  : 						x1--;
; 431  : 					}
; 432  : 
; 433  : 					intensity += dintensity;
; 434  : 				}
; 435  : 			}
; 436  : 		}
; 437  : 		else
; 438  : 		{
; 439  : 
; 440  : 			if ( dx > dy )
; 441  : 			{
; 442  : 
; 443  : 				error = ( ( dx + 1 ) >> 1 );
; 444  : 			
; 445  : 				dintensity /= dx;
; 446  : 			
; 447  : 				for ( ; x1 >= x2; x1-- )
; 448  : 				{
; 449  : 
; 450  : 					convert_float_to_int ( ( intensity * 31 ), &int_intensity );
; 451  : 			
; 452  : 					int_intensity = bound ( int_intensity, 0, 31 );
; 453  : 			
; 454  : 					set_software_pixel ( x1, y1, colour_table[int_intensity] );
; 455  : 			
; 456  : //					set_software_pixel ( x1, y1, colour );
; 457  : 			
; 458  : 					if ( ( error -= dy ) < 0 )
; 459  : 					{
; 460  : 
; 461  : 						error += dx;
; 462  : 			
; 463  : 						y1++;
; 464  : 					}
; 465  : 
; 466  : 					intensity += dintensity;
; 467  : 				}
; 468  : 			}
; 469  : 			else
; 470  : 			{
; 471  : 
; 472  : 				error = ( ( dy + 1 ) >> 1 );
; 473  : 			
; 474  : 				dintensity /= dy;
; 475  : 			
; 476  : 				for ( ; y1 <= y2; y1++ )
; 477  : 				{
; 478  : 
; 479  : 					convert_float_to_int ( ( intensity * 31 ), &int_intensity );
; 480  : 			
; 481  : 					int_intensity = bound ( int_intensity, 0, 31 );
; 482  : 			
; 483  : 					set_software_pixel ( x1, y1, colour_table[int_intensity] );
; 484  : 			
; 485  : //					set_software_pixel ( x1, y1, colour );
; 486  : 			
; 487  : 					if ( ( error -= dx ) < 0 )
; 488  : 					{
; 489  : 
; 490  : 						error += dy;
; 491  : 			
; 492  : 						x1--;
; 493  : 					}
; 494  : 
; 495  : 					intensity += dintensity;
; 496  : 				}
; 497  : 			}
; 498  : 		}
; 499  : 	}
; 500  : 	else
; 501  : 	{
; 502  : 		dy = y2 - y1;
; 503  : 
; 504  : 		if ( dy < 0 )
; 505  : 		{
; 506  : 
; 507  : 			dy = -dy;
; 508  : 
; 509  : 			if ( dx > dy )
; 510  : 			{
; 511  : 
; 512  : 				error = ( ( dx + 1 ) >> 1 );
; 513  : 			
; 514  : 				dintensity /= dx;
; 515  : 			
; 516  : 				for ( ; x1 <= x2; x1++ )
; 517  : 				{
; 518  : 
; 519  : 					convert_float_to_int ( ( intensity * 31 ), &int_intensity );
; 520  : 			
; 521  : 					int_intensity = bound ( int_intensity, 0, 31 );
; 522  : 			
; 523  : 					set_software_pixel ( x1, y1, colour_table[int_intensity] );
; 524  : 			
; 525  : //					set_software_pixel ( x1, y1, colour );
; 526  : 			
; 527  : 					if ( ( error -= dy ) < 0 )
; 528  : 					{
; 529  : 
; 530  : 						error += dx;
; 531  : 			
; 532  : 						y1--;
; 533  : 					}
; 534  : 
; 535  : 					intensity += dintensity;
; 536  : 				}
; 537  : 			}
; 538  : 			else
; 539  : 			{
; 540  : 
; 541  : 				error = ( ( dy + 1 ) >> 1 );
; 542  : 			
; 543  : 				dintensity /= dy;
; 544  : 			
; 545  : 				for ( ; y1 >= y2; y1 -- )
; 546  : 				{
; 547  : 
; 548  : 					convert_float_to_int ( ( intensity * 31 ), &int_intensity );
; 549  : 			
; 550  : 					int_intensity = bound ( int_intensity, 0, 31 );
; 551  : 			
; 552  : 					set_software_pixel ( x1, y1, colour_table[int_intensity] );
; 553  : 			
; 554  : //					set_software_pixel ( x1, y1, colour );
; 555  : 			
; 556  : 					if ( ( error -= dx ) < 0 )
; 557  : 					{
; 558  : 
; 559  : 						error += dy;
; 560  : 			
; 561  : 						x1++;
; 562  : 					}
; 563  : 
; 564  : 					intensity += dintensity;
; 565  : 				}
; 566  : 			}
; 567  : 		}
; 568  : 		else
; 569  : 		{
; 570  : 
; 571  : 			if ( dx > dy )
; 572  : 			{
; 573  : 
; 574  : 				error = ( ( dx + 1 ) >> 1 );
; 575  : 			
; 576  : 				dintensity /= dx;
; 577  : 			
; 578  : 				for ( ; x1 <= x2; x1 ++ )
; 579  : 				{
; 580  : 
; 581  : 					convert_float_to_int ( ( intensity * 31 ), &int_intensity );
; 582  : 			
; 583  : 					int_intensity = bound ( int_intensity, 0, 31 );
; 584  : 			
; 585  : 					set_software_pixel ( x1, y1, colour_table[int_intensity] );
; 586  : 			
; 587  : //					set_software_pixel ( x1, y1, colour );
; 588  : 			
; 589  : 					if ( ( error -= dy ) < 0 )
; 590  : 					{
; 591  : 
; 592  : 						error += dx;
; 593  : 			
; 594  : 						y1 ++;
; 595  : 					}
; 596  : 
; 597  : 					intensity += dintensity;
; 598  : 				}
; 599  : 			}
; 600  : 			else
; 601  : 			{
; 602  : 
; 603  : 				error = ( ( dy + 1 ) >> 1 );
; 604  : 			
; 605  : 				dintensity /= dy;
; 606  : 			
; 607  : 				for ( ; y1 <= y2; y1++ )
; 608  : 				{
; 609  : 
; 610  : 					convert_float_to_int ( ( intensity * 31 ), &int_intensity );
; 611  : 			
; 612  : 					int_intensity = bound ( int_intensity, 0, 31 );
; 613  : 			
; 614  : 					set_software_pixel ( x1, y1, colour_table[int_intensity] );
; 615  : 			
; 616  : //					set_software_pixel ( x1, y1, colour );
; 617  : 			
; 618  : 					if ( ( error -= dx ) < 0 )
; 619  : 					{
; 620  : 
; 621  : 						error += dy;
; 622  : 			
; 623  : 						x1 ++;
; 624  : 					}
; 625  : 
; 626  : 					intensity += dintensity;
; 627  : 				}
; 628  : 			}
; 629  : 		}
; 630  : 	}
; 631  : 	*/
; 632  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 14 00	 ret	 20			; 00000014H
?draw_software_gouraud_shaded_line@@YGXPAUVERTEX@@IMMM@Z ENDP ; draw_software_gouraud_shaded_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyline.c
;	COMDAT ?draw_software_plain_line@@YGXPAUVERTEX@@IMMM@Z
_TEXT	SEGMENT
_colour$ = -32						; size = 2
_error$ = -28						; size = 4
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_y2$ = -16						; size = 4
_x2$ = -12						; size = 4
_y1$ = -8						; size = 4
_x1$ = -4						; size = 4
_line$ = 8						; size = 4
_whole_colour$ = 12					; size = 4
_red$ = 16						; size = 4
_green$ = 20						; size = 4
_blue$ = 24						; size = 4
?draw_software_plain_line@@YGXPAUVERTEX@@IMMM@Z PROC	; draw_software_plain_line, COMDAT

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 103  : 
; 104  : 	int
; 105  : 		x1,
; 106  : 		y1,
; 107  : 		x2,
; 108  : 		y2,
; 109  : 		dx,
; 110  : 		dy,
; 111  : 		error;
; 112  : 
; 113  : 	unsigned short int
; 114  : 		colour;
; 115  : 
; 116  : 	ASSERT ( active_screen );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00010	75 18		 jne	 SHORT $LN26@draw_softw
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_software_plain_line@@YGXPAUVERTEX@@IMMM@Z@4JA
  00017	83 c0 0e	 add	 eax, 14			; 0000000eH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@JONGOGKP@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN26@draw_softw:

; 117  : 
; 118  : 	ASSERT ( get_screen_locked ( active_screen ) );

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?get_screen_locked@@YGHPAUSCREEN@@@Z ; get_screen_locked
  00035	85 c0		 test	 eax, eax
  00037	75 18		 jne	 SHORT $LN27@draw_softw
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_software_plain_line@@YGXPAUVERTEX@@IMMM@Z@4JA
  0003e	83 c0 10	 add	 eax, 16			; 00000010H
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@JONGOGKP@c?3?2users?2nhv90?2projects?2eech?2mo@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN27@draw_softw:

; 119  : 
; 120  : 	colour = whole_colour;

  00051	66 8b 45 0c	 mov	 ax, WORD PTR _whole_colour$[ebp]
  00055	66 89 45 e0	 mov	 WORD PTR _colour$[ebp], ax

; 121  : 
; 122  : 	convert_float_to_int ( line->i, &x1 );

  00059	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  00060	51		 push	 ecx
  00061	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 123  : 
; 124  : 	convert_float_to_int ( line->j, &y1 );

  00070	8d 45 f8	 lea	 eax, DWORD PTR _y1$[ebp]
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  00077	51		 push	 ecx
  00078	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0007d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00082	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 125  : 
; 126  : 	convert_float_to_int ( line->next_vertex->i, &x2 );

  00087	8d 45 f4	 lea	 eax, DWORD PTR _x2$[ebp]
  0008a	50		 push	 eax
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  0008e	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00091	51		 push	 ecx
  00092	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 127  : 
; 128  : 	convert_float_to_int ( line->next_vertex->j, &y2 );

  000a1	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  000a4	50		 push	 eax
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  000a8	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  000ab	51		 push	 ecx
  000ac	f3 0f 10 42 14	 movss	 xmm0, DWORD PTR [edx+20]
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 129  : 
; 130  : 	dx = x2 - x1;

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _x2$[ebp]
  000be	2b 45 fc	 sub	 eax, DWORD PTR _x1$[ebp]
  000c1	89 45 ec	 mov	 DWORD PTR _dx$[ebp], eax

; 131  : 
; 132  : 	if ( dx < 0 )

  000c4	0f 89 79 01 00
	00		 jns	 $LN28@draw_softw

; 133  : 	{
; 134  : 
; 135  : 		dx = -dx;

  000ca	8b 45 ec	 mov	 eax, DWORD PTR _dx$[ebp]
  000cd	f7 d8		 neg	 eax
  000cf	89 45 ec	 mov	 DWORD PTR _dx$[ebp], eax

; 136  : 
; 137  : 		dy = y2 - y1;

  000d2	8b 45 f0	 mov	 eax, DWORD PTR _y2$[ebp]
  000d5	2b 45 f8	 sub	 eax, DWORD PTR _y1$[ebp]
  000d8	89 45 e8	 mov	 DWORD PTR _dy$[ebp], eax

; 138  : 
; 139  : 		if ( dy < 0 )

  000db	0f 89 b5 00 00
	00		 jns	 $LN30@draw_softw

; 140  : 		{
; 141  : 
; 142  : 			dy = -dy;

  000e1	8b 45 e8	 mov	 eax, DWORD PTR _dy$[ebp]
  000e4	f7 d8		 neg	 eax
  000e6	89 45 e8	 mov	 DWORD PTR _dy$[ebp], eax

; 143  : 
; 144  : 			if ( dx > dy )

  000e9	8b 45 ec	 mov	 eax, DWORD PTR _dx$[ebp]
  000ec	3b 45 e8	 cmp	 eax, DWORD PTR _dy$[ebp]
  000ef	7e 51		 jle	 SHORT $LN32@draw_softw

; 145  : 			{
; 146  : 
; 147  : 				error = ( ( dx + 1 ) >> 1 );

  000f1	8b 45 ec	 mov	 eax, DWORD PTR _dx$[ebp]
  000f4	83 c0 01	 add	 eax, 1
  000f7	d1 f8		 sar	 eax, 1
  000f9	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 148  : 			
; 149  : 				for ( ; x1 > x2; x1-- )

  000fc	eb 09		 jmp	 SHORT $LN4@draw_softw
$LN2@draw_softw:
  000fe	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  00101	83 e8 01	 sub	 eax, 1
  00104	89 45 fc	 mov	 DWORD PTR _x1$[ebp], eax
$LN4@draw_softw:
  00107	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  0010a	3b 45 f4	 cmp	 eax, DWORD PTR _x2$[ebp]
  0010d	7e 31		 jle	 SHORT $LN3@draw_softw

; 150  : 				{
; 151  : 
; 152  : 					set_software_pixel ( x1, y1, colour );

  0010f	0f b7 45 e0	 movzx	 eax, WORD PTR _colour$[ebp]
  00113	50		 push	 eax
  00114	8b 4d f8	 mov	 ecx, DWORD PTR _y1$[ebp]
  00117	51		 push	 ecx
  00118	8b 55 fc	 mov	 edx, DWORD PTR _x1$[ebp]
  0011b	52		 push	 edx
  0011c	e8 00 00 00 00	 call	 ?set_software_pixel@@YGXHHG@Z ; set_software_pixel

; 153  : 			
; 154  : 					if ( ( error -= dy ) < 0 )

  00121	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  00124	2b 45 e8	 sub	 eax, DWORD PTR _dy$[ebp]
  00127	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax
  0012a	79 12		 jns	 SHORT $LN34@draw_softw

; 155  : 					{
; 156  : 
; 157  : 						error += dx;

  0012c	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  0012f	03 45 ec	 add	 eax, DWORD PTR _dx$[ebp]
  00132	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 158  : 			
; 159  : 						y1--;

  00135	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  00138	83 e8 01	 sub	 eax, 1
  0013b	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax
$LN34@draw_softw:

; 160  : 					}
; 161  : 				}

  0013e	eb be		 jmp	 SHORT $LN2@draw_softw
$LN3@draw_softw:

; 162  : 			}
; 163  : 			else

  00140	eb 4f		 jmp	 SHORT $LN6@draw_softw
$LN32@draw_softw:

; 164  : 			{
; 165  : 
; 166  : 				error = ( (  dy + 1 ) >> 1 );

  00142	8b 45 e8	 mov	 eax, DWORD PTR _dy$[ebp]
  00145	83 c0 01	 add	 eax, 1
  00148	d1 f8		 sar	 eax, 1
  0014a	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 167  : 			
; 168  : 				for ( ; y1 > y2; y1-- )

  0014d	eb 09		 jmp	 SHORT $LN7@draw_softw
$LN5@draw_softw:
  0014f	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  00152	83 e8 01	 sub	 eax, 1
  00155	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax
$LN7@draw_softw:
  00158	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  0015b	3b 45 f0	 cmp	 eax, DWORD PTR _y2$[ebp]
  0015e	7e 31		 jle	 SHORT $LN6@draw_softw

; 169  : 				{
; 170  : 
; 171  : 					set_software_pixel ( x1, y1, colour );

  00160	0f b7 45 e0	 movzx	 eax, WORD PTR _colour$[ebp]
  00164	50		 push	 eax
  00165	8b 4d f8	 mov	 ecx, DWORD PTR _y1$[ebp]
  00168	51		 push	 ecx
  00169	8b 55 fc	 mov	 edx, DWORD PTR _x1$[ebp]
  0016c	52		 push	 edx
  0016d	e8 00 00 00 00	 call	 ?set_software_pixel@@YGXHHG@Z ; set_software_pixel

; 172  : 			
; 173  : 					if ( ( error -= dx ) < 0 )

  00172	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  00175	2b 45 ec	 sub	 eax, DWORD PTR _dx$[ebp]
  00178	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax
  0017b	79 12		 jns	 SHORT $LN35@draw_softw

; 174  : 					{
; 175  : 
; 176  : 						error += dy;

  0017d	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  00180	03 45 e8	 add	 eax, DWORD PTR _dy$[ebp]
  00183	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 177  : 			
; 178  : 						x1--;

  00186	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  00189	83 e8 01	 sub	 eax, 1
  0018c	89 45 fc	 mov	 DWORD PTR _x1$[ebp], eax
$LN35@draw_softw:

; 179  : 					}
; 180  : 				}

  0018f	eb be		 jmp	 SHORT $LN5@draw_softw
$LN6@draw_softw:

; 181  : 			}
; 182  : 		}
; 183  : 		else

  00191	e9 a8 00 00 00	 jmp	 $LN12@draw_softw
$LN30@draw_softw:

; 184  : 		{
; 185  : 
; 186  : 			if ( dx > dy )

  00196	8b 45 ec	 mov	 eax, DWORD PTR _dx$[ebp]
  00199	3b 45 e8	 cmp	 eax, DWORD PTR _dy$[ebp]
  0019c	7e 51		 jle	 SHORT $LN36@draw_softw

; 187  : 			{
; 188  : 
; 189  : 				error = ( ( dx + 1 ) >> 1 );

  0019e	8b 45 ec	 mov	 eax, DWORD PTR _dx$[ebp]
  001a1	83 c0 01	 add	 eax, 1
  001a4	d1 f8		 sar	 eax, 1
  001a6	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 190  : 			
; 191  : 				for ( ; x1 > x2; x1-- )

  001a9	eb 09		 jmp	 SHORT $LN10@draw_softw
$LN8@draw_softw:
  001ab	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  001ae	83 e8 01	 sub	 eax, 1
  001b1	89 45 fc	 mov	 DWORD PTR _x1$[ebp], eax
$LN10@draw_softw:
  001b4	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  001b7	3b 45 f4	 cmp	 eax, DWORD PTR _x2$[ebp]
  001ba	7e 31		 jle	 SHORT $LN9@draw_softw

; 192  : 				{
; 193  : 
; 194  : 					set_software_pixel ( x1, y1, colour );

  001bc	0f b7 45 e0	 movzx	 eax, WORD PTR _colour$[ebp]
  001c0	50		 push	 eax
  001c1	8b 4d f8	 mov	 ecx, DWORD PTR _y1$[ebp]
  001c4	51		 push	 ecx
  001c5	8b 55 fc	 mov	 edx, DWORD PTR _x1$[ebp]
  001c8	52		 push	 edx
  001c9	e8 00 00 00 00	 call	 ?set_software_pixel@@YGXHHG@Z ; set_software_pixel

; 195  : 			
; 196  : 					if ( ( error -= dy ) < 0 )

  001ce	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  001d1	2b 45 e8	 sub	 eax, DWORD PTR _dy$[ebp]
  001d4	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax
  001d7	79 12		 jns	 SHORT $LN38@draw_softw

; 197  : 					{
; 198  : 
; 199  : 						error += dx;

  001d9	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  001dc	03 45 ec	 add	 eax, DWORD PTR _dx$[ebp]
  001df	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 200  : 			
; 201  : 						y1++;

  001e2	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  001e5	83 c0 01	 add	 eax, 1
  001e8	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax
$LN38@draw_softw:

; 202  : 					}
; 203  : 				}

  001eb	eb be		 jmp	 SHORT $LN8@draw_softw
$LN9@draw_softw:

; 204  : 			}
; 205  : 			else

  001ed	eb 4f		 jmp	 SHORT $LN12@draw_softw
$LN36@draw_softw:

; 206  : 			{
; 207  : 
; 208  : 				error = ( ( dy + 1 ) >> 1 );

  001ef	8b 45 e8	 mov	 eax, DWORD PTR _dy$[ebp]
  001f2	83 c0 01	 add	 eax, 1
  001f5	d1 f8		 sar	 eax, 1
  001f7	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 209  : 			
; 210  : 				for ( ; y1 < y2; y1++ )

  001fa	eb 09		 jmp	 SHORT $LN13@draw_softw
$LN11@draw_softw:
  001fc	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  001ff	83 c0 01	 add	 eax, 1
  00202	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax
$LN13@draw_softw:
  00205	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  00208	3b 45 f0	 cmp	 eax, DWORD PTR _y2$[ebp]
  0020b	7d 31		 jge	 SHORT $LN12@draw_softw

; 211  : 				{
; 212  : 
; 213  : 					set_software_pixel ( x1, y1, colour );

  0020d	0f b7 45 e0	 movzx	 eax, WORD PTR _colour$[ebp]
  00211	50		 push	 eax
  00212	8b 4d f8	 mov	 ecx, DWORD PTR _y1$[ebp]
  00215	51		 push	 ecx
  00216	8b 55 fc	 mov	 edx, DWORD PTR _x1$[ebp]
  00219	52		 push	 edx
  0021a	e8 00 00 00 00	 call	 ?set_software_pixel@@YGXHHG@Z ; set_software_pixel

; 214  : 			
; 215  : 					if ( ( error -= dx ) < 0 )

  0021f	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  00222	2b 45 ec	 sub	 eax, DWORD PTR _dx$[ebp]
  00225	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax
  00228	79 12		 jns	 SHORT $LN39@draw_softw

; 216  : 					{
; 217  : 
; 218  : 						error += dy;

  0022a	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  0022d	03 45 e8	 add	 eax, DWORD PTR _dy$[ebp]
  00230	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 219  : 			
; 220  : 						x1--;

  00233	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  00236	83 e8 01	 sub	 eax, 1
  00239	89 45 fc	 mov	 DWORD PTR _x1$[ebp], eax
$LN39@draw_softw:

; 221  : 					}
; 222  : 				}

  0023c	eb be		 jmp	 SHORT $LN11@draw_softw
$LN12@draw_softw:

; 223  : 			}
; 224  : 		}
; 225  : 	}
; 226  : 	else

  0023e	e9 6c 01 00 00	 jmp	 $LN24@draw_softw
$LN28@draw_softw:

; 227  : 	{
; 228  : 		dy = y2 - y1;

  00243	8b 45 f0	 mov	 eax, DWORD PTR _y2$[ebp]
  00246	2b 45 f8	 sub	 eax, DWORD PTR _y1$[ebp]
  00249	89 45 e8	 mov	 DWORD PTR _dy$[ebp], eax

; 229  : 
; 230  : 		if ( dy < 0 )

  0024c	0f 89 b5 00 00
	00		 jns	 $LN40@draw_softw

; 231  : 		{
; 232  : 
; 233  : 			dy = -dy;

  00252	8b 45 e8	 mov	 eax, DWORD PTR _dy$[ebp]
  00255	f7 d8		 neg	 eax
  00257	89 45 e8	 mov	 DWORD PTR _dy$[ebp], eax

; 234  : 
; 235  : 			if ( dx > dy )

  0025a	8b 45 ec	 mov	 eax, DWORD PTR _dx$[ebp]
  0025d	3b 45 e8	 cmp	 eax, DWORD PTR _dy$[ebp]
  00260	7e 51		 jle	 SHORT $LN42@draw_softw

; 236  : 			{
; 237  : 
; 238  : 				error = ( ( dx + 1 ) >> 1 );

  00262	8b 45 ec	 mov	 eax, DWORD PTR _dx$[ebp]
  00265	83 c0 01	 add	 eax, 1
  00268	d1 f8		 sar	 eax, 1
  0026a	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 239  : 			
; 240  : 				for ( ; x1 < x2; x1++ )

  0026d	eb 09		 jmp	 SHORT $LN16@draw_softw
$LN14@draw_softw:
  0026f	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  00272	83 c0 01	 add	 eax, 1
  00275	89 45 fc	 mov	 DWORD PTR _x1$[ebp], eax
$LN16@draw_softw:
  00278	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  0027b	3b 45 f4	 cmp	 eax, DWORD PTR _x2$[ebp]
  0027e	7d 31		 jge	 SHORT $LN15@draw_softw

; 241  : 				{
; 242  : 
; 243  : 					set_software_pixel ( x1, y1, colour );

  00280	0f b7 45 e0	 movzx	 eax, WORD PTR _colour$[ebp]
  00284	50		 push	 eax
  00285	8b 4d f8	 mov	 ecx, DWORD PTR _y1$[ebp]
  00288	51		 push	 ecx
  00289	8b 55 fc	 mov	 edx, DWORD PTR _x1$[ebp]
  0028c	52		 push	 edx
  0028d	e8 00 00 00 00	 call	 ?set_software_pixel@@YGXHHG@Z ; set_software_pixel

; 244  : 			
; 245  : 					if ( ( error -= dy ) < 0 )

  00292	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  00295	2b 45 e8	 sub	 eax, DWORD PTR _dy$[ebp]
  00298	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax
  0029b	79 12		 jns	 SHORT $LN44@draw_softw

; 246  : 					{
; 247  : 
; 248  : 						error += dx;

  0029d	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  002a0	03 45 ec	 add	 eax, DWORD PTR _dx$[ebp]
  002a3	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 249  : 			
; 250  : 						y1--;

  002a6	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  002a9	83 e8 01	 sub	 eax, 1
  002ac	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax
$LN44@draw_softw:

; 251  : 					}
; 252  : 				}

  002af	eb be		 jmp	 SHORT $LN14@draw_softw
$LN15@draw_softw:

; 253  : 			}
; 254  : 			else

  002b1	eb 4f		 jmp	 SHORT $LN18@draw_softw
$LN42@draw_softw:

; 255  : 			{
; 256  : 
; 257  : 				error = ( ( dy + 1 ) >> 1 );

  002b3	8b 45 e8	 mov	 eax, DWORD PTR _dy$[ebp]
  002b6	83 c0 01	 add	 eax, 1
  002b9	d1 f8		 sar	 eax, 1
  002bb	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 258  : 			
; 259  : 				for ( ; y1 > y2; y1 -- )

  002be	eb 09		 jmp	 SHORT $LN19@draw_softw
$LN17@draw_softw:
  002c0	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  002c3	83 e8 01	 sub	 eax, 1
  002c6	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax
$LN19@draw_softw:
  002c9	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  002cc	3b 45 f0	 cmp	 eax, DWORD PTR _y2$[ebp]
  002cf	7e 31		 jle	 SHORT $LN18@draw_softw

; 260  : 				{
; 261  : 
; 262  : 					set_software_pixel ( x1, y1, colour );

  002d1	0f b7 45 e0	 movzx	 eax, WORD PTR _colour$[ebp]
  002d5	50		 push	 eax
  002d6	8b 4d f8	 mov	 ecx, DWORD PTR _y1$[ebp]
  002d9	51		 push	 ecx
  002da	8b 55 fc	 mov	 edx, DWORD PTR _x1$[ebp]
  002dd	52		 push	 edx
  002de	e8 00 00 00 00	 call	 ?set_software_pixel@@YGXHHG@Z ; set_software_pixel

; 263  : 			
; 264  : 					if ( ( error -= dx ) < 0 )

  002e3	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  002e6	2b 45 ec	 sub	 eax, DWORD PTR _dx$[ebp]
  002e9	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax
  002ec	79 12		 jns	 SHORT $LN45@draw_softw

; 265  : 					{
; 266  : 
; 267  : 						error += dy;

  002ee	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  002f1	03 45 e8	 add	 eax, DWORD PTR _dy$[ebp]
  002f4	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 268  : 			
; 269  : 						x1++;

  002f7	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  002fa	83 c0 01	 add	 eax, 1
  002fd	89 45 fc	 mov	 DWORD PTR _x1$[ebp], eax
$LN45@draw_softw:

; 270  : 					}
; 271  : 				}

  00300	eb be		 jmp	 SHORT $LN17@draw_softw
$LN18@draw_softw:

; 272  : 			}
; 273  : 		}
; 274  : 		else

  00302	e9 a8 00 00 00	 jmp	 $LN24@draw_softw
$LN40@draw_softw:

; 275  : 		{
; 276  : 
; 277  : 			if ( dx > dy )

  00307	8b 45 ec	 mov	 eax, DWORD PTR _dx$[ebp]
  0030a	3b 45 e8	 cmp	 eax, DWORD PTR _dy$[ebp]
  0030d	7e 51		 jle	 SHORT $LN46@draw_softw

; 278  : 			{
; 279  : 
; 280  : 				error = ( ( dx + 1 ) >> 1 );

  0030f	8b 45 ec	 mov	 eax, DWORD PTR _dx$[ebp]
  00312	83 c0 01	 add	 eax, 1
  00315	d1 f8		 sar	 eax, 1
  00317	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 281  : 			
; 282  : 				for ( ; x1 < x2; x1 ++ )

  0031a	eb 09		 jmp	 SHORT $LN22@draw_softw
$LN20@draw_softw:
  0031c	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  0031f	83 c0 01	 add	 eax, 1
  00322	89 45 fc	 mov	 DWORD PTR _x1$[ebp], eax
$LN22@draw_softw:
  00325	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  00328	3b 45 f4	 cmp	 eax, DWORD PTR _x2$[ebp]
  0032b	7d 31		 jge	 SHORT $LN21@draw_softw

; 283  : 				{
; 284  : 
; 285  : 					set_software_pixel ( x1, y1, colour );

  0032d	0f b7 45 e0	 movzx	 eax, WORD PTR _colour$[ebp]
  00331	50		 push	 eax
  00332	8b 4d f8	 mov	 ecx, DWORD PTR _y1$[ebp]
  00335	51		 push	 ecx
  00336	8b 55 fc	 mov	 edx, DWORD PTR _x1$[ebp]
  00339	52		 push	 edx
  0033a	e8 00 00 00 00	 call	 ?set_software_pixel@@YGXHHG@Z ; set_software_pixel

; 286  : 			
; 287  : 					if ( ( error -= dy ) < 0 )

  0033f	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  00342	2b 45 e8	 sub	 eax, DWORD PTR _dy$[ebp]
  00345	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax
  00348	79 12		 jns	 SHORT $LN48@draw_softw

; 288  : 					{
; 289  : 
; 290  : 						error += dx;

  0034a	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  0034d	03 45 ec	 add	 eax, DWORD PTR _dx$[ebp]
  00350	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 291  : 			
; 292  : 						y1 ++;

  00353	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  00356	83 c0 01	 add	 eax, 1
  00359	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax
$LN48@draw_softw:

; 293  : 					}
; 294  : 				}

  0035c	eb be		 jmp	 SHORT $LN20@draw_softw
$LN21@draw_softw:

; 295  : 			}
; 296  : 			else

  0035e	eb 4f		 jmp	 SHORT $LN24@draw_softw
$LN46@draw_softw:

; 297  : 			{
; 298  : 
; 299  : 				error = ( ( dy + 1 ) >> 1 );

  00360	8b 45 e8	 mov	 eax, DWORD PTR _dy$[ebp]
  00363	83 c0 01	 add	 eax, 1
  00366	d1 f8		 sar	 eax, 1
  00368	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 300  : 			
; 301  : 				for ( ; y1 < y2; y1++ )

  0036b	eb 09		 jmp	 SHORT $LN25@draw_softw
$LN23@draw_softw:
  0036d	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  00370	83 c0 01	 add	 eax, 1
  00373	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax
$LN25@draw_softw:
  00376	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  00379	3b 45 f0	 cmp	 eax, DWORD PTR _y2$[ebp]
  0037c	7d 31		 jge	 SHORT $LN24@draw_softw

; 302  : 				{
; 303  : 
; 304  : 					set_software_pixel ( x1, y1, colour );

  0037e	0f b7 45 e0	 movzx	 eax, WORD PTR _colour$[ebp]
  00382	50		 push	 eax
  00383	8b 4d f8	 mov	 ecx, DWORD PTR _y1$[ebp]
  00386	51		 push	 ecx
  00387	8b 55 fc	 mov	 edx, DWORD PTR _x1$[ebp]
  0038a	52		 push	 edx
  0038b	e8 00 00 00 00	 call	 ?set_software_pixel@@YGXHHG@Z ; set_software_pixel

; 305  : 			
; 306  : 					if ( ( error -= dx ) < 0 )

  00390	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  00393	2b 45 ec	 sub	 eax, DWORD PTR _dx$[ebp]
  00396	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax
  00399	79 12		 jns	 SHORT $LN49@draw_softw

; 307  : 					{
; 308  : 
; 309  : 						error += dy;

  0039b	8b 45 e4	 mov	 eax, DWORD PTR _error$[ebp]
  0039e	03 45 e8	 add	 eax, DWORD PTR _dy$[ebp]
  003a1	89 45 e4	 mov	 DWORD PTR _error$[ebp], eax

; 310  : 			
; 311  : 						x1 ++;

  003a4	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  003a7	83 c0 01	 add	 eax, 1
  003aa	89 45 fc	 mov	 DWORD PTR _x1$[ebp], eax
$LN49@draw_softw:

; 312  : 					}
; 313  : 				}

  003ad	eb be		 jmp	 SHORT $LN23@draw_softw
$LN24@draw_softw:

; 314  : 			}
; 315  : 		}
; 316  : 	}
; 317  : }

  003af	5f		 pop	 edi
  003b0	5e		 pop	 esi
  003b1	5b		 pop	 ebx
  003b2	8b e5		 mov	 esp, ebp
  003b4	5d		 pop	 ebp
  003b5	c2 14 00	 ret	 20			; 00000014H
?draw_software_plain_line@@YGXPAUVERTEX@@IMMM@Z ENDP	; draw_software_plain_line
_TEXT	ENDS
END
