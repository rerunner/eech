; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dhoriz.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_fabsf
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?asm_convert_float_to_int@@YGXMPAH@Z		; asm_convert_float_to_int
PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?initialise_3d_horizon@@YGXPAUENV_3D@@H@Z	; initialise_3d_horizon
PUBLIC	?add_3d_horizon_image@@YGXPAUENV_3D@@PBDMW4WEATHERMODES@@@Z ; add_3d_horizon_image
PUBLIC	?destroy_all_3d_horizon_images@@YGXPAUENV_3D@@@Z ; destroy_all_3d_horizon_images
PUBLIC	?update_3d_horizon@@YGXPAUENV_3D@@@Z		; update_3d_horizon
PUBLIC	?draw_3d_horizon@@YGXXZ				; draw_3d_horizon
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0DC@ILFGKIKG@Unable?5to?5malloc?5enough?5memory?5@ ; `string'
PUBLIC	?__LINE__Var@?0??add_3d_horizon_image@@YGXPAUENV_3D@@PBDMW4WEATHERMODES@@@Z@4JA ; `add_3d_horizon_image'::`1'::__LINE__Var
PUBLIC	??_C@_0DC@BIGDBNDP@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_03OJGPBPII@env@				; `string'
PUBLIC	??_C@_06CBAGFBLO@?$CFs?4bin@			; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0BD@FIDIBIKE@horizon_image_info@		; `string'
PUBLIC	??_C@_06NJHCGIDI@?$CFs?4tga@			; `string'
PUBLIC	??_C@_0DE@JDFBJLBO@Unable?5to?5read?5the?5horizon?5file@ ; `string'
PUBLIC	??_C@_0CA@PPPDNBHD@Writing?5binary?5horizon?5file?3?5?$CFs@ ; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	?__LINE__Var@?0??insert_3d_horizon_image@@YGXPAUENV_3D@@W4WEATHERMODES@@PAUHORIZON_IMAGE_DATA@@@Z@4JA ; `insert_3d_horizon_image'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??destroy_all_3d_horizon_images@@YGXPAUENV_3D@@@Z@4JA ; `destroy_all_3d_horizon_images'::`1'::__LINE__Var
PUBLIC	??_C@_0EK@GCMDJCFD@Unable?5to?5update?5the?5horizon?5?9?5@ ; `string'
PUBLIC	??_C@_0EC@CLPLBFKM@Unable?5to?5update?5the?5horizon?5?9?5@ ; `string'
PUBLIC	??_C@_0DI@PEEIJIME@Trying?5to?5draw?5a?5textured?5polyg@ ; `string'
PUBLIC	??_C@_0DL@CNJAAFNL@Trying?5to?5draw?5a?5flat?5shaded?5po@ ; `string'
PUBLIC	??_C@_0DC@MFGMGIAN@Trying?5to?5draw?5a?5line?1point?5in?5@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@40c90fdb
PUBLIC	__real@40dfffc000000000
PUBLIC	__real@47a8c000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	_fabs:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?set_fpu_precision_mode_single@@YGXXZ:PROC	; set_fpu_precision_mode_single
EXTRN	?set_fpu_precision_mode_double@@YGXXZ:PROC	; set_fpu_precision_mode_double
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?file_exist@@YGHPBD@Z:PROC			; file_exist
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_any_3d_vector
EXTRN	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z:PROC	; clip_3d_polygon
EXTRN	?set_d3d_fog_face_intensity@@YGXH@Z:PROC	; set_d3d_fog_face_intensity
EXTRN	?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z:PROC ; draw_fan_primitive
EXTRN	?finalise_primitives@@YGXXZ:PROC		; finalise_primitives
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?set_d3d_texture_stage_state@@YGXHHH@Z:PROC	; set_d3d_texture_stage_state
EXTRN	?force_set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; force_set_d3d_int_state
EXTRN	?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z:PROC ; get_d3d_vertices_address
EXTRN	?get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z:PROC ; get_d3d_vertices_points_address
EXTRN	?load_tga_file@@YGPAXPBDPAF1PAH@Z:PROC		; load_tga_file
EXTRN	?get_3d_time_of_day@@YGMPAUENV_3D@@@Z:PROC	; get_3d_time_of_day
EXTRN	?get_3d_weathermode@@YG?AW4WEATHERMODES@@PAUENV_3D@@@Z:PROC ; get_3d_weathermode
EXTRN	?get_3d_target_weathermode@@YG?AW4WEATHERMODES@@PAUENV_3D@@@Z:PROC ; get_3d_target_weathermode
EXTRN	?get_3d_target_weathermode_transitional_status@@YGMPAUENV_3D@@@Z:PROC ; get_3d_target_weathermode_transitional_status
EXTRN	?get_3d_fog_colour@@YG?AUREAL_COLOUR@@PAUENV_3D@@@Z:PROC ; get_3d_fog_colour
EXTRN	?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z:PROC ; hither_clip_3d_polygon
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?zbuffer_default_comparison@@3W4_D3DCMPFUNC@@A:DWORD ; zbuffer_default_comparison
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A:DWORD ; objects_3d_scene_database
EXTRN	?objects_3d_data@@3PAUOBJECT_3D@@A:DWORD	; objects_3d_data
EXTRN	?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A:DWORD ; current_object_3d_surface
EXTRN	?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_surface_point_list
EXTRN	?rotation_3d@@3PAY02MA:BYTE			; rotation_3d
EXTRN	?transformed_3d_points@@3PAUVERTEX@@A:BYTE	; transformed_3d_points
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT __real@47a8c000
CONST	SEGMENT
__real@47a8c000 DD 047a8c000r			; 86400
CONST	ENDS
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@MFGMGIAN@Trying?5to?5draw?5a?5line?1point?5in?5@
CONST	SEGMENT
??_C@_0DC@MFGMGIAN@Trying?5to?5draw?5a?5line?1point?5in?5@ DB 'Trying to '
	DB	'draw a line/point in the horizon object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@CNJAAFNL@Trying?5to?5draw?5a?5flat?5shaded?5po@
CONST	SEGMENT
??_C@_0DL@CNJAAFNL@Trying?5to?5draw?5a?5flat?5shaded?5po@ DB 'Trying to d'
	DB	'raw a flat shaded polygon in the horizon object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@PEEIJIME@Trying?5to?5draw?5a?5textured?5polyg@
CONST	SEGMENT
??_C@_0DI@PEEIJIME@Trying?5to?5draw?5a?5textured?5polyg@ DB 'Trying to dr'
	DB	'aw a textured polygon in the horizon object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@CLPLBFKM@Unable?5to?5update?5the?5horizon?5?9?5@
CONST	SEGMENT
??_C@_0EC@CLPLBFKM@Unable?5to?5update?5the?5horizon?5?9?5@ DB 'Unable to '
	DB	'update the horizon - no information for weathermode: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@GCMDJCFD@Unable?5to?5update?5the?5horizon?5?9?5@
CONST	SEGMENT
??_C@_0EK@GCMDJCFD@Unable?5to?5update?5the?5horizon?5?9?5@ DB 'Unable to '
	DB	'update the horizon - no information for current weathermode: '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??destroy_all_3d_horizon_images@@YGXPAUENV_3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??destroy_all_3d_horizon_images@@YGXPAUENV_3D@@@Z@4JA DD 01b0H ; `destroy_all_3d_horizon_images'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_3d_horizon_image@@YGXPAUENV_3D@@W4WEATHERMODES@@PAUHORIZON_IMAGE_DATA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_3d_horizon_image@@YGXPAUENV_3D@@W4WEATHERMODES@@PAUHORIZON_IMAGE_DATA@@@Z@4JA DD 0165H ; `insert_3d_horizon_image'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PPPDNBHD@Writing?5binary?5horizon?5file?3?5?$CFs@
CONST	SEGMENT
??_C@_0CA@PPPDNBHD@Writing?5binary?5horizon?5file?3?5?$CFs@ DB 'Writing b'
	DB	'inary horizon file: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JDFBJLBO@Unable?5to?5read?5the?5horizon?5file@
CONST	SEGMENT
??_C@_0DE@JDFBJLBO@Unable?5to?5read?5the?5horizon?5file@ DB 'Unable to re'
	DB	'ad the horizon file - not a 24bit image', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NJHCGIDI@?$CFs?4tga@
CONST	SEGMENT
??_C@_06NJHCGIDI@?$CFs?4tga@ DB '%s.tga', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FIDIBIKE@horizon_image_info@
CONST	SEGMENT
??_C@_0BD@FIDIBIKE@horizon_image_info@ DB 'horizon_image_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06CBAGFBLO@?$CFs?4bin@
CONST	SEGMENT
??_C@_06CBAGFBLO@?$CFs?4bin@ DB '%s.bin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJGPBPII@env@
CONST	SEGMENT
??_C@_03OJGPBPII@env@ DB 'env', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BIGDBNDP@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DC@BIGDBNDP@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\3dhoriz.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??add_3d_horizon_image@@YGXPAUENV_3D@@PBDMW4WEATHERMODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??add_3d_horizon_image@@YGXPAUENV_3D@@PBDMW4WEATHERMODES@@@Z@4JA DD 083H ; `add_3d_horizon_image'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DC@ILFGKIKG@Unable?5to?5malloc?5enough?5memory?5@
CONST	SEGMENT
??_C@_0DC@ILFGKIKG@Unable?5to?5malloc?5enough?5memory?5@ DB 'Unable to ma'
	DB	'lloc enough memory for horizon object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?construct_3d_horizon_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_SHORT_REFERENCE@@HPAH@Z
_TEXT	SEGMENT
_third_point$ = -20					; size = 4
_second_point$ = -16					; size = 4
_first_point$ = -12					; size = 4
_surface_point_index$ = -8				; size = 4
_outcode2$ = -2						; size = 1
_outcode$ = -1						; size = 1
_triangle_index$ = 8					; size = 4
_points$ = 12						; size = 4
_base_point$ = 16					; size = 4
_polygon_outcode$ = 20					; size = 4
?construct_3d_horizon_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_SHORT_REFERENCE@@HPAH@Z PROC ; construct_3d_horizon_triangle_fan, COMDAT

; 1510 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1511 : 
; 1512 : 	unsigned char
; 1513 : 		outcode,
; 1514 : 		outcode2;
; 1515 : 
; 1516 : 	int
; 1517 : 		surface_point_index,
; 1518 : 		first_point,
; 1519 : 		second_point,
; 1520 : 		third_point;
; 1521 : 
; 1522 : 	surface_point_index = points[0].point;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 0c	 mov	 edx, DWORD PTR _points$[ebp]
  00014	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00018	89 45 f8	 mov	 DWORD PTR _surface_point_index$[ebp], eax

; 1523 : 	first_point = current_object_3d_surface_point_list[surface_point_index].point + base_point;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _surface_point_index$[ebp]
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00024	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00028	03 55 10	 add	 edx, DWORD PTR _base_point$[ebp]
  0002b	89 55 f4	 mov	 DWORD PTR _first_point$[ebp], edx

; 1524 : 
; 1525 : 	surface_point_index = points[triangle_index + 1].point;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _points$[ebp]
  00031	03 45 08	 add	 eax, DWORD PTR _triangle_index$[ebp]
  00034	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00038	89 4d f8	 mov	 DWORD PTR _surface_point_index$[ebp], ecx

; 1526 : 	second_point = current_object_3d_surface_point_list[surface_point_index].point + base_point;

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _surface_point_index$[ebp]
  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00044	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00048	03 55 10	 add	 edx, DWORD PTR _base_point$[ebp]
  0004b	89 55 f0	 mov	 DWORD PTR _second_point$[ebp], edx

; 1527 : 
; 1528 : 	surface_point_index = points[triangle_index + 2].point;

  0004e	8b 45 0c	 mov	 eax, DWORD PTR _points$[ebp]
  00051	03 45 08	 add	 eax, DWORD PTR _triangle_index$[ebp]
  00054	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00058	89 4d f8	 mov	 DWORD PTR _surface_point_index$[ebp], ecx

; 1529 : 	third_point = current_object_3d_surface_point_list[surface_point_index].point + base_point;

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _surface_point_index$[ebp]
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00064	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00068	03 55 10	 add	 edx, DWORD PTR _base_point$[ebp]
  0006b	89 55 ec	 mov	 DWORD PTR _third_point$[ebp], edx

; 1530 : 
; 1531 : 	outcode = transformed_3d_points[first_point].outcode;

  0006e	8b 45 f4	 mov	 eax, DWORD PTR _first_point$[ebp]
  00071	c1 e0 06	 shl	 eax, 6
  00074	8a 88 2c 00 00
	00		 mov	 cl, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  0007a	88 4d ff	 mov	 BYTE PTR _outcode$[ebp], cl

; 1532 : 	outcode2 = transformed_3d_points[first_point].outcode;

  0007d	8b 45 f4	 mov	 eax, DWORD PTR _first_point$[ebp]
  00080	c1 e0 06	 shl	 eax, 6
  00083	8a 88 2c 00 00
	00		 mov	 cl, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00089	88 4d fe	 mov	 BYTE PTR _outcode2$[ebp], cl

; 1533 : 
; 1534 : 	outcode |= transformed_3d_points[second_point].outcode;

  0008c	8b 45 f0	 mov	 eax, DWORD PTR _second_point$[ebp]
  0008f	c1 e0 06	 shl	 eax, 6
  00092	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00099	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$[ebp]
  0009d	0b d1		 or	 edx, ecx
  0009f	88 55 ff	 mov	 BYTE PTR _outcode$[ebp], dl

; 1535 : 	outcode2 &= transformed_3d_points[second_point].outcode;

  000a2	8b 45 f0	 mov	 eax, DWORD PTR _second_point$[ebp]
  000a5	c1 e0 06	 shl	 eax, 6
  000a8	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  000af	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$[ebp]
  000b3	23 d1		 and	 edx, ecx
  000b5	88 55 fe	 mov	 BYTE PTR _outcode2$[ebp], dl

; 1536 : 
; 1537 : 	outcode |= transformed_3d_points[third_point].outcode;

  000b8	8b 45 ec	 mov	 eax, DWORD PTR _third_point$[ebp]
  000bb	c1 e0 06	 shl	 eax, 6
  000be	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  000c5	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$[ebp]
  000c9	0b d1		 or	 edx, ecx
  000cb	88 55 ff	 mov	 BYTE PTR _outcode$[ebp], dl

; 1538 : 	outcode2 &= transformed_3d_points[third_point].outcode;

  000ce	8b 45 ec	 mov	 eax, DWORD PTR _third_point$[ebp]
  000d1	c1 e0 06	 shl	 eax, 6
  000d4	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  000db	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$[ebp]
  000df	23 d1		 and	 edx, ecx
  000e1	88 55 fe	 mov	 BYTE PTR _outcode2$[ebp], dl

; 1539 : 
; 1540 : 	transformed_3d_points[first_point].next_vertex = &transformed_3d_points[second_point];

  000e4	8b 45 f0	 mov	 eax, DWORD PTR _second_point$[ebp]
  000e7	c1 e0 06	 shl	 eax, 6
  000ea	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  000ef	8b 4d f4	 mov	 ecx, DWORD PTR _first_point$[ebp]
  000f2	c1 e1 06	 shl	 ecx, 6
  000f5	89 81 28 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+40], eax

; 1541 : 	transformed_3d_points[second_point].next_vertex = &transformed_3d_points[third_point];

  000fb	8b 45 ec	 mov	 eax, DWORD PTR _third_point$[ebp]
  000fe	c1 e0 06	 shl	 eax, 6
  00101	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  00106	8b 4d f0	 mov	 ecx, DWORD PTR _second_point$[ebp]
  00109	c1 e1 06	 shl	 ecx, 6
  0010c	89 81 28 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+40], eax

; 1542 : 	transformed_3d_points[third_point].next_vertex = NULL;

  00112	8b 45 ec	 mov	 eax, DWORD PTR _third_point$[ebp]
  00115	c1 e0 06	 shl	 eax, 6
  00118	c7 80 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+40], 0

; 1543 : 
; 1544 : 	*polygon_outcode = outcode;

  00122	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$[ebp]
  00126	8b 4d 14	 mov	 ecx, DWORD PTR _polygon_outcode$[ebp]
  00129	89 01		 mov	 DWORD PTR [ecx], eax

; 1545 : 
; 1546 : 	if ( outcode2 )

  0012b	0f b6 45 fe	 movzx	 eax, BYTE PTR _outcode2$[ebp]
  0012f	85 c0		 test	 eax, eax
  00131	74 06		 je	 SHORT $LN2@construct_

; 1547 : 	{
; 1548 : 
; 1549 : 		return ( NULL );

  00133	33 c0		 xor	 eax, eax
  00135	eb 0d		 jmp	 SHORT $LN1@construct_

; 1550 : 	}
; 1551 : 	else

  00137	eb 0b		 jmp	 SHORT $LN1@construct_
$LN2@construct_:

; 1552 : 	{
; 1553 : 
; 1554 : 		return ( &transformed_3d_points[first_point] );

  00139	8b 45 f4	 mov	 eax, DWORD PTR _first_point$[ebp]
  0013c	c1 e0 06	 shl	 eax, 6
  0013f	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
$LN1@construct_:

; 1555 : 	}
; 1556 : }

  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 10 00	 ret	 16			; 00000010H
?construct_3d_horizon_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_SHORT_REFERENCE@@HPAH@Z ENDP ; construct_3d_horizon_triangle_fan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?outcode_3d_horizon_polygon@@YGHHPAUPOINT_3D_SHORT_REFERENCE@@HPAH@Z
_TEXT	SEGMENT
_vertices$ = -16					; size = 4
_outcode2$ = -10					; size = 1
_outcode$ = -9						; size = 1
_count$ = -8						; size = 4
_this_outcode$ = -4					; size = 4
_num_points$ = 8					; size = 4
_points$ = 12						; size = 4
_base_point$ = 16					; size = 4
_polygon_outcode$ = 20					; size = 4
?outcode_3d_horizon_polygon@@YGHHPAUPOINT_3D_SHORT_REFERENCE@@HPAH@Z PROC ; outcode_3d_horizon_polygon, COMDAT

; 1471 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1472 : 
; 1473 : 	int
; 1474 : 		this_outcode,
; 1475 : 		count;
; 1476 : 
; 1477 : 	unsigned char
; 1478 : 		outcode,
; 1479 : 		outcode2;
; 1480 : 
; 1481 : 	vertex
; 1482 : 		*vertices;
; 1483 : 
; 1484 : 	vertices = transformed_3d_points + base_point;

  00009	8b 45 10	 mov	 eax, DWORD PTR _base_point$[ebp]
  0000c	c1 e0 06	 shl	 eax, 6
  0000f	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  00014	89 45 f0	 mov	 DWORD PTR _vertices$[ebp], eax

; 1485 : 
; 1486 : 	this_outcode = vertices[ current_object_3d_surface_point_list[ points[0].point].point ].outcode;

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	6b c8 00	 imul	 ecx, eax, 0
  0001f	8b 55 0c	 mov	 edx, DWORD PTR _points$[ebp]
  00022	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  0002c	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00030	c1 e2 06	 shl	 edx, 6
  00033	8b 45 f0	 mov	 eax, DWORD PTR _vertices$[ebp]
  00036	0f b6 4c 10 2c	 movzx	 ecx, BYTE PTR [eax+edx+44]
  0003b	89 4d fc	 mov	 DWORD PTR _this_outcode$[ebp], ecx

; 1487 : 
; 1488 : 	outcode = this_outcode;

  0003e	8a 45 fc	 mov	 al, BYTE PTR _this_outcode$[ebp]
  00041	88 45 f7	 mov	 BYTE PTR _outcode$[ebp], al

; 1489 : 	outcode2 = this_outcode;

  00044	8a 45 fc	 mov	 al, BYTE PTR _this_outcode$[ebp]
  00047	88 45 f6	 mov	 BYTE PTR _outcode2$[ebp], al

; 1490 : 
; 1491 : 	for ( count = 1; count < num_points; count++ )

  0004a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  00051	eb 09		 jmp	 SHORT $LN4@outcode_3d
$LN2@outcode_3d:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@outcode_3d:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _num_points$[ebp]
  00062	7d 37		 jge	 SHORT $LN3@outcode_3d

; 1492 : 	{
; 1493 : 
; 1494 : 		this_outcode = vertices[ current_object_3d_surface_point_list[ points[count].point].point ].outcode;

  00064	8b 45 0c	 mov	 eax, DWORD PTR _points$[ebp]
  00067	03 45 f8	 add	 eax, DWORD PTR _count$[ebp]
  0006a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0006d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00073	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00077	c1 e0 06	 shl	 eax, 6
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0007d	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00082	89 55 fc	 mov	 DWORD PTR _this_outcode$[ebp], edx

; 1495 : 
; 1496 : 		outcode |= this_outcode;

  00085	0f b6 45 f7	 movzx	 eax, BYTE PTR _outcode$[ebp]
  00089	0b 45 fc	 or	 eax, DWORD PTR _this_outcode$[ebp]
  0008c	88 45 f7	 mov	 BYTE PTR _outcode$[ebp], al

; 1497 : 		outcode2 &= this_outcode;

  0008f	0f b6 45 f6	 movzx	 eax, BYTE PTR _outcode2$[ebp]
  00093	23 45 fc	 and	 eax, DWORD PTR _this_outcode$[ebp]
  00096	88 45 f6	 mov	 BYTE PTR _outcode2$[ebp], al

; 1498 : 	}

  00099	eb b8		 jmp	 SHORT $LN2@outcode_3d
$LN3@outcode_3d:

; 1499 : 
; 1500 : 	*polygon_outcode = outcode;

  0009b	0f b6 45 f7	 movzx	 eax, BYTE PTR _outcode$[ebp]
  0009f	8b 4d 14	 mov	 ecx, DWORD PTR _polygon_outcode$[ebp]
  000a2	89 01		 mov	 DWORD PTR [ecx], eax

; 1501 : 
; 1502 : 	return ( outcode2 );

  000a4	0f b6 45 f6	 movzx	 eax, BYTE PTR _outcode2$[ebp]

; 1503 : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 10 00	 ret	 16			; 00000010H
?outcode_3d_horizon_polygon@@YGHHPAUPOINT_3D_SHORT_REFERENCE@@HPAH@Z ENDP ; outcode_3d_horizon_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?render_3d_horizon_infrared_face@@YGXPAUOBJECT_3D_FACE@@HHPAUOBJECT_3D_INFO@@@Z
_TEXT	SEGMENT
_destination_vertices$1 = -60				; size = 4
_number_of_points$2 = -56				; size = 4
_count$3 = -52						; size = 4
_triangle_count$4 = -48					; size = 4
_transformed_points$5 = -44				; size = 4
_destination_vertices$6 = -40				; size = 4
_vert$7 = -36						; size = 4
_this_point$8 = -32					; size = 4
_surface_point_index$9 = -28				; size = 4
_count$10 = -24						; size = 4
_point_list$11 = -20					; size = 4
_outcode$12 = -16					; size = 4
_poly$13 = -12						; size = 4
_face_colour$ = -8					; size = 4
_surface$ = -4						; size = 4
_this_face$ = 8						; size = 4
_surface_index$ = 12					; size = 4
_reference_offset$ = 16					; size = 4
_object_base$ = 20					; size = 4
?render_3d_horizon_infrared_face@@YGXPAUOBJECT_3D_FACE@@HHPAUOBJECT_3D_INFO@@@Z PROC ; render_3d_horizon_infrared_face, COMDAT

; 1311 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1312 : 
; 1313 : 	face_surface_description
; 1314 : 		*surface;
; 1315 : 
; 1316 : 	real_colour
; 1317 : 		face_colour;
; 1318 : 
; 1319 : 	surface = &objects_3d_data[object_base->object_number].surfaces[surface_index];

  00009	8b 45 14	 mov	 eax, DWORD PTR _object_base$[ebp]
  0000c	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  00010	8b 55 0c	 mov	 edx, DWORD PTR _surface_index$[ebp]
  00013	c1 e2 04	 shl	 edx, 4
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0001b	03 54 08 50	 add	 edx, DWORD PTR [eax+ecx+80]
  0001f	89 55 fc	 mov	 DWORD PTR _surface$[ebp], edx

; 1320 : 
; 1321 : 	face_colour.red = active_3d_environment->fog_colour.r;

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00027	8a 48 6a	 mov	 cl, BYTE PTR [eax+106]
  0002a	88 4d fa	 mov	 BYTE PTR _face_colour$[ebp+2], cl

; 1322 : 	face_colour.green = active_3d_environment->fog_colour.g;

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00032	8a 48 69	 mov	 cl, BYTE PTR [eax+105]
  00035	88 4d f9	 mov	 BYTE PTR _face_colour$[ebp+1], cl

; 1323 : 	face_colour.blue = active_3d_environment->fog_colour.b;

  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0003d	8a 48 68	 mov	 cl, BYTE PTR [eax+104]
  00040	88 4d f8	 mov	 BYTE PTR _face_colour$[ebp], cl

; 1324 : 	face_colour.alpha = 255;

  00043	c6 45 fb ff	 mov	 BYTE PTR _face_colour$[ebp+3], 255 ; 000000ffH

; 1325 : 
; 1326 : 	if ( this_face->number_of_points > 2 )

  00047	8b 45 08	 mov	 eax, DWORD PTR _this_face$[ebp]
  0004a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0004d	83 f9 02	 cmp	 ecx, 2
  00050	0f 8e 91 02 00
	00		 jle	 $LN11@render_3d_

; 1327 : 	{
; 1328 : 
; 1329 : 		vertex
; 1330 : 			*poly;
; 1331 : 
; 1332 : 		int
; 1333 : 			outcode;
; 1334 : 	
; 1335 : 		//
; 1336 : 		// The face is a triangle fan
; 1337 : 		//
; 1338 : 	
; 1339 : 		{
; 1340 : 
; 1341 : 			point_3d_short_reference
; 1342 : 				*point_list;
; 1343 : 
; 1344 : 			point_list = objects_3d_data[object_base->object_number].object_faces_point_plain_list;

  00056	8b 45 14	 mov	 eax, DWORD PTR _object_base$[ebp]
  00059	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00063	8b 44 0a 4c	 mov	 eax, DWORD PTR [edx+ecx+76]
  00067	89 45 ec	 mov	 DWORD PTR _point_list$11[ebp], eax

; 1345 : 
; 1346 : 			point_list += reference_offset;

  0006a	8b 45 ec	 mov	 eax, DWORD PTR _point_list$11[ebp]
  0006d	03 45 10	 add	 eax, DWORD PTR _reference_offset$[ebp]
  00070	89 45 ec	 mov	 DWORD PTR _point_list$11[ebp], eax

; 1347 : 
; 1348 : 			if ( !outcode_3d_horizon_polygon ( this_face->number_of_points, point_list, object_base->points_base, &outcode ) )

  00073	8d 45 f0	 lea	 eax, DWORD PTR _outcode$12[ebp]
  00076	50		 push	 eax
  00077	8b 4d 14	 mov	 ecx, DWORD PTR _object_base$[ebp]
  0007a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0007d	52		 push	 edx
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _point_list$11[ebp]
  00081	50		 push	 eax
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _this_face$[ebp]
  00085	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ?outcode_3d_horizon_polygon@@YGHHPAUPOINT_3D_SHORT_REFERENCE@@HPAH@Z ; outcode_3d_horizon_polygon
  0008e	85 c0		 test	 eax, eax
  00090	0f 85 4f 02 00
	00		 jne	 $LN6@render_3d_

; 1349 : 			{
; 1350 : 
; 1351 : 				if ( outcode == 0 )

  00096	83 7d f0 00	 cmp	 DWORD PTR _outcode$12[ebp], 0
  0009a	0f 85 f4 00 00
	00		 jne	 $LN14@render_3d_

; 1352 : 				{
; 1353 : 				
; 1354 : 					int
; 1355 : 						count,
; 1356 : 						surface_point_index,
; 1357 : 						this_point;
; 1358 : 				
; 1359 : 					vertex
; 1360 : 						*vert;
; 1361 : 				
; 1362 : 					LPD3DTLVERTEX
; 1363 : 						destination_vertices;
; 1364 : 				
; 1365 : 					vertex
; 1366 : 						*transformed_points;
; 1367 : 				
; 1368 : 					transformed_points = &transformed_3d_points[object_base->points_base];

  000a0	8b 45 14	 mov	 eax, DWORD PTR _object_base$[ebp]
  000a3	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000a6	c1 e1 06	 shl	 ecx, 6
  000a9	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  000af	89 4d d4	 mov	 DWORD PTR _transformed_points$5[ebp], ecx

; 1369 : 				
; 1370 : 					destination_vertices = get_d3d_vertices_points_address ( this_face->number_of_points );

  000b2	8b 45 08	 mov	 eax, DWORD PTR _this_face$[ebp]
  000b5	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000b8	51		 push	 ecx
  000b9	e8 00 00 00 00	 call	 ?get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z ; get_d3d_vertices_points_address
  000be	89 45 d8	 mov	 DWORD PTR _destination_vertices$6[ebp], eax

; 1371 : 				
; 1372 : 					for ( count = 0; count < this_face->number_of_points; count++ )

  000c1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _count$10[ebp], 0
  000c8	eb 09		 jmp	 SHORT $LN4@render_3d_
$LN2@render_3d_:
  000ca	8b 45 e8	 mov	 eax, DWORD PTR _count$10[ebp]
  000cd	83 c0 01	 add	 eax, 1
  000d0	89 45 e8	 mov	 DWORD PTR _count$10[ebp], eax
$LN4@render_3d_:
  000d3	8b 45 08	 mov	 eax, DWORD PTR _this_face$[ebp]
  000d6	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000d9	39 4d e8	 cmp	 DWORD PTR _count$10[ebp], ecx
  000dc	0f 8d 9d 00 00
	00		 jge	 $LN3@render_3d_

; 1373 : 					{
; 1374 : 					
; 1375 : 						surface_point_index = point_list[count].point;

  000e2	8b 45 ec	 mov	 eax, DWORD PTR _point_list$11[ebp]
  000e5	03 45 e8	 add	 eax, DWORD PTR _count$10[ebp]
  000e8	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000eb	89 4d e4	 mov	 DWORD PTR _surface_point_index$9[ebp], ecx

; 1376 : 						this_point = current_object_3d_surface_point_list[surface_point_index].point;

  000ee	8b 45 e4	 mov	 eax, DWORD PTR _surface_point_index$9[ebp]
  000f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  000f7	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  000fb	89 55 e0	 mov	 DWORD PTR _this_point$8[ebp], edx

; 1377 : 					
; 1378 : 						vert = &transformed_points[this_point];

  000fe	8b 45 e0	 mov	 eax, DWORD PTR _this_point$8[ebp]
  00101	c1 e0 06	 shl	 eax, 6
  00104	03 45 d4	 add	 eax, DWORD PTR _transformed_points$5[ebp]
  00107	89 45 dc	 mov	 DWORD PTR _vert$7[ebp], eax

; 1379 : 					
; 1380 : 						destination_vertices[count].sx = vert->i;

  0010a	8b 45 e8	 mov	 eax, DWORD PTR _count$10[ebp]
  0010d	c1 e0 05	 shl	 eax, 5
  00110	8b 4d d8	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  00113	8b 55 dc	 mov	 edx, DWORD PTR _vert$7[ebp]
  00116	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00119	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 1381 : 						destination_vertices[count].sy = vert->j;

  0011c	8b 45 e8	 mov	 eax, DWORD PTR _count$10[ebp]
  0011f	c1 e0 05	 shl	 eax, 5
  00122	8b 4d d8	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  00125	8b 55 dc	 mov	 edx, DWORD PTR _vert$7[ebp]
  00128	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0012b	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1382 : 						destination_vertices[count].sz = POLYGON_ZDISTANCE_FARTHEST;

  0012f	8b 45 e8	 mov	 eax, DWORD PTR _count$10[ebp]
  00132	c1 e0 05	 shl	 eax, 5
  00135	8b 4d d8	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00140	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 1383 : 						destination_vertices[count].rhw = vert->q;

  00146	8b 45 e8	 mov	 eax, DWORD PTR _count$10[ebp]
  00149	c1 e0 05	 shl	 eax, 5
  0014c	8b 4d d8	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  0014f	8b 55 dc	 mov	 edx, DWORD PTR _vert$7[ebp]
  00152	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00155	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1384 : 						destination_vertices[count].color = face_colour.colour;

  00159	8b 45 e8	 mov	 eax, DWORD PTR _count$10[ebp]
  0015c	c1 e0 05	 shl	 eax, 5
  0015f	8b 4d d8	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  00162	8b 55 f8	 mov	 edx, DWORD PTR _face_colour$[ebp]
  00165	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 1385 : 						destination_vertices[count].specular = 0;	//RGBA_MAKE ( 255, 0, 0, 0 );	//vert->colour;

  00169	8b 45 e8	 mov	 eax, DWORD PTR _count$10[ebp]
  0016c	c1 e0 05	 shl	 eax, 5
  0016f	8b 4d d8	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  00172	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 1386 : 					}

  0017a	e9 4b ff ff ff	 jmp	 $LN2@render_3d_
$LN3@render_3d_:

; 1387 : 				
; 1388 : 					draw_fan_primitive ( this_face->number_of_points, destination_vertices );

  0017f	8b 45 d8	 mov	 eax, DWORD PTR _destination_vertices$6[ebp]
  00182	50		 push	 eax
  00183	8b 4d 08	 mov	 ecx, DWORD PTR _this_face$[ebp]
  00186	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00189	52		 push	 edx
  0018a	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive

; 1389 : 				}
; 1390 : 				else

  0018f	e9 51 01 00 00	 jmp	 $LN6@render_3d_
$LN14@render_3d_:

; 1391 : 				{
; 1392 : 
; 1393 : 					int
; 1394 : 						triangle_count;
; 1395 : 	
; 1396 : 					for ( triangle_count = 0; triangle_count < ( this_face->number_of_points - 2 ); triangle_count++ )

  00194	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _triangle_count$4[ebp], 0
  0019b	eb 09		 jmp	 SHORT $LN7@render_3d_
$LN5@render_3d_:
  0019d	8b 45 d0	 mov	 eax, DWORD PTR _triangle_count$4[ebp]
  001a0	83 c0 01	 add	 eax, 1
  001a3	89 45 d0	 mov	 DWORD PTR _triangle_count$4[ebp], eax
$LN7@render_3d_:
  001a6	8b 45 08	 mov	 eax, DWORD PTR _this_face$[ebp]
  001a9	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001ac	83 e9 02	 sub	 ecx, 2
  001af	39 4d d0	 cmp	 DWORD PTR _triangle_count$4[ebp], ecx
  001b2	0f 8d 2d 01 00
	00		 jge	 $LN6@render_3d_

; 1397 : 					{
; 1398 : 	
; 1399 : 						poly = construct_3d_horizon_triangle_fan ( triangle_count, point_list, object_base->points_base, &outcode );

  001b8	8d 45 f0	 lea	 eax, DWORD PTR _outcode$12[ebp]
  001bb	50		 push	 eax
  001bc	8b 4d 14	 mov	 ecx, DWORD PTR _object_base$[ebp]
  001bf	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001c2	52		 push	 edx
  001c3	8b 45 ec	 mov	 eax, DWORD PTR _point_list$11[ebp]
  001c6	50		 push	 eax
  001c7	8b 4d d0	 mov	 ecx, DWORD PTR _triangle_count$4[ebp]
  001ca	51		 push	 ecx
  001cb	e8 00 00 00 00	 call	 ?construct_3d_horizon_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_SHORT_REFERENCE@@HPAH@Z ; construct_3d_horizon_triangle_fan
  001d0	89 45 f4	 mov	 DWORD PTR _poly$13[ebp], eax

; 1400 : 	
; 1401 : 						if ( poly )

  001d3	83 7d f4 00	 cmp	 DWORD PTR _poly$13[ebp], 0
  001d7	0f 84 03 01 00
	00		 je	 $LN21@render_3d_

; 1402 : 						{
; 1403 : 		
; 1404 : 							clip_3d_coord = 0;

  001dd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 1405 : 						
; 1406 : 							if ( outcode )

  001e7	83 7d f0 00	 cmp	 DWORD PTR _outcode$12[ebp], 0
  001eb	74 34		 je	 SHORT $LN20@render_3d_

; 1407 : 							{
; 1408 : 				
; 1409 : 								if ( outcode & CLIP_HITHER )

  001ed	8b 45 f0	 mov	 eax, DWORD PTR _outcode$12[ebp]
  001f0	83 e0 20	 and	 eax, 32			; 00000020H
  001f3	74 10		 je	 SHORT $LN18@render_3d_

; 1410 : 								{
; 1411 : 							
; 1412 : 									poly = hither_clip_3d_polygon ( poly, &outcode );

  001f5	8d 45 f0	 lea	 eax, DWORD PTR _outcode$12[ebp]
  001f8	50		 push	 eax
  001f9	8b 4d f4	 mov	 ecx, DWORD PTR _poly$13[ebp]
  001fc	51		 push	 ecx
  001fd	e8 00 00 00 00	 call	 ?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; hither_clip_3d_polygon
  00202	89 45 f4	 mov	 DWORD PTR _poly$13[ebp], eax
$LN18@render_3d_:

; 1413 : 								}
; 1414 : 	
; 1415 : 								if ( poly )

  00205	83 7d f4 00	 cmp	 DWORD PTR _poly$13[ebp], 0
  00209	74 16		 je	 SHORT $LN20@render_3d_

; 1416 : 								{
; 1417 : 	
; 1418 : 									if ( outcode )

  0020b	83 7d f0 00	 cmp	 DWORD PTR _outcode$12[ebp], 0
  0020f	74 10		 je	 SHORT $LN20@render_3d_

; 1419 : 									{
; 1420 : 								
; 1421 : 										poly = clip_3d_polygon ( poly, outcode );

  00211	8b 45 f0	 mov	 eax, DWORD PTR _outcode$12[ebp]
  00214	50		 push	 eax
  00215	8b 4d f4	 mov	 ecx, DWORD PTR _poly$13[ebp]
  00218	51		 push	 ecx
  00219	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  0021e	89 45 f4	 mov	 DWORD PTR _poly$13[ebp], eax
$LN20@render_3d_:

; 1422 : 									}
; 1423 : 								}
; 1424 : 							}
; 1425 : 	
; 1426 : 							if ( poly )

  00221	83 7d f4 00	 cmp	 DWORD PTR _poly$13[ebp], 0
  00225	0f 84 b5 00 00
	00		 je	 $LN21@render_3d_

; 1427 : 							{
; 1428 : 
; 1429 : 								int
; 1430 : 									count,
; 1431 : 									number_of_points;
; 1432 : 							
; 1433 : 								LPD3DTLVERTEX
; 1434 : 									destination_vertices;
; 1435 : 							
; 1436 : 								destination_vertices = get_d3d_vertices_address ( poly, &number_of_points );

  0022b	8d 45 c8	 lea	 eax, DWORD PTR _number_of_points$2[ebp]
  0022e	50		 push	 eax
  0022f	8b 4d f4	 mov	 ecx, DWORD PTR _poly$13[ebp]
  00232	51		 push	 ecx
  00233	e8 00 00 00 00	 call	 ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
  00238	89 45 c4	 mov	 DWORD PTR _destination_vertices$1[ebp], eax

; 1437 : 							
; 1438 : 								for ( count = 0; count < number_of_points; count++ )

  0023b	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _count$3[ebp], 0
  00242	eb 09		 jmp	 SHORT $LN10@render_3d_
$LN8@render_3d_:
  00244	8b 45 cc	 mov	 eax, DWORD PTR _count$3[ebp]
  00247	83 c0 01	 add	 eax, 1
  0024a	89 45 cc	 mov	 DWORD PTR _count$3[ebp], eax
$LN10@render_3d_:
  0024d	8b 45 cc	 mov	 eax, DWORD PTR _count$3[ebp]
  00250	3b 45 c8	 cmp	 eax, DWORD PTR _number_of_points$2[ebp]
  00253	7d 7e		 jge	 SHORT $LN9@render_3d_

; 1439 : 								{
; 1440 : 								
; 1441 : 									destination_vertices[count].sx = poly->i;

  00255	8b 45 cc	 mov	 eax, DWORD PTR _count$3[ebp]
  00258	c1 e0 05	 shl	 eax, 5
  0025b	8b 4d c4	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  0025e	8b 55 f4	 mov	 edx, DWORD PTR _poly$13[ebp]
  00261	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00264	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 1442 : 									destination_vertices[count].sy = poly->j;

  00267	8b 45 cc	 mov	 eax, DWORD PTR _count$3[ebp]
  0026a	c1 e0 05	 shl	 eax, 5
  0026d	8b 4d c4	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  00270	8b 55 f4	 mov	 edx, DWORD PTR _poly$13[ebp]
  00273	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00276	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1443 : 									destination_vertices[count].sz = POLYGON_ZDISTANCE_FARTHEST;

  0027a	8b 45 cc	 mov	 eax, DWORD PTR _count$3[ebp]
  0027d	c1 e0 05	 shl	 eax, 5
  00280	8b 4d c4	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  00283	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0028b	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 1444 : 									destination_vertices[count].rhw = poly->q;

  00291	8b 45 cc	 mov	 eax, DWORD PTR _count$3[ebp]
  00294	c1 e0 05	 shl	 eax, 5
  00297	8b 4d c4	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  0029a	8b 55 f4	 mov	 edx, DWORD PTR _poly$13[ebp]
  0029d	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  002a0	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1445 : 									destination_vertices[count].color = face_colour.colour;

  002a4	8b 45 cc	 mov	 eax, DWORD PTR _count$3[ebp]
  002a7	c1 e0 05	 shl	 eax, 5
  002aa	8b 4d c4	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  002ad	8b 55 f8	 mov	 edx, DWORD PTR _face_colour$[ebp]
  002b0	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 1446 : 									destination_vertices[count].specular = 0;	//RGBA_MAKE ( 255, 0, 0, 0 );	//vert->colour;

  002b4	8b 45 cc	 mov	 eax, DWORD PTR _count$3[ebp]
  002b7	c1 e0 05	 shl	 eax, 5
  002ba	8b 4d c4	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  002bd	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 1447 : 
; 1448 : 									poly = poly->next_vertex;

  002c5	8b 45 f4	 mov	 eax, DWORD PTR _poly$13[ebp]
  002c8	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  002cb	89 4d f4	 mov	 DWORD PTR _poly$13[ebp], ecx

; 1449 : 								}

  002ce	e9 71 ff ff ff	 jmp	 $LN8@render_3d_
$LN9@render_3d_:

; 1450 : 							
; 1451 : 								draw_fan_primitive ( number_of_points, destination_vertices );

  002d3	8b 45 c4	 mov	 eax, DWORD PTR _destination_vertices$1[ebp]
  002d6	50		 push	 eax
  002d7	8b 4d c8	 mov	 ecx, DWORD PTR _number_of_points$2[ebp]
  002da	51		 push	 ecx
  002db	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive
$LN21@render_3d_:

; 1452 : 							}
; 1453 : 						}
; 1454 : 					}

  002e0	e9 b8 fe ff ff	 jmp	 $LN5@render_3d_
$LN6@render_3d_:

; 1455 : 				}
; 1456 : 			}
; 1457 : 		}
; 1458 : 	}
; 1459 : 	else

  002e5	eb 0d		 jmp	 SHORT $LN12@render_3d_
$LN11@render_3d_:

; 1460 : 	{
; 1461 : 
; 1462 : 		debug_fatal ( "Trying to draw a line/point in the horizon object" );

  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@MFGMGIAN@Trying?5to?5draw?5a?5line?1point?5in?5@
  002ec	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002f1	83 c4 04	 add	 esp, 4
$LN12@render_3d_:

; 1463 : 	}
; 1464 : }

  002f4	5f		 pop	 edi
  002f5	5e		 pop	 esi
  002f6	5b		 pop	 ebx
  002f7	8b e5		 mov	 esp, ebp
  002f9	5d		 pop	 ebp
  002fa	c2 10 00	 ret	 16			; 00000010H
?render_3d_horizon_infrared_face@@YGXPAUOBJECT_3D_FACE@@HHPAUOBJECT_3D_INFO@@@Z ENDP ; render_3d_horizon_infrared_face
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?render_3d_horizon_face@@YGXPAUOBJECT_3D_FACE@@HHPAUOBJECT_3D_INFO@@HUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_destination_vertices$1 = -56				; size = 4
_number_of_points$2 = -52				; size = 4
_count$3 = -48						; size = 4
_triangle_count$4 = -44					; size = 4
_transformed_points$5 = -40				; size = 4
_destination_vertices$6 = -36				; size = 4
_vert$7 = -32						; size = 4
_this_point$8 = -28					; size = 4
_surface_point_index$9 = -24				; size = 4
_count$10 = -20						; size = 4
_point_list$11 = -16					; size = 4
_outcode$12 = -12					; size = 4
_poly$13 = -8						; size = 4
_surface$ = -4						; size = 4
_this_face$ = 8						; size = 4
_surface_index$ = 12					; size = 4
_reference_offset$ = 16					; size = 4
_object_base$ = 20					; size = 4
_apply_filter$ = 24					; size = 4
_colour_filter$ = 28					; size = 4
?render_3d_horizon_face@@YGXPAUOBJECT_3D_FACE@@HHPAUOBJECT_3D_INFO@@HUREAL_COLOUR@@@Z PROC ; render_3d_horizon_face, COMDAT

; 1137 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1138 : 
; 1139 : 	face_surface_description
; 1140 : 		*surface;
; 1141 : 
; 1142 : 	surface = &objects_3d_data[ object_base->object_number ].surfaces[surface_index];

  00009	8b 45 14	 mov	 eax, DWORD PTR _object_base$[ebp]
  0000c	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  00010	8b 55 0c	 mov	 edx, DWORD PTR _surface_index$[ebp]
  00013	c1 e2 04	 shl	 edx, 4
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0001b	03 54 08 50	 add	 edx, DWORD PTR [eax+ecx+80]
  0001f	89 55 fc	 mov	 DWORD PTR _surface$[ebp], edx

; 1143 : 
; 1144 : 	if ( surface->textured )

  00022	8b 45 fc	 mov	 eax, DWORD PTR _surface$[ebp]
  00025	66 8b 08	 mov	 cx, WORD PTR [eax]
  00028	66 c1 e9 03	 shr	 cx, 3
  0002c	66 83 e1 01	 and	 cx, 1
  00030	0f b7 d1	 movzx	 edx, cx
  00033	85 d2		 test	 edx, edx
  00035	74 0d		 je	 SHORT $LN11@render_3d_

; 1145 : 	{
; 1146 : 
; 1147 : 		debug_fatal ( "Trying to draw a textured polygon in the horizon object" );

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@PEEIJIME@Trying?5to?5draw?5a?5textured?5polyg@
  0003c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00041	83 c4 04	 add	 esp, 4
$LN11@render_3d_:

; 1148 : 	}
; 1149 : 
; 1150 : 	if ( !surface->smoothed )

  00044	8b 45 fc	 mov	 eax, DWORD PTR _surface$[ebp]
  00047	66 8b 08	 mov	 cx, WORD PTR [eax]
  0004a	66 c1 e9 02	 shr	 cx, 2
  0004e	66 83 e1 01	 and	 cx, 1
  00052	0f b7 d1	 movzx	 edx, cx
  00055	85 d2		 test	 edx, edx
  00057	75 0d		 jne	 SHORT $LN12@render_3d_

; 1151 : 	{
; 1152 : 
; 1153 : 		debug_fatal ( "Trying to draw a flat shaded polygon in the horizon object" );

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@CNJAAFNL@Trying?5to?5draw?5a?5flat?5shaded?5po@
  0005e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00063	83 c4 04	 add	 esp, 4
$LN12@render_3d_:

; 1154 : 	}
; 1155 : 
; 1156 : 	if ( surface->polygons )

  00066	8b 45 fc	 mov	 eax, DWORD PTR _surface$[ebp]
  00069	66 8b 08	 mov	 cx, WORD PTR [eax]
  0006c	66 83 e1 01	 and	 cx, 1
  00070	0f b7 d1	 movzx	 edx, cx
  00073	85 d2		 test	 edx, edx
  00075	0f 84 c0 02 00
	00		 je	 $LN13@render_3d_

; 1157 : 	{
; 1158 : 
; 1159 : 		vertex
; 1160 : 			*poly;
; 1161 : 
; 1162 : 		int
; 1163 : 			outcode;
; 1164 : 	
; 1165 : 		//
; 1166 : 		// The face is a triangle fan
; 1167 : 		//
; 1168 : 	
; 1169 : 		{
; 1170 : 
; 1171 : 			point_3d_short_reference
; 1172 : 				*point_list;
; 1173 : 
; 1174 : 			point_list = objects_3d_data[object_base->object_number].object_faces_point_plain_list;

  0007b	8b 45 14	 mov	 eax, DWORD PTR _object_base$[ebp]
  0007e	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  00082	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00088	8b 44 0a 4c	 mov	 eax, DWORD PTR [edx+ecx+76]
  0008c	89 45 f0	 mov	 DWORD PTR _point_list$11[ebp], eax

; 1175 : 
; 1176 : 			point_list += reference_offset;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _point_list$11[ebp]
  00092	03 45 10	 add	 eax, DWORD PTR _reference_offset$[ebp]
  00095	89 45 f0	 mov	 DWORD PTR _point_list$11[ebp], eax

; 1177 : 
; 1178 : 			if ( !outcode_3d_horizon_polygon ( this_face->number_of_points, point_list, object_base->points_base, &outcode ) )

  00098	8d 45 f4	 lea	 eax, DWORD PTR _outcode$12[ebp]
  0009b	50		 push	 eax
  0009c	8b 4d 14	 mov	 ecx, DWORD PTR _object_base$[ebp]
  0009f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000a2	52		 push	 edx
  000a3	8b 45 f0	 mov	 eax, DWORD PTR _point_list$11[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _this_face$[ebp]
  000aa	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ?outcode_3d_horizon_polygon@@YGHHPAUPOINT_3D_SHORT_REFERENCE@@HPAH@Z ; outcode_3d_horizon_polygon
  000b3	85 c0		 test	 eax, eax
  000b5	0f 85 7e 02 00
	00		 jne	 $LN6@render_3d_

; 1179 : 			{
; 1180 : 
; 1181 : 				if ( outcode == 0 )

  000bb	83 7d f4 00	 cmp	 DWORD PTR _outcode$12[ebp], 0
  000bf	0f 85 04 01 00
	00		 jne	 $LN16@render_3d_

; 1182 : 				{
; 1183 : 				
; 1184 : 					int
; 1185 : 						count,
; 1186 : 						surface_point_index,
; 1187 : 						this_point;
; 1188 : 				
; 1189 : 					vertex
; 1190 : 						*vert;
; 1191 : 				
; 1192 : 					LPD3DTLVERTEX
; 1193 : 						destination_vertices;
; 1194 : 				
; 1195 : 					vertex
; 1196 : 						*transformed_points;
; 1197 : 
; 1198 : 					transformed_points = transformed_3d_points;	//[object_base->points_base];

  000c5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _transformed_points$5[ebp], OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points

; 1199 : 				
; 1200 : 					destination_vertices = get_d3d_vertices_points_address ( this_face->number_of_points );

  000cc	8b 45 08	 mov	 eax, DWORD PTR _this_face$[ebp]
  000cf	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 ?get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z ; get_d3d_vertices_points_address
  000d8	89 45 dc	 mov	 DWORD PTR _destination_vertices$6[ebp], eax

; 1201 : 
; 1202 : 					for ( count = 0; count < this_face->number_of_points; count++ )

  000db	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$10[ebp], 0
  000e2	eb 09		 jmp	 SHORT $LN4@render_3d_
$LN2@render_3d_:
  000e4	8b 45 ec	 mov	 eax, DWORD PTR _count$10[ebp]
  000e7	83 c0 01	 add	 eax, 1
  000ea	89 45 ec	 mov	 DWORD PTR _count$10[ebp], eax
$LN4@render_3d_:
  000ed	8b 45 08	 mov	 eax, DWORD PTR _this_face$[ebp]
  000f0	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000f3	39 4d ec	 cmp	 DWORD PTR _count$10[ebp], ecx
  000f6	0f 8d b8 00 00
	00		 jge	 $LN3@render_3d_

; 1203 : 					{
; 1204 : 
; 1205 : 						surface_point_index = point_list[count].point;

  000fc	8b 45 f0	 mov	 eax, DWORD PTR _point_list$11[ebp]
  000ff	03 45 ec	 add	 eax, DWORD PTR _count$10[ebp]
  00102	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00105	89 4d e8	 mov	 DWORD PTR _surface_point_index$9[ebp], ecx

; 1206 : 						this_point = current_object_3d_surface_point_list[surface_point_index].point;

  00108	8b 45 e8	 mov	 eax, DWORD PTR _surface_point_index$9[ebp]
  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00111	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00115	89 55 e4	 mov	 DWORD PTR _this_point$8[ebp], edx

; 1207 : 					
; 1208 : 						vert = &transformed_points[this_point];

  00118	8b 45 e4	 mov	 eax, DWORD PTR _this_point$8[ebp]
  0011b	c1 e0 06	 shl	 eax, 6
  0011e	03 45 d8	 add	 eax, DWORD PTR _transformed_points$5[ebp]
  00121	89 45 e0	 mov	 DWORD PTR _vert$7[ebp], eax

; 1209 : 					
; 1210 : 						destination_vertices[count].sx = vert->i;

  00124	8b 45 ec	 mov	 eax, DWORD PTR _count$10[ebp]
  00127	c1 e0 05	 shl	 eax, 5
  0012a	8b 4d dc	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  0012d	8b 55 e0	 mov	 edx, DWORD PTR _vert$7[ebp]
  00130	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00133	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 1211 : 						destination_vertices[count].sy = vert->j;

  00136	8b 45 ec	 mov	 eax, DWORD PTR _count$10[ebp]
  00139	c1 e0 05	 shl	 eax, 5
  0013c	8b 4d dc	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  0013f	8b 55 e0	 mov	 edx, DWORD PTR _vert$7[ebp]
  00142	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00145	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1212 : 						destination_vertices[count].sz = POLYGON_ZDISTANCE_FARTHEST;

  00149	8b 45 ec	 mov	 eax, DWORD PTR _count$10[ebp]
  0014c	c1 e0 05	 shl	 eax, 5
  0014f	8b 4d dc	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  00152	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0015a	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 1213 : 						destination_vertices[count].rhw = vert->q;

  00160	8b 45 ec	 mov	 eax, DWORD PTR _count$10[ebp]
  00163	c1 e0 05	 shl	 eax, 5
  00166	8b 4d dc	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  00169	8b 55 e0	 mov	 edx, DWORD PTR _vert$7[ebp]
  0016c	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  0016f	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1214 : 
; 1215 : 						if (apply_filter)

  00173	83 7d 18 00	 cmp	 DWORD PTR _apply_filter$[ebp], 0
  00177	74 12		 je	 SHORT $LN18@render_3d_

; 1216 : 							destination_vertices[count].color = colour_filter.colour;

  00179	8b 45 ec	 mov	 eax, DWORD PTR _count$10[ebp]
  0017c	c1 e0 05	 shl	 eax, 5
  0017f	8b 4d dc	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  00182	8b 55 1c	 mov	 edx, DWORD PTR _colour_filter$[ebp]
  00185	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 1217 : 						else

  00189	eb 13		 jmp	 SHORT $LN19@render_3d_
$LN18@render_3d_:

; 1218 : 							destination_vertices[count].color = vert->colour;

  0018b	8b 45 ec	 mov	 eax, DWORD PTR _count$10[ebp]
  0018e	c1 e0 05	 shl	 eax, 5
  00191	8b 4d dc	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  00194	8b 55 e0	 mov	 edx, DWORD PTR _vert$7[ebp]
  00197	8b 52 30	 mov	 edx, DWORD PTR [edx+48]
  0019a	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx
$LN19@render_3d_:

; 1219 : 
; 1220 : 						destination_vertices[count].specular = 0;	//RGBA_MAKE ( 0, 0, 0, 0 );	//vert->colour;

  0019e	8b 45 ec	 mov	 eax, DWORD PTR _count$10[ebp]
  001a1	c1 e0 05	 shl	 eax, 5
  001a4	8b 4d dc	 mov	 ecx, DWORD PTR _destination_vertices$6[ebp]
  001a7	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 1221 : 					}

  001af	e9 30 ff ff ff	 jmp	 $LN2@render_3d_
$LN3@render_3d_:

; 1222 : 				
; 1223 : 					draw_fan_primitive ( this_face->number_of_points, destination_vertices );

  001b4	8b 45 dc	 mov	 eax, DWORD PTR _destination_vertices$6[ebp]
  001b7	50		 push	 eax
  001b8	8b 4d 08	 mov	 ecx, DWORD PTR _this_face$[ebp]
  001bb	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  001be	52		 push	 edx
  001bf	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive

; 1224 : 				}
; 1225 : 				else

  001c4	e9 70 01 00 00	 jmp	 $LN6@render_3d_
$LN16@render_3d_:

; 1226 : 				{
; 1227 : 
; 1228 : 					int
; 1229 : 						triangle_count;
; 1230 : 	
; 1231 : 					for ( triangle_count = 0; triangle_count < ( this_face->number_of_points - 2 ); triangle_count++ )

  001c9	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _triangle_count$4[ebp], 0
  001d0	eb 09		 jmp	 SHORT $LN7@render_3d_
$LN5@render_3d_:
  001d2	8b 45 d4	 mov	 eax, DWORD PTR _triangle_count$4[ebp]
  001d5	83 c0 01	 add	 eax, 1
  001d8	89 45 d4	 mov	 DWORD PTR _triangle_count$4[ebp], eax
$LN7@render_3d_:
  001db	8b 45 08	 mov	 eax, DWORD PTR _this_face$[ebp]
  001de	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001e1	83 e9 02	 sub	 ecx, 2
  001e4	39 4d d4	 cmp	 DWORD PTR _triangle_count$4[ebp], ecx
  001e7	0f 8d 4c 01 00
	00		 jge	 $LN6@render_3d_

; 1232 : 					{
; 1233 : 
; 1234 : 						poly = construct_3d_horizon_triangle_fan ( triangle_count, point_list, object_base->points_base, &outcode );

  001ed	8d 45 f4	 lea	 eax, DWORD PTR _outcode$12[ebp]
  001f0	50		 push	 eax
  001f1	8b 4d 14	 mov	 ecx, DWORD PTR _object_base$[ebp]
  001f4	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001f7	52		 push	 edx
  001f8	8b 45 f0	 mov	 eax, DWORD PTR _point_list$11[ebp]
  001fb	50		 push	 eax
  001fc	8b 4d d4	 mov	 ecx, DWORD PTR _triangle_count$4[ebp]
  001ff	51		 push	 ecx
  00200	e8 00 00 00 00	 call	 ?construct_3d_horizon_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_SHORT_REFERENCE@@HPAH@Z ; construct_3d_horizon_triangle_fan
  00205	89 45 f8	 mov	 DWORD PTR _poly$13[ebp], eax

; 1235 : 	
; 1236 : 						if ( poly )

  00208	83 7d f8 00	 cmp	 DWORD PTR _poly$13[ebp], 0
  0020c	0f 84 22 01 00
	00		 je	 $LN25@render_3d_

; 1237 : 						{
; 1238 : 		
; 1239 : 							clip_3d_coord = 0;

  00212	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 1240 : 						
; 1241 : 							if ( outcode )

  0021c	83 7d f4 00	 cmp	 DWORD PTR _outcode$12[ebp], 0
  00220	74 34		 je	 SHORT $LN24@render_3d_

; 1242 : 							{
; 1243 : 				
; 1244 : 								if ( outcode & CLIP_HITHER )

  00222	8b 45 f4	 mov	 eax, DWORD PTR _outcode$12[ebp]
  00225	83 e0 20	 and	 eax, 32			; 00000020H
  00228	74 10		 je	 SHORT $LN22@render_3d_

; 1245 : 								{
; 1246 : 							
; 1247 : 									poly = hither_clip_3d_polygon ( poly, &outcode );

  0022a	8d 45 f4	 lea	 eax, DWORD PTR _outcode$12[ebp]
  0022d	50		 push	 eax
  0022e	8b 4d f8	 mov	 ecx, DWORD PTR _poly$13[ebp]
  00231	51		 push	 ecx
  00232	e8 00 00 00 00	 call	 ?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; hither_clip_3d_polygon
  00237	89 45 f8	 mov	 DWORD PTR _poly$13[ebp], eax
$LN22@render_3d_:

; 1248 : 								}
; 1249 : 	
; 1250 : 								if ( poly )

  0023a	83 7d f8 00	 cmp	 DWORD PTR _poly$13[ebp], 0
  0023e	74 16		 je	 SHORT $LN24@render_3d_

; 1251 : 								{
; 1252 : 	
; 1253 : 									if ( outcode )

  00240	83 7d f4 00	 cmp	 DWORD PTR _outcode$12[ebp], 0
  00244	74 10		 je	 SHORT $LN24@render_3d_

; 1254 : 									{
; 1255 : 								
; 1256 : 										poly = clip_3d_polygon ( poly, outcode );

  00246	8b 45 f4	 mov	 eax, DWORD PTR _outcode$12[ebp]
  00249	50		 push	 eax
  0024a	8b 4d f8	 mov	 ecx, DWORD PTR _poly$13[ebp]
  0024d	51		 push	 ecx
  0024e	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  00253	89 45 f8	 mov	 DWORD PTR _poly$13[ebp], eax
$LN24@render_3d_:

; 1257 : 									}
; 1258 : 								}
; 1259 : 							}
; 1260 : 
; 1261 : 							if ( poly )

  00256	83 7d f8 00	 cmp	 DWORD PTR _poly$13[ebp], 0
  0025a	0f 84 d4 00 00
	00		 je	 $LN25@render_3d_

; 1262 : 							{
; 1263 : 
; 1264 : 								int
; 1265 : 									count,
; 1266 : 									number_of_points;
; 1267 : 							
; 1268 : 								LPD3DTLVERTEX
; 1269 : 									destination_vertices;
; 1270 : 							
; 1271 : 								destination_vertices = get_d3d_vertices_address ( poly, &number_of_points );

  00260	8d 45 cc	 lea	 eax, DWORD PTR _number_of_points$2[ebp]
  00263	50		 push	 eax
  00264	8b 4d f8	 mov	 ecx, DWORD PTR _poly$13[ebp]
  00267	51		 push	 ecx
  00268	e8 00 00 00 00	 call	 ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
  0026d	89 45 c8	 mov	 DWORD PTR _destination_vertices$1[ebp], eax

; 1272 : 							
; 1273 : 								for ( count = 0; count < number_of_points; count++ )

  00270	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _count$3[ebp], 0
  00277	eb 09		 jmp	 SHORT $LN10@render_3d_
$LN8@render_3d_:
  00279	8b 45 d0	 mov	 eax, DWORD PTR _count$3[ebp]
  0027c	83 c0 01	 add	 eax, 1
  0027f	89 45 d0	 mov	 DWORD PTR _count$3[ebp], eax
$LN10@render_3d_:
  00282	8b 45 d0	 mov	 eax, DWORD PTR _count$3[ebp]
  00285	3b 45 cc	 cmp	 eax, DWORD PTR _number_of_points$2[ebp]
  00288	0f 8d 99 00 00
	00		 jge	 $LN9@render_3d_

; 1274 : 								{
; 1275 : 								
; 1276 : 									destination_vertices[count].sx = poly->i;

  0028e	8b 45 d0	 mov	 eax, DWORD PTR _count$3[ebp]
  00291	c1 e0 05	 shl	 eax, 5
  00294	8b 4d c8	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  00297	8b 55 f8	 mov	 edx, DWORD PTR _poly$13[ebp]
  0029a	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  0029d	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 1277 : 									destination_vertices[count].sy = poly->j;

  002a0	8b 45 d0	 mov	 eax, DWORD PTR _count$3[ebp]
  002a3	c1 e0 05	 shl	 eax, 5
  002a6	8b 4d c8	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  002a9	8b 55 f8	 mov	 edx, DWORD PTR _poly$13[ebp]
  002ac	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  002af	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1278 : 									destination_vertices[count].sz = POLYGON_ZDISTANCE_FARTHEST;

  002b3	8b 45 d0	 mov	 eax, DWORD PTR _count$3[ebp]
  002b6	c1 e0 05	 shl	 eax, 5
  002b9	8b 4d c8	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  002bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002c4	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 1279 : 									destination_vertices[count].rhw = poly->q;

  002ca	8b 45 d0	 mov	 eax, DWORD PTR _count$3[ebp]
  002cd	c1 e0 05	 shl	 eax, 5
  002d0	8b 4d c8	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  002d3	8b 55 f8	 mov	 edx, DWORD PTR _poly$13[ebp]
  002d6	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  002d9	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1280 : 
; 1281 : 									if (apply_filter)

  002dd	83 7d 18 00	 cmp	 DWORD PTR _apply_filter$[ebp], 0
  002e1	74 12		 je	 SHORT $LN26@render_3d_

; 1282 : 										destination_vertices[count].color = colour_filter.colour;

  002e3	8b 45 d0	 mov	 eax, DWORD PTR _count$3[ebp]
  002e6	c1 e0 05	 shl	 eax, 5
  002e9	8b 4d c8	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  002ec	8b 55 1c	 mov	 edx, DWORD PTR _colour_filter$[ebp]
  002ef	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 1283 : 									else

  002f3	eb 13		 jmp	 SHORT $LN27@render_3d_
$LN26@render_3d_:

; 1284 : 										destination_vertices[count].color = poly->colour;

  002f5	8b 45 d0	 mov	 eax, DWORD PTR _count$3[ebp]
  002f8	c1 e0 05	 shl	 eax, 5
  002fb	8b 4d c8	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  002fe	8b 55 f8	 mov	 edx, DWORD PTR _poly$13[ebp]
  00301	8b 52 30	 mov	 edx, DWORD PTR [edx+48]
  00304	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx
$LN27@render_3d_:

; 1285 : 
; 1286 : 									destination_vertices[count].specular = RGBA_MAKE ( 0, 0, 0, 0 );

  00308	8b 45 d0	 mov	 eax, DWORD PTR _count$3[ebp]
  0030b	c1 e0 05	 shl	 eax, 5
  0030e	8b 4d c8	 mov	 ecx, DWORD PTR _destination_vertices$1[ebp]
  00311	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 1287 : 
; 1288 : 									poly = poly->next_vertex;

  00319	8b 45 f8	 mov	 eax, DWORD PTR _poly$13[ebp]
  0031c	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0031f	89 4d f8	 mov	 DWORD PTR _poly$13[ebp], ecx

; 1289 : 								}

  00322	e9 52 ff ff ff	 jmp	 $LN8@render_3d_
$LN9@render_3d_:

; 1290 : 							
; 1291 : 								draw_fan_primitive ( number_of_points, destination_vertices );

  00327	8b 45 c8	 mov	 eax, DWORD PTR _destination_vertices$1[ebp]
  0032a	50		 push	 eax
  0032b	8b 4d cc	 mov	 ecx, DWORD PTR _number_of_points$2[ebp]
  0032e	51		 push	 ecx
  0032f	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive
$LN25@render_3d_:

; 1292 : 							}
; 1293 : 						}
; 1294 : 					}

  00334	e9 99 fe ff ff	 jmp	 $LN5@render_3d_
$LN6@render_3d_:

; 1295 : 				}
; 1296 : 			}
; 1297 : 		}
; 1298 : 	}
; 1299 : 	else

  00339	eb 0d		 jmp	 SHORT $LN14@render_3d_
$LN13@render_3d_:

; 1300 : 	{
; 1301 : 
; 1302 : 		debug_fatal ( "Trying to draw a line/point in the horizon object" );

  0033b	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@MFGMGIAN@Trying?5to?5draw?5a?5line?1point?5in?5@
  00340	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00345	83 c4 04	 add	 esp, 4
$LN14@render_3d_:

; 1303 : 	}
; 1304 : }

  00348	5f		 pop	 edi
  00349	5e		 pop	 esi
  0034a	5b		 pop	 ebx
  0034b	8b e5		 mov	 esp, ebp
  0034d	5d		 pop	 ebp
  0034e	c2 18 00	 ret	 24			; 00000018H
?render_3d_horizon_face@@YGXPAUOBJECT_3D_FACE@@HHPAUOBJECT_3D_INFO@@HUREAL_COLOUR@@@Z ENDP ; render_3d_horizon_face
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?transform_3d_horizon@@YGXPAUOBJECT_3D@@@Z
_TEXT	SEGMENT
$T1 = -256						; size = 4
$T2 = -252						; size = 4
$T3 = -248						; size = 4
$T4 = -244						; size = 4
$T5 = -240						; size = 4
$T6 = -236						; size = 4
_j$7 = -168						; size = 4
_i$8 = -164						; size = 4
_q$9 = -160						; size = 4
_z$10 = -156						; size = 4
_y$11 = -152						; size = 4
_x$12 = -148						; size = 4
_pointz$13 = -144					; size = 4
_pointy$14 = -140					; size = 4
_pointx$15 = -136					; size = 4
_point_colours$ = -132					; size = 4
_iymin$ = -128						; size = 4
_iymax$ = -124						; size = 4
_ixmin$ = -120						; size = 4
_ixmax$ = -116						; size = 4
_oymin$ = -112						; size = 4
_oymax$ = -108						; size = 4
_oxmin$ = -104						; size = 4
_oxmax$ = -100						; size = 4
_zmax$ = -96						; size = 4
_ymax$ = -92						; size = 4
_xmax$ = -88						; size = 4
_tmp_vertex$ = -84					; size = 64
_result_points$ = -20					; size = 4
_last_transformed_point$ = -16				; size = 4
_points$ = -12						; size = 4
_number_of_points$ = -8					; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
?transform_3d_horizon@@YGXPAUOBJECT_3D@@@Z PROC		; transform_3d_horizon, COMDAT

; 973  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 974  : 
; 975  : 	int
; 976  : 		count,
; 977  : 		number_of_points;
; 978  : 
; 979  : 	object_short_3d_point
; 980  : 		*points;
; 981  : 
; 982  : 	vertex
; 983  : 		*last_transformed_point,
; 984  : 		*result_points,
; 985  : 		tmp_vertex;
; 986  : 
; 987  : 	float
; 988  : 		xmax,
; 989  : 		ymax,
; 990  : 		zmax,
; 991  : 		oxmax,
; 992  : 		oxmin,
; 993  : 		oymax,
; 994  : 		oymin;
; 995  : 
; 996  : 	int
; 997  : 		ixmax,
; 998  : 		ixmin,
; 999  : 		iymax,
; 1000 : 		iymin;
; 1001 : 
; 1002 : 	horizon_colour
; 1003 : 		*point_colours;
; 1004 : 
; 1005 : 	//
; 1006 : 	// We only need the fpu to be in single precision mode
; 1007 : 	//
; 1008 : 
; 1009 : 	set_fpu_precision_mode_single ();

  0000c	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_single@@YGXXZ ; set_fpu_precision_mode_single

; 1010 : 
; 1011 : 	number_of_points = object->number_of_points;

  00011	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00014	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00017	89 4d f8	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 1012 : 
; 1013 : 	points = object->points;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0001d	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00020	89 4d f4	 mov	 DWORD PTR _points$[ebp], ecx

; 1014 : 
; 1015 : 	result_points = transformed_3d_points;

  00023	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result_points$[ebp], OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points

; 1016 : 
; 1017 : 	last_transformed_point = &tmp_vertex;

  0002a	8d 45 ac	 lea	 eax, DWORD PTR _tmp_vertex$[ebp]
  0002d	89 45 f0	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 1018 : 
; 1019 : 	point_colours = active_3d_environment->horizon_point_colours;

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00035	8b 88 ac 02 00
	00		 mov	 ecx, DWORD PTR [eax+684]
  0003b	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _point_colours$[ebp], ecx

; 1020 : 
; 1021 : 	xmax = max ( fabs ( object->bounding_box.xmin ), fabs ( object->bounding_box.xmax ) );

  00041	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00044	51		 push	 ecx
  00045	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00054	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR $T6[ebp]
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0005d	51		 push	 ecx
  0005e	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0006d	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR $T5[ebp]
  00073	8d 95 14 ff ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00079	52		 push	 edx
  0007a	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00086	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008a	f3 0f 11 45 a8	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 1022 : 	ymax = max ( fabs ( object->bounding_box.ymin ), fabs ( object->bounding_box.ymax ) );

  0008f	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00092	51		 push	 ecx
  00093	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000a2	d9 9d 0c ff ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000ab	51		 push	 ecx
  000ac	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000bb	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  000c1	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  000c7	52		 push	 edx
  000c8	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000d4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000d8	f3 0f 11 45 a4	 movss	 DWORD PTR _ymax$[ebp], xmm0

; 1023 : 	zmax = max ( fabs ( object->bounding_box.zmin ), fabs ( object->bounding_box.zmax ) );

  000dd	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000e0	51		 push	 ecx
  000e1	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  000e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000eb	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000f0	d9 9d 04 ff ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000f9	51		 push	 ecx
  000fa	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00109	d9 9d 00 ff ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  0010f	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00115	52		 push	 edx
  00116	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00122	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00126	f3 0f 11 45 a0	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 1024 : 
; 1025 : 	rotation_3d[0][0] *= active_3d_environment->screen_i_scale * ( xmax / 32767.0 );

  0012b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00130	6b c8 00	 imul	 ecx, eax, 0
  00133	ba 04 00 00 00	 mov	 edx, 4
  00138	6b c2 00	 imul	 eax, edx, 0
  0013b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00141	f3 0f 5a 02	 cvtss2sd xmm0, DWORD PTR [edx]
  00145	f3 0f 5a 4d a8	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  0014a	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00152	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00156	f3 0f 5a 8c 01
	00 00 00 00	 cvtss2sd xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  0015f	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00163	b8 04 00 00 00	 mov	 eax, 4
  00168	6b c8 00	 imul	 ecx, eax, 0
  0016b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00170	6b c2 00	 imul	 eax, edx, 0
  00173	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00177	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 1026 : 	rotation_3d[0][1] *= active_3d_environment->screen_j_scale * ( xmax / 32767.0 );

  00180	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00185	6b c8 00	 imul	 ecx, eax, 0
  00188	ba 04 00 00 00	 mov	 edx, 4
  0018d	c1 e2 00	 shl	 edx, 0
  00190	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00195	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  0019a	f3 0f 5a 4d a8	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  0019f	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  001a7	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001ab	f3 0f 5a 8c 11
	00 00 00 00	 cvtss2sd xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  001b4	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001b8	b9 04 00 00 00	 mov	 ecx, 4
  001bd	c1 e1 00	 shl	 ecx, 0
  001c0	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001c5	6b c2 00	 imul	 eax, edx, 0
  001c8	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001cc	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 1027 : 	rotation_3d[0][2] *= ( xmax / 32767.0 );

  001d5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001da	6b c8 00	 imul	 ecx, eax, 0
  001dd	ba 04 00 00 00	 mov	 edx, 4
  001e2	d1 e2		 shl	 edx, 1
  001e4	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _xmax$[ebp]
  001e9	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  001f1	f3 0f 5a 8c 11
	00 00 00 00	 cvtss2sd xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  001fa	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001fe	b8 04 00 00 00	 mov	 eax, 4
  00203	d1 e0		 shl	 eax, 1
  00205	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0020a	6b d1 00	 imul	 edx, ecx, 0
  0020d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00211	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 1028 : 
; 1029 : 	rotation_3d[1][0] *= active_3d_environment->screen_i_scale * ( ymax / 32767.0 );

  0021a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0021f	c1 e0 00	 shl	 eax, 0
  00222	b9 04 00 00 00	 mov	 ecx, 4
  00227	6b d1 00	 imul	 edx, ecx, 0
  0022a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00230	f3 0f 5a 01	 cvtss2sd xmm0, DWORD PTR [ecx]
  00234	f3 0f 5a 4d a4	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  00239	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00241	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00245	f3 0f 5a 8c 10
	00 00 00 00	 cvtss2sd xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  0024e	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00252	ba 04 00 00 00	 mov	 edx, 4
  00257	6b c2 00	 imul	 eax, edx, 0
  0025a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0025f	c1 e1 00	 shl	 ecx, 0
  00262	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00266	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 1030 : 	rotation_3d[1][1] *= active_3d_environment->screen_j_scale * ( ymax / 32767.0 );

  0026f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00274	c1 e0 00	 shl	 eax, 0
  00277	b9 04 00 00 00	 mov	 ecx, 4
  0027c	c1 e1 00	 shl	 ecx, 0
  0027f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00285	f3 0f 5a 42 04	 cvtss2sd xmm0, DWORD PTR [edx+4]
  0028a	f3 0f 5a 4d a4	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  0028f	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00297	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0029b	f3 0f 5a 8c 08
	00 00 00 00	 cvtss2sd xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  002a4	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  002a8	b8 04 00 00 00	 mov	 eax, 4
  002ad	c1 e0 00	 shl	 eax, 0
  002b0	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002b5	c1 e1 00	 shl	 ecx, 0
  002b8	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002bc	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 1031 : 	rotation_3d[1][2] *= ( ymax / 32767.0 );

  002c5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002ca	c1 e0 00	 shl	 eax, 0
  002cd	b9 04 00 00 00	 mov	 ecx, 4
  002d2	d1 e1		 shl	 ecx, 1
  002d4	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _ymax$[ebp]
  002d9	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  002e1	f3 0f 5a 8c 08
	00 00 00 00	 cvtss2sd xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  002ea	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  002ee	ba 04 00 00 00	 mov	 edx, 4
  002f3	d1 e2		 shl	 edx, 1
  002f5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002fa	c1 e0 00	 shl	 eax, 0
  002fd	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00301	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 1032 : 
; 1033 : 	rotation_3d[2][0] *= active_3d_environment->screen_i_scale * ( zmax / 32767.0 );

  0030a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0030f	d1 e0		 shl	 eax, 1
  00311	b9 04 00 00 00	 mov	 ecx, 4
  00316	6b d1 00	 imul	 edx, ecx, 0
  00319	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0031f	f3 0f 5a 01	 cvtss2sd xmm0, DWORD PTR [ecx]
  00323	f3 0f 5a 4d a0	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  00328	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00330	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00334	f3 0f 5a 8c 10
	00 00 00 00	 cvtss2sd xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  0033d	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00341	ba 04 00 00 00	 mov	 edx, 4
  00346	6b c2 00	 imul	 eax, edx, 0
  00349	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0034e	d1 e1		 shl	 ecx, 1
  00350	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00354	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 1034 : 	rotation_3d[2][1] *= active_3d_environment->screen_j_scale * ( zmax / 32767.0 );

  0035d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00362	d1 e0		 shl	 eax, 1
  00364	b9 04 00 00 00	 mov	 ecx, 4
  00369	c1 e1 00	 shl	 ecx, 0
  0036c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00372	f3 0f 5a 42 04	 cvtss2sd xmm0, DWORD PTR [edx+4]
  00377	f3 0f 5a 4d a0	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  0037c	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00384	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00388	f3 0f 5a 8c 08
	00 00 00 00	 cvtss2sd xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00391	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00395	b8 04 00 00 00	 mov	 eax, 4
  0039a	c1 e0 00	 shl	 eax, 0
  0039d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003a2	d1 e1		 shl	 ecx, 1
  003a4	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003a8	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 1035 : 	rotation_3d[2][2] *= ( zmax / 32767.0 );

  003b1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003b6	d1 e0		 shl	 eax, 1
  003b8	b9 04 00 00 00	 mov	 ecx, 4
  003bd	d1 e1		 shl	 ecx, 1
  003bf	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _zmax$[ebp]
  003c4	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  003cc	f3 0f 5a 8c 08
	00 00 00 00	 cvtss2sd xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  003d5	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  003d9	ba 04 00 00 00	 mov	 edx, 4
  003de	d1 e2		 shl	 edx, 1
  003e0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003e5	d1 e0		 shl	 eax, 1
  003e7	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003eb	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 1036 : 
; 1037 : 	for ( count = number_of_points; count > 0; count-- )

  003f4	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  003f7	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  003fa	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  003fc	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  003ff	83 e8 01	 sub	 eax, 1
  00402	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  00405	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00409	0f 8e 7e 03 00
	00		 jle	 $LN3@transform_

; 1038 : 	{
; 1039 : 
; 1040 : 		float
; 1041 : 			pointx,
; 1042 : 			pointy,
; 1043 : 			pointz,
; 1044 : 			x,
; 1045 : 			y,
; 1046 : 			z;
; 1047 : 
; 1048 : 		pointx = points->x;

  0040f	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00412	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00415	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00419	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _pointx$15[ebp], xmm0

; 1049 : 		pointy = points->y;

  00421	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00424	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00428	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0042c	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _pointy$14[ebp], xmm0

; 1050 : 		pointz = points->z;

  00434	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00437	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0043b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0043f	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _pointz$13[ebp], xmm0

; 1051 : 
; 1052 : 		x = pointx * rotation_3d[0][0] + pointy * rotation_3d[1][0] + pointz * rotation_3d[2][0];

  00447	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0044c	6b c8 00	 imul	 ecx, eax, 0
  0044f	ba 04 00 00 00	 mov	 edx, 4
  00454	6b c2 00	 imul	 eax, edx, 0
  00457	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _pointx$15[ebp]
  0045f	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00468	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0046d	c1 e1 00	 shl	 ecx, 0
  00470	ba 04 00 00 00	 mov	 edx, 4
  00475	6b c2 00	 imul	 eax, edx, 0
  00478	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _pointy$14[ebp]
  00480	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00489	f3 0f 58 c1	 addss	 xmm0, xmm1
  0048d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00492	d1 e1		 shl	 ecx, 1
  00494	ba 04 00 00 00	 mov	 edx, 4
  00499	6b c2 00	 imul	 eax, edx, 0
  0049c	f3 0f 10 8d 70
	ff ff ff	 movss	 xmm1, DWORD PTR _pointz$13[ebp]
  004a4	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  004ad	f3 0f 58 c1	 addss	 xmm0, xmm1
  004b1	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _x$12[ebp], xmm0

; 1053 : 		y = pointx * rotation_3d[0][1] + pointy * rotation_3d[1][1] + pointz * rotation_3d[2][1];

  004b9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004be	6b c8 00	 imul	 ecx, eax, 0
  004c1	ba 04 00 00 00	 mov	 edx, 4
  004c6	c1 e2 00	 shl	 edx, 0
  004c9	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _pointx$15[ebp]
  004d1	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  004da	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004df	c1 e0 00	 shl	 eax, 0
  004e2	b9 04 00 00 00	 mov	 ecx, 4
  004e7	c1 e1 00	 shl	 ecx, 0
  004ea	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _pointy$14[ebp]
  004f2	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  004fb	f3 0f 58 c1	 addss	 xmm0, xmm1
  004ff	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00504	d1 e2		 shl	 edx, 1
  00506	b8 04 00 00 00	 mov	 eax, 4
  0050b	c1 e0 00	 shl	 eax, 0
  0050e	f3 0f 10 8d 70
	ff ff ff	 movss	 xmm1, DWORD PTR _pointz$13[ebp]
  00516	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  0051f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00523	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _y$11[ebp], xmm0

; 1054 : 		z = pointx * rotation_3d[0][2] + pointy * rotation_3d[1][2] + pointz * rotation_3d[2][2];

  0052b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00530	6b c8 00	 imul	 ecx, eax, 0
  00533	ba 04 00 00 00	 mov	 edx, 4
  00538	d1 e2		 shl	 edx, 1
  0053a	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _pointx$15[ebp]
  00542	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  0054b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00550	c1 e0 00	 shl	 eax, 0
  00553	b9 04 00 00 00	 mov	 ecx, 4
  00558	d1 e1		 shl	 ecx, 1
  0055a	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _pointy$14[ebp]
  00562	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0056b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0056f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00574	d1 e2		 shl	 edx, 1
  00576	b8 04 00 00 00	 mov	 eax, 4
  0057b	d1 e0		 shl	 eax, 1
  0057d	f3 0f 10 8d 70
	ff ff ff	 movss	 xmm1, DWORD PTR _pointz$13[ebp]
  00585	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  0058e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00592	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _z$10[ebp], xmm0

; 1055 : 
; 1056 : 		result_points->red = point_colours->red;

  0059a	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  0059d	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _point_colours$[ebp]
  005a3	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  005a6	88 50 32	 mov	 BYTE PTR [eax+50], dl

; 1057 : 		result_points->green = point_colours->green;

  005a9	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  005ac	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _point_colours$[ebp]
  005b2	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  005b5	88 50 31	 mov	 BYTE PTR [eax+49], dl

; 1058 : 		result_points->blue = point_colours->blue;

  005b8	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  005bb	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _point_colours$[ebp]
  005c1	8a 11		 mov	 dl, BYTE PTR [ecx]
  005c3	88 50 30	 mov	 BYTE PTR [eax+48], dl

; 1059 : 		result_points->alpha = 255;

  005c6	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  005c9	c6 40 33 ff	 mov	 BYTE PTR [eax+51], 255	; 000000ffH

; 1060 : 	
; 1061 : 		if ( *( ( int * ) &z ) >= *( ( int * ) &clip_hither ) )

  005cd	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _z$10[ebp]
  005d3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  005d9	0f 8c 52 01 00
	00		 jl	 $LN5@transform_

; 1062 : 		{
; 1063 : 
; 1064 : 			float
; 1065 : 				q,
; 1066 : 				i,
; 1067 : 				j;
; 1068 : 
; 1069 : 			oxmax = active_viewport.x_max - last_transformed_point->i;

  005df	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  005e2	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  005ea	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  005ef	f3 0f 11 45 9c	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 1070 : 			oxmin = last_transformed_point->i - active_viewport.x_min;

  005f4	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  005f7	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  005fc	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00604	f3 0f 11 45 98	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 1071 : 			oymax = active_viewport.y_max - last_transformed_point->j;

  00609	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  0060c	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00614	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  00619	f3 0f 11 45 94	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 1072 : 			oymin = last_transformed_point->j - active_viewport.y_min;

  0061e	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00621	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00626	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0062e	f3 0f 11 45 90	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 1073 : 		
; 1074 : 			q = 1.0 / z;

  00633	f3 0f 5a 85 64
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _z$10[ebp]
  0063b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00643	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00647	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0064b	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _q$9[ebp], xmm0

; 1075 : 
; 1076 : 			ixmax = *( ( int * ) &oxmax );

  00653	8b 45 9c	 mov	 eax, DWORD PTR _oxmax$[ebp]
  00656	89 45 8c	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1077 : 			ixmin = *( ( int * ) &oxmin );

  00659	8b 45 98	 mov	 eax, DWORD PTR _oxmin$[ebp]
  0065c	89 45 88	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1078 : 			iymax = *( ( int * ) &oymax );

  0065f	8b 45 94	 mov	 eax, DWORD PTR _oymax$[ebp]
  00662	89 45 84	 mov	 DWORD PTR _iymax$[ebp], eax

; 1079 : 			iymin = *( ( int * ) &oymin );

  00665	8b 45 90	 mov	 eax, DWORD PTR _oymin$[ebp]
  00668	89 45 80	 mov	 DWORD PTR _iymin$[ebp], eax

; 1080 : 
; 1081 : 			last_transformed_point->outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  0066b	8b 45 84	 mov	 eax, DWORD PTR _iymax$[ebp]
  0066e	50		 push	 eax
  0066f	8b 4d 8c	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  00672	51		 push	 ecx
  00673	8b 55 80	 mov	 edx, DWORD PTR _iymin$[ebp]
  00676	52		 push	 edx
  00677	8b 45 88	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0067a	50		 push	 eax
  0067b	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00680	8b 4d f0	 mov	 ecx, DWORD PTR _last_transformed_point$[ebp]
  00683	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 1082 : 
; 1083 : 			result_points->x = x;

  00686	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  00689	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$12[ebp]
  00691	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1084 : 			result_points->y = y;

  00695	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  00698	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _y$11[ebp]
  006a0	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1085 : 			result_points->z = z;

  006a5	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  006a8	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _z$10[ebp]
  006b0	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1086 : 
; 1087 : 			last_transformed_point = result_points;

  006b5	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  006b8	89 45 f0	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 1088 : 
; 1089 : 			i = ( x * q );

  006bb	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$12[ebp]
  006c3	f3 0f 59 85 60
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$9[ebp]
  006cb	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _i$8[ebp], xmm0

; 1090 : 			j = ( y * q );

  006d3	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _y$11[ebp]
  006db	f3 0f 59 85 60
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$9[ebp]
  006e3	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _j$7[ebp], xmm0

; 1091 : 
; 1092 : 			result_points->q = q;

  006eb	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  006ee	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _q$9[ebp]
  006f6	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1093 : 			result_points->j = active_3d_environment->y_origin - j;

  006fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00700	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00705	f3 0f 5c 85 58
	ff ff ff	 subss	 xmm0, DWORD PTR _j$7[ebp]
  0070d	8b 4d ec	 mov	 ecx, DWORD PTR _result_points$[ebp]
  00710	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 1094 : 			result_points->i = active_3d_environment->x_origin + i;

  00715	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0071a	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0071f	f3 0f 58 85 5c
	ff ff ff	 addss	 xmm0, DWORD PTR _i$8[ebp]
  00727	8b 4d ec	 mov	 ecx, DWORD PTR _result_points$[ebp]
  0072a	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 1095 : 		}
; 1096 : 		else

  0072f	eb 36		 jmp	 SHORT $LN6@transform_
$LN5@transform_:

; 1097 : 		{
; 1098 : 
; 1099 : 			result_points->outcode = CLIP_HITHER;

  00731	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  00734	c6 40 2c 20	 mov	 BYTE PTR [eax+44], 32	; 00000020H

; 1100 : 
; 1101 : 			result_points->z = z;

  00738	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  0073b	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _z$10[ebp]
  00743	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1102 : 			result_points->x = x;

  00748	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  0074b	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$12[ebp]
  00753	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1103 : 			result_points->y = y;

  00757	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  0075a	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _y$11[ebp]
  00762	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
$LN6@transform_:

; 1104 : 		}
; 1105 : 
; 1106 : 		point_colours++;

  00767	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _point_colours$[ebp]
  0076d	83 c0 04	 add	 eax, 4
  00770	89 85 7c ff ff
	ff		 mov	 DWORD PTR _point_colours$[ebp], eax

; 1107 : 
; 1108 : 		result_points++;

  00776	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  00779	83 c0 40	 add	 eax, 64			; 00000040H
  0077c	89 45 ec	 mov	 DWORD PTR _result_points$[ebp], eax

; 1109 : 
; 1110 : 		points++;

  0077f	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00782	83 c0 06	 add	 eax, 6
  00785	89 45 f4	 mov	 DWORD PTR _points$[ebp], eax

; 1111 : 	}

  00788	e9 6f fc ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 1112 : 
; 1113 : 	oxmax = active_viewport.x_max - last_transformed_point->i;

  0078d	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00790	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00798	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  0079d	f3 0f 11 45 9c	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 1114 : 	oxmin = last_transformed_point->i - active_viewport.x_min;

  007a2	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  007a5	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  007aa	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  007b2	f3 0f 11 45 98	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 1115 : 	oymax = active_viewport.y_max - last_transformed_point->j;

  007b7	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  007ba	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  007c2	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  007c7	f3 0f 11 45 94	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 1116 : 	oymin = last_transformed_point->j - active_viewport.y_min;

  007cc	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  007cf	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  007d4	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  007dc	f3 0f 11 45 90	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 1117 : 
; 1118 : 	ixmax = *( ( int * ) &oxmax );

  007e1	8b 45 9c	 mov	 eax, DWORD PTR _oxmax$[ebp]
  007e4	89 45 8c	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1119 : 	ixmin = *( ( int * ) &oxmin );

  007e7	8b 45 98	 mov	 eax, DWORD PTR _oxmin$[ebp]
  007ea	89 45 88	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1120 : 	iymax = *( ( int * ) &oymax );

  007ed	8b 45 94	 mov	 eax, DWORD PTR _oymax$[ebp]
  007f0	89 45 84	 mov	 DWORD PTR _iymax$[ebp], eax

; 1121 : 	iymin = *( ( int * ) &oymin );

  007f3	8b 45 90	 mov	 eax, DWORD PTR _oymin$[ebp]
  007f6	89 45 80	 mov	 DWORD PTR _iymin$[ebp], eax

; 1122 : 
; 1123 : 	last_transformed_point->outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  007f9	8b 45 84	 mov	 eax, DWORD PTR _iymax$[ebp]
  007fc	50		 push	 eax
  007fd	8b 4d 8c	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  00800	51		 push	 ecx
  00801	8b 55 80	 mov	 edx, DWORD PTR _iymin$[ebp]
  00804	52		 push	 edx
  00805	8b 45 88	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00808	50		 push	 eax
  00809	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  0080e	8b 4d f0	 mov	 ecx, DWORD PTR _last_transformed_point$[ebp]
  00811	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 1124 : 
; 1125 : 	//
; 1126 : 	// Set back the fpu precision mode.
; 1127 : 	//
; 1128 : 
; 1129 : 	set_fpu_precision_mode_double ();

  00814	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_double@@YGXXZ ; set_fpu_precision_mode_double

; 1130 : }

  00819	5f		 pop	 edi
  0081a	5e		 pop	 esi
  0081b	5b		 pop	 ebx
  0081c	8b e5		 mov	 esp, ebp
  0081e	5d		 pop	 ebp
  0081f	c2 04 00	 ret	 4
?transform_3d_horizon@@YGXPAUOBJECT_3D@@@Z ENDP		; transform_3d_horizon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?insert_3d_horizon_image@@YGXPAUENV_3D@@W4WEATHERMODES@@PAUHORIZON_IMAGE_DATA@@@Z
_TEXT	SEGMENT
_last_image$1 = -8					; size = 4
_this_image$2 = -4					; size = 4
_env$ = 8						; size = 4
_mode$ = 12						; size = 4
_image$ = 16						; size = 4
?insert_3d_horizon_image@@YGXPAUENV_3D@@W4WEATHERMODES@@PAUHORIZON_IMAGE_DATA@@@Z PROC ; insert_3d_horizon_image, COMDAT

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 358  : 
; 359  : 	ASSERT ( env );

  00009	83 7d 08 00	 cmp	 DWORD PTR _env$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@insert_3d_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_3d_horizon_image@@YGXPAUENV_3D@@W4WEATHERMODES@@PAUHORIZON_IMAGE_DATA@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BIGDBNDP@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03OJGPBPII@env@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@insert_3d_:

; 360  : 
; 361  : 	if ( env->horizon_images_lists[mode] )

  00027	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  0002d	83 bc 81 bc 02
	00 00 00	 cmp	 DWORD PTR [ecx+eax*4+700], 0
  00035	0f 84 9c 00 00
	00		 je	 $LN5@insert_3d_

; 362  : 	{
; 363  : 
; 364  : 		horizon_image_data
; 365  : 			*this_image,
; 366  : 			*last_image;
; 367  : 
; 368  : 		last_image = env->horizon_images_lists[mode];

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  00041	8b 94 81 bc 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+700]
  00048	89 55 f8	 mov	 DWORD PTR _last_image$1[ebp], edx

; 369  : 
; 370  : 		this_image = env->horizon_images_lists[mode];

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  00051	8b 94 81 bc 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+700]
  00058	89 55 fc	 mov	 DWORD PTR _this_image$2[ebp], edx
$LN2@insert_3d_:

; 371  : 
; 372  : 		while ( this_image )

  0005b	83 7d fc 00	 cmp	 DWORD PTR _this_image$2[ebp], 0
  0005f	74 63		 je	 SHORT $LN3@insert_3d_

; 373  : 		{
; 374  : 
; 375  : 			if ( this_image->time > image->time )

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this_image$2[ebp]
  00064	8b 4d 10	 mov	 ecx, DWORD PTR _image$[ebp]
  00067	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0006c	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [ecx+4]
  00070	76 42		 jbe	 SHORT $LN7@insert_3d_

; 376  : 			{
; 377  : 
; 378  : 				//
; 379  : 				// Insert *before* this_image
; 380  : 				//
; 381  : 
; 382  : 				if ( last_image == this_image )

  00072	8b 45 f8	 mov	 eax, DWORD PTR _last_image$1[ebp]
  00075	3b 45 fc	 cmp	 eax, DWORD PTR _this_image$2[ebp]
  00078	75 26		 jne	 SHORT $LN9@insert_3d_

; 383  : 				{
; 384  : 
; 385  : 					image->succ = env->horizon_images_lists[mode];

  0007a	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _mode$[ebp]
  00080	8b 55 08	 mov	 edx, DWORD PTR _env$[ebp]
  00083	8b 8c 8a bc 02
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+700]
  0008a	89 08		 mov	 DWORD PTR [eax], ecx

; 386  : 
; 387  : 					env->horizon_images_lists[mode] = image;

  0008c	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  00092	8b 55 10	 mov	 edx, DWORD PTR _image$[ebp]
  00095	89 94 81 bc 02
	00 00		 mov	 DWORD PTR [ecx+eax*4+700], edx

; 388  : 
; 389  : 					return;

  0009c	eb 52		 jmp	 SHORT $LN1@insert_3d_

; 390  : 				}
; 391  : 				else

  0009e	eb 12		 jmp	 SHORT $LN10@insert_3d_
$LN9@insert_3d_:

; 392  : 				{
; 393  : 
; 394  : 					last_image->succ = image;

  000a0	8b 45 f8	 mov	 eax, DWORD PTR _last_image$1[ebp]
  000a3	8b 4d 10	 mov	 ecx, DWORD PTR _image$[ebp]
  000a6	89 08		 mov	 DWORD PTR [eax], ecx

; 395  : 
; 396  : 					image->succ = this_image;

  000a8	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR _this_image$2[ebp]
  000ae	89 08		 mov	 DWORD PTR [eax], ecx

; 397  : 
; 398  : 					return;

  000b0	eb 3e		 jmp	 SHORT $LN1@insert_3d_
$LN10@insert_3d_:

; 399  : 				}
; 400  : 			}
; 401  : 			else

  000b2	eb 0e		 jmp	 SHORT $LN8@insert_3d_
$LN7@insert_3d_:

; 402  : 			{
; 403  : 
; 404  : 				last_image = this_image;

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _this_image$2[ebp]
  000b7	89 45 f8	 mov	 DWORD PTR _last_image$1[ebp], eax

; 405  : 
; 406  : 				this_image = this_image->succ;

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this_image$2[ebp]
  000bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bf	89 4d fc	 mov	 DWORD PTR _this_image$2[ebp], ecx
$LN8@insert_3d_:

; 407  : 			}
; 408  : 		}

  000c2	eb 97		 jmp	 SHORT $LN2@insert_3d_
$LN3@insert_3d_:

; 409  : 
; 410  : 		//
; 411  : 		// Got to the end of the list, and have to put it here.
; 412  : 		//
; 413  : 
; 414  : 		image->succ = NULL;

  000c4	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  000c7	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 415  : 
; 416  : 		last_image->succ = image;

  000cd	8b 45 f8	 mov	 eax, DWORD PTR _last_image$1[ebp]
  000d0	8b 4d 10	 mov	 ecx, DWORD PTR _image$[ebp]
  000d3	89 08		 mov	 DWORD PTR [eax], ecx

; 417  : 	}
; 418  : 	else

  000d5	eb 19		 jmp	 SHORT $LN6@insert_3d_
$LN5@insert_3d_:

; 419  : 	{
; 420  : 
; 421  : 		image->succ = NULL;

  000d7	8b 45 10	 mov	 eax, DWORD PTR _image$[ebp]
  000da	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 422  : 
; 423  : 		env->horizon_images_lists[mode] = image;

  000e0	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000e3	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  000e6	8b 55 10	 mov	 edx, DWORD PTR _image$[ebp]
  000e9	89 94 81 bc 02
	00 00		 mov	 DWORD PTR [ecx+eax*4+700], edx
$LN6@insert_3d_:
$LN1@insert_3d_:

; 424  : 	}
; 425  : }

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 0c 00	 ret	 12			; 0000000cH
?insert_3d_horizon_image@@YGXPAUENV_3D@@W4WEATHERMODES@@PAUHORIZON_IMAGE_DATA@@@Z ENDP ; insert_3d_horizon_image
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?draw_3d_horizon@@YGXXZ
_TEXT	SEGMENT
tv189 = -172						; size = 4
$T1 = -168						; size = 4
_point_reference_index$2 = -100				; size = 4
_surface_face_count$3 = -96				; size = 4
_number_of_surface_points$4 = -92			; size = 4
_surface$5 = -88					; size = 4
_colour_filter$6 = -84					; size = 4
_point_reference_index$7 = -80				; size = 4
_apply_monochrome_filter$8 = -76			; size = 4
_number_of_surface_points$9 = -72			; size = 4
_surface_face_count$10 = -68				; size = 4
_surface$11 = -64					; size = 4
_object_base$ = -60					; size = 44
_this_object_3d_info$ = -16				; size = 4
_faces$ = -12						; size = 4
_count$ = -8						; size = 4
_object_number$ = -4					; size = 4
?draw_3d_horizon@@YGXXZ PROC				; draw_3d_horizon, COMDAT

; 759  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 760  : 
; 761  : 	int
; 762  : 		object_number,
; 763  : 		count;
; 764  : 
; 765  : 	object_3d_face
; 766  : 		*faces;
; 767  : 
; 768  : 	object_3d_info
; 769  : 		*this_object_3d_info;
; 770  : 
; 771  : 	object_3d_info
; 772  : 		object_base;
; 773  : 
; 774  : 	//
; 775  : 	// Set the fog value to non fogged
; 776  : 	//
; 777  : 
; 778  : 	set_d3d_fog_face_intensity ( 255 );

  0000c	68 ff 00 00 00	 push	 255			; 000000ffH
  00011	e8 00 00 00 00	 call	 ?set_d3d_fog_face_intensity@@YGXH@Z ; set_d3d_fog_face_intensity

; 779  : 
; 780  : 	//
; 781  : 	// Set up object base variable
; 782  : 	//
; 783  : 
; 784  : 	this_object_3d_info = &object_base;

  00016	8d 45 c4	 lea	 eax, DWORD PTR _object_base$[ebp]
  00019	89 45 f0	 mov	 DWORD PTR _this_object_3d_info$[ebp], eax

; 785  : 
; 786  : 	object_base.lights = NULL;

  0001c	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _object_base$[ebp+4], 0

; 787  : 
; 788  : 	object_base.points_base = 0;

  00023	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _object_base$[ebp+36], 0

; 789  : 
; 790  : 	object_base.object_number = active_3d_environment->horizon_3d_object_number;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0002f	8b 88 b4 02 00
	00		 mov	 ecx, DWORD PTR [eax+692]
  00035	89 4d e4	 mov	 DWORD PTR _object_base$[ebp+32], ecx

; 791  : 
; 792  : 	//
; 793  : 	// Calculate the object's rotation matrix, to transform its 3d points relative to the view.
; 794  : 	//
; 795  : 
; 796  : 	rotation_3d[0][0] = ( visual_3d_vp->xv.x );

  00038	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0003d	6b c8 00	 imul	 ecx, eax, 0
  00040	ba 04 00 00 00	 mov	 edx, 4
  00045	6b c2 00	 imul	 eax, edx, 0
  00048	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0004e	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00051	89 94 01 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], edx

; 797  : 	rotation_3d[0][1] = ( visual_3d_vp->yv.x );

  00058	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0005d	6b c8 00	 imul	 ecx, eax, 0
  00060	ba 04 00 00 00	 mov	 edx, 4
  00065	c1 e2 00	 shl	 edx, 0
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0006d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00070	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], eax

; 798  : 	rotation_3d[0][2] = ( visual_3d_vp->zv.x );

  00077	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0007c	6b c8 00	 imul	 ecx, eax, 0
  0007f	ba 04 00 00 00	 mov	 edx, 4
  00084	d1 e2		 shl	 edx, 1
  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0008b	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0008e	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], eax

; 799  : 
; 800  : 	rotation_3d[1][0] = ( visual_3d_vp->xv.y );

  00095	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0009a	c1 e0 00	 shl	 eax, 0
  0009d	b9 04 00 00 00	 mov	 ecx, 4
  000a2	6b d1 00	 imul	 edx, ecx, 0
  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000ab	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000ae	89 8c 10 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], ecx

; 801  : 	rotation_3d[1][1] = ( visual_3d_vp->yv.y );

  000b5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ba	c1 e0 00	 shl	 eax, 0
  000bd	b9 04 00 00 00	 mov	 ecx, 4
  000c2	c1 e1 00	 shl	 ecx, 0
  000c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000cb	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  000ce	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 802  : 	rotation_3d[1][2] = ( visual_3d_vp->zv.y );

  000d5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000da	c1 e0 00	 shl	 eax, 0
  000dd	b9 04 00 00 00	 mov	 ecx, 4
  000e2	d1 e1		 shl	 ecx, 1
  000e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000ea	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  000ed	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 803  : 
; 804  : 	rotation_3d[2][0] = ( visual_3d_vp->xv.z );

  000f4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000f9	d1 e0		 shl	 eax, 1
  000fb	b9 04 00 00 00	 mov	 ecx, 4
  00100	6b d1 00	 imul	 edx, ecx, 0
  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00109	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0010c	89 8c 10 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], ecx

; 805  : 	rotation_3d[2][1] = ( visual_3d_vp->yv.z );

  00113	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00118	d1 e0		 shl	 eax, 1
  0011a	b9 04 00 00 00	 mov	 ecx, 4
  0011f	c1 e1 00	 shl	 ecx, 0
  00122	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00128	8b 52 20	 mov	 edx, DWORD PTR [edx+32]
  0012b	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 806  : 	rotation_3d[2][2] = ( visual_3d_vp->zv.z );

  00132	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00137	d1 e0		 shl	 eax, 1
  00139	b9 04 00 00 00	 mov	 ecx, 4
  0013e	d1 e1		 shl	 ecx, 1
  00140	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00146	8b 52 2c	 mov	 edx, DWORD PTR [edx+44]
  00149	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 807  : 
; 808  : 	//
; 809  : 	// Get the object number
; 810  : 	//
; 811  : 
; 812  : 	object_number = active_3d_environment->horizon_3d_object_number;

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00155	8b 88 b4 02 00
	00		 mov	 ecx, DWORD PTR [eax+692]
  0015b	89 4d fc	 mov	 DWORD PTR _object_number$[ebp], ecx

; 813  : 
; 814  : 	//
; 815  : 	// Transform the object's shape data
; 816  : 	//
; 817  : 
; 818  : 	transform_3d_horizon ( &objects_3d_data[object_number] );

  0015e	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00162	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 ?transform_3d_horizon@@YGXPAUOBJECT_3D@@@Z ; transform_3d_horizon

; 819  : 
; 820  : 	//
; 821  : 	// Set clipping & lighting to FALSE
; 822  : 	//
; 823  : 
; 824  : 	force_set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  0016e	6a 00		 push	 0
  00170	68 88 00 00 00	 push	 136			; 00000088H
  00175	e8 00 00 00 00	 call	 ?force_set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; force_set_d3d_int_state

; 825  : 	force_set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  0017a	6a 00		 push	 0
  0017c	68 89 00 00 00	 push	 137			; 00000089H
  00181	e8 00 00 00 00	 call	 ?force_set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; force_set_d3d_int_state

; 826  : 
; 827  : 	//
; 828  : 	// Set transparency off, fogging off, zcomparison off, zwriting on
; 829  : 	//
; 830  : 
; 831  : 	set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, FALSE, FALSE );

  00186	6a 00		 push	 0
  00188	6a 00		 push	 0
  0018a	6a 00		 push	 0
  0018c	6a 00		 push	 0
  0018e	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 832  : 
; 833  : 	set_d3d_int_state ( D3DRENDERSTATE_ZFUNC, D3DCMP_ALWAYS );

  00193	6a 08		 push	 8
  00195	6a 17		 push	 23			; 00000017H
  00197	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 834  : 	set_d3d_int_state ( D3DRENDERSTATE_SPECULARENABLE, TRUE );

  0019c	6a 01		 push	 1
  0019e	6a 1d		 push	 29			; 0000001dH
  001a0	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 835  : 	set_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

  001a5	6a 02		 push	 2
  001a7	6a 09		 push	 9
  001a9	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 836  : 
; 837  : 	set_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );

  001ae	6a 01		 push	 1
  001b0	6a 01		 push	 1
  001b2	6a 00		 push	 0
  001b4	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 838  : 	set_d3d_texture_stage_state ( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

  001b9	6a 01		 push	 1
  001bb	6a 04		 push	 4
  001bd	6a 00		 push	 0
  001bf	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 839  : 
; 840  : 	//
; 841  : 	// Set up the face sorting variables
; 842  : 	//
; 843  : 
; 844  : 	faces = objects_3d_data[object_number].faces;

  001c4	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  001ce	8b 54 01 44	 mov	 edx, DWORD PTR [ecx+eax+68]
  001d2	89 55 f4	 mov	 DWORD PTR _faces$[ebp], edx

; 845  : 	current_object_3d_surface = objects_3d_data[object_number].surfaces;

  001d5	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  001df	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  001e3	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, edx ; current_object_3d_surface

; 846  : 	current_object_3d_surface_point_list = objects_3d_data[object_number].surface_points;

  001e9	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  001f3	8b 54 01 5c	 mov	 edx, DWORD PTR [ecx+eax+92]
  001f7	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 847  : 
; 848  : 	if (active_3d_environment->render_filter != RENDER_INFRARED )

  001fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00202	83 b8 d0 02 00
	00 02		 cmp	 DWORD PTR [eax+720], 2
  00209	0f 84 1c 01 00
	00		 je	 $LN14@draw_3d_ho

; 849  : 	{
; 850  : 
; 851  : 		int
; 852  : 			surface,
; 853  : 			surface_face_count,
; 854  : 			number_of_surface_points,
; 855  : 			apply_monochrome_filter;
; 856  : 
; 857  : 		int
; 858  : 			point_reference_index;
; 859  : 			
; 860  : 		rgb_colour
; 861  : 			colour_filter;
; 862  : 
; 863  : 		apply_monochrome_filter = active_3d_environment->render_filter == RENDER_MONOCHROME; //  // get_monochrome_mode(active_3d_environment);

  0020f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00214	83 b8 d0 02 00
	00 03		 cmp	 DWORD PTR [eax+720], 3
  0021b	75 0c		 jne	 SHORT $LN23@draw_3d_ho
  0021d	c7 85 54 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv189[ebp], 1
  00227	eb 0a		 jmp	 SHORT $LN24@draw_3d_ho
$LN23@draw_3d_ho:
  00229	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv189[ebp], 0
$LN24@draw_3d_ho:
  00233	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR tv189[ebp]
  00239	89 4d b4	 mov	 DWORD PTR _apply_monochrome_filter$8[ebp], ecx

; 864  : 		colour_filter = get_3d_fog_colour(active_3d_environment);

  0023c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 ?get_3d_fog_colour@@YG?AUREAL_COLOUR@@PAUENV_3D@@@Z ; get_3d_fog_colour
  00247	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0024d	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00253	89 4d ac	 mov	 DWORD PTR _colour_filter$6[ebp], ecx

; 865  : 
; 866  : 		point_reference_index = 0;

  00256	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _point_reference_index$7[ebp], 0

; 867  : 
; 868  : 		for ( surface = 0; surface < objects_3d_data[object_number].number_of_surfaces; surface++ )

  0025d	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _surface$11[ebp], 0
  00264	eb 09		 jmp	 SHORT $LN4@draw_3d_ho
$LN2@draw_3d_ho:
  00266	8b 45 c0	 mov	 eax, DWORD PTR _surface$11[ebp]
  00269	83 c0 01	 add	 eax, 1
  0026c	89 45 c0	 mov	 DWORD PTR _surface$11[ebp], eax
$LN4@draw_3d_ho:
  0026f	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00273	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00279	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  0027e	39 55 c0	 cmp	 DWORD PTR _surface$11[ebp], edx
  00281	0f 8d 9f 00 00
	00		 jge	 $LN3@draw_3d_ho

; 869  : 		{
; 870  : 	
; 871  : 			surface_face_count = current_object_3d_surface->number_of_faces;

  00287	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0028c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00290	89 4d bc	 mov	 DWORD PTR _surface_face_count$10[ebp], ecx

; 872  : 	
; 873  : 			number_of_surface_points = current_object_3d_surface->number_of_points;

  00293	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00298	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0029c	89 4d b8	 mov	 DWORD PTR _number_of_surface_points$9[ebp], ecx

; 874  : 	
; 875  : 			if ( number_of_surface_points == 0 )

  0029f	83 7d b8 00	 cmp	 DWORD PTR _number_of_surface_points$9[ebp], 0
  002a3	75 07		 jne	 SHORT $LN16@draw_3d_ho

; 876  : 			{
; 877  : 	
; 878  : 				number_of_surface_points = 256;

  002a5	c7 45 b8 00 01
	00 00		 mov	 DWORD PTR _number_of_surface_points$9[ebp], 256 ; 00000100H
$LN16@draw_3d_ho:

; 879  : 			}
; 880  : 		
; 881  : 			for ( count = surface_face_count; count > 0; count-- )

  002ac	8b 45 bc	 mov	 eax, DWORD PTR _surface_face_count$10[ebp]
  002af	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
  002b2	eb 09		 jmp	 SHORT $LN7@draw_3d_ho
$LN5@draw_3d_ho:
  002b4	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002b7	83 e8 01	 sub	 eax, 1
  002ba	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN7@draw_3d_ho:
  002bd	83 7d f8 00	 cmp	 DWORD PTR _count$[ebp], 0
  002c1	7e 3f		 jle	 SHORT $LN6@draw_3d_ho

; 882  : 			{
; 883  : 	
; 884  : 				if ( faces->number_of_points > 2 )

  002c3	8b 45 f4	 mov	 eax, DWORD PTR _faces$[ebp]
  002c6	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  002c9	83 f9 02	 cmp	 ecx, 2
  002cc	7e 1d		 jle	 SHORT $LN17@draw_3d_ho

; 885  : 				{
; 886  : 	
; 887  : 					render_3d_horizon_face ( faces, surface, point_reference_index, this_object_3d_info, apply_monochrome_filter, colour_filter);

  002ce	8b 45 ac	 mov	 eax, DWORD PTR _colour_filter$6[ebp]
  002d1	50		 push	 eax
  002d2	8b 4d b4	 mov	 ecx, DWORD PTR _apply_monochrome_filter$8[ebp]
  002d5	51		 push	 ecx
  002d6	8b 55 f0	 mov	 edx, DWORD PTR _this_object_3d_info$[ebp]
  002d9	52		 push	 edx
  002da	8b 45 b0	 mov	 eax, DWORD PTR _point_reference_index$7[ebp]
  002dd	50		 push	 eax
  002de	8b 4d c0	 mov	 ecx, DWORD PTR _surface$11[ebp]
  002e1	51		 push	 ecx
  002e2	8b 55 f4	 mov	 edx, DWORD PTR _faces$[ebp]
  002e5	52		 push	 edx
  002e6	e8 00 00 00 00	 call	 ?render_3d_horizon_face@@YGXPAUOBJECT_3D_FACE@@HHPAUOBJECT_3D_INFO@@HUREAL_COLOUR@@@Z ; render_3d_horizon_face
$LN17@draw_3d_ho:

; 888  : 				}
; 889  : 	
; 890  : 				point_reference_index += faces->number_of_points;

  002eb	8b 45 f4	 mov	 eax, DWORD PTR _faces$[ebp]
  002ee	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  002f1	03 4d b0	 add	 ecx, DWORD PTR _point_reference_index$7[ebp]
  002f4	89 4d b0	 mov	 DWORD PTR _point_reference_index$7[ebp], ecx

; 891  : 	
; 892  : 				faces++;

  002f7	8b 45 f4	 mov	 eax, DWORD PTR _faces$[ebp]
  002fa	83 c0 01	 add	 eax, 1
  002fd	89 45 f4	 mov	 DWORD PTR _faces$[ebp], eax

; 893  : 			}

  00300	eb b2		 jmp	 SHORT $LN5@draw_3d_ho
$LN6@draw_3d_ho:

; 894  : 	
; 895  : 			current_object_3d_surface_point_list += number_of_surface_points;

  00302	8b 45 b8	 mov	 eax, DWORD PTR _number_of_surface_points$9[ebp]
  00305	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  0030b	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0030e	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 896  : 
; 897  : 			current_object_3d_surface++;

  00314	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00319	83 c0 10	 add	 eax, 16			; 00000010H
  0031c	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, eax ; current_object_3d_surface

; 898  : 		}

  00321	e9 40 ff ff ff	 jmp	 $LN2@draw_3d_ho
$LN3@draw_3d_ho:

; 899  : 	}
; 900  : 	else

  00326	e9 e4 00 00 00	 jmp	 $LN9@draw_3d_ho
$LN14@draw_3d_ho:

; 901  : 	{
; 902  : 
; 903  : 		int
; 904  : 			surface,
; 905  : 			number_of_surface_points,
; 906  : 			surface_face_count;
; 907  : 
; 908  : 		int
; 909  : 			point_reference_index;
; 910  : 
; 911  : 		point_reference_index = 0;

  0032b	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _point_reference_index$2[ebp], 0

; 912  : 
; 913  : 		for ( surface = 0; surface < objects_3d_data[object_number].number_of_surfaces; surface++ )

  00332	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _surface$5[ebp], 0
  00339	eb 09		 jmp	 SHORT $LN10@draw_3d_ho
$LN8@draw_3d_ho:
  0033b	8b 45 a8	 mov	 eax, DWORD PTR _surface$5[ebp]
  0033e	83 c0 01	 add	 eax, 1
  00341	89 45 a8	 mov	 DWORD PTR _surface$5[ebp], eax
$LN10@draw_3d_ho:
  00344	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00348	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0034e	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  00353	39 55 a8	 cmp	 DWORD PTR _surface$5[ebp], edx
  00356	0f 8d b3 00 00
	00		 jge	 $LN9@draw_3d_ho

; 914  : 		{
; 915  : 	
; 916  : 			surface_face_count = current_object_3d_surface->number_of_faces;

  0035c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00361	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00365	89 4d a0	 mov	 DWORD PTR _surface_face_count$3[ebp], ecx

; 917  : 	
; 918  : 			number_of_surface_points = current_object_3d_surface->number_of_points;

  00368	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0036d	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00371	89 4d a4	 mov	 DWORD PTR _number_of_surface_points$4[ebp], ecx

; 919  : 	
; 920  : 			if ( number_of_surface_points == 0 )

  00374	83 7d a4 00	 cmp	 DWORD PTR _number_of_surface_points$4[ebp], 0
  00378	75 07		 jne	 SHORT $LN18@draw_3d_ho

; 921  : 			{
; 922  : 	
; 923  : 				number_of_surface_points = 256;

  0037a	c7 45 a4 00 01
	00 00		 mov	 DWORD PTR _number_of_surface_points$4[ebp], 256 ; 00000100H
$LN18@draw_3d_ho:

; 924  : 			}
; 925  : 
; 926  : 			surface_face_count = objects_3d_data[object_number].surfaces[surface].number_of_faces;

  00381	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00385	8b 4d a8	 mov	 ecx, DWORD PTR _surface$5[ebp]
  00388	c1 e1 04	 shl	 ecx, 4
  0038b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00391	8b 44 02 50	 mov	 eax, DWORD PTR [edx+eax+80]
  00395	0f b7 4c 08 08	 movzx	 ecx, WORD PTR [eax+ecx+8]
  0039a	89 4d a0	 mov	 DWORD PTR _surface_face_count$3[ebp], ecx

; 927  : 	
; 928  : 			for ( count = surface_face_count; count > 0; count-- )

  0039d	8b 45 a0	 mov	 eax, DWORD PTR _surface_face_count$3[ebp]
  003a0	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
  003a3	eb 09		 jmp	 SHORT $LN13@draw_3d_ho
$LN11@draw_3d_ho:
  003a5	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  003a8	83 e8 01	 sub	 eax, 1
  003ab	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN13@draw_3d_ho:
  003ae	83 7d f8 00	 cmp	 DWORD PTR _count$[ebp], 0
  003b2	7e 37		 jle	 SHORT $LN12@draw_3d_ho

; 929  : 			{
; 930  : 	
; 931  : 				if ( faces->number_of_points > 2 )

  003b4	8b 45 f4	 mov	 eax, DWORD PTR _faces$[ebp]
  003b7	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  003ba	83 f9 02	 cmp	 ecx, 2
  003bd	7e 15		 jle	 SHORT $LN19@draw_3d_ho

; 932  : 				{
; 933  : 	
; 934  : 					render_3d_horizon_infrared_face ( faces, surface, point_reference_index, this_object_3d_info );

  003bf	8b 45 f0	 mov	 eax, DWORD PTR _this_object_3d_info$[ebp]
  003c2	50		 push	 eax
  003c3	8b 4d 9c	 mov	 ecx, DWORD PTR _point_reference_index$2[ebp]
  003c6	51		 push	 ecx
  003c7	8b 55 a8	 mov	 edx, DWORD PTR _surface$5[ebp]
  003ca	52		 push	 edx
  003cb	8b 45 f4	 mov	 eax, DWORD PTR _faces$[ebp]
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 ?render_3d_horizon_infrared_face@@YGXPAUOBJECT_3D_FACE@@HHPAUOBJECT_3D_INFO@@@Z ; render_3d_horizon_infrared_face
$LN19@draw_3d_ho:

; 935  : 				}
; 936  : 	
; 937  : 				point_reference_index += faces->number_of_points;

  003d4	8b 45 f4	 mov	 eax, DWORD PTR _faces$[ebp]
  003d7	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  003da	03 4d 9c	 add	 ecx, DWORD PTR _point_reference_index$2[ebp]
  003dd	89 4d 9c	 mov	 DWORD PTR _point_reference_index$2[ebp], ecx

; 938  : 	
; 939  : 				faces++;

  003e0	8b 45 f4	 mov	 eax, DWORD PTR _faces$[ebp]
  003e3	83 c0 01	 add	 eax, 1
  003e6	89 45 f4	 mov	 DWORD PTR _faces$[ebp], eax

; 940  : 			}

  003e9	eb ba		 jmp	 SHORT $LN11@draw_3d_ho
$LN12@draw_3d_ho:

; 941  : 	
; 942  : 			current_object_3d_surface_point_list += number_of_surface_points;

  003eb	8b 45 a4	 mov	 eax, DWORD PTR _number_of_surface_points$4[ebp]
  003ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  003f4	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  003f7	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 943  : 
; 944  : 			current_object_3d_surface++;

  003fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00402	83 c0 10	 add	 eax, 16			; 00000010H
  00405	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, eax ; current_object_3d_surface

; 945  : 		}

  0040a	e9 2c ff ff ff	 jmp	 $LN8@draw_3d_ho
$LN9@draw_3d_ho:

; 946  : 	}
; 947  : 
; 948  : 	//
; 949  : 	// Turn fogging back on again
; 950  : 	//
; 951  : 
; 952  : 	finalise_primitives ();

  0040f	e8 00 00 00 00	 call	 ?finalise_primitives@@YGXXZ ; finalise_primitives

; 953  : 
; 954  : 	if ( active_3d_environment->fogmode == FOGMODE_OFF )

  00414	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00419	83 78 44 03	 cmp	 DWORD PTR [eax+68], 3
  0041d	75 0f		 jne	 SHORT $LN20@draw_3d_ho

; 955  : 	{
; 956  : 
; 957  : 		set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, TRUE, TRUE );

  0041f	6a 01		 push	 1
  00421	6a 01		 push	 1
  00423	6a 00		 push	 0
  00425	6a 00		 push	 0
  00427	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 958  : 	}
; 959  : 	else

  0042c	eb 0d		 jmp	 SHORT $LN21@draw_3d_ho
$LN20@draw_3d_ho:

; 960  : 	{
; 961  : 
; 962  : 		set_d3d_alpha_fog_zbuffer ( FALSE, TRUE, TRUE, TRUE );

  0042e	6a 01		 push	 1
  00430	6a 01		 push	 1
  00432	6a 01		 push	 1
  00434	6a 00		 push	 0
  00436	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer
$LN21@draw_3d_ho:

; 963  : 	}
; 964  : 
; 965  : 	set_d3d_int_state ( D3DRENDERSTATE_ZFUNC, zbuffer_default_comparison );

  0043b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?zbuffer_default_comparison@@3W4_D3DCMPFUNC@@A ; zbuffer_default_comparison
  00440	50		 push	 eax
  00441	6a 17		 push	 23			; 00000017H
  00443	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 966  : }

  00448	5f		 pop	 edi
  00449	5e		 pop	 esi
  0044a	5b		 pop	 ebx
  0044b	8b e5		 mov	 esp, ebp
  0044d	5d		 pop	 ebp
  0044e	c3		 ret	 0
?draw_3d_horizon@@YGXXZ ENDP				; draw_3d_horizon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?update_3d_horizon@@YGXPAUENV_3D@@@Z
_TEXT	SEGMENT
_fb$1 = -108						; size = 4
_fg$2 = -104						; size = 4
_fr$3 = -100						; size = 4
_b2$4 = -96						; size = 4
_g2$5 = -92						; size = 4
_r2$6 = -88						; size = 4
_b1$7 = -84						; size = 4
_g1$8 = -80						; size = 4
_r1$9 = -76						; size = 4
_end_mode$ = -72					; size = 4
_start_mode$ = -68					; size = 4
_weather_t$ = -64					; size = 4
_time$ = -60						; size = 4
_count$ = -56						; size = 4
_ib$ = -52						; size = 4
_ig$ = -48						; size = 4
_ir$ = -44						; size = 4
_t2$ = -40						; size = 4
_t1$ = -36						; size = 4
_db$ = -32						; size = 4
_dg$ = -28						; size = 4
_dr$ = -24						; size = 4
_image4$ = -20						; size = 4
_image3$ = -16						; size = 4
_image2$ = -12						; size = 4
_image1$ = -8						; size = 4
_object$ = -4						; size = 4
_env$ = 8						; size = 4
?update_3d_horizon@@YGXPAUENV_3D@@@Z PROC		; update_3d_horizon, COMDAT

; 471  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 472  : 
; 473  : 	object_3d
; 474  : 		*object;
; 475  : 
; 476  : 	horizon_image_data
; 477  : 		*image1,
; 478  : 		*image2,
; 479  : 		*image3,
; 480  : 		*image4;
; 481  : 
; 482  : 	float
; 483  : 		dr,
; 484  : 		dg,
; 485  : 		db,
; 486  : 		t1,
; 487  : 		t2;
; 488  : 
; 489  : 	int
; 490  : 		ir,
; 491  : 		ig,
; 492  : 		ib,
; 493  : 		count;
; 494  : 
; 495  : 	float
; 496  : 		time,
; 497  : 		weather_t;
; 498  : 
; 499  : 	weathermodes
; 500  : 		start_mode,
; 501  : 		end_mode;
; 502  : 
; 503  : 	//
; 504  : 	// Get the variables
; 505  : 	//
; 506  : 
; 507  : 	time = get_3d_time_of_day ( env );

  0000c	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?get_3d_time_of_day@@YGMPAUENV_3D@@@Z ; get_3d_time_of_day
  00015	d9 5d c4	 fstp	 DWORD PTR _time$[ebp]

; 508  : 
; 509  : 	start_mode = get_3d_weathermode ( env );

  00018	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?get_3d_weathermode@@YG?AW4WEATHERMODES@@PAUENV_3D@@@Z ; get_3d_weathermode
  00021	89 45 bc	 mov	 DWORD PTR _start_mode$[ebp], eax

; 510  : 
; 511  : 	end_mode = get_3d_target_weathermode ( env );

  00024	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?get_3d_target_weathermode@@YG?AW4WEATHERMODES@@PAUENV_3D@@@Z ; get_3d_target_weathermode
  0002d	89 45 b8	 mov	 DWORD PTR _end_mode$[ebp], eax

; 512  : 
; 513  : 	weather_t = get_3d_target_weathermode_transitional_status ( env );

  00030	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?get_3d_target_weathermode_transitional_status@@YGMPAUENV_3D@@@Z ; get_3d_target_weathermode_transitional_status
  00039	d9 5d c0	 fstp	 DWORD PTR _weather_t$[ebp]

; 514  : 
; 515  : 	//
; 516  : 	// Find the point colours for just *before* this time
; 517  : 	//
; 518  : 
; 519  : 	image1 = env->horizon_images_lists[start_mode];

  0003c	8b 45 bc	 mov	 eax, DWORD PTR _start_mode$[ebp]
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  00042	8b 94 81 bc 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+700]
  00049	89 55 f8	 mov	 DWORD PTR _image1$[ebp], edx

; 520  : 
; 521  : 	image2 = env->horizon_images_lists[start_mode];

  0004c	8b 45 bc	 mov	 eax, DWORD PTR _start_mode$[ebp]
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  00052	8b 94 81 bc 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+700]
  00059	89 55 f4	 mov	 DWORD PTR _image2$[ebp], edx

; 522  : 
; 523  : 	if ( !image1 )

  0005c	83 7d f8 00	 cmp	 DWORD PTR _image1$[ebp], 0
  00060	75 11		 jne	 SHORT $LN12@update_3d_

; 524  : 	{
; 525  : 
; 526  : 		debug_fatal ( "Unable to update the horizon - no information for current weathermode: %d", start_mode );

  00062	8b 45 bc	 mov	 eax, DWORD PTR _start_mode$[ebp]
  00065	50		 push	 eax
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@GCMDJCFD@Unable?5to?5update?5the?5horizon?5?9?5@
  0006b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00070	83 c4 08	 add	 esp, 8
$LN12@update_3d_:

; 527  : 	}
; 528  : 
; 529  : 	while ( ( image2 ) && ( image2->time < time ) )

  00073	83 7d f4 00	 cmp	 DWORD PTR _image2$[ebp], 0
  00077	74 1e		 je	 SHORT $LN3@update_3d_
  00079	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  0007c	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _time$[ebp]
  00081	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [eax+4]
  00085	76 10		 jbe	 SHORT $LN3@update_3d_

; 530  : 	{
; 531  : 
; 532  : 		image1 = image2;

  00087	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  0008a	89 45 f8	 mov	 DWORD PTR _image1$[ebp], eax

; 533  : 
; 534  : 		image2 = image2->succ;

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
  00092	89 4d f4	 mov	 DWORD PTR _image2$[ebp], ecx

; 535  : 	}

  00095	eb dc		 jmp	 SHORT $LN12@update_3d_
$LN3@update_3d_:

; 536  : 
; 537  : 	if ( image2 )

  00097	83 7d f4 00	 cmp	 DWORD PTR _image2$[ebp], 0
  0009b	74 3a		 je	 SHORT $LN13@update_3d_

; 538  : 	{
; 539  : 
; 540  : 		//
; 541  : 		// Have to work out how far between these two images we are.
; 542  : 		//
; 543  : 
; 544  : 		if ( image1 == image2 )

  0009d	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  000a0	3b 45 f4	 cmp	 eax, DWORD PTR _image2$[ebp]
  000a3	75 0a		 jne	 SHORT $LN15@update_3d_

; 545  : 		{
; 546  : 
; 547  : 			t1 = 0;

  000a5	0f 57 c0	 xorps	 xmm0, xmm0
  000a8	f3 0f 11 45 dc	 movss	 DWORD PTR _t1$[ebp], xmm0

; 548  : 		}
; 549  : 		else

  000ad	eb 26		 jmp	 SHORT $LN16@update_3d_
$LN15@update_3d_:

; 550  : 		{
; 551  : 
; 552  : 			t1 = ( ( time - image1->time ) / ( image2->time - image1->time ) );

  000af	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  000b2	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _time$[ebp]
  000b7	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR _image2$[ebp]
  000bf	8b 55 f8	 mov	 edx, DWORD PTR _image1$[ebp]
  000c2	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  000c7	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  000cc	f3 0f 5e c1	 divss	 xmm0, xmm1
  000d0	f3 0f 11 45 dc	 movss	 DWORD PTR _t1$[ebp], xmm0
$LN16@update_3d_:

; 553  : 		}
; 554  : 	}
; 555  : 	else

  000d5	eb 3e		 jmp	 SHORT $LN14@update_3d_
$LN13@update_3d_:

; 556  : 	{
; 557  : 
; 558  : 		//
; 559  : 		// We are somewhere between the last image and the first image
; 560  : 		//
; 561  : 
; 562  : 		image2 = env->horizon_images_lists[start_mode];

  000d7	8b 45 bc	 mov	 eax, DWORD PTR _start_mode$[ebp]
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  000dd	8b 94 81 bc 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+700]
  000e4	89 55 f4	 mov	 DWORD PTR _image2$[ebp], edx

; 563  : 
; 564  : 		t1 = ( ( time - image1->time ) / ( ( image2->time + ONE_DAY ) - image1->time ) );

  000e7	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  000ea	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _time$[ebp]
  000ef	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  000f4	8b 4d f4	 mov	 ecx, DWORD PTR _image2$[ebp]
  000f7	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  000fc	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@47a8c000
  00104	8b 55 f8	 mov	 edx, DWORD PTR _image1$[ebp]
  00107	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  0010c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00110	f3 0f 11 45 dc	 movss	 DWORD PTR _t1$[ebp], xmm0
$LN14@update_3d_:

; 565  : 	}
; 566  : 
; 567  : 	if ( ( weather_t != 0 ) && ( end_mode != start_mode ) )

  00115	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _weather_t$[ebp]
  0011a	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00121	9f		 lahf
  00122	f6 c4 44	 test	 ah, 68			; 00000044H
  00125	0f 8b 99 05 00
	00		 jnp	 $LN17@update_3d_
  0012b	8b 45 b8	 mov	 eax, DWORD PTR _end_mode$[ebp]
  0012e	3b 45 bc	 cmp	 eax, DWORD PTR _start_mode$[ebp]
  00131	0f 84 8d 05 00
	00		 je	 $LN17@update_3d_

; 568  : 	{
; 569  : 
; 570  : 	
; 571  : 		float
; 572  : 			r1,
; 573  : 			g1,
; 574  : 			b1,
; 575  : 			r2,
; 576  : 			g2,
; 577  : 			b2;
; 578  : 	
; 579  : 		image3 = env->horizon_images_lists[end_mode];

  00137	8b 45 b8	 mov	 eax, DWORD PTR _end_mode$[ebp]
  0013a	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  0013d	8b 94 81 bc 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+700]
  00144	89 55 f0	 mov	 DWORD PTR _image3$[ebp], edx

; 580  : 	
; 581  : 		image4 = env->horizon_images_lists[end_mode];

  00147	8b 45 b8	 mov	 eax, DWORD PTR _end_mode$[ebp]
  0014a	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  0014d	8b 94 81 bc 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+700]
  00154	89 55 ec	 mov	 DWORD PTR _image4$[ebp], edx

; 582  : 
; 583  : 		if ( !image3 )

  00157	83 7d f0 00	 cmp	 DWORD PTR _image3$[ebp], 0
  0015b	75 11		 jne	 SHORT $LN19@update_3d_

; 584  : 		{
; 585  : 
; 586  : 			debug_fatal ( "Unable to update the horizon - no information for weathermode: %d", end_mode );

  0015d	8b 45 b8	 mov	 eax, DWORD PTR _end_mode$[ebp]
  00160	50		 push	 eax
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@CLPLBFKM@Unable?5to?5update?5the?5horizon?5?9?5@
  00166	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0016b	83 c4 08	 add	 esp, 8
$LN19@update_3d_:

; 587  : 		}
; 588  : 	
; 589  : 		while ( ( image4 ) && ( image4->time < time ) )

  0016e	83 7d ec 00	 cmp	 DWORD PTR _image4$[ebp], 0
  00172	74 1e		 je	 SHORT $LN5@update_3d_
  00174	8b 45 ec	 mov	 eax, DWORD PTR _image4$[ebp]
  00177	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _time$[ebp]
  0017c	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [eax+4]
  00180	76 10		 jbe	 SHORT $LN5@update_3d_

; 590  : 		{
; 591  : 	
; 592  : 			image3 = image4;

  00182	8b 45 ec	 mov	 eax, DWORD PTR _image4$[ebp]
  00185	89 45 f0	 mov	 DWORD PTR _image3$[ebp], eax

; 593  : 	
; 594  : 			image4 = image4->succ;

  00188	8b 45 ec	 mov	 eax, DWORD PTR _image4$[ebp]
  0018b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018d	89 4d ec	 mov	 DWORD PTR _image4$[ebp], ecx

; 595  : 		}

  00190	eb dc		 jmp	 SHORT $LN19@update_3d_
$LN5@update_3d_:

; 596  : 	
; 597  : 		if ( image4 )

  00192	83 7d ec 00	 cmp	 DWORD PTR _image4$[ebp], 0
  00196	74 3a		 je	 SHORT $LN20@update_3d_

; 598  : 		{
; 599  : 	
; 600  : 			//
; 601  : 			// Have to work out how far between these two images we are.
; 602  : 			//
; 603  : 	
; 604  : 			if ( image3 == image4 )

  00198	8b 45 f0	 mov	 eax, DWORD PTR _image3$[ebp]
  0019b	3b 45 ec	 cmp	 eax, DWORD PTR _image4$[ebp]
  0019e	75 0a		 jne	 SHORT $LN22@update_3d_

; 605  : 			{
; 606  : 	
; 607  : 				t2 = 0;

  001a0	0f 57 c0	 xorps	 xmm0, xmm0
  001a3	f3 0f 11 45 d8	 movss	 DWORD PTR _t2$[ebp], xmm0

; 608  : 			}
; 609  : 			else

  001a8	eb 26		 jmp	 SHORT $LN23@update_3d_
$LN22@update_3d_:

; 610  : 			{
; 611  : 	
; 612  : 				t2 = ( ( time - image3->time ) / ( image4->time - image3->time ) );

  001aa	8b 45 f0	 mov	 eax, DWORD PTR _image3$[ebp]
  001ad	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _time$[ebp]
  001b2	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  001b7	8b 4d ec	 mov	 ecx, DWORD PTR _image4$[ebp]
  001ba	8b 55 f0	 mov	 edx, DWORD PTR _image3$[ebp]
  001bd	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  001c2	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  001c7	f3 0f 5e c1	 divss	 xmm0, xmm1
  001cb	f3 0f 11 45 d8	 movss	 DWORD PTR _t2$[ebp], xmm0
$LN23@update_3d_:

; 613  : 			}
; 614  : 		}
; 615  : 		else

  001d0	eb 3e		 jmp	 SHORT $LN21@update_3d_
$LN20@update_3d_:

; 616  : 		{
; 617  : 	
; 618  : 			//
; 619  : 			// We are somewhere between the last image and the first image
; 620  : 			//
; 621  : 	
; 622  : 			image4 = env->horizon_images_lists[end_mode];

  001d2	8b 45 b8	 mov	 eax, DWORD PTR _end_mode$[ebp]
  001d5	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  001d8	8b 94 81 bc 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+700]
  001df	89 55 ec	 mov	 DWORD PTR _image4$[ebp], edx

; 623  : 	
; 624  : 			t2 = ( ( time - image3->time ) / ( ( image4->time + ONE_DAY ) - image3->time ) );

  001e2	8b 45 f0	 mov	 eax, DWORD PTR _image3$[ebp]
  001e5	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _time$[ebp]
  001ea	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  001ef	8b 4d ec	 mov	 ecx, DWORD PTR _image4$[ebp]
  001f2	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  001f7	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@47a8c000
  001ff	8b 55 f0	 mov	 edx, DWORD PTR _image3$[ebp]
  00202	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  00207	f3 0f 5e c1	 divss	 xmm0, xmm1
  0020b	f3 0f 11 45 d8	 movss	 DWORD PTR _t2$[ebp], xmm0
$LN21@update_3d_:

; 625  : 		}
; 626  : 
; 627  : 		//
; 628  : 		// Combine four images together!!!
; 629  : 		//
; 630  : 
; 631  : 		object = &objects_3d_data[env->horizon_3d_object_number];

  00210	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  00213	6b 88 b4 02 00
	00 68		 imul	 ecx, DWORD PTR [eax+692], 104
  0021a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00220	89 4d fc	 mov	 DWORD PTR _object$[ebp], ecx

; 632  : 	
; 633  : 		for ( count = 0; count < object->number_of_points; count++ )

  00223	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0022a	eb 09		 jmp	 SHORT $LN8@update_3d_
$LN6@update_3d_:
  0022c	8b 45 c8	 mov	 eax, DWORD PTR _count$[ebp]
  0022f	83 c0 01	 add	 eax, 1
  00232	89 45 c8	 mov	 DWORD PTR _count$[ebp], eax
$LN8@update_3d_:
  00235	8b 45 fc	 mov	 eax, DWORD PTR _object$[ebp]
  00238	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0023b	39 4d c8	 cmp	 DWORD PTR _count$[ebp], ecx
  0023e	0f 8d 86 02 00
	00		 jge	 $LN7@update_3d_

; 634  : 		{
; 635  : 
; 636  : 			dr = image2->point_colours[count].red - image1->point_colours[count].red;

  00244	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  00247	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0024a	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  0024d	0f b6 44 91 02	 movzx	 eax, BYTE PTR [ecx+edx*4+2]
  00252	8b 4d f8	 mov	 ecx, DWORD PTR _image1$[ebp]
  00255	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00258	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  0025b	0f b6 54 8a 02	 movzx	 edx, BYTE PTR [edx+ecx*4+2]
  00260	2b c2		 sub	 eax, edx
  00262	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00266	f3 0f 11 45 e8	 movss	 DWORD PTR _dr$[ebp], xmm0

; 637  : 			dg = image2->point_colours[count].green - image1->point_colours[count].green;

  0026b	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  0026e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00271	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  00274	0f b6 44 91 01	 movzx	 eax, BYTE PTR [ecx+edx*4+1]
  00279	8b 4d f8	 mov	 ecx, DWORD PTR _image1$[ebp]
  0027c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0027f	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  00282	0f b6 54 8a 01	 movzx	 edx, BYTE PTR [edx+ecx*4+1]
  00287	2b c2		 sub	 eax, edx
  00289	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0028d	f3 0f 11 45 e4	 movss	 DWORD PTR _dg$[ebp], xmm0

; 638  : 			db = image2->point_colours[count].blue - image1->point_colours[count].blue;

  00292	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  00295	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00298	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  0029b	0f b6 04 91	 movzx	 eax, BYTE PTR [ecx+edx*4]
  0029f	8b 4d f8	 mov	 ecx, DWORD PTR _image1$[ebp]
  002a2	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  002a5	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  002a8	0f b6 14 8a	 movzx	 edx, BYTE PTR [edx+ecx*4]
  002ac	2b c2		 sub	 eax, edx
  002ae	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002b2	f3 0f 11 45 e0	 movss	 DWORD PTR _db$[ebp], xmm0

; 639  : 
; 640  : 			r1 = image1->point_colours[count].red + ( t1 * dr );

  002b7	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  002ba	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002bd	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  002c0	0f b6 44 91 02	 movzx	 eax, BYTE PTR [ecx+edx*4+2]
  002c5	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002c9	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _t1$[ebp]
  002ce	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _dr$[ebp]
  002d3	f3 0f 58 c1	 addss	 xmm0, xmm1
  002d7	f3 0f 11 45 b4	 movss	 DWORD PTR _r1$9[ebp], xmm0

; 641  : 			g1 = image1->point_colours[count].green + ( t1 * dg );

  002dc	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  002df	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002e2	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  002e5	0f b6 44 91 01	 movzx	 eax, BYTE PTR [ecx+edx*4+1]
  002ea	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002ee	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _t1$[ebp]
  002f3	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _dg$[ebp]
  002f8	f3 0f 58 c1	 addss	 xmm0, xmm1
  002fc	f3 0f 11 45 b0	 movss	 DWORD PTR _g1$8[ebp], xmm0

; 642  : 			b1 = image1->point_colours[count].blue + ( t1 * db );

  00301	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  00304	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00307	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  0030a	0f b6 04 91	 movzx	 eax, BYTE PTR [ecx+edx*4]
  0030e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00312	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _t1$[ebp]
  00317	f3 0f 59 4d e0	 mulss	 xmm1, DWORD PTR _db$[ebp]
  0031c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00320	f3 0f 11 45 ac	 movss	 DWORD PTR _b1$7[ebp], xmm0

; 643  : 
; 644  : 			dr = image4->point_colours[count].red - image3->point_colours[count].red;

  00325	8b 45 ec	 mov	 eax, DWORD PTR _image4$[ebp]
  00328	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0032b	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  0032e	0f b6 44 91 02	 movzx	 eax, BYTE PTR [ecx+edx*4+2]
  00333	8b 4d f0	 mov	 ecx, DWORD PTR _image3$[ebp]
  00336	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00339	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  0033c	0f b6 54 8a 02	 movzx	 edx, BYTE PTR [edx+ecx*4+2]
  00341	2b c2		 sub	 eax, edx
  00343	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00347	f3 0f 11 45 e8	 movss	 DWORD PTR _dr$[ebp], xmm0

; 645  : 			dg = image4->point_colours[count].green - image3->point_colours[count].green;

  0034c	8b 45 ec	 mov	 eax, DWORD PTR _image4$[ebp]
  0034f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00352	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  00355	0f b6 44 91 01	 movzx	 eax, BYTE PTR [ecx+edx*4+1]
  0035a	8b 4d f0	 mov	 ecx, DWORD PTR _image3$[ebp]
  0035d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00360	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  00363	0f b6 54 8a 01	 movzx	 edx, BYTE PTR [edx+ecx*4+1]
  00368	2b c2		 sub	 eax, edx
  0036a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0036e	f3 0f 11 45 e4	 movss	 DWORD PTR _dg$[ebp], xmm0

; 646  : 			db = image4->point_colours[count].blue - image3->point_colours[count].blue;

  00373	8b 45 ec	 mov	 eax, DWORD PTR _image4$[ebp]
  00376	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00379	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  0037c	0f b6 04 91	 movzx	 eax, BYTE PTR [ecx+edx*4]
  00380	8b 4d f0	 mov	 ecx, DWORD PTR _image3$[ebp]
  00383	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00386	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  00389	0f b6 14 8a	 movzx	 edx, BYTE PTR [edx+ecx*4]
  0038d	2b c2		 sub	 eax, edx
  0038f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00393	f3 0f 11 45 e0	 movss	 DWORD PTR _db$[ebp], xmm0

; 647  : 
; 648  : 			r2 = image3->point_colours[count].red + ( t2 * dr );

  00398	8b 45 f0	 mov	 eax, DWORD PTR _image3$[ebp]
  0039b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0039e	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  003a1	0f b6 44 91 02	 movzx	 eax, BYTE PTR [ecx+edx*4+2]
  003a6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003aa	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _t2$[ebp]
  003af	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _dr$[ebp]
  003b4	f3 0f 58 c1	 addss	 xmm0, xmm1
  003b8	f3 0f 11 45 a8	 movss	 DWORD PTR _r2$6[ebp], xmm0

; 649  : 			g2 = image3->point_colours[count].green + ( t2 * dg );

  003bd	8b 45 f0	 mov	 eax, DWORD PTR _image3$[ebp]
  003c0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  003c3	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  003c6	0f b6 44 91 01	 movzx	 eax, BYTE PTR [ecx+edx*4+1]
  003cb	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003cf	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _t2$[ebp]
  003d4	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _dg$[ebp]
  003d9	f3 0f 58 c1	 addss	 xmm0, xmm1
  003dd	f3 0f 11 45 a4	 movss	 DWORD PTR _g2$5[ebp], xmm0

; 650  : 			b2 = image3->point_colours[count].blue + ( t2 * db );

  003e2	8b 45 f0	 mov	 eax, DWORD PTR _image3$[ebp]
  003e5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  003e8	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  003eb	0f b6 04 91	 movzx	 eax, BYTE PTR [ecx+edx*4]
  003ef	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003f3	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _t2$[ebp]
  003f8	f3 0f 59 4d e0	 mulss	 xmm1, DWORD PTR _db$[ebp]
  003fd	f3 0f 58 c1	 addss	 xmm0, xmm1
  00401	f3 0f 11 45 a0	 movss	 DWORD PTR _b2$4[ebp], xmm0

; 651  : 
; 652  : 			dr = r2 - r1;

  00406	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _r2$6[ebp]
  0040b	f3 0f 5c 45 b4	 subss	 xmm0, DWORD PTR _r1$9[ebp]
  00410	f3 0f 11 45 e8	 movss	 DWORD PTR _dr$[ebp], xmm0

; 653  : 			dg = g2 - g1;

  00415	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _g2$5[ebp]
  0041a	f3 0f 5c 45 b0	 subss	 xmm0, DWORD PTR _g1$8[ebp]
  0041f	f3 0f 11 45 e4	 movss	 DWORD PTR _dg$[ebp], xmm0

; 654  : 			db = b2 - b1;

  00424	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _b2$4[ebp]
  00429	f3 0f 5c 45 ac	 subss	 xmm0, DWORD PTR _b1$7[ebp]
  0042e	f3 0f 11 45 e0	 movss	 DWORD PTR _db$[ebp], xmm0

; 655  : 
; 656  : 			asm_convert_float_to_int ( ( r1 + ( weather_t * dr ) ), &ir );

  00433	8d 45 d4	 lea	 eax, DWORD PTR _ir$[ebp]
  00436	50		 push	 eax
  00437	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _weather_t$[ebp]
  0043c	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _dr$[ebp]
  00441	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _r1$9[ebp]
  00446	51		 push	 ecx
  00447	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044c	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 657  : 			asm_convert_float_to_int ( ( g1 + ( weather_t * dg ) ), &ig );

  00451	8d 45 d0	 lea	 eax, DWORD PTR _ig$[ebp]
  00454	50		 push	 eax
  00455	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _weather_t$[ebp]
  0045a	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _dg$[ebp]
  0045f	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _g1$8[ebp]
  00464	51		 push	 ecx
  00465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046a	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 658  : 			asm_convert_float_to_int ( ( b1 + ( weather_t * db ) ), &ib );

  0046f	8d 45 cc	 lea	 eax, DWORD PTR _ib$[ebp]
  00472	50		 push	 eax
  00473	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _weather_t$[ebp]
  00478	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _db$[ebp]
  0047d	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR _b1$7[ebp]
  00482	51		 push	 ecx
  00483	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00488	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 659  : 
; 660  : 			env->horizon_point_colours[count].red = ir;

  0048d	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  00490	8b 88 ac 02 00
	00		 mov	 ecx, DWORD PTR [eax+684]
  00496	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  00499	8a 45 d4	 mov	 al, BYTE PTR _ir$[ebp]
  0049c	88 44 91 02	 mov	 BYTE PTR [ecx+edx*4+2], al

; 661  : 			env->horizon_point_colours[count].green = ig;

  004a0	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  004a3	8b 88 ac 02 00
	00		 mov	 ecx, DWORD PTR [eax+684]
  004a9	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  004ac	8a 45 d0	 mov	 al, BYTE PTR _ig$[ebp]
  004af	88 44 91 01	 mov	 BYTE PTR [ecx+edx*4+1], al

; 662  : 			env->horizon_point_colours[count].blue = ib;

  004b3	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  004b6	8b 88 ac 02 00
	00		 mov	 ecx, DWORD PTR [eax+684]
  004bc	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  004bf	8a 45 cc	 mov	 al, BYTE PTR _ib$[ebp]
  004c2	88 04 91	 mov	 BYTE PTR [ecx+edx*4], al

; 663  : 		}

  004c5	e9 62 fd ff ff	 jmp	 $LN6@update_3d_
$LN7@update_3d_:

; 664  : 	
; 665  : 		dr = image2->fog_colour.r - image1->fog_colour.r;

  004ca	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  004cd	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  004d1	8b 55 f8	 mov	 edx, DWORD PTR _image1$[ebp]
  004d4	0f b6 42 0a	 movzx	 eax, BYTE PTR [edx+10]
  004d8	2b c8		 sub	 ecx, eax
  004da	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004de	f3 0f 11 45 e8	 movss	 DWORD PTR _dr$[ebp], xmm0

; 666  : 		dg = image2->fog_colour.g - image1->fog_colour.g;

  004e3	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  004e6	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  004ea	8b 55 f8	 mov	 edx, DWORD PTR _image1$[ebp]
  004ed	0f b6 42 09	 movzx	 eax, BYTE PTR [edx+9]
  004f1	2b c8		 sub	 ecx, eax
  004f3	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004f7	f3 0f 11 45 e4	 movss	 DWORD PTR _dg$[ebp], xmm0

; 667  : 		db = image2->fog_colour.b - image1->fog_colour.b;

  004fc	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  004ff	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00503	8b 55 f8	 mov	 edx, DWORD PTR _image1$[ebp]
  00506	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  0050a	2b c8		 sub	 ecx, eax
  0050c	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00510	f3 0f 11 45 e0	 movss	 DWORD PTR _db$[ebp], xmm0

; 668  : 
; 669  : 		r1 = image1->fog_colour.r + ( t1 * dr );

  00515	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  00518	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  0051c	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00520	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _t1$[ebp]
  00525	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _dr$[ebp]
  0052a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0052e	f3 0f 11 45 b4	 movss	 DWORD PTR _r1$9[ebp], xmm0

; 670  : 		g1 = image1->fog_colour.g + ( t1 * dg );

  00533	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  00536	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  0053a	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0053e	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _t1$[ebp]
  00543	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _dg$[ebp]
  00548	f3 0f 58 c1	 addss	 xmm0, xmm1
  0054c	f3 0f 11 45 b0	 movss	 DWORD PTR _g1$8[ebp], xmm0

; 671  : 		b1 = image1->fog_colour.b + ( t1 * db );

  00551	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  00554	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00558	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0055c	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _t1$[ebp]
  00561	f3 0f 59 4d e0	 mulss	 xmm1, DWORD PTR _db$[ebp]
  00566	f3 0f 58 c1	 addss	 xmm0, xmm1
  0056a	f3 0f 11 45 ac	 movss	 DWORD PTR _b1$7[ebp], xmm0

; 672  : 
; 673  : 		dr = image4->fog_colour.r - image3->fog_colour.r;

  0056f	8b 45 ec	 mov	 eax, DWORD PTR _image4$[ebp]
  00572	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  00576	8b 55 f0	 mov	 edx, DWORD PTR _image3$[ebp]
  00579	0f b6 42 0a	 movzx	 eax, BYTE PTR [edx+10]
  0057d	2b c8		 sub	 ecx, eax
  0057f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00583	f3 0f 11 45 e8	 movss	 DWORD PTR _dr$[ebp], xmm0

; 674  : 		dg = image4->fog_colour.g - image3->fog_colour.g;

  00588	8b 45 ec	 mov	 eax, DWORD PTR _image4$[ebp]
  0058b	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  0058f	8b 55 f0	 mov	 edx, DWORD PTR _image3$[ebp]
  00592	0f b6 42 09	 movzx	 eax, BYTE PTR [edx+9]
  00596	2b c8		 sub	 ecx, eax
  00598	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0059c	f3 0f 11 45 e4	 movss	 DWORD PTR _dg$[ebp], xmm0

; 675  : 		db = image4->fog_colour.b - image3->fog_colour.b;

  005a1	8b 45 ec	 mov	 eax, DWORD PTR _image4$[ebp]
  005a4	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  005a8	8b 55 f0	 mov	 edx, DWORD PTR _image3$[ebp]
  005ab	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  005af	2b c8		 sub	 ecx, eax
  005b1	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  005b5	f3 0f 11 45 e0	 movss	 DWORD PTR _db$[ebp], xmm0

; 676  : 
; 677  : 		r2 = image3->fog_colour.r + ( t2 * dr );

  005ba	8b 45 f0	 mov	 eax, DWORD PTR _image3$[ebp]
  005bd	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  005c1	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  005c5	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _t2$[ebp]
  005ca	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _dr$[ebp]
  005cf	f3 0f 58 c1	 addss	 xmm0, xmm1
  005d3	f3 0f 11 45 a8	 movss	 DWORD PTR _r2$6[ebp], xmm0

; 678  : 		g2 = image3->fog_colour.g + ( t2 * dg );

  005d8	8b 45 f0	 mov	 eax, DWORD PTR _image3$[ebp]
  005db	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  005df	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  005e3	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _t2$[ebp]
  005e8	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _dg$[ebp]
  005ed	f3 0f 58 c1	 addss	 xmm0, xmm1
  005f1	f3 0f 11 45 a4	 movss	 DWORD PTR _g2$5[ebp], xmm0

; 679  : 		b2 = image3->fog_colour.b + ( t2 * db );

  005f6	8b 45 f0	 mov	 eax, DWORD PTR _image3$[ebp]
  005f9	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  005fd	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00601	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _t2$[ebp]
  00606	f3 0f 59 4d e0	 mulss	 xmm1, DWORD PTR _db$[ebp]
  0060b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0060f	f3 0f 11 45 a0	 movss	 DWORD PTR _b2$4[ebp], xmm0

; 680  : 
; 681  : 		dr = r2 - r1;

  00614	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _r2$6[ebp]
  00619	f3 0f 5c 45 b4	 subss	 xmm0, DWORD PTR _r1$9[ebp]
  0061e	f3 0f 11 45 e8	 movss	 DWORD PTR _dr$[ebp], xmm0

; 682  : 		dg = g2 - g1;

  00623	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _g2$5[ebp]
  00628	f3 0f 5c 45 b0	 subss	 xmm0, DWORD PTR _g1$8[ebp]
  0062d	f3 0f 11 45 e4	 movss	 DWORD PTR _dg$[ebp], xmm0

; 683  : 		db = b2 - b1;

  00632	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _b2$4[ebp]
  00637	f3 0f 5c 45 ac	 subss	 xmm0, DWORD PTR _b1$7[ebp]
  0063c	f3 0f 11 45 e0	 movss	 DWORD PTR _db$[ebp], xmm0

; 684  : 
; 685  : 		asm_convert_float_to_int ( ( r1 + ( weather_t * dr ) ), &ir );

  00641	8d 45 d4	 lea	 eax, DWORD PTR _ir$[ebp]
  00644	50		 push	 eax
  00645	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _weather_t$[ebp]
  0064a	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _dr$[ebp]
  0064f	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _r1$9[ebp]
  00654	51		 push	 ecx
  00655	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065a	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 686  : 		asm_convert_float_to_int ( ( g1 + ( weather_t * dg ) ), &ig );

  0065f	8d 45 d0	 lea	 eax, DWORD PTR _ig$[ebp]
  00662	50		 push	 eax
  00663	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _weather_t$[ebp]
  00668	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _dg$[ebp]
  0066d	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _g1$8[ebp]
  00672	51		 push	 ecx
  00673	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00678	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 687  : 		asm_convert_float_to_int ( ( b1 + ( weather_t * db ) ), &ib );

  0067d	8d 45 cc	 lea	 eax, DWORD PTR _ib$[ebp]
  00680	50		 push	 eax
  00681	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _weather_t$[ebp]
  00686	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _db$[ebp]
  0068b	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR _b1$7[ebp]
  00690	51		 push	 ecx
  00691	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00696	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 688  : 
; 689  : 		env->horizon_3d_fog_colour.r = ir;

  0069b	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  0069e	8a 4d d4	 mov	 cl, BYTE PTR _ir$[ebp]
  006a1	88 88 aa 02 00
	00		 mov	 BYTE PTR [eax+682], cl

; 690  : 		env->horizon_3d_fog_colour.g = ig;

  006a7	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  006aa	8a 4d d0	 mov	 cl, BYTE PTR _ig$[ebp]
  006ad	88 88 a9 02 00
	00		 mov	 BYTE PTR [eax+681], cl

; 691  : 		env->horizon_3d_fog_colour.b = ib;

  006b3	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  006b6	8a 4d cc	 mov	 cl, BYTE PTR _ib$[ebp]
  006b9	88 88 a8 02 00
	00		 mov	 BYTE PTR [eax+680], cl

; 692  : 	}
; 693  : 	else

  006bf	e9 45 02 00 00	 jmp	 $LN18@update_3d_
$LN17@update_3d_:

; 694  : 	{
; 695  : 	
; 696  : 		//
; 697  : 		// Combine the two images together
; 698  : 		//
; 699  : 	
; 700  : 		object = &objects_3d_data[env->horizon_3d_object_number];

  006c4	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  006c7	6b 88 b4 02 00
	00 68		 imul	 ecx, DWORD PTR [eax+692], 104
  006ce	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  006d4	89 4d fc	 mov	 DWORD PTR _object$[ebp], ecx

; 701  : 	
; 702  : 		for ( count = 0; count < object->number_of_points; count++ )

  006d7	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  006de	eb 09		 jmp	 SHORT $LN11@update_3d_
$LN9@update_3d_:
  006e0	8b 45 c8	 mov	 eax, DWORD PTR _count$[ebp]
  006e3	83 c0 01	 add	 eax, 1
  006e6	89 45 c8	 mov	 DWORD PTR _count$[ebp], eax
$LN11@update_3d_:
  006e9	8b 45 fc	 mov	 eax, DWORD PTR _object$[ebp]
  006ec	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  006ef	39 4d c8	 cmp	 DWORD PTR _count$[ebp], ecx
  006f2	0f 8d 42 01 00
	00		 jge	 $LN10@update_3d_

; 703  : 		{
; 704  : 
; 705  : 			float
; 706  : 				fr,
; 707  : 				fg,
; 708  : 				fb;
; 709  : /*
; 710  : 			int
; 711  : 				r1,
; 712  : 				r2,
; 713  : 				g1,
; 714  : 				g2,
; 715  : 				b1,
; 716  : 				b2,
; 717  : 
; 718  : 
; 719  : 			 image2->point_colours[count].red - image1->point_colours[count].red;
; 720  : 			 image2->point_colours[count].green - image1->point_colours[count].green;
; 721  : 			 image2->point_colours[count].blue - image1->point_colours[count].blue;
; 722  : */
; 723  : 			dr = image2->point_colours[count].red - image1->point_colours[count].red;

  006f8	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  006fb	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  006fe	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  00701	0f b6 44 91 02	 movzx	 eax, BYTE PTR [ecx+edx*4+2]
  00706	8b 4d f8	 mov	 ecx, DWORD PTR _image1$[ebp]
  00709	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0070c	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  0070f	0f b6 54 8a 02	 movzx	 edx, BYTE PTR [edx+ecx*4+2]
  00714	2b c2		 sub	 eax, edx
  00716	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0071a	f3 0f 11 45 e8	 movss	 DWORD PTR _dr$[ebp], xmm0

; 724  : 			dg = image2->point_colours[count].green - image1->point_colours[count].green;

  0071f	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  00722	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00725	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  00728	0f b6 44 91 01	 movzx	 eax, BYTE PTR [ecx+edx*4+1]
  0072d	8b 4d f8	 mov	 ecx, DWORD PTR _image1$[ebp]
  00730	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00733	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  00736	0f b6 54 8a 01	 movzx	 edx, BYTE PTR [edx+ecx*4+1]
  0073b	2b c2		 sub	 eax, edx
  0073d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00741	f3 0f 11 45 e4	 movss	 DWORD PTR _dg$[ebp], xmm0

; 725  : 			db = image2->point_colours[count].blue - image1->point_colours[count].blue;

  00746	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  00749	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0074c	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  0074f	0f b6 04 91	 movzx	 eax, BYTE PTR [ecx+edx*4]
  00753	8b 4d f8	 mov	 ecx, DWORD PTR _image1$[ebp]
  00756	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00759	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  0075c	0f b6 14 8a	 movzx	 edx, BYTE PTR [edx+ecx*4]
  00760	2b c2		 sub	 eax, edx
  00762	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00766	f3 0f 11 45 e0	 movss	 DWORD PTR _db$[ebp], xmm0

; 726  : 
; 727  : 			fr = t1 * dr;

  0076b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _t1$[ebp]
  00770	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _dr$[ebp]
  00775	f3 0f 11 45 9c	 movss	 DWORD PTR _fr$3[ebp], xmm0

; 728  : 			fg = t1 * dg;

  0077a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _t1$[ebp]
  0077f	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _dg$[ebp]
  00784	f3 0f 11 45 98	 movss	 DWORD PTR _fg$2[ebp], xmm0

; 729  : 			fb = t1 * db;

  00789	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _t1$[ebp]
  0078e	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _db$[ebp]
  00793	f3 0f 11 45 94	 movss	 DWORD PTR _fb$1[ebp], xmm0

; 730  : 
; 731  : 			asm_convert_float_to_int ( fr, &ir );

  00798	8d 45 d4	 lea	 eax, DWORD PTR _ir$[ebp]
  0079b	50		 push	 eax
  0079c	51		 push	 ecx
  0079d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _fr$3[ebp]
  007a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a7	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 732  : 			asm_convert_float_to_int ( fg, &ig );

  007ac	8d 45 d0	 lea	 eax, DWORD PTR _ig$[ebp]
  007af	50		 push	 eax
  007b0	51		 push	 ecx
  007b1	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fg$2[ebp]
  007b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bb	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 733  : 			asm_convert_float_to_int ( fb, &ib );

  007c0	8d 45 cc	 lea	 eax, DWORD PTR _ib$[ebp]
  007c3	50		 push	 eax
  007c4	51		 push	 ecx
  007c5	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fb$1[ebp]
  007ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cf	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 734  : 
; 735  : 			env->horizon_point_colours[count].red = image1->point_colours[count].red + ir;

  007d4	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  007d7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  007da	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  007dd	0f b6 44 91 02	 movzx	 eax, BYTE PTR [ecx+edx*4+2]
  007e2	03 45 d4	 add	 eax, DWORD PTR _ir$[ebp]
  007e5	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  007e8	8b 91 ac 02 00
	00		 mov	 edx, DWORD PTR [ecx+684]
  007ee	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  007f1	88 44 8a 02	 mov	 BYTE PTR [edx+ecx*4+2], al

; 736  : 			env->horizon_point_colours[count].green = image1->point_colours[count].green + ig;

  007f5	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  007f8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  007fb	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  007fe	0f b6 44 91 01	 movzx	 eax, BYTE PTR [ecx+edx*4+1]
  00803	03 45 d0	 add	 eax, DWORD PTR _ig$[ebp]
  00806	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  00809	8b 91 ac 02 00
	00		 mov	 edx, DWORD PTR [ecx+684]
  0080f	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  00812	88 44 8a 01	 mov	 BYTE PTR [edx+ecx*4+1], al

; 737  : 			env->horizon_point_colours[count].blue = image1->point_colours[count].blue + ib;

  00816	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  00819	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0081c	8b 55 c8	 mov	 edx, DWORD PTR _count$[ebp]
  0081f	0f b6 04 91	 movzx	 eax, BYTE PTR [ecx+edx*4]
  00823	03 45 cc	 add	 eax, DWORD PTR _ib$[ebp]
  00826	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  00829	8b 91 ac 02 00
	00		 mov	 edx, DWORD PTR [ecx+684]
  0082f	8b 4d c8	 mov	 ecx, DWORD PTR _count$[ebp]
  00832	88 04 8a	 mov	 BYTE PTR [edx+ecx*4], al

; 738  : 		}

  00835	e9 a6 fe ff ff	 jmp	 $LN9@update_3d_
$LN10@update_3d_:

; 739  : 	
; 740  : 		dr = image2->fog_colour.r - image1->fog_colour.r;

  0083a	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  0083d	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  00841	8b 55 f8	 mov	 edx, DWORD PTR _image1$[ebp]
  00844	0f b6 42 0a	 movzx	 eax, BYTE PTR [edx+10]
  00848	2b c8		 sub	 ecx, eax
  0084a	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0084e	f3 0f 11 45 e8	 movss	 DWORD PTR _dr$[ebp], xmm0

; 741  : 		dg = image2->fog_colour.g - image1->fog_colour.g;

  00853	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  00856	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  0085a	8b 55 f8	 mov	 edx, DWORD PTR _image1$[ebp]
  0085d	0f b6 42 09	 movzx	 eax, BYTE PTR [edx+9]
  00861	2b c8		 sub	 ecx, eax
  00863	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00867	f3 0f 11 45 e4	 movss	 DWORD PTR _dg$[ebp], xmm0

; 742  : 		db = image2->fog_colour.b - image1->fog_colour.b;

  0086c	8b 45 f4	 mov	 eax, DWORD PTR _image2$[ebp]
  0086f	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00873	8b 55 f8	 mov	 edx, DWORD PTR _image1$[ebp]
  00876	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  0087a	2b c8		 sub	 ecx, eax
  0087c	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00880	f3 0f 11 45 e0	 movss	 DWORD PTR _db$[ebp], xmm0

; 743  : 
; 744  : 		asm_convert_float_to_int ( ( t1 * dr ), &ir );

  00885	8d 45 d4	 lea	 eax, DWORD PTR _ir$[ebp]
  00888	50		 push	 eax
  00889	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _t1$[ebp]
  0088e	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _dr$[ebp]
  00893	51		 push	 ecx
  00894	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00899	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 745  : 		asm_convert_float_to_int ( ( t1 * dg ), &ig );

  0089e	8d 45 d0	 lea	 eax, DWORD PTR _ig$[ebp]
  008a1	50		 push	 eax
  008a2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _t1$[ebp]
  008a7	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _dg$[ebp]
  008ac	51		 push	 ecx
  008ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b2	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 746  : 		asm_convert_float_to_int ( ( t1 * db ), &ib );

  008b7	8d 45 cc	 lea	 eax, DWORD PTR _ib$[ebp]
  008ba	50		 push	 eax
  008bb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _t1$[ebp]
  008c0	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _db$[ebp]
  008c5	51		 push	 ecx
  008c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008cb	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 747  : 
; 748  : 		env->horizon_3d_fog_colour.r = image1->fog_colour.r + ir;

  008d0	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  008d3	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  008d7	03 4d d4	 add	 ecx, DWORD PTR _ir$[ebp]
  008da	8b 55 08	 mov	 edx, DWORD PTR _env$[ebp]
  008dd	88 8a aa 02 00
	00		 mov	 BYTE PTR [edx+682], cl

; 749  : 		env->horizon_3d_fog_colour.g = image1->fog_colour.g + ig;

  008e3	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  008e6	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  008ea	03 4d d0	 add	 ecx, DWORD PTR _ig$[ebp]
  008ed	8b 55 08	 mov	 edx, DWORD PTR _env$[ebp]
  008f0	88 8a a9 02 00
	00		 mov	 BYTE PTR [edx+681], cl

; 750  : 		env->horizon_3d_fog_colour.b = image1->fog_colour.b + ib;

  008f6	8b 45 f8	 mov	 eax, DWORD PTR _image1$[ebp]
  008f9	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  008fd	03 4d cc	 add	 ecx, DWORD PTR _ib$[ebp]
  00900	8b 55 08	 mov	 edx, DWORD PTR _env$[ebp]
  00903	88 8a a8 02 00
	00		 mov	 BYTE PTR [edx+680], cl
$LN18@update_3d_:

; 751  : 	}
; 752  : }

  00909	5f		 pop	 edi
  0090a	5e		 pop	 esi
  0090b	5b		 pop	 ebx
  0090c	8b e5		 mov	 esp, ebp
  0090e	5d		 pop	 ebp
  0090f	c2 04 00	 ret	 4
?update_3d_horizon@@YGXPAUENV_3D@@@Z ENDP		; update_3d_horizon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?destroy_all_3d_horizon_images@@YGXPAUENV_3D@@@Z
_TEXT	SEGMENT
_this_horizon_image_info$1 = -12			; size = 4
_last_horizon_image_info$2 = -8				; size = 4
_mode$ = -4						; size = 4
_env$ = 8						; size = 4
?destroy_all_3d_horizon_images@@YGXPAUENV_3D@@@Z PROC	; destroy_all_3d_horizon_images, COMDAT

; 432  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 433  : 
; 434  : 	int
; 435  : 		mode;
; 436  : 
; 437  : 	ASSERT ( env );

  00009	83 7d 08 00	 cmp	 DWORD PTR _env$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN7@destroy_al
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??destroy_all_3d_horizon_images@@YGXPAUENV_3D@@@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BIGDBNDP@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03OJGPBPII@env@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@destroy_al:

; 438  : 
; 439  : 	for ( mode = WEATHERMODE_INVALID + 1; mode < WEATHERMODE_LAST; mode++ )

  00027	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _mode$[ebp], 1
  0002e	eb 09		 jmp	 SHORT $LN4@destroy_al
$LN2@destroy_al:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  00033	83 c0 01	 add	 eax, 1
  00036	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax
$LN4@destroy_al:
  00039	83 7d fc 05	 cmp	 DWORD PTR _mode$[ebp], 5
  0003d	7d 4d		 jge	 SHORT $LN1@destroy_al

; 440  : 	{
; 441  : 	
; 442  : 		if ( env->horizon_images_lists[mode] )

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  00045	83 bc 81 bc 02
	00 00 00	 cmp	 DWORD PTR [ecx+eax*4+700], 0
  0004d	74 3b		 je	 SHORT $LN8@destroy_al

; 443  : 		{
; 444  : 
; 445  : 			horizon_image_data
; 446  : 				*last_horizon_image_info,
; 447  : 				*this_horizon_image_info;
; 448  : 
; 449  : 			this_horizon_image_info = env->horizon_images_lists[mode];

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  00055	8b 94 81 bc 02
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+700]
  0005c	89 55 f4	 mov	 DWORD PTR _this_horizon_image_info$1[ebp], edx
$LN5@destroy_al:

; 450  : 
; 451  : 			while ( this_horizon_image_info )

  0005f	83 7d f4 00	 cmp	 DWORD PTR _this_horizon_image_info$1[ebp], 0
  00063	74 25		 je	 SHORT $LN8@destroy_al

; 452  : 			{
; 453  : 
; 454  : 				last_horizon_image_info = this_horizon_image_info;

  00065	8b 45 f4	 mov	 eax, DWORD PTR _this_horizon_image_info$1[ebp]
  00068	89 45 f8	 mov	 DWORD PTR _last_horizon_image_info$2[ebp], eax

; 455  : 
; 456  : 				this_horizon_image_info = this_horizon_image_info->succ;

  0006b	8b 45 f4	 mov	 eax, DWORD PTR _this_horizon_image_info$1[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	89 4d f4	 mov	 DWORD PTR _this_horizon_image_info$1[ebp], ecx

; 457  : 
; 458  : 				safe_free ( last_horizon_image_info->point_colours );

  00073	8b 45 f8	 mov	 eax, DWORD PTR _last_horizon_image_info$2[ebp]
  00076	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 459  : 
; 460  : 				free_mem ( last_horizon_image_info );

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _last_horizon_image_info$2[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 461  : 			}

  00088	eb d5		 jmp	 SHORT $LN5@destroy_al
$LN8@destroy_al:

; 462  : 		}
; 463  : 	}

  0008a	eb a4		 jmp	 SHORT $LN2@destroy_al
$LN1@destroy_al:

; 464  : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
?destroy_all_3d_horizon_images@@YGXPAUENV_3D@@@Z ENDP	; destroy_all_3d_horizon_images
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?add_3d_horizon_image@@YGXPAUENV_3D@@PBDMW4WEATHERMODES@@@Z
_TEXT	SEGMENT
tv289 = -460						; size = 4
tv250 = -460						; size = 4
tv246 = -460						; size = 4
tv290 = -456						; size = 4
tv251 = -456						; size = 4
tv247 = -456						; size = 4
$T1 = -452						; size = 4
$T2 = -448						; size = 4
$T3 = -444						; size = 4
$T4 = -440						; size = 4
$T5 = -436						; size = 4
$T6 = -432						; size = 4
_y$7 = -364						; size = 4
_x$8 = -360						; size = 4
_pointz$9 = -356					; size = 4
_pointy$10 = -352					; size = 4
_pointx$11 = -348					; size = 4
_pitch$12 = -344					; size = 4
_heading$13 = -340					; size = 4
_vector$14 = -336					; size = 12
_zmax$15 = -324						; size = 4
_ymax$16 = -320						; size = 4
_xmax$17 = -316						; size = 4
_fp$ = -312						; size = 4
_binary_filename$ = -308				; size = 256
_horizon_image_info$ = -52				; size = 4
_horizon_image$ = -48					; size = 4
_point_colours$ = -44					; size = 4
_object$ = -40						; size = 4
_maximum_height$ = -36					; size = 4
_horizon_image_height$ = -32				; size = 4
_horizon_image_width$ = -28				; size = 4
_count$ = -24						; size = 4
_bits$ = -20						; size = 4
_binary_loaded$ = -16					; size = 4
_point_count$ = -12					; size = 4
_height$ = -8						; size = 2
_width$ = -4						; size = 2
_env$ = 8						; size = 4
_filename$ = 12						; size = 4
_time$ = 16						; size = 4
_mode$ = 20						; size = 4
?add_3d_horizon_image@@YGXPAUENV_3D@@PBDMW4WEATHERMODES@@@Z PROC ; add_3d_horizon_image, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 01 00
	00		 sub	 esp, 460		; 000001ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 132  : 
; 133  : 	short int
; 134  : 		width,
; 135  : 		height;
; 136  : 
; 137  : 	int
; 138  : 		point_count,
; 139  : 		binary_loaded,
; 140  : 		bits,
; 141  : 		count,
; 142  : 		horizon_image_width,
; 143  : 		horizon_image_height;
; 144  : 
; 145  : 	float
; 146  : 		maximum_height;
; 147  : 
; 148  : 	object_3d
; 149  : 		*object;
; 150  : 
; 151  : 	horizon_colour
; 152  : 		*point_colours;
; 153  : 
; 154  : 	unsigned char
; 155  : 		*horizon_image;
; 156  : 
; 157  : 	horizon_image_data
; 158  : 		*horizon_image_info;
; 159  : 
; 160  : 	char
; 161  : 		binary_filename[256];
; 162  : 
; 163  : 	FILE
; 164  : 		*fp;
; 165  : 
; 166  : 	ASSERT ( env );

  0000c	83 7d 08 00	 cmp	 DWORD PTR _env$[ebp], 0
  00010	75 18		 jne	 SHORT $LN5@add_3d_hor
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??add_3d_horizon_image@@YGXPAUENV_3D@@PBDMW4WEATHERMODES@@@Z@4JA
  00017	83 c0 23	 add	 eax, 35			; 00000023H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BIGDBNDP@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_03OJGPBPII@env@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@add_3d_hor:

; 167  : 
; 168  : 	binary_loaded = FALSE;

  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _binary_loaded$[ebp], 0

; 169  : 
; 170  : 	object = &objects_3d_data[env->horizon_3d_object_number];

  00031	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  00034	6b 88 b4 02 00
	00 68		 imul	 ecx, DWORD PTR [eax+692], 104
  0003b	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00041	89 4d d8	 mov	 DWORD PTR _object$[ebp], ecx

; 171  : 	
; 172  : 	//
; 173  : 	// Check to see if we have a pre-processed version of this file
; 174  : 	//
; 175  : 
; 176  : 	sprintf ( binary_filename, "%s.bin", filename );

  00044	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_06CBAGFBLO@?$CFs?4bin@
  0004d	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _binary_filename$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 _sprintf
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 177  : 
; 178  : 	if ( file_exist ( binary_filename ) )

  0005c	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _binary_filename$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00068	85 c0		 test	 eax, eax
  0006a	0f 84 eb 00 00
	00		 je	 $LN6@add_3d_hor

; 179  : 	{
; 180  : 
; 181  : 		fp = safe_fopen ( binary_filename, "rb" );

  00070	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00075	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _binary_filename$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00081	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _fp$[ebp], eax

; 182  : 
; 183  : 		fread ( &point_count, sizeof ( int ), 1, fp );

  00087	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  0008d	50		 push	 eax
  0008e	6a 01		 push	 1
  00090	6a 04		 push	 4
  00092	8d 4d f4	 lea	 ecx, DWORD PTR _point_count$[ebp]
  00095	51		 push	 ecx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0009c	83 c4 10	 add	 esp, 16			; 00000010H

; 184  : 
; 185  : 		if ( point_count == object->number_of_points )

  0009f	8b 45 d8	 mov	 eax, DWORD PTR _object$[ebp]
  000a2	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000a5	39 4d f4	 cmp	 DWORD PTR _point_count$[ebp], ecx
  000a8	0f 85 9d 00 00
	00		 jne	 $LN7@add_3d_hor

; 186  : 		{
; 187  : 
; 188  : 			binary_loaded = TRUE;

  000ae	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _binary_loaded$[ebp], 1

; 189  : 
; 190  : 			horizon_image_info = ( horizon_image_data * ) malloc_fast_mem ( sizeof ( horizon_image_data ) );

  000b5	6a 10		 push	 16			; 00000010H
  000b7	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  000bc	89 45 cc	 mov	 DWORD PTR _horizon_image_info$[ebp], eax

; 191  : 		
; 192  : 			ASSERT ( horizon_image_info );

  000bf	83 7d cc 00	 cmp	 DWORD PTR _horizon_image_info$[ebp], 0
  000c3	75 18		 jne	 SHORT $LN8@add_3d_hor
  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??add_3d_horizon_image@@YGXPAUENV_3D@@PBDMW4WEATHERMODES@@@Z@4JA
  000ca	83 c0 3d	 add	 eax, 61			; 0000003dH
  000cd	50		 push	 eax
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BIGDBNDP@c?3?2users?2nhv90?2projects?2eech?2mo@
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FIDIBIKE@horizon_image_info@
  000d8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@add_3d_hor:

; 193  : 		
; 194  : 			point_colours = ( horizon_colour * ) safe_malloc ( object->number_of_points * sizeof ( horizon_colour ) );

  000dd	8b 45 d8	 mov	 eax, DWORD PTR _object$[ebp]
  000e0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000e3	c1 e1 02	 shl	 ecx, 2
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000ec	89 45 d4	 mov	 DWORD PTR _point_colours$[ebp], eax

; 195  : 	
; 196  : 			horizon_image_info->point_colours = point_colours;

  000ef	8b 45 cc	 mov	 eax, DWORD PTR _horizon_image_info$[ebp]
  000f2	8b 4d d4	 mov	 ecx, DWORD PTR _point_colours$[ebp]
  000f5	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 197  : 		
; 198  : 			horizon_image_info->time = time;

  000f8	8b 45 cc	 mov	 eax, DWORD PTR _horizon_image_info$[ebp]
  000fb	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _time$[ebp]
  00100	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 199  : 		
; 200  : 			fread ( point_colours, sizeof ( horizon_colour ), point_count, fp );

  00105	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  0010b	50		 push	 eax
  0010c	8b 4d f4	 mov	 ecx, DWORD PTR _point_count$[ebp]
  0010f	51		 push	 ecx
  00110	6a 04		 push	 4
  00112	8b 55 d4	 mov	 edx, DWORD PTR _point_colours$[ebp]
  00115	52		 push	 edx
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0011c	83 c4 10	 add	 esp, 16			; 00000010H

; 201  : 
; 202  : 			fread ( &horizon_image_info->fog_colour, sizeof ( rgb_colour ), 1, fp );

  0011f	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  00125	50		 push	 eax
  00126	6a 01		 push	 1
  00128	6a 04		 push	 4
  0012a	8b 4d cc	 mov	 ecx, DWORD PTR _horizon_image_info$[ebp]
  0012d	83 c1 08	 add	 ecx, 8
  00130	51		 push	 ecx
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00137	83 c4 10	 add	 esp, 16			; 00000010H

; 203  : 
; 204  : 			insert_3d_horizon_image ( env, mode, horizon_image_info );

  0013a	8b 45 cc	 mov	 eax, DWORD PTR _horizon_image_info$[ebp]
  0013d	50		 push	 eax
  0013e	8b 4d 14	 mov	 ecx, DWORD PTR _mode$[ebp]
  00141	51		 push	 ecx
  00142	8b 55 08	 mov	 edx, DWORD PTR _env$[ebp]
  00145	52		 push	 edx
  00146	e8 00 00 00 00	 call	 ?insert_3d_horizon_image@@YGXPAUENV_3D@@W4WEATHERMODES@@PAUHORIZON_IMAGE_DATA@@@Z ; insert_3d_horizon_image
$LN7@add_3d_hor:

; 205  : 		}
; 206  : 
; 207  : 		fclose ( fp );

  0014b	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  00151	50		 push	 eax
  00152	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00158	83 c4 04	 add	 esp, 4
$LN6@add_3d_hor:

; 208  : 	}
; 209  : 
; 210  : 	if ( !binary_loaded )

  0015b	83 7d f0 00	 cmp	 DWORD PTR _binary_loaded$[ebp], 0
  0015f	0f 85 c0 06 00
	00		 jne	 $LN9@add_3d_hor

; 211  : 	{
; 212  : 
; 213  : 		float
; 214  : 			xmax,
; 215  : 			ymax,
; 216  : 			zmax;
; 217  : 
; 218  : 		sprintf ( binary_filename, "%s.tga", filename );

  00165	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00168	50		 push	 eax
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_06NJHCGIDI@?$CFs?4tga@
  0016e	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _binary_filename$[ebp]
  00174	51		 push	 ecx
  00175	e8 00 00 00 00	 call	 _sprintf
  0017a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 219  : 
; 220  : 		horizon_image = ( unsigned char * ) load_tga_file ( binary_filename, &width, &height, &bits );

  0017d	8d 45 ec	 lea	 eax, DWORD PTR _bits$[ebp]
  00180	50		 push	 eax
  00181	8d 4d f8	 lea	 ecx, DWORD PTR _height$[ebp]
  00184	51		 push	 ecx
  00185	8d 55 fc	 lea	 edx, DWORD PTR _width$[ebp]
  00188	52		 push	 edx
  00189	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _binary_filename$[ebp]
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 ?load_tga_file@@YGPAXPBDPAF1PAH@Z ; load_tga_file
  00195	89 45 d0	 mov	 DWORD PTR _horizon_image$[ebp], eax

; 221  : 	
; 222  : 		horizon_image_width = width;

  00198	0f bf 45 fc	 movsx	 eax, WORD PTR _width$[ebp]
  0019c	89 45 e4	 mov	 DWORD PTR _horizon_image_width$[ebp], eax

; 223  : 	
; 224  : 		horizon_image_height = height;

  0019f	0f bf 45 f8	 movsx	 eax, WORD PTR _height$[ebp]
  001a3	89 45 e0	 mov	 DWORD PTR _horizon_image_height$[ebp], eax

; 225  : 	
; 226  : 		if ( bits != 24 )

  001a6	83 7d ec 18	 cmp	 DWORD PTR _bits$[ebp], 24 ; 00000018H
  001aa	74 0d		 je	 SHORT $LN10@add_3d_hor

; 227  : 		{
; 228  : 	
; 229  : 			debug_fatal ( "Unable to read the horizon file - not a 24bit image" );

  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@JDFBJLBO@Unable?5to?5read?5the?5horizon?5file@
  001b1	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  001b6	83 c4 04	 add	 esp, 4
$LN10@add_3d_hor:

; 230  : 		}
; 231  : 	
; 232  : 		point_colours = ( horizon_colour * ) safe_malloc ( object->number_of_points * sizeof ( horizon_colour ) );

  001b9	8b 45 d8	 mov	 eax, DWORD PTR _object$[ebp]
  001bc	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001bf	c1 e1 02	 shl	 ecx, 2
  001c2	51		 push	 ecx
  001c3	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  001c8	89 45 d4	 mov	 DWORD PTR _point_colours$[ebp], eax

; 233  : 	
; 234  : 		if ( !point_colours )

  001cb	83 7d d4 00	 cmp	 DWORD PTR _point_colours$[ebp], 0
  001cf	75 0d		 jne	 SHORT $LN11@add_3d_hor

; 235  : 		{
; 236  : 	
; 237  : 			debug_fatal ( "Unable to malloc enough memory for horizon object" );

  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@ILFGKIKG@Unable?5to?5malloc?5enough?5memory?5@
  001d6	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  001db	83 c4 04	 add	 esp, 4
$LN11@add_3d_hor:

; 238  : 		}
; 239  : 	
; 240  : 		maximum_height = env->horizon_maximum_height;

  001de	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  001e1	f3 0f 10 80 b8
	02 00 00	 movss	 xmm0, DWORD PTR [eax+696]
  001e9	f3 0f 11 45 dc	 movss	 DWORD PTR _maximum_height$[ebp], xmm0

; 241  : 	
; 242  : 		xmax = max ( fabs ( object->bounding_box.xmin ), fabs ( object->bounding_box.xmax ) );

  001ee	8b 45 d8	 mov	 eax, DWORD PTR _object$[ebp]
  001f1	51		 push	 ecx
  001f2	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  001f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fc	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00201	d9 9d 50 fe ff
	ff		 fstp	 DWORD PTR $T6[ebp]
  00207	8b 4d d8	 mov	 ecx, DWORD PTR _object$[ebp]
  0020a	51		 push	 ecx
  0020b	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00210	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00215	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0021a	d9 9d 4c fe ff
	ff		 fstp	 DWORD PTR $T5[ebp]
  00220	8d 95 50 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00226	52		 push	 edx
  00227	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00233	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00237	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _xmax$17[ebp], xmm0

; 243  : 		ymax = max ( fabs ( object->bounding_box.ymin ), fabs ( object->bounding_box.ymax ) );

  0023f	8b 45 d8	 mov	 eax, DWORD PTR _object$[ebp]
  00242	51		 push	 ecx
  00243	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024d	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00252	d9 9d 48 fe ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  00258	8b 4d d8	 mov	 ecx, DWORD PTR _object$[ebp]
  0025b	51		 push	 ecx
  0025c	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00261	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00266	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0026b	d9 9d 44 fe ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  00271	8d 95 48 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00277	52		 push	 edx
  00278	8d 85 44 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0027e	50		 push	 eax
  0027f	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00284	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00288	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _ymax$16[ebp], xmm0

; 244  : 		zmax = max ( fabs ( object->bounding_box.zmin ), fabs ( object->bounding_box.zmax ) );

  00290	8b 45 d8	 mov	 eax, DWORD PTR _object$[ebp]
  00293	51		 push	 ecx
  00294	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00299	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029e	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  002a3	d9 9d 40 fe ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  002a9	8b 4d d8	 mov	 ecx, DWORD PTR _object$[ebp]
  002ac	51		 push	 ecx
  002ad	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  002b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b7	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  002bc	d9 9d 3c fe ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  002c2	8d 95 40 fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  002c8	52		 push	 edx
  002c9	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002d5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002d9	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _zmax$15[ebp], xmm0

; 245  : 
; 246  : 		xmax /= 32767.0;

  002e1	f3 0f 5a 85 c4
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _xmax$17[ebp]
  002e9	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  002f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f5	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _xmax$17[ebp], xmm0

; 247  : 		ymax /= 32767.0;

  002fd	f3 0f 5a 85 c0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _ymax$16[ebp]
  00305	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  0030d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00311	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _ymax$16[ebp], xmm0

; 248  : 		zmax /= 32767.0;

  00319	f3 0f 5a 85 bc
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _zmax$15[ebp]
  00321	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00329	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0032d	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _zmax$15[ebp], xmm0

; 249  : 
; 250  : 		for ( count = 0; count < object->number_of_points; count++ )

  00335	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0033c	eb 09		 jmp	 SHORT $LN4@add_3d_hor
$LN2@add_3d_hor:
  0033e	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  00341	83 c0 01	 add	 eax, 1
  00344	89 45 e8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@add_3d_hor:
  00347	8b 45 d8	 mov	 eax, DWORD PTR _object$[ebp]
  0034a	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0034d	39 4d e8	 cmp	 DWORD PTR _count$[ebp], ecx
  00350	0f 8d 85 03 00
	00		 jge	 $LN3@add_3d_hor

; 251  : 		{
; 252  : 	
; 253  : 			vec3d
; 254  : 				vector;
; 255  : 	
; 256  : 			float
; 257  : 				heading,
; 258  : 				pitch,
; 259  : 				pointx,
; 260  : 				pointy,
; 261  : 				pointz;
; 262  : 	
; 263  : 			int
; 264  : 				x,
; 265  : 				y;
; 266  : 	
; 267  : 			pointx = object->points[count].x;

  00356	6b 45 e8 06	 imul	 eax, DWORD PTR _count$[ebp], 6
  0035a	8b 4d d8	 mov	 ecx, DWORD PTR _object$[ebp]
  0035d	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00360	0f bf 04 02	 movsx	 eax, WORD PTR [edx+eax]
  00364	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00368	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR _pointx$11[ebp], xmm0

; 268  : 			pointy = object->points[count].y;

  00370	6b 45 e8 06	 imul	 eax, DWORD PTR _count$[ebp], 6
  00374	8b 4d d8	 mov	 ecx, DWORD PTR _object$[ebp]
  00377	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0037a	0f bf 44 02 02	 movsx	 eax, WORD PTR [edx+eax+2]
  0037f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00383	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _pointy$10[ebp], xmm0

; 269  : 			pointz = object->points[count].z;

  0038b	6b 45 e8 06	 imul	 eax, DWORD PTR _count$[ebp], 6
  0038f	8b 4d d8	 mov	 ecx, DWORD PTR _object$[ebp]
  00392	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00395	0f bf 44 02 04	 movsx	 eax, WORD PTR [edx+eax+4]
  0039a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0039e	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _pointz$9[ebp], xmm0

; 270  : 
; 271  : 			pointx *= xmax;

  003a6	f3 0f 10 85 a4
	fe ff ff	 movss	 xmm0, DWORD PTR _pointx$11[ebp]
  003ae	f3 0f 59 85 c4
	fe ff ff	 mulss	 xmm0, DWORD PTR _xmax$17[ebp]
  003b6	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR _pointx$11[ebp], xmm0

; 272  : 			pointy *= ymax;

  003be	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR _pointy$10[ebp]
  003c6	f3 0f 59 85 c0
	fe ff ff	 mulss	 xmm0, DWORD PTR _ymax$16[ebp]
  003ce	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _pointy$10[ebp], xmm0

; 273  : 			pointz *= zmax;

  003d6	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR _pointz$9[ebp]
  003de	f3 0f 59 85 bc
	fe ff ff	 mulss	 xmm0, DWORD PTR _zmax$15[ebp]
  003e6	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _pointz$9[ebp], xmm0

; 274  : 	
; 275  : 			vector.x = pointx;

  003ee	f3 0f 10 85 a4
	fe ff ff	 movss	 xmm0, DWORD PTR _pointx$11[ebp]
  003f6	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _vector$14[ebp], xmm0

; 276  : 			vector.y = pointy;

  003fe	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR _pointy$10[ebp]
  00406	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _vector$14[ebp+4], xmm0

; 277  : 			vector.z = pointz;

  0040e	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR _pointz$9[ebp]
  00416	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _vector$14[ebp+8], xmm0

; 278  : 	
; 279  : 			normalise_any_3d_vector ( &vector );

  0041e	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _vector$14[ebp]
  00424	50		 push	 eax
  00425	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  0042a	dd d8		 fstp	 ST(0)

; 280  : 	
; 281  : 			heading = atan2 ( vector.x, vector.z );

  0042c	51		 push	 ecx
  0042d	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _vector$14[ebp+8]
  00435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043a	51		 push	 ecx
  0043b	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _vector$14[ebp]
  00443	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00448	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0044d	d9 9d ac fe ff
	ff		 fstp	 DWORD PTR _heading$13[ebp]

; 282  : 	
; 283  : 			if ( heading < 0 )

  00453	0f 57 c0	 xorps	 xmm0, xmm0
  00456	0f 2f 85 ac fe
	ff ff		 comiss	 xmm0, DWORD PTR _heading$13[ebp]
  0045d	76 20		 jbe	 SHORT $LN12@add_3d_hor

; 284  : 			{
; 285  : 	
; 286  : 				heading = PI + ( PI + heading );

  0045f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  00467	f3 0f 58 85 ac
	fe ff ff	 addss	 xmm0, DWORD PTR _heading$13[ebp]
  0046f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40490fdb
  00477	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _heading$13[ebp], xmm0
$LN12@add_3d_hor:

; 287  : 			}
; 288  : 	
; 289  : 			pitch = asin ( vector.y );

  0047f	51		 push	 ecx
  00480	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _vector$14[ebp+4]
  00488	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048d	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  00492	d9 9d a8 fe ff
	ff		 fstp	 DWORD PTR _pitch$12[ebp]

; 290  : 	
; 291  : 			pitch = bound ( pitch, 0, ( PI/2 ) );

  00498	0f 57 c0	 xorps	 xmm0, xmm0
  0049b	0f 2f 85 a8 fe
	ff ff		 comiss	 xmm0, DWORD PTR _pitch$12[ebp]
  004a2	76 0d		 jbe	 SHORT $LN17@add_3d_hor
  004a4	0f 57 c0	 xorps	 xmm0, xmm0
  004a7	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR tv247[ebp], xmm0
  004af	eb 43		 jmp	 SHORT $LN18@add_3d_hor
$LN17@add_3d_hor:
  004b1	f3 0f 10 85 a8
	fe ff ff	 movss	 xmm0, DWORD PTR _pitch$12[ebp]
  004b9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3fc90fdb
  004c0	76 12		 jbe	 SHORT $LN15@add_3d_hor
  004c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  004ca	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR tv246[ebp], xmm0
  004d2	eb 10		 jmp	 SHORT $LN16@add_3d_hor
$LN15@add_3d_hor:
  004d4	f3 0f 10 85 a8
	fe ff ff	 movss	 xmm0, DWORD PTR _pitch$12[ebp]
  004dc	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR tv246[ebp], xmm0
$LN16@add_3d_hor:
  004e4	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR tv246[ebp]
  004ec	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR tv247[ebp], xmm0
$LN18@add_3d_hor:
  004f4	f3 0f 10 85 38
	fe ff ff	 movss	 xmm0, DWORD PTR tv247[ebp]
  004fc	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _pitch$12[ebp], xmm0

; 292  : 	
; 293  : 			heading = bound ( heading, 0, ( PI*2 ) );

  00504	0f 57 c0	 xorps	 xmm0, xmm0
  00507	0f 2f 85 ac fe
	ff ff		 comiss	 xmm0, DWORD PTR _heading$13[ebp]
  0050e	76 0d		 jbe	 SHORT $LN21@add_3d_hor
  00510	0f 57 c0	 xorps	 xmm0, xmm0
  00513	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR tv251[ebp], xmm0
  0051b	eb 43		 jmp	 SHORT $LN22@add_3d_hor
$LN21@add_3d_hor:
  0051d	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _heading$13[ebp]
  00525	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40c90fdb
  0052c	76 12		 jbe	 SHORT $LN19@add_3d_hor
  0052e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00536	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR tv250[ebp], xmm0
  0053e	eb 10		 jmp	 SHORT $LN20@add_3d_hor
$LN19@add_3d_hor:
  00540	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _heading$13[ebp]
  00548	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR tv250[ebp], xmm0
$LN20@add_3d_hor:
  00550	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR tv250[ebp]
  00558	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR tv251[ebp], xmm0
$LN22@add_3d_hor:
  00560	f3 0f 10 85 38
	fe ff ff	 movss	 xmm0, DWORD PTR tv251[ebp]
  00568	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _heading$13[ebp], xmm0

; 294  : 	
; 295  : 			heading /= ( PI * 2 );

  00570	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _heading$13[ebp]
  00578	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40c90fdb
  00580	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _heading$13[ebp], xmm0

; 296  : 	
; 297  : 			pitch /= ( PI / 2 );

  00588	f3 0f 10 85 a8
	fe ff ff	 movss	 xmm0, DWORD PTR _pitch$12[ebp]
  00590	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@3fc90fdb
  00598	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _pitch$12[ebp], xmm0

; 298  : 	
; 299  : 			pitch = pointy / maximum_height;	//( ( float ) object->points[count].y ) / 65535.0;

  005a0	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR _pointy$10[ebp]
  005a8	f3 0f 5e 45 dc	 divss	 xmm0, DWORD PTR _maximum_height$[ebp]
  005ad	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _pitch$12[ebp], xmm0

; 300  : 	
; 301  : 			pitch = bound ( pitch, 0, 1 );

  005b5	0f 57 c0	 xorps	 xmm0, xmm0
  005b8	0f 2f 85 a8 fe
	ff ff		 comiss	 xmm0, DWORD PTR _pitch$12[ebp]
  005bf	76 0d		 jbe	 SHORT $LN25@add_3d_hor
  005c1	0f 57 c0	 xorps	 xmm0, xmm0
  005c4	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR tv290[ebp], xmm0
  005cc	eb 43		 jmp	 SHORT $LN26@add_3d_hor
$LN25@add_3d_hor:
  005ce	f3 0f 10 85 a8
	fe ff ff	 movss	 xmm0, DWORD PTR _pitch$12[ebp]
  005d6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  005dd	76 12		 jbe	 SHORT $LN23@add_3d_hor
  005df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005e7	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR tv289[ebp], xmm0
  005ef	eb 10		 jmp	 SHORT $LN24@add_3d_hor
$LN23@add_3d_hor:
  005f1	f3 0f 10 85 a8
	fe ff ff	 movss	 xmm0, DWORD PTR _pitch$12[ebp]
  005f9	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR tv289[ebp], xmm0
$LN24@add_3d_hor:
  00601	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR tv289[ebp]
  00609	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR tv290[ebp], xmm0
$LN26@add_3d_hor:
  00611	f3 0f 10 85 38
	fe ff ff	 movss	 xmm0, DWORD PTR tv290[ebp]
  00619	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _pitch$12[ebp], xmm0

; 302  : 	
; 303  : 			x = heading * ( width - 1 );

  00621	0f bf 45 fc	 movsx	 eax, WORD PTR _width$[ebp]
  00625	83 e8 01	 sub	 eax, 1
  00628	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0062c	f3 0f 59 85 ac
	fe ff ff	 mulss	 xmm0, DWORD PTR _heading$13[ebp]
  00634	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00638	89 8d 98 fe ff
	ff		 mov	 DWORD PTR _x$8[ebp], ecx

; 304  : 	
; 305  : 			y = pitch * ( height - 1 );

  0063e	0f bf 45 f8	 movsx	 eax, WORD PTR _height$[ebp]
  00642	83 e8 01	 sub	 eax, 1
  00645	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00649	f3 0f 59 85 a8
	fe ff ff	 mulss	 xmm0, DWORD PTR _pitch$12[ebp]
  00651	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00655	89 8d 94 fe ff
	ff		 mov	 DWORD PTR _y$7[ebp], ecx

; 306  : 	
; 307  : 			point_colours[count].red = ( unsigned char ) horizon_image[x*3 + y*3*width + 2];

  0065b	6b 85 98 fe ff
	ff 03		 imul	 eax, DWORD PTR _x$8[ebp], 3
  00662	6b 8d 94 fe ff
	ff 03		 imul	 ecx, DWORD PTR _y$7[ebp], 3
  00669	0f bf 55 fc	 movsx	 edx, WORD PTR _width$[ebp]
  0066d	0f af ca	 imul	 ecx, edx
  00670	03 4d d0	 add	 ecx, DWORD PTR _horizon_image$[ebp]
  00673	8b 55 e8	 mov	 edx, DWORD PTR _count$[ebp]
  00676	8b 75 d4	 mov	 esi, DWORD PTR _point_colours$[ebp]
  00679	8a 44 01 02	 mov	 al, BYTE PTR [ecx+eax+2]
  0067d	88 44 96 02	 mov	 BYTE PTR [esi+edx*4+2], al

; 308  : 			point_colours[count].green = ( unsigned char ) horizon_image[x*3 + y*3*width + 1];

  00681	6b 85 98 fe ff
	ff 03		 imul	 eax, DWORD PTR _x$8[ebp], 3
  00688	6b 8d 94 fe ff
	ff 03		 imul	 ecx, DWORD PTR _y$7[ebp], 3
  0068f	0f bf 55 fc	 movsx	 edx, WORD PTR _width$[ebp]
  00693	0f af ca	 imul	 ecx, edx
  00696	03 4d d0	 add	 ecx, DWORD PTR _horizon_image$[ebp]
  00699	8b 55 e8	 mov	 edx, DWORD PTR _count$[ebp]
  0069c	8b 75 d4	 mov	 esi, DWORD PTR _point_colours$[ebp]
  0069f	8a 44 01 01	 mov	 al, BYTE PTR [ecx+eax+1]
  006a3	88 44 96 01	 mov	 BYTE PTR [esi+edx*4+1], al

; 309  : 			point_colours[count].blue = ( unsigned char ) horizon_image[x*3 + y*3*width + 0];

  006a7	6b 85 98 fe ff
	ff 03		 imul	 eax, DWORD PTR _x$8[ebp], 3
  006ae	6b 8d 94 fe ff
	ff 03		 imul	 ecx, DWORD PTR _y$7[ebp], 3
  006b5	0f bf 55 fc	 movsx	 edx, WORD PTR _width$[ebp]
  006b9	0f af ca	 imul	 ecx, edx
  006bc	03 4d d0	 add	 ecx, DWORD PTR _horizon_image$[ebp]
  006bf	8b 55 e8	 mov	 edx, DWORD PTR _count$[ebp]
  006c2	8b 75 d4	 mov	 esi, DWORD PTR _point_colours$[ebp]
  006c5	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]
  006c8	88 04 96	 mov	 BYTE PTR [esi+edx*4], al

; 310  : 			point_colours[count].pad = 0;

  006cb	8b 45 e8	 mov	 eax, DWORD PTR _count$[ebp]
  006ce	8b 4d d4	 mov	 ecx, DWORD PTR _point_colours$[ebp]
  006d1	c6 44 81 03 00	 mov	 BYTE PTR [ecx+eax*4+3], 0

; 311  : 		}

  006d6	e9 63 fc ff ff	 jmp	 $LN2@add_3d_hor
$LN3@add_3d_hor:

; 312  : 	
; 313  : 		horizon_image_info = ( horizon_image_data * ) malloc_fast_mem ( sizeof ( horizon_image_data ) );

  006db	6a 10		 push	 16			; 00000010H
  006dd	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  006e2	89 45 cc	 mov	 DWORD PTR _horizon_image_info$[ebp], eax

; 314  : 	
; 315  : 		ASSERT ( horizon_image_info );

  006e5	83 7d cc 00	 cmp	 DWORD PTR _horizon_image_info$[ebp], 0
  006e9	75 1a		 jne	 SHORT $LN13@add_3d_hor
  006eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??add_3d_horizon_image@@YGXPAUENV_3D@@PBDMW4WEATHERMODES@@@Z@4JA
  006f0	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  006f5	50		 push	 eax
  006f6	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BIGDBNDP@c?3?2users?2nhv90?2projects?2eech?2mo@
  006fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FIDIBIKE@horizon_image_info@
  00700	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@add_3d_hor:

; 316  : 	
; 317  : 	
; 318  : 		horizon_image_info->point_colours = point_colours;

  00705	8b 45 cc	 mov	 eax, DWORD PTR _horizon_image_info$[ebp]
  00708	8b 4d d4	 mov	 ecx, DWORD PTR _point_colours$[ebp]
  0070b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 319  : 	
; 320  : 		horizon_image_info->time = time;

  0070e	8b 45 cc	 mov	 eax, DWORD PTR _horizon_image_info$[ebp]
  00711	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _time$[ebp]
  00716	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 321  : 	
; 322  : 		horizon_image_info->fog_colour.r = horizon_image[ ( ( height -1 ) * 3 ) + 2 ];

  0071b	0f bf 45 f8	 movsx	 eax, WORD PTR _height$[ebp]
  0071f	83 e8 01	 sub	 eax, 1
  00722	6b c8 03	 imul	 ecx, eax, 3
  00725	8b 55 cc	 mov	 edx, DWORD PTR _horizon_image_info$[ebp]
  00728	8b 45 d0	 mov	 eax, DWORD PTR _horizon_image$[ebp]
  0072b	8a 4c 08 02	 mov	 cl, BYTE PTR [eax+ecx+2]
  0072f	88 4a 0a	 mov	 BYTE PTR [edx+10], cl

; 323  : 		horizon_image_info->fog_colour.g = horizon_image[ ( ( height -1 ) * 3 ) + 1 ];

  00732	0f bf 45 f8	 movsx	 eax, WORD PTR _height$[ebp]
  00736	83 e8 01	 sub	 eax, 1
  00739	6b c8 03	 imul	 ecx, eax, 3
  0073c	8b 55 cc	 mov	 edx, DWORD PTR _horizon_image_info$[ebp]
  0073f	8b 45 d0	 mov	 eax, DWORD PTR _horizon_image$[ebp]
  00742	8a 4c 08 01	 mov	 cl, BYTE PTR [eax+ecx+1]
  00746	88 4a 09	 mov	 BYTE PTR [edx+9], cl

; 324  : 		horizon_image_info->fog_colour.b = horizon_image[ ( ( height -1 ) * 3 ) + 0 ];

  00749	0f bf 45 f8	 movsx	 eax, WORD PTR _height$[ebp]
  0074d	83 e8 01	 sub	 eax, 1
  00750	6b c8 03	 imul	 ecx, eax, 3
  00753	8b 55 cc	 mov	 edx, DWORD PTR _horizon_image_info$[ebp]
  00756	8b 45 d0	 mov	 eax, DWORD PTR _horizon_image$[ebp]
  00759	8a 0c 08	 mov	 cl, BYTE PTR [eax+ecx]
  0075c	88 4a 08	 mov	 BYTE PTR [edx+8], cl

; 325  : 	
; 326  : 		insert_3d_horizon_image ( env, mode, horizon_image_info );

  0075f	8b 45 cc	 mov	 eax, DWORD PTR _horizon_image_info$[ebp]
  00762	50		 push	 eax
  00763	8b 4d 14	 mov	 ecx, DWORD PTR _mode$[ebp]
  00766	51		 push	 ecx
  00767	8b 55 08	 mov	 edx, DWORD PTR _env$[ebp]
  0076a	52		 push	 edx
  0076b	e8 00 00 00 00	 call	 ?insert_3d_horizon_image@@YGXPAUENV_3D@@W4WEATHERMODES@@PAUHORIZON_IMAGE_DATA@@@Z ; insert_3d_horizon_image

; 327  : 	
; 328  : 		safe_free ( horizon_image );

  00770	8b 45 d0	 mov	 eax, DWORD PTR _horizon_image$[ebp]
  00773	50		 push	 eax
  00774	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 329  : 
; 330  : 		//
; 331  : 		// Now write out the binary file
; 332  : 		//
; 333  : 
; 334  : 		sprintf ( binary_filename, "%s.bin", filename );

  00779	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  0077c	50		 push	 eax
  0077d	68 00 00 00 00	 push	 OFFSET ??_C@_06CBAGFBLO@?$CFs?4bin@
  00782	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _binary_filename$[ebp]
  00788	51		 push	 ecx
  00789	e8 00 00 00 00	 call	 _sprintf
  0078e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 335  : 
; 336  : 		debug_log ( "Writing binary horizon file: %s", binary_filename );

  00791	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _binary_filename$[ebp]
  00797	50		 push	 eax
  00798	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PPPDNBHD@Writing?5binary?5horizon?5file?3?5?$CFs@
  0079d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  007a2	83 c4 08	 add	 esp, 8

; 337  : 
; 338  : 		fp = safe_fopen ( binary_filename, "wb" );

  007a5	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  007aa	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _binary_filename$[ebp]
  007b0	50		 push	 eax
  007b1	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  007b6	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _fp$[ebp], eax

; 339  : 
; 340  : 		point_count = object->number_of_points;

  007bc	8b 45 d8	 mov	 eax, DWORD PTR _object$[ebp]
  007bf	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  007c2	89 4d f4	 mov	 DWORD PTR _point_count$[ebp], ecx

; 341  : 
; 342  : 		fwrite ( &point_count, sizeof ( int ), 1, fp );

  007c5	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  007cb	50		 push	 eax
  007cc	6a 01		 push	 1
  007ce	6a 04		 push	 4
  007d0	8d 4d f4	 lea	 ecx, DWORD PTR _point_count$[ebp]
  007d3	51		 push	 ecx
  007d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  007da	83 c4 10	 add	 esp, 16			; 00000010H

; 343  : 
; 344  : 		fwrite ( point_colours, sizeof ( horizon_colour ), object->number_of_points, fp );

  007dd	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  007e3	50		 push	 eax
  007e4	8b 4d d8	 mov	 ecx, DWORD PTR _object$[ebp]
  007e7	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  007ea	52		 push	 edx
  007eb	6a 04		 push	 4
  007ed	8b 45 d4	 mov	 eax, DWORD PTR _point_colours$[ebp]
  007f0	50		 push	 eax
  007f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  007f7	83 c4 10	 add	 esp, 16			; 00000010H

; 345  : 
; 346  : 		fwrite ( &horizon_image_info->fog_colour, sizeof ( rgb_colour ), 1, fp );

  007fa	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  00800	50		 push	 eax
  00801	6a 01		 push	 1
  00803	6a 04		 push	 4
  00805	8b 4d cc	 mov	 ecx, DWORD PTR _horizon_image_info$[ebp]
  00808	83 c1 08	 add	 ecx, 8
  0080b	51		 push	 ecx
  0080c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00812	83 c4 10	 add	 esp, 16			; 00000010H

; 347  : 
; 348  : 		fclose ( fp );

  00815	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _fp$[ebp]
  0081b	50		 push	 eax
  0081c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00822	83 c4 04	 add	 esp, 4
$LN9@add_3d_hor:

; 349  : 	}
; 350  : }

  00825	5f		 pop	 edi
  00826	5e		 pop	 esi
  00827	5b		 pop	 ebx
  00828	8b e5		 mov	 esp, ebp
  0082a	5d		 pop	 ebp
  0082b	c2 10 00	 ret	 16			; 00000010H
?add_3d_horizon_image@@YGXPAUENV_3D@@PBDMW4WEATHERMODES@@@Z ENDP ; add_3d_horizon_image
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dhoriz.c
;	COMDAT ?initialise_3d_horizon@@YGXPAUENV_3D@@H@Z
_TEXT	SEGMENT
_maximum_height$ = -12					; size = 4
_count$ = -8						; size = 4
_object$ = -4						; size = 4
_env$ = 8						; size = 4
_index$ = 12						; size = 4
?initialise_3d_horizon@@YGXPAUENV_3D@@H@Z PROC		; initialise_3d_horizon, COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 91   : 
; 92   : 	object_3d
; 93   : 		*object;
; 94   : 
; 95   : 	int
; 96   : 		count;
; 97   : 
; 98   : 	float
; 99   : 		maximum_height;
; 100  : 
; 101  : 	env->horizon_3d_scene_index = index;

  00009	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _index$[ebp]
  0000f	89 88 b0 02 00
	00		 mov	 DWORD PTR [eax+688], ecx

; 102  : 
; 103  : 	env->horizon_3d_object_number = objects_3d_scene_database[index].index;

  00015	69 45 0c e0 00
	00 00		 imul	 eax, DWORD PTR _index$[ebp], 224
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  0001f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00025	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00028	89 81 b4 02 00
	00		 mov	 DWORD PTR [ecx+692], eax

; 104  : 
; 105  : 	for ( count = 0; count < WEATHERMODE_LAST; count++ )

  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00035	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00037	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0003a	83 c0 01	 add	 eax, 1
  0003d	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  00040	83 7d f8 05	 cmp	 DWORD PTR _count$[ebp], 5
  00044	7d 13		 jge	 SHORT $LN3@initialise

; 106  : 	{
; 107  : 
; 108  : 		env->horizon_images_lists[count] = NULL;

  00046	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _env$[ebp]
  0004c	c7 84 81 bc 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+700], 0

; 109  : 	}

  00057	eb de		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 110  : 
; 111  : 	object = &objects_3d_data[env->horizon_3d_object_number];

  00059	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  0005c	6b 88 b4 02 00
	00 68		 imul	 ecx, DWORD PTR [eax+692], 104
  00063	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00069	89 4d fc	 mov	 DWORD PTR _object$[ebp], ecx

; 112  : 
; 113  : 	env->horizon_point_colours = ( horizon_colour * ) safe_malloc ( object->number_of_points * sizeof ( horizon_colour ) );

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _object$[ebp]
  0006f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00072	c1 e1 02	 shl	 ecx, 2
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0007b	8b 55 08	 mov	 edx, DWORD PTR _env$[ebp]
  0007e	89 82 ac 02 00
	00		 mov	 DWORD PTR [edx+684], eax

; 114  : 
; 115  : 	if ( !env->horizon_point_colours )

  00084	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  00087	83 b8 ac 02 00
	00 00		 cmp	 DWORD PTR [eax+684], 0
  0008e	75 0d		 jne	 SHORT $LN5@initialise

; 116  : 	{
; 117  : 
; 118  : 		debug_fatal ( "Unable to malloc enough memory for horizon object" );

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@ILFGKIKG@Unable?5to?5malloc?5enough?5memory?5@
  00095	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0009a	83 c4 04	 add	 esp, 4
$LN5@initialise:

; 119  : 	}
; 120  : 
; 121  : 	maximum_height = object->bounding_box.ymax;

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _object$[ebp]
  000a0	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  000a5	f3 0f 11 45 f4	 movss	 DWORD PTR _maximum_height$[ebp], xmm0

; 122  : 
; 123  : 	env->horizon_maximum_height = maximum_height;

  000aa	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  000ad	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _maximum_height$[ebp]
  000b2	f3 0f 11 80 b8
	02 00 00	 movss	 DWORD PTR [eax+696], xmm0

; 124  : }

  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
?initialise_3d_horizon@@YGXPAUENV_3D@@H@Z ENDP		; initialise_3d_horizon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\fpu.h
;	COMDAT ?asm_convert_float_to_int@@YGXMPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_integer$ = 12						; size = 4
?asm_convert_float_to_int@@YGXMPAH@Z PROC		; asm_convert_float_to_int, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 
; 132  : 	__asm
; 133  : 	{
; 134  : 
; 135  : 		fld value

  00009	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 136  : 		mov edx, integer

  0000c	8b 55 0c	 mov	 edx, DWORD PTR _integer$[ebp]

; 137  : 		fistp dword ptr [edx]

  0000f	db 1a		 fistp	 DWORD PTR [edx]

; 138  : 	}
; 139  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?asm_convert_float_to_int@@YGXMPAH@Z ENDP		; asm_convert_float_to_int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
