; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\sound\dirsound.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?dsound@@3PAUIDirectSound@@A			; dsound
PUBLIC	?dsound_primary_buffer@@3PAUIDirectSoundBuffer@@A ; dsound_primary_buffer
PUBLIC	?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
PUBLIC	??_C@_0BA@COPOGMBA@DSERR_ALLOCATED@		; `string'
PUBLIC	??_C@_0BF@KBGGCPDE@DSERR_CONTROLUNAVAIL@	; `string'
PUBLIC	??_C@_0BD@MODBPMIE@DSERR_INVALIDPARAM@		; `string'
PUBLIC	??_C@_0BC@NMCDDLDP@DSERR_INVALIDCALL@		; `string'
PUBLIC	??_C@_0O@PDIJJBF@DSERR_GENERIC@			; `string'
PUBLIC	??_C@_0BG@FGFOLLAI@DSERR_PRIOLEVELNEEDED@	; `string'
PUBLIC	??_C@_0BC@KCMPJMLN@DSERR_OUTOFMEMORY@		; `string'
PUBLIC	??_C@_0BA@ECKDOBJD@DSERR_BADFORMAT@		; `string'
PUBLIC	??_C@_0BC@IMOOOGNJ@DSERR_UNSUPPORTED@		; `string'
PUBLIC	??_C@_0P@HJFILJLC@DSERR_NODRIVER@		; `string'
PUBLIC	??_C@_0BJ@PODLOCNP@DSERR_ALREADYINITIALIZED@	; `string'
PUBLIC	??_C@_0BE@FNFJCFJP@DSERR_NOAGGREGATION@		; `string'
PUBLIC	??_C@_0BB@MLKAOHBD@DSERR_BUFFERLOST@		; `string'
PUBLIC	??_C@_0BG@JFJBCEJM@DSERR_OTHERAPPHASPRIO@	; `string'
PUBLIC	??_C@_0BE@BMJCAPGM@DSERR_UNINITIALIZED@		; `string'
PUBLIC	??_C@_0CC@FJCEEPPE@DS_OK?5?9?5should?5not?5have?5got?5her@ ; `string'
_BSS	SEGMENT
?dsound@@3PAUIDirectSound@@A DD 01H DUP (?)		; dsound
?dsound_primary_buffer@@3PAUIDirectSoundBuffer@@A DD 01H DUP (?) ; dsound_primary_buffer
?d3dsound_listener@@3PAUIDirectSound3DListener@@A DD 01H DUP (?) ; d3dsound_listener
_BSS	ENDS
;	COMDAT ??_C@_0CC@FJCEEPPE@DS_OK?5?9?5should?5not?5have?5got?5her@
CONST	SEGMENT
??_C@_0CC@FJCEEPPE@DS_OK?5?9?5should?5not?5have?5got?5her@ DB 'DS_OK - sh'
	DB	'ould not have got here!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BMJCAPGM@DSERR_UNINITIALIZED@
CONST	SEGMENT
??_C@_0BE@BMJCAPGM@DSERR_UNINITIALIZED@ DB 'DSERR_UNINITIALIZED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JFJBCEJM@DSERR_OTHERAPPHASPRIO@
CONST	SEGMENT
??_C@_0BG@JFJBCEJM@DSERR_OTHERAPPHASPRIO@ DB 'DSERR_OTHERAPPHASPRIO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MLKAOHBD@DSERR_BUFFERLOST@
CONST	SEGMENT
??_C@_0BB@MLKAOHBD@DSERR_BUFFERLOST@ DB 'DSERR_BUFFERLOST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FNFJCFJP@DSERR_NOAGGREGATION@
CONST	SEGMENT
??_C@_0BE@FNFJCFJP@DSERR_NOAGGREGATION@ DB 'DSERR_NOAGGREGATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PODLOCNP@DSERR_ALREADYINITIALIZED@
CONST	SEGMENT
??_C@_0BJ@PODLOCNP@DSERR_ALREADYINITIALIZED@ DB 'DSERR_ALREADYINITIALIZED'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HJFILJLC@DSERR_NODRIVER@
CONST	SEGMENT
??_C@_0P@HJFILJLC@DSERR_NODRIVER@ DB 'DSERR_NODRIVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMOOOGNJ@DSERR_UNSUPPORTED@
CONST	SEGMENT
??_C@_0BC@IMOOOGNJ@DSERR_UNSUPPORTED@ DB 'DSERR_UNSUPPORTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ECKDOBJD@DSERR_BADFORMAT@
CONST	SEGMENT
??_C@_0BA@ECKDOBJD@DSERR_BADFORMAT@ DB 'DSERR_BADFORMAT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KCMPJMLN@DSERR_OUTOFMEMORY@
CONST	SEGMENT
??_C@_0BC@KCMPJMLN@DSERR_OUTOFMEMORY@ DB 'DSERR_OUTOFMEMORY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FGFOLLAI@DSERR_PRIOLEVELNEEDED@
CONST	SEGMENT
??_C@_0BG@FGFOLLAI@DSERR_PRIOLEVELNEEDED@ DB 'DSERR_PRIOLEVELNEEDED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PDIJJBF@DSERR_GENERIC@
CONST	SEGMENT
??_C@_0O@PDIJJBF@DSERR_GENERIC@ DB 'DSERR_GENERIC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NMCDDLDP@DSERR_INVALIDCALL@
CONST	SEGMENT
??_C@_0BC@NMCDDLDP@DSERR_INVALIDCALL@ DB 'DSERR_INVALIDCALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MODBPMIE@DSERR_INVALIDPARAM@
CONST	SEGMENT
??_C@_0BD@MODBPMIE@DSERR_INVALIDPARAM@ DB 'DSERR_INVALIDPARAM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KBGGCPDE@DSERR_CONTROLUNAVAIL@
CONST	SEGMENT
??_C@_0BF@KBGGCPDE@DSERR_CONTROLUNAVAIL@ DB 'DSERR_CONTROLUNAVAIL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@COPOGMBA@DSERR_ALLOCATED@
CONST	SEGMENT
??_C@_0BA@COPOGMBA@DSERR_ALLOCATED@ DB 'DSERR_ALLOCATED', 00H ; `string'
CONST	ENDS
PUBLIC	?get_dsound_error_message@@YGPBDJ@Z		; get_dsound_error_message
PUBLIC	?initialise_direct_sound@@YGHXZ			; initialise_direct_sound
PUBLIC	?dsound_create_sound_buffer@@YGPAUIDirectSoundBuffer@@W4SAMPLE_TYPES@@HH@Z ; dsound_create_sound_buffer
PUBLIC	?dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU1@H@Z ; dsound_duplicate_sound_buffer
PUBLIC	?dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z ; dsound_destroy_sound_buffer
PUBLIC	?dsound_initialise@@YGHXZ			; dsound_initialise
PUBLIC	??_C@_0CJ@KICKFAGD@Unable?5to?5create?5direct?5sound?5o@ ; `string'
PUBLIC	??_C@_0DB@MCMPDCA@Unable?5to?5set?5direct?5sound?5coop@ ; `string'
PUBLIC	??_C@_0CK@MBJCNFAH@Unable?5to?5create?5primary?5sound?5@ ; `string'
PUBLIC	??_C@_0CL@JAJGNLDF@Unknown?5sample?5type?5in?5create_s@ ; `string'
PUBLIC	??_C@_0CP@OPBLHDNG@Unable?5to?5create?5sound?5buffer?3?5@ ; `string'
PUBLIC	?__LINE__Var@?0??dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU2@H@Z@4JA ; `dsound_duplicate_sound_buffer'::`1'::__LINE__Var
PUBLIC	??_C@_0DG@ILPNPGIC@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer@			; `string'
PUBLIC	??_C@_0BJ@IFCFIHJI@Unable?5to?5get?5format?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0DI@OGDNDJOJ@Unable?5to?5create?5hardware?5sound@ ; `string'
PUBLIC	??_C@_0CF@NJCHJOPA@Unable?5to?5duplicate?5sound?5buffe@ ; `string'
PUBLIC	?__LINE__Var@?0??dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z@4JA ; `dsound_destroy_sound_buffer'::`1'::__LINE__Var
PUBLIC	??_C@_0CF@GFJPIPBN@Unable?5to?5destroy?5a?5sound?5buffe@ ; `string'
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?register_exit_function@@YGXP6GXXZ@Z:PROC	; register_exit_function
EXTRN	?register_post_activate_message_function@@YGHP6GXH@Z@Z:PROC ; register_post_activate_message_function
EXTRN	?set_fpu_rounding_mode_zero@@YGXXZ:PROC		; set_fpu_rounding_mode_zero
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	_DirectSoundCreate@12:PROC
EXTRN	?dsound_lock_sound_buffer@@YGPAEPAUIDirectSoundBuffer@@HH@Z:PROC ; dsound_lock_sound_buffer
EXTRN	?dsound_unlock_sound_buffer@@YGHPAUIDirectSoundBuffer@@PAEH@Z:PROC ; dsound_unlock_sound_buffer
EXTRN	?application_window@@3PAUHWND__@@A:DWORD	; application_window
EXTRN	?command_line_sound_hdwrbuf@@3HA:DWORD		; command_line_sound_hdwrbuf
_BSS	SEGMENT
?direct_sound_initialised@?1??initialise_direct_sound@@YGHXZ@4HA DD 01H DUP (?) ; `initialise_direct_sound'::`2'::direct_sound_initialised
_BSS	ENDS
_DATA	SEGMENT
?dsound_error_table@@3PAUDSOUND_ERROR_MESSAGE@@A DD 08878000aH ; dsound_error_table
	DD	FLAT:??_C@_0BA@COPOGMBA@DSERR_ALLOCATED@
	DD	08878001eH
	DD	FLAT:??_C@_0BF@KBGGCPDE@DSERR_CONTROLUNAVAIL@
	DD	080070057H
	DD	FLAT:??_C@_0BD@MODBPMIE@DSERR_INVALIDPARAM@
	DD	088780032H
	DD	FLAT:??_C@_0BC@NMCDDLDP@DSERR_INVALIDCALL@
	DD	080004005H
	DD	FLAT:??_C@_0O@PDIJJBF@DSERR_GENERIC@
	DD	088780046H
	DD	FLAT:??_C@_0BG@FGFOLLAI@DSERR_PRIOLEVELNEEDED@
	DD	08007000eH
	DD	FLAT:??_C@_0BC@KCMPJMLN@DSERR_OUTOFMEMORY@
	DD	088780064H
	DD	FLAT:??_C@_0BA@ECKDOBJD@DSERR_BADFORMAT@
	DD	080004001H
	DD	FLAT:??_C@_0BC@IMOOOGNJ@DSERR_UNSUPPORTED@
	DD	088780078H
	DD	FLAT:??_C@_0P@HJFILJLC@DSERR_NODRIVER@
	DD	088780082H
	DD	FLAT:??_C@_0BJ@PODLOCNP@DSERR_ALREADYINITIALIZED@
	DD	080040110H
	DD	FLAT:??_C@_0BE@FNFJCFJP@DSERR_NOAGGREGATION@
	DD	088780096H
	DD	FLAT:??_C@_0BB@MLKAOHBD@DSERR_BUFFERLOST@
	DD	0887800a0H
	DD	FLAT:??_C@_0BG@JFJBCEJM@DSERR_OTHERAPPHASPRIO@
	DD	0887800aaH
	DD	FLAT:??_C@_0BE@BMJCAPGM@DSERR_UNINITIALIZED@
	DD	00H
	DD	FLAT:??_C@_0CC@FJCEEPPE@DS_OK?5?9?5should?5not?5have?5got?5her@
_DATA	ENDS
;	COMDAT ??_C@_0CF@GFJPIPBN@Unable?5to?5destroy?5a?5sound?5buffe@
CONST	SEGMENT
??_C@_0CF@GFJPIPBN@Unable?5to?5destroy?5a?5sound?5buffe@ DB 'Unable to de'
	DB	'stroy a sound buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z@4JA DD 01bfH ; `dsound_destroy_sound_buffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CF@NJCHJOPA@Unable?5to?5duplicate?5sound?5buffe@
CONST	SEGMENT
??_C@_0CF@NJCHJOPA@Unable?5to?5duplicate?5sound?5buffe@ DB 'Unable to dup'
	DB	'licate sound buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OGDNDJOJ@Unable?5to?5create?5hardware?5sound@
CONST	SEGMENT
??_C@_0DI@OGDNDJOJ@Unable?5to?5create?5hardware?5sound@ DB 'Unable to cre'
	DB	'ate hardware sound buffer: ( %d, %d ) - %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IFCFIHJI@Unable?5to?5get?5format?3?5?$CFs@
CONST	SEGMENT
??_C@_0BJ@IFCFIHJI@Unable?5to?5get?5format?3?5?$CFs@ DB 'Unable to get fo'
	DB	'rmat: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@ILPNPGIC@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DG@ILPNPGIC@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\sound\dirsound.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU2@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU2@H@Z@4JA DD 0171H ; `dsound_duplicate_sound_buffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CP@OPBLHDNG@Unable?5to?5create?5sound?5buffer?3?5@
CONST	SEGMENT
??_C@_0CP@OPBLHDNG@Unable?5to?5create?5sound?5buffer?3?5@ DB 'Unable to c'
	DB	'reate sound buffer: ( %d, %d ) - %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JAJGNLDF@Unknown?5sample?5type?5in?5create_s@
CONST	SEGMENT
??_C@_0CL@JAJGNLDF@Unknown?5sample?5type?5in?5create_s@ DB 'Unknown sampl'
	DB	'e type in create_sound_buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MBJCNFAH@Unable?5to?5create?5primary?5sound?5@
CONST	SEGMENT
??_C@_0CK@MBJCNFAH@Unable?5to?5create?5primary?5sound?5@ DB 'Unable to cr'
	DB	'eate primary sound buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MCMPDCA@Unable?5to?5set?5direct?5sound?5coop@
CONST	SEGMENT
??_C@_0DB@MCMPDCA@Unable?5to?5set?5direct?5sound?5coop@ DB 'Unable to set'
	DB	' direct sound cooperative level: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KICKFAGD@Unable?5to?5create?5direct?5sound?5o@
CONST	SEGMENT
??_C@_0CJ@KICKFAGD@Unable?5to?5create?5direct?5sound?5o@ DB 'Unable to cr'
	DB	'eate direct sound object: %s', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dirsound.c
;	COMDAT ?dsound_initialise@@YGHXZ
_TEXT	SEGMENT
_dsbdesc$ = -40						; size = 36
_dsrval$ = -4						; size = 4
?dsound_initialise@@YGHXZ PROC				; dsound_initialise, COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 137  : 	
; 138  : 	HRESULT
; 139  : 		dsrval;
; 140  : 
; 141  : 	DSBUFFERDESC
; 142  : 		dsbdesc;
; 143  : 
; 144  : 	//
; 145  : 	// Create the direct sound object
; 146  : 	//
; 147  : 
; 148  : 	dsrval = DirectSoundCreate (NULL, &dsound, NULL);

  00009	6a 00		 push	 0
  0000b	68 00 00 00 00	 push	 OFFSET ?dsound@@3PAUIDirectSound@@A ; dsound
  00010	6a 00		 push	 0
  00012	e8 00 00 00 00	 call	 _DirectSoundCreate@12
  00017	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 149  : 	
; 150  : 	// JB 030311 compile fix
; 151  : 	if ( dsrval != DS_OK )

  0001a	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  0001e	74 1e		 je	 SHORT $LN2@dsound_ini

; 152  : 	{
; 153  : 
; 154  : 		debug_log ( "Unable to create direct sound object: %s", get_dsound_error_message ( dsrval ) );

  00020	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00029	50		 push	 eax
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@KICKFAGD@Unable?5to?5create?5direct?5sound?5o@
  0002f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00034	83 c4 08	 add	 esp, 8

; 155  : 
; 156  : 		return ( FALSE );

  00037	33 c0		 xor	 eax, eax
  00039	e9 e8 00 00 00	 jmp	 $LN1@dsound_ini
$LN2@dsound_ini:

; 157  : 	}
; 158  : 
; 159  : 	dsrval = IDirectSound_SetCooperativeLevel ( dsound, application_window, DSSCL_PRIORITY );

  0003e	6a 02		 push	 2
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00045	50		 push	 eax
  00046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  00053	50		 push	 eax
  00054	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00057	ff d1		 call	 ecx
  00059	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 160  : 
; 161  : 	// JB 030311 compile fix
; 162  : 	if ( dsrval != DS_OK )

  0005c	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00060	74 31		 je	 SHORT $LN3@dsound_ini

; 163  : 	{
; 164  : 
; 165  : 		debug_log ( "Unable to set direct sound cooperative level: %s", get_dsound_error_message ( dsrval ) );

  00062	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  0006b	50		 push	 eax
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@MCMPDCA@Unable?5to?5set?5direct?5sound?5coop@
  00071	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00076	83 c4 08	 add	 esp, 8

; 166  : 
; 167  : 		//
; 168  : 		// Remove the DirectSound object
; 169  : 		//
; 170  : 
; 171  : 		IDirectSound_Release ( dsound );

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  00086	52		 push	 edx
  00087	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0008a	ff d0		 call	 eax

; 172  : 
; 173  : 		return ( FALSE );

  0008c	33 c0		 xor	 eax, eax
  0008e	e9 93 00 00 00	 jmp	 $LN1@dsound_ini
$LN3@dsound_ini:

; 174  : 	}
; 175  : 
; 176  : 	memset ( &dsbdesc, 0, sizeof ( DSBUFFERDESC ) );

  00093	6a 24		 push	 36			; 00000024H
  00095	6a 00		 push	 0
  00097	8d 45 d8	 lea	 eax, DWORD PTR _dsbdesc$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _memset
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 177  : 
; 178  : 	dsbdesc.dwSize = sizeof ( DSBUFFERDESC );

  000a3	c7 45 d8 24 00
	00 00		 mov	 DWORD PTR _dsbdesc$[ebp], 36 ; 00000024H

; 179  : 
; 180  : 	dsbdesc.dwFlags = DSBCAPS_PRIMARYBUFFER | DSBCAPS_CTRL3D ;

  000aa	c7 45 dc 11 00
	00 00		 mov	 DWORD PTR _dsbdesc$[ebp+4], 17 ; 00000011H

; 181  : 
; 182  : 	dsrval = IDirectSound_CreateSoundBuffer ( dsound, &dsbdesc, &dsound_primary_buffer, NULL );

  000b1	6a 00		 push	 0
  000b3	68 00 00 00 00	 push	 OFFSET ?dsound_primary_buffer@@3PAUIDirectSoundBuffer@@A ; dsound_primary_buffer
  000b8	8d 45 d8	 lea	 eax, DWORD PTR _dsbdesc$[ebp]
  000bb	50		 push	 eax
  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  000c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  000c9	50		 push	 eax
  000ca	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  000cd	ff d1		 call	 ecx
  000cf	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 183  : 
; 184  : 	if ( dsrval != DS_OK )

  000d2	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  000d6	74 49		 je	 SHORT $LN4@dsound_ini

; 185  : 	{
; 186  : 
; 187  : 		debug_log ( "Unable to create primary sound buffer: %s", get_dsound_error_message ( dsrval ) );

  000d8	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  000e1	50		 push	 eax
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@MBJCNFAH@Unable?5to?5create?5primary?5sound?5@
  000e7	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000ec	83 c4 08	 add	 esp, 8

; 188  : 
; 189  : 		//
; 190  : 		// Reset cooperative level, release DirectSound object
; 191  : 		//
; 192  : 
; 193  : 		IDirectSound_SetCooperativeLevel ( dsound, application_window, DSSCL_NORMAL );

  000ef	6a 01		 push	 1
  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  000f6	50		 push	 eax
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  000fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  00104	50		 push	 eax
  00105	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00108	ff d1		 call	 ecx

; 194  : 
; 195  : 		IDirectSound_Release ( dsound );

  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  0010f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00111	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  00117	52		 push	 edx
  00118	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0011b	ff d0		 call	 eax

; 196  : 
; 197  : 		return ( FALSE );

  0011d	33 c0		 xor	 eax, eax
  0011f	eb 05		 jmp	 SHORT $LN1@dsound_ini
$LN4@dsound_ini:

; 198  : 	}
; 199  : 
; 200  : 	return ( TRUE );

  00121	b8 01 00 00 00	 mov	 eax, 1
$LN1@dsound_ini:

; 201  : }

  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c3		 ret	 0
?dsound_initialise@@YGHXZ ENDP				; dsound_initialise
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dirsound.c
;	COMDAT ?dsound_restore_objects@@YGXH@Z
_TEXT	SEGMENT
_activate$ = 8						; size = 4
?dsound_restore_objects@@YGXH@Z PROC			; dsound_restore_objects, COMDAT

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 209  : 	
; 210  : 	if ( ( application_active ) && ( dsound ) )
; 211  : 	{
; 212  : 
; 213  : 		//
; 214  : 		// Go through all the sound buffers, checking if lost, and restore if necessary
; 215  : 		//
; 216  : 	}
; 217  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?dsound_restore_objects@@YGXH@Z ENDP			; dsound_restore_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dirsound.c
;	COMDAT ?dsound_release_objects@@YGHXZ
_TEXT	SEGMENT
?dsound_release_objects@@YGHXZ PROC			; dsound_release_objects, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 225  : 
; 226  : 	if ( dsound )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?dsound@@3PAUIDirectSound@@A, 0 ; dsound
  00010	74 43		 je	 SHORT $LN2@dsound_rel

; 227  : 	{
; 228  : 
; 229  : 		if ( dsound_primary_buffer )

  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?dsound_primary_buffer@@3PAUIDirectSoundBuffer@@A, 0 ; dsound_primary_buffer
  00019	74 1d		 je	 SHORT $LN3@dsound_rel

; 230  : 		{
; 231  : 
; 232  : 			IDirectSoundBuffer_Release ( dsound_primary_buffer );

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dsound_primary_buffer@@3PAUIDirectSoundBuffer@@A ; dsound_primary_buffer
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dsound_primary_buffer@@3PAUIDirectSoundBuffer@@A ; dsound_primary_buffer
  00028	52		 push	 edx
  00029	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002c	ff d0		 call	 eax

; 233  : 
; 234  : 			dsound_primary_buffer = NULL;

  0002e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dsound_primary_buffer@@3PAUIDirectSoundBuffer@@A, 0 ; dsound_primary_buffer
$LN3@dsound_rel:

; 235  : 		}
; 236  : 
; 237  : 		IDirectSound_Release ( dsound );

  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  00045	52		 push	 edx
  00046	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00049	ff d0		 call	 eax

; 238  : 
; 239  : 		dsound = NULL;

  0004b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dsound@@3PAUIDirectSound@@A, 0 ; dsound
$LN2@dsound_rel:

; 240  : 	}
; 241  : 
; 242  : 	return ( TRUE );

  00055	b8 01 00 00 00	 mov	 eax, 1

; 243  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?dsound_release_objects@@YGHXZ ENDP			; dsound_release_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dirsound.c
;	COMDAT ?dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_buffer$ = 8						; size = 4
?dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z PROC ; dsound_destroy_sound_buffer, COMDAT

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 448  : 
; 449  : 	HRESULT
; 450  : 		dsrval;
; 451  : 
; 452  : 	ASSERT ( buffer );

  00009	83 7d 08 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@dsound_des
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ILPNPGIC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@dsound_des:

; 453  : 
; 454  : 	dsrval = IDirectSoundBuffer_Release ( buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  0002f	52		 push	 edx
  00030	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00033	ff d0		 call	 eax
  00035	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 455  : 
; 456  : 	if ( dsrval != DS_OK )

  00038	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  0003c	74 17		 je	 SHORT $LN1@dsound_des

; 457  : 	{
; 458  : 
; 459  : 		debug_log ( "Unable to destroy a sound buffer: %s", get_dsound_error_message ( dsrval ) );

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@GFJPIPBN@Unable?5to?5destroy?5a?5sound?5buffe@
  0004d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00052	83 c4 08	 add	 esp, 8
$LN1@dsound_des:

; 460  : 	}
; 461  : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z ENDP ; dsound_destroy_sound_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dirsound.c
;	COMDAT ?dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU1@H@Z
_TEXT	SEGMENT
_datadst$ = -72						; size = 4
_datasrc$ = -68						; size = 4
_dsbdesc$ = -64						; size = 36
_pcmwf$ = -28						; size = 18
_duplicand$ = -8					; size = 4
_dsrval$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU1@H@Z PROC ; dsound_duplicate_sound_buffer, COMDAT

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 370  : 
; 371  : 	HRESULT
; 372  : 		dsrval;
; 373  : 
; 374  : 	LPDIRECTSOUNDBUFFER
; 375  : 		duplicand;
; 376  : 
; 377  : 	WAVEFORMATEX
; 378  : 		pcmwf;
; 379  : 	DSBUFFERDESC
; 380  : 		dsbdesc;
; 381  : 	unsigned char * datasrc, * datadst;
; 382  : 
; 383  : 	ASSERT ( buffer );

  0000c	83 7d 08 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@dsound_dup
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU2@H@Z@4JA
  00017	83 c0 0e	 add	 eax, 14			; 0000000eH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ILPNPGIC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@dsound_dup:

; 384  : 
; 385  : 	// Casm 11JUN05 Hardware sound buffers
; 386  : 	if ( command_line_sound_hdwrbuf > 0 )

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_sound_hdwrbuf@@3HA, 0 ; command_line_sound_hdwrbuf
  00031	0f 8e 57 01 00
	00		 jle	 $LN3@dsound_dup

; 387  : 	{
; 388  : 		dsrval = IDirectSoundBuffer_GetFormat ( buffer, ( LPWAVEFORMATEX ) &pcmwf, sizeof(pcmwf), NULL );

  00037	6a 00		 push	 0
  00039	6a 12		 push	 18			; 00000012H
  0003b	8d 45 e4	 lea	 eax, DWORD PTR _pcmwf$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00042	8b 11		 mov	 edx, DWORD PTR [ecx]
  00044	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00047	50		 push	 eax
  00048	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0004b	ff d1		 call	 ecx
  0004d	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 389  : 		if ( dsrval != DS_OK )

  00050	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00054	74 1e		 je	 SHORT $LN4@dsound_dup

; 390  : 		{
; 391  : 			debug_log ( "Unable to get format: %s", get_dsound_error_message ( dsrval ) );

  00056	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IFCFIHJI@Unable?5to?5get?5format?3?5?$CFs@
  00065	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0006a	83 c4 08	 add	 esp, 8

; 392  : 			return ( NULL );

  0006d	33 c0		 xor	 eax, eax
  0006f	e9 5d 01 00 00	 jmp	 $LN1@dsound_dup
$LN4@dsound_dup:

; 393  : 		}
; 394  : 
; 395  : 		memset ( &dsbdesc, 0, sizeof ( DSBUFFERDESC ) );

  00074	6a 24		 push	 36			; 00000024H
  00076	6a 00		 push	 0
  00078	8d 45 c0	 lea	 eax, DWORD PTR _dsbdesc$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _memset
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 396  : 		dsbdesc.dwSize = sizeof ( DSBUFFERDESC );

  00084	c7 45 c0 24 00
	00 00		 mov	 DWORD PTR _dsbdesc$[ebp], 36 ; 00000024H

; 397  : 		dsbdesc.lpwfxFormat = ( LPWAVEFORMATEX ) &pcmwf;

  0008b	8d 45 e4	 lea	 eax, DWORD PTR _pcmwf$[ebp]
  0008e	89 45 d0	 mov	 DWORD PTR _dsbdesc$[ebp+16], eax

; 398  : 		dsbdesc.dwFlags = DSBCAPS_CTRLFREQUENCY | DSBCAPS_CTRLPAN | DSBCAPS_CTRLVOLUME | DSBCAPS_LOCDEFER; //RERUN, was DSBCAPS_LOCHARDWARE

  00091	c7 45 c4 e0 00
	04 00		 mov	 DWORD PTR _dsbdesc$[ebp+4], 262368 ; 000400e0H

; 399  : 		dsbdesc.dwBufferBytes = size;

  00098	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0009b	89 45 c8	 mov	 DWORD PTR _dsbdesc$[ebp+8], eax

; 400  : 
; 401  : 		dsrval = IDirectSound_CreateSoundBuffer ( dsound, &dsbdesc, &duplicand, NULL );

  0009e	6a 00		 push	 0
  000a0	8d 45 f8	 lea	 eax, DWORD PTR _duplicand$[ebp]
  000a3	50		 push	 eax
  000a4	8d 4d c0	 lea	 ecx, DWORD PTR _dsbdesc$[ebp]
  000a7	51		 push	 ecx
  000a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  000ae	8b 02		 mov	 eax, DWORD PTR [edx]
  000b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  000b6	51		 push	 ecx
  000b7	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000ba	ff d2		 call	 edx
  000bc	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 402  : 		if ( dsrval != DS_OK )

  000bf	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  000c3	74 26		 je	 SHORT $LN5@dsound_dup

; 403  : 		{
; 404  : 			debug_log ( "Unable to create hardware sound buffer: ( %d, %d ) - %s", pcmwf.nSamplesPerSec, size, get_dsound_error_message ( dsrval ) );

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  000ce	50		 push	 eax
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  000d2	51		 push	 ecx
  000d3	8b 55 e8	 mov	 edx, DWORD PTR _pcmwf$[ebp+4]
  000d6	52		 push	 edx
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OGDNDJOJ@Unable?5to?5create?5hardware?5sound@
  000dc	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000e1	83 c4 10	 add	 esp, 16			; 00000010H

; 405  : 			return ( NULL );

  000e4	33 c0		 xor	 eax, eax
  000e6	e9 e6 00 00 00	 jmp	 $LN1@dsound_dup
$LN5@dsound_dup:

; 406  : 		}
; 407  : 
; 408  : 		datasrc = dsound_lock_sound_buffer ( buffer, 0, size );

  000eb	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  000ee	50		 push	 eax
  000ef	6a 00		 push	 0
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  000f4	51		 push	 ecx
  000f5	e8 00 00 00 00	 call	 ?dsound_lock_sound_buffer@@YGPAEPAUIDirectSoundBuffer@@HH@Z ; dsound_lock_sound_buffer
  000fa	89 45 bc	 mov	 DWORD PTR _datasrc$[ebp], eax

; 409  : 		if ( datasrc == NULL )

  000fd	83 7d bc 00	 cmp	 DWORD PTR _datasrc$[ebp], 0
  00101	75 15		 jne	 SHORT $LN6@dsound_dup

; 410  : 		{
; 411  : 			IDirectSoundBuffer_Release ( duplicand );

  00103	8b 45 f8	 mov	 eax, DWORD PTR _duplicand$[ebp]
  00106	8b 08		 mov	 ecx, DWORD PTR [eax]
  00108	8b 55 f8	 mov	 edx, DWORD PTR _duplicand$[ebp]
  0010b	52		 push	 edx
  0010c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0010f	ff d0		 call	 eax

; 412  : 			return ( NULL );

  00111	33 c0		 xor	 eax, eax
  00113	e9 b9 00 00 00	 jmp	 $LN1@dsound_dup
$LN6@dsound_dup:

; 413  : 		}
; 414  : 		datadst = dsound_lock_sound_buffer ( duplicand, 0, size );

  00118	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0011b	50		 push	 eax
  0011c	6a 00		 push	 0
  0011e	8b 4d f8	 mov	 ecx, DWORD PTR _duplicand$[ebp]
  00121	51		 push	 ecx
  00122	e8 00 00 00 00	 call	 ?dsound_lock_sound_buffer@@YGPAEPAUIDirectSoundBuffer@@HH@Z ; dsound_lock_sound_buffer
  00127	89 45 b8	 mov	 DWORD PTR _datadst$[ebp], eax

; 415  : 		if ( datadst == NULL )

  0012a	83 7d b8 00	 cmp	 DWORD PTR _datadst$[ebp], 0
  0012e	75 23		 jne	 SHORT $LN7@dsound_dup

; 416  : 		{
; 417  : 			dsound_unlock_sound_buffer ( buffer, datasrc, size );

  00130	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  00133	50		 push	 eax
  00134	8b 4d bc	 mov	 ecx, DWORD PTR _datasrc$[ebp]
  00137	51		 push	 ecx
  00138	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  0013b	52		 push	 edx
  0013c	e8 00 00 00 00	 call	 ?dsound_unlock_sound_buffer@@YGHPAUIDirectSoundBuffer@@PAEH@Z ; dsound_unlock_sound_buffer

; 418  : 			IDirectSoundBuffer_Release ( duplicand );

  00141	8b 45 f8	 mov	 eax, DWORD PTR _duplicand$[ebp]
  00144	8b 08		 mov	 ecx, DWORD PTR [eax]
  00146	8b 55 f8	 mov	 edx, DWORD PTR _duplicand$[ebp]
  00149	52		 push	 edx
  0014a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0014d	ff d0		 call	 eax

; 419  : 			return ( NULL );

  0014f	33 c0		 xor	 eax, eax
  00151	eb 7e		 jmp	 SHORT $LN1@dsound_dup
$LN7@dsound_dup:

; 420  : 		}
; 421  : 		memcpy ( datadst, datasrc, size );

  00153	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  00156	50		 push	 eax
  00157	8b 4d bc	 mov	 ecx, DWORD PTR _datasrc$[ebp]
  0015a	51		 push	 ecx
  0015b	8b 55 b8	 mov	 edx, DWORD PTR _datadst$[ebp]
  0015e	52		 push	 edx
  0015f	e8 00 00 00 00	 call	 _memcpy
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH

; 422  : 		dsound_unlock_sound_buffer ( buffer, datasrc, size );

  00167	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0016a	50		 push	 eax
  0016b	8b 4d bc	 mov	 ecx, DWORD PTR _datasrc$[ebp]
  0016e	51		 push	 ecx
  0016f	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00172	52		 push	 edx
  00173	e8 00 00 00 00	 call	 ?dsound_unlock_sound_buffer@@YGHPAUIDirectSoundBuffer@@PAEH@Z ; dsound_unlock_sound_buffer

; 423  : 		dsound_unlock_sound_buffer ( duplicand, datadst, size );

  00178	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0017b	50		 push	 eax
  0017c	8b 4d b8	 mov	 ecx, DWORD PTR _datadst$[ebp]
  0017f	51		 push	 ecx
  00180	8b 55 f8	 mov	 edx, DWORD PTR _duplicand$[ebp]
  00183	52		 push	 edx
  00184	e8 00 00 00 00	 call	 ?dsound_unlock_sound_buffer@@YGHPAUIDirectSoundBuffer@@PAEH@Z ; dsound_unlock_sound_buffer

; 424  : 
; 425  : 		return ( duplicand );

  00189	8b 45 f8	 mov	 eax, DWORD PTR _duplicand$[ebp]
  0018c	eb 43		 jmp	 SHORT $LN1@dsound_dup
$LN3@dsound_dup:

; 426  : 	}
; 427  : 	// Casm 11JUN05 Hardware sound buffers
; 428  : 
; 429  : 	dsrval = IDirectSound_DuplicateSoundBuffer ( dsound, buffer, &duplicand );

  0018e	8d 45 f8	 lea	 eax, DWORD PTR _duplicand$[ebp]
  00191	50		 push	 eax
  00192	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00195	51		 push	 ecx
  00196	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  0019c	8b 02		 mov	 eax, DWORD PTR [edx]
  0019e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  001a4	51		 push	 ecx
  001a5	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  001a8	ff d2		 call	 edx
  001aa	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 430  : 
; 431  : 	if ( dsrval != DS_OK )

  001ad	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  001b1	74 1b		 je	 SHORT $LN8@dsound_dup

; 432  : 	{
; 433  : 
; 434  : 		debug_log ( "Unable to duplicate sound buffer: %s", get_dsound_error_message ( dsrval ) );

  001b3	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  001bc	50		 push	 eax
  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NJCHJOPA@Unable?5to?5duplicate?5sound?5buffe@
  001c2	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001c7	83 c4 08	 add	 esp, 8

; 435  : 
; 436  : 		return ( NULL );

  001ca	33 c0		 xor	 eax, eax
  001cc	eb 03		 jmp	 SHORT $LN1@dsound_dup
$LN8@dsound_dup:

; 437  : 	}
; 438  : 
; 439  : 	return ( duplicand );

  001ce	8b 45 f8	 mov	 eax, DWORD PTR _duplicand$[ebp]
$LN1@dsound_dup:

; 440  : }

  001d1	5f		 pop	 edi
  001d2	5e		 pop	 esi
  001d3	5b		 pop	 ebx
  001d4	8b e5		 mov	 esp, ebp
  001d6	5d		 pop	 ebp
  001d7	c2 08 00	 ret	 8
?dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU1@H@Z ENDP ; dsound_duplicate_sound_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dirsound.c
;	COMDAT ?dsound_create_sound_buffer@@YGPAUIDirectSoundBuffer@@W4SAMPLE_TYPES@@HH@Z
_TEXT	SEGMENT
tv65 = -128						; size = 4
_dsrval$ = -60						; size = 4
_buffer$ = -56						; size = 4
_dsbdesc$ = -52						; size = 36
_pcmwf$ = -16						; size = 16
_type$ = 8						; size = 4
_rate$ = 12						; size = 4
_size$ = 16						; size = 4
?dsound_create_sound_buffer@@YGPAUIDirectSoundBuffer@@W4SAMPLE_TYPES@@HH@Z PROC ; dsound_create_sound_buffer, COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 251  : 
; 252  : 	PCMWAVEFORMAT
; 253  : 		pcmwf;
; 254  : 
; 255  : 	DSBUFFERDESC
; 256  : 		dsbdesc;
; 257  : 
; 258  : 	LPDIRECTSOUNDBUFFER
; 259  : 		buffer;
; 260  : 
; 261  : 	HRESULT
; 262  : 		dsrval;
; 263  : 
; 264  : 	if ( !dsound )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?dsound@@3PAUIDirectSound@@A, 0 ; dsound
  00013	75 0c		 jne	 SHORT $LN4@dsound_cre

; 265  : 	{
; 266  : 
; 267  : 		return ( NULL );

  00015	33 c0		 xor	 eax, eax
  00017	e9 46 01 00 00	 jmp	 $LN1@dsound_cre

; 268  : 	}
; 269  : 	else

  0001c	e9 41 01 00 00	 jmp	 $LN1@dsound_cre
$LN4@dsound_cre:

; 270  : 	{
; 271  : 	
; 272  : 		memset ( &pcmwf, 0, sizeof ( PCMWAVEFORMAT ) );

  00021	6a 10		 push	 16			; 00000010H
  00023	6a 00		 push	 0
  00025	8d 45 f0	 lea	 eax, DWORD PTR _pcmwf$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _memset
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 273  : 	
; 274  : 		pcmwf.wf.wFormatTag = WAVE_FORMAT_PCM;

  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	66 89 45 f0	 mov	 WORD PTR _pcmwf$[ebp], ax

; 275  : 	
; 276  : 		switch ( type )

  0003a	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0003d	89 45 80	 mov	 DWORD PTR tv65[ebp], eax
  00040	8b 4d 80	 mov	 ecx, DWORD PTR tv65[ebp]
  00043	83 e9 01	 sub	 ecx, 1
  00046	89 4d 80	 mov	 DWORD PTR tv65[ebp], ecx
  00049	83 7d 80 03	 cmp	 DWORD PTR tv65[ebp], 3
  0004d	77 7e		 ja	 SHORT $LN10@dsound_cre
  0004f	8b 55 80	 mov	 edx, DWORD PTR tv65[ebp]
  00052	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN13@dsound_cre[edx*4]
$LN6@dsound_cre:

; 277  : 		{
; 278  : 	
; 279  : 			case SAMPLE_TYPE_MONO_8BIT:
; 280  : 			{
; 281  : 	
; 282  : 					pcmwf.wf.nChannels = 1;

  00059	b8 01 00 00 00	 mov	 eax, 1
  0005e	66 89 45 f2	 mov	 WORD PTR _pcmwf$[ebp+2], ax

; 283  : 	
; 284  : 					pcmwf.wf.nBlockAlign = 1;

  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	66 89 45 fc	 mov	 WORD PTR _pcmwf$[ebp+12], ax

; 285  : 	
; 286  : 					pcmwf.wBitsPerSample = 8;

  0006b	b8 08 00 00 00	 mov	 eax, 8
  00070	66 89 45 fe	 mov	 WORD PTR _pcmwf$[ebp+14], ax

; 287  : 	
; 288  : 					break;

  00074	eb 64		 jmp	 SHORT $LN2@dsound_cre
$LN7@dsound_cre:

; 289  : 			}
; 290  : 	
; 291  : 			case SAMPLE_TYPE_STEREO_8BIT:
; 292  : 			{
; 293  : 	
; 294  : 					pcmwf.wf.nChannels = 2;

  00076	b8 02 00 00 00	 mov	 eax, 2
  0007b	66 89 45 f2	 mov	 WORD PTR _pcmwf$[ebp+2], ax

; 295  : 	
; 296  : 					pcmwf.wf.nBlockAlign = 2;

  0007f	b8 02 00 00 00	 mov	 eax, 2
  00084	66 89 45 fc	 mov	 WORD PTR _pcmwf$[ebp+12], ax

; 297  : 	
; 298  : 					pcmwf.wBitsPerSample = 8;

  00088	b8 08 00 00 00	 mov	 eax, 8
  0008d	66 89 45 fe	 mov	 WORD PTR _pcmwf$[ebp+14], ax

; 299  : 	
; 300  : 					break;

  00091	eb 47		 jmp	 SHORT $LN2@dsound_cre
$LN8@dsound_cre:

; 301  : 			}
; 302  : 	
; 303  : 			case SAMPLE_TYPE_MONO_16BIT:
; 304  : 			{
; 305  : 	
; 306  : 					pcmwf.wf.nChannels = 1;

  00093	b8 01 00 00 00	 mov	 eax, 1
  00098	66 89 45 f2	 mov	 WORD PTR _pcmwf$[ebp+2], ax

; 307  : 	
; 308  : 					pcmwf.wf.nBlockAlign = 2;

  0009c	b8 02 00 00 00	 mov	 eax, 2
  000a1	66 89 45 fc	 mov	 WORD PTR _pcmwf$[ebp+12], ax

; 309  : 	
; 310  : 					pcmwf.wBitsPerSample = 16;

  000a5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000aa	66 89 45 fe	 mov	 WORD PTR _pcmwf$[ebp+14], ax

; 311  : 	
; 312  : 					break;

  000ae	eb 2a		 jmp	 SHORT $LN2@dsound_cre
$LN9@dsound_cre:

; 313  : 			}
; 314  : 	
; 315  : 			case SAMPLE_TYPE_STEREO_16BIT:
; 316  : 			{
; 317  : 	
; 318  : 					pcmwf.wf.nChannels = 2;

  000b0	b8 02 00 00 00	 mov	 eax, 2
  000b5	66 89 45 f2	 mov	 WORD PTR _pcmwf$[ebp+2], ax

; 319  : 	
; 320  : 					pcmwf.wf.nBlockAlign = 4;

  000b9	b8 04 00 00 00	 mov	 eax, 4
  000be	66 89 45 fc	 mov	 WORD PTR _pcmwf$[ebp+12], ax

; 321  : 	
; 322  : 					pcmwf.wBitsPerSample = 16;

  000c2	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000c7	66 89 45 fe	 mov	 WORD PTR _pcmwf$[ebp+14], ax

; 323  : 	
; 324  : 					break;

  000cb	eb 0d		 jmp	 SHORT $LN2@dsound_cre
$LN10@dsound_cre:

; 325  : 			}
; 326  : 	
; 327  : 			default:
; 328  : 			{
; 329  : 	
; 330  : 				debug_fatal ( "Unknown sample type in create_sound_buffer" );

  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@JAJGNLDF@Unknown?5sample?5type?5in?5create_s@
  000d2	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000d7	83 c4 04	 add	 esp, 4
$LN2@dsound_cre:

; 331  : 	
; 332  : 				break;
; 333  : 			}
; 334  : 		}
; 335  : 	
; 336  : 		memset ( &dsbdesc, 0, sizeof ( DSBUFFERDESC ) );

  000da	6a 24		 push	 36			; 00000024H
  000dc	6a 00		 push	 0
  000de	8d 45 cc	 lea	 eax, DWORD PTR _dsbdesc$[ebp]
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 _memset
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 337  : 	
; 338  : 		dsbdesc.dwSize = sizeof ( DSBUFFERDESC );

  000ea	c7 45 cc 24 00
	00 00		 mov	 DWORD PTR _dsbdesc$[ebp], 36 ; 00000024H

; 339  : 	
; 340  : 		dsbdesc.lpwfxFormat = ( LPWAVEFORMATEX ) &pcmwf;

  000f1	8d 45 f0	 lea	 eax, DWORD PTR _pcmwf$[ebp]
  000f4	89 45 dc	 mov	 DWORD PTR _dsbdesc$[ebp+16], eax

; 341  : 	
; 342  : 		dsbdesc.dwFlags = DSBCAPS_CTRLFREQUENCY | DSBCAPS_CTRLPAN | DSBCAPS_CTRLVOLUME | DSBCAPS_LOCSOFTWARE;

  000f7	c7 45 d0 e8 00
	00 00		 mov	 DWORD PTR _dsbdesc$[ebp+4], 232 ; 000000e8H

; 343  : 	
; 344  : 		dsbdesc.dwBufferBytes = size;

  000fe	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00101	89 45 d4	 mov	 DWORD PTR _dsbdesc$[ebp+8], eax

; 345  : 	
; 346  : 		pcmwf.wf.nSamplesPerSec = rate;

  00104	8b 45 0c	 mov	 eax, DWORD PTR _rate$[ebp]
  00107	89 45 f4	 mov	 DWORD PTR _pcmwf$[ebp+4], eax

; 347  : 	
; 348  : 		pcmwf.wf.nAvgBytesPerSec = ( pcmwf.wf.nSamplesPerSec * pcmwf.wf.nBlockAlign );

  0010a	0f b7 45 fc	 movzx	 eax, WORD PTR _pcmwf$[ebp+12]
  0010e	0f af 45 f4	 imul	 eax, DWORD PTR _pcmwf$[ebp+4]
  00112	89 45 f8	 mov	 DWORD PTR _pcmwf$[ebp+8], eax

; 349  : 	
; 350  : 		dsrval = IDirectSound_CreateSoundBuffer ( dsound, &dsbdesc, &buffer, NULL );

  00115	6a 00		 push	 0
  00117	8d 45 c8	 lea	 eax, DWORD PTR _buffer$[ebp]
  0011a	50		 push	 eax
  0011b	8d 4d cc	 lea	 ecx, DWORD PTR _dsbdesc$[ebp]
  0011e	51		 push	 ecx
  0011f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  00125	8b 02		 mov	 eax, DWORD PTR [edx]
  00127	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dsound@@3PAUIDirectSound@@A ; dsound
  0012d	51		 push	 ecx
  0012e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00131	ff d2		 call	 edx
  00133	89 45 c4	 mov	 DWORD PTR _dsrval$[ebp], eax

; 351  : 	
; 352  : 		if ( dsrval != DS_OK )

  00136	83 7d c4 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  0013a	74 23		 je	 SHORT $LN11@dsound_cre

; 353  : 		{
; 354  : 	
; 355  : 			debug_log ( "Unable to create sound buffer: ( %d, %d ) - %s", rate, size, get_dsound_error_message ( dsrval ) );

  0013c	8b 45 c4	 mov	 eax, DWORD PTR _dsrval$[ebp]
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00145	50		 push	 eax
  00146	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  00149	51		 push	 ecx
  0014a	8b 55 0c	 mov	 edx, DWORD PTR _rate$[ebp]
  0014d	52		 push	 edx
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@OPBLHDNG@Unable?5to?5create?5sound?5buffer?3?5@
  00153	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00158	83 c4 10	 add	 esp, 16			; 00000010H

; 356  : 	
; 357  : 			return ( NULL );

  0015b	33 c0		 xor	 eax, eax
  0015d	eb 03		 jmp	 SHORT $LN1@dsound_cre
$LN11@dsound_cre:

; 358  : 		}
; 359  : 	
; 360  : 		return ( buffer );

  0015f	8b 45 c8	 mov	 eax, DWORD PTR _buffer$[ebp]
$LN1@dsound_cre:

; 361  : 	}
; 362  : }

  00162	5f		 pop	 edi
  00163	5e		 pop	 esi
  00164	5b		 pop	 ebx
  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c2 0c 00	 ret	 12			; 0000000cH
  0016b	90		 npad	 1
$LN13@dsound_cre:
  0016c	00 00 00 00	 DD	 $LN6@dsound_cre
  00170	00 00 00 00	 DD	 $LN7@dsound_cre
  00174	00 00 00 00	 DD	 $LN8@dsound_cre
  00178	00 00 00 00	 DD	 $LN9@dsound_cre
?dsound_create_sound_buffer@@YGPAUIDirectSoundBuffer@@W4SAMPLE_TYPES@@HH@Z ENDP ; dsound_create_sound_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dirsound.c
;	COMDAT ?initialise_direct_sound@@YGHXZ
_TEXT	SEGMENT
?initialise_direct_sound@@YGHXZ PROC			; initialise_direct_sound, COMDAT

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 100  : 
; 101  : 	static int
; 102  : 		direct_sound_initialised = FALSE;
; 103  : 
; 104  : 	if ( !direct_sound_initialised )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?direct_sound_initialised@?1??initialise_direct_sound@@YGHXZ@4HA, 0
  00010	75 39		 jne	 SHORT $LN2@initialise

; 105  : 	{
; 106  : 
; 107  : 		if ( dsound_initialise () )

  00012	e8 00 00 00 00	 call	 ?dsound_initialise@@YGHXZ ; dsound_initialise
  00017	85 c0		 test	 eax, eax
  00019	74 2c		 je	 SHORT $LN3@initialise

; 108  : 		{
; 109  : 			// crh 030320 lack of (void *) cast generates a warning with open watcom
; 110  : 			// feel free to yell at me if this is a problem
; 111  : 			register_exit_function ( ( void (*) ( void ) ) dsound_release_objects );

  0001b	68 00 00 00 00	 push	 OFFSET ?dsound_release_objects@@YGHXZ ; dsound_release_objects
  00020	e8 00 00 00 00	 call	 ?register_exit_function@@YGXP6GXXZ@Z ; register_exit_function

; 112  : 
; 113  : 			register_post_activate_message_function ( dsound_restore_objects );

  00025	68 00 00 00 00	 push	 OFFSET ?dsound_restore_objects@@YGXH@Z ; dsound_restore_objects
  0002a	e8 00 00 00 00	 call	 ?register_post_activate_message_function@@YGHP6GXH@Z@Z ; register_post_activate_message_function

; 114  : 		
; 115  : 			direct_sound_initialised = TRUE;

  0002f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?direct_sound_initialised@?1??initialise_direct_sound@@YGHXZ@4HA, 1

; 116  : 
; 117  : 			set_fpu_rounding_mode_zero ();

  00039	e8 00 00 00 00	 call	 ?set_fpu_rounding_mode_zero@@YGXXZ ; set_fpu_rounding_mode_zero

; 118  : 
; 119  : 			return ( TRUE );

  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	eb 0b		 jmp	 SHORT $LN1@initialise

; 120  : 		}
; 121  : 		else

  00045	eb 04		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 122  : 		{
; 123  : 
; 124  : 			return ( FALSE );

  00047	33 c0		 xor	 eax, eax
  00049	eb 05		 jmp	 SHORT $LN1@initialise
$LN2@initialise:

; 125  : 		}
; 126  : 	}
; 127  : 
; 128  : 	return ( TRUE );

  0004b	b8 01 00 00 00	 mov	 eax, 1
$LN1@initialise:

; 129  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?initialise_direct_sound@@YGHXZ ENDP			; initialise_direct_sound
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dirsound.c
;	COMDAT ?get_dsound_error_message@@YGPBDJ@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_error$ = 8						; size = 4
?get_dsound_error_message@@YGPBDJ@Z PROC		; get_dsound_error_message, COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 508  : 
; 509  : 	int
; 510  : 		count;
; 511  : 
; 512  : 
; 513  : 	count = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN2@get_dsound:

; 514  : 
; 515  : 	while ( ( dsound_error_table[count].error != 0 ) && ( dsound_error_table[count].error != error ) )

  00010	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00013	83 3c c5 00 00
	00 00 00	 cmp	 DWORD PTR ?dsound_error_table@@3PAUDSOUND_ERROR_MESSAGE@@A[eax*8], 0
  0001b	74 1a		 je	 SHORT $LN3@get_dsound
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00020	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR ?dsound_error_table@@3PAUDSOUND_ERROR_MESSAGE@@A[eax*8]
  00027	3b 4d 08	 cmp	 ecx, DWORD PTR _error$[ebp]
  0002a	74 0b		 je	 SHORT $LN3@get_dsound

; 516  : 	{
; 517  : 
; 518  : 		count ++;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 519  : 	}

  00035	eb d9		 jmp	 SHORT $LN2@get_dsound
$LN3@get_dsound:

; 520  : 
; 521  : 	return ( dsound_error_table[count].error_string );

  00037	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003a	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?dsound_error_table@@3PAUDSOUND_ERROR_MESSAGE@@A[eax*8+4]

; 522  : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?get_dsound_error_message@@YGPBDJ@Z ENDP		; get_dsound_error_message
_TEXT	ENDS
END
