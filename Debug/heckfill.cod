; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\heckfill.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?stack_register_location@@3IA			; stack_register_location
_BSS	SEGMENT
?stack_register_location@@3IA DD 01H DUP (?)		; stack_register_location
_BSS	ENDS
PUBLIC	?draw_software_plain_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_software_plain_triangle
PUBLIC	?construct_plain_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z ; construct_plain_triangle_edge
PUBLIC	?solid_fill_horizontal_line@@YGXPAGHH@Z		; solid_fill_horizontal_line
PUBLIC	?__LINE__Var@?0??calculate_floor_div_mod@@YGXHHPAH0@Z@4JA ; `calculate_floor_div_mod'::`1'::__LINE__Var
PUBLIC	??_C@_0DJ@NPFOOJML@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BA@NNCKOAFG@denominator?5?$DO?50@	; `string'
PUBLIC	?__LINE__Var@?0??fill_software_plain_polygon@@YGXI@Z@4JA ; `fill_software_plain_polygon'::`1'::__LINE__Var
PUBLIC	??_C@_0O@IILHNAKB@active_screen@		; `string'
PUBLIC	??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@ ; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?ceil_fixed28_point4@@YGHH@Z:PROC		; ceil_fixed28_point4
EXTRN	?get_div_mod@@YGHHHPAH@Z:PROC			; get_div_mod
EXTRN	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z:PROC	; clip_3d_polygon
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_screen_locked@@YGHPAUSCREEN@@@Z:PROC	; get_screen_locked
EXTRN	?float_value_zero@@3MB:DWORD			; float_value_zero
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?active_screen_red_mask@@3HA:DWORD		; active_screen_red_mask
EXTRN	?active_screen_red_shift@@3HA:DWORD		; active_screen_red_shift
EXTRN	?active_screen_green_mask@@3HA:DWORD		; active_screen_green_mask
EXTRN	?active_screen_green_shift@@3HA:DWORD		; active_screen_green_shift
EXTRN	?active_screen_blue_mask@@3HA:DWORD		; active_screen_blue_mask
EXTRN	?active_screen_blue_shift@@3HA:DWORD		; active_screen_blue_shift
EXTRN	?active_screen_alpha_mask@@3HA:DWORD		; active_screen_alpha_mask
EXTRN	?active_screen_alpha_shift@@3HA:DWORD		; active_screen_alpha_shift
EXTRN	?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A:BYTE ; triangle_points
EXTRN	?triangle_point0@@3PAUVERTEX@@A:DWORD		; triangle_point0
EXTRN	?triangle_point1@@3PAUVERTEX@@A:DWORD		; triangle_point1
EXTRN	?triangle_point2@@3PAUVERTEX@@A:DWORD		; triangle_point2
EXTRN	?triangle_gradients_points@@3PAPAUVERTEX@@A:BYTE ; triangle_gradients_points
EXTRN	?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A:BYTE ; top_to_bottom_edge
EXTRN	?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A:BYTE ; top_to_middle_edge
EXTRN	?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A:BYTE ; middle_to_bottom_edge
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@
CONST	SEGMENT
??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@ DB 'get_screen_l'
	DB	'ocked ( active_screen )', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IILHNAKB@active_screen@
CONST	SEGMENT
??_C@_0O@IILHNAKB@active_screen@ DB 'active_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??fill_software_plain_polygon@@YGXI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fill_software_plain_polygon@@YGXI@Z@4JA DD 01baH ; `fill_software_plain_polygon'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@NNCKOAFG@denominator?5?$DO?50@
CONST	SEGMENT
??_C@_0BA@NNCKOAFG@denominator?5?$DO?50@ DB 'denominator > 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NPFOOJML@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DJ@NPFOOJML@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\heckfill.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??calculate_floor_div_mod@@YGXHHPAH0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??calculate_floor_div_mod@@YGXHHPAH0@Z@4JA DD 074H ; `calculate_floor_div_mod'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\heckfill.c
;	COMDAT ?solid_fill_horizontal_line@@YGXPAGHH@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_colour$ = 12						; size = 4
_count$ = 16						; size = 4
?solid_fill_horizontal_line@@YGXPAGHH@Z PROC		; solid_fill_horizontal_line, COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 428  : 	for ( ; count > 0; count-- )

  00009	eb 09		 jmp	 SHORT $LN4@solid_fill
$LN2@solid_fill:
  0000b	8b 45 10	 mov	 eax, DWORD PTR _count$[ebp]
  0000e	83 e8 01	 sub	 eax, 1
  00011	89 45 10	 mov	 DWORD PTR _count$[ebp], eax
$LN4@solid_fill:
  00014	83 7d 10 00	 cmp	 DWORD PTR _count$[ebp], 0
  00018	7e 15		 jle	 SHORT $LN1@solid_fill

; 429  : 	{
; 430  : 
; 431  : 		*ptr++ = ( unsigned short int ) colour;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  0001d	66 8b 4d 0c	 mov	 cx, WORD PTR _colour$[ebp]
  00021	66 89 08	 mov	 WORD PTR [eax], cx
  00024	8b 55 08	 mov	 edx, DWORD PTR _ptr$[ebp]
  00027	83 c2 02	 add	 edx, 2
  0002a	89 55 08	 mov	 DWORD PTR _ptr$[ebp], edx

; 432  : 	}

  0002d	eb dc		 jmp	 SHORT $LN2@solid_fill
$LN1@solid_fill:

; 433  : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
?solid_fill_horizontal_line@@YGXPAGHH@Z ENDP		; solid_fill_horizontal_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\heckfill.c
;	COMDAT ?construct_plain_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z
_TEXT	SEGMENT
_initial_numerator$1 = -16				; size = 4
_dm$2 = -12						; size = 4
_dn$3 = -8						; size = 4
_j_end$ = -4						; size = 4
_top$ = 8						; size = 4
_bottom$ = 12						; size = 4
_edge$ = 16						; size = 4
?construct_plain_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z PROC ; construct_plain_triangle_edge, COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 202  : 
; 203  : 	int
; 204  : 		j_end;
; 205  : 
; 206  : 	edge->j = ceil_fixed28_point4 ( triangle_points[top].j );

  00009	8b 45 08	 mov	 eax, DWORD PTR _top$[ebp]
  0000c	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax*8+4]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ?ceil_fixed28_point4@@YGHH@Z ; ceil_fixed28_point4
  00019	8b 55 10	 mov	 edx, DWORD PTR _edge$[ebp]
  0001c	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 207  : 
; 208  : 	j_end = ceil_fixed28_point4 ( triangle_points[bottom].j );

  0001f	8b 45 0c	 mov	 eax, DWORD PTR _bottom$[ebp]
  00022	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax*8+4]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?ceil_fixed28_point4@@YGHH@Z ; ceil_fixed28_point4
  0002f	89 45 fc	 mov	 DWORD PTR _j_end$[ebp], eax

; 209  : 
; 210  : 	edge->height = j_end - edge->j;

  00032	8b 45 10	 mov	 eax, DWORD PTR _edge$[ebp]
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _j_end$[ebp]
  00038	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0003b	8b 55 10	 mov	 edx, DWORD PTR _edge$[ebp]
  0003e	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 211  : 
; 212  : 	if ( edge->height )

  00041	8b 45 10	 mov	 eax, DWORD PTR _edge$[ebp]
  00044	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00048	0f 84 b0 00 00
	00		 je	 $LN1@construct_

; 213  : 	{
; 214  : 
; 215  : 		int
; 216  : 			dn,
; 217  : 			dm,
; 218  : 			initial_numerator;
; 219  : 
; 220  : 		dn = triangle_points[bottom].j - triangle_points[top].j;

  0004e	8b 45 0c	 mov	 eax, DWORD PTR _bottom$[ebp]
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _top$[ebp]
  00054	8b 14 c5 04 00
	00 00		 mov	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax*8+4]
  0005b	2b 14 cd 04 00
	00 00		 sub	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[ecx*8+4]
  00062	89 55 f8	 mov	 DWORD PTR _dn$3[ebp], edx

; 221  : 
; 222  : 		dm = triangle_points[bottom].i - triangle_points[top].i;

  00065	8b 45 0c	 mov	 eax, DWORD PTR _bottom$[ebp]
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _top$[ebp]
  0006b	8b 14 c5 00 00
	00 00		 mov	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax*8]
  00072	2b 14 cd 00 00
	00 00		 sub	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[ecx*8]
  00079	89 55 f4	 mov	 DWORD PTR _dm$2[ebp], edx

; 223  : 	
; 224  : 		initial_numerator = ( dm * 16 * edge->j ) - ( dm * triangle_points[top].j ) +

  0007c	8b 45 f4	 mov	 eax, DWORD PTR _dm$2[ebp]
  0007f	c1 e0 04	 shl	 eax, 4
  00082	8b 4d 10	 mov	 ecx, DWORD PTR _edge$[ebp]
  00085	0f af 41 14	 imul	 eax, DWORD PTR [ecx+20]
  00089	8b 55 08	 mov	 edx, DWORD PTR _top$[ebp]
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR _dm$2[ebp]
  0008f	0f af 0c d5 04
	00 00 00	 imul	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[edx*8+4]
  00097	2b c1		 sub	 eax, ecx
  00099	8b 55 08	 mov	 edx, DWORD PTR _top$[ebp]
  0009c	8b 4d f8	 mov	 ecx, DWORD PTR _dn$3[ebp]
  0009f	0f af 0c d5 00
	00 00 00	 imul	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[edx*8]
  000a7	03 c1		 add	 eax, ecx
  000a9	8b 55 f8	 mov	 edx, DWORD PTR _dn$3[ebp]
  000ac	c1 e2 04	 shl	 edx, 4
  000af	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  000b3	89 45 f0	 mov	 DWORD PTR _initial_numerator$1[ebp], eax

; 225  : 					( dn * triangle_points[top].i ) - ( 1 ) + ( dn * 16 );
; 226  : 
; 227  : 		calculate_floor_div_mod ( initial_numerator, ( dn * 16 ), &edge->i, &edge->error_term );

  000b6	8b 45 10	 mov	 eax, DWORD PTR _edge$[ebp]
  000b9	83 c0 10	 add	 eax, 16			; 00000010H
  000bc	50		 push	 eax
  000bd	8b 4d 10	 mov	 ecx, DWORD PTR _edge$[ebp]
  000c0	51		 push	 ecx
  000c1	8b 55 f8	 mov	 edx, DWORD PTR _dn$3[ebp]
  000c4	c1 e2 04	 shl	 edx, 4
  000c7	52		 push	 edx
  000c8	8b 45 f0	 mov	 eax, DWORD PTR _initial_numerator$1[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?calculate_floor_div_mod@@YGXHHPAH0@Z ; calculate_floor_div_mod

; 228  : 
; 229  : 		calculate_floor_div_mod ( ( dm * 16 ), ( dn * 16 ), &edge->i_step, &edge->numerator );

  000d1	8b 45 10	 mov	 eax, DWORD PTR _edge$[ebp]
  000d4	83 c0 08	 add	 eax, 8
  000d7	50		 push	 eax
  000d8	8b 4d 10	 mov	 ecx, DWORD PTR _edge$[ebp]
  000db	83 c1 04	 add	 ecx, 4
  000de	51		 push	 ecx
  000df	8b 55 f8	 mov	 edx, DWORD PTR _dn$3[ebp]
  000e2	c1 e2 04	 shl	 edx, 4
  000e5	52		 push	 edx
  000e6	8b 45 f4	 mov	 eax, DWORD PTR _dm$2[ebp]
  000e9	c1 e0 04	 shl	 eax, 4
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ?calculate_floor_div_mod@@YGXHHPAH0@Z ; calculate_floor_div_mod

; 230  : 
; 231  : 		edge->denominator = ( dn * 16 );

  000f2	8b 45 f8	 mov	 eax, DWORD PTR _dn$3[ebp]
  000f5	c1 e0 04	 shl	 eax, 4
  000f8	8b 4d 10	 mov	 ecx, DWORD PTR _edge$[ebp]
  000fb	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN1@construct_:

; 232  : 	}
; 233  : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 0c 00	 ret	 12			; 0000000cH
?construct_plain_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z ENDP ; construct_plain_triangle_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\heckfill.c
;	COMDAT ?fill_software_plain_polygon@@YGXI@Z
_TEXT	SEGMENT
tv170 = -144						; size = 4
tv140 = -144						; size = 4
_word_ptr$1 = -76					; size = 4
_width$2 = -72						; size = 4
_word_ptr$3 = -68					; size = 4
_width$4 = -64						; size = 4
_screen_ptr$ = -60					; size = 4
_right_edge$ = -56					; size = 4
_left_edge$ = -52					; size = 4
_y2$ = -48						; size = 4
_y1$ = -44						; size = 4
_y0$ = -40						; size = 4
_screen_pitch$ = -36					; size = 4
_y$ = -32						; size = 4
_height$ = -28						; size = 4
_middle_is_left$ = -24					; size = 4
_bottom_for_compare$ = -20				; size = 4
_middle_for_compare$ = -16				; size = 4
_bottom$ = -12						; size = 4
_middle$ = -8						; size = 4
_top$ = -4						; size = 4
_colour$ = 8						; size = 4
?fill_software_plain_polygon@@YGXI@Z PROC		; fill_software_plain_polygon, COMDAT

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 443  : 
; 444  : 	int
; 445  : 		top,
; 446  : 		middle,
; 447  : 		bottom,
; 448  : 		middle_for_compare,
; 449  : 		bottom_for_compare,
; 450  : 		middle_is_left,
; 451  : 		height,
; 452  : 		y,
; 453  : 		screen_pitch;
; 454  : 
; 455  : 	fixed28_point4
; 456  : 		y0,
; 457  : 		y1,
; 458  : 		y2;
; 459  : 
; 460  : 	triangle_edge_data
; 461  : 		*left_edge,
; 462  : 		*right_edge;
; 463  : 
; 464  : 	unsigned char
; 465  : 		*screen_ptr;
; 466  : 
; 467  : 	//
; 468  : 	// This routine only accepts TRIANGLES at the moment.
; 469  : 	//
; 470  : 
; 471  : 	ASSERT ( active_screen );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 18		 jne	 SHORT $LN6@fill_softw
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fill_software_plain_polygon@@YGXI@Z@4JA
  0001a	83 c0 1d	 add	 eax, 29			; 0000001dH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@NPFOOJML@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@fill_softw:

; 472  : 
; 473  : 	ASSERT ( get_screen_locked ( active_screen ) );

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?get_screen_locked@@YGHPAUSCREEN@@@Z ; get_screen_locked
  00038	85 c0		 test	 eax, eax
  0003a	75 18		 jne	 SHORT $LN7@fill_softw
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fill_software_plain_polygon@@YGXI@Z@4JA
  00041	83 c0 1f	 add	 eax, 31			; 0000001fH
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@NPFOOJML@c?3?2users?2nhv90?2projects?2eech?2mo@
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@
  0004f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@fill_softw:

; 474  : 
; 475  : 	screen_ptr = get_screen_data ( active_screen );

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0005f	89 45 c4	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 476  : 
; 477  : 	screen_pitch = get_screen_pitch ( active_screen );

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0006d	89 45 dc	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 478  : 
; 479  : 	y0 = triangle_points[0].j;

  00070	b8 08 00 00 00	 mov	 eax, 8
  00075	6b c8 00	 imul	 ecx, eax, 0
  00078	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[ecx+4]
  0007e	89 55 d8	 mov	 DWORD PTR _y0$[ebp], edx

; 480  : 	y1 = triangle_points[1].j;

  00081	b8 08 00 00 00	 mov	 eax, 8
  00086	c1 e0 00	 shl	 eax, 0
  00089	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax+4]
  0008f	89 4d d4	 mov	 DWORD PTR _y1$[ebp], ecx

; 481  : 	y2 = triangle_points[2].j;

  00092	b8 08 00 00 00	 mov	 eax, 8
  00097	d1 e0		 shl	 eax, 1
  00099	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A[eax+4]
  0009f	89 4d d0	 mov	 DWORD PTR _y2$[ebp], ecx

; 482  : 
; 483  : 	//
; 484  : 	// sort vertices in y
; 485  : 	//
; 486  : 
; 487  : 	if ( y0 < y1 )

  000a2	8b 45 d8	 mov	 eax, DWORD PTR _y0$[ebp]
  000a5	3b 45 d4	 cmp	 eax, DWORD PTR _y1$[ebp]
  000a8	7d 78		 jge	 SHORT $LN8@fill_softw

; 488  : 	{
; 489  : 
; 490  : 		if ( y2 < y0 )	{ top = 2; middle = 0; bottom = 1; middle_for_compare = 0; bottom_for_compare = 1; }

  000aa	8b 45 d0	 mov	 eax, DWORD PTR _y2$[ebp]
  000ad	3b 45 d8	 cmp	 eax, DWORD PTR _y0$[ebp]
  000b0	7d 25		 jge	 SHORT $LN10@fill_softw
  000b2	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _top$[ebp], 2
  000b9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 0
  000c0	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 1
  000c7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 0
  000ce	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 1

; 491  : 		else

  000d5	eb 49		 jmp	 SHORT $LN11@fill_softw
$LN10@fill_softw:

; 492  : 		{
; 493  : 
; 494  : 			top = 0;

  000d7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _top$[ebp], 0

; 495  : 
; 496  : 			if ( y1 < y2 )	{ middle = 1; bottom = 2; middle_for_compare = 1; bottom_for_compare = 2; }

  000de	8b 45 d4	 mov	 eax, DWORD PTR _y1$[ebp]
  000e1	3b 45 d0	 cmp	 eax, DWORD PTR _y2$[ebp]
  000e4	7d 1e		 jge	 SHORT $LN12@fill_softw
  000e6	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 1
  000ed	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 2
  000f4	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 1
  000fb	c7 45 ec 02 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 2
  00102	eb 1c		 jmp	 SHORT $LN11@fill_softw
$LN12@fill_softw:

; 497  : 			else				{ middle = 2; bottom = 1; middle_for_compare = 2; bottom_for_compare = 1; }

  00104	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 2
  0010b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 1
  00112	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 2
  00119	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 1
$LN11@fill_softw:

; 498  : 		}
; 499  : 	}
; 500  : 	else

  00120	eb 76		 jmp	 SHORT $LN9@fill_softw
$LN8@fill_softw:

; 501  : 	{
; 502  : 
; 503  : 		if ( y2 < y1) { top = 2; middle = 1; bottom = 0; middle_for_compare = 1; bottom_for_compare = 0; }

  00122	8b 45 d0	 mov	 eax, DWORD PTR _y2$[ebp]
  00125	3b 45 d4	 cmp	 eax, DWORD PTR _y1$[ebp]
  00128	7d 25		 jge	 SHORT $LN14@fill_softw
  0012a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _top$[ebp], 2
  00131	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 1
  00138	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 0
  0013f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 1
  00146	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 0

; 504  : 		else

  0014d	eb 49		 jmp	 SHORT $LN9@fill_softw
$LN14@fill_softw:

; 505  : 		{
; 506  : 
; 507  : 			top = 1;

  0014f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _top$[ebp], 1

; 508  : 
; 509  : 			if ( y0 < y2 )	{ middle = 0; bottom = 2; middle_for_compare = 3; bottom_for_compare = 2; }

  00156	8b 45 d8	 mov	 eax, DWORD PTR _y0$[ebp]
  00159	3b 45 d0	 cmp	 eax, DWORD PTR _y2$[ebp]
  0015c	7d 1e		 jge	 SHORT $LN16@fill_softw
  0015e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 0
  00165	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 2
  0016c	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 3
  00173	c7 45 ec 02 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 2
  0017a	eb 1c		 jmp	 SHORT $LN9@fill_softw
$LN16@fill_softw:

; 510  : 			else				{ middle = 2; bottom = 0; middle_for_compare = 2; bottom_for_compare = 3; }

  0017c	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _middle$[ebp], 2
  00183	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bottom$[ebp], 0
  0018a	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _middle_for_compare$[ebp], 2
  00191	c7 45 ec 03 00
	00 00		 mov	 DWORD PTR _bottom_for_compare$[ebp], 3
$LN9@fill_softw:

; 511  : 		}
; 512  : 	}
; 513  : 
; 514  : 	construct_triangle_gradients ();

  00198	e8 00 00 00 00	 call	 ?construct_triangle_gradients@@YGHXZ ; construct_triangle_gradients

; 515  : 
; 516  : 	construct_plain_triangle_edge ( top, bottom, &top_to_bottom_edge );

  0019d	68 00 00 00 00	 push	 OFFSET ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_bottom_edge
  001a2	8b 45 f4	 mov	 eax, DWORD PTR _bottom$[ebp]
  001a5	50		 push	 eax
  001a6	8b 4d fc	 mov	 ecx, DWORD PTR _top$[ebp]
  001a9	51		 push	 ecx
  001aa	e8 00 00 00 00	 call	 ?construct_plain_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z ; construct_plain_triangle_edge

; 517  : 	construct_plain_triangle_edge ( top, middle, &top_to_middle_edge );

  001af	68 00 00 00 00	 push	 OFFSET ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_middle_edge
  001b4	8b 45 f8	 mov	 eax, DWORD PTR _middle$[ebp]
  001b7	50		 push	 eax
  001b8	8b 4d fc	 mov	 ecx, DWORD PTR _top$[ebp]
  001bb	51		 push	 ecx
  001bc	e8 00 00 00 00	 call	 ?construct_plain_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z ; construct_plain_triangle_edge

; 518  : 	construct_plain_triangle_edge ( middle, bottom, &middle_to_bottom_edge );

  001c1	68 00 00 00 00	 push	 OFFSET ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; middle_to_bottom_edge
  001c6	8b 45 f4	 mov	 eax, DWORD PTR _bottom$[ebp]
  001c9	50		 push	 eax
  001ca	8b 4d f8	 mov	 ecx, DWORD PTR _middle$[ebp]
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 ?construct_plain_triangle_edge@@YGXHHPAUTRIANGLE_EDGE_DATA@@@Z ; construct_plain_triangle_edge

; 519  : 
; 520  : 	//
; 521  : 	// the triangle is clockwise, so if bottom > middle then middle is right
; 522  : 	//
; 523  : 
; 524  : 	if ( bottom_for_compare > middle_for_compare)

  001d3	8b 45 ec	 mov	 eax, DWORD PTR _bottom_for_compare$[ebp]
  001d6	3b 45 f0	 cmp	 eax, DWORD PTR _middle_for_compare$[ebp]
  001d9	7e 17		 jle	 SHORT $LN18@fill_softw

; 525  : 	{
; 526  : 
; 527  : 		middle_is_left = FALSE;

  001db	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _middle_is_left$[ebp], 0

; 528  : 		left_edge = &top_to_bottom_edge;

  001e2	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _left_edge$[ebp], OFFSET ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_bottom_edge

; 529  : 		right_edge = &top_to_middle_edge;

  001e9	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _right_edge$[ebp], OFFSET ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_middle_edge

; 530  : 	}
; 531  : 	else

  001f0	eb 15		 jmp	 SHORT $LN19@fill_softw
$LN18@fill_softw:

; 532  : 	{
; 533  : 
; 534  : 		middle_is_left = TRUE;

  001f2	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _middle_is_left$[ebp], 1

; 535  : 		left_edge = &top_to_middle_edge;

  001f9	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _left_edge$[ebp], OFFSET ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_middle_edge

; 536  : 		right_edge = &top_to_bottom_edge;

  00200	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _right_edge$[ebp], OFFSET ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_bottom_edge
$LN19@fill_softw:

; 537  : 	}
; 538  : 
; 539  : 	height = top_to_middle_edge.height;

  00207	a1 18 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  0020c	89 45 e4	 mov	 DWORD PTR _height$[ebp], eax

; 540  : 
; 541  : 	y = top_to_middle_edge.j;

  0020f	a1 14 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  00214	89 45 e0	 mov	 DWORD PTR _y$[ebp], eax

; 542  : 
; 543  : 	screen_ptr += top_to_middle_edge.j * screen_pitch;

  00217	a1 14 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  0021c	0f af 45 dc	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00220	03 45 c4	 add	 eax, DWORD PTR _screen_ptr$[ebp]
  00223	89 45 c4	 mov	 DWORD PTR _screen_ptr$[ebp], eax
$LN2@fill_softw:

; 544  : 
; 545  : 	while ( height-- )

  00226	8b 45 e4	 mov	 eax, DWORD PTR _height$[ebp]
  00229	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv140[ebp], eax
  0022f	8b 4d e4	 mov	 ecx, DWORD PTR _height$[ebp]
  00232	83 e9 01	 sub	 ecx, 1
  00235	89 4d e4	 mov	 DWORD PTR _height$[ebp], ecx
  00238	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR tv140[ebp], 0
  0023f	0f 84 17 01 00
	00		 je	 $LN3@fill_softw

; 546  : 	{
; 547  : 
; 548  : 		int
; 549  : 			width;
; 550  : 
; 551  : 		unsigned short int
; 552  : 			*word_ptr;
; 553  : 
; 554  : 		word_ptr = ( unsigned short int * ) screen_ptr;

  00245	8b 45 c4	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  00248	89 45 bc	 mov	 DWORD PTR _word_ptr$3[ebp], eax

; 555  : 
; 556  : 		word_ptr += left_edge->i;

  0024b	8b 45 cc	 mov	 eax, DWORD PTR _left_edge$[ebp]
  0024e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00250	8b 55 bc	 mov	 edx, DWORD PTR _word_ptr$3[ebp]
  00253	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00256	89 45 bc	 mov	 DWORD PTR _word_ptr$3[ebp], eax

; 557  : 
; 558  : 		width = right_edge->i - left_edge->i;

  00259	8b 45 c8	 mov	 eax, DWORD PTR _right_edge$[ebp]
  0025c	8b 4d cc	 mov	 ecx, DWORD PTR _left_edge$[ebp]
  0025f	8b 10		 mov	 edx, DWORD PTR [eax]
  00261	2b 11		 sub	 edx, DWORD PTR [ecx]
  00263	89 55 c0	 mov	 DWORD PTR _width$4[ebp], edx

; 559  : 
; 560  : 		if ( width > 0 )

  00266	83 7d c0 00	 cmp	 DWORD PTR _width$4[ebp], 0
  0026a	7e 11		 jle	 SHORT $LN20@fill_softw

; 561  : 		{
; 562  : 
; 563  : 			solid_fill_horizontal_line ( word_ptr, colour, width );

  0026c	8b 45 c0	 mov	 eax, DWORD PTR _width$4[ebp]
  0026f	50		 push	 eax
  00270	8b 4d 08	 mov	 ecx, DWORD PTR _colour$[ebp]
  00273	51		 push	 ecx
  00274	8b 55 bc	 mov	 edx, DWORD PTR _word_ptr$3[ebp]
  00277	52		 push	 edx
  00278	e8 00 00 00 00	 call	 ?solid_fill_horizontal_line@@YGXPAGHH@Z ; solid_fill_horizontal_line
$LN20@fill_softw:

; 564  : 		}
; 565  : 
; 566  : 		STEP_PLAIN_TRIANGLE_EDGE ( top_to_middle_edge );

  0027d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A
  00282	03 05 04 00 00
	00		 add	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+4
  00288	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  0028d	a1 14 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  00292	83 c0 01	 add	 eax, 1
  00295	a3 14 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+20, eax
  0029a	a1 18 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  0029f	83 e8 01	 sub	 eax, 1
  002a2	a3 18 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+24, eax
  002a7	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  002ac	03 05 08 00 00
	00		 add	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+8
  002b2	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
  002b7	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  002bc	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  002c2	7c 1d		 jl	 SHORT $LN21@fill_softw
  002c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A
  002c9	83 c0 01	 add	 eax, 1
  002cc	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  002d1	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  002d6	2b 05 0c 00 00
	00		 sub	 eax, DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  002dc	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_middle_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
$LN21@fill_softw:

; 567  : 
; 568  : 		STEP_PLAIN_TRIANGLE_EDGE ( top_to_bottom_edge );

  002e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  002e6	03 05 04 00 00
	00		 add	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+4
  002ec	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  002f1	a1 14 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  002f6	83 c0 01	 add	 eax, 1
  002f9	a3 14 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20, eax
  002fe	a1 18 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  00303	83 e8 01	 sub	 eax, 1
  00306	a3 18 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24, eax
  0030b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  00310	03 05 08 00 00
	00		 add	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+8
  00316	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
  0031b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  00320	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  00326	7c 1d		 jl	 SHORT $LN22@fill_softw
  00328	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  0032d	83 c0 01	 add	 eax, 1
  00330	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  00335	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  0033a	2b 05 0c 00 00
	00		 sub	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  00340	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
$LN22@fill_softw:

; 569  : 
; 570  : 		screen_ptr += screen_pitch;

  00345	8b 45 c4	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  00348	03 45 dc	 add	 eax, DWORD PTR _screen_pitch$[ebp]
  0034b	89 45 c4	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 571  : 
; 572  : 		y++;

  0034e	8b 45 e0	 mov	 eax, DWORD PTR _y$[ebp]
  00351	83 c0 01	 add	 eax, 1
  00354	89 45 e0	 mov	 DWORD PTR _y$[ebp], eax

; 573  : 	}

  00357	e9 ca fe ff ff	 jmp	 $LN2@fill_softw
$LN3@fill_softw:

; 574  : 
; 575  : 	height = middle_to_bottom_edge.height;

  0035c	a1 18 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  00361	89 45 e4	 mov	 DWORD PTR _height$[ebp], eax

; 576  : 
; 577  : 	if ( middle_is_left )

  00364	83 7d e8 00	 cmp	 DWORD PTR _middle_is_left$[ebp], 0
  00368	74 10		 je	 SHORT $LN23@fill_softw

; 578  : 	{
; 579  : 
; 580  : 		left_edge = &middle_to_bottom_edge;

  0036a	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _left_edge$[ebp], OFFSET ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; middle_to_bottom_edge

; 581  : 
; 582  : 		right_edge = &top_to_bottom_edge;

  00371	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _right_edge$[ebp], OFFSET ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_bottom_edge

; 583  : 	}
; 584  : 	else

  00378	eb 0e		 jmp	 SHORT $LN4@fill_softw
$LN23@fill_softw:

; 585  : 	{
; 586  : 
; 587  : 		left_edge = &top_to_bottom_edge;

  0037a	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _left_edge$[ebp], OFFSET ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; top_to_bottom_edge

; 588  : 
; 589  : 		right_edge = &middle_to_bottom_edge;

  00381	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _right_edge$[ebp], OFFSET ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A ; middle_to_bottom_edge
$LN4@fill_softw:

; 590  : 	}
; 591  : 	
; 592  : 	while ( height--)

  00388	8b 45 e4	 mov	 eax, DWORD PTR _height$[ebp]
  0038b	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv170[ebp], eax
  00391	8b 4d e4	 mov	 ecx, DWORD PTR _height$[ebp]
  00394	83 e9 01	 sub	 ecx, 1
  00397	89 4d e4	 mov	 DWORD PTR _height$[ebp], ecx
  0039a	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR tv170[ebp], 0
  003a1	0f 84 17 01 00
	00		 je	 $LN1@fill_softw

; 593  : 	{
; 594  : 
; 595  : 		int
; 596  : 			width;
; 597  : 
; 598  : 		unsigned short int
; 599  : 			*word_ptr;
; 600  : 
; 601  : 		word_ptr = ( unsigned short int * ) screen_ptr;

  003a7	8b 45 c4	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  003aa	89 45 b4	 mov	 DWORD PTR _word_ptr$1[ebp], eax

; 602  : 
; 603  : 		word_ptr += left_edge->i;

  003ad	8b 45 cc	 mov	 eax, DWORD PTR _left_edge$[ebp]
  003b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b2	8b 55 b4	 mov	 edx, DWORD PTR _word_ptr$1[ebp]
  003b5	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  003b8	89 45 b4	 mov	 DWORD PTR _word_ptr$1[ebp], eax

; 604  : 
; 605  : 		width = right_edge->i - left_edge->i;

  003bb	8b 45 c8	 mov	 eax, DWORD PTR _right_edge$[ebp]
  003be	8b 4d cc	 mov	 ecx, DWORD PTR _left_edge$[ebp]
  003c1	8b 10		 mov	 edx, DWORD PTR [eax]
  003c3	2b 11		 sub	 edx, DWORD PTR [ecx]
  003c5	89 55 b8	 mov	 DWORD PTR _width$2[ebp], edx

; 606  : 
; 607  : 		if ( width > 0 )

  003c8	83 7d b8 00	 cmp	 DWORD PTR _width$2[ebp], 0
  003cc	7e 11		 jle	 SHORT $LN25@fill_softw

; 608  : 		{
; 609  : 
; 610  : 			solid_fill_horizontal_line ( word_ptr, colour, width );

  003ce	8b 45 b8	 mov	 eax, DWORD PTR _width$2[ebp]
  003d1	50		 push	 eax
  003d2	8b 4d 08	 mov	 ecx, DWORD PTR _colour$[ebp]
  003d5	51		 push	 ecx
  003d6	8b 55 b4	 mov	 edx, DWORD PTR _word_ptr$1[ebp]
  003d9	52		 push	 edx
  003da	e8 00 00 00 00	 call	 ?solid_fill_horizontal_line@@YGXPAGHH@Z ; solid_fill_horizontal_line
$LN25@fill_softw:

; 611  : 		}
; 612  : 
; 613  : 		STEP_PLAIN_TRIANGLE_EDGE ( middle_to_bottom_edge );

  003df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  003e4	03 05 04 00 00
	00		 add	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+4
  003ea	a3 00 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  003ef	a1 14 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  003f4	83 c0 01	 add	 eax, 1
  003f7	a3 14 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20, eax
  003fc	a1 18 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  00401	83 e8 01	 sub	 eax, 1
  00404	a3 18 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24, eax
  00409	a1 10 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  0040e	03 05 08 00 00
	00		 add	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+8
  00414	a3 10 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
  00419	a1 10 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  0041e	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  00424	7c 1d		 jl	 SHORT $LN26@fill_softw
  00426	a1 00 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  0042b	83 c0 01	 add	 eax, 1
  0042e	a3 00 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  00433	a1 10 00 00 00	 mov	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  00438	2b 05 0c 00 00
	00		 sub	 eax, DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  0043e	a3 10 00 00 00	 mov	 DWORD PTR ?middle_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
$LN26@fill_softw:

; 614  : 
; 615  : 		STEP_PLAIN_TRIANGLE_EDGE ( top_to_bottom_edge );

  00443	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  00448	03 05 04 00 00
	00		 add	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+4
  0044e	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  00453	a1 14 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20
  00458	83 c0 01	 add	 eax, 1
  0045b	a3 14 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+20, eax
  00460	a1 18 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24
  00465	83 e8 01	 sub	 eax, 1
  00468	a3 18 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+24, eax
  0046d	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  00472	03 05 08 00 00
	00		 add	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+8
  00478	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
  0047d	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  00482	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  00488	7c 1d		 jl	 SHORT $LN27@fill_softw
  0048a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A
  0048f	83 c0 01	 add	 eax, 1
  00492	a3 00 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A, eax
  00497	a1 10 00 00 00	 mov	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16
  0049c	2b 05 0c 00 00
	00		 sub	 eax, DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+12
  004a2	a3 10 00 00 00	 mov	 DWORD PTR ?top_to_bottom_edge@@3UTRIANGLE_EDGE_DATA@@A+16, eax
$LN27@fill_softw:

; 616  : 
; 617  : 		screen_ptr += screen_pitch;

  004a7	8b 45 c4	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  004aa	03 45 dc	 add	 eax, DWORD PTR _screen_pitch$[ebp]
  004ad	89 45 c4	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 618  : 
; 619  : 		y++;

  004b0	8b 45 e0	 mov	 eax, DWORD PTR _y$[ebp]
  004b3	83 c0 01	 add	 eax, 1
  004b6	89 45 e0	 mov	 DWORD PTR _y$[ebp], eax

; 620  : 	}

  004b9	e9 ca fe ff ff	 jmp	 $LN4@fill_softw
$LN1@fill_softw:

; 621  : }

  004be	5f		 pop	 edi
  004bf	5e		 pop	 esi
  004c0	5b		 pop	 ebx
  004c1	8b e5		 mov	 esp, ebp
  004c3	5d		 pop	 ebp
  004c4	c2 04 00	 ret	 4
?fill_software_plain_polygon@@YGXI@Z ENDP		; fill_software_plain_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\heckfill.c
;	COMDAT ?construct_triangle_gradients@@YGHXZ
_TEXT	SEGMENT
_one_over_dy$ = -36					; size = 4
_one_over_dx$ = -32					; size = 4
_d12j$ = -28						; size = 4
_d02j$ = -24						; size = 4
_d12i$ = -20						; size = 4
_d02i$ = -16						; size = 4
_x1y0_minus_x0y1$ = -12					; size = 4
_x0y1$ = -8						; size = 4
_x1y0$ = -4						; size = 4
?construct_triangle_gradients@@YGHXZ PROC		; construct_triangle_gradients, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 158  : 
; 159  : 	float
; 160  : 		x1y0,
; 161  : 		x0y1,
; 162  : 		x1y0_minus_x0y1,
; 163  : 		d02i,
; 164  : 		d12i,
; 165  : 		d02j,
; 166  : 		d12j,
; 167  : 		one_over_dx,
; 168  : 		one_over_dy;
; 169  : 
; 170  : 	d02i = triangle_point0->i - triangle_point2->i;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?triangle_point0@@3PAUVERTEX@@A ; triangle_point0
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  00014	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00019	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  0001e	f3 0f 11 45 f0	 movss	 DWORD PTR _d02i$[ebp], xmm0

; 171  : 	d12i = triangle_point1->i - triangle_point2->i;

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?triangle_point1@@3PAUVERTEX@@A ; triangle_point1
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  0002e	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00033	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00038	f3 0f 11 45 ec	 movss	 DWORD PTR _d12i$[ebp], xmm0

; 172  : 	d02j = triangle_point0->j - triangle_point2->j;

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?triangle_point0@@3PAUVERTEX@@A ; triangle_point0
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  00048	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0004d	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00052	f3 0f 11 45 e8	 movss	 DWORD PTR _d02j$[ebp], xmm0

; 173  : 	d12j = triangle_point1->j - triangle_point2->j;

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?triangle_point1@@3PAUVERTEX@@A ; triangle_point1
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  00062	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00067	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  0006c	f3 0f 11 45 e4	 movss	 DWORD PTR _d12j$[ebp], xmm0

; 174  : 
; 175  : 	x0y1 = d02i * d12j;

  00071	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _d02i$[ebp]
  00076	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _d12j$[ebp]
  0007b	f3 0f 11 45 f8	 movss	 DWORD PTR _x0y1$[ebp], xmm0

; 176  : 	x1y0 = d12i * d02j;

  00080	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _d12i$[ebp]
  00085	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _d02j$[ebp]
  0008a	f3 0f 11 45 fc	 movss	 DWORD PTR _x1y0$[ebp], xmm0

; 177  : 	x1y0_minus_x0y1 = x1y0 - x0y1;

  0008f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1y0$[ebp]
  00094	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _x0y1$[ebp]
  00099	f3 0f 11 45 f4	 movss	 DWORD PTR _x1y0_minus_x0y1$[ebp], xmm0

; 178  : 
; 179  : 	if ( *( ( int * ) &x1y0_minus_x0y1 ) == *( ( int * ) &float_value_zero ) )

  0009e	8b 45 f4	 mov	 eax, DWORD PTR _x1y0_minus_x0y1$[ebp]
  000a1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  000a7	75 04		 jne	 SHORT $LN2@construct_

; 180  : 	{
; 181  : 
; 182  : 		return ( FALSE );

  000a9	33 c0		 xor	 eax, eax
  000ab	eb 6b		 jmp	 SHORT $LN1@construct_
$LN2@construct_:

; 183  : 	}
; 184  : 
; 185  : 	one_over_dx = 1.0 / x1y0_minus_x0y1;

  000ad	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x1y0_minus_x0y1$[ebp]
  000b2	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000ba	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000be	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000c2	f3 0f 11 45 e0	 movss	 DWORD PTR _one_over_dx$[ebp], xmm0

; 186  : 
; 187  : 	one_over_dy = -one_over_dx;

  000c7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _one_over_dx$[ebp]
  000cc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000d3	f3 0f 11 45 dc	 movss	 DWORD PTR _one_over_dy$[ebp], xmm0

; 188  : 
; 189  : 	triangle_gradients_points[0] = triangle_point0;

  000d8	b8 04 00 00 00	 mov	 eax, 4
  000dd	6b c8 00	 imul	 ecx, eax, 0
  000e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?triangle_point0@@3PAUVERTEX@@A ; triangle_point0
  000e6	89 91 00 00 00
	00		 mov	 DWORD PTR ?triangle_gradients_points@@3PAPAUVERTEX@@A[ecx], edx

; 190  : 	triangle_gradients_points[1] = triangle_point1;

  000ec	b8 04 00 00 00	 mov	 eax, 4
  000f1	c1 e0 00	 shl	 eax, 0
  000f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point1@@3PAUVERTEX@@A ; triangle_point1
  000fa	89 88 00 00 00
	00		 mov	 DWORD PTR ?triangle_gradients_points@@3PAPAUVERTEX@@A[eax], ecx

; 191  : 	triangle_gradients_points[2] = triangle_point2;

  00100	b8 04 00 00 00	 mov	 eax, 4
  00105	d1 e0		 shl	 eax, 1
  00107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?triangle_point2@@3PAUVERTEX@@A ; triangle_point2
  0010d	89 88 00 00 00
	00		 mov	 DWORD PTR ?triangle_gradients_points@@3PAPAUVERTEX@@A[eax], ecx

; 192  : 
; 193  : 	return ( TRUE );

  00113	b8 01 00 00 00	 mov	 eax, 1
$LN1@construct_:

; 194  : }

  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
?construct_triangle_gradients@@YGHXZ ENDP		; construct_triangle_gradients
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\heckfill.c
;	COMDAT ?calculate_floor_div_mod@@YGXHHPAH0@Z
_TEXT	SEGMENT
_numerator$ = 8						; size = 4
_denominator$ = 12					; size = 4
_floor$ = 16						; size = 4
_mod$ = 20						; size = 4
?calculate_floor_div_mod@@YGXHHPAH0@Z PROC		; calculate_floor_div_mod, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 117  : 
; 118  : 	ASSERT ( denominator > 0 );

  00009	83 7d 0c 00	 cmp	 DWORD PTR _denominator$[ebp], 0
  0000d	7f 18		 jg	 SHORT $LN2@calculate_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??calculate_floor_div_mod@@YGXHHPAH0@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@NPFOOJML@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NNCKOAFG@denominator?5?$DO?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@calculate_:

; 119  : 
; 120  : 	if ( numerator >= 0 )

  00027	83 7d 08 00	 cmp	 DWORD PTR _numerator$[ebp], 0
  0002b	7c 18		 jl	 SHORT $LN3@calculate_

; 121  : 	{
; 122  : 
; 123  : 		//
; 124  : 		// positive case, C is okay
; 125  : 		//
; 126  : 
; 127  : 		*floor = get_div_mod ( numerator, denominator, mod );

  0002d	8b 45 14	 mov	 eax, DWORD PTR _mod$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _denominator$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 08	 mov	 edx, DWORD PTR _numerator$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ?get_div_mod@@YGHHHPAH@Z ; get_div_mod
  0003e	8b 4d 10	 mov	 ecx, DWORD PTR _floor$[ebp]
  00041	89 01		 mov	 DWORD PTR [ecx], eax

; 128  : 	}
; 129  : 	else

  00043	eb 3c		 jmp	 SHORT $LN1@calculate_
$LN3@calculate_:

; 130  : 	{
; 131  : 
; 132  : 		//
; 133  : 		// Numerator is negative, do the right thing
; 134  : 		//
; 135  : 
; 136  : 		*floor = - ( get_div_mod ( ( -numerator ), denominator, mod ) );

  00045	8b 45 14	 mov	 eax, DWORD PTR _mod$[ebp]
  00048	50		 push	 eax
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _denominator$[ebp]
  0004c	51		 push	 ecx
  0004d	8b 55 08	 mov	 edx, DWORD PTR _numerator$[ebp]
  00050	f7 da		 neg	 edx
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 ?get_div_mod@@YGHHHPAH@Z ; get_div_mod
  00058	f7 d8		 neg	 eax
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _floor$[ebp]
  0005d	89 01		 mov	 DWORD PTR [ecx], eax

; 137  : 
; 138  : 		if ( *mod )

  0005f	8b 45 14	 mov	 eax, DWORD PTR _mod$[ebp]
  00062	83 38 00	 cmp	 DWORD PTR [eax], 0
  00065	74 1a		 je	 SHORT $LN1@calculate_

; 139  : 		{
; 140  : 
; 141  : 			//
; 142  : 			// there is a remainder
; 143  : 			//
; 144  : 
; 145  : 			(*floor)--;

  00067	8b 45 10	 mov	 eax, DWORD PTR _floor$[ebp]
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	83 e9 01	 sub	 ecx, 1
  0006f	8b 55 10	 mov	 edx, DWORD PTR _floor$[ebp]
  00072	89 0a		 mov	 DWORD PTR [edx], ecx

; 146  : 
; 147  : 			*mod = denominator - *mod;

  00074	8b 45 14	 mov	 eax, DWORD PTR _mod$[ebp]
  00077	8b 4d 0c	 mov	 ecx, DWORD PTR _denominator$[ebp]
  0007a	2b 08		 sub	 ecx, DWORD PTR [eax]
  0007c	8b 55 14	 mov	 edx, DWORD PTR _mod$[ebp]
  0007f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@calculate_:

; 148  : 		}
; 149  : 	}
; 150  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 10 00	 ret	 16			; 00000010H
?calculate_floor_div_mod@@YGXHHPAH0@Z ENDP		; calculate_floor_div_mod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\heckfill.c
;	COMDAT ?draw_software_plain_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_point2$1 = -256					; size = 4
_point1$2 = -252					; size = 4
_fan_centre$3 = -248					; size = 4
_triangle_colour$4 = -244				; size = 4
_col$5 = -240						; size = 2
_outcode2$ = -236					; size = 4
_outcode$ = -232					; size = 4
_iymin$ = -228						; size = 4
_iymax$ = -224						; size = 4
_ixmin$ = -220						; size = 4
_ixmax$ = -216						; size = 4
_oymin$ = -212						; size = 4
_oymax$ = -208						; size = 4
_oxmin$ = -204						; size = 4
_oxmax$ = -200						; size = 4
_polygon$ = -196					; size = 4
_points$ = -192						; size = 192
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_x3$ = 24						; size = 4
_y3$ = 28						; size = 4
_colour$ = 32						; size = 4
?draw_software_plain_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z PROC ; draw_software_plain_triangle, COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 241  : 
; 242  : 	vertex
; 243  : 		points[3],
; 244  : 		*polygon;
; 245  : 
; 246  : 	float
; 247  : 		oxmax,
; 248  : 		oxmin,
; 249  : 		oymax,
; 250  : 		oymin;
; 251  : 
; 252  : 	unsigned int
; 253  : 		ixmax,
; 254  : 		ixmin,
; 255  : 		iymax,
; 256  : 		iymin;
; 257  : 
; 258  : 	int
; 259  : 		outcode,
; 260  : 		outcode2;
; 261  : 
; 262  : 	points[0].i = x1;

  0000c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00019	f3 0f 11 84 0d
	50 ff ff ff	 movss	 DWORD PTR _points$[ebp+ecx+16], xmm0

; 263  : 	points[0].j = y1;

  00022	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00027	6b c8 00	 imul	 ecx, eax, 0
  0002a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0002f	f3 0f 11 84 0d
	54 ff ff ff	 movss	 DWORD PTR _points$[ebp+ecx+20], xmm0

; 264  : 	points[0].next_vertex = &points[1];

  00038	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0003d	c1 e0 00	 shl	 eax, 0
  00040	8d 8c 05 40 ff
	ff ff		 lea	 ecx, DWORD PTR _points$[ebp+eax]
  00047	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0004c	6b c2 00	 imul	 eax, edx, 0
  0004f	89 8c 05 68 ff
	ff ff		 mov	 DWORD PTR _points$[ebp+eax+40], ecx

; 265  : 
; 266  : 	points[1].i = x2;

  00056	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0005b	c1 e0 00	 shl	 eax, 0
  0005e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00063	f3 0f 11 84 05
	50 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+16], xmm0

; 267  : 	points[1].j = y2;

  0006c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00071	c1 e0 00	 shl	 eax, 0
  00074	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00079	f3 0f 11 84 05
	54 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+20], xmm0

; 268  : 	points[1].next_vertex = &points[2];

  00082	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00087	d1 e0		 shl	 eax, 1
  00089	8d 8c 05 40 ff
	ff ff		 lea	 ecx, DWORD PTR _points$[ebp+eax]
  00090	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00095	c1 e2 00	 shl	 edx, 0
  00098	89 8c 15 68 ff
	ff ff		 mov	 DWORD PTR _points$[ebp+edx+40], ecx

; 269  : 
; 270  : 	points[2].i = x3;

  0009f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a4	d1 e0		 shl	 eax, 1
  000a6	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _x3$[ebp]
  000ab	f3 0f 11 84 05
	50 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+16], xmm0

; 271  : 	points[2].j = y3;

  000b4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000b9	d1 e0		 shl	 eax, 1
  000bb	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  000c0	f3 0f 11 84 05
	54 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+20], xmm0

; 272  : 	points[2].next_vertex = NULL;

  000c9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000ce	d1 e0		 shl	 eax, 1
  000d0	c7 84 05 68 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _points$[ebp+eax+40], 0

; 273  : 
; 274  : 	polygon = points;

  000db	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _points$[ebp]
  000e1	89 85 3c ff ff
	ff		 mov	 DWORD PTR _polygon$[ebp], eax
$LN2@draw_softw:

; 275  : 
; 276  : 	while ( polygon )

  000e7	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _polygon$[ebp], 0
  000ee	0f 84 65 01 00
	00		 je	 $LN3@draw_softw

; 277  : 	{
; 278  : 
; 279  : 		oxmax = active_viewport.x_max - polygon->i;

  000f4	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _polygon$[ebp]
  000fa	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00102	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00107	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 280  : 		oxmin = polygon->i - active_viewport.x_min;

  0010f	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _polygon$[ebp]
  00115	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0011a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00122	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 281  : 		oymax = active_viewport.y_max - polygon->j;

  0012a	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _polygon$[ebp]
  00130	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00138	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  0013d	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 282  : 		oymin = polygon->j - active_viewport.y_min;

  00145	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _polygon$[ebp]
  0014b	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00150	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00158	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 283  : 
; 284  : 		ixmax = *( ( unsigned int * ) &oxmax );

  00160	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _oxmax$[ebp]
  00166	89 85 28 ff ff
	ff		 mov	 DWORD PTR _ixmax$[ebp], eax

; 285  : 		ixmin = *( ( unsigned int * ) &oxmin );

  0016c	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _oxmin$[ebp]
  00172	89 85 24 ff ff
	ff		 mov	 DWORD PTR _ixmin$[ebp], eax

; 286  : 		iymax = *( ( unsigned int * ) &oymax );

  00178	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _oymax$[ebp]
  0017e	89 85 20 ff ff
	ff		 mov	 DWORD PTR _iymax$[ebp], eax

; 287  : 		iymin = *( ( unsigned int * ) &oymin );

  00184	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _oymin$[ebp]
  0018a	89 85 1c ff ff
	ff		 mov	 DWORD PTR _iymin$[ebp], eax

; 288  : 
; 289  : 		ixmin >>= 31;

  00190	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _ixmin$[ebp]
  00196	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00199	89 85 24 ff ff
	ff		 mov	 DWORD PTR _ixmin$[ebp], eax

; 290  : 		iymin &= 0x80000000;

  0019f	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _iymin$[ebp]
  001a5	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001aa	89 85 1c ff ff
	ff		 mov	 DWORD PTR _iymin$[ebp], eax

; 291  : 		ixmax >>= 29;

  001b0	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _ixmax$[ebp]
  001b6	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  001b9	89 85 28 ff ff
	ff		 mov	 DWORD PTR _ixmax$[ebp], eax

; 292  : 		iymax &= 0x80000000;

  001bf	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _iymax$[ebp]
  001c5	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001ca	89 85 20 ff ff
	ff		 mov	 DWORD PTR _iymax$[ebp], eax

; 293  : 		iymin >>= 30;

  001d0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _iymin$[ebp]
  001d6	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  001d9	89 85 1c ff ff
	ff		 mov	 DWORD PTR _iymin$[ebp], eax

; 294  : 		ixmin &= 0x00000001;

  001df	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _ixmin$[ebp]
  001e5	83 e0 01	 and	 eax, 1
  001e8	89 85 24 ff ff
	ff		 mov	 DWORD PTR _ixmin$[ebp], eax

; 295  : 		iymax >>= 28;

  001ee	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _iymax$[ebp]
  001f4	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  001f7	89 85 20 ff ff
	ff		 mov	 DWORD PTR _iymax$[ebp], eax

; 296  : 		ixmax &= 0x00000004;

  001fd	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _ixmax$[ebp]
  00203	83 e0 04	 and	 eax, 4
  00206	89 85 28 ff ff
	ff		 mov	 DWORD PTR _ixmax$[ebp], eax

; 297  : 		ixmin |= iymin;

  0020c	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _ixmin$[ebp]
  00212	0b 85 1c ff ff
	ff		 or	 eax, DWORD PTR _iymin$[ebp]
  00218	89 85 24 ff ff
	ff		 mov	 DWORD PTR _ixmin$[ebp], eax

; 298  : 		ixmax |= iymax;

  0021e	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _ixmax$[ebp]
  00224	0b 85 20 ff ff
	ff		 or	 eax, DWORD PTR _iymax$[ebp]
  0022a	89 85 28 ff ff
	ff		 mov	 DWORD PTR _ixmax$[ebp], eax

; 299  : 		polygon->outcode = ( ixmin | ixmax );

  00230	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _ixmin$[ebp]
  00236	0b 85 28 ff ff
	ff		 or	 eax, DWORD PTR _ixmax$[ebp]
  0023c	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _polygon$[ebp]
  00242	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 300  : 
; 301  : 		polygon = polygon->next_vertex;

  00245	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _polygon$[ebp]
  0024b	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0024e	89 8d 3c ff ff
	ff		 mov	 DWORD PTR _polygon$[ebp], ecx

; 302  : 	}

  00254	e9 8e fe ff ff	 jmp	 $LN2@draw_softw
$LN3@draw_softw:

; 303  : 
; 304  : 	outcode = points[0].outcode;

  00259	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0025e	6b c8 00	 imul	 ecx, eax, 0
  00261	0f b6 94 0d 6c
	ff ff ff	 movzx	 edx, BYTE PTR _points$[ebp+ecx+44]
  00269	89 95 18 ff ff
	ff		 mov	 DWORD PTR _outcode$[ebp], edx

; 305  : 	outcode2 = points[0].outcode;

  0026f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00274	6b c8 00	 imul	 ecx, eax, 0
  00277	0f b6 94 0d 6c
	ff ff ff	 movzx	 edx, BYTE PTR _points$[ebp+ecx+44]
  0027f	89 95 14 ff ff
	ff		 mov	 DWORD PTR _outcode2$[ebp], edx

; 306  : 
; 307  : 	outcode |= points[1].outcode;

  00285	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0028a	c1 e0 00	 shl	 eax, 0
  0028d	0f b6 8c 05 6c
	ff ff ff	 movzx	 ecx, BYTE PTR _points$[ebp+eax+44]
  00295	0b 8d 18 ff ff
	ff		 or	 ecx, DWORD PTR _outcode$[ebp]
  0029b	89 8d 18 ff ff
	ff		 mov	 DWORD PTR _outcode$[ebp], ecx

; 308  : 	outcode2 &= points[1].outcode;

  002a1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002a6	c1 e0 00	 shl	 eax, 0
  002a9	0f b6 8c 05 6c
	ff ff ff	 movzx	 ecx, BYTE PTR _points$[ebp+eax+44]
  002b1	23 8d 14 ff ff
	ff		 and	 ecx, DWORD PTR _outcode2$[ebp]
  002b7	89 8d 14 ff ff
	ff		 mov	 DWORD PTR _outcode2$[ebp], ecx

; 309  : 
; 310  : 	outcode |= points[2].outcode;

  002bd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002c2	d1 e0		 shl	 eax, 1
  002c4	0f b6 8c 05 6c
	ff ff ff	 movzx	 ecx, BYTE PTR _points$[ebp+eax+44]
  002cc	0b 8d 18 ff ff
	ff		 or	 ecx, DWORD PTR _outcode$[ebp]
  002d2	89 8d 18 ff ff
	ff		 mov	 DWORD PTR _outcode$[ebp], ecx

; 311  : 	outcode2 &= points[2].outcode;

  002d8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002dd	d1 e0		 shl	 eax, 1
  002df	0f b6 8c 05 6c
	ff ff ff	 movzx	 ecx, BYTE PTR _points$[ebp+eax+44]
  002e7	23 8d 14 ff ff
	ff		 and	 ecx, DWORD PTR _outcode2$[ebp]
  002ed	89 8d 14 ff ff
	ff		 mov	 DWORD PTR _outcode2$[ebp], ecx

; 312  : 
; 313  : 	if ( outcode2 == 0 )

  002f3	0f 85 61 02 00
	00		 jne	 $LN5@draw_softw

; 314  : 	{
; 315  : 
; 316  : 		rgb_packed
; 317  : 			col;
; 318  : 
; 319  : 		unsigned int
; 320  : 			triangle_colour;
; 321  : 	
; 322  : 		vertex
; 323  : 			*fan_centre,
; 324  : 			*point1,
; 325  : 			*point2;
; 326  : 
; 327  : 		polygon = points;

  002f9	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _points$[ebp]
  002ff	89 85 3c ff ff
	ff		 mov	 DWORD PTR _polygon$[ebp], eax

; 328  : 
; 329  : 		if ( outcode )

  00305	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _outcode$[ebp], 0
  0030c	74 23		 je	 SHORT $LN7@draw_softw

; 330  : 		{
; 331  : 
; 332  : 			clip_3d_coord = 0;

  0030e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 333  : 
; 334  : 			polygon = clip_3d_polygon ( polygon, outcode );

  00318	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _outcode$[ebp]
  0031e	50		 push	 eax
  0031f	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _polygon$[ebp]
  00325	51		 push	 ecx
  00326	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  0032b	89 85 3c ff ff
	ff		 mov	 DWORD PTR _polygon$[ebp], eax
$LN7@draw_softw:

; 335  : 		}
; 336  : 
; 337  : 		if ( polygon )

  00331	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _polygon$[ebp], 0
  00338	0f 84 1c 02 00
	00		 je	 $LN5@draw_softw

; 338  : 		{
; 339  : 	
; 340  : 			//
; 341  : 			// Draw the polygon
; 342  : 			//
; 343  : 
; 344  : 			col = get_packed_colour ( colour );

  0033e	0f b6 45 22	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  00342	c1 e0 18	 shl	 eax, 24			; 00000018H
  00345	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  0034b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00351	d3 e8		 shr	 eax, cl
  00353	0f b6 55 21	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  00357	c1 e2 18	 shl	 edx, 24			; 00000018H
  0035a	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00360	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00366	d3 ea		 shr	 edx, cl
  00368	0b c2		 or	 eax, edx
  0036a	0f b6 55 20	 movzx	 edx, BYTE PTR _colour$[ebp]
  0036e	c1 e2 18	 shl	 edx, 24			; 00000018H
  00371	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  00377	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  0037d	d3 ea		 shr	 edx, cl
  0037f	0b c2		 or	 eax, edx
  00381	0f b6 55 23	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  00385	c1 e2 18	 shl	 edx, 24			; 00000018H
  00388	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  0038e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  00394	d3 ea		 shr	 edx, cl
  00396	0b c2		 or	 eax, edx
  00398	66 89 85 10 ff
	ff ff		 mov	 WORD PTR _col$5[ebp], ax

; 345  : 
; 346  : 			triangle_colour = col;

  0039f	0f b7 85 10 ff
	ff ff		 movzx	 eax, WORD PTR _col$5[ebp]
  003a6	89 85 0c ff ff
	ff		 mov	 DWORD PTR _triangle_colour$4[ebp], eax

; 347  : 			triangle_colour <<= 16;

  003ac	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _triangle_colour$4[ebp]
  003b2	c1 e0 10	 shl	 eax, 16			; 00000010H
  003b5	89 85 0c ff ff
	ff		 mov	 DWORD PTR _triangle_colour$4[ebp], eax

; 348  : 			triangle_colour |= col;

  003bb	0f b7 85 10 ff
	ff ff		 movzx	 eax, WORD PTR _col$5[ebp]
  003c2	0b 85 0c ff ff
	ff		 or	 eax, DWORD PTR _triangle_colour$4[ebp]
  003c8	89 85 0c ff ff
	ff		 mov	 DWORD PTR _triangle_colour$4[ebp], eax

; 349  : 
; 350  : 			fan_centre = polygon;

  003ce	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _polygon$[ebp]
  003d4	89 85 08 ff ff
	ff		 mov	 DWORD PTR _fan_centre$3[ebp], eax

; 351  : 	
; 352  : 			point1 = polygon->next_vertex;

  003da	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _polygon$[ebp]
  003e0	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  003e3	89 8d 04 ff ff
	ff		 mov	 DWORD PTR _point1$2[ebp], ecx

; 353  : 	
; 354  : 			point2 = point1->next_vertex;

  003e9	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _point1$2[ebp]
  003ef	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  003f2	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _point2$1[ebp], ecx
$LN4@draw_softw:

; 355  : 	
; 356  : 			while ( point2 )

  003f8	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _point2$1[ebp], 0
  003ff	0f 84 55 01 00
	00		 je	 $LN5@draw_softw

; 357  : 			{
; 358  : 	
; 359  : 				convert_float_to_int ( ( fan_centre->i * 16 ), &triangle_points[0].i );

  00405	b8 08 00 00 00	 mov	 eax, 8
  0040a	6b c8 00	 imul	 ecx, eax, 0
  0040d	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A
  00413	51		 push	 ecx
  00414	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _fan_centre$3[ebp]
  0041a	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  0041f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00427	51		 push	 ecx
  00428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 360  : 				convert_float_to_int ( ( fan_centre->j * 16 ), &triangle_points[0].j );

  00432	b8 08 00 00 00	 mov	 eax, 8
  00437	6b c8 00	 imul	 ecx, eax, 0
  0043a	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A+4
  00440	51		 push	 ecx
  00441	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _fan_centre$3[ebp]
  00447	f3 0f 10 42 14	 movss	 xmm0, DWORD PTR [edx+20]
  0044c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00454	51		 push	 ecx
  00455	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 361  : 	
; 362  : 				convert_float_to_int ( ( point1->i * 16 ), &triangle_points[1].i );

  0045f	b8 08 00 00 00	 mov	 eax, 8
  00464	c1 e0 00	 shl	 eax, 0
  00467	05 00 00 00 00	 add	 eax, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A
  0046c	50		 push	 eax
  0046d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _point1$2[ebp]
  00473	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00478	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00480	51		 push	 ecx
  00481	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00486	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 363  : 				convert_float_to_int ( ( point1->j * 16 ), &triangle_points[1].j );

  0048b	b8 08 00 00 00	 mov	 eax, 8
  00490	c1 e0 00	 shl	 eax, 0
  00493	05 04 00 00 00	 add	 eax, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A+4
  00498	50		 push	 eax
  00499	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _point1$2[ebp]
  0049f	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  004a4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  004ac	51		 push	 ecx
  004ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b2	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 364  : 			
; 365  : 				convert_float_to_int ( ( point2->i * 16 ), &triangle_points[2].i );

  004b7	b8 08 00 00 00	 mov	 eax, 8
  004bc	d1 e0		 shl	 eax, 1
  004be	05 00 00 00 00	 add	 eax, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A
  004c3	50		 push	 eax
  004c4	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _point2$1[ebp]
  004ca	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  004cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  004d7	51		 push	 ecx
  004d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004dd	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 366  : 				convert_float_to_int ( ( point2->j * 16 ), &triangle_points[2].j );

  004e2	b8 08 00 00 00	 mov	 eax, 8
  004e7	d1 e0		 shl	 eax, 1
  004e9	05 04 00 00 00	 add	 eax, OFFSET ?triangle_points@@3PAUTRIANGLE_POINT_DATA@@A+4
  004ee	50		 push	 eax
  004ef	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _point2$1[ebp]
  004f5	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  004fa	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00502	51		 push	 ecx
  00503	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00508	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 367  : 	
; 368  : 				triangle_point0 = fan_centre;

  0050d	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _fan_centre$3[ebp]
  00513	a3 00 00 00 00	 mov	 DWORD PTR ?triangle_point0@@3PAUVERTEX@@A, eax ; triangle_point0

; 369  : 				triangle_point1 = point1;

  00518	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _point1$2[ebp]
  0051e	a3 00 00 00 00	 mov	 DWORD PTR ?triangle_point1@@3PAUVERTEX@@A, eax ; triangle_point1

; 370  : 				triangle_point2 = point2;

  00523	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _point2$1[ebp]
  00529	a3 00 00 00 00	 mov	 DWORD PTR ?triangle_point2@@3PAUVERTEX@@A, eax ; triangle_point2

; 371  : 	
; 372  : 				fill_software_plain_polygon ( triangle_colour );

  0052e	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _triangle_colour$4[ebp]
  00534	50		 push	 eax
  00535	e8 00 00 00 00	 call	 ?fill_software_plain_polygon@@YGXI@Z ; fill_software_plain_polygon

; 373  : 	
; 374  : 				point1 = point2;

  0053a	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _point2$1[ebp]
  00540	89 85 04 ff ff
	ff		 mov	 DWORD PTR _point1$2[ebp], eax

; 375  : 	
; 376  : 				point2 = point2->next_vertex;

  00546	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _point2$1[ebp]
  0054c	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0054f	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _point2$1[ebp], ecx

; 377  : 			}

  00555	e9 9e fe ff ff	 jmp	 $LN4@draw_softw
$LN5@draw_softw:

; 378  : 		}
; 379  : 	}
; 380  : }

  0055a	5f		 pop	 edi
  0055b	5e		 pop	 esi
  0055c	5b		 pop	 ebx
  0055d	8b e5		 mov	 esp, ebp
  0055f	5d		 pop	 ebp
  00560	c2 1c 00	 ret	 28			; 0000001cH
?draw_software_plain_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ENDP ; draw_software_plain_triangle
_TEXT	ENDS
END
