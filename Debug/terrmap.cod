; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\terrain\terrmap.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?terrain_2d_map_contour_lines_drawn@@3HA	; terrain_2d_map_contour_lines_drawn
PUBLIC	?contour_map_river_nodes@@3PAUVEC3D@@A		; contour_map_river_nodes
PUBLIC	?contour_map_river_path_positions@@3PAUVEC3D@@A	; contour_map_river_path_positions
PUBLIC	?contour_map_road_nodes@@3PAUVEC3D@@A		; contour_map_road_nodes
PUBLIC	?contour_map_road_path_positions@@3PAUVEC3D@@A	; contour_map_road_path_positions
PUBLIC	?contour_map_river_paths@@3PAUCONTOUR_PATH@@A	; contour_map_river_paths
PUBLIC	?contour_map_road_paths@@3PAUCONTOUR_PATH@@A	; contour_map_road_paths
PUBLIC	?contour_map_number_of_mipmaps@@3HA		; contour_map_number_of_mipmaps
PUBLIC	?contour_map_number_of_river_nodes@@3HA		; contour_map_number_of_river_nodes
PUBLIC	?contour_map_number_of_river_paths@@3HA		; contour_map_number_of_river_paths
PUBLIC	?contour_map_number_of_road_nodes@@3HA		; contour_map_number_of_road_nodes
PUBLIC	?contour_map_number_of_road_paths@@3HA		; contour_map_number_of_road_paths
PUBLIC	?number_of_contour_lakes@@3HA			; number_of_contour_lakes
PUBLIC	?contour_map_mipmaps@@3PAPAMA			; contour_map_mipmaps
PUBLIC	?contour_lakes@@3PAUCONTOUR_LAKE@@A		; contour_lakes
PUBLIC	?contour_lake_vertices@@3PAUVEC3D@@A		; contour_lake_vertices
PUBLIC	?contour_minimum_height@@3MA			; contour_minimum_height
PUBLIC	?contour_maximum_height@@3MA			; contour_maximum_height
PUBLIC	?terrain_2d_contour_colours@@3PAUREAL_COLOUR@@A	; terrain_2d_contour_colours
PUBLIC	?terrain_2d_contour_intensities@@3PAUREAL_COLOUR@@A ; terrain_2d_contour_intensities
PUBLIC	?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
PUBLIC	?contour_colours@@3PAUREAL_COLOUR@@A		; contour_colours
PUBLIC	?contour_paper_colours@@3PAUREAL_COLOUR@@A	; contour_paper_colours
PUBLIC	?terrain_2d_contour_heights@@3PAMA		; terrain_2d_contour_heights
PUBLIC	?contour_heights@@3PAMA				; contour_heights
PUBLIC	?contour_height_difference_reciprocals@@3PAMA	; contour_height_difference_reciprocals
PUBLIC	?number_of_contour_height_lines@@3HA		; number_of_contour_height_lines
PUBLIC	?contour_map_boundary_nodes@@3PAUVEC3D@@A	; contour_map_boundary_nodes
PUBLIC	?contour_map_boundary_path_positions@@3PAUVEC3D@@A ; contour_map_boundary_path_positions
PUBLIC	?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
PUBLIC	?contour_map_number_of_boundary_nodes@@3HA	; contour_map_number_of_boundary_nodes
PUBLIC	?contour_map_number_of_boundary_paths@@3HA	; contour_map_number_of_boundary_paths
PUBLIC	?number_of_contour_citybases@@3HA		; number_of_contour_citybases
PUBLIC	?contour_citybases@@3PAUCONTOUR_LAKE@@A		; contour_citybases
PUBLIC	?contour_citybase_vertices@@3PAUVEC3D@@A	; contour_citybase_vertices
_BSS	SEGMENT
?terrain_2d_map_contour_lines_drawn@@3HA DD 01H DUP (?)	; terrain_2d_map_contour_lines_drawn
?contour_map_river_nodes@@3PAUVEC3D@@A DD 01H DUP (?)	; contour_map_river_nodes
?contour_map_river_path_positions@@3PAUVEC3D@@A DD 01H DUP (?) ; contour_map_river_path_positions
?contour_map_road_nodes@@3PAUVEC3D@@A DD 01H DUP (?)	; contour_map_road_nodes
?contour_map_road_path_positions@@3PAUVEC3D@@A DD 01H DUP (?) ; contour_map_road_path_positions
?contour_map_river_paths@@3PAUCONTOUR_PATH@@A DD 01H DUP (?) ; contour_map_river_paths
?contour_map_road_paths@@3PAUCONTOUR_PATH@@A DD 01H DUP (?) ; contour_map_road_paths
?contour_map_number_of_mipmaps@@3HA DD 01H DUP (?)	; contour_map_number_of_mipmaps
?contour_map_number_of_river_nodes@@3HA DD 01H DUP (?)	; contour_map_number_of_river_nodes
?contour_map_number_of_river_paths@@3HA DD 01H DUP (?)	; contour_map_number_of_river_paths
?contour_map_number_of_road_nodes@@3HA DD 01H DUP (?)	; contour_map_number_of_road_nodes
?contour_map_number_of_road_paths@@3HA DD 01H DUP (?)	; contour_map_number_of_road_paths
?number_of_contour_lakes@@3HA DD 01H DUP (?)		; number_of_contour_lakes
?contour_map_mipmaps@@3PAPAMA DD 01H DUP (?)		; contour_map_mipmaps
?contour_lakes@@3PAUCONTOUR_LAKE@@A DD 01H DUP (?)	; contour_lakes
?contour_lake_vertices@@3PAUVEC3D@@A DD 01H DUP (?)	; contour_lake_vertices
?contour_minimum_height@@3MA DD 01H DUP (?)		; contour_minimum_height
?contour_maximum_height@@3MA DD 01H DUP (?)		; contour_maximum_height
?terrain_2d_contour_colours@@3PAUREAL_COLOUR@@A DD 01H DUP (?) ; terrain_2d_contour_colours
?terrain_2d_contour_intensities@@3PAUREAL_COLOUR@@A DD 01H DUP (?) ; terrain_2d_contour_intensities
?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A DD 01H DUP (?) ; terrain_2d_current_contour_colours
?terrain_2d_contour_heights@@3PAMA DD 01H DUP (?)	; terrain_2d_contour_heights
?contour_height_difference_reciprocals@@3PAMA DD 01H DUP (?) ; contour_height_difference_reciprocals
?contour_map_boundary_nodes@@3PAUVEC3D@@A DD 01H DUP (?) ; contour_map_boundary_nodes
?contour_map_boundary_path_positions@@3PAUVEC3D@@A DD 01H DUP (?) ; contour_map_boundary_path_positions
?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A DD 01H DUP (?) ; contour_map_boundary_paths
?contour_map_number_of_boundary_nodes@@3HA DD 01H DUP (?) ; contour_map_number_of_boundary_nodes
?contour_map_number_of_boundary_paths@@3HA DD 01H DUP (?) ; contour_map_number_of_boundary_paths
?number_of_contour_citybases@@3HA DD 01H DUP (?)	; number_of_contour_citybases
?contour_citybases@@3PAUCONTOUR_LAKE@@A DD 01H DUP (?)	; contour_citybases
?contour_citybase_vertices@@3PAUVEC3D@@A DD 01H DUP (?)	; contour_citybase_vertices
_BSS	ENDS
_DATA	SEGMENT
?contour_colours@@3PAUREAL_COLOUR@@A DB 0f0H		; contour_colours
	DB	0beH
	DB	082H
	ORG $+1
	DB	01eH
	DB	066H
	DB	024H
	ORG $+1
	DB	01fH
	DB	067H
	DB	029H
	ORG $+1
	DB	020H
	DB	069H
	DB	02fH
	ORG $+1
	DB	020H
	DB	06bH
	DB	035H
	ORG $+1
	DB	021H
	DB	06dH
	DB	03bH
	ORG $+1
	DB	022H
	DB	06fH
	DB	041H
	ORG $+1
	DB	023H
	DB	070H
	DB	047H
	ORG $+1
	DB	023H
	DB	072H
	DB	04dH
	ORG $+1
	DB	024H
	DB	074H
	DB	054H
	ORG $+1
	DB	025H
	DB	076H
	DB	05aH
	ORG $+1
	DB	026H
	DB	078H
	DB	061H
	ORG $+1
	DB	027H
	DB	07aH
	DB	068H
	ORG $+1
	DB	027H
	DB	07bH
	DB	06fH
	ORG $+1
	DB	028H
	DB	07dH
	DB	076H
	ORG $+1
	DB	029H
	DB	07fH
	DB	07dH
	ORG $+1
	DB	02aH
	DB	07dH
	DB	081H
	ORG $+1
	DB	02bH
	DB	079H
	DB	083H
	ORG $+1
	DB	02bH
	DB	075H
	DB	084H
	ORG $+1
	DB	02cH
	DB	071H
	DB	086H
	ORG $+1
	DB	02dH
	DB	06dH
	DB	088H
	ORG $+1
	DB	02eH
	DB	068H
	DB	08aH
	ORG $+1
	DB	02fH
	DB	064H
	DB	08cH
	ORG $+1
	DB	030H
	DB	05fH
	DB	08eH
	ORG $+1
	DB	031H
	DB	05aH
	DB	08fH
	ORG $+1
	DB	031H
	DB	056H
	DB	091H
	ORG $+1
	DB	032H
	DB	051H
	DB	093H
	ORG $+1
	DB	033H
	DB	04cH
	DB	095H
	ORG $+1
	DB	034H
	DB	046H
	DB	097H
	ORG $+1
	DB	035H
	DB	041H
	DB	098H
	ORG $+1
	DB	04aH
	DB	054H
	DB	0a1H
	ORG $+1
	DB	060H
	DB	069H
	DB	0a9H
	ORG $+1
	DB	078H
	DB	07fH
	DB	0b2H
	ORG $+1
	DB	092H
	DB	097H
	DB	0baH
	ORG $+1
	DB	0aeH
	DB	0b0H
	DB	0c3H
	ORG $+1
	DB	0cbH
	DB	0cbH
	DB	0cbH
	ORG $+1
	DB	0d4H
	DB	0d4H
	DB	0d4H
	ORG $+1
	DB	0ddH
	DB	0ddH
	DB	0ddH
	ORG $+1
	DB	0e5H
	DB	0e5H
	DB	0e5H
	ORG $+1
	DB	0eeH
	DB	0eeH
	DB	0eeH
	ORG $+1
	DB	0f6H
	DB	0f6H
	DB	0f6H
	ORG $+1
	DB	0ffH
	DB	0ffH
	DB	0ffH
	ORG $+1
	ORG $+3928
?contour_paper_colours@@3PAUREAL_COLOUR@@A DB 0f0H	; contour_paper_colours
	DB	0beH
	DB	082H
	ORG $+1
	DB	06cH
	DB	099H
	DB	072H
	ORG $+1
	DB	06dH
	DB	09aH
	DB	076H
	ORG $+1
	DB	06eH
	DB	09bH
	DB	07aH
	ORG $+1
	DB	06fH
	DB	09cH
	DB	07eH
	ORG $+1
	DB	071H
	DB	09dH
	DB	081H
	ORG $+1
	DB	072H
	DB	09eH
	DB	085H
	ORG $+1
	DB	073H
	DB	09fH
	DB	089H
	ORG $+1
	DB	074H
	DB	0a0H
	DB	08dH
	ORG $+1
	DB	076H
	DB	0a1H
	DB	090H
	ORG $+1
	DB	077H
	DB	0a2H
	DB	094H
	ORG $+1
	DB	078H
	DB	0a3H
	DB	097H
	ORG $+1
	DB	079H
	DB	0a3H
	DB	09bH
	ORG $+1
	DB	07bH
	DB	0a4H
	DB	09eH
	ORG $+1
	DB	07cH
	DB	0a5H
	DB	0a2H
	ORG $+1
	DB	07dH
	DB	0a6H
	DB	0a5H
	ORG $+1
	DB	07eH
	DB	0a5H
	DB	0a7H
	ORG $+1
	DB	080H
	DB	0a4H
	DB	0a8H
	ORG $+1
	DB	081H
	DB	0a3H
	DB	0a9H
	ORG $+1
	DB	082H
	DB	0a1H
	DB	0aaH
	ORG $+1
	DB	084H
	DB	0a0H
	DB	0abH
	ORG $+1
	DB	085H
	DB	09eH
	DB	0acH
	ORG $+1
	DB	086H
	DB	09dH
	DB	0adH
	ORG $+1
	DB	088H
	DB	09cH
	DB	0adH
	ORG $+1
	DB	089H
	DB	09bH
	DB	0aeH
	ORG $+1
	DB	08aH
	DB	09aH
	DB	0afH
	ORG $+1
	DB	08cH
	DB	099H
	DB	0b0H
	ORG $+1
	DB	08dH
	DB	098H
	DB	0b1H
	ORG $+1
	DB	08eH
	DB	08eH
	DB	0b2H
	ORG $+1
	DB	09bH
	DB	098H
	DB	0b8H
	ORG $+1
	DB	0a7H
	DB	0a3H
	DB	0beH
	ORG $+1
	DB	0b3H
	DB	0adH
	DB	0c4H
	ORG $+1
	DB	0beH
	DB	0b8H
	DB	0caH
	ORG $+1
	DB	0c9H
	DB	0c4H
	DB	0cfH
	ORG $+1
	DB	0d2H
	DB	0cfH
	DB	0d5H
	ORG $+1
	DB	0dbH
	DB	0dbH
	DB	0dbH
	ORG $+1
	DB	0e1H
	DB	0e1H
	DB	0e1H
	ORG $+1
	DB	0e7H
	DB	0e7H
	DB	0e7H
	ORG $+1
	DB	0edH
	DB	0edH
	DB	0edH
	ORG $+1
	DB	0f3H
	DB	0f3H
	DB	0f3H
	ORG $+1
	DB	0f9H
	DB	0f9H
	DB	0f9H
	ORG $+1
	DB	0ffH
	DB	0ffH
	DB	0ffH
	ORG $+1
	ORG $+3928
?contour_heights@@3PAMA DD 0c47a0000r		; -1000	; contour_heights
	DD	0b8d1b717r			; -0.0001
	DD	041200000r			; 10
	DD	041c80000r			; 25
	DD	042480000r			; 50
	DD	042960000r			; 75
	DD	042c80000r			; 100
	DD	043160000r			; 150
	DD	043480000r			; 200
	DD	0437a0000r			; 250
	DD	043960000r			; 300
	DD	043af0000r			; 350
	DD	043c80000r			; 400
	DD	043e10000r			; 450
	DD	043fa0000r			; 500
	DD	044160000r			; 600
	DD	0442f0000r			; 700
	DD	044480000r			; 800
	DD	044610000r			; 900
	DD	0447a0000r			; 1000
	DD	044898000r			; 1100
	DD	044960000r			; 1200
	DD	044a28000r			; 1300
	DD	044af0000r			; 1400
	DD	044bb8000r			; 1500
	DD	044c80000r			; 1600
	DD	044d48000r			; 1700
	DD	044e10000r			; 1800
	DD	044ed8000r			; 1900
	DD	044fa0000r			; 2000
	DD	045034000r			; 2100
	DD	045098000r			; 2200
	DD	0450fc000r			; 2300
	DD	045160000r			; 2400
	DD	0451c4000r			; 2500
	DD	0452be000r			; 2750
	DD	0453b8000r			; 3000
	DD	0454b2000r			; 3250
	DD	0455ac000r			; 3500
	DD	0456a6000r			; 3750
	DD	0457a0000r			; 4000
	DD	045bb8000r			; 6000
?number_of_contour_height_lines@@3HA DD 02aH		; number_of_contour_height_lines
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_fabsf
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?set_2d_terrain_map_textured@@YGXH@Z		; set_2d_terrain_map_textured
PUBLIC	?draw_2d_terrain_map@@YGXXZ			; draw_2d_terrain_map
PUBLIC	?generate_2d_terrain_contour_mipmaps@@YGXXZ	; generate_2d_terrain_contour_mipmaps
PUBLIC	?set_2d_terrain_contour_colour@@YGXH@Z		; set_2d_terrain_contour_colour
PUBLIC	?set_2d_terrain_contour_heights@@YGXHPAM@Z	; set_2d_terrain_contour_heights
PUBLIC	?load_2d_terrain@@YGXPBD@Z			; load_2d_terrain
PUBLIC	?unload_2d_terrain@@YGXXZ			; unload_2d_terrain
PUBLIC	?load_contour_map_colours@@YGXPBD@Z		; load_contour_map_colours
PUBLIC	?check_coastal_river_intersection@@YGMMMMM@Z	; check_coastal_river_intersection
PUBLIC	?draw_2d_shaded_terrain_contour_map@@YGXXZ	; draw_2d_shaded_terrain_contour_map
PUBLIC	?set_2d_terrain_map_dimensions@@YGXMMMMMMMM@Z	; set_2d_terrain_map_dimensions
PUBLIC	?get_2d_terrain_map_world_dimensions@@YGXPAM000@Z ; get_2d_terrain_map_world_dimensions
PUBLIC	?get_2d_terrain_map_screen_dimensions@@YGXPAM000@Z ; get_2d_terrain_map_screen_dimensions
PUBLIC	?generate_simple_elevation_vertex@@YGXHHPAUVERTEX@@@Z ; generate_simple_elevation_vertex
PUBLIC	?get_simple_elevation_height@@YGMHH@Z		; get_simple_elevation_height
PUBLIC	?render_contour_terrain_quad_quad@@YGXPAUVERTEX@@HH@Z ; render_contour_terrain_quad_quad
PUBLIC	?render_contour_node_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z ; render_contour_node_database
PUBLIC	?render_contour_node_thick_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z ; render_contour_node_thick_database
PUBLIC	?load_2d_terrain_contour_boundary_data@@YGHPAD0@Z ; load_2d_terrain_contour_boundary_data
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??generate_2d_terrain_contour_mipmaps@@YGXXZ@4JA ; `generate_2d_terrain_contour_mipmaps'::`1'::__LINE__Var
PUBLIC	??_C@_0DK@GKFJCG@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BO@ODKPBGBN@contour_map_number_of_mipmaps@ ; `string'
PUBLIC	??_C@_0BE@ONJGIHBF@?$CFs?2route?2rivers?4nde@	; `string'
PUBLIC	??_C@_0BD@COIFOPPN@?$CFs?2route?2rivers?4wp@	; `string'
PUBLIC	??_C@_0BF@JNNAJLCI@?$CFs?2route?2rivdata?4nde@	; `string'
PUBLIC	??_C@_0BE@CGNFNPI@?$CFs?2route?2rivdata?4wp@	; `string'
PUBLIC	??_C@_0BD@DEIINOCO@?$CFs?2route?2roads?4nde@	; `string'
PUBLIC	??_C@_0BC@OGIGAIBE@?$CFs?2route?2roads?4wp@	; `string'
PUBLIC	??_C@_0BG@MGPKDAOB@?$CFs?2route?2roaddata?4nde@	; `string'
PUBLIC	??_C@_0BF@PGGIIJEH@?$CFs?2route?2roaddata?4wp@	; `string'
PUBLIC	??_C@_0BG@PHKFAEHH@?$CFs?2route?2boundary?4nde@	; `string'
PUBLIC	??_C@_0BF@MHNCPAOJ@?$CFs?2route?2boundary?4wp@	; `string'
PUBLIC	??_C@_0BD@KKDIIPNC@?$CFs?2route?2lakes?4ply@	; `string'
PUBLIC	??_C@_0BG@DICJKBNE@?$CFs?2route?2citybase?4ply@	; `string'
PUBLIC	??_C@_0BI@PHGNDNFB@?$CFs?2terrain?22dmapcol?4psd@ ; `string'
PUBLIC	??_C@_0BH@BLFCAGPM@?$CFs?2terrain?2terrain?4sim@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	?__LINE__Var@?0??insert_xmin_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_xmin_contour_coordinate'::`1'::__LINE__Var
PUBLIC	??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@ ; `string'
PUBLIC	??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@	; `string'
PUBLIC	?__LINE__Var@?0??insert_xmax_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_xmax_contour_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_ymin_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_ymin_contour_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_ymax_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_ymax_contour_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_bottom_contour_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_top_contour_coordinate'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@00800000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3f647ae147ae147b
PUBLIC	__real@3f800000
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fb0000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@40800000
PUBLIC	__real@41200000
PUBLIC	__real@42c80000
PUBLIC	__real@43800000
PUBLIC	__real@44800000
PUBLIC	__real@4b40005a
PUBLIC	__real@7f7fffff
PUBLIC	__real@bf800000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_abs:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_fabs:PROC
EXTRN	_log:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?file_exist@@YGHPBD@Z:PROC			; file_exist
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?safe_fclose@@YGHPAU_iobuf@@@Z:PROC		; safe_fclose
EXTRN	?line_line_2d_intercept@@YGHPBUVEC2D@@000PAU1@@Z:PROC ; line_line_2d_intercept
EXTRN	?set_viewport@@YGXMMMM@Z:PROC			; set_viewport
EXTRN	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z:PROC	; clip_3d_polygon
EXTRN	?draw_thick_line@@YGXMMMMUREAL_COLOUR@@M@Z:PROC	; draw_thick_line
EXTRN	?set_d3d_fog_face_intensity@@YGXH@Z:PROC	; set_d3d_fog_face_intensity
EXTRN	?suspend_d3d_fog@@YGXXZ:PROC			; suspend_d3d_fog
EXTRN	?reinstate_d3d_fog@@YGXXZ:PROC			; reinstate_d3d_fog
EXTRN	?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z:PROC ; draw_fan_primitive
EXTRN	?draw_special_quad_quad_primitive@@YGXH@Z:PROC	; draw_special_quad_quad_primitive
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?set_d3d_texture@@YGXHPAUSCREEN@@@Z:PROC	; set_d3d_texture
EXTRN	?set_d3d_texture_stage_state@@YGXHHH@Z:PROC	; set_d3d_texture_stage_state
EXTRN	?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z:PROC ; get_d3d_vertices_address
EXTRN	?get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z:PROC ; get_d3d_vertices_points_address
EXTRN	?draw_wbuffered_plain_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z:PROC ; draw_wbuffered_plain_line
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?get_terrain_3d_sector@@YGXMMPAH0@Z:PROC	; get_terrain_3d_sector
EXTRN	?outcode_3d_terrain_word_polygon@@YGHHPAUTERRAIN_3D_POINT_WORD_REFERENCE@@PAH@Z:PROC ; outcode_3d_terrain_word_polygon
EXTRN	?outcode_3d_terrain_byte_polygon@@YGHHPAUTERRAIN_3D_POINT_BYTE_REFERENCE@@PAH@Z:PROC ; outcode_3d_terrain_byte_polygon
EXTRN	?initialise_terrain_simple_elevation@@YGXXZ:PROC ; initialise_terrain_simple_elevation
EXTRN	?load_terrain_simple_elevation@@YGHPBD@Z:PROC	; load_terrain_simple_elevation
EXTRN	?generate_terrain_simple_elevation@@YGXM@Z:PROC	; generate_terrain_simple_elevation
EXTRN	?save_terrain_simple_elevation@@YGXPBD@Z:PROC	; save_terrain_simple_elevation
EXTRN	?reset_terrain_3d_buffered_polygons@@YGXXZ:PROC	; reset_terrain_3d_buffered_polygons
EXTRN	?draw_terrain_3d_buffered_polygons@@YGXXZ:PROC	; draw_terrain_3d_buffered_polygons
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?clip_3d_crds@@3PAUVERTEX@@A:BYTE		; clip_3d_crds
EXTRN	?number_of_polygons_screen_clipped@@3HA:DWORD	; number_of_polygons_screen_clipped
EXTRN	?d3d_in_order_rendering@@3HA:DWORD		; d3d_in_order_rendering
EXTRN	?zbuffer_constant@@3NA:QWORD			; zbuffer_constant
EXTRN	?zbuffer_constant_elevated_bias@@3NA:QWORD	; zbuffer_constant_elevated_bias
EXTRN	?zbuffer_constant_normal_bias@@3NA:QWORD	; zbuffer_constant_normal_bias
EXTRN	?transformed_3d_point_outcodes@@3PAEA:BYTE	; transformed_3d_point_outcodes
EXTRN	?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A:BYTE ; transformed_3d_3d_points
EXTRN	?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A:BYTE ; transformed_3d_2d_points
EXTRN	?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A:BYTE ; terrain_type_information
EXTRN	?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A:DWORD ; terrain_sectors
EXTRN	?terrain_3d_sector_x_max@@3HA:DWORD		; terrain_3d_sector_x_max
EXTRN	?terrain_3d_sector_z_max@@3HA:DWORD		; terrain_3d_sector_z_max
EXTRN	?terrain_3d_max_map_z@@3MA:DWORD		; terrain_3d_max_map_z
EXTRN	?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A:DWORD ; terrain_3d_sector_point_byte_references
EXTRN	?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A:DWORD ; terrain_3d_sector_point_word_references
EXTRN	?current_terrain_type@@3HA:DWORD		; current_terrain_type
EXTRN	?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A:DWORD ; current_terrain_type_class
EXTRN	?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A:DWORD ; current_terrain_sector
EXTRN	?current_terrain_points_xz@@3PAUTERRAIN_3D_POINT_XZ@@A:DWORD ; current_terrain_points_xz
EXTRN	?current_terrain_points_y@@3PAUTERRAIN_3D_POINT_Y@@A:DWORD ; current_terrain_points_y
EXTRN	?transformed_3d_point_colours@@3PAUTERRAIN_3D_TRANSFORMED_POINT_COLOUR@@A:BYTE ; transformed_3d_point_colours
EXTRN	?terrain_3d_transformed_point_normals@@3PAUTERRAIN_3D_TRANSFORMED_POINT_NORMAL@@A:BYTE ; terrain_3d_transformed_point_normals
EXTRN	?terrain_3d_face_outcode@@3HA:DWORD		; terrain_3d_face_outcode
EXTRN	?terrain_3d_simple_elevation_grid@@3PAMA:DWORD	; terrain_3d_simple_elevation_grid
EXTRN	?terrain_3d_simple_elevation_width@@3HA:DWORD	; terrain_3d_simple_elevation_width
EXTRN	?terrain_3d_simple_elevation_height@@3HA:DWORD	; terrain_3d_simple_elevation_height
EXTRN	?terrain_3d_simple_elevation_x_grid_size@@3MA:DWORD ; terrain_3d_simple_elevation_x_grid_size
EXTRN	?terrain_3d_simple_elevation_z_grid_size@@3MA:DWORD ; terrain_3d_simple_elevation_z_grid_size
EXTRN	?command_line_campaign_map@@3HA:DWORD		; command_line_campaign_map
EXTRN	?command_line_campaign_map_palette@@3HA:DWORD	; command_line_campaign_map_palette
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?terrain_2d_map_world_xmin@@3MA DD 01H DUP (?)		; terrain_2d_map_world_xmin
?terrain_2d_map_world_xmax@@3MA DD 01H DUP (?)		; terrain_2d_map_world_xmax
?terrain_2d_map_world_xcentre@@3MA DD 01H DUP (?)	; terrain_2d_map_world_xcentre
?terrain_2d_map_world_zmin@@3MA DD 01H DUP (?)		; terrain_2d_map_world_zmin
?terrain_2d_map_world_zmax@@3MA DD 01H DUP (?)		; terrain_2d_map_world_zmax
?terrain_2d_map_world_zcentre@@3MA DD 01H DUP (?)	; terrain_2d_map_world_zcentre
?terrain_2d_map_screen_xmin@@3MA DD 01H DUP (?)		; terrain_2d_map_screen_xmin
?terrain_2d_map_screen_xmax@@3MA DD 01H DUP (?)		; terrain_2d_map_screen_xmax
?terrain_2d_map_screen_xcentre@@3MA DD 01H DUP (?)	; terrain_2d_map_screen_xcentre
?terrain_2d_map_screen_ymin@@3MA DD 01H DUP (?)		; terrain_2d_map_screen_ymin
?terrain_2d_map_screen_ymax@@3MA DD 01H DUP (?)		; terrain_2d_map_screen_ymax
?terrain_2d_map_screen_ycentre@@3MA DD 01H DUP (?)	; terrain_2d_map_screen_ycentre
?terrain_2d_map_screen_xscale@@3MA DD 01H DUP (?)	; terrain_2d_map_screen_xscale
?terrain_2d_map_screen_yscale@@3MA DD 01H DUP (?)	; terrain_2d_map_screen_yscale
?this_point@@3PAUVERTEX@@A DD 01H DUP (?)		; this_point
?last_point@@3PAUVERTEX@@A DD 01H DUP (?)		; last_point
?clip_list@@3PAUVERTEX@@A DD 01H DUP (?)		; clip_list
?clip_point@@3PAUVERTEX@@A DD 01H DUP (?)		; clip_point
_BSS	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@4b40005a
CONST	SEGMENT
__real@4b40005a DD 04b40005ar			; 1.2583e+07
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fb0000000000000
CONST	SEGMENT
__real@3fb0000000000000 DQ 03fb0000000000000r	; 0.0625
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f647ae147ae147b
CONST	SEGMENT
__real@3f647ae147ae147b DQ 03f647ae147ae147br	; 0.0025
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-38
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 0138eH ; `insert_top_contour_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 01364H ; `insert_bottom_contour_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_ymax_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_ymax_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 0121dH ; `insert_ymax_contour_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_ymin_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_ymin_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 011aeH ; `insert_ymin_contour_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_xmax_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_xmax_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 0113fH ; `insert_xmax_contour_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
CONST	SEGMENT
??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@ DB 'Internal clipping error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
CONST	SEGMENT
??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@ DB 'clip_3d_coord'
	DB	' < MAX_3D_CLIP_COORDINATES', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??insert_xmin_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_xmin_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 010d0H ; `insert_xmin_contour_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BLFCAGPM@?$CFs?2terrain?2terrain?4sim@
CONST	SEGMENT
??_C@_0BH@BLFCAGPM@?$CFs?2terrain?2terrain?4sim@ DB '%s\terrain\terrain.s'
	DB	'im', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PHGNDNFB@?$CFs?2terrain?22dmapcol?4psd@
CONST	SEGMENT
??_C@_0BI@PHGNDNFB@?$CFs?2terrain?22dmapcol?4psd@ DB '%s\terrain\2dmapcol'
	DB	'.psd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DICJKBNE@?$CFs?2route?2citybase?4ply@
CONST	SEGMENT
??_C@_0BG@DICJKBNE@?$CFs?2route?2citybase?4ply@ DB '%s\route\citybase.ply'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KKDIIPNC@?$CFs?2route?2lakes?4ply@
CONST	SEGMENT
??_C@_0BD@KKDIIPNC@?$CFs?2route?2lakes?4ply@ DB '%s\route\lakes.ply', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MHNCPAOJ@?$CFs?2route?2boundary?4wp@
CONST	SEGMENT
??_C@_0BF@MHNCPAOJ@?$CFs?2route?2boundary?4wp@ DB '%s\route\boundary.wp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PHKFAEHH@?$CFs?2route?2boundary?4nde@
CONST	SEGMENT
??_C@_0BG@PHKFAEHH@?$CFs?2route?2boundary?4nde@ DB '%s\route\boundary.nde'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PGGIIJEH@?$CFs?2route?2roaddata?4wp@
CONST	SEGMENT
??_C@_0BF@PGGIIJEH@?$CFs?2route?2roaddata?4wp@ DB '%s\route\roaddata.wp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MGPKDAOB@?$CFs?2route?2roaddata?4nde@
CONST	SEGMENT
??_C@_0BG@MGPKDAOB@?$CFs?2route?2roaddata?4nde@ DB '%s\route\roaddata.nde'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OGIGAIBE@?$CFs?2route?2roads?4wp@
CONST	SEGMENT
??_C@_0BC@OGIGAIBE@?$CFs?2route?2roads?4wp@ DB '%s\route\roads.wp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DEIINOCO@?$CFs?2route?2roads?4nde@
CONST	SEGMENT
??_C@_0BD@DEIINOCO@?$CFs?2route?2roads?4nde@ DB '%s\route\roads.nde', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CGNFNPI@?$CFs?2route?2rivdata?4wp@
CONST	SEGMENT
??_C@_0BE@CGNFNPI@?$CFs?2route?2rivdata?4wp@ DB '%s\route\rivdata.wp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JNNAJLCI@?$CFs?2route?2rivdata?4nde@
CONST	SEGMENT
??_C@_0BF@JNNAJLCI@?$CFs?2route?2rivdata?4nde@ DB '%s\route\rivdata.nde', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@COIFOPPN@?$CFs?2route?2rivers?4wp@
CONST	SEGMENT
??_C@_0BD@COIFOPPN@?$CFs?2route?2rivers?4wp@ DB '%s\route\rivers.wp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ONJGIHBF@?$CFs?2route?2rivers?4nde@
CONST	SEGMENT
??_C@_0BE@ONJGIHBF@?$CFs?2route?2rivers?4nde@ DB '%s\route\rivers.nde', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ODKPBGBN@contour_map_number_of_mipmaps@
CONST	SEGMENT
??_C@_0BO@ODKPBGBN@contour_map_number_of_mipmaps@ DB 'contour_map_number_'
	DB	'of_mipmaps', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@GKFJCG@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DK@GKFJCG@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nhv9'
	DB	'0\projects\eech\modules\3d\terrain\terrmap.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??generate_2d_terrain_contour_mipmaps@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??generate_2d_terrain_contour_mipmaps@@YGXXZ@4JA DD 035bH ; `generate_2d_terrain_contour_mipmaps'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?terrain_2d_map_textured@@3HA DD 01H			; terrain_2d_map_textured
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?load_2d_terrain_contour_boundary_data@@YGHPAD0@Z
_TEXT	SEGMENT
tv229 = -88						; size = 4
tv213 = -88						; size = 4
tv230 = -84						; size = 4
tv214 = -84						; size = 4
_current_position$ = -16				; size = 4
_count$ = -12						; size = 4
_total$ = -8						; size = 4
_fp$ = -4						; size = 4
_nodes_filename$ = 8					; size = 4
_path_filename$ = 12					; size = 4
?load_2d_terrain_contour_boundary_data@@YGHPAD0@Z PROC	; load_2d_terrain_contour_boundary_data, COMDAT

; 1548 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1549 : 
; 1550 : 	FILE
; 1551 : 		*fp;
; 1552 : 
; 1553 : 	int
; 1554 : 		total,
; 1555 : 		count;
; 1556 : 
; 1557 : 	vec3d
; 1558 : 		*current_position;
; 1559 : 
; 1560 : 	//
; 1561 : 	// Read in the nodes
; 1562 : 	//
; 1563 : 
; 1564 : 	fp = fopen ( nodes_filename, "rb" );

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nodes_filename$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 1565 : 
; 1566 : 	if ( !fp )

  0001e	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00022	75 07		 jne	 SHORT $LN8@load_2d_te

; 1567 : 	{
; 1568 : 
; 1569 : 		return ( FALSE );

  00024	33 c0		 xor	 eax, eax
  00026	e9 5c 03 00 00	 jmp	 $LN1@load_2d_te
$LN8@load_2d_te:

; 1570 : 	}
; 1571 : 
; 1572 : 	fread ( &contour_map_number_of_boundary_nodes, sizeof ( int ), 1, fp );

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0002e	50		 push	 eax
  0002f	6a 01		 push	 1
  00031	6a 04		 push	 4
  00033	68 00 00 00 00	 push	 OFFSET ?contour_map_number_of_boundary_nodes@@3HA ; contour_map_number_of_boundary_nodes
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 1573 : 
; 1574 : 	contour_map_boundary_nodes = ( vec3d * ) safe_malloc ( sizeof ( vec3d ) * contour_map_number_of_boundary_nodes );

  00041	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?contour_map_number_of_boundary_nodes@@3HA, 12 ; contour_map_number_of_boundary_nodes
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0004e	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_boundary_nodes@@3PAUVEC3D@@A, eax ; contour_map_boundary_nodes

; 1575 : 
; 1576 : 	fread ( contour_map_boundary_nodes, sizeof ( vec3d ), contour_map_number_of_boundary_nodes, fp );

  00053	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00056	50		 push	 eax
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_number_of_boundary_nodes@@3HA ; contour_map_number_of_boundary_nodes
  0005d	51		 push	 ecx
  0005e	6a 0c		 push	 12			; 0000000cH
  00060	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_nodes@@3PAUVEC3D@@A ; contour_map_boundary_nodes
  00066	52		 push	 edx
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0006d	83 c4 10	 add	 esp, 16			; 00000010H

; 1577 : 
; 1578 : 	safe_fclose ( fp );

  00070	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 1579 : 
; 1580 : 	//
; 1581 : 	// Read in the paths
; 1582 : 	//
; 1583 : 
; 1584 : 	fp = safe_fopen ( path_filename, "rb" );

  00079	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _path_filename$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00087	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 1585 : 
; 1586 : 	fread ( &contour_map_number_of_boundary_paths, sizeof ( int ), 1, fp );

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0008d	50		 push	 eax
  0008e	6a 01		 push	 1
  00090	6a 04		 push	 4
  00092	68 00 00 00 00	 push	 OFFSET ?contour_map_number_of_boundary_paths@@3HA ; contour_map_number_of_boundary_paths
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0009d	83 c4 10	 add	 esp, 16			; 00000010H

; 1587 : 
; 1588 : 	contour_map_boundary_paths = ( contour_path * ) safe_malloc ( sizeof ( contour_path ) * contour_map_number_of_boundary_paths );

  000a0	6b 05 00 00 00
	00 24		 imul	 eax, DWORD PTR ?contour_map_number_of_boundary_paths@@3HA, 36 ; contour_map_number_of_boundary_paths
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000ad	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A, eax ; contour_map_boundary_paths

; 1589 : 
; 1590 : 	//
; 1591 : 	// Process the paths
; 1592 : 	//
; 1593 : 
; 1594 : 	total = 0;

  000b2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _total$[ebp], 0

; 1595 : 
; 1596 : 	for ( count = 0; count < contour_map_number_of_boundary_paths; count++ )

  000b9	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000c0	eb 09		 jmp	 SHORT $LN4@load_2d_te
$LN2@load_2d_te:
  000c2	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  000c5	83 c0 01	 add	 eax, 1
  000c8	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN4@load_2d_te:
  000cb	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  000ce	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?contour_map_number_of_boundary_paths@@3HA ; contour_map_number_of_boundary_paths
  000d4	0f 8d b4 00 00
	00		 jge	 $LN3@load_2d_te

; 1597 : 	{
; 1598 : 
; 1599 : 		fread ( &contour_map_boundary_paths[count].from, sizeof ( int ), 1, fp );

  000da	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000dd	50		 push	 eax
  000de	6a 01		 push	 1
  000e0	6a 04		 push	 4
  000e2	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  000e6	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  000ec	51		 push	 ecx
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000f3	83 c4 10	 add	 esp, 16			; 00000010H

; 1600 : 		fread ( &contour_map_boundary_paths[count].to, sizeof ( int ), 1, fp );

  000f6	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000f9	50		 push	 eax
  000fa	6a 01		 push	 1
  000fc	6a 04		 push	 4
  000fe	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  00102	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00108	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  0010c	50		 push	 eax
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00113	83 c4 10	 add	 esp, 16			; 00000010H

; 1601 : 		fread ( &contour_map_boundary_paths[count].type, sizeof ( int ), 1, fp );

  00116	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00119	50		 push	 eax
  0011a	6a 01		 push	 1
  0011c	6a 04		 push	 4
  0011e	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  00122	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00128	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  0012c	50		 push	 eax
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00133	83 c4 10	 add	 esp, 16			; 00000010H

; 1602 : 		fread ( &contour_map_boundary_paths[count].count, sizeof ( int ), 1, fp );

  00136	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00139	50		 push	 eax
  0013a	6a 01		 push	 1
  0013c	6a 04		 push	 4
  0013e	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  00142	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00148	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  0014c	50		 push	 eax
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00153	83 c4 10	 add	 esp, 16			; 00000010H

; 1603 : 
; 1604 : 		total += contour_map_boundary_paths[count].count;

  00156	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00160	8b 55 f8	 mov	 edx, DWORD PTR _total$[ebp]
  00163	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  00167	89 55 f8	 mov	 DWORD PTR _total$[ebp], edx

; 1605 : 
; 1606 : 		fseek ( fp, ( contour_map_boundary_paths[count].count * sizeof ( vec3d ) ), SEEK_CUR );

  0016a	6a 01		 push	 1
  0016c	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00170	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00176	6b 54 01 0c 0c	 imul	 edx, DWORD PTR [ecx+eax+12], 12
  0017b	52		 push	 edx
  0017c	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0017f	50		 push	 eax
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00186	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1607 : 	}

  00189	e9 34 ff ff ff	 jmp	 $LN2@load_2d_te
$LN3@load_2d_te:

; 1608 : 
; 1609 : 	fseek ( fp, 4, SEEK_SET );

  0018e	6a 00		 push	 0
  00190	6a 04		 push	 4
  00192	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00195	50		 push	 eax
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0019c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1610 : 
; 1611 : 	contour_map_boundary_path_positions = ( vec3d * ) safe_malloc ( sizeof ( vec3d ) * total );

  0019f	6b 45 f8 0c	 imul	 eax, DWORD PTR _total$[ebp], 12
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  001a9	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_boundary_path_positions@@3PAUVEC3D@@A, eax ; contour_map_boundary_path_positions

; 1612 : 
; 1613 : 	current_position = contour_map_boundary_path_positions;

  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_boundary_path_positions@@3PAUVEC3D@@A ; contour_map_boundary_path_positions
  001b3	89 45 f0	 mov	 DWORD PTR _current_position$[ebp], eax

; 1614 : 
; 1615 : 	for ( count = 0; count < contour_map_number_of_boundary_paths; count++ )

  001b6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  001bd	eb 09		 jmp	 SHORT $LN7@load_2d_te
$LN5@load_2d_te:
  001bf	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  001c2	83 c0 01	 add	 eax, 1
  001c5	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN7@load_2d_te:
  001c8	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  001cb	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?contour_map_number_of_boundary_paths@@3HA ; contour_map_number_of_boundary_paths
  001d1	0f 8d 89 01 00
	00		 jge	 $LN6@load_2d_te

; 1616 : 	{
; 1617 : 
; 1618 : 		fread ( &contour_map_boundary_paths[count].from, sizeof ( int ), 1, fp );

  001d7	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001da	50		 push	 eax
  001db	6a 01		 push	 1
  001dd	6a 04		 push	 4
  001df	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  001e3	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  001e9	51		 push	 ecx
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001f0	83 c4 10	 add	 esp, 16			; 00000010H

; 1619 : 		fread ( &contour_map_boundary_paths[count].to, sizeof ( int ), 1, fp );

  001f3	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001f6	50		 push	 eax
  001f7	6a 01		 push	 1
  001f9	6a 04		 push	 4
  001fb	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  001ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00205	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00209	50		 push	 eax
  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00210	83 c4 10	 add	 esp, 16			; 00000010H

; 1620 : 		fread ( &contour_map_boundary_paths[count].type, sizeof ( int ), 1, fp );

  00213	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00216	50		 push	 eax
  00217	6a 01		 push	 1
  00219	6a 04		 push	 4
  0021b	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0021f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00225	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  00229	50		 push	 eax
  0022a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00230	83 c4 10	 add	 esp, 16			; 00000010H

; 1621 : 		fread ( &contour_map_boundary_paths[count].count, sizeof ( int ), 1, fp );

  00233	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00236	50		 push	 eax
  00237	6a 01		 push	 1
  00239	6a 04		 push	 4
  0023b	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0023f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00245	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00249	50		 push	 eax
  0024a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00250	83 c4 10	 add	 esp, 16			; 00000010H

; 1622 : 
; 1623 : 		contour_map_boundary_paths[count].from = bound ( contour_map_boundary_paths[count].from, 0, contour_map_number_of_boundary_nodes );

  00253	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00257	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  0025d	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00261	7d 09		 jge	 SHORT $LN12@load_2d_te
  00263	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
  0026a	eb 35		 jmp	 SHORT $LN13@load_2d_te
$LN12@load_2d_te:
  0026c	6b 55 f4 24	 imul	 edx, DWORD PTR _count$[ebp], 36
  00270	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00275	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00278	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?contour_map_number_of_boundary_nodes@@3HA ; contour_map_number_of_boundary_nodes
  0027e	7e 0b		 jle	 SHORT $LN10@load_2d_te
  00280	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_number_of_boundary_nodes@@3HA ; contour_map_number_of_boundary_nodes
  00286	89 55 a8	 mov	 DWORD PTR tv213[ebp], edx
  00289	eb 10		 jmp	 SHORT $LN11@load_2d_te
$LN10@load_2d_te:
  0028b	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0028f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00295	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00298	89 55 a8	 mov	 DWORD PTR tv213[ebp], edx
$LN11@load_2d_te:
  0029b	8b 45 a8	 mov	 eax, DWORD PTR tv213[ebp]
  0029e	89 45 ac	 mov	 DWORD PTR tv214[ebp], eax
$LN13@load_2d_te:
  002a1	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  002a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  002ab	8b 45 ac	 mov	 eax, DWORD PTR tv214[ebp]
  002ae	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 1624 : 		contour_map_boundary_paths[count].to = bound ( contour_map_boundary_paths[count].to, 0, contour_map_number_of_boundary_nodes );

  002b1	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  002b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  002bb	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  002c0	7d 09		 jge	 SHORT $LN16@load_2d_te
  002c2	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv230[ebp], 0
  002c9	eb 37		 jmp	 SHORT $LN17@load_2d_te
$LN16@load_2d_te:
  002cb	6b 55 f4 24	 imul	 edx, DWORD PTR _count$[ebp], 36
  002cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  002d4	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  002d8	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?contour_map_number_of_boundary_nodes@@3HA ; contour_map_number_of_boundary_nodes
  002de	7e 0b		 jle	 SHORT $LN14@load_2d_te
  002e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_number_of_boundary_nodes@@3HA ; contour_map_number_of_boundary_nodes
  002e6	89 55 a8	 mov	 DWORD PTR tv229[ebp], edx
  002e9	eb 11		 jmp	 SHORT $LN15@load_2d_te
$LN14@load_2d_te:
  002eb	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  002ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  002f5	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  002f9	89 55 a8	 mov	 DWORD PTR tv229[ebp], edx
$LN15@load_2d_te:
  002fc	8b 45 a8	 mov	 eax, DWORD PTR tv229[ebp]
  002ff	89 45 ac	 mov	 DWORD PTR tv230[ebp], eax
$LN17@load_2d_te:
  00302	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  00306	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  0030c	8b 45 ac	 mov	 eax, DWORD PTR tv230[ebp]
  0030f	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 1625 : 
; 1626 : 		contour_map_boundary_paths[count].points = current_position;

  00313	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00317	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  0031d	8b 55 f0	 mov	 edx, DWORD PTR _current_position$[ebp]
  00320	89 54 01 20	 mov	 DWORD PTR [ecx+eax+32], edx

; 1627 : 
; 1628 : 		fread ( current_position, sizeof ( vec3d ), contour_map_boundary_paths[count].count, fp );

  00324	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00327	50		 push	 eax
  00328	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0032c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00332	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  00336	50		 push	 eax
  00337	6a 0c		 push	 12			; 0000000cH
  00339	8b 4d f0	 mov	 ecx, DWORD PTR _current_position$[ebp]
  0033c	51		 push	 ecx
  0033d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00343	83 c4 10	 add	 esp, 16			; 00000010H

; 1629 : 
; 1630 : 		current_position += contour_map_boundary_paths[count].count;

  00346	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0034a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00350	6b 54 01 0c 0c	 imul	 edx, DWORD PTR [ecx+eax+12], 12
  00355	03 55 f0	 add	 edx, DWORD PTR _current_position$[ebp]
  00358	89 55 f0	 mov	 DWORD PTR _current_position$[ebp], edx

; 1631 : 	}

  0035b	e9 5f fe ff ff	 jmp	 $LN5@load_2d_te
$LN6@load_2d_te:

; 1632 : 
; 1633 : 	safe_fclose ( fp );

  00360	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00363	50		 push	 eax
  00364	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 1634 : 
; 1635 : 	//
; 1636 : 	// Go through setting all the node bounds
; 1637 : 	//
; 1638 : 
; 1639 : 	set_node_database_extents ( contour_map_number_of_boundary_paths, contour_map_boundary_paths, contour_map_boundary_nodes );

  00369	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_boundary_nodes@@3PAUVEC3D@@A ; contour_map_boundary_nodes
  0036e	50		 push	 eax
  0036f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  00375	51		 push	 ecx
  00376	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_number_of_boundary_paths@@3HA ; contour_map_number_of_boundary_paths
  0037c	52		 push	 edx
  0037d	e8 00 00 00 00	 call	 ?set_node_database_extents@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@@Z ; set_node_database_extents

; 1640 : 
; 1641 : 	return TRUE;

  00382	b8 01 00 00 00	 mov	 eax, 1
$LN1@load_2d_te:

; 1642 : }

  00387	5f		 pop	 edi
  00388	5e		 pop	 esi
  00389	5b		 pop	 ebx
  0038a	8b e5		 mov	 esp, ebp
  0038c	5d		 pop	 ebp
  0038d	c2 08 00	 ret	 8
?load_2d_terrain_contour_boundary_data@@YGHPAD0@Z ENDP	; load_2d_terrain_contour_boundary_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?insert_ymax_contour_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv249 = -152						; size = 8
tv306 = -144						; size = 8
tv243 = -136						; size = 8
_int_dblue$ = -64					; size = 4
_int_blue$ = -60					; size = 4
_int_dgreen$ = -56					; size = 4
_int_green$ = -52					; size = 4
_int_dred$ = -48					; size = 4
_int_red$ = -44						; size = 4
_blue$ = -40						; size = 4
_green$ = -36						; size = 4
_red$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_ymax_contour_coordinate@@YGXPAUVERTEX@@0@Z PROC	; insert_ymax_contour_coordinate, COMDAT

; 4637 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4638 : 
; 4639 : 	vertex
; 4640 : 		*tmp;
; 4641 : 
; 4642 : 	double
; 4643 : 		t,
; 4644 : 		numerator,
; 4645 : 		denominator;
; 4646 : 
; 4647 : 	float
; 4648 : 		red,
; 4649 : 		green,
; 4650 : 		blue;
; 4651 : 
; 4652 : 	int
; 4653 : 		int_red,
; 4654 : 		int_dred,
; 4655 : 		int_green,
; 4656 : 		int_dgreen,
; 4657 : 		int_blue,
; 4658 : 		int_dblue;
; 4659 : 
; 4660 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_yma
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_ymax_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 17	 add	 eax, 23			; 00000017H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@GKFJCG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_yma:

; 4661 : 
; 4662 : 	if ( point1->i > point2->i )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00038	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  0003c	76 12		 jbe	 SHORT $LN3@insert_yma

; 4663 : 	{
; 4664 : 
; 4665 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 4666 : 
; 4667 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 4668 : 
; 4669 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_yma:

; 4670 : 	}
; 4671 : 
; 4672 : 	numerator = active_viewport.y_max - point2->j;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  0005b	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 4673 : 
; 4674 : 	denominator = point2->j - point1->j;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00074	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 4675 : 
; 4676 : #ifdef DEBUG
; 4677 : 
; 4678 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 78 ff ff
	ff		 fstp	 QWORD PTR tv243[ebp]
  0009d	f2 0f 10 85 78
	ff ff ff	 movsd	 xmm0, QWORD PTR tv243[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 70
	ff ff ff	 movsd	 QWORD PTR tv306[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 68 ff ff
	ff		 fstp	 QWORD PTR tv249[ebp]
  000c8	f2 0f 10 85 68
	ff ff ff	 movsd	 xmm0, QWORD PTR tv249[ebp]
  000d0	f2 0f 10 8d 70
	ff ff ff	 movsd	 xmm1, QWORD PTR tv306[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_yma

; 4679 : 	{
; 4680 : 
; 4681 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_yma:

; 4682 : 	}
; 4683 : 
; 4684 : #endif
; 4685 : 
; 4686 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 4687 : 
; 4688 : 	int_red = point2->red;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00101	89 4d d4	 mov	 DWORD PTR _int_red$[ebp], ecx

; 4689 : 	int_dred = int_red - ( int ) point1->red;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0010b	8b 55 d4	 mov	 edx, DWORD PTR _int_red$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 d0	 mov	 DWORD PTR _int_dred$[ebp], edx

; 4690 : 
; 4691 : 	int_green = point2->green;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0011a	89 4d cc	 mov	 DWORD PTR _int_green$[ebp], ecx

; 4692 : 	int_dgreen = int_green - ( int ) point1->green;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00124	8b 55 cc	 mov	 edx, DWORD PTR _int_green$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 c8	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 4693 : 
; 4694 : 	int_blue = point2->blue;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00133	89 4d c4	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 4695 : 	int_dblue = int_blue - ( int ) point1->blue;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0013d	8b 55 c4	 mov	 edx, DWORD PTR _int_blue$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 c0	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 4696 : 
; 4697 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00145	f3 0f 2a 45 d4	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  0014a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0014e	f3 0f 2a 4d d0	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  00153	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00157	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0015c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00160	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00164	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 4698 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00169	f3 0f 2a 45 cc	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  0016e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00172	f3 0f 2a 4d c8	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00177	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0017b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00180	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00184	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00188	f3 0f 11 45 dc	 movss	 DWORD PTR _green$[ebp], xmm0

; 4699 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0018d	f3 0f 2a 45 c4	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00192	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00196	f3 0f 2a 4d c0	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  0019b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0019f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ac	f3 0f 11 45 d8	 movss	 DWORD PTR _blue$[ebp], xmm0

; 4700 : 
; 4701 : 	red += FLOAT_FLOAT_FACTOR;

  001b1	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _red$[ebp]
  001b6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001be	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 4702 : 	green += FLOAT_FLOAT_FACTOR;

  001c3	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _green$[ebp]
  001c8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001d0	f3 0f 11 45 dc	 movss	 DWORD PTR _green$[ebp], xmm0

; 4703 : 	blue += FLOAT_FLOAT_FACTOR;

  001d5	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _blue$[ebp]
  001da	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001e2	f3 0f 11 45 d8	 movss	 DWORD PTR _blue$[ebp], xmm0

; 4704 : 
; 4705 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  001e7	8b 45 e0	 mov	 eax, DWORD PTR _red$[ebp]
  001ea	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  001ef	89 45 d4	 mov	 DWORD PTR _int_red$[ebp], eax

; 4706 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  001f2	8b 45 dc	 mov	 eax, DWORD PTR _green$[ebp]
  001f5	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  001fa	89 45 cc	 mov	 DWORD PTR _int_green$[ebp], eax

; 4707 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  001fd	8b 45 d8	 mov	 eax, DWORD PTR _blue$[ebp]
  00200	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00205	89 45 c4	 mov	 DWORD PTR _int_blue$[ebp], eax

; 4708 : 
; 4709 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0020d	c1 e0 06	 shl	 eax, 6
  00210	8a 4d d4	 mov	 cl, BYTE PTR _int_red$[ebp]
  00213	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 4710 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0021e	c1 e0 06	 shl	 eax, 6
  00221	8a 4d cc	 mov	 cl, BYTE PTR _int_green$[ebp]
  00224	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 4711 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0022f	c1 e0 06	 shl	 eax, 6
  00232	8a 4d c4	 mov	 cl, BYTE PTR _int_blue$[ebp]
  00235	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 4712 : 
; 4713 : 	clip_3d_crds[clip_3d_coord].i = point2->i + ( t * ( point2->i - point1->i ) );

  0023b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0023e	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  00243	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00246	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00249	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0024e	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00253	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00257	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0025c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00260	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00264	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00269	c1 e0 06	 shl	 eax, 6
  0026c	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 4714 : 	clip_3d_crds[clip_3d_coord].j = active_viewport.y_max;

  00274	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00279	c1 e0 06	 shl	 eax, 6
  0027c	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00284	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 4715 : 	clip_3d_crds[clip_3d_coord].y = point2->y + ( t * ( point2->y - point1->y ) );

  0028c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0028f	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00294	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00297	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0029a	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0029f	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  002a4	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002a8	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002ad	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002b1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  002ba	c1 e0 06	 shl	 eax, 6
  002bd	f3 0f 11 80 04
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+4], xmm0

; 4716 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  002c5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  002c8	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  002cd	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  002d0	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  002d3	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  002d8	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  002dd	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002e1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002e6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  002f3	c1 e0 06	 shl	 eax, 6
  002f6	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 4717 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  002fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00303	c1 e0 06	 shl	 eax, 6
  00306	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  0030e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00316	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0031a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0031e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00324	c1 e1 06	 shl	 ecx, 6
  00327	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 4718 : 
; 4719 : 	if ( ! clip_point )

  0032f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  00336	75 1e		 jne	 SHORT $LN5@insert_yma

; 4720 : 	{
; 4721 : 
; 4722 : 		clip_list = &clip_3d_crds[clip_3d_coord];

  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0033d	c1 e0 06	 shl	 eax, 6
  00340	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00345	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 4723 : 
; 4724 : 		clip_point = clip_list;

  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  0034f	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4725 : 	}
; 4726 : 	else

  00354	eb 24		 jmp	 SHORT $LN6@insert_yma
$LN5@insert_yma:

; 4727 : 	{
; 4728 : 
; 4729 : 		clip_point->next_vertex	= &clip_3d_crds[clip_3d_coord];

  00356	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0035b	c1 e0 06	 shl	 eax, 6
  0035e	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00363	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00369	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 4730 : 
; 4731 : 		clip_point = clip_point->next_vertex;

  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00371	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00374	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_yma:

; 4732 : 	}
; 4733 : 
; 4734 : 	clip_3d_coord ++;

  0037a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0037f	83 c0 01	 add	 eax, 1
  00382	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 4735 : 
; 4736 : #if REPORT_CLIP_STATISTICS
; 4737 : 
; 4738 : 	number_of_ymax_coordinates_inserted++;
; 4739 : 
; 4740 : #endif
; 4741 : }

  00387	5f		 pop	 edi
  00388	5e		 pop	 esi
  00389	5b		 pop	 ebx
  0038a	8b e5		 mov	 esp, ebp
  0038c	5d		 pop	 ebp
  0038d	c2 08 00	 ret	 8
?insert_ymax_contour_coordinate@@YGXPAUVERTEX@@0@Z ENDP	; insert_ymax_contour_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?insert_ymin_contour_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv249 = -152						; size = 8
tv306 = -144						; size = 8
tv243 = -136						; size = 8
_int_dblue$ = -64					; size = 4
_int_blue$ = -60					; size = 4
_int_dgreen$ = -56					; size = 4
_int_green$ = -52					; size = 4
_int_dred$ = -48					; size = 4
_int_red$ = -44						; size = 4
_blue$ = -40						; size = 4
_green$ = -36						; size = 4
_red$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_ymin_contour_coordinate@@YGXPAUVERTEX@@0@Z PROC	; insert_ymin_contour_coordinate, COMDAT

; 4526 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4527 : 
; 4528 : 	vertex
; 4529 : 		*tmp;
; 4530 : 
; 4531 : 	double
; 4532 : 		t,
; 4533 : 		numerator,
; 4534 : 		denominator;
; 4535 : 
; 4536 : 	float
; 4537 : 		red,
; 4538 : 		green,
; 4539 : 		blue;
; 4540 : 
; 4541 : 	int
; 4542 : 		int_red,
; 4543 : 		int_dred,
; 4544 : 		int_green,
; 4545 : 		int_dgreen,
; 4546 : 		int_blue,
; 4547 : 		int_dblue;
; 4548 : 
; 4549 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_ymi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_ymin_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 17	 add	 eax, 23			; 00000017H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@GKFJCG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_ymi:

; 4550 : 
; 4551 : 	if ( point1->i > point2->i )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00038	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  0003c	76 12		 jbe	 SHORT $LN3@insert_ymi

; 4552 : 	{
; 4553 : 
; 4554 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 4555 : 
; 4556 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 4557 : 
; 4558 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_ymi:

; 4559 : 	}
; 4560 : 
; 4561 : 	numerator = active_viewport.y_min - point2->j;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0005b	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 4562 : 
; 4563 : 	denominator = point2->j - point1->j;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00074	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 4564 : 
; 4565 : #ifdef DEBUG
; 4566 : 
; 4567 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 78 ff ff
	ff		 fstp	 QWORD PTR tv243[ebp]
  0009d	f2 0f 10 85 78
	ff ff ff	 movsd	 xmm0, QWORD PTR tv243[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 70
	ff ff ff	 movsd	 QWORD PTR tv306[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 68 ff ff
	ff		 fstp	 QWORD PTR tv249[ebp]
  000c8	f2 0f 10 85 68
	ff ff ff	 movsd	 xmm0, QWORD PTR tv249[ebp]
  000d0	f2 0f 10 8d 70
	ff ff ff	 movsd	 xmm1, QWORD PTR tv306[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_ymi

; 4568 : 	{
; 4569 : 
; 4570 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_ymi:

; 4571 : 	}
; 4572 : 
; 4573 : #endif
; 4574 : 
; 4575 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 4576 : 
; 4577 : 	int_red = point2->red;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00101	89 4d d4	 mov	 DWORD PTR _int_red$[ebp], ecx

; 4578 : 	int_dred = int_red - ( int ) point1->red;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0010b	8b 55 d4	 mov	 edx, DWORD PTR _int_red$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 d0	 mov	 DWORD PTR _int_dred$[ebp], edx

; 4579 : 
; 4580 : 	int_green = point2->green;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0011a	89 4d cc	 mov	 DWORD PTR _int_green$[ebp], ecx

; 4581 : 	int_dgreen = int_green - ( int ) point1->green;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00124	8b 55 cc	 mov	 edx, DWORD PTR _int_green$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 c8	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 4582 : 
; 4583 : 	int_blue = point2->blue;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00133	89 4d c4	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 4584 : 	int_dblue = int_blue - ( int ) point1->blue;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0013d	8b 55 c4	 mov	 edx, DWORD PTR _int_blue$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 c0	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 4585 : 
; 4586 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00145	f3 0f 2a 45 d4	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  0014a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0014e	f3 0f 2a 4d d0	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  00153	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00157	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0015c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00160	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00164	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 4587 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00169	f3 0f 2a 45 cc	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  0016e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00172	f3 0f 2a 4d c8	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00177	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0017b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00180	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00184	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00188	f3 0f 11 45 dc	 movss	 DWORD PTR _green$[ebp], xmm0

; 4588 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0018d	f3 0f 2a 45 c4	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00192	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00196	f3 0f 2a 4d c0	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  0019b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0019f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ac	f3 0f 11 45 d8	 movss	 DWORD PTR _blue$[ebp], xmm0

; 4589 : 
; 4590 : 	red += FLOAT_FLOAT_FACTOR;

  001b1	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _red$[ebp]
  001b6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001be	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 4591 : 	green += FLOAT_FLOAT_FACTOR;

  001c3	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _green$[ebp]
  001c8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001d0	f3 0f 11 45 dc	 movss	 DWORD PTR _green$[ebp], xmm0

; 4592 : 	blue += FLOAT_FLOAT_FACTOR;

  001d5	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _blue$[ebp]
  001da	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001e2	f3 0f 11 45 d8	 movss	 DWORD PTR _blue$[ebp], xmm0

; 4593 : 
; 4594 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  001e7	8b 45 e0	 mov	 eax, DWORD PTR _red$[ebp]
  001ea	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  001ef	89 45 d4	 mov	 DWORD PTR _int_red$[ebp], eax

; 4595 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  001f2	8b 45 dc	 mov	 eax, DWORD PTR _green$[ebp]
  001f5	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  001fa	89 45 cc	 mov	 DWORD PTR _int_green$[ebp], eax

; 4596 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  001fd	8b 45 d8	 mov	 eax, DWORD PTR _blue$[ebp]
  00200	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00205	89 45 c4	 mov	 DWORD PTR _int_blue$[ebp], eax

; 4597 : 
; 4598 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0020d	c1 e0 06	 shl	 eax, 6
  00210	8a 4d d4	 mov	 cl, BYTE PTR _int_red$[ebp]
  00213	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 4599 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0021e	c1 e0 06	 shl	 eax, 6
  00221	8a 4d cc	 mov	 cl, BYTE PTR _int_green$[ebp]
  00224	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 4600 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0022f	c1 e0 06	 shl	 eax, 6
  00232	8a 4d c4	 mov	 cl, BYTE PTR _int_blue$[ebp]
  00235	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 4601 : 
; 4602 : 	clip_3d_crds[clip_3d_coord].i = point2->i + ( t * ( point2->i - point1->i ) );

  0023b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0023e	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  00243	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00246	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00249	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0024e	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00253	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00257	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0025c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00260	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00264	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00269	c1 e0 06	 shl	 eax, 6
  0026c	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 4603 : 	clip_3d_crds[clip_3d_coord].j = active_viewport.y_min;

  00274	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00279	c1 e0 06	 shl	 eax, 6
  0027c	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00284	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 4604 : 	clip_3d_crds[clip_3d_coord].y = point2->y + ( t * ( point2->y - point1->y ) );

  0028c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0028f	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00294	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00297	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0029a	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0029f	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  002a4	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002a8	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002ad	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002b1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  002ba	c1 e0 06	 shl	 eax, 6
  002bd	f3 0f 11 80 04
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+4], xmm0

; 4605 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  002c5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  002c8	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  002cd	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  002d0	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  002d3	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  002d8	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  002dd	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002e1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002e6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  002f3	c1 e0 06	 shl	 eax, 6
  002f6	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 4606 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  002fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00303	c1 e0 06	 shl	 eax, 6
  00306	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  0030e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00316	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0031a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0031e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00324	c1 e1 06	 shl	 ecx, 6
  00327	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 4607 : 
; 4608 : 	if ( ! clip_point )

  0032f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  00336	75 1e		 jne	 SHORT $LN5@insert_ymi

; 4609 : 	{
; 4610 : 
; 4611 : 		clip_list = & clip_3d_crds[clip_3d_coord];

  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0033d	c1 e0 06	 shl	 eax, 6
  00340	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00345	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 4612 : 
; 4613 : 		clip_point = clip_list;

  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  0034f	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4614 : 	}
; 4615 : 	else

  00354	eb 24		 jmp	 SHORT $LN6@insert_ymi
$LN5@insert_ymi:

; 4616 : 	{
; 4617 : 
; 4618 : 		clip_point->next_vertex = & clip_3d_crds[clip_3d_coord];

  00356	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0035b	c1 e0 06	 shl	 eax, 6
  0035e	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00363	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00369	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 4619 : 
; 4620 : 		clip_point = clip_point->next_vertex;

  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00371	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00374	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_ymi:

; 4621 : 	}
; 4622 : 
; 4623 : 	clip_3d_coord ++;

  0037a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0037f	83 c0 01	 add	 eax, 1
  00382	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 4624 : 
; 4625 : #if REPORT_CLIP_STATISTICS
; 4626 : 
; 4627 : 	number_of_ymin_coordinates_inserted++;
; 4628 : 
; 4629 : #endif
; 4630 : }

  00387	5f		 pop	 edi
  00388	5e		 pop	 esi
  00389	5b		 pop	 ebx
  0038a	8b e5		 mov	 esp, ebp
  0038c	5d		 pop	 ebp
  0038d	c2 08 00	 ret	 8
?insert_ymin_contour_coordinate@@YGXPAUVERTEX@@0@Z ENDP	; insert_ymin_contour_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?insert_xmax_contour_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv249 = -152						; size = 8
tv306 = -144						; size = 8
tv243 = -136						; size = 8
_int_dblue$ = -64					; size = 4
_int_blue$ = -60					; size = 4
_int_dgreen$ = -56					; size = 4
_int_green$ = -52					; size = 4
_int_dred$ = -48					; size = 4
_int_red$ = -44						; size = 4
_blue$ = -40						; size = 4
_green$ = -36						; size = 4
_red$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_xmax_contour_coordinate@@YGXPAUVERTEX@@0@Z PROC	; insert_xmax_contour_coordinate, COMDAT

; 4415 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4416 : 
; 4417 : 	vertex
; 4418 : 		*tmp;
; 4419 : 
; 4420 : 	double
; 4421 : 		t,
; 4422 : 		numerator,
; 4423 : 		denominator;
; 4424 : 
; 4425 : 	float
; 4426 : 		red,
; 4427 : 		green,
; 4428 : 		blue;
; 4429 : 
; 4430 : 	int
; 4431 : 		int_red,
; 4432 : 		int_dred,
; 4433 : 		int_green,
; 4434 : 		int_dgreen,
; 4435 : 		int_blue,
; 4436 : 		int_dblue;
; 4437 : 
; 4438 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_xma
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_xmax_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 17	 add	 eax, 23			; 00000017H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@GKFJCG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_xma:

; 4439 : 
; 4440 : 	if ( point1->j > point2->j )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00038	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  0003c	76 12		 jbe	 SHORT $LN3@insert_xma

; 4441 : 	{
; 4442 : 
; 4443 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 4444 : 
; 4445 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 4446 : 
; 4447 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_xma:

; 4448 : 	}
; 4449 : 
; 4450 : 	numerator = active_viewport.x_max - point2->i;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0005b	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 4451 : 
; 4452 : 	denominator = point2->i - point1->i;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00074	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 4453 : 
; 4454 : #ifdef DEBUG
; 4455 : 
; 4456 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 78 ff ff
	ff		 fstp	 QWORD PTR tv243[ebp]
  0009d	f2 0f 10 85 78
	ff ff ff	 movsd	 xmm0, QWORD PTR tv243[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 70
	ff ff ff	 movsd	 QWORD PTR tv306[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 68 ff ff
	ff		 fstp	 QWORD PTR tv249[ebp]
  000c8	f2 0f 10 85 68
	ff ff ff	 movsd	 xmm0, QWORD PTR tv249[ebp]
  000d0	f2 0f 10 8d 70
	ff ff ff	 movsd	 xmm1, QWORD PTR tv306[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_xma

; 4457 : 	{
; 4458 : 
; 4459 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_xma:

; 4460 : 	}
; 4461 : 
; 4462 : #endif
; 4463 : 
; 4464 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 4465 : 
; 4466 : 	int_red = point2->red;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00101	89 4d d4	 mov	 DWORD PTR _int_red$[ebp], ecx

; 4467 : 	int_dred = int_red - ( int ) point1->red;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0010b	8b 55 d4	 mov	 edx, DWORD PTR _int_red$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 d0	 mov	 DWORD PTR _int_dred$[ebp], edx

; 4468 : 
; 4469 : 	int_green = point2->green;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0011a	89 4d cc	 mov	 DWORD PTR _int_green$[ebp], ecx

; 4470 : 	int_dgreen = int_green - ( int ) point1->green;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00124	8b 55 cc	 mov	 edx, DWORD PTR _int_green$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 c8	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 4471 : 
; 4472 : 	int_blue = point2->blue;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00133	89 4d c4	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 4473 : 	int_dblue = int_blue - ( int ) point1->blue;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0013d	8b 55 c4	 mov	 edx, DWORD PTR _int_blue$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 c0	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 4474 : 
; 4475 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00145	f3 0f 2a 45 d4	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  0014a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0014e	f3 0f 2a 4d d0	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  00153	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00157	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0015c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00160	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00164	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 4476 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00169	f3 0f 2a 45 cc	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  0016e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00172	f3 0f 2a 4d c8	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00177	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0017b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00180	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00184	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00188	f3 0f 11 45 dc	 movss	 DWORD PTR _green$[ebp], xmm0

; 4477 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0018d	f3 0f 2a 45 c4	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00192	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00196	f3 0f 2a 4d c0	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  0019b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0019f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ac	f3 0f 11 45 d8	 movss	 DWORD PTR _blue$[ebp], xmm0

; 4478 : 
; 4479 : 	red += FLOAT_FLOAT_FACTOR;

  001b1	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _red$[ebp]
  001b6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001be	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 4480 : 	green += FLOAT_FLOAT_FACTOR;

  001c3	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _green$[ebp]
  001c8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001d0	f3 0f 11 45 dc	 movss	 DWORD PTR _green$[ebp], xmm0

; 4481 : 	blue += FLOAT_FLOAT_FACTOR;

  001d5	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _blue$[ebp]
  001da	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001e2	f3 0f 11 45 d8	 movss	 DWORD PTR _blue$[ebp], xmm0

; 4482 : 
; 4483 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  001e7	8b 45 e0	 mov	 eax, DWORD PTR _red$[ebp]
  001ea	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  001ef	89 45 d4	 mov	 DWORD PTR _int_red$[ebp], eax

; 4484 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  001f2	8b 45 dc	 mov	 eax, DWORD PTR _green$[ebp]
  001f5	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  001fa	89 45 cc	 mov	 DWORD PTR _int_green$[ebp], eax

; 4485 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  001fd	8b 45 d8	 mov	 eax, DWORD PTR _blue$[ebp]
  00200	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00205	89 45 c4	 mov	 DWORD PTR _int_blue$[ebp], eax

; 4486 : 
; 4487 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0020d	c1 e0 06	 shl	 eax, 6
  00210	8a 4d d4	 mov	 cl, BYTE PTR _int_red$[ebp]
  00213	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 4488 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0021e	c1 e0 06	 shl	 eax, 6
  00221	8a 4d cc	 mov	 cl, BYTE PTR _int_green$[ebp]
  00224	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 4489 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0022f	c1 e0 06	 shl	 eax, 6
  00232	8a 4d c4	 mov	 cl, BYTE PTR _int_blue$[ebp]
  00235	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 4490 : 
; 4491 : 	clip_3d_crds[clip_3d_coord].i = active_viewport.x_max;

  0023b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00240	c1 e0 06	 shl	 eax, 6
  00243	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0024b	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 4492 : 	clip_3d_crds[clip_3d_coord].j = point2->j + ( t * ( point2->j - point1->j ) );

  00253	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00256	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  0025b	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0025e	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00261	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  00266	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  0026b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0026f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00274	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00278	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0027c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00281	c1 e0 06	 shl	 eax, 6
  00284	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 4493 : 	clip_3d_crds[clip_3d_coord].y = point2->y + ( t * ( point2->y - point1->y ) );

  0028c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0028f	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00294	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00297	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0029a	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0029f	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  002a4	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002a8	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002ad	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002b1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  002ba	c1 e0 06	 shl	 eax, 6
  002bd	f3 0f 11 80 04
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+4], xmm0

; 4494 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  002c5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  002c8	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  002cd	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  002d0	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  002d3	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  002d8	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  002dd	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002e1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002e6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  002f3	c1 e0 06	 shl	 eax, 6
  002f6	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 4495 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  002fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00303	c1 e0 06	 shl	 eax, 6
  00306	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  0030e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00316	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0031a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0031e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00324	c1 e1 06	 shl	 ecx, 6
  00327	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 4496 : 
; 4497 : 	if ( ! clip_point )

  0032f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  00336	75 1e		 jne	 SHORT $LN5@insert_xma

; 4498 : 	{
; 4499 : 
; 4500 : 		clip_list = & clip_3d_crds[clip_3d_coord];

  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0033d	c1 e0 06	 shl	 eax, 6
  00340	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00345	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 4501 : 
; 4502 : 		clip_point = clip_list;

  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  0034f	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4503 : 	}
; 4504 : 	else

  00354	eb 24		 jmp	 SHORT $LN6@insert_xma
$LN5@insert_xma:

; 4505 : 	{
; 4506 : 
; 4507 : 		clip_point->next_vertex = & clip_3d_crds[clip_3d_coord];

  00356	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0035b	c1 e0 06	 shl	 eax, 6
  0035e	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00363	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00369	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 4508 : 
; 4509 : 		clip_point = clip_point->next_vertex;

  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00371	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00374	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_xma:

; 4510 : 	}
; 4511 : 
; 4512 : 	clip_3d_coord ++;

  0037a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0037f	83 c0 01	 add	 eax, 1
  00382	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 4513 : 
; 4514 : #if REPORT_CLIP_STATISTICS
; 4515 : 
; 4516 : 	number_of_xmax_coordinates_inserted++;
; 4517 : 
; 4518 : #endif
; 4519 : }

  00387	5f		 pop	 edi
  00388	5e		 pop	 esi
  00389	5b		 pop	 ebx
  0038a	8b e5		 mov	 esp, ebp
  0038c	5d		 pop	 ebp
  0038d	c2 08 00	 ret	 8
?insert_xmax_contour_coordinate@@YGXPAUVERTEX@@0@Z ENDP	; insert_xmax_contour_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?insert_xmin_contour_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv249 = -152						; size = 8
tv306 = -144						; size = 8
tv243 = -136						; size = 8
_int_dblue$ = -64					; size = 4
_int_blue$ = -60					; size = 4
_int_dgreen$ = -56					; size = 4
_int_green$ = -52					; size = 4
_int_dred$ = -48					; size = 4
_int_red$ = -44						; size = 4
_blue$ = -40						; size = 4
_green$ = -36						; size = 4
_red$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_tmp$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_xmin_contour_coordinate@@YGXPAUVERTEX@@0@Z PROC	; insert_xmin_contour_coordinate, COMDAT

; 4304 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4305 : 
; 4306 : 	vertex
; 4307 : 		*tmp;
; 4308 : 
; 4309 : 	double
; 4310 : 		t,
; 4311 : 		numerator,
; 4312 : 		denominator;
; 4313 : 
; 4314 : 	float
; 4315 : 		red,
; 4316 : 		green,
; 4317 : 		blue;
; 4318 : 
; 4319 : 	int
; 4320 : 		int_red,
; 4321 : 		int_dred,
; 4322 : 		int_green,
; 4323 : 		int_dgreen,
; 4324 : 		int_blue,
; 4325 : 		int_dblue;
; 4326 : 
; 4327 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_xmi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_xmin_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 17	 add	 eax, 23			; 00000017H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@GKFJCG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_xmi:

; 4328 : 
; 4329 : 	if ( point1->j > point2->j )

  0002d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00033	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00038	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  0003c	76 12		 jbe	 SHORT $LN3@insert_xmi

; 4330 : 	{
; 4331 : 
; 4332 : 		tmp = point1;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00041	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 4333 : 
; 4334 : 		point1 = point2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00047	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 4335 : 
; 4336 : 		point2 = tmp;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0004d	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN3@insert_xmi:

; 4337 : 	}
; 4338 : 
; 4339 : 	numerator = active_viewport.x_min - point2->i;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0005b	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00060	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00064	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 4340 : 
; 4341 : 	denominator = point2->i - point1->i;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0006f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00074	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00079	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007d	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 4342 : 
; 4343 : #ifdef DEBUG
; 4344 : 
; 4345 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00082	83 ec 08	 sub	 esp, 8
  00085	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  0008a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _fabs
  00094	83 c4 08	 add	 esp, 8
  00097	dd 9d 78 ff ff
	ff		 fstp	 QWORD PTR tv243[ebp]
  0009d	f2 0f 10 85 78
	ff ff ff	 movsd	 xmm0, QWORD PTR tv243[ebp]
  000a5	83 ec 08	 sub	 esp, 8
  000a8	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  000ad	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b2	f2 0f 11 85 70
	ff ff ff	 movsd	 QWORD PTR tv306[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 _fabs
  000bf	83 c4 08	 add	 esp, 8
  000c2	dd 9d 68 ff ff
	ff		 fstp	 QWORD PTR tv249[ebp]
  000c8	f2 0f 10 85 68
	ff ff ff	 movsd	 xmm0, QWORD PTR tv249[ebp]
  000d0	f2 0f 10 8d 70
	ff ff ff	 movsd	 xmm1, QWORD PTR tv306[ebp]
  000d8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000dc	76 0d		 jbe	 SHORT $LN4@insert_xmi

; 4346 : 	{
; 4347 : 
; 4348 : 		debug_fatal ( "Internal clipping error" );

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e8	83 c4 04	 add	 esp, 4
$LN4@insert_xmi:

; 4349 : 	}
; 4350 : 
; 4351 : #endif
; 4352 : 
; 4353 : 	t = ( numerator / denominator );

  000eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000f0	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000f5	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 4354 : 
; 4355 : 	int_red = point2->red;

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fd	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00101	89 4d d4	 mov	 DWORD PTR _int_red$[ebp], ecx

; 4356 : 	int_dred = int_red - ( int ) point1->red;

  00104	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00107	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0010b	8b 55 d4	 mov	 edx, DWORD PTR _int_red$[ebp]
  0010e	2b d1		 sub	 edx, ecx
  00110	89 55 d0	 mov	 DWORD PTR _int_dred$[ebp], edx

; 4357 : 
; 4358 : 	int_green = point2->green;

  00113	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00116	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0011a	89 4d cc	 mov	 DWORD PTR _int_green$[ebp], ecx

; 4359 : 	int_dgreen = int_green - ( int ) point1->green;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00120	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00124	8b 55 cc	 mov	 edx, DWORD PTR _int_green$[ebp]
  00127	2b d1		 sub	 edx, ecx
  00129	89 55 c8	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 4360 : 
; 4361 : 	int_blue = point2->blue;

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012f	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00133	89 4d c4	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 4362 : 	int_dblue = int_blue - ( int ) point1->blue;

  00136	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00139	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0013d	8b 55 c4	 mov	 edx, DWORD PTR _int_blue$[ebp]
  00140	2b d1		 sub	 edx, ecx
  00142	89 55 c0	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 4363 : 
; 4364 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00145	f3 0f 2a 45 d4	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  0014a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0014e	f3 0f 2a 4d d0	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  00153	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00157	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0015c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00160	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00164	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 4365 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00169	f3 0f 2a 45 cc	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  0016e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00172	f3 0f 2a 4d c8	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00177	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0017b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00180	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00184	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00188	f3 0f 11 45 dc	 movss	 DWORD PTR _green$[ebp], xmm0

; 4366 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0018d	f3 0f 2a 45 c4	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00192	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00196	f3 0f 2a 4d c0	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  0019b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0019f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ac	f3 0f 11 45 d8	 movss	 DWORD PTR _blue$[ebp], xmm0

; 4367 : 
; 4368 : 	red += FLOAT_FLOAT_FACTOR;

  001b1	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _red$[ebp]
  001b6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001be	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 4369 : 	green += FLOAT_FLOAT_FACTOR;

  001c3	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _green$[ebp]
  001c8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001d0	f3 0f 11 45 dc	 movss	 DWORD PTR _green$[ebp], xmm0

; 4370 : 	blue += FLOAT_FLOAT_FACTOR;

  001d5	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _blue$[ebp]
  001da	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001e2	f3 0f 11 45 d8	 movss	 DWORD PTR _blue$[ebp], xmm0

; 4371 : 
; 4372 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  001e7	8b 45 e0	 mov	 eax, DWORD PTR _red$[ebp]
  001ea	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  001ef	89 45 d4	 mov	 DWORD PTR _int_red$[ebp], eax

; 4373 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  001f2	8b 45 dc	 mov	 eax, DWORD PTR _green$[ebp]
  001f5	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  001fa	89 45 cc	 mov	 DWORD PTR _int_green$[ebp], eax

; 4374 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  001fd	8b 45 d8	 mov	 eax, DWORD PTR _blue$[ebp]
  00200	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00205	89 45 c4	 mov	 DWORD PTR _int_blue$[ebp], eax

; 4375 : 
; 4376 : 	clip_3d_crds[clip_3d_coord].red = int_red;

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0020d	c1 e0 06	 shl	 eax, 6
  00210	8a 4d d4	 mov	 cl, BYTE PTR _int_red$[ebp]
  00213	88 88 32 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+50], cl

; 4377 : 	clip_3d_crds[clip_3d_coord].green = int_green;

  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0021e	c1 e0 06	 shl	 eax, 6
  00221	8a 4d cc	 mov	 cl, BYTE PTR _int_green$[ebp]
  00224	88 88 31 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+49], cl

; 4378 : 	clip_3d_crds[clip_3d_coord].blue = int_blue;

  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0022f	c1 e0 06	 shl	 eax, 6
  00232	8a 4d c4	 mov	 cl, BYTE PTR _int_blue$[ebp]
  00235	88 88 30 00 00
	00		 mov	 BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+48], cl

; 4379 : 
; 4380 : 	clip_3d_crds[clip_3d_coord].i = active_viewport.x_min;

  0023b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00240	c1 e0 06	 shl	 eax, 6
  00243	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0024b	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16], xmm0

; 4381 : 	clip_3d_crds[clip_3d_coord].j = point2->j + ( t * ( point2->j - point1->j ) );

  00253	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00256	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  0025b	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0025e	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00261	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  00266	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  0026b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0026f	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00274	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00278	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0027c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00281	c1 e0 06	 shl	 eax, 6
  00284	f3 0f 11 80 14
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20], xmm0

; 4382 : 	clip_3d_crds[clip_3d_coord].y = point2->y + ( t * ( point2->y - point1->y ) );

  0028c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0028f	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00294	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00297	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0029a	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0029f	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  002a4	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002a8	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002ad	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002b1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  002ba	c1 e0 06	 shl	 eax, 6
  002bd	f3 0f 11 80 04
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+4], xmm0

; 4383 : 	clip_3d_crds[clip_3d_coord].q = point2->q + ( t * ( point2->q - point1->q ) );

  002c5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  002c8	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  002cd	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  002d0	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  002d3	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  002d8	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  002dd	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002e1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002e6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  002f3	c1 e0 06	 shl	 eax, 6
  002f6	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12], xmm0

; 4384 : 	clip_3d_crds[clip_3d_coord].z = 1.0 / clip_3d_crds[clip_3d_coord].q;

  002fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00303	c1 e0 06	 shl	 eax, 6
  00306	f3 0f 5a 80 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+12]
  0030e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00316	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0031a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0031e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00324	c1 e1 06	 shl	 ecx, 6
  00327	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+8], xmm0

; 4385 : 
; 4386 : 	if ( !clip_point )

  0032f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  00336	75 1e		 jne	 SHORT $LN5@insert_xmi

; 4387 : 	{
; 4388 : 
; 4389 : 		clip_list = & clip_3d_crds[clip_3d_coord];

  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0033d	c1 e0 06	 shl	 eax, 6
  00340	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00345	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 4390 : 
; 4391 : 		clip_point = clip_list;

  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  0034f	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4392 : 	}
; 4393 : 	else

  00354	eb 24		 jmp	 SHORT $LN6@insert_xmi
$LN5@insert_xmi:

; 4394 : 	{
; 4395 : 
; 4396 : 		clip_point->next_vertex = & clip_3d_crds[clip_3d_coord];

  00356	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0035b	c1 e0 06	 shl	 eax, 6
  0035e	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00363	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00369	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 4397 : 
; 4398 : 		clip_point = clip_point->next_vertex;

  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00371	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00374	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN6@insert_xmi:

; 4399 : 	}
; 4400 : 
; 4401 : 	clip_3d_coord++;

  0037a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0037f	83 c0 01	 add	 eax, 1
  00382	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 4402 : 
; 4403 : #if REPORT_CLIP_STATISTICS
; 4404 : 
; 4405 : 	number_of_xmin_coordinates_inserted++;
; 4406 : 
; 4407 : #endif
; 4408 : }

  00387	5f		 pop	 edi
  00388	5e		 pop	 esi
  00389	5b		 pop	 ebx
  0038a	8b e5		 mov	 esp, ebp
  0038c	5d		 pop	 ebp
  0038d	c2 08 00	 ret	 8
?insert_xmin_contour_coordinate@@YGXPAUVERTEX@@0@Z ENDP	; insert_xmin_contour_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
_clip$ = -12						; size = 4
_t$ = -8						; size = 8
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z PROC	; insert_top_contour_coordinate, COMDAT

; 5006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5007 : 
; 5008 : 	double
; 5009 : 		t;
; 5010 : 
; 5011 : 	vertex
; 5012 : 		*clip;
; 5013 : 
; 5014 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  00009	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00010	7c 18		 jl	 SHORT $LN2@insert_top
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  00017	83 c0 08	 add	 eax, 8
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@GKFJCG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_top:

; 5015 : 
; 5016 : 	t = ( ( contour_maximum_height - point2->y ) / ( point2->y - point1->y ) );

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?contour_maximum_height@@3MA
  00035	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0003d	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00040	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00045	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  0004a	f3 0f 5e c1	 divss	 xmm0, xmm1
  0004e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00052	f2 0f 11 45 f8	 movsd	 QWORD PTR _t$[ebp], xmm0

; 5017 : 
; 5018 : 	clip = &clip_3d_crds[clip_3d_coord];

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0005c	c1 e0 06	 shl	 eax, 6
  0005f	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00064	89 45 f4	 mov	 DWORD PTR _clip$[ebp], eax

; 5019 : 
; 5020 : 	clip_3d_coord++;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0006c	83 c0 01	 add	 eax, 1
  0006f	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 5021 : 
; 5022 : 	if ( !clip_point )

  00074	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0007b	75 14		 jne	 SHORT $LN3@insert_top

; 5023 : 	{
; 5024 : 
; 5025 : 		clip_list = clip;

  0007d	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 5026 : 
; 5027 : 		clip_point = clip_list;

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  0008a	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 5028 : 	}
; 5029 : 	else

  0008f	eb 19		 jmp	 SHORT $LN4@insert_top
$LN3@insert_top:

; 5030 : 	{
; 5031 : 
; 5032 : 		clip_point->next_vertex	= clip;

  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00096	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00099	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 5033 : 
; 5034 : 		clip_point = clip_point->next_vertex;

  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000a1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000a4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN4@insert_top:

; 5035 : 	}
; 5036 : 
; 5037 : 	clip->i = point2->i + ( t * ( point2->i - point1->i ) );

  000aa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000ad	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  000b2	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  000b5	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  000b8	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  000bd	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  000c2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000c6	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  000cb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d3	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  000d6	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 5038 : 	clip->j = point2->j + ( t * ( point2->j - point1->j ) );

  000db	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000de	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  000e3	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  000e6	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  000e9	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  000ee	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  000f3	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000f7	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  000fc	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00100	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00104	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00107	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 5039 : 	clip->outcode = generate_contour_outcode ( clip->i, clip->j );

  0010c	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0010f	51		 push	 ecx
  00110	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  0011d	51		 push	 ecx
  0011e	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00128	e8 00 00 00 00	 call	 ?generate_contour_outcode@@YGEMM@Z ; generate_contour_outcode
  0012d	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00130	88 42 2c	 mov	 BYTE PTR [edx+44], al

; 5040 : 	clip->y = contour_maximum_height;

  00133	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00136	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?contour_maximum_height@@3MA
  0013e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 5041 : }

  00143	5f		 pop	 edi
  00144	5e		 pop	 esi
  00145	5b		 pop	 ebx
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c2 08 00	 ret	 8
?insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z ENDP	; insert_top_contour_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
_clip$ = -12						; size = 4
_t$ = -8						; size = 8
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z PROC ; insert_bottom_contour_coordinate, COMDAT

; 4964 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4965 : 
; 4966 : 	double
; 4967 : 		t;
; 4968 : 
; 4969 : 	vertex
; 4970 : 		*clip;
; 4971 : 
; 4972 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  00009	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00010	7c 18		 jl	 SHORT $LN2@insert_bot
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  00017	83 c0 08	 add	 eax, 8
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@GKFJCG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_bot:

; 4973 : 
; 4974 : 	t = ( ( contour_minimum_height - point2->y ) / ( point2->y - point1->y ) );

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?contour_minimum_height@@3MA
  00035	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0003d	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00040	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00045	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  0004a	f3 0f 5e c1	 divss	 xmm0, xmm1
  0004e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00052	f2 0f 11 45 f8	 movsd	 QWORD PTR _t$[ebp], xmm0

; 4975 : 
; 4976 : 	clip = &clip_3d_crds[clip_3d_coord];

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0005c	c1 e0 06	 shl	 eax, 6
  0005f	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00064	89 45 f4	 mov	 DWORD PTR _clip$[ebp], eax

; 4977 : 
; 4978 : 	clip_3d_coord++;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0006c	83 c0 01	 add	 eax, 1
  0006f	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 4979 : 
; 4980 : 	if ( !clip_point )

  00074	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0007b	75 14		 jne	 SHORT $LN3@insert_bot

; 4981 : 	{
; 4982 : 
; 4983 : 		clip_list = clip;

  0007d	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 4984 : 
; 4985 : 		clip_point = clip_list;

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  0008a	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4986 : 	}
; 4987 : 	else

  0008f	eb 19		 jmp	 SHORT $LN4@insert_bot
$LN3@insert_bot:

; 4988 : 	{
; 4989 : 
; 4990 : 		clip_point->next_vertex	= clip;

  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00096	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00099	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 4991 : 
; 4992 : 		clip_point = clip_point->next_vertex;

  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000a1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000a4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN4@insert_bot:

; 4993 : 	}
; 4994 : 
; 4995 : 	clip->i = point2->i + ( t * ( point2->i - point1->i ) );

  000aa	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000ad	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  000b2	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  000b5	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  000b8	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  000bd	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  000c2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000c6	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  000cb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d3	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  000d6	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 4996 : 	clip->j = point2->j + ( t * ( point2->j - point1->j ) );

  000db	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000de	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  000e3	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  000e6	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  000e9	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  000ee	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  000f3	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000f7	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  000fc	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00100	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00104	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00107	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 4997 : 	clip->outcode = generate_contour_outcode ( clip->i, clip->j );

  0010c	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0010f	51		 push	 ecx
  00110	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  0011d	51		 push	 ecx
  0011e	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00128	e8 00 00 00 00	 call	 ?generate_contour_outcode@@YGEMM@Z ; generate_contour_outcode
  0012d	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00130	88 42 2c	 mov	 BYTE PTR [edx+44], al

; 4998 : 	clip->y = contour_minimum_height;

  00133	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00136	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?contour_minimum_height@@3MA
  0013e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 4999 : }

  00143	5f		 pop	 edi
  00144	5e		 pop	 esi
  00145	5b		 pop	 ebx
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c2 08 00	 ret	 8
?insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z ENDP ; insert_bottom_contour_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?top_clip_contour_polygon@@YGPAUVERTEX@@PAU1@PAH@Z
_TEXT	SEGMENT
_outcode2$ = -8						; size = 4
_outcode$ = -4						; size = 4
_polygon$ = 8						; size = 4
_polygon_outcode$ = 12					; size = 4
?top_clip_contour_polygon@@YGPAUVERTEX@@PAU1@PAH@Z PROC	; top_clip_contour_polygon, COMDAT

; 4857 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4858 : 
; 4859 : 	int
; 4860 : 		outcode,
; 4861 : 		outcode2;
; 4862 : 
; 4863 : 	clip_list = NULL;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 4864 : 	clip_point = NULL;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 4865 : 	last_point = polygon;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 4866 : 	this_point = polygon->next_vertex;

  00025	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00028	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0002b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 4867 : 
; 4868 : 	outcode = 0;

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _outcode$[ebp], 0

; 4869 : 	outcode2 = CLIP_YONDER | CLIP_HITHER | CLIP_TOP | CLIP_BOTTOM | CLIP_LEFT | CLIP_RIGHT;

  00038	c7 45 f8 3f 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 63 ; 0000003fH

; 4870 : 
; 4871 : 	if ( !( polygon->outcode & CLIP_YONDER ) )

  0003f	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00042	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00046	83 e1 10	 and	 ecx, 16			; 00000010H
  00049	75 34		 jne	 SHORT $LN2@top_clip_c

; 4872 : 	{
; 4873 : 
; 4874 : 		clip_list = polygon;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0004e	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 4875 : 		clip_point = polygon;

  00053	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00056	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4876 : 
; 4877 : 		polygon->next_vertex = NULL;

  0005b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0005e	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 4878 : 
; 4879 : 		outcode |= polygon->outcode;

  00065	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00068	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0006c	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  0006f	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4880 : 		outcode2 &= polygon->outcode;

  00072	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00075	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00079	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0007c	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN2@top_clip_c:

; 4881 : 	}
; 4882 : 
; 4883 : 	while ( this_point )

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  00086	0f 84 df 00 00
	00		 je	 $LN3@top_clip_c

; 4884 : 	{
; 4885 : 
; 4886 : 		if ( !( this_point->outcode & CLIP_YONDER ) )

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00091	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00095	83 e1 10	 and	 ecx, 16			; 00000010H
  00098	75 76		 jne	 SHORT $LN5@top_clip_c

; 4887 : 		{
; 4888 : 
; 4889 : 			outcode |= this_point->outcode;

  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0009f	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000a3	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000a6	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4890 : 			outcode2 &= this_point->outcode;

  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000ae	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000b2	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  000b5	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx

; 4891 : 
; 4892 : 			if ( last_point->outcode & CLIP_YONDER )

  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000bd	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000c1	83 e1 10	 and	 ecx, 16			; 00000010H
  000c4	74 30		 je	 SHORT $LN7@top_clip_c

; 4893 : 			{
; 4894 : 
; 4895 : 				insert_top_contour_coordinate ( last_point, this_point );

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000cb	50		 push	 eax
  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 ?insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_top_contour_coordinate

; 4896 : 
; 4897 : 				outcode |= clip_point->outcode;

  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000dd	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000e1	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000e4	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4898 : 				outcode2 &= clip_point->outcode;

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000ec	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000f0	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  000f3	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN7@top_clip_c:

; 4899 : 			}
; 4900 : 
; 4901 : 			clip_point->next_vertex = this_point;

  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00101	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 4902 : 			clip_point = this_point;

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00109	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4903 : 		}
; 4904 : 		else

  0010e	eb 3e		 jmp	 SHORT $LN6@top_clip_c
$LN5@top_clip_c:

; 4905 : 		{
; 4906 : 
; 4907 : 			if ( ! ( last_point->outcode & CLIP_YONDER ) )

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00115	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00119	83 e1 10	 and	 ecx, 16			; 00000010H
  0011c	75 30		 jne	 SHORT $LN6@top_clip_c

; 4908 : 			{
; 4909 : 
; 4910 : 				insert_top_contour_coordinate ( this_point, last_point );

  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00123	50		 push	 eax
  00124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 ?insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_top_contour_coordinate

; 4911 : 
; 4912 : 				outcode |= clip_point->outcode;

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00135	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00139	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  0013c	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4913 : 				outcode2 &= clip_point->outcode;

  0013f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00144	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00148	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0014b	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN6@top_clip_c:

; 4914 : 			}
; 4915 : 		}
; 4916 : 
; 4917 : 		last_point = this_point;

  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00153	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 4918 : 		this_point = this_point->next_vertex;

  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0015d	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00160	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 4919 : 	}

  00166	e9 14 ff ff ff	 jmp	 $LN2@top_clip_c
$LN3@top_clip_c:

; 4920 : 
; 4921 : 	if ( ( last_point->outcode & CLIP_YONDER ) ^ ( polygon->outcode & CLIP_YONDER ) )

  0016b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00170	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00174	83 e1 10	 and	 ecx, 16			; 00000010H
  00177	8b 55 08	 mov	 edx, DWORD PTR _polygon$[ebp]
  0017a	0f b6 42 2c	 movzx	 eax, BYTE PTR [edx+44]
  0017e	83 e0 10	 and	 eax, 16			; 00000010H
  00181	33 c8		 xor	 ecx, eax
  00183	74 4d		 je	 SHORT $LN9@top_clip_c

; 4922 : 	{
; 4923 : 
; 4924 : 		if ( last_point->outcode & CLIP_YONDER )

  00185	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0018a	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0018e	83 e1 10	 and	 ecx, 16			; 00000010H
  00191	74 12		 je	 SHORT $LN10@top_clip_c

; 4925 : 		{
; 4926 : 		
; 4927 : 			insert_top_contour_coordinate ( last_point, polygon );

  00193	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00196	50		 push	 eax
  00197	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0019d	51		 push	 ecx
  0019e	e8 00 00 00 00	 call	 ?insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_top_contour_coordinate

; 4928 : 		}
; 4929 : 		else

  001a3	eb 0f		 jmp	 SHORT $LN11@top_clip_c
$LN10@top_clip_c:

; 4930 : 		{
; 4931 : 	
; 4932 : 			insert_top_contour_coordinate ( polygon, last_point );

  001a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  001aa	50		 push	 eax
  001ab	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  001ae	51		 push	 ecx
  001af	e8 00 00 00 00	 call	 ?insert_top_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_top_contour_coordinate
$LN11@top_clip_c:

; 4933 : 		}
; 4934 : 
; 4935 : 		outcode |= clip_point->outcode;

  001b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001b9	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001bd	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  001c0	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4936 : 		outcode2 &= clip_point->outcode;

  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001c8	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001cc	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  001cf	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN9@top_clip_c:

; 4937 : 	}
; 4938 : 
; 4939 : 	if ( clip_point )

  001d2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  001d9	74 2a		 je	 SHORT $LN12@top_clip_c

; 4940 : 	{
; 4941 : 
; 4942 : 		clip_point->next_vertex = NULL;

  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001e0	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 4943 : 
; 4944 : 		outcode |= clip_point->outcode;

  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001ec	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001f0	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  001f3	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4945 : 		outcode2 &= clip_point->outcode;

  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001fb	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001ff	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00202	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN12@top_clip_c:

; 4946 : 	}
; 4947 : 
; 4948 : 	if ( ( outcode2 ) || ( !clip_list ) )

  00205	83 7d f8 00	 cmp	 DWORD PTR _outcode2$[ebp], 0
  00209	75 09		 jne	 SHORT $LN14@top_clip_c
  0020b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0
  00212	75 04		 jne	 SHORT $LN13@top_clip_c
$LN14@top_clip_c:

; 4949 : 	{
; 4950 : 
; 4951 : 		return ( NULL );

  00214	33 c0		 xor	 eax, eax
  00216	eb 0d		 jmp	 SHORT $LN1@top_clip_c
$LN13@top_clip_c:

; 4952 : 	}
; 4953 : 
; 4954 : 	*polygon_outcode = outcode;

  00218	8b 45 0c	 mov	 eax, DWORD PTR _polygon_outcode$[ebp]
  0021b	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  0021e	89 08		 mov	 DWORD PTR [eax], ecx

; 4955 : 
; 4956 : 	return ( clip_list );

  00220	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
$LN1@top_clip_c:

; 4957 : }

  00225	5f		 pop	 edi
  00226	5e		 pop	 esi
  00227	5b		 pop	 ebx
  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c2 08 00	 ret	 8
?top_clip_contour_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ENDP	; top_clip_contour_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?bottom_clip_contour_polygon@@YGPAUVERTEX@@PAU1@PAH@Z
_TEXT	SEGMENT
_outcode2$ = -8						; size = 4
_outcode$ = -4						; size = 4
_polygon$ = 8						; size = 4
_polygon_outcode$ = 12					; size = 4
?bottom_clip_contour_polygon@@YGPAUVERTEX@@PAU1@PAH@Z PROC ; bottom_clip_contour_polygon, COMDAT

; 4748 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4749 : 
; 4750 : 	int
; 4751 : 		outcode,
; 4752 : 		outcode2;
; 4753 : 
; 4754 : 	clip_list = NULL;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 4755 : 	clip_point = NULL;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 4756 : 	last_point = polygon;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 4757 : 	this_point = polygon->next_vertex;

  00025	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00028	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0002b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 4758 : 
; 4759 : 	outcode = 0;

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _outcode$[ebp], 0

; 4760 : 	outcode2 = CLIP_YONDER | CLIP_HITHER | CLIP_TOP | CLIP_BOTTOM | CLIP_LEFT | CLIP_RIGHT;

  00038	c7 45 f8 3f 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 63 ; 0000003fH

; 4761 : 
; 4762 : 	if ( !( polygon->outcode & CLIP_HITHER ) )

  0003f	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00042	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00046	83 e1 20	 and	 ecx, 32			; 00000020H
  00049	75 34		 jne	 SHORT $LN2@bottom_cli

; 4763 : 	{
; 4764 : 
; 4765 : 		clip_list = polygon;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0004e	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 4766 : 		clip_point = polygon;

  00053	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00056	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4767 : 
; 4768 : 		polygon->next_vertex = NULL;

  0005b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0005e	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 4769 : 
; 4770 : 		outcode |= polygon->outcode;

  00065	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00068	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0006c	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  0006f	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4771 : 		outcode2 &= polygon->outcode;

  00072	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00075	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00079	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0007c	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN2@bottom_cli:

; 4772 : 	}
; 4773 : 
; 4774 : 	while ( this_point )

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  00086	0f 84 df 00 00
	00		 je	 $LN3@bottom_cli

; 4775 : 	{
; 4776 : 
; 4777 : 		if ( !( this_point->outcode & CLIP_HITHER ) )

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00091	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00095	83 e1 20	 and	 ecx, 32			; 00000020H
  00098	75 76		 jne	 SHORT $LN5@bottom_cli

; 4778 : 		{
; 4779 : 
; 4780 : 			outcode |= this_point->outcode;

  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0009f	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000a3	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000a6	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4781 : 			outcode2 &= this_point->outcode;

  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000ae	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000b2	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  000b5	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx

; 4782 : 
; 4783 : 			if ( last_point->outcode & CLIP_HITHER )

  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000bd	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000c1	83 e1 20	 and	 ecx, 32			; 00000020H
  000c4	74 30		 je	 SHORT $LN7@bottom_cli

; 4784 : 			{
; 4785 : 
; 4786 : 				insert_bottom_contour_coordinate ( last_point, this_point );

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000cb	50		 push	 eax
  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 ?insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_bottom_contour_coordinate

; 4787 : 
; 4788 : 				outcode |= clip_point->outcode;

  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000dd	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000e1	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000e4	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4789 : 				outcode2 &= clip_point->outcode;

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000ec	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000f0	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  000f3	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN7@bottom_cli:

; 4790 : 			}
; 4791 : 
; 4792 : 			clip_point->next_vertex = this_point;

  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00101	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 4793 : 
; 4794 : 			clip_point = this_point;

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00109	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4795 : 		}
; 4796 : 		else

  0010e	eb 3e		 jmp	 SHORT $LN6@bottom_cli
$LN5@bottom_cli:

; 4797 : 		{
; 4798 : 
; 4799 : 			if ( !( last_point->outcode & CLIP_HITHER ) )

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00115	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00119	83 e1 20	 and	 ecx, 32			; 00000020H
  0011c	75 30		 jne	 SHORT $LN6@bottom_cli

; 4800 : 			{
; 4801 : 
; 4802 : 				insert_bottom_contour_coordinate ( this_point, last_point );

  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00123	50		 push	 eax
  00124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 ?insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_bottom_contour_coordinate

; 4803 : 
; 4804 : 				outcode |= clip_point->outcode;

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00135	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00139	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  0013c	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4805 : 				outcode2 &= clip_point->outcode;

  0013f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00144	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00148	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0014b	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN6@bottom_cli:

; 4806 : 			}
; 4807 : 		}
; 4808 : 
; 4809 : 		last_point = this_point;

  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00153	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 4810 : 
; 4811 : 		this_point = this_point->next_vertex;

  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0015d	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00160	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 4812 : 	}

  00166	e9 14 ff ff ff	 jmp	 $LN2@bottom_cli
$LN3@bottom_cli:

; 4813 : 
; 4814 : 	if ( ( last_point->outcode & CLIP_HITHER ) ^ ( polygon->outcode & CLIP_HITHER ) )

  0016b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00170	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00174	83 e1 20	 and	 ecx, 32			; 00000020H
  00177	8b 55 08	 mov	 edx, DWORD PTR _polygon$[ebp]
  0017a	0f b6 42 2c	 movzx	 eax, BYTE PTR [edx+44]
  0017e	83 e0 20	 and	 eax, 32			; 00000020H
  00181	33 c8		 xor	 ecx, eax
  00183	74 4d		 je	 SHORT $LN9@bottom_cli

; 4815 : 	{
; 4816 : 
; 4817 : 		if ( last_point->outcode & CLIP_HITHER )

  00185	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0018a	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0018e	83 e1 20	 and	 ecx, 32			; 00000020H
  00191	74 12		 je	 SHORT $LN10@bottom_cli

; 4818 : 		{
; 4819 : 		
; 4820 : 			insert_bottom_contour_coordinate ( last_point, polygon );

  00193	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00196	50		 push	 eax
  00197	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0019d	51		 push	 ecx
  0019e	e8 00 00 00 00	 call	 ?insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_bottom_contour_coordinate

; 4821 : 		}
; 4822 : 		else

  001a3	eb 0f		 jmp	 SHORT $LN11@bottom_cli
$LN10@bottom_cli:

; 4823 : 		{
; 4824 : 	
; 4825 : 			insert_bottom_contour_coordinate ( polygon, last_point );

  001a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  001aa	50		 push	 eax
  001ab	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  001ae	51		 push	 ecx
  001af	e8 00 00 00 00	 call	 ?insert_bottom_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_bottom_contour_coordinate
$LN11@bottom_cli:

; 4826 : 		}
; 4827 : 
; 4828 : 		outcode |= clip_point->outcode;

  001b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001b9	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001bd	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  001c0	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4829 : 		outcode2 &= clip_point->outcode;

  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001c8	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001cc	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  001cf	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN9@bottom_cli:

; 4830 : 	}
; 4831 : 
; 4832 : 	if ( clip_point )

  001d2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  001d9	74 2a		 je	 SHORT $LN12@bottom_cli

; 4833 : 	{
; 4834 : 
; 4835 : 		clip_point->next_vertex = NULL;

  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001e0	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 4836 : 
; 4837 : 		outcode |= clip_point->outcode;

  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001ec	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001f0	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  001f3	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 4838 : 		outcode2 &= clip_point->outcode;

  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001fb	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001ff	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00202	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN12@bottom_cli:

; 4839 : 	}
; 4840 : 
; 4841 : 	if ( ( outcode2 ) || ( !clip_list ) )

  00205	83 7d f8 00	 cmp	 DWORD PTR _outcode2$[ebp], 0
  00209	75 09		 jne	 SHORT $LN14@bottom_cli
  0020b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0
  00212	75 04		 jne	 SHORT $LN13@bottom_cli
$LN14@bottom_cli:

; 4842 : 	{
; 4843 : 
; 4844 : 		return ( NULL );

  00214	33 c0		 xor	 eax, eax
  00216	eb 0d		 jmp	 SHORT $LN1@bottom_cli
$LN13@bottom_cli:

; 4845 : 	}
; 4846 : 
; 4847 : 	*polygon_outcode = outcode;

  00218	8b 45 0c	 mov	 eax, DWORD PTR _polygon_outcode$[ebp]
  0021b	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  0021e	89 08		 mov	 DWORD PTR [eax], ecx

; 4848 : 
; 4849 : 	return ( clip_list );

  00220	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
$LN1@bottom_cli:

; 4850 : }

  00225	5f		 pop	 edi
  00226	5e		 pop	 esi
  00227	5b		 pop	 ebx
  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c2 08 00	 ret	 8
?bottom_clip_contour_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ENDP ; bottom_clip_contour_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?clip_contour_polygon@@YGPAUVERTEX@@PAU1@H@Z
_TEXT	SEGMENT
tv215 = -72						; size = 4
tv184 = -72						; size = 4
tv153 = -72						; size = 4
tv90 = -72						; size = 4
tv212 = -68						; size = 4
tv181 = -68						; size = 4
tv150 = -68						; size = 4
tv87 = -68						; size = 4
_polygon$ = 8						; size = 4
_outcode$ = 12						; size = 4
?clip_contour_polygon@@YGPAUVERTEX@@PAU1@H@Z PROC	; clip_contour_polygon, COMDAT

; 3883 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3884 : 
; 3885 : 	number_of_polygons_screen_clipped++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_polygons_screen_clipped@@3HA ; number_of_polygons_screen_clipped
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_polygons_screen_clipped@@3HA, eax ; number_of_polygons_screen_clipped

; 3886 : 
; 3887 : 	if ( outcode & CLIP_LEFT )

  00016	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	0f 84 74 01 00
	00		 je	 $LN10@clip_conto

; 3888 : 	{
; 3889 : 	
; 3890 : 		//
; 3891 : 		// First clip against the left side of the viewing rectangle
; 3892 : 		//
; 3893 : 	
; 3894 : 		clip_list = NULL;

  00022	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 3895 : 	
; 3896 : 		clip_point = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 3897 : 	
; 3898 : 		last_point = polygon;

  00036	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00039	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 3899 : 	
; 3900 : 		this_point = polygon->next_vertex;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00041	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00044	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 3901 : 	
; 3902 : 		if ( polygon->i >= active_viewport.x_min )

  0004a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0004d	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00052	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00059	72 1a		 jb	 SHORT $LN11@clip_conto

; 3903 : 		{
; 3904 : 	
; 3905 : 			//
; 3906 : 			// Start the clipped list off.
; 3907 : 			//
; 3908 : 	
; 3909 : 			clip_list = polygon;

  0005b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0005e	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 3910 : 	
; 3911 : 			clip_point = polygon;

  00063	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 3912 : 	
; 3913 : 			polygon->next_vertex = NULL;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0006e	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN11@clip_conto:

; 3914 : 		}
; 3915 : 	
; 3916 : 		while ( this_point )

  00075	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  0007c	0f 84 94 00 00
	00		 je	 $LN3@clip_conto

; 3917 : 		{
; 3918 : 	
; 3919 : 			if ( this_point->i >= active_viewport.x_min )

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00087	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0008c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00093	72 3f		 jb	 SHORT $LN12@clip_conto

; 3920 : 			{
; 3921 : 	
; 3922 : 				//
; 3923 : 				// This point is inside the screen boundary
; 3924 : 				//
; 3925 : 	
; 3926 : 				if ( last_point->i < active_viewport.x_min )

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0009a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  000a2	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  000a6	76 12		 jbe	 SHORT $LN14@clip_conto

; 3927 : 				{
; 3928 : 	
; 3929 : 					//
; 3930 : 					//	The last point isn't in the screen, but this one is, find intersection
; 3931 : 					//
; 3932 : 	
; 3933 : 					insert_xmin_contour_coordinate ( last_point, this_point );

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000ad	50		 push	 eax
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ?insert_xmin_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmin_contour_coordinate
$LN14@clip_conto:

; 3934 : 				}
; 3935 : 	
; 3936 : 				//
; 3937 : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put 1.0 in!
; 3938 : 				//
; 3939 : 	
; 3940 : 				clip_point->next_vertex = this_point;

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000c5	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 3941 : 	
; 3942 : 				clip_point = this_point;

  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000cd	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 3943 : 			}
; 3944 : 			else

  000d2	eb 25		 jmp	 SHORT $LN15@clip_conto
$LN12@clip_conto:

; 3945 : 			{
; 3946 : 	
; 3947 : 				//
; 3948 : 				// This point isn't in the screen area
; 3949 : 				//
; 3950 : 	
; 3951 : 				if ( last_point->i >= active_viewport.x_min )

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000d9	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  000de	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  000e5	72 12		 jb	 SHORT $LN15@clip_conto

; 3952 : 				{
; 3953 : 	
; 3954 : 					//
; 3955 : 					// The last point was visible - find intersection point
; 3956 : 					//
; 3957 : 					
; 3958 : 					insert_xmin_contour_coordinate ( last_point, this_point );

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000ec	50		 push	 eax
  000ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 ?insert_xmin_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmin_contour_coordinate
$LN15@clip_conto:

; 3959 : 				}
; 3960 : 			}
; 3961 : 	
; 3962 : 			last_point = this_point;

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000fe	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 3963 : 	
; 3964 : 			this_point = this_point->next_vertex;

  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00108	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0010b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 3965 : 		}

  00111	e9 5f ff ff ff	 jmp	 $LN11@clip_conto
$LN3@clip_conto:

; 3966 : 	
; 3967 : 		if ( !clip_point )

  00116	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0011d	75 07		 jne	 SHORT $LN16@clip_conto

; 3968 : 		{
; 3969 : 	
; 3970 : 			return ( NULL );						// If there are no valid points in the polygon, exit

  0011f	33 c0		 xor	 eax, eax
  00121	e9 f0 04 00 00	 jmp	 $LN1@clip_conto
$LN16@clip_conto:

; 3971 : 		}
; 3972 : 	
; 3973 : 		if ( ( last_point->i < active_viewport.x_min ) ^ ( polygon->i < active_viewport.x_min ) )

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0012b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00133	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  00137	76 09		 jbe	 SHORT $LN43@clip_conto
  00139	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  00140	eb 07		 jmp	 SHORT $LN44@clip_conto
$LN43@clip_conto:
  00142	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN44@clip_conto:
  00149	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  0014c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00154	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  00158	76 09		 jbe	 SHORT $LN45@clip_conto
  0015a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  00161	eb 07		 jmp	 SHORT $LN46@clip_conto
$LN45@clip_conto:
  00163	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN46@clip_conto:
  0016a	8b 55 bc	 mov	 edx, DWORD PTR tv87[ebp]
  0016d	33 55 b8	 xor	 edx, DWORD PTR tv90[ebp]
  00170	74 10		 je	 SHORT $LN17@clip_conto

; 3974 : 		{
; 3975 : 	
; 3976 : 			//
; 3977 : 			// The last point in the polygon was off the screen, the first 1.0 isn't, so add a clip point
; 3978 : 			//
; 3979 : 	
; 3980 : 			insert_xmin_contour_coordinate ( last_point, polygon );

  00172	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00175	50		 push	 eax
  00176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0017c	51		 push	 ecx
  0017d	e8 00 00 00 00	 call	 ?insert_xmin_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmin_contour_coordinate
$LN17@clip_conto:

; 3981 : 		}
; 3982 : 	
; 3983 : 		clip_point->next_vertex = NULL;

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00187	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 3984 : 	
; 3985 : 		polygon = clip_list;

  0018e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00193	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN10@clip_conto:

; 3986 : 	}
; 3987 : 
; 3988 : 	if ( outcode & CLIP_RIGHT )

  00196	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00199	83 e0 04	 and	 eax, 4
  0019c	0f 84 74 01 00
	00		 je	 $LN18@clip_conto

; 3989 : 	{
; 3990 : 	
; 3991 : 		//
; 3992 : 		// Next clip against the right side of the viewing rectangle
; 3993 : 		//
; 3994 : 	
; 3995 : 		clip_list = NULL;

  001a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 3996 : 	
; 3997 : 		clip_point = NULL;

  001ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 3998 : 	
; 3999 : 		last_point = polygon;

  001b6	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001b9	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 4000 : 	
; 4001 : 		this_point = polygon->next_vertex;

  001be	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001c1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001c4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 4002 : 	
; 4003 : 		if ( polygon->i <= active_viewport.x_max )

  001ca	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001cd	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  001d5	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  001d9	72 1a		 jb	 SHORT $LN19@clip_conto

; 4004 : 		{
; 4005 : 	
; 4006 : 			//
; 4007 : 			// Start the clipped list off.
; 4008 : 			//
; 4009 : 	
; 4010 : 			clip_list = polygon;

  001db	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001de	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 4011 : 	
; 4012 : 			clip_point = polygon;

  001e3	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001e6	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4013 : 	
; 4014 : 			polygon->next_vertex = NULL;

  001eb	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001ee	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN19@clip_conto:

; 4015 : 		}
; 4016 : 	
; 4017 : 		while ( this_point )

  001f5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  001fc	0f 84 94 00 00
	00		 je	 $LN5@clip_conto

; 4018 : 		{
; 4019 : 	
; 4020 : 			if ( this_point->i <= active_viewport.x_max )

  00202	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00207	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0020f	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  00213	72 3f		 jb	 SHORT $LN20@clip_conto

; 4021 : 			{
; 4022 : 	
; 4023 : 				//
; 4024 : 				// This point is inside the screen boundary
; 4025 : 				//
; 4026 : 	
; 4027 : 				if ( last_point->i > active_viewport.x_max )

  00215	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0021a	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0021f	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00226	76 12		 jbe	 SHORT $LN22@clip_conto

; 4028 : 				{
; 4029 : 	
; 4030 : 					//
; 4031 : 					//	The last point isn't in the screen, but this one is, find intersection
; 4032 : 					//
; 4033 : 	
; 4034 : 					insert_xmax_contour_coordinate ( last_point, this_point );

  00228	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0022d	50		 push	 eax
  0022e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 ?insert_xmax_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmax_contour_coordinate
$LN22@clip_conto:

; 4035 : 				}
; 4036 : 	
; 4037 : 				//
; 4038 : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put 1.0 in!
; 4039 : 				//
; 4040 : 	
; 4041 : 				clip_point->next_vertex = this_point;

  0023a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0023f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00245	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 4042 : 	
; 4043 : 				clip_point = this_point;

  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0024d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4044 : 			}
; 4045 : 			else

  00252	eb 25		 jmp	 SHORT $LN23@clip_conto
$LN20@clip_conto:

; 4046 : 			{
; 4047 : 	
; 4048 : 				//
; 4049 : 				// This point isn't in the screen area
; 4050 : 				//
; 4051 : 	
; 4052 : 				if ( last_point->i <= active_viewport.x_max )

  00254	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00259	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00261	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
  00265	72 12		 jb	 SHORT $LN23@clip_conto

; 4053 : 				{
; 4054 : 	
; 4055 : 					//
; 4056 : 					// The last point was visible - find intersection point
; 4057 : 					//
; 4058 : 					
; 4059 : 					insert_xmax_contour_coordinate ( last_point, this_point );

  00267	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0026c	50		 push	 eax
  0026d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00273	51		 push	 ecx
  00274	e8 00 00 00 00	 call	 ?insert_xmax_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmax_contour_coordinate
$LN23@clip_conto:

; 4060 : 				}
; 4061 : 			}
; 4062 : 	
; 4063 : 			last_point = this_point;

  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0027e	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 4064 : 	
; 4065 : 			this_point = this_point->next_vertex;

  00283	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00288	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0028b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 4066 : 		}

  00291	e9 5f ff ff ff	 jmp	 $LN19@clip_conto
$LN5@clip_conto:

; 4067 : 	
; 4068 : 		if ( !clip_point )

  00296	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0029d	75 07		 jne	 SHORT $LN24@clip_conto

; 4069 : 		{
; 4070 : 	
; 4071 : 			return ( NULL );

  0029f	33 c0		 xor	 eax, eax
  002a1	e9 70 03 00 00	 jmp	 $LN1@clip_conto
$LN24@clip_conto:

; 4072 : 		}
; 4073 : 	
; 4074 : 		if ( ( last_point->i > active_viewport.x_max ) ^ ( polygon->i > active_viewport.x_max ) )

  002a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  002ab	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  002b0	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  002b7	76 09		 jbe	 SHORT $LN47@clip_conto
  002b9	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv150[ebp], 1
  002c0	eb 07		 jmp	 SHORT $LN48@clip_conto
$LN47@clip_conto:
  002c2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv150[ebp], 0
$LN48@clip_conto:
  002c9	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  002cc	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  002d1	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  002d8	76 09		 jbe	 SHORT $LN49@clip_conto
  002da	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv153[ebp], 1
  002e1	eb 07		 jmp	 SHORT $LN50@clip_conto
$LN49@clip_conto:
  002e3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN50@clip_conto:
  002ea	8b 55 bc	 mov	 edx, DWORD PTR tv150[ebp]
  002ed	33 55 b8	 xor	 edx, DWORD PTR tv153[ebp]
  002f0	74 10		 je	 SHORT $LN25@clip_conto

; 4075 : 		{
; 4076 : 	
; 4077 : 			//
; 4078 : 			// The last point in the polygon was off the screen, the first 1.0 isn't, so add a clip point
; 4079 : 			//
; 4080 : 	
; 4081 : 			insert_xmax_contour_coordinate ( last_point, polygon );

  002f2	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  002f5	50		 push	 eax
  002f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  002fc	51		 push	 ecx
  002fd	e8 00 00 00 00	 call	 ?insert_xmax_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_xmax_contour_coordinate
$LN25@clip_conto:

; 4082 : 		}
; 4083 : 	
; 4084 : 		clip_point->next_vertex = NULL;

  00302	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00307	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 4085 : 	
; 4086 : 		polygon = clip_list;

  0030e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00313	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN18@clip_conto:

; 4087 : 	}
; 4088 : 
; 4089 : 	if ( outcode & CLIP_TOP )

  00316	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00319	83 e0 02	 and	 eax, 2
  0031c	0f 84 74 01 00
	00		 je	 $LN26@clip_conto

; 4090 : 	{
; 4091 : 	
; 4092 : 		//
; 4093 : 		// Next clip against the top of the viewing rectangle
; 4094 : 		//
; 4095 : 	
; 4096 : 		clip_list = NULL;

  00322	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 4097 : 	
; 4098 : 		clip_point = NULL;

  0032c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 4099 : 	
; 4100 : 		last_point = polygon;

  00336	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00339	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 4101 : 	
; 4102 : 		this_point = polygon->next_vertex;

  0033e	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00341	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00344	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 4103 : 	
; 4104 : 		if ( polygon->j >= active_viewport.y_min )

  0034a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0034d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00352	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00359	72 1a		 jb	 SHORT $LN27@clip_conto

; 4105 : 		{
; 4106 : 	
; 4107 : 			//
; 4108 : 			// Start the clipped list off.
; 4109 : 			//
; 4110 : 	
; 4111 : 			clip_list = polygon;

  0035b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0035e	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 4112 : 	
; 4113 : 			clip_point = polygon;

  00363	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00366	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4114 : 	
; 4115 : 			polygon->next_vertex = NULL;

  0036b	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0036e	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN27@clip_conto:

; 4116 : 		}
; 4117 : 	
; 4118 : 		while ( this_point )

  00375	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  0037c	0f 84 94 00 00
	00		 je	 $LN7@clip_conto

; 4119 : 		{
; 4120 : 	
; 4121 : 			if ( this_point->j >= active_viewport.y_min )

  00382	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00387	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0038c	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00393	72 3f		 jb	 SHORT $LN28@clip_conto

; 4122 : 			{
; 4123 : 	
; 4124 : 				//
; 4125 : 				// This point is inside the screen boundary
; 4126 : 				//
; 4127 : 	
; 4128 : 				if ( last_point->j < active_viewport.y_min )

  00395	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0039a	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  003a2	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  003a6	76 12		 jbe	 SHORT $LN30@clip_conto

; 4129 : 				{
; 4130 : 	
; 4131 : 					//
; 4132 : 					//	The last point isn't in the screen, but this one is, find intersection
; 4133 : 					//
; 4134 : 	
; 4135 : 					insert_ymin_contour_coordinate ( last_point, this_point );

  003a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003ad	50		 push	 eax
  003ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  003b4	51		 push	 ecx
  003b5	e8 00 00 00 00	 call	 ?insert_ymin_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymin_contour_coordinate
$LN30@clip_conto:

; 4136 : 				}
; 4137 : 	
; 4138 : 				//
; 4139 : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put one in!
; 4140 : 				//
; 4141 : 	
; 4142 : 				clip_point->next_vertex = this_point;

  003ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  003bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003c5	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 4143 : 	
; 4144 : 				clip_point = this_point;

  003c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003cd	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4145 : 			}
; 4146 : 			else

  003d2	eb 25		 jmp	 SHORT $LN31@clip_conto
$LN28@clip_conto:

; 4147 : 			{
; 4148 : 	
; 4149 : 				//
; 4150 : 				// This point isn't in the screen area
; 4151 : 				//
; 4152 : 	
; 4153 : 				if ( last_point->j >= active_viewport.y_min )

  003d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  003d9	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  003de	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  003e5	72 12		 jb	 SHORT $LN31@clip_conto

; 4154 : 				{
; 4155 : 	
; 4156 : 					//
; 4157 : 					// The last point was visible - find intersection point
; 4158 : 					//
; 4159 : 					
; 4160 : 					insert_ymin_contour_coordinate ( last_point, this_point );

  003e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003ec	50		 push	 eax
  003ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  003f3	51		 push	 ecx
  003f4	e8 00 00 00 00	 call	 ?insert_ymin_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymin_contour_coordinate
$LN31@clip_conto:

; 4161 : 				}
; 4162 : 			}
; 4163 : 	
; 4164 : 			last_point = this_point;

  003f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  003fe	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 4165 : 	
; 4166 : 			this_point = this_point->next_vertex;

  00403	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00408	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0040b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 4167 : 		}

  00411	e9 5f ff ff ff	 jmp	 $LN27@clip_conto
$LN7@clip_conto:

; 4168 : 	
; 4169 : 		if ( !clip_point )

  00416	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0041d	75 07		 jne	 SHORT $LN32@clip_conto

; 4170 : 		{
; 4171 : 	
; 4172 : 			return ( NULL );

  0041f	33 c0		 xor	 eax, eax
  00421	e9 f0 01 00 00	 jmp	 $LN1@clip_conto
$LN32@clip_conto:

; 4173 : 		}
; 4174 : 	
; 4175 : 		if ( ( last_point->j < active_viewport.y_min ) ^ ( polygon->j < active_viewport.y_min ) )

  00426	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0042b	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00433	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  00437	76 09		 jbe	 SHORT $LN51@clip_conto
  00439	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv181[ebp], 1
  00440	eb 07		 jmp	 SHORT $LN52@clip_conto
$LN51@clip_conto:
  00442	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv181[ebp], 0
$LN52@clip_conto:
  00449	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  0044c	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00454	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  00458	76 09		 jbe	 SHORT $LN53@clip_conto
  0045a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv184[ebp], 1
  00461	eb 07		 jmp	 SHORT $LN54@clip_conto
$LN53@clip_conto:
  00463	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN54@clip_conto:
  0046a	8b 55 bc	 mov	 edx, DWORD PTR tv181[ebp]
  0046d	33 55 b8	 xor	 edx, DWORD PTR tv184[ebp]
  00470	74 10		 je	 SHORT $LN33@clip_conto

; 4176 : 		{
; 4177 : 	
; 4178 : 			//
; 4179 : 			// The last point in the polygon was off the screen, the first one isn't, so add a clip point
; 4180 : 			//
; 4181 : 	
; 4182 : 			insert_ymin_contour_coordinate ( last_point, polygon );

  00472	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00475	50		 push	 eax
  00476	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0047c	51		 push	 ecx
  0047d	e8 00 00 00 00	 call	 ?insert_ymin_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymin_contour_coordinate
$LN33@clip_conto:

; 4183 : 		}
; 4184 : 	
; 4185 : 		clip_point->next_vertex = NULL;

  00482	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00487	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 4186 : 	
; 4187 : 		polygon = clip_list;

  0048e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00493	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN26@clip_conto:

; 4188 : 	}
; 4189 : 
; 4190 : 	if ( outcode & CLIP_BOTTOM )

  00496	8b 45 0c	 mov	 eax, DWORD PTR _outcode$[ebp]
  00499	83 e0 08	 and	 eax, 8
  0049c	0f 84 71 01 00
	00		 je	 $LN34@clip_conto

; 4191 : 	{
; 4192 : 	
; 4193 : 		//
; 4194 : 		// Next clip against the bottom of the viewing rectangle
; 4195 : 		//
; 4196 : 	
; 4197 : 		clip_list = NULL;

  004a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 4198 : 	
; 4199 : 		clip_point = NULL;

  004ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 4200 : 	
; 4201 : 		last_point = polygon;

  004b6	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004b9	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 4202 : 	
; 4203 : 		this_point = polygon->next_vertex;

  004be	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004c1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  004c4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 4204 : 	
; 4205 : 		if ( polygon->j <= active_viewport.y_max )

  004ca	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004cd	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  004d5	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  004d9	72 1a		 jb	 SHORT $LN35@clip_conto

; 4206 : 		{
; 4207 : 	
; 4208 : 			//
; 4209 : 			// Start the clipped list off.
; 4210 : 			//
; 4211 : 	
; 4212 : 			clip_list = polygon;

  004db	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004de	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 4213 : 	
; 4214 : 			clip_point = polygon;

  004e3	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004e6	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4215 : 	
; 4216 : 			polygon->next_vertex = NULL;

  004eb	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  004ee	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN35@clip_conto:

; 4217 : 		}
; 4218 : 	
; 4219 : 		while ( this_point )

  004f5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  004fc	0f 84 94 00 00
	00		 je	 $LN9@clip_conto

; 4220 : 		{
; 4221 : 	
; 4222 : 			if ( this_point->j <= active_viewport.y_max )

  00502	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00507	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  0050f	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  00513	72 3f		 jb	 SHORT $LN36@clip_conto

; 4223 : 			{
; 4224 : 	
; 4225 : 				//
; 4226 : 				// This point is inside the screen boundary
; 4227 : 				//
; 4228 : 	
; 4229 : 				if ( last_point->j > active_viewport.y_max )

  00515	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0051a	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0051f	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00526	76 12		 jbe	 SHORT $LN38@clip_conto

; 4230 : 				{
; 4231 : 	
; 4232 : 					//
; 4233 : 					//	The last point isn't in the screen, but this one is, find intersection
; 4234 : 					//
; 4235 : 	
; 4236 : 					insert_ymax_contour_coordinate ( last_point, this_point );

  00528	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0052d	50		 push	 eax
  0052e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00534	51		 push	 ecx
  00535	e8 00 00 00 00	 call	 ?insert_ymax_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymax_contour_coordinate
$LN38@clip_conto:

; 4237 : 				}
; 4238 : 	
; 4239 : 				//
; 4240 : 				// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put 1.0 in!
; 4241 : 				//
; 4242 : 	
; 4243 : 				clip_point->next_vertex = this_point;

  0053a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0053f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00545	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 4244 : 	
; 4245 : 				clip_point = this_point;

  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0054d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 4246 : 			}
; 4247 : 			else

  00552	eb 25		 jmp	 SHORT $LN39@clip_conto
$LN36@clip_conto:

; 4248 : 			{
; 4249 : 	
; 4250 : 				//
; 4251 : 				// This point isn't in the screen area
; 4252 : 				//
; 4253 : 	
; 4254 : 				if ( last_point->j <= active_viewport.y_max )

  00554	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00559	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00561	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  00565	72 12		 jb	 SHORT $LN39@clip_conto

; 4255 : 				{
; 4256 : 	
; 4257 : 					//
; 4258 : 					// The last point was visible - find intersection point
; 4259 : 					//
; 4260 : 					
; 4261 : 					insert_ymax_contour_coordinate ( last_point, this_point );

  00567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0056c	50		 push	 eax
  0056d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00573	51		 push	 ecx
  00574	e8 00 00 00 00	 call	 ?insert_ymax_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymax_contour_coordinate
$LN39@clip_conto:

; 4262 : 				}
; 4263 : 			}
; 4264 : 	
; 4265 : 			last_point = this_point;

  00579	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0057e	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 4266 : 	
; 4267 : 			this_point = this_point->next_vertex;

  00583	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00588	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0058b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 4268 : 		}

  00591	e9 5f ff ff ff	 jmp	 $LN35@clip_conto
$LN9@clip_conto:

; 4269 : 	
; 4270 : 		if ( !clip_point )

  00596	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0059d	75 04		 jne	 SHORT $LN40@clip_conto

; 4271 : 		{
; 4272 : 	
; 4273 : 			return ( NULL );

  0059f	33 c0		 xor	 eax, eax
  005a1	eb 73		 jmp	 SHORT $LN1@clip_conto
$LN40@clip_conto:

; 4274 : 		}
; 4275 : 	
; 4276 : 		// Case 0 last point is on screen, first point is on screen			NO ACTION
; 4277 : 		//	Case 1 last point is off screen, first point is on screen		GENERATE CLIP
; 4278 : 		// Case 2 last point is on screen, first point is off screen		GENERATE CLIP
; 4279 : 		// Case 3 last point is off screen, first point is off screen		NO ACTION
; 4280 : 	
; 4281 : 		if ( ( last_point->j > active_viewport.y_max ) ^ ( polygon->j > active_viewport.y_max ) )

  005a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  005a8	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  005ad	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  005b4	76 09		 jbe	 SHORT $LN55@clip_conto
  005b6	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv212[ebp], 1
  005bd	eb 07		 jmp	 SHORT $LN56@clip_conto
$LN55@clip_conto:
  005bf	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv212[ebp], 0
$LN56@clip_conto:
  005c6	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  005c9	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  005ce	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  005d5	76 09		 jbe	 SHORT $LN57@clip_conto
  005d7	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv215[ebp], 1
  005de	eb 07		 jmp	 SHORT $LN58@clip_conto
$LN57@clip_conto:
  005e0	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv215[ebp], 0
$LN58@clip_conto:
  005e7	8b 55 bc	 mov	 edx, DWORD PTR tv212[ebp]
  005ea	33 55 b8	 xor	 edx, DWORD PTR tv215[ebp]
  005ed	74 10		 je	 SHORT $LN41@clip_conto

; 4282 : 		{
; 4283 : 	
; 4284 : 			//
; 4285 : 			// The last point in the polygon was off the screen, the first one isn't, so add a clip point
; 4286 : 			//
; 4287 : 	
; 4288 : 			insert_ymax_contour_coordinate ( last_point, polygon );

  005ef	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  005f2	50		 push	 eax
  005f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  005f9	51		 push	 ecx
  005fa	e8 00 00 00 00	 call	 ?insert_ymax_contour_coordinate@@YGXPAUVERTEX@@0@Z ; insert_ymax_contour_coordinate
$LN41@clip_conto:

; 4289 : 		}
; 4290 : 	
; 4291 : 		clip_point->next_vertex = NULL;

  005ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00604	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 4292 : 
; 4293 : 		polygon = clip_list;

  0060b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00610	89 45 08	 mov	 DWORD PTR _polygon$[ebp], eax
$LN34@clip_conto:

; 4294 : 	}
; 4295 : 
; 4296 : 	return ( polygon );

  00613	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
$LN1@clip_conto:

; 4297 : }

  00616	5f		 pop	 edi
  00617	5e		 pop	 esi
  00618	5b		 pop	 ebx
  00619	8b e5		 mov	 esp, ebp
  0061b	5d		 pop	 ebp
  0061c	c2 08 00	 ret	 8
?clip_contour_polygon@@YGPAUVERTEX@@PAU1@H@Z ENDP	; clip_contour_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?draw_thick_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z
_TEXT	SEGMENT
_vertices$ = 8						; size = 4
_colour$ = 12						; size = 4
?draw_thick_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z PROC ; draw_thick_contour_line, COMDAT

; 3792 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3793 : 
; 3794 : 	draw_thick_line ( vertices[0].i, vertices[0].j, vertices[1].i, vertices[1].j, colour, 2.0 );

  00009	51		 push	 ecx
  0000a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00012	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00017	8b 45 0c	 mov	 eax, DWORD PTR _colour$[ebp]
  0001a	50		 push	 eax
  0001b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00020	c1 e1 00	 shl	 ecx, 0
  00023	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00026	51		 push	 ecx
  00027	f3 0f 10 44 0a
	14		 movss	 xmm0, DWORD PTR [edx+ecx+20]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00037	c1 e0 00	 shl	 eax, 0
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0003d	51		 push	 ecx
  0003e	f3 0f 10 44 01
	10		 movss	 xmm0, DWORD PTR [ecx+eax+16]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0004e	6b c2 00	 imul	 eax, edx, 0
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  0005b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00060	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00065	6b c2 00	 imul	 eax, edx, 0
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0006b	51		 push	 ecx
  0006c	f3 0f 10 44 01
	10		 movss	 xmm0, DWORD PTR [ecx+eax+16]
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	e8 00 00 00 00	 call	 ?draw_thick_line@@YGXMMMMUREAL_COLOUR@@M@Z ; draw_thick_line

; 3795 : /*
; 3796 : 	unsigned char
; 3797 : 		outcode,
; 3798 : 		outcode2;
; 3799 : 
; 3800 : 	vertex
; 3801 : 		new_vertices[4];
; 3802 : 
; 3803 : 	vec3d
; 3804 : 		normal;
; 3805 : 
; 3806 : 	real_colour
; 3807 : 		specular;
; 3808 : 
; 3809 : 	specular.red = 0;
; 3810 : 	specular.green = 0;
; 3811 : 	specular.blue = 0;
; 3812 : 	specular.alpha = 0;
; 3813 : 	normal.x = vertices[1].j - vertices[0].j;
; 3814 : 	normal.z = vertices[0].i - vertices[1].i;
; 3815 : 	normal.y = 0;
; 3816 : 	normalise_any_3d_vector ( &normal );
; 3817 : 	normal.x *= 2;
; 3818 : 	normal.z *= 2;
; 3819 : 
; 3820 : 	new_vertices[0].i = vertices[0].i - normal.x;
; 3821 : 	new_vertices[0].j = vertices[0].j - normal.z;
; 3822 : 	new_vertices[1].i = vertices[0].i + normal.x;
; 3823 : 	new_vertices[1].j = vertices[0].j + normal.z;
; 3824 : 	new_vertices[2].i = vertices[1].i - normal.x;
; 3825 : 	new_vertices[2].j = vertices[1].j - normal.z;
; 3826 : 	new_vertices[3].i = vertices[1].i + normal.x;
; 3827 : 	new_vertices[3].j = vertices[1].j + normal.z;
; 3828 : 
; 3829 : 	new_vertices[0].outcode = generate_contour_outcode ( new_vertices[0].i, new_vertices[0].j );
; 3830 : 	new_vertices[1].outcode = generate_contour_outcode ( new_vertices[1].i, new_vertices[1].j );
; 3831 : 	new_vertices[2].outcode = generate_contour_outcode ( new_vertices[2].i, new_vertices[2].j );
; 3832 : 	new_vertices[3].outcode = generate_contour_outcode ( new_vertices[3].i, new_vertices[3].j );
; 3833 : 
; 3834 : 	new_vertices[0].next_vertex = &new_vertices[1];
; 3835 : 	new_vertices[1].next_vertex = &new_vertices[3];
; 3836 : 	new_vertices[3].next_vertex = &new_vertices[2];
; 3837 : 	new_vertices[2].next_vertex = NULL;
; 3838 : 
; 3839 : 	new_vertices[0].z = 10; new_vertices[0].q = 0.1;
; 3840 : 	new_vertices[1].z = 10; new_vertices[1].q = 0.1;
; 3841 : 	new_vertices[2].z = 10; new_vertices[2].q = 0.1;
; 3842 : 	new_vertices[3].z = 10; new_vertices[3].q = 0.1;
; 3843 : 
; 3844 : 	outcode = new_vertices[0].outcode; outcode2 = new_vertices[0].outcode;
; 3845 : 	outcode |= new_vertices[1].outcode; outcode2 &= new_vertices[1].outcode;
; 3846 : 	outcode |= new_vertices[2].outcode; outcode2 &= new_vertices[2].outcode;
; 3847 : 	outcode |= new_vertices[3].outcode; outcode2 &= new_vertices[3].outcode;
; 3848 : 
; 3849 : 	if ( outcode2 == 0 )
; 3850 : 	{
; 3851 : 
; 3852 : 		vertex
; 3853 : 			*poly;
; 3854 : 
; 3855 : 		poly = &new_vertices[0];
; 3856 : 
; 3857 : 		if ( outcode )
; 3858 : 		{
; 3859 : 
; 3860 : 			clip_3d_coord = 0;;
; 3861 : 
; 3862 : 			poly = clip_3d_polygon ( poly, outcode );
; 3863 : 		}
; 3864 : 
; 3865 : 		if ( poly )
; 3866 : 		{
; 3867 : 
; 3868 : 			zbuffer_constant = zbuffer_constant_elevated_bias;
; 3869 : 
; 3870 : 			draw_wbuffered_plain_polygon ( poly, colour, specular );
; 3871 : 
; 3872 : 			zbuffer_constant = zbuffer_constant_normal_bias;
; 3873 : 		}
; 3874 : 	}
; 3875 : 	*/
; 3876 : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
?draw_thick_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ENDP ; draw_thick_contour_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?draw_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z
_TEXT	SEGMENT
_poly$1 = -8						; size = 4
_outcode2$ = -2						; size = 1
_outcode$ = -1						; size = 1
_vertices$ = 8						; size = 4
_colour$ = 12						; size = 4
?draw_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z PROC	; draw_contour_line, COMDAT

; 3740 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3741 : 
; 3742 : 	unsigned char
; 3743 : 		outcode,
; 3744 : 		outcode2;
; 3745 : 
; 3746 : 	vertices[0].next_vertex = &vertices[1];

  00009	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0000e	c1 e0 00	 shl	 eax, 0
  00011	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00014	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00019	6b d1 00	 imul	 edx, ecx, 0
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0001f	89 44 11 28	 mov	 DWORD PTR [ecx+edx+40], eax

; 3747 : 	vertices[1].next_vertex = NULL;

  00023	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00028	c1 e0 00	 shl	 eax, 0
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0002e	c7 44 01 28 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+40], 0

; 3748 : 	vertices[0].z = 10;

  00036	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00049	f3 0f 11 44 0a
	08		 movss	 DWORD PTR [edx+ecx+8], xmm0

; 3749 : 	vertices[0].q = 0.1;

  0004f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00054	6b c8 00	 imul	 ecx, eax, 0
  00057	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00062	f3 0f 11 44 0a
	0c		 movss	 DWORD PTR [edx+ecx+12], xmm0

; 3750 : 	vertices[1].z = 10;

  00068	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0006d	c1 e0 00	 shl	 eax, 0
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00073	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0007b	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 3751 : 	vertices[1].q = 0.1;

  00081	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00086	c1 e0 00	 shl	 eax, 0
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0008c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00094	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 3752 : 
; 3753 : 	outcode = vertices[0].outcode;

  0009a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0009f	6b c8 00	 imul	 ecx, eax, 0
  000a2	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  000a5	8a 44 0a 2c	 mov	 al, BYTE PTR [edx+ecx+44]
  000a9	88 45 ff	 mov	 BYTE PTR _outcode$[ebp], al

; 3754 : 	outcode2 = vertices[0].outcode;

  000ac	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000b1	6b c8 00	 imul	 ecx, eax, 0
  000b4	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  000b7	8a 44 0a 2c	 mov	 al, BYTE PTR [edx+ecx+44]
  000bb	88 45 fe	 mov	 BYTE PTR _outcode2$[ebp], al

; 3755 : 
; 3756 : 	outcode |= vertices[1].outcode;

  000be	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000c3	c1 e0 00	 shl	 eax, 0
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  000c9	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  000ce	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$[ebp]
  000d2	0b c2		 or	 eax, edx
  000d4	88 45 ff	 mov	 BYTE PTR _outcode$[ebp], al

; 3757 : 	outcode2 &= vertices[1].outcode;

  000d7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000dc	c1 e0 00	 shl	 eax, 0
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  000e2	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  000e7	0f b6 45 fe	 movzx	 eax, BYTE PTR _outcode2$[ebp]
  000eb	23 c2		 and	 eax, edx
  000ed	88 45 fe	 mov	 BYTE PTR _outcode2$[ebp], al

; 3758 : 
; 3759 : 	if ( outcode2 == 0 )

  000f0	0f b6 45 fe	 movzx	 eax, BYTE PTR _outcode2$[ebp]
  000f4	85 c0		 test	 eax, eax
  000f6	75 64		 jne	 SHORT $LN4@draw_conto

; 3760 : 	{
; 3761 : 
; 3762 : 		vertex
; 3763 : 			*poly;
; 3764 : 
; 3765 : 		poly = &vertices[0];

  000f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000fd	6b c8 00	 imul	 ecx, eax, 0
  00100	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00103	89 4d f8	 mov	 DWORD PTR _poly$1[ebp], ecx

; 3766 : 
; 3767 : 		if ( outcode )

  00106	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$[ebp]
  0010a	85 c0		 test	 eax, eax
  0010c	74 1b		 je	 SHORT $LN3@draw_conto

; 3768 : 		{
; 3769 : 
; 3770 : 			clip_3d_coord = 0;;

  0010e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 3771 : 
; 3772 : 			poly = clip_3d_polygon ( poly, outcode );

  00118	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _poly$1[ebp]
  00120	51		 push	 ecx
  00121	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  00126	89 45 f8	 mov	 DWORD PTR _poly$1[ebp], eax
$LN3@draw_conto:

; 3773 : 		}
; 3774 : 
; 3775 : 		if ( poly )

  00129	83 7d f8 00	 cmp	 DWORD PTR _poly$1[ebp], 0
  0012d	74 2d		 je	 SHORT $LN4@draw_conto

; 3776 : 		{
; 3777 : 
; 3778 : 			zbuffer_constant = zbuffer_constant_elevated_bias;

  0012f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?zbuffer_constant_elevated_bias@@3NA
  00137	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?zbuffer_constant@@3NA, xmm0

; 3779 : 
; 3780 : 			draw_wbuffered_plain_line ( poly, colour );

  0013f	8b 45 0c	 mov	 eax, DWORD PTR _colour$[ebp]
  00142	50		 push	 eax
  00143	8b 4d f8	 mov	 ecx, DWORD PTR _poly$1[ebp]
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_wbuffered_plain_line

; 3781 : 
; 3782 : 			zbuffer_constant = zbuffer_constant_normal_bias;

  0014c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?zbuffer_constant_normal_bias@@3NA
  00154	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?zbuffer_constant@@3NA, xmm0
$LN4@draw_conto:

; 3783 : 		}
; 3784 : 	}
; 3785 : }

  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 08 00	 ret	 8
?draw_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ENDP	; draw_contour_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?render_contour_node_thick_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z
_TEXT	SEGMENT
_count$1 = -304						; size = 4
_outcode2$2 = -300					; size = 4
_outcode1$3 = -296					; size = 4
_outcode$4 = -292					; size = 4
_sub_positions$5 = -288					; size = 4
_zmax$ = -284						; size = 4
_zmin$ = -280						; size = 4
_xmax$ = -276						; size = 4
_xmin$ = -272						; size = 4
_vertices$ = -268					; size = 256
_node$ = -12						; size = 4
_node_skip$ = -8					; size = 4
_initial_node_skip$ = -4				; size = 4
_number_of_nodes$ = 8					; size = 4
_paths$ = 12						; size = 4
_nodes$ = 16						; size = 4
_colour$ = 20						; size = 4
_mipmap_level$ = 24					; size = 4
?render_contour_node_thick_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z PROC ; render_contour_node_thick_database, COMDAT

; 3519 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3520 : 
; 3521 : 	int
; 3522 : 		initial_node_skip,
; 3523 : 		node_skip,
; 3524 : 		node;
; 3525 : 
; 3526 : 	vertex
; 3527 : 		vertices[4];
; 3528 : 
; 3529 : 	float
; 3530 : 		xmin,
; 3531 : 		xmax,
; 3532 : 		zmin,
; 3533 : 		zmax;
; 3534 : 
; 3535 : 	xmin = min ( terrain_2d_map_world_xmin, terrain_2d_map_world_xmax );

  0000c	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmax@@3MA
  00011	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmin@@3MA
  00016	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0001b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0001f	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _xmin$[ebp], xmm0

; 3536 : 	xmax = max ( terrain_2d_map_world_xmin, terrain_2d_map_world_xmax );

  00027	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmax@@3MA
  0002c	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmin@@3MA
  00031	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00036	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003a	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 3537 : 
; 3538 : 	zmin = min ( terrain_2d_map_world_zmin, terrain_2d_map_world_zmax );

  00042	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmax@@3MA
  00047	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmin@@3MA
  0004c	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00051	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00055	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _zmin$[ebp], xmm0

; 3539 : 	zmax = max ( terrain_2d_map_world_zmin, terrain_2d_map_world_zmax );

  0005d	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmax@@3MA
  00062	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmin@@3MA
  00067	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0006c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00070	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 3540 : 
; 3541 : //	initial_node_skip = mipmap_level * 8;
; 3542 : 	initial_node_skip = ( mipmap_level -1 ) * 2;

  00078	8b 45 18	 mov	 eax, DWORD PTR _mipmap_level$[ebp]
  0007b	8d 4c 00 fe	 lea	 ecx, DWORD PTR [eax+eax-2]
  0007f	89 4d fc	 mov	 DWORD PTR _initial_node_skip$[ebp], ecx

; 3543 : 
; 3544 : 	for ( node = 0; node < number_of_nodes; node++ )

  00082	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _node$[ebp], 0
  00089	eb 09		 jmp	 SHORT $LN4@render_con
$LN2@render_con:
  0008b	8b 45 f4	 mov	 eax, DWORD PTR _node$[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 f4	 mov	 DWORD PTR _node$[ebp], eax
$LN4@render_con:
  00094	8b 45 f4	 mov	 eax, DWORD PTR _node$[ebp]
  00097	3b 45 08	 cmp	 eax, DWORD PTR _number_of_nodes$[ebp]
  0009a	0f 8d 0c 04 00
	00		 jge	 $LN3@render_con

; 3545 : 	{
; 3546 : 
; 3547 : 		if (	( paths[node].type != TEMP_TERRAIN_TYPE_COASTAL_RIVER ) &&
; 3548 : 				( paths[node].type != TEMP_TERRAIN_TYPE_LAKE ) &&

  000a0	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000a7	83 7c 01 08 33	 cmp	 DWORD PTR [ecx+eax+8], 51 ; 00000033H
  000ac	0f 84 f5 03 00
	00		 je	 $LN19@render_con
  000b2	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000b9	83 7c 01 08 38	 cmp	 DWORD PTR [ecx+eax+8], 56 ; 00000038H
  000be	0f 84 e3 03 00
	00		 je	 $LN19@render_con
  000c4	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  000c8	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000cb	83 7c 01 08 3b	 cmp	 DWORD PTR [ecx+eax+8], 59 ; 0000003bH
  000d0	0f 84 d1 03 00
	00		 je	 $LN19@render_con

; 3549 : 				( paths[node].type != TEMP_TERRAIN_TYPE_OFFROAD ) )
; 3550 : 		{
; 3551 : 	
; 3552 : 			if ( paths[node].count <= initial_node_skip )

  000d6	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  000da	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000dd	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  000e1	3b 55 fc	 cmp	 edx, DWORD PTR _initial_node_skip$[ebp]
  000e4	7f 5e		 jg	 SHORT $LN9@render_con

; 3553 : 			{
; 3554 : 	
; 3555 : 				generate_world_position_vertex ( &nodes[paths[node].from], &vertices[0] );

  000e6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000eb	6b c8 00	 imul	 ecx, eax, 0
  000ee	8d 94 0d f4 fe
	ff ff		 lea	 edx, DWORD PTR _vertices$[ebp+ecx]
  000f5	52		 push	 edx
  000f6	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  000fa	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000fd	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  00101	03 55 10	 add	 edx, DWORD PTR _nodes$[ebp]
  00104	52		 push	 edx
  00105	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3556 : 				generate_world_position_vertex ( &nodes[paths[node].to], &vertices[1] );

  0010a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010f	c1 e0 00	 shl	 eax, 0
  00112	8d 8c 05 f4 fe
	ff ff		 lea	 ecx, DWORD PTR _vertices$[ebp+eax]
  00119	51		 push	 ecx
  0011a	6b 55 f4 24	 imul	 edx, DWORD PTR _node$[ebp], 36
  0011e	8b 45 0c	 mov	 eax, DWORD PTR _paths$[ebp]
  00121	6b 4c 10 04 0c	 imul	 ecx, DWORD PTR [eax+edx+4], 12
  00126	03 4d 10	 add	 ecx, DWORD PTR _nodes$[ebp]
  00129	51		 push	 ecx
  0012a	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3557 : 
; 3558 : 				draw_thick_contour_line ( vertices, colour );

  0012f	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  00132	50		 push	 eax
  00133	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _vertices$[ebp]
  00139	51		 push	 ecx
  0013a	e8 00 00 00 00	 call	 ?draw_thick_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_thick_contour_line

; 3559 : 			}
; 3560 : 			else

  0013f	e9 63 03 00 00	 jmp	 $LN19@render_con
$LN9@render_con:

; 3561 : 			{
; 3562 : 		
; 3563 : 				vec3d
; 3564 : 					*sub_positions;
; 3565 : 	
; 3566 : 				int
; 3567 : 					outcode,
; 3568 : 					outcode1,
; 3569 : 					outcode2,
; 3570 : 					count;
; 3571 : 	
; 3572 : 				sub_positions = paths[node].points;

  00144	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00148	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0014b	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  0014f	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _sub_positions$5[ebp], edx

; 3573 : 	
; 3574 : 				//
; 3575 : 				// Outcode the stretch of road
; 3576 : 				//
; 3577 : 	
; 3578 : 				outcode = 0;

  00155	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _outcode$4[ebp], 0

; 3579 : 				if ( paths[node].xmin < xmin )	outcode |= CLIP_LEFT;

  0015f	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00163	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00166	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _xmin$[ebp]
  0016e	0f 2f 44 01 10	 comiss	 xmm0, DWORD PTR [ecx+eax+16]
  00173	76 0f		 jbe	 SHORT $LN11@render_con
  00175	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  0017b	83 c8 01	 or	 eax, 1
  0017e	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN11@render_con:

; 3580 : 				if ( paths[node].xmin > xmax )	outcode |= CLIP_RIGHT;

  00184	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00188	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0018b	f3 0f 10 44 01
	10		 movss	 xmm0, DWORD PTR [ecx+eax+16]
  00191	0f 2f 85 ec fe
	ff ff		 comiss	 xmm0, DWORD PTR _xmax$[ebp]
  00198	76 0f		 jbe	 SHORT $LN12@render_con
  0019a	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  001a0	83 c8 04	 or	 eax, 4
  001a3	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN12@render_con:

; 3581 : 				if ( paths[node].zmin < zmin )	outcode |= CLIP_TOP;

  001a9	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  001ad	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001b0	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _zmin$[ebp]
  001b8	0f 2f 44 01 18	 comiss	 xmm0, DWORD PTR [ecx+eax+24]
  001bd	76 0f		 jbe	 SHORT $LN13@render_con
  001bf	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  001c5	83 c8 02	 or	 eax, 2
  001c8	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN13@render_con:

; 3582 : 				if ( paths[node].zmin > zmax )	outcode |= CLIP_BOTTOM;

  001ce	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  001d2	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001d5	f3 0f 10 44 01
	18		 movss	 xmm0, DWORD PTR [ecx+eax+24]
  001db	0f 2f 85 e4 fe
	ff ff		 comiss	 xmm0, DWORD PTR _zmax$[ebp]
  001e2	76 0f		 jbe	 SHORT $LN14@render_con
  001e4	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  001ea	83 c8 08	 or	 eax, 8
  001ed	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN14@render_con:

; 3583 : 	
; 3584 : 				outcode1 = outcode;

  001f3	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  001f9	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _outcode1$3[ebp], eax

; 3585 : 				outcode2 = outcode;

  001ff	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  00205	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], eax

; 3586 : 	
; 3587 : 				outcode = 0;

  0020b	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _outcode$4[ebp], 0

; 3588 : 				if ( paths[node].xmax < xmin )	outcode |= CLIP_LEFT;

  00215	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00219	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0021c	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _xmin$[ebp]
  00224	0f 2f 44 01 14	 comiss	 xmm0, DWORD PTR [ecx+eax+20]
  00229	76 0f		 jbe	 SHORT $LN15@render_con
  0022b	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  00231	83 c8 01	 or	 eax, 1
  00234	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN15@render_con:

; 3589 : 				if ( paths[node].xmax > xmax )	outcode |= CLIP_RIGHT;

  0023a	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  0023e	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00241	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  00247	0f 2f 85 ec fe
	ff ff		 comiss	 xmm0, DWORD PTR _xmax$[ebp]
  0024e	76 0f		 jbe	 SHORT $LN16@render_con
  00250	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  00256	83 c8 04	 or	 eax, 4
  00259	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN16@render_con:

; 3590 : 				if ( paths[node].zmax < zmin )	outcode |= CLIP_TOP;

  0025f	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00263	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00266	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _zmin$[ebp]
  0026e	0f 2f 44 01 1c	 comiss	 xmm0, DWORD PTR [ecx+eax+28]
  00273	76 0f		 jbe	 SHORT $LN17@render_con
  00275	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  0027b	83 c8 02	 or	 eax, 2
  0027e	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN17@render_con:

; 3591 : 				if ( paths[node].zmax > zmax )	outcode |= CLIP_BOTTOM;

  00284	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00288	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0028b	f3 0f 10 44 01
	1c		 movss	 xmm0, DWORD PTR [ecx+eax+28]
  00291	0f 2f 85 e4 fe
	ff ff		 comiss	 xmm0, DWORD PTR _zmax$[ebp]
  00298	76 0f		 jbe	 SHORT $LN18@render_con
  0029a	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  002a0	83 c8 08	 or	 eax, 8
  002a3	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN18@render_con:

; 3592 : 	
; 3593 : 				outcode1 |= outcode;

  002a9	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode1$3[ebp]
  002af	0b 85 dc fe ff
	ff		 or	 eax, DWORD PTR _outcode$4[ebp]
  002b5	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _outcode1$3[ebp], eax

; 3594 : 				outcode2 &= outcode;

  002bb	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode2$2[ebp]
  002c1	23 85 dc fe ff
	ff		 and	 eax, DWORD PTR _outcode$4[ebp]
  002c7	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], eax

; 3595 : 	
; 3596 : 				if ( outcode2 == 0 )

  002cd	0f 85 d4 01 00
	00		 jne	 $LN19@render_con

; 3597 : 				{
; 3598 : 
; 3599 : 					node_skip = initial_node_skip;

  002d3	8b 45 fc	 mov	 eax, DWORD PTR _initial_node_skip$[ebp]
  002d6	89 45 f8	 mov	 DWORD PTR _node_skip$[ebp], eax

; 3600 : 
; 3601 : 					//
; 3602 : 					// Draw the start point
; 3603 : 					//
; 3604 : 	
; 3605 : 					generate_world_position_vertex ( &nodes[paths[node].from], &vertices[0] );

  002d9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002de	6b c8 00	 imul	 ecx, eax, 0
  002e1	8d 94 0d f4 fe
	ff ff		 lea	 edx, DWORD PTR _vertices$[ebp+ecx]
  002e8	52		 push	 edx
  002e9	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  002ed	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  002f0	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  002f4	03 55 10	 add	 edx, DWORD PTR _nodes$[ebp]
  002f7	52		 push	 edx
  002f8	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3606 : 					generate_world_position_vertex ( &sub_positions[0], &vertices[1] );

  002fd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00302	c1 e0 00	 shl	 eax, 0
  00305	8d 8c 05 f4 fe
	ff ff		 lea	 ecx, DWORD PTR _vertices$[ebp+eax]
  0030c	51		 push	 ecx
  0030d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00312	6b c2 00	 imul	 eax, edx, 0
  00315	03 85 e0 fe ff
	ff		 add	 eax, DWORD PTR _sub_positions$5[ebp]
  0031b	50		 push	 eax
  0031c	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3607 : 		
; 3608 : 					draw_thick_contour_line ( vertices, colour );

  00321	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  00324	50		 push	 eax
  00325	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _vertices$[ebp]
  0032b	51		 push	 ecx
  0032c	e8 00 00 00 00	 call	 ?draw_thick_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_thick_contour_line

; 3609 : 			
; 3610 : 					for ( count = 0; count < ( paths[node].count - 1 ); count++ )

  00331	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$1[ebp], 0
  0033b	eb 0f		 jmp	 SHORT $LN7@render_con
$LN5@render_con:
  0033d	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _count$1[ebp]
  00343	83 c0 01	 add	 eax, 1
  00346	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _count$1[ebp], eax
$LN7@render_con:
  0034c	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00350	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00353	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  00357	83 ea 01	 sub	 edx, 1
  0035a	39 95 d0 fe ff
	ff		 cmp	 DWORD PTR _count$1[ebp], edx
  00360	0f 8d b2 00 00
	00		 jge	 $LN6@render_con

; 3611 : 					{
; 3612 : 
; 3613 : 						if ( node_skip == 0 )

  00366	83 7d f8 00	 cmp	 DWORD PTR _node_skip$[ebp], 0
  0036a	0f 85 9a 00 00
	00		 jne	 $LN20@render_con

; 3614 : 						{
; 3615 : 
; 3616 : 							node_skip = initial_node_skip;

  00370	8b 45 fc	 mov	 eax, DWORD PTR _initial_node_skip$[ebp]
  00373	89 45 f8	 mov	 DWORD PTR _node_skip$[ebp], eax

; 3617 : 
; 3618 : 							vertices[0].i = vertices[1].i;

  00376	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0037b	c1 e0 00	 shl	 eax, 0
  0037e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00383	6b d1 00	 imul	 edx, ecx, 0
  00386	8b 84 05 04 ff
	ff ff		 mov	 eax, DWORD PTR _vertices$[ebp+eax+16]
  0038d	89 84 15 04 ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+16], eax

; 3619 : 							vertices[0].j = vertices[1].j;

  00394	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00399	c1 e0 00	 shl	 eax, 0
  0039c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  003a1	6b d1 00	 imul	 edx, ecx, 0
  003a4	8b 84 05 08 ff
	ff ff		 mov	 eax, DWORD PTR _vertices$[ebp+eax+20]
  003ab	89 84 15 08 ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+20], eax

; 3620 : 							vertices[0].outcode = vertices[1].outcode;

  003b2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003b7	c1 e0 00	 shl	 eax, 0
  003ba	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  003bf	6b d1 00	 imul	 edx, ecx, 0
  003c2	8a 84 05 20 ff
	ff ff		 mov	 al, BYTE PTR _vertices$[ebp+eax+44]
  003c9	88 84 15 20 ff
	ff ff		 mov	 BYTE PTR _vertices$[ebp+edx+44], al

; 3621 : 							generate_world_position_vertex ( &sub_positions[count+1], &vertices[1] );

  003d0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003d5	c1 e0 00	 shl	 eax, 0
  003d8	8d 8c 05 f4 fe
	ff ff		 lea	 ecx, DWORD PTR _vertices$[ebp+eax]
  003df	51		 push	 ecx
  003e0	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _count$1[ebp]
  003e6	83 c2 01	 add	 edx, 1
  003e9	6b c2 0c	 imul	 eax, edx, 12
  003ec	03 85 e0 fe ff
	ff		 add	 eax, DWORD PTR _sub_positions$5[ebp]
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3622 : 				
; 3623 : 							draw_thick_contour_line ( vertices, colour );

  003f8	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  003fb	50		 push	 eax
  003fc	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _vertices$[ebp]
  00402	51		 push	 ecx
  00403	e8 00 00 00 00	 call	 ?draw_thick_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_thick_contour_line

; 3624 : 						}
; 3625 : 						else

  00408	eb 09		 jmp	 SHORT $LN21@render_con
$LN20@render_con:

; 3626 : 						{
; 3627 : 
; 3628 : 							node_skip--;

  0040a	8b 45 f8	 mov	 eax, DWORD PTR _node_skip$[ebp]
  0040d	83 e8 01	 sub	 eax, 1
  00410	89 45 f8	 mov	 DWORD PTR _node_skip$[ebp], eax
$LN21@render_con:

; 3629 : 						}
; 3630 : 					}

  00413	e9 25 ff ff ff	 jmp	 $LN5@render_con
$LN6@render_con:

; 3631 : 			
; 3632 : 					vertices[0].i = vertices[1].i;

  00418	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0041d	c1 e0 00	 shl	 eax, 0
  00420	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00425	6b d1 00	 imul	 edx, ecx, 0
  00428	8b 84 05 04 ff
	ff ff		 mov	 eax, DWORD PTR _vertices$[ebp+eax+16]
  0042f	89 84 15 04 ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+16], eax

; 3633 : 					vertices[0].j = vertices[1].j;

  00436	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0043b	c1 e0 00	 shl	 eax, 0
  0043e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00443	6b d1 00	 imul	 edx, ecx, 0
  00446	8b 84 05 08 ff
	ff ff		 mov	 eax, DWORD PTR _vertices$[ebp+eax+20]
  0044d	89 84 15 08 ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+20], eax

; 3634 : 					vertices[0].outcode = vertices[1].outcode;

  00454	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00459	c1 e0 00	 shl	 eax, 0
  0045c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00461	6b d1 00	 imul	 edx, ecx, 0
  00464	8a 84 05 20 ff
	ff ff		 mov	 al, BYTE PTR _vertices$[ebp+eax+44]
  0046b	88 84 15 20 ff
	ff ff		 mov	 BYTE PTR _vertices$[ebp+edx+44], al

; 3635 : 					generate_world_position_vertex ( &nodes[paths[node].to], &vertices[1] );

  00472	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00477	c1 e0 00	 shl	 eax, 0
  0047a	8d 8c 05 f4 fe
	ff ff		 lea	 ecx, DWORD PTR _vertices$[ebp+eax]
  00481	51		 push	 ecx
  00482	6b 55 f4 24	 imul	 edx, DWORD PTR _node$[ebp], 36
  00486	8b 45 0c	 mov	 eax, DWORD PTR _paths$[ebp]
  00489	6b 4c 10 04 0c	 imul	 ecx, DWORD PTR [eax+edx+4], 12
  0048e	03 4d 10	 add	 ecx, DWORD PTR _nodes$[ebp]
  00491	51		 push	 ecx
  00492	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3636 : 			
; 3637 : 					draw_thick_contour_line ( vertices, colour );

  00497	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  0049a	50		 push	 eax
  0049b	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _vertices$[ebp]
  004a1	51		 push	 ecx
  004a2	e8 00 00 00 00	 call	 ?draw_thick_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_thick_contour_line
$LN19@render_con:

; 3638 : 				}
; 3639 : 			}
; 3640 : 		}
; 3641 : 	}

  004a7	e9 df fb ff ff	 jmp	 $LN2@render_con
$LN3@render_con:

; 3642 : }

  004ac	5f		 pop	 edi
  004ad	5e		 pop	 esi
  004ae	5b		 pop	 ebx
  004af	8b e5		 mov	 esp, ebp
  004b1	5d		 pop	 ebp
  004b2	c2 14 00	 ret	 20			; 00000014H
?render_contour_node_thick_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z ENDP ; render_contour_node_thick_database
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?render_contour_node_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z
_TEXT	SEGMENT
_count$1 = -304						; size = 4
_outcode2$2 = -300					; size = 4
_outcode1$3 = -296					; size = 4
_outcode$4 = -292					; size = 4
_sub_positions$5 = -288					; size = 4
_zmax$ = -284						; size = 4
_zmin$ = -280						; size = 4
_xmax$ = -276						; size = 4
_xmin$ = -272						; size = 4
_vertices$ = -268					; size = 256
_node$ = -12						; size = 4
_node_skip$ = -8					; size = 4
_initial_node_skip$ = -4				; size = 4
_number_of_nodes$ = 8					; size = 4
_paths$ = 12						; size = 4
_nodes$ = 16						; size = 4
_colour$ = 20						; size = 4
_mipmap_level$ = 24					; size = 4
?render_contour_node_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z PROC ; render_contour_node_database, COMDAT

; 3389 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3390 : 
; 3391 : 	int
; 3392 : 		initial_node_skip,
; 3393 : 		node_skip,
; 3394 : 		node;
; 3395 : 
; 3396 : 	vertex
; 3397 : 		vertices[4];
; 3398 : 
; 3399 : 	float
; 3400 : 		xmin,
; 3401 : 		xmax,
; 3402 : 		zmin,
; 3403 : 		zmax;
; 3404 : 
; 3405 : 	xmin = min ( terrain_2d_map_world_xmin, terrain_2d_map_world_xmax );

  0000c	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmax@@3MA
  00011	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmin@@3MA
  00016	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0001b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0001f	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _xmin$[ebp], xmm0

; 3406 : 	xmax = max ( terrain_2d_map_world_xmin, terrain_2d_map_world_xmax );

  00027	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmax@@3MA
  0002c	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmin@@3MA
  00031	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00036	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003a	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 3407 : 
; 3408 : 	zmin = min ( terrain_2d_map_world_zmin, terrain_2d_map_world_zmax );

  00042	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmax@@3MA
  00047	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmin@@3MA
  0004c	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00051	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00055	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _zmin$[ebp], xmm0

; 3409 : 	zmax = max ( terrain_2d_map_world_zmin, terrain_2d_map_world_zmax );

  0005d	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmax@@3MA
  00062	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmin@@3MA
  00067	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0006c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00070	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 3410 : 
; 3411 : //	initial_node_skip = mipmap_level * 8;
; 3412 : 	initial_node_skip = ( mipmap_level -1 ) * 2;

  00078	8b 45 18	 mov	 eax, DWORD PTR _mipmap_level$[ebp]
  0007b	8d 4c 00 fe	 lea	 ecx, DWORD PTR [eax+eax-2]
  0007f	89 4d fc	 mov	 DWORD PTR _initial_node_skip$[ebp], ecx

; 3413 : 
; 3414 : 	for ( node = 0; node < number_of_nodes; node++ )

  00082	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _node$[ebp], 0
  00089	eb 09		 jmp	 SHORT $LN4@render_con
$LN2@render_con:
  0008b	8b 45 f4	 mov	 eax, DWORD PTR _node$[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 f4	 mov	 DWORD PTR _node$[ebp], eax
$LN4@render_con:
  00094	8b 45 f4	 mov	 eax, DWORD PTR _node$[ebp]
  00097	3b 45 08	 cmp	 eax, DWORD PTR _number_of_nodes$[ebp]
  0009a	0f 8d 0c 04 00
	00		 jge	 $LN3@render_con

; 3415 : 	{
; 3416 : 
; 3417 : 		if (	( paths[node].type != TEMP_TERRAIN_TYPE_COASTAL_RIVER ) &&
; 3418 : 				( paths[node].type != TEMP_TERRAIN_TYPE_LAKE ) &&

  000a0	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000a7	83 7c 01 08 33	 cmp	 DWORD PTR [ecx+eax+8], 51 ; 00000033H
  000ac	0f 84 f5 03 00
	00		 je	 $LN19@render_con
  000b2	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000b9	83 7c 01 08 38	 cmp	 DWORD PTR [ecx+eax+8], 56 ; 00000038H
  000be	0f 84 e3 03 00
	00		 je	 $LN19@render_con
  000c4	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  000c8	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000cb	83 7c 01 08 3b	 cmp	 DWORD PTR [ecx+eax+8], 59 ; 0000003bH
  000d0	0f 84 d1 03 00
	00		 je	 $LN19@render_con

; 3419 : 				( paths[node].type != TEMP_TERRAIN_TYPE_OFFROAD ) )
; 3420 : 		{
; 3421 : 	
; 3422 : 			if ( paths[node].count <= initial_node_skip )

  000d6	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  000da	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000dd	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  000e1	3b 55 fc	 cmp	 edx, DWORD PTR _initial_node_skip$[ebp]
  000e4	7f 5e		 jg	 SHORT $LN9@render_con

; 3423 : 			{
; 3424 : 	
; 3425 : 				generate_world_position_vertex ( &nodes[paths[node].from], &vertices[0] );

  000e6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000eb	6b c8 00	 imul	 ecx, eax, 0
  000ee	8d 94 0d f4 fe
	ff ff		 lea	 edx, DWORD PTR _vertices$[ebp+ecx]
  000f5	52		 push	 edx
  000f6	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  000fa	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000fd	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  00101	03 55 10	 add	 edx, DWORD PTR _nodes$[ebp]
  00104	52		 push	 edx
  00105	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3426 : 				generate_world_position_vertex ( &nodes[paths[node].to], &vertices[1] );

  0010a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010f	c1 e0 00	 shl	 eax, 0
  00112	8d 8c 05 f4 fe
	ff ff		 lea	 ecx, DWORD PTR _vertices$[ebp+eax]
  00119	51		 push	 ecx
  0011a	6b 55 f4 24	 imul	 edx, DWORD PTR _node$[ebp], 36
  0011e	8b 45 0c	 mov	 eax, DWORD PTR _paths$[ebp]
  00121	6b 4c 10 04 0c	 imul	 ecx, DWORD PTR [eax+edx+4], 12
  00126	03 4d 10	 add	 ecx, DWORD PTR _nodes$[ebp]
  00129	51		 push	 ecx
  0012a	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3427 : 
; 3428 : 				draw_contour_line ( vertices, colour );

  0012f	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  00132	50		 push	 eax
  00133	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _vertices$[ebp]
  00139	51		 push	 ecx
  0013a	e8 00 00 00 00	 call	 ?draw_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_contour_line

; 3429 : 			}
; 3430 : 			else

  0013f	e9 63 03 00 00	 jmp	 $LN19@render_con
$LN9@render_con:

; 3431 : 			{
; 3432 : 		
; 3433 : 				vec3d
; 3434 : 					*sub_positions;
; 3435 : 	
; 3436 : 				int
; 3437 : 					outcode,
; 3438 : 					outcode1,
; 3439 : 					outcode2,
; 3440 : 					count;
; 3441 : 	
; 3442 : 				sub_positions = paths[node].points;

  00144	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00148	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0014b	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  0014f	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _sub_positions$5[ebp], edx

; 3443 : 	
; 3444 : 				//
; 3445 : 				// Outcode the stretch of road
; 3446 : 				//
; 3447 : 	
; 3448 : 				outcode = 0;

  00155	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _outcode$4[ebp], 0

; 3449 : 				if ( paths[node].xmin < xmin )	outcode |= CLIP_LEFT;

  0015f	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00163	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00166	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _xmin$[ebp]
  0016e	0f 2f 44 01 10	 comiss	 xmm0, DWORD PTR [ecx+eax+16]
  00173	76 0f		 jbe	 SHORT $LN11@render_con
  00175	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  0017b	83 c8 01	 or	 eax, 1
  0017e	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN11@render_con:

; 3450 : 				if ( paths[node].xmin > xmax )	outcode |= CLIP_RIGHT;

  00184	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00188	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0018b	f3 0f 10 44 01
	10		 movss	 xmm0, DWORD PTR [ecx+eax+16]
  00191	0f 2f 85 ec fe
	ff ff		 comiss	 xmm0, DWORD PTR _xmax$[ebp]
  00198	76 0f		 jbe	 SHORT $LN12@render_con
  0019a	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  001a0	83 c8 04	 or	 eax, 4
  001a3	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN12@render_con:

; 3451 : 				if ( paths[node].zmin < zmin )	outcode |= CLIP_TOP;

  001a9	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  001ad	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001b0	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _zmin$[ebp]
  001b8	0f 2f 44 01 18	 comiss	 xmm0, DWORD PTR [ecx+eax+24]
  001bd	76 0f		 jbe	 SHORT $LN13@render_con
  001bf	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  001c5	83 c8 02	 or	 eax, 2
  001c8	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN13@render_con:

; 3452 : 				if ( paths[node].zmin > zmax )	outcode |= CLIP_BOTTOM;

  001ce	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  001d2	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001d5	f3 0f 10 44 01
	18		 movss	 xmm0, DWORD PTR [ecx+eax+24]
  001db	0f 2f 85 e4 fe
	ff ff		 comiss	 xmm0, DWORD PTR _zmax$[ebp]
  001e2	76 0f		 jbe	 SHORT $LN14@render_con
  001e4	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  001ea	83 c8 08	 or	 eax, 8
  001ed	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN14@render_con:

; 3453 : 	
; 3454 : 				outcode1 = outcode;

  001f3	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  001f9	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _outcode1$3[ebp], eax

; 3455 : 				outcode2 = outcode;

  001ff	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  00205	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], eax

; 3456 : 	
; 3457 : 				outcode = 0;

  0020b	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _outcode$4[ebp], 0

; 3458 : 				if ( paths[node].xmax < xmin )	outcode |= CLIP_LEFT;

  00215	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00219	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0021c	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _xmin$[ebp]
  00224	0f 2f 44 01 14	 comiss	 xmm0, DWORD PTR [ecx+eax+20]
  00229	76 0f		 jbe	 SHORT $LN15@render_con
  0022b	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  00231	83 c8 01	 or	 eax, 1
  00234	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN15@render_con:

; 3459 : 				if ( paths[node].xmax > xmax )	outcode |= CLIP_RIGHT;

  0023a	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  0023e	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00241	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  00247	0f 2f 85 ec fe
	ff ff		 comiss	 xmm0, DWORD PTR _xmax$[ebp]
  0024e	76 0f		 jbe	 SHORT $LN16@render_con
  00250	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  00256	83 c8 04	 or	 eax, 4
  00259	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN16@render_con:

; 3460 : 				if ( paths[node].zmax < zmin )	outcode |= CLIP_TOP;

  0025f	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00263	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00266	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _zmin$[ebp]
  0026e	0f 2f 44 01 1c	 comiss	 xmm0, DWORD PTR [ecx+eax+28]
  00273	76 0f		 jbe	 SHORT $LN17@render_con
  00275	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  0027b	83 c8 02	 or	 eax, 2
  0027e	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN17@render_con:

; 3461 : 				if ( paths[node].zmax > zmax )	outcode |= CLIP_BOTTOM;

  00284	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00288	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0028b	f3 0f 10 44 01
	1c		 movss	 xmm0, DWORD PTR [ecx+eax+28]
  00291	0f 2f 85 e4 fe
	ff ff		 comiss	 xmm0, DWORD PTR _zmax$[ebp]
  00298	76 0f		 jbe	 SHORT $LN18@render_con
  0029a	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _outcode$4[ebp]
  002a0	83 c8 08	 or	 eax, 8
  002a3	89 85 dc fe ff
	ff		 mov	 DWORD PTR _outcode$4[ebp], eax
$LN18@render_con:

; 3462 : 	
; 3463 : 				outcode1 |= outcode;

  002a9	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode1$3[ebp]
  002af	0b 85 dc fe ff
	ff		 or	 eax, DWORD PTR _outcode$4[ebp]
  002b5	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _outcode1$3[ebp], eax

; 3464 : 				outcode2 &= outcode;

  002bb	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode2$2[ebp]
  002c1	23 85 dc fe ff
	ff		 and	 eax, DWORD PTR _outcode$4[ebp]
  002c7	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], eax

; 3465 : 	
; 3466 : 				if ( outcode2 == 0 )

  002cd	0f 85 d4 01 00
	00		 jne	 $LN19@render_con

; 3467 : 				{
; 3468 : 
; 3469 : 					node_skip = initial_node_skip;

  002d3	8b 45 fc	 mov	 eax, DWORD PTR _initial_node_skip$[ebp]
  002d6	89 45 f8	 mov	 DWORD PTR _node_skip$[ebp], eax

; 3470 : 
; 3471 : 					//
; 3472 : 					// Draw the start point
; 3473 : 					//
; 3474 : 	
; 3475 : 					generate_world_position_vertex ( &nodes[paths[node].from], &vertices[0] );

  002d9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002de	6b c8 00	 imul	 ecx, eax, 0
  002e1	8d 94 0d f4 fe
	ff ff		 lea	 edx, DWORD PTR _vertices$[ebp+ecx]
  002e8	52		 push	 edx
  002e9	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  002ed	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  002f0	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  002f4	03 55 10	 add	 edx, DWORD PTR _nodes$[ebp]
  002f7	52		 push	 edx
  002f8	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3476 : 					generate_world_position_vertex ( &sub_positions[0], &vertices[1] );

  002fd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00302	c1 e0 00	 shl	 eax, 0
  00305	8d 8c 05 f4 fe
	ff ff		 lea	 ecx, DWORD PTR _vertices$[ebp+eax]
  0030c	51		 push	 ecx
  0030d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00312	6b c2 00	 imul	 eax, edx, 0
  00315	03 85 e0 fe ff
	ff		 add	 eax, DWORD PTR _sub_positions$5[ebp]
  0031b	50		 push	 eax
  0031c	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3477 : 		
; 3478 : 					draw_contour_line ( vertices, colour );

  00321	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  00324	50		 push	 eax
  00325	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _vertices$[ebp]
  0032b	51		 push	 ecx
  0032c	e8 00 00 00 00	 call	 ?draw_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_contour_line

; 3479 : 			
; 3480 : 					for ( count = 0; count < ( paths[node].count - 1 ); count++ )

  00331	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$1[ebp], 0
  0033b	eb 0f		 jmp	 SHORT $LN7@render_con
$LN5@render_con:
  0033d	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _count$1[ebp]
  00343	83 c0 01	 add	 eax, 1
  00346	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _count$1[ebp], eax
$LN7@render_con:
  0034c	6b 45 f4 24	 imul	 eax, DWORD PTR _node$[ebp], 36
  00350	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00353	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  00357	83 ea 01	 sub	 edx, 1
  0035a	39 95 d0 fe ff
	ff		 cmp	 DWORD PTR _count$1[ebp], edx
  00360	0f 8d b2 00 00
	00		 jge	 $LN6@render_con

; 3481 : 					{
; 3482 : 
; 3483 : 						if ( node_skip == 0 )

  00366	83 7d f8 00	 cmp	 DWORD PTR _node_skip$[ebp], 0
  0036a	0f 85 9a 00 00
	00		 jne	 $LN20@render_con

; 3484 : 						{
; 3485 : 
; 3486 : 							node_skip = initial_node_skip;

  00370	8b 45 fc	 mov	 eax, DWORD PTR _initial_node_skip$[ebp]
  00373	89 45 f8	 mov	 DWORD PTR _node_skip$[ebp], eax

; 3487 : 
; 3488 : 							vertices[0].i = vertices[1].i;

  00376	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0037b	c1 e0 00	 shl	 eax, 0
  0037e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00383	6b d1 00	 imul	 edx, ecx, 0
  00386	8b 84 05 04 ff
	ff ff		 mov	 eax, DWORD PTR _vertices$[ebp+eax+16]
  0038d	89 84 15 04 ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+16], eax

; 3489 : 							vertices[0].j = vertices[1].j;

  00394	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00399	c1 e0 00	 shl	 eax, 0
  0039c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  003a1	6b d1 00	 imul	 edx, ecx, 0
  003a4	8b 84 05 08 ff
	ff ff		 mov	 eax, DWORD PTR _vertices$[ebp+eax+20]
  003ab	89 84 15 08 ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+20], eax

; 3490 : 							vertices[0].outcode = vertices[1].outcode;

  003b2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003b7	c1 e0 00	 shl	 eax, 0
  003ba	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  003bf	6b d1 00	 imul	 edx, ecx, 0
  003c2	8a 84 05 20 ff
	ff ff		 mov	 al, BYTE PTR _vertices$[ebp+eax+44]
  003c9	88 84 15 20 ff
	ff ff		 mov	 BYTE PTR _vertices$[ebp+edx+44], al

; 3491 : 							generate_world_position_vertex ( &sub_positions[count+1], &vertices[1] );

  003d0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003d5	c1 e0 00	 shl	 eax, 0
  003d8	8d 8c 05 f4 fe
	ff ff		 lea	 ecx, DWORD PTR _vertices$[ebp+eax]
  003df	51		 push	 ecx
  003e0	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _count$1[ebp]
  003e6	83 c2 01	 add	 edx, 1
  003e9	6b c2 0c	 imul	 eax, edx, 12
  003ec	03 85 e0 fe ff
	ff		 add	 eax, DWORD PTR _sub_positions$5[ebp]
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3492 : 				
; 3493 : 							draw_contour_line ( vertices, colour );

  003f8	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  003fb	50		 push	 eax
  003fc	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _vertices$[ebp]
  00402	51		 push	 ecx
  00403	e8 00 00 00 00	 call	 ?draw_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_contour_line

; 3494 : 						}
; 3495 : 						else

  00408	eb 09		 jmp	 SHORT $LN21@render_con
$LN20@render_con:

; 3496 : 						{
; 3497 : 
; 3498 : 							node_skip--;

  0040a	8b 45 f8	 mov	 eax, DWORD PTR _node_skip$[ebp]
  0040d	83 e8 01	 sub	 eax, 1
  00410	89 45 f8	 mov	 DWORD PTR _node_skip$[ebp], eax
$LN21@render_con:

; 3499 : 						}
; 3500 : 					}

  00413	e9 25 ff ff ff	 jmp	 $LN5@render_con
$LN6@render_con:

; 3501 : 			
; 3502 : 					vertices[0].i = vertices[1].i;

  00418	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0041d	c1 e0 00	 shl	 eax, 0
  00420	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00425	6b d1 00	 imul	 edx, ecx, 0
  00428	8b 84 05 04 ff
	ff ff		 mov	 eax, DWORD PTR _vertices$[ebp+eax+16]
  0042f	89 84 15 04 ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+16], eax

; 3503 : 					vertices[0].j = vertices[1].j;

  00436	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0043b	c1 e0 00	 shl	 eax, 0
  0043e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00443	6b d1 00	 imul	 edx, ecx, 0
  00446	8b 84 05 08 ff
	ff ff		 mov	 eax, DWORD PTR _vertices$[ebp+eax+20]
  0044d	89 84 15 08 ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+20], eax

; 3504 : 					vertices[0].outcode = vertices[1].outcode;

  00454	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00459	c1 e0 00	 shl	 eax, 0
  0045c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00461	6b d1 00	 imul	 edx, ecx, 0
  00464	8a 84 05 20 ff
	ff ff		 mov	 al, BYTE PTR _vertices$[ebp+eax+44]
  0046b	88 84 15 20 ff
	ff ff		 mov	 BYTE PTR _vertices$[ebp+edx+44], al

; 3505 : 					generate_world_position_vertex ( &nodes[paths[node].to], &vertices[1] );

  00472	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00477	c1 e0 00	 shl	 eax, 0
  0047a	8d 8c 05 f4 fe
	ff ff		 lea	 ecx, DWORD PTR _vertices$[ebp+eax]
  00481	51		 push	 ecx
  00482	6b 55 f4 24	 imul	 edx, DWORD PTR _node$[ebp], 36
  00486	8b 45 0c	 mov	 eax, DWORD PTR _paths$[ebp]
  00489	6b 4c 10 04 0c	 imul	 ecx, DWORD PTR [eax+edx+4], 12
  0048e	03 4d 10	 add	 ecx, DWORD PTR _nodes$[ebp]
  00491	51		 push	 ecx
  00492	e8 00 00 00 00	 call	 ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ; generate_world_position_vertex

; 3506 : 			
; 3507 : 					draw_contour_line ( vertices, colour );

  00497	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  0049a	50		 push	 eax
  0049b	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _vertices$[ebp]
  004a1	51		 push	 ecx
  004a2	e8 00 00 00 00	 call	 ?draw_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_contour_line
$LN19@render_con:

; 3508 : 				}
; 3509 : 			}
; 3510 : 		}
; 3511 : 	}

  004a7	e9 df fb ff ff	 jmp	 $LN2@render_con
$LN3@render_con:

; 3512 : }

  004ac	5f		 pop	 edi
  004ad	5e		 pop	 esi
  004ae	5b		 pop	 ebx
  004af	8b e5		 mov	 esp, ebp
  004b1	5d		 pop	 ebp
  004b2	c2 14 00	 ret	 20			; 00000014H
?render_contour_node_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z ENDP ; render_contour_node_database
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?render_shaded_contour_terrain_poly@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv134 = -116						; size = 4
tv129 = -116						; size = 4
tv92 = -116						; size = 4
tv135 = -112						; size = 4
tv130 = -112						; size = 4
tv93 = -112						; size = 4
_ib$1 = -44						; size = 4
_ig$2 = -40						; size = 4
_ir$3 = -36						; size = 4
_shadow_factor$4 = -32					; size = 4
_b$5 = -28						; size = 4
_g$6 = -24						; size = 4
_r$7 = -20						; size = 4
_col$8 = -16						; size = 4
_vptr$ = -12						; size = 4
_vertices$ = -8						; size = 4
_number_of_vertices$ = -4				; size = 4
_poly$ = 8						; size = 4
_contour_colour$ = 12					; size = 4
?render_shaded_contour_terrain_poly@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z PROC ; render_shaded_contour_terrain_poly, COMDAT

; 3318 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3319 : 
; 3320 : 	int
; 3321 : 		number_of_vertices;
; 3322 : 
; 3323 : 	LPD3DTLVERTEX
; 3324 : 		vertices,
; 3325 : 		vptr;
; 3326 : 
; 3327 : 	vertices = get_d3d_vertices_address ( poly, &number_of_vertices );

  00009	8d 45 fc	 lea	 eax, DWORD PTR _number_of_vertices$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
  00016	89 45 f8	 mov	 DWORD PTR _vertices$[ebp], eax

; 3328 : 
; 3329 : 	vptr = vertices;

  00019	8b 45 f8	 mov	 eax, DWORD PTR _vertices$[ebp]
  0001c	89 45 f4	 mov	 DWORD PTR _vptr$[ebp], eax
$LN2@render_sha:

; 3330 : 
; 3331 : 	while ( poly )

  0001f	83 7d 08 00	 cmp	 DWORD PTR _poly$[ebp], 0
  00023	0f 84 c6 01 00
	00		 je	 $LN3@render_sha

; 3332 : 	{
; 3333 : 		real_colour
; 3334 : 			col;
; 3335 : 
; 3336 : 		float
; 3337 : 			r,
; 3338 : 			g,
; 3339 : 			b,
; 3340 : 			shadow_factor;
; 3341 : 	
; 3342 : 		int
; 3343 : 			ir,
; 3344 : 			ig,
; 3345 : 			ib;
; 3346 : 
; 3347 : 		r = contour_colour.red;

  00029	0f b6 45 0e	 movzx	 eax, BYTE PTR _contour_colour$[ebp+2]
  0002d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00031	f3 0f 11 45 ec	 movss	 DWORD PTR _r$7[ebp], xmm0

; 3348 : 		g = contour_colour.green;

  00036	0f b6 45 0d	 movzx	 eax, BYTE PTR _contour_colour$[ebp+1]
  0003a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0003e	f3 0f 11 45 e8	 movss	 DWORD PTR _g$6[ebp], xmm0

; 3349 : 		b = contour_colour.blue;

  00043	0f b6 45 0c	 movzx	 eax, BYTE PTR _contour_colour$[ebp]
  00047	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0004b	f3 0f 11 45 e4	 movss	 DWORD PTR _b$5[ebp], xmm0

; 3350 : 	
; 3351 : 		// adjust shade for steepness
; 3352 : 		shadow_factor = 1 - poly->x * 0.0025; // 0.0003;

  00050	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00053	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00057	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f647ae147ae147b
  0005f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00067	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0006b	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0006f	f3 0f 11 45 e0	 movss	 DWORD PTR _shadow_factor$4[ebp], xmm0

; 3353 : 		if (shadow_factor < 0.25)

  00074	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _shadow_factor$4[ebp]
  00079	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fd0000000000000
  00081	66 0f 2f c8	 comisd	 xmm1, xmm0
  00085	76 0d		 jbe	 SHORT $LN4@render_sha

; 3354 : 			shadow_factor = 0.25;

  00087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0008f	f3 0f 11 45 e0	 movss	 DWORD PTR _shadow_factor$4[ebp], xmm0
$LN4@render_sha:

; 3355 : 	
; 3356 : 		r *= shadow_factor;

  00094	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _r$7[ebp]
  00099	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _shadow_factor$4[ebp]
  0009e	f3 0f 11 45 ec	 movss	 DWORD PTR _r$7[ebp], xmm0

; 3357 : 		g *= shadow_factor;

  000a3	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _g$6[ebp]
  000a8	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _shadow_factor$4[ebp]
  000ad	f3 0f 11 45 e8	 movss	 DWORD PTR _g$6[ebp], xmm0

; 3358 : 		b *= shadow_factor;

  000b2	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _b$5[ebp]
  000b7	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _shadow_factor$4[ebp]
  000bc	f3 0f 11 45 e4	 movss	 DWORD PTR _b$5[ebp], xmm0

; 3359 : 
; 3360 : 		convert_float_to_int ( r, &ir );

  000c1	8d 45 dc	 lea	 eax, DWORD PTR _ir$3[ebp]
  000c4	50		 push	 eax
  000c5	51		 push	 ecx
  000c6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _r$7[ebp]
  000cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d0	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 3361 : 		convert_float_to_int ( g, &ig );

  000d5	8d 45 d8	 lea	 eax, DWORD PTR _ig$2[ebp]
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _g$6[ebp]
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 3362 : 		convert_float_to_int ( b, &ib );

  000e9	8d 45 d4	 lea	 eax, DWORD PTR _ib$1[ebp]
  000ec	50		 push	 eax
  000ed	51		 push	 ecx
  000ee	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _b$5[ebp]
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 3363 : 
; 3364 : 
; 3365 : 		col.red = bound ( ir, 0, 255 );

  000fd	83 7d dc 00	 cmp	 DWORD PTR _ir$3[ebp], 0
  00101	7d 09		 jge	 SHORT $LN8@render_sha
  00103	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
  0010a	eb 1e		 jmp	 SHORT $LN9@render_sha
$LN8@render_sha:
  0010c	81 7d dc ff 00
	00 00		 cmp	 DWORD PTR _ir$3[ebp], 255 ; 000000ffH
  00113	7e 09		 jle	 SHORT $LN6@render_sha
  00115	c7 45 8c ff 00
	00 00		 mov	 DWORD PTR tv92[ebp], 255 ; 000000ffH
  0011c	eb 06		 jmp	 SHORT $LN7@render_sha
$LN6@render_sha:
  0011e	8b 45 dc	 mov	 eax, DWORD PTR _ir$3[ebp]
  00121	89 45 8c	 mov	 DWORD PTR tv92[ebp], eax
$LN7@render_sha:
  00124	8b 4d 8c	 mov	 ecx, DWORD PTR tv92[ebp]
  00127	89 4d 90	 mov	 DWORD PTR tv93[ebp], ecx
$LN9@render_sha:
  0012a	8a 55 90	 mov	 dl, BYTE PTR tv93[ebp]
  0012d	88 55 f2	 mov	 BYTE PTR _col$8[ebp+2], dl

; 3366 : 		col.green = bound ( ig, 0, 255 );

  00130	83 7d d8 00	 cmp	 DWORD PTR _ig$2[ebp], 0
  00134	7d 09		 jge	 SHORT $LN12@render_sha
  00136	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
  0013d	eb 1e		 jmp	 SHORT $LN13@render_sha
$LN12@render_sha:
  0013f	81 7d d8 ff 00
	00 00		 cmp	 DWORD PTR _ig$2[ebp], 255 ; 000000ffH
  00146	7e 09		 jle	 SHORT $LN10@render_sha
  00148	c7 45 8c ff 00
	00 00		 mov	 DWORD PTR tv129[ebp], 255 ; 000000ffH
  0014f	eb 06		 jmp	 SHORT $LN11@render_sha
$LN10@render_sha:
  00151	8b 45 d8	 mov	 eax, DWORD PTR _ig$2[ebp]
  00154	89 45 8c	 mov	 DWORD PTR tv129[ebp], eax
$LN11@render_sha:
  00157	8b 4d 8c	 mov	 ecx, DWORD PTR tv129[ebp]
  0015a	89 4d 90	 mov	 DWORD PTR tv130[ebp], ecx
$LN13@render_sha:
  0015d	8a 55 90	 mov	 dl, BYTE PTR tv130[ebp]
  00160	88 55 f1	 mov	 BYTE PTR _col$8[ebp+1], dl

; 3367 : 		col.blue = bound ( ib, 0, 255 );

  00163	83 7d d4 00	 cmp	 DWORD PTR _ib$1[ebp], 0
  00167	7d 09		 jge	 SHORT $LN16@render_sha
  00169	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
  00170	eb 1e		 jmp	 SHORT $LN17@render_sha
$LN16@render_sha:
  00172	81 7d d4 ff 00
	00 00		 cmp	 DWORD PTR _ib$1[ebp], 255 ; 000000ffH
  00179	7e 09		 jle	 SHORT $LN14@render_sha
  0017b	c7 45 8c ff 00
	00 00		 mov	 DWORD PTR tv134[ebp], 255 ; 000000ffH
  00182	eb 06		 jmp	 SHORT $LN15@render_sha
$LN14@render_sha:
  00184	8b 45 d4	 mov	 eax, DWORD PTR _ib$1[ebp]
  00187	89 45 8c	 mov	 DWORD PTR tv134[ebp], eax
$LN15@render_sha:
  0018a	8b 4d 8c	 mov	 ecx, DWORD PTR tv134[ebp]
  0018d	89 4d 90	 mov	 DWORD PTR tv135[ebp], ecx
$LN17@render_sha:
  00190	8a 55 90	 mov	 dl, BYTE PTR tv135[ebp]
  00193	88 55 f0	 mov	 BYTE PTR _col$8[ebp], dl

; 3368 : 
; 3369 : 		vptr->sx = poly->i;

  00196	8b 45 f4	 mov	 eax, DWORD PTR _vptr$[ebp]
  00199	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  0019c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0019f	89 10		 mov	 DWORD PTR [eax], edx

; 3370 : 		vptr->sy = poly->j;

  001a1	8b 45 f4	 mov	 eax, DWORD PTR _vptr$[ebp]
  001a4	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  001a7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001aa	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3371 : 		vptr->rhw = poly->q;

  001ad	8b 45 f4	 mov	 eax, DWORD PTR _vptr$[ebp]
  001b0	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  001b3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001b6	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 3372 : 		vptr->sz = poly->q;

  001b9	8b 45 f4	 mov	 eax, DWORD PTR _vptr$[ebp]
  001bc	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  001bf	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001c2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 3373 : 		vptr->color = col.colour;

  001c5	8b 45 f4	 mov	 eax, DWORD PTR _vptr$[ebp]
  001c8	8b 4d f0	 mov	 ecx, DWORD PTR _col$8[ebp]
  001cb	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 3374 : 		vptr->specular = 0x000000ff;  // solid black

  001ce	8b 45 f4	 mov	 eax, DWORD PTR _vptr$[ebp]
  001d1	c7 40 14 ff 00
	00 00		 mov	 DWORD PTR [eax+20], 255	; 000000ffH

; 3375 : 
; 3376 : 		vptr++;

  001d8	8b 45 f4	 mov	 eax, DWORD PTR _vptr$[ebp]
  001db	83 c0 20	 add	 eax, 32			; 00000020H
  001de	89 45 f4	 mov	 DWORD PTR _vptr$[ebp], eax

; 3377 : 
; 3378 : 		poly = poly->next_vertex;

  001e1	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  001e4	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001e7	89 4d 08	 mov	 DWORD PTR _poly$[ebp], ecx

; 3379 : 	}

  001ea	e9 30 fe ff ff	 jmp	 $LN2@render_sha
$LN3@render_sha:

; 3380 : 
; 3381 : 	draw_fan_primitive ( number_of_vertices, vertices );

  001ef	8b 45 f8	 mov	 eax, DWORD PTR _vertices$[ebp]
  001f2	50		 push	 eax
  001f3	8b 4d fc	 mov	 ecx, DWORD PTR _number_of_vertices$[ebp]
  001f6	51		 push	 ecx
  001f7	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive

; 3382 : }

  001fc	5f		 pop	 edi
  001fd	5e		 pop	 esi
  001fe	5b		 pop	 ebx
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 08 00	 ret	 8
?render_shaded_contour_terrain_poly@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ENDP ; render_shaded_contour_terrain_poly
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?render_contour_terrain_quad_quad@@YGXPAUVERTEX@@HH@Z
_TEXT	SEGMENT
tv152 = -128						; size = 4
tv148 = -128						; size = 4
tv144 = -128						; size = 4
tv153 = -124						; size = 4
tv149 = -124						; size = 4
tv145 = -124						; size = 4
_col$1 = -56						; size = 4
_ib$2 = -52						; size = 4
_ig$3 = -48						; size = 4
_ir$4 = -44						; size = 4
_factor$5 = -40						; size = 4
_b$6 = -36						; size = 4
_g$7 = -32						; size = 4
_r$8 = -28						; size = 4
_specular$ = -24					; size = 4
_source_blue$ = -20					; size = 4
_source_green$ = -16					; size = 4
_source_red$ = -12					; size = 4
_vptr$ = -8						; size = 4
_count$ = -4						; size = 4
_vertices$ = 8						; size = 4
_contour_start_index$ = 12				; size = 4
_contour_end_index$ = 16				; size = 4
?render_contour_terrain_quad_quad@@YGXPAUVERTEX@@HH@Z PROC ; render_contour_terrain_quad_quad, COMDAT

; 3236 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3237 : 
; 3238 : 	int
; 3239 : 		count;
; 3240 : 
; 3241 : 
; 3242 : 	LPD3DTLVERTEX
; 3243 : 		vptr;
; 3244 : 
; 3245 : 	float
; 3246 : 		source_red,
; 3247 : 		source_green,
; 3248 : 		source_blue;
; 3249 : 
; 3250 : 	real_colour
; 3251 : 		specular;
; 3252 : 
; 3253 : 	specular.red = 0;

  0000c	c6 45 ea 00	 mov	 BYTE PTR _specular$[ebp+2], 0

; 3254 : 	specular.green = 0;

  00010	c6 45 e9 00	 mov	 BYTE PTR _specular$[ebp+1], 0

; 3255 : 	specular.blue = 0;

  00014	c6 45 e8 00	 mov	 BYTE PTR _specular$[ebp], 0

; 3256 : 	specular.alpha = 255;

  00018	c6 45 eb ff	 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 3257 : 
; 3258 : 	vptr = get_d3d_vertices_points_address ( 8 );

  0001c	6a 08		 push	 8
  0001e	e8 00 00 00 00	 call	 ?get_d3d_vertices_points_address@@YGPAU_D3DTLVERTEX@@H@Z ; get_d3d_vertices_points_address
  00023	89 45 f8	 mov	 DWORD PTR _vptr$[ebp], eax

; 3259 : 
; 3260 : 	source_red = terrain_2d_current_contour_colours[contour_start_index].r;

  00026	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  0002f	0f b6 54 81 02	 movzx	 edx, BYTE PTR [ecx+eax*4+2]
  00034	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00038	f3 0f 11 45 f4	 movss	 DWORD PTR _source_red$[ebp], xmm0

; 3261 : 	source_green = terrain_2d_current_contour_colours[contour_start_index].g;

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  00046	0f b6 54 81 01	 movzx	 edx, BYTE PTR [ecx+eax*4+1]
  0004b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0004f	f3 0f 11 45 f0	 movss	 DWORD PTR _source_green$[ebp], xmm0

; 3262 : 	source_blue = terrain_2d_current_contour_colours[contour_start_index].b;

  00054	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  0005d	0f b6 14 81	 movzx	 edx, BYTE PTR [ecx+eax*4]
  00061	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00065	f3 0f 11 45 ec	 movss	 DWORD PTR _source_blue$[ebp], xmm0

; 3263 : 
; 3264 : 	contour_minimum_height = terrain_2d_contour_heights[contour_start_index];

  0006a	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_contour_heights@@3PAMA ; terrain_2d_contour_heights
  00073	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  00078	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?contour_minimum_height@@3MA, xmm0

; 3265 : 
; 3266 : 	for ( count = 0; count < 9; count++ )

  00080	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00087	eb 09		 jmp	 SHORT $LN4@render_con
$LN2@render_con:
  00089	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0008c	83 c0 01	 add	 eax, 1
  0008f	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@render_con:
  00092	83 7d fc 09	 cmp	 DWORD PTR _count$[ebp], 9
  00096	0f 8d fe 01 00
	00		 jge	 $LN3@render_con

; 3267 : 	{
; 3268 : 
; 3269 : 		float
; 3270 : 			r,
; 3271 : 			g,
; 3272 : 			b,
; 3273 : 			factor;
; 3274 : 
; 3275 : 		int
; 3276 : 			ir,
; 3277 : 			ig,
; 3278 : 			ib;
; 3279 : 
; 3280 : 		real_colour
; 3281 : 			col;
; 3282 : 
; 3283 : 		factor = ( vertices[count].y - contour_minimum_height ) * contour_height_difference_reciprocals[contour_start_index] * CONTOUR_SHADING_FACTOR;

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0009f	c1 e0 06	 shl	 eax, 6
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  000a5	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  000ab	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?contour_minimum_height@@3MA
  000b3	8b 55 0c	 mov	 edx, DWORD PTR _contour_start_index$[ebp]
  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_height_difference_reciprocals@@3PAMA ; contour_height_difference_reciprocals
  000bb	f3 0f 59 04 90	 mulss	 xmm0, DWORD PTR [eax+edx*4]
  000c0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000c4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  000cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d0	f3 0f 11 45 d8	 movss	 DWORD PTR _factor$5[ebp], xmm0

; 3284 : 		factor -= ( CONTOUR_SHADING_FACTOR / 2 );

  000d5	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _factor$5[ebp]
  000da	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  000e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e6	f3 0f 11 45 d8	 movss	 DWORD PTR _factor$5[ebp], xmm0

; 3285 : 
; 3286 : 		r = source_red + ( source_red * factor );

  000eb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _source_red$[ebp]
  000f0	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _factor$5[ebp]
  000f5	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _source_red$[ebp]
  000fa	f3 0f 11 45 e4	 movss	 DWORD PTR _r$8[ebp], xmm0

; 3287 : 		g = source_green + ( source_green * factor );

  000ff	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_green$[ebp]
  00104	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _factor$5[ebp]
  00109	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _source_green$[ebp]
  0010e	f3 0f 11 45 e0	 movss	 DWORD PTR _g$7[ebp], xmm0

; 3288 : 		b = source_blue + ( source_blue * factor );

  00113	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _source_blue$[ebp]
  00118	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _factor$5[ebp]
  0011d	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _source_blue$[ebp]
  00122	f3 0f 11 45 dc	 movss	 DWORD PTR _b$6[ebp], xmm0

; 3289 : 
; 3290 : 		convert_float_to_int ( r, &ir );

  00127	8d 45 d4	 lea	 eax, DWORD PTR _ir$4[ebp]
  0012a	50		 push	 eax
  0012b	51		 push	 ecx
  0012c	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _r$8[ebp]
  00131	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00136	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 3291 : 		convert_float_to_int ( g, &ig );

  0013b	8d 45 d0	 lea	 eax, DWORD PTR _ig$3[ebp]
  0013e	50		 push	 eax
  0013f	51		 push	 ecx
  00140	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _g$7[ebp]
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 3292 : 		convert_float_to_int ( b, &ib );

  0014f	8d 45 cc	 lea	 eax, DWORD PTR _ib$2[ebp]
  00152	50		 push	 eax
  00153	51		 push	 ecx
  00154	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _b$6[ebp]
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 3293 : 
; 3294 : 		ir = bound ( ir, 0, 255 );

  00163	83 7d d4 00	 cmp	 DWORD PTR _ir$4[ebp], 0
  00167	7d 09		 jge	 SHORT $LN8@render_con
  00169	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
  00170	eb 1e		 jmp	 SHORT $LN9@render_con
$LN8@render_con:
  00172	81 7d d4 ff 00
	00 00		 cmp	 DWORD PTR _ir$4[ebp], 255 ; 000000ffH
  00179	7e 09		 jle	 SHORT $LN6@render_con
  0017b	c7 45 80 ff 00
	00 00		 mov	 DWORD PTR tv144[ebp], 255 ; 000000ffH
  00182	eb 06		 jmp	 SHORT $LN7@render_con
$LN6@render_con:
  00184	8b 45 d4	 mov	 eax, DWORD PTR _ir$4[ebp]
  00187	89 45 80	 mov	 DWORD PTR tv144[ebp], eax
$LN7@render_con:
  0018a	8b 4d 80	 mov	 ecx, DWORD PTR tv144[ebp]
  0018d	89 4d 84	 mov	 DWORD PTR tv145[ebp], ecx
$LN9@render_con:
  00190	8b 55 84	 mov	 edx, DWORD PTR tv145[ebp]
  00193	89 55 d4	 mov	 DWORD PTR _ir$4[ebp], edx

; 3295 : 		ig = bound ( ig, 0, 255 );

  00196	83 7d d0 00	 cmp	 DWORD PTR _ig$3[ebp], 0
  0019a	7d 09		 jge	 SHORT $LN12@render_con
  0019c	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
  001a3	eb 1e		 jmp	 SHORT $LN13@render_con
$LN12@render_con:
  001a5	81 7d d0 ff 00
	00 00		 cmp	 DWORD PTR _ig$3[ebp], 255 ; 000000ffH
  001ac	7e 09		 jle	 SHORT $LN10@render_con
  001ae	c7 45 80 ff 00
	00 00		 mov	 DWORD PTR tv148[ebp], 255 ; 000000ffH
  001b5	eb 06		 jmp	 SHORT $LN11@render_con
$LN10@render_con:
  001b7	8b 45 d0	 mov	 eax, DWORD PTR _ig$3[ebp]
  001ba	89 45 80	 mov	 DWORD PTR tv148[ebp], eax
$LN11@render_con:
  001bd	8b 4d 80	 mov	 ecx, DWORD PTR tv148[ebp]
  001c0	89 4d 84	 mov	 DWORD PTR tv149[ebp], ecx
$LN13@render_con:
  001c3	8b 55 84	 mov	 edx, DWORD PTR tv149[ebp]
  001c6	89 55 d0	 mov	 DWORD PTR _ig$3[ebp], edx

; 3296 : 		ib = bound ( ib, 0, 255 );

  001c9	83 7d cc 00	 cmp	 DWORD PTR _ib$2[ebp], 0
  001cd	7d 09		 jge	 SHORT $LN16@render_con
  001cf	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
  001d6	eb 1e		 jmp	 SHORT $LN17@render_con
$LN16@render_con:
  001d8	81 7d cc ff 00
	00 00		 cmp	 DWORD PTR _ib$2[ebp], 255 ; 000000ffH
  001df	7e 09		 jle	 SHORT $LN14@render_con
  001e1	c7 45 80 ff 00
	00 00		 mov	 DWORD PTR tv152[ebp], 255 ; 000000ffH
  001e8	eb 06		 jmp	 SHORT $LN15@render_con
$LN14@render_con:
  001ea	8b 45 cc	 mov	 eax, DWORD PTR _ib$2[ebp]
  001ed	89 45 80	 mov	 DWORD PTR tv152[ebp], eax
$LN15@render_con:
  001f0	8b 4d 80	 mov	 ecx, DWORD PTR tv152[ebp]
  001f3	89 4d 84	 mov	 DWORD PTR tv153[ebp], ecx
$LN17@render_con:
  001f6	8b 55 84	 mov	 edx, DWORD PTR tv153[ebp]
  001f9	89 55 cc	 mov	 DWORD PTR _ib$2[ebp], edx

; 3297 : 
; 3298 : 		col.red = ir;

  001fc	8a 45 d4	 mov	 al, BYTE PTR _ir$4[ebp]
  001ff	88 45 ca	 mov	 BYTE PTR _col$1[ebp+2], al

; 3299 : 		col.green = ig;

  00202	8a 45 d0	 mov	 al, BYTE PTR _ig$3[ebp]
  00205	88 45 c9	 mov	 BYTE PTR _col$1[ebp+1], al

; 3300 : 		col.blue = ib;

  00208	8a 45 cc	 mov	 al, BYTE PTR _ib$2[ebp]
  0020b	88 45 c8	 mov	 BYTE PTR _col$1[ebp], al

; 3301 : 
; 3302 : 		vptr[count].sx = vertices[count].i;

  0020e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00211	c1 e0 06	 shl	 eax, 6
  00214	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00217	c1 e1 05	 shl	 ecx, 5
  0021a	8b 55 f8	 mov	 edx, DWORD PTR _vptr$[ebp]
  0021d	8b 75 08	 mov	 esi, DWORD PTR _vertices$[ebp]
  00220	8b 44 06 10	 mov	 eax, DWORD PTR [esi+eax+16]
  00224	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 3303 : 		vptr[count].sy = vertices[count].j;

  00227	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0022a	c1 e0 06	 shl	 eax, 6
  0022d	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00230	c1 e1 05	 shl	 ecx, 5
  00233	8b 55 f8	 mov	 edx, DWORD PTR _vptr$[ebp]
  00236	8b 75 08	 mov	 esi, DWORD PTR _vertices$[ebp]
  00239	8b 44 06 14	 mov	 eax, DWORD PTR [esi+eax+20]
  0023d	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 3304 : 		vptr[count].rhw = vertices[count].q;

  00241	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00244	c1 e0 06	 shl	 eax, 6
  00247	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  0024a	c1 e1 05	 shl	 ecx, 5
  0024d	8b 55 f8	 mov	 edx, DWORD PTR _vptr$[ebp]
  00250	8b 75 08	 mov	 esi, DWORD PTR _vertices$[ebp]
  00253	8b 44 06 0c	 mov	 eax, DWORD PTR [esi+eax+12]
  00257	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 3305 : 		vptr[count].sz = vertices[count].q;

  0025b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0025e	c1 e0 06	 shl	 eax, 6
  00261	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00264	c1 e1 05	 shl	 ecx, 5
  00267	8b 55 f8	 mov	 edx, DWORD PTR _vptr$[ebp]
  0026a	8b 75 08	 mov	 esi, DWORD PTR _vertices$[ebp]
  0026d	8b 44 06 0c	 mov	 eax, DWORD PTR [esi+eax+12]
  00271	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 3306 : 		vptr[count].color = col.colour;

  00275	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00278	c1 e0 05	 shl	 eax, 5
  0027b	8b 4d f8	 mov	 ecx, DWORD PTR _vptr$[ebp]
  0027e	8b 55 c8	 mov	 edx, DWORD PTR _col$1[ebp]
  00281	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 3307 : 		vptr[count].specular = specular.colour;

  00285	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00288	c1 e0 05	 shl	 eax, 5
  0028b	8b 4d f8	 mov	 ecx, DWORD PTR _vptr$[ebp]
  0028e	8b 55 e8	 mov	 edx, DWORD PTR _specular$[ebp]
  00291	89 54 01 14	 mov	 DWORD PTR [ecx+eax+20], edx

; 3308 : 	}

  00295	e9 ef fd ff ff	 jmp	 $LN2@render_con
$LN3@render_con:

; 3309 : 
; 3310 : 	draw_special_quad_quad_primitive ( 9 );

  0029a	6a 09		 push	 9
  0029c	e8 00 00 00 00	 call	 ?draw_special_quad_quad_primitive@@YGXH@Z ; draw_special_quad_quad_primitive

; 3311 : }

  002a1	5f		 pop	 edi
  002a2	5e		 pop	 esi
  002a3	5b		 pop	 ebx
  002a4	8b e5		 mov	 esp, ebp
  002a6	5d		 pop	 ebp
  002a7	c2 0c 00	 ret	 12			; 0000000cH
?render_contour_terrain_quad_quad@@YGXPAUVERTEX@@HH@Z ENDP ; render_contour_terrain_quad_quad
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?render_contour_terrain_quad@@YGXPAUVERTEX@@HH@Z
_TEXT	SEGMENT
_delta_j$1 = -384					; size = 4
_delta_i$2 = -380					; size = 4
_new_v$3 = -376						; size = 4
_poly$4 = -372						; size = 4
_delta_j$5 = -368					; size = 4
_delta_i$6 = -364					; size = 4
_new_v$7 = -360						; size = 4
_poly$8 = -356						; size = 4
_foutcode_gen$9 = -352					; size = 4
_outcode_gen2$10 = -348					; size = 4
_outcode_gen1$11 = -344					; size = 4
_triangle2_outcode2$12 = -340				; size = 4
_triangle2_outcode$13 = -336				; size = 4
_triangle1_outcode2$14 = -332				; size = 4
_triangle1_outcode$15 = -328				; size = 4
_quad_outcode2$16 = -324				; size = 4
_quad_outcode$17 = -320					; size = 4
_line_vertex_index$18 = -316				; size = 4
_contour_line_vertices$19 = -312			; size = 256
_j_scale$20 = -56					; size = 4
_i_scale$21 = -52					; size = 4
_poly$22 = -48						; size = 4
_poly$23 = -44						; size = 4
_triangle2_outcode2$24 = -40				; size = 4
_triangle2_outcode$25 = -36				; size = 4
_triangle1_outcode2$26 = -32				; size = 4
_triangle1_outcode$27 = -28				; size = 4
_quad_outcode2$28 = -24					; size = 4
_quad_outcode$29 = -20					; size = 4
_specular$ = -16					; size = 4
_contour_line_colour$ = -12				; size = 4
_contour_colour$ = -8					; size = 4
_count$ = -4						; size = 4
_vertices$ = 8						; size = 4
_contour_start_index$ = 12				; size = 4
_contour_end_index$ = 16				; size = 4
?render_contour_terrain_quad@@YGXPAUVERTEX@@HH@Z PROC	; render_contour_terrain_quad, COMDAT

; 2823 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 01 00
	00		 sub	 esp, 448		; 000001c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2824 : 	int
; 2825 : 		count;
; 2826 : 
; 2827 : 	real_colour
; 2828 : 		contour_colour,
; 2829 : 		contour_line_colour,
; 2830 : 		specular;
; 2831 : 
; 2832 : 	specular.red = 0;

  0000c	c6 45 f2 00	 mov	 BYTE PTR _specular$[ebp+2], 0

; 2833 : 	specular.green = 0;

  00010	c6 45 f1 00	 mov	 BYTE PTR _specular$[ebp+1], 0

; 2834 : 	specular.blue = 0;

  00014	c6 45 f0 00	 mov	 BYTE PTR _specular$[ebp], 0

; 2835 : 	specular.alpha = 255;

  00018	c6 45 f3 ff	 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 2836 : 
; 2837 : 	contour_line_colour.red = 60;

  0001c	c6 45 f6 3c	 mov	 BYTE PTR _contour_line_colour$[ebp+2], 60 ; 0000003cH

; 2838 : 	contour_line_colour.green = 40;

  00020	c6 45 f5 28	 mov	 BYTE PTR _contour_line_colour$[ebp+1], 40 ; 00000028H

; 2839 : 	contour_line_colour.blue = 20;

  00024	c6 45 f4 14	 mov	 BYTE PTR _contour_line_colour$[ebp], 20 ; 00000014H

; 2840 : 
; 2841 : 	vertices[0].outcode &= CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM;

  00028	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00033	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  00038	83 e0 0f	 and	 eax, 15			; 0000000fH
  0003b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00040	6b d1 00	 imul	 edx, ecx, 0
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00046	88 44 11 2c	 mov	 BYTE PTR [ecx+edx+44], al

; 2842 : 	vertices[1].outcode &= CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM;

  0004a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0004f	c1 e0 00	 shl	 eax, 0
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00055	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  0005a	83 e2 0f	 and	 edx, 15			; 0000000fH
  0005d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00062	c1 e0 00	 shl	 eax, 0
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00068	88 54 01 2c	 mov	 BYTE PTR [ecx+eax+44], dl

; 2843 : 	vertices[2].outcode &= CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM;

  0006c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00071	d1 e0		 shl	 eax, 1
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00076	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  0007b	83 e2 0f	 and	 edx, 15			; 0000000fH
  0007e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00083	d1 e0		 shl	 eax, 1
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00088	88 54 01 2c	 mov	 BYTE PTR [ecx+eax+44], dl

; 2844 : 	vertices[3].outcode &= CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM;

  0008c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00091	6b c8 03	 imul	 ecx, eax, 3
  00094	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00097	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  0009c	83 e0 0f	 and	 eax, 15			; 0000000fH
  0009f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000a4	6b d1 03	 imul	 edx, ecx, 3
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  000aa	88 44 11 2c	 mov	 BYTE PTR [ecx+edx+44], al

; 2845 : 
; 2846 : 	if ( contour_start_index == contour_end_index )	// no contour line in this quad

  000ae	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  000b1	3b 45 10	 cmp	 eax, DWORD PTR _contour_end_index$[ebp]
  000b4	0f 85 c8 02 00
	00		 jne	 $LN11@render_con

; 2847 : 	{
; 2848 : 
; 2849 : 		int
; 2850 : 			quad_outcode,
; 2851 : 			quad_outcode2,
; 2852 : 			triangle1_outcode,
; 2853 : 			triangle1_outcode2,
; 2854 : 			triangle2_outcode,
; 2855 : 			triangle2_outcode2;
; 2856 : 
; 2857 : 		contour_minimum_height = terrain_2d_contour_heights[contour_start_index];

  000ba	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  000bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_contour_heights@@3PAMA ; terrain_2d_contour_heights
  000c3	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  000c8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?contour_minimum_height@@3MA, xmm0

; 2858 : 		contour_maximum_height = terrain_2d_contour_heights[contour_start_index+1];

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  000d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_contour_heights@@3PAMA ; terrain_2d_contour_heights
  000d9	f3 0f 10 44 81
	04		 movss	 xmm0, DWORD PTR [ecx+eax*4+4]
  000df	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?contour_maximum_height@@3MA, xmm0

; 2859 : 	
; 2860 : 		contour_colour.red = terrain_2d_current_contour_colours[contour_start_index].r;

  000e7	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  000f0	8a 54 81 02	 mov	 dl, BYTE PTR [ecx+eax*4+2]
  000f4	88 55 fa	 mov	 BYTE PTR _contour_colour$[ebp+2], dl

; 2861 : 		contour_colour.green = terrain_2d_current_contour_colours[contour_start_index].g;

  000f7	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  000fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  00100	8a 54 81 01	 mov	 dl, BYTE PTR [ecx+eax*4+1]
  00104	88 55 f9	 mov	 BYTE PTR _contour_colour$[ebp+1], dl

; 2862 : 		contour_colour.blue = terrain_2d_current_contour_colours[contour_start_index].b;

  00107	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  0010a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  00110	8a 14 81	 mov	 dl, BYTE PTR [ecx+eax*4]
  00113	88 55 f8	 mov	 BYTE PTR _contour_colour$[ebp], dl

; 2863 : 
; 2864 : 		quad_outcode = vertices[1].outcode;

  00116	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0011b	c1 e0 00	 shl	 eax, 0
  0011e	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00121	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00126	89 55 ec	 mov	 DWORD PTR _quad_outcode$29[ebp], edx

; 2865 : 		quad_outcode2 = vertices[1].outcode;

  00129	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0012e	c1 e0 00	 shl	 eax, 0
  00131	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00134	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00139	89 55 e8	 mov	 DWORD PTR _quad_outcode2$28[ebp], edx

; 2866 : 		quad_outcode |= vertices[2].outcode;

  0013c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00141	d1 e0		 shl	 eax, 1
  00143	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00146	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  0014b	0b 55 ec	 or	 edx, DWORD PTR _quad_outcode$29[ebp]
  0014e	89 55 ec	 mov	 DWORD PTR _quad_outcode$29[ebp], edx

; 2867 : 		quad_outcode2 &= vertices[2].outcode;

  00151	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00156	d1 e0		 shl	 eax, 1
  00158	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0015b	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00160	23 55 e8	 and	 edx, DWORD PTR _quad_outcode2$28[ebp]
  00163	89 55 e8	 mov	 DWORD PTR _quad_outcode2$28[ebp], edx

; 2868 : 
; 2869 : 		triangle1_outcode = quad_outcode | vertices[0].outcode;

  00166	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0016b	6b c8 00	 imul	 ecx, eax, 0
  0016e	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00171	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  00176	0b 45 ec	 or	 eax, DWORD PTR _quad_outcode$29[ebp]
  00179	89 45 e4	 mov	 DWORD PTR _triangle1_outcode$27[ebp], eax

; 2870 : 		triangle1_outcode2 = quad_outcode2 & vertices[0].outcode;

  0017c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00181	6b c8 00	 imul	 ecx, eax, 0
  00184	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00187	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  0018c	23 45 e8	 and	 eax, DWORD PTR _quad_outcode2$28[ebp]
  0018f	89 45 e0	 mov	 DWORD PTR _triangle1_outcode2$26[ebp], eax

; 2871 : 
; 2872 : 		triangle2_outcode = quad_outcode | vertices[3].outcode;

  00192	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00197	6b c8 03	 imul	 ecx, eax, 3
  0019a	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  0019d	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  001a2	0b 45 ec	 or	 eax, DWORD PTR _quad_outcode$29[ebp]
  001a5	89 45 dc	 mov	 DWORD PTR _triangle2_outcode$25[ebp], eax

; 2873 : 		triangle2_outcode2 = quad_outcode2 & vertices[3].outcode;

  001a8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ad	6b c8 03	 imul	 ecx, eax, 3
  001b0	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  001b3	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  001b8	23 45 e8	 and	 eax, DWORD PTR _quad_outcode2$28[ebp]
  001bb	89 45 d8	 mov	 DWORD PTR _triangle2_outcode2$24[ebp], eax

; 2874 : 
; 2875 : 		quad_outcode2 &= triangle1_outcode2;

  001be	8b 45 e8	 mov	 eax, DWORD PTR _quad_outcode2$28[ebp]
  001c1	23 45 e0	 and	 eax, DWORD PTR _triangle1_outcode2$26[ebp]
  001c4	89 45 e8	 mov	 DWORD PTR _quad_outcode2$28[ebp], eax

; 2876 : 		quad_outcode2 &= triangle2_outcode2;

  001c7	8b 45 e8	 mov	 eax, DWORD PTR _quad_outcode2$28[ebp]
  001ca	23 45 d8	 and	 eax, DWORD PTR _triangle2_outcode2$24[ebp]
  001cd	89 45 e8	 mov	 DWORD PTR _quad_outcode2$28[ebp], eax

; 2877 : 
; 2878 : 		quad_outcode |= triangle1_outcode;

  001d0	8b 45 ec	 mov	 eax, DWORD PTR _quad_outcode$29[ebp]
  001d3	0b 45 e4	 or	 eax, DWORD PTR _triangle1_outcode$27[ebp]
  001d6	89 45 ec	 mov	 DWORD PTR _quad_outcode$29[ebp], eax

; 2879 : 		quad_outcode |= triangle2_outcode;

  001d9	8b 45 ec	 mov	 eax, DWORD PTR _quad_outcode$29[ebp]
  001dc	0b 45 dc	 or	 eax, DWORD PTR _triangle2_outcode$25[ebp]
  001df	89 45 ec	 mov	 DWORD PTR _quad_outcode$29[ebp], eax

; 2880 : 
; 2881 : 		if ( quad_outcode == 0 )

  001e2	75 79		 jne	 SHORT $LN13@render_con

; 2882 : 		{
; 2883 : 	
; 2884 : 			vertices[1].next_vertex = &vertices[3];

  001e4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e9	6b c8 03	 imul	 ecx, eax, 3
  001ec	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  001ef	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001f4	c1 e2 00	 shl	 edx, 0
  001f7	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  001fa	89 4c 10 28	 mov	 DWORD PTR [eax+edx+40], ecx

; 2885 : 			vertices[3].next_vertex = &vertices[2];

  001fe	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00203	d1 e0		 shl	 eax, 1
  00205	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00208	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0020d	6b d1 03	 imul	 edx, ecx, 3
  00210	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00213	89 44 11 28	 mov	 DWORD PTR [ecx+edx+40], eax

; 2886 : 			vertices[2].next_vertex = &vertices[0];

  00217	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0021c	6b c8 00	 imul	 ecx, eax, 0
  0021f	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00222	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00227	d1 e2		 shl	 edx, 1
  00229	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  0022c	89 4c 10 28	 mov	 DWORD PTR [eax+edx+40], ecx

; 2887 : 			vertices[0].next_vertex = NULL;

  00230	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00235	6b c8 00	 imul	 ecx, eax, 0
  00238	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  0023b	c7 44 0a 28 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+40], 0

; 2888 : 
; 2889 : 			render_shaded_contour_terrain_poly ( &vertices[1], contour_colour);

  00243	8b 45 f8	 mov	 eax, DWORD PTR _contour_colour$[ebp]
  00246	50		 push	 eax
  00247	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0024c	c1 e1 00	 shl	 ecx, 0
  0024f	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00252	51		 push	 ecx
  00253	e8 00 00 00 00	 call	 ?render_shaded_contour_terrain_poly@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; render_shaded_contour_terrain_poly

; 2890 : 		}
; 2891 : 		else

  00258	e9 20 01 00 00	 jmp	 $LN20@render_con
$LN13@render_con:

; 2892 : 		{
; 2893 : 
; 2894 : 			if ( triangle1_outcode2 == 0 )

  0025d	83 7d e0 00	 cmp	 DWORD PTR _triangle1_outcode2$26[ebp], 0
  00261	0f 85 86 00 00
	00		 jne	 $LN17@render_con

; 2895 : 			{
; 2896 : 	
; 2897 : 				vertex
; 2898 : 					*poly;
; 2899 : 	
; 2900 : 				vertices[0].next_vertex = &vertices[1];

  00267	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0026c	c1 e0 00	 shl	 eax, 0
  0026f	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00272	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00277	6b d1 00	 imul	 edx, ecx, 0
  0027a	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0027d	89 44 11 28	 mov	 DWORD PTR [ecx+edx+40], eax

; 2901 : 				vertices[1].next_vertex = &vertices[2];

  00281	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00286	d1 e0		 shl	 eax, 1
  00288	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  0028b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00290	c1 e1 00	 shl	 ecx, 0
  00293	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00296	89 44 0a 28	 mov	 DWORD PTR [edx+ecx+40], eax

; 2902 : 				vertices[2].next_vertex = NULL;

  0029a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0029f	d1 e0		 shl	 eax, 1
  002a1	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  002a4	c7 44 01 28 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+40], 0

; 2903 : 
; 2904 : 				poly = &vertices[0];

  002ac	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002b1	6b c8 00	 imul	 ecx, eax, 0
  002b4	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  002b7	89 4d d4	 mov	 DWORD PTR _poly$23[ebp], ecx

; 2905 : 	
; 2906 : 				clip_3d_coord = 0;

  002ba	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 2907 : 	
; 2908 : 				if ( triangle1_outcode )

  002c4	83 7d e4 00	 cmp	 DWORD PTR _triangle1_outcode$27[ebp], 0
  002c8	74 10		 je	 SHORT $LN16@render_con

; 2909 : 				{
; 2910 : 		
; 2911 : 					poly = clip_contour_polygon ( poly, triangle1_outcode );

  002ca	8b 45 e4	 mov	 eax, DWORD PTR _triangle1_outcode$27[ebp]
  002cd	50		 push	 eax
  002ce	8b 4d d4	 mov	 ecx, DWORD PTR _poly$23[ebp]
  002d1	51		 push	 ecx
  002d2	e8 00 00 00 00	 call	 ?clip_contour_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_contour_polygon
  002d7	89 45 d4	 mov	 DWORD PTR _poly$23[ebp], eax
$LN16@render_con:

; 2912 : 				}
; 2913 : 		
; 2914 : 				if ( poly )

  002da	83 7d d4 00	 cmp	 DWORD PTR _poly$23[ebp], 0
  002de	74 0d		 je	 SHORT $LN17@render_con

; 2915 : 				{
; 2916 : 				
; 2917 : 					render_shaded_contour_terrain_poly ( poly, contour_colour);

  002e0	8b 45 f8	 mov	 eax, DWORD PTR _contour_colour$[ebp]
  002e3	50		 push	 eax
  002e4	8b 4d d4	 mov	 ecx, DWORD PTR _poly$23[ebp]
  002e7	51		 push	 ecx
  002e8	e8 00 00 00 00	 call	 ?render_shaded_contour_terrain_poly@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; render_shaded_contour_terrain_poly
$LN17@render_con:

; 2918 : 				}
; 2919 : 			}
; 2920 : 	
; 2921 : 			if ( triangle2_outcode2 == 0 )

  002ed	83 7d d8 00	 cmp	 DWORD PTR _triangle2_outcode2$24[ebp], 0
  002f1	0f 85 86 00 00
	00		 jne	 $LN20@render_con

; 2922 : 			{
; 2923 : 	
; 2924 : 				vertex
; 2925 : 					*poly;
; 2926 : 	
; 2927 : 				vertices[2].next_vertex = &vertices[1];

  002f7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002fc	c1 e0 00	 shl	 eax, 0
  002ff	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00302	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00307	d1 e1		 shl	 ecx, 1
  00309	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  0030c	89 44 0a 28	 mov	 DWORD PTR [edx+ecx+40], eax

; 2928 : 				vertices[1].next_vertex = &vertices[3];

  00310	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00315	6b c8 03	 imul	 ecx, eax, 3
  00318	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  0031b	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00320	c1 e2 00	 shl	 edx, 0
  00323	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  00326	89 4c 10 28	 mov	 DWORD PTR [eax+edx+40], ecx

; 2929 : 				vertices[3].next_vertex = NULL;

  0032a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0032f	6b c8 03	 imul	 ecx, eax, 3
  00332	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00335	c7 44 0a 28 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+40], 0

; 2930 : 	
; 2931 : 				poly = &vertices[2];

  0033d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00342	d1 e0		 shl	 eax, 1
  00344	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00347	89 45 d0	 mov	 DWORD PTR _poly$22[ebp], eax

; 2932 : 	
; 2933 : 				clip_3d_coord = 0;

  0034a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 2934 : 	
; 2935 : 				if ( triangle2_outcode )

  00354	83 7d dc 00	 cmp	 DWORD PTR _triangle2_outcode$25[ebp], 0
  00358	74 10		 je	 SHORT $LN19@render_con

; 2936 : 				{
; 2937 : 		
; 2938 : 					poly = clip_contour_polygon ( poly, triangle2_outcode );

  0035a	8b 45 dc	 mov	 eax, DWORD PTR _triangle2_outcode$25[ebp]
  0035d	50		 push	 eax
  0035e	8b 4d d0	 mov	 ecx, DWORD PTR _poly$22[ebp]
  00361	51		 push	 ecx
  00362	e8 00 00 00 00	 call	 ?clip_contour_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_contour_polygon
  00367	89 45 d0	 mov	 DWORD PTR _poly$22[ebp], eax
$LN19@render_con:

; 2939 : 				}
; 2940 : 		
; 2941 : 				if ( poly )

  0036a	83 7d d0 00	 cmp	 DWORD PTR _poly$22[ebp], 0
  0036e	74 0d		 je	 SHORT $LN20@render_con

; 2942 : 				{
; 2943 : 				
; 2944 : 					render_shaded_contour_terrain_poly ( poly, contour_colour);

  00370	8b 45 f8	 mov	 eax, DWORD PTR _contour_colour$[ebp]
  00373	50		 push	 eax
  00374	8b 4d d0	 mov	 ecx, DWORD PTR _poly$22[ebp]
  00377	51		 push	 ecx
  00378	e8 00 00 00 00	 call	 ?render_shaded_contour_terrain_poly@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; render_shaded_contour_terrain_poly
$LN20@render_con:

; 2945 : 				}
; 2946 : 			}
; 2947 : 		}
; 2948 : 	}
; 2949 : 	else  // contains contour line(s)

  0037d	e9 49 0d 00 00	 jmp	 $LN3@render_con
$LN11@render_con:

; 2950 : 	{
; 2951 : 		float
; 2952 : 			i_scale = 1.0 / (vertices[3].i - vertices[0].i),

  00382	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00387	6b c8 03	 imul	 ecx, eax, 3
  0038a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0038f	6b c2 00	 imul	 eax, edx, 0
  00392	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00395	8b 75 08	 mov	 esi, DWORD PTR _vertices$[ebp]
  00398	f3 0f 10 44 0a
	10		 movss	 xmm0, DWORD PTR [edx+ecx+16]
  0039e	f3 0f 5c 44 06
	10		 subss	 xmm0, DWORD PTR [esi+eax+16]
  003a4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003a8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003b0	f2 0f 5e c8	 divsd	 xmm1, xmm0
  003b4	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003b8	f3 0f 11 45 cc	 movss	 DWORD PTR _i_scale$21[ebp], xmm0

; 2953 : 			j_scale = 1.0 / (vertices[3].j - vertices[0].j);

  003bd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003c2	6b c8 03	 imul	 ecx, eax, 3
  003c5	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003ca	6b c2 00	 imul	 eax, edx, 0
  003cd	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  003d0	8b 75 08	 mov	 esi, DWORD PTR _vertices$[ebp]
  003d3	f3 0f 10 44 0a
	14		 movss	 xmm0, DWORD PTR [edx+ecx+20]
  003d9	f3 0f 5c 44 06
	14		 subss	 xmm0, DWORD PTR [esi+eax+20]
  003df	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003e3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003eb	f2 0f 5e c8	 divsd	 xmm1, xmm0
  003ef	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003f3	f3 0f 11 45 c8	 movss	 DWORD PTR _j_scale$20[ebp], xmm0

; 2954 : 
; 2955 : 		for ( count = contour_start_index; count <= contour_end_index; count++ )

  003f8	8b 45 0c	 mov	 eax, DWORD PTR _contour_start_index$[ebp]
  003fb	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  003fe	eb 09		 jmp	 SHORT $LN4@render_con
$LN2@render_con:
  00400	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00403	83 c0 01	 add	 eax, 1
  00406	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@render_con:
  00409	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0040c	3b 45 10	 cmp	 eax, DWORD PTR _contour_end_index$[ebp]
  0040f	0f 8f b6 0c 00
	00		 jg	 $LN3@render_con

; 2956 : 		{
; 2957 : 	
; 2958 : 			vertex
; 2959 : 				contour_line_vertices[4];
; 2960 : 	
; 2961 : 			int
; 2962 : 				line_vertex_index,
; 2963 : 				quad_outcode,
; 2964 : 				quad_outcode2,
; 2965 : 				triangle1_outcode,
; 2966 : 				triangle1_outcode2,
; 2967 : 				triangle2_outcode,
; 2968 : 				triangle2_outcode2;
; 2969 : 
; 2970 : 			contour_minimum_height = terrain_2d_contour_heights[count];

  00415	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00418	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_contour_heights@@3PAMA ; terrain_2d_contour_heights
  0041e	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  00423	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?contour_minimum_height@@3MA, xmm0

; 2971 : 			contour_maximum_height = terrain_2d_contour_heights[count+1];

  0042b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0042e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_contour_heights@@3PAMA ; terrain_2d_contour_heights
  00434	f3 0f 10 44 81
	04		 movss	 xmm0, DWORD PTR [ecx+eax*4+4]
  0043a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?contour_maximum_height@@3MA, xmm0

; 2972 : 	
; 2973 : 			line_vertex_index = 0;

  00442	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _line_vertex_index$18[ebp], 0

; 2974 : 	
; 2975 : 			contour_colour.red = terrain_2d_current_contour_colours[count].r;

  0044c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0044f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  00455	8a 54 81 02	 mov	 dl, BYTE PTR [ecx+eax*4+2]
  00459	88 55 fa	 mov	 BYTE PTR _contour_colour$[ebp+2], dl

; 2976 : 			contour_colour.green = terrain_2d_current_contour_colours[count].g;

  0045c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0045f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  00465	8a 54 81 01	 mov	 dl, BYTE PTR [ecx+eax*4+1]
  00469	88 55 f9	 mov	 BYTE PTR _contour_colour$[ebp+1], dl

; 2977 : 			contour_colour.blue = terrain_2d_current_contour_colours[count].b;

  0046c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0046f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  00475	8a 14 81	 mov	 dl, BYTE PTR [ecx+eax*4]
  00478	88 55 f8	 mov	 BYTE PTR _contour_colour$[ebp], dl

; 2978 : 
; 2979 : 			//
; 2980 : 			// Add in height outcodes
; 2981 : 			//
; 2982 : 
; 2983 : 			vertices[0].outcode &= CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM;

  0047b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00480	6b c8 00	 imul	 ecx, eax, 0
  00483	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00486	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  0048b	83 e0 0f	 and	 eax, 15			; 0000000fH
  0048e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00493	6b d1 00	 imul	 edx, ecx, 0
  00496	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00499	88 44 11 2c	 mov	 BYTE PTR [ecx+edx+44], al

; 2984 : 			vertices[1].outcode &= CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM;

  0049d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004a2	c1 e0 00	 shl	 eax, 0
  004a5	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  004a8	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  004ad	83 e2 0f	 and	 edx, 15			; 0000000fH
  004b0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004b5	c1 e0 00	 shl	 eax, 0
  004b8	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  004bb	88 54 01 2c	 mov	 BYTE PTR [ecx+eax+44], dl

; 2985 : 			vertices[2].outcode &= CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM;

  004bf	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004c4	d1 e0		 shl	 eax, 1
  004c6	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  004c9	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  004ce	83 e2 0f	 and	 edx, 15			; 0000000fH
  004d1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004d6	d1 e0		 shl	 eax, 1
  004d8	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  004db	88 54 01 2c	 mov	 BYTE PTR [ecx+eax+44], dl

; 2986 : 			vertices[3].outcode &= CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM;

  004df	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004e4	6b c8 03	 imul	 ecx, eax, 3
  004e7	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  004ea	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  004ef	83 e0 0f	 and	 eax, 15			; 0000000fH
  004f2	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  004f7	6b d1 03	 imul	 edx, ecx, 3
  004fa	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  004fd	88 44 11 2c	 mov	 BYTE PTR [ecx+edx+44], al

; 2987 : 
; 2988 : 			{
; 2989 : 	
; 2990 : 				unsigned int
; 2991 : 					outcode_gen1,
; 2992 : 					outcode_gen2;
; 2993 : 	
; 2994 : 				float
; 2995 : 					foutcode_gen;
; 2996 : 		
; 2997 : 				foutcode_gen = vertices[0].y - contour_minimum_height; outcode_gen1 = *( ( int * ) &foutcode_gen );

  00501	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00506	6b c8 00	 imul	 ecx, eax, 0
  00509	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  0050c	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  00512	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?contour_minimum_height@@3MA
  0051a	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _foutcode_gen$9[ebp], xmm0
  00522	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _foutcode_gen$9[ebp]
  00528	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax

; 2998 : 				foutcode_gen =  contour_maximum_height - vertices[0].y; outcode_gen2 = *( ( int * ) &foutcode_gen );

  0052e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00533	6b c8 00	 imul	 ecx, eax, 0
  00536	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00539	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?contour_maximum_height@@3MA
  00541	f3 0f 5c 44 0a
	04		 subss	 xmm0, DWORD PTR [edx+ecx+4]
  00547	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _foutcode_gen$9[ebp], xmm0
  0054f	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _foutcode_gen$9[ebp]
  00555	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax

; 2999 : 				outcode_gen1 >>= 26; outcode_gen1 &= CLIP_HITHER;

  0055b	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen1$11[ebp]
  00561	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  00564	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax
  0056a	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen1$11[ebp]
  00570	83 e0 20	 and	 eax, 32			; 00000020H
  00573	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax

; 3000 : 				outcode_gen2 >>= 27; outcode_gen2 &= CLIP_YONDER;

  00579	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen2$10[ebp]
  0057f	c1 e8 1b	 shr	 eax, 27			; 0000001bH
  00582	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax
  00588	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen2$10[ebp]
  0058e	83 e0 10	 and	 eax, 16			; 00000010H
  00591	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax

; 3001 : 				vertices[0].outcode |= ( outcode_gen1 | outcode_gen2 );

  00597	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0059c	6b c8 00	 imul	 ecx, eax, 0
  0059f	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _outcode_gen1$11[ebp]
  005a5	0b 95 a4 fe ff
	ff		 or	 edx, DWORD PTR _outcode_gen2$10[ebp]
  005ab	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  005ae	0f b6 4c 08 2c	 movzx	 ecx, BYTE PTR [eax+ecx+44]
  005b3	0b ca		 or	 ecx, edx
  005b5	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  005ba	6b c2 00	 imul	 eax, edx, 0
  005bd	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  005c0	88 4c 02 2c	 mov	 BYTE PTR [edx+eax+44], cl

; 3002 : 	
; 3003 : 				foutcode_gen = vertices[1].y - contour_minimum_height; outcode_gen1 = *( ( int * ) &foutcode_gen );

  005c4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005c9	c1 e0 00	 shl	 eax, 0
  005cc	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  005cf	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  005d5	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?contour_minimum_height@@3MA
  005dd	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _foutcode_gen$9[ebp], xmm0
  005e5	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _foutcode_gen$9[ebp]
  005eb	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax

; 3004 : 				foutcode_gen = contour_maximum_height - vertices[1].y; outcode_gen2 = *( ( int * ) &foutcode_gen );

  005f1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005f6	c1 e0 00	 shl	 eax, 0
  005f9	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  005fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?contour_maximum_height@@3MA
  00604	f3 0f 5c 44 01
	04		 subss	 xmm0, DWORD PTR [ecx+eax+4]
  0060a	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _foutcode_gen$9[ebp], xmm0
  00612	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _foutcode_gen$9[ebp]
  00618	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax

; 3005 : 				outcode_gen1 >>= 26; outcode_gen1 &= CLIP_HITHER;

  0061e	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen1$11[ebp]
  00624	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  00627	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax
  0062d	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen1$11[ebp]
  00633	83 e0 20	 and	 eax, 32			; 00000020H
  00636	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax

; 3006 : 				outcode_gen2 >>= 27; outcode_gen2 &= CLIP_YONDER;

  0063c	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen2$10[ebp]
  00642	c1 e8 1b	 shr	 eax, 27			; 0000001bH
  00645	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax
  0064b	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen2$10[ebp]
  00651	83 e0 10	 and	 eax, 16			; 00000010H
  00654	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax

; 3007 : 				vertices[1].outcode |= ( outcode_gen1 | outcode_gen2 );

  0065a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0065f	c1 e0 00	 shl	 eax, 0
  00662	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _outcode_gen1$11[ebp]
  00668	0b 8d a4 fe ff
	ff		 or	 ecx, DWORD PTR _outcode_gen2$10[ebp]
  0066e	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00671	0f b6 44 02 2c	 movzx	 eax, BYTE PTR [edx+eax+44]
  00676	0b c1		 or	 eax, ecx
  00678	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0067d	c1 e1 00	 shl	 ecx, 0
  00680	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00683	88 44 0a 2c	 mov	 BYTE PTR [edx+ecx+44], al

; 3008 : 	
; 3009 : 				foutcode_gen = vertices[2].y - contour_minimum_height; outcode_gen1 = *( ( int * ) &foutcode_gen );

  00687	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0068c	d1 e0		 shl	 eax, 1
  0068e	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00691	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00697	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?contour_minimum_height@@3MA
  0069f	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _foutcode_gen$9[ebp], xmm0
  006a7	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _foutcode_gen$9[ebp]
  006ad	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax

; 3010 : 				foutcode_gen = contour_maximum_height - vertices[2].y; outcode_gen2 = *( ( int * ) &foutcode_gen );

  006b3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006b8	d1 e0		 shl	 eax, 1
  006ba	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  006bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?contour_maximum_height@@3MA
  006c5	f3 0f 5c 44 01
	04		 subss	 xmm0, DWORD PTR [ecx+eax+4]
  006cb	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _foutcode_gen$9[ebp], xmm0
  006d3	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _foutcode_gen$9[ebp]
  006d9	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax

; 3011 : 				outcode_gen1 >>= 26; outcode_gen1 &= CLIP_HITHER;

  006df	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen1$11[ebp]
  006e5	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  006e8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax
  006ee	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen1$11[ebp]
  006f4	83 e0 20	 and	 eax, 32			; 00000020H
  006f7	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax

; 3012 : 				outcode_gen2 >>= 27; outcode_gen2 &= CLIP_YONDER;

  006fd	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen2$10[ebp]
  00703	c1 e8 1b	 shr	 eax, 27			; 0000001bH
  00706	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax
  0070c	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen2$10[ebp]
  00712	83 e0 10	 and	 eax, 16			; 00000010H
  00715	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax

; 3013 : 				vertices[2].outcode |= ( outcode_gen1 | outcode_gen2 );

  0071b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00720	d1 e0		 shl	 eax, 1
  00722	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _outcode_gen1$11[ebp]
  00728	0b 8d a4 fe ff
	ff		 or	 ecx, DWORD PTR _outcode_gen2$10[ebp]
  0072e	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00731	0f b6 44 02 2c	 movzx	 eax, BYTE PTR [edx+eax+44]
  00736	0b c1		 or	 eax, ecx
  00738	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0073d	d1 e1		 shl	 ecx, 1
  0073f	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00742	88 44 0a 2c	 mov	 BYTE PTR [edx+ecx+44], al

; 3014 : 	
; 3015 : 				foutcode_gen = vertices[3].y - contour_minimum_height; outcode_gen1 = *( ( int * ) &foutcode_gen );

  00746	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0074b	6b c8 03	 imul	 ecx, eax, 3
  0074e	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00751	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  00757	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?contour_minimum_height@@3MA
  0075f	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _foutcode_gen$9[ebp], xmm0
  00767	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _foutcode_gen$9[ebp]
  0076d	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax

; 3016 : 				foutcode_gen = contour_maximum_height - vertices[3].y; outcode_gen2 = *( ( int * ) &foutcode_gen );

  00773	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00778	6b c8 03	 imul	 ecx, eax, 3
  0077b	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  0077e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?contour_maximum_height@@3MA
  00786	f3 0f 5c 44 0a
	04		 subss	 xmm0, DWORD PTR [edx+ecx+4]
  0078c	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _foutcode_gen$9[ebp], xmm0
  00794	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _foutcode_gen$9[ebp]
  0079a	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax

; 3017 : 				outcode_gen1 >>= 26; outcode_gen1 &= CLIP_HITHER;

  007a0	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen1$11[ebp]
  007a6	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  007a9	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax
  007af	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen1$11[ebp]
  007b5	83 e0 20	 and	 eax, 32			; 00000020H
  007b8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _outcode_gen1$11[ebp], eax

; 3018 : 				outcode_gen2 >>= 27; outcode_gen2 &= CLIP_YONDER;

  007be	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen2$10[ebp]
  007c4	c1 e8 1b	 shr	 eax, 27			; 0000001bH
  007c7	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax
  007cd	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode_gen2$10[ebp]
  007d3	83 e0 10	 and	 eax, 16			; 00000010H
  007d6	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _outcode_gen2$10[ebp], eax

; 3019 : 				vertices[3].outcode |= ( outcode_gen1 | outcode_gen2 );

  007dc	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007e1	6b c8 03	 imul	 ecx, eax, 3
  007e4	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _outcode_gen1$11[ebp]
  007ea	0b 95 a4 fe ff
	ff		 or	 edx, DWORD PTR _outcode_gen2$10[ebp]
  007f0	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  007f3	0f b6 4c 08 2c	 movzx	 ecx, BYTE PTR [eax+ecx+44]
  007f8	0b ca		 or	 ecx, edx
  007fa	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  007ff	6b c2 03	 imul	 eax, edx, 3
  00802	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00805	88 4c 02 2c	 mov	 BYTE PTR [edx+eax+44], cl

; 3020 : 			}
; 3021 : 
; 3022 : 			quad_outcode = vertices[1].outcode;

  00809	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0080e	c1 e0 00	 shl	 eax, 0
  00811	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00814	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00819	89 95 c0 fe ff
	ff		 mov	 DWORD PTR _quad_outcode$17[ebp], edx

; 3023 : 			quad_outcode2 = vertices[1].outcode;

  0081f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00824	c1 e0 00	 shl	 eax, 0
  00827	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0082a	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  0082f	89 95 bc fe ff
	ff		 mov	 DWORD PTR _quad_outcode2$16[ebp], edx

; 3024 : 			quad_outcode |= vertices[2].outcode;

  00835	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0083a	d1 e0		 shl	 eax, 1
  0083c	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0083f	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00844	0b 95 c0 fe ff
	ff		 or	 edx, DWORD PTR _quad_outcode$17[ebp]
  0084a	89 95 c0 fe ff
	ff		 mov	 DWORD PTR _quad_outcode$17[ebp], edx

; 3025 : 			quad_outcode2 &= vertices[2].outcode;

  00850	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00855	d1 e0		 shl	 eax, 1
  00857	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0085a	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  0085f	23 95 bc fe ff
	ff		 and	 edx, DWORD PTR _quad_outcode2$16[ebp]
  00865	89 95 bc fe ff
	ff		 mov	 DWORD PTR _quad_outcode2$16[ebp], edx

; 3026 : 	
; 3027 : 			triangle1_outcode = quad_outcode | vertices[0].outcode;

  0086b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00870	6b c8 00	 imul	 ecx, eax, 0
  00873	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00876	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  0087b	0b 85 c0 fe ff
	ff		 or	 eax, DWORD PTR _quad_outcode$17[ebp]
  00881	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _triangle1_outcode$15[ebp], eax

; 3028 : 			triangle1_outcode2 = quad_outcode2 & vertices[0].outcode;

  00887	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0088c	6b c8 00	 imul	 ecx, eax, 0
  0088f	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00892	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  00897	23 85 bc fe ff
	ff		 and	 eax, DWORD PTR _quad_outcode2$16[ebp]
  0089d	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _triangle1_outcode2$14[ebp], eax

; 3029 : 	
; 3030 : 			triangle2_outcode = quad_outcode | vertices[3].outcode;

  008a3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008a8	6b c8 03	 imul	 ecx, eax, 3
  008ab	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  008ae	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  008b3	0b 85 c0 fe ff
	ff		 or	 eax, DWORD PTR _quad_outcode$17[ebp]
  008b9	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _triangle2_outcode$13[ebp], eax

; 3031 : 			triangle2_outcode2 = quad_outcode2 & vertices[3].outcode;

  008bf	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008c4	6b c8 03	 imul	 ecx, eax, 3
  008c7	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  008ca	0f b6 44 0a 2c	 movzx	 eax, BYTE PTR [edx+ecx+44]
  008cf	23 85 bc fe ff
	ff		 and	 eax, DWORD PTR _quad_outcode2$16[ebp]
  008d5	89 85 ac fe ff
	ff		 mov	 DWORD PTR _triangle2_outcode2$12[ebp], eax

; 3032 : 	
; 3033 : 			quad_outcode2 &= triangle1_outcode2;

  008db	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _quad_outcode2$16[ebp]
  008e1	23 85 b4 fe ff
	ff		 and	 eax, DWORD PTR _triangle1_outcode2$14[ebp]
  008e7	89 85 bc fe ff
	ff		 mov	 DWORD PTR _quad_outcode2$16[ebp], eax

; 3034 : 			quad_outcode2 &= triangle2_outcode2;

  008ed	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _quad_outcode2$16[ebp]
  008f3	23 85 ac fe ff
	ff		 and	 eax, DWORD PTR _triangle2_outcode2$12[ebp]
  008f9	89 85 bc fe ff
	ff		 mov	 DWORD PTR _quad_outcode2$16[ebp], eax

; 3035 : 	
; 3036 : 			if ( quad_outcode2 == 0 )

  008ff	0f 85 c1 07 00
	00		 jne	 $LN43@render_con

; 3037 : 			{
; 3038 : 				quad_outcode |= triangle1_outcode;

  00905	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _quad_outcode$17[ebp]
  0090b	0b 85 b8 fe ff
	ff		 or	 eax, DWORD PTR _triangle1_outcode$15[ebp]
  00911	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _quad_outcode$17[ebp], eax

; 3039 : 				quad_outcode |= triangle2_outcode;

  00917	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _quad_outcode$17[ebp]
  0091d	0b 85 b0 fe ff
	ff		 or	 eax, DWORD PTR _triangle2_outcode$13[ebp]
  00923	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _quad_outcode$17[ebp], eax

; 3040 : 
; 3041 : 				if ( quad_outcode == 0 )

  00929	75 79		 jne	 SHORT $LN22@render_con

; 3042 : 				{
; 3043 : 					vertices[1].next_vertex = &vertices[3];

  0092b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00930	6b c8 03	 imul	 ecx, eax, 3
  00933	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00936	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0093b	c1 e2 00	 shl	 edx, 0
  0093e	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  00941	89 4c 10 28	 mov	 DWORD PTR [eax+edx+40], ecx

; 3044 : 					vertices[3].next_vertex = &vertices[2];

  00945	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0094a	d1 e0		 shl	 eax, 1
  0094c	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  0094f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00954	6b d1 03	 imul	 edx, ecx, 3
  00957	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  0095a	89 44 11 28	 mov	 DWORD PTR [ecx+edx+40], eax

; 3045 : 					vertices[2].next_vertex = &vertices[0];

  0095e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00963	6b c8 00	 imul	 ecx, eax, 0
  00966	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00969	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0096e	d1 e2		 shl	 edx, 1
  00970	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  00973	89 4c 10 28	 mov	 DWORD PTR [eax+edx+40], ecx

; 3046 : 					vertices[0].next_vertex = NULL;

  00977	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0097c	6b c8 00	 imul	 ecx, eax, 0
  0097f	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00982	c7 44 0a 28 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+40], 0

; 3047 : 	
; 3048 : 					render_shaded_contour_terrain_poly ( &vertices[1], contour_colour);

  0098a	8b 45 f8	 mov	 eax, DWORD PTR _contour_colour$[ebp]
  0098d	50		 push	 eax
  0098e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00993	c1 e1 00	 shl	 ecx, 0
  00996	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00999	51		 push	 ecx
  0099a	e8 00 00 00 00	 call	 ?render_shaded_contour_terrain_poly@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; render_shaded_contour_terrain_poly

; 3049 : 				}
; 3050 : 				else  // contour line goes through quad, split into triangles

  0099f	e9 22 07 00 00	 jmp	 $LN43@render_con
$LN22@render_con:

; 3051 : 				{
; 3052 : 					if ( triangle1_outcode2 == 0 )

  009a4	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _triangle1_outcode2$14[ebp], 0
  009ab	0f 85 5e 03 00
	00		 jne	 $LN30@render_con

; 3053 : 					{
; 3054 : 						vertex
; 3055 : 							*poly;
; 3056 : 
; 3057 : 						vertices[0].next_vertex = &vertices[1];

  009b1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009b6	c1 e0 00	 shl	 eax, 0
  009b9	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  009bc	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  009c1	6b d1 00	 imul	 edx, ecx, 0
  009c4	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  009c7	89 44 11 28	 mov	 DWORD PTR [ecx+edx+40], eax

; 3058 : 						vertices[1].next_vertex = &vertices[2];

  009cb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009d0	d1 e0		 shl	 eax, 1
  009d2	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  009d5	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  009da	c1 e1 00	 shl	 ecx, 0
  009dd	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  009e0	89 44 0a 28	 mov	 DWORD PTR [edx+ecx+40], eax

; 3059 : 						vertices[2].next_vertex = NULL;

  009e4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009e9	d1 e0		 shl	 eax, 1
  009eb	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  009ee	c7 44 01 28 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+40], 0

; 3060 : 
; 3061 : 						poly = &vertices[0];

  009f6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009fb	6b c8 00	 imul	 ecx, eax, 0
  009fe	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00a01	89 8d 9c fe ff
	ff		 mov	 DWORD PTR _poly$8[ebp], ecx

; 3062 : 			
; 3063 : 						clip_3d_coord = 0;

  00a07	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 3064 : 			
; 3065 : 						if ( triangle1_outcode & CLIP_HITHER )

  00a11	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _triangle1_outcode$15[ebp]
  00a17	83 e0 20	 and	 eax, 32			; 00000020H
  00a1a	0f 84 eb 00 00
	00		 je	 $LN25@render_con

; 3066 : 						{
; 3067 : 			
; 3068 : 							poly = bottom_clip_contour_polygon ( poly, &triangle1_outcode );

  00a20	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _triangle1_outcode$15[ebp]
  00a26	50		 push	 eax
  00a27	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _poly$8[ebp]
  00a2d	51		 push	 ecx
  00a2e	e8 00 00 00 00	 call	 ?bottom_clip_contour_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; bottom_clip_contour_polygon
  00a33	89 85 9c fe ff
	ff		 mov	 DWORD PTR _poly$8[ebp], eax

; 3069 : 
; 3070 : 							// set coordinates for the contour itself:
; 3071 : 							contour_line_vertices[line_vertex_index].i = clip_3d_crds[0].i;

  00a39	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a3e	6b c8 00	 imul	 ecx, eax, 0
  00a41	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _line_vertex_index$18[ebp]
  00a47	c1 e2 06	 shl	 edx, 6
  00a4a	8b 81 10 00 00
	00		 mov	 eax, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+16]
  00a50	89 84 15 d8 fe
	ff ff		 mov	 DWORD PTR _contour_line_vertices$19[ebp+edx+16], eax

; 3072 : 							contour_line_vertices[line_vertex_index].j = clip_3d_crds[0].j;

  00a57	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a5c	6b c8 00	 imul	 ecx, eax, 0
  00a5f	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _line_vertex_index$18[ebp]
  00a65	c1 e2 06	 shl	 edx, 6
  00a68	8b 81 14 00 00
	00		 mov	 eax, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+20]
  00a6e	89 84 15 dc fe
	ff ff		 mov	 DWORD PTR _contour_line_vertices$19[ebp+edx+20], eax

; 3073 : 							contour_line_vertices[line_vertex_index].outcode = clip_3d_crds[0].outcode;

  00a75	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a7a	6b c8 00	 imul	 ecx, eax, 0
  00a7d	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _line_vertex_index$18[ebp]
  00a83	c1 e2 06	 shl	 edx, 6
  00a86	8a 81 2c 00 00
	00		 mov	 al, BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+44]
  00a8c	88 84 15 f4 fe
	ff ff		 mov	 BYTE PTR _contour_line_vertices$19[ebp+edx+44], al

; 3074 : 		
; 3075 : 							line_vertex_index++;

  00a93	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _line_vertex_index$18[ebp]
  00a99	83 c0 01	 add	 eax, 1
  00a9c	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _line_vertex_index$18[ebp], eax

; 3076 : 		
; 3077 : 							contour_line_vertices[line_vertex_index].i = clip_3d_crds[1].i;

  00aa2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00aa7	c1 e0 00	 shl	 eax, 0
  00aaa	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _line_vertex_index$18[ebp]
  00ab0	c1 e1 06	 shl	 ecx, 6
  00ab3	8b 90 10 00 00
	00		 mov	 edx, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16]
  00ab9	89 94 0d d8 fe
	ff ff		 mov	 DWORD PTR _contour_line_vertices$19[ebp+ecx+16], edx

; 3078 : 							contour_line_vertices[line_vertex_index].j = clip_3d_crds[1].j;

  00ac0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ac5	c1 e0 00	 shl	 eax, 0
  00ac8	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _line_vertex_index$18[ebp]
  00ace	c1 e1 06	 shl	 ecx, 6
  00ad1	8b 90 14 00 00
	00		 mov	 edx, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20]
  00ad7	89 94 0d dc fe
	ff ff		 mov	 DWORD PTR _contour_line_vertices$19[ebp+ecx+20], edx

; 3079 : 							contour_line_vertices[line_vertex_index].outcode = clip_3d_crds[1].outcode;

  00ade	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ae3	c1 e0 00	 shl	 eax, 0
  00ae6	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _line_vertex_index$18[ebp]
  00aec	c1 e1 06	 shl	 ecx, 6
  00aef	8a 90 2c 00 00
	00		 mov	 dl, BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+44]
  00af5	88 94 0d f4 fe
	ff ff		 mov	 BYTE PTR _contour_line_vertices$19[ebp+ecx+44], dl

; 3080 : 		
; 3081 : 							line_vertex_index++;

  00afc	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _line_vertex_index$18[ebp]
  00b02	83 c0 01	 add	 eax, 1
  00b05	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _line_vertex_index$18[ebp], eax
$LN25@render_con:

; 3082 : 						}
; 3083 : 
; 3084 : 						if ( poly )

  00b0b	83 bd 9c fe ff
	ff 00		 cmp	 DWORD PTR _poly$8[ebp], 0
  00b12	0f 84 f7 01 00
	00		 je	 $LN30@render_con

; 3085 : 						{
; 3086 : 							if ( triangle1_outcode & CLIP_YONDER )

  00b18	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _triangle1_outcode$15[ebp]
  00b1e	83 e0 10	 and	 eax, 16			; 00000010H
  00b21	74 19		 je	 SHORT $LN27@render_con

; 3087 : 								poly = top_clip_contour_polygon ( poly, &triangle1_outcode );

  00b23	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _triangle1_outcode$15[ebp]
  00b29	50		 push	 eax
  00b2a	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _poly$8[ebp]
  00b30	51		 push	 ecx
  00b31	e8 00 00 00 00	 call	 ?top_clip_contour_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; top_clip_contour_polygon
  00b36	89 85 9c fe ff
	ff		 mov	 DWORD PTR _poly$8[ebp], eax
$LN27@render_con:

; 3088 : 			
; 3089 : 							if ( poly )

  00b3c	83 bd 9c fe ff
	ff 00		 cmp	 DWORD PTR _poly$8[ebp], 0
  00b43	0f 84 c6 01 00
	00		 je	 $LN30@render_con

; 3090 : 							{
; 3091 : 			
; 3092 : 								if ( triangle1_outcode )

  00b49	83 bd b8 fe ff
	ff 00		 cmp	 DWORD PTR _triangle1_outcode$15[ebp], 0
  00b50	74 19		 je	 SHORT $LN29@render_con

; 3093 : 									poly = clip_contour_polygon ( poly, triangle1_outcode );

  00b52	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _triangle1_outcode$15[ebp]
  00b58	50		 push	 eax
  00b59	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _poly$8[ebp]
  00b5f	51		 push	 ecx
  00b60	e8 00 00 00 00	 call	 ?clip_contour_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_contour_polygon
  00b65	89 85 9c fe ff
	ff		 mov	 DWORD PTR _poly$8[ebp], eax
$LN29@render_con:

; 3094 : 						
; 3095 : 								if ( poly )

  00b6b	83 bd 9c fe ff
	ff 00		 cmp	 DWORD PTR _poly$8[ebp], 0
  00b72	0f 84 97 01 00
	00		 je	 $LN30@render_con

; 3096 : 								{
; 3097 : 									vertex* new_v;
; 3098 : 
; 3099 : 									for (new_v = poly; new_v; new_v = new_v->next_vertex)

  00b78	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _poly$8[ebp]
  00b7e	89 85 98 fe ff
	ff		 mov	 DWORD PTR _new_v$7[ebp], eax
  00b84	eb 0f		 jmp	 SHORT $LN7@render_con
$LN5@render_con:
  00b86	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _new_v$7[ebp]
  00b8c	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00b8f	89 8d 98 fe ff
	ff		 mov	 DWORD PTR _new_v$7[ebp], ecx
$LN7@render_con:
  00b95	83 bd 98 fe ff
	ff 00		 cmp	 DWORD PTR _new_v$7[ebp], 0
  00b9c	0f 84 5d 01 00
	00		 je	 $LN6@render_con

; 3100 : 									{
; 3101 : 										float delta_i, delta_j;
; 3102 : 
; 3103 : 										if (new_v == &vertices[0]
; 3104 : 											|| new_v == &vertices[1]
; 3105 : 											|| new_v == &vertices[2]
; 3106 : 											|| new_v == &vertices[3])

  00ba2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ba7	6b c8 00	 imul	 ecx, eax, 0
  00baa	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00bad	39 8d 98 fe ff
	ff		 cmp	 DWORD PTR _new_v$7[ebp], ecx
  00bb3	74 38		 je	 SHORT $LN32@render_con
  00bb5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00bba	c1 e0 00	 shl	 eax, 0
  00bbd	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00bc0	39 85 98 fe ff
	ff		 cmp	 DWORD PTR _new_v$7[ebp], eax
  00bc6	74 25		 je	 SHORT $LN32@render_con
  00bc8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00bcd	d1 e0		 shl	 eax, 1
  00bcf	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00bd2	39 85 98 fe ff
	ff		 cmp	 DWORD PTR _new_v$7[ebp], eax
  00bd8	74 13		 je	 SHORT $LN32@render_con
  00bda	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00bdf	6b c8 03	 imul	 ecx, eax, 3
  00be2	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00be5	39 8d 98 fe ff
	ff		 cmp	 DWORD PTR _new_v$7[ebp], ecx
  00beb	75 02		 jne	 SHORT $LN31@render_con
$LN32@render_con:

; 3107 : 										{
; 3108 : 											continue;

  00bed	eb 97		 jmp	 SHORT $LN5@render_con
$LN31@render_con:

; 3109 : 										}
; 3110 : 										
; 3111 : 										delta_i = (new_v->i - vertices[0].i) * i_scale;

  00bef	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00bf4	6b c8 00	 imul	 ecx, eax, 0
  00bf7	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR _new_v$7[ebp]
  00bfd	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  00c00	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  00c05	f3 0f 5c 44 08
	10		 subss	 xmm0, DWORD PTR [eax+ecx+16]
  00c0b	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _i_scale$21[ebp]
  00c10	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _delta_i$6[ebp], xmm0

; 3112 : 										delta_j = (new_v->j - vertices[0].j) * j_scale;

  00c18	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00c1d	6b c8 00	 imul	 ecx, eax, 0
  00c20	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR _new_v$7[ebp]
  00c26	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  00c29	f3 0f 10 42 14	 movss	 xmm0, DWORD PTR [edx+20]
  00c2e	f3 0f 5c 44 08
	14		 subss	 xmm0, DWORD PTR [eax+ecx+20]
  00c34	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _j_scale$20[ebp]
  00c39	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _delta_j$5[ebp], xmm0

; 3113 : 
; 3114 : 										// weighted average of corner xs (weighted according to distance to each corner
; 3115 : 										new_v->x = ((1 - delta_i) * (1 - delta_j) * vertices[0].x) + 

  00c41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c49	f3 0f 5c 85 94
	fe ff ff	 subss	 xmm0, DWORD PTR _delta_i$6[ebp]
  00c51	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00c59	f3 0f 5c 8d 90
	fe ff ff	 subss	 xmm1, DWORD PTR _delta_j$5[ebp]
  00c61	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00c65	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00c6a	6b c8 00	 imul	 ecx, eax, 0
  00c6d	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00c70	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  00c75	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00c7d	f3 0f 5c 8d 90
	fe ff ff	 subss	 xmm1, DWORD PTR _delta_j$5[ebp]
  00c85	f3 0f 59 8d 94
	fe ff ff	 mulss	 xmm1, DWORD PTR _delta_i$6[ebp]
  00c8d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00c92	c1 e0 00	 shl	 eax, 0
  00c95	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  00c98	f3 0f 59 0c 01	 mulss	 xmm1, DWORD PTR [ecx+eax]
  00c9d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ca1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00ca9	f3 0f 5c 8d 94
	fe ff ff	 subss	 xmm1, DWORD PTR _delta_i$6[ebp]
  00cb1	f3 0f 59 8d 90
	fe ff ff	 mulss	 xmm1, DWORD PTR _delta_j$5[ebp]
  00cb9	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00cbe	d1 e2		 shl	 edx, 1
  00cc0	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  00cc3	f3 0f 59 0c 10	 mulss	 xmm1, DWORD PTR [eax+edx]
  00cc8	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ccc	f3 0f 10 8d 94
	fe ff ff	 movss	 xmm1, DWORD PTR _delta_i$6[ebp]
  00cd4	f3 0f 59 8d 90
	fe ff ff	 mulss	 xmm1, DWORD PTR _delta_j$5[ebp]
  00cdc	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00ce1	6b d1 03	 imul	 edx, ecx, 3
  00ce4	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  00ce7	f3 0f 59 0c 10	 mulss	 xmm1, DWORD PTR [eax+edx]
  00cec	f3 0f 58 c1	 addss	 xmm0, xmm1
  00cf0	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _new_v$7[ebp]
  00cf6	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 3116 : 												   (delta_i       * (1 - delta_j) * vertices[1].x) +
; 3117 : 												   ((1 - delta_i) * delta_j       * vertices[2].x) +
; 3118 : 												   (delta_i       * delta_j       * vertices[3].x);
; 3119 : 									}

  00cfa	e9 87 fe ff ff	 jmp	 $LN5@render_con
$LN6@render_con:

; 3120 : 
; 3121 : 									render_shaded_contour_terrain_poly ( poly, contour_colour);

  00cff	8b 45 f8	 mov	 eax, DWORD PTR _contour_colour$[ebp]
  00d02	50		 push	 eax
  00d03	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _poly$8[ebp]
  00d09	51		 push	 ecx
  00d0a	e8 00 00 00 00	 call	 ?render_shaded_contour_terrain_poly@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; render_shaded_contour_terrain_poly
$LN30@render_con:

; 3122 : 								}
; 3123 : 							}
; 3124 : 						}
; 3125 : 					}
; 3126 : 			
; 3127 : 					if ( triangle2_outcode2 == 0 )

  00d0f	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR _triangle2_outcode2$12[ebp], 0
  00d16	0f 85 5e 03 00
	00		 jne	 $LN39@render_con

; 3128 : 					{
; 3129 : 			
; 3130 : 						vertex
; 3131 : 							*poly;
; 3132 : 			
; 3133 : 						vertices[2].next_vertex = &vertices[1];

  00d1c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00d21	c1 e0 00	 shl	 eax, 0
  00d24	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00d27	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00d2c	d1 e1		 shl	 ecx, 1
  00d2e	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00d31	89 44 0a 28	 mov	 DWORD PTR [edx+ecx+40], eax

; 3134 : 						vertices[1].next_vertex = &vertices[3];

  00d35	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00d3a	6b c8 03	 imul	 ecx, eax, 3
  00d3d	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00d40	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00d45	c1 e2 00	 shl	 edx, 0
  00d48	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  00d4b	89 4c 10 28	 mov	 DWORD PTR [eax+edx+40], ecx

; 3135 : 						vertices[3].next_vertex = NULL;

  00d4f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00d54	6b c8 03	 imul	 ecx, eax, 3
  00d57	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00d5a	c7 44 0a 28 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+40], 0

; 3136 : 			
; 3137 : 						poly = &vertices[2];

  00d62	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00d67	d1 e0		 shl	 eax, 1
  00d69	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00d6c	89 85 8c fe ff
	ff		 mov	 DWORD PTR _poly$4[ebp], eax

; 3138 : 			
; 3139 : 						clip_3d_coord = 0;

  00d72	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 3140 : 			
; 3141 : 						if ( triangle2_outcode & CLIP_HITHER )

  00d7c	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _triangle2_outcode$13[ebp]
  00d82	83 e0 20	 and	 eax, 32			; 00000020H
  00d85	0f 84 eb 00 00
	00		 je	 $LN34@render_con

; 3142 : 						{
; 3143 : 			
; 3144 : 							poly = bottom_clip_contour_polygon ( poly, &triangle2_outcode );

  00d8b	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _triangle2_outcode$13[ebp]
  00d91	50		 push	 eax
  00d92	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR _poly$4[ebp]
  00d98	51		 push	 ecx
  00d99	e8 00 00 00 00	 call	 ?bottom_clip_contour_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; bottom_clip_contour_polygon
  00d9e	89 85 8c fe ff
	ff		 mov	 DWORD PTR _poly$4[ebp], eax

; 3145 : 		
; 3146 : 							contour_line_vertices[line_vertex_index].i = clip_3d_crds[0].i;

  00da4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00da9	6b c8 00	 imul	 ecx, eax, 0
  00dac	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _line_vertex_index$18[ebp]
  00db2	c1 e2 06	 shl	 edx, 6
  00db5	8b 81 10 00 00
	00		 mov	 eax, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+16]
  00dbb	89 84 15 d8 fe
	ff ff		 mov	 DWORD PTR _contour_line_vertices$19[ebp+edx+16], eax

; 3147 : 							contour_line_vertices[line_vertex_index].j = clip_3d_crds[0].j;

  00dc2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00dc7	6b c8 00	 imul	 ecx, eax, 0
  00dca	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _line_vertex_index$18[ebp]
  00dd0	c1 e2 06	 shl	 edx, 6
  00dd3	8b 81 14 00 00
	00		 mov	 eax, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+20]
  00dd9	89 84 15 dc fe
	ff ff		 mov	 DWORD PTR _contour_line_vertices$19[ebp+edx+20], eax

; 3148 : 							contour_line_vertices[line_vertex_index].outcode = clip_3d_crds[0].outcode;

  00de0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00de5	6b c8 00	 imul	 ecx, eax, 0
  00de8	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _line_vertex_index$18[ebp]
  00dee	c1 e2 06	 shl	 edx, 6
  00df1	8a 81 2c 00 00
	00		 mov	 al, BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[ecx+44]
  00df7	88 84 15 f4 fe
	ff ff		 mov	 BYTE PTR _contour_line_vertices$19[ebp+edx+44], al

; 3149 : 		
; 3150 : 							line_vertex_index++;

  00dfe	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _line_vertex_index$18[ebp]
  00e04	83 c0 01	 add	 eax, 1
  00e07	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _line_vertex_index$18[ebp], eax

; 3151 : 		
; 3152 : 							contour_line_vertices[line_vertex_index].i = clip_3d_crds[1].i;

  00e0d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e12	c1 e0 00	 shl	 eax, 0
  00e15	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _line_vertex_index$18[ebp]
  00e1b	c1 e1 06	 shl	 ecx, 6
  00e1e	8b 90 10 00 00
	00		 mov	 edx, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+16]
  00e24	89 94 0d d8 fe
	ff ff		 mov	 DWORD PTR _contour_line_vertices$19[ebp+ecx+16], edx

; 3153 : 							contour_line_vertices[line_vertex_index].j = clip_3d_crds[1].j;

  00e2b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e30	c1 e0 00	 shl	 eax, 0
  00e33	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _line_vertex_index$18[ebp]
  00e39	c1 e1 06	 shl	 ecx, 6
  00e3c	8b 90 14 00 00
	00		 mov	 edx, DWORD PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+20]
  00e42	89 94 0d dc fe
	ff ff		 mov	 DWORD PTR _contour_line_vertices$19[ebp+ecx+20], edx

; 3154 : 							contour_line_vertices[line_vertex_index].outcode = clip_3d_crds[1].outcode;

  00e49	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e4e	c1 e0 00	 shl	 eax, 0
  00e51	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _line_vertex_index$18[ebp]
  00e57	c1 e1 06	 shl	 ecx, 6
  00e5a	8a 90 2c 00 00
	00		 mov	 dl, BYTE PTR ?clip_3d_crds@@3PAUVERTEX@@A[eax+44]
  00e60	88 94 0d f4 fe
	ff ff		 mov	 BYTE PTR _contour_line_vertices$19[ebp+ecx+44], dl

; 3155 : 		
; 3156 : 							line_vertex_index++;

  00e67	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _line_vertex_index$18[ebp]
  00e6d	83 c0 01	 add	 eax, 1
  00e70	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _line_vertex_index$18[ebp], eax
$LN34@render_con:

; 3157 : 						}
; 3158 : 			
; 3159 : 						if ( poly )

  00e76	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR _poly$4[ebp], 0
  00e7d	0f 84 f7 01 00
	00		 je	 $LN39@render_con

; 3160 : 						{
; 3161 : 			
; 3162 : 							if ( triangle2_outcode & CLIP_YONDER )

  00e83	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _triangle2_outcode$13[ebp]
  00e89	83 e0 10	 and	 eax, 16			; 00000010H
  00e8c	74 19		 je	 SHORT $LN36@render_con

; 3163 : 							{
; 3164 : 			
; 3165 : 								poly = top_clip_contour_polygon ( poly, &triangle2_outcode );

  00e8e	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _triangle2_outcode$13[ebp]
  00e94	50		 push	 eax
  00e95	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR _poly$4[ebp]
  00e9b	51		 push	 ecx
  00e9c	e8 00 00 00 00	 call	 ?top_clip_contour_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; top_clip_contour_polygon
  00ea1	89 85 8c fe ff
	ff		 mov	 DWORD PTR _poly$4[ebp], eax
$LN36@render_con:

; 3166 : 							}
; 3167 : 			
; 3168 : 							if ( poly )

  00ea7	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR _poly$4[ebp], 0
  00eae	0f 84 c6 01 00
	00		 je	 $LN39@render_con

; 3169 : 							{
; 3170 : 			
; 3171 : 								if ( triangle2_outcode )

  00eb4	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR _triangle2_outcode$13[ebp], 0
  00ebb	74 19		 je	 SHORT $LN38@render_con

; 3172 : 								{
; 3173 : 						
; 3174 : 									poly = clip_contour_polygon ( poly, triangle2_outcode );

  00ebd	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _triangle2_outcode$13[ebp]
  00ec3	50		 push	 eax
  00ec4	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR _poly$4[ebp]
  00eca	51		 push	 ecx
  00ecb	e8 00 00 00 00	 call	 ?clip_contour_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_contour_polygon
  00ed0	89 85 8c fe ff
	ff		 mov	 DWORD PTR _poly$4[ebp], eax
$LN38@render_con:

; 3175 : 								}
; 3176 : 						
; 3177 : 								if ( poly )

  00ed6	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR _poly$4[ebp], 0
  00edd	0f 84 97 01 00
	00		 je	 $LN39@render_con

; 3178 : 								{
; 3179 : 									vertex* new_v;
; 3180 : 									for (new_v = poly; new_v; new_v = new_v->next_vertex)

  00ee3	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _poly$4[ebp]
  00ee9	89 85 88 fe ff
	ff		 mov	 DWORD PTR _new_v$3[ebp], eax
  00eef	eb 0f		 jmp	 SHORT $LN10@render_con
$LN8@render_con:
  00ef1	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR _new_v$3[ebp]
  00ef7	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00efa	89 8d 88 fe ff
	ff		 mov	 DWORD PTR _new_v$3[ebp], ecx
$LN10@render_con:
  00f00	83 bd 88 fe ff
	ff 00		 cmp	 DWORD PTR _new_v$3[ebp], 0
  00f07	0f 84 5d 01 00
	00		 je	 $LN9@render_con

; 3181 : 									{
; 3182 : 										float delta_i, delta_j;
; 3183 : 
; 3184 : 										if (new_v == &vertices[0]
; 3185 : 											|| new_v == &vertices[1]
; 3186 : 											|| new_v == &vertices[2]
; 3187 : 											|| new_v == &vertices[3])

  00f0d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f12	6b c8 00	 imul	 ecx, eax, 0
  00f15	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00f18	39 8d 88 fe ff
	ff		 cmp	 DWORD PTR _new_v$3[ebp], ecx
  00f1e	74 38		 je	 SHORT $LN41@render_con
  00f20	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f25	c1 e0 00	 shl	 eax, 0
  00f28	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00f2b	39 85 88 fe ff
	ff		 cmp	 DWORD PTR _new_v$3[ebp], eax
  00f31	74 25		 je	 SHORT $LN41@render_con
  00f33	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f38	d1 e0		 shl	 eax, 1
  00f3a	03 45 08	 add	 eax, DWORD PTR _vertices$[ebp]
  00f3d	39 85 88 fe ff
	ff		 cmp	 DWORD PTR _new_v$3[ebp], eax
  00f43	74 13		 je	 SHORT $LN41@render_con
  00f45	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f4a	6b c8 03	 imul	 ecx, eax, 3
  00f4d	03 4d 08	 add	 ecx, DWORD PTR _vertices$[ebp]
  00f50	39 8d 88 fe ff
	ff		 cmp	 DWORD PTR _new_v$3[ebp], ecx
  00f56	75 02		 jne	 SHORT $LN40@render_con
$LN41@render_con:

; 3188 : 										{
; 3189 : 											continue;

  00f58	eb 97		 jmp	 SHORT $LN8@render_con
$LN40@render_con:

; 3190 : 										}
; 3191 : 										
; 3192 : 										delta_i = (new_v->i - vertices[0].i) * i_scale;

  00f5a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f5f	6b c8 00	 imul	 ecx, eax, 0
  00f62	8b 95 88 fe ff
	ff		 mov	 edx, DWORD PTR _new_v$3[ebp]
  00f68	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  00f6b	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  00f70	f3 0f 5c 44 08
	10		 subss	 xmm0, DWORD PTR [eax+ecx+16]
  00f76	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _i_scale$21[ebp]
  00f7b	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR _delta_i$2[ebp], xmm0

; 3193 : 										delta_j = (new_v->j - vertices[0].j) * j_scale;

  00f83	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f88	6b c8 00	 imul	 ecx, eax, 0
  00f8b	8b 95 88 fe ff
	ff		 mov	 edx, DWORD PTR _new_v$3[ebp]
  00f91	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  00f94	f3 0f 10 42 14	 movss	 xmm0, DWORD PTR [edx+20]
  00f99	f3 0f 5c 44 08
	14		 subss	 xmm0, DWORD PTR [eax+ecx+20]
  00f9f	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _j_scale$20[ebp]
  00fa4	f3 0f 11 85 80
	fe ff ff	 movss	 DWORD PTR _delta_j$1[ebp], xmm0

; 3194 : 
; 3195 : //										ASSERT(delta_i >= 0.0 && delta_i <= 1.0);
; 3196 : //										ASSERT(delta_j >= 0.0 && delta_j <= 1.0);
; 3197 : 
; 3198 : 										// weighted average of corner xs (weighted according to distance to each corner
; 3199 : 										new_v->x = ((1 - delta_i) * (1 - delta_j) * vertices[0].x) + 

  00fac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00fb4	f3 0f 5c 85 84
	fe ff ff	 subss	 xmm0, DWORD PTR _delta_i$2[ebp]
  00fbc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00fc4	f3 0f 5c 8d 80
	fe ff ff	 subss	 xmm1, DWORD PTR _delta_j$1[ebp]
  00fcc	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00fd0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fd5	6b c8 00	 imul	 ecx, eax, 0
  00fd8	8b 55 08	 mov	 edx, DWORD PTR _vertices$[ebp]
  00fdb	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  00fe0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00fe8	f3 0f 5c 8d 80
	fe ff ff	 subss	 xmm1, DWORD PTR _delta_j$1[ebp]
  00ff0	f3 0f 59 8d 84
	fe ff ff	 mulss	 xmm1, DWORD PTR _delta_i$2[ebp]
  00ff8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ffd	c1 e0 00	 shl	 eax, 0
  01000	8b 4d 08	 mov	 ecx, DWORD PTR _vertices$[ebp]
  01003	f3 0f 59 0c 01	 mulss	 xmm1, DWORD PTR [ecx+eax]
  01008	f3 0f 58 c1	 addss	 xmm0, xmm1
  0100c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  01014	f3 0f 5c 8d 84
	fe ff ff	 subss	 xmm1, DWORD PTR _delta_i$2[ebp]
  0101c	f3 0f 59 8d 80
	fe ff ff	 mulss	 xmm1, DWORD PTR _delta_j$1[ebp]
  01024	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  01029	d1 e2		 shl	 edx, 1
  0102b	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  0102e	f3 0f 59 0c 10	 mulss	 xmm1, DWORD PTR [eax+edx]
  01033	f3 0f 58 c1	 addss	 xmm0, xmm1
  01037	f3 0f 10 8d 84
	fe ff ff	 movss	 xmm1, DWORD PTR _delta_i$2[ebp]
  0103f	f3 0f 59 8d 80
	fe ff ff	 mulss	 xmm1, DWORD PTR _delta_j$1[ebp]
  01047	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0104c	6b d1 03	 imul	 edx, ecx, 3
  0104f	8b 45 08	 mov	 eax, DWORD PTR _vertices$[ebp]
  01052	f3 0f 59 0c 10	 mulss	 xmm1, DWORD PTR [eax+edx]
  01057	f3 0f 58 c1	 addss	 xmm0, xmm1
  0105b	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR _new_v$3[ebp]
  01061	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 3200 : 												   (delta_i       * (1 - delta_j) * vertices[1].x) +
; 3201 : 												   ((1 - delta_i) * delta_j       * vertices[2].x) +
; 3202 : 												   (delta_i       * delta_j       * vertices[3].x);
; 3203 : 									}

  01065	e9 87 fe ff ff	 jmp	 $LN8@render_con
$LN9@render_con:

; 3204 : 
; 3205 : 									render_shaded_contour_terrain_poly ( poly, contour_colour);

  0106a	8b 45 f8	 mov	 eax, DWORD PTR _contour_colour$[ebp]
  0106d	50		 push	 eax
  0106e	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR _poly$4[ebp]
  01074	51		 push	 ecx
  01075	e8 00 00 00 00	 call	 ?render_shaded_contour_terrain_poly@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; render_shaded_contour_terrain_poly
$LN39@render_con:

; 3206 : 								}
; 3207 : 							}
; 3208 : 						}
; 3209 : 					}
; 3210 : 	
; 3211 : 					//
; 3212 : 					// Draw the contour lines if there are any
; 3213 : 					//
; 3214 : 
; 3215 : 					if ( ( line_vertex_index > 0 ) && ( terrain_2d_map_contour_lines_drawn ) )

  0107a	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _line_vertex_index$18[ebp], 0
  01081	7e 43		 jle	 SHORT $LN43@render_con
  01083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_2d_map_contour_lines_drawn@@3HA, 0 ; terrain_2d_map_contour_lines_drawn
  0108a	74 3a		 je	 SHORT $LN43@render_con

; 3216 : 					{
; 3217 : 						draw_contour_line ( &contour_line_vertices[0], contour_line_colour );

  0108c	8b 45 f4	 mov	 eax, DWORD PTR _contour_line_colour$[ebp]
  0108f	50		 push	 eax
  01090	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  01095	6b d1 00	 imul	 edx, ecx, 0
  01098	8d 84 15 c8 fe
	ff ff		 lea	 eax, DWORD PTR _contour_line_vertices$19[ebp+edx]
  0109f	50		 push	 eax
  010a0	e8 00 00 00 00	 call	 ?draw_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_contour_line

; 3218 : 		
; 3219 : 						if ( line_vertex_index > 2 )

  010a5	83 bd c4 fe ff
	ff 02		 cmp	 DWORD PTR _line_vertex_index$18[ebp], 2
  010ac	7e 18		 jle	 SHORT $LN43@render_con

; 3220 : 						{
; 3221 : 		
; 3222 : 							draw_contour_line ( &contour_line_vertices[2], contour_line_colour );

  010ae	8b 45 f4	 mov	 eax, DWORD PTR _contour_line_colour$[ebp]
  010b1	50		 push	 eax
  010b2	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  010b7	d1 e1		 shl	 ecx, 1
  010b9	8d 94 0d c8 fe
	ff ff		 lea	 edx, DWORD PTR _contour_line_vertices$19[ebp+ecx]
  010c0	52		 push	 edx
  010c1	e8 00 00 00 00	 call	 ?draw_contour_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_contour_line
$LN43@render_con:

; 3223 : 						}
; 3224 : 					}
; 3225 : 				}
; 3226 : 			}
; 3227 : 		}

  010c6	e9 35 f3 ff ff	 jmp	 $LN2@render_con
$LN3@render_con:

; 3228 : 	}
; 3229 : }

  010cb	5f		 pop	 edi
  010cc	5e		 pop	 esi
  010cd	5b		 pop	 ebx
  010ce	8b e5		 mov	 esp, ebp
  010d0	5d		 pop	 ebp
  010d1	c2 0c 00	 ret	 12			; 0000000cH
?render_contour_terrain_quad@@YGXPAUVERTEX@@HH@Z ENDP	; render_contour_terrain_quad
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?generate_contour_outcode@@YGEMM@Z
_TEXT	SEGMENT
_iymin$ = -32						; size = 4
_iymax$ = -28						; size = 4
_ixmin$ = -24						; size = 4
_ixmax$ = -20						; size = 4
_oymin$ = -16						; size = 4
_oymax$ = -12						; size = 4
_oxmin$ = -8						; size = 4
_oxmax$ = -4						; size = 4
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?generate_contour_outcode@@YGEMM@Z PROC			; generate_contour_outcode, COMDAT

; 3677 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3678 : 
; 3679 : 	float
; 3680 : 		oxmax,
; 3681 : 		oxmin,
; 3682 : 		oymax,
; 3683 : 		oymin;
; 3684 : 	
; 3685 : 	unsigned int
; 3686 : 		ixmax,
; 3687 : 		ixmin,
; 3688 : 		iymax,
; 3689 : 		iymin;
; 3690 : 
; 3691 : 	oxmax = active_viewport.x_max - i;

  00009	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00011	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _i$[ebp]
  00016	f3 0f 11 45 fc	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 3692 : 	oxmin = i - active_viewport.x_min;

  0001b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _i$[ebp]
  00020	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00028	f3 0f 11 45 f8	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 3693 : 	oymax = active_viewport.y_max - j;

  0002d	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00035	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _j$[ebp]
  0003a	f3 0f 11 45 f4	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 3694 : 	oymin = j - active_viewport.y_min;

  0003f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _j$[ebp]
  00044	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0004c	f3 0f 11 45 f0	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 3695 : 
; 3696 : 	ixmax = *( ( unsigned int * ) &oxmax );

  00051	8b 45 fc	 mov	 eax, DWORD PTR _oxmax$[ebp]
  00054	89 45 ec	 mov	 DWORD PTR _ixmax$[ebp], eax

; 3697 : 	ixmin = *( ( unsigned int * ) &oxmin );

  00057	8b 45 f8	 mov	 eax, DWORD PTR _oxmin$[ebp]
  0005a	89 45 e8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 3698 : 	iymax = *( ( unsigned int * ) &oymax );

  0005d	8b 45 f4	 mov	 eax, DWORD PTR _oymax$[ebp]
  00060	89 45 e4	 mov	 DWORD PTR _iymax$[ebp], eax

; 3699 : 	iymin = *( ( unsigned int * ) &oymin );

  00063	8b 45 f0	 mov	 eax, DWORD PTR _oymin$[ebp]
  00066	89 45 e0	 mov	 DWORD PTR _iymin$[ebp], eax

; 3700 : 
; 3701 : 	ixmin >>= 31;

  00069	8b 45 e8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0006c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006f	89 45 e8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 3702 : 	iymin &= 0x80000000;

  00072	8b 45 e0	 mov	 eax, DWORD PTR _iymin$[ebp]
  00075	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0007a	89 45 e0	 mov	 DWORD PTR _iymin$[ebp], eax

; 3703 : 	ixmax >>= 29;

  0007d	8b 45 ec	 mov	 eax, DWORD PTR _ixmax$[ebp]
  00080	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  00083	89 45 ec	 mov	 DWORD PTR _ixmax$[ebp], eax

; 3704 : 	iymax &= 0x80000000;

  00086	8b 45 e4	 mov	 eax, DWORD PTR _iymax$[ebp]
  00089	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0008e	89 45 e4	 mov	 DWORD PTR _iymax$[ebp], eax

; 3705 : 	iymin >>= 30;

  00091	8b 45 e0	 mov	 eax, DWORD PTR _iymin$[ebp]
  00094	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  00097	89 45 e0	 mov	 DWORD PTR _iymin$[ebp], eax

; 3706 : 	ixmin &= 0x00000001;

  0009a	8b 45 e8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0009d	83 e0 01	 and	 eax, 1
  000a0	89 45 e8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 3707 : 	iymax >>= 28;

  000a3	8b 45 e4	 mov	 eax, DWORD PTR _iymax$[ebp]
  000a6	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  000a9	89 45 e4	 mov	 DWORD PTR _iymax$[ebp], eax

; 3708 : 	ixmax &= 0x00000004;

  000ac	8b 45 ec	 mov	 eax, DWORD PTR _ixmax$[ebp]
  000af	83 e0 04	 and	 eax, 4
  000b2	89 45 ec	 mov	 DWORD PTR _ixmax$[ebp], eax

; 3709 : 	ixmin |= iymin;

  000b5	8b 45 e8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  000b8	0b 45 e0	 or	 eax, DWORD PTR _iymin$[ebp]
  000bb	89 45 e8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 3710 : 	ixmax |= iymax;

  000be	8b 45 ec	 mov	 eax, DWORD PTR _ixmax$[ebp]
  000c1	0b 45 e4	 or	 eax, DWORD PTR _iymax$[ebp]
  000c4	89 45 ec	 mov	 DWORD PTR _ixmax$[ebp], eax

; 3711 : 
; 3712 : 	return ( ixmin | ixmax );

  000c7	8b 45 e8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  000ca	0b 45 ec	 or	 eax, DWORD PTR _ixmax$[ebp]

; 3713 : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8
?generate_contour_outcode@@YGEMM@Z ENDP			; generate_contour_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?get_simple_elevation_height@@YGMHH@Z
_TEXT	SEGMENT
tv72 = -68						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?get_simple_elevation_height@@YGMHH@Z PROC		; get_simple_elevation_height, COMDAT

; 3667 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3668 : 
; 3669 : 	return ( terrain_3d_simple_elevation_grid[(z*terrain_3d_simple_elevation_width)+x] );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _z$[ebp]
  0000c	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  00013	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_simple_elevation_grid@@3PAMA ; terrain_3d_simple_elevation_grid
  0001c	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  00021	f3 0f 11 45 bc	 movss	 DWORD PTR tv72[ebp], xmm0
  00026	d9 45 bc	 fld	 DWORD PTR tv72[ebp]

; 3670 : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?get_simple_elevation_height@@YGMHH@Z ENDP		; get_simple_elevation_height
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z
_TEXT	SEGMENT
_fy$ = -8						; size = 4
_fx$ = -4						; size = 4
_position$ = 8						; size = 4
_v$ = 12						; size = 4
?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z PROC ; generate_world_position_vertex, COMDAT

; 3720 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3721 : 
; 3722 : 	float
; 3723 : 		fx,
; 3724 : 		fy;
; 3725 : 
; 3726 : 	fx = position->x - terrain_2d_map_world_xcentre;

  00009	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  0000c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00010	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_xcentre@@3MA
  00018	f3 0f 11 45 fc	 movss	 DWORD PTR _fx$[ebp], xmm0

; 3727 : 	fy = position->z - terrain_2d_map_world_zcentre;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  00020	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00025	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_zcentre@@3MA
  0002d	f3 0f 11 45 f8	 movss	 DWORD PTR _fy$[ebp], xmm0

; 3728 : 	
; 3729 : 	v->i = ( fx * terrain_2d_map_screen_xscale ) + terrain_2d_map_screen_xcentre;

  00032	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00037	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xscale@@3MA
  0003f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA
  00047	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0004a	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 3730 : 	v->j = ( fy * terrain_2d_map_screen_yscale ) + terrain_2d_map_screen_ycentre;

  0004f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00054	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_yscale@@3MA
  0005c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA
  00064	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00067	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 3731 : 
; 3732 : 	v->outcode = generate_contour_outcode ( v->i, v->j );

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0006f	51		 push	 ecx
  00070	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0007d	51		 push	 ecx
  0007e	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	e8 00 00 00 00	 call	 ?generate_contour_outcode@@YGEMM@Z ; generate_contour_outcode
  0008d	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00090	88 42 2c	 mov	 BYTE PTR [edx+44], al

; 3733 : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
?generate_world_position_vertex@@YGXPAUVEC3D@@PAUVERTEX@@@Z ENDP ; generate_world_position_vertex
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?generate_simple_elevation_vertex@@YGXHHPAUVERTEX@@@Z
_TEXT	SEGMENT
_fy$ = -8						; size = 4
_fx$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
_v$ = 16						; size = 4
?generate_simple_elevation_vertex@@YGXHHPAUVERTEX@@@Z PROC ; generate_simple_elevation_vertex, COMDAT

; 3649 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3650 : 
; 3651 : 	float
; 3652 : 		fx,
; 3653 : 		fy;
; 3654 : 
; 3655 : 	fx = ( x * terrain_3d_simple_elevation_x_grid_size ) - terrain_2d_map_world_xcentre;

  00009	f3 0f 2a 45 08	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  0000e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  00016	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_xcentre@@3MA
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _fx$[ebp], xmm0

; 3656 : 	fy = ( z * terrain_3d_simple_elevation_z_grid_size ) - terrain_2d_map_world_zcentre;

  00023	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _z$[ebp]
  00028	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size@@3MA
  00030	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_zcentre@@3MA
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _fy$[ebp], xmm0

; 3657 : 	
; 3658 : 	v->i = ( fx * terrain_2d_map_screen_xscale ) + terrain_2d_map_screen_xcentre;

  0003d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00042	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xscale@@3MA
  0004a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA
  00052	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00055	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 3659 : 	v->j = ( fy * terrain_2d_map_screen_yscale ) + terrain_2d_map_screen_ycentre;

  0005a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0005f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_yscale@@3MA
  00067	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA
  0006f	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00072	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 3660 : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
?generate_simple_elevation_vertex@@YGXHHPAUVERTEX@@@Z ENDP ; generate_simple_elevation_vertex
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?render_contour_triangle_database@@YGXHPAUCONTOUR_LAKE@@UREAL_COLOUR@@@Z
_TEXT	SEGMENT
_poly$1 = -248						; size = 4
_outcode2$2 = -244					; size = 4
_outcode$3 = -240					; size = 4
_vertices$4 = -236					; size = 192
_points$5 = -44						; size = 4
_triangle$6 = -40					; size = 4
_outcode2$7 = -36					; size = 4
_outcode1$8 = -32					; size = 4
_outcode$9 = -28					; size = 4
_zmax$ = -24						; size = 4
_zmin$ = -20						; size = 4
_xmax$ = -16						; size = 4
_xmin$ = -12						; size = 4
_specular$ = -8						; size = 4
_count$ = -4						; size = 4
_number_of_triangle_sets$ = 8				; size = 4
_lakes$ = 12						; size = 4
_lake_colour$ = 16					; size = 4
?render_contour_triangle_database@@YGXHPAUCONTOUR_LAKE@@UREAL_COLOUR@@@Z PROC ; render_contour_triangle_database, COMDAT

; 2682 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2683 : 
; 2684 : 	int
; 2685 : 		count;
; 2686 : 
; 2687 : 	real_colour
; 2688 : 		specular;
; 2689 : 
; 2690 : 	float
; 2691 : 		xmin,
; 2692 : 		xmax,
; 2693 : 		zmin,
; 2694 : 		zmax;
; 2695 : 
; 2696 : 	xmin = min ( terrain_2d_map_world_xmin, terrain_2d_map_world_xmax );

  0000c	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmax@@3MA
  00011	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmin@@3MA
  00016	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0001b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0001f	f3 0f 11 45 f4	 movss	 DWORD PTR _xmin$[ebp], xmm0

; 2697 : 	xmax = max ( terrain_2d_map_world_xmin, terrain_2d_map_world_xmax );

  00024	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmax@@3MA
  00029	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_xmin@@3MA
  0002e	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00033	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00037	f3 0f 11 45 f0	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 2698 : 
; 2699 : 	zmin = min ( terrain_2d_map_world_zmin, terrain_2d_map_world_zmax );

  0003c	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmax@@3MA
  00041	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmin@@3MA
  00046	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0004b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004f	f3 0f 11 45 ec	 movss	 DWORD PTR _zmin$[ebp], xmm0

; 2700 : 	zmax = max ( terrain_2d_map_world_zmin, terrain_2d_map_world_zmax );

  00054	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmax@@3MA
  00059	68 00 00 00 00	 push	 OFFSET ?terrain_2d_map_world_zmin@@3MA
  0005e	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00063	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00067	f3 0f 11 45 e8	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 2701 : 
; 2702 : 	specular.red = 0;

  0006c	c6 45 fa 00	 mov	 BYTE PTR _specular$[ebp+2], 0

; 2703 : 	specular.green = 0;

  00070	c6 45 f9 00	 mov	 BYTE PTR _specular$[ebp+1], 0

; 2704 : 	specular.blue = 0;

  00074	c6 45 f8 00	 mov	 BYTE PTR _specular$[ebp], 0

; 2705 : 	specular.alpha = 255;

  00078	c6 45 fb ff	 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 2706 : 
; 2707 : 	for ( count = 0; count < number_of_triangle_sets; count++ )

  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00083	eb 09		 jmp	 SHORT $LN4@render_con
$LN2@render_con:
  00085	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00088	83 c0 01	 add	 eax, 1
  0008b	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@render_con:
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00091	3b 45 08	 cmp	 eax, DWORD PTR _number_of_triangle_sets$[ebp]
  00094	0f 8d 4b 05 00
	00		 jge	 $LN3@render_con

; 2708 : 	{
; 2709 : 
; 2710 : 		int
; 2711 : 			outcode,
; 2712 : 			outcode1,
; 2713 : 			outcode2,
; 2714 : 			triangle;
; 2715 : 
; 2716 : 		vec3d
; 2717 : 			*points;
; 2718 : 
; 2719 : 		vertex
; 2720 : 			vertices[3];
; 2721 : 
; 2722 : 		points = lakes[count].triangle_points;

  0009a	6b 45 fc 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  0009e	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  000a1	8b 54 01 14	 mov	 edx, DWORD PTR [ecx+eax+20]
  000a5	89 55 d4	 mov	 DWORD PTR _points$5[ebp], edx

; 2723 : 
; 2724 : 		//
; 2725 : 		// Outcode the lake first
; 2726 : 		//
; 2727 : 
; 2728 : 		outcode = 0;

  000a8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _outcode$9[ebp], 0

; 2729 : 		if ( lakes[count].xmin < xmin )	outcode |= CLIP_LEFT;

  000af	6b 45 fc 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  000b6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _xmin$[ebp]
  000bb	0f 2f 44 01 04	 comiss	 xmm0, DWORD PTR [ecx+eax+4]
  000c0	76 09		 jbe	 SHORT $LN8@render_con
  000c2	8b 45 e4	 mov	 eax, DWORD PTR _outcode$9[ebp]
  000c5	83 c8 01	 or	 eax, 1
  000c8	89 45 e4	 mov	 DWORD PTR _outcode$9[ebp], eax
$LN8@render_con:

; 2730 : 		if ( lakes[count].xmin > xmax )	outcode |= CLIP_RIGHT;

  000cb	6b 45 fc 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  000d2	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  000d8	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _xmax$[ebp]
  000dc	76 09		 jbe	 SHORT $LN9@render_con
  000de	8b 45 e4	 mov	 eax, DWORD PTR _outcode$9[ebp]
  000e1	83 c8 04	 or	 eax, 4
  000e4	89 45 e4	 mov	 DWORD PTR _outcode$9[ebp], eax
$LN9@render_con:

; 2731 : 		if ( lakes[count].zmin < zmin )	outcode |= CLIP_TOP;

  000e7	6b 45 fc 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  000eb	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  000ee	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _zmin$[ebp]
  000f3	0f 2f 44 01 0c	 comiss	 xmm0, DWORD PTR [ecx+eax+12]
  000f8	76 09		 jbe	 SHORT $LN10@render_con
  000fa	8b 45 e4	 mov	 eax, DWORD PTR _outcode$9[ebp]
  000fd	83 c8 02	 or	 eax, 2
  00100	89 45 e4	 mov	 DWORD PTR _outcode$9[ebp], eax
$LN10@render_con:

; 2732 : 		if ( lakes[count].zmin > zmax )	outcode |= CLIP_BOTTOM;

  00103	6b 45 fc 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  00107	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  0010a	f3 0f 10 44 01
	0c		 movss	 xmm0, DWORD PTR [ecx+eax+12]
  00110	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _zmax$[ebp]
  00114	76 09		 jbe	 SHORT $LN11@render_con
  00116	8b 45 e4	 mov	 eax, DWORD PTR _outcode$9[ebp]
  00119	83 c8 08	 or	 eax, 8
  0011c	89 45 e4	 mov	 DWORD PTR _outcode$9[ebp], eax
$LN11@render_con:

; 2733 : 
; 2734 : 		outcode1 = outcode;

  0011f	8b 45 e4	 mov	 eax, DWORD PTR _outcode$9[ebp]
  00122	89 45 e0	 mov	 DWORD PTR _outcode1$8[ebp], eax

; 2735 : 		outcode2 = outcode;

  00125	8b 45 e4	 mov	 eax, DWORD PTR _outcode$9[ebp]
  00128	89 45 dc	 mov	 DWORD PTR _outcode2$7[ebp], eax

; 2736 : 
; 2737 : 		outcode = 0;

  0012b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _outcode$9[ebp], 0

; 2738 : 		if ( lakes[count].xmax < xmin )	outcode |= CLIP_LEFT;

  00132	6b 45 fc 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  00136	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00139	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _xmin$[ebp]
  0013e	0f 2f 44 01 08	 comiss	 xmm0, DWORD PTR [ecx+eax+8]
  00143	76 09		 jbe	 SHORT $LN12@render_con
  00145	8b 45 e4	 mov	 eax, DWORD PTR _outcode$9[ebp]
  00148	83 c8 01	 or	 eax, 1
  0014b	89 45 e4	 mov	 DWORD PTR _outcode$9[ebp], eax
$LN12@render_con:

; 2739 : 		if ( lakes[count].xmax > xmax )	outcode |= CLIP_RIGHT;

  0014e	6b 45 fc 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  00152	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00155	f3 0f 10 44 01
	08		 movss	 xmm0, DWORD PTR [ecx+eax+8]
  0015b	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _xmax$[ebp]
  0015f	76 09		 jbe	 SHORT $LN13@render_con
  00161	8b 45 e4	 mov	 eax, DWORD PTR _outcode$9[ebp]
  00164	83 c8 04	 or	 eax, 4
  00167	89 45 e4	 mov	 DWORD PTR _outcode$9[ebp], eax
$LN13@render_con:

; 2740 : 		if ( lakes[count].zmax < zmin )	outcode |= CLIP_TOP;

  0016a	6b 45 fc 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  0016e	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00171	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _zmin$[ebp]
  00176	0f 2f 44 01 10	 comiss	 xmm0, DWORD PTR [ecx+eax+16]
  0017b	76 09		 jbe	 SHORT $LN14@render_con
  0017d	8b 45 e4	 mov	 eax, DWORD PTR _outcode$9[ebp]
  00180	83 c8 02	 or	 eax, 2
  00183	89 45 e4	 mov	 DWORD PTR _outcode$9[ebp], eax
$LN14@render_con:

; 2741 : 		if ( lakes[count].zmax > zmax )	outcode |= CLIP_BOTTOM;

  00186	6b 45 fc 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  0018a	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  0018d	f3 0f 10 44 01
	10		 movss	 xmm0, DWORD PTR [ecx+eax+16]
  00193	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _zmax$[ebp]
  00197	76 09		 jbe	 SHORT $LN15@render_con
  00199	8b 45 e4	 mov	 eax, DWORD PTR _outcode$9[ebp]
  0019c	83 c8 08	 or	 eax, 8
  0019f	89 45 e4	 mov	 DWORD PTR _outcode$9[ebp], eax
$LN15@render_con:

; 2742 : 
; 2743 : 		outcode1 |= outcode;

  001a2	8b 45 e0	 mov	 eax, DWORD PTR _outcode1$8[ebp]
  001a5	0b 45 e4	 or	 eax, DWORD PTR _outcode$9[ebp]
  001a8	89 45 e0	 mov	 DWORD PTR _outcode1$8[ebp], eax

; 2744 : 		outcode2 &= outcode;

  001ab	8b 45 dc	 mov	 eax, DWORD PTR _outcode2$7[ebp]
  001ae	23 45 e4	 and	 eax, DWORD PTR _outcode$9[ebp]
  001b1	89 45 dc	 mov	 DWORD PTR _outcode2$7[ebp], eax

; 2745 : 
; 2746 : 		if ( outcode2 == 0 )

  001b4	0f 85 26 04 00
	00		 jne	 $LN6@render_con

; 2747 : 		{
; 2748 : 
; 2749 : 			vertices[0].z = 10;

  001ba	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001bf	6b c8 00	 imul	 ecx, eax, 0
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  001ca	f3 0f 11 84 0d
	1c ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+ecx+8], xmm0

; 2750 : 			vertices[0].q = 0.1;

  001d3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d8	6b c8 00	 imul	 ecx, eax, 0
  001db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  001e3	f3 0f 11 84 0d
	20 ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+ecx+12], xmm0

; 2751 : 			vertices[1].z = 10;

  001ec	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001f1	c1 e0 00	 shl	 eax, 0
  001f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  001fc	f3 0f 11 84 05
	1c ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+eax+8], xmm0

; 2752 : 			vertices[1].q = 0.1;

  00205	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0020a	c1 e0 00	 shl	 eax, 0
  0020d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00215	f3 0f 11 84 05
	20 ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+eax+12], xmm0

; 2753 : 			vertices[2].z = 10;

  0021e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00223	d1 e0		 shl	 eax, 1
  00225	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0022d	f3 0f 11 84 05
	1c ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+eax+8], xmm0

; 2754 : 			vertices[2].q = 0.1;

  00236	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0023b	d1 e0		 shl	 eax, 1
  0023d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00245	f3 0f 11 84 05
	20 ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+eax+12], xmm0

; 2755 : 		
; 2756 : 			for ( triangle = 0; triangle < lakes[count].number_of_triangles; triangle++ )

  0024e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _triangle$6[ebp], 0
  00255	eb 09		 jmp	 SHORT $LN7@render_con
$LN5@render_con:
  00257	8b 45 d8	 mov	 eax, DWORD PTR _triangle$6[ebp]
  0025a	83 c0 01	 add	 eax, 1
  0025d	89 45 d8	 mov	 DWORD PTR _triangle$6[ebp], eax
$LN7@render_con:
  00260	6b 45 fc 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  00264	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00267	8b 55 d8	 mov	 edx, DWORD PTR _triangle$6[ebp]
  0026a	3b 14 01	 cmp	 edx, DWORD PTR [ecx+eax]
  0026d	0f 8d 6d 03 00
	00		 jge	 $LN6@render_con

; 2757 : 			{
; 2758 : 	
; 2759 : 				int
; 2760 : 					outcode,
; 2761 : 					outcode2;
; 2762 : 	
; 2763 : 				vertices[0].i = ( points[0].x - terrain_2d_map_world_xcentre ) * terrain_2d_map_screen_xscale + terrain_2d_map_screen_xcentre;

  00273	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00278	6b c8 00	 imul	 ecx, eax, 0
  0027b	8b 55 d4	 mov	 edx, DWORD PTR _points$5[ebp]
  0027e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00283	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_xcentre@@3MA
  0028b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xscale@@3MA
  00293	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA
  0029b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002a0	6b c8 00	 imul	 ecx, eax, 0
  002a3	f3 0f 11 84 0d
	24 ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+ecx+16], xmm0

; 2764 : 				vertices[0].j = ( points[0].z - terrain_2d_map_world_zcentre ) * terrain_2d_map_screen_yscale + terrain_2d_map_screen_ycentre;

  002ac	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002b1	6b c8 00	 imul	 ecx, eax, 0
  002b4	8b 55 d4	 mov	 edx, DWORD PTR _points$5[ebp]
  002b7	f3 0f 10 44 0a
	08		 movss	 xmm0, DWORD PTR [edx+ecx+8]
  002bd	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_zcentre@@3MA
  002c5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_yscale@@3MA
  002cd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA
  002d5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002da	6b c8 00	 imul	 ecx, eax, 0
  002dd	f3 0f 11 84 0d
	28 ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+ecx+20], xmm0

; 2765 : 	
; 2766 : 				vertices[1].i = ( points[1].x - terrain_2d_map_world_xcentre ) * terrain_2d_map_screen_xscale + terrain_2d_map_screen_xcentre;

  002e6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002eb	c1 e0 00	 shl	 eax, 0
  002ee	8b 4d d4	 mov	 ecx, DWORD PTR _points$5[ebp]
  002f1	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  002f6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_xcentre@@3MA
  002fe	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xscale@@3MA
  00306	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA
  0030e	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00313	c1 e2 00	 shl	 edx, 0
  00316	f3 0f 11 84 15
	24 ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+edx+16], xmm0

; 2767 : 				vertices[1].j = ( points[1].z - terrain_2d_map_world_zcentre ) * terrain_2d_map_screen_yscale + terrain_2d_map_screen_ycentre;

  0031f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00324	c1 e0 00	 shl	 eax, 0
  00327	8b 4d d4	 mov	 ecx, DWORD PTR _points$5[ebp]
  0032a	f3 0f 10 44 01
	08		 movss	 xmm0, DWORD PTR [ecx+eax+8]
  00330	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_zcentre@@3MA
  00338	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_yscale@@3MA
  00340	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA
  00348	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0034d	c1 e2 00	 shl	 edx, 0
  00350	f3 0f 11 84 15
	28 ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+edx+20], xmm0

; 2768 : 	
; 2769 : 				vertices[2].i = ( points[2].x - terrain_2d_map_world_xcentre ) * terrain_2d_map_screen_xscale + terrain_2d_map_screen_xcentre;

  00359	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0035e	d1 e0		 shl	 eax, 1
  00360	8b 4d d4	 mov	 ecx, DWORD PTR _points$5[ebp]
  00363	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00368	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_xcentre@@3MA
  00370	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xscale@@3MA
  00378	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA
  00380	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00385	d1 e2		 shl	 edx, 1
  00387	f3 0f 11 84 15
	24 ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+edx+16], xmm0

; 2770 : 				vertices[2].j = ( points[2].z - terrain_2d_map_world_zcentre ) * terrain_2d_map_screen_yscale + terrain_2d_map_screen_ycentre;

  00390	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00395	d1 e0		 shl	 eax, 1
  00397	8b 4d d4	 mov	 ecx, DWORD PTR _points$5[ebp]
  0039a	f3 0f 10 44 01
	08		 movss	 xmm0, DWORD PTR [ecx+eax+8]
  003a0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_zcentre@@3MA
  003a8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_yscale@@3MA
  003b0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA
  003b8	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003bd	d1 e2		 shl	 edx, 1
  003bf	f3 0f 11 84 15
	28 ff ff ff	 movss	 DWORD PTR _vertices$4[ebp+edx+20], xmm0

; 2771 : 	
; 2772 : 				vertices[0].outcode = generate_contour_outcode ( vertices[0].i, vertices[0].j );

  003c8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003cd	6b c8 00	 imul	 ecx, eax, 0
  003d0	51		 push	 ecx
  003d1	f3 0f 10 84 0d
	28 ff ff ff	 movss	 xmm0, DWORD PTR _vertices$4[ebp+ecx+20]
  003da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003df	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003e4	6b c2 00	 imul	 eax, edx, 0
  003e7	51		 push	 ecx
  003e8	f3 0f 10 84 05
	24 ff ff ff	 movss	 xmm0, DWORD PTR _vertices$4[ebp+eax+16]
  003f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f6	e8 00 00 00 00	 call	 ?generate_contour_outcode@@YGEMM@Z ; generate_contour_outcode
  003fb	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00400	6b d1 00	 imul	 edx, ecx, 0
  00403	88 84 15 40 ff
	ff ff		 mov	 BYTE PTR _vertices$4[ebp+edx+44], al

; 2773 : 				vertices[1].outcode = generate_contour_outcode ( vertices[1].i, vertices[1].j );

  0040a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0040f	c1 e0 00	 shl	 eax, 0
  00412	51		 push	 ecx
  00413	f3 0f 10 84 05
	28 ff ff ff	 movss	 xmm0, DWORD PTR _vertices$4[ebp+eax+20]
  0041c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00421	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00426	c1 e1 00	 shl	 ecx, 0
  00429	51		 push	 ecx
  0042a	f3 0f 10 84 0d
	24 ff ff ff	 movss	 xmm0, DWORD PTR _vertices$4[ebp+ecx+16]
  00433	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00438	e8 00 00 00 00	 call	 ?generate_contour_outcode@@YGEMM@Z ; generate_contour_outcode
  0043d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00442	c1 e2 00	 shl	 edx, 0
  00445	88 84 15 40 ff
	ff ff		 mov	 BYTE PTR _vertices$4[ebp+edx+44], al

; 2774 : 				vertices[2].outcode = generate_contour_outcode ( vertices[2].i, vertices[2].j );

  0044c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00451	d1 e0		 shl	 eax, 1
  00453	51		 push	 ecx
  00454	f3 0f 10 84 05
	28 ff ff ff	 movss	 xmm0, DWORD PTR _vertices$4[ebp+eax+20]
  0045d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00462	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00467	d1 e1		 shl	 ecx, 1
  00469	51		 push	 ecx
  0046a	f3 0f 10 84 0d
	24 ff ff ff	 movss	 xmm0, DWORD PTR _vertices$4[ebp+ecx+16]
  00473	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00478	e8 00 00 00 00	 call	 ?generate_contour_outcode@@YGEMM@Z ; generate_contour_outcode
  0047d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00482	d1 e2		 shl	 edx, 1
  00484	88 84 15 40 ff
	ff ff		 mov	 BYTE PTR _vertices$4[ebp+edx+44], al

; 2775 : 	
; 2776 : 				vertices[0].next_vertex = &vertices[1];

  0048b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00490	c1 e0 00	 shl	 eax, 0
  00493	8d 8c 05 14 ff
	ff ff		 lea	 ecx, DWORD PTR _vertices$4[ebp+eax]
  0049a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0049f	6b c2 00	 imul	 eax, edx, 0
  004a2	89 8c 05 3c ff
	ff ff		 mov	 DWORD PTR _vertices$4[ebp+eax+40], ecx

; 2777 : 				vertices[1].next_vertex = &vertices[2];

  004a9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004ae	d1 e0		 shl	 eax, 1
  004b0	8d 8c 05 14 ff
	ff ff		 lea	 ecx, DWORD PTR _vertices$4[ebp+eax]
  004b7	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  004bc	c1 e2 00	 shl	 edx, 0
  004bf	89 8c 15 3c ff
	ff ff		 mov	 DWORD PTR _vertices$4[ebp+edx+40], ecx

; 2778 : 				vertices[2].next_vertex = NULL;

  004c6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004cb	d1 e0		 shl	 eax, 1
  004cd	c7 84 05 3c ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _vertices$4[ebp+eax+40], 0

; 2779 : 	
; 2780 : 				outcode = vertices[0].outcode;

  004d8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004dd	6b c8 00	 imul	 ecx, eax, 0
  004e0	0f b6 94 0d 40
	ff ff ff	 movzx	 edx, BYTE PTR _vertices$4[ebp+ecx+44]
  004e8	89 95 10 ff ff
	ff		 mov	 DWORD PTR _outcode$3[ebp], edx

; 2781 : 				outcode2 = vertices[0].outcode;

  004ee	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004f3	6b c8 00	 imul	 ecx, eax, 0
  004f6	0f b6 94 0d 40
	ff ff ff	 movzx	 edx, BYTE PTR _vertices$4[ebp+ecx+44]
  004fe	89 95 0c ff ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], edx

; 2782 : 	
; 2783 : 				outcode |= vertices[1].outcode;

  00504	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00509	c1 e0 00	 shl	 eax, 0
  0050c	0f b6 8c 05 40
	ff ff ff	 movzx	 ecx, BYTE PTR _vertices$4[ebp+eax+44]
  00514	0b 8d 10 ff ff
	ff		 or	 ecx, DWORD PTR _outcode$3[ebp]
  0051a	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _outcode$3[ebp], ecx

; 2784 : 				outcode2 &= vertices[1].outcode;

  00520	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00525	c1 e0 00	 shl	 eax, 0
  00528	0f b6 8c 05 40
	ff ff ff	 movzx	 ecx, BYTE PTR _vertices$4[ebp+eax+44]
  00530	23 8d 0c ff ff
	ff		 and	 ecx, DWORD PTR _outcode2$2[ebp]
  00536	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], ecx

; 2785 : 	
; 2786 : 				outcode |= vertices[2].outcode;

  0053c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00541	d1 e0		 shl	 eax, 1
  00543	0f b6 8c 05 40
	ff ff ff	 movzx	 ecx, BYTE PTR _vertices$4[ebp+eax+44]
  0054b	0b 8d 10 ff ff
	ff		 or	 ecx, DWORD PTR _outcode$3[ebp]
  00551	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _outcode$3[ebp], ecx

; 2787 : 				outcode2 &= vertices[2].outcode;

  00557	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0055c	d1 e0		 shl	 eax, 1
  0055e	0f b6 8c 05 40
	ff ff ff	 movzx	 ecx, BYTE PTR _vertices$4[ebp+eax+44]
  00566	23 8d 0c ff ff
	ff		 and	 ecx, DWORD PTR _outcode2$2[ebp]
  0056c	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], ecx

; 2788 : 	
; 2789 : 				if ( outcode2 == 0 )

  00572	75 5e		 jne	 SHORT $LN19@render_con

; 2790 : 				{
; 2791 : 		
; 2792 : 					vertex
; 2793 : 						*poly;
; 2794 : 		
; 2795 : 					poly = &vertices[0];

  00574	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00579	6b c8 00	 imul	 ecx, eax, 0
  0057c	8d 94 0d 14 ff
	ff ff		 lea	 edx, DWORD PTR _vertices$4[ebp+ecx]
  00583	89 95 08 ff ff
	ff		 mov	 DWORD PTR _poly$1[ebp], edx

; 2796 : 		
; 2797 : 					clip_3d_coord = 0;

  00589	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 2798 : 		
; 2799 : 					if ( outcode )

  00593	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _outcode$3[ebp], 0
  0059a	74 19		 je	 SHORT $LN18@render_con

; 2800 : 					{
; 2801 : 
; 2802 : 						poly = clip_3d_polygon ( poly, outcode );

  0059c	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _outcode$3[ebp]
  005a2	50		 push	 eax
  005a3	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _poly$1[ebp]
  005a9	51		 push	 ecx
  005aa	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  005af	89 85 08 ff ff
	ff		 mov	 DWORD PTR _poly$1[ebp], eax
$LN18@render_con:

; 2803 : 					}
; 2804 : 			
; 2805 : 					if ( poly )

  005b5	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _poly$1[ebp], 0
  005bc	74 14		 je	 SHORT $LN19@render_con

; 2806 : 					{
; 2807 : 	
; 2808 : 						draw_wbuffered_plain_polygon ( poly, lake_colour, specular );

  005be	8b 45 f8	 mov	 eax, DWORD PTR _specular$[ebp]
  005c1	50		 push	 eax
  005c2	8b 4d 10	 mov	 ecx, DWORD PTR _lake_colour$[ebp]
  005c5	51		 push	 ecx
  005c6	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _poly$1[ebp]
  005cc	52		 push	 edx
  005cd	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon
$LN19@render_con:

; 2809 : 					}
; 2810 : 				}
; 2811 : 	
; 2812 : 				points += 3;

  005d2	8b 45 d4	 mov	 eax, DWORD PTR _points$5[ebp]
  005d5	83 c0 24	 add	 eax, 36			; 00000024H
  005d8	89 45 d4	 mov	 DWORD PTR _points$5[ebp], eax

; 2813 : 			}

  005db	e9 77 fc ff ff	 jmp	 $LN5@render_con
$LN6@render_con:

; 2814 : 		}
; 2815 : 	}

  005e0	e9 a0 fa ff ff	 jmp	 $LN2@render_con
$LN3@render_con:

; 2816 : }

  005e5	5f		 pop	 edi
  005e6	5e		 pop	 esi
  005e7	5b		 pop	 ebx
  005e8	8b e5		 mov	 esp, ebp
  005ea	5d		 pop	 ebp
  005eb	c2 0c 00	 ret	 12			; 0000000cH
?render_contour_triangle_database@@YGXHPAUCONTOUR_LAKE@@UREAL_COLOUR@@@Z ENDP ; render_contour_triangle_database
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?set_lake_database_extents@@YGXHPAUCONTOUR_LAKE@@@Z
_TEXT	SEGMENT
_zmax$1 = -24						; size = 4
_zmin$2 = -20						; size = 4
_xmax$3 = -16						; size = 4
_xmin$4 = -12						; size = 4
_count$5 = -8						; size = 4
_lake$ = -4						; size = 4
_number_of_triangle_sets$ = 8				; size = 4
_lakes$ = 12						; size = 4
?set_lake_database_extents@@YGXHPAUCONTOUR_LAKE@@@Z PROC ; set_lake_database_extents, COMDAT

; 1692 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1693 : 
; 1694 : 	int
; 1695 : 		lake;
; 1696 : 
; 1697 : 	for ( lake = 0; lake < number_of_triangle_sets; lake++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _lake$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@set_lake_d
$LN2@set_lake_d:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _lake$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _lake$[ebp], eax
$LN4@set_lake_d:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _lake$[ebp]
  0001e	3b 45 08	 cmp	 eax, DWORD PTR _number_of_triangle_sets$[ebp]
  00021	0f 8d e5 02 00
	00		 jge	 $LN3@set_lake_d

; 1698 : 	{
; 1699 : 
; 1700 : 		int
; 1701 : 			count;
; 1702 : 
; 1703 : 		float
; 1704 : 			xmin,
; 1705 : 			xmax,
; 1706 : 			zmin,
; 1707 : 			zmax;
; 1708 : 
; 1709 : 		xmin = lakes[lake].triangle_points[0].x;

  00027	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  0002b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00030	6b d1 00	 imul	 edx, ecx, 0
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00036	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  0003a	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0003f	f3 0f 11 45 f4	 movss	 DWORD PTR _xmin$4[ebp], xmm0

; 1710 : 		xmax = lakes[lake].triangle_points[0].x;

  00044	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  00048	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0004d	6b d1 00	 imul	 edx, ecx, 0
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00053	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  00057	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0005c	f3 0f 11 45 f0	 movss	 DWORD PTR _xmax$3[ebp], xmm0

; 1711 : 		zmin = lakes[lake].triangle_points[0].z;

  00061	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  00065	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0006a	6b d1 00	 imul	 edx, ecx, 0
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00070	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  00074	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
  0007a	f3 0f 11 45 ec	 movss	 DWORD PTR _zmin$2[ebp], xmm0

; 1712 : 		zmax = lakes[lake].triangle_points[0].z;

  0007f	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  00083	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00088	6b d1 00	 imul	 edx, ecx, 0
  0008b	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  0008e	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  00092	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
  00098	f3 0f 11 45 e8	 movss	 DWORD PTR _zmax$1[ebp], xmm0

; 1713 : 
; 1714 : 		for ( count = 0; count < lakes[lake].number_of_triangles; count++ )

  0009d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$5[ebp], 0
  000a4	eb 09		 jmp	 SHORT $LN7@set_lake_d
$LN5@set_lake_d:
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _count$5[ebp]
  000a9	83 c0 01	 add	 eax, 1
  000ac	89 45 f8	 mov	 DWORD PTR _count$5[ebp], eax
$LN7@set_lake_d:
  000af	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  000b6	8b 55 f8	 mov	 edx, DWORD PTR _count$5[ebp]
  000b9	3b 14 01	 cmp	 edx, DWORD PTR [ecx+eax]
  000bc	0f 8d fd 01 00
	00		 jge	 $LN6@set_lake_d

; 1715 : 		{
; 1716 : 
; 1717 : 			xmin = min ( xmin, lakes[lake].triangle_points[count*3+0].x );

  000c2	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  000c6	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  000ca	6b d1 0c	 imul	 edx, ecx, 12
  000cd	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  000d0	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  000d4	03 c2		 add	 eax, edx
  000d6	50		 push	 eax
  000d7	8d 4d f4	 lea	 ecx, DWORD PTR _xmin$4[ebp]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  000e0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000e4	f3 0f 11 45 f4	 movss	 DWORD PTR _xmin$4[ebp], xmm0

; 1718 : 			xmax = max ( xmax, lakes[lake].triangle_points[count*3+0].x );

  000e9	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  000ed	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  000f1	6b d1 0c	 imul	 edx, ecx, 12
  000f4	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  000f7	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  000fb	03 c2		 add	 eax, edx
  000fd	50		 push	 eax
  000fe	8d 4d f0	 lea	 ecx, DWORD PTR _xmax$3[ebp]
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00107	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0010b	f3 0f 11 45 f0	 movss	 DWORD PTR _xmax$3[ebp], xmm0

; 1719 : 			zmin = min ( zmin, lakes[lake].triangle_points[count*3+0].z );

  00110	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  00114	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  00118	6b d1 0c	 imul	 edx, ecx, 12
  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  0011e	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  00122	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  00126	51		 push	 ecx
  00127	8d 55 ec	 lea	 edx, DWORD PTR _zmin$2[ebp]
  0012a	52		 push	 edx
  0012b	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00130	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00134	f3 0f 11 45 ec	 movss	 DWORD PTR _zmin$2[ebp], xmm0

; 1720 : 			zmax = max ( zmax, lakes[lake].triangle_points[count*3+0].z );

  00139	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  0013d	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  00141	6b d1 0c	 imul	 edx, ecx, 12
  00144	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00147	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  0014b	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  0014f	51		 push	 ecx
  00150	8d 55 e8	 lea	 edx, DWORD PTR _zmax$1[ebp]
  00153	52		 push	 edx
  00154	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00159	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0015d	f3 0f 11 45 e8	 movss	 DWORD PTR _zmax$1[ebp], xmm0

; 1721 : 
; 1722 : 			xmin = min ( xmin, lakes[lake].triangle_points[count*3+1].x );

  00162	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  00166	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  0016a	83 c1 01	 add	 ecx, 1
  0016d	6b d1 0c	 imul	 edx, ecx, 12
  00170	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00173	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  00177	03 c2		 add	 eax, edx
  00179	50		 push	 eax
  0017a	8d 4d f4	 lea	 ecx, DWORD PTR _xmin$4[ebp]
  0017d	51		 push	 ecx
  0017e	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00183	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00187	f3 0f 11 45 f4	 movss	 DWORD PTR _xmin$4[ebp], xmm0

; 1723 : 			xmax = max ( xmax, lakes[lake].triangle_points[count*3+1].x );

  0018c	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  00190	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  00194	83 c1 01	 add	 ecx, 1
  00197	6b d1 0c	 imul	 edx, ecx, 12
  0019a	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  0019d	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  001a1	03 c2		 add	 eax, edx
  001a3	50		 push	 eax
  001a4	8d 4d f0	 lea	 ecx, DWORD PTR _xmax$3[ebp]
  001a7	51		 push	 ecx
  001a8	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001ad	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001b1	f3 0f 11 45 f0	 movss	 DWORD PTR _xmax$3[ebp], xmm0

; 1724 : 			zmin = min ( zmin, lakes[lake].triangle_points[count*3+1].z );

  001b6	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  001ba	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  001be	83 c1 01	 add	 ecx, 1
  001c1	6b d1 0c	 imul	 edx, ecx, 12
  001c4	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  001c7	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  001cb	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  001cf	51		 push	 ecx
  001d0	8d 55 ec	 lea	 edx, DWORD PTR _zmin$2[ebp]
  001d3	52		 push	 edx
  001d4	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  001d9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001dd	f3 0f 11 45 ec	 movss	 DWORD PTR _zmin$2[ebp], xmm0

; 1725 : 			zmax = max ( zmax, lakes[lake].triangle_points[count*3+1].z );

  001e2	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  001e6	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  001ea	83 c1 01	 add	 ecx, 1
  001ed	6b d1 0c	 imul	 edx, ecx, 12
  001f0	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  001f3	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  001f7	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  001fb	51		 push	 ecx
  001fc	8d 55 e8	 lea	 edx, DWORD PTR _zmax$1[ebp]
  001ff	52		 push	 edx
  00200	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00205	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00209	f3 0f 11 45 e8	 movss	 DWORD PTR _zmax$1[ebp], xmm0

; 1726 : 
; 1727 : 			xmin = min ( xmin, lakes[lake].triangle_points[count*3+2].x );

  0020e	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  00212	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  00216	83 c1 02	 add	 ecx, 2
  00219	6b d1 0c	 imul	 edx, ecx, 12
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  0021f	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  00223	03 c2		 add	 eax, edx
  00225	50		 push	 eax
  00226	8d 4d f4	 lea	 ecx, DWORD PTR _xmin$4[ebp]
  00229	51		 push	 ecx
  0022a	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0022f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00233	f3 0f 11 45 f4	 movss	 DWORD PTR _xmin$4[ebp], xmm0

; 1728 : 			xmax = max ( xmax, lakes[lake].triangle_points[count*3+2].x );

  00238	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  0023c	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  00240	83 c1 02	 add	 ecx, 2
  00243	6b d1 0c	 imul	 edx, ecx, 12
  00246	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00249	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  0024d	03 c2		 add	 eax, edx
  0024f	50		 push	 eax
  00250	8d 4d f0	 lea	 ecx, DWORD PTR _xmax$3[ebp]
  00253	51		 push	 ecx
  00254	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00259	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0025d	f3 0f 11 45 f0	 movss	 DWORD PTR _xmax$3[ebp], xmm0

; 1729 : 			zmin = min ( zmin, lakes[lake].triangle_points[count*3+2].z );

  00262	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  00266	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  0026a	83 c1 02	 add	 ecx, 2
  0026d	6b d1 0c	 imul	 edx, ecx, 12
  00270	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  00273	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  00277	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  0027b	51		 push	 ecx
  0027c	8d 55 ec	 lea	 edx, DWORD PTR _zmin$2[ebp]
  0027f	52		 push	 edx
  00280	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00285	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00289	f3 0f 11 45 ec	 movss	 DWORD PTR _zmin$2[ebp], xmm0

; 1730 : 			zmax = max ( zmax, lakes[lake].triangle_points[count*3+2].z );

  0028e	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  00292	6b 4d f8 03	 imul	 ecx, DWORD PTR _count$5[ebp], 3
  00296	83 c1 02	 add	 ecx, 2
  00299	6b d1 0c	 imul	 edx, ecx, 12
  0029c	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  0029f	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  002a3	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  002a7	51		 push	 ecx
  002a8	8d 55 e8	 lea	 edx, DWORD PTR _zmax$1[ebp]
  002ab	52		 push	 edx
  002ac	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002b1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002b5	f3 0f 11 45 e8	 movss	 DWORD PTR _zmax$1[ebp], xmm0

; 1731 : 		}

  002ba	e9 e7 fd ff ff	 jmp	 $LN5@set_lake_d
$LN6@set_lake_d:

; 1732 : 
; 1733 : 		lakes[lake].xmin = xmin;

  002bf	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  002c3	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  002c6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _xmin$4[ebp]
  002cb	f3 0f 11 44 01
	04		 movss	 DWORD PTR [ecx+eax+4], xmm0

; 1734 : 		lakes[lake].xmax = xmax;

  002d1	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  002d5	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  002d8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _xmax$3[ebp]
  002dd	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 1735 : 		lakes[lake].zmin = zmin;

  002e3	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  002e7	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  002ea	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _zmin$2[ebp]
  002ef	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 1736 : 		lakes[lake].zmax = zmax;

  002f5	6b 45 fc 18	 imul	 eax, DWORD PTR _lake$[ebp], 24
  002f9	8b 4d 0c	 mov	 ecx, DWORD PTR _lakes$[ebp]
  002fc	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _zmax$1[ebp]
  00301	f3 0f 11 44 01
	10		 movss	 DWORD PTR [ecx+eax+16], xmm0

; 1737 : 	}

  00307	e9 06 fd ff ff	 jmp	 $LN2@set_lake_d
$LN3@set_lake_d:

; 1738 : }

  0030c	5f		 pop	 edi
  0030d	5e		 pop	 esi
  0030e	5b		 pop	 ebx
  0030f	8b e5		 mov	 esp, ebp
  00311	5d		 pop	 ebp
  00312	c2 08 00	 ret	 8
?set_lake_database_extents@@YGXHPAUCONTOUR_LAKE@@@Z ENDP ; set_lake_database_extents
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?set_node_database_extents@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_zmax$1 = -24						; size = 4
_zmin$2 = -20						; size = 4
_xmax$3 = -16						; size = 4
_xmin$4 = -12						; size = 4
_count$5 = -8						; size = 4
_path$ = -4						; size = 4
_number_of_paths$ = 8					; size = 4
_paths$ = 12						; size = 4
_nodes$ = 16						; size = 4
?set_node_database_extents@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@@Z PROC ; set_node_database_extents, COMDAT

; 1649 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1650 : 
; 1651 : 	int
; 1652 : 		path;
; 1653 : 
; 1654 : 	for ( path = 0; path < number_of_paths; path++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _path$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@set_node_d
$LN2@set_node_d:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _path$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _path$[ebp], eax
$LN4@set_node_d:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _path$[ebp]
  0001e	3b 45 08	 cmp	 eax, DWORD PTR _number_of_paths$[ebp]
  00021	0f 8d d0 01 00
	00		 jge	 $LN3@set_node_d

; 1655 : 	{
; 1656 : 
; 1657 : 		int
; 1658 : 			count;
; 1659 : 
; 1660 : 		float
; 1661 : 			xmin,
; 1662 : 			xmax,
; 1663 : 			zmin,
; 1664 : 			zmax;
; 1665 : 
; 1666 : 		xmin = min ( nodes[ paths[path].from ].x, nodes[ paths[path].to ].x );

  00027	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0002e	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  00033	03 55 10	 add	 edx, DWORD PTR _nodes$[ebp]
  00036	52		 push	 edx
  00037	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0003e	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  00042	03 55 10	 add	 edx, DWORD PTR _nodes$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0004b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004f	f3 0f 11 45 f4	 movss	 DWORD PTR _xmin$4[ebp], xmm0

; 1667 : 		xmax = max ( nodes[ paths[path].from ].x, nodes[ paths[path].to ].x );

  00054	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0005b	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  00060	03 55 10	 add	 edx, DWORD PTR _nodes$[ebp]
  00063	52		 push	 edx
  00064	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0006b	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  0006f	03 55 10	 add	 edx, DWORD PTR _nodes$[ebp]
  00072	52		 push	 edx
  00073	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00078	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0007c	f3 0f 11 45 f0	 movss	 DWORD PTR _xmax$3[ebp], xmm0

; 1668 : 		zmin = min ( nodes[ paths[path].from ].z, nodes[ paths[path].to ].z );

  00081	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00088	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  0008d	8b 45 10	 mov	 eax, DWORD PTR _nodes$[ebp]
  00090	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  00094	51		 push	 ecx
  00095	6b 55 fc 24	 imul	 edx, DWORD PTR _path$[ebp], 36
  00099	8b 45 0c	 mov	 eax, DWORD PTR _paths$[ebp]
  0009c	6b 0c 10 0c	 imul	 ecx, DWORD PTR [eax+edx], 12
  000a0	8b 55 10	 mov	 edx, DWORD PTR _nodes$[ebp]
  000a3	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  000ad	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b1	f3 0f 11 45 ec	 movss	 DWORD PTR _zmin$2[ebp], xmm0

; 1669 : 		zmax = max ( nodes[ paths[path].from ].z, nodes[ paths[path].to ].z );

  000b6	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000bd	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  000c2	8b 45 10	 mov	 eax, DWORD PTR _nodes$[ebp]
  000c5	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  000c9	51		 push	 ecx
  000ca	6b 55 fc 24	 imul	 edx, DWORD PTR _path$[ebp], 36
  000ce	8b 45 0c	 mov	 eax, DWORD PTR _paths$[ebp]
  000d1	6b 0c 10 0c	 imul	 ecx, DWORD PTR [eax+edx], 12
  000d5	8b 55 10	 mov	 edx, DWORD PTR _nodes$[ebp]
  000d8	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000e2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000e6	f3 0f 11 45 e8	 movss	 DWORD PTR _zmax$1[ebp], xmm0

; 1670 : 
; 1671 : 		for ( count = 0; count < paths[path].count; count++ )

  000eb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$5[ebp], 0
  000f2	eb 09		 jmp	 SHORT $LN7@set_node_d
$LN5@set_node_d:
  000f4	8b 45 f8	 mov	 eax, DWORD PTR _count$5[ebp]
  000f7	83 c0 01	 add	 eax, 1
  000fa	89 45 f8	 mov	 DWORD PTR _count$5[ebp], eax
$LN7@set_node_d:
  000fd	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  00101	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00104	8b 55 f8	 mov	 edx, DWORD PTR _count$5[ebp]
  00107	3b 54 01 0c	 cmp	 edx, DWORD PTR [ecx+eax+12]
  0010b	0f 8d 99 00 00
	00		 jge	 $LN6@set_node_d

; 1672 : 		{
; 1673 : 
; 1674 : 			xmin = min ( xmin, paths[path].points[count].x );

  00111	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  00115	6b 4d f8 0c	 imul	 ecx, DWORD PTR _count$5[ebp], 12
  00119	8b 55 0c	 mov	 edx, DWORD PTR _paths$[ebp]
  0011c	8b 44 02 20	 mov	 eax, DWORD PTR [edx+eax+32]
  00120	03 c1		 add	 eax, ecx
  00122	50		 push	 eax
  00123	8d 4d f4	 lea	 ecx, DWORD PTR _xmin$4[ebp]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0012c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00130	f3 0f 11 45 f4	 movss	 DWORD PTR _xmin$4[ebp], xmm0

; 1675 : 			xmax = max ( xmax, paths[path].points[count].x );

  00135	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  00139	6b 4d f8 0c	 imul	 ecx, DWORD PTR _count$5[ebp], 12
  0013d	8b 55 0c	 mov	 edx, DWORD PTR _paths$[ebp]
  00140	8b 44 02 20	 mov	 eax, DWORD PTR [edx+eax+32]
  00144	03 c1		 add	 eax, ecx
  00146	50		 push	 eax
  00147	8d 4d f0	 lea	 ecx, DWORD PTR _xmax$3[ebp]
  0014a	51		 push	 ecx
  0014b	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00150	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00154	f3 0f 11 45 f0	 movss	 DWORD PTR _xmax$3[ebp], xmm0

; 1676 : 			zmin = min ( zmin, paths[path].points[count].z );

  00159	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  0015d	6b 4d f8 0c	 imul	 ecx, DWORD PTR _count$5[ebp], 12
  00161	8b 55 0c	 mov	 edx, DWORD PTR _paths$[ebp]
  00164	8b 44 02 20	 mov	 eax, DWORD PTR [edx+eax+32]
  00168	8d 4c 08 08	 lea	 ecx, DWORD PTR [eax+ecx+8]
  0016c	51		 push	 ecx
  0016d	8d 55 ec	 lea	 edx, DWORD PTR _zmin$2[ebp]
  00170	52		 push	 edx
  00171	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00176	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0017a	f3 0f 11 45 ec	 movss	 DWORD PTR _zmin$2[ebp], xmm0

; 1677 : 			zmax = max ( zmax, paths[path].points[count].z );

  0017f	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  00183	6b 4d f8 0c	 imul	 ecx, DWORD PTR _count$5[ebp], 12
  00187	8b 55 0c	 mov	 edx, DWORD PTR _paths$[ebp]
  0018a	8b 44 02 20	 mov	 eax, DWORD PTR [edx+eax+32]
  0018e	8d 4c 08 08	 lea	 ecx, DWORD PTR [eax+ecx+8]
  00192	51		 push	 ecx
  00193	8d 55 e8	 lea	 edx, DWORD PTR _zmax$1[ebp]
  00196	52		 push	 edx
  00197	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0019c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001a0	f3 0f 11 45 e8	 movss	 DWORD PTR _zmax$1[ebp], xmm0

; 1678 : 		}

  001a5	e9 4a ff ff ff	 jmp	 $LN5@set_node_d
$LN6@set_node_d:

; 1679 : 
; 1680 : 		paths[path].xmin = xmin;

  001aa	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  001ae	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001b1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _xmin$4[ebp]
  001b6	f3 0f 11 44 01
	10		 movss	 DWORD PTR [ecx+eax+16], xmm0

; 1681 : 		paths[path].xmax = xmax;

  001bc	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  001c0	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001c3	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _xmax$3[ebp]
  001c8	f3 0f 11 44 01
	14		 movss	 DWORD PTR [ecx+eax+20], xmm0

; 1682 : 		paths[path].zmin = zmin;

  001ce	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  001d2	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001d5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _zmin$2[ebp]
  001da	f3 0f 11 44 01
	18		 movss	 DWORD PTR [ecx+eax+24], xmm0

; 1683 : 		paths[path].zmax = zmax;

  001e0	6b 45 fc 24	 imul	 eax, DWORD PTR _path$[ebp], 36
  001e4	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001e7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _zmax$1[ebp]
  001ec	f3 0f 11 44 01
	1c		 movss	 DWORD PTR [ecx+eax+28], xmm0

; 1684 : 	}

  001f2	e9 1b fe ff ff	 jmp	 $LN2@set_node_d
$LN3@set_node_d:

; 1685 : }

  001f7	5f		 pop	 edi
  001f8	5e		 pop	 esi
  001f9	5b		 pop	 ebx
  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c2 0c 00	 ret	 12			; 0000000cH
?set_node_database_extents@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@@Z ENDP ; set_node_database_extents
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?load_contour_map_citybases@@YGXPAD@Z
_TEXT	SEGMENT
_point$1 = -24						; size = 4
_vertices$ = -20					; size = 4
_count$ = -16						; size = 4
_total_triangles$ = -12					; size = 4
_number_of_triangles$ = -8				; size = 4
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
?load_contour_map_citybases@@YGXPAD@Z PROC		; load_contour_map_citybases, COMDAT

; 1905 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1906 : 
; 1907 : 	FILE
; 1908 : 		*fp;
; 1909 : 
; 1910 : 	int
; 1911 : 		number_of_triangles,
; 1912 : 		total_triangles,
; 1913 : 		count;
; 1914 : 
; 1915 : 	vec3d
; 1916 : 		*vertices;
; 1917 : 
; 1918 : 	fp = safe_fopen ( filename, "rb" );

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00017	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 1919 : 
; 1920 : 	number_of_contour_citybases = 0;

  0001a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_contour_citybases@@3HA, 0 ; number_of_contour_citybases

; 1921 : 
; 1922 : 	total_triangles = 0;

  00024	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _total_triangles$[ebp], 0

; 1923 : 
; 1924 : 	fread ( &number_of_contour_citybases, sizeof ( int ), 1, fp );

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0002e	50		 push	 eax
  0002f	6a 01		 push	 1
  00031	6a 04		 push	 4
  00033	68 00 00 00 00	 push	 OFFSET ?number_of_contour_citybases@@3HA ; number_of_contour_citybases
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 1925 : 
; 1926 : 	if ( number_of_contour_citybases == 0 )

  00041	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?number_of_contour_citybases@@3HA, 0 ; number_of_contour_citybases
  00048	75 0e		 jne	 SHORT $LN11@load_conto

; 1927 : 	{
; 1928 : 
; 1929 : 		safe_fclose ( fp );

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 1930 : 
; 1931 : 		return;

  00053	e9 cd 01 00 00	 jmp	 $LN1@load_conto
$LN11@load_conto:

; 1932 : 	}
; 1933 : 
; 1934 : 	for ( count = 0; count < number_of_contour_citybases; count++ )

  00058	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0005f	eb 09		 jmp	 SHORT $LN4@load_conto
$LN2@load_conto:
  00061	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  00064	83 c0 01	 add	 eax, 1
  00067	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax
$LN4@load_conto:
  0006a	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0006d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_contour_citybases@@3HA ; number_of_contour_citybases
  00073	7d 34		 jge	 SHORT $LN3@load_conto

; 1935 : 	{
; 1936 : 
; 1937 : 		fread ( &number_of_triangles, sizeof ( int ), 1, fp );

  00075	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00078	50		 push	 eax
  00079	6a 01		 push	 1
  0007b	6a 04		 push	 4
  0007d	8d 4d f8	 lea	 ecx, DWORD PTR _number_of_triangles$[ebp]
  00080	51		 push	 ecx
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00087	83 c4 10	 add	 esp, 16			; 00000010H

; 1938 : 
; 1939 : 		total_triangles += number_of_triangles;

  0008a	8b 45 f4	 mov	 eax, DWORD PTR _total_triangles$[ebp]
  0008d	03 45 f8	 add	 eax, DWORD PTR _number_of_triangles$[ebp]
  00090	89 45 f4	 mov	 DWORD PTR _total_triangles$[ebp], eax

; 1940 : 
; 1941 : 		fseek ( fp, sizeof ( vec3d ) * 3 * number_of_triangles, SEEK_CUR );

  00093	6a 01		 push	 1
  00095	6b 45 f8 24	 imul	 eax, DWORD PTR _number_of_triangles$[ebp], 36
  00099	50		 push	 eax
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  0009d	51		 push	 ecx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1942 : 	}

  000a7	eb b8		 jmp	 SHORT $LN2@load_conto
$LN3@load_conto:

; 1943 : 
; 1944 : 	//
; 1945 : 	// Now read in the data properly
; 1946 : 	//
; 1947 : 
; 1948 : 	contour_citybase_vertices = ( vec3d * ) safe_malloc ( sizeof ( vec3d ) * 3 * total_triangles );

  000a9	6b 45 f4 24	 imul	 eax, DWORD PTR _total_triangles$[ebp], 36
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000b3	a3 00 00 00 00	 mov	 DWORD PTR ?contour_citybase_vertices@@3PAUVEC3D@@A, eax ; contour_citybase_vertices

; 1949 : 
; 1950 : 	contour_citybases = ( contour_lake * ) safe_malloc ( sizeof ( contour_lake ) * number_of_contour_citybases );

  000b8	6b 05 00 00 00
	00 18		 imul	 eax, DWORD PTR ?number_of_contour_citybases@@3HA, 24 ; number_of_contour_citybases
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000c5	a3 00 00 00 00	 mov	 DWORD PTR ?contour_citybases@@3PAUCONTOUR_LAKE@@A, eax ; contour_citybases

; 1951 : 
; 1952 : 	fseek ( fp, 4, SEEK_SET );

  000ca	6a 00		 push	 0
  000cc	6a 04		 push	 4
  000ce	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000d1	50		 push	 eax
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1953 : 
; 1954 : 	vertices = contour_citybase_vertices;

  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_citybase_vertices@@3PAUVEC3D@@A ; contour_citybase_vertices
  000e0	89 45 ec	 mov	 DWORD PTR _vertices$[ebp], eax

; 1955 : 
; 1956 : 	for ( count = 0; count < number_of_contour_citybases; count++ )

  000e3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000ea	eb 09		 jmp	 SHORT $LN7@load_conto
$LN5@load_conto:
  000ec	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  000ef	83 c0 01	 add	 eax, 1
  000f2	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax
$LN7@load_conto:
  000f5	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  000f8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_contour_citybases@@3HA ; number_of_contour_citybases
  000fe	0f 8d 06 01 00
	00		 jge	 $LN6@load_conto

; 1957 : 	{
; 1958 : 
; 1959 : 		int
; 1960 : 			point;
; 1961 : 
; 1962 : 		fread ( &number_of_triangles, sizeof ( int ), 1, fp );

  00104	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00107	50		 push	 eax
  00108	6a 01		 push	 1
  0010a	6a 04		 push	 4
  0010c	8d 4d f8	 lea	 ecx, DWORD PTR _number_of_triangles$[ebp]
  0010f	51		 push	 ecx
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00116	83 c4 10	 add	 esp, 16			; 00000010H

; 1963 : 	
; 1964 : 		fread ( vertices, sizeof ( vec3d ) * 3, number_of_triangles, fp );

  00119	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _number_of_triangles$[ebp]
  00120	51		 push	 ecx
  00121	6a 24		 push	 36			; 00000024H
  00123	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  00126	52		 push	 edx
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0012d	83 c4 10	 add	 esp, 16			; 00000010H

; 1965 : 
; 1966 : 		contour_citybases[count].number_of_triangles = number_of_triangles;

  00130	6b 45 f0 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_citybases@@3PAUCONTOUR_LAKE@@A ; contour_citybases
  0013a	8b 55 f8	 mov	 edx, DWORD PTR _number_of_triangles$[ebp]
  0013d	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 1967 : 
; 1968 : 		contour_citybases[count].triangle_points = vertices;

  00140	6b 45 f0 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  00144	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_citybases@@3PAUCONTOUR_LAKE@@A ; contour_citybases
  0014a	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  0014d	89 54 01 14	 mov	 DWORD PTR [ecx+eax+20], edx

; 1969 : 
; 1970 : 		for ( point = 0; point < number_of_triangles; point++ )

  00151	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _point$1[ebp], 0
  00158	eb 09		 jmp	 SHORT $LN10@load_conto
$LN8@load_conto:
  0015a	8b 45 e8	 mov	 eax, DWORD PTR _point$1[ebp]
  0015d	83 c0 01	 add	 eax, 1
  00160	89 45 e8	 mov	 DWORD PTR _point$1[ebp], eax
$LN10@load_conto:
  00163	8b 45 e8	 mov	 eax, DWORD PTR _point$1[ebp]
  00166	3b 45 f8	 cmp	 eax, DWORD PTR _number_of_triangles$[ebp]
  00169	0f 8d 89 00 00
	00		 jge	 $LN9@load_conto

; 1971 : 		{
; 1972 : 
; 1973 : 			vertices[point*3+0].z = terrain_3d_max_map_z - vertices[point*3+0].z;

  0016f	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  00173	6b c8 0c	 imul	 ecx, eax, 12
  00176	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  00179	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  00181	f3 0f 5c 44 0a
	08		 subss	 xmm0, DWORD PTR [edx+ecx+8]
  00187	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  0018b	6b c8 0c	 imul	 ecx, eax, 12
  0018e	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  00191	f3 0f 11 44 0a
	08		 movss	 DWORD PTR [edx+ecx+8], xmm0

; 1974 : 			vertices[point*3+1].z = terrain_3d_max_map_z - vertices[point*3+1].z;

  00197	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  0019b	83 c0 01	 add	 eax, 1
  0019e	6b c8 0c	 imul	 ecx, eax, 12
  001a1	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  001ac	f3 0f 5c 44 0a
	08		 subss	 xmm0, DWORD PTR [edx+ecx+8]
  001b2	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  001b6	83 c0 01	 add	 eax, 1
  001b9	6b c8 0c	 imul	 ecx, eax, 12
  001bc	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  001bf	f3 0f 11 44 0a
	08		 movss	 DWORD PTR [edx+ecx+8], xmm0

; 1975 : 			vertices[point*3+2].z = terrain_3d_max_map_z - vertices[point*3+2].z;

  001c5	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  001c9	83 c0 02	 add	 eax, 2
  001cc	6b c8 0c	 imul	 ecx, eax, 12
  001cf	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  001d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  001da	f3 0f 5c 44 0a
	08		 subss	 xmm0, DWORD PTR [edx+ecx+8]
  001e0	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  001e4	83 c0 02	 add	 eax, 2
  001e7	6b c8 0c	 imul	 ecx, eax, 12
  001ea	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  001ed	f3 0f 11 44 0a
	08		 movss	 DWORD PTR [edx+ecx+8], xmm0

; 1976 : 		}

  001f3	e9 62 ff ff ff	 jmp	 $LN8@load_conto
$LN9@load_conto:

; 1977 : 
; 1978 : 		vertices += ( number_of_triangles * 3 );

  001f8	6b 45 f8 03	 imul	 eax, DWORD PTR _number_of_triangles$[ebp], 3
  001fc	6b c8 0c	 imul	 ecx, eax, 12
  001ff	03 4d ec	 add	 ecx, DWORD PTR _vertices$[ebp]
  00202	89 4d ec	 mov	 DWORD PTR _vertices$[ebp], ecx

; 1979 : 	}

  00205	e9 e2 fe ff ff	 jmp	 $LN5@load_conto
$LN6@load_conto:

; 1980 : 
; 1981 : 	safe_fclose ( fp );

  0020a	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 1982 : 
; 1983 : 	set_lake_database_extents ( number_of_contour_citybases, contour_citybases );

  00213	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_citybases@@3PAUCONTOUR_LAKE@@A ; contour_citybases
  00218	50		 push	 eax
  00219	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_contour_citybases@@3HA ; number_of_contour_citybases
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ?set_lake_database_extents@@YGXHPAUCONTOUR_LAKE@@@Z ; set_lake_database_extents
$LN1@load_conto:

; 1984 : }

  00225	5f		 pop	 edi
  00226	5e		 pop	 esi
  00227	5b		 pop	 ebx
  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c2 04 00	 ret	 4
?load_contour_map_citybases@@YGXPAD@Z ENDP		; load_contour_map_citybases
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?load_contour_map_lakes@@YGXPAD@Z
_TEXT	SEGMENT
_point$1 = -24						; size = 4
_vertices$ = -20					; size = 4
_count$ = -16						; size = 4
_total_triangles$ = -12					; size = 4
_number_of_lake_triangles$ = -8				; size = 4
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
?load_contour_map_lakes@@YGXPAD@Z PROC			; load_contour_map_lakes, COMDAT

; 1819 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1820 : 
; 1821 : 	FILE
; 1822 : 		*fp;
; 1823 : 
; 1824 : 	int
; 1825 : 		number_of_lake_triangles,
; 1826 : 		total_triangles,
; 1827 : 		count;
; 1828 : 
; 1829 : 	vec3d
; 1830 : 		*vertices;
; 1831 : 
; 1832 : 	fp = safe_fopen ( filename, "rb" );

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00017	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 1833 : 
; 1834 : 	//
; 1835 : 	// Assess the number of lakes
; 1836 : 	//
; 1837 : 
; 1838 : 	number_of_contour_lakes = 0;

  0001a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_contour_lakes@@3HA, 0 ; number_of_contour_lakes

; 1839 : 
; 1840 : 	total_triangles = 0;

  00024	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _total_triangles$[ebp], 0

; 1841 : 
; 1842 : 	fread ( &number_of_contour_lakes, sizeof ( int ), 1, fp );

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0002e	50		 push	 eax
  0002f	6a 01		 push	 1
  00031	6a 04		 push	 4
  00033	68 00 00 00 00	 push	 OFFSET ?number_of_contour_lakes@@3HA ; number_of_contour_lakes
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 1843 : 
; 1844 : 	for ( count = 0; count < number_of_contour_lakes; count++ )

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00048	eb 09		 jmp	 SHORT $LN4@load_conto
$LN2@load_conto:
  0004a	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax
$LN4@load_conto:
  00053	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  00056	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_contour_lakes@@3HA ; number_of_contour_lakes
  0005c	7d 34		 jge	 SHORT $LN3@load_conto

; 1845 : 	{
; 1846 : 
; 1847 : 		fread ( &number_of_lake_triangles, sizeof ( int ), 1, fp );

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00061	50		 push	 eax
  00062	6a 01		 push	 1
  00064	6a 04		 push	 4
  00066	8d 4d f8	 lea	 ecx, DWORD PTR _number_of_lake_triangles$[ebp]
  00069	51		 push	 ecx
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00070	83 c4 10	 add	 esp, 16			; 00000010H

; 1848 : 
; 1849 : 		total_triangles += number_of_lake_triangles;

  00073	8b 45 f4	 mov	 eax, DWORD PTR _total_triangles$[ebp]
  00076	03 45 f8	 add	 eax, DWORD PTR _number_of_lake_triangles$[ebp]
  00079	89 45 f4	 mov	 DWORD PTR _total_triangles$[ebp], eax

; 1850 : 
; 1851 : 		fseek ( fp, sizeof ( vec3d ) * 3 * number_of_lake_triangles, SEEK_CUR );

  0007c	6a 01		 push	 1
  0007e	6b 45 f8 24	 imul	 eax, DWORD PTR _number_of_lake_triangles$[ebp], 36
  00082	50		 push	 eax
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  00086	51		 push	 ecx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1852 : 	}

  00090	eb b8		 jmp	 SHORT $LN2@load_conto
$LN3@load_conto:

; 1853 : 
; 1854 : 	//
; 1855 : 	// Now read in the data properly
; 1856 : 	//
; 1857 : 
; 1858 : 	contour_lake_vertices = ( vec3d * ) safe_malloc ( sizeof ( vec3d ) * 3 * total_triangles );

  00092	6b 45 f4 24	 imul	 eax, DWORD PTR _total_triangles$[ebp], 36
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0009c	a3 00 00 00 00	 mov	 DWORD PTR ?contour_lake_vertices@@3PAUVEC3D@@A, eax ; contour_lake_vertices

; 1859 : 
; 1860 : 	contour_lakes = ( contour_lake * ) safe_malloc ( sizeof ( contour_lake ) * number_of_contour_lakes );

  000a1	6b 05 00 00 00
	00 18		 imul	 eax, DWORD PTR ?number_of_contour_lakes@@3HA, 24 ; number_of_contour_lakes
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000ae	a3 00 00 00 00	 mov	 DWORD PTR ?contour_lakes@@3PAUCONTOUR_LAKE@@A, eax ; contour_lakes

; 1861 : 
; 1862 : 	fseek ( fp, 4, SEEK_SET );

  000b3	6a 00		 push	 0
  000b5	6a 04		 push	 4
  000b7	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000ba	50		 push	 eax
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1863 : 
; 1864 : 	vertices = contour_lake_vertices;

  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_lake_vertices@@3PAUVEC3D@@A ; contour_lake_vertices
  000c9	89 45 ec	 mov	 DWORD PTR _vertices$[ebp], eax

; 1865 : 
; 1866 : 	for ( count = 0; count < number_of_contour_lakes; count++ )

  000cc	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000d3	eb 09		 jmp	 SHORT $LN7@load_conto
$LN5@load_conto:
  000d5	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  000d8	83 c0 01	 add	 eax, 1
  000db	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax
$LN7@load_conto:
  000de	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  000e1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_contour_lakes@@3HA ; number_of_contour_lakes
  000e7	0f 8d 06 01 00
	00		 jge	 $LN6@load_conto

; 1867 : 	{
; 1868 : 
; 1869 : 		int
; 1870 : 			point;
; 1871 : 
; 1872 : 		fread ( &number_of_lake_triangles, sizeof ( int ), 1, fp );

  000ed	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000f0	50		 push	 eax
  000f1	6a 01		 push	 1
  000f3	6a 04		 push	 4
  000f5	8d 4d f8	 lea	 ecx, DWORD PTR _number_of_lake_triangles$[ebp]
  000f8	51		 push	 ecx
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000ff	83 c4 10	 add	 esp, 16			; 00000010H

; 1873 : 	
; 1874 : 		fread ( vertices, sizeof ( vec3d ) * 3, number_of_lake_triangles, fp );

  00102	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00105	50		 push	 eax
  00106	8b 4d f8	 mov	 ecx, DWORD PTR _number_of_lake_triangles$[ebp]
  00109	51		 push	 ecx
  0010a	6a 24		 push	 36			; 00000024H
  0010c	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  0010f	52		 push	 edx
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00116	83 c4 10	 add	 esp, 16			; 00000010H

; 1875 : 
; 1876 : 		contour_lakes[count].number_of_triangles = number_of_lake_triangles;

  00119	6b 45 f0 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  0011d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_lakes@@3PAUCONTOUR_LAKE@@A ; contour_lakes
  00123	8b 55 f8	 mov	 edx, DWORD PTR _number_of_lake_triangles$[ebp]
  00126	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 1877 : 
; 1878 : 		contour_lakes[count].triangle_points = vertices;

  00129	6b 45 f0 18	 imul	 eax, DWORD PTR _count$[ebp], 24
  0012d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_lakes@@3PAUCONTOUR_LAKE@@A ; contour_lakes
  00133	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  00136	89 54 01 14	 mov	 DWORD PTR [ecx+eax+20], edx

; 1879 : 
; 1880 : 		for ( point = 0; point < number_of_lake_triangles; point++ )

  0013a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _point$1[ebp], 0
  00141	eb 09		 jmp	 SHORT $LN10@load_conto
$LN8@load_conto:
  00143	8b 45 e8	 mov	 eax, DWORD PTR _point$1[ebp]
  00146	83 c0 01	 add	 eax, 1
  00149	89 45 e8	 mov	 DWORD PTR _point$1[ebp], eax
$LN10@load_conto:
  0014c	8b 45 e8	 mov	 eax, DWORD PTR _point$1[ebp]
  0014f	3b 45 f8	 cmp	 eax, DWORD PTR _number_of_lake_triangles$[ebp]
  00152	0f 8d 89 00 00
	00		 jge	 $LN9@load_conto

; 1881 : 		{
; 1882 : 
; 1883 : 			vertices[point*3+0].z = terrain_3d_max_map_z - vertices[point*3+0].z;

  00158	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  0015c	6b c8 0c	 imul	 ecx, eax, 12
  0015f	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  00162	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  0016a	f3 0f 5c 44 0a
	08		 subss	 xmm0, DWORD PTR [edx+ecx+8]
  00170	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  00174	6b c8 0c	 imul	 ecx, eax, 12
  00177	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  0017a	f3 0f 11 44 0a
	08		 movss	 DWORD PTR [edx+ecx+8], xmm0

; 1884 : 			vertices[point*3+1].z = terrain_3d_max_map_z - vertices[point*3+1].z;

  00180	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  00184	83 c0 01	 add	 eax, 1
  00187	6b c8 0c	 imul	 ecx, eax, 12
  0018a	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  0018d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  00195	f3 0f 5c 44 0a
	08		 subss	 xmm0, DWORD PTR [edx+ecx+8]
  0019b	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  0019f	83 c0 01	 add	 eax, 1
  001a2	6b c8 0c	 imul	 ecx, eax, 12
  001a5	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  001a8	f3 0f 11 44 0a
	08		 movss	 DWORD PTR [edx+ecx+8], xmm0

; 1885 : 			vertices[point*3+2].z = terrain_3d_max_map_z - vertices[point*3+2].z;

  001ae	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  001b2	83 c0 02	 add	 eax, 2
  001b5	6b c8 0c	 imul	 ecx, eax, 12
  001b8	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  001bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  001c3	f3 0f 5c 44 0a
	08		 subss	 xmm0, DWORD PTR [edx+ecx+8]
  001c9	6b 45 e8 03	 imul	 eax, DWORD PTR _point$1[ebp], 3
  001cd	83 c0 02	 add	 eax, 2
  001d0	6b c8 0c	 imul	 ecx, eax, 12
  001d3	8b 55 ec	 mov	 edx, DWORD PTR _vertices$[ebp]
  001d6	f3 0f 11 44 0a
	08		 movss	 DWORD PTR [edx+ecx+8], xmm0

; 1886 : 		}

  001dc	e9 62 ff ff ff	 jmp	 $LN8@load_conto
$LN9@load_conto:

; 1887 : 
; 1888 : 		vertices += ( number_of_lake_triangles * 3 );

  001e1	6b 45 f8 03	 imul	 eax, DWORD PTR _number_of_lake_triangles$[ebp], 3
  001e5	6b c8 0c	 imul	 ecx, eax, 12
  001e8	03 4d ec	 add	 ecx, DWORD PTR _vertices$[ebp]
  001eb	89 4d ec	 mov	 DWORD PTR _vertices$[ebp], ecx

; 1889 : 	}

  001ee	e9 e2 fe ff ff	 jmp	 $LN5@load_conto
$LN6@load_conto:

; 1890 : 
; 1891 : 	safe_fclose ( fp );

  001f3	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 1892 : 
; 1893 : 	//
; 1894 : 	// Generate a bounding box round all the lakes
; 1895 : 	//
; 1896 : 
; 1897 : 	set_lake_database_extents ( number_of_contour_lakes, contour_lakes );

  001fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_lakes@@3PAUCONTOUR_LAKE@@A ; contour_lakes
  00201	50		 push	 eax
  00202	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_contour_lakes@@3HA ; number_of_contour_lakes
  00208	51		 push	 ecx
  00209	e8 00 00 00 00	 call	 ?set_lake_database_extents@@YGXHPAUCONTOUR_LAKE@@@Z ; set_lake_database_extents

; 1898 : }

  0020e	5f		 pop	 edi
  0020f	5e		 pop	 esi
  00210	5b		 pop	 ebx
  00211	8b e5		 mov	 esp, ebp
  00213	5d		 pop	 ebp
  00214	c2 04 00	 ret	 4
?load_contour_map_lakes@@YGXPAD@Z ENDP			; load_contour_map_lakes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?load_2d_terrain_contour_road_data@@YGHPAD0@Z
_TEXT	SEGMENT
tv229 = -88						; size = 4
tv213 = -88						; size = 4
tv230 = -84						; size = 4
tv214 = -84						; size = 4
_current_position$ = -16				; size = 4
_count$ = -12						; size = 4
_total$ = -8						; size = 4
_fp$ = -4						; size = 4
_nodes_filename$ = 8					; size = 4
_path_filename$ = 12					; size = 4
?load_2d_terrain_contour_road_data@@YGHPAD0@Z PROC	; load_2d_terrain_contour_road_data, COMDAT

; 1446 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1447 : 
; 1448 : 	FILE
; 1449 : 		*fp;
; 1450 : 
; 1451 : 	int
; 1452 : 		total,
; 1453 : 		count;
; 1454 : 
; 1455 : 	vec3d
; 1456 : 		*current_position;
; 1457 : 
; 1458 : 	//
; 1459 : 	// Read in the nodes
; 1460 : 	//
; 1461 : 
; 1462 : 	// JB 030311 Enable running out of separate directories
; 1463 : 	fp = safe_fopen ( nodes_filename, "rb" );

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nodes_filename$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00017	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 1464 : 
; 1465 : 	if ( !fp )

  0001a	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  0001e	75 07		 jne	 SHORT $LN8@load_2d_te

; 1466 : 	{
; 1467 : 
; 1468 : 		return ( FALSE );

  00020	33 c0		 xor	 eax, eax
  00022	e9 5c 03 00 00	 jmp	 $LN1@load_2d_te
$LN8@load_2d_te:

; 1469 : 	}
; 1470 : 
; 1471 : 	fread ( &contour_map_number_of_road_nodes, sizeof ( int ), 1, fp );

  00027	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0002a	50		 push	 eax
  0002b	6a 01		 push	 1
  0002d	6a 04		 push	 4
  0002f	68 00 00 00 00	 push	 OFFSET ?contour_map_number_of_road_nodes@@3HA ; contour_map_number_of_road_nodes
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 1472 : 
; 1473 : 	contour_map_road_nodes = ( vec3d * ) safe_malloc ( sizeof ( vec3d ) * contour_map_number_of_road_nodes );

  0003d	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?contour_map_number_of_road_nodes@@3HA, 12 ; contour_map_number_of_road_nodes
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_road_nodes@@3PAUVEC3D@@A, eax ; contour_map_road_nodes

; 1474 : 
; 1475 : 	fread ( contour_map_road_nodes, sizeof ( vec3d ), contour_map_number_of_road_nodes, fp );

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00052	50		 push	 eax
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_number_of_road_nodes@@3HA ; contour_map_number_of_road_nodes
  00059	51		 push	 ecx
  0005a	6a 0c		 push	 12			; 0000000cH
  0005c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_nodes@@3PAUVEC3D@@A ; contour_map_road_nodes
  00062	52		 push	 edx
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 1476 : 
; 1477 : 	safe_fclose ( fp );

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 1478 : 
; 1479 : 	//
; 1480 : 	// Read in the paths
; 1481 : 	//
; 1482 : 
; 1483 : 	fp = safe_fopen ( path_filename, "rb" );

  00075	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0007a	8b 45 0c	 mov	 eax, DWORD PTR _path_filename$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00083	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 1484 : 
; 1485 : 	fread ( &contour_map_number_of_road_paths, sizeof ( int ), 1, fp );

  00086	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00089	50		 push	 eax
  0008a	6a 01		 push	 1
  0008c	6a 04		 push	 4
  0008e	68 00 00 00 00	 push	 OFFSET ?contour_map_number_of_road_paths@@3HA ; contour_map_number_of_road_paths
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00099	83 c4 10	 add	 esp, 16			; 00000010H

; 1486 : 
; 1487 : 	contour_map_road_paths = ( contour_path * ) safe_malloc ( sizeof ( contour_path ) * contour_map_number_of_road_paths );

  0009c	6b 05 00 00 00
	00 24		 imul	 eax, DWORD PTR ?contour_map_number_of_road_paths@@3HA, 36 ; contour_map_number_of_road_paths
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000a9	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A, eax ; contour_map_road_paths

; 1488 : 
; 1489 : 	//
; 1490 : 	// Process the paths
; 1491 : 	//
; 1492 : 
; 1493 : 	total = 0;

  000ae	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _total$[ebp], 0

; 1494 : 
; 1495 : 	for ( count = 0; count < contour_map_number_of_road_paths; count++ )

  000b5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000bc	eb 09		 jmp	 SHORT $LN4@load_2d_te
$LN2@load_2d_te:
  000be	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  000c1	83 c0 01	 add	 eax, 1
  000c4	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN4@load_2d_te:
  000c7	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  000ca	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?contour_map_number_of_road_paths@@3HA ; contour_map_number_of_road_paths
  000d0	0f 8d b4 00 00
	00		 jge	 $LN3@load_2d_te

; 1496 : 	{
; 1497 : 
; 1498 : 		fread ( &contour_map_road_paths[count].from, sizeof ( int ), 1, fp );

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000d9	50		 push	 eax
  000da	6a 01		 push	 1
  000dc	6a 04		 push	 4
  000de	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  000e2	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  000e8	51		 push	 ecx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000ef	83 c4 10	 add	 esp, 16			; 00000010H

; 1499 : 		fread ( &contour_map_road_paths[count].to, sizeof ( int ), 1, fp );

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000f5	50		 push	 eax
  000f6	6a 01		 push	 1
  000f8	6a 04		 push	 4
  000fa	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  000fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00104	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00108	50		 push	 eax
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0010f	83 c4 10	 add	 esp, 16			; 00000010H

; 1500 : 		fread ( &contour_map_road_paths[count].type, sizeof ( int ), 1, fp );

  00112	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00115	50		 push	 eax
  00116	6a 01		 push	 1
  00118	6a 04		 push	 4
  0011a	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00124	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  00128	50		 push	 eax
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0012f	83 c4 10	 add	 esp, 16			; 00000010H

; 1501 : 		fread ( &contour_map_road_paths[count].count, sizeof ( int ), 1, fp );

  00132	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00135	50		 push	 eax
  00136	6a 01		 push	 1
  00138	6a 04		 push	 4
  0013a	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0013e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00144	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00148	50		 push	 eax
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0014f	83 c4 10	 add	 esp, 16			; 00000010H

; 1502 : 
; 1503 : 		total += contour_map_road_paths[count].count;

  00152	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  0015c	8b 55 f8	 mov	 edx, DWORD PTR _total$[ebp]
  0015f	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  00163	89 55 f8	 mov	 DWORD PTR _total$[ebp], edx

; 1504 : 
; 1505 : 		fseek ( fp, ( contour_map_road_paths[count].count * sizeof ( vec3d ) ), SEEK_CUR );

  00166	6a 01		 push	 1
  00168	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0016c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00172	6b 54 01 0c 0c	 imul	 edx, DWORD PTR [ecx+eax+12], 12
  00177	52		 push	 edx
  00178	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0017b	50		 push	 eax
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00182	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1506 : 	}

  00185	e9 34 ff ff ff	 jmp	 $LN2@load_2d_te
$LN3@load_2d_te:

; 1507 : 
; 1508 : 	fseek ( fp, 4, SEEK_SET );

  0018a	6a 00		 push	 0
  0018c	6a 04		 push	 4
  0018e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00191	50		 push	 eax
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1509 : 
; 1510 : 	contour_map_road_path_positions = ( vec3d * ) safe_malloc ( sizeof ( vec3d ) * total );

  0019b	6b 45 f8 0c	 imul	 eax, DWORD PTR _total$[ebp], 12
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  001a5	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_road_path_positions@@3PAUVEC3D@@A, eax ; contour_map_road_path_positions

; 1511 : 
; 1512 : 	current_position = contour_map_road_path_positions;

  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_road_path_positions@@3PAUVEC3D@@A ; contour_map_road_path_positions
  001af	89 45 f0	 mov	 DWORD PTR _current_position$[ebp], eax

; 1513 : 
; 1514 : 	for ( count = 0; count < contour_map_number_of_road_paths; count++ )

  001b2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  001b9	eb 09		 jmp	 SHORT $LN7@load_2d_te
$LN5@load_2d_te:
  001bb	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  001be	83 c0 01	 add	 eax, 1
  001c1	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN7@load_2d_te:
  001c4	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  001c7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?contour_map_number_of_road_paths@@3HA ; contour_map_number_of_road_paths
  001cd	0f 8d 89 01 00
	00		 jge	 $LN6@load_2d_te

; 1515 : 	{
; 1516 : 
; 1517 : 		fread ( &contour_map_road_paths[count].from, sizeof ( int ), 1, fp );

  001d3	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001d6	50		 push	 eax
  001d7	6a 01		 push	 1
  001d9	6a 04		 push	 4
  001db	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  001df	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  001e5	51		 push	 ecx
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001ec	83 c4 10	 add	 esp, 16			; 00000010H

; 1518 : 		fread ( &contour_map_road_paths[count].to, sizeof ( int ), 1, fp );

  001ef	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001f2	50		 push	 eax
  001f3	6a 01		 push	 1
  001f5	6a 04		 push	 4
  001f7	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  001fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00201	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00205	50		 push	 eax
  00206	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0020c	83 c4 10	 add	 esp, 16			; 00000010H

; 1519 : 		fread ( &contour_map_road_paths[count].type, sizeof ( int ), 1, fp );

  0020f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00212	50		 push	 eax
  00213	6a 01		 push	 1
  00215	6a 04		 push	 4
  00217	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0021b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00221	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  00225	50		 push	 eax
  00226	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0022c	83 c4 10	 add	 esp, 16			; 00000010H

; 1520 : 		fread ( &contour_map_road_paths[count].count, sizeof ( int ), 1, fp );

  0022f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00232	50		 push	 eax
  00233	6a 01		 push	 1
  00235	6a 04		 push	 4
  00237	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0023b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00241	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00245	50		 push	 eax
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0024c	83 c4 10	 add	 esp, 16			; 00000010H

; 1521 : 
; 1522 : 		contour_map_road_paths[count].from = bound ( contour_map_road_paths[count].from, 0, contour_map_number_of_road_nodes );

  0024f	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00253	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00259	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  0025d	7d 09		 jge	 SHORT $LN12@load_2d_te
  0025f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
  00266	eb 35		 jmp	 SHORT $LN13@load_2d_te
$LN12@load_2d_te:
  00268	6b 55 f4 24	 imul	 edx, DWORD PTR _count$[ebp], 36
  0026c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00271	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00274	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?contour_map_number_of_road_nodes@@3HA ; contour_map_number_of_road_nodes
  0027a	7e 0b		 jle	 SHORT $LN10@load_2d_te
  0027c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_number_of_road_nodes@@3HA ; contour_map_number_of_road_nodes
  00282	89 55 a8	 mov	 DWORD PTR tv213[ebp], edx
  00285	eb 10		 jmp	 SHORT $LN11@load_2d_te
$LN10@load_2d_te:
  00287	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0028b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00291	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00294	89 55 a8	 mov	 DWORD PTR tv213[ebp], edx
$LN11@load_2d_te:
  00297	8b 45 a8	 mov	 eax, DWORD PTR tv213[ebp]
  0029a	89 45 ac	 mov	 DWORD PTR tv214[ebp], eax
$LN13@load_2d_te:
  0029d	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  002a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  002a7	8b 45 ac	 mov	 eax, DWORD PTR tv214[ebp]
  002aa	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 1523 : 		contour_map_road_paths[count].to = bound ( contour_map_road_paths[count].to, 0, contour_map_number_of_road_nodes );

  002ad	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  002b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  002b7	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  002bc	7d 09		 jge	 SHORT $LN16@load_2d_te
  002be	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv230[ebp], 0
  002c5	eb 37		 jmp	 SHORT $LN17@load_2d_te
$LN16@load_2d_te:
  002c7	6b 55 f4 24	 imul	 edx, DWORD PTR _count$[ebp], 36
  002cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  002d0	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  002d4	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?contour_map_number_of_road_nodes@@3HA ; contour_map_number_of_road_nodes
  002da	7e 0b		 jle	 SHORT $LN14@load_2d_te
  002dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_number_of_road_nodes@@3HA ; contour_map_number_of_road_nodes
  002e2	89 55 a8	 mov	 DWORD PTR tv229[ebp], edx
  002e5	eb 11		 jmp	 SHORT $LN15@load_2d_te
$LN14@load_2d_te:
  002e7	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  002eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  002f1	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  002f5	89 55 a8	 mov	 DWORD PTR tv229[ebp], edx
$LN15@load_2d_te:
  002f8	8b 45 a8	 mov	 eax, DWORD PTR tv229[ebp]
  002fb	89 45 ac	 mov	 DWORD PTR tv230[ebp], eax
$LN17@load_2d_te:
  002fe	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  00302	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00308	8b 45 ac	 mov	 eax, DWORD PTR tv230[ebp]
  0030b	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 1524 : 
; 1525 : 		contour_map_road_paths[count].points = current_position;

  0030f	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00313	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00319	8b 55 f0	 mov	 edx, DWORD PTR _current_position$[ebp]
  0031c	89 54 01 20	 mov	 DWORD PTR [ecx+eax+32], edx

; 1526 : 
; 1527 : 		fread ( current_position, sizeof ( vec3d ), contour_map_road_paths[count].count, fp );

  00320	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00323	50		 push	 eax
  00324	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  00328	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  0032e	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  00332	50		 push	 eax
  00333	6a 0c		 push	 12			; 0000000cH
  00335	8b 4d f0	 mov	 ecx, DWORD PTR _current_position$[ebp]
  00338	51		 push	 ecx
  00339	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0033f	83 c4 10	 add	 esp, 16			; 00000010H

; 1528 : 
; 1529 : 		current_position += contour_map_road_paths[count].count;

  00342	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00346	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  0034c	6b 54 01 0c 0c	 imul	 edx, DWORD PTR [ecx+eax+12], 12
  00351	03 55 f0	 add	 edx, DWORD PTR _current_position$[ebp]
  00354	89 55 f0	 mov	 DWORD PTR _current_position$[ebp], edx

; 1530 : 	}

  00357	e9 5f fe ff ff	 jmp	 $LN5@load_2d_te
$LN6@load_2d_te:

; 1531 : 
; 1532 : 	safe_fclose ( fp );

  0035c	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 1533 : 
; 1534 : 	//
; 1535 : 	// Go through setting all the node bounds
; 1536 : 	//
; 1537 : 
; 1538 : 	set_node_database_extents ( contour_map_number_of_road_paths, contour_map_road_paths, contour_map_road_nodes );

  00365	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_road_nodes@@3PAUVEC3D@@A ; contour_map_road_nodes
  0036a	50		 push	 eax
  0036b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  00371	51		 push	 ecx
  00372	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_number_of_road_paths@@3HA ; contour_map_number_of_road_paths
  00378	52		 push	 edx
  00379	e8 00 00 00 00	 call	 ?set_node_database_extents@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@@Z ; set_node_database_extents

; 1539 : 
; 1540 : 	return ( TRUE );

  0037e	b8 01 00 00 00	 mov	 eax, 1
$LN1@load_2d_te:

; 1541 : }

  00383	5f		 pop	 edi
  00384	5e		 pop	 esi
  00385	5b		 pop	 ebx
  00386	8b e5		 mov	 esp, ebp
  00388	5d		 pop	 ebp
  00389	c2 08 00	 ret	 8
?load_2d_terrain_contour_road_data@@YGHPAD0@Z ENDP	; load_2d_terrain_contour_road_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?load_2d_terrain_contour_river_data@@YGHPAD0@Z
_TEXT	SEGMENT
tv229 = -88						; size = 4
tv213 = -88						; size = 4
tv230 = -84						; size = 4
tv214 = -84						; size = 4
_current_position$ = -16				; size = 4
_count$ = -12						; size = 4
_total$ = -8						; size = 4
_fp$ = -4						; size = 4
_nodes_filename$ = 8					; size = 4
_path_filename$ = 12					; size = 4
?load_2d_terrain_contour_river_data@@YGHPAD0@Z PROC	; load_2d_terrain_contour_river_data, COMDAT

; 1344 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1345 : 
; 1346 : 	FILE
; 1347 : 		*fp;
; 1348 : 
; 1349 : 	int
; 1350 : 		total,
; 1351 : 		count;
; 1352 : 
; 1353 : 	vec3d
; 1354 : 		*current_position;
; 1355 : 
; 1356 : 	//
; 1357 : 	// Read in the river nodes
; 1358 : 	//
; 1359 : 
; 1360 : 	// JB 030311 Enable running out of separate directories
; 1361 : 	fp = safe_fopen ( nodes_filename, "rb" );

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nodes_filename$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00017	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 1362 : 
; 1363 : 	if ( !fp )

  0001a	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  0001e	75 07		 jne	 SHORT $LN8@load_2d_te

; 1364 : 	{
; 1365 : 
; 1366 : 		return ( FALSE );

  00020	33 c0		 xor	 eax, eax
  00022	e9 5c 03 00 00	 jmp	 $LN1@load_2d_te
$LN8@load_2d_te:

; 1367 : 	}
; 1368 : 
; 1369 : 	fread ( &contour_map_number_of_river_nodes, sizeof ( int ), 1, fp );

  00027	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0002a	50		 push	 eax
  0002b	6a 01		 push	 1
  0002d	6a 04		 push	 4
  0002f	68 00 00 00 00	 push	 OFFSET ?contour_map_number_of_river_nodes@@3HA ; contour_map_number_of_river_nodes
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 1370 : 
; 1371 : 	contour_map_river_nodes = ( vec3d * ) safe_malloc ( sizeof ( vec3d ) * contour_map_number_of_river_nodes );

  0003d	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?contour_map_number_of_river_nodes@@3HA, 12 ; contour_map_number_of_river_nodes
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A, eax ; contour_map_river_nodes

; 1372 : 
; 1373 : 	fread ( contour_map_river_nodes, sizeof ( vec3d ), contour_map_number_of_river_nodes, fp );

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00052	50		 push	 eax
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_number_of_river_nodes@@3HA ; contour_map_number_of_river_nodes
  00059	51		 push	 ecx
  0005a	6a 0c		 push	 12			; 0000000cH
  0005c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  00062	52		 push	 edx
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 1374 : 
; 1375 : 	safe_fclose ( fp );

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 1376 : 
; 1377 : 	//
; 1378 : 	// Read in the river paths
; 1379 : 	//
; 1380 : 
; 1381 : 	fp = safe_fopen ( path_filename, "rb" );

  00075	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0007a	8b 45 0c	 mov	 eax, DWORD PTR _path_filename$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00083	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 1382 : 
; 1383 : 	fread ( &contour_map_number_of_river_paths, sizeof ( int ), 1, fp );

  00086	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00089	50		 push	 eax
  0008a	6a 01		 push	 1
  0008c	6a 04		 push	 4
  0008e	68 00 00 00 00	 push	 OFFSET ?contour_map_number_of_river_paths@@3HA ; contour_map_number_of_river_paths
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00099	83 c4 10	 add	 esp, 16			; 00000010H

; 1384 : 
; 1385 : 	contour_map_river_paths = ( contour_path * ) safe_malloc ( sizeof ( contour_path ) * contour_map_number_of_river_paths );

  0009c	6b 05 00 00 00
	00 24		 imul	 eax, DWORD PTR ?contour_map_number_of_river_paths@@3HA, 36 ; contour_map_number_of_river_paths
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000a9	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A, eax ; contour_map_river_paths

; 1386 : 
; 1387 : 	//
; 1388 : 	// Process the paths
; 1389 : 	//
; 1390 : 
; 1391 : 	total = 0;

  000ae	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _total$[ebp], 0

; 1392 : 
; 1393 : 	for ( count = 0; count < contour_map_number_of_river_paths; count++ )

  000b5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000bc	eb 09		 jmp	 SHORT $LN4@load_2d_te
$LN2@load_2d_te:
  000be	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  000c1	83 c0 01	 add	 eax, 1
  000c4	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN4@load_2d_te:
  000c7	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  000ca	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?contour_map_number_of_river_paths@@3HA ; contour_map_number_of_river_paths
  000d0	0f 8d b4 00 00
	00		 jge	 $LN3@load_2d_te

; 1394 : 	{
; 1395 : 
; 1396 : 		fread ( &contour_map_river_paths[count].from, sizeof ( int ), 1, fp );

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000d9	50		 push	 eax
  000da	6a 01		 push	 1
  000dc	6a 04		 push	 4
  000de	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  000e2	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  000e8	51		 push	 ecx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000ef	83 c4 10	 add	 esp, 16			; 00000010H

; 1397 : 		fread ( &contour_map_river_paths[count].to, sizeof ( int ), 1, fp );

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000f5	50		 push	 eax
  000f6	6a 01		 push	 1
  000f8	6a 04		 push	 4
  000fa	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  000fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00104	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00108	50		 push	 eax
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0010f	83 c4 10	 add	 esp, 16			; 00000010H

; 1398 : 		fread ( &contour_map_river_paths[count].type, sizeof ( int ), 1, fp );

  00112	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00115	50		 push	 eax
  00116	6a 01		 push	 1
  00118	6a 04		 push	 4
  0011a	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00124	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  00128	50		 push	 eax
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0012f	83 c4 10	 add	 esp, 16			; 00000010H

; 1399 : 		fread ( &contour_map_river_paths[count].count, sizeof ( int ), 1, fp );

  00132	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00135	50		 push	 eax
  00136	6a 01		 push	 1
  00138	6a 04		 push	 4
  0013a	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0013e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00144	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00148	50		 push	 eax
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0014f	83 c4 10	 add	 esp, 16			; 00000010H

; 1400 : 
; 1401 : 		total += contour_map_river_paths[count].count;

  00152	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  0015c	8b 55 f8	 mov	 edx, DWORD PTR _total$[ebp]
  0015f	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  00163	89 55 f8	 mov	 DWORD PTR _total$[ebp], edx

; 1402 : 
; 1403 : 		fseek ( fp, ( contour_map_river_paths[count].count * sizeof ( vec3d ) ), SEEK_CUR );

  00166	6a 01		 push	 1
  00168	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0016c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00172	6b 54 01 0c 0c	 imul	 edx, DWORD PTR [ecx+eax+12], 12
  00177	52		 push	 edx
  00178	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0017b	50		 push	 eax
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00182	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1404 : 	}

  00185	e9 34 ff ff ff	 jmp	 $LN2@load_2d_te
$LN3@load_2d_te:

; 1405 : 
; 1406 : 	fseek ( fp, 4, SEEK_SET );

  0018a	6a 00		 push	 0
  0018c	6a 04		 push	 4
  0018e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00191	50		 push	 eax
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1407 : 
; 1408 : 	contour_map_river_path_positions = ( vec3d * ) safe_malloc ( sizeof ( vec3d ) * total );

  0019b	6b 45 f8 0c	 imul	 eax, DWORD PTR _total$[ebp], 12
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  001a5	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_river_path_positions@@3PAUVEC3D@@A, eax ; contour_map_river_path_positions

; 1409 : 
; 1410 : 	current_position = contour_map_river_path_positions;

  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_path_positions@@3PAUVEC3D@@A ; contour_map_river_path_positions
  001af	89 45 f0	 mov	 DWORD PTR _current_position$[ebp], eax

; 1411 : 
; 1412 : 	for ( count = 0; count < contour_map_number_of_river_paths; count++ )

  001b2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  001b9	eb 09		 jmp	 SHORT $LN7@load_2d_te
$LN5@load_2d_te:
  001bb	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  001be	83 c0 01	 add	 eax, 1
  001c1	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN7@load_2d_te:
  001c4	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  001c7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?contour_map_number_of_river_paths@@3HA ; contour_map_number_of_river_paths
  001cd	0f 8d 89 01 00
	00		 jge	 $LN6@load_2d_te

; 1413 : 	{
; 1414 : 
; 1415 : 		fread ( &contour_map_river_paths[count].from, sizeof ( int ), 1, fp );

  001d3	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001d6	50		 push	 eax
  001d7	6a 01		 push	 1
  001d9	6a 04		 push	 4
  001db	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  001df	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  001e5	51		 push	 ecx
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001ec	83 c4 10	 add	 esp, 16			; 00000010H

; 1416 : 		fread ( &contour_map_river_paths[count].to, sizeof ( int ), 1, fp );

  001ef	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001f2	50		 push	 eax
  001f3	6a 01		 push	 1
  001f5	6a 04		 push	 4
  001f7	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  001fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00201	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00205	50		 push	 eax
  00206	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0020c	83 c4 10	 add	 esp, 16			; 00000010H

; 1417 : 		fread ( &contour_map_river_paths[count].type, sizeof ( int ), 1, fp );

  0020f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00212	50		 push	 eax
  00213	6a 01		 push	 1
  00215	6a 04		 push	 4
  00217	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0021b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00221	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  00225	50		 push	 eax
  00226	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0022c	83 c4 10	 add	 esp, 16			; 00000010H

; 1418 : 		fread ( &contour_map_river_paths[count].count, sizeof ( int ), 1, fp );

  0022f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00232	50		 push	 eax
  00233	6a 01		 push	 1
  00235	6a 04		 push	 4
  00237	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0023b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00241	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00245	50		 push	 eax
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0024c	83 c4 10	 add	 esp, 16			; 00000010H

; 1419 : 
; 1420 : 		contour_map_river_paths[count].from = bound ( contour_map_river_paths[count].from, 0, contour_map_number_of_river_nodes );

  0024f	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00253	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00259	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  0025d	7d 09		 jge	 SHORT $LN12@load_2d_te
  0025f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
  00266	eb 35		 jmp	 SHORT $LN13@load_2d_te
$LN12@load_2d_te:
  00268	6b 55 f4 24	 imul	 edx, DWORD PTR _count$[ebp], 36
  0026c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00271	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00274	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?contour_map_number_of_river_nodes@@3HA ; contour_map_number_of_river_nodes
  0027a	7e 0b		 jle	 SHORT $LN10@load_2d_te
  0027c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_number_of_river_nodes@@3HA ; contour_map_number_of_river_nodes
  00282	89 55 a8	 mov	 DWORD PTR tv213[ebp], edx
  00285	eb 10		 jmp	 SHORT $LN11@load_2d_te
$LN10@load_2d_te:
  00287	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0028b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00291	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00294	89 55 a8	 mov	 DWORD PTR tv213[ebp], edx
$LN11@load_2d_te:
  00297	8b 45 a8	 mov	 eax, DWORD PTR tv213[ebp]
  0029a	89 45 ac	 mov	 DWORD PTR tv214[ebp], eax
$LN13@load_2d_te:
  0029d	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  002a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  002a7	8b 45 ac	 mov	 eax, DWORD PTR tv214[ebp]
  002aa	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 1421 : 		contour_map_river_paths[count].to = bound ( contour_map_river_paths[count].to, 0, contour_map_number_of_river_nodes );

  002ad	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  002b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  002b7	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  002bc	7d 09		 jge	 SHORT $LN16@load_2d_te
  002be	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv230[ebp], 0
  002c5	eb 37		 jmp	 SHORT $LN17@load_2d_te
$LN16@load_2d_te:
  002c7	6b 55 f4 24	 imul	 edx, DWORD PTR _count$[ebp], 36
  002cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  002d0	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  002d4	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?contour_map_number_of_river_nodes@@3HA ; contour_map_number_of_river_nodes
  002da	7e 0b		 jle	 SHORT $LN14@load_2d_te
  002dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_number_of_river_nodes@@3HA ; contour_map_number_of_river_nodes
  002e2	89 55 a8	 mov	 DWORD PTR tv229[ebp], edx
  002e5	eb 11		 jmp	 SHORT $LN15@load_2d_te
$LN14@load_2d_te:
  002e7	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  002eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  002f1	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  002f5	89 55 a8	 mov	 DWORD PTR tv229[ebp], edx
$LN15@load_2d_te:
  002f8	8b 45 a8	 mov	 eax, DWORD PTR tv229[ebp]
  002fb	89 45 ac	 mov	 DWORD PTR tv230[ebp], eax
$LN17@load_2d_te:
  002fe	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  00302	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00308	8b 45 ac	 mov	 eax, DWORD PTR tv230[ebp]
  0030b	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 1422 : 
; 1423 : 		contour_map_river_paths[count].points = current_position;

  0030f	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00313	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00319	8b 55 f0	 mov	 edx, DWORD PTR _current_position$[ebp]
  0031c	89 54 01 20	 mov	 DWORD PTR [ecx+eax+32], edx

; 1424 : 
; 1425 : 		fread ( current_position, sizeof ( vec3d ), contour_map_river_paths[count].count, fp );

  00320	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00323	50		 push	 eax
  00324	6b 4d f4 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  00328	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  0032e	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  00332	50		 push	 eax
  00333	6a 0c		 push	 12			; 0000000cH
  00335	8b 4d f0	 mov	 ecx, DWORD PTR _current_position$[ebp]
  00338	51		 push	 ecx
  00339	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0033f	83 c4 10	 add	 esp, 16			; 00000010H

; 1426 : 
; 1427 : 		current_position += contour_map_river_paths[count].count;

  00342	6b 45 f4 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00346	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  0034c	6b 54 01 0c 0c	 imul	 edx, DWORD PTR [ecx+eax+12], 12
  00351	03 55 f0	 add	 edx, DWORD PTR _current_position$[ebp]
  00354	89 55 f0	 mov	 DWORD PTR _current_position$[ebp], edx

; 1428 : 	}

  00357	e9 5f fe ff ff	 jmp	 $LN5@load_2d_te
$LN6@load_2d_te:

; 1429 : 
; 1430 : 	safe_fclose ( fp );

  0035c	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 1431 : 
; 1432 : 	//
; 1433 : 	// Go through setting all the node bounds
; 1434 : 	//
; 1435 : 
; 1436 : 	set_node_database_extents ( contour_map_number_of_river_paths, contour_map_river_paths, contour_map_river_nodes );

  00365	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  0036a	50		 push	 eax
  0036b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00371	51		 push	 ecx
  00372	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_number_of_river_paths@@3HA ; contour_map_number_of_river_paths
  00378	52		 push	 edx
  00379	e8 00 00 00 00	 call	 ?set_node_database_extents@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@@Z ; set_node_database_extents

; 1437 : 
; 1438 : 	return ( TRUE );

  0037e	b8 01 00 00 00	 mov	 eax, 1
$LN1@load_2d_te:

; 1439 : }

  00383	5f		 pop	 edi
  00384	5e		 pop	 esi
  00385	5b		 pop	 ebx
  00386	8b e5		 mov	 esp, ebp
  00388	5d		 pop	 ebp
  00389	c2 08 00	 ret	 8
?load_2d_terrain_contour_river_data@@YGHPAD0@Z ENDP	; load_2d_terrain_contour_river_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?get_2d_terrain_map_screen_dimensions@@YGXPAM000@Z
_TEXT	SEGMENT
_sxmin$ = 8						; size = 4
_symin$ = 12						; size = 4
_sxmax$ = 16						; size = 4
_symax$ = 20						; size = 4
?get_2d_terrain_map_screen_dimensions@@YGXPAM000@Z PROC	; get_2d_terrain_map_screen_dimensions, COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 450  : 
; 451  : 	*sxmin = terrain_2d_map_screen_xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _sxmin$[ebp]
  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xmin@@3MA
  00014	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 452  : 	*sxmax = terrain_2d_map_screen_xmax;

  00018	8b 45 10	 mov	 eax, DWORD PTR _sxmax$[ebp]
  0001b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xmax@@3MA
  00023	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 453  : 	*symin = terrain_2d_map_screen_ymin;

  00027	8b 45 0c	 mov	 eax, DWORD PTR _symin$[ebp]
  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ymin@@3MA
  00032	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 454  : 	*symax = terrain_2d_map_screen_ymax;

  00036	8b 45 14	 mov	 eax, DWORD PTR _symax$[ebp]
  00039	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ymax@@3MA
  00041	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 455  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 10 00	 ret	 16			; 00000010H
?get_2d_terrain_map_screen_dimensions@@YGXPAM000@Z ENDP	; get_2d_terrain_map_screen_dimensions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?get_2d_terrain_map_world_dimensions@@YGXPAM000@Z
_TEXT	SEGMENT
_wxmin$ = 8						; size = 4
_wzmin$ = 12						; size = 4
_wxmax$ = 16						; size = 4
_wzmax$ = 20						; size = 4
?get_2d_terrain_map_world_dimensions@@YGXPAM000@Z PROC	; get_2d_terrain_map_world_dimensions, COMDAT

; 436  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 437  : 
; 438  : 	*wxmin = terrain_2d_map_world_xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _wxmin$[ebp]
  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_xmin@@3MA
  00014	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 439  : 	*wxmax = terrain_2d_map_world_xmax;

  00018	8b 45 10	 mov	 eax, DWORD PTR _wxmax$[ebp]
  0001b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_xmax@@3MA
  00023	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 440  : 	*wzmin = terrain_2d_map_world_zmin;

  00027	8b 45 0c	 mov	 eax, DWORD PTR _wzmin$[ebp]
  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_zmin@@3MA
  00032	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 441  : 	*wzmax = terrain_2d_map_world_zmax;

  00036	8b 45 14	 mov	 eax, DWORD PTR _wzmax$[ebp]
  00039	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_zmax@@3MA
  00041	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 442  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 10 00	 ret	 16			; 00000010H
?get_2d_terrain_map_world_dimensions@@YGXPAM000@Z ENDP	; get_2d_terrain_map_world_dimensions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?set_2d_terrain_map_dimensions@@YGXMMMMMMMM@Z
_TEXT	SEGMENT
_wxmin$ = 8						; size = 4
_wzmin$ = 12						; size = 4
_wxmax$ = 16						; size = 4
_wzmax$ = 20						; size = 4
_sxmin$ = 24						; size = 4
_symin$ = 28						; size = 4
_sxmax$ = 32						; size = 4
_symax$ = 36						; size = 4
?set_2d_terrain_map_dimensions@@YGXMMMMMMMM@Z PROC	; set_2d_terrain_map_dimensions, COMDAT

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 399  : 
; 400  : 	terrain_2d_map_world_xmin = wxmin;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _wxmin$[ebp]
  0000e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_world_xmin@@3MA, xmm0

; 401  : 	terrain_2d_map_world_xmax = wxmax;

  00016	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _wxmax$[ebp]
  0001b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_world_xmax@@3MA, xmm0

; 402  : 	terrain_2d_map_world_xcentre = ( wxmin + wxmax ) / 2;

  00023	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _wxmin$[ebp]
  00028	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _wxmax$[ebp]
  0002d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00035	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_world_xcentre@@3MA, xmm0

; 403  : 
; 404  : 
; 405  : 	terrain_2d_map_world_zmin = wzmin;

  0003d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _wzmin$[ebp]
  00042	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_world_zmin@@3MA, xmm0

; 406  : 	terrain_2d_map_world_zmax = wzmax;

  0004a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _wzmax$[ebp]
  0004f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_world_zmax@@3MA, xmm0

; 407  : 	terrain_2d_map_world_zcentre = ( wzmin + wzmax ) / 2;

  00057	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _wzmin$[ebp]
  0005c	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _wzmax$[ebp]
  00061	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00069	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_world_zcentre@@3MA, xmm0

; 408  : 
; 409  : 
; 410  : 	terrain_2d_map_screen_xmin = sxmin;

  00071	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _sxmin$[ebp]
  00076	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_screen_xmin@@3MA, xmm0

; 411  : 	terrain_2d_map_screen_xmax = sxmax;

  0007e	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _sxmax$[ebp]
  00083	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_screen_xmax@@3MA, xmm0

; 412  : 	terrain_2d_map_screen_xcentre = ( sxmin + sxmax ) / 2;

  0008b	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _sxmin$[ebp]
  00090	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _sxmax$[ebp]
  00095	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0009d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA, xmm0

; 413  : 
; 414  : 
; 415  : 	terrain_2d_map_screen_ymin = symin;

  000a5	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _symin$[ebp]
  000aa	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_screen_ymin@@3MA, xmm0

; 416  : 	terrain_2d_map_screen_ymax = symax;

  000b2	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _symax$[ebp]
  000b7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_screen_ymax@@3MA, xmm0

; 417  : 	terrain_2d_map_screen_ycentre = ( symin + symax ) / 2;

  000bf	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _symin$[ebp]
  000c4	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _symax$[ebp]
  000c9	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  000d1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA, xmm0

; 418  : 
; 419  : 	//
; 420  : 	// Need to take into account the scale of the world vs the scale of the screen
; 421  : 	//
; 422  : 
; 423  : 	terrain_2d_map_screen_xscale = ( ( terrain_2d_map_screen_xmax - terrain_2d_map_screen_xcentre ) /

  000d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xmax@@3MA
  000e1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA
  000e9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?terrain_2d_map_world_xmax@@3MA
  000f1	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR ?terrain_2d_map_world_xcentre@@3MA
  000f9	f3 0f 5e c1	 divss	 xmm0, xmm1
  000fd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_screen_xscale@@3MA, xmm0

; 424  : 												( terrain_2d_map_world_xmax - terrain_2d_map_world_xcentre ) );
; 425  : 
; 426  : 	terrain_2d_map_screen_yscale = ( ( terrain_2d_map_screen_ymax - terrain_2d_map_screen_ycentre ) /

  00105	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ymax@@3MA
  0010d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA
  00115	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?terrain_2d_map_world_zmax@@3MA
  0011d	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR ?terrain_2d_map_world_zcentre@@3MA
  00125	f3 0f 5e c1	 divss	 xmm0, xmm1
  00129	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_2d_map_screen_yscale@@3MA, xmm0

; 427  : 												( terrain_2d_map_world_zmax - terrain_2d_map_world_zcentre ) );
; 428  : }

  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 20 00	 ret	 32			; 00000020H
?set_2d_terrain_map_dimensions@@YGXMMMMMMMM@Z ENDP	; set_2d_terrain_map_dimensions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?draw_2d_shaded_terrain_contour_map@@YGXXZ
_TEXT	SEGMENT
tv1210 = -1048						; size = 8
tv260 = -1048						; size = 4
tv256 = -1048						; size = 4
tv252 = -1048						; size = 4
tv248 = -1048						; size = 4
tv163 = -1048						; size = 4
tv157 = -1048						; size = 4
tv151 = -1048						; size = 4
tv145 = -1048						; size = 4
tv495 = -1044						; size = 4
tv329 = -1044						; size = 4
tv326 = -1044						; size = 4
tv261 = -1044						; size = 4
tv257 = -1044						; size = 4
tv253 = -1044						; size = 4
tv249 = -1044						; size = 4
tv176 = -1044						; size = 4
tv164 = -1044						; size = 4
tv158 = -1044						; size = 4
tv152 = -1044						; size = 4
tv146 = -1044						; size = 4
_citybase_colour$1 = -912				; size = 4
_lake_colour$2 = -908					; size = 4
_contour_end_index$3 = -904				; size = 4
_contour_start_index$4 = -900				; size = 4
_max_height$5 = -896					; size = 4
_min_height$6 = -892					; size = 4
_outcode_whole2$7 = -888				; size = 1
_outcode_whole1$8 = -887				; size = 1
_outcode_bottom$9 = -886				; size = 1
_outcode_top$10 = -885					; size = 1
_outcode_right$11 = -884				; size = 1
_outcode_left$12 = -883					; size = 1
_outcode_bottom_right$13 = -882				; size = 1
_outcode_top_left$14 = -881				; size = 1
_next_free_row$15 = -880				; size = 4
_x_indices$16 = -876					; size = 16
_z_indices$17 = -860					; size = 16
_elevation_data$18 = -844				; size = 64
_elevation_grid$19 = -780				; size = 16
_next_two_z_valid$20 = -764				; size = 4
_next_z_valid$21 = -760					; size = 4
_next_x_valid$22 = -756					; size = 4
_i$23 = -752						; size = 4
_j_coordinates$24 = -748				; size = 12
_i_coordinates$25 = -736				; size = 12
_map_resolution$26 = -724				; size = 4
_boundary_colour$ = -720				; size = 4
_road_colour$ = -716					; size = 4
_river_colour$ = -712					; size = 4
_vertices$ = -708					; size = 576
_new_total$ = -132					; size = 4
_mipmap_level$ = -128					; size = 4
_mipmap_index$ = -124					; size = 4
_count$ = -120						; size = 4
_mipmap_mask$ = -116					; size = 4
_ratio$ = -112						; size = 4
_screen_width$ = -108					; size = 4
_world_width$ = -104					; size = 4
_terrain_height_data$ = -100				; size = 4
_contour_shading_zoom_adjustment$ = -96			; size = 4
_terrain_height_data_z_distance$ = -92			; size = 4
_terrain_height_data_x_distance$ = -88			; size = 4
_mipmap_distance_factor$ = -84				; size = 4
_screen_j_increment$ = -80				; size = 4
_screen_i_increment$ = -76				; size = 4
_j2$ = -72						; size = 4
_j1$ = -68						; size = 4
_i2$ = -64						; size = 4
_i1$ = -60						; size = 4
_terrain_height_data_height$ = -56			; size = 4
_terrain_height_data_width$ = -52			; size = 4
_z_increment$ = -48					; size = 4
_x_increment$ = -44					; size = 4
_z_total$ = -40						; size = 4
_x_total$ = -36						; size = 4
_z_count$ = -32						; size = 4
_x_count$ = -28						; size = 4
_maximum_z$ = -24					; size = 4
_maximum_x$ = -20					; size = 4
_minimum_z$ = -16					; size = 4
_minimum_x$ = -12					; size = 4
_current_z$ = -8					; size = 4
_current_x$ = -4					; size = 4
?draw_2d_shaded_terrain_contour_map@@YGXXZ PROC		; draw_2d_shaded_terrain_contour_map, COMDAT

; 2154 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 04 00
	00		 sub	 esp, 1048		; 00000418H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2155 : 	int
; 2156 : 		current_x,
; 2157 : 		current_z,
; 2158 : 		minimum_x,
; 2159 : 		minimum_z,
; 2160 : 		maximum_x,
; 2161 : 		maximum_z,
; 2162 : 		x_count,
; 2163 : 		z_count,
; 2164 : 		x_total,
; 2165 : 		z_total,
; 2166 : 		x_increment,
; 2167 : 		z_increment,
; 2168 : 		terrain_height_data_width,
; 2169 : 		terrain_height_data_height;
; 2170 : 
; 2171 : 	float
; 2172 : 		i1,
; 2173 : 		i2,
; 2174 : 		j1,
; 2175 : 		j2,
; 2176 : 		screen_i_increment,
; 2177 : 		screen_j_increment,
; 2178 : 		mipmap_distance_factor,
; 2179 : 		terrain_height_data_x_distance,
; 2180 : 		terrain_height_data_z_distance,
; 2181 : 		contour_shading_zoom_adjustment,
; 2182 : 		*terrain_height_data;
; 2183 : 
; 2184 : 	float
; 2185 : 		world_width,
; 2186 : 		screen_width,
; 2187 : 		ratio;
; 2188 : 
; 2189 : 	unsigned int
; 2190 : 		mipmap_mask;
; 2191 : 
; 2192 : 	int
; 2193 : 		count,
; 2194 : 		mipmap_index,
; 2195 : 		mipmap_level,
; 2196 : 		new_total;
; 2197 : 
; 2198 : 	vertex
; 2199 : 		vertices[9];
; 2200 : 
; 2201 : 	real_colour
; 2202 : 		river_colour,
; 2203 : 		road_colour,
; 2204 : 		boundary_colour;
; 2205 : 
; 2206 : 	river_colour.red = 90;

  0000c	c6 85 3a fd ff
	ff 5a		 mov	 BYTE PTR _river_colour$[ebp+2], 90 ; 0000005aH

; 2207 : 	river_colour.green = 120;

  00013	c6 85 39 fd ff
	ff 78		 mov	 BYTE PTR _river_colour$[ebp+1], 120 ; 00000078H

; 2208 : 	river_colour.blue = 180;

  0001a	c6 85 38 fd ff
	ff b4		 mov	 BYTE PTR _river_colour$[ebp], 180 ; 000000b4H

; 2209 : 	river_colour.alpha = 192;

  00021	c6 85 3b fd ff
	ff c0		 mov	 BYTE PTR _river_colour$[ebp+3], 192 ; 000000c0H

; 2210 : 
; 2211 : 	road_colour.red = 0;

  00028	c6 85 36 fd ff
	ff 00		 mov	 BYTE PTR _road_colour$[ebp+2], 0

; 2212 : 	road_colour.green = 0;

  0002f	c6 85 35 fd ff
	ff 00		 mov	 BYTE PTR _road_colour$[ebp+1], 0

; 2213 : 	road_colour.blue = 0;

  00036	c6 85 34 fd ff
	ff 00		 mov	 BYTE PTR _road_colour$[ebp], 0

; 2214 : 	road_colour.alpha = 255;

  0003d	c6 85 37 fd ff
	ff ff		 mov	 BYTE PTR _road_colour$[ebp+3], 255 ; 000000ffH

; 2215 : 
; 2216 : 	boundary_colour.red = 200;

  00044	c6 85 32 fd ff
	ff c8		 mov	 BYTE PTR _boundary_colour$[ebp+2], 200 ; 000000c8H

; 2217 : 	boundary_colour.green = 20;

  0004b	c6 85 31 fd ff
	ff 14		 mov	 BYTE PTR _boundary_colour$[ebp+1], 20 ; 00000014H

; 2218 : 	boundary_colour.blue = 0;

  00052	c6 85 30 fd ff
	ff 00		 mov	 BYTE PTR _boundary_colour$[ebp], 0

; 2219 : 	boundary_colour.alpha = 255;

  00059	c6 85 33 fd ff
	ff ff		 mov	 BYTE PTR _boundary_colour$[ebp+3], 255 ; 000000ffH

; 2220 : 
; 2221 : 	//
; 2222 : 	// Set up the rendering states
; 2223 : 	//
; 2224 : 
; 2225 : 	set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, FALSE, FALSE );

  00060	6a 00		 push	 0
  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	6a 00		 push	 0
  00068	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 2226 : 
; 2227 : 	set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_NONE );

  0006d	6a 01		 push	 1
  0006f	6a 16		 push	 22			; 00000016H
  00071	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2228 : 	set_d3d_int_state ( D3DRENDERSTATE_SPECULARENABLE, FALSE );

  00076	6a 00		 push	 0
  00078	6a 1d		 push	 29			; 0000001dH
  0007a	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2229 : 	set_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

  0007f	6a 02		 push	 2
  00081	6a 09		 push	 9
  00083	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2230 : 
; 2231 : 	set_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );

  00088	6a 01		 push	 1
  0008a	6a 01		 push	 1
  0008c	6a 00		 push	 0
  0008e	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 2232 : 	set_d3d_texture ( 0, NULL );

  00093	6a 00		 push	 0
  00095	6a 00		 push	 0
  00097	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture

; 2233 : 
; 2234 : 	set_d3d_fog_face_intensity ( 255 );

  0009c	68 ff 00 00 00	 push	 255			; 000000ffH
  000a1	e8 00 00 00 00	 call	 ?set_d3d_fog_face_intensity@@YGXH@Z ; set_d3d_fog_face_intensity

; 2235 : 
; 2236 : 	contour_height_difference_reciprocals = ( float * ) safe_malloc ( number_of_contour_height_lines * sizeof ( float ) );

  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_contour_height_lines@@3HA ; number_of_contour_height_lines
  000ab	c1 e0 02	 shl	 eax, 2
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000b4	a3 00 00 00 00	 mov	 DWORD PTR ?contour_height_difference_reciprocals@@3PAMA, eax ; contour_height_difference_reciprocals

; 2237 : 
; 2238 : 	for ( count = 0; count < ( number_of_contour_height_lines - 1 ); count++ )

  000b9	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000c0	eb 09		 jmp	 SHORT $LN4@draw_2d_sh
$LN2@draw_2d_sh:
  000c2	8b 45 88	 mov	 eax, DWORD PTR _count$[ebp]
  000c5	83 c0 01	 add	 eax, 1
  000c8	89 45 88	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_2d_sh:
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_contour_height_lines@@3HA ; number_of_contour_height_lines
  000d0	83 e8 01	 sub	 eax, 1
  000d3	39 45 88	 cmp	 DWORD PTR _count$[ebp], eax
  000d6	7d 41		 jge	 SHORT $LN3@draw_2d_sh

; 2239 : 	{
; 2240 : 
; 2241 : 		contour_height_difference_reciprocals[count] = 1.0 / ( terrain_2d_contour_heights[count+1] - terrain_2d_contour_heights[count] );

  000d8	8b 45 88	 mov	 eax, DWORD PTR _count$[ebp]
  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_contour_heights@@3PAMA ; terrain_2d_contour_heights
  000e1	8b 55 88	 mov	 edx, DWORD PTR _count$[ebp]
  000e4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?terrain_2d_contour_heights@@3PAMA ; terrain_2d_contour_heights
  000ea	f3 0f 10 44 81
	04		 movss	 xmm0, DWORD PTR [ecx+eax*4+4]
  000f0	f3 0f 5c 04 96	 subss	 xmm0, DWORD PTR [esi+edx*4]
  000f5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000f9	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00101	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00105	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00109	8b 45 88	 mov	 eax, DWORD PTR _count$[ebp]
  0010c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_height_difference_reciprocals@@3PAMA ; contour_height_difference_reciprocals
  00112	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 2242 : 	}

  00117	eb a9		 jmp	 SHORT $LN2@draw_2d_sh
$LN3@draw_2d_sh:

; 2243 : 
; 2244 : 	d3d_in_order_rendering = TRUE;

  00119	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_in_order_rendering@@3HA, 1 ; d3d_in_order_rendering

; 2245 : 
; 2246 : 	//
; 2247 : 	// Set up the viewport
; 2248 : 	//
; 2249 : 
; 2250 : 	set_viewport ( terrain_2d_map_screen_xmin, terrain_2d_map_screen_ymin, terrain_2d_map_screen_xmax, terrain_2d_map_screen_ymax );

  00123	51		 push	 ecx
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ymax@@3MA
  0012c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00131	51		 push	 ecx
  00132	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xmax@@3MA
  0013a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013f	51		 push	 ecx
  00140	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ymin@@3MA
  00148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014d	51		 push	 ecx
  0014e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xmin@@3MA
  00156	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015b	e8 00 00 00 00	 call	 ?set_viewport@@YGXMMMM@Z ; set_viewport

; 2251 : 
; 2252 : 	//
; 2253 : 	// Set up the bounds to render between
; 2254 : 	//
; 2255 : 
; 2256 : 	minimum_x = terrain_2d_map_world_xmin / terrain_3d_simple_elevation_x_grid_size;

  00160	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_xmin@@3MA
  00168	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  00170	f3 0f 2c c0	 cvttss2si eax, xmm0
  00174	89 45 f4	 mov	 DWORD PTR _minimum_x$[ebp], eax

; 2257 : 	maximum_x = terrain_2d_map_world_xmax / terrain_3d_simple_elevation_x_grid_size;

  00177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_xmax@@3MA
  0017f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  00187	f3 0f 2c c0	 cvttss2si eax, xmm0
  0018b	89 45 ec	 mov	 DWORD PTR _maximum_x$[ebp], eax

; 2258 : 	minimum_z = terrain_2d_map_world_zmin / terrain_3d_simple_elevation_z_grid_size;

  0018e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_zmin@@3MA
  00196	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size@@3MA
  0019e	f3 0f 2c c0	 cvttss2si eax, xmm0
  001a2	89 45 f0	 mov	 DWORD PTR _minimum_z$[ebp], eax

; 2259 : 	maximum_z = terrain_2d_map_world_zmax / terrain_3d_simple_elevation_z_grid_size;

  001a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_zmax@@3MA
  001ad	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size@@3MA
  001b5	f3 0f 2c c0	 cvttss2si eax, xmm0
  001b9	89 45 e8	 mov	 DWORD PTR _maximum_z$[ebp], eax

; 2260 : 
; 2261 : 	minimum_x = bound ( minimum_x, 0, ( terrain_3d_simple_elevation_width - 1 ) );

  001bc	83 7d f4 00	 cmp	 DWORD PTR _minimum_x$[ebp], 0
  001c0	7d 0c		 jge	 SHORT $LN62@draw_2d_sh
  001c2	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv146[ebp], 0
  001cc	eb 33		 jmp	 SHORT $LN63@draw_2d_sh
$LN62@draw_2d_sh:
  001ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  001d3	83 e8 01	 sub	 eax, 1
  001d6	39 45 f4	 cmp	 DWORD PTR _minimum_x$[ebp], eax
  001d9	7e 11		 jle	 SHORT $LN60@draw_2d_sh
  001db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  001e1	83 e9 01	 sub	 ecx, 1
  001e4	89 8d e8 fb ff
	ff		 mov	 DWORD PTR tv145[ebp], ecx
  001ea	eb 09		 jmp	 SHORT $LN61@draw_2d_sh
$LN60@draw_2d_sh:
  001ec	8b 55 f4	 mov	 edx, DWORD PTR _minimum_x$[ebp]
  001ef	89 95 e8 fb ff
	ff		 mov	 DWORD PTR tv145[ebp], edx
$LN61@draw_2d_sh:
  001f5	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR tv145[ebp]
  001fb	89 85 ec fb ff
	ff		 mov	 DWORD PTR tv146[ebp], eax
$LN63@draw_2d_sh:
  00201	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv146[ebp]
  00207	89 4d f4	 mov	 DWORD PTR _minimum_x$[ebp], ecx

; 2262 : 	minimum_z = bound ( minimum_z, 0, ( terrain_3d_simple_elevation_height - 1 ) );

  0020a	83 7d f0 00	 cmp	 DWORD PTR _minimum_z$[ebp], 0
  0020e	7d 0c		 jge	 SHORT $LN66@draw_2d_sh
  00210	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], 0
  0021a	eb 33		 jmp	 SHORT $LN67@draw_2d_sh
$LN66@draw_2d_sh:
  0021c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_height@@3HA ; terrain_3d_simple_elevation_height
  00221	83 e8 01	 sub	 eax, 1
  00224	39 45 f0	 cmp	 DWORD PTR _minimum_z$[ebp], eax
  00227	7e 11		 jle	 SHORT $LN64@draw_2d_sh
  00229	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_simple_elevation_height@@3HA ; terrain_3d_simple_elevation_height
  0022f	83 e9 01	 sub	 ecx, 1
  00232	89 8d e8 fb ff
	ff		 mov	 DWORD PTR tv151[ebp], ecx
  00238	eb 09		 jmp	 SHORT $LN65@draw_2d_sh
$LN64@draw_2d_sh:
  0023a	8b 55 f0	 mov	 edx, DWORD PTR _minimum_z$[ebp]
  0023d	89 95 e8 fb ff
	ff		 mov	 DWORD PTR tv151[ebp], edx
$LN65@draw_2d_sh:
  00243	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR tv151[ebp]
  00249	89 85 ec fb ff
	ff		 mov	 DWORD PTR tv152[ebp], eax
$LN67@draw_2d_sh:
  0024f	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv152[ebp]
  00255	89 4d f0	 mov	 DWORD PTR _minimum_z$[ebp], ecx

; 2263 : 	maximum_x = bound ( maximum_x, 0, ( terrain_3d_simple_elevation_width - 1 ) );

  00258	83 7d ec 00	 cmp	 DWORD PTR _maximum_x$[ebp], 0
  0025c	7d 0c		 jge	 SHORT $LN70@draw_2d_sh
  0025e	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
  00268	eb 33		 jmp	 SHORT $LN71@draw_2d_sh
$LN70@draw_2d_sh:
  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  0026f	83 e8 01	 sub	 eax, 1
  00272	39 45 ec	 cmp	 DWORD PTR _maximum_x$[ebp], eax
  00275	7e 11		 jle	 SHORT $LN68@draw_2d_sh
  00277	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  0027d	83 e9 01	 sub	 ecx, 1
  00280	89 8d e8 fb ff
	ff		 mov	 DWORD PTR tv157[ebp], ecx
  00286	eb 09		 jmp	 SHORT $LN69@draw_2d_sh
$LN68@draw_2d_sh:
  00288	8b 55 ec	 mov	 edx, DWORD PTR _maximum_x$[ebp]
  0028b	89 95 e8 fb ff
	ff		 mov	 DWORD PTR tv157[ebp], edx
$LN69@draw_2d_sh:
  00291	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR tv157[ebp]
  00297	89 85 ec fb ff
	ff		 mov	 DWORD PTR tv158[ebp], eax
$LN71@draw_2d_sh:
  0029d	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv158[ebp]
  002a3	89 4d ec	 mov	 DWORD PTR _maximum_x$[ebp], ecx

; 2264 : 	maximum_z = bound ( maximum_z, 0, ( terrain_3d_simple_elevation_height - 1 ) );

  002a6	83 7d e8 00	 cmp	 DWORD PTR _maximum_z$[ebp], 0
  002aa	7d 0c		 jge	 SHORT $LN74@draw_2d_sh
  002ac	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv164[ebp], 0
  002b6	eb 33		 jmp	 SHORT $LN75@draw_2d_sh
$LN74@draw_2d_sh:
  002b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_height@@3HA ; terrain_3d_simple_elevation_height
  002bd	83 e8 01	 sub	 eax, 1
  002c0	39 45 e8	 cmp	 DWORD PTR _maximum_z$[ebp], eax
  002c3	7e 11		 jle	 SHORT $LN72@draw_2d_sh
  002c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_simple_elevation_height@@3HA ; terrain_3d_simple_elevation_height
  002cb	83 e9 01	 sub	 ecx, 1
  002ce	89 8d e8 fb ff
	ff		 mov	 DWORD PTR tv163[ebp], ecx
  002d4	eb 09		 jmp	 SHORT $LN73@draw_2d_sh
$LN72@draw_2d_sh:
  002d6	8b 55 e8	 mov	 edx, DWORD PTR _maximum_z$[ebp]
  002d9	89 95 e8 fb ff
	ff		 mov	 DWORD PTR tv163[ebp], edx
$LN73@draw_2d_sh:
  002df	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR tv163[ebp]
  002e5	89 85 ec fb ff
	ff		 mov	 DWORD PTR tv164[ebp], eax
$LN75@draw_2d_sh:
  002eb	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv164[ebp]
  002f1	89 4d e8	 mov	 DWORD PTR _maximum_z$[ebp], ecx

; 2265 : 
; 2266 : 	x_total = abs ( maximum_x - minimum_x ) + 1;

  002f4	8b 45 ec	 mov	 eax, DWORD PTR _maximum_x$[ebp]
  002f7	2b 45 f4	 sub	 eax, DWORD PTR _minimum_x$[ebp]
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 _abs
  00300	83 c4 04	 add	 esp, 4
  00303	83 c0 01	 add	 eax, 1
  00306	89 45 dc	 mov	 DWORD PTR _x_total$[ebp], eax

; 2267 : 	z_total = abs ( maximum_z - minimum_z ) + 1;

  00309	8b 45 e8	 mov	 eax, DWORD PTR _maximum_z$[ebp]
  0030c	2b 45 f0	 sub	 eax, DWORD PTR _minimum_z$[ebp]
  0030f	50		 push	 eax
  00310	e8 00 00 00 00	 call	 _abs
  00315	83 c4 04	 add	 esp, 4
  00318	83 c0 01	 add	 eax, 1
  0031b	89 45 d8	 mov	 DWORD PTR _z_total$[ebp], eax

; 2268 : 
; 2269 : 	if ( maximum_x > minimum_x )	x_increment = 1;

  0031e	8b 45 ec	 mov	 eax, DWORD PTR _maximum_x$[ebp]
  00321	3b 45 f4	 cmp	 eax, DWORD PTR _minimum_x$[ebp]
  00324	7e 09		 jle	 SHORT $LN40@draw_2d_sh
  00326	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _x_increment$[ebp], 1
  0032d	eb 07		 jmp	 SHORT $LN41@draw_2d_sh
$LN40@draw_2d_sh:

; 2270 : 	else									x_increment = -1;

  0032f	c7 45 d4 ff ff
	ff ff		 mov	 DWORD PTR _x_increment$[ebp], -1
$LN41@draw_2d_sh:

; 2271 : 
; 2272 : 	if ( maximum_z > minimum_z )	z_increment = 1;

  00336	8b 45 e8	 mov	 eax, DWORD PTR _maximum_z$[ebp]
  00339	3b 45 f0	 cmp	 eax, DWORD PTR _minimum_z$[ebp]
  0033c	7e 09		 jle	 SHORT $LN42@draw_2d_sh
  0033e	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _z_increment$[ebp], 1
  00345	eb 07		 jmp	 SHORT $LN43@draw_2d_sh
$LN42@draw_2d_sh:

; 2273 : 	else									z_increment = -1;

  00347	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _z_increment$[ebp], -1
$LN43@draw_2d_sh:

; 2274 : 
; 2275 : 	//
; 2276 : 	// Find out how many metres per pixel
; 2277 : 	//
; 2278 : 
; 2279 : 	{
; 2280 : 		int map_resolution = (command_line_campaign_map == 2) ? 120 : 60;

  0034e	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?command_line_campaign_map@@3HA, 2 ; command_line_campaign_map
  00355	75 0c		 jne	 SHORT $LN76@draw_2d_sh
  00357	c7 85 ec fb ff
	ff 78 00 00 00	 mov	 DWORD PTR tv176[ebp], 120 ; 00000078H
  00361	eb 0a		 jmp	 SHORT $LN77@draw_2d_sh
$LN76@draw_2d_sh:
  00363	c7 85 ec fb ff
	ff 3c 00 00 00	 mov	 DWORD PTR tv176[ebp], 60 ; 0000003cH
$LN77@draw_2d_sh:
  0036d	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR tv176[ebp]
  00373	89 85 2c fd ff
	ff		 mov	 DWORD PTR _map_resolution$26[ebp], eax

; 2281 : 		
; 2282 : 		new_total = x_total;

  00379	8b 45 dc	 mov	 eax, DWORD PTR _x_total$[ebp]
  0037c	89 85 7c ff ff
	ff		 mov	 DWORD PTR _new_total$[ebp], eax

; 2283 : 
; 2284 : 		screen_width = fabs ( terrain_2d_map_screen_xmax - terrain_2d_map_screen_xmin );

  00382	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xmax@@3MA
  0038a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xmin@@3MA
  00392	51		 push	 ecx
  00393	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00398	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0039d	d9 5d 94	 fstp	 DWORD PTR _screen_width$[ebp]

; 2285 : 
; 2286 : 		world_width = fabs ( terrain_2d_map_world_xmax - terrain_2d_map_world_xmin );

  003a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_xmax@@3MA
  003a8	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_xmin@@3MA
  003b0	51		 push	 ecx
  003b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b6	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  003bb	d9 5d 98	 fstp	 DWORD PTR _world_width$[ebp]

; 2287 : 		world_width /= terrain_3d_simple_elevation_x_grid_size;

  003be	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _world_width$[ebp]
  003c3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  003cb	f3 0f 11 45 98	 movss	 DWORD PTR _world_width$[ebp], xmm0

; 2288 : 
; 2289 : 		ratio = world_width;

  003d0	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _world_width$[ebp]
  003d5	f3 0f 11 45 90	 movss	 DWORD PTR _ratio$[ebp], xmm0

; 2290 : 
; 2291 : 		mipmap_level = 1;

  003da	c7 45 80 01 00
	00 00		 mov	 DWORD PTR _mipmap_level$[ebp], 1

; 2292 : 		mipmap_mask = 0xffffffff;

  003e1	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _mipmap_mask$[ebp], -1

; 2293 : 
; 2294 : 		mipmap_index = -1;

  003e8	c7 45 84 ff ff
	ff ff		 mov	 DWORD PTR _mipmap_index$[ebp], -1

; 2295 : 		terrain_height_data_width = terrain_3d_simple_elevation_width - 1;

  003ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  003f4	83 e8 01	 sub	 eax, 1
  003f7	89 45 cc	 mov	 DWORD PTR _terrain_height_data_width$[ebp], eax

; 2296 : 		terrain_height_data_height = terrain_3d_simple_elevation_height - 1;

  003fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_height@@3HA ; terrain_3d_simple_elevation_height
  003ff	83 e8 01	 sub	 eax, 1
  00402	89 45 c8	 mov	 DWORD PTR _terrain_height_data_height$[ebp], eax
$LN5@draw_2d_sh:

; 2297 : 
; 2298 : 		
; 2299 : 
; 2300 : 		while ( ( ratio > map_resolution ) && ( mipmap_index < ( contour_map_number_of_mipmaps - 1 ) ) && ( mipmap_level < 64 ) )

  00405	f3 0f 2a 85 2c
	fd ff ff	 cvtsi2ss xmm0, DWORD PTR _map_resolution$26[ebp]
  0040d	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _ratio$[ebp]
  00412	0f 2f c8	 comiss	 xmm1, xmm0
  00415	76 56		 jbe	 SHORT $LN6@draw_2d_sh
  00417	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_number_of_mipmaps@@3HA ; contour_map_number_of_mipmaps
  0041c	83 e8 01	 sub	 eax, 1
  0041f	39 45 84	 cmp	 DWORD PTR _mipmap_index$[ebp], eax
  00422	7d 49		 jge	 SHORT $LN6@draw_2d_sh
  00424	83 7d 80 40	 cmp	 DWORD PTR _mipmap_level$[ebp], 64 ; 00000040H
  00428	7d 43		 jge	 SHORT $LN6@draw_2d_sh

; 2301 : 		{
; 2302 : 
; 2303 : 			mipmap_level *= 2;

  0042a	8b 45 80	 mov	 eax, DWORD PTR _mipmap_level$[ebp]
  0042d	d1 e0		 shl	 eax, 1
  0042f	89 45 80	 mov	 DWORD PTR _mipmap_level$[ebp], eax

; 2304 : 			ratio /= 2;

  00432	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _ratio$[ebp]
  00437	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0043f	f3 0f 11 45 90	 movss	 DWORD PTR _ratio$[ebp], xmm0

; 2305 : 			mipmap_mask <<= 1;

  00444	8b 45 8c	 mov	 eax, DWORD PTR _mipmap_mask$[ebp]
  00447	d1 e0		 shl	 eax, 1
  00449	89 45 8c	 mov	 DWORD PTR _mipmap_mask$[ebp], eax

; 2306 : 
; 2307 : 			mipmap_index++;

  0044c	8b 45 84	 mov	 eax, DWORD PTR _mipmap_index$[ebp]
  0044f	83 c0 01	 add	 eax, 1
  00452	89 45 84	 mov	 DWORD PTR _mipmap_index$[ebp], eax

; 2308 : 			terrain_height_data_width /= 2;

  00455	8b 45 cc	 mov	 eax, DWORD PTR _terrain_height_data_width$[ebp]
  00458	99		 cdq
  00459	2b c2		 sub	 eax, edx
  0045b	d1 f8		 sar	 eax, 1
  0045d	89 45 cc	 mov	 DWORD PTR _terrain_height_data_width$[ebp], eax

; 2309 : 			terrain_height_data_height /= 2;

  00460	8b 45 c8	 mov	 eax, DWORD PTR _terrain_height_data_height$[ebp]
  00463	99		 cdq
  00464	2b c2		 sub	 eax, edx
  00466	d1 f8		 sar	 eax, 1
  00468	89 45 c8	 mov	 DWORD PTR _terrain_height_data_height$[ebp], eax

; 2310 : 		}

  0046b	eb 98		 jmp	 SHORT $LN5@draw_2d_sh
$LN6@draw_2d_sh:

; 2311 : 
; 2312 : 		//
; 2313 : 		// Now adjust the increments & starting & ending positions
; 2314 : 		//
; 2315 : 
; 2316 : 		mipmap_distance_factor = mipmap_level;

  0046d	f3 0f 2a 45 80	 cvtsi2ss xmm0, DWORD PTR _mipmap_level$[ebp]
  00472	f3 0f 11 45 ac	 movss	 DWORD PTR _mipmap_distance_factor$[ebp], xmm0

; 2317 : 
; 2318 : 		x_increment *= mipmap_level;

  00477	8b 45 d4	 mov	 eax, DWORD PTR _x_increment$[ebp]
  0047a	0f af 45 80	 imul	 eax, DWORD PTR _mipmap_level$[ebp]
  0047e	89 45 d4	 mov	 DWORD PTR _x_increment$[ebp], eax

; 2319 : 		z_increment *= mipmap_level;

  00481	8b 45 d0	 mov	 eax, DWORD PTR _z_increment$[ebp]
  00484	0f af 45 80	 imul	 eax, DWORD PTR _mipmap_level$[ebp]
  00488	89 45 d0	 mov	 DWORD PTR _z_increment$[ebp], eax

; 2320 : 
; 2321 : 		minimum_x &= mipmap_mask;

  0048b	8b 45 f4	 mov	 eax, DWORD PTR _minimum_x$[ebp]
  0048e	23 45 8c	 and	 eax, DWORD PTR _mipmap_mask$[ebp]
  00491	89 45 f4	 mov	 DWORD PTR _minimum_x$[ebp], eax

; 2322 : 		minimum_x -= x_increment;

  00494	8b 45 f4	 mov	 eax, DWORD PTR _minimum_x$[ebp]
  00497	2b 45 d4	 sub	 eax, DWORD PTR _x_increment$[ebp]
  0049a	89 45 f4	 mov	 DWORD PTR _minimum_x$[ebp], eax

; 2323 : 
; 2324 : 		maximum_x &= mipmap_mask;

  0049d	8b 45 ec	 mov	 eax, DWORD PTR _maximum_x$[ebp]
  004a0	23 45 8c	 and	 eax, DWORD PTR _mipmap_mask$[ebp]
  004a3	89 45 ec	 mov	 DWORD PTR _maximum_x$[ebp], eax

; 2325 : 		maximum_x += x_increment;

  004a6	8b 45 ec	 mov	 eax, DWORD PTR _maximum_x$[ebp]
  004a9	03 45 d4	 add	 eax, DWORD PTR _x_increment$[ebp]
  004ac	89 45 ec	 mov	 DWORD PTR _maximum_x$[ebp], eax

; 2326 : 
; 2327 : 		minimum_z &= mipmap_mask;

  004af	8b 45 f0	 mov	 eax, DWORD PTR _minimum_z$[ebp]
  004b2	23 45 8c	 and	 eax, DWORD PTR _mipmap_mask$[ebp]
  004b5	89 45 f0	 mov	 DWORD PTR _minimum_z$[ebp], eax

; 2328 : 		minimum_z -= z_increment;

  004b8	8b 45 f0	 mov	 eax, DWORD PTR _minimum_z$[ebp]
  004bb	2b 45 d0	 sub	 eax, DWORD PTR _z_increment$[ebp]
  004be	89 45 f0	 mov	 DWORD PTR _minimum_z$[ebp], eax

; 2329 : 
; 2330 : 		maximum_z &= mipmap_mask;

  004c1	8b 45 e8	 mov	 eax, DWORD PTR _maximum_z$[ebp]
  004c4	23 45 8c	 and	 eax, DWORD PTR _mipmap_mask$[ebp]
  004c7	89 45 e8	 mov	 DWORD PTR _maximum_z$[ebp], eax

; 2331 : 		maximum_z += z_increment;

  004ca	8b 45 e8	 mov	 eax, DWORD PTR _maximum_z$[ebp]
  004cd	03 45 d0	 add	 eax, DWORD PTR _z_increment$[ebp]
  004d0	89 45 e8	 mov	 DWORD PTR _maximum_z$[ebp], eax

; 2332 : 
; 2333 : 		minimum_x /= mipmap_level;

  004d3	8b 45 f4	 mov	 eax, DWORD PTR _minimum_x$[ebp]
  004d6	99		 cdq
  004d7	f7 7d 80	 idiv	 DWORD PTR _mipmap_level$[ebp]
  004da	89 45 f4	 mov	 DWORD PTR _minimum_x$[ebp], eax

; 2334 : 		maximum_x /= mipmap_level;

  004dd	8b 45 ec	 mov	 eax, DWORD PTR _maximum_x$[ebp]
  004e0	99		 cdq
  004e1	f7 7d 80	 idiv	 DWORD PTR _mipmap_level$[ebp]
  004e4	89 45 ec	 mov	 DWORD PTR _maximum_x$[ebp], eax

; 2335 : 		x_increment /= mipmap_level;

  004e7	8b 45 d4	 mov	 eax, DWORD PTR _x_increment$[ebp]
  004ea	99		 cdq
  004eb	f7 7d 80	 idiv	 DWORD PTR _mipmap_level$[ebp]
  004ee	89 45 d4	 mov	 DWORD PTR _x_increment$[ebp], eax

; 2336 : 
; 2337 : 		minimum_z /= mipmap_level;

  004f1	8b 45 f0	 mov	 eax, DWORD PTR _minimum_z$[ebp]
  004f4	99		 cdq
  004f5	f7 7d 80	 idiv	 DWORD PTR _mipmap_level$[ebp]
  004f8	89 45 f0	 mov	 DWORD PTR _minimum_z$[ebp], eax

; 2338 : 		maximum_z /= mipmap_level;

  004fb	8b 45 e8	 mov	 eax, DWORD PTR _maximum_z$[ebp]
  004fe	99		 cdq
  004ff	f7 7d 80	 idiv	 DWORD PTR _mipmap_level$[ebp]
  00502	89 45 e8	 mov	 DWORD PTR _maximum_z$[ebp], eax

; 2339 : 		z_increment /= mipmap_level;

  00505	8b 45 d0	 mov	 eax, DWORD PTR _z_increment$[ebp]
  00508	99		 cdq
  00509	f7 7d 80	 idiv	 DWORD PTR _mipmap_level$[ebp]
  0050c	89 45 d0	 mov	 DWORD PTR _z_increment$[ebp], eax

; 2340 : 
; 2341 : 		minimum_x = bound ( minimum_x, 0, ( terrain_height_data_width ) );

  0050f	83 7d f4 00	 cmp	 DWORD PTR _minimum_x$[ebp], 0
  00513	7d 0c		 jge	 SHORT $LN80@draw_2d_sh
  00515	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv249[ebp], 0
  0051f	eb 28		 jmp	 SHORT $LN81@draw_2d_sh
$LN80@draw_2d_sh:
  00521	8b 45 f4	 mov	 eax, DWORD PTR _minimum_x$[ebp]
  00524	3b 45 cc	 cmp	 eax, DWORD PTR _terrain_height_data_width$[ebp]
  00527	7e 0b		 jle	 SHORT $LN78@draw_2d_sh
  00529	8b 4d cc	 mov	 ecx, DWORD PTR _terrain_height_data_width$[ebp]
  0052c	89 8d e8 fb ff
	ff		 mov	 DWORD PTR tv248[ebp], ecx
  00532	eb 09		 jmp	 SHORT $LN79@draw_2d_sh
$LN78@draw_2d_sh:
  00534	8b 55 f4	 mov	 edx, DWORD PTR _minimum_x$[ebp]
  00537	89 95 e8 fb ff
	ff		 mov	 DWORD PTR tv248[ebp], edx
$LN79@draw_2d_sh:
  0053d	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR tv248[ebp]
  00543	89 85 ec fb ff
	ff		 mov	 DWORD PTR tv249[ebp], eax
$LN81@draw_2d_sh:
  00549	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv249[ebp]
  0054f	89 4d f4	 mov	 DWORD PTR _minimum_x$[ebp], ecx

; 2342 : 		maximum_x = bound ( maximum_x, 0, ( terrain_height_data_width ) );

  00552	83 7d ec 00	 cmp	 DWORD PTR _maximum_x$[ebp], 0
  00556	7d 0c		 jge	 SHORT $LN84@draw_2d_sh
  00558	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv253[ebp], 0
  00562	eb 28		 jmp	 SHORT $LN85@draw_2d_sh
$LN84@draw_2d_sh:
  00564	8b 45 ec	 mov	 eax, DWORD PTR _maximum_x$[ebp]
  00567	3b 45 cc	 cmp	 eax, DWORD PTR _terrain_height_data_width$[ebp]
  0056a	7e 0b		 jle	 SHORT $LN82@draw_2d_sh
  0056c	8b 4d cc	 mov	 ecx, DWORD PTR _terrain_height_data_width$[ebp]
  0056f	89 8d e8 fb ff
	ff		 mov	 DWORD PTR tv252[ebp], ecx
  00575	eb 09		 jmp	 SHORT $LN83@draw_2d_sh
$LN82@draw_2d_sh:
  00577	8b 55 ec	 mov	 edx, DWORD PTR _maximum_x$[ebp]
  0057a	89 95 e8 fb ff
	ff		 mov	 DWORD PTR tv252[ebp], edx
$LN83@draw_2d_sh:
  00580	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR tv252[ebp]
  00586	89 85 ec fb ff
	ff		 mov	 DWORD PTR tv253[ebp], eax
$LN85@draw_2d_sh:
  0058c	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv253[ebp]
  00592	89 4d ec	 mov	 DWORD PTR _maximum_x$[ebp], ecx

; 2343 : 		minimum_z = bound ( minimum_z, 0, ( terrain_height_data_height ) );

  00595	83 7d f0 00	 cmp	 DWORD PTR _minimum_z$[ebp], 0
  00599	7d 0c		 jge	 SHORT $LN88@draw_2d_sh
  0059b	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv257[ebp], 0
  005a5	eb 28		 jmp	 SHORT $LN89@draw_2d_sh
$LN88@draw_2d_sh:
  005a7	8b 45 f0	 mov	 eax, DWORD PTR _minimum_z$[ebp]
  005aa	3b 45 c8	 cmp	 eax, DWORD PTR _terrain_height_data_height$[ebp]
  005ad	7e 0b		 jle	 SHORT $LN86@draw_2d_sh
  005af	8b 4d c8	 mov	 ecx, DWORD PTR _terrain_height_data_height$[ebp]
  005b2	89 8d e8 fb ff
	ff		 mov	 DWORD PTR tv256[ebp], ecx
  005b8	eb 09		 jmp	 SHORT $LN87@draw_2d_sh
$LN86@draw_2d_sh:
  005ba	8b 55 f0	 mov	 edx, DWORD PTR _minimum_z$[ebp]
  005bd	89 95 e8 fb ff
	ff		 mov	 DWORD PTR tv256[ebp], edx
$LN87@draw_2d_sh:
  005c3	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR tv256[ebp]
  005c9	89 85 ec fb ff
	ff		 mov	 DWORD PTR tv257[ebp], eax
$LN89@draw_2d_sh:
  005cf	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv257[ebp]
  005d5	89 4d f0	 mov	 DWORD PTR _minimum_z$[ebp], ecx

; 2344 : 		maximum_z = bound ( maximum_z, 0, ( terrain_height_data_height ) );

  005d8	83 7d e8 00	 cmp	 DWORD PTR _maximum_z$[ebp], 0
  005dc	7d 0c		 jge	 SHORT $LN92@draw_2d_sh
  005de	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv261[ebp], 0
  005e8	eb 28		 jmp	 SHORT $LN93@draw_2d_sh
$LN92@draw_2d_sh:
  005ea	8b 45 e8	 mov	 eax, DWORD PTR _maximum_z$[ebp]
  005ed	3b 45 c8	 cmp	 eax, DWORD PTR _terrain_height_data_height$[ebp]
  005f0	7e 0b		 jle	 SHORT $LN90@draw_2d_sh
  005f2	8b 4d c8	 mov	 ecx, DWORD PTR _terrain_height_data_height$[ebp]
  005f5	89 8d e8 fb ff
	ff		 mov	 DWORD PTR tv260[ebp], ecx
  005fb	eb 09		 jmp	 SHORT $LN91@draw_2d_sh
$LN90@draw_2d_sh:
  005fd	8b 55 e8	 mov	 edx, DWORD PTR _maximum_z$[ebp]
  00600	89 95 e8 fb ff
	ff		 mov	 DWORD PTR tv260[ebp], edx
$LN91@draw_2d_sh:
  00606	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR tv260[ebp]
  0060c	89 85 ec fb ff
	ff		 mov	 DWORD PTR tv261[ebp], eax
$LN93@draw_2d_sh:
  00612	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv261[ebp]
  00618	89 4d e8	 mov	 DWORD PTR _maximum_z$[ebp], ecx

; 2345 : 
; 2346 : 		x_total = abs ( maximum_x - minimum_x );

  0061b	8b 45 ec	 mov	 eax, DWORD PTR _maximum_x$[ebp]
  0061e	2b 45 f4	 sub	 eax, DWORD PTR _minimum_x$[ebp]
  00621	50		 push	 eax
  00622	e8 00 00 00 00	 call	 _abs
  00627	83 c4 04	 add	 esp, 4
  0062a	89 45 dc	 mov	 DWORD PTR _x_total$[ebp], eax

; 2347 : 		z_total = abs ( maximum_z - minimum_z );

  0062d	8b 45 e8	 mov	 eax, DWORD PTR _maximum_z$[ebp]
  00630	2b 45 f0	 sub	 eax, DWORD PTR _minimum_z$[ebp]
  00633	50		 push	 eax
  00634	e8 00 00 00 00	 call	 _abs
  00639	83 c4 04	 add	 esp, 4
  0063c	89 45 d8	 mov	 DWORD PTR _z_total$[ebp], eax

; 2348 : 
; 2349 : 		//
; 2350 : 		// Get the terrain height data pointer
; 2351 : 		//
; 2352 : 
; 2353 : 		if ( mipmap_index == -1 )

  0063f	83 7d 84 ff	 cmp	 DWORD PTR _mipmap_index$[ebp], -1
  00643	75 0a		 jne	 SHORT $LN44@draw_2d_sh

; 2354 : 		{
; 2355 : 
; 2356 : 			terrain_height_data = terrain_3d_simple_elevation_grid;

  00645	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_grid@@3PAMA ; terrain_3d_simple_elevation_grid
  0064a	89 45 9c	 mov	 DWORD PTR _terrain_height_data$[ebp], eax

; 2357 : 		}
; 2358 : 		else

  0064d	eb 0f		 jmp	 SHORT $LN45@draw_2d_sh
$LN44@draw_2d_sh:

; 2359 : 		{
; 2360 : 
; 2361 : 			terrain_height_data = contour_map_mipmaps[mipmap_index];

  0064f	8b 45 84	 mov	 eax, DWORD PTR _mipmap_index$[ebp]
  00652	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_mipmaps@@3PAPAMA ; contour_map_mipmaps
  00658	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0065b	89 55 9c	 mov	 DWORD PTR _terrain_height_data$[ebp], edx
$LN45@draw_2d_sh:

; 2362 : 		}
; 2363 : 
; 2364 : 		terrain_height_data_x_distance = terrain_3d_simple_elevation_x_grid_size * mipmap_distance_factor;

  0065e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  00666	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _mipmap_distance_factor$[ebp]
  0066b	f3 0f 11 45 a8	 movss	 DWORD PTR _terrain_height_data_x_distance$[ebp], xmm0

; 2365 : 		terrain_height_data_z_distance = terrain_3d_simple_elevation_z_grid_size * mipmap_distance_factor;

  00670	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size@@3MA
  00678	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _mipmap_distance_factor$[ebp]
  0067d	f3 0f 11 45 a4	 movss	 DWORD PTR _terrain_height_data_z_distance$[ebp], xmm0

; 2366 : 
; 2367 : 		// this is just an ad-hoc method for getting an adjustment for
; 2368 : 		// relief shading at different zoom levels
; 2369 : 		contour_shading_zoom_adjustment = 1.0 / (log(terrain_height_data_x_distance / 10.0));

  00682	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _terrain_height_data_x_distance$[ebp]
  00687	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4024000000000000
  0068f	83 ec 08	 sub	 esp, 8
  00692	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00697	e8 00 00 00 00	 call	 _log
  0069c	83 c4 08	 add	 esp, 8
  0069f	dd 9d e8 fb ff
	ff		 fstp	 QWORD PTR tv1210[ebp]
  006a5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  006ad	f2 0f 5e 85 e8
	fb ff ff	 divsd	 xmm0, QWORD PTR tv1210[ebp]
  006b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006b9	f3 0f 11 45 a0	 movss	 DWORD PTR _contour_shading_zoom_adjustment$[ebp], xmm0

; 2370 : 	}
; 2371 : 
; 2372 : 	terrain_height_data_width += 1;

  006be	8b 45 cc	 mov	 eax, DWORD PTR _terrain_height_data_width$[ebp]
  006c1	83 c0 01	 add	 eax, 1
  006c4	89 45 cc	 mov	 DWORD PTR _terrain_height_data_width$[ebp], eax

; 2373 : 	terrain_height_data_height += 1;

  006c7	8b 45 c8	 mov	 eax, DWORD PTR _terrain_height_data_height$[ebp]
  006ca	83 c0 01	 add	 eax, 1
  006cd	89 45 c8	 mov	 DWORD PTR _terrain_height_data_height$[ebp], eax

; 2374 : 
; 2375 : 	//
; 2376 : 	// Initialise the vertices
; 2377 : 	//
; 2378 : 
; 2379 : 	for ( count = 0; count < 9; count++ )

  006d0	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  006d7	eb 09		 jmp	 SHORT $LN9@draw_2d_sh
$LN7@draw_2d_sh:
  006d9	8b 45 88	 mov	 eax, DWORD PTR _count$[ebp]
  006dc	83 c0 01	 add	 eax, 1
  006df	89 45 88	 mov	 DWORD PTR _count$[ebp], eax
$LN9@draw_2d_sh:
  006e2	83 7d 88 09	 cmp	 DWORD PTR _count$[ebp], 9
  006e6	7d 42		 jge	 SHORT $LN8@draw_2d_sh

; 2380 : 	{
; 2381 : 		vertices[count].x = 0.0;

  006e8	8b 45 88	 mov	 eax, DWORD PTR _count$[ebp]
  006eb	c1 e0 06	 shl	 eax, 6
  006ee	0f 57 c0	 xorps	 xmm0, xmm0
  006f1	f3 0f 11 84 05
	3c fd ff ff	 movss	 DWORD PTR _vertices$[ebp+eax], xmm0

; 2382 : 		vertices[count].z = 10;

  006fa	8b 45 88	 mov	 eax, DWORD PTR _count$[ebp]
  006fd	c1 e0 06	 shl	 eax, 6
  00700	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00708	f3 0f 11 84 05
	44 fd ff ff	 movss	 DWORD PTR _vertices$[ebp+eax+8], xmm0

; 2383 : 		vertices[count].q = 0.1;

  00711	8b 45 88	 mov	 eax, DWORD PTR _count$[ebp]
  00714	c1 e0 06	 shl	 eax, 6
  00717	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0071f	f3 0f 11 84 05
	48 fd ff ff	 movss	 DWORD PTR _vertices$[ebp+eax+12], xmm0

; 2384 : 	}

  00728	eb af		 jmp	 SHORT $LN7@draw_2d_sh
$LN8@draw_2d_sh:

; 2385 : 
; 2386 : 	//
; 2387 : 	// Calculate the screen increments
; 2388 : 	//
; 2389 : 
; 2390 : 	i1 = ( minimum_x * terrain_height_data_x_distance ) - terrain_2d_map_world_xcentre;

  0072a	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _minimum_x$[ebp]
  0072f	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR _terrain_height_data_x_distance$[ebp]
  00734	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_xcentre@@3MA
  0073c	f3 0f 11 45 c4	 movss	 DWORD PTR _i1$[ebp], xmm0

; 2391 : 	j1 = ( minimum_z * terrain_height_data_z_distance ) - terrain_2d_map_world_zcentre;

  00741	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _minimum_z$[ebp]
  00746	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _terrain_height_data_z_distance$[ebp]
  0074b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_zcentre@@3MA
  00753	f3 0f 11 45 bc	 movss	 DWORD PTR _j1$[ebp], xmm0

; 2392 : 	i2 = ( ( minimum_x + x_increment ) * terrain_height_data_x_distance ) - terrain_2d_map_world_xcentre;

  00758	8b 45 f4	 mov	 eax, DWORD PTR _minimum_x$[ebp]
  0075b	03 45 d4	 add	 eax, DWORD PTR _x_increment$[ebp]
  0075e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00762	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR _terrain_height_data_x_distance$[ebp]
  00767	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_xcentre@@3MA
  0076f	f3 0f 11 45 c0	 movss	 DWORD PTR _i2$[ebp], xmm0

; 2393 : 	j2 = ( ( minimum_z + z_increment ) * terrain_height_data_z_distance ) - terrain_2d_map_world_zcentre;

  00774	8b 45 f0	 mov	 eax, DWORD PTR _minimum_z$[ebp]
  00777	03 45 d0	 add	 eax, DWORD PTR _z_increment$[ebp]
  0077a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0077e	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _terrain_height_data_z_distance$[ebp]
  00783	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_zcentre@@3MA
  0078b	f3 0f 11 45 b8	 movss	 DWORD PTR _j2$[ebp], xmm0

; 2394 : 	
; 2395 : 	i1 = ( i1 * terrain_2d_map_screen_xscale ) + terrain_2d_map_screen_xcentre;

  00790	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _i1$[ebp]
  00795	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xscale@@3MA
  0079d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA
  007a5	f3 0f 11 45 c4	 movss	 DWORD PTR _i1$[ebp], xmm0

; 2396 : 	j1 = ( j1 * terrain_2d_map_screen_yscale ) + terrain_2d_map_screen_ycentre;

  007aa	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _j1$[ebp]
  007af	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_yscale@@3MA
  007b7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA
  007bf	f3 0f 11 45 bc	 movss	 DWORD PTR _j1$[ebp], xmm0

; 2397 : 	i2 = ( i2 * terrain_2d_map_screen_xscale ) + terrain_2d_map_screen_xcentre;

  007c4	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _i2$[ebp]
  007c9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xscale@@3MA
  007d1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA
  007d9	f3 0f 11 45 c0	 movss	 DWORD PTR _i2$[ebp], xmm0

; 2398 : 	j2 = ( j2 * terrain_2d_map_screen_yscale ) + terrain_2d_map_screen_ycentre;

  007de	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _j2$[ebp]
  007e3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_yscale@@3MA
  007eb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA
  007f3	f3 0f 11 45 b8	 movss	 DWORD PTR _j2$[ebp], xmm0

; 2399 : 
; 2400 : 	screen_i_increment = i2 - i1;

  007f8	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _i2$[ebp]
  007fd	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _i1$[ebp]
  00802	f3 0f 11 45 b4	 movss	 DWORD PTR _screen_i_increment$[ebp], xmm0

; 2401 : 	screen_j_increment = j2 - j1;

  00807	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _j2$[ebp]
  0080c	f3 0f 5c 45 bc	 subss	 xmm0, DWORD PTR _j1$[ebp]
  00811	f3 0f 11 45 b0	 movss	 DWORD PTR _screen_j_increment$[ebp], xmm0

; 2402 : 
; 2403 : 	current_z = minimum_z;

  00816	8b 45 f0	 mov	 eax, DWORD PTR _minimum_z$[ebp]
  00819	89 45 f8	 mov	 DWORD PTR _current_z$[ebp], eax

; 2404 : 
; 2405 : 	for ( z_count = 0; z_count < z_total; z_count++ )

  0081c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _z_count$[ebp], 0
  00823	eb 09		 jmp	 SHORT $LN12@draw_2d_sh
$LN10@draw_2d_sh:
  00825	8b 45 e0	 mov	 eax, DWORD PTR _z_count$[ebp]
  00828	83 c0 01	 add	 eax, 1
  0082b	89 45 e0	 mov	 DWORD PTR _z_count$[ebp], eax
$LN12@draw_2d_sh:
  0082e	8b 45 e0	 mov	 eax, DWORD PTR _z_count$[ebp]
  00831	3b 45 d8	 cmp	 eax, DWORD PTR _z_total$[ebp]
  00834	0f 8d d0 0e 00
	00		 jge	 $LN11@draw_2d_sh

; 2406 : 	{
; 2407 : #define GET_ELEVATION(x,z) terrain_height_data[(z_indices[z] * terrain_height_data_width) + x_indices[x]]
; 2408 : 		float
; 2409 : 			i_coordinates[3],
; 2410 : 			j_coordinates[3];
; 2411 : 
; 2412 : 		int
; 2413 : 			i,
; 2414 : 			next_x_valid,
; 2415 : 			next_z_valid,
; 2416 : 			next_two_z_valid;
; 2417 : 
; 2418 : 		float
; 2419 : 			*elevation_grid[4],
; 2420 : 			elevation_data[4][4];
; 2421 : 	
; 2422 : 		int
; 2423 : 			z_indices[4],
; 2424 : 			x_indices[4];
; 2425 : 
; 2426 : 		for (i = 0; i <4 ; i++)

  0083a	c7 85 10 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$23[ebp], 0
  00844	eb 0f		 jmp	 SHORT $LN15@draw_2d_sh
$LN13@draw_2d_sh:
  00846	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  0084c	83 c0 01	 add	 eax, 1
  0084f	89 85 10 fd ff
	ff		 mov	 DWORD PTR _i$23[ebp], eax
$LN15@draw_2d_sh:
  00855	83 bd 10 fd ff
	ff 04		 cmp	 DWORD PTR _i$23[ebp], 4
  0085c	7d 1f		 jge	 SHORT $LN14@draw_2d_sh

; 2427 : 			elevation_grid[i] = elevation_data[i];

  0085e	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00864	c1 e0 04	 shl	 eax, 4
  00867	8d 8c 05 b4 fc
	ff ff		 lea	 ecx, DWORD PTR _elevation_data$18[ebp+eax]
  0086e	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  00874	89 8c 95 f4 fc
	ff ff		 mov	 DWORD PTR _elevation_grid$19[ebp+edx*4], ecx
  0087b	eb c9		 jmp	 SHORT $LN13@draw_2d_sh
$LN14@draw_2d_sh:

; 2428 : 
; 2429 : 		next_z_valid = z_count < (z_total - 1);

  0087d	8b 45 d8	 mov	 eax, DWORD PTR _z_total$[ebp]
  00880	83 e8 01	 sub	 eax, 1
  00883	39 45 e0	 cmp	 DWORD PTR _z_count$[ebp], eax
  00886	7d 0c		 jge	 SHORT $LN94@draw_2d_sh
  00888	c7 85 ec fb ff
	ff 01 00 00 00	 mov	 DWORD PTR tv326[ebp], 1
  00892	eb 0a		 jmp	 SHORT $LN95@draw_2d_sh
$LN94@draw_2d_sh:
  00894	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv326[ebp], 0
$LN95@draw_2d_sh:
  0089e	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv326[ebp]
  008a4	89 8d 08 fd ff
	ff		 mov	 DWORD PTR _next_z_valid$21[ebp], ecx

; 2430 : 		next_two_z_valid = z_count < (z_total - 2);

  008aa	8b 45 d8	 mov	 eax, DWORD PTR _z_total$[ebp]
  008ad	83 e8 02	 sub	 eax, 2
  008b0	39 45 e0	 cmp	 DWORD PTR _z_count$[ebp], eax
  008b3	7d 0c		 jge	 SHORT $LN96@draw_2d_sh
  008b5	c7 85 ec fb ff
	ff 01 00 00 00	 mov	 DWORD PTR tv329[ebp], 1
  008bf	eb 0a		 jmp	 SHORT $LN97@draw_2d_sh
$LN96@draw_2d_sh:
  008c1	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv329[ebp], 0
$LN97@draw_2d_sh:
  008cb	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv329[ebp]
  008d1	89 8d 04 fd ff
	ff		 mov	 DWORD PTR _next_two_z_valid$20[ebp], ecx

; 2431 : 
; 2432 : 		current_x = minimum_x;

  008d7	8b 45 f4	 mov	 eax, DWORD PTR _minimum_x$[ebp]
  008da	89 45 fc	 mov	 DWORD PTR _current_x$[ebp], eax

; 2433 : 
; 2434 : 		// x and z coordinates we want to get height for
; 2435 : 		z_indices[0] = current_z - z_increment;

  008dd	8b 45 f8	 mov	 eax, DWORD PTR _current_z$[ebp]
  008e0	2b 45 d0	 sub	 eax, DWORD PTR _z_increment$[ebp]
  008e3	b9 04 00 00 00	 mov	 ecx, 4
  008e8	6b d1 00	 imul	 edx, ecx, 0
  008eb	89 84 15 a4 fc
	ff ff		 mov	 DWORD PTR _z_indices$17[ebp+edx], eax

; 2436 : 		x_indices[0] = current_x - x_increment;

  008f2	8b 45 fc	 mov	 eax, DWORD PTR _current_x$[ebp]
  008f5	2b 45 d4	 sub	 eax, DWORD PTR _x_increment$[ebp]
  008f8	b9 04 00 00 00	 mov	 ecx, 4
  008fd	6b d1 00	 imul	 edx, ecx, 0
  00900	89 84 15 94 fc
	ff ff		 mov	 DWORD PTR _x_indices$16[ebp+edx], eax

; 2437 : 		for (i=1; i<4; i++)

  00907	c7 85 10 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _i$23[ebp], 1
  00911	eb 0f		 jmp	 SHORT $LN18@draw_2d_sh
$LN16@draw_2d_sh:
  00913	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00919	83 c0 01	 add	 eax, 1
  0091c	89 85 10 fd ff
	ff		 mov	 DWORD PTR _i$23[ebp], eax
$LN18@draw_2d_sh:
  00922	83 bd 10 fd ff
	ff 04		 cmp	 DWORD PTR _i$23[ebp], 4
  00929	7d 3c		 jge	 SHORT $LN17@draw_2d_sh

; 2438 : 		{
; 2439 : 			z_indices[i] = z_indices[i-1] + z_increment;

  0092b	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00931	8b 8c 85 a0 fc
	ff ff		 mov	 ecx, DWORD PTR _z_indices$17[ebp+eax*4-4]
  00938	03 4d d0	 add	 ecx, DWORD PTR _z_increment$[ebp]
  0093b	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  00941	89 8c 95 a4 fc
	ff ff		 mov	 DWORD PTR _z_indices$17[ebp+edx*4], ecx

; 2440 : 			x_indices[i] = x_indices[i-1] + x_increment;

  00948	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  0094e	8b 8c 85 90 fc
	ff ff		 mov	 ecx, DWORD PTR _x_indices$16[ebp+eax*4-4]
  00955	03 4d d4	 add	 ecx, DWORD PTR _x_increment$[ebp]
  00958	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  0095e	89 8c 95 94 fc
	ff ff		 mov	 DWORD PTR _x_indices$16[ebp+edx*4], ecx

; 2441 : 		}

  00965	eb ac		 jmp	 SHORT $LN16@draw_2d_sh
$LN17@draw_2d_sh:

; 2442 : 
; 2443 : 		// initialize elevation grid
; 2444 : 		for (i = 2; i < 4; i++)  // iterate over columns, will be shifted one to left

  00967	c7 85 10 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR _i$23[ebp], 2
  00971	eb 0f		 jmp	 SHORT $LN21@draw_2d_sh
$LN19@draw_2d_sh:
  00973	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00979	83 c0 01	 add	 eax, 1
  0097c	89 85 10 fd ff
	ff		 mov	 DWORD PTR _i$23[ebp], eax
$LN21@draw_2d_sh:
  00982	83 bd 10 fd ff
	ff 04		 cmp	 DWORD PTR _i$23[ebp], 4
  00989	0f 8d 6d 01 00
	00		 jge	 $LN20@draw_2d_sh

; 2445 : 		{
; 2446 : 			elevation_grid[i][1] = GET_ELEVATION(i-1, 1);

  0098f	b8 04 00 00 00	 mov	 eax, 4
  00994	c1 e0 00	 shl	 eax, 0
  00997	8b 8c 05 a4 fc
	ff ff		 mov	 ecx, DWORD PTR _z_indices$17[ebp+eax]
  0099e	0f af 4d cc	 imul	 ecx, DWORD PTR _terrain_height_data_width$[ebp]
  009a2	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  009a8	03 8c 95 90 fc
	ff ff		 add	 ecx, DWORD PTR _x_indices$16[ebp+edx*4-4]
  009af	b8 04 00 00 00	 mov	 eax, 4
  009b4	c1 e0 00	 shl	 eax, 0
  009b7	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  009bd	8b 94 95 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+edx*4]
  009c4	8b 75 9c	 mov	 esi, DWORD PTR _terrain_height_data$[ebp]
  009c7	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  009ca	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 2447 : 			elevation_grid[i][2] = GET_ELEVATION(i-1, 2);

  009cd	b8 04 00 00 00	 mov	 eax, 4
  009d2	d1 e0		 shl	 eax, 1
  009d4	8b 8c 05 a4 fc
	ff ff		 mov	 ecx, DWORD PTR _z_indices$17[ebp+eax]
  009db	0f af 4d cc	 imul	 ecx, DWORD PTR _terrain_height_data_width$[ebp]
  009df	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  009e5	03 8c 95 90 fc
	ff ff		 add	 ecx, DWORD PTR _x_indices$16[ebp+edx*4-4]
  009ec	b8 04 00 00 00	 mov	 eax, 4
  009f1	d1 e0		 shl	 eax, 1
  009f3	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  009f9	8b 94 95 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+edx*4]
  00a00	8b 75 9c	 mov	 esi, DWORD PTR _terrain_height_data$[ebp]
  00a03	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  00a06	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 2448 : 
; 2449 : 			if (z_count > 0)

  00a09	83 7d e0 00	 cmp	 DWORD PTR _z_count$[ebp], 0
  00a0d	7e 40		 jle	 SHORT $LN46@draw_2d_sh

; 2450 : 				elevation_grid[i][0] = GET_ELEVATION(i-1, 0);

  00a0f	b8 04 00 00 00	 mov	 eax, 4
  00a14	6b c8 00	 imul	 ecx, eax, 0
  00a17	8b 94 0d a4 fc
	ff ff		 mov	 edx, DWORD PTR _z_indices$17[ebp+ecx]
  00a1e	0f af 55 cc	 imul	 edx, DWORD PTR _terrain_height_data_width$[ebp]
  00a22	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00a28	03 94 85 90 fc
	ff ff		 add	 edx, DWORD PTR _x_indices$16[ebp+eax*4-4]
  00a2f	b9 04 00 00 00	 mov	 ecx, 4
  00a34	6b c1 00	 imul	 eax, ecx, 0
  00a37	8b 8d 10 fd ff
	ff		 mov	 ecx, DWORD PTR _i$23[ebp]
  00a3d	8b 8c 8d f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+ecx*4]
  00a44	8b 75 9c	 mov	 esi, DWORD PTR _terrain_height_data$[ebp]
  00a47	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00a4a	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 2451 : 			else  // it is outside, initalize to same as the one below

  00a4d	eb 30		 jmp	 SHORT $LN47@draw_2d_sh
$LN46@draw_2d_sh:

; 2452 : 				elevation_grid[i][0] = elevation_grid[i][1];

  00a4f	b8 04 00 00 00	 mov	 eax, 4
  00a54	c1 e0 00	 shl	 eax, 0
  00a57	8b 8d 10 fd ff
	ff		 mov	 ecx, DWORD PTR _i$23[ebp]
  00a5d	8b 94 8d f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+ecx*4]
  00a64	b9 04 00 00 00	 mov	 ecx, 4
  00a69	6b c9 00	 imul	 ecx, ecx, 0
  00a6c	8b b5 10 fd ff
	ff		 mov	 esi, DWORD PTR _i$23[ebp]
  00a72	8b b4 b5 f4 fc
	ff ff		 mov	 esi, DWORD PTR _elevation_grid$19[ebp+esi*4]
  00a79	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00a7c	89 14 31	 mov	 DWORD PTR [ecx+esi], edx
$LN47@draw_2d_sh:

; 2453 : 
; 2454 : 			if (next_z_valid)

  00a7f	83 bd 08 fd ff
	ff 00		 cmp	 DWORD PTR _next_z_valid$21[ebp], 0
  00a86	74 40		 je	 SHORT $LN48@draw_2d_sh

; 2455 : 				elevation_grid[i][3] = GET_ELEVATION(i-1, 3);

  00a88	b8 04 00 00 00	 mov	 eax, 4
  00a8d	6b c8 03	 imul	 ecx, eax, 3
  00a90	8b 94 0d a4 fc
	ff ff		 mov	 edx, DWORD PTR _z_indices$17[ebp+ecx]
  00a97	0f af 55 cc	 imul	 edx, DWORD PTR _terrain_height_data_width$[ebp]
  00a9b	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00aa1	03 94 85 90 fc
	ff ff		 add	 edx, DWORD PTR _x_indices$16[ebp+eax*4-4]
  00aa8	b9 04 00 00 00	 mov	 ecx, 4
  00aad	6b c1 03	 imul	 eax, ecx, 3
  00ab0	8b 8d 10 fd ff
	ff		 mov	 ecx, DWORD PTR _i$23[ebp]
  00ab6	8b 8c 8d f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+ecx*4]
  00abd	8b 75 9c	 mov	 esi, DWORD PTR _terrain_height_data$[ebp]
  00ac0	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00ac3	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 2456 : 			else   // it is outside, initalize to same as the one above

  00ac6	eb 2f		 jmp	 SHORT $LN49@draw_2d_sh
$LN48@draw_2d_sh:

; 2457 : 				elevation_grid[i][3] = elevation_grid[i][2];

  00ac8	b8 04 00 00 00	 mov	 eax, 4
  00acd	d1 e0		 shl	 eax, 1
  00acf	8b 8d 10 fd ff
	ff		 mov	 ecx, DWORD PTR _i$23[ebp]
  00ad5	8b 94 8d f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+ecx*4]
  00adc	b9 04 00 00 00	 mov	 ecx, 4
  00ae1	6b c9 03	 imul	 ecx, ecx, 3
  00ae4	8b b5 10 fd ff
	ff		 mov	 esi, DWORD PTR _i$23[ebp]
  00aea	8b b4 b5 f4 fc
	ff ff		 mov	 esi, DWORD PTR _elevation_grid$19[ebp+esi*4]
  00af1	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00af4	89 14 31	 mov	 DWORD PTR [ecx+esi], edx
$LN49@draw_2d_sh:

; 2458 : 		}

  00af7	e9 77 fe ff ff	 jmp	 $LN19@draw_2d_sh
$LN20@draw_2d_sh:

; 2459 : 		// initialize second column (which really is outside view) to same as third
; 2460 : 		for (i = 0; i < 4; i++)

  00afc	c7 85 10 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$23[ebp], 0
  00b06	eb 0f		 jmp	 SHORT $LN24@draw_2d_sh
$LN22@draw_2d_sh:
  00b08	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00b0e	83 c0 01	 add	 eax, 1
  00b11	89 85 10 fd ff
	ff		 mov	 DWORD PTR _i$23[ebp], eax
$LN24@draw_2d_sh:
  00b17	83 bd 10 fd ff
	ff 04		 cmp	 DWORD PTR _i$23[ebp], 4
  00b1e	7d 31		 jge	 SHORT $LN23@draw_2d_sh

; 2461 : 			elevation_grid[1][i] = elevation_grid[2][i];

  00b20	b8 04 00 00 00	 mov	 eax, 4
  00b25	d1 e0		 shl	 eax, 1
  00b27	8b 8c 05 f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+eax]
  00b2e	ba 04 00 00 00	 mov	 edx, 4
  00b33	c1 e2 00	 shl	 edx, 0
  00b36	8b 84 15 f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+edx]
  00b3d	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  00b43	8b b5 10 fd ff
	ff		 mov	 esi, DWORD PTR _i$23[ebp]
  00b49	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00b4c	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
  00b4f	eb b7		 jmp	 SHORT $LN22@draw_2d_sh
$LN23@draw_2d_sh:

; 2462 : 
; 2463 : 		// get screen coordinates
; 2464 : 		i_coordinates[1] = (((x_indices[1] * terrain_height_data_x_distance) - terrain_2d_map_world_xcentre) * terrain_2d_map_screen_xscale) + terrain_2d_map_screen_xcentre;

  00b51	b8 04 00 00 00	 mov	 eax, 4
  00b56	c1 e0 00	 shl	 eax, 0
  00b59	f3 0f 2a 84 05
	94 fc ff ff	 cvtsi2ss xmm0, DWORD PTR _x_indices$16[ebp+eax]
  00b62	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR _terrain_height_data_x_distance$[ebp]
  00b67	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_xcentre@@3MA
  00b6f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xscale@@3MA
  00b77	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA
  00b7f	b9 04 00 00 00	 mov	 ecx, 4
  00b84	c1 e1 00	 shl	 ecx, 0
  00b87	f3 0f 11 84 0d
	20 fd ff ff	 movss	 DWORD PTR _i_coordinates$25[ebp+ecx], xmm0

; 2465 : 
; 2466 : 		j_coordinates[0] = (((z_indices[1] * terrain_height_data_z_distance) - terrain_2d_map_world_zcentre) * terrain_2d_map_screen_yscale) + terrain_2d_map_screen_ycentre;

  00b90	b8 04 00 00 00	 mov	 eax, 4
  00b95	c1 e0 00	 shl	 eax, 0
  00b98	f3 0f 2a 84 05
	a4 fc ff ff	 cvtsi2ss xmm0, DWORD PTR _z_indices$17[ebp+eax]
  00ba1	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _terrain_height_data_z_distance$[ebp]
  00ba6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_2d_map_world_zcentre@@3MA
  00bae	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_yscale@@3MA
  00bb6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA
  00bbe	b9 04 00 00 00	 mov	 ecx, 4
  00bc3	6b d1 00	 imul	 edx, ecx, 0
  00bc6	f3 0f 11 84 15
	14 fd ff ff	 movss	 DWORD PTR _j_coordinates$24[ebp+edx], xmm0

; 2467 : 		j_coordinates[1] = j_coordinates[0] + screen_j_increment;

  00bcf	b8 04 00 00 00	 mov	 eax, 4
  00bd4	6b c8 00	 imul	 ecx, eax, 0
  00bd7	f3 0f 10 84 0d
	14 fd ff ff	 movss	 xmm0, DWORD PTR _j_coordinates$24[ebp+ecx]
  00be0	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _screen_j_increment$[ebp]
  00be5	ba 04 00 00 00	 mov	 edx, 4
  00bea	c1 e2 00	 shl	 edx, 0
  00bed	f3 0f 11 84 15
	14 fd ff ff	 movss	 DWORD PTR _j_coordinates$24[ebp+edx], xmm0

; 2468 : 
; 2469 : 		x_indices[1] = x_indices[0];

  00bf6	b8 04 00 00 00	 mov	 eax, 4
  00bfb	6b c8 00	 imul	 ecx, eax, 0
  00bfe	ba 04 00 00 00	 mov	 edx, 4
  00c03	c1 e2 00	 shl	 edx, 0
  00c06	8b 84 0d 94 fc
	ff ff		 mov	 eax, DWORD PTR _x_indices$16[ebp+ecx]
  00c0d	89 84 15 94 fc
	ff ff		 mov	 DWORD PTR _x_indices$16[ebp+edx], eax

; 2470 : 
; 2471 : 		// fill out the other rows of the height grid
; 2472 : 		for ( x_count = 0; x_count < x_total; x_count++ )

  00c14	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _x_count$[ebp], 0
  00c1b	eb 09		 jmp	 SHORT $LN27@draw_2d_sh
$LN25@draw_2d_sh:
  00c1d	8b 45 e4	 mov	 eax, DWORD PTR _x_count$[ebp]
  00c20	83 c0 01	 add	 eax, 1
  00c23	89 45 e4	 mov	 DWORD PTR _x_count$[ebp], eax
$LN27@draw_2d_sh:
  00c26	8b 45 e4	 mov	 eax, DWORD PTR _x_count$[ebp]
  00c29	3b 45 dc	 cmp	 eax, DWORD PTR _x_total$[ebp]
  00c2c	0f 8d ca 0a 00
	00		 jge	 $LN26@draw_2d_sh

; 2473 : 		{
; 2474 : 			float* next_free_row;
; 2475 : 
; 2476 : 			unsigned char
; 2477 : 				outcode_top_left,
; 2478 : 				outcode_bottom_right,
; 2479 : 
; 2480 : 				outcode_left,
; 2481 : 				outcode_right,
; 2482 : 				outcode_top,
; 2483 : 				outcode_bottom,
; 2484 : 				outcode_whole1,
; 2485 : 				outcode_whole2;
; 2486 : 
; 2487 : 			next_x_valid = x_count < (x_total - 2);

  00c32	8b 45 dc	 mov	 eax, DWORD PTR _x_total$[ebp]
  00c35	83 e8 02	 sub	 eax, 2
  00c38	39 45 e4	 cmp	 DWORD PTR _x_count$[ebp], eax
  00c3b	7d 0c		 jge	 SHORT $LN98@draw_2d_sh
  00c3d	c7 85 ec fb ff
	ff 01 00 00 00	 mov	 DWORD PTR tv495[ebp], 1
  00c47	eb 0a		 jmp	 SHORT $LN99@draw_2d_sh
$LN98@draw_2d_sh:
  00c49	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv495[ebp], 0
$LN99@draw_2d_sh:
  00c53	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR tv495[ebp]
  00c59	89 8d 0c fd ff
	ff		 mov	 DWORD PTR _next_x_valid$22[ebp], ecx

; 2488 : 
; 2489 : 			// shift coordinates
; 2490 : 			x_indices[0] = x_indices[1];

  00c5f	b8 04 00 00 00	 mov	 eax, 4
  00c64	c1 e0 00	 shl	 eax, 0
  00c67	b9 04 00 00 00	 mov	 ecx, 4
  00c6c	6b d1 00	 imul	 edx, ecx, 0
  00c6f	8b 84 05 94 fc
	ff ff		 mov	 eax, DWORD PTR _x_indices$16[ebp+eax]
  00c76	89 84 15 94 fc
	ff ff		 mov	 DWORD PTR _x_indices$16[ebp+edx], eax

; 2491 : 			for (i=1; i<4; i++)

  00c7d	c7 85 10 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _i$23[ebp], 1
  00c87	eb 0f		 jmp	 SHORT $LN30@draw_2d_sh
$LN28@draw_2d_sh:
  00c89	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00c8f	83 c0 01	 add	 eax, 1
  00c92	89 85 10 fd ff
	ff		 mov	 DWORD PTR _i$23[ebp], eax
$LN30@draw_2d_sh:
  00c98	83 bd 10 fd ff
	ff 04		 cmp	 DWORD PTR _i$23[ebp], 4
  00c9f	7d 1f		 jge	 SHORT $LN29@draw_2d_sh

; 2492 : 				x_indices[i] = x_indices[i-1] + x_increment;

  00ca1	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00ca7	8b 8c 85 90 fc
	ff ff		 mov	 ecx, DWORD PTR _x_indices$16[ebp+eax*4-4]
  00cae	03 4d d4	 add	 ecx, DWORD PTR _x_increment$[ebp]
  00cb1	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  00cb7	89 8c 95 94 fc
	ff ff		 mov	 DWORD PTR _x_indices$16[ebp+edx*4], ecx
  00cbe	eb c9		 jmp	 SHORT $LN28@draw_2d_sh
$LN29@draw_2d_sh:

; 2493 : 
; 2494 : 			// shift screen coordinates
; 2495 : 			i_coordinates[0] = i_coordinates[1];

  00cc0	b8 04 00 00 00	 mov	 eax, 4
  00cc5	c1 e0 00	 shl	 eax, 0
  00cc8	b9 04 00 00 00	 mov	 ecx, 4
  00ccd	6b d1 00	 imul	 edx, ecx, 0
  00cd0	8b 84 05 20 fd
	ff ff		 mov	 eax, DWORD PTR _i_coordinates$25[ebp+eax]
  00cd7	89 84 15 20 fd
	ff ff		 mov	 DWORD PTR _i_coordinates$25[ebp+edx], eax

; 2496 : 			i_coordinates[1] = i_coordinates[0] + screen_i_increment;

  00cde	b8 04 00 00 00	 mov	 eax, 4
  00ce3	6b c8 00	 imul	 ecx, eax, 0
  00ce6	f3 0f 10 84 0d
	20 fd ff ff	 movss	 xmm0, DWORD PTR _i_coordinates$25[ebp+ecx]
  00cef	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _screen_i_increment$[ebp]
  00cf4	ba 04 00 00 00	 mov	 edx, 4
  00cf9	c1 e2 00	 shl	 edx, 0
  00cfc	f3 0f 11 84 15
	20 fd ff ff	 movss	 DWORD PTR _i_coordinates$25[ebp+edx], xmm0

; 2497 : 
; 2498 : 			// shift one row right
; 2499 : 			next_free_row = elevation_grid[0];  // we'll overwrite this one

  00d05	b8 04 00 00 00	 mov	 eax, 4
  00d0a	6b c8 00	 imul	 ecx, eax, 0
  00d0d	8b 94 0d f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+ecx]
  00d14	89 95 90 fc ff
	ff		 mov	 DWORD PTR _next_free_row$15[ebp], edx

; 2500 : 			elevation_grid[0] = elevation_grid[1];

  00d1a	b8 04 00 00 00	 mov	 eax, 4
  00d1f	c1 e0 00	 shl	 eax, 0
  00d22	b9 04 00 00 00	 mov	 ecx, 4
  00d27	6b d1 00	 imul	 edx, ecx, 0
  00d2a	8b 84 05 f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+eax]
  00d31	89 84 15 f4 fc
	ff ff		 mov	 DWORD PTR _elevation_grid$19[ebp+edx], eax

; 2501 : 			elevation_grid[1] = elevation_grid[2];

  00d38	b8 04 00 00 00	 mov	 eax, 4
  00d3d	d1 e0		 shl	 eax, 1
  00d3f	b9 04 00 00 00	 mov	 ecx, 4
  00d44	c1 e1 00	 shl	 ecx, 0
  00d47	8b 94 05 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+eax]
  00d4e	89 94 0d f4 fc
	ff ff		 mov	 DWORD PTR _elevation_grid$19[ebp+ecx], edx

; 2502 : 			elevation_grid[2] = elevation_grid[3];

  00d55	b8 04 00 00 00	 mov	 eax, 4
  00d5a	6b c8 03	 imul	 ecx, eax, 3
  00d5d	ba 04 00 00 00	 mov	 edx, 4
  00d62	d1 e2		 shl	 edx, 1
  00d64	8b 84 0d f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+ecx]
  00d6b	89 84 15 f4 fc
	ff ff		 mov	 DWORD PTR _elevation_grid$19[ebp+edx], eax

; 2503 : 			elevation_grid[3] = next_free_row;

  00d72	b8 04 00 00 00	 mov	 eax, 4
  00d77	6b c8 03	 imul	 ecx, eax, 3
  00d7a	8b 95 90 fc ff
	ff		 mov	 edx, DWORD PTR _next_free_row$15[ebp]
  00d80	89 94 0d f4 fc
	ff ff		 mov	 DWORD PTR _elevation_grid$19[ebp+ecx], edx

; 2504 : 
; 2505 : 			// get height values for next column
; 2506 : 			if (next_x_valid)

  00d87	83 bd 0c fd ff
	ff 00		 cmp	 DWORD PTR _next_x_valid$22[ebp], 0
  00d8e	0f 84 82 01 00
	00		 je	 $LN50@draw_2d_sh

; 2507 : 			{
; 2508 : 				elevation_grid[3][1] = GET_ELEVATION(3, 1);

  00d94	b8 04 00 00 00	 mov	 eax, 4
  00d99	c1 e0 00	 shl	 eax, 0
  00d9c	8b 8c 05 a4 fc
	ff ff		 mov	 ecx, DWORD PTR _z_indices$17[ebp+eax]
  00da3	0f af 4d cc	 imul	 ecx, DWORD PTR _terrain_height_data_width$[ebp]
  00da7	ba 04 00 00 00	 mov	 edx, 4
  00dac	6b c2 03	 imul	 eax, edx, 3
  00daf	03 8c 05 94 fc
	ff ff		 add	 ecx, DWORD PTR _x_indices$16[ebp+eax]
  00db6	ba 04 00 00 00	 mov	 edx, 4
  00dbb	6b c2 03	 imul	 eax, edx, 3
  00dbe	ba 04 00 00 00	 mov	 edx, 4
  00dc3	c1 e2 00	 shl	 edx, 0
  00dc6	8b 84 05 f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+eax]
  00dcd	8b 75 9c	 mov	 esi, DWORD PTR _terrain_height_data$[ebp]
  00dd0	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  00dd3	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 2509 : 				elevation_grid[3][2] = GET_ELEVATION(3, 2);

  00dd6	b8 04 00 00 00	 mov	 eax, 4
  00ddb	d1 e0		 shl	 eax, 1
  00ddd	8b 8c 05 a4 fc
	ff ff		 mov	 ecx, DWORD PTR _z_indices$17[ebp+eax]
  00de4	0f af 4d cc	 imul	 ecx, DWORD PTR _terrain_height_data_width$[ebp]
  00de8	ba 04 00 00 00	 mov	 edx, 4
  00ded	6b c2 03	 imul	 eax, edx, 3
  00df0	03 8c 05 94 fc
	ff ff		 add	 ecx, DWORD PTR _x_indices$16[ebp+eax]
  00df7	ba 04 00 00 00	 mov	 edx, 4
  00dfc	6b c2 03	 imul	 eax, edx, 3
  00dff	ba 04 00 00 00	 mov	 edx, 4
  00e04	d1 e2		 shl	 edx, 1
  00e06	8b 84 05 f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+eax]
  00e0d	8b 75 9c	 mov	 esi, DWORD PTR _terrain_height_data$[ebp]
  00e10	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  00e13	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 2510 : 	
; 2511 : 				if (z_count > 0)

  00e16	83 7d e0 00	 cmp	 DWORD PTR _z_count$[ebp], 0
  00e1a	7e 44		 jle	 SHORT $LN52@draw_2d_sh

; 2512 : 					elevation_grid[3][0] = GET_ELEVATION(3, 0);

  00e1c	b8 04 00 00 00	 mov	 eax, 4
  00e21	6b c8 00	 imul	 ecx, eax, 0
  00e24	8b 94 0d a4 fc
	ff ff		 mov	 edx, DWORD PTR _z_indices$17[ebp+ecx]
  00e2b	0f af 55 cc	 imul	 edx, DWORD PTR _terrain_height_data_width$[ebp]
  00e2f	b8 04 00 00 00	 mov	 eax, 4
  00e34	6b c8 03	 imul	 ecx, eax, 3
  00e37	03 94 0d 94 fc
	ff ff		 add	 edx, DWORD PTR _x_indices$16[ebp+ecx]
  00e3e	b8 04 00 00 00	 mov	 eax, 4
  00e43	6b c8 03	 imul	 ecx, eax, 3
  00e46	b8 04 00 00 00	 mov	 eax, 4
  00e4b	6b c0 00	 imul	 eax, eax, 0
  00e4e	8b 8c 0d f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+ecx]
  00e55	8b 75 9c	 mov	 esi, DWORD PTR _terrain_height_data$[ebp]
  00e58	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00e5b	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 2513 : 				else  // it is outside, initalize to same as the one below

  00e5e	eb 34		 jmp	 SHORT $LN53@draw_2d_sh
$LN52@draw_2d_sh:

; 2514 : 					elevation_grid[3][0] = elevation_grid[3][1];

  00e60	b8 04 00 00 00	 mov	 eax, 4
  00e65	6b c8 03	 imul	 ecx, eax, 3
  00e68	ba 04 00 00 00	 mov	 edx, 4
  00e6d	c1 e2 00	 shl	 edx, 0
  00e70	8b 84 0d f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+ecx]
  00e77	b9 04 00 00 00	 mov	 ecx, 4
  00e7c	6b c9 03	 imul	 ecx, ecx, 3
  00e7f	be 04 00 00 00	 mov	 esi, 4
  00e84	6b f6 00	 imul	 esi, esi, 0
  00e87	8b 8c 0d f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+ecx]
  00e8e	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  00e91	89 14 0e	 mov	 DWORD PTR [esi+ecx], edx
$LN53@draw_2d_sh:

; 2515 : 
; 2516 : 				if (next_z_valid)

  00e94	83 bd 08 fd ff
	ff 00		 cmp	 DWORD PTR _next_z_valid$21[ebp], 0
  00e9b	74 44		 je	 SHORT $LN54@draw_2d_sh

; 2517 : 					elevation_grid[3][3] = GET_ELEVATION(3, 3);

  00e9d	b8 04 00 00 00	 mov	 eax, 4
  00ea2	6b c8 03	 imul	 ecx, eax, 3
  00ea5	8b 94 0d a4 fc
	ff ff		 mov	 edx, DWORD PTR _z_indices$17[ebp+ecx]
  00eac	0f af 55 cc	 imul	 edx, DWORD PTR _terrain_height_data_width$[ebp]
  00eb0	b8 04 00 00 00	 mov	 eax, 4
  00eb5	6b c8 03	 imul	 ecx, eax, 3
  00eb8	03 94 0d 94 fc
	ff ff		 add	 edx, DWORD PTR _x_indices$16[ebp+ecx]
  00ebf	b8 04 00 00 00	 mov	 eax, 4
  00ec4	6b c8 03	 imul	 ecx, eax, 3
  00ec7	b8 04 00 00 00	 mov	 eax, 4
  00ecc	6b c0 03	 imul	 eax, eax, 3
  00ecf	8b 8c 0d f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+ecx]
  00ed6	8b 75 9c	 mov	 esi, DWORD PTR _terrain_height_data$[ebp]
  00ed9	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00edc	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 2518 : 				else   // it is outside, initalize to same as the one above

  00edf	eb 33		 jmp	 SHORT $LN55@draw_2d_sh
$LN54@draw_2d_sh:

; 2519 : 					elevation_grid[3][3] = elevation_grid[3][2];

  00ee1	b8 04 00 00 00	 mov	 eax, 4
  00ee6	6b c8 03	 imul	 ecx, eax, 3
  00ee9	ba 04 00 00 00	 mov	 edx, 4
  00eee	d1 e2		 shl	 edx, 1
  00ef0	8b 84 0d f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+ecx]
  00ef7	b9 04 00 00 00	 mov	 ecx, 4
  00efc	6b c9 03	 imul	 ecx, ecx, 3
  00eff	be 04 00 00 00	 mov	 esi, 4
  00f04	6b f6 03	 imul	 esi, esi, 3
  00f07	8b 8c 0d f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+ecx]
  00f0e	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  00f11	89 14 0e	 mov	 DWORD PTR [esi+ecx], edx
$LN55@draw_2d_sh:

; 2520 : 			}
; 2521 : 			else  // if we don't have any then copy last column

  00f14	eb 55		 jmp	 SHORT $LN32@draw_2d_sh
$LN50@draw_2d_sh:

; 2522 : 				for (i=0; i<4; i++)

  00f16	c7 85 10 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$23[ebp], 0
  00f20	eb 0f		 jmp	 SHORT $LN33@draw_2d_sh
$LN31@draw_2d_sh:
  00f22	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00f28	83 c0 01	 add	 eax, 1
  00f2b	89 85 10 fd ff
	ff		 mov	 DWORD PTR _i$23[ebp], eax
$LN33@draw_2d_sh:
  00f31	83 bd 10 fd ff
	ff 04		 cmp	 DWORD PTR _i$23[ebp], 4
  00f38	7d 31		 jge	 SHORT $LN32@draw_2d_sh

; 2523 : 					elevation_grid[3][i] = elevation_grid[2][i];

  00f3a	b8 04 00 00 00	 mov	 eax, 4
  00f3f	d1 e0		 shl	 eax, 1
  00f41	8b 8c 05 f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+eax]
  00f48	ba 04 00 00 00	 mov	 edx, 4
  00f4d	6b c2 03	 imul	 eax, edx, 3
  00f50	8b 94 05 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+eax]
  00f57	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00f5d	8b b5 10 fd ff
	ff		 mov	 esi, DWORD PTR _i$23[ebp]
  00f63	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00f66	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx
  00f69	eb b7		 jmp	 SHORT $LN31@draw_2d_sh
$LN32@draw_2d_sh:

; 2524 : #undef GET_ELEVATION
; 2525 : 
; 2526 : 			outcode_top_left = generate_contour_outcode ( i_coordinates[0], j_coordinates[0] );

  00f6b	b8 04 00 00 00	 mov	 eax, 4
  00f70	6b c8 00	 imul	 ecx, eax, 0
  00f73	51		 push	 ecx
  00f74	f3 0f 10 84 0d
	14 fd ff ff	 movss	 xmm0, DWORD PTR _j_coordinates$24[ebp+ecx]
  00f7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f82	ba 04 00 00 00	 mov	 edx, 4
  00f87	6b c2 00	 imul	 eax, edx, 0
  00f8a	51		 push	 ecx
  00f8b	f3 0f 10 84 05
	20 fd ff ff	 movss	 xmm0, DWORD PTR _i_coordinates$25[ebp+eax]
  00f94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f99	e8 00 00 00 00	 call	 ?generate_contour_outcode@@YGEMM@Z ; generate_contour_outcode
  00f9e	88 85 8f fc ff
	ff		 mov	 BYTE PTR _outcode_top_left$14[ebp], al

; 2527 : 			outcode_bottom_right = generate_contour_outcode ( i_coordinates[1], j_coordinates[1] );

  00fa4	b8 04 00 00 00	 mov	 eax, 4
  00fa9	c1 e0 00	 shl	 eax, 0
  00fac	51		 push	 ecx
  00fad	f3 0f 10 84 05
	14 fd ff ff	 movss	 xmm0, DWORD PTR _j_coordinates$24[ebp+eax]
  00fb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fbb	b9 04 00 00 00	 mov	 ecx, 4
  00fc0	c1 e1 00	 shl	 ecx, 0
  00fc3	51		 push	 ecx
  00fc4	f3 0f 10 84 0d
	20 fd ff ff	 movss	 xmm0, DWORD PTR _i_coordinates$25[ebp+ecx]
  00fcd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd2	e8 00 00 00 00	 call	 ?generate_contour_outcode@@YGEMM@Z ; generate_contour_outcode
  00fd7	88 85 8e fc ff
	ff		 mov	 BYTE PTR _outcode_bottom_right$13[ebp], al

; 2528 : 
; 2529 : 			outcode_left = outcode_top_left & ( CLIP_LEFT | CLIP_RIGHT );

  00fdd	0f b6 85 8f fc
	ff ff		 movzx	 eax, BYTE PTR _outcode_top_left$14[ebp]
  00fe4	83 e0 05	 and	 eax, 5
  00fe7	88 85 8d fc ff
	ff		 mov	 BYTE PTR _outcode_left$12[ebp], al

; 2530 : 			outcode_right = outcode_bottom_right & ( CLIP_LEFT | CLIP_RIGHT );

  00fed	0f b6 85 8e fc
	ff ff		 movzx	 eax, BYTE PTR _outcode_bottom_right$13[ebp]
  00ff4	83 e0 05	 and	 eax, 5
  00ff7	88 85 8c fc ff
	ff		 mov	 BYTE PTR _outcode_right$11[ebp], al

; 2531 : 			outcode_top = outcode_top_left & ( CLIP_TOP | CLIP_BOTTOM );

  00ffd	0f b6 85 8f fc
	ff ff		 movzx	 eax, BYTE PTR _outcode_top_left$14[ebp]
  01004	83 e0 0a	 and	 eax, 10			; 0000000aH
  01007	88 85 8b fc ff
	ff		 mov	 BYTE PTR _outcode_top$10[ebp], al

; 2532 : 			outcode_bottom = outcode_bottom_right & ( CLIP_TOP | CLIP_BOTTOM );

  0100d	0f b6 85 8e fc
	ff ff		 movzx	 eax, BYTE PTR _outcode_bottom_right$13[ebp]
  01014	83 e0 0a	 and	 eax, 10			; 0000000aH
  01017	88 85 8a fc ff
	ff		 mov	 BYTE PTR _outcode_bottom$9[ebp], al

; 2533 : 
; 2534 : 			outcode_whole1 = outcode_top_left | outcode_bottom_right;

  0101d	0f b6 85 8f fc
	ff ff		 movzx	 eax, BYTE PTR _outcode_top_left$14[ebp]
  01024	0f b6 8d 8e fc
	ff ff		 movzx	 ecx, BYTE PTR _outcode_bottom_right$13[ebp]
  0102b	0b c1		 or	 eax, ecx
  0102d	88 85 89 fc ff
	ff		 mov	 BYTE PTR _outcode_whole1$8[ebp], al

; 2535 : 			outcode_whole2 = outcode_top_left & outcode_bottom_right;

  01033	0f b6 85 8f fc
	ff ff		 movzx	 eax, BYTE PTR _outcode_top_left$14[ebp]
  0103a	0f b6 8d 8e fc
	ff ff		 movzx	 ecx, BYTE PTR _outcode_bottom_right$13[ebp]
  01041	23 c1		 and	 eax, ecx
  01043	88 85 88 fc ff
	ff		 mov	 BYTE PTR _outcode_whole2$7[ebp], al

; 2536 : 
; 2537 : 			if ( !outcode_whole2 )  // not entire grid outside view

  01049	0f b6 85 88 fc
	ff ff		 movzx	 eax, BYTE PTR _outcode_whole2$7[ebp]
  01050	85 c0		 test	 eax, eax
  01052	0f 85 96 06 00
	00		 jne	 $LN56@draw_2d_sh

; 2538 : 			{
; 2539 : 				float
; 2540 : 					min_height = FLT_MAX,

  01058	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  01060	f3 0f 11 85 84
	fc ff ff	 movss	 DWORD PTR _min_height$6[ebp], xmm0

; 2541 : 					max_height = FLT_MIN;

  01068	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00800000
  01070	f3 0f 11 85 80
	fc ff ff	 movss	 DWORD PTR _max_height$5[ebp], xmm0

; 2542 : 
; 2543 : 				int
; 2544 : 					contour_start_index,
; 2545 : 					contour_end_index;
; 2546 : 
; 2547 : 				min_height = min (elevation_grid[1][1], min_height);

  01078	8d 85 84 fc ff
	ff		 lea	 eax, DWORD PTR _min_height$6[ebp]
  0107e	50		 push	 eax
  0107f	b9 04 00 00 00	 mov	 ecx, 4
  01084	c1 e1 00	 shl	 ecx, 0
  01087	ba 04 00 00 00	 mov	 edx, 4
  0108c	c1 e2 00	 shl	 edx, 0
  0108f	03 94 0d f4 fc
	ff ff		 add	 edx, DWORD PTR _elevation_grid$19[ebp+ecx]
  01096	52		 push	 edx
  01097	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0109c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  010a0	f3 0f 11 85 84
	fc ff ff	 movss	 DWORD PTR _min_height$6[ebp], xmm0

; 2548 : 				min_height = min (elevation_grid[1][2], min_height);

  010a8	8d 85 84 fc ff
	ff		 lea	 eax, DWORD PTR _min_height$6[ebp]
  010ae	50		 push	 eax
  010af	b9 04 00 00 00	 mov	 ecx, 4
  010b4	c1 e1 00	 shl	 ecx, 0
  010b7	ba 04 00 00 00	 mov	 edx, 4
  010bc	d1 e2		 shl	 edx, 1
  010be	03 94 0d f4 fc
	ff ff		 add	 edx, DWORD PTR _elevation_grid$19[ebp+ecx]
  010c5	52		 push	 edx
  010c6	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  010cb	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  010cf	f3 0f 11 85 84
	fc ff ff	 movss	 DWORD PTR _min_height$6[ebp], xmm0

; 2549 : 				min_height = min (elevation_grid[2][1], min_height);

  010d7	8d 85 84 fc ff
	ff		 lea	 eax, DWORD PTR _min_height$6[ebp]
  010dd	50		 push	 eax
  010de	b9 04 00 00 00	 mov	 ecx, 4
  010e3	d1 e1		 shl	 ecx, 1
  010e5	ba 04 00 00 00	 mov	 edx, 4
  010ea	c1 e2 00	 shl	 edx, 0
  010ed	03 94 0d f4 fc
	ff ff		 add	 edx, DWORD PTR _elevation_grid$19[ebp+ecx]
  010f4	52		 push	 edx
  010f5	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  010fa	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  010fe	f3 0f 11 85 84
	fc ff ff	 movss	 DWORD PTR _min_height$6[ebp], xmm0

; 2550 : 				min_height = min (elevation_grid[2][2], min_height);

  01106	8d 85 84 fc ff
	ff		 lea	 eax, DWORD PTR _min_height$6[ebp]
  0110c	50		 push	 eax
  0110d	b9 04 00 00 00	 mov	 ecx, 4
  01112	d1 e1		 shl	 ecx, 1
  01114	ba 04 00 00 00	 mov	 edx, 4
  01119	d1 e2		 shl	 edx, 1
  0111b	03 94 0d f4 fc
	ff ff		 add	 edx, DWORD PTR _elevation_grid$19[ebp+ecx]
  01122	52		 push	 edx
  01123	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  01128	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0112c	f3 0f 11 85 84
	fc ff ff	 movss	 DWORD PTR _min_height$6[ebp], xmm0

; 2551 : 
; 2552 : 				max_height = max (elevation_grid[1][1], max_height);

  01134	8d 85 80 fc ff
	ff		 lea	 eax, DWORD PTR _max_height$5[ebp]
  0113a	50		 push	 eax
  0113b	b9 04 00 00 00	 mov	 ecx, 4
  01140	c1 e1 00	 shl	 ecx, 0
  01143	ba 04 00 00 00	 mov	 edx, 4
  01148	c1 e2 00	 shl	 edx, 0
  0114b	03 94 0d f4 fc
	ff ff		 add	 edx, DWORD PTR _elevation_grid$19[ebp+ecx]
  01152	52		 push	 edx
  01153	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  01158	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0115c	f3 0f 11 85 80
	fc ff ff	 movss	 DWORD PTR _max_height$5[ebp], xmm0

; 2553 : 				max_height = max (elevation_grid[1][2], max_height);

  01164	8d 85 80 fc ff
	ff		 lea	 eax, DWORD PTR _max_height$5[ebp]
  0116a	50		 push	 eax
  0116b	b9 04 00 00 00	 mov	 ecx, 4
  01170	c1 e1 00	 shl	 ecx, 0
  01173	ba 04 00 00 00	 mov	 edx, 4
  01178	d1 e2		 shl	 edx, 1
  0117a	03 94 0d f4 fc
	ff ff		 add	 edx, DWORD PTR _elevation_grid$19[ebp+ecx]
  01181	52		 push	 edx
  01182	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  01187	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0118b	f3 0f 11 85 80
	fc ff ff	 movss	 DWORD PTR _max_height$5[ebp], xmm0

; 2554 : 				max_height = max (elevation_grid[2][1], max_height);

  01193	8d 85 80 fc ff
	ff		 lea	 eax, DWORD PTR _max_height$5[ebp]
  01199	50		 push	 eax
  0119a	b9 04 00 00 00	 mov	 ecx, 4
  0119f	d1 e1		 shl	 ecx, 1
  011a1	ba 04 00 00 00	 mov	 edx, 4
  011a6	c1 e2 00	 shl	 edx, 0
  011a9	03 94 0d f4 fc
	ff ff		 add	 edx, DWORD PTR _elevation_grid$19[ebp+ecx]
  011b0	52		 push	 edx
  011b1	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  011b6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  011ba	f3 0f 11 85 80
	fc ff ff	 movss	 DWORD PTR _max_height$5[ebp], xmm0

; 2555 : 				max_height = max (elevation_grid[2][2], max_height);

  011c2	8d 85 80 fc ff
	ff		 lea	 eax, DWORD PTR _max_height$5[ebp]
  011c8	50		 push	 eax
  011c9	b9 04 00 00 00	 mov	 ecx, 4
  011ce	d1 e1		 shl	 ecx, 1
  011d0	ba 04 00 00 00	 mov	 edx, 4
  011d5	d1 e2		 shl	 edx, 1
  011d7	03 94 0d f4 fc
	ff ff		 add	 edx, DWORD PTR _elevation_grid$19[ebp+ecx]
  011de	52		 push	 edx
  011df	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  011e4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  011e8	f3 0f 11 85 80
	fc ff ff	 movss	 DWORD PTR _max_height$5[ebp], xmm0

; 2556 : 
; 2557 : 				// find index of starting contour
; 2558 : 				for ( contour_start_index = 0; contour_start_index < number_of_contour_height_lines; contour_start_index++ )

  011f0	c7 85 7c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _contour_start_index$4[ebp], 0
  011fa	eb 0f		 jmp	 SHORT $LN36@draw_2d_sh
$LN34@draw_2d_sh:
  011fc	8b 85 7c fc ff
	ff		 mov	 eax, DWORD PTR _contour_start_index$4[ebp]
  01202	83 c0 01	 add	 eax, 1
  01205	89 85 7c fc ff
	ff		 mov	 DWORD PTR _contour_start_index$4[ebp], eax
$LN36@draw_2d_sh:
  0120b	8b 85 7c fc ff
	ff		 mov	 eax, DWORD PTR _contour_start_index$4[ebp]
  01211	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_contour_height_lines@@3HA ; number_of_contour_height_lines
  01217	0f 8d 88 00 00
	00		 jge	 $LN35@draw_2d_sh

; 2559 : 				{
; 2560 : 					if ( min_height <= terrain_2d_contour_heights[contour_start_index] )

  0121d	8b 85 7c fc ff
	ff		 mov	 eax, DWORD PTR _contour_start_index$4[ebp]
  01223	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_contour_heights@@3PAMA ; terrain_2d_contour_heights
  01229	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  0122e	0f 2f 85 84 fc
	ff ff		 comiss	 xmm0, DWORD PTR _min_height$6[ebp]
  01235	72 69		 jb	 SHORT $LN57@draw_2d_sh

; 2561 : 					{
; 2562 : 						contour_start_index--;

  01237	8b 85 7c fc ff
	ff		 mov	 eax, DWORD PTR _contour_start_index$4[ebp]
  0123d	83 e8 01	 sub	 eax, 1
  01240	89 85 7c fc ff
	ff		 mov	 DWORD PTR _contour_start_index$4[ebp], eax

; 2563 : 
; 2564 : 						// found it, now find ending contour
; 2565 : 						for ( contour_end_index = contour_start_index; contour_end_index < number_of_contour_height_lines; contour_end_index++ )

  01246	8b 85 7c fc ff
	ff		 mov	 eax, DWORD PTR _contour_start_index$4[ebp]
  0124c	89 85 78 fc ff
	ff		 mov	 DWORD PTR _contour_end_index$3[ebp], eax
  01252	eb 0f		 jmp	 SHORT $LN39@draw_2d_sh
$LN37@draw_2d_sh:
  01254	8b 85 78 fc ff
	ff		 mov	 eax, DWORD PTR _contour_end_index$3[ebp]
  0125a	83 c0 01	 add	 eax, 1
  0125d	89 85 78 fc ff
	ff		 mov	 DWORD PTR _contour_end_index$3[ebp], eax
$LN39@draw_2d_sh:
  01263	8b 85 78 fc ff
	ff		 mov	 eax, DWORD PTR _contour_end_index$3[ebp]
  01269	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_contour_height_lines@@3HA ; number_of_contour_height_lines
  0126f	7d 2d		 jge	 SHORT $LN38@draw_2d_sh

; 2566 : 							if ( max_height < terrain_2d_contour_heights[contour_end_index] )

  01271	8b 85 78 fc ff
	ff		 mov	 eax, DWORD PTR _contour_end_index$3[ebp]
  01277	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_2d_contour_heights@@3PAMA ; terrain_2d_contour_heights
  0127d	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  01282	0f 2f 85 80 fc
	ff ff		 comiss	 xmm0, DWORD PTR _max_height$5[ebp]
  01289	76 11		 jbe	 SHORT $LN58@draw_2d_sh

; 2567 : 							{
; 2568 : 								contour_end_index--;

  0128b	8b 85 78 fc ff
	ff		 mov	 eax, DWORD PTR _contour_end_index$3[ebp]
  01291	83 e8 01	 sub	 eax, 1
  01294	89 85 78 fc ff
	ff		 mov	 DWORD PTR _contour_end_index$3[ebp], eax

; 2569 : 								break;

  0129a	eb 02		 jmp	 SHORT $LN38@draw_2d_sh
$LN58@draw_2d_sh:

; 2570 : 							}
; 2571 : 
; 2572 : 						break;

  0129c	eb b6		 jmp	 SHORT $LN37@draw_2d_sh
$LN38@draw_2d_sh:
  0129e	eb 05		 jmp	 SHORT $LN35@draw_2d_sh
$LN57@draw_2d_sh:

; 2573 : 					}
; 2574 : 				}

  012a0	e9 57 ff ff ff	 jmp	 $LN34@draw_2d_sh
$LN35@draw_2d_sh:

; 2575 : 
; 2576 : 				// render quad
; 2577 : 				vertices[0].i = i_coordinates[0]; vertices[0].j = j_coordinates[0]; vertices[0].y = elevation_grid[1][1];

  012a5	b8 04 00 00 00	 mov	 eax, 4
  012aa	6b c8 00	 imul	 ecx, eax, 0
  012ad	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  012b2	6b c2 00	 imul	 eax, edx, 0
  012b5	8b 8c 0d 20 fd
	ff ff		 mov	 ecx, DWORD PTR _i_coordinates$25[ebp+ecx]
  012bc	89 8c 05 4c fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+eax+16], ecx
  012c3	b8 04 00 00 00	 mov	 eax, 4
  012c8	6b c8 00	 imul	 ecx, eax, 0
  012cb	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  012d0	6b c2 00	 imul	 eax, edx, 0
  012d3	8b 8c 0d 14 fd
	ff ff		 mov	 ecx, DWORD PTR _j_coordinates$24[ebp+ecx]
  012da	89 8c 05 50 fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+eax+20], ecx
  012e1	b8 04 00 00 00	 mov	 eax, 4
  012e6	c1 e0 00	 shl	 eax, 0
  012e9	b9 04 00 00 00	 mov	 ecx, 4
  012ee	c1 e1 00	 shl	 ecx, 0
  012f1	8b 94 05 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+eax]
  012f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  012fd	6b c0 00	 imul	 eax, eax, 0
  01300	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  01303	89 8c 05 40 fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+eax+4], ecx

; 2578 : 				vertices[1].i = i_coordinates[1]; vertices[1].j = j_coordinates[0]; vertices[1].y = elevation_grid[2][1];

  0130a	b8 04 00 00 00	 mov	 eax, 4
  0130f	c1 e0 00	 shl	 eax, 0
  01312	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  01317	c1 e1 00	 shl	 ecx, 0
  0131a	8b 94 05 20 fd
	ff ff		 mov	 edx, DWORD PTR _i_coordinates$25[ebp+eax]
  01321	89 94 0d 4c fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+ecx+16], edx
  01328	b8 04 00 00 00	 mov	 eax, 4
  0132d	6b c8 00	 imul	 ecx, eax, 0
  01330	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  01335	c1 e2 00	 shl	 edx, 0
  01338	8b 84 0d 14 fd
	ff ff		 mov	 eax, DWORD PTR _j_coordinates$24[ebp+ecx]
  0133f	89 84 15 50 fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+20], eax
  01346	b8 04 00 00 00	 mov	 eax, 4
  0134b	d1 e0		 shl	 eax, 1
  0134d	b9 04 00 00 00	 mov	 ecx, 4
  01352	c1 e1 00	 shl	 ecx, 0
  01355	8b 94 05 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+eax]
  0135c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01361	c1 e0 00	 shl	 eax, 0
  01364	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  01367	89 8c 05 40 fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+eax+4], ecx

; 2579 : 				vertices[2].i = i_coordinates[0]; vertices[2].j = j_coordinates[1]; vertices[2].y = elevation_grid[1][2];

  0136e	b8 04 00 00 00	 mov	 eax, 4
  01373	6b c8 00	 imul	 ecx, eax, 0
  01376	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0137b	d1 e2		 shl	 edx, 1
  0137d	8b 84 0d 20 fd
	ff ff		 mov	 eax, DWORD PTR _i_coordinates$25[ebp+ecx]
  01384	89 84 15 4c fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+16], eax
  0138b	b8 04 00 00 00	 mov	 eax, 4
  01390	c1 e0 00	 shl	 eax, 0
  01393	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  01398	d1 e1		 shl	 ecx, 1
  0139a	8b 94 05 14 fd
	ff ff		 mov	 edx, DWORD PTR _j_coordinates$24[ebp+eax]
  013a1	89 94 0d 50 fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+ecx+20], edx
  013a8	b8 04 00 00 00	 mov	 eax, 4
  013ad	c1 e0 00	 shl	 eax, 0
  013b0	b9 04 00 00 00	 mov	 ecx, 4
  013b5	d1 e1		 shl	 ecx, 1
  013b7	8b 94 05 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+eax]
  013be	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  013c3	d1 e0		 shl	 eax, 1
  013c5	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  013c8	89 8c 05 40 fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+eax+4], ecx

; 2580 : 				vertices[3].i = i_coordinates[1]; vertices[3].j = j_coordinates[1]; vertices[3].y = elevation_grid[2][2];

  013cf	b8 04 00 00 00	 mov	 eax, 4
  013d4	c1 e0 00	 shl	 eax, 0
  013d7	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  013dc	6b d1 03	 imul	 edx, ecx, 3
  013df	8b 84 05 20 fd
	ff ff		 mov	 eax, DWORD PTR _i_coordinates$25[ebp+eax]
  013e6	89 84 15 4c fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+16], eax
  013ed	b8 04 00 00 00	 mov	 eax, 4
  013f2	c1 e0 00	 shl	 eax, 0
  013f5	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  013fa	6b d1 03	 imul	 edx, ecx, 3
  013fd	8b 84 05 14 fd
	ff ff		 mov	 eax, DWORD PTR _j_coordinates$24[ebp+eax]
  01404	89 84 15 50 fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+edx+20], eax
  0140b	b8 04 00 00 00	 mov	 eax, 4
  01410	d1 e0		 shl	 eax, 1
  01412	b9 04 00 00 00	 mov	 ecx, 4
  01417	d1 e1		 shl	 ecx, 1
  01419	8b 94 05 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+eax]
  01420	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01425	6b c0 03	 imul	 eax, eax, 3
  01428	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  0142b	89 8c 05 40 fd
	ff ff		 mov	 DWORD PTR _vertices$[ebp+eax+4], ecx

; 2581 : 
; 2582 : 				// add shading
; 2583 : 				vertices[0].x = contour_shading_zoom_adjustment * (2 * (elevation_grid[1][0] - elevation_grid[1][2]) + (elevation_grid[0][1] - elevation_grid[2][1]));

  01432	b8 04 00 00 00	 mov	 eax, 4
  01437	c1 e0 00	 shl	 eax, 0
  0143a	b9 04 00 00 00	 mov	 ecx, 4
  0143f	6b d1 00	 imul	 edx, ecx, 0
  01442	8b 84 05 f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+eax]
  01449	b9 04 00 00 00	 mov	 ecx, 4
  0144e	c1 e1 00	 shl	 ecx, 0
  01451	be 04 00 00 00	 mov	 esi, 4
  01456	d1 e6		 shl	 esi, 1
  01458	8b 8c 0d f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+ecx]
  0145f	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  01464	f3 0f 5c 04 31	 subss	 xmm0, DWORD PTR [ecx+esi]
  01469	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  01471	ba 04 00 00 00	 mov	 edx, 4
  01476	6b c2 00	 imul	 eax, edx, 0
  01479	b9 04 00 00 00	 mov	 ecx, 4
  0147e	c1 e1 00	 shl	 ecx, 0
  01481	8b 94 05 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+eax]
  01488	b8 04 00 00 00	 mov	 eax, 4
  0148d	d1 e0		 shl	 eax, 1
  0148f	be 04 00 00 00	 mov	 esi, 4
  01494	c1 e6 00	 shl	 esi, 0
  01497	8b 84 05 f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+eax]
  0149e	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  014a3	f3 0f 5c 0c 30	 subss	 xmm1, DWORD PTR [eax+esi]
  014a8	f3 0f 58 c1	 addss	 xmm0, xmm1
  014ac	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _contour_shading_zoom_adjustment$[ebp]
  014b1	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  014b6	6b d1 00	 imul	 edx, ecx, 0
  014b9	f3 0f 11 84 15
	3c fd ff ff	 movss	 DWORD PTR _vertices$[ebp+edx], xmm0

; 2584 : 				vertices[1].x = contour_shading_zoom_adjustment * (2 * (elevation_grid[2][0] - elevation_grid[2][2]) + (elevation_grid[1][1] - elevation_grid[3][1]));

  014c2	b8 04 00 00 00	 mov	 eax, 4
  014c7	d1 e0		 shl	 eax, 1
  014c9	b9 04 00 00 00	 mov	 ecx, 4
  014ce	6b d1 00	 imul	 edx, ecx, 0
  014d1	8b 84 05 f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+eax]
  014d8	b9 04 00 00 00	 mov	 ecx, 4
  014dd	d1 e1		 shl	 ecx, 1
  014df	be 04 00 00 00	 mov	 esi, 4
  014e4	d1 e6		 shl	 esi, 1
  014e6	8b 8c 0d f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+ecx]
  014ed	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  014f2	f3 0f 5c 04 31	 subss	 xmm0, DWORD PTR [ecx+esi]
  014f7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  014ff	ba 04 00 00 00	 mov	 edx, 4
  01504	c1 e2 00	 shl	 edx, 0
  01507	b8 04 00 00 00	 mov	 eax, 4
  0150c	c1 e0 00	 shl	 eax, 0
  0150f	8b 8c 15 f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+edx]
  01516	ba 04 00 00 00	 mov	 edx, 4
  0151b	6b d2 03	 imul	 edx, edx, 3
  0151e	be 04 00 00 00	 mov	 esi, 4
  01523	c1 e6 00	 shl	 esi, 0
  01526	8b 94 15 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+edx]
  0152d	f3 0f 10 0c 01	 movss	 xmm1, DWORD PTR [ecx+eax]
  01532	f3 0f 5c 0c 32	 subss	 xmm1, DWORD PTR [edx+esi]
  01537	f3 0f 58 c1	 addss	 xmm0, xmm1
  0153b	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _contour_shading_zoom_adjustment$[ebp]
  01540	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01545	c1 e0 00	 shl	 eax, 0
  01548	f3 0f 11 84 05
	3c fd ff ff	 movss	 DWORD PTR _vertices$[ebp+eax], xmm0

; 2585 : 				vertices[2].x = contour_shading_zoom_adjustment * (2 * (elevation_grid[1][1] - elevation_grid[1][3]) + (elevation_grid[0][2] - elevation_grid[2][2]));

  01551	b8 04 00 00 00	 mov	 eax, 4
  01556	c1 e0 00	 shl	 eax, 0
  01559	b9 04 00 00 00	 mov	 ecx, 4
  0155e	c1 e1 00	 shl	 ecx, 0
  01561	8b 94 05 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+eax]
  01568	b8 04 00 00 00	 mov	 eax, 4
  0156d	c1 e0 00	 shl	 eax, 0
  01570	be 04 00 00 00	 mov	 esi, 4
  01575	6b f6 03	 imul	 esi, esi, 3
  01578	8b 84 05 f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+eax]
  0157f	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  01584	f3 0f 5c 04 30	 subss	 xmm0, DWORD PTR [eax+esi]
  01589	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  01591	b9 04 00 00 00	 mov	 ecx, 4
  01596	6b d1 00	 imul	 edx, ecx, 0
  01599	b8 04 00 00 00	 mov	 eax, 4
  0159e	d1 e0		 shl	 eax, 1
  015a0	8b 8c 15 f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+edx]
  015a7	ba 04 00 00 00	 mov	 edx, 4
  015ac	d1 e2		 shl	 edx, 1
  015ae	be 04 00 00 00	 mov	 esi, 4
  015b3	d1 e6		 shl	 esi, 1
  015b5	8b 94 15 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+edx]
  015bc	f3 0f 10 0c 01	 movss	 xmm1, DWORD PTR [ecx+eax]
  015c1	f3 0f 5c 0c 32	 subss	 xmm1, DWORD PTR [edx+esi]
  015c6	f3 0f 58 c1	 addss	 xmm0, xmm1
  015ca	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _contour_shading_zoom_adjustment$[ebp]
  015cf	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  015d4	d1 e0		 shl	 eax, 1
  015d6	f3 0f 11 84 05
	3c fd ff ff	 movss	 DWORD PTR _vertices$[ebp+eax], xmm0

; 2586 : 				vertices[3].x = contour_shading_zoom_adjustment * (2 * (elevation_grid[2][1] - elevation_grid[2][3]) + (elevation_grid[1][2] - elevation_grid[3][2]));

  015df	b8 04 00 00 00	 mov	 eax, 4
  015e4	d1 e0		 shl	 eax, 1
  015e6	b9 04 00 00 00	 mov	 ecx, 4
  015eb	c1 e1 00	 shl	 ecx, 0
  015ee	8b 94 05 f4 fc
	ff ff		 mov	 edx, DWORD PTR _elevation_grid$19[ebp+eax]
  015f5	b8 04 00 00 00	 mov	 eax, 4
  015fa	d1 e0		 shl	 eax, 1
  015fc	be 04 00 00 00	 mov	 esi, 4
  01601	6b f6 03	 imul	 esi, esi, 3
  01604	8b 84 05 f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+eax]
  0160b	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  01610	f3 0f 5c 04 30	 subss	 xmm0, DWORD PTR [eax+esi]
  01615	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0161d	b9 04 00 00 00	 mov	 ecx, 4
  01622	c1 e1 00	 shl	 ecx, 0
  01625	ba 04 00 00 00	 mov	 edx, 4
  0162a	d1 e2		 shl	 edx, 1
  0162c	8b 84 0d f4 fc
	ff ff		 mov	 eax, DWORD PTR _elevation_grid$19[ebp+ecx]
  01633	b9 04 00 00 00	 mov	 ecx, 4
  01638	6b c9 03	 imul	 ecx, ecx, 3
  0163b	be 04 00 00 00	 mov	 esi, 4
  01640	d1 e6		 shl	 esi, 1
  01642	8b 8c 0d f4 fc
	ff ff		 mov	 ecx, DWORD PTR _elevation_grid$19[ebp+ecx]
  01649	f3 0f 10 0c 10	 movss	 xmm1, DWORD PTR [eax+edx]
  0164e	f3 0f 5c 0c 31	 subss	 xmm1, DWORD PTR [ecx+esi]
  01653	f3 0f 58 c1	 addss	 xmm0, xmm1
  01657	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _contour_shading_zoom_adjustment$[ebp]
  0165c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  01661	6b c2 03	 imul	 eax, edx, 3
  01664	f3 0f 11 84 05
	3c fd ff ff	 movss	 DWORD PTR _vertices$[ebp+eax], xmm0

; 2587 : 
; 2588 : 				vertices[0].outcode = outcode_top_left;

  0166d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01672	6b c8 00	 imul	 ecx, eax, 0
  01675	8a 95 8f fc ff
	ff		 mov	 dl, BYTE PTR _outcode_top_left$14[ebp]
  0167b	88 94 0d 68 fd
	ff ff		 mov	 BYTE PTR _vertices$[ebp+ecx+44], dl

; 2589 : 				vertices[1].outcode = outcode_top | outcode_right;

  01682	0f b6 85 8b fc
	ff ff		 movzx	 eax, BYTE PTR _outcode_top$10[ebp]
  01689	0f b6 8d 8c fc
	ff ff		 movzx	 ecx, BYTE PTR _outcode_right$11[ebp]
  01690	0b c1		 or	 eax, ecx
  01692	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  01697	c1 e2 00	 shl	 edx, 0
  0169a	88 84 15 68 fd
	ff ff		 mov	 BYTE PTR _vertices$[ebp+edx+44], al

; 2590 : 				vertices[2].outcode = outcode_left | outcode_bottom;

  016a1	0f b6 85 8d fc
	ff ff		 movzx	 eax, BYTE PTR _outcode_left$12[ebp]
  016a8	0f b6 8d 8a fc
	ff ff		 movzx	 ecx, BYTE PTR _outcode_bottom$9[ebp]
  016af	0b c1		 or	 eax, ecx
  016b1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  016b6	d1 e2		 shl	 edx, 1
  016b8	88 84 15 68 fd
	ff ff		 mov	 BYTE PTR _vertices$[ebp+edx+44], al

; 2591 : 				vertices[3].outcode = outcode_bottom_right;

  016bf	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  016c4	6b c8 03	 imul	 ecx, eax, 3
  016c7	8a 95 8e fc ff
	ff		 mov	 dl, BYTE PTR _outcode_bottom_right$13[ebp]
  016cd	88 94 0d 68 fd
	ff ff		 mov	 BYTE PTR _vertices$[ebp+ecx+44], dl

; 2592 : 
; 2593 : 				render_contour_terrain_quad ( vertices, contour_start_index, contour_end_index );

  016d4	8b 85 78 fc ff
	ff		 mov	 eax, DWORD PTR _contour_end_index$3[ebp]
  016da	50		 push	 eax
  016db	8b 8d 7c fc ff
	ff		 mov	 ecx, DWORD PTR _contour_start_index$4[ebp]
  016e1	51		 push	 ecx
  016e2	8d 95 3c fd ff
	ff		 lea	 edx, DWORD PTR _vertices$[ebp]
  016e8	52		 push	 edx
  016e9	e8 00 00 00 00	 call	 ?render_contour_terrain_quad@@YGXPAUVERTEX@@HH@Z ; render_contour_terrain_quad
$LN56@draw_2d_sh:

; 2594 : 			}
; 2595 : 
; 2596 : 			current_x += x_increment;

  016ee	8b 45 fc	 mov	 eax, DWORD PTR _current_x$[ebp]
  016f1	03 45 d4	 add	 eax, DWORD PTR _x_increment$[ebp]
  016f4	89 45 fc	 mov	 DWORD PTR _current_x$[ebp], eax

; 2597 : 		}

  016f7	e9 21 f5 ff ff	 jmp	 $LN25@draw_2d_sh
$LN26@draw_2d_sh:

; 2598 : 
; 2599 : 		current_z += z_increment;

  016fc	8b 45 f8	 mov	 eax, DWORD PTR _current_z$[ebp]
  016ff	03 45 d0	 add	 eax, DWORD PTR _z_increment$[ebp]
  01702	89 45 f8	 mov	 DWORD PTR _current_z$[ebp], eax

; 2600 : 	}

  01705	e9 1b f1 ff ff	 jmp	 $LN10@draw_2d_sh
$LN11@draw_2d_sh:

; 2601 : 
; 2602 : 	//
; 2603 : 	// Render the features
; 2604 : 	//
; 2605 : 
; 2606 : 	//
; 2607 : 	// Rivers
; 2608 : 	//
; 2609 : 
; 2610 : 	render_contour_node_database ( contour_map_number_of_river_paths, contour_map_river_paths, contour_map_river_nodes, river_colour, mipmap_level );

  0170a	8b 45 80	 mov	 eax, DWORD PTR _mipmap_level$[ebp]
  0170d	50		 push	 eax
  0170e	8b 8d 38 fd ff
	ff		 mov	 ecx, DWORD PTR _river_colour$[ebp]
  01714	51		 push	 ecx
  01715	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  0171b	52		 push	 edx
  0171c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  01721	50		 push	 eax
  01722	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_number_of_river_paths@@3HA ; contour_map_number_of_river_paths
  01728	51		 push	 ecx
  01729	e8 00 00 00 00	 call	 ?render_contour_node_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z ; render_contour_node_database

; 2611 : 
; 2612 : 	//
; 2613 : 	// Roads
; 2614 : 	//
; 2615 : 
; 2616 : 	render_contour_node_database ( contour_map_number_of_road_paths, contour_map_road_paths, contour_map_road_nodes, road_colour, mipmap_level );

  0172e	8b 45 80	 mov	 eax, DWORD PTR _mipmap_level$[ebp]
  01731	50		 push	 eax
  01732	8b 8d 34 fd ff
	ff		 mov	 ecx, DWORD PTR _road_colour$[ebp]
  01738	51		 push	 ecx
  01739	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_road_nodes@@3PAUVEC3D@@A ; contour_map_road_nodes
  0173f	52		 push	 edx
  01740	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  01745	50		 push	 eax
  01746	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_number_of_road_paths@@3HA ; contour_map_number_of_road_paths
  0174c	51		 push	 ecx
  0174d	e8 00 00 00 00	 call	 ?render_contour_node_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z ; render_contour_node_database

; 2617 : 
; 2618 : 	//
; 2619 : 	// Lakes
; 2620 : 	//
; 2621 : 
; 2622 : 	{
; 2623 : 
; 2624 : 		real_colour
; 2625 : 			lake_colour;
; 2626 : 
; 2627 : 		lake_colour.r = terrain_2d_current_contour_colours[0].r;

  01752	b8 04 00 00 00	 mov	 eax, 4
  01757	6b c8 00	 imul	 ecx, eax, 0
  0175a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  01760	8a 44 0a 02	 mov	 al, BYTE PTR [edx+ecx+2]
  01764	88 85 76 fc ff
	ff		 mov	 BYTE PTR _lake_colour$2[ebp+2], al

; 2628 : 		lake_colour.g = terrain_2d_current_contour_colours[0].g;

  0176a	b8 04 00 00 00	 mov	 eax, 4
  0176f	6b c8 00	 imul	 ecx, eax, 0
  01772	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  01778	8a 44 0a 01	 mov	 al, BYTE PTR [edx+ecx+1]
  0177c	88 85 75 fc ff
	ff		 mov	 BYTE PTR _lake_colour$2[ebp+1], al

; 2629 : 		lake_colour.b = terrain_2d_current_contour_colours[0].b;

  01782	b8 04 00 00 00	 mov	 eax, 4
  01787	6b c8 00	 imul	 ecx, eax, 0
  0178a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  01790	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  01793	88 85 74 fc ff
	ff		 mov	 BYTE PTR _lake_colour$2[ebp], al

; 2630 : 		lake_colour.a = terrain_2d_current_contour_colours[0].a;

  01799	b8 04 00 00 00	 mov	 eax, 4
  0179e	6b c8 00	 imul	 ecx, eax, 0
  017a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_current_contour_colours
  017a7	8a 44 0a 03	 mov	 al, BYTE PTR [edx+ecx+3]
  017ab	88 85 77 fc ff
	ff		 mov	 BYTE PTR _lake_colour$2[ebp+3], al

; 2631 : 	
; 2632 : 		render_contour_triangle_database ( number_of_contour_lakes, contour_lakes, lake_colour );

  017b1	8b 85 74 fc ff
	ff		 mov	 eax, DWORD PTR _lake_colour$2[ebp]
  017b7	50		 push	 eax
  017b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_lakes@@3PAUCONTOUR_LAKE@@A ; contour_lakes
  017be	51		 push	 ecx
  017bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?number_of_contour_lakes@@3HA ; number_of_contour_lakes
  017c5	52		 push	 edx
  017c6	e8 00 00 00 00	 call	 ?render_contour_triangle_database@@YGXHPAUCONTOUR_LAKE@@UREAL_COLOUR@@@Z ; render_contour_triangle_database

; 2633 : 	}
; 2634 : 
; 2635 : 	//
; 2636 : 	// Citybases
; 2637 : 	//
; 2638 : 
; 2639 : 	{
; 2640 : 
; 2641 : 		real_colour
; 2642 : 			citybase_colour;
; 2643 : 
; 2644 : 		citybase_colour.r = 70;

  017cb	c6 85 72 fc ff
	ff 46		 mov	 BYTE PTR _citybase_colour$1[ebp+2], 70 ; 00000046H

; 2645 : 		citybase_colour.g = 70;

  017d2	c6 85 71 fc ff
	ff 46		 mov	 BYTE PTR _citybase_colour$1[ebp+1], 70 ; 00000046H

; 2646 : 		citybase_colour.b = 70;

  017d9	c6 85 70 fc ff
	ff 46		 mov	 BYTE PTR _citybase_colour$1[ebp], 70 ; 00000046H

; 2647 : 		citybase_colour.a = 255;

  017e0	c6 85 73 fc ff
	ff ff		 mov	 BYTE PTR _citybase_colour$1[ebp+3], 255 ; 000000ffH

; 2648 : 	
; 2649 : 		render_contour_triangle_database ( number_of_contour_citybases, contour_citybases, citybase_colour );

  017e7	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _citybase_colour$1[ebp]
  017ed	50		 push	 eax
  017ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_citybases@@3PAUCONTOUR_LAKE@@A ; contour_citybases
  017f4	51		 push	 ecx
  017f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?number_of_contour_citybases@@3HA ; number_of_contour_citybases
  017fb	52		 push	 edx
  017fc	e8 00 00 00 00	 call	 ?render_contour_triangle_database@@YGXHPAUCONTOUR_LAKE@@UREAL_COLOUR@@@Z ; render_contour_triangle_database

; 2650 : 	}
; 2651 : 
; 2652 : 	//
; 2653 : 	// Boundaries
; 2654 : 	//
; 2655 : 
; 2656 : 	render_contour_node_thick_database ( contour_map_number_of_boundary_paths, contour_map_boundary_paths, contour_map_boundary_nodes, boundary_colour, 1 );

  01801	6a 01		 push	 1
  01803	8b 85 30 fd ff
	ff		 mov	 eax, DWORD PTR _boundary_colour$[ebp]
  01809	50		 push	 eax
  0180a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_boundary_nodes@@3PAUVEC3D@@A ; contour_map_boundary_nodes
  01810	51		 push	 ecx
  01811	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  01817	52		 push	 edx
  01818	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_number_of_boundary_paths@@3HA ; contour_map_number_of_boundary_paths
  0181d	50		 push	 eax
  0181e	e8 00 00 00 00	 call	 ?render_contour_node_thick_database@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@H@Z ; render_contour_node_thick_database

; 2657 : 
; 2658 : 	//
; 2659 : 	// Restore the fog
; 2660 : 	//
; 2661 : 
; 2662 : 	reinstate_d3d_fog ();

  01823	e8 00 00 00 00	 call	 ?reinstate_d3d_fog@@YGXXZ ; reinstate_d3d_fog

; 2663 : 
; 2664 : 	//
; 2665 : 	// Turn Z buffering back on again
; 2666 : 	//
; 2667 : 
; 2668 : 	set_d3d_int_state ( D3DRENDERSTATE_ZENABLE, TRUE );

  01828	6a 01		 push	 1
  0182a	6a 07		 push	 7
  0182c	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2669 : 
; 2670 : 	d3d_in_order_rendering = FALSE;

  01831	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_in_order_rendering@@3HA, 0 ; d3d_in_order_rendering

; 2671 : 
; 2672 : 	safe_free ( contour_height_difference_reciprocals );

  0183b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_height_difference_reciprocals@@3PAMA ; contour_height_difference_reciprocals
  01840	50		 push	 eax
  01841	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 2673 : 
; 2674 : 	contour_height_difference_reciprocals = NULL;

  01846	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_height_difference_reciprocals@@3PAMA, 0 ; contour_height_difference_reciprocals

; 2675 : }

  01850	5f		 pop	 edi
  01851	5e		 pop	 esi
  01852	5b		 pop	 ebx
  01853	8b e5		 mov	 esp, ebp
  01855	5d		 pop	 ebp
  01856	c3		 ret	 0
?draw_2d_shaded_terrain_contour_map@@YGXXZ ENDP		; draw_2d_shaded_terrain_contour_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?check_coastal_river_intersection@@YGMMMMM@Z
_TEXT	SEGMENT
_sub_count$1 = -64					; size = 4
_sub_positions$2 = -60					; size = 4
_intercept_point$ = -56					; size = 8
_pt4$ = -48						; size = 8
_pt3$ = -40						; size = 8
_pt2$ = -32						; size = 8
_pt1$ = -24						; size = 8
_t$ = -16						; size = 4
_dy$ = -12						; size = 4
_dx$ = -8						; size = 4
_count$ = -4						; size = 4
_x1$ = 8						; size = 4
_z1$ = 12						; size = 4
_x2$ = 16						; size = 4
_z2$ = 20						; size = 4
?check_coastal_river_intersection@@YGMMMMM@Z PROC	; check_coastal_river_intersection, COMDAT

; 1991 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1992 : 
; 1993 : 	int
; 1994 : 		count;
; 1995 : 
; 1996 : 	float
; 1997 : 		dx,
; 1998 : 		dy,
; 1999 : 		t;
; 2000 : 
; 2001 : 	vec2d
; 2002 : 		pt1,
; 2003 : 		pt2,
; 2004 : 		pt3,
; 2005 : 		pt4,
; 2006 : 		intercept_point;
; 2007 : 
; 2008 : 	//
; 2009 : 	// Go through all the coastal rivers checking the lines against this edge
; 2010 : 	//
; 2011 : 
; 2012 : 	pt1.x = x1;

  0000c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00011	f3 0f 11 45 e8	 movss	 DWORD PTR _pt1$[ebp], xmm0

; 2013 : 	pt1.y = z1;

  00016	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z1$[ebp]
  0001b	f3 0f 11 45 ec	 movss	 DWORD PTR _pt1$[ebp+4], xmm0

; 2014 : 
; 2015 : 	pt2.x = x2;

  00020	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00025	f3 0f 11 45 e0	 movss	 DWORD PTR _pt2$[ebp], xmm0

; 2016 : 	pt2.y = z2;

  0002a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0002f	f3 0f 11 45 e4	 movss	 DWORD PTR _pt2$[ebp+4], xmm0

; 2017 : 
; 2018 : 	dx = fabs ( x2 - x1 );

  00034	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00039	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x1$[ebp]
  0003e	51		 push	 ecx
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00049	d9 5d f8	 fstp	 DWORD PTR _dx$[ebp]

; 2019 : 	dy = fabs ( z2 - z1 );

  0004c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00051	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z1$[ebp]
  00056	51		 push	 ecx
  00057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005c	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00061	d9 5d f4	 fstp	 DWORD PTR _dy$[ebp]

; 2020 : 
; 2021 : 	t = -1;

  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0006c	f3 0f 11 45 f0	 movss	 DWORD PTR _t$[ebp], xmm0

; 2022 : 
; 2023 : 	for ( count = 0; count < contour_map_number_of_river_paths; count++ )

  00071	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00078	eb 09		 jmp	 SHORT $LN4@check_coas
$LN2@check_coas:
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@check_coas:
  00083	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00086	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?contour_map_number_of_river_paths@@3HA ; contour_map_number_of_river_paths
  0008c	0f 8d b8 03 00
	00		 jge	 $LN3@check_coas

; 2024 : 	{
; 2025 : 
; 2026 : 		if ( contour_map_river_paths[count].type == TEMP_TERRAIN_TYPE_COASTAL_RIVER )

  00092	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  0009c	83 7c 01 08 33	 cmp	 DWORD PTR [ecx+eax+8], 51 ; 00000033H
  000a1	0f 85 9e 03 00
	00		 jne	 $LN20@check_coas

; 2027 : 		{
; 2028 : 
; 2029 : 			if ( contour_map_river_paths[count].count == 0 )

  000a7	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  000b1	83 7c 01 0c 00	 cmp	 DWORD PTR [ecx+eax+12], 0
  000b6	0f 85 e9 00 00
	00		 jne	 $LN9@check_coas

; 2030 : 			{
; 2031 : 
; 2032 : 				pt3.x = contour_map_river_nodes[ contour_map_river_paths[count].from ].x;

  000bc	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  000c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  000c6	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  000cf	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000d4	f3 0f 11 45 d8	 movss	 DWORD PTR _pt3$[ebp], xmm0

; 2033 : 				pt3.y = contour_map_river_nodes[ contour_map_river_paths[count].from ].z;

  000d9	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  000dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  000e3	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  000ec	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
  000f2	f3 0f 11 45 dc	 movss	 DWORD PTR _pt3$[ebp+4], xmm0

; 2034 : 
; 2035 : 				pt4.x = contour_map_river_nodes[ contour_map_river_paths[count].to ].x;

  000f7	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  000fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00101	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  0010b	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00110	f3 0f 11 45 d0	 movss	 DWORD PTR _pt4$[ebp], xmm0

; 2036 : 				pt4.y = contour_map_river_nodes[ contour_map_river_paths[count].to ].z;

  00115	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00119	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  0011f	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  00129	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
  0012f	f3 0f 11 45 d4	 movss	 DWORD PTR _pt4$[ebp+4], xmm0

; 2037 : 
; 2038 : 				if ( line_line_2d_intercept ( &pt1, &pt2, &pt3, &pt4, &intercept_point ) )

  00134	8d 45 c8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  00137	50		 push	 eax
  00138	8d 4d d0	 lea	 ecx, DWORD PTR _pt4$[ebp]
  0013b	51		 push	 ecx
  0013c	8d 55 d8	 lea	 edx, DWORD PTR _pt3$[ebp]
  0013f	52		 push	 edx
  00140	8d 45 e0	 lea	 eax, DWORD PTR _pt2$[ebp]
  00143	50		 push	 eax
  00144	8d 4d e8	 lea	 ecx, DWORD PTR _pt1$[ebp]
  00147	51		 push	 ecx
  00148	e8 00 00 00 00	 call	 ?line_line_2d_intercept@@YGHPBUVEC2D@@000PAU1@@Z ; line_line_2d_intercept
  0014d	85 c0		 test	 eax, eax
  0014f	74 4f		 je	 SHORT $LN11@check_coas

; 2039 : 				{
; 2040 : 
; 2041 : 					if ( dx > dy )

  00151	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00156	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _dy$[ebp]
  0015a	76 1f		 jbe	 SHORT $LN12@check_coas

; 2042 : 					{
; 2043 : 
; 2044 : 						t = ( intercept_point.x - pt1.x ) / ( pt2.x - pt1.x );

  0015c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _intercept_point$[ebp]
  00161	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _pt1$[ebp]
  00166	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _pt2$[ebp]
  0016b	f3 0f 5c 4d e8	 subss	 xmm1, DWORD PTR _pt1$[ebp]
  00170	f3 0f 5e c1	 divss	 xmm0, xmm1
  00174	f3 0f 11 45 f0	 movss	 DWORD PTR _t$[ebp], xmm0

; 2045 : 					}
; 2046 : 					else

  00179	eb 1d		 jmp	 SHORT $LN13@check_coas
$LN12@check_coas:

; 2047 : 					{
; 2048 : 
; 2049 : 						t = ( intercept_point.y - pt1.y ) / ( pt2.y - pt1.y );

  0017b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _intercept_point$[ebp+4]
  00180	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _pt1$[ebp+4]
  00185	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _pt2$[ebp+4]
  0018a	f3 0f 5c 4d ec	 subss	 xmm1, DWORD PTR _pt1$[ebp+4]
  0018f	f3 0f 5e c1	 divss	 xmm0, xmm1
  00193	f3 0f 11 45 f0	 movss	 DWORD PTR _t$[ebp], xmm0
$LN13@check_coas:

; 2050 : 					}
; 2051 : 
; 2052 : 					return ( t );

  00198	d9 45 f0	 fld	 DWORD PTR _t$[ebp]
  0019b	e9 b0 02 00 00	 jmp	 $LN1@check_coas
$LN11@check_coas:

; 2053 : 				}
; 2054 : 			}
; 2055 : 			else

  001a0	e9 a0 02 00 00	 jmp	 $LN20@check_coas
$LN9@check_coas:

; 2056 : 			{
; 2057 : 		
; 2058 : 				vec3d
; 2059 : 					*sub_positions;
; 2060 : 	
; 2061 : 				int
; 2062 : 					sub_count;
; 2063 : 	
; 2064 : 				sub_positions = contour_map_river_paths[count].points;

  001a5	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  001af	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  001b3	89 55 c4	 mov	 DWORD PTR _sub_positions$2[ebp], edx

; 2065 : 
; 2066 : 				sub_count = 0;

  001b6	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _sub_count$1[ebp], 0

; 2067 : 	
; 2068 : 				pt3.x = contour_map_river_nodes[ contour_map_river_paths[count].from ].x;

  001bd	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  001c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  001c7	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  001cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  001d0	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  001d5	f3 0f 11 45 d8	 movss	 DWORD PTR _pt3$[ebp], xmm0

; 2069 : 				pt3.y = contour_map_river_nodes[ contour_map_river_paths[count].from ].z;

  001da	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  001de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  001e4	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  001ed	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
  001f3	f3 0f 11 45 dc	 movss	 DWORD PTR _pt3$[ebp+4], xmm0

; 2070 : 
; 2071 : 				pt4.x = sub_positions[0].x;

  001f8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001fd	6b c8 00	 imul	 ecx, eax, 0
  00200	8b 55 c4	 mov	 edx, DWORD PTR _sub_positions$2[ebp]
  00203	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00208	f3 0f 11 45 d0	 movss	 DWORD PTR _pt4$[ebp], xmm0

; 2072 : 				pt4.y = sub_positions[0].z;

  0020d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00212	6b c8 00	 imul	 ecx, eax, 0
  00215	8b 55 c4	 mov	 edx, DWORD PTR _sub_positions$2[ebp]
  00218	f3 0f 10 44 0a
	08		 movss	 xmm0, DWORD PTR [edx+ecx+8]
  0021e	f3 0f 11 45 d4	 movss	 DWORD PTR _pt4$[ebp+4], xmm0

; 2073 : 		
; 2074 : 				if ( line_line_2d_intercept ( &pt1, &pt2, &pt3, &pt4, &intercept_point ) )

  00223	8d 45 c8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  00226	50		 push	 eax
  00227	8d 4d d0	 lea	 ecx, DWORD PTR _pt4$[ebp]
  0022a	51		 push	 ecx
  0022b	8d 55 d8	 lea	 edx, DWORD PTR _pt3$[ebp]
  0022e	52		 push	 edx
  0022f	8d 45 e0	 lea	 eax, DWORD PTR _pt2$[ebp]
  00232	50		 push	 eax
  00233	8d 4d e8	 lea	 ecx, DWORD PTR _pt1$[ebp]
  00236	51		 push	 ecx
  00237	e8 00 00 00 00	 call	 ?line_line_2d_intercept@@YGHPBUVEC2D@@000PAU1@@Z ; line_line_2d_intercept
  0023c	85 c0		 test	 eax, eax
  0023e	74 4f		 je	 SHORT $LN14@check_coas

; 2075 : 				{
; 2076 : 
; 2077 : 					if ( dx > dy )

  00240	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00245	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _dy$[ebp]
  00249	76 1f		 jbe	 SHORT $LN15@check_coas

; 2078 : 					{
; 2079 : 
; 2080 : 						t = ( intercept_point.x - pt1.x ) / ( pt2.x - pt1.x );

  0024b	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _intercept_point$[ebp]
  00250	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _pt1$[ebp]
  00255	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _pt2$[ebp]
  0025a	f3 0f 5c 4d e8	 subss	 xmm1, DWORD PTR _pt1$[ebp]
  0025f	f3 0f 5e c1	 divss	 xmm0, xmm1
  00263	f3 0f 11 45 f0	 movss	 DWORD PTR _t$[ebp], xmm0

; 2081 : 					}
; 2082 : 					else

  00268	eb 1d		 jmp	 SHORT $LN16@check_coas
$LN15@check_coas:

; 2083 : 					{
; 2084 : 
; 2085 : 						t = ( intercept_point.y - pt1.y ) / ( pt2.y - pt1.y );

  0026a	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _intercept_point$[ebp+4]
  0026f	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _pt1$[ebp+4]
  00274	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _pt2$[ebp+4]
  00279	f3 0f 5c 4d ec	 subss	 xmm1, DWORD PTR _pt1$[ebp+4]
  0027e	f3 0f 5e c1	 divss	 xmm0, xmm1
  00282	f3 0f 11 45 f0	 movss	 DWORD PTR _t$[ebp], xmm0
$LN16@check_coas:

; 2086 : 					}
; 2087 : 
; 2088 : 					return ( t );

  00287	d9 45 f0	 fld	 DWORD PTR _t$[ebp]
  0028a	e9 c1 01 00 00	 jmp	 $LN1@check_coas
$LN14@check_coas:

; 2089 : 				}
; 2090 : 
; 2091 : 
; 2092 : 				for ( sub_count = 0; sub_count < ( contour_map_river_paths[count].count - 1 ); sub_count++ )

  0028f	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _sub_count$1[ebp], 0
  00296	eb 09		 jmp	 SHORT $LN7@check_coas
$LN5@check_coas:
  00298	8b 45 c0	 mov	 eax, DWORD PTR _sub_count$1[ebp]
  0029b	83 c0 01	 add	 eax, 1
  0029e	89 45 c0	 mov	 DWORD PTR _sub_count$1[ebp], eax
$LN7@check_coas:
  002a1	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  002a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  002ab	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  002af	83 ea 01	 sub	 edx, 1
  002b2	39 55 c0	 cmp	 DWORD PTR _sub_count$1[ebp], edx
  002b5	0f 8d c1 00 00
	00		 jge	 $LN6@check_coas

; 2093 : 				{
; 2094 : 
; 2095 : 					pt3.x = sub_positions[sub_count].x;

  002bb	6b 45 c0 0c	 imul	 eax, DWORD PTR _sub_count$1[ebp], 12
  002bf	8b 4d c4	 mov	 ecx, DWORD PTR _sub_positions$2[ebp]
  002c2	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  002c7	f3 0f 11 45 d8	 movss	 DWORD PTR _pt3$[ebp], xmm0

; 2096 : 					pt3.y = sub_positions[sub_count].z;

  002cc	6b 45 c0 0c	 imul	 eax, DWORD PTR _sub_count$1[ebp], 12
  002d0	8b 4d c4	 mov	 ecx, DWORD PTR _sub_positions$2[ebp]
  002d3	f3 0f 10 44 01
	08		 movss	 xmm0, DWORD PTR [ecx+eax+8]
  002d9	f3 0f 11 45 dc	 movss	 DWORD PTR _pt3$[ebp+4], xmm0

; 2097 : 
; 2098 : 					pt4.x = sub_positions[sub_count+1].x;

  002de	8b 45 c0	 mov	 eax, DWORD PTR _sub_count$1[ebp]
  002e1	83 c0 01	 add	 eax, 1
  002e4	6b c8 0c	 imul	 ecx, eax, 12
  002e7	8b 55 c4	 mov	 edx, DWORD PTR _sub_positions$2[ebp]
  002ea	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  002ef	f3 0f 11 45 d0	 movss	 DWORD PTR _pt4$[ebp], xmm0

; 2099 : 					pt4.y = sub_positions[sub_count+1].z;

  002f4	8b 45 c0	 mov	 eax, DWORD PTR _sub_count$1[ebp]
  002f7	83 c0 01	 add	 eax, 1
  002fa	6b c8 0c	 imul	 ecx, eax, 12
  002fd	8b 55 c4	 mov	 edx, DWORD PTR _sub_positions$2[ebp]
  00300	f3 0f 10 44 0a
	08		 movss	 xmm0, DWORD PTR [edx+ecx+8]
  00306	f3 0f 11 45 d4	 movss	 DWORD PTR _pt4$[ebp+4], xmm0

; 2100 : 
; 2101 : 					if ( line_line_2d_intercept ( &pt1, &pt2, &pt3, &pt4, &intercept_point ) )

  0030b	8d 45 c8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  0030e	50		 push	 eax
  0030f	8d 4d d0	 lea	 ecx, DWORD PTR _pt4$[ebp]
  00312	51		 push	 ecx
  00313	8d 55 d8	 lea	 edx, DWORD PTR _pt3$[ebp]
  00316	52		 push	 edx
  00317	8d 45 e0	 lea	 eax, DWORD PTR _pt2$[ebp]
  0031a	50		 push	 eax
  0031b	8d 4d e8	 lea	 ecx, DWORD PTR _pt1$[ebp]
  0031e	51		 push	 ecx
  0031f	e8 00 00 00 00	 call	 ?line_line_2d_intercept@@YGHPBUVEC2D@@000PAU1@@Z ; line_line_2d_intercept
  00324	85 c0		 test	 eax, eax
  00326	74 4f		 je	 SHORT $LN17@check_coas

; 2102 : 					{
; 2103 : 	
; 2104 : 						if ( dx > dy )

  00328	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0032d	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _dy$[ebp]
  00331	76 1f		 jbe	 SHORT $LN18@check_coas

; 2105 : 						{
; 2106 : 	
; 2107 : 							t = ( intercept_point.x - pt1.x ) / ( pt2.x - pt1.x );

  00333	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _intercept_point$[ebp]
  00338	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _pt1$[ebp]
  0033d	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _pt2$[ebp]
  00342	f3 0f 5c 4d e8	 subss	 xmm1, DWORD PTR _pt1$[ebp]
  00347	f3 0f 5e c1	 divss	 xmm0, xmm1
  0034b	f3 0f 11 45 f0	 movss	 DWORD PTR _t$[ebp], xmm0

; 2108 : 						}
; 2109 : 						else

  00350	eb 1d		 jmp	 SHORT $LN19@check_coas
$LN18@check_coas:

; 2110 : 						{
; 2111 : 	
; 2112 : 							t = ( intercept_point.y - pt1.y ) / ( pt2.y - pt1.y );

  00352	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _intercept_point$[ebp+4]
  00357	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _pt1$[ebp+4]
  0035c	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _pt2$[ebp+4]
  00361	f3 0f 5c 4d ec	 subss	 xmm1, DWORD PTR _pt1$[ebp+4]
  00366	f3 0f 5e c1	 divss	 xmm0, xmm1
  0036a	f3 0f 11 45 f0	 movss	 DWORD PTR _t$[ebp], xmm0
$LN19@check_coas:

; 2113 : 						}
; 2114 : 	
; 2115 : 						return ( t );

  0036f	d9 45 f0	 fld	 DWORD PTR _t$[ebp]
  00372	e9 d9 00 00 00	 jmp	 $LN1@check_coas
$LN17@check_coas:

; 2116 : 					}
; 2117 : 				}

  00377	e9 1c ff ff ff	 jmp	 $LN5@check_coas
$LN6@check_coas:

; 2118 : 		
; 2119 : 
; 2120 : 				pt3.x = sub_positions[sub_count].x;

  0037c	6b 45 c0 0c	 imul	 eax, DWORD PTR _sub_count$1[ebp], 12
  00380	8b 4d c4	 mov	 ecx, DWORD PTR _sub_positions$2[ebp]
  00383	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00388	f3 0f 11 45 d8	 movss	 DWORD PTR _pt3$[ebp], xmm0

; 2121 : 				pt3.y = sub_positions[sub_count].z;

  0038d	6b 45 c0 0c	 imul	 eax, DWORD PTR _sub_count$1[ebp], 12
  00391	8b 4d c4	 mov	 ecx, DWORD PTR _sub_positions$2[ebp]
  00394	f3 0f 10 44 01
	08		 movss	 xmm0, DWORD PTR [ecx+eax+8]
  0039a	f3 0f 11 45 dc	 movss	 DWORD PTR _pt3$[ebp+4], xmm0

; 2122 : 
; 2123 : 				pt4.x = contour_map_river_nodes[ contour_map_river_paths[count].to ].x;

  0039f	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  003a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  003a9	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  003ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  003b3	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  003b8	f3 0f 11 45 d0	 movss	 DWORD PTR _pt4$[ebp], xmm0

; 2124 : 				pt4.y = contour_map_river_nodes[ contour_map_river_paths[count].to ].z;

  003bd	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  003c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  003c7	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  003cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  003d1	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
  003d7	f3 0f 11 45 d4	 movss	 DWORD PTR _pt4$[ebp+4], xmm0

; 2125 : 
; 2126 : 				if ( line_line_2d_intercept ( &pt1, &pt2, &pt3, &pt4, &intercept_point ) )

  003dc	8d 45 c8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  003df	50		 push	 eax
  003e0	8d 4d d0	 lea	 ecx, DWORD PTR _pt4$[ebp]
  003e3	51		 push	 ecx
  003e4	8d 55 d8	 lea	 edx, DWORD PTR _pt3$[ebp]
  003e7	52		 push	 edx
  003e8	8d 45 e0	 lea	 eax, DWORD PTR _pt2$[ebp]
  003eb	50		 push	 eax
  003ec	8d 4d e8	 lea	 ecx, DWORD PTR _pt1$[ebp]
  003ef	51		 push	 ecx
  003f0	e8 00 00 00 00	 call	 ?line_line_2d_intercept@@YGHPBUVEC2D@@000PAU1@@Z ; line_line_2d_intercept
  003f5	85 c0		 test	 eax, eax
  003f7	74 4c		 je	 SHORT $LN20@check_coas

; 2127 : 				{
; 2128 : 
; 2129 : 					if ( dx > dy )

  003f9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  003fe	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _dy$[ebp]
  00402	76 1f		 jbe	 SHORT $LN21@check_coas

; 2130 : 					{
; 2131 : 
; 2132 : 						t = ( intercept_point.x - pt1.x ) / ( pt2.x - pt1.x );

  00404	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _intercept_point$[ebp]
  00409	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _pt1$[ebp]
  0040e	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _pt2$[ebp]
  00413	f3 0f 5c 4d e8	 subss	 xmm1, DWORD PTR _pt1$[ebp]
  00418	f3 0f 5e c1	 divss	 xmm0, xmm1
  0041c	f3 0f 11 45 f0	 movss	 DWORD PTR _t$[ebp], xmm0

; 2133 : 					}
; 2134 : 					else

  00421	eb 1d		 jmp	 SHORT $LN22@check_coas
$LN21@check_coas:

; 2135 : 					{
; 2136 : 
; 2137 : 						t = ( intercept_point.y - pt1.y ) / ( pt2.y - pt1.y );

  00423	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _intercept_point$[ebp+4]
  00428	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _pt1$[ebp+4]
  0042d	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _pt2$[ebp+4]
  00432	f3 0f 5c 4d ec	 subss	 xmm1, DWORD PTR _pt1$[ebp+4]
  00437	f3 0f 5e c1	 divss	 xmm0, xmm1
  0043b	f3 0f 11 45 f0	 movss	 DWORD PTR _t$[ebp], xmm0
$LN22@check_coas:

; 2138 : 					}
; 2139 : 
; 2140 : 					return ( t );

  00440	d9 45 f0	 fld	 DWORD PTR _t$[ebp]
  00443	eb 0b		 jmp	 SHORT $LN1@check_coas
$LN20@check_coas:

; 2141 : 				}
; 2142 : 			}
; 2143 : 		}
; 2144 : 	}

  00445	e9 30 fc ff ff	 jmp	 $LN2@check_coas
$LN3@check_coas:

; 2145 : 
; 2146 : 	return ( -1 );

  0044a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
$LN1@check_coas:

; 2147 : }

  00450	5f		 pop	 edi
  00451	5e		 pop	 esi
  00452	5b		 pop	 ebx
  00453	8b e5		 mov	 esp, ebp
  00455	5d		 pop	 ebp
  00456	c2 10 00	 ret	 16			; 00000010H
?check_coastal_river_intersection@@YGMMMMM@Z ENDP	; check_coastal_river_intersection
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?load_contour_map_colours@@YGXPBD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?load_contour_map_colours@@YGXPBD@Z PROC		; load_contour_map_colours, COMDAT

; 1745 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1746 : 	if ( terrain_2d_contour_colours && terrain_2d_contour_colours != contour_colours)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_2d_contour_colours@@3PAUREAL_COLOUR@@A, 0 ; terrain_2d_contour_colours
  00010	74 21		 je	 SHORT $LN2@load_conto
  00012	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR ?terrain_2d_contour_colours@@3PAUREAL_COLOUR@@A, OFFSET ?contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_contour_colours, contour_colours
  0001c	74 15		 je	 SHORT $LN2@load_conto

; 1747 : 	{
; 1748 : 		safe_free ( terrain_2d_contour_colours );

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_2d_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_contour_colours
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1749 : 
; 1750 : 		terrain_2d_contour_colours = NULL;

  00029	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_2d_contour_colours@@3PAUREAL_COLOUR@@A, 0 ; terrain_2d_contour_colours
$LN2@load_conto:

; 1751 : 	}
; 1752 : 
; 1753 : 	if ( terrain_2d_contour_intensities )

  00033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_2d_contour_intensities@@3PAUREAL_COLOUR@@A, 0 ; terrain_2d_contour_intensities
  0003a	74 15		 je	 SHORT $LN3@load_conto

; 1754 : 	{
; 1755 : 		safe_free ( terrain_2d_contour_intensities );

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_2d_contour_intensities@@3PAUREAL_COLOUR@@A ; terrain_2d_contour_intensities
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1756 : 
; 1757 : 		terrain_2d_contour_intensities = NULL;

  00047	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_2d_contour_intensities@@3PAUREAL_COLOUR@@A, 0 ; terrain_2d_contour_intensities
$LN3@load_conto:

; 1758 : 	}
; 1759 : 
; 1760 : //	if (command_line_campaign_map != 0)
; 1761 : 	{
; 1762 : 		if (command_line_campaign_map_palette == 1)

  00051	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?command_line_campaign_map_palette@@3HA, 1 ; command_line_campaign_map_palette
  00058	75 0c		 jne	 SHORT $LN4@load_conto

; 1763 : 			terrain_2d_contour_colours = contour_colours;

  0005a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_2d_contour_colours@@3PAUREAL_COLOUR@@A, OFFSET ?contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_contour_colours, contour_colours

; 1764 : 		else

  00064	eb 0a		 jmp	 SHORT $LN5@load_conto
$LN4@load_conto:

; 1765 : 			terrain_2d_contour_colours = contour_paper_colours;

  00066	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_2d_contour_colours@@3PAUREAL_COLOUR@@A, OFFSET ?contour_paper_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_contour_colours, contour_paper_colours
$LN5@load_conto:

; 1766 : 	}
; 1767 : #if 0   // arneh - unused code with new map
; 1768 : 	else
; 1769 : 	{
; 1770 : 		int
; 1771 : 			count,
; 1772 : 			width,
; 1773 : 			height,
; 1774 : 			channels;
; 1775 : 	
; 1776 : 		char
; 1777 : 			*data;
; 1778 : 
; 1779 : 		data = load_psd_file ( filename, &width, &height, &channels );
; 1780 : 	
; 1781 : 		ASSERT ( channels == 3 );
; 1782 : 	
; 1783 : 		terrain_2d_contour_colours = safe_malloc ( sizeof ( rgb_colour ) * height );
; 1784 : 	
; 1785 : 		terrain_2d_contour_intensities = safe_malloc ( sizeof ( rgb_colour ) * height );
; 1786 : 	
; 1787 : 		terrain_2d_contour_intensities = safe_malloc(sizeof(contour_colours));
; 1788 : 	
; 1789 : 		for ( count = 0; count < height; count++ )
; 1790 : 		{
; 1791 : 	
; 1792 : 			float
; 1793 : 				intensity;
; 1794 : 
; 1795 : 			terrain_2d_contour_colours[count].r = data[ width * channels * count + 0];
; 1796 : 			terrain_2d_contour_colours[count].g = data[ width * channels * count + 1];
; 1797 : 			terrain_2d_contour_colours[count].b = data[ width * channels * count + 2];
; 1798 : 
; 1799 : 			intensity = ( float ) terrain_2d_contour_colours[count].r * 0.30;
; 1800 : 			intensity += ( float ) terrain_2d_contour_colours[count].g * 0.59;
; 1801 : 			intensity += ( float ) terrain_2d_contour_colours[count].b * 0.11;
; 1802 : 	
; 1803 : 			terrain_2d_contour_intensities[count].r = intensity;
; 1804 : 			terrain_2d_contour_intensities[count].g = intensity;
; 1805 : 			terrain_2d_contour_intensities[count].b = intensity;
; 1806 : 		}
; 1807 : 	
; 1808 : 		safe_free ( data );
; 1809 : 	}
; 1810 : #endif
; 1811 : 	terrain_2d_current_contour_colours = terrain_2d_contour_colours;

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_2d_contour_colours@@3PAUREAL_COLOUR@@A ; terrain_2d_contour_colours
  00075	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_2d_current_contour_colours@@3PAUREAL_COLOUR@@A, eax ; terrain_2d_current_contour_colours

; 1812 : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?load_contour_map_colours@@YGXPBD@Z ENDP		; load_contour_map_colours
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?unload_2d_terrain@@YGXXZ
_TEXT	SEGMENT
?unload_2d_terrain@@YGXXZ PROC				; unload_2d_terrain, COMDAT

; 1188 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1189 : 
; 1190 : 	//
; 1191 : 	// Unload the lakes
; 1192 : 	//
; 1193 : 
; 1194 : 	number_of_contour_lakes = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_contour_lakes@@3HA, 0 ; number_of_contour_lakes

; 1195 : 
; 1196 : 	if ( contour_lake_vertices )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_lake_vertices@@3PAUVEC3D@@A, 0 ; contour_lake_vertices
  0001a	74 15		 je	 SHORT $LN2@unload_2d_

; 1197 : 	{
; 1198 : 
; 1199 : 		safe_free ( contour_lake_vertices );

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_lake_vertices@@3PAUVEC3D@@A ; contour_lake_vertices
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1200 : 
; 1201 : 		contour_lake_vertices = NULL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_lake_vertices@@3PAUVEC3D@@A, 0 ; contour_lake_vertices
$LN2@unload_2d_:

; 1202 : 	}
; 1203 : 
; 1204 : 	if ( contour_lakes )

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_lakes@@3PAUCONTOUR_LAKE@@A, 0 ; contour_lakes
  00038	74 15		 je	 SHORT $LN3@unload_2d_

; 1205 : 	{
; 1206 : 
; 1207 : 		safe_free ( contour_lakes );

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_lakes@@3PAUCONTOUR_LAKE@@A ; contour_lakes
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1208 : 
; 1209 : 		contour_lakes = NULL;

  00045	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_lakes@@3PAUCONTOUR_LAKE@@A, 0 ; contour_lakes
$LN3@unload_2d_:

; 1210 : 	}
; 1211 : 
; 1212 : 	//
; 1213 : 	// Unload the citybases
; 1214 : 	//
; 1215 : 
; 1216 : 	number_of_contour_citybases = 0;

  0004f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_contour_citybases@@3HA, 0 ; number_of_contour_citybases

; 1217 : 
; 1218 : 	if ( contour_citybase_vertices )

  00059	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_citybase_vertices@@3PAUVEC3D@@A, 0 ; contour_citybase_vertices
  00060	74 15		 je	 SHORT $LN4@unload_2d_

; 1219 : 	{
; 1220 : 
; 1221 : 		safe_free ( contour_citybase_vertices );

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_citybase_vertices@@3PAUVEC3D@@A ; contour_citybase_vertices
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1222 : 
; 1223 : 		contour_citybase_vertices = NULL;

  0006d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_citybase_vertices@@3PAUVEC3D@@A, 0 ; contour_citybase_vertices
$LN4@unload_2d_:

; 1224 : 	}
; 1225 : 
; 1226 : 	if ( contour_citybases )

  00077	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_citybases@@3PAUCONTOUR_LAKE@@A, 0 ; contour_citybases
  0007e	74 15		 je	 SHORT $LN5@unload_2d_

; 1227 : 	{
; 1228 : 
; 1229 : 		safe_free ( contour_citybases );

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_citybases@@3PAUCONTOUR_LAKE@@A ; contour_citybases
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1230 : 
; 1231 : 		contour_citybases = NULL;

  0008b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_citybases@@3PAUCONTOUR_LAKE@@A, 0 ; contour_citybases
$LN5@unload_2d_:

; 1232 : 	}
; 1233 : 
; 1234 : 	//
; 1235 : 	// Unload the contour map colours
; 1236 : 	//
; 1237 : 
; 1238 : 	//
; 1239 : 	// No memory is allocated for colours
; 1240 : 	//
; 1241 : 
; 1242 : 	//
; 1243 : 	// Unload contour road data
; 1244 : 	//
; 1245 : 
; 1246 : 	contour_map_number_of_road_nodes = 0;

  00095	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_number_of_road_nodes@@3HA, 0 ; contour_map_number_of_road_nodes

; 1247 : 
; 1248 : 	contour_map_number_of_road_paths = 0;

  0009f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_number_of_road_paths@@3HA, 0 ; contour_map_number_of_road_paths

; 1249 : 
; 1250 : 	if ( contour_map_road_nodes )

  000a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_road_nodes@@3PAUVEC3D@@A, 0 ; contour_map_road_nodes
  000b0	74 15		 je	 SHORT $LN6@unload_2d_

; 1251 : 	{
; 1252 : 
; 1253 : 		safe_free ( contour_map_road_nodes );

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_road_nodes@@3PAUVEC3D@@A ; contour_map_road_nodes
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1254 : 
; 1255 : 		contour_map_road_nodes = NULL;

  000bd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_road_nodes@@3PAUVEC3D@@A, 0 ; contour_map_road_nodes
$LN6@unload_2d_:

; 1256 : 	}
; 1257 : 
; 1258 : 	if ( contour_map_road_paths )

  000c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A, 0 ; contour_map_road_paths
  000ce	74 15		 je	 SHORT $LN7@unload_2d_

; 1259 : 	{
; 1260 : 
; 1261 : 		safe_free ( contour_map_road_paths );

  000d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1262 : 
; 1263 : 		contour_map_road_paths = NULL;

  000db	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A, 0 ; contour_map_road_paths
$LN7@unload_2d_:

; 1264 : 	}
; 1265 : 
; 1266 : 	if ( contour_map_road_path_positions )

  000e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_road_path_positions@@3PAUVEC3D@@A, 0 ; contour_map_road_path_positions
  000ec	74 15		 je	 SHORT $LN8@unload_2d_

; 1267 : 	{
; 1268 : 		
; 1269 : 		safe_free ( contour_map_road_path_positions );

  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_road_path_positions@@3PAUVEC3D@@A ; contour_map_road_path_positions
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1270 : 
; 1271 : 		contour_map_road_path_positions = NULL;

  000f9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_road_path_positions@@3PAUVEC3D@@A, 0 ; contour_map_road_path_positions
$LN8@unload_2d_:

; 1272 : 	}
; 1273 : 
; 1274 : 	//
; 1275 : 	// Unload contour river data
; 1276 : 	//
; 1277 : 
; 1278 : 	contour_map_number_of_river_nodes = 0;

  00103	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_number_of_river_nodes@@3HA, 0 ; contour_map_number_of_river_nodes

; 1279 : 
; 1280 : 	contour_map_number_of_river_paths = 0;

  0010d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_number_of_river_paths@@3HA, 0 ; contour_map_number_of_river_paths

; 1281 : 
; 1282 : 	if ( contour_map_river_nodes )

  00117	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A, 0 ; contour_map_river_nodes
  0011e	74 15		 je	 SHORT $LN9@unload_2d_

; 1283 : 	{
; 1284 : 
; 1285 : 		safe_free ( contour_map_river_nodes );

  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1286 : 
; 1287 : 		contour_map_river_nodes = NULL;

  0012b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A, 0 ; contour_map_river_nodes
$LN9@unload_2d_:

; 1288 : 	}
; 1289 : 
; 1290 : 	if ( contour_map_river_paths )

  00135	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A, 0 ; contour_map_river_paths
  0013c	74 15		 je	 SHORT $LN10@unload_2d_

; 1291 : 	{
; 1292 : 
; 1293 : 		safe_free ( contour_map_river_paths );

  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1294 : 
; 1295 : 		contour_map_river_paths = NULL;

  00149	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A, 0 ; contour_map_river_paths
$LN10@unload_2d_:

; 1296 : 	}
; 1297 : 
; 1298 : 	if ( contour_map_river_path_positions )

  00153	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_river_path_positions@@3PAUVEC3D@@A, 0 ; contour_map_river_path_positions
  0015a	74 15		 je	 SHORT $LN11@unload_2d_

; 1299 : 	{
; 1300 : 
; 1301 : 		safe_free ( contour_map_river_path_positions );

  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_river_path_positions@@3PAUVEC3D@@A ; contour_map_river_path_positions
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1302 : 
; 1303 : 		contour_map_river_path_positions = NULL;

  00167	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_river_path_positions@@3PAUVEC3D@@A, 0 ; contour_map_river_path_positions
$LN11@unload_2d_:

; 1304 : 	}
; 1305 : 
; 1306 : 	//
; 1307 : 	// Unload contour boundary data
; 1308 : 	//
; 1309 : 
; 1310 : 	contour_map_number_of_boundary_nodes = 0;

  00171	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_number_of_boundary_nodes@@3HA, 0 ; contour_map_number_of_boundary_nodes

; 1311 : 
; 1312 : 	contour_map_number_of_boundary_paths = 0;

  0017b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_number_of_boundary_paths@@3HA, 0 ; contour_map_number_of_boundary_paths

; 1313 : 
; 1314 : 	if ( contour_map_boundary_nodes )

  00185	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_boundary_nodes@@3PAUVEC3D@@A, 0 ; contour_map_boundary_nodes
  0018c	74 15		 je	 SHORT $LN12@unload_2d_

; 1315 : 	{
; 1316 : 
; 1317 : 		safe_free ( contour_map_boundary_nodes );

  0018e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_boundary_nodes@@3PAUVEC3D@@A ; contour_map_boundary_nodes
  00193	50		 push	 eax
  00194	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1318 : 
; 1319 : 		contour_map_boundary_nodes = NULL;

  00199	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_boundary_nodes@@3PAUVEC3D@@A, 0 ; contour_map_boundary_nodes
$LN12@unload_2d_:

; 1320 : 	}
; 1321 : 
; 1322 : 	if ( contour_map_boundary_paths )

  001a3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A, 0 ; contour_map_boundary_paths
  001aa	74 15		 je	 SHORT $LN13@unload_2d_

; 1323 : 	{
; 1324 : 
; 1325 : 		safe_free ( contour_map_boundary_paths );

  001ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A ; contour_map_boundary_paths
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1326 : 
; 1327 : 		contour_map_boundary_paths = NULL;

  001b7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_boundary_paths@@3PAUCONTOUR_PATH@@A, 0 ; contour_map_boundary_paths
$LN13@unload_2d_:

; 1328 : 	}
; 1329 : 
; 1330 : 	if ( contour_map_boundary_path_positions )

  001c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_boundary_path_positions@@3PAUVEC3D@@A, 0 ; contour_map_boundary_path_positions
  001c8	74 15		 je	 SHORT $LN1@unload_2d_

; 1331 : 	{
; 1332 : 		
; 1333 : 		safe_free ( contour_map_boundary_path_positions );

  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_boundary_path_positions@@3PAUVEC3D@@A ; contour_map_boundary_path_positions
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1334 : 
; 1335 : 		contour_map_boundary_path_positions = NULL;

  001d5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_boundary_path_positions@@3PAUVEC3D@@A, 0 ; contour_map_boundary_path_positions
$LN1@unload_2d_:

; 1336 : 	}
; 1337 : }

  001df	5f		 pop	 edi
  001e0	5e		 pop	 esi
  001e1	5b		 pop	 ebx
  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
?unload_2d_terrain@@YGXXZ ENDP				; unload_2d_terrain
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?load_2d_terrain@@YGXPBD@Z
_TEXT	SEGMENT
_path_file$ = -2048					; size = 1024
_node_file$ = -1024					; size = 1024
_path$ = 8						; size = 4
?load_2d_terrain@@YGXPBD@Z PROC				; load_2d_terrain, COMDAT

; 1054 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 40 09 00
	00		 sub	 esp, 2368		; 00000940H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1055 : 
; 1056 : 	char
; 1057 : 		node_file[1024],
; 1058 : 		path_file[1024];
; 1059 : 
; 1060 : 	//
; 1061 : 	// First unload the previous terrain data if it exists
; 1062 : 	//
; 1063 : 
; 1064 : 	unload_2d_terrain ();

  0000c	e8 00 00 00 00	 call	 ?unload_2d_terrain@@YGXXZ ; unload_2d_terrain

; 1065 : 
; 1066 : 	//
; 1067 : 	// Load the rivers
; 1068 : 	//
; 1069 : 
; 1070 : 	sprintf ( node_file, "%s\\route\\rivers.nde", path );

  00011	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00014	50		 push	 eax
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@ONJGIHBF@?$CFs?2route?2rivers?4nde@
  0001a	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 _sprintf
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1071 : 	sprintf ( path_file, "%s\\route\\rivers.wp", path );

  00029	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@COIFOPPN@?$CFs?2route?2rivers?4wp@
  00032	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR _path_file$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 _sprintf
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1072 : 
; 1073 : 	if ( file_exist ( node_file ) )

  00041	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  0004d	85 c0		 test	 eax, eax
  0004f	74 15		 je	 SHORT $LN2@load_2d_te

; 1074 : 	{
; 1075 : 
; 1076 : 		load_2d_terrain_contour_river_data ( node_file, path_file );

  00051	8d 85 00 f8 ff
	ff		 lea	 eax, DWORD PTR _path_file$[ebp]
  00057	50		 push	 eax
  00058	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?load_2d_terrain_contour_river_data@@YGHPAD0@Z ; load_2d_terrain_contour_river_data

; 1077 : 	}
; 1078 : 	else

  00064	eb 53		 jmp	 SHORT $LN4@load_2d_te
$LN2@load_2d_te:

; 1079 : 	{
; 1080 : 
; 1081 : 		sprintf ( node_file, "%s\\route\\rivdata.nde", path );

  00066	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00069	50		 push	 eax
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JNNAJLCI@?$CFs?2route?2rivdata?4nde@
  0006f	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _sprintf
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1082 : 		sprintf ( path_file, "%s\\route\\rivdata.wp", path );

  0007e	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00081	50		 push	 eax
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CGNFNPI@?$CFs?2route?2rivdata?4wp@
  00087	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR _path_file$[ebp]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 _sprintf
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1083 : 
; 1084 : //VJ for loading homemade maps without rivers 030405
; 1085 :     	if ( file_exist ( node_file ) )

  00096	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  000a2	85 c0		 test	 eax, eax
  000a4	74 13		 je	 SHORT $LN4@load_2d_te

; 1086 : 		   load_2d_terrain_contour_river_data ( node_file, path_file );

  000a6	8d 85 00 f8 ff
	ff		 lea	 eax, DWORD PTR _path_file$[ebp]
  000ac	50		 push	 eax
  000ad	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 ?load_2d_terrain_contour_river_data@@YGHPAD0@Z ; load_2d_terrain_contour_river_data
$LN4@load_2d_te:

; 1087 : 	}
; 1088 : 
; 1089 : 	//
; 1090 : 	// Load the roads
; 1091 : 	//
; 1092 : 
; 1093 : 	sprintf ( node_file, "%s\\route\\roads.nde", path );

  000b9	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  000bc	50		 push	 eax
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DEIINOCO@?$CFs?2route?2roads?4nde@
  000c2	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 _sprintf
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1094 : 	sprintf ( path_file, "%s\\route\\roads.wp", path );

  000d1	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  000d4	50		 push	 eax
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OGIGAIBE@?$CFs?2route?2roads?4wp@
  000da	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR _path_file$[ebp]
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 _sprintf
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1095 : 
; 1096 : 	if ( file_exist ( node_file ) )

  000e9	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  000f5	85 c0		 test	 eax, eax
  000f7	74 15		 je	 SHORT $LN5@load_2d_te

; 1097 : 	{
; 1098 : 
; 1099 : 		load_2d_terrain_contour_road_data ( node_file, path_file );

  000f9	8d 85 00 f8 ff
	ff		 lea	 eax, DWORD PTR _path_file$[ebp]
  000ff	50		 push	 eax
  00100	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  00106	51		 push	 ecx
  00107	e8 00 00 00 00	 call	 ?load_2d_terrain_contour_road_data@@YGHPAD0@Z ; load_2d_terrain_contour_road_data

; 1100 : 	}
; 1101 : 	else

  0010c	eb 53		 jmp	 SHORT $LN7@load_2d_te
$LN5@load_2d_te:

; 1102 : 	{
; 1103 : 
; 1104 : 		sprintf ( node_file, "%s\\route\\roaddata.nde", path );

  0010e	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00111	50		 push	 eax
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MGPKDAOB@?$CFs?2route?2roaddata?4nde@
  00117	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 _sprintf
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1105 : 		sprintf ( path_file, "%s\\route\\roaddata.wp", path );

  00126	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00129	50		 push	 eax
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PGGIIJEH@?$CFs?2route?2roaddata?4wp@
  0012f	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR _path_file$[ebp]
  00135	51		 push	 ecx
  00136	e8 00 00 00 00	 call	 _sprintf
  0013b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1106 : 
; 1107 : //VJ for loading homemade maps without roads 030405
; 1108 :     	if ( file_exist ( node_file ) )

  0013e	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  0014a	85 c0		 test	 eax, eax
  0014c	74 13		 je	 SHORT $LN7@load_2d_te

; 1109 :     		load_2d_terrain_contour_road_data ( node_file, path_file );

  0014e	8d 85 00 f8 ff
	ff		 lea	 eax, DWORD PTR _path_file$[ebp]
  00154	50		 push	 eax
  00155	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  0015b	51		 push	 ecx
  0015c	e8 00 00 00 00	 call	 ?load_2d_terrain_contour_road_data@@YGHPAD0@Z ; load_2d_terrain_contour_road_data
$LN7@load_2d_te:

; 1110 : 	}
; 1111 : 
; 1112 : 	//
; 1113 : 	// Load the country boundaries
; 1114 : 	//
; 1115 : 
; 1116 : 	sprintf ( node_file, "%s\\route\\boundary.nde", path );

  00161	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00164	50		 push	 eax
  00165	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PHKFAEHH@?$CFs?2route?2boundary?4nde@
  0016a	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  00170	51		 push	 ecx
  00171	e8 00 00 00 00	 call	 _sprintf
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1117 : 	sprintf ( path_file, "%s\\route\\boundary.wp", path );

  00179	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0017c	50		 push	 eax
  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MHNCPAOJ@?$CFs?2route?2boundary?4wp@
  00182	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR _path_file$[ebp]
  00188	51		 push	 ecx
  00189	e8 00 00 00 00	 call	 _sprintf
  0018e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1118 : 
; 1119 : 	load_2d_terrain_contour_boundary_data ( node_file, path_file );

  00191	8d 85 00 f8 ff
	ff		 lea	 eax, DWORD PTR _path_file$[ebp]
  00197	50		 push	 eax
  00198	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  0019e	51		 push	 ecx
  0019f	e8 00 00 00 00	 call	 ?load_2d_terrain_contour_boundary_data@@YGHPAD0@Z ; load_2d_terrain_contour_boundary_data

; 1120 : 
; 1121 : 	//
; 1122 : 	// Load the lakes
; 1123 : 	//
; 1124 : 
; 1125 : 	sprintf ( node_file, "%s\\route\\lakes.ply", path );

  001a4	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  001a7	50		 push	 eax
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KKDIIPNC@?$CFs?2route?2lakes?4ply@
  001ad	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  001b3	51		 push	 ecx
  001b4	e8 00 00 00 00	 call	 _sprintf
  001b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1126 : 
; 1127 : 	if ( file_exist ( node_file ) )

  001bc	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  001c8	85 c0		 test	 eax, eax
  001ca	74 0c		 je	 SHORT $LN8@load_2d_te

; 1128 : 	{
; 1129 : 
; 1130 : 		load_contour_map_lakes ( node_file );

  001cc	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 ?load_contour_map_lakes@@YGXPAD@Z ; load_contour_map_lakes
$LN8@load_2d_te:

; 1131 : 	}
; 1132 : 
; 1133 : 	//
; 1134 : 	// Load the citybases
; 1135 : 	//
; 1136 : 
; 1137 : 	sprintf ( node_file, "%s\\route\\citybase.ply", path );

  001d8	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  001db	50		 push	 eax
  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DICJKBNE@?$CFs?2route?2citybase?4ply@
  001e1	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  001e7	51		 push	 ecx
  001e8	e8 00 00 00 00	 call	 _sprintf
  001ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1138 : 
; 1139 : 	if ( file_exist ( node_file ) )

  001f0	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  001fc	85 c0		 test	 eax, eax
  001fe	74 0c		 je	 SHORT $LN9@load_2d_te

; 1140 : 	{
; 1141 : 
; 1142 : 		load_contour_map_citybases ( node_file );

  00200	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  00206	50		 push	 eax
  00207	e8 00 00 00 00	 call	 ?load_contour_map_citybases@@YGXPAD@Z ; load_contour_map_citybases
$LN9@load_2d_te:

; 1143 : 	}
; 1144 : 
; 1145 : 	//
; 1146 : 	// Load the contour colours
; 1147 : 	//
; 1148 : 
; 1149 : 	sprintf ( node_file, "%s\\terrain\\2dmapcol.psd", path );

  0020c	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0020f	50		 push	 eax
  00210	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PHGNDNFB@?$CFs?2terrain?22dmapcol?4psd@
  00215	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  0021b	51		 push	 ecx
  0021c	e8 00 00 00 00	 call	 _sprintf
  00221	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1150 : 
; 1151 : 	if ( file_exist ( node_file ) )

  00224	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00230	85 c0		 test	 eax, eax
  00232	74 0c		 je	 SHORT $LN10@load_2d_te

; 1152 : 	{
; 1153 : 	
; 1154 : 		load_contour_map_colours ( node_file );

  00234	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 ?load_contour_map_colours@@YGXPBD@Z ; load_contour_map_colours
$LN10@load_2d_te:

; 1155 : 	}
; 1156 : 
; 1157 : 	//
; 1158 : 	// Load gridpost elevation map
; 1159 : 	//
; 1160 : 
; 1161 : 	initialise_terrain_simple_elevation ();

  00240	e8 00 00 00 00	 call	 ?initialise_terrain_simple_elevation@@YGXXZ ; initialise_terrain_simple_elevation

; 1162 : 
; 1163 : 	sprintf ( node_file, "%s\\terrain\\terrain.sim", path );

  00245	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00248	50		 push	 eax
  00249	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BLFCAGPM@?$CFs?2terrain?2terrain?4sim@
  0024e	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _node_file$[ebp]
  00254	51		 push	 ecx
  00255	e8 00 00 00 00	 call	 _sprintf
  0025a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1164 : 
; 1165 : 	if ( !load_terrain_simple_elevation ( node_file ) )

  0025d	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  00263	50		 push	 eax
  00264	e8 00 00 00 00	 call	 ?load_terrain_simple_elevation@@YGHPBD@Z ; load_terrain_simple_elevation
  00269	85 c0		 test	 eax, eax
  0026b	75 1f		 jne	 SHORT $LN11@load_2d_te

; 1166 : 	{
; 1167 : 
; 1168 : //		generate_terrain_simple_elevation ( 512.0 );
; 1169 : // Vadim 051120 We need higher resolution 2D map for fjords and such.
; 1170 : // it will only work if the original file is absent though.
; 1171 : 		generate_terrain_simple_elevation ( 256.0 );

  0026d	51		 push	 ecx
  0026e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  00276	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027b	e8 00 00 00 00	 call	 ?generate_terrain_simple_elevation@@YGXM@Z ; generate_terrain_simple_elevation

; 1172 : 
; 1173 : 		save_terrain_simple_elevation ( node_file );

  00280	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _node_file$[ebp]
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 ?save_terrain_simple_elevation@@YGXPBD@Z ; save_terrain_simple_elevation
$LN11@load_2d_te:

; 1174 : 	}
; 1175 : 
; 1176 : 	//
; 1177 : 	// Generate the gridpost mipmaps
; 1178 : 	//
; 1179 : 
; 1180 : 	generate_2d_terrain_contour_mipmaps ();

  0028c	e8 00 00 00 00	 call	 ?generate_2d_terrain_contour_mipmaps@@YGXXZ ; generate_2d_terrain_contour_mipmaps

; 1181 : }

  00291	5f		 pop	 edi
  00292	5e		 pop	 esi
  00293	5b		 pop	 ebx
  00294	8b e5		 mov	 esp, ebp
  00296	5d		 pop	 ebp
  00297	c2 04 00	 ret	 4
?load_2d_terrain@@YGXPBD@Z ENDP				; load_2d_terrain
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?set_2d_terrain_contour_heights@@YGXHPAM@Z
_TEXT	SEGMENT
_number_of_heights$ = 8					; size = 4
_heights$ = 12						; size = 4
?set_2d_terrain_contour_heights@@YGXHPAM@Z PROC		; set_2d_terrain_contour_heights, COMDAT

; 1024 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1025 : 	terrain_2d_contour_heights = contour_heights;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_2d_contour_heights@@3PAMA, OFFSET ?contour_heights@@3PAMA ; terrain_2d_contour_heights, contour_heights

; 1026 : 
; 1027 : #if 0  // arneh - unused code with new map
; 1028 : 	ASSERT ( number_of_heights );
; 1029 : 	ASSERT ( heights );
; 1030 : 
; 1031 : 	if ( terrain_2d_contour_heights && terrain_2d_contour_heights != contour_heights)
; 1032 : 	{
; 1033 : 		safe_free ( terrain_2d_contour_heights );
; 1034 : 
; 1035 : 		terrain_2d_contour_heights = NULL;
; 1036 : 	}
; 1037 : 
; 1038 : 	if (command_line_campaign_map != 0)
; 1039 : 		terrain_2d_contour_heights = contour_heights;
; 1040 : 	else
; 1041 : 	{
; 1042 : 		terrain_2d_contour_heights = safe_malloc ( sizeof ( float ) * number_of_heights );
; 1043 : 	
; 1044 : 		memcpy ( terrain_2d_contour_heights, heights, ( sizeof ( float ) * number_of_heights ) );
; 1045 : 	}
; 1046 : #endif
; 1047 : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?set_2d_terrain_contour_heights@@YGXHPAM@Z ENDP		; set_2d_terrain_contour_heights
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?set_2d_terrain_contour_colour@@YGXH@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?set_2d_terrain_contour_colour@@YGXH@Z PROC		; set_2d_terrain_contour_colour, COMDAT

; 999  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1000 : #if 0   // arneh - unused code with new map
; 1001 : 	if (command_line_campaign_map != 0)
; 1002 : 		return;
; 1003 : 
; 1004 : 	ASSERT ( ( terrain_2d_contour_colours ) && ( terrain_2d_contour_intensities ) );
; 1005 : 
; 1006 : 	if ( flag )
; 1007 : 	{
; 1008 : 
; 1009 : 		terrain_2d_current_contour_colours = terrain_2d_contour_colours;
; 1010 : 	}
; 1011 : 	else
; 1012 : 	{
; 1013 : 
; 1014 : 		terrain_2d_current_contour_colours = terrain_2d_contour_intensities;
; 1015 : 	}
; 1016 : #endif
; 1017 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?set_2d_terrain_contour_colour@@YGXH@Z ENDP		; set_2d_terrain_contour_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?generate_2d_terrain_contour_mipmaps@@YGXXZ
_TEXT	SEGMENT
tv77 = -128						; size = 4
tv78 = -124						; size = 4
_average$1 = -56					; size = 4
_total$2 = -52						; size = 4
_y_av$3 = -48						; size = 4
_x_av$4 = -44						; size = 4
_min_value$ = -40					; size = 4
_data$ = -36						; size = 4
_parent_data$ = -32					; size = 4
_parent_height$ = -28					; size = 4
_parent_width$ = -24					; size = 4
_height$ = -20						; size = 4
_width$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_count$ = -4						; size = 4
?generate_2d_terrain_contour_mipmaps@@YGXXZ PROC	; generate_2d_terrain_contour_mipmaps, COMDAT

; 859  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 860  : 
; 861  : 	int
; 862  : 		count,
; 863  : 		x,
; 864  : 		y,
; 865  : 		width,
; 866  : 		height,
; 867  : 		parent_width,
; 868  : 		parent_height;
; 869  : 
; 870  : 	float
; 871  : 		*parent_data,
; 872  : 		*data,
; 873  : 		min_value;
; 874  : 
; 875  : 	//
; 876  : 	// Assess the number of mipmaps
; 877  : 	//
; 878  : 
; 879  : 	width = terrain_3d_simple_elevation_width - 1;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  00011	83 e8 01	 sub	 eax, 1
  00014	89 45 f0	 mov	 DWORD PTR _width$[ebp], eax

; 880  : 
; 881  : 	height = terrain_3d_simple_elevation_height - 1;

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_height@@3HA ; terrain_3d_simple_elevation_height
  0001c	83 e8 01	 sub	 eax, 1
  0001f	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax

; 882  : 
; 883  : 	min_value = min ( width, height );

  00022	8d 45 ec	 lea	 eax, DWORD PTR _height$[ebp]
  00025	50		 push	 eax
  00026	8d 4d f0	 lea	 ecx, DWORD PTR _width$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  0002f	f3 0f 2a 00	 cvtsi2ss xmm0, DWORD PTR [eax]
  00033	f3 0f 11 45 d8	 movss	 DWORD PTR _min_value$[ebp], xmm0

; 884  : 
; 885  : 	contour_map_number_of_mipmaps = 0;

  00038	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contour_map_number_of_mipmaps@@3HA, 0 ; contour_map_number_of_mipmaps
$LN2@generate_2:

; 886  : 
; 887  : 	while ( min_value == ( ( int ) min_value ) )

  00042	f3 0f 2c 45 d8	 cvttss2si eax, DWORD PTR _min_value$[ebp]
  00047	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0004b	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _min_value$[ebp]
  00050	0f 2e c8	 ucomiss xmm1, xmm0
  00053	9f		 lahf
  00054	f6 c4 44	 test	 ah, 68			; 00000044H
  00057	7a 21		 jp	 SHORT $LN3@generate_2

; 888  : 	{
; 889  : 
; 890  : 		contour_map_number_of_mipmaps += 1;

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_number_of_mipmaps@@3HA ; contour_map_number_of_mipmaps
  0005e	83 c0 01	 add	 eax, 1
  00061	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_number_of_mipmaps@@3HA, eax ; contour_map_number_of_mipmaps

; 891  : 
; 892  : 		min_value /= 2;

  00066	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _min_value$[ebp]
  0006b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00073	f3 0f 11 45 d8	 movss	 DWORD PTR _min_value$[ebp], xmm0

; 893  : 	}

  00078	eb c8		 jmp	 SHORT $LN2@generate_2
$LN3@generate_2:

; 894  : 
; 895  : 	contour_map_number_of_mipmaps = bound ( contour_map_number_of_mipmaps, 0, 12 );

  0007a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_number_of_mipmaps@@3HA, 0 ; contour_map_number_of_mipmaps
  00081	7d 09		 jge	 SHORT $LN29@generate_2
  00083	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
  0008a	eb 20		 jmp	 SHORT $LN30@generate_2
$LN29@generate_2:
  0008c	83 3d 00 00 00
	00 0c		 cmp	 DWORD PTR ?contour_map_number_of_mipmaps@@3HA, 12 ; contour_map_number_of_mipmaps, 0000000cH
  00093	7e 09		 jle	 SHORT $LN27@generate_2
  00095	c7 45 80 0c 00
	00 00		 mov	 DWORD PTR tv77[ebp], 12	; 0000000cH
  0009c	eb 08		 jmp	 SHORT $LN28@generate_2
$LN27@generate_2:
  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_number_of_mipmaps@@3HA ; contour_map_number_of_mipmaps
  000a3	89 45 80	 mov	 DWORD PTR tv77[ebp], eax
$LN28@generate_2:
  000a6	8b 4d 80	 mov	 ecx, DWORD PTR tv77[ebp]
  000a9	89 4d 84	 mov	 DWORD PTR tv78[ebp], ecx
$LN30@generate_2:
  000ac	8b 55 84	 mov	 edx, DWORD PTR tv78[ebp]
  000af	89 15 00 00 00
	00		 mov	 DWORD PTR ?contour_map_number_of_mipmaps@@3HA, edx ; contour_map_number_of_mipmaps

; 896  : 
; 897  : 	ASSERT ( contour_map_number_of_mipmaps );

  000b5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contour_map_number_of_mipmaps@@3HA, 0 ; contour_map_number_of_mipmaps
  000bc	75 18		 jne	 SHORT $LN19@generate_2
  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??generate_2d_terrain_contour_mipmaps@@YGXXZ@4JA
  000c3	83 c0 26	 add	 eax, 38			; 00000026H
  000c6	50		 push	 eax
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@GKFJCG@c?3?2users?2nhv90?2projects?2eech?2mo@
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@ODKPBGBN@contour_map_number_of_mipmaps@
  000d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN19@generate_2:

; 898  : 
; 899  : 	contour_map_mipmaps = ( float * * ) safe_malloc ( sizeof ( float * ) * contour_map_number_of_mipmaps );

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_number_of_mipmaps@@3HA ; contour_map_number_of_mipmaps
  000db	c1 e0 02	 shl	 eax, 2
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000e4	a3 00 00 00 00	 mov	 DWORD PTR ?contour_map_mipmaps@@3PAPAMA, eax ; contour_map_mipmaps

; 900  : 
; 901  : 	for ( count = 0; count < contour_map_number_of_mipmaps; count++ )

  000e9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000f0	eb 09		 jmp	 SHORT $LN6@generate_2
$LN4@generate_2:
  000f2	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000f5	83 c0 01	 add	 eax, 1
  000f8	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN6@generate_2:
  000fb	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000fe	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?contour_map_number_of_mipmaps@@3HA ; contour_map_number_of_mipmaps
  00104	0f 8d 35 02 00
	00		 jge	 $LN5@generate_2

; 902  : 	{
; 903  : 
; 904  : 		parent_width = width;

  0010a	8b 45 f0	 mov	 eax, DWORD PTR _width$[ebp]
  0010d	89 45 e8	 mov	 DWORD PTR _parent_width$[ebp], eax

; 905  : 		parent_height = height;

  00110	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00113	89 45 e4	 mov	 DWORD PTR _parent_height$[ebp], eax

; 906  : 
; 907  : 		width /= 2;

  00116	8b 45 f0	 mov	 eax, DWORD PTR _width$[ebp]
  00119	99		 cdq
  0011a	2b c2		 sub	 eax, edx
  0011c	d1 f8		 sar	 eax, 1
  0011e	89 45 f0	 mov	 DWORD PTR _width$[ebp], eax

; 908  : 		height /= 2;

  00121	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00124	99		 cdq
  00125	2b c2		 sub	 eax, edx
  00127	d1 f8		 sar	 eax, 1
  00129	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax

; 909  : 
; 910  : 		parent_width++;

  0012c	8b 45 e8	 mov	 eax, DWORD PTR _parent_width$[ebp]
  0012f	83 c0 01	 add	 eax, 1
  00132	89 45 e8	 mov	 DWORD PTR _parent_width$[ebp], eax

; 911  : 		parent_height++;

  00135	8b 45 e4	 mov	 eax, DWORD PTR _parent_height$[ebp]
  00138	83 c0 01	 add	 eax, 1
  0013b	89 45 e4	 mov	 DWORD PTR _parent_height$[ebp], eax

; 912  : 
; 913  : 		width++;

  0013e	8b 45 f0	 mov	 eax, DWORD PTR _width$[ebp]
  00141	83 c0 01	 add	 eax, 1
  00144	89 45 f0	 mov	 DWORD PTR _width$[ebp], eax

; 914  : 		height++;

  00147	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  0014a	83 c0 01	 add	 eax, 1
  0014d	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax

; 915  : 
; 916  : 		contour_map_mipmaps[count] = ( float * ) safe_malloc ( sizeof ( float ) * ( width * height ) );

  00150	8b 45 f0	 mov	 eax, DWORD PTR _width$[ebp]
  00153	0f af 45 ec	 imul	 eax, DWORD PTR _height$[ebp]
  00157	c1 e0 02	 shl	 eax, 2
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00160	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00163	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_mipmaps@@3PAPAMA ; contour_map_mipmaps
  00169	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 917  : 
; 918  : 		data = contour_map_mipmaps[count];

  0016c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0016f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_mipmaps@@3PAPAMA ; contour_map_mipmaps
  00175	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00178	89 55 dc	 mov	 DWORD PTR _data$[ebp], edx

; 919  : 
; 920  : 		if ( count == 0 )

  0017b	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  0017f	75 0a		 jne	 SHORT $LN20@generate_2

; 921  : 		{
; 922  : 
; 923  : 			parent_data = terrain_3d_simple_elevation_grid;

  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_grid@@3PAMA ; terrain_3d_simple_elevation_grid
  00186	89 45 e0	 mov	 DWORD PTR _parent_data$[ebp], eax

; 924  : 		}
; 925  : 		else

  00189	eb 10		 jmp	 SHORT $LN21@generate_2
$LN20@generate_2:

; 926  : 		{
; 927  : 
; 928  : 			parent_data = contour_map_mipmaps[count-1];

  0018b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0018e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_mipmaps@@3PAPAMA ; contour_map_mipmaps
  00194	8b 54 81 fc	 mov	 edx, DWORD PTR [ecx+eax*4-4]
  00198	89 55 e0	 mov	 DWORD PTR _parent_data$[ebp], edx
$LN21@generate_2:

; 929  : 		}
; 930  : 
; 931  : 		for ( y = 0; y < height; y++ )

  0019b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  001a2	eb 09		 jmp	 SHORT $LN9@generate_2
$LN7@generate_2:
  001a4	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  001a7	83 c0 01	 add	 eax, 1
  001aa	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN9@generate_2:
  001ad	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  001b0	3b 45 ec	 cmp	 eax, DWORD PTR _height$[ebp]
  001b3	0f 8d 5d 01 00
	00		 jge	 $LN8@generate_2

; 932  : 		{
; 933  : 
; 934  : 			for ( x = 0; x < width; x++ )

  001b9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001c0	eb 09		 jmp	 SHORT $LN12@generate_2
$LN10@generate_2:
  001c2	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001c5	83 c0 01	 add	 eax, 1
  001c8	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN12@generate_2:
  001cb	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001ce	3b 45 f0	 cmp	 eax, DWORD PTR _width$[ebp]
  001d1	0f 8d 3a 01 00
	00		 jge	 $LN11@generate_2

; 935  : 			{
; 936  : 
; 937  : 				int
; 938  : 					x_av,
; 939  : 					y_av,
; 940  : 					total;
; 941  : 
; 942  : 				float
; 943  : 					average;
; 944  : 
; 945  : 				total = 0;

  001d7	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _total$2[ebp], 0

; 946  : 
; 947  : 				average = 0;

  001de	0f 57 c0	 xorps	 xmm0, xmm0
  001e1	f3 0f 11 45 c8	 movss	 DWORD PTR _average$1[ebp], xmm0

; 948  : 
; 949  : 				for ( y_av = -1; y_av <= 1; y_av++ )

  001e6	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _y_av$3[ebp], -1
  001ed	eb 09		 jmp	 SHORT $LN15@generate_2
$LN13@generate_2:
  001ef	8b 45 d0	 mov	 eax, DWORD PTR _y_av$3[ebp]
  001f2	83 c0 01	 add	 eax, 1
  001f5	89 45 d0	 mov	 DWORD PTR _y_av$3[ebp], eax
$LN15@generate_2:
  001f8	83 7d d0 01	 cmp	 DWORD PTR _y_av$3[ebp], 1
  001fc	0f 8f e0 00 00
	00		 jg	 $LN14@generate_2

; 950  : 				{
; 951  : 
; 952  : 					if ( ( ( ( y * 2 ) + y_av ) >= 0 ) && ( ( ( y * 2 ) + y_av ) < parent_height ) )

  00202	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00205	8b 4d d0	 mov	 ecx, DWORD PTR _y_av$3[ebp]
  00208	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0020b	85 d2		 test	 edx, edx
  0020d	0f 8c ca 00 00
	00		 jl	 $LN17@generate_2
  00213	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00216	8b 4d d0	 mov	 ecx, DWORD PTR _y_av$3[ebp]
  00219	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0021c	3b 55 e4	 cmp	 edx, DWORD PTR _parent_height$[ebp]
  0021f	0f 8d b8 00 00
	00		 jge	 $LN17@generate_2

; 953  : 					{
; 954  : 	
; 955  : 						for ( x_av = -1; x_av <= 1; x_av++ )

  00225	c7 45 d4 ff ff
	ff ff		 mov	 DWORD PTR _x_av$4[ebp], -1
  0022c	eb 09		 jmp	 SHORT $LN18@generate_2
$LN16@generate_2:
  0022e	8b 45 d4	 mov	 eax, DWORD PTR _x_av$4[ebp]
  00231	83 c0 01	 add	 eax, 1
  00234	89 45 d4	 mov	 DWORD PTR _x_av$4[ebp], eax
$LN18@generate_2:
  00237	83 7d d4 01	 cmp	 DWORD PTR _x_av$4[ebp], 1
  0023b	0f 8f 9c 00 00
	00		 jg	 $LN17@generate_2

; 956  : 						{
; 957  : 	
; 958  : 							if ( ( ( ( x * 2 ) + x_av ) >= 0 ) && ( ( ( x * 2 ) + x_av ) < parent_width ) )

  00241	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00244	8b 4d d4	 mov	 ecx, DWORD PTR _x_av$4[ebp]
  00247	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0024a	85 d2		 test	 edx, edx
  0024c	0f 8c 86 00 00
	00		 jl	 $LN25@generate_2
  00252	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00255	8b 4d d4	 mov	 ecx, DWORD PTR _x_av$4[ebp]
  00258	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0025b	3b 55 e8	 cmp	 edx, DWORD PTR _parent_width$[ebp]
  0025e	7d 78		 jge	 SHORT $LN25@generate_2

; 959  : 							{
; 960  : 
; 961  : 								if ( ( x_av == 0 ) && ( y_av == 0 ) )

  00260	83 7d d4 00	 cmp	 DWORD PTR _x_av$4[ebp], 0
  00264	75 41		 jne	 SHORT $LN24@generate_2
  00266	83 7d d0 00	 cmp	 DWORD PTR _y_av$3[ebp], 0
  0026a	75 3b		 jne	 SHORT $LN24@generate_2

; 962  : 								{
; 963  : 	
; 964  : 									average += 4 * ( parent_data[(y*2+y_av)*parent_width+(x*2+x_av)] );

  0026c	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  0026f	8b 4d d0	 mov	 ecx, DWORD PTR _y_av$3[ebp]
  00272	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00275	0f af 55 e8	 imul	 edx, DWORD PTR _parent_width$[ebp]
  00279	03 55 d4	 add	 edx, DWORD PTR _x_av$4[ebp]
  0027c	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0027f	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  00282	8b 55 e0	 mov	 edx, DWORD PTR _parent_data$[ebp]
  00285	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  0028d	f3 0f 59 04 8a	 mulss	 xmm0, DWORD PTR [edx+ecx*4]
  00292	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _average$1[ebp]
  00297	f3 0f 11 45 c8	 movss	 DWORD PTR _average$1[ebp], xmm0

; 965  : 
; 966  : 									total += 4;

  0029c	8b 45 cc	 mov	 eax, DWORD PTR _total$2[ebp]
  0029f	83 c0 04	 add	 eax, 4
  002a2	89 45 cc	 mov	 DWORD PTR _total$2[ebp], eax

; 967  : 								}
; 968  : 								else

  002a5	eb 31		 jmp	 SHORT $LN25@generate_2
$LN24@generate_2:

; 969  : 								{
; 970  : 	
; 971  : 									average += parent_data[(y*2+y_av)*parent_width+(x*2+x_av)];

  002a7	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  002aa	8b 4d d0	 mov	 ecx, DWORD PTR _y_av$3[ebp]
  002ad	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002b0	0f af 55 e8	 imul	 edx, DWORD PTR _parent_width$[ebp]
  002b4	03 55 d4	 add	 edx, DWORD PTR _x_av$4[ebp]
  002b7	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  002ba	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  002bd	8b 55 e0	 mov	 edx, DWORD PTR _parent_data$[ebp]
  002c0	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _average$1[ebp]
  002c5	f3 0f 58 04 8a	 addss	 xmm0, DWORD PTR [edx+ecx*4]
  002ca	f3 0f 11 45 c8	 movss	 DWORD PTR _average$1[ebp], xmm0

; 972  : 
; 973  : 									total++;

  002cf	8b 45 cc	 mov	 eax, DWORD PTR _total$2[ebp]
  002d2	83 c0 01	 add	 eax, 1
  002d5	89 45 cc	 mov	 DWORD PTR _total$2[ebp], eax
$LN25@generate_2:

; 974  : 								}
; 975  : 							}
; 976  : 						}

  002d8	e9 51 ff ff ff	 jmp	 $LN16@generate_2
$LN17@generate_2:

; 977  : 					}
; 978  : 				}

  002dd	e9 0d ff ff ff	 jmp	 $LN13@generate_2
$LN14@generate_2:

; 979  : 
; 980  : 				average /= total;

  002e2	f3 0f 2a 45 cc	 cvtsi2ss xmm0, DWORD PTR _total$2[ebp]
  002e7	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _average$1[ebp]
  002ec	f3 0f 5e c8	 divss	 xmm1, xmm0
  002f0	f3 0f 11 4d c8	 movss	 DWORD PTR _average$1[ebp], xmm1

; 981  : 
; 982  : 				data[y*width+x] = average;

  002f5	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  002f8	0f af 45 f0	 imul	 eax, DWORD PTR _width$[ebp]
  002fc	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  002ff	8b 4d dc	 mov	 ecx, DWORD PTR _data$[ebp]
  00302	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _average$1[ebp]
  00307	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 983  : 			}

  0030c	e9 b1 fe ff ff	 jmp	 $LN10@generate_2
$LN11@generate_2:

; 984  : 		}

  00311	e9 8e fe ff ff	 jmp	 $LN7@generate_2
$LN8@generate_2:

; 985  : 
; 986  : 		parent_width--;

  00316	8b 45 e8	 mov	 eax, DWORD PTR _parent_width$[ebp]
  00319	83 e8 01	 sub	 eax, 1
  0031c	89 45 e8	 mov	 DWORD PTR _parent_width$[ebp], eax

; 987  : 		parent_height--;

  0031f	8b 45 e4	 mov	 eax, DWORD PTR _parent_height$[ebp]
  00322	83 e8 01	 sub	 eax, 1
  00325	89 45 e4	 mov	 DWORD PTR _parent_height$[ebp], eax

; 988  : 
; 989  : 		width--;

  00328	8b 45 f0	 mov	 eax, DWORD PTR _width$[ebp]
  0032b	83 e8 01	 sub	 eax, 1
  0032e	89 45 f0	 mov	 DWORD PTR _width$[ebp], eax

; 990  : 		height--;

  00331	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00334	83 e8 01	 sub	 eax, 1
  00337	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax

; 991  : 	}

  0033a	e9 b3 fd ff ff	 jmp	 $LN4@generate_2
$LN5@generate_2:

; 992  : }

  0033f	5f		 pop	 edi
  00340	5e		 pop	 esi
  00341	5b		 pop	 ebx
  00342	8b e5		 mov	 esp, ebp
  00344	5d		 pop	 ebp
  00345	c3		 ret	 0
?generate_2d_terrain_contour_mipmaps@@YGXXZ ENDP	; generate_2d_terrain_contour_mipmaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?draw_2d_terrain_map@@YGXXZ
_TEXT	SEGMENT
tv180 = -220						; size = 4
tv174 = -220						; size = 4
tv168 = -220						; size = 4
tv162 = -220						; size = 4
tv181 = -216						; size = 4
tv175 = -216						; size = 4
tv169 = -216						; size = 4
tv163 = -216						; size = 4
_number_of_points$1 = -148				; size = 4
_number_of_points$2 = -144				; size = 4
_colour_index$3 = -140					; size = 4
_posz$4 = -136						; size = 4
_posx$5 = -132						; size = 4
_colour_indices$ = -128					; size = 4
_colours$ = -124					; size = 4
_surface$ = -120					; size = 4
_points_xz$ = -116					; size = 4
_iymin$ = -112						; size = 4
_iymax$ = -108						; size = 4
_ixmin$ = -104						; size = 4
_ixmax$ = -100						; size = 4
_oymin$ = -96						; size = 4
_oymax$ = -92						; size = 4
_oxmin$ = -88						; size = 4
_oxmax$ = -84						; size = 4
_current_sector_z_offset$ = -80				; size = 4
_current_sector_x_offset$ = -76				; size = 4
_result_outcodes$ = -72					; size = 4
_result_colours$ = -68					; size = 4
_result_2d_points$ = -64				; size = 4
_result_3d_points$ = -60				; size = 4
_polygon$ = -56						; size = 4
_sector_z_increment$ = -52				; size = 4
_sector_x_increment$ = -48				; size = 4
_sector_z_total$ = -44					; size = 4
_sector_x_total$ = -40					; size = 4
_sector_z_count$ = -36					; size = 4
_sector_x_count$ = -32					; size = 4
_maximum_sector_z$ = -28				; size = 4
_maximum_sector_x$ = -24				; size = 4
_minimum_sector_z$ = -20				; size = 4
_minimum_sector_x$ = -16				; size = 4
_current_sector_z$ = -12				; size = 4
_current_sector_x$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_2d_terrain_map@@YGXXZ PROC			; draw_2d_terrain_map, COMDAT

; 462  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 463  : 
; 464  : 	int
; 465  : 		count,
; 466  : 		current_sector_x,
; 467  : 		current_sector_z,
; 468  : 		minimum_sector_x,
; 469  : 		minimum_sector_z,
; 470  : 		maximum_sector_x,
; 471  : 		maximum_sector_z,
; 472  : 		sector_x_count,
; 473  : 		sector_z_count,
; 474  : 		sector_x_total,
; 475  : 		sector_z_total,
; 476  : 		sector_x_increment,
; 477  : 		sector_z_increment;
; 478  : 
; 479  : 	terrain_3d_face
; 480  : 		*polygon;
; 481  : 
; 482  : 	object_transformed_3d_point
; 483  : 		*result_3d_points;
; 484  : 
; 485  : 	object_transformed_2d_point
; 486  : 		*result_2d_points;
; 487  : 
; 488  : 	terrain_3d_transformed_point_colour
; 489  : 		*result_colours;
; 490  : 
; 491  : 	unsigned char
; 492  : 		*result_outcodes;
; 493  : 
; 494  : 	float
; 495  : 		current_sector_x_offset,
; 496  : 		current_sector_z_offset,
; 497  : 		oxmax,
; 498  : 		oxmin,
; 499  : 		oymax,
; 500  : 		oymin;
; 501  : 
; 502  : 	int
; 503  : 		ixmax,
; 504  : 		ixmin,
; 505  : 		iymax,
; 506  : 		iymin;
; 507  : 
; 508  : 	terrain_3d_point_xz
; 509  : 		*points_xz;
; 510  : 
; 511  : 	terrain_3d_surface
; 512  : 		*surface;
; 513  : 
; 514  : 	terrain_3d_colour
; 515  : 		*colours;
; 516  : 
; 517  : 	terrain_3d_colour_index
; 518  : 		*colour_indices;
; 519  : 
; 520  : 	//
; 521  : 	// Turn off Z buffering for the 2d map.
; 522  : 	//
; 523  : 
; 524  : 	set_d3d_int_state ( D3DRENDERSTATE_ZENABLE, FALSE );

  0000c	6a 00		 push	 0
  0000e	6a 07		 push	 7
  00010	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 525  : 
; 526  : 	//
; 527  : 	// Turn off fogging
; 528  : 	//
; 529  : 
; 530  : 	suspend_d3d_fog ();

  00015	e8 00 00 00 00	 call	 ?suspend_d3d_fog@@YGXXZ	; suspend_d3d_fog

; 531  : 
; 532  : 	//
; 533  : 	// Set up the texturing & renderstates
; 534  : 	//
; 535  : 
; 536  : 	set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, FALSE, FALSE );

  0001a	6a 00		 push	 0
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 537  : 
; 538  : 	set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_NONE );

  00027	6a 01		 push	 1
  00029	6a 16		 push	 22			; 00000016H
  0002b	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 539  : 	set_d3d_int_state ( D3DRENDERSTATE_SPECULARENABLE, FALSE );

  00030	6a 00		 push	 0
  00032	6a 1d		 push	 29			; 0000001dH
  00034	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 540  : 	set_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

  00039	6a 02		 push	 2
  0003b	6a 09		 push	 9
  0003d	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 541  : 
; 542  : 	set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESS, D3DTADDRESS_WRAP );

  00042	6a 01		 push	 1
  00044	6a 0c		 push	 12			; 0000000cH
  00046	6a 00		 push	 0
  00048	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 543  : 	set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP );

  0004d	6a 01		 push	 1
  0004f	6a 0d		 push	 13			; 0000000dH
  00051	6a 00		 push	 0
  00053	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 544  : 	set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP );

  00058	6a 01		 push	 1
  0005a	6a 0e		 push	 14			; 0000000eH
  0005c	6a 00		 push	 0
  0005e	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 545  : 	set_d3d_texture_stage_state ( 0, D3DTSS_MAGFILTER, TERRAIN_TEXTURE_FILTER );

  00063	6a 01		 push	 1
  00065	6a 10		 push	 16			; 00000010H
  00067	6a 00		 push	 0
  00069	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 546  : 	set_d3d_texture_stage_state ( 0, D3DTSS_MINFILTER, TERRAIN_TEXTURE_MIN_FILTER );

  0006e	6a 01		 push	 1
  00070	6a 11		 push	 17			; 00000011H
  00072	6a 00		 push	 0
  00074	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 547  : 
; 548  : 	if ( terrain_2d_map_textured )

  00079	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_2d_map_textured@@3HA, 0
  00080	74 0d		 je	 SHORT $LN17@draw_2d_te

; 549  : 	{
; 550  : 
; 551  : 		set_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

  00082	6a 04		 push	 4
  00084	6a 01		 push	 1
  00086	6a 00		 push	 0
  00088	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 552  : 	}
; 553  : 	else

  0008d	eb 14		 jmp	 SHORT $LN18@draw_2d_te
$LN17@draw_2d_te:

; 554  : 	{
; 555  : 
; 556  : 		set_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );

  0008f	6a 01		 push	 1
  00091	6a 01		 push	 1
  00093	6a 00		 push	 0
  00095	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 557  : 		set_d3d_texture ( 0, NULL );

  0009a	6a 00		 push	 0
  0009c	6a 00		 push	 0
  0009e	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture
$LN18@draw_2d_te:

; 558  : 	}
; 559  : 
; 560  : 	set_d3d_texture_stage_state ( 1, D3DTSS_COLOROP, D3DTOP_DISABLE );

  000a3	6a 01		 push	 1
  000a5	6a 01		 push	 1
  000a7	6a 01		 push	 1
  000a9	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 561  : 	set_d3d_texture ( 1, NULL );

  000ae	6a 00		 push	 0
  000b0	6a 01		 push	 1
  000b2	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture

; 562  : 
; 563  : 	//
; 564  : 	// Set up the lighting indices
; 565  : 	//
; 566  : 
; 567  : 	terrain_3d_transformed_point_normals[0].r = 1;

  000b7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000bc	6b c8 00	 imul	 ecx, eax, 0
  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c7	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_transformed_point_normals@@3PAUTERRAIN_3D_TRANSFORMED_POINT_NORMAL@@A[ecx], xmm0

; 568  : 	terrain_3d_transformed_point_normals[0].g = 1;

  000cf	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d4	6b c8 00	 imul	 ecx, eax, 0
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 81 04
	00 00 00	 movss	 DWORD PTR ?terrain_3d_transformed_point_normals@@3PAUTERRAIN_3D_TRANSFORMED_POINT_NORMAL@@A[ecx+4], xmm0

; 569  : 	terrain_3d_transformed_point_normals[0].b = 1;

  000e7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ec	6b c8 00	 imul	 ecx, eax, 0
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f7	f3 0f 11 81 08
	00 00 00	 movss	 DWORD PTR ?terrain_3d_transformed_point_normals@@3PAUTERRAIN_3D_TRANSFORMED_POINT_NORMAL@@A[ecx+8], xmm0

; 570  : 
; 571  : 	//
; 572  : 	// Set up the sectors to scan
; 573  : 	//
; 574  : 
; 575  : 	set_viewport ( terrain_2d_map_screen_xmin, terrain_2d_map_screen_ymin, terrain_2d_map_screen_xmax, terrain_2d_map_screen_ymax );

  000ff	51		 push	 ecx
  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ymax@@3MA
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	51		 push	 ecx
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xmax@@3MA
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ymin@@3MA
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	51		 push	 ecx
  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xmin@@3MA
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	e8 00 00 00 00	 call	 ?set_viewport@@YGXMMMM@Z ; set_viewport

; 576  : 
; 577  : 	get_terrain_3d_sector ( terrain_2d_map_world_xmin, terrain_2d_map_world_zmin, &minimum_sector_x, &minimum_sector_z );

  0013c	8d 45 ec	 lea	 eax, DWORD PTR _minimum_sector_z$[ebp]
  0013f	50		 push	 eax
  00140	8d 4d f0	 lea	 ecx, DWORD PTR _minimum_sector_x$[ebp]
  00143	51		 push	 ecx
  00144	51		 push	 ecx
  00145	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_zmin@@3MA
  0014d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00152	51		 push	 ecx
  00153	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_xmin@@3MA
  0015b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00160	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 578  : 
; 579  : 	get_terrain_3d_sector ( terrain_2d_map_world_xmax, terrain_2d_map_world_zmax, &maximum_sector_x, &maximum_sector_z );

  00165	8d 45 e4	 lea	 eax, DWORD PTR _maximum_sector_z$[ebp]
  00168	50		 push	 eax
  00169	8d 4d e8	 lea	 ecx, DWORD PTR _maximum_sector_x$[ebp]
  0016c	51		 push	 ecx
  0016d	51		 push	 ecx
  0016e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_zmax@@3MA
  00176	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017b	51		 push	 ecx
  0017c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_2d_map_world_xmax@@3MA
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 580  : 
; 581  : 	minimum_sector_x = bound ( minimum_sector_x, 0, ( terrain_3d_sector_x_max - 1 ) );

  0018e	83 7d f0 00	 cmp	 DWORD PTR _minimum_sector_x$[ebp], 0
  00192	7d 0c		 jge	 SHORT $LN38@draw_2d_te
  00194	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv163[ebp], 0
  0019e	eb 33		 jmp	 SHORT $LN39@draw_2d_te
$LN38@draw_2d_te:
  001a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_x_max@@3HA ; terrain_3d_sector_x_max
  001a5	83 e8 01	 sub	 eax, 1
  001a8	39 45 f0	 cmp	 DWORD PTR _minimum_sector_x$[ebp], eax
  001ab	7e 11		 jle	 SHORT $LN36@draw_2d_te
  001ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_sector_x_max@@3HA ; terrain_3d_sector_x_max
  001b3	83 e9 01	 sub	 ecx, 1
  001b6	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv162[ebp], ecx
  001bc	eb 09		 jmp	 SHORT $LN37@draw_2d_te
$LN36@draw_2d_te:
  001be	8b 55 f0	 mov	 edx, DWORD PTR _minimum_sector_x$[ebp]
  001c1	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv162[ebp], edx
$LN37@draw_2d_te:
  001c7	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv162[ebp]
  001cd	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv163[ebp], eax
$LN39@draw_2d_te:
  001d3	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv163[ebp]
  001d9	89 4d f0	 mov	 DWORD PTR _minimum_sector_x$[ebp], ecx

; 582  : 	minimum_sector_z = bound ( minimum_sector_z, 0, ( terrain_3d_sector_z_max - 1 ) );

  001dc	83 7d ec 00	 cmp	 DWORD PTR _minimum_sector_z$[ebp], 0
  001e0	7d 0c		 jge	 SHORT $LN42@draw_2d_te
  001e2	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv169[ebp], 0
  001ec	eb 33		 jmp	 SHORT $LN43@draw_2d_te
$LN42@draw_2d_te:
  001ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_z_max@@3HA ; terrain_3d_sector_z_max
  001f3	83 e8 01	 sub	 eax, 1
  001f6	39 45 ec	 cmp	 DWORD PTR _minimum_sector_z$[ebp], eax
  001f9	7e 11		 jle	 SHORT $LN40@draw_2d_te
  001fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_sector_z_max@@3HA ; terrain_3d_sector_z_max
  00201	83 e9 01	 sub	 ecx, 1
  00204	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv168[ebp], ecx
  0020a	eb 09		 jmp	 SHORT $LN41@draw_2d_te
$LN40@draw_2d_te:
  0020c	8b 55 ec	 mov	 edx, DWORD PTR _minimum_sector_z$[ebp]
  0020f	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv168[ebp], edx
$LN41@draw_2d_te:
  00215	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv168[ebp]
  0021b	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv169[ebp], eax
$LN43@draw_2d_te:
  00221	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv169[ebp]
  00227	89 4d ec	 mov	 DWORD PTR _minimum_sector_z$[ebp], ecx

; 583  : 	maximum_sector_x = bound ( maximum_sector_x, 0, ( terrain_3d_sector_x_max - 1 ) );

  0022a	83 7d e8 00	 cmp	 DWORD PTR _maximum_sector_x$[ebp], 0
  0022e	7d 0c		 jge	 SHORT $LN46@draw_2d_te
  00230	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv175[ebp], 0
  0023a	eb 33		 jmp	 SHORT $LN47@draw_2d_te
$LN46@draw_2d_te:
  0023c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_x_max@@3HA ; terrain_3d_sector_x_max
  00241	83 e8 01	 sub	 eax, 1
  00244	39 45 e8	 cmp	 DWORD PTR _maximum_sector_x$[ebp], eax
  00247	7e 11		 jle	 SHORT $LN44@draw_2d_te
  00249	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_sector_x_max@@3HA ; terrain_3d_sector_x_max
  0024f	83 e9 01	 sub	 ecx, 1
  00252	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv174[ebp], ecx
  00258	eb 09		 jmp	 SHORT $LN45@draw_2d_te
$LN44@draw_2d_te:
  0025a	8b 55 e8	 mov	 edx, DWORD PTR _maximum_sector_x$[ebp]
  0025d	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv174[ebp], edx
$LN45@draw_2d_te:
  00263	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv174[ebp]
  00269	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv175[ebp], eax
$LN47@draw_2d_te:
  0026f	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv175[ebp]
  00275	89 4d e8	 mov	 DWORD PTR _maximum_sector_x$[ebp], ecx

; 584  : 	maximum_sector_z = bound ( maximum_sector_z, 0, ( terrain_3d_sector_z_max - 1 ) );

  00278	83 7d e4 00	 cmp	 DWORD PTR _maximum_sector_z$[ebp], 0
  0027c	7d 0c		 jge	 SHORT $LN50@draw_2d_te
  0027e	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv181[ebp], 0
  00288	eb 33		 jmp	 SHORT $LN51@draw_2d_te
$LN50@draw_2d_te:
  0028a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_z_max@@3HA ; terrain_3d_sector_z_max
  0028f	83 e8 01	 sub	 eax, 1
  00292	39 45 e4	 cmp	 DWORD PTR _maximum_sector_z$[ebp], eax
  00295	7e 11		 jle	 SHORT $LN48@draw_2d_te
  00297	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_sector_z_max@@3HA ; terrain_3d_sector_z_max
  0029d	83 e9 01	 sub	 ecx, 1
  002a0	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv180[ebp], ecx
  002a6	eb 09		 jmp	 SHORT $LN49@draw_2d_te
$LN48@draw_2d_te:
  002a8	8b 55 e4	 mov	 edx, DWORD PTR _maximum_sector_z$[ebp]
  002ab	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv180[ebp], edx
$LN49@draw_2d_te:
  002b1	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv180[ebp]
  002b7	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv181[ebp], eax
$LN51@draw_2d_te:
  002bd	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv181[ebp]
  002c3	89 4d e4	 mov	 DWORD PTR _maximum_sector_z$[ebp], ecx

; 585  : 
; 586  : 	sector_x_total = abs ( maximum_sector_x - minimum_sector_x ) + 1;

  002c6	8b 45 e8	 mov	 eax, DWORD PTR _maximum_sector_x$[ebp]
  002c9	2b 45 f0	 sub	 eax, DWORD PTR _minimum_sector_x$[ebp]
  002cc	50		 push	 eax
  002cd	e8 00 00 00 00	 call	 _abs
  002d2	83 c4 04	 add	 esp, 4
  002d5	83 c0 01	 add	 eax, 1
  002d8	89 45 d8	 mov	 DWORD PTR _sector_x_total$[ebp], eax

; 587  : 
; 588  : 	sector_z_total = abs ( maximum_sector_z - minimum_sector_z ) + 1;

  002db	8b 45 e4	 mov	 eax, DWORD PTR _maximum_sector_z$[ebp]
  002de	2b 45 ec	 sub	 eax, DWORD PTR _minimum_sector_z$[ebp]
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 _abs
  002e7	83 c4 04	 add	 esp, 4
  002ea	83 c0 01	 add	 eax, 1
  002ed	89 45 d4	 mov	 DWORD PTR _sector_z_total$[ebp], eax

; 589  : 
; 590  : 	if ( maximum_sector_x > minimum_sector_x )

  002f0	8b 45 e8	 mov	 eax, DWORD PTR _maximum_sector_x$[ebp]
  002f3	3b 45 f0	 cmp	 eax, DWORD PTR _minimum_sector_x$[ebp]
  002f6	7e 09		 jle	 SHORT $LN19@draw_2d_te

; 591  : 	{
; 592  : 
; 593  : 		sector_x_increment = 1;

  002f8	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _sector_x_increment$[ebp], 1

; 594  : 	}
; 595  : 	else

  002ff	eb 07		 jmp	 SHORT $LN20@draw_2d_te
$LN19@draw_2d_te:

; 596  : 	{
; 597  : 
; 598  : 		sector_x_increment = -1;

  00301	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _sector_x_increment$[ebp], -1
$LN20@draw_2d_te:

; 599  : 	}
; 600  : 
; 601  : 
; 602  : 	if ( maximum_sector_z > minimum_sector_z )

  00308	8b 45 e4	 mov	 eax, DWORD PTR _maximum_sector_z$[ebp]
  0030b	3b 45 ec	 cmp	 eax, DWORD PTR _minimum_sector_z$[ebp]
  0030e	7e 09		 jle	 SHORT $LN21@draw_2d_te

; 603  : 	{
; 604  : 
; 605  : 		sector_z_increment = 1;

  00310	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _sector_z_increment$[ebp], 1

; 606  : 	}
; 607  : 	else

  00317	eb 07		 jmp	 SHORT $LN22@draw_2d_te
$LN21@draw_2d_te:

; 608  : 	{
; 609  : 
; 610  : 		sector_z_increment = -1;

  00319	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _sector_z_increment$[ebp], -1
$LN22@draw_2d_te:

; 611  : 	}
; 612  : 
; 613  : 
; 614  : 	for ( current_sector_z = minimum_sector_z, sector_z_count = 0;

  00320	8b 45 ec	 mov	 eax, DWORD PTR _minimum_sector_z$[ebp]
  00323	89 45 f4	 mov	 DWORD PTR _current_sector_z$[ebp], eax
  00326	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _sector_z_count$[ebp], 0
  0032d	eb 12		 jmp	 SHORT $LN4@draw_2d_te
$LN2@draw_2d_te:

; 617  : 
; 618  : 				current_sector_z += sector_z_increment, sector_z_count++ )

  0032f	8b 45 f4	 mov	 eax, DWORD PTR _current_sector_z$[ebp]
  00332	03 45 cc	 add	 eax, DWORD PTR _sector_z_increment$[ebp]
  00335	89 45 f4	 mov	 DWORD PTR _current_sector_z$[ebp], eax
  00338	8b 4d dc	 mov	 ecx, DWORD PTR _sector_z_count$[ebp]
  0033b	83 c1 01	 add	 ecx, 1
  0033e	89 4d dc	 mov	 DWORD PTR _sector_z_count$[ebp], ecx
$LN4@draw_2d_te:

; 615  : 
; 616  : 				sector_z_count < sector_z_total;

  00341	8b 45 dc	 mov	 eax, DWORD PTR _sector_z_count$[ebp]
  00344	3b 45 d4	 cmp	 eax, DWORD PTR _sector_z_total$[ebp]
  00347	0f 8d 8d 05 00
	00		 jge	 $LN3@draw_2d_te

; 619  : 	{
; 620  : 
; 621  : 		for ( current_sector_x = minimum_sector_x, sector_x_count = 0;

  0034d	8b 45 f0	 mov	 eax, DWORD PTR _minimum_sector_x$[ebp]
  00350	89 45 f8	 mov	 DWORD PTR _current_sector_x$[ebp], eax
  00353	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _sector_x_count$[ebp], 0
  0035a	eb 12		 jmp	 SHORT $LN7@draw_2d_te
$LN5@draw_2d_te:

; 624  : 
; 625  : 					current_sector_x += sector_x_increment, sector_x_count++ )

  0035c	8b 45 f8	 mov	 eax, DWORD PTR _current_sector_x$[ebp]
  0035f	03 45 d0	 add	 eax, DWORD PTR _sector_x_increment$[ebp]
  00362	89 45 f8	 mov	 DWORD PTR _current_sector_x$[ebp], eax
  00365	8b 4d e0	 mov	 ecx, DWORD PTR _sector_x_count$[ebp]
  00368	83 c1 01	 add	 ecx, 1
  0036b	89 4d e0	 mov	 DWORD PTR _sector_x_count$[ebp], ecx
$LN7@draw_2d_te:

; 622  : 
; 623  : 					sector_x_count < sector_x_total;

  0036e	8b 45 e0	 mov	 eax, DWORD PTR _sector_x_count$[ebp]
  00371	3b 45 d8	 cmp	 eax, DWORD PTR _sector_x_total$[ebp]
  00374	0f 8d 5b 05 00
	00		 jge	 $LN6@draw_2d_te

; 626  : 		{
; 627  : 
; 628  : 			current_sector_x_offset = current_sector_x * TERRAIN_3D_SECTOR_SIDE_LENGTH;

  0037a	8b 45 f8	 mov	 eax, DWORD PTR _current_sector_x$[ebp]
  0037d	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00380	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00384	f3 0f 11 45 b4	 movss	 DWORD PTR _current_sector_x_offset$[ebp], xmm0

; 629  : 
; 630  : 			current_sector_z_offset = current_sector_z * TERRAIN_3D_SECTOR_SIDE_LENGTH;

  00389	8b 45 f4	 mov	 eax, DWORD PTR _current_sector_z$[ebp]
  0038c	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  0038f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00393	f3 0f 11 45 b0	 movss	 DWORD PTR _current_sector_z_offset$[ebp], xmm0

; 631  : 
; 632  : 			//
; 633  : 			// Transform all the points in the sector.
; 634  : 			//
; 635  : 
; 636  : 			current_terrain_sector = &terrain_sectors[current_sector_z][current_sector_x];

  00398	6b 45 f8 30	 imul	 eax, DWORD PTR _current_sector_x$[ebp], 48
  0039c	8b 4d f4	 mov	 ecx, DWORD PTR _current_sector_z$[ebp]
  0039f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  003a5	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  003a8	a3 00 00 00 00	 mov	 DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A, eax ; current_terrain_sector

; 637  : 
; 638  : 			result_3d_points = transformed_3d_3d_points;

  003ad	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _result_3d_points$[ebp], OFFSET ?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A ; transformed_3d_3d_points

; 639  : 
; 640  : 			result_2d_points = transformed_3d_2d_points;

  003b4	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _result_2d_points$[ebp], OFFSET ?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A ; transformed_3d_2d_points

; 641  : 
; 642  : 			result_outcodes = transformed_3d_point_outcodes;

  003bb	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _result_outcodes$[ebp], OFFSET ?transformed_3d_point_outcodes@@3PAEA ; transformed_3d_point_outcodes

; 643  : 
; 644  : 			result_colours = transformed_3d_point_colours;

  003c2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _result_colours$[ebp], OFFSET ?transformed_3d_point_colours@@3PAUTERRAIN_3D_TRANSFORMED_POINT_COLOUR@@A ; transformed_3d_point_colours

; 645  : 
; 646  : 			points_xz = current_terrain_sector->points_xz;

  003c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  003ce	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  003d1	89 4d 8c	 mov	 DWORD PTR _points_xz$[ebp], ecx

; 647  : 
; 648  : 			current_terrain_points_xz = current_terrain_sector->points_xz;

  003d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  003d9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  003dc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_terrain_points_xz@@3PAUTERRAIN_3D_POINT_XZ@@A, ecx ; current_terrain_points_xz

; 649  : 
; 650  : 			current_terrain_points_y = current_terrain_sector->points_y;

  003e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  003e7	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003ea	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_terrain_points_y@@3PAUTERRAIN_3D_POINT_Y@@A, ecx ; current_terrain_points_y

; 651  : 
; 652  : 			colours = current_terrain_sector->point_colours;

  003f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  003f5	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  003f8	89 4d 84	 mov	 DWORD PTR _colours$[ebp], ecx

; 653  : 
; 654  : 			colour_indices = current_terrain_sector->colour_indices;

  003fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  00400	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00403	89 4d 80	 mov	 DWORD PTR _colour_indices$[ebp], ecx

; 655  : 
; 656  : 			for ( count = 0; count < current_terrain_sector->number_of_points; count++ )

  00406	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0040d	eb 09		 jmp	 SHORT $LN10@draw_2d_te
$LN8@draw_2d_te:
  0040f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00412	83 c0 01	 add	 eax, 1
  00415	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN10@draw_2d_te:
  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  0041d	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00420	39 4d fc	 cmp	 DWORD PTR _count$[ebp], ecx
  00423	0f 8d 18 02 00
	00		 jge	 $LN9@draw_2d_te

; 657  : 			{
; 658  : 
; 659  : 				float
; 660  : 					posx,
; 661  : 					posz;
; 662  : 
; 663  : 				int
; 664  : 					colour_index;
; 665  : 
; 666  : 				posx = ( ( current_sector_x_offset + ( TERRAIN_3D_SECTOR_SIDE_LENGTH / 2 ) +

  00429	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _current_sector_x_offset$[ebp]
  0042e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@44800000
  00436	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0043a	8b 45 8c	 mov	 eax, DWORD PTR _points_xz$[ebp]
  0043d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00440	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00444	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00448	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb0000000000000
  00450	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00454	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?terrain_2d_map_world_xcentre@@3MA
  0045c	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00460	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00464	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _posx$5[ebp], xmm0

; 667  : 							( ( float ) points_xz->x ) * TERRAIN_3D_XZ_SCALE ) - terrain_2d_map_world_xcentre );
; 668  : 
; 669  : 				posz = ( ( current_sector_z_offset + ( TERRAIN_3D_SECTOR_SIDE_LENGTH / 2 ) +

  0046c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_sector_z_offset$[ebp]
  00471	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@44800000
  00479	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0047d	8b 45 8c	 mov	 eax, DWORD PTR _points_xz$[ebp]
  00480	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00484	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00488	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0048c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb0000000000000
  00494	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00498	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?terrain_2d_map_world_zcentre@@3MA
  004a0	f2 0f 5c c1	 subsd	 xmm0, xmm1
  004a4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004a8	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _posz$4[ebp], xmm0

; 670  : 							( ( float ) points_xz->z ) * TERRAIN_3D_XZ_SCALE ) - terrain_2d_map_world_zcentre );
; 671  : 
; 672  : 				result_3d_points->x = posx;

  004b0	8b 45 c4	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  004b3	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _posx$5[ebp]
  004bb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 673  : 				result_3d_points->y = posz;

  004bf	8b 45 c4	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  004c2	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _posz$4[ebp]
  004ca	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 674  : 
; 675  : 				result_2d_points->z = 100;

  004cf	8b 45 c0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  004d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  004da	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 676  : 				result_2d_points->q = 0.01;

  004df	8b 45 c0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  004e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  004ea	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 677  : 
; 678  : 				result_2d_points->i = ( ( posx * terrain_2d_map_screen_xscale ) + terrain_2d_map_screen_xcentre );

  004ef	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _posx$5[ebp]
  004f7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xscale@@3MA
  004ff	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_xcentre@@3MA
  00507	8b 45 c0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  0050a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 679  : 				result_2d_points->j = ( ( posz * terrain_2d_map_screen_yscale ) + terrain_2d_map_screen_ycentre );

  0050e	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _posz$4[ebp]
  00516	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_2d_map_screen_yscale@@3MA
  0051e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_2d_map_screen_ycentre@@3MA
  00526	8b 45 c0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00529	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 680  : 
; 681  : 				colour_index = colour_indices->index;

  0052e	8b 45 80	 mov	 eax, DWORD PTR _colour_indices$[ebp]
  00531	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00534	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _colour_index$3[ebp], ecx

; 682  : 
; 683  : 				result_colours->red = colours[colour_index].red;

  0053a	6b 85 74 ff ff
	ff 03		 imul	 eax, DWORD PTR _colour_index$3[ebp], 3
  00541	8b 4d bc	 mov	 ecx, DWORD PTR _result_colours$[ebp]
  00544	8b 55 84	 mov	 edx, DWORD PTR _colours$[ebp]
  00547	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  0054a	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 684  : 				result_colours->green = colours[colour_index].green;

  0054d	6b 85 74 ff ff
	ff 03		 imul	 eax, DWORD PTR _colour_index$3[ebp], 3
  00554	8b 4d bc	 mov	 ecx, DWORD PTR _result_colours$[ebp]
  00557	8b 55 84	 mov	 edx, DWORD PTR _colours$[ebp]
  0055a	8a 44 02 01	 mov	 al, BYTE PTR [edx+eax+1]
  0055e	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 685  : 				result_colours->blue = colours[colour_index].blue;

  00561	6b 85 74 ff ff
	ff 03		 imul	 eax, DWORD PTR _colour_index$3[ebp], 3
  00568	8b 4d bc	 mov	 ecx, DWORD PTR _result_colours$[ebp]
  0056b	8b 55 84	 mov	 edx, DWORD PTR _colours$[ebp]
  0056e	8a 44 02 02	 mov	 al, BYTE PTR [edx+eax+2]
  00572	88 01		 mov	 BYTE PTR [ecx], al

; 686  : 				result_colours->normal_index = 0;

  00574	8b 45 bc	 mov	 eax, DWORD PTR _result_colours$[ebp]
  00577	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0

; 687  : 
; 688  : 				result_colours->fog = 255;

  0057b	8b 45 bc	 mov	 eax, DWORD PTR _result_colours$[ebp]
  0057e	c6 40 04 ff	 mov	 BYTE PTR [eax+4], 255	; 000000ffH

; 689  : 
; 690  : 				oxmax = active_viewport.x_max - result_2d_points->i;

  00582	8b 45 c0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00585	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0058d	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00591	f3 0f 11 45 ac	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 691  : 				oxmin = result_2d_points->i - active_viewport.x_min;

  00596	8b 45 c0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00599	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0059d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  005a5	f3 0f 11 45 a8	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 692  : 				oymax = active_viewport.y_max - result_2d_points->j;

  005aa	8b 45 c0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  005ad	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  005b5	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  005ba	f3 0f 11 45 a4	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 693  : 				oymin = result_2d_points->j - active_viewport.y_min;

  005bf	8b 45 c0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  005c2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  005c7	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  005cf	f3 0f 11 45 a0	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 694  : 
; 695  : 				ixmax = *( ( int * ) &oxmax );

  005d4	8b 45 ac	 mov	 eax, DWORD PTR _oxmax$[ebp]
  005d7	89 45 9c	 mov	 DWORD PTR _ixmax$[ebp], eax

; 696  : 				ixmin = *( ( int * ) &oxmin );

  005da	8b 45 a8	 mov	 eax, DWORD PTR _oxmin$[ebp]
  005dd	89 45 98	 mov	 DWORD PTR _ixmin$[ebp], eax

; 697  : 				iymax = *( ( int * ) &oymax );

  005e0	8b 45 a4	 mov	 eax, DWORD PTR _oymax$[ebp]
  005e3	89 45 94	 mov	 DWORD PTR _iymax$[ebp], eax

; 698  : 				iymin = *( ( int * ) &oymin );

  005e6	8b 45 a0	 mov	 eax, DWORD PTR _oymin$[ebp]
  005e9	89 45 90	 mov	 DWORD PTR _iymin$[ebp], eax

; 699  : 
; 700  : 				*result_outcodes = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  005ec	8b 45 94	 mov	 eax, DWORD PTR _iymax$[ebp]
  005ef	50		 push	 eax
  005f0	8b 4d 9c	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  005f3	51		 push	 ecx
  005f4	8b 55 90	 mov	 edx, DWORD PTR _iymin$[ebp]
  005f7	52		 push	 edx
  005f8	8b 45 98	 mov	 eax, DWORD PTR _ixmin$[ebp]
  005fb	50		 push	 eax
  005fc	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00601	8b 4d b8	 mov	 ecx, DWORD PTR _result_outcodes$[ebp]
  00604	88 01		 mov	 BYTE PTR [ecx], al

; 701  : 
; 702  : 				result_3d_points++;

  00606	8b 45 c4	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  00609	83 c0 08	 add	 eax, 8
  0060c	89 45 c4	 mov	 DWORD PTR _result_3d_points$[ebp], eax

; 703  : 				result_2d_points++;

  0060f	8b 45 c0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00612	83 c0 10	 add	 eax, 16			; 00000010H
  00615	89 45 c0	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 704  : 				result_colours++;

  00618	8b 45 bc	 mov	 eax, DWORD PTR _result_colours$[ebp]
  0061b	83 c0 08	 add	 eax, 8
  0061e	89 45 bc	 mov	 DWORD PTR _result_colours$[ebp], eax

; 705  : 				result_outcodes++;

  00621	8b 45 b8	 mov	 eax, DWORD PTR _result_outcodes$[ebp]
  00624	83 c0 01	 add	 eax, 1
  00627	89 45 b8	 mov	 DWORD PTR _result_outcodes$[ebp], eax

; 706  : 
; 707  : 				points_xz++;

  0062a	8b 45 8c	 mov	 eax, DWORD PTR _points_xz$[ebp]
  0062d	83 c0 04	 add	 eax, 4
  00630	89 45 8c	 mov	 DWORD PTR _points_xz$[ebp], eax

; 708  : 
; 709  : 				colour_indices++;

  00633	8b 45 80	 mov	 eax, DWORD PTR _colour_indices$[ebp]
  00636	83 c0 01	 add	 eax, 1
  00639	89 45 80	 mov	 DWORD PTR _colour_indices$[ebp], eax

; 710  : 			}

  0063c	e9 ce fd ff ff	 jmp	 $LN8@draw_2d_te
$LN9@draw_2d_te:

; 711  : 
; 712  : 			//
; 713  : 			// Go through all the polygons in the sector, drawing them.
; 714  : 			//
; 715  : 
; 716  : 			points_xz = ( terrain_3d_point_xz * ) current_terrain_sector->points_y + current_terrain_sector->number_of_points;

  00641	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  00646	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00649	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  0064f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00652	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00655	89 4d 8c	 mov	 DWORD PTR _points_xz$[ebp], ecx

; 717  : 
; 718  : 			polygon = current_terrain_sector->polygons;

  00658	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  0065d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00660	89 4d c8	 mov	 DWORD PTR _polygon$[ebp], ecx

; 719  : 
; 720  : 			surface = current_terrain_sector->surface_changes;

  00663	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  00668	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0066b	89 4d 88	 mov	 DWORD PTR _surface$[ebp], ecx

; 721  : 
; 722  : 			current_terrain_type = surface->surface_id;

  0066e	8b 45 88	 mov	 eax, DWORD PTR _surface$[ebp]
  00671	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00674	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_terrain_type@@3HA, ecx ; current_terrain_type

; 723  : 
; 724  : 			current_terrain_type_class = &terrain_type_information[current_terrain_type];

  0067a	6b 05 00 00 00
	00 38		 imul	 eax, DWORD PTR ?current_terrain_type@@3HA, 56 ; current_terrain_type
  00681	05 00 00 00 00	 add	 eax, OFFSET ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A ; terrain_type_information
  00686	a3 00 00 00 00	 mov	 DWORD PTR ?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A, eax ; current_terrain_type_class

; 725  : 
; 726  : 			set_d3d_texture ( 0, current_terrain_type_class->texture );

  0068b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A ; current_terrain_type_class
  00690	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00693	51		 push	 ecx
  00694	6a 00		 push	 0
  00696	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture

; 727  : 
; 728  : 			reset_terrain_3d_buffered_polygons ();

  0069b	e8 00 00 00 00	 call	 ?reset_terrain_3d_buffered_polygons@@YGXXZ ; reset_terrain_3d_buffered_polygons

; 729  : 
; 730  : 			if ( current_terrain_sector->number_of_points < 257 )

  006a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  006a5	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  006a8	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  006ae	0f 8d 0e 01 00
	00		 jge	 $LN23@draw_2d_te

; 731  : 			{
; 732  : 
; 733  : 				terrain_3d_sector_point_byte_references = current_terrain_sector->point_byte_references;

  006b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  006b9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  006bc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A, ecx ; terrain_3d_sector_point_byte_references

; 734  : 
; 735  : 				for ( count = current_terrain_sector->number_of_polygons; count > 0; count-- )

  006c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  006c7	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  006cb	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  006ce	eb 09		 jmp	 SHORT $LN13@draw_2d_te
$LN11@draw_2d_te:
  006d0	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  006d3	83 e8 01	 sub	 eax, 1
  006d6	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN13@draw_2d_te:
  006d9	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  006dd	0f 8e da 00 00
	00		 jle	 $LN12@draw_2d_te

; 736  : 				{
; 737  : 
; 738  : 					int
; 739  : 						number_of_points;
; 740  : 
; 741  : 					if ( polygon->surface_change )

  006e3	8b 45 c8	 mov	 eax, DWORD PTR _polygon$[ebp]
  006e6	8a 08		 mov	 cl, BYTE PTR [eax]
  006e8	c0 e9 07	 shr	 cl, 7
  006eb	80 e1 01	 and	 cl, 1
  006ee	0f b6 d1	 movzx	 edx, cl
  006f1	85 d2		 test	 edx, edx
  006f3	74 4f		 je	 SHORT $LN26@draw_2d_te

; 742  : 					{
; 743  : 
; 744  : 						surface += polygon->surface_change;

  006f5	8b 45 c8	 mov	 eax, DWORD PTR _polygon$[ebp]
  006f8	8a 08		 mov	 cl, BYTE PTR [eax]
  006fa	c0 e9 07	 shr	 cl, 7
  006fd	80 e1 01	 and	 cl, 1
  00700	0f b6 d1	 movzx	 edx, cl
  00703	03 55 88	 add	 edx, DWORD PTR _surface$[ebp]
  00706	89 55 88	 mov	 DWORD PTR _surface$[ebp], edx

; 745  : 
; 746  : 						draw_terrain_3d_buffered_polygons ();

  00709	e8 00 00 00 00	 call	 ?draw_terrain_3d_buffered_polygons@@YGXXZ ; draw_terrain_3d_buffered_polygons

; 747  : 
; 748  : 						current_terrain_type = surface->surface_id;

  0070e	8b 45 88	 mov	 eax, DWORD PTR _surface$[ebp]
  00711	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00714	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_terrain_type@@3HA, ecx ; current_terrain_type

; 749  : 
; 750  : 						current_terrain_type_class = &terrain_type_information[current_terrain_type];

  0071a	6b 05 00 00 00
	00 38		 imul	 eax, DWORD PTR ?current_terrain_type@@3HA, 56 ; current_terrain_type
  00721	05 00 00 00 00	 add	 eax, OFFSET ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A ; terrain_type_information
  00726	a3 00 00 00 00	 mov	 DWORD PTR ?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A, eax ; current_terrain_type_class

; 751  : 
; 752  : 						if ( terrain_2d_map_textured )

  0072b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_2d_map_textured@@3HA, 0
  00732	74 10		 je	 SHORT $LN26@draw_2d_te

; 753  : 						{
; 754  : 
; 755  : 							set_d3d_texture ( 0, current_terrain_type_class->texture );

  00734	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A ; current_terrain_type_class
  00739	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0073c	51		 push	 ecx
  0073d	6a 00		 push	 0
  0073f	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture
$LN26@draw_2d_te:

; 756  : 						}
; 757  : 					}
; 758  : 
; 759  : 					number_of_points = polygon->number_of_points;

  00744	8b 45 c8	 mov	 eax, DWORD PTR _polygon$[ebp]
  00747	8a 08		 mov	 cl, BYTE PTR [eax]
  00749	80 e1 7f	 and	 cl, 127			; 0000007fH
  0074c	0f b6 d1	 movzx	 edx, cl
  0074f	89 95 70 ff ff
	ff		 mov	 DWORD PTR _number_of_points$2[ebp], edx

; 760  : 
; 761  : 					{
; 762  : 
; 763  : 						if ( outcode_3d_terrain_byte_polygon ( number_of_points, terrain_3d_sector_point_byte_references, &terrain_3d_face_outcode ) )

  00755	68 00 00 00 00	 push	 OFFSET ?terrain_3d_face_outcode@@3HA ; terrain_3d_face_outcode
  0075a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A ; terrain_3d_sector_point_byte_references
  0075f	50		 push	 eax
  00760	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _number_of_points$2[ebp]
  00766	51		 push	 ecx
  00767	e8 00 00 00 00	 call	 ?outcode_3d_terrain_byte_polygon@@YGHHPAUTERRAIN_3D_POINT_BYTE_REFERENCE@@PAH@Z ; outcode_3d_terrain_byte_polygon
  0076c	85 c0		 test	 eax, eax
  0076e	74 2f		 je	 SHORT $LN29@draw_2d_te

; 764  : 						{
; 765  : 
; 766  : 							if ( terrain_3d_face_outcode )

  00770	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_face_outcode@@3HA, 0 ; terrain_3d_face_outcode
  00777	74 14		 je	 SHORT $LN28@draw_2d_te

; 767  : 							{
; 768  : 
; 769  : 								current_terrain_type_class->render_byte_clipped ( number_of_points );

  00779	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _number_of_points$2[ebp]
  0077f	50		 push	 eax
  00780	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A ; current_terrain_type_class
  00786	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00789	ff d2		 call	 edx

; 770  : 							}
; 771  : 							else

  0078b	eb 12		 jmp	 SHORT $LN29@draw_2d_te
$LN28@draw_2d_te:

; 772  : 							{
; 773  : 
; 774  : 								current_terrain_type_class->render_byte_unclipped ( number_of_points );

  0078d	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _number_of_points$2[ebp]
  00793	50		 push	 eax
  00794	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A ; current_terrain_type_class
  0079a	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0079d	ff d2		 call	 edx
$LN29@draw_2d_te:

; 775  : 							}
; 776  : 						}
; 777  : 
; 778  : 						terrain_3d_sector_point_byte_references += number_of_points;

  0079f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A ; terrain_3d_sector_point_byte_references
  007a4	03 85 70 ff ff
	ff		 add	 eax, DWORD PTR _number_of_points$2[ebp]
  007aa	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A, eax ; terrain_3d_sector_point_byte_references

; 779  : 
; 780  : 						polygon++;

  007af	8b 45 c8	 mov	 eax, DWORD PTR _polygon$[ebp]
  007b2	83 c0 01	 add	 eax, 1
  007b5	89 45 c8	 mov	 DWORD PTR _polygon$[ebp], eax

; 781  : 					}
; 782  : 				}

  007b8	e9 13 ff ff ff	 jmp	 $LN11@draw_2d_te
$LN12@draw_2d_te:

; 783  : 			}
; 784  : 			else

  007bd	e9 0e 01 00 00	 jmp	 $LN15@draw_2d_te
$LN23@draw_2d_te:

; 785  : 			{
; 786  : 
; 787  : 				terrain_3d_sector_point_word_references = current_terrain_sector->point_word_references;

  007c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  007c7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  007ca	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A, ecx ; terrain_3d_sector_point_word_references

; 788  : 
; 789  : 				for ( count = current_terrain_sector->number_of_polygons; count > 0; count-- )

  007d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_sector@@3PAUTERRAIN_3D_SECTOR@@A ; current_terrain_sector
  007d5	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  007d9	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  007dc	eb 09		 jmp	 SHORT $LN16@draw_2d_te
$LN14@draw_2d_te:
  007de	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  007e1	83 e8 01	 sub	 eax, 1
  007e4	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN16@draw_2d_te:
  007e7	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  007eb	0f 8e df 00 00
	00		 jle	 $LN15@draw_2d_te

; 790  : 				{
; 791  : 
; 792  : 					int
; 793  : 						number_of_points;
; 794  : 
; 795  : 					if ( polygon->surface_change )

  007f1	8b 45 c8	 mov	 eax, DWORD PTR _polygon$[ebp]
  007f4	8a 08		 mov	 cl, BYTE PTR [eax]
  007f6	c0 e9 07	 shr	 cl, 7
  007f9	80 e1 01	 and	 cl, 1
  007fc	0f b6 d1	 movzx	 edx, cl
  007ff	85 d2		 test	 edx, edx
  00801	74 4f		 je	 SHORT $LN31@draw_2d_te

; 796  : 					{
; 797  : 
; 798  : 						surface += polygon->surface_change;

  00803	8b 45 c8	 mov	 eax, DWORD PTR _polygon$[ebp]
  00806	8a 08		 mov	 cl, BYTE PTR [eax]
  00808	c0 e9 07	 shr	 cl, 7
  0080b	80 e1 01	 and	 cl, 1
  0080e	0f b6 d1	 movzx	 edx, cl
  00811	03 55 88	 add	 edx, DWORD PTR _surface$[ebp]
  00814	89 55 88	 mov	 DWORD PTR _surface$[ebp], edx

; 799  : 
; 800  : 						draw_terrain_3d_buffered_polygons ();

  00817	e8 00 00 00 00	 call	 ?draw_terrain_3d_buffered_polygons@@YGXXZ ; draw_terrain_3d_buffered_polygons

; 801  : 
; 802  : 						current_terrain_type = surface->surface_id;

  0081c	8b 45 88	 mov	 eax, DWORD PTR _surface$[ebp]
  0081f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00822	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_terrain_type@@3HA, ecx ; current_terrain_type

; 803  : 
; 804  : 						current_terrain_type_class = &terrain_type_information[current_terrain_type];

  00828	6b 05 00 00 00
	00 38		 imul	 eax, DWORD PTR ?current_terrain_type@@3HA, 56 ; current_terrain_type
  0082f	05 00 00 00 00	 add	 eax, OFFSET ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A ; terrain_type_information
  00834	a3 00 00 00 00	 mov	 DWORD PTR ?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A, eax ; current_terrain_type_class

; 805  : 
; 806  : 						if ( terrain_2d_map_textured )

  00839	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_2d_map_textured@@3HA, 0
  00840	74 10		 je	 SHORT $LN31@draw_2d_te

; 807  : 						{
; 808  : 
; 809  : 							set_d3d_texture ( 0, current_terrain_type_class->texture );

  00842	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A ; current_terrain_type_class
  00847	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0084a	51		 push	 ecx
  0084b	6a 00		 push	 0
  0084d	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture
$LN31@draw_2d_te:

; 810  : 						}
; 811  : 					}
; 812  : 
; 813  : 					number_of_points = polygon->number_of_points;

  00852	8b 45 c8	 mov	 eax, DWORD PTR _polygon$[ebp]
  00855	8a 08		 mov	 cl, BYTE PTR [eax]
  00857	80 e1 7f	 and	 cl, 127			; 0000007fH
  0085a	0f b6 d1	 movzx	 edx, cl
  0085d	89 95 6c ff ff
	ff		 mov	 DWORD PTR _number_of_points$1[ebp], edx

; 814  : 
; 815  : 					{
; 816  : 
; 817  : 						if ( outcode_3d_terrain_word_polygon ( number_of_points, terrain_3d_sector_point_word_references, &terrain_3d_face_outcode ) )

  00863	68 00 00 00 00	 push	 OFFSET ?terrain_3d_face_outcode@@3HA ; terrain_3d_face_outcode
  00868	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A ; terrain_3d_sector_point_word_references
  0086d	50		 push	 eax
  0086e	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _number_of_points$1[ebp]
  00874	51		 push	 ecx
  00875	e8 00 00 00 00	 call	 ?outcode_3d_terrain_word_polygon@@YGHHPAUTERRAIN_3D_POINT_WORD_REFERENCE@@PAH@Z ; outcode_3d_terrain_word_polygon
  0087a	85 c0		 test	 eax, eax
  0087c	74 2f		 je	 SHORT $LN34@draw_2d_te

; 818  : 						{
; 819  : 
; 820  : 							if ( terrain_3d_face_outcode )

  0087e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_face_outcode@@3HA, 0 ; terrain_3d_face_outcode
  00885	74 14		 je	 SHORT $LN33@draw_2d_te

; 821  : 							{
; 822  : 
; 823  : 								current_terrain_type_class->render_word_clipped ( number_of_points );

  00887	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _number_of_points$1[ebp]
  0088d	50		 push	 eax
  0088e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A ; current_terrain_type_class
  00894	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00897	ff d2		 call	 edx

; 824  : 							}
; 825  : 							else

  00899	eb 12		 jmp	 SHORT $LN34@draw_2d_te
$LN33@draw_2d_te:

; 826  : 							{
; 827  : 
; 828  : 								current_terrain_type_class->render_word_unclipped ( number_of_points );

  0089b	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _number_of_points$1[ebp]
  008a1	50		 push	 eax
  008a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_terrain_type_class@@3PAUTERRAIN_TYPE_INFO@@A ; current_terrain_type_class
  008a8	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  008ab	ff d2		 call	 edx
$LN34@draw_2d_te:

; 829  : 							}
; 830  : 						}
; 831  : 
; 832  : 						terrain_3d_sector_point_word_references += number_of_points;

  008ad	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _number_of_points$1[ebp]
  008b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A ; terrain_3d_sector_point_word_references
  008b9	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  008bc	89 15 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A, edx ; terrain_3d_sector_point_word_references

; 833  : 
; 834  : 						polygon++;

  008c2	8b 45 c8	 mov	 eax, DWORD PTR _polygon$[ebp]
  008c5	83 c0 01	 add	 eax, 1
  008c8	89 45 c8	 mov	 DWORD PTR _polygon$[ebp], eax

; 835  : 					}
; 836  : 				}

  008cb	e9 0e ff ff ff	 jmp	 $LN14@draw_2d_te
$LN15@draw_2d_te:

; 837  : 			}
; 838  : 		}

  008d0	e9 87 fa ff ff	 jmp	 $LN5@draw_2d_te
$LN6@draw_2d_te:

; 839  : 	}

  008d5	e9 55 fa ff ff	 jmp	 $LN2@draw_2d_te
$LN3@draw_2d_te:

; 840  : 
; 841  : 	//
; 842  : 	// Restore the fog
; 843  : 	//
; 844  : 
; 845  : 	reinstate_d3d_fog ();

  008da	e8 00 00 00 00	 call	 ?reinstate_d3d_fog@@YGXXZ ; reinstate_d3d_fog

; 846  : 
; 847  : 	//
; 848  : 	// Turn Z buffering back on again
; 849  : 	//
; 850  : 
; 851  : 	set_d3d_int_state ( D3DRENDERSTATE_ZENABLE, TRUE );

  008df	6a 01		 push	 1
  008e1	6a 07		 push	 7
  008e3	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 852  : }

  008e8	5f		 pop	 edi
  008e9	5e		 pop	 esi
  008ea	5b		 pop	 ebx
  008eb	8b e5		 mov	 esp, ebp
  008ed	5d		 pop	 ebp
  008ee	c3		 ret	 0
?draw_2d_terrain_map@@YGXXZ ENDP			; draw_2d_terrain_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrmap.c
;	COMDAT ?set_2d_terrain_map_textured@@YGXH@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?set_2d_terrain_map_textured@@YGXH@Z PROC		; set_2d_terrain_map_textured, COMDAT

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 389  : 
; 390  : 	terrain_2d_map_textured = flag;

  00009	8b 45 08	 mov	 eax, DWORD PTR _flag$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_2d_map_textured@@3HA, eax

; 391  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_2d_terrain_map_textured@@YGXH@Z ENDP		; set_2d_terrain_map_textured
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
