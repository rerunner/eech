; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?overload_crater_list_functions@@YGXXZ		; overload_crater_list_functions
PUBLIC	?__LINE__Var@?0??set_local_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA ; `set_local_parent'::`1'::__LINE__Var
PUBLIC	??_C@_0FG@LCAHGHPO@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0N@ILAPCPFO@en?5?$CB?$DN?5parent@		; `string'
PUBLIC	?__LINE__Var@?0??get_local_parent@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA ; `get_local_parent'::`1'::__LINE__Var
PUBLIC	??_C@_0FG@KMCINALH@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	?__LINE__Var@?0??set_local_child_succ@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA ; `set_local_child_succ'::`1'::__LINE__Var
PUBLIC	??_C@_0FG@KLLEOGEM@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BB@DACDFMLL@en?5?$CB?$DN?5child_succ@	; `string'
PUBLIC	?__LINE__Var@?0??get_local_child_succ@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA ; `get_local_child_succ'::`1'::__LINE__Var
PUBLIC	??_C@_0FG@LFJLFBAF@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	?__LINE__Var@?0??set_local_child_pred@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA ; `set_local_child_pred'::`1'::__LINE__Var
PUBLIC	??_C@_0FG@JFMOABHA@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BB@KBJIPEKH@en?5?$CB?$DN?5child_pred@	; `string'
PUBLIC	?__LINE__Var@?0??get_local_child_pred@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA ; `get_local_child_pred'::`1'::__LINE__Var
PUBLIC	??_C@_0FG@ILOBLGDJ@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?entity_type_database@@3PAUENTITY_TYPE_DATA@@A:BYTE ; entity_type_database
EXTRN	?list_type_database@@3PAULIST_TYPE_DATA@@A:BYTE	; list_type_database
EXTRN	?debug_fatal_invalid_list_type_message@@3PBDB:DWORD ; debug_fatal_invalid_list_type_message
EXTRN	?fn_set_local_entity_parent@@3PAY0CN@P6GXPAUENTITY@@W4LIST_TYPES@@0@ZA:BYTE ; fn_set_local_entity_parent
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_set_local_entity_child_succ@@3PAY0CN@P6GXPAUENTITY@@W4LIST_TYPES@@0@ZA:BYTE ; fn_set_local_entity_child_succ
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_set_local_entity_child_pred@@3PAY0CN@P6GXPAUENTITY@@W4LIST_TYPES@@0@ZA:BYTE ; fn_set_local_entity_child_pred
EXTRN	?fn_get_local_entity_child_pred@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_pred
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
;	COMDAT ??_C@_0FG@ILOBLGDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FG@ILOBLGDJ@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\system\en_funcs\en_li'
	DB	'st\get_pred.h', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_local_child_pred@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_local_child_pred@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA DD 0f5H ; `get_local_child_pred'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BB@KBJIPEKH@en?5?$CB?$DN?5child_pred@
CONST	SEGMENT
??_C@_0BB@KBJIPEKH@en?5?$CB?$DN?5child_pred@ DB 'en != child_pred', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@JFMOABHA@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FG@JFMOABHA@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\system\en_funcs\en_li'
	DB	'st\set_pred.h', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_local_child_pred@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_local_child_pred@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA DD 0e3H ; `set_local_child_pred'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FG@LFJLFBAF@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FG@LFJLFBAF@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\system\en_funcs\en_li'
	DB	'st\get_succ.h', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_local_child_succ@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_local_child_succ@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA DD 0ccH ; `get_local_child_succ'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BB@DACDFMLL@en?5?$CB?$DN?5child_succ@
CONST	SEGMENT
??_C@_0BB@DACDFMLL@en?5?$CB?$DN?5child_succ@ DB 'en != child_succ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@KLLEOGEM@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FG@KLLEOGEM@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\system\en_funcs\en_li'
	DB	'st\set_succ.h', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_local_child_succ@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_local_child_succ@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA DD 0baH ; `set_local_child_succ'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FG@KMCINALH@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FG@KMCINALH@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\system\en_funcs\en_li'
	DB	'st\get_prnt.h', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_local_parent@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_local_parent@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA DD 0a3H ; `get_local_parent'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@ILAPCPFO@en?5?$CB?$DN?5parent@
CONST	SEGMENT
??_C@_0N@ILAPCPFO@en?5?$CB?$DN?5parent@ DB 'en != parent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@LCAHGHPO@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FG@LCAHGHPO@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\system\en_funcs\en_li'
	DB	'st\set_prnt.h', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_local_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_local_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA DD 091H ; `set_local_parent'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\get_pred.h
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
;	COMDAT ?get_local_child_pred@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z
_TEXT	SEGMENT
tv84 = -76						; size = 4
tv65 = -76						; size = 4
_child_pred$ = -8					; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
?get_local_child_pred@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z PROC ; get_local_child_pred, COMDAT

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 246  : 	crater
; 247  : 		*raw;
; 248  : 
; 249  : 	entity
; 250  : 		*child_pred;
; 251  : 
; 252  : 	raw = (crater *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\get_pred.h

; 67   : switch (type)

  00012	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00015	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00018	83 7d b4 29	 cmp	 DWORD PTR tv65[ebp], 41	; 00000029H
  0001c	74 02		 je	 SHORT $LN4@get_local_
  0001e	eb 0b		 jmp	 SHORT $LN5@get_local_
$LN4@get_local_:

; 68   : {
; 69   : 	////////////////////////////////////////
; 70   : 
; 71   : 	#ifdef LIST_TYPE_AIRCREW_LINK
; 72   : 
; 73   : 	case LIST_TYPE_AIRCREW:
; 74   : 	{
; 75   : 		child_pred = raw->aircrew_link.child_pred;
; 76   : 
; 77   : 		break;
; 78   : 	}
; 79   : 
; 80   : 	#endif
; 81   : 
; 82   : 	////////////////////////////////////////
; 83   : 
; 84   : 	#ifdef LIST_TYPE_ASSIGNED_TASK_LINK
; 85   : 
; 86   : 	case LIST_TYPE_ASSIGNED_TASK:
; 87   : 	{
; 88   : 		child_pred = raw->task_link.child_pred;
; 89   : 
; 90   : 		break;
; 91   : 	}
; 92   : 
; 93   : 	#endif
; 94   : 
; 95   : 	////////////////////////////////////////
; 96   : 
; 97   : 	#ifdef LIST_TYPE_CAMPAIGN_OBJECTIVE_LINK
; 98   : 
; 99   : 	case LIST_TYPE_CAMPAIGN_OBJECTIVE:
; 100  : 	{
; 101  : 		child_pred = raw->campaign_objective_link.child_pred;
; 102  : 
; 103  : 		break;
; 104  : 	}
; 105  : 
; 106  : 	#endif
; 107  : 
; 108  : 	////////////////////////////////////////
; 109  : 
; 110  : 	#ifdef LIST_TYPE_CARGO_LINK
; 111  : 
; 112  : 	case LIST_TYPE_CARGO:
; 113  : 	{
; 114  : 		child_pred = raw->cargo_link.child_pred;
; 115  : 
; 116  : 		break;
; 117  : 	}
; 118  : 
; 119  : 	#endif
; 120  : 
; 121  : 	////////////////////////////////////////
; 122  : 
; 123  : 	#ifdef LIST_TYPE_CITY_BUILDING_LINK
; 124  : 
; 125  : 	case LIST_TYPE_CITY_BUILDING:
; 126  : 	{
; 127  : 		child_pred = raw->city_building_link.child_pred;
; 128  : 
; 129  : 		break;
; 130  : 	}
; 131  : 
; 132  : 	#endif
; 133  : 
; 134  : 	////////////////////////////////////////
; 135  : 
; 136  : 	#ifdef LIST_TYPE_COMPLETED_TASK_LINK
; 137  : 
; 138  : 	case LIST_TYPE_COMPLETED_TASK:
; 139  : 	{
; 140  : 		child_pred = raw->task_link.child_pred;
; 141  : 
; 142  : 		break;
; 143  : 	}
; 144  : 
; 145  : 	#endif
; 146  : 
; 147  : 	////////////////////////////////////////
; 148  : 
; 149  : 	#ifdef LIST_TYPE_CURRENT_WAYPOINT_LINK
; 150  : 
; 151  : 	case LIST_TYPE_CURRENT_WAYPOINT:
; 152  : 	{
; 153  : 		child_pred = raw->current_waypoint_link.child_pred;
; 154  : 
; 155  : 		break;
; 156  : 	}
; 157  : 
; 158  : 	#endif
; 159  : 
; 160  : 	////////////////////////////////////////
; 161  : 
; 162  : 	// Jabbewock 031107 Designated targets
; 163  : 	
; 164  : 	#ifdef LIST_TYPE_DESIGNATED_TARGET_LINK
; 165  : 
; 166  : 	case LIST_TYPE_DESIGNATED_TARGET:
; 167  : 	{
; 168  : 		child_pred = raw->designated_target_link.child_pred;
; 169  : 
; 170  : 		break;
; 171  : 	}
; 172  : 
; 173  : 	#endif
; 174  : 
; 175  : 	// Jabbewock 031107 ends
; 176  : 
; 177  : 	#ifdef LIST_TYPE_DIVISION_LINK
; 178  : 
; 179  : 	case LIST_TYPE_DIVISION:
; 180  : 	{
; 181  : 		child_pred = raw->division_link.child_pred;
; 182  : 
; 183  : 		break;
; 184  : 	}
; 185  : 
; 186  : 	#endif
; 187  : 	
; 188  : 	////////////////////////////////////////
; 189  : 
; 190  : 	#ifdef LIST_TYPE_DIVISION_HEADQUARTERS_LINK
; 191  : 
; 192  : 	case LIST_TYPE_DIVISION_HEADQUARTERS:
; 193  : 	{
; 194  : 		child_pred = raw->division_headquarters_link.child_pred;
; 195  : 
; 196  : 		break;
; 197  : 	}
; 198  : 
; 199  : 	#endif
; 200  : 
; 201  : 	////////////////////////////////////////
; 202  : 
; 203  : 	#ifdef LIST_TYPE_FOLLOWER_LINK
; 204  : 
; 205  : 	case LIST_TYPE_FOLLOWER:
; 206  : 	{
; 207  : 		child_pred = raw->follower_link.child_pred;
; 208  : 
; 209  : 		break;
; 210  : 	}
; 211  : 
; 212  : 	#endif
; 213  : 
; 214  : 	////////////////////////////////////////
; 215  : 
; 216  : 	#ifdef LIST_TYPE_FORCE_LINK
; 217  : 
; 218  : 	case LIST_TYPE_FORCE:
; 219  : 	{
; 220  : 		child_pred = raw->force_link.child_pred;
; 221  : 
; 222  : 		break;
; 223  : 	}
; 224  : 
; 225  : 	#endif
; 226  : 
; 227  : 	////////////////////////////////////////
; 228  : 
; 229  : 	#ifdef LIST_TYPE_GROUP_LINK
; 230  : 
; 231  : 	case LIST_TYPE_BUILDING_GROUP:
; 232  : 	case LIST_TYPE_INDEPENDENT_GROUP:
; 233  : 	case LIST_TYPE_KEYSITE_GROUP:
; 234  : 	{
; 235  : 		child_pred = raw->group_link.child_pred;
; 236  : 
; 237  : 		break;
; 238  : 	}
; 239  : 
; 240  : 	#endif
; 241  : 
; 242  : 	////////////////////////////////////////
; 243  : 
; 244  : 	#ifdef LIST_TYPE_GUIDE_LINK
; 245  : 
; 246  : 	case LIST_TYPE_GUIDE:
; 247  : 	{
; 248  : 		child_pred = raw->guide_link.child_pred;
; 249  : 
; 250  : 		break;
; 251  : 	}
; 252  : 
; 253  : 	#endif
; 254  : 
; 255  : 	////////////////////////////////////////
; 256  : 
; 257  : 	#ifdef LIST_TYPE_GUIDE_STACK_LINK
; 258  : 
; 259  : 	case LIST_TYPE_GUIDE_STACK:
; 260  : 	{
; 261  : 		child_pred = raw->guide_stack_link.child_pred;
; 262  : 
; 263  : 		break;
; 264  : 	}
; 265  : 
; 266  : 	#endif
; 267  : 
; 268  : 	////////////////////////////////////////
; 269  : 
; 270  : 	#ifdef LIST_TYPE_GUNSHIP_TARGET_LINK
; 271  : 
; 272  : 	case LIST_TYPE_GUNSHIP_TARGET:
; 273  : 	{
; 274  : 		child_pred = raw->gunship_target_link.child_pred;
; 275  : 
; 276  : 		break;
; 277  : 	}
; 278  : 
; 279  : 	#endif
; 280  : 
; 281  : 	////////////////////////////////////////
; 282  : 
; 283  : 	#ifdef LIST_TYPE_HIERARCHY_LINK
; 284  : 
; 285  : 	case LIST_TYPE_HIERARCHY:
; 286  : 	{
; 287  : 		child_pred = raw->hierarchy_link.child_pred;
; 288  : 
; 289  : 		break;
; 290  : 	}
; 291  : 
; 292  : 	#endif
; 293  : 
; 294  : 	////////////////////////////////////////
; 295  : 
; 296  : 	#ifdef LIST_TYPE_KEYSITE_FORCE_LINK
; 297  : 
; 298  : 	case LIST_TYPE_KEYSITE_FORCE:
; 299  : 	{
; 300  : 		child_pred = raw->keysite_force_link.child_pred;
; 301  : 
; 302  : 		break;
; 303  : 	}
; 304  : 
; 305  : 	#endif
; 306  : 
; 307  : 	////////////////////////////////////////
; 308  : 
; 309  : 	#ifdef LIST_TYPE_LAUNCHED_WEAPON_LINK
; 310  : 
; 311  : 	case LIST_TYPE_LAUNCHED_WEAPON:
; 312  : 	{
; 313  : 		child_pred = raw->launched_weapon_link.child_pred;
; 314  : 
; 315  : 		break;
; 316  : 	}
; 317  : 
; 318  : 	#endif
; 319  : 
; 320  : 	////////////////////////////////////////
; 321  : 
; 322  : 	#ifdef LIST_TYPE_LANDING_SITE_LINK
; 323  : 
; 324  : 	case LIST_TYPE_LANDING_SITE:
; 325  : 	{
; 326  : 		child_pred = raw->landing_site_link.child_pred;
; 327  : 
; 328  : 		break;
; 329  : 	}
; 330  : 
; 331  : 	#endif
; 332  : 
; 333  : 	////////////////////////////////////////
; 334  : 
; 335  : 	#ifdef LIST_TYPE_MEMBER_LINK
; 336  : 
; 337  : 	case LIST_TYPE_MEMBER:
; 338  : 	{
; 339  : 		child_pred = raw->member_link.child_pred;
; 340  : 
; 341  : 		break;
; 342  : 	}
; 343  : 
; 344  : 	#endif
; 345  : 
; 346  : 	////////////////////////////////////////
; 347  : 
; 348  : 	#ifdef LIST_TYPE_MOVEMENT_DEPENDENT_LINK
; 349  : 
; 350  : 	case LIST_TYPE_MOVEMENT_DEPENDENT:
; 351  : 	{
; 352  : 		child_pred = raw->movement_dependent_link.child_pred;
; 353  : 
; 354  : 		break;
; 355  : 	}
; 356  : 
; 357  : 	#endif
; 358  : 
; 359  : 	////////////////////////////////////////
; 360  : 
; 361  : 	#ifdef LIST_TYPE_PADLOCK_LINK
; 362  : 
; 363  : 	case LIST_TYPE_PADLOCK:
; 364  : 	{
; 365  : 		child_pred = raw->padlock_link.child_pred;
; 366  : 
; 367  : 		break;
; 368  : 	}
; 369  : 
; 370  : 	#endif
; 371  : 
; 372  : 	////////////////////////////////////////
; 373  : 
; 374  : 	#ifdef LIST_TYPE_PILOT_LINK
; 375  : 
; 376  : 	case LIST_TYPE_PILOT:
; 377  : 	{
; 378  : 		child_pred = raw->pilot_link.child_pred;
; 379  : 
; 380  : 		break;
; 381  : 	}
; 382  : 
; 383  : 	#endif
; 384  : 
; 385  : 	////////////////////////////////////////
; 386  : 
; 387  : 	#ifdef LIST_TYPE_PILOT_LOCK_LINK
; 388  : 
; 389  : 	case LIST_TYPE_PILOT_LOCK:
; 390  : 	{
; 391  : 		child_pred = raw->pilot_lock_link.child_pred;
; 392  : 
; 393  : 		break;
; 394  : 	}
; 395  : 
; 396  : 	#endif
; 397  : 
; 398  : 	////////////////////////////////////////
; 399  : 
; 400  : 	#ifdef LIST_TYPE_PLAYER_TASK_LINK
; 401  : 
; 402  : 	case LIST_TYPE_PLAYER_TASK:
; 403  : 	{
; 404  : 		child_pred = raw->player_task_link.child_pred;
; 405  : 
; 406  : 		break;
; 407  : 	}
; 408  : 
; 409  : 	#endif
; 410  : 
; 411  : 	////////////////////////////////////////
; 412  : 
; 413  : 	#ifdef LIST_TYPE_REGEN_LINK
; 414  : 
; 415  : 	case LIST_TYPE_REGEN:
; 416  : 	{
; 417  : 		child_pred = raw->regen_link.child_pred;
; 418  : 
; 419  : 		break;
; 420  : 	}
; 421  : 
; 422  : 	#endif
; 423  : 
; 424  : 	////////////////////////////////////////
; 425  : 
; 426  : 	#ifdef LIST_TYPE_REGISTRY_LINK
; 427  : 
; 428  : 	case LIST_TYPE_AIR_REGISTRY:
; 429  : 	case LIST_TYPE_GROUND_REGISTRY:
; 430  : 	case LIST_TYPE_SEA_REGISTRY:
; 431  : 	{
; 432  : 		child_pred = raw->registry_link.child_pred;
; 433  : 
; 434  : 		break;
; 435  : 	}
; 436  : 
; 437  : 	#endif
; 438  : 
; 439  : 	////////////////////////////////////////
; 440  : 
; 441  : 	#ifdef LIST_TYPE_SECTOR_LINK
; 442  : 
; 443  : 	case LIST_TYPE_SECTOR:
; 444  : 	{
; 445  : 		child_pred = raw->sector_link.child_pred;
; 446  : 
; 447  : 		break;
; 448  : 	}
; 449  : 
; 450  : 	#endif
; 451  : 
; 452  : 	////////////////////////////////////////
; 453  : 
; 454  : 	#ifdef LIST_TYPE_SECTOR_TASK_LINK
; 455  : 
; 456  : 	case LIST_TYPE_SECTOR_TASK:
; 457  : 	{
; 458  : 		child_pred = raw->sector_task_link.child_pred;
; 459  : 
; 460  : 		break;
; 461  : 	}
; 462  : 
; 463  : 	#endif
; 464  : 
; 465  : 	////////////////////////////////////////
; 466  : 
; 467  : 	#ifdef LIST_TYPE_SEGMENT_LINK
; 468  : 
; 469  : 	case LIST_TYPE_SEGMENT:
; 470  : 	{
; 471  : 		child_pred = raw->segment_link.child_pred;
; 472  : 
; 473  : 		break;
; 474  : 	}
; 475  : 
; 476  : 	#endif
; 477  : 
; 478  : 	////////////////////////////////////////
; 479  : 
; 480  : 	#ifdef LIST_TYPE_SPECIAL_EFFECT_LINK
; 481  : 
; 482  : 	case LIST_TYPE_SPECIAL_EFFECT:
; 483  : 	{
; 484  : 		child_pred = raw->special_effect_link.child_pred;
; 485  : 
; 486  : 		break;
; 487  : 	}
; 488  : 
; 489  : 	#endif
; 490  : 
; 491  : 	////////////////////////////////////////
; 492  : 
; 493  : 	#ifdef LIST_TYPE_TAKEOFF_QUEUE_LINK
; 494  : 
; 495  : 	case LIST_TYPE_TAKEOFF_QUEUE:
; 496  : 	{
; 497  : 		child_pred = raw->takeoff_queue_link.child_pred;
; 498  : 
; 499  : 		break;
; 500  : 	}
; 501  : 
; 502  : 	#endif
; 503  : 
; 504  : 	////////////////////////////////////////
; 505  : 
; 506  : 	#ifdef LIST_TYPE_TARGET_LINK
; 507  : 
; 508  : 	case LIST_TYPE_TARGET:
; 509  : 	{
; 510  : 		child_pred = raw->target_link.child_pred;
; 511  : 
; 512  : 		break;
; 513  : 	}
; 514  : 
; 515  : 	#endif
; 516  : 
; 517  : 	////////////////////////////////////////
; 518  : 
; 519  : 	#ifdef LIST_TYPE_TASK_DEPENDENT_LINK
; 520  : 
; 521  : 	case LIST_TYPE_TASK_DEPENDENT:
; 522  : 	{
; 523  : 		child_pred = raw->task_dependent_link.child_pred;
; 524  : 
; 525  : 		break;
; 526  : 	}
; 527  : 
; 528  : 	#endif
; 529  : 
; 530  : 	////////////////////////////////////////
; 531  : 
; 532  : 	#ifdef LIST_TYPE_UNASSIGNED_TASK_LINK
; 533  : 
; 534  : 	case LIST_TYPE_UNASSIGNED_TASK:
; 535  : 	{
; 536  : 		child_pred = raw->task_link.child_pred;
; 537  : 
; 538  : 		break;
; 539  : 	}
; 540  : 
; 541  : 	#endif
; 542  : 
; 543  : 	////////////////////////////////////////
; 544  : 
; 545  : 	#ifdef LIST_TYPE_UPDATE_LINK
; 546  : 
; 547  : 	case LIST_TYPE_UPDATE:
; 548  : 	{
; 549  : 		child_pred = raw->update_link.child_pred;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00023	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00026	89 4d f8	 mov	 DWORD PTR _child_pred$[ebp], ecx

; 550  : 
; 551  : 		break;

  00029	eb 7f		 jmp	 SHORT $LN2@get_local_
$LN5@get_local_:

; 552  : 	}
; 553  : 
; 554  : 	#endif
; 555  : 
; 556  : 	////////////////////////////////////////
; 557  : 
; 558  : 	#ifdef LIST_TYPE_VIEW_LINK
; 559  : 
; 560  : 	case LIST_TYPE_VIEW:
; 561  : 	{
; 562  : 		child_pred = raw->view_link.child_pred;
; 563  : 
; 564  : 		break;
; 565  : 	}
; 566  : 
; 567  : 	#endif
; 568  : 
; 569  : 	////////////////////////////////////////
; 570  : 
; 571  : 	#ifdef LIST_TYPE_VIEW_WEAPON_LINK
; 572  : 
; 573  : 	case LIST_TYPE_VIEW_WEAPON:
; 574  : 	{
; 575  : 		child_pred = raw->view_weapon_link.child_pred;
; 576  : 
; 577  : 		break;
; 578  : 	}
; 579  : 
; 580  : 	#endif
; 581  : 
; 582  : 	////////////////////////////////////////
; 583  : 
; 584  : 	#ifdef LIST_TYPE_WAYPOINT_LINK
; 585  : 
; 586  : 	case LIST_TYPE_WAYPOINT:
; 587  : 	{
; 588  : 		child_pred = raw->waypoint_link.child_pred;
; 589  : 
; 590  : 		break;
; 591  : 	}
; 592  : 
; 593  : 	#endif
; 594  : 
; 595  : 	////////////////////////////////////////
; 596  : 
; 597  : 	default:
; 598  : 	{
; 599  : 		debug_fatal_invalid_list_type (en, type);

  0002b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002f	74 0a		 je	 SHORT $LN8@get_local_
  00031	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	89 4d b4	 mov	 DWORD PTR tv84[ebp], ecx
  00039	eb 24		 jmp	 SHORT $LN9@get_local_
$LN8@get_local_:
  0003b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_child_pred@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
  00041	81 c2 62 01 00
	00		 add	 edx, 354		; 00000162H
  00047	52		 push	 edx
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@ILOBLGDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00058	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN9@get_local_:
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??get_local_child_pred@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
  00065	81 c1 62 01 00
	00		 add	 ecx, 354		; 00000162H
  0006b	51		 push	 ecx
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@ILOBLGDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00071	8b 55 0c	 mov	 edx, DWORD PTR _type$[ebp]
  00074	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?list_type_database@@3PAULIST_TYPE_DATA@@A[edx*8]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0007f	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  00085	c1 f9 04	 sar	 ecx, 4
  00088	51		 push	 ecx
  00089	6b 55 b4 0c	 imul	 edx, DWORD PTR tv84[ebp], 12
  0008d	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[edx]
  00093	50		 push	 eax
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?debug_fatal_invalid_list_type_message@@3PBDB ; debug_fatal_invalid_list_type_message
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000a0	83 c4 18	 add	 esp, 24			; 00000018H

; 600  : 
; 601  : 		child_pred = NULL;

  000a3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _child_pred$[ebp], 0
$LN2@get_local_:

; 602  : 
; 603  : 		break;
; 604  : 	}
; 605  : 
; 606  : 	////////////////////////////////////////
; 607  : }
; 608  : 
; 609  : //
; 610  : // check list integrity
; 611  : //
; 612  : 
; 613  : ASSERT (en != child_pred);

  000aa	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ad	3b 45 f8	 cmp	 eax, DWORD PTR _child_pred$[ebp]
  000b0	75 1a		 jne	 SHORT $LN6@get_local_
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_child_pred@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
  000b7	05 70 01 00 00	 add	 eax, 368		; 00000170H
  000bc	50		 push	 eax
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@ILOBLGDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KBJIPEKH@en?5?$CB?$DN?5child_pred@
  000c7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_local_:
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c

; 256  : 	return (child_pred);

  000cc	8b 45 f8	 mov	 eax, DWORD PTR _child_pred$[ebp]

; 257  : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 08 00	 ret	 8
?get_local_child_pred@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z ENDP ; get_local_child_pred
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\set_pred.h
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
;	COMDAT ?set_local_child_pred@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z
_TEXT	SEGMENT
tv89 = -72						; size = 4
tv70 = -72						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_child_pred$ = 16					; size = 4
?set_local_child_pred@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z PROC ; set_local_child_pred, COMDAT

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 228  : 	crater
; 229  : 		*raw;
; 230  : 
; 231  : 	raw = (crater *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\set_pred.h

; 71   : ASSERT (en != child_pred);

  00012	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00015	3b 45 10	 cmp	 eax, DWORD PTR _child_pred$[ebp]
  00018	75 1a		 jne	 SHORT $LN4@set_local_
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_local_child_pred@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
  0001f	2d 9c 00 00 00	 sub	 eax, 156		; 0000009cH
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@JFMOABHA@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KBJIPEKH@en?5?$CB?$DN?5child_pred@
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@set_local_:

; 72   : 
; 73   : switch (type)

  00034	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00037	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  0003a	83 7d b8 29	 cmp	 DWORD PTR tv70[ebp], 41	; 00000029H
  0003e	74 02		 je	 SHORT $LN5@set_local_
  00040	eb 0b		 jmp	 SHORT $LN6@set_local_
$LN5@set_local_:

; 74   : {
; 75   : 	////////////////////////////////////////
; 76   : 
; 77   : 	#ifdef LIST_TYPE_AIRCREW_LINK
; 78   : 
; 79   : 	case LIST_TYPE_AIRCREW:
; 80   : 	{
; 81   : 		raw->aircrew_link.child_pred = child_pred;
; 82   : 
; 83   : 		break;
; 84   : 	}
; 85   : 
; 86   : 	#endif
; 87   : 
; 88   : 	////////////////////////////////////////
; 89   : 
; 90   : 	#ifdef LIST_TYPE_ASSIGNED_TASK_LINK
; 91   : 
; 92   : 	case LIST_TYPE_ASSIGNED_TASK:
; 93   : 	{
; 94   : 		raw->task_link.child_pred = child_pred;
; 95   : 
; 96   : 		break;
; 97   : 	}
; 98   : 
; 99   : 	#endif
; 100  : 
; 101  : 	////////////////////////////////////////
; 102  : 
; 103  : 	#ifdef LIST_TYPE_CAMPAIGN_OBJECTIVE_LINK
; 104  : 
; 105  : 	case LIST_TYPE_CAMPAIGN_OBJECTIVE:
; 106  : 	{
; 107  : 		raw->campaign_objective_link.child_pred = child_pred;
; 108  : 
; 109  : 		break;
; 110  : 	}
; 111  : 
; 112  : 	#endif
; 113  : 
; 114  : 	////////////////////////////////////////
; 115  : 
; 116  : 	#ifdef LIST_TYPE_CARGO_LINK
; 117  : 
; 118  : 	case LIST_TYPE_CARGO:
; 119  : 	{
; 120  : 		raw->cargo_link.child_pred = child_pred;
; 121  : 
; 122  : 		break;
; 123  : 	}
; 124  : 
; 125  : 	#endif
; 126  : 
; 127  : 	////////////////////////////////////////
; 128  : 
; 129  : 	#ifdef LIST_TYPE_CITY_BUILDING_LINK
; 130  : 
; 131  : 	case LIST_TYPE_CITY_BUILDING:
; 132  : 	{
; 133  : 		raw->city_building_link.child_pred = child_pred;
; 134  : 
; 135  : 		break;
; 136  : 	}
; 137  : 
; 138  : 	#endif
; 139  : 
; 140  : 	////////////////////////////////////////
; 141  : 
; 142  : 	#ifdef LIST_TYPE_COMPLETED_TASK_LINK
; 143  : 
; 144  : 	case LIST_TYPE_COMPLETED_TASK:
; 145  : 	{
; 146  : 		raw->task_link.child_pred = child_pred;
; 147  : 
; 148  : 		break;
; 149  : 	}
; 150  : 
; 151  : 	#endif
; 152  : 
; 153  : 	////////////////////////////////////////
; 154  : 
; 155  : 	#ifdef LIST_TYPE_CURRENT_WAYPOINT_LINK
; 156  : 
; 157  : 	case LIST_TYPE_CURRENT_WAYPOINT:
; 158  : 	{
; 159  : 		raw->current_waypoint_link.child_pred = child_pred;
; 160  : 
; 161  : 		break;
; 162  : 	}
; 163  : 
; 164  : 	#endif
; 165  : 
; 166  : 	////////////////////////////////////////
; 167  : 
; 168  : 	// Jabbewock 031107 Designated targets
; 169  : 	
; 170  : 	#ifdef LIST_TYPE_DESIGNATED_TARGET_LINK
; 171  : 
; 172  : 	case LIST_TYPE_DESIGNATED_TARGET:
; 173  : 	{
; 174  : 		raw->designated_target_link.child_pred = child_pred;
; 175  : 
; 176  : 		break;
; 177  : 	}
; 178  : 
; 179  : 	#endif
; 180  : 
; 181  : 	// Jabbewock 031107 ends
; 182  : 	
; 183  : 	#ifdef LIST_TYPE_DIVISION_LINK
; 184  : 
; 185  : 	case LIST_TYPE_DIVISION:
; 186  : 	{
; 187  : 		raw->division_link.child_pred = child_pred;
; 188  : 
; 189  : 		break;
; 190  : 	}
; 191  : 
; 192  : 	#endif
; 193  : 	
; 194  : 	////////////////////////////////////////
; 195  : 
; 196  : 	#ifdef LIST_TYPE_DIVISION_HEADQUARTERS_LINK
; 197  : 
; 198  : 	case LIST_TYPE_DIVISION_HEADQUARTERS:
; 199  : 	{
; 200  : 		raw->division_headquarters_link.child_pred = child_pred;
; 201  : 
; 202  : 		break;
; 203  : 	}
; 204  : 
; 205  : 	#endif
; 206  : 
; 207  : 	////////////////////////////////////////
; 208  : 
; 209  : 	#ifdef LIST_TYPE_FOLLOWER_LINK
; 210  : 
; 211  : 	case LIST_TYPE_FOLLOWER:
; 212  : 	{
; 213  : 		raw->follower_link.child_pred = child_pred;
; 214  : 
; 215  : 		break;
; 216  : 	}
; 217  : 
; 218  : 	#endif
; 219  : 
; 220  : 	////////////////////////////////////////
; 221  : 
; 222  : 	#ifdef LIST_TYPE_FORCE_LINK
; 223  : 
; 224  : 	case LIST_TYPE_FORCE:
; 225  : 	{
; 226  : 		raw->force_link.child_pred = child_pred;
; 227  : 
; 228  : 		break;
; 229  : 	}
; 230  : 
; 231  : 	#endif
; 232  : 
; 233  : 	////////////////////////////////////////
; 234  : 
; 235  : 	#ifdef LIST_TYPE_GROUP_LINK
; 236  : 
; 237  : 	case LIST_TYPE_BUILDING_GROUP:
; 238  : 	case LIST_TYPE_INDEPENDENT_GROUP:
; 239  : 	case LIST_TYPE_KEYSITE_GROUP:
; 240  : 	{
; 241  : 		raw->group_link.child_pred = child_pred;
; 242  : 
; 243  : 		break;
; 244  : 	}
; 245  : 
; 246  : 	#endif
; 247  : 
; 248  : 	////////////////////////////////////////
; 249  : 
; 250  : 	#ifdef LIST_TYPE_GUIDE_LINK
; 251  : 
; 252  : 	case LIST_TYPE_GUIDE:
; 253  : 	{
; 254  : 		raw->guide_link.child_pred = child_pred;
; 255  : 
; 256  : 		break;
; 257  : 	}
; 258  : 
; 259  : 	#endif
; 260  : 
; 261  : 	////////////////////////////////////////
; 262  : 
; 263  : 	#ifdef LIST_TYPE_GUIDE_STACK_LINK
; 264  : 
; 265  : 	case LIST_TYPE_GUIDE_STACK:
; 266  : 	{
; 267  : 		raw->guide_stack_link.child_pred = child_pred;
; 268  : 
; 269  : 		break;
; 270  : 	}
; 271  : 
; 272  : 	#endif
; 273  : 
; 274  : 	////////////////////////////////////////
; 275  : 
; 276  : 	#ifdef LIST_TYPE_GUNSHIP_TARGET_LINK
; 277  : 
; 278  : 	case LIST_TYPE_GUNSHIP_TARGET:
; 279  : 	{
; 280  : 		raw->gunship_target_link.child_pred = child_pred;
; 281  : 
; 282  : 		break;
; 283  : 	}
; 284  : 
; 285  : 	#endif
; 286  : 
; 287  : 	////////////////////////////////////////
; 288  : 
; 289  : 	#ifdef LIST_TYPE_HIERARCHY_LINK
; 290  : 
; 291  : 	case LIST_TYPE_HIERARCHY:
; 292  : 	{
; 293  : 		raw->hierarchy_link.child_pred = child_pred;
; 294  : 
; 295  : 		break;
; 296  : 	}
; 297  : 
; 298  : 	#endif
; 299  : 
; 300  : 	////////////////////////////////////////
; 301  : 
; 302  : 	#ifdef LIST_TYPE_KEYSITE_FORCE_LINK
; 303  : 
; 304  : 	case LIST_TYPE_KEYSITE_FORCE:
; 305  : 	{
; 306  : 		raw->keysite_force_link.child_pred = child_pred;
; 307  : 
; 308  : 		break;
; 309  : 	}
; 310  : 
; 311  : 	#endif
; 312  : 
; 313  : 	////////////////////////////////////////
; 314  : 
; 315  : 	#ifdef LIST_TYPE_LAUNCHED_WEAPON_LINK
; 316  : 
; 317  : 	case LIST_TYPE_LAUNCHED_WEAPON:
; 318  : 	{
; 319  : 		raw->launched_weapon_link.child_pred = child_pred;
; 320  : 
; 321  : 		break;
; 322  : 	}
; 323  : 
; 324  : 	#endif
; 325  : 
; 326  : 	////////////////////////////////////////
; 327  : 
; 328  : 	#ifdef LIST_TYPE_LANDING_SITE_LINK
; 329  : 
; 330  : 	case LIST_TYPE_LANDING_SITE:
; 331  : 	{
; 332  : 		raw->landing_site_link.child_pred = child_pred;
; 333  : 
; 334  : 		break;
; 335  : 	}
; 336  : 
; 337  : 	#endif
; 338  : 
; 339  : 	////////////////////////////////////////
; 340  : 
; 341  : 	#ifdef LIST_TYPE_MEMBER_LINK
; 342  : 
; 343  : 	case LIST_TYPE_MEMBER:
; 344  : 	{
; 345  : 		raw->member_link.child_pred = child_pred;
; 346  : 
; 347  : 		break;
; 348  : 	}
; 349  : 
; 350  : 	#endif
; 351  : 
; 352  : 	////////////////////////////////////////
; 353  : 
; 354  : 	#ifdef LIST_TYPE_MOVEMENT_DEPENDENT_LINK
; 355  : 
; 356  : 	case LIST_TYPE_MOVEMENT_DEPENDENT:
; 357  : 	{
; 358  : 		raw->movement_dependent_link.child_pred = child_pred;
; 359  : 
; 360  : 		break;
; 361  : 	}
; 362  : 
; 363  : 	#endif
; 364  : 
; 365  : 	////////////////////////////////////////
; 366  : 
; 367  : 	#ifdef LIST_TYPE_PADLOCK_LINK
; 368  : 
; 369  : 	case LIST_TYPE_PADLOCK:
; 370  : 	{
; 371  : 		raw->padlock_link.child_pred = child_pred;
; 372  : 
; 373  : 		break;
; 374  : 	}
; 375  : 
; 376  : 	#endif
; 377  : 
; 378  : 	////////////////////////////////////////
; 379  : 
; 380  : 	#ifdef LIST_TYPE_PILOT_LINK
; 381  : 
; 382  : 	case LIST_TYPE_PILOT:
; 383  : 	{
; 384  : 		raw->pilot_link.child_pred = child_pred;
; 385  : 
; 386  : 		break;
; 387  : 	}
; 388  : 
; 389  : 	#endif
; 390  : 
; 391  : 	////////////////////////////////////////
; 392  : 
; 393  : 	#ifdef LIST_TYPE_PILOT_LOCK_LINK
; 394  : 
; 395  : 	case LIST_TYPE_PILOT_LOCK:
; 396  : 	{
; 397  : 		raw->pilot_lock_link.child_pred = child_pred;
; 398  : 
; 399  : 		break;
; 400  : 	}
; 401  : 
; 402  : 	#endif
; 403  : 
; 404  : 	////////////////////////////////////////
; 405  : 
; 406  : 	#ifdef LIST_TYPE_PLAYER_TASK_LINK
; 407  : 
; 408  : 	case LIST_TYPE_PLAYER_TASK:
; 409  : 	{
; 410  : 		raw->player_task_link.child_pred = child_pred;
; 411  : 
; 412  : 		break;
; 413  : 	}
; 414  : 
; 415  : 	#endif
; 416  : 
; 417  : 	////////////////////////////////////////
; 418  : 
; 419  : 	#ifdef LIST_TYPE_REGEN_LINK
; 420  : 
; 421  : 	case LIST_TYPE_REGEN:
; 422  : 	{
; 423  : 		raw->regen_link.child_pred = child_pred;
; 424  : 
; 425  : 		break;
; 426  : 	}
; 427  : 
; 428  : 	#endif
; 429  : 
; 430  : 	////////////////////////////////////////
; 431  : 
; 432  : 	#ifdef LIST_TYPE_REGISTRY_LINK
; 433  : 
; 434  : 	case LIST_TYPE_AIR_REGISTRY:
; 435  : 	case LIST_TYPE_GROUND_REGISTRY:
; 436  : 	case LIST_TYPE_SEA_REGISTRY:
; 437  : 	{
; 438  : 		raw->registry_link.child_pred = child_pred;
; 439  : 
; 440  : 		break;
; 441  : 	}
; 442  : 
; 443  : 	#endif
; 444  : 
; 445  : 	////////////////////////////////////////
; 446  : 
; 447  : 	#ifdef LIST_TYPE_SECTOR_LINK
; 448  : 
; 449  : 	case LIST_TYPE_SECTOR:
; 450  : 	{
; 451  : 		raw->sector_link.child_pred = child_pred;
; 452  : 
; 453  : 		break;
; 454  : 	}
; 455  : 
; 456  : 	#endif
; 457  : 
; 458  : 	////////////////////////////////////////
; 459  : 
; 460  : 	#ifdef LIST_TYPE_SECTOR_TASK_LINK
; 461  : 
; 462  : 	case LIST_TYPE_SECTOR_TASK:
; 463  : 	{
; 464  : 		raw->sector_task_link.child_pred = child_pred;
; 465  : 
; 466  : 		break;
; 467  : 	}
; 468  : 
; 469  : 	#endif
; 470  : 
; 471  : 	////////////////////////////////////////
; 472  : 
; 473  : 	#ifdef LIST_TYPE_SEGMENT_LINK
; 474  : 
; 475  : 	case LIST_TYPE_SEGMENT:
; 476  : 	{
; 477  : 		raw->segment_link.child_pred = child_pred;
; 478  : 
; 479  : 		break;
; 480  : 	}
; 481  : 
; 482  : 	#endif
; 483  : 
; 484  : 	////////////////////////////////////////
; 485  : 
; 486  : 	#ifdef LIST_TYPE_SPECIAL_EFFECT_LINK
; 487  : 
; 488  : 	case LIST_TYPE_SPECIAL_EFFECT:
; 489  : 	{
; 490  : 		raw->special_effect_link.child_pred = child_pred;
; 491  : 
; 492  : 		break;
; 493  : 	}
; 494  : 
; 495  : 	#endif
; 496  : 
; 497  : 	////////////////////////////////////////
; 498  : 
; 499  : 	#ifdef LIST_TYPE_TAKEOFF_QUEUE_LINK
; 500  : 
; 501  : 	case LIST_TYPE_TAKEOFF_QUEUE:
; 502  : 	{
; 503  : 		raw->takeoff_queue_link.child_pred = child_pred;
; 504  : 
; 505  : 		break;
; 506  : 	}
; 507  : 
; 508  : 	#endif
; 509  : 
; 510  : 	////////////////////////////////////////
; 511  : 
; 512  : 	#ifdef LIST_TYPE_TARGET_LINK
; 513  : 
; 514  : 	case LIST_TYPE_TARGET:
; 515  : 	{
; 516  : 		raw->target_link.child_pred = child_pred;
; 517  : 
; 518  : 		break;
; 519  : 	}
; 520  : 
; 521  : 	#endif
; 522  : 
; 523  : 	////////////////////////////////////////
; 524  : 
; 525  : 	#ifdef LIST_TYPE_TASK_DEPENDENT_LINK
; 526  : 
; 527  : 	case LIST_TYPE_TASK_DEPENDENT:
; 528  : 	{
; 529  : 		raw->task_dependent_link.child_pred = child_pred;
; 530  : 
; 531  : 		break;
; 532  : 	}
; 533  : 
; 534  : 	#endif
; 535  : 
; 536  : 	////////////////////////////////////////
; 537  : 
; 538  : 	#ifdef LIST_TYPE_UNASSIGNED_TASK_LINK
; 539  : 
; 540  : 	case LIST_TYPE_UNASSIGNED_TASK:
; 541  : 	{
; 542  : 		raw->task_link.child_pred = child_pred;
; 543  : 
; 544  : 		break;
; 545  : 	}
; 546  : 
; 547  : 	#endif
; 548  : 
; 549  : 	////////////////////////////////////////
; 550  : 
; 551  : 	#ifdef LIST_TYPE_UPDATE_LINK
; 552  : 
; 553  : 	case LIST_TYPE_UPDATE:
; 554  : 	{
; 555  : 		raw->update_link.child_pred = child_pred;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00045	8b 4d 10	 mov	 ecx, DWORD PTR _child_pred$[ebp]
  00048	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 556  : 
; 557  : 		break;

  0004b	eb 78		 jmp	 SHORT $LN1@set_local_
$LN6@set_local_:

; 558  : 	}
; 559  : 
; 560  : 	#endif
; 561  : 
; 562  : 	////////////////////////////////////////
; 563  : 
; 564  : 	#ifdef LIST_TYPE_VIEW_LINK
; 565  : 
; 566  : 	case LIST_TYPE_VIEW:
; 567  : 	{
; 568  : 		raw->view_link.child_pred = child_pred;
; 569  : 
; 570  : 		break;
; 571  : 	}
; 572  : 
; 573  : 	#endif
; 574  : 
; 575  : 	////////////////////////////////////////
; 576  : 
; 577  : 	#ifdef LIST_TYPE_VIEW_WEAPON_LINK
; 578  : 
; 579  : 	case LIST_TYPE_VIEW_WEAPON:
; 580  : 	{
; 581  : 		raw->view_weapon_link.child_pred = child_pred;
; 582  : 
; 583  : 		break;
; 584  : 	}
; 585  : 
; 586  : 	#endif
; 587  : 
; 588  : 	////////////////////////////////////////
; 589  : 
; 590  : 	#ifdef LIST_TYPE_WAYPOINT_LINK
; 591  : 
; 592  : 	case LIST_TYPE_WAYPOINT:
; 593  : 	{
; 594  : 		raw->waypoint_link.child_pred = child_pred;
; 595  : 
; 596  : 		break;
; 597  : 	}
; 598  : 
; 599  : 	#endif
; 600  : 
; 601  : 	////////////////////////////////////////
; 602  : 
; 603  : 	default:
; 604  : 	{
; 605  : 		debug_fatal_invalid_list_type (en, type);

  0004d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00051	74 0a		 je	 SHORT $LN8@set_local_
  00053	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	89 4d b8	 mov	 DWORD PTR tv89[ebp], ecx
  0005b	eb 24		 jmp	 SHORT $LN9@set_local_
$LN8@set_local_:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_local_child_pred@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
  00063	81 c2 7a 01 00
	00		 add	 edx, 378		; 0000017aH
  00069	52		 push	 edx
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@JFMOABHA@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN9@set_local_:
  00081	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??set_local_child_pred@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
  00087	81 c1 7a 01 00
	00		 add	 ecx, 378		; 0000017aH
  0008d	51		 push	 ecx
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@JFMOABHA@c?3?2users?2nhv90?2projects?2eech?2ap@
  00093	8b 55 0c	 mov	 edx, DWORD PTR _type$[ebp]
  00096	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?list_type_database@@3PAULIST_TYPE_DATA@@A[edx*8]
  0009d	50		 push	 eax
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000a1	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  000a7	c1 f9 04	 sar	 ecx, 4
  000aa	51		 push	 ecx
  000ab	6b 55 b8 0c	 imul	 edx, DWORD PTR tv89[ebp], 12
  000af	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[edx]
  000b5	50		 push	 eax
  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?debug_fatal_invalid_list_type_message@@3PBDB ; debug_fatal_invalid_list_type_message
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000c2	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@set_local_:
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c

; 234  : }

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 0c 00	 ret	 12			; 0000000cH
?set_local_child_pred@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z ENDP ; set_local_child_pred
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\get_succ.h
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
;	COMDAT ?get_local_child_succ@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z
_TEXT	SEGMENT
tv84 = -76						; size = 4
tv65 = -76						; size = 4
_child_succ$ = -8					; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
?get_local_child_succ@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z PROC ; get_local_child_succ, COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 205  : 	crater
; 206  : 		*raw;
; 207  : 
; 208  : 	entity
; 209  : 		*child_succ;
; 210  : 
; 211  : 	raw = (crater *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\get_succ.h

; 67   : switch (type)

  00012	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00015	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00018	83 7d b4 29	 cmp	 DWORD PTR tv65[ebp], 41	; 00000029H
  0001c	74 02		 je	 SHORT $LN4@get_local_
  0001e	eb 0b		 jmp	 SHORT $LN5@get_local_
$LN4@get_local_:

; 68   : {
; 69   : 	////////////////////////////////////////
; 70   : 
; 71   : 	#ifdef LIST_TYPE_AIRCREW_LINK
; 72   : 
; 73   : 	case LIST_TYPE_AIRCREW:
; 74   : 	{
; 75   : 		child_succ = raw->aircrew_link.child_succ;
; 76   : 
; 77   : 		break;
; 78   : 	}
; 79   : 
; 80   : 	#endif
; 81   : 
; 82   : 	////////////////////////////////////////
; 83   : 
; 84   : 	#ifdef LIST_TYPE_ASSIGNED_TASK_LINK
; 85   : 
; 86   : 	case LIST_TYPE_ASSIGNED_TASK:
; 87   : 	{
; 88   : 		child_succ = raw->task_link.child_succ;
; 89   : 
; 90   : 		break;
; 91   : 	}
; 92   : 
; 93   : 	#endif
; 94   : 
; 95   : 	////////////////////////////////////////
; 96   : 
; 97   : 	#ifdef LIST_TYPE_CAMPAIGN_OBJECTIVE_LINK
; 98   : 
; 99   : 	case LIST_TYPE_CAMPAIGN_OBJECTIVE:
; 100  : 	{
; 101  : 		child_succ = raw->campaign_objective_link.child_succ;
; 102  : 
; 103  : 		break;
; 104  : 	}
; 105  : 
; 106  : 	#endif
; 107  : 
; 108  : 	////////////////////////////////////////
; 109  : 
; 110  : 	#ifdef LIST_TYPE_CARGO_LINK
; 111  : 
; 112  : 	case LIST_TYPE_CARGO:
; 113  : 	{
; 114  : 		child_succ = raw->cargo_link.child_succ;
; 115  : 
; 116  : 		break;
; 117  : 	}
; 118  : 
; 119  : 	#endif
; 120  : 
; 121  : 	////////////////////////////////////////
; 122  : 
; 123  : 	#ifdef LIST_TYPE_CITY_BUILDING_LINK
; 124  : 
; 125  : 	case LIST_TYPE_CITY_BUILDING:
; 126  : 	{
; 127  : 		child_succ = raw->city_building_link.child_succ;
; 128  : 
; 129  : 		break;
; 130  : 	}
; 131  : 
; 132  : 	#endif
; 133  : 
; 134  : 	////////////////////////////////////////
; 135  : 
; 136  : 	#ifdef LIST_TYPE_COMPLETED_TASK_LINK
; 137  : 
; 138  : 	case LIST_TYPE_COMPLETED_TASK:
; 139  : 	{
; 140  : 		child_succ = raw->task_link.child_succ;
; 141  : 
; 142  : 		break;
; 143  : 	}
; 144  : 
; 145  : 	#endif
; 146  : 
; 147  : 	////////////////////////////////////////
; 148  : 
; 149  : 	#ifdef LIST_TYPE_CURRENT_WAYPOINT_LINK
; 150  : 
; 151  : 	case LIST_TYPE_CURRENT_WAYPOINT:
; 152  : 	{
; 153  : 		child_succ = raw->current_waypoint_link.child_succ;
; 154  : 
; 155  : 		break;
; 156  : 	}
; 157  : 
; 158  : 	#endif
; 159  : 
; 160  : 	////////////////////////////////////////
; 161  : 
; 162  : 	// Jabbewock 031107 Designated targets
; 163  : 		
; 164  : 	#ifdef LIST_TYPE_DESIGNATED_TARGET_LINK
; 165  : 
; 166  : 	case LIST_TYPE_DESIGNATED_TARGET:
; 167  : 	{
; 168  : 		child_succ = raw->designated_target_link.child_succ;
; 169  : 
; 170  : 		break;
; 171  : 	}
; 172  : 
; 173  : 	#endif
; 174  : 
; 175  : 	// Jabbewock 031107 ends
; 176  : 	
; 177  : 	#ifdef LIST_TYPE_DIVISION_LINK
; 178  : 
; 179  : 	case LIST_TYPE_DIVISION:
; 180  : 	{
; 181  : 		child_succ = raw->division_link.child_succ;
; 182  : 
; 183  : 		break;
; 184  : 	}
; 185  : 
; 186  : 	#endif
; 187  : 
; 188  : 	////////////////////////////////////////
; 189  : 
; 190  : 	#ifdef LIST_TYPE_DIVISION_HEADQUARTERS_LINK
; 191  : 
; 192  : 	case LIST_TYPE_DIVISION_HEADQUARTERS:
; 193  : 	{
; 194  : 		child_succ = raw->division_headquarters_link.child_succ;
; 195  : 
; 196  : 		break;
; 197  : 	}
; 198  : 
; 199  : 	#endif
; 200  : 
; 201  : 	////////////////////////////////////////
; 202  : 
; 203  : 	#ifdef LIST_TYPE_FOLLOWER_LINK
; 204  : 
; 205  : 	case LIST_TYPE_FOLLOWER:
; 206  : 	{
; 207  : 		child_succ = raw->follower_link.child_succ;
; 208  : 
; 209  : 		break;
; 210  : 	}
; 211  : 
; 212  : 	#endif
; 213  : 
; 214  : 	////////////////////////////////////////
; 215  : 
; 216  : 	#ifdef LIST_TYPE_FORCE_LINK
; 217  : 
; 218  : 	case LIST_TYPE_FORCE:
; 219  : 	{
; 220  : 		child_succ = raw->force_link.child_succ;
; 221  : 
; 222  : 		break;
; 223  : 	}
; 224  : 
; 225  : 	#endif
; 226  : 
; 227  : 	////////////////////////////////////////
; 228  : 
; 229  : 	#ifdef LIST_TYPE_GROUP_LINK
; 230  : 
; 231  : 	case LIST_TYPE_BUILDING_GROUP:
; 232  : 	case LIST_TYPE_INDEPENDENT_GROUP:
; 233  : 	case LIST_TYPE_KEYSITE_GROUP:
; 234  : 	{
; 235  : 		child_succ = raw->group_link.child_succ;
; 236  : 
; 237  : 		break;
; 238  : 	}
; 239  : 
; 240  : 	#endif
; 241  : 
; 242  : 	////////////////////////////////////////
; 243  : 
; 244  : 	#ifdef LIST_TYPE_GUIDE_LINK
; 245  : 
; 246  : 	case LIST_TYPE_GUIDE:
; 247  : 	{
; 248  : 		child_succ = raw->guide_link.child_succ;
; 249  : 
; 250  : 		break;
; 251  : 	}
; 252  : 
; 253  : 	#endif
; 254  : 
; 255  : 	////////////////////////////////////////
; 256  : 
; 257  : 	#ifdef LIST_TYPE_GUIDE_STACK_LINK
; 258  : 
; 259  : 	case LIST_TYPE_GUIDE_STACK:
; 260  : 	{
; 261  : 		child_succ = raw->guide_stack_link.child_succ;
; 262  : 
; 263  : 		break;
; 264  : 	}
; 265  : 
; 266  : 	#endif
; 267  : 
; 268  : 	////////////////////////////////////////
; 269  : 
; 270  : 	#ifdef LIST_TYPE_GUNSHIP_TARGET_LINK
; 271  : 
; 272  : 	case LIST_TYPE_GUNSHIP_TARGET:
; 273  : 	{
; 274  : 		child_succ = raw->gunship_target_link.child_succ;
; 275  : 
; 276  : 		break;
; 277  : 	}
; 278  : 
; 279  : 	#endif
; 280  : 
; 281  : 	////////////////////////////////////////
; 282  : 
; 283  : 	#ifdef LIST_TYPE_HIERARCHY_LINK
; 284  : 
; 285  : 	case LIST_TYPE_HIERARCHY:
; 286  : 	{
; 287  : 		child_succ = raw->hierarchy_link.child_succ;
; 288  : 
; 289  : 		break;
; 290  : 	}
; 291  : 
; 292  : 	#endif
; 293  : 	
; 294  : 	////////////////////////////////////////
; 295  : 
; 296  : 	#ifdef LIST_TYPE_KEYSITE_FORCE_LINK
; 297  : 
; 298  : 	case LIST_TYPE_KEYSITE_FORCE:
; 299  : 	{
; 300  : 		child_succ = raw->keysite_force_link.child_succ;
; 301  : 
; 302  : 		break;
; 303  : 	}
; 304  : 
; 305  : 	#endif
; 306  : 
; 307  : 	////////////////////////////////////////
; 308  : 
; 309  : 	#ifdef LIST_TYPE_LAUNCHED_WEAPON_LINK
; 310  : 
; 311  : 	case LIST_TYPE_LAUNCHED_WEAPON:
; 312  : 	{
; 313  : 		child_succ = raw->launched_weapon_link.child_succ;
; 314  : 
; 315  : 		break;
; 316  : 	}
; 317  : 
; 318  : 	#endif
; 319  : 
; 320  : 	////////////////////////////////////////
; 321  : 
; 322  : 	#ifdef LIST_TYPE_LANDING_SITE_LINK
; 323  : 
; 324  : 	case LIST_TYPE_LANDING_SITE:
; 325  : 	{
; 326  : 		child_succ = raw->landing_site_link.child_succ;
; 327  : 
; 328  : 		break;
; 329  : 	}
; 330  : 
; 331  : 	#endif
; 332  : 
; 333  : 	////////////////////////////////////////
; 334  : 
; 335  : 	#ifdef LIST_TYPE_MEMBER_LINK
; 336  : 
; 337  : 	case LIST_TYPE_MEMBER:
; 338  : 	{
; 339  : 		child_succ = raw->member_link.child_succ;
; 340  : 
; 341  : 		break;
; 342  : 	}
; 343  : 
; 344  : 	#endif
; 345  : 
; 346  : 	////////////////////////////////////////
; 347  : 
; 348  : 	#ifdef LIST_TYPE_MOVEMENT_DEPENDENT_LINK
; 349  : 
; 350  : 	case LIST_TYPE_MOVEMENT_DEPENDENT:
; 351  : 	{
; 352  : 		child_succ = raw->movement_dependent_link.child_succ;
; 353  : 
; 354  : 		break;
; 355  : 	}
; 356  : 
; 357  : 	#endif
; 358  : 
; 359  : 	////////////////////////////////////////
; 360  : 
; 361  : 	#ifdef LIST_TYPE_PADLOCK_LINK
; 362  : 
; 363  : 	case LIST_TYPE_PADLOCK:
; 364  : 	{
; 365  : 		child_succ = raw->padlock_link.child_succ;
; 366  : 
; 367  : 		break;
; 368  : 	}
; 369  : 
; 370  : 	#endif
; 371  : 
; 372  : 	////////////////////////////////////////
; 373  : 
; 374  : 	#ifdef LIST_TYPE_PILOT_LINK
; 375  : 
; 376  : 	case LIST_TYPE_PILOT:
; 377  : 	{
; 378  : 		child_succ = raw->pilot_link.child_succ;
; 379  : 
; 380  : 		break;
; 381  : 	}
; 382  : 
; 383  : 	#endif
; 384  : 
; 385  : 	////////////////////////////////////////
; 386  : 
; 387  : 	#ifdef LIST_TYPE_PILOT_LOCK_LINK
; 388  : 
; 389  : 	case LIST_TYPE_PILOT_LOCK:
; 390  : 	{
; 391  : 		child_succ = raw->pilot_lock_link.child_succ;
; 392  : 
; 393  : 		break;
; 394  : 	}
; 395  : 
; 396  : 	#endif
; 397  : 
; 398  : 	////////////////////////////////////////
; 399  : 
; 400  : 	#ifdef LIST_TYPE_PLAYER_TASK_LINK
; 401  : 
; 402  : 	case LIST_TYPE_PLAYER_TASK:
; 403  : 	{
; 404  : 		child_succ = raw->player_task_link.child_succ;
; 405  : 
; 406  : 		break;
; 407  : 	}
; 408  : 
; 409  : 	#endif
; 410  : 
; 411  : 	////////////////////////////////////////
; 412  : 
; 413  : 	#ifdef LIST_TYPE_REGEN_LINK
; 414  : 
; 415  : 	case LIST_TYPE_REGEN:
; 416  : 	{
; 417  : 		child_succ = raw->regen_link.child_succ;
; 418  : 
; 419  : 		break;
; 420  : 	}
; 421  : 
; 422  : 	#endif
; 423  : 
; 424  : 	////////////////////////////////////////
; 425  : 
; 426  : 	#ifdef LIST_TYPE_REGISTRY_LINK
; 427  : 
; 428  : 	case LIST_TYPE_AIR_REGISTRY:
; 429  : 	case LIST_TYPE_GROUND_REGISTRY:
; 430  : 	case LIST_TYPE_SEA_REGISTRY:
; 431  : 	{
; 432  : 		child_succ = raw->registry_link.child_succ;
; 433  : 
; 434  : 		break;
; 435  : 	}
; 436  : 
; 437  : 	#endif
; 438  : 
; 439  : 	////////////////////////////////////////
; 440  : 
; 441  : 	#ifdef LIST_TYPE_SECTOR_LINK
; 442  : 
; 443  : 	case LIST_TYPE_SECTOR:
; 444  : 	{
; 445  : 		child_succ = raw->sector_link.child_succ;
; 446  : 
; 447  : 		break;
; 448  : 	}
; 449  : 
; 450  : 	#endif
; 451  : 
; 452  : 	////////////////////////////////////////
; 453  : 
; 454  : 	#ifdef LIST_TYPE_SECTOR_TASK_LINK
; 455  : 
; 456  : 	case LIST_TYPE_SECTOR_TASK:
; 457  : 	{
; 458  : 		child_succ = raw->sector_task_link.child_succ;
; 459  : 
; 460  : 		break;
; 461  : 	}
; 462  : 
; 463  : 	#endif
; 464  : 
; 465  : 	////////////////////////////////////////
; 466  : 
; 467  : 	#ifdef LIST_TYPE_SEGMENT_LINK
; 468  : 
; 469  : 	case LIST_TYPE_SEGMENT:
; 470  : 	{
; 471  : 		child_succ = raw->segment_link.child_succ;
; 472  : 
; 473  : 		break;
; 474  : 	}
; 475  : 
; 476  : 	#endif
; 477  : 
; 478  : 	////////////////////////////////////////
; 479  : 
; 480  : 	#ifdef LIST_TYPE_SPECIAL_EFFECT_LINK
; 481  : 
; 482  : 	case LIST_TYPE_SPECIAL_EFFECT:
; 483  : 	{
; 484  : 		child_succ = raw->special_effect_link.child_succ;
; 485  : 
; 486  : 		break;
; 487  : 	}
; 488  : 
; 489  : 	#endif
; 490  : 
; 491  : 	////////////////////////////////////////
; 492  : 
; 493  : 	#ifdef LIST_TYPE_TAKEOFF_QUEUE_LINK
; 494  : 
; 495  : 	case LIST_TYPE_TAKEOFF_QUEUE:
; 496  : 	{
; 497  : 		child_succ = raw->takeoff_queue_link.child_succ;
; 498  : 
; 499  : 		break;
; 500  : 	}
; 501  : 
; 502  : 	#endif
; 503  : 
; 504  : 	////////////////////////////////////////
; 505  : 
; 506  : 	#ifdef LIST_TYPE_TARGET_LINK
; 507  : 
; 508  : 	case LIST_TYPE_TARGET:
; 509  : 	{
; 510  : 		child_succ = raw->target_link.child_succ;
; 511  : 
; 512  : 		break;
; 513  : 	}
; 514  : 
; 515  : 	#endif
; 516  : 
; 517  : 	////////////////////////////////////////
; 518  : 
; 519  : 	#ifdef LIST_TYPE_TASK_DEPENDENT_LINK
; 520  : 
; 521  : 	case LIST_TYPE_TASK_DEPENDENT:
; 522  : 	{
; 523  : 		child_succ = raw->task_dependent_link.child_succ;
; 524  : 
; 525  : 		break;
; 526  : 	}
; 527  : 
; 528  : 	#endif
; 529  : 
; 530  : 	////////////////////////////////////////
; 531  : 
; 532  : 	#ifdef LIST_TYPE_UNASSIGNED_TASK_LINK
; 533  : 
; 534  : 	case LIST_TYPE_UNASSIGNED_TASK:
; 535  : 	{
; 536  : 		child_succ = raw->task_link.child_succ;
; 537  : 
; 538  : 		break;
; 539  : 	}
; 540  : 
; 541  : 	#endif
; 542  : 
; 543  : 	////////////////////////////////////////
; 544  : 
; 545  : 	#ifdef LIST_TYPE_UPDATE_LINK
; 546  : 
; 547  : 	case LIST_TYPE_UPDATE:
; 548  : 	{
; 549  : 		child_succ = raw->update_link.child_succ;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00023	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00026	89 4d f8	 mov	 DWORD PTR _child_succ$[ebp], ecx

; 550  : 
; 551  : 		break;

  00029	eb 7f		 jmp	 SHORT $LN2@get_local_
$LN5@get_local_:

; 552  : 	}
; 553  : 
; 554  : 	#endif
; 555  : 
; 556  : 	////////////////////////////////////////
; 557  : 
; 558  : 	#ifdef LIST_TYPE_VIEW_LINK
; 559  : 
; 560  : 	case LIST_TYPE_VIEW:
; 561  : 	{
; 562  : 		child_succ = raw->view_link.child_succ;
; 563  : 
; 564  : 		break;
; 565  : 	}
; 566  : 
; 567  : 	#endif
; 568  : 
; 569  : 	////////////////////////////////////////
; 570  : 
; 571  : 	#ifdef LIST_TYPE_VIEW_WEAPON_LINK
; 572  : 
; 573  : 	case LIST_TYPE_VIEW_WEAPON:
; 574  : 	{
; 575  : 		child_succ = raw->view_weapon_link.child_succ;
; 576  : 
; 577  : 		break;
; 578  : 	}
; 579  : 
; 580  : 	#endif
; 581  : 
; 582  : 	////////////////////////////////////////
; 583  : 
; 584  : 	#ifdef LIST_TYPE_WAYPOINT_LINK
; 585  : 
; 586  : 	case LIST_TYPE_WAYPOINT:
; 587  : 	{
; 588  : 		child_succ = raw->waypoint_link.child_succ;
; 589  : 
; 590  : 		break;
; 591  : 	}
; 592  : 
; 593  : 	#endif
; 594  : 
; 595  : 	////////////////////////////////////////
; 596  : 
; 597  : 	default:
; 598  : 	{
; 599  : 		debug_fatal_invalid_list_type (en, type);

  0002b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002f	74 0a		 je	 SHORT $LN8@get_local_
  00031	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	89 4d b4	 mov	 DWORD PTR tv84[ebp], ecx
  00039	eb 24		 jmp	 SHORT $LN9@get_local_
$LN8@get_local_:
  0003b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_child_succ@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
  00041	81 c2 8b 01 00
	00		 add	 edx, 395		; 0000018bH
  00047	52		 push	 edx
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@LFJLFBAF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00058	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN9@get_local_:
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??get_local_child_succ@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
  00065	81 c1 8b 01 00
	00		 add	 ecx, 395		; 0000018bH
  0006b	51		 push	 ecx
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@LFJLFBAF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00071	8b 55 0c	 mov	 edx, DWORD PTR _type$[ebp]
  00074	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?list_type_database@@3PAULIST_TYPE_DATA@@A[edx*8]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0007f	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  00085	c1 f9 04	 sar	 ecx, 4
  00088	51		 push	 ecx
  00089	6b 55 b4 0c	 imul	 edx, DWORD PTR tv84[ebp], 12
  0008d	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[edx]
  00093	50		 push	 eax
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?debug_fatal_invalid_list_type_message@@3PBDB ; debug_fatal_invalid_list_type_message
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000a0	83 c4 18	 add	 esp, 24			; 00000018H

; 600  : 
; 601  : 		child_succ = NULL;

  000a3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _child_succ$[ebp], 0
$LN2@get_local_:

; 602  : 
; 603  : 		break;
; 604  : 	}
; 605  : 
; 606  : 	////////////////////////////////////////
; 607  : }
; 608  : 
; 609  : //
; 610  : // check list integrity
; 611  : //
; 612  : 
; 613  : ASSERT (en != child_succ);

  000aa	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ad	3b 45 f8	 cmp	 eax, DWORD PTR _child_succ$[ebp]
  000b0	75 1a		 jne	 SHORT $LN6@get_local_
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_child_succ@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
  000b7	05 99 01 00 00	 add	 eax, 409		; 00000199H
  000bc	50		 push	 eax
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@LFJLFBAF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DACDFMLL@en?5?$CB?$DN?5child_succ@
  000c7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_local_:
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c

; 215  : 	return (child_succ);

  000cc	8b 45 f8	 mov	 eax, DWORD PTR _child_succ$[ebp]

; 216  : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 08 00	 ret	 8
?get_local_child_succ@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z ENDP ; get_local_child_succ
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\set_succ.h
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
;	COMDAT ?set_local_child_succ@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z
_TEXT	SEGMENT
tv89 = -72						; size = 4
tv70 = -72						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_child_succ$ = 16					; size = 4
?set_local_child_succ@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z PROC ; set_local_child_succ, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 187  : 	crater
; 188  : 		*raw;
; 189  : 
; 190  : 	raw = (crater *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\set_succ.h

; 71   : ASSERT (en != child_succ);

  00012	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00015	3b 45 10	 cmp	 eax, DWORD PTR _child_succ$[ebp]
  00018	75 18		 jne	 SHORT $LN4@set_local_
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_local_child_succ@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
  0001f	83 e8 73	 sub	 eax, 115		; 00000073H
  00022	50		 push	 eax
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@KLLEOGEM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DACDFMLL@en?5?$CB?$DN?5child_succ@
  0002d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@set_local_:

; 72   : 
; 73   : switch (type)

  00032	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00035	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00038	83 7d b8 29	 cmp	 DWORD PTR tv70[ebp], 41	; 00000029H
  0003c	74 02		 je	 SHORT $LN5@set_local_
  0003e	eb 0b		 jmp	 SHORT $LN6@set_local_
$LN5@set_local_:

; 74   : {
; 75   : 	////////////////////////////////////////
; 76   : 
; 77   : 	#ifdef LIST_TYPE_AIRCREW_LINK
; 78   : 
; 79   : 	case LIST_TYPE_AIRCREW:
; 80   : 	{
; 81   : 		raw->aircrew_link.child_succ = child_succ;
; 82   : 
; 83   : 		break;
; 84   : 	}
; 85   : 
; 86   : 	#endif
; 87   : 
; 88   : 	////////////////////////////////////////
; 89   : 
; 90   : 	#ifdef LIST_TYPE_ASSIGNED_TASK_LINK
; 91   : 
; 92   : 	case LIST_TYPE_ASSIGNED_TASK:
; 93   : 	{
; 94   : 		raw->task_link.child_succ = child_succ;
; 95   : 
; 96   : 		break;
; 97   : 	}
; 98   : 
; 99   : 	#endif
; 100  : 
; 101  : 	////////////////////////////////////////
; 102  : 
; 103  : 	#ifdef LIST_TYPE_CAMPAIGN_OBJECTIVE_LINK
; 104  : 
; 105  : 	case LIST_TYPE_CAMPAIGN_OBJECTIVE:
; 106  : 	{
; 107  : 		raw->campaign_objective_link.child_succ = child_succ;
; 108  : 
; 109  : 		break;
; 110  : 	}
; 111  : 
; 112  : 	#endif
; 113  : 
; 114  : 	////////////////////////////////////////
; 115  : 
; 116  : 	#ifdef LIST_TYPE_CARGO_LINK
; 117  : 
; 118  : 	case LIST_TYPE_CARGO:
; 119  : 	{
; 120  : 		raw->cargo_link.child_succ = child_succ;
; 121  : 
; 122  : 		break;
; 123  : 	}
; 124  : 
; 125  : 	#endif
; 126  : 
; 127  : 	////////////////////////////////////////
; 128  : 
; 129  : 	#ifdef LIST_TYPE_CITY_BUILDING_LINK
; 130  : 
; 131  : 	case LIST_TYPE_CITY_BUILDING:
; 132  : 	{
; 133  : 		raw->city_building_link.child_succ = child_succ;
; 134  : 
; 135  : 		break;
; 136  : 	}
; 137  : 
; 138  : 	#endif
; 139  : 
; 140  : 	////////////////////////////////////////
; 141  : 
; 142  : 	#ifdef LIST_TYPE_COMPLETED_TASK_LINK
; 143  : 
; 144  : 	case LIST_TYPE_COMPLETED_TASK:
; 145  : 	{
; 146  : 		raw->task_link.child_succ = child_succ;
; 147  : 
; 148  : 		break;
; 149  : 	}
; 150  : 
; 151  : 	#endif
; 152  : 
; 153  : 	////////////////////////////////////////
; 154  : 
; 155  : 	#ifdef LIST_TYPE_CURRENT_WAYPOINT_LINK
; 156  : 
; 157  : 	case LIST_TYPE_CURRENT_WAYPOINT:
; 158  : 	{
; 159  : 		raw->current_waypoint_link.child_succ = child_succ;
; 160  : 
; 161  : 		break;
; 162  : 	}
; 163  : 
; 164  : 	#endif
; 165  : 
; 166  : 	////////////////////////////////////////
; 167  : 
; 168  : 
; 169  : 	// Jabbewock 031107 Designated targets
; 170  : 		
; 171  : 	#ifdef LIST_TYPE_DESIGNATED_TARGET_LINK
; 172  : 
; 173  : 	case LIST_TYPE_DESIGNATED_TARGET:
; 174  : 	{
; 175  : 		raw->designated_target_link.child_succ = child_succ;
; 176  : 
; 177  : 		break;
; 178  : 	}
; 179  : 
; 180  : 	#endif
; 181  : 
; 182  : 	// Jabbewock 031107 ends
; 183  : 
; 184  : 	#ifdef LIST_TYPE_DIVISION_LINK
; 185  : 
; 186  : 	case LIST_TYPE_DIVISION:
; 187  : 	{
; 188  : 		raw->division_link.child_succ = child_succ;
; 189  : 
; 190  : 		break;
; 191  : 	}
; 192  : 
; 193  : 	#endif
; 194  : 
; 195  : 	////////////////////////////////////////
; 196  : 
; 197  : 	#ifdef LIST_TYPE_DIVISION_HEADQUARTERS_LINK
; 198  : 
; 199  : 	case LIST_TYPE_DIVISION_HEADQUARTERS:
; 200  : 	{
; 201  : 		raw->division_headquarters_link.child_succ = child_succ;
; 202  : 
; 203  : 		break;
; 204  : 	}
; 205  : 
; 206  : 	#endif
; 207  : 
; 208  : 	////////////////////////////////////////
; 209  : 
; 210  : 	#ifdef LIST_TYPE_FOLLOWER_LINK
; 211  : 
; 212  : 	case LIST_TYPE_FOLLOWER:
; 213  : 	{
; 214  : 		raw->follower_link.child_succ = child_succ;
; 215  : 
; 216  : 		break;
; 217  : 	}
; 218  : 
; 219  : 	#endif
; 220  : 
; 221  : 	////////////////////////////////////////
; 222  : 
; 223  : 	#ifdef LIST_TYPE_FORCE_LINK
; 224  : 
; 225  : 	case LIST_TYPE_FORCE:
; 226  : 	{
; 227  : 		raw->force_link.child_succ = child_succ;
; 228  : 
; 229  : 		break;
; 230  : 	}
; 231  : 
; 232  : 	#endif
; 233  : 
; 234  : 	////////////////////////////////////////
; 235  : 
; 236  : 	#ifdef LIST_TYPE_GROUP_LINK
; 237  : 
; 238  : 	case LIST_TYPE_BUILDING_GROUP:
; 239  : 	case LIST_TYPE_INDEPENDENT_GROUP:
; 240  : 	case LIST_TYPE_KEYSITE_GROUP:
; 241  : 	{
; 242  : 		raw->group_link.child_succ = child_succ;
; 243  : 
; 244  : 		break;
; 245  : 	}
; 246  : 
; 247  : 	#endif
; 248  : 
; 249  : 	////////////////////////////////////////
; 250  : 
; 251  : 	#ifdef LIST_TYPE_GUIDE_LINK
; 252  : 
; 253  : 	case LIST_TYPE_GUIDE:
; 254  : 	{
; 255  : 		raw->guide_link.child_succ = child_succ;
; 256  : 
; 257  : 		break;
; 258  : 	}
; 259  : 
; 260  : 	#endif
; 261  : 
; 262  : 	////////////////////////////////////////
; 263  : 
; 264  : 	#ifdef LIST_TYPE_GUIDE_STACK_LINK
; 265  : 
; 266  : 	case LIST_TYPE_GUIDE_STACK:
; 267  : 	{
; 268  : 		raw->guide_stack_link.child_succ = child_succ;
; 269  : 
; 270  : 		break;
; 271  : 	}
; 272  : 
; 273  : 	#endif
; 274  : 
; 275  : 	////////////////////////////////////////
; 276  : 
; 277  : 	#ifdef LIST_TYPE_GUNSHIP_TARGET_LINK
; 278  : 
; 279  : 	case LIST_TYPE_GUNSHIP_TARGET:
; 280  : 	{
; 281  : 		raw->gunship_target_link.child_succ = child_succ;
; 282  : 
; 283  : 		break;
; 284  : 	}
; 285  : 
; 286  : 	#endif
; 287  : 
; 288  : 	////////////////////////////////////////
; 289  : 
; 290  : 	#ifdef LIST_TYPE_HIERARCHY_LINK
; 291  : 
; 292  : 	case LIST_TYPE_HIERARCHY:
; 293  : 	{
; 294  : 		raw->hierarchy_link.child_succ = child_succ;
; 295  : 
; 296  : 		break;
; 297  : 	}
; 298  : 
; 299  : 	#endif
; 300  : 
; 301  : 	////////////////////////////////////////
; 302  : 
; 303  : 	#ifdef LIST_TYPE_KEYSITE_FORCE_LINK
; 304  : 
; 305  : 	case LIST_TYPE_KEYSITE_FORCE:
; 306  : 	{
; 307  : 		raw->keysite_force_link.child_succ = child_succ;
; 308  : 
; 309  : 		break;
; 310  : 	}
; 311  : 
; 312  : 	#endif
; 313  : 
; 314  : 	////////////////////////////////////////
; 315  : 
; 316  : 	#ifdef LIST_TYPE_LAUNCHED_WEAPON_LINK
; 317  : 
; 318  : 	case LIST_TYPE_LAUNCHED_WEAPON:
; 319  : 	{
; 320  : 		raw->launched_weapon_link.child_succ = child_succ;
; 321  : 
; 322  : 		break;
; 323  : 	}
; 324  : 
; 325  : 	#endif
; 326  : 
; 327  : 	////////////////////////////////////////
; 328  : 
; 329  : 	#ifdef LIST_TYPE_LANDING_SITE_LINK
; 330  : 
; 331  : 	case LIST_TYPE_LANDING_SITE:
; 332  : 	{
; 333  : 		raw->landing_site_link.child_succ = child_succ;
; 334  : 
; 335  : 		break;
; 336  : 	}
; 337  : 
; 338  : 	#endif
; 339  : 
; 340  : 	////////////////////////////////////////
; 341  : 
; 342  : 	#ifdef LIST_TYPE_MEMBER_LINK
; 343  : 
; 344  : 	case LIST_TYPE_MEMBER:
; 345  : 	{
; 346  : 		raw->member_link.child_succ = child_succ;
; 347  : 
; 348  : 		break;
; 349  : 	}
; 350  : 
; 351  : 	#endif
; 352  : 
; 353  : 	////////////////////////////////////////
; 354  : 
; 355  : 	#ifdef LIST_TYPE_MOVEMENT_DEPENDENT_LINK
; 356  : 
; 357  : 	case LIST_TYPE_MOVEMENT_DEPENDENT:
; 358  : 	{
; 359  : 		raw->movement_dependent_link.child_succ = child_succ;
; 360  : 
; 361  : 		break;
; 362  : 	}
; 363  : 
; 364  : 	#endif
; 365  : 
; 366  : 	////////////////////////////////////////
; 367  : 
; 368  : 	#ifdef LIST_TYPE_PADLOCK_LINK
; 369  : 
; 370  : 	case LIST_TYPE_PADLOCK:
; 371  : 	{
; 372  : 		raw->padlock_link.child_succ = child_succ;
; 373  : 
; 374  : 		break;
; 375  : 	}
; 376  : 
; 377  : 	#endif
; 378  : 
; 379  : 	////////////////////////////////////////
; 380  : 
; 381  : 	#ifdef LIST_TYPE_PILOT_LINK
; 382  : 
; 383  : 	case LIST_TYPE_PILOT:
; 384  : 	{
; 385  : 		raw->pilot_link.child_succ = child_succ;
; 386  : 
; 387  : 		break;
; 388  : 	}
; 389  : 
; 390  : 	#endif
; 391  : 
; 392  : 	////////////////////////////////////////
; 393  : 
; 394  : 	#ifdef LIST_TYPE_PILOT_LOCK_LINK
; 395  : 
; 396  : 	case LIST_TYPE_PILOT_LOCK:
; 397  : 	{
; 398  : 		raw->pilot_lock_link.child_succ = child_succ;
; 399  : 
; 400  : 		break;
; 401  : 	}
; 402  : 
; 403  : 	#endif
; 404  : 
; 405  : 	////////////////////////////////////////
; 406  : 
; 407  : 	#ifdef LIST_TYPE_PLAYER_TASK_LINK
; 408  : 
; 409  : 	case LIST_TYPE_PLAYER_TASK:
; 410  : 	{
; 411  : 		raw->player_task_link.child_succ = child_succ;
; 412  : 
; 413  : 		break;
; 414  : 	}
; 415  : 
; 416  : 	#endif
; 417  : 
; 418  : 	////////////////////////////////////////
; 419  : 
; 420  : 	#ifdef LIST_TYPE_REGEN_LINK
; 421  : 
; 422  : 	case LIST_TYPE_REGEN:
; 423  : 	{
; 424  : 		raw->regen_link.child_succ = child_succ;
; 425  : 
; 426  : 		break;
; 427  : 	}
; 428  : 
; 429  : 	#endif
; 430  : 
; 431  : 	////////////////////////////////////////
; 432  : 
; 433  : 	#ifdef LIST_TYPE_REGISTRY_LINK
; 434  : 
; 435  : 	case LIST_TYPE_AIR_REGISTRY:
; 436  : 	case LIST_TYPE_GROUND_REGISTRY:
; 437  : 	case LIST_TYPE_SEA_REGISTRY:
; 438  : 	{
; 439  : 		raw->registry_link.child_succ = child_succ;
; 440  : 
; 441  : 		break;
; 442  : 	}
; 443  : 
; 444  : 	#endif
; 445  : 
; 446  : 	////////////////////////////////////////
; 447  : 
; 448  : 	#ifdef LIST_TYPE_SECTOR_LINK
; 449  : 
; 450  : 	case LIST_TYPE_SECTOR:
; 451  : 	{
; 452  : 		raw->sector_link.child_succ = child_succ;
; 453  : 
; 454  : 		break;
; 455  : 	}
; 456  : 
; 457  : 	#endif
; 458  : 
; 459  : 	////////////////////////////////////////
; 460  : 
; 461  : 	#ifdef LIST_TYPE_SECTOR_TASK_LINK
; 462  : 
; 463  : 	case LIST_TYPE_SECTOR_TASK:
; 464  : 	{
; 465  : 		raw->sector_task_link.child_succ = child_succ;
; 466  : 
; 467  : 		break;
; 468  : 	}
; 469  : 
; 470  : 	#endif
; 471  : 
; 472  : 	////////////////////////////////////////
; 473  : 
; 474  : 	#ifdef LIST_TYPE_SEGMENT_LINK
; 475  : 
; 476  : 	case LIST_TYPE_SEGMENT:
; 477  : 	{
; 478  : 		raw->segment_link.child_succ = child_succ;
; 479  : 
; 480  : 		break;
; 481  : 	}
; 482  : 
; 483  : 	#endif
; 484  : 
; 485  : 	////////////////////////////////////////
; 486  : 
; 487  : 	#ifdef LIST_TYPE_SPECIAL_EFFECT_LINK
; 488  : 
; 489  : 	case LIST_TYPE_SPECIAL_EFFECT:
; 490  : 	{
; 491  : 		raw->special_effect_link.child_succ = child_succ;
; 492  : 
; 493  : 		break;
; 494  : 	}
; 495  : 
; 496  : 	#endif
; 497  : 
; 498  : 	////////////////////////////////////////
; 499  : 
; 500  : 	#ifdef LIST_TYPE_TAKEOFF_QUEUE_LINK
; 501  : 
; 502  : 	case LIST_TYPE_TAKEOFF_QUEUE:
; 503  : 	{
; 504  : 		raw->takeoff_queue_link.child_succ = child_succ;
; 505  : 
; 506  : 		break;
; 507  : 	}
; 508  : 
; 509  : 	#endif
; 510  : 
; 511  : 	////////////////////////////////////////
; 512  : 
; 513  : 	#ifdef LIST_TYPE_TARGET_LINK
; 514  : 
; 515  : 	case LIST_TYPE_TARGET:
; 516  : 	{
; 517  : 		raw->target_link.child_succ = child_succ;
; 518  : 
; 519  : 		break;
; 520  : 	}
; 521  : 
; 522  : 	#endif
; 523  : 
; 524  : 	////////////////////////////////////////
; 525  : 
; 526  : 	#ifdef LIST_TYPE_TASK_DEPENDENT_LINK
; 527  : 
; 528  : 	case LIST_TYPE_TASK_DEPENDENT:
; 529  : 	{
; 530  : 		raw->task_dependent_link.child_succ = child_succ;
; 531  : 
; 532  : 		break;
; 533  : 	}
; 534  : 
; 535  : 	#endif
; 536  : 
; 537  : 	////////////////////////////////////////
; 538  : 
; 539  : 	#ifdef LIST_TYPE_UNASSIGNED_TASK_LINK
; 540  : 
; 541  : 	case LIST_TYPE_UNASSIGNED_TASK:
; 542  : 	{
; 543  : 		raw->task_link.child_succ = child_succ;
; 544  : 
; 545  : 		break;
; 546  : 	}
; 547  : 
; 548  : 	#endif
; 549  : 
; 550  : 	////////////////////////////////////////
; 551  : 
; 552  : 	#ifdef LIST_TYPE_UPDATE_LINK
; 553  : 
; 554  : 	case LIST_TYPE_UPDATE:
; 555  : 	{
; 556  : 		raw->update_link.child_succ = child_succ;

  00040	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00043	8b 4d 10	 mov	 ecx, DWORD PTR _child_succ$[ebp]
  00046	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 557  : 
; 558  : 		break;

  00049	eb 78		 jmp	 SHORT $LN1@set_local_
$LN6@set_local_:

; 559  : 	}
; 560  : 
; 561  : 	#endif
; 562  : 
; 563  : 	////////////////////////////////////////
; 564  : 
; 565  : 	#ifdef LIST_TYPE_VIEW_LINK
; 566  : 
; 567  : 	case LIST_TYPE_VIEW:
; 568  : 	{
; 569  : 		raw->view_link.child_succ = child_succ;
; 570  : 
; 571  : 		break;
; 572  : 	}
; 573  : 
; 574  : 	#endif
; 575  : 
; 576  : 	////////////////////////////////////////
; 577  : 
; 578  : 	#ifdef LIST_TYPE_VIEW_WEAPON_LINK
; 579  : 
; 580  : 	case LIST_TYPE_VIEW_WEAPON:
; 581  : 	{
; 582  : 		raw->view_weapon_link.child_succ = child_succ;
; 583  : 
; 584  : 		break;
; 585  : 	}
; 586  : 
; 587  : 	#endif
; 588  : 
; 589  : 	////////////////////////////////////////
; 590  : 
; 591  : 	#ifdef LIST_TYPE_WAYPOINT_LINK
; 592  : 
; 593  : 	case LIST_TYPE_WAYPOINT:
; 594  : 	{
; 595  : 		raw->waypoint_link.child_succ = child_succ;
; 596  : 
; 597  : 		break;
; 598  : 	}
; 599  : 
; 600  : 	#endif
; 601  : 
; 602  : 	////////////////////////////////////////
; 603  : 
; 604  : 	default:
; 605  : 	{
; 606  : 		debug_fatal_invalid_list_type (en, type);

  0004b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0004f	74 0a		 je	 SHORT $LN8@set_local_
  00051	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d b8	 mov	 DWORD PTR tv89[ebp], ecx
  00059	eb 24		 jmp	 SHORT $LN9@set_local_
$LN8@set_local_:
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_local_child_succ@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
  00061	81 c2 a4 01 00
	00		 add	 edx, 420		; 000001a4H
  00067	52		 push	 edx
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@KLLEOGEM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00078	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN9@set_local_:
  0007f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??set_local_child_succ@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
  00085	81 c1 a4 01 00
	00		 add	 ecx, 420		; 000001a4H
  0008b	51		 push	 ecx
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@KLLEOGEM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	8b 55 0c	 mov	 edx, DWORD PTR _type$[ebp]
  00094	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?list_type_database@@3PAULIST_TYPE_DATA@@A[edx*8]
  0009b	50		 push	 eax
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0009f	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  000a5	c1 f9 04	 sar	 ecx, 4
  000a8	51		 push	 ecx
  000a9	6b 55 b8 0c	 imul	 edx, DWORD PTR tv89[ebp], 12
  000ad	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[edx]
  000b3	50		 push	 eax
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?debug_fatal_invalid_list_type_message@@3PBDB ; debug_fatal_invalid_list_type_message
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000c0	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@set_local_:
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c

; 193  : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 0c 00	 ret	 12			; 0000000cH
?set_local_child_succ@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z ENDP ; set_local_child_succ
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\get_prnt.h
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
;	COMDAT ?get_local_parent@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z
_TEXT	SEGMENT
tv84 = -76						; size = 4
tv65 = -76						; size = 4
_parent$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
?get_local_parent@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z PROC ; get_local_parent, COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 164  : 	crater
; 165  : 		*raw;
; 166  : 
; 167  : 	entity
; 168  : 		*parent;
; 169  : 
; 170  : 	raw = (crater *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\get_prnt.h

; 67   : switch (type)

  00012	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00015	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00018	83 7d b4 29	 cmp	 DWORD PTR tv65[ebp], 41	; 00000029H
  0001c	74 02		 je	 SHORT $LN4@get_local_
  0001e	eb 0b		 jmp	 SHORT $LN5@get_local_
$LN4@get_local_:

; 68   : {
; 69   : 	////////////////////////////////////////
; 70   : 
; 71   : 	#ifdef LIST_TYPE_AIRCREW_LINK
; 72   : 
; 73   : 	case LIST_TYPE_AIRCREW:
; 74   : 	{
; 75   : 		parent = raw->aircrew_link.parent;
; 76   : 
; 77   : 		break;
; 78   : 	}
; 79   : 
; 80   : 	#endif
; 81   : 
; 82   : 	////////////////////////////////////////
; 83   : 
; 84   : 	#ifdef LIST_TYPE_ASSIGNED_TASK_LINK
; 85   : 
; 86   : 	case LIST_TYPE_ASSIGNED_TASK:
; 87   : 	{
; 88   : 		parent = raw->task_link.parent;
; 89   : 
; 90   : 		break;
; 91   : 	}
; 92   : 
; 93   : 	#endif
; 94   : 
; 95   : 	////////////////////////////////////////
; 96   : 
; 97   : 	#ifdef LIST_TYPE_CAMPAIGN_OBJECTIVE_LINK
; 98   : 
; 99   : 	case LIST_TYPE_CAMPAIGN_OBJECTIVE:
; 100  : 	{
; 101  : 		parent = raw->campaign_objective_link.parent;
; 102  : 
; 103  : 		break;
; 104  : 	}
; 105  : 
; 106  : 	#endif
; 107  : 
; 108  : 	////////////////////////////////////////
; 109  : 
; 110  : 	#ifdef LIST_TYPE_CARGO_LINK
; 111  : 
; 112  : 	case LIST_TYPE_CARGO:
; 113  : 	{
; 114  : 		parent = raw->cargo_link.parent;
; 115  : 
; 116  : 		break;
; 117  : 	}
; 118  : 
; 119  : 	#endif
; 120  : 
; 121  : 	////////////////////////////////////////
; 122  : 
; 123  : 	#ifdef LIST_TYPE_CITY_BUILDING_LINK
; 124  : 
; 125  : 	case LIST_TYPE_CITY_BUILDING:
; 126  : 	{
; 127  : 		parent = raw->city_building_link.parent;
; 128  : 
; 129  : 		break;
; 130  : 	}
; 131  : 
; 132  : 	#endif
; 133  : 
; 134  : 	////////////////////////////////////////
; 135  : 
; 136  : 	#ifdef LIST_TYPE_COMPLETED_TASK_LINK
; 137  : 
; 138  : 	case LIST_TYPE_COMPLETED_TASK:
; 139  : 	{
; 140  : 		parent = raw->task_link.parent;
; 141  : 
; 142  : 		break;
; 143  : 	}
; 144  : 
; 145  : 	#endif
; 146  : 
; 147  : 	////////////////////////////////////////
; 148  : 
; 149  : 	#ifdef LIST_TYPE_CURRENT_WAYPOINT_LINK
; 150  : 
; 151  : 	case LIST_TYPE_CURRENT_WAYPOINT:
; 152  : 	{
; 153  : 		parent = raw->current_waypoint_link.parent;
; 154  : 
; 155  : 		break;
; 156  : 	}
; 157  : 
; 158  : 	#endif
; 159  : 
; 160  : 	////////////////////////////////////////
; 161  : 
; 162  : 	// Jabbewock 031107 Designated targets
; 163  : 	
; 164  : 	#ifdef LIST_TYPE_DESIGNATED_TARGET_LINK
; 165  : 
; 166  : 	case LIST_TYPE_DESIGNATED_TARGET:
; 167  : 	{
; 168  : 		parent = raw->designated_target_link.parent;
; 169  : 
; 170  : 		break;
; 171  : 	}
; 172  : 
; 173  : 	#endif
; 174  : 
; 175  : 	// Jabbewock 031107 ends
; 176  : 
; 177  : 	#ifdef LIST_TYPE_DIVISION_LINK
; 178  : 
; 179  : 	case LIST_TYPE_DIVISION:
; 180  : 	{
; 181  : 		parent = raw->division_link.parent;
; 182  : 
; 183  : 		break;
; 184  : 	}
; 185  : 
; 186  : 	#endif
; 187  : 	
; 188  : 	////////////////////////////////////////
; 189  : 
; 190  : 	#ifdef LIST_TYPE_DIVISION_HEADQUARTERS_LINK
; 191  : 
; 192  : 	case LIST_TYPE_DIVISION_HEADQUARTERS:
; 193  : 	{
; 194  : 		parent = raw->division_headquarters_link.parent;
; 195  : 
; 196  : 		break;
; 197  : 	}
; 198  : 
; 199  : 	#endif
; 200  : 
; 201  : 	////////////////////////////////////////
; 202  : 
; 203  : 	#ifdef LIST_TYPE_FOLLOWER_LINK
; 204  : 
; 205  : 	case LIST_TYPE_FOLLOWER:
; 206  : 	{
; 207  : 		parent = raw->follower_link.parent;
; 208  : 
; 209  : 		break;
; 210  : 	}
; 211  : 
; 212  : 	#endif
; 213  : 
; 214  : 	////////////////////////////////////////
; 215  : 
; 216  : 	#ifdef LIST_TYPE_FORCE_LINK
; 217  : 
; 218  : 	case LIST_TYPE_FORCE:
; 219  : 	{
; 220  : 		parent = raw->force_link.parent;
; 221  : 
; 222  : 		break;
; 223  : 	}
; 224  : 
; 225  : 	#endif
; 226  : 
; 227  : 	////////////////////////////////////////
; 228  : 
; 229  : 	#ifdef LIST_TYPE_GROUP_LINK
; 230  : 
; 231  : 	case LIST_TYPE_BUILDING_GROUP:
; 232  : 	case LIST_TYPE_INDEPENDENT_GROUP:
; 233  : 	case LIST_TYPE_KEYSITE_GROUP:
; 234  : 	{
; 235  : 		parent = raw->group_link.parent;
; 236  : 
; 237  : 		break;
; 238  : 	}
; 239  : 
; 240  : 	#endif
; 241  : 
; 242  : 	////////////////////////////////////////
; 243  : 
; 244  : 	#ifdef LIST_TYPE_GUIDE_LINK
; 245  : 
; 246  : 	case LIST_TYPE_GUIDE:
; 247  : 	{
; 248  : 		parent = raw->guide_link.parent;
; 249  : 
; 250  : 		break;
; 251  : 	}
; 252  : 
; 253  : 	#endif
; 254  : 
; 255  : 	////////////////////////////////////////
; 256  : 
; 257  : 	#ifdef LIST_TYPE_GUIDE_STACK_LINK
; 258  : 
; 259  : 	case LIST_TYPE_GUIDE_STACK:
; 260  : 	{
; 261  : 		parent = raw->guide_stack_link.parent;
; 262  : 
; 263  : 		break;
; 264  : 	}
; 265  : 
; 266  : 	#endif
; 267  : 
; 268  : 	////////////////////////////////////////
; 269  : 
; 270  : 	#ifdef LIST_TYPE_GUNSHIP_TARGET_LINK
; 271  : 
; 272  : 	case LIST_TYPE_GUNSHIP_TARGET:
; 273  : 	{
; 274  : 		parent = raw->gunship_target_link.parent;
; 275  : 
; 276  : 		break;
; 277  : 	}
; 278  : 
; 279  : 	#endif
; 280  : 
; 281  : 	////////////////////////////////////////
; 282  : 
; 283  : 	#ifdef LIST_TYPE_HIERARCHY_LINK
; 284  : 
; 285  : 	case LIST_TYPE_HIERARCHY:
; 286  : 	{
; 287  : 		parent = raw->hierarchy_link.parent;
; 288  : 
; 289  : 		break;
; 290  : 	}
; 291  : 
; 292  : 	#endif
; 293  : 
; 294  : 	////////////////////////////////////////
; 295  : 
; 296  : 	#ifdef LIST_TYPE_KEYSITE_FORCE_LINK
; 297  : 
; 298  : 	case LIST_TYPE_KEYSITE_FORCE:
; 299  : 	{
; 300  : 		parent = raw->keysite_force_link.parent;
; 301  : 
; 302  : 		break;
; 303  : 	}
; 304  : 
; 305  : 	#endif
; 306  : 
; 307  : 	////////////////////////////////////////
; 308  : 
; 309  : 	#ifdef LIST_TYPE_LAUNCHED_WEAPON_LINK
; 310  : 
; 311  : 	case LIST_TYPE_LAUNCHED_WEAPON:
; 312  : 	{
; 313  : 		parent = raw->launched_weapon_link.parent;
; 314  : 
; 315  : 		break;
; 316  : 	}
; 317  : 
; 318  : 	#endif
; 319  : 
; 320  : 	////////////////////////////////////////
; 321  : 
; 322  : 	#ifdef LIST_TYPE_LANDING_SITE_LINK
; 323  : 
; 324  : 	case LIST_TYPE_LANDING_SITE:
; 325  : 	{
; 326  : 		parent = raw->landing_site_link.parent;
; 327  : 
; 328  : 		break;
; 329  : 	}
; 330  : 
; 331  : 	#endif
; 332  : 
; 333  : 	////////////////////////////////////////
; 334  : 
; 335  : 	#ifdef LIST_TYPE_MEMBER_LINK
; 336  : 
; 337  : 	case LIST_TYPE_MEMBER:
; 338  : 	{
; 339  : 		parent = raw->member_link.parent;
; 340  : 
; 341  : 		break;
; 342  : 	}
; 343  : 
; 344  : 	#endif
; 345  : 
; 346  : 	////////////////////////////////////////
; 347  : 
; 348  : 	#ifdef LIST_TYPE_MOVEMENT_DEPENDENT_LINK
; 349  : 
; 350  : 	case LIST_TYPE_MOVEMENT_DEPENDENT:
; 351  : 	{
; 352  : 		parent = raw->movement_dependent_link.parent;
; 353  : 
; 354  : 		break;
; 355  : 	}
; 356  : 
; 357  : 	#endif
; 358  : 
; 359  : 	////////////////////////////////////////
; 360  : 
; 361  : 	#ifdef LIST_TYPE_PADLOCK_LINK
; 362  : 
; 363  : 	case LIST_TYPE_PADLOCK:
; 364  : 	{
; 365  : 		parent = raw->padlock_link.parent;
; 366  : 
; 367  : 		break;
; 368  : 	}
; 369  : 
; 370  : 	#endif
; 371  : 
; 372  : 	////////////////////////////////////////
; 373  : 
; 374  : 	#ifdef LIST_TYPE_PILOT_LINK
; 375  : 
; 376  : 	case LIST_TYPE_PILOT:
; 377  : 	{
; 378  : 		parent = raw->pilot_link.parent;
; 379  : 
; 380  : 		break;
; 381  : 	}
; 382  : 
; 383  : 	#endif
; 384  : 
; 385  : 	////////////////////////////////////////
; 386  : 
; 387  : 	#ifdef LIST_TYPE_PILOT_LOCK_LINK
; 388  : 
; 389  : 	case LIST_TYPE_PILOT_LOCK:
; 390  : 	{
; 391  : 		parent = raw->pilot_lock_link.parent;
; 392  : 
; 393  : 		break;
; 394  : 	}
; 395  : 
; 396  : 	#endif
; 397  : 
; 398  : 	////////////////////////////////////////
; 399  : 
; 400  : 	#ifdef LIST_TYPE_PLAYER_TASK_LINK
; 401  : 
; 402  : 	case LIST_TYPE_PLAYER_TASK:
; 403  : 	{
; 404  : 		parent = raw->player_task_link.parent;
; 405  : 
; 406  : 		break;
; 407  : 	}
; 408  : 
; 409  : 	#endif
; 410  : 
; 411  : 	////////////////////////////////////////
; 412  : 
; 413  : 	#ifdef LIST_TYPE_REGEN_LINK
; 414  : 
; 415  : 	case LIST_TYPE_REGEN:
; 416  : 	{
; 417  : 		parent = raw->regen_link.parent;
; 418  : 
; 419  : 		break;
; 420  : 	}
; 421  : 
; 422  : 	#endif
; 423  : 
; 424  : 	////////////////////////////////////////
; 425  : 
; 426  : 	#ifdef LIST_TYPE_REGISTRY_LINK
; 427  : 
; 428  : 	case LIST_TYPE_AIR_REGISTRY:
; 429  : 	case LIST_TYPE_GROUND_REGISTRY:
; 430  : 	case LIST_TYPE_SEA_REGISTRY:
; 431  : 	{
; 432  : 		parent = raw->registry_link.parent;
; 433  : 
; 434  : 		break;
; 435  : 	}
; 436  : 
; 437  : 	#endif
; 438  : 
; 439  : 	////////////////////////////////////////
; 440  : 
; 441  : 	#ifdef LIST_TYPE_SECTOR_LINK
; 442  : 
; 443  : 	case LIST_TYPE_SECTOR:
; 444  : 	{
; 445  : 		parent = raw->sector_link.parent;
; 446  : 
; 447  : 		break;
; 448  : 	}
; 449  : 
; 450  : 	#endif
; 451  : 
; 452  : 	////////////////////////////////////////
; 453  : 
; 454  : 	#ifdef LIST_TYPE_SECTOR_TASK_LINK
; 455  : 
; 456  : 	case LIST_TYPE_SECTOR_TASK:
; 457  : 	{
; 458  : 		parent = raw->sector_task_link.parent;
; 459  : 
; 460  : 		break;
; 461  : 	}
; 462  : 
; 463  : 	#endif
; 464  : 
; 465  : 	////////////////////////////////////////
; 466  : 
; 467  : 	#ifdef LIST_TYPE_SEGMENT_LINK
; 468  : 
; 469  : 	case LIST_TYPE_SEGMENT:
; 470  : 	{
; 471  : 		parent = raw->segment_link.parent;
; 472  : 
; 473  : 		break;
; 474  : 	}
; 475  : 
; 476  : 	#endif
; 477  : 
; 478  : 	////////////////////////////////////////
; 479  : 
; 480  : 	#ifdef LIST_TYPE_SPECIAL_EFFECT_LINK
; 481  : 
; 482  : 	case LIST_TYPE_SPECIAL_EFFECT:
; 483  : 	{
; 484  : 		parent = raw->special_effect_link.parent;
; 485  : 
; 486  : 		break;
; 487  : 	}
; 488  : 
; 489  : 	#endif
; 490  : 
; 491  : 	////////////////////////////////////////
; 492  : 
; 493  : 	#ifdef LIST_TYPE_TAKEOFF_QUEUE_LINK
; 494  : 
; 495  : 	case LIST_TYPE_TAKEOFF_QUEUE:
; 496  : 	{
; 497  : 		parent = raw->takeoff_queue_link.parent;
; 498  : 
; 499  : 		break;
; 500  : 	}
; 501  : 
; 502  : 	#endif
; 503  : 
; 504  : 	////////////////////////////////////////
; 505  : 
; 506  : 	#ifdef LIST_TYPE_TARGET_LINK
; 507  : 
; 508  : 	case LIST_TYPE_TARGET:
; 509  : 	{
; 510  : 		parent = raw->target_link.parent;
; 511  : 
; 512  : 		break;
; 513  : 	}
; 514  : 
; 515  : 	#endif
; 516  : 
; 517  : 	////////////////////////////////////////
; 518  : 
; 519  : 	#ifdef LIST_TYPE_TASK_DEPENDENT_LINK
; 520  : 
; 521  : 	case LIST_TYPE_TASK_DEPENDENT:
; 522  : 	{
; 523  : 		parent = raw->task_dependent_link.parent;
; 524  : 
; 525  : 		break;
; 526  : 	}
; 527  : 
; 528  : 	#endif
; 529  : 
; 530  : 	////////////////////////////////////////
; 531  : 
; 532  : 	#ifdef LIST_TYPE_UNASSIGNED_TASK_LINK
; 533  : 
; 534  : 	case LIST_TYPE_UNASSIGNED_TASK:
; 535  : 	{
; 536  : 		parent = raw->task_link.parent;
; 537  : 
; 538  : 		break;
; 539  : 	}
; 540  : 
; 541  : 	#endif
; 542  : 
; 543  : 	////////////////////////////////////////
; 544  : 
; 545  : 	#ifdef LIST_TYPE_UPDATE_LINK
; 546  : 
; 547  : 	case LIST_TYPE_UPDATE:
; 548  : 	{
; 549  : 		parent = raw->update_link.parent;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00023	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00026	89 4d f8	 mov	 DWORD PTR _parent$[ebp], ecx

; 550  : 
; 551  : 		break;

  00029	eb 7f		 jmp	 SHORT $LN2@get_local_
$LN5@get_local_:

; 552  : 	}
; 553  : 
; 554  : 	#endif
; 555  : 
; 556  : 	////////////////////////////////////////
; 557  : 
; 558  : 	#ifdef LIST_TYPE_VIEW_LINK
; 559  : 
; 560  : 	case LIST_TYPE_VIEW:
; 561  : 	{
; 562  : 		parent = raw->view_link.parent;
; 563  : 
; 564  : 		break;
; 565  : 	}
; 566  : 
; 567  : 	#endif
; 568  : 
; 569  : 	////////////////////////////////////////
; 570  : 
; 571  : 	#ifdef LIST_TYPE_VIEW_WEAPON_LINK
; 572  : 
; 573  : 	case LIST_TYPE_VIEW_WEAPON:
; 574  : 	{
; 575  : 		parent = raw->view_weapon_link.parent;
; 576  : 
; 577  : 		break;
; 578  : 	}
; 579  : 
; 580  : 	#endif
; 581  : 
; 582  : 	////////////////////////////////////////
; 583  : 
; 584  : 	#ifdef LIST_TYPE_WAYPOINT_LINK
; 585  : 
; 586  : 	case LIST_TYPE_WAYPOINT:
; 587  : 	{
; 588  : 		parent = raw->waypoint_link.parent;
; 589  : 
; 590  : 		break;
; 591  : 	}
; 592  : 
; 593  : 	#endif
; 594  : 
; 595  : 	////////////////////////////////////////
; 596  : 
; 597  : 	default:
; 598  : 	{
; 599  : 		debug_fatal_invalid_list_type (en, type);

  0002b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002f	74 0a		 je	 SHORT $LN8@get_local_
  00031	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	89 4d b4	 mov	 DWORD PTR tv84[ebp], ecx
  00039	eb 24		 jmp	 SHORT $LN9@get_local_
$LN8@get_local_:
  0003b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_parent@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
  00041	81 c2 b4 01 00
	00		 add	 edx, 436		; 000001b4H
  00047	52		 push	 edx
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@KMCINALH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00058	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN9@get_local_:
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??get_local_parent@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
  00065	81 c1 b4 01 00
	00		 add	 ecx, 436		; 000001b4H
  0006b	51		 push	 ecx
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@KMCINALH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00071	8b 55 0c	 mov	 edx, DWORD PTR _type$[ebp]
  00074	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?list_type_database@@3PAULIST_TYPE_DATA@@A[edx*8]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0007f	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  00085	c1 f9 04	 sar	 ecx, 4
  00088	51		 push	 ecx
  00089	6b 55 b4 0c	 imul	 edx, DWORD PTR tv84[ebp], 12
  0008d	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[edx]
  00093	50		 push	 eax
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?debug_fatal_invalid_list_type_message@@3PBDB ; debug_fatal_invalid_list_type_message
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000a0	83 c4 18	 add	 esp, 24			; 00000018H

; 600  : 
; 601  : 		parent = NULL;

  000a3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _parent$[ebp], 0
$LN2@get_local_:

; 602  : 
; 603  : 		break;
; 604  : 	}
; 605  : 
; 606  : 	////////////////////////////////////////
; 607  : }
; 608  : 
; 609  : //
; 610  : // check list integrity
; 611  : //
; 612  : 
; 613  : ASSERT (en != parent);

  000aa	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ad	3b 45 f8	 cmp	 eax, DWORD PTR _parent$[ebp]
  000b0	75 1a		 jne	 SHORT $LN6@get_local_
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_parent@@YGPAUENTITY@@PAU2@W4LIST_TYPES@@@Z@4JA
  000b7	05 c2 01 00 00	 add	 eax, 450		; 000001c2H
  000bc	50		 push	 eax
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@KMCINALH@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ILAPCPFO@en?5?$CB?$DN?5parent@
  000c7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_local_:
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c

; 174  : 	return (parent);

  000cc	8b 45 f8	 mov	 eax, DWORD PTR _parent$[ebp]

; 175  : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 08 00	 ret	 8
?get_local_parent@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z ENDP ; get_local_parent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\set_prnt.h
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
;	COMDAT ?set_local_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z
_TEXT	SEGMENT
tv89 = -72						; size = 4
tv70 = -72						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_parent$ = 16						; size = 4
?set_local_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z PROC	; set_local_parent, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 146  : 	crater
; 147  : 		*raw;
; 148  : 
; 149  : 	raw = (crater *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\set_prnt.h

; 71   : ASSERT (en != parent);

  00012	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00015	3b 45 10	 cmp	 eax, DWORD PTR _parent$[ebp]
  00018	75 18		 jne	 SHORT $LN4@set_local_
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_local_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
  0001f	83 e8 4a	 sub	 eax, 74			; 0000004aH
  00022	50		 push	 eax
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@LCAHGHPO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ILAPCPFO@en?5?$CB?$DN?5parent@
  0002d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@set_local_:

; 72   : 
; 73   : switch (type)

  00032	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00035	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00038	83 7d b8 29	 cmp	 DWORD PTR tv70[ebp], 41	; 00000029H
  0003c	74 02		 je	 SHORT $LN5@set_local_
  0003e	eb 0b		 jmp	 SHORT $LN6@set_local_
$LN5@set_local_:

; 74   : {
; 75   : 	////////////////////////////////////////
; 76   : 
; 77   : 	#ifdef LIST_TYPE_AIRCREW_LINK
; 78   : 
; 79   : 	case LIST_TYPE_AIRCREW:
; 80   : 	{
; 81   : 		raw->aircrew_link.parent = parent;
; 82   : 
; 83   : 		break;
; 84   : 	}
; 85   : 
; 86   : 	#endif
; 87   : 
; 88   : 	////////////////////////////////////////
; 89   : 
; 90   : 	#ifdef LIST_TYPE_ASSIGNED_TASK_LINK
; 91   : 
; 92   : 	case LIST_TYPE_ASSIGNED_TASK:
; 93   : 	{
; 94   : 		raw->task_link.parent = parent;
; 95   : 
; 96   : 		break;
; 97   : 	}
; 98   : 
; 99   : 	#endif
; 100  : 
; 101  : 	////////////////////////////////////////
; 102  : 
; 103  : 	#ifdef LIST_TYPE_CAMPAIGN_OBJECTIVE_LINK
; 104  : 
; 105  : 	case LIST_TYPE_CAMPAIGN_OBJECTIVE:
; 106  : 	{
; 107  : 		raw->campaign_objective_link.parent = parent;
; 108  : 
; 109  : 		break;
; 110  : 	}
; 111  : 
; 112  : 	#endif
; 113  : 
; 114  : 	////////////////////////////////////////
; 115  : 
; 116  : 	#ifdef LIST_TYPE_CARGO_LINK
; 117  : 
; 118  : 	case LIST_TYPE_CARGO:
; 119  : 	{
; 120  : 		raw->cargo_link.parent = parent;
; 121  : 
; 122  : 		break;
; 123  : 	}
; 124  : 
; 125  : 	#endif
; 126  : 
; 127  : 	////////////////////////////////////////
; 128  : 
; 129  : 	#ifdef LIST_TYPE_CITY_BUILDING_LINK
; 130  : 
; 131  : 	case LIST_TYPE_CITY_BUILDING:
; 132  : 	{
; 133  : 		raw->city_building_link.parent = parent;
; 134  : 
; 135  : 		break;
; 136  : 	}
; 137  : 
; 138  : 	#endif
; 139  : 
; 140  : 	////////////////////////////////////////
; 141  : 
; 142  : 	#ifdef LIST_TYPE_COMPLETED_TASK_LINK
; 143  : 
; 144  : 	case LIST_TYPE_COMPLETED_TASK:
; 145  : 	{
; 146  : 		raw->task_link.parent = parent;
; 147  : 
; 148  : 		break;
; 149  : 	}
; 150  : 
; 151  : 	#endif
; 152  : 
; 153  : 	////////////////////////////////////////
; 154  : 
; 155  : 	#ifdef LIST_TYPE_CURRENT_WAYPOINT_LINK
; 156  : 
; 157  : 	case LIST_TYPE_CURRENT_WAYPOINT:
; 158  : 	{
; 159  : 		raw->current_waypoint_link.parent = parent;
; 160  : 
; 161  : 		break;
; 162  : 	}
; 163  : 
; 164  : 	#endif
; 165  : 
; 166  : 	////////////////////////////////////////
; 167  : 
; 168  : 
; 169  : 	// Jabbewock 031107 Designated targets
; 170  : 	
; 171  : 	#ifdef LIST_TYPE_DESIGNATED_TARGET_LINK
; 172  : 
; 173  : 	case LIST_TYPE_DESIGNATED_TARGET:
; 174  : 	{
; 175  : 		raw->designated_target_link.parent = parent;
; 176  : 
; 177  : 		break;
; 178  : 	}
; 179  : 
; 180  : 	#endif
; 181  : 	
; 182  : 	// Jabbewock 031107 ends
; 183  : 	
; 184  : 	#ifdef LIST_TYPE_DIVISION_LINK
; 185  : 
; 186  : 	case LIST_TYPE_DIVISION:
; 187  : 	{
; 188  : 		raw->division_link.parent = parent;
; 189  : 
; 190  : 		break;
; 191  : 	}
; 192  : 
; 193  : 	#endif
; 194  : 
; 195  : 	////////////////////////////////////////
; 196  : 
; 197  : 	#ifdef LIST_TYPE_DIVISION_HEADQUARTERS_LINK
; 198  : 
; 199  : 	case LIST_TYPE_DIVISION_HEADQUARTERS:
; 200  : 	{
; 201  : 		raw->division_headquarters_link.parent = parent;
; 202  : 
; 203  : 		break;
; 204  : 	}
; 205  : 
; 206  : 	#endif
; 207  : 
; 208  : 	////////////////////////////////////////
; 209  : 
; 210  : 	#ifdef LIST_TYPE_FOLLOWER_LINK
; 211  : 
; 212  : 	case LIST_TYPE_FOLLOWER:
; 213  : 	{
; 214  : 		raw->follower_link.parent = parent;
; 215  : 
; 216  : 		break;
; 217  : 	}
; 218  : 
; 219  : 	#endif
; 220  : 
; 221  : 	////////////////////////////////////////
; 222  : 
; 223  : 	#ifdef LIST_TYPE_FORCE_LINK
; 224  : 
; 225  : 	case LIST_TYPE_FORCE:
; 226  : 	{
; 227  : 		raw->force_link.parent = parent;
; 228  : 
; 229  : 		break;
; 230  : 	}
; 231  : 
; 232  : 	#endif
; 233  : 
; 234  : 	////////////////////////////////////////
; 235  : 
; 236  : 	#ifdef LIST_TYPE_GROUP_LINK
; 237  : 
; 238  : 	case LIST_TYPE_BUILDING_GROUP:
; 239  : 	case LIST_TYPE_INDEPENDENT_GROUP:
; 240  : 	case LIST_TYPE_KEYSITE_GROUP:
; 241  : 	{
; 242  : 		raw->group_link.parent = parent;
; 243  : 
; 244  : 		break;
; 245  : 	}
; 246  : 
; 247  : 	#endif
; 248  : 
; 249  : 	////////////////////////////////////////
; 250  : 
; 251  : 	#ifdef LIST_TYPE_GUIDE_LINK
; 252  : 
; 253  : 	case LIST_TYPE_GUIDE:
; 254  : 	{
; 255  : 		raw->guide_link.parent = parent;
; 256  : 
; 257  : 		break;
; 258  : 	}
; 259  : 
; 260  : 	#endif
; 261  : 
; 262  : 	////////////////////////////////////////
; 263  : 
; 264  : 	#ifdef LIST_TYPE_GUIDE_STACK_LINK
; 265  : 
; 266  : 	case LIST_TYPE_GUIDE_STACK:
; 267  : 	{
; 268  : 		raw->guide_stack_link.parent = parent;
; 269  : 
; 270  : 		break;
; 271  : 	}
; 272  : 
; 273  : 	#endif
; 274  : 
; 275  : 	////////////////////////////////////////
; 276  : 
; 277  : 	#ifdef LIST_TYPE_GUNSHIP_TARGET_LINK
; 278  : 
; 279  : 	case LIST_TYPE_GUNSHIP_TARGET:
; 280  : 	{
; 281  : 		raw->gunship_target_link.parent = parent;
; 282  : 
; 283  : 		break;
; 284  : 	}
; 285  : 
; 286  : 	#endif
; 287  : 
; 288  : 	////////////////////////////////////////
; 289  : 
; 290  : 	#ifdef LIST_TYPE_HIERARCHY_LINK
; 291  : 
; 292  : 	case LIST_TYPE_HIERARCHY:
; 293  : 	{
; 294  : 		raw->hierarchy_link.parent = parent;
; 295  : 
; 296  : 		break;
; 297  : 	}
; 298  : 
; 299  : 	#endif
; 300  : 
; 301  : 	////////////////////////////////////////
; 302  : 
; 303  : 	#ifdef LIST_TYPE_KEYSITE_FORCE_LINK
; 304  : 
; 305  : 	case LIST_TYPE_KEYSITE_FORCE:
; 306  : 	{
; 307  : 		raw->keysite_force_link.parent = parent;
; 308  : 
; 309  : 		break;
; 310  : 	}
; 311  : 
; 312  : 	#endif
; 313  : 
; 314  : 	////////////////////////////////////////
; 315  : 
; 316  : 	#ifdef LIST_TYPE_LAUNCHED_WEAPON_LINK
; 317  : 
; 318  : 	case LIST_TYPE_LAUNCHED_WEAPON:
; 319  : 	{
; 320  : 		raw->launched_weapon_link.parent = parent;
; 321  : 
; 322  : 		break;
; 323  : 	}
; 324  : 
; 325  : 	#endif
; 326  : 
; 327  : 	////////////////////////////////////////
; 328  : 
; 329  : 	#ifdef LIST_TYPE_LANDING_SITE_LINK
; 330  : 
; 331  : 	case LIST_TYPE_LANDING_SITE:
; 332  : 	{
; 333  : 		raw->landing_site_link.parent = parent;
; 334  : 
; 335  : 		break;
; 336  : 	}
; 337  : 
; 338  : 	#endif
; 339  : 
; 340  : 	////////////////////////////////////////
; 341  : 
; 342  : 	#ifdef LIST_TYPE_MEMBER_LINK
; 343  : 
; 344  : 	case LIST_TYPE_MEMBER:
; 345  : 	{
; 346  : 		raw->member_link.parent = parent;
; 347  : 
; 348  : 		break;
; 349  : 	}
; 350  : 
; 351  : 	#endif
; 352  : 
; 353  : 	////////////////////////////////////////
; 354  : 
; 355  : 	#ifdef LIST_TYPE_MOVEMENT_DEPENDENT_LINK
; 356  : 
; 357  : 	case LIST_TYPE_MOVEMENT_DEPENDENT:
; 358  : 	{
; 359  : 		raw->movement_dependent_link.parent = parent;
; 360  : 
; 361  : 		break;
; 362  : 	}
; 363  : 
; 364  : 	#endif
; 365  : 
; 366  : 	////////////////////////////////////////
; 367  : 
; 368  : 	#ifdef LIST_TYPE_PADLOCK_LINK
; 369  : 
; 370  : 	case LIST_TYPE_PADLOCK:
; 371  : 	{
; 372  : 		raw->padlock_link.parent = parent;
; 373  : 
; 374  : 		break;
; 375  : 	}
; 376  : 
; 377  : 	#endif
; 378  : 
; 379  : 	////////////////////////////////////////
; 380  : 
; 381  : 	#ifdef LIST_TYPE_PILOT_LINK
; 382  : 
; 383  : 	case LIST_TYPE_PILOT:
; 384  : 	{
; 385  : 		raw->pilot_link.parent = parent;
; 386  : 
; 387  : 		break;
; 388  : 	}
; 389  : 
; 390  : 	#endif
; 391  : 
; 392  : 	////////////////////////////////////////
; 393  : 
; 394  : 	#ifdef LIST_TYPE_PILOT_LOCK_LINK
; 395  : 
; 396  : 	case LIST_TYPE_PILOT_LOCK:
; 397  : 	{
; 398  : 		raw->pilot_lock_link.parent = parent;
; 399  : 
; 400  : 		break;
; 401  : 	}
; 402  : 
; 403  : 	#endif
; 404  : 
; 405  : 	////////////////////////////////////////
; 406  : 
; 407  : 	#ifdef LIST_TYPE_PLAYER_TASK_LINK
; 408  : 
; 409  : 	case LIST_TYPE_PLAYER_TASK:
; 410  : 	{
; 411  : 		raw->player_task_link.parent = parent;
; 412  : 
; 413  : 		break;
; 414  : 	}
; 415  : 
; 416  : 	#endif
; 417  : 
; 418  : 	////////////////////////////////////////
; 419  : 
; 420  : 	#ifdef LIST_TYPE_REGEN_LINK
; 421  : 
; 422  : 	case LIST_TYPE_REGEN:
; 423  : 	{
; 424  : 		raw->regen_link.parent = parent;
; 425  : 
; 426  : 		break;
; 427  : 	}
; 428  : 
; 429  : 	#endif
; 430  : 
; 431  : 	////////////////////////////////////////
; 432  : 
; 433  : 	#ifdef LIST_TYPE_REGISTRY_LINK
; 434  : 
; 435  : 	case LIST_TYPE_AIR_REGISTRY:
; 436  : 	case LIST_TYPE_GROUND_REGISTRY:
; 437  : 	case LIST_TYPE_SEA_REGISTRY:
; 438  : 	{
; 439  : 		raw->registry_link.parent = parent;
; 440  : 
; 441  : 		break;
; 442  : 	}
; 443  : 
; 444  : 	#endif
; 445  : 
; 446  : 	////////////////////////////////////////
; 447  : 
; 448  : 	#ifdef LIST_TYPE_SECTOR_LINK
; 449  : 
; 450  : 	case LIST_TYPE_SECTOR:
; 451  : 	{
; 452  : 		raw->sector_link.parent = parent;
; 453  : 
; 454  : 		break;
; 455  : 	}
; 456  : 
; 457  : 	#endif
; 458  : 
; 459  : 	////////////////////////////////////////
; 460  : 
; 461  : 	#ifdef LIST_TYPE_SECTOR_TASK_LINK
; 462  : 
; 463  : 	case LIST_TYPE_SECTOR_TASK:
; 464  : 	{
; 465  : 		raw->sector_task_link.parent = parent;
; 466  : 
; 467  : 		break;
; 468  : 	}
; 469  : 
; 470  : 	#endif
; 471  : 
; 472  : 	////////////////////////////////////////
; 473  : 
; 474  : 	#ifdef LIST_TYPE_SEGMENT_LINK
; 475  : 
; 476  : 	case LIST_TYPE_SEGMENT:
; 477  : 	{
; 478  : 		raw->segment_link.parent = parent;
; 479  : 
; 480  : 		break;
; 481  : 	}
; 482  : 
; 483  : 	#endif
; 484  : 
; 485  : 	////////////////////////////////////////
; 486  : 
; 487  : 	#ifdef LIST_TYPE_SPECIAL_EFFECT_LINK
; 488  : 
; 489  : 	case LIST_TYPE_SPECIAL_EFFECT:
; 490  : 	{
; 491  : 		raw->special_effect_link.parent = parent;
; 492  : 
; 493  : 		break;
; 494  : 	}
; 495  : 
; 496  : 	#endif
; 497  : 
; 498  : 	////////////////////////////////////////
; 499  : 
; 500  : 	#ifdef LIST_TYPE_TAKEOFF_QUEUE_LINK
; 501  : 
; 502  : 	case LIST_TYPE_TAKEOFF_QUEUE:
; 503  : 	{
; 504  : 		raw->takeoff_queue_link.parent = parent;
; 505  : 
; 506  : 		break;
; 507  : 	}
; 508  : 
; 509  : 	#endif
; 510  : 
; 511  : 	////////////////////////////////////////
; 512  : 
; 513  : 	#ifdef LIST_TYPE_TARGET_LINK
; 514  : 
; 515  : 	case LIST_TYPE_TARGET:
; 516  : 	{
; 517  : 		raw->target_link.parent = parent;
; 518  : 
; 519  : 		break;
; 520  : 	}
; 521  : 
; 522  : 	#endif
; 523  : 
; 524  : 	////////////////////////////////////////
; 525  : 
; 526  : 	#ifdef LIST_TYPE_TASK_DEPENDENT_LINK
; 527  : 
; 528  : 	case LIST_TYPE_TASK_DEPENDENT:
; 529  : 	{
; 530  : 		raw->task_dependent_link.parent = parent;
; 531  : 
; 532  : 		break;
; 533  : 	}
; 534  : 
; 535  : 	#endif
; 536  : 
; 537  : 	////////////////////////////////////////
; 538  : 
; 539  : 	#ifdef LIST_TYPE_UNASSIGNED_TASK_LINK
; 540  : 
; 541  : 	case LIST_TYPE_UNASSIGNED_TASK:
; 542  : 	{
; 543  : 		raw->task_link.parent = parent;
; 544  : 
; 545  : 		break;
; 546  : 	}
; 547  : 
; 548  : 	#endif
; 549  : 
; 550  : 	////////////////////////////////////////
; 551  : 
; 552  : 	#ifdef LIST_TYPE_UPDATE_LINK
; 553  : 
; 554  : 	case LIST_TYPE_UPDATE:
; 555  : 	{
; 556  : 		raw->update_link.parent = parent;

  00040	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00043	8b 4d 10	 mov	 ecx, DWORD PTR _parent$[ebp]
  00046	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 557  : 
; 558  : 		break;

  00049	eb 78		 jmp	 SHORT $LN1@set_local_
$LN6@set_local_:

; 559  : 	}
; 560  : 
; 561  : 	#endif
; 562  : 
; 563  : 	////////////////////////////////////////
; 564  : 
; 565  : 	#ifdef LIST_TYPE_VIEW_LINK
; 566  : 
; 567  : 	case LIST_TYPE_VIEW:
; 568  : 	{
; 569  : 		raw->view_link.parent = parent;
; 570  : 
; 571  : 		break;
; 572  : 	}
; 573  : 
; 574  : 	#endif
; 575  : 
; 576  : 	////////////////////////////////////////
; 577  : 
; 578  : 	#ifdef LIST_TYPE_VIEW_WEAPON_LINK
; 579  : 
; 580  : 	case LIST_TYPE_VIEW_WEAPON:
; 581  : 	{
; 582  : 		raw->view_weapon_link.parent = parent;
; 583  : 
; 584  : 		break;
; 585  : 	}
; 586  : 
; 587  : 	#endif
; 588  : 
; 589  : 	////////////////////////////////////////
; 590  : 
; 591  : 	#ifdef LIST_TYPE_WAYPOINT_LINK
; 592  : 
; 593  : 	case LIST_TYPE_WAYPOINT:
; 594  : 	{
; 595  : 		raw->waypoint_link.parent = parent;
; 596  : 
; 597  : 		break;
; 598  : 	}
; 599  : 
; 600  : 	#endif
; 601  : 
; 602  : 	////////////////////////////////////////
; 603  : 
; 604  : 	default:
; 605  : 	{
; 606  : 		debug_fatal_invalid_list_type (en, type);

  0004b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0004f	74 0a		 je	 SHORT $LN8@set_local_
  00051	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d b8	 mov	 DWORD PTR tv89[ebp], ecx
  00059	eb 24		 jmp	 SHORT $LN9@set_local_
$LN8@set_local_:
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_local_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
  00061	81 c2 cd 01 00
	00		 add	 edx, 461		; 000001cdH
  00067	52		 push	 edx
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@LCAHGHPO@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00078	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN9@set_local_:
  0007f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??set_local_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z@4JA
  00085	81 c1 cd 01 00
	00		 add	 ecx, 461		; 000001cdH
  0008b	51		 push	 ecx
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@LCAHGHPO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	8b 55 0c	 mov	 edx, DWORD PTR _type$[ebp]
  00094	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?list_type_database@@3PAULIST_TYPE_DATA@@A[edx*8]
  0009b	50		 push	 eax
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0009f	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  000a5	c1 f9 04	 sar	 ecx, 4
  000a8	51		 push	 ecx
  000a9	6b 55 b8 0c	 imul	 edx, DWORD PTR tv89[ebp], 12
  000ad	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[edx]
  000b3	50		 push	 eax
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?debug_fatal_invalid_list_type_message@@3PBDB ; debug_fatal_invalid_list_type_message
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000c0	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@set_local_:
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c

; 152  : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 0c 00	 ret	 12			; 0000000cH
?set_local_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z ENDP	; set_local_parent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\fn_list.h
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c
;	COMDAT ?overload_crater_list_functions@@YGXXZ
_TEXT	SEGMENT
?overload_crater_list_functions@@YGXXZ PROC		; overload_crater_list_functions, COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_list\fn_list.h

; 1282 : 	fn_set_local_entity_parent			[(TYPE)][LIST_TYPE_UPDATE]	= set_local_parent;

  00009	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
  0000e	6b c8 07	 imul	 ecx, eax, 7
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	6b c2 29	 imul	 eax, edx, 41
  00019	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_set_local_entity_parent@@3PAY0CN@P6GXPAUENTITY@@W4LIST_TYPES@@0@ZA[ecx+eax], OFFSET ?set_local_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z ; set_local_parent

; 1283 : 
; 1284 : 	fn_get_local_entity_parent			[(TYPE)][LIST_TYPE_UPDATE]	= get_local_parent;

  00024	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
  00029	6b c8 07	 imul	 ecx, eax, 7
  0002c	ba 04 00 00 00	 mov	 edx, 4
  00031	6b c2 29	 imul	 eax, edx, 41
  00034	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[ecx+eax], OFFSET ?get_local_parent@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z ; get_local_parent

; 1285 : 
; 1286 : 	fn_set_local_entity_child_succ	[(TYPE)][LIST_TYPE_UPDATE]	= set_local_child_succ;

  0003f	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
  00044	6b c8 07	 imul	 ecx, eax, 7
  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	6b c2 29	 imul	 eax, edx, 41
  0004f	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_set_local_entity_child_succ@@3PAY0CN@P6GXPAUENTITY@@W4LIST_TYPES@@0@ZA[ecx+eax], OFFSET ?set_local_child_succ@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z ; set_local_child_succ

; 1287 : 
; 1288 : 	fn_get_local_entity_child_succ	[(TYPE)][LIST_TYPE_UPDATE]	= get_local_child_succ;

  0005a	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
  0005f	6b c8 07	 imul	 ecx, eax, 7
  00062	ba 04 00 00 00	 mov	 edx, 4
  00067	6b c2 29	 imul	 eax, edx, 41
  0006a	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[ecx+eax], OFFSET ?get_local_child_succ@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z ; get_local_child_succ

; 1289 : 
; 1290 : 	fn_set_local_entity_child_pred	[(TYPE)][LIST_TYPE_UPDATE]	= set_local_child_pred;

  00075	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
  0007a	6b c8 07	 imul	 ecx, eax, 7
  0007d	ba 04 00 00 00	 mov	 edx, 4
  00082	6b c2 29	 imul	 eax, edx, 41
  00085	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_set_local_entity_child_pred@@3PAY0CN@P6GXPAUENTITY@@W4LIST_TYPES@@0@ZA[ecx+eax], OFFSET ?set_local_child_pred@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z ; set_local_child_pred

; 1291 : 
; 1292 : 	fn_get_local_entity_child_pred	[(TYPE)][LIST_TYPE_UPDATE]	= get_local_child_pred;

  00090	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
  00095	6b c8 07	 imul	 ecx, eax, 7
  00098	ba 04 00 00 00	 mov	 edx, 4
  0009d	6b c2 29	 imul	 eax, edx, 41
  000a0	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_get_local_entity_child_pred@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[ecx+eax], OFFSET ?get_local_child_pred@@YGPAUENTITY@@PAU1@W4LIST_TYPES@@@Z ; get_local_child_pred
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\crater\cr_list.c

; 270  : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
?overload_crater_list_functions@@YGXXZ ENDP		; overload_crater_list_functions
_TEXT	ENDS
END
