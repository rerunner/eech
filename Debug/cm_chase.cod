; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\camera\cm_chase.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_fmodf
PUBLIC	_sqrtf
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?reset_chase_camera@@YGXPAUCAMERA@@@Z		; reset_chase_camera
PUBLIC	?reset_chase_camera_position@@YGXPAUCAMERA@@@Z	; reset_chase_camera_position
PUBLIC	?update_chase_camera@@YGXPAUCAMERA@@@Z		; update_chase_camera
PUBLIC	?set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z ; set_chase_camera_view_target_to_source
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??reset_chase_camera@@YGXPAUCAMERA@@@Z@4JA ; `reset_chase_camera'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_03DGOGAGNC@raw@				; `string'
PUBLIC	??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@ ; `string'
PUBLIC	?__LINE__Var@?0??reset_chase_camera_position@@YGXPAUCAMERA@@@Z@4JA ; `reset_chase_camera_position'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA ; `update_chase_camera'::`1'::__LINE__Var
PUBLIC	??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@		; `string'
PUBLIC	?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA ; `set_chase_camera_view_target_to_source'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@	; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@3c8efa35
PUBLIC	__real@3eaa7efa
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40667ff7ced91687
PUBLIC	__real@40c90fdb
PUBLIC	__real@43340000
PUBLIC	__real@467ffc00
PUBLIC	__real@be860a92
PUBLIC	__real@bf800000
PUBLIC	__real@bfc90fdb
PUBLIC	__real@c0667ff7ced91687
PUBLIC	__real@c2b40000
PUBLIC	__real@c3340000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	_fmod:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_absolute_mouse_x@@YGHXZ:PROC		; get_absolute_mouse_x
EXTRN	?get_absolute_mouse_y@@YGHXZ:PROC		; get_absolute_mouse_y
EXTRN	?set_absolute_mouse_x@@YGXH@Z:PROC		; set_absolute_mouse_x
EXTRN	?query_TIR_active@@YAHXZ:PROC			; query_TIR_active
EXTRN	?GetYaw@@YAHXZ:PROC				; GetYaw
EXTRN	?GetPitch@@YAHXZ:PROC				; GetPitch
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?adjust_camera_zoom@@YGXPAUCAMERA@@@Z:PROC	; adjust_camera_zoom
EXTRN	?adjust_camera_smooth@@YGXPAUCAMERA@@PAUVEC3D@@@Z:PROC ; adjust_camera_smooth
EXTRN	?adjust_offset@@YGXPAUCAMERA@@@Z:PROC		; adjust_offset
EXTRN	?reset_offset@@YGXPAUCAMERA@@@Z:PROC		; reset_offset
EXTRN	?add_turbulence@@YGXPAUCAMERA@@PAUVEC3D@@@Z:PROC ; add_turbulence
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?command_line_mouse_look@@3HA:DWORD		; command_line_mouse_look
EXTRN	?command_line_external_trackir@@3HA:DWORD	; command_line_external_trackir
EXTRN	?command_line_external_trackir_direction@@3HA:DWORD ; command_line_external_trackir_direction
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?in_flight_zoom_test@@3HA:DWORD			; in_flight_zoom_test
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?camera_entity@@3PAUENTITY@@A:DWORD		; camera_entity
EXTRN	?adjust_view_left_key@@3HA:DWORD		; adjust_view_left_key
EXTRN	?adjust_view_right_key@@3HA:DWORD		; adjust_view_right_key
EXTRN	?adjust_view_up_key@@3HA:DWORD			; adjust_view_up_key
EXTRN	?adjust_view_down_key@@3HA:DWORD		; adjust_view_down_key
EXTRN	?joystick_pov_left@@3HA:DWORD			; joystick_pov_left
EXTRN	?joystick_pov_right@@3HA:DWORD			; joystick_pov_right
EXTRN	?joystick_pov_up@@3HA:DWORD			; joystick_pov_up
EXTRN	?joystick_pov_down@@3HA:DWORD			; joystick_pov_down
EXTRN	__fltused:DWORD
;	COMDAT __real@c3340000
CONST	SEGMENT
__real@c3340000 DD 0c3340000r			; -180
CONST	ENDS
;	COMDAT __real@c2b40000
CONST	SEGMENT
__real@c2b40000 DD 0c2b40000r			; -90
CONST	ENDS
;	COMDAT __real@c0667ff7ced91687
CONST	SEGMENT
__real@c0667ff7ced91687 DQ 0c0667ff7ced91687r	; -179.999
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@be860a92
CONST	SEGMENT
__real@be860a92 DD 0be860a92r			; -0.261799
CONST	ENDS
;	COMDAT __real@467ffc00
CONST	SEGMENT
__real@467ffc00 DD 0467ffc00r			; 16383
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40667ff7ced91687
CONST	SEGMENT
__real@40667ff7ced91687 DQ 040667ff7ced91687r	; 179.999
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3eaa7efa
CONST	SEGMENT
__real@3eaa7efa DD 03eaa7efar			; 0.333
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@
CONST	SEGMENT
??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@ DB 'get_camera_entity ()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA DD 0145H ; `set_chase_camera_view_target_to_source'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@
CONST	SEGMENT
??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@ DB 'z_min < z_max', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA DD 090H ; `update_chase_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??reset_chase_camera_position@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??reset_chase_camera_position@@YGXPAUCAMERA@@@Z@4JA DD 06eH ; `reset_chase_camera_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
CONST	SEGMENT
??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@ DB 'raw->external_view_'
	DB	'entity', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\camera\cm_cha'
	DB	'se.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??reset_chase_camera@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??reset_chase_camera@@YGXPAUCAMERA@@@Z@4JA DD 059H ; `reset_chase_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_chase.c
;	COMDAT ?set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z
_TEXT	SEGMENT
tv277 = -104						; size = 4
tv193 = -100						; size = 4
tv146 = -100						; size = 4
tv94 = -100						; size = 4
tv185 = -96						; size = 4
tv138 = -96						; size = 4
tv86 = -96						; size = 4
_direction$ = -28					; size = 12
_target_position$ = -16					; size = 4
_source_position$ = -12					; size = 4
_length$ = -8						; size = 4
_raw$ = -4						; size = 4
_source$ = 8						; size = 4
_target$ = 12						; size = 4
?set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z PROC ; set_chase_camera_view_target_to_source, COMDAT

; 325  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 326  : 	camera
; 327  : 		*raw;
; 328  : 
; 329  : 	float
; 330  : 		length;
; 331  : 
; 332  : 	vec3d
; 333  : 		*source_position,
; 334  : 		*target_position,
; 335  : 		direction;
; 336  : 
; 337  : 	ASSERT (source);

  00009	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_chase_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_chase_:

; 338  : 
; 339  : 	ASSERT (target);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@set_chase_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA
  00032	83 c0 0e	 add	 eax, 14			; 0000000eH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_chase_:

; 340  : 
; 341  : 	ASSERT (get_camera_entity ());

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?camera_entity@@3PAUENTITY@@A, 0 ; camera_entity
  0004c	75 18		 jne	 SHORT $LN4@set_chase_
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA
  00053	83 c0 10	 add	 eax, 16			; 00000010H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@set_chase_:

; 342  : 
; 343  : 	raw = (camera *) get_local_entity_data (get_camera_entity ());

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?camera_entity@@3PAUENTITY@@A ; camera_entity
  0006b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006e	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 344  : 
; 345  : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00071	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00075	74 0a		 je	 SHORT $LN8@set_chase_
  00077	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	89 4d a0	 mov	 DWORD PTR tv86[ebp], ecx
  0007f	eb 21		 jmp	 SHORT $LN9@set_chase_
$LN8@set_chase_:
  00081	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA
  00087	83 c2 14	 add	 edx, 20			; 00000014H
  0008a	52		 push	 edx
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN9@set_chase_:
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	85 c9		 test	 ecx, ecx
  000a9	74 09		 je	 SHORT $LN10@set_chase_
  000ab	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv94[ebp], 8
  000b2	eb 21		 jmp	 SHORT $LN11@set_chase_
$LN10@set_chase_:
  000b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA
  000ba	83 c2 14	 add	 edx, 20			; 00000014H
  000bd	52		 push	 edx
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ce	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
$LN11@set_chase_:
  000d5	6a 08		 push	 8
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000da	51		 push	 ecx
  000db	6b 55 a0 60	 imul	 edx, DWORD PTR tv86[ebp], 96
  000df	8b 45 9c	 mov	 eax, DWORD PTR tv94[ebp]
  000e2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000e9	ff d1		 call	 ecx
  000eb	89 45 f4	 mov	 DWORD PTR _source_position$[ebp], eax

; 346  : 
; 347  : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  000ee	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  000f2	74 0a		 je	 SHORT $LN12@set_chase_
  000f4	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  000f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f9	89 4d a0	 mov	 DWORD PTR tv138[ebp], ecx
  000fc	eb 21		 jmp	 SHORT $LN13@set_chase_
$LN12@set_chase_:
  000fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA
  00104	83 c2 16	 add	 edx, 22			; 00000016H
  00107	52		 push	 edx
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00118	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv138[ebp], 0
$LN13@set_chase_:
  0011f	b9 01 00 00 00	 mov	 ecx, 1
  00124	85 c9		 test	 ecx, ecx
  00126	74 09		 je	 SHORT $LN14@set_chase_
  00128	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv146[ebp], 8
  0012f	eb 21		 jmp	 SHORT $LN15@set_chase_
$LN14@set_chase_:
  00131	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA
  00137	83 c2 16	 add	 edx, 22			; 00000016H
  0013a	52		 push	 edx
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0014b	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN15@set_chase_:
  00152	6a 08		 push	 8
  00154	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00157	51		 push	 ecx
  00158	6b 55 a0 60	 imul	 edx, DWORD PTR tv138[ebp], 96
  0015c	8b 45 9c	 mov	 eax, DWORD PTR tv146[ebp]
  0015f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00166	ff d1		 call	 ecx
  00168	89 45 f0	 mov	 DWORD PTR _target_position$[ebp], eax

; 348  : 
; 349  : 	direction.x = source_position->x - target_position->x;

  0016b	8b 45 f4	 mov	 eax, DWORD PTR _source_position$[ebp]
  0016e	8b 4d f0	 mov	 ecx, DWORD PTR _target_position$[ebp]
  00171	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00175	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00179	f3 0f 11 45 e4	 movss	 DWORD PTR _direction$[ebp], xmm0

; 350  : 	direction.y = source_position->y - target_position->y;

  0017e	8b 45 f4	 mov	 eax, DWORD PTR _source_position$[ebp]
  00181	8b 4d f0	 mov	 ecx, DWORD PTR _target_position$[ebp]
  00184	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00189	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  0018e	f3 0f 11 45 e8	 movss	 DWORD PTR _direction$[ebp+4], xmm0

; 351  : 	direction.z = source_position->z - target_position->z;

  00193	8b 45 f4	 mov	 eax, DWORD PTR _source_position$[ebp]
  00196	8b 4d f0	 mov	 ecx, DWORD PTR _target_position$[ebp]
  00199	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0019e	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  001a3	f3 0f 11 45 ec	 movss	 DWORD PTR _direction$[ebp+8], xmm0

; 352  : 
; 353  : 	length = (direction.x * direction.x) + (direction.y * direction.y) + (direction.z * direction.z);

  001a8	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _direction$[ebp]
  001ad	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _direction$[ebp]
  001b2	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _direction$[ebp+4]
  001b7	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _direction$[ebp+4]
  001bc	f3 0f 58 c1	 addss	 xmm0, xmm1
  001c0	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _direction$[ebp+8]
  001c5	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _direction$[ebp+8]
  001ca	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ce	f3 0f 11 45 f8	 movss	 DWORD PTR _length$[ebp], xmm0

; 354  : 
; 355  : 	if (length > 1.0)

  001d3	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  001d8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  001e0	0f 86 39 01 00
	00		 jbe	 $LN5@set_chase_

; 356  : 	{
; 357  : 		length = sqrt (length);

  001e6	51		 push	 ecx
  001e7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _length$[ebp]
  001ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f1	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  001f6	d9 5d f8	 fstp	 DWORD PTR _length$[ebp]

; 358  : 
; 359  : 		normalise_3d_vector_given_magnitude (&direction, length);

  001f9	51		 push	 ecx
  001fa	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _length$[ebp]
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	8d 45 e4	 lea	 eax, DWORD PTR _direction$[ebp]
  00207	50		 push	 eax
  00208	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 360  : 
; 361  : 		raw->chase_camera_heading = atan2 (direction.x, direction.z);

  0020d	51		 push	 ecx
  0020e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _direction$[ebp+8]
  00213	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00218	51		 push	 ecx
  00219	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _direction$[ebp]
  0021e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00223	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00228	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0022b	d9 98 80 00 00
	00		 fstp	 DWORD PTR [eax+128]

; 362  : 
; 363  : 		if (raw->chase_camera_lock_rotate)

  00231	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00234	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00238	0f 84 c8 00 00
	00		 je	 $LN6@set_chase_

; 364  : 		{
; 365  : 			raw->chase_camera_heading -= get_local_entity_float_value (target, FLOAT_TYPE_HEADING);

  0023e	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  00242	74 0a		 je	 SHORT $LN16@set_chase_
  00244	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00247	8b 08		 mov	 ecx, DWORD PTR [eax]
  00249	89 4d a0	 mov	 DWORD PTR tv185[ebp], ecx
  0024c	eb 21		 jmp	 SHORT $LN17@set_chase_
$LN16@set_chase_:
  0024e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA
  00254	83 c2 28	 add	 edx, 40			; 00000028H
  00257	52		 push	 edx
  00258	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0025d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00268	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN17@set_chase_:
  0026f	b9 01 00 00 00	 mov	 ecx, 1
  00274	85 c9		 test	 ecx, ecx
  00276	74 09		 je	 SHORT $LN18@set_chase_
  00278	c7 45 9c 34 00
	00 00		 mov	 DWORD PTR tv193[ebp], 52 ; 00000034H
  0027f	eb 21		 jmp	 SHORT $LN19@set_chase_
$LN18@set_chase_:
  00281	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z@4JA
  00287	83 c2 28	 add	 edx, 40			; 00000028H
  0028a	52		 push	 edx
  0028b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00290	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00295	50		 push	 eax
  00296	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0029b	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN19@set_chase_:
  002a2	6a 34		 push	 52			; 00000034H
  002a4	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  002a7	51		 push	 ecx
  002a8	69 55 a0 bc 02
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 700
  002af	8b 45 9c	 mov	 eax, DWORD PTR tv193[ebp]
  002b2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002b9	ff d1		 call	 ecx
  002bb	d9 5d 98	 fstp	 DWORD PTR tv277[ebp]
  002be	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  002c1	f3 0f 10 82 80
	00 00 00	 movss	 xmm0, DWORD PTR [edx+128]
  002c9	f3 0f 5c 45 98	 subss	 xmm0, DWORD PTR tv277[ebp]
  002ce	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  002d1	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0

; 366  : 
; 367  : 			raw->chase_camera_heading = wrap_angle (raw->chase_camera_heading);

  002d9	51		 push	 ecx
  002da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  002e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e7	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  002ea	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]
  002f2	51		 push	 ecx
  002f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f8	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  002fd	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00300	d9 99 80 00 00
	00		 fstp	 DWORD PTR [ecx+128]
$LN6@set_chase_:

; 368  : 		}
; 369  : 
; 370  : 		raw->chase_camera_pitch = asin (direction.y);

  00306	51		 push	 ecx
  00307	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _direction$[ebp+4]
  0030c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00311	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  00316	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00319	d9 98 84 00 00
	00		 fstp	 DWORD PTR [eax+132]
$LN5@set_chase_:

; 371  : 	}
; 372  : }

  0031f	5f		 pop	 edi
  00320	5e		 pop	 esi
  00321	5b		 pop	 ebx
  00322	8b e5		 mov	 esp, ebp
  00324	5d		 pop	 ebp
  00325	c2 08 00	 ret	 8
?set_chase_camera_view_target_to_source@@YGXPAUENTITY@@0@Z ENDP ; set_chase_camera_view_target_to_source
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_chase.c
;	COMDAT ?update_chase_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
tv373 = -136						; size = 4
tv320 = -136						; size = 4
tv300 = -136						; size = 4
tv280 = -136						; size = 4
tv260 = -136						; size = 4
tv231 = -136						; size = 4
tv208 = -136						; size = 4
tv365 = -132						; size = 4
tv312 = -132						; size = 4
tv292 = -132						; size = 4
tv272 = -132						; size = 4
tv252 = -132						; size = 4
tv223 = -132						; size = 4
tv201 = -132						; size = 4
$T1 = -128						; size = 4
$T2 = -124						; size = 4
$T3 = -120						; size = 4
$T4 = -116						; size = 4
_temp_h$5 = -48						; size = 4
_temp_p$6 = -44						; size = 4
_rel_camera_position$ = -40				; size = 12
_new_position$ = -28					; size = 12
_z_max$ = -16						; size = 4
_z_min$ = -12						; size = 4
_combined_heading$ = -8					; size = 4
_en$ = -4						; size = 4
_raw$ = 8						; size = 4
?update_chase_camera@@YGXPAUCAMERA@@@Z PROC		; update_chase_camera, COMDAT

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 145  : 	entity
; 146  : 		*en;
; 147  : 
; 148  : 	float
; 149  : 		combined_heading,
; 150  : 		z_min,
; 151  : 		z_max;
; 152  : 
; 153  : 	vec3d
; 154  : 		new_position,
; 155  : 		rel_camera_position;
; 156  : 
; 157  : 	//
; 158  : 	// pre-amble
; 159  : 	//
; 160  : 
; 161  : 	ASSERT (raw);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@update_cha
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  00017	83 c0 11	 add	 eax, 17			; 00000011H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_cha:

; 162  : 
; 163  : 	ASSERT (raw->external_view_entity);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002d	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00034	75 18		 jne	 SHORT $LN3@update_cha
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  0003b	83 c0 13	 add	 eax, 19			; 00000013H
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@update_cha:

; 164  : 
; 165  : 	en = raw->external_view_entity;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00051	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00057	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 166  : 
; 167  : 	if ((command_line_mouse_look == MOUSELOOK_OFF)||	// Retro 31Oct2004.. if keyboard/POV panning.. (by me, stuff inside is (C) RW)

  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_mouse_look@@3HA, 0 ; command_line_mouse_look
  00061	74 0d		 je	 SHORT $LN6@update_cha
  00063	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?command_line_mouse_look@@3HA, 1 ; command_line_mouse_look
  0006a	0f 85 72 01 00
	00		 jne	 $LN4@update_cha
$LN6@update_cha:

; 168  : 		(command_line_mouse_look == MOUSELOOK_INTERNAL))
; 169  : 	{
; 170  : 
; 171  : 		//
; 172  : 		// adjust camera heading
; 173  : 		//
; 174  : 
; 175  : 		if (adjust_view_left_key || joystick_pov_left)

  00070	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_left_key@@3HA, 0 ; adjust_view_left_key
  00077	75 09		 jne	 SHORT $LN9@update_cha
  00079	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_left@@3HA, 0 ; joystick_pov_left
  00080	74 28		 je	 SHORT $LN7@update_cha
$LN9@update_cha:

; 176  : 		{
; 177  : 			raw->chase_camera_heading += CHASE_CAMERA_ROTATE_RATE * get_delta_time ();

  00082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  0008a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00092	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00095	f3 0f 58 80 80
	00 00 00	 addss	 xmm0, DWORD PTR [eax+128]
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000a0	f3 0f 11 81 80
	00 00 00	 movss	 DWORD PTR [ecx+128], xmm0
  000a8	eb 3c		 jmp	 SHORT $LN10@update_cha
$LN7@update_cha:

; 178  : 		}
; 179  : 		else if (adjust_view_right_key || joystick_pov_right)

  000aa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_right_key@@3HA, 0 ; adjust_view_right_key
  000b1	75 09		 jne	 SHORT $LN11@update_cha
  000b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_right@@3HA, 0 ; joystick_pov_right
  000ba	74 2a		 je	 SHORT $LN10@update_cha
$LN11@update_cha:

; 180  : 		{
; 181  : 			raw->chase_camera_heading -= CHASE_CAMERA_ROTATE_RATE * get_delta_time ();

  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  000c4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  000cc	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000cf	f3 0f 10 88 80
	00 00 00	 movss	 xmm1, DWORD PTR [eax+128]
  000d7	f3 0f 5c c8	 subss	 xmm1, xmm0
  000db	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000de	f3 0f 11 89 80
	00 00 00	 movss	 DWORD PTR [ecx+128], xmm1
$LN10@update_cha:

; 182  : 		}
; 183  : 
; 184  : 		raw->chase_camera_heading = wrap_angle (raw->chase_camera_heading);

  000e6	51		 push	 ecx
  000e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  000ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f4	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000f7	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]
  000ff	51		 push	 ecx
  00100	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00105	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0010d	d9 99 80 00 00
	00		 fstp	 DWORD PTR [ecx+128]

; 185  : 
; 186  : 		//
; 187  : 		// adjust camera pitch
; 188  : 		//
; 189  : 
; 190  : 		if (adjust_view_up_key || joystick_pov_up)

  00113	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_up_key@@3HA, 0 ; adjust_view_up_key
  0011a	75 09		 jne	 SHORT $LN14@update_cha
  0011c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_up@@3HA, 0 ; joystick_pov_up
  00123	74 56		 je	 SHORT $LN12@update_cha
$LN14@update_cha:

; 191  : 		{
; 192  : 			raw->chase_camera_pitch -= CHASE_CAMERA_ROTATE_RATE * get_delta_time ();

  00125	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  0012d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00135	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00138	f3 0f 10 88 84
	00 00 00	 movss	 xmm1, DWORD PTR [eax+132]
  00140	f3 0f 5c c8	 subss	 xmm1, xmm0
  00144	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00147	f3 0f 11 89 84
	00 00 00	 movss	 DWORD PTR [ecx+132], xmm1

; 193  : 
; 194  : 			raw->chase_camera_pitch = max (CHASE_CAMERA_ROTATE_DOWN_LIMIT, raw->chase_camera_pitch);

  0014f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00157	f3 0f 11 45 8c	 movss	 DWORD PTR $T4[ebp], xmm0
  0015c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0015f	05 84 00 00 00	 add	 eax, 132		; 00000084H
  00164	50		 push	 eax
  00165	8d 4d 8c	 lea	 ecx, DWORD PTR $T4[ebp]
  00168	51		 push	 ecx
  00169	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0016e	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00171	8b 00		 mov	 eax, DWORD PTR [eax]
  00173	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax
  00179	eb 62		 jmp	 SHORT $LN15@update_cha
$LN12@update_cha:

; 195  : 		}
; 196  : 		else if (adjust_view_down_key || joystick_pov_down)

  0017b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_down_key@@3HA, 0 ; adjust_view_down_key
  00182	75 09		 jne	 SHORT $LN16@update_cha
  00184	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_down@@3HA, 0 ; joystick_pov_down
  0018b	74 50		 je	 SHORT $LN15@update_cha
$LN16@update_cha:

; 197  : 		{
; 198  : 			raw->chase_camera_pitch += CHASE_CAMERA_ROTATE_RATE * get_delta_time ();

  0018d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00195	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0019d	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001a0	f3 0f 58 80 84
	00 00 00	 addss	 xmm0, DWORD PTR [eax+132]
  001a8	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  001ab	f3 0f 11 81 84
	00 00 00	 movss	 DWORD PTR [ecx+132], xmm0

; 199  : 
; 200  : 			raw->chase_camera_pitch = min (CHASE_CAMERA_ROTATE_UP_LIMIT, raw->chase_camera_pitch);

  001b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  001bb	f3 0f 11 45 88	 movss	 DWORD PTR $T3[ebp], xmm0
  001c0	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001c3	05 84 00 00 00	 add	 eax, 132		; 00000084H
  001c8	50		 push	 eax
  001c9	8d 4d 88	 lea	 ecx, DWORD PTR $T3[ebp]
  001cc	51		 push	 ecx
  001cd	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  001d2	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  001d5	8b 00		 mov	 eax, DWORD PTR [eax]
  001d7	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax
$LN15@update_cha:

; 201  : 		}
; 202  : 	}
; 203  : 	else // Retro 31Oct2004 - mouse or TrackIR control

  001dd	e9 c2 01 00 00	 jmp	 $LN5@update_cha
$LN4@update_cha:

; 204  : 	{
; 205  : 		float
; 206  : 			temp_p,
; 207  : 			temp_h;
; 208  : 
; 209  : 		// No TIR window, use mouse;
; 210  : 		// OR trackir active, but user doesn't want this in outside view
; 211  : 
; 212  : 		if ((query_TIR_active() == FALSE)||

  001e2	e8 00 00 00 00	 call	 ?query_TIR_active@@YAHXZ ; query_TIR_active
  001e7	85 c0		 test	 eax, eax
  001e9	74 0d		 je	 SHORT $LN19@update_cha
  001eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_external_trackir@@3HA, 0 ; command_line_external_trackir
  001f2	0f 85 bd 00 00
	00		 jne	 $LN17@update_cha
$LN19@update_cha:

; 213  : 			(!command_line_external_trackir))
; 214  : 		{
; 215  : 			temp_h = get_absolute_mouse_x ();

  001f8	e8 00 00 00 00	 call	 ?get_absolute_mouse_x@@YGHXZ ; get_absolute_mouse_x
  001fd	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00201	f3 0f 11 45 d0	 movss	 DWORD PTR _temp_h$5[ebp], xmm0

; 216  : 			temp_p = get_absolute_mouse_y ();

  00206	e8 00 00 00 00	 call	 ?get_absolute_mouse_y@@YGHXZ ; get_absolute_mouse_y
  0020b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0020f	f3 0f 11 45 d4	 movss	 DWORD PTR _temp_p$6[ebp], xmm0

; 217  : 
; 218  : 			temp_h = -180*temp_h/16383;

  00214	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c3340000
  0021c	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _temp_h$5[ebp]
  00221	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@467ffc00
  00229	f3 0f 11 45 d0	 movss	 DWORD PTR _temp_h$5[ebp], xmm0

; 219  : 			temp_p = -90*temp_p/16383;

  0022e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2b40000
  00236	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _temp_p$6[ebp]
  0023b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@467ffc00
  00243	f3 0f 11 45 d4	 movss	 DWORD PTR _temp_p$6[ebp], xmm0

; 220  : 
; 221  : 			raw->chase_camera_pitch = rad(temp_p);

  00248	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _temp_p$6[ebp]
  0024d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00255	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00258	f3 0f 11 80 84
	00 00 00	 movss	 DWORD PTR [eax+132], xmm0

; 222  : 			raw->chase_camera_heading = rad(temp_h);

  00260	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _temp_h$5[ebp]
  00265	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0026d	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00270	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0

; 223  : 
; 224  : 			// wrap horizontal pan.. vertical is limited to +- 180 degree
; 225  : 			// it is 179 because of rounding.. it never gets 180 but 179.999...
; 226  : 			if (temp_h <= -179.999)

  00278	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _temp_h$5[ebp]
  0027d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c0667ff7ced91687
  00285	66 0f 2f c8	 comisd	 xmm1, xmm0
  00289	72 0c		 jb	 SHORT $LN20@update_cha

; 227  : 			{
; 228  : 				set_absolute_mouse_x(-16383);

  0028b	68 01 c0 ff ff	 push	 -16383			; ffffc001H
  00290	e8 00 00 00 00	 call	 ?set_absolute_mouse_x@@YGXH@Z ; set_absolute_mouse_x
  00295	eb 19		 jmp	 SHORT $LN22@update_cha
$LN20@update_cha:

; 229  : 			}
; 230  : 			else if (temp_h >= 179.999)

  00297	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _temp_h$5[ebp]
  0029c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40667ff7ced91687
  002a4	72 0a		 jb	 SHORT $LN22@update_cha

; 231  : 			{
; 232  : 				set_absolute_mouse_x(16383);

  002a6	68 ff 3f 00 00	 push	 16383			; 00003fffH
  002ab	e8 00 00 00 00	 call	 ?set_absolute_mouse_x@@YGXH@Z ; set_absolute_mouse_x
$LN22@update_cha:

; 233  : 			}
; 234  : 		}
; 235  : 		else	// TrackIR - TIR is am absolute device and hence can not wrap. Vertical pan is limited as above

  002b0	e9 9b 00 00 00	 jmp	 $LN18@update_cha
$LN17@update_cha:

; 236  : 		{
; 237  : 			temp_h = (float) GetYaw();

  002b5	e8 00 00 00 00	 call	 ?GetYaw@@YAHXZ		; GetYaw
  002ba	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002be	f3 0f 11 45 d0	 movss	 DWORD PTR _temp_h$5[ebp], xmm0

; 238  : 			temp_p = (float) GetPitch();

  002c3	e8 00 00 00 00	 call	 ?GetPitch@@YAHXZ	; GetPitch
  002c8	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002cc	f3 0f 11 45 d4	 movss	 DWORD PTR _temp_p$6[ebp], xmm0

; 239  : 
; 240  : 			if (command_line_external_trackir_direction)	// Retro 31Jan2005

  002d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_external_trackir_direction@@3HA, 0 ; command_line_external_trackir_direction
  002d8	74 12		 je	 SHORT $LN23@update_cha

; 241  : 			{
; 242  : 				temp_h *= -1;

  002da	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _temp_h$5[ebp]
  002df	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  002e7	f3 0f 11 45 d0	 movss	 DWORD PTR _temp_h$5[ebp], xmm0
$LN23@update_cha:

; 243  : 			}
; 244  : 
; 245  : 			temp_h = 180*temp_h/16383;

  002ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43340000
  002f4	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _temp_h$5[ebp]
  002f9	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@467ffc00
  00301	f3 0f 11 45 d0	 movss	 DWORD PTR _temp_h$5[ebp], xmm0

; 246  : 			temp_p = -90*temp_p/16383;

  00306	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2b40000
  0030e	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _temp_p$6[ebp]
  00313	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@467ffc00
  0031b	f3 0f 11 45 d4	 movss	 DWORD PTR _temp_p$6[ebp], xmm0

; 247  : 
; 248  : 			raw->chase_camera_pitch = rad(temp_p);

  00320	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _temp_p$6[ebp]
  00325	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0032d	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00330	f3 0f 11 80 84
	00 00 00	 movss	 DWORD PTR [eax+132], xmm0

; 249  : 			raw->chase_camera_heading = rad(temp_h);

  00338	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _temp_h$5[ebp]
  0033d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00345	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00348	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0
$LN18@update_cha:

; 250  : 		}
; 251  : 
; 252  : 		raw->chase_camera_pitch = max (CHASE_CAMERA_ROTATE_DOWN_LIMIT, raw->chase_camera_pitch);

  00350	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00358	f3 0f 11 45 84	 movss	 DWORD PTR $T2[ebp], xmm0
  0035d	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00360	05 84 00 00 00	 add	 eax, 132		; 00000084H
  00365	50		 push	 eax
  00366	8d 4d 84	 lea	 ecx, DWORD PTR $T2[ebp]
  00369	51		 push	 ecx
  0036a	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0036f	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00372	8b 00		 mov	 eax, DWORD PTR [eax]
  00374	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 253  : 		raw->chase_camera_pitch = min (CHASE_CAMERA_ROTATE_UP_LIMIT, raw->chase_camera_pitch);

  0037a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00382	f3 0f 11 45 80	 movss	 DWORD PTR $T1[ebp], xmm0
  00387	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0038a	05 84 00 00 00	 add	 eax, 132		; 00000084H
  0038f	50		 push	 eax
  00390	8d 4d 80	 lea	 ecx, DWORD PTR $T1[ebp]
  00393	51		 push	 ecx
  00394	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00399	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  0039c	8b 00		 mov	 eax, DWORD PTR [eax]
  0039e	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax
$LN5@update_cha:

; 254  : 	} // Retro 31Oct2004 end
; 255  : 
; 256  : 	adjust_camera_zoom(raw);

  003a4	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  003a7	50		 push	 eax
  003a8	e8 00 00 00 00	 call	 ?adjust_camera_zoom@@YGXPAUCAMERA@@@Z ; adjust_camera_zoom

; 257  : 
; 258  : 	//
; 259  : 	// get camera attitude
; 260  : 	//
; 261  : 
; 262  : 	if (get_local_entity_int_value (en, INT_TYPE_ALIVE) && raw->chase_camera_lock_rotate)

  003ad	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  003b1	74 0d		 je	 SHORT $LN30@update_cha
  003b3	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  003b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b8	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv201[ebp], ecx
  003be	eb 20		 jmp	 SHORT $LN31@update_cha
$LN30@update_cha:
  003c0	68 06 01 00 00	 push	 262			; 00000106H
  003c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003d0	52		 push	 edx
  003d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003d6	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv201[ebp], 0
$LN31@update_cha:
  003e0	b8 01 00 00 00	 mov	 eax, 1
  003e5	85 c0		 test	 eax, eax
  003e7	74 0c		 je	 SHORT $LN32@update_cha
  003e9	c7 85 78 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR tv208[ebp], 7
  003f3	eb 20		 jmp	 SHORT $LN33@update_cha
$LN32@update_cha:
  003f5	68 06 01 00 00	 push	 262			; 00000106H
  003fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00405	51		 push	 ecx
  00406	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0040b	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv208[ebp], 0
$LN33@update_cha:
  00415	6a 07		 push	 7
  00417	8b 55 fc	 mov	 edx, DWORD PTR _en$[ebp]
  0041a	52		 push	 edx
  0041b	69 85 7c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv201[ebp], 1116
  00425	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv208[ebp]
  0042b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00432	ff d2		 call	 edx
  00434	85 c0		 test	 eax, eax
  00436	0f 84 a1 00 00
	00		 je	 $LN24@update_cha
  0043c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0043f	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00443	0f 84 94 00 00
	00		 je	 $LN24@update_cha

; 263  : 	{
; 264  : 		combined_heading = get_local_entity_float_value (en, FLOAT_TYPE_HEADING);

  00449	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0044d	74 0d		 je	 SHORT $LN34@update_cha
  0044f	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00452	8b 08		 mov	 ecx, DWORD PTR [eax]
  00454	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv223[ebp], ecx
  0045a	eb 24		 jmp	 SHORT $LN35@update_cha
$LN34@update_cha:
  0045c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  00462	83 c2 78	 add	 edx, 120		; 00000078H
  00465	52		 push	 edx
  00466	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0046b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00470	50		 push	 eax
  00471	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00476	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv223[ebp], 0
$LN35@update_cha:
  00480	b9 01 00 00 00	 mov	 ecx, 1
  00485	85 c9		 test	 ecx, ecx
  00487	74 0c		 je	 SHORT $LN36@update_cha
  00489	c7 85 78 ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv231[ebp], 52 ; 00000034H
  00493	eb 24		 jmp	 SHORT $LN37@update_cha
$LN36@update_cha:
  00495	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  0049b	83 c2 78	 add	 edx, 120		; 00000078H
  0049e	52		 push	 edx
  0049f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  004a9	50		 push	 eax
  004aa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004af	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv231[ebp], 0
$LN37@update_cha:
  004b9	6a 34		 push	 52			; 00000034H
  004bb	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  004be	51		 push	 ecx
  004bf	69 95 7c ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv223[ebp], 700
  004c9	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv231[ebp]
  004cf	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  004d6	ff d1		 call	 ecx
  004d8	d9 5d f8	 fstp	 DWORD PTR _combined_heading$[ebp]

; 265  : 	}
; 266  : 	else

  004db	eb 08		 jmp	 SHORT $LN25@update_cha
$LN24@update_cha:

; 267  : 	{
; 268  : 		combined_heading = 0.0;

  004dd	0f 57 c0	 xorps	 xmm0, xmm0
  004e0	f3 0f 11 45 f8	 movss	 DWORD PTR _combined_heading$[ebp], xmm0
$LN25@update_cha:

; 269  : 	}
; 270  : 
; 271  : 	combined_heading += raw->chase_camera_heading;

  004e5	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  004e8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _combined_heading$[ebp]
  004ed	f3 0f 58 80 80
	00 00 00	 addss	 xmm0, DWORD PTR [eax+128]
  004f5	f3 0f 11 45 f8	 movss	 DWORD PTR _combined_heading$[ebp], xmm0

; 272  : 
; 273  : 	get_3d_transformation_matrix (raw->attitude, combined_heading, raw->chase_camera_pitch, 0.0);

  004fa	51		 push	 ecx
  004fb	0f 57 c0	 xorps	 xmm0, xmm0
  004fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00503	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00506	51		 push	 ecx
  00507	f3 0f 10 80 84
	00 00 00	 movss	 xmm0, DWORD PTR [eax+132]
  0050f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00514	51		 push	 ecx
  00515	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _combined_heading$[ebp]
  0051a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051f	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00522	83 c1 18	 add	 ecx, 24			; 00000018H
  00525	51		 push	 ecx
  00526	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 274  : 
; 275  : 	//
; 276  : 	// get camera position
; 277  : 	//
; 278  : 
; 279  : 	if (in_flight_zoom_test)

  0052b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?in_flight_zoom_test@@3HA, 0 ; in_flight_zoom_test
  00532	0f 84 35 01 00
	00		 je	 $LN26@update_cha

; 280  : 	{
; 281  : 		z_min = get_local_entity_float_value (en, FLOAT_TYPE_CHASE_VIEW_MIN_DISTANCE_TEST);

  00538	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0053c	74 0d		 je	 SHORT $LN38@update_cha
  0053e	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00541	8b 08		 mov	 ecx, DWORD PTR [eax]
  00543	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv252[ebp], ecx
  00549	eb 27		 jmp	 SHORT $LN39@update_cha
$LN38@update_cha:
  0054b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  00551	81 c2 89 00 00
	00		 add	 edx, 137		; 00000089H
  00557	52		 push	 edx
  00558	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0055d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00562	50		 push	 eax
  00563	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00568	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv252[ebp], 0
$LN39@update_cha:
  00572	b9 01 00 00 00	 mov	 ecx, 1
  00577	85 c9		 test	 ecx, ecx
  00579	74 0c		 je	 SHORT $LN40@update_cha
  0057b	c7 85 78 ff ff
	ff 16 00 00 00	 mov	 DWORD PTR tv260[ebp], 22 ; 00000016H
  00585	eb 27		 jmp	 SHORT $LN41@update_cha
$LN40@update_cha:
  00587	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  0058d	81 c2 89 00 00
	00		 add	 edx, 137		; 00000089H
  00593	52		 push	 edx
  00594	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00599	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0059e	50		 push	 eax
  0059f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005a4	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv260[ebp], 0
$LN41@update_cha:
  005ae	6a 16		 push	 22			; 00000016H
  005b0	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  005b3	51		 push	 ecx
  005b4	69 95 7c ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv252[ebp], 700
  005be	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv260[ebp]
  005c4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  005cb	ff d1		 call	 ecx
  005cd	d9 5d f4	 fstp	 DWORD PTR _z_min$[ebp]

; 282  : 		z_max = get_local_entity_float_value (en, FLOAT_TYPE_CHASE_VIEW_MAX_DISTANCE_TEST);

  005d0	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  005d4	74 0d		 je	 SHORT $LN42@update_cha
  005d6	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  005d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  005db	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv272[ebp], ecx
  005e1	eb 27		 jmp	 SHORT $LN43@update_cha
$LN42@update_cha:
  005e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  005e9	81 c2 8a 00 00
	00		 add	 edx, 138		; 0000008aH
  005ef	52		 push	 edx
  005f0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005fa	50		 push	 eax
  005fb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00600	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv272[ebp], 0
$LN43@update_cha:
  0060a	b9 01 00 00 00	 mov	 ecx, 1
  0060f	85 c9		 test	 ecx, ecx
  00611	74 0c		 je	 SHORT $LN44@update_cha
  00613	c7 85 78 ff ff
	ff 14 00 00 00	 mov	 DWORD PTR tv280[ebp], 20 ; 00000014H
  0061d	eb 27		 jmp	 SHORT $LN45@update_cha
$LN44@update_cha:
  0061f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  00625	81 c2 8a 00 00
	00		 add	 edx, 138		; 0000008aH
  0062b	52		 push	 edx
  0062c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00631	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00636	50		 push	 eax
  00637	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0063c	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv280[ebp], 0
$LN45@update_cha:
  00646	6a 14		 push	 20			; 00000014H
  00648	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  0064b	51		 push	 ecx
  0064c	69 95 7c ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv272[ebp], 700
  00656	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv280[ebp]
  0065c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00663	ff d1		 call	 ecx
  00665	d9 5d f0	 fstp	 DWORD PTR _z_max$[ebp]

; 283  : 	}
; 284  : 	else

  00668	e9 30 01 00 00	 jmp	 $LN27@update_cha
$LN26@update_cha:

; 285  : 	{
; 286  : 		z_min = get_local_entity_float_value (en, FLOAT_TYPE_CHASE_VIEW_MIN_DISTANCE);

  0066d	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00671	74 0d		 je	 SHORT $LN46@update_cha
  00673	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00676	8b 08		 mov	 ecx, DWORD PTR [eax]
  00678	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv292[ebp], ecx
  0067e	eb 27		 jmp	 SHORT $LN47@update_cha
$LN46@update_cha:
  00680	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  00686	81 c2 8e 00 00
	00		 add	 edx, 142		; 0000008eH
  0068c	52		 push	 edx
  0068d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00692	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00697	50		 push	 eax
  00698	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0069d	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv292[ebp], 0
$LN47@update_cha:
  006a7	b9 01 00 00 00	 mov	 ecx, 1
  006ac	85 c9		 test	 ecx, ecx
  006ae	74 0c		 je	 SHORT $LN48@update_cha
  006b0	c7 85 78 ff ff
	ff 15 00 00 00	 mov	 DWORD PTR tv300[ebp], 21 ; 00000015H
  006ba	eb 27		 jmp	 SHORT $LN49@update_cha
$LN48@update_cha:
  006bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  006c2	81 c2 8e 00 00
	00		 add	 edx, 142		; 0000008eH
  006c8	52		 push	 edx
  006c9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  006ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  006d3	50		 push	 eax
  006d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006d9	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv300[ebp], 0
$LN49@update_cha:
  006e3	6a 15		 push	 21			; 00000015H
  006e5	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  006e8	51		 push	 ecx
  006e9	69 95 7c ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv292[ebp], 700
  006f3	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv300[ebp]
  006f9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00700	ff d1		 call	 ecx
  00702	d9 5d f4	 fstp	 DWORD PTR _z_min$[ebp]

; 287  : 		z_max = get_local_entity_float_value (en, FLOAT_TYPE_CHASE_VIEW_MAX_DISTANCE);

  00705	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00709	74 0d		 je	 SHORT $LN50@update_cha
  0070b	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  0070e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00710	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv312[ebp], ecx
  00716	eb 27		 jmp	 SHORT $LN51@update_cha
$LN50@update_cha:
  00718	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  0071e	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  00724	52		 push	 edx
  00725	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0072a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0072f	50		 push	 eax
  00730	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00735	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv312[ebp], 0
$LN51@update_cha:
  0073f	b9 01 00 00 00	 mov	 ecx, 1
  00744	85 c9		 test	 ecx, ecx
  00746	74 0c		 je	 SHORT $LN52@update_cha
  00748	c7 85 78 ff ff
	ff 13 00 00 00	 mov	 DWORD PTR tv320[ebp], 19 ; 00000013H
  00752	eb 27		 jmp	 SHORT $LN53@update_cha
$LN52@update_cha:
  00754	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  0075a	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  00760	52		 push	 edx
  00761	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00766	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0076b	50		 push	 eax
  0076c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00771	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv320[ebp], 0
$LN53@update_cha:
  0077b	6a 13		 push	 19			; 00000013H
  0077d	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  00780	51		 push	 ecx
  00781	69 95 7c ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv312[ebp], 700
  0078b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv320[ebp]
  00791	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00798	ff d1		 call	 ecx
  0079a	d9 5d f0	 fstp	 DWORD PTR _z_max$[ebp]
$LN27@update_cha:

; 288  : 	}
; 289  : 
; 290  : 	ASSERT (z_min < z_max);

  0079d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  007a2	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _z_min$[ebp]
  007a6	77 1a		 ja	 SHORT $LN28@update_cha
  007a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  007ad	05 92 00 00 00	 add	 eax, 146		; 00000092H
  007b2	50		 push	 eax
  007b3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  007b8	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@
  007bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN28@update_cha:

; 291  : 
; 292  : 	// add offset
; 293  : 	adjust_offset(raw);

  007c2	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  007c5	50		 push	 eax
  007c6	e8 00 00 00 00	 call	 ?adjust_offset@@YGXPAUCAMERA@@@Z ; adjust_offset

; 294  : 
; 295  : 	// add zoom
; 296  : 	rel_camera_position.x = raw->offset.x;

  007cb	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  007ce	f3 0f 10 80 34
	01 00 00	 movss	 xmm0, DWORD PTR [eax+308]
  007d6	f3 0f 11 45 d8	 movss	 DWORD PTR _rel_camera_position$[ebp], xmm0

; 297  : 	rel_camera_position.y = raw->offset.y;

  007db	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  007de	f3 0f 10 80 38
	01 00 00	 movss	 xmm0, DWORD PTR [eax+312]
  007e6	f3 0f 11 45 dc	 movss	 DWORD PTR _rel_camera_position$[ebp+4], xmm0

; 298  : 	rel_camera_position.z = raw->offset.z - (((z_max - z_min) * raw->chase_camera_zoom * raw->chase_camera_zoom) + z_min);

  007eb	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  007f0	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _z_min$[ebp]
  007f5	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  007f8	f3 0f 59 80 88
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+136]
  00800	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00803	f3 0f 59 81 88
	00 00 00	 mulss	 xmm0, DWORD PTR [ecx+136]
  0080b	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _z_min$[ebp]
  00810	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00813	f3 0f 10 8a 3c
	01 00 00	 movss	 xmm1, DWORD PTR [edx+316]
  0081b	f3 0f 5c c8	 subss	 xmm1, xmm0
  0081f	f3 0f 11 4d e0	 movss	 DWORD PTR _rel_camera_position$[ebp+8], xmm1

; 299  : 
; 300  : 	multiply_matrix3x3_vec3d (&rel_camera_position, raw->attitude, &rel_camera_position);

  00824	8d 45 d8	 lea	 eax, DWORD PTR _rel_camera_position$[ebp]
  00827	50		 push	 eax
  00828	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0082b	83 c1 18	 add	 ecx, 24			; 00000018H
  0082e	51		 push	 ecx
  0082f	8d 55 d8	 lea	 edx, DWORD PTR _rel_camera_position$[ebp]
  00832	52		 push	 edx
  00833	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 301  : 
; 302  : 	get_local_entity_target_point (en, &new_position);

  00838	8d 45 e4	 lea	 eax, DWORD PTR _new_position$[ebp]
  0083b	50		 push	 eax
  0083c	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  0083f	51		 push	 ecx
  00840	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 303  : 
; 304  : 	new_position.x += rel_camera_position.x;

  00845	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _new_position$[ebp]
  0084a	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _rel_camera_position$[ebp]
  0084f	f3 0f 11 45 e4	 movss	 DWORD PTR _new_position$[ebp], xmm0

; 305  : 	new_position.y += rel_camera_position.y;

  00854	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _new_position$[ebp+4]
  00859	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _rel_camera_position$[ebp+4]
  0085e	f3 0f 11 45 e8	 movss	 DWORD PTR _new_position$[ebp+4], xmm0

; 306  : 	new_position.z += rel_camera_position.z;

  00863	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _new_position$[ebp+8]
  00868	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _rel_camera_position$[ebp+8]
  0086d	f3 0f 11 45 ec	 movss	 DWORD PTR _new_position$[ebp+8], xmm0

; 307  : 
; 308  : 	adjust_camera_smooth(raw, &new_position);

  00872	8d 45 e4	 lea	 eax, DWORD PTR _new_position$[ebp]
  00875	50		 push	 eax
  00876	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00879	51		 push	 ecx
  0087a	e8 00 00 00 00	 call	 ?adjust_camera_smooth@@YGXPAUCAMERA@@PAUVEC3D@@@Z ; adjust_camera_smooth

; 309  : 
; 310  : 	add_turbulence(raw, &raw->position);

  0087f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00882	50		 push	 eax
  00883	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00886	51		 push	 ecx
  00887	e8 00 00 00 00	 call	 ?add_turbulence@@YGXPAUCAMERA@@PAUVEC3D@@@Z ; add_turbulence

; 311  : 
; 312  : 
; 313  : 	//
; 314  : 	// motion vector
; 315  : 	//
; 316  : 
; 317  : 	get_local_entity_vec3d (en, VEC3D_TYPE_MOTION_VECTOR, &raw->motion_vector);

  0088c	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00890	74 0d		 je	 SHORT $LN54@update_cha
  00892	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00895	8b 08		 mov	 ecx, DWORD PTR [eax]
  00897	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv365[ebp], ecx
  0089d	eb 27		 jmp	 SHORT $LN55@update_cha
$LN54@update_cha:
  0089f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  008a5	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  008ab	52		 push	 edx
  008ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008b6	50		 push	 eax
  008b7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008bc	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv365[ebp], 0
$LN55@update_cha:
  008c6	b9 01 00 00 00	 mov	 ecx, 1
  008cb	85 c9		 test	 ecx, ecx
  008cd	74 0c		 je	 SHORT $LN56@update_cha
  008cf	c7 85 78 ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv373[ebp], 6
  008d9	eb 27		 jmp	 SHORT $LN57@update_cha
$LN56@update_cha:
  008db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  008e1	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  008e7	52		 push	 edx
  008e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  008f2	50		 push	 eax
  008f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008f8	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv373[ebp], 0
$LN57@update_cha:
  00902	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00905	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00908	51		 push	 ecx
  00909	6a 06		 push	 6
  0090b	8b 55 fc	 mov	 edx, DWORD PTR _en$[ebp]
  0090e	52		 push	 edx
  0090f	6b 85 7c ff ff
	ff 60		 imul	 eax, DWORD PTR tv365[ebp], 96
  00916	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv373[ebp]
  0091c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00923	ff d2		 call	 edx

; 318  : }

  00925	5f		 pop	 edi
  00926	5e		 pop	 esi
  00927	5b		 pop	 ebx
  00928	8b e5		 mov	 esp, ebp
  0092a	5d		 pop	 ebp
  0092b	c2 04 00	 ret	 4
?update_chase_camera@@YGXPAUCAMERA@@@Z ENDP		; update_chase_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_chase.c
;	COMDAT ?reset_chase_camera_position@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
tv91 = -72						; size = 4
tv83 = -68						; size = 4
_raw$ = 8						; size = 4
?reset_chase_camera_position@@YGXPAUCAMERA@@@Z PROC	; reset_chase_camera_position, COMDAT

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@reset_chas
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_chase_camera_position@@YGXPAUCAMERA@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@reset_chas:

; 112  : 
; 113  : 	raw->chase_camera_heading = rad (0.0);

  00027	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0

; 114  : 
; 115  : 	if (!raw->chase_camera_lock_rotate)

  00035	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00038	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  0003c	0f 85 aa 00 00
	00		 jne	 $LN4@reset_chas

; 116  : 	{
; 117  : 		if (raw->external_view_entity)

  00042	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00045	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  0004c	0f 84 9a 00 00
	00		 je	 $LN4@reset_chas

; 118  : 		{
; 119  : 			raw->chase_camera_heading = get_local_entity_float_value (raw->external_view_entity, FLOAT_TYPE_HEADING);

  00052	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00055	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  0005c	74 10		 je	 SHORT $LN8@reset_chas
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00061	8b 91 24 01 00
	00		 mov	 edx, DWORD PTR [ecx+292]
  00067	8b 02		 mov	 eax, DWORD PTR [edx]
  00069	89 45 bc	 mov	 DWORD PTR tv83[ebp], eax
  0006c	eb 22		 jmp	 SHORT $LN9@reset_chas
$LN8@reset_chas:
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??reset_chase_camera_position@@YGXPAUCAMERA@@@Z@4JA
  00074	83 c1 09	 add	 ecx, 9
  00077	51		 push	 ecx
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00089	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN9@reset_chas:
  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	85 c0		 test	 eax, eax
  00097	74 09		 je	 SHORT $LN10@reset_chas
  00099	c7 45 b8 34 00
	00 00		 mov	 DWORD PTR tv91[ebp], 52	; 00000034H
  000a0	eb 22		 jmp	 SHORT $LN11@reset_chas
$LN10@reset_chas:
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??reset_chase_camera_position@@YGXPAUCAMERA@@@Z@4JA
  000a8	83 c1 09	 add	 ecx, 9
  000ab	51		 push	 ecx
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000bd	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN11@reset_chas:
  000c4	6a 34		 push	 52			; 00000034H
  000c6	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000c9	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  000cf	51		 push	 ecx
  000d0	69 55 bc bc 02
	00 00		 imul	 edx, DWORD PTR tv83[ebp], 700
  000d7	8b 45 b8	 mov	 eax, DWORD PTR tv91[ebp]
  000da	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000e1	ff d1		 call	 ecx
  000e3	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  000e6	d9 9a 80 00 00
	00		 fstp	 DWORD PTR [edx+128]
$LN4@reset_chas:

; 120  : 		}
; 121  : 	}
; 122  : 
; 123  : 	raw->chase_camera_pitch = CHASE_CAMERA_RESET_PITCH;

  000ec	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be860a92
  000f7	f3 0f 11 80 84
	00 00 00	 movss	 DWORD PTR [eax+132], xmm0

; 124  : 
; 125  : 	raw->chase_camera_zoom = CHASE_CAMERA_RESET_ZOOM;

  000ff	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00102	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaa7efa
  0010a	f3 0f 11 80 88
	00 00 00	 movss	 DWORD PTR [eax+136], xmm0

; 126  : 
; 127  : 	if (raw->external_view_entity)

  00112	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00115	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  0011c	74 15		 je	 SHORT $LN5@reset_chas

; 128  : 		get_local_entity_target_point (raw->external_view_entity, &raw->position);

  0011e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00121	50		 push	 eax
  00122	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00125	8b 91 24 01 00
	00		 mov	 edx, DWORD PTR [ecx+292]
  0012b	52		 push	 edx
  0012c	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 129  : 	else

  00131	eb 2f		 jmp	 SHORT $LN6@reset_chas
$LN5@reset_chas:

; 130  : 	{
; 131  : 		raw->position.x = MID_MAP_X;

  00133	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00136	f3 0f 10 05 30
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+48
  0013e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 132  : 		raw->position.y = MID_MAP_Y;

  00142	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00145	f3 0f 10 05 34
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+52
  0014d	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 133  : 		raw->position.z = MID_MAP_Z;

  00152	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00155	f3 0f 10 05 38
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+56
  0015d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
$LN6@reset_chas:

; 134  : 	}
; 135  : 
; 136  : 	reset_offset(raw);

  00162	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 ?reset_offset@@YGXPAUCAMERA@@@Z ; reset_offset

; 137  : }

  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c2 04 00	 ret	 4
?reset_chase_camera_position@@YGXPAUCAMERA@@@Z ENDP	; reset_chase_camera_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_chase.c
;	COMDAT ?reset_chase_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
tv91 = -72						; size = 4
tv83 = -68						; size = 4
_raw$ = 8						; size = 4
?reset_chase_camera@@YGXPAUCAMERA@@@Z PROC		; reset_chase_camera, COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 90   : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@reset_chas
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@reset_chas:

; 91   : 
; 92   : 	ASSERT (raw->external_view_entity);

  00027	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002a	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00031	75 18		 jne	 SHORT $LN3@reset_chas
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  00038	83 c0 03	 add	 eax, 3
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@reset_chas:

; 93   : 
; 94   : 	//
; 95   : 	// motion vector
; 96   : 	//
; 97   : 
; 98   : 	get_local_entity_vec3d (raw->external_view_entity, VEC3D_TYPE_MOTION_VECTOR, &raw->motion_vector);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0004e	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00055	74 10		 je	 SHORT $LN5@reset_chas
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0005a	8b 91 24 01 00
	00		 mov	 edx, DWORD PTR [ecx+292]
  00060	8b 02		 mov	 eax, DWORD PTR [edx]
  00062	89 45 bc	 mov	 DWORD PTR tv83[ebp], eax
  00065	eb 22		 jmp	 SHORT $LN6@reset_chas
$LN5@reset_chas:
  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??reset_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  0006d	83 c1 09	 add	 ecx, 9
  00070	51		 push	 ecx
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00076	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00082	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN6@reset_chas:
  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	85 c0		 test	 eax, eax
  00090	74 09		 je	 SHORT $LN7@reset_chas
  00092	c7 45 b8 06 00
	00 00		 mov	 DWORD PTR tv91[ebp], 6
  00099	eb 22		 jmp	 SHORT $LN8@reset_chas
$LN7@reset_chas:
  0009b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??reset_chase_camera@@YGXPAUCAMERA@@@Z@4JA
  000a1	83 c1 09	 add	 ecx, 9
  000a4	51		 push	 ecx
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@BKFBCIDC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b6	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN8@reset_chas:
  000bd	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000c0	83 c0 0c	 add	 eax, 12			; 0000000cH
  000c3	50		 push	 eax
  000c4	6a 06		 push	 6
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000c9	8b 91 24 01 00
	00		 mov	 edx, DWORD PTR [ecx+292]
  000cf	52		 push	 edx
  000d0	6b 45 bc 60	 imul	 eax, DWORD PTR tv83[ebp], 96
  000d4	8b 4d b8	 mov	 ecx, DWORD PTR tv91[ebp]
  000d7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  000de	ff d2		 call	 edx

; 99   : 
; 100  : 	get_local_entity_target_point (raw->external_view_entity, &raw->position);

  000e0	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000e7	8b 91 24 01 00
	00		 mov	 edx, DWORD PTR [ecx+292]
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 101  : 
; 102  : 	reset_offset(raw);

  000f3	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ?reset_offset@@YGXPAUCAMERA@@@Z ; reset_offset

; 103  : }

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
?reset_chase_camera@@YGXPAUCAMERA@@@Z ENDP		; reset_chase_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
END
