; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\servlog.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_vsprintf
PUBLIC	_sprintf
PUBLIC	?server_log@@YAXPBDZZ				; server_log
PUBLIC	?get_clock_int_values@@YGXHPAH00@Z		; get_clock_int_values
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_09MOAJOJKN@separator@			; `string'
PUBLIC	??_C@_0BC@FGGDBLCF@?$CF02d?3?$CF02d?3?$CF02d?5?3?5@ ; `string'
PUBLIC	??_C@_0DL@CNMFILOC@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	??_C@_02OMOJBBMD@?10@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_01MCMALHOG@a@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	?get_system_time_of_day@@YGHXZ:PROC		; get_system_time_of_day
EXTRN	?command_line_server_log_filename@@3PADA:BYTE	; command_line_server_log_filename
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?buffer@?1??server_log@@YAXPBDZZ@4PADA DB 03e8H DUP (?)	; `server_log'::`2'::buffer
_BSS	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a@
CONST	SEGMENT
??_C@_01MCMALHOG@a@ DB 'a', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02OMOJBBMD@?10@
CONST	SEGMENT
??_C@_02OMOJBBMD@?10@ DB '/0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@CNMFILOC@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0DL@CNMFILOC@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB '-'
	DB	'---------------------------------------------------------', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FGGDBLCF@?$CF02d?3?$CF02d?3?$CF02d?5?3?5@
CONST	SEGMENT
??_C@_0BC@FGGDBLCF@?$CF02d?3?$CF02d?3?$CF02d?5?3?5@ DB '%02d:%02d:%02d : '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09MOAJOJKN@separator@
CONST	SEGMENT
??_C@_09MOAJOJKN@separator@ DB 'separator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\servlog.c
;	COMDAT ?get_clock_int_values@@YGXHPAH00@Z
_TEXT	SEGMENT
_hours_past_midnight$ = -8				; size = 4
_minutes_past_midnight$ = -4				; size = 4
_time_of_day$ = 8					; size = 4
_hours$ = 12						; size = 4
_minutes$ = 16						; size = 4
_seconds$ = 20						; size = 4
?get_clock_int_values@@YGXHPAH00@Z PROC			; get_clock_int_values, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 135  : 	int
; 136  : 		minutes_past_midnight,
; 137  : 		hours_past_midnight;
; 138  : 
; 139  : //	time_of_day = bound (time_of_day, 0.0, ONE_DAY - 1.0);
; 140  : 
; 141  : 	hours_past_midnight = time_of_day / (60 * 60);

  00009	8b 45 08	 mov	 eax, DWORD PTR _time_of_day$[ebp]
  0000c	99		 cdq
  0000d	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00012	f7 f9		 idiv	 ecx
  00014	89 45 f8	 mov	 DWORD PTR _hours_past_midnight$[ebp], eax

; 142  : 
; 143  : 	minutes_past_midnight = time_of_day / 60;

  00017	8b 45 08	 mov	 eax, DWORD PTR _time_of_day$[ebp]
  0001a	99		 cdq
  0001b	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00020	f7 f9		 idiv	 ecx
  00022	89 45 fc	 mov	 DWORD PTR _minutes_past_midnight$[ebp], eax

; 144  : 
; 145  : 	*hours = hours_past_midnight;

  00025	8b 45 0c	 mov	 eax, DWORD PTR _hours$[ebp]
  00028	8b 4d f8	 mov	 ecx, DWORD PTR _hours_past_midnight$[ebp]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 146  : 
; 147  : 	*minutes = (minutes_past_midnight - (hours_past_midnight * 60));

  0002d	6b 45 f8 3c	 imul	 eax, DWORD PTR _hours_past_midnight$[ebp], 60
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _minutes_past_midnight$[ebp]
  00034	2b c8		 sub	 ecx, eax
  00036	8b 55 10	 mov	 edx, DWORD PTR _minutes$[ebp]
  00039	89 0a		 mov	 DWORD PTR [edx], ecx

; 148  : 
; 149  : 	*seconds = (time_of_day - (minutes_past_midnight * 60));

  0003b	6b 45 fc 3c	 imul	 eax, DWORD PTR _minutes_past_midnight$[ebp], 60
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _time_of_day$[ebp]
  00042	2b c8		 sub	 ecx, eax
  00044	8b 55 14	 mov	 edx, DWORD PTR _seconds$[ebp]
  00047	89 0a		 mov	 DWORD PTR [edx], ecx

; 150  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 10 00	 ret	 16			; 00000010H
?get_clock_int_values@@YGXHPAH00@Z ENDP			; get_clock_int_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\servlog.c
;	COMDAT ?server_log@@YAXPBDZZ
_TEXT	SEGMENT
_args$ = -1020						; size = 4
_buffer2$ = -1016					; size = 1000
_seconds$ = -16						; size = 4
_minutes$ = -12						; size = 4
_hours$ = -8						; size = 4
_fp$ = -4						; size = 4
_msg$ = 8						; size = 4
?server_log@@YAXPBDZZ PROC				; server_log, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 04 00
	00		 sub	 esp, 1152		; 00000480H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 78   : 
; 79   : 	FILE
; 80   : 		*fp;
; 81   : 		
; 82   : 	int
; 83   : 		hours,
; 84   : 		minutes,
; 85   : 		seconds;
; 86   : 	
; 87   : 
; 88   : 	static char
; 89   : 		buffer[1000];
; 90   : 
; 91   : 	char
; 92   : 		buffer2[1000];
; 93   : 
; 94   : 	va_list
; 95   : 		args;
; 96   : 
; 97   : 	va_start (args, msg);

  0000c	8d 45 0c	 lea	 eax, DWORD PTR _msg$[ebp+4]
  0000f	89 85 04 fc ff
	ff		 mov	 DWORD PTR _args$[ebp], eax

; 98   : 
; 99   : 	vsprintf (buffer2, msg, args);

  00015	8b 85 04 fc ff
	ff		 mov	 eax, DWORD PTR _args$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _msg$[ebp]
  0001f	51		 push	 ecx
  00020	8d 95 08 fc ff
	ff		 lea	 edx, DWORD PTR _buffer2$[ebp]
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 _vsprintf
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 100  : 	
; 101  : 	if ( strcmp (buffer2, "separator") != 0 )

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_09MOAJOJKN@separator@
  00034	8d 85 08 fc ff
	ff		 lea	 eax, DWORD PTR _buffer2$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _strcmp
  00040	83 c4 08	 add	 esp, 8
  00043	85 c0		 test	 eax, eax
  00045	74 4b		 je	 SHORT $LN2@server_log

; 102  : 	{
; 103  : 		get_clock_int_values (get_system_time_of_day (), &hours, &minutes, &seconds);

  00047	8d 45 f0	 lea	 eax, DWORD PTR _seconds$[ebp]
  0004a	50		 push	 eax
  0004b	8d 4d f4	 lea	 ecx, DWORD PTR _minutes$[ebp]
  0004e	51		 push	 ecx
  0004f	8d 55 f8	 lea	 edx, DWORD PTR _hours$[ebp]
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 ?get_system_time_of_day@@YGHXZ ; get_system_time_of_day
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?get_clock_int_values@@YGXHPAH00@Z ; get_clock_int_values

; 104  : 	
; 105  : 		sprintf (buffer, "%02d:%02d:%02d : ", hours, minutes, seconds);

  0005e	8b 45 f0	 mov	 eax, DWORD PTR _seconds$[ebp]
  00061	50		 push	 eax
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _minutes$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 f8	 mov	 edx, DWORD PTR _hours$[ebp]
  00069	52		 push	 edx
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FGGDBLCF@?$CF02d?3?$CF02d?3?$CF02d?5?3?5@
  0006f	68 00 00 00 00	 push	 OFFSET ?buffer@?1??server_log@@YAXPBDZZ@4PADA
  00074	e8 00 00 00 00	 call	 _sprintf
  00079	83 c4 14	 add	 esp, 20			; 00000014H

; 106  : 		
; 107  : 		strcat (buffer, buffer2);

  0007c	8d 85 08 fc ff
	ff		 lea	 eax, DWORD PTR _buffer2$[ebp]
  00082	50		 push	 eax
  00083	68 00 00 00 00	 push	 OFFSET ?buffer@?1??server_log@@YAXPBDZZ@4PADA
  00088	e8 00 00 00 00	 call	 _strcat
  0008d	83 c4 08	 add	 esp, 8

; 108  : 	}
; 109  : 	else

  00090	eb 17		 jmp	 SHORT $LN3@server_log
$LN2@server_log:

; 110  : 	{
; 111  : 		sprintf (buffer, "%s", "----------------------------------------------------------");

  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@CNMFILOC@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0009c	68 00 00 00 00	 push	 OFFSET ?buffer@?1??server_log@@YAXPBDZZ@4PADA
  000a1	e8 00 00 00 00	 call	 _sprintf
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@server_log:

; 112  : 	}
; 113  : 
; 114  : 	va_end (args);

  000a9	c7 85 04 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _args$[ebp], 0

; 115  : 
; 116  : 	if (!(strcmp (command_line_server_log_filename, "/0") == 0) &&

  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_02OMOJBBMD@?10@
  000b8	68 00 00 00 00	 push	 OFFSET ?command_line_server_log_filename@@3PADA ; command_line_server_log_filename
  000bd	e8 00 00 00 00	 call	 _strcmp
  000c2	83 c4 08	 add	 esp, 8
  000c5	85 c0		 test	 eax, eax
  000c7	74 77		 je	 SHORT $LN1@server_log
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000ce	68 00 00 00 00	 push	 OFFSET ?command_line_server_log_filename@@3PADA ; command_line_server_log_filename
  000d3	e8 00 00 00 00	 call	 _strcmp
  000d8	83 c4 08	 add	 esp, 8
  000db	85 c0		 test	 eax, eax
  000dd	74 61		 je	 SHORT $LN1@server_log

; 117  : 		!(strcmp (command_line_server_log_filename, "") == 0))
; 118  : 	{
; 119  : 		fp = fopen (command_line_server_log_filename, "a" );

  000df	68 00 00 00 00	 push	 OFFSET ??_C@_01MCMALHOG@a@
  000e4	68 00 00 00 00	 push	 OFFSET ?command_line_server_log_filename@@3PADA ; command_line_server_log_filename
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  000ef	83 c4 08	 add	 esp, 8
  000f2	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 120  : 
; 121  : 		if ( fp )

  000f5	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  000f9	74 45		 je	 SHORT $LN1@server_log

; 122  : 		{
; 123  : 
; 124  : 			fwrite ( buffer, 1, strlen ( buffer ), fp );

  000fb	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000fe	50		 push	 eax
  000ff	68 00 00 00 00	 push	 OFFSET ?buffer@?1??server_log@@YAXPBDZZ@4PADA
  00104	e8 00 00 00 00	 call	 _strlen
  00109	83 c4 04	 add	 esp, 4
  0010c	50		 push	 eax
  0010d	6a 01		 push	 1
  0010f	68 00 00 00 00	 push	 OFFSET ?buffer@?1??server_log@@YAXPBDZZ@4PADA
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0011a	83 c4 10	 add	 esp, 16			; 00000010H

; 125  : 
; 126  : 			fwrite ( "\n", 1, 1, fp );

  0011d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00120	50		 push	 eax
  00121	6a 01		 push	 1
  00123	6a 01		 push	 1
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00130	83 c4 10	 add	 esp, 16			; 00000010H

; 127  : 
; 128  : 			fclose ( fp );

  00133	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00136	50		 push	 eax
  00137	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0013d	83 c4 04	 add	 esp, 4
$LN1@server_log:

; 129  : 		}
; 130  : 	}
; 131  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c3		 ret	 0
?server_log@@YAXPBDZZ ENDP				; server_log
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1477 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1478 :         #pragma warning(push)
; 1479 :         #pragma warning(disable: 4996) // Deprecation
; 1480 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);

  00009	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	6a ff		 push	 -1
  00015	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 __vsnprintf_l
  0001e	83 c4 14	 add	 esp, 20			; 00000014H

; 1481 :         #pragma warning(pop)
; 1482 :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
