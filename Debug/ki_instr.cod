; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_instr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_fmodf
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?get_kiowa_virtual_cockpit_adi_angles@@YGXQAY02MPAM11@Z ; get_kiowa_virtual_cockpit_adi_angles
PUBLIC	?get_kiowa_virtual_cockpit_adi_slip_indicator_needle_value@@YGMXZ ; get_kiowa_virtual_cockpit_adi_slip_indicator_needle_value
PUBLIC	?get_kiowa_virtual_cockpit_airspeed_indicator_needle_value@@YGMXZ ; get_kiowa_virtual_cockpit_airspeed_indicator_needle_value
PUBLIC	?get_kiowa_virtual_cockpit_barometric_altimeter_needle_value@@YGMXZ ; get_kiowa_virtual_cockpit_barometric_altimeter_needle_value
PUBLIC	?get_kiowa_virtual_cockpit_clock_hand_values@@YGXPAM00@Z ; get_kiowa_virtual_cockpit_clock_hand_values
PUBLIC	?__LINE__Var@?0??get_clock_hand_values@@YGXPAM00@Z@4JA ; `get_clock_hand_values'::`1'::__LINE__Var
PUBLIC	??_C@_0EP@GAPKNMEI@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	__real@3f91df46a0000000
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c15236000000
PUBLIC	__real@3ff85d84
PUBLIC	__real@3ff921fb51000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4004f1a6c3800000
PUBLIC	__real@400d524fde800000
PUBLIC	__real@4012d97c7cc00000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4028000000000000
PUBLIC	__real@403e000000000000
PUBLIC	__real@4044000000000000
PUBLIC	__real@4049000000000000
PUBLIC	__real@404e000000000000
PUBLIC	__real@4051f948
PUBLIC	__real@4059000000000000
PUBLIC	__real@4062c00000000000
PUBLIC	__real@4069000000000000
PUBLIC	__real@406f400000000000
PUBLIC	__real@4072c00000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@447a0000
PUBLIC	__real@bf79bc65c28f5c29
PUBLIC	__real@bfbaceea00000000
PUBLIC	__real@bfe0c15240000000
PUBLIC	__real@c03e000000000000
PUBLIC	__real@c2200000
PUBLIC	__real@c2480000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	_fmod:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z:PROC ; multiply_matrix3x3_matrix3x3
EXTRN	?get_analogue_clock_values@@YGXMPAM00@Z:PROC	; get_analogue_clock_values
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?test_cockpit_instruments@@3HA:DWORD		; test_cockpit_instruments
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?value@?4??get_barometric_altimeter_needle_value@@YGMXZ@4MA DD 01H DUP (?) ; `get_barometric_altimeter_needle_value'::`5'::value
?hour_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA DD 01H DUP (?) ; `get_clock_hand_values'::`5'::hour_value
?second_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA DD 01H DUP (?) ; `get_clock_hand_values'::`5'::second_value
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2480000
CONST	SEGMENT
__real@c2480000 DD 0c2480000r			; -50
CONST	ENDS
;	COMDAT __real@c2200000
CONST	SEGMENT
__real@c2200000 DD 0c2200000r			; -40
CONST	ENDS
;	COMDAT __real@c03e000000000000
CONST	SEGMENT
__real@c03e000000000000 DQ 0c03e000000000000r	; -30
CONST	ENDS
;	COMDAT __real@bfe0c15240000000
CONST	SEGMENT
__real@bfe0c15240000000 DQ 0bfe0c15240000000r	; -0.523599
CONST	ENDS
;	COMDAT __real@bfbaceea00000000
CONST	SEGMENT
__real@bfbaceea00000000 DQ 0bfbaceea00000000r	; -0.10472
CONST	ENDS
;	COMDAT __real@bf79bc65c28f5c29
CONST	SEGMENT
__real@bf79bc65c28f5c29 DQ 0bf79bc65c28f5c29r	; -0.00628319
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@406f400000000000
CONST	SEGMENT
__real@406f400000000000 DQ 0406f400000000000r	; 250
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@4062c00000000000
CONST	SEGMENT
__real@4062c00000000000 DQ 04062c00000000000r	; 150
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4051f948
CONST	SEGMENT
__real@4051f948 DD 04051f948r			; 3.28084
CONST	ENDS
;	COMDAT __real@404e000000000000
CONST	SEGMENT
__real@404e000000000000 DQ 0404e000000000000r	; 60
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@403e000000000000
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
CONST	ENDS
;	COMDAT __real@4028000000000000
CONST	SEGMENT
__real@4028000000000000 DQ 04028000000000000r	; 12
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4012d97c7cc00000
CONST	SEGMENT
__real@4012d97c7cc00000 DQ 04012d97c7cc00000r	; 4.71239
CONST	ENDS
;	COMDAT __real@400d524fde800000
CONST	SEGMENT
__real@400d524fde800000 DQ 0400d524fde800000r	; 3.66519
CONST	ENDS
;	COMDAT __real@4004f1a6c3800000
CONST	SEGMENT
__real@4004f1a6c3800000 DQ 04004f1a6c3800000r	; 2.61799
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff921fb51000000
CONST	SEGMENT
__real@3ff921fb51000000 DQ 03ff921fb51000000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff85d84
CONST	SEGMENT
__real@3ff85d84 DD 03ff85d84r			; 1.94035
CONST	ENDS
;	COMDAT __real@3ff0c15236000000
CONST	SEGMENT
__real@3ff0c15236000000 DQ 03ff0c15236000000r	; 1.0472
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3f91df46a0000000
CONST	SEGMENT
__real@3f91df46a0000000 DQ 03f91df46a0000000r	; 0.0174533
CONST	ENDS
;	COMDAT ??_C@_0EP@GAPKNMEI@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EP@GAPKNMEI@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_i'
	DB	'nstr.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_clock_hand_values@@YGXPAM00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_clock_hand_values@@YGXPAM00@Z@4JA DD 0b7H ; `get_clock_hand_values'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?value@?4??get_adi_slip_indicator_needle_value@@YGMXZ@4MA DD 0c2200000r ; -40 ; `get_adi_slip_indicator_needle_value'::`5'::value
?value@?4??get_airspeed_indicator_needle_value@@YGMXZ@4MA DD 0c2480000r ; -50 ; `get_airspeed_indicator_needle_value'::`5'::value
?minute_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA DD 041f00000r ; 30 ; `get_clock_hand_values'::`5'::minute_value
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_instr.c
;	COMDAT ?get_clock_hand_values@@YGXPAM00@Z
_TEXT	SEGMENT
tv94 = -88						; size = 4
tv86 = -84						; size = 4
_second_hand_value$ = -16				; size = 4
_minute_hand_value$ = -12				; size = 4
_hour_hand_value$ = -8					; size = 4
_time_of_day$ = -4					; size = 4
_hours$ = 8						; size = 4
_minutes$ = 12						; size = 4
_seconds$ = 16						; size = 4
?get_clock_hand_values@@YGXPAM00@Z PROC			; get_clock_hand_values, COMDAT

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 184  : 	float
; 185  : 		time_of_day,
; 186  : 		hour_hand_value,
; 187  : 		minute_hand_value,
; 188  : 		second_hand_value;
; 189  : 
; 190  : 	if (test_cockpit_instruments)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?test_cockpit_instruments@@3HA, 0 ; test_cockpit_instruments
  00010	0f 84 d7 00 00
	00		 je	 $LN2@get_clock_

; 191  : 	{
; 192  : 		static float
; 193  : 			hour_value = 0.0,
; 194  : 			minute_value = 30.0,
; 195  : 			second_value = 0.0;
; 196  : 
; 197  : 		hour_value += 0.1;

  00016	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hour_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA
  0001e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00026	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0002a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hour_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA, xmm0

; 198  : 
; 199  : 		if (hour_value >= 12.0)

  00032	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hour_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA
  0003a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4028000000000000
  00042	72 0b		 jb	 SHORT $LN4@get_clock_

; 200  : 		{
; 201  : 			hour_value = 0.0;

  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hour_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA, xmm0
$LN4@get_clock_:

; 202  : 		}
; 203  : 
; 204  : 		minute_value += 0.5;

  0004f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?minute_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA
  00057	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0005f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00063	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?minute_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA, xmm0

; 205  : 
; 206  : 		if (minute_value >= 60.0)

  0006b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?minute_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA
  00073	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@404e000000000000
  0007b	72 0b		 jb	 SHORT $LN5@get_clock_

; 207  : 		{
; 208  : 			minute_value = 0.0;

  0007d	0f 57 c0	 xorps	 xmm0, xmm0
  00080	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?minute_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA, xmm0
$LN5@get_clock_:

; 209  : 		}
; 210  : 
; 211  : 		second_value += 1.0;

  00088	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?second_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA
  00090	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00098	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0009c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?second_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA, xmm0

; 212  : 
; 213  : 		if (second_value >= 60.0)

  000a4	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?second_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA
  000ac	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@404e000000000000
  000b4	72 0b		 jb	 SHORT $LN6@get_clock_

; 214  : 		{
; 215  : 			second_value = 0.0;

  000b6	0f 57 c0	 xorps	 xmm0, xmm0
  000b9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?second_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA, xmm0
$LN6@get_clock_:

; 216  : 		}
; 217  : 
; 218  : 		hour_hand_value = hour_value;

  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hour_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA
  000c9	f3 0f 11 45 f8	 movss	 DWORD PTR _hour_hand_value$[ebp], xmm0

; 219  : 
; 220  : 		minute_hand_value = minute_value;

  000ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?minute_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA
  000d6	f3 0f 11 45 f4	 movss	 DWORD PTR _minute_hand_value$[ebp], xmm0

; 221  : 
; 222  : 		second_hand_value = second_value;

  000db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?second_value@?4??get_clock_hand_values@@YGXPAM00@Z@4MA
  000e3	f3 0f 11 45 f0	 movss	 DWORD PTR _second_hand_value$[ebp], xmm0

; 223  : 	}
; 224  : 	else

  000e8	e9 a7 00 00 00	 jmp	 $LN3@get_clock_
$LN2@get_clock_:

; 225  : 	{
; 226  : 		time_of_day = get_local_entity_float_value (get_session_entity (), FLOAT_TYPE_TIME_OF_DAY);

  000ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  000f4	74 0c		 je	 SHORT $LN8@get_clock_
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	89 4d ac	 mov	 DWORD PTR tv86[ebp], ecx
  00100	eb 21		 jmp	 SHORT $LN9@get_clock_
$LN8@get_clock_:
  00102	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_clock_hand_values@@YGXPAM00@Z@4JA
  00108	83 c2 2b	 add	 edx, 43			; 0000002bH
  0010b	52		 push	 edx
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@GAPKNMEI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0011c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN9@get_clock_:
  00123	b9 01 00 00 00	 mov	 ecx, 1
  00128	85 c9		 test	 ecx, ecx
  0012a	74 09		 je	 SHORT $LN10@get_clock_
  0012c	c7 45 a8 8e 00
	00 00		 mov	 DWORD PTR tv94[ebp], 142 ; 0000008eH
  00133	eb 21		 jmp	 SHORT $LN11@get_clock_
$LN10@get_clock_:
  00135	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_clock_hand_values@@YGXPAM00@Z@4JA
  0013b	83 c2 2b	 add	 edx, 43			; 0000002bH
  0013e	52		 push	 edx
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@GAPKNMEI@c?3?2users?2nhv90?2projects?2eech?2ap@
  00144	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0014f	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
$LN11@get_clock_:
  00156	68 8e 00 00 00	 push	 142			; 0000008eH
  0015b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00161	51		 push	 ecx
  00162	69 55 ac bc 02
	00 00		 imul	 edx, DWORD PTR tv86[ebp], 700
  00169	8b 45 a8	 mov	 eax, DWORD PTR tv94[ebp]
  0016c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00173	ff d1		 call	 ecx
  00175	d9 5d fc	 fstp	 DWORD PTR _time_of_day$[ebp]

; 227  : 
; 228  : 		get_analogue_clock_values (time_of_day, &hour_hand_value, &minute_hand_value, &second_hand_value);

  00178	8d 45 f0	 lea	 eax, DWORD PTR _second_hand_value$[ebp]
  0017b	50		 push	 eax
  0017c	8d 4d f4	 lea	 ecx, DWORD PTR _minute_hand_value$[ebp]
  0017f	51		 push	 ecx
  00180	8d 55 f8	 lea	 edx, DWORD PTR _hour_hand_value$[ebp]
  00183	52		 push	 edx
  00184	51		 push	 ecx
  00185	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _time_of_day$[ebp]
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	e8 00 00 00 00	 call	 ?get_analogue_clock_values@@YGXMPAM00@Z ; get_analogue_clock_values
$LN3@get_clock_:

; 229  : 	}
; 230  : 
; 231  : 	*hours = hour_hand_value;

  00194	8b 45 08	 mov	 eax, DWORD PTR _hours$[ebp]
  00197	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _hour_hand_value$[ebp]
  0019c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 232  : 
; 233  : 	*minutes = minute_hand_value;

  001a0	8b 45 0c	 mov	 eax, DWORD PTR _minutes$[ebp]
  001a3	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _minute_hand_value$[ebp]
  001a8	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 234  : 
; 235  : 	*seconds = second_hand_value;

  001ac	8b 45 10	 mov	 eax, DWORD PTR _seconds$[ebp]
  001af	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _second_hand_value$[ebp]
  001b4	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 236  : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c2 0c 00	 ret	 12			; 0000000cH
?get_clock_hand_values@@YGXPAM00@Z ENDP			; get_clock_hand_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_instr.c
;	COMDAT ?get_barometric_altimeter_needle_value@@YGMXZ
_TEXT	SEGMENT
_altimeter_needle_value$ = -4				; size = 4
?get_barometric_altimeter_needle_value@@YGMXZ PROC	; get_barometric_altimeter_needle_value, COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 153  : 	float
; 154  : 		altimeter_needle_value;
; 155  : 
; 156  : 	if (test_cockpit_instruments)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?test_cockpit_instruments@@3HA, 0 ; test_cockpit_instruments
  00010	74 48		 je	 SHORT $LN2@get_barome

; 157  : 	{
; 158  : 		static float
; 159  : 			value = 0.0;
; 160  : 
; 161  : 		value += 10.0;

  00012	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?value@?4??get_barometric_altimeter_needle_value@@YGMXZ@4MA
  0001a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  00022	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?value@?4??get_barometric_altimeter_needle_value@@YGMXZ@4MA, xmm0

; 162  : 
; 163  : 		if (value > 1000.0)

  0002e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?value@?4??get_barometric_altimeter_needle_value@@YGMXZ@4MA
  00036	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  0003e	76 0b		 jbe	 SHORT $LN4@get_barome

; 164  : 		{
; 165  : 			value = 0.0;

  00040	0f 57 c0	 xorps	 xmm0, xmm0
  00043	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?value@?4??get_barometric_altimeter_needle_value@@YGMXZ@4MA, xmm0
$LN4@get_barome:

; 166  : 		}
; 167  : 
; 168  : 		altimeter_needle_value = value;

  0004b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?value@?4??get_barometric_altimeter_needle_value@@YGMXZ@4MA
  00053	f3 0f 11 45 fc	 movss	 DWORD PTR _altimeter_needle_value$[ebp], xmm0

; 169  : 	}
; 170  : 	else

  00058	eb 31		 jmp	 SHORT $LN3@get_barome
$LN2@get_barome:

; 171  : 	{
; 172  : 		altimeter_needle_value = fmod (feet (current_flight_dynamics->barometric_altitude.value), 1000.0f);

  0005a	51		 push	 ecx
  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@447a0000
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0006d	f3 0f 10 80 2c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9260]
  00075	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  0007d	51		 push	 ecx
  0007e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00083	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00088	d9 5d fc	 fstp	 DWORD PTR _altimeter_needle_value$[ebp]
$LN3@get_barome:

; 173  : 	}
; 174  : 
; 175  : 	return (altimeter_needle_value);

  0008b	d9 45 fc	 fld	 DWORD PTR _altimeter_needle_value$[ebp]

; 176  : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
?get_barometric_altimeter_needle_value@@YGMXZ ENDP	; get_barometric_altimeter_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_instr.c
;	COMDAT ?get_airspeed_indicator_needle_value@@YGMXZ
_TEXT	SEGMENT
tv78 = -84						; size = 8
tv79 = -76						; size = 8
_airspeed_needle_value$ = -4				; size = 4
?get_airspeed_indicator_needle_value@@YGMXZ PROC	; get_airspeed_indicator_needle_value, COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 120  : 	float
; 121  : 		airspeed_needle_value;
; 122  : 
; 123  : 	if (test_cockpit_instruments)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?test_cockpit_instruments@@3HA, 0 ; test_cockpit_instruments
  00010	74 4d		 je	 SHORT $LN2@get_airspe

; 124  : 	{
; 125  : 		static float
; 126  : 			value = -50.0;
; 127  : 
; 128  : 		value += 2.0;

  00012	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?value@?4??get_airspeed_indicator_needle_value@@YGMXZ@4MA
  0001a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00022	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?value@?4??get_airspeed_indicator_needle_value@@YGMXZ@4MA, xmm0

; 129  : 
; 130  : 		if (value > 300.0)

  0002e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?value@?4??get_airspeed_indicator_needle_value@@YGMXZ@4MA
  00036	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4072c00000000000
  0003e	76 10		 jbe	 SHORT $LN4@get_airspe

; 131  : 		{
; 132  : 			value = -50.0;

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2480000
  00048	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?value@?4??get_airspeed_indicator_needle_value@@YGMXZ@4MA, xmm0
$LN4@get_airspe:

; 133  : 		}
; 134  : 
; 135  : 		airspeed_needle_value = value;

  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?value@?4??get_airspeed_indicator_needle_value@@YGMXZ@4MA
  00058	f3 0f 11 45 fc	 movss	 DWORD PTR _airspeed_needle_value$[ebp], xmm0

; 136  : 	}
; 137  : 	else

  0005d	eb 1a		 jmp	 SHORT $LN3@get_airspe
$LN2@get_airspe:

; 138  : 	{
; 139  : 		airspeed_needle_value = knots (current_flight_dynamics->indicated_airspeed.value);

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00064	f3 0f 10 80 fc
	23 00 00	 movss	 xmm0, DWORD PTR [eax+9212]
  0006c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  00074	f3 0f 11 45 fc	 movss	 DWORD PTR _airspeed_needle_value$[ebp], xmm0
$LN3@get_airspe:

; 140  : 	}
; 141  : 
; 142  : 	airspeed_needle_value = bound (airspeed_needle_value, 0.0, 250.0);

  00079	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  0007e	0f 57 c9	 xorps	 xmm1, xmm1
  00081	66 0f 2f c8	 comisd	 xmm1, xmm0
  00085	76 0a		 jbe	 SHORT $LN8@get_airspe
  00087	0f 57 c0	 xorps	 xmm0, xmm0
  0008a	f2 0f 11 45 b4	 movsd	 QWORD PTR tv79[ebp], xmm0
  0008f	eb 32		 jmp	 SHORT $LN9@get_airspe
$LN8@get_airspe:
  00091	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  00096	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406f400000000000
  0009e	76 0f		 jbe	 SHORT $LN6@get_airspe
  000a0	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406f400000000000
  000a8	f2 0f 11 45 ac	 movsd	 QWORD PTR tv78[ebp], xmm0
  000ad	eb 0a		 jmp	 SHORT $LN7@get_airspe
$LN6@get_airspe:
  000af	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  000b4	f2 0f 11 45 ac	 movsd	 QWORD PTR tv78[ebp], xmm0
$LN7@get_airspe:
  000b9	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv78[ebp]
  000be	f2 0f 11 45 b4	 movsd	 QWORD PTR tv79[ebp], xmm0
$LN9@get_airspe:
  000c3	f2 0f 5a 45 b4	 cvtsd2ss xmm0, QWORD PTR tv79[ebp]
  000c8	f3 0f 11 45 fc	 movss	 DWORD PTR _airspeed_needle_value$[ebp], xmm0

; 143  : 
; 144  : 	return (airspeed_needle_value);

  000cd	d9 45 fc	 fld	 DWORD PTR _airspeed_needle_value$[ebp]

; 145  : }

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
?get_airspeed_indicator_needle_value@@YGMXZ ENDP	; get_airspeed_indicator_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_instr.c
;	COMDAT ?get_adi_slip_indicator_needle_value@@YGMXZ
_TEXT	SEGMENT
tv78 = -84						; size = 8
tv79 = -76						; size = 8
_slip_needle_value$ = -4				; size = 4
?get_adi_slip_indicator_needle_value@@YGMXZ PROC	; get_adi_slip_indicator_needle_value, COMDAT

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	float
; 88   : 		slip_needle_value;
; 89   : 
; 90   : 	if (test_cockpit_instruments)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?test_cockpit_instruments@@3HA, 0 ; test_cockpit_instruments
  00010	74 4d		 je	 SHORT $LN2@get_adi_sl

; 91   : 	{
; 92   : 		static float
; 93   : 			value = -40.0;
; 94   : 
; 95   : 		value += 1.0;

  00012	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?value@?4??get_adi_slip_indicator_needle_value@@YGMXZ@4MA
  0001a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00022	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?value@?4??get_adi_slip_indicator_needle_value@@YGMXZ@4MA, xmm0

; 96   : 
; 97   : 		if (value > 40.0)

  0002e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?value@?4??get_adi_slip_indicator_needle_value@@YGMXZ@4MA
  00036	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4044000000000000
  0003e	76 10		 jbe	 SHORT $LN4@get_adi_sl

; 98   : 		{
; 99   : 			value = -40.0;

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2200000
  00048	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?value@?4??get_adi_slip_indicator_needle_value@@YGMXZ@4MA, xmm0
$LN4@get_adi_sl:

; 100  : 		}
; 101  : 
; 102  : 		slip_needle_value = value;

  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?value@?4??get_adi_slip_indicator_needle_value@@YGMXZ@4MA
  00058	f3 0f 11 45 fc	 movss	 DWORD PTR _slip_needle_value$[ebp], xmm0

; 103  : 	}
; 104  : 	else

  0005d	eb 1a		 jmp	 SHORT $LN3@get_adi_sl
$LN2@get_adi_sl:

; 105  : 	{
; 106  : 		slip_needle_value = knots (current_flight_dynamics->indicated_slip.value);

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00064	f3 0f 10 80 14
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9236]
  0006c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  00074	f3 0f 11 45 fc	 movss	 DWORD PTR _slip_needle_value$[ebp], xmm0
$LN3@get_adi_sl:

; 107  : 	}
; 108  : 
; 109  : 	slip_needle_value = bound (slip_needle_value, -30.0, 30.0);

  00079	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _slip_needle_value$[ebp]
  0007e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c03e000000000000
  00086	66 0f 2f c8	 comisd	 xmm1, xmm0
  0008a	76 0f		 jbe	 SHORT $LN8@get_adi_sl
  0008c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c03e000000000000
  00094	f2 0f 11 45 b4	 movsd	 QWORD PTR tv79[ebp], xmm0
  00099	eb 32		 jmp	 SHORT $LN9@get_adi_sl
$LN8@get_adi_sl:
  0009b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _slip_needle_value$[ebp]
  000a0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@403e000000000000
  000a8	76 0f		 jbe	 SHORT $LN6@get_adi_sl
  000aa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@403e000000000000
  000b2	f2 0f 11 45 ac	 movsd	 QWORD PTR tv78[ebp], xmm0
  000b7	eb 0a		 jmp	 SHORT $LN7@get_adi_sl
$LN6@get_adi_sl:
  000b9	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _slip_needle_value$[ebp]
  000be	f2 0f 11 45 ac	 movsd	 QWORD PTR tv78[ebp], xmm0
$LN7@get_adi_sl:
  000c3	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv78[ebp]
  000c8	f2 0f 11 45 b4	 movsd	 QWORD PTR tv79[ebp], xmm0
$LN9@get_adi_sl:
  000cd	f2 0f 5a 45 b4	 cvtsd2ss xmm0, QWORD PTR tv79[ebp]
  000d2	f3 0f 11 45 fc	 movss	 DWORD PTR _slip_needle_value$[ebp], xmm0

; 110  : 
; 111  : 	return (slip_needle_value);

  000d7	d9 45 fc	 fld	 DWORD PTR _slip_needle_value$[ebp]

; 112  : }

  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
?get_adi_slip_indicator_needle_value@@YGMXZ ENDP	; get_adi_slip_indicator_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_instr.c
;	COMDAT ?get_kiowa_virtual_cockpit_clock_hand_values@@YGXPAM00@Z
_TEXT	SEGMENT
_second_hand_value$ = -12				; size = 4
_minute_hand_value$ = -8				; size = 4
_hour_hand_value$ = -4					; size = 4
_hours$ = 8						; size = 4
_minutes$ = 12						; size = 4
_seconds$ = 16						; size = 4
?get_kiowa_virtual_cockpit_clock_hand_values@@YGXPAM00@Z PROC ; get_kiowa_virtual_cockpit_clock_hand_values, COMDAT

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 373  : 	float
; 374  : 		hour_hand_value,
; 375  : 		minute_hand_value,
; 376  : 		second_hand_value;
; 377  : 
; 378  : 	get_clock_hand_values (&hour_hand_value, &minute_hand_value, &second_hand_value);

  00009	8d 45 f4	 lea	 eax, DWORD PTR _second_hand_value$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d f8	 lea	 ecx, DWORD PTR _minute_hand_value$[ebp]
  00010	51		 push	 ecx
  00011	8d 55 fc	 lea	 edx, DWORD PTR _hour_hand_value$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?get_clock_hand_values@@YGXPAM00@Z ; get_clock_hand_values

; 379  : 
; 380  : 	hour_hand_value *= -PI2 / 12.0;

  0001a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _hour_hand_value$[ebp]
  0001f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0c15240000000
  00027	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0002b	f3 0f 11 45 fc	 movss	 DWORD PTR _hour_hand_value$[ebp], xmm0

; 381  : 
; 382  : 	minute_hand_value *= -PI2 / 60.0;

  00030	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _minute_hand_value$[ebp]
  00035	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfbaceea00000000
  0003d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00041	f3 0f 11 45 f8	 movss	 DWORD PTR _minute_hand_value$[ebp], xmm0

; 383  : 
; 384  : 	second_hand_value *= -PI2 / 60.0;

  00046	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _second_hand_value$[ebp]
  0004b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfbaceea00000000
  00053	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00057	f3 0f 11 45 f4	 movss	 DWORD PTR _second_hand_value$[ebp], xmm0

; 385  : 
; 386  : 	*hours = hour_hand_value;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _hours$[ebp]
  0005f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _hour_hand_value$[ebp]
  00064	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 387  : 
; 388  : 	*minutes = minute_hand_value;

  00068	8b 45 0c	 mov	 eax, DWORD PTR _minutes$[ebp]
  0006b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _minute_hand_value$[ebp]
  00070	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 389  : 
; 390  : 	*seconds = second_hand_value;

  00074	8b 45 10	 mov	 eax, DWORD PTR _seconds$[ebp]
  00077	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _second_hand_value$[ebp]
  0007c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 391  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 0c 00	 ret	 12			; 0000000cH
?get_kiowa_virtual_cockpit_clock_hand_values@@YGXPAM00@Z ENDP ; get_kiowa_virtual_cockpit_clock_hand_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_instr.c
;	COMDAT ?get_kiowa_virtual_cockpit_barometric_altimeter_needle_value@@YGMXZ
_TEXT	SEGMENT
_altimeter_needle_value$ = -4				; size = 4
?get_kiowa_virtual_cockpit_barometric_altimeter_needle_value@@YGMXZ PROC ; get_kiowa_virtual_cockpit_barometric_altimeter_needle_value, COMDAT

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 357  : 	float
; 358  : 		altimeter_needle_value;
; 359  : 
; 360  : 	altimeter_needle_value = get_barometric_altimeter_needle_value ();

  00009	e8 00 00 00 00	 call	 ?get_barometric_altimeter_needle_value@@YGMXZ ; get_barometric_altimeter_needle_value
  0000e	d9 5d fc	 fstp	 DWORD PTR _altimeter_needle_value$[ebp]

; 361  : 
; 362  : 	altimeter_needle_value *= -PI2 / 1000.0;

  00011	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _altimeter_needle_value$[ebp]
  00016	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bf79bc65c28f5c29
  0001e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00022	f3 0f 11 45 fc	 movss	 DWORD PTR _altimeter_needle_value$[ebp], xmm0

; 363  : 
; 364  : 	return (altimeter_needle_value);

  00027	d9 45 fc	 fld	 DWORD PTR _altimeter_needle_value$[ebp]

; 365  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?get_kiowa_virtual_cockpit_barometric_altimeter_needle_value@@YGMXZ ENDP ; get_kiowa_virtual_cockpit_barometric_altimeter_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_instr.c
;	COMDAT ?get_kiowa_virtual_cockpit_airspeed_indicator_needle_value@@YGMXZ
_TEXT	SEGMENT
tv153 = -80						; size = 4
_roll$ = -12						; size = 4
_fraction$ = -8						; size = 4
_airspeed_needle_value$ = -4				; size = 4
?get_kiowa_virtual_cockpit_airspeed_indicator_needle_value@@YGMXZ PROC ; get_kiowa_virtual_cockpit_airspeed_indicator_needle_value, COMDAT

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 306  : 	float
; 307  : 		airspeed_needle_value,
; 308  : 		fraction,
; 309  : 		roll;
; 310  : 
; 311  : 	airspeed_needle_value = get_airspeed_indicator_needle_value ();

  00009	e8 00 00 00 00	 call	 ?get_airspeed_indicator_needle_value@@YGMXZ ; get_airspeed_indicator_needle_value
  0000e	d9 5d fc	 fstp	 DWORD PTR _airspeed_needle_value$[ebp]

; 312  : 
; 313  : 	//
; 314  : 	// non-linear scale
; 315  : 	//
; 316  : 
; 317  : 	if (airspeed_needle_value <= 50.0)

  00011	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  00016	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
  0001e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00022	72 31		 jb	 SHORT $LN2@get_kiowa_

; 318  : 	{
; 319  : 		fraction = airspeed_needle_value * (1.0 / 50.0);

  00024	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  00029	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00031	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _fraction$[ebp], xmm0

; 320  : 
; 321  : 		roll = fraction * rad (60.0);

  0003a	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _fraction$[ebp]
  0003f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  00047	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0004b	f3 0f 11 45 f4	 movss	 DWORD PTR _roll$[ebp], xmm0
  00050	e9 35 01 00 00	 jmp	 $LN9@get_kiowa_
$LN2@get_kiowa_:

; 322  : 	}
; 323  : 	else if (airspeed_needle_value <= 100.0)

  00055	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  0005a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4059000000000000
  00062	66 0f 2f c8	 comisd	 xmm1, xmm0
  00066	72 41		 jb	 SHORT $LN4@get_kiowa_

; 324  : 	{
; 325  : 		fraction = (airspeed_needle_value - 50.0) * (1.0 / 50.0);

  00068	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  0006d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4049000000000000
  00075	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  0007d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00081	f3 0f 11 45 f8	 movss	 DWORD PTR _fraction$[ebp], xmm0

; 326  : 
; 327  : 		roll = (fraction * (rad (150.0) - rad (60.0))) + rad (60.0);

  00086	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _fraction$[ebp]
  0008b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff921fb51000000
  00093	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  0009b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0009f	f3 0f 11 45 f4	 movss	 DWORD PTR _roll$[ebp], xmm0
  000a4	e9 e1 00 00 00	 jmp	 $LN9@get_kiowa_
$LN4@get_kiowa_:

; 328  : 	}
; 329  : 	else if (airspeed_needle_value <= 150.0)

  000a9	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  000ae	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4062c00000000000
  000b6	66 0f 2f c8	 comisd	 xmm1, xmm0
  000ba	72 41		 jb	 SHORT $LN6@get_kiowa_

; 330  : 	{
; 331  : 		fraction = (airspeed_needle_value - 100.0) * (1.0 / 50.0);

  000bc	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  000c1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4059000000000000
  000c9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  000d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d5	f3 0f 11 45 f8	 movss	 DWORD PTR _fraction$[ebp], xmm0

; 332  : 
; 333  : 		roll = (fraction * (rad (210.0) - rad (150.0))) + rad (150.0);

  000da	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _fraction$[ebp]
  000df	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  000e7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4004f1a6c3800000
  000ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f3	f3 0f 11 45 f4	 movss	 DWORD PTR _roll$[ebp], xmm0
  000f8	e9 8d 00 00 00	 jmp	 $LN9@get_kiowa_
$LN6@get_kiowa_:

; 334  : 	}
; 335  : 	else if (airspeed_needle_value <= 200.0)

  000fd	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  00102	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4069000000000000
  0010a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0010e	72 3e		 jb	 SHORT $LN8@get_kiowa_

; 336  : 	{
; 337  : 		fraction = (airspeed_needle_value - 150.0) * (1.0 / 50.0);

  00110	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  00115	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4062c00000000000
  0011d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00125	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00129	f3 0f 11 45 f8	 movss	 DWORD PTR _fraction$[ebp], xmm0

; 338  : 
; 339  : 		roll = (fraction * (rad (270.0) - rad (210.0))) + rad (210.0);

  0012e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _fraction$[ebp]
  00133	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  0013b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@400d524fde800000
  00143	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00147	f3 0f 11 45 f4	 movss	 DWORD PTR _roll$[ebp], xmm0

; 340  : 	}
; 341  : 	else

  0014c	eb 3c		 jmp	 SHORT $LN9@get_kiowa_
$LN8@get_kiowa_:

; 342  : 	{
; 343  : 		fraction = (airspeed_needle_value - 200.0) * (1.0 / 50.0);

  0014e	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed_needle_value$[ebp]
  00153	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4069000000000000
  0015b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00163	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00167	f3 0f 11 45 f8	 movss	 DWORD PTR _fraction$[ebp], xmm0

; 344  : 
; 345  : 		roll = (fraction * (rad (330.0) - rad (270.0))) + rad (270.0);

  0016c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _fraction$[ebp]
  00171	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  00179	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4012d97c7cc00000
  00181	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00185	f3 0f 11 45 f4	 movss	 DWORD PTR _roll$[ebp], xmm0
$LN9@get_kiowa_:

; 346  : 	}
; 347  : 
; 348  : 	return (-roll);

  0018a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0018f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00196	f3 0f 11 45 b0	 movss	 DWORD PTR tv153[ebp], xmm0
  0019b	d9 45 b0	 fld	 DWORD PTR tv153[ebp]

; 349  : }

  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	5b		 pop	 ebx
  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c3		 ret	 0
?get_kiowa_virtual_cockpit_airspeed_indicator_needle_value@@YGMXZ ENDP ; get_kiowa_virtual_cockpit_airspeed_indicator_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_instr.c
;	COMDAT ?get_kiowa_virtual_cockpit_adi_slip_indicator_needle_value@@YGMXZ
_TEXT	SEGMENT
_slip_needle_value$ = -4				; size = 4
?get_kiowa_virtual_cockpit_adi_slip_indicator_needle_value@@YGMXZ PROC ; get_kiowa_virtual_cockpit_adi_slip_indicator_needle_value, COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 290  : 	float
; 291  : 		slip_needle_value;
; 292  : 
; 293  : 	slip_needle_value = get_adi_slip_indicator_needle_value ();

  00009	e8 00 00 00 00	 call	 ?get_adi_slip_indicator_needle_value@@YGMXZ ; get_adi_slip_indicator_needle_value
  0000e	d9 5d fc	 fstp	 DWORD PTR _slip_needle_value$[ebp]

; 294  : 
; 295  : 	slip_needle_value *= rad (30.0) / 30.0;

  00011	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _slip_needle_value$[ebp]
  00016	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a0000000
  0001e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00022	f3 0f 11 45 fc	 movss	 DWORD PTR _slip_needle_value$[ebp], xmm0

; 296  : 
; 297  : 	return (slip_needle_value);

  00027	d9 45 fc	 fld	 DWORD PTR _slip_needle_value$[ebp]

; 298  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?get_kiowa_virtual_cockpit_adi_slip_indicator_needle_value@@YGMXZ ENDP ; get_kiowa_virtual_cockpit_adi_slip_indicator_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\kiowa\ki_instr.c
;	COMDAT ?get_kiowa_virtual_cockpit_adi_angles@@YGXQAY02MPAM11@Z
_TEXT	SEGMENT
tv273 = -176						; size = 4
_result$ = -108						; size = 36
_heading_rotation$ = -72				; size = 36
_inverse_attitude$ = -36				; size = 36
_attitude$ = 8						; size = 4
_heading$ = 12						; size = 4
_pitch$ = 16						; size = 4
_roll$ = 20						; size = 4
?get_kiowa_virtual_cockpit_adi_angles@@YGXQAY02MPAM11@Z PROC ; get_kiowa_virtual_cockpit_adi_angles, COMDAT

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 250  : 	matrix3x3
; 251  : 		inverse_attitude,
; 252  : 		heading_rotation,
; 253  : 		result;
; 254  : 
; 255  : 	//
; 256  : 	// get inverse attitude (attiude * inverse attitude = identity) which aligns the ADI with the world axis
; 257  : 	//
; 258  : 
; 259  : 	inverse_attitude[0][0] = attitude[0][0];

  0000c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	03 4d 08	 add	 ecx, DWORD PTR _attitude$[ebp]
  00017	ba 04 00 00 00	 mov	 edx, 4
  0001c	6b c2 00	 imul	 eax, edx, 0
  0001f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00024	6b d2 00	 imul	 edx, edx, 0
  00027	8d 54 15 dc	 lea	 edx, DWORD PTR _inverse_attitude$[ebp+edx]
  0002b	be 04 00 00 00	 mov	 esi, 4
  00030	6b f6 00	 imul	 esi, esi, 0
  00033	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00036	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 260  : 	inverse_attitude[1][0] = attitude[0][1];

  00039	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	03 4d 08	 add	 ecx, DWORD PTR _attitude$[ebp]
  00044	ba 04 00 00 00	 mov	 edx, 4
  00049	c1 e2 00	 shl	 edx, 0
  0004c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00051	c1 e0 00	 shl	 eax, 0
  00054	8d 44 05 dc	 lea	 eax, DWORD PTR _inverse_attitude$[ebp+eax]
  00058	be 04 00 00 00	 mov	 esi, 4
  0005d	6b f6 00	 imul	 esi, esi, 0
  00060	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  00063	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 261  : 	inverse_attitude[2][0] = attitude[0][2];

  00066	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0006b	6b c8 00	 imul	 ecx, eax, 0
  0006e	03 4d 08	 add	 ecx, DWORD PTR _attitude$[ebp]
  00071	ba 04 00 00 00	 mov	 edx, 4
  00076	d1 e2		 shl	 edx, 1
  00078	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0007d	d1 e0		 shl	 eax, 1
  0007f	8d 44 05 dc	 lea	 eax, DWORD PTR _inverse_attitude$[ebp+eax]
  00083	be 04 00 00 00	 mov	 esi, 4
  00088	6b f6 00	 imul	 esi, esi, 0
  0008b	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  0008e	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 262  : 	inverse_attitude[0][1] = attitude[1][0];

  00091	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00096	c1 e0 00	 shl	 eax, 0
  00099	03 45 08	 add	 eax, DWORD PTR _attitude$[ebp]
  0009c	b9 04 00 00 00	 mov	 ecx, 4
  000a1	6b d1 00	 imul	 edx, ecx, 0
  000a4	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000a9	6b c9 00	 imul	 ecx, ecx, 0
  000ac	8d 4c 0d dc	 lea	 ecx, DWORD PTR _inverse_attitude$[ebp+ecx]
  000b0	be 04 00 00 00	 mov	 esi, 4
  000b5	c1 e6 00	 shl	 esi, 0
  000b8	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  000bb	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 263  : 	inverse_attitude[1][1] = attitude[1][1];

  000be	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000c3	c1 e0 00	 shl	 eax, 0
  000c6	03 45 08	 add	 eax, DWORD PTR _attitude$[ebp]
  000c9	b9 04 00 00 00	 mov	 ecx, 4
  000ce	c1 e1 00	 shl	 ecx, 0
  000d1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000d6	c1 e2 00	 shl	 edx, 0
  000d9	8d 54 15 dc	 lea	 edx, DWORD PTR _inverse_attitude$[ebp+edx]
  000dd	be 04 00 00 00	 mov	 esi, 4
  000e2	c1 e6 00	 shl	 esi, 0
  000e5	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  000e8	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 264  : 	inverse_attitude[2][1] = attitude[1][2];

  000eb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000f0	c1 e0 00	 shl	 eax, 0
  000f3	03 45 08	 add	 eax, DWORD PTR _attitude$[ebp]
  000f6	b9 04 00 00 00	 mov	 ecx, 4
  000fb	d1 e1		 shl	 ecx, 1
  000fd	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00102	d1 e2		 shl	 edx, 1
  00104	8d 54 15 dc	 lea	 edx, DWORD PTR _inverse_attitude$[ebp+edx]
  00108	be 04 00 00 00	 mov	 esi, 4
  0010d	c1 e6 00	 shl	 esi, 0
  00110	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00113	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 265  : 	inverse_attitude[0][2] = attitude[2][0];

  00116	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0011b	d1 e0		 shl	 eax, 1
  0011d	03 45 08	 add	 eax, DWORD PTR _attitude$[ebp]
  00120	b9 04 00 00 00	 mov	 ecx, 4
  00125	6b d1 00	 imul	 edx, ecx, 0
  00128	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0012d	6b c9 00	 imul	 ecx, ecx, 0
  00130	8d 4c 0d dc	 lea	 ecx, DWORD PTR _inverse_attitude$[ebp+ecx]
  00134	be 04 00 00 00	 mov	 esi, 4
  00139	d1 e6		 shl	 esi, 1
  0013b	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0013e	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 266  : 	inverse_attitude[1][2] = attitude[2][1];

  00141	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00146	d1 e0		 shl	 eax, 1
  00148	03 45 08	 add	 eax, DWORD PTR _attitude$[ebp]
  0014b	b9 04 00 00 00	 mov	 ecx, 4
  00150	c1 e1 00	 shl	 ecx, 0
  00153	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00158	c1 e2 00	 shl	 edx, 0
  0015b	8d 54 15 dc	 lea	 edx, DWORD PTR _inverse_attitude$[ebp+edx]
  0015f	be 04 00 00 00	 mov	 esi, 4
  00164	d1 e6		 shl	 esi, 1
  00166	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00169	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 267  : 	inverse_attitude[2][2] = attitude[2][2];

  0016c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00171	d1 e0		 shl	 eax, 1
  00173	03 45 08	 add	 eax, DWORD PTR _attitude$[ebp]
  00176	b9 04 00 00 00	 mov	 ecx, 4
  0017b	d1 e1		 shl	 ecx, 1
  0017d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00182	d1 e2		 shl	 edx, 1
  00184	8d 54 15 dc	 lea	 edx, DWORD PTR _inverse_attitude$[ebp+edx]
  00188	be 04 00 00 00	 mov	 esi, 4
  0018d	d1 e6		 shl	 esi, 1
  0018f	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00192	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 268  : 
; 269  : 	//
; 270  : 	// rotate heading so that the ADI pitch markings face the pilot
; 271  : 	//
; 272  : 
; 273  : 	get_3d_transformation_matrix (heading_rotation, get_heading_from_attitude_matrix (attitude), 0.0, 0.0);

  00195	51		 push	 ecx
  00196	0f 57 c0	 xorps	 xmm0, xmm0
  00199	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019e	51		 push	 ecx
  0019f	0f 57 c0	 xorps	 xmm0, xmm0
  001a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ac	d1 e0		 shl	 eax, 1
  001ae	03 45 08	 add	 eax, DWORD PTR _attitude$[ebp]
  001b1	b9 04 00 00 00	 mov	 ecx, 4
  001b6	d1 e1		 shl	 ecx, 1
  001b8	51		 push	 ecx
  001b9	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  001be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c3	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001c8	d1 e2		 shl	 edx, 1
  001ca	03 55 08	 add	 edx, DWORD PTR _attitude$[ebp]
  001cd	b8 04 00 00 00	 mov	 eax, 4
  001d2	6b c8 00	 imul	 ecx, eax, 0
  001d5	51		 push	 ecx
  001d6	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  001e5	d9 9d 50 ff ff
	ff		 fstp	 DWORD PTR tv273[ebp]
  001eb	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv273[ebp]
  001f3	51		 push	 ecx
  001f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f9	8d 55 b8	 lea	 edx, DWORD PTR _heading_rotation$[ebp]
  001fc	52		 push	 edx
  001fd	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 274  : 
; 275  : 	multiply_matrix3x3_matrix3x3 (result, heading_rotation, inverse_attitude);

  00202	8d 45 dc	 lea	 eax, DWORD PTR _inverse_attitude$[ebp]
  00205	50		 push	 eax
  00206	8d 4d b8	 lea	 ecx, DWORD PTR _heading_rotation$[ebp]
  00209	51		 push	 ecx
  0020a	8d 55 94	 lea	 edx, DWORD PTR _result$[ebp]
  0020d	52		 push	 edx
  0020e	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 276  : 
; 277  : 	*heading = get_heading_from_attitude_matrix (result);

  00213	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00218	d1 e0		 shl	 eax, 1
  0021a	8d 4c 05 94	 lea	 ecx, DWORD PTR _result$[ebp+eax]
  0021e	ba 04 00 00 00	 mov	 edx, 4
  00223	d1 e2		 shl	 edx, 1
  00225	51		 push	 ecx
  00226	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0022b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00230	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00235	d1 e0		 shl	 eax, 1
  00237	8d 4c 05 94	 lea	 ecx, DWORD PTR _result$[ebp+eax]
  0023b	ba 04 00 00 00	 mov	 edx, 4
  00240	6b c2 00	 imul	 eax, edx, 0
  00243	51		 push	 ecx
  00244	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00249	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024e	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00253	8b 4d 0c	 mov	 ecx, DWORD PTR _heading$[ebp]
  00256	d9 19		 fstp	 DWORD PTR [ecx]

; 278  : 
; 279  : 	*pitch = get_pitch_from_attitude_matrix (result);

  00258	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0025d	d1 e0		 shl	 eax, 1
  0025f	8d 4c 05 94	 lea	 ecx, DWORD PTR _result$[ebp+eax]
  00263	ba 04 00 00 00	 mov	 edx, 4
  00268	c1 e2 00	 shl	 edx, 0
  0026b	51		 push	 ecx
  0026c	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00271	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00276	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  0027b	8b 45 10	 mov	 eax, DWORD PTR _pitch$[ebp]
  0027e	d9 18		 fstp	 DWORD PTR [eax]

; 280  : 
; 281  : 	*roll = get_roll_from_attitude_matrix (result);

  00280	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00285	c1 e0 00	 shl	 eax, 0
  00288	8d 4c 05 94	 lea	 ecx, DWORD PTR _result$[ebp+eax]
  0028c	ba 04 00 00 00	 mov	 edx, 4
  00291	c1 e2 00	 shl	 edx, 0
  00294	51		 push	 ecx
  00295	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002a4	6b c8 00	 imul	 ecx, eax, 0
  002a7	8d 54 0d 94	 lea	 edx, DWORD PTR _result$[ebp+ecx]
  002ab	b8 04 00 00 00	 mov	 eax, 4
  002b0	c1 e0 00	 shl	 eax, 0
  002b3	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  002b8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002bf	51		 push	 ecx
  002c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c5	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  002ca	8b 4d 14	 mov	 ecx, DWORD PTR _roll$[ebp]
  002cd	d9 19		 fstp	 DWORD PTR [ecx]

; 282  : }

  002cf	5f		 pop	 edi
  002d0	5e		 pop	 esi
  002d1	5b		 pop	 ebx
  002d2	8b e5		 mov	 esp, ebp
  002d4	5d		 pop	 ebp
  002d5	c2 10 00	 ret	 16			; 00000010H
?get_kiowa_virtual_cockpit_adi_angles@@YGXQAY02MPAM11@Z ENDP ; get_kiowa_virtual_cockpit_adi_angles
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
END
