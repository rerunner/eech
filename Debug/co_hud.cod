; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?hud_colour_table@@3PAUREAL_COLOUR@@A		; hud_colour_table
PUBLIC	?hud_colour@@3UREAL_COLOUR@@A			; hud_colour
PUBLIC	?display_hud_layout_grid@@3HA			; display_hud_layout_grid
PUBLIC	?hud_bob_up_overlay@@3HA			; hud_bob_up_overlay
PUBLIC	?hud_bob_up_heading@@3MA			; hud_bob_up_heading
PUBLIC	?hud_bob_up_position@@3UVEC3D@@A		; hud_bob_up_position
PUBLIC	?hud_mode@@3W4HUD_MODES@@A			; hud_mode
PUBLIC	?previous_hud_mode@@3W4HUD_MODES@@A		; previous_hud_mode
PUBLIC	?hsd@@3UHUD_SCREEN_DATA@@A			; hsd
_BSS	SEGMENT
?hud_colour_table@@3PAUREAL_COLOUR@@A DD 017H DUP (?)	; hud_colour_table
?hud_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)		; hud_colour
?display_hud_layout_grid@@3HA DD 01H DUP (?)		; display_hud_layout_grid
?hud_bob_up_overlay@@3HA DD 01H DUP (?)			; hud_bob_up_overlay
?hud_bob_up_heading@@3MA DD 01H DUP (?)			; hud_bob_up_heading
?hud_bob_up_position@@3UVEC3D@@A DB 0cH DUP (?)		; hud_bob_up_position
?hud_mode@@3W4HUD_MODES@@A DD 01H DUP (?)		; hud_mode
?previous_hud_mode@@3W4HUD_MODES@@A DD 01H DUP (?)	; previous_hud_mode
?hsd@@3UHUD_SCREEN_DATA@@A DB 024H DUP (?)		; hsd
_BSS	ENDS
PUBLIC	?initialise_common_hud@@YGXXZ			; initialise_common_hud
PUBLIC	?deinitialise_common_hud@@YGXXZ			; deinitialise_common_hud
PUBLIC	?update_common_hud@@YGXXZ			; update_common_hud
PUBLIC	?set_next_hud_colour@@YGXXZ			; set_next_hud_colour
PUBLIC	?set_prev_hud_colour@@YGXXZ			; set_prev_hud_colour
PUBLIC	?set_hud_bob_up_overlay@@YGXXZ			; set_hud_bob_up_overlay
PUBLIC	?switch_hud_mode@@YGXXZ				; switch_hud_mode
PUBLIC	?clear_hud_bob_up_overlay@@YGXXZ		; clear_hud_bob_up_overlay
PUBLIC	?display_hud_on_external_view@@YGXXZ		; display_hud_on_external_view
PUBLIC	?draw_hud_background@@YGXPAUHUD_SCREEN_DATA@@H@Z ; draw_hud_background
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BB@KPCLNHBL@hud?5colour?5?$CFd?5?$CFd@	; `string'
PUBLIC	?__LINE__Var@?0??set_hud_bob_up_overlay@@YGXXZ@4JA ; `set_hud_bob_up_overlay'::`1'::__LINE__Var
PUBLIC	??_C@_0EO@INPDBJAN@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4034000000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?set_global_hud_colour@@YGXW4HUD_COLOURS@@@Z:PROC ; set_global_hud_colour
EXTRN	?draw_apache_hud@@YGXXZ:PROC			; draw_apache_hud
EXTRN	?draw_comanche_hud@@YGXXZ:PROC			; draw_comanche_hud
EXTRN	?draw_external_havoc_hud@@YGXXZ:PROC		; draw_external_havoc_hud
EXTRN	?draw_havoc_hms@@YGXXZ:PROC			; draw_havoc_hms
EXTRN	?draw_external_hokum_hud@@YGXXZ:PROC		; draw_external_hokum_hud
EXTRN	?draw_hokum_hms@@YGXXZ:PROC			; draw_hokum_hms
EXTRN	?draw_blackhawk_hud@@YGXXZ:PROC			; draw_blackhawk_hud
EXTRN	?draw_external_hind_hud@@YGXXZ:PROC		; draw_external_hind_hud
EXTRN	?draw_hind_hms@@YGXXZ:PROC			; draw_hind_hms
EXTRN	?get_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ:PROC	; get_hind_hud_colour
EXTRN	?get_next_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ:PROC ; get_next_hind_hud_colour
EXTRN	?get_prev_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ:PROC ; get_prev_hind_hud_colour
EXTRN	?draw_ah64a_hud@@YGXXZ:PROC			; draw_ah64a_hud
EXTRN	?draw_external_ka50_hud@@YGXXZ:PROC		; draw_external_ka50_hud
EXTRN	?draw_ka50_hms@@YGXXZ:PROC			; draw_ka50_hms
EXTRN	?draw_viper_hud@@YGXXZ:PROC			; draw_viper_hud
EXTRN	?draw_kiowa_hud@@YGXXZ:PROC			; draw_kiowa_hud
EXTRN	?draw_default_hud@@YGXXZ:PROC			; draw_default_hud
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?global_hud_alpha@@3HA:DWORD			; global_hud_alpha
EXTRN	?global_hud_size2@@3MA:DWORD			; global_hud_size2
EXTRN	?global_mfd_size@@3MA:DWORD			; global_mfd_size
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?hud_code@@3PAY03HA:BYTE			; hud_code
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	__fltused:DWORD
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@INPDBJAN@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EO@INPDBJAN@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\common\co_'
	DB	'hud.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_hud_bob_up_overlay@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_hud_bob_up_overlay@@YGXXZ@4JA DD 0eaH ; `set_hud_bob_up_overlay'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BB@KPCLNHBL@hud?5colour?5?$CFd?5?$CFd@
CONST	SEGMENT
??_C@_0BB@KPCLNHBL@hud?5colour?5?$CFd?5?$CFd@ DB 'hud colour %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
;	COMDAT ?draw_hud_background@@YGXPAUHUD_SCREEN_DATA@@H@Z
_TEXT	SEGMENT
tv135 = -336						; size = 4
_specular$ = -268					; size = 4
_colour$ = -264						; size = 4
_clear_hud_colour$ = -260				; size = 4
_quad$ = -256						; size = 256
_hd$ = 8						; size = 4
_alpha$ = 12						; size = 4
?draw_hud_background@@YGXPAUHUD_SCREEN_DATA@@H@Z PROC	; draw_hud_background, COMDAT

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 393  : 	vertex
; 394  : 		quad[4];
; 395  : 	
; 396  : 	real_colour
; 397  : 		clear_hud_colour, 
; 398  : 		colour,
; 399  : 		specular;
; 400  : 	
; 401  : 	set_active_screen (hd->hud_texture_screen);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _hd$[ebp]
  0000f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 402  : 
; 403  : 	if (lock_screen (hd->hud_texture_screen))

  00018	8b 45 08	 mov	 eax, DWORD PTR _hd$[ebp]
  0001b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00024	85 c0		 test	 eax, eax
  00026	74 63		 je	 SHORT $LN4@draw_hud_b

; 404  : 	{
; 405  : 		set_rgb_colour (clear_hud_colour, 255,255,255,255);

  00028	c6 85 fe fe ff
	ff ff		 mov	 BYTE PTR _clear_hud_colour$[ebp+2], 255 ; 000000ffH
  0002f	c6 85 fd fe ff
	ff ff		 mov	 BYTE PTR _clear_hud_colour$[ebp+1], 255 ; 000000ffH
  00036	c6 85 fc fe ff
	ff ff		 mov	 BYTE PTR _clear_hud_colour$[ebp], 255 ; 000000ffH
  0003d	c6 85 ff fe ff
	ff ff		 mov	 BYTE PTR _clear_hud_colour$[ebp+3], 255 ; 000000ffH

; 406  : 
; 407  : 		set_block (hd->hud_viewport_x_min, hd->hud_viewport_y_min, hd->hud_viewport_x_max, hd->hud_viewport_y_max, clear_hud_colour);  

  00044	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _clear_hud_colour$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _hd$[ebp]
  0004e	f3 0f 2c 51 0c	 cvttss2si edx, DWORD PTR [ecx+12]
  00053	52		 push	 edx
  00054	8b 45 08	 mov	 eax, DWORD PTR _hd$[ebp]
  00057	f3 0f 2c 48 08	 cvttss2si ecx, DWORD PTR [eax+8]
  0005c	51		 push	 ecx
  0005d	8b 55 08	 mov	 edx, DWORD PTR _hd$[ebp]
  00060	f3 0f 2c 42 04	 cvttss2si eax, DWORD PTR [edx+4]
  00065	50		 push	 eax
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _hd$[ebp]
  00069	f3 0f 2c 11	 cvttss2si edx, DWORD PTR [ecx]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 408  : 
; 409  : 		flush_screen_texture_graphics (hd->hud_texture_screen);

  00073	8b 45 08	 mov	 eax, DWORD PTR _hd$[ebp]
  00076	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 410  : 
; 411  : 		unlock_screen (hd->hud_texture_screen);

  0007f	8b 45 08	 mov	 eax, DWORD PTR _hd$[ebp]
  00082	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN4@draw_hud_b:

; 412  : 	}
; 413  : 
; 414  : 	set_active_screen (video_screen);

  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 415  : 
; 416  : 	////////////////////////////////////////
; 417  : 	//
; 418  : 	// render HUD to screen
; 419  : 	//
; 420  : 	////////////////////////////////////////
; 421  : 
; 422  : 	set_3d_active_environment (main_3d_env);

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 423  : 
; 424  : 	if (begin_3d_scene ())

  000a1	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  000a6	85 c0		 test	 eax, eax
  000a8	0f 84 a9 03 00
	00		 je	 $LN5@draw_hud_b

; 425  : 	{
; 426  : 		set_d3d_transparency_on ();

  000ae	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 427  : 
; 428  : 		set_d3d_zbuffer_comparison (FALSE);

  000b3	6a 00		 push	 0
  000b5	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 429  : 
; 430  : 		set_d3d_culling (FALSE);

  000ba	6a 00		 push	 0
  000bc	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 431  : 
; 432  : 		set_d3d_texture_wrapping (0, FALSE);

  000c1	6a 00		 push	 0
  000c3	6a 00		 push	 0
  000c5	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 433  : 
; 434  : 		if ((application_video_width == 640) || (get_global_unscaled_displays ()))

  000ca	81 3d 00 00 00
	00 80 02 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 640 ; application_video_width, 00000280H
  000d4	74 09		 je	 SHORT $LN8@draw_hud_b
  000d6	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  000dd	74 17		 je	 SHORT $LN6@draw_hud_b
$LN8@draw_hud_b:

; 435  : 		{
; 436  : 			set_d3d_texture_mag_filtering (FALSE);

  000df	6a 00		 push	 0
  000e1	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 437  : 			set_d3d_texture_min_filtering (FALSE);

  000e6	6a 00		 push	 0
  000e8	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 438  : 			set_d3d_texture_mip_filtering (FALSE);

  000ed	6a 00		 push	 0
  000ef	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 439  : 		}
; 440  : 		else

  000f4	eb 15		 jmp	 SHORT $LN7@draw_hud_b
$LN6@draw_hud_b:

; 441  : 		{
; 442  : 			set_d3d_texture_mag_filtering (TRUE);

  000f6	6a 01		 push	 1
  000f8	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 443  : 			set_d3d_texture_min_filtering (TRUE);

  000fd	6a 01		 push	 1
  000ff	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 444  : 			set_d3d_texture_mip_filtering (FALSE);

  00104	6a 00		 push	 0
  00106	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering
$LN7@draw_hud_b:

; 445  : 		}
; 446  : 		
; 447  : 		switch (get_global_gunship_type ())

  0010b	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12
  00110	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00116	83 bd b0 fe ff
	ff 02		 cmp	 DWORD PTR tv135[ebp], 2
  0011d	74 14		 je	 SHORT $LN9@draw_hud_b
  0011f	83 bd b0 fe ff
	ff 07		 cmp	 DWORD PTR tv135[ebp], 7
  00126	7e 1d		 jle	 SHORT $LN10@draw_hud_b
  00128	83 bd b0 fe ff
	ff 09		 cmp	 DWORD PTR tv135[ebp], 9
  0012f	7e 02		 jle	 SHORT $LN9@draw_hud_b
  00131	eb 12		 jmp	 SHORT $LN10@draw_hud_b
$LN9@draw_hud_b:

; 448  : 		{
; 449  : 			case GUNSHIP_TYPE_COMANCHE:
; 450  : 			case GUNSHIP_TYPE_VIPER:
; 451  : 			case GUNSHIP_TYPE_KIOWA:
; 452  : 			{
; 453  : 				set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD));

  00133	68 f8 00 00 00	 push	 248			; 000000f8H
  00138	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 454  : 				break;

  00143	eb 10		 jmp	 SHORT $LN2@draw_hud_b
$LN10@draw_hud_b:

; 455  : 			}
; 456  : 			default:
; 457  : 			{
; 458  : 				set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (TEXTURE_INDEX_COMANCHE_MFD2));

  00145	68 55 06 00 00	 push	 1621			; 00000655H
  0014a	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate
$LN2@draw_hud_b:

; 459  : 				break;
; 460  : 			}
; 461  : 		}
; 462  : 
; 463  : 		////////////////////////////////////////
; 464  : 		//
; 465  : 
; 466  : 		colour.red	 			= 48;

  00155	c6 85 fa fe ff
	ff 30		 mov	 BYTE PTR _colour$[ebp+2], 48 ; 00000030H

; 467  : 		colour.green			= 48;

  0015c	c6 85 f9 fe ff
	ff 30		 mov	 BYTE PTR _colour$[ebp+1], 48 ; 00000030H

; 468  : 		colour.blue	 			= 16;

  00163	c6 85 f8 fe ff
	ff 10		 mov	 BYTE PTR _colour$[ebp], 16 ; 00000010H

; 469  : 		colour.alpha  			= min(alpha, global_hud_alpha);

  0016a	68 00 00 00 00	 push	 OFFSET ?global_hud_alpha@@3HA ; global_hud_alpha
  0016f	8d 45 0c	 lea	 eax, DWORD PTR _alpha$[ebp]
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00178	8a 08		 mov	 cl, BYTE PTR [eax]
  0017a	88 8d fb fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+3], cl

; 470  : 		
; 471  : 		specular.red 			= 0;

  00180	c6 85 f6 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 472  : 		specular.green	 		= 0;

  00187	c6 85 f5 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 473  : 		specular.blue 			= 0;

  0018e	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 474  : 		specular.alpha	  		= 255;

  00195	c6 85 f7 fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 475  : 
; 476  : 		quad[0].i 				= hd->hud_screen_x_min;

  0019c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001a1	6b c8 00	 imul	 ecx, eax, 0
  001a4	8b 55 08	 mov	 edx, DWORD PTR _hd$[ebp]
  001a7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001aa	89 84 0d 10 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+ecx+16], eax

; 477  : 		quad[0].j  				= hd->hud_screen_y_min;

  001b1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b6	6b c8 00	 imul	 ecx, eax, 0
  001b9	8b 55 08	 mov	 edx, DWORD PTR _hd$[ebp]
  001bc	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001bf	89 84 0d 14 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+ecx+20], eax

; 478  : 		quad[0].z  				= 0.5;

  001c6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001cb	6b c8 00	 imul	 ecx, eax, 0
  001ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001d6	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 479  : 		quad[0].q  				= 0.5;

  001df	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e4	6b c8 00	 imul	 ecx, eax, 0
  001e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001ef	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 480  : 		quad[0].u  				= 0.0;

  001f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001fd	6b c8 00	 imul	 ecx, eax, 0
  00200	0f 57 c0	 xorps	 xmm0, xmm0
  00203	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 481  : 		quad[0].v				= 0.0;

  0020c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00211	6b c8 00	 imul	 ecx, eax, 0
  00214	0f 57 c0	 xorps	 xmm0, xmm0
  00217	f3 0f 11 84 0d
	1c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 482  : 
; 483  : 		quad[1].i  				= hd->hud_screen_x_max;

  00220	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00225	c1 e0 00	 shl	 eax, 0
  00228	8b 4d 08	 mov	 ecx, DWORD PTR _hd$[ebp]
  0022b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0022e	89 94 05 10 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+16], edx

; 484  : 		quad[1].j  				= hd->hud_screen_y_min;

  00235	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0023a	c1 e0 00	 shl	 eax, 0
  0023d	8b 4d 08	 mov	 ecx, DWORD PTR _hd$[ebp]
  00240	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00243	89 94 05 14 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+20], edx

; 485  : 		quad[1].z  				= 0.5;

  0024a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0024f	c1 e0 00	 shl	 eax, 0
  00252	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0025a	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 486  : 		quad[1].q  				= 0.5;

  00263	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00268	c1 e0 00	 shl	 eax, 0
  0026b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00273	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 487  : 		quad[1].u  				= 1.0;

  0027c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00281	c1 e0 00	 shl	 eax, 0
  00284	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0028c	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 488  : 		quad[1].v  				= 0.0;

  00295	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0029a	c1 e0 00	 shl	 eax, 0
  0029d	0f 57 c0	 xorps	 xmm0, xmm0
  002a0	f3 0f 11 84 05
	1c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 489  : 
; 490  : 		quad[2].i				= hd->hud_screen_x_max;

  002a9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002ae	d1 e0		 shl	 eax, 1
  002b0	8b 4d 08	 mov	 ecx, DWORD PTR _hd$[ebp]
  002b3	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  002b6	89 94 05 10 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+16], edx

; 491  : 		quad[2].j  				= hd->hud_screen_y_max;

  002bd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002c2	d1 e0		 shl	 eax, 1
  002c4	8b 4d 08	 mov	 ecx, DWORD PTR _hd$[ebp]
  002c7	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  002ca	89 94 05 14 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+20], edx

; 492  : 		quad[2].z  				= 0.5;

  002d1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002d6	d1 e0		 shl	 eax, 1
  002d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  002e0	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 493  : 		quad[2].q  				= 0.5;

  002e9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002ee	d1 e0		 shl	 eax, 1
  002f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  002f8	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 494  : 		quad[2].u  				= 1.0;

  00301	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00306	d1 e0		 shl	 eax, 1
  00308	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00310	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 495  : 		quad[2].v  				= 1.0;

  00319	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0031e	d1 e0		 shl	 eax, 1
  00320	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00328	f3 0f 11 84 05
	1c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 496  : 
; 497  : 		quad[3].i  				= hd->hud_screen_x_min;

  00331	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00336	6b c8 03	 imul	 ecx, eax, 3
  00339	8b 55 08	 mov	 edx, DWORD PTR _hd$[ebp]
  0033c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0033f	89 84 0d 10 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+ecx+16], eax

; 498  : 		quad[3].j  				= hd->hud_screen_y_max;

  00346	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0034b	6b c8 03	 imul	 ecx, eax, 3
  0034e	8b 55 08	 mov	 edx, DWORD PTR _hd$[ebp]
  00351	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00354	89 84 0d 14 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+ecx+20], eax

; 499  : 		quad[3].z  				= 0.5;

  0035b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00360	6b c8 03	 imul	 ecx, eax, 3
  00363	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0036b	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 500  : 		quad[3].q  				= 0.5;

  00374	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00379	6b c8 03	 imul	 ecx, eax, 3
  0037c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00384	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 501  : 		quad[3].u				= 0.0;

  0038d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00392	6b c8 03	 imul	 ecx, eax, 3
  00395	0f 57 c0	 xorps	 xmm0, xmm0
  00398	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 502  : 		quad[3].v				= 1.0;

  003a1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003a6	6b c8 03	 imul	 ecx, eax, 3
  003a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003b1	f3 0f 11 84 0d
	1c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 503  : 
; 504  : 		quad[0].next_vertex	= &quad[1];

  003ba	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003bf	c1 e0 00	 shl	 eax, 0
  003c2	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  003c9	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003ce	6b c2 00	 imul	 eax, edx, 0
  003d1	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 505  : 		quad[1].next_vertex	= &quad[2];

  003d8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003dd	d1 e0		 shl	 eax, 1
  003df	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  003e6	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003eb	c1 e2 00	 shl	 edx, 0
  003ee	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 506  : 		quad[2].next_vertex	= &quad[3];

  003f5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003fa	6b c8 03	 imul	 ecx, eax, 3
  003fd	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  00404	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00409	d1 e0		 shl	 eax, 1
  0040b	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 507  : 		quad[3].next_vertex	= NULL;

  00412	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00417	6b c8 03	 imul	 ecx, eax, 3
  0041a	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 508  : 
; 509  : 		//
; 510  : 		////////////////////////////////////////
; 511  : 
; 512  : 		draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  00425	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  0042b	50		 push	 eax
  0042c	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00432	51		 push	 ecx
  00433	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00439	52		 push	 edx
  0043a	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 513  : 
; 514  : 		set_d3d_transparency_off ();

  0043f	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 515  : 
; 516  : 		set_d3d_zbuffer_comparison (TRUE);

  00444	6a 01		 push	 1
  00446	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 517  : 
; 518  : 		set_d3d_culling (TRUE);

  0044b	6a 01		 push	 1
  0044d	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 519  : 
; 520  : 		end_3d_scene ();

  00452	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN5@draw_hud_b:

; 521  : 	}
; 522  : }

  00457	5f		 pop	 edi
  00458	5e		 pop	 esi
  00459	5b		 pop	 ebx
  0045a	8b e5		 mov	 esp, ebp
  0045c	5d		 pop	 ebp
  0045d	c2 08 00	 ret	 8
?draw_hud_background@@YGXPAUHUD_SCREEN_DATA@@H@Z ENDP	; draw_hud_background
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
;	COMDAT ?display_hud_on_external_view@@YGXXZ
_TEXT	SEGMENT
tv65 = -68						; size = 4
?display_hud_on_external_view@@YGXXZ PROC		; display_hud_on_external_view, COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 274  : 	if (get_gunship_entity ())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	74 77		 je	 SHORT $LN1@display_hu

; 275  : 	{
; 276  : 		switch (get_global_gunship_type ())

  00012	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12
  00017	89 45 bc	 mov	 DWORD PTR tv65[ebp], eax
  0001a	83 7d bc 09	 cmp	 DWORD PTR tv65[ebp], 9
  0001e	77 64		 ja	 SHORT $LN15@display_hu
  00020	8b 4d bc	 mov	 ecx, DWORD PTR tv65[ebp]
  00023	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN17@display_hu[ecx*4]
$LN5@display_hu:

; 277  : 		{
; 278  : 			////////////////////////////////////////
; 279  : 			// JB 030313 Fly any aircraft
; 280  : //			default:
; 281  : 			case GUNSHIP_TYPE_APACHE:
; 282  : 			////////////////////////////////////////
; 283  : 			{
; 284  : 				draw_apache_hud ();

  0002a	e8 00 00 00 00	 call	 ?draw_apache_hud@@YGXXZ	; draw_apache_hud

; 285  : 
; 286  : 				break;

  0002f	eb 58		 jmp	 SHORT $LN1@display_hu
$LN6@display_hu:

; 287  : 			}
; 288  : 			////////////////////////////////////////
; 289  : 			case GUNSHIP_TYPE_HAVOC:
; 290  : 			////////////////////////////////////////
; 291  : 			{
; 292  : 				draw_external_havoc_hud ();

  00031	e8 00 00 00 00	 call	 ?draw_external_havoc_hud@@YGXXZ ; draw_external_havoc_hud

; 293  : 
; 294  : 				draw_havoc_hms ();

  00036	e8 00 00 00 00	 call	 ?draw_havoc_hms@@YGXXZ	; draw_havoc_hms

; 295  : 
; 296  : 				break;

  0003b	eb 4c		 jmp	 SHORT $LN1@display_hu
$LN7@display_hu:

; 297  : 			}
; 298  : 			////////////////////////////////////////
; 299  : 			case GUNSHIP_TYPE_COMANCHE:
; 300  : 			////////////////////////////////////////
; 301  : 			{
; 302  : 				
; 303  : 				draw_comanche_hud ();

  0003d	e8 00 00 00 00	 call	 ?draw_comanche_hud@@YGXXZ ; draw_comanche_hud

; 304  : 
; 305  : 				break;

  00042	eb 45		 jmp	 SHORT $LN1@display_hu
$LN8@display_hu:

; 306  : 			}
; 307  : 			////////////////////////////////////////
; 308  : 			case GUNSHIP_TYPE_HOKUM:
; 309  : 			////////////////////////////////////////
; 310  : 			{
; 311  : 				draw_external_hokum_hud ();

  00044	e8 00 00 00 00	 call	 ?draw_external_hokum_hud@@YGXXZ ; draw_external_hokum_hud

; 312  : 
; 313  : 				draw_hokum_hms ();

  00049	e8 00 00 00 00	 call	 ?draw_hokum_hms@@YGXXZ	; draw_hokum_hms

; 314  : 
; 315  : 				break;

  0004e	eb 39		 jmp	 SHORT $LN1@display_hu
$LN9@display_hu:

; 316  : 			}
; 317  : 			////Moje 030518 Start
; 318  : 			case GUNSHIP_TYPE_BLACKHAWK:
; 319  : 			////////////////////////////////////////
; 320  : 			{
; 321  : 				draw_blackhawk_hud ();

  00050	e8 00 00 00 00	 call	 ?draw_blackhawk_hud@@YGXXZ ; draw_blackhawk_hud

; 322  : 
; 323  : 				break;

  00055	eb 32		 jmp	 SHORT $LN1@display_hu
$LN10@display_hu:

; 324  : 			}
; 325  : 			////Moje 030518 End
; 326  : 			////Moje 030612 start
; 327  : 			////////////////////////////////////////
; 328  : 			case GUNSHIP_TYPE_HIND:
; 329  : 			////////////////////////////////////////
; 330  : 			{
; 331  : 				draw_external_hind_hud ();

  00057	e8 00 00 00 00	 call	 ?draw_external_hind_hud@@YGXXZ ; draw_external_hind_hud

; 332  : 
; 333  : 				draw_hind_hms ();

  0005c	e8 00 00 00 00	 call	 ?draw_hind_hms@@YGXXZ	; draw_hind_hms

; 334  : 
; 335  : 				break;

  00061	eb 26		 jmp	 SHORT $LN1@display_hu
$LN11@display_hu:

; 336  : 			}
; 337  : 			////Moje 030612 end
; 338  : 			////Moje 030816 Start
; 339  : 			case GUNSHIP_TYPE_AH64A:
; 340  : 			////////////////////////////////////////
; 341  : 			{
; 342  : 				draw_ah64a_hud ();

  00063	e8 00 00 00 00	 call	 ?draw_ah64a_hud@@YGXXZ	; draw_ah64a_hud

; 343  : 				break;

  00068	eb 1f		 jmp	 SHORT $LN1@display_hu
$LN12@display_hu:

; 344  : 			}
; 345  : 			////////////////////////////////////////
; 346  : 			case GUNSHIP_TYPE_KA50:
; 347  : 			////////////////////////////////////////
; 348  : 			{
; 349  : 				draw_external_ka50_hud ();

  0006a	e8 00 00 00 00	 call	 ?draw_external_ka50_hud@@YGXXZ ; draw_external_ka50_hud

; 350  : 				draw_ka50_hms ();

  0006f	e8 00 00 00 00	 call	 ?draw_ka50_hms@@YGXXZ	; draw_ka50_hms

; 351  : 				break;

  00074	eb 13		 jmp	 SHORT $LN1@display_hu
$LN13@display_hu:

; 352  : 			}
; 353  : 			////Moje 030816 end
; 354  : 			////////////////////////////////////////
; 355  : 			case GUNSHIP_TYPE_VIPER:
; 356  : 			////////////////////////////////////////
; 357  : 			{
; 358  : 				draw_viper_hud ();

  00076	e8 00 00 00 00	 call	 ?draw_viper_hud@@YGXXZ	; draw_viper_hud

; 359  : 
; 360  : 				break;

  0007b	eb 0c		 jmp	 SHORT $LN1@display_hu
$LN14@display_hu:

; 361  : 			}
; 362  : 			////////////////////////////////////////
; 363  : 			case GUNSHIP_TYPE_KIOWA:
; 364  : 			////////////////////////////////////////
; 365  : 			{
; 366  : 				
; 367  : 				draw_kiowa_hud ();

  0007d	e8 00 00 00 00	 call	 ?draw_kiowa_hud@@YGXXZ	; draw_kiowa_hud

; 368  : 
; 369  : 				break;

  00082	eb 05		 jmp	 SHORT $LN1@display_hu
$LN15@display_hu:

; 370  : 			}
; 371  : 
; 372  : 			////////////////////////////////////////
; 373  : 			// GCsDriver  08-12-2007
; 374  : 			default:
; 375  : 			////////////////////////////////////////
; 376  : 			{
; 377  : 				draw_default_hud ();

  00084	e8 00 00 00 00	 call	 ?draw_default_hud@@YGXXZ ; draw_default_hud
$LN1@display_hu:

; 378  : 
; 379  : 				break;
; 380  : 			}
; 381  : 
; 382  : 		}
; 383  : 	}
; 384  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN17@display_hu:
  00090	00 00 00 00	 DD	 $LN5@display_hu
  00094	00 00 00 00	 DD	 $LN6@display_hu
  00098	00 00 00 00	 DD	 $LN7@display_hu
  0009c	00 00 00 00	 DD	 $LN8@display_hu
  000a0	00 00 00 00	 DD	 $LN9@display_hu
  000a4	00 00 00 00	 DD	 $LN10@display_hu
  000a8	00 00 00 00	 DD	 $LN11@display_hu
  000ac	00 00 00 00	 DD	 $LN12@display_hu
  000b0	00 00 00 00	 DD	 $LN13@display_hu
  000b4	00 00 00 00	 DD	 $LN14@display_hu
?display_hud_on_external_view@@YGXXZ ENDP		; display_hud_on_external_view
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
;	COMDAT ?clear_hud_bob_up_overlay@@YGXXZ
_TEXT	SEGMENT
?clear_hud_bob_up_overlay@@YGXXZ PROC			; clear_hud_bob_up_overlay, COMDAT

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 265  : 	hud_bob_up_overlay = FALSE;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hud_bob_up_overlay@@3HA, 0 ; hud_bob_up_overlay

; 266  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?clear_hud_bob_up_overlay@@YGXXZ ENDP			; clear_hud_bob_up_overlay
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
;	COMDAT ?switch_hud_mode@@YGXXZ
_TEXT	SEGMENT
?switch_hud_mode@@YGXXZ PROC				; switch_hud_mode, COMDAT

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 248  : 	if (hud_mode == HUD_MODE_WEAPON)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?hud_mode@@3W4HUD_MODES@@A, 2 ; hud_mode
  00010	75 02		 jne	 SHORT $LN2@switch_hud

; 249  : 		return;

  00012	eb 29		 jmp	 SHORT $LN1@switch_hud
$LN2@switch_hud:

; 250  : 	
; 251  : 	if (hud_mode == HUD_MODE_TRANSITION)

  00014	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?hud_mode@@3W4HUD_MODES@@A, 1 ; hud_mode
  0001b	75 0c		 jne	 SHORT $LN3@switch_hud

; 252  : 		hud_mode = HUD_MODE_NAVIGATION;

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hud_mode@@3W4HUD_MODES@@A, 0 ; hud_mode

; 253  : 	else

  00027	eb 0a		 jmp	 SHORT $LN4@switch_hud
$LN3@switch_hud:

; 254  : 		hud_mode = HUD_MODE_TRANSITION;

  00029	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?hud_mode@@3W4HUD_MODES@@A, 1 ; hud_mode
$LN4@switch_hud:

; 255  : 
; 256  : 	previous_hud_mode = hud_mode;

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_mode@@3W4HUD_MODES@@A ; hud_mode
  00038	a3 00 00 00 00	 mov	 DWORD PTR ?previous_hud_mode@@3W4HUD_MODES@@A, eax ; previous_hud_mode
$LN1@switch_hud:

; 257  : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?switch_hud_mode@@YGXXZ ENDP				; switch_hud_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
;	COMDAT ?set_hud_bob_up_overlay@@YGXXZ
_TEXT	SEGMENT
tv130 = -72						; size = 4
tv78 = -72						; size = 4
tv90 = -68						; size = 4
tv70 = -68						; size = 4
?set_hud_bob_up_overlay@@YGXXZ PROC			; set_hud_bob_up_overlay, COMDAT

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 235  : 	hud_bob_up_overlay = TRUE;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?hud_bob_up_overlay@@3HA, 1 ; hud_bob_up_overlay

; 236  : 
; 237  : 	hud_bob_up_heading = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING);

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0001a	74 0c		 je	 SHORT $LN3@set_hud_bo
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	89 4d bc	 mov	 DWORD PTR tv70[ebp], ecx
  00026	eb 21		 jmp	 SHORT $LN4@set_hud_bo
$LN3@set_hud_bo:
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_hud_bob_up_overlay@@YGXXZ@4JA
  0002e	83 c2 03	 add	 edx, 3
  00031	52		 push	 edx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@INPDBJAN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00042	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@set_hud_bo:
  00049	b9 01 00 00 00	 mov	 ecx, 1
  0004e	85 c9		 test	 ecx, ecx
  00050	74 09		 je	 SHORT $LN5@set_hud_bo
  00052	c7 45 b8 34 00
	00 00		 mov	 DWORD PTR tv78[ebp], 52	; 00000034H
  00059	eb 21		 jmp	 SHORT $LN6@set_hud_bo
$LN5@set_hud_bo:
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_hud_bob_up_overlay@@YGXXZ@4JA
  00061	83 c2 03	 add	 edx, 3
  00064	52		 push	 edx
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@INPDBJAN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00075	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN6@set_hud_bo:
  0007c	6a 34		 push	 52			; 00000034H
  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00084	51		 push	 ecx
  00085	69 55 bc bc 02
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 700
  0008c	8b 45 b8	 mov	 eax, DWORD PTR tv78[ebp]
  0008f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00096	ff d1		 call	 ecx
  00098	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?hud_bob_up_heading@@3MA ; hud_bob_up_heading

; 238  : 
; 239  : 	get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &hud_bob_up_position);

  0009e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  000a5	74 0c		 je	 SHORT $LN7@set_hud_bo
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ae	89 4d bc	 mov	 DWORD PTR tv90[ebp], ecx
  000b1	eb 21		 jmp	 SHORT $LN8@set_hud_bo
$LN7@set_hud_bo:
  000b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_hud_bob_up_overlay@@YGXXZ@4JA
  000b9	83 c2 05	 add	 edx, 5
  000bc	52		 push	 edx
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@INPDBJAN@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000cd	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN8@set_hud_bo:
  000d4	b9 01 00 00 00	 mov	 ecx, 1
  000d9	85 c9		 test	 ecx, ecx
  000db	74 09		 je	 SHORT $LN9@set_hud_bo
  000dd	c7 45 b8 08 00
	00 00		 mov	 DWORD PTR tv130[ebp], 8
  000e4	eb 21		 jmp	 SHORT $LN10@set_hud_bo
$LN9@set_hud_bo:
  000e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_hud_bob_up_overlay@@YGXXZ@4JA
  000ec	83 c2 05	 add	 edx, 5
  000ef	52		 push	 edx
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@INPDBJAN@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00100	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN10@set_hud_bo:
  00107	68 00 00 00 00	 push	 OFFSET ?hud_bob_up_position@@3UVEC3D@@A ; hud_bob_up_position
  0010c	6a 08		 push	 8
  0010e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00114	51		 push	 ecx
  00115	6b 55 bc 60	 imul	 edx, DWORD PTR tv90[ebp], 96
  00119	8b 45 b8	 mov	 eax, DWORD PTR tv130[ebp]
  0011c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[edx+eax*4]
  00123	ff d1		 call	 ecx

; 240  : }

  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c3		 ret	 0
?set_hud_bob_up_overlay@@YGXXZ ENDP			; set_hud_bob_up_overlay
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
;	COMDAT ?set_prev_hud_colour@@YGXXZ
_TEXT	SEGMENT
tv68 = -76						; size = 4
$T1 = -72						; size = 4
_col$2 = -4						; size = 4
?set_prev_hud_colour@@YGXXZ PROC			; set_prev_hud_colour, COMDAT

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 213  : 	if (get_global_gunship_type() == GUNSHIP_TYPE_HIND)

  00009	83 3d 0c 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12, 5
  00010	75 12		 jne	 SHORT $LN2@set_prev_h

; 214  : 		hud_colour = get_prev_hind_hud_colour();

  00012	e8 00 00 00 00	 call	 ?get_prev_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ ; get_prev_hind_hud_colour
  00017	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 45 b8	 mov	 eax, DWORD PTR $T1[ebp]
  0001d	a3 00 00 00 00	 mov	 DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A, eax ; hud_colour

; 215  : 	else

  00022	eb 41		 jmp	 SHORT $LN1@set_prev_h
$LN2@set_prev_h:

; 216  : 	{
; 217  : 		hud_colours
; 218  : 			col;
; 219  : 
; 220  : 		col = get_global_hud_colour ();

  00024	a1 10 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+16
  00029	89 45 fc	 mov	 DWORD PTR _col$2[ebp], eax

; 221  : 		col = (hud_colours) ((int) col - 1);

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _col$2[ebp]
  0002f	83 e8 01	 sub	 eax, 1
  00032	89 45 fc	 mov	 DWORD PTR _col$2[ebp], eax

; 222  : 		col = (col >= 0) ? col : (hud_colours) (NUM_HUD_COLOURS - 1);

  00035	78 08		 js	 SHORT $LN5@set_prev_h
  00037	8b 45 fc	 mov	 eax, DWORD PTR _col$2[ebp]
  0003a	89 45 b4	 mov	 DWORD PTR tv68[ebp], eax
  0003d	eb 07		 jmp	 SHORT $LN6@set_prev_h
$LN5@set_prev_h:
  0003f	c7 45 b4 16 00
	00 00		 mov	 DWORD PTR tv68[ebp], 22	; 00000016H
$LN6@set_prev_h:
  00046	8b 4d b4	 mov	 ecx, DWORD PTR tv68[ebp]
  00049	89 4d fc	 mov	 DWORD PTR _col$2[ebp], ecx

; 223  : 
; 224  : 		set_global_hud_colour (col);

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _col$2[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?set_global_hud_colour@@YGXW4HUD_COLOURS@@@Z ; set_global_hud_colour

; 225  : 		hud_colour = hud_colour_table[col];

  00055	8b 45 fc	 mov	 eax, DWORD PTR _col$2[ebp]
  00058	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax*4]
  0005f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A, ecx ; hud_colour
$LN1@set_prev_h:

; 226  : 	}
; 227  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?set_prev_hud_colour@@YGXXZ ENDP			; set_prev_hud_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
;	COMDAT ?set_next_hud_colour@@YGXXZ
_TEXT	SEGMENT
tv68 = -76						; size = 4
$T1 = -72						; size = 4
_col$2 = -4						; size = 4
?set_next_hud_colour@@YGXXZ PROC			; set_next_hud_colour, COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 191  : 	if (get_global_gunship_type() == GUNSHIP_TYPE_HIND)

  00009	83 3d 0c 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12, 5
  00010	75 12		 jne	 SHORT $LN2@set_next_h

; 192  : 		hud_colour = get_next_hind_hud_colour();

  00012	e8 00 00 00 00	 call	 ?get_next_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ ; get_next_hind_hud_colour
  00017	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 45 b8	 mov	 eax, DWORD PTR $T1[ebp]
  0001d	a3 00 00 00 00	 mov	 DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A, eax ; hud_colour

; 193  : 	else

  00022	eb 45		 jmp	 SHORT $LN1@set_next_h
$LN2@set_next_h:

; 194  : 	{
; 195  : 		hud_colours
; 196  : 			col;
; 197  : 
; 198  : 		col = get_global_hud_colour ();

  00024	a1 10 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+16
  00029	89 45 fc	 mov	 DWORD PTR _col$2[ebp], eax

; 199  : 		col = (hud_colours) ((int) col + 1);

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _col$2[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 fc	 mov	 DWORD PTR _col$2[ebp], eax

; 200  : 		col = (col <= NUM_HUD_COLOURS - 1) ? col : (hud_colours) 0;

  00035	83 7d fc 16	 cmp	 DWORD PTR _col$2[ebp], 22 ; 00000016H
  00039	7f 08		 jg	 SHORT $LN5@set_next_h
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _col$2[ebp]
  0003e	89 45 b4	 mov	 DWORD PTR tv68[ebp], eax
  00041	eb 07		 jmp	 SHORT $LN6@set_next_h
$LN5@set_next_h:
  00043	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN6@set_next_h:
  0004a	8b 4d b4	 mov	 ecx, DWORD PTR tv68[ebp]
  0004d	89 4d fc	 mov	 DWORD PTR _col$2[ebp], ecx

; 201  : 
; 202  : 		set_global_hud_colour (col);

  00050	8b 45 fc	 mov	 eax, DWORD PTR _col$2[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?set_global_hud_colour@@YGXW4HUD_COLOURS@@@Z ; set_global_hud_colour

; 203  : 		hud_colour = hud_colour_table[col];	

  00059	8b 45 fc	 mov	 eax, DWORD PTR _col$2[ebp]
  0005c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax*4]
  00063	89 0d 00 00 00
	00		 mov	 DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A, ecx ; hud_colour
$LN1@set_next_h:

; 204  : 	}
; 205  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?set_next_hud_colour@@YGXXZ ENDP			; set_next_hud_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
;	COMDAT ?update_common_hud@@YGXXZ
_TEXT	SEGMENT
?update_common_hud@@YGXXZ PROC				; update_common_hud, COMDAT

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 183  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?update_common_hud@@YGXXZ ENDP				; update_common_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
;	COMDAT ?deinitialise_common_hud@@YGXXZ
_TEXT	SEGMENT
?deinitialise_common_hud@@YGXXZ PROC			; deinitialise_common_hud, COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 175  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?deinitialise_common_hud@@YGXXZ ENDP			; deinitialise_common_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_hud.c
;	COMDAT ?initialise_common_hud@@YGXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_gt$ = -4						; size = 4
?initialise_common_hud@@YGXXZ PROC			; initialise_common_hud, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 102  : 	//VJ 060212 save hud info mod ==>
; 103  : 	int gt=get_global_gunship_type();

  00009	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12
  0000e	89 45 fc	 mov	 DWORD PTR _gt$[ebp], eax

; 104  : 	// happens at initialisation pahse, gunship not known yet
; 105  : 	if (gt >= NUM_GUNSHIP_TYPES)

  00011	83 7d fc 0a	 cmp	 DWORD PTR _gt$[ebp], 10	; 0000000aH
  00015	7c 07		 jl	 SHORT $LN2@initialise

; 106  : 		gt = 0;

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _gt$[ebp], 0
$LN2@initialise:

; 107  : 	
; 108  : 	debug_log("hud colour %d %d",gt,hud_code[gt][HUD_CODES_COLOUR]);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _gt$[ebp]
  00021	c1 e0 04	 shl	 eax, 4
  00024	b9 04 00 00 00	 mov	 ecx, 4
  00029	6b d1 00	 imul	 edx, ecx, 0
  0002c	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR ?hud_code@@3PAY03HA[eax+edx]
  00033	50		 push	 eax
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _gt$[ebp]
  00037	51		 push	 ecx
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KPCLNHBL@hud?5colour?5?$CFd?5?$CFd@
  0003d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  : 	set_global_hud_colour((hud_colours) hud_code[gt][HUD_CODES_COLOUR]);

  00045	8b 45 fc	 mov	 eax, DWORD PTR _gt$[ebp]
  00048	c1 e0 04	 shl	 eax, 4
  0004b	b9 04 00 00 00	 mov	 ecx, 4
  00050	6b d1 00	 imul	 edx, ecx, 0
  00053	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR ?hud_code@@3PAY03HA[eax+edx]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?set_global_hud_colour@@YGXW4HUD_COLOURS@@@Z ; set_global_hud_colour

; 110  : 	global_hud_alpha = hud_code[gt][HUD_CODES_ALPHA];

  00060	8b 45 fc	 mov	 eax, DWORD PTR _gt$[ebp]
  00063	c1 e0 04	 shl	 eax, 4
  00066	b9 04 00 00 00	 mov	 ecx, 4
  0006b	c1 e1 00	 shl	 ecx, 0
  0006e	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR ?hud_code@@3PAY03HA[eax+ecx]
  00075	89 15 00 00 00
	00		 mov	 DWORD PTR ?global_hud_alpha@@3HA, edx ; global_hud_alpha

; 111  : 	global_hud_size2 = 0.1* (float) hud_code[gt][HUD_CODES_SIZE];

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _gt$[ebp]
  0007e	c1 e0 04	 shl	 eax, 4
  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	f3 0f 2a 84 08
	00 00 00 00	 cvtsi2ss xmm0, DWORD PTR ?hud_code@@3PAY03HA[eax+ecx]
  00091	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00095	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0009d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?global_hud_size2@@3MA, xmm0

; 112  : 	if (global_hud_size2 <= 1.0)

  000a9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?global_hud_size2@@3MA
  000b1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000b9	66 0f 2f c8	 comisd	 xmm1, xmm0
  000bd	72 0c		 jb	 SHORT $LN3@initialise

; 113  : 	{
; 114  : 		set_global_unscaled_displays (TRUE);

  000bf	c7 05 74 03 00
	00 01 00 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 1

; 115  : 	}
; 116  : 	else

  000c9	eb 0a		 jmp	 SHORT $LN4@initialise
$LN3@initialise:

; 117  : 	{
; 118  : 		set_global_unscaled_displays (FALSE);

  000cb	c7 05 74 03 00
	00 00 00 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
$LN4@initialise:

; 119  : 	}
; 120  : 	//<=== VJ 060212 save hud info mod 
; 121  : 	global_mfd_size = hud_code[gt][HUD_CODES_MFD] / 20.0;

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _gt$[ebp]
  000d8	c1 e0 04	 shl	 eax, 4
  000db	b9 04 00 00 00	 mov	 ecx, 4
  000e0	6b d1 03	 imul	 edx, ecx, 3
  000e3	f2 0f 2a 84 10
	00 00 00 00	 cvtsi2sd xmm0, DWORD PTR ?hud_code@@3PAY03HA[eax+edx]
  000ec	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4034000000000000
  000f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?global_mfd_size@@3MA, xmm0

; 122  : 
; 123  : 	display_hud_layout_grid = FALSE;

  00100	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?display_hud_layout_grid@@3HA, 0 ; display_hud_layout_grid

; 124  : 
; 125  : 	hud_bob_up_overlay = FALSE;

  0010a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hud_bob_up_overlay@@3HA, 0 ; hud_bob_up_overlay

; 126  : 
; 127  : 	hud_bob_up_heading = 0.0;

  00114	0f 57 c0	 xorps	 xmm0, xmm0
  00117	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_bob_up_heading@@3MA, xmm0

; 128  : 
; 129  : 	hud_bob_up_position.x = 0.0;

  0011f	0f 57 c0	 xorps	 xmm0, xmm0
  00122	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_bob_up_position@@3UVEC3D@@A, xmm0

; 130  : 	hud_bob_up_position.y = 0.0;

  0012a	0f 57 c0	 xorps	 xmm0, xmm0
  0012d	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?hud_bob_up_position@@3UVEC3D@@A+4, xmm0

; 131  : 	hud_bob_up_position.z = 0.0;

  00135	0f 57 c0	 xorps	 xmm0, xmm0
  00138	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?hud_bob_up_position@@3UVEC3D@@A+8, xmm0

; 132  : 
; 133  : 	// arneh, june 2006 - transtion mode hud fix
; 134  : 	hud_mode = HUD_MODE_TRANSITION;

  00140	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?hud_mode@@3W4HUD_MODES@@A, 1 ; hud_mode

; 135  : 	previous_hud_mode = HUD_MODE_TRANSITION;

  0014a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?previous_hud_mode@@3W4HUD_MODES@@A, 1 ; previous_hud_mode

; 136  : 
; 137  : 	set_rgb_colour (hud_colour_table[HUD_COL_WHITE],   255, 255, 240, 255);

  00154	b8 04 00 00 00	 mov	 eax, 4
  00159	6b c8 00	 imul	 ecx, eax, 0
  0015c	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00163	b8 04 00 00 00	 mov	 eax, 4
  00168	6b c8 00	 imul	 ecx, eax, 0
  0016b	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00172	b8 04 00 00 00	 mov	 eax, 4
  00177	6b c8 00	 imul	 ecx, eax, 0
  0017a	c6 81 00 00 00
	00 f0		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 240 ; 000000f0H
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 00	 imul	 ecx, eax, 0
  00189	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 138  : 	set_rgb_colour (hud_colour_table[HUD_COL_RED],     255,  20,   0, 255);

  00190	b8 04 00 00 00	 mov	 eax, 4
  00195	c1 e0 00	 shl	 eax, 0
  00198	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  0019f	b8 04 00 00 00	 mov	 eax, 4
  001a4	c1 e0 00	 shl	 eax, 0
  001a7	c6 80 01 00 00
	00 14		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+1], 20 ; 00000014H
  001ae	b8 04 00 00 00	 mov	 eax, 4
  001b3	c1 e0 00	 shl	 eax, 0
  001b6	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax], 0
  001bd	b8 04 00 00 00	 mov	 eax, 4
  001c2	c1 e0 00	 shl	 eax, 0
  001c5	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 139  : 	set_rgb_colour (hud_colour_table[HUD_COL_AMBER],   255, 153,  18, 255);

  001cc	b8 04 00 00 00	 mov	 eax, 4
  001d1	d1 e0		 shl	 eax, 1
  001d3	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  001da	b8 04 00 00 00	 mov	 eax, 4
  001df	d1 e0		 shl	 eax, 1
  001e1	c6 80 01 00 00
	00 99		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+1], 153 ; 00000099H
  001e8	b8 04 00 00 00	 mov	 eax, 4
  001ed	d1 e0		 shl	 eax, 1
  001ef	c6 80 00 00 00
	00 12		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax], 18 ; 00000012H
  001f6	b8 04 00 00 00	 mov	 eax, 4
  001fb	d1 e0		 shl	 eax, 1
  001fd	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 140  : 	set_rgb_colour (hud_colour_table[HUD_COL_GOLD],    255, 215,   0, 255);

  00204	b8 04 00 00 00	 mov	 eax, 4
  00209	6b c8 03	 imul	 ecx, eax, 3
  0020c	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00213	b8 04 00 00 00	 mov	 eax, 4
  00218	6b c8 03	 imul	 ecx, eax, 3
  0021b	c6 81 01 00 00
	00 d7		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 215 ; 000000d7H
  00222	b8 04 00 00 00	 mov	 eax, 4
  00227	6b c8 03	 imul	 ecx, eax, 3
  0022a	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 0
  00231	b8 04 00 00 00	 mov	 eax, 4
  00236	6b c8 03	 imul	 ecx, eax, 3
  00239	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 141  : 	set_rgb_colour (hud_colour_table[HUD_COL_GREEN],     0, 255, 127, 255);

  00240	b8 04 00 00 00	 mov	 eax, 4
  00245	c1 e0 02	 shl	 eax, 2
  00248	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+2], 0
  0024f	b8 04 00 00 00	 mov	 eax, 4
  00254	c1 e0 02	 shl	 eax, 2
  00257	c6 80 01 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+1], 255 ; 000000ffH
  0025e	b8 04 00 00 00	 mov	 eax, 4
  00263	c1 e0 02	 shl	 eax, 2
  00266	c6 80 00 00 00
	00 7f		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax], 127 ; 0000007fH
  0026d	b8 04 00 00 00	 mov	 eax, 4
  00272	c1 e0 02	 shl	 eax, 2
  00275	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 142  : 	set_rgb_colour (hud_colour_table[HUD_COL_CYAN],      0, 255, 255, 255);

  0027c	b8 04 00 00 00	 mov	 eax, 4
  00281	6b c8 05	 imul	 ecx, eax, 5
  00284	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0028b	b8 04 00 00 00	 mov	 eax, 4
  00290	6b c8 05	 imul	 ecx, eax, 5
  00293	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0029a	b8 04 00 00 00	 mov	 eax, 4
  0029f	6b c8 05	 imul	 ecx, eax, 5
  002a2	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  002a9	b8 04 00 00 00	 mov	 eax, 4
  002ae	6b c8 05	 imul	 ecx, eax, 5
  002b1	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 143  : 	set_rgb_colour (hud_colour_table[HUD_COL_BLUE],     30, 144, 255, 255);

  002b8	b8 04 00 00 00	 mov	 eax, 4
  002bd	6b c8 06	 imul	 ecx, eax, 6
  002c0	c6 81 02 00 00
	00 1e		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 30 ; 0000001eH
  002c7	b8 04 00 00 00	 mov	 eax, 4
  002cc	6b c8 06	 imul	 ecx, eax, 6
  002cf	c6 81 01 00 00
	00 90		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 144 ; 00000090H
  002d6	b8 04 00 00 00	 mov	 eax, 4
  002db	6b c8 06	 imul	 ecx, eax, 6
  002de	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  002e5	b8 04 00 00 00	 mov	 eax, 4
  002ea	6b c8 06	 imul	 ecx, eax, 6
  002ed	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 144  : 	set_rgb_colour (hud_colour_table[HUD_COL_BLACK],     0,   0,   0, 255);

  002f4	b8 04 00 00 00	 mov	 eax, 4
  002f9	6b c8 07	 imul	 ecx, eax, 7
  002fc	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00303	b8 04 00 00 00	 mov	 eax, 4
  00308	6b c8 07	 imul	 ecx, eax, 7
  0030b	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00312	b8 04 00 00 00	 mov	 eax, 4
  00317	6b c8 07	 imul	 ecx, eax, 7
  0031a	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 0
  00321	b8 04 00 00 00	 mov	 eax, 4
  00326	6b c8 07	 imul	 ecx, eax, 7
  00329	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 145  : 	
; 146  :    //060207 Mavericks hud colours mod.   "_L_=LIGHT", "_N_=NEON", "_D_=DARK"
; 147  :    set_rgb_colour (hud_colour_table[HUD_COL_ORANGE],     255,   128,    0, 255); 

  00330	b8 04 00 00 00	 mov	 eax, 4
  00335	c1 e0 03	 shl	 eax, 3
  00338	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  0033f	b8 04 00 00 00	 mov	 eax, 4
  00344	c1 e0 03	 shl	 eax, 3
  00347	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  0034e	b8 04 00 00 00	 mov	 eax, 4
  00353	c1 e0 03	 shl	 eax, 3
  00356	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax], 0
  0035d	b8 04 00 00 00	 mov	 eax, 4
  00362	c1 e0 03	 shl	 eax, 3
  00365	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 148  :    set_rgb_colour (hud_colour_table[HUD_COL_D_ORANGE],   255,    68,    0, 255); 	

  0036c	b8 04 00 00 00	 mov	 eax, 4
  00371	6b c8 09	 imul	 ecx, eax, 9
  00374	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	6b c8 09	 imul	 ecx, eax, 9
  00383	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  0038a	b8 04 00 00 00	 mov	 eax, 4
  0038f	6b c8 09	 imul	 ecx, eax, 9
  00392	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 0
  00399	b8 04 00 00 00	 mov	 eax, 4
  0039e	6b c8 09	 imul	 ecx, eax, 9
  003a1	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 149  :    set_rgb_colour (hud_colour_table[HUD_COL_L_YELLO],    248,   255,  120, 255);

  003a8	b8 04 00 00 00	 mov	 eax, 4
  003ad	6b c8 0a	 imul	 ecx, eax, 10
  003b0	c6 81 02 00 00
	00 f8		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 248 ; 000000f8H
  003b7	b8 04 00 00 00	 mov	 eax, 4
  003bc	6b c8 0a	 imul	 ecx, eax, 10
  003bf	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  003c6	b8 04 00 00 00	 mov	 eax, 4
  003cb	6b c8 0a	 imul	 ecx, eax, 10
  003ce	c6 81 00 00 00
	00 78		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 120 ; 00000078H
  003d5	b8 04 00 00 00	 mov	 eax, 4
  003da	6b c8 0a	 imul	 ecx, eax, 10
  003dd	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 150  :    set_rgb_colour (hud_colour_table[HUD_COL_D_YELLO],    255,   191,    0, 255);

  003e4	b8 04 00 00 00	 mov	 eax, 4
  003e9	6b c8 0b	 imul	 ecx, eax, 11
  003ec	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  003f3	b8 04 00 00 00	 mov	 eax, 4
  003f8	6b c8 0b	 imul	 ecx, eax, 11
  003fb	c6 81 01 00 00
	00 bf		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 191 ; 000000bfH
  00402	b8 04 00 00 00	 mov	 eax, 4
  00407	6b c8 0b	 imul	 ecx, eax, 11
  0040a	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 0
  00411	b8 04 00 00 00	 mov	 eax, 4
  00416	6b c8 0b	 imul	 ecx, eax, 11
  00419	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 151  :    set_rgb_colour (hud_colour_table[HUD_COL_N1_GREEN],     34,  255,    0, 255);

  00420	b8 04 00 00 00	 mov	 eax, 4
  00425	6b c8 0c	 imul	 ecx, eax, 12
  00428	c6 81 02 00 00
	00 22		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 34 ; 00000022H
  0042f	b8 04 00 00 00	 mov	 eax, 4
  00434	6b c8 0c	 imul	 ecx, eax, 12
  00437	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0043e	b8 04 00 00 00	 mov	 eax, 4
  00443	6b c8 0c	 imul	 ecx, eax, 12
  00446	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 0
  0044d	b8 04 00 00 00	 mov	 eax, 4
  00452	6b c8 0c	 imul	 ecx, eax, 12
  00455	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 152  :    set_rgb_colour (hud_colour_table[HUD_COL_D2_GREEN],   170,   255,    0, 255);

  0045c	b8 04 00 00 00	 mov	 eax, 4
  00461	6b c8 0d	 imul	 ecx, eax, 13
  00464	c6 81 02 00 00
	00 aa		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 170 ; 000000aaH
  0046b	b8 04 00 00 00	 mov	 eax, 4
  00470	6b c8 0d	 imul	 ecx, eax, 13
  00473	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0047a	b8 04 00 00 00	 mov	 eax, 4
  0047f	6b c8 0d	 imul	 ecx, eax, 13
  00482	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 0
  00489	b8 04 00 00 00	 mov	 eax, 4
  0048e	6b c8 0d	 imul	 ecx, eax, 13
  00491	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 153  :    set_rgb_colour (hud_colour_table[HUD_COL_N3_GREEN],   190,   255,   60, 255);

  00498	b8 04 00 00 00	 mov	 eax, 4
  0049d	6b c8 0e	 imul	 ecx, eax, 14
  004a0	c6 81 02 00 00
	00 be		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 190 ; 000000beH
  004a7	b8 04 00 00 00	 mov	 eax, 4
  004ac	6b c8 0e	 imul	 ecx, eax, 14
  004af	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  004b6	b8 04 00 00 00	 mov	 eax, 4
  004bb	6b c8 0e	 imul	 ecx, eax, 14
  004be	c6 81 00 00 00
	00 3c		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 60 ; 0000003cH
  004c5	b8 04 00 00 00	 mov	 eax, 4
  004ca	6b c8 0e	 imul	 ecx, eax, 14
  004cd	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 154  :    set_rgb_colour (hud_colour_table[HUD_COL_LAVENDER1],    195,   0,  114, 255);

  004d4	b8 04 00 00 00	 mov	 eax, 4
  004d9	6b c8 0f	 imul	 ecx, eax, 15
  004dc	c6 81 02 00 00
	00 c3		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 195 ; 000000c3H
  004e3	b8 04 00 00 00	 mov	 eax, 4
  004e8	6b c8 0f	 imul	 ecx, eax, 15
  004eb	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 0
  004f2	b8 04 00 00 00	 mov	 eax, 4
  004f7	6b c8 0f	 imul	 ecx, eax, 15
  004fa	c6 81 00 00 00
	00 72		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 114 ; 00000072H
  00501	b8 04 00 00 00	 mov	 eax, 4
  00506	6b c8 0f	 imul	 ecx, eax, 15
  00509	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 155  :    set_rgb_colour (hud_colour_table[HUD_COL_LAVENDER2],   114,    0,  195, 255);

  00510	b8 04 00 00 00	 mov	 eax, 4
  00515	c1 e0 04	 shl	 eax, 4
  00518	c6 80 02 00 00
	00 72		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+2], 114 ; 00000072H
  0051f	b8 04 00 00 00	 mov	 eax, 4
  00524	c1 e0 04	 shl	 eax, 4
  00527	c6 80 01 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+1], 0
  0052e	b8 04 00 00 00	 mov	 eax, 4
  00533	c1 e0 04	 shl	 eax, 4
  00536	c6 80 00 00 00
	00 c3		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax], 195 ; 000000c3H
  0053d	b8 04 00 00 00	 mov	 eax, 4
  00542	c1 e0 04	 shl	 eax, 4
  00545	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 156  :    set_rgb_colour (hud_colour_table[HUD_COL_D_LAVENDER],  61,     0,  105, 255); 

  0054c	b8 04 00 00 00	 mov	 eax, 4
  00551	6b c8 11	 imul	 ecx, eax, 17
  00554	c6 81 02 00 00
	00 3d		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 61 ; 0000003dH
  0055b	b8 04 00 00 00	 mov	 eax, 4
  00560	6b c8 11	 imul	 ecx, eax, 17
  00563	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 0
  0056a	b8 04 00 00 00	 mov	 eax, 4
  0056f	6b c8 11	 imul	 ecx, eax, 17
  00572	c6 81 00 00 00
	00 69		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 105 ; 00000069H
  00579	b8 04 00 00 00	 mov	 eax, 4
  0057e	6b c8 11	 imul	 ecx, eax, 17
  00581	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 157  :    set_rgb_colour (hud_colour_table[HUD_COL_D_BROWN],    125,    17,    0, 255);

  00588	b8 04 00 00 00	 mov	 eax, 4
  0058d	6b c8 12	 imul	 ecx, eax, 18
  00590	c6 81 02 00 00
	00 7d		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 125 ; 0000007dH
  00597	b8 04 00 00 00	 mov	 eax, 4
  0059c	6b c8 12	 imul	 ecx, eax, 18
  0059f	c6 81 01 00 00
	00 11		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 17 ; 00000011H
  005a6	b8 04 00 00 00	 mov	 eax, 4
  005ab	6b c8 12	 imul	 ecx, eax, 18
  005ae	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 0
  005b5	b8 04 00 00 00	 mov	 eax, 4
  005ba	6b c8 12	 imul	 ecx, eax, 18
  005bd	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 158  :    set_rgb_colour (hud_colour_table[HUD_COL_PINK],       255,     0,  149, 255);

  005c4	b8 04 00 00 00	 mov	 eax, 4
  005c9	6b c8 13	 imul	 ecx, eax, 19
  005cc	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  005d3	b8 04 00 00 00	 mov	 eax, 4
  005d8	6b c8 13	 imul	 ecx, eax, 19
  005db	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 0
  005e2	b8 04 00 00 00	 mov	 eax, 4
  005e7	6b c8 13	 imul	 ecx, eax, 19
  005ea	c6 81 00 00 00
	00 95		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 149 ; 00000095H
  005f1	b8 04 00 00 00	 mov	 eax, 4
  005f6	6b c8 13	 imul	 ecx, eax, 19
  005f9	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 159  :    set_rgb_colour (hud_colour_table[HUD_COL_BLUE1],       68,   109,  140, 255);

  00600	b8 04 00 00 00	 mov	 eax, 4
  00605	6b c8 14	 imul	 ecx, eax, 20
  00608	c6 81 02 00 00
	00 44		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 68 ; 00000044H
  0060f	b8 04 00 00 00	 mov	 eax, 4
  00614	6b c8 14	 imul	 ecx, eax, 20
  00617	c6 81 01 00 00
	00 6d		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 109 ; 0000006dH
  0061e	b8 04 00 00 00	 mov	 eax, 4
  00623	6b c8 14	 imul	 ecx, eax, 20
  00626	c6 81 00 00 00
	00 8c		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 140 ; 0000008cH
  0062d	b8 04 00 00 00	 mov	 eax, 4
  00632	6b c8 14	 imul	 ecx, eax, 20
  00635	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 160  :    set_rgb_colour (hud_colour_table[HUD_COL_BLUE2],       15,    26,   72, 255);

  0063c	b8 04 00 00 00	 mov	 eax, 4
  00641	6b c8 15	 imul	 ecx, eax, 21
  00644	c6 81 02 00 00
	00 0f		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 15 ; 0000000fH
  0064b	b8 04 00 00 00	 mov	 eax, 4
  00650	6b c8 15	 imul	 ecx, eax, 21
  00653	c6 81 01 00 00
	00 1a		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 26 ; 0000001aH
  0065a	b8 04 00 00 00	 mov	 eax, 4
  0065f	6b c8 15	 imul	 ecx, eax, 21
  00662	c6 81 00 00 00
	00 48		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 72 ; 00000048H
  00669	b8 04 00 00 00	 mov	 eax, 4
  0066e	6b c8 15	 imul	 ecx, eax, 21
  00671	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 161  :    set_rgb_colour (hud_colour_table[HUD_COL_BLUE3],       49,    66,  109, 255);

  00678	b8 04 00 00 00	 mov	 eax, 4
  0067d	6b c8 16	 imul	 ecx, eax, 22
  00680	c6 81 02 00 00
	00 31		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+2], 49 ; 00000031H
  00687	b8 04 00 00 00	 mov	 eax, 4
  0068c	6b c8 16	 imul	 ecx, eax, 22
  0068f	c6 81 01 00 00
	00 42		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+1], 66 ; 00000042H
  00696	b8 04 00 00 00	 mov	 eax, 4
  0069b	6b c8 16	 imul	 ecx, eax, 22
  0069e	c6 81 00 00 00
	00 6d		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx], 109 ; 0000006dH
  006a5	b8 04 00 00 00	 mov	 eax, 4
  006aa	6b c8 16	 imul	 ecx, eax, 22
  006ad	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 162  : 
; 163  : 	if (get_global_gunship_type() == GUNSHIP_TYPE_HIND)

  006b4	83 3d 0c 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12, 5
  006bb	75 12		 jne	 SHORT $LN5@initialise

; 164  : 		hud_colour = get_hind_hud_colour();

  006bd	e8 00 00 00 00	 call	 ?get_hind_hud_colour@@YG?AUREAL_COLOUR@@XZ ; get_hind_hud_colour
  006c2	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  006c5	8b 45 b8	 mov	 eax, DWORD PTR $T1[ebp]
  006c8	a3 00 00 00 00	 mov	 DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A, eax ; hud_colour

; 165  : 	else

  006cd	eb 12		 jmp	 SHORT $LN6@initialise
$LN5@initialise:

; 166  : 		hud_colour = hud_colour_table[get_global_hud_colour ()];

  006cf	a1 10 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+16
  006d4	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax*4]
  006db	89 0d 00 00 00
	00		 mov	 DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A, ecx ; hud_colour
$LN6@initialise:

; 167  : }

  006e1	5f		 pop	 edi
  006e2	5e		 pop	 esi
  006e3	5b		 pop	 ebx
  006e4	8b e5		 mov	 esp, ebp
  006e6	5d		 pop	 ebp
  006e7	c3		 ret	 0
?initialise_common_hud@@YGXXZ ENDP			; initialise_common_hud
_TEXT	ENDS
END
