; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\userint2\ui_obj\screen\sc_updt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?update_ui_screen_stack@@YGXXZ			; update_ui_screen_stack
PUBLIC	?update_ui_screen_stack_redraw_count@@YGHXZ	; update_ui_screen_stack_redraw_count
PUBLIC	??$max@H@std@@YGABHABH0@Z			; std::max<int>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?set_viewport@@YGXMMMM@Z:PROC			; set_viewport
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?get_ui_screen_stack_head@@YGPAUUI_OBJECT@@XZ:PROC ; get_ui_screen_stack_head
EXTRN	?ui_set_origin@@YGXMM@Z:PROC			; ui_set_origin
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?ui_user_redraw_function@@3P6GHXZA:DWORD	; ui_user_redraw_function
EXTRN	?fn_draw_ui_object@@3PAP6GXPAUUI_OBJECT@@@ZA:BYTE ; fn_draw_ui_object
EXTRN	?fn_get_ui_object_x@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x
EXTRN	?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_y
EXTRN	?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x_size
EXTRN	?fn_get_ui_object_y_size@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_y_size
EXTRN	?fn_get_ui_object_x_origin@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x_origin
EXTRN	?fn_get_ui_object_y_origin@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_y_origin
EXTRN	?fn_get_ui_object_drawable@@3PAP6GHPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_drawable
EXTRN	?fn_set_ui_object_redraw@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_redraw
EXTRN	?fn_update_ui_object@@3PAP6GXPAUUI_OBJECT@@@ZA:BYTE ; fn_update_ui_object
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YGABHABH0@Z PROC				; std::max<int>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@max
  00021	eb 4a		 jmp	 SHORT $LN2@max
$LN7@max:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 0e 15 00 00	 push	 5390			; 0000150eH
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@max
  00049	cc		 int	 3
$LN12@max:
  0004a	6a 00		 push	 0
  0004c	68 0e 15 00 00	 push	 5390			; 0000150eH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@max
$LN2@max:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@max:

; 5395 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$max@H@std@@YGABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\screen\sc_updt.c
;	COMDAT ?recurse_count_redraw_number@@YGHPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_count$ = -12						; size = 4
_new_count$ = -8					; size = 4
_raw$ = -4						; size = 4
_obj$ = 8						; size = 4
?recurse_count_redraw_number@@YGHPAUUI_OBJECT@@@Z PROC	; recurse_count_redraw_number, COMDAT

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 217  : 
; 218  : 	area_ui_object
; 219  : 		*raw;
; 220  : 
; 221  : 	int
; 222  : 		new_count,
; 223  : 		count;
; 224  : 
; 225  : 	raw = (area_ui_object *) obj->data;

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 226  : 
; 227  : 	count = 0;

  00012	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 228  : 
; 229  : 	new_count = 0;

  00019	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _new_count$[ebp], 0

; 230  : 
; 231  : 	if (get_ui_object_drawable (obj))

  00020	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_drawable@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
  00030	ff d0		 call	 eax
  00032	85 c0		 test	 eax, eax
  00034	74 4e		 je	 SHORT $LN2@recurse_co

; 232  : 	{
; 233  : 
; 234  : 		count = raw->redraw;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00039	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0003c	c1 e9 07	 shr	 ecx, 7
  0003f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00045	89 4d f4	 mov	 DWORD PTR _count$[ebp], ecx

; 235  : 
; 236  : 		if (raw->child)

  00048	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0004b	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  0004f	74 33		 je	 SHORT $LN2@recurse_co

; 237  : 		{
; 238  : 	
; 239  : 			new_count = recurse_count_redraw_number (raw->child);

  00051	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00054	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 ?recurse_count_redraw_number@@YGHPAUUI_OBJECT@@@Z ; recurse_count_redraw_number
  0005d	89 45 f8	 mov	 DWORD PTR _new_count$[ebp], eax

; 240  : 
; 241  : 			count = max (( int ) raw->redraw, new_count);

  00060	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00063	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00066	c1 e9 07	 shr	 ecx, 7
  00069	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0006f	89 4d b0	 mov	 DWORD PTR $T2[ebp], ecx
  00072	8d 55 f8	 lea	 edx, DWORD PTR _new_count$[ebp]
  00075	52		 push	 edx
  00076	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	89 4d f4	 mov	 DWORD PTR _count$[ebp], ecx
$LN2@recurse_co:

; 242  : 		}
; 243  : 	}
; 244  : 
; 245  : 	if (raw->next)

  00084	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00087	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  0008b	74 45		 je	 SHORT $LN4@recurse_co

; 246  : 	{
; 247  : 
; 248  : 		new_count = recurse_count_redraw_number (raw->next);

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00090	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ?recurse_count_redraw_number@@YGHPAUUI_OBJECT@@@Z ; recurse_count_redraw_number
  00099	89 45 f8	 mov	 DWORD PTR _new_count$[ebp], eax

; 249  : 
; 250  : 		new_count = max (count, new_count);

  0009c	8d 45 f8	 lea	 eax, DWORD PTR _new_count$[ebp]
  0009f	50		 push	 eax
  000a0	8d 4d f4	 lea	 ecx, DWORD PTR _count$[ebp]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  000a9	8b 10		 mov	 edx, DWORD PTR [eax]
  000ab	89 55 f8	 mov	 DWORD PTR _new_count$[ebp], edx

; 251  : 
; 252  : 		count = max ( ( int ) raw->redraw, new_count);

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000b1	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000b4	c1 e9 07	 shr	 ecx, 7
  000b7	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000bd	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000c0	8d 55 f8	 lea	 edx, DWORD PTR _new_count$[ebp]
  000c3	52		 push	 edx
  000c4	8d 45 ac	 lea	 eax, DWORD PTR $T1[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  000cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cf	89 4d f4	 mov	 DWORD PTR _count$[ebp], ecx
$LN4@recurse_co:

; 253  : 	}
; 254  : 
; 255  : 	return count;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]

; 256  : }

  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 04 00	 ret	 4
?recurse_count_redraw_number@@YGHPAUUI_OBJECT@@@Z ENDP	; recurse_count_redraw_number
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\screen\sc_updt.c
;	COMDAT ?update_ui_screen_stack_redraw_count@@YGHXZ
_TEXT	SEGMENT
_max_redraw_count$ = -12				; size = 4
_ui_user_function_count$ = -8				; size = 4
_obj$ = -4						; size = 4
?update_ui_screen_stack_redraw_count@@YGHXZ PROC	; update_ui_screen_stack_redraw_count, COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 176  : 
; 177  : 	ui_object
; 178  : 		*obj;
; 179  : 
; 180  : 	int
; 181  : 		ui_user_function_count,
; 182  : 		max_redraw_count;
; 183  : 
; 184  : 	max_redraw_count = 0;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _max_redraw_count$[ebp], 0

; 185  : 
; 186  : 	ui_user_function_count = 0;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ui_user_function_count$[ebp], 0

; 187  : 
; 188  : 	obj = get_ui_screen_stack_head ();

  00017	e8 00 00 00 00	 call	 ?get_ui_screen_stack_head@@YGPAUUI_OBJECT@@XZ ; get_ui_screen_stack_head
  0001c	89 45 fc	 mov	 DWORD PTR _obj$[ebp], eax

; 189  : 
; 190  : 	max_redraw_count = recurse_count_redraw_number (obj);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _obj$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?recurse_count_redraw_number@@YGHPAUUI_OBJECT@@@Z ; recurse_count_redraw_number
  00028	89 45 f4	 mov	 DWORD PTR _max_redraw_count$[ebp], eax

; 191  : 
; 192  : 	if (ui_user_redraw_function)

  0002b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ui_user_redraw_function@@3P6GHXZA, 0 ; ui_user_redraw_function
  00032	74 09		 je	 SHORT $LN2@update_ui_

; 193  : 	{
; 194  : 
; 195  : 		ui_user_function_count = ui_user_redraw_function ();

  00034	ff 15 00 00 00
	00		 call	 DWORD PTR ?ui_user_redraw_function@@3P6GHXZA ; ui_user_redraw_function
  0003a	89 45 f8	 mov	 DWORD PTR _ui_user_function_count$[ebp], eax
$LN2@update_ui_:

; 196  : 	}
; 197  : 
; 198  : 	max_redraw_count = max (max_redraw_count, ui_user_function_count);

  0003d	8d 45 f8	 lea	 eax, DWORD PTR _ui_user_function_count$[ebp]
  00040	50		 push	 eax
  00041	8d 4d f4	 lea	 ecx, DWORD PTR _max_redraw_count$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  0004a	8b 10		 mov	 edx, DWORD PTR [eax]
  0004c	89 55 f4	 mov	 DWORD PTR _max_redraw_count$[ebp], edx

; 199  : 
; 200  : 	//debug_log ("SCREEN UPDT: max redraw count = %d", max_redraw_count);
; 201  : 
; 202  : 	if (max_redraw_count)

  0004f	83 7d f4 00	 cmp	 DWORD PTR _max_redraw_count$[ebp], 0
  00053	74 07		 je	 SHORT $LN3@update_ui_

; 203  : 	{
; 204  : 
; 205  : 		max_redraw_count = MAX_UI_REDRAW_NUMBER;

  00055	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _max_redraw_count$[ebp], 2
$LN3@update_ui_:

; 206  : 	}
; 207  : 
; 208  : 	return max_redraw_count;

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _max_redraw_count$[ebp]

; 209  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?update_ui_screen_stack_redraw_count@@YGHXZ ENDP	; update_ui_screen_stack_redraw_count
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\screen\sc_updt.c
;	COMDAT ?update_ui_screen_stack@@YGXXZ
_TEXT	SEGMENT
tv247 = -116						; size = 4
tv239 = -116						; size = 4
_old_viewport_y2$ = -48					; size = 4
_old_viewport_x2$ = -44					; size = 4
_old_viewport_y1$ = -40					; size = 4
_old_viewport_x1$ = -36					; size = 4
_screen$ = -32						; size = 4
_screen_stack_head$ = -28				; size = 4
_y_origin$ = -24					; size = 4
_x_origin$ = -20					; size = 4
_y2$ = -16						; size = 4
_x2$ = -12						; size = 4
_y1$ = -8						; size = 4
_x1$ = -4						; size = 4
?update_ui_screen_stack@@YGXXZ PROC			; update_ui_screen_stack, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 85   : 
; 86   : 	float
; 87   : 		x1,
; 88   : 		y1,
; 89   : 		x2,
; 90   : 		y2,
; 91   : 		x_origin,
; 92   : 		y_origin;
; 93   : 
; 94   : 	ui_object
; 95   : 		*screen_stack_head;
; 96   : 
; 97   : 	screen_ui_object
; 98   : 		*screen;
; 99   : 
; 100  : 	float
; 101  : 		old_viewport_x1,
; 102  : 		old_viewport_y1,
; 103  : 		old_viewport_x2,
; 104  : 		old_viewport_y2;
; 105  : 
; 106  :    // store parents viewport data
; 107  : 
; 108  : 	old_viewport_x1 = active_viewport.x_min;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00011	f3 0f 11 45 dc	 movss	 DWORD PTR _old_viewport_x1$[ebp], xmm0

; 109  : 	old_viewport_y1 = active_viewport.y_min;

  00016	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0001e	f3 0f 11 45 d8	 movss	 DWORD PTR _old_viewport_y1$[ebp], xmm0

; 110  : 	old_viewport_x2 = active_viewport.x_max;

  00023	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0002b	f3 0f 11 45 d4	 movss	 DWORD PTR _old_viewport_x2$[ebp], xmm0

; 111  : 	old_viewport_y2 = active_viewport.y_max;

  00030	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00038	f3 0f 11 45 d0	 movss	 DWORD PTR _old_viewport_y2$[ebp], xmm0

; 112  : 
; 113  : 	if ( begin_3d_scene () )

  0003d	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00042	85 c0		 test	 eax, eax
  00044	0f 84 93 01 00
	00		 je	 $LN2@update_ui_

; 114  : 	{
; 115  : 
; 116  : 		set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, FALSE, FALSE );

  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	6a 00		 push	 0
  00052	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 117  : 
; 118  : 		screen_stack_head = get_ui_screen_stack_head ();

  00057	e8 00 00 00 00	 call	 ?get_ui_screen_stack_head@@YGPAUUI_OBJECT@@XZ ; get_ui_screen_stack_head
  0005c	89 45 e4	 mov	 DWORD PTR _screen_stack_head$[ebp], eax

; 119  : 	
; 120  : 		if (screen_stack_head)

  0005f	83 7d e4 00	 cmp	 DWORD PTR _screen_stack_head$[ebp], 0
  00063	0f 84 6f 01 00
	00		 je	 $LN6@update_ui_

; 121  : 		{
; 122  : 		
; 123  : 			screen = (screen_ui_object *) screen_stack_head->data;

  00069	8b 45 e4	 mov	 eax, DWORD PTR _screen_stack_head$[ebp]
  0006c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006f	89 4d e0	 mov	 DWORD PTR _screen$[ebp], ecx

; 124  : 		
; 125  : 			if (screen->area.drawable)

  00072	8b 45 e0	 mov	 eax, DWORD PTR _screen$[ebp]
  00075	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00078	c1 e9 05	 shr	 ecx, 5
  0007b	83 e1 01	 and	 ecx, 1
  0007e	0f 84 54 01 00
	00		 je	 $LN6@update_ui_

; 126  : 			{
; 127  : 	
; 128  : 				set_ui_object_redraw (screen_stack_head, TRUE);

  00084	6a 01		 push	 1
  00086	8b 45 e4	 mov	 eax, DWORD PTR _screen_stack_head$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d e4	 mov	 ecx, DWORD PTR _screen_stack_head$[ebp]
  0008d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_redraw@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  00096	ff d0		 call	 eax

; 129  : 	
; 130  : 				draw_ui_object (screen_stack_head);

  00098	8b 45 e4	 mov	 eax, DWORD PTR _screen_stack_head$[ebp]
  0009b	50		 push	 eax
  0009c	8b 4d e4	 mov	 ecx, DWORD PTR _screen_stack_head$[ebp]
  0009f	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a1	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_draw_ui_object@@3PAP6GXPAUUI_OBJECT@@@ZA[edx*4]
  000a8	ff d0		 call	 eax

; 131  : 	
; 132  : 				// set up the viewport for this screen
; 133  : 	
; 134  : 				if (screen->area.child)

  000aa	8b 45 e0	 mov	 eax, DWORD PTR _screen$[ebp]
  000ad	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  000b1	0f 84 00 01 00
	00		 je	 $LN5@update_ui_

; 135  : 				{
; 136  : 	
; 137  : 					x_origin = get_ui_object_x_origin (screen_stack_head);

  000b7	8b 45 e4	 mov	 eax, DWORD PTR _screen_stack_head$[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d e4	 mov	 ecx, DWORD PTR _screen_stack_head$[ebp]
  000be	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c0	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_origin@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  000c7	ff d0		 call	 eax
  000c9	d9 5d ec	 fstp	 DWORD PTR _x_origin$[ebp]

; 138  : 	
; 139  : 					y_origin = get_ui_object_y_origin (screen_stack_head);

  000cc	8b 45 e4	 mov	 eax, DWORD PTR _screen_stack_head$[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d e4	 mov	 ecx, DWORD PTR _screen_stack_head$[ebp]
  000d3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d5	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_y_origin@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  000dc	ff d0		 call	 eax
  000de	d9 5d e8	 fstp	 DWORD PTR _y_origin$[ebp]

; 140  : 			
; 141  : 					x1 = get_ui_object_x (screen_stack_head);

  000e1	8b 45 e4	 mov	 eax, DWORD PTR _screen_stack_head$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d e4	 mov	 ecx, DWORD PTR _screen_stack_head$[ebp]
  000e8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ea	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  000f1	ff d0		 call	 eax
  000f3	d9 5d fc	 fstp	 DWORD PTR _x1$[ebp]

; 142  : 	
; 143  : 					y1 = get_ui_object_y (screen_stack_head);

  000f6	8b 45 e4	 mov	 eax, DWORD PTR _screen_stack_head$[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d e4	 mov	 ecx, DWORD PTR _screen_stack_head$[ebp]
  000fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ff	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  00106	ff d0		 call	 eax
  00108	d9 5d f8	 fstp	 DWORD PTR _y1$[ebp]

; 144  : 			
; 145  : 					x2 = x1 + get_ui_object_x_size (screen_stack_head);

  0010b	8b 45 e4	 mov	 eax, DWORD PTR _screen_stack_head$[ebp]
  0010e	50		 push	 eax
  0010f	8b 4d e4	 mov	 ecx, DWORD PTR _screen_stack_head$[ebp]
  00112	8b 11		 mov	 edx, DWORD PTR [ecx]
  00114	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  0011b	ff d0		 call	 eax
  0011d	d9 5d 8c	 fstp	 DWORD PTR tv239[ebp]
  00120	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv239[ebp]
  00125	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _x1$[ebp]
  0012a	f3 0f 11 45 f4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 146  : 	
; 147  : 					y2 = y1 + get_ui_object_y_size (screen_stack_head);

  0012f	8b 45 e4	 mov	 eax, DWORD PTR _screen_stack_head$[ebp]
  00132	50		 push	 eax
  00133	8b 4d e4	 mov	 ecx, DWORD PTR _screen_stack_head$[ebp]
  00136	8b 11		 mov	 edx, DWORD PTR [ecx]
  00138	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_y_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  0013f	ff d0		 call	 eax
  00141	d9 5d 8c	 fstp	 DWORD PTR tv247[ebp]
  00144	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv247[ebp]
  00149	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _y1$[ebp]
  0014e	f3 0f 11 45 f0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 148  : 			
; 149  : 					set_viewport (x1, y1, x2, y2);

  00153	51		 push	 ecx
  00154	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	51		 push	 ecx
  0015f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	51		 push	 ecx
  0016a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0016f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00174	51		 push	 ecx
  00175	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	e8 00 00 00 00	 call	 ?set_viewport@@YGXMMMM@Z ; set_viewport

; 150  : 			
; 151  : 					ui_set_origin (x_origin, y_origin);

  00184	51		 push	 ecx
  00185	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	51		 push	 ecx
  00190	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	e8 00 00 00 00	 call	 ?ui_set_origin@@YGXMM@Z	; ui_set_origin

; 152  : 	
; 153  : 					update_ui_object (screen->area.child);

  0019f	8b 45 e0	 mov	 eax, DWORD PTR _screen$[ebp]
  001a2	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  001a5	51		 push	 ecx
  001a6	8b 55 e0	 mov	 edx, DWORD PTR _screen$[ebp]
  001a9	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  001ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ae	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_update_ui_object@@3PAP6GXPAUUI_OBJECT@@@ZA[ecx*4]
  001b5	ff d2		 call	 edx
$LN5@update_ui_:

; 154  : 				}
; 155  : 		
; 156  : 				if (screen->area.next)

  001b7	8b 45 e0	 mov	 eax, DWORD PTR _screen$[ebp]
  001ba	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  001be	74 18		 je	 SHORT $LN6@update_ui_

; 157  : 				{
; 158  : 		
; 159  : 					update_ui_object (screen->area.next);

  001c0	8b 45 e0	 mov	 eax, DWORD PTR _screen$[ebp]
  001c3	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  001c6	51		 push	 ecx
  001c7	8b 55 e0	 mov	 edx, DWORD PTR _screen$[ebp]
  001ca	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cf	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_update_ui_object@@3PAP6GXPAUUI_OBJECT@@@ZA[ecx*4]
  001d6	ff d2		 call	 edx
$LN6@update_ui_:

; 160  : 				}
; 161  : 			}
; 162  : 		}
; 163  : 
; 164  : 		end_3d_scene ();

  001d8	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN2@update_ui_:

; 165  : 	}
; 166  : 
; 167  : 	set_viewport (old_viewport_x1, old_viewport_y1, old_viewport_x2, old_viewport_y2);

  001dd	51		 push	 ecx
  001de	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _old_viewport_y2$[ebp]
  001e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e8	51		 push	 ecx
  001e9	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _old_viewport_x2$[ebp]
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	51		 push	 ecx
  001f4	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _old_viewport_y1$[ebp]
  001f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fe	51		 push	 ecx
  001ff	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _old_viewport_x1$[ebp]
  00204	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00209	e8 00 00 00 00	 call	 ?set_viewport@@YGXMMMM@Z ; set_viewport

; 168  : }

  0020e	5f		 pop	 edi
  0020f	5e		 pop	 esi
  00210	5b		 pop	 ebx
  00211	8b e5		 mov	 esp, ebp
  00213	5d		 pop	 ebp
  00214	c3		 ret	 0
?update_ui_screen_stack@@YGXXZ ENDP			; update_ui_screen_stack
_TEXT	ENDS
END
