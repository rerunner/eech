; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\vehicle\vh_pack.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?pack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z ; pack_vehicle_data
PUBLIC	?unpack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z ; unpack_vehicle_data
PUBLIC	?__LINE__Var@?0??pack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z@4JA ; `pack_vehicle_data'::`1'::__LINE__Var
PUBLIC	??_C@_0EM@ONNFFJJJ@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z@4JA ; `unpack_vehicle_data'::`1'::__LINE__Var
PUBLIC	__real@3f800000
PUBLIC	__real@bf800000
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?construct_3d_object@@YGPAUOBJECT_3D_INSTANCE@@H@Z:PROC ; construct_3d_object
EXTRN	?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z:PROC ; pack_list_root
EXTRN	?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z:PROC ; unpack_list_root
EXTRN	?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z:PROC ; pack_list_link
EXTRN	?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z:PROC ; unpack_list_link
EXTRN	?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z:PROC ; pack_float_value
EXTRN	?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z:PROC ; unpack_float_value
EXTRN	?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z:PROC ; pack_int_value
EXTRN	?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z:PROC ; unpack_int_value
EXTRN	?pack_mobile_data@@YGXPAUENTITY@@PAUMOBILE@@W4PACK_MODES@@@Z:PROC ; pack_mobile_data
EXTRN	?unpack_mobile_data@@YGXPAUENTITY@@PAUMOBILE@@W4PACK_MODES@@@Z:PROC ; unpack_mobile_data
EXTRN	?reset_entity_weapon_config_animation@@YGXPAUENTITY@@@Z:PROC ; reset_entity_weapon_config_animation
EXTRN	?weapon_config_database@@3PAY0CA@UWEAPON_PACKAGE@@A:BYTE ; weapon_config_database
EXTRN	__fltused:DWORD
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z@4JA DD 0134H ; `unpack_vehicle_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
CONST	SEGMENT
??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@ DB '('
	DB	'mode >= 0) && (mode < NUM_PACK_MODES)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@ONNFFJJJ@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EM@ONNFFJJJ@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\vehicle\vh_pac'
	DB	'k.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z@4JA DD 050H ; `pack_vehicle_data'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\vehicle\vh_pack.c
;	COMDAT ?unpack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv295 = -72						; size = 4
tv285 = -72						; size = 4
tv276 = -72						; size = 4
tv165 = -72						; size = 4
tv70 = -72						; size = 4
_package$ = -4						; size = 4
_en$ = 8						; size = 4
_raw$ = 12						; size = 4
_mode$ = 16						; size = 4
?unpack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z PROC ; unpack_vehicle_data, COMDAT

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 309  : 	int
; 310  : 		package;
; 311  : 
; 312  : 	ASSERT ((mode >= 0) && (mode < NUM_PACK_MODES));

  00009	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN8@unpack_veh
  0000f	83 7d 10 04	 cmp	 DWORD PTR _mode$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN7@unpack_veh
$LN8@unpack_veh:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@ONNFFJJJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@unpack_veh:

; 313  : 
; 314  : 	switch (mode)

  0002d	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	0f 8c 6e 04 00
	00		 jl	 $LN2@unpack_veh
  0003d	83 7d b8 01	 cmp	 DWORD PTR tv70[ebp], 1
  00041	7e 05		 jle	 SHORT $LN9@unpack_veh
  00043	e9 63 04 00 00	 jmp	 $LN2@unpack_veh
$LN9@unpack_veh:

; 315  : 	{
; 316  : 		////////////////////////////////////////
; 317  : 		case PACK_MODE_SERVER_SESSION:
; 318  : 		case PACK_MODE_CLIENT_SESSION:
; 319  : 		////////////////////////////////////////
; 320  : 		{
; 321  : 			//
; 322  : 			// unpack mobile data
; 323  : 			//
; 324  : 
; 325  : 			unpack_mobile_data (en, &raw->mob, mode);

  00048	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?unpack_mobile_data@@YGXPAUENTITY@@PAUMOBILE@@W4PACK_MODES@@@Z ; unpack_mobile_data

; 326  : 
; 327  : 			//
; 328  : 			// unpack vehicle data
; 329  : 			//
; 330  : 
; 331  : 			raw->object_3d_shape = unpack_int_value (en, INT_TYPE_OBJECT_3D_SHAPE);

  00059	68 92 00 00 00	 push	 146			; 00000092H
  0005e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0006a	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 332  : 
; 333  : 			raw->inst3d = construct_3d_object (raw->object_3d_shape);

  00070	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00073	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?construct_3d_object@@YGPAUOBJECT_3D_INSTANCE@@H@Z ; construct_3d_object
  0007f	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00082	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 334  : 
; 335  : 			if (mode == PACK_MODE_SERVER_SESSION)

  00088	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0008c	75 26		 jne	 SHORT $LN11@unpack_veh

; 336  : 			{
; 337  : 
; 338  : 				/////////////////////////////////////////////////////////////////
; 339  : 				if (unpack_int_value (en, INT_TYPE_VALID))

  0008e	68 ef 00 00 00	 push	 239			; 000000efH
  00093	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0009c	85 c0		 test	 eax, eax
  0009e	74 14		 je	 SHORT $LN11@unpack_veh

; 340  : 				{
; 341  : 
; 342  : 					unpack_list_root (en, LIST_TYPE_TASK_DEPENDENT, &raw->task_dependent_root);

  000a0	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000a3	05 88 00 00 00	 add	 eax, 136		; 00000088H
  000a8	50		 push	 eax
  000a9	6a 27		 push	 39			; 00000027H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN11@unpack_veh:

; 343  : 				}
; 344  : 				/////////////////////////////////////////////////////////////////
; 345  : 			}
; 346  : 
; 347  : 			/////////////////////////////////////////////////////////////////
; 348  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  000b4	68 ef 00 00 00	 push	 239			; 000000efH
  000b9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  000c2	85 c0		 test	 eax, eax
  000c4	74 14		 je	 SHORT $LN12@unpack_veh

; 349  : 			{
; 350  : 
; 351  : 				unpack_list_root (en, LIST_TYPE_LAUNCHED_WEAPON, &raw->launched_weapon_root);

  000c6	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000c9	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  000ce	50		 push	 eax
  000cf	6a 18		 push	 24			; 00000018H
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN12@unpack_veh:

; 352  : 			}
; 353  : 			/////////////////////////////////////////////////////////////////
; 354  : 
; 355  : 			/////////////////////////////////////////////////////////////////
; 356  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  000da	68 ef 00 00 00	 push	 239			; 000000efH
  000df	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  000e8	85 c0		 test	 eax, eax
  000ea	74 14		 je	 SHORT $LN13@unpack_veh

; 357  : 			{
; 358  : 
; 359  : 				unpack_list_root (en, LIST_TYPE_MOVEMENT_DEPENDENT, &raw->movement_dependent_root);

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000ef	05 90 00 00 00	 add	 eax, 144		; 00000090H
  000f4	50		 push	 eax
  000f5	6a 1a		 push	 26			; 0000001aH
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000fa	51		 push	 ecx
  000fb	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN13@unpack_veh:

; 360  : 			}
; 361  : 			/////////////////////////////////////////////////////////////////
; 362  : 
; 363  : 			unpack_list_link (en, LIST_TYPE_FOLLOWER, &raw->follower_link);

  00100	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00103	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  00108	50		 push	 eax
  00109	6a 0d		 push	 13			; 0000000dH
  0010b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link

; 364  : 
; 365  : 			// gunship_target_link
; 366  : 
; 367  : 			unpack_list_link (en, LIST_TYPE_MEMBER, &raw->member_link);

  00114	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00117	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  0011c	50		 push	 eax
  0011d	6a 19		 push	 25			; 00000019H
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00122	51		 push	 ecx
  00123	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link

; 368  : 
; 369  : 			/////////////////////////////////////////////////////////////////
; 370  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  00128	68 ef 00 00 00	 push	 239			; 000000efH
  0012d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00136	85 c0		 test	 eax, eax
  00138	74 14		 je	 SHORT $LN14@unpack_veh

; 371  : 			{
; 372  : 
; 373  : 				unpack_list_link (en, LIST_TYPE_MOVEMENT_DEPENDENT, &raw->movement_dependent_link);

  0013a	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0013d	05 c4 00 00 00	 add	 eax, 196		; 000000c4H
  00142	50		 push	 eax
  00143	6a 1a		 push	 26			; 0000001aH
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link
$LN14@unpack_veh:

; 374  : 			}
; 375  : 			/////////////////////////////////////////////////////////////////
; 376  : 
; 377  : 			// view_link
; 378  : 
; 379  : 			if (mode == PACK_MODE_SERVER_SESSION)

  0014e	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00152	75 14		 jne	 SHORT $LN15@unpack_veh

; 380  : 			{
; 381  : 				unpack_list_link (en, LIST_TYPE_TAKEOFF_QUEUE, &raw->takeoff_queue_link);

  00154	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00157	05 dc 00 00 00	 add	 eax, 220		; 000000dcH
  0015c	50		 push	 eax
  0015d	6a 25		 push	 37			; 00000025H
  0015f	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00162	51		 push	 ecx
  00163	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link
$LN15@unpack_veh:

; 382  : 			}
; 383  : 
; 384  : 			raw->operational_state = unpack_int_value (en, INT_TYPE_OPERATIONAL_STATE);

  00168	68 97 00 00 00	 push	 151			; 00000097H
  0016d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00176	89 45 b8	 mov	 DWORD PTR tv165[ebp], eax
  00179	8b 4d b8	 mov	 ecx, DWORD PTR tv165[ebp]
  0017c	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0017f	c1 e1 05	 shl	 ecx, 5
  00182	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00185	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  0018b	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00190	0b c1		 or	 eax, ecx
  00192	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00195	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax

; 385  : 
; 386  : 			raw->sleep = unpack_float_value (en, FLOAT_TYPE_SLEEP);	

  0019b	6a 75		 push	 117			; 00000075H
  0019d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001a0	50		 push	 eax
  001a1	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  001a6	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  001a9	d9 99 e8 00 00
	00		 fstp	 DWORD PTR [ecx+232]

; 387  : 
; 388  : 			if (mode == PACK_MODE_SERVER_SESSION)

  001af	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  001b3	75 14		 jne	 SHORT $LN16@unpack_veh

; 389  : 			{
; 390  : 				raw->distance = unpack_float_value (en, FLOAT_TYPE_DISTANCE);	// only needed by server?

  001b5	6a 1f		 push	 31			; 0000001fH
  001b7	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  001c0	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  001c3	d9 99 ec 00 00
	00		 fstp	 DWORD PTR [ecx+236]
$LN16@unpack_veh:

; 391  : 			}
; 392  : 
; 393  : 			/////////////////////////////////////////////////////////////////
; 394  : 			if (raw->operational_state == OPERATIONAL_STATE_LANDED)

  001c9	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  001cc	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  001d2	c1 e9 05	 shr	 ecx, 5
  001d5	83 e1 1f	 and	 ecx, 31			; 0000001fH
  001d8	83 f9 04	 cmp	 ecx, 4
  001db	75 14		 jne	 SHORT $LN17@unpack_veh

; 395  : 			{
; 396  : 
; 397  : 				raw->loading_door_state = unpack_float_value (en, FLOAT_TYPE_LOADING_DOOR_STATE);

  001dd	6a 3f		 push	 63			; 0000003fH
  001df	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  001e8	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  001eb	d9 99 f0 00 00
	00		 fstp	 DWORD PTR [ecx+240]
$LN17@unpack_veh:

; 398  : 			}
; 399  : 			/////////////////////////////////////////////////////////////////
; 400  : 
; 401  : 			// radar_rotation_state
; 402  : 
; 403  : 			if (mode == PACK_MODE_SERVER_SESSION)

  001f1	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  001f5	75 42		 jne	 SHORT $LN18@unpack_veh

; 404  : 			{
; 405  : 				raw->death_timer = unpack_float_value (en, FLOAT_TYPE_DEATH_TIMER);

  001f7	6a 1b		 push	 27			; 0000001bH
  001f9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00202	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00205	d9 99 10 01 00
	00		 fstp	 DWORD PTR [ecx+272]

; 406  : 
; 407  : 				raw->target_fire_timer = unpack_float_value (en, FLOAT_TYPE_TARGET_FIRE_TIMER);

  0020b	68 83 00 00 00	 push	 131			; 00000083H
  00210	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00219	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0021c	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 408  : 
; 409  : 				raw->target_scan_timer = unpack_float_value (en, FLOAT_TYPE_TARGET_SCAN_TIMER);

  00222	68 87 00 00 00	 push	 135			; 00000087H
  00227	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00230	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00233	d9 99 f8 00 00
	00		 fstp	 DWORD PTR [ecx+248]
$LN18@unpack_veh:

; 410  : 			}
; 411  : 
; 412  : 			// view_interest_level
; 413  : 
; 414  : 			// weapon_burst_timer
; 415  : 
; 416  : 			raw->weapon_system_ready_state = unpack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_READY_STATE);

  00239	68 9a 00 00 00	 push	 154			; 0000009aH
  0023e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00247	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0024a	d9 99 08 01 00
	00		 fstp	 DWORD PTR [ecx+264]

; 417  : 
; 418  : 			if (mode == PACK_MODE_SERVER_SESSION)

  00250	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00254	75 14		 jne	 SHORT $LN19@unpack_veh

; 419  : 			{
; 420  : 				raw->decoy_release_timer = unpack_float_value (en, FLOAT_TYPE_DECOY_RELEASE_TIMER);

  00256	6a 1c		 push	 28			; 0000001cH
  00258	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00261	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00264	d9 99 0c 01 00
	00		 fstp	 DWORD PTR [ecx+268]
$LN19@unpack_veh:

; 421  : 			}
; 422  : 
; 423  : 			////////////////////////////////////////
; 424  : 
; 425  : 			raw->weapon_config_type = (weapon_config_types) unpack_int_value (en, INT_TYPE_WEAPON_CONFIG_TYPE);

  0026a	68 05 01 00 00	 push	 261			; 00000105H
  0026f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00272	50		 push	 eax
  00273	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00278	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0027b	89 81 14 01 00
	00		 mov	 DWORD PTR [ecx+276], eax

; 426  : 
; 427  : 			raw->weapon_package_status_array = (weapon_package_status *) malloc_fast_mem (SIZE_WEAPON_PACKAGE_STATUS_ARRAY);

  00281	68 00 02 00 00	 push	 512			; 00000200H
  00286	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  0028b	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0028e	89 81 18 01 00
	00		 mov	 DWORD PTR [ecx+280], eax

; 428  : 
; 429  : 			memset (raw->weapon_package_status_array, 0, SIZE_WEAPON_PACKAGE_STATUS_ARRAY);

  00294	68 00 02 00 00	 push	 512			; 00000200H
  00299	6a 00		 push	 0
  0029b	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0029e	8b 88 18 01 00
	00		 mov	 ecx, DWORD PTR [eax+280]
  002a4	51		 push	 ecx
  002a5	e8 00 00 00 00	 call	 _memset
  002aa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 430  : 
; 431  : 			for (package = 0; package < NUM_WEAPON_PACKAGES; package++)

  002ad	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _package$[ebp], 0
  002b4	eb 09		 jmp	 SHORT $LN6@unpack_veh
$LN4@unpack_veh:
  002b6	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  002b9	83 c0 01	 add	 eax, 1
  002bc	89 45 fc	 mov	 DWORD PTR _package$[ebp], eax
$LN6@unpack_veh:
  002bf	83 7d fc 20	 cmp	 DWORD PTR _package$[ebp], 32 ; 00000020H
  002c3	0f 8d c5 00 00
	00		 jge	 $LN5@unpack_veh

; 432  : 			{
; 433  : 				if (weapon_config_database[raw->weapon_config_type][package].sub_type == ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  002c9	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  002cc	69 88 14 01 00
	00 80 09 00 00	 imul	 ecx, DWORD PTR [eax+276], 2432
  002d6	6b 55 fc 4c	 imul	 edx, DWORD PTR _package$[ebp], 76
  002da	83 bc 11 00 00
	00 00 00	 cmp	 DWORD PTR ?weapon_config_database@@3PAY0CA@UWEAPON_PACKAGE@@A[ecx+edx], 0
  002e2	75 05		 jne	 SHORT $LN20@unpack_veh

; 434  : 				{
; 435  : 					break;

  002e4	e9 a5 00 00 00	 jmp	 $LN5@unpack_veh
$LN20@unpack_veh:

; 436  : 				}
; 437  : 
; 438  : 				raw->weapon_package_status_array[package].number = unpack_int_value (en, INT_TYPE_WEAPON_PACKAGE_NUMBER);

  002e9	68 0d 01 00 00	 push	 269			; 0000010dH
  002ee	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002f1	50		 push	 eax
  002f2	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  002f7	8b 4d fc	 mov	 ecx, DWORD PTR _package$[ebp]
  002fa	c1 e1 04	 shl	 ecx, 4
  002fd	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00300	8b 92 18 01 00
	00		 mov	 edx, DWORD PTR [edx+280]
  00306	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax

; 439  : 
; 440  : 				raw->weapon_package_status_array[package].damaged = unpack_int_value (en, INT_TYPE_WEAPON_PACKAGE_DAMAGED);

  0030a	68 0b 01 00 00	 push	 267			; 0000010bH
  0030f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00312	50		 push	 eax
  00313	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00318	8b 4d fc	 mov	 ecx, DWORD PTR _package$[ebp]
  0031b	c1 e1 04	 shl	 ecx, 4
  0031e	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00321	8b 92 18 01 00
	00		 mov	 edx, DWORD PTR [edx+280]
  00327	66 89 44 0a 02	 mov	 WORD PTR [edx+ecx+2], ax

; 441  : 
; 442  : 				if (weapon_config_database[raw->weapon_config_type][package].rotate)

  0032c	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0032f	69 88 14 01 00
	00 80 09 00 00	 imul	 ecx, DWORD PTR [eax+276], 2432
  00339	6b 55 fc 4c	 imul	 edx, DWORD PTR _package$[ebp], 76
  0033d	83 bc 11 18 00
	00 00 00	 cmp	 DWORD PTR ?weapon_config_database@@3PAY0CA@UWEAPON_PACKAGE@@A[ecx+edx+24], 0
  00345	74 42		 je	 SHORT $LN21@unpack_veh

; 443  : 				{
; 444  : 					raw->weapon_package_status_array[package].weapon_system_heading = unpack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_HEADING);

  00347	68 98 00 00 00	 push	 152			; 00000098H
  0034c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0034f	50		 push	 eax
  00350	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00355	8b 4d fc	 mov	 ecx, DWORD PTR _package$[ebp]
  00358	c1 e1 04	 shl	 ecx, 4
  0035b	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  0035e	8b 82 18 01 00
	00		 mov	 eax, DWORD PTR [edx+280]
  00364	d9 5c 08 04	 fstp	 DWORD PTR [eax+ecx+4]

; 445  : 
; 446  : 					raw->weapon_package_status_array[package].weapon_system_pitch = unpack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_PITCH);

  00368	68 99 00 00 00	 push	 153			; 00000099H
  0036d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00370	50		 push	 eax
  00371	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00376	8b 4d fc	 mov	 ecx, DWORD PTR _package$[ebp]
  00379	c1 e1 04	 shl	 ecx, 4
  0037c	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  0037f	8b 82 18 01 00
	00		 mov	 eax, DWORD PTR [edx+280]
  00385	d9 5c 08 08	 fstp	 DWORD PTR [eax+ecx+8]
$LN21@unpack_veh:

; 447  : 				}
; 448  : 
; 449  : 				// muzzle_flash_timer
; 450  : 			}

  00389	e9 28 ff ff ff	 jmp	 $LN4@unpack_veh
$LN5@unpack_veh:

; 451  : 
; 452  : 			reset_entity_weapon_config_animation (en);

  0038e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00391	50		 push	 eax
  00392	e8 00 00 00 00	 call	 ?reset_entity_weapon_config_animation@@YGXPAUENTITY@@@Z ; reset_entity_weapon_config_animation

; 453  : 
; 454  : 			raw->selected_weapon = unpack_int_value (en, INT_TYPE_SELECTED_WEAPON);

  00397	68 b8 00 00 00	 push	 184			; 000000b8H
  0039c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0039f	50		 push	 eax
  003a0	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  003a5	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  003a8	89 81 1c 01 00
	00		 mov	 DWORD PTR [ecx+284], eax

; 455  : 
; 456  : 			////////////////////////////////////////
; 457  : 
; 458  : 			// sound_effect_data
; 459  : 
; 460  : 			raw->formation_position = unpack_int_value (en, INT_TYPE_FORMATION_POSITION);

  003ae	6a 3e		 push	 62			; 0000003eH
  003b0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  003b9	89 45 b8	 mov	 DWORD PTR tv276[ebp], eax
  003bc	8b 4d b8	 mov	 ecx, DWORD PTR tv276[ebp]
  003bf	83 e1 1f	 and	 ecx, 31			; 0000001fH
  003c2	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  003c5	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  003cb	83 e0 e0	 and	 eax, -32		; ffffffe0H
  003ce	0b c1		 or	 eax, ecx
  003d0	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  003d3	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax

; 461  : 
; 462  : 			// selected_weapon_system_ready
; 463  : 
; 464  : 			// weapon_and_target_vectors_valid
; 465  : 
; 466  : 			// gunship_radar_los_clear
; 467  : 
; 468  : 			// los_to_target
; 469  : 
; 470  : 			raw->lights_on = unpack_int_value (en, INT_TYPE_LIGHTS_ON);

  003d9	6a 7a		 push	 122			; 0000007aH
  003db	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003de	50		 push	 eax
  003df	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  003e4	89 45 b8	 mov	 DWORD PTR tv285[ebp], eax
  003e7	8b 4d b8	 mov	 ecx, DWORD PTR tv285[ebp]
  003ea	83 e1 01	 and	 ecx, 1
  003ed	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  003f0	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  003f3	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  003f9	25 ff bf ff ff	 and	 eax, -16385		; ffffbfffH
  003fe	0b c1		 or	 eax, ecx
  00400	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00403	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax

; 471  : 
; 472  : 			// cpg_identified
; 473  : 
; 474  : 			raw->group_member_number = unpack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  00409	6a 4b		 push	 75			; 0000004bH
  0040b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0040e	50		 push	 eax
  0040f	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00414	89 45 b8	 mov	 DWORD PTR tv295[ebp], eax
  00417	8b 4d b8	 mov	 ecx, DWORD PTR tv295[ebp]
  0041a	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0041d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00420	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00423	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  00429	25 ff ff e0 ff	 and	 eax, -2031617		; ffe0ffffH
  0042e	0b c1		 or	 eax, ecx
  00430	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00433	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax

; 475  : 
; 476  : 			// id_number_significant_digits
; 477  : 
; 478  : 			raw->damage_level = unpack_int_value (en, INT_TYPE_DAMAGE_LEVEL);

  00439	6a 25		 push	 37			; 00000025H
  0043b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0043e	50		 push	 eax
  0043f	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00444	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00447	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 479  : 
; 480  : 			// id_number
; 481  : 
; 482  : 			raw->weapon_vector.x = 0.0;

  0044d	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00450	0f 57 c0	 xorps	 xmm0, xmm0
  00453	f3 0f 11 80 34
	01 00 00	 movss	 DWORD PTR [eax+308], xmm0

; 483  : 			raw->weapon_vector.y = 0.0;

  0045b	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0045e	0f 57 c0	 xorps	 xmm0, xmm0
  00461	f3 0f 11 80 38
	01 00 00	 movss	 DWORD PTR [eax+312], xmm0

; 484  : 			raw->weapon_vector.z = 1.0;

  00469	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0046c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00474	f3 0f 11 80 3c
	01 00 00	 movss	 DWORD PTR [eax+316], xmm0

; 485  : 
; 486  : 			raw->weapon_to_target_vector.x = 0.0;

  0047c	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0047f	0f 57 c0	 xorps	 xmm0, xmm0
  00482	f3 0f 11 80 40
	01 00 00	 movss	 DWORD PTR [eax+320], xmm0

; 487  : 			raw->weapon_to_target_vector.y = 0.0;

  0048a	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0048d	0f 57 c0	 xorps	 xmm0, xmm0
  00490	f3 0f 11 80 44
	01 00 00	 movss	 DWORD PTR [eax+324], xmm0

; 488  : 			raw->weapon_to_target_vector.z = -1.0;

  00498	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0049b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  004a3	f3 0f 11 80 48
	01 00 00	 movss	 DWORD PTR [eax+328], xmm0
$LN2@unpack_veh:

; 489  : 
; 490  : 			// terrain_info
; 491  : 
; 492  : 			break;
; 493  : 		}
; 494  : 		////////////////////////////////////////
; 495  : 		case PACK_MODE_BROWSE_SESSION:
; 496  : 		////////////////////////////////////////
; 497  : 		{
; 498  : 			break;
; 499  : 		}
; 500  : 		////////////////////////////////////////
; 501  : 		case PACK_MODE_UPDATE_ENTITY:
; 502  : 		////////////////////////////////////////
; 503  : 		{
; 504  : 			//
; 505  : 			// cannot update entity at this level as the update may not apply to all entity types below
; 506  : 			//
; 507  : 
; 508  : 			break;
; 509  : 		}
; 510  : 	}
; 511  : }

  004ab	5f		 pop	 edi
  004ac	5e		 pop	 esi
  004ad	5b		 pop	 ebx
  004ae	8b e5		 mov	 esp, ebp
  004b0	5d		 pop	 ebp
  004b1	c2 0c 00	 ret	 12			; 0000000cH
?unpack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z ENDP ; unpack_vehicle_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\vehicle\vh_pack.c
;	COMDAT ?pack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_package$ = -4						; size = 4
_en$ = 8						; size = 4
_raw$ = 12						; size = 4
_mode$ = 16						; size = 4
?pack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z PROC ; pack_vehicle_data, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 	int
; 82   : 		package;
; 83   : 
; 84   : 	ASSERT ((mode >= 0) && (mode < NUM_PACK_MODES));

  00009	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN8@pack_vehic
  0000f	83 7d 10 04	 cmp	 DWORD PTR _mode$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN7@pack_vehic
$LN8@pack_vehic:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@ONNFFJJJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@pack_vehic:

; 85   : 
; 86   : 	switch (mode)

  0002d	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	0f 8c 37 04 00
	00		 jl	 $LN2@pack_vehic
  0003d	83 7d b8 01	 cmp	 DWORD PTR tv70[ebp], 1
  00041	7e 05		 jle	 SHORT $LN9@pack_vehic
  00043	e9 2c 04 00 00	 jmp	 $LN2@pack_vehic
$LN9@pack_vehic:

; 87   : 	{
; 88   : 		////////////////////////////////////////
; 89   : 		case PACK_MODE_SERVER_SESSION:
; 90   : 		case PACK_MODE_CLIENT_SESSION:
; 91   : 		////////////////////////////////////////
; 92   : 		{
; 93   : 			//
; 94   : 			// pack mobile data
; 95   : 			//
; 96   : 
; 97   : 			pack_mobile_data (en, &raw->mob, mode);

  00048	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?pack_mobile_data@@YGXPAUENTITY@@PAUMOBILE@@W4PACK_MODES@@@Z ; pack_mobile_data

; 98   : 
; 99   : 			//
; 100  : 			// pack vehicle data
; 101  : 			//
; 102  : 
; 103  : 			pack_int_value (en, INT_TYPE_OBJECT_3D_SHAPE, raw->object_3d_shape);

  00059	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0005c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00062	51		 push	 ecx
  00063	68 92 00 00 00	 push	 146			; 00000092H
  00068	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 104  : 
; 105  : 			// inst3d
; 106  : 
; 107  : 			if (mode == PACK_MODE_SERVER_SESSION)

  00071	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00075	75 42		 jne	 SHORT $LN12@pack_vehic

; 108  : 			{
; 109  : 
; 110  : 				/////////////////////////////////////////////////////////////////
; 111  : 				if (raw->task_dependent_root.first_child)

  00077	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0007a	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  00081	74 26		 je	 SHORT $LN11@pack_vehic

; 112  : 				{
; 113  : 
; 114  : 					pack_int_value (en, INT_TYPE_VALID, TRUE);

  00083	6a 01		 push	 1
  00085	68 ef 00 00 00	 push	 239			; 000000efH
  0008a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 115  : 
; 116  : 					pack_list_root (en, LIST_TYPE_TASK_DEPENDENT, &raw->task_dependent_root);

  00093	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00096	05 88 00 00 00	 add	 eax, 136		; 00000088H
  0009b	50		 push	 eax
  0009c	6a 27		 push	 39			; 00000027H
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 117  : 				}
; 118  : 				else

  000a7	eb 10		 jmp	 SHORT $LN12@pack_vehic
$LN11@pack_vehic:

; 119  : 				{
; 120  : 
; 121  : 					pack_int_value (en, INT_TYPE_VALID, FALSE);

  000a9	6a 00		 push	 0
  000ab	68 ef 00 00 00	 push	 239			; 000000efH
  000b0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN12@pack_vehic:

; 122  : 				}
; 123  : 				/////////////////////////////////////////////////////////////////
; 124  : 			}
; 125  : 
; 126  : 			/////////////////////////////////////////////////////////////////
; 127  : 			if (raw->launched_weapon_root.first_child)

  000b9	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000bc	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  000c3	74 26		 je	 SHORT $LN13@pack_vehic

; 128  : 			{
; 129  : 
; 130  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  000c5	6a 01		 push	 1
  000c7	68 ef 00 00 00	 push	 239			; 000000efH
  000cc	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 131  : 
; 132  : 				pack_list_root (en, LIST_TYPE_LAUNCHED_WEAPON, &raw->launched_weapon_root);

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000d8	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  000dd	50		 push	 eax
  000de	6a 18		 push	 24			; 00000018H
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 133  : 			}
; 134  : 			else

  000e9	eb 10		 jmp	 SHORT $LN14@pack_vehic
$LN13@pack_vehic:

; 135  : 			{
; 136  : 
; 137  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  000eb	6a 00		 push	 0
  000ed	68 ef 00 00 00	 push	 239			; 000000efH
  000f2	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN14@pack_vehic:

; 138  : 			}
; 139  : 			/////////////////////////////////////////////////////////////////
; 140  : 
; 141  : 			/////////////////////////////////////////////////////////////////
; 142  : 			if (raw->movement_dependent_root.first_child)

  000fb	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000fe	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00105	74 26		 je	 SHORT $LN15@pack_vehic

; 143  : 			{
; 144  : 
; 145  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00107	6a 01		 push	 1
  00109	68 ef 00 00 00	 push	 239			; 000000efH
  0010e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 146  : 
; 147  : 				pack_list_root (en, LIST_TYPE_MOVEMENT_DEPENDENT, &raw->movement_dependent_root);

  00117	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0011a	05 90 00 00 00	 add	 eax, 144		; 00000090H
  0011f	50		 push	 eax
  00120	6a 1a		 push	 26			; 0000001aH
  00122	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00125	51		 push	 ecx
  00126	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 148  : 			}
; 149  : 			else

  0012b	eb 10		 jmp	 SHORT $LN16@pack_vehic
$LN15@pack_vehic:

; 150  : 			{
; 151  : 
; 152  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  0012d	6a 00		 push	 0
  0012f	68 ef 00 00 00	 push	 239			; 000000efH
  00134	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN16@pack_vehic:

; 153  : 			}
; 154  : 			/////////////////////////////////////////////////////////////////
; 155  : 
; 156  : 			pack_list_link (en, LIST_TYPE_FOLLOWER, &raw->follower_link);

  0013d	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00140	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  00145	50		 push	 eax
  00146	6a 0d		 push	 13			; 0000000dH
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 157  : 
; 158  : 			// gunship_target_link
; 159  : 
; 160  : 			pack_list_link (en, LIST_TYPE_MEMBER, &raw->member_link);

  00151	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00154	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00159	50		 push	 eax
  0015a	6a 19		 push	 25			; 00000019H
  0015c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0015f	51		 push	 ecx
  00160	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 161  : 
; 162  : 			/////////////////////////////////////////////////////////////////
; 163  : 			if (raw->movement_dependent_link.parent)

  00165	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00168	83 b8 c4 00 00
	00 00		 cmp	 DWORD PTR [eax+196], 0
  0016f	74 26		 je	 SHORT $LN17@pack_vehic

; 164  : 			{
; 165  : 
; 166  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00171	6a 01		 push	 1
  00173	68 ef 00 00 00	 push	 239			; 000000efH
  00178	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 167  : 
; 168  : 				pack_list_link (en, LIST_TYPE_MOVEMENT_DEPENDENT, &raw->movement_dependent_link);

  00181	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00184	05 c4 00 00 00	 add	 eax, 196		; 000000c4H
  00189	50		 push	 eax
  0018a	6a 1a		 push	 26			; 0000001aH
  0018c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0018f	51		 push	 ecx
  00190	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 169  : 			}
; 170  : 			else

  00195	eb 10		 jmp	 SHORT $LN18@pack_vehic
$LN17@pack_vehic:

; 171  : 			{
; 172  : 
; 173  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00197	6a 00		 push	 0
  00199	68 ef 00 00 00	 push	 239			; 000000efH
  0019e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN18@pack_vehic:

; 174  : 			}
; 175  : 			/////////////////////////////////////////////////////////////////
; 176  : 
; 177  : 			// view_link
; 178  : 
; 179  : 			if (mode == PACK_MODE_SERVER_SESSION)

  001a7	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  001ab	75 14		 jne	 SHORT $LN19@pack_vehic

; 180  : 			{
; 181  : 				pack_list_link (en, LIST_TYPE_TAKEOFF_QUEUE, &raw->takeoff_queue_link);

  001ad	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  001b0	05 dc 00 00 00	 add	 eax, 220		; 000000dcH
  001b5	50		 push	 eax
  001b6	6a 25		 push	 37			; 00000025H
  001b8	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001bb	51		 push	 ecx
  001bc	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link
$LN19@pack_vehic:

; 182  : 			}
; 183  : 
; 184  : 			pack_int_value (en, INT_TYPE_OPERATIONAL_STATE, raw->operational_state);

  001c1	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  001c4	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  001ca	c1 e9 05	 shr	 ecx, 5
  001cd	83 e1 1f	 and	 ecx, 31			; 0000001fH
  001d0	51		 push	 ecx
  001d1	68 97 00 00 00	 push	 151			; 00000097H
  001d6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  001d9	52		 push	 edx
  001da	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 185  : 
; 186  : 			pack_float_value (en, FLOAT_TYPE_SLEEP, raw->sleep);

  001df	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  001e2	51		 push	 ecx
  001e3	f3 0f 10 80 e8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+232]
  001eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f0	6a 75		 push	 117			; 00000075H
  001f2	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001f5	51		 push	 ecx
  001f6	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 187  : 
; 188  : 			if (mode == PACK_MODE_SERVER_SESSION)

  001fb	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  001ff	75 1c		 jne	 SHORT $LN20@pack_vehic

; 189  : 			{
; 190  : 				pack_float_value (en, FLOAT_TYPE_DISTANCE, raw->distance);	// only needed by server?

  00201	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00204	51		 push	 ecx
  00205	f3 0f 10 80 ec
	00 00 00	 movss	 xmm0, DWORD PTR [eax+236]
  0020d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00212	6a 1f		 push	 31			; 0000001fH
  00214	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00217	51		 push	 ecx
  00218	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN20@pack_vehic:

; 191  : 			}
; 192  : 
; 193  : 			/////////////////////////////////////////////////////////////////
; 194  : 			if (raw->operational_state == OPERATIONAL_STATE_LANDED)

  0021d	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00220	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00226	c1 e9 05	 shr	 ecx, 5
  00229	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0022c	83 f9 04	 cmp	 ecx, 4
  0022f	75 1c		 jne	 SHORT $LN21@pack_vehic

; 195  : 			{
; 196  : 
; 197  : 				pack_float_value (en, FLOAT_TYPE_LOADING_DOOR_STATE, raw->loading_door_state);

  00231	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00234	51		 push	 ecx
  00235	f3 0f 10 80 f0
	00 00 00	 movss	 xmm0, DWORD PTR [eax+240]
  0023d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00242	6a 3f		 push	 63			; 0000003fH
  00244	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00247	51		 push	 ecx
  00248	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN21@pack_vehic:

; 198  : 			}
; 199  : 			/////////////////////////////////////////////////////////////////
; 200  : 
; 201  : 			// radar_rotation_state
; 202  : 
; 203  : 			if (mode == PACK_MODE_SERVER_SESSION)

  0024d	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00251	75 5a		 jne	 SHORT $LN22@pack_vehic

; 204  : 			{
; 205  : 				pack_float_value (en, FLOAT_TYPE_DEATH_TIMER, raw->death_timer);

  00253	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00256	51		 push	 ecx
  00257	f3 0f 10 80 10
	01 00 00	 movss	 xmm0, DWORD PTR [eax+272]
  0025f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00264	6a 1b		 push	 27			; 0000001bH
  00266	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00269	51		 push	 ecx
  0026a	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 206  : 
; 207  : 				pack_float_value (en, FLOAT_TYPE_TARGET_FIRE_TIMER, raw->target_fire_timer);

  0026f	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00272	51		 push	 ecx
  00273	f3 0f 10 80 fc
	00 00 00	 movss	 xmm0, DWORD PTR [eax+252]
  0027b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00280	68 83 00 00 00	 push	 131			; 00000083H
  00285	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00288	51		 push	 ecx
  00289	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 208  : 
; 209  : 				pack_float_value (en, FLOAT_TYPE_TARGET_SCAN_TIMER, raw->target_scan_timer);

  0028e	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00291	51		 push	 ecx
  00292	f3 0f 10 80 f8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+248]
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	68 87 00 00 00	 push	 135			; 00000087H
  002a4	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002a7	51		 push	 ecx
  002a8	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN22@pack_vehic:

; 210  : 			}
; 211  : 
; 212  : 			// view_interest_level
; 213  : 
; 214  : 			// weapon_burst_timer
; 215  : 
; 216  : 			pack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_READY_STATE, raw->weapon_system_ready_state);

  002ad	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  002b0	51		 push	 ecx
  002b1	f3 0f 10 80 08
	01 00 00	 movss	 xmm0, DWORD PTR [eax+264]
  002b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002be	68 9a 00 00 00	 push	 154			; 0000009aH
  002c3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002c6	51		 push	 ecx
  002c7	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 217  : 
; 218  : 			if (mode == PACK_MODE_SERVER_SESSION)

  002cc	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  002d0	75 1c		 jne	 SHORT $LN23@pack_vehic

; 219  : 			{
; 220  : 				pack_float_value (en, FLOAT_TYPE_DECOY_RELEASE_TIMER, raw->decoy_release_timer);

  002d2	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  002d5	51		 push	 ecx
  002d6	f3 0f 10 80 0c
	01 00 00	 movss	 xmm0, DWORD PTR [eax+268]
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	6a 1c		 push	 28			; 0000001cH
  002e5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002e8	51		 push	 ecx
  002e9	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN23@pack_vehic:

; 221  : 			}
; 222  : 
; 223  : 			////////////////////////////////////////
; 224  : 
; 225  : 			pack_int_value (en, INT_TYPE_WEAPON_CONFIG_TYPE, raw->weapon_config_type);

  002ee	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  002f1	8b 88 14 01 00
	00		 mov	 ecx, DWORD PTR [eax+276]
  002f7	51		 push	 ecx
  002f8	68 05 01 00 00	 push	 261			; 00000105H
  002fd	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00300	52		 push	 edx
  00301	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 226  : 
; 227  : 			for (package = 0; package < NUM_WEAPON_PACKAGES; package++)

  00306	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _package$[ebp], 0
  0030d	eb 09		 jmp	 SHORT $LN6@pack_vehic
$LN4@pack_vehic:
  0030f	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  00312	83 c0 01	 add	 eax, 1
  00315	89 45 fc	 mov	 DWORD PTR _package$[ebp], eax
$LN6@pack_vehic:
  00318	83 7d fc 20	 cmp	 DWORD PTR _package$[ebp], 32 ; 00000020H
  0031c	0f 8d d7 00 00
	00		 jge	 $LN5@pack_vehic

; 228  : 			{
; 229  : 				if (weapon_config_database[raw->weapon_config_type][package].sub_type == ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00322	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00325	69 88 14 01 00
	00 80 09 00 00	 imul	 ecx, DWORD PTR [eax+276], 2432
  0032f	6b 55 fc 4c	 imul	 edx, DWORD PTR _package$[ebp], 76
  00333	83 bc 11 00 00
	00 00 00	 cmp	 DWORD PTR ?weapon_config_database@@3PAY0CA@UWEAPON_PACKAGE@@A[ecx+edx], 0
  0033b	75 05		 jne	 SHORT $LN24@pack_vehic

; 230  : 				{
; 231  : 					break;

  0033d	e9 b7 00 00 00	 jmp	 $LN5@pack_vehic
$LN24@pack_vehic:

; 232  : 				}
; 233  : 
; 234  : 				pack_int_value (en, INT_TYPE_WEAPON_PACKAGE_NUMBER, raw->weapon_package_status_array[package].number);

  00342	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  00345	c1 e0 04	 shl	 eax, 4
  00348	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0034b	8b 91 18 01 00
	00		 mov	 edx, DWORD PTR [ecx+280]
  00351	0f b7 04 02	 movzx	 eax, WORD PTR [edx+eax]
  00355	50		 push	 eax
  00356	68 0d 01 00 00	 push	 269			; 0000010dH
  0035b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0035e	51		 push	 ecx
  0035f	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 235  : 
; 236  : 				pack_int_value (en, INT_TYPE_WEAPON_PACKAGE_DAMAGED, raw->weapon_package_status_array[package].damaged);

  00364	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  00367	c1 e0 04	 shl	 eax, 4
  0036a	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0036d	8b 91 18 01 00
	00		 mov	 edx, DWORD PTR [ecx+280]
  00373	0f b7 44 02 02	 movzx	 eax, WORD PTR [edx+eax+2]
  00378	50		 push	 eax
  00379	68 0b 01 00 00	 push	 267			; 0000010bH
  0037e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00381	51		 push	 ecx
  00382	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 237  : 
; 238  : 				if (weapon_config_database[raw->weapon_config_type][package].rotate)

  00387	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0038a	69 88 14 01 00
	00 80 09 00 00	 imul	 ecx, DWORD PTR [eax+276], 2432
  00394	6b 55 fc 4c	 imul	 edx, DWORD PTR _package$[ebp], 76
  00398	83 bc 11 18 00
	00 00 00	 cmp	 DWORD PTR ?weapon_config_database@@3PAY0CA@UWEAPON_PACKAGE@@A[ecx+edx+24], 0
  003a0	74 52		 je	 SHORT $LN25@pack_vehic

; 239  : 				{
; 240  : 					pack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_HEADING, raw->weapon_package_status_array[package].weapon_system_heading);

  003a2	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  003a5	c1 e0 04	 shl	 eax, 4
  003a8	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  003ab	8b 91 18 01 00
	00		 mov	 edx, DWORD PTR [ecx+280]
  003b1	51		 push	 ecx
  003b2	f3 0f 10 44 02
	04		 movss	 xmm0, DWORD PTR [edx+eax+4]
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	68 98 00 00 00	 push	 152			; 00000098H
  003c2	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003c5	50		 push	 eax
  003c6	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 241  : 
; 242  : 					pack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_PITCH, raw->weapon_package_status_array[package].weapon_system_pitch);

  003cb	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  003ce	c1 e0 04	 shl	 eax, 4
  003d1	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  003d4	8b 91 18 01 00
	00		 mov	 edx, DWORD PTR [ecx+280]
  003da	51		 push	 ecx
  003db	f3 0f 10 44 02
	08		 movss	 xmm0, DWORD PTR [edx+eax+8]
  003e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e6	68 99 00 00 00	 push	 153			; 00000099H
  003eb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003ee	50		 push	 eax
  003ef	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN25@pack_vehic:

; 243  : 				}
; 244  : 
; 245  : 				// muzzle_flash_timer
; 246  : 			}

  003f4	e9 16 ff ff ff	 jmp	 $LN4@pack_vehic
$LN5@pack_vehic:

; 247  : 
; 248  : 			pack_int_value (en, INT_TYPE_SELECTED_WEAPON, raw->selected_weapon);

  003f9	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  003fc	8b 88 1c 01 00
	00		 mov	 ecx, DWORD PTR [eax+284]
  00402	51		 push	 ecx
  00403	68 b8 00 00 00	 push	 184			; 000000b8H
  00408	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0040b	52		 push	 edx
  0040c	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 249  : 
; 250  : 			////////////////////////////////////////
; 251  : 
; 252  : 			// sound_effect_data
; 253  : 
; 254  : 			pack_int_value (en, INT_TYPE_FORMATION_POSITION, raw->formation_position);

  00411	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00414	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  0041a	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0041d	51		 push	 ecx
  0041e	6a 3e		 push	 62			; 0000003eH
  00420	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00423	52		 push	 edx
  00424	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 255  : 
; 256  : 			// selected_weapon_system_ready
; 257  : 
; 258  : 			// weapon_and_target_vectors_valid
; 259  : 
; 260  : 			// gunship_radar_los_clear
; 261  : 
; 262  : 			// los_to_target
; 263  : 
; 264  : 			pack_int_value (en, INT_TYPE_LIGHTS_ON, raw->lights_on);

  00429	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0042c	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00432	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  00435	83 e1 01	 and	 ecx, 1
  00438	51		 push	 ecx
  00439	6a 7a		 push	 122			; 0000007aH
  0043b	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0043e	52		 push	 edx
  0043f	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 265  : 
; 266  : 			// cpg_identified
; 267  : 
; 268  : 			pack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER, raw->group_member_number);

  00444	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00447	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  0044d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00450	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00453	51		 push	 ecx
  00454	6a 4b		 push	 75			; 0000004bH
  00456	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00459	52		 push	 edx
  0045a	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 269  : 
; 270  : 			// id_number_significant_digits
; 271  : 
; 272  : 			pack_int_value (en, INT_TYPE_DAMAGE_LEVEL, raw->damage_level);

  0045f	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00462	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  00468	51		 push	 ecx
  00469	6a 25		 push	 37			; 00000025H
  0046b	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0046e	52		 push	 edx
  0046f	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN2@pack_vehic:

; 273  : 
; 274  : 			// id_number
; 275  : 
; 276  : 			// weapon_vector
; 277  : 
; 278  : 			// weapon_to_target_vector
; 279  : 
; 280  : 			// terrain_info
; 281  : 
; 282  : 			break;
; 283  : 		}
; 284  : 		////////////////////////////////////////
; 285  : 		case PACK_MODE_BROWSE_SESSION:
; 286  : 		////////////////////////////////////////
; 287  : 		{
; 288  : 			break;
; 289  : 		}
; 290  : 		////////////////////////////////////////
; 291  : 		case PACK_MODE_UPDATE_ENTITY:
; 292  : 		////////////////////////////////////////
; 293  : 		{
; 294  : 			//
; 295  : 			// cannot update entity at this level as the update may not apply to all entity types below
; 296  : 			//
; 297  : 
; 298  : 			break;
; 299  : 		}
; 300  : 	}
; 301  : }

  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b e5		 mov	 esp, ebp
  00479	5d		 pop	 ebp
  0047a	c2 0c 00	 ret	 12			; 0000000cH
?pack_vehicle_data@@YGXPAUENTITY@@PAUVEHICLE@@W4PACK_MODES@@@Z ENDP ; pack_vehicle_data
_TEXT	ENDS
END
