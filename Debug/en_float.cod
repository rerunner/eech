; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\system\en_funcs\en_float.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?float_type_database@@3PAUFLOAT_TYPE_DATA@@A	; float_type_database
PUBLIC	?overload_invalid_float_type_message@@3PBDB	; overload_invalid_float_type_message
PUBLIC	?debug_fatal_invalid_float_type_message@@3PBDB	; debug_fatal_invalid_float_type_message
PUBLIC	?fn_set_local_entity_raw_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA ; fn_set_local_entity_raw_float_value
PUBLIC	?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA ; fn_set_local_entity_float_value
PUBLIC	?fn_set_client_server_entity_float_value@@3PAY1KP@1P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA ; fn_set_client_server_entity_float_value
PUBLIC	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA ; fn_get_local_entity_float_value
PUBLIC	??_C@_0BN@LCILEMED@FLOAT_TYPE_AFTERBURNER_STATE@ ; `string'
PUBLIC	??_C@_0BK@CCCNODCN@FLOAT_TYPE_AIRBRAKE_STATE@	; `string'
PUBLIC	??_C@_0CF@LGKMHEIG@FLOAT_TYPE_AIR_RADAR_CONTACT_TI@ ; `string'
PUBLIC	??_C@_0BM@GNLIFNJB@FLOAT_TYPE_AIR_SCAN_CEILING@	; `string'
PUBLIC	??_C@_0BK@ELABGGFF@FLOAT_TYPE_AIR_SCAN_FLOOR@	; `string'
PUBLIC	??_C@_0BK@JIPKFACC@FLOAT_TYPE_AIR_SCAN_RANGE@	; `string'
PUBLIC	??_C@_0BE@FMFDGJFH@FLOAT_TYPE_ALTITUDE@		; `string'
PUBLIC	??_C@_0BI@MMKPGEJ@FLOAT_TYPE_AMMO_ECONOMY@	; `string'
PUBLIC	??_C@_0BN@LLBDKLMI@FLOAT_TYPE_AMMO_SUPPLY_LEVEL@ ; `string'
PUBLIC	??_C@_0BJ@FOFBDMFP@FLOAT_TYPE_AMPLIFICATION@	; `string'
PUBLIC	??_C@_0BG@KMNNJKMN@FLOAT_TYPE_SOUNDPITCH@	; `string'
PUBLIC	??_C@_0BP@PAEACJJB@FLOAT_TYPE_ANIMATION_FREQUENCY@ ; `string'
PUBLIC	??_C@_0BI@GOKODDBE@FLOAT_TYPE_ASSIGN_TIMER@	; `string'
PUBLIC	??_C@_0BI@HCPJANIK@FLOAT_TYPE_ASSIST_TIMER@	; `string'
PUBLIC	??_C@_0BL@KKIJIFMH@FLOAT_TYPE_ATTACK_ALTITUDE@	; `string'
PUBLIC	??_C@_0BM@DCFNMDGE@FLOAT_TYPE_AVOIDANCE_RADIUS@	; `string'
PUBLIC	??_C@_0BH@KFLKGJJC@FLOAT_TYPE_AXLE_LENGTH@	; `string'
PUBLIC	??_C@_0BM@ONNHCJFC@FLOAT_TYPE_CARGO_DOOR_STATE@	; `string'
PUBLIC	??_C@_0DA@FFKMGOOM@FLOAT_TYPE_CENTRE_OF_GRAVITY_TO@ ; `string'
PUBLIC	??_C@_0CD@HHBDHJDN@FLOAT_TYPE_CHASE_VIEW_MAX_DISTA@ ; `string'
PUBLIC	??_C@_0CI@BNDEBCKG@FLOAT_TYPE_CHASE_VIEW_MAX_DISTA@ ; `string'
PUBLIC	??_C@_0CD@DHFMABEL@FLOAT_TYPE_CHASE_VIEW_MIN_DISTA@ ; `string'
PUBLIC	??_C@_0CI@EOJCAKEC@FLOAT_TYPE_CHASE_VIEW_MIN_DISTA@ ; `string'
PUBLIC	??_C@_0BL@FFFOBLDH@FLOAT_TYPE_CRATER_LIFETIME@	; `string'
PUBLIC	??_C@_0BL@JGLBIALH@FLOAT_TYPE_CRUISE_ALTITUDE@	; `string'
PUBLIC	??_C@_0BL@PBGJNIAI@FLOAT_TYPE_CRUISE_VELOCITY@	; `string'
PUBLIC	??_C@_0CB@BBHBCMPF@FLOAT_TYPE_CURRENT_MESSAGE_TIME@ ; `string'
PUBLIC	??_C@_0BH@IOKICKHL@FLOAT_TYPE_DEATH_TIMER@	; `string'
PUBLIC	??_C@_0BP@BBALBDOG@FLOAT_TYPE_DECOY_RELEASE_TIMER@ ; `string'
PUBLIC	??_C@_0BH@BENJBHFP@FLOAT_TYPE_DECOY_TIMER@	; `string'
PUBLIC	??_C@_0BM@PMICGDKM@FLOAT_TYPE_DESIRED_VELOCITY@	; `string'
PUBLIC	??_C@_0BE@OJMNDFO@FLOAT_TYPE_DISTANCE@		; `string'
PUBLIC	??_C@_0BL@MDAFDCMD@FLOAT_TYPE_EFFECT_LIFETIME@	; `string'
PUBLIC	??_C@_0BG@MBPANMBF@FLOAT_TYPE_EFFICIENCY@	; `string'
PUBLIC	??_C@_0CA@GPCJDGGF@FLOAT_TYPE_ELAPSED_MISSION_TIME@ ; `string'
PUBLIC	??_C@_0BI@ECGANKLB@FLOAT_TYPE_ELAPSED_TIME@	; `string'
PUBLIC	??_C@_0BF@ONFPKFHK@FLOAT_TYPE_END_SCALE@	; `string'
PUBLIC	??_C@_0BI@PNFKIAOF@FLOAT_TYPE_EXPIRE_TIMER@	; `string'
PUBLIC	??_C@_0BL@LHLCNMDB@FLOAT_TYPE_EXPLOSION_STATE@	; `string'
PUBLIC	??_C@_0CD@JNKODBHG@FLOAT_TYPE_FIXED_OBJECT_IMPORTA@ ; `string'
PUBLIC	??_C@_0CC@JICOMPCB@FLOAT_TYPE_FIXED_STRUCTURE_HEIG@ ; `string'
PUBLIC	??_C@_0BG@LAGLPMJP@FLOAT_TYPE_FLAP_STATE@	; `string'
PUBLIC	??_C@_0BH@OLAGABFC@FLOAT_TYPE_FLIGHT_TIME@	; `string'
PUBLIC	??_C@_0BG@NIGPPPAD@FLOAT_TYPE_FOG_OF_WAR@	; `string'
PUBLIC	??_C@_0CE@MIJFFMIP@FLOAT_TYPE_FOG_OF_WAR_MAXIMUM_V@ ; `string'
PUBLIC	??_C@_0BF@DMFIMIFE@FLOAT_TYPE_FREQUENCY@	; `string'
PUBLIC	??_C@_0BP@GEDEFGAB@FLOAT_TYPE_FUEL_DEFAULT_WEIGHT@ ; `string'
PUBLIC	??_C@_0BI@CKFJDBFF@FLOAT_TYPE_FUEL_ECONOMY@	; `string'
PUBLIC	??_C@_0BN@MJBCICHJ@FLOAT_TYPE_FUEL_SUPPLY_LEVEL@ ; `string'
PUBLIC	??_C@_0BK@BFMBOMAC@FLOAT_TYPE_FUSELAGE_ANGLE@	; `string'
PUBLIC	??_C@_0BO@LALEOCAC@FLOAT_TYPE_GENERATOR_LIFETIME@ ; `string'
PUBLIC	??_C@_0CA@LEHPBPGO@FLOAT_TYPE_GUIDE_CRITERIA_VALUE@ ; `string'
PUBLIC	??_C@_0BD@FOMEHPNF@FLOAT_TYPE_HEADING@		; `string'
PUBLIC	??_C@_0BJ@CCEKOKOF@FLOAT_TYPE_HIGH_VELOCITY@	; `string'
PUBLIC	??_C@_0BJ@NPIJPOOH@FLOAT_TYPE_INITIAL_SPEED@	; `string'
PUBLIC	??_C@_0BO@FOHOGLLC@FLOAT_TYPE_INVULNERABLE_TIMER@ ; `string'
PUBLIC	??_C@_0BO@IJEDHHCA@FLOAT_TYPE_KEYSITE_IMPORTANCE@ ; `string'
PUBLIC	??_C@_0CE@EHMFAPNK@FLOAT_TYPE_KEYSITE_MAXIMUM_STRE@ ; `string'
PUBLIC	??_C@_0BM@MLBNIMCP@FLOAT_TYPE_KEYSITE_STRENGTH@	; `string'
PUBLIC	??_C@_0BI@LLFNBJAC@FLOAT_TYPE_LAND_URGENCY@	; `string'
PUBLIC	??_C@_0BK@JDOMDONP@FLOAT_TYPE_LAST_SEEN_TIME@	; `string'
PUBLIC	??_C@_0BE@HHGBBOFA@FLOAT_TYPE_LIFETIME@		; `string'
PUBLIC	??_C@_0BL@JDIODEMG@FLOAT_TYPE_LIGHTNING_TIMER@	; `string'
PUBLIC	??_C@_0BO@CBMAKCBJ@FLOAT_TYPE_LOADING_DOOR_STATE@ ; `string'
PUBLIC	??_C@_0BO@PGAEDDPL@FLOAT_TYPE_LOADING_DOOR_TIMER@ ; `string'
PUBLIC	??_C@_0BI@FIMNNACP@FLOAT_TYPE_LOW_VELOCITY@	; `string'
PUBLIC	??_C@_0CJ@NLKEBNNO@FLOAT_TYPE_MAIN_ROTOR_BLADE_CON@ ; `string'
PUBLIC	??_C@_0CA@HOMMBCKJ@FLOAT_TYPE_MAIN_ROTOR_DIRECTION@ ; `string'
PUBLIC	??_C@_0CI@LCFDNBGK@FLOAT_TYPE_MAIN_ROTOR_BLADE_DRO@ ; `string'
PUBLIC	??_C@_0BM@JLBAAANC@FLOAT_TYPE_MAIN_ROTOR_PITCH@	; `string'
PUBLIC	??_C@_0BN@JJLPHJOO@FLOAT_TYPE_MAIN_ROTOR_RADIUS@ ; `string'
PUBLIC	??_C@_0BL@MGMDEJNJ@FLOAT_TYPE_MAIN_ROTOR_ROLL@	; `string'
PUBLIC	??_C@_0BK@LOJLLDIN@FLOAT_TYPE_MAIN_ROTOR_RPM@	; `string'
PUBLIC	??_C@_0CC@OMKKJCMC@FLOAT_TYPE_MAIN_ROTOR_SHAFT_ANG@ ; `string'
PUBLIC	??_C@_0CE@NPLKDJPD@FLOAT_TYPE_MAIN_ROTOR_SPIN_UP_T@ ; `string'
PUBLIC	??_C@_0CG@NGKOHNHK@FLOAT_TYPE_MAX_3D_OBJECT_VISUAL@ ; `string'
PUBLIC	??_C@_0BM@FPDNMBN@FLOAT_TYPE_MAX_ACCELERATION@	; `string'
PUBLIC	??_C@_0BJ@FILCNDBC@FLOAT_TYPE_MAX_TURN_RATE@	; `string'
PUBLIC	??_C@_0BE@FMHIKMMK@FLOAT_TYPE_MAX_ROLL@		; `string'
PUBLIC	??_C@_0CH@FBHELJGN@FLOAT_TYPE_MAX_VERTICAL_TURN_AL@ ; `string'
PUBLIC	??_C@_0BL@KAMLCHEJ@FLOAT_TYPE_MEDIUM_VELOCITY@	; `string'
PUBLIC	??_C@_0BO@OGBIBFCL@FLOAT_TYPE_MINIMUM_EFFICIENCY@ ; `string'
PUBLIC	??_C@_0CB@EKEBLHME@FLOAT_TYPE_NUMBER_OF_MAIN_ROTOR@ ; `string'
PUBLIC	??_C@_0CC@MCLNGPIP@FLOAT_TYPE_PERSON_ANIMATION_STA@ ; `string'
PUBLIC	??_C@_0BB@JMINIEFK@FLOAT_TYPE_PITCH@		; `string'
PUBLIC	??_C@_0CB@DJCGMPH@FLOAT_TYPE_PLAYER_WEAPON_HEADIN@ ; `string'
PUBLIC	??_C@_0BP@PKNKKFLN@FLOAT_TYPE_PLAYER_WEAPON_PITCH@ ; `string'
PUBLIC	??_C@_0BM@NGBAABBG@FLOAT_TYPE_POPULATION_X_MIN@	; `string'
PUBLIC	??_C@_0BM@MEJLOFHJ@FLOAT_TYPE_POPULATION_X_MAX@	; `string'
PUBLIC	??_C@_0BM@JLNIKABN@FLOAT_TYPE_POPULATION_Z_MIN@	; `string'
PUBLIC	??_C@_0BM@IJFDEEHC@FLOAT_TYPE_POPULATION_Z_MAX@	; `string'
PUBLIC	??_C@_0CA@BFPCJKFD@FLOAT_TYPE_POTENTIAL_AIR_THREAT@ ; `string'
PUBLIC	??_C@_0CH@DBDKMABJ@FLOAT_TYPE_POTENTIAL_AIR_TO_AIR@ ; `string'
PUBLIC	??_C@_0CL@PLCEKPEL@FLOAT_TYPE_POTENTIAL_AIR_TO_SUR@ ; `string'
PUBLIC	??_C@_0CE@FBIGAFOD@FLOAT_TYPE_POTENTIAL_SURFACE_TH@ ; `string'
PUBLIC	??_C@_0CL@OFFLKCEK@FLOAT_TYPE_POTENTIAL_SURFACE_TO@ ; `string'
PUBLIC	??_C@_0CP@JEJHFMGC@FLOAT_TYPE_POTENTIAL_SURFACE_TO@ ; `string'
PUBLIC	??_C@_0BI@COHDNOFN@FLOAT_TYPE_POWER_OUTPUT@	; `string'
PUBLIC	??_C@_0BP@IJFMFDKL@FLOAT_TYPE_PROPELLOR_DIRECTION@ ; `string'
PUBLIC	??_C@_0BJ@KFHEJOBP@FLOAT_TYPE_PROPELLOR_RPM@	; `string'
PUBLIC	??_C@_0BH@FLMLJAOA@FLOAT_TYPE_PROTOTYPE_1@	; `string'
PUBLIC	??_C@_0BH@HAOGMDCD@FLOAT_TYPE_PROTOTYPE_2@	; `string'
PUBLIC	??_C@_0BH@GJPNPCGC@FLOAT_TYPE_PROTOTYPE_3@	; `string'
PUBLIC	??_C@_0BH@CGLMGEKF@FLOAT_TYPE_PROTOTYPE_4@	; `string'
PUBLIC	??_C@_0BK@PHAGJFIL@FLOAT_TYPE_RADAR_ALTITUDE@	; `string'
PUBLIC	??_C@_0CA@GCKJLLHE@FLOAT_TYPE_RADAR_ROTATION_STATE@ ; `string'
PUBLIC	??_C@_0CA@JFPDDFFN@FLOAT_TYPE_RADAR_STEALTH_FACTOR@ ; `string'
PUBLIC	??_C@_0BB@GMDGAPPK@FLOAT_TYPE_RANGE@		; `string'
PUBLIC	??_C@_0BC@CEOGODDO@FLOAT_TYPE_RATING@		; `string'
PUBLIC	??_C@_0BJ@IEMIJEDE@FLOAT_TYPE_REARMING_TIME@	; `string'
PUBLIC	??_C@_0BK@IMMLCDND@FLOAT_TYPE_RECON_DISTANCE@	; `string'
PUBLIC	??_C@_0BI@HLBPLBEB@FLOAT_TYPE_RECON_RADIUS@	; `string'
PUBLIC	??_C@_0BI@ONKFGIBP@FLOAT_TYPE_REPAIR_TIMER@	; `string'
PUBLIC	??_C@_0BA@DGIDNINN@FLOAT_TYPE_ROLL@		; `string'
PUBLIC	??_C@_0BI@CIELJLBI@FLOAT_TYPE_RUDDER_STATE@	; `string'
PUBLIC	??_C@_0BB@IJJMHAII@FLOAT_TYPE_SCALE@		; `string'
PUBLIC	??_C@_0CB@BLMBMCCA@FLOAT_TYPE_SECTOR_SIDE_MAX_VALU@ ; `string'
PUBLIC	??_C@_0BB@LMMKKNJF@FLOAT_TYPE_SLEEP@		; `string'
PUBLIC	??_C@_0BK@MFAJCOMD@FLOAT_TYPE_SMOKE_LIFETIME@	; `string'
PUBLIC	??_C@_0BH@JIDJJCCK@FLOAT_TYPE_SMOKE_SLEEP@	; `string'
PUBLIC	??_C@_0CJ@PLAEOCBD@FLOAT_TYPE_SPEECH_CATEGORY_SILE@ ; `string'
PUBLIC	??_C@_0BO@IADLEBHB@FLOAT_TYPE_SPEECH_EXPIRE_TIME@ ; `string'
PUBLIC	??_C@_0BL@IOJAKCEG@FLOAT_TYPE_SPEECH_PRIORITY@	; `string'
PUBLIC	??_C@_0BL@OCHHDLPA@FLOAT_TYPE_SPRITE_LIFETIME@	; `string'
PUBLIC	??_C@_0BH@NGGPEAFF@FLOAT_TYPE_START_SCALE@	; `string'
PUBLIC	??_C@_0BG@LKBAHGOG@FLOAT_TYPE_START_TIME@	; `string'
PUBLIC	??_C@_0BG@EELFBPHK@FLOAT_TYPE_STOP_TIMER@	; `string'
PUBLIC	??_C@_0BO@MNAHHAFP@FLOAT_TYPE_SURFACE_SCAN_RANGE@ ; `string'
PUBLIC	??_C@_0CA@IKNEOBCO@FLOAT_TYPE_TAIL_ROTOR_DIRECTION@ ; `string'
PUBLIC	??_C@_0BK@GALAKFDC@FLOAT_TYPE_TAIL_ROTOR_RPM@	; `string'
PUBLIC	??_C@_0CE@IOONFFD@FLOAT_TYPE_TALLEST_STRUCTURE_HE@ ; `string'
PUBLIC	??_C@_0BN@MLBFPIBA@FLOAT_TYPE_TARGET_FIRE_TIMER@ ; `string'
PUBLIC	??_C@_0CG@HPGAJNIH@FLOAT_TYPE_TARGET_PRIORITY_AIR_@ ; `string'
PUBLIC	??_C@_0CJ@IAINDPJ@FLOAT_TYPE_TARGET_PRIORITY_GROU@ ; `string'
PUBLIC	??_C@_0BN@FBNGJLFK@FLOAT_TYPE_TARGET_SCAN_DELAY@ ; `string'
PUBLIC	??_C@_0BN@MLLBGCLC@FLOAT_TYPE_TARGET_SCAN_TIMER@ ; `string'
PUBLIC	??_C@_0BF@MMNLHAIH@FLOAT_TYPE_TASK_COST@	; `string'
PUBLIC	??_C@_0CB@BNNBDOBP@FLOAT_TYPE_TASK_DEFAULT_PRIORIT@ ; `string'
PUBLIC	??_C@_0BJ@KICOPEGG@FLOAT_TYPE_TASK_PRIORITY@	; `string'
PUBLIC	??_C@_0BN@PPKPCNHJ@FLOAT_TYPE_TASK_SUCCESS_RATE@ ; `string'
PUBLIC	??_C@_0BK@MGPOEAAK@FLOAT_TYPE_TASK_USER_DATA@	; `string'
PUBLIC	??_C@_0BN@CDDGFPAA@FLOAT_TYPE_TERRAIN_ELEVATION@ ; `string'
PUBLIC	??_C@_0BH@MGLICP@FLOAT_TYPE_TIME_OF_DAY@	; `string'
PUBLIC	??_C@_0CE@NJJGHNKB@FLOAT_TYPE_TIME_OF_DAY_ACCELERA@ ; `string'
PUBLIC	??_C@_0BP@KMGPEHAN@FLOAT_TYPE_UNDERCARRIAGE_STATE@ ; `string'
PUBLIC	??_C@_0BD@LBHEKHPH@FLOAT_TYPE_URGENCY@		; `string'
PUBLIC	??_C@_0CB@EPKLOEIF@FLOAT_TYPE_VALID_EFFECT_LIFETIM@ ; `string'
PUBLIC	??_C@_0BE@DLILDBOI@FLOAT_TYPE_VELOCITY@		; `string'
PUBLIC	??_C@_0BO@BAJEMLML@FLOAT_TYPE_VERY_HIGH_VELOCITY@ ; `string'
PUBLIC	??_C@_0BP@OOJKLMKJ@FLOAT_TYPE_VIEW_INTEREST_LEVEL@ ; `string'
PUBLIC	??_C@_0BO@NIMAKN@FLOAT_TYPE_WEAPON_BURST_TIMER@	; `string'
PUBLIC	??_C@_0BL@DGEJCNIA@FLOAT_TYPE_WEAPON_LIFETIME@	; `string'
PUBLIC	??_C@_0CB@IKBCHCGK@FLOAT_TYPE_WEAPON_SYSTEM_HEADIN@ ; `string'
PUBLIC	??_C@_0BP@HMDEAMEP@FLOAT_TYPE_WEAPON_SYSTEM_PITCH@ ; `string'
PUBLIC	??_C@_0CF@LNINDJIK@FLOAT_TYPE_WEAPON_SYSTEM_READY_@ ; `string'
PUBLIC	??_C@_0CM@IHALJHKI@FLOAT_TYPE_WEATHER_MODE_TRANSIT@ ; `string'
PUBLIC	??_C@_0CM@OPGIJMCL@FLOAT_TYPE_WEATHER_MODE_TRANSIT@ ; `string'
PUBLIC	??_C@_0BK@LLMFPMJE@FLOAT_TYPE_WEATHER_RADIUS@	; `string'
PUBLIC	??_C@_0BC@PAICJHKP@FLOAT_TYPE_WEIGHT@		; `string'
PUBLIC	??_C@_0BM@EIBPHKMA@FLOAT_TYPE_WIDTH_ADJUSTMENT@	; `string'
PUBLIC	??_C@_0BO@MMOJKHDJ@FLOAT_TYPE_WIND_EFFECT_RADIUS@ ; `string'
PUBLIC	??_C@_0BO@MCLJMDKJ@FLOAT_TYPE_WIND_GUSTING_VALUE@ ; `string'
PUBLIC	??_C@_0BO@LDAGGKJI@FLOAT_TYPE_WIND_MAXIMUM_SPEED@ ; `string'
PUBLIC	??_C@_0BO@KCAPBOJ@FLOAT_TYPE_WIND_MINIMUM_SPEED@ ; `string'
PUBLIC	??_C@_0BP@GHFOCIBG@FLOAT_TYPE_MINIMUM_SOUND_RANGE@ ; `string'
PUBLIC	??_C@_0CB@NPCDFIIB@FLOAT_TYPE_REFERENCE_SOUND_RANG@ ; `string'
PUBLIC	??_C@_0BP@EOCANFAO@FLOAT_TYPE_MAXIMUM_SOUND_RANGE@ ; `string'
PUBLIC	??_C@_0BC@FPAHFDP@FLOAT_TYPE_PFZ_X1@		; `string'
PUBLIC	??_C@_0BC@EDCBPAI@FLOAT_TYPE_PFZ_Y1@		; `string'
PUBLIC	??_C@_0BC@CONNCGPM@FLOAT_TYPE_PFZ_X2@		; `string'
PUBLIC	??_C@_0BC@CPBPEMML@FLOAT_TYPE_PFZ_Y2@		; `string'
PUBLIC	??_C@_0BC@DHMGBHLN@FLOAT_TYPE_PFZ_X3@		; `string'
PUBLIC	??_C@_0BC@DGAEHNIK@FLOAT_TYPE_PFZ_Y3@		; `string'
PUBLIC	??_C@_0BC@HIIHIBHK@FLOAT_TYPE_PFZ_X4@		; `string'
PUBLIC	??_C@_0BC@HJEFOLEN@FLOAT_TYPE_PFZ_Y4@		; `string'
PUBLIC	??_C@_0DL@FEJNFOJM@Overloaded?5entity?5function?5invo@ ; `string'
PUBLIC	??_C@_0FJ@EDPMIPGM@Invalid?5float?5type?5?$CIentity?5type@ ; `string'
_BSS	SEGMENT
?fn_set_local_entity_raw_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA DD 019faH DUP (?) ; fn_set_local_entity_raw_float_value
?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA DD 019faH DUP (?) ; fn_set_local_entity_float_value
?fn_set_client_server_entity_float_value@@3PAY1KP@1P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA DD 033f4H DUP (?) ; fn_set_client_server_entity_float_value
?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA DD 019faH DUP (?) ; fn_get_local_entity_float_value
_BSS	ENDS
;	COMDAT ??_C@_0FJ@EDPMIPGM@Invalid?5float?5type?5?$CIentity?5type@
CONST	SEGMENT
??_C@_0FJ@EDPMIPGM@Invalid?5float?5type?5?$CIentity?5type@ DB 'Invalid fl'
	DB	'oat type (entity type = %s, index = %d, float type = %s, file'
	DB	' = %s, line = %d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@FEJNFOJM@Overloaded?5entity?5function?5invo@
CONST	SEGMENT
??_C@_0DL@FEJNFOJM@Overloaded?5entity?5function?5invo@ DB 'Overloaded ent'
	DB	'ity function invoked with invalid float type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HJEFOLEN@FLOAT_TYPE_PFZ_Y4@
CONST	SEGMENT
??_C@_0BC@HJEFOLEN@FLOAT_TYPE_PFZ_Y4@ DB 'FLOAT_TYPE_PFZ_Y4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HIIHIBHK@FLOAT_TYPE_PFZ_X4@
CONST	SEGMENT
??_C@_0BC@HIIHIBHK@FLOAT_TYPE_PFZ_X4@ DB 'FLOAT_TYPE_PFZ_X4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DGAEHNIK@FLOAT_TYPE_PFZ_Y3@
CONST	SEGMENT
??_C@_0BC@DGAEHNIK@FLOAT_TYPE_PFZ_Y3@ DB 'FLOAT_TYPE_PFZ_Y3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DHMGBHLN@FLOAT_TYPE_PFZ_X3@
CONST	SEGMENT
??_C@_0BC@DHMGBHLN@FLOAT_TYPE_PFZ_X3@ DB 'FLOAT_TYPE_PFZ_X3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CPBPEMML@FLOAT_TYPE_PFZ_Y2@
CONST	SEGMENT
??_C@_0BC@CPBPEMML@FLOAT_TYPE_PFZ_Y2@ DB 'FLOAT_TYPE_PFZ_Y2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CONNCGPM@FLOAT_TYPE_PFZ_X2@
CONST	SEGMENT
??_C@_0BC@CONNCGPM@FLOAT_TYPE_PFZ_X2@ DB 'FLOAT_TYPE_PFZ_X2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EDCBPAI@FLOAT_TYPE_PFZ_Y1@
CONST	SEGMENT
??_C@_0BC@EDCBPAI@FLOAT_TYPE_PFZ_Y1@ DB 'FLOAT_TYPE_PFZ_Y1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FPAHFDP@FLOAT_TYPE_PFZ_X1@
CONST	SEGMENT
??_C@_0BC@FPAHFDP@FLOAT_TYPE_PFZ_X1@ DB 'FLOAT_TYPE_PFZ_X1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EOCANFAO@FLOAT_TYPE_MAXIMUM_SOUND_RANGE@
CONST	SEGMENT
??_C@_0BP@EOCANFAO@FLOAT_TYPE_MAXIMUM_SOUND_RANGE@ DB 'FLOAT_TYPE_MAXIMUM'
	DB	'_SOUND_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NPCDFIIB@FLOAT_TYPE_REFERENCE_SOUND_RANG@
CONST	SEGMENT
??_C@_0CB@NPCDFIIB@FLOAT_TYPE_REFERENCE_SOUND_RANG@ DB 'FLOAT_TYPE_REFERE'
	DB	'NCE_SOUND_RANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GHFOCIBG@FLOAT_TYPE_MINIMUM_SOUND_RANGE@
CONST	SEGMENT
??_C@_0BP@GHFOCIBG@FLOAT_TYPE_MINIMUM_SOUND_RANGE@ DB 'FLOAT_TYPE_MINIMUM'
	DB	'_SOUND_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KCAPBOJ@FLOAT_TYPE_WIND_MINIMUM_SPEED@
CONST	SEGMENT
??_C@_0BO@KCAPBOJ@FLOAT_TYPE_WIND_MINIMUM_SPEED@ DB 'FLOAT_TYPE_WIND_MINI'
	DB	'MUM_SPEED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LDAGGKJI@FLOAT_TYPE_WIND_MAXIMUM_SPEED@
CONST	SEGMENT
??_C@_0BO@LDAGGKJI@FLOAT_TYPE_WIND_MAXIMUM_SPEED@ DB 'FLOAT_TYPE_WIND_MAX'
	DB	'IMUM_SPEED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MCLJMDKJ@FLOAT_TYPE_WIND_GUSTING_VALUE@
CONST	SEGMENT
??_C@_0BO@MCLJMDKJ@FLOAT_TYPE_WIND_GUSTING_VALUE@ DB 'FLOAT_TYPE_WIND_GUS'
	DB	'TING_VALUE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MMOJKHDJ@FLOAT_TYPE_WIND_EFFECT_RADIUS@
CONST	SEGMENT
??_C@_0BO@MMOJKHDJ@FLOAT_TYPE_WIND_EFFECT_RADIUS@ DB 'FLOAT_TYPE_WIND_EFF'
	DB	'ECT_RADIUS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EIBPHKMA@FLOAT_TYPE_WIDTH_ADJUSTMENT@
CONST	SEGMENT
??_C@_0BM@EIBPHKMA@FLOAT_TYPE_WIDTH_ADJUSTMENT@ DB 'FLOAT_TYPE_WIDTH_ADJU'
	DB	'STMENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PAICJHKP@FLOAT_TYPE_WEIGHT@
CONST	SEGMENT
??_C@_0BC@PAICJHKP@FLOAT_TYPE_WEIGHT@ DB 'FLOAT_TYPE_WEIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LLMFPMJE@FLOAT_TYPE_WEATHER_RADIUS@
CONST	SEGMENT
??_C@_0BK@LLMFPMJE@FLOAT_TYPE_WEATHER_RADIUS@ DB 'FLOAT_TYPE_WEATHER_RADI'
	DB	'US', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OPGIJMCL@FLOAT_TYPE_WEATHER_MODE_TRANSIT@
CONST	SEGMENT
??_C@_0CM@OPGIJMCL@FLOAT_TYPE_WEATHER_MODE_TRANSIT@ DB 'FLOAT_TYPE_WEATHE'
	DB	'R_MODE_TRANSITIONAL_STATUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IHALJHKI@FLOAT_TYPE_WEATHER_MODE_TRANSIT@
CONST	SEGMENT
??_C@_0CM@IHALJHKI@FLOAT_TYPE_WEATHER_MODE_TRANSIT@ DB 'FLOAT_TYPE_WEATHE'
	DB	'R_MODE_TRANSITIONAL_PERIOD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LNINDJIK@FLOAT_TYPE_WEAPON_SYSTEM_READY_@
CONST	SEGMENT
??_C@_0CF@LNINDJIK@FLOAT_TYPE_WEAPON_SYSTEM_READY_@ DB 'FLOAT_TYPE_WEAPON'
	DB	'_SYSTEM_READY_STATE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HMDEAMEP@FLOAT_TYPE_WEAPON_SYSTEM_PITCH@
CONST	SEGMENT
??_C@_0BP@HMDEAMEP@FLOAT_TYPE_WEAPON_SYSTEM_PITCH@ DB 'FLOAT_TYPE_WEAPON_'
	DB	'SYSTEM_PITCH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IKBCHCGK@FLOAT_TYPE_WEAPON_SYSTEM_HEADIN@
CONST	SEGMENT
??_C@_0CB@IKBCHCGK@FLOAT_TYPE_WEAPON_SYSTEM_HEADIN@ DB 'FLOAT_TYPE_WEAPON'
	DB	'_SYSTEM_HEADING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DGEJCNIA@FLOAT_TYPE_WEAPON_LIFETIME@
CONST	SEGMENT
??_C@_0BL@DGEJCNIA@FLOAT_TYPE_WEAPON_LIFETIME@ DB 'FLOAT_TYPE_WEAPON_LIFE'
	DB	'TIME', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NIMAKN@FLOAT_TYPE_WEAPON_BURST_TIMER@
CONST	SEGMENT
??_C@_0BO@NIMAKN@FLOAT_TYPE_WEAPON_BURST_TIMER@ DB 'FLOAT_TYPE_WEAPON_BUR'
	DB	'ST_TIMER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OOJKLMKJ@FLOAT_TYPE_VIEW_INTEREST_LEVEL@
CONST	SEGMENT
??_C@_0BP@OOJKLMKJ@FLOAT_TYPE_VIEW_INTEREST_LEVEL@ DB 'FLOAT_TYPE_VIEW_IN'
	DB	'TEREST_LEVEL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BAJEMLML@FLOAT_TYPE_VERY_HIGH_VELOCITY@
CONST	SEGMENT
??_C@_0BO@BAJEMLML@FLOAT_TYPE_VERY_HIGH_VELOCITY@ DB 'FLOAT_TYPE_VERY_HIG'
	DB	'H_VELOCITY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DLILDBOI@FLOAT_TYPE_VELOCITY@
CONST	SEGMENT
??_C@_0BE@DLILDBOI@FLOAT_TYPE_VELOCITY@ DB 'FLOAT_TYPE_VELOCITY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EPKLOEIF@FLOAT_TYPE_VALID_EFFECT_LIFETIM@
CONST	SEGMENT
??_C@_0CB@EPKLOEIF@FLOAT_TYPE_VALID_EFFECT_LIFETIM@ DB 'FLOAT_TYPE_VALID_'
	DB	'EFFECT_LIFETIME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LBHEKHPH@FLOAT_TYPE_URGENCY@
CONST	SEGMENT
??_C@_0BD@LBHEKHPH@FLOAT_TYPE_URGENCY@ DB 'FLOAT_TYPE_URGENCY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KMGPEHAN@FLOAT_TYPE_UNDERCARRIAGE_STATE@
CONST	SEGMENT
??_C@_0BP@KMGPEHAN@FLOAT_TYPE_UNDERCARRIAGE_STATE@ DB 'FLOAT_TYPE_UNDERCA'
	DB	'RRIAGE_STATE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NJJGHNKB@FLOAT_TYPE_TIME_OF_DAY_ACCELERA@
CONST	SEGMENT
??_C@_0CE@NJJGHNKB@FLOAT_TYPE_TIME_OF_DAY_ACCELERA@ DB 'FLOAT_TYPE_TIME_O'
	DB	'F_DAY_ACCELERATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MGLICP@FLOAT_TYPE_TIME_OF_DAY@
CONST	SEGMENT
??_C@_0BH@MGLICP@FLOAT_TYPE_TIME_OF_DAY@ DB 'FLOAT_TYPE_TIME_OF_DAY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CDDGFPAA@FLOAT_TYPE_TERRAIN_ELEVATION@
CONST	SEGMENT
??_C@_0BN@CDDGFPAA@FLOAT_TYPE_TERRAIN_ELEVATION@ DB 'FLOAT_TYPE_TERRAIN_E'
	DB	'LEVATION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MGPOEAAK@FLOAT_TYPE_TASK_USER_DATA@
CONST	SEGMENT
??_C@_0BK@MGPOEAAK@FLOAT_TYPE_TASK_USER_DATA@ DB 'FLOAT_TYPE_TASK_USER_DA'
	DB	'TA', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PPKPCNHJ@FLOAT_TYPE_TASK_SUCCESS_RATE@
CONST	SEGMENT
??_C@_0BN@PPKPCNHJ@FLOAT_TYPE_TASK_SUCCESS_RATE@ DB 'FLOAT_TYPE_TASK_SUCC'
	DB	'ESS_RATE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KICOPEGG@FLOAT_TYPE_TASK_PRIORITY@
CONST	SEGMENT
??_C@_0BJ@KICOPEGG@FLOAT_TYPE_TASK_PRIORITY@ DB 'FLOAT_TYPE_TASK_PRIORITY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BNNBDOBP@FLOAT_TYPE_TASK_DEFAULT_PRIORIT@
CONST	SEGMENT
??_C@_0CB@BNNBDOBP@FLOAT_TYPE_TASK_DEFAULT_PRIORIT@ DB 'FLOAT_TYPE_TASK_D'
	DB	'EFAULT_PRIORITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MMNLHAIH@FLOAT_TYPE_TASK_COST@
CONST	SEGMENT
??_C@_0BF@MMNLHAIH@FLOAT_TYPE_TASK_COST@ DB 'FLOAT_TYPE_TASK_COST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MLLBGCLC@FLOAT_TYPE_TARGET_SCAN_TIMER@
CONST	SEGMENT
??_C@_0BN@MLLBGCLC@FLOAT_TYPE_TARGET_SCAN_TIMER@ DB 'FLOAT_TYPE_TARGET_SC'
	DB	'AN_TIMER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FBNGJLFK@FLOAT_TYPE_TARGET_SCAN_DELAY@
CONST	SEGMENT
??_C@_0BN@FBNGJLFK@FLOAT_TYPE_TARGET_SCAN_DELAY@ DB 'FLOAT_TYPE_TARGET_SC'
	DB	'AN_DELAY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IAINDPJ@FLOAT_TYPE_TARGET_PRIORITY_GROU@
CONST	SEGMENT
??_C@_0CJ@IAINDPJ@FLOAT_TYPE_TARGET_PRIORITY_GROU@ DB 'FLOAT_TYPE_TARGET_'
	DB	'PRIORITY_GROUND_ATTACK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HPGAJNIH@FLOAT_TYPE_TARGET_PRIORITY_AIR_@
CONST	SEGMENT
??_C@_0CG@HPGAJNIH@FLOAT_TYPE_TARGET_PRIORITY_AIR_@ DB 'FLOAT_TYPE_TARGET'
	DB	'_PRIORITY_AIR_ATTACK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MLBFPIBA@FLOAT_TYPE_TARGET_FIRE_TIMER@
CONST	SEGMENT
??_C@_0BN@MLBFPIBA@FLOAT_TYPE_TARGET_FIRE_TIMER@ DB 'FLOAT_TYPE_TARGET_FI'
	DB	'RE_TIMER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IOONFFD@FLOAT_TYPE_TALLEST_STRUCTURE_HE@
CONST	SEGMENT
??_C@_0CE@IOONFFD@FLOAT_TYPE_TALLEST_STRUCTURE_HE@ DB 'FLOAT_TYPE_TALLEST'
	DB	'_STRUCTURE_HEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GALAKFDC@FLOAT_TYPE_TAIL_ROTOR_RPM@
CONST	SEGMENT
??_C@_0BK@GALAKFDC@FLOAT_TYPE_TAIL_ROTOR_RPM@ DB 'FLOAT_TYPE_TAIL_ROTOR_R'
	DB	'PM', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IKNEOBCO@FLOAT_TYPE_TAIL_ROTOR_DIRECTION@
CONST	SEGMENT
??_C@_0CA@IKNEOBCO@FLOAT_TYPE_TAIL_ROTOR_DIRECTION@ DB 'FLOAT_TYPE_TAIL_R'
	DB	'OTOR_DIRECTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MNAHHAFP@FLOAT_TYPE_SURFACE_SCAN_RANGE@
CONST	SEGMENT
??_C@_0BO@MNAHHAFP@FLOAT_TYPE_SURFACE_SCAN_RANGE@ DB 'FLOAT_TYPE_SURFACE_'
	DB	'SCAN_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EELFBPHK@FLOAT_TYPE_STOP_TIMER@
CONST	SEGMENT
??_C@_0BG@EELFBPHK@FLOAT_TYPE_STOP_TIMER@ DB 'FLOAT_TYPE_STOP_TIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LKBAHGOG@FLOAT_TYPE_START_TIME@
CONST	SEGMENT
??_C@_0BG@LKBAHGOG@FLOAT_TYPE_START_TIME@ DB 'FLOAT_TYPE_START_TIME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NGGPEAFF@FLOAT_TYPE_START_SCALE@
CONST	SEGMENT
??_C@_0BH@NGGPEAFF@FLOAT_TYPE_START_SCALE@ DB 'FLOAT_TYPE_START_SCALE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OCHHDLPA@FLOAT_TYPE_SPRITE_LIFETIME@
CONST	SEGMENT
??_C@_0BL@OCHHDLPA@FLOAT_TYPE_SPRITE_LIFETIME@ DB 'FLOAT_TYPE_SPRITE_LIFE'
	DB	'TIME', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IOJAKCEG@FLOAT_TYPE_SPEECH_PRIORITY@
CONST	SEGMENT
??_C@_0BL@IOJAKCEG@FLOAT_TYPE_SPEECH_PRIORITY@ DB 'FLOAT_TYPE_SPEECH_PRIO'
	DB	'RITY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IADLEBHB@FLOAT_TYPE_SPEECH_EXPIRE_TIME@
CONST	SEGMENT
??_C@_0BO@IADLEBHB@FLOAT_TYPE_SPEECH_EXPIRE_TIME@ DB 'FLOAT_TYPE_SPEECH_E'
	DB	'XPIRE_TIME', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PLAEOCBD@FLOAT_TYPE_SPEECH_CATEGORY_SILE@
CONST	SEGMENT
??_C@_0CJ@PLAEOCBD@FLOAT_TYPE_SPEECH_CATEGORY_SILE@ DB 'FLOAT_TYPE_SPEECH'
	DB	'_CATEGORY_SILENCE_TIMER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JIDJJCCK@FLOAT_TYPE_SMOKE_SLEEP@
CONST	SEGMENT
??_C@_0BH@JIDJJCCK@FLOAT_TYPE_SMOKE_SLEEP@ DB 'FLOAT_TYPE_SMOKE_SLEEP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MFAJCOMD@FLOAT_TYPE_SMOKE_LIFETIME@
CONST	SEGMENT
??_C@_0BK@MFAJCOMD@FLOAT_TYPE_SMOKE_LIFETIME@ DB 'FLOAT_TYPE_SMOKE_LIFETI'
	DB	'ME', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LMMKKNJF@FLOAT_TYPE_SLEEP@
CONST	SEGMENT
??_C@_0BB@LMMKKNJF@FLOAT_TYPE_SLEEP@ DB 'FLOAT_TYPE_SLEEP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BLMBMCCA@FLOAT_TYPE_SECTOR_SIDE_MAX_VALU@
CONST	SEGMENT
??_C@_0CB@BLMBMCCA@FLOAT_TYPE_SECTOR_SIDE_MAX_VALU@ DB 'FLOAT_TYPE_SECTOR'
	DB	'_SIDE_MAX_VALUE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IJJMHAII@FLOAT_TYPE_SCALE@
CONST	SEGMENT
??_C@_0BB@IJJMHAII@FLOAT_TYPE_SCALE@ DB 'FLOAT_TYPE_SCALE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CIELJLBI@FLOAT_TYPE_RUDDER_STATE@
CONST	SEGMENT
??_C@_0BI@CIELJLBI@FLOAT_TYPE_RUDDER_STATE@ DB 'FLOAT_TYPE_RUDDER_STATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DGIDNINN@FLOAT_TYPE_ROLL@
CONST	SEGMENT
??_C@_0BA@DGIDNINN@FLOAT_TYPE_ROLL@ DB 'FLOAT_TYPE_ROLL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ONKFGIBP@FLOAT_TYPE_REPAIR_TIMER@
CONST	SEGMENT
??_C@_0BI@ONKFGIBP@FLOAT_TYPE_REPAIR_TIMER@ DB 'FLOAT_TYPE_REPAIR_TIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HLBPLBEB@FLOAT_TYPE_RECON_RADIUS@
CONST	SEGMENT
??_C@_0BI@HLBPLBEB@FLOAT_TYPE_RECON_RADIUS@ DB 'FLOAT_TYPE_RECON_RADIUS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IMMLCDND@FLOAT_TYPE_RECON_DISTANCE@
CONST	SEGMENT
??_C@_0BK@IMMLCDND@FLOAT_TYPE_RECON_DISTANCE@ DB 'FLOAT_TYPE_RECON_DISTAN'
	DB	'CE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IEMIJEDE@FLOAT_TYPE_REARMING_TIME@
CONST	SEGMENT
??_C@_0BJ@IEMIJEDE@FLOAT_TYPE_REARMING_TIME@ DB 'FLOAT_TYPE_REARMING_TIME'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CEOGODDO@FLOAT_TYPE_RATING@
CONST	SEGMENT
??_C@_0BC@CEOGODDO@FLOAT_TYPE_RATING@ DB 'FLOAT_TYPE_RATING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GMDGAPPK@FLOAT_TYPE_RANGE@
CONST	SEGMENT
??_C@_0BB@GMDGAPPK@FLOAT_TYPE_RANGE@ DB 'FLOAT_TYPE_RANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JFPDDFFN@FLOAT_TYPE_RADAR_STEALTH_FACTOR@
CONST	SEGMENT
??_C@_0CA@JFPDDFFN@FLOAT_TYPE_RADAR_STEALTH_FACTOR@ DB 'FLOAT_TYPE_RADAR_'
	DB	'STEALTH_FACTOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GCKJLLHE@FLOAT_TYPE_RADAR_ROTATION_STATE@
CONST	SEGMENT
??_C@_0CA@GCKJLLHE@FLOAT_TYPE_RADAR_ROTATION_STATE@ DB 'FLOAT_TYPE_RADAR_'
	DB	'ROTATION_STATE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PHAGJFIL@FLOAT_TYPE_RADAR_ALTITUDE@
CONST	SEGMENT
??_C@_0BK@PHAGJFIL@FLOAT_TYPE_RADAR_ALTITUDE@ DB 'FLOAT_TYPE_RADAR_ALTITU'
	DB	'DE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CGLMGEKF@FLOAT_TYPE_PROTOTYPE_4@
CONST	SEGMENT
??_C@_0BH@CGLMGEKF@FLOAT_TYPE_PROTOTYPE_4@ DB 'FLOAT_TYPE_PROTOTYPE_4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJPNPCGC@FLOAT_TYPE_PROTOTYPE_3@
CONST	SEGMENT
??_C@_0BH@GJPNPCGC@FLOAT_TYPE_PROTOTYPE_3@ DB 'FLOAT_TYPE_PROTOTYPE_3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HAOGMDCD@FLOAT_TYPE_PROTOTYPE_2@
CONST	SEGMENT
??_C@_0BH@HAOGMDCD@FLOAT_TYPE_PROTOTYPE_2@ DB 'FLOAT_TYPE_PROTOTYPE_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FLMLJAOA@FLOAT_TYPE_PROTOTYPE_1@
CONST	SEGMENT
??_C@_0BH@FLMLJAOA@FLOAT_TYPE_PROTOTYPE_1@ DB 'FLOAT_TYPE_PROTOTYPE_1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KFHEJOBP@FLOAT_TYPE_PROPELLOR_RPM@
CONST	SEGMENT
??_C@_0BJ@KFHEJOBP@FLOAT_TYPE_PROPELLOR_RPM@ DB 'FLOAT_TYPE_PROPELLOR_RPM'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IJFMFDKL@FLOAT_TYPE_PROPELLOR_DIRECTION@
CONST	SEGMENT
??_C@_0BP@IJFMFDKL@FLOAT_TYPE_PROPELLOR_DIRECTION@ DB 'FLOAT_TYPE_PROPELL'
	DB	'OR_DIRECTION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@COHDNOFN@FLOAT_TYPE_POWER_OUTPUT@
CONST	SEGMENT
??_C@_0BI@COHDNOFN@FLOAT_TYPE_POWER_OUTPUT@ DB 'FLOAT_TYPE_POWER_OUTPUT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@JEJHFMGC@FLOAT_TYPE_POTENTIAL_SURFACE_TO@
CONST	SEGMENT
??_C@_0CP@JEJHFMGC@FLOAT_TYPE_POTENTIAL_SURFACE_TO@ DB 'FLOAT_TYPE_POTENT'
	DB	'IAL_SURFACE_TO_SURFACE_THREAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OFFLKCEK@FLOAT_TYPE_POTENTIAL_SURFACE_TO@
CONST	SEGMENT
??_C@_0CL@OFFLKCEK@FLOAT_TYPE_POTENTIAL_SURFACE_TO@ DB 'FLOAT_TYPE_POTENT'
	DB	'IAL_SURFACE_TO_AIR_THREAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FBIGAFOD@FLOAT_TYPE_POTENTIAL_SURFACE_TH@
CONST	SEGMENT
??_C@_0CE@FBIGAFOD@FLOAT_TYPE_POTENTIAL_SURFACE_TH@ DB 'FLOAT_TYPE_POTENT'
	DB	'IAL_SURFACE_THREAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PLCEKPEL@FLOAT_TYPE_POTENTIAL_AIR_TO_SUR@
CONST	SEGMENT
??_C@_0CL@PLCEKPEL@FLOAT_TYPE_POTENTIAL_AIR_TO_SUR@ DB 'FLOAT_TYPE_POTENT'
	DB	'IAL_AIR_TO_SURFACE_THREAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DBDKMABJ@FLOAT_TYPE_POTENTIAL_AIR_TO_AIR@
CONST	SEGMENT
??_C@_0CH@DBDKMABJ@FLOAT_TYPE_POTENTIAL_AIR_TO_AIR@ DB 'FLOAT_TYPE_POTENT'
	DB	'IAL_AIR_TO_AIR_THREAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BFPCJKFD@FLOAT_TYPE_POTENTIAL_AIR_THREAT@
CONST	SEGMENT
??_C@_0CA@BFPCJKFD@FLOAT_TYPE_POTENTIAL_AIR_THREAT@ DB 'FLOAT_TYPE_POTENT'
	DB	'IAL_AIR_THREAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IJFDEEHC@FLOAT_TYPE_POPULATION_Z_MAX@
CONST	SEGMENT
??_C@_0BM@IJFDEEHC@FLOAT_TYPE_POPULATION_Z_MAX@ DB 'FLOAT_TYPE_POPULATION'
	DB	'_Z_MAX', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JLNIKABN@FLOAT_TYPE_POPULATION_Z_MIN@
CONST	SEGMENT
??_C@_0BM@JLNIKABN@FLOAT_TYPE_POPULATION_Z_MIN@ DB 'FLOAT_TYPE_POPULATION'
	DB	'_Z_MIN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MEJLOFHJ@FLOAT_TYPE_POPULATION_X_MAX@
CONST	SEGMENT
??_C@_0BM@MEJLOFHJ@FLOAT_TYPE_POPULATION_X_MAX@ DB 'FLOAT_TYPE_POPULATION'
	DB	'_X_MAX', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NGBAABBG@FLOAT_TYPE_POPULATION_X_MIN@
CONST	SEGMENT
??_C@_0BM@NGBAABBG@FLOAT_TYPE_POPULATION_X_MIN@ DB 'FLOAT_TYPE_POPULATION'
	DB	'_X_MIN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PKNKKFLN@FLOAT_TYPE_PLAYER_WEAPON_PITCH@
CONST	SEGMENT
??_C@_0BP@PKNKKFLN@FLOAT_TYPE_PLAYER_WEAPON_PITCH@ DB 'FLOAT_TYPE_PLAYER_'
	DB	'WEAPON_PITCH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DJCGMPH@FLOAT_TYPE_PLAYER_WEAPON_HEADIN@
CONST	SEGMENT
??_C@_0CB@DJCGMPH@FLOAT_TYPE_PLAYER_WEAPON_HEADIN@ DB 'FLOAT_TYPE_PLAYER_'
	DB	'WEAPON_HEADING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JMINIEFK@FLOAT_TYPE_PITCH@
CONST	SEGMENT
??_C@_0BB@JMINIEFK@FLOAT_TYPE_PITCH@ DB 'FLOAT_TYPE_PITCH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MCLNGPIP@FLOAT_TYPE_PERSON_ANIMATION_STA@
CONST	SEGMENT
??_C@_0CC@MCLNGPIP@FLOAT_TYPE_PERSON_ANIMATION_STA@ DB 'FLOAT_TYPE_PERSON'
	DB	'_ANIMATION_STATE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EKEBLHME@FLOAT_TYPE_NUMBER_OF_MAIN_ROTOR@
CONST	SEGMENT
??_C@_0CB@EKEBLHME@FLOAT_TYPE_NUMBER_OF_MAIN_ROTOR@ DB 'FLOAT_TYPE_NUMBER'
	DB	'_OF_MAIN_ROTORS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OGBIBFCL@FLOAT_TYPE_MINIMUM_EFFICIENCY@
CONST	SEGMENT
??_C@_0BO@OGBIBFCL@FLOAT_TYPE_MINIMUM_EFFICIENCY@ DB 'FLOAT_TYPE_MINIMUM_'
	DB	'EFFICIENCY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KAMLCHEJ@FLOAT_TYPE_MEDIUM_VELOCITY@
CONST	SEGMENT
??_C@_0BL@KAMLCHEJ@FLOAT_TYPE_MEDIUM_VELOCITY@ DB 'FLOAT_TYPE_MEDIUM_VELO'
	DB	'CITY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FBHELJGN@FLOAT_TYPE_MAX_VERTICAL_TURN_AL@
CONST	SEGMENT
??_C@_0CH@FBHELJGN@FLOAT_TYPE_MAX_VERTICAL_TURN_AL@ DB 'FLOAT_TYPE_MAX_VE'
	DB	'RTICAL_TURN_ALLOWANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FMHIKMMK@FLOAT_TYPE_MAX_ROLL@
CONST	SEGMENT
??_C@_0BE@FMHIKMMK@FLOAT_TYPE_MAX_ROLL@ DB 'FLOAT_TYPE_MAX_ROLL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FILCNDBC@FLOAT_TYPE_MAX_TURN_RATE@
CONST	SEGMENT
??_C@_0BJ@FILCNDBC@FLOAT_TYPE_MAX_TURN_RATE@ DB 'FLOAT_TYPE_MAX_TURN_RATE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FPDNMBN@FLOAT_TYPE_MAX_ACCELERATION@
CONST	SEGMENT
??_C@_0BM@FPDNMBN@FLOAT_TYPE_MAX_ACCELERATION@ DB 'FLOAT_TYPE_MAX_ACCELER'
	DB	'ATION', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NGKOHNHK@FLOAT_TYPE_MAX_3D_OBJECT_VISUAL@
CONST	SEGMENT
??_C@_0CG@NGKOHNHK@FLOAT_TYPE_MAX_3D_OBJECT_VISUAL@ DB 'FLOAT_TYPE_MAX_3D'
	DB	'_OBJECT_VISUAL_RANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NPLKDJPD@FLOAT_TYPE_MAIN_ROTOR_SPIN_UP_T@
CONST	SEGMENT
??_C@_0CE@NPLKDJPD@FLOAT_TYPE_MAIN_ROTOR_SPIN_UP_T@ DB 'FLOAT_TYPE_MAIN_R'
	DB	'OTOR_SPIN_UP_TIMER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OMKKJCMC@FLOAT_TYPE_MAIN_ROTOR_SHAFT_ANG@
CONST	SEGMENT
??_C@_0CC@OMKKJCMC@FLOAT_TYPE_MAIN_ROTOR_SHAFT_ANG@ DB 'FLOAT_TYPE_MAIN_R'
	DB	'OTOR_SHAFT_ANGLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LOJLLDIN@FLOAT_TYPE_MAIN_ROTOR_RPM@
CONST	SEGMENT
??_C@_0BK@LOJLLDIN@FLOAT_TYPE_MAIN_ROTOR_RPM@ DB 'FLOAT_TYPE_MAIN_ROTOR_R'
	DB	'PM', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MGMDEJNJ@FLOAT_TYPE_MAIN_ROTOR_ROLL@
CONST	SEGMENT
??_C@_0BL@MGMDEJNJ@FLOAT_TYPE_MAIN_ROTOR_ROLL@ DB 'FLOAT_TYPE_MAIN_ROTOR_'
	DB	'ROLL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JJLPHJOO@FLOAT_TYPE_MAIN_ROTOR_RADIUS@
CONST	SEGMENT
??_C@_0BN@JJLPHJOO@FLOAT_TYPE_MAIN_ROTOR_RADIUS@ DB 'FLOAT_TYPE_MAIN_ROTO'
	DB	'R_RADIUS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JLBAAANC@FLOAT_TYPE_MAIN_ROTOR_PITCH@
CONST	SEGMENT
??_C@_0BM@JLBAAANC@FLOAT_TYPE_MAIN_ROTOR_PITCH@ DB 'FLOAT_TYPE_MAIN_ROTOR'
	DB	'_PITCH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LCFDNBGK@FLOAT_TYPE_MAIN_ROTOR_BLADE_DRO@
CONST	SEGMENT
??_C@_0CI@LCFDNBGK@FLOAT_TYPE_MAIN_ROTOR_BLADE_DRO@ DB 'FLOAT_TYPE_MAIN_R'
	DB	'OTOR_BLADE_DROOP_ANGLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HOMMBCKJ@FLOAT_TYPE_MAIN_ROTOR_DIRECTION@
CONST	SEGMENT
??_C@_0CA@HOMMBCKJ@FLOAT_TYPE_MAIN_ROTOR_DIRECTION@ DB 'FLOAT_TYPE_MAIN_R'
	DB	'OTOR_DIRECTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NLKEBNNO@FLOAT_TYPE_MAIN_ROTOR_BLADE_CON@
CONST	SEGMENT
??_C@_0CJ@NLKEBNNO@FLOAT_TYPE_MAIN_ROTOR_BLADE_CON@ DB 'FLOAT_TYPE_MAIN_R'
	DB	'OTOR_BLADE_CONING_ANGLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FIMNNACP@FLOAT_TYPE_LOW_VELOCITY@
CONST	SEGMENT
??_C@_0BI@FIMNNACP@FLOAT_TYPE_LOW_VELOCITY@ DB 'FLOAT_TYPE_LOW_VELOCITY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PGAEDDPL@FLOAT_TYPE_LOADING_DOOR_TIMER@
CONST	SEGMENT
??_C@_0BO@PGAEDDPL@FLOAT_TYPE_LOADING_DOOR_TIMER@ DB 'FLOAT_TYPE_LOADING_'
	DB	'DOOR_TIMER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CBMAKCBJ@FLOAT_TYPE_LOADING_DOOR_STATE@
CONST	SEGMENT
??_C@_0BO@CBMAKCBJ@FLOAT_TYPE_LOADING_DOOR_STATE@ DB 'FLOAT_TYPE_LOADING_'
	DB	'DOOR_STATE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JDIODEMG@FLOAT_TYPE_LIGHTNING_TIMER@
CONST	SEGMENT
??_C@_0BL@JDIODEMG@FLOAT_TYPE_LIGHTNING_TIMER@ DB 'FLOAT_TYPE_LIGHTNING_T'
	DB	'IMER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HHGBBOFA@FLOAT_TYPE_LIFETIME@
CONST	SEGMENT
??_C@_0BE@HHGBBOFA@FLOAT_TYPE_LIFETIME@ DB 'FLOAT_TYPE_LIFETIME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JDOMDONP@FLOAT_TYPE_LAST_SEEN_TIME@
CONST	SEGMENT
??_C@_0BK@JDOMDONP@FLOAT_TYPE_LAST_SEEN_TIME@ DB 'FLOAT_TYPE_LAST_SEEN_TI'
	DB	'ME', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LLFNBJAC@FLOAT_TYPE_LAND_URGENCY@
CONST	SEGMENT
??_C@_0BI@LLFNBJAC@FLOAT_TYPE_LAND_URGENCY@ DB 'FLOAT_TYPE_LAND_URGENCY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MLBNIMCP@FLOAT_TYPE_KEYSITE_STRENGTH@
CONST	SEGMENT
??_C@_0BM@MLBNIMCP@FLOAT_TYPE_KEYSITE_STRENGTH@ DB 'FLOAT_TYPE_KEYSITE_ST'
	DB	'RENGTH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EHMFAPNK@FLOAT_TYPE_KEYSITE_MAXIMUM_STRE@
CONST	SEGMENT
??_C@_0CE@EHMFAPNK@FLOAT_TYPE_KEYSITE_MAXIMUM_STRE@ DB 'FLOAT_TYPE_KEYSIT'
	DB	'E_MAXIMUM_STRENGTH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IJEDHHCA@FLOAT_TYPE_KEYSITE_IMPORTANCE@
CONST	SEGMENT
??_C@_0BO@IJEDHHCA@FLOAT_TYPE_KEYSITE_IMPORTANCE@ DB 'FLOAT_TYPE_KEYSITE_'
	DB	'IMPORTANCE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FOHOGLLC@FLOAT_TYPE_INVULNERABLE_TIMER@
CONST	SEGMENT
??_C@_0BO@FOHOGLLC@FLOAT_TYPE_INVULNERABLE_TIMER@ DB 'FLOAT_TYPE_INVULNER'
	DB	'ABLE_TIMER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NPIJPOOH@FLOAT_TYPE_INITIAL_SPEED@
CONST	SEGMENT
??_C@_0BJ@NPIJPOOH@FLOAT_TYPE_INITIAL_SPEED@ DB 'FLOAT_TYPE_INITIAL_SPEED'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CCEKOKOF@FLOAT_TYPE_HIGH_VELOCITY@
CONST	SEGMENT
??_C@_0BJ@CCEKOKOF@FLOAT_TYPE_HIGH_VELOCITY@ DB 'FLOAT_TYPE_HIGH_VELOCITY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FOMEHPNF@FLOAT_TYPE_HEADING@
CONST	SEGMENT
??_C@_0BD@FOMEHPNF@FLOAT_TYPE_HEADING@ DB 'FLOAT_TYPE_HEADING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LEHPBPGO@FLOAT_TYPE_GUIDE_CRITERIA_VALUE@
CONST	SEGMENT
??_C@_0CA@LEHPBPGO@FLOAT_TYPE_GUIDE_CRITERIA_VALUE@ DB 'FLOAT_TYPE_GUIDE_'
	DB	'CRITERIA_VALUE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LALEOCAC@FLOAT_TYPE_GENERATOR_LIFETIME@
CONST	SEGMENT
??_C@_0BO@LALEOCAC@FLOAT_TYPE_GENERATOR_LIFETIME@ DB 'FLOAT_TYPE_GENERATO'
	DB	'R_LIFETIME', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BFMBOMAC@FLOAT_TYPE_FUSELAGE_ANGLE@
CONST	SEGMENT
??_C@_0BK@BFMBOMAC@FLOAT_TYPE_FUSELAGE_ANGLE@ DB 'FLOAT_TYPE_FUSELAGE_ANG'
	DB	'LE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MJBCICHJ@FLOAT_TYPE_FUEL_SUPPLY_LEVEL@
CONST	SEGMENT
??_C@_0BN@MJBCICHJ@FLOAT_TYPE_FUEL_SUPPLY_LEVEL@ DB 'FLOAT_TYPE_FUEL_SUPP'
	DB	'LY_LEVEL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CKFJDBFF@FLOAT_TYPE_FUEL_ECONOMY@
CONST	SEGMENT
??_C@_0BI@CKFJDBFF@FLOAT_TYPE_FUEL_ECONOMY@ DB 'FLOAT_TYPE_FUEL_ECONOMY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GEDEFGAB@FLOAT_TYPE_FUEL_DEFAULT_WEIGHT@
CONST	SEGMENT
??_C@_0BP@GEDEFGAB@FLOAT_TYPE_FUEL_DEFAULT_WEIGHT@ DB 'FLOAT_TYPE_FUEL_DE'
	DB	'FAULT_WEIGHT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DMFIMIFE@FLOAT_TYPE_FREQUENCY@
CONST	SEGMENT
??_C@_0BF@DMFIMIFE@FLOAT_TYPE_FREQUENCY@ DB 'FLOAT_TYPE_FREQUENCY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MIJFFMIP@FLOAT_TYPE_FOG_OF_WAR_MAXIMUM_V@
CONST	SEGMENT
??_C@_0CE@MIJFFMIP@FLOAT_TYPE_FOG_OF_WAR_MAXIMUM_V@ DB 'FLOAT_TYPE_FOG_OF'
	DB	'_WAR_MAXIMUM_VALUE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NIGPPPAD@FLOAT_TYPE_FOG_OF_WAR@
CONST	SEGMENT
??_C@_0BG@NIGPPPAD@FLOAT_TYPE_FOG_OF_WAR@ DB 'FLOAT_TYPE_FOG_OF_WAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OLAGABFC@FLOAT_TYPE_FLIGHT_TIME@
CONST	SEGMENT
??_C@_0BH@OLAGABFC@FLOAT_TYPE_FLIGHT_TIME@ DB 'FLOAT_TYPE_FLIGHT_TIME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LAGLPMJP@FLOAT_TYPE_FLAP_STATE@
CONST	SEGMENT
??_C@_0BG@LAGLPMJP@FLOAT_TYPE_FLAP_STATE@ DB 'FLOAT_TYPE_FLAP_STATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JICOMPCB@FLOAT_TYPE_FIXED_STRUCTURE_HEIG@
CONST	SEGMENT
??_C@_0CC@JICOMPCB@FLOAT_TYPE_FIXED_STRUCTURE_HEIG@ DB 'FLOAT_TYPE_FIXED_'
	DB	'STRUCTURE_HEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JNKODBHG@FLOAT_TYPE_FIXED_OBJECT_IMPORTA@
CONST	SEGMENT
??_C@_0CD@JNKODBHG@FLOAT_TYPE_FIXED_OBJECT_IMPORTA@ DB 'FLOAT_TYPE_FIXED_'
	DB	'OBJECT_IMPORTANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LHLCNMDB@FLOAT_TYPE_EXPLOSION_STATE@
CONST	SEGMENT
??_C@_0BL@LHLCNMDB@FLOAT_TYPE_EXPLOSION_STATE@ DB 'FLOAT_TYPE_EXPLOSION_S'
	DB	'TATE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PNFKIAOF@FLOAT_TYPE_EXPIRE_TIMER@
CONST	SEGMENT
??_C@_0BI@PNFKIAOF@FLOAT_TYPE_EXPIRE_TIMER@ DB 'FLOAT_TYPE_EXPIRE_TIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ONFPKFHK@FLOAT_TYPE_END_SCALE@
CONST	SEGMENT
??_C@_0BF@ONFPKFHK@FLOAT_TYPE_END_SCALE@ DB 'FLOAT_TYPE_END_SCALE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ECGANKLB@FLOAT_TYPE_ELAPSED_TIME@
CONST	SEGMENT
??_C@_0BI@ECGANKLB@FLOAT_TYPE_ELAPSED_TIME@ DB 'FLOAT_TYPE_ELAPSED_TIME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GPCJDGGF@FLOAT_TYPE_ELAPSED_MISSION_TIME@
CONST	SEGMENT
??_C@_0CA@GPCJDGGF@FLOAT_TYPE_ELAPSED_MISSION_TIME@ DB 'FLOAT_TYPE_ELAPSE'
	DB	'D_MISSION_TIME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MBPANMBF@FLOAT_TYPE_EFFICIENCY@
CONST	SEGMENT
??_C@_0BG@MBPANMBF@FLOAT_TYPE_EFFICIENCY@ DB 'FLOAT_TYPE_EFFICIENCY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MDAFDCMD@FLOAT_TYPE_EFFECT_LIFETIME@
CONST	SEGMENT
??_C@_0BL@MDAFDCMD@FLOAT_TYPE_EFFECT_LIFETIME@ DB 'FLOAT_TYPE_EFFECT_LIFE'
	DB	'TIME', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OJMNDFO@FLOAT_TYPE_DISTANCE@
CONST	SEGMENT
??_C@_0BE@OJMNDFO@FLOAT_TYPE_DISTANCE@ DB 'FLOAT_TYPE_DISTANCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PMICGDKM@FLOAT_TYPE_DESIRED_VELOCITY@
CONST	SEGMENT
??_C@_0BM@PMICGDKM@FLOAT_TYPE_DESIRED_VELOCITY@ DB 'FLOAT_TYPE_DESIRED_VE'
	DB	'LOCITY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BENJBHFP@FLOAT_TYPE_DECOY_TIMER@
CONST	SEGMENT
??_C@_0BH@BENJBHFP@FLOAT_TYPE_DECOY_TIMER@ DB 'FLOAT_TYPE_DECOY_TIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BBALBDOG@FLOAT_TYPE_DECOY_RELEASE_TIMER@
CONST	SEGMENT
??_C@_0BP@BBALBDOG@FLOAT_TYPE_DECOY_RELEASE_TIMER@ DB 'FLOAT_TYPE_DECOY_R'
	DB	'ELEASE_TIMER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IOKICKHL@FLOAT_TYPE_DEATH_TIMER@
CONST	SEGMENT
??_C@_0BH@IOKICKHL@FLOAT_TYPE_DEATH_TIMER@ DB 'FLOAT_TYPE_DEATH_TIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BBHBCMPF@FLOAT_TYPE_CURRENT_MESSAGE_TIME@
CONST	SEGMENT
??_C@_0CB@BBHBCMPF@FLOAT_TYPE_CURRENT_MESSAGE_TIME@ DB 'FLOAT_TYPE_CURREN'
	DB	'T_MESSAGE_TIMER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PBGJNIAI@FLOAT_TYPE_CRUISE_VELOCITY@
CONST	SEGMENT
??_C@_0BL@PBGJNIAI@FLOAT_TYPE_CRUISE_VELOCITY@ DB 'FLOAT_TYPE_CRUISE_VELO'
	DB	'CITY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JGLBIALH@FLOAT_TYPE_CRUISE_ALTITUDE@
CONST	SEGMENT
??_C@_0BL@JGLBIALH@FLOAT_TYPE_CRUISE_ALTITUDE@ DB 'FLOAT_TYPE_CRUISE_ALTI'
	DB	'TUDE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FFFOBLDH@FLOAT_TYPE_CRATER_LIFETIME@
CONST	SEGMENT
??_C@_0BL@FFFOBLDH@FLOAT_TYPE_CRATER_LIFETIME@ DB 'FLOAT_TYPE_CRATER_LIFE'
	DB	'TIME', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EOJCAKEC@FLOAT_TYPE_CHASE_VIEW_MIN_DISTA@
CONST	SEGMENT
??_C@_0CI@EOJCAKEC@FLOAT_TYPE_CHASE_VIEW_MIN_DISTA@ DB 'FLOAT_TYPE_CHASE_'
	DB	'VIEW_MIN_DISTANCE_TEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DHFMABEL@FLOAT_TYPE_CHASE_VIEW_MIN_DISTA@
CONST	SEGMENT
??_C@_0CD@DHFMABEL@FLOAT_TYPE_CHASE_VIEW_MIN_DISTA@ DB 'FLOAT_TYPE_CHASE_'
	DB	'VIEW_MIN_DISTANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BNDEBCKG@FLOAT_TYPE_CHASE_VIEW_MAX_DISTA@
CONST	SEGMENT
??_C@_0CI@BNDEBCKG@FLOAT_TYPE_CHASE_VIEW_MAX_DISTA@ DB 'FLOAT_TYPE_CHASE_'
	DB	'VIEW_MAX_DISTANCE_TEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HHBDHJDN@FLOAT_TYPE_CHASE_VIEW_MAX_DISTA@
CONST	SEGMENT
??_C@_0CD@HHBDHJDN@FLOAT_TYPE_CHASE_VIEW_MAX_DISTA@ DB 'FLOAT_TYPE_CHASE_'
	DB	'VIEW_MAX_DISTANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FFKMGOOM@FLOAT_TYPE_CENTRE_OF_GRAVITY_TO@
CONST	SEGMENT
??_C@_0DA@FFKMGOOM@FLOAT_TYPE_CENTRE_OF_GRAVITY_TO@ DB 'FLOAT_TYPE_CENTRE'
	DB	'_OF_GRAVITY_TO_GROUND_DISTANCE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ONNHCJFC@FLOAT_TYPE_CARGO_DOOR_STATE@
CONST	SEGMENT
??_C@_0BM@ONNHCJFC@FLOAT_TYPE_CARGO_DOOR_STATE@ DB 'FLOAT_TYPE_CARGO_DOOR'
	DB	'_STATE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KFLKGJJC@FLOAT_TYPE_AXLE_LENGTH@
CONST	SEGMENT
??_C@_0BH@KFLKGJJC@FLOAT_TYPE_AXLE_LENGTH@ DB 'FLOAT_TYPE_AXLE_LENGTH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DCFNMDGE@FLOAT_TYPE_AVOIDANCE_RADIUS@
CONST	SEGMENT
??_C@_0BM@DCFNMDGE@FLOAT_TYPE_AVOIDANCE_RADIUS@ DB 'FLOAT_TYPE_AVOIDANCE_'
	DB	'RADIUS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KKIJIFMH@FLOAT_TYPE_ATTACK_ALTITUDE@
CONST	SEGMENT
??_C@_0BL@KKIJIFMH@FLOAT_TYPE_ATTACK_ALTITUDE@ DB 'FLOAT_TYPE_ATTACK_ALTI'
	DB	'TUDE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HCPJANIK@FLOAT_TYPE_ASSIST_TIMER@
CONST	SEGMENT
??_C@_0BI@HCPJANIK@FLOAT_TYPE_ASSIST_TIMER@ DB 'FLOAT_TYPE_ASSIST_TIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GOKODDBE@FLOAT_TYPE_ASSIGN_TIMER@
CONST	SEGMENT
??_C@_0BI@GOKODDBE@FLOAT_TYPE_ASSIGN_TIMER@ DB 'FLOAT_TYPE_ASSIGN_TIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PAEACJJB@FLOAT_TYPE_ANIMATION_FREQUENCY@
CONST	SEGMENT
??_C@_0BP@PAEACJJB@FLOAT_TYPE_ANIMATION_FREQUENCY@ DB 'FLOAT_TYPE_ANIMATI'
	DB	'ON_FREQUENCY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KMNNJKMN@FLOAT_TYPE_SOUNDPITCH@
CONST	SEGMENT
??_C@_0BG@KMNNJKMN@FLOAT_TYPE_SOUNDPITCH@ DB 'FLOAT_TYPE_SOUNDPITCH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FOFBDMFP@FLOAT_TYPE_AMPLIFICATION@
CONST	SEGMENT
??_C@_0BJ@FOFBDMFP@FLOAT_TYPE_AMPLIFICATION@ DB 'FLOAT_TYPE_AMPLIFICATION'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LLBDKLMI@FLOAT_TYPE_AMMO_SUPPLY_LEVEL@
CONST	SEGMENT
??_C@_0BN@LLBDKLMI@FLOAT_TYPE_AMMO_SUPPLY_LEVEL@ DB 'FLOAT_TYPE_AMMO_SUPP'
	DB	'LY_LEVEL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MMKPGEJ@FLOAT_TYPE_AMMO_ECONOMY@
CONST	SEGMENT
??_C@_0BI@MMKPGEJ@FLOAT_TYPE_AMMO_ECONOMY@ DB 'FLOAT_TYPE_AMMO_ECONOMY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FMFDGJFH@FLOAT_TYPE_ALTITUDE@
CONST	SEGMENT
??_C@_0BE@FMFDGJFH@FLOAT_TYPE_ALTITUDE@ DB 'FLOAT_TYPE_ALTITUDE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JIPKFACC@FLOAT_TYPE_AIR_SCAN_RANGE@
CONST	SEGMENT
??_C@_0BK@JIPKFACC@FLOAT_TYPE_AIR_SCAN_RANGE@ DB 'FLOAT_TYPE_AIR_SCAN_RAN'
	DB	'GE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ELABGGFF@FLOAT_TYPE_AIR_SCAN_FLOOR@
CONST	SEGMENT
??_C@_0BK@ELABGGFF@FLOAT_TYPE_AIR_SCAN_FLOOR@ DB 'FLOAT_TYPE_AIR_SCAN_FLO'
	DB	'OR', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GNLIFNJB@FLOAT_TYPE_AIR_SCAN_CEILING@
CONST	SEGMENT
??_C@_0BM@GNLIFNJB@FLOAT_TYPE_AIR_SCAN_CEILING@ DB 'FLOAT_TYPE_AIR_SCAN_C'
	DB	'EILING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LGKMHEIG@FLOAT_TYPE_AIR_RADAR_CONTACT_TI@
CONST	SEGMENT
??_C@_0CF@LGKMHEIG@FLOAT_TYPE_AIR_RADAR_CONTACT_TI@ DB 'FLOAT_TYPE_AIR_RA'
	DB	'DAR_CONTACT_TIMEOUT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CCCNODCN@FLOAT_TYPE_AIRBRAKE_STATE@
CONST	SEGMENT
??_C@_0BK@CCCNODCN@FLOAT_TYPE_AIRBRAKE_STATE@ DB 'FLOAT_TYPE_AIRBRAKE_STA'
	DB	'TE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LCILEMED@FLOAT_TYPE_AFTERBURNER_STATE@
CONST	SEGMENT
??_C@_0BN@LCILEMED@FLOAT_TYPE_AFTERBURNER_STATE@ DB 'FLOAT_TYPE_AFTERBURN'
	DB	'ER_STATE', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?float_type_database@@3PAUFLOAT_TYPE_DATA@@A DD FLAT:??_C@_0BN@LCILEMED@FLOAT_TYPE_AFTERBURNER_STATE@ ; float_type_database
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@CCCNODCN@FLOAT_TYPE_AIRBRAKE_STATE@
	DD	04H
	DD	02H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CF@LGKMHEIG@FLOAT_TYPE_AIR_RADAR_CONTACT_TI@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@GNLIFNJB@FLOAT_TYPE_AIR_SCAN_CEILING@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@ELABGGFF@FLOAT_TYPE_AIR_SCAN_FLOOR@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@JIPKFACC@FLOAT_TYPE_AIR_SCAN_RANGE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BE@FMFDGJFH@FLOAT_TYPE_ALTITUDE@
	DD	03H
	DD	0eH
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@MMKPGEJ@FLOAT_TYPE_AMMO_ECONOMY@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BN@LLBDKLMI@FLOAT_TYPE_AMMO_SUPPLY_LEVEL@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BJ@FOFBDMFP@FLOAT_TYPE_AMPLIFICATION@
	DD	04H
	DD	01H
	DD	05H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BG@KMNNJKMN@FLOAT_TYPE_SOUNDPITCH@
	DD	04H
	DD	03H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@PAEACJJB@FLOAT_TYPE_ANIMATION_FREQUENCY@
	DD	04H
	DD	04H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@GOKODDBE@FLOAT_TYPE_ASSIGN_TIMER@
	DD	04H
	DD	0cH
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@HCPJANIK@FLOAT_TYPE_ASSIST_TIMER@
	DD	04H
	DD	08H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@KKIJIFMH@FLOAT_TYPE_ATTACK_ALTITUDE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@DCFNMDGE@FLOAT_TYPE_AVOIDANCE_RADIUS@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@KFLKGJJC@FLOAT_TYPE_AXLE_LENGTH@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@ONNHCJFC@FLOAT_TYPE_CARGO_DOOR_STATE@
	DD	04H
	DD	02H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0DA@FFKMGOOM@FLOAT_TYPE_CENTRE_OF_GRAVITY_TO@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CD@HHBDHJDN@FLOAT_TYPE_CHASE_VIEW_MAX_DISTA@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CI@BNDEBCKG@FLOAT_TYPE_CHASE_VIEW_MAX_DISTA@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CD@DHFMABEL@FLOAT_TYPE_CHASE_VIEW_MIN_DISTA@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CI@EOJCAKEC@FLOAT_TYPE_CHASE_VIEW_MIN_DISTA@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@FFFOBLDH@FLOAT_TYPE_CRATER_LIFETIME@
	DD	04H
	DD	0aH
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@JGLBIALH@FLOAT_TYPE_CRUISE_ALTITUDE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@PBGJNIAI@FLOAT_TYPE_CRUISE_VELOCITY@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CB@BBHBCMPF@FLOAT_TYPE_CURRENT_MESSAGE_TIME@
	DD	04H
	DD	04H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@IOKICKHL@FLOAT_TYPE_DEATH_TIMER@
	DD	04H
	DD	010H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@BBALBDOG@FLOAT_TYPE_DECOY_RELEASE_TIMER@
	DD	04H
	DD	04H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@BENJBHFP@FLOAT_TYPE_DECOY_TIMER@
	DD	04H
	DD	04H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@PMICGDKM@FLOAT_TYPE_DESIRED_VELOCITY@
	DD	03H
	DD	07H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BE@OJMNDFO@FLOAT_TYPE_DISTANCE@
	DD	04H
	DD	014H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@MDAFDCMD@FLOAT_TYPE_EFFECT_LIFETIME@
	DD	03H
	DD	07H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BG@MBPANMBF@FLOAT_TYPE_EFFICIENCY@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CA@GPCJDGGF@FLOAT_TYPE_ELAPSED_MISSION_TIME@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@ECGANKLB@FLOAT_TYPE_ELAPSED_TIME@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BF@ONFPKFHK@FLOAT_TYPE_END_SCALE@
	DD	04H
	DD	08H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@PNFKIAOF@FLOAT_TYPE_EXPIRE_TIMER@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@LHLCNMDB@FLOAT_TYPE_EXPLOSION_STATE@
	DD	03H
	DD	02H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CD@JNKODBHG@FLOAT_TYPE_FIXED_OBJECT_IMPORTA@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CC@JICOMPCB@FLOAT_TYPE_FIXED_STRUCTURE_HEIG@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BG@LAGLPMJP@FLOAT_TYPE_FLAP_STATE@
	DD	04H
	DD	02H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@OLAGABFC@FLOAT_TYPE_FLIGHT_TIME@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BG@NIGPPPAD@FLOAT_TYPE_FOG_OF_WAR@
	DD	04H
	DD	0fH
	DD	01H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CE@MIJFFMIP@FLOAT_TYPE_FOG_OF_WAR_MAXIMUM_V@
	DD	04H
	DD	0fH
	DD	01H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BF@DMFIMIFE@FLOAT_TYPE_FREQUENCY@
	DD	04H
	DD	08H
	DD	08H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@GEDEFGAB@FLOAT_TYPE_FUEL_DEFAULT_WEIGHT@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@CKFJDBFF@FLOAT_TYPE_FUEL_ECONOMY@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BN@MJBCICHJ@FLOAT_TYPE_FUEL_SUPPLY_LEVEL@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@BFMBOMAC@FLOAT_TYPE_FUSELAGE_ANGLE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@LALEOCAC@FLOAT_TYPE_GENERATOR_LIFETIME@
	DD	03H
	DD	010H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CA@LEHPBPGO@FLOAT_TYPE_GUIDE_CRITERIA_VALUE@
	DD	03H
	DD	010H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BD@FOMEHPNF@FLOAT_TYPE_HEADING@
	DD	01H
	DD	03H
	DD	08H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BJ@CCEKOKOF@FLOAT_TYPE_HIGH_VELOCITY@
	DD	03H
	DD	0aH
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BJ@NPIJPOOH@FLOAT_TYPE_INITIAL_SPEED@
	DD	03H
	DD	07H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@FOHOGLLC@FLOAT_TYPE_INVULNERABLE_TIMER@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@IJEDHHCA@FLOAT_TYPE_KEYSITE_IMPORTANCE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CE@EHMFAPNK@FLOAT_TYPE_KEYSITE_MAXIMUM_STRE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@MLBNIMCP@FLOAT_TYPE_KEYSITE_STRENGTH@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@LLFNBJAC@FLOAT_TYPE_LAND_URGENCY@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@JDOMDONP@FLOAT_TYPE_LAST_SEEN_TIME@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BE@HHGBBOFA@FLOAT_TYPE_LIFETIME@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@JDIODEMG@FLOAT_TYPE_LIGHTNING_TIMER@
	DD	04H
	DD	08H
	DD	02H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@CBMAKCBJ@FLOAT_TYPE_LOADING_DOOR_STATE@
	DD	04H
	DD	02H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@PGAEDDPL@FLOAT_TYPE_LOADING_DOOR_TIMER@
	DD	04H
	DD	05H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@FIMNNACP@FLOAT_TYPE_LOW_VELOCITY@
	DD	03H
	DD	07H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CJ@NLKEBNNO@FLOAT_TYPE_MAIN_ROTOR_BLADE_CON@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CA@HOMMBCKJ@FLOAT_TYPE_MAIN_ROTOR_DIRECTION@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CI@LCFDNBGK@FLOAT_TYPE_MAIN_ROTOR_BLADE_DRO@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@JLBAAANC@FLOAT_TYPE_MAIN_ROTOR_PITCH@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BN@JJLPHJOO@FLOAT_TYPE_MAIN_ROTOR_RADIUS@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@MGMDEJNJ@FLOAT_TYPE_MAIN_ROTOR_ROLL@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@LOJLLDIN@FLOAT_TYPE_MAIN_ROTOR_RPM@
	DD	04H
	DD	08H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CC@OMKKJCMC@FLOAT_TYPE_MAIN_ROTOR_SHAFT_ANG@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CE@NPLKDJPD@FLOAT_TYPE_MAIN_ROTOR_SPIN_UP_T@
	DD	04H
	DD	06H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CG@NGKOHNHK@FLOAT_TYPE_MAX_3D_OBJECT_VISUAL@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@FPDNMBN@FLOAT_TYPE_MAX_ACCELERATION@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BJ@FILCNDBC@FLOAT_TYPE_MAX_TURN_RATE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BE@FMHIKMMK@FLOAT_TYPE_MAX_ROLL@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CH@FBHELJGN@FLOAT_TYPE_MAX_VERTICAL_TURN_AL@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@KAMLCHEJ@FLOAT_TYPE_MEDIUM_VELOCITY@
	DD	03H
	DD	08H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@OGBIBFCL@FLOAT_TYPE_MINIMUM_EFFICIENCY@
	DD	04H
	DD	01H
	DD	07H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CB@EKEBLHME@FLOAT_TYPE_NUMBER_OF_MAIN_ROTOR@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CC@MCLNGPIP@FLOAT_TYPE_PERSON_ANIMATION_STA@
	DD	04H
	DD	04H
	DD	08H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BB@JMINIEFK@FLOAT_TYPE_PITCH@
	DD	01H
	DD	03H
	DD	08H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CB@DJCGMPH@FLOAT_TYPE_PLAYER_WEAPON_HEADIN@
	DD	01H
	DD	03H
	DD	08H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@PKNKKFLN@FLOAT_TYPE_PLAYER_WEAPON_PITCH@
	DD	01H
	DD	03H
	DD	08H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@NGBAABBG@FLOAT_TYPE_POPULATION_X_MIN@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@MEJLOFHJ@FLOAT_TYPE_POPULATION_X_MAX@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@JLNIKABN@FLOAT_TYPE_POPULATION_Z_MIN@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@IJFDEEHC@FLOAT_TYPE_POPULATION_Z_MAX@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CA@BFPCJKFD@FLOAT_TYPE_POTENTIAL_AIR_THREAT@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CH@DBDKMABJ@FLOAT_TYPE_POTENTIAL_AIR_TO_AIR@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CL@PLCEKPEL@FLOAT_TYPE_POTENTIAL_AIR_TO_SUR@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CE@FBIGAFOD@FLOAT_TYPE_POTENTIAL_SURFACE_TH@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CL@OFFLKCEK@FLOAT_TYPE_POTENTIAL_SURFACE_TO@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CP@JEJHFMGC@FLOAT_TYPE_POTENTIAL_SURFACE_TO@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@COHDNOFN@FLOAT_TYPE_POWER_OUTPUT@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@IJFMFDKL@FLOAT_TYPE_PROPELLOR_DIRECTION@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BJ@KFHEJOBP@FLOAT_TYPE_PROPELLOR_RPM@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@FLMLJAOA@FLOAT_TYPE_PROTOTYPE_1@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@HAOGMDCD@FLOAT_TYPE_PROTOTYPE_2@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@GJPNPCGC@FLOAT_TYPE_PROTOTYPE_3@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@CGLMGEKF@FLOAT_TYPE_PROTOTYPE_4@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@PHAGJFIL@FLOAT_TYPE_RADAR_ALTITUDE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CA@GCKJLLHE@FLOAT_TYPE_RADAR_ROTATION_STATE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CA@JFPDDFFN@FLOAT_TYPE_RADAR_STEALTH_FACTOR@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BB@GMDGAPPK@FLOAT_TYPE_RANGE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BC@CEOGODDO@FLOAT_TYPE_RATING@
	DD	04H
	DD	01H
	DD	07H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BJ@IEMIJEDE@FLOAT_TYPE_REARMING_TIME@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@IMMLCDND@FLOAT_TYPE_RECON_DISTANCE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@HLBPLBEB@FLOAT_TYPE_RECON_RADIUS@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@ONKFGIBP@FLOAT_TYPE_REPAIR_TIMER@
	DD	03H
	DD	0aH
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BA@DGIDNINN@FLOAT_TYPE_ROLL@
	DD	01H
	DD	03H
	DD	08H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@CIELJLBI@FLOAT_TYPE_RUDDER_STATE@
	DD	04H
	DD	02H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BB@IJJMHAII@FLOAT_TYPE_SCALE@
	DD	04H
	DD	08H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CB@BLMBMCCA@FLOAT_TYPE_SECTOR_SIDE_MAX_VALU@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BB@LMMKKNJF@FLOAT_TYPE_SLEEP@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@MFAJCOMD@FLOAT_TYPE_SMOKE_LIFETIME@
	DD	03H
	DD	010H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@JIDJJCCK@FLOAT_TYPE_SMOKE_SLEEP@
	DD	04H
	DD	08H
	DD	08H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CJ@PLAEOCBD@FLOAT_TYPE_SPEECH_CATEGORY_SILE@
	DD	04H
	DD	07H
	DD	02H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@IADLEBHB@FLOAT_TYPE_SPEECH_EXPIRE_TIME@
	DD	04H
	DD	0aH
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@IOJAKCEG@FLOAT_TYPE_SPEECH_PRIORITY@
	DD	04H
	DD	01H
	DD	07H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@OCHHDLPA@FLOAT_TYPE_SPRITE_LIFETIME@
	DD	03H
	DD	07H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@NGGPEAFF@FLOAT_TYPE_START_SCALE@
	DD	04H
	DD	08H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BG@LKBAHGOG@FLOAT_TYPE_START_TIME@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BG@EELFBPHK@FLOAT_TYPE_STOP_TIMER@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@MNAHHAFP@FLOAT_TYPE_SURFACE_SCAN_RANGE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CA@IKNEOBCO@FLOAT_TYPE_TAIL_ROTOR_DIRECTION@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@GALAKFDC@FLOAT_TYPE_TAIL_ROTOR_RPM@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CE@IOONFFD@FLOAT_TYPE_TALLEST_STRUCTURE_HE@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BN@MLBFPIBA@FLOAT_TYPE_TARGET_FIRE_TIMER@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CG@HPGAJNIH@FLOAT_TYPE_TARGET_PRIORITY_AIR_@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CJ@IAINDPJ@FLOAT_TYPE_TARGET_PRIORITY_GROU@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BN@FBNGJLFK@FLOAT_TYPE_TARGET_SCAN_DELAY@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BN@MLLBGCLC@FLOAT_TYPE_TARGET_SCAN_TIMER@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BF@MMNLHAIH@FLOAT_TYPE_TASK_COST@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CB@BNNBDOBP@FLOAT_TYPE_TASK_DEFAULT_PRIORIT@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BJ@KICOPEGG@FLOAT_TYPE_TASK_PRIORITY@
	DD	03H
	DD	04H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BN@PPKPCNHJ@FLOAT_TYPE_TASK_SUCCESS_RATE@
	DD	04H
	DD	01H
	DD	07H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@MGPOEAAK@FLOAT_TYPE_TASK_USER_DATA@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BN@CDDGFPAA@FLOAT_TYPE_TERRAIN_ELEVATION@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BH@MGLICP@FLOAT_TYPE_TIME_OF_DAY@
	DD	04H
	DD	011H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CE@NJJGHNKB@FLOAT_TYPE_TIME_OF_DAY_ACCELERA@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@KMGPEHAN@FLOAT_TYPE_UNDERCARRIAGE_STATE@
	DD	04H
	DD	02H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BD@LBHEKHPH@FLOAT_TYPE_URGENCY@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CB@EPKLOEIF@FLOAT_TYPE_VALID_EFFECT_LIFETIM@
	DD	04H
	DD	02H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BE@DLILDBOI@FLOAT_TYPE_VELOCITY@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@BAJEMLML@FLOAT_TYPE_VERY_HIGH_VELOCITY@
	DD	03H
	DD	0bH
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@OOJKLMKJ@FLOAT_TYPE_VIEW_INTEREST_LEVEL@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@NIMAKN@FLOAT_TYPE_WEAPON_BURST_TIMER@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BL@DGEJCNIA@FLOAT_TYPE_WEAPON_LIFETIME@
	DD	03H
	DD	09H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CB@IKBCHCGK@FLOAT_TYPE_WEAPON_SYSTEM_HEADIN@
	DD	01H
	DD	03H
	DD	08H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@HMDEAMEP@FLOAT_TYPE_WEAPON_SYSTEM_PITCH@
	DD	01H
	DD	03H
	DD	08H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CF@LNINDJIK@FLOAT_TYPE_WEAPON_SYSTEM_READY_@
	DD	04H
	DD	02H
	DD	06H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CM@IHALJHKI@FLOAT_TYPE_WEATHER_MODE_TRANSIT@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CM@OPGIJMCL@FLOAT_TYPE_WEATHER_MODE_TRANSIT@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@LLMFPMJE@FLOAT_TYPE_WEATHER_RADIUS@
	DD	04H
	DD	014H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BC@PAICJHKP@FLOAT_TYPE_WEIGHT@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@EIBPHKMA@FLOAT_TYPE_WIDTH_ADJUSTMENT@
	DD	04H
	DD	08H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@MMOJKHDJ@FLOAT_TYPE_WIND_EFFECT_RADIUS@
	DD	04H
	DD	014H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@MCLJMDKJ@FLOAT_TYPE_WIND_GUSTING_VALUE@
	DD	04H
	DD	01H
	DD	07H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@LDAGGKJI@FLOAT_TYPE_WIND_MAXIMUM_SPEED@
	DD	04H
	DD	06H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BO@KCAPBOJ@FLOAT_TYPE_WIND_MINIMUM_SPEED@
	DD	04H
	DD	06H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@GHFOCIBG@FLOAT_TYPE_MINIMUM_SOUND_RANGE@
	DD	04H
	DD	08H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0CB@NPCDFIIB@FLOAT_TYPE_REFERENCE_SOUND_RANG@
	DD	04H
	DD	08H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@EOCANFAO@FLOAT_TYPE_MAXIMUM_SOUND_RANGE@
	DD	04H
	DD	08H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BC@FPAHFDP@FLOAT_TYPE_PFZ_X1@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BC@EDCBPAI@FLOAT_TYPE_PFZ_Y1@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BC@CONNCGPM@FLOAT_TYPE_PFZ_X2@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BC@CPBPEMML@FLOAT_TYPE_PFZ_Y2@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BC@DHMGBHLN@FLOAT_TYPE_PFZ_X3@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BC@DGAEHNIK@FLOAT_TYPE_PFZ_Y3@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BC@HIIHIBHK@FLOAT_TYPE_PFZ_X4@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BC@HJEFOLEN@FLOAT_TYPE_PFZ_Y4@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?overload_invalid_float_type_message@@3PBDB DD FLAT:??_C@_0DL@FEJNFOJM@Overloaded?5entity?5function?5invo@ ; overload_invalid_float_type_message
?debug_fatal_invalid_float_type_message@@3PBDB DD FLAT:??_C@_0FJ@EDPMIPGM@Invalid?5float?5type?5?$CIentity?5type@ ; debug_fatal_invalid_float_type_message
_DATA	ENDS
PUBLIC	_fmodf
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?initialise_entity_float_value_default_functions@@YGXXZ ; initialise_entity_float_value_default_functions
PUBLIC	?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
PUBLIC	?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
PUBLIC	?pack_float_type@@YGXW4FLOAT_TYPES@@@Z		; pack_float_type
PUBLIC	?unpack_float_type@@YG?AW4FLOAT_TYPES@@XZ	; unpack_float_type
PUBLIC	?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA ; `pack_float_value'::`1'::__LINE__Var
PUBLIC	??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CI@CGJOJDLJ@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_FLOA@ ; `string'
PUBLIC	??_C@_0DD@MHFJECPL@float_type_database?$FLtype?$FN?4pack_@ ; `string'
PUBLIC	??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@ ; `string'
PUBLIC	??_C@_0N@GDHLGMCP@signed?5angle@		; `string'
PUBLIC	??_C@_0CJ@GDCPBABK@Overflow?5when?5packing?5signed?5fl@ ; `string'
PUBLIC	??_C@_0CM@FDOEOGJD@?$CB?$CCOverflow?5when?5packing?5signed?5@ ; `string'
PUBLIC	??_C@_0N@GAIGJGBN@value?5?$DO?$DN?50?40@	; `string'
PUBLIC	??_C@_0BF@PPFFLNDO@unsigned?5float?5angle@	; `string'
PUBLIC	??_C@_0CL@MHCJOPHK@Overflow?5when?5packing?5unsigned?5@ ; `string'
PUBLIC	??_C@_0CO@PODJFEOF@?$CB?$CCOverflow?5when?5packing?5unsigne@ ; `string'
PUBLIC	??_C@_0O@EBNDMGNP@?$CB?$CIi?5?$DO?$DO?5width?$CJ@ ; `string'
PUBLIC	??_C@_0BD@KPDOENEM@signed?5float?5value@	; `string'
PUBLIC	??_C@_0BF@KHCAAHDC@unsigned?5float?5value@	; `string'
PUBLIC	??_C@_0BN@LBJMEMCB@Invalid?5float?5pack?5type?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z@4JA ; `unpack_float_value'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??pack_float_type@@YGXW4FLOAT_TYPES@@@Z@4JA ; `pack_float_type'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@LJMGJPDB@?$CB?$CItype?5?$DO?$DO?5NUM_FLOAT_TYPE_PACK_B@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_float_type@@YG?AW4FLOAT_TYPES@@XZ@4JA ; `unpack_float_type'::`1'::__LINE__Var
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a000000
PUBLIC	__real@3a800000
PUBLIC	__real@3b000000
PUBLIC	__real@3b800000
PUBLIC	__real@3c000000
PUBLIC	__real@3c800000
PUBLIC	__real@3d000000
PUBLIC	__real@3d800000
PUBLIC	__real@3e000000
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40800000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41000000
PUBLIC	__real@41800000
PUBLIC	__real@42000000
PUBLIC	__real@42800000
PUBLIC	__real@43000000
PUBLIC	__real@43800000
PUBLIC	__real@44000000
PUBLIC	__real@44800000
PUBLIC	__real@45000000
PUBLIC	__real@45fa0000
PUBLIC	__real@49742400
EXTRN	_fmod:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?pack_signed_data@@YGXHH@Z:PROC			; pack_signed_data
EXTRN	?pack_unsigned_data@@YGXIH@Z:PROC		; pack_unsigned_data
EXTRN	?unpack_signed_data@@YGHH@Z:PROC		; unpack_signed_data
EXTRN	?unpack_unsigned_data@@YGIH@Z:PROC		; unpack_unsigned_data
EXTRN	?debug_log_pack_overflow@@YGXPBD0IHM@Z:PROC	; debug_log_pack_overflow
EXTRN	__fltused:DWORD
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@45fa0000
CONST	SEGMENT
__real@45fa0000 DD 045fa0000r			; 8000
CONST	ENDS
;	COMDAT __real@45000000
CONST	SEGMENT
__real@45000000 DD 045000000r			; 2048
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3d800000
CONST	SEGMENT
__real@3d800000 DD 03d800000r			; 0.0625
CONST	ENDS
;	COMDAT __real@3d000000
CONST	SEGMENT
__real@3d000000 DD 03d000000r			; 0.03125
CONST	ENDS
;	COMDAT __real@3c800000
CONST	SEGMENT
__real@3c800000 DD 03c800000r			; 0.015625
CONST	ENDS
;	COMDAT __real@3c000000
CONST	SEGMENT
__real@3c000000 DD 03c000000r			; 0.0078125
CONST	ENDS
;	COMDAT __real@3b800000
CONST	SEGMENT
__real@3b800000 DD 03b800000r			; 0.00390625
CONST	ENDS
;	COMDAT __real@3b000000
CONST	SEGMENT
__real@3b000000 DD 03b000000r			; 0.00195313
CONST	ENDS
;	COMDAT __real@3a800000
CONST	SEGMENT
__real@3a800000 DD 03a800000r			; 0.000976563
CONST	ENDS
;	COMDAT __real@3a000000
CONST	SEGMENT
__real@3a000000 DD 03a000000r			; 0.000488281
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_float_type@@YG?AW4FLOAT_TYPES@@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_float_type@@YG?AW4FLOAT_TYPES@@XZ@4JA DD 08b6H ; `unpack_float_type'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@LJMGJPDB@?$CB?$CItype?5?$DO?$DO?5NUM_FLOAT_TYPE_PACK_B@
CONST	SEGMENT
??_C@_0CE@LJMGJPDB@?$CB?$CItype?5?$DO?$DO?5NUM_FLOAT_TYPE_PACK_B@ DB '!(t'
	DB	'ype >> NUM_FLOAT_TYPE_PACK_BITS)', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_float_type@@YGXW4FLOAT_TYPES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_float_type@@YGXW4FLOAT_TYPES@@@Z@4JA DD 08a0H ; `pack_float_type'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z@4JA DD 07dcH ; `unpack_float_value'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@LBJMEMCB@Invalid?5float?5pack?5type?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BN@LBJMEMCB@Invalid?5float?5pack?5type?5?$DN?5?$CFd@ DB 'Invalid f'
	DB	'loat pack type = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KHCAAHDC@unsigned?5float?5value@
CONST	SEGMENT
??_C@_0BF@KHCAAHDC@unsigned?5float?5value@ DB 'unsigned float value', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KPDOENEM@signed?5float?5value@
CONST	SEGMENT
??_C@_0BD@KPDOENEM@signed?5float?5value@ DB 'signed float value', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EBNDMGNP@?$CB?$CIi?5?$DO?$DO?5width?$CJ@
CONST	SEGMENT
??_C@_0O@EBNDMGNP@?$CB?$CIi?5?$DO?$DO?5width?$CJ@ DB '!(i >> width)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PODJFEOF@?$CB?$CCOverflow?5when?5packing?5unsigne@
CONST	SEGMENT
??_C@_0CO@PODJFEOF@?$CB?$CCOverflow?5when?5packing?5unsigne@ DB '!"Overfl'
	DB	'ow when packing unsigned float type!"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MHCJOPHK@Overflow?5when?5packing?5unsigned?5@
CONST	SEGMENT
??_C@_0CL@MHCJOPHK@Overflow?5when?5packing?5unsigned?5@ DB 'Overflow when'
	DB	' packing unsigned float type!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PPFFLNDO@unsigned?5float?5angle@
CONST	SEGMENT
??_C@_0BF@PPFFLNDO@unsigned?5float?5angle@ DB 'unsigned float angle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GAIGJGBN@value?5?$DO?$DN?50?40@
CONST	SEGMENT
??_C@_0N@GAIGJGBN@value?5?$DO?$DN?50?40@ DB 'value >= 0.0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FDOEOGJD@?$CB?$CCOverflow?5when?5packing?5signed?5@
CONST	SEGMENT
??_C@_0CM@FDOEOGJD@?$CB?$CCOverflow?5when?5packing?5signed?5@ DB '!"Overf'
	DB	'low when packing signed float type!"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GDCPBABK@Overflow?5when?5packing?5signed?5fl@
CONST	SEGMENT
??_C@_0CJ@GDCPBABK@Overflow?5when?5packing?5signed?5fl@ DB 'Overflow when'
	DB	' packing signed float type!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GDHLGMCP@signed?5angle@
CONST	SEGMENT
??_C@_0N@GDHLGMCP@signed?5angle@ DB 'signed angle', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@
CONST	SEGMENT
??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@ DB '(float_'
	DB	'type_database[type].pack_num_fractional_bits >= 0) && (float_'
	DB	'type_database[type].pack_num_fractional_bits <= MAX_FRACTIONA'
	DB	'L_BITS)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MHFJECPL@float_type_database?$FLtype?$FN?4pack_@
CONST	SEGMENT
??_C@_0DD@MHFJECPL@float_type_database?$FLtype?$FN?4pack_@ DB 'float_type'
	DB	'_database[type].pack_num_whole_bits == 3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CGJOJDLJ@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_FLOA@
CONST	SEGMENT
??_C@_0CI@CGJOJDLJ@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_FLOA@ DB '('
	DB	'type >= 0) && (type < NUM_FLOAT_TYPES)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\system\en_funcs\en_fl'
	DB	'oat.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA DD 0648H ; `pack_float_value'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_float.c
;	COMDAT ?default_get_entity_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_value$ = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
?default_get_entity_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z PROC ; default_get_entity_float_value, COMDAT

; 1533 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1534 : 	float
; 1535 : 		value;
; 1536 : 
; 1537 : 	switch (type)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0000c	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d b8 02	 cmp	 DWORD PTR tv64[ebp], 2
  00013	74 0e		 je	 SHORT $LN4@default_ge
  00015	83 7d b8 4b	 cmp	 DWORD PTR tv64[ebp], 75	; 0000004bH
  00019	74 17		 je	 SHORT $LN5@default_ge
  0001b	83 7d b8 6a	 cmp	 DWORD PTR tv64[ebp], 106 ; 0000006aH
  0001f	74 20		 je	 SHORT $LN6@default_ge
  00021	eb 2d		 jmp	 SHORT $LN7@default_ge
$LN4@default_ge:

; 1538 : 	{
; 1539 : 		////////////////////////////////////////
; 1540 : 		case FLOAT_TYPE_AIR_RADAR_CONTACT_TIMEOUT:
; 1541 : 		////////////////////////////////////////
; 1542 : 		{
; 1543 : 			value = AIR_RADAR_CONTACT_TIMEOUT_INVALID;

  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49742400
  0002b	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0

; 1544 : 
; 1545 : 			break;

  00030	eb 26		 jmp	 SHORT $LN2@default_ge
$LN5@default_ge:

; 1546 : 		}
; 1547 : 		////////////////////////////////////////
; 1548 : 		case FLOAT_TYPE_MAX_3D_OBJECT_VISUAL_RANGE:
; 1549 : 		////////////////////////////////////////
; 1550 : 		{
; 1551 : 			value = NOMINAL_3D_OBJECT_VISUAL_RANGE;

  00032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@45fa0000
  0003a	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0

; 1552 : 
; 1553 : 			break;

  0003f	eb 17		 jmp	 SHORT $LN2@default_ge
$LN6@default_ge:

; 1554 : 		}
; 1555 : 		////////////////////////////////////////
; 1556 : 		case FLOAT_TYPE_RADAR_STEALTH_FACTOR:
; 1557 : 		////////////////////////////////////////
; 1558 : 		{
; 1559 : 			value = NO_RADAR_STEALTH_FACTOR;

  00041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00049	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0

; 1560 : 
; 1561 : 			break;

  0004e	eb 08		 jmp	 SHORT $LN2@default_ge
$LN7@default_ge:

; 1562 : 		}
; 1563 : 		////////////////////////////////////////
; 1564 : 		default:
; 1565 : 		////////////////////////////////////////
; 1566 : 		{
; 1567 : 			value = 0.0;

  00050	0f 57 c0	 xorps	 xmm0, xmm0
  00053	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
$LN2@default_ge:

; 1568 : 
; 1569 : 			break;
; 1570 : 		}
; 1571 : 	}
; 1572 : 
; 1573 : 	return (value);

  00058	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 1574 : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
?default_get_entity_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ENDP ; default_get_entity_float_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_float.c
;	COMDAT ?default_set_entity_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z
_TEXT	SEGMENT
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_value$ = 16						; size = 4
?default_set_entity_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z PROC ; default_set_entity_float_value, COMDAT

; 1525 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1526 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
?default_set_entity_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ENDP ; default_set_entity_float_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_float.c
;	COMDAT ?unpack_float_type@@YG?AW4FLOAT_TYPES@@XZ
_TEXT	SEGMENT
_type$ = -4						; size = 4
?unpack_float_type@@YG?AW4FLOAT_TYPES@@XZ PROC		; unpack_float_type, COMDAT

; 2230 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2231 : 	float_types
; 2232 : 		type;
; 2233 : 
; 2234 : 	type = (float_types) unpack_unsigned_data (NUM_FLOAT_TYPE_PACK_BITS);

  00009	6a 08		 push	 8
  0000b	e8 00 00 00 00	 call	 ?unpack_unsigned_data@@YGIH@Z ; unpack_unsigned_data
  00010	89 45 fc	 mov	 DWORD PTR _type$[ebp], eax

; 2235 : 
; 2236 : 	ASSERT ((type >= 0) && (type < NUM_FLOAT_TYPES));

  00013	83 7d fc 00	 cmp	 DWORD PTR _type$[ebp], 0
  00017	7c 09		 jl	 SHORT $LN3@unpack_flo
  00019	81 7d fc af 00
	00 00		 cmp	 DWORD PTR _type$[ebp], 175 ; 000000afH
  00020	7c 18		 jl	 SHORT $LN2@unpack_flo
$LN3@unpack_flo:
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_float_type@@YG?AW4FLOAT_TYPES@@XZ@4JA
  00027	83 c0 06	 add	 eax, 6
  0002a	50		 push	 eax
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CGJOJDLJ@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_FLOA@
  00035	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@unpack_flo:

; 2237 : 
; 2238 : 	#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 2239 : 
; 2240 : 	if (float_type_database[type].debug_pack)
; 2241 : 	{
; 2242 : 		debug_log_entity_args (ENTITY_DEBUG_UNPACK, ENTITY_DEBUG_FLOAT_TYPE, NULL, type);
; 2243 : 	}
; 2244 : 
; 2245 : 	#endif
; 2246 : 
; 2247 : 	return (type);

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _type$[ebp]

; 2248 : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?unpack_float_type@@YG?AW4FLOAT_TYPES@@XZ ENDP		; unpack_float_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_float.c
;	COMDAT ?pack_float_type@@YGXW4FLOAT_TYPES@@@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
?pack_float_type@@YGXW4FLOAT_TYPES@@@Z PROC		; pack_float_type, COMDAT

; 2208 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2209 : 	ASSERT ((type >= 0) && (type < NUM_FLOAT_TYPES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _type$[ebp], 0
  0000d	7c 09		 jl	 SHORT $LN3@pack_float
  0000f	81 7d 08 af 00
	00 00		 cmp	 DWORD PTR _type$[ebp], 175 ; 000000afH
  00016	7c 18		 jl	 SHORT $LN2@pack_float
$LN3@pack_float:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_type@@YGXW4FLOAT_TYPES@@@Z@4JA
  0001d	83 c0 01	 add	 eax, 1
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CGJOJDLJ@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_FLOA@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@pack_float:

; 2210 : 
; 2211 : 	#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 2212 : 
; 2213 : 	if (float_type_database[type].debug_pack)
; 2214 : 	{
; 2215 : 		debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_FLOAT_TYPE, NULL, type);
; 2216 : 	}
; 2217 : 
; 2218 : 	#endif
; 2219 : 
; 2220 : 	ASSERT(!(type >> NUM_FLOAT_TYPE_PACK_BITS));

  00030	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00033	c1 f8 08	 sar	 eax, 8
  00036	85 c0		 test	 eax, eax
  00038	74 18		 je	 SHORT $LN4@pack_float
  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_type@@YGXW4FLOAT_TYPES@@@Z@4JA
  0003f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LJMGJPDB@?$CB?$CItype?5?$DO?$DO?5NUM_FLOAT_TYPE_PACK_B@
  0004d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@pack_float:

; 2221 : 
; 2222 : 	pack_unsigned_data (type, NUM_FLOAT_TYPE_PACK_BITS);

  00052	6a 08		 push	 8
  00054	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?pack_unsigned_data@@YGXIH@Z ; pack_unsigned_data

; 2223 : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?pack_float_type@@YGXW4FLOAT_TYPES@@@Z ENDP		; pack_float_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_float.c
;	COMDAT ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z
_TEXT	SEGMENT
tv297 = -108						; size = 4
tv248 = -108						; size = 4
tv198 = -108						; size = 4
tv141 = -108						; size = 4
tv73 = -108						; size = 4
_width$1 = -40						; size = 4
_i$2 = -36						; size = 4
_width$3 = -32						; size = 4
_i$4 = -28						; size = 4
_width$5 = -24						; size = 4
_i$6 = -20						; size = 4
_width$7 = -16						; size = 4
_i$8 = -12						; size = 4
_i$9 = -8						; size = 4
_value$ = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z PROC ; unpack_float_value, COMDAT

; 2012 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2013 : 	float
; 2014 : 		value;
; 2015 : 
; 2016 : 	ASSERT ((type >= 0) && (type < NUM_FLOAT_TYPES));

  00009	83 7d 0c 00	 cmp	 DWORD PTR _type$[ebp], 0
  0000d	7c 09		 jl	 SHORT $LN13@unpack_flo
  0000f	81 7d 0c af 00
	00 00		 cmp	 DWORD PTR _type$[ebp], 175 ; 000000afH
  00016	7c 18		 jl	 SHORT $LN12@unpack_flo
$LN13@unpack_flo:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z@4JA
  0001d	83 c0 04	 add	 eax, 4
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CGJOJDLJ@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_FLOA@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@unpack_flo:

; 2017 : 
; 2018 : 	switch (float_type_database[type].pack_type)

  00030	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00034	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+4]
  0003a	89 4d 94	 mov	 DWORD PTR tv73[ebp], ecx
  0003d	83 7d 94 04	 cmp	 DWORD PTR tv73[ebp], 4
  00041	0f 87 32 06 00
	00		 ja	 $LN77@unpack_flo
  00047	8b 55 94	 mov	 edx, DWORD PTR tv73[ebp]
  0004a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN79@unpack_flo[edx*4]
$LN14@unpack_flo:

; 2019 : 	{
; 2020 : 		////////////////////////////////////////
; 2021 : 		case FLOAT_PACK_TYPE_UNPACKED:
; 2022 : 		////////////////////////////////////////
; 2023 : 		{
; 2024 : 			int
; 2025 : 				i;
; 2026 : 
; 2027 : 			i = unpack_unsigned_data (32);

  00051	6a 20		 push	 32			; 00000020H
  00053	e8 00 00 00 00	 call	 ?unpack_unsigned_data@@YGIH@Z ; unpack_unsigned_data
  00058	89 45 f8	 mov	 DWORD PTR _i$9[ebp], eax

; 2028 : 
; 2029 : 			value = *(float *)&i;

  0005b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _i$9[ebp]
  00060	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0

; 2030 : 
; 2031 : 			break;

  00065	e9 27 06 00 00	 jmp	 $LN2@unpack_flo
$LN15@unpack_flo:

; 2032 : 		}
; 2033 : 		////////////////////////////////////////
; 2034 : 		case FLOAT_PACK_TYPE_SIGNED_ANGLE:
; 2035 : 		////////////////////////////////////////
; 2036 : 		{
; 2037 : 			int
; 2038 : 				i,
; 2039 : 				width;
; 2040 : 
; 2041 : 			ASSERT (float_type_database[type].pack_num_whole_bits == 3);

  0006a	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  0006e	83 b8 08 00 00
	00 03		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8], 3
  00075	74 18		 je	 SHORT $LN16@unpack_flo
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z@4JA
  0007c	83 c0 1d	 add	 eax, 29			; 0000001dH
  0007f	50		 push	 eax
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@MHFJECPL@float_type_database?$FLtype?$FN?4pack_@
  0008a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN16@unpack_flo:

; 2042 : 
; 2043 : 			ASSERT

  0008f	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00093	83 b8 0c 00 00
	00 00		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 0
  0009a	7c 0d		 jl	 SHORT $LN18@unpack_flo
  0009c	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  000a0	83 b8 0c 00 00
	00 0b		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 11 ; 0000000bH
  000a7	7e 18		 jle	 SHORT $LN17@unpack_flo
$LN18@unpack_flo:
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z@4JA
  000ae	83 c0 23	 add	 eax, 35			; 00000023H
  000b1	50		 push	 eax
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@
  000bc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN17@unpack_flo:

; 2044 : 			(
; 2045 : 				(float_type_database[type].pack_num_fractional_bits >= 0) &&
; 2046 : 				(float_type_database[type].pack_num_fractional_bits <= MAX_FRACTIONAL_BITS)
; 2047 : 			);
; 2048 : 
; 2049 : 			width = float_type_database[type].pack_num_whole_bits + float_type_database[type].pack_num_fractional_bits;

  000c1	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  000c5	6b 4d 0c 18	 imul	 ecx, DWORD PTR _type$[ebp], 24
  000c9	8b 90 08 00 00
	00		 mov	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8]
  000cf	03 91 0c 00 00
	00		 add	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[ecx+12]
  000d5	89 55 f0	 mov	 DWORD PTR _width$7[ebp], edx

; 2050 : 
; 2051 : 			i = unpack_signed_data (width + 1);

  000d8	8b 45 f0	 mov	 eax, DWORD PTR _width$7[ebp]
  000db	83 c0 01	 add	 eax, 1
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  000e4	89 45 f4	 mov	 DWORD PTR _i$8[ebp], eax

; 2052 : 
; 2053 : 			switch (float_type_database[type].pack_num_fractional_bits)

  000e7	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  000eb	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12]
  000f1	89 4d 94	 mov	 DWORD PTR tv141[ebp], ecx
  000f4	83 7d 94 0b	 cmp	 DWORD PTR tv141[ebp], 11 ; 0000000bH
  000f8	0f 87 ff 00 00
	00		 ja	 $LN4@unpack_flo
  000fe	8b 55 94	 mov	 edx, DWORD PTR tv141[ebp]
  00101	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN80@unpack_flo[edx*4]
$LN19@unpack_flo:

; 2054 : 			{
; 2055 : 				case 0: value = unpack_float_0_fractional_bits (i); break;

  00108	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  0010d	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00112	e9 e6 00 00 00	 jmp	 $LN4@unpack_flo
$LN20@unpack_flo:

; 2056 : 				case 1: value = unpack_float_1_fractional_bits (i); break;

  00117	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  0011c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00124	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00129	e9 cf 00 00 00	 jmp	 $LN4@unpack_flo
$LN21@unpack_flo:

; 2057 : 				case 2: value = unpack_float_2_fractional_bits (i); break;

  0012e	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  00133	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  0013b	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00140	e9 b8 00 00 00	 jmp	 $LN4@unpack_flo
$LN22@unpack_flo:

; 2058 : 				case 3: value = unpack_float_3_fractional_bits (i); break;

  00145	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  0014a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e000000
  00152	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00157	e9 a1 00 00 00	 jmp	 $LN4@unpack_flo
$LN23@unpack_flo:

; 2059 : 				case 4: value = unpack_float_4_fractional_bits (i); break;

  0015c	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  00161	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d800000
  00169	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0016e	e9 8a 00 00 00	 jmp	 $LN4@unpack_flo
$LN24@unpack_flo:

; 2060 : 				case 5: value = unpack_float_5_fractional_bits (i); break;

  00173	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  00178	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d000000
  00180	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00185	eb 76		 jmp	 SHORT $LN4@unpack_flo
$LN25@unpack_flo:

; 2061 : 				case 6: value = unpack_float_6_fractional_bits (i); break;

  00187	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  0018c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  00194	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00199	eb 62		 jmp	 SHORT $LN4@unpack_flo
$LN26@unpack_flo:

; 2062 : 				case 7: value = unpack_float_7_fractional_bits (i); break;

  0019b	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  001a0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c000000
  001a8	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  001ad	eb 4e		 jmp	 SHORT $LN4@unpack_flo
$LN27@unpack_flo:

; 2063 : 				case 8: value = unpack_float_8_fractional_bits (i); break;

  001af	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  001b4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3b800000
  001bc	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  001c1	eb 3a		 jmp	 SHORT $LN4@unpack_flo
$LN28@unpack_flo:

; 2064 : 				case 9: value = unpack_float_9_fractional_bits (i); break;

  001c3	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  001c8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3b000000
  001d0	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  001d5	eb 26		 jmp	 SHORT $LN4@unpack_flo
$LN29@unpack_flo:

; 2065 : 				case 10: value = unpack_float_10_fractional_bits (i); break;

  001d7	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  001dc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a800000
  001e4	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  001e9	eb 12		 jmp	 SHORT $LN4@unpack_flo
$LN30@unpack_flo:

; 2066 : 				case 11: value = unpack_float_11_fractional_bits (i); break;

  001eb	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _i$8[ebp]
  001f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a000000
  001f8	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
$LN4@unpack_flo:

; 2067 : 			}
; 2068 : 
; 2069 : 			break;

  001fd	e9 8f 04 00 00	 jmp	 $LN2@unpack_flo
$LN31@unpack_flo:

; 2070 : 		}
; 2071 : 		////////////////////////////////////////
; 2072 : 		case FLOAT_PACK_TYPE_UNSIGNED_ANGLE:
; 2073 : 		////////////////////////////////////////
; 2074 : 		{
; 2075 : 			int
; 2076 : 				i,
; 2077 : 				width;
; 2078 : 
; 2079 : 			ASSERT (float_type_database[type].pack_num_whole_bits == 3);

  00202	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00206	83 b8 08 00 00
	00 03		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8], 3
  0020d	74 18		 je	 SHORT $LN32@unpack_flo
  0020f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z@4JA
  00214	83 c0 43	 add	 eax, 67			; 00000043H
  00217	50		 push	 eax
  00218	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@MHFJECPL@float_type_database?$FLtype?$FN?4pack_@
  00222	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN32@unpack_flo:

; 2080 : 
; 2081 : 			ASSERT

  00227	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  0022b	83 b8 0c 00 00
	00 00		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 0
  00232	7c 0d		 jl	 SHORT $LN34@unpack_flo
  00234	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00238	83 b8 0c 00 00
	00 0b		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 11 ; 0000000bH
  0023f	7e 18		 jle	 SHORT $LN33@unpack_flo
$LN34@unpack_flo:
  00241	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z@4JA
  00246	83 c0 49	 add	 eax, 73			; 00000049H
  00249	50		 push	 eax
  0024a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@
  00254	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN33@unpack_flo:

; 2082 : 			(
; 2083 : 				(float_type_database[type].pack_num_fractional_bits >= 0) &&
; 2084 : 				(float_type_database[type].pack_num_fractional_bits <= MAX_FRACTIONAL_BITS)
; 2085 : 			);
; 2086 : 
; 2087 : 			width = float_type_database[type].pack_num_whole_bits + float_type_database[type].pack_num_fractional_bits;

  00259	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  0025d	6b 4d 0c 18	 imul	 ecx, DWORD PTR _type$[ebp], 24
  00261	8b 90 08 00 00
	00		 mov	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8]
  00267	03 91 0c 00 00
	00		 add	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[ecx+12]
  0026d	89 55 e8	 mov	 DWORD PTR _width$5[ebp], edx

; 2088 : 
; 2089 : 			i = unpack_unsigned_data (width);

  00270	8b 45 e8	 mov	 eax, DWORD PTR _width$5[ebp]
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 ?unpack_unsigned_data@@YGIH@Z ; unpack_unsigned_data
  00279	89 45 ec	 mov	 DWORD PTR _i$6[ebp], eax

; 2090 : 
; 2091 : 			switch (float_type_database[type].pack_num_fractional_bits)

  0027c	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00280	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12]
  00286	89 4d 94	 mov	 DWORD PTR tv198[ebp], ecx
  00289	83 7d 94 0b	 cmp	 DWORD PTR tv198[ebp], 11 ; 0000000bH
  0028d	0f 87 ff 00 00
	00		 ja	 $LN6@unpack_flo
  00293	8b 55 94	 mov	 edx, DWORD PTR tv198[ebp]
  00296	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN81@unpack_flo[edx*4]
$LN35@unpack_flo:

; 2092 : 			{
; 2093 : 				case 0: value = unpack_float_0_fractional_bits (i); break;

  0029d	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  002a2	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  002a7	e9 e6 00 00 00	 jmp	 $LN6@unpack_flo
$LN36@unpack_flo:

; 2094 : 				case 1: value = unpack_float_1_fractional_bits (i); break;

  002ac	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  002b1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  002b9	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  002be	e9 cf 00 00 00	 jmp	 $LN6@unpack_flo
$LN37@unpack_flo:

; 2095 : 				case 2: value = unpack_float_2_fractional_bits (i); break;

  002c3	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  002c8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  002d0	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  002d5	e9 b8 00 00 00	 jmp	 $LN6@unpack_flo
$LN38@unpack_flo:

; 2096 : 				case 3: value = unpack_float_3_fractional_bits (i); break;

  002da	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  002df	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e000000
  002e7	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  002ec	e9 a1 00 00 00	 jmp	 $LN6@unpack_flo
$LN39@unpack_flo:

; 2097 : 				case 4: value = unpack_float_4_fractional_bits (i); break;

  002f1	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  002f6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d800000
  002fe	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00303	e9 8a 00 00 00	 jmp	 $LN6@unpack_flo
$LN40@unpack_flo:

; 2098 : 				case 5: value = unpack_float_5_fractional_bits (i); break;

  00308	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  0030d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d000000
  00315	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0031a	eb 76		 jmp	 SHORT $LN6@unpack_flo
$LN41@unpack_flo:

; 2099 : 				case 6: value = unpack_float_6_fractional_bits (i); break;

  0031c	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  00321	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  00329	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0032e	eb 62		 jmp	 SHORT $LN6@unpack_flo
$LN42@unpack_flo:

; 2100 : 				case 7: value = unpack_float_7_fractional_bits (i); break;

  00330	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  00335	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c000000
  0033d	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00342	eb 4e		 jmp	 SHORT $LN6@unpack_flo
$LN43@unpack_flo:

; 2101 : 				case 8: value = unpack_float_8_fractional_bits (i); break;

  00344	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  00349	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3b800000
  00351	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00356	eb 3a		 jmp	 SHORT $LN6@unpack_flo
$LN44@unpack_flo:

; 2102 : 				case 9: value = unpack_float_9_fractional_bits (i); break;

  00358	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  0035d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3b000000
  00365	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0036a	eb 26		 jmp	 SHORT $LN6@unpack_flo
$LN45@unpack_flo:

; 2103 : 				case 10: value = unpack_float_10_fractional_bits (i); break;

  0036c	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  00371	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a800000
  00379	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0037e	eb 12		 jmp	 SHORT $LN6@unpack_flo
$LN46@unpack_flo:

; 2104 : 				case 11: value = unpack_float_11_fractional_bits (i); break;

  00380	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  00385	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a000000
  0038d	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
$LN6@unpack_flo:

; 2105 : 			}
; 2106 : 
; 2107 : 			break;

  00392	e9 fa 02 00 00	 jmp	 $LN2@unpack_flo
$LN47@unpack_flo:

; 2108 : 		}
; 2109 : 		////////////////////////////////////////
; 2110 : 		case FLOAT_PACK_TYPE_SIGNED_VALUE:
; 2111 : 		////////////////////////////////////////
; 2112 : 		{
; 2113 : 			int
; 2114 : 				i,
; 2115 : 				width;
; 2116 : 
; 2117 : 			ASSERT

  00397	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  0039b	83 b8 0c 00 00
	00 00		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 0
  003a2	7c 0d		 jl	 SHORT $LN49@unpack_flo
  003a4	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  003a8	83 b8 0c 00 00
	00 0b		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 11 ; 0000000bH
  003af	7e 18		 jle	 SHORT $LN48@unpack_flo
$LN49@unpack_flo:
  003b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z@4JA
  003b6	83 c0 6d	 add	 eax, 109		; 0000006dH
  003b9	50		 push	 eax
  003ba	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  003bf	68 00 00 00 00	 push	 OFFSET ??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@
  003c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN48@unpack_flo:

; 2118 : 			(
; 2119 : 				(float_type_database[type].pack_num_fractional_bits >= 0) &&
; 2120 : 				(float_type_database[type].pack_num_fractional_bits <= MAX_FRACTIONAL_BITS)
; 2121 : 			);
; 2122 : 
; 2123 : 			width = float_type_database[type].pack_num_whole_bits + float_type_database[type].pack_num_fractional_bits;

  003c9	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  003cd	6b 4d 0c 18	 imul	 ecx, DWORD PTR _type$[ebp], 24
  003d1	8b 90 08 00 00
	00		 mov	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8]
  003d7	03 91 0c 00 00
	00		 add	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[ecx+12]
  003dd	89 55 e0	 mov	 DWORD PTR _width$3[ebp], edx

; 2124 : 
; 2125 : 			i = unpack_signed_data (width + 1);

  003e0	8b 45 e0	 mov	 eax, DWORD PTR _width$3[ebp]
  003e3	83 c0 01	 add	 eax, 1
  003e6	50		 push	 eax
  003e7	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  003ec	89 45 e4	 mov	 DWORD PTR _i$4[ebp], eax

; 2126 : 
; 2127 : 			switch (float_type_database[type].pack_num_fractional_bits)

  003ef	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  003f3	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12]
  003f9	89 4d 94	 mov	 DWORD PTR tv248[ebp], ecx
  003fc	83 7d 94 0b	 cmp	 DWORD PTR tv248[ebp], 11 ; 0000000bH
  00400	0f 87 ff 00 00
	00		 ja	 $LN8@unpack_flo
  00406	8b 55 94	 mov	 edx, DWORD PTR tv248[ebp]
  00409	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN82@unpack_flo[edx*4]
$LN50@unpack_flo:

; 2128 : 			{
; 2129 : 				case 0: value = unpack_float_0_fractional_bits (i); break;

  00410	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  00415	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0041a	e9 e6 00 00 00	 jmp	 $LN8@unpack_flo
$LN51@unpack_flo:

; 2130 : 				case 1: value = unpack_float_1_fractional_bits (i); break;

  0041f	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  00424	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0042c	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00431	e9 cf 00 00 00	 jmp	 $LN8@unpack_flo
$LN52@unpack_flo:

; 2131 : 				case 2: value = unpack_float_2_fractional_bits (i); break;

  00436	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  0043b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00443	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00448	e9 b8 00 00 00	 jmp	 $LN8@unpack_flo
$LN53@unpack_flo:

; 2132 : 				case 3: value = unpack_float_3_fractional_bits (i); break;

  0044d	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  00452	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e000000
  0045a	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0045f	e9 a1 00 00 00	 jmp	 $LN8@unpack_flo
$LN54@unpack_flo:

; 2133 : 				case 4: value = unpack_float_4_fractional_bits (i); break;

  00464	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  00469	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d800000
  00471	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00476	e9 8a 00 00 00	 jmp	 $LN8@unpack_flo
$LN55@unpack_flo:

; 2134 : 				case 5: value = unpack_float_5_fractional_bits (i); break;

  0047b	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  00480	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d000000
  00488	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0048d	eb 76		 jmp	 SHORT $LN8@unpack_flo
$LN56@unpack_flo:

; 2135 : 				case 6: value = unpack_float_6_fractional_bits (i); break;

  0048f	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  00494	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  0049c	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  004a1	eb 62		 jmp	 SHORT $LN8@unpack_flo
$LN57@unpack_flo:

; 2136 : 				case 7: value = unpack_float_7_fractional_bits (i); break;

  004a3	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  004a8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c000000
  004b0	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  004b5	eb 4e		 jmp	 SHORT $LN8@unpack_flo
$LN58@unpack_flo:

; 2137 : 				case 8: value = unpack_float_8_fractional_bits (i); break;

  004b7	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  004bc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3b800000
  004c4	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  004c9	eb 3a		 jmp	 SHORT $LN8@unpack_flo
$LN59@unpack_flo:

; 2138 : 				case 9: value = unpack_float_9_fractional_bits (i); break;

  004cb	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  004d0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3b000000
  004d8	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  004dd	eb 26		 jmp	 SHORT $LN8@unpack_flo
$LN60@unpack_flo:

; 2139 : 				case 10: value = unpack_float_10_fractional_bits (i); break;

  004df	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  004e4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a800000
  004ec	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  004f1	eb 12		 jmp	 SHORT $LN8@unpack_flo
$LN61@unpack_flo:

; 2140 : 				case 11: value = unpack_float_11_fractional_bits (i); break;

  004f3	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
  004f8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a000000
  00500	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
$LN8@unpack_flo:

; 2141 : 			}
; 2142 : 
; 2143 : 			break;

  00505	e9 87 01 00 00	 jmp	 $LN2@unpack_flo
$LN62@unpack_flo:

; 2144 : 		}
; 2145 : 		////////////////////////////////////////
; 2146 : 		case FLOAT_PACK_TYPE_UNSIGNED_VALUE:
; 2147 : 		////////////////////////////////////////
; 2148 : 		{
; 2149 : 			int
; 2150 : 				i,
; 2151 : 				width;
; 2152 : 
; 2153 : 			ASSERT

  0050a	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  0050e	83 b8 0c 00 00
	00 00		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 0
  00515	7c 0d		 jl	 SHORT $LN64@unpack_flo
  00517	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  0051b	83 b8 0c 00 00
	00 0b		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 11 ; 0000000bH
  00522	7e 1a		 jle	 SHORT $LN63@unpack_flo
$LN64@unpack_flo:
  00524	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z@4JA
  00529	05 91 00 00 00	 add	 eax, 145		; 00000091H
  0052e	50		 push	 eax
  0052f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00534	68 00 00 00 00	 push	 OFFSET ??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@
  00539	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN63@unpack_flo:

; 2154 : 			(
; 2155 : 				(float_type_database[type].pack_num_fractional_bits >= 0) &&
; 2156 : 				(float_type_database[type].pack_num_fractional_bits <= MAX_FRACTIONAL_BITS)
; 2157 : 			);
; 2158 : 
; 2159 : 			width = float_type_database[type].pack_num_whole_bits + float_type_database[type].pack_num_fractional_bits;

  0053e	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00542	6b 4d 0c 18	 imul	 ecx, DWORD PTR _type$[ebp], 24
  00546	8b 90 08 00 00
	00		 mov	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8]
  0054c	03 91 0c 00 00
	00		 add	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[ecx+12]
  00552	89 55 d8	 mov	 DWORD PTR _width$1[ebp], edx

; 2160 : 
; 2161 : 			i = unpack_unsigned_data (width);

  00555	8b 45 d8	 mov	 eax, DWORD PTR _width$1[ebp]
  00558	50		 push	 eax
  00559	e8 00 00 00 00	 call	 ?unpack_unsigned_data@@YGIH@Z ; unpack_unsigned_data
  0055e	89 45 dc	 mov	 DWORD PTR _i$2[ebp], eax

; 2162 : 
; 2163 : 			switch (float_type_database[type].pack_num_fractional_bits)

  00561	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00565	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12]
  0056b	89 4d 94	 mov	 DWORD PTR tv297[ebp], ecx
  0056e	83 7d 94 0b	 cmp	 DWORD PTR tv297[ebp], 11 ; 0000000bH
  00572	0f 87 ff 00 00
	00		 ja	 $LN10@unpack_flo
  00578	8b 55 94	 mov	 edx, DWORD PTR tv297[ebp]
  0057b	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN83@unpack_flo[edx*4]
$LN65@unpack_flo:

; 2164 : 			{
; 2165 : 				case 0: value = unpack_float_0_fractional_bits (i); break;

  00582	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  00587	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0058c	e9 e6 00 00 00	 jmp	 $LN10@unpack_flo
$LN66@unpack_flo:

; 2166 : 				case 1: value = unpack_float_1_fractional_bits (i); break;

  00591	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  00596	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0059e	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  005a3	e9 cf 00 00 00	 jmp	 $LN10@unpack_flo
$LN67@unpack_flo:

; 2167 : 				case 2: value = unpack_float_2_fractional_bits (i); break;

  005a8	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  005ad	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  005b5	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  005ba	e9 b8 00 00 00	 jmp	 $LN10@unpack_flo
$LN68@unpack_flo:

; 2168 : 				case 3: value = unpack_float_3_fractional_bits (i); break;

  005bf	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  005c4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e000000
  005cc	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  005d1	e9 a1 00 00 00	 jmp	 $LN10@unpack_flo
$LN69@unpack_flo:

; 2169 : 				case 4: value = unpack_float_4_fractional_bits (i); break;

  005d6	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  005db	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d800000
  005e3	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  005e8	e9 8a 00 00 00	 jmp	 $LN10@unpack_flo
$LN70@unpack_flo:

; 2170 : 				case 5: value = unpack_float_5_fractional_bits (i); break;

  005ed	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  005f2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d000000
  005fa	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  005ff	eb 76		 jmp	 SHORT $LN10@unpack_flo
$LN71@unpack_flo:

; 2171 : 				case 6: value = unpack_float_6_fractional_bits (i); break;

  00601	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  00606	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  0060e	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00613	eb 62		 jmp	 SHORT $LN10@unpack_flo
$LN72@unpack_flo:

; 2172 : 				case 7: value = unpack_float_7_fractional_bits (i); break;

  00615	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  0061a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c000000
  00622	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00627	eb 4e		 jmp	 SHORT $LN10@unpack_flo
$LN73@unpack_flo:

; 2173 : 				case 8: value = unpack_float_8_fractional_bits (i); break;

  00629	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  0062e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3b800000
  00636	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0063b	eb 3a		 jmp	 SHORT $LN10@unpack_flo
$LN74@unpack_flo:

; 2174 : 				case 9: value = unpack_float_9_fractional_bits (i); break;

  0063d	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  00642	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3b000000
  0064a	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  0064f	eb 26		 jmp	 SHORT $LN10@unpack_flo
$LN75@unpack_flo:

; 2175 : 				case 10: value = unpack_float_10_fractional_bits (i); break;

  00651	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  00656	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a800000
  0065e	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00663	eb 12		 jmp	 SHORT $LN10@unpack_flo
$LN76@unpack_flo:

; 2176 : 				case 11: value = unpack_float_11_fractional_bits (i); break;

  00665	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _i$2[ebp]
  0066a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a000000
  00672	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
$LN10@unpack_flo:

; 2177 : 			}
; 2178 : 
; 2179 : 			break;

  00677	eb 18		 jmp	 SHORT $LN2@unpack_flo
$LN77@unpack_flo:

; 2180 : 		}
; 2181 : 		////////////////////////////////////////
; 2182 : 		default:
; 2183 : 		////////////////////////////////////////
; 2184 : 		{
; 2185 : 			debug_fatal ("Invalid float pack type = %d", float_type_database[type].pack_type);

  00679	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  0067d	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+4]
  00683	51		 push	 ecx
  00684	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@LBJMEMCB@Invalid?5float?5pack?5type?5?$DN?5?$CFd@
  00689	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0068e	83 c4 08	 add	 esp, 8
$LN2@unpack_flo:

; 2186 : 
; 2187 : 			break;
; 2188 : 		}
; 2189 : 	}
; 2190 : 
; 2191 : 	#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 2192 : 
; 2193 : 	if (float_type_database[type].debug_pack)
; 2194 : 	{
; 2195 : 		debug_log_entity_args (ENTITY_DEBUG_UNPACK, ENTITY_DEBUG_FLOAT_VALUE, en, type, value);
; 2196 : 	}
; 2197 : 
; 2198 : 	#endif
; 2199 : 
; 2200 : 	return (value);

  00691	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 2201 : }

  00694	5f		 pop	 edi
  00695	5e		 pop	 esi
  00696	5b		 pop	 ebx
  00697	8b e5		 mov	 esp, ebp
  00699	5d		 pop	 ebp
  0069a	c2 08 00	 ret	 8
  0069d	0f 1f 00	 npad	 3
$LN79@unpack_flo:
  006a0	00 00 00 00	 DD	 $LN14@unpack_flo
  006a4	00 00 00 00	 DD	 $LN15@unpack_flo
  006a8	00 00 00 00	 DD	 $LN31@unpack_flo
  006ac	00 00 00 00	 DD	 $LN47@unpack_flo
  006b0	00 00 00 00	 DD	 $LN62@unpack_flo
$LN80@unpack_flo:
  006b4	00 00 00 00	 DD	 $LN19@unpack_flo
  006b8	00 00 00 00	 DD	 $LN20@unpack_flo
  006bc	00 00 00 00	 DD	 $LN21@unpack_flo
  006c0	00 00 00 00	 DD	 $LN22@unpack_flo
  006c4	00 00 00 00	 DD	 $LN23@unpack_flo
  006c8	00 00 00 00	 DD	 $LN24@unpack_flo
  006cc	00 00 00 00	 DD	 $LN25@unpack_flo
  006d0	00 00 00 00	 DD	 $LN26@unpack_flo
  006d4	00 00 00 00	 DD	 $LN27@unpack_flo
  006d8	00 00 00 00	 DD	 $LN28@unpack_flo
  006dc	00 00 00 00	 DD	 $LN29@unpack_flo
  006e0	00 00 00 00	 DD	 $LN30@unpack_flo
$LN81@unpack_flo:
  006e4	00 00 00 00	 DD	 $LN35@unpack_flo
  006e8	00 00 00 00	 DD	 $LN36@unpack_flo
  006ec	00 00 00 00	 DD	 $LN37@unpack_flo
  006f0	00 00 00 00	 DD	 $LN38@unpack_flo
  006f4	00 00 00 00	 DD	 $LN39@unpack_flo
  006f8	00 00 00 00	 DD	 $LN40@unpack_flo
  006fc	00 00 00 00	 DD	 $LN41@unpack_flo
  00700	00 00 00 00	 DD	 $LN42@unpack_flo
  00704	00 00 00 00	 DD	 $LN43@unpack_flo
  00708	00 00 00 00	 DD	 $LN44@unpack_flo
  0070c	00 00 00 00	 DD	 $LN45@unpack_flo
  00710	00 00 00 00	 DD	 $LN46@unpack_flo
$LN82@unpack_flo:
  00714	00 00 00 00	 DD	 $LN50@unpack_flo
  00718	00 00 00 00	 DD	 $LN51@unpack_flo
  0071c	00 00 00 00	 DD	 $LN52@unpack_flo
  00720	00 00 00 00	 DD	 $LN53@unpack_flo
  00724	00 00 00 00	 DD	 $LN54@unpack_flo
  00728	00 00 00 00	 DD	 $LN55@unpack_flo
  0072c	00 00 00 00	 DD	 $LN56@unpack_flo
  00730	00 00 00 00	 DD	 $LN57@unpack_flo
  00734	00 00 00 00	 DD	 $LN58@unpack_flo
  00738	00 00 00 00	 DD	 $LN59@unpack_flo
  0073c	00 00 00 00	 DD	 $LN60@unpack_flo
  00740	00 00 00 00	 DD	 $LN61@unpack_flo
$LN83@unpack_flo:
  00744	00 00 00 00	 DD	 $LN65@unpack_flo
  00748	00 00 00 00	 DD	 $LN66@unpack_flo
  0074c	00 00 00 00	 DD	 $LN67@unpack_flo
  00750	00 00 00 00	 DD	 $LN68@unpack_flo
  00754	00 00 00 00	 DD	 $LN69@unpack_flo
  00758	00 00 00 00	 DD	 $LN70@unpack_flo
  0075c	00 00 00 00	 DD	 $LN71@unpack_flo
  00760	00 00 00 00	 DD	 $LN72@unpack_flo
  00764	00 00 00 00	 DD	 $LN73@unpack_flo
  00768	00 00 00 00	 DD	 $LN74@unpack_flo
  0076c	00 00 00 00	 DD	 $LN75@unpack_flo
  00770	00 00 00 00	 DD	 $LN76@unpack_flo
?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ENDP ; unpack_float_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_float.c
;	COMDAT ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z
_TEXT	SEGMENT
tv857 = -132						; size = 4
tv847 = -132						; size = 4
tv837 = -132						; size = 4
tv827 = -132						; size = 4
tv817 = -132						; size = 4
tv807 = -132						; size = 4
tv797 = -132						; size = 4
tv787 = -132						; size = 4
tv777 = -132						; size = 4
tv767 = -132						; size = 4
tv757 = -132						; size = 4
tv747 = -132						; size = 4
tv713 = -132						; size = 4
tv703 = -132						; size = 4
tv693 = -132						; size = 4
tv683 = -132						; size = 4
tv673 = -132						; size = 4
tv663 = -132						; size = 4
tv653 = -132						; size = 4
tv643 = -132						; size = 4
tv633 = -132						; size = 4
tv623 = -132						; size = 4
tv613 = -132						; size = 4
tv603 = -132						; size = 4
tv479 = -132						; size = 4
tv389 = -132						; size = 4
tv266 = -132						; size = 4
tv131 = -132						; size = 4
tv73 = -132						; size = 4
_min_val$1 = -64					; size = 4
_max_val$2 = -60					; size = 4
_width$3 = -56						; size = 4
_i$4 = -52						; size = 4
_min_val$5 = -48					; size = 4
_max_val$6 = -44					; size = 4
_width$7 = -40						; size = 4
_i$8 = -36						; size = 4
_min_val$9 = -32					; size = 4
_max_val$10 = -28					; size = 4
_width$11 = -24						; size = 4
_i$12 = -20						; size = 4
_min_val$13 = -16					; size = 4
_max_val$14 = -12					; size = 4
_width$15 = -8						; size = 4
_i$16 = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_value$ = 16						; size = 4
?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z PROC ; pack_float_value, COMDAT

; 1608 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1609 : 	ASSERT ((type >= 0) && (type < NUM_FLOAT_TYPES));

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _type$[ebp], 0
  00010	7c 09		 jl	 SHORT $LN13@pack_float
  00012	81 7d 0c af 00
	00 00		 cmp	 DWORD PTR _type$[ebp], 175 ; 000000afH
  00019	7c 18		 jl	 SHORT $LN12@pack_float
$LN13@pack_float:
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  00020	83 c0 01	 add	 eax, 1
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CGJOJDLJ@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_FLOA@
  0002e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@pack_float:

; 1610 : 
; 1611 : 	switch (float_type_database[type].pack_type)

  00033	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00037	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+4]
  0003d	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00043	83 bd 7c ff ff
	ff 04		 cmp	 DWORD PTR tv73[ebp], 4
  0004a	0f 87 e4 0e 00
	00		 ja	 $LN101@pack_float
  00050	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00056	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN103@pack_float[edx*4]
$LN14@pack_float:

; 1612 : 	{
; 1613 : 		////////////////////////////////////////
; 1614 : 		case FLOAT_PACK_TYPE_UNPACKED:
; 1615 : 		////////////////////////////////////////
; 1616 : 		{
; 1617 : 			pack_unsigned_data (*(int *)&value, 32);

  0005d	6a 20		 push	 32			; 00000020H
  0005f	8b 45 10	 mov	 eax, DWORD PTR _value$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?pack_unsigned_data@@YGXIH@Z ; pack_unsigned_data

; 1618 : 
; 1619 : 			#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 1620 : 
; 1621 : 			if (float_type_database[type].debug_pack)
; 1622 : 			{
; 1623 : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_FLOAT_VALUE, en, type, value);
; 1624 : 			}
; 1625 : 
; 1626 : 			#endif
; 1627 : 
; 1628 : 			break;

  00068	e9 df 0e 00 00	 jmp	 $LN2@pack_float
$LN15@pack_float:

; 1629 : 		}
; 1630 : 		////////////////////////////////////////
; 1631 : 		case FLOAT_PACK_TYPE_SIGNED_ANGLE:
; 1632 : 		////////////////////////////////////////
; 1633 : 		{
; 1634 : 			int
; 1635 : 				i,
; 1636 : 				width;
; 1637 : 
; 1638 : 			ASSERT (float_type_database[type].pack_num_whole_bits == 3);

  0006d	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00071	83 b8 08 00 00
	00 03		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8], 3
  00078	74 18		 je	 SHORT $LN16@pack_float
  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  0007f	83 c0 1e	 add	 eax, 30			; 0000001eH
  00082	50		 push	 eax
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@MHFJECPL@float_type_database?$FLtype?$FN?4pack_@
  0008d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN16@pack_float:

; 1639 : 
; 1640 : 			ASSERT

  00092	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00096	83 b8 0c 00 00
	00 00		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 0
  0009d	7c 0d		 jl	 SHORT $LN18@pack_float
  0009f	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  000a3	83 b8 0c 00 00
	00 0b		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 11 ; 0000000bH
  000aa	7e 18		 jle	 SHORT $LN17@pack_float
$LN18@pack_float:
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  000b1	83 c0 24	 add	 eax, 36			; 00000024H
  000b4	50		 push	 eax
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@
  000bf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN17@pack_float:

; 1641 : 			(
; 1642 : 				(float_type_database[type].pack_num_fractional_bits >= 0) &&
; 1643 : 				(float_type_database[type].pack_num_fractional_bits <= MAX_FRACTIONAL_BITS)
; 1644 : 			);
; 1645 : 
; 1646 : 			switch (float_type_database[type].pack_num_fractional_bits)

  000c4	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  000c8	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12]
  000ce	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv131[ebp], ecx
  000d4	83 bd 7c ff ff
	ff 0b		 cmp	 DWORD PTR tv131[ebp], 11 ; 0000000bH
  000db	0f 87 5d 03 00
	00		 ja	 $LN4@pack_float
  000e1	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv131[ebp]
  000e7	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN104@pack_float[edx*4]
$LN19@pack_float:

; 1647 : 			{
; 1648 : 				case 0: pack_float_0_fractional_bits (fmod (value, PI2), &i); break;

  000ee	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  000f1	50		 push	 eax
  000f2	51		 push	 ecx
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	51		 push	 ecx
  00101	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00110	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv603[ebp]
  00116	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv603[ebp]
  0011e	51		 push	 ecx
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00129	e9 10 03 00 00	 jmp	 $LN4@pack_float
$LN20@pack_float:

; 1649 : 				case 1: pack_float_1_fractional_bits (fmod (value, PI2), &i); break;

  0012e	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  00131	50		 push	 eax
  00132	51		 push	 ecx
  00133	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	51		 push	 ecx
  00141	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014b	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00150	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv613[ebp]
  00156	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv613[ebp]
  0015e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00166	51		 push	 ecx
  00167	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00171	e9 c8 02 00 00	 jmp	 $LN4@pack_float
$LN21@pack_float:

; 1650 : 				case 2: pack_float_2_fractional_bits (fmod (value, PI2), &i); break;

  00176	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  00179	50		 push	 eax
  0017a	51		 push	 ecx
  0017b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00183	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00188	51		 push	 ecx
  00189	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00198	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv623[ebp]
  0019e	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv623[ebp]
  001a6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  001ae	51		 push	 ecx
  001af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b4	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  001b9	e9 80 02 00 00	 jmp	 $LN4@pack_float
$LN22@pack_float:

; 1651 : 				case 3: pack_float_3_fractional_bits (fmod (value, PI2), &i); break;

  001be	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  001c1	50		 push	 eax
  001c2	51		 push	 ecx
  001c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	51		 push	 ecx
  001d1	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  001d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001db	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  001e0	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv633[ebp]
  001e6	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv633[ebp]
  001ee	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  001f6	51		 push	 ecx
  001f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fc	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00201	e9 38 02 00 00	 jmp	 $LN4@pack_float
$LN23@pack_float:

; 1652 : 				case 4: pack_float_4_fractional_bits (fmod (value, PI2), &i); break;

  00206	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  00209	50		 push	 eax
  0020a	51		 push	 ecx
  0020b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00213	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00218	51		 push	 ecx
  00219	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  0021e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00223	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00228	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv643[ebp]
  0022e	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv643[ebp]
  00236	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  0023e	51		 push	 ecx
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00249	e9 f0 01 00 00	 jmp	 $LN4@pack_float
$LN24@pack_float:

; 1653 : 				case 5: pack_float_5_fractional_bits (fmod (value, PI2), &i); break;

  0024e	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  00251	50		 push	 eax
  00252	51		 push	 ecx
  00253	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  0025b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00260	51		 push	 ecx
  00261	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00266	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026b	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00270	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv653[ebp]
  00276	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv653[ebp]
  0027e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42000000
  00286	51		 push	 ecx
  00287	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00291	e9 a8 01 00 00	 jmp	 $LN4@pack_float
$LN25@pack_float:

; 1654 : 				case 6: pack_float_6_fractional_bits (fmod (value, PI2), &i); break;

  00296	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  00299	50		 push	 eax
  0029a	51		 push	 ecx
  0029b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	51		 push	 ecx
  002a9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  002ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b3	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  002b8	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv663[ebp]
  002be	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv663[ebp]
  002c6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  002ce	51		 push	 ecx
  002cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d4	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  002d9	e9 60 01 00 00	 jmp	 $LN4@pack_float
$LN26@pack_float:

; 1655 : 				case 7: pack_float_7_fractional_bits (fmod (value, PI2), &i); break;

  002de	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  002e1	50		 push	 eax
  002e2	51		 push	 ecx
  002e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  002eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f0	51		 push	 ecx
  002f1	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  002f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fb	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00300	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv673[ebp]
  00306	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv673[ebp]
  0030e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43000000
  00316	51		 push	 ecx
  00317	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00321	e9 18 01 00 00	 jmp	 $LN4@pack_float
$LN27@pack_float:

; 1656 : 				case 8: pack_float_8_fractional_bits (fmod (value, PI2), &i); break;

  00326	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  00329	50		 push	 eax
  0032a	51		 push	 ecx
  0032b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00333	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00338	51		 push	 ecx
  00339	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  0033e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00343	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00348	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv683[ebp]
  0034e	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv683[ebp]
  00356	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43800000
  0035e	51		 push	 ecx
  0035f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00364	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00369	e9 d0 00 00 00	 jmp	 $LN4@pack_float
$LN28@pack_float:

; 1657 : 				case 9: pack_float_9_fractional_bits (fmod (value, PI2), &i); break;

  0036e	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  00371	50		 push	 eax
  00372	51		 push	 ecx
  00373	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  0037b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00380	51		 push	 ecx
  00381	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00386	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038b	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00390	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv693[ebp]
  00396	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv693[ebp]
  0039e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44000000
  003a6	51		 push	 ecx
  003a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ac	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  003b1	e9 88 00 00 00	 jmp	 $LN4@pack_float
$LN29@pack_float:

; 1658 : 				case 10: pack_float_10_fractional_bits (fmod (value, PI2), &i); break;

  003b6	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  003b9	50		 push	 eax
  003ba	51		 push	 ecx
  003bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  003c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c8	51		 push	 ecx
  003c9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  003ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d3	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  003d8	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv703[ebp]
  003de	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv703[ebp]
  003e6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44800000
  003ee	51		 push	 ecx
  003ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f4	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  003f9	eb 43		 jmp	 SHORT $LN4@pack_float
$LN30@pack_float:

; 1659 : 				case 11: pack_float_11_fractional_bits (fmod (value, PI2), &i); break;

  003fb	8d 45 fc	 lea	 eax, DWORD PTR _i$16[ebp]
  003fe	50		 push	 eax
  003ff	51		 push	 ecx
  00400	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	51		 push	 ecx
  0040e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00418	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  0041d	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv713[ebp]
  00423	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv713[ebp]
  0042b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@45000000
  00433	51		 push	 ecx
  00434	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00439	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
$LN4@pack_float:

; 1660 : 			}
; 1661 : 
; 1662 : 			width = 1 + float_type_database[type].pack_num_whole_bits + float_type_database[type].pack_num_fractional_bits;

  0043e	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00442	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8]
  00448	6b 55 0c 18	 imul	 edx, DWORD PTR _type$[ebp], 24
  0044c	8b 82 0c 00 00
	00		 mov	 eax, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[edx+12]
  00452	8d 4c 01 01	 lea	 ecx, DWORD PTR [ecx+eax+1]
  00456	89 4d f8	 mov	 DWORD PTR _width$15[ebp], ecx

; 1663 : 
; 1664 : 			#ifdef DEBUG_PACK_OVERFLOW
; 1665 : 			{
; 1666 : 				int max_val = (1 << (width - 1)) - 1;

  00459	8b 4d f8	 mov	 ecx, DWORD PTR _width$15[ebp]
  0045c	83 e9 01	 sub	 ecx, 1
  0045f	b8 01 00 00 00	 mov	 eax, 1
  00464	d3 e0		 shl	 eax, cl
  00466	83 e8 01	 sub	 eax, 1
  00469	89 45 f4	 mov	 DWORD PTR _max_val$14[ebp], eax

; 1667 : 				int min_val = -max_val - 1;

  0046c	8b 45 f4	 mov	 eax, DWORD PTR _max_val$14[ebp]
  0046f	f7 d8		 neg	 eax
  00471	83 e8 01	 sub	 eax, 1
  00474	89 45 f0	 mov	 DWORD PTR _min_val$13[ebp], eax

; 1668 : 
; 1669 : 				if (width < 32 && (i > max_val || i < min_val))

  00477	83 7d f8 20	 cmp	 DWORD PTR _width$15[ebp], 32 ; 00000020H
  0047b	7d 6d		 jge	 SHORT $LN35@pack_float
  0047d	8b 45 fc	 mov	 eax, DWORD PTR _i$16[ebp]
  00480	3b 45 f4	 cmp	 eax, DWORD PTR _max_val$14[ebp]
  00483	7f 08		 jg	 SHORT $LN32@pack_float
  00485	8b 45 fc	 mov	 eax, DWORD PTR _i$16[ebp]
  00488	3b 45 f0	 cmp	 eax, DWORD PTR _min_val$13[ebp]
  0048b	7d 5d		 jge	 SHORT $LN35@pack_float
$LN32@pack_float:

; 1670 : 				{
; 1671 : 					#ifdef DEBUG_PACK_OVERFLOW
; 1672 : 						debug_log_pack_overflow("signed angle", get_float_type_name(type), width, i, value);

  0048d	51		 push	 ecx
  0048e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00493	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00498	8b 45 fc	 mov	 eax, DWORD PTR _i$16[ebp]
  0049b	50		 push	 eax
  0049c	8b 4d f8	 mov	 ecx, DWORD PTR _width$15[ebp]
  0049f	51		 push	 ecx
  004a0	6b 55 0c 18	 imul	 edx, DWORD PTR _type$[ebp], 24
  004a4	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[edx]
  004aa	50		 push	 eax
  004ab	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GDHLGMCP@signed?5angle@
  004b0	e8 00 00 00 00	 call	 ?debug_log_pack_overflow@@YGXPBD0IHM@Z ; debug_log_pack_overflow

; 1673 : 					#endif
; 1674 : 					
; 1675 : 					if (i > 0)

  004b5	83 7d fc 00	 cmp	 DWORD PTR _i$16[ebp], 0
  004b9	7e 08		 jle	 SHORT $LN33@pack_float

; 1676 : 						i = max_val;

  004bb	8b 45 f4	 mov	 eax, DWORD PTR _max_val$14[ebp]
  004be	89 45 fc	 mov	 DWORD PTR _i$16[ebp], eax

; 1677 : 					else

  004c1	eb 06		 jmp	 SHORT $LN34@pack_float
$LN33@pack_float:

; 1678 : 						i = min_val;

  004c3	8b 45 f0	 mov	 eax, DWORD PTR _min_val$13[ebp]
  004c6	89 45 fc	 mov	 DWORD PTR _i$16[ebp], eax
$LN34@pack_float:

; 1679 : 					
; 1680 : 					ASSERT(!"Overflow when packing signed float type!");

  004c9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CJ@GDCPBABK@Overflow?5when?5packing?5signed?5fl@
  004ce	85 c0		 test	 eax, eax
  004d0	74 18		 je	 SHORT $LN35@pack_float
  004d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  004d7	83 c0 48	 add	 eax, 72			; 00000048H
  004da	50		 push	 eax
  004db	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  004e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@FDOEOGJD@?$CB?$CCOverflow?5when?5packing?5signed?5@
  004e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN35@pack_float:

; 1681 : 				}
; 1682 : 			}
; 1683 : 			#endif
; 1684 : 
; 1685 : 			pack_signed_data (i, width);

  004ea	8b 45 f8	 mov	 eax, DWORD PTR _width$15[ebp]
  004ed	50		 push	 eax
  004ee	8b 4d fc	 mov	 ecx, DWORD PTR _i$16[ebp]
  004f1	51		 push	 ecx
  004f2	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 1686 : 
; 1687 : 			#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 1688 : 
; 1689 : 			if (float_type_database[type].debug_pack)
; 1690 : 			{
; 1691 : 				float
; 1692 : 					value;
; 1693 : 
; 1694 : 				//
; 1695 : 				// packed debug message to match unpacked debug message
; 1696 : 				//
; 1697 : 
; 1698 : 				switch (float_type_database[type].pack_num_fractional_bits)
; 1699 : 				{
; 1700 : 					case 0: value = unpack_float_0_fractional_bits (i); break;
; 1701 : 					case 1: value = unpack_float_1_fractional_bits (i); break;
; 1702 : 					case 2: value = unpack_float_2_fractional_bits (i); break;
; 1703 : 					case 3: value = unpack_float_3_fractional_bits (i); break;
; 1704 : 					case 4: value = unpack_float_4_fractional_bits (i); break;
; 1705 : 					case 5: value = unpack_float_5_fractional_bits (i); break;
; 1706 : 					case 6: value = unpack_float_6_fractional_bits (i); break;
; 1707 : 					case 7: value = unpack_float_7_fractional_bits (i); break;
; 1708 : 					case 8: value = unpack_float_8_fractional_bits (i); break;
; 1709 : 					case 9: value = unpack_float_9_fractional_bits (i); break;
; 1710 : 					case 10: value = unpack_float_10_fractional_bits (i); break;
; 1711 : 					case 11: value = unpack_float_11_fractional_bits (i); break;
; 1712 : 				}
; 1713 : 
; 1714 : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_FLOAT_VALUE, en, type, value);
; 1715 : 			}
; 1716 : 
; 1717 : 			#endif
; 1718 : 
; 1719 : 			break;

  004f7	e9 50 0a 00 00	 jmp	 $LN2@pack_float
$LN36@pack_float:

; 1720 : 		}
; 1721 : 		////////////////////////////////////////
; 1722 : 		case FLOAT_PACK_TYPE_UNSIGNED_ANGLE:
; 1723 : 		////////////////////////////////////////
; 1724 : 		{
; 1725 : 			int
; 1726 : 				i,
; 1727 : 				width;
; 1728 : 
; 1729 : 			ASSERT (value >= 0.0);

  004fc	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _value$[ebp]
  00501	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00509	73 18		 jae	 SHORT $LN37@pack_float
  0050b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  00510	83 c0 79	 add	 eax, 121		; 00000079H
  00513	50		 push	 eax
  00514	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00519	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GAIGJGBN@value?5?$DO?$DN?50?40@
  0051e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN37@pack_float:

; 1730 : 
; 1731 : 			ASSERT (float_type_database[type].pack_num_whole_bits == 3);

  00523	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00527	83 b8 08 00 00
	00 03		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8], 3
  0052e	74 18		 je	 SHORT $LN38@pack_float
  00530	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  00535	83 c0 7b	 add	 eax, 123		; 0000007bH
  00538	50		 push	 eax
  00539	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0053e	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@MHFJECPL@float_type_database?$FLtype?$FN?4pack_@
  00543	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN38@pack_float:

; 1732 : 
; 1733 : 			ASSERT

  00548	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  0054c	83 b8 0c 00 00
	00 00		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 0
  00553	7c 0d		 jl	 SHORT $LN40@pack_float
  00555	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00559	83 b8 0c 00 00
	00 0b		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 11 ; 0000000bH
  00560	7e 1a		 jle	 SHORT $LN39@pack_float
$LN40@pack_float:
  00562	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  00567	05 81 00 00 00	 add	 eax, 129		; 00000081H
  0056c	50		 push	 eax
  0056d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00572	68 00 00 00 00	 push	 OFFSET ??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@
  00577	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN39@pack_float:

; 1734 : 			(
; 1735 : 				(float_type_database[type].pack_num_fractional_bits >= 0) &&
; 1736 : 				(float_type_database[type].pack_num_fractional_bits <= MAX_FRACTIONAL_BITS)
; 1737 : 			);
; 1738 : 
; 1739 : 			switch (float_type_database[type].pack_num_fractional_bits)

  0057c	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00580	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12]
  00586	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv266[ebp], ecx
  0058c	83 bd 7c ff ff
	ff 0b		 cmp	 DWORD PTR tv266[ebp], 11 ; 0000000bH
  00593	0f 87 5d 03 00
	00		 ja	 $LN6@pack_float
  00599	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv266[ebp]
  0059f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN105@pack_float[edx*4]
$LN41@pack_float:

; 1740 : 			{
; 1741 : 				case 0: pack_float_0_fractional_bits (fmod (value, PI2), &i); break;

  005a6	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  005a9	50		 push	 eax
  005aa	51		 push	 ecx
  005ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  005b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b8	51		 push	 ecx
  005b9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  005be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c3	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  005c8	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv747[ebp]
  005ce	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv747[ebp]
  005d6	51		 push	 ecx
  005d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005dc	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  005e1	e9 10 03 00 00	 jmp	 $LN6@pack_float
$LN42@pack_float:

; 1742 : 				case 1: pack_float_1_fractional_bits (fmod (value, PI2), &i); break;

  005e6	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  005e9	50		 push	 eax
  005ea	51		 push	 ecx
  005eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	51		 push	 ecx
  005f9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  005fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00603	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00608	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv757[ebp]
  0060e	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv757[ebp]
  00616	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0061e	51		 push	 ecx
  0061f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00624	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00629	e9 c8 02 00 00	 jmp	 $LN6@pack_float
$LN43@pack_float:

; 1743 : 				case 2: pack_float_2_fractional_bits (fmod (value, PI2), &i); break;

  0062e	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  00631	50		 push	 eax
  00632	51		 push	 ecx
  00633	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  0063b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00640	51		 push	 ecx
  00641	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00646	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064b	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00650	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv767[ebp]
  00656	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv767[ebp]
  0065e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  00666	51		 push	 ecx
  00667	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00671	e9 80 02 00 00	 jmp	 $LN6@pack_float
$LN44@pack_float:

; 1744 : 				case 3: pack_float_3_fractional_bits (fmod (value, PI2), &i); break;

  00676	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  00679	50		 push	 eax
  0067a	51		 push	 ecx
  0067b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00683	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00688	51		 push	 ecx
  00689	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  0068e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00693	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00698	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv777[ebp]
  0069e	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv777[ebp]
  006a6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  006ae	51		 push	 ecx
  006af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b4	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  006b9	e9 38 02 00 00	 jmp	 $LN6@pack_float
$LN45@pack_float:

; 1745 : 				case 4: pack_float_4_fractional_bits (fmod (value, PI2), &i); break;

  006be	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  006c1	50		 push	 eax
  006c2	51		 push	 ecx
  006c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  006cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d0	51		 push	 ecx
  006d1	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  006d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006db	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  006e0	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv787[ebp]
  006e6	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv787[ebp]
  006ee	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  006f6	51		 push	 ecx
  006f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fc	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00701	e9 f0 01 00 00	 jmp	 $LN6@pack_float
$LN46@pack_float:

; 1746 : 				case 5: pack_float_5_fractional_bits (fmod (value, PI2), &i); break;

  00706	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  00709	50		 push	 eax
  0070a	51		 push	 ecx
  0070b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00713	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00718	51		 push	 ecx
  00719	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  0071e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00723	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00728	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv797[ebp]
  0072e	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv797[ebp]
  00736	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42000000
  0073e	51		 push	 ecx
  0073f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00744	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00749	e9 a8 01 00 00	 jmp	 $LN6@pack_float
$LN47@pack_float:

; 1747 : 				case 6: pack_float_6_fractional_bits (fmod (value, PI2), &i); break;

  0074e	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  00751	50		 push	 eax
  00752	51		 push	 ecx
  00753	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  0075b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00760	51		 push	 ecx
  00761	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00766	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076b	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00770	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv807[ebp]
  00776	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv807[ebp]
  0077e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00786	51		 push	 ecx
  00787	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00791	e9 60 01 00 00	 jmp	 $LN6@pack_float
$LN48@pack_float:

; 1748 : 				case 7: pack_float_7_fractional_bits (fmod (value, PI2), &i); break;

  00796	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  00799	50		 push	 eax
  0079a	51		 push	 ecx
  0079b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  007a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a8	51		 push	 ecx
  007a9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  007ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b3	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  007b8	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv817[ebp]
  007be	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv817[ebp]
  007c6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43000000
  007ce	51		 push	 ecx
  007cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d4	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  007d9	e9 18 01 00 00	 jmp	 $LN6@pack_float
$LN49@pack_float:

; 1749 : 				case 8: pack_float_8_fractional_bits (fmod (value, PI2), &i); break;

  007de	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  007e1	50		 push	 eax
  007e2	51		 push	 ecx
  007e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  007eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f0	51		 push	 ecx
  007f1	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  007f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fb	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00800	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv827[ebp]
  00806	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv827[ebp]
  0080e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43800000
  00816	51		 push	 ecx
  00817	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00821	e9 d0 00 00 00	 jmp	 $LN6@pack_float
$LN50@pack_float:

; 1750 : 				case 9: pack_float_9_fractional_bits (fmod (value, PI2), &i); break;

  00826	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  00829	50		 push	 eax
  0082a	51		 push	 ecx
  0082b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00833	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00838	51		 push	 ecx
  00839	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  0083e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00843	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00848	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv837[ebp]
  0084e	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv837[ebp]
  00856	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44000000
  0085e	51		 push	 ecx
  0085f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00864	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00869	e9 88 00 00 00	 jmp	 $LN6@pack_float
$LN51@pack_float:

; 1751 : 				case 10: pack_float_10_fractional_bits (fmod (value, PI2), &i); break;

  0086e	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  00871	50		 push	 eax
  00872	51		 push	 ecx
  00873	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  0087b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00880	51		 push	 ecx
  00881	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00886	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088b	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00890	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv847[ebp]
  00896	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv847[ebp]
  0089e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44800000
  008a6	51		 push	 ecx
  008a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ac	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  008b1	eb 43		 jmp	 SHORT $LN6@pack_float
$LN52@pack_float:

; 1752 : 				case 11: pack_float_11_fractional_bits (fmod (value, PI2), &i); break;

  008b3	8d 45 ec	 lea	 eax, DWORD PTR _i$12[ebp]
  008b6	50		 push	 eax
  008b7	51		 push	 ecx
  008b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  008c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c5	51		 push	 ecx
  008c6	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  008cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d0	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  008d5	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv857[ebp]
  008db	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv857[ebp]
  008e3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@45000000
  008eb	51		 push	 ecx
  008ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f1	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
$LN6@pack_float:

; 1753 : 			}
; 1754 : 
; 1755 : 			width = float_type_database[type].pack_num_whole_bits + float_type_database[type].pack_num_fractional_bits;

  008f6	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  008fa	6b 4d 0c 18	 imul	 ecx, DWORD PTR _type$[ebp], 24
  008fe	8b 90 08 00 00
	00		 mov	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8]
  00904	03 91 0c 00 00
	00		 add	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[ecx+12]
  0090a	89 55 e8	 mov	 DWORD PTR _width$11[ebp], edx

; 1756 : 
; 1757 : 			#ifdef DEBUG_PACK_OVERFLOW
; 1758 : 			{
; 1759 : 				int max_val = (1 << (width)) - 1;

  0090d	b8 01 00 00 00	 mov	 eax, 1
  00912	8b 4d e8	 mov	 ecx, DWORD PTR _width$11[ebp]
  00915	d3 e0		 shl	 eax, cl
  00917	83 e8 01	 sub	 eax, 1
  0091a	89 45 e4	 mov	 DWORD PTR _max_val$10[ebp], eax

; 1760 : 				int min_val = 0;

  0091d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _min_val$9[ebp], 0

; 1761 : 
; 1762 : 				if (width < 32 && (i > max_val || i < min_val))

  00924	83 7d e8 20	 cmp	 DWORD PTR _width$11[ebp], 32 ; 00000020H
  00928	7d 6f		 jge	 SHORT $LN57@pack_float
  0092a	8b 45 ec	 mov	 eax, DWORD PTR _i$12[ebp]
  0092d	3b 45 e4	 cmp	 eax, DWORD PTR _max_val$10[ebp]
  00930	7f 08		 jg	 SHORT $LN54@pack_float
  00932	8b 45 ec	 mov	 eax, DWORD PTR _i$12[ebp]
  00935	3b 45 e0	 cmp	 eax, DWORD PTR _min_val$9[ebp]
  00938	7d 5f		 jge	 SHORT $LN57@pack_float
$LN54@pack_float:

; 1763 : 				{
; 1764 : 					#ifdef DEBUG_PACK_OVERFLOW
; 1765 : 						debug_log_pack_overflow("unsigned float angle", get_float_type_name(type), width, i, value);

  0093a	51		 push	 ecx
  0093b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00940	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00945	8b 45 ec	 mov	 eax, DWORD PTR _i$12[ebp]
  00948	50		 push	 eax
  00949	8b 4d e8	 mov	 ecx, DWORD PTR _width$11[ebp]
  0094c	51		 push	 ecx
  0094d	6b 55 0c 18	 imul	 edx, DWORD PTR _type$[ebp], 24
  00951	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[edx]
  00957	50		 push	 eax
  00958	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PPFFLNDO@unsigned?5float?5angle@
  0095d	e8 00 00 00 00	 call	 ?debug_log_pack_overflow@@YGXPBD0IHM@Z ; debug_log_pack_overflow

; 1766 : 					#endif
; 1767 : 					
; 1768 : 					if (i > 0)

  00962	83 7d ec 00	 cmp	 DWORD PTR _i$12[ebp], 0
  00966	7e 08		 jle	 SHORT $LN55@pack_float

; 1769 : 						i = max_val;

  00968	8b 45 e4	 mov	 eax, DWORD PTR _max_val$10[ebp]
  0096b	89 45 ec	 mov	 DWORD PTR _i$12[ebp], eax

; 1770 : 					else

  0096e	eb 06		 jmp	 SHORT $LN56@pack_float
$LN55@pack_float:

; 1771 : 						i = min_val;

  00970	8b 45 e0	 mov	 eax, DWORD PTR _min_val$9[ebp]
  00973	89 45 ec	 mov	 DWORD PTR _i$12[ebp], eax
$LN56@pack_float:

; 1772 : 					
; 1773 : 					ASSERT(!"Overflow when packing unsigned float type!");

  00976	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CL@MHCJOPHK@Overflow?5when?5packing?5unsigned?5@
  0097b	85 c0		 test	 eax, eax
  0097d	74 1a		 je	 SHORT $LN57@pack_float
  0097f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  00984	05 a5 00 00 00	 add	 eax, 165		; 000000a5H
  00989	50		 push	 eax
  0098a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0098f	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@PODJFEOF@?$CB?$CCOverflow?5when?5packing?5unsigne@
  00994	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN57@pack_float:

; 1774 : 				}
; 1775 : 			}
; 1776 : 			#endif
; 1777 : 			ASSERT(!(i >> width));

  00999	8b 45 ec	 mov	 eax, DWORD PTR _i$12[ebp]
  0099c	8b 4d e8	 mov	 ecx, DWORD PTR _width$11[ebp]
  0099f	d3 f8		 sar	 eax, cl
  009a1	85 c0		 test	 eax, eax
  009a3	74 1a		 je	 SHORT $LN58@pack_float
  009a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  009aa	05 a9 00 00 00	 add	 eax, 169		; 000000a9H
  009af	50		 push	 eax
  009b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  009b5	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EBNDMGNP@?$CB?$CIi?5?$DO?$DO?5width?$CJ@
  009ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN58@pack_float:

; 1778 : 
; 1779 : 			pack_unsigned_data (i, width);

  009bf	8b 45 e8	 mov	 eax, DWORD PTR _width$11[ebp]
  009c2	50		 push	 eax
  009c3	8b 4d ec	 mov	 ecx, DWORD PTR _i$12[ebp]
  009c6	51		 push	 ecx
  009c7	e8 00 00 00 00	 call	 ?pack_unsigned_data@@YGXIH@Z ; pack_unsigned_data

; 1780 : 
; 1781 : 			#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 1782 : 
; 1783 : 			if (float_type_database[type].debug_pack)
; 1784 : 			{
; 1785 : 				float
; 1786 : 					value;
; 1787 : 
; 1788 : 				//
; 1789 : 				// packed debug message to match unpacked debug message
; 1790 : 				//
; 1791 : 
; 1792 : 				switch (float_type_database[type].pack_num_fractional_bits)
; 1793 : 				{
; 1794 : 					case 0: value = unpack_float_0_fractional_bits (i); break;
; 1795 : 					case 1: value = unpack_float_1_fractional_bits (i); break;
; 1796 : 					case 2: value = unpack_float_2_fractional_bits (i); break;
; 1797 : 					case 3: value = unpack_float_3_fractional_bits (i); break;
; 1798 : 					case 4: value = unpack_float_4_fractional_bits (i); break;
; 1799 : 					case 5: value = unpack_float_5_fractional_bits (i); break;
; 1800 : 					case 6: value = unpack_float_6_fractional_bits (i); break;
; 1801 : 					case 7: value = unpack_float_7_fractional_bits (i); break;
; 1802 : 					case 8: value = unpack_float_8_fractional_bits (i); break;
; 1803 : 					case 9: value = unpack_float_9_fractional_bits (i); break;
; 1804 : 					case 10: value = unpack_float_10_fractional_bits (i); break;
; 1805 : 					case 11: value = unpack_float_11_fractional_bits (i); break;
; 1806 : 				}
; 1807 : 
; 1808 : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_FLOAT_VALUE, en, type, value);
; 1809 : 			}
; 1810 : 
; 1811 : 			#endif
; 1812 : 
; 1813 : 			break;

  009cc	e9 7b 05 00 00	 jmp	 $LN2@pack_float
$LN59@pack_float:

; 1814 : 		}
; 1815 : 		////////////////////////////////////////
; 1816 : 		case FLOAT_PACK_TYPE_SIGNED_VALUE:
; 1817 : 		////////////////////////////////////////
; 1818 : 		{
; 1819 : 			int
; 1820 : 				i,
; 1821 : 				width;
; 1822 : 
; 1823 : 			ASSERT

  009d1	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  009d5	83 b8 0c 00 00
	00 00		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 0
  009dc	7c 0d		 jl	 SHORT $LN61@pack_float
  009de	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  009e2	83 b8 0c 00 00
	00 0b		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 11 ; 0000000bH
  009e9	7e 1a		 jle	 SHORT $LN60@pack_float
$LN61@pack_float:
  009eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  009f0	05 db 00 00 00	 add	 eax, 219		; 000000dbH
  009f5	50		 push	 eax
  009f6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  009fb	68 00 00 00 00	 push	 OFFSET ??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@
  00a00	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN60@pack_float:

; 1824 : 			(
; 1825 : 				(float_type_database[type].pack_num_fractional_bits >= 0) &&
; 1826 : 				(float_type_database[type].pack_num_fractional_bits <= MAX_FRACTIONAL_BITS)
; 1827 : 			);
; 1828 : 
; 1829 : 			switch (float_type_database[type].pack_num_fractional_bits)

  00a05	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00a09	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12]
  00a0f	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv389[ebp], ecx
  00a15	83 bd 7c ff ff
	ff 0b		 cmp	 DWORD PTR tv389[ebp], 11 ; 0000000bH
  00a1c	0f 87 80 01 00
	00		 ja	 $LN8@pack_float
  00a22	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv389[ebp]
  00a28	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN106@pack_float[edx*4]
$LN62@pack_float:

; 1830 : 			{
; 1831 : 				case 0: pack_float_0_fractional_bits (value, &i); break;

  00a2f	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00a32	50		 push	 eax
  00a33	51		 push	 ecx
  00a34	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00a39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00a43	e9 5a 01 00 00	 jmp	 $LN8@pack_float
$LN63@pack_float:

; 1832 : 				case 1: pack_float_1_fractional_bits (value, &i); break;

  00a48	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00a4b	50		 push	 eax
  00a4c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00a51	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00a59	51		 push	 ecx
  00a5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5f	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00a64	e9 39 01 00 00	 jmp	 $LN8@pack_float
$LN64@pack_float:

; 1833 : 				case 2: pack_float_2_fractional_bits (value, &i); break;

  00a69	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00a6c	50		 push	 eax
  00a6d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00a72	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  00a7a	51		 push	 ecx
  00a7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a80	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00a85	e9 18 01 00 00	 jmp	 $LN8@pack_float
$LN65@pack_float:

; 1834 : 				case 3: pack_float_3_fractional_bits (value, &i); break;

  00a8a	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00a8d	50		 push	 eax
  00a8e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00a93	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  00a9b	51		 push	 ecx
  00a9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa1	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00aa6	e9 f7 00 00 00	 jmp	 $LN8@pack_float
$LN66@pack_float:

; 1835 : 				case 4: pack_float_4_fractional_bits (value, &i); break;

  00aab	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00aae	50		 push	 eax
  00aaf	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00ab4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00abc	51		 push	 ecx
  00abd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac2	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00ac7	e9 d6 00 00 00	 jmp	 $LN8@pack_float
$LN67@pack_float:

; 1836 : 				case 5: pack_float_5_fractional_bits (value, &i); break;

  00acc	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00acf	50		 push	 eax
  00ad0	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00ad5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42000000
  00add	51		 push	 ecx
  00ade	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae3	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00ae8	e9 b5 00 00 00	 jmp	 $LN8@pack_float
$LN68@pack_float:

; 1837 : 				case 6: pack_float_6_fractional_bits (value, &i); break;

  00aed	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00af0	50		 push	 eax
  00af1	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00af6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00afe	51		 push	 ecx
  00aff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b04	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00b09	e9 94 00 00 00	 jmp	 $LN8@pack_float
$LN69@pack_float:

; 1838 : 				case 7: pack_float_7_fractional_bits (value, &i); break;

  00b0e	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00b11	50		 push	 eax
  00b12	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00b17	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43000000
  00b1f	51		 push	 ecx
  00b20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b25	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00b2a	eb 76		 jmp	 SHORT $LN8@pack_float
$LN70@pack_float:

; 1839 : 				case 8: pack_float_8_fractional_bits (value, &i); break;

  00b2c	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00b2f	50		 push	 eax
  00b30	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00b35	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43800000
  00b3d	51		 push	 ecx
  00b3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b43	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00b48	eb 58		 jmp	 SHORT $LN8@pack_float
$LN71@pack_float:

; 1840 : 				case 9: pack_float_9_fractional_bits (value, &i); break;

  00b4a	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00b4d	50		 push	 eax
  00b4e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00b53	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44000000
  00b5b	51		 push	 ecx
  00b5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b61	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00b66	eb 3a		 jmp	 SHORT $LN8@pack_float
$LN72@pack_float:

; 1841 : 				case 10: pack_float_10_fractional_bits (value, &i); break;

  00b68	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00b6b	50		 push	 eax
  00b6c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00b71	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44800000
  00b79	51		 push	 ecx
  00b7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7f	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00b84	eb 1c		 jmp	 SHORT $LN8@pack_float
$LN73@pack_float:

; 1842 : 				case 11: pack_float_11_fractional_bits (value, &i); break;

  00b86	8d 45 dc	 lea	 eax, DWORD PTR _i$8[ebp]
  00b89	50		 push	 eax
  00b8a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00b8f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@45000000
  00b97	51		 push	 ecx
  00b98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b9d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
$LN8@pack_float:

; 1843 : 			}
; 1844 : 
; 1845 : 			width = 1 + float_type_database[type].pack_num_whole_bits + float_type_database[type].pack_num_fractional_bits;

  00ba2	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00ba6	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8]
  00bac	6b 55 0c 18	 imul	 edx, DWORD PTR _type$[ebp], 24
  00bb0	8b 82 0c 00 00
	00		 mov	 eax, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[edx+12]
  00bb6	8d 4c 01 01	 lea	 ecx, DWORD PTR [ecx+eax+1]
  00bba	89 4d d8	 mov	 DWORD PTR _width$7[ebp], ecx

; 1846 : 
; 1847 : 			#ifdef DEBUG_PACK_OVERFLOW
; 1848 : 			{
; 1849 : 				int max_val = (1 << (width - 1)) - 1;

  00bbd	8b 4d d8	 mov	 ecx, DWORD PTR _width$7[ebp]
  00bc0	83 e9 01	 sub	 ecx, 1
  00bc3	b8 01 00 00 00	 mov	 eax, 1
  00bc8	d3 e0		 shl	 eax, cl
  00bca	83 e8 01	 sub	 eax, 1
  00bcd	89 45 d4	 mov	 DWORD PTR _max_val$6[ebp], eax

; 1850 : 				int min_val = -max_val - 1;

  00bd0	8b 45 d4	 mov	 eax, DWORD PTR _max_val$6[ebp]
  00bd3	f7 d8		 neg	 eax
  00bd5	83 e8 01	 sub	 eax, 1
  00bd8	89 45 d0	 mov	 DWORD PTR _min_val$5[ebp], eax

; 1851 : 
; 1852 : 				if (width < 32 && (i > max_val || i < min_val))

  00bdb	83 7d d8 20	 cmp	 DWORD PTR _width$7[ebp], 32 ; 00000020H
  00bdf	7d 6f		 jge	 SHORT $LN78@pack_float
  00be1	8b 45 dc	 mov	 eax, DWORD PTR _i$8[ebp]
  00be4	3b 45 d4	 cmp	 eax, DWORD PTR _max_val$6[ebp]
  00be7	7f 08		 jg	 SHORT $LN75@pack_float
  00be9	8b 45 dc	 mov	 eax, DWORD PTR _i$8[ebp]
  00bec	3b 45 d0	 cmp	 eax, DWORD PTR _min_val$5[ebp]
  00bef	7d 5f		 jge	 SHORT $LN78@pack_float
$LN75@pack_float:

; 1853 : 				{
; 1854 : 					#ifdef DEBUG_PACK_OVERFLOW
; 1855 : 						debug_log_pack_overflow("signed float value", get_float_type_name(type), width, i, value);

  00bf1	51		 push	 ecx
  00bf2	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00bf7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfc	8b 45 dc	 mov	 eax, DWORD PTR _i$8[ebp]
  00bff	50		 push	 eax
  00c00	8b 4d d8	 mov	 ecx, DWORD PTR _width$7[ebp]
  00c03	51		 push	 ecx
  00c04	6b 55 0c 18	 imul	 edx, DWORD PTR _type$[ebp], 24
  00c08	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[edx]
  00c0e	50		 push	 eax
  00c0f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KPDOENEM@signed?5float?5value@
  00c14	e8 00 00 00 00	 call	 ?debug_log_pack_overflow@@YGXPBD0IHM@Z ; debug_log_pack_overflow

; 1856 : 					#endif
; 1857 : 					
; 1858 : 					if (i > 0)

  00c19	83 7d dc 00	 cmp	 DWORD PTR _i$8[ebp], 0
  00c1d	7e 08		 jle	 SHORT $LN76@pack_float

; 1859 : 						i = max_val;

  00c1f	8b 45 d4	 mov	 eax, DWORD PTR _max_val$6[ebp]
  00c22	89 45 dc	 mov	 DWORD PTR _i$8[ebp], eax

; 1860 : 					else

  00c25	eb 06		 jmp	 SHORT $LN77@pack_float
$LN76@pack_float:

; 1861 : 						i = min_val;

  00c27	8b 45 d0	 mov	 eax, DWORD PTR _min_val$5[ebp]
  00c2a	89 45 dc	 mov	 DWORD PTR _i$8[ebp], eax
$LN77@pack_float:

; 1862 : 					
; 1863 : 					ASSERT(!"Overflow when packing signed float type!");

  00c2d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CJ@GDCPBABK@Overflow?5when?5packing?5signed?5fl@
  00c32	85 c0		 test	 eax, eax
  00c34	74 1a		 je	 SHORT $LN78@pack_float
  00c36	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  00c3b	05 ff 00 00 00	 add	 eax, 255		; 000000ffH
  00c40	50		 push	 eax
  00c41	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c46	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@FDOEOGJD@?$CB?$CCOverflow?5when?5packing?5signed?5@
  00c4b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN78@pack_float:

; 1864 : 				}
; 1865 : 			}
; 1866 : 			#endif
; 1867 : 			
; 1868 : 			pack_signed_data (i, width);

  00c50	8b 45 d8	 mov	 eax, DWORD PTR _width$7[ebp]
  00c53	50		 push	 eax
  00c54	8b 4d dc	 mov	 ecx, DWORD PTR _i$8[ebp]
  00c57	51		 push	 ecx
  00c58	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 1869 : 
; 1870 : 			#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 1871 : 
; 1872 : 			if (float_type_database[type].debug_pack)
; 1873 : 			{
; 1874 : 				float
; 1875 : 					value;
; 1876 : 
; 1877 : 				//
; 1878 : 				// packed debug message to match unpacked debug message
; 1879 : 				//
; 1880 : 
; 1881 : 				switch (float_type_database[type].pack_num_fractional_bits)
; 1882 : 				{
; 1883 : 					case 0: value = unpack_float_0_fractional_bits (i); break;
; 1884 : 					case 1: value = unpack_float_1_fractional_bits (i); break;
; 1885 : 					case 2: value = unpack_float_2_fractional_bits (i); break;
; 1886 : 					case 3: value = unpack_float_3_fractional_bits (i); break;
; 1887 : 					case 4: value = unpack_float_4_fractional_bits (i); break;
; 1888 : 					case 5: value = unpack_float_5_fractional_bits (i); break;
; 1889 : 					case 6: value = unpack_float_6_fractional_bits (i); break;
; 1890 : 					case 7: value = unpack_float_7_fractional_bits (i); break;
; 1891 : 					case 8: value = unpack_float_8_fractional_bits (i); break;
; 1892 : 					case 9: value = unpack_float_9_fractional_bits (i); break;
; 1893 : 					case 10: value = unpack_float_10_fractional_bits (i); break;
; 1894 : 					case 11: value = unpack_float_11_fractional_bits (i); break;
; 1895 : 				}
; 1896 : 
; 1897 : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_FLOAT_VALUE, en, type, value);
; 1898 : 			}
; 1899 : 
; 1900 : 			#endif
; 1901 : 
; 1902 : 			break;

  00c5d	e9 ea 02 00 00	 jmp	 $LN2@pack_float
$LN79@pack_float:

; 1903 : 		}
; 1904 : 		////////////////////////////////////////
; 1905 : 		case FLOAT_PACK_TYPE_UNSIGNED_VALUE:
; 1906 : 		////////////////////////////////////////
; 1907 : 		{
; 1908 : 			int
; 1909 : 				i,
; 1910 : 				width;
; 1911 : 
; 1912 : 			ASSERT (value >= 0.0);

  00c62	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _value$[ebp]
  00c67	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00c6f	73 1a		 jae	 SHORT $LN80@pack_float
  00c71	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  00c76	05 30 01 00 00	 add	 eax, 304		; 00000130H
  00c7b	50		 push	 eax
  00c7c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c81	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GAIGJGBN@value?5?$DO?$DN?50?40@
  00c86	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN80@pack_float:

; 1913 : 
; 1914 : 			ASSERT

  00c8b	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00c8f	83 b8 0c 00 00
	00 00		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 0
  00c96	7c 0d		 jl	 SHORT $LN82@pack_float
  00c98	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00c9c	83 b8 0c 00 00
	00 0b		 cmp	 DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12], 11 ; 0000000bH
  00ca3	7e 1a		 jle	 SHORT $LN81@pack_float
$LN82@pack_float:
  00ca5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  00caa	05 36 01 00 00	 add	 eax, 310		; 00000136H
  00caf	50		 push	 eax
  00cb0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cb5	68 00 00 00 00	 push	 OFFSET ??_C@_0IJ@ENEFMLGK@?$CIfloat_type_database?$FLtype?$FN?4pack@
  00cba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN81@pack_float:

; 1915 : 			(
; 1916 : 				(float_type_database[type].pack_num_fractional_bits >= 0) &&
; 1917 : 				(float_type_database[type].pack_num_fractional_bits <= MAX_FRACTIONAL_BITS)
; 1918 : 			);
; 1919 : 
; 1920 : 			switch (float_type_database[type].pack_num_fractional_bits)

  00cbf	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00cc3	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+12]
  00cc9	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv479[ebp], ecx
  00ccf	83 bd 7c ff ff
	ff 0b		 cmp	 DWORD PTR tv479[ebp], 11 ; 0000000bH
  00cd6	0f 87 80 01 00
	00		 ja	 $LN10@pack_float
  00cdc	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv479[ebp]
  00ce2	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN107@pack_float[edx*4]
$LN83@pack_float:

; 1921 : 			{
; 1922 : 				case 0: pack_float_0_fractional_bits (value, &i); break;

  00ce9	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00cec	50		 push	 eax
  00ced	51		 push	 ecx
  00cee	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00cf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf8	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00cfd	e9 5a 01 00 00	 jmp	 $LN10@pack_float
$LN84@pack_float:

; 1923 : 				case 1: pack_float_1_fractional_bits (value, &i); break;

  00d02	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00d05	50		 push	 eax
  00d06	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00d0b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00d13	51		 push	 ecx
  00d14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d19	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00d1e	e9 39 01 00 00	 jmp	 $LN10@pack_float
$LN85@pack_float:

; 1924 : 				case 2: pack_float_2_fractional_bits (value, &i); break;

  00d23	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00d26	50		 push	 eax
  00d27	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00d2c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  00d34	51		 push	 ecx
  00d35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d3a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00d3f	e9 18 01 00 00	 jmp	 $LN10@pack_float
$LN86@pack_float:

; 1925 : 				case 3: pack_float_3_fractional_bits (value, &i); break;

  00d44	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00d47	50		 push	 eax
  00d48	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00d4d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  00d55	51		 push	 ecx
  00d56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00d60	e9 f7 00 00 00	 jmp	 $LN10@pack_float
$LN87@pack_float:

; 1926 : 				case 4: pack_float_4_fractional_bits (value, &i); break;

  00d65	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00d68	50		 push	 eax
  00d69	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00d6e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00d76	51		 push	 ecx
  00d77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00d81	e9 d6 00 00 00	 jmp	 $LN10@pack_float
$LN88@pack_float:

; 1927 : 				case 5: pack_float_5_fractional_bits (value, &i); break;

  00d86	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00d89	50		 push	 eax
  00d8a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00d8f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42000000
  00d97	51		 push	 ecx
  00d98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00da2	e9 b5 00 00 00	 jmp	 $LN10@pack_float
$LN89@pack_float:

; 1928 : 				case 6: pack_float_6_fractional_bits (value, &i); break;

  00da7	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00daa	50		 push	 eax
  00dab	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00db0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00db8	51		 push	 ecx
  00db9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dbe	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00dc3	e9 94 00 00 00	 jmp	 $LN10@pack_float
$LN90@pack_float:

; 1929 : 				case 7: pack_float_7_fractional_bits (value, &i); break;

  00dc8	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00dcb	50		 push	 eax
  00dcc	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00dd1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43000000
  00dd9	51		 push	 ecx
  00dda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ddf	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00de4	eb 76		 jmp	 SHORT $LN10@pack_float
$LN91@pack_float:

; 1930 : 				case 8: pack_float_8_fractional_bits (value, &i); break;

  00de6	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00de9	50		 push	 eax
  00dea	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00def	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43800000
  00df7	51		 push	 ecx
  00df8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dfd	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00e02	eb 58		 jmp	 SHORT $LN10@pack_float
$LN92@pack_float:

; 1931 : 				case 9: pack_float_9_fractional_bits (value, &i); break;

  00e04	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00e07	50		 push	 eax
  00e08	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00e0d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44000000
  00e15	51		 push	 ecx
  00e16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00e20	eb 3a		 jmp	 SHORT $LN10@pack_float
$LN93@pack_float:

; 1932 : 				case 10: pack_float_10_fractional_bits (value, &i); break;

  00e22	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00e25	50		 push	 eax
  00e26	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00e2b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44800000
  00e33	51		 push	 ecx
  00e34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e39	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00e3e	eb 1c		 jmp	 SHORT $LN10@pack_float
$LN94@pack_float:

; 1933 : 				case 11: pack_float_11_fractional_bits (value, &i); break;

  00e40	8d 45 cc	 lea	 eax, DWORD PTR _i$4[ebp]
  00e43	50		 push	 eax
  00e44	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00e49	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@45000000
  00e51	51		 push	 ecx
  00e52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e57	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
$LN10@pack_float:

; 1934 : 			}
; 1935 : 
; 1936 : 			width = float_type_database[type].pack_num_whole_bits + float_type_database[type].pack_num_fractional_bits;

  00e5c	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00e60	6b 4d 0c 18	 imul	 ecx, DWORD PTR _type$[ebp], 24
  00e64	8b 90 08 00 00
	00		 mov	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+8]
  00e6a	03 91 0c 00 00
	00		 add	 edx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[ecx+12]
  00e70	89 55 c8	 mov	 DWORD PTR _width$3[ebp], edx

; 1937 : 
; 1938 : 			#ifdef DEBUG_PACK_OVERFLOW
; 1939 : 			{
; 1940 : 				int max_val = (1 << (width)) - 1;

  00e73	b8 01 00 00 00	 mov	 eax, 1
  00e78	8b 4d c8	 mov	 ecx, DWORD PTR _width$3[ebp]
  00e7b	d3 e0		 shl	 eax, cl
  00e7d	83 e8 01	 sub	 eax, 1
  00e80	89 45 c4	 mov	 DWORD PTR _max_val$2[ebp], eax

; 1941 : 				int min_val = 0;

  00e83	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _min_val$1[ebp], 0

; 1942 : 
; 1943 : 				if (width < 32 && (i > max_val || i < min_val))

  00e8a	83 7d c8 20	 cmp	 DWORD PTR _width$3[ebp], 32 ; 00000020H
  00e8e	7d 6f		 jge	 SHORT $LN99@pack_float
  00e90	8b 45 cc	 mov	 eax, DWORD PTR _i$4[ebp]
  00e93	3b 45 c4	 cmp	 eax, DWORD PTR _max_val$2[ebp]
  00e96	7f 08		 jg	 SHORT $LN96@pack_float
  00e98	8b 45 cc	 mov	 eax, DWORD PTR _i$4[ebp]
  00e9b	3b 45 c0	 cmp	 eax, DWORD PTR _min_val$1[ebp]
  00e9e	7d 5f		 jge	 SHORT $LN99@pack_float
$LN96@pack_float:

; 1944 : 				{
; 1945 : 					#ifdef DEBUG_PACK_OVERFLOW
; 1946 : 						debug_log_pack_overflow("unsigned float value", get_float_type_name(type), width, i, value);

  00ea0	51		 push	 ecx
  00ea1	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _value$[ebp]
  00ea6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eab	8b 45 cc	 mov	 eax, DWORD PTR _i$4[ebp]
  00eae	50		 push	 eax
  00eaf	8b 4d c8	 mov	 ecx, DWORD PTR _width$3[ebp]
  00eb2	51		 push	 ecx
  00eb3	6b 55 0c 18	 imul	 edx, DWORD PTR _type$[ebp], 24
  00eb7	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[edx]
  00ebd	50		 push	 eax
  00ebe	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KHCAAHDC@unsigned?5float?5value@
  00ec3	e8 00 00 00 00	 call	 ?debug_log_pack_overflow@@YGXPBD0IHM@Z ; debug_log_pack_overflow

; 1947 : 					#endif
; 1948 : 					
; 1949 : 					if (i > 0)

  00ec8	83 7d cc 00	 cmp	 DWORD PTR _i$4[ebp], 0
  00ecc	7e 08		 jle	 SHORT $LN97@pack_float

; 1950 : 						i = max_val;

  00ece	8b 45 c4	 mov	 eax, DWORD PTR _max_val$2[ebp]
  00ed1	89 45 cc	 mov	 DWORD PTR _i$4[ebp], eax

; 1951 : 					else

  00ed4	eb 06		 jmp	 SHORT $LN98@pack_float
$LN97@pack_float:

; 1952 : 						i = min_val;

  00ed6	8b 45 c0	 mov	 eax, DWORD PTR _min_val$1[ebp]
  00ed9	89 45 cc	 mov	 DWORD PTR _i$4[ebp], eax
$LN98@pack_float:

; 1953 : 					
; 1954 : 					ASSERT(!"Overflow when packing unsigned float type!");

  00edc	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CL@MHCJOPHK@Overflow?5when?5packing?5unsigned?5@
  00ee1	85 c0		 test	 eax, eax
  00ee3	74 1a		 je	 SHORT $LN99@pack_float
  00ee5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  00eea	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  00eef	50		 push	 eax
  00ef0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ef5	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@PODJFEOF@?$CB?$CCOverflow?5when?5packing?5unsigne@
  00efa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN99@pack_float:

; 1955 : 				}
; 1956 : 			}
; 1957 : 			#endif
; 1958 : 			ASSERT(!(i >> width));

  00eff	8b 45 cc	 mov	 eax, DWORD PTR _i$4[ebp]
  00f02	8b 4d c8	 mov	 ecx, DWORD PTR _width$3[ebp]
  00f05	d3 f8		 sar	 eax, cl
  00f07	85 c0		 test	 eax, eax
  00f09	74 1a		 je	 SHORT $LN100@pack_float
  00f0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z@4JA
  00f10	05 5e 01 00 00	 add	 eax, 350		; 0000015eH
  00f15	50		 push	 eax
  00f16	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LCPDJCJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f1b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EBNDMGNP@?$CB?$CIi?5?$DO?$DO?5width?$CJ@
  00f20	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN100@pack_float:

; 1959 : 
; 1960 : 			pack_unsigned_data (i, width);

  00f25	8b 45 c8	 mov	 eax, DWORD PTR _width$3[ebp]
  00f28	50		 push	 eax
  00f29	8b 4d cc	 mov	 ecx, DWORD PTR _i$4[ebp]
  00f2c	51		 push	 ecx
  00f2d	e8 00 00 00 00	 call	 ?pack_unsigned_data@@YGXIH@Z ; pack_unsigned_data

; 1961 : 
; 1962 : 			#if (DEBUG_MODULEPACK_ONE || DEBUG_MODULE_PACK_ALL)
; 1963 : 
; 1964 : 			if (float_type_database[type].debug_pack)
; 1965 : 			{
; 1966 : 				float
; 1967 : 					value;
; 1968 : 
; 1969 : 				//
; 1970 : 				// packed debug message to match unpacked debug message
; 1971 : 				//
; 1972 : 
; 1973 : 				switch (float_type_database[type].pack_num_fractional_bits)
; 1974 : 				{
; 1975 : 					case 0: value = unpack_float_0_fractional_bits (i); break;
; 1976 : 					case 1: value = unpack_float_1_fractional_bits (i); break;
; 1977 : 					case 2: value = unpack_float_2_fractional_bits (i); break;
; 1978 : 					case 3: value = unpack_float_3_fractional_bits (i); break;
; 1979 : 					case 4: value = unpack_float_4_fractional_bits (i); break;
; 1980 : 					case 5: value = unpack_float_5_fractional_bits (i); break;
; 1981 : 					case 6: value = unpack_float_6_fractional_bits (i); break;
; 1982 : 					case 7: value = unpack_float_7_fractional_bits (i); break;
; 1983 : 					case 8: value = unpack_float_8_fractional_bits (i); break;
; 1984 : 					case 9: value = unpack_float_9_fractional_bits (i); break;
; 1985 : 					case 10: value = unpack_float_10_fractional_bits (i); break;
; 1986 : 					case 11: value = unpack_float_11_fractional_bits (i); break;
; 1987 : 				}
; 1988 : 
; 1989 : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_FLOAT_VALUE, en, type, value);
; 1990 : 			}
; 1991 : 
; 1992 : 			#endif
; 1993 : 
; 1994 : 			break;

  00f32	eb 18		 jmp	 SHORT $LN2@pack_float
$LN101@pack_float:

; 1995 : 		}
; 1996 : 		////////////////////////////////////////
; 1997 : 		default:
; 1998 : 		////////////////////////////////////////
; 1999 : 		{
; 2000 : 			debug_fatal ("Invalid float pack type = %d", float_type_database[type].pack_type);

  00f34	6b 45 0c 18	 imul	 eax, DWORD PTR _type$[ebp], 24
  00f38	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?float_type_database@@3PAUFLOAT_TYPE_DATA@@A[eax+4]
  00f3e	51		 push	 ecx
  00f3f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@LBJMEMCB@Invalid?5float?5pack?5type?5?$DN?5?$CFd@
  00f44	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00f49	83 c4 08	 add	 esp, 8
$LN2@pack_float:

; 2001 : 
; 2002 : 			break;
; 2003 : 		}
; 2004 : 	}
; 2005 : }

  00f4c	5f		 pop	 edi
  00f4d	5e		 pop	 esi
  00f4e	5b		 pop	 ebx
  00f4f	8b e5		 mov	 esp, ebp
  00f51	5d		 pop	 ebp
  00f52	c2 0c 00	 ret	 12			; 0000000cH
  00f55	0f 1f 00	 npad	 3
$LN103@pack_float:
  00f58	00 00 00 00	 DD	 $LN14@pack_float
  00f5c	00 00 00 00	 DD	 $LN15@pack_float
  00f60	00 00 00 00	 DD	 $LN36@pack_float
  00f64	00 00 00 00	 DD	 $LN59@pack_float
  00f68	00 00 00 00	 DD	 $LN79@pack_float
$LN104@pack_float:
  00f6c	00 00 00 00	 DD	 $LN19@pack_float
  00f70	00 00 00 00	 DD	 $LN20@pack_float
  00f74	00 00 00 00	 DD	 $LN21@pack_float
  00f78	00 00 00 00	 DD	 $LN22@pack_float
  00f7c	00 00 00 00	 DD	 $LN23@pack_float
  00f80	00 00 00 00	 DD	 $LN24@pack_float
  00f84	00 00 00 00	 DD	 $LN25@pack_float
  00f88	00 00 00 00	 DD	 $LN26@pack_float
  00f8c	00 00 00 00	 DD	 $LN27@pack_float
  00f90	00 00 00 00	 DD	 $LN28@pack_float
  00f94	00 00 00 00	 DD	 $LN29@pack_float
  00f98	00 00 00 00	 DD	 $LN30@pack_float
$LN105@pack_float:
  00f9c	00 00 00 00	 DD	 $LN41@pack_float
  00fa0	00 00 00 00	 DD	 $LN42@pack_float
  00fa4	00 00 00 00	 DD	 $LN43@pack_float
  00fa8	00 00 00 00	 DD	 $LN44@pack_float
  00fac	00 00 00 00	 DD	 $LN45@pack_float
  00fb0	00 00 00 00	 DD	 $LN46@pack_float
  00fb4	00 00 00 00	 DD	 $LN47@pack_float
  00fb8	00 00 00 00	 DD	 $LN48@pack_float
  00fbc	00 00 00 00	 DD	 $LN49@pack_float
  00fc0	00 00 00 00	 DD	 $LN50@pack_float
  00fc4	00 00 00 00	 DD	 $LN51@pack_float
  00fc8	00 00 00 00	 DD	 $LN52@pack_float
$LN106@pack_float:
  00fcc	00 00 00 00	 DD	 $LN62@pack_float
  00fd0	00 00 00 00	 DD	 $LN63@pack_float
  00fd4	00 00 00 00	 DD	 $LN64@pack_float
  00fd8	00 00 00 00	 DD	 $LN65@pack_float
  00fdc	00 00 00 00	 DD	 $LN66@pack_float
  00fe0	00 00 00 00	 DD	 $LN67@pack_float
  00fe4	00 00 00 00	 DD	 $LN68@pack_float
  00fe8	00 00 00 00	 DD	 $LN69@pack_float
  00fec	00 00 00 00	 DD	 $LN70@pack_float
  00ff0	00 00 00 00	 DD	 $LN71@pack_float
  00ff4	00 00 00 00	 DD	 $LN72@pack_float
  00ff8	00 00 00 00	 DD	 $LN73@pack_float
$LN107@pack_float:
  00ffc	00 00 00 00	 DD	 $LN83@pack_float
  01000	00 00 00 00	 DD	 $LN84@pack_float
  01004	00 00 00 00	 DD	 $LN85@pack_float
  01008	00 00 00 00	 DD	 $LN86@pack_float
  0100c	00 00 00 00	 DD	 $LN87@pack_float
  01010	00 00 00 00	 DD	 $LN88@pack_float
  01014	00 00 00 00	 DD	 $LN89@pack_float
  01018	00 00 00 00	 DD	 $LN90@pack_float
  0101c	00 00 00 00	 DD	 $LN91@pack_float
  01020	00 00 00 00	 DD	 $LN92@pack_float
  01024	00 00 00 00	 DD	 $LN93@pack_float
  01028	00 00 00 00	 DD	 $LN94@pack_float
?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ENDP ; pack_float_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_float.c
;	COMDAT ?initialise_entity_float_value_default_functions@@YGXXZ
_TEXT	SEGMENT
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?initialise_entity_float_value_default_functions@@YGXXZ PROC ; initialise_entity_float_value_default_functions, COMDAT

; 1581 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1582 : 	int
; 1583 : 		i,
; 1584 : 		j;
; 1585 : 
; 1586 : 	for (i = 0; i < NUM_ENTITY_TYPES; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initialise:
  0001b	83 7d fc 26	 cmp	 DWORD PTR _i$[ebp], 38	; 00000026H
  0001f	0f 8d a8 00 00
	00		 jge	 $LN1@initialise

; 1587 : 	{
; 1588 : 		for (j = 0; j < NUM_FLOAT_TYPES; j++)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN7@initialise:
  00037	81 7d f8 af 00
	00 00		 cmp	 DWORD PTR _j$[ebp], 175	; 000000afH
  0003e	0f 8d 84 00 00
	00		 jge	 $LN6@initialise

; 1589 : 		{
; 1590 : 			fn_set_local_entity_raw_float_value[i][j]									= default_set_entity_float_value;

  00044	69 45 fc bc 02
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 700
  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0004e	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_set_local_entity_raw_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[eax+ecx*4], OFFSET ?default_set_entity_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; default_set_entity_float_value

; 1591 : 
; 1592 : 			fn_set_local_entity_float_value[i][j]										= default_set_entity_float_value;

  00059	69 45 fc bc 02
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 700
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00063	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[eax+ecx*4], OFFSET ?default_set_entity_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; default_set_entity_float_value

; 1593 : 
; 1594 : 			fn_set_client_server_entity_float_value[i][j][COMMS_MODEL_SERVER]	= default_set_entity_float_value;

  0006e	69 45 fc 78 05
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1400
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00078	8d 94 c8 00 00
	00 00		 lea	 edx, DWORD PTR ?fn_set_client_server_entity_float_value@@3PAY1KP@1P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[eax+ecx*8]
  0007f	b8 04 00 00 00	 mov	 eax, 4
  00084	6b c8 00	 imul	 ecx, eax, 0
  00087	c7 04 0a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx], OFFSET ?default_set_entity_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; default_set_entity_float_value

; 1595 : 
; 1596 : 			fn_set_client_server_entity_float_value[i][j][COMMS_MODEL_CLIENT]	= default_set_entity_float_value;

  0008e	69 45 fc 78 05
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 1400
  00095	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00098	8d 94 c8 00 00
	00 00		 lea	 edx, DWORD PTR ?fn_set_client_server_entity_float_value@@3PAY1KP@1P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[eax+ecx*8]
  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	c1 e0 00	 shl	 eax, 0
  000a7	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], OFFSET ?default_set_entity_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; default_set_entity_float_value

; 1597 : 
; 1598 : 			fn_get_local_entity_float_value[i][j]										= default_get_entity_float_value;

  000ae	69 45 fc bc 02
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 700
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  000b8	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[eax+ecx*4], OFFSET ?default_get_entity_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; default_get_entity_float_value

; 1599 : 		}

  000c3	e9 66 ff ff ff	 jmp	 $LN5@initialise
$LN6@initialise:

; 1600 : 	}

  000c8	e9 45 ff ff ff	 jmp	 $LN2@initialise
$LN1@initialise:

; 1601 : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
?initialise_entity_float_value_default_functions@@YGXXZ ENDP ; initialise_entity_float_value_default_functions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
END
