; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\ai\highlevl\imaps.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_fabsf
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?initialise_imaps@@YGXXZ			; initialise_imaps
PUBLIC	?deinitialise_imaps@@YGXXZ			; deinitialise_imaps
PUBLIC	?get_imap_value@@YGMW4IMAP_TYPES@@W4ENTITY_SIDES@@HH@Z ; get_imap_value
PUBLIC	?get_imap_char_value@@YGEW4IMAP_TYPES@@W4ENTITY_SIDES@@HH@Z ; get_imap_char_value
PUBLIC	?update_imap_sector_side@@YGXPAUENTITY@@H@Z	; update_imap_sector_side
PUBLIC	?update_imap_importance_level@@YGXPAUENTITY@@H@Z ; update_imap_importance_level
PUBLIC	?normalise_importance_imaps@@YGXXZ		; normalise_importance_imaps
PUBLIC	?update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z ; update_keysite_distance_to_friendly_base
PUBLIC	?update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z ; update_imap_distance_to_friendly_base
PUBLIC	?normalise_base_distance_imaps@@YGXXZ		; normalise_base_distance_imaps
PUBLIC	?update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z ; update_imap_surface_to_air_defence_level
PUBLIC	?normalise_air_defence_imaps@@YGXXZ		; normalise_air_defence_imaps
PUBLIC	?update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z ; update_imap_surface_to_surface_defence_level
PUBLIC	?normalise_surface_defence_imaps@@YGXXZ		; normalise_surface_defence_imaps
PUBLIC	?output_all_influence_maps@@YGXXZ		; output_all_influence_maps
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$max@H@std@@YGABHABH0@Z			; std::max<int>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??initialise_imaps@@YGXXZ@4JA	; `initialise_imaps'::`1'::__LINE__Var
PUBLIC	??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BG@EFCJJKAA@get_session_entity?5?$CI?$CJ@ ; `string'
PUBLIC	?__LINE__Var@?0??deinitialise_imaps@@YGXXZ@4JA	; `deinitialise_imaps'::`1'::__LINE__Var
PUBLIC	??_C@_0N@OFHMGLOH@imaps?5?$FLloop?$FN@		; `string'
PUBLIC	?__LINE__Var@?0??normalise_inlfuence_map@@YGXPAMPAEHH@Z@4JA ; `normalise_inlfuence_map'::`1'::__LINE__Var
PUBLIC	??_C@_08LAAABFKN@original@			; `string'
PUBLIC	??_C@_06DKIGHACF@output@			; `string'
PUBLIC	??_C@_0BO@IGOCGDFL@?$CIval?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIval?5?$DM?5256?40?$CJ@ ; `string'
PUBLIC	?__LINE__Var@?0??update_sector_side@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA ; `update_sector_side'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_0BO@MLNGOPCH@raw?9?$DOsector_side?5?$FLside?$FN?5?$DO?50?40@ ; `string'
PUBLIC	?__LINE__Var@?0??update_imap_sector_side@@YGXPAUENTITY@@H@Z@4JA ; `update_imap_sector_side'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA ; `update_sector_importance_level'::`1'::__LINE__Var
PUBLIC	??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ ; `string'
PUBLIC	??_C@_0CD@FNDMIEIO@raw?9?$DOimportance_level?5?$FLside?$FN?5?$DO?5@ ; `string'
PUBLIC	?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA ; `update_imap_importance_level'::`1'::__LINE__Var
PUBLIC	??_C@_0DC@BODFACEG@get_local_entity_type?5?$CIen?$CJ?5?$DN?$DN?5E@ ; `string'
PUBLIC	?__LINE__Var@?0??normalise_importance_imaps@@YGXXZ@4JA ; `normalise_importance_imaps'::`1'::__LINE__Var
PUBLIC	??_C@_03KHPNBODO@sec@				; `string'
PUBLIC	?__LINE__Var@?0??update_sector_distance_to_friendly_base@@YGMHHW4ENTITY_SIDES@@M@Z@4JA ; `update_sector_distance_to_friendly_base'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z@4JA ; `update_keysite_distance_to_friendly_base'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA ; `update_imap_distance_to_friendly_base'::`1'::__LINE__Var
PUBLIC	??_C@_05BINPNAAL@force@				; `string'
PUBLIC	?__LINE__Var@?0??normalise_base_distance_imaps@@YGXXZ@4JA ; `normalise_base_distance_imaps'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA ; `update_sector_surface_to_air_defence_level'::`1'::__LINE__Var
PUBLIC	??_C@_0CP@FHFLBHCH@raw?9?$DOsurface_to_air_defence_lev@ ; `string'
PUBLIC	?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA ; `update_imap_surface_to_air_defence_level'::`1'::__LINE__Var
PUBLIC	??_C@_06IDGHNJOB@sector@			; `string'
PUBLIC	?__LINE__Var@?0??normalise_air_defence_imaps@@YGXXZ@4JA ; `normalise_air_defence_imaps'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA ; `update_sector_surface_to_surface_defence_level'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@IDEHEHDL@raw?9?$DOsurface_to_surface_defence@ ; `string'
PUBLIC	?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA ; `update_imap_surface_to_surface_defence_level'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??normalise_surface_defence_imaps@@YGXXZ@4JA ; `normalise_surface_defence_imaps'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??output_sector_side_influence_map@@YGXPBD@Z@4JA ; `output_sector_side_influence_map'::`1'::__LINE__Var
PUBLIC	??_C@_08BABJIOEM@filename@			; `string'
PUBLIC	??_C@_0M@HOAGDBOJ@total?5?$DO?50?40@		; `string'
PUBLIC	?__LINE__Var@?0??output_sector_side_normalised_influence_map@@YGXPBD@Z@4JA ; `output_sector_side_normalised_influence_map'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA ; `output_sector_fog_of_war_influence_map'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA ; `output_sector_surface_to_air_influence_map'::`1'::__LINE__Var
PUBLIC	??_C@_0BJ@OGGOBCBO@imaps?5?$FLIMAP_AIR_DEFENCE?$FN@ ; `string'
PUBLIC	??_C@_0BP@JIGBBGLD@imaps?5?$FLIMAP_AIR_DEFENCE?$FN?$FLside?$FN@ ; `string'
PUBLIC	?__LINE__Var@?0??output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA ; `output_sector_surface_to_surface_influence_map'::`1'::__LINE__Var
PUBLIC	??_C@_0BN@JGIJHEHO@imaps?5?$FLIMAP_SURFACE_DEFENCE?$FN@ ; `string'
PUBLIC	??_C@_0CD@JJLOIKNF@imaps?5?$FLIMAP_SURFACE_DEFENCE?$FN?$FLsi@ ; `string'
PUBLIC	?__LINE__Var@?0??output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA ; `output_sector_importance_influence_map'::`1'::__LINE__Var
PUBLIC	??_C@_0BI@GDCADHHP@imaps?5?$FLIMAP_IMPORTANCE?$FN@ ; `string'
PUBLIC	??_C@_0BO@MONNJMFN@imaps?5?$FLIMAP_IMPORTANCE?$FN?$FLside?$FN@ ; `string'
PUBLIC	?__LINE__Var@?0??output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA ; `output_sector_distance_to_friendly_base_influence_map'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@JCJMAGG@imaps?5?$FLIMAP_BASE_DISTANCE?$FN@ ; `string'
PUBLIC	??_C@_0CB@CIFIECDP@imaps?5?$FLIMAP_BASE_DISTANCE?$FN?$FLside@ ; `string'
PUBLIC	??_C@_0BG@FJKFHBFO@OUTPUT?5INFLUENCE?5MAPS@	; `string'
PUBLIC	??_C@_0M@KBOMNHDD@IM_SIDE?4PSD@			; `string'
PUBLIC	??_C@_0N@BCEOIBJF@IM_SIDE2?4PSD@		; `string'
PUBLIC	??_C@_0M@KOOPPBDE@IM_FOGR?4PSD@			; `string'
PUBLIC	??_C@_0M@KNDJPDKP@IM_FOGB?4PSD@			; `string'
PUBLIC	??_C@_0M@DJAHCGBD@IM_AIRR?4PSD@			; `string'
PUBLIC	??_C@_0M@DKNBCEII@IM_AIRB?4PSD@			; `string'
PUBLIC	??_C@_0N@NLHCBNJL@IM_SURFR?4PSD@		; `string'
PUBLIC	??_C@_0N@NIKEBPAA@IM_SURFB?4PSD@		; `string'
PUBLIC	??_C@_0M@JBAKJLNI@IM_IMPR?4PSD@			; `string'
PUBLIC	??_C@_0M@JCNMJJED@IM_IMPB?4PSD@			; `string'
PUBLIC	??_C@_0N@BPHAPODD@IM_BASER?4PSD@		; `string'
PUBLIC	??_C@_0N@BMKGPMKI@IM_BASEB?4PSD@		; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3e99999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@4070000000000000
PUBLIC	__real@7f7fffff
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memset:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_fabs:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ:PROC ; debug_colour_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?malloc_heap_memory@@YGPAXI@Z:PROC		; malloc_heap_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?write_psd_rgb_file@@YGXPBDHHHPBE@Z:PROC	; write_psd_rgb_file
EXTRN	?write_psd_greyscale@@YGXPBDHHHPBE@Z:PROC	; write_psd_greyscale
EXTRN	?get_local_force_entity@@YGPAUENTITY@@W4ENTITY_SIDES@@@Z:PROC ; get_local_force_entity
EXTRN	?get_sector_fog_of_war_value@@YGMPAUENTITY@@W4ENTITY_SIDES@@@Z:PROC ; get_sector_fog_of_war_value
EXTRN	?sys_col_black@@3UREAL_COLOUR@@A:DWORD		; sys_col_black
EXTRN	?sys_col_blue@@3UREAL_COLOUR@@A:DWORD		; sys_col_blue
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?keysite_database@@3PAUKEYSITE_DATA@@A:BYTE	; keysite_database
EXTRN	?entity_sector_map@@3PAPAUENTITY@@A:DWORD	; entity_sector_map
EXTRN	?null_sector_entity_map_pointer_message@@3PBDB:DWORD ; null_sector_entity_map_pointer_message
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?imaps@@3PAPAPAEA DD 04H DUP (?)			; imaps
?imap_temp_array@@3PAMA DD 01H DUP (?)			; imap_temp_array
?imaps_initialised@@3HA DD 01H DUP (?)			; imaps_initialised
_BSS	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BMKGPMKI@IM_BASEB?4PSD@
CONST	SEGMENT
??_C@_0N@BMKGPMKI@IM_BASEB?4PSD@ DB 'IM_BASEB.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BPHAPODD@IM_BASER?4PSD@
CONST	SEGMENT
??_C@_0N@BPHAPODD@IM_BASER?4PSD@ DB 'IM_BASER.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCNMJJED@IM_IMPB?4PSD@
CONST	SEGMENT
??_C@_0M@JCNMJJED@IM_IMPB?4PSD@ DB 'IM_IMPB.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JBAKJLNI@IM_IMPR?4PSD@
CONST	SEGMENT
??_C@_0M@JBAKJLNI@IM_IMPR?4PSD@ DB 'IM_IMPR.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NIKEBPAA@IM_SURFB?4PSD@
CONST	SEGMENT
??_C@_0N@NIKEBPAA@IM_SURFB?4PSD@ DB 'IM_SURFB.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NLHCBNJL@IM_SURFR?4PSD@
CONST	SEGMENT
??_C@_0N@NLHCBNJL@IM_SURFR?4PSD@ DB 'IM_SURFR.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DKNBCEII@IM_AIRB?4PSD@
CONST	SEGMENT
??_C@_0M@DKNBCEII@IM_AIRB?4PSD@ DB 'IM_AIRB.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DJAHCGBD@IM_AIRR?4PSD@
CONST	SEGMENT
??_C@_0M@DJAHCGBD@IM_AIRR?4PSD@ DB 'IM_AIRR.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KNDJPDKP@IM_FOGB?4PSD@
CONST	SEGMENT
??_C@_0M@KNDJPDKP@IM_FOGB?4PSD@ DB 'IM_FOGB.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KOOPPBDE@IM_FOGR?4PSD@
CONST	SEGMENT
??_C@_0M@KOOPPBDE@IM_FOGR?4PSD@ DB 'IM_FOGR.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BCEOIBJF@IM_SIDE2?4PSD@
CONST	SEGMENT
??_C@_0N@BCEOIBJF@IM_SIDE2?4PSD@ DB 'IM_SIDE2.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KBOMNHDD@IM_SIDE?4PSD@
CONST	SEGMENT
??_C@_0M@KBOMNHDD@IM_SIDE?4PSD@ DB 'IM_SIDE.PSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FJKFHBFO@OUTPUT?5INFLUENCE?5MAPS@
CONST	SEGMENT
??_C@_0BG@FJKFHBFO@OUTPUT?5INFLUENCE?5MAPS@ DB 'OUTPUT INFLUENCE MAPS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CIFIECDP@imaps?5?$FLIMAP_BASE_DISTANCE?$FN?$FLside@
CONST	SEGMENT
??_C@_0CB@CIFIECDP@imaps?5?$FLIMAP_BASE_DISTANCE?$FN?$FLside@ DB 'imaps ['
	DB	'IMAP_BASE_DISTANCE][side]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JCJMAGG@imaps?5?$FLIMAP_BASE_DISTANCE?$FN@
CONST	SEGMENT
??_C@_0BL@JCJMAGG@imaps?5?$FLIMAP_BASE_DISTANCE?$FN@ DB 'imaps [IMAP_BASE'
	DB	'_DISTANCE]', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA DD 059aH ; `output_sector_distance_to_friendly_base_influence_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@MONNJMFN@imaps?5?$FLIMAP_IMPORTANCE?$FN?$FLside?$FN@
CONST	SEGMENT
??_C@_0BO@MONNJMFN@imaps?5?$FLIMAP_IMPORTANCE?$FN?$FLside?$FN@ DB 'imaps '
	DB	'[IMAP_IMPORTANCE][side]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GDCADHHP@imaps?5?$FLIMAP_IMPORTANCE?$FN@
CONST	SEGMENT
??_C@_0BI@GDCADHHP@imaps?5?$FLIMAP_IMPORTANCE?$FN@ DB 'imaps [IMAP_IMPORT'
	DB	'ANCE]', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA DD 057eH ; `output_sector_importance_influence_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CD@JJLOIKNF@imaps?5?$FLIMAP_SURFACE_DEFENCE?$FN?$FLsi@
CONST	SEGMENT
??_C@_0CD@JJLOIKNF@imaps?5?$FLIMAP_SURFACE_DEFENCE?$FN?$FLsi@ DB 'imaps ['
	DB	'IMAP_SURFACE_DEFENCE][side]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JGIJHEHO@imaps?5?$FLIMAP_SURFACE_DEFENCE?$FN@
CONST	SEGMENT
??_C@_0BN@JGIJHEHO@imaps?5?$FLIMAP_SURFACE_DEFENCE?$FN@ DB 'imaps [IMAP_S'
	DB	'URFACE_DEFENCE]', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA DD 0562H ; `output_sector_surface_to_surface_influence_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@JIGBBGLD@imaps?5?$FLIMAP_AIR_DEFENCE?$FN?$FLside?$FN@
CONST	SEGMENT
??_C@_0BP@JIGBBGLD@imaps?5?$FLIMAP_AIR_DEFENCE?$FN?$FLside?$FN@ DB 'imaps'
	DB	' [IMAP_AIR_DEFENCE][side]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGGOBCBO@imaps?5?$FLIMAP_AIR_DEFENCE?$FN@
CONST	SEGMENT
??_C@_0BJ@OGGOBCBO@imaps?5?$FLIMAP_AIR_DEFENCE?$FN@ DB 'imaps [IMAP_AIR_D'
	DB	'EFENCE]', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA DD 0546H ; `output_sector_surface_to_air_influence_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA DD 0508H ; `output_sector_fog_of_war_influence_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??output_sector_side_normalised_influence_map@@YGXPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??output_sector_side_normalised_influence_map@@YGXPBD@Z@4JA DD 04bfH ; `output_sector_side_normalised_influence_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@HOAGDBOJ@total?5?$DO?50?40@
CONST	SEGMENT
??_C@_0M@HOAGDBOJ@total?5?$DO?50?40@ DB 'total > 0.0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename@
CONST	SEGMENT
??_C@_08BABJIOEM@filename@ DB 'filename', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??output_sector_side_influence_map@@YGXPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??output_sector_side_influence_map@@YGXPBD@Z@4JA DD 046cH ; `output_sector_side_influence_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_surface_defence_imaps@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_surface_defence_imaps@@YGXXZ@4JA DD 043cH ; `normalise_surface_defence_imaps'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA DD 03f2H ; `update_imap_surface_to_surface_defence_level'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@IDEHEHDL@raw?9?$DOsurface_to_surface_defence@
CONST	SEGMENT
??_C@_0DD@IDEHEHDL@raw?9?$DOsurface_to_surface_defence@ DB 'raw->surface_'
	DB	'to_surface_defence_level [side] > 0.0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA DD 03c7H ; `update_sector_surface_to_surface_defence_level'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_air_defence_imaps@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_air_defence_imaps@@YGXXZ@4JA DD 0397H ; `normalise_air_defence_imaps'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06IDGHNJOB@sector@
CONST	SEGMENT
??_C@_06IDGHNJOB@sector@ DB 'sector', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA DD 034dH ; `update_imap_surface_to_air_defence_level'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CP@FHFLBHCH@raw?9?$DOsurface_to_air_defence_lev@
CONST	SEGMENT
??_C@_0CP@FHFLBHCH@raw?9?$DOsurface_to_air_defence_lev@ DB 'raw->surface_'
	DB	'to_air_defence_level [side] > 0.0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA DD 0322H ; `update_sector_surface_to_air_defence_level'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_base_distance_imaps@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_base_distance_imaps@@YGXXZ@4JA DD 02f2H ; `normalise_base_distance_imaps'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05BINPNAAL@force@
CONST	SEGMENT
??_C@_05BINPNAAL@force@ DB 'force', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA DD 02b7H ; `update_imap_distance_to_friendly_base'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z@4JA DD 026bH ; `update_keysite_distance_to_friendly_base'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_sector_distance_to_friendly_base@@YGMHHW4ENTITY_SIDES@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_sector_distance_to_friendly_base@@YGMHHW4ENTITY_SIDES@@M@Z@4JA DD 0249H ; `update_sector_distance_to_friendly_base'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03KHPNBODO@sec@
CONST	SEGMENT
??_C@_03KHPNBODO@sec@ DB 'sec', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_importance_imaps@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_importance_imaps@@YGXXZ@4JA DD 0219H ; `normalise_importance_imaps'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DC@BODFACEG@get_local_entity_type?5?$CIen?$CJ?5?$DN?$DN?5E@
CONST	SEGMENT
??_C@_0DC@BODFACEG@get_local_entity_type?5?$CIen?$CJ?5?$DN?$DN?5E@ DB 'ge'
	DB	't_local_entity_type (en) == ENTITY_TYPE_KEYSITE', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA DD 01c7H ; `update_imap_importance_level'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CD@FNDMIEIO@raw?9?$DOimportance_level?5?$FLside?$FN?5?$DO?5@
CONST	SEGMENT
??_C@_0CD@FNDMIEIO@raw?9?$DOimportance_level?5?$FLside?$FN?5?$DO?5@ DB 'r'
	DB	'aw->importance_level [side] > 0.0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
CONST	SEGMENT
??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ DB 'ge'
	DB	't_comms_model () == COMMS_MODEL_SERVER', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA DD 019cH ; `update_sector_importance_level'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_imap_sector_side@@YGXPAUENTITY@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_imap_sector_side@@YGXPAUENTITY@@H@Z@4JA DD 0150H ; `update_imap_sector_side'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@MLNGOPCH@raw?9?$DOsector_side?5?$FLside?$FN?5?$DO?50?40@
CONST	SEGMENT
??_C@_0BO@MLNGOPCH@raw?9?$DOsector_side?5?$FLside?$FN?5?$DO?50?40@ DB 'ra'
	DB	'w->sector_side [side] > 0.0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_sector_side@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_sector_side@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA DD 0127H ; `update_sector_side'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@IGOCGDFL@?$CIval?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIval?5?$DM?5256?40?$CJ@
CONST	SEGMENT
??_C@_0BO@IGOCGDFL@?$CIval?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIval?5?$DM?5256?40?$CJ@ DB '('
	DB	'val >= 0.0) && (val < 256.0)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKIGHACF@output@
CONST	SEGMENT
??_C@_06DKIGHACF@output@ DB 'output', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LAAABFKN@original@
CONST	SEGMENT
??_C@_08LAAABFKN@original@ DB 'original', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_inlfuence_map@@YGXPAMPAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_inlfuence_map@@YGXPAMPAEHH@Z@4JA DD 0beH ; `normalise_inlfuence_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@OFHMGLOH@imaps?5?$FLloop?$FN@
CONST	SEGMENT
??_C@_0N@OFHMGLOH@imaps?5?$FLloop?$FN@ DB 'imaps [loop]', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??deinitialise_imaps@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??deinitialise_imaps@@YGXXZ@4JA DD 07cH	; `deinitialise_imaps'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@EFCJJKAA@get_session_entity?5?$CI?$CJ@
CONST	SEGMENT
??_C@_0BG@EFCJJKAA@get_session_entity?5?$CI?$CJ@ DB 'get_session_entity ('
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nhv9'
	DB	'0\projects\eech\aphavoc\source\ai\highlevl\imaps.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_imaps@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_imaps@@YGXXZ@4JA DD 05fH	; `initialise_imaps'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z
_TEXT	SEGMENT
_side$ = 8						; size = 4
_filename$ = 12						; size = 4
?output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z PROC ; output_sector_distance_to_friendly_base_influence_map, COMDAT

; 1434 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1435 : 	#ifdef DEBUG
; 1436 : 
; 1437 : 	ASSERT (filename);

  00009	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@output_sec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  00014	83 c0 03	 add	 eax, 3
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08BABJIOEM@filename@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@output_sec:

; 1438 : 
; 1439 : 	if (get_comms_model () != COMMS_MODEL_SERVER)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	74 05		 je	 SHORT $LN3@output_sec

; 1440 : 	{
; 1441 : 		return;

  00030	e9 8a 00 00 00	 jmp	 $LN1@output_sec
$LN3@output_sec:

; 1442 : 	}
; 1443 : 
; 1444 : 	ASSERT (imaps [IMAP_BASE_DISTANCE]);

  00035	b8 04 00 00 00	 mov	 eax, 4
  0003a	c1 e0 00	 shl	 eax, 0
  0003d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR ?imaps@@3PAPAPAEA[eax], 0
  00044	75 18		 jne	 SHORT $LN4@output_sec
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  0004b	83 c0 0a	 add	 eax, 10			; 0000000aH
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JCJMAGG@imaps?5?$FLIMAP_BASE_DISTANCE?$FN@
  00059	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@output_sec:

; 1445 : 
; 1446 : 	ASSERT (imaps [IMAP_BASE_DISTANCE][side]);

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	c1 e0 00	 shl	 eax, 0
  00066	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?imaps@@3PAPAPAEA[eax]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _side$[ebp]
  0006f	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  00073	75 18		 jne	 SHORT $LN5@output_sec
  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  0007a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CIFIECDP@imaps?5?$FLIMAP_BASE_DISTANCE?$FN?$FLside@
  00088	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@output_sec:

; 1447 : 
; 1448 : //	invert_inlfuence_map (imaps [IMAP_BASE_DISTANCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);
; 1449 : 
; 1450 : 	write_psd_greyscale (filename, NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS, NUM_MAP_X_SECTORS, imaps [IMAP_BASE_DISTANCE][side]);

  0008d	b8 04 00 00 00	 mov	 eax, 4
  00092	c1 e0 00	 shl	 eax, 0
  00095	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?imaps@@3PAPAPAEA[eax]
  0009b	8b 55 08	 mov	 edx, DWORD PTR _side$[ebp]
  0009e	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000a1	50		 push	 eax
  000a2	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000a8	51		 push	 ecx
  000a9	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  000af	52		 push	 edx
  000b0	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000b5	50		 push	 eax
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 ?write_psd_greyscale@@YGXPBDHHHPBE@Z ; write_psd_greyscale
$LN1@output_sec:

; 1451 : 
; 1452 : //	invert_inlfuence_map (imaps [IMAP_BASE_DISTANCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);
; 1453 : 
; 1454 : 	#endif
; 1455 : }

  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 08 00	 ret	 8
?output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ENDP ; output_sector_distance_to_friendly_base_influence_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z
_TEXT	SEGMENT
_side$ = 8						; size = 4
_filename$ = 12						; size = 4
?output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z PROC ; output_sector_importance_influence_map, COMDAT

; 1406 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1407 : 	#ifdef DEBUG
; 1408 : 
; 1409 : 	ASSERT (filename);

  00009	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@output_sec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  00014	83 c0 03	 add	 eax, 3
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08BABJIOEM@filename@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@output_sec:

; 1410 : 
; 1411 : 	if (get_comms_model () != COMMS_MODEL_SERVER)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	74 05		 je	 SHORT $LN3@output_sec

; 1412 : 	{
; 1413 : 		return;

  00030	e9 8a 00 00 00	 jmp	 $LN1@output_sec
$LN3@output_sec:

; 1414 : 	}
; 1415 : 
; 1416 : 	ASSERT (imaps [IMAP_IMPORTANCE]);

  00035	b8 04 00 00 00	 mov	 eax, 4
  0003a	6b c8 00	 imul	 ecx, eax, 0
  0003d	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR ?imaps@@3PAPAPAEA[ecx], 0
  00044	75 18		 jne	 SHORT $LN4@output_sec
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  0004b	83 c0 0a	 add	 eax, 10			; 0000000aH
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GDCADHHP@imaps?5?$FLIMAP_IMPORTANCE?$FN@
  00059	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@output_sec:

; 1417 : 
; 1418 : 	ASSERT (imaps [IMAP_IMPORTANCE][side]);

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	6b c8 00	 imul	 ecx, eax, 0
  00066	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?imaps@@3PAPAPAEA[ecx]
  0006c	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  0006f	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00073	75 18		 jne	 SHORT $LN5@output_sec
  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  0007a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MONNJMFN@imaps?5?$FLIMAP_IMPORTANCE?$FN?$FLside?$FN@
  00088	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@output_sec:

; 1419 : 
; 1420 : //	invert_inlfuence_map (imaps [IMAP_IMPORTANCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);
; 1421 : 
; 1422 : 	write_psd_greyscale (filename, NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS, NUM_MAP_X_SECTORS, imaps [IMAP_IMPORTANCE][side]);

  0008d	b8 04 00 00 00	 mov	 eax, 4
  00092	6b c8 00	 imul	 ecx, eax, 0
  00095	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?imaps@@3PAPAPAEA[ecx]
  0009b	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  0009e	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  000a1	51		 push	 ecx
  000a2	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000a8	52		 push	 edx
  000a9	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  000ae	50		 push	 eax
  000af	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000b5	51		 push	 ecx
  000b6	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ?write_psd_greyscale@@YGXPBDHHHPBE@Z ; write_psd_greyscale
$LN1@output_sec:

; 1423 : 
; 1424 : //	invert_inlfuence_map (imaps [IMAP_IMPORTANCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);
; 1425 : 
; 1426 : 	#endif
; 1427 : }

  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 08 00	 ret	 8
?output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ENDP ; output_sector_importance_influence_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z
_TEXT	SEGMENT
_side$ = 8						; size = 4
_filename$ = 12						; size = 4
?output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z PROC ; output_sector_surface_to_surface_influence_map, COMDAT

; 1378 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1379 : 	#ifdef DEBUG
; 1380 : 
; 1381 : 	ASSERT (filename);

  00009	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@output_sec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  00014	83 c0 03	 add	 eax, 3
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08BABJIOEM@filename@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@output_sec:

; 1382 : 
; 1383 : 	if (get_comms_model () != COMMS_MODEL_SERVER)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	74 05		 je	 SHORT $LN3@output_sec

; 1384 : 	{
; 1385 : 		return;

  00030	e9 8a 00 00 00	 jmp	 $LN1@output_sec
$LN3@output_sec:

; 1386 : 	}
; 1387 : 
; 1388 : 	ASSERT (imaps [IMAP_SURFACE_DEFENCE]);

  00035	b8 04 00 00 00	 mov	 eax, 4
  0003a	6b c8 03	 imul	 ecx, eax, 3
  0003d	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR ?imaps@@3PAPAPAEA[ecx], 0
  00044	75 18		 jne	 SHORT $LN4@output_sec
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  0004b	83 c0 0a	 add	 eax, 10			; 0000000aH
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JGIJHEHO@imaps?5?$FLIMAP_SURFACE_DEFENCE?$FN@
  00059	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@output_sec:

; 1389 : 
; 1390 : 	ASSERT (imaps [IMAP_SURFACE_DEFENCE][side]);

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	6b c8 03	 imul	 ecx, eax, 3
  00066	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?imaps@@3PAPAPAEA[ecx]
  0006c	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  0006f	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00073	75 18		 jne	 SHORT $LN5@output_sec
  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  0007a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JJLOIKNF@imaps?5?$FLIMAP_SURFACE_DEFENCE?$FN?$FLsi@
  00088	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@output_sec:

; 1391 : 
; 1392 : //	invert_inlfuence_map (imaps [IMAP_SURFACE_DEFENCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);
; 1393 : 
; 1394 : 	write_psd_greyscale (filename, NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS, NUM_MAP_X_SECTORS, imaps [IMAP_SURFACE_DEFENCE][side]);

  0008d	b8 04 00 00 00	 mov	 eax, 4
  00092	6b c8 03	 imul	 ecx, eax, 3
  00095	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?imaps@@3PAPAPAEA[ecx]
  0009b	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  0009e	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  000a1	51		 push	 ecx
  000a2	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000a8	52		 push	 edx
  000a9	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  000ae	50		 push	 eax
  000af	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000b5	51		 push	 ecx
  000b6	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ?write_psd_greyscale@@YGXPBDHHHPBE@Z ; write_psd_greyscale
$LN1@output_sec:

; 1395 : 
; 1396 : //	invert_inlfuence_map (imaps [IMAP_SURFACE_DEFENCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);
; 1397 : 
; 1398 : 	#endif
; 1399 : }

  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 08 00	 ret	 8
?output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ENDP ; output_sector_surface_to_surface_influence_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z
_TEXT	SEGMENT
_side$ = 8						; size = 4
_filename$ = 12						; size = 4
?output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z PROC ; output_sector_surface_to_air_influence_map, COMDAT

; 1350 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1351 : 	#ifdef DEBUG
; 1352 : 
; 1353 : 	ASSERT (filename);

  00009	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@output_sec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  00014	83 c0 03	 add	 eax, 3
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08BABJIOEM@filename@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@output_sec:

; 1354 : 
; 1355 : 	if (get_comms_model () != COMMS_MODEL_SERVER)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	74 05		 je	 SHORT $LN3@output_sec

; 1356 : 	{
; 1357 : 		return;

  00030	e9 87 00 00 00	 jmp	 $LN1@output_sec
$LN3@output_sec:

; 1358 : 	}
; 1359 : 
; 1360 : 	ASSERT (imaps [IMAP_AIR_DEFENCE]);

  00035	b8 04 00 00 00	 mov	 eax, 4
  0003a	d1 e0		 shl	 eax, 1
  0003c	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR ?imaps@@3PAPAPAEA[eax], 0
  00043	75 18		 jne	 SHORT $LN4@output_sec
  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  0004a	83 c0 0a	 add	 eax, 10			; 0000000aH
  0004d	50		 push	 eax
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OGGOBCBO@imaps?5?$FLIMAP_AIR_DEFENCE?$FN@
  00058	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@output_sec:

; 1361 : 
; 1362 : 	ASSERT (imaps [IMAP_AIR_DEFENCE][side]);

  0005d	b8 04 00 00 00	 mov	 eax, 4
  00062	d1 e0		 shl	 eax, 1
  00064	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?imaps@@3PAPAPAEA[eax]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _side$[ebp]
  0006d	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  00071	75 18		 jne	 SHORT $LN5@output_sec
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  00078	83 c0 0c	 add	 eax, 12			; 0000000cH
  0007b	50		 push	 eax
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JIGBBGLD@imaps?5?$FLIMAP_AIR_DEFENCE?$FN?$FLside?$FN@
  00086	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@output_sec:

; 1363 : 
; 1364 : //	invert_inlfuence_map (imaps [IMAP_AIR_DEFENCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);
; 1365 : 
; 1366 : 	write_psd_greyscale (filename, NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS, NUM_MAP_X_SECTORS, imaps [IMAP_AIR_DEFENCE][side]);

  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	d1 e0		 shl	 eax, 1
  00092	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?imaps@@3PAPAPAEA[eax]
  00098	8b 55 08	 mov	 edx, DWORD PTR _side$[ebp]
  0009b	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0009e	50		 push	 eax
  0009f	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000a5	51		 push	 ecx
  000a6	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  000ac	52		 push	 edx
  000ad	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000b2	50		 push	 eax
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 ?write_psd_greyscale@@YGXPBDHHHPBE@Z ; write_psd_greyscale
$LN1@output_sec:

; 1367 : 
; 1368 : //	invert_inlfuence_map (imaps [IMAP_AIR_DEFENCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);
; 1369 : 
; 1370 : 	#endif
; 1371 : }

  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 08 00	 ret	 8
?output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ENDP ; output_sector_surface_to_air_influence_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z
_TEXT	SEGMENT
tv210 = -104						; size = 8
tv84 = -104						; size = 4
tv146 = -100						; size = 4
tv76 = -100						; size = 4
_max_fog$ = -32						; size = 4
_val$ = -28						; size = 4
_output$ = -24						; size = 4
_sec$ = -20						; size = 4
_fog$ = -16						; size = 4
_sz$ = -12						; size = 4
_sx$ = -8						; size = 4
_z$ = -4						; size = 4
_side$ = 8						; size = 4
_filename$ = 12						; size = 4
?output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z PROC ; output_sector_fog_of_war_influence_map, COMDAT

; 1288 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1289 : 	#ifdef DEBUG
; 1290 : 
; 1291 : 	int
; 1292 : 		z,
; 1293 : 		sx,
; 1294 : 		sz,
; 1295 : 		fog;
; 1296 : 
; 1297 : 	entity
; 1298 : 		*sec;
; 1299 : 
; 1300 : 	unsigned char
; 1301 : 		*output;
; 1302 : 
; 1303 : 	float
; 1304 : 		val,
; 1305 : 		max_fog;
; 1306 : 
; 1307 : 	ASSERT (filename);

  00009	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@output_sec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  00014	83 c0 13	 add	 eax, 19			; 00000013H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08BABJIOEM@filename@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@output_sec:

; 1308 : 
; 1309 : 	if (get_comms_model () != COMMS_MODEL_SERVER)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	74 05		 je	 SHORT $LN9@output_sec

; 1310 : 	{
; 1311 : 		return;

  00030	e9 0d 02 00 00	 jmp	 $LN1@output_sec
$LN9@output_sec:

; 1312 : 	}
; 1313 : 
; 1314 : 	max_fog = get_local_entity_float_value (get_session_entity (), FLOAT_TYPE_FOG_OF_WAR_MAXIMUM_VALUE);

  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0003c	74 0c		 je	 SHORT $LN12@output_sec
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	89 4d 9c	 mov	 DWORD PTR tv76[ebp], ecx
  00048	eb 21		 jmp	 SHORT $LN13@output_sec
$LN12@output_sec:
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  00050	83 c2 1a	 add	 edx, 26			; 0000001aH
  00053	52		 push	 edx
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00064	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN13@output_sec:
  0006b	b9 01 00 00 00	 mov	 ecx, 1
  00070	85 c9		 test	 ecx, ecx
  00072	74 09		 je	 SHORT $LN14@output_sec
  00074	c7 45 98 2c 00
	00 00		 mov	 DWORD PTR tv84[ebp], 44	; 0000002cH
  0007b	eb 21		 jmp	 SHORT $LN15@output_sec
$LN14@output_sec:
  0007d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  00083	83 c2 1a	 add	 edx, 26			; 0000001aH
  00086	52		 push	 edx
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00097	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN15@output_sec:
  0009e	6a 2c		 push	 44			; 0000002cH
  000a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  000a6	51		 push	 ecx
  000a7	69 55 9c bc 02
	00 00		 imul	 edx, DWORD PTR tv76[ebp], 700
  000ae	8b 45 98	 mov	 eax, DWORD PTR tv84[ebp]
  000b1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000b8	ff d1		 call	 ecx
  000ba	d9 5d e0	 fstp	 DWORD PTR _max_fog$[ebp]

; 1315 : 
; 1316 : 	output = (unsigned char*) safe_malloc (NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS);

  000bd	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000c2	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000cf	89 45 e8	 mov	 DWORD PTR _output$[ebp], eax

; 1317 : 
; 1318 : 	memset (output, 0, (NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS));

  000d2	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000d7	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  000de	50		 push	 eax
  000df	6a 00		 push	 0
  000e1	8b 4d e8	 mov	 ecx, DWORD PTR _output$[ebp]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 _memset
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1319 : 				
; 1320 : 	for (sz = 0; sz < NUM_MAP_Z_SECTORS; sz++)

  000ed	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _sz$[ebp], 0
  000f4	eb 09		 jmp	 SHORT $LN4@output_sec
$LN2@output_sec:
  000f6	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  000f9	83 c0 01	 add	 eax, 1
  000fc	89 45 f4	 mov	 DWORD PTR _sz$[ebp], eax
$LN4@output_sec:
  000ff	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  00102	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00108	0f 8d 0a 01 00
	00		 jge	 $LN3@output_sec

; 1321 : 	{
; 1322 : 		for (sx = 0; sx < NUM_MAP_X_SECTORS; sx++)

  0010e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _sx$[ebp], 0
  00115	eb 09		 jmp	 SHORT $LN7@output_sec
$LN5@output_sec:
  00117	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  0011a	83 c0 01	 add	 eax, 1
  0011d	89 45 f8	 mov	 DWORD PTR _sx$[ebp], eax
$LN7@output_sec:
  00120	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  00123	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00129	0f 8d e4 00 00
	00		 jge	 $LN6@output_sec

; 1323 : 		{
; 1324 : 			sec = get_local_raw_sector_entity (sx, sz);

  0012f	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  00132	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00139	03 45 f8	 add	 eax, DWORD PTR _sx$[ebp]
  0013c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00142	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00146	74 1a		 je	 SHORT $LN16@output_sec
  00148	8b 55 f4	 mov	 edx, DWORD PTR _sz$[ebp]
  0014b	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00152	03 55 f8	 add	 edx, DWORD PTR _sx$[ebp]
  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  0015a	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0015d	89 4d 9c	 mov	 DWORD PTR tv146[ebp], ecx
  00160	eb 21		 jmp	 SHORT $LN17@output_sec
$LN16@output_sec:
  00162	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  00168	83 c2 24	 add	 edx, 36			; 00000024H
  0016b	52		 push	 edx
  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00171	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0017c	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN17@output_sec:
  00183	8b 4d 9c	 mov	 ecx, DWORD PTR tv146[ebp]
  00186	89 4d ec	 mov	 DWORD PTR _sec$[ebp], ecx

; 1325 : 
; 1326 : 			ASSERT (sec);

  00189	83 7d ec 00	 cmp	 DWORD PTR _sec$[ebp], 0
  0018d	75 18		 jne	 SHORT $LN10@output_sec
  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z@4JA
  00194	83 c0 26	 add	 eax, 38			; 00000026H
  00197	50		 push	 eax
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  001a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@output_sec:

; 1327 : 
; 1328 : 			val = (255.0 * get_sector_fog_of_war_value (sec, side)) / max_fog;

  001a7	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  001aa	50		 push	 eax
  001ab	8b 4d ec	 mov	 ecx, DWORD PTR _sec$[ebp]
  001ae	51		 push	 ecx
  001af	e8 00 00 00 00	 call	 ?get_sector_fog_of_war_value@@YGMPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_sector_fog_of_war_value
  001b4	dd 5d 98	 fstp	 QWORD PTR tv210[ebp]
  001b7	f2 0f 10 45 98	 movsd	 xmm0, QWORD PTR tv210[ebp]
  001bc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406fe00000000000
  001c4	f3 0f 5a 4d e0	 cvtss2sd xmm1, DWORD PTR _max_fog$[ebp]
  001c9	f2 0f 5e c1	 divsd	 xmm0, xmm1
  001cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d1	f3 0f 11 45 e4	 movss	 DWORD PTR _val$[ebp], xmm0

; 1329 : 
; 1330 : 			convert_float_to_int (val, &fog);

  001d6	8d 45 f0	 lea	 eax, DWORD PTR _fog$[ebp]
  001d9	50		 push	 eax
  001da	51		 push	 ecx
  001db	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _val$[ebp]
  001e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e5	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1331 : 
; 1332 : 			z = (NUM_MAP_Z_SECTORS - sz) - 1;

  001ea	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  001ef	2b 45 f4	 sub	 eax, DWORD PTR _sz$[ebp]
  001f2	83 e8 01	 sub	 eax, 1
  001f5	89 45 fc	 mov	 DWORD PTR _z$[ebp], eax

; 1333 : 
; 1334 : 			output [(z * NUM_MAP_X_SECTORS) + sx] = fog;

  001f8	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  001fb	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00202	03 45 f8	 add	 eax, DWORD PTR _sx$[ebp]
  00205	8b 4d e8	 mov	 ecx, DWORD PTR _output$[ebp]
  00208	8a 55 f0	 mov	 dl, BYTE PTR _fog$[ebp]
  0020b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 1335 : 		}

  0020e	e9 04 ff ff ff	 jmp	 $LN5@output_sec
$LN6@output_sec:

; 1336 : 	}

  00213	e9 de fe ff ff	 jmp	 $LN2@output_sec
$LN3@output_sec:

; 1337 : 
; 1338 : 	write_psd_greyscale (filename, NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS, NUM_MAP_X_SECTORS, output);

  00218	8b 45 e8	 mov	 eax, DWORD PTR _output$[ebp]
  0021b	50		 push	 eax
  0021c	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00222	51		 push	 ecx
  00223	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00229	52		 push	 edx
  0022a	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0022f	50		 push	 eax
  00230	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00233	51		 push	 ecx
  00234	e8 00 00 00 00	 call	 ?write_psd_greyscale@@YGXPBDHHHPBE@Z ; write_psd_greyscale

; 1339 : 
; 1340 : 	safe_free (output);

  00239	8b 45 e8	 mov	 eax, DWORD PTR _output$[ebp]
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN1@output_sec:

; 1341 : 
; 1342 : 	#endif
; 1343 : }

  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	5b		 pop	 ebx
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c2 08 00	 ret	 8
?output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ENDP ; output_sector_fog_of_war_influence_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?output_sector_side_normalised_influence_map@@YGXPBD@Z
_TEXT	SEGMENT
tv151 = -100						; size = 4
tv145 = -96						; size = 4
tv138 = -92						; size = 4
tv95 = -92						; size = 4
_col$ = -24						; size = 4
_output$ = -20						; size = 4
_sec$ = -16						; size = 4
_sz$ = -12						; size = 4
_sx$ = -8						; size = 4
_z$ = -4						; size = 4
_filename$ = 8						; size = 4
?output_sector_side_normalised_influence_map@@YGXPBD@Z PROC ; output_sector_side_normalised_influence_map, COMDAT

; 1215 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1216 : 	#ifdef DEBUG
; 1217 : 
; 1218 : 	int
; 1219 : 		z,
; 1220 : 		sx,
; 1221 : 		sz;
; 1222 : 
; 1223 : 	entity
; 1224 : 		*sec;
; 1225 : 
; 1226 : 	unsigned char
; 1227 : 		*output;
; 1228 : 
; 1229 : 	rgb_colour
; 1230 : 		*col;
; 1231 : 
; 1232 : 	ASSERT (filename);

  00009	83 7d 08 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN10@output_sec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_side_normalised_influence_map@@YGXPBD@Z@4JA
  00014	83 c0 11	 add	 eax, 17			; 00000011H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08BABJIOEM@filename@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@output_sec:

; 1233 : 
; 1234 : 	output = (unsigned char*) safe_malloc (NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS * 3);

  00027	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0002c	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00033	6b c8 03	 imul	 ecx, eax, 3
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0003c	89 45 ec	 mov	 DWORD PTR _output$[ebp], eax

; 1235 : 
; 1236 : 	memset (output, 0, (NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS * 3));

  0003f	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00044	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  0004b	6b c8 03	 imul	 ecx, eax, 3
  0004e	51		 push	 ecx
  0004f	6a 00		 push	 0
  00051	8b 55 ec	 mov	 edx, DWORD PTR _output$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _memset
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1237 : 				
; 1238 : 	for (sz = 0; sz < NUM_MAP_Z_SECTORS; sz++)

  0005d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _sz$[ebp], 0
  00064	eb 09		 jmp	 SHORT $LN4@output_sec
$LN2@output_sec:
  00066	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  00069	83 c0 01	 add	 eax, 1
  0006c	89 45 f4	 mov	 DWORD PTR _sz$[ebp], eax
$LN4@output_sec:
  0006f	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  00072	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00078	0f 8d ab 01 00
	00		 jge	 $LN3@output_sec

; 1239 : 	{
; 1240 : 		for (sx = 0; sx < NUM_MAP_X_SECTORS; sx++)

  0007e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _sx$[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN7@output_sec
$LN5@output_sec:
  00087	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 f8	 mov	 DWORD PTR _sx$[ebp], eax
$LN7@output_sec:
  00090	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  00093	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00099	0f 8d 85 01 00
	00		 jge	 $LN6@output_sec

; 1241 : 		{
; 1242 : 			sec = get_local_raw_sector_entity (sx, sz);

  0009f	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  000a2	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000a9	03 45 f8	 add	 eax, DWORD PTR _sx$[ebp]
  000ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  000b2	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  000b6	74 1a		 je	 SHORT $LN16@output_sec
  000b8	8b 55 f4	 mov	 edx, DWORD PTR _sz$[ebp]
  000bb	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000c2	03 55 f8	 add	 edx, DWORD PTR _sx$[ebp]
  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  000ca	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  000cd	89 4d a4	 mov	 DWORD PTR tv95[ebp], ecx
  000d0	eb 21		 jmp	 SHORT $LN17@output_sec
$LN16@output_sec:
  000d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??output_sector_side_normalised_influence_map@@YGXPBD@Z@4JA
  000d8	83 c2 1b	 add	 edx, 27			; 0000001bH
  000db	52		 push	 edx
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ec	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN17@output_sec:
  000f3	8b 4d a4	 mov	 ecx, DWORD PTR tv95[ebp]
  000f6	89 4d f0	 mov	 DWORD PTR _sec$[ebp], ecx

; 1243 : 
; 1244 : 			ASSERT (sec);

  000f9	83 7d f0 00	 cmp	 DWORD PTR _sec$[ebp], 0
  000fd	75 18		 jne	 SHORT $LN11@output_sec
  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_side_normalised_influence_map@@YGXPBD@Z@4JA
  00104	83 c0 1d	 add	 eax, 29			; 0000001dH
  00107	50		 push	 eax
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  00112	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@output_sec:

; 1245 : 
; 1246 : 			switch (get_local_entity_int_value (sec, INT_TYPE_SECTOR_SIDE))

  00117	83 7d f0 00	 cmp	 DWORD PTR _sec$[ebp], 0
  0011b	74 0a		 je	 SHORT $LN18@output_sec
  0011d	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  00120	8b 08		 mov	 ecx, DWORD PTR [eax]
  00122	89 4d a4	 mov	 DWORD PTR tv138[ebp], ecx
  00125	eb 1d		 jmp	 SHORT $LN19@output_sec
$LN18@output_sec:
  00127	68 de 04 00 00	 push	 1246			; 000004deH
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00131	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00137	52		 push	 edx
  00138	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0013d	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv138[ebp], 0
$LN19@output_sec:
  00144	b8 01 00 00 00	 mov	 eax, 1
  00149	85 c0		 test	 eax, eax
  0014b	74 09		 je	 SHORT $LN20@output_sec
  0014d	c7 45 a0 b7 00
	00 00		 mov	 DWORD PTR tv145[ebp], 183 ; 000000b7H
  00154	eb 1d		 jmp	 SHORT $LN21@output_sec
$LN20@output_sec:
  00156	68 de 04 00 00	 push	 1246			; 000004deH
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00160	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00166	51		 push	 ecx
  00167	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN21@output_sec:
  00173	68 b7 00 00 00	 push	 183			; 000000b7H
  00178	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  0017b	52		 push	 edx
  0017c	69 45 a4 5c 04
	00 00		 imul	 eax, DWORD PTR tv138[ebp], 1116
  00183	8b 4d a0	 mov	 ecx, DWORD PTR tv145[ebp]
  00186	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0018d	ff d2		 call	 edx
  0018f	89 45 9c	 mov	 DWORD PTR tv151[ebp], eax
  00192	83 7d 9c 01	 cmp	 DWORD PTR tv151[ebp], 1
  00196	74 08		 je	 SHORT $LN12@output_sec
  00198	83 7d 9c 02	 cmp	 DWORD PTR tv151[ebp], 2
  0019c	74 0b		 je	 SHORT $LN13@output_sec
  0019e	eb 12		 jmp	 SHORT $LN14@output_sec
$LN12@output_sec:

; 1247 : 			{
; 1248 : 				case ENTITY_SIDE_BLUE_FORCE:
; 1249 : 				{
; 1250 : 					col = &sys_col_blue;

  001a0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], OFFSET ?sys_col_blue@@3UREAL_COLOUR@@A ; sys_col_blue

; 1251 : 
; 1252 : 					break;

  001a7	eb 10		 jmp	 SHORT $LN8@output_sec
$LN13@output_sec:

; 1253 : 				}
; 1254 : 				case ENTITY_SIDE_RED_FORCE:
; 1255 : 				{
; 1256 : 					col = &sys_col_red;

  001a9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], OFFSET ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red

; 1257 : 
; 1258 : 					break;

  001b0	eb 07		 jmp	 SHORT $LN8@output_sec
$LN14@output_sec:

; 1259 : 				}
; 1260 : 				default:
; 1261 : 				{
; 1262 : 					col = &sys_col_black;

  001b2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], OFFSET ?sys_col_black@@3UREAL_COLOUR@@A ; sys_col_black
$LN8@output_sec:

; 1263 : 
; 1264 : 					break;
; 1265 : 				}
; 1266 : 			}
; 1267 : 
; 1268 : 			z = (NUM_MAP_Z_SECTORS - sz) - 1;

  001b9	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  001be	2b 45 f4	 sub	 eax, DWORD PTR _sz$[ebp]
  001c1	83 e8 01	 sub	 eax, 1
  001c4	89 45 fc	 mov	 DWORD PTR _z$[ebp], eax

; 1269 : 
; 1270 : 			output [(z * NUM_MAP_X_SECTORS * 3) + (sx * 3)] = col->r;

  001c7	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  001ca	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  001d1	6b c8 03	 imul	 ecx, eax, 3
  001d4	6b 55 f8 03	 imul	 edx, DWORD PTR _sx$[ebp], 3
  001d8	03 55 ec	 add	 edx, DWORD PTR _output$[ebp]
  001db	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  001de	8a 40 02	 mov	 al, BYTE PTR [eax+2]
  001e1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1271 : 			output [(z * NUM_MAP_X_SECTORS * 3) + (sx * 3) + 1] = col->g;

  001e4	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  001e7	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  001ee	6b c8 03	 imul	 ecx, eax, 3
  001f1	6b 55 f8 03	 imul	 edx, DWORD PTR _sx$[ebp], 3
  001f5	03 55 ec	 add	 edx, DWORD PTR _output$[ebp]
  001f8	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  001fb	8a 40 01	 mov	 al, BYTE PTR [eax+1]
  001fe	88 44 0a 01	 mov	 BYTE PTR [edx+ecx+1], al

; 1272 : 			output [(z * NUM_MAP_X_SECTORS * 3) + (sx * 3) + 2] = col->b;

  00202	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  00205	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0020c	6b c8 03	 imul	 ecx, eax, 3
  0020f	6b 55 f8 03	 imul	 edx, DWORD PTR _sx$[ebp], 3
  00213	03 55 ec	 add	 edx, DWORD PTR _output$[ebp]
  00216	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00219	8a 00		 mov	 al, BYTE PTR [eax]
  0021b	88 44 0a 02	 mov	 BYTE PTR [edx+ecx+2], al

; 1273 : 		}

  0021f	e9 63 fe ff ff	 jmp	 $LN5@output_sec
$LN6@output_sec:

; 1274 : 	}

  00224	e9 3d fe ff ff	 jmp	 $LN2@output_sec
$LN3@output_sec:

; 1275 : 
; 1276 : 	write_psd_rgb_file (filename, NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS, NUM_MAP_X_SECTORS * 3, output);

  00229	8b 45 ec	 mov	 eax, DWORD PTR _output$[ebp]
  0022c	50		 push	 eax
  0022d	6b 0d 08 00 00
	00 03		 imul	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8, 3
  00234	51		 push	 ecx
  00235	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  0023b	52		 push	 edx
  0023c	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00241	50		 push	 eax
  00242	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  00245	51		 push	 ecx
  00246	e8 00 00 00 00	 call	 ?write_psd_rgb_file@@YGXPBDHHHPBE@Z ; write_psd_rgb_file

; 1277 : 
; 1278 : 	safe_free (output);

  0024b	8b 45 ec	 mov	 eax, DWORD PTR _output$[ebp]
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1279 : 
; 1280 : 	#endif
; 1281 : }

  00254	5f		 pop	 edi
  00255	5e		 pop	 esi
  00256	5b		 pop	 ebx
  00257	8b e5		 mov	 esp, ebp
  00259	5d		 pop	 ebp
  0025a	c2 04 00	 ret	 4
?output_sector_side_normalised_influence_map@@YGXPBD@Z ENDP ; output_sector_side_normalised_influence_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?output_sector_side_influence_map@@YGXPBD@Z
_TEXT	SEGMENT
tv156 = -124						; size = 8
tv157 = -116						; size = 8
tv95 = -112						; size = 4
_total$ = -44						; size = 4
_ratio$ = -40						; size = 4
_val$ = -36						; size = 4
_col$ = -32						; size = 4
_output$ = -28						; size = 4
_raw$ = -24						; size = 4
_sec$ = -20						; size = 4
_temp$ = -16						; size = 4
_sz$ = -12						; size = 4
_sx$ = -8						; size = 4
_z$ = -4						; size = 4
_filename$ = 8						; size = 4
?output_sector_side_influence_map@@YGXPBD@Z PROC	; output_sector_side_influence_map, COMDAT

; 1132 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1133 : 	#ifdef DEBUG
; 1134 : 
; 1135 : 	int
; 1136 : 		z,
; 1137 : 		sx,
; 1138 : 		sz,
; 1139 : 		temp;
; 1140 : 
; 1141 : 	entity
; 1142 : 		*sec;
; 1143 : 
; 1144 : 	sector
; 1145 : 		*raw;
; 1146 : 
; 1147 : 	unsigned char
; 1148 : 		*output;
; 1149 : 
; 1150 : 	rgb_colour
; 1151 : 		col;
; 1152 : 
; 1153 : 	float
; 1154 : 		val,
; 1155 : 		ratio,
; 1156 : 		total;
; 1157 : 
; 1158 : 	ASSERT (filename);

  00009	83 7d 08 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@output_sec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_side_influence_map@@YGXPBD@Z@4JA
  00014	83 c0 1a	 add	 eax, 26			; 0000001aH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08BABJIOEM@filename@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@output_sec:

; 1159 : 
; 1160 : 	output = (unsigned char*) safe_malloc (NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS * 3);

  00027	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0002c	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00033	6b c8 03	 imul	 ecx, eax, 3
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0003c	89 45 e4	 mov	 DWORD PTR _output$[ebp], eax

; 1161 : 
; 1162 : 	memset (output, 0, (NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS * 3));

  0003f	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00044	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  0004b	6b c8 03	 imul	 ecx, eax, 3
  0004e	51		 push	 ecx
  0004f	6a 00		 push	 0
  00051	8b 55 e4	 mov	 edx, DWORD PTR _output$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _memset
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1163 : 				
; 1164 : 	for (sz = 0; sz < NUM_MAP_Z_SECTORS; sz++)

  0005d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _sz$[ebp], 0
  00064	eb 09		 jmp	 SHORT $LN4@output_sec
$LN2@output_sec:
  00066	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  00069	83 c0 01	 add	 eax, 1
  0006c	89 45 f4	 mov	 DWORD PTR _sz$[ebp], eax
$LN4@output_sec:
  0006f	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  00072	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00078	0f 8d 36 02 00
	00		 jge	 $LN3@output_sec

; 1165 : 	{
; 1166 : 		for (sx = 0; sx < NUM_MAP_X_SECTORS; sx++)

  0007e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _sx$[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN7@output_sec
$LN5@output_sec:
  00087	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 f8	 mov	 DWORD PTR _sx$[ebp], eax
$LN7@output_sec:
  00090	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  00093	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00099	0f 8d 10 02 00
	00		 jge	 $LN6@output_sec

; 1167 : 		{
; 1168 : 			sec = get_local_raw_sector_entity (sx, sz);

  0009f	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  000a2	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000a9	03 45 f8	 add	 eax, DWORD PTR _sx$[ebp]
  000ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  000b2	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  000b6	74 1a		 je	 SHORT $LN12@output_sec
  000b8	8b 55 f4	 mov	 edx, DWORD PTR _sz$[ebp]
  000bb	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000c2	03 55 f8	 add	 edx, DWORD PTR _sx$[ebp]
  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  000ca	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  000cd	89 4d 90	 mov	 DWORD PTR tv95[ebp], ecx
  000d0	eb 21		 jmp	 SHORT $LN13@output_sec
$LN12@output_sec:
  000d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??output_sector_side_influence_map@@YGXPBD@Z@4JA
  000d8	83 c2 24	 add	 edx, 36			; 00000024H
  000db	52		 push	 edx
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ec	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN13@output_sec:
  000f3	8b 4d 90	 mov	 ecx, DWORD PTR tv95[ebp]
  000f6	89 4d ec	 mov	 DWORD PTR _sec$[ebp], ecx

; 1169 : 
; 1170 : 			ASSERT (sec);

  000f9	83 7d ec 00	 cmp	 DWORD PTR _sec$[ebp], 0
  000fd	75 18		 jne	 SHORT $LN9@output_sec
  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_side_influence_map@@YGXPBD@Z@4JA
  00104	83 c0 26	 add	 eax, 38			; 00000026H
  00107	50		 push	 eax
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  00112	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@output_sec:

; 1171 : 
; 1172 : 			raw = (sector*) get_local_entity_data (sec);

  00117	8b 45 ec	 mov	 eax, DWORD PTR _sec$[ebp]
  0011a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0011d	89 4d e8	 mov	 DWORD PTR _raw$[ebp], ecx

; 1173 : 
; 1174 : 			total = raw->sector_side [ENTITY_SIDE_BLUE_FORCE] + raw->sector_side [ENTITY_SIDE_RED_FORCE];

  00120	b8 04 00 00 00	 mov	 eax, 4
  00125	c1 e0 00	 shl	 eax, 0
  00128	b9 04 00 00 00	 mov	 ecx, 4
  0012d	d1 e1		 shl	 ecx, 1
  0012f	8b 55 e8	 mov	 edx, DWORD PTR _raw$[ebp]
  00132	8b 75 e8	 mov	 esi, DWORD PTR _raw$[ebp]
  00135	f3 0f 10 44 02
	14		 movss	 xmm0, DWORD PTR [edx+eax+20]
  0013b	f3 0f 58 44 0e
	14		 addss	 xmm0, DWORD PTR [esi+ecx+20]
  00141	f3 0f 11 45 d4	 movss	 DWORD PTR _total$[ebp], xmm0

; 1175 : 
; 1176 : 			ASSERT (total > 0.0);

  00146	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _total$[ebp]
  0014b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00153	77 18		 ja	 SHORT $LN10@output_sec
  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??output_sector_side_influence_map@@YGXPBD@Z@4JA
  0015a	83 c0 2c	 add	 eax, 44			; 0000002cH
  0015d	50		 push	 eax
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HOAGDBOJ@total?5?$DO?50?40@
  00168	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@output_sec:

; 1177 : 
; 1178 : 			ratio = raw->sector_side [ENTITY_SIDE_BLUE_FORCE] / total;

  0016d	b8 04 00 00 00	 mov	 eax, 4
  00172	c1 e0 00	 shl	 eax, 0
  00175	8b 4d e8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00178	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  0017e	f3 0f 5e 45 d4	 divss	 xmm0, DWORD PTR _total$[ebp]
  00183	f3 0f 11 45 d8	 movss	 DWORD PTR _ratio$[ebp], xmm0

; 1179 : 
; 1180 : 			ratio = bound (ratio, 0.0, 1.0);

  00188	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _ratio$[ebp]
  0018d	0f 57 c9	 xorps	 xmm1, xmm1
  00190	66 0f 2f c8	 comisd	 xmm1, xmm0
  00194	76 0a		 jbe	 SHORT $LN16@output_sec
  00196	0f 57 c0	 xorps	 xmm0, xmm0
  00199	f2 0f 11 45 8c	 movsd	 QWORD PTR tv157[ebp], xmm0
  0019e	eb 32		 jmp	 SHORT $LN17@output_sec
$LN16@output_sec:
  001a0	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _ratio$[ebp]
  001a5	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  001ad	76 0f		 jbe	 SHORT $LN14@output_sec
  001af	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001b7	f2 0f 11 45 84	 movsd	 QWORD PTR tv156[ebp], xmm0
  001bc	eb 0a		 jmp	 SHORT $LN15@output_sec
$LN14@output_sec:
  001be	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _ratio$[ebp]
  001c3	f2 0f 11 45 84	 movsd	 QWORD PTR tv156[ebp], xmm0
$LN15@output_sec:
  001c8	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv156[ebp]
  001cd	f2 0f 11 45 8c	 movsd	 QWORD PTR tv157[ebp], xmm0
$LN17@output_sec:
  001d2	f2 0f 5a 45 8c	 cvtsd2ss xmm0, QWORD PTR tv157[ebp]
  001d7	f3 0f 11 45 d8	 movss	 DWORD PTR _ratio$[ebp], xmm0

; 1181 : 
; 1182 : 			// red
; 1183 : 			val = 255.0 * (1.0 - ratio);

  001dc	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _ratio$[ebp]
  001e1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001e9	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001ed	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@406fe00000000000
  001f5	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001f9	f3 0f 11 45 dc	 movss	 DWORD PTR _val$[ebp], xmm0

; 1184 : 			convert_float_to_int (val, &temp);

  001fe	8d 45 f0	 lea	 eax, DWORD PTR _temp$[ebp]
  00201	50		 push	 eax
  00202	51		 push	 ecx
  00203	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _val$[ebp]
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1185 : 			col.r = temp;

  00212	8a 45 f0	 mov	 al, BYTE PTR _temp$[ebp]
  00215	88 45 e2	 mov	 BYTE PTR _col$[ebp+2], al

; 1186 : 
; 1187 : 			// green
; 1188 : 			col.g = 0;

  00218	c6 45 e1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 1189 : 
; 1190 : 			// blue
; 1191 : 			val = 255.0 * ratio;

  0021c	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _ratio$[ebp]
  00221	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406fe00000000000
  00229	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0022d	f3 0f 11 45 dc	 movss	 DWORD PTR _val$[ebp], xmm0

; 1192 : 			convert_float_to_int (val, &temp);

  00232	8d 45 f0	 lea	 eax, DWORD PTR _temp$[ebp]
  00235	50		 push	 eax
  00236	51		 push	 ecx
  00237	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _val$[ebp]
  0023c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00241	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1193 : 			col.b = temp;

  00246	8a 45 f0	 mov	 al, BYTE PTR _temp$[ebp]
  00249	88 45 e0	 mov	 BYTE PTR _col$[ebp], al

; 1194 : 
; 1195 : 			z = (NUM_MAP_Z_SECTORS - sz) - 1;

  0024c	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00251	2b 45 f4	 sub	 eax, DWORD PTR _sz$[ebp]
  00254	83 e8 01	 sub	 eax, 1
  00257	89 45 fc	 mov	 DWORD PTR _z$[ebp], eax

; 1196 : 
; 1197 : 			output [(z * NUM_MAP_X_SECTORS * 3) + (sx * 3)] = col.r;

  0025a	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  0025d	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00264	6b c8 03	 imul	 ecx, eax, 3
  00267	6b 55 f8 03	 imul	 edx, DWORD PTR _sx$[ebp], 3
  0026b	03 55 e4	 add	 edx, DWORD PTR _output$[ebp]
  0026e	8a 45 e2	 mov	 al, BYTE PTR _col$[ebp+2]
  00271	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1198 : 			output [(z * NUM_MAP_X_SECTORS * 3) + (sx * 3) + 1] = col.g;

  00274	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  00277	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0027e	6b c8 03	 imul	 ecx, eax, 3
  00281	6b 55 f8 03	 imul	 edx, DWORD PTR _sx$[ebp], 3
  00285	03 55 e4	 add	 edx, DWORD PTR _output$[ebp]
  00288	8a 45 e1	 mov	 al, BYTE PTR _col$[ebp+1]
  0028b	88 44 0a 01	 mov	 BYTE PTR [edx+ecx+1], al

; 1199 : 			output [(z * NUM_MAP_X_SECTORS * 3) + (sx * 3) + 2] = col.b;

  0028f	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  00292	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00299	6b c8 03	 imul	 ecx, eax, 3
  0029c	6b 55 f8 03	 imul	 edx, DWORD PTR _sx$[ebp], 3
  002a0	03 55 e4	 add	 edx, DWORD PTR _output$[ebp]
  002a3	8a 45 e0	 mov	 al, BYTE PTR _col$[ebp]
  002a6	88 44 0a 02	 mov	 BYTE PTR [edx+ecx+2], al

; 1200 : 		}

  002aa	e9 d8 fd ff ff	 jmp	 $LN5@output_sec
$LN6@output_sec:

; 1201 : 	}

  002af	e9 b2 fd ff ff	 jmp	 $LN2@output_sec
$LN3@output_sec:

; 1202 : 
; 1203 : 	write_psd_rgb_file (filename, NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS, NUM_MAP_X_SECTORS * 3, output);

  002b4	8b 45 e4	 mov	 eax, DWORD PTR _output$[ebp]
  002b7	50		 push	 eax
  002b8	6b 0d 08 00 00
	00 03		 imul	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8, 3
  002bf	51		 push	 ecx
  002c0	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  002c6	52		 push	 edx
  002c7	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  002cc	50		 push	 eax
  002cd	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  002d0	51		 push	 ecx
  002d1	e8 00 00 00 00	 call	 ?write_psd_rgb_file@@YGXPBDHHHPBE@Z ; write_psd_rgb_file

; 1204 : 
; 1205 : 	safe_free (output);

  002d6	8b 45 e4	 mov	 eax, DWORD PTR _output$[ebp]
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1206 : 
; 1207 : 	#endif
; 1208 : }

  002df	5f		 pop	 edi
  002e0	5e		 pop	 esi
  002e1	5b		 pop	 ebx
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c2 04 00	 ret	 4
?output_sector_side_influence_map@@YGXPBD@Z ENDP	; output_sector_side_influence_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z
_TEXT	SEGMENT
tv82 = -76						; size = 4
_raw$ = -8						; size = 4
_en$ = -4						; size = 4
_sx$ = 8						; size = 4
_sz$ = 12						; size = 4
_side$ = 16						; size = 4
_in_use$ = 20						; size = 4
_scale$ = 24						; size = 4
?update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z PROC ; update_sector_surface_to_surface_defence_level, COMDAT

; 967  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 968  : 	entity
; 969  : 		*en;
; 970  : 
; 971  : 	sector
; 972  : 		*raw;
; 973  : 		
; 974  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 18		 je	 SHORT $LN2@update_sec
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_sec:

; 975  : 
; 976  : 	en = get_local_raw_sector_entity (sx, sz);

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0002d	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00034	03 45 08	 add	 eax, DWORD PTR _sx$[ebp]
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  0003d	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00041	74 1a		 je	 SHORT $LN9@update_sec
  00043	8b 55 0c	 mov	 edx, DWORD PTR _sz$[ebp]
  00046	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0004d	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00055	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00058	89 4d b4	 mov	 DWORD PTR tv82[ebp], ecx
  0005b	eb 21		 jmp	 SHORT $LN10@update_sec
$LN9@update_sec:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  00063	83 c2 09	 add	 edx, 9
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN10@update_sec:
  0007e	8b 4d b4	 mov	 ecx, DWORD PTR tv82[ebp]
  00081	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 977  : 
; 978  : 	ASSERT (en);

  00084	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00088	75 18		 jne	 SHORT $LN3@update_sec
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  0008f	83 c0 0b	 add	 eax, 11			; 0000000bH
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@update_sec:

; 979  : 
; 980  : 	raw = (sector*) get_local_entity_data (en);

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  000a5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a8	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 981  : 
; 982  : 	if (scale > 0.0)

  000ab	f3 0f 5a 45 18	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  000b0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000b8	76 70		 jbe	 SHORT $LN6@update_sec

; 983  : 	{
; 984  : 		if (in_use)

  000ba	83 7d 14 00	 cmp	 DWORD PTR _in_use$[ebp], 0
  000be	74 1f		 je	 SHORT $LN5@update_sec

; 985  : 		{
; 986  : 			raw->surface_to_surface_defence_level [side] += scale;

  000c0	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000c6	f3 0f 10 44 81
	50		 movss	 xmm0, DWORD PTR [ecx+eax*4+80]
  000cc	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _scale$[ebp]
  000d1	8b 55 10	 mov	 edx, DWORD PTR _side$[ebp]
  000d4	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  000d7	f3 0f 11 44 90
	50		 movss	 DWORD PTR [eax+edx*4+80], xmm0

; 987  : 		}
; 988  : 		else

  000dd	eb 4b		 jmp	 SHORT $LN6@update_sec
$LN5@update_sec:

; 989  : 		{
; 990  : 			ASSERT (raw->surface_to_surface_defence_level [side] > 0.0);

  000df	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000e5	f3 0f 5a 44 81
	50		 cvtss2sd xmm0, DWORD PTR [ecx+eax*4+80]
  000eb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000f3	77 18		 ja	 SHORT $LN7@update_sec
  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  000fa	83 c0 17	 add	 eax, 23			; 00000017H
  000fd	50		 push	 eax
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@IDEHEHDL@raw?9?$DOsurface_to_surface_defence@
  00108	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@update_sec:

; 991  : 
; 992  : 			raw->surface_to_surface_defence_level [side] -= scale;

  0010d	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  00110	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00113	f3 0f 10 44 81
	50		 movss	 xmm0, DWORD PTR [ecx+eax*4+80]
  00119	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _scale$[ebp]
  0011e	8b 55 10	 mov	 edx, DWORD PTR _side$[ebp]
  00121	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00124	f3 0f 11 44 90
	50		 movss	 DWORD PTR [eax+edx*4+80], xmm0
$LN6@update_sec:

; 993  : 		}
; 994  : 	
; 995  : 		#if DEBUG_MODULE
; 996  : 	
; 997  : 		debug_log ("IMAPS: %d, %d (%s) setting S-S level to %f", sx, sz, entity_side_names [side], raw->surface_to_surface_defence_level [side]);
; 998  : 	
; 999  : 		#endif
; 1000 : 	}
; 1001 : 
; 1002 : 	return raw->surface_to_surface_defence_level [side];

  0012a	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  0012d	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00130	d9 44 81 50	 fld	 DWORD PTR [ecx+eax*4+80]

; 1003 : }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 14 00	 ret	 20			; 00000014H
?update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z ENDP ; update_sector_surface_to_surface_defence_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z
_TEXT	SEGMENT
tv82 = -76						; size = 4
_raw$ = -8						; size = 4
_en$ = -4						; size = 4
_sx$ = 8						; size = 4
_sz$ = 12						; size = 4
_side$ = 16						; size = 4
_in_use$ = 20						; size = 4
_scale$ = 24						; size = 4
?update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z PROC ; update_sector_surface_to_air_defence_level, COMDAT

; 802  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 803  : 	entity
; 804  : 		*en;
; 805  : 
; 806  : 	sector
; 807  : 		*raw;
; 808  : 		
; 809  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 18		 je	 SHORT $LN2@update_sec
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_sec:

; 810  : 
; 811  : 	en = get_local_raw_sector_entity (sx, sz);

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0002d	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00034	03 45 08	 add	 eax, DWORD PTR _sx$[ebp]
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  0003d	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00041	74 1a		 je	 SHORT $LN9@update_sec
  00043	8b 55 0c	 mov	 edx, DWORD PTR _sz$[ebp]
  00046	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0004d	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00055	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00058	89 4d b4	 mov	 DWORD PTR tv82[ebp], ecx
  0005b	eb 21		 jmp	 SHORT $LN10@update_sec
$LN9@update_sec:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  00063	83 c2 09	 add	 edx, 9
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN10@update_sec:
  0007e	8b 4d b4	 mov	 ecx, DWORD PTR tv82[ebp]
  00081	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 812  : 
; 813  : 	ASSERT (en);

  00084	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00088	75 18		 jne	 SHORT $LN3@update_sec
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  0008f	83 c0 0b	 add	 eax, 11			; 0000000bH
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@update_sec:

; 814  : 
; 815  : 	raw = (sector*) get_local_entity_data (en);

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  000a5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a8	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 816  : 
; 817  : 	if (scale > 0.0)

  000ab	f3 0f 5a 45 18	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  000b0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000b8	76 70		 jbe	 SHORT $LN6@update_sec

; 818  : 	{
; 819  : 		if (in_use)

  000ba	83 7d 14 00	 cmp	 DWORD PTR _in_use$[ebp], 0
  000be	74 1f		 je	 SHORT $LN5@update_sec

; 820  : 		{
; 821  : 			raw->surface_to_air_defence_level [side] += scale;

  000c0	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000c6	f3 0f 10 44 81
	44		 movss	 xmm0, DWORD PTR [ecx+eax*4+68]
  000cc	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _scale$[ebp]
  000d1	8b 55 10	 mov	 edx, DWORD PTR _side$[ebp]
  000d4	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  000d7	f3 0f 11 44 90
	44		 movss	 DWORD PTR [eax+edx*4+68], xmm0

; 822  : 		}
; 823  : 		else

  000dd	eb 4b		 jmp	 SHORT $LN6@update_sec
$LN5@update_sec:

; 824  : 		{
; 825  : 			ASSERT (raw->surface_to_air_defence_level [side] > 0.0);

  000df	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000e5	f3 0f 5a 44 81
	44		 cvtss2sd xmm0, DWORD PTR [ecx+eax*4+68]
  000eb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000f3	77 18		 ja	 SHORT $LN7@update_sec
  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  000fa	83 c0 17	 add	 eax, 23			; 00000017H
  000fd	50		 push	 eax
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FHFLBHCH@raw?9?$DOsurface_to_air_defence_lev@
  00108	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@update_sec:

; 826  : 
; 827  : 			raw->surface_to_air_defence_level [side] -= scale;

  0010d	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  00110	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00113	f3 0f 10 44 81
	44		 movss	 xmm0, DWORD PTR [ecx+eax*4+68]
  00119	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _scale$[ebp]
  0011e	8b 55 10	 mov	 edx, DWORD PTR _side$[ebp]
  00121	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00124	f3 0f 11 44 90
	44		 movss	 DWORD PTR [eax+edx*4+68], xmm0
$LN6@update_sec:

; 828  : 		}
; 829  : 	
; 830  : 		#if DEBUG_MODULE
; 831  : 	
; 832  : 		debug_log ("IMAPS: %d, %d (%s) setting S-A level to %f", sx, sz, entity_side_names [side], raw->surface_to_air_defence_level [side]);
; 833  : 	
; 834  : 		#endif
; 835  : 	}
; 836  : 
; 837  : 	return raw->surface_to_air_defence_level [side];

  0012a	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  0012d	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00130	d9 44 81 44	 fld	 DWORD PTR [ecx+eax*4+68]

; 838  : }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 14 00	 ret	 20			; 00000014H
?update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z ENDP ; update_sector_surface_to_air_defence_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_sector_distance_to_friendly_base@@YGMHHW4ENTITY_SIDES@@M@Z
_TEXT	SEGMENT
tv82 = -76						; size = 4
_raw$ = -8						; size = 4
_en$ = -4						; size = 4
_sx$ = 8						; size = 4
_sz$ = 12						; size = 4
_side$ = 16						; size = 4
_scale$ = 20						; size = 4
?update_sector_distance_to_friendly_base@@YGMHHW4ENTITY_SIDES@@M@Z PROC ; update_sector_distance_to_friendly_base, COMDAT

; 585  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 586  : 	entity
; 587  : 		*en;
; 588  : 
; 589  : 	sector
; 590  : 		*raw;
; 591  : 		
; 592  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 18		 je	 SHORT $LN2@update_sec
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_distance_to_friendly_base@@YGMHHW4ENTITY_SIDES@@M@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_sec:

; 593  : 
; 594  : 	en = get_local_raw_sector_entity (sx, sz);

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0002d	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00034	03 45 08	 add	 eax, DWORD PTR _sx$[ebp]
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  0003d	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00041	74 1a		 je	 SHORT $LN6@update_sec
  00043	8b 55 0c	 mov	 edx, DWORD PTR _sz$[ebp]
  00046	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0004d	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00055	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00058	89 4d b4	 mov	 DWORD PTR tv82[ebp], ecx
  0005b	eb 21		 jmp	 SHORT $LN7@update_sec
$LN6@update_sec:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_sector_distance_to_friendly_base@@YGMHHW4ENTITY_SIDES@@M@Z@4JA
  00063	83 c2 09	 add	 edx, 9
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN7@update_sec:
  0007e	8b 4d b4	 mov	 ecx, DWORD PTR tv82[ebp]
  00081	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 595  : 
; 596  : 	ASSERT (en);

  00084	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00088	75 18		 jne	 SHORT $LN3@update_sec
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_distance_to_friendly_base@@YGMHHW4ENTITY_SIDES@@M@Z@4JA
  0008f	83 c0 0b	 add	 eax, 11			; 0000000bH
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@update_sec:

; 597  : 
; 598  : 	raw = (sector*) get_local_entity_data (en);

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  000a5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a8	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 599  : 
; 600  : 	if (scale > 0.0)

  000ab	f3 0f 5a 45 14	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  000b0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000b8	76 20		 jbe	 SHORT $LN4@update_sec

; 601  : 	{
; 602  : 		raw->distance_to_friendly_base [side] = max (raw->distance_to_friendly_base [side], scale);

  000ba	8d 45 14	 lea	 eax, DWORD PTR _scale$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d 10	 mov	 ecx, DWORD PTR _side$[ebp]
  000c1	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  000c4	8d 44 8a 38	 lea	 eax, DWORD PTR [edx+ecx*4+56]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000ce	8b 4d 10	 mov	 ecx, DWORD PTR _side$[ebp]
  000d1	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
  000d6	89 44 8a 38	 mov	 DWORD PTR [edx+ecx*4+56], eax
$LN4@update_sec:

; 603  : 	
; 604  : 		#if DEBUG_MODULE
; 605  : 	
; 606  : 		debug_log ("IMAPS: %d, %d (%s) setting distance_to_friendly_base to %f", sx, sz, entity_side_names [side], raw->distance_to_friendly_base [side]);
; 607  : 	
; 608  : 		#endif
; 609  : 	}
; 610  : 
; 611  : 	return raw->distance_to_friendly_base [side];

  000da	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  000dd	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000e0	d9 44 81 38	 fld	 DWORD PTR [ecx+eax*4+56]

; 612  : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 10 00	 ret	 16			; 00000010H
?update_sector_distance_to_friendly_base@@YGMHHW4ENTITY_SIDES@@M@Z ENDP ; update_sector_distance_to_friendly_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YGABHABH0@Z PROC				; std::max<int>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@max
  00021	eb 4a		 jmp	 SHORT $LN2@max
$LN7@max:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 0e 15 00 00	 push	 5390			; 0000150eH
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@max
  00049	cc		 int	 3
$LN12@max:
  0004a	6a 00		 push	 0
  0004c	68 0e 15 00 00	 push	 5390			; 0000150eH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@max
$LN2@max:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@max:

; 5395 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$max@H@std@@YGABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z
_TEXT	SEGMENT
tv82 = -76						; size = 4
_raw$ = -8						; size = 4
_en$ = -4						; size = 4
_sx$ = 8						; size = 4
_sz$ = 12						; size = 4
_side$ = 16						; size = 4
_in_use$ = 20						; size = 4
_scale$ = 24						; size = 4
?update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z PROC ; update_sector_importance_level, COMDAT

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 413  : 	entity
; 414  : 		*en;
; 415  : 
; 416  : 	sector
; 417  : 		*raw;
; 418  : 		
; 419  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 18		 je	 SHORT $LN2@update_sec
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_sec:

; 420  : 
; 421  : 	en = get_local_raw_sector_entity (sx, sz);

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0002d	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00034	03 45 08	 add	 eax, DWORD PTR _sx$[ebp]
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  0003d	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00041	74 1a		 je	 SHORT $LN9@update_sec
  00043	8b 55 0c	 mov	 edx, DWORD PTR _sz$[ebp]
  00046	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0004d	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00055	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00058	89 4d b4	 mov	 DWORD PTR tv82[ebp], ecx
  0005b	eb 21		 jmp	 SHORT $LN10@update_sec
$LN9@update_sec:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  00063	83 c2 09	 add	 edx, 9
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN10@update_sec:
  0007e	8b 4d b4	 mov	 ecx, DWORD PTR tv82[ebp]
  00081	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 422  : 
; 423  : 	ASSERT (en);

  00084	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00088	75 18		 jne	 SHORT $LN3@update_sec
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  0008f	83 c0 0b	 add	 eax, 11			; 0000000bH
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@update_sec:

; 424  : 
; 425  : 	raw = (sector*) get_local_entity_data (en);

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  000a5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a8	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 426  : 
; 427  : 	if (scale > 0.0)

  000ab	f3 0f 5a 45 18	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  000b0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000b8	76 70		 jbe	 SHORT $LN6@update_sec

; 428  : 	{
; 429  : 		if (in_use)

  000ba	83 7d 14 00	 cmp	 DWORD PTR _in_use$[ebp], 0
  000be	74 1f		 je	 SHORT $LN5@update_sec

; 430  : 		{
; 431  : 			raw->importance_level [side] += scale;

  000c0	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000c6	f3 0f 10 44 81
	2c		 movss	 xmm0, DWORD PTR [ecx+eax*4+44]
  000cc	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _scale$[ebp]
  000d1	8b 55 10	 mov	 edx, DWORD PTR _side$[ebp]
  000d4	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  000d7	f3 0f 11 44 90
	2c		 movss	 DWORD PTR [eax+edx*4+44], xmm0

; 432  : 		}
; 433  : 		else

  000dd	eb 4b		 jmp	 SHORT $LN6@update_sec
$LN5@update_sec:

; 434  : 		{
; 435  : 			ASSERT (raw->importance_level [side] > 0.0);

  000df	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000e5	f3 0f 5a 44 81
	2c		 cvtss2sd xmm0, DWORD PTR [ecx+eax*4+44]
  000eb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000f3	77 18		 ja	 SHORT $LN7@update_sec
  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  000fa	83 c0 17	 add	 eax, 23			; 00000017H
  000fd	50		 push	 eax
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@FNDMIEIO@raw?9?$DOimportance_level?5?$FLside?$FN?5?$DO?5@
  00108	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@update_sec:

; 436  : 	
; 437  : 			raw->importance_level [side] -= scale;

  0010d	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  00110	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00113	f3 0f 10 44 81
	2c		 movss	 xmm0, DWORD PTR [ecx+eax*4+44]
  00119	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _scale$[ebp]
  0011e	8b 55 10	 mov	 edx, DWORD PTR _side$[ebp]
  00121	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00124	f3 0f 11 44 90
	2c		 movss	 DWORD PTR [eax+edx*4+44], xmm0
$LN6@update_sec:

; 438  : 		}
; 439  : 	
; 440  : 		#if DEBUG_MODULE
; 441  : 	
; 442  : 		debug_log ("IMAPS: %d, %d (%s) setting importance level to %f", sx, sz, entity_side_names [side], raw->importance_level [side]);
; 443  : 	
; 444  : 		#endif
; 445  : 	}
; 446  : 
; 447  : 	return raw->importance_level [side];

  0012a	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  0012d	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00130	d9 44 81 2c	 fld	 DWORD PTR [ecx+eax*4+44]

; 448  : }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 14 00	 ret	 20			; 00000014H
?update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z ENDP ; update_sector_importance_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_sector_side@@YGMHHW4ENTITY_SIDES@@HM@Z
_TEXT	SEGMENT
tv77 = -76						; size = 4
_raw$ = -8						; size = 4
_en$ = -4						; size = 4
_sx$ = 8						; size = 4
_sz$ = 12						; size = 4
_side$ = 16						; size = 4
_in_use$ = 20						; size = 4
_scale$ = 24						; size = 4
?update_sector_side@@YGMHHW4ENTITY_SIDES@@HM@Z PROC	; update_sector_side, COMDAT

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 296  : 	entity
; 297  : 		*en;
; 298  : 
; 299  : 	sector
; 300  : 		*raw;
; 301  : 		
; 302  : 	en = get_local_raw_sector_entity (sx, sz);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0000c	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00013	03 45 08	 add	 eax, DWORD PTR _sx$[ebp]
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  0001c	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00020	74 1a		 je	 SHORT $LN8@update_sec
  00022	8b 55 0c	 mov	 edx, DWORD PTR _sz$[ebp]
  00025	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0002c	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00034	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00037	89 4d b4	 mov	 DWORD PTR tv77[ebp], ecx
  0003a	eb 21		 jmp	 SHORT $LN9@update_sec
$LN8@update_sec:
  0003c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_sector_side@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  00042	83 c2 07	 add	 edx, 7
  00045	52		 push	 edx
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00056	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN9@update_sec:
  0005d	8b 4d b4	 mov	 ecx, DWORD PTR tv77[ebp]
  00060	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 303  : 
; 304  : 	ASSERT (en);

  00063	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00067	75 18		 jne	 SHORT $LN2@update_sec
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_side@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  0006e	83 c0 09	 add	 eax, 9
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  0007c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_sec:

; 305  : 
; 306  : 	raw = (sector*)get_local_entity_data (en);

  00081	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00084	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00087	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 307  : 
; 308  : 	if (scale > 0.0)

  0008a	f3 0f 5a 45 18	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  0008f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00097	76 70		 jbe	 SHORT $LN5@update_sec

; 309  : 	{
; 310  : 		if (in_use)

  00099	83 7d 14 00	 cmp	 DWORD PTR _in_use$[ebp], 0
  0009d	74 1f		 je	 SHORT $LN4@update_sec

; 311  : 		{
; 312  : 			raw->sector_side [side] += scale;

  0009f	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  000a2	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000a5	f3 0f 10 44 81
	14		 movss	 xmm0, DWORD PTR [ecx+eax*4+20]
  000ab	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _scale$[ebp]
  000b0	8b 55 10	 mov	 edx, DWORD PTR _side$[ebp]
  000b3	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  000b6	f3 0f 11 44 90
	14		 movss	 DWORD PTR [eax+edx*4+20], xmm0

; 313  : 		}
; 314  : 		else

  000bc	eb 4b		 jmp	 SHORT $LN5@update_sec
$LN4@update_sec:

; 315  : 		{
; 316  : 			ASSERT (raw->sector_side [side] > 0.0);

  000be	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000c4	f3 0f 5a 44 81
	14		 cvtss2sd xmm0, DWORD PTR [ecx+eax*4+20]
  000ca	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000d2	77 18		 ja	 SHORT $LN6@update_sec
  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_sector_side@@YGMHHW4ENTITY_SIDES@@HM@Z@4JA
  000d9	83 c0 15	 add	 eax, 21			; 00000015H
  000dc	50		 push	 eax
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MLNGOPCH@raw?9?$DOsector_side?5?$FLside?$FN?5?$DO?50?40@
  000e7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@update_sec:

; 317  : 	
; 318  : 			raw->sector_side [side] -= scale;

  000ec	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  000ef	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000f2	f3 0f 10 44 81
	14		 movss	 xmm0, DWORD PTR [ecx+eax*4+20]
  000f8	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _scale$[ebp]
  000fd	8b 55 10	 mov	 edx, DWORD PTR _side$[ebp]
  00100	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00103	f3 0f 11 44 90
	14		 movss	 DWORD PTR [eax+edx*4+20], xmm0
$LN5@update_sec:

; 319  : 		}
; 320  : 	
; 321  : 		#if DEBUG_MODULE
; 322  : 	
; 323  : 		debug_log ("IMAPS: %d, %d (%s) setting side value to %f", sx, sz, entity_side_names [side], raw->sector_side [side]);
; 324  : 	
; 325  : 		#endif
; 326  : 	}
; 327  : 
; 328  : 	return raw->sector_side [side];

  00109	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  0010f	d9 44 81 14	 fld	 DWORD PTR [ecx+eax*4+20]

; 329  : }

  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c2 14 00	 ret	 20			; 00000014H
?update_sector_side@@YGMHHW4ENTITY_SIDES@@HM@Z ENDP	; update_sector_side
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?normalise_inlfuence_map@@YGXPAMPAEHH@Z
_TEXT	SEGMENT
_z$ = -20						; size = 4
_x$ = -16						; size = 4
_max_val$ = -12						; size = 4
_min_val$ = -8						; size = 4
_val$ = -4						; size = 4
_original$ = 8						; size = 4
_output$ = 12						; size = 4
_xsize$ = 16						; size = 4
_zsize$ = 20						; size = 4
?normalise_inlfuence_map@@YGXPAMPAEHH@Z PROC		; normalise_inlfuence_map, COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 191  : 	float
; 192  : 		val,
; 193  : 		min_val,
; 194  : 		max_val;
; 195  : 
; 196  : 	int
; 197  : 		x,
; 198  : 		z;
; 199  : 
; 200  : 	ASSERT (original);

  00009	83 7d 08 00	 cmp	 DWORD PTR _original$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN14@normalise_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_inlfuence_map@@YGXPAMPAEHH@Z@4JA
  00014	83 c0 0a	 add	 eax, 10			; 0000000aH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_08LAAABFKN@original@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@normalise_:

; 201  : 
; 202  : 	ASSERT (output);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _output$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN15@normalise_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_inlfuence_map@@YGXPAMPAEHH@Z@4JA
  00032	83 c0 0c	 add	 eax, 12			; 0000000cH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06DKIGHACF@output@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@normalise_:

; 203  : 
; 204  : 	//
; 205  : 	// Find largest value
; 206  : 	//
; 207  : 
; 208  : 	min_val = FLT_MAX;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  0004d	f3 0f 11 45 f8	 movss	 DWORD PTR _min_val$[ebp], xmm0

; 209  : 
; 210  : 	max_val = 0.0;

  00052	0f 57 c0	 xorps	 xmm0, xmm0
  00055	f3 0f 11 45 f4	 movss	 DWORD PTR _max_val$[ebp], xmm0

; 211  : 
; 212  : 	for (z = 0; z < zsize; z++)

  0005a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00061	eb 09		 jmp	 SHORT $LN4@normalise_
$LN2@normalise_:
  00063	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax
$LN4@normalise_:
  0006c	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  0006f	3b 45 14	 cmp	 eax, DWORD PTR _zsize$[ebp]
  00072	7d 64		 jge	 SHORT $LN3@normalise_

; 213  : 	{
; 214  : 		for (x = 0; x < xsize; x++)

  00074	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  0007b	eb 09		 jmp	 SHORT $LN7@normalise_
$LN5@normalise_:
  0007d	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  00080	83 c0 01	 add	 eax, 1
  00083	89 45 f0	 mov	 DWORD PTR _x$[ebp], eax
$LN7@normalise_:
  00086	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  00089	3b 45 10	 cmp	 eax, DWORD PTR _xsize$[ebp]
  0008c	7d 48		 jge	 SHORT $LN6@normalise_

; 215  : 		{
; 216  : 			min_val = min (min_val, original [(z * xsize) + x]);

  0008e	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  00091	0f af 45 10	 imul	 eax, DWORD PTR _xsize$[ebp]
  00095	03 45 f0	 add	 eax, DWORD PTR _x$[ebp]
  00098	8b 4d 08	 mov	 ecx, DWORD PTR _original$[ebp]
  0009b	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0009e	52		 push	 edx
  0009f	8d 45 f8	 lea	 eax, DWORD PTR _min_val$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  000a8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000ac	f3 0f 11 45 f8	 movss	 DWORD PTR _min_val$[ebp], xmm0

; 217  : 
; 218  : 			max_val = max (max_val, original [(z * xsize) + x]);

  000b1	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  000b4	0f af 45 10	 imul	 eax, DWORD PTR _xsize$[ebp]
  000b8	03 45 f0	 add	 eax, DWORD PTR _x$[ebp]
  000bb	8b 4d 08	 mov	 ecx, DWORD PTR _original$[ebp]
  000be	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000c1	52		 push	 edx
  000c2	8d 45 f4	 lea	 eax, DWORD PTR _max_val$[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000cb	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000cf	f3 0f 11 45 f4	 movss	 DWORD PTR _max_val$[ebp], xmm0

; 219  : 		}

  000d4	eb a7		 jmp	 SHORT $LN5@normalise_
$LN6@normalise_:

; 220  : 	}

  000d6	eb 8b		 jmp	 SHORT $LN2@normalise_
$LN3@normalise_:

; 221  : 
; 222  : 	if (max_val == min_val)

  000d8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _max_val$[ebp]
  000dd	0f 2e 45 f8	 ucomiss xmm0, DWORD PTR _min_val$[ebp]
  000e1	9f		 lahf
  000e2	f6 c4 44	 test	 ah, 68			; 00000044H
  000e5	7a 05		 jp	 SHORT $LN16@normalise_

; 223  : 	{
; 224  : 		return;

  000e7	e9 cf 00 00 00	 jmp	 $LN1@normalise_
$LN16@normalise_:

; 225  : 	}
; 226  : 
; 227  : 	//
; 228  : 	// Normalise
; 229  : 	//
; 230  : 
; 231  : 	for (z = 0; z < zsize; z++)

  000ec	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  000f3	eb 09		 jmp	 SHORT $LN10@normalise_
$LN8@normalise_:
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  000f8	83 c0 01	 add	 eax, 1
  000fb	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax
$LN10@normalise_:
  000fe	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  00101	3b 45 14	 cmp	 eax, DWORD PTR _zsize$[ebp]
  00104	0f 8d b1 00 00
	00		 jge	 $LN9@normalise_

; 232  : 	{
; 233  : 		for (x = 0; x < xsize; x++)

  0010a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00111	eb 09		 jmp	 SHORT $LN13@normalise_
$LN11@normalise_:
  00113	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  00116	83 c0 01	 add	 eax, 1
  00119	89 45 f0	 mov	 DWORD PTR _x$[ebp], eax
$LN13@normalise_:
  0011c	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  0011f	3b 45 10	 cmp	 eax, DWORD PTR _xsize$[ebp]
  00122	0f 8d 8e 00 00
	00		 jge	 $LN12@normalise_

; 234  : 		{
; 235  : 			val = 255.0 * ((original [(z * xsize) + x] - min_val) / (max_val - min_val));

  00128	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  0012b	0f af 45 10	 imul	 eax, DWORD PTR _xsize$[ebp]
  0012f	03 45 f0	 add	 eax, DWORD PTR _x$[ebp]
  00132	8b 4d 08	 mov	 ecx, DWORD PTR _original$[ebp]
  00135	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  0013a	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _min_val$[ebp]
  0013f	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _max_val$[ebp]
  00144	f3 0f 5c 4d f8	 subss	 xmm1, DWORD PTR _min_val$[ebp]
  00149	f3 0f 5e c1	 divss	 xmm0, xmm1
  0014d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00151	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406fe00000000000
  00159	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015d	f3 0f 11 45 fc	 movss	 DWORD PTR _val$[ebp], xmm0

; 236  : 
; 237  : 			ASSERT ((val >= 0.0) && (val < 256.0));

  00162	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _val$[ebp]
  00167	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0016f	72 13		 jb	 SHORT $LN18@normalise_
  00171	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _val$[ebp]
  00176	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  0017e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00182	77 18		 ja	 SHORT $LN17@normalise_
$LN18@normalise_:
  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_inlfuence_map@@YGXPAMPAEHH@Z@4JA
  00189	83 c0 2f	 add	 eax, 47			; 0000002fH
  0018c	50		 push	 eax
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IGOCGDFL@?$CIval?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIval?5?$DM?5256?40?$CJ@
  00197	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN17@normalise_:

; 238  : 
; 239  : 			output [(z * xsize) + x] = (unsigned char)val;

  0019c	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _val$[ebp]
  001a1	8b 4d ec	 mov	 ecx, DWORD PTR _z$[ebp]
  001a4	0f af 4d 10	 imul	 ecx, DWORD PTR _xsize$[ebp]
  001a8	03 4d f0	 add	 ecx, DWORD PTR _x$[ebp]
  001ab	8b 55 0c	 mov	 edx, DWORD PTR _output$[ebp]
  001ae	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 240  : 		}

  001b1	e9 5d ff ff ff	 jmp	 $LN11@normalise_
$LN12@normalise_:

; 241  : 	}

  001b6	e9 3a ff ff ff	 jmp	 $LN8@normalise_
$LN9@normalise_:
$LN1@normalise_:

; 242  : }

  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi
  001bd	5b		 pop	 ebx
  001be	8b e5		 mov	 esp, ebp
  001c0	5d		 pop	 ebp
  001c1	c2 10 00	 ret	 16			; 00000010H
?normalise_inlfuence_map@@YGXPAMPAEHH@Z ENDP		; normalise_inlfuence_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?output_all_influence_maps@@YGXXZ
_TEXT	SEGMENT
?output_all_influence_maps@@YGXXZ PROC			; output_all_influence_maps, COMDAT

; 1462 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1463 : 	debug_colour_log (DEBUG_COLOUR_RED, "OUTPUT INFLUENCE MAPS");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FJKFHBFO@OUTPUT?5INFLUENCE?5MAPS@
  0000e	6a 04		 push	 4
  00010	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00015	83 c4 08	 add	 esp, 8

; 1464 : 
; 1465 : 	output_sector_side_influence_map ("IM_SIDE.PSD");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KBOMNHDD@IM_SIDE?4PSD@
  0001d	e8 00 00 00 00	 call	 ?output_sector_side_influence_map@@YGXPBD@Z ; output_sector_side_influence_map

; 1466 : 
; 1467 : 	output_sector_side_normalised_influence_map ("IM_SIDE2.PSD");

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BCEOIBJF@IM_SIDE2?4PSD@
  00027	e8 00 00 00 00	 call	 ?output_sector_side_normalised_influence_map@@YGXPBD@Z ; output_sector_side_normalised_influence_map

; 1468 : 
; 1469 : 	output_sector_fog_of_war_influence_map (ENTITY_SIDE_RED_FORCE, "IM_FOGR.PSD");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KOOPPBDE@IM_FOGR?4PSD@
  00031	6a 02		 push	 2
  00033	e8 00 00 00 00	 call	 ?output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ; output_sector_fog_of_war_influence_map

; 1470 : 	output_sector_fog_of_war_influence_map (ENTITY_SIDE_BLUE_FORCE, "IM_FOGB.PSD");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KNDJPDKP@IM_FOGB?4PSD@
  0003d	6a 01		 push	 1
  0003f	e8 00 00 00 00	 call	 ?output_sector_fog_of_war_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ; output_sector_fog_of_war_influence_map

; 1471 : 
; 1472 : 	output_sector_surface_to_air_influence_map (ENTITY_SIDE_RED_FORCE, "IM_AIRR.PSD");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DJAHCGBD@IM_AIRR?4PSD@
  00049	6a 02		 push	 2
  0004b	e8 00 00 00 00	 call	 ?output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ; output_sector_surface_to_air_influence_map

; 1473 : 	output_sector_surface_to_air_influence_map (ENTITY_SIDE_BLUE_FORCE, "IM_AIRB.PSD");

  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DKNBCEII@IM_AIRB?4PSD@
  00055	6a 01		 push	 1
  00057	e8 00 00 00 00	 call	 ?output_sector_surface_to_air_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ; output_sector_surface_to_air_influence_map

; 1474 : 
; 1475 : 	output_sector_surface_to_surface_influence_map (ENTITY_SIDE_RED_FORCE, "IM_SURFR.PSD");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NLHCBNJL@IM_SURFR?4PSD@
  00061	6a 02		 push	 2
  00063	e8 00 00 00 00	 call	 ?output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ; output_sector_surface_to_surface_influence_map

; 1476 : 	output_sector_surface_to_surface_influence_map (ENTITY_SIDE_BLUE_FORCE, "IM_SURFB.PSD");

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NIKEBPAA@IM_SURFB?4PSD@
  0006d	6a 01		 push	 1
  0006f	e8 00 00 00 00	 call	 ?output_sector_surface_to_surface_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ; output_sector_surface_to_surface_influence_map

; 1477 : 
; 1478 : 	output_sector_importance_influence_map (ENTITY_SIDE_RED_FORCE, "IM_IMPR.PSD");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JBAKJLNI@IM_IMPR?4PSD@
  00079	6a 02		 push	 2
  0007b	e8 00 00 00 00	 call	 ?output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ; output_sector_importance_influence_map

; 1479 : 	output_sector_importance_influence_map (ENTITY_SIDE_BLUE_FORCE, "IM_IMPB.PSD");

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCNMJJED@IM_IMPB?4PSD@
  00085	6a 01		 push	 1
  00087	e8 00 00 00 00	 call	 ?output_sector_importance_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ; output_sector_importance_influence_map

; 1480 : 
; 1481 : 	output_sector_distance_to_friendly_base_influence_map (ENTITY_SIDE_RED_FORCE, "IM_BASER.PSD");

  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BPHAPODD@IM_BASER?4PSD@
  00091	6a 02		 push	 2
  00093	e8 00 00 00 00	 call	 ?output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ; output_sector_distance_to_friendly_base_influence_map

; 1482 : 	output_sector_distance_to_friendly_base_influence_map (ENTITY_SIDE_BLUE_FORCE, "IM_BASEB.PSD");

  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BMKGPMKI@IM_BASEB?4PSD@
  0009d	6a 01		 push	 1
  0009f	e8 00 00 00 00	 call	 ?output_sector_distance_to_friendly_base_influence_map@@YGXW4ENTITY_SIDES@@PBD@Z ; output_sector_distance_to_friendly_base_influence_map

; 1483 : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
?output_all_influence_maps@@YGXXZ ENDP			; output_all_influence_maps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?normalise_surface_defence_imaps@@YGXXZ
_TEXT	SEGMENT
tv83 = -92						; size = 4
_val$ = -24						; size = 4
_raw$ = -20						; size = 4
_sec$ = -16						; size = 4
_side$ = -12						; size = 4
_sz$ = -8						; size = 4
_sx$ = -4						; size = 4
?normalise_surface_defence_imaps@@YGXXZ PROC		; normalise_surface_defence_imaps, COMDAT

; 1084 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1085 : 	int
; 1086 : 		sx,
; 1087 : 		sz,
; 1088 : 		side;
; 1089 : 
; 1090 : 	entity
; 1091 : 		*sec;
; 1092 : 
; 1093 : 	sector
; 1094 : 		*raw;
; 1095 : 
; 1096 : 	float
; 1097 : 		val;
; 1098 : 
; 1099 : 	for (side = 0; side < NUM_ENTITY_SIDES; side ++)

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@normalise_
$LN2@normalise_:
  00012	8b 45 f4	 mov	 eax, DWORD PTR _side$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f4	 mov	 DWORD PTR _side$[ebp], eax
$LN4@normalise_:
  0001b	83 7d f4 03	 cmp	 DWORD PTR _side$[ebp], 3
  0001f	0f 8d 2e 01 00
	00		 jge	 $LN3@normalise_

; 1100 : 	{
; 1101 : 		for (sz = 0; sz < NUM_MAP_Z_SECTORS; sz++)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _sz$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN7@normalise_
$LN5@normalise_:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _sz$[ebp], eax
$LN7@normalise_:
  00037	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  0003a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00040	0f 8d da 00 00
	00		 jge	 $LN6@normalise_

; 1102 : 		{
; 1103 : 			for (sx = 0; sx < NUM_MAP_X_SECTORS; sx++)

  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _sx$[ebp], 0
  0004d	eb 09		 jmp	 SHORT $LN10@normalise_
$LN8@normalise_:
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _sx$[ebp]
  00052	83 c0 01	 add	 eax, 1
  00055	89 45 fc	 mov	 DWORD PTR _sx$[ebp], eax
$LN10@normalise_:
  00058	8b 45 fc	 mov	 eax, DWORD PTR _sx$[ebp]
  0005b	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00061	0f 8d b4 00 00
	00		 jge	 $LN9@normalise_

; 1104 : 			{
; 1105 : 				sec = get_local_raw_sector_entity (sx, sz);

  00067	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  0006a	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00071	03 45 fc	 add	 eax, DWORD PTR _sx$[ebp]
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  0007a	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0007e	74 1a		 je	 SHORT $LN13@normalise_
  00080	8b 55 f8	 mov	 edx, DWORD PTR _sz$[ebp]
  00083	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0008a	03 55 fc	 add	 edx, DWORD PTR _sx$[ebp]
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00092	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00095	89 4d a4	 mov	 DWORD PTR tv83[ebp], ecx
  00098	eb 21		 jmp	 SHORT $LN14@normalise_
$LN13@normalise_:
  0009a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??normalise_surface_defence_imaps@@YGXXZ@4JA
  000a0	83 c2 15	 add	 edx, 21			; 00000015H
  000a3	52		 push	 edx
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b4	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN14@normalise_:
  000bb	8b 4d a4	 mov	 ecx, DWORD PTR tv83[ebp]
  000be	89 4d f0	 mov	 DWORD PTR _sec$[ebp], ecx

; 1106 : 
; 1107 : 				ASSERT (sec);

  000c1	83 7d f0 00	 cmp	 DWORD PTR _sec$[ebp], 0
  000c5	75 18		 jne	 SHORT $LN11@normalise_
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_surface_defence_imaps@@YGXXZ@4JA
  000cc	83 c0 17	 add	 eax, 23			; 00000017H
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  000da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@normalise_:

; 1108 : 
; 1109 : 				raw = (sector*) get_local_entity_data (sec);

  000df	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e5	89 4d ec	 mov	 DWORD PTR _raw$[ebp], ecx

; 1110 : 
; 1111 : 				val = raw->surface_to_surface_defence_level [side];

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _side$[ebp]
  000eb	8b 4d ec	 mov	 ecx, DWORD PTR _raw$[ebp]
  000ee	f3 0f 10 44 81
	50		 movss	 xmm0, DWORD PTR [ecx+eax*4+80]
  000f4	f3 0f 11 45 e8	 movss	 DWORD PTR _val$[ebp], xmm0

; 1112 : 
; 1113 : 				imap_temp_array [(sz * NUM_MAP_X_SECTORS) + sx] = val;

  000f9	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  000fc	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00103	03 45 fc	 add	 eax, DWORD PTR _sx$[ebp]
  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?imap_temp_array@@3PAMA
  0010c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _val$[ebp]
  00111	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 1114 : 			}

  00116	e9 34 ff ff ff	 jmp	 $LN8@normalise_
$LN9@normalise_:

; 1115 : 		}

  0011b	e9 0e ff ff ff	 jmp	 $LN5@normalise_
$LN6@normalise_:

; 1116 : 
; 1117 : 		normalise_inlfuence_map (imap_temp_array, imaps [IMAP_SURFACE_DEFENCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);

  00120	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00125	50		 push	 eax
  00126	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0012c	51		 push	 ecx
  0012d	ba 04 00 00 00	 mov	 edx, 4
  00132	6b c2 03	 imul	 eax, edx, 3
  00135	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?imaps@@3PAPAPAEA[eax]
  0013b	8b 55 f4	 mov	 edx, DWORD PTR _side$[ebp]
  0013e	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00141	50		 push	 eax
  00142	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?imap_temp_array@@3PAMA
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 ?normalise_inlfuence_map@@YGXPAMPAEHH@Z ; normalise_inlfuence_map

; 1118 : 	}

  0014e	e9 bf fe ff ff	 jmp	 $LN2@normalise_
$LN3@normalise_:

; 1119 : }

  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
?normalise_surface_defence_imaps@@YGXXZ ENDP		; normalise_surface_defence_imaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z
_TEXT	SEGMENT
tv291 = -124						; size = 8
tv213 = -116						; size = 4
tv193 = -116						; size = 4
tv162 = -116						; size = 4
tv142 = -116						; size = 4
tv88 = -116						; size = 4
tv205 = -112						; size = 4
tv185 = -112						; size = 4
tv154 = -112						; size = 4
tv134 = -112						; size = 4
tv80 = -112						; size = 4
$T1 = -108						; size = 4
_value$ = -40						; size = 4
_radius$ = -36						; size = 4
_scale$ = -32						; size = 4
_sr2$ = -28						; size = 4
_sector_radius$ = -24					; size = 4
_side$ = -20						; size = 4
_sz$ = -16						; size = 4
_sx$ = -12						; size = 4
_z$ = -8						; size = 4
_x$ = -4						; size = 4
_en$ = 8						; size = 4
_sector$ = 12						; size = 4
_in_use$ = 16						; size = 4
?update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z PROC ; update_imap_surface_to_surface_defence_level, COMDAT

; 1010 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1011 : 	int
; 1012 : 		x,
; 1013 : 		z,
; 1014 : 		sx,
; 1015 : 		sz,
; 1016 : 		side,
; 1017 : 		sector_radius,
; 1018 : 		sr2;
; 1019 : 
; 1020 : 	float
; 1021 : 		scale,
; 1022 : 		radius,
; 1023 : 		value;
; 1024 : 
; 1025 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@update_ima
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  00014	83 c0 0f	 add	 eax, 15			; 0000000fH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@update_ima:

; 1026 : 
; 1027 : 	ASSERT (sector);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _sector$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN9@update_ima
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  00032	83 c0 11	 add	 eax, 17			; 00000011H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06IDGHNJOB@sector@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@update_ima:

; 1028 : 
; 1029 : 	value = get_local_entity_float_value (en, FLOAT_TYPE_POTENTIAL_SURFACE_TO_SURFACE_THREAT);

  00045	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00049	74 0a		 je	 SHORT $LN17@update_ima
  0004b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d 90	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN18@update_ima
$LN17@update_ima:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  0005b	83 c2 13	 add	 edx, 19			; 00000013H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN18@update_ima:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN19@update_ima
  0007f	c7 45 8c 60 00
	00 00		 mov	 DWORD PTR tv88[ebp], 96	; 00000060H
  00086	eb 21		 jmp	 SHORT $LN20@update_ima
$LN19@update_ima:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  0008e	83 c2 13	 add	 edx, 19			; 00000013H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN20@update_ima:
  000a9	6a 60		 push	 96			; 00000060H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 90 bc 02
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 700
  000b6	8b 45 8c	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	d9 5d d8	 fstp	 DWORD PTR _value$[ebp]

; 1030 : 
; 1031 : 	if (value > 0.0)

  000c5	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _value$[ebp]
  000ca	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000d2	0f 86 62 03 00
	00		 jbe	 $LN3@update_ima

; 1032 : 	{
; 1033 : 		side = get_local_entity_int_value (en, INT_TYPE_SIDE);

  000d8	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000dc	74 0a		 je	 SHORT $LN21@update_ima
  000de	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e3	89 4d 90	 mov	 DWORD PTR tv134[ebp], ecx
  000e6	eb 21		 jmp	 SHORT $LN22@update_ima
$LN21@update_ima:
  000e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  000ee	83 c2 17	 add	 edx, 23			; 00000017H
  000f1	52		 push	 edx
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00102	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv134[ebp], 0
$LN22@update_ima:
  00109	b9 01 00 00 00	 mov	 ecx, 1
  0010e	85 c9		 test	 ecx, ecx
  00110	74 09		 je	 SHORT $LN23@update_ima
  00112	c7 45 8c bb 00
	00 00		 mov	 DWORD PTR tv142[ebp], 187 ; 000000bbH
  00119	eb 21		 jmp	 SHORT $LN24@update_ima
$LN23@update_ima:
  0011b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  00121	83 c2 17	 add	 edx, 23			; 00000017H
  00124	52		 push	 edx
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00135	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$LN24@update_ima:
  0013c	68 bb 00 00 00	 push	 187			; 000000bbH
  00141	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00144	51		 push	 ecx
  00145	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv134[ebp], 1116
  0014c	8b 45 8c	 mov	 eax, DWORD PTR tv142[ebp]
  0014f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00156	ff d1		 call	 ecx
  00158	89 45 ec	 mov	 DWORD PTR _side$[ebp], eax

; 1034 : 
; 1035 : 		radius = get_local_entity_float_value (en, FLOAT_TYPE_SURFACE_SCAN_RANGE) * 10.0 / SECTOR_SIDE_LENGTH;

  0015b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0015f	74 0a		 je	 SHORT $LN25@update_ima
  00161	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00164	8b 08		 mov	 ecx, DWORD PTR [eax]
  00166	89 4d 90	 mov	 DWORD PTR tv154[ebp], ecx
  00169	eb 21		 jmp	 SHORT $LN26@update_ima
$LN25@update_ima:
  0016b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  00171	83 c2 19	 add	 edx, 25			; 00000019H
  00174	52		 push	 edx
  00175	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00185	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv154[ebp], 0
$LN26@update_ima:
  0018c	b9 01 00 00 00	 mov	 ecx, 1
  00191	85 c9		 test	 ecx, ecx
  00193	74 09		 je	 SHORT $LN27@update_ima
  00195	c7 45 8c 7f 00
	00 00		 mov	 DWORD PTR tv162[ebp], 127 ; 0000007fH
  0019c	eb 21		 jmp	 SHORT $LN28@update_ima
$LN27@update_ima:
  0019e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  001a4	83 c2 19	 add	 edx, 25			; 00000019H
  001a7	52		 push	 edx
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b8	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv162[ebp], 0
$LN28@update_ima:
  001bf	6a 7f		 push	 127			; 0000007fH
  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001c4	51		 push	 ecx
  001c5	69 55 90 bc 02
	00 00		 imul	 edx, DWORD PTR tv154[ebp], 700
  001cc	8b 45 8c	 mov	 eax, DWORD PTR tv162[ebp]
  001cf	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001d6	ff d1		 call	 ecx
  001d8	dd 5d 84	 fstp	 QWORD PTR tv291[ebp]
  001db	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv291[ebp]
  001e0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4024000000000000
  001e8	f2 0f 2a 0d 00
	00 00 00	 cvtsi2sd xmm1, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  001f0	f2 0f 5e c1	 divsd	 xmm0, xmm1
  001f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f8	f3 0f 11 45 dc	 movss	 DWORD PTR _radius$[ebp], xmm0

; 1036 : 
; 1037 : 		convert_float_to_int (radius, &sector_radius);

  001fd	8d 45 e8	 lea	 eax, DWORD PTR _sector_radius$[ebp]
  00200	50		 push	 eax
  00201	51		 push	 ecx
  00202	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1038 : 
; 1039 : 		sector_radius = max (sector_radius, 1);

  00211	c7 45 94 01 00
	00 00		 mov	 DWORD PTR $T1[ebp], 1
  00218	8d 45 94	 lea	 eax, DWORD PTR $T1[ebp]
  0021b	50		 push	 eax
  0021c	8d 4d e8	 lea	 ecx, DWORD PTR _sector_radius$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  00225	8b 10		 mov	 edx, DWORD PTR [eax]
  00227	89 55 e8	 mov	 DWORD PTR _sector_radius$[ebp], edx

; 1040 : 
; 1041 : 		sr2 = sector_radius * sector_radius;

  0022a	8b 45 e8	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  0022d	0f af 45 e8	 imul	 eax, DWORD PTR _sector_radius$[ebp]
  00231	89 45 e4	 mov	 DWORD PTR _sr2$[ebp], eax

; 1042 : 
; 1043 : 		sx = get_local_entity_int_value (sector, INT_TYPE_X_SECTOR);

  00234	83 7d 0c 00	 cmp	 DWORD PTR _sector$[ebp], 0
  00238	74 0a		 je	 SHORT $LN29@update_ima
  0023a	8b 45 0c	 mov	 eax, DWORD PTR _sector$[ebp]
  0023d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023f	89 4d 90	 mov	 DWORD PTR tv185[ebp], ecx
  00242	eb 21		 jmp	 SHORT $LN30@update_ima
$LN29@update_ima:
  00244	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  0024a	83 c2 21	 add	 edx, 33			; 00000021H
  0024d	52		 push	 edx
  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00253	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0025e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN30@update_ima:
  00265	b9 01 00 00 00	 mov	 ecx, 1
  0026a	85 c9		 test	 ecx, ecx
  0026c	74 09		 je	 SHORT $LN31@update_ima
  0026e	c7 45 8c 15 01
	00 00		 mov	 DWORD PTR tv193[ebp], 277 ; 00000115H
  00275	eb 21		 jmp	 SHORT $LN32@update_ima
$LN31@update_ima:
  00277	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  0027d	83 c2 21	 add	 edx, 33			; 00000021H
  00280	52		 push	 edx
  00281	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00286	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00291	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN32@update_ima:
  00298	68 15 01 00 00	 push	 277			; 00000115H
  0029d	8b 4d 0c	 mov	 ecx, DWORD PTR _sector$[ebp]
  002a0	51		 push	 ecx
  002a1	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 1116
  002a8	8b 45 8c	 mov	 eax, DWORD PTR tv193[ebp]
  002ab	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  002b2	ff d1		 call	 ecx
  002b4	89 45 f4	 mov	 DWORD PTR _sx$[ebp], eax

; 1044 : 		sz = get_local_entity_int_value (sector, INT_TYPE_Z_SECTOR);

  002b7	83 7d 0c 00	 cmp	 DWORD PTR _sector$[ebp], 0
  002bb	74 0a		 je	 SHORT $LN33@update_ima
  002bd	8b 45 0c	 mov	 eax, DWORD PTR _sector$[ebp]
  002c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c2	89 4d 90	 mov	 DWORD PTR tv205[ebp], ecx
  002c5	eb 21		 jmp	 SHORT $LN34@update_ima
$LN33@update_ima:
  002c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  002cd	83 c2 22	 add	 edx, 34			; 00000022H
  002d0	52		 push	 edx
  002d1	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002db	50		 push	 eax
  002dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002e1	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv205[ebp], 0
$LN34@update_ima:
  002e8	b9 01 00 00 00	 mov	 ecx, 1
  002ed	85 c9		 test	 ecx, ecx
  002ef	74 09		 je	 SHORT $LN35@update_ima
  002f1	c7 45 8c 16 01
	00 00		 mov	 DWORD PTR tv213[ebp], 278 ; 00000116H
  002f8	eb 21		 jmp	 SHORT $LN36@update_ima
$LN35@update_ima:
  002fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  00300	83 c2 22	 add	 edx, 34			; 00000022H
  00303	52		 push	 edx
  00304	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00309	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0030e	50		 push	 eax
  0030f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00314	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv213[ebp], 0
$LN36@update_ima:
  0031b	68 16 01 00 00	 push	 278			; 00000116H
  00320	8b 4d 0c	 mov	 ecx, DWORD PTR _sector$[ebp]
  00323	51		 push	 ecx
  00324	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv205[ebp], 1116
  0032b	8b 45 8c	 mov	 eax, DWORD PTR tv213[ebp]
  0032e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00335	ff d1		 call	 ecx
  00337	89 45 f0	 mov	 DWORD PTR _sz$[ebp], eax

; 1045 : 	
; 1046 : 		#if DEBUG_MODULE
; 1047 : 
; 1048 : 		debug_log ("IMAPS: Updating sector S-S for %s at %d, %d (IN USE %d)", get_local_entity_string (en, STRING_TYPE_SHORT_DISPLAY_NAME), sx, sz, in_use);
; 1049 : 
; 1050 : 		#endif
; 1051 : 
; 1052 : 		for (z = -sector_radius; z <= sector_radius; z ++)

  0033a	8b 45 e8	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  0033d	f7 d8		 neg	 eax
  0033f	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
  00342	eb 09		 jmp	 SHORT $LN4@update_ima
$LN2@update_ima:
  00344	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  00347	83 c0 01	 add	 eax, 1
  0034a	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
$LN4@update_ima:
  0034d	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  00350	3b 45 e8	 cmp	 eax, DWORD PTR _sector_radius$[ebp]
  00353	0f 8f e1 00 00
	00		 jg	 $LN3@update_ima

; 1053 : 		{
; 1054 : 			if (((sz + z) < MIN_MAP_Z_SECTOR) || ((sz + z) > MAX_MAP_Z_SECTOR))

  00359	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  0035c	03 45 f8	 add	 eax, DWORD PTR _z$[ebp]
  0035f	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+24
  00365	7c 0e		 jl	 SHORT $LN12@update_ima
  00367	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  0036a	03 45 f8	 add	 eax, DWORD PTR _z$[ebp]
  0036d	3b 05 20 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+32
  00373	7e 02		 jle	 SHORT $LN11@update_ima
$LN12@update_ima:

; 1055 : 			{
; 1056 : 				continue;

  00375	eb cd		 jmp	 SHORT $LN2@update_ima
$LN11@update_ima:

; 1057 : 			}
; 1058 : 
; 1059 : 			for (x = -sector_radius; x <= sector_radius; x ++)

  00377	8b 45 e8	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  0037a	f7 d8		 neg	 eax
  0037c	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
  0037f	eb 09		 jmp	 SHORT $LN7@update_ima
$LN5@update_ima:
  00381	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00384	83 c0 01	 add	 eax, 1
  00387	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@update_ima:
  0038a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0038d	3b 45 e8	 cmp	 eax, DWORD PTR _sector_radius$[ebp]
  00390	0f 8f 9f 00 00
	00		 jg	 $LN6@update_ima

; 1060 : 			{
; 1061 : 				if (((sx + x) < MIN_MAP_X_SECTOR) || ((sx + x) > MAX_MAP_X_SECTOR))

  00396	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  00399	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  0039c	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+20
  003a2	7c 0e		 jl	 SHORT $LN14@update_ima
  003a4	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  003a7	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  003aa	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+28
  003b0	7e 02		 jle	 SHORT $LN13@update_ima
$LN14@update_ima:

; 1062 : 				{
; 1063 : 					continue;

  003b2	eb cd		 jmp	 SHORT $LN5@update_ima
$LN13@update_ima:

; 1064 : 				}
; 1065 : 
; 1066 : 				scale = (float)((x * x) + (z * z)) / (float)sr2;

  003b4	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  003b7	0f af 45 fc	 imul	 eax, DWORD PTR _x$[ebp]
  003bb	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  003be	0f af 4d f8	 imul	 ecx, DWORD PTR _z$[ebp]
  003c2	03 c1		 add	 eax, ecx
  003c4	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003c8	f3 0f 2a 4d e4	 cvtsi2ss xmm1, DWORD PTR _sr2$[ebp]
  003cd	f3 0f 5e c1	 divss	 xmm0, xmm1
  003d1	f3 0f 11 45 e0	 movss	 DWORD PTR _scale$[ebp], xmm0

; 1067 : 
; 1068 : 				if (scale < 1.0)

  003d6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  003db	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003e3	66 0f 2f c8	 comisd	 xmm1, xmm0
  003e7	76 47		 jbe	 SHORT $LN15@update_ima

; 1069 : 				{
; 1070 : 					scale = 1.0 - scale;

  003e9	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  003ee	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003f6	f2 0f 5c c8	 subsd	 xmm1, xmm0
  003fa	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003fe	f3 0f 11 45 e0	 movss	 DWORD PTR _scale$[ebp], xmm0

; 1071 : 
; 1072 : 					update_sector_surface_to_surface_defence_level (sx + x, sz + z, (entity_sides)side, in_use, value * scale);

  00403	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _value$[ebp]
  00408	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0040d	51		 push	 ecx
  0040e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00413	8b 45 10	 mov	 eax, DWORD PTR _in_use$[ebp]
  00416	50		 push	 eax
  00417	8b 4d ec	 mov	 ecx, DWORD PTR _side$[ebp]
  0041a	51		 push	 ecx
  0041b	8b 55 f0	 mov	 edx, DWORD PTR _sz$[ebp]
  0041e	03 55 f8	 add	 edx, DWORD PTR _z$[ebp]
  00421	52		 push	 edx
  00422	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  00425	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  00428	50		 push	 eax
  00429	e8 00 00 00 00	 call	 ?update_sector_surface_to_surface_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z ; update_sector_surface_to_surface_defence_level
  0042e	dd d8		 fstp	 ST(0)
$LN15@update_ima:

; 1073 : 				}
; 1074 : 			}

  00430	e9 4c ff ff ff	 jmp	 $LN5@update_ima
$LN6@update_ima:

; 1075 : 		}

  00435	e9 0a ff ff ff	 jmp	 $LN2@update_ima
$LN3@update_ima:

; 1076 : 	}
; 1077 : }

  0043a	5f		 pop	 edi
  0043b	5e		 pop	 esi
  0043c	5b		 pop	 ebx
  0043d	8b e5		 mov	 esp, ebp
  0043f	5d		 pop	 ebp
  00440	c2 0c 00	 ret	 12			; 0000000cH
?update_imap_surface_to_surface_defence_level@@YGXPAUENTITY@@0H@Z ENDP ; update_imap_surface_to_surface_defence_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?normalise_air_defence_imaps@@YGXXZ
_TEXT	SEGMENT
tv83 = -92						; size = 4
_val$ = -24						; size = 4
_raw$ = -20						; size = 4
_sec$ = -16						; size = 4
_side$ = -12						; size = 4
_sz$ = -8						; size = 4
_sx$ = -4						; size = 4
?normalise_air_defence_imaps@@YGXXZ PROC		; normalise_air_defence_imaps, COMDAT

; 919  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 920  : 	int
; 921  : 		sx,
; 922  : 		sz,
; 923  : 		side;
; 924  : 
; 925  : 	entity
; 926  : 		*sec;
; 927  : 
; 928  : 	sector
; 929  : 		*raw;
; 930  : 
; 931  : 	float
; 932  : 		val;
; 933  : 
; 934  : 	for (side = 0; side < NUM_ENTITY_SIDES; side ++)

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@normalise_
$LN2@normalise_:
  00012	8b 45 f4	 mov	 eax, DWORD PTR _side$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f4	 mov	 DWORD PTR _side$[ebp], eax
$LN4@normalise_:
  0001b	83 7d f4 03	 cmp	 DWORD PTR _side$[ebp], 3
  0001f	0f 8d 2c 01 00
	00		 jge	 $LN3@normalise_

; 935  : 	{
; 936  : 		for (sz = 0; sz < NUM_MAP_Z_SECTORS; sz++)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _sz$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN7@normalise_
$LN5@normalise_:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _sz$[ebp], eax
$LN7@normalise_:
  00037	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  0003a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00040	0f 8d da 00 00
	00		 jge	 $LN6@normalise_

; 937  : 		{
; 938  : 			for (sx = 0; sx < NUM_MAP_X_SECTORS; sx++)

  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _sx$[ebp], 0
  0004d	eb 09		 jmp	 SHORT $LN10@normalise_
$LN8@normalise_:
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _sx$[ebp]
  00052	83 c0 01	 add	 eax, 1
  00055	89 45 fc	 mov	 DWORD PTR _sx$[ebp], eax
$LN10@normalise_:
  00058	8b 45 fc	 mov	 eax, DWORD PTR _sx$[ebp]
  0005b	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00061	0f 8d b4 00 00
	00		 jge	 $LN9@normalise_

; 939  : 			{
; 940  : 				sec = get_local_raw_sector_entity (sx, sz);

  00067	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  0006a	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00071	03 45 fc	 add	 eax, DWORD PTR _sx$[ebp]
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  0007a	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0007e	74 1a		 je	 SHORT $LN13@normalise_
  00080	8b 55 f8	 mov	 edx, DWORD PTR _sz$[ebp]
  00083	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0008a	03 55 fc	 add	 edx, DWORD PTR _sx$[ebp]
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00092	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00095	89 4d a4	 mov	 DWORD PTR tv83[ebp], ecx
  00098	eb 21		 jmp	 SHORT $LN14@normalise_
$LN13@normalise_:
  0009a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??normalise_air_defence_imaps@@YGXXZ@4JA
  000a0	83 c2 15	 add	 edx, 21			; 00000015H
  000a3	52		 push	 edx
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b4	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN14@normalise_:
  000bb	8b 4d a4	 mov	 ecx, DWORD PTR tv83[ebp]
  000be	89 4d f0	 mov	 DWORD PTR _sec$[ebp], ecx

; 941  : 
; 942  : 				ASSERT (sec);

  000c1	83 7d f0 00	 cmp	 DWORD PTR _sec$[ebp], 0
  000c5	75 18		 jne	 SHORT $LN11@normalise_
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_air_defence_imaps@@YGXXZ@4JA
  000cc	83 c0 17	 add	 eax, 23			; 00000017H
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  000da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@normalise_:

; 943  : 
; 944  : 				raw = (sector*) get_local_entity_data (sec);

  000df	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e5	89 4d ec	 mov	 DWORD PTR _raw$[ebp], ecx

; 945  : 
; 946  : 				val = raw->surface_to_air_defence_level [side];

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _side$[ebp]
  000eb	8b 4d ec	 mov	 ecx, DWORD PTR _raw$[ebp]
  000ee	f3 0f 10 44 81
	44		 movss	 xmm0, DWORD PTR [ecx+eax*4+68]
  000f4	f3 0f 11 45 e8	 movss	 DWORD PTR _val$[ebp], xmm0

; 947  : 
; 948  : 				imap_temp_array [(sz * NUM_MAP_X_SECTORS) + sx] = val;

  000f9	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  000fc	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00103	03 45 fc	 add	 eax, DWORD PTR _sx$[ebp]
  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?imap_temp_array@@3PAMA
  0010c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _val$[ebp]
  00111	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 949  : 			}

  00116	e9 34 ff ff ff	 jmp	 $LN8@normalise_
$LN9@normalise_:

; 950  : 		}

  0011b	e9 0e ff ff ff	 jmp	 $LN5@normalise_
$LN6@normalise_:

; 951  : 
; 952  : 		normalise_inlfuence_map (imap_temp_array, imaps [IMAP_AIR_DEFENCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);

  00120	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00125	50		 push	 eax
  00126	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0012c	51		 push	 ecx
  0012d	ba 04 00 00 00	 mov	 edx, 4
  00132	d1 e2		 shl	 edx, 1
  00134	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?imaps@@3PAPAPAEA[edx]
  0013a	8b 4d f4	 mov	 ecx, DWORD PTR _side$[ebp]
  0013d	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00140	52		 push	 edx
  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR ?imap_temp_array@@3PAMA
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?normalise_inlfuence_map@@YGXPAMPAEHH@Z ; normalise_inlfuence_map

; 953  : 	}

  0014c	e9 c1 fe ff ff	 jmp	 $LN2@normalise_
$LN3@normalise_:

; 954  : }

  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c3		 ret	 0
?normalise_air_defence_imaps@@YGXXZ ENDP		; normalise_air_defence_imaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z
_TEXT	SEGMENT
tv291 = -124						; size = 8
tv213 = -116						; size = 4
tv193 = -116						; size = 4
tv162 = -116						; size = 4
tv142 = -116						; size = 4
tv88 = -116						; size = 4
tv205 = -112						; size = 4
tv185 = -112						; size = 4
tv154 = -112						; size = 4
tv134 = -112						; size = 4
tv80 = -112						; size = 4
$T1 = -108						; size = 4
_value$ = -40						; size = 4
_radius$ = -36						; size = 4
_scale$ = -32						; size = 4
_sr2$ = -28						; size = 4
_sector_radius$ = -24					; size = 4
_side$ = -20						; size = 4
_sz$ = -16						; size = 4
_sx$ = -12						; size = 4
_z$ = -8						; size = 4
_x$ = -4						; size = 4
_en$ = 8						; size = 4
_sector$ = 12						; size = 4
_in_use$ = 16						; size = 4
?update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z PROC ; update_imap_surface_to_air_defence_level, COMDAT

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 846  : 	int
; 847  : 		x,
; 848  : 		z,
; 849  : 		sx,
; 850  : 		sz,
; 851  : 		side,
; 852  : 		sector_radius,
; 853  : 		sr2;
; 854  : 
; 855  : 	float
; 856  : 		scale,
; 857  : 		radius,
; 858  : 		value;
; 859  : 
; 860  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@update_ima
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  00014	83 c0 0f	 add	 eax, 15			; 0000000fH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@update_ima:

; 861  : 
; 862  : 	ASSERT (sector);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _sector$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN9@update_ima
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  00032	83 c0 11	 add	 eax, 17			; 00000011H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06IDGHNJOB@sector@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@update_ima:

; 863  : 
; 864  : 	value = get_local_entity_float_value (en, FLOAT_TYPE_POTENTIAL_SURFACE_TO_AIR_THREAT);

  00045	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00049	74 0a		 je	 SHORT $LN17@update_ima
  0004b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d 90	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN18@update_ima
$LN17@update_ima:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  0005b	83 c2 13	 add	 edx, 19			; 00000013H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN18@update_ima:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN19@update_ima
  0007f	c7 45 8c 5f 00
	00 00		 mov	 DWORD PTR tv88[ebp], 95	; 0000005fH
  00086	eb 21		 jmp	 SHORT $LN20@update_ima
$LN19@update_ima:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  0008e	83 c2 13	 add	 edx, 19			; 00000013H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN20@update_ima:
  000a9	6a 5f		 push	 95			; 0000005fH
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 90 bc 02
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 700
  000b6	8b 45 8c	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	d9 5d d8	 fstp	 DWORD PTR _value$[ebp]

; 865  : 
; 866  : 	if (value > 0.0)

  000c5	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _value$[ebp]
  000ca	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000d2	0f 86 62 03 00
	00		 jbe	 $LN3@update_ima

; 867  : 	{
; 868  : 		side = get_local_entity_int_value (en, INT_TYPE_SIDE);

  000d8	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000dc	74 0a		 je	 SHORT $LN21@update_ima
  000de	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e3	89 4d 90	 mov	 DWORD PTR tv134[ebp], ecx
  000e6	eb 21		 jmp	 SHORT $LN22@update_ima
$LN21@update_ima:
  000e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  000ee	83 c2 17	 add	 edx, 23			; 00000017H
  000f1	52		 push	 edx
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00102	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv134[ebp], 0
$LN22@update_ima:
  00109	b9 01 00 00 00	 mov	 ecx, 1
  0010e	85 c9		 test	 ecx, ecx
  00110	74 09		 je	 SHORT $LN23@update_ima
  00112	c7 45 8c bb 00
	00 00		 mov	 DWORD PTR tv142[ebp], 187 ; 000000bbH
  00119	eb 21		 jmp	 SHORT $LN24@update_ima
$LN23@update_ima:
  0011b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  00121	83 c2 17	 add	 edx, 23			; 00000017H
  00124	52		 push	 edx
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00135	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$LN24@update_ima:
  0013c	68 bb 00 00 00	 push	 187			; 000000bbH
  00141	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00144	51		 push	 ecx
  00145	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv134[ebp], 1116
  0014c	8b 45 8c	 mov	 eax, DWORD PTR tv142[ebp]
  0014f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00156	ff d1		 call	 ecx
  00158	89 45 ec	 mov	 DWORD PTR _side$[ebp], eax

; 869  : 
; 870  : 		radius = get_local_entity_float_value (en, FLOAT_TYPE_AIR_SCAN_RANGE) * 10.0 / SECTOR_SIDE_LENGTH;

  0015b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0015f	74 0a		 je	 SHORT $LN25@update_ima
  00161	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00164	8b 08		 mov	 ecx, DWORD PTR [eax]
  00166	89 4d 90	 mov	 DWORD PTR tv154[ebp], ecx
  00169	eb 21		 jmp	 SHORT $LN26@update_ima
$LN25@update_ima:
  0016b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  00171	83 c2 19	 add	 edx, 25			; 00000019H
  00174	52		 push	 edx
  00175	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00185	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv154[ebp], 0
$LN26@update_ima:
  0018c	b9 01 00 00 00	 mov	 ecx, 1
  00191	85 c9		 test	 ecx, ecx
  00193	74 09		 je	 SHORT $LN27@update_ima
  00195	c7 45 8c 05 00
	00 00		 mov	 DWORD PTR tv162[ebp], 5
  0019c	eb 21		 jmp	 SHORT $LN28@update_ima
$LN27@update_ima:
  0019e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  001a4	83 c2 19	 add	 edx, 25			; 00000019H
  001a7	52		 push	 edx
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b8	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv162[ebp], 0
$LN28@update_ima:
  001bf	6a 05		 push	 5
  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001c4	51		 push	 ecx
  001c5	69 55 90 bc 02
	00 00		 imul	 edx, DWORD PTR tv154[ebp], 700
  001cc	8b 45 8c	 mov	 eax, DWORD PTR tv162[ebp]
  001cf	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001d6	ff d1		 call	 ecx
  001d8	dd 5d 84	 fstp	 QWORD PTR tv291[ebp]
  001db	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv291[ebp]
  001e0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4024000000000000
  001e8	f2 0f 2a 0d 00
	00 00 00	 cvtsi2sd xmm1, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  001f0	f2 0f 5e c1	 divsd	 xmm0, xmm1
  001f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f8	f3 0f 11 45 dc	 movss	 DWORD PTR _radius$[ebp], xmm0

; 871  : 
; 872  : 		convert_float_to_int (radius, &sector_radius);

  001fd	8d 45 e8	 lea	 eax, DWORD PTR _sector_radius$[ebp]
  00200	50		 push	 eax
  00201	51		 push	 ecx
  00202	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 873  : 
; 874  : 		sector_radius = max (sector_radius, 1);

  00211	c7 45 94 01 00
	00 00		 mov	 DWORD PTR $T1[ebp], 1
  00218	8d 45 94	 lea	 eax, DWORD PTR $T1[ebp]
  0021b	50		 push	 eax
  0021c	8d 4d e8	 lea	 ecx, DWORD PTR _sector_radius$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  00225	8b 10		 mov	 edx, DWORD PTR [eax]
  00227	89 55 e8	 mov	 DWORD PTR _sector_radius$[ebp], edx

; 875  : 
; 876  : 		sr2 = sector_radius * sector_radius;

  0022a	8b 45 e8	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  0022d	0f af 45 e8	 imul	 eax, DWORD PTR _sector_radius$[ebp]
  00231	89 45 e4	 mov	 DWORD PTR _sr2$[ebp], eax

; 877  : 
; 878  : 		sx = get_local_entity_int_value (sector, INT_TYPE_X_SECTOR);

  00234	83 7d 0c 00	 cmp	 DWORD PTR _sector$[ebp], 0
  00238	74 0a		 je	 SHORT $LN29@update_ima
  0023a	8b 45 0c	 mov	 eax, DWORD PTR _sector$[ebp]
  0023d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023f	89 4d 90	 mov	 DWORD PTR tv185[ebp], ecx
  00242	eb 21		 jmp	 SHORT $LN30@update_ima
$LN29@update_ima:
  00244	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  0024a	83 c2 21	 add	 edx, 33			; 00000021H
  0024d	52		 push	 edx
  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00253	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0025e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN30@update_ima:
  00265	b9 01 00 00 00	 mov	 ecx, 1
  0026a	85 c9		 test	 ecx, ecx
  0026c	74 09		 je	 SHORT $LN31@update_ima
  0026e	c7 45 8c 15 01
	00 00		 mov	 DWORD PTR tv193[ebp], 277 ; 00000115H
  00275	eb 21		 jmp	 SHORT $LN32@update_ima
$LN31@update_ima:
  00277	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  0027d	83 c2 21	 add	 edx, 33			; 00000021H
  00280	52		 push	 edx
  00281	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00286	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00291	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN32@update_ima:
  00298	68 15 01 00 00	 push	 277			; 00000115H
  0029d	8b 4d 0c	 mov	 ecx, DWORD PTR _sector$[ebp]
  002a0	51		 push	 ecx
  002a1	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 1116
  002a8	8b 45 8c	 mov	 eax, DWORD PTR tv193[ebp]
  002ab	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  002b2	ff d1		 call	 ecx
  002b4	89 45 f4	 mov	 DWORD PTR _sx$[ebp], eax

; 879  : 		sz = get_local_entity_int_value (sector, INT_TYPE_Z_SECTOR);

  002b7	83 7d 0c 00	 cmp	 DWORD PTR _sector$[ebp], 0
  002bb	74 0a		 je	 SHORT $LN33@update_ima
  002bd	8b 45 0c	 mov	 eax, DWORD PTR _sector$[ebp]
  002c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c2	89 4d 90	 mov	 DWORD PTR tv205[ebp], ecx
  002c5	eb 21		 jmp	 SHORT $LN34@update_ima
$LN33@update_ima:
  002c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  002cd	83 c2 22	 add	 edx, 34			; 00000022H
  002d0	52		 push	 edx
  002d1	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002db	50		 push	 eax
  002dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002e1	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv205[ebp], 0
$LN34@update_ima:
  002e8	b9 01 00 00 00	 mov	 ecx, 1
  002ed	85 c9		 test	 ecx, ecx
  002ef	74 09		 je	 SHORT $LN35@update_ima
  002f1	c7 45 8c 16 01
	00 00		 mov	 DWORD PTR tv213[ebp], 278 ; 00000116H
  002f8	eb 21		 jmp	 SHORT $LN36@update_ima
$LN35@update_ima:
  002fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z@4JA
  00300	83 c2 22	 add	 edx, 34			; 00000022H
  00303	52		 push	 edx
  00304	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00309	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0030e	50		 push	 eax
  0030f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00314	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv213[ebp], 0
$LN36@update_ima:
  0031b	68 16 01 00 00	 push	 278			; 00000116H
  00320	8b 4d 0c	 mov	 ecx, DWORD PTR _sector$[ebp]
  00323	51		 push	 ecx
  00324	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv205[ebp], 1116
  0032b	8b 45 8c	 mov	 eax, DWORD PTR tv213[ebp]
  0032e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00335	ff d1		 call	 ecx
  00337	89 45 f0	 mov	 DWORD PTR _sz$[ebp], eax

; 880  : 	
; 881  : 		#if DEBUG_MODULE
; 882  : 
; 883  : 		debug_log ("IMAPS: Updating sector S-A for %s at %d, %d (IN USE %d)", get_local_entity_string (en, STRING_TYPE_SHORT_DISPLAY_NAME), sx, sz, in_use);
; 884  : 
; 885  : 		#endif
; 886  : 
; 887  : 		for (z = -sector_radius; z <= sector_radius; z ++)

  0033a	8b 45 e8	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  0033d	f7 d8		 neg	 eax
  0033f	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
  00342	eb 09		 jmp	 SHORT $LN4@update_ima
$LN2@update_ima:
  00344	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  00347	83 c0 01	 add	 eax, 1
  0034a	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
$LN4@update_ima:
  0034d	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  00350	3b 45 e8	 cmp	 eax, DWORD PTR _sector_radius$[ebp]
  00353	0f 8f e1 00 00
	00		 jg	 $LN3@update_ima

; 888  : 		{
; 889  : 			if (((sz + z) < MIN_MAP_Z_SECTOR) || ((sz + z) > MAX_MAP_Z_SECTOR))

  00359	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  0035c	03 45 f8	 add	 eax, DWORD PTR _z$[ebp]
  0035f	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+24
  00365	7c 0e		 jl	 SHORT $LN12@update_ima
  00367	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  0036a	03 45 f8	 add	 eax, DWORD PTR _z$[ebp]
  0036d	3b 05 20 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+32
  00373	7e 02		 jle	 SHORT $LN11@update_ima
$LN12@update_ima:

; 890  : 			{
; 891  : 				continue;

  00375	eb cd		 jmp	 SHORT $LN2@update_ima
$LN11@update_ima:

; 892  : 			}
; 893  : 
; 894  : 			for (x = -sector_radius; x <= sector_radius; x ++)

  00377	8b 45 e8	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  0037a	f7 d8		 neg	 eax
  0037c	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
  0037f	eb 09		 jmp	 SHORT $LN7@update_ima
$LN5@update_ima:
  00381	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00384	83 c0 01	 add	 eax, 1
  00387	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@update_ima:
  0038a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0038d	3b 45 e8	 cmp	 eax, DWORD PTR _sector_radius$[ebp]
  00390	0f 8f 9f 00 00
	00		 jg	 $LN6@update_ima

; 895  : 			{
; 896  : 				if (((sx + x) < MIN_MAP_X_SECTOR) || ((sx + x) > MAX_MAP_X_SECTOR))

  00396	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  00399	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  0039c	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+20
  003a2	7c 0e		 jl	 SHORT $LN14@update_ima
  003a4	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  003a7	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  003aa	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+28
  003b0	7e 02		 jle	 SHORT $LN13@update_ima
$LN14@update_ima:

; 897  : 				{
; 898  : 					continue;

  003b2	eb cd		 jmp	 SHORT $LN5@update_ima
$LN13@update_ima:

; 899  : 				}
; 900  : 
; 901  : 				scale = (float)((x * x) + (z * z)) / (float)sr2;

  003b4	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  003b7	0f af 45 fc	 imul	 eax, DWORD PTR _x$[ebp]
  003bb	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  003be	0f af 4d f8	 imul	 ecx, DWORD PTR _z$[ebp]
  003c2	03 c1		 add	 eax, ecx
  003c4	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003c8	f3 0f 2a 4d e4	 cvtsi2ss xmm1, DWORD PTR _sr2$[ebp]
  003cd	f3 0f 5e c1	 divss	 xmm0, xmm1
  003d1	f3 0f 11 45 e0	 movss	 DWORD PTR _scale$[ebp], xmm0

; 902  : 
; 903  : 				if (scale < 1.0)

  003d6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  003db	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003e3	66 0f 2f c8	 comisd	 xmm1, xmm0
  003e7	76 47		 jbe	 SHORT $LN15@update_ima

; 904  : 				{
; 905  : 					scale = 1.0 - scale;

  003e9	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  003ee	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003f6	f2 0f 5c c8	 subsd	 xmm1, xmm0
  003fa	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003fe	f3 0f 11 45 e0	 movss	 DWORD PTR _scale$[ebp], xmm0

; 906  : 
; 907  : 					update_sector_surface_to_air_defence_level (sx + x, sz + z, (entity_sides)side, in_use, value * scale);

  00403	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _value$[ebp]
  00408	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0040d	51		 push	 ecx
  0040e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00413	8b 45 10	 mov	 eax, DWORD PTR _in_use$[ebp]
  00416	50		 push	 eax
  00417	8b 4d ec	 mov	 ecx, DWORD PTR _side$[ebp]
  0041a	51		 push	 ecx
  0041b	8b 55 f0	 mov	 edx, DWORD PTR _sz$[ebp]
  0041e	03 55 f8	 add	 edx, DWORD PTR _z$[ebp]
  00421	52		 push	 edx
  00422	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  00425	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  00428	50		 push	 eax
  00429	e8 00 00 00 00	 call	 ?update_sector_surface_to_air_defence_level@@YGMHHW4ENTITY_SIDES@@HM@Z ; update_sector_surface_to_air_defence_level
  0042e	dd d8		 fstp	 ST(0)
$LN15@update_ima:

; 908  : 				}
; 909  : 			}

  00430	e9 4c ff ff ff	 jmp	 $LN5@update_ima
$LN6@update_ima:

; 910  : 		}

  00435	e9 0a ff ff ff	 jmp	 $LN2@update_ima
$LN3@update_ima:

; 911  : 	}
; 912  : }

  0043a	5f		 pop	 edi
  0043b	5e		 pop	 esi
  0043c	5b		 pop	 ebx
  0043d	8b e5		 mov	 esp, ebp
  0043f	5d		 pop	 ebp
  00440	c2 0c 00	 ret	 12			; 0000000cH
?update_imap_surface_to_air_defence_level@@YGXPAUENTITY@@0H@Z ENDP ; update_imap_surface_to_air_defence_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?normalise_base_distance_imaps@@YGXXZ
_TEXT	SEGMENT
tv83 = -92						; size = 4
_val$ = -24						; size = 4
_raw$ = -20						; size = 4
_sec$ = -16						; size = 4
_side$ = -12						; size = 4
_sz$ = -8						; size = 4
_sx$ = -4						; size = 4
?normalise_base_distance_imaps@@YGXXZ PROC		; normalise_base_distance_imaps, COMDAT

; 754  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 755  : 	int
; 756  : 		sx,
; 757  : 		sz,
; 758  : 		side;
; 759  : 
; 760  : 	entity
; 761  : 		*sec;
; 762  : 
; 763  : 	sector
; 764  : 		*raw;
; 765  : 
; 766  : 	float
; 767  : 		val;
; 768  : 
; 769  : 	for (side = 0; side < NUM_ENTITY_SIDES; side ++)

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@normalise_
$LN2@normalise_:
  00012	8b 45 f4	 mov	 eax, DWORD PTR _side$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f4	 mov	 DWORD PTR _side$[ebp], eax
$LN4@normalise_:
  0001b	83 7d f4 03	 cmp	 DWORD PTR _side$[ebp], 3
  0001f	0f 8d 2d 01 00
	00		 jge	 $LN3@normalise_

; 770  : 	{
; 771  : 		for (sz = 0; sz < NUM_MAP_Z_SECTORS; sz++)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _sz$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN7@normalise_
$LN5@normalise_:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _sz$[ebp], eax
$LN7@normalise_:
  00037	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  0003a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00040	0f 8d da 00 00
	00		 jge	 $LN6@normalise_

; 772  : 		{
; 773  : 			for (sx = 0; sx < NUM_MAP_X_SECTORS; sx++)

  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _sx$[ebp], 0
  0004d	eb 09		 jmp	 SHORT $LN10@normalise_
$LN8@normalise_:
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _sx$[ebp]
  00052	83 c0 01	 add	 eax, 1
  00055	89 45 fc	 mov	 DWORD PTR _sx$[ebp], eax
$LN10@normalise_:
  00058	8b 45 fc	 mov	 eax, DWORD PTR _sx$[ebp]
  0005b	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00061	0f 8d b4 00 00
	00		 jge	 $LN9@normalise_

; 774  : 			{
; 775  : 				sec = get_local_raw_sector_entity (sx, sz);

  00067	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  0006a	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00071	03 45 fc	 add	 eax, DWORD PTR _sx$[ebp]
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  0007a	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0007e	74 1a		 je	 SHORT $LN13@normalise_
  00080	8b 55 f8	 mov	 edx, DWORD PTR _sz$[ebp]
  00083	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0008a	03 55 fc	 add	 edx, DWORD PTR _sx$[ebp]
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00092	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00095	89 4d a4	 mov	 DWORD PTR tv83[ebp], ecx
  00098	eb 21		 jmp	 SHORT $LN14@normalise_
$LN13@normalise_:
  0009a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??normalise_base_distance_imaps@@YGXXZ@4JA
  000a0	83 c2 15	 add	 edx, 21			; 00000015H
  000a3	52		 push	 edx
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b4	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN14@normalise_:
  000bb	8b 4d a4	 mov	 ecx, DWORD PTR tv83[ebp]
  000be	89 4d f0	 mov	 DWORD PTR _sec$[ebp], ecx

; 776  : 
; 777  : 				ASSERT (sec);

  000c1	83 7d f0 00	 cmp	 DWORD PTR _sec$[ebp], 0
  000c5	75 18		 jne	 SHORT $LN11@normalise_
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_base_distance_imaps@@YGXXZ@4JA
  000cc	83 c0 17	 add	 eax, 23			; 00000017H
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  000da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@normalise_:

; 778  : 
; 779  : 				raw = (sector*) get_local_entity_data (sec);

  000df	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e5	89 4d ec	 mov	 DWORD PTR _raw$[ebp], ecx

; 780  : 
; 781  : 				val = raw->distance_to_friendly_base [side];

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _side$[ebp]
  000eb	8b 4d ec	 mov	 ecx, DWORD PTR _raw$[ebp]
  000ee	f3 0f 10 44 81
	38		 movss	 xmm0, DWORD PTR [ecx+eax*4+56]
  000f4	f3 0f 11 45 e8	 movss	 DWORD PTR _val$[ebp], xmm0

; 782  : 
; 783  : 				imap_temp_array [(sz * NUM_MAP_X_SECTORS) + sx] = val;

  000f9	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  000fc	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00103	03 45 fc	 add	 eax, DWORD PTR _sx$[ebp]
  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?imap_temp_array@@3PAMA
  0010c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _val$[ebp]
  00111	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 784  : 			}

  00116	e9 34 ff ff ff	 jmp	 $LN8@normalise_
$LN9@normalise_:

; 785  : 		}

  0011b	e9 0e ff ff ff	 jmp	 $LN5@normalise_
$LN6@normalise_:

; 786  : 
; 787  : 		normalise_inlfuence_map (imap_temp_array, imaps [IMAP_BASE_DISTANCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);

  00120	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00125	50		 push	 eax
  00126	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0012c	51		 push	 ecx
  0012d	ba 04 00 00 00	 mov	 edx, 4
  00132	c1 e2 00	 shl	 edx, 0
  00135	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?imaps@@3PAPAPAEA[edx]
  0013b	8b 4d f4	 mov	 ecx, DWORD PTR _side$[ebp]
  0013e	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00141	52		 push	 edx
  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?imap_temp_array@@3PAMA
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 ?normalise_inlfuence_map@@YGXPAMPAEHH@Z ; normalise_inlfuence_map

; 788  : 	}

  0014d	e9 c0 fe ff ff	 jmp	 $LN2@normalise_
$LN3@normalise_:

; 789  : }

  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c3		 ret	 0
?normalise_base_distance_imaps@@YGXXZ ENDP		; normalise_base_distance_imaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z
_TEXT	SEGMENT
tv210 = -96						; size = 4
tv187 = -96						; size = 4
tv168 = -96						; size = 4
tv149 = -96						; size = 4
tv202 = -92						; size = 4
tv180 = -92						; size = 4
tv161 = -92						; size = 4
tv141 = -92						; size = 4
tv81 = -92						; size = 4
_raw$ = -24						; size = 4
_z$ = -20						; size = 4
_x$ = -16						; size = 4
_keysite$ = -12						; size = 4
_force$ = -8						; size = 4
_sec$ = -4						; size = 4
_side$ = 8						; size = 4
?update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z PROC ; update_imap_distance_to_friendly_base, COMDAT

; 695  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 696  : 	entity
; 697  : 		*sec,
; 698  : 		*force,
; 699  : 		*keysite;
; 700  : 
; 701  : 	int
; 702  : 		x,
; 703  : 		z;
; 704  : 
; 705  : 	sector
; 706  : 		*raw;
; 707  : 
; 708  : 	for (z = MIN_MAP_Z_SECTOR; z < MAX_MAP_Z_SECTOR; z ++)

  00009	a1 18 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+24
  0000e	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax
  00011	eb 09		 jmp	 SHORT $LN4@update_ima
$LN2@update_ima:
  00013	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  00016	83 c0 01	 add	 eax, 1
  00019	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax
$LN4@update_ima:
  0001c	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  0001f	3b 05 20 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+32
  00025	0f 8d bc 00 00
	00		 jge	 $LN3@update_ima

; 709  : 	{
; 710  : 		for (x = MIN_MAP_X_SECTOR; x < MAX_MAP_X_SECTOR; x ++)

  0002b	a1 14 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+20
  00030	89 45 f0	 mov	 DWORD PTR _x$[ebp], eax
  00033	eb 09		 jmp	 SHORT $LN7@update_ima
$LN5@update_ima:
  00035	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 f0	 mov	 DWORD PTR _x$[ebp], eax
$LN7@update_ima:
  0003e	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  00041	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+28
  00047	0f 8d 95 00 00
	00		 jge	 $LN6@update_ima

; 711  : 		{
; 712  : 			sec = get_local_raw_sector_entity (x, z);

  0004d	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  00050	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00057	03 45 f0	 add	 eax, DWORD PTR _x$[ebp]
  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00060	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00064	74 1a		 je	 SHORT $LN17@update_ima
  00066	8b 55 ec	 mov	 edx, DWORD PTR _z$[ebp]
  00069	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00070	03 55 f0	 add	 edx, DWORD PTR _x$[ebp]
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00078	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0007b	89 4d a4	 mov	 DWORD PTR tv81[ebp], ecx
  0007e	eb 21		 jmp	 SHORT $LN18@update_ima
$LN17@update_ima:
  00080	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA
  00086	83 c2 11	 add	 edx, 17			; 00000011H
  00089	52		 push	 edx
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN18@update_ima:
  000a1	8b 4d a4	 mov	 ecx, DWORD PTR tv81[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR _sec$[ebp], ecx

; 713  : 
; 714  : 			ASSERT (sec);

  000a7	83 7d fc 00	 cmp	 DWORD PTR _sec$[ebp], 0
  000ab	75 18		 jne	 SHORT $LN10@update_ima
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA
  000b2	83 c0 13	 add	 eax, 19			; 00000013H
  000b5	50		 push	 eax
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  000c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@update_ima:

; 715  : 
; 716  : 			raw = (sector*) get_local_entity_data (sec);

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _sec$[ebp]
  000c8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cb	89 4d e8	 mov	 DWORD PTR _raw$[ebp], ecx

; 717  : 
; 718  : 			raw->distance_to_friendly_base [side] = 0.0;

  000ce	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  000d1	8b 4d e8	 mov	 ecx, DWORD PTR _raw$[ebp]
  000d4	0f 57 c0	 xorps	 xmm0, xmm0
  000d7	f3 0f 11 44 81
	38		 movss	 DWORD PTR [ecx+eax*4+56], xmm0

; 719  : 		}

  000dd	e9 53 ff ff ff	 jmp	 $LN5@update_ima
$LN6@update_ima:

; 720  : 	}

  000e2	e9 2c ff ff ff	 jmp	 $LN2@update_ima
$LN3@update_ima:

; 721  : 
; 722  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  000e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  000ee	74 18		 je	 SHORT $LN11@update_ima
  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA
  000f5	83 c0 1b	 add	 eax, 27			; 0000001bH
  000f8	50		 push	 eax
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00103	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@update_ima:

; 723  : 	
; 724  : 	force = get_local_force_entity (side);

  00108	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?get_local_force_entity@@YGPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_local_force_entity
  00111	89 45 f8	 mov	 DWORD PTR _force$[ebp], eax

; 725  : 
; 726  : 	ASSERT (force);

  00114	83 7d f8 00	 cmp	 DWORD PTR _force$[ebp], 0
  00118	75 18		 jne	 SHORT $LN12@update_ima
  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA
  0011f	83 c0 1f	 add	 eax, 31			; 0000001fH
  00122	50		 push	 eax
  00123	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_05BINPNAAL@force@
  0012d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@update_ima:

; 727  : 
; 728  : 	keysite = get_local_entity_first_child (force, LIST_TYPE_KEYSITE_FORCE);

  00132	83 7d f8 00	 cmp	 DWORD PTR _force$[ebp], 0
  00136	74 0a		 je	 SHORT $LN19@update_ima
  00138	8b 45 f8	 mov	 eax, DWORD PTR _force$[ebp]
  0013b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013d	89 4d a4	 mov	 DWORD PTR tv141[ebp], ecx
  00140	eb 21		 jmp	 SHORT $LN20@update_ima
$LN19@update_ima:
  00142	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA
  00148	83 c2 21	 add	 edx, 33			; 00000021H
  0014b	52		 push	 edx
  0014c	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0015c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$LN20@update_ima:
  00163	b9 01 00 00 00	 mov	 ecx, 1
  00168	85 c9		 test	 ecx, ecx
  0016a	74 09		 je	 SHORT $LN21@update_ima
  0016c	c7 45 a0 15 00
	00 00		 mov	 DWORD PTR tv149[ebp], 21 ; 00000015H
  00173	eb 21		 jmp	 SHORT $LN22@update_ima
$LN21@update_ima:
  00175	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA
  0017b	83 c2 21	 add	 edx, 33			; 00000021H
  0017e	52		 push	 edx
  0017f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0018f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN22@update_ima:
  00196	6a 15		 push	 21			; 00000015H
  00198	8b 4d f8	 mov	 ecx, DWORD PTR _force$[ebp]
  0019b	51		 push	 ecx
  0019c	69 55 a4 b4 00
	00 00		 imul	 edx, DWORD PTR tv141[ebp], 180
  001a3	8b 45 a0	 mov	 eax, DWORD PTR tv149[ebp]
  001a6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  001ad	ff d1		 call	 ecx
  001af	89 45 f4	 mov	 DWORD PTR _keysite$[ebp], eax
$LN8@update_ima:

; 729  : 
; 730  : 	while (keysite)

  001b2	83 7d f4 00	 cmp	 DWORD PTR _keysite$[ebp], 0
  001b6	0f 84 88 01 00
	00		 je	 $LN9@update_ima

; 731  : 	{
; 732  : 		if (get_local_entity_int_value (keysite, INT_TYPE_IN_USE))

  001bc	83 7d f4 00	 cmp	 DWORD PTR _keysite$[ebp], 0
  001c0	74 0a		 je	 SHORT $LN23@update_ima
  001c2	8b 45 f4	 mov	 eax, DWORD PTR _keysite$[ebp]
  001c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c7	89 4d a4	 mov	 DWORD PTR tv161[ebp], ecx
  001ca	eb 1d		 jmp	 SHORT $LN24@update_ima
$LN23@update_ima:
  001cc	68 dc 02 00 00	 push	 732			; 000002dcH
  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001dc	52		 push	 edx
  001dd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e2	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv161[ebp], 0
$LN24@update_ima:
  001e9	b8 01 00 00 00	 mov	 eax, 1
  001ee	85 c0		 test	 eax, eax
  001f0	74 09		 je	 SHORT $LN25@update_ima
  001f2	c7 45 a0 6d 00
	00 00		 mov	 DWORD PTR tv168[ebp], 109 ; 0000006dH
  001f9	eb 1d		 jmp	 SHORT $LN26@update_ima
$LN25@update_ima:
  001fb	68 dc 02 00 00	 push	 732			; 000002dcH
  00200	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00205	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0020b	51		 push	 ecx
  0020c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00211	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv168[ebp], 0
$LN26@update_ima:
  00218	6a 6d		 push	 109			; 0000006dH
  0021a	8b 55 f4	 mov	 edx, DWORD PTR _keysite$[ebp]
  0021d	52		 push	 edx
  0021e	69 45 a4 5c 04
	00 00		 imul	 eax, DWORD PTR tv161[ebp], 1116
  00225	8b 4d a0	 mov	 ecx, DWORD PTR tv168[ebp]
  00228	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0022f	ff d2		 call	 edx
  00231	85 c0		 test	 eax, eax
  00233	0f 84 86 00 00
	00		 je	 $LN14@update_ima

; 733  : 		{
; 734  : 			if (get_local_entity_int_value (keysite, INT_TYPE_ALIVE))

  00239	83 7d f4 00	 cmp	 DWORD PTR _keysite$[ebp], 0
  0023d	74 0a		 je	 SHORT $LN27@update_ima
  0023f	8b 45 f4	 mov	 eax, DWORD PTR _keysite$[ebp]
  00242	8b 08		 mov	 ecx, DWORD PTR [eax]
  00244	89 4d a4	 mov	 DWORD PTR tv180[ebp], ecx
  00247	eb 1d		 jmp	 SHORT $LN28@update_ima
$LN27@update_ima:
  00249	68 de 02 00 00	 push	 734			; 000002deH
  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00253	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00259	52		 push	 edx
  0025a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0025f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN28@update_ima:
  00266	b8 01 00 00 00	 mov	 eax, 1
  0026b	85 c0		 test	 eax, eax
  0026d	74 09		 je	 SHORT $LN29@update_ima
  0026f	c7 45 a0 07 00
	00 00		 mov	 DWORD PTR tv187[ebp], 7
  00276	eb 1d		 jmp	 SHORT $LN30@update_ima
$LN29@update_ima:
  00278	68 de 02 00 00	 push	 734			; 000002deH
  0027d	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00282	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00288	51		 push	 ecx
  00289	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0028e	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv187[ebp], 0
$LN30@update_ima:
  00295	6a 07		 push	 7
  00297	8b 55 f4	 mov	 edx, DWORD PTR _keysite$[ebp]
  0029a	52		 push	 edx
  0029b	69 45 a4 5c 04
	00 00		 imul	 eax, DWORD PTR tv180[ebp], 1116
  002a2	8b 4d a0	 mov	 ecx, DWORD PTR tv187[ebp]
  002a5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002ac	ff d2		 call	 edx
  002ae	85 c0		 test	 eax, eax
  002b0	74 0d		 je	 SHORT $LN14@update_ima

; 735  : 			{
; 736  : 				update_keysite_distance_to_friendly_base (keysite, side);

  002b2	8b 45 08	 mov	 eax, DWORD PTR _side$[ebp]
  002b5	50		 push	 eax
  002b6	8b 4d f4	 mov	 ecx, DWORD PTR _keysite$[ebp]
  002b9	51		 push	 ecx
  002ba	e8 00 00 00 00	 call	 ?update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z ; update_keysite_distance_to_friendly_base
$LN14@update_ima:

; 737  : 			}
; 738  : 		}
; 739  : 
; 740  : 		keysite = get_local_entity_child_succ (keysite, LIST_TYPE_KEYSITE_FORCE);

  002bf	83 7d f4 00	 cmp	 DWORD PTR _keysite$[ebp], 0
  002c3	74 0a		 je	 SHORT $LN31@update_ima
  002c5	8b 45 f4	 mov	 eax, DWORD PTR _keysite$[ebp]
  002c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ca	89 4d a4	 mov	 DWORD PTR tv202[ebp], ecx
  002cd	eb 21		 jmp	 SHORT $LN32@update_ima
$LN31@update_ima:
  002cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA
  002d5	83 c2 2d	 add	 edx, 45			; 0000002dH
  002d8	52		 push	 edx
  002d9	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002e9	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv202[ebp], 0
$LN32@update_ima:
  002f0	b9 01 00 00 00	 mov	 ecx, 1
  002f5	85 c9		 test	 ecx, ecx
  002f7	74 09		 je	 SHORT $LN33@update_ima
  002f9	c7 45 a0 15 00
	00 00		 mov	 DWORD PTR tv210[ebp], 21 ; 00000015H
  00300	eb 21		 jmp	 SHORT $LN34@update_ima
$LN33@update_ima:
  00302	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z@4JA
  00308	83 c2 2d	 add	 edx, 45			; 0000002dH
  0030b	52		 push	 edx
  0030c	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00311	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00316	50		 push	 eax
  00317	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0031c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv210[ebp], 0
$LN34@update_ima:
  00323	6a 15		 push	 21			; 00000015H
  00325	8b 4d f4	 mov	 ecx, DWORD PTR _keysite$[ebp]
  00328	51		 push	 ecx
  00329	69 55 a4 b4 00
	00 00		 imul	 edx, DWORD PTR tv202[ebp], 180
  00330	8b 45 a0	 mov	 eax, DWORD PTR tv210[ebp]
  00333	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0033a	ff d1		 call	 ecx
  0033c	89 45 f4	 mov	 DWORD PTR _keysite$[ebp], eax

; 741  : 	}

  0033f	e9 6e fe ff ff	 jmp	 $LN8@update_ima
$LN9@update_ima:

; 742  : 
; 743  : 	if (imaps_initialised)

  00344	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?imaps_initialised@@3HA, 0
  0034b	74 05		 je	 SHORT $LN15@update_ima

; 744  : 	{
; 745  : 		normalise_base_distance_imaps ();

  0034d	e8 00 00 00 00	 call	 ?normalise_base_distance_imaps@@YGXXZ ; normalise_base_distance_imaps
$LN15@update_ima:

; 746  : 	}
; 747  : }

  00352	5f		 pop	 edi
  00353	5e		 pop	 esi
  00354	5b		 pop	 ebx
  00355	8b e5		 mov	 esp, ebp
  00357	5d		 pop	 ebp
  00358	c2 04 00	 ret	 4
?update_imap_distance_to_friendly_base@@YGXW4ENTITY_SIDES@@@Z ENDP ; update_imap_distance_to_friendly_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z
_TEXT	SEGMENT
tv160 = -116						; size = 4
tv95 = -116						; size = 4
tv152 = -112						; size = 4
tv87 = -112						; size = 4
tv75 = -112						; size = 4
$T1 = -108						; size = 4
_radius$ = -40						; size = 4
_scale$ = -36						; size = 4
_pos$ = -32						; size = 4
_sr2$ = -28						; size = 4
_sector_radius$ = -24					; size = 4
_sub_type$ = -20					; size = 4
_sz$ = -16						; size = 4
_sx$ = -12						; size = 4
_z$ = -8						; size = 4
_x$ = -4						; size = 4
_en$ = 8						; size = 4
_side$ = 12						; size = 4
?update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z PROC ; update_keysite_distance_to_friendly_base, COMDAT

; 619  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 620  : 	int
; 621  : 		x,
; 622  : 		z,
; 623  : 		sx,
; 624  : 		sz,
; 625  : 		sub_type,
; 626  : 		sector_radius,
; 627  : 		sr2;
; 628  : 
; 629  : 	vec3d
; 630  : 		*pos;
; 631  : 
; 632  : 	float
; 633  : 		scale,
; 634  : 		radius;
; 635  : 
; 636  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@update_key
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z@4JA
  00014	83 c0 11	 add	 eax, 17			; 00000011H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@update_key:

; 637  : 
; 638  : 	ASSERT (get_local_entity_type (en) == ENTITY_TYPE_KEYSITE);

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN17@update_key
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d 90	 mov	 DWORD PTR tv75[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN18@update_key
$LN17@update_key:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z@4JA
  0003d	83 c2 13	 add	 edx, 19			; 00000013H
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN18@update_key:
  00058	83 7d 90 0f	 cmp	 DWORD PTR tv75[ebp], 15	; 0000000fH
  0005c	74 18		 je	 SHORT $LN9@update_key
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z@4JA
  00063	83 c0 13	 add	 eax, 19			; 00000013H
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BODFACEG@get_local_entity_type?5?$CIen?$CJ?5?$DN?$DN?5E@
  00071	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@update_key:

; 639  : 
; 640  : 	sub_type = get_local_entity_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  00076	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0007a	74 0a		 je	 SHORT $LN19@update_key
  0007c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	89 4d 90	 mov	 DWORD PTR tv87[ebp], ecx
  00084	eb 21		 jmp	 SHORT $LN20@update_key
$LN19@update_key:
  00086	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z@4JA
  0008c	83 c2 15	 add	 edx, 21			; 00000015H
  0008f	52		 push	 edx
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a0	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN20@update_key:
  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	85 c9		 test	 ecx, ecx
  000ae	74 09		 je	 SHORT $LN21@update_key
  000b0	c7 45 8c 34 00
	00 00		 mov	 DWORD PTR tv95[ebp], 52	; 00000034H
  000b7	eb 21		 jmp	 SHORT $LN22@update_key
$LN21@update_key:
  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z@4JA
  000bf	83 c2 15	 add	 edx, 21			; 00000015H
  000c2	52		 push	 edx
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d3	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN22@update_key:
  000da	6a 34		 push	 52			; 00000034H
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000df	51		 push	 ecx
  000e0	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 1116
  000e7	8b 45 8c	 mov	 eax, DWORD PTR tv95[ebp]
  000ea	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000f1	ff d1		 call	 ecx
  000f3	89 45 ec	 mov	 DWORD PTR _sub_type$[ebp], eax

; 641  : 
; 642  : 	radius = keysite_database [sub_type].air_coverage_radius / SECTOR_SIDE_LENGTH;

  000f6	6b 45 ec 44	 imul	 eax, DWORD PTR _sub_type$[ebp], 68
  000fa	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00102	f3 0f 10 88 24
	00 00 00	 movss	 xmm1, DWORD PTR ?keysite_database@@3PAUKEYSITE_DATA@@A[eax+36]
  0010a	f3 0f 5e c8	 divss	 xmm1, xmm0
  0010e	f3 0f 11 4d d8	 movss	 DWORD PTR _radius$[ebp], xmm1

; 643  : 
; 644  : 	if (radius > 0.0)

  00113	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  00118	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00120	0f 86 f2 01 00
	00		 jbe	 $LN3@update_key

; 645  : 	{
; 646  : 		convert_float_to_int (radius, &sector_radius);

  00126	8d 45 e8	 lea	 eax, DWORD PTR _sector_radius$[ebp]
  00129	50		 push	 eax
  0012a	51		 push	 ecx
  0012b	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00135	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 647  : 
; 648  : 		sector_radius = max (sector_radius, 1);

  0013a	c7 45 94 01 00
	00 00		 mov	 DWORD PTR $T1[ebp], 1
  00141	8d 45 94	 lea	 eax, DWORD PTR $T1[ebp]
  00144	50		 push	 eax
  00145	8d 4d e8	 lea	 ecx, DWORD PTR _sector_radius$[ebp]
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  0014e	8b 10		 mov	 edx, DWORD PTR [eax]
  00150	89 55 e8	 mov	 DWORD PTR _sector_radius$[ebp], edx

; 649  : 
; 650  : 		sr2 = sector_radius * sector_radius;

  00153	8b 45 e8	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  00156	0f af 45 e8	 imul	 eax, DWORD PTR _sector_radius$[ebp]
  0015a	89 45 e4	 mov	 DWORD PTR _sr2$[ebp], eax

; 651  : 
; 652  : 		pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  0015d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00161	74 0a		 je	 SHORT $LN23@update_key
  00163	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00166	8b 08		 mov	 ecx, DWORD PTR [eax]
  00168	89 4d 90	 mov	 DWORD PTR tv152[ebp], ecx
  0016b	eb 21		 jmp	 SHORT $LN24@update_key
$LN23@update_key:
  0016d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z@4JA
  00173	83 c2 21	 add	 edx, 33			; 00000021H
  00176	52		 push	 edx
  00177	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00187	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
$LN24@update_key:
  0018e	b9 01 00 00 00	 mov	 ecx, 1
  00193	85 c9		 test	 ecx, ecx
  00195	74 09		 je	 SHORT $LN25@update_key
  00197	c7 45 8c 08 00
	00 00		 mov	 DWORD PTR tv160[ebp], 8
  0019e	eb 21		 jmp	 SHORT $LN26@update_key
$LN25@update_key:
  001a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z@4JA
  001a6	83 c2 21	 add	 edx, 33			; 00000021H
  001a9	52		 push	 edx
  001aa	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ba	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN26@update_key:
  001c1	6a 08		 push	 8
  001c3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001c6	51		 push	 ecx
  001c7	6b 55 90 60	 imul	 edx, DWORD PTR tv152[ebp], 96
  001cb	8b 45 8c	 mov	 eax, DWORD PTR tv160[ebp]
  001ce	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001d5	ff d1		 call	 ecx
  001d7	89 45 e0	 mov	 DWORD PTR _pos$[ebp], eax

; 653  : 	
; 654  : 		get_x_sector (sx, pos->x);

  001da	8d 45 f4	 lea	 eax, DWORD PTR _sx$[ebp]
  001dd	50		 push	 eax
  001de	8b 4d e0	 mov	 ecx, DWORD PTR _pos$[ebp]
  001e1	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  001e5	51		 push	 ecx
  001e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001eb	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  001f0	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  001f3	99		 cdq
  001f4	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  001fa	89 45 f4	 mov	 DWORD PTR _sx$[ebp], eax

; 655  : 		get_z_sector (sz, pos->z);

  001fd	8d 45 f0	 lea	 eax, DWORD PTR _sz$[ebp]
  00200	50		 push	 eax
  00201	8b 4d e0	 mov	 ecx, DWORD PTR _pos$[ebp]
  00204	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00209	51		 push	 ecx
  0020a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020f	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00214	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  00217	99		 cdq
  00218	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  0021e	89 45 f0	 mov	 DWORD PTR _sz$[ebp], eax

; 656  : 	
; 657  : 		#if DEBUG_MODULE
; 658  : 
; 659  : 		debug_log ("IMAPS: Updating sector base distance for %s at %d, %d (IN USE : %d)", get_local_entity_string (en, STRING_TYPE_KEYSITE_NAME), sx, sz, in_use);
; 660  : 
; 661  : 		#endif
; 662  : 
; 663  : 		for (z = -sector_radius; z <= sector_radius; z ++)

  00221	8b 45 e8	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  00224	f7 d8		 neg	 eax
  00226	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
  00229	eb 09		 jmp	 SHORT $LN4@update_key
$LN2@update_key:
  0022b	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  0022e	83 c0 01	 add	 eax, 1
  00231	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
$LN4@update_key:
  00234	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  00237	3b 45 e8	 cmp	 eax, DWORD PTR _sector_radius$[ebp]
  0023a	0f 8f d8 00 00
	00		 jg	 $LN3@update_key

; 664  : 		{
; 665  : 			if (((sz + z) < MIN_MAP_Z_SECTOR) || ((sz + z) > MAX_MAP_Z_SECTOR))

  00240	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  00243	03 45 f8	 add	 eax, DWORD PTR _z$[ebp]
  00246	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+24
  0024c	7c 0e		 jl	 SHORT $LN12@update_key
  0024e	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  00251	03 45 f8	 add	 eax, DWORD PTR _z$[ebp]
  00254	3b 05 20 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+32
  0025a	7e 02		 jle	 SHORT $LN11@update_key
$LN12@update_key:

; 666  : 			{
; 667  : 				continue;

  0025c	eb cd		 jmp	 SHORT $LN2@update_key
$LN11@update_key:

; 668  : 			}
; 669  : 
; 670  : 			for (x = -sector_radius; x <= sector_radius; x ++)

  0025e	8b 45 e8	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  00261	f7 d8		 neg	 eax
  00263	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
  00266	eb 09		 jmp	 SHORT $LN7@update_key
$LN5@update_key:
  00268	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0026b	83 c0 01	 add	 eax, 1
  0026e	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@update_key:
  00271	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00274	3b 45 e8	 cmp	 eax, DWORD PTR _sector_radius$[ebp]
  00277	0f 8f 96 00 00
	00		 jg	 $LN6@update_key

; 671  : 			{
; 672  : 				if (((sx + x) < MIN_MAP_X_SECTOR) || ((sx + x) > MAX_MAP_X_SECTOR))

  0027d	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  00280	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  00283	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+20
  00289	7c 0e		 jl	 SHORT $LN14@update_key
  0028b	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  0028e	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  00291	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+28
  00297	7e 02		 jle	 SHORT $LN13@update_key
$LN14@update_key:

; 673  : 				{
; 674  : 					continue;

  00299	eb cd		 jmp	 SHORT $LN5@update_key
$LN13@update_key:

; 675  : 				}
; 676  : 
; 677  : 				scale = (float)((x * x) + (z * z)) / (float)sr2;

  0029b	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0029e	0f af 45 fc	 imul	 eax, DWORD PTR _x$[ebp]
  002a2	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  002a5	0f af 4d f8	 imul	 ecx, DWORD PTR _z$[ebp]
  002a9	03 c1		 add	 eax, ecx
  002ab	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002af	f3 0f 2a 4d e4	 cvtsi2ss xmm1, DWORD PTR _sr2$[ebp]
  002b4	f3 0f 5e c1	 divss	 xmm0, xmm1
  002b8	f3 0f 11 45 dc	 movss	 DWORD PTR _scale$[ebp], xmm0

; 678  : 
; 679  : 				if (scale < 1.0)

  002bd	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  002c2	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002ca	66 0f 2f c8	 comisd	 xmm1, xmm0
  002ce	76 3e		 jbe	 SHORT $LN15@update_key

; 680  : 				{
; 681  : 					scale = 1.0 - scale;

  002d0	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  002d5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002dd	f2 0f 5c c8	 subsd	 xmm1, xmm0
  002e1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002e5	f3 0f 11 45 dc	 movss	 DWORD PTR _scale$[ebp], xmm0

; 682  : 
; 683  : 					update_sector_distance_to_friendly_base (sx + x, sz + z, side, scale);

  002ea	51		 push	 ecx
  002eb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _scale$[ebp]
  002f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f5	8b 45 0c	 mov	 eax, DWORD PTR _side$[ebp]
  002f8	50		 push	 eax
  002f9	8b 4d f0	 mov	 ecx, DWORD PTR _sz$[ebp]
  002fc	03 4d f8	 add	 ecx, DWORD PTR _z$[ebp]
  002ff	51		 push	 ecx
  00300	8b 55 f4	 mov	 edx, DWORD PTR _sx$[ebp]
  00303	03 55 fc	 add	 edx, DWORD PTR _x$[ebp]
  00306	52		 push	 edx
  00307	e8 00 00 00 00	 call	 ?update_sector_distance_to_friendly_base@@YGMHHW4ENTITY_SIDES@@M@Z ; update_sector_distance_to_friendly_base
  0030c	dd d8		 fstp	 ST(0)
$LN15@update_key:

; 684  : 				}
; 685  : 			}

  0030e	e9 55 ff ff ff	 jmp	 $LN5@update_key
$LN6@update_key:

; 686  : 		}

  00313	e9 13 ff ff ff	 jmp	 $LN2@update_key
$LN3@update_key:

; 687  : 	}
; 688  : }

  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	5b		 pop	 ebx
  0031b	8b e5		 mov	 esp, ebp
  0031d	5d		 pop	 ebp
  0031e	c2 08 00	 ret	 8
?update_keysite_distance_to_friendly_base@@YGXPAUENTITY@@W4ENTITY_SIDES@@@Z ENDP ; update_keysite_distance_to_friendly_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?normalise_importance_imaps@@YGXXZ
_TEXT	SEGMENT
tv83 = -92						; size = 4
_val$ = -24						; size = 4
_raw$ = -20						; size = 4
_sec$ = -16						; size = 4
_side$ = -12						; size = 4
_sz$ = -8						; size = 4
_sx$ = -4						; size = 4
?normalise_importance_imaps@@YGXXZ PROC			; normalise_importance_imaps, COMDAT

; 537  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 538  : 	int
; 539  : 		sx,
; 540  : 		sz,
; 541  : 		side;
; 542  : 
; 543  : 	entity
; 544  : 		*sec;
; 545  : 
; 546  : 	sector
; 547  : 		*raw;
; 548  : 
; 549  : 	float
; 550  : 		val;
; 551  : 
; 552  : 	for (side = 0; side < NUM_ENTITY_SIDES; side ++)

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@normalise_
$LN2@normalise_:
  00012	8b 45 f4	 mov	 eax, DWORD PTR _side$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f4	 mov	 DWORD PTR _side$[ebp], eax
$LN4@normalise_:
  0001b	83 7d f4 03	 cmp	 DWORD PTR _side$[ebp], 3
  0001f	0f 8d 2e 01 00
	00		 jge	 $LN3@normalise_

; 553  : 	{
; 554  : 		for (sz = 0; sz < NUM_MAP_Z_SECTORS; sz++)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _sz$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN7@normalise_
$LN5@normalise_:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _sz$[ebp], eax
$LN7@normalise_:
  00037	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  0003a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00040	0f 8d da 00 00
	00		 jge	 $LN6@normalise_

; 555  : 		{
; 556  : 			for (sx = 0; sx < NUM_MAP_X_SECTORS; sx++)

  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _sx$[ebp], 0
  0004d	eb 09		 jmp	 SHORT $LN10@normalise_
$LN8@normalise_:
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _sx$[ebp]
  00052	83 c0 01	 add	 eax, 1
  00055	89 45 fc	 mov	 DWORD PTR _sx$[ebp], eax
$LN10@normalise_:
  00058	8b 45 fc	 mov	 eax, DWORD PTR _sx$[ebp]
  0005b	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00061	0f 8d b4 00 00
	00		 jge	 $LN9@normalise_

; 557  : 			{
; 558  : 				sec = get_local_raw_sector_entity (sx, sz);

  00067	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  0006a	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00071	03 45 fc	 add	 eax, DWORD PTR _sx$[ebp]
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  0007a	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0007e	74 1a		 je	 SHORT $LN13@normalise_
  00080	8b 55 f8	 mov	 edx, DWORD PTR _sz$[ebp]
  00083	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0008a	03 55 fc	 add	 edx, DWORD PTR _sx$[ebp]
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00092	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00095	89 4d a4	 mov	 DWORD PTR tv83[ebp], ecx
  00098	eb 21		 jmp	 SHORT $LN14@normalise_
$LN13@normalise_:
  0009a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??normalise_importance_imaps@@YGXXZ@4JA
  000a0	83 c2 15	 add	 edx, 21			; 00000015H
  000a3	52		 push	 edx
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b4	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN14@normalise_:
  000bb	8b 4d a4	 mov	 ecx, DWORD PTR tv83[ebp]
  000be	89 4d f0	 mov	 DWORD PTR _sec$[ebp], ecx

; 559  : 
; 560  : 				ASSERT (sec);

  000c1	83 7d f0 00	 cmp	 DWORD PTR _sec$[ebp], 0
  000c5	75 18		 jne	 SHORT $LN11@normalise_
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_importance_imaps@@YGXXZ@4JA
  000cc	83 c0 17	 add	 eax, 23			; 00000017H
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  000da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@normalise_:

; 561  : 
; 562  : 				raw = (sector*) get_local_entity_data (sec);

  000df	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e5	89 4d ec	 mov	 DWORD PTR _raw$[ebp], ecx

; 563  : 
; 564  : 				val = raw->importance_level [side];

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _side$[ebp]
  000eb	8b 4d ec	 mov	 ecx, DWORD PTR _raw$[ebp]
  000ee	f3 0f 10 44 81
	2c		 movss	 xmm0, DWORD PTR [ecx+eax*4+44]
  000f4	f3 0f 11 45 e8	 movss	 DWORD PTR _val$[ebp], xmm0

; 565  : 
; 566  : 				imap_temp_array [(sz * NUM_MAP_X_SECTORS) + sx] = val;

  000f9	8b 45 f8	 mov	 eax, DWORD PTR _sz$[ebp]
  000fc	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00103	03 45 fc	 add	 eax, DWORD PTR _sx$[ebp]
  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?imap_temp_array@@3PAMA
  0010c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _val$[ebp]
  00111	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 567  : 			}

  00116	e9 34 ff ff ff	 jmp	 $LN8@normalise_
$LN9@normalise_:

; 568  : 		}

  0011b	e9 0e ff ff ff	 jmp	 $LN5@normalise_
$LN6@normalise_:

; 569  : 
; 570  : 		normalise_inlfuence_map (imap_temp_array, imaps [IMAP_IMPORTANCE][side], NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS);

  00120	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00125	50		 push	 eax
  00126	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0012c	51		 push	 ecx
  0012d	ba 04 00 00 00	 mov	 edx, 4
  00132	6b c2 00	 imul	 eax, edx, 0
  00135	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?imaps@@3PAPAPAEA[eax]
  0013b	8b 55 f4	 mov	 edx, DWORD PTR _side$[ebp]
  0013e	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00141	50		 push	 eax
  00142	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?imap_temp_array@@3PAMA
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 ?normalise_inlfuence_map@@YGXPAMPAEHH@Z ; normalise_inlfuence_map

; 571  : 	}

  0014e	e9 bf fe ff ff	 jmp	 $LN2@normalise_
$LN3@normalise_:

; 572  : }

  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
?normalise_importance_imaps@@YGXXZ ENDP			; normalise_importance_imaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_imap_importance_level@@YGXPAUENTITY@@H@Z
_TEXT	SEGMENT
tv200 = -124						; size = 4
tv169 = -124						; size = 4
tv149 = -124						; size = 4
tv95 = -124						; size = 4
tv192 = -120						; size = 4
tv161 = -120						; size = 4
tv141 = -120						; size = 4
tv87 = -120						; size = 4
tv75 = -120						; size = 4
$T1 = -116						; size = 4
_importance$ = -48					; size = 4
_radius$ = -44						; size = 4
_scale$ = -40						; size = 4
_pos$ = -36						; size = 4
_sr2$ = -32						; size = 4
_sector_radius$ = -28					; size = 4
_sub_type$ = -24					; size = 4
_side$ = -20						; size = 4
_sz$ = -16						; size = 4
_sx$ = -12						; size = 4
_z$ = -8						; size = 4
_x$ = -4						; size = 4
_en$ = 8						; size = 4
_in_use$ = 12						; size = 4
?update_imap_importance_level@@YGXPAUENTITY@@H@Z PROC	; update_imap_importance_level, COMDAT

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 456  : 	int
; 457  : 		x,
; 458  : 		z,
; 459  : 		sx,
; 460  : 		sz,
; 461  : 		side,
; 462  : 		sub_type,
; 463  : 		sector_radius,
; 464  : 		sr2;
; 465  : 
; 466  : 	vec3d
; 467  : 		*pos;
; 468  : 
; 469  : 	float
; 470  : 		scale,
; 471  : 		radius,
; 472  : 		importance;
; 473  : 
; 474  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@update_ima
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  00014	83 c0 13	 add	 eax, 19			; 00000013H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@update_ima:

; 475  : 
; 476  : 	ASSERT (get_local_entity_type (en) == ENTITY_TYPE_KEYSITE);

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN17@update_ima
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d 88	 mov	 DWORD PTR tv75[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN18@update_ima
$LN17@update_ima:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  0003d	83 c2 15	 add	 edx, 21			; 00000015H
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN18@update_ima:
  00058	83 7d 88 0f	 cmp	 DWORD PTR tv75[ebp], 15	; 0000000fH
  0005c	74 18		 je	 SHORT $LN9@update_ima
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  00063	83 c0 15	 add	 eax, 21			; 00000015H
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BODFACEG@get_local_entity_type?5?$CIen?$CJ?5?$DN?$DN?5E@
  00071	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@update_ima:

; 477  : 
; 478  : 	importance = get_local_entity_float_value (en, FLOAT_TYPE_KEYSITE_IMPORTANCE);

  00076	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0007a	74 0a		 je	 SHORT $LN19@update_ima
  0007c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	89 4d 88	 mov	 DWORD PTR tv87[ebp], ecx
  00084	eb 21		 jmp	 SHORT $LN20@update_ima
$LN19@update_ima:
  00086	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  0008c	83 c2 17	 add	 edx, 23			; 00000017H
  0008f	52		 push	 edx
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a0	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN20@update_ima:
  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	85 c9		 test	 ecx, ecx
  000ae	74 09		 je	 SHORT $LN21@update_ima
  000b0	c7 45 84 38 00
	00 00		 mov	 DWORD PTR tv95[ebp], 56	; 00000038H
  000b7	eb 21		 jmp	 SHORT $LN22@update_ima
$LN21@update_ima:
  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  000bf	83 c2 17	 add	 edx, 23			; 00000017H
  000c2	52		 push	 edx
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d3	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN22@update_ima:
  000da	6a 38		 push	 56			; 00000038H
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000df	51		 push	 ecx
  000e0	69 55 88 bc 02
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 700
  000e7	8b 45 84	 mov	 eax, DWORD PTR tv95[ebp]
  000ea	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000f1	ff d1		 call	 ecx
  000f3	d9 5d d0	 fstp	 DWORD PTR _importance$[ebp]

; 479  : 
; 480  : 	if (importance > 0.0)

  000f6	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _importance$[ebp]
  000fb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00103	0f 86 1b 03 00
	00		 jbe	 $LN3@update_ima

; 481  : 	{
; 482  : 		side = get_local_entity_int_value (en, INT_TYPE_SIDE);

  00109	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0010d	74 0a		 je	 SHORT $LN23@update_ima
  0010f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00112	8b 08		 mov	 ecx, DWORD PTR [eax]
  00114	89 4d 88	 mov	 DWORD PTR tv141[ebp], ecx
  00117	eb 21		 jmp	 SHORT $LN24@update_ima
$LN23@update_ima:
  00119	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  0011f	83 c2 1b	 add	 edx, 27			; 0000001bH
  00122	52		 push	 edx
  00123	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00133	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$LN24@update_ima:
  0013a	b9 01 00 00 00	 mov	 ecx, 1
  0013f	85 c9		 test	 ecx, ecx
  00141	74 09		 je	 SHORT $LN25@update_ima
  00143	c7 45 84 bb 00
	00 00		 mov	 DWORD PTR tv149[ebp], 187 ; 000000bbH
  0014a	eb 21		 jmp	 SHORT $LN26@update_ima
$LN25@update_ima:
  0014c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  00152	83 c2 1b	 add	 edx, 27			; 0000001bH
  00155	52		 push	 edx
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00166	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN26@update_ima:
  0016d	68 bb 00 00 00	 push	 187			; 000000bbH
  00172	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00175	51		 push	 ecx
  00176	69 55 88 5c 04
	00 00		 imul	 edx, DWORD PTR tv141[ebp], 1116
  0017d	8b 45 84	 mov	 eax, DWORD PTR tv149[ebp]
  00180	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00187	ff d1		 call	 ecx
  00189	89 45 ec	 mov	 DWORD PTR _side$[ebp], eax

; 483  : 
; 484  : 		sub_type = get_local_entity_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  0018c	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00190	74 0a		 je	 SHORT $LN27@update_ima
  00192	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00195	8b 08		 mov	 ecx, DWORD PTR [eax]
  00197	89 4d 88	 mov	 DWORD PTR tv161[ebp], ecx
  0019a	eb 21		 jmp	 SHORT $LN28@update_ima
$LN27@update_ima:
  0019c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  001a2	83 c2 1d	 add	 edx, 29			; 0000001dH
  001a5	52		 push	 edx
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b6	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv161[ebp], 0
$LN28@update_ima:
  001bd	b9 01 00 00 00	 mov	 ecx, 1
  001c2	85 c9		 test	 ecx, ecx
  001c4	74 09		 je	 SHORT $LN29@update_ima
  001c6	c7 45 84 34 00
	00 00		 mov	 DWORD PTR tv169[ebp], 52 ; 00000034H
  001cd	eb 21		 jmp	 SHORT $LN30@update_ima
$LN29@update_ima:
  001cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  001d5	83 c2 1d	 add	 edx, 29			; 0000001dH
  001d8	52		 push	 edx
  001d9	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e9	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv169[ebp], 0
$LN30@update_ima:
  001f0	6a 34		 push	 52			; 00000034H
  001f2	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001f5	51		 push	 ecx
  001f6	69 55 88 5c 04
	00 00		 imul	 edx, DWORD PTR tv161[ebp], 1116
  001fd	8b 45 84	 mov	 eax, DWORD PTR tv169[ebp]
  00200	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00207	ff d1		 call	 ecx
  00209	89 45 e8	 mov	 DWORD PTR _sub_type$[ebp], eax

; 485  : 
; 486  : 		radius = keysite_database [sub_type].importance_radius / SECTOR_SIDE_LENGTH;

  0020c	6b 45 e8 44	 imul	 eax, DWORD PTR _sub_type$[ebp], 68
  00210	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00218	f3 0f 10 88 20
	00 00 00	 movss	 xmm1, DWORD PTR ?keysite_database@@3PAUKEYSITE_DATA@@A[eax+32]
  00220	f3 0f 5e c8	 divss	 xmm1, xmm0
  00224	f3 0f 11 4d d4	 movss	 DWORD PTR _radius$[ebp], xmm1

; 487  : 
; 488  : 		convert_float_to_int (radius, &sector_radius);

  00229	8d 45 e4	 lea	 eax, DWORD PTR _sector_radius$[ebp]
  0022c	50		 push	 eax
  0022d	51		 push	 ecx
  0022e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 489  : 
; 490  : 		sector_radius = max (sector_radius, 1);

  0023d	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR $T1[ebp], 1
  00244	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00247	50		 push	 eax
  00248	8d 4d e4	 lea	 ecx, DWORD PTR _sector_radius$[ebp]
  0024b	51		 push	 ecx
  0024c	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  00251	8b 10		 mov	 edx, DWORD PTR [eax]
  00253	89 55 e4	 mov	 DWORD PTR _sector_radius$[ebp], edx

; 491  : 
; 492  : 		sr2 = sector_radius * sector_radius;

  00256	8b 45 e4	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  00259	0f af 45 e4	 imul	 eax, DWORD PTR _sector_radius$[ebp]
  0025d	89 45 e0	 mov	 DWORD PTR _sr2$[ebp], eax

; 493  : 
; 494  : 		pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  00260	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00264	74 0a		 je	 SHORT $LN31@update_ima
  00266	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00269	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026b	89 4d 88	 mov	 DWORD PTR tv192[ebp], ecx
  0026e	eb 21		 jmp	 SHORT $LN32@update_ima
$LN31@update_ima:
  00270	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  00276	83 c2 27	 add	 edx, 39			; 00000027H
  00279	52		 push	 edx
  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0028a	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv192[ebp], 0
$LN32@update_ima:
  00291	b9 01 00 00 00	 mov	 ecx, 1
  00296	85 c9		 test	 ecx, ecx
  00298	74 09		 je	 SHORT $LN33@update_ima
  0029a	c7 45 84 08 00
	00 00		 mov	 DWORD PTR tv200[ebp], 8
  002a1	eb 21		 jmp	 SHORT $LN34@update_ima
$LN33@update_ima:
  002a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_importance_level@@YGXPAUENTITY@@H@Z@4JA
  002a9	83 c2 27	 add	 edx, 39			; 00000027H
  002ac	52		 push	 edx
  002ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002bd	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv200[ebp], 0
$LN34@update_ima:
  002c4	6a 08		 push	 8
  002c6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002c9	51		 push	 ecx
  002ca	6b 55 88 60	 imul	 edx, DWORD PTR tv192[ebp], 96
  002ce	8b 45 84	 mov	 eax, DWORD PTR tv200[ebp]
  002d1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  002d8	ff d1		 call	 ecx
  002da	89 45 dc	 mov	 DWORD PTR _pos$[ebp], eax

; 495  : 	
; 496  : 		get_x_sector (sx, pos->x);

  002dd	8d 45 f4	 lea	 eax, DWORD PTR _sx$[ebp]
  002e0	50		 push	 eax
  002e1	8b 4d dc	 mov	 ecx, DWORD PTR _pos$[ebp]
  002e4	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  002e8	51		 push	 ecx
  002e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ee	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  002f3	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  002f6	99		 cdq
  002f7	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  002fd	89 45 f4	 mov	 DWORD PTR _sx$[ebp], eax

; 497  : 		get_z_sector (sz, pos->z);

  00300	8d 45 f0	 lea	 eax, DWORD PTR _sz$[ebp]
  00303	50		 push	 eax
  00304	8b 4d dc	 mov	 ecx, DWORD PTR _pos$[ebp]
  00307	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0030c	51		 push	 ecx
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00317	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  0031a	99		 cdq
  0031b	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00321	89 45 f0	 mov	 DWORD PTR _sz$[ebp], eax

; 498  : 	
; 499  : 		#if DEBUG_MODULE
; 500  : 
; 501  : 		debug_log ("IMAPS: Updating sector importance for %s at %d, %d (IN USE : %d)", get_local_entity_string (en, STRING_TYPE_KEYSITE_NAME), sx, sz, in_use);
; 502  : 
; 503  : 		#endif
; 504  : 
; 505  : 		for (z = -sector_radius; z <= sector_radius; z ++)

  00324	8b 45 e4	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  00327	f7 d8		 neg	 eax
  00329	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
  0032c	eb 09		 jmp	 SHORT $LN4@update_ima
$LN2@update_ima:
  0032e	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  00331	83 c0 01	 add	 eax, 1
  00334	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
$LN4@update_ima:
  00337	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  0033a	3b 45 e4	 cmp	 eax, DWORD PTR _sector_radius$[ebp]
  0033d	0f 8f e1 00 00
	00		 jg	 $LN3@update_ima

; 506  : 		{
; 507  : 			if (((sz + z) < MIN_MAP_Z_SECTOR) || ((sz + z) > MAX_MAP_Z_SECTOR))

  00343	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  00346	03 45 f8	 add	 eax, DWORD PTR _z$[ebp]
  00349	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+24
  0034f	7c 0e		 jl	 SHORT $LN12@update_ima
  00351	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  00354	03 45 f8	 add	 eax, DWORD PTR _z$[ebp]
  00357	3b 05 20 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+32
  0035d	7e 02		 jle	 SHORT $LN11@update_ima
$LN12@update_ima:

; 508  : 			{
; 509  : 				continue;

  0035f	eb cd		 jmp	 SHORT $LN2@update_ima
$LN11@update_ima:

; 510  : 			}
; 511  : 
; 512  : 			for (x = -sector_radius; x <= sector_radius; x ++)

  00361	8b 45 e4	 mov	 eax, DWORD PTR _sector_radius$[ebp]
  00364	f7 d8		 neg	 eax
  00366	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
  00369	eb 09		 jmp	 SHORT $LN7@update_ima
$LN5@update_ima:
  0036b	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0036e	83 c0 01	 add	 eax, 1
  00371	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@update_ima:
  00374	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00377	3b 45 e4	 cmp	 eax, DWORD PTR _sector_radius$[ebp]
  0037a	0f 8f 9f 00 00
	00		 jg	 $LN6@update_ima

; 513  : 			{
; 514  : 				if (((sx + x) < MIN_MAP_X_SECTOR) || ((sx + x) > MAX_MAP_X_SECTOR))

  00380	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  00383	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  00386	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+20
  0038c	7c 0e		 jl	 SHORT $LN14@update_ima
  0038e	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  00391	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  00394	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+28
  0039a	7e 02		 jle	 SHORT $LN13@update_ima
$LN14@update_ima:

; 515  : 				{
; 516  : 					continue;

  0039c	eb cd		 jmp	 SHORT $LN5@update_ima
$LN13@update_ima:

; 517  : 				}
; 518  : 
; 519  : 				scale = (float)((x * x) + (z * z)) / (float)sr2;

  0039e	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  003a1	0f af 45 fc	 imul	 eax, DWORD PTR _x$[ebp]
  003a5	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  003a8	0f af 4d f8	 imul	 ecx, DWORD PTR _z$[ebp]
  003ac	03 c1		 add	 eax, ecx
  003ae	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003b2	f3 0f 2a 4d e0	 cvtsi2ss xmm1, DWORD PTR _sr2$[ebp]
  003b7	f3 0f 5e c1	 divss	 xmm0, xmm1
  003bb	f3 0f 11 45 d8	 movss	 DWORD PTR _scale$[ebp], xmm0

; 520  : 
; 521  : 				if (scale < 1.0)

  003c0	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  003c5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003cd	66 0f 2f c8	 comisd	 xmm1, xmm0
  003d1	76 47		 jbe	 SHORT $LN15@update_ima

; 522  : 				{
; 523  : 					scale = 1.0 - scale;

  003d3	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  003d8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003e0	f2 0f 5c c8	 subsd	 xmm1, xmm0
  003e4	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003e8	f3 0f 11 45 d8	 movss	 DWORD PTR _scale$[ebp], xmm0

; 524  : 
; 525  : 					update_sector_importance_level (sx + x, sz + z, (entity_sides)side, in_use, importance * scale);

  003ed	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _importance$[ebp]
  003f2	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  003f7	51		 push	 ecx
  003f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fd	8b 45 0c	 mov	 eax, DWORD PTR _in_use$[ebp]
  00400	50		 push	 eax
  00401	8b 4d ec	 mov	 ecx, DWORD PTR _side$[ebp]
  00404	51		 push	 ecx
  00405	8b 55 f0	 mov	 edx, DWORD PTR _sz$[ebp]
  00408	03 55 f8	 add	 edx, DWORD PTR _z$[ebp]
  0040b	52		 push	 edx
  0040c	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  0040f	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  00412	50		 push	 eax
  00413	e8 00 00 00 00	 call	 ?update_sector_importance_level@@YGMHHW4ENTITY_SIDES@@HM@Z ; update_sector_importance_level
  00418	dd d8		 fstp	 ST(0)
$LN15@update_ima:

; 526  : 				}
; 527  : 			}

  0041a	e9 4c ff ff ff	 jmp	 $LN5@update_ima
$LN6@update_ima:

; 528  : 		}

  0041f	e9 0a ff ff ff	 jmp	 $LN2@update_ima
$LN3@update_ima:

; 529  : 	}
; 530  : }

  00424	5f		 pop	 edi
  00425	5e		 pop	 esi
  00426	5b		 pop	 ebx
  00427	8b e5		 mov	 esp, ebp
  00429	5d		 pop	 ebp
  0042a	c2 08 00	 ret	 8
?update_imap_importance_level@@YGXPAUENTITY@@H@Z ENDP	; update_imap_importance_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?update_imap_sector_side@@YGXPAUENTITY@@H@Z
_TEXT	SEGMENT
tv157 = -120						; size = 4
tv137 = -120						; size = 4
tv83 = -120						; size = 4
tv271 = -116						; size = 4
tv261 = -116						; size = 4
tv149 = -116						; size = 4
tv129 = -116						; size = 4
tv75 = -116						; size = 4
_constant$ = -48					; size = 4
_scale$ = -44						; size = 4
_dz$ = -40						; size = 4
_dx$ = -36						; size = 4
_d2$ = -32						; size = 4
_max_val$ = -28						; size = 4
_pos$ = -24						; size = 4
_side$ = -20						; size = 4
_sz$ = -16						; size = 4
_sx$ = -12						; size = 4
_z$ = -8						; size = 4
_x$ = -4						; size = 4
_en$ = 8						; size = 4
_in_use$ = 12						; size = 4
?update_imap_sector_side@@YGXPAUENTITY@@H@Z PROC	; update_imap_sector_side, COMDAT

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 337  : 	int
; 338  : 		x,
; 339  : 		z,
; 340  : 		sx,
; 341  : 		sz,
; 342  : 		side;
; 343  : 
; 344  : 	vec3d
; 345  : 		*pos;
; 346  : 
; 347  : 	float
; 348  : 		max_val,
; 349  : 		d2,
; 350  : 		dx,
; 351  : 		dz,
; 352  : 		scale,
; 353  : 		constant;
; 354  : 
; 355  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN8@update_ima
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_imap_sector_side@@YGXPAUENTITY@@H@Z@4JA
  00014	83 c0 13	 add	 eax, 19			; 00000013H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@update_ima:

; 356  : 
; 357  : 	max_val = get_local_entity_float_value (en, FLOAT_TYPE_SECTOR_SIDE_MAX_VALUE);

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN11@update_ima
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d 8c	 mov	 DWORD PTR tv75[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN12@update_ima
$LN11@update_ima:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_sector_side@@YGXPAUENTITY@@H@Z@4JA
  0003d	83 c2 15	 add	 edx, 21			; 00000015H
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN12@update_ima:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN13@update_ima
  00061	c7 45 88 74 00
	00 00		 mov	 DWORD PTR tv83[ebp], 116 ; 00000074H
  00068	eb 21		 jmp	 SHORT $LN14@update_ima
$LN13@update_ima:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_sector_side@@YGXPAUENTITY@@H@Z@4JA
  00070	83 c2 15	 add	 edx, 21			; 00000015H
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN14@update_ima:
  0008b	6a 74		 push	 116			; 00000074H
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00090	51		 push	 ecx
  00091	69 55 8c bc 02
	00 00		 imul	 edx, DWORD PTR tv75[ebp], 700
  00098	8b 45 88	 mov	 eax, DWORD PTR tv83[ebp]
  0009b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a2	ff d1		 call	 ecx
  000a4	d9 5d e4	 fstp	 DWORD PTR _max_val$[ebp]

; 358  : 
; 359  : 	if (max_val > 0.0)

  000a7	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _max_val$[ebp]
  000ac	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000b4	0f 86 5e 02 00
	00		 jbe	 $LN3@update_ima

; 360  : 	{
; 361  : 		constant = 0.3;

  000ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000c2	f3 0f 11 45 d0	 movss	 DWORD PTR _constant$[ebp], xmm0

; 362  : 
; 363  : 		side = get_local_entity_int_value (en, INT_TYPE_SIDE);

  000c7	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000cb	74 0a		 je	 SHORT $LN15@update_ima
  000cd	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d2	89 4d 8c	 mov	 DWORD PTR tv129[ebp], ecx
  000d5	eb 21		 jmp	 SHORT $LN16@update_ima
$LN15@update_ima:
  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_sector_side@@YGXPAUENTITY@@H@Z@4JA
  000dd	83 c2 1b	 add	 edx, 27			; 0000001bH
  000e0	52		 push	 edx
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f1	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN16@update_ima:
  000f8	b9 01 00 00 00	 mov	 ecx, 1
  000fd	85 c9		 test	 ecx, ecx
  000ff	74 09		 je	 SHORT $LN17@update_ima
  00101	c7 45 88 bb 00
	00 00		 mov	 DWORD PTR tv137[ebp], 187 ; 000000bbH
  00108	eb 21		 jmp	 SHORT $LN18@update_ima
$LN17@update_ima:
  0010a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_sector_side@@YGXPAUENTITY@@H@Z@4JA
  00110	83 c2 1b	 add	 edx, 27			; 0000001bH
  00113	52		 push	 edx
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00124	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN18@update_ima:
  0012b	68 bb 00 00 00	 push	 187			; 000000bbH
  00130	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00133	51		 push	 ecx
  00134	69 55 8c 5c 04
	00 00		 imul	 edx, DWORD PTR tv129[ebp], 1116
  0013b	8b 45 88	 mov	 eax, DWORD PTR tv137[ebp]
  0013e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00145	ff d1		 call	 ecx
  00147	89 45 ec	 mov	 DWORD PTR _side$[ebp], eax

; 364  : 
; 365  : 		pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  0014a	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0014e	74 0a		 je	 SHORT $LN19@update_ima
  00150	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00153	8b 08		 mov	 ecx, DWORD PTR [eax]
  00155	89 4d 8c	 mov	 DWORD PTR tv149[ebp], ecx
  00158	eb 21		 jmp	 SHORT $LN20@update_ima
$LN19@update_ima:
  0015a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_sector_side@@YGXPAUENTITY@@H@Z@4JA
  00160	83 c2 1d	 add	 edx, 29			; 0000001dH
  00163	52		 push	 edx
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00174	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN20@update_ima:
  0017b	b9 01 00 00 00	 mov	 ecx, 1
  00180	85 c9		 test	 ecx, ecx
  00182	74 09		 je	 SHORT $LN21@update_ima
  00184	c7 45 88 08 00
	00 00		 mov	 DWORD PTR tv157[ebp], 8
  0018b	eb 21		 jmp	 SHORT $LN22@update_ima
$LN21@update_ima:
  0018d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_imap_sector_side@@YGXPAUENTITY@@H@Z@4JA
  00193	83 c2 1d	 add	 edx, 29			; 0000001dH
  00196	52		 push	 edx
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a7	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN22@update_ima:
  001ae	6a 08		 push	 8
  001b0	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001b3	51		 push	 ecx
  001b4	6b 55 8c 60	 imul	 edx, DWORD PTR tv149[ebp], 96
  001b8	8b 45 88	 mov	 eax, DWORD PTR tv157[ebp]
  001bb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001c2	ff d1		 call	 ecx
  001c4	89 45 e8	 mov	 DWORD PTR _pos$[ebp], eax

; 366  : 	
; 367  : 		get_x_sector (sx, pos->x);

  001c7	8d 45 f4	 lea	 eax, DWORD PTR _sx$[ebp]
  001ca	50		 push	 eax
  001cb	8b 4d e8	 mov	 ecx, DWORD PTR _pos$[ebp]
  001ce	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  001d2	51		 push	 ecx
  001d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d8	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  001dd	8b 45 f4	 mov	 eax, DWORD PTR _sx$[ebp]
  001e0	99		 cdq
  001e1	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  001e7	89 45 f4	 mov	 DWORD PTR _sx$[ebp], eax

; 368  : 		get_z_sector (sz, pos->z);

  001ea	8d 45 f0	 lea	 eax, DWORD PTR _sz$[ebp]
  001ed	50		 push	 eax
  001ee	8b 4d e8	 mov	 ecx, DWORD PTR _pos$[ebp]
  001f1	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  001f6	51		 push	 ecx
  001f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fc	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00201	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  00204	99		 cdq
  00205	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  0020b	89 45 f0	 mov	 DWORD PTR _sz$[ebp], eax

; 369  : 	
; 370  : 		#if DEBUG_MODULE
; 371  : 
; 372  : 		if (get_local_entity_type (en) == ENTITY_TYPE_KEYSITE)
; 373  : 		{
; 374  : 			debug_log ("IMAPS: Updating sector side for %s at %d, %d (IN USE : %d)", get_local_entity_string (en, STRING_TYPE_KEYSITE_NAME), sx, sz, in_use);
; 375  : 		}
; 376  : 		else
; 377  : 		{
; 378  : 			debug_log ("IMAPS: Updating sector side for %s at %d, %d (IN USE : %d)", get_local_entity_string (en, STRING_TYPE_FULL_NAME), sx, sz, in_use);
; 379  : 		}
; 380  : 
; 381  : 		#endif
; 382  : 
; 383  : 		for (z = MIN_MAP_Z_SECTOR; z <= MAX_MAP_Z_SECTOR ; z ++)

  0020e	a1 18 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+24
  00213	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
  00216	eb 09		 jmp	 SHORT $LN4@update_ima
$LN2@update_ima:
  00218	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  0021b	83 c0 01	 add	 eax, 1
  0021e	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
$LN4@update_ima:
  00221	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  00224	3b 05 20 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+32
  0022a	0f 8f e8 00 00
	00		 jg	 $LN3@update_ima

; 384  : 		{
; 385  : 			dz = (constant * fabs ((float)(z - sz))) + 1.0;

  00230	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  00233	2b 45 f0	 sub	 eax, DWORD PTR _sz$[ebp]
  00236	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0023a	51		 push	 ecx
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00245	d9 5d 8c	 fstp	 DWORD PTR tv261[ebp]
  00248	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv261[ebp]
  0024d	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _constant$[ebp]
  00252	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00256	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0025e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00262	f3 0f 11 45 d8	 movss	 DWORD PTR _dz$[ebp], xmm0

; 386  : 
; 387  : 			for (x = MIN_MAP_X_SECTOR; x <= MAX_MAP_X_SECTOR ; x ++)

  00267	a1 14 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+20
  0026c	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
  0026f	eb 09		 jmp	 SHORT $LN7@update_ima
$LN5@update_ima:
  00271	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00274	83 c0 01	 add	 eax, 1
  00277	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@update_ima:
  0027a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0027d	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+28
  00283	0f 8f 8a 00 00
	00		 jg	 $LN6@update_ima

; 388  : 			{
; 389  : 				dx = (constant * fabs ((float)(x - sx))) + 1.0;

  00289	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0028c	2b 45 f4	 sub	 eax, DWORD PTR _sx$[ebp]
  0028f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00293	51		 push	 ecx
  00294	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00299	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0029e	d9 5d 8c	 fstp	 DWORD PTR tv271[ebp]
  002a1	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv271[ebp]
  002a6	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _constant$[ebp]
  002ab	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002af	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  002b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002bb	f3 0f 11 45 dc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 390  : 
; 391  : 				d2 = ((dx * dx) + (dz * dz));

  002c0	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  002c5	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  002ca	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _dz$[ebp]
  002cf	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  002d4	f3 0f 58 c1	 addss	 xmm0, xmm1
  002d8	f3 0f 11 45 e0	 movss	 DWORD PTR _d2$[ebp], xmm0

; 392  : 
; 393  : 				scale = max_val / d2;

  002dd	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _max_val$[ebp]
  002e2	f3 0f 5e 45 e0	 divss	 xmm0, DWORD PTR _d2$[ebp]
  002e7	f3 0f 11 45 d4	 movss	 DWORD PTR _scale$[ebp], xmm0

; 394  : 
; 395  : 				update_sector_side (x, z, (entity_sides)side, in_use, scale);

  002ec	51		 push	 ecx
  002ed	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  002f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f7	8b 45 0c	 mov	 eax, DWORD PTR _in_use$[ebp]
  002fa	50		 push	 eax
  002fb	8b 4d ec	 mov	 ecx, DWORD PTR _side$[ebp]
  002fe	51		 push	 ecx
  002ff	8b 55 f8	 mov	 edx, DWORD PTR _z$[ebp]
  00302	52		 push	 edx
  00303	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 ?update_sector_side@@YGMHHW4ENTITY_SIDES@@HM@Z ; update_sector_side
  0030c	dd d8		 fstp	 ST(0)

; 396  : 			}

  0030e	e9 5e ff ff ff	 jmp	 $LN5@update_ima
$LN6@update_ima:

; 397  : 		}

  00313	e9 00 ff ff ff	 jmp	 $LN2@update_ima
$LN3@update_ima:

; 398  : 	}
; 399  : }

  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	5b		 pop	 ebx
  0031b	8b e5		 mov	 esp, ebp
  0031d	5d		 pop	 ebp
  0031e	c2 08 00	 ret	 8
?update_imap_sector_side@@YGXPAUENTITY@@H@Z ENDP	; update_imap_sector_side
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?get_imap_char_value@@YGEW4IMAP_TYPES@@W4ENTITY_SIDES@@HH@Z
_TEXT	SEGMENT
_v$ = -1						; size = 1
_type$ = 8						; size = 4
_side$ = 12						; size = 4
_x$ = 16						; size = 4
_z$ = 20						; size = 4
?get_imap_char_value@@YGEW4IMAP_TYPES@@W4ENTITY_SIDES@@HH@Z PROC ; get_imap_char_value, COMDAT

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 177  : 	unsigned char
; 178  : 		v;
; 179  : 
; 180  : 	v = imaps [type][side][(z * NUM_MAP_X_SECTORS) + x];

  00009	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0000c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?imaps@@3PAPAPAEA[eax*4]
  00013	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00016	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0001d	03 55 10	 add	 edx, DWORD PTR _x$[ebp]
  00020	8b 45 0c	 mov	 eax, DWORD PTR _side$[ebp]
  00023	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00026	8a 14 11	 mov	 dl, BYTE PTR [ecx+edx]
  00029	88 55 ff	 mov	 BYTE PTR _v$[ebp], dl

; 181  : 
; 182  : 	return v;

  0002c	8a 45 ff	 mov	 al, BYTE PTR _v$[ebp]

; 183  : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
?get_imap_char_value@@YGEW4IMAP_TYPES@@W4ENTITY_SIDES@@HH@Z ENDP ; get_imap_char_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?get_imap_value@@YGMW4IMAP_TYPES@@W4ENTITY_SIDES@@HH@Z
_TEXT	SEGMENT
tv85 = -76						; size = 4
_v$ = -5						; size = 1
_f$ = -4						; size = 4
_type$ = 8						; size = 4
_side$ = 12						; size = 4
_x$ = 16						; size = 4
_z$ = 20						; size = 4
?get_imap_value@@YGMW4IMAP_TYPES@@W4ENTITY_SIDES@@HH@Z PROC ; get_imap_value, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 158  : 	float
; 159  : 		f;
; 160  : 
; 161  : 	unsigned char
; 162  : 		v;
; 163  : 
; 164  : 	v = imaps [type][side][(z * NUM_MAP_X_SECTORS) + x];

  00009	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0000c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?imaps@@3PAPAPAEA[eax*4]
  00013	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00016	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0001d	03 55 10	 add	 edx, DWORD PTR _x$[ebp]
  00020	8b 45 0c	 mov	 eax, DWORD PTR _side$[ebp]
  00023	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00026	8a 14 11	 mov	 dl, BYTE PTR [ecx+edx]
  00029	88 55 fb	 mov	 BYTE PTR _v$[ebp], dl

; 165  : 
; 166  : 	f = (float)v;

  0002c	0f b6 45 fb	 movzx	 eax, BYTE PTR _v$[ebp]
  00030	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00034	f3 0f 11 45 fc	 movss	 DWORD PTR _f$[ebp], xmm0

; 167  : 
; 168  : 	return (f / 255.0);

  00039	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _f$[ebp]
  0003e	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  00046	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0004a	f3 0f 11 45 b4	 movss	 DWORD PTR tv85[ebp], xmm0
  0004f	d9 45 b4	 fld	 DWORD PTR tv85[ebp]

; 169  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 10 00	 ret	 16			; 00000010H
?get_imap_value@@YGMW4IMAP_TYPES@@W4ENTITY_SIDES@@HH@Z ENDP ; get_imap_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?deinitialise_imaps@@YGXXZ
_TEXT	SEGMENT
_side$ = -8						; size = 4
_loop$ = -4						; size = 4
?deinitialise_imaps@@YGXXZ PROC				; deinitialise_imaps, COMDAT

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 125  : 	int
; 126  : 		loop,
; 127  : 		side;
; 128  : 		
; 129  : 	for (loop = 0; loop < NUM_IMAP_TYPES; loop ++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@deinitiali
$LN2@deinitiali:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@deinitiali:
  0001b	83 7d fc 04	 cmp	 DWORD PTR _loop$[ebp], 4
  0001f	7d 78		 jge	 SHORT $LN3@deinitiali

; 130  : 	{
; 131  : 		ASSERT (imaps [loop]);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00024	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?imaps@@3PAPAPAEA[eax*4], 0
  0002c	75 18		 jne	 SHORT $LN8@deinitiali
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??deinitialise_imaps@@YGXXZ@4JA
  00033	83 c0 07	 add	 eax, 7
  00036	50		 push	 eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OFHMGLOH@imaps?5?$FLloop?$FN@
  00041	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@deinitiali:

; 132  : 
; 133  : 		for (side = 0; side < NUM_ENTITY_SIDES; side ++)

  00046	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  0004d	eb 09		 jmp	 SHORT $LN7@deinitiali
$LN5@deinitiali:
  0004f	8b 45 f8	 mov	 eax, DWORD PTR _side$[ebp]
  00052	83 c0 01	 add	 eax, 1
  00055	89 45 f8	 mov	 DWORD PTR _side$[ebp], eax
$LN7@deinitiali:
  00058	83 7d f8 03	 cmp	 DWORD PTR _side$[ebp], 3
  0005c	7d 18		 jge	 SHORT $LN6@deinitiali

; 134  : 		{
; 135  : 			free_mem (imaps [loop][side]);

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00061	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?imaps@@3PAPAPAEA[eax*4]
  00068	8b 55 f8	 mov	 edx, DWORD PTR _side$[ebp]
  0006b	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 136  : 		}

  00074	eb d9		 jmp	 SHORT $LN5@deinitiali
$LN6@deinitiali:

; 137  : 
; 138  : 		free_mem (imaps [loop]);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00079	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?imaps@@3PAPAPAEA[eax*4]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 139  : 
; 140  : 		imaps [loop] = NULL;

  00086	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00089	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?imaps@@3PAPAPAEA[eax*4], 0

; 141  : 	}	

  00094	e9 79 ff ff ff	 jmp	 $LN2@deinitiali
$LN3@deinitiali:

; 142  : 
; 143  : 	// temporary array
; 144  : 
; 145  : 	free_mem (imap_temp_array);

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?imap_temp_array@@3PAMA
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 146  : 
; 147  : 	imap_temp_array = NULL;

  000a4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?imap_temp_array@@3PAMA, 0

; 148  : 
; 149  : 	imaps_initialised = FALSE;

  000ae	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?imaps_initialised@@3HA, 0

; 150  : }

  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
?deinitialise_imaps@@YGXXZ ENDP				; deinitialise_imaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\imaps.c
;	COMDAT ?initialise_imaps@@YGXXZ
_TEXT	SEGMENT
_side$ = -8						; size = 4
_loop$ = -4						; size = 4
?initialise_imaps@@YGXXZ PROC				; initialise_imaps, COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	int
; 97   : 		loop,
; 98   : 		side;
; 99   : 		
; 100  : 	ASSERT (get_session_entity ());

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00010	75 18		 jne	 SHORT $LN8@initialise
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_imaps@@YGXXZ@4JA
  00017	83 c0 05	 add	 eax, 5
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FINDIE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EFCJJKAA@get_session_entity?5?$CI?$CJ@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@initialise:

; 101  : 
; 102  : 	for (loop = 0; loop < NUM_IMAP_TYPES; loop ++)

  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00031	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00033	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00036	83 c0 01	 add	 eax, 1
  00039	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@initialise:
  0003c	83 7d fc 04	 cmp	 DWORD PTR _loop$[ebp], 4
  00040	7d 4f		 jge	 SHORT $LN3@initialise

; 103  : 	{
; 104  : 		imaps [loop] = (unsigned char**) malloc_heap_mem (sizeof (unsigned char *) * NUM_ENTITY_SIDES);

  00042	6a 0c		 push	 12			; 0000000cH
  00044	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  0004c	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?imaps@@3PAPAPAEA[ecx*4], eax

; 105  : 
; 106  : 		for (side = 0; side < NUM_ENTITY_SIDES; side ++)

  00053	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  0005a	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _side$[ebp]
  0005f	83 c0 01	 add	 eax, 1
  00062	89 45 f8	 mov	 DWORD PTR _side$[ebp], eax
$LN7@initialise:
  00065	83 7d f8 03	 cmp	 DWORD PTR _side$[ebp], 3
  00069	7d 24		 jge	 SHORT $LN6@initialise

; 107  : 		{
; 108  : 			imaps [loop][side] = (unsigned char*) malloc_heap_mem (sizeof (unsigned char) * NUM_MAP_Z_SECTORS * NUM_MAP_X_SECTORS);

  0006b	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00070	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  00080	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?imaps@@3PAPAPAEA[ecx*4]
  00087	8b 4d f8	 mov	 ecx, DWORD PTR _side$[ebp]
  0008a	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 109  : 		}

  0008d	eb cd		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 110  : 	}

  0008f	eb a2		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 111  : 
; 112  : 	// temporary array
; 113  : 
; 114  : 	imap_temp_array = (float*)malloc_heap_mem (sizeof (float) * NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS);

  00091	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00096	c1 e0 02	 shl	 eax, 2
  00099	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  000a6	a3 00 00 00 00	 mov	 DWORD PTR ?imap_temp_array@@3PAMA, eax

; 115  : 
; 116  : 	imaps_initialised = TRUE;

  000ab	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?imaps_initialised@@3HA, 1

; 117  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
?initialise_imaps@@YGXXZ ENDP				; initialise_imaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
