; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\tga.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?tga_image_palette@@3PAUtagPALETTEENTRY@@A	; tga_image_palette
PUBLIC	?image@@3PAEA					; image
PUBLIC	?tga_image_origin_bottom_left@@3HA		; tga_image_origin_bottom_left
PUBLIC	?tga_memory_mapped_image@@3PAXA			; tga_memory_mapped_image
_BSS	SEGMENT
?tga_image_palette@@3PAUtagPALETTEENTRY@@A DD 0100H DUP (?) ; tga_image_palette
?image@@3PAEA DB 0e1000H DUP (?)			; image
?tga_image_origin_bottom_left@@3HA DD 01H DUP (?)	; tga_image_origin_bottom_left
?tga_memory_mapped_image@@3PAXA DD 01H DUP (?)		; tga_memory_mapped_image
_BSS	ENDS
PUBLIC	?load_tga_file@@YGPAXPBDPAF1PAH@Z		; load_tga_file
PUBLIC	?memory_map_tga_file@@YGPAXPBDPAPAEPAF2PAH@Z	; memory_map_tga_file
PUBLIC	?save_tga_screen@@YGXPBD@Z			; save_tga_screen
PUBLIC	?save_tga_screen_with_thumbnail@@YGXPBD0@Z	; save_tga_screen_with_thumbnail
PUBLIC	?save_tga_image@@YGXPBDHHPBE@Z			; save_tga_image
PUBLIC	?save_tga_greyscale_image@@YGXPBDHHPBE@Z	; save_tga_greyscale_image
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_0DP@CFAMHMII@Unable?5to?5create?5file?5?$CFs?5during@ ; `string'
PUBLIC	??_C@_0EJ@NCBCAJOP@Unable?5to?5create?5thumbnail?5file@ ; `string'
PUBLIC	??_C@_0DA@LALPCLLA@Unable?5to?5create?5file?5?$CFs?5during@ ; `string'
PUBLIC	??_C@_0DJ@PGEJKDCE@Unable?5to?5create?5file?5?$CFs?5during@ ; `string'
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?mopen@@YGPAXPBD@Z:PROC				; mopen
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_screen_width@@YGHPAUSCREEN@@@Z:PROC	; get_screen_width
EXTRN	?get_screen_height@@YGHPAUSCREEN@@@Z:PROC	; get_screen_height
EXTRN	?get_pixel@@YGXHHPAUREAL_COLOUR@@@Z:PROC	; get_pixel
EXTRN	?get_rgb_colour_value@@YG?AUREAL_COLOUR@@K@Z:PROC ; get_rgb_colour_value
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?command_line_display_bpp@@3HA:DWORD		; command_line_display_bpp
;	COMDAT ??_C@_0DJ@PGEJKDCE@Unable?5to?5create?5file?5?$CFs?5during@
CONST	SEGMENT
??_C@_0DJ@PGEJKDCE@Unable?5to?5create?5file?5?$CFs?5during@ DB 'Unable to'
	DB	' create file %s during save_tga_greyscale_image', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LALPCLLA@Unable?5to?5create?5file?5?$CFs?5during@
CONST	SEGMENT
??_C@_0DA@LALPCLLA@Unable?5to?5create?5file?5?$CFs?5during@ DB 'Unable to'
	DB	' create file %s during save_tga_image:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@NCBCAJOP@Unable?5to?5create?5thumbnail?5file@
CONST	SEGMENT
??_C@_0EJ@NCBCAJOP@Unable?5to?5create?5thumbnail?5file@ DB 'Unable to cre'
	DB	'ate thumbnail file %s during save_tga_screen_with_thumbnail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CFAMHMII@Unable?5to?5create?5file?5?$CFs?5during@
CONST	SEGMENT
??_C@_0DP@CFAMHMII@Unable?5to?5create?5file?5?$CFs?5during@ DB 'Unable to'
	DB	' create file %s during save_tga_screen_with_thumbnail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\tga.c
;	COMDAT ?save_tga_greyscale_image@@YGXPBDHHPBE@Z
_TEXT	SEGMENT
_value$1 = -33						; size = 1
_y$ = -32						; size = 4
_count$ = -28						; size = 4
_tga$ = -24						; size = 18
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_data$ = 20						; size = 4
?save_tga_greyscale_image@@YGXPBDHHPBE@Z PROC		; save_tga_greyscale_image, COMDAT

; 797  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 798  : 
; 799  : 	FILE
; 800  : 		*fp;
; 801  : 
; 802  : 	tga_image
; 803  : 		tga;
; 804  : 
; 805  : 	int
; 806  : 		count,
; 807  : 		y;
; 808  : 
; 809  : 	if ((fp = fopen (filename, "wb")) == NULL)

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax
  0001e	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00022	75 16		 jne	 SHORT $LN8@save_tga_g

; 810  : 	{
; 811  : 
; 812  : 		debug_log ("Unable to create file %s during save_tga_greyscale_image", filename);

  00024	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@PGEJKDCE@Unable?5to?5create?5file?5?$CFs?5during@
  0002d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00032	83 c4 08	 add	 esp, 8

; 813  : 	}
; 814  : 	else

  00035	e9 e8 01 00 00	 jmp	 $LN1@save_tga_g
$LN8@save_tga_g:

; 815  : 	{
; 816  : 	
; 817  : 		tga.id_field_length = 0;

  0003a	c6 45 e8 00	 mov	 BYTE PTR _tga$[ebp], 0

; 818  : 		tga.colour_map_type = 1;

  0003e	c6 45 e9 01	 mov	 BYTE PTR _tga$[ebp+1], 1

; 819  : 		tga.image_type_code = 1;

  00042	c6 45 ea 01	 mov	 BYTE PTR _tga$[ebp+2], 1

; 820  : 	
; 821  : 		tga.colour_map_origin = 0;

  00046	33 c0		 xor	 eax, eax
  00048	66 89 45 ee	 mov	 WORD PTR _tga$[ebp+6], ax

; 822  : 		tga.colour_map_length = 256;

  0004c	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00051	66 89 45 f0	 mov	 WORD PTR _tga$[ebp+8], ax

; 823  : 	
; 824  : 		tga.colour_map_entry_size = 24;

  00055	c6 45 eb 18	 mov	 BYTE PTR _tga$[ebp+3], 24 ; 00000018H

; 825  : 	
; 826  : 		tga.x_origin = 0;

  00059	33 c0		 xor	 eax, eax
  0005b	66 89 45 f2	 mov	 WORD PTR _tga$[ebp+10], ax

; 827  : 		tga.y_origin = 0;

  0005f	33 c0		 xor	 eax, eax
  00061	66 89 45 f4	 mov	 WORD PTR _tga$[ebp+12], ax

; 828  : 		tga.width = width;

  00065	66 8b 45 0c	 mov	 ax, WORD PTR _width$[ebp]
  00069	66 89 45 f6	 mov	 WORD PTR _tga$[ebp+14], ax

; 829  : 		tga.height = height;

  0006d	66 8b 45 10	 mov	 ax, WORD PTR _height$[ebp]
  00071	66 89 45 f8	 mov	 WORD PTR _tga$[ebp+16], ax

; 830  : 	
; 831  : 		tga.image_pixel_size = 8;

  00075	c6 45 ec 08	 mov	 BYTE PTR _tga$[ebp+4], 8

; 832  : 		tga.image_descriptor = 0;

  00079	c6 45 ed 00	 mov	 BYTE PTR _tga$[ebp+5], 0

; 833  : 	
; 834  : 		// number of characters in identification field
; 835  : 	
; 836  : 		fwrite (&tga.id_field_length, 1, 1, fp);

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00080	50		 push	 eax
  00081	6a 01		 push	 1
  00083	6a 01		 push	 1
  00085	8d 4d e8	 lea	 ecx, DWORD PTR _tga$[ebp]
  00088	51		 push	 ecx
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0008f	83 c4 10	 add	 esp, 16			; 00000010H

; 837  : 	
; 838  : 		// colour map type
; 839  : 	
; 840  : 		fwrite (&tga.colour_map_type, 1, 1, fp);

  00092	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00095	50		 push	 eax
  00096	6a 01		 push	 1
  00098	6a 01		 push	 1
  0009a	8d 4d e9	 lea	 ecx, DWORD PTR _tga$[ebp+1]
  0009d	51		 push	 ecx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000a4	83 c4 10	 add	 esp, 16			; 00000010H

; 841  : 	
; 842  : 		// image type code
; 843  : 	
; 844  : 		fwrite (&tga.image_type_code, 1, 1, fp);

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000aa	50		 push	 eax
  000ab	6a 01		 push	 1
  000ad	6a 01		 push	 1
  000af	8d 4d ea	 lea	 ecx, DWORD PTR _tga$[ebp+2]
  000b2	51		 push	 ecx
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000b9	83 c4 10	 add	 esp, 16			; 00000010H

; 845  : 	
; 846  : 		// colour map specification
; 847  : 	
; 848  : 		fwrite (&tga.colour_map_origin, 2, 1, fp);

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000bf	50		 push	 eax
  000c0	6a 01		 push	 1
  000c2	6a 02		 push	 2
  000c4	8d 4d ee	 lea	 ecx, DWORD PTR _tga$[ebp+6]
  000c7	51		 push	 ecx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000ce	83 c4 10	 add	 esp, 16			; 00000010H

; 849  : 	
; 850  : 		fwrite (&tga.colour_map_length, 2, 1, fp);

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000d4	50		 push	 eax
  000d5	6a 01		 push	 1
  000d7	6a 02		 push	 2
  000d9	8d 4d f0	 lea	 ecx, DWORD PTR _tga$[ebp+8]
  000dc	51		 push	 ecx
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000e3	83 c4 10	 add	 esp, 16			; 00000010H

; 851  : 	
; 852  : 		fwrite (&tga.colour_map_entry_size, 1, 1, fp);

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000e9	50		 push	 eax
  000ea	6a 01		 push	 1
  000ec	6a 01		 push	 1
  000ee	8d 4d eb	 lea	 ecx, DWORD PTR _tga$[ebp+3]
  000f1	51		 push	 ecx
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000f8	83 c4 10	 add	 esp, 16			; 00000010H

; 853  : 	
; 854  : 		// image specification
; 855  : 	
; 856  : 		fwrite (&tga.x_origin, 2, 1, fp);

  000fb	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000fe	50		 push	 eax
  000ff	6a 01		 push	 1
  00101	6a 02		 push	 2
  00103	8d 4d f2	 lea	 ecx, DWORD PTR _tga$[ebp+10]
  00106	51		 push	 ecx
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0010d	83 c4 10	 add	 esp, 16			; 00000010H

; 857  : 	
; 858  : 		fwrite (&tga.y_origin, 2, 1, fp);

  00110	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00113	50		 push	 eax
  00114	6a 01		 push	 1
  00116	6a 02		 push	 2
  00118	8d 4d f4	 lea	 ecx, DWORD PTR _tga$[ebp+12]
  0011b	51		 push	 ecx
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00122	83 c4 10	 add	 esp, 16			; 00000010H

; 859  : 	
; 860  : 		fwrite (&tga.width, 2, 1, fp);

  00125	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00128	50		 push	 eax
  00129	6a 01		 push	 1
  0012b	6a 02		 push	 2
  0012d	8d 4d f6	 lea	 ecx, DWORD PTR _tga$[ebp+14]
  00130	51		 push	 ecx
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00137	83 c4 10	 add	 esp, 16			; 00000010H

; 861  : 	
; 862  : 		fwrite (&tga.height, 2, 1, fp);

  0013a	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0013d	50		 push	 eax
  0013e	6a 01		 push	 1
  00140	6a 02		 push	 2
  00142	8d 4d f8	 lea	 ecx, DWORD PTR _tga$[ebp+16]
  00145	51		 push	 ecx
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0014c	83 c4 10	 add	 esp, 16			; 00000010H

; 863  : 	
; 864  : 		fwrite (&tga.image_pixel_size, 1, 1, fp);

  0014f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00152	50		 push	 eax
  00153	6a 01		 push	 1
  00155	6a 01		 push	 1
  00157	8d 4d ec	 lea	 ecx, DWORD PTR _tga$[ebp+4]
  0015a	51		 push	 ecx
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00161	83 c4 10	 add	 esp, 16			; 00000010H

; 865  : 	
; 866  : 		fwrite (&tga.image_descriptor, 1, 1, fp);

  00164	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00167	50		 push	 eax
  00168	6a 01		 push	 1
  0016a	6a 01		 push	 1
  0016c	8d 4d ed	 lea	 ecx, DWORD PTR _tga$[ebp+5]
  0016f	51		 push	 ecx
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00176	83 c4 10	 add	 esp, 16			; 00000010H

; 867  : 	
; 868  : 		//
; 869  : 		// Palette
; 870  : 		//
; 871  : 	
; 872  : 		for (count = 0; count < 256; count ++)

  00179	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00180	eb 09		 jmp	 SHORT $LN4@save_tga_g
$LN2@save_tga_g:
  00182	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  00185	83 c0 01	 add	 eax, 1
  00188	89 45 e4	 mov	 DWORD PTR _count$[ebp], eax
$LN4@save_tga_g:
  0018b	81 7d e4 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  00192	7d 47		 jge	 SHORT $LN3@save_tga_g

; 873  : 		{
; 874  : 	
; 875  : 			unsigned char
; 876  : 				value;
; 877  : 	
; 878  : 			value = count;

  00194	8a 45 e4	 mov	 al, BYTE PTR _count$[ebp]
  00197	88 45 df	 mov	 BYTE PTR _value$1[ebp], al

; 879  : 	
; 880  : 			fwrite (&value, 1, 1, fp);

  0019a	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0019d	50		 push	 eax
  0019e	6a 01		 push	 1
  001a0	6a 01		 push	 1
  001a2	8d 4d df	 lea	 ecx, DWORD PTR _value$1[ebp]
  001a5	51		 push	 ecx
  001a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001ac	83 c4 10	 add	 esp, 16			; 00000010H

; 881  : 			fwrite (&value, 1, 1, fp);

  001af	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001b2	50		 push	 eax
  001b3	6a 01		 push	 1
  001b5	6a 01		 push	 1
  001b7	8d 4d df	 lea	 ecx, DWORD PTR _value$1[ebp]
  001ba	51		 push	 ecx
  001bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001c1	83 c4 10	 add	 esp, 16			; 00000010H

; 882  : 			fwrite (&value, 1, 1, fp);

  001c4	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001c7	50		 push	 eax
  001c8	6a 01		 push	 1
  001ca	6a 01		 push	 1
  001cc	8d 4d df	 lea	 ecx, DWORD PTR _value$1[ebp]
  001cf	51		 push	 ecx
  001d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001d6	83 c4 10	 add	 esp, 16			; 00000010H

; 883  : 		}

  001d9	eb a7		 jmp	 SHORT $LN2@save_tga_g
$LN3@save_tga_g:

; 884  : 	
; 885  : 		//
; 886  : 		// Image data
; 887  : 		//
; 888  : 	
; 889  : 		for (y = (height - 1); y >= 0; y --)

  001db	8b 45 10	 mov	 eax, DWORD PTR _height$[ebp]
  001de	83 e8 01	 sub	 eax, 1
  001e1	89 45 e0	 mov	 DWORD PTR _y$[ebp], eax
  001e4	eb 09		 jmp	 SHORT $LN7@save_tga_g
$LN5@save_tga_g:
  001e6	8b 45 e0	 mov	 eax, DWORD PTR _y$[ebp]
  001e9	83 e8 01	 sub	 eax, 1
  001ec	89 45 e0	 mov	 DWORD PTR _y$[ebp], eax
$LN7@save_tga_g:
  001ef	83 7d e0 00	 cmp	 DWORD PTR _y$[ebp], 0
  001f3	7c 20		 jl	 SHORT $LN6@save_tga_g

; 890  : 		{
; 891  : 	
; 892  : 			fwrite (&data [y * width], width, 1, fp);

  001f5	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001f8	50		 push	 eax
  001f9	6a 01		 push	 1
  001fb	8b 4d 0c	 mov	 ecx, DWORD PTR _width$[ebp]
  001fe	51		 push	 ecx
  001ff	8b 55 e0	 mov	 edx, DWORD PTR _y$[ebp]
  00202	0f af 55 0c	 imul	 edx, DWORD PTR _width$[ebp]
  00206	03 55 14	 add	 edx, DWORD PTR _data$[ebp]
  00209	52		 push	 edx
  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00210	83 c4 10	 add	 esp, 16			; 00000010H

; 893  : 		}

  00213	eb d1		 jmp	 SHORT $LN5@save_tga_g
$LN6@save_tga_g:

; 894  : 	
; 895  : 		fclose (fp);

  00215	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00218	50		 push	 eax
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0021f	83 c4 04	 add	 esp, 4
$LN1@save_tga_g:

; 896  : 	}
; 897  : }

  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	5b		 pop	 ebx
  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c2 10 00	 ret	 16			; 00000010H
?save_tga_greyscale_image@@YGXPBDHHPBE@Z ENDP		; save_tga_greyscale_image
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\tga.c
;	COMDAT ?save_tga_image@@YGXPBDHHPBE@Z
_TEXT	SEGMENT
_data_size$ = -28					; size = 4
_tga$ = -24						; size = 18
_file_ptr$ = -4						; size = 4
_filename$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_data$ = 20						; size = 4
?save_tga_image@@YGXPBDHHPBE@Z PROC			; save_tga_image, COMDAT

; 690  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  : 
; 692  : 	FILE
; 693  : 		*file_ptr;
; 694  : 
; 695  : 	tga_image
; 696  : 		tga;
; 697  : 
; 698  : 	int
; 699  : 		data_size;
; 700  : /*
; 701  : 	rgb_colour
; 702  : 		colour;
; 703  : 
; 704  : 	int
; 705  : 		loop_x,
; 706  : 		loop_y;
; 707  : */
; 708  : //	unsigned char
; 709  : //		*image_ptr;
; 710  : 
; 711  : 	if ((file_ptr = fopen (filename, "wb")) == NULL)

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 fc	 mov	 DWORD PTR _file_ptr$[ebp], eax
  0001e	83 7d fc 00	 cmp	 DWORD PTR _file_ptr$[ebp], 0
  00022	75 11		 jne	 SHORT $LN2@save_tga_i

; 712  : 	{
; 713  : 		debug_log ( "Unable to create file %s during save_tga_image:", filename );

  00024	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@LALPCLLA@Unable?5to?5create?5file?5?$CFs?5during@
  0002d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00032	83 c4 08	 add	 esp, 8
$LN2@save_tga_i:

; 714  : 	}
; 715  : 
; 716  : 	data_size = ( width * height * 3 );

  00035	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  00038	0f af 45 10	 imul	 eax, DWORD PTR _height$[ebp]
  0003c	6b c8 03	 imul	 ecx, eax, 3
  0003f	89 4d e4	 mov	 DWORD PTR _data_size$[ebp], ecx

; 717  : 
; 718  : //	image_ptr = data;
; 719  : /*
; 720  : 	for (loop_y = height; loop_y > 0; loop_y --)
; 721  : 	{
; 722  : 
; 723  : 		for (loop_x = 0; loop_x < 640; loop_x ++)
; 724  : 		{
; 725  : 
; 726  : 			get_pixel (loop_x, loop_y, &colour);
; 727  : 
; 728  : 			*image_ptr ++ = colour.b;
; 729  : 
; 730  : 			*image_ptr ++ = colour.g;
; 731  : 
; 732  : 			*image_ptr ++ = colour.r;
; 733  : 		}
; 734  : 	}
; 735  : */
; 736  : 	tga.id_field_length = 0;

  00042	c6 45 e8 00	 mov	 BYTE PTR _tga$[ebp], 0

; 737  : 	tga.colour_map_type = 0;

  00046	c6 45 e9 00	 mov	 BYTE PTR _tga$[ebp+1], 0

; 738  : 	tga.image_type_code = 2;

  0004a	c6 45 ea 02	 mov	 BYTE PTR _tga$[ebp+2], 2

; 739  : 
; 740  : 	tga.colour_map_origin = 0;

  0004e	33 c0		 xor	 eax, eax
  00050	66 89 45 ee	 mov	 WORD PTR _tga$[ebp+6], ax

; 741  : 	tga.colour_map_length = 0;

  00054	33 c0		 xor	 eax, eax
  00056	66 89 45 f0	 mov	 WORD PTR _tga$[ebp+8], ax

; 742  : 
; 743  : 	tga.colour_map_entry_size = 24;

  0005a	c6 45 eb 18	 mov	 BYTE PTR _tga$[ebp+3], 24 ; 00000018H

; 744  : 
; 745  : 	tga.x_origin = 0;

  0005e	33 c0		 xor	 eax, eax
  00060	66 89 45 f2	 mov	 WORD PTR _tga$[ebp+10], ax

; 746  : 	tga.y_origin = 0;

  00064	33 c0		 xor	 eax, eax
  00066	66 89 45 f4	 mov	 WORD PTR _tga$[ebp+12], ax

; 747  : 	tga.width = width;

  0006a	66 8b 45 0c	 mov	 ax, WORD PTR _width$[ebp]
  0006e	66 89 45 f6	 mov	 WORD PTR _tga$[ebp+14], ax

; 748  : 	tga.height = height;

  00072	66 8b 45 10	 mov	 ax, WORD PTR _height$[ebp]
  00076	66 89 45 f8	 mov	 WORD PTR _tga$[ebp+16], ax

; 749  : 
; 750  : 	tga.image_pixel_size = 24;

  0007a	c6 45 ec 18	 mov	 BYTE PTR _tga$[ebp+4], 24 ; 00000018H

; 751  : 	tga.image_descriptor = 0;

  0007e	c6 45 ed 00	 mov	 BYTE PTR _tga$[ebp+5], 0

; 752  : 
; 753  : 	// number of characters in identification field
; 754  : 
; 755  : 	fwrite (&tga.id_field_length, 1, 1, file_ptr);

  00082	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00085	50		 push	 eax
  00086	6a 01		 push	 1
  00088	6a 01		 push	 1
  0008a	8d 4d e8	 lea	 ecx, DWORD PTR _tga$[ebp]
  0008d	51		 push	 ecx
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00094	83 c4 10	 add	 esp, 16			; 00000010H

; 756  : 
; 757  : 	// colour map type
; 758  : 
; 759  : 	fwrite (&tga.colour_map_type, 1, 1, file_ptr);

  00097	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0009a	50		 push	 eax
  0009b	6a 01		 push	 1
  0009d	6a 01		 push	 1
  0009f	8d 4d e9	 lea	 ecx, DWORD PTR _tga$[ebp+1]
  000a2	51		 push	 ecx
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000a9	83 c4 10	 add	 esp, 16			; 00000010H

; 760  : 
; 761  : 	// image type code
; 762  : 
; 763  : 	fwrite (&tga.image_type_code, 1, 1, file_ptr);

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000af	50		 push	 eax
  000b0	6a 01		 push	 1
  000b2	6a 01		 push	 1
  000b4	8d 4d ea	 lea	 ecx, DWORD PTR _tga$[ebp+2]
  000b7	51		 push	 ecx
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000be	83 c4 10	 add	 esp, 16			; 00000010H

; 764  : 
; 765  : 	// colour map specification
; 766  : 
; 767  : 	fwrite (&tga.colour_map_origin, 2, 1, file_ptr);

  000c1	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000c4	50		 push	 eax
  000c5	6a 01		 push	 1
  000c7	6a 02		 push	 2
  000c9	8d 4d ee	 lea	 ecx, DWORD PTR _tga$[ebp+6]
  000cc	51		 push	 ecx
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 768  : 
; 769  : 	fwrite (&tga.colour_map_length, 2, 1, file_ptr);

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000d9	50		 push	 eax
  000da	6a 01		 push	 1
  000dc	6a 02		 push	 2
  000de	8d 4d f0	 lea	 ecx, DWORD PTR _tga$[ebp+8]
  000e1	51		 push	 ecx
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000e8	83 c4 10	 add	 esp, 16			; 00000010H

; 770  : 
; 771  : 	fwrite (&tga.colour_map_entry_size, 1, 1, file_ptr);

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000ee	50		 push	 eax
  000ef	6a 01		 push	 1
  000f1	6a 01		 push	 1
  000f3	8d 4d eb	 lea	 ecx, DWORD PTR _tga$[ebp+3]
  000f6	51		 push	 ecx
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000fd	83 c4 10	 add	 esp, 16			; 00000010H

; 772  : 
; 773  : 	// image specification
; 774  : 
; 775  : 	fwrite (&tga.x_origin, 2, 1, file_ptr);

  00100	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00103	50		 push	 eax
  00104	6a 01		 push	 1
  00106	6a 02		 push	 2
  00108	8d 4d f2	 lea	 ecx, DWORD PTR _tga$[ebp+10]
  0010b	51		 push	 ecx
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00112	83 c4 10	 add	 esp, 16			; 00000010H

; 776  : 
; 777  : 	fwrite (&tga.y_origin, 2, 1, file_ptr);

  00115	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00118	50		 push	 eax
  00119	6a 01		 push	 1
  0011b	6a 02		 push	 2
  0011d	8d 4d f4	 lea	 ecx, DWORD PTR _tga$[ebp+12]
  00120	51		 push	 ecx
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00127	83 c4 10	 add	 esp, 16			; 00000010H

; 778  : 
; 779  : 	fwrite (&tga.width, 2, 1, file_ptr);

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0012d	50		 push	 eax
  0012e	6a 01		 push	 1
  00130	6a 02		 push	 2
  00132	8d 4d f6	 lea	 ecx, DWORD PTR _tga$[ebp+14]
  00135	51		 push	 ecx
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0013c	83 c4 10	 add	 esp, 16			; 00000010H

; 780  : 
; 781  : 	fwrite (&tga.height, 2, 1, file_ptr);

  0013f	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00142	50		 push	 eax
  00143	6a 01		 push	 1
  00145	6a 02		 push	 2
  00147	8d 4d f8	 lea	 ecx, DWORD PTR _tga$[ebp+16]
  0014a	51		 push	 ecx
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00151	83 c4 10	 add	 esp, 16			; 00000010H

; 782  : 
; 783  : 	fwrite (&tga.image_pixel_size, 1, 1, file_ptr);

  00154	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00157	50		 push	 eax
  00158	6a 01		 push	 1
  0015a	6a 01		 push	 1
  0015c	8d 4d ec	 lea	 ecx, DWORD PTR _tga$[ebp+4]
  0015f	51		 push	 ecx
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00166	83 c4 10	 add	 esp, 16			; 00000010H

; 784  : 
; 785  : 	fwrite (&tga.image_descriptor, 1, 1, file_ptr);

  00169	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0016c	50		 push	 eax
  0016d	6a 01		 push	 1
  0016f	6a 01		 push	 1
  00171	8d 4d ed	 lea	 ecx, DWORD PTR _tga$[ebp+5]
  00174	51		 push	 ecx
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0017b	83 c4 10	 add	 esp, 16			; 00000010H

; 786  : 
; 787  : 	fwrite (data, data_size, 1, file_ptr);

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00181	50		 push	 eax
  00182	6a 01		 push	 1
  00184	8b 4d e4	 mov	 ecx, DWORD PTR _data_size$[ebp]
  00187	51		 push	 ecx
  00188	8b 55 14	 mov	 edx, DWORD PTR _data$[ebp]
  0018b	52		 push	 edx
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00192	83 c4 10	 add	 esp, 16			; 00000010H

; 788  : 
; 789  : 	fclose (file_ptr);

  00195	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00198	50		 push	 eax
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0019f	83 c4 04	 add	 esp, 4

; 790  : }

  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi
  001a4	5b		 pop	 ebx
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c2 10 00	 ret	 16			; 00000010H
?save_tga_image@@YGXPBDHHPBE@Z ENDP			; save_tga_image
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\tga.c
;	COMDAT ?save_tga_screen_with_thumbnail@@YGXPBD0@Z
_TEXT	SEGMENT
tv79 = -144						; size = 4
$T1 = -140						; size = 4
_pixel_size$2 = -72					; size = 4
_source_line_data$3 = -68				; size = 4
_source_line$ = -64					; size = 4
_source_ptr$ = -60					; size = 4
_image_ptr$ = -56					; size = 4
_tga_image$ = -52					; size = 4
_source_pitch$ = -48					; size = 4
_loop_y$ = -44						; size = 4
_loop_x$ = -40						; size = 4
_height$ = -36						; size = 4
_width$ = -32						; size = 4
_colour$ = -28						; size = 4
_tga$ = -24						; size = 18
_fp$ = -4						; size = 4
_screen_filename$ = 8					; size = 4
_thumbnail_filename$ = 12				; size = 4
?save_tga_screen_with_thumbnail@@YGXPBD0@Z PROC		; save_tga_screen_with_thumbnail, COMDAT

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 455  : 
; 456  : 	FILE
; 457  : 		*fp;
; 458  : 
; 459  : 	tga_image
; 460  : 		tga;
; 461  : 
; 462  : 	rgb_colour
; 463  : 		colour;
; 464  : 
; 465  : 	int
; 466  : 		width,
; 467  : 		height,
; 468  : 		loop_x,
; 469  : 		loop_y,
; 470  : 		source_pitch;
; 471  : 
; 472  : 	unsigned char
; 473  : 		*tga_image,
; 474  : 		*image_ptr;
; 475  : 
; 476  : 	unsigned char
; 477  : 		*source_ptr,
; 478  : 		*source_line;
; 479  : 
; 480  : 	source_ptr = get_screen_data ( video_screen );

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00017	89 45 c4	 mov	 DWORD PTR _source_ptr$[ebp], eax

; 481  : 
; 482  : 	source_pitch = get_screen_pitch ( video_screen );

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00025	89 45 d0	 mov	 DWORD PTR _source_pitch$[ebp], eax

; 483  : 
; 484  : 	width = get_screen_width ( video_screen );

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?get_screen_width@@YGHPAUSCREEN@@@Z ; get_screen_width
  00033	89 45 e0	 mov	 DWORD PTR _width$[ebp], eax

; 485  : 
; 486  : 	height = get_screen_height ( video_screen );

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?get_screen_height@@YGHPAUSCREEN@@@Z ; get_screen_height
  00041	89 45 dc	 mov	 DWORD PTR _height$[ebp], eax

; 487  : 
; 488  : 	tga_image = ( unsigned char * ) safe_malloc ( width * height * 3 );

  00044	8b 45 e0	 mov	 eax, DWORD PTR _width$[ebp]
  00047	0f af 45 dc	 imul	 eax, DWORD PTR _height$[ebp]
  0004b	6b c8 03	 imul	 ecx, eax, 3
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00054	89 45 cc	 mov	 DWORD PTR _tga_image$[ebp], eax

; 489  : 
; 490  : 	image_ptr = tga_image;

  00057	8b 45 cc	 mov	 eax, DWORD PTR _tga_image$[ebp]
  0005a	89 45 c8	 mov	 DWORD PTR _image_ptr$[ebp], eax

; 491  : 
; 492  : 	source_line = source_ptr;

  0005d	8b 45 c4	 mov	 eax, DWORD PTR _source_ptr$[ebp]
  00060	89 45 c0	 mov	 DWORD PTR _source_line$[ebp], eax

; 493  : 
; 494  : 	for ( loop_y = 0; loop_y < height; loop_y++ )

  00063	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _loop_y$[ebp], 0
  0006a	eb 09		 jmp	 SHORT $LN4@save_tga_s
$LN2@save_tga_s:
  0006c	8b 45 d4	 mov	 eax, DWORD PTR _loop_y$[ebp]
  0006f	83 c0 01	 add	 eax, 1
  00072	89 45 d4	 mov	 DWORD PTR _loop_y$[ebp], eax
$LN4@save_tga_s:
  00075	8b 45 d4	 mov	 eax, DWORD PTR _loop_y$[ebp]
  00078	3b 45 dc	 cmp	 eax, DWORD PTR _height$[ebp]
  0007b	0f 8d ae 00 00
	00		 jge	 $LN3@save_tga_s

; 495  : 	{
; 496  :         // Casm 18JUN05 Fixed to allow both 16- and 32- bit screns to be saved
; 497  : 		unsigned char
; 498  : 			*source_line_data;
; 499  : 		int pixel_size;
; 500  : 
; 501  : 		source_line_data = ( unsigned char * ) source_line;

  00081	8b 45 c0	 mov	 eax, DWORD PTR _source_line$[ebp]
  00084	89 45 bc	 mov	 DWORD PTR _source_line_data$3[ebp], eax

; 502  : 		pixel_size = command_line_display_bpp == 16 ? 2 : 4;

  00087	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?command_line_display_bpp@@3HA, 16 ; command_line_display_bpp, 00000010H
  0008e	75 0c		 jne	 SHORT $LN21@save_tga_s
  00090	c7 85 70 ff ff
	ff 02 00 00 00	 mov	 DWORD PTR tv79[ebp], 2
  0009a	eb 0a		 jmp	 SHORT $LN22@save_tga_s
$LN21@save_tga_s:
  0009c	c7 85 70 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv79[ebp], 4
$LN22@save_tga_s:
  000a6	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  000ac	89 45 b8	 mov	 DWORD PTR _pixel_size$2[ebp], eax

; 503  : 
; 504  : 		for ( loop_x = 0; loop_x < width; loop_x ++ )

  000af	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _loop_x$[ebp], 0
  000b6	eb 09		 jmp	 SHORT $LN7@save_tga_s
$LN5@save_tga_s:
  000b8	8b 45 d8	 mov	 eax, DWORD PTR _loop_x$[ebp]
  000bb	83 c0 01	 add	 eax, 1
  000be	89 45 d8	 mov	 DWORD PTR _loop_x$[ebp], eax
$LN7@save_tga_s:
  000c1	8b 45 d8	 mov	 eax, DWORD PTR _loop_x$[ebp]
  000c4	3b 45 e0	 cmp	 eax, DWORD PTR _width$[ebp]
  000c7	7d 58		 jge	 SHORT $LN6@save_tga_s

; 505  : 		{
; 506  : 			colour = get_rgb_colour_value ( * ( unsigned long * ) source_line_data );

  000c9	8b 45 bc	 mov	 eax, DWORD PTR _source_line_data$3[ebp]
  000cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 ?get_rgb_colour_value@@YG?AUREAL_COLOUR@@K@Z ; get_rgb_colour_value
  000d4	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000da	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  000e0	89 55 e4	 mov	 DWORD PTR _colour$[ebp], edx

; 507  : 
; 508  : 			source_line_data += pixel_size;

  000e3	8b 45 bc	 mov	 eax, DWORD PTR _source_line_data$3[ebp]
  000e6	03 45 b8	 add	 eax, DWORD PTR _pixel_size$2[ebp]
  000e9	89 45 bc	 mov	 DWORD PTR _source_line_data$3[ebp], eax

; 509  : 
; 510  : 			*image_ptr ++ = colour.b;

  000ec	8b 45 c8	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  000ef	8a 4d e4	 mov	 cl, BYTE PTR _colour$[ebp]
  000f2	88 08		 mov	 BYTE PTR [eax], cl
  000f4	8b 55 c8	 mov	 edx, DWORD PTR _image_ptr$[ebp]
  000f7	83 c2 01	 add	 edx, 1
  000fa	89 55 c8	 mov	 DWORD PTR _image_ptr$[ebp], edx

; 511  : 			*image_ptr ++ = colour.g;

  000fd	8b 45 c8	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  00100	8a 4d e5	 mov	 cl, BYTE PTR _colour$[ebp+1]
  00103	88 08		 mov	 BYTE PTR [eax], cl
  00105	8b 55 c8	 mov	 edx, DWORD PTR _image_ptr$[ebp]
  00108	83 c2 01	 add	 edx, 1
  0010b	89 55 c8	 mov	 DWORD PTR _image_ptr$[ebp], edx

; 512  : 			*image_ptr ++ = colour.r;

  0010e	8b 45 c8	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  00111	8a 4d e6	 mov	 cl, BYTE PTR _colour$[ebp+2]
  00114	88 08		 mov	 BYTE PTR [eax], cl
  00116	8b 55 c8	 mov	 edx, DWORD PTR _image_ptr$[ebp]
  00119	83 c2 01	 add	 edx, 1
  0011c	89 55 c8	 mov	 DWORD PTR _image_ptr$[ebp], edx

; 513  : 		}

  0011f	eb 97		 jmp	 SHORT $LN5@save_tga_s
$LN6@save_tga_s:

; 514  : 
; 515  : 		source_line += source_pitch;

  00121	8b 45 c0	 mov	 eax, DWORD PTR _source_line$[ebp]
  00124	03 45 d0	 add	 eax, DWORD PTR _source_pitch$[ebp]
  00127	89 45 c0	 mov	 DWORD PTR _source_line$[ebp], eax

; 516  : 	}

  0012a	e9 3d ff ff ff	 jmp	 $LN2@save_tga_s
$LN3@save_tga_s:

; 517  : 
; 518  : 	if ( ( fp = fopen ( screen_filename, "wb" ) ) == NULL )

  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00134	8b 45 08	 mov	 eax, DWORD PTR _screen_filename$[ebp]
  00137	50		 push	 eax
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0013e	83 c4 08	 add	 esp, 8
  00141	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax
  00144	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00148	75 16		 jne	 SHORT $LN14@save_tga_s

; 519  : 	{
; 520  : 
; 521  : 		debug_log ( "Unable to create file %s during save_tga_screen_with_thumbnail", screen_filename );

  0014a	8b 45 08	 mov	 eax, DWORD PTR _screen_filename$[ebp]
  0014d	50		 push	 eax
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@CFAMHMII@Unable?5to?5create?5file?5?$CFs?5during@
  00153	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00158	83 c4 08	 add	 esp, 8

; 522  : 	}
; 523  : 	else

  0015b	e9 63 01 00 00	 jmp	 $LN15@save_tga_s
$LN14@save_tga_s:

; 524  : 	{
; 525  : 
; 526  : 		tga.id_field_length = 0;

  00160	c6 45 e8 00	 mov	 BYTE PTR _tga$[ebp], 0

; 527  : 		tga.colour_map_type = 0;

  00164	c6 45 e9 00	 mov	 BYTE PTR _tga$[ebp+1], 0

; 528  : 		tga.image_type_code = 2;

  00168	c6 45 ea 02	 mov	 BYTE PTR _tga$[ebp+2], 2

; 529  : 	
; 530  : 		tga.colour_map_origin = 0;

  0016c	33 c0		 xor	 eax, eax
  0016e	66 89 45 ee	 mov	 WORD PTR _tga$[ebp+6], ax

; 531  : 		tga.colour_map_length = 0;

  00172	33 c0		 xor	 eax, eax
  00174	66 89 45 f0	 mov	 WORD PTR _tga$[ebp+8], ax

; 532  : 	
; 533  : 		tga.colour_map_entry_size = 24;

  00178	c6 45 eb 18	 mov	 BYTE PTR _tga$[ebp+3], 24 ; 00000018H

; 534  : 	
; 535  : 		tga.x_origin = 0;

  0017c	33 c0		 xor	 eax, eax
  0017e	66 89 45 f2	 mov	 WORD PTR _tga$[ebp+10], ax

; 536  : 		tga.y_origin = 0;

  00182	33 c0		 xor	 eax, eax
  00184	66 89 45 f4	 mov	 WORD PTR _tga$[ebp+12], ax

; 537  : 		tga.width = width;

  00188	66 8b 45 e0	 mov	 ax, WORD PTR _width$[ebp]
  0018c	66 89 45 f6	 mov	 WORD PTR _tga$[ebp+14], ax

; 538  : 		tga.height = height;

  00190	66 8b 45 dc	 mov	 ax, WORD PTR _height$[ebp]
  00194	66 89 45 f8	 mov	 WORD PTR _tga$[ebp+16], ax

; 539  : 	
; 540  : 		tga.image_pixel_size = 24;

  00198	c6 45 ec 18	 mov	 BYTE PTR _tga$[ebp+4], 24 ; 00000018H

; 541  : 		tga.image_descriptor = 0x20;

  0019c	c6 45 ed 20	 mov	 BYTE PTR _tga$[ebp+5], 32 ; 00000020H

; 542  : 	
; 543  : 		// number of characters in identification field
; 544  : 	
; 545  : 		fwrite (&tga.id_field_length, 1, 1, fp);

  001a0	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001a3	50		 push	 eax
  001a4	6a 01		 push	 1
  001a6	6a 01		 push	 1
  001a8	8d 4d e8	 lea	 ecx, DWORD PTR _tga$[ebp]
  001ab	51		 push	 ecx
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001b2	83 c4 10	 add	 esp, 16			; 00000010H

; 546  : 	
; 547  : 		// colour map type
; 548  : 	
; 549  : 		fwrite (&tga.colour_map_type, 1, 1, fp);

  001b5	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001b8	50		 push	 eax
  001b9	6a 01		 push	 1
  001bb	6a 01		 push	 1
  001bd	8d 4d e9	 lea	 ecx, DWORD PTR _tga$[ebp+1]
  001c0	51		 push	 ecx
  001c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001c7	83 c4 10	 add	 esp, 16			; 00000010H

; 550  : 	
; 551  : 		// image type code
; 552  : 	
; 553  : 		fwrite (&tga.image_type_code, 1, 1, fp);

  001ca	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001cd	50		 push	 eax
  001ce	6a 01		 push	 1
  001d0	6a 01		 push	 1
  001d2	8d 4d ea	 lea	 ecx, DWORD PTR _tga$[ebp+2]
  001d5	51		 push	 ecx
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001dc	83 c4 10	 add	 esp, 16			; 00000010H

; 554  : 	
; 555  : 		// colour map specification
; 556  : 	
; 557  : 		fwrite (&tga.colour_map_origin, 2, 1, fp);

  001df	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001e2	50		 push	 eax
  001e3	6a 01		 push	 1
  001e5	6a 02		 push	 2
  001e7	8d 4d ee	 lea	 ecx, DWORD PTR _tga$[ebp+6]
  001ea	51		 push	 ecx
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001f1	83 c4 10	 add	 esp, 16			; 00000010H

; 558  : 	
; 559  : 		fwrite (&tga.colour_map_length, 2, 1, fp);

  001f4	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001f7	50		 push	 eax
  001f8	6a 01		 push	 1
  001fa	6a 02		 push	 2
  001fc	8d 4d f0	 lea	 ecx, DWORD PTR _tga$[ebp+8]
  001ff	51		 push	 ecx
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00206	83 c4 10	 add	 esp, 16			; 00000010H

; 560  : 	
; 561  : 		fwrite (&tga.colour_map_entry_size, 1, 1, fp);

  00209	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0020c	50		 push	 eax
  0020d	6a 01		 push	 1
  0020f	6a 01		 push	 1
  00211	8d 4d eb	 lea	 ecx, DWORD PTR _tga$[ebp+3]
  00214	51		 push	 ecx
  00215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0021b	83 c4 10	 add	 esp, 16			; 00000010H

; 562  : 	
; 563  : 		// image specification
; 564  : 	
; 565  : 		fwrite (&tga.x_origin, 2, 1, fp);

  0021e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00221	50		 push	 eax
  00222	6a 01		 push	 1
  00224	6a 02		 push	 2
  00226	8d 4d f2	 lea	 ecx, DWORD PTR _tga$[ebp+10]
  00229	51		 push	 ecx
  0022a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00230	83 c4 10	 add	 esp, 16			; 00000010H

; 566  : 	
; 567  : 		fwrite (&tga.y_origin, 2, 1, fp);

  00233	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00236	50		 push	 eax
  00237	6a 01		 push	 1
  00239	6a 02		 push	 2
  0023b	8d 4d f4	 lea	 ecx, DWORD PTR _tga$[ebp+12]
  0023e	51		 push	 ecx
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00245	83 c4 10	 add	 esp, 16			; 00000010H

; 568  : 	
; 569  : 		fwrite (&width, 2, 1, fp);

  00248	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0024b	50		 push	 eax
  0024c	6a 01		 push	 1
  0024e	6a 02		 push	 2
  00250	8d 4d e0	 lea	 ecx, DWORD PTR _width$[ebp]
  00253	51		 push	 ecx
  00254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0025a	83 c4 10	 add	 esp, 16			; 00000010H

; 570  : 	
; 571  : 		fwrite (&height, 2, 1, fp);

  0025d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00260	50		 push	 eax
  00261	6a 01		 push	 1
  00263	6a 02		 push	 2
  00265	8d 4d dc	 lea	 ecx, DWORD PTR _height$[ebp]
  00268	51		 push	 ecx
  00269	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0026f	83 c4 10	 add	 esp, 16			; 00000010H

; 572  : 	
; 573  : 		fwrite (&tga.image_pixel_size, 1, 1, fp);

  00272	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00275	50		 push	 eax
  00276	6a 01		 push	 1
  00278	6a 01		 push	 1
  0027a	8d 4d ec	 lea	 ecx, DWORD PTR _tga$[ebp+4]
  0027d	51		 push	 ecx
  0027e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00284	83 c4 10	 add	 esp, 16			; 00000010H

; 574  : 	
; 575  : 		fwrite (&tga.image_descriptor, 1, 1, fp);

  00287	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0028a	50		 push	 eax
  0028b	6a 01		 push	 1
  0028d	6a 01		 push	 1
  0028f	8d 4d ed	 lea	 ecx, DWORD PTR _tga$[ebp+5]
  00292	51		 push	 ecx
  00293	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00299	83 c4 10	 add	 esp, 16			; 00000010H

; 576  : 
; 577  : 		fwrite (tga_image, width * 3, height, fp);

  0029c	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0029f	50		 push	 eax
  002a0	8b 4d dc	 mov	 ecx, DWORD PTR _height$[ebp]
  002a3	51		 push	 ecx
  002a4	6b 55 e0 03	 imul	 edx, DWORD PTR _width$[ebp], 3
  002a8	52		 push	 edx
  002a9	8b 45 cc	 mov	 eax, DWORD PTR _tga_image$[ebp]
  002ac	50		 push	 eax
  002ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  002b3	83 c4 10	 add	 esp, 16			; 00000010H

; 578  : 	
; 579  : 		fclose (fp);

  002b6	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  002b9	50		 push	 eax
  002ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  002c0	83 c4 04	 add	 esp, 4
$LN15@save_tga_s:

; 580  : 	}
; 581  : 
; 582  : 	if ( ( width == 640 ) && ( height == 480 ) )

  002c3	81 7d e0 80 02
	00 00		 cmp	 DWORD PTR _width$[ebp], 640 ; 00000280H
  002ca	0f 85 55 02 00
	00		 jne	 $LN16@save_tga_s
  002d0	81 7d dc e0 01
	00 00		 cmp	 DWORD PTR _height$[ebp], 480 ; 000001e0H
  002d7	0f 85 48 02 00
	00		 jne	 $LN16@save_tga_s

; 583  : 	{
; 584  : 
; 585  : 		//
; 586  : 		// Now mess the data around to form a 160x120 image
; 587  : 		//
; 588  : 		
; 589  : 		source_ptr = tga_image;

  002dd	8b 45 cc	 mov	 eax, DWORD PTR _tga_image$[ebp]
  002e0	89 45 c4	 mov	 DWORD PTR _source_ptr$[ebp], eax

; 590  : 	
; 591  : 		image_ptr = image;

  002e3	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _image_ptr$[ebp], OFFSET ?image@@3PAEA ; image

; 592  : 	
; 593  : 		for ( loop_y = 0; loop_y < 120; loop_y ++ )

  002ea	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _loop_y$[ebp], 0
  002f1	eb 09		 jmp	 SHORT $LN10@save_tga_s
$LN8@save_tga_s:
  002f3	8b 45 d4	 mov	 eax, DWORD PTR _loop_y$[ebp]
  002f6	83 c0 01	 add	 eax, 1
  002f9	89 45 d4	 mov	 DWORD PTR _loop_y$[ebp], eax
$LN10@save_tga_s:
  002fc	83 7d d4 78	 cmp	 DWORD PTR _loop_y$[ebp], 120 ; 00000078H
  00300	0f 8d 8a 00 00
	00		 jge	 $LN9@save_tga_s

; 594  : 		{
; 595  : 	
; 596  : 			for ( loop_x = 0; loop_x < 160; loop_x ++ )

  00306	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _loop_x$[ebp], 0
  0030d	eb 09		 jmp	 SHORT $LN13@save_tga_s
$LN11@save_tga_s:
  0030f	8b 45 d8	 mov	 eax, DWORD PTR _loop_x$[ebp]
  00312	83 c0 01	 add	 eax, 1
  00315	89 45 d8	 mov	 DWORD PTR _loop_x$[ebp], eax
$LN13@save_tga_s:
  00318	81 7d d8 a0 00
	00 00		 cmp	 DWORD PTR _loop_x$[ebp], 160 ; 000000a0H
  0031f	7d 5f		 jge	 SHORT $LN12@save_tga_s

; 597  : 			{
; 598  : 	
; 599  : 				*image_ptr++ = *source_ptr++;

  00321	8b 45 c8	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  00324	8b 4d c4	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  00327	8a 11		 mov	 dl, BYTE PTR [ecx]
  00329	88 10		 mov	 BYTE PTR [eax], dl
  0032b	8b 45 c8	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  0032e	83 c0 01	 add	 eax, 1
  00331	89 45 c8	 mov	 DWORD PTR _image_ptr$[ebp], eax
  00334	8b 4d c4	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  00337	83 c1 01	 add	 ecx, 1
  0033a	89 4d c4	 mov	 DWORD PTR _source_ptr$[ebp], ecx

; 600  : 				*image_ptr++ = *source_ptr++;

  0033d	8b 45 c8	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  00340	8b 4d c4	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  00343	8a 11		 mov	 dl, BYTE PTR [ecx]
  00345	88 10		 mov	 BYTE PTR [eax], dl
  00347	8b 45 c8	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  0034a	83 c0 01	 add	 eax, 1
  0034d	89 45 c8	 mov	 DWORD PTR _image_ptr$[ebp], eax
  00350	8b 4d c4	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  00353	83 c1 01	 add	 ecx, 1
  00356	89 4d c4	 mov	 DWORD PTR _source_ptr$[ebp], ecx

; 601  : 				*image_ptr++ = *source_ptr++;

  00359	8b 45 c8	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  0035c	8b 4d c4	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  0035f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00361	88 10		 mov	 BYTE PTR [eax], dl
  00363	8b 45 c8	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  00366	83 c0 01	 add	 eax, 1
  00369	89 45 c8	 mov	 DWORD PTR _image_ptr$[ebp], eax
  0036c	8b 4d c4	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  0036f	83 c1 01	 add	 ecx, 1
  00372	89 4d c4	 mov	 DWORD PTR _source_ptr$[ebp], ecx

; 602  : 	
; 603  : 				source_ptr += ( 3 * 3 );

  00375	8b 45 c4	 mov	 eax, DWORD PTR _source_ptr$[ebp]
  00378	83 c0 09	 add	 eax, 9
  0037b	89 45 c4	 mov	 DWORD PTR _source_ptr$[ebp], eax

; 604  : 			}

  0037e	eb 8f		 jmp	 SHORT $LN11@save_tga_s
$LN12@save_tga_s:

; 605  : 	
; 606  : 			source_ptr += ( ( 640 * 3 ) * 3 );

  00380	8b 45 c4	 mov	 eax, DWORD PTR _source_ptr$[ebp]
  00383	05 80 16 00 00	 add	 eax, 5760		; 00001680H
  00388	89 45 c4	 mov	 DWORD PTR _source_ptr$[ebp], eax

; 607  : 		}

  0038b	e9 63 ff ff ff	 jmp	 $LN8@save_tga_s
$LN9@save_tga_s:

; 608  : 	
; 609  : 		//
; 610  : 		// Now, save the thumbnail as well.
; 611  : 		//
; 612  : 	
; 613  : 		if ( ( fp = fopen ( thumbnail_filename, "wb" ) ) == NULL )

  00390	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00395	8b 45 0c	 mov	 eax, DWORD PTR _thumbnail_filename$[ebp]
  00398	50		 push	 eax
  00399	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0039f	83 c4 08	 add	 esp, 8
  003a2	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax
  003a5	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  003a9	75 16		 jne	 SHORT $LN17@save_tga_s

; 614  : 		{
; 615  : 	
; 616  : 			debug_log ( "Unable to create thumbnail file %s during save_tga_screen_with_thumbnail", thumbnail_filename );

  003ab	8b 45 0c	 mov	 eax, DWORD PTR _thumbnail_filename$[ebp]
  003ae	50		 push	 eax
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@NCBCAJOP@Unable?5to?5create?5thumbnail?5file@
  003b4	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  003b9	83 c4 08	 add	 esp, 8

; 617  : 		}
; 618  : 		else

  003bc	e9 64 01 00 00	 jmp	 $LN16@save_tga_s
$LN17@save_tga_s:

; 619  : 		{
; 620  : 		
; 621  : 			tga.id_field_length = 0;

  003c1	c6 45 e8 00	 mov	 BYTE PTR _tga$[ebp], 0

; 622  : 			tga.colour_map_type = 0;

  003c5	c6 45 e9 00	 mov	 BYTE PTR _tga$[ebp+1], 0

; 623  : 			tga.image_type_code = 2;

  003c9	c6 45 ea 02	 mov	 BYTE PTR _tga$[ebp+2], 2

; 624  : 		
; 625  : 			tga.colour_map_origin = 0;

  003cd	33 c0		 xor	 eax, eax
  003cf	66 89 45 ee	 mov	 WORD PTR _tga$[ebp+6], ax

; 626  : 			tga.colour_map_length = 0;

  003d3	33 c0		 xor	 eax, eax
  003d5	66 89 45 f0	 mov	 WORD PTR _tga$[ebp+8], ax

; 627  : 		
; 628  : 			tga.colour_map_entry_size = 24;

  003d9	c6 45 eb 18	 mov	 BYTE PTR _tga$[ebp+3], 24 ; 00000018H

; 629  : 		
; 630  : 			tga.x_origin = 0;

  003dd	33 c0		 xor	 eax, eax
  003df	66 89 45 f2	 mov	 WORD PTR _tga$[ebp+10], ax

; 631  : 			tga.y_origin = 0;

  003e3	33 c0		 xor	 eax, eax
  003e5	66 89 45 f4	 mov	 WORD PTR _tga$[ebp+12], ax

; 632  : 			tga.width = 160;

  003e9	b8 a0 00 00 00	 mov	 eax, 160		; 000000a0H
  003ee	66 89 45 f6	 mov	 WORD PTR _tga$[ebp+14], ax

; 633  : 			tga.height = 120;

  003f2	b8 78 00 00 00	 mov	 eax, 120		; 00000078H
  003f7	66 89 45 f8	 mov	 WORD PTR _tga$[ebp+16], ax

; 634  : 		
; 635  : 			tga.image_pixel_size = 24;

  003fb	c6 45 ec 18	 mov	 BYTE PTR _tga$[ebp+4], 24 ; 00000018H

; 636  : 			tga.image_descriptor = 0x20;

  003ff	c6 45 ed 20	 mov	 BYTE PTR _tga$[ebp+5], 32 ; 00000020H

; 637  : 		
; 638  : 			// number of characters in identification field
; 639  : 		
; 640  : 			fwrite (&tga.id_field_length, 1, 1, fp);

  00403	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00406	50		 push	 eax
  00407	6a 01		 push	 1
  00409	6a 01		 push	 1
  0040b	8d 4d e8	 lea	 ecx, DWORD PTR _tga$[ebp]
  0040e	51		 push	 ecx
  0040f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00415	83 c4 10	 add	 esp, 16			; 00000010H

; 641  : 		
; 642  : 			// colour map type
; 643  : 		
; 644  : 			fwrite (&tga.colour_map_type, 1, 1, fp);

  00418	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0041b	50		 push	 eax
  0041c	6a 01		 push	 1
  0041e	6a 01		 push	 1
  00420	8d 4d e9	 lea	 ecx, DWORD PTR _tga$[ebp+1]
  00423	51		 push	 ecx
  00424	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0042a	83 c4 10	 add	 esp, 16			; 00000010H

; 645  : 		
; 646  : 			// image type code
; 647  : 		
; 648  : 			fwrite (&tga.image_type_code, 1, 1, fp);

  0042d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00430	50		 push	 eax
  00431	6a 01		 push	 1
  00433	6a 01		 push	 1
  00435	8d 4d ea	 lea	 ecx, DWORD PTR _tga$[ebp+2]
  00438	51		 push	 ecx
  00439	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0043f	83 c4 10	 add	 esp, 16			; 00000010H

; 649  : 		
; 650  : 			// colour map specification
; 651  : 		
; 652  : 			fwrite (&tga.colour_map_origin, 2, 1, fp);

  00442	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00445	50		 push	 eax
  00446	6a 01		 push	 1
  00448	6a 02		 push	 2
  0044a	8d 4d ee	 lea	 ecx, DWORD PTR _tga$[ebp+6]
  0044d	51		 push	 ecx
  0044e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00454	83 c4 10	 add	 esp, 16			; 00000010H

; 653  : 		
; 654  : 			fwrite (&tga.colour_map_length, 2, 1, fp);

  00457	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0045a	50		 push	 eax
  0045b	6a 01		 push	 1
  0045d	6a 02		 push	 2
  0045f	8d 4d f0	 lea	 ecx, DWORD PTR _tga$[ebp+8]
  00462	51		 push	 ecx
  00463	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00469	83 c4 10	 add	 esp, 16			; 00000010H

; 655  : 		
; 656  : 			fwrite (&tga.colour_map_entry_size, 1, 1, fp);

  0046c	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0046f	50		 push	 eax
  00470	6a 01		 push	 1
  00472	6a 01		 push	 1
  00474	8d 4d eb	 lea	 ecx, DWORD PTR _tga$[ebp+3]
  00477	51		 push	 ecx
  00478	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0047e	83 c4 10	 add	 esp, 16			; 00000010H

; 657  : 		
; 658  : 			// image specification
; 659  : 		
; 660  : 			fwrite (&tga.x_origin, 2, 1, fp);

  00481	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00484	50		 push	 eax
  00485	6a 01		 push	 1
  00487	6a 02		 push	 2
  00489	8d 4d f2	 lea	 ecx, DWORD PTR _tga$[ebp+10]
  0048c	51		 push	 ecx
  0048d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00493	83 c4 10	 add	 esp, 16			; 00000010H

; 661  : 		
; 662  : 			fwrite (&tga.y_origin, 2, 1, fp);

  00496	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00499	50		 push	 eax
  0049a	6a 01		 push	 1
  0049c	6a 02		 push	 2
  0049e	8d 4d f4	 lea	 ecx, DWORD PTR _tga$[ebp+12]
  004a1	51		 push	 ecx
  004a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  004a8	83 c4 10	 add	 esp, 16			; 00000010H

; 663  : 		
; 664  : 			fwrite (&tga.width, 2, 1, fp);

  004ab	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  004ae	50		 push	 eax
  004af	6a 01		 push	 1
  004b1	6a 02		 push	 2
  004b3	8d 4d f6	 lea	 ecx, DWORD PTR _tga$[ebp+14]
  004b6	51		 push	 ecx
  004b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  004bd	83 c4 10	 add	 esp, 16			; 00000010H

; 665  : 		
; 666  : 			fwrite (&tga.height, 2, 1, fp);

  004c0	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  004c3	50		 push	 eax
  004c4	6a 01		 push	 1
  004c6	6a 02		 push	 2
  004c8	8d 4d f8	 lea	 ecx, DWORD PTR _tga$[ebp+16]
  004cb	51		 push	 ecx
  004cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  004d2	83 c4 10	 add	 esp, 16			; 00000010H

; 667  : 		
; 668  : 			fwrite (&tga.image_pixel_size, 1, 1, fp);

  004d5	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  004d8	50		 push	 eax
  004d9	6a 01		 push	 1
  004db	6a 01		 push	 1
  004dd	8d 4d ec	 lea	 ecx, DWORD PTR _tga$[ebp+4]
  004e0	51		 push	 ecx
  004e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  004e7	83 c4 10	 add	 esp, 16			; 00000010H

; 669  : 		
; 670  : 			fwrite (&tga.image_descriptor, 1, 1, fp);

  004ea	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  004ed	50		 push	 eax
  004ee	6a 01		 push	 1
  004f0	6a 01		 push	 1
  004f2	8d 4d ed	 lea	 ecx, DWORD PTR _tga$[ebp+5]
  004f5	51		 push	 ecx
  004f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  004fc	83 c4 10	 add	 esp, 16			; 00000010H

; 671  : 		
; 672  : 			fwrite (&image, ( 160 * 120 * 3 ), 1, fp);

  004ff	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00502	50		 push	 eax
  00503	6a 01		 push	 1
  00505	68 00 e1 00 00	 push	 57600			; 0000e100H
  0050a	68 00 00 00 00	 push	 OFFSET ?image@@3PAEA	; image
  0050f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00515	83 c4 10	 add	 esp, 16			; 00000010H

; 673  : 		
; 674  : 			fclose (fp);

  00518	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0051b	50		 push	 eax
  0051c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00522	83 c4 04	 add	 esp, 4
$LN16@save_tga_s:

; 675  : 		}
; 676  : 	}
; 677  : 
; 678  : 	if ( tga_image )

  00525	83 7d cc 00	 cmp	 DWORD PTR _tga_image$[ebp], 0
  00529	74 09		 je	 SHORT $LN1@save_tga_s

; 679  : 	{
; 680  : 
; 681  : 		safe_free ( tga_image );

  0052b	8b 45 cc	 mov	 eax, DWORD PTR _tga_image$[ebp]
  0052e	50		 push	 eax
  0052f	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN1@save_tga_s:

; 682  : 	}
; 683  : }

  00534	5f		 pop	 edi
  00535	5e		 pop	 esi
  00536	5b		 pop	 ebx
  00537	8b e5		 mov	 esp, ebp
  00539	5d		 pop	 ebp
  0053a	c2 08 00	 ret	 8
?save_tga_screen_with_thumbnail@@YGXPBD0@Z ENDP		; save_tga_screen_with_thumbnail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\tga.c
;	COMDAT ?save_tga_screen@@YGXPBD@Z
_TEXT	SEGMENT
_image$ = -52						; size = 4
_image_ptr$ = -48					; size = 4
_loop_y$ = -44						; size = 4
_loop_x$ = -40						; size = 4
_height$ = -36						; size = 4
_width$ = -32						; size = 4
_colour$ = -28						; size = 4
_tga$ = -24						; size = 18
_file_ptr$ = -4						; size = 4
_filename$ = 8						; size = 4
?save_tga_screen@@YGXPBD@Z PROC				; save_tga_screen, COMDAT

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 345  : 
; 346  : 	FILE
; 347  : 		*file_ptr;
; 348  : 
; 349  : 	tga_image
; 350  : 		tga;
; 351  : 
; 352  : 	rgb_colour
; 353  : 		colour;
; 354  : 
; 355  : 	int
; 356  : 		width,
; 357  : 		height,
; 358  : 		loop_x,
; 359  : 		loop_y;
; 360  : 
; 361  : 	unsigned char
; 362  : 		*image_ptr,
; 363  : 		*image;
; 364  : 
; 365  : 	width = get_screen_width ( active_screen );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_screen_width@@YGHPAUSCREEN@@@Z ; get_screen_width
  00014	89 45 e0	 mov	 DWORD PTR _width$[ebp], eax

; 366  : 
; 367  : 	height = get_screen_height ( active_screen );

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?get_screen_height@@YGHPAUSCREEN@@@Z ; get_screen_height
  00022	89 45 dc	 mov	 DWORD PTR _height$[ebp], eax

; 368  : 
; 369  : 	image = ( unsigned char * ) safe_malloc ( width * height * 3 );

  00025	8b 45 e0	 mov	 eax, DWORD PTR _width$[ebp]
  00028	0f af 45 dc	 imul	 eax, DWORD PTR _height$[ebp]
  0002c	6b c8 03	 imul	 ecx, eax, 3
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00035	89 45 cc	 mov	 DWORD PTR _image$[ebp], eax

; 370  : 
; 371  : 	file_ptr = safe_fopen (filename, "wb");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0003d	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00046	89 45 fc	 mov	 DWORD PTR _file_ptr$[ebp], eax

; 372  : 
; 373  : 	image_ptr = image;

  00049	8b 45 cc	 mov	 eax, DWORD PTR _image$[ebp]
  0004c	89 45 d0	 mov	 DWORD PTR _image_ptr$[ebp], eax

; 374  : 
; 375  : 	for (loop_y = height - 1; loop_y >= 0; loop_y --)

  0004f	8b 45 dc	 mov	 eax, DWORD PTR _height$[ebp]
  00052	83 e8 01	 sub	 eax, 1
  00055	89 45 d4	 mov	 DWORD PTR _loop_y$[ebp], eax
  00058	eb 09		 jmp	 SHORT $LN4@save_tga_s
$LN2@save_tga_s:
  0005a	8b 45 d4	 mov	 eax, DWORD PTR _loop_y$[ebp]
  0005d	83 e8 01	 sub	 eax, 1
  00060	89 45 d4	 mov	 DWORD PTR _loop_y$[ebp], eax
$LN4@save_tga_s:
  00063	83 7d d4 00	 cmp	 DWORD PTR _loop_y$[ebp], 0
  00067	7c 62		 jl	 SHORT $LN3@save_tga_s

; 376  : 	{
; 377  : 
; 378  : 		for (loop_x = 0; loop_x < width; loop_x ++)

  00069	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _loop_x$[ebp], 0
  00070	eb 09		 jmp	 SHORT $LN7@save_tga_s
$LN5@save_tga_s:
  00072	8b 45 d8	 mov	 eax, DWORD PTR _loop_x$[ebp]
  00075	83 c0 01	 add	 eax, 1
  00078	89 45 d8	 mov	 DWORD PTR _loop_x$[ebp], eax
$LN7@save_tga_s:
  0007b	8b 45 d8	 mov	 eax, DWORD PTR _loop_x$[ebp]
  0007e	3b 45 e0	 cmp	 eax, DWORD PTR _width$[ebp]
  00081	7d 46		 jge	 SHORT $LN6@save_tga_s

; 379  : 		{
; 380  : 
; 381  : 			get_pixel (loop_x, loop_y, &colour);

  00083	8d 45 e4	 lea	 eax, DWORD PTR _colour$[ebp]
  00086	50		 push	 eax
  00087	8b 4d d4	 mov	 ecx, DWORD PTR _loop_y$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 d8	 mov	 edx, DWORD PTR _loop_x$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ?get_pixel@@YGXHHPAUREAL_COLOUR@@@Z ; get_pixel

; 382  : 
; 383  : 			*image_ptr ++ = colour.b;

  00094	8b 45 d0	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  00097	8a 4d e4	 mov	 cl, BYTE PTR _colour$[ebp]
  0009a	88 08		 mov	 BYTE PTR [eax], cl
  0009c	8b 55 d0	 mov	 edx, DWORD PTR _image_ptr$[ebp]
  0009f	83 c2 01	 add	 edx, 1
  000a2	89 55 d0	 mov	 DWORD PTR _image_ptr$[ebp], edx

; 384  : 
; 385  : 			*image_ptr ++ = colour.g;

  000a5	8b 45 d0	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  000a8	8a 4d e5	 mov	 cl, BYTE PTR _colour$[ebp+1]
  000ab	88 08		 mov	 BYTE PTR [eax], cl
  000ad	8b 55 d0	 mov	 edx, DWORD PTR _image_ptr$[ebp]
  000b0	83 c2 01	 add	 edx, 1
  000b3	89 55 d0	 mov	 DWORD PTR _image_ptr$[ebp], edx

; 386  : 
; 387  : 			*image_ptr ++ = colour.r;

  000b6	8b 45 d0	 mov	 eax, DWORD PTR _image_ptr$[ebp]
  000b9	8a 4d e6	 mov	 cl, BYTE PTR _colour$[ebp+2]
  000bc	88 08		 mov	 BYTE PTR [eax], cl
  000be	8b 55 d0	 mov	 edx, DWORD PTR _image_ptr$[ebp]
  000c1	83 c2 01	 add	 edx, 1
  000c4	89 55 d0	 mov	 DWORD PTR _image_ptr$[ebp], edx

; 388  : 		}

  000c7	eb a9		 jmp	 SHORT $LN5@save_tga_s
$LN6@save_tga_s:

; 389  : 	}

  000c9	eb 8f		 jmp	 SHORT $LN2@save_tga_s
$LN3@save_tga_s:

; 390  : 
; 391  : 	tga.id_field_length = 0;

  000cb	c6 45 e8 00	 mov	 BYTE PTR _tga$[ebp], 0

; 392  : 	tga.colour_map_type = 0;

  000cf	c6 45 e9 00	 mov	 BYTE PTR _tga$[ebp+1], 0

; 393  : 	tga.image_type_code = 2;

  000d3	c6 45 ea 02	 mov	 BYTE PTR _tga$[ebp+2], 2

; 394  : 
; 395  : 	tga.colour_map_origin = 0;

  000d7	33 c0		 xor	 eax, eax
  000d9	66 89 45 ee	 mov	 WORD PTR _tga$[ebp+6], ax

; 396  : 	tga.colour_map_length = 0;

  000dd	33 c0		 xor	 eax, eax
  000df	66 89 45 f0	 mov	 WORD PTR _tga$[ebp+8], ax

; 397  : 
; 398  : 	tga.colour_map_entry_size = 24;

  000e3	c6 45 eb 18	 mov	 BYTE PTR _tga$[ebp+3], 24 ; 00000018H

; 399  : 
; 400  : 	tga.x_origin = 0;

  000e7	33 c0		 xor	 eax, eax
  000e9	66 89 45 f2	 mov	 WORD PTR _tga$[ebp+10], ax

; 401  : 	tga.y_origin = 0;

  000ed	33 c0		 xor	 eax, eax
  000ef	66 89 45 f4	 mov	 WORD PTR _tga$[ebp+12], ax

; 402  : 	tga.width = width;

  000f3	66 8b 45 e0	 mov	 ax, WORD PTR _width$[ebp]
  000f7	66 89 45 f6	 mov	 WORD PTR _tga$[ebp+14], ax

; 403  : 	tga.height = height;

  000fb	66 8b 45 dc	 mov	 ax, WORD PTR _height$[ebp]
  000ff	66 89 45 f8	 mov	 WORD PTR _tga$[ebp+16], ax

; 404  : 
; 405  : 	tga.image_pixel_size = 24;

  00103	c6 45 ec 18	 mov	 BYTE PTR _tga$[ebp+4], 24 ; 00000018H

; 406  : 	tga.image_descriptor = 0;

  00107	c6 45 ed 00	 mov	 BYTE PTR _tga$[ebp+5], 0

; 407  : 
; 408  : 	// number of characters in identification field
; 409  : 
; 410  : 	fwrite (&tga.id_field_length, 1, 1, file_ptr);

  0010b	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0010e	50		 push	 eax
  0010f	6a 01		 push	 1
  00111	6a 01		 push	 1
  00113	8d 4d e8	 lea	 ecx, DWORD PTR _tga$[ebp]
  00116	51		 push	 ecx
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0011d	83 c4 10	 add	 esp, 16			; 00000010H

; 411  : 
; 412  : 	// colour map type
; 413  : 
; 414  : 	fwrite (&tga.colour_map_type, 1, 1, file_ptr);

  00120	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00123	50		 push	 eax
  00124	6a 01		 push	 1
  00126	6a 01		 push	 1
  00128	8d 4d e9	 lea	 ecx, DWORD PTR _tga$[ebp+1]
  0012b	51		 push	 ecx
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00132	83 c4 10	 add	 esp, 16			; 00000010H

; 415  : 
; 416  : 	// image type code
; 417  : 
; 418  : 	fwrite (&tga.image_type_code, 1, 1, file_ptr);

  00135	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00138	50		 push	 eax
  00139	6a 01		 push	 1
  0013b	6a 01		 push	 1
  0013d	8d 4d ea	 lea	 ecx, DWORD PTR _tga$[ebp+2]
  00140	51		 push	 ecx
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00147	83 c4 10	 add	 esp, 16			; 00000010H

; 419  : 
; 420  : 	// colour map specification
; 421  : 
; 422  : 	fwrite (&tga.colour_map_origin, 2, 1, file_ptr);

  0014a	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0014d	50		 push	 eax
  0014e	6a 01		 push	 1
  00150	6a 02		 push	 2
  00152	8d 4d ee	 lea	 ecx, DWORD PTR _tga$[ebp+6]
  00155	51		 push	 ecx
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0015c	83 c4 10	 add	 esp, 16			; 00000010H

; 423  : 
; 424  : 	fwrite (&tga.colour_map_length, 2, 1, file_ptr);

  0015f	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00162	50		 push	 eax
  00163	6a 01		 push	 1
  00165	6a 02		 push	 2
  00167	8d 4d f0	 lea	 ecx, DWORD PTR _tga$[ebp+8]
  0016a	51		 push	 ecx
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00171	83 c4 10	 add	 esp, 16			; 00000010H

; 425  : 
; 426  : 	fwrite (&tga.colour_map_entry_size, 1, 1, file_ptr);

  00174	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00177	50		 push	 eax
  00178	6a 01		 push	 1
  0017a	6a 01		 push	 1
  0017c	8d 4d eb	 lea	 ecx, DWORD PTR _tga$[ebp+3]
  0017f	51		 push	 ecx
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00186	83 c4 10	 add	 esp, 16			; 00000010H

; 427  : 
; 428  : 	// image specification
; 429  : 
; 430  : 	fwrite (&tga.x_origin, 2, 1, file_ptr);

  00189	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0018c	50		 push	 eax
  0018d	6a 01		 push	 1
  0018f	6a 02		 push	 2
  00191	8d 4d f2	 lea	 ecx, DWORD PTR _tga$[ebp+10]
  00194	51		 push	 ecx
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0019b	83 c4 10	 add	 esp, 16			; 00000010H

; 431  : 
; 432  : 	fwrite (&tga.y_origin, 2, 1, file_ptr);

  0019e	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  001a1	50		 push	 eax
  001a2	6a 01		 push	 1
  001a4	6a 02		 push	 2
  001a6	8d 4d f4	 lea	 ecx, DWORD PTR _tga$[ebp+12]
  001a9	51		 push	 ecx
  001aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001b0	83 c4 10	 add	 esp, 16			; 00000010H

; 433  : 
; 434  : 	fwrite (&tga.width, 2, 1, file_ptr);

  001b3	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  001b6	50		 push	 eax
  001b7	6a 01		 push	 1
  001b9	6a 02		 push	 2
  001bb	8d 4d f6	 lea	 ecx, DWORD PTR _tga$[ebp+14]
  001be	51		 push	 ecx
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001c5	83 c4 10	 add	 esp, 16			; 00000010H

; 435  : 
; 436  : 	fwrite (&tga.height, 2, 1, file_ptr);

  001c8	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  001cb	50		 push	 eax
  001cc	6a 01		 push	 1
  001ce	6a 02		 push	 2
  001d0	8d 4d f8	 lea	 ecx, DWORD PTR _tga$[ebp+16]
  001d3	51		 push	 ecx
  001d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001da	83 c4 10	 add	 esp, 16			; 00000010H

; 437  : 
; 438  : 	fwrite (&tga.image_pixel_size, 1, 1, file_ptr);

  001dd	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  001e0	50		 push	 eax
  001e1	6a 01		 push	 1
  001e3	6a 01		 push	 1
  001e5	8d 4d ec	 lea	 ecx, DWORD PTR _tga$[ebp+4]
  001e8	51		 push	 ecx
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001ef	83 c4 10	 add	 esp, 16			; 00000010H

; 439  : 
; 440  : 	fwrite (&tga.image_descriptor, 1, 1, file_ptr);

  001f2	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  001f5	50		 push	 eax
  001f6	6a 01		 push	 1
  001f8	6a 01		 push	 1
  001fa	8d 4d ed	 lea	 ecx, DWORD PTR _tga$[ebp+5]
  001fd	51		 push	 ecx
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00204	83 c4 10	 add	 esp, 16			; 00000010H

; 441  : 
; 442  : 	fwrite (image, width * 3, height, file_ptr);

  00207	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0020a	50		 push	 eax
  0020b	8b 4d dc	 mov	 ecx, DWORD PTR _height$[ebp]
  0020e	51		 push	 ecx
  0020f	6b 55 e0 03	 imul	 edx, DWORD PTR _width$[ebp], 3
  00213	52		 push	 edx
  00214	8b 45 cc	 mov	 eax, DWORD PTR _image$[ebp]
  00217	50		 push	 eax
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0021e	83 c4 10	 add	 esp, 16			; 00000010H

; 443  : 
; 444  : 	fclose (file_ptr);

  00221	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00224	50		 push	 eax
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0022b	83 c4 04	 add	 esp, 4

; 445  : 
; 446  : 	safe_free ( image );

  0022e	8b 45 cc	 mov	 eax, DWORD PTR _image$[ebp]
  00231	50		 push	 eax
  00232	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 447  : }

  00237	5f		 pop	 edi
  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 04 00	 ret	 4
?save_tga_screen@@YGXPBD@Z ENDP				; save_tga_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\tga.c
;	COMDAT ?memory_map_tga_file@@YGPAXPBDPAPAEPAF2PAH@Z
_TEXT	SEGMENT
_count$1 = -36						; size = 4
_ptr$ = -32						; size = 4
_image$ = -28						; size = 18
_memory_ptr$ = -8					; size = 4
_image_data$ = -4					; size = 4
_filename$ = 8						; size = 4
_memory_mapped_file$ = 12				; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_bits_per_pixel$ = 24					; size = 4
?memory_map_tga_file@@YGPAXPBDPAPAEPAF2PAH@Z PROC	; memory_map_tga_file, COMDAT

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 231  : 
; 232  : 	void
; 233  : 		*image_data;
; 234  : 
; 235  : 	unsigned char
; 236  : 		*memory_ptr;
; 237  : 
; 238  : 	tga_image
; 239  : 		image;
; 240  : 
; 241  : 	unsigned char
; 242  : 		*ptr;
; 243  : 
; 244  : 	memory_ptr = ( unsigned char * ) mopen ( filename );

  00009	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?mopen@@YGPAXPBD@Z	; mopen
  00012	89 45 f8	 mov	 DWORD PTR _memory_ptr$[ebp], eax

; 245  : 
; 246  : 	if ( !memory_ptr )

  00015	83 7d f8 00	 cmp	 DWORD PTR _memory_ptr$[ebp], 0
  00019	75 07		 jne	 SHORT $LN5@memory_map

; 247  : 	{
; 248  : 
; 249  : 		return ( NULL );

  0001b	33 c0		 xor	 eax, eax
  0001d	e9 b9 01 00 00	 jmp	 $LN1@memory_map
$LN5@memory_map:

; 250  : 	}
; 251  : 
; 252  : 	ptr = memory_ptr;

  00022	8b 45 f8	 mov	 eax, DWORD PTR _memory_ptr$[ebp]
  00025	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax

; 253  : 
; 254  : 	// number of characters in identification field
; 255  : 
; 256  : 	image.id_field_length = get_list_item ( ptr, unsigned char );

  00028	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  0002b	83 c0 01	 add	 eax, 1
  0002e	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  00031	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00034	8a 51 ff	 mov	 dl, BYTE PTR [ecx-1]
  00037	88 55 e4	 mov	 BYTE PTR _image$[ebp], dl

; 257  : 
; 258  : 	// colour map type
; 259  : 
; 260  : 	image.colour_map_type = get_list_item ( ptr, unsigned char );

  0003a	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  00043	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00046	8a 51 ff	 mov	 dl, BYTE PTR [ecx-1]
  00049	88 55 e5	 mov	 BYTE PTR _image$[ebp+1], dl

; 261  : 
; 262  : 	// image type code
; 263  : 
; 264  : 	image.image_type_code = get_list_item ( ptr, unsigned char );

  0004c	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  0004f	83 c0 01	 add	 eax, 1
  00052	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  00055	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00058	8a 51 ff	 mov	 dl, BYTE PTR [ecx-1]
  0005b	88 55 e6	 mov	 BYTE PTR _image$[ebp+2], dl

; 265  : 
; 266  : 	// colour map specification
; 267  : 
; 268  : 	image.colour_map_origin = get_list_item ( ptr, unsigned short int );

  0005e	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  00061	83 c0 02	 add	 eax, 2
  00064	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  00067	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  0006a	66 8b 51 fe	 mov	 dx, WORD PTR [ecx-2]
  0006e	66 89 55 ea	 mov	 WORD PTR _image$[ebp+6], dx

; 269  : 
; 270  : 	image.colour_map_length = get_list_item ( ptr, unsigned short int );

  00072	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  00075	83 c0 02	 add	 eax, 2
  00078	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  0007b	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  0007e	66 8b 51 fe	 mov	 dx, WORD PTR [ecx-2]
  00082	66 89 55 ec	 mov	 WORD PTR _image$[ebp+8], dx

; 271  : 
; 272  : 	image.colour_map_entry_size = get_list_item ( ptr, unsigned char );

  00086	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  00089	83 c0 01	 add	 eax, 1
  0008c	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  0008f	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00092	8a 51 ff	 mov	 dl, BYTE PTR [ecx-1]
  00095	88 55 e7	 mov	 BYTE PTR _image$[ebp+3], dl

; 273  : 
; 274  : 	// image specification
; 275  : 
; 276  : 	image.x_origin = get_list_item ( ptr, unsigned short int );

  00098	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  0009b	83 c0 02	 add	 eax, 2
  0009e	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  000a1	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  000a4	66 8b 51 fe	 mov	 dx, WORD PTR [ecx-2]
  000a8	66 89 55 ee	 mov	 WORD PTR _image$[ebp+10], dx

; 277  : 
; 278  : 	image.y_origin = get_list_item ( ptr, unsigned short int );

  000ac	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  000af	83 c0 02	 add	 eax, 2
  000b2	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  000b5	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  000b8	66 8b 51 fe	 mov	 dx, WORD PTR [ecx-2]
  000bc	66 89 55 f0	 mov	 WORD PTR _image$[ebp+12], dx

; 279  : 
; 280  : 	image.width = get_list_item ( ptr, unsigned short int );

  000c0	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  000c3	83 c0 02	 add	 eax, 2
  000c6	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  000c9	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  000cc	66 8b 51 fe	 mov	 dx, WORD PTR [ecx-2]
  000d0	66 89 55 f2	 mov	 WORD PTR _image$[ebp+14], dx

; 281  : 
; 282  : 	image.height = get_list_item ( ptr, unsigned short int );

  000d4	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  000d7	83 c0 02	 add	 eax, 2
  000da	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  000dd	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  000e0	66 8b 51 fe	 mov	 dx, WORD PTR [ecx-2]
  000e4	66 89 55 f4	 mov	 WORD PTR _image$[ebp+16], dx

; 283  : 
; 284  : 	image.image_pixel_size = get_list_item ( ptr, unsigned char );

  000e8	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  000eb	83 c0 01	 add	 eax, 1
  000ee	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  000f1	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  000f4	8a 51 ff	 mov	 dl, BYTE PTR [ecx-1]
  000f7	88 55 e8	 mov	 BYTE PTR _image$[ebp+4], dl

; 285  : 
; 286  : 	image.image_descriptor = get_list_item ( ptr, unsigned char );

  000fa	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  000fd	83 c0 01	 add	 eax, 1
  00100	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  00103	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00106	8a 51 ff	 mov	 dl, BYTE PTR [ecx-1]
  00109	88 55 e9	 mov	 BYTE PTR _image$[ebp+5], dl

; 287  : 
; 288  : 	// image identification field
; 289  : 
; 290  : 	if (image.id_field_length)

  0010c	0f b6 45 e4	 movzx	 eax, BYTE PTR _image$[ebp]
  00110	85 c0		 test	 eax, eax
  00112	74 0a		 je	 SHORT $LN6@memory_map

; 291  : 	{
; 292  : 
; 293  : 		ptr += image.id_field_length;

  00114	0f b6 45 e4	 movzx	 eax, BYTE PTR _image$[ebp]
  00118	03 45 e0	 add	 eax, DWORD PTR _ptr$[ebp]
  0011b	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
$LN6@memory_map:

; 294  : 	}
; 295  : 
; 296  : 	// colour map data
; 297  : 
; 298  : 	if (image.colour_map_type)

  0011e	0f b6 45 e5	 movzx	 eax, BYTE PTR _image$[ebp+1]
  00122	85 c0		 test	 eax, eax
  00124	74 68		 je	 SHORT $LN7@memory_map

; 299  : 	{
; 300  : 
; 301  : 		int
; 302  : 			count;
; 303  : 
; 304  : 		for (count = 0; count < image.colour_map_length; count ++)

  00126	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  0012d	eb 09		 jmp	 SHORT $LN4@memory_map
$LN2@memory_map:
  0012f	8b 45 dc	 mov	 eax, DWORD PTR _count$1[ebp]
  00132	83 c0 01	 add	 eax, 1
  00135	89 45 dc	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@memory_map:
  00138	0f b7 45 ec	 movzx	 eax, WORD PTR _image$[ebp+8]
  0013c	39 45 dc	 cmp	 DWORD PTR _count$1[ebp], eax
  0013f	7d 4d		 jge	 SHORT $LN7@memory_map

; 305  : 		{
; 306  : 
; 307  : 			tga_image_palette[count].peBlue = get_list_item ( ptr, unsigned char );

  00141	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  00144	83 c0 01	 add	 eax, 1
  00147	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  0014a	8b 4d dc	 mov	 ecx, DWORD PTR _count$1[ebp]
  0014d	8b 55 e0	 mov	 edx, DWORD PTR _ptr$[ebp]
  00150	8a 42 ff	 mov	 al, BYTE PTR [edx-1]
  00153	88 04 8d 02 00
	00 00		 mov	 BYTE PTR ?tga_image_palette@@3PAUtagPALETTEENTRY@@A[ecx*4+2], al

; 308  : 			tga_image_palette[count].peGreen = get_list_item ( ptr, unsigned char );

  0015a	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  0015d	83 c0 01	 add	 eax, 1
  00160	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  00163	8b 4d dc	 mov	 ecx, DWORD PTR _count$1[ebp]
  00166	8b 55 e0	 mov	 edx, DWORD PTR _ptr$[ebp]
  00169	8a 42 ff	 mov	 al, BYTE PTR [edx-1]
  0016c	88 04 8d 01 00
	00 00		 mov	 BYTE PTR ?tga_image_palette@@3PAUtagPALETTEENTRY@@A[ecx*4+1], al

; 309  : 			tga_image_palette[count].peRed = get_list_item ( ptr, unsigned char );

  00173	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  00176	83 c0 01	 add	 eax, 1
  00179	89 45 e0	 mov	 DWORD PTR _ptr$[ebp], eax
  0017c	8b 4d dc	 mov	 ecx, DWORD PTR _count$1[ebp]
  0017f	8b 55 e0	 mov	 edx, DWORD PTR _ptr$[ebp]
  00182	8a 42 ff	 mov	 al, BYTE PTR [edx-1]
  00185	88 04 8d 00 00
	00 00		 mov	 BYTE PTR ?tga_image_palette@@3PAUtagPALETTEENTRY@@A[ecx*4], al

; 310  : 		}

  0018c	eb a1		 jmp	 SHORT $LN2@memory_map
$LN7@memory_map:

; 311  : 	}
; 312  : 
; 313  : 	*width = image.width;

  0018e	8b 45 10	 mov	 eax, DWORD PTR _width$[ebp]
  00191	66 8b 4d f2	 mov	 cx, WORD PTR _image$[ebp+14]
  00195	66 89 08	 mov	 WORD PTR [eax], cx

; 314  : 
; 315  : 	*height = image.height;

  00198	8b 45 14	 mov	 eax, DWORD PTR _height$[ebp]
  0019b	66 8b 4d f4	 mov	 cx, WORD PTR _image$[ebp+16]
  0019f	66 89 08	 mov	 WORD PTR [eax], cx

; 316  : 
; 317  : 	*bits_per_pixel = image.image_pixel_size;

  001a2	0f b6 45 e8	 movzx	 eax, BYTE PTR _image$[ebp+4]
  001a6	8b 4d 18	 mov	 ecx, DWORD PTR _bits_per_pixel$[ebp]
  001a9	89 01		 mov	 DWORD PTR [ecx], eax

; 318  : 
; 319  : 	if (image.image_descriptor & 0x20)

  001ab	0f b6 45 e9	 movzx	 eax, BYTE PTR _image$[ebp+5]
  001af	83 e0 20	 and	 eax, 32			; 00000020H
  001b2	74 0c		 je	 SHORT $LN8@memory_map

; 320  : 	{
; 321  : 
; 322  : 		tga_image_origin_bottom_left = FALSE;

  001b4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tga_image_origin_bottom_left@@3HA, 0 ; tga_image_origin_bottom_left

; 323  : 	}
; 324  : 	else

  001be	eb 0a		 jmp	 SHORT $LN9@memory_map
$LN8@memory_map:

; 325  : 	{
; 326  : 
; 327  : 		tga_image_origin_bottom_left = TRUE;

  001c0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tga_image_origin_bottom_left@@3HA, 1 ; tga_image_origin_bottom_left
$LN9@memory_map:

; 328  : 	}
; 329  : 
; 330  : 	// image data field
; 331  : 
; 332  : 	image_data = ptr;

  001ca	8b 45 e0	 mov	 eax, DWORD PTR _ptr$[ebp]
  001cd	89 45 fc	 mov	 DWORD PTR _image_data$[ebp], eax

; 333  : 
; 334  : 	*memory_mapped_file = memory_ptr;

  001d0	8b 45 0c	 mov	 eax, DWORD PTR _memory_mapped_file$[ebp]
  001d3	8b 4d f8	 mov	 ecx, DWORD PTR _memory_ptr$[ebp]
  001d6	89 08		 mov	 DWORD PTR [eax], ecx

; 335  : 
; 336  : 	return ( image_data );

  001d8	8b 45 fc	 mov	 eax, DWORD PTR _image_data$[ebp]
$LN1@memory_map:

; 337  : }

  001db	5f		 pop	 edi
  001dc	5e		 pop	 esi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 14 00	 ret	 20			; 00000014H
?memory_map_tga_file@@YGPAXPBDPAPAEPAF2PAH@Z ENDP	; memory_map_tga_file
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\tga.c
;	COMDAT ?load_tga_file@@YGPAXPBDPAF1PAH@Z
_TEXT	SEGMENT
_count$1 = -36						; size = 4
_image$ = -32						; size = 18
_image_data$ = -12					; size = 4
_file_ptr$ = -8						; size = 4
_size$ = -4						; size = 4
_filename$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_bits_per_pixel$ = 20					; size = 4
?load_tga_file@@YGPAXPBDPAF1PAH@Z PROC			; load_tga_file, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 121  : 
; 122  : 	int
; 123  : 		size;
; 124  : 
; 125  : 	FILE
; 126  : 		*file_ptr;
; 127  : 
; 128  : 	void
; 129  : 		*image_data;
; 130  : 
; 131  : 	tga_image
; 132  : 		image;
; 133  : 
; 134  : 	file_ptr = safe_fopen (filename, "rb");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00017	89 45 f8	 mov	 DWORD PTR _file_ptr$[ebp], eax

; 135  : 
; 136  : 	// number of characters in identification field
; 137  : 
; 138  : 	fread (&image.id_field_length, 1, 1, file_ptr);

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0001d	50		 push	 eax
  0001e	6a 01		 push	 1
  00020	6a 01		 push	 1
  00022	8d 4d e0	 lea	 ecx, DWORD PTR _image$[ebp]
  00025	51		 push	 ecx
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 139  : 
; 140  : 	// colour map type
; 141  : 
; 142  : 	fread (&image.colour_map_type, 1, 1, file_ptr);

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00032	50		 push	 eax
  00033	6a 01		 push	 1
  00035	6a 01		 push	 1
  00037	8d 4d e1	 lea	 ecx, DWORD PTR _image$[ebp+1]
  0003a	51		 push	 ecx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 143  : 
; 144  : 	// image type code
; 145  : 
; 146  : 	fread (&image.image_type_code, 1, 1, file_ptr);

  00044	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00047	50		 push	 eax
  00048	6a 01		 push	 1
  0004a	6a 01		 push	 1
  0004c	8d 4d e2	 lea	 ecx, DWORD PTR _image$[ebp+2]
  0004f	51		 push	 ecx
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00056	83 c4 10	 add	 esp, 16			; 00000010H

; 147  : 
; 148  : 	// colour map specification
; 149  : 
; 150  : 	fread (&image.colour_map_origin, 2, 1, file_ptr);

  00059	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0005c	50		 push	 eax
  0005d	6a 01		 push	 1
  0005f	6a 02		 push	 2
  00061	8d 4d e6	 lea	 ecx, DWORD PTR _image$[ebp+6]
  00064	51		 push	 ecx
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0006b	83 c4 10	 add	 esp, 16			; 00000010H

; 151  : 
; 152  : 	fread (&image.colour_map_length, 2, 1, file_ptr);

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00071	50		 push	 eax
  00072	6a 01		 push	 1
  00074	6a 02		 push	 2
  00076	8d 4d e8	 lea	 ecx, DWORD PTR _image$[ebp+8]
  00079	51		 push	 ecx
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00080	83 c4 10	 add	 esp, 16			; 00000010H

; 153  : 
; 154  : 	fread (&image.colour_map_entry_size, 1, 1, file_ptr);

  00083	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00086	50		 push	 eax
  00087	6a 01		 push	 1
  00089	6a 01		 push	 1
  0008b	8d 4d e3	 lea	 ecx, DWORD PTR _image$[ebp+3]
  0008e	51		 push	 ecx
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00095	83 c4 10	 add	 esp, 16			; 00000010H

; 155  : 
; 156  : 	// image specification
; 157  : 
; 158  : 	fread (&image.x_origin, 2, 1, file_ptr);

  00098	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0009b	50		 push	 eax
  0009c	6a 01		 push	 1
  0009e	6a 02		 push	 2
  000a0	8d 4d ea	 lea	 ecx, DWORD PTR _image$[ebp+10]
  000a3	51		 push	 ecx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000aa	83 c4 10	 add	 esp, 16			; 00000010H

; 159  : 
; 160  : 	fread (&image.y_origin, 2, 1, file_ptr);

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000b0	50		 push	 eax
  000b1	6a 01		 push	 1
  000b3	6a 02		 push	 2
  000b5	8d 4d ec	 lea	 ecx, DWORD PTR _image$[ebp+12]
  000b8	51		 push	 ecx
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 161  : 
; 162  : 	fread (&image.width, 2, 1, file_ptr);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000c5	50		 push	 eax
  000c6	6a 01		 push	 1
  000c8	6a 02		 push	 2
  000ca	8d 4d ee	 lea	 ecx, DWORD PTR _image$[ebp+14]
  000cd	51		 push	 ecx
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000d4	83 c4 10	 add	 esp, 16			; 00000010H

; 163  : 
; 164  : 	fread (&image.height, 2, 1, file_ptr);

  000d7	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000da	50		 push	 eax
  000db	6a 01		 push	 1
  000dd	6a 02		 push	 2
  000df	8d 4d f0	 lea	 ecx, DWORD PTR _image$[ebp+16]
  000e2	51		 push	 ecx
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000e9	83 c4 10	 add	 esp, 16			; 00000010H

; 165  : 
; 166  : 	*width = image.width;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  000ef	66 8b 4d ee	 mov	 cx, WORD PTR _image$[ebp+14]
  000f3	66 89 08	 mov	 WORD PTR [eax], cx

; 167  : 
; 168  : 	*height = image.height;

  000f6	8b 45 10	 mov	 eax, DWORD PTR _height$[ebp]
  000f9	66 8b 4d f0	 mov	 cx, WORD PTR _image$[ebp+16]
  000fd	66 89 08	 mov	 WORD PTR [eax], cx

; 169  : 
; 170  : 	fread (&image.image_pixel_size, 1, 1, file_ptr);

  00100	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00103	50		 push	 eax
  00104	6a 01		 push	 1
  00106	6a 01		 push	 1
  00108	8d 4d e4	 lea	 ecx, DWORD PTR _image$[ebp+4]
  0010b	51		 push	 ecx
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00112	83 c4 10	 add	 esp, 16			; 00000010H

; 171  : 
; 172  : 	*bits_per_pixel = image.image_pixel_size;

  00115	0f b6 45 e4	 movzx	 eax, BYTE PTR _image$[ebp+4]
  00119	8b 4d 14	 mov	 ecx, DWORD PTR _bits_per_pixel$[ebp]
  0011c	89 01		 mov	 DWORD PTR [ecx], eax

; 173  : 
; 174  : 	fread (&image.image_descriptor, 1, 1, file_ptr);

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00121	50		 push	 eax
  00122	6a 01		 push	 1
  00124	6a 01		 push	 1
  00126	8d 4d e5	 lea	 ecx, DWORD PTR _image$[ebp+5]
  00129	51		 push	 ecx
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00130	83 c4 10	 add	 esp, 16			; 00000010H

; 175  : 
; 176  : 	if (image.image_descriptor & 0x20)

  00133	0f b6 45 e5	 movzx	 eax, BYTE PTR _image$[ebp+5]
  00137	83 e0 20	 and	 eax, 32			; 00000020H
  0013a	74 0c		 je	 SHORT $LN5@load_tga_f

; 177  : 	{
; 178  : 
; 179  : 		tga_image_origin_bottom_left = FALSE;

  0013c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tga_image_origin_bottom_left@@3HA, 0 ; tga_image_origin_bottom_left

; 180  : 	}
; 181  : 	else

  00146	eb 0a		 jmp	 SHORT $LN6@load_tga_f
$LN5@load_tga_f:

; 182  : 	{
; 183  : 
; 184  : 		tga_image_origin_bottom_left = TRUE;

  00148	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tga_image_origin_bottom_left@@3HA, 1 ; tga_image_origin_bottom_left
$LN6@load_tga_f:

; 185  : 	}
; 186  : 
; 187  : 	// image identification field
; 188  : 
; 189  : 	if (image.id_field_length)

  00152	0f b6 45 e0	 movzx	 eax, BYTE PTR _image$[ebp]
  00156	85 c0		 test	 eax, eax
  00158	74 14		 je	 SHORT $LN7@load_tga_f

; 190  : 	{
; 191  : 
; 192  : 		fseek (file_ptr, image.id_field_length, SEEK_CUR);

  0015a	6a 01		 push	 1
  0015c	0f b6 45 e0	 movzx	 eax, BYTE PTR _image$[ebp]
  00160	50		 push	 eax
  00161	8b 4d f8	 mov	 ecx, DWORD PTR _file_ptr$[ebp]
  00164	51		 push	 ecx
  00165	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@load_tga_f:

; 193  : 	}
; 194  : 
; 195  : 	// colour map data
; 196  : 
; 197  : 	if (image.colour_map_type)

  0016e	0f b6 45 e1	 movzx	 eax, BYTE PTR _image$[ebp+1]
  00172	85 c0		 test	 eax, eax
  00174	74 71		 je	 SHORT $LN8@load_tga_f

; 198  : 	{
; 199  : 
; 200  : 		int
; 201  : 			count;
; 202  : 
; 203  : 		for (count = 0; count < image.colour_map_length; count ++)

  00176	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  0017d	eb 09		 jmp	 SHORT $LN4@load_tga_f
$LN2@load_tga_f:
  0017f	8b 45 dc	 mov	 eax, DWORD PTR _count$1[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 45 dc	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@load_tga_f:
  00188	0f b7 45 e8	 movzx	 eax, WORD PTR _image$[ebp+8]
  0018c	39 45 dc	 cmp	 DWORD PTR _count$1[ebp], eax
  0018f	7d 56		 jge	 SHORT $LN8@load_tga_f

; 204  : 		{
; 205  : 
; 206  : 			fread (&tga_image_palette [count].peBlue, 1, 1, file_ptr);

  00191	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00194	50		 push	 eax
  00195	6a 01		 push	 1
  00197	6a 01		 push	 1
  00199	8b 4d dc	 mov	 ecx, DWORD PTR _count$1[ebp]
  0019c	8d 14 8d 02 00
	00 00		 lea	 edx, DWORD PTR ?tga_image_palette@@3PAUtagPALETTEENTRY@@A[ecx*4+2]
  001a3	52		 push	 edx
  001a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001aa	83 c4 10	 add	 esp, 16			; 00000010H

; 207  : 			fread (&tga_image_palette [count].peGreen, 1, 1, file_ptr);

  001ad	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  001b0	50		 push	 eax
  001b1	6a 01		 push	 1
  001b3	6a 01		 push	 1
  001b5	8b 4d dc	 mov	 ecx, DWORD PTR _count$1[ebp]
  001b8	8d 14 8d 01 00
	00 00		 lea	 edx, DWORD PTR ?tga_image_palette@@3PAUtagPALETTEENTRY@@A[ecx*4+1]
  001bf	52		 push	 edx
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001c6	83 c4 10	 add	 esp, 16			; 00000010H

; 208  : 			fread (&tga_image_palette [count].peRed, 1, 1, file_ptr);

  001c9	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  001cc	50		 push	 eax
  001cd	6a 01		 push	 1
  001cf	6a 01		 push	 1
  001d1	8b 4d dc	 mov	 ecx, DWORD PTR _count$1[ebp]
  001d4	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR ?tga_image_palette@@3PAUtagPALETTEENTRY@@A[ecx*4]
  001db	52		 push	 edx
  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001e2	83 c4 10	 add	 esp, 16			; 00000010H

; 209  : 		}

  001e5	eb 98		 jmp	 SHORT $LN2@load_tga_f
$LN8@load_tga_f:

; 210  : 	}
; 211  : 
; 212  : 	// image data field
; 213  : 
; 214  : 	size = *width * *height * image.image_pixel_size / 8;

  001e7	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  001ea	0f bf 00	 movsx	 eax, WORD PTR [eax]
  001ed	8b 4d 10	 mov	 ecx, DWORD PTR _height$[ebp]
  001f0	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  001f3	0f af c2	 imul	 eax, edx
  001f6	0f b6 4d e4	 movzx	 ecx, BYTE PTR _image$[ebp+4]
  001fa	0f af c1	 imul	 eax, ecx
  001fd	99		 cdq
  001fe	83 e2 07	 and	 edx, 7
  00201	03 c2		 add	 eax, edx
  00203	c1 f8 03	 sar	 eax, 3
  00206	89 45 fc	 mov	 DWORD PTR _size$[ebp], eax

; 215  : 
; 216  : 	image_data = safe_malloc (size);

  00209	8b 45 fc	 mov	 eax, DWORD PTR _size$[ebp]
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00212	89 45 f4	 mov	 DWORD PTR _image_data$[ebp], eax

; 217  : 
; 218  : 	fread (image_data, 1, size, file_ptr);

  00215	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00218	50		 push	 eax
  00219	8b 4d fc	 mov	 ecx, DWORD PTR _size$[ebp]
  0021c	51		 push	 ecx
  0021d	6a 01		 push	 1
  0021f	8b 55 f4	 mov	 edx, DWORD PTR _image_data$[ebp]
  00222	52		 push	 edx
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00229	83 c4 10	 add	 esp, 16			; 00000010H

; 219  : 
; 220  : 	fclose (file_ptr);

  0022c	8b 45 f8	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0022f	50		 push	 eax
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00236	83 c4 04	 add	 esp, 4

; 221  : 
; 222  : 	return image_data;

  00239	8b 45 f4	 mov	 eax, DWORD PTR _image_data$[ebp]

; 223  : }

  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	5b		 pop	 ebx
  0023f	8b e5		 mov	 esp, ebp
  00241	5d		 pop	 ebp
  00242	c2 10 00	 ret	 16			; 00000010H
?load_tga_file@@YGPAXPBDPAF1PAH@Z ENDP			; load_tga_file
_TEXT	ENDS
END
