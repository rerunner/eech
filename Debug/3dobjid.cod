; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dobjid.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A ; object_3d_information_database
PUBLIC	?object_3d_enumeration_names@@3PAPBDA		; object_3d_enumeration_names
PUBLIC	?object_3d_sub_object_names@@3PAPBDA		; object_3d_sub_object_names
PUBLIC	?object_3d_camoflage_set_names@@3PAPBDA		; object_3d_camoflage_set_names
PUBLIC	?object_3d_camera_names@@3PAPBDA		; object_3d_camera_names
PUBLIC	?texture_animation_names@@3PAPBDA		; texture_animation_names
PUBLIC	?displacement_animation_names@@3PAPBDA		; displacement_animation_names
PUBLIC	?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
PUBLIC	?displacement_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; displacement_animations
PUBLIC	?object_3d_number_of_scene_names@@3HA		; object_3d_number_of_scene_names
PUBLIC	?object_3d_number_of_sub_object_names@@3HA	; object_3d_number_of_sub_object_names
PUBLIC	?object_3d_number_of_camoflage_set_names@@3HA	; object_3d_number_of_camoflage_set_names
PUBLIC	?object_3d_number_of_camera_names@@3HA		; object_3d_number_of_camera_names
PUBLIC	?number_of_texture_animations@@3HA		; number_of_texture_animations
PUBLIC	?number_of_displacement_animations@@3HA		; number_of_displacement_animations
PUBLIC	?texture_animation_names_@@3PAPBDA		; texture_animation_names_
PUBLIC	??_C@_0BG@BJOEHPMG@USA_COPTER_DIGIT__001@	; `string'
PUBLIC	??_C@_0BG@PPEOIH@USA_COPTER_DIGIT__000@		; `string'
PUBLIC	??_C@_0BG@CLNCBNEE@USA_COPTER_DIGIT__003@	; `string'
PUBLIC	??_C@_0BG@DCMJCMAF@USA_COPTER_DIGIT__002@	; `string'
PUBLIC	??_C@_0BG@GEJDILID@USA_COPTER_DIGIT__004@	; `string'
PUBLIC	??_C@_0BG@HLCDJJAI@CIS_COPTER_DIGIT__000@	; `string'
PUBLIC	??_C@_0BG@GCDIKIEJ@CIS_COPTER_DIGIT__001@	; `string'
PUBLIC	??_C@_0BG@EJBFPLIK@CIS_COPTER_DIGIT__002@	; `string'
PUBLIC	??_C@_0BC@DDKHHAGL@USA_AC_DIGIT__001@		; `string'
PUBLIC	??_C@_0BC@CKLMEBCK@USA_AC_DIGIT__000@		; `string'
PUBLIC	??_C@_0BC@FHICMNCP@CIS_AC_DIGIT__001@		; `string'
PUBLIC	??_C@_0BC@EOJJPMGO@CIS_AC_DIGIT__000@		; `string'
PUBLIC	??_C@_0BC@BIIKCDKI@USA_AC_DIGIT__002@		; `string'
PUBLIC	??_C@_0BC@BJBBCOJ@USA_AC_DIGIT__003@		; `string'
PUBLIC	??_C@_0BC@OMGJKPMF@LEBANON_FLAG__000@		; `string'
PUBLIC	??_C@_0BB@KAFNHNII@TAIWAN_FLAG__000@		; `string'
PUBLIC	??_C@_0BC@DAGOKGNE@COCKPIT_LAMP__033@		; `string'
PUBLIC	??_C@_0BC@CJHFJHJF@COCKPIT_LAMP__032@		; `string'
PUBLIC	??_C@_0BC@GFEDDMKN@66_GEAR_LAMP__040@		; `string'
PUBLIC	??_C@_0BC@BAIOHDJG@66_GEAR_LIGHT_034@		; `string'
PUBLIC	??_C@_0BC@HMFIANOM@66_GEAR_LAMP__041@		; `string'
PUBLIC	??_C@_0BC@JJFECNH@66_GEAR_LIGHT_035@		; `string'
PUBLIC	??_C@_0BC@MLEDCEGJ@COCKPIT_LAMP__029@		; `string'
PUBLIC	??_C@_0BC@BKIBJPCA@COCKPIT_LAMP__020@		; `string'
PUBLIC	??_C@_0BC@NCFIBFCI@COCKPIT_LAMP__028@		; `string'
PUBLIC	??_C@_0BC@MJAFJKDA@COCKPIT_LAMP__019@		; `string'
PUBLIC	??_C@_0BC@FFMAAJOH@COCKPIT_LAMP__027@		; `string'
PUBLIC	??_C@_0BC@GHPGGLGF@COCKPIT_LAMP__025@		; `string'
PUBLIC	??_C@_0BC@DBKMMMOD@COCKPIT_LAMP__023@		; `string'
PUBLIC	??_C@_0BC@HOONFKCE@COCKPIT_LAMP__024@		; `string'
PUBLIC	??_C@_0BC@DJKKOGB@COCKPIT_LAMP__021@		; `string'
PUBLIC	??_C@_0BC@EMNLDIKG@COCKPIT_LAMP__026@		; `string'
PUBLIC	??_C@_0BC@CILHPNKC@COCKPIT_LAMP__022@		; `string'
PUBLIC	??_C@_0BC@CMDKIBBA@COCKPIT_LAMP__042@		; `string'
PUBLIC	??_C@_0BC@EPFPOMMI@COCKPIT_LAMP__006@		; `string'
PUBLIC	??_C@_0BC@CKPBEDPL@COCKPIT_LAMP__012@		; `string'
PUBLIC	??_C@_0BC@BNMBADI@COCKPIT_LAMP__011@		; `string'
PUBLIC	??_C@_0BC@BIMHCBHJ@COCKPIT_LAMP__010@		; `string'
PUBLIC	??_C@_0BC@GEHCLPAL@COCKPIT_LAMP__005@		; `string'
PUBLIC	??_C@_0BC@NBNMMBEG@COCKPIT_LAMP__008@		; `string'
PUBLIC	??_C@_0BC@MIMHPAAH@COCKPIT_LAMP__009@		; `string'
PUBLIC	??_C@_0BC@HNGJIOEK@COCKPIT_LAMP__004@		; `string'
PUBLIC	??_C@_0BC@FHIGLHLO@COCKPIT_LAMP__017@		; `string'
PUBLIC	??_C@_0BC@NABOKLHB@COCKPIT_LAMP__018@		; `string'
PUBLIC	??_C@_0BC@GFLANFDM@COCKPIT_LAMP__015@		; `string'
PUBLIC	??_C@_0BC@EOJNIGPP@COCKPIT_LAMP__016@		; `string'
PUBLIC	??_C@_0BC@DDOKHCLK@COCKPIT_LAMP__013@		; `string'
PUBLIC	??_C@_0BC@HMKLOEHN@COCKPIT_LAMP__014@		; `string'
PUBLIC	??_C@_0BC@JEKMADM@GENERIC_LAMP__036@		; `string'
PUBLIC	??_C@_0BC@BAFBPBHN@GENERIC_LAMP__037@		; `string'
PUBLIC	??_C@_0BC@JHMJONLC@GENERIC_LAMP__038@		; `string'
PUBLIC	??_C@_0BC@IONCNMPD@GENERIC_LAMP__039@		; `string'
PUBLIC	??_C@_0BC@BJAFELEO@COCKPIT_LAMP__000@		; `string'
PUBLIC	??_C@_0BC@CLDDCJMM@COCKPIT_LAMP__002@		; `string'
PUBLIC	??_C@_0BC@BOHKAP@COCKPIT_LAMP__001@		; `string'
PUBLIC	??_C@_0BC@DCCIBIIN@COCKPIT_LAMP__003@		; `string'
PUBLIC	??_C@_0BC@CFIMEFG@COCKPIT_LAMP__031@		; `string'
PUBLIC	??_C@_0BC@BLEDPFBH@COCKPIT_LAMP__030@		; `string'
PUBLIC	??_C@_0BI@MCBIPNFD@HOKUM_COCKPIT_LAMP__025@	; `string'
PUBLIC	??_C@_0BI@OJDFKOJA@HOKUM_COCKPIT_LAMP__026@	; `string'
PUBLIC	??_C@_0BI@HFPADNEH@HOKUM_COCKPIT_LAMP__018@	; `string'
PUBLIC	??_C@_0BI@KGHEDIFH@HOKUM_COCKPIT_LAMP__021@	; `string'
PUBLIC	??_C@_0BI@INFJGLJE@HOKUM_COCKPIT_LAMP__022@	; `string'
PUBLIC	??_C@_0BI@GMOLAMAG@HOKUM_COCKPIT_LAMP__019@	; `string'
PUBLIC	??_C@_0BI@LPGPAJBG@HOKUM_COCKPIT_LAMP__020@	; `string'
PUBLIC	??_C@_0BI@NLADMMBC@HOKUM_COCKPIT_LAMP__024@	; `string'
PUBLIC	??_C@_0BI@LJBBMMC@HOKUM_COCKPIT_GEAR__029@	; `string'
PUBLIC	??_C@_0BI@JEECFKNF@HOKUM_COCKPIT_LAMP__023@	; `string'
PUBLIC	??_C@_0BI@PCGICBII@HOKUM_COCKPIT_LAMP__017@	; `string'
PUBLIC	??_C@_0BI@MBJMCJDN@HOKUM_COCKPIT_LAMP__005@	; `string'
PUBLIC	??_C@_0BI@KEDCIGAO@HOKUM_COCKPIT_LAMP__011@	; `string'
PUBLIC	??_C@_0BI@IPBPNFMN@HOKUM_COCKPIT_LAMP__012@	; `string'
PUBLIC	??_C@_0BI@LMOLNNHI@HOKUM_COCKPIT_LAMP__000@	; `string'
PUBLIC	??_C@_0BI@OKLBHKPO@HOKUM_COCKPIT_LAMP__006@	; `string'
PUBLIC	??_C@_0BI@JHMGIOLL@HOKUM_COCKPIT_LAMP__003@	; `string'
PUBLIC	??_C@_0BI@MAFOEDAK@HOKUM_COCKPIT_LAMP__015@	; `string'
PUBLIC	??_C@_0BI@GNCJGGDB@HOKUM_COCKPIT_LAMP__009@	; `string'
PUBLIC	??_C@_0BI@IONNLPPK@HOKUM_COCKPIT_LAMP__002@	; `string'
PUBLIC	??_C@_0BI@NJEFHCEL@HOKUM_COCKPIT_LAMP__014@	; `string'
PUBLIC	??_C@_0BI@HEDCFHHA@HOKUM_COCKPIT_LAMP__008@	; `string'
PUBLIC	??_C@_0BI@KFPAOMDJ@HOKUM_COCKPIT_LAMP__001@	; `string'
PUBLIC	??_C@_0BI@JGAEOEIM@HOKUM_COCKPIT_LAMP__013@	; `string'
PUBLIC	??_C@_0BI@PDKKELLP@HOKUM_COCKPIT_LAMP__007@	; `string'
PUBLIC	??_C@_0BI@OLHDBAMJ@HOKUM_COCKPIT_LAMP__016@	; `string'
PUBLIC	??_C@_0BI@NIIHBIHM@HOKUM_COCKPIT_LAMP__004@	; `string'
PUBLIC	??_C@_0BI@LNCJLHEP@HOKUM_COCKPIT_LAMP__010@	; `string'
PUBLIC	??_C@_0BI@PACOJPNB@HOKUM_COCKPIT_LAMP__027@	; `string'
PUBLIC	??_C@_0BI@HHLGIDBO@HOKUM_COCKPIT_LAMP__028@	; `string'
PUBLIC	??_C@_0BF@MBOOEJAJ@ADDITIVE_SMOKE_TRAIL@	; `string'
PUBLIC	??_C@_0N@DCHKBNNF@CANNON_FLARE@			; `string'
PUBLIC	??_C@_06GCMDIFGN@BOMB_C@			; `string'
PUBLIC	??_C@_05MLKBHMKD@FLARE@				; `string'
PUBLIC	??_C@_03NMPFMOLH@GUN@				; `string'
PUBLIC	??_C@_09DEMAOEBH@GUN_FLARE@			; `string'
PUBLIC	??_C@_09KJJDLBED@GUN_SMOKE@			; `string'
PUBLIC	??_C@_0BA@PENMONLG@GUN_SMOKE_FRONT@		; `string'
PUBLIC	??_C@_09ONICPHGH@LIGHTNING@			; `string'
PUBLIC	??_C@_0O@CDNDACFJ@MISSILE_FLARE@		; `string'
PUBLIC	??_C@_09JLJJHEGM@SHIP_WAKE@			; `string'
PUBLIC	??_C@_05FGPCCJPH@SMOKE@				; `string'
PUBLIC	??_C@_0M@IAGGCOPA@SMOKE_TRAIL@			; `string'
PUBLIC	??_C@_0O@GLBJHHAA@USA_NAVY__002@		; `string'
PUBLIC	??_C@_0O@FJCPBFIC@USA_NAVY__000@		; `string'
PUBLIC	??_C@_0O@EADECEMD@USA_NAVY__001@		; `string'
PUBLIC	??_C@_0BB@OOEMAIJI@CIS_PENNANT__000@		; `string'
PUBLIC	??_C@_0BB@NMHKGKBK@CIS_PENNANT__002@		; `string'
PUBLIC	??_C@_0BB@PHFHDJNJ@CIS_PENNANT__001@		; `string'
PUBLIC	??_C@_0BE@MIDBHPCL@USA_TANK_DIGIT__000@		; `string'
PUBLIC	??_C@_0BE@NBCKEOGK@USA_TANK_DIGIT__001@		; `string'
PUBLIC	??_C@_05BLNAODJM@TRAK0@				; `string'
PUBLIC	??_C@_0BE@OJPEFODO@CIS_TANK_DIGIT__000@		; `string'
PUBLIC	??_C@_0BE@PAOPGPHP@CIS_TANK_DIGIT__001@		; `string'
PUBLIC	??_C@_0BE@NLMCDMLM@CIS_TANK_DIGIT__002@		; `string'
PUBLIC	??_C@_0BE@PKAHBNKJ@USA_TANK_DIGIT__002@		; `string'
PUBLIC	??_C@_08CFPFJJME@OLD_LAST@			; `string'
PUBLIC	??_C@_0L@FIMAOHAN@KNOWN_LAST@			; `string'
PUBLIC	??_C@_08JJJLEIMO@UNUSED00@			; `string'
PUBLIC	??_C@_08IAIAHJIP@UNUSED01@			; `string'
PUBLIC	??_C@_08KLKNCKEM@UNUSED02@			; `string'
PUBLIC	??_C@_08LCLGBLAN@UNUSED03@			; `string'
PUBLIC	??_C@_08PNPHINMK@UNUSED04@			; `string'
PUBLIC	??_C@_08OEOMLMIL@UNUSED05@			; `string'
PUBLIC	??_C@_08MPMBOPEI@UNUSED06@			; `string'
PUBLIC	??_C@_08NGNKNOAJ@UNUSED07@			; `string'
PUBLIC	??_C@_08FBECMCMG@UNUSED08@			; `string'
PUBLIC	??_C@_08EIFJPDIH@UNUSED09@			; `string'
PUBLIC	??_C@_08JIFJCCPJ@UNUSED10@			; `string'
PUBLIC	??_C@_08IBECBDLI@UNUSED11@			; `string'
PUBLIC	??_C@_08KKGPEAHL@UNUSED12@			; `string'
PUBLIC	??_C@_08LDHEHBDK@UNUSED13@			; `string'
PUBLIC	??_C@_08PMDFOHPN@UNUSED14@			; `string'
PUBLIC	??_C@_08OFCONGLM@UNUSED15@			; `string'
PUBLIC	??_C@_08MOADIFHP@UNUSED16@			; `string'
PUBLIC	??_C@_08NHBILEDO@UNUSED17@			; `string'
PUBLIC	??_C@_08FAIAKIPB@UNUSED18@			; `string'
PUBLIC	??_C@_08EJJLJJLA@UNUSED19@			; `string'
PUBLIC	??_C@_08JKBPJMKA@UNUSED20@			; `string'
PUBLIC	??_C@_08IDAEKNOB@UNUSED21@			; `string'
PUBLIC	??_C@_08KICJPOCC@UNUSED22@			; `string'
PUBLIC	??_C@_08LBDCMPGD@UNUSED23@			; `string'
PUBLIC	??_C@_08POHDFJKE@UNUSED24@			; `string'
PUBLIC	??_C@_08OHGIGIOF@UNUSED25@			; `string'
PUBLIC	??_C@_08MMEFDLCG@UNUSED26@			; `string'
PUBLIC	??_C@_08NFFOAKGH@UNUSED27@			; `string'
PUBLIC	??_C@_08FCMGBGKI@UNUSED28@			; `string'
PUBLIC	??_C@_08ELNNCHOJ@UNUSED29@			; `string'
_BSS	SEGMENT
?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A DD 01H DUP (?) ; object_3d_information_database
?object_3d_enumeration_names@@3PAPBDA DD 01H DUP (?)	; object_3d_enumeration_names
?object_3d_sub_object_names@@3PAPBDA DD 01H DUP (?)	; object_3d_sub_object_names
?object_3d_camoflage_set_names@@3PAPBDA DD 01H DUP (?)	; object_3d_camoflage_set_names
?object_3d_camera_names@@3PAPBDA DD 01H DUP (?)		; object_3d_camera_names
?texture_animation_names@@3PAPBDA DD 01H DUP (?)	; texture_animation_names
?displacement_animation_names@@3PAPBDA DD 01H DUP (?)	; displacement_animation_names
?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A DD 01H DUP (?) ; texture_animations
?displacement_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A DD 01H DUP (?) ; displacement_animations
?object_3d_number_of_scene_names@@3HA DD 01H DUP (?)	; object_3d_number_of_scene_names
?object_3d_number_of_sub_object_names@@3HA DD 01H DUP (?) ; object_3d_number_of_sub_object_names
?object_3d_number_of_camoflage_set_names@@3HA DD 01H DUP (?) ; object_3d_number_of_camoflage_set_names
?object_3d_number_of_camera_names@@3HA DD 01H DUP (?)	; object_3d_number_of_camera_names
?number_of_texture_animations@@3HA DD 01H DUP (?)	; number_of_texture_animations
?number_of_displacement_animations@@3HA DD 01H DUP (?)	; number_of_displacement_animations
_BSS	ENDS
;	COMDAT ??_C@_08ELNNCHOJ@UNUSED29@
CONST	SEGMENT
??_C@_08ELNNCHOJ@UNUSED29@ DB 'UNUSED29', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FCMGBGKI@UNUSED28@
CONST	SEGMENT
??_C@_08FCMGBGKI@UNUSED28@ DB 'UNUSED28', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NFFOAKGH@UNUSED27@
CONST	SEGMENT
??_C@_08NFFOAKGH@UNUSED27@ DB 'UNUSED27', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MMEFDLCG@UNUSED26@
CONST	SEGMENT
??_C@_08MMEFDLCG@UNUSED26@ DB 'UNUSED26', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OHGIGIOF@UNUSED25@
CONST	SEGMENT
??_C@_08OHGIGIOF@UNUSED25@ DB 'UNUSED25', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08POHDFJKE@UNUSED24@
CONST	SEGMENT
??_C@_08POHDFJKE@UNUSED24@ DB 'UNUSED24', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LBDCMPGD@UNUSED23@
CONST	SEGMENT
??_C@_08LBDCMPGD@UNUSED23@ DB 'UNUSED23', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KICJPOCC@UNUSED22@
CONST	SEGMENT
??_C@_08KICJPOCC@UNUSED22@ DB 'UNUSED22', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IDAEKNOB@UNUSED21@
CONST	SEGMENT
??_C@_08IDAEKNOB@UNUSED21@ DB 'UNUSED21', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKBPJMKA@UNUSED20@
CONST	SEGMENT
??_C@_08JKBPJMKA@UNUSED20@ DB 'UNUSED20', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJJLJJLA@UNUSED19@
CONST	SEGMENT
??_C@_08EJJLJJLA@UNUSED19@ DB 'UNUSED19', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FAIAKIPB@UNUSED18@
CONST	SEGMENT
??_C@_08FAIAKIPB@UNUSED18@ DB 'UNUSED18', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NHBILEDO@UNUSED17@
CONST	SEGMENT
??_C@_08NHBILEDO@UNUSED17@ DB 'UNUSED17', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MOADIFHP@UNUSED16@
CONST	SEGMENT
??_C@_08MOADIFHP@UNUSED16@ DB 'UNUSED16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OFCONGLM@UNUSED15@
CONST	SEGMENT
??_C@_08OFCONGLM@UNUSED15@ DB 'UNUSED15', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PMDFOHPN@UNUSED14@
CONST	SEGMENT
??_C@_08PMDFOHPN@UNUSED14@ DB 'UNUSED14', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDHEHBDK@UNUSED13@
CONST	SEGMENT
??_C@_08LDHEHBDK@UNUSED13@ DB 'UNUSED13', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KKGPEAHL@UNUSED12@
CONST	SEGMENT
??_C@_08KKGPEAHL@UNUSED12@ DB 'UNUSED12', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBECBDLI@UNUSED11@
CONST	SEGMENT
??_C@_08IBECBDLI@UNUSED11@ DB 'UNUSED11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JIFJCCPJ@UNUSED10@
CONST	SEGMENT
??_C@_08JIFJCCPJ@UNUSED10@ DB 'UNUSED10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EIFJPDIH@UNUSED09@
CONST	SEGMENT
??_C@_08EIFJPDIH@UNUSED09@ DB 'UNUSED09', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBECMCMG@UNUSED08@
CONST	SEGMENT
??_C@_08FBECMCMG@UNUSED08@ DB 'UNUSED08', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NGNKNOAJ@UNUSED07@
CONST	SEGMENT
??_C@_08NGNKNOAJ@UNUSED07@ DB 'UNUSED07', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MPMBOPEI@UNUSED06@
CONST	SEGMENT
??_C@_08MPMBOPEI@UNUSED06@ DB 'UNUSED06', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OEOMLMIL@UNUSED05@
CONST	SEGMENT
??_C@_08OEOMLMIL@UNUSED05@ DB 'UNUSED05', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNPHINMK@UNUSED04@
CONST	SEGMENT
??_C@_08PNPHINMK@UNUSED04@ DB 'UNUSED04', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LCLGBLAN@UNUSED03@
CONST	SEGMENT
??_C@_08LCLGBLAN@UNUSED03@ DB 'UNUSED03', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLKNCKEM@UNUSED02@
CONST	SEGMENT
??_C@_08KLKNCKEM@UNUSED02@ DB 'UNUSED02', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IAIAHJIP@UNUSED01@
CONST	SEGMENT
??_C@_08IAIAHJIP@UNUSED01@ DB 'UNUSED01', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JJJLEIMO@UNUSED00@
CONST	SEGMENT
??_C@_08JJJLEIMO@UNUSED00@ DB 'UNUSED00', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FIMAOHAN@KNOWN_LAST@
CONST	SEGMENT
??_C@_0L@FIMAOHAN@KNOWN_LAST@ DB 'KNOWN_LAST', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CFPFJJME@OLD_LAST@
CONST	SEGMENT
??_C@_08CFPFJJME@OLD_LAST@ DB 'OLD_LAST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PKAHBNKJ@USA_TANK_DIGIT__002@
CONST	SEGMENT
??_C@_0BE@PKAHBNKJ@USA_TANK_DIGIT__002@ DB 'USA_TANK_DIGIT__002', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLMCDMLM@CIS_TANK_DIGIT__002@
CONST	SEGMENT
??_C@_0BE@NLMCDMLM@CIS_TANK_DIGIT__002@ DB 'CIS_TANK_DIGIT__002', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PAOPGPHP@CIS_TANK_DIGIT__001@
CONST	SEGMENT
??_C@_0BE@PAOPGPHP@CIS_TANK_DIGIT__001@ DB 'CIS_TANK_DIGIT__001', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OJPEFODO@CIS_TANK_DIGIT__000@
CONST	SEGMENT
??_C@_0BE@OJPEFODO@CIS_TANK_DIGIT__000@ DB 'CIS_TANK_DIGIT__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BLNAODJM@TRAK0@
CONST	SEGMENT
??_C@_05BLNAODJM@TRAK0@ DB 'TRAK0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NBCKEOGK@USA_TANK_DIGIT__001@
CONST	SEGMENT
??_C@_0BE@NBCKEOGK@USA_TANK_DIGIT__001@ DB 'USA_TANK_DIGIT__001', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MIDBHPCL@USA_TANK_DIGIT__000@
CONST	SEGMENT
??_C@_0BE@MIDBHPCL@USA_TANK_DIGIT__000@ DB 'USA_TANK_DIGIT__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PHFHDJNJ@CIS_PENNANT__001@
CONST	SEGMENT
??_C@_0BB@PHFHDJNJ@CIS_PENNANT__001@ DB 'CIS_PENNANT__001', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NMHKGKBK@CIS_PENNANT__002@
CONST	SEGMENT
??_C@_0BB@NMHKGKBK@CIS_PENNANT__002@ DB 'CIS_PENNANT__002', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OOEMAIJI@CIS_PENNANT__000@
CONST	SEGMENT
??_C@_0BB@OOEMAIJI@CIS_PENNANT__000@ DB 'CIS_PENNANT__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EADECEMD@USA_NAVY__001@
CONST	SEGMENT
??_C@_0O@EADECEMD@USA_NAVY__001@ DB 'USA_NAVY__001', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FJCPBFIC@USA_NAVY__000@
CONST	SEGMENT
??_C@_0O@FJCPBFIC@USA_NAVY__000@ DB 'USA_NAVY__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GLBJHHAA@USA_NAVY__002@
CONST	SEGMENT
??_C@_0O@GLBJHHAA@USA_NAVY__002@ DB 'USA_NAVY__002', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IAGGCOPA@SMOKE_TRAIL@
CONST	SEGMENT
??_C@_0M@IAGGCOPA@SMOKE_TRAIL@ DB 'SMOKE_TRAIL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FGPCCJPH@SMOKE@
CONST	SEGMENT
??_C@_05FGPCCJPH@SMOKE@ DB 'SMOKE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09JLJJHEGM@SHIP_WAKE@
CONST	SEGMENT
??_C@_09JLJJHEGM@SHIP_WAKE@ DB 'SHIP_WAKE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CDNDACFJ@MISSILE_FLARE@
CONST	SEGMENT
??_C@_0O@CDNDACFJ@MISSILE_FLARE@ DB 'MISSILE_FLARE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09ONICPHGH@LIGHTNING@
CONST	SEGMENT
??_C@_09ONICPHGH@LIGHTNING@ DB 'LIGHTNING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PENMONLG@GUN_SMOKE_FRONT@
CONST	SEGMENT
??_C@_0BA@PENMONLG@GUN_SMOKE_FRONT@ DB 'GUN_SMOKE_FRONT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KJJDLBED@GUN_SMOKE@
CONST	SEGMENT
??_C@_09KJJDLBED@GUN_SMOKE@ DB 'GUN_SMOKE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DEMAOEBH@GUN_FLARE@
CONST	SEGMENT
??_C@_09DEMAOEBH@GUN_FLARE@ DB 'GUN_FLARE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NMPFMOLH@GUN@
CONST	SEGMENT
??_C@_03NMPFMOLH@GUN@ DB 'GUN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLKBHMKD@FLARE@
CONST	SEGMENT
??_C@_05MLKBHMKD@FLARE@ DB 'FLARE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCMDIFGN@BOMB_C@
CONST	SEGMENT
??_C@_06GCMDIFGN@BOMB_C@ DB 'BOMB_C', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DCHKBNNF@CANNON_FLARE@
CONST	SEGMENT
??_C@_0N@DCHKBNNF@CANNON_FLARE@ DB 'CANNON_FLARE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MBOOEJAJ@ADDITIVE_SMOKE_TRAIL@
CONST	SEGMENT
??_C@_0BF@MBOOEJAJ@ADDITIVE_SMOKE_TRAIL@ DB 'ADDITIVE_SMOKE_TRAIL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HHLGIDBO@HOKUM_COCKPIT_LAMP__028@
CONST	SEGMENT
??_C@_0BI@HHLGIDBO@HOKUM_COCKPIT_LAMP__028@ DB 'HOKUM_COCKPIT_LAMP__028', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PACOJPNB@HOKUM_COCKPIT_LAMP__027@
CONST	SEGMENT
??_C@_0BI@PACOJPNB@HOKUM_COCKPIT_LAMP__027@ DB 'HOKUM_COCKPIT_LAMP__027', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LNCJLHEP@HOKUM_COCKPIT_LAMP__010@
CONST	SEGMENT
??_C@_0BI@LNCJLHEP@HOKUM_COCKPIT_LAMP__010@ DB 'HOKUM_COCKPIT_LAMP__010', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NIIHBIHM@HOKUM_COCKPIT_LAMP__004@
CONST	SEGMENT
??_C@_0BI@NIIHBIHM@HOKUM_COCKPIT_LAMP__004@ DB 'HOKUM_COCKPIT_LAMP__004', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OLHDBAMJ@HOKUM_COCKPIT_LAMP__016@
CONST	SEGMENT
??_C@_0BI@OLHDBAMJ@HOKUM_COCKPIT_LAMP__016@ DB 'HOKUM_COCKPIT_LAMP__016', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PDKKELLP@HOKUM_COCKPIT_LAMP__007@
CONST	SEGMENT
??_C@_0BI@PDKKELLP@HOKUM_COCKPIT_LAMP__007@ DB 'HOKUM_COCKPIT_LAMP__007', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JGAEOEIM@HOKUM_COCKPIT_LAMP__013@
CONST	SEGMENT
??_C@_0BI@JGAEOEIM@HOKUM_COCKPIT_LAMP__013@ DB 'HOKUM_COCKPIT_LAMP__013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KFPAOMDJ@HOKUM_COCKPIT_LAMP__001@
CONST	SEGMENT
??_C@_0BI@KFPAOMDJ@HOKUM_COCKPIT_LAMP__001@ DB 'HOKUM_COCKPIT_LAMP__001', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HEDCFHHA@HOKUM_COCKPIT_LAMP__008@
CONST	SEGMENT
??_C@_0BI@HEDCFHHA@HOKUM_COCKPIT_LAMP__008@ DB 'HOKUM_COCKPIT_LAMP__008', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NJEFHCEL@HOKUM_COCKPIT_LAMP__014@
CONST	SEGMENT
??_C@_0BI@NJEFHCEL@HOKUM_COCKPIT_LAMP__014@ DB 'HOKUM_COCKPIT_LAMP__014', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IONNLPPK@HOKUM_COCKPIT_LAMP__002@
CONST	SEGMENT
??_C@_0BI@IONNLPPK@HOKUM_COCKPIT_LAMP__002@ DB 'HOKUM_COCKPIT_LAMP__002', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GNCJGGDB@HOKUM_COCKPIT_LAMP__009@
CONST	SEGMENT
??_C@_0BI@GNCJGGDB@HOKUM_COCKPIT_LAMP__009@ DB 'HOKUM_COCKPIT_LAMP__009', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MAFOEDAK@HOKUM_COCKPIT_LAMP__015@
CONST	SEGMENT
??_C@_0BI@MAFOEDAK@HOKUM_COCKPIT_LAMP__015@ DB 'HOKUM_COCKPIT_LAMP__015', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JHMGIOLL@HOKUM_COCKPIT_LAMP__003@
CONST	SEGMENT
??_C@_0BI@JHMGIOLL@HOKUM_COCKPIT_LAMP__003@ DB 'HOKUM_COCKPIT_LAMP__003', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OKLBHKPO@HOKUM_COCKPIT_LAMP__006@
CONST	SEGMENT
??_C@_0BI@OKLBHKPO@HOKUM_COCKPIT_LAMP__006@ DB 'HOKUM_COCKPIT_LAMP__006', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LMOLNNHI@HOKUM_COCKPIT_LAMP__000@
CONST	SEGMENT
??_C@_0BI@LMOLNNHI@HOKUM_COCKPIT_LAMP__000@ DB 'HOKUM_COCKPIT_LAMP__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IPBPNFMN@HOKUM_COCKPIT_LAMP__012@
CONST	SEGMENT
??_C@_0BI@IPBPNFMN@HOKUM_COCKPIT_LAMP__012@ DB 'HOKUM_COCKPIT_LAMP__012', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KEDCIGAO@HOKUM_COCKPIT_LAMP__011@
CONST	SEGMENT
??_C@_0BI@KEDCIGAO@HOKUM_COCKPIT_LAMP__011@ DB 'HOKUM_COCKPIT_LAMP__011', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MBJMCJDN@HOKUM_COCKPIT_LAMP__005@
CONST	SEGMENT
??_C@_0BI@MBJMCJDN@HOKUM_COCKPIT_LAMP__005@ DB 'HOKUM_COCKPIT_LAMP__005', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PCGICBII@HOKUM_COCKPIT_LAMP__017@
CONST	SEGMENT
??_C@_0BI@PCGICBII@HOKUM_COCKPIT_LAMP__017@ DB 'HOKUM_COCKPIT_LAMP__017', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JEECFKNF@HOKUM_COCKPIT_LAMP__023@
CONST	SEGMENT
??_C@_0BI@JEECFKNF@HOKUM_COCKPIT_LAMP__023@ DB 'HOKUM_COCKPIT_LAMP__023', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LJBBMMC@HOKUM_COCKPIT_GEAR__029@
CONST	SEGMENT
??_C@_0BI@LJBBMMC@HOKUM_COCKPIT_GEAR__029@ DB 'HOKUM_COCKPIT_GEAR__029', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NLADMMBC@HOKUM_COCKPIT_LAMP__024@
CONST	SEGMENT
??_C@_0BI@NLADMMBC@HOKUM_COCKPIT_LAMP__024@ DB 'HOKUM_COCKPIT_LAMP__024', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LPGPAJBG@HOKUM_COCKPIT_LAMP__020@
CONST	SEGMENT
??_C@_0BI@LPGPAJBG@HOKUM_COCKPIT_LAMP__020@ DB 'HOKUM_COCKPIT_LAMP__020', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GMOLAMAG@HOKUM_COCKPIT_LAMP__019@
CONST	SEGMENT
??_C@_0BI@GMOLAMAG@HOKUM_COCKPIT_LAMP__019@ DB 'HOKUM_COCKPIT_LAMP__019', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@INFJGLJE@HOKUM_COCKPIT_LAMP__022@
CONST	SEGMENT
??_C@_0BI@INFJGLJE@HOKUM_COCKPIT_LAMP__022@ DB 'HOKUM_COCKPIT_LAMP__022', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KGHEDIFH@HOKUM_COCKPIT_LAMP__021@
CONST	SEGMENT
??_C@_0BI@KGHEDIFH@HOKUM_COCKPIT_LAMP__021@ DB 'HOKUM_COCKPIT_LAMP__021', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HFPADNEH@HOKUM_COCKPIT_LAMP__018@
CONST	SEGMENT
??_C@_0BI@HFPADNEH@HOKUM_COCKPIT_LAMP__018@ DB 'HOKUM_COCKPIT_LAMP__018', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OJDFKOJA@HOKUM_COCKPIT_LAMP__026@
CONST	SEGMENT
??_C@_0BI@OJDFKOJA@HOKUM_COCKPIT_LAMP__026@ DB 'HOKUM_COCKPIT_LAMP__026', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MCBIPNFD@HOKUM_COCKPIT_LAMP__025@
CONST	SEGMENT
??_C@_0BI@MCBIPNFD@HOKUM_COCKPIT_LAMP__025@ DB 'HOKUM_COCKPIT_LAMP__025', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BLEDPFBH@COCKPIT_LAMP__030@
CONST	SEGMENT
??_C@_0BC@BLEDPFBH@COCKPIT_LAMP__030@ DB 'COCKPIT_LAMP__030', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CFIMEFG@COCKPIT_LAMP__031@
CONST	SEGMENT
??_C@_0BC@CFIMEFG@COCKPIT_LAMP__031@ DB 'COCKPIT_LAMP__031', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DCCIBIIN@COCKPIT_LAMP__003@
CONST	SEGMENT
??_C@_0BC@DCCIBIIN@COCKPIT_LAMP__003@ DB 'COCKPIT_LAMP__003', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BOHKAP@COCKPIT_LAMP__001@
CONST	SEGMENT
??_C@_0BC@BOHKAP@COCKPIT_LAMP__001@ DB 'COCKPIT_LAMP__001', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CLDDCJMM@COCKPIT_LAMP__002@
CONST	SEGMENT
??_C@_0BC@CLDDCJMM@COCKPIT_LAMP__002@ DB 'COCKPIT_LAMP__002', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJAFELEO@COCKPIT_LAMP__000@
CONST	SEGMENT
??_C@_0BC@BJAFELEO@COCKPIT_LAMP__000@ DB 'COCKPIT_LAMP__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IONCNMPD@GENERIC_LAMP__039@
CONST	SEGMENT
??_C@_0BC@IONCNMPD@GENERIC_LAMP__039@ DB 'GENERIC_LAMP__039', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JHMJONLC@GENERIC_LAMP__038@
CONST	SEGMENT
??_C@_0BC@JHMJONLC@GENERIC_LAMP__038@ DB 'GENERIC_LAMP__038', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BAFBPBHN@GENERIC_LAMP__037@
CONST	SEGMENT
??_C@_0BC@BAFBPBHN@GENERIC_LAMP__037@ DB 'GENERIC_LAMP__037', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JEKMADM@GENERIC_LAMP__036@
CONST	SEGMENT
??_C@_0BC@JEKMADM@GENERIC_LAMP__036@ DB 'GENERIC_LAMP__036', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HMKLOEHN@COCKPIT_LAMP__014@
CONST	SEGMENT
??_C@_0BC@HMKLOEHN@COCKPIT_LAMP__014@ DB 'COCKPIT_LAMP__014', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDOKHCLK@COCKPIT_LAMP__013@
CONST	SEGMENT
??_C@_0BC@DDOKHCLK@COCKPIT_LAMP__013@ DB 'COCKPIT_LAMP__013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOJNIGPP@COCKPIT_LAMP__016@
CONST	SEGMENT
??_C@_0BC@EOJNIGPP@COCKPIT_LAMP__016@ DB 'COCKPIT_LAMP__016', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GFLANFDM@COCKPIT_LAMP__015@
CONST	SEGMENT
??_C@_0BC@GFLANFDM@COCKPIT_LAMP__015@ DB 'COCKPIT_LAMP__015', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NABOKLHB@COCKPIT_LAMP__018@
CONST	SEGMENT
??_C@_0BC@NABOKLHB@COCKPIT_LAMP__018@ DB 'COCKPIT_LAMP__018', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FHIGLHLO@COCKPIT_LAMP__017@
CONST	SEGMENT
??_C@_0BC@FHIGLHLO@COCKPIT_LAMP__017@ DB 'COCKPIT_LAMP__017', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HNGJIOEK@COCKPIT_LAMP__004@
CONST	SEGMENT
??_C@_0BC@HNGJIOEK@COCKPIT_LAMP__004@ DB 'COCKPIT_LAMP__004', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MIMHPAAH@COCKPIT_LAMP__009@
CONST	SEGMENT
??_C@_0BC@MIMHPAAH@COCKPIT_LAMP__009@ DB 'COCKPIT_LAMP__009', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NBNMMBEG@COCKPIT_LAMP__008@
CONST	SEGMENT
??_C@_0BC@NBNMMBEG@COCKPIT_LAMP__008@ DB 'COCKPIT_LAMP__008', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GEHCLPAL@COCKPIT_LAMP__005@
CONST	SEGMENT
??_C@_0BC@GEHCLPAL@COCKPIT_LAMP__005@ DB 'COCKPIT_LAMP__005', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BIMHCBHJ@COCKPIT_LAMP__010@
CONST	SEGMENT
??_C@_0BC@BIMHCBHJ@COCKPIT_LAMP__010@ DB 'COCKPIT_LAMP__010', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BNMBADI@COCKPIT_LAMP__011@
CONST	SEGMENT
??_C@_0BC@BNMBADI@COCKPIT_LAMP__011@ DB 'COCKPIT_LAMP__011', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CKPBEDPL@COCKPIT_LAMP__012@
CONST	SEGMENT
??_C@_0BC@CKPBEDPL@COCKPIT_LAMP__012@ DB 'COCKPIT_LAMP__012', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EPFPOMMI@COCKPIT_LAMP__006@
CONST	SEGMENT
??_C@_0BC@EPFPOMMI@COCKPIT_LAMP__006@ DB 'COCKPIT_LAMP__006', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CMDKIBBA@COCKPIT_LAMP__042@
CONST	SEGMENT
??_C@_0BC@CMDKIBBA@COCKPIT_LAMP__042@ DB 'COCKPIT_LAMP__042', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CILHPNKC@COCKPIT_LAMP__022@
CONST	SEGMENT
??_C@_0BC@CILHPNKC@COCKPIT_LAMP__022@ DB 'COCKPIT_LAMP__022', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EMNLDIKG@COCKPIT_LAMP__026@
CONST	SEGMENT
??_C@_0BC@EMNLDIKG@COCKPIT_LAMP__026@ DB 'COCKPIT_LAMP__026', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DJKKOGB@COCKPIT_LAMP__021@
CONST	SEGMENT
??_C@_0BC@DJKKOGB@COCKPIT_LAMP__021@ DB 'COCKPIT_LAMP__021', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HOONFKCE@COCKPIT_LAMP__024@
CONST	SEGMENT
??_C@_0BC@HOONFKCE@COCKPIT_LAMP__024@ DB 'COCKPIT_LAMP__024', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DBKMMMOD@COCKPIT_LAMP__023@
CONST	SEGMENT
??_C@_0BC@DBKMMMOD@COCKPIT_LAMP__023@ DB 'COCKPIT_LAMP__023', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GHPGGLGF@COCKPIT_LAMP__025@
CONST	SEGMENT
??_C@_0BC@GHPGGLGF@COCKPIT_LAMP__025@ DB 'COCKPIT_LAMP__025', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FFMAAJOH@COCKPIT_LAMP__027@
CONST	SEGMENT
??_C@_0BC@FFMAAJOH@COCKPIT_LAMP__027@ DB 'COCKPIT_LAMP__027', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MJAFJKDA@COCKPIT_LAMP__019@
CONST	SEGMENT
??_C@_0BC@MJAFJKDA@COCKPIT_LAMP__019@ DB 'COCKPIT_LAMP__019', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NCFIBFCI@COCKPIT_LAMP__028@
CONST	SEGMENT
??_C@_0BC@NCFIBFCI@COCKPIT_LAMP__028@ DB 'COCKPIT_LAMP__028', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BKIBJPCA@COCKPIT_LAMP__020@
CONST	SEGMENT
??_C@_0BC@BKIBJPCA@COCKPIT_LAMP__020@ DB 'COCKPIT_LAMP__020', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MLEDCEGJ@COCKPIT_LAMP__029@
CONST	SEGMENT
??_C@_0BC@MLEDCEGJ@COCKPIT_LAMP__029@ DB 'COCKPIT_LAMP__029', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JJFECNH@66_GEAR_LIGHT_035@
CONST	SEGMENT
??_C@_0BC@JJFECNH@66_GEAR_LIGHT_035@ DB '66_GEAR_LIGHT_035', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HMFIANOM@66_GEAR_LAMP__041@
CONST	SEGMENT
??_C@_0BC@HMFIANOM@66_GEAR_LAMP__041@ DB '66_GEAR_LAMP__041', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BAIOHDJG@66_GEAR_LIGHT_034@
CONST	SEGMENT
??_C@_0BC@BAIOHDJG@66_GEAR_LIGHT_034@ DB '66_GEAR_LIGHT_034', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GFEDDMKN@66_GEAR_LAMP__040@
CONST	SEGMENT
??_C@_0BC@GFEDDMKN@66_GEAR_LAMP__040@ DB '66_GEAR_LAMP__040', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CJHFJHJF@COCKPIT_LAMP__032@
CONST	SEGMENT
??_C@_0BC@CJHFJHJF@COCKPIT_LAMP__032@ DB 'COCKPIT_LAMP__032', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DAGOKGNE@COCKPIT_LAMP__033@
CONST	SEGMENT
??_C@_0BC@DAGOKGNE@COCKPIT_LAMP__033@ DB 'COCKPIT_LAMP__033', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KAFNHNII@TAIWAN_FLAG__000@
CONST	SEGMENT
??_C@_0BB@KAFNHNII@TAIWAN_FLAG__000@ DB 'TAIWAN_FLAG__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OMGJKPMF@LEBANON_FLAG__000@
CONST	SEGMENT
??_C@_0BC@OMGJKPMF@LEBANON_FLAG__000@ DB 'LEBANON_FLAG__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJBBCOJ@USA_AC_DIGIT__003@
CONST	SEGMENT
??_C@_0BC@BJBBCOJ@USA_AC_DIGIT__003@ DB 'USA_AC_DIGIT__003', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BIIKCDKI@USA_AC_DIGIT__002@
CONST	SEGMENT
??_C@_0BC@BIIKCDKI@USA_AC_DIGIT__002@ DB 'USA_AC_DIGIT__002', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOJJPMGO@CIS_AC_DIGIT__000@
CONST	SEGMENT
??_C@_0BC@EOJJPMGO@CIS_AC_DIGIT__000@ DB 'CIS_AC_DIGIT__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FHICMNCP@CIS_AC_DIGIT__001@
CONST	SEGMENT
??_C@_0BC@FHICMNCP@CIS_AC_DIGIT__001@ DB 'CIS_AC_DIGIT__001', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CKLMEBCK@USA_AC_DIGIT__000@
CONST	SEGMENT
??_C@_0BC@CKLMEBCK@USA_AC_DIGIT__000@ DB 'USA_AC_DIGIT__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDKHHAGL@USA_AC_DIGIT__001@
CONST	SEGMENT
??_C@_0BC@DDKHHAGL@USA_AC_DIGIT__001@ DB 'USA_AC_DIGIT__001', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EJBFPLIK@CIS_COPTER_DIGIT__002@
CONST	SEGMENT
??_C@_0BG@EJBFPLIK@CIS_COPTER_DIGIT__002@ DB 'CIS_COPTER_DIGIT__002', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GCDIKIEJ@CIS_COPTER_DIGIT__001@
CONST	SEGMENT
??_C@_0BG@GCDIKIEJ@CIS_COPTER_DIGIT__001@ DB 'CIS_COPTER_DIGIT__001', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HLCDJJAI@CIS_COPTER_DIGIT__000@
CONST	SEGMENT
??_C@_0BG@HLCDJJAI@CIS_COPTER_DIGIT__000@ DB 'CIS_COPTER_DIGIT__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GEJDILID@USA_COPTER_DIGIT__004@
CONST	SEGMENT
??_C@_0BG@GEJDILID@USA_COPTER_DIGIT__004@ DB 'USA_COPTER_DIGIT__004', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DCMJCMAF@USA_COPTER_DIGIT__002@
CONST	SEGMENT
??_C@_0BG@DCMJCMAF@USA_COPTER_DIGIT__002@ DB 'USA_COPTER_DIGIT__002', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CLNCBNEE@USA_COPTER_DIGIT__003@
CONST	SEGMENT
??_C@_0BG@CLNCBNEE@USA_COPTER_DIGIT__003@ DB 'USA_COPTER_DIGIT__003', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PPEOIH@USA_COPTER_DIGIT__000@
CONST	SEGMENT
??_C@_0BG@PPEOIH@USA_COPTER_DIGIT__000@ DB 'USA_COPTER_DIGIT__000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BJOEHPMG@USA_COPTER_DIGIT__001@
CONST	SEGMENT
??_C@_0BG@BJOEHPMG@USA_COPTER_DIGIT__001@ DB 'USA_COPTER_DIGIT__001', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?texture_animation_names_@@3PAPBDA DD FLAT:??_C@_0BG@BJOEHPMG@USA_COPTER_DIGIT__001@ ; texture_animation_names_
	DD	FLAT:??_C@_0BG@PPEOIH@USA_COPTER_DIGIT__000@
	DD	FLAT:??_C@_0BG@CLNCBNEE@USA_COPTER_DIGIT__003@
	DD	FLAT:??_C@_0BG@DCMJCMAF@USA_COPTER_DIGIT__002@
	DD	FLAT:??_C@_0BG@GEJDILID@USA_COPTER_DIGIT__004@
	DD	FLAT:??_C@_0BG@HLCDJJAI@CIS_COPTER_DIGIT__000@
	DD	FLAT:??_C@_0BG@GCDIKIEJ@CIS_COPTER_DIGIT__001@
	DD	FLAT:??_C@_0BG@EJBFPLIK@CIS_COPTER_DIGIT__002@
	DD	FLAT:??_C@_0BC@DDKHHAGL@USA_AC_DIGIT__001@
	DD	FLAT:??_C@_0BC@CKLMEBCK@USA_AC_DIGIT__000@
	DD	FLAT:??_C@_0BC@FHICMNCP@CIS_AC_DIGIT__001@
	DD	FLAT:??_C@_0BC@EOJJPMGO@CIS_AC_DIGIT__000@
	DD	FLAT:??_C@_0BC@BIIKCDKI@USA_AC_DIGIT__002@
	DD	FLAT:??_C@_0BC@BJBBCOJ@USA_AC_DIGIT__003@
	DD	FLAT:??_C@_0BC@OMGJKPMF@LEBANON_FLAG__000@
	DD	FLAT:??_C@_0BB@KAFNHNII@TAIWAN_FLAG__000@
	DD	FLAT:??_C@_0BC@DAGOKGNE@COCKPIT_LAMP__033@
	DD	FLAT:??_C@_0BC@CJHFJHJF@COCKPIT_LAMP__032@
	DD	FLAT:??_C@_0BC@GFEDDMKN@66_GEAR_LAMP__040@
	DD	FLAT:??_C@_0BC@BAIOHDJG@66_GEAR_LIGHT_034@
	DD	FLAT:??_C@_0BC@HMFIANOM@66_GEAR_LAMP__041@
	DD	FLAT:??_C@_0BC@JJFECNH@66_GEAR_LIGHT_035@
	DD	FLAT:??_C@_0BC@MLEDCEGJ@COCKPIT_LAMP__029@
	DD	FLAT:??_C@_0BC@BKIBJPCA@COCKPIT_LAMP__020@
	DD	FLAT:??_C@_0BC@NCFIBFCI@COCKPIT_LAMP__028@
	DD	FLAT:??_C@_0BC@MJAFJKDA@COCKPIT_LAMP__019@
	DD	FLAT:??_C@_0BC@FFMAAJOH@COCKPIT_LAMP__027@
	DD	FLAT:??_C@_0BC@GHPGGLGF@COCKPIT_LAMP__025@
	DD	FLAT:??_C@_0BC@DBKMMMOD@COCKPIT_LAMP__023@
	DD	FLAT:??_C@_0BC@HOONFKCE@COCKPIT_LAMP__024@
	DD	FLAT:??_C@_0BC@DJKKOGB@COCKPIT_LAMP__021@
	DD	FLAT:??_C@_0BC@EMNLDIKG@COCKPIT_LAMP__026@
	DD	FLAT:??_C@_0BC@CILHPNKC@COCKPIT_LAMP__022@
	DD	FLAT:??_C@_0BC@CMDKIBBA@COCKPIT_LAMP__042@
	DD	FLAT:??_C@_0BC@EPFPOMMI@COCKPIT_LAMP__006@
	DD	FLAT:??_C@_0BC@CKPBEDPL@COCKPIT_LAMP__012@
	DD	FLAT:??_C@_0BC@BNMBADI@COCKPIT_LAMP__011@
	DD	FLAT:??_C@_0BC@BIMHCBHJ@COCKPIT_LAMP__010@
	DD	FLAT:??_C@_0BC@GEHCLPAL@COCKPIT_LAMP__005@
	DD	FLAT:??_C@_0BC@NBNMMBEG@COCKPIT_LAMP__008@
	DD	FLAT:??_C@_0BC@MIMHPAAH@COCKPIT_LAMP__009@
	DD	FLAT:??_C@_0BC@HNGJIOEK@COCKPIT_LAMP__004@
	DD	FLAT:??_C@_0BC@FHIGLHLO@COCKPIT_LAMP__017@
	DD	FLAT:??_C@_0BC@NABOKLHB@COCKPIT_LAMP__018@
	DD	FLAT:??_C@_0BC@GFLANFDM@COCKPIT_LAMP__015@
	DD	FLAT:??_C@_0BC@EOJNIGPP@COCKPIT_LAMP__016@
	DD	FLAT:??_C@_0BC@DDOKHCLK@COCKPIT_LAMP__013@
	DD	FLAT:??_C@_0BC@HMKLOEHN@COCKPIT_LAMP__014@
	DD	FLAT:??_C@_0BC@JEKMADM@GENERIC_LAMP__036@
	DD	FLAT:??_C@_0BC@BAFBPBHN@GENERIC_LAMP__037@
	DD	FLAT:??_C@_0BC@JHMJONLC@GENERIC_LAMP__038@
	DD	FLAT:??_C@_0BC@IONCNMPD@GENERIC_LAMP__039@
	DD	FLAT:??_C@_0BC@BJAFELEO@COCKPIT_LAMP__000@
	DD	FLAT:??_C@_0BC@CLDDCJMM@COCKPIT_LAMP__002@
	DD	FLAT:??_C@_0BC@BOHKAP@COCKPIT_LAMP__001@
	DD	FLAT:??_C@_0BC@DCCIBIIN@COCKPIT_LAMP__003@
	DD	FLAT:??_C@_0BC@CFIMEFG@COCKPIT_LAMP__031@
	DD	FLAT:??_C@_0BC@BLEDPFBH@COCKPIT_LAMP__030@
	DD	FLAT:??_C@_0BI@MCBIPNFD@HOKUM_COCKPIT_LAMP__025@
	DD	FLAT:??_C@_0BI@OJDFKOJA@HOKUM_COCKPIT_LAMP__026@
	DD	FLAT:??_C@_0BI@HFPADNEH@HOKUM_COCKPIT_LAMP__018@
	DD	FLAT:??_C@_0BI@KGHEDIFH@HOKUM_COCKPIT_LAMP__021@
	DD	FLAT:??_C@_0BI@INFJGLJE@HOKUM_COCKPIT_LAMP__022@
	DD	FLAT:??_C@_0BI@GMOLAMAG@HOKUM_COCKPIT_LAMP__019@
	DD	FLAT:??_C@_0BI@LPGPAJBG@HOKUM_COCKPIT_LAMP__020@
	DD	FLAT:??_C@_0BI@NLADMMBC@HOKUM_COCKPIT_LAMP__024@
	DD	FLAT:??_C@_0BI@LJBBMMC@HOKUM_COCKPIT_GEAR__029@
	DD	FLAT:??_C@_0BI@JEECFKNF@HOKUM_COCKPIT_LAMP__023@
	DD	FLAT:??_C@_0BI@PCGICBII@HOKUM_COCKPIT_LAMP__017@
	DD	FLAT:??_C@_0BI@MBJMCJDN@HOKUM_COCKPIT_LAMP__005@
	DD	FLAT:??_C@_0BI@KEDCIGAO@HOKUM_COCKPIT_LAMP__011@
	DD	FLAT:??_C@_0BI@IPBPNFMN@HOKUM_COCKPIT_LAMP__012@
	DD	FLAT:??_C@_0BI@LMOLNNHI@HOKUM_COCKPIT_LAMP__000@
	DD	FLAT:??_C@_0BI@OKLBHKPO@HOKUM_COCKPIT_LAMP__006@
	DD	FLAT:??_C@_0BI@JHMGIOLL@HOKUM_COCKPIT_LAMP__003@
	DD	FLAT:??_C@_0BI@MAFOEDAK@HOKUM_COCKPIT_LAMP__015@
	DD	FLAT:??_C@_0BI@GNCJGGDB@HOKUM_COCKPIT_LAMP__009@
	DD	FLAT:??_C@_0BI@IONNLPPK@HOKUM_COCKPIT_LAMP__002@
	DD	FLAT:??_C@_0BI@NJEFHCEL@HOKUM_COCKPIT_LAMP__014@
	DD	FLAT:??_C@_0BI@HEDCFHHA@HOKUM_COCKPIT_LAMP__008@
	DD	FLAT:??_C@_0BI@KFPAOMDJ@HOKUM_COCKPIT_LAMP__001@
	DD	FLAT:??_C@_0BI@JGAEOEIM@HOKUM_COCKPIT_LAMP__013@
	DD	FLAT:??_C@_0BI@PDKKELLP@HOKUM_COCKPIT_LAMP__007@
	DD	FLAT:??_C@_0BI@OLHDBAMJ@HOKUM_COCKPIT_LAMP__016@
	DD	FLAT:??_C@_0BI@NIIHBIHM@HOKUM_COCKPIT_LAMP__004@
	DD	FLAT:??_C@_0BI@LNCJLHEP@HOKUM_COCKPIT_LAMP__010@
	DD	FLAT:??_C@_0BI@PACOJPNB@HOKUM_COCKPIT_LAMP__027@
	DD	FLAT:??_C@_0BI@HHLGIDBO@HOKUM_COCKPIT_LAMP__028@
	DD	FLAT:??_C@_0BF@MBOOEJAJ@ADDITIVE_SMOKE_TRAIL@
	DD	FLAT:??_C@_0N@DCHKBNNF@CANNON_FLARE@
	DD	FLAT:??_C@_06GCMDIFGN@BOMB_C@
	DD	FLAT:??_C@_05MLKBHMKD@FLARE@
	DD	FLAT:??_C@_03NMPFMOLH@GUN@
	DD	FLAT:??_C@_09DEMAOEBH@GUN_FLARE@
	DD	FLAT:??_C@_09KJJDLBED@GUN_SMOKE@
	DD	FLAT:??_C@_0BA@PENMONLG@GUN_SMOKE_FRONT@
	DD	FLAT:??_C@_09ONICPHGH@LIGHTNING@
	DD	FLAT:??_C@_0O@CDNDACFJ@MISSILE_FLARE@
	DD	FLAT:??_C@_09JLJJHEGM@SHIP_WAKE@
	DD	FLAT:??_C@_05FGPCCJPH@SMOKE@
	DD	FLAT:??_C@_0M@IAGGCOPA@SMOKE_TRAIL@
	DD	FLAT:??_C@_0O@GLBJHHAA@USA_NAVY__002@
	DD	FLAT:??_C@_0O@FJCPBFIC@USA_NAVY__000@
	DD	FLAT:??_C@_0O@EADECEMD@USA_NAVY__001@
	DD	FLAT:??_C@_0BB@OOEMAIJI@CIS_PENNANT__000@
	DD	FLAT:??_C@_0BB@NMHKGKBK@CIS_PENNANT__002@
	DD	FLAT:??_C@_0BB@PHFHDJNJ@CIS_PENNANT__001@
	DD	FLAT:??_C@_0BE@MIDBHPCL@USA_TANK_DIGIT__000@
	DD	FLAT:??_C@_0BE@NBCKEOGK@USA_TANK_DIGIT__001@
	DD	FLAT:??_C@_05BLNAODJM@TRAK0@
	DD	FLAT:??_C@_0BE@OJPEFODO@CIS_TANK_DIGIT__000@
	DD	FLAT:??_C@_0BE@PAOPGPHP@CIS_TANK_DIGIT__001@
	DD	FLAT:??_C@_0BE@NLMCDMLM@CIS_TANK_DIGIT__002@
	DD	FLAT:??_C@_0BE@PKAHBNKJ@USA_TANK_DIGIT__002@
	DD	FLAT:??_C@_08CFPFJJME@OLD_LAST@
	DD	FLAT:??_C@_0L@FIMAOHAN@KNOWN_LAST@
	DD	FLAT:??_C@_08JJJLEIMO@UNUSED00@
	DD	FLAT:??_C@_08IAIAHJIP@UNUSED01@
	DD	FLAT:??_C@_08KLKNCKEM@UNUSED02@
	DD	FLAT:??_C@_08LCLGBLAN@UNUSED03@
	DD	FLAT:??_C@_08PNPHINMK@UNUSED04@
	DD	FLAT:??_C@_08OEOMLMIL@UNUSED05@
	DD	FLAT:??_C@_08MPMBOPEI@UNUSED06@
	DD	FLAT:??_C@_08NGNKNOAJ@UNUSED07@
	DD	FLAT:??_C@_08FBECMCMG@UNUSED08@
	DD	FLAT:??_C@_08EIFJPDIH@UNUSED09@
	DD	FLAT:??_C@_08JIFJCCPJ@UNUSED10@
	DD	FLAT:??_C@_08IBECBDLI@UNUSED11@
	DD	FLAT:??_C@_08KKGPEAHL@UNUSED12@
	DD	FLAT:??_C@_08LDHEHBDK@UNUSED13@
	DD	FLAT:??_C@_08PMDFOHPN@UNUSED14@
	DD	FLAT:??_C@_08OFCONGLM@UNUSED15@
	DD	FLAT:??_C@_08MOADIFHP@UNUSED16@
	DD	FLAT:??_C@_08NHBILEDO@UNUSED17@
	DD	FLAT:??_C@_08FAIAKIPB@UNUSED18@
	DD	FLAT:??_C@_08EJJLJJLA@UNUSED19@
	DD	FLAT:??_C@_08JKBPJMKA@UNUSED20@
	DD	FLAT:??_C@_08IDAEKNOB@UNUSED21@
	DD	FLAT:??_C@_08KICJPOCC@UNUSED22@
	DD	FLAT:??_C@_08LBDCMPGD@UNUSED23@
	DD	FLAT:??_C@_08POHDFJKE@UNUSED24@
	DD	FLAT:??_C@_08OHGIGIOF@UNUSED25@
	DD	FLAT:??_C@_08MMEFDLCG@UNUSED26@
	DD	FLAT:??_C@_08NFFOAKGH@UNUSED27@
	DD	FLAT:??_C@_08FCMGBGKI@UNUSED28@
	DD	FLAT:??_C@_08ELNNCHOJ@UNUSED29@
	DD	00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?initialise_3d_objects_info@@YGXPBD@Z		; initialise_3d_objects_info
PUBLIC	?get_object_3d_index_from_name@@YGHPAD@Z	; get_object_3d_index_from_name
PUBLIC	?get_object_3d_sub_index_from_name@@YGHPAD@Z	; get_object_3d_sub_index_from_name
PUBLIC	?get_object_3d_camoflage_index_from_name@@YGHPAD@Z ; get_object_3d_camoflage_index_from_name
PUBLIC	?get_object_3d_camera_index_from_name@@YGHPAD@Z	; get_object_3d_camera_index_from_name
PUBLIC	?get_object_3d_texture_animation_index_from_name@@YGHPAD@Z ; get_object_3d_texture_animation_index_from_name
PUBLIC	?get_object_3d_displacement_animation_index_from_name@@YGHPAD@Z ; get_object_3d_displacement_animation_index_from_name
PUBLIC	?construct_3d_object_by_name@@YGPAUOBJECT_3D_INSTANCE@@PAD@Z ; construct_3d_object_by_name
PUBLIC	?set_object_3d_texture_camoflage_by_name@@YGXPAD@Z ; set_object_3d_texture_camoflage_by_name
PUBLIC	?add_new_animation@@YGHPAD@Z			; add_new_animation
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA ; `initialise_3d_objects_info'::`1'::__LINE__Var
PUBLIC	??_C@_0P@MBENFDLN@?$CFs?2bininfo?4bin@		; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_09HGIBBNON@?2cohokum?2@			; `string'
PUBLIC	??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_02GDNLOIIJ@fp@				; `string'
PUBLIC	??_C@_0DG@COCOLNKH@object_3d_number_of_scene_names@ ; `string'
PUBLIC	??_C@_0BF@GCNOBEBF@OBJECT_INVALID_INDEX@	; `string'
PUBLIC	??_C@_0EN@PEBNGMMP@?$CBstrcmp?5?$CI?5object_3d_enumeration@ ; `string'
PUBLIC	??_C@_0EG@POKCHCBN@object_3d_number_of_sub_object_@ ; `string'
PUBLIC	??_C@_0BJ@BCHLGFNJ@INVALID_SUB_OBJECT_INDEX@	; `string'
PUBLIC	??_C@_0FA@OBBBPPNE@?$CBstrcmp?5?$CI?5object_3d_sub_object_@ ; `string'
PUBLIC	??_C@_0BF@DNCJNOOC@INVALID_CAMERA_INDEX@	; `string'
PUBLIC	??_C@_0EB@DCKFDKLI@number_of_texture_animations?5?$DN?$DN@ ; `string'
PUBLIC	??_C@_0EM@HAGPLEGO@?$CBstrcmp?5?$CI?5texture_animation_nam@ ; `string'
PUBLIC	??_C@_0CI@IOEKEGPP@?$CFs?2?4?4?2GRAPHICS?2TEXTURES?2ANIMATI@ ; `string'
PUBLIC	??_C@_0DM@LNIDEGEB@number_of_texture_animations?5?$DM?5@ ; `string'
PUBLIC	??_C@_0CJ@EFKNOIOJ@?$CFs?2?4?4?2GRAPHICS?2TEXTURES?2ANIMATI@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_0BP@EOLOLKHO@Unable?5to?5construct?5object?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CG@HBGPNHOA@FAILED?5to?5find?5texture?5animatio@ ; `string'
PUBLIC	__real@447a0000
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp___findclose:PROC
EXTRN	__imp___findfirst64i32:PROC
EXTRN	__imp___findnext64i32:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp___strupr:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?safe_fclose@@YGHPAU_iobuf@@@Z:PROC		; safe_fclose
EXTRN	?set_texture_camoflage@@YGXH@Z:PROC		; set_texture_camoflage
EXTRN	?add_new_texture@@YGHPBD0@Z:PROC		; add_new_texture
EXTRN	?construct_3d_object@@YGPAUOBJECT_3D_INSTANCE@@H@Z:PROC ; construct_3d_object
EXTRN	?object_3d_scene_names@@3PAPBDA:BYTE		; object_3d_scene_names
EXTRN	?object_3d_subobject_names@@3PAPBDA:BYTE	; object_3d_subobject_names
EXTRN	?comanche_hokum_installation_path@@3PADA:BYTE	; comanche_hokum_installation_path
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT ??_C@_0CG@HBGPNHOA@FAILED?5to?5find?5texture?5animatio@
CONST	SEGMENT
??_C@_0CG@HBGPNHOA@FAILED?5to?5find?5texture?5animatio@ DB 'FAILED to fin'
	DB	'd texture animation ''%s''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EOLOLKHO@Unable?5to?5construct?5object?3?5?$CFs@
CONST	SEGMENT
??_C@_0BP@EOLOLKHO@Unable?5to?5construct?5object?3?5?$CFs@ DB 'Unable to '
	DB	'construct object: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EFKNOIOJ@?$CFs?2?4?4?2GRAPHICS?2TEXTURES?2ANIMATI@
CONST	SEGMENT
??_C@_0CJ@EFKNOIOJ@?$CFs?2?4?4?2GRAPHICS?2TEXTURES?2ANIMATI@ DB '%s\..\GR'
	DB	'APHICS\TEXTURES\ANIMATION\%s.TXT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LNIDEGEB@number_of_texture_animations?5?$DM?5@
CONST	SEGMENT
??_C@_0DM@LNIDEGEB@number_of_texture_animations?5?$DM?5@ DB 'number_of_te'
	DB	'xture_animations < TEXTURE_ANIMATION_INDEX_LAST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IOEKEGPP@?$CFs?2?4?4?2GRAPHICS?2TEXTURES?2ANIMATI@
CONST	SEGMENT
??_C@_0CI@IOEKEGPP@?$CFs?2?4?4?2GRAPHICS?2TEXTURES?2ANIMATI@ DB '%s\..\GR'
	DB	'APHICS\TEXTURES\ANIMATION\*.TXT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@HAGPLEGO@?$CBstrcmp?5?$CI?5texture_animation_nam@
CONST	SEGMENT
??_C@_0EM@HAGPLEGO@?$CBstrcmp?5?$CI?5texture_animation_nam@ DB '!strcmp ('
	DB	' texture_animation_names[count], texture_animation_names_[cou'
	DB	'nt] )', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DCKFDKLI@number_of_texture_animations?5?$DN?$DN@
CONST	SEGMENT
??_C@_0EB@DCKFDKLI@number_of_texture_animations?5?$DN?$DN@ DB 'number_of_'
	DB	'texture_animations == TEXTURE_ANIMATION_INDEX_OLD_LAST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DNCJNOOC@INVALID_CAMERA_INDEX@
CONST	SEGMENT
??_C@_0BF@DNCJNOOC@INVALID_CAMERA_INDEX@ DB 'INVALID_CAMERA_INDEX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@OBBBPPNE@?$CBstrcmp?5?$CI?5object_3d_sub_object_@
CONST	SEGMENT
??_C@_0FA@OBBBPPNE@?$CBstrcmp?5?$CI?5object_3d_sub_object_@ DB '!strcmp ('
	DB	' object_3d_sub_object_names[count], object_3d_subobject_names'
	DB	'[count] )', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BCHLGFNJ@INVALID_SUB_OBJECT_INDEX@
CONST	SEGMENT
??_C@_0BJ@BCHLGFNJ@INVALID_SUB_OBJECT_INDEX@ DB 'INVALID_SUB_OBJECT_INDEX'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@POKCHCBN@object_3d_number_of_sub_object_@
CONST	SEGMENT
??_C@_0EG@POKCHCBN@object_3d_number_of_sub_object_@ DB 'object_3d_number_'
	DB	'of_sub_object_names == OBJECT_3D_SUB_OBJECT_OLD_LAST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@PEBNGMMP@?$CBstrcmp?5?$CI?5object_3d_enumeration@
CONST	SEGMENT
??_C@_0EN@PEBNGMMP@?$CBstrcmp?5?$CI?5object_3d_enumeration@ DB '!strcmp ('
	DB	' object_3d_enumeration_names[count], object_3d_scene_names[co'
	DB	'unt] )', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GCNOBEBF@OBJECT_INVALID_INDEX@
CONST	SEGMENT
??_C@_0BF@GCNOBEBF@OBJECT_INVALID_INDEX@ DB 'OBJECT_INVALID_INDEX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@COCOLNKH@object_3d_number_of_scene_names@
CONST	SEGMENT
??_C@_0DG@COCOLNKH@object_3d_number_of_scene_names@ DB 'object_3d_number_'
	DB	'of_scene_names == OBJECT_3D_OLD_LAST', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GDNLOIIJ@fp@
CONST	SEGMENT
??_C@_02GDNLOIIJ@fp@ DB 'fp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\3dobjid.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HGIBBNON@?2cohokum?2@
CONST	SEGMENT
??_C@_09HGIBBNON@?2cohokum?2@ DB '\cohokum\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBENFDLN@?$CFs?2bininfo?4bin@
CONST	SEGMENT
??_C@_0P@MBENFDLN@?$CFs?2bininfo?4bin@ DB '%s\bininfo.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA DD 073H ; `initialise_3d_objects_info'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjid.c
;	COMDAT ?add_new_animation@@YGHPAD@Z
_TEXT	SEGMENT
_texture_animation$ = -4				; size = 4
_animation_name$ = 8					; size = 4
?add_new_animation@@YGHPAD@Z PROC			; add_new_animation, COMDAT

; 729  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 730  : 	int
; 731  : 		texture_animation;
; 732  : 
; 733  : 	texture_animation = get_object_3d_texture_animation_index_from_name ( animation_name );

  00009	8b 45 08	 mov	 eax, DWORD PTR _animation_name$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?get_object_3d_texture_animation_index_from_name@@YGHPAD@Z ; get_object_3d_texture_animation_index_from_name
  00012	89 45 fc	 mov	 DWORD PTR _texture_animation$[ebp], eax

; 734  : 	if ( texture_animation < 0 )

  00015	83 7d fc 00	 cmp	 DWORD PTR _texture_animation$[ebp], 0
  00019	7d 11		 jge	 SHORT $LN2@add_new_an

; 735  : 	{
; 736  : 		debug_fatal ( "FAILED to find texture animation '%s'", animation_name );

  0001b	8b 45 08	 mov	 eax, DWORD PTR _animation_name$[ebp]
  0001e	50		 push	 eax
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@HBGPNHOA@FAILED?5to?5find?5texture?5animatio@
  00024	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00029	83 c4 08	 add	 esp, 8
$LN2@add_new_an:

; 737  : 	}
; 738  : 
; 739  : 	return texture_animation;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _texture_animation$[ebp]

; 740  : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?add_new_animation@@YGHPAD@Z ENDP			; add_new_animation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjid.c
;	COMDAT ?set_object_3d_texture_camoflage_by_name@@YGXPAD@Z
_TEXT	SEGMENT
_index$ = -4						; size = 4
_name$ = 8						; size = 4
?set_object_3d_texture_camoflage_by_name@@YGXPAD@Z PROC	; set_object_3d_texture_camoflage_by_name, COMDAT

; 709  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 710  : 
; 711  : 	int
; 712  : 		index;
; 713  : 
; 714  : 	index = get_object_3d_camoflage_index_from_name ( name );

  00009	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?get_object_3d_camoflage_index_from_name@@YGHPAD@Z ; get_object_3d_camoflage_index_from_name
  00012	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax

; 715  : 
; 716  : 	if ( index != -1 )

  00015	83 7d fc ff	 cmp	 DWORD PTR _index$[ebp], -1
  00019	74 09		 je	 SHORT $LN1@set_object

; 717  : 	{
; 718  : 
; 719  : 		set_texture_camoflage ( index );

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?set_texture_camoflage@@YGXH@Z ; set_texture_camoflage
$LN1@set_object:

; 720  : 	}
; 721  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?set_object_3d_texture_camoflage_by_name@@YGXPAD@Z ENDP	; set_object_3d_texture_camoflage_by_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjid.c
;	COMDAT ?construct_3d_object_by_name@@YGPAUOBJECT_3D_INSTANCE@@PAD@Z
_TEXT	SEGMENT
_index$ = -4						; size = 4
_name$ = 8						; size = 4
?construct_3d_object_by_name@@YGPAUOBJECT_3D_INSTANCE@@PAD@Z PROC ; construct_3d_object_by_name, COMDAT

; 683  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 684  : 
; 685  : 	int
; 686  : 		index;
; 687  : 
; 688  : 	index = get_object_3d_index_from_name ( name );

  00009	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?get_object_3d_index_from_name@@YGHPAD@Z ; get_object_3d_index_from_name
  00012	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax

; 689  : 
; 690  : 	if ( index )

  00015	83 7d fc 00	 cmp	 DWORD PTR _index$[ebp], 0
  00019	74 0d		 je	 SHORT $LN2@construct_

; 691  : 	{
; 692  : 
; 693  : 		return ( construct_3d_object ( index ) );

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?construct_3d_object@@YGPAUOBJECT_3D_INSTANCE@@H@Z ; construct_3d_object
  00024	eb 15		 jmp	 SHORT $LN1@construct_

; 694  : 	}
; 695  : 	else

  00026	eb 13		 jmp	 SHORT $LN1@construct_
$LN2@construct_:

; 696  : 	{
; 697  : 
; 698  : 		debug_fatal ( "Unable to construct object: %s", name );

  00028	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EOLOLKHO@Unable?5to?5construct?5object?3?5?$CFs@
  00031	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00036	83 c4 08	 add	 esp, 8

; 699  : 
; 700  : 		return ( NULL );

  00039	33 c0		 xor	 eax, eax
$LN1@construct_:

; 701  : 	}
; 702  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?construct_3d_object_by_name@@YGPAUOBJECT_3D_INSTANCE@@PAD@Z ENDP ; construct_3d_object_by_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjid.c
;	COMDAT ?get_object_3d_displacement_animation_index_from_name@@YGHPAD@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_name$ = 8						; size = 4
?get_object_3d_displacement_animation_index_from_name@@YGHPAD@Z PROC ; get_object_3d_displacement_animation_index_from_name, COMDAT

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 661  : 
; 662  : 	int
; 663  : 		count;
; 664  : 
; 665  : 	for ( count = 0; count < number_of_displacement_animations; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@get_object
$LN2@get_object:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_object:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_displacement_animations@@3HA ; number_of_displacement_animations
  00024	7d 25		 jge	 SHORT $LN3@get_object

; 666  : 	{
; 667  : 
; 668  : 		if ( stricmp ( name, displacement_animation_names[count] ) == 0 )

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?displacement_animation_names@@3PAPBDA ; displacement_animation_names
  0002f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	75 05		 jne	 SHORT $LN5@get_object

; 669  : 		{
; 670  : 
; 671  : 			return ( count );

  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	eb 05		 jmp	 SHORT $LN1@get_object
$LN5@get_object:

; 672  : 		}
; 673  : 	}

  00049	eb c7		 jmp	 SHORT $LN2@get_object
$LN3@get_object:

; 674  : 
; 675  : 	return ( -1 );

  0004b	83 c8 ff	 or	 eax, -1
$LN1@get_object:

; 676  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?get_object_3d_displacement_animation_index_from_name@@YGHPAD@Z ENDP ; get_object_3d_displacement_animation_index_from_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjid.c
;	COMDAT ?get_object_3d_texture_animation_index_from_name@@YGHPAD@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_name$ = 8						; size = 4
?get_object_3d_texture_animation_index_from_name@@YGHPAD@Z PROC ; get_object_3d_texture_animation_index_from_name, COMDAT

; 637  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 638  : 
; 639  : 	int
; 640  : 		count;
; 641  : 
; 642  : 	for ( count = 0; count < number_of_texture_animations; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@get_object
$LN2@get_object:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_object:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_texture_animations@@3HA ; number_of_texture_animations
  00024	7d 25		 jge	 SHORT $LN3@get_object

; 643  : 	{
; 644  : 
; 645  : 		if ( stricmp ( name, texture_animation_names[count] ) == 0 )

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animation_names@@3PAPBDA ; texture_animation_names
  0002f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	75 05		 jne	 SHORT $LN5@get_object

; 646  : 		{
; 647  : 
; 648  : 			return ( count );

  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	eb 05		 jmp	 SHORT $LN1@get_object
$LN5@get_object:

; 649  : 		}
; 650  : 	}

  00049	eb c7		 jmp	 SHORT $LN2@get_object
$LN3@get_object:

; 651  : 
; 652  : 	return ( -1 );

  0004b	83 c8 ff	 or	 eax, -1
$LN1@get_object:

; 653  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?get_object_3d_texture_animation_index_from_name@@YGHPAD@Z ENDP ; get_object_3d_texture_animation_index_from_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjid.c
;	COMDAT ?get_object_3d_camera_index_from_name@@YGHPAD@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_name$ = 8						; size = 4
?get_object_3d_camera_index_from_name@@YGHPAD@Z PROC	; get_object_3d_camera_index_from_name, COMDAT

; 614  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 615  : 
; 616  : 	int
; 617  : 		count;
; 618  : 
; 619  : 	for ( count = 1; count < object_3d_number_of_camera_names; count++ )

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  00010	eb 09		 jmp	 SHORT $LN4@get_object
$LN2@get_object:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_object:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_number_of_camera_names@@3HA ; object_3d_number_of_camera_names
  00024	7d 25		 jge	 SHORT $LN3@get_object

; 620  : 	{
; 621  : 
; 622  : 		if ( stricmp ( name, object_3d_camera_names [count] ) == 0 )

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_camera_names@@3PAPBDA ; object_3d_camera_names
  0002f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	75 05		 jne	 SHORT $LN5@get_object

; 623  : 		{
; 624  : 
; 625  : 			return ( count );

  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	eb 04		 jmp	 SHORT $LN1@get_object
$LN5@get_object:

; 626  : 		}
; 627  : 	}

  00049	eb c7		 jmp	 SHORT $LN2@get_object
$LN3@get_object:

; 628  : 
; 629  : 	return ( 0 );

  0004b	33 c0		 xor	 eax, eax
$LN1@get_object:

; 630  : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?get_object_3d_camera_index_from_name@@YGHPAD@Z ENDP	; get_object_3d_camera_index_from_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjid.c
;	COMDAT ?get_object_3d_camoflage_index_from_name@@YGHPAD@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_name$ = 8						; size = 4
?get_object_3d_camoflage_index_from_name@@YGHPAD@Z PROC	; get_object_3d_camoflage_index_from_name, COMDAT

; 591  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 592  : 
; 593  : 	int
; 594  : 		count;
; 595  : 
; 596  : 	for ( count = 0; count < object_3d_number_of_camoflage_set_names; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@get_object
$LN2@get_object:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_object:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_number_of_camoflage_set_names@@3HA ; object_3d_number_of_camoflage_set_names
  00024	7d 25		 jge	 SHORT $LN3@get_object

; 597  : 	{
; 598  : 
; 599  : 		if ( stricmp ( name, object_3d_camoflage_set_names[count] ) == 0 )

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_camoflage_set_names@@3PAPBDA ; object_3d_camoflage_set_names
  0002f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	75 05		 jne	 SHORT $LN5@get_object

; 600  : 		{
; 601  : 
; 602  : 			return ( count );

  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	eb 05		 jmp	 SHORT $LN1@get_object
$LN5@get_object:

; 603  : 		}
; 604  : 	}

  00049	eb c7		 jmp	 SHORT $LN2@get_object
$LN3@get_object:

; 605  : 
; 606  : 	return ( -1 );

  0004b	83 c8 ff	 or	 eax, -1
$LN1@get_object:

; 607  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?get_object_3d_camoflage_index_from_name@@YGHPAD@Z ENDP	; get_object_3d_camoflage_index_from_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjid.c
;	COMDAT ?get_object_3d_sub_index_from_name@@YGHPAD@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_name$ = 8						; size = 4
?get_object_3d_sub_index_from_name@@YGHPAD@Z PROC	; get_object_3d_sub_index_from_name, COMDAT

; 567  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 568  : 
; 569  : 	int
; 570  : 		count;
; 571  : 
; 572  : 	for ( count = 1; count < object_3d_number_of_sub_object_names; count++ )

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  00010	eb 09		 jmp	 SHORT $LN4@get_object
$LN2@get_object:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_object:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_number_of_sub_object_names@@3HA ; object_3d_number_of_sub_object_names
  00024	7d 25		 jge	 SHORT $LN3@get_object

; 573  : 	{
; 574  : 
; 575  : 		if ( stricmp ( name, object_3d_sub_object_names[count] ) == 0 )

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_sub_object_names@@3PAPBDA ; object_3d_sub_object_names
  0002f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	75 05		 jne	 SHORT $LN5@get_object

; 576  : 		{
; 577  : 
; 578  : 			return ( count );

  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	eb 04		 jmp	 SHORT $LN1@get_object
$LN5@get_object:

; 579  : 		}
; 580  : 	}

  00049	eb c7		 jmp	 SHORT $LN2@get_object
$LN3@get_object:

; 581  : 
; 582  : 	return ( 0 );

  0004b	33 c0		 xor	 eax, eax
$LN1@get_object:

; 583  : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?get_object_3d_sub_index_from_name@@YGHPAD@Z ENDP	; get_object_3d_sub_index_from_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjid.c
;	COMDAT ?get_object_3d_index_from_name@@YGHPAD@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_name$ = 8						; size = 4
?get_object_3d_index_from_name@@YGHPAD@Z PROC		; get_object_3d_index_from_name, COMDAT

; 544  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 545  : 
; 546  : 	int
; 547  : 		count;
; 548  : 
; 549  : 	for ( count = 1; count < object_3d_number_of_scene_names; count++ )

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  00010	eb 09		 jmp	 SHORT $LN4@get_object
$LN2@get_object:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_object:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_number_of_scene_names@@3HA ; object_3d_number_of_scene_names
  00024	7d 25		 jge	 SHORT $LN3@get_object

; 550  : 	{
; 551  : 
; 552  : 		if ( stricmp ( name, object_3d_enumeration_names[count] ) == 0 )

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_enumeration_names@@3PAPBDA ; object_3d_enumeration_names
  0002f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	75 05		 jne	 SHORT $LN5@get_object

; 553  : 		{
; 554  : 
; 555  : 			return ( count );

  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	eb 04		 jmp	 SHORT $LN1@get_object
$LN5@get_object:

; 556  : 		}
; 557  : 	}

  00049	eb c7		 jmp	 SHORT $LN2@get_object
$LN3@get_object:

; 558  : 
; 559  : 	return ( 0 );

  0004b	33 c0		 xor	 eax, eax
$LN1@get_object:

; 560  : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?get_object_3d_index_from_name@@YGHPAD@Z ENDP		; get_object_3d_index_from_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjid.c
;	COMDAT ?initialise_3d_objects_info@@YGXPBD@Z
_TEXT	SEGMENT
tv595 = -3900						; size = 4
_new_texture_indices$1 = -3448				; size = 4
_last$2 = -3444						; size = 4
_line$3 = -3440						; size = 1024
_texture_animation$4 = -2416				; size = 12
_file$5 = -2404						; size = 4
_ptr$6 = -2400						; size = 4
_length$7 = -2396					; size = 4
_texture_animation_index$8 = -2392			; size = 4
_fi$9 = -2388						; size = 296
_handle$10 = -2092					; size = 4
_rc$11 = -2088						; size = 4
_number_of_frames$12 = -2084				; size = 4
_temp$13 = -2080					; size = 4
_number_of_frames$14 = -2076				; size = 4
_temp$15 = -2072					; size = 4
_object_invalid_index$16 = -2068			; size = 4
_fn$17 = -2064						; size = 1024
_ptr$ = -1040						; size = 4
_filename$ = -1036					; size = 1024
_fp$ = -12						; size = 4
_count$ = -8						; size = 4
_length$ = -4						; size = 4
_directory$ = 8						; size = 4
?initialise_3d_objects_info@@YGXPBD@Z PROC		; initialise_3d_objects_info, COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 0f 00
	00		 sub	 esp, 3900		; 00000f3cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 116  : 
; 117  : 	int
; 118  : 		length,
; 119  : 		count;
; 120  : 
; 121  : 	FILE
; 122  : 		*fp;
; 123  : 
; 124  : 	char
; 125  : 		filename[1024];
; 126  : 
; 127  : 	char
; 128  : 		*ptr;
; 129  : 
; 130  : 	sprintf ( filename, "%s\\bininfo.bin", directory );

  0000c	8b 45 08	 mov	 eax, DWORD PTR _directory$[ebp]
  0000f	50		 push	 eax
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MBENFDLN@?$CFs?2bininfo?4bin@
  00015	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 _sprintf
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 131  : 
; 132  : 	fp = fopen ( filename, "rb" );

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00029	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 f4	 mov	 DWORD PTR _fp$[ebp], eax

; 133  : 
; 134  : 	// JB 030311 Enable running out of separate directories
; 135  : 	if (!fp)

  0003c	83 7d f4 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00040	75 66		 jne	 SHORT $LN43@initialise

; 136  : 	{
; 137  : 		char fn[1024];
; 138  : 		fn[0] = 0;

  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	6b c8 00	 imul	 ecx, eax, 0
  0004a	c6 84 0d f0 f7
	ff ff 00	 mov	 BYTE PTR _fn$17[ebp+ecx], 0

; 139  : 		strcpy(fn, comanche_hokum_installation_path);

  00052	68 00 00 00 00	 push	 OFFSET ?comanche_hokum_installation_path@@3PADA ; comanche_hokum_installation_path
  00057	8d 85 f0 f7 ff
	ff		 lea	 eax, DWORD PTR _fn$17[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _strcpy
  00063	83 c4 08	 add	 esp, 8

; 140  : 		strcat(fn, "\\cohokum\\");

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_09HGIBBNON@?2cohokum?2@
  0006b	8d 85 f0 f7 ff
	ff		 lea	 eax, DWORD PTR _fn$17[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _strcat
  00077	83 c4 08	 add	 esp, 8

; 141  : 		strcat(fn, filename);

  0007a	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00080	50		 push	 eax
  00081	8d 8d f0 f7 ff
	ff		 lea	 ecx, DWORD PTR _fn$17[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 _strcat
  0008d	83 c4 08	 add	 esp, 8

; 142  : 
; 143  : 		fp = fopen ( fn, "rb" );

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00095	8d 85 f0 f7 ff
	ff		 lea	 eax, DWORD PTR _fn$17[ebp]
  0009b	50		 push	 eax
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  000a2	83 c4 08	 add	 esp, 8
  000a5	89 45 f4	 mov	 DWORD PTR _fp$[ebp], eax
$LN43@initialise:

; 144  : 	}
; 145  : 
; 146  : 	ASSERT ( fp );

  000a8	83 7d f4 00	 cmp	 DWORD PTR _fp$[ebp], 0
  000ac	75 18		 jne	 SHORT $LN44@initialise
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA
  000b3	83 c0 1f	 add	 eax, 31			; 0000001fH
  000b6	50		 push	 eax
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_02GDNLOIIJ@fp@
  000c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN44@initialise:

; 147  : 
; 148  : 	ptr = NULL;

  000c6	c7 85 f0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ptr$[ebp], 0

; 149  : 
; 150  : 	//
; 151  : 	// Read in scene names
; 152  : 	//
; 153  : 
; 154  : 	fread ( &object_3d_number_of_scene_names, sizeof ( int ), 1, fp );

  000d0	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  000d3	50		 push	 eax
  000d4	6a 01		 push	 1
  000d6	6a 04		 push	 4
  000d8	68 00 00 00 00	 push	 OFFSET ?object_3d_number_of_scene_names@@3HA ; object_3d_number_of_scene_names
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000e3	83 c4 10	 add	 esp, 16			; 00000010H

; 155  : 
; 156  : 	ASSERT ( object_3d_number_of_scene_names == OBJECT_3D_OLD_LAST );

  000e6	81 3d 00 00 00
	00 ca 0a 00 00	 cmp	 DWORD PTR ?object_3d_number_of_scene_names@@3HA, 2762 ; object_3d_number_of_scene_names, 00000acaH
  000f0	74 18		 je	 SHORT $LN45@initialise
  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA
  000f7	83 c0 29	 add	 eax, 41			; 00000029H
  000fa	50		 push	 eax
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@COCOLNKH@object_3d_number_of_scene_names@
  00105	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN45@initialise:

; 157  : 
; 158  : 	if ( object_3d_number_of_scene_names )

  0010a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?object_3d_number_of_scene_names@@3HA, 0 ; object_3d_number_of_scene_names
  00111	0f 84 17 02 00
	00		 je	 $LN46@initialise

; 159  : 	{
; 160  : 		const char
; 161  : 			* const object_invalid_index = "OBJECT_INVALID_INDEX";

  00117	c7 85 ec f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _object_invalid_index$16[ebp], OFFSET ??_C@_0BF@GCNOBEBF@OBJECT_INVALID_INDEX@

; 162  : 
; 163  : 		fread ( &length, sizeof ( int ), 1, fp );

  00121	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00124	50		 push	 eax
  00125	6a 01		 push	 1
  00127	6a 04		 push	 4
  00129	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  0012c	51		 push	 ecx
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00133	83 c4 10	 add	 esp, 16			; 00000010H

; 164  : 
; 165  : 		length += strlen ( object_invalid_index ) + 1;

  00136	8b 85 ec f7 ff
	ff		 mov	 eax, DWORD PTR _object_invalid_index$16[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 _strlen
  00142	83 c4 04	 add	 esp, 4
  00145	8b 4d fc	 mov	 ecx, DWORD PTR _length$[ebp]
  00148	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0014c	89 55 fc	 mov	 DWORD PTR _length$[ebp], edx

; 166  : 
; 167  : 		ptr = ( char * ) safe_malloc ( length * sizeof ( char ) );

  0014f	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00158	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 168  : 
; 169  : 		object_3d_information_database = ( object_3d_information * ) safe_malloc ( OBJECT_3D_LAST * sizeof ( object_3d_information ) );

  0015e	68 20 57 00 00	 push	 22304			; 00005720H
  00163	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00168	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A, eax ; object_3d_information_database

; 170  : 		object_3d_enumeration_names = ( const char * * ) safe_malloc ( OBJECT_3D_LAST * sizeof ( char * ) );

  0016d	68 90 2b 00 00	 push	 11152			; 00002b90H
  00172	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00177	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_enumeration_names@@3PAPBDA, eax ; object_3d_enumeration_names

; 171  : 
; 172  : 		object_3d_enumeration_names[0] = ptr;

  0017c	b8 04 00 00 00	 mov	 eax, 4
  00181	6b c8 00	 imul	 ecx, eax, 0
  00184	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?object_3d_enumeration_names@@3PAPBDA ; object_3d_enumeration_names
  0018a	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  00190	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 173  : 		object_3d_information_database[0].name = ptr;

  00193	b8 08 00 00 00	 mov	 eax, 8
  00198	6b c8 00	 imul	 ecx, eax, 0
  0019b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A ; object_3d_information_database
  001a1	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  001a7	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 174  : 
; 175  : 		strcpy ( ptr, object_invalid_index );

  001aa	8b 85 ec f7 ff
	ff		 mov	 eax, DWORD PTR _object_invalid_index$16[ebp]
  001b0	50		 push	 eax
  001b1	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$[ebp]
  001b7	51		 push	 ecx
  001b8	e8 00 00 00 00	 call	 _strcpy
  001bd	83 c4 08	 add	 esp, 8

; 176  : 		ptr += strlen ( ptr ) + 1;

  001c0	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 _strlen
  001cc	83 c4 04	 add	 esp, 4
  001cf	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$[ebp]
  001d5	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  001d9	89 95 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], edx

; 177  : 
; 178  : 		for ( count = 1; count < object_3d_number_of_scene_names; count++ )

  001df	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  001e6	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  001e8	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  001eb	83 c0 01	 add	 eax, 1
  001ee	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  001f1	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  001f4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_number_of_scene_names@@3HA ; object_3d_number_of_scene_names
  001fa	0f 8d c1 00 00
	00		 jge	 $LN3@initialise

; 179  : 		{
; 180  : 
; 181  : 			fread ( &length, sizeof ( int ), 1, fp );

  00200	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00203	50		 push	 eax
  00204	6a 01		 push	 1
  00206	6a 04		 push	 4
  00208	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  0020b	51		 push	 ecx
  0020c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00212	83 c4 10	 add	 esp, 16			; 00000010H

; 182  : 
; 183  : 			object_3d_enumeration_names[count] = ptr;

  00215	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00218	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_enumeration_names@@3PAPBDA ; object_3d_enumeration_names
  0021e	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  00224	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 184  : 
; 185  : 			object_3d_information_database[count].name = ptr;

  00227	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0022a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A ; object_3d_information_database
  00230	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  00236	89 14 c1	 mov	 DWORD PTR [ecx+eax*8], edx

; 186  : 
; 187  : 			fread ( ptr, length, 1, fp );

  00239	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  0023c	50		 push	 eax
  0023d	6a 01		 push	 1
  0023f	8b 4d fc	 mov	 ecx, DWORD PTR _length$[ebp]
  00242	51		 push	 ecx
  00243	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  00249	52		 push	 edx
  0024a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00250	83 c4 10	 add	 esp, 16			; 00000010H

; 188  : 
; 189  : 			ASSERT ( !strcmp ( object_3d_enumeration_names[count], object_3d_scene_names[count] ) );

  00253	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00256	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?object_3d_scene_names@@3PAPBDA[eax*4]
  0025d	51		 push	 ecx
  0025e	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  00261	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_enumeration_names@@3PAPBDA ; object_3d_enumeration_names
  00266	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00269	51		 push	 ecx
  0026a	e8 00 00 00 00	 call	 _strcmp
  0026f	83 c4 08	 add	 esp, 8
  00272	85 c0		 test	 eax, eax
  00274	74 18		 je	 SHORT $LN47@initialise
  00276	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA
  0027b	83 c0 4a	 add	 eax, 74			; 0000004aH
  0027e	50		 push	 eax
  0027f	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00284	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PEBNGMMP@?$CBstrcmp?5?$CI?5object_3d_enumeration@
  00289	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN47@initialise:

; 190  : 
; 191  : 			fread ( &object_3d_information_database[count].maximum_distance, sizeof ( float ), 1, fp );

  0028e	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00291	50		 push	 eax
  00292	6a 01		 push	 1
  00294	6a 04		 push	 4
  00296	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00299	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A ; object_3d_information_database
  0029f	8d 44 ca 04	 lea	 eax, DWORD PTR [edx+ecx*8+4]
  002a3	50		 push	 eax
  002a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  002aa	83 c4 10	 add	 esp, 16			; 00000010H

; 192  : 
; 193  : 			ptr += length;

  002ad	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  002b3	03 45 fc	 add	 eax, DWORD PTR _length$[ebp]
  002b6	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 194  : 		}

  002bc	e9 27 ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 195  : 
; 196  : 		for ( ; count < OBJECT_3D_LAST; count++ )

  002c1	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  002c3	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002c6	83 c0 01	 add	 eax, 1
  002c9	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN7@initialise:
  002cc	81 7d f8 e4 0a
	00 00		 cmp	 DWORD PTR _count$[ebp], 2788 ; 00000ae4H
  002d3	7d 45		 jge	 SHORT $LN6@initialise

; 197  : 		{
; 198  : 			object_3d_enumeration_names[count] = object_3d_scene_names[count];

  002d5	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_enumeration_names@@3PAPBDA ; object_3d_enumeration_names
  002de	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  002e1	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR ?object_3d_scene_names@@3PAPBDA[edx*4]
  002e8	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 199  : 			object_3d_information_database[count].name = object_3d_scene_names[count];

  002eb	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A ; object_3d_information_database
  002f4	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  002f7	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR ?object_3d_scene_names@@3PAPBDA[edx*4]
  002fe	89 14 c1	 mov	 DWORD PTR [ecx+eax*8], edx

; 200  : 			object_3d_information_database[count].maximum_distance = 1000.0;

  00301	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00304	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A ; object_3d_information_database
  0030a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@447a0000
  00312	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [ecx+eax*8+4], xmm0

; 201  : 		}

  00318	eb a9		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 202  : 
; 203  : 		object_3d_number_of_scene_names = OBJECT_3D_LAST;

  0031a	c7 05 00 00 00
	00 e4 0a 00 00	 mov	 DWORD PTR ?object_3d_number_of_scene_names@@3HA, 2788 ; object_3d_number_of_scene_names, 00000ae4H

; 204  : 
; 205  : 		ptr = NULL;

  00324	c7 85 f0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ptr$[ebp], 0
$LN46@initialise:

; 206  : 	}
; 207  : 
; 208  : 	//
; 209  : 	// Read in sub object names
; 210  : 	//
; 211  : 
; 212  : 	fread ( &object_3d_number_of_sub_object_names, sizeof ( int ), 1, fp );

  0032e	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00331	50		 push	 eax
  00332	6a 01		 push	 1
  00334	6a 04		 push	 4
  00336	68 00 00 00 00	 push	 OFFSET ?object_3d_number_of_sub_object_names@@3HA ; object_3d_number_of_sub_object_names
  0033b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00341	83 c4 10	 add	 esp, 16			; 00000010H

; 213  : 
; 214  : 	ASSERT ( object_3d_number_of_sub_object_names == OBJECT_3D_SUB_OBJECT_OLD_LAST );

  00344	81 3d 00 00 00
	00 1d 01 00 00	 cmp	 DWORD PTR ?object_3d_number_of_sub_object_names@@3HA, 285 ; object_3d_number_of_sub_object_names, 0000011dH
  0034e	74 18		 je	 SHORT $LN48@initialise
  00350	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA
  00355	83 c0 63	 add	 eax, 99			; 00000063H
  00358	50		 push	 eax
  00359	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  0035e	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@POKCHCBN@object_3d_number_of_sub_object_@
  00363	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN48@initialise:

; 215  : 
; 216  : 	if ( object_3d_number_of_sub_object_names )

  00368	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?object_3d_number_of_sub_object_names@@3HA, 0 ; object_3d_number_of_sub_object_names
  0036f	0f 84 83 01 00
	00		 je	 $LN49@initialise

; 217  : 	{
; 218  : 
; 219  : 		object_3d_sub_object_names = ( const char * * ) safe_malloc ( OBJECT_3D_SUB_OBJECT_LAST * sizeof ( char * ) );

  00375	68 2c 07 00 00	 push	 1836			; 0000072cH
  0037a	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0037f	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_sub_object_names@@3PAPBDA, eax ; object_3d_sub_object_names

; 220  : 
; 221  : 		fread ( &length, sizeof ( int ), 1, fp );

  00384	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00387	50		 push	 eax
  00388	6a 01		 push	 1
  0038a	6a 04		 push	 4
  0038c	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  0038f	51		 push	 ecx
  00390	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00396	83 c4 10	 add	 esp, 16			; 00000010H

; 222  : 
; 223  : 		length += strlen ( "INVALID_SUB_OBJECT_INDEX" ) + 1;

  00399	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BCHLGFNJ@INVALID_SUB_OBJECT_INDEX@
  0039e	e8 00 00 00 00	 call	 _strlen
  003a3	83 c4 04	 add	 esp, 4
  003a6	8b 4d fc	 mov	 ecx, DWORD PTR _length$[ebp]
  003a9	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  003ad	89 55 fc	 mov	 DWORD PTR _length$[ebp], edx

; 224  : 
; 225  : 		ptr = ( char * ) safe_malloc ( length * sizeof ( char ) );

  003b0	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  003b9	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 226  : 
; 227  : 		object_3d_sub_object_names[0] = ptr;

  003bf	b8 04 00 00 00	 mov	 eax, 4
  003c4	6b c8 00	 imul	 ecx, eax, 0
  003c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?object_3d_sub_object_names@@3PAPBDA ; object_3d_sub_object_names
  003cd	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  003d3	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 228  : 
; 229  : 		sprintf ( ptr, "INVALID_SUB_OBJECT_INDEX" );

  003d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BCHLGFNJ@INVALID_SUB_OBJECT_INDEX@
  003db	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 _sprintf
  003e7	83 c4 08	 add	 esp, 8

; 230  : 
; 231  : 		ptr += strlen ( "INVALID_SUB_OBJECT_INDEX" ) + 1;

  003ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BCHLGFNJ@INVALID_SUB_OBJECT_INDEX@
  003ef	e8 00 00 00 00	 call	 _strlen
  003f4	83 c4 04	 add	 esp, 4
  003f7	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$[ebp]
  003fd	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00401	89 95 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], edx

; 232  : 
; 233  : 		for ( count = 1; count < object_3d_number_of_sub_object_names; count++ )

  00407	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  0040e	eb 09		 jmp	 SHORT $LN10@initialise
$LN8@initialise:
  00410	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00413	83 c0 01	 add	 eax, 1
  00416	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN10@initialise:
  00419	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0041c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_number_of_sub_object_names@@3HA ; object_3d_number_of_sub_object_names
  00422	0f 8d 90 00 00
	00		 jge	 $LN9@initialise

; 234  : 		{
; 235  : 
; 236  : 			fread ( &length, sizeof ( int ), 1, fp );

  00428	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  0042b	50		 push	 eax
  0042c	6a 01		 push	 1
  0042e	6a 04		 push	 4
  00430	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  00433	51		 push	 ecx
  00434	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0043a	83 c4 10	 add	 esp, 16			; 00000010H

; 237  : 
; 238  : 			object_3d_sub_object_names[count] = ptr;

  0043d	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00440	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_sub_object_names@@3PAPBDA ; object_3d_sub_object_names
  00446	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  0044c	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 239  : 
; 240  : 			fread ( ptr, length, 1, fp );

  0044f	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00452	50		 push	 eax
  00453	6a 01		 push	 1
  00455	8b 4d fc	 mov	 ecx, DWORD PTR _length$[ebp]
  00458	51		 push	 ecx
  00459	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  0045f	52		 push	 edx
  00460	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00466	83 c4 10	 add	 esp, 16			; 00000010H

; 241  : 
; 242  : 			ASSERT ( !strcmp ( object_3d_sub_object_names[count], object_3d_subobject_names[count] ) );

  00469	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0046c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?object_3d_subobject_names@@3PAPBDA[eax*4]
  00473	51		 push	 ecx
  00474	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  00477	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_sub_object_names@@3PAPBDA ; object_3d_sub_object_names
  0047c	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0047f	51		 push	 ecx
  00480	e8 00 00 00 00	 call	 _strcmp
  00485	83 c4 08	 add	 esp, 8
  00488	85 c0		 test	 eax, eax
  0048a	74 18		 je	 SHORT $LN50@initialise
  0048c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA
  00491	83 c0 7f	 add	 eax, 127		; 0000007fH
  00494	50		 push	 eax
  00495	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  0049a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@OBBBPPNE@?$CBstrcmp?5?$CI?5object_3d_sub_object_@
  0049f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN50@initialise:

; 243  : 
; 244  : 			ptr += length;

  004a4	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  004aa	03 45 fc	 add	 eax, DWORD PTR _length$[ebp]
  004ad	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 245  : 		}

  004b3	e9 58 ff ff ff	 jmp	 $LN8@initialise
$LN9@initialise:

; 246  : 
; 247  : 		for ( ; count < OBJECT_3D_SUB_OBJECT_LAST; count++ )

  004b8	eb 09		 jmp	 SHORT $LN13@initialise
$LN11@initialise:
  004ba	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  004bd	83 c0 01	 add	 eax, 1
  004c0	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN13@initialise:
  004c3	81 7d f8 cb 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 459 ; 000001cbH
  004ca	7d 18		 jge	 SHORT $LN12@initialise

; 248  : 		{
; 249  : 			object_3d_sub_object_names[count] = object_3d_subobject_names[count];

  004cc	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  004cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_sub_object_names@@3PAPBDA ; object_3d_sub_object_names
  004d5	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  004d8	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR ?object_3d_subobject_names@@3PAPBDA[edx*4]
  004df	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 250  : 		}

  004e2	eb d6		 jmp	 SHORT $LN11@initialise
$LN12@initialise:

; 251  : 
; 252  : 		object_3d_number_of_sub_object_names = OBJECT_3D_SUB_OBJECT_LAST;

  004e4	c7 05 00 00 00
	00 cb 01 00 00	 mov	 DWORD PTR ?object_3d_number_of_sub_object_names@@3HA, 459 ; object_3d_number_of_sub_object_names, 000001cbH

; 253  : 
; 254  : 		ptr = NULL;

  004ee	c7 85 f0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ptr$[ebp], 0
$LN49@initialise:

; 255  : 	}
; 256  : 
; 257  : 	//
; 258  : 	// Read in camera names
; 259  : 	//
; 260  : 
; 261  : 	fread ( &object_3d_number_of_camera_names, sizeof ( int ), 1, fp );

  004f8	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  004fb	50		 push	 eax
  004fc	6a 01		 push	 1
  004fe	6a 04		 push	 4
  00500	68 00 00 00 00	 push	 OFFSET ?object_3d_number_of_camera_names@@3HA ; object_3d_number_of_camera_names
  00505	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0050b	83 c4 10	 add	 esp, 16			; 00000010H

; 262  : 
; 263  : 	if ( object_3d_number_of_camera_names )

  0050e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?object_3d_number_of_camera_names@@3HA, 0 ; object_3d_number_of_camera_names
  00515	0f 84 0f 01 00
	00		 je	 $LN51@initialise

; 264  : 	{
; 265  : 
; 266  : 		object_3d_camera_names = ( const char * * ) safe_malloc ( object_3d_number_of_camera_names * sizeof ( char * ) );

  0051b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_number_of_camera_names@@3HA ; object_3d_number_of_camera_names
  00520	c1 e0 02	 shl	 eax, 2
  00523	50		 push	 eax
  00524	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00529	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_camera_names@@3PAPBDA, eax ; object_3d_camera_names

; 267  : 
; 268  : 		fread ( &length, sizeof ( int ), 1, fp );

  0052e	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00531	50		 push	 eax
  00532	6a 01		 push	 1
  00534	6a 04		 push	 4
  00536	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  00539	51		 push	 ecx
  0053a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00540	83 c4 10	 add	 esp, 16			; 00000010H

; 269  : 
; 270  : 		length += strlen ( "INVALID_CAMERA_INDEX" ) + 1;

  00543	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DNCJNOOC@INVALID_CAMERA_INDEX@
  00548	e8 00 00 00 00	 call	 _strlen
  0054d	83 c4 04	 add	 esp, 4
  00550	8b 4d fc	 mov	 ecx, DWORD PTR _length$[ebp]
  00553	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00557	89 55 fc	 mov	 DWORD PTR _length$[ebp], edx

; 271  : 
; 272  : 		ptr = ( char * ) safe_malloc ( length * sizeof ( char ) );

  0055a	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00563	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 273  : 
; 274  : 		object_3d_camera_names[0] = ptr;

  00569	b8 04 00 00 00	 mov	 eax, 4
  0056e	6b c8 00	 imul	 ecx, eax, 0
  00571	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?object_3d_camera_names@@3PAPBDA ; object_3d_camera_names
  00577	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  0057d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 275  : 
; 276  : 		sprintf ( ptr, "INVALID_CAMERA_INDEX" );

  00580	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DNCJNOOC@INVALID_CAMERA_INDEX@
  00585	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  0058b	50		 push	 eax
  0058c	e8 00 00 00 00	 call	 _sprintf
  00591	83 c4 08	 add	 esp, 8

; 277  : 
; 278  : 		ptr += strlen ( "INVALID_CAMERA_INDEX" ) + 1;

  00594	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DNCJNOOC@INVALID_CAMERA_INDEX@
  00599	e8 00 00 00 00	 call	 _strlen
  0059e	83 c4 04	 add	 esp, 4
  005a1	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$[ebp]
  005a7	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  005ab	89 95 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], edx

; 279  : 
; 280  : 		for ( count = 1; count < object_3d_number_of_camera_names; count++ )

  005b1	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  005b8	eb 09		 jmp	 SHORT $LN16@initialise
$LN14@initialise:
  005ba	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  005bd	83 c0 01	 add	 eax, 1
  005c0	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN16@initialise:
  005c3	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  005c6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_number_of_camera_names@@3HA ; object_3d_number_of_camera_names
  005cc	7d 52		 jge	 SHORT $LN15@initialise

; 281  : 		{
; 282  : 
; 283  : 			fread ( &length, sizeof ( int ), 1, fp );

  005ce	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  005d1	50		 push	 eax
  005d2	6a 01		 push	 1
  005d4	6a 04		 push	 4
  005d6	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  005d9	51		 push	 ecx
  005da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  005e0	83 c4 10	 add	 esp, 16			; 00000010H

; 284  : 
; 285  : 			object_3d_camera_names[count] = ptr;

  005e3	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  005e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_camera_names@@3PAPBDA ; object_3d_camera_names
  005ec	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  005f2	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 286  : 
; 287  : 			fread ( ptr, length, 1, fp );

  005f5	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  005f8	50		 push	 eax
  005f9	6a 01		 push	 1
  005fb	8b 4d fc	 mov	 ecx, DWORD PTR _length$[ebp]
  005fe	51		 push	 ecx
  005ff	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  00605	52		 push	 edx
  00606	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0060c	83 c4 10	 add	 esp, 16			; 00000010H

; 288  : 
; 289  : 			ptr += length;

  0060f	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  00615	03 45 fc	 add	 eax, DWORD PTR _length$[ebp]
  00618	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 290  : 		}

  0061e	eb 9a		 jmp	 SHORT $LN14@initialise
$LN15@initialise:

; 291  : 
; 292  : 		ptr = NULL;

  00620	c7 85 f0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ptr$[ebp], 0
$LN51@initialise:

; 293  : 	}
; 294  : 
; 295  : 	//
; 296  : 	// Read in camoflage texture sets
; 297  : 	//
; 298  : 
; 299  : 	fread ( &object_3d_number_of_camoflage_set_names, sizeof ( int ), 1, fp );

  0062a	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  0062d	50		 push	 eax
  0062e	6a 01		 push	 1
  00630	6a 04		 push	 4
  00632	68 00 00 00 00	 push	 OFFSET ?object_3d_number_of_camoflage_set_names@@3HA ; object_3d_number_of_camoflage_set_names
  00637	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0063d	83 c4 10	 add	 esp, 16			; 00000010H

; 300  : 
; 301  : 	if ( object_3d_number_of_camoflage_set_names )

  00640	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?object_3d_number_of_camoflage_set_names@@3HA, 0 ; object_3d_number_of_camoflage_set_names
  00647	0f 84 b0 00 00
	00		 je	 $LN52@initialise

; 302  : 	{
; 303  : 
; 304  : 		object_3d_camoflage_set_names = ( const char * * ) safe_malloc ( object_3d_number_of_camoflage_set_names * sizeof ( char * ) );

  0064d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_number_of_camoflage_set_names@@3HA ; object_3d_number_of_camoflage_set_names
  00652	c1 e0 02	 shl	 eax, 2
  00655	50		 push	 eax
  00656	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0065b	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_camoflage_set_names@@3PAPBDA, eax ; object_3d_camoflage_set_names

; 305  : 
; 306  : 		fread ( &length, sizeof ( int ), 1, fp );

  00660	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00663	50		 push	 eax
  00664	6a 01		 push	 1
  00666	6a 04		 push	 4
  00668	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  0066b	51		 push	 ecx
  0066c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00672	83 c4 10	 add	 esp, 16			; 00000010H

; 307  : 
; 308  : 		ptr = ( char * ) safe_malloc ( length * sizeof ( char ) );

  00675	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  00678	50		 push	 eax
  00679	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0067e	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 309  : 
; 310  : 		for ( count = 0; count < object_3d_number_of_camoflage_set_names; count++ )

  00684	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0068b	eb 09		 jmp	 SHORT $LN19@initialise
$LN17@initialise:
  0068d	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00690	83 c0 01	 add	 eax, 1
  00693	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN19@initialise:
  00696	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00699	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_number_of_camoflage_set_names@@3HA ; object_3d_number_of_camoflage_set_names
  0069f	7d 52		 jge	 SHORT $LN18@initialise

; 311  : 		{
; 312  : 
; 313  : 			fread ( &length, sizeof ( int ), 1, fp );

  006a1	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  006a4	50		 push	 eax
  006a5	6a 01		 push	 1
  006a7	6a 04		 push	 4
  006a9	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  006ac	51		 push	 ecx
  006ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  006b3	83 c4 10	 add	 esp, 16			; 00000010H

; 314  : 
; 315  : 			object_3d_camoflage_set_names[count] = ptr;

  006b6	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  006b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_camoflage_set_names@@3PAPBDA ; object_3d_camoflage_set_names
  006bf	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  006c5	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 316  : 
; 317  : 			fread ( ptr, length, 1, fp );

  006c8	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  006cb	50		 push	 eax
  006cc	6a 01		 push	 1
  006ce	8b 4d fc	 mov	 ecx, DWORD PTR _length$[ebp]
  006d1	51		 push	 ecx
  006d2	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  006d8	52		 push	 edx
  006d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  006df	83 c4 10	 add	 esp, 16			; 00000010H

; 318  : 
; 319  : 			ptr += length;

  006e2	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  006e8	03 45 fc	 add	 eax, DWORD PTR _length$[ebp]
  006eb	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 320  : 		}

  006f1	eb 9a		 jmp	 SHORT $LN17@initialise
$LN18@initialise:

; 321  : 
; 322  : 		ptr = NULL;

  006f3	c7 85 f0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ptr$[ebp], 0
$LN52@initialise:

; 323  : 	}
; 324  : 
; 325  : 	//
; 326  : 	// Read in the texture animation names
; 327  : 	//
; 328  : 
; 329  : 	fread ( &number_of_texture_animations, sizeof ( int ), 1, fp );

  006fd	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00700	50		 push	 eax
  00701	6a 01		 push	 1
  00703	6a 04		 push	 4
  00705	68 00 00 00 00	 push	 OFFSET ?number_of_texture_animations@@3HA ; number_of_texture_animations
  0070a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00710	83 c4 10	 add	 esp, 16			; 00000010H

; 330  : 
; 331  : 	ASSERT ( number_of_texture_animations == TEXTURE_ANIMATION_INDEX_OLD_LAST );

  00713	83 3d 00 00 00
	00 72		 cmp	 DWORD PTR ?number_of_texture_animations@@3HA, 114 ; number_of_texture_animations, 00000072H
  0071a	74 1a		 je	 SHORT $LN53@initialise
  0071c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA
  00721	05 d8 00 00 00	 add	 eax, 216		; 000000d8H
  00726	50		 push	 eax
  00727	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  0072c	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@DCKFDKLI@number_of_texture_animations?5?$DN?$DN@
  00731	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN53@initialise:

; 332  : 
; 333  : 	if ( number_of_texture_animations )

  00736	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?number_of_texture_animations@@3HA, 0 ; number_of_texture_animations
  0073d	0f 84 af 02 00
	00		 je	 $LN54@initialise

; 334  : 	{
; 335  : 
; 336  : 		texture_animations = ( texture_animation_information * ) safe_malloc ( sizeof ( texture_animation_information ) * TEXTURE_ANIMATION_INDEX_LAST );

  00743	68 d8 06 00 00	 push	 1752			; 000006d8H
  00748	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0074d	a3 00 00 00 00	 mov	 DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A, eax ; texture_animations

; 337  : 
; 338  : 		texture_animation_names = ( const char * * ) safe_malloc ( sizeof ( char * ) * TEXTURE_ANIMATION_INDEX_LAST );

  00752	68 48 02 00 00	 push	 584			; 00000248H
  00757	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0075c	a3 00 00 00 00	 mov	 DWORD PTR ?texture_animation_names@@3PAPBDA, eax ; texture_animation_names

; 339  : 
; 340  : 		fread ( &length, sizeof ( int ), 1, fp );

  00761	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00764	50		 push	 eax
  00765	6a 01		 push	 1
  00767	6a 04		 push	 4
  00769	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  0076c	51		 push	 ecx
  0076d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00773	83 c4 10	 add	 esp, 16			; 00000010H

; 341  : 
; 342  : 		ptr = ( char * ) safe_malloc ( length * sizeof ( char ) );

  00776	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  00779	50		 push	 eax
  0077a	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0077f	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 343  : 
; 344  : 		for ( count = 0; count < number_of_texture_animations; count++ )

  00785	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0078c	eb 09		 jmp	 SHORT $LN22@initialise
$LN20@initialise:
  0078e	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00791	83 c0 01	 add	 eax, 1
  00794	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN22@initialise:
  00797	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0079a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_texture_animations@@3HA ; number_of_texture_animations
  007a0	0f 8d 40 01 00
	00		 jge	 $LN21@initialise

; 345  : 		{
; 346  : 
; 347  : 			int
; 348  : 				temp,
; 349  : 				number_of_frames;
; 350  : 
; 351  : 			texture_animation_names[count] = ptr;

  007a6	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  007a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animation_names@@3PAPBDA ; texture_animation_names
  007af	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  007b5	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 352  : 
; 353  : 			fread ( &length, sizeof ( int ), 1, fp );

  007b8	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  007bb	50		 push	 eax
  007bc	6a 01		 push	 1
  007be	6a 04		 push	 4
  007c0	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  007c3	51		 push	 ecx
  007c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  007ca	83 c4 10	 add	 esp, 16			; 00000010H

; 354  : 
; 355  : 			fread ( ptr, length, 1, fp );

  007cd	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  007d0	50		 push	 eax
  007d1	6a 01		 push	 1
  007d3	8b 4d fc	 mov	 ecx, DWORD PTR _length$[ebp]
  007d6	51		 push	 ecx
  007d7	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  007dd	52		 push	 edx
  007de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  007e4	83 c4 10	 add	 esp, 16			; 00000010H

; 356  : 
; 357  : 			ASSERT ( !strcmp ( texture_animation_names[count], texture_animation_names_[count] ) );

  007e7	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  007ea	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?texture_animation_names_@@3PAPBDA[eax*4]
  007f1	51		 push	 ecx
  007f2	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  007f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animation_names@@3PAPBDA ; texture_animation_names
  007fa	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  007fd	51		 push	 ecx
  007fe	e8 00 00 00 00	 call	 _strcmp
  00803	83 c4 08	 add	 esp, 8
  00806	85 c0		 test	 eax, eax
  00808	74 1a		 je	 SHORT $LN55@initialise
  0080a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA
  0080f	05 f2 00 00 00	 add	 eax, 242		; 000000f2H
  00814	50		 push	 eax
  00815	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  0081a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@HAGPLEGO@?$CBstrcmp?5?$CI?5texture_animation_nam@
  0081f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN55@initialise:

; 358  : 
; 359  : 			ptr += length;

  00824	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  0082a	03 45 fc	 add	 eax, DWORD PTR _length$[ebp]
  0082d	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 360  : 
; 361  : 			fread ( &number_of_frames, sizeof ( int ), 1, fp );

  00833	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00836	50		 push	 eax
  00837	6a 01		 push	 1
  00839	6a 04		 push	 4
  0083b	8d 8d e4 f7 ff
	ff		 lea	 ecx, DWORD PTR _number_of_frames$14[ebp]
  00841	51		 push	 ecx
  00842	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00848	83 c4 10	 add	 esp, 16			; 00000010H

; 362  : 
; 363  : 			texture_animations[count].number_of_frames = number_of_frames;

  0084b	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0084f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00855	8b 95 e4 f7 ff
	ff		 mov	 edx, DWORD PTR _number_of_frames$14[ebp]
  0085b	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 364  : 			texture_animations[count].current_frame = 0;

  0085e	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00862	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00868	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0

; 365  : 			texture_animations[count].texture_indices = ( int * ) safe_malloc ( sizeof ( int ) * number_of_frames );

  00870	8b 85 e4 f7 ff
	ff		 mov	 eax, DWORD PTR _number_of_frames$14[ebp]
  00876	c1 e0 02	 shl	 eax, 2
  00879	50		 push	 eax
  0087a	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0087f	6b 4d f8 0c	 imul	 ecx, DWORD PTR _count$[ebp], 12
  00883	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00889	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 366  : 
; 367  : 			for ( temp = 0; temp < number_of_frames; temp++ )

  0088d	c7 85 e8 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _temp$15[ebp], 0
  00897	eb 0f		 jmp	 SHORT $LN25@initialise
$LN23@initialise:
  00899	8b 85 e8 f7 ff
	ff		 mov	 eax, DWORD PTR _temp$15[ebp]
  0089f	83 c0 01	 add	 eax, 1
  008a2	89 85 e8 f7 ff
	ff		 mov	 DWORD PTR _temp$15[ebp], eax
$LN25@initialise:
  008a8	8b 85 e8 f7 ff
	ff		 mov	 eax, DWORD PTR _temp$15[ebp]
  008ae	3b 85 e4 f7 ff
	ff		 cmp	 eax, DWORD PTR _number_of_frames$14[ebp]
  008b4	7d 2b		 jge	 SHORT $LN24@initialise

; 368  : 			{
; 369  : 
; 370  : 				fread ( &texture_animations[count].texture_indices[temp], sizeof ( int ), 1, fp );

  008b6	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  008b9	50		 push	 eax
  008ba	6a 01		 push	 1
  008bc	6a 04		 push	 4
  008be	6b 4d f8 0c	 imul	 ecx, DWORD PTR _count$[ebp], 12
  008c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  008c8	8b 44 0a 08	 mov	 eax, DWORD PTR [edx+ecx+8]
  008cc	8b 8d e8 f7 ff
	ff		 mov	 ecx, DWORD PTR _temp$15[ebp]
  008d2	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  008d5	52		 push	 edx
  008d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  008dc	83 c4 10	 add	 esp, 16			; 00000010H

; 371  : 			}

  008df	eb b8		 jmp	 SHORT $LN23@initialise
$LN24@initialise:

; 372  : 		}

  008e1	e9 a8 fe ff ff	 jmp	 $LN20@initialise
$LN21@initialise:

; 373  : 
; 374  : 		for ( ; count < TEXTURE_ANIMATION_INDEX_KNOWN_LAST; count++ )

  008e6	eb 09		 jmp	 SHORT $LN28@initialise
$LN26@initialise:
  008e8	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  008eb	83 c0 01	 add	 eax, 1
  008ee	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN28@initialise:
  008f1	83 7d f8 73	 cmp	 DWORD PTR _count$[ebp], 115 ; 00000073H
  008f5	0f 8d 92 00 00
	00		 jge	 $LN27@initialise

; 375  : 		{
; 376  : 			length = strlen ( texture_animation_names_[count] ) + 1;

  008fb	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  008fe	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?texture_animation_names_@@3PAPBDA[eax*4]
  00905	51		 push	 ecx
  00906	e8 00 00 00 00	 call	 _strlen
  0090b	83 c4 04	 add	 esp, 4
  0090e	83 c0 01	 add	 eax, 1
  00911	89 45 fc	 mov	 DWORD PTR _length$[ebp], eax

; 377  : 
; 378  : 			ptr = ( char * ) safe_malloc ( length * sizeof ( char ) );

  00914	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  00917	50		 push	 eax
  00918	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0091d	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 379  : 
; 380  : 			memcpy ( ptr, texture_animation_names_[count], length );

  00923	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  00926	50		 push	 eax
  00927	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  0092a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?texture_animation_names_@@3PAPBDA[ecx*4]
  00931	52		 push	 edx
  00932	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  00938	50		 push	 eax
  00939	e8 00 00 00 00	 call	 _memcpy
  0093e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 381  : 
; 382  : 			texture_animation_names[count] = ptr;

  00941	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00944	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animation_names@@3PAPBDA ; texture_animation_names
  0094a	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  00950	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 383  : 
; 384  : 			texture_animations[count].number_of_frames = 0;

  00953	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00957	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0095d	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 385  : 			texture_animations[count].current_frame = 0;

  00964	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00968	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0096e	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0

; 386  : 			texture_animations[count].texture_indices = NULL;

  00976	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0097a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00980	c7 44 01 08 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+8], 0

; 387  : 		}

  00988	e9 5b ff ff ff	 jmp	 $LN26@initialise
$LN27@initialise:

; 388  : 
; 389  : 		for ( ; count < TEXTURE_ANIMATION_INDEX_LAST; count++ )

  0098d	eb 09		 jmp	 SHORT $LN31@initialise
$LN29@initialise:
  0098f	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00992	83 c0 01	 add	 eax, 1
  00995	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN31@initialise:
  00998	81 7d f8 92 00
	00 00		 cmp	 DWORD PTR _count$[ebp], 146 ; 00000092H
  0099f	7d 47		 jge	 SHORT $LN30@initialise

; 390  : 		{
; 391  : 			texture_animation_names[count] = NULL;

  009a1	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  009a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animation_names@@3PAPBDA ; texture_animation_names
  009aa	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0

; 392  : 
; 393  : 			texture_animations[count].number_of_frames = 0;

  009b1	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  009b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  009bb	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 394  : 			texture_animations[count].current_frame = 0;

  009c2	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  009c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  009cc	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0

; 395  : 			texture_animations[count].texture_indices = NULL;

  009d4	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  009d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  009de	c7 44 01 08 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+8], 0

; 396  : 		}

  009e6	eb a7		 jmp	 SHORT $LN29@initialise
$LN30@initialise:

; 397  : 
; 398  : 		ptr = NULL;

  009e8	c7 85 f0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ptr$[ebp], 0
$LN54@initialise:

; 399  : 	}
; 400  : 
; 401  : 	number_of_texture_animations = TEXTURE_ANIMATION_INDEX_KNOWN_LAST;

  009f2	c7 05 00 00 00
	00 73 00 00 00	 mov	 DWORD PTR ?number_of_texture_animations@@3HA, 115 ; number_of_texture_animations, 00000073H

; 402  : 
; 403  : 	//
; 404  : 	// Read in the displacement animations
; 405  : 	//
; 406  : 
; 407  : 	fread ( &number_of_displacement_animations, sizeof ( int ), 1, fp );

  009fc	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  009ff	50		 push	 eax
  00a00	6a 01		 push	 1
  00a02	6a 04		 push	 4
  00a04	68 00 00 00 00	 push	 OFFSET ?number_of_displacement_animations@@3HA ; number_of_displacement_animations
  00a09	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00a0f	83 c4 10	 add	 esp, 16			; 00000010H

; 408  : 
; 409  : 	if ( number_of_displacement_animations )

  00a12	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?number_of_displacement_animations@@3HA, 0 ; number_of_displacement_animations
  00a19	0f 84 5e 01 00
	00		 je	 $LN33@initialise

; 410  : 	{
; 411  : 
; 412  : 		displacement_animations = ( texture_animation_information * ) safe_malloc ( sizeof ( texture_animation_information ) * number_of_displacement_animations );

  00a1f	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?number_of_displacement_animations@@3HA, 12 ; number_of_displacement_animations
  00a26	50		 push	 eax
  00a27	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00a2c	a3 00 00 00 00	 mov	 DWORD PTR ?displacement_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A, eax ; displacement_animations

; 413  : 
; 414  : 		displacement_animation_names = ( const char * * ) safe_malloc ( sizeof ( char * ) * number_of_displacement_animations );

  00a31	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_displacement_animations@@3HA ; number_of_displacement_animations
  00a36	c1 e0 02	 shl	 eax, 2
  00a39	50		 push	 eax
  00a3a	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00a3f	a3 00 00 00 00	 mov	 DWORD PTR ?displacement_animation_names@@3PAPBDA, eax ; displacement_animation_names

; 415  : 
; 416  : 		fread ( &length, sizeof ( int ), 1, fp );

  00a44	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00a47	50		 push	 eax
  00a48	6a 01		 push	 1
  00a4a	6a 04		 push	 4
  00a4c	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  00a4f	51		 push	 ecx
  00a50	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00a56	83 c4 10	 add	 esp, 16			; 00000010H

; 417  : 
; 418  : 		ptr = ( char * ) safe_malloc ( length * sizeof ( char ) );

  00a59	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  00a5c	50		 push	 eax
  00a5d	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00a62	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 419  : 
; 420  : 		for ( count = 0; count < number_of_displacement_animations; count++ )

  00a68	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00a6f	eb 09		 jmp	 SHORT $LN34@initialise
$LN32@initialise:
  00a71	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00a74	83 c0 01	 add	 eax, 1
  00a77	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN34@initialise:
  00a7a	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00a7d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_displacement_animations@@3HA ; number_of_displacement_animations
  00a83	0f 8d f4 00 00
	00		 jge	 $LN33@initialise

; 421  : 		{
; 422  : 
; 423  : 			int
; 424  : 				temp,
; 425  : 				number_of_frames;
; 426  : 
; 427  : 			fread ( &length, sizeof ( int ), 1, fp );

  00a89	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00a8c	50		 push	 eax
  00a8d	6a 01		 push	 1
  00a8f	6a 04		 push	 4
  00a91	8d 4d fc	 lea	 ecx, DWORD PTR _length$[ebp]
  00a94	51		 push	 ecx
  00a95	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00a9b	83 c4 10	 add	 esp, 16			; 00000010H

; 428  : 
; 429  : 			displacement_animation_names[count] = ptr;

  00a9e	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00aa1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?displacement_animation_names@@3PAPBDA ; displacement_animation_names
  00aa7	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  00aad	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 430  : 
; 431  : 			fread ( ptr, length, 1, fp );

  00ab0	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00ab3	50		 push	 eax
  00ab4	6a 01		 push	 1
  00ab6	8b 4d fc	 mov	 ecx, DWORD PTR _length$[ebp]
  00ab9	51		 push	 ecx
  00aba	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  00ac0	52		 push	 edx
  00ac1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00ac7	83 c4 10	 add	 esp, 16			; 00000010H

; 432  : 
; 433  : 			fread ( &number_of_frames, sizeof ( int ), 1, fp );

  00aca	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00acd	50		 push	 eax
  00ace	6a 01		 push	 1
  00ad0	6a 04		 push	 4
  00ad2	8d 8d dc f7 ff
	ff		 lea	 ecx, DWORD PTR _number_of_frames$12[ebp]
  00ad8	51		 push	 ecx
  00ad9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00adf	83 c4 10	 add	 esp, 16			; 00000010H

; 434  : 
; 435  : 			displacement_animations[count].number_of_frames = number_of_frames;

  00ae2	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00ae6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?displacement_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; displacement_animations
  00aec	8b 95 dc f7 ff
	ff		 mov	 edx, DWORD PTR _number_of_frames$12[ebp]
  00af2	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 436  : 			displacement_animations[count].current_frame = 0;

  00af5	6b 45 f8 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00af9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?displacement_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; displacement_animations
  00aff	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0

; 437  : 			displacement_animations[count].texture_indices = ( int * ) safe_malloc ( sizeof ( int ) * number_of_frames );

  00b07	8b 85 dc f7 ff
	ff		 mov	 eax, DWORD PTR _number_of_frames$12[ebp]
  00b0d	c1 e0 02	 shl	 eax, 2
  00b10	50		 push	 eax
  00b11	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00b16	6b 4d f8 0c	 imul	 ecx, DWORD PTR _count$[ebp], 12
  00b1a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?displacement_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; displacement_animations
  00b20	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 438  : 
; 439  : 			for ( temp = 0; temp < number_of_frames; temp++ )

  00b24	c7 85 e0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _temp$13[ebp], 0
  00b2e	eb 0f		 jmp	 SHORT $LN37@initialise
$LN35@initialise:
  00b30	8b 85 e0 f7 ff
	ff		 mov	 eax, DWORD PTR _temp$13[ebp]
  00b36	83 c0 01	 add	 eax, 1
  00b39	89 85 e0 f7 ff
	ff		 mov	 DWORD PTR _temp$13[ebp], eax
$LN37@initialise:
  00b3f	8b 85 e0 f7 ff
	ff		 mov	 eax, DWORD PTR _temp$13[ebp]
  00b45	3b 85 dc f7 ff
	ff		 cmp	 eax, DWORD PTR _number_of_frames$12[ebp]
  00b4b	7d 2b		 jge	 SHORT $LN36@initialise

; 440  : 			{
; 441  : 
; 442  : 				fread ( &displacement_animations[count].texture_indices[temp], sizeof ( int ), 1, fp );

  00b4d	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00b50	50		 push	 eax
  00b51	6a 01		 push	 1
  00b53	6a 04		 push	 4
  00b55	6b 4d f8 0c	 imul	 ecx, DWORD PTR _count$[ebp], 12
  00b59	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?displacement_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; displacement_animations
  00b5f	8b 44 0a 08	 mov	 eax, DWORD PTR [edx+ecx+8]
  00b63	8b 8d e0 f7 ff
	ff		 mov	 ecx, DWORD PTR _temp$13[ebp]
  00b69	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00b6c	52		 push	 edx
  00b6d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00b73	83 c4 10	 add	 esp, 16			; 00000010H

; 443  : 			}

  00b76	eb b8		 jmp	 SHORT $LN35@initialise
$LN36@initialise:

; 444  : 		}

  00b78	e9 f4 fe ff ff	 jmp	 $LN32@initialise
$LN33@initialise:

; 445  : 	}
; 446  : 
; 447  : 	fclose ( fp );

  00b7d	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00b80	50		 push	 eax
  00b81	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00b87	83 c4 04	 add	 esp, 4

; 448  : 
; 449  : 	// 12NOV10 Casm Loading custom textures animation BEGIN
; 450  : 	{
; 451  : 		int
; 452  : 			rc;
; 453  : 		long
; 454  : 			handle;
; 455  : 		struct _finddata_t
; 456  : 			fi;
; 457  : 
; 458  : 		sprintf ( filename, "%s\\..\\GRAPHICS\\TEXTURES\\ANIMATION\\*.TXT", directory );

  00b8a	8b 45 08	 mov	 eax, DWORD PTR _directory$[ebp]
  00b8d	50		 push	 eax
  00b8e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IOEKEGPP@?$CFs?2?4?4?2GRAPHICS?2TEXTURES?2ANIMATI@
  00b93	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  00b99	51		 push	 ecx
  00b9a	e8 00 00 00 00	 call	 _sprintf
  00b9f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 459  : 		for ( rc = handle = _findfirst ( filename, &fi ); rc != -1; rc = _findnext ( handle, &fi ) )

  00ba2	8d 85 ac f6 ff
	ff		 lea	 eax, DWORD PTR _fi$9[ebp]
  00ba8	50		 push	 eax
  00ba9	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  00baf	51		 push	 ecx
  00bb0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___findfirst64i32
  00bb6	83 c4 08	 add	 esp, 8
  00bb9	89 85 d4 f7 ff
	ff		 mov	 DWORD PTR _handle$10[ebp], eax
  00bbf	8b 95 d4 f7 ff
	ff		 mov	 edx, DWORD PTR _handle$10[ebp]
  00bc5	89 95 d8 f7 ff
	ff		 mov	 DWORD PTR _rc$11[ebp], edx
  00bcb	eb 1d		 jmp	 SHORT $LN40@initialise
$LN38@initialise:
  00bcd	8d 85 ac f6 ff
	ff		 lea	 eax, DWORD PTR _fi$9[ebp]
  00bd3	50		 push	 eax
  00bd4	8b 8d d4 f7 ff
	ff		 mov	 ecx, DWORD PTR _handle$10[ebp]
  00bda	51		 push	 ecx
  00bdb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___findnext64i32
  00be1	83 c4 08	 add	 esp, 8
  00be4	89 85 d8 f7 ff
	ff		 mov	 DWORD PTR _rc$11[ebp], eax
$LN40@initialise:
  00bea	83 bd d8 f7 ff
	ff ff		 cmp	 DWORD PTR _rc$11[ebp], -1
  00bf1	0f 84 07 03 00
	00		 je	 $LN39@initialise

; 460  : 		{
; 461  : 			int
; 462  : 				texture_animation_index;
; 463  : 
; 464  : 			if ( fi.attrib & _A_SUBDIR )

  00bf7	8b 85 ac f6 ff
	ff		 mov	 eax, DWORD PTR _fi$9[ebp]
  00bfd	83 e0 10	 and	 eax, 16			; 00000010H
  00c00	74 02		 je	 SHORT $LN57@initialise

; 465  : 				continue;

  00c02	eb c9		 jmp	 SHORT $LN38@initialise
$LN57@initialise:

; 466  : 
; 467  : 			fi.name[strlen(fi.name) - 4] = '\0';

  00c04	8d 85 d0 f6 ff
	ff		 lea	 eax, DWORD PTR _fi$9[ebp+36]
  00c0a	50		 push	 eax
  00c0b	e8 00 00 00 00	 call	 _strlen
  00c10	83 c4 04	 add	 esp, 4
  00c13	c6 84 05 cc f6
	ff ff 00	 mov	 BYTE PTR _fi$9[ebp+eax+32], 0

; 468  : 			strupr ( fi.name );

  00c1b	8d 85 d0 f6 ff
	ff		 lea	 eax, DWORD PTR _fi$9[ebp+36]
  00c21	50		 push	 eax
  00c22	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strupr
  00c28	83 c4 04	 add	 esp, 4

; 469  : 
; 470  : 			texture_animation_index = get_object_3d_texture_animation_index_from_name ( fi.name );

  00c2b	8d 85 d0 f6 ff
	ff		 lea	 eax, DWORD PTR _fi$9[ebp+36]
  00c31	50		 push	 eax
  00c32	e8 00 00 00 00	 call	 ?get_object_3d_texture_animation_index_from_name@@YGHPAD@Z ; get_object_3d_texture_animation_index_from_name
  00c37	89 85 a8 f6 ff
	ff		 mov	 DWORD PTR _texture_animation_index$8[ebp], eax

; 471  : 			if ( texture_animation_index < 0 )

  00c3d	83 bd a8 f6 ff
	ff 00		 cmp	 DWORD PTR _texture_animation_index$8[ebp], 0
  00c44	0f 8d 9c 00 00
	00		 jge	 $LN58@initialise

; 472  : 			{
; 473  : 				size_t
; 474  : 					length;
; 475  : 				char
; 476  : 					*ptr;
; 477  : 
; 478  : 				ASSERT ( number_of_texture_animations < TEXTURE_ANIMATION_INDEX_LAST );

  00c4a	81 3d 00 00 00
	00 92 00 00 00	 cmp	 DWORD PTR ?number_of_texture_animations@@3HA, 146 ; number_of_texture_animations, 00000092H
  00c54	7c 1a		 jl	 SHORT $LN59@initialise
  00c56	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_3d_objects_info@@YGXPBD@Z@4JA
  00c5b	05 6b 01 00 00	 add	 eax, 363		; 0000016bH
  00c60	50		 push	 eax
  00c61	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CMDCNFLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00c66	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LNIDEGEB@number_of_texture_animations?5?$DM?5@
  00c6b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN59@initialise:

; 479  : 				texture_animation_index = number_of_texture_animations++;

  00c70	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_texture_animations@@3HA ; number_of_texture_animations
  00c75	89 85 a8 f6 ff
	ff		 mov	 DWORD PTR _texture_animation_index$8[ebp], eax
  00c7b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_texture_animations@@3HA ; number_of_texture_animations
  00c81	83 c1 01	 add	 ecx, 1
  00c84	89 0d 00 00 00
	00		 mov	 DWORD PTR ?number_of_texture_animations@@3HA, ecx ; number_of_texture_animations

; 480  : 				length = strlen ( fi.name ) + 1;

  00c8a	8d 85 d0 f6 ff
	ff		 lea	 eax, DWORD PTR _fi$9[ebp+36]
  00c90	50		 push	 eax
  00c91	e8 00 00 00 00	 call	 _strlen
  00c96	83 c4 04	 add	 esp, 4
  00c99	83 c0 01	 add	 eax, 1
  00c9c	89 85 a4 f6 ff
	ff		 mov	 DWORD PTR _length$7[ebp], eax

; 481  : 				ptr = ( char * ) safe_malloc ( length );

  00ca2	8b 85 a4 f6 ff
	ff		 mov	 eax, DWORD PTR _length$7[ebp]
  00ca8	50		 push	 eax
  00ca9	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00cae	89 85 a0 f6 ff
	ff		 mov	 DWORD PTR _ptr$6[ebp], eax

; 482  : 				memcpy ( ptr, fi.name, length );

  00cb4	8b 85 a4 f6 ff
	ff		 mov	 eax, DWORD PTR _length$7[ebp]
  00cba	50		 push	 eax
  00cbb	8d 8d d0 f6 ff
	ff		 lea	 ecx, DWORD PTR _fi$9[ebp+36]
  00cc1	51		 push	 ecx
  00cc2	8b 95 a0 f6 ff
	ff		 mov	 edx, DWORD PTR _ptr$6[ebp]
  00cc8	52		 push	 edx
  00cc9	e8 00 00 00 00	 call	 _memcpy
  00cce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 483  : 				texture_animation_names[texture_animation_index] = ptr;

  00cd1	8b 85 a8 f6 ff
	ff		 mov	 eax, DWORD PTR _texture_animation_index$8[ebp]
  00cd7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animation_names@@3PAPBDA ; texture_animation_names
  00cdd	8b 95 a0 f6 ff
	ff		 mov	 edx, DWORD PTR _ptr$6[ebp]
  00ce3	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN58@initialise:

; 484  : 			}
; 485  : 
; 486  : 			sprintf ( filename, "%s\\..\\GRAPHICS\\TEXTURES\\ANIMATION\\%s.TXT", directory, fi.name );

  00ce6	8d 85 d0 f6 ff
	ff		 lea	 eax, DWORD PTR _fi$9[ebp+36]
  00cec	50		 push	 eax
  00ced	8b 4d 08	 mov	 ecx, DWORD PTR _directory$[ebp]
  00cf0	51		 push	 ecx
  00cf1	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@EFKNOIOJ@?$CFs?2?4?4?2GRAPHICS?2TEXTURES?2ANIMATI@
  00cf6	8d 95 f4 fb ff
	ff		 lea	 edx, DWORD PTR _filename$[ebp]
  00cfc	52		 push	 edx
  00cfd	e8 00 00 00 00	 call	 _sprintf
  00d02	83 c4 10	 add	 esp, 16			; 00000010H

; 487  : 
; 488  : 			{
; 489  : 				FILE*
; 490  : 					file;
; 491  : 				texture_animation_information
; 492  : 					texture_animation;
; 493  : 				char
; 494  : 					line[1024];
; 495  : 
; 496  : 				texture_animation.number_of_frames = texture_animation.current_frame = 0;

  00d05	c7 85 94 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _texture_animation$4[ebp+4], 0
  00d0f	8b 85 94 f6 ff
	ff		 mov	 eax, DWORD PTR _texture_animation$4[ebp+4]
  00d15	89 85 90 f6 ff
	ff		 mov	 DWORD PTR _texture_animation$4[ebp], eax

; 497  : 				texture_animation.texture_indices = NULL;

  00d1b	c7 85 98 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _texture_animation$4[ebp+8], 0

; 498  : 				file = safe_fopen ( filename, "r" );

  00d25	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  00d2a	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00d30	50		 push	 eax
  00d31	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00d36	89 85 9c f6 ff
	ff		 mov	 DWORD PTR _file$5[ebp], eax
$LN41@initialise:

; 499  : 				while ( fgets ( line, sizeof ( line ), file ) && *line )

  00d3c	8b 85 9c f6 ff
	ff		 mov	 eax, DWORD PTR _file$5[ebp]
  00d42	50		 push	 eax
  00d43	68 00 04 00 00	 push	 1024			; 00000400H
  00d48	8d 8d 90 f2 ff
	ff		 lea	 ecx, DWORD PTR _line$3[ebp]
  00d4e	51		 push	 ecx
  00d4f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  00d55	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d58	85 c0		 test	 eax, eax
  00d5a	0f 84 31 01 00
	00		 je	 $LN42@initialise
  00d60	b8 01 00 00 00	 mov	 eax, 1
  00d65	6b c8 00	 imul	 ecx, eax, 0
  00d68	0f b6 94 0d 90
	f2 ff ff	 movzx	 edx, BYTE PTR _line$3[ebp+ecx]
  00d70	85 d2		 test	 edx, edx
  00d72	0f 84 19 01 00
	00		 je	 $LN42@initialise

; 500  : 				{
; 501  : 					char
; 502  : 						*last;
; 503  : 					last = line + strlen ( line ) - 1;

  00d78	8d 85 90 f2 ff
	ff		 lea	 eax, DWORD PTR _line$3[ebp]
  00d7e	50		 push	 eax
  00d7f	e8 00 00 00 00	 call	 _strlen
  00d84	83 c4 04	 add	 esp, 4
  00d87	8d 8c 05 8f f2
	ff ff		 lea	 ecx, DWORD PTR _line$3[ebp+eax-1]
  00d8e	89 8d 8c f2 ff
	ff		 mov	 DWORD PTR _last$2[ebp], ecx

; 504  : 					if ( *last == '\n' )

  00d94	8b 85 8c f2 ff
	ff		 mov	 eax, DWORD PTR _last$2[ebp]
  00d9a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00d9d	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00da0	75 09		 jne	 SHORT $LN60@initialise

; 505  : 						*last = '\0';

  00da2	8b 85 8c f2 ff
	ff		 mov	 eax, DWORD PTR _last$2[ebp]
  00da8	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN60@initialise:

; 506  : 					if ( !*line )

  00dab	b8 01 00 00 00	 mov	 eax, 1
  00db0	6b c8 00	 imul	 ecx, eax, 0
  00db3	0f b6 94 0d 90
	f2 ff ff	 movzx	 edx, BYTE PTR _line$3[ebp+ecx]
  00dbb	85 d2		 test	 edx, edx
  00dbd	75 05		 jne	 SHORT $LN61@initialise

; 507  : 						break;

  00dbf	e9 cd 00 00 00	 jmp	 $LN42@initialise
$LN61@initialise:

; 508  : 					if ( texture_animation.number_of_frames == texture_animation.current_frame )

  00dc4	8b 85 90 f6 ff
	ff		 mov	 eax, DWORD PTR _texture_animation$4[ebp]
  00dca	3b 85 94 f6 ff
	ff		 cmp	 eax, DWORD PTR _texture_animation$4[ebp+4]
  00dd0	0f 85 85 00 00
	00		 jne	 $LN62@initialise

; 509  : 					{
; 510  : 						int
; 511  : 							*new_texture_indices;
; 512  : 
; 513  : 						texture_animation.current_frame = texture_animation.current_frame ? texture_animation.current_frame * 2 : 8;

  00dd6	83 bd 94 f6 ff
	ff 00		 cmp	 DWORD PTR _texture_animation$4[ebp+4], 0
  00ddd	74 10		 je	 SHORT $LN66@initialise
  00ddf	8b 85 94 f6 ff
	ff		 mov	 eax, DWORD PTR _texture_animation$4[ebp+4]
  00de5	d1 e0		 shl	 eax, 1
  00de7	89 85 c4 f0 ff
	ff		 mov	 DWORD PTR tv595[ebp], eax
  00ded	eb 0a		 jmp	 SHORT $LN67@initialise
$LN66@initialise:
  00def	c7 85 c4 f0 ff
	ff 08 00 00 00	 mov	 DWORD PTR tv595[ebp], 8
$LN67@initialise:
  00df9	8b 8d c4 f0 ff
	ff		 mov	 ecx, DWORD PTR tv595[ebp]
  00dff	89 8d 94 f6 ff
	ff		 mov	 DWORD PTR _texture_animation$4[ebp+4], ecx

; 514  : 						new_texture_indices = ( int * ) safe_malloc ( texture_animation.current_frame * sizeof ( int ) );

  00e05	8b 85 94 f6 ff
	ff		 mov	 eax, DWORD PTR _texture_animation$4[ebp+4]
  00e0b	c1 e0 02	 shl	 eax, 2
  00e0e	50		 push	 eax
  00e0f	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00e14	89 85 88 f2 ff
	ff		 mov	 DWORD PTR _new_texture_indices$1[ebp], eax

; 515  : 						if ( texture_animation.texture_indices )

  00e1a	83 bd 98 f6 ff
	ff 00		 cmp	 DWORD PTR _texture_animation$4[ebp+8], 0
  00e21	74 2c		 je	 SHORT $LN63@initialise

; 516  : 						{
; 517  : 							memcpy ( new_texture_indices, texture_animation.texture_indices, texture_animation.number_of_frames * sizeof ( int ) );

  00e23	8b 85 90 f6 ff
	ff		 mov	 eax, DWORD PTR _texture_animation$4[ebp]
  00e29	c1 e0 02	 shl	 eax, 2
  00e2c	50		 push	 eax
  00e2d	8b 8d 98 f6 ff
	ff		 mov	 ecx, DWORD PTR _texture_animation$4[ebp+8]
  00e33	51		 push	 ecx
  00e34	8b 95 88 f2 ff
	ff		 mov	 edx, DWORD PTR _new_texture_indices$1[ebp]
  00e3a	52		 push	 edx
  00e3b	e8 00 00 00 00	 call	 _memcpy
  00e40	83 c4 0c	 add	 esp, 12			; 0000000cH

; 518  : 							safe_free ( texture_animation.texture_indices );

  00e43	8b 85 98 f6 ff
	ff		 mov	 eax, DWORD PTR _texture_animation$4[ebp+8]
  00e49	50		 push	 eax
  00e4a	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN63@initialise:

; 519  : 						}
; 520  : 						texture_animation.texture_indices = new_texture_indices;

  00e4f	8b 85 88 f2 ff
	ff		 mov	 eax, DWORD PTR _new_texture_indices$1[ebp]
  00e55	89 85 98 f6 ff
	ff		 mov	 DWORD PTR _texture_animation$4[ebp+8], eax
$LN62@initialise:

; 521  : 					}
; 522  : 					texture_animation.texture_indices[texture_animation.number_of_frames++] = add_new_texture ( line, filename );

  00e5b	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00e61	50		 push	 eax
  00e62	8d 8d 90 f2 ff
	ff		 lea	 ecx, DWORD PTR _line$3[ebp]
  00e68	51		 push	 ecx
  00e69	e8 00 00 00 00	 call	 ?add_new_texture@@YGHPBD0@Z ; add_new_texture
  00e6e	8b 95 90 f6 ff
	ff		 mov	 edx, DWORD PTR _texture_animation$4[ebp]
  00e74	8b 8d 98 f6 ff
	ff		 mov	 ecx, DWORD PTR _texture_animation$4[ebp+8]
  00e7a	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  00e7d	8b 95 90 f6 ff
	ff		 mov	 edx, DWORD PTR _texture_animation$4[ebp]
  00e83	83 c2 01	 add	 edx, 1
  00e86	89 95 90 f6 ff
	ff		 mov	 DWORD PTR _texture_animation$4[ebp], edx

; 523  : 				}

  00e8c	e9 ab fe ff ff	 jmp	 $LN41@initialise
$LN42@initialise:

; 524  : 				safe_fclose ( file );

  00e91	8b 85 9c f6 ff
	ff		 mov	 eax, DWORD PTR _file$5[ebp]
  00e97	50		 push	 eax
  00e98	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 525  : 
; 526  : 				texture_animation.current_frame = 0;

  00e9d	c7 85 94 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _texture_animation$4[ebp+4], 0

; 527  : 				if ( texture_animations[texture_animation_index].texture_indices )

  00ea7	6b 85 a8 f6 ff
	ff 0c		 imul	 eax, DWORD PTR _texture_animation_index$8[ebp], 12
  00eae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00eb4	83 7c 01 08 00	 cmp	 DWORD PTR [ecx+eax+8], 0
  00eb9	74 17		 je	 SHORT $LN64@initialise

; 528  : 				{
; 529  : 					safe_free ( texture_animations[texture_animation_index].texture_indices );

  00ebb	6b 85 a8 f6 ff
	ff 0c		 imul	 eax, DWORD PTR _texture_animation_index$8[ebp], 12
  00ec2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00ec8	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  00ecc	52		 push	 edx
  00ecd	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN64@initialise:

; 530  : 				}
; 531  : 				texture_animations[texture_animation_index] = texture_animation;

  00ed2	6b 85 a8 f6 ff
	ff 0c		 imul	 eax, DWORD PTR _texture_animation_index$8[ebp], 12
  00ed9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00edf	8b 8d 90 f6 ff
	ff		 mov	 ecx, DWORD PTR _texture_animation$4[ebp]
  00ee5	89 08		 mov	 DWORD PTR [eax], ecx
  00ee7	8b 95 94 f6 ff
	ff		 mov	 edx, DWORD PTR _texture_animation$4[ebp+4]
  00eed	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00ef0	8b 8d 98 f6 ff
	ff		 mov	 ecx, DWORD PTR _texture_animation$4[ebp+8]
  00ef6	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 532  : 			}
; 533  : 		}

  00ef9	e9 cf fc ff ff	 jmp	 $LN38@initialise
$LN39@initialise:

; 534  : 		_findclose ( handle );

  00efe	8b 85 d4 f7 ff
	ff		 mov	 eax, DWORD PTR _handle$10[ebp]
  00f04	50		 push	 eax
  00f05	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___findclose
  00f0b	83 c4 04	 add	 esp, 4

; 535  : 	}
; 536  : 	// 12NOV10 Casm Loading custom textures animation END
; 537  : }

  00f0e	5f		 pop	 edi
  00f0f	5e		 pop	 esi
  00f10	5b		 pop	 ebx
  00f11	8b e5		 mov	 esp, ebp
  00f13	5d		 pop	 ebp
  00f14	c2 04 00	 ret	 4
?initialise_3d_objects_info@@YGXPBD@Z ENDP		; initialise_3d_objects_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
