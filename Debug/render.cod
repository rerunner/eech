; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\render.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?initialise_graphics_rendering_system@@YGHXZ	; initialise_graphics_rendering_system
PUBLIC	?play_avi@@YGXPBDH@Z				; play_avi
EXTRN	?set_fpu_rounding_mode_zero@@YGXXZ:PROC		; set_fpu_rounding_mode_zero
EXTRN	?initialise_direct_3d@@YGHXZ:PROC		; initialise_direct_3d
EXTRN	?initialise_texture_system@@YGHXZ:PROC		; initialise_texture_system
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\render.c
;	COMDAT ?play_avi@@YGXPBDH@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_exit_key$ = 12						; size = 4
?play_avi@@YGXPBDH@Z PROC				; play_avi, COMDAT

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 100  : /*
; 101  : 	IAMMultiMediaStream
; 102  : 		*pAMStream;
; 103  : 
; 104  : 	WCHAR
; 105  : 		wPath[512];
; 106  : 
; 107  : 	IMediaStream
; 108  : 		*pPrimaryVidStream = NULL;
; 109  : 
; 110  : 	IDirectDrawMediaStream
; 111  : 		*pDDStream = NULL;
; 112  : 
; 113  : 	IDirectDrawSurface7
; 114  : 		*pSurface = NULL;
; 115  : 
; 116  : 	IDirectDrawStreamSample
; 117  : 		*pSample = NULL;
; 118  : 
; 119  : 	RECT
; 120  : 		rect;
; 121  : 
; 122  : 	screen
; 123  : 		*texture_screen;
; 124  : 
; 125  : 	HRESULT
; 126  : 		ret;
; 127  : 
; 128  : 	ASSERT ( strlen ( filename ) < 512 );
; 129  : 
; 130  : 	CoCreateInstance ( &CLSID_AMMultiMediaStream, NULL, CLSCTX_INPROC_SERVER, &IID_IAMMultiMediaStream, ( void ** ) &pAMStream );
; 131  : 
; 132  : 	ret = IAMMultiMediaStream_Initialize ( pAMStream, STREAMTYPE_READ, 0, NULL );
; 133  : 
; 134  : 	if ( FAILED ( ret ) )
; 135  : 	{
; 136  : 
; 137  : 		debug_log ( "Unable to initialise multimedia stream" );
; 138  : 
; 139  : 		IAMMultiMediaStream_Release ( pAMStream );
; 140  : 
; 141  : 		return;
; 142  : 	}
; 143  : 
; 144  : 	ret = IAMMultiMediaStream_AddMediaStream ( pAMStream, ( IUnknown __RPC_FAR *) ddraw.ddraw, &MSPID_PrimaryVideo, 0, NULL );
; 145  : 
; 146  : 	if ( FAILED ( ret ) )
; 147  : 	{
; 148  : 
; 149  : 		debug_log ( "Unable to add primary video media stream" );
; 150  : 
; 151  : 		IAMMultiMediaStream_Release ( pAMStream );
; 152  : 
; 153  : 		return;
; 154  : 	}
; 155  : 
; 156  : 	ret = IAMMultiMediaStream_AddMediaStream ( pAMStream, NULL, &MSPID_PrimaryAudio, AMMSF_ADDDEFAULTRENDERER, NULL );
; 157  : 
; 158  : 	if ( FAILED ( ret ) )
; 159  : 	{
; 160  : 
; 161  : 		debug_log ( "Unable to add audio media stream" );
; 162  : 
; 163  : 		IAMMultiMediaStream_Release ( pAMStream );
; 164  : 
; 165  : 		return;
; 166  : 	}
; 167  : 
; 168  : 	MultiByteToWideChar ( CP_ACP, 0, filename, -1, wPath, sizeof ( wPath ) / sizeof ( wPath[0] ) );
; 169  : 
; 170  : 	ret = IAMMultiMediaStream_OpenFile ( pAMStream, wPath, 0 );
; 171  : 
; 172  : 	if ( FAILED ( ret ) )
; 173  : 	{
; 174  : 
; 175  : 		debug_log ( "Unable to open multimedia file" );
; 176  : 
; 177  : 		IAMMultiMediaStream_Release ( pAMStream );
; 178  : 
; 179  : 		return;
; 180  : 	}
; 181  : 
; 182  :    ret = IAMMultiMediaStream_GetMediaStream ( pAMStream, &MSPID_PrimaryVideo, &pPrimaryVidStream );
; 183  : 
; 184  : 	if ( FAILED ( ret ) )
; 185  : 	{
; 186  : 
; 187  : 		debug_log ( "Unable toget a media stream" );
; 188  : 
; 189  : 		IAMMultiMediaStream_Release ( pAMStream );
; 190  : 
; 191  : 		return;
; 192  : 	}
; 193  : 
; 194  :    ret = IMediaStream_QueryInterface ( pPrimaryVidStream, &IID_IDirectDrawMediaStream, (void **) &pDDStream );
; 195  : 
; 196  : 	if ( FAILED ( ret ) )
; 197  : 	{
; 198  : 
; 199  : 		debug_log ( "Unable to QI video stream to get audio stream" );
; 200  : 
; 201  : 		IAMMultiMediaStream_Release ( pAMStream );
; 202  : 
; 203  : 		IMediaStream_Release ( pPrimaryVidStream );
; 204  : 
; 205  : 		return;
; 206  : 	}
; 207  : 
; 208  :    ret = IDirectDrawMediaStream_CreateSample ( pDDStream, NULL, NULL, 0, &pSample);
; 209  : 
; 210  : 	if ( FAILED ( ret ) )
; 211  : 	{
; 212  : 
; 213  : 		debug_log ( "Unable to create a surface" );
; 214  : 
; 215  : 		IAMMultiMediaStream_Release ( pAMStream );
; 216  : 
; 217  : 		IMediaStream_Release ( pPrimaryVidStream );
; 218  : 
; 219  : 		return;
; 220  : 	}
; 221  : 
; 222  :    ret = IDirectDrawStreamSample_GetSurface ( pSample, ( LPDIRECTDRAWSURFACE * ) &pSurface, &rect );
; 223  :     
; 224  : 	if ( FAILED ( ret ) )
; 225  : 	{
; 226  : 
; 227  : 		debug_log ( "Unable to get a surface" );
; 228  : 
; 229  : 		IDirectDrawStreamSample_Release ( pSample );
; 230  : 
; 231  : 		IAMMultiMediaStream_Release ( pAMStream );
; 232  : 
; 233  : 		IMediaStream_Release ( pPrimaryVidStream );
; 234  : 
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	ret = IDirectDrawStreamSample_SetRect ( pSample, &rect );
; 239  : 
; 240  : 	if ( FAILED ( ret ) )
; 241  : 	{
; 242  : 
; 243  : 		debug_log ( "Unable to set a rect" );
; 244  : 
; 245  : 		IDirectDrawStreamSample_Release ( pSample );
; 246  : 
; 247  : 		IAMMultiMediaStream_Release ( pAMStream );
; 248  : 
; 249  : 		IMediaStream_Release ( pPrimaryVidStream );
; 250  : 
; 251  : 		return;
; 252  : 	}
; 253  : 
; 254  :    ret = IAMMultiMediaStream_SetState ( pAMStream, STREAMSTATE_RUN );
; 255  : 
; 256  : 	if ( FAILED ( ret ) )
; 257  : 	{
; 258  : 
; 259  : 		debug_log ( "Unable to start a multimedia file" );
; 260  : 
; 261  : 		IDirectDrawStreamSample_Release ( pSample );
; 262  : 
; 263  : 		IAMMultiMediaStream_Release ( pAMStream );
; 264  : 
; 265  : 		IMediaStream_Release ( pPrimaryVidStream );
; 266  : 
; 267  : 		return;
; 268  : 	}
; 269  : 
; 270  : 	texture_screen = create_user_texture_screen ( 256, 256, SCREEN_FORMAT_TYPE_VIDEOSCREEN, 0 );
; 271  : 
; 272  : 	while ( TRUE )
; 273  : 	{
; 274  : 
; 275  : 		if ( IDirectDrawStreamSample_Update ( pSample, 0, NULL, NULL, 0 ) != S_OK )
; 276  : 		{
; 277  : 
; 278  : 			break;
; 279  : 		}
; 280  : 
; 281  : 		{
; 282  : 
; 283  : 			IDirectDrawSurface7_Blt ( ddraw.lpRenderBuffer, NULL, pSurface, &rect, DDBLT_WAIT, NULL );
; 284  : //			IDirectDrawSurface7_Blt ( texture_screen->surface, NULL, pSurface, &rect, DDBLT_WAIT, NULL );
; 285  : 			if ( begin_3d_scene () )
; 286  : 			{
; 287  : 		
; 288  : 				vertex
; 289  : 					quad[4];
; 290  : 		
; 291  : 				real_colour
; 292  : 					colour,
; 293  : 					specular;
; 294  : 		
; 295  : 				colour.red = 255;
; 296  : 				colour.green = 0;
; 297  : 				colour.blue = 255;
; 298  : 				colour.alpha = 255;
; 299  : 		
; 300  : 				specular.red = 0;
; 301  : 				specular.green = 0;
; 302  : 				specular.blue = 0;
; 303  : 				specular.alpha = 255;
; 304  : 		
; 305  : 				quad[0].i = 50;
; 306  : 				quad[0].j = 50;
; 307  : 				quad[0].z = 10;
; 308  : 				quad[0].q = 0.1;
; 309  : 				quad[0].u = 0;
; 310  : 				quad[0].v = 0;
; 311  : 				quad[0].next_vertex = &quad[1];
; 312  : 		
; 313  : 				quad[1].i = 306;
; 314  : 				quad[1].j = 50;
; 315  : 				quad[1].z = 10;
; 316  : 				quad[1].q = 0.1;
; 317  : 				quad[1].u = 1;
; 318  : 				quad[1].v = 0;
; 319  : 				quad[1].next_vertex = &quad[2];
; 320  : 		
; 321  : 				quad[2].i = 306;
; 322  : 				quad[2].j = 306;
; 323  : 				quad[2].z = 10;
; 324  : 				quad[2].q = 0.1;
; 325  : 				quad[2].u = 1;
; 326  : 				quad[2].v = 1;
; 327  : 				quad[2].next_vertex = &quad[3];
; 328  : 		
; 329  : 				quad[3].i = 50;
; 330  : 				quad[3].j = 306;
; 331  : 				quad[3].z = 10;
; 332  : 				quad[3].q = 0.1;
; 333  : 				quad[3].u = 0;
; 334  : 				quad[3].v = 1;
; 335  : 				quad[3].next_vertex = NULL;
; 336  : 		
; 337  : 				set_d3d_zbuffer_comparison ( FALSE );
; 338  : 				set_d3d_zbuffer_writing ( FALSE );
; 339  : 
; 340  : 				set_d3d_flat_shaded_textured_renderstate ( texture_screen );
; 341  : 		
; 342  : 				set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP );
; 343  : 				set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP );
; 344  : 		
; 345  : 				set_d3d_texture_stage_state ( 0, D3DTSS_MAGFILTER, D3DTFG_POINT );
; 346  : 				set_d3d_texture_stage_state ( 0, D3DTSS_MINFILTER, D3DTFG_POINT );
; 347  : 				set_d3d_texture_stage_state ( 0, D3DTSS_MIPFILTER, D3DTFP_NONE );
; 348  : 		
; 349  : 				draw_wbuffered_flat_shaded_textured_polygon ( quad, colour, specular );
; 350  : 		
; 351  : 				end_3d_scene ();
; 352  : 			}
; 353  : 			
; 354  : 
; 355  : 			ddraw_flip_surface ();
; 356  : 		}
; 357  : 	}
; 358  : 
; 359  : 	destroy_screen ( texture_screen );
; 360  : 
; 361  : 	IDirectDrawStreamSample_Release ( pSample );
; 362  : 
; 363  : 	IAMMultiMediaStream_Release ( pAMStream );
; 364  : 
; 365  : 	IMediaStream_Release ( pPrimaryVidStream );
; 366  : 
; 367  : 	return; */
; 368  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?play_avi@@YGXPBDH@Z ENDP				; play_avi
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\render.c
;	COMDAT ?initialise_graphics_rendering_system@@YGHXZ
_TEXT	SEGMENT
?initialise_graphics_rendering_system@@YGHXZ PROC	; initialise_graphics_rendering_system, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 
; 76   : 	initialise_direct_3d ();

  00009	e8 00 00 00 00	 call	 ?initialise_direct_3d@@YGHXZ ; initialise_direct_3d

; 77   : 
; 78   : 	initialise_texture_system ();

  0000e	e8 00 00 00 00	 call	 ?initialise_texture_system@@YGHXZ ; initialise_texture_system

; 79   : 
; 80   : 	set_fpu_rounding_mode_zero ();

  00013	e8 00 00 00 00	 call	 ?set_fpu_rounding_mode_zero@@YGXXZ ; set_fpu_rounding_mode_zero

; 81   : 
; 82   : 	return ( TRUE );

  00018	b8 01 00 00 00	 mov	 eax, 1

; 83   : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?initialise_graphics_rendering_system@@YGHXZ ENDP	; initialise_graphics_rendering_system
_TEXT	ENDS
END
