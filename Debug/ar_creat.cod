; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\userint2\ui_obj\area\ar_creat.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?overload_area_ui_object_create_functions@@YGXH@Z ; overload_area_ui_object_create_functions
EXTRN	_memset:PROC
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?get_ui_font_type@@YG?AW4FONT_TYPES@@XZ:PROC	; get_ui_font_type
EXTRN	?set_ui_object_attributes@@YGXPAUUI_OBJECT@@PAD@Z:PROC ; set_ui_object_attributes
EXTRN	?destroy_ui_object@@YGXPAUUI_OBJECT@@@Z:PROC	; destroy_ui_object
EXTRN	?increase_ui_object_counter@@YGXXZ:PROC		; increase_ui_object_counter
EXTRN	?decrease_ui_object_counter@@YGXXZ:PROC		; decrease_ui_object_counter
EXTRN	?fn_create_ui_object@@3PAP6GXPAUUI_OBJECT@@HPAD@ZA:BYTE ; fn_create_ui_object
EXTRN	?fn_destroy_ui_object@@3PAP6GXPAUUI_OBJECT@@@ZA:BYTE ; fn_destroy_ui_object
EXTRN	?fn_set_ui_object_next@@3PAP6GXPAUUI_OBJECT@@0@ZA:BYTE ; fn_set_ui_object_next
EXTRN	?fn_set_ui_object_prev@@3PAP6GXPAUUI_OBJECT@@0@ZA:BYTE ; fn_set_ui_object_prev
EXTRN	?fn_get_ui_object_graphic_type@@3PAP6GHPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_graphic_type
EXTRN	?default_unselected_text_colour@@3UREAL_COLOUR@@A:DWORD ; default_unselected_text_colour
EXTRN	?default_selected_text_colour@@3UREAL_COLOUR@@A:DWORD ; default_selected_text_colour
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\ar_creat.c
;	COMDAT ?destroy_area_ui_object@@YGXPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
_area$ = -36						; size = 4
_parent_area$ = -32					; size = 4
_stack_prev$ = -28					; size = 4
_stack_next$ = -24					; size = 4
_pred$ = -20						; size = 4
_succ$ = -16						; size = 4
_prev$ = -12						; size = 4
_next$ = -8						; size = 4
_parent$ = -4						; size = 4
_obj$ = 8						; size = 4
?destroy_area_ui_object@@YGXPAUUI_OBJECT@@@Z PROC	; destroy_area_ui_object, COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 195  : 
; 196  :    ui_object
; 197  : 		*parent,
; 198  : 		*next,
; 199  : 		*prev,
; 200  :       *succ,
; 201  :       *pred,
; 202  :       *stack_next,
; 203  :       *stack_prev;
; 204  : 
; 205  :    area_ui_object
; 206  : 		*parent_area,
; 207  :       *area;
; 208  : 
; 209  :    ////////////////////////////////////////
; 210  :    //
; 211  :    // REMOVE FROM SYSTEM
; 212  :    //
; 213  :    ////////////////////////////////////////
; 214  : 
; 215  :    ////////////////////////////////////////
; 216  :    //
; 217  :    // FREE UI_OBJECT DATA
; 218  :    //
; 219  :    ////////////////////////////////////////
; 220  : 
; 221  :    area = (area_ui_object*) obj->data;

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d dc	 mov	 DWORD PTR _area$[ebp], ecx

; 222  : 
; 223  : 	// sort out parent
; 224  : 
; 225  : 	parent = area->parent;

  00012	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  00015	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00018	89 4d fc	 mov	 DWORD PTR _parent$[ebp], ecx

; 226  : 
; 227  : 	if (parent)

  0001b	83 7d fc 00	 cmp	 DWORD PTR _parent$[ebp], 0
  0001f	74 35		 je	 SHORT $LN2@destroy_ar

; 228  : 	{
; 229  : 
; 230  : 		parent_area = (area_ui_object *) parent->data;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _parent$[ebp]
  00024	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00027	89 4d e0	 mov	 DWORD PTR _parent_area$[ebp], ecx

; 231  : 	
; 232  : 		if (parent_area->child == obj)

  0002a	8b 45 e0	 mov	 eax, DWORD PTR _parent_area$[ebp]
  0002d	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00030	3b 4d 08	 cmp	 ecx, DWORD PTR _obj$[ebp]
  00033	75 21		 jne	 SHORT $LN2@destroy_ar

; 233  : 		{
; 234  : 	
; 235  : 			if (area->next)

  00035	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  00038	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  0003c	74 0e		 je	 SHORT $LN4@destroy_ar

; 236  : 			{
; 237  : 	
; 238  : 				parent_area->child = area->next;

  0003e	8b 45 e0	 mov	 eax, DWORD PTR _parent_area$[ebp]
  00041	8b 4d dc	 mov	 ecx, DWORD PTR _area$[ebp]
  00044	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00047	89 50 40	 mov	 DWORD PTR [eax+64], edx

; 239  : 			}
; 240  : 			else

  0004a	eb 0a		 jmp	 SHORT $LN2@destroy_ar
$LN4@destroy_ar:

; 241  : 			{
; 242  : 	
; 243  : 				parent_area->child = NULL;

  0004c	8b 45 e0	 mov	 eax, DWORD PTR _parent_area$[ebp]
  0004f	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0
$LN2@destroy_ar:

; 244  : 			}
; 245  : 		}
; 246  : 	}
; 247  : 
; 248  : 	// do entity header
; 249  : 	
; 250  : 	stack_next = obj->stack_next;

  00056	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00059	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005c	89 4d e8	 mov	 DWORD PTR _stack_next$[ebp], ecx

; 251  : 
; 252  : 	stack_prev = obj->stack_prev;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00062	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00065	89 4d e4	 mov	 DWORD PTR _stack_prev$[ebp], ecx

; 253  : 
; 254  :    succ = obj->succ;

  00068	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0006b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006e	89 4d f0	 mov	 DWORD PTR _succ$[ebp], ecx

; 255  : 
; 256  :    pred = obj->pred;

  00071	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00074	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00077	89 4d ec	 mov	 DWORD PTR _pred$[ebp], ecx

; 257  : 
; 258  :    if (succ)

  0007a	83 7d f0 00	 cmp	 DWORD PTR _succ$[ebp], 0
  0007e	74 26		 je	 SHORT $LN6@destroy_ar

; 259  :    {
; 260  : 
; 261  :       if (pred)

  00080	83 7d ec 00	 cmp	 DWORD PTR _pred$[ebp], 0
  00084	74 14		 je	 SHORT $LN8@destroy_ar

; 262  :       {
; 263  : 
; 264  :          succ->pred = pred;

  00086	8b 45 f0	 mov	 eax, DWORD PTR _succ$[ebp]
  00089	8b 4d ec	 mov	 ecx, DWORD PTR _pred$[ebp]
  0008c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 265  :    
; 266  :          pred->succ = succ;

  0008f	8b 45 ec	 mov	 eax, DWORD PTR _pred$[ebp]
  00092	8b 4d f0	 mov	 ecx, DWORD PTR _succ$[ebp]
  00095	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 267  :       }
; 268  :       else

  00098	eb 0a		 jmp	 SHORT $LN9@destroy_ar
$LN8@destroy_ar:

; 269  :       {
; 270  : 
; 271  :          succ->pred = NULL;

  0009a	8b 45 f0	 mov	 eax, DWORD PTR _succ$[ebp]
  0009d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$LN9@destroy_ar:

; 272  :       }
; 273  :    }
; 274  :    else

  000a4	eb 10		 jmp	 SHORT $LN7@destroy_ar
$LN6@destroy_ar:

; 275  :    {
; 276  : 
; 277  :       if (pred)

  000a6	83 7d ec 00	 cmp	 DWORD PTR _pred$[ebp], 0
  000aa	74 0a		 je	 SHORT $LN7@destroy_ar

; 278  :       {
; 279  : 
; 280  :          pred->succ = NULL;

  000ac	8b 45 ec	 mov	 eax, DWORD PTR _pred$[ebp]
  000af	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN7@destroy_ar:

; 281  :       }
; 282  :    }
; 283  : 
; 284  :    if (stack_next)

  000b6	83 7d e8 00	 cmp	 DWORD PTR _stack_next$[ebp], 0
  000ba	74 26		 je	 SHORT $LN11@destroy_ar

; 285  :    {
; 286  : 
; 287  :       if (stack_prev)

  000bc	83 7d e4 00	 cmp	 DWORD PTR _stack_prev$[ebp], 0
  000c0	74 14		 je	 SHORT $LN13@destroy_ar

; 288  :       {
; 289  : 
; 290  :          stack_next->stack_prev = stack_prev;

  000c2	8b 45 e8	 mov	 eax, DWORD PTR _stack_next$[ebp]
  000c5	8b 4d e4	 mov	 ecx, DWORD PTR _stack_prev$[ebp]
  000c8	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 291  :    
; 292  :          stack_prev->stack_next = stack_next;

  000cb	8b 45 e4	 mov	 eax, DWORD PTR _stack_prev$[ebp]
  000ce	8b 4d e8	 mov	 ecx, DWORD PTR _stack_next$[ebp]
  000d1	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 293  :       }
; 294  :       else

  000d4	eb 0a		 jmp	 SHORT $LN14@destroy_ar
$LN13@destroy_ar:

; 295  :       {
; 296  : 
; 297  :          stack_next->stack_prev = NULL;

  000d6	8b 45 e8	 mov	 eax, DWORD PTR _stack_next$[ebp]
  000d9	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
$LN14@destroy_ar:

; 298  :       }
; 299  :    }
; 300  :    else

  000e0	eb 10		 jmp	 SHORT $LN12@destroy_ar
$LN11@destroy_ar:

; 301  :    {
; 302  : 
; 303  :       if (stack_prev)

  000e2	83 7d e4 00	 cmp	 DWORD PTR _stack_prev$[ebp], 0
  000e6	74 0a		 je	 SHORT $LN12@destroy_ar

; 304  :       {
; 305  : 
; 306  :          pred->stack_next = NULL;

  000e8	8b 45 ec	 mov	 eax, DWORD PTR _pred$[ebp]
  000eb	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$LN12@destroy_ar:

; 307  :       }
; 308  :    }
; 309  : 
; 310  : 	// do area pointers
; 311  : 
; 312  :    next = area->next;

  000f2	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  000f5	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  000f8	89 4d f8	 mov	 DWORD PTR _next$[ebp], ecx

; 313  :    prev = area->prev;

  000fb	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  000fe	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00101	89 4d f4	 mov	 DWORD PTR _prev$[ebp], ecx

; 314  : 
; 315  :    if (next)

  00104	83 7d f8 00	 cmp	 DWORD PTR _next$[ebp], 0
  00108	74 4a		 je	 SHORT $LN16@destroy_ar

; 316  :    {
; 317  : 
; 318  :       if (prev)

  0010a	83 7d f4 00	 cmp	 DWORD PTR _prev$[ebp], 0
  0010e	74 2e		 je	 SHORT $LN18@destroy_ar

; 319  :       {
; 320  : 
; 321  :          set_ui_object_prev (next, prev);

  00110	8b 45 f4	 mov	 eax, DWORD PTR _prev$[ebp]
  00113	50		 push	 eax
  00114	8b 4d f8	 mov	 ecx, DWORD PTR _next$[ebp]
  00117	51		 push	 ecx
  00118	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  0011b	8b 02		 mov	 eax, DWORD PTR [edx]
  0011d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_prev@@3PAP6GXPAUUI_OBJECT@@0@ZA[eax*4]
  00124	ff d1		 call	 ecx

; 322  :    
; 323  :          set_ui_object_next (prev, next);

  00126	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00129	50		 push	 eax
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR _prev$[ebp]
  0012d	51		 push	 ecx
  0012e	8b 55 f4	 mov	 edx, DWORD PTR _prev$[ebp]
  00131	8b 02		 mov	 eax, DWORD PTR [edx]
  00133	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_next@@3PAP6GXPAUUI_OBJECT@@0@ZA[eax*4]
  0013a	ff d1		 call	 ecx

; 324  :       }
; 325  :       else

  0013c	eb 14		 jmp	 SHORT $LN19@destroy_ar
$LN18@destroy_ar:

; 326  :       {
; 327  : 
; 328  :          set_ui_object_prev (next, NULL);

  0013e	6a 00		 push	 0
  00140	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00143	50		 push	 eax
  00144	8b 4d f8	 mov	 ecx, DWORD PTR _next$[ebp]
  00147	8b 11		 mov	 edx, DWORD PTR [ecx]
  00149	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_prev@@3PAP6GXPAUUI_OBJECT@@0@ZA[edx*4]
  00150	ff d0		 call	 eax
$LN19@destroy_ar:

; 329  :       }
; 330  :    }
; 331  :    else

  00152	eb 1a		 jmp	 SHORT $LN17@destroy_ar
$LN16@destroy_ar:

; 332  :    {
; 333  : 
; 334  :       if (prev)

  00154	83 7d f4 00	 cmp	 DWORD PTR _prev$[ebp], 0
  00158	74 14		 je	 SHORT $LN17@destroy_ar

; 335  :       {
; 336  : 
; 337  :          set_ui_object_next (prev, NULL);

  0015a	6a 00		 push	 0
  0015c	8b 45 f4	 mov	 eax, DWORD PTR _prev$[ebp]
  0015f	50		 push	 eax
  00160	8b 4d f4	 mov	 ecx, DWORD PTR _prev$[ebp]
  00163	8b 11		 mov	 edx, DWORD PTR [ecx]
  00165	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_next@@3PAP6GXPAUUI_OBJECT@@0@ZA[edx*4]
  0016c	ff d0		 call	 eax
$LN17@destroy_ar:

; 338  :       }
; 339  :    }
; 340  : 
; 341  : 	if (area->child)

  0016e	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  00171	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00175	74 0c		 je	 SHORT $LN21@destroy_ar

; 342  : 	{
; 343  : 
; 344  : 		destroy_ui_object (area->child);

  00177	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  0017a	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0017d	51		 push	 ecx
  0017e	e8 00 00 00 00	 call	 ?destroy_ui_object@@YGXPAUUI_OBJECT@@@Z ; destroy_ui_object
$LN21@destroy_ar:

; 345  : 	}
; 346  : 
; 347  :    // free text
; 348  : 
; 349  :    if (area->text)

  00183	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  00186	83 78 68 00	 cmp	 DWORD PTR [eax+104], 0
  0018a	74 0c		 je	 SHORT $LN22@destroy_ar

; 350  :    {
; 351  : 
; 352  :       safe_free (area->text);

  0018c	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  0018f	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  00192	51		 push	 ecx
  00193	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN22@destroy_ar:

; 353  :    }
; 354  : 
; 355  :    if (area->tool_tips)

  00198	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  0019b	83 78 6c 00	 cmp	 DWORD PTR [eax+108], 0
  0019f	74 0c		 je	 SHORT $LN23@destroy_ar

; 356  :    {
; 357  : 
; 358  :       safe_free (area->tool_tips);

  001a1	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  001a4	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  001a7	51		 push	 ecx
  001a8	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN23@destroy_ar:

; 359  :    }
; 360  : 
; 361  : 	// free memory graphic
; 362  : 
; 363  :    if (get_ui_object_graphic_type (obj) == UI_OBJECT_MEMORY_GRAPHIC)

  001ad	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  001b0	50		 push	 eax
  001b1	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  001b4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b6	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_graphic_type@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
  001bd	ff d0		 call	 eax
  001bf	83 f8 02	 cmp	 eax, 2
  001c2	75 0c		 jne	 SHORT $LN24@destroy_ar

; 364  :    {
; 365  : 
; 366  :       destroy_screen (area->memory_graphic);

  001c4	8b 45 dc	 mov	 eax, DWORD PTR _area$[ebp]
  001c7	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  001ca	51		 push	 ecx
  001cb	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen
$LN24@destroy_ar:

; 367  :    }
; 368  : 
; 369  :    // free ui_object
; 370  : 
; 371  :    safe_free (obj->data);

  001d0	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  001d3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001d6	51		 push	 ecx
  001d7	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 372  : 
; 373  : 	decrease_ui_object_counter ();

  001dc	e8 00 00 00 00	 call	 ?decrease_ui_object_counter@@YGXXZ ; decrease_ui_object_counter

; 374  : }

  001e1	5f		 pop	 edi
  001e2	5e		 pop	 esi
  001e3	5b		 pop	 ebx
  001e4	8b e5		 mov	 esp, ebp
  001e6	5d		 pop	 ebp
  001e7	c2 04 00	 ret	 4
?destroy_area_ui_object@@YGXPAUUI_OBJECT@@@Z ENDP	; destroy_area_ui_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\ar_creat.c
;	COMDAT ?create_area_ui_object@@YGXPAUUI_OBJECT@@HPAD@Z
_TEXT	SEGMENT
_new_object$ = -4					; size = 4
_obj$ = 8						; size = 4
_type$ = 12						; size = 4
_pargs$ = 16						; size = 4
?create_area_ui_object@@YGXPAUUI_OBJECT@@HPAD@Z PROC	; create_area_ui_object, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 
; 76   :    area_ui_object
; 77   :       *new_object;
; 78   : 
; 79   : 	increase_ui_object_counter ();

  00009	e8 00 00 00 00	 call	 ?increase_ui_object_counter@@YGXXZ ; increase_ui_object_counter

; 80   : 
; 81   :    ////////////////////////////////////////
; 82   :    //
; 83   :    // MALLOC ENTITY DATA
; 84   :    //
; 85   :    ////////////////////////////////////////
; 86   : 
; 87   :    obj->type = type;

  0000e	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 88   : 
; 89   :    new_object = (area_ui_object*) safe_malloc (sizeof (area_ui_object));

  00016	68 e4 00 00 00	 push	 228			; 000000e4H
  0001b	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00020	89 45 fc	 mov	 DWORD PTR _new_object$[ebp], eax

; 90   : 
; 91   :    obj->data = new_object;

  00023	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _new_object$[ebp]
  00029	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 92   : 
; 93   :    ////////////////////////////////////////
; 94   :    //
; 95   :    // INITIALISE ALL ENTITY DATA TO 'WORKING' DEFAULT VALUES
; 96   :    //
; 97   :    // DO NOT USE ACCESS FUNCTIONS
; 98   :    //
; 99   :    // DO NOT USE RANDOM VALUES
; 100  :    //
; 101  :    ////////////////////////////////////////
; 102  : 
; 103  :    memset (new_object, 0, sizeof (area_ui_object));

  0002c	68 e4 00 00 00	 push	 228			; 000000e4H
  00031	6a 00		 push	 0
  00033	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _memset
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 104  : 
; 105  :    //new_object->x = 0.0;
; 106  :    //new_object->y = 0.0;
; 107  :    //new_object->x_size = 0.0;
; 108  :    //new_object->y_size = 0.0;
; 109  :    new_object->x_origin = 0.0;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00042	0f 57 c0	 xorps	 xmm0, xmm0
  00045	f3 0f 11 40 30	 movss	 DWORD PTR [eax+48], xmm0

; 110  :    new_object->y_origin = 0.0;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0004d	0f 57 c0	 xorps	 xmm0, xmm0
  00050	f3 0f 11 40 34	 movss	 DWORD PTR [eax+52], xmm0

; 111  :    new_object->drawable = 1;

  00055	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00058	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0005b	83 c9 20	 or	 ecx, 32			; 00000020H
  0005e	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  00061	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 112  :    new_object->item_number = -1;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00067	c7 40 54 ff ff
	ff ff		 mov	 DWORD PTR [eax+84], -1

; 113  :    new_object->item_number2 = -1;				// DL - Wasn't initialised (should it be?)

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00071	c7 40 58 ff ff
	ff ff		 mov	 DWORD PTR [eax+88], -1

; 114  :    new_object->redraw = 1;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0007b	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0007e	81 e1 7f 80 ff
	ff		 and	 ecx, -32641		; ffff807fH
  00084	81 c9 80 00 00
	00		 or	 ecx, 128		; 00000080H
  0008a	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  0008d	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 115  :    new_object->text_justify = TEXT_JUSTIFY_CENTRE;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00093	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00096	83 e1 f0	 and	 ecx, -16		; fffffff0H
  00099	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  0009c	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 116  :    new_object->state = UI_OBJECT_STATE_OFF;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  000a2	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000a5	83 e1 e7	 and	 ecx, -25		; ffffffe7H
  000a8	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  000ab	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 117  :    new_object->notify_on = NOTIFY_TYPE_BUTTON_UP;

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  000b1	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000b4	81 e1 ff ff ff
	87		 and	 ecx, -2013265921	; 87ffffffH
  000ba	81 c9 00 00 00
	08		 or	 ecx, 134217728		; 08000000H
  000c0	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  000c3	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 118  :    new_object->highlighted_notify_on = NOTIFY_TYPE_BUTTON_EITHER;

  000c6	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  000c9	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000cc	81 e1 ff ff 7f
	f8		 and	 ecx, -125829121		; f87fffffH
  000d2	81 c9 00 00 80
	01		 or	 ecx, 25165824		; 01800000H
  000d8	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  000db	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 119  :    new_object->moveable = 0;

  000de	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  000e1	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000e4	81 e1 ff 7f ff
	ff		 and	 ecx, -32769		; ffff7fffH
  000ea	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  000ed	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 120  :    new_object->resizeable = 0;

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  000f3	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000f6	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  000fc	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  000ff	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 121  :    new_object->parent = NULL;

  00102	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00105	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 122  :    new_object->child = NULL;

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0010f	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 123  :    new_object->next = NULL;

  00116	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00119	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 124  :    new_object->prev = NULL;

  00120	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00123	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 125  : 	new_object->colour_start.r = 255;

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0012d	c6 80 82 00 00
	00 ff		 mov	 BYTE PTR [eax+130], 255	; 000000ffH

; 126  : 	new_object->colour_start.g = 255;

  00134	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00137	c6 80 81 00 00
	00 ff		 mov	 BYTE PTR [eax+129], 255	; 000000ffH

; 127  : 	new_object->colour_start.b = 255;

  0013e	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00141	c6 80 80 00 00
	00 ff		 mov	 BYTE PTR [eax+128], 255	; 000000ffH

; 128  : 	new_object->colour_start.a = 255;

  00148	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0014b	c6 80 83 00 00
	00 ff		 mov	 BYTE PTR [eax+131], 255	; 000000ffH

; 129  : 	new_object->colour_end.r = 255;

  00152	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00155	c6 40 7e ff	 mov	 BYTE PTR [eax+126], 255	; 000000ffH

; 130  : 	new_object->colour_end.g = 255;

  00159	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0015c	c6 40 7d ff	 mov	 BYTE PTR [eax+125], 255	; 000000ffH

; 131  : 	new_object->colour_end.b = 255;

  00160	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00163	c6 40 7c ff	 mov	 BYTE PTR [eax+124], 255	; 000000ffH

; 132  : 	new_object->colour_end.a = 255;

  00167	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0016a	c6 40 7f ff	 mov	 BYTE PTR [eax+127], 255	; 000000ffH

; 133  :    new_object->font_type = UI_FONT_ARIAL_10;

  0016e	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00171	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0

; 134  :    new_object->font_colour_end = default_unselected_text_colour;

  00178	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0017b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?default_unselected_text_colour@@3UREAL_COLOUR@@A ; default_unselected_text_colour
  00181	89 88 94 00 00
	00		 mov	 DWORD PTR [eax+148], ecx

; 135  :    new_object->font_colour_start = default_unselected_text_colour;

  00187	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0018a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?default_unselected_text_colour@@3UREAL_COLOUR@@A ; default_unselected_text_colour
  00190	89 88 98 00 00
	00		 mov	 DWORD PTR [eax+152], ecx

; 136  :    new_object->highlighted_font_type = -1;

  00196	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00199	c7 40 60 ff ff
	ff ff		 mov	 DWORD PTR [eax+96], -1

; 137  :    new_object->highlighted_font_colour_end = default_selected_text_colour;

  001a0	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  001a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?default_selected_text_colour@@3UREAL_COLOUR@@A ; default_selected_text_colour
  001a9	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx

; 138  :    new_object->highlighted_font_colour_start = default_selected_text_colour;

  001af	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  001b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?default_selected_text_colour@@3UREAL_COLOUR@@A ; default_selected_text_colour
  001b8	89 88 a0 00 00
	00		 mov	 DWORD PTR [eax+160], ecx

; 139  :    new_object->selected_font_type = -1;

  001be	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  001c1	c7 40 5c ff ff
	ff ff		 mov	 DWORD PTR [eax+92], -1

; 140  :    new_object->selected_font_colour_end = default_selected_text_colour;

  001c8	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  001cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?default_selected_text_colour@@3UREAL_COLOUR@@A ; default_selected_text_colour
  001d1	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 141  :    new_object->selected_font_colour_start = default_selected_text_colour;

  001d7	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  001da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?default_selected_text_colour@@3UREAL_COLOUR@@A ; default_selected_text_colour
  001e0	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx

; 142  :    new_object->user_flag1 = 0;

  001e6	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  001e9	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001ec	83 e1 ef	 and	 ecx, -17		; ffffffefH
  001ef	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  001f2	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 143  :    new_object->user_flag2 = 0;

  001f5	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  001f8	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001fb	83 e1 df	 and	 ecx, -33		; ffffffdfH
  001fe	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  00201	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 144  :    new_object->user_flag3 = 0;

  00204	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00207	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0020a	83 e1 bf	 and	 ecx, -65		; ffffffbfH
  0020d	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  00210	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 145  :    new_object->user_flag4 = 0;

  00213	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00216	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00219	81 e1 7f ff ff
	ff		 and	 ecx, -129		; ffffff7fH
  0021f	8b 55 fc	 mov	 edx, DWORD PTR _new_object$[ebp]
  00222	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 146  :    new_object->user_ptr = NULL;

  00225	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00228	c7 80 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+204], 0

; 147  : 
; 148  : 	new_object->time_length = 1.0;

  00232	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00235	c7 80 b8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+184], 1

; 149  : 
; 150  :    ////////////////////////////////////////
; 151  :    //
; 152  :    // OVERWRITE DEFAULTS WITH GIVEN ATTRIBUTES
; 153  :    //
; 154  :    ////////////////////////////////////////
; 155  : 
; 156  :    set_ui_object_attributes (obj, pargs);

  0023f	8b 45 10	 mov	 eax, DWORD PTR _pargs$[ebp]
  00242	50		 push	 eax
  00243	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00246	51		 push	 ecx
  00247	e8 00 00 00 00	 call	 ?set_ui_object_attributes@@YGXPAUUI_OBJECT@@PAD@Z ; set_ui_object_attributes

; 157  : 
; 158  :    ////////////////////////////////////////
; 159  : 	//
; 160  : 	// Check the font default values & override them if not set
; 161  : 	//
; 162  :    ////////////////////////////////////////
; 163  : 
; 164  : 	if ( new_object->font_type == -1 )

  0024c	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0024f	83 78 64 ff	 cmp	 DWORD PTR [eax+100], -1
  00253	75 0b		 jne	 SHORT $LN2@create_are

; 165  : 	{
; 166  : 
; 167  : 		new_object->font_type = get_ui_font_type ();

  00255	e8 00 00 00 00	 call	 ?get_ui_font_type@@YG?AW4FONT_TYPES@@XZ ; get_ui_font_type
  0025a	8b 4d fc	 mov	 ecx, DWORD PTR _new_object$[ebp]
  0025d	89 41 64	 mov	 DWORD PTR [ecx+100], eax
$LN2@create_are:

; 168  : 	}
; 169  : 
; 170  : 	if ( new_object->highlighted_font_type == -1 )

  00260	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00263	83 78 60 ff	 cmp	 DWORD PTR [eax+96], -1
  00267	75 0c		 jne	 SHORT $LN3@create_are

; 171  : 	{
; 172  : 
; 173  : 		new_object->highlighted_font_type = new_object->font_type;

  00269	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  0026c	8b 4d fc	 mov	 ecx, DWORD PTR _new_object$[ebp]
  0026f	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  00272	89 50 60	 mov	 DWORD PTR [eax+96], edx
$LN3@create_are:

; 174  : 	}
; 175  : 
; 176  : 	if ( new_object->selected_font_type == -1 )

  00275	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00278	83 78 5c ff	 cmp	 DWORD PTR [eax+92], -1
  0027c	75 0c		 jne	 SHORT $LN4@create_are

; 177  : 	{
; 178  : 
; 179  : 		new_object->selected_font_type = new_object->font_type;

  0027e	8b 45 fc	 mov	 eax, DWORD PTR _new_object$[ebp]
  00281	8b 4d fc	 mov	 ecx, DWORD PTR _new_object$[ebp]
  00284	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  00287	89 50 5c	 mov	 DWORD PTR [eax+92], edx
$LN4@create_are:

; 180  : 	}
; 181  : 
; 182  :    ////////////////////////////////////////
; 183  :    //
; 184  :    // INTEGRATE INTO SYSTEM
; 185  :    //
; 186  :    ////////////////////////////////////////
; 187  : }

  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c2 0c 00	 ret	 12			; 0000000cH
?create_area_ui_object@@YGXPAUUI_OBJECT@@HPAD@Z ENDP	; create_area_ui_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\ar_creat.c
;	COMDAT ?overload_area_ui_object_create_functions@@YGXH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
?overload_area_ui_object_create_functions@@YGXH@Z PROC	; overload_area_ui_object_create_functions, COMDAT

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 382  : 
; 383  : 	fn_create_ui_object [type] 	= create_area_ui_object;

  00009	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0000c	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_create_ui_object@@3PAP6GXPAUUI_OBJECT@@HPAD@ZA[eax*4], OFFSET ?create_area_ui_object@@YGXPAUUI_OBJECT@@HPAD@Z ; create_area_ui_object

; 384  : 
; 385  : 	fn_destroy_ui_object [type] 	= destroy_area_ui_object;

  00017	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0001a	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_destroy_ui_object@@3PAP6GXPAUUI_OBJECT@@@ZA[eax*4], OFFSET ?destroy_area_ui_object@@YGXPAUUI_OBJECT@@@Z ; destroy_area_ui_object

; 386  : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?overload_area_ui_object_create_functions@@YGXH@Z ENDP	; overload_area_ui_object_create_functions
_TEXT	ENDS
END
