; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\comms\comm_man.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?tx_pack_buffer@@3PAEA				; tx_pack_buffer
PUBLIC	?server_response@@3W4SERVER_RESPONSE_TYPES@@A	; server_response
PUBLIC	?mastersocket@@3HA				; mastersocket
PUBLIC	?mastersocket2@@3HA				; mastersocket2
PUBLIC	?MasterPort@@3FA				; MasterPort
PUBLIC	?last_heartbeat_time@@3IA			; last_heartbeat_time
PUBLIC	?num_multiplayer_refreshes@@3HA			; num_multiplayer_refreshes
PUBLIC	?Servers@@3PAUServerData@@A			; Servers
PUBLIC	?numServers@@3HA				; numServers
PUBLIC	?data_record_size@@3HA				; data_record_size
PUBLIC	?Master@@3Usockaddr_in@@A			; Master
PUBLIC	?Master2@@3Usockaddr_in@@A			; Master2
PUBLIC	?localplayer@@3PADA				; localplayer
PUBLIC	?ReceiveBuffer@@3PADA				; ReceiveBuffer
PUBLIC	?SendBuffer@@3PADA				; SendBuffer
PUBLIC	?PACKET_SIZE@@3HA				; PACKET_SIZE
PUBLIC	?from@@3Usockaddr@@A				; from
PUBLIC	??_C@_07MCAEODGB@Default@			; `string'
PUBLIC	??_C@_06NALKMBEE@Summer@			; `string'
PUBLIC	??_C@_06DKFAEFHC@Winter@			; `string'
PUBLIC	??_C@_06CEECHCOA@Desert@			; `string'
_BSS	SEGMENT
?tx_pack_buffer@@3PAEA DD 01H DUP (?)			; tx_pack_buffer
?server_response@@3W4SERVER_RESPONSE_TYPES@@A DD 01H DUP (?) ; server_response
?last_heartbeat_time@@3IA DD 01H DUP (?)		; last_heartbeat_time
?num_multiplayer_refreshes@@3HA DD 01H DUP (?)		; num_multiplayer_refreshes
?Servers@@3PAUServerData@@A DB 09a4c0H DUP (?)		; Servers
?numServers@@3HA DD 01H DUP (?)				; numServers
?data_record_size@@3HA DD 01H DUP (?)			; data_record_size
?Master@@3Usockaddr_in@@A DB 010H DUP (?)		; Master
?Master2@@3Usockaddr_in@@A DB 010H DUP (?)		; Master2
?localplayer@@3PADA DB 0100H DUP (?)			; localplayer
?ReceiveBuffer@@3PADA DB 0ffffH DUP (?)			; ReceiveBuffer
	ALIGN	4

?SendBuffer@@3PADA DB 0ffffH DUP (?)			; SendBuffer
	ALIGN	4

?from@@3Usockaddr@@A DB 010H DUP (?)			; from
_BSS	ENDS
;	COMDAT ??_C@_06CEECHCOA@Desert@
CONST	SEGMENT
??_C@_06CEECHCOA@Desert@ DB 'Desert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKFAEFHC@Winter@
CONST	SEGMENT
??_C@_06DKFAEFHC@Winter@ DB 'Winter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NALKMBEE@Summer@
CONST	SEGMENT
??_C@_06NALKMBEE@Summer@ DB 'Summer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MCAEODGB@Default@
CONST	SEGMENT
??_C@_07MCAEODGB@Default@ DB 'Default', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?mastersocket@@3HA DD 0ffffffffH			; mastersocket
?mastersocket2@@3HA DD 0ffffffffH			; mastersocket2
?MasterPort@@3FA DW 055fH				; MasterPort
	ORG $+2
?PACKET_SIZE@@3HA DD 01000H				; PACKET_SIZE
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfscanf_l
PUBLIC	_fscanf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	__vsscanf_l
PUBLIC	_sscanf
PUBLIC	?strstr@@YAPADQADQBD@Z				; strstr
PUBLIC	?comms_clear_data_record@@YGXXZ			; comms_clear_data_record
PUBLIC	?receive_comms_data@@YGXXZ			; receive_comms_data
PUBLIC	?send_comms_data@@YGXXZ				; send_comms_data
PUBLIC	?comms_send_data@@YGXXZ				; comms_send_data
PUBLIC	?data_exchange@@YGXXZ				; data_exchange
PUBLIC	?initialise_comms_manager@@YGXXZ		; initialise_comms_manager
PUBLIC	?deinitialise_comms_manager@@YGXXZ		; deinitialise_comms_manager
PUBLIC	?comms_process_data@@YGXXZ			; comms_process_data
PUBLIC	?update_ui_comms@@YGXXZ				; update_ui_comms
PUBLIC	?net_init_heartbeat@@YGXXZ			; net_init_heartbeat
PUBLIC	?net_handle_heartbeat@@YGXXZ			; net_handle_heartbeat
PUBLIC	?net_uninit_heartbeat@@YGXXZ			; net_uninit_heartbeat
PUBLIC	?net_set_hostname@@YGXPBD@Z			; net_set_hostname
PUBLIC	?net_getServerList@@YGXXZ			; net_getServerList
PUBLIC	?LookUpIPAddress@@YGKPAD@Z			; LookUpIPAddress
PUBLIC	?net_CheckForDataOnSocket@@YGHHH@Z		; net_CheckForDataOnSocket
PUBLIC	?net_sendDataToMaster@@YGXPADH@Z		; net_sendDataToMaster
PUBLIC	?net_receiveData@@YGXH@Z			; net_receiveData
PUBLIC	?net_connectToMaster@@YGHPADFH@Z		; net_connectToMaster
PUBLIC	?net_heartbeat@@YGXXZ				; net_heartbeat
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??comms_clear_data_record@@YGXXZ@4JA ; `comms_clear_data_record'::`1'::__LINE__Var
PUBLIC	??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0M@MOGFNBMO@data_record@			; `string'
PUBLIC	??_C@_0CJ@DJJCJBCH@command_line_comms_data_record_@ ; `string'
PUBLIC	?__LINE__Var@?0??comms_record_data@@YGXPAEH@Z@4JA ; `comms_record_data'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??data_exchange@@YGXXZ@4JA	; `data_exchange'::`1'::__LINE__Var
PUBLIC	??_C@_0BN@FGJBMJHL@?$CBget_pack_buffer_overflow?5?$CI?$CJ@ ; `string'
PUBLIC	?__LINE__Var@?0??send_comms_data@@YGXXZ@4JA	; `send_comms_data'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA	; `comms_process_data'::`1'::__LINE__Var
PUBLIC	??_C@_0FB@GCCLHEAH@COMM_MAN?3?5REJECTING?5CONNECTION?4@ ; `string'
PUBLIC	??_C@_01LOCGONAA@?$AA@				; `string'
PUBLIC	??_C@_0CD@FPKJHBDA@COMM_MAN?3?5not?5resending?5query?5d@ ; `string'
PUBLIC	??_C@_08LNEOKFHF@motd?4txt@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@		; `string'
PUBLIC	??_C@_0BD@IBNOHPMA@motd?4txt?5too?5long?$CB@	; `string'
PUBLIC	??_C@_04OKGDLNCL@NONE@				; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_0BD@OIJFFENJ@Server?5WUT?5version@	; `string'
PUBLIC	??_C@_06DJHOIPC@?$CFs?3?5?$CFs@			; `string'
PUBLIC	??_C@_0BA@MIHBCHBI@Map?5GOTO?5button@		; `string'
PUBLIC	??_C@_06GBEGMGE@?$CFs?3?5?$CFd@			; `string'
PUBLIC	??_C@_0BE@DNDNEHBM@Vector?5flight?5model@	; `string'
PUBLIC	??_C@_0BH@MPJEHPHJ@Radar?5ignores?5infantry@	; `string'
PUBLIC	??_C@_0BD@MFBPGKKB@Campaign?5Commander@		; `string'
PUBLIC	??_C@_0EO@EDKMIAJ@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5comm@ ; `string'
PUBLIC	??_C@_0DL@GJMCPLP@COMM_MAN?3?5received?5CONNECTION_V@ ; `string'
PUBLIC	??_C@_0DP@ENFNOCHJ@COMM_MAN?3?5received?5CONNECTION_R@ ; `string'
PUBLIC	??_C@_0EK@OCJFLGDK@COMM_MAN?3?5Incorrect?5version?4?5Se@ ; `string'
PUBLIC	??_C@_0BK@BJFDIGMH@Incompatible?5game?5version@	; `string'
PUBLIC	??_C@_0HC@BLMILHPN@Downwash?5has?5to?5be?5turned?5off?5f@ ; `string'
PUBLIC	??_C@_0BH@IIKFIKHA@?$CFs?2terrain?2terrain?4ffp@ ; `string'
PUBLIC	??_C@_0BF@PHJLJGMF@UNRECOGNISED_WARZONE@	; `string'
PUBLIC	??_C@_0CK@FOCLCND@COMMS?5MAN?3?5browse?3?5received?5siz@ ; `string'
PUBLIC	??_C@_0BG@PCHAHDPE@REQUIRES_APACHE_HAVOC@	; `string'
PUBLIC	??_C@_07OLBIDKLK@Players@			; `string'
PUBLIC	??_C@_07IFNDKGJF@?$CFs?5?3?5?$CFd@		; `string'
PUBLIC	??_C@_05NLDACDCJ@?$CF2d?5?5@			; `string'
PUBLIC	??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ ; `string'
PUBLIC	??_C@_0CK@HPHANGDF@COMMS?5MAN?3?5RECEIVED?5PILOT?5REQUE@ ; `string'
PUBLIC	??_C@_09FAIPAGNP@new_pilot@			; `string'
PUBLIC	??_C@_0DG@HCPKNGAG@COMMS?5MAN?3?5RECEIVED?5GUNSHIP?5REQ@ ; `string'
PUBLIC	??_C@_0CM@JFMBCBGH@COMMS?5MAN?3?5RECEIVED?5GUNSHIP?5REQ@ ; `string'
PUBLIC	??_C@_0CH@IDAADFLB@index_number?5?$CB?$DN?5ENTITY_INDEX_DO@ ; `string'
PUBLIC	??_C@_0EG@KKDHOJLJ@COMMS?5MAN?3?5REFUSING?5GUNSHIP?5FOR@ ; `string'
PUBLIC	??_C@_0DL@JJECMCLK@COMMS?5MAN?3?5Refusing?5gunship?5for@ ; `string'
PUBLIC	??_C@_0EH@IAMIFHCB@COMMS?5MAN?3?5sending?5gunship?5requ@ ; `string'
PUBLIC	??_C@_0BI@OFBPPECD@?$CFs?5is?5trying?5to?5join?4?4?4@ ; `string'
PUBLIC	??_C@_0BJ@IOKBKAHN@Received?5join?5request?4?4?4@ ; `string'
PUBLIC	??_C@_0DC@HMPPMNAL@COMMS?5MAN?3?5received?5CLIENT?5FRAM@ ; `string'
PUBLIC	??_C@_0EA@IHFEMGIH@COMMS?5MAN?3?5sending?5packet?5?$CFd?5fr@ ; `string'
PUBLIC	??_C@_0M@GPMMIJAD@stub_packet@			; `string'
PUBLIC	??_C@_0BL@DBIDLLAO@COMMS?5MAN?3?5Gunship?5refused@ ; `string'
PUBLIC	??_C@_0CL@GBJMDJMJ@COMMS?5MAN?3?5received?5GUNSHIP?5ACC@ ; `string'
PUBLIC	??_C@_0BE@KOLCCDEB@get_pilot_entity?5?$CI?$CJ@	; `string'
PUBLIC	??_C@_0BK@OOCPIHGJ@COMM_MAN?3?5setting?5gunship@ ; `string'
PUBLIC	??_C@_0BF@JNEDHLHL@ingame?5screen?5events@	; `string'
PUBLIC	??_C@_0BG@NLIPNNPH@COMM_MAN?3?5gunship?5set@	; `string'
PUBLIC	??_C@_0CJ@HDFJMCJJ@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ ; `string'
PUBLIC	??_C@_0CJ@MECBGBBM@COMMS?5MAN?3?5received?5PILOT?5ACCEP@ ; `string'
PUBLIC	??_C@_03OMFNLMOB@SID@				; `string'
PUBLIC	??_C@_03GFECJACO@DAT@				; `string'
PUBLIC	??_C@_0CC@JFDEIDNB@COMMS?5MAN?3?5received?5size?5overfl@ ; `string'
PUBLIC	??_C@_0N@CCJGGLLF@session_data@			; `string'
PUBLIC	??_C@_0BP@BOGKLLAF@?$CBget_unpack_buffer_overflow?5?$CI?$CJ@ ; `string'
PUBLIC	??_C@_0CF@DFDJEAKO@COMMS?5MAN?3?5received?5END?5GAME?5fr@ ; `string'
PUBLIC	??_C@_0N@PIDGJJP@?5?5?5?5from?5?$CFs?5@		; `string'
PUBLIC	??_C@_0DD@LDALAFJ@COMMS?5MAN?3?5received?5SERVER?5REJE@ ; `string'
PUBLIC	??_C@_0CN@KFJNHJLN@ERROR?3?5Data?5Exchange?0?5unknown?5p@ ; `string'
PUBLIC	??_C@_0CP@FBMCMMNN@HEARTBEAT?3?5sending?5heartbeat?5to@ ; `string'
PUBLIC	??_C@_0DB@NMDBFNOB@HEARTBEAT?3?5sending?5heartbeat?5to@ ; `string'
PUBLIC	??_C@_0CI@FAPGOBJJ@HEARTBEAT?3?5Connecting?5to?5primar@ ; `string'
PUBLIC	??_C@_0CK@DNBFPDLJ@HEARTBEAT?3?5Connecting?5to?5second@ ; `string'
PUBLIC	??_C@_0CP@OPFCIOBH@HEARTBEAT?3?5ERROR?5connecting?5to?5@ ; `string'
PUBLIC	??_C@_0DB@MIGLBACL@HEARTBEAT?3?5ERROR?5connecting?5to?5@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0L@IFLEJOCB@?$CFd?4?$CFd?4?$CFd?$CFs@	; `string'
PUBLIC	??_C@_09PFCHIMEP@127?40?40?41@			; `string'
PUBLIC	??_C@_01POHCFINO@Z@				; `string'
PUBLIC	??_C@_0BC@KGOOAEAC@?$CFs?5?$CFs?5?$CFs?5?$CFi?5?$CFi?5?$CFs@ ; `string'
PUBLIC	??_C@_0BH@FOMCACDJ@HEARTBEAT?3?5sending?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BE@KBLCGJOL@GETSERVERLIST?3?5Init@	; `string'
PUBLIC	??_C@_01NFFPALBN@Y@				; `string'
PUBLIC	??_C@_0BM@JDEKKDPO@GETSERVERLIST?3?5Request?5sent@ ; `string'
PUBLIC	??_C@_0BM@HDGNBLLN@GETSERVERLIST?3?5Received?3?5?$CFs@ ; `string'
PUBLIC	??_C@_07EFHCMFIH@X?5Done?$CB@			; `string'
PUBLIC	??_C@_0CK@KMFCHCEN@HEARTBEAT?3?5after?5heartbeat?5init@ ; `string'
PUBLIC	??_C@_0CH@CHBBMAOB@HEARTBEAT?3?5Time?5for?5another?5hea@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40400000
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp____stdio_common_vfscanf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strstr:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncat:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	__imp___strupr:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?server_log@@YAXPBDZZ:PROC			; server_log
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?debug_filtered_log@@YAXPBDZZ:PROC		; debug_filtered_log
EXTRN	?set_mouse_graphic_on@@YGXXZ:PROC		; set_mouse_graphic_on
EXTRN	?set_mouse_graphic_off@@YGXXZ:PROC		; set_mouse_graphic_off
EXTRN	?push_event@@YGXP6GXXZPBD@Z:PROC		; push_event
EXTRN	?pop_event@@YGXP6GXXZ@Z:PROC			; pop_event
EXTRN	?set_delta_time@@YGXXZ:PROC			; set_delta_time
EXTRN	?get_system_time@@YGIXZ:PROC			; get_system_time
EXTRN	?file_exist@@YGHPBD@Z:PROC			; file_exist
EXTRN	?file_size@@YGHPBD@Z:PROC			; file_size
EXTRN	?malloc_heap_memory@@YGPAXI@Z:PROC		; malloc_heap_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?read_map_info_data@@YGXXZ:PROC			; read_map_info_data
EXTRN	?direct_play_get_message_queue@@YGXXZ:PROC	; direct_play_get_message_queue
EXTRN	?direct_play_session_capabilities@@YGHXZ:PROC	; direct_play_session_capabilities
EXTRN	?direct_play_get_player_name@@YGPBDK@Z:PROC	; direct_play_get_player_name
EXTRN	?direct_play_get_number_of_players@@YGHXZ:PROC	; direct_play_get_number_of_players
EXTRN	?direct_play_get_connection_data@@YGPAUCONNECTION_DATA_TYPE@@XZ:PROC ; direct_play_get_connection_data
EXTRN	?direct_play_session_max_players@@YGHXZ:PROC	; direct_play_session_max_players
EXTRN	?direct_play_get_send_queue_number_of_packets@@YGHXZ:PROC ; direct_play_get_send_queue_number_of_packets
EXTRN	?ui_force_update@@YGXXZ:PROC			; ui_force_update
EXTRN	?ui_object_destroy_list_items@@YGXPAUUI_OBJECT@@@Z:PROC ; ui_object_destroy_list_items
EXTRN	?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z:PROC ; add_to_pop_up_list_with_word_wrap
EXTRN	?initialise_noisemaps@@YGXXZ:PROC		; initialise_noisemaps
EXTRN	?initialise_formation_database@@YGXXZ:PROC	; initialise_formation_database
EXTRN	?deinitialise_formation_database@@YGXXZ:PROC	; deinitialise_formation_database
EXTRN	?initialise_formation_component_database@@YGXXZ:PROC ; initialise_formation_component_database
EXTRN	?deinitialise_formation_component_database@@YGXXZ:PROC ; deinitialise_formation_component_database
EXTRN	?add_update_function@@YGHP6GXXZMM@Z:PROC	; add_update_function
EXTRN	?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z:PROC ; send_packet
EXTRN	?receive_packets@@YGXXZ:PROC			; receive_packets
EXTRN	?process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z:PROC ; process_packet_list
EXTRN	?get_packet_destination@@YGKXZ:PROC		; get_packet_destination
EXTRN	?resend_packet@@YGPAUSTUB_PACKET_TYPE@@KHHW4SEND_TYPES@@@Z:PROC ; resend_packet
EXTRN	?update_resend_packet_list@@YGXH@Z:PROC		; update_resend_packet_list
EXTRN	?debug_comms_stats@@YGXXZ:PROC			; debug_comms_stats
EXTRN	?unregister_connection@@YGXK@Z:PROC		; unregister_connection
EXTRN	?get_connection_list_head@@YGPAUCONNECTION_LIST_TYPE@@XZ:PROC ; get_connection_list_head
EXTRN	?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z:PROC ; get_connection_list_item
EXTRN	?validate_connections@@YGXXZ:PROC		; validate_connections
EXTRN	?set_entity_world_map_size@@YGXHHH@Z:PROC	; set_entity_world_map_size
EXTRN	?open_pack_buffer@@YGXPAEH@Z:PROC		; open_pack_buffer
EXTRN	?close_pack_buffer@@YGHXZ:PROC			; close_pack_buffer
EXTRN	?get_current_pack_buffer_bit_size@@YGHXZ:PROC	; get_current_pack_buffer_bit_size
EXTRN	?open_unpack_buffer@@YGXPAEH@Z:PROC		; open_unpack_buffer
EXTRN	?close_unpack_buffer@@YGXXZ:PROC		; close_unpack_buffer
EXTRN	?create_local_only_entities@@YGXW4PACK_MODES@@@Z:PROC ; create_local_only_entities
EXTRN	?transmit_entity_comms_message@@YAXW4ENTITY_COMMS_MESSAGES@@PAUENTITY@@ZZ:PROC ; transmit_entity_comms_message
EXTRN	?process_received_entity_comms_messages@@YGXXZ:PROC ; process_received_entity_comms_messages
EXTRN	?pack_session@@YGHPAEPAHW4PACK_MODES@@@Z:PROC	; pack_session
EXTRN	?unpack_session@@YGHPAEHW4PACK_MODES@@@Z:PROC	; unpack_session
EXTRN	?reinitialise_entity_system@@YGXXZ:PROC		; reinitialise_entity_system
EXTRN	?assign_entity_to_user@@YGXPAUENTITY@@@Z:PROC	; assign_entity_to_user
EXTRN	?set_pilot_entity@@YGXPAUENTITY@@@Z:PROC	; set_pilot_entity
EXTRN	?create_new_pilot_entity@@YGPAUENTITY@@PBDW4ENTITY_SIDES@@HHHH@Z:PROC ; create_new_pilot_entity
EXTRN	?start_game_exit@@YGXW4GAME_EXIT_TYPES@@H@Z:PROC ; start_game_exit
EXTRN	?get_trans@@YGPBDPBD@Z:PROC			; get_trans
EXTRN	?set_gunship_waiting_for_connection@@YGXH@Z:PROC ; set_gunship_waiting_for_connection
EXTRN	?load_3d_terrain_game_data@@YGXXZ:PROC		; load_3d_terrain_game_data
EXTRN	?ingame_screen_set_events@@YGXXZ:PROC		; ingame_screen_set_events
EXTRN	?load_route_data@@YGXXZ:PROC			; load_route_data
EXTRN	?load_ai_sector_data@@YGXPBD@Z:PROC		; load_ai_sector_data
EXTRN	?initialise_population_name_database@@YGXXZ:PROC ; initialise_population_name_database
EXTRN	?read_sector_side_file@@YGXPBD@Z:PROC		; read_sector_side_file
EXTRN	___WSAFDIsSet@8:PROC
EXTRN	_closesocket@4:PROC
EXTRN	_htons@4:PROC
EXTRN	_inet_addr@4:PROC
EXTRN	_recvfrom@24:PROC
EXTRN	_select@20:PROC
EXTRN	_sendto@24:PROC
EXTRN	_socket@12:PROC
EXTRN	_gethostbyname@4:PROC
EXTRN	?event_stack_head@@3PAUEVENT_STACK@@A:DWORD	; event_stack_head
EXTRN	?sys_col_white@@3UREAL_COLOUR@@A:DWORD		; sys_col_white
EXTRN	?current_map_info@@3UCUSTOM_MAP_INFO@@A:BYTE	; current_map_info
EXTRN	_DPSPGUID_TCPIP:BYTE
EXTRN	?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_drawable
EXTRN	?fn_set_ui_object_redraw@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_redraw
EXTRN	?ui_colour_white@@3UREAL_COLOUR@@A:DWORD	; ui_colour_white
EXTRN	?command_line_report_to_masterserver@@3HA:DWORD	; command_line_report_to_masterserver
EXTRN	?command_line_comms_packet_throttle_limit@@3HA:DWORD ; command_line_comms_packet_throttle_limit
EXTRN	?command_line_comms_resend_list_size@@3HA:DWORD	; command_line_comms_resend_list_size
EXTRN	?command_line_comms_packet_data_size@@3HA:DWORD	; command_line_comms_packet_data_size
EXTRN	?command_line_comms_packet_rerequest_limit@@3HA:DWORD ; command_line_comms_packet_rerequest_limit
EXTRN	?command_line_comms_data_record_size@@3HA:DWORD	; command_line_comms_data_record_size
EXTRN	?command_line_comms_pack_buffer_size@@3HA:DWORD	; command_line_comms_pack_buffer_size
EXTRN	?command_line_comms_validate_connections@@3HA:DWORD ; command_line_comms_validate_connections
EXTRN	?command_line_max_game_update_rate@@3HA:DWORD	; command_line_max_game_update_rate
EXTRN	?command_line_vector_flight_model@@3HA:DWORD	; command_line_vector_flight_model
EXTRN	?command_line_planner_goto_button@@3HA:DWORD	; command_line_planner_goto_button
EXTRN	?command_line_ground_radar_ignores_infantry@@3HA:DWORD ; command_line_ground_radar_ignores_infantry
EXTRN	?command_line_downwash@@3HA:DWORD		; command_line_downwash
EXTRN	?command_line_wut@@3HA:DWORD			; command_line_wut
EXTRN	?command_line_camcom@@3HA:DWORD			; command_line_camcom
EXTRN	?command_line_campaign_map_update_interval@@3HA:DWORD ; command_line_campaign_map_update_interval
EXTRN	?global_aphavoc_maps@@3HA:DWORD			; global_aphavoc_maps
EXTRN	?session_planner_goto_button@@3HA:DWORD		; session_planner_goto_button
EXTRN	?session_vector_flight_model@@3HA:DWORD		; session_vector_flight_model
EXTRN	?session_ground_radar_ignores_infantry@@3HA:DWORD ; session_ground_radar_ignores_infantry
EXTRN	?session_camcom@@3HA:DWORD			; session_camcom
EXTRN	?command_line_primary_server_setting@@3PADA:BYTE ; command_line_primary_server_setting
EXTRN	?command_line_secondary_server_setting@@3PADA:BYTE ; command_line_secondary_server_setting
EXTRN	?game_status@@3W4GAME_STATUS_TYPES@@A:DWORD	; game_status
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?system_server_id@@3KA:DWORD			; system_server_id
EXTRN	?send_group_frame_id@@3HA:DWORD			; send_group_frame_id
EXTRN	?av_packet_size_sent@@3MA:DWORD			; av_packet_size_sent
EXTRN	?av_packet_size_received@@3MA:DWORD		; av_packet_size_received
EXTRN	?packet_record_data_count@@3HA:DWORD		; packet_record_data_count
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?current_pack_buffer@@3PAUPACK_BUFFER@@A:DWORD	; current_pack_buffer
EXTRN	?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A:DWORD ; current_unpack_buffer
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_set_client_server_entity_int_value@@3PAY1BBH@1P6GXPAUENTITY@@W4INT_TYPES@@H@ZA:BYTE ; fn_set_client_server_entity_int_value
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_string_type_message@@3PBDB:DWORD ; overload_invalid_string_type_message
EXTRN	?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA:BYTE ; fn_get_local_entity_string
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	?aircraft_database@@3PAUAIRCRAFT_DATA@@A:BYTE	; aircraft_database
EXTRN	?vehicle_database@@3PAUVEHICLE_DATA@@A:BYTE	; vehicle_database
EXTRN	?group_database@@3PAUGROUP_DATA@@A:BYTE		; group_database
EXTRN	?guide_database@@3PAUGUIDE_DATA@@A:BYTE		; guide_database
EXTRN	?keysite_database@@3PAUKEYSITE_DATA@@A:BYTE	; keysite_database
EXTRN	?pilot_entity@@3PAUENTITY@@A:DWORD		; pilot_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?task_database@@3PAUTASK_DATA@@A:BYTE		; task_database
EXTRN	?waypoint_database@@3PAUWAYPOINT_DATA@@A:BYTE	; waypoint_database
EXTRN	?radar_range_apache@@3PAMA:BYTE			; radar_range_apache
EXTRN	?radar_range_comanche@@3PAMA:BYTE		; radar_range_comanche
EXTRN	?radar_range_havoc@@3PAMA:BYTE			; radar_range_havoc
EXTRN	?radar_range_hokum@@3PAMA:BYTE			; radar_range_hokum
EXTRN	?radar_range_blackhawk@@3PAMA:BYTE		; radar_range_blackhawk
EXTRN	?radar_range_hind@@3PAMA:BYTE			; radar_range_hind
EXTRN	?session_screen_next_bdrop@@3PAUUI_OBJECT@@A:DWORD ; session_screen_next_bdrop
EXTRN	?session_screen_next_button@@3PAUUI_OBJECT@@A:DWORD ; session_screen_next_button
EXTRN	?session_screen_continue_button@@3PAUUI_OBJECT@@A:DWORD ; session_screen_continue_button
EXTRN	?session_screen_continue_bdrop@@3PAUUI_OBJECT@@A:DWORD ; session_screen_continue_bdrop
EXTRN	?session_info_list@@3PAUUI_OBJECT@@A:DWORD	; session_info_list
EXTRN	?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A:DWORD ; current_game_session
EXTRN	?gunships_screen@@3PAUUI_OBJECT@@A:DWORD	; gunships_screen
EXTRN	?WUT_filename@@3PADA:BYTE			; WUT_filename
EXTRN	?session_WUT_filename@@3PADA:BYTE		; session_WUT_filename
EXTRN	?campaign_population_filename@@3PADA:DWORD	; campaign_population_filename
EXTRN	?population_placement_filename@@3PADA:DWORD	; population_placement_filename
EXTRN	?side_data_filename@@3PADA:DWORD		; side_data_filename
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?session_data@@3EA DB 01H DUP (?)			; session_data
	ALIGN	4

?data_record@@3PAEA DD 01H DUP (?)			; data_record
?update_ticks@?1??update_ui_comms@@YGXXZ@4IA DD 01H DUP (?) ; `update_ui_comms'::`2'::update_ticks
_BSS	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0CH@CHBBMAOB@HEARTBEAT?3?5Time?5for?5another?5hea@
CONST	SEGMENT
??_C@_0CH@CHBBMAOB@HEARTBEAT?3?5Time?5for?5another?5hea@ DB 'HEARTBEAT: T'
	DB	'ime for another heartbeat!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KMFCHCEN@HEARTBEAT?3?5after?5heartbeat?5init@
CONST	SEGMENT
??_C@_0CK@KMFCHCEN@HEARTBEAT?3?5after?5heartbeat?5init@ DB 'HEARTBEAT: af'
	DB	'ter heartbeat initialisation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EFHCMFIH@X?5Done?$CB@
CONST	SEGMENT
??_C@_07EFHCMFIH@X?5Done?$CB@ DB 'X Done!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HDGNBLLN@GETSERVERLIST?3?5Received?3?5?$CFs@
CONST	SEGMENT
??_C@_0BM@HDGNBLLN@GETSERVERLIST?3?5Received?3?5?$CFs@ DB 'GETSERVERLIST:'
	DB	' Received: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JDEKKDPO@GETSERVERLIST?3?5Request?5sent@
CONST	SEGMENT
??_C@_0BM@JDEKKDPO@GETSERVERLIST?3?5Request?5sent@ DB 'GETSERVERLIST: Req'
	DB	'uest sent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y@
CONST	SEGMENT
??_C@_01NFFPALBN@Y@ DB 'Y', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KBLCGJOL@GETSERVERLIST?3?5Init@
CONST	SEGMENT
??_C@_0BE@KBLCGJOL@GETSERVERLIST?3?5Init@ DB 'GETSERVERLIST: Init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FOMCACDJ@HEARTBEAT?3?5sending?3?5?$CFs@
CONST	SEGMENT
??_C@_0BH@FOMCACDJ@HEARTBEAT?3?5sending?3?5?$CFs@ DB 'HEARTBEAT: sending:'
	DB	' %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KGOOAEAC@?$CFs?5?$CFs?5?$CFs?5?$CFi?5?$CFi?5?$CFs@
CONST	SEGMENT
??_C@_0BC@KGOOAEAC@?$CFs?5?$CFs?5?$CFs?5?$CFi?5?$CFi?5?$CFs@ DB '%s %s %s'
	DB	' %i %i %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z@
CONST	SEGMENT
??_C@_01POHCFINO@Z@ DB 'Z', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09PFCHIMEP@127?40?40?41@
CONST	SEGMENT
??_C@_09PFCHIMEP@127?40?40?41@ DB '127.0.0.1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IFLEJOCB@?$CFd?4?$CFd?4?$CFd?$CFs@
CONST	SEGMENT
??_C@_0L@IFLEJOCB@?$CFd?4?$CFd?4?$CFd?$CFs@ DB '%d.%d.%d%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MIGLBACL@HEARTBEAT?3?5ERROR?5connecting?5to?5@
CONST	SEGMENT
??_C@_0DB@MIGLBACL@HEARTBEAT?3?5ERROR?5connecting?5to?5@ DB 'HEARTBEAT: E'
	DB	'RROR connecting to secondary master!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OPFCIOBH@HEARTBEAT?3?5ERROR?5connecting?5to?5@
CONST	SEGMENT
??_C@_0CP@OPFCIOBH@HEARTBEAT?3?5ERROR?5connecting?5to?5@ DB 'HEARTBEAT: E'
	DB	'RROR connecting to primary master!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DNBFPDLJ@HEARTBEAT?3?5Connecting?5to?5second@
CONST	SEGMENT
??_C@_0CK@DNBFPDLJ@HEARTBEAT?3?5Connecting?5to?5second@ DB 'HEARTBEAT: Co'
	DB	'nnecting to secondary master', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FAPGOBJJ@HEARTBEAT?3?5Connecting?5to?5primar@
CONST	SEGMENT
??_C@_0CI@FAPGOBJJ@HEARTBEAT?3?5Connecting?5to?5primar@ DB 'HEARTBEAT: Co'
	DB	'nnecting to primary master', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NMDBFNOB@HEARTBEAT?3?5sending?5heartbeat?5to@
CONST	SEGMENT
??_C@_0DB@NMDBFNOB@HEARTBEAT?3?5sending?5heartbeat?5to@ DB 'HEARTBEAT: se'
	DB	'nding heartbeat to secondary server', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@FBMCMMNN@HEARTBEAT?3?5sending?5heartbeat?5to@
CONST	SEGMENT
??_C@_0CP@FBMCMMNN@HEARTBEAT?3?5sending?5heartbeat?5to@ DB 'HEARTBEAT: se'
	DB	'nding heartbeat to primary server', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KFJNHJLN@ERROR?3?5Data?5Exchange?0?5unknown?5p@
CONST	SEGMENT
??_C@_0CN@KFJNHJLN@ERROR?3?5Data?5Exchange?0?5unknown?5p@ DB 'ERROR: Data'
	DB	' Exchange, unknown packet type %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LDALAFJ@COMMS?5MAN?3?5received?5SERVER?5REJE@
CONST	SEGMENT
??_C@_0DD@LDALAFJ@COMMS?5MAN?3?5received?5SERVER?5REJE@ DB 'COMMS MAN: re'
	DB	'ceived SERVER REJECTED (server id %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PIDGJJP@?5?5?5?5from?5?$CFs?5@
CONST	SEGMENT
??_C@_0N@PIDGJJP@?5?5?5?5from?5?$CFs?5@ DB '    from %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DFDJEAKO@COMMS?5MAN?3?5received?5END?5GAME?5fr@
CONST	SEGMENT
??_C@_0CF@DFDJEAKO@COMMS?5MAN?3?5received?5END?5GAME?5fr@ DB 'COMMS MAN: '
	DB	'received END GAME from %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BOGKLLAF@?$CBget_unpack_buffer_overflow?5?$CI?$CJ@
CONST	SEGMENT
??_C@_0BP@BOGKLLAF@?$CBget_unpack_buffer_overflow?5?$CI?$CJ@ DB '!get_unp'
	DB	'ack_buffer_overflow ()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CCJGGLLF@session_data@
CONST	SEGMENT
??_C@_0N@CCJGGLLF@session_data@ DB 'session_data', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JFDEIDNB@COMMS?5MAN?3?5received?5size?5overfl@
CONST	SEGMENT
??_C@_0CC@JFDEIDNB@COMMS?5MAN?3?5received?5size?5overfl@ DB 'COMMS MAN: r'
	DB	'eceived size overflow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GFECJACO@DAT@
CONST	SEGMENT
??_C@_03GFECJACO@DAT@ DB 'DAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OMFNLMOB@SID@
CONST	SEGMENT
??_C@_03OMFNLMOB@SID@ DB 'SID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MECBGBBM@COMMS?5MAN?3?5received?5PILOT?5ACCEP@
CONST	SEGMENT
??_C@_0CJ@MECBGBBM@COMMS?5MAN?3?5received?5PILOT?5ACCEP@ DB 'COMMS MAN: r'
	DB	'eceived PILOT ACCEPTED by %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HDFJMCJJ@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
CONST	SEGMENT
??_C@_0CJ@HDFJMCJJ@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ DB 'ge'
	DB	't_comms_model () == COMMS_MODEL_CLIENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NLIPNNPH@COMM_MAN?3?5gunship?5set@
CONST	SEGMENT
??_C@_0BG@NLIPNNPH@COMM_MAN?3?5gunship?5set@ DB 'COMM_MAN: gunship set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JNEDHLHL@ingame?5screen?5events@
CONST	SEGMENT
??_C@_0BF@JNEDHLHL@ingame?5screen?5events@ DB 'ingame screen events', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OOCPIHGJ@COMM_MAN?3?5setting?5gunship@
CONST	SEGMENT
??_C@_0BK@OOCPIHGJ@COMM_MAN?3?5setting?5gunship@ DB 'COMM_MAN: setting gu'
	DB	'nship', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KOLCCDEB@get_pilot_entity?5?$CI?$CJ@
CONST	SEGMENT
??_C@_0BE@KOLCCDEB@get_pilot_entity?5?$CI?$CJ@ DB 'get_pilot_entity ()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GBJMDJMJ@COMMS?5MAN?3?5received?5GUNSHIP?5ACC@
CONST	SEGMENT
??_C@_0CL@GBJMDJMJ@COMMS?5MAN?3?5received?5GUNSHIP?5ACC@ DB 'COMMS MAN: r'
	DB	'eceived GUNSHIP ACCEPTED by %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DBIDLLAO@COMMS?5MAN?3?5Gunship?5refused@
CONST	SEGMENT
??_C@_0BL@DBIDLLAO@COMMS?5MAN?3?5Gunship?5refused@ DB 'COMMS MAN: Gunship'
	DB	' refused', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GPMMIJAD@stub_packet@
CONST	SEGMENT
??_C@_0M@GPMMIJAD@stub_packet@ DB 'stub_packet', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@IHFEMGIH@COMMS?5MAN?3?5sending?5packet?5?$CFd?5fr@
CONST	SEGMENT
??_C@_0EA@IHFEMGIH@COMMS?5MAN?3?5sending?5packet?5?$CFd?5fr@ DB 'COMMS MA'
	DB	'N: sending packet %d frame %d to recently joined client', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HMPPMNAL@COMMS?5MAN?3?5received?5CLIENT?5FRAM@
CONST	SEGMENT
??_C@_0DC@HMPPMNAL@COMMS?5MAN?3?5received?5CLIENT?5FRAM@ DB 'COMMS MAN: r'
	DB	'eceived CLIENT FRAME ID (%d) by %d %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IOKBKAHN@Received?5join?5request?4?4?4@
CONST	SEGMENT
??_C@_0BJ@IOKBKAHN@Received?5join?5request?4?4?4@ DB 'Received join reque'
	DB	'st...', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OFBPPECD@?$CFs?5is?5trying?5to?5join?4?4?4@
CONST	SEGMENT
??_C@_0BI@OFBPPECD@?$CFs?5is?5trying?5to?5join?4?4?4@ DB '%s is trying to'
	DB	' join...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@IAMIFHCB@COMMS?5MAN?3?5sending?5gunship?5requ@
CONST	SEGMENT
??_C@_0EH@IAMIFHCB@COMMS?5MAN?3?5sending?5gunship?5requ@ DB 'COMMS MAN: s'
	DB	'ending gunship request accepted for gunship %d pilot id %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@JJECMCLK@COMMS?5MAN?3?5Refusing?5gunship?5for@
CONST	SEGMENT
??_C@_0DL@JJECMCLK@COMMS?5MAN?3?5Refusing?5gunship?5for@ DB 'COMMS MAN: R'
	DB	'efusing gunship for player %d to helicopter %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@KKDHOJLJ@COMMS?5MAN?3?5REFUSING?5GUNSHIP?5FOR@
CONST	SEGMENT
??_C@_0EG@KKDHOJLJ@COMMS?5MAN?3?5REFUSING?5GUNSHIP?5FOR@ DB 'COMMS MAN: R'
	DB	'EFUSING GUNSHIP FOR PLAYER %s (dpid %d) for helicopter %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IDAADFLB@index_number?5?$CB?$DN?5ENTITY_INDEX_DO@
CONST	SEGMENT
??_C@_0CH@IDAADFLB@index_number?5?$CB?$DN?5ENTITY_INDEX_DO@ DB 'index_num'
	DB	'ber != ENTITY_INDEX_DONT_CARE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JFMBCBGH@COMMS?5MAN?3?5RECEIVED?5GUNSHIP?5REQ@
CONST	SEGMENT
??_C@_0CM@JFMBCBGH@COMMS?5MAN?3?5RECEIVED?5GUNSHIP?5REQ@ DB 'COMMS MAN: R'
	DB	'ECEIVED GUNSHIP REQUEST from %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HCPKNGAG@COMMS?5MAN?3?5RECEIVED?5GUNSHIP?5REQ@
CONST	SEGMENT
??_C@_0DG@HCPKNGAG@COMMS?5MAN?3?5RECEIVED?5GUNSHIP?5REQ@ DB 'COMMS MAN: R'
	DB	'ECEIVED GUNSHIP REQUEST from %s (dpid %d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FAIPAGNP@new_pilot@
CONST	SEGMENT
??_C@_09FAIPAGNP@new_pilot@ DB 'new_pilot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HPHANGDF@COMMS?5MAN?3?5RECEIVED?5PILOT?5REQUE@
CONST	SEGMENT
??_C@_0CK@HPHANGDF@COMMS?5MAN?3?5RECEIVED?5PILOT?5REQUE@ DB 'COMMS MAN: R'
	DB	'ECEIVED PILOT REQUEST from %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
CONST	SEGMENT
??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ DB 'ge'
	DB	't_comms_model () == COMMS_MODEL_SERVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NLDACDCJ@?$CF2d?5?5@
CONST	SEGMENT
??_C@_05NLDACDCJ@?$CF2d?5?5@ DB '%2d  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IFNDKGJF@?$CFs?5?3?5?$CFd@
CONST	SEGMENT
??_C@_07IFNDKGJF@?$CFs?5?3?5?$CFd@ DB '%s : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OLBIDKLK@Players@
CONST	SEGMENT
??_C@_07OLBIDKLK@Players@ DB 'Players', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PCHAHDPE@REQUIRES_APACHE_HAVOC@
CONST	SEGMENT
??_C@_0BG@PCHAHDPE@REQUIRES_APACHE_HAVOC@ DB 'REQUIRES_APACHE_HAVOC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@FOCLCND@COMMS?5MAN?3?5browse?3?5received?5siz@
CONST	SEGMENT
??_C@_0CK@FOCLCND@COMMS?5MAN?3?5browse?3?5received?5siz@ DB 'COMMS MAN: b'
	DB	'rowse: received size overflow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHJLJGMF@UNRECOGNISED_WARZONE@
CONST	SEGMENT
??_C@_0BF@PHJLJGMF@UNRECOGNISED_WARZONE@ DB 'UNRECOGNISED_WARZONE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IIKFIKHA@?$CFs?2terrain?2terrain?4ffp@
CONST	SEGMENT
??_C@_0BH@IIKFIKHA@?$CFs?2terrain?2terrain?4ffp@ DB '%s\terrain\terrain.f'
	DB	'fp', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0HC@BLMILHPN@Downwash?5has?5to?5be?5turned?5off?5f@
CONST	SEGMENT
??_C@_0HC@BLMILHPN@Downwash?5has?5to?5be?5turned?5off?5f@ DB 'Downwash ha'
	DB	's to be turned off for multiplayer. Change the setting in the'
	DB	' ini file (dwash=0) and restart the game.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BJFDIGMH@Incompatible?5game?5version@
CONST	SEGMENT
??_C@_0BK@BJFDIGMH@Incompatible?5game?5version@ DB 'Incompatible game ver'
	DB	'sion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@OCJFLGDK@COMM_MAN?3?5Incorrect?5version?4?5Se@
CONST	SEGMENT
??_C@_0EK@OCJFLGDK@COMM_MAN?3?5Incorrect?5version?4?5Se@ DB 'COMM_MAN: In'
	DB	'correct version. Server Version No. %d, Client Version No. %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@ENFNOCHJ@COMM_MAN?3?5received?5CONNECTION_R@
CONST	SEGMENT
??_C@_0DP@ENFNOCHJ@COMM_MAN?3?5received?5CONNECTION_R@ DB 'COMM_MAN: rece'
	DB	'ived CONNECTION_RESPONSE, connection still alive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GJMCPLP@COMM_MAN?3?5received?5CONNECTION_V@
CONST	SEGMENT
??_C@_0DL@GJMCPLP@COMM_MAN?3?5received?5CONNECTION_V@ DB 'COMM_MAN: recei'
	DB	'ved CONNECTION_VALIDATION, sending RESPONSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@EDKMIAJ@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5comm@
CONST	SEGMENT
??_C@_0EO@EDKMIAJ@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5comm@ DB '###CU'
	DB	'STOM TEXTURE STARTUP: comm_man.c: comms_process_data: read_ma'
	DB	'p_info_data', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MFBPGKKB@Campaign?5Commander@
CONST	SEGMENT
??_C@_0BD@MFBPGKKB@Campaign?5Commander@ DB 'Campaign Commander', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MPJEHPHJ@Radar?5ignores?5infantry@
CONST	SEGMENT
??_C@_0BH@MPJEHPHJ@Radar?5ignores?5infantry@ DB 'Radar ignores infantry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DNDNEHBM@Vector?5flight?5model@
CONST	SEGMENT
??_C@_0BE@DNDNEHBM@Vector?5flight?5model@ DB 'Vector flight model', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GBEGMGE@?$CFs?3?5?$CFd@
CONST	SEGMENT
??_C@_06GBEGMGE@?$CFs?3?5?$CFd@ DB '%s: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MIHBCHBI@Map?5GOTO?5button@
CONST	SEGMENT
??_C@_0BA@MIHBCHBI@Map?5GOTO?5button@ DB 'Map GOTO button', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJHOIPC@?$CFs?3?5?$CFs@
CONST	SEGMENT
??_C@_06DJHOIPC@?$CFs?3?5?$CFs@ DB '%s: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OIJFFENJ@Server?5WUT?5version@
CONST	SEGMENT
??_C@_0BD@OIJFFENJ@Server?5WUT?5version@ DB 'Server WUT version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE@ DB 'NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IBNOHPMA@motd?4txt?5too?5long?$CB@
CONST	SEGMENT
??_C@_0BD@IBNOHPMA@motd?4txt?5too?5long?$CB@ DB 'motd.txt too long!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
CONST	SEGMENT
??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@ DB '%[^', 0aH, ']', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08LNEOKFHF@motd?4txt@
CONST	SEGMENT
??_C@_08LNEOKFHF@motd?4txt@ DB 'motd.txt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FPKJHBDA@COMM_MAN?3?5not?5resending?5query?5d@
CONST	SEGMENT
??_C@_0CD@FPKJHBDA@COMM_MAN?3?5not?5resending?5query?5d@ DB 'COMM_MAN: no'
	DB	't resending query data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LOCGONAA@?$AA@
CONST	SEGMENT
??_C@_01LOCGONAA@?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@GCCLHEAH@COMM_MAN?3?5REJECTING?5CONNECTION?4@
CONST	SEGMENT
??_C@_0FB@GCCLHEAH@COMM_MAN?3?5REJECTING?5CONNECTION?4@ DB 'COMM_MAN: REJ'
	DB	'ECTING CONNECTION. CONNECTION TOO BAD (re-request limit %d re'
	DB	'ached)', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?seasons@?EK@??comms_process_data@@YGXXZ@4PAPBDA DD 00H	; `comms_process_data'::`74'::seasons
	DD	FLAT:??_C@_07MCAEODGB@Default@
	DD	FLAT:??_C@_06NALKMBEE@Summer@
	DD	FLAT:??_C@_06DKFAEFHC@Winter@
	DD	FLAT:??_C@_06CEECHCOA@Desert@
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA DD 0247H	; `comms_process_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??send_comms_data@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??send_comms_data@@YGXXZ@4JA DD 01d0H	; `send_comms_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@FGJBMJHL@?$CBget_pack_buffer_overflow?5?$CI?$CJ@
CONST	SEGMENT
??_C@_0BN@FGJBMJHL@?$CBget_pack_buffer_overflow?5?$CI?$CJ@ DB '!get_pack_'
	DB	'buffer_overflow ()', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??data_exchange@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??data_exchange@@YGXXZ@4JA DD 0151H	; `data_exchange'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??comms_record_data@@YGXPAEH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??comms_record_data@@YGXPAEH@Z@4JA DD 0e2H ; `comms_record_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@DJJCJBCH@command_line_comms_data_record_@
CONST	SEGMENT
??_C@_0CJ@DJJCJBCH@command_line_comms_data_record_@ DB 'command_line_comm'
	DB	's_data_record_size != 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MOGFNBMO@data_record@
CONST	SEGMENT
??_C@_0M@MOGFNBMO@data_record@ DB 'data_record', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\comms\comm_man.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??comms_clear_data_record@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??comms_clear_data_record@@YGXXZ@4JA DD 0c6H ; `comms_clear_data_record'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?net_heartbeat@@YGXXZ
_TEXT	SEGMENT
_versionBuffer$ = -768					; size = 256
_TempStuff$ = -512					; size = 512
?net_heartbeat@@YGXXZ PROC				; net_heartbeat, COMDAT

; 2641 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 03 00
	00		 sub	 esp, 896		; 00000380H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2642 :     char TempStuff[512];
; 2643 :     char versionBuffer[256];
; 2644 : 
; 2645 : 
; 2646 : #if DEBUG_MODULE
; 2647 : debug_log ("HEARTBEAT: net_heartbeat called");
; 2648 : #endif
; 2649 : 
; 2650 :     direct_play_session_capabilities ();

  0000c	e8 00 00 00 00	 call	 ?direct_play_session_capabilities@@YGHXZ ; direct_play_session_capabilities

; 2651 :     sprintf(versionBuffer, "%d.%d.%d%s", MAJOR_VERSION, DATA_VERSION, MINOR_VERSION, BUILD_TYPE);

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00016	6a 00		 push	 0
  00018	6a 0f		 push	 15			; 0000000fH
  0001a	6a 01		 push	 1
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IFLEJOCB@?$CFd?4?$CFd?4?$CFd?$CFs@
  00021	8d 85 00 fd ff
	ff		 lea	 eax, DWORD PTR _versionBuffer$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _sprintf
  0002d	83 c4 18	 add	 esp, 24			; 00000018H

; 2652 :     sprintf(TempStuff, "%s %s %s %i %i %s", "Z", "127.0.0.1", //The transmitted ip is disregarded anyway...

  00030	8d 85 00 fd ff
	ff		 lea	 eax, DWORD PTR _versionBuffer$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?direct_play_get_number_of_players@@YGHXZ ; direct_play_get_number_of_players
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?direct_play_session_max_players@@YGHXZ ; direct_play_session_max_players
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ?localplayer@@3PADA ; localplayer
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_09PFCHIMEP@127?40?40?41@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_01POHCFINO@Z@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KGOOAEAC@?$CFs?5?$CFs?5?$CFs?5?$CFi?5?$CFi?5?$CFs@
  00057	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR _TempStuff$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 _sprintf
  00063	83 c4 20	 add	 esp, 32			; 00000020H

; 2653 :                                                  localplayer,
; 2654 :                                                  direct_play_session_max_players(),
; 2655 :                                                  direct_play_get_number_of_players(),
; 2656 :                                                  versionBuffer);
; 2657 : 
; 2658 : debug_log ("HEARTBEAT: sending: %s", TempStuff);

  00066	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _TempStuff$[ebp]
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FOMCACDJ@HEARTBEAT?3?5sending?3?5?$CFs@
  00072	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00077	83 c4 08	 add	 esp, 8

; 2659 : 
; 2660 :     if (mastersocket > 0 )

  0007a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mastersocket@@3HA, 0 ; mastersocket
  00081	7e 0e		 jle	 SHORT $LN2@net_heartb

; 2661 :       net_sendDataToMaster (TempStuff, 1);

  00083	6a 01		 push	 1
  00085	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _TempStuff$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?net_sendDataToMaster@@YGXPADH@Z ; net_sendDataToMaster
$LN2@net_heartb:

; 2662 :     if (mastersocket2 > 0 )

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mastersocket2@@3HA, 0 ; mastersocket2
  00098	7e 0e		 jle	 SHORT $LN1@net_heartb

; 2663 :       net_sendDataToMaster (TempStuff, 2);

  0009a	6a 02		 push	 2
  0009c	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _TempStuff$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?net_sendDataToMaster@@YGXPADH@Z ; net_sendDataToMaster
$LN1@net_heartb:

; 2664 : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?net_heartbeat@@YGXXZ ENDP				; net_heartbeat
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?net_connectToMaster@@YGHPADFH@Z
_TEXT	SEGMENT
_ulServerAddr$ = -8					; size = 4
_sock$ = -4						; size = 4
_serverName$ = 8					; size = 4
_port$ = 12						; size = 2
_servernum$ = 16					; size = 4
?net_connectToMaster@@YGHPADFH@Z PROC			; net_connectToMaster, COMDAT

; 2584 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2585 :         int sock;
; 2586 :         u_long ulServerAddr;
; 2587 : 
; 2588 :         if (servernum==1)

  00009	83 7d 10 01	 cmp	 DWORD PTR _servernum$[ebp], 1
  0000d	75 0f		 jne	 SHORT $LN2@net_connec

; 2589 :         {
; 2590 :             debug_log ("HEARTBEAT: Connecting to primary master");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FAPGOBJJ@HEARTBEAT?3?5Connecting?5to?5primar@
  00014	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00019	83 c4 04	 add	 esp, 4

; 2591 :         }
; 2592 :         else

  0001c	eb 0d		 jmp	 SHORT $LN3@net_connec
$LN2@net_connec:

; 2593 :         {
; 2594 :             debug_log ("HEARTBEAT: Connecting to secondary master");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@DNBFPDLJ@HEARTBEAT?3?5Connecting?5to?5second@
  00023	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00028	83 c4 04	 add	 esp, 4
$LN3@net_connec:

; 2595 :         }
; 2596 : 
; 2597 :         ulServerAddr = LookUpIPAddress(serverName);

  0002b	8b 45 08	 mov	 eax, DWORD PTR _serverName$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?LookUpIPAddress@@YGKPAD@Z ; LookUpIPAddress
  00034	89 45 f8	 mov	 DWORD PTR _ulServerAddr$[ebp], eax

; 2598 : 
; 2599 :         sock = socket (AF_INET, SOCK_DGRAM, IPPROTO_UDP);

  00037	6a 11		 push	 17			; 00000011H
  00039	6a 02		 push	 2
  0003b	6a 02		 push	 2
  0003d	e8 00 00 00 00	 call	 _socket@12
  00042	89 45 fc	 mov	 DWORD PTR _sock$[ebp], eax

; 2600 :         if (sock == INVALID_SOCKET)

  00045	83 7d fc ff	 cmp	 DWORD PTR _sock$[ebp], -1
  00049	75 27		 jne	 SHORT $LN4@net_connec

; 2601 :         {
; 2602 : 
; 2603 :             if (servernum==1)

  0004b	83 7d 10 01	 cmp	 DWORD PTR _servernum$[ebp], 1
  0004f	75 0f		 jne	 SHORT $LN5@net_connec

; 2604 :             {
; 2605 :                 debug_log ("HEARTBEAT: ERROR connecting to primary master!");

  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@OPFCIOBH@HEARTBEAT?3?5ERROR?5connecting?5to?5@
  00056	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0005b	83 c4 04	 add	 esp, 4

; 2606 :             }
; 2607 :             else

  0005e	eb 0d		 jmp	 SHORT $LN6@net_connec
$LN5@net_connec:

; 2608 :             {
; 2609 :                 debug_log ("HEARTBEAT: ERROR connecting to secondary master!");

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@MIGLBACL@HEARTBEAT?3?5ERROR?5connecting?5to?5@
  00065	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0006a	83 c4 04	 add	 esp, 4
$LN6@net_connec:

; 2610 :             }
; 2611 :             return -1;

  0006d	83 c8 ff	 or	 eax, -1
  00070	eb 51		 jmp	 SHORT $LN1@net_connec
$LN4@net_connec:

; 2612 :         }
; 2613 :         if (servernum==1)

  00072	83 7d 10 01	 cmp	 DWORD PTR _servernum$[ebp], 1
  00076	75 25		 jne	 SHORT $LN7@net_connec

; 2614 :         {
; 2615 :             Master.sin_family = AF_INET;

  00078	b8 02 00 00 00	 mov	 eax, 2
  0007d	66 a3 00 00 00
	00		 mov	 WORD PTR ?Master@@3Usockaddr_in@@A, ax

; 2616 :             Master.sin_addr.s_addr = ulServerAddr;

  00083	8b 45 f8	 mov	 eax, DWORD PTR _ulServerAddr$[ebp]
  00086	a3 04 00 00 00	 mov	 DWORD PTR ?Master@@3Usockaddr_in@@A+4, eax

; 2617 : //            Master.sin_addr.s_addr = inet_addr(serverName);
; 2618 :             Master.sin_port = htons (port);

  0008b	0f b7 45 0c	 movzx	 eax, WORD PTR _port$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _htons@4
  00095	66 a3 02 00 00
	00		 mov	 WORD PTR ?Master@@3Usockaddr_in@@A+2, ax

; 2619 :         }
; 2620 :         else

  0009b	eb 23		 jmp	 SHORT $LN8@net_connec
$LN7@net_connec:

; 2621 :         {
; 2622 :             Master2.sin_family = AF_INET;

  0009d	b8 02 00 00 00	 mov	 eax, 2
  000a2	66 a3 00 00 00
	00		 mov	 WORD PTR ?Master2@@3Usockaddr_in@@A, ax

; 2623 :             Master2.sin_addr.s_addr = ulServerAddr;

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _ulServerAddr$[ebp]
  000ab	a3 04 00 00 00	 mov	 DWORD PTR ?Master2@@3Usockaddr_in@@A+4, eax

; 2624 : //            Master2.sin_addr.s_addr = inet_addr(serverName);
; 2625 :             Master2.sin_port = htons (port);

  000b0	0f b7 45 0c	 movzx	 eax, WORD PTR _port$[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _htons@4
  000ba	66 a3 02 00 00
	00		 mov	 WORD PTR ?Master2@@3Usockaddr_in@@A+2, ax
$LN8@net_connec:

; 2626 :         }
; 2627 : 
; 2628 :         #if DEBUG_MODULE
; 2629 :         debug_log ("HEARTBEAT: connect successfull");
; 2630 :         #endif
; 2631 : 
; 2632 :         return sock;

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _sock$[ebp]
$LN1@net_connec:

; 2633 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 0c 00	 ret	 12			; 0000000cH
?net_connectToMaster@@YGHPADFH@Z ENDP			; net_connectToMaster
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?net_receiveData@@YGXH@Z
_TEXT	SEGMENT
_len$ = -8						; size = 4
_socket$ = -4						; size = 4
_s$ = 8							; size = 4
?net_receiveData@@YGXH@Z PROC				; net_receiveData, COMDAT

; 2566 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2567 : 	int socket;
; 2568 : 	int len = sizeof (SOCKADDR);

  00009	c7 45 f8 10 00
	00 00		 mov	 DWORD PTR _len$[ebp], 16 ; 00000010H

; 2569 : 	if (s == 1)

  00010	83 7d 08 01	 cmp	 DWORD PTR _s$[ebp], 1
  00014	75 08		 jne	 SHORT $LN2@net_receiv

; 2570 : 	  socket = mastersocket;

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mastersocket@@3HA ; mastersocket
  0001b	89 45 fc	 mov	 DWORD PTR _socket$[ebp], eax
$LN2@net_receiv:

; 2571 : 	if (s == 2)

  0001e	83 7d 08 02	 cmp	 DWORD PTR _s$[ebp], 2
  00022	75 08		 jne	 SHORT $LN3@net_receiv

; 2572 : 	  socket = mastersocket2;

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mastersocket2@@3HA ; mastersocket2
  00029	89 45 fc	 mov	 DWORD PTR _socket$[ebp], eax
$LN3@net_receiv:

; 2573 : 
; 2574 : 	memset (ReceiveBuffer, '\0', PACKET_SIZE);

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?PACKET_SIZE@@3HA ; PACKET_SIZE
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	68 00 00 00 00	 push	 OFFSET ?ReceiveBuffer@@3PADA ; ReceiveBuffer
  00039	e8 00 00 00 00	 call	 _memset
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2575 : 	recvfrom (socket, ReceiveBuffer, PACKET_SIZE, 0, &from, &len);

  00041	8d 45 f8	 lea	 eax, DWORD PTR _len$[ebp]
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ?from@@3Usockaddr@@A ; from
  0004a	6a 00		 push	 0
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?PACKET_SIZE@@3HA ; PACKET_SIZE
  00052	51		 push	 ecx
  00053	68 00 00 00 00	 push	 OFFSET ?ReceiveBuffer@@3PADA ; ReceiveBuffer
  00058	8b 55 fc	 mov	 edx, DWORD PTR _socket$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _recvfrom@24

; 2576 : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?net_receiveData@@YGXH@Z ENDP				; net_receiveData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?net_sendDataToMaster@@YGXPADH@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
_servernum$ = 12					; size = 4
?net_sendDataToMaster@@YGXPADH@Z PROC			; net_sendDataToMaster, COMDAT

; 2547 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2548 :     if (command_line_report_to_masterserver == FALSE)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_report_to_masterserver@@3HA, 0 ; command_line_report_to_masterserver
  00010	75 02		 jne	 SHORT $LN2@net_sendDa

; 2549 :     	return;

  00012	eb 6e		 jmp	 SHORT $LN1@net_sendDa
$LN2@net_sendDa:

; 2550 : 
; 2551 : 
; 2552 :     if (servernum == 1)

  00014	83 7d 0c 01	 cmp	 DWORD PTR _servernum$[ebp], 1
  00018	75 35		 jne	 SHORT $LN3@net_sendDa

; 2553 :     {
; 2554 :           debug_log ("HEARTBEAT: sending heartbeat to primary server");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FBMCMMNN@HEARTBEAT?3?5sending?5heartbeat?5to@
  0001f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00024	83 c4 04	 add	 esp, 4

; 2555 :           sendto (mastersocket, data, strlen (data), 0, (SOCKADDR *)&Master, sizeof (SOCKADDR));

  00027	6a 10		 push	 16			; 00000010H
  00029	68 00 00 00 00	 push	 OFFSET ?Master@@3Usockaddr_in@@A ; Master
  0002e	6a 00		 push	 0
  00030	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _strlen
  00039	83 c4 04	 add	 esp, 4
  0003c	50		 push	 eax
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00040	51		 push	 ecx
  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mastersocket@@3HA ; mastersocket
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 _sendto@24

; 2556 :         }
; 2557 :         else

  0004d	eb 33		 jmp	 SHORT $LN1@net_sendDa
$LN3@net_sendDa:

; 2558 :         {
; 2559 :           debug_log ("HEARTBEAT: sending heartbeat to secondary server");

  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@NMDBFNOB@HEARTBEAT?3?5sending?5heartbeat?5to@
  00054	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00059	83 c4 04	 add	 esp, 4

; 2560 :           sendto (mastersocket2, data, strlen (data), 0, (SOCKADDR *)&Master2, sizeof (SOCKADDR));

  0005c	6a 10		 push	 16			; 00000010H
  0005e	68 00 00 00 00	 push	 OFFSET ?Master2@@3Usockaddr_in@@A ; Master2
  00063	6a 00		 push	 0
  00065	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _strlen
  0006e	83 c4 04	 add	 esp, 4
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00075	51		 push	 ecx
  00076	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mastersocket2@@3HA ; mastersocket2
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 _sendto@24
$LN1@net_sendDa:

; 2561 :         }
; 2562 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
?net_sendDataToMaster@@YGXPADH@Z ENDP			; net_sendDataToMaster
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?net_CheckForDataOnSocket@@YGHHH@Z
_TEXT	SEGMENT
_p$ = -276						; size = 4
_sr$ = -272						; size = 4
_to$ = -268						; size = 8
_rread$ = -260						; size = 260
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
?net_CheckForDataOnSocket@@YGHHH@Z PROC			; net_CheckForDataOnSocket, COMDAT

; 2509 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2510 : 	fd_set rread;
; 2511 : 	struct timeval to;
; 2512 : 	int sr = -1;

  0000c	c7 85 f0 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _sr$[ebp], -1

; 2513 : 	int p;
; 2514 : 
; 2515 : 	if (p1 > 0)

  00016	83 7d 08 00	 cmp	 DWORD PTR _p1$[ebp], 0
  0001a	0f 8e b2 00 00
	00		 jle	 $LN8@net_CheckF

; 2516 : 	{
; 2517 : 	  p = p1;

  00020	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00023	89 85 ec fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 2518 : 	  FD_ZERO (&rread);

  00029	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _rread$[ebp], 0
$LN4@net_CheckF:

; 2519 : 	  FD_SET (p, &rread);

  00033	83 bd fc fe ff
	ff 40		 cmp	 DWORD PTR _rread$[ebp], 64 ; 00000040H
  0003a	73 22		 jae	 SHORT $LN2@net_CheckF
  0003c	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _rread$[ebp]
  00042	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _p$[ebp]
  00048	89 8c 85 00 ff
	ff ff		 mov	 DWORD PTR _rread$[ebp+eax*4+4], ecx
  0004f	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _rread$[ebp]
  00055	83 c2 01	 add	 edx, 1
  00058	89 95 fc fe ff
	ff		 mov	 DWORD PTR _rread$[ebp], edx
$LN2@net_CheckF:
  0005e	33 c0		 xor	 eax, eax
  00060	75 d1		 jne	 SHORT $LN4@net_CheckF

; 2520 : 	  memset (&to, 0, sizeof (to));

  00062	6a 08		 push	 8
  00064	6a 00		 push	 0
  00066	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _to$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _memset
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2521 : 	  to.tv_sec = 0;

  00075	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _to$[ebp], 0

; 2522 : 	  to.tv_usec = 10;

  0007f	c7 85 f8 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR _to$[ebp+4], 10 ; 0000000aH

; 2523 : 	  sr = select (1, &rread, NULL, NULL, &to);

  00089	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _to$[ebp]
  0008f	50		 push	 eax
  00090	6a 00		 push	 0
  00092	6a 00		 push	 0
  00094	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _rread$[ebp]
  0009a	51		 push	 ecx
  0009b	6a 01		 push	 1
  0009d	e8 00 00 00 00	 call	 _select@20
  000a2	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _sr$[ebp], eax

; 2524 : 	  if (sr > 0)

  000a8	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _sr$[ebp], 0
  000af	7e 21		 jle	 SHORT $LN8@net_CheckF

; 2525 : 	    if (FD_ISSET (p,&rread))

  000b1	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _rread$[ebp]
  000b7	50		 push	 eax
  000b8	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _p$[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  000c4	85 c0		 test	 eax, eax
  000c6	74 0a		 je	 SHORT $LN8@net_CheckF

; 2526 : 	      return 1;

  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	e9 bf 00 00 00	 jmp	 $LN1@net_CheckF
$LN8@net_CheckF:

; 2527 :         }
; 2528 :         if (p2 > 0)

  000d2	83 7d 0c 00	 cmp	 DWORD PTR _p2$[ebp], 0
  000d6	0f 8e af 00 00
	00		 jle	 $LN12@net_CheckF

; 2529 :         {
; 2530 : 	  p = p2;

  000dc	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  000df	89 85 ec fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 2531 : 	  FD_ZERO (&rread);

  000e5	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _rread$[ebp], 0
$LN7@net_CheckF:

; 2532 : 	  FD_SET (p, &rread);

  000ef	83 bd fc fe ff
	ff 40		 cmp	 DWORD PTR _rread$[ebp], 64 ; 00000040H
  000f6	73 22		 jae	 SHORT $LN5@net_CheckF
  000f8	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _rread$[ebp]
  000fe	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _p$[ebp]
  00104	89 8c 85 00 ff
	ff ff		 mov	 DWORD PTR _rread$[ebp+eax*4+4], ecx
  0010b	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _rread$[ebp]
  00111	83 c2 01	 add	 edx, 1
  00114	89 95 fc fe ff
	ff		 mov	 DWORD PTR _rread$[ebp], edx
$LN5@net_CheckF:
  0011a	33 c0		 xor	 eax, eax
  0011c	75 d1		 jne	 SHORT $LN7@net_CheckF

; 2533 : 	  memset (&to, 0, sizeof (to));

  0011e	6a 08		 push	 8
  00120	6a 00		 push	 0
  00122	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _to$[ebp]
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 _memset
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2534 : 	  to.tv_sec = 0;

  00131	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _to$[ebp], 0

; 2535 : 	  to.tv_usec = 10;

  0013b	c7 85 f8 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR _to$[ebp+4], 10 ; 0000000aH

; 2536 : 	  sr = select (1, &rread, NULL, NULL, &to);

  00145	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _to$[ebp]
  0014b	50		 push	 eax
  0014c	6a 00		 push	 0
  0014e	6a 00		 push	 0
  00150	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _rread$[ebp]
  00156	51		 push	 ecx
  00157	6a 01		 push	 1
  00159	e8 00 00 00 00	 call	 _select@20
  0015e	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _sr$[ebp], eax

; 2537 : 	  if (sr > 0)

  00164	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _sr$[ebp], 0
  0016b	7e 1e		 jle	 SHORT $LN12@net_CheckF

; 2538 : 	    if (FD_ISSET (p,&rread))

  0016d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _rread$[ebp]
  00173	50		 push	 eax
  00174	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _p$[ebp]
  0017a	51		 push	 ecx
  0017b	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  00180	85 c0		 test	 eax, eax
  00182	74 07		 je	 SHORT $LN12@net_CheckF

; 2539 : 	      return 2;

  00184	b8 02 00 00 00	 mov	 eax, 2
  00189	eb 06		 jmp	 SHORT $LN1@net_CheckF
$LN12@net_CheckF:

; 2540 :          }
; 2541 : 
; 2542 : 	return sr;

  0018b	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _sr$[ebp]
$LN1@net_CheckF:

; 2543 : }

  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c2 08 00	 ret	 8
?net_CheckForDataOnSocket@@YGHHH@Z ENDP			; net_CheckForDataOnSocket
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?LookUpIPAddress@@YGKPAD@Z
_TEXT	SEGMENT
_hostentry$ = -8					; size = 4
_ulServerAddr$ = -4					; size = 4
_inet_address$ = 8					; size = 4
?LookUpIPAddress@@YGKPAD@Z PROC				; LookUpIPAddress, COMDAT

; 2464 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2465 : 
; 2466 :     unsigned long ulServerAddr = INADDR_NONE;

  00009	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ulServerAddr$[ebp], -1

; 2467 :     LPHOSTENT hostentry = NULL;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hostentry$[ebp], 0

; 2468 : 
; 2469 :     // Try parsing inet xxx.xxx.xxx.xxx format string
; 2470 :     ulServerAddr = inet_addr(inet_address);

  00017	8b 45 08	 mov	 eax, DWORD PTR _inet_address$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _inet_addr@4
  00020	89 45 fc	 mov	 DWORD PTR _ulServerAddr$[ebp], eax

; 2471 :     if (ulServerAddr == INADDR_NONE)

  00023	83 7d fc ff	 cmp	 DWORD PTR _ulServerAddr$[ebp], -1
  00027	75 2f		 jne	 SHORT $LN2@LookUpIPAd

; 2472 :     {
; 2473 :         // If the IP address parse fails, try
; 2474 :         // resolving host name using hosts file
; 2475 :         hostentry = gethostbyname(inet_address);

  00029	8b 45 08	 mov	 eax, DWORD PTR _inet_address$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _gethostbyname@4
  00032	89 45 f8	 mov	 DWORD PTR _hostentry$[ebp], eax

; 2476 : 
; 2477 :         // At this point, the user didn't enter an IP address
; 2478 :         // or valid host name.  Display error message and return
; 2479 :         // exit.  Return FALSE to indicate failure.
; 2480 :         if (hostentry == NULL)

  00035	83 7d f8 00	 cmp	 DWORD PTR _hostentry$[ebp], 0
  00039	75 07		 jne	 SHORT $LN3@LookUpIPAd

; 2481 :         {
; 2482 :             return INADDR_NONE;

  0003b	83 c8 ff	 or	 eax, -1
  0003e	eb 1b		 jmp	 SHORT $LN1@LookUpIPAd

; 2483 :         }
; 2484 :         // The hostname was valid.  Store the IP address
; 2485 :         else

  00040	eb 16		 jmp	 SHORT $LN2@LookUpIPAd
$LN3@LookUpIPAd:

; 2486 :         {
; 2487 :             ulServerAddr = *((unsigned long *)hostentry->h_addr_list[0]);

  00042	b8 04 00 00 00	 mov	 eax, 4
  00047	6b c8 00	 imul	 ecx, eax, 0
  0004a	8b 55 f8	 mov	 edx, DWORD PTR _hostentry$[ebp]
  0004d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00050	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  00053	8b 11		 mov	 edx, DWORD PTR [ecx]
  00055	89 55 fc	 mov	 DWORD PTR _ulServerAddr$[ebp], edx
$LN2@LookUpIPAd:

; 2488 :         }
; 2489 :     }
; 2490 : 
; 2491 :     return ulServerAddr;

  00058	8b 45 fc	 mov	 eax, DWORD PTR _ulServerAddr$[ebp]
$LN1@LookUpIPAd:

; 2492 : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?LookUpIPAddress@@YGKPAD@Z ENDP				; LookUpIPAddress
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?group_database_cpy@@YGXPAUGROUP_DATA@@PBU1@@Z
_TEXT	SEGMENT
_tmp$ = -8						; size = 4
_elems$ = -4						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
?group_database_cpy@@YGXPAUGROUP_DATA@@PBU1@@Z PROC	; group_database_cpy, COMDAT

; 561  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 562  : 	int
; 563  : 		elems;
; 564  : 	const char
; 565  : 		*tmp;
; 566  : 
; 567  : 	for ( elems = NUM_ENTITY_SUB_TYPE_GROUPS; elems > 0; elems--)

  00009	c7 45 fc 1a 00
	00 00		 mov	 DWORD PTR _elems$[ebp], 26 ; 0000001aH
  00010	eb 09		 jmp	 SHORT $LN4@group_data
$LN2@group_data:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _elems$[ebp]
  00015	83 e8 01	 sub	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _elems$[ebp], eax
$LN4@group_data:
  0001b	83 7d fc 00	 cmp	 DWORD PTR _elems$[ebp], 0
  0001f	7e 3e		 jle	 SHORT $LN1@group_data

; 568  : 	{
; 569  : 		tmp = dst->platoon_name;

  00021	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00024	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00027	89 4d f8	 mov	 DWORD PTR _tmp$[ebp], ecx

; 570  : 		memcpy ( ( char * ) dst + 2 * sizeof ( const char * ), ( const char * ) src + 2 * sizeof ( const char * ), sizeof ( group_data ) - 2 * sizeof ( const char * ) );

  0002a	6a 5c		 push	 92			; 0000005cH
  0002c	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002f	83 c0 08	 add	 eax, 8
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  00036	83 c1 08	 add	 ecx, 8
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _memcpy
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 571  : 		dst->platoon_name = tmp;

  00042	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00045	8b 4d f8	 mov	 ecx, DWORD PTR _tmp$[ebp]
  00048	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 572  : 		src++;

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0004e	83 c0 64	 add	 eax, 100		; 00000064H
  00051	89 45 0c	 mov	 DWORD PTR _src$[ebp], eax

; 573  : 		dst++;

  00054	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00057	83 c0 64	 add	 eax, 100		; 00000064H
  0005a	89 45 08	 mov	 DWORD PTR _dst$[ebp], eax

; 574  : 	}

  0005d	eb b3		 jmp	 SHORT $LN2@group_data
$LN1@group_data:

; 575  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?group_database_cpy@@YGXPAUGROUP_DATA@@PBU1@@Z ENDP	; group_database_cpy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?smart_memcpy@@YGXPAXPBXHHH@Z
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_elemsize$ = 16						; size = 4
_skipsize$ = 20						; size = 4
_elems$ = 24						; size = 4
?smart_memcpy@@YGXPAXPBXHHH@Z PROC			; smart_memcpy, COMDAT

; 550  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 551  : 	for ( ; elems > 0; elems--)

  00009	eb 09		 jmp	 SHORT $LN4@smart_memc
$LN2@smart_memc:
  0000b	8b 45 18	 mov	 eax, DWORD PTR _elems$[ebp]
  0000e	83 e8 01	 sub	 eax, 1
  00011	89 45 18	 mov	 DWORD PTR _elems$[ebp], eax
$LN4@smart_memc:
  00014	83 7d 18 00	 cmp	 DWORD PTR _elems$[ebp], 0
  00018	7e 31		 jle	 SHORT $LN1@smart_memc

; 552  : 	{
; 553  : 		memcpy ( ( unsigned char * ) dst + skipsize, ( const unsigned char * ) src + skipsize, elemsize - skipsize );

  0001a	8b 45 10	 mov	 eax, DWORD PTR _elemsize$[ebp]
  0001d	2b 45 14	 sub	 eax, DWORD PTR _skipsize$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  00024	03 4d 14	 add	 ecx, DWORD PTR _skipsize$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 08	 mov	 edx, DWORD PTR _dst$[ebp]
  0002b	03 55 14	 add	 edx, DWORD PTR _skipsize$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 _memcpy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 554  : 		src = ( unsigned const char * ) src + elemsize;

  00037	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0003a	03 45 10	 add	 eax, DWORD PTR _elemsize$[ebp]
  0003d	89 45 0c	 mov	 DWORD PTR _src$[ebp], eax

; 555  : 		dst = ( unsigned char * ) dst + elemsize;

  00040	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00043	03 45 10	 add	 eax, DWORD PTR _elemsize$[ebp]
  00046	89 45 08	 mov	 DWORD PTR _dst$[ebp], eax

; 556  : 	}

  00049	eb c0		 jmp	 SHORT $LN2@smart_memc
$LN1@smart_memc:

; 557  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 14 00	 ret	 20			; 00000014H
?smart_memcpy@@YGXPAXPBXHHH@Z ENDP			; smart_memcpy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?get_number_of_connected_players@@YGHXZ
_TEXT	SEGMENT
_player_count$ = -8					; size = 4
_temp_connection$ = -4					; size = 4
?get_number_of_connected_players@@YGHXZ PROC		; get_number_of_connected_players, COMDAT

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 312  :     connection_list_type
; 313  :         *temp_connection;
; 314  : 
; 315  :     int
; 316  :         player_count;
; 317  : 
; 318  :     temp_connection = get_connection_list_head ();

  00009	e8 00 00 00 00	 call	 ?get_connection_list_head@@YGPAUCONNECTION_LIST_TYPE@@XZ ; get_connection_list_head
  0000e	89 45 fc	 mov	 DWORD PTR _temp_connection$[ebp], eax

; 319  : 
; 320  :     player_count = 0;

  00011	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _player_count$[ebp], 0
$LN2@get_number:

; 321  : 
; 322  :     while (temp_connection)

  00018	83 7d fc 00	 cmp	 DWORD PTR _temp_connection$[ebp], 0
  0001c	74 14		 je	 SHORT $LN3@get_number

; 323  :     {
; 324  :         player_count ++;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR _player_count$[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 f8	 mov	 DWORD PTR _player_count$[ebp], eax

; 325  : 
; 326  :         temp_connection = temp_connection->next;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _temp_connection$[ebp]
  0002a	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0002d	89 4d fc	 mov	 DWORD PTR _temp_connection$[ebp], ecx

; 327  :     }

  00030	eb e6		 jmp	 SHORT $LN2@get_number
$LN3@get_number:

; 328  : 
; 329  :     return player_count;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _player_count$[ebp]

; 330  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?get_number_of_connected_players@@YGHXZ ENDP		; get_number_of_connected_players
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?comms_record_data@@YGXPAEH@Z
_TEXT	SEGMENT
_packet_count$1 = -8					; size = 4
_new_data_record$ = -4					; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?comms_record_data@@YGXPAEH@Z PROC			; comms_record_data, COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@comms_reco:

; 227  : 
; 228  :     unsigned char
; 229  :         *new_data_record;
; 230  : 
; 231  :     //
; 232  :     // Check data_record is big enough
; 233  :     //
; 234  : 
; 235  :     while (data_record_size + size > command_line_comms_data_record_size)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?data_record_size@@3HA ; data_record_size
  0000e	03 45 0c	 add	 eax, DWORD PTR _size$[ebp]
  00011	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?command_line_comms_data_record_size@@3HA ; command_line_comms_data_record_size
  00017	7e 6b		 jle	 SHORT $LN3@comms_reco

; 236  :     {
; 237  : 
; 238  :         new_data_record = (unsigned char *) malloc_heap_mem (command_line_comms_data_record_size * 2);

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_data_record_size@@3HA ; command_line_comms_data_record_size
  0001e	d1 e0		 shl	 eax, 1
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00026	89 45 fc	 mov	 DWORD PTR _new_data_record$[ebp], eax

; 239  : 
; 240  :         ASSERT (data_record);

  00029	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?data_record@@3PAEA, 0
  00030	75 18		 jne	 SHORT $LN4@comms_reco
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_record_data@@YGXPAEH@Z@4JA
  00037	83 c0 0e	 add	 eax, 14			; 0000000eH
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MOGFNBMO@data_record@
  00045	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@comms_reco:

; 241  : 
; 242  :         memcpy (new_data_record, data_record, command_line_comms_data_record_size);

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_data_record_size@@3HA ; command_line_comms_data_record_size
  0004f	50		 push	 eax
  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?data_record@@3PAEA
  00056	51		 push	 ecx
  00057	8b 55 fc	 mov	 edx, DWORD PTR _new_data_record$[ebp]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 _memcpy
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 243  : 
; 244  :         command_line_comms_data_record_size *= 2;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_data_record_size@@3HA ; command_line_comms_data_record_size
  00068	d1 e0		 shl	 eax, 1
  0006a	a3 00 00 00 00	 mov	 DWORD PTR ?command_line_comms_data_record_size@@3HA, eax ; command_line_comms_data_record_size

; 245  : 
; 246  :         free_mem (data_record);

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?data_record@@3PAEA
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 247  : 
; 248  :         data_record = new_data_record;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _new_data_record$[ebp]
  0007d	a3 00 00 00 00	 mov	 DWORD PTR ?data_record@@3PAEA, eax

; 249  : 
; 250  :         #if DEBUG_MODULE
; 251  : 
; 252  :         debug_log ("COMMS MAN: MAX_DATA_RECORD_SIZE exceeded, mallocing %d (requested %d)", command_line_comms_data_record_size, data_record_size + size);
; 253  : 
; 254  :         #endif
; 255  :     }

  00082	eb 85		 jmp	 SHORT $LN2@comms_reco
$LN3@comms_reco:

; 256  : 
; 257  :     //
; 258  :     // Store size of data
; 259  :     //
; 260  : 
; 261  :     memcpy (&data_record [data_record_size], &size, sizeof (int));

  00084	6a 04		 push	 4
  00086	8d 45 0c	 lea	 eax, DWORD PTR _size$[ebp]
  00089	50		 push	 eax
  0008a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?data_record@@3PAEA
  00090	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?data_record_size@@3HA ; data_record_size
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _memcpy
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 262  : 
; 263  :     data_record_size += sizeof (int);

  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?data_record_size@@3HA ; data_record_size
  000a4	83 c0 04	 add	 eax, 4
  000a7	a3 00 00 00 00	 mov	 DWORD PTR ?data_record_size@@3HA, eax ; data_record_size

; 264  : 
; 265  :     //
; 266  :     // Store data
; 267  :     //
; 268  : 
; 269  :     #if DEBUG_MODULE >= 2
; 270  : 
; 271  :     debug_log ("COMMS MAN: recording %d data", size);
; 272  : 
; 273  :     #endif
; 274  : 
; 275  :     #if COMMS_STATS
; 276  : 
; 277  :     packet_record_data_count ++;

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?packet_record_data_count@@3HA ; packet_record_data_count
  000b1	83 c0 01	 add	 eax, 1
  000b4	a3 00 00 00 00	 mov	 DWORD PTR ?packet_record_data_count@@3HA, eax ; packet_record_data_count

; 278  : 
; 279  :     #endif
; 280  : 
; 281  :     memcpy (&data_record [data_record_size], data, size);

  000b9	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  000bc	50		 push	 eax
  000bd	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  000c0	51		 push	 ecx
  000c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?data_record@@3PAEA
  000c7	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?data_record_size@@3HA ; data_record_size
  000cd	52		 push	 edx
  000ce	e8 00 00 00 00	 call	 _memcpy
  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 282  : 
; 283  :     data_record_size += size;

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?data_record_size@@3HA ; data_record_size
  000db	03 45 0c	 add	 eax, DWORD PTR _size$[ebp]
  000de	a3 00 00 00 00	 mov	 DWORD PTR ?data_record_size@@3HA, eax ; data_record_size

; 284  : 
; 285  :     //
; 286  :     // latency test
; 287  :     //
; 288  :     {
; 289  : 
; 290  :         int
; 291  :             packet_count;
; 292  : 
; 293  :         packet_count = data_record_size / command_line_comms_packet_data_size;

  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?data_record_size@@3HA ; data_record_size
  000e8	99		 cdq
  000e9	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?command_line_comms_packet_data_size@@3HA ; command_line_comms_packet_data_size
  000ef	89 45 f8	 mov	 DWORD PTR _packet_count$1[ebp], eax

; 294  : 
; 295  :         if (packet_count > 1)
; 296  :         {
; 297  : 
; 298  :             //debug_log ("COMM_MAN: possible packet latency problem. Holding %d packets", packet_count);
; 299  :         }
; 300  :     }
; 301  :     //
; 302  :     // end
; 303  :     //
; 304  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
?comms_record_data@@YGXPAEH@Z ENDP			; comms_record_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?net_getServerList@@YGXXZ
_TEXT	SEGMENT
_respondingServer$ = -88				; size = 4
_index$ = -84						; size = 4
_header$ = -80						; size = 80
?net_getServerList@@YGXXZ PROC				; net_getServerList, COMDAT

; 2670 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2671 :     char header[80];
; 2672 :     int index = 0;

  0000c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0

; 2673 :     int respondingServer = 0;

  00013	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _respondingServer$[ebp], 0

; 2674 : 
; 2675 :     if (command_line_report_to_masterserver == FALSE)

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_report_to_masterserver@@3HA, 0 ; command_line_report_to_masterserver
  00021	75 05		 jne	 SHORT $LN5@net_getSer

; 2676 :     	return;

  00023	e9 95 01 00 00	 jmp	 $LN1@net_getSer
$LN5@net_getSer:

; 2677 : 
; 2678 :     debug_log ("GETSERVERLIST: Init");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KBLCGJOL@GETSERVERLIST?3?5Init@
  0002d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00032	83 c4 04	 add	 esp, 4

; 2679 : 
; 2680 :     if ((mastersocket <=0) && (mastersocket2 <=0))

  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mastersocket@@3HA, 0 ; mastersocket
  0003c	7f 18		 jg	 SHORT $LN6@net_getSer
  0003e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mastersocket2@@3HA, 0 ; mastersocket2
  00045	7f 0f		 jg	 SHORT $LN6@net_getSer

; 2681 :     {
; 2682 :     	numServers = 0;

  00047	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?numServers@@3HA, 0 ; numServers

; 2683 : 	return;

  00051	e9 67 01 00 00	 jmp	 $LN1@net_getSer
$LN6@net_getSer:

; 2684 :     }
; 2685 : 
; 2686 : 
; 2687 :     if (num_multiplayer_refreshes == 1)

  00056	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?num_multiplayer_refreshes@@3HA, 1 ; num_multiplayer_refreshes
  0005d	75 4b		 jne	 SHORT $LN7@net_getSer

; 2688 :     {
; 2689 :       //Request a list of servers
; 2690 :       sprintf(SendBuffer, "Y");

  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_01NFFPALBN@Y@
  00064	68 00 00 00 00	 push	 OFFSET ?SendBuffer@@3PADA ; SendBuffer
  00069	e8 00 00 00 00	 call	 _sprintf
  0006e	83 c4 08	 add	 esp, 8

; 2691 :       if (mastersocket > 0 )

  00071	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mastersocket@@3HA, 0 ; mastersocket
  00078	7e 0c		 jle	 SHORT $LN9@net_getSer

; 2692 :         net_sendDataToMaster (SendBuffer, 1);

  0007a	6a 01		 push	 1
  0007c	68 00 00 00 00	 push	 OFFSET ?SendBuffer@@3PADA ; SendBuffer
  00081	e8 00 00 00 00	 call	 ?net_sendDataToMaster@@YGXPADH@Z ; net_sendDataToMaster
$LN9@net_getSer:

; 2693 :       if (mastersocket2 > 0 )

  00086	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mastersocket2@@3HA, 0 ; mastersocket2
  0008d	7e 0c		 jle	 SHORT $LN10@net_getSer

; 2694 :         net_sendDataToMaster (SendBuffer, 2);

  0008f	6a 02		 push	 2
  00091	68 00 00 00 00	 push	 OFFSET ?SendBuffer@@3PADA ; SendBuffer
  00096	e8 00 00 00 00	 call	 ?net_sendDataToMaster@@YGXPADH@Z ; net_sendDataToMaster
$LN10@net_getSer:

; 2695 : 
; 2696 :       debug_log ("GETSERVERLIST: Request sent");

  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JDEKKDPO@GETSERVERLIST?3?5Request?5sent@
  000a0	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000a5	83 c4 04	 add	 esp, 4
  000a8	eb 13		 jmp	 SHORT $LN8@net_getSer
$LN7@net_getSer:

; 2697 :     }
; 2698 :     else if (num_multiplayer_refreshes > 2)

  000aa	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?num_multiplayer_refreshes@@3HA, 2 ; num_multiplayer_refreshes
  000b1	7e 0a		 jle	 SHORT $LN8@net_getSer

; 2699 :     {
; 2700 :           num_multiplayer_refreshes = 0;

  000b3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_multiplayer_refreshes@@3HA, 0 ; num_multiplayer_refreshes
$LN8@net_getSer:

; 2701 :     }
; 2702 : 
; 2703 : //		do {
; 2704 : //		timeout++;
; 2705 : //		} while ((net_CheckForDataOnSocket (mastersocket, mastersocket2)!=1) && (timeout < 6000000));
; 2706 : //		if (timeout<6000000)
; 2707 : //		{
; 2708 : 		respondingServer = net_CheckForDataOnSocket (mastersocket, mastersocket2);

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mastersocket2@@3HA ; mastersocket2
  000c2	50		 push	 eax
  000c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mastersocket@@3HA ; mastersocket
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ?net_CheckForDataOnSocket@@YGHHH@Z ; net_CheckForDataOnSocket
  000cf	89 45 a8	 mov	 DWORD PTR _respondingServer$[ebp], eax

; 2709 : 		if (respondingServer > 0)

  000d2	83 7d a8 00	 cmp	 DWORD PTR _respondingServer$[ebp], 0
  000d6	0f 8e e1 00 00
	00		 jle	 $LN1@net_getSer
$LN4@net_getSer:

; 2710 : 		{
; 2711 : 			do
; 2712 : 			{
; 2713 : 				net_receiveData (respondingServer); //The received data is in ReceiveBuffer!!

  000dc	8b 45 a8	 mov	 eax, DWORD PTR _respondingServer$[ebp]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?net_receiveData@@YGXH@Z ; net_receiveData

; 2714 : 				debug_log ("GETSERVERLIST: Received: %s", ReceiveBuffer);

  000e5	68 00 00 00 00	 push	 OFFSET ?ReceiveBuffer@@3PADA ; ReceiveBuffer
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HDGNBLLN@GETSERVERLIST?3?5Received?3?5?$CFs@
  000ef	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000f4	83 c4 08	 add	 esp, 8

; 2715 : 
; 2716 : 				if (ReceiveBuffer[0] == 'W')

  000f7	b8 01 00 00 00	 mov	 eax, 1
  000fc	6b c8 00	 imul	 ecx, eax, 0
  000ff	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR ?ReceiveBuffer@@3PADA[ecx]
  00106	83 fa 57	 cmp	 edx, 87			; 00000057H
  00109	75 63		 jne	 SHORT $LN2@net_getSer

; 2717 : 				{
; 2718 : 				    sscanf(ReceiveBuffer, "%s %s %s %i %i %s", header, Servers[index].Adress,

  0010b	69 45 ac 78 02
	00 00		 imul	 eax, DWORD PTR _index$[ebp], 632
  00112	05 6c 01 00 00	 add	 eax, OFFSET ?Servers@@3PAUServerData@@A+364
  00117	50		 push	 eax
  00118	69 4d ac 78 02
	00 00		 imul	 ecx, DWORD PTR _index$[ebp], 632
  0011f	81 c1 68 01 00
	00		 add	 ecx, OFFSET ?Servers@@3PAUServerData@@A+360
  00125	51		 push	 ecx
  00126	69 55 ac 78 02
	00 00		 imul	 edx, DWORD PTR _index$[ebp], 632
  0012d	81 c2 64 01 00
	00		 add	 edx, OFFSET ?Servers@@3PAUServerData@@A+356
  00133	52		 push	 edx
  00134	69 45 ac 78 02
	00 00		 imul	 eax, DWORD PTR _index$[ebp], 632
  0013b	05 64 00 00 00	 add	 eax, OFFSET ?Servers@@3PAUServerData@@A+100
  00140	50		 push	 eax
  00141	69 4d ac 78 02
	00 00		 imul	 ecx, DWORD PTR _index$[ebp], 632
  00148	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?Servers@@3PAUServerData@@A ; Servers
  0014e	51		 push	 ecx
  0014f	8d 55 b0	 lea	 edx, DWORD PTR _header$[ebp]
  00152	52		 push	 edx
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KGOOAEAC@?$CFs?5?$CFs?5?$CFs?5?$CFi?5?$CFi?5?$CFs@
  00158	68 00 00 00 00	 push	 OFFSET ?ReceiveBuffer@@3PADA ; ReceiveBuffer
  0015d	e8 00 00 00 00	 call	 _sscanf
  00162	83 c4 20	 add	 esp, 32			; 00000020H

; 2719 : 										Servers[index].Name,
; 2720 : 										&Servers[index].MaxClients,
; 2721 : 										&Servers[index].CurClients,
; 2722 : 										Servers[index].Version);
; 2723 : 					index++;

  00165	8b 45 ac	 mov	 eax, DWORD PTR _index$[ebp]
  00168	83 c0 01	 add	 eax, 1
  0016b	89 45 ac	 mov	 DWORD PTR _index$[ebp], eax
$LN2@net_getSer:

; 2724 : 				}
; 2725 : 			} while (ReceiveBuffer[0] && strcmp(ReceiveBuffer, "X Done!") != 0);

  0016e	b8 01 00 00 00	 mov	 eax, 1
  00173	6b c8 00	 imul	 ecx, eax, 0
  00176	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR ?ReceiveBuffer@@3PADA[ecx]
  0017d	85 d2		 test	 edx, edx
  0017f	74 1a		 je	 SHORT $LN3@net_getSer
  00181	68 00 00 00 00	 push	 OFFSET ??_C@_07EFHCMFIH@X?5Done?$CB@
  00186	68 00 00 00 00	 push	 OFFSET ?ReceiveBuffer@@3PADA ; ReceiveBuffer
  0018b	e8 00 00 00 00	 call	 _strcmp
  00190	83 c4 08	 add	 esp, 8
  00193	85 c0		 test	 eax, eax
  00195	0f 85 41 ff ff
	ff		 jne	 $LN4@net_getSer
$LN3@net_getSer:

; 2726 : 			numServers = index;

  0019b	8b 45 ac	 mov	 eax, DWORD PTR _index$[ebp]
  0019e	a3 00 00 00 00	 mov	 DWORD PTR ?numServers@@3HA, eax ; numServers

; 2727 : 			sprintf(Servers[index].Version, "");

  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  001a8	69 45 ac 78 02
	00 00		 imul	 eax, DWORD PTR _index$[ebp], 632
  001af	05 6c 01 00 00	 add	 eax, OFFSET ?Servers@@3PAUServerData@@A+364
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 _sprintf
  001ba	83 c4 08	 add	 esp, 8
$LN1@net_getSer:

; 2728 : 		}
; 2729 : //		net_uninit_heartbeat();
; 2730 : }

  001bd	5f		 pop	 edi
  001be	5e		 pop	 esi
  001bf	5b		 pop	 ebx
  001c0	8b e5		 mov	 esp, ebp
  001c2	5d		 pop	 ebp
  001c3	c3		 ret	 0
?net_getServerList@@YGXXZ ENDP				; net_getServerList
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?net_set_hostname@@YGXPBD@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?net_set_hostname@@YGXPBD@Z PROC			; net_set_hostname, COMDAT

; 2500 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2501 :     sprintf(localplayer, "%s", data);

  00009	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00012	68 00 00 00 00	 push	 OFFSET ?localplayer@@3PADA ; localplayer
  00017	e8 00 00 00 00	 call	 _sprintf
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2502 : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?net_set_hostname@@YGXPBD@Z ENDP			; net_set_hostname
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?net_uninit_heartbeat@@YGXXZ
_TEXT	SEGMENT
?net_uninit_heartbeat@@YGXXZ PROC			; net_uninit_heartbeat, COMDAT

; 2798 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2799 :     if (command_line_report_to_masterserver == FALSE)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_report_to_masterserver@@3HA, 0 ; command_line_report_to_masterserver
  00010	75 02		 jne	 SHORT $LN2@net_uninit

; 2800 :     	return;

  00012	eb 3c		 jmp	 SHORT $LN1@net_uninit
$LN2@net_uninit:

; 2801 : 
; 2802 :     if (mastersocket >= 0)

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mastersocket@@3HA, 0 ; mastersocket
  0001b	7c 0b		 jl	 SHORT $LN3@net_uninit

; 2803 :           closesocket (mastersocket);

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mastersocket@@3HA ; mastersocket
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _closesocket@4
$LN3@net_uninit:

; 2804 :         mastersocket = -1;

  00028	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mastersocket@@3HA, -1 ; mastersocket

; 2805 :     if (mastersocket2 >= 0)

  00032	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mastersocket2@@3HA, 0 ; mastersocket2
  00039	7c 0b		 jl	 SHORT $LN4@net_uninit

; 2806 :           closesocket (mastersocket2);

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mastersocket2@@3HA ; mastersocket2
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _closesocket@4
$LN4@net_uninit:

; 2807 :         mastersocket2 = -1;

  00046	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mastersocket2@@3HA, -1 ; mastersocket2
$LN1@net_uninit:

; 2808 : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?net_uninit_heartbeat@@YGXXZ ENDP			; net_uninit_heartbeat
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?net_handle_heartbeat@@YGXXZ
_TEXT	SEGMENT
_this_connection$1 = -8					; size = 4
_this_connection$ = -4					; size = 4
?net_handle_heartbeat@@YGXXZ PROC			; net_handle_heartbeat, COMDAT

; 2759 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2760 :     connection_data_type
; 2761 :         *this_connection;
; 2762 : 
; 2763 :     if (command_line_report_to_masterserver == FALSE)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_report_to_masterserver@@3HA, 0 ; command_line_report_to_masterserver
  00010	75 02		 jne	 SHORT $LN2@net_handle

; 2764 :     	return;

  00012	eb 79		 jmp	 SHORT $LN1@net_handle
$LN2@net_handle:

; 2765 : 
; 2766 :         // Time for another heartbeat?
; 2767 :     if (last_heartbeat_time < get_system_time ())

  00014	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  00019	39 05 00 00 00
	00		 cmp	 DWORD PTR ?last_heartbeat_time@@3IA, eax ; last_heartbeat_time
  0001f	73 6c		 jae	 SHORT $LN1@net_handle

; 2768 :     {
; 2769 :       debug_log ("HEARTBEAT: Time for another heartbeat!");

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@CHBBMAOB@HEARTBEAT?3?5Time?5for?5another?5hea@
  00026	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0002b	83 c4 04	 add	 esp, 4

; 2770 :       //Check whether we're a server AND whether the mission is running
; 2771 :       if ((get_comms_model () == COMMS_MODEL_SERVER) && (get_game_status () == GAME_STATUS_INITIALISED))

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00035	75 47		 jne	 SHORT $LN4@net_handle
  00037	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?game_status@@3W4GAME_STATUS_TYPES@@A, 3 ; game_status
  0003e	75 3e		 jne	 SHORT $LN4@net_handle

; 2772 :       {
; 2773 :         this_connection = direct_play_get_connection_data ();

  00040	e8 00 00 00 00	 call	 ?direct_play_get_connection_data@@YGPAUCONNECTION_DATA_TYPE@@XZ ; direct_play_get_connection_data
  00045	89 45 fc	 mov	 DWORD PTR _this_connection$[ebp], eax

; 2774 :         // Check if network is enabled
; 2775 :         if ( ( this_connection ) && ( this_connection->service_provider.guid ) )

  00048	83 7d fc 00	 cmp	 DWORD PTR _this_connection$[ebp], 0
  0004c	74 30		 je	 SHORT $LN4@net_handle
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this_connection$[ebp]
  00051	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00055	74 27		 je	 SHORT $LN4@net_handle

; 2776 :         {
; 2777 :           connection_data_type *this_connection;
; 2778 :           this_connection = direct_play_get_connection_data ();

  00057	e8 00 00 00 00	 call	 ?direct_play_get_connection_data@@YGPAUCONNECTION_DATA_TYPE@@XZ ; direct_play_get_connection_data
  0005c	89 45 f8	 mov	 DWORD PTR _this_connection$1[ebp], eax

; 2779 :           // Check whether the current networking method is TCP/IP
; 2780 :           if ( memcmp ( this_connection->service_provider.guid, &DPSPGUID_TCPIP, sizeof ( GUID ) ) == 0 )

  0005f	6a 10		 push	 16			; 00000010H
  00061	68 00 00 00 00	 push	 OFFSET _DPSPGUID_TCPIP
  00066	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$1[ebp]
  00069	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 _memcmp
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
  00075	85 c0		 test	 eax, eax
  00077	75 05		 jne	 SHORT $LN4@net_handle

; 2781 :           {
; 2782 :             //Send heartbeat
; 2783 :             net_heartbeat();

  00079	e8 00 00 00 00	 call	 ?net_heartbeat@@YGXXZ	; net_heartbeat
$LN4@net_handle:

; 2784 :           }
; 2785 :         }
; 2786 :       }
; 2787 :       //Set next scheduled heartbeat time. Strangely, ONE_SECOND does not equal one second, hence the multiplication factor "1000"
; 2788 :           last_heartbeat_time = get_system_time () + (ONE_SECOND * 60 * 1000);

  0007e	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  00083	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  00088	a3 00 00 00 00	 mov	 DWORD PTR ?last_heartbeat_time@@3IA, eax ; last_heartbeat_time
$LN1@net_handle:

; 2789 :     }
; 2790 : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?net_handle_heartbeat@@YGXXZ ENDP			; net_handle_heartbeat
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?net_init_heartbeat@@YGXXZ
_TEXT	SEGMENT
?net_init_heartbeat@@YGXXZ PROC				; net_init_heartbeat, COMDAT

; 2742 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2743 :     if (command_line_report_to_masterserver == FALSE)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_report_to_masterserver@@3HA, 0 ; command_line_report_to_masterserver
  00010	75 02		 jne	 SHORT $LN2@net_init_h

; 2744 :     	return;

  00012	eb 48		 jmp	 SHORT $LN1@net_init_h
$LN2@net_init_h:

; 2745 : 
; 2746 :         mastersocket = net_connectToMaster (command_line_primary_server_setting, MasterPort, 1);

  00014	6a 01		 push	 1
  00016	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?MasterPort@@3FA ; MasterPort
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ?command_line_primary_server_setting@@3PADA ; command_line_primary_server_setting
  00023	e8 00 00 00 00	 call	 ?net_connectToMaster@@YGHPADFH@Z ; net_connectToMaster
  00028	a3 00 00 00 00	 mov	 DWORD PTR ?mastersocket@@3HA, eax ; mastersocket

; 2747 :         if (mastersocket <= 0)

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mastersocket@@3HA, 0 ; mastersocket
  00034	7f 19		 jg	 SHORT $LN3@net_init_h

; 2748 :           mastersocket2 = net_connectToMaster (command_line_secondary_server_setting, MasterPort, 2);

  00036	6a 02		 push	 2
  00038	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?MasterPort@@3FA ; MasterPort
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ?command_line_secondary_server_setting@@3PADA ; command_line_secondary_server_setting
  00045	e8 00 00 00 00	 call	 ?net_connectToMaster@@YGHPADFH@Z ; net_connectToMaster
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?mastersocket2@@3HA, eax ; mastersocket2
$LN3@net_init_h:

; 2749 :     debug_log ("HEARTBEAT: after heartbeat initialisation");

  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KMFCHCEN@HEARTBEAT?3?5after?5heartbeat?5init@
  00054	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00059	83 c4 04	 add	 esp, 4
$LN1@net_init_h:

; 2750 : 
; 2751 : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?net_init_heartbeat@@YGXXZ ENDP				; net_init_heartbeat
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?update_ui_comms@@YGXXZ
_TEXT	SEGMENT
?update_ui_comms@@YGXXZ PROC				; update_ui_comms, COMDAT

; 2439 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2440 : 
; 2441 : static unsigned int
; 2442 :         update_ticks = 0;
; 2443 : 
; 2444 :     if (update_ticks < get_system_time ())

  00009	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  0000e	39 05 00 00 00
	00		 cmp	 DWORD PTR ?update_ticks@?1??update_ui_comms@@YGXXZ@4IA, eax
  00014	73 25		 jae	 SHORT $LN1@update_ui_

; 2445 :     {
; 2446 : 
; 2447 :         data_exchange ();

  00016	e8 00 00 00 00	 call	 ?data_exchange@@YGXXZ	; data_exchange

; 2448 : 
; 2449 :         update_ticks = get_system_time () + (ONE_SECOND / command_line_max_game_update_rate);

  0001b	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  00020	8b c8		 mov	 ecx, eax
  00022	b8 01 00 00 00	 mov	 eax, 1
  00027	99		 cdq
  00028	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?command_line_max_game_update_rate@@3HA ; command_line_max_game_update_rate
  0002e	03 c8		 add	 ecx, eax
  00030	89 0d 00 00 00
	00		 mov	 DWORD PTR ?update_ticks@?1??update_ui_comms@@YGXXZ@4IA, ecx

; 2450 : 
; 2451 :         set_delta_time ();

  00036	e8 00 00 00 00	 call	 ?set_delta_time@@YGXXZ	; set_delta_time
$LN1@update_ui_:

; 2452 :     }
; 2453 : 
; 2454 : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?update_ui_comms@@YGXXZ ENDP				; update_ui_comms
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?comms_process_data@@YGXXZ
_TEXT	SEGMENT
tv1076 = -2980						; size = 4
tv1587 = -2976						; size = 4
tv1560 = -2976						; size = 4
tv1305 = -2976						; size = 4
tv1255 = -2976						; size = 4
tv1211 = -2976						; size = 4
tv1120 = -2976						; size = 4
tv1100 = -2976						; size = 4
tv1070 = -2976						; size = 4
tv1019 = -2976						; size = 4
tv992 = -2976						; size = 4
tv971 = -2976						; size = 4
tv923 = -2976						; size = 4
tv1579 = -2972						; size = 4
tv1552 = -2972						; size = 4
tv1437 = -2972						; size = 4
tv1415 = -2972						; size = 4
tv1297 = -2972						; size = 4
tv1247 = -2972						; size = 4
tv1233 = -2972						; size = 4
tv1203 = -2972						; size = 4
tv1151 = -2972						; size = 4
tv1112 = -2972						; size = 4
tv1092 = -2972						; size = 4
tv1063 = -2972						; size = 4
tv1011 = -2972						; size = 4
tv984 = -2972						; size = 4
tv963 = -2972						; size = 4
tv916 = -2972						; size = 4
tv75 = -2972						; size = 4
_data_size$1 = -2584					; size = 4
_new_connection$2 = -2580				; size = 4
_index_number$3 = -2576					; size = 4
_new_connection$4 = -2572				; size = 4
_index_number$5 = -2568					; size = 4
_index_number$6 = -2564					; size = 4
_index_number$7 = -2560					; size = 4
_gunship$8 = -2556					; size = 4
_new_connection$9 = -2552				; size = 4
_stub_packet$10 = -2548					; size = 4
_index_number$11 = -2544				; size = 4
_loop2$12 = -2540					; size = 4
_loop1$13 = -2536					; size = 4
_index_number$14 = -2532				; size = 4
_new_connection$15 = -2528				; size = 4
_buffer$16 = -2524					; size = 8
_index_number$17 = -2516				; size = 4
_pilot_data$18 = -2512					; size = 8
_new_connection$19 = -2504				; size = 4
_index$20 = -2500					; size = 4
_new_pilot$21 = -2496					; size = 4
_pilot_data$22 = -2492					; size = 284
_new_connection$23 = -2208				; size = 4
_col$24 = -2204						; size = 4
_buffer$25 = -2200					; size = 128
_temp_side_data_filename$26 = -2072			; size = 256
_temp_population_placement_filename$27 = -1816		; size = 256
_temp_campaign_population_filename$28 = -1560		; size = 256
_warzone_ffp_filename$29 = -1304			; size = 256
_ptr$30 = -1048						; size = 4
_loop$31 = -1044					; size = 4
_player_count$32 = -1040				; size = 4
_sector_size$33 = -1036					; size = 4
_z_size$34 = -1032					; size = 4
_x_size$35 = -1028					; size = 4
_size$36 = -1024					; size = 4
_server_version_number$37 = -1020			; size = 4
_client_version_number$38 = -1016			; size = 4
_pilot$39 = -1012					; size = 4
_force$40 = -1008					; size = 4
_connection$41 = -1004					; size = 4
_season$42 = -1000					; size = 4
_temp_wut_filename$43 = -996				; size = 128
_buffer$44 = -868					; size = 256
_motd$45 = -612						; size = 256
_ptr$46 = -356						; size = 4
_size$47 = -352						; size = 4
_new_connection$48 = -348				; size = 4
_fp$49 = -344						; size = 4
_size$50 = -340						; size = 4
_ptr$51 = -336						; size = 4
_buf$52 = -332						; size = 256
_new_connection$53 = -76				; size = 4
_size$54 = -72						; size = 4
_player_count$55 = -68					; size = 4
_server_version_number$56 = -64				; size = 4
_ptr$57 = -60						; size = 4
_resend_send_type$58 = -56				; size = 4
_type$ = -52						; size = 4
_send_type$ = -48					; size = 4
_member$ = -44						; size = 4
_received_id$ = -40					; size = 4
_received_size$ = -36					; size = 4
_receive_flag$ = -32					; size = 4
_packet_id$ = -28					; size = 4
_frame_id$ = -24					; size = 4
_planner_event$ = -20					; size = 4
_received_data$ = -16					; size = 4
_connection$ = -12					; size = 4
_this_connection$ = -8					; size = 4
_current_session$ = -4					; size = 4
?comms_process_data@@YGXXZ PROC				; comms_process_data, COMDAT

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 0b 00
	00		 sub	 esp, 2980		; 00000ba4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 584  : 
; 585  :     session_list_data_type
; 586  :         *current_session;
; 587  : 
; 588  :     connection_list_type
; 589  :         *this_connection,
; 590  :         *connection;
; 591  : 
; 592  :     unsigned char
; 593  :         *received_data;
; 594  : 
; 595  :     int
; 596  :         planner_event,
; 597  :         frame_id,
; 598  :         packet_id,
; 599  :         receive_flag,
; 600  :         received_size;
; 601  : 
; 602  :     DPID
; 603  :         received_id = 0;

  0000c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _received_id$[ebp], 0

; 604  : 
; 605  :     entity
; 606  :         *member;
; 607  : 
; 608  :     send_types
; 609  :         send_type;
; 610  : 
; 611  :     packet_types
; 612  :         type;
; 613  : 
; 614  :     // receive all packets in queue
; 615  : 
; 616  :     current_session = get_current_game_session ();

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A ; current_game_session
  00018	89 45 fc	 mov	 DWORD PTR _current_session$[ebp], eax

; 617  : 
; 618  :     received_size = MAX_RECEIVE_SIZE;

  0001b	c7 45 dc 0c 02
	00 00		 mov	 DWORD PTR _received_size$[ebp], 524 ; 0000020cH

; 619  : 
; 620  :     connection = get_connection_list_head ();

  00022	e8 00 00 00 00	 call	 ?get_connection_list_head@@YGPAUCONNECTION_LIST_TYPE@@XZ ; get_connection_list_head
  00027	89 45 f4	 mov	 DWORD PTR _connection$[ebp], eax
$LN2@comms_proc:

; 621  : 
; 622  :     while (connection)

  0002a	83 7d f4 00	 cmp	 DWORD PTR _connection$[ebp], 0
  0002e	0f 84 48 2a 00
	00		 je	 $LN3@comms_proc

; 623  :     {
; 624  : 
; 625  :         this_connection = connection;

  00034	8b 45 f4	 mov	 eax, DWORD PTR _connection$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR _this_connection$[ebp], eax

; 626  : 
; 627  :         connection = connection->next;

  0003a	8b 45 f4	 mov	 eax, DWORD PTR _connection$[ebp]
  0003d	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00040	89 4d f4	 mov	 DWORD PTR _connection$[ebp], ecx

; 628  : 
; 629  :         send_type = SEND_TYPE_GROUP;

  00043	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _send_type$[ebp], 1
$LN4@comms_proc:

; 630  : 
; 631  :         while (send_type >= SEND_TYPE_PERSONAL)

  0004a	83 7d d0 00	 cmp	 DWORD PTR _send_type$[ebp], 0
  0004e	0f 8c 23 2a 00
	00		 jl	 $LN5@comms_proc

; 632  :         {
; 633  : 
; 634  :             receive_flag = TRUE;

  00054	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _receive_flag$[ebp], 1
$LN6@comms_proc:

; 635  : 
; 636  :             while (receive_flag)

  0005b	83 7d e0 00	 cmp	 DWORD PTR _receive_flag$[ebp], 0
  0005f	0f 84 04 2a 00
	00		 je	 $LN7@comms_proc

; 637  :             {
; 638  : 
; 639  :                 type = (packet_types) process_packet_list (send_type, this_connection, &received_id, &received_data, &received_size);

  00065	8d 45 dc	 lea	 eax, DWORD PTR _received_size$[ebp]
  00068	50		 push	 eax
  00069	8d 4d f0	 lea	 ecx, DWORD PTR _received_data$[ebp]
  0006c	51		 push	 ecx
  0006d	8d 55 d8	 lea	 edx, DWORD PTR _received_id$[ebp]
  00070	52		 push	 edx
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  00074	50		 push	 eax
  00075	8b 4d d0	 mov	 ecx, DWORD PTR _send_type$[ebp]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z ; process_packet_list
  0007e	89 45 cc	 mov	 DWORD PTR _type$[ebp], eax

; 640  : 
; 641  :                 switch (type)

  00081	8b 45 cc	 mov	 eax, DWORD PTR _type$[ebp]
  00084	89 85 64 f4 ff
	ff		 mov	 DWORD PTR tv75[ebp], eax
  0008a	83 bd 64 f4 ff
	ff 15		 cmp	 DWORD PTR tv75[ebp], 21	; 00000015H
  00091	0f 87 bc 29 00
	00		 ja	 $LN115@comms_proc
  00097	8b 8d 64 f4 ff
	ff		 mov	 ecx, DWORD PTR tv75[ebp]
  0009d	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN173@comms_proc[ecx*4]
$LN26@comms_proc:

; 642  :                 {
; 643  : 
; 644  :                     ///////////////////////////////////////////////////////////////////////////////////////////////
; 645  :                     //
; 646  :                     // System packets, used internally
; 647  :                     //
; 648  :                     ///////////////////////////////////////////////////////////////////////////////////////////////
; 649  : 
; 650  :                     case PACKET_TYPE_INVALID:
; 651  :                     {
; 652  : 
; 653  :                         receive_flag = FALSE;

  000a4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _receive_flag$[ebp], 0

; 654  : 
; 655  :                         if (get_comms_model () == COMMS_MODEL_SERVER)

  000ab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  000b2	75 34		 jne	 SHORT $LN28@comms_proc

; 656  :                         {
; 657  : 
; 658  :                             if (this_connection->packet_rerequested > command_line_comms_packet_rerequest_limit)

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  000b7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ba	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?command_line_comms_packet_rerequest_limit@@3HA ; command_line_comms_packet_rerequest_limit
  000c0	7e 26		 jle	 SHORT $LN28@comms_proc

; 659  :                             {
; 660  : 
; 661  :                                 debug_log ("COMM_MAN: REJECTING CONNECTION. CONNECTION TOO BAD (re-request limit %d reached)", command_line_comms_packet_rerequest_limit);

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_packet_rerequest_limit@@3HA ; command_line_comms_packet_rerequest_limit
  000c7	50		 push	 eax
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@GCCLHEAH@COMM_MAN?3?5REJECTING?5CONNECTION?4@
  000cd	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000d2	83 c4 08	 add	 esp, 8

; 662  : 
; 663  :                                 send_packet (this_connection->connection_id, PACKET_TYPE_SERVER_REJECTED, NULL, 0, SEND_TYPE_PERSONAL);

  000d5	6a 00		 push	 0
  000d7	6a 00		 push	 0
  000d9	6a 00		 push	 0
  000db	6a 0d		 push	 13			; 0000000dH
  000dd	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  000e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet
$LN28@comms_proc:

; 664  :                             }
; 665  :                         }
; 666  : 
; 667  :                         break;

  000e8	e9 77 29 00 00	 jmp	 $LN8@comms_proc
$LN29@comms_proc:

; 668  :                     }
; 669  : 
; 670  :                     case PACKET_TYPE_RESEND_PACKET:
; 671  :                     {
; 672  : 
; 673  :                         send_types
; 674  :                             resend_send_type;
; 675  : 
; 676  :                         frame_id = get_list_item (received_data, int);

  000ed	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  000f0	83 c0 04	 add	 eax, 4
  000f3	89 45 f0	 mov	 DWORD PTR _received_data$[ebp], eax
  000f6	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  000f9	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  000fc	89 55 e8	 mov	 DWORD PTR _frame_id$[ebp], edx

; 677  : 
; 678  :                         packet_id = get_list_item (received_data, int);

  000ff	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  00102	83 c0 04	 add	 eax, 4
  00105	89 45 f0	 mov	 DWORD PTR _received_data$[ebp], eax
  00108	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  0010b	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0010e	89 55 e4	 mov	 DWORD PTR _packet_id$[ebp], edx

; 679  : 
; 680  :                         resend_send_type = get_list_item (received_data, send_types);

  00111	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  00114	83 c0 04	 add	 eax, 4
  00117	89 45 f0	 mov	 DWORD PTR _received_data$[ebp], eax
  0011a	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  0011d	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00120	89 55 c8	 mov	 DWORD PTR _resend_send_type$58[ebp], edx

; 681  : 
; 682  :                         #if DEBUG_MODULE
; 683  : 
; 684  :                         if (this_connection->pilot_entity)
; 685  :                         {
; 686  : 
; 687  :                             debug_log ("COMMS MAN: received RESEND PACKET for frame %d packet %d from %s (dpid %d)",
; 688  :                                             frame_id, packet_id,
; 689  :                                             get_local_entity_string (this_connection->pilot_entity, STRING_TYPE_PILOTS_NAME),
; 690  :                                             received_id);
; 691  :                         }
; 692  :                         else
; 693  :                         {
; 694  : 
; 695  :                             debug_log ("COMMS MAN: received RESEND PACKET by unknown (pdid %d)",
; 696  :                                             received_id);
; 697  :                         }
; 698  : 
; 699  :                         #endif
; 700  : 
; 701  :                         resend_packet (received_id, frame_id, packet_id, resend_send_type);

  00123	8b 45 c8	 mov	 eax, DWORD PTR _resend_send_type$58[ebp]
  00126	50		 push	 eax
  00127	8b 4d e4	 mov	 ecx, DWORD PTR _packet_id$[ebp]
  0012a	51		 push	 ecx
  0012b	8b 55 e8	 mov	 edx, DWORD PTR _frame_id$[ebp]
  0012e	52		 push	 edx
  0012f	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?resend_packet@@YGPAUSTUB_PACKET_TYPE@@KHHW4SEND_TYPES@@@Z ; resend_packet

; 702  : 
; 703  :                         break;

  00138	e9 27 29 00 00	 jmp	 $LN8@comms_proc
$LN30@comms_proc:

; 704  :                     }
; 705  : 
; 706  :                     ///////////////////////////////////////////////////////////////////////////////////////////////
; 707  :                     //
; 708  :                     // Packets for initialisation and joining
; 709  :                     //
; 710  :                     ///////////////////////////////////////////////////////////////////////////////////////////////
; 711  : 
; 712  :                     case PACKET_TYPE_SESSION_QUERY:
; 713  :                     {
; 714  : 
; 715  :                         char
; 716  :                             *ptr;
; 717  : 
; 718  :                         int
; 719  :                             server_version_number,
; 720  :                             player_count,
; 721  :                             size;
; 722  : 
; 723  :                         connection_list_type
; 724  :                             *new_connection;
; 725  : 
; 726  :                         if (get_comms_model () == COMMS_MODEL_SERVER)

  0013d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00144	0f 85 3b 03 00
	00		 jne	 $LN33@comms_proc

; 727  :                         {
; 728  : 
; 729  :                             #if DEBUG_MODULE
; 730  : 
; 731  :                             if (this_connection->pilot_entity)
; 732  :                             {
; 733  : 
; 734  :                                 debug_log ("COMMS MAN: RECEIVED SESSION QUERY from %s (dpid %d)",
; 735  :                                                 get_local_entity_string (this_connection->pilot_entity, STRING_TYPE_PILOTS_NAME),
; 736  :                                                 received_id);
; 737  :                             }
; 738  :                             else
; 739  :                             {
; 740  : 
; 741  :                                 debug_log ("COMMS MAN: RECEIVED SESSION QUERY from %d", received_id);
; 742  :                             }
; 743  : 
; 744  :                             #endif
; 745  : 
; 746  :                             new_connection = get_connection_list_item (received_id);

  0014a	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  00153	89 45 b4	 mov	 DWORD PTR _new_connection$53[ebp], eax

; 747  : 
; 748  :                             if (!new_connection->already_sent_query_data)

  00156	8b 45 b4	 mov	 eax, DWORD PTR _new_connection$53[ebp]
  00159	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0015d	0f 85 15 03 00
	00		 jne	 $LN32@comms_proc

; 749  :                             {
; 750  : 
; 751  :                                 new_connection->already_sent_query_data = TRUE;

  00163	8b 45 b4	 mov	 eax, DWORD PTR _new_connection$53[ebp]
  00166	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1
$LN10@comms_proc:

; 752  : 
; 753  :                                 while (TRUE)

  0016d	b8 01 00 00 00	 mov	 eax, 1
  00172	85 c0		 test	 eax, eax
  00174	0f 84 de 02 00
	00		 je	 $LN11@comms_proc

; 754  :                                 {
; 755  : 
; 756  :                                     ptr = (char *) new_connection->connection_receive_buffer;

  0017a	8b 45 b4	 mov	 eax, DWORD PTR _new_connection$53[ebp]
  0017d	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00180	89 4d c4	 mov	 DWORD PTR _ptr$57[ebp], ecx

; 757  : 
; 758  :                                     size = 0;

  00183	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _size$54[ebp], 0

; 759  : 
; 760  :                                     /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
; 761  :                                     //
; 762  :                                     // Check both client and server are running same campaign data
; 763  :                                     //
; 764  : 
; 765  :                                     // Jabberwock 050301 Hardcoded version number
; 766  : 
; 767  :                                     // please put in the date of the version! check it is changed twice!
; 768  :                                     server_version_number = VERSION_NUMBER_INT;

  0018a	c7 45 c0 ec 2c
	00 00		 mov	 DWORD PTR _server_version_number$56[ebp], 11500 ; 00002cecH

; 769  : 
; 770  :                                     quick_set_list_item (ptr, int, server_version_number);

  00191	8b 45 c4	 mov	 eax, DWORD PTR _ptr$57[ebp]
  00194	83 c0 04	 add	 eax, 4
  00197	89 45 c4	 mov	 DWORD PTR _ptr$57[ebp], eax
  0019a	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  0019d	8b 55 c0	 mov	 edx, DWORD PTR _server_version_number$56[ebp]
  001a0	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 771  : 
; 772  :                                     size += sizeof (int);

  001a3	8b 45 b8	 mov	 eax, DWORD PTR _size$54[ebp]
  001a6	83 c0 04	 add	 eax, 4
  001a9	89 45 b8	 mov	 DWORD PTR _size$54[ebp], eax

; 773  :                                     //
; 774  :                                     /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
; 775  : 
; 776  :                                     // map details
; 777  : 
; 778  :                                     quick_set_list_item (ptr, int, NUM_MAP_X_SECTORS);

  001ac	8b 45 c4	 mov	 eax, DWORD PTR _ptr$57[ebp]
  001af	83 c0 04	 add	 eax, 4
  001b2	89 45 c4	 mov	 DWORD PTR _ptr$57[ebp], eax
  001b5	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  001b8	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  001be	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 779  : 
; 780  :                                     quick_set_list_item (ptr, int, NUM_MAP_Z_SECTORS);

  001c1	8b 45 c4	 mov	 eax, DWORD PTR _ptr$57[ebp]
  001c4	83 c0 04	 add	 eax, 4
  001c7	89 45 c4	 mov	 DWORD PTR _ptr$57[ebp], eax
  001ca	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  001cd	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  001d3	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 781  : 
; 782  :                                     quick_set_list_item (ptr, int, SECTOR_SIDE_LENGTH);

  001d6	8b 45 c4	 mov	 eax, DWORD PTR _ptr$57[ebp]
  001d9	83 c0 04	 add	 eax, 4
  001dc	89 45 c4	 mov	 DWORD PTR _ptr$57[ebp], eax
  001df	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  001e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  001e8	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 783  : 
; 784  :                                     size += sizeof (int) * 3;

  001eb	8b 45 b8	 mov	 eax, DWORD PTR _size$54[ebp]
  001ee	83 c0 0c	 add	 eax, 12			; 0000000cH
  001f1	89 45 b8	 mov	 DWORD PTR _size$54[ebp], eax

; 785  : 
; 786  :                                     // data path
; 787  : 
; 788  :                                     strcpy (ptr, current_session->data_path);

  001f4	8b 45 fc	 mov	 eax, DWORD PTR _current_session$[ebp]
  001f7	83 c0 1c	 add	 eax, 28			; 0000001cH
  001fa	50		 push	 eax
  001fb	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  001fe	51		 push	 ecx
  001ff	e8 00 00 00 00	 call	 _strcpy
  00204	83 c4 08	 add	 esp, 8

; 789  : 
; 790  :                                     ptr += strlen (current_session->data_path) + 1;

  00207	8b 45 fc	 mov	 eax, DWORD PTR _current_session$[ebp]
  0020a	83 c0 1c	 add	 eax, 28			; 0000001cH
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 _strlen
  00213	83 c4 04	 add	 esp, 4
  00216	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  00219	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0021d	89 55 c4	 mov	 DWORD PTR _ptr$57[ebp], edx

; 791  : 
; 792  :                                     size += strlen (current_session->data_path) + 1;

  00220	8b 45 fc	 mov	 eax, DWORD PTR _current_session$[ebp]
  00223	83 c0 1c	 add	 eax, 28			; 0000001cH
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 _strlen
  0022c	83 c4 04	 add	 esp, 4
  0022f	8b 4d b8	 mov	 ecx, DWORD PTR _size$54[ebp]
  00232	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00236	89 55 b8	 mov	 DWORD PTR _size$54[ebp], edx

; 793  : 
; 794  :                                     // population_placement filename
; 795  : 
; 796  :                                     if (population_placement_filename)

  00239	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?population_placement_filename@@3PADA, 0 ; population_placement_filename
  00240	74 44		 je	 SHORT $LN34@comms_proc

; 797  :                                     {
; 798  : 
; 799  :                                         strcpy (ptr, population_placement_filename);

  00242	a1 00 00 00 00	 mov	 eax, DWORD PTR ?population_placement_filename@@3PADA ; population_placement_filename
  00247	50		 push	 eax
  00248	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  0024b	51		 push	 ecx
  0024c	e8 00 00 00 00	 call	 _strcpy
  00251	83 c4 08	 add	 esp, 8

; 800  : 
; 801  :                                         ptr += strlen (population_placement_filename) + 1;

  00254	a1 00 00 00 00	 mov	 eax, DWORD PTR ?population_placement_filename@@3PADA ; population_placement_filename
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 _strlen
  0025f	83 c4 04	 add	 esp, 4
  00262	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  00265	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00269	89 55 c4	 mov	 DWORD PTR _ptr$57[ebp], edx

; 802  : 
; 803  :                                         size += strlen (population_placement_filename) + 1;

  0026c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?population_placement_filename@@3PADA ; population_placement_filename
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 _strlen
  00277	83 c4 04	 add	 esp, 4
  0027a	8b 4d b8	 mov	 ecx, DWORD PTR _size$54[ebp]
  0027d	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00281	89 55 b8	 mov	 DWORD PTR _size$54[ebp], edx

; 804  :                                     }
; 805  :                                     else

  00284	eb 3f		 jmp	 SHORT $LN35@comms_proc
$LN34@comms_proc:

; 806  :                                     {
; 807  : 
; 808  :                                         strcpy (ptr, "\0");

  00286	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  0028b	8b 45 c4	 mov	 eax, DWORD PTR _ptr$57[ebp]
  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 _strcpy
  00294	83 c4 08	 add	 esp, 8

; 809  : 
; 810  :                                         ptr += strlen ("\0") + 1;

  00297	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  0029c	e8 00 00 00 00	 call	 _strlen
  002a1	83 c4 04	 add	 esp, 4
  002a4	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  002a7	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  002ab	89 55 c4	 mov	 DWORD PTR _ptr$57[ebp], edx

; 811  : 
; 812  :                                         size += strlen ("\0") + 1;

  002ae	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  002b3	e8 00 00 00 00	 call	 _strlen
  002b8	83 c4 04	 add	 esp, 4
  002bb	8b 4d b8	 mov	 ecx, DWORD PTR _size$54[ebp]
  002be	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  002c2	89 55 b8	 mov	 DWORD PTR _size$54[ebp], edx
$LN35@comms_proc:

; 813  :                                     }
; 814  : 
; 815  :                                     //
; 816  : 
; 817  :                                     // side_data filename
; 818  : 
; 819  :                                     if (side_data_filename)

  002c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?side_data_filename@@3PADA, 0 ; side_data_filename
  002cc	74 44		 je	 SHORT $LN36@comms_proc

; 820  :                                     {
; 821  : 
; 822  :                                         strcpy (ptr, side_data_filename);

  002ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_data_filename@@3PADA ; side_data_filename
  002d3	50		 push	 eax
  002d4	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  002d7	51		 push	 ecx
  002d8	e8 00 00 00 00	 call	 _strcpy
  002dd	83 c4 08	 add	 esp, 8

; 823  : 
; 824  :                                         ptr += strlen (side_data_filename) + 1;

  002e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_data_filename@@3PADA ; side_data_filename
  002e5	50		 push	 eax
  002e6	e8 00 00 00 00	 call	 _strlen
  002eb	83 c4 04	 add	 esp, 4
  002ee	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  002f1	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  002f5	89 55 c4	 mov	 DWORD PTR _ptr$57[ebp], edx

; 825  : 
; 826  :                                         size += strlen (side_data_filename) + 1;

  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_data_filename@@3PADA ; side_data_filename
  002fd	50		 push	 eax
  002fe	e8 00 00 00 00	 call	 _strlen
  00303	83 c4 04	 add	 esp, 4
  00306	8b 4d b8	 mov	 ecx, DWORD PTR _size$54[ebp]
  00309	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0030d	89 55 b8	 mov	 DWORD PTR _size$54[ebp], edx

; 827  :                                     }
; 828  :                                     else

  00310	eb 3f		 jmp	 SHORT $LN37@comms_proc
$LN36@comms_proc:

; 829  :                                     {
; 830  : 
; 831  :                                         strcpy (ptr, "\0");

  00312	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  00317	8b 45 c4	 mov	 eax, DWORD PTR _ptr$57[ebp]
  0031a	50		 push	 eax
  0031b	e8 00 00 00 00	 call	 _strcpy
  00320	83 c4 08	 add	 esp, 8

; 832  : 
; 833  :                                         ptr += strlen ("\0") + 1;

  00323	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  00328	e8 00 00 00 00	 call	 _strlen
  0032d	83 c4 04	 add	 esp, 4
  00330	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  00333	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00337	89 55 c4	 mov	 DWORD PTR _ptr$57[ebp], edx

; 834  : 
; 835  :                                         size += strlen ("\0") + 1;

  0033a	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  0033f	e8 00 00 00 00	 call	 _strlen
  00344	83 c4 04	 add	 esp, 4
  00347	8b 4d b8	 mov	 ecx, DWORD PTR _size$54[ebp]
  0034a	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0034e	89 55 b8	 mov	 DWORD PTR _size$54[ebp], edx
$LN37@comms_proc:

; 836  :                                     }
; 837  : 
; 838  :                                     // campaign_population filename
; 839  : 
; 840  :                                     if (campaign_population_filename)

  00351	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?campaign_population_filename@@3PADA, 0 ; campaign_population_filename
  00358	74 44		 je	 SHORT $LN38@comms_proc

; 841  :                                     {
; 842  : 
; 843  :                                         strcpy (ptr, campaign_population_filename);

  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?campaign_population_filename@@3PADA ; campaign_population_filename
  0035f	50		 push	 eax
  00360	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  00363	51		 push	 ecx
  00364	e8 00 00 00 00	 call	 _strcpy
  00369	83 c4 08	 add	 esp, 8

; 844  : 
; 845  :                                         ptr += strlen (campaign_population_filename) + 1;

  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?campaign_population_filename@@3PADA ; campaign_population_filename
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 _strlen
  00377	83 c4 04	 add	 esp, 4
  0037a	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  0037d	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00381	89 55 c4	 mov	 DWORD PTR _ptr$57[ebp], edx

; 846  : 
; 847  :                                         size += strlen (campaign_population_filename) + 1;

  00384	a1 00 00 00 00	 mov	 eax, DWORD PTR ?campaign_population_filename@@3PADA ; campaign_population_filename
  00389	50		 push	 eax
  0038a	e8 00 00 00 00	 call	 _strlen
  0038f	83 c4 04	 add	 esp, 4
  00392	8b 4d b8	 mov	 ecx, DWORD PTR _size$54[ebp]
  00395	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00399	89 55 b8	 mov	 DWORD PTR _size$54[ebp], edx

; 848  :                                     }
; 849  :                                     else

  0039c	eb 3f		 jmp	 SHORT $LN39@comms_proc
$LN38@comms_proc:

; 850  :                                     {
; 851  : 
; 852  :                                         strcpy (ptr, "\0");

  0039e	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  003a3	8b 45 c4	 mov	 eax, DWORD PTR _ptr$57[ebp]
  003a6	50		 push	 eax
  003a7	e8 00 00 00 00	 call	 _strcpy
  003ac	83 c4 08	 add	 esp, 8

; 853  : 
; 854  :                                         ptr += strlen ("\0") + 1;

  003af	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  003b4	e8 00 00 00 00	 call	 _strlen
  003b9	83 c4 04	 add	 esp, 4
  003bc	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  003bf	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  003c3	89 55 c4	 mov	 DWORD PTR _ptr$57[ebp], edx

; 855  : 
; 856  :                                         size += strlen ("\0") + 1;

  003c6	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  003cb	e8 00 00 00 00	 call	 _strlen
  003d0	83 c4 04	 add	 esp, 4
  003d3	8b 4d b8	 mov	 ecx, DWORD PTR _size$54[ebp]
  003d6	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  003da	89 55 b8	 mov	 DWORD PTR _size$54[ebp], edx
$LN39@comms_proc:

; 857  :                                     }
; 858  : 
; 859  :                                     //
; 860  :                                     // planner position and zoom
; 861  :                                     //
; 862  : 
; 863  : //                                  quick_set_list_item (ptr, float, planner_map_data.centre_map_x);
; 864  : 
; 865  : //                                  quick_set_list_item (ptr, float, planner_map_data.centre_map_z);
; 866  : 
; 867  : //                                  size += sizeof (float) * 2;
; 868  : 
; 869  : //                                  quick_set_list_item (ptr, int, planner_map_data.map_zoom);
; 870  : 
; 871  : //                                  size += sizeof (int);
; 872  : 
; 873  :                                     //
; 874  :                                     // Pilots
; 875  :                                     //
; 876  : 
; 877  :                                     player_count = get_number_of_connected_players ();

  003dd	e8 00 00 00 00	 call	 ?get_number_of_connected_players@@YGHXZ ; get_number_of_connected_players
  003e2	89 45 bc	 mov	 DWORD PTR _player_count$55[ebp], eax

; 878  : 
; 879  :                                     quick_set_list_item (ptr, int, player_count);

  003e5	8b 45 c4	 mov	 eax, DWORD PTR _ptr$57[ebp]
  003e8	83 c0 04	 add	 eax, 4
  003eb	89 45 c4	 mov	 DWORD PTR _ptr$57[ebp], eax
  003ee	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  003f1	8b 55 bc	 mov	 edx, DWORD PTR _player_count$55[ebp]
  003f4	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 880  : 
; 881  :                                     size += sizeof (int);

  003f7	8b 45 b8	 mov	 eax, DWORD PTR _size$54[ebp]
  003fa	83 c0 04	 add	 eax, 4
  003fd	89 45 b8	 mov	 DWORD PTR _size$54[ebp], eax

; 882  : 
; 883  :                                     //
; 884  :                                     //
; 885  :                                     //
; 886  : 
; 887  :                                     #if DEBUG_MODULE
; 888  : 
; 889  :                                     debug_log ("COMM_MAN: sending data path %s, population placement %s, side data %s, campaign_pop file %s",
; 890  :                                                     current_session->data_path, population_placement_filename, side_data_filename, campaign_population_filename);
; 891  : 
; 892  :                                     #endif
; 893  : 
; 894  :                                     new_connection->connection_receive_buffer_size -= size;

  00400	8b 45 b4	 mov	 eax, DWORD PTR _new_connection$53[ebp]
  00403	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00406	2b 4d b8	 sub	 ecx, DWORD PTR _size$54[ebp]
  00409	8b 55 b4	 mov	 edx, DWORD PTR _new_connection$53[ebp]
  0040c	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 895  : 
; 896  :                                     if (!pack_session ((unsigned char *) ptr, &new_connection->connection_receive_buffer_size, PACK_MODE_BROWSE_SESSION))

  0040f	6a 02		 push	 2
  00411	8b 45 b4	 mov	 eax, DWORD PTR _new_connection$53[ebp]
  00414	83 c0 1c	 add	 eax, 28			; 0000001cH
  00417	50		 push	 eax
  00418	8b 4d c4	 mov	 ecx, DWORD PTR _ptr$57[ebp]
  0041b	51		 push	 ecx
  0041c	e8 00 00 00 00	 call	 ?pack_session@@YGHPAEPAHW4PACK_MODES@@@Z ; pack_session
  00421	85 c0		 test	 eax, eax
  00423	75 02		 jne	 SHORT $LN40@comms_proc

; 897  :                                     {
; 898  : 
; 899  :                                         break;

  00425	eb 31		 jmp	 SHORT $LN11@comms_proc
$LN40@comms_proc:

; 900  :                                     }
; 901  : 
; 902  :                                     new_connection->connection_receive_buffer_size *= 2;

  00427	8b 45 b4	 mov	 eax, DWORD PTR _new_connection$53[ebp]
  0042a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0042d	d1 e1		 shl	 ecx, 1
  0042f	8b 55 b4	 mov	 edx, DWORD PTR _new_connection$53[ebp]
  00432	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 903  : 
; 904  :                                     #if DEBUG_MODULE
; 905  : 
; 906  :                                     debug_log ("COMMS MAN: Browse: connection_receive_buffer too small, mallocing to %d", new_connection->connection_receive_buffer_size);
; 907  : 
; 908  :                                     #endif
; 909  : 
; 910  :                                     free_mem (new_connection->connection_receive_buffer);

  00435	8b 45 b4	 mov	 eax, DWORD PTR _new_connection$53[ebp]
  00438	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0043b	51		 push	 ecx
  0043c	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 911  : 
; 912  :                                     new_connection->connection_receive_buffer = (unsigned char *) malloc_heap_mem (new_connection->connection_receive_buffer_size);

  00441	8b 45 b4	 mov	 eax, DWORD PTR _new_connection$53[ebp]
  00444	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00447	51		 push	 ecx
  00448	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  0044d	8b 55 b4	 mov	 edx, DWORD PTR _new_connection$53[ebp]
  00450	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 913  :                                 }

  00453	e9 15 fd ff ff	 jmp	 $LN10@comms_proc
$LN11@comms_proc:

; 914  : 
; 915  :                                 //
; 916  :                                 //
; 917  :                                 //
; 918  : 
; 919  :                                 send_packet (received_id, PACKET_TYPE_SESSION_INFO, new_connection->connection_receive_buffer, new_connection->connection_receive_buffer_size + size, SEND_TYPE_PERSONAL);

  00458	6a 00		 push	 0
  0045a	8b 45 b4	 mov	 eax, DWORD PTR _new_connection$53[ebp]
  0045d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00460	03 4d b8	 add	 ecx, DWORD PTR _size$54[ebp]
  00463	51		 push	 ecx
  00464	8b 55 b4	 mov	 edx, DWORD PTR _new_connection$53[ebp]
  00467	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0046a	50		 push	 eax
  0046b	6a 03		 push	 3
  0046d	8b 4d d8	 mov	 ecx, DWORD PTR _received_id$[ebp]
  00470	51		 push	 ecx
  00471	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet

; 920  : 
; 921  :                                 /*
; 922  :                                 {
; 923  : 
; 924  :                                     FILE
; 925  :                                         *test_ptr;
; 926  : 
; 927  :                                     test_ptr = fopen ("out.txt", "wb");
; 928  : 
; 929  :                                     fwrite (new_connection->connection_receive_buffer, 1, new_connection->connection_receive_buffer_size + size, test_ptr);
; 930  : 
; 931  :                                     fclose (test_ptr);
; 932  :                                 }
; 933  :                                 */
; 934  :                             }
; 935  :                             else

  00476	eb 0d		 jmp	 SHORT $LN33@comms_proc
$LN32@comms_proc:

; 936  :                             {
; 937  : 
; 938  :                                 debug_log ("COMM_MAN: not resending query data");

  00478	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@FPKJHBDA@COMM_MAN?3?5not?5resending?5query?5d@
  0047d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00482	83 c4 04	 add	 esp, 4
$LN33@comms_proc:

; 939  :                             }
; 940  :                         }
; 941  : 
; 942  :                         break;

  00485	e9 da 25 00 00	 jmp	 $LN8@comms_proc
$LN41@comms_proc:

; 943  :                     }
; 944  : 
; 945  : // Jabberwock 031118 Server side settings
; 946  : 
; 947  :                     case PACKET_TYPE_SETTINGS_REQUEST:
; 948  : 					{
; 949  :                         char
; 950  :                         	buf [256],
; 951  :                             *ptr;
; 952  : 
; 953  :                         int
; 954  :                             size;
; 955  : 
; 956  :                         FILE
; 957  :                      		*fp;
; 958  : 
; 959  :                         connection_list_type
; 960  :                             *new_connection;
; 961  : 
; 962  : 						if (get_comms_model () == COMMS_MODEL_SERVER)

  0048a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00491	0f 85 fc 05 00
	00		 jne	 $LN42@comms_proc

; 963  : 						{
; 964  : 							send_comms_data ();

  00497	e8 00 00 00 00	 call	 ?send_comms_data@@YGXXZ	; send_comms_data

; 965  : 
; 966  :                             new_connection = get_connection_list_item (received_id);

  0049c	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  0049f	50		 push	 eax
  004a0	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  004a5	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _new_connection$48[ebp], eax

; 967  : 
; 968  :          		       	    ptr = (char *) new_connection->connection_receive_buffer;

  004ab	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _new_connection$48[ebp]
  004b1	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  004b4	89 8d b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], ecx

; 969  : 
; 970  : 							size = 0;

  004ba	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _size$50[ebp], 0

; 971  : 
; 972  : 							// MOTD
; 973  : 
; 974  : 							strcpy (buf, "\0");

  004c4	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  004c9	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _buf$52[ebp]
  004cf	50		 push	 eax
  004d0	e8 00 00 00 00	 call	 _strcpy
  004d5	83 c4 08	 add	 esp, 8

; 975  : 
; 976  : 							if (file_exist ("motd.txt"))

  004d8	68 00 00 00 00	 push	 OFFSET ??_C@_08LNEOKFHF@motd?4txt@
  004dd	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  004e2	85 c0		 test	 eax, eax
  004e4	74 6d		 je	 SHORT $LN45@comms_proc

; 977  : 							{
; 978  : 								if (file_size ("motd.txt") < 256)

  004e6	68 00 00 00 00	 push	 OFFSET ??_C@_08LNEOKFHF@motd?4txt@
  004eb	e8 00 00 00 00	 call	 ?file_size@@YGHPBD@Z	; file_size
  004f0	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  004f5	7d 4f		 jge	 SHORT $LN44@comms_proc

; 979  : 								{
; 980  : 
; 981  : 									fp = fopen ("motd.txt", "r" );

  004f7	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  004fc	68 00 00 00 00	 push	 OFFSET ??_C@_08LNEOKFHF@motd?4txt@
  00501	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00507	83 c4 08	 add	 esp, 8
  0050a	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _fp$49[ebp], eax

; 982  : 
; 983  : 									if ( fp )

  00510	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _fp$49[ebp], 0
  00517	74 2b		 je	 SHORT $LN46@comms_proc

; 984  : 									{
; 985  : 										fscanf (fp, "%[^\n]\n", buf);

  00519	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _buf$52[ebp]
  0051f	50		 push	 eax
  00520	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  00525	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _fp$49[ebp]
  0052b	51		 push	 ecx
  0052c	e8 00 00 00 00	 call	 _fscanf
  00531	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 
; 987  : 										fclose ( fp );

  00534	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _fp$49[ebp]
  0053a	50		 push	 eax
  0053b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00541	83 c4 04	 add	 esp, 4
$LN46@comms_proc:

; 988  : 									}
; 989  : 								}
; 990  : 								else

  00544	eb 0d		 jmp	 SHORT $LN45@comms_proc
$LN44@comms_proc:

; 991  : 								{
; 992  : 									server_log ("motd.txt too long!");

  00546	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IBNOHPMA@motd?4txt?5too?5long?$CB@
  0054b	e8 00 00 00 00	 call	 ?server_log@@YAXPBDZZ	; server_log
  00550	83 c4 04	 add	 esp, 4
$LN45@comms_proc:

; 993  : 								}
; 994  : 							}
; 995  : 
; 996  : 							strcpy (ptr, buf);

  00553	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _buf$52[ebp]
  00559	50		 push	 eax
  0055a	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$51[ebp]
  00560	51		 push	 ecx
  00561	e8 00 00 00 00	 call	 _strcpy
  00566	83 c4 08	 add	 esp, 8

; 997  : 
; 998  : 							ptr += strlen (buf) + 1;

  00569	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _buf$52[ebp]
  0056f	50		 push	 eax
  00570	e8 00 00 00 00	 call	 _strlen
  00575	83 c4 04	 add	 esp, 4
  00578	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$51[ebp]
  0057e	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00582	89 95 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], edx

; 999  : 
; 1000 : 							size += strlen (buf) + 1;

  00588	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _buf$52[ebp]
  0058e	50		 push	 eax
  0058f	e8 00 00 00 00	 call	 _strlen
  00594	83 c4 04	 add	 esp, 4
  00597	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _size$50[ebp]
  0059d	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  005a1	89 95 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], edx

; 1001 : 							// end of MOTD
; 1002 : 
; 1003 : 							// WUT checking
; 1004 : 
; 1005 : 							if (command_line_wut)

  005a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_wut@@3HA, 0 ; command_line_wut
  005ae	74 50		 je	 SHORT $LN47@comms_proc

; 1006 : 							{
; 1007 : 								strcpy (ptr, WUT_filename);

  005b0	68 00 00 00 00	 push	 OFFSET ?WUT_filename@@3PADA ; WUT_filename
  005b5	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  005bb	50		 push	 eax
  005bc	e8 00 00 00 00	 call	 _strcpy
  005c1	83 c4 08	 add	 esp, 8

; 1008 : 
; 1009 : 								ptr += strlen (WUT_filename) + 1;

  005c4	68 00 00 00 00	 push	 OFFSET ?WUT_filename@@3PADA ; WUT_filename
  005c9	e8 00 00 00 00	 call	 _strlen
  005ce	83 c4 04	 add	 esp, 4
  005d1	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$51[ebp]
  005d7	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  005db	89 95 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], edx

; 1010 : 
; 1011 : 								size += strlen (WUT_filename) + 1;

  005e1	68 00 00 00 00	 push	 OFFSET ?WUT_filename@@3PADA ; WUT_filename
  005e6	e8 00 00 00 00	 call	 _strlen
  005eb	83 c4 04	 add	 esp, 4
  005ee	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _size$50[ebp]
  005f4	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  005f8	89 95 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], edx

; 1012 : 							}
; 1013 : 							else

  005fe	eb 4e		 jmp	 SHORT $LN48@comms_proc
$LN47@comms_proc:

; 1014 : 							{
; 1015 : 								strcpy (ptr, "NONE");

  00600	68 00 00 00 00	 push	 OFFSET ??_C@_04OKGDLNCL@NONE@
  00605	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  0060b	50		 push	 eax
  0060c	e8 00 00 00 00	 call	 _strcpy
  00611	83 c4 08	 add	 esp, 8

; 1016 : 
; 1017 : 								ptr += strlen ("NONE") + 1;

  00614	68 00 00 00 00	 push	 OFFSET ??_C@_04OKGDLNCL@NONE@
  00619	e8 00 00 00 00	 call	 _strlen
  0061e	83 c4 04	 add	 esp, 4
  00621	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$51[ebp]
  00627	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0062b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], edx

; 1018 : 
; 1019 : 								size += strlen ("NONE") + 1;

  00631	68 00 00 00 00	 push	 OFFSET ??_C@_04OKGDLNCL@NONE@
  00636	e8 00 00 00 00	 call	 _strlen
  0063b	83 c4 04	 add	 esp, 4
  0063e	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _size$50[ebp]
  00644	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00648	89 95 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], edx
$LN48@comms_proc:

; 1020 : 							}
; 1021 : 
; 1022 : 							// Jabberwock 050129 WUT transfer - server side
; 1023 : 							// with great help from Gotcha
; 1024 : 
; 1025 : 							// Aircraft
; 1026 : 
; 1027 : 							memcpy (ptr, aircraft_database, sizeof(aircraft_database));

  0064e	68 80 1e 00 00	 push	 7808			; 00001e80H
  00653	68 00 00 00 00	 push	 OFFSET ?aircraft_database@@3PAUAIRCRAFT_DATA@@A ; aircraft_database
  00658	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  0065e	50		 push	 eax
  0065f	e8 00 00 00 00	 call	 _memcpy
  00664	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1028 : 
; 1029 : 							ptr += sizeof(aircraft_database);

  00667	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  0066d	05 80 1e 00 00	 add	 eax, 7808		; 00001e80H
  00672	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1030 : 
; 1031 : 							size += sizeof(aircraft_database);

  00678	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  0067e	05 80 1e 00 00	 add	 eax, 7808		; 00001e80H
  00683	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1032 : 
; 1033 : 							// Vehicle
; 1034 : 
; 1035 : 							memcpy (ptr, vehicle_database, sizeof(vehicle_database));

  00689	68 e8 1b 00 00	 push	 7144			; 00001be8H
  0068e	68 00 00 00 00	 push	 OFFSET ?vehicle_database@@3PAUVEHICLE_DATA@@A ; vehicle_database
  00693	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00699	50		 push	 eax
  0069a	e8 00 00 00 00	 call	 _memcpy
  0069f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1036 : 
; 1037 : 							ptr += sizeof(vehicle_database);

  006a2	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  006a8	05 e8 1b 00 00	 add	 eax, 7144		; 00001be8H
  006ad	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1038 : 
; 1039 : 							size += sizeof(vehicle_database);

  006b3	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  006b9	05 e8 1b 00 00	 add	 eax, 7144		; 00001be8H
  006be	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1040 : 
; 1041 : 							// Weapon
; 1042 : 
; 1043 : 							memcpy (ptr, weapon_database, sizeof(weapon_database));

  006c4	68 80 42 00 00	 push	 17024			; 00004280H
  006c9	68 00 00 00 00	 push	 OFFSET ?weapon_database@@3PAUWEAPON_DATA@@A ; weapon_database
  006ce	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  006d4	50		 push	 eax
  006d5	e8 00 00 00 00	 call	 _memcpy
  006da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1044 : 
; 1045 : 							ptr += sizeof(weapon_database);

  006dd	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  006e3	05 80 42 00 00	 add	 eax, 17024		; 00004280H
  006e8	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1046 : 
; 1047 : 							size += sizeof(weapon_database);

  006ee	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  006f4	05 80 42 00 00	 add	 eax, 17024		; 00004280H
  006f9	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1048 : 
; 1049 : 							// Keysite
; 1050 : 
; 1051 : 							memcpy (ptr, keysite_database, sizeof(keysite_database));

  006ff	68 64 02 00 00	 push	 612			; 00000264H
  00704	68 00 00 00 00	 push	 OFFSET ?keysite_database@@3PAUKEYSITE_DATA@@A ; keysite_database
  00709	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  0070f	50		 push	 eax
  00710	e8 00 00 00 00	 call	 _memcpy
  00715	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1052 : 
; 1053 : 							ptr += sizeof(keysite_database);

  00718	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  0071e	05 64 02 00 00	 add	 eax, 612		; 00000264H
  00723	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1054 : 
; 1055 : 							size += sizeof(keysite_database);

  00729	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  0072f	05 64 02 00 00	 add	 eax, 612		; 00000264H
  00734	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1056 : 
; 1057 : 							// Group
; 1058 : 
; 1059 : 							memcpy (ptr, group_database, sizeof(group_database));

  0073a	68 28 0a 00 00	 push	 2600			; 00000a28H
  0073f	68 00 00 00 00	 push	 OFFSET ?group_database@@3PAUGROUP_DATA@@A ; group_database
  00744	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  0074a	50		 push	 eax
  0074b	e8 00 00 00 00	 call	 _memcpy
  00750	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1060 : 
; 1061 : 							ptr += sizeof(group_database);

  00753	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00759	05 28 0a 00 00	 add	 eax, 2600		; 00000a28H
  0075e	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1062 : 
; 1063 : 							size += sizeof(group_database);

  00764	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  0076a	05 28 0a 00 00	 add	 eax, 2600		; 00000a28H
  0076f	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1064 : 
; 1065 : 							// Task
; 1066 : 
; 1067 : 							memcpy (ptr, task_database, sizeof(task_database));

  00775	68 60 09 00 00	 push	 2400			; 00000960H
  0077a	68 00 00 00 00	 push	 OFFSET ?task_database@@3PAUTASK_DATA@@A ; task_database
  0077f	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00785	50		 push	 eax
  00786	e8 00 00 00 00	 call	 _memcpy
  0078b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1068 : 
; 1069 : 							ptr += sizeof(task_database);

  0078e	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00794	05 60 09 00 00	 add	 eax, 2400		; 00000960H
  00799	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1070 : 
; 1071 : 							size += sizeof(task_database);

  0079f	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  007a5	05 60 09 00 00	 add	 eax, 2400		; 00000960H
  007aa	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1072 : 
; 1073 : 							// Waypoint
; 1074 : 
; 1075 : 							memcpy (ptr, waypoint_database, sizeof(waypoint_database));

  007b0	68 74 0e 00 00	 push	 3700			; 00000e74H
  007b5	68 00 00 00 00	 push	 OFFSET ?waypoint_database@@3PAUWAYPOINT_DATA@@A ; waypoint_database
  007ba	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  007c0	50		 push	 eax
  007c1	e8 00 00 00 00	 call	 _memcpy
  007c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1076 : 
; 1077 : 							ptr += sizeof(waypoint_database);

  007c9	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  007cf	05 74 0e 00 00	 add	 eax, 3700		; 00000e74H
  007d4	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1078 : 
; 1079 : 							size += sizeof(waypoint_database);

  007da	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  007e0	05 74 0e 00 00	 add	 eax, 3700		; 00000e74H
  007e5	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1080 : 
; 1081 : 							// Guide
; 1082 : 
; 1083 : 							memcpy (ptr, guide_database, sizeof(guide_database));

  007eb	68 78 04 00 00	 push	 1144			; 00000478H
  007f0	68 00 00 00 00	 push	 OFFSET ?guide_database@@3PAUGUIDE_DATA@@A ; guide_database
  007f5	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  007fb	50		 push	 eax
  007fc	e8 00 00 00 00	 call	 _memcpy
  00801	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1084 : 
; 1085 : 							ptr += sizeof(guide_database);

  00804	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  0080a	05 78 04 00 00	 add	 eax, 1144		; 00000478H
  0080f	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1086 : 
; 1087 : 							size += sizeof(guide_database);

  00815	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  0081b	05 78 04 00 00	 add	 eax, 1144		; 00000478H
  00820	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1088 : 
; 1089 : 							// Radar
; 1090 : 
; 1091 : 							memcpy (ptr, radar_range_apache, sizeof(radar_range_apache));

  00826	6a 14		 push	 20			; 00000014H
  00828	68 00 00 00 00	 push	 OFFSET ?radar_range_apache@@3PAMA ; radar_range_apache
  0082d	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00833	50		 push	 eax
  00834	e8 00 00 00 00	 call	 _memcpy
  00839	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1092 : 
; 1093 : 							ptr += sizeof(radar_range_apache);

  0083c	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00842	83 c0 14	 add	 eax, 20			; 00000014H
  00845	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1094 : 
; 1095 : 							size += sizeof(radar_range_apache);

  0084b	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  00851	83 c0 14	 add	 eax, 20			; 00000014H
  00854	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1096 : 
; 1097 : 							memcpy (ptr, radar_range_comanche, sizeof(radar_range_comanche));

  0085a	6a 14		 push	 20			; 00000014H
  0085c	68 00 00 00 00	 push	 OFFSET ?radar_range_comanche@@3PAMA ; radar_range_comanche
  00861	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00867	50		 push	 eax
  00868	e8 00 00 00 00	 call	 _memcpy
  0086d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1098 : 
; 1099 : 							ptr += sizeof(radar_range_comanche);

  00870	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00876	83 c0 14	 add	 eax, 20			; 00000014H
  00879	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1100 : 
; 1101 : 							size += sizeof(radar_range_comanche);

  0087f	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  00885	83 c0 14	 add	 eax, 20			; 00000014H
  00888	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1102 : 
; 1103 : 							memcpy (ptr, radar_range_blackhawk, sizeof(radar_range_blackhawk));

  0088e	6a 14		 push	 20			; 00000014H
  00890	68 00 00 00 00	 push	 OFFSET ?radar_range_blackhawk@@3PAMA ; radar_range_blackhawk
  00895	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  0089b	50		 push	 eax
  0089c	e8 00 00 00 00	 call	 _memcpy
  008a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1104 : 
; 1105 : 							ptr += sizeof(radar_range_blackhawk);

  008a4	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  008aa	83 c0 14	 add	 eax, 20			; 00000014H
  008ad	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1106 : 
; 1107 : 							size += sizeof(radar_range_blackhawk);

  008b3	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  008b9	83 c0 14	 add	 eax, 20			; 00000014H
  008bc	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1108 : 
; 1109 : 							memcpy (ptr, radar_range_hokum, sizeof(radar_range_hokum));

  008c2	6a 14		 push	 20			; 00000014H
  008c4	68 00 00 00 00	 push	 OFFSET ?radar_range_hokum@@3PAMA ; radar_range_hokum
  008c9	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  008cf	50		 push	 eax
  008d0	e8 00 00 00 00	 call	 _memcpy
  008d5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1110 : 
; 1111 : 							ptr += sizeof(radar_range_hokum);

  008d8	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  008de	83 c0 14	 add	 eax, 20			; 00000014H
  008e1	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1112 : 
; 1113 : 							size += sizeof(radar_range_hokum);

  008e7	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  008ed	83 c0 14	 add	 eax, 20			; 00000014H
  008f0	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1114 : 
; 1115 : 							memcpy (ptr, radar_range_havoc, sizeof(radar_range_havoc));

  008f6	6a 10		 push	 16			; 00000010H
  008f8	68 00 00 00 00	 push	 OFFSET ?radar_range_havoc@@3PAMA ; radar_range_havoc
  008fd	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00903	50		 push	 eax
  00904	e8 00 00 00 00	 call	 _memcpy
  00909	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1116 : 
; 1117 : 							ptr += sizeof(radar_range_havoc);

  0090c	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00912	83 c0 10	 add	 eax, 16			; 00000010H
  00915	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1118 : 
; 1119 : 							size += sizeof(radar_range_havoc);

  0091b	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  00921	83 c0 10	 add	 eax, 16			; 00000010H
  00924	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1120 : 
; 1121 : 							memcpy (ptr, radar_range_hind, sizeof(radar_range_hind));

  0092a	6a 10		 push	 16			; 00000010H
  0092c	68 00 00 00 00	 push	 OFFSET ?radar_range_hind@@3PAMA ; radar_range_hind
  00931	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00937	50		 push	 eax
  00938	e8 00 00 00 00	 call	 _memcpy
  0093d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1122 : 
; 1123 : 							ptr += sizeof(radar_range_hind);

  00940	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00946	83 c0 10	 add	 eax, 16			; 00000010H
  00949	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax

; 1124 : 
; 1125 : 							size += sizeof(radar_range_hind);

  0094f	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  00955	83 c0 10	 add	 eax, 16			; 00000010H
  00958	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1126 : 
; 1127 : 							// Jabberwock 050129 ends
; 1128 : 
; 1129 : 							quick_set_list_item (ptr, int, command_line_planner_goto_button);

  0095e	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00964	83 c0 04	 add	 eax, 4
  00967	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax
  0096d	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$51[ebp]
  00973	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_planner_goto_button@@3HA ; command_line_planner_goto_button
  00979	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 1130 : 
; 1131 : 							size += sizeof (int);

  0097c	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  00982	83 c0 04	 add	 eax, 4
  00985	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1132 : 
; 1133 : 							quick_set_list_item (ptr, int, command_line_vector_flight_model);

  0098b	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00991	83 c0 04	 add	 eax, 4
  00994	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax
  0099a	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$51[ebp]
  009a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_vector_flight_model@@3HA ; command_line_vector_flight_model
  009a6	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 1134 : 
; 1135 : 							size += sizeof (int);

  009a9	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  009af	83 c0 04	 add	 eax, 4
  009b2	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1136 : 
; 1137 : 							quick_set_list_item (ptr, int, command_line_ground_radar_ignores_infantry);

  009b8	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  009be	83 c0 04	 add	 eax, 4
  009c1	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax
  009c7	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$51[ebp]
  009cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_ground_radar_ignores_infantry@@3HA ; command_line_ground_radar_ignores_infantry
  009d3	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 1138 : 
; 1139 : 							size += sizeof (int);

  009d6	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  009dc	83 c0 04	 add	 eax, 4
  009df	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1140 : 
; 1141 : 							quick_set_list_item (ptr, int, command_line_camcom);

  009e5	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  009eb	83 c0 04	 add	 eax, 4
  009ee	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax
  009f4	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$51[ebp]
  009fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_camcom@@3HA ; command_line_camcom
  00a00	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 1142 : 
; 1143 : 							size += sizeof (int);

  00a03	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  00a09	83 c0 04	 add	 eax, 4
  00a0c	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1144 : 
; 1145 : 							// 03DEC05 Casm Added season info transer
; 1146 : 							//VJ 051227 use set and get global season here
; 1147 : 							quick_set_list_item (ptr, int, get_global_season() );

  00a12	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00a18	83 c0 04	 add	 eax, 4
  00a1b	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax
  00a21	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$51[ebp]
  00a27	8b 15 14 04 00
	00		 mov	 edx, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044
  00a2d	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 1148 : 
; 1149 : 							size += sizeof (int);

  00a30	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  00a36	83 c0 04	 add	 eax, 4
  00a39	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1150 : 
; 1151 : 							// arneh - send campaign map update interval
; 1152 : 							quick_set_list_item (ptr, int, command_line_campaign_map_update_interval);

  00a3f	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _ptr$51[ebp]
  00a45	83 c0 04	 add	 eax, 4
  00a48	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _ptr$51[ebp], eax
  00a4e	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$51[ebp]
  00a54	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_campaign_map_update_interval@@3HA ; command_line_campaign_map_update_interval
  00a5a	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 1153 : 
; 1154 : 							size += sizeof (int);

  00a5d	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _size$50[ebp]
  00a63	83 c0 04	 add	 eax, 4
  00a66	89 85 ac fe ff
	ff		 mov	 DWORD PTR _size$50[ebp], eax

; 1155 : 
; 1156 : 							send_packet (received_id, PACKET_TYPE_SETTINGS_DATA, new_connection->connection_receive_buffer, new_connection->connection_receive_buffer_size + size, SEND_TYPE_PERSONAL);

  00a6c	6a 00		 push	 0
  00a6e	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _new_connection$48[ebp]
  00a74	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00a77	03 8d ac fe ff
	ff		 add	 ecx, DWORD PTR _size$50[ebp]
  00a7d	51		 push	 ecx
  00a7e	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR _new_connection$48[ebp]
  00a84	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00a87	50		 push	 eax
  00a88	6a 12		 push	 18			; 00000012H
  00a8a	8b 4d d8	 mov	 ecx, DWORD PTR _received_id$[ebp]
  00a8d	51		 push	 ecx
  00a8e	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet
$LN42@comms_proc:

; 1157 : 
; 1158 : 						}
; 1159 : 
; 1160 : 						break;

  00a93	e9 cc 1f 00 00	 jmp	 $LN8@comms_proc
$LN49@comms_proc:

; 1161 : 					}
; 1162 : 
; 1163 : 					case PACKET_TYPE_SETTINGS_DATA:
; 1164 :                     {
; 1165 :                         int
; 1166 :                             size;
; 1167 : 
; 1168 :                         char
; 1169 :                             *ptr,
; 1170 :                             motd [256],
; 1171 :                             buffer [256],
; 1172 :                             temp_wut_filename[128];
; 1173 : 
; 1174 : 						int
; 1175 : 							season;
; 1176 : 
; 1177 : 	                   	ptr = (char *) received_data;

  00a98	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  00a9b	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1178 : 
; 1179 :                         size = 0;

  00aa1	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _size$47[ebp], 0

; 1180 : 
; 1181 : 						ui_object_destroy_list_items (session_info_list);

  00aab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  00ab0	50		 push	 eax
  00ab1	e8 00 00 00 00	 call	 ?ui_object_destroy_list_items@@YGXPAUUI_OBJECT@@@Z ; ui_object_destroy_list_items

; 1182 : 
; 1183 : 						// MOTD
; 1184 : 
; 1185 : 
; 1186 : 						strncpy (motd, ptr, sizeof (motd));

  00ab6	68 00 01 00 00	 push	 256			; 00000100H
  00abb	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00ac1	50		 push	 eax
  00ac2	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _motd$45[ebp]
  00ac8	51		 push	 ecx
  00ac9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00acf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1187 : 
; 1188 : 						ptr += strlen (motd) + 1;

  00ad2	8d 85 9c fd ff
	ff		 lea	 eax, DWORD PTR _motd$45[ebp]
  00ad8	50		 push	 eax
  00ad9	e8 00 00 00 00	 call	 _strlen
  00ade	83 c4 04	 add	 esp, 4
  00ae1	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$46[ebp]
  00ae7	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00aeb	89 95 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], edx

; 1189 : 
; 1190 : 						size += strlen (motd) + 1;

  00af1	8d 85 9c fd ff
	ff		 lea	 eax, DWORD PTR _motd$45[ebp]
  00af7	50		 push	 eax
  00af8	e8 00 00 00 00	 call	 _strlen
  00afd	83 c4 04	 add	 esp, 4
  00b00	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _size$47[ebp]
  00b06	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00b0a	89 95 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], edx

; 1191 : 
; 1192 : 						if (strlen (motd) > 0)

  00b10	8d 85 9c fd ff
	ff		 lea	 eax, DWORD PTR _motd$45[ebp]
  00b16	50		 push	 eax
  00b17	e8 00 00 00 00	 call	 _strlen
  00b1c	83 c4 04	 add	 esp, 4
  00b1f	85 c0		 test	 eax, eax
  00b21	76 57		 jbe	 SHORT $LN50@comms_proc

; 1193 : 						{
; 1194 : 							sprintf (buffer, "%s", motd);

  00b23	8d 85 9c fd ff
	ff		 lea	 eax, DWORD PTR _motd$45[ebp]
  00b29	50		 push	 eax
  00b2a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00b2f	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR _buffer$44[ebp]
  00b35	51		 push	 ecx
  00b36	e8 00 00 00 00	 call	 _sprintf
  00b3b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1195 : 
; 1196 : 							add_to_pop_up_list_with_word_wrap (buffer, session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  00b3e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00b43	50		 push	 eax
  00b44	6a 00		 push	 0
  00b46	6a 00		 push	 0
  00b48	6a 00		 push	 0
  00b4a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  00b50	51		 push	 ecx
  00b51	8d 95 9c fc ff
	ff		 lea	 edx, DWORD PTR _buffer$44[ebp]
  00b57	52		 push	 edx
  00b58	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1197 : 
; 1198 : 							add_to_pop_up_list_with_word_wrap (" ", session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  00b5d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00b62	50		 push	 eax
  00b63	6a 00		 push	 0
  00b65	6a 00		 push	 0
  00b67	6a 00		 push	 0
  00b69	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  00b6f	51		 push	 ecx
  00b70	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5@
  00b75	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap
$LN50@comms_proc:

; 1199 : 						}
; 1200 : 
; 1201 : 
; 1202 :                         // WUT
; 1203 : 
; 1204 :                         strncpy (temp_wut_filename, ptr, sizeof (temp_wut_filename));

  00b7a	68 80 00 00 00	 push	 128			; 00000080H
  00b7f	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00b85	50		 push	 eax
  00b86	8d 8d 1c fc ff
	ff		 lea	 ecx, DWORD PTR _temp_wut_filename$43[ebp]
  00b8c	51		 push	 ecx
  00b8d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00b93	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1205 : 
; 1206 :                         ptr += strlen (temp_wut_filename) + 1;

  00b96	8d 85 1c fc ff
	ff		 lea	 eax, DWORD PTR _temp_wut_filename$43[ebp]
  00b9c	50		 push	 eax
  00b9d	e8 00 00 00 00	 call	 _strlen
  00ba2	83 c4 04	 add	 esp, 4
  00ba5	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$46[ebp]
  00bab	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00baf	89 95 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], edx

; 1207 : 
; 1208 :                         size += strlen (temp_wut_filename) + 1;

  00bb5	8d 85 1c fc ff
	ff		 lea	 eax, DWORD PTR _temp_wut_filename$43[ebp]
  00bbb	50		 push	 eax
  00bbc	e8 00 00 00 00	 call	 _strlen
  00bc1	83 c4 04	 add	 esp, 4
  00bc4	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _size$47[ebp]
  00bca	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00bce	89 95 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], edx

; 1209 : 
; 1210 :                         strcpy(session_WUT_filename, temp_wut_filename);

  00bd4	8d 85 1c fc ff
	ff		 lea	 eax, DWORD PTR _temp_wut_filename$43[ebp]
  00bda	50		 push	 eax
  00bdb	68 00 00 00 00	 push	 OFFSET ?session_WUT_filename@@3PADA ; session_WUT_filename
  00be0	e8 00 00 00 00	 call	 _strcpy
  00be5	83 c4 08	 add	 esp, 8

; 1211 : 
; 1212 :                      // Jabberwock 050129 WUT transfer - client side
; 1213 :                      // with great help from Gotcha
; 1214 : 
; 1215 : 					 /*	not needed anymore, hopefully!
; 1216 :                         if (stricmp (session_WUT_filename, "NONE") != 0)
; 1217 :                         {
; 1218 :                        		if (!file_exist(session_WUT_filename))
; 1219 :                        		{
; 1220 :                        			sprintf (buffer, "%s: %s", get_trans ("Missing local WUT file"), temp_wut_filename);
; 1221 : 
; 1222 :                        			add_to_pop_up_list_with_word_wrap (buffer, session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);
; 1223 : 
; 1224 : 		               			set_ui_object_drawable (session_screen_continue_bdrop, FALSE);
; 1225 : 
; 1226 : 										set_ui_object_drawable (session_screen_continue_button, FALSE);
; 1227 : 
; 1228 : 	                       		break;
; 1229 : 	                       	}
; 1230 : 	                       	else
; 1231 : 									{
; 1232 : 	                       		parse_WUT_file(session_WUT_filename);
; 1233 : 	                       	}
; 1234 :                         }
; 1235 :                         else
; 1236 : //VJ 050110 check for origwut.txt or gwut146x.csv
; 1237 :                         {
; 1238 :                         	if (file_exist("origwut.txt"))
; 1239 :                         		parse_WUT_file("origwut.txt");
; 1240 :                         	else
; 1241 :                         	if (file_exist("gwut146x.csv"))
; 1242 :                         		parse_WUT_file("gwut146x.csv");
; 1243 :                         }
; 1244 : 						*/
; 1245 : 
; 1246 :                         sprintf (buffer, "%s: %s", get_trans ("Server WUT version"), session_WUT_filename);

  00be8	68 00 00 00 00	 push	 OFFSET ?session_WUT_filename@@3PADA ; session_WUT_filename
  00bed	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OIJFFENJ@Server?5WUT?5version@
  00bf2	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00bf7	50		 push	 eax
  00bf8	68 00 00 00 00	 push	 OFFSET ??_C@_06DJHOIPC@?$CFs?3?5?$CFs@
  00bfd	8d 85 9c fc ff
	ff		 lea	 eax, DWORD PTR _buffer$44[ebp]
  00c03	50		 push	 eax
  00c04	e8 00 00 00 00	 call	 _sprintf
  00c09	83 c4 10	 add	 esp, 16			; 00000010H

; 1247 : 
; 1248 : 						add_to_pop_up_list_with_word_wrap (buffer, session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  00c0c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00c11	50		 push	 eax
  00c12	6a 00		 push	 0
  00c14	6a 00		 push	 0
  00c16	6a 00		 push	 0
  00c18	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  00c1e	51		 push	 ecx
  00c1f	8d 95 9c fc ff
	ff		 lea	 edx, DWORD PTR _buffer$44[ebp]
  00c25	52		 push	 edx
  00c26	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1249 : 
; 1250 : 						// 29AUG05 Casm Fix for wut transfer - don't overwrite pointers!
; 1251 : 
; 1252 : 						// Aircraft
; 1253 : 
; 1254 : 						smart_memcpy ( aircraft_database, ptr, sizeof ( *aircraft_database ), 4 * sizeof ( const char * ), sizeof ( aircraft_database ) / sizeof ( *aircraft_database ) );

  00c2b	6a 20		 push	 32			; 00000020H
  00c2d	6a 10		 push	 16			; 00000010H
  00c2f	68 f4 00 00 00	 push	 244			; 000000f4H
  00c34	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00c3a	50		 push	 eax
  00c3b	68 00 00 00 00	 push	 OFFSET ?aircraft_database@@3PAUAIRCRAFT_DATA@@A ; aircraft_database
  00c40	e8 00 00 00 00	 call	 ?smart_memcpy@@YGXPAXPBXHHH@Z ; smart_memcpy

; 1255 : 
; 1256 : 						ptr += sizeof(aircraft_database);

  00c45	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00c4b	05 80 1e 00 00	 add	 eax, 7808		; 00001e80H
  00c50	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1257 : 
; 1258 : 						size += sizeof(aircraft_database);

  00c56	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00c5c	05 80 1e 00 00	 add	 eax, 7808		; 00001e80H
  00c61	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1259 : 
; 1260 : 						// Vehicle
; 1261 : 
; 1262 : 						smart_memcpy ( vehicle_database, ptr, sizeof ( *vehicle_database ), 4 * sizeof ( const char * ), sizeof ( vehicle_database ) / sizeof ( *vehicle_database ) );

  00c67	6a 26		 push	 38			; 00000026H
  00c69	6a 10		 push	 16			; 00000010H
  00c6b	68 bc 00 00 00	 push	 188			; 000000bcH
  00c70	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00c76	50		 push	 eax
  00c77	68 00 00 00 00	 push	 OFFSET ?vehicle_database@@3PAUVEHICLE_DATA@@A ; vehicle_database
  00c7c	e8 00 00 00 00	 call	 ?smart_memcpy@@YGXPAXPBXHHH@Z ; smart_memcpy

; 1263 : 
; 1264 : 						ptr += sizeof(vehicle_database);

  00c81	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00c87	05 e8 1b 00 00	 add	 eax, 7144		; 00001be8H
  00c8c	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1265 : 
; 1266 : 						size += sizeof(vehicle_database);

  00c92	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00c98	05 e8 1b 00 00	 add	 eax, 7144		; 00001be8H
  00c9d	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1267 : 
; 1268 : 						// Weapon
; 1269 : 
; 1270 : 						smart_memcpy ( weapon_database, ptr, sizeof ( *weapon_database ), 5 * sizeof ( const char * ), sizeof ( weapon_database ) / sizeof ( *weapon_database ) );

  00ca3	6a 4c		 push	 76			; 0000004cH
  00ca5	6a 14		 push	 20			; 00000014H
  00ca7	68 e0 00 00 00	 push	 224			; 000000e0H
  00cac	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00cb2	50		 push	 eax
  00cb3	68 00 00 00 00	 push	 OFFSET ?weapon_database@@3PAUWEAPON_DATA@@A ; weapon_database
  00cb8	e8 00 00 00 00	 call	 ?smart_memcpy@@YGXPAXPBXHHH@Z ; smart_memcpy

; 1271 : 
; 1272 : 						ptr += sizeof(weapon_database);

  00cbd	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00cc3	05 80 42 00 00	 add	 eax, 17024		; 00004280H
  00cc8	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1273 : 
; 1274 : 						size += sizeof(weapon_database);

  00cce	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00cd4	05 80 42 00 00	 add	 eax, 17024		; 00004280H
  00cd9	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1275 : 
; 1276 : 						// Keysite
; 1277 : 
; 1278 : 						smart_memcpy ( keysite_database, ptr, sizeof ( *keysite_database ), 2 * sizeof ( const char * ), sizeof ( keysite_database ) / sizeof ( *keysite_database ) );

  00cdf	6a 09		 push	 9
  00ce1	6a 08		 push	 8
  00ce3	6a 44		 push	 68			; 00000044H
  00ce5	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00ceb	50		 push	 eax
  00cec	68 00 00 00 00	 push	 OFFSET ?keysite_database@@3PAUKEYSITE_DATA@@A ; keysite_database
  00cf1	e8 00 00 00 00	 call	 ?smart_memcpy@@YGXPAXPBXHHH@Z ; smart_memcpy

; 1279 : 
; 1280 : 						ptr += sizeof(keysite_database);

  00cf6	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00cfc	05 64 02 00 00	 add	 eax, 612		; 00000264H
  00d01	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1281 : 
; 1282 : 						size += sizeof(keysite_database);

  00d07	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00d0d	05 64 02 00 00	 add	 eax, 612		; 00000264H
  00d12	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1283 : 
; 1284 : 						// Group
; 1285 : 
; 1286 : 						// 01OCT05 Casm yet another fix for wut transfer - special care for platoon_name field in group_database
; 1287 : 						group_database_cpy ( group_database, ( const group_data * ) ptr );

  00d18	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00d1e	50		 push	 eax
  00d1f	68 00 00 00 00	 push	 OFFSET ?group_database@@3PAUGROUP_DATA@@A ; group_database
  00d24	e8 00 00 00 00	 call	 ?group_database_cpy@@YGXPAUGROUP_DATA@@PBU1@@Z ; group_database_cpy

; 1288 : 
; 1289 : 						ptr += sizeof(group_database);

  00d29	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00d2f	05 28 0a 00 00	 add	 eax, 2600		; 00000a28H
  00d34	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1290 : 
; 1291 : 						size += sizeof(group_database);

  00d3a	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00d40	05 28 0a 00 00	 add	 eax, 2600		; 00000a28H
  00d45	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1292 : 
; 1293 : 						// Task
; 1294 : 
; 1295 : 						smart_memcpy ( task_database, ptr, sizeof ( *task_database ), 3 * sizeof ( const char * ), sizeof ( task_database ) / sizeof ( *task_database ) );

  00d4b	6a 1e		 push	 30			; 0000001eH
  00d4d	6a 0c		 push	 12			; 0000000cH
  00d4f	6a 50		 push	 80			; 00000050H
  00d51	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00d57	50		 push	 eax
  00d58	68 00 00 00 00	 push	 OFFSET ?task_database@@3PAUTASK_DATA@@A ; task_database
  00d5d	e8 00 00 00 00	 call	 ?smart_memcpy@@YGXPAXPBXHHH@Z ; smart_memcpy

; 1296 : 
; 1297 : 						ptr += sizeof(task_database);

  00d62	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00d68	05 60 09 00 00	 add	 eax, 2400		; 00000960H
  00d6d	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1298 : 
; 1299 : 						size += sizeof(task_database);

  00d73	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00d79	05 60 09 00 00	 add	 eax, 2400		; 00000960H
  00d7e	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1300 : 
; 1301 : 						// Waypoint
; 1302 : 
; 1303 : 						smart_memcpy ( waypoint_database, ptr, sizeof ( *waypoint_database ), 1 * sizeof ( const char * ), sizeof ( waypoint_database ) / sizeof ( *waypoint_database ) );

  00d84	6a 25		 push	 37			; 00000025H
  00d86	6a 04		 push	 4
  00d88	6a 64		 push	 100			; 00000064H
  00d8a	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00d90	50		 push	 eax
  00d91	68 00 00 00 00	 push	 OFFSET ?waypoint_database@@3PAUWAYPOINT_DATA@@A ; waypoint_database
  00d96	e8 00 00 00 00	 call	 ?smart_memcpy@@YGXPAXPBXHHH@Z ; smart_memcpy

; 1304 : 
; 1305 : 						ptr += sizeof(waypoint_database);

  00d9b	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00da1	05 74 0e 00 00	 add	 eax, 3700		; 00000e74H
  00da6	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1306 : 
; 1307 : 						size += sizeof(waypoint_database);

  00dac	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00db2	05 74 0e 00 00	 add	 eax, 3700		; 00000e74H
  00db7	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1308 : 
; 1309 : 						// Guide
; 1310 : 
; 1311 : 						memcpy (guide_database, ptr, sizeof(guide_database));

  00dbd	68 78 04 00 00	 push	 1144			; 00000478H
  00dc2	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00dc8	50		 push	 eax
  00dc9	68 00 00 00 00	 push	 OFFSET ?guide_database@@3PAUGUIDE_DATA@@A ; guide_database
  00dce	e8 00 00 00 00	 call	 _memcpy
  00dd3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1312 : 
; 1313 : 						ptr += sizeof(guide_database);

  00dd6	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00ddc	05 78 04 00 00	 add	 eax, 1144		; 00000478H
  00de1	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1314 : 
; 1315 : 						size += sizeof(guide_database);

  00de7	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00ded	05 78 04 00 00	 add	 eax, 1144		; 00000478H
  00df2	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1316 : 
; 1317 : 						// Radar
; 1318 : 
; 1319 : 						memcpy (radar_range_apache, ptr, sizeof(radar_range_apache));

  00df8	6a 14		 push	 20			; 00000014H
  00dfa	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00e00	50		 push	 eax
  00e01	68 00 00 00 00	 push	 OFFSET ?radar_range_apache@@3PAMA ; radar_range_apache
  00e06	e8 00 00 00 00	 call	 _memcpy
  00e0b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1320 : 
; 1321 : 						ptr += sizeof(radar_range_apache);

  00e0e	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00e14	83 c0 14	 add	 eax, 20			; 00000014H
  00e17	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1322 : 
; 1323 : 						size += sizeof(radar_range_apache);

  00e1d	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00e23	83 c0 14	 add	 eax, 20			; 00000014H
  00e26	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1324 : 
; 1325 : 						memcpy (radar_range_comanche, ptr , sizeof(radar_range_comanche));

  00e2c	6a 14		 push	 20			; 00000014H
  00e2e	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00e34	50		 push	 eax
  00e35	68 00 00 00 00	 push	 OFFSET ?radar_range_comanche@@3PAMA ; radar_range_comanche
  00e3a	e8 00 00 00 00	 call	 _memcpy
  00e3f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1326 : 
; 1327 : 						ptr += sizeof(radar_range_comanche);

  00e42	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00e48	83 c0 14	 add	 eax, 20			; 00000014H
  00e4b	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1328 : 
; 1329 : 						size += sizeof(radar_range_comanche);

  00e51	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00e57	83 c0 14	 add	 eax, 20			; 00000014H
  00e5a	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1330 : 
; 1331 : 						memcpy (radar_range_blackhawk, ptr, sizeof(radar_range_blackhawk));

  00e60	6a 14		 push	 20			; 00000014H
  00e62	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00e68	50		 push	 eax
  00e69	68 00 00 00 00	 push	 OFFSET ?radar_range_blackhawk@@3PAMA ; radar_range_blackhawk
  00e6e	e8 00 00 00 00	 call	 _memcpy
  00e73	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1332 : 
; 1333 : 						ptr += sizeof(radar_range_blackhawk);

  00e76	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00e7c	83 c0 14	 add	 eax, 20			; 00000014H
  00e7f	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1334 : 
; 1335 : 						size += sizeof(radar_range_blackhawk);

  00e85	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00e8b	83 c0 14	 add	 eax, 20			; 00000014H
  00e8e	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1336 : 
; 1337 : 						memcpy (radar_range_hokum, ptr, sizeof(radar_range_hokum));

  00e94	6a 14		 push	 20			; 00000014H
  00e96	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00e9c	50		 push	 eax
  00e9d	68 00 00 00 00	 push	 OFFSET ?radar_range_hokum@@3PAMA ; radar_range_hokum
  00ea2	e8 00 00 00 00	 call	 _memcpy
  00ea7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1338 : 
; 1339 : 						ptr += sizeof(radar_range_hokum);

  00eaa	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00eb0	83 c0 14	 add	 eax, 20			; 00000014H
  00eb3	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1340 : 
; 1341 : 						size += sizeof(radar_range_hokum);

  00eb9	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00ebf	83 c0 14	 add	 eax, 20			; 00000014H
  00ec2	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1342 : 
; 1343 : 						memcpy (radar_range_havoc, ptr, sizeof(radar_range_havoc));

  00ec8	6a 10		 push	 16			; 00000010H
  00eca	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00ed0	50		 push	 eax
  00ed1	68 00 00 00 00	 push	 OFFSET ?radar_range_havoc@@3PAMA ; radar_range_havoc
  00ed6	e8 00 00 00 00	 call	 _memcpy
  00edb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1344 : 
; 1345 : 						ptr += sizeof(radar_range_havoc);

  00ede	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00ee4	83 c0 10	 add	 eax, 16			; 00000010H
  00ee7	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1346 : 
; 1347 : 						size += sizeof(radar_range_havoc);

  00eed	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00ef3	83 c0 10	 add	 eax, 16			; 00000010H
  00ef6	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1348 : 
; 1349 : 						memcpy (radar_range_hind, ptr, sizeof(radar_range_hind));

  00efc	6a 10		 push	 16			; 00000010H
  00efe	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00f04	50		 push	 eax
  00f05	68 00 00 00 00	 push	 OFFSET ?radar_range_hind@@3PAMA ; radar_range_hind
  00f0a	e8 00 00 00 00	 call	 _memcpy
  00f0f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1350 : 
; 1351 : 						ptr += sizeof(radar_range_hind);

  00f12	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00f18	83 c0 10	 add	 eax, 16			; 00000010H
  00f1b	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax

; 1352 : 
; 1353 : 						size += sizeof(radar_range_hind);

  00f21	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00f27	83 c0 10	 add	 eax, 16			; 00000010H
  00f2a	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1354 : 
; 1355 : 						// Jabberwock 050129 ends
; 1356 : 
; 1357 :                         session_planner_goto_button = get_list_item (ptr, int);

  00f30	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00f36	83 c0 04	 add	 eax, 4
  00f39	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax
  00f3f	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$46[ebp]
  00f45	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00f48	89 15 00 00 00
	00		 mov	 DWORD PTR ?session_planner_goto_button@@3HA, edx ; session_planner_goto_button

; 1358 : 
; 1359 :                         size += sizeof (int);

  00f4e	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00f54	83 c0 04	 add	 eax, 4
  00f57	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1360 : 
; 1361 :                         sprintf (buffer, "%s: %d", get_trans ("Map GOTO button"), session_planner_goto_button);

  00f5d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_planner_goto_button@@3HA ; session_planner_goto_button
  00f62	50		 push	 eax
  00f63	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MIHBCHBI@Map?5GOTO?5button@
  00f68	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00f6d	50		 push	 eax
  00f6e	68 00 00 00 00	 push	 OFFSET ??_C@_06GBEGMGE@?$CFs?3?5?$CFd@
  00f73	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR _buffer$44[ebp]
  00f79	51		 push	 ecx
  00f7a	e8 00 00 00 00	 call	 _sprintf
  00f7f	83 c4 10	 add	 esp, 16			; 00000010H

; 1362 : 
; 1363 : 						add_to_pop_up_list_with_word_wrap (buffer, session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  00f82	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00f87	50		 push	 eax
  00f88	6a 00		 push	 0
  00f8a	6a 00		 push	 0
  00f8c	6a 00		 push	 0
  00f8e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  00f94	51		 push	 ecx
  00f95	8d 95 9c fc ff
	ff		 lea	 edx, DWORD PTR _buffer$44[ebp]
  00f9b	52		 push	 edx
  00f9c	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1364 : 
; 1365 : 						session_vector_flight_model = get_list_item (ptr, int);

  00fa1	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  00fa7	83 c0 04	 add	 eax, 4
  00faa	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax
  00fb0	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$46[ebp]
  00fb6	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00fb9	89 15 00 00 00
	00		 mov	 DWORD PTR ?session_vector_flight_model@@3HA, edx ; session_vector_flight_model

; 1366 : 
; 1367 :                         size += sizeof (int);

  00fbf	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  00fc5	83 c0 04	 add	 eax, 4
  00fc8	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1368 : 
; 1369 :                         sprintf (buffer, "%s: %d", get_trans ("Vector flight model"), session_vector_flight_model);

  00fce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_vector_flight_model@@3HA ; session_vector_flight_model
  00fd3	50		 push	 eax
  00fd4	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DNDNEHBM@Vector?5flight?5model@
  00fd9	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  00fde	50		 push	 eax
  00fdf	68 00 00 00 00	 push	 OFFSET ??_C@_06GBEGMGE@?$CFs?3?5?$CFd@
  00fe4	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR _buffer$44[ebp]
  00fea	51		 push	 ecx
  00feb	e8 00 00 00 00	 call	 _sprintf
  00ff0	83 c4 10	 add	 esp, 16			; 00000010H

; 1370 : 
; 1371 : 						add_to_pop_up_list_with_word_wrap (buffer, session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  00ff3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00ff8	50		 push	 eax
  00ff9	6a 00		 push	 0
  00ffb	6a 00		 push	 0
  00ffd	6a 00		 push	 0
  00fff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  01005	51		 push	 ecx
  01006	8d 95 9c fc ff
	ff		 lea	 edx, DWORD PTR _buffer$44[ebp]
  0100c	52		 push	 edx
  0100d	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1372 : 
; 1373 : 						session_ground_radar_ignores_infantry = get_list_item (ptr, int);

  01012	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  01018	83 c0 04	 add	 eax, 4
  0101b	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax
  01021	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$46[ebp]
  01027	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0102a	89 15 00 00 00
	00		 mov	 DWORD PTR ?session_ground_radar_ignores_infantry@@3HA, edx ; session_ground_radar_ignores_infantry

; 1374 : 
; 1375 :                         size += sizeof (int);

  01030	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  01036	83 c0 04	 add	 eax, 4
  01039	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1376 : 
; 1377 :                         sprintf (buffer, "%s: %d", get_trans ("Radar ignores infantry"), session_ground_radar_ignores_infantry);

  0103f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_ground_radar_ignores_infantry@@3HA ; session_ground_radar_ignores_infantry
  01044	50		 push	 eax
  01045	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MPJEHPHJ@Radar?5ignores?5infantry@
  0104a	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  0104f	50		 push	 eax
  01050	68 00 00 00 00	 push	 OFFSET ??_C@_06GBEGMGE@?$CFs?3?5?$CFd@
  01055	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR _buffer$44[ebp]
  0105b	51		 push	 ecx
  0105c	e8 00 00 00 00	 call	 _sprintf
  01061	83 c4 10	 add	 esp, 16			; 00000010H

; 1378 : 
; 1379 : 						add_to_pop_up_list_with_word_wrap (buffer, session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  01064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  01069	50		 push	 eax
  0106a	6a 00		 push	 0
  0106c	6a 00		 push	 0
  0106e	6a 00		 push	 0
  01070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  01076	51		 push	 ecx
  01077	8d 95 9c fc ff
	ff		 lea	 edx, DWORD PTR _buffer$44[ebp]
  0107d	52		 push	 edx
  0107e	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1380 : 
; 1381 : 						session_camcom = get_list_item (ptr, int);

  01083	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  01089	83 c0 04	 add	 eax, 4
  0108c	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax
  01092	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$46[ebp]
  01098	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0109b	89 15 00 00 00
	00		 mov	 DWORD PTR ?session_camcom@@3HA, edx ; session_camcom

; 1382 : 
; 1383 :                   size += sizeof (int);

  010a1	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  010a7	83 c0 04	 add	 eax, 4
  010aa	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1384 : 
; 1385 :                   sprintf (buffer, "%s: %d", get_trans ("Campaign Commander"), session_camcom);

  010b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_camcom@@3HA ; session_camcom
  010b5	50		 push	 eax
  010b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MFBPGKKB@Campaign?5Commander@
  010bb	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  010c0	50		 push	 eax
  010c1	68 00 00 00 00	 push	 OFFSET ??_C@_06GBEGMGE@?$CFs?3?5?$CFd@
  010c6	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR _buffer$44[ebp]
  010cc	51		 push	 ecx
  010cd	e8 00 00 00 00	 call	 _sprintf
  010d2	83 c4 10	 add	 esp, 16			; 00000010H

; 1386 : 
; 1387 : 						add_to_pop_up_list_with_word_wrap (buffer, session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  010d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  010da	50		 push	 eax
  010db	6a 00		 push	 0
  010dd	6a 00		 push	 0
  010df	6a 00		 push	 0
  010e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  010e7	51		 push	 ecx
  010e8	8d 95 9c fc ff
	ff		 lea	 edx, DWORD PTR _buffer$44[ebp]
  010ee	52		 push	 edx
  010ef	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1388 : 
; 1389 : 						// 03DEC05 Casm Added season info transer
; 1390 : 						season = get_list_item (ptr, int);

  010f4	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  010fa	83 c0 04	 add	 eax, 4
  010fd	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax
  01103	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$46[ebp]
  01109	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0110c	89 95 18 fc ff
	ff		 mov	 DWORD PTR _season$42[ebp], edx

; 1391 : 
; 1392 :                   size += sizeof (int);

  01112	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  01118	83 c0 04	 add	 eax, 4
  0111b	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1393 : 
; 1394 : 						if (season > 0 && season <= 4)

  01121	83 bd 18 fc ff
	ff 00		 cmp	 DWORD PTR _season$42[ebp], 0
  01128	7e 45		 jle	 SHORT $LN51@comms_proc
  0112a	83 bd 18 fc ff
	ff 04		 cmp	 DWORD PTR _season$42[ebp], 4
  01131	7f 3c		 jg	 SHORT $LN51@comms_proc

; 1395 : 						{
; 1396 : 							static const char
; 1397 : 								*seasons[5] = { NULL, "Default", "Summer", "Winter", "Desert" };
; 1398 : 
; 1399 : 							//VJ 051227 use set and get global season here
; 1400 : 							//VJ 060319 further bug fixes
; 1401 : 							set_global_season ( season );

  01133	8b 85 18 fc ff
	ff		 mov	 eax, DWORD PTR _season$42[ebp]
  01139	a3 14 04 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, eax

; 1402 : 							initialise_noisemaps();

  0113e	e8 00 00 00 00	 call	 ?initialise_noisemaps@@YGXXZ ; initialise_noisemaps

; 1403 : 
; 1404 : 							add_to_pop_up_list_with_word_wrap (get_trans(seasons[season]), session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  01143	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  01148	50		 push	 eax
  01149	6a 00		 push	 0
  0114b	6a 00		 push	 0
  0114d	6a 00		 push	 0
  0114f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  01155	51		 push	 ecx
  01156	8b 95 18 fc ff
	ff		 mov	 edx, DWORD PTR _season$42[ebp]
  0115c	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?seasons@?EK@??comms_process_data@@YGXXZ@4PAPBDA[edx*4]
  01163	50		 push	 eax
  01164	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  01169	50		 push	 eax
  0116a	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap
$LN51@comms_proc:

; 1405 : 						}
; 1406 : 
; 1407 : 						command_line_campaign_map_update_interval = get_list_item(ptr, int);

  0116f	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _ptr$46[ebp]
  01175	83 c0 04	 add	 eax, 4
  01178	89 85 9c fe ff
	ff		 mov	 DWORD PTR _ptr$46[ebp], eax
  0117e	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _ptr$46[ebp]
  01184	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  01187	89 15 00 00 00
	00		 mov	 DWORD PTR ?command_line_campaign_map_update_interval@@3HA, edx ; command_line_campaign_map_update_interval

; 1408 : 						size += sizeof (int);

  0118d	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$47[ebp]
  01193	83 c0 04	 add	 eax, 4
  01196	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _size$47[ebp], eax

; 1409 : 
; 1410 :                	set_ui_object_drawable (session_screen_continue_bdrop, FALSE);

  0119c	6a 00		 push	 0
  0119e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_screen_continue_bdrop@@3PAUUI_OBJECT@@A ; session_screen_continue_bdrop
  011a3	50		 push	 eax
  011a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_screen_continue_bdrop@@3PAUUI_OBJECT@@A ; session_screen_continue_bdrop
  011aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  011ac	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  011b3	ff d0		 call	 eax

; 1411 : 
; 1412 : 						set_ui_object_drawable (session_screen_continue_button, FALSE);

  011b5	6a 00		 push	 0
  011b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_screen_continue_button@@3PAUUI_OBJECT@@A ; session_screen_continue_button
  011bc	50		 push	 eax
  011bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_screen_continue_button@@3PAUUI_OBJECT@@A ; session_screen_continue_button
  011c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  011c5	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  011cc	ff d0		 call	 eax

; 1413 : 
; 1414 :                	set_ui_object_drawable (session_screen_next_bdrop, TRUE);

  011ce	6a 01		 push	 1
  011d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_screen_next_bdrop@@3PAUUI_OBJECT@@A ; session_screen_next_bdrop
  011d5	50		 push	 eax
  011d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_screen_next_bdrop@@3PAUUI_OBJECT@@A ; session_screen_next_bdrop
  011dc	8b 11		 mov	 edx, DWORD PTR [ecx]
  011de	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  011e5	ff d0		 call	 eax

; 1415 : 
; 1416 : 						set_ui_object_drawable (session_screen_next_button, TRUE);

  011e7	6a 01		 push	 1
  011e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_screen_next_button@@3PAUUI_OBJECT@@A ; session_screen_next_button
  011ee	50		 push	 eax
  011ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_screen_next_button@@3PAUUI_OBJECT@@A ; session_screen_next_button
  011f5	8b 11		 mov	 edx, DWORD PTR [ecx]
  011f7	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  011fe	ff d0		 call	 eax

; 1417 : 
; 1418 : 						//VJ 060201 now that we know the map number, initialize the info
; 1419 : 						debug_log("###CUSTOM TEXTURE STARTUP: comm_man.c: comms_process_data: read_map_info_data");

  01200	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@EDKMIAJ@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5comm@
  01205	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0120a	83 c4 04	 add	 esp, 4

; 1420 : 						read_map_info_data();

  0120d	e8 00 00 00 00	 call	 ?read_map_info_data@@YGXXZ ; read_map_info_data

; 1421 : 
; 1422 : 						break;

  01212	e9 4d 18 00 00	 jmp	 $LN8@comms_proc
$LN52@comms_proc:

; 1423 : 
; 1424 :                     }
; 1425 : // Jabberwock 031118 ends
; 1426 : 
; 1427 :                     case PACKET_TYPE_CONNECTION_VALIDATION:
; 1428 :                     {
; 1429 : 
; 1430 :                         debug_log ("COMM_MAN: received CONNECTION_VALIDATION, sending RESPONSE");

  01217	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@GJMCPLP@COMM_MAN?3?5received?5CONNECTION_V@
  0121c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  01221	83 c4 04	 add	 esp, 4

; 1431 : 
; 1432 :                         send_packet (received_id, PACKET_TYPE_CONNECTION_RESPONSE, NULL, 0, SEND_TYPE_PERSONAL);

  01224	6a 00		 push	 0
  01226	6a 00		 push	 0
  01228	6a 00		 push	 0
  0122a	6a 10		 push	 16			; 00000010H
  0122c	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  0122f	50		 push	 eax
  01230	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet

; 1433 : 
; 1434 :                         break;

  01235	e9 2a 18 00 00	 jmp	 $LN8@comms_proc
$LN53@comms_proc:

; 1435 :                     }
; 1436 : 
; 1437 :                     case PACKET_TYPE_CONNECTION_RESPONSE:
; 1438 :                     {
; 1439 : 
; 1440 :                         connection_list_type
; 1441 :                             *connection;
; 1442 : 
; 1443 :                         connection = get_connection_list_item (received_id);

  0123a	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  0123d	50		 push	 eax
  0123e	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  01243	89 85 14 fc ff
	ff		 mov	 DWORD PTR _connection$41[ebp], eax

; 1444 : 
; 1445 :                         connection->validation_count = 0;

  01249	8b 85 14 fc ff
	ff		 mov	 eax, DWORD PTR _connection$41[ebp]
  0124f	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 1446 : 
; 1447 :                         connection->connection_validation_time = get_system_time (); // Jabberwock - Validation reset

  01256	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  0125b	8b 8d 14 fc ff
	ff		 mov	 ecx, DWORD PTR _connection$41[ebp]
  01261	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1448 : 
; 1449 :                         debug_log ("COMM_MAN: received CONNECTION_RESPONSE, connection still alive");

  01264	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@ENFNOCHJ@COMM_MAN?3?5received?5CONNECTION_R@
  01269	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0126e	83 c4 04	 add	 esp, 4

; 1450 : 
; 1451 :                         break;

  01271	e9 ee 17 00 00	 jmp	 $LN8@comms_proc
$LN54@comms_proc:

; 1452 :                     }
; 1453 : 
; 1454 :                     case PACKET_TYPE_SESSION_INFO:
; 1455 :                     {
; 1456 : 
; 1457 :                         entity
; 1458 :                             *force,
; 1459 :                             *pilot;
; 1460 : 
; 1461 :                         int
; 1462 :                             client_version_number,
; 1463 :                             server_version_number;
; 1464 : 
; 1465 :                         int
; 1466 :                             size,
; 1467 :                             x_size,
; 1468 :                             z_size,
; 1469 :                             sector_size,
; 1470 :                             player_count,
; 1471 :                             loop;
; 1472 : 
; 1473 :                         char
; 1474 :                             *ptr,
; 1475 :                             warzone_ffp_filename [256],
; 1476 :                             temp_campaign_population_filename [256],
; 1477 :                             temp_population_placement_filename [256],
; 1478 :                             temp_side_data_filename [256],
; 1479 :                             buffer [128];
; 1480 : 
; 1481 :                         session_data = FALSE;

  01276	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?session_data@@3EA, 0

; 1482 : 
; 1483 :                         reinitialise_entity_system ();

  0127d	e8 00 00 00 00	 call	 ?reinitialise_entity_system@@YGXXZ ; reinitialise_entity_system

; 1484 : 
; 1485 :                         ptr = (char *) received_data;

  01282	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  01285	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _ptr$30[ebp], eax

; 1486 : 
; 1487 :                         size = 0;

  0128b	c7 85 00 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _size$36[ebp], 0

; 1488 : 
; 1489 :                         set_ui_object_redraw (gunships_screen, TRUE);

  01295	6a 01		 push	 1
  01297	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunships_screen@@3PAUUI_OBJECT@@A ; gunships_screen
  0129c	50		 push	 eax
  0129d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunships_screen@@3PAUUI_OBJECT@@A ; gunships_screen
  012a3	8b 11		 mov	 edx, DWORD PTR [ecx]
  012a5	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_redraw@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  012ac	ff d0		 call	 eax

; 1490 : 
; 1491 :                         ui_force_update ();

  012ae	e8 00 00 00 00	 call	 ?ui_force_update@@YGXXZ	; ui_force_update

; 1492 : 
; 1493 :                         /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
; 1494 :                         //
; 1495 :                         // Check both client and server are running same campaign data
; 1496 :                         //
; 1497 : 
; 1498 :                         // Jabberwock 050301 Hardcoded version number
; 1499 : 
; 1500 :                         // please put in the date of the version! check it is changed twice!
; 1501 : 
; 1502 :                         client_version_number = VERSION_NUMBER_INT; // Jabberwock 050322

  012b3	c7 85 08 fc ff
	ff ec 2c 00 00	 mov	 DWORD PTR _client_version_number$38[ebp], 11500 ; 00002cecH

; 1503 : 
; 1504 :                         server_version_number = get_list_item (ptr, int);

  012bd	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$30[ebp]
  012c3	83 c0 04	 add	 eax, 4
  012c6	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _ptr$30[ebp], eax
  012cc	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$30[ebp]
  012d2	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  012d5	89 95 04 fc ff
	ff		 mov	 DWORD PTR _server_version_number$37[ebp], edx

; 1505 : 
; 1506 :                         size += sizeof (int);

  012db	8b 85 00 fc ff
	ff		 mov	 eax, DWORD PTR _size$36[ebp]
  012e1	83 c0 04	 add	 eax, 4
  012e4	89 85 00 fc ff
	ff		 mov	 DWORD PTR _size$36[ebp], eax

; 1507 : 
; 1508 :                         if (client_version_number != server_version_number)

  012ea	8b 85 08 fc ff
	ff		 mov	 eax, DWORD PTR _client_version_number$38[ebp]
  012f0	3b 85 04 fc ff
	ff		 cmp	 eax, DWORD PTR _server_version_number$37[ebp]
  012f6	74 4e		 je	 SHORT $LN55@comms_proc

; 1509 :                         {
; 1510 : 							//schorpp
; 1511 :                             debug_log ("COMM_MAN: Incorrect version. Server Version No. %d, Client Version No. %d", server_version_number, client_version_number);

  012f8	8b 85 08 fc ff
	ff		 mov	 eax, DWORD PTR _client_version_number$38[ebp]
  012fe	50		 push	 eax
  012ff	8b 8d 04 fc ff
	ff		 mov	 ecx, DWORD PTR _server_version_number$37[ebp]
  01305	51		 push	 ecx
  01306	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@OCJFLGDK@COMM_MAN?3?5Incorrect?5version?4?5Se@
  0130b	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  01310	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1512 : 							// Jabberwock 031118 Tell version is wrong
; 1513 : 							ui_object_destroy_list_items (session_info_list);

  01313	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  01318	50		 push	 eax
  01319	e8 00 00 00 00	 call	 ?ui_object_destroy_list_items@@YGXPAUUI_OBJECT@@@Z ; ui_object_destroy_list_items

; 1514 : 							add_to_pop_up_list_with_word_wrap (get_trans ("Incompatible game version"), session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  0131e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  01323	50		 push	 eax
  01324	6a 00		 push	 0
  01326	6a 00		 push	 0
  01328	6a 00		 push	 0
  0132a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  01330	51		 push	 ecx
  01331	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@BJFDIGMH@Incompatible?5game?5version@
  01336	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  0133b	50		 push	 eax
  0133c	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1515 : 							//start_game_exit (GAME_EXIT_KICKOUT, FALSE);
; 1516 : 							break;

  01341	e9 1e 17 00 00	 jmp	 $LN8@comms_proc
$LN55@comms_proc:

; 1517 :                         }
; 1518 :                         //
; 1519 :                         /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
; 1520 : 
; 1521 : 						// Jabberwock 050320 Downwash MP check
; 1522 : 						if (command_line_downwash)

  01346	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_downwash@@3HA, 0 ; command_line_downwash
  0134d	74 33		 je	 SHORT $LN56@comms_proc

; 1523 : 						{
; 1524 : 							ui_object_destroy_list_items (session_info_list);

  0134f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  01354	50		 push	 eax
  01355	e8 00 00 00 00	 call	 ?ui_object_destroy_list_items@@YGXPAUUI_OBJECT@@@Z ; ui_object_destroy_list_items

; 1525 : 							add_to_pop_up_list_with_word_wrap (get_trans ("Downwash has to be turned off for multiplayer. Change the setting in the ini file (dwash=0) and restart the game."), session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  0135a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  0135f	50		 push	 eax
  01360	6a 00		 push	 0
  01362	6a 00		 push	 0
  01364	6a 00		 push	 0
  01366	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  0136c	51		 push	 ecx
  0136d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@BLMILHPN@Downwash?5has?5to?5be?5turned?5off?5f@
  01372	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  01377	50		 push	 eax
  01378	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1526 : 							//start_game_exit (GAME_EXIT_KICKOUT, FALSE);
; 1527 : 							break;

  0137d	e9 e2 16 00 00	 jmp	 $LN8@comms_proc
$LN56@comms_proc:

; 1528 :                         }
; 1529 :                         // Jabberwock 050320 ends
; 1530 : 
; 1531 :                         // map details
; 1532 : 
; 1533 :                         x_size = get_list_item (ptr, int);

  01382	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$30[ebp]
  01388	83 c0 04	 add	 eax, 4
  0138b	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _ptr$30[ebp], eax
  01391	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$30[ebp]
  01397	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0139a	89 95 fc fb ff
	ff		 mov	 DWORD PTR _x_size$35[ebp], edx

; 1534 : 
; 1535 :                         z_size = get_list_item (ptr, int);

  013a0	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$30[ebp]
  013a6	83 c0 04	 add	 eax, 4
  013a9	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _ptr$30[ebp], eax
  013af	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$30[ebp]
  013b5	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  013b8	89 95 f8 fb ff
	ff		 mov	 DWORD PTR _z_size$34[ebp], edx

; 1536 : 
; 1537 :                         sector_size = get_list_item (ptr, int);

  013be	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$30[ebp]
  013c4	83 c0 04	 add	 eax, 4
  013c7	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _ptr$30[ebp], eax
  013cd	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$30[ebp]
  013d3	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  013d6	89 95 f4 fb ff
	ff		 mov	 DWORD PTR _sector_size$33[ebp], edx

; 1538 : 
; 1539 :                         size += (sizeof (int) * 3);

  013dc	8b 85 00 fc ff
	ff		 mov	 eax, DWORD PTR _size$36[ebp]
  013e2	83 c0 0c	 add	 eax, 12			; 0000000cH
  013e5	89 85 00 fc ff
	ff		 mov	 DWORD PTR _size$36[ebp], eax

; 1540 : 
; 1541 :                         set_entity_world_map_size (x_size, z_size, sector_size);

  013eb	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _sector_size$33[ebp]
  013f1	50		 push	 eax
  013f2	8b 8d f8 fb ff
	ff		 mov	 ecx, DWORD PTR _z_size$34[ebp]
  013f8	51		 push	 ecx
  013f9	8b 95 fc fb ff
	ff		 mov	 edx, DWORD PTR _x_size$35[ebp]
  013ff	52		 push	 edx
  01400	e8 00 00 00 00	 call	 ?set_entity_world_map_size@@YGXHHH@Z ; set_entity_world_map_size

; 1542 : 
; 1543 :                         // data path
; 1544 : 
; 1545 :                         strncpy (current_session->data_path, ptr, sizeof (current_session->data_path));

  01405	68 00 01 00 00	 push	 256			; 00000100H
  0140a	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$30[ebp]
  01410	50		 push	 eax
  01411	8b 4d fc	 mov	 ecx, DWORD PTR _current_session$[ebp]
  01414	83 c1 1c	 add	 ecx, 28			; 0000001cH
  01417	51		 push	 ecx
  01418	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0141e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1546 : 
; 1547 :                         ptr += strlen (current_session->data_path) + 1;

  01421	8b 45 fc	 mov	 eax, DWORD PTR _current_session$[ebp]
  01424	83 c0 1c	 add	 eax, 28			; 0000001cH
  01427	50		 push	 eax
  01428	e8 00 00 00 00	 call	 _strlen
  0142d	83 c4 04	 add	 esp, 4
  01430	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$30[ebp]
  01436	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0143a	89 95 e8 fb ff
	ff		 mov	 DWORD PTR _ptr$30[ebp], edx

; 1548 : 
; 1549 :                         size += strlen (current_session->data_path) + 1;

  01440	8b 45 fc	 mov	 eax, DWORD PTR _current_session$[ebp]
  01443	83 c0 1c	 add	 eax, 28			; 0000001cH
  01446	50		 push	 eax
  01447	e8 00 00 00 00	 call	 _strlen
  0144c	83 c4 04	 add	 esp, 4
  0144f	8b 8d 00 fc ff
	ff		 mov	 ecx, DWORD PTR _size$36[ebp]
  01455	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  01459	89 95 00 fc ff
	ff		 mov	 DWORD PTR _size$36[ebp], edx

; 1550 : 
; 1551 :                         // population_placement_filename
; 1552 : 
; 1553 :                         strncpy (temp_population_placement_filename, ptr, sizeof (temp_population_placement_filename));

  0145f	68 00 01 00 00	 push	 256			; 00000100H
  01464	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$30[ebp]
  0146a	50		 push	 eax
  0146b	8d 8d e8 f8 ff
	ff		 lea	 ecx, DWORD PTR _temp_population_placement_filename$27[ebp]
  01471	51		 push	 ecx
  01472	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  01478	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1554 : 
; 1555 :                         ptr += strlen (temp_population_placement_filename) + 1;

  0147b	8d 85 e8 f8 ff
	ff		 lea	 eax, DWORD PTR _temp_population_placement_filename$27[ebp]
  01481	50		 push	 eax
  01482	e8 00 00 00 00	 call	 _strlen
  01487	83 c4 04	 add	 esp, 4
  0148a	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$30[ebp]
  01490	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  01494	89 95 e8 fb ff
	ff		 mov	 DWORD PTR _ptr$30[ebp], edx

; 1556 : 
; 1557 :                         size += strlen (temp_population_placement_filename) + 1;

  0149a	8d 85 e8 f8 ff
	ff		 lea	 eax, DWORD PTR _temp_population_placement_filename$27[ebp]
  014a0	50		 push	 eax
  014a1	e8 00 00 00 00	 call	 _strlen
  014a6	83 c4 04	 add	 esp, 4
  014a9	8b 8d 00 fc ff
	ff		 mov	 ecx, DWORD PTR _size$36[ebp]
  014af	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  014b3	89 95 00 fc ff
	ff		 mov	 DWORD PTR _size$36[ebp], edx

; 1558 : 
; 1559 :                         if (population_placement_filename)

  014b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?population_placement_filename@@3PADA, 0 ; population_placement_filename
  014c0	74 0b		 je	 SHORT $LN57@comms_proc

; 1560 :                         {
; 1561 : 
; 1562 :                             free_mem (population_placement_filename);

  014c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?population_placement_filename@@3PADA ; population_placement_filename
  014c7	50		 push	 eax
  014c8	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN57@comms_proc:

; 1563 :                         }
; 1564 : 
; 1565 :                         if (strlen (temp_population_placement_filename) > 0)

  014cd	8d 85 e8 f8 ff
	ff		 lea	 eax, DWORD PTR _temp_population_placement_filename$27[ebp]
  014d3	50		 push	 eax
  014d4	e8 00 00 00 00	 call	 _strlen
  014d9	83 c4 04	 add	 esp, 4
  014dc	85 c0		 test	 eax, eax
  014de	76 3a		 jbe	 SHORT $LN58@comms_proc

; 1566 :                         {
; 1567 : 
; 1568 :                             population_placement_filename = (char *) malloc_heap_mem (strlen (temp_population_placement_filename) + 1);

  014e0	8d 85 e8 f8 ff
	ff		 lea	 eax, DWORD PTR _temp_population_placement_filename$27[ebp]
  014e6	50		 push	 eax
  014e7	e8 00 00 00 00	 call	 _strlen
  014ec	83 c4 04	 add	 esp, 4
  014ef	83 c0 01	 add	 eax, 1
  014f2	50		 push	 eax
  014f3	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  014f8	a3 00 00 00 00	 mov	 DWORD PTR ?population_placement_filename@@3PADA, eax ; population_placement_filename

; 1569 : 
; 1570 :                             sprintf (population_placement_filename, "%s", temp_population_placement_filename);

  014fd	8d 85 e8 f8 ff
	ff		 lea	 eax, DWORD PTR _temp_population_placement_filename$27[ebp]
  01503	50		 push	 eax
  01504	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  01509	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?population_placement_filename@@3PADA ; population_placement_filename
  0150f	51		 push	 ecx
  01510	e8 00 00 00 00	 call	 _sprintf
  01515	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1571 :                         }
; 1572 :                         else

  01518	eb 0a		 jmp	 SHORT $LN59@comms_proc
$LN58@comms_proc:

; 1573 :                         {
; 1574 : 
; 1575 :                             population_placement_filename = NULL;

  0151a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?population_placement_filename@@3PADA, 0 ; population_placement_filename
$LN59@comms_proc:

; 1576 :                         }
; 1577 : 
; 1578 :                         // side_data filename
; 1579 : 
; 1580 :                         strncpy (temp_side_data_filename, ptr, sizeof (temp_side_data_filename));

  01524	68 00 01 00 00	 push	 256			; 00000100H
  01529	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$30[ebp]
  0152f	50		 push	 eax
  01530	8d 8d e8 f7 ff
	ff		 lea	 ecx, DWORD PTR _temp_side_data_filename$26[ebp]
  01536	51		 push	 ecx
  01537	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0153d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1581 : 
; 1582 :                         ptr += strlen (temp_side_data_filename) + 1;

  01540	8d 85 e8 f7 ff
	ff		 lea	 eax, DWORD PTR _temp_side_data_filename$26[ebp]
  01546	50		 push	 eax
  01547	e8 00 00 00 00	 call	 _strlen
  0154c	83 c4 04	 add	 esp, 4
  0154f	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$30[ebp]
  01555	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  01559	89 95 e8 fb ff
	ff		 mov	 DWORD PTR _ptr$30[ebp], edx

; 1583 : 
; 1584 :                         size += strlen (temp_side_data_filename) + 1;

  0155f	8d 85 e8 f7 ff
	ff		 lea	 eax, DWORD PTR _temp_side_data_filename$26[ebp]
  01565	50		 push	 eax
  01566	e8 00 00 00 00	 call	 _strlen
  0156b	83 c4 04	 add	 esp, 4
  0156e	8b 8d 00 fc ff
	ff		 mov	 ecx, DWORD PTR _size$36[ebp]
  01574	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  01578	89 95 00 fc ff
	ff		 mov	 DWORD PTR _size$36[ebp], edx

; 1585 : 
; 1586 :                         if (side_data_filename)

  0157e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?side_data_filename@@3PADA, 0 ; side_data_filename
  01585	74 0b		 je	 SHORT $LN60@comms_proc

; 1587 :                         {
; 1588 : 
; 1589 :                             free_mem (side_data_filename);

  01587	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_data_filename@@3PADA ; side_data_filename
  0158c	50		 push	 eax
  0158d	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN60@comms_proc:

; 1590 :                         }
; 1591 : 
; 1592 :                         if (strlen (temp_side_data_filename) > 0)

  01592	8d 85 e8 f7 ff
	ff		 lea	 eax, DWORD PTR _temp_side_data_filename$26[ebp]
  01598	50		 push	 eax
  01599	e8 00 00 00 00	 call	 _strlen
  0159e	83 c4 04	 add	 esp, 4
  015a1	85 c0		 test	 eax, eax
  015a3	76 3a		 jbe	 SHORT $LN61@comms_proc

; 1593 :                         {
; 1594 : 
; 1595 :                             side_data_filename = (char *) malloc_heap_mem (strlen (temp_side_data_filename) + 1);

  015a5	8d 85 e8 f7 ff
	ff		 lea	 eax, DWORD PTR _temp_side_data_filename$26[ebp]
  015ab	50		 push	 eax
  015ac	e8 00 00 00 00	 call	 _strlen
  015b1	83 c4 04	 add	 esp, 4
  015b4	83 c0 01	 add	 eax, 1
  015b7	50		 push	 eax
  015b8	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  015bd	a3 00 00 00 00	 mov	 DWORD PTR ?side_data_filename@@3PADA, eax ; side_data_filename

; 1596 : 
; 1597 :                             sprintf (side_data_filename, "%s", temp_side_data_filename);

  015c2	8d 85 e8 f7 ff
	ff		 lea	 eax, DWORD PTR _temp_side_data_filename$26[ebp]
  015c8	50		 push	 eax
  015c9	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  015ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_data_filename@@3PADA ; side_data_filename
  015d4	51		 push	 ecx
  015d5	e8 00 00 00 00	 call	 _sprintf
  015da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1598 :                         }
; 1599 :                         else

  015dd	eb 0a		 jmp	 SHORT $LN62@comms_proc
$LN61@comms_proc:

; 1600 :                         {
; 1601 : 
; 1602 :                             side_data_filename = NULL;

  015df	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?side_data_filename@@3PADA, 0 ; side_data_filename
$LN62@comms_proc:

; 1603 :                         }
; 1604 : 
; 1605 :                         // campaign_population_filename
; 1606 : 
; 1607 :                         strncpy (temp_campaign_population_filename, ptr, sizeof (temp_campaign_population_filename));

  015e9	68 00 01 00 00	 push	 256			; 00000100H
  015ee	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$30[ebp]
  015f4	50		 push	 eax
  015f5	8d 8d e8 f9 ff
	ff		 lea	 ecx, DWORD PTR _temp_campaign_population_filename$28[ebp]
  015fb	51		 push	 ecx
  015fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  01602	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1608 : 
; 1609 :                         ptr += strlen (temp_campaign_population_filename) + 1;

  01605	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _temp_campaign_population_filename$28[ebp]
  0160b	50		 push	 eax
  0160c	e8 00 00 00 00	 call	 _strlen
  01611	83 c4 04	 add	 esp, 4
  01614	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$30[ebp]
  0161a	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0161e	89 95 e8 fb ff
	ff		 mov	 DWORD PTR _ptr$30[ebp], edx

; 1610 : 
; 1611 :                         size += strlen (temp_campaign_population_filename) + 1;

  01624	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _temp_campaign_population_filename$28[ebp]
  0162a	50		 push	 eax
  0162b	e8 00 00 00 00	 call	 _strlen
  01630	83 c4 04	 add	 esp, 4
  01633	8b 8d 00 fc ff
	ff		 mov	 ecx, DWORD PTR _size$36[ebp]
  01639	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0163d	89 95 00 fc ff
	ff		 mov	 DWORD PTR _size$36[ebp], edx

; 1612 : 
; 1613 :                         if (campaign_population_filename)

  01643	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?campaign_population_filename@@3PADA, 0 ; campaign_population_filename
  0164a	74 0b		 je	 SHORT $LN63@comms_proc

; 1614 :                         {
; 1615 : 
; 1616 :                             free_mem (campaign_population_filename);

  0164c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?campaign_population_filename@@3PADA ; campaign_population_filename
  01651	50		 push	 eax
  01652	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN63@comms_proc:

; 1617 :                         }
; 1618 : 
; 1619 :                         if (strlen (temp_campaign_population_filename) > 0)

  01657	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _temp_campaign_population_filename$28[ebp]
  0165d	50		 push	 eax
  0165e	e8 00 00 00 00	 call	 _strlen
  01663	83 c4 04	 add	 esp, 4
  01666	85 c0		 test	 eax, eax
  01668	76 3a		 jbe	 SHORT $LN64@comms_proc

; 1620 :                         {
; 1621 : 
; 1622 :                             campaign_population_filename = (char *) malloc_heap_mem (strlen (temp_campaign_population_filename) + 1);

  0166a	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _temp_campaign_population_filename$28[ebp]
  01670	50		 push	 eax
  01671	e8 00 00 00 00	 call	 _strlen
  01676	83 c4 04	 add	 esp, 4
  01679	83 c0 01	 add	 eax, 1
  0167c	50		 push	 eax
  0167d	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  01682	a3 00 00 00 00	 mov	 DWORD PTR ?campaign_population_filename@@3PADA, eax ; campaign_population_filename

; 1623 : 
; 1624 :                             sprintf (campaign_population_filename, "%s", temp_campaign_population_filename);

  01687	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _temp_campaign_population_filename$28[ebp]
  0168d	50		 push	 eax
  0168e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  01693	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?campaign_population_filename@@3PADA ; campaign_population_filename
  01699	51		 push	 ecx
  0169a	e8 00 00 00 00	 call	 _sprintf
  0169f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1625 :                         }
; 1626 :                         else

  016a2	eb 0a		 jmp	 SHORT $LN65@comms_proc
$LN64@comms_proc:

; 1627 :                         {
; 1628 : 
; 1629 :                             campaign_population_filename = NULL;

  016a4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?campaign_population_filename@@3PADA, 0 ; campaign_population_filename
$LN65@comms_proc:

; 1630 :                         }
; 1631 : 
; 1632 :                         //
; 1633 :                         //
; 1634 :                         //
; 1635 : 
; 1636 :                         player_count = get_list_item (ptr, int);

  016ae	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _ptr$30[ebp]
  016b4	83 c0 04	 add	 eax, 4
  016b7	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _ptr$30[ebp], eax
  016bd	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$30[ebp]
  016c3	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  016c6	89 95 f0 fb ff
	ff		 mov	 DWORD PTR _player_count$32[ebp], edx

; 1637 : 
; 1638 :                         size += sizeof (int);

  016cc	8b 85 00 fc ff
	ff		 mov	 eax, DWORD PTR _size$36[ebp]
  016d2	83 c0 04	 add	 eax, 4
  016d5	89 85 00 fc ff
	ff		 mov	 DWORD PTR _size$36[ebp], eax

; 1639 : 
; 1640 :                         //
; 1641 :                         //
; 1642 :                         //
; 1643 : 
; 1644 :                         received_size -= size;

  016db	8b 45 dc	 mov	 eax, DWORD PTR _received_size$[ebp]
  016de	2b 85 00 fc ff
	ff		 sub	 eax, DWORD PTR _size$36[ebp]
  016e4	89 45 dc	 mov	 DWORD PTR _received_size$[ebp], eax

; 1645 : 
; 1646 :                         #if DEBUG_MODULE
; 1647 : 
; 1648 :                         debug_log ("COMM_MAN: data path %s population placement filename %s, side data filename %s", current_session->data_path, population_placement_filename, side_data_filename);
; 1649 : 
; 1650 :                         debug_log ("COMM_MAN: campaign data path = %s", current_session->data_path);
; 1651 : 
; 1652 :                         #endif
; 1653 : 
; 1654 :                         //
; 1655 :                         // check we have the correct warzone locally
; 1656 :                         //
; 1657 : 
; 1658 :                         sprintf (warzone_ffp_filename, "%s\\terrain\\terrain.ffp", current_session->data_path);

  016e7	8b 45 fc	 mov	 eax, DWORD PTR _current_session$[ebp]
  016ea	83 c0 1c	 add	 eax, 28			; 0000001cH
  016ed	50		 push	 eax
  016ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IIKFIKHA@?$CFs?2terrain?2terrain?4ffp@
  016f3	8d 8d e8 fa ff
	ff		 lea	 ecx, DWORD PTR _warzone_ffp_filename$29[ebp]
  016f9	51		 push	 ecx
  016fa	e8 00 00 00 00	 call	 _sprintf
  016ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1659 : 
; 1660 :                         if (!file_exist (warzone_ffp_filename))

  01702	8d 85 e8 fa ff
	ff		 lea	 eax, DWORD PTR _warzone_ffp_filename$29[ebp]
  01708	50		 push	 eax
  01709	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  0170e	85 c0		 test	 eax, eax
  01710	75 28		 jne	 SHORT $LN66@comms_proc

; 1661 :                         {
; 1662 : 
; 1663 :                             add_to_pop_up_list_with_word_wrap (get_trans ("UNRECOGNISED_WARZONE"), session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  01712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  01717	50		 push	 eax
  01718	6a 00		 push	 0
  0171a	6a 00		 push	 0
  0171c	6a 00		 push	 0
  0171e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  01724	51		 push	 ecx
  01725	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHJLJGMF@UNRECOGNISED_WARZONE@
  0172a	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  0172f	50		 push	 eax
  01730	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1664 :                             //add_to_pop_up_list (get_trans ("Server using unrecognised warzone"), session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);
; 1665 : 
; 1666 :                             break;

  01735	e9 2a 13 00 00	 jmp	 $LN8@comms_proc
$LN66@comms_proc:

; 1667 :                         }
; 1668 : 
; 1669 :                         //
; 1670 :                         //
; 1671 :                         //
; 1672 : 
; 1673 :                         create_local_only_entities (PACK_MODE_BROWSE_SESSION);

  0173a	6a 02		 push	 2
  0173c	e8 00 00 00 00	 call	 ?create_local_only_entities@@YGXW4PACK_MODES@@@Z ; create_local_only_entities

; 1674 : 
; 1675 :                         if (unpack_session ((unsigned char *) ptr, received_size, PACK_MODE_BROWSE_SESSION))

  01741	6a 02		 push	 2
  01743	8b 45 dc	 mov	 eax, DWORD PTR _received_size$[ebp]
  01746	50		 push	 eax
  01747	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$30[ebp]
  0174d	51		 push	 ecx
  0174e	e8 00 00 00 00	 call	 ?unpack_session@@YGHPAEHW4PACK_MODES@@@Z ; unpack_session
  01753	85 c0		 test	 eax, eax
  01755	74 1b		 je	 SHORT $LN67@comms_proc

; 1676 :                         {
; 1677 : 
; 1678 :                             debug_log ("COMMS MAN: browse: received size overflow"); // schorpp

  01757	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@FOCLCND@COMMS?5MAN?3?5browse?3?5received?5siz@
  0175c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  01761	83 c4 04	 add	 esp, 4

; 1679 :  							start_game_exit (GAME_EXIT_KICKOUT, FALSE);

  01764	6a 00		 push	 0
  01766	6a 06		 push	 6
  01768	e8 00 00 00 00	 call	 ?start_game_exit@@YGXW4GAME_EXIT_TYPES@@H@Z ; start_game_exit

; 1680 : 							break;

  0176d	e9 f2 12 00 00	 jmp	 $LN8@comms_proc
$LN67@comms_proc:

; 1681 :                        }
; 1682 : 
; 1683 :                         #if DEBUG_MODULE
; 1684 : 
; 1685 :                         if (this_connection->pilot_entity)
; 1686 :                         {
; 1687 : 
; 1688 :                             debug_log ("COMMS MAN: received SESSION INFO from %s (dpid %d) (setting server id)",
; 1689 :                                             get_local_entity_string (this_connection->pilot_entity, STRING_TYPE_PILOTS_NAME),
; 1690 :                                             received_id);
; 1691 :                         }
; 1692 :                         else
; 1693 :                         {
; 1694 : 
; 1695 :                             debug_log ("COMMS MAN: RECEIVED SESSION INFO from %d", received_id);
; 1696 :                         }
; 1697 : 
; 1698 :                         debug_log ("COMMS MAN: session info: time of day = %f",
; 1699 :                                         get_local_entity_float_value (get_session_entity (), FLOAT_TYPE_TIME_OF_DAY));
; 1700 : 
; 1701 :                         debug_log ("COMMS MAN: map dimensions %d, %d, sector size %d", x_size, z_size, sector_size);
; 1702 : 
; 1703 :                         #endif
; 1704 : 
; 1705 :                         // Jabberwock 031118 Server side settings
; 1706 : 
; 1707 :                         set_ui_object_drawable (session_screen_continue_bdrop, TRUE);

  01772	6a 01		 push	 1
  01774	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_screen_continue_bdrop@@3PAUUI_OBJECT@@A ; session_screen_continue_bdrop
  01779	50		 push	 eax
  0177a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_screen_continue_bdrop@@3PAUUI_OBJECT@@A ; session_screen_continue_bdrop
  01780	8b 11		 mov	 edx, DWORD PTR [ecx]
  01782	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  01789	ff d0		 call	 eax

; 1708 : 
; 1709 :                         set_ui_object_drawable (session_screen_continue_button, TRUE);

  0178b	6a 01		 push	 1
  0178d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_screen_continue_button@@3PAUUI_OBJECT@@A ; session_screen_continue_button
  01792	50		 push	 eax
  01793	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_screen_continue_button@@3PAUUI_OBJECT@@A ; session_screen_continue_button
  01799	8b 11		 mov	 edx, DWORD PTR [ecx]
  0179b	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  017a2	ff d0		 call	 eax

; 1710 : 
; 1711 :                         // Jabberwock 031118 ends
; 1712 : 
; 1713 :                         //
; 1714 :                         // Display game info
; 1715 :                         //
; 1716 : 
; 1717 :                         ui_object_destroy_list_items (session_info_list);

  017a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  017a9	50		 push	 eax
  017aa	e8 00 00 00 00	 call	 ?ui_object_destroy_list_items@@YGXPAUUI_OBJECT@@@Z ; ui_object_destroy_list_items

; 1718 : 
; 1719 :                         if (get_local_entity_int_value (get_session_entity (), INT_TYPE_CAMPAIGN_REQUIRES_APACHE_HAVOC))

  017af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  017b6	74 0f		 je	 SHORT $LN117@comms_proc
  017b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  017bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  017bf	89 8d 64 f4 ff
	ff		 mov	 DWORD PTR tv916[ebp], ecx
  017c5	eb 20		 jmp	 SHORT $LN118@comms_proc
$LN117@comms_proc:
  017c7	68 b7 06 00 00	 push	 1719			; 000006b7H
  017cc	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  017d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  017d7	52		 push	 edx
  017d8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017dd	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv916[ebp], 0
$LN118@comms_proc:
  017e7	b8 01 00 00 00	 mov	 eax, 1
  017ec	85 c0		 test	 eax, eax
  017ee	74 0c		 je	 SHORT $LN119@comms_proc
  017f0	c7 85 60 f4 ff
	ff 16 00 00 00	 mov	 DWORD PTR tv923[ebp], 22 ; 00000016H
  017fa	eb 20		 jmp	 SHORT $LN120@comms_proc
$LN119@comms_proc:
  017fc	68 b7 06 00 00	 push	 1719			; 000006b7H
  01801	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01806	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0180c	51		 push	 ecx
  0180d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01812	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv923[ebp], 0
$LN120@comms_proc:
  0181c	6a 16		 push	 22			; 00000016H
  0181e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01824	52		 push	 edx
  01825	69 85 64 f4 ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv916[ebp], 1116
  0182f	8b 8d 60 f4 ff
	ff		 mov	 ecx, DWORD PTR tv923[ebp]
  01835	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0183c	ff d2		 call	 edx
  0183e	85 c0		 test	 eax, eax
  01840	74 53		 je	 SHORT $LN69@comms_proc

; 1720 :                         {
; 1721 : 
; 1722 :                             // campaign requires apache havoc to be installed
; 1723 :                             // check it is...
; 1724 : 
; 1725 : 									// VJ 050118 aphavoc install hack
; 1726 :                             if (!get_global_apache_havoc_installed () && !global_aphavoc_maps)

  01842	83 3d 60 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+864, 0
  01849	75 4a		 jne	 SHORT $LN69@comms_proc
  0184b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?global_aphavoc_maps@@3HA, 0 ; global_aphavoc_maps
  01852	75 41		 jne	 SHORT $LN69@comms_proc

; 1727 :                             {
; 1728 : 
; 1729 :                                 add_to_pop_up_list_with_word_wrap (get_trans ("REQUIRES_APACHE_HAVOC"), session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  01854	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  01859	50		 push	 eax
  0185a	6a 00		 push	 0
  0185c	6a 00		 push	 0
  0185e	6a 00		 push	 0
  01860	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  01866	51		 push	 ecx
  01867	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PCHAHDPE@REQUIRES_APACHE_HAVOC@
  0186c	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  01871	50		 push	 eax
  01872	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1730 : 
; 1731 :                                 set_ui_object_drawable (session_screen_continue_button, FALSE);

  01877	6a 00		 push	 0
  01879	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_screen_continue_button@@3PAUUI_OBJECT@@A ; session_screen_continue_button
  0187e	50		 push	 eax
  0187f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_screen_continue_button@@3PAUUI_OBJECT@@A ; session_screen_continue_button
  01885	8b 11		 mov	 edx, DWORD PTR [ecx]
  01887	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_drawable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  0188e	ff d0		 call	 eax

; 1732 : 
; 1733 :                                 break;

  01890	e9 cf 11 00 00	 jmp	 $LN8@comms_proc
$LN69@comms_proc:

; 1734 :                             }
; 1735 :                         }
; 1736 : 
; 1737 :                         loop = 3;

  01895	c7 85 ec fb ff
	ff 03 00 00 00	 mov	 DWORD PTR _loop$31[ebp], 3

; 1738 : 
; 1739 :                         sprintf (buffer, "%s : %d", get_trans ("Players"), player_count);

  0189f	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _player_count$32[ebp]
  018a5	50		 push	 eax
  018a6	68 00 00 00 00	 push	 OFFSET ??_C@_07OLBIDKLK@Players@
  018ab	e8 00 00 00 00	 call	 ?get_trans@@YGPBDPBD@Z	; get_trans
  018b0	50		 push	 eax
  018b1	68 00 00 00 00	 push	 OFFSET ??_C@_07IFNDKGJF@?$CFs?5?3?5?$CFd@
  018b6	8d 8d 68 f7 ff
	ff		 lea	 ecx, DWORD PTR _buffer$25[ebp]
  018bc	51		 push	 ecx
  018bd	e8 00 00 00 00	 call	 _sprintf
  018c2	83 c4 10	 add	 esp, 16			; 00000010H

; 1740 : 
; 1741 :                         add_to_pop_up_list_with_word_wrap (buffer, session_info_list, NULL, 0, UI_FONT_ARIAL_10, sys_col_white);

  018c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  018ca	50		 push	 eax
  018cb	6a 00		 push	 0
  018cd	6a 00		 push	 0
  018cf	6a 00		 push	 0
  018d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  018d7	51		 push	 ecx
  018d8	8d 95 68 f7 ff
	ff		 lea	 edx, DWORD PTR _buffer$25[ebp]
  018de	52		 push	 edx
  018df	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1742 : 
; 1743 :                         force = get_local_entity_first_child (get_session_entity (), LIST_TYPE_FORCE);

  018e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  018eb	74 0f		 je	 SHORT $LN121@comms_proc
  018ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  018f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  018f4	89 8d 64 f4 ff
	ff		 mov	 DWORD PTR tv963[ebp], ecx
  018fa	eb 27		 jmp	 SHORT $LN122@comms_proc
$LN121@comms_proc:
  018fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01902	81 c2 88 04 00
	00		 add	 edx, 1160		; 00000488H
  01908	52		 push	 edx
  01909	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0190e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01913	50		 push	 eax
  01914	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01919	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv963[ebp], 0
$LN122@comms_proc:
  01923	b9 01 00 00 00	 mov	 ecx, 1
  01928	85 c9		 test	 ecx, ecx
  0192a	74 0c		 je	 SHORT $LN123@comms_proc
  0192c	c7 85 60 f4 ff
	ff 0e 00 00 00	 mov	 DWORD PTR tv971[ebp], 14 ; 0000000eH
  01936	eb 27		 jmp	 SHORT $LN124@comms_proc
$LN123@comms_proc:
  01938	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  0193e	81 c2 88 04 00
	00		 add	 edx, 1160		; 00000488H
  01944	52		 push	 edx
  01945	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0194a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0194f	50		 push	 eax
  01950	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01955	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv971[ebp], 0
$LN124@comms_proc:
  0195f	6a 0e		 push	 14			; 0000000eH
  01961	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01967	51		 push	 ecx
  01968	69 95 64 f4 ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv963[ebp], 180
  01972	8b 85 60 f4 ff
	ff		 mov	 eax, DWORD PTR tv971[ebp]
  01978	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0197f	ff d1		 call	 ecx
  01981	89 85 10 fc ff
	ff		 mov	 DWORD PTR _force$40[ebp], eax
$LN12@comms_proc:

; 1744 : 
; 1745 :                         while (force)

  01987	83 bd 10 fc ff
	ff 00		 cmp	 DWORD PTR _force$40[ebp], 0
  0198e	0f 84 f2 03 00
	00		 je	 $LN13@comms_proc

; 1746 :                         {
; 1747 : 
; 1748 :                             pilot = get_local_entity_first_child (force, LIST_TYPE_PILOT);

  01994	83 bd 10 fc ff
	ff 00		 cmp	 DWORD PTR _force$40[ebp], 0
  0199b	74 10		 je	 SHORT $LN125@comms_proc
  0199d	8b 85 10 fc ff
	ff		 mov	 eax, DWORD PTR _force$40[ebp]
  019a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  019a5	89 8d 64 f4 ff
	ff		 mov	 DWORD PTR tv984[ebp], ecx
  019ab	eb 27		 jmp	 SHORT $LN126@comms_proc
$LN125@comms_proc:
  019ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  019b3	81 c2 8d 04 00
	00		 add	 edx, 1165		; 0000048dH
  019b9	52		 push	 edx
  019ba	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  019bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  019c4	50		 push	 eax
  019c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  019ca	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv984[ebp], 0
$LN126@comms_proc:
  019d4	b9 01 00 00 00	 mov	 ecx, 1
  019d9	85 c9		 test	 ecx, ecx
  019db	74 0c		 je	 SHORT $LN127@comms_proc
  019dd	c7 85 60 f4 ff
	ff 1c 00 00 00	 mov	 DWORD PTR tv992[ebp], 28 ; 0000001cH
  019e7	eb 27		 jmp	 SHORT $LN128@comms_proc
$LN127@comms_proc:
  019e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  019ef	81 c2 8d 04 00
	00		 add	 edx, 1165		; 0000048dH
  019f5	52		 push	 edx
  019f6	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  019fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01a00	50		 push	 eax
  01a01	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a06	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv992[ebp], 0
$LN128@comms_proc:
  01a10	6a 1c		 push	 28			; 0000001cH
  01a12	8b 8d 10 fc ff
	ff		 mov	 ecx, DWORD PTR _force$40[ebp]
  01a18	51		 push	 ecx
  01a19	69 95 64 f4 ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv984[ebp], 180
  01a23	8b 85 60 f4 ff
	ff		 mov	 eax, DWORD PTR tv992[ebp]
  01a29	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01a30	ff d1		 call	 ecx
  01a32	89 85 0c fc ff
	ff		 mov	 DWORD PTR _pilot$39[ebp], eax
$LN14@comms_proc:

; 1749 : 
; 1750 :                             while (pilot)

  01a38	83 bd 0c fc ff
	ff 00		 cmp	 DWORD PTR _pilot$39[ebp], 0
  01a3f	0f 84 98 02 00
	00		 je	 $LN15@comms_proc

; 1751 :                             {
; 1752 :                                 {
; 1753 :                                     rgb_colour
; 1754 :                                         col;
; 1755 : 
; 1756 :                                     sprintf (buffer, "%2d  ", loop - 2);

  01a45	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _loop$31[ebp]
  01a4b	83 e8 02	 sub	 eax, 2
  01a4e	50		 push	 eax
  01a4f	68 00 00 00 00	 push	 OFFSET ??_C@_05NLDACDCJ@?$CF2d?5?5@
  01a54	8d 8d 68 f7 ff
	ff		 lea	 ecx, DWORD PTR _buffer$25[ebp]
  01a5a	51		 push	 ecx
  01a5b	e8 00 00 00 00	 call	 _sprintf
  01a60	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1757 : 
; 1758 :                                     strncat (buffer, get_local_entity_string (pilot, STRING_TYPE_PILOTS_NAME), 64);

  01a63	83 bd 0c fc ff
	ff 00		 cmp	 DWORD PTR _pilot$39[ebp], 0
  01a6a	74 10		 je	 SHORT $LN129@comms_proc
  01a6c	8b 85 0c fc ff
	ff		 mov	 eax, DWORD PTR _pilot$39[ebp]
  01a72	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a74	89 8d 64 f4 ff
	ff		 mov	 DWORD PTR tv1011[ebp], ecx
  01a7a	eb 27		 jmp	 SHORT $LN130@comms_proc
$LN129@comms_proc:
  01a7c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01a82	81 c2 97 04 00
	00		 add	 edx, 1175		; 00000497H
  01a88	52		 push	 edx
  01a89	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a8e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01a93	50		 push	 eax
  01a94	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a99	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1011[ebp], 0
$LN130@comms_proc:
  01aa3	b9 01 00 00 00	 mov	 ecx, 1
  01aa8	85 c9		 test	 ecx, ecx
  01aaa	74 0c		 je	 SHORT $LN131@comms_proc
  01aac	c7 85 60 f4 ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv1019[ebp], 10 ; 0000000aH
  01ab6	eb 27		 jmp	 SHORT $LN132@comms_proc
$LN131@comms_proc:
  01ab8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01abe	81 c2 97 04 00
	00		 add	 edx, 1175		; 00000497H
  01ac4	52		 push	 edx
  01ac5	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01aca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  01acf	50		 push	 eax
  01ad0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ad5	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1019[ebp], 0
$LN132@comms_proc:
  01adf	6a 40		 push	 64			; 00000040H
  01ae1	6a 0a		 push	 10			; 0000000aH
  01ae3	8b 8d 0c fc ff
	ff		 mov	 ecx, DWORD PTR _pilot$39[ebp]
  01ae9	51		 push	 ecx
  01aea	6b 95 64 f4 ff
	ff 34		 imul	 edx, DWORD PTR tv1011[ebp], 52
  01af1	8b 85 60 f4 ff
	ff		 mov	 eax, DWORD PTR tv1019[ebp]
  01af7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  01afe	ff d1		 call	 ecx
  01b00	50		 push	 eax
  01b01	8d 95 68 f7 ff
	ff		 lea	 edx, DWORD PTR _buffer$25[ebp]
  01b07	52		 push	 edx
  01b08	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncat
  01b0e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1759 : 
; 1760 :                                     switch (get_local_entity_int_value (pilot, INT_TYPE_SIDE))

  01b11	83 bd 0c fc ff
	ff 00		 cmp	 DWORD PTR _pilot$39[ebp], 0
  01b18	74 10		 je	 SHORT $LN133@comms_proc
  01b1a	8b 85 0c fc ff
	ff		 mov	 eax, DWORD PTR _pilot$39[ebp]
  01b20	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b22	89 8d 64 f4 ff
	ff		 mov	 DWORD PTR tv1063[ebp], ecx
  01b28	eb 20		 jmp	 SHORT $LN134@comms_proc
$LN133@comms_proc:
  01b2a	68 e0 06 00 00	 push	 1760			; 000006e0H
  01b2f	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b34	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01b3a	52		 push	 edx
  01b3b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b40	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1063[ebp], 0
$LN134@comms_proc:
  01b4a	b8 01 00 00 00	 mov	 eax, 1
  01b4f	85 c0		 test	 eax, eax
  01b51	74 0c		 je	 SHORT $LN135@comms_proc
  01b53	c7 85 60 f4 ff
	ff bb 00 00 00	 mov	 DWORD PTR tv1070[ebp], 187 ; 000000bbH
  01b5d	eb 20		 jmp	 SHORT $LN136@comms_proc
$LN135@comms_proc:
  01b5f	68 e0 06 00 00	 push	 1760			; 000006e0H
  01b64	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b69	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01b6f	51		 push	 ecx
  01b70	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b75	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1070[ebp], 0
$LN136@comms_proc:
  01b7f	68 bb 00 00 00	 push	 187			; 000000bbH
  01b84	8b 95 0c fc ff
	ff		 mov	 edx, DWORD PTR _pilot$39[ebp]
  01b8a	52		 push	 edx
  01b8b	69 85 64 f4 ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1063[ebp], 1116
  01b95	8b 8d 60 f4 ff
	ff		 mov	 ecx, DWORD PTR tv1070[ebp]
  01b9b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01ba2	ff d2		 call	 edx
  01ba4	89 85 5c f4 ff
	ff		 mov	 DWORD PTR tv1076[ebp], eax
  01baa	83 bd 5c f4 ff
	ff 01		 cmp	 DWORD PTR tv1076[ebp], 1
  01bb1	74 0b		 je	 SHORT $LN70@comms_proc
  01bb3	83 bd 5c f4 ff
	ff 02		 cmp	 DWORD PTR tv1076[ebp], 2
  01bba	74 20		 je	 SHORT $LN71@comms_proc
  01bbc	eb 3c		 jmp	 SHORT $LN72@comms_proc
$LN70@comms_proc:

; 1761 :                                     {
; 1762 :                                         case ENTITY_SIDE_BLUE_FORCE:
; 1763 :                                         {
; 1764 :                                             col.r = 120;

  01bbe	c6 85 66 f7 ff
	ff 78		 mov	 BYTE PTR _col$24[ebp+2], 120 ; 00000078H

; 1765 :                                             col.g = 158;

  01bc5	c6 85 65 f7 ff
	ff 9e		 mov	 BYTE PTR _col$24[ebp+1], 158 ; 0000009eH

; 1766 :                                             col.b = 255;

  01bcc	c6 85 64 f7 ff
	ff ff		 mov	 BYTE PTR _col$24[ebp], 255 ; 000000ffH

; 1767 :                                             col.a = 255;

  01bd3	c6 85 67 f7 ff
	ff ff		 mov	 BYTE PTR _col$24[ebp+3], 255 ; 000000ffH

; 1768 : 
; 1769 :                                             break;

  01bda	eb 29		 jmp	 SHORT $LN16@comms_proc
$LN71@comms_proc:

; 1770 :                                         }
; 1771 :                                         case ENTITY_SIDE_RED_FORCE:
; 1772 :                                         {
; 1773 :                                             col.r = 255;

  01bdc	c6 85 66 f7 ff
	ff ff		 mov	 BYTE PTR _col$24[ebp+2], 255 ; 000000ffH

; 1774 :                                             col.g = 120;

  01be3	c6 85 65 f7 ff
	ff 78		 mov	 BYTE PTR _col$24[ebp+1], 120 ; 00000078H

; 1775 :                                             col.b = 80;

  01bea	c6 85 64 f7 ff
	ff 50		 mov	 BYTE PTR _col$24[ebp], 80 ; 00000050H

; 1776 :                                             col.a = 255;

  01bf1	c6 85 67 f7 ff
	ff ff		 mov	 BYTE PTR _col$24[ebp+3], 255 ; 000000ffH

; 1777 : 
; 1778 :                                             break;

  01bf8	eb 0b		 jmp	 SHORT $LN16@comms_proc
$LN72@comms_proc:

; 1779 :                                         }
; 1780 :                                         default:
; 1781 :                                         {
; 1782 :                                           col = ui_colour_white;

  01bfa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ui_colour_white@@3UREAL_COLOUR@@A ; ui_colour_white
  01bff	89 85 64 f7 ff
	ff		 mov	 DWORD PTR _col$24[ebp], eax
$LN16@comms_proc:

; 1783 : 
; 1784 :                                             break;
; 1785 :                                         }
; 1786 :                                     }
; 1787 : 
; 1788 :                                     add_to_pop_up_list_with_word_wrap (buffer, session_info_list, NULL, 0, UI_FONT_ARIAL_10, col);

  01c05	8b 85 64 f7 ff
	ff		 mov	 eax, DWORD PTR _col$24[ebp]
  01c0b	50		 push	 eax
  01c0c	6a 00		 push	 0
  01c0e	6a 00		 push	 0
  01c10	6a 00		 push	 0
  01c12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_info_list@@3PAUUI_OBJECT@@A ; session_info_list
  01c18	51		 push	 ecx
  01c19	8d 95 68 f7 ff
	ff		 lea	 edx, DWORD PTR _buffer$25[ebp]
  01c1f	52		 push	 edx
  01c20	e8 00 00 00 00	 call	 ?add_to_pop_up_list_with_word_wrap@@YGPAUUI_OBJECT@@PBDPAU1@1HHUREAL_COLOUR@@@Z ; add_to_pop_up_list_with_word_wrap

; 1789 : 
; 1790 :                                     loop ++;

  01c25	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _loop$31[ebp]
  01c2b	83 c0 01	 add	 eax, 1
  01c2e	89 85 ec fb ff
	ff		 mov	 DWORD PTR _loop$31[ebp], eax

; 1791 :                                 }
; 1792 : 
; 1793 :                                 pilot = get_local_entity_child_succ (pilot, LIST_TYPE_PILOT);

  01c34	83 bd 0c fc ff
	ff 00		 cmp	 DWORD PTR _pilot$39[ebp], 0
  01c3b	74 10		 je	 SHORT $LN137@comms_proc
  01c3d	8b 85 0c fc ff
	ff		 mov	 eax, DWORD PTR _pilot$39[ebp]
  01c43	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c45	89 8d 64 f4 ff
	ff		 mov	 DWORD PTR tv1092[ebp], ecx
  01c4b	eb 27		 jmp	 SHORT $LN138@comms_proc
$LN137@comms_proc:
  01c4d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01c53	81 c2 ba 04 00
	00		 add	 edx, 1210		; 000004baH
  01c59	52		 push	 edx
  01c5a	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01c64	50		 push	 eax
  01c65	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c6a	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1092[ebp], 0
$LN138@comms_proc:
  01c74	b9 01 00 00 00	 mov	 ecx, 1
  01c79	85 c9		 test	 ecx, ecx
  01c7b	74 0c		 je	 SHORT $LN139@comms_proc
  01c7d	c7 85 60 f4 ff
	ff 1c 00 00 00	 mov	 DWORD PTR tv1100[ebp], 28 ; 0000001cH
  01c87	eb 27		 jmp	 SHORT $LN140@comms_proc
$LN139@comms_proc:
  01c89	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01c8f	81 c2 ba 04 00
	00		 add	 edx, 1210		; 000004baH
  01c95	52		 push	 edx
  01c96	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01ca0	50		 push	 eax
  01ca1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ca6	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1100[ebp], 0
$LN140@comms_proc:
  01cb0	6a 1c		 push	 28			; 0000001cH
  01cb2	8b 8d 0c fc ff
	ff		 mov	 ecx, DWORD PTR _pilot$39[ebp]
  01cb8	51		 push	 ecx
  01cb9	69 95 64 f4 ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1092[ebp], 180
  01cc3	8b 85 60 f4 ff
	ff		 mov	 eax, DWORD PTR tv1100[ebp]
  01cc9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01cd0	ff d1		 call	 ecx
  01cd2	89 85 0c fc ff
	ff		 mov	 DWORD PTR _pilot$39[ebp], eax

; 1794 :                             }

  01cd8	e9 5b fd ff ff	 jmp	 $LN14@comms_proc
$LN15@comms_proc:

; 1795 : 
; 1796 :                             force = get_local_entity_child_succ (force, LIST_TYPE_FORCE);

  01cdd	83 bd 10 fc ff
	ff 00		 cmp	 DWORD PTR _force$40[ebp], 0
  01ce4	74 10		 je	 SHORT $LN141@comms_proc
  01ce6	8b 85 10 fc ff
	ff		 mov	 eax, DWORD PTR _force$40[ebp]
  01cec	8b 08		 mov	 ecx, DWORD PTR [eax]
  01cee	89 8d 64 f4 ff
	ff		 mov	 DWORD PTR tv1112[ebp], ecx
  01cf4	eb 27		 jmp	 SHORT $LN142@comms_proc
$LN141@comms_proc:
  01cf6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01cfc	81 c2 bd 04 00
	00		 add	 edx, 1213		; 000004bdH
  01d02	52		 push	 edx
  01d03	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d08	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d0d	50		 push	 eax
  01d0e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d13	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1112[ebp], 0
$LN142@comms_proc:
  01d1d	b9 01 00 00 00	 mov	 ecx, 1
  01d22	85 c9		 test	 ecx, ecx
  01d24	74 0c		 je	 SHORT $LN143@comms_proc
  01d26	c7 85 60 f4 ff
	ff 0e 00 00 00	 mov	 DWORD PTR tv1120[ebp], 14 ; 0000000eH
  01d30	eb 27		 jmp	 SHORT $LN144@comms_proc
$LN143@comms_proc:
  01d32	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01d38	81 c2 bd 04 00
	00		 add	 edx, 1213		; 000004bdH
  01d3e	52		 push	 edx
  01d3f	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d44	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01d49	50		 push	 eax
  01d4a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d4f	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1120[ebp], 0
$LN144@comms_proc:
  01d59	6a 0e		 push	 14			; 0000000eH
  01d5b	8b 8d 10 fc ff
	ff		 mov	 ecx, DWORD PTR _force$40[ebp]
  01d61	51		 push	 ecx
  01d62	69 95 64 f4 ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1112[ebp], 180
  01d6c	8b 85 60 f4 ff
	ff		 mov	 eax, DWORD PTR tv1120[ebp]
  01d72	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01d79	ff d1		 call	 ecx
  01d7b	89 85 10 fc ff
	ff		 mov	 DWORD PTR _force$40[ebp], eax

; 1797 :                         }

  01d81	e9 01 fc ff ff	 jmp	 $LN12@comms_proc
$LN13@comms_proc:

; 1798 : 
; 1799 :                         set_server_id (received_id);

  01d86	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  01d89	a3 00 00 00 00	 mov	 DWORD PTR ?system_server_id@@3KA, eax ; system_server_id

; 1800 : 
; 1801 :                         //
; 1802 :                         // destroy all entities created by browse info
; 1803 :                         //
; 1804 : 
; 1805 :                         reinitialise_entity_system ();

  01d8e	e8 00 00 00 00	 call	 ?reinitialise_entity_system@@YGXXZ ; reinitialise_entity_system

; 1806 : 
; 1807 :                         break;

  01d93	e9 cc 0c 00 00	 jmp	 $LN8@comms_proc
$LN73@comms_proc:

; 1808 :                     }
; 1809 : 
; 1810 :                     case PACKET_TYPE_CLIENT_PILOT_REQUEST:
; 1811 :                     {
; 1812 : 
; 1813 :                         connection_list_type
; 1814 :                             *new_connection;
; 1815 : 
; 1816 :                         client_pilot_request_data
; 1817 :                             pilot_data;
; 1818 : 
; 1819 :                         entity
; 1820 :                             *new_pilot;
; 1821 : 
; 1822 :                         int
; 1823 :                             index;
; 1824 : 
; 1825 :                         ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  01d98	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  01d9f	74 1a		 je	 SHORT $LN74@comms_proc
  01da1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01da6	05 da 04 00 00	 add	 eax, 1242		; 000004daH
  01dab	50		 push	 eax
  01dac	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01db1	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  01db6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN74@comms_proc:

; 1826 : 
; 1827 : //                      #if DEBUG_MODULE
; 1828 : 
; 1829 :                         debug_log ("COMMS MAN: RECEIVED PILOT REQUEST from %d", received_id);

  01dbb	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  01dbe	50		 push	 eax
  01dbf	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@HPHANGDF@COMMS?5MAN?3?5RECEIVED?5PILOT?5REQUE@
  01dc4	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  01dc9	83 c4 08	 add	 esp, 8

; 1830 : 
; 1831 : //                      #endif
; 1832 : 
; 1833 :                         //
; 1834 :                         // unpack name
; 1835 :                         //
; 1836 : 
; 1837 :                         memcpy (&pilot_data, (client_pilot_request_data *) received_data, sizeof (client_pilot_request_data));

  01dcc	68 1c 01 00 00	 push	 284			; 0000011cH
  01dd1	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  01dd4	50		 push	 eax
  01dd5	8d 8d 44 f6 ff
	ff		 lea	 ecx, DWORD PTR _pilot_data$22[ebp]
  01ddb	51		 push	 ecx
  01ddc	e8 00 00 00 00	 call	 _memcpy
  01de1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1838 : 
; 1839 :                         new_pilot = create_new_pilot_entity

  01de4	8b 85 5c f7 ff
	ff		 mov	 eax, DWORD PTR _pilot_data$22[ebp+280]
  01dea	50		 push	 eax
  01deb	8b 8d 58 f7 ff
	ff		 mov	 ecx, DWORD PTR _pilot_data$22[ebp+276]
  01df1	51		 push	 ecx
  01df2	8b 95 54 f7 ff
	ff		 mov	 edx, DWORD PTR _pilot_data$22[ebp+272]
  01df8	52		 push	 edx
  01df9	8b 85 50 f7 ff
	ff		 mov	 eax, DWORD PTR _pilot_data$22[ebp+268]
  01dff	50		 push	 eax
  01e00	8b 8d 4c f7 ff
	ff		 mov	 ecx, DWORD PTR _pilot_data$22[ebp+264]
  01e06	51		 push	 ecx
  01e07	8d 95 44 f6 ff
	ff		 lea	 edx, DWORD PTR _pilot_data$22[ebp]
  01e0d	52		 push	 edx
  01e0e	e8 00 00 00 00	 call	 ?create_new_pilot_entity@@YGPAUENTITY@@PBDW4ENTITY_SIDES@@HHHH@Z ; create_new_pilot_entity
  01e13	89 85 40 f6 ff
	ff		 mov	 DWORD PTR _new_pilot$21[ebp], eax

; 1840 :                                         (
; 1841 :                                             pilot_data.name,
; 1842 :                                             (entity_sides) pilot_data.side,
; 1843 :                                             pilot_data.rank,
; 1844 :                                             pilot_data.sub_type,
; 1845 :                                             pilot_data.unique_id,
; 1846 :                                             pilot_data.difficulty
; 1847 :                                         );
; 1848 : 
; 1849 :                         ASSERT (new_pilot);

  01e19	83 bd 40 f6 ff
	ff 00		 cmp	 DWORD PTR _new_pilot$21[ebp], 0
  01e20	75 1a		 jne	 SHORT $LN75@comms_proc
  01e22	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01e27	05 f2 04 00 00	 add	 eax, 1266		; 000004f2H
  01e2c	50		 push	 eax
  01e2d	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e32	68 00 00 00 00	 push	 OFFSET ??_C@_09FAIPAGNP@new_pilot@
  01e37	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN75@comms_proc:

; 1850 : 
; 1851 :                         index = get_local_entity_safe_index (new_pilot);

  01e3c	83 bd 40 f6 ff
	ff 00		 cmp	 DWORD PTR _new_pilot$21[ebp], 0
  01e43	74 17		 je	 SHORT $LN145@comms_proc
  01e45	8b 85 40 f6 ff
	ff		 mov	 eax, DWORD PTR _new_pilot$21[ebp]
  01e4b	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  01e51	c1 f8 04	 sar	 eax, 4
  01e54	89 85 64 f4 ff
	ff		 mov	 DWORD PTR tv1151[ebp], eax
  01e5a	eb 0a		 jmp	 SHORT $LN146@comms_proc
$LN145@comms_proc:
  01e5c	c7 85 64 f4 ff
	ff ff ff ff ff	 mov	 DWORD PTR tv1151[ebp], -1
$LN146@comms_proc:
  01e66	8b 8d 64 f4 ff
	ff		 mov	 ecx, DWORD PTR tv1151[ebp]
  01e6c	89 8d 3c f6 ff
	ff		 mov	 DWORD PTR _index$20[ebp], ecx

; 1852 : 
; 1853 :                         new_connection = get_connection_list_item (received_id);

  01e72	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  01e75	50		 push	 eax
  01e76	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  01e7b	89 85 60 f7 ff
	ff		 mov	 DWORD PTR _new_connection$23[ebp], eax

; 1854 : 
; 1855 :                         transmit_entity_comms_message (ENTITY_COMMS_PILOT_REQUEST_ACCEPTED, NULL, received_id, index);

  01e81	8b 85 3c f6 ff
	ff		 mov	 eax, DWORD PTR _index$20[ebp]
  01e87	50		 push	 eax
  01e88	8b 4d d8	 mov	 ecx, DWORD PTR _received_id$[ebp]
  01e8b	51		 push	 ecx
  01e8c	6a 00		 push	 0
  01e8e	6a 21		 push	 33			; 00000021H
  01e90	e8 00 00 00 00	 call	 ?transmit_entity_comms_message@@YAXW4ENTITY_COMMS_MESSAGES@@PAUENTITY@@ZZ ; transmit_entity_comms_message
  01e95	83 c4 10	 add	 esp, 16			; 00000010H

; 1856 : 
; 1857 :                         new_connection->pilot_entity = new_pilot;

  01e98	8b 85 60 f7 ff
	ff		 mov	 eax, DWORD PTR _new_connection$23[ebp]
  01e9e	8b 8d 40 f6 ff
	ff		 mov	 ecx, DWORD PTR _new_pilot$21[ebp]
  01ea4	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 1858 : 
; 1859 :                         break;

  01ea7	e9 b8 0b 00 00	 jmp	 $LN8@comms_proc
$LN76@comms_proc:

; 1860 :                     }
; 1861 : 
; 1862 :                     case PACKET_TYPE_CLIENT_GUNSHIP_REQUEST:
; 1863 :                     {
; 1864 : 
; 1865 :                         connection_list_type
; 1866 :                             *new_connection;
; 1867 : 
; 1868 :                         client_gunship_request_data
; 1869 :                             pilot_data;
; 1870 : 
; 1871 :                         int
; 1872 :                             index_number,
; 1873 :                             buffer [2];
; 1874 : 
; 1875 :                         if (get_comms_model () == COMMS_MODEL_SERVER)

  01eac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  01eb3	0f 85 b0 02 00
	00		 jne	 $LN77@comms_proc

; 1876 :                         {
; 1877 : 
; 1878 : //                          #if DEBUG_MODULE
; 1879 : 
; 1880 :                             if (this_connection->pilot_entity)

  01eb9	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  01ebc	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  01ec0	0f 84 b1 00 00
	00		 je	 $LN78@comms_proc

; 1881 :                             {
; 1882 : 
; 1883 :                                 debug_log ("COMMS MAN: RECEIVED GUNSHIP REQUEST from %s (dpid %d)",

  01ec6	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  01ec9	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  01ecd	74 10		 je	 SHORT $LN147@comms_proc
  01ecf	8b 4d f8	 mov	 ecx, DWORD PTR _this_connection$[ebp]
  01ed2	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01ed5	8b 02		 mov	 eax, DWORD PTR [edx]
  01ed7	89 85 64 f4 ff
	ff		 mov	 DWORD PTR tv1203[ebp], eax
  01edd	eb 28		 jmp	 SHORT $LN148@comms_proc
$LN147@comms_proc:
  01edf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01ee5	81 c1 15 05 00
	00		 add	 ecx, 1301		; 00000515H
  01eeb	51		 push	 ecx
  01eec	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ef1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ef7	52		 push	 edx
  01ef8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01efd	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1203[ebp], 0
$LN148@comms_proc:
  01f07	b8 01 00 00 00	 mov	 eax, 1
  01f0c	85 c0		 test	 eax, eax
  01f0e	74 0c		 je	 SHORT $LN149@comms_proc
  01f10	c7 85 60 f4 ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv1211[ebp], 10 ; 0000000aH
  01f1a	eb 28		 jmp	 SHORT $LN150@comms_proc
$LN149@comms_proc:
  01f1c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01f22	81 c1 15 05 00
	00		 add	 ecx, 1301		; 00000515H
  01f28	51		 push	 ecx
  01f29	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f2e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  01f34	52		 push	 edx
  01f35	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f3a	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1211[ebp], 0
$LN150@comms_proc:
  01f44	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  01f47	50		 push	 eax
  01f48	6a 0a		 push	 10			; 0000000aH
  01f4a	8b 4d f8	 mov	 ecx, DWORD PTR _this_connection$[ebp]
  01f4d	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01f50	52		 push	 edx
  01f51	6b 85 64 f4 ff
	ff 34		 imul	 eax, DWORD PTR tv1203[ebp], 52
  01f58	8b 8d 60 f4 ff
	ff		 mov	 ecx, DWORD PTR tv1211[ebp]
  01f5e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[eax+ecx*4]
  01f65	ff d2		 call	 edx
  01f67	50		 push	 eax
  01f68	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@HCPKNGAG@COMMS?5MAN?3?5RECEIVED?5GUNSHIP?5REQ@
  01f6d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  01f72	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1884 :                                                 get_local_entity_string (this_connection->pilot_entity, STRING_TYPE_PILOTS_NAME),
; 1885 :                                                 received_id);
; 1886 :                             }
; 1887 :                             else

  01f75	eb 11		 jmp	 SHORT $LN79@comms_proc
$LN78@comms_proc:

; 1888 :                             {
; 1889 : 
; 1890 :                                 debug_log ("COMMS MAN: RECEIVED GUNSHIP REQUEST from %d", received_id);

  01f77	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  01f7a	50		 push	 eax
  01f7b	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@JFMBCBGH@COMMS?5MAN?3?5RECEIVED?5GUNSHIP?5REQ@
  01f80	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  01f85	83 c4 08	 add	 esp, 8
$LN79@comms_proc:

; 1891 :                             }
; 1892 : 
; 1893 : //                          #endif
; 1894 : 
; 1895 :                             memcpy (&pilot_data, (client_gunship_request_data *) received_data, sizeof (client_gunship_request_data));

  01f88	6a 08		 push	 8
  01f8a	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  01f8d	50		 push	 eax
  01f8e	8d 8d 30 f6 ff
	ff		 lea	 ecx, DWORD PTR _pilot_data$18[ebp]
  01f94	51		 push	 ecx
  01f95	e8 00 00 00 00	 call	 _memcpy
  01f9a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1896 : 
; 1897 :                             index_number = pilot_data.gunship_index;

  01f9d	8b 85 34 f6 ff
	ff		 mov	 eax, DWORD PTR _pilot_data$18[ebp+4]
  01fa3	89 85 2c f6 ff
	ff		 mov	 DWORD PTR _index_number$17[ebp], eax

; 1898 : 
; 1899 :                             ASSERT (index_number != ENTITY_INDEX_DONT_CARE);

  01fa9	83 bd 2c f6 ff
	ff ff		 cmp	 DWORD PTR _index_number$17[ebp], -1
  01fb0	75 1a		 jne	 SHORT $LN80@comms_proc
  01fb2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  01fb7	05 24 05 00 00	 add	 eax, 1316		; 00000524H
  01fbc	50		 push	 eax
  01fbd	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fc2	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IDAADFLB@index_number?5?$CB?$DN?5ENTITY_INDEX_DO@
  01fc7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN80@comms_proc:

; 1900 : 
; 1901 :                             member = get_local_entity_safe_ptr (index_number);

  01fcc	83 bd 2c f6 ff
	ff ff		 cmp	 DWORD PTR _index_number$17[ebp], -1
  01fd3	74 17		 je	 SHORT $LN151@comms_proc
  01fd5	8b 85 2c f6 ff
	ff		 mov	 eax, DWORD PTR _index_number$17[ebp]
  01fdb	c1 e0 04	 shl	 eax, 4
  01fde	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  01fe4	89 85 64 f4 ff
	ff		 mov	 DWORD PTR tv1233[ebp], eax
  01fea	eb 0a		 jmp	 SHORT $LN152@comms_proc
$LN151@comms_proc:
  01fec	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1233[ebp], 0
$LN152@comms_proc:
  01ff6	8b 8d 64 f4 ff
	ff		 mov	 ecx, DWORD PTR tv1233[ebp]
  01ffc	89 4d d4	 mov	 DWORD PTR _member$[ebp], ecx

; 1902 : 
; 1903 :                             if (!member)

  01fff	83 7d d4 00	 cmp	 DWORD PTR _member$[ebp], 0
  02003	0f 85 f3 00 00
	00		 jne	 $LN81@comms_proc

; 1904 :                             {
; 1905 : //                              #if DEBUG_MODULE
; 1906 : 
; 1907 :                                 if (this_connection->pilot_entity)

  02009	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  0200c	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  02010	0f 84 b8 00 00
	00		 je	 $LN82@comms_proc

; 1908 :                                 {
; 1909 : 
; 1910 :                                     debug_log ("COMMS MAN: REFUSING GUNSHIP FOR PLAYER %s (dpid %d) for helicopter %d",

  02016	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  02019	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  0201d	74 10		 je	 SHORT $LN153@comms_proc
  0201f	8b 4d f8	 mov	 ecx, DWORD PTR _this_connection$[ebp]
  02022	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  02025	8b 02		 mov	 eax, DWORD PTR [edx]
  02027	89 85 64 f4 ff
	ff		 mov	 DWORD PTR tv1247[ebp], eax
  0202d	eb 28		 jmp	 SHORT $LN154@comms_proc
$LN153@comms_proc:
  0202f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  02035	81 c1 30 05 00
	00		 add	 ecx, 1328		; 00000530H
  0203b	51		 push	 ecx
  0203c	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  02041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02047	52		 push	 edx
  02048	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0204d	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1247[ebp], 0
$LN154@comms_proc:
  02057	b8 01 00 00 00	 mov	 eax, 1
  0205c	85 c0		 test	 eax, eax
  0205e	74 0c		 je	 SHORT $LN155@comms_proc
  02060	c7 85 60 f4 ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv1255[ebp], 10 ; 0000000aH
  0206a	eb 28		 jmp	 SHORT $LN156@comms_proc
$LN155@comms_proc:
  0206c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  02072	81 c1 30 05 00
	00		 add	 ecx, 1328		; 00000530H
  02078	51		 push	 ecx
  02079	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0207e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  02084	52		 push	 edx
  02085	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0208a	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1255[ebp], 0
$LN156@comms_proc:
  02094	8b 85 34 f6 ff
	ff		 mov	 eax, DWORD PTR _pilot_data$18[ebp+4]
  0209a	50		 push	 eax
  0209b	8b 4d d8	 mov	 ecx, DWORD PTR _received_id$[ebp]
  0209e	51		 push	 ecx
  0209f	6a 0a		 push	 10			; 0000000aH
  020a1	8b 55 f8	 mov	 edx, DWORD PTR _this_connection$[ebp]
  020a4	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  020a7	50		 push	 eax
  020a8	6b 8d 64 f4 ff
	ff 34		 imul	 ecx, DWORD PTR tv1247[ebp], 52
  020af	8b 95 60 f4 ff
	ff		 mov	 edx, DWORD PTR tv1255[ebp]
  020b5	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[ecx+edx*4]
  020bc	ff d0		 call	 eax
  020be	50		 push	 eax
  020bf	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@KKDHOJLJ@COMMS?5MAN?3?5REFUSING?5GUNSHIP?5FOR@
  020c4	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  020c9	83 c4 10	 add	 esp, 16			; 00000010H

; 1911 :                                                     get_local_entity_string (this_connection->pilot_entity, STRING_TYPE_PILOTS_NAME),
; 1912 :                                                     received_id, pilot_data.gunship_index);
; 1913 :                                 }
; 1914 :                                 else

  020cc	eb 18		 jmp	 SHORT $LN83@comms_proc
$LN82@comms_proc:

; 1915 :                                 {
; 1916 : 
; 1917 :                                     debug_log ("COMMS MAN: Refusing gunship for player %d to helicopter %d", received_id, pilot_data.gunship_index);

  020ce	8b 85 34 f6 ff
	ff		 mov	 eax, DWORD PTR _pilot_data$18[ebp+4]
  020d4	50		 push	 eax
  020d5	8b 4d d8	 mov	 ecx, DWORD PTR _received_id$[ebp]
  020d8	51		 push	 ecx
  020d9	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@JJECMCLK@COMMS?5MAN?3?5Refusing?5gunship?5for@
  020de	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  020e3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN83@comms_proc:

; 1918 :                                 }
; 1919 : 
; 1920 : //                              #endif
; 1921 : 
; 1922 :                                 send_packet (received_id, PACKET_TYPE_GUNSHIP_REQUEST_REFUSED, NULL, 0, SEND_TYPE_PERSONAL);

  020e6	6a 00		 push	 0
  020e8	6a 00		 push	 0
  020ea	6a 00		 push	 0
  020ec	6a 08		 push	 8
  020ee	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  020f1	50		 push	 eax
  020f2	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet

; 1923 : 
; 1924 :                                 break;

  020f7	e9 68 09 00 00	 jmp	 $LN8@comms_proc
$LN81@comms_proc:

; 1925 :                             }
; 1926 : 
; 1927 :                             new_connection = get_connection_list_item (received_id);

  020fc	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  020ff	50		 push	 eax
  02100	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  02105	89 85 38 f6 ff
	ff		 mov	 DWORD PTR _new_connection$19[ebp], eax

; 1928 : 
; 1929 :                             //
; 1930 :                             // send acceptance
; 1931 :                             //
; 1932 : 
; 1933 :                             buffer [0] = index_number;

  0210b	b8 04 00 00 00	 mov	 eax, 4
  02110	6b c8 00	 imul	 ecx, eax, 0
  02113	8b 95 2c f6 ff
	ff		 mov	 edx, DWORD PTR _index_number$17[ebp]
  02119	89 94 0d 24 f6
	ff ff		 mov	 DWORD PTR _buffer$16[ebp+ecx], edx

; 1934 : 
; 1935 : //                          #if DEBUG_MODULE
; 1936 : 
; 1937 :                             debug_log ("COMMS MAN: sending gunship request accepted for gunship %d pilot id %d", index_number, received_id);

  02120	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  02123	50		 push	 eax
  02124	8b 8d 2c f6 ff
	ff		 mov	 ecx, DWORD PTR _index_number$17[ebp]
  0212a	51		 push	 ecx
  0212b	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@IAMIFHCB@COMMS?5MAN?3?5sending?5gunship?5requ@
  02130	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  02135	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1938 : 
; 1939 : //                          #endif
; 1940 : 
; 1941 :                             send_packet (received_id, PACKET_TYPE_GUNSHIP_REQUEST_ACCEPTED, (unsigned char *) &buffer, 4, SEND_TYPE_PERSONAL);

  02138	6a 00		 push	 0
  0213a	6a 04		 push	 4
  0213c	8d 85 24 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$16[ebp]
  02142	50		 push	 eax
  02143	6a 09		 push	 9
  02145	8b 4d d8	 mov	 ecx, DWORD PTR _received_id$[ebp]
  02148	51		 push	 ecx
  02149	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet

; 1942 : 
; 1943 :                             new_connection->gunship_number = pilot_data.gunship_index;

  0214e	8b 85 38 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$19[ebp]
  02154	8b 8d 34 f6 ff
	ff		 mov	 ecx, DWORD PTR _pilot_data$18[ebp+4]
  0215a	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 1944 : 
; 1945 :                             new_connection->gunship_entity = member;

  0215d	8b 85 38 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$19[ebp]
  02163	8b 4d d4	 mov	 ecx, DWORD PTR _member$[ebp]
  02166	89 48 30	 mov	 DWORD PTR [eax+48], ecx
$LN77@comms_proc:

; 1946 :                         }
; 1947 : 
; 1948 :                         break;

  02169	e9 f6 08 00 00	 jmp	 $LN8@comms_proc
$LN84@comms_proc:

; 1949 :                     }
; 1950 : 
; 1951 :                     case PACKET_TYPE_CLIENT_CAMPAIGN_DATA_REQUEST:
; 1952 :                     {
; 1953 : 
; 1954 :                         connection_list_type
; 1955 :                             *new_connection;
; 1956 : 
; 1957 :                         int
; 1958 :                             index_number;
; 1959 : 
; 1960 :                         if (get_comms_model () == COMMS_MODEL_SERVER)

  0216e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  02175	0f 85 05 02 00
	00		 jne	 $LN85@comms_proc

; 1961 :                         {
; 1962 : 
; 1963 :                             #if DEBUG_MODULE
; 1964 : 
; 1965 :                             if (this_connection->pilot_entity)
; 1966 :                             {
; 1967 : 
; 1968 :                                 debug_log ("COMMS MAN: RECEIVED JOIN REQUEST by %s (dpid %d)",
; 1969 :                                                 get_local_entity_string (this_connection->pilot_entity, STRING_TYPE_PILOTS_NAME),
; 1970 :                                                 received_id);
; 1971 :                             }
; 1972 :                             else
; 1973 :                             {
; 1974 : 
; 1975 :                                 debug_log ("COMMS MAN: received JOIN REQUEST by %d", received_id);
; 1976 :                             }
; 1977 : 
; 1978 :                             #endif
; 1979 : 
; 1980 : 
; 1981 :                             if (this_connection->pilot_entity)

  0217b	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  0217e	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  02182	0f 84 ad 00 00
	00		 je	 $LN86@comms_proc

; 1982 :                             {
; 1983 :                             	server_log ("%s is trying to join...", get_local_entity_string (this_connection->pilot_entity, STRING_TYPE_PILOTS_NAME));

  02188	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  0218b	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  0218f	74 10		 je	 SHORT $LN157@comms_proc
  02191	8b 4d f8	 mov	 ecx, DWORD PTR _this_connection$[ebp]
  02194	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  02197	8b 02		 mov	 eax, DWORD PTR [edx]
  02199	89 85 64 f4 ff
	ff		 mov	 DWORD PTR tv1297[ebp], eax
  0219f	eb 28		 jmp	 SHORT $LN158@comms_proc
$LN157@comms_proc:
  021a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  021a7	81 c1 78 05 00
	00		 add	 ecx, 1400		; 00000578H
  021ad	51		 push	 ecx
  021ae	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  021b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  021b9	52		 push	 edx
  021ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  021bf	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1297[ebp], 0
$LN158@comms_proc:
  021c9	b8 01 00 00 00	 mov	 eax, 1
  021ce	85 c0		 test	 eax, eax
  021d0	74 0c		 je	 SHORT $LN159@comms_proc
  021d2	c7 85 60 f4 ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv1305[ebp], 10 ; 0000000aH
  021dc	eb 28		 jmp	 SHORT $LN160@comms_proc
$LN159@comms_proc:
  021de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  021e4	81 c1 78 05 00
	00		 add	 ecx, 1400		; 00000578H
  021ea	51		 push	 ecx
  021eb	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  021f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  021f6	52		 push	 edx
  021f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  021fc	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1305[ebp], 0
$LN160@comms_proc:
  02206	6a 0a		 push	 10			; 0000000aH
  02208	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  0220b	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0220e	51		 push	 ecx
  0220f	6b 95 64 f4 ff
	ff 34		 imul	 edx, DWORD PTR tv1297[ebp], 52
  02216	8b 85 60 f4 ff
	ff		 mov	 eax, DWORD PTR tv1305[ebp]
  0221c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  02223	ff d1		 call	 ecx
  02225	50		 push	 eax
  02226	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OFBPPECD@?$CFs?5is?5trying?5to?5join?4?4?4@
  0222b	e8 00 00 00 00	 call	 ?server_log@@YAXPBDZZ	; server_log
  02230	83 c4 08	 add	 esp, 8

; 1984 :                            	}
; 1985 :                            	else

  02233	eb 11		 jmp	 SHORT $LN87@comms_proc
$LN86@comms_proc:

; 1986 :                            	{
; 1987 :                            		server_log ("Received join request...", received_id);

  02235	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  02238	50		 push	 eax
  02239	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IOKBKAHN@Received?5join?5request?4?4?4@
  0223e	e8 00 00 00 00	 call	 ?server_log@@YAXPBDZZ	; server_log
  02243	83 c4 08	 add	 esp, 8
$LN87@comms_proc:

; 1988 :                            	}
; 1989 :                            // Jabberwock 031118 ends
; 1990 : 
; 1991 :                             //
; 1992 :                             // flush group send buffer
; 1993 :                             //
; 1994 : 
; 1995 :                             send_comms_data ();

  02246	e8 00 00 00 00	 call	 ?send_comms_data@@YGXXZ	; send_comms_data

; 1996 : 
; 1997 :                             //
; 1998 :                             // pack mission data into packet
; 1999 :                             //
; 2000 : 
; 2001 :                             new_connection = get_connection_list_item (received_id);

  0224b	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  0224e	50		 push	 eax
  0224f	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  02254	89 85 20 f6 ff
	ff		 mov	 DWORD PTR _new_connection$15[ebp], eax
$LN18@comms_proc:

; 2002 : 
; 2003 :                             //
; 2004 :                             // Store entity data
; 2005 :                             //
; 2006 : 
; 2007 :                             while (pack_session (new_connection->connection_receive_buffer, &new_connection->connection_receive_buffer_size, PACK_MODE_CLIENT_SESSION))

  0225a	6a 01		 push	 1
  0225c	8b 85 20 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$15[ebp]
  02262	83 c0 1c	 add	 eax, 28			; 0000001cH
  02265	50		 push	 eax
  02266	8b 8d 20 f6 ff
	ff		 mov	 ecx, DWORD PTR _new_connection$15[ebp]
  0226c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0226f	52		 push	 edx
  02270	e8 00 00 00 00	 call	 ?pack_session@@YGHPAEPAHW4PACK_MODES@@@Z ; pack_session
  02275	85 c0		 test	 eax, eax
  02277	74 5b		 je	 SHORT $LN19@comms_proc

; 2008 :                             {
; 2009 : 
; 2010 :                                 new_connection->connection_receive_buffer_size *= 2;

  02279	8b 85 20 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$15[ebp]
  0227f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  02282	d1 e1		 shl	 ecx, 1
  02284	8b 95 20 f6 ff
	ff		 mov	 edx, DWORD PTR _new_connection$15[ebp]
  0228a	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 2011 : 
; 2012 :                                 #if DEBUG_MODULE
; 2013 : 
; 2014 :                                 debug_log ("COMMS MAN: Mission data: connection_receive_buffer too small, mallocing to %d", new_connection->connection_receive_buffer_size);
; 2015 : 
; 2016 :                                 #endif
; 2017 : 
; 2018 :                                 free_mem (new_connection->connection_receive_buffer);

  0228d	8b 85 20 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$15[ebp]
  02293	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  02296	51		 push	 ecx
  02297	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 2019 : 
; 2020 :                                 new_connection->connection_receive_buffer = (unsigned char *) malloc_heap_mem (new_connection->connection_receive_buffer_size);

  0229c	8b 85 20 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$15[ebp]
  022a2	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  022a5	51		 push	 ecx
  022a6	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  022ab	8b 95 20 f6 ff
	ff		 mov	 edx, DWORD PTR _new_connection$15[ebp]
  022b1	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 2021 : 
; 2022 :                                 memset (new_connection->connection_receive_buffer, 0, new_connection->connection_receive_buffer_size);

  022b4	8b 85 20 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$15[ebp]
  022ba	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  022bd	51		 push	 ecx
  022be	6a 00		 push	 0
  022c0	8b 95 20 f6 ff
	ff		 mov	 edx, DWORD PTR _new_connection$15[ebp]
  022c6	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  022c9	50		 push	 eax
  022ca	e8 00 00 00 00	 call	 _memset
  022cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :                             }

  022d2	eb 86		 jmp	 SHORT $LN18@comms_proc
$LN19@comms_proc:

; 2024 : 
; 2025 :                             // add frame id
; 2026 :                             index_number = get_group_frame_id ();

  022d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?send_group_frame_id@@3HA ; send_group_frame_id
  022d9	89 85 1c f6 ff
	ff		 mov	 DWORD PTR _index_number$14[ebp], eax

; 2027 :                             memcpy (&new_connection->connection_receive_buffer [new_connection->connection_receive_buffer_size], (void *) &index_number, sizeof (int));

  022df	6a 04		 push	 4
  022e1	8d 85 1c f6 ff
	ff		 lea	 eax, DWORD PTR _index_number$14[ebp]
  022e7	50		 push	 eax
  022e8	8b 8d 20 f6 ff
	ff		 mov	 ecx, DWORD PTR _new_connection$15[ebp]
  022ee	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  022f1	8b 85 20 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$15[ebp]
  022f7	03 50 1c	 add	 edx, DWORD PTR [eax+28]
  022fa	52		 push	 edx
  022fb	e8 00 00 00 00	 call	 _memcpy
  02300	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2028 :                             new_connection->connection_receive_buffer_size += sizeof (int);

  02303	8b 85 20 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$15[ebp]
  02309	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0230c	83 c1 04	 add	 ecx, 4
  0230f	8b 95 20 f6 ff
	ff		 mov	 edx, DWORD PTR _new_connection$15[ebp]
  02315	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 2029 : 
; 2030 :                             send_packet (received_id, PACKET_TYPE_MISSION_DATA, new_connection->connection_receive_buffer, new_connection->connection_receive_buffer_size, SEND_TYPE_PERSONAL);

  02318	6a 00		 push	 0
  0231a	8b 85 20 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$15[ebp]
  02320	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  02323	51		 push	 ecx
  02324	8b 95 20 f6 ff
	ff		 mov	 edx, DWORD PTR _new_connection$15[ebp]
  0232a	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0232d	50		 push	 eax
  0232e	6a 0a		 push	 10			; 0000000aH
  02330	8b 4d d8	 mov	 ecx, DWORD PTR _received_id$[ebp]
  02333	51		 push	 ecx
  02334	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet

; 2031 : 
; 2032 :                             memset (new_connection->connection_receive_buffer, 0, new_connection->connection_receive_buffer_size);

  02339	8b 85 20 f6 ff
	ff		 mov	 eax, DWORD PTR _new_connection$15[ebp]
  0233f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  02342	51		 push	 ecx
  02343	6a 00		 push	 0
  02345	8b 95 20 f6 ff
	ff		 mov	 edx, DWORD PTR _new_connection$15[ebp]
  0234b	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0234e	50		 push	 eax
  0234f	e8 00 00 00 00	 call	 _memset
  02354	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2033 : 
; 2034 :                             //
; 2035 :                             // send group frame id
; 2036 :                             //
; 2037 : 
; 2038 :                             Sleep (100);

  02357	6a 64		 push	 100			; 00000064H
  02359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2039 : 
; 2040 :                             index_number = get_group_frame_id ();

  0235f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?send_group_frame_id@@3HA ; send_group_frame_id
  02364	89 85 1c f6 ff
	ff		 mov	 DWORD PTR _index_number$14[ebp], eax

; 2041 : 
; 2042 :                             //send_packet (received_id, PACKET_TYPE_FRAME_ID, (void *) &index_number, 4, SEND_TYPE_PERSONAL);
; 2043 : 
; 2044 :                             zero_average_pack_size ();

  0236a	0f 57 c0	 xorps	 xmm0, xmm0
  0236d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?av_packet_size_sent@@3MA, xmm0
  02375	0f 57 c0	 xorps	 xmm0, xmm0
  02378	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?av_packet_size_received@@3MA, xmm0
$LN85@comms_proc:

; 2045 :                         }
; 2046 : 
; 2047 :                         break;

  02380	e9 df 06 00 00	 jmp	 $LN8@comms_proc
$LN88@comms_proc:

; 2048 :                     }
; 2049 : 
; 2050 :                     case PACKET_TYPE_CLIENT_FRAME_ID:
; 2051 :                     {
; 2052 : 
; 2053 :                         int
; 2054 :                             loop1,
; 2055 :                             loop2,
; 2056 :                             index_number;
; 2057 : 
; 2058 :                         stub_packet_type
; 2059 :                             *stub_packet;
; 2060 : 
; 2061 :                         connection_list_type
; 2062 :                             *new_connection;
; 2063 : 
; 2064 :                         index_number = get_list_item (received_data, int);

  02385	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  02388	83 c0 04	 add	 eax, 4
  0238b	89 45 f0	 mov	 DWORD PTR _received_data$[ebp], eax
  0238e	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  02391	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  02394	89 95 10 f6 ff
	ff		 mov	 DWORD PTR _index_number$11[ebp], edx

; 2065 : 
; 2066 :                         new_connection = get_connection_list_item (received_id);

  0239a	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  0239d	50		 push	 eax
  0239e	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  023a3	89 85 08 f6 ff
	ff		 mov	 DWORD PTR _new_connection$9[ebp], eax

; 2067 : 
; 2068 :                         //#if DEBUG_MODULE
; 2069 : 
; 2070 :                         if (new_connection)

  023a9	83 bd 08 f6 ff
	ff 00		 cmp	 DWORD PTR _new_connection$9[ebp], 0
  023b0	74 22		 je	 SHORT $LN89@comms_proc

; 2071 :                         {
; 2072 : 
; 2073 :                             debug_log ("COMMS MAN: received CLIENT FRAME ID (%d) by %d %s", index_number, received_id, direct_play_get_player_name (received_id));

  023b2	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  023b5	50		 push	 eax
  023b6	e8 00 00 00 00	 call	 ?direct_play_get_player_name@@YGPBDK@Z ; direct_play_get_player_name
  023bb	50		 push	 eax
  023bc	8b 4d d8	 mov	 ecx, DWORD PTR _received_id$[ebp]
  023bf	51		 push	 ecx
  023c0	8b 95 10 f6 ff
	ff		 mov	 edx, DWORD PTR _index_number$11[ebp]
  023c6	52		 push	 edx
  023c7	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HMPPMNAL@COMMS?5MAN?3?5received?5CLIENT?5FRAM@
  023cc	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  023d1	83 c4 10	 add	 esp, 16			; 00000010H
$LN89@comms_proc:

; 2074 :                         }
; 2075 : 
; 2076 :                         //#endif
; 2077 : 
; 2078 :                         //
; 2079 :                         // send all packets between when the client started to join and when it actually joined.
; 2080 :                         //
; 2081 : 
; 2082 :                         for (loop1 = index_number; loop1 < get_group_frame_id () - 1; loop1 ++)

  023d4	8b 85 10 f6 ff
	ff		 mov	 eax, DWORD PTR _index_number$11[ebp]
  023da	89 85 18 f6 ff
	ff		 mov	 DWORD PTR _loop1$13[ebp], eax
  023e0	eb 0f		 jmp	 SHORT $LN22@comms_proc
$LN20@comms_proc:
  023e2	8b 85 18 f6 ff
	ff		 mov	 eax, DWORD PTR _loop1$13[ebp]
  023e8	83 c0 01	 add	 eax, 1
  023eb	89 85 18 f6 ff
	ff		 mov	 DWORD PTR _loop1$13[ebp], eax
$LN22@comms_proc:
  023f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?send_group_frame_id@@3HA ; send_group_frame_id
  023f6	83 e8 01	 sub	 eax, 1
  023f9	39 85 18 f6 ff
	ff		 cmp	 DWORD PTR _loop1$13[ebp], eax
  023ff	0f 8d c4 00 00
	00		 jge	 $LN21@comms_proc

; 2083 :                         {
; 2084 : 
; 2085 :                             //#if DEBUG_MODULE
; 2086 : 
; 2087 :                             debug_log ("COMMS MAN: sending packet %d frame %d to recently joined client", loop1, 0);

  02405	6a 00		 push	 0
  02407	8b 85 18 f6 ff
	ff		 mov	 eax, DWORD PTR _loop1$13[ebp]
  0240d	50		 push	 eax
  0240e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@IHFEMGIH@COMMS?5MAN?3?5sending?5packet?5?$CFd?5fr@
  02413	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  02418	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2088 : 
; 2089 :                             //#endif
; 2090 : 
; 2091 :                             stub_packet = resend_packet (received_id, loop1, 1, SEND_TYPE_GROUP);

  0241b	6a 01		 push	 1
  0241d	6a 01		 push	 1
  0241f	8b 85 18 f6 ff
	ff		 mov	 eax, DWORD PTR _loop1$13[ebp]
  02425	50		 push	 eax
  02426	8b 4d d8	 mov	 ecx, DWORD PTR _received_id$[ebp]
  02429	51		 push	 ecx
  0242a	e8 00 00 00 00	 call	 ?resend_packet@@YGPAUSTUB_PACKET_TYPE@@KHHW4SEND_TYPES@@@Z ; resend_packet
  0242f	89 85 0c f6 ff
	ff		 mov	 DWORD PTR _stub_packet$10[ebp], eax

; 2092 : 
; 2093 :                             ASSERT (stub_packet);

  02435	83 bd 0c f6 ff
	ff 00		 cmp	 DWORD PTR _stub_packet$10[ebp], 0
  0243c	75 1a		 jne	 SHORT $LN90@comms_proc
  0243e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  02443	05 e6 05 00 00	 add	 eax, 1510		; 000005e6H
  02448	50		 push	 eax
  02449	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0244e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GPMMIJAD@stub_packet@
  02453	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN90@comms_proc:

; 2094 : 
; 2095 :                             for (loop2 = 2; loop2 <= stub_packet->packet->number_of_packets; loop2 ++)

  02458	c7 85 14 f6 ff
	ff 02 00 00 00	 mov	 DWORD PTR _loop2$12[ebp], 2
  02462	eb 0f		 jmp	 SHORT $LN25@comms_proc
$LN23@comms_proc:
  02464	8b 85 14 f6 ff
	ff		 mov	 eax, DWORD PTR _loop2$12[ebp]
  0246a	83 c0 01	 add	 eax, 1
  0246d	89 85 14 f6 ff
	ff		 mov	 DWORD PTR _loop2$12[ebp], eax
$LN25@comms_proc:
  02473	8b 85 0c f6 ff
	ff		 mov	 eax, DWORD PTR _stub_packet$10[ebp]
  02479	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0247c	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  02480	39 95 14 f6 ff
	ff		 cmp	 DWORD PTR _loop2$12[ebp], edx
  02486	7f 3c		 jg	 SHORT $LN24@comms_proc

; 2096 :                             {
; 2097 : 
; 2098 :                                 //#if DEBUG_MODULE
; 2099 : 
; 2100 :                                 debug_log ("COMMS MAN: sending packet %d frame %d to recently joined client", loop1, loop2);

  02488	8b 85 14 f6 ff
	ff		 mov	 eax, DWORD PTR _loop2$12[ebp]
  0248e	50		 push	 eax
  0248f	8b 8d 18 f6 ff
	ff		 mov	 ecx, DWORD PTR _loop1$13[ebp]
  02495	51		 push	 ecx
  02496	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@IHFEMGIH@COMMS?5MAN?3?5sending?5packet?5?$CFd?5fr@
  0249b	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  024a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2101 : 
; 2102 :                                 //#endif
; 2103 : 
; 2104 :                                 stub_packet = resend_packet (received_id, loop1, loop2, SEND_TYPE_GROUP);

  024a3	6a 01		 push	 1
  024a5	8b 85 14 f6 ff
	ff		 mov	 eax, DWORD PTR _loop2$12[ebp]
  024ab	50		 push	 eax
  024ac	8b 8d 18 f6 ff
	ff		 mov	 ecx, DWORD PTR _loop1$13[ebp]
  024b2	51		 push	 ecx
  024b3	8b 55 d8	 mov	 edx, DWORD PTR _received_id$[ebp]
  024b6	52		 push	 edx
  024b7	e8 00 00 00 00	 call	 ?resend_packet@@YGPAUSTUB_PACKET_TYPE@@KHHW4SEND_TYPES@@@Z ; resend_packet
  024bc	89 85 0c f6 ff
	ff		 mov	 DWORD PTR _stub_packet$10[ebp], eax

; 2105 :                             }

  024c2	eb a0		 jmp	 SHORT $LN23@comms_proc
$LN24@comms_proc:

; 2106 :                         }

  024c4	e9 19 ff ff ff	 jmp	 $LN20@comms_proc
$LN21@comms_proc:

; 2107 : 
; 2108 :                         break;

  024c9	e9 96 05 00 00	 jmp	 $LN8@comms_proc
$LN91@comms_proc:

; 2109 :                     }
; 2110 : 
; 2111 :                     case PACKET_TYPE_GUNSHIP_REQUEST_REFUSED:
; 2112 :                     {
; 2113 : 
; 2114 : //                      #if DEBUG_MODULE
; 2115 : 
; 2116 :                         debug_log ("COMMS MAN: Gunship refused");

  024ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DBIDLLAO@COMMS?5MAN?3?5Gunship?5refused@
  024d3	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  024d8	83 c4 04	 add	 esp, 4

; 2117 : 
; 2118 : //                      #endif
; 2119 : 
; 2120 :                         set_server_response (SERVER_RESPONSE_REFUSE);

  024db	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?server_response@@3W4SERVER_RESPONSE_TYPES@@A, 1 ; server_response

; 2121 : 
; 2122 :                         break;

  024e5	e9 7a 05 00 00	 jmp	 $LN8@comms_proc
$LN92@comms_proc:

; 2123 :                     }
; 2124 : 
; 2125 :                     case PACKET_TYPE_GUNSHIP_REQUEST_ACCEPTED:
; 2126 :                     {
; 2127 : 
; 2128 :                         entity
; 2129 :                             *gunship;
; 2130 : 
; 2131 :                         int
; 2132 :                             index_number;
; 2133 : 
; 2134 : //                      #if DEBUG_MODULE
; 2135 : 
; 2136 :                         debug_log ("COMMS MAN: received GUNSHIP ACCEPTED by %d", received_id);

  024ea	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  024ed	50		 push	 eax
  024ee	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@GBJMDJMJ@COMMS?5MAN?3?5received?5GUNSHIP?5ACC@
  024f3	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  024f8	83 c4 08	 add	 esp, 8

; 2137 : 
; 2138 : //                      #endif
; 2139 : 
; 2140 :                         //
; 2141 :                         // set gunship
; 2142 :                         //
; 2143 : 
; 2144 :                         index_number = get_list_item (received_data, int);

  024fb	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  024fe	83 c0 04	 add	 eax, 4
  02501	89 45 f0	 mov	 DWORD PTR _received_data$[ebp], eax
  02504	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  02507	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0250a	89 95 00 f6 ff
	ff		 mov	 DWORD PTR _index_number$7[ebp], edx

; 2145 : 
; 2146 :                         ASSERT (get_pilot_entity ());

  02510	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  02517	75 1a		 jne	 SHORT $LN93@comms_proc
  02519	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  0251e	05 1b 06 00 00	 add	 eax, 1563		; 0000061bH
  02523	50		 push	 eax
  02524	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  02529	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KOLCCDEB@get_pilot_entity?5?$CI?$CJ@
  0252e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN93@comms_proc:

; 2147 : 
; 2148 :                         gunship = get_local_entity_safe_ptr (index_number);

  02533	83 bd 00 f6 ff
	ff ff		 cmp	 DWORD PTR _index_number$7[ebp], -1
  0253a	74 17		 je	 SHORT $LN161@comms_proc
  0253c	8b 85 00 f6 ff
	ff		 mov	 eax, DWORD PTR _index_number$7[ebp]
  02542	c1 e0 04	 shl	 eax, 4
  02545	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  0254b	89 85 64 f4 ff
	ff		 mov	 DWORD PTR tv1415[ebp], eax
  02551	eb 0a		 jmp	 SHORT $LN162@comms_proc
$LN161@comms_proc:
  02553	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1415[ebp], 0
$LN162@comms_proc:
  0255d	8b 8d 64 f4 ff
	ff		 mov	 ecx, DWORD PTR tv1415[ebp]
  02563	89 8d 04 f6 ff
	ff		 mov	 DWORD PTR _gunship$8[ebp], ecx

; 2149 : 
; 2150 :                         debug_filtered_log ("COMM_MAN: setting gunship");

  02569	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@OOCPIHGJ@COMM_MAN?3?5setting?5gunship@
  0256e	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  02573	83 c4 04	 add	 esp, 4

; 2151 : 
; 2152 :                         planner_event = FALSE;

  02576	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _planner_event$[ebp], 0

; 2153 : 
; 2154 :                         if (get_event_stack_head_function() == ingame_screen_set_events)

  0257d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  02582	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET ?ingame_screen_set_events@@YGXXZ ; ingame_screen_set_events
  02589	75 11		 jne	 SHORT $LN94@comms_proc

; 2155 :                         {
; 2156 : 
; 2157 :                             pop_event (ingame_screen_set_events);

  0258b	68 00 00 00 00	 push	 OFFSET ?ingame_screen_set_events@@YGXXZ ; ingame_screen_set_events
  02590	e8 00 00 00 00	 call	 ?pop_event@@YGXP6GXXZ@Z	; pop_event

; 2158 : 
; 2159 :                             planner_event = TRUE;

  02595	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _planner_event$[ebp], 1
$LN94@comms_proc:

; 2160 :                         }
; 2161 : 
; 2162 :                         assign_entity_to_user (gunship);

  0259c	8b 85 04 f6 ff
	ff		 mov	 eax, DWORD PTR _gunship$8[ebp]
  025a2	50		 push	 eax
  025a3	e8 00 00 00 00	 call	 ?assign_entity_to_user@@YGXPAUENTITY@@@Z ; assign_entity_to_user

; 2163 : 
; 2164 :                         if (planner_event)

  025a8	83 7d ec 00	 cmp	 DWORD PTR _planner_event$[ebp], 0
  025ac	74 0f		 je	 SHORT $LN95@comms_proc

; 2165 :                         {
; 2166 : 
; 2167 :                             push_event (ingame_screen_set_events, "ingame screen events");

  025ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JNEDHLHL@ingame?5screen?5events@
  025b3	68 00 00 00 00	 push	 OFFSET ?ingame_screen_set_events@@YGXXZ ; ingame_screen_set_events
  025b8	e8 00 00 00 00	 call	 ?push_event@@YGXP6GXXZPBD@Z ; push_event
$LN95@comms_proc:

; 2168 :                         }
; 2169 : 
; 2170 :                         debug_filtered_log ("COMM_MAN: gunship set");

  025bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NLIPNNPH@COMM_MAN?3?5gunship?5set@
  025c2	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  025c7	83 c4 04	 add	 esp, 4

; 2171 : 
; 2172 :                         ////////////////////////////////////////////////////////////////////////
; 2173 : 
; 2174 :                         break;

  025ca	e9 95 04 00 00	 jmp	 $LN8@comms_proc
$LN96@comms_proc:

; 2175 :                     }
; 2176 : 
; 2177 :                     case PACKET_TYPE_PILOT_REQUEST_ACCEPTED:
; 2178 :                     {
; 2179 : 
; 2180 :                         int
; 2181 :                             index_number;
; 2182 : 
; 2183 :                         ASSERT (get_comms_model () == COMMS_MODEL_CLIENT);

  025cf	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 1 ; system_comms_model
  025d6	74 1a		 je	 SHORT $LN97@comms_proc
  025d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  025dd	05 40 06 00 00	 add	 eax, 1600		; 00000640H
  025e2	50		 push	 eax
  025e3	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  025e8	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@HDFJMCJJ@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  025ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN97@comms_proc:

; 2184 : 
; 2185 : //                      #if DEBUG_MODULE
; 2186 : 
; 2187 :                         debug_log ("COMMS MAN: received PILOT ACCEPTED by %d", received_id);

  025f2	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  025f5	50		 push	 eax
  025f6	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@MECBGBBM@COMMS?5MAN?3?5received?5PILOT?5ACCEP@
  025fb	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  02600	83 c4 08	 add	 esp, 8

; 2188 : 
; 2189 : //                      #endif
; 2190 : 
; 2191 :                         index_number = get_list_item (received_data, int);

  02603	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  02606	83 c0 04	 add	 eax, 4
  02609	89 45 f0	 mov	 DWORD PTR _received_data$[ebp], eax
  0260c	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  0260f	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  02612	89 95 fc f5 ff
	ff		 mov	 DWORD PTR _index_number$6[ebp], edx

; 2192 : 
; 2193 :                         set_pilot_entity (get_local_entity_safe_ptr (index_number));

  02618	83 bd fc f5 ff
	ff ff		 cmp	 DWORD PTR _index_number$6[ebp], -1
  0261f	74 17		 je	 SHORT $LN163@comms_proc
  02621	8b 85 fc f5 ff
	ff		 mov	 eax, DWORD PTR _index_number$6[ebp]
  02627	c1 e0 04	 shl	 eax, 4
  0262a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  02630	89 85 64 f4 ff
	ff		 mov	 DWORD PTR tv1437[ebp], eax
  02636	eb 0a		 jmp	 SHORT $LN164@comms_proc
$LN163@comms_proc:
  02638	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1437[ebp], 0
$LN164@comms_proc:
  02642	8b 8d 64 f4 ff
	ff		 mov	 ecx, DWORD PTR tv1437[ebp]
  02648	51		 push	 ecx
  02649	e8 00 00 00 00	 call	 ?set_pilot_entity@@YGXPAUENTITY@@@Z ; set_pilot_entity

; 2194 : 
; 2195 :                         break;

  0264e	e9 11 04 00 00	 jmp	 $LN8@comms_proc
$LN98@comms_proc:

; 2196 :                     }
; 2197 : 
; 2198 :                     case PACKET_TYPE_MISSION_DATA:
; 2199 :                     {
; 2200 : 
; 2201 :                         #if DEBUG_MODULE
; 2202 : 
; 2203 :                         debug_log ("COMMS MAN: received MISSION DATA by %d", received_id);
; 2204 : 
; 2205 :                         #endif
; 2206 : 
; 2207 :                         set_mouse_graphic_off ();

  02653	e8 00 00 00 00	 call	 ?set_mouse_graphic_off@@YGXXZ ; set_mouse_graphic_off

; 2208 : 
; 2209 :                         //
; 2210 :                         // LOAD TERRAIN DATA
; 2211 :                         //
; 2212 : 
; 2213 :                         load_3d_terrain_game_data ();

  02658	e8 00 00 00 00	 call	 ?load_3d_terrain_game_data@@YGXXZ ; load_3d_terrain_game_data

; 2214 : 
; 2215 :                         initialise_population_name_database ();

  0265d	e8 00 00 00 00	 call	 ?initialise_population_name_database@@YGXXZ ; initialise_population_name_database

; 2216 : 
; 2217 :                         load_route_data (); // might need to send what route filename to load...

  02662	e8 00 00 00 00	 call	 ?load_route_data@@YGXXZ	; load_route_data

; 2218 : 
; 2219 :                         //
; 2220 :                         // Initialise stuff
; 2221 :                         //
; 2222 : 
; 2223 :                         create_local_only_entities (PACK_MODE_CLIENT_SESSION);

  02667	6a 01		 push	 1
  02669	e8 00 00 00 00	 call	 ?create_local_only_entities@@YGXW4PACK_MODES@@@Z ; create_local_only_entities

; 2224 : 
; 2225 :                         /////////////////////////////////////////////////////////////////
; 2226 :                         if (strstr (strupr (side_data_filename), "SID"))

  0266e	68 00 00 00 00	 push	 OFFSET ??_C@_03OMFNLMOB@SID@
  02673	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_data_filename@@3PADA ; side_data_filename
  02678	50		 push	 eax
  02679	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strupr
  0267f	83 c4 04	 add	 esp, 4
  02682	50		 push	 eax
  02683	e8 00 00 00 00	 call	 ?strstr@@YAPADQADQBD@Z	; strstr
  02688	83 c4 08	 add	 esp, 8
  0268b	85 c0		 test	 eax, eax
  0268d	74 0d		 je	 SHORT $LN99@comms_proc

; 2227 :                         {
; 2228 : 
; 2229 :                             read_sector_side_file (side_data_filename);

  0268f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_data_filename@@3PADA ; side_data_filename
  02694	50		 push	 eax
  02695	e8 00 00 00 00	 call	 ?read_sector_side_file@@YGXPBD@Z ; read_sector_side_file
  0269a	eb 2c		 jmp	 SHORT $LN101@comms_proc
$LN99@comms_proc:

; 2230 :                         }
; 2231 :                         else if (strstr (strupr (side_data_filename), "DAT"))

  0269c	68 00 00 00 00	 push	 OFFSET ??_C@_03GFECJACO@DAT@
  026a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_data_filename@@3PADA ; side_data_filename
  026a6	50		 push	 eax
  026a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strupr
  026ad	83 c4 04	 add	 esp, 4
  026b0	50		 push	 eax
  026b1	e8 00 00 00 00	 call	 ?strstr@@YAPADQADQBD@Z	; strstr
  026b6	83 c4 08	 add	 esp, 8
  026b9	85 c0		 test	 eax, eax
  026bb	74 0b		 je	 SHORT $LN101@comms_proc

; 2232 :                         {
; 2233 : 
; 2234 :                             load_ai_sector_data (side_data_filename);

  026bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_data_filename@@3PADA ; side_data_filename
  026c2	50		 push	 eax
  026c3	e8 00 00 00 00	 call	 ?load_ai_sector_data@@YGXPBD@Z ; load_ai_sector_data
$LN101@comms_proc:

; 2235 :                         }
; 2236 :                         /////////////////////////////////////////////////////////////////
; 2237 : 
; 2238 :                         deinitialise_formation_database ();

  026c8	e8 00 00 00 00	 call	 ?deinitialise_formation_database@@YGXXZ ; deinitialise_formation_database

; 2239 : 
; 2240 :                         initialise_formation_database ();

  026cd	e8 00 00 00 00	 call	 ?initialise_formation_database@@YGXXZ ; initialise_formation_database

; 2241 : 
; 2242 :                         deinitialise_formation_component_database ();

  026d2	e8 00 00 00 00	 call	 ?deinitialise_formation_component_database@@YGXXZ ; deinitialise_formation_component_database

; 2243 : 
; 2244 :                         initialise_formation_component_database ();

  026d7	e8 00 00 00 00	 call	 ?initialise_formation_component_database@@YGXXZ ; initialise_formation_component_database

; 2245 : 
; 2246 :                         if (unpack_session (received_data, received_size - 4, PACK_MODE_CLIENT_SESSION))

  026dc	6a 01		 push	 1
  026de	8b 45 dc	 mov	 eax, DWORD PTR _received_size$[ebp]
  026e1	83 e8 04	 sub	 eax, 4
  026e4	50		 push	 eax
  026e5	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  026e8	51		 push	 ecx
  026e9	e8 00 00 00 00	 call	 ?unpack_session@@YGHPAEHW4PACK_MODES@@@Z ; unpack_session
  026ee	85 c0		 test	 eax, eax
  026f0	74 1b		 je	 SHORT $LN102@comms_proc

; 2247 :                         {
; 2248 : 
; 2249 :                             debug_log ("COMMS MAN: received size overflow");

  026f2	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@JFDEIDNB@COMMS?5MAN?3?5received?5size?5overfl@
  026f7	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  026fc	83 c4 04	 add	 esp, 4

; 2250 : 							start_game_exit (GAME_EXIT_KICKOUT, FALSE);

  026ff	6a 00		 push	 0
  02701	6a 06		 push	 6
  02703	e8 00 00 00 00	 call	 ?start_game_exit@@YGXW4GAME_EXIT_TYPES@@H@Z ; start_game_exit

; 2251 : 							break;

  02708	e9 57 03 00 00	 jmp	 $LN8@comms_proc
$LN102@comms_proc:

; 2252 :                         }
; 2253 : /*
; 2254 :                         force = get_local_entity_first_child (get_session_entity (), LIST_TYPE_FORCE);
; 2255 : 
; 2256 :                         while (force)
; 2257 :                         {
; 2258 : 
; 2259 :                             create_frontline (force);
; 2260 : 
; 2261 :                             force = get_local_entity_child_succ (force, LIST_TYPE_FORCE);
; 2262 :                         }
; 2263 : 
; 2264 : */
; 2265 :                         {
; 2266 :                             int
; 2267 :                                 index_number;
; 2268 : 
; 2269 :                             connection_list_type
; 2270 :                                 *new_connection;
; 2271 : 
; 2272 :                             received_data += received_size - 4;

  0270d	8b 45 dc	 mov	 eax, DWORD PTR _received_size$[ebp]
  02710	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  02713	8d 54 01 fc	 lea	 edx, DWORD PTR [ecx+eax-4]
  02717	89 55 f0	 mov	 DWORD PTR _received_data$[ebp], edx

; 2273 :                             index_number = get_list_item (received_data, int);

  0271a	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  0271d	83 c0 04	 add	 eax, 4
  02720	89 45 f0	 mov	 DWORD PTR _received_data$[ebp], eax
  02723	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  02726	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  02729	89 95 f8 f5 ff
	ff		 mov	 DWORD PTR _index_number$5[ebp], edx

; 2274 : 
; 2275 :                             new_connection = get_connection_list_item (received_id);

  0272f	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  02732	50		 push	 eax
  02733	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  02738	89 85 f4 f5 ff
	ff		 mov	 DWORD PTR _new_connection$4[ebp], eax

; 2276 : 
; 2277 :                             new_connection->receive_group_frame_id = index_number;

  0273e	8b 85 f4 f5 ff
	ff		 mov	 eax, DWORD PTR _new_connection$4[ebp]
  02744	8b 8d f8 f5 ff
	ff		 mov	 ecx, DWORD PTR _index_number$5[ebp]
  0274a	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2278 : 
; 2279 :                             send_packet (get_server_id (), PACKET_TYPE_CLIENT_FRAME_ID, (unsigned char *) &index_number, 4, SEND_TYPE_PERSONAL);

  0274d	6a 00		 push	 0
  0274f	6a 04		 push	 4
  02751	8d 85 f8 f5 ff
	ff		 lea	 eax, DWORD PTR _index_number$5[ebp]
  02757	50		 push	 eax
  02758	6a 0c		 push	 12			; 0000000cH
  0275a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?system_server_id@@3KA ; system_server_id
  02760	51		 push	 ecx
  02761	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet

; 2280 :                         }
; 2281 : 
; 2282 :                         session_data = TRUE;

  02766	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?session_data@@3EA, 1

; 2283 : 
; 2284 :                         //direct_play_join_group (); // Jabberwock 050303 Remove DP groups
; 2285 : 
; 2286 :                         set_gunship_waiting_for_connection ( FALSE );

  0276d	6a 00		 push	 0
  0276f	e8 00 00 00 00	 call	 ?set_gunship_waiting_for_connection@@YGXH@Z ; set_gunship_waiting_for_connection

; 2287 : 
; 2288 :                         zero_average_pack_size ();

  02774	0f 57 c0	 xorps	 xmm0, xmm0
  02777	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?av_packet_size_sent@@3MA, xmm0
  0277f	0f 57 c0	 xorps	 xmm0, xmm0
  02782	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?av_packet_size_received@@3MA, xmm0

; 2289 : 
; 2290 :                         set_mouse_graphic_on ();

  0278a	e8 00 00 00 00	 call	 ?set_mouse_graphic_on@@YGXXZ ; set_mouse_graphic_on

; 2291 : 
; 2292 :                         break;

  0278f	e9 d0 02 00 00	 jmp	 $LN8@comms_proc
$LN103@comms_proc:

; 2293 :                     }
; 2294 : 
; 2295 :                     case PACKET_TYPE_FRAME_ID:
; 2296 :                     {
; 2297 : 
; 2298 :                         int
; 2299 :                             index_number;
; 2300 : 
; 2301 :                         connection_list_type
; 2302 :                             *new_connection;
; 2303 : 
; 2304 :                         index_number = get_list_item (received_data, int);

  02794	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  02797	83 c0 04	 add	 eax, 4
  0279a	89 45 f0	 mov	 DWORD PTR _received_data$[ebp], eax
  0279d	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  027a0	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  027a3	89 95 f0 f5 ff
	ff		 mov	 DWORD PTR _index_number$3[ebp], edx

; 2305 : 
; 2306 :                         #if DEBUG_MODULE
; 2307 : 
; 2308 :                         debug_log ("COMMS MAN: received FRAME ID (%d) by %d", index_number, received_id);
; 2309 : 
; 2310 :                         #endif
; 2311 : 
; 2312 :                         new_connection = get_connection_list_item (received_id);

  027a9	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  027ac	50		 push	 eax
  027ad	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  027b2	89 85 ec f5 ff
	ff		 mov	 DWORD PTR _new_connection$2[ebp], eax

; 2313 : 
; 2314 :                         new_connection->receive_group_frame_id = index_number;

  027b8	8b 85 ec f5 ff
	ff		 mov	 eax, DWORD PTR _new_connection$2[ebp]
  027be	8b 8d f0 f5 ff
	ff		 mov	 ecx, DWORD PTR _index_number$3[ebp]
  027c4	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2315 : 
; 2316 :                         send_packet (get_server_id (), PACKET_TYPE_CLIENT_FRAME_ID, (unsigned char *) &index_number, 4, SEND_TYPE_PERSONAL);

  027c7	6a 00		 push	 0
  027c9	6a 04		 push	 4
  027cb	8d 85 f0 f5 ff
	ff		 lea	 eax, DWORD PTR _index_number$3[ebp]
  027d1	50		 push	 eax
  027d2	6a 0c		 push	 12			; 0000000cH
  027d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?system_server_id@@3KA ; system_server_id
  027da	51		 push	 ecx
  027db	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet

; 2317 : 
; 2318 :                         break;

  027e0	e9 7f 02 00 00	 jmp	 $LN8@comms_proc
$LN104@comms_proc:

; 2319 :                     }
; 2320 : 
; 2321 :                     ///////////////////////////////////////////////////////////////////////////////////////////////
; 2322 :                     //
; 2323 :                     // In game packets
; 2324 :                     //
; 2325 :                     ///////////////////////////////////////////////////////////////////////////////////////////////
; 2326 : 
; 2327 :                     case PACKET_TYPE_AI_DATA:
; 2328 :                     {
; 2329 : 
; 2330 :                         int
; 2331 :                             //padding,
; 2332 :                             data_size;
; 2333 : 
; 2334 :                         #if DEBUG_MODULE >= 2
; 2335 : 
; 2336 :                         debug_log ("COMMS MAN: received AI DATA by %d", received_id);
; 2337 : 
; 2338 :                         #endif
; 2339 : 
; 2340 :                         if (get_comms_model () == COMMS_MODEL_CLIENT)

  027e5	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 1 ; system_comms_model
  027ec	75 25		 jne	 SHORT $LN106@comms_proc

; 2341 :                         {
; 2342 : 
; 2343 :                             ASSERT (session_data);

  027ee	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?session_data@@3EA
  027f5	85 c0		 test	 eax, eax
  027f7	75 1a		 jne	 SHORT $LN106@comms_proc
  027f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  027fe	05 e0 06 00 00	 add	 eax, 1760		; 000006e0H
  02803	50		 push	 eax
  02804	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  02809	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CCJGGLLF@session_data@
  0280e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN106@comms_proc:

; 2344 :                         }
; 2345 : 
; 2346 :                         data_size = get_list_item (received_data, int);

  02813	8b 45 f0	 mov	 eax, DWORD PTR _received_data$[ebp]
  02816	83 c0 04	 add	 eax, 4
  02819	89 45 f0	 mov	 DWORD PTR _received_data$[ebp], eax
  0281c	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  0281f	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  02822	89 95 e8 f5 ff
	ff		 mov	 DWORD PTR _data_size$1[ebp], edx

; 2347 : 
; 2348 :                         //debug
; 2349 :                         //padding = get_list_item (received_data, int);
; 2350 :                         //end
; 2351 : 
; 2352 :                         open_unpack_buffer (received_data, received_size);

  02828	8b 45 dc	 mov	 eax, DWORD PTR _received_size$[ebp]
  0282b	50		 push	 eax
  0282c	8b 4d f0	 mov	 ecx, DWORD PTR _received_data$[ebp]
  0282f	51		 push	 ecx
  02830	e8 00 00 00 00	 call	 ?open_unpack_buffer@@YGXPAEH@Z ; open_unpack_buffer

; 2353 : 
; 2354 :                         process_received_entity_comms_messages ();

  02835	e8 00 00 00 00	 call	 ?process_received_entity_comms_messages@@YGXXZ ; process_received_entity_comms_messages

; 2355 : 
; 2356 :                         ASSERT (!get_unpack_buffer_overflow ());

  0283a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_unpack_buffer@@3PAUUNPACK_BUFFER@@A ; current_unpack_buffer
  0283f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  02843	74 1a		 je	 SHORT $LN107@comms_proc
  02845	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  0284a	05 ed 06 00 00	 add	 eax, 1773		; 000006edH
  0284f	50		 push	 eax
  02850	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  02855	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BOGKLLAF@?$CBget_unpack_buffer_overflow?5?$CI?$CJ@
  0285a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN107@comms_proc:

; 2357 : 
; 2358 :                         close_unpack_buffer ();

  0285f	e8 00 00 00 00	 call	 ?close_unpack_buffer@@YGXXZ ; close_unpack_buffer

; 2359 : 
; 2360 :                         //debug
; 2361 :                         //padding = get_list_item (received_data, int);
; 2362 :                         //end
; 2363 : 
; 2364 :                         memset (received_data, 0, this_connection->connection_receive_buffer_size);

  02864	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  02867	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0286a	51		 push	 ecx
  0286b	6a 00		 push	 0
  0286d	8b 55 f0	 mov	 edx, DWORD PTR _received_data$[ebp]
  02870	52		 push	 edx
  02871	e8 00 00 00 00	 call	 _memset
  02876	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2365 : 
; 2366 :                         break;

  02879	e9 e6 01 00 00	 jmp	 $LN8@comms_proc
$LN108@comms_proc:

; 2367 :                     }
; 2368 : 
; 2369 :                     case PACKET_TYPE_END_GAME:
; 2370 :                     {
; 2371 : 
; 2372 :                         debug_log ("COMMS MAN: received END GAME from %d", received_id);

  0287e	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  02881	50		 push	 eax
  02882	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DFDJEAKO@COMMS?5MAN?3?5received?5END?5GAME?5fr@
  02887	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0288c	83 c4 08	 add	 esp, 8

; 2373 : 
; 2374 :                         if (get_comms_model () == COMMS_MODEL_SERVER)

  0288f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  02896	0f 85 7e 01 00
	00		 jne	 $LN109@comms_proc

; 2375 :                         {
; 2376 :                             if (this_connection->gunship_entity)

  0289c	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  0289f	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  028a3	0f 84 ae 00 00
	00		 je	 $LN111@comms_proc

; 2377 :                             {
; 2378 : 
; 2379 :                                 set_client_server_entity_int_value (this_connection->gunship_entity, INT_TYPE_PLAYER, ENTITY_PLAYER_AI);

  028a9	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  028ac	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  028b0	74 10		 je	 SHORT $LN165@comms_proc
  028b2	8b 4d f8	 mov	 ecx, DWORD PTR _this_connection$[ebp]
  028b5	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  028b8	8b 02		 mov	 eax, DWORD PTR [edx]
  028ba	89 85 64 f4 ff
	ff		 mov	 DWORD PTR tv1552[ebp], eax
  028c0	eb 28		 jmp	 SHORT $LN166@comms_proc
$LN165@comms_proc:
  028c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  028c8	81 c1 04 07 00
	00		 add	 ecx, 1796		; 00000704H
  028ce	51		 push	 ecx
  028cf	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  028d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  028da	52		 push	 edx
  028db	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  028e0	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1552[ebp], 0
$LN166@comms_proc:
  028ea	b8 01 00 00 00	 mov	 eax, 1
  028ef	85 c0		 test	 eax, eax
  028f1	74 0c		 je	 SHORT $LN167@comms_proc
  028f3	c7 85 60 f4 ff
	ff 9c 00 00 00	 mov	 DWORD PTR tv1560[ebp], 156 ; 0000009cH
  028fd	eb 28		 jmp	 SHORT $LN168@comms_proc
$LN167@comms_proc:
  028ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  02905	81 c1 04 07 00
	00		 add	 ecx, 1796		; 00000704H
  0290b	51		 push	 ecx
  0290c	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  02911	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  02917	52		 push	 edx
  02918	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0291d	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1560[ebp], 0
$LN168@comms_proc:
  02927	6a 00		 push	 0
  02929	68 9c 00 00 00	 push	 156			; 0000009cH
  0292e	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  02931	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  02934	51		 push	 ecx
  02935	69 95 64 f4 ff
	ff b8 08 00 00	 imul	 edx, DWORD PTR tv1552[ebp], 2232
  0293f	8b 85 60 f4 ff
	ff		 mov	 eax, DWORD PTR tv1560[ebp]
  02945	8d 8c c2 00 00
	00 00		 lea	 ecx, DWORD PTR ?fn_set_client_server_entity_int_value@@3PAY1BBH@1P6GXPAUENTITY@@W4INT_TYPES@@H@ZA[edx+eax*8]
  0294c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  02952	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  02955	ff d0		 call	 eax
$LN111@comms_proc:

; 2380 :                             }
; 2381 : 
; 2382 :                             if (this_connection->pilot_entity)

  02957	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  0295a	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  0295e	0f 84 ab 00 00
	00		 je	 $LN112@comms_proc

; 2383 :                             {
; 2384 : 
; 2385 :                                 debug_log ("    from %s ", get_local_entity_string (this_connection->pilot_entity, STRING_TYPE_PILOTS_NAME));

  02964	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  02967	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  0296b	74 10		 je	 SHORT $LN169@comms_proc
  0296d	8b 4d f8	 mov	 ecx, DWORD PTR _this_connection$[ebp]
  02970	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  02973	8b 02		 mov	 eax, DWORD PTR [edx]
  02975	89 85 64 f4 ff
	ff		 mov	 DWORD PTR tv1579[ebp], eax
  0297b	eb 28		 jmp	 SHORT $LN170@comms_proc
$LN169@comms_proc:
  0297d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  02983	81 c1 0a 07 00
	00		 add	 ecx, 1802		; 0000070aH
  02989	51		 push	 ecx
  0298a	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0298f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02995	52		 push	 edx
  02996	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0299b	c7 85 64 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1579[ebp], 0
$LN170@comms_proc:
  029a5	b8 01 00 00 00	 mov	 eax, 1
  029aa	85 c0		 test	 eax, eax
  029ac	74 0c		 je	 SHORT $LN171@comms_proc
  029ae	c7 85 60 f4 ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv1587[ebp], 10 ; 0000000aH
  029b8	eb 28		 jmp	 SHORT $LN172@comms_proc
$LN171@comms_proc:
  029ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??comms_process_data@@YGXXZ@4JA
  029c0	81 c1 0a 07 00
	00		 add	 ecx, 1802		; 0000070aH
  029c6	51		 push	 ecx
  029c7	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  029cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  029d2	52		 push	 edx
  029d3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  029d8	c7 85 60 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1587[ebp], 0
$LN172@comms_proc:
  029e2	6a 0a		 push	 10			; 0000000aH
  029e4	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  029e7	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  029ea	51		 push	 ecx
  029eb	6b 95 64 f4 ff
	ff 34		 imul	 edx, DWORD PTR tv1579[ebp], 52
  029f2	8b 85 60 f4 ff
	ff		 mov	 eax, DWORD PTR tv1587[ebp]
  029f8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  029ff	ff d1		 call	 ecx
  02a01	50		 push	 eax
  02a02	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PIDGJJP@?5?5?5?5from?5?$CFs?5@
  02a07	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  02a0c	83 c4 08	 add	 esp, 8
$LN112@comms_proc:

; 2386 :                             }
; 2387 : 
; 2388 :                             unregister_connection (received_id);

  02a0f	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  02a12	50		 push	 eax
  02a13	e8 00 00 00 00	 call	 ?unregister_connection@@YGXK@Z ; unregister_connection

; 2389 :                         }
; 2390 :                         else

  02a18	eb 14		 jmp	 SHORT $LN113@comms_proc
$LN109@comms_proc:

; 2391 :                         {
; 2392 : 
; 2393 :                             if (received_id == get_server_id ())

  02a1a	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  02a1d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?system_server_id@@3KA ; system_server_id
  02a23	75 09		 jne	 SHORT $LN113@comms_proc

; 2394 :                             {
; 2395 : 
; 2396 :                                 //setup_campaign_over_screen (get_local_force_entity (get_global_gunship_side ()), CAMPAIGN_RESULT_STALEMATE);
; 2397 : 
; 2398 :                                 start_game_exit (GAME_EXIT_KICKOUT, FALSE);

  02a25	6a 00		 push	 0
  02a27	6a 06		 push	 6
  02a29	e8 00 00 00 00	 call	 ?start_game_exit@@YGXW4GAME_EXIT_TYPES@@H@Z ; start_game_exit
$LN113@comms_proc:

; 2399 :                             }
; 2400 :                         }
; 2401 : 
; 2402 :                         receive_flag = FALSE;

  02a2e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _receive_flag$[ebp], 0

; 2403 : 
; 2404 :                         break;

  02a35	eb 2d		 jmp	 SHORT $LN8@comms_proc
$LN114@comms_proc:

; 2405 :                     }
; 2406 : 
; 2407 :                     case PACKET_TYPE_SERVER_REJECTED:
; 2408 :                     {
; 2409 : 
; 2410 :                         debug_log ("COMMS MAN: received SERVER REJECTED (server id %d)", received_id);

  02a37	8b 45 d8	 mov	 eax, DWORD PTR _received_id$[ebp]
  02a3a	50		 push	 eax
  02a3b	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@LDALAFJ@COMMS?5MAN?3?5received?5SERVER?5REJE@
  02a40	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  02a45	83 c4 08	 add	 esp, 8

; 2411 : 
; 2412 :                         //setup_campaign_over_screen (get_local_force_entity (get_global_gunship_side ()), CAMPAIGN_RESULT_SERVER_REJECTED);
; 2413 : 
; 2414 :                         start_game_exit (GAME_EXIT_KICKOUT, FALSE);

  02a48	6a 00		 push	 0
  02a4a	6a 06		 push	 6
  02a4c	e8 00 00 00 00	 call	 ?start_game_exit@@YGXW4GAME_EXIT_TYPES@@H@Z ; start_game_exit

; 2415 : 
; 2416 :                         break;

  02a51	eb 11		 jmp	 SHORT $LN8@comms_proc
$LN115@comms_proc:

; 2417 :                     }
; 2418 : 
; 2419 :                     default:
; 2420 :                     {
; 2421 : 
; 2422 :                         debug_log ("ERROR: Data Exchange, unknown packet type %d", type); //schorpp "trying ignore, kickout would open door for dos-attacks"

  02a53	8b 45 cc	 mov	 eax, DWORD PTR _type$[ebp]
  02a56	50		 push	 eax
  02a57	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@KFJNHJLN@ERROR?3?5Data?5Exchange?0?5unknown?5p@
  02a5c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  02a61	83 c4 08	 add	 esp, 8
$LN8@comms_proc:

; 2423 : 
; 2424 :                         break;
; 2425 :                     }
; 2426 :                 }
; 2427 :             }

  02a64	e9 f2 d5 ff ff	 jmp	 $LN6@comms_proc
$LN7@comms_proc:

; 2428 : 
; 2429 :             send_type = (send_types) ((int) send_type - 1);

  02a69	8b 45 d0	 mov	 eax, DWORD PTR _send_type$[ebp]
  02a6c	83 e8 01	 sub	 eax, 1
  02a6f	89 45 d0	 mov	 DWORD PTR _send_type$[ebp], eax

; 2430 :         }

  02a72	e9 d3 d5 ff ff	 jmp	 $LN4@comms_proc
$LN5@comms_proc:

; 2431 :     }

  02a77	e9 ae d5 ff ff	 jmp	 $LN2@comms_proc
$LN3@comms_proc:

; 2432 : }

  02a7c	5f		 pop	 edi
  02a7d	5e		 pop	 esi
  02a7e	5b		 pop	 ebx
  02a7f	8b e5		 mov	 esp, ebp
  02a81	5d		 pop	 ebp
  02a82	c3		 ret	 0
  02a83	90		 npad	 1
$LN173@comms_proc:
  02a84	00 00 00 00	 DD	 $LN26@comms_proc
  02a88	00 00 00 00	 DD	 $LN115@comms_proc
  02a8c	00 00 00 00	 DD	 $LN29@comms_proc
  02a90	00 00 00 00	 DD	 $LN54@comms_proc
  02a94	00 00 00 00	 DD	 $LN73@comms_proc
  02a98	00 00 00 00	 DD	 $LN76@comms_proc
  02a9c	00 00 00 00	 DD	 $LN84@comms_proc
  02aa0	00 00 00 00	 DD	 $LN96@comms_proc
  02aa4	00 00 00 00	 DD	 $LN91@comms_proc
  02aa8	00 00 00 00	 DD	 $LN92@comms_proc
  02aac	00 00 00 00	 DD	 $LN98@comms_proc
  02ab0	00 00 00 00	 DD	 $LN103@comms_proc
  02ab4	00 00 00 00	 DD	 $LN88@comms_proc
  02ab8	00 00 00 00	 DD	 $LN114@comms_proc
  02abc	00 00 00 00	 DD	 $LN108@comms_proc
  02ac0	00 00 00 00	 DD	 $LN52@comms_proc
  02ac4	00 00 00 00	 DD	 $LN53@comms_proc
  02ac8	00 00 00 00	 DD	 $LN41@comms_proc
  02acc	00 00 00 00	 DD	 $LN49@comms_proc
  02ad0	00 00 00 00	 DD	 $LN115@comms_proc
  02ad4	00 00 00 00	 DD	 $LN30@comms_proc
  02ad8	00 00 00 00	 DD	 $LN104@comms_proc
?comms_process_data@@YGXXZ ENDP				; comms_process_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?deinitialise_comms_manager@@YGXXZ
_TEXT	SEGMENT
?deinitialise_comms_manager@@YGXXZ PROC			; deinitialise_comms_manager, COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 175  : 
; 176  :     #if DEBUG_MODULE
; 177  : 
; 178  :     debug_log ("COMMS MAN: deinitialising comms manager");
; 179  : 
; 180  :     #endif
; 181  : 
; 182  :     free_mem (data_record);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?data_record@@3PAEA
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 183  : 
; 184  :     if (tx_pack_buffer)

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tx_pack_buffer@@3PAEA, 0 ; tx_pack_buffer
  0001b	74 0b		 je	 SHORT $LN1@deinitiali

; 185  :     {
; 186  : 
; 187  :         free_mem (tx_pack_buffer);

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tx_pack_buffer@@3PAEA ; tx_pack_buffer
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN1@deinitiali:

; 188  :     }
; 189  : 
; 190  :     //initialise_entity_list_validation ();
; 191  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?deinitialise_comms_manager@@YGXXZ ENDP			; deinitialise_comms_manager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?initialise_comms_manager@@YGXXZ
_TEXT	SEGMENT
?initialise_comms_manager@@YGXXZ PROC			; initialise_comms_manager, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 143  : 
; 144  : 
; 145  :     #if DEBUG_MODULE
; 146  : 
; 147  :     debug_log ("COMMS MAN: initialising comms manager: data size = %d", command_line_comms_data_record_size, direct_play_get_player_id ());
; 148  : 
; 149  :     #endif
; 150  : 
; 151  :     set_server_response (SERVER_RESPONSE_UNKNOWN);

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?server_response@@3W4SERVER_RESPONSE_TYPES@@A, 0 ; server_response

; 152  : 
; 153  :     data_record = (unsigned char *) malloc_heap_mem (command_line_comms_data_record_size);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_data_record_size@@3HA ; command_line_comms_data_record_size
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  0001e	a3 00 00 00 00	 mov	 DWORD PTR ?data_record@@3PAEA, eax

; 154  : 
; 155  :     add_update_function (send_comms_data, 1.0 / command_line_max_game_update_rate , 1.0);

  00023	51		 push	 ecx
  00024	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR ?command_line_max_game_update_rate@@3HA ; command_line_max_game_update_rate
  00039	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00041	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00045	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00049	51		 push	 ecx
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	68 00 00 00 00	 push	 OFFSET ?send_comms_data@@YGXXZ ; send_comms_data
  00054	e8 00 00 00 00	 call	 ?add_update_function@@YGHP6GXXZMM@Z ; add_update_function

; 156  :     //add_update_function (data_exchange, 1.0 / command_line_max_game_update_rate , 1.0);
; 157  : 
; 158  :     if (command_line_comms_validate_connections)

  00059	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_comms_validate_connections@@3HA, 0 ; command_line_comms_validate_connections
  00060	74 26		 je	 SHORT $LN2@initialise

; 159  :     {
; 160  : 
; 161  : 		//add_update_function (validate_connections, command_line_comms_timeout, 1.0);
; 162  : 
; 163  : 		add_update_function (validate_connections, 3.0, 1.0); // Jabberwock - VC was called to rarely if cto was high

  00062	51		 push	 ecx
  00063	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00070	51		 push	 ecx
  00071	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	68 00 00 00 00	 push	 OFFSET ?validate_connections@@YGXXZ ; validate_connections
  00083	e8 00 00 00 00	 call	 ?add_update_function@@YGHP6GXXZMM@Z ; add_update_function
$LN2@initialise:

; 164  :     }
; 165  : 
; 166  :     tx_pack_buffer = (unsigned char *) malloc_heap_mem (sizeof (unsigned char) * command_line_comms_pack_buffer_size);

  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_pack_buffer_size@@3HA ; command_line_comms_pack_buffer_size
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00093	a3 00 00 00 00	 mov	 DWORD PTR ?tx_pack_buffer@@3PAEA, eax ; tx_pack_buffer

; 167  : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
?initialise_comms_manager@@YGXXZ ENDP			; initialise_comms_manager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?data_exchange@@YGXXZ
_TEXT	SEGMENT
_this_connection$ = -8					; size = 4
_packet_data_size$ = -4					; size = 4
?data_exchange@@YGXXZ PROC				; data_exchange, COMDAT

; 337  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 338  : 
; 339  :     int
; 340  :         packet_data_size;
; 341  : 
; 342  :     connection_data_type
; 343  :         *this_connection;
; 344  : 
; 345  :     this_connection = direct_play_get_connection_data ();

  00009	e8 00 00 00 00	 call	 ?direct_play_get_connection_data@@YGPAUCONNECTION_DATA_TYPE@@XZ ; direct_play_get_connection_data
  0000e	89 45 f8	 mov	 DWORD PTR _this_connection$[ebp], eax

; 346  : 
; 347  :     if ((this_connection) && (this_connection->is_initialised))

  00011	83 7d f8 00	 cmp	 DWORD PTR _this_connection$[ebp], 0
  00015	0f 84 9b 00 00
	00		 je	 $LN1@data_excha
  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this_connection$[ebp]
  0001e	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00021	83 e1 01	 and	 ecx, 1
  00024	0f 84 8c 00 00
	00		 je	 $LN1@data_excha

; 348  :     {
; 349  : 
; 350  :         #if DEBUG_MODULE >= 2
; 351  : 
; 352  :         debug_log ("COMMS MAN: Data exchange");
; 353  : 
; 354  :         #endif
; 355  : 
; 356  :         if (get_current_pack_buffer_bit_size () > 0)

  0002a	e8 00 00 00 00	 call	 ?get_current_pack_buffer_bit_size@@YGHXZ ; get_current_pack_buffer_bit_size
  0002f	85 c0		 test	 eax, eax
  00031	7e 0c		 jle	 SHORT $LN3@data_excha

; 357  :         {
; 358  : 
; 359  :             transmit_entity_comms_message (ENTITY_COMMS_END, NULL);

  00033	6a 00		 push	 0
  00035	6a 15		 push	 21			; 00000015H
  00037	e8 00 00 00 00	 call	 ?transmit_entity_comms_message@@YAXW4ENTITY_COMMS_MESSAGES@@PAUENTITY@@ZZ ; transmit_entity_comms_message
  0003c	83 c4 08	 add	 esp, 8
$LN3@data_excha:

; 360  :         }
; 361  : 
; 362  :         ASSERT (!get_pack_buffer_overflow ());

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  00044	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00048	74 18		 je	 SHORT $LN4@data_excha
  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??data_exchange@@YGXXZ@4JA
  0004f	83 c0 19	 add	 eax, 25			; 00000019H
  00052	50		 push	 eax
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FGJBMJHL@?$CBget_pack_buffer_overflow?5?$CI?$CJ@
  0005d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@data_excha:

; 363  : 
; 364  :         #if DEBUG_MODULE >= 2
; 365  : 
; 366  :         debug_log ("COMM_MAN: closing pack buffer line.216");
; 367  : 
; 368  :         #endif
; 369  : 
; 370  :         packet_data_size = close_pack_buffer ();

  00062	e8 00 00 00 00	 call	 ?close_pack_buffer@@YGHXZ ; close_pack_buffer
  00067	89 45 fc	 mov	 DWORD PTR _packet_data_size$[ebp], eax

; 371  : 
; 372  :         if (packet_data_size > 0)

  0006a	83 7d fc 00	 cmp	 DWORD PTR _packet_data_size$[ebp], 0
  0006e	7e 10		 jle	 SHORT $LN5@data_excha

; 373  :         {
; 374  : 
; 375  :             comms_record_data (tx_pack_buffer, packet_data_size);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _packet_data_size$[ebp]
  00073	50		 push	 eax
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tx_pack_buffer@@3PAEA ; tx_pack_buffer
  0007a	51		 push	 ecx
  0007b	e8 00 00 00 00	 call	 ?comms_record_data@@YGXPAEH@Z ; comms_record_data
$LN5@data_excha:

; 376  :         }
; 377  : 
; 378  :         #if DEBUG_MODULE >= 2
; 379  : 
; 380  :         debug_log ("COMM_MAN: opening pack buffer line.224");
; 381  : 
; 382  :         #endif
; 383  : 
; 384  :         open_pack_buffer (tx_pack_buffer, command_line_comms_pack_buffer_size);

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_pack_buffer_size@@3HA ; command_line_comms_pack_buffer_size
  00085	50		 push	 eax
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tx_pack_buffer@@3PAEA ; tx_pack_buffer
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ?open_pack_buffer@@YGXPAEH@Z ; open_pack_buffer

; 385  : 
; 386  :         //
; 387  :         // receive all packets waiting
; 388  :         //
; 389  : 
; 390  :         receive_packets ();

  00092	e8 00 00 00 00	 call	 ?receive_packets@@YGXXZ	; receive_packets

; 391  : 
; 392  :         #if COMMS_STATS
; 393  : 
; 394  :         debug_comms_stats ();

  00097	e8 00 00 00 00	 call	 ?debug_comms_stats@@YGXXZ ; debug_comms_stats

; 395  : 
; 396  :         #endif
; 397  : 
; 398  :         //
; 399  :         // process all data received this frame
; 400  :         //
; 401  : 
; 402  :         comms_process_data ();

  0009c	e8 00 00 00 00	 call	 ?comms_process_data@@YGXXZ ; comms_process_data

; 403  : 
; 404  :         //
; 405  :         // send all data for this frame
; 406  :         //
; 407  : 
; 408  :         comms_send_data ();

  000a1	e8 00 00 00 00	 call	 ?comms_send_data@@YGXXZ	; comms_send_data

; 409  : 
; 410  :         //
; 411  :         // reset the data record for next frame
; 412  :         //
; 413  : 
; 414  :         comms_clear_data_record ();

  000a6	e8 00 00 00 00	 call	 ?comms_clear_data_record@@YGXXZ ; comms_clear_data_record

; 415  : 
; 416  :         //
; 417  :         // check resend list
; 418  :         //
; 419  : 
; 420  :         update_resend_packet_list (command_line_comms_resend_list_size);

  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_resend_list_size@@3HA ; command_line_comms_resend_list_size
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ?update_resend_packet_list@@YGXH@Z ; update_resend_packet_list
$LN1@data_excha:

; 421  :     }
; 422  : }

  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
?data_exchange@@YGXXZ ENDP				; data_exchange
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?comms_send_data@@YGXXZ
_TEXT	SEGMENT
?comms_send_data@@YGXXZ PROC				; comms_send_data, COMDAT

; 535  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 536  : 
; 537  :     if (data_record_size > 0)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?data_record_size@@3HA, 0 ; data_record_size
  00010	7e 1c		 jle	 SHORT $LN1@comms_send

; 538  :     {
; 539  : 
; 540  :         send_packet (get_packet_destination (), PACKET_TYPE_AI_DATA, data_record, data_record_size, SEND_TYPE_GROUP);

  00012	6a 01		 push	 1
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?data_record_size@@3HA ; data_record_size
  00019	50		 push	 eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?data_record@@3PAEA
  00020	51		 push	 ecx
  00021	6a 15		 push	 21			; 00000015H
  00023	e8 00 00 00 00	 call	 ?get_packet_destination@@YGKXZ ; get_packet_destination
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet
$LN1@comms_send:

; 541  :     }
; 542  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?comms_send_data@@YGXXZ ENDP				; comms_send_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?send_comms_data@@YGXXZ
_TEXT	SEGMENT
_packet_data_size$ = -4					; size = 4
?send_comms_data@@YGXXZ PROC				; send_comms_data, COMDAT

; 464  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 465  : 
; 466  :     int
; 467  :         packet_data_size;
; 468  : 
; 469  :     //
; 470  :     //
; 471  :     //
; 472  : 
; 473  :     direct_play_get_message_queue ();

  00009	e8 00 00 00 00	 call	 ?direct_play_get_message_queue@@YGXXZ ; direct_play_get_message_queue

; 474  : 
; 475  :     if (direct_play_get_send_queue_number_of_packets () > command_line_comms_packet_throttle_limit)

  0000e	e8 00 00 00 00	 call	 ?direct_play_get_send_queue_number_of_packets@@YGHXZ ; direct_play_get_send_queue_number_of_packets
  00013	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?command_line_comms_packet_throttle_limit@@3HA ; command_line_comms_packet_throttle_limit
  00019	7e 05		 jle	 SHORT $LN2@send_comms

; 476  :     {
; 477  : 
; 478  :         #if DEBUG_MODULE
; 479  : 
; 480  :         debug_log ("COMM_MAN: Throttling to %d, %d packets waiting", command_line_comms_packet_throttle_limit, direct_play_get_send_queue_number_of_packets ());
; 481  : 
; 482  :         #endif
; 483  : 
; 484  :         return;

  0001b	e9 82 00 00 00	 jmp	 $LN1@send_comms
$LN2@send_comms:

; 485  :     }
; 486  : 
; 487  :     //
; 488  :     //
; 489  :     //
; 490  : 
; 491  :     if (get_current_pack_buffer_bit_size () > 0)

  00020	e8 00 00 00 00	 call	 ?get_current_pack_buffer_bit_size@@YGHXZ ; get_current_pack_buffer_bit_size
  00025	85 c0		 test	 eax, eax
  00027	7e 0c		 jle	 SHORT $LN3@send_comms

; 492  :     {
; 493  : 
; 494  :         transmit_entity_comms_message (ENTITY_COMMS_END, NULL);

  00029	6a 00		 push	 0
  0002b	6a 15		 push	 21			; 00000015H
  0002d	e8 00 00 00 00	 call	 ?transmit_entity_comms_message@@YAXW4ENTITY_COMMS_MESSAGES@@PAUENTITY@@ZZ ; transmit_entity_comms_message
  00032	83 c4 08	 add	 esp, 8
$LN3@send_comms:

; 495  :     }
; 496  : 
; 497  :     ASSERT (!get_pack_buffer_overflow ());

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pack_buffer@@3PAUPACK_BUFFER@@A ; current_pack_buffer
  0003a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0003e	74 18		 je	 SHORT $LN4@send_comms
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??send_comms_data@@YGXXZ@4JA
  00045	83 c0 21	 add	 eax, 33			; 00000021H
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FGJBMJHL@?$CBget_pack_buffer_overflow?5?$CI?$CJ@
  00053	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@send_comms:

; 498  : 
; 499  :     packet_data_size = close_pack_buffer ();

  00058	e8 00 00 00 00	 call	 ?close_pack_buffer@@YGHXZ ; close_pack_buffer
  0005d	89 45 fc	 mov	 DWORD PTR _packet_data_size$[ebp], eax

; 500  : 
; 501  :     if (packet_data_size > 0)

  00060	83 7d fc 00	 cmp	 DWORD PTR _packet_data_size$[ebp], 0
  00064	7e 10		 jle	 SHORT $LN5@send_comms

; 502  :     {
; 503  : 
; 504  :         comms_record_data (tx_pack_buffer, packet_data_size);

  00066	8b 45 fc	 mov	 eax, DWORD PTR _packet_data_size$[ebp]
  00069	50		 push	 eax
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tx_pack_buffer@@3PAEA ; tx_pack_buffer
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?comms_record_data@@YGXPAEH@Z ; comms_record_data
$LN5@send_comms:

; 505  :     }
; 506  : 
; 507  :     open_pack_buffer (tx_pack_buffer, command_line_comms_pack_buffer_size);

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_pack_buffer_size@@3HA ; command_line_comms_pack_buffer_size
  0007b	50		 push	 eax
  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tx_pack_buffer@@3PAEA ; tx_pack_buffer
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ?open_pack_buffer@@YGXPAEH@Z ; open_pack_buffer

; 508  : 
; 509  :     //
; 510  :     // send all data for this frame
; 511  :     //
; 512  : 
; 513  :     comms_send_data ();

  00088	e8 00 00 00 00	 call	 ?comms_send_data@@YGXXZ	; comms_send_data

; 514  : 
; 515  :     #if COMMS_STATS
; 516  : 
; 517  :     debug_comms_stats ();

  0008d	e8 00 00 00 00	 call	 ?debug_comms_stats@@YGXXZ ; debug_comms_stats

; 518  : 
; 519  :     #endif
; 520  : 
; 521  :     //
; 522  :     // reset the data record for next frame
; 523  :     //
; 524  : 
; 525  :     comms_clear_data_record ();

  00092	e8 00 00 00 00	 call	 ?comms_clear_data_record@@YGXXZ ; comms_clear_data_record

; 526  : 
; 527  :     update_resend_packet_list (command_line_comms_resend_list_size);

  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_resend_list_size@@3HA ; command_line_comms_resend_list_size
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?update_resend_packet_list@@YGXH@Z ; update_resend_packet_list
$LN1@send_comms:

; 528  : }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
?send_comms_data@@YGXXZ ENDP				; send_comms_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?receive_comms_data@@YGXXZ
_TEXT	SEGMENT
_this_connection$ = -4					; size = 4
?receive_comms_data@@YGXXZ PROC				; receive_comms_data, COMDAT

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 430  : 
; 431  :     connection_data_type
; 432  :         *this_connection;
; 433  : 
; 434  :     this_connection = direct_play_get_connection_data ();

  00009	e8 00 00 00 00	 call	 ?direct_play_get_connection_data@@YGPAUCONNECTION_DATA_TYPE@@XZ ; direct_play_get_connection_data
  0000e	89 45 fc	 mov	 DWORD PTR _this_connection$[ebp], eax

; 435  : 
; 436  :     if ( ( this_connection ) && ( this_connection->is_initialised ) )

  00011	83 7d fc 00	 cmp	 DWORD PTR _this_connection$[ebp], 0
  00015	74 15		 je	 SHORT $LN1@receive_co
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this_connection$[ebp]
  0001a	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0001d	83 e1 01	 and	 ecx, 1
  00020	74 0a		 je	 SHORT $LN1@receive_co

; 437  :     {
; 438  : 
; 439  :         //
; 440  :         // receive all packets waiting
; 441  :         //
; 442  : 
; 443  :         receive_packets ();

  00022	e8 00 00 00 00	 call	 ?receive_packets@@YGXXZ	; receive_packets

; 444  : 
; 445  :         #if COMMS_STATS
; 446  : 
; 447  :         //debug_comms_stats ();
; 448  : 
; 449  :         #endif
; 450  : 
; 451  :         //
; 452  :         // process all data received this frame
; 453  :         //
; 454  : 
; 455  :         comms_process_data ();

  00027	e8 00 00 00 00	 call	 ?comms_process_data@@YGXXZ ; comms_process_data
$LN1@receive_co:

; 456  :     }
; 457  : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?receive_comms_data@@YGXXZ ENDP				; receive_comms_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comm_man.c
;	COMDAT ?comms_clear_data_record@@YGXXZ
_TEXT	SEGMENT
?comms_clear_data_record@@YGXXZ PROC			; comms_clear_data_record, COMDAT

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 199  : 
; 200  :     #if DEBUG_MODULE >= 2
; 201  : 
; 202  :     debug_log ("COMMS MAN: clearing data record");
; 203  : 
; 204  :     #endif
; 205  : 
; 206  :     #if COMMS_STATS
; 207  : 
; 208  :     packet_record_data_count = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?packet_record_data_count@@3HA, 0 ; packet_record_data_count

; 209  : 
; 210  :     #endif
; 211  : 
; 212  :     ASSERT (data_record);

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?data_record@@3PAEA, 0
  0001a	75 18		 jne	 SHORT $LN2@comms_clea
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_clear_data_record@@YGXXZ@4JA
  00021	83 c0 0e	 add	 eax, 14			; 0000000eH
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MOGFNBMO@data_record@
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@comms_clea:

; 213  : 
; 214  :     ASSERT (command_line_comms_data_record_size != 0);

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_comms_data_record_size@@3HA, 0 ; command_line_comms_data_record_size
  0003b	75 18		 jne	 SHORT $LN3@comms_clea
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??comms_clear_data_record@@YGXXZ@4JA
  00042	83 c0 10	 add	 eax, 16			; 00000010H
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KLLFHFDJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DJJCJBCH@command_line_comms_data_record_@
  00050	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@comms_clea:

; 215  : 
; 216  :     memset (data_record, 0, command_line_comms_data_record_size);

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_data_record_size@@3HA ; command_line_comms_data_record_size
  0005a	50		 push	 eax
  0005b	6a 00		 push	 0
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?data_record@@3PAEA
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 _memset
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH

; 217  : 
; 218  :     data_record_size = 0;

  0006c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?data_record_size@@3HA, 0 ; data_record_size

; 219  : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?comms_clear_data_record@@YGXXZ ENDP			; comms_clear_data_record
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\string.h
;	COMDAT ?strstr@@YAPADQADQBD@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__SubString$ = 12					; size = 4
?strstr@@YAPADQADQBD@Z PROC				; strstr, COMDAT

; 523  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __SubString$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __String$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _strstr
  00016	83 c4 08	 add	 esp, 8

; 525  :     }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?strstr@@YAPADQADQBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2270 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2271 :         int _Result;
; 2272 :         va_list _ArgList;
; 2273 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 2274 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsscanf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 2275 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 2276 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 2277 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT

; 2175 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2176 :         return __stdio_common_vsscanf(

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	51		 push	 ecx
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsscanf
  0002d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2177 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2178 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2179 :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fscanf	PROC						; COMDAT

; 1204 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1205 :         int _Result;
; 1206 :         va_list _ArgList;
; 1207 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1208 :         _Result = _vfscanf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfscanf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1209 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1210 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1211 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT

; 1062 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1063 :         return __stdio_common_vfscanf(

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfscanf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 1064 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1065 :             _Stream, _Format, _Locale, _ArgList);
; 1066 :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
