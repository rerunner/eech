; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\maths\vector.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_acosf
PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?acos@@YGMM@Z					; acos
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?normalise_4d_vector@@YGMPAUVEC4D@@@Z		; normalise_4d_vector
PUBLIC	?accurately_normalise_3d_vector@@YGMPAUVEC3D@@@Z ; accurately_normalise_3d_vector
PUBLIC	?normalise_3d_vector@@YGMPAUVEC3D@@@Z		; normalise_3d_vector
PUBLIC	?normalise_2d_vector@@YGMPAUVEC2D@@@Z		; normalise_2d_vector
PUBLIC	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z	; normalise_any_3d_vector
PUBLIC	?normalise_any_2d_vector@@YGMPAUVEC2D@@@Z	; normalise_any_2d_vector
PUBLIC	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z	; get_3d_vector_magnitude
PUBLIC	?get_2d_vector_magnitude@@YGMPBUVEC2D@@@Z	; get_2d_vector_magnitude
PUBLIC	?get_3d_vector_inverse_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_inverse_magnitude
PUBLIC	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude
PUBLIC	?normalise_2d_vector_given_magnitude@@YGXPAUVEC2D@@M@Z ; normalise_2d_vector_given_magnitude
PUBLIC	?get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU1@@Z ; get_3d_perp_dist_of_point_from_line
PUBLIC	?get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU1@@Z ; get_3d_perp_vector_of_point_from_line
PUBLIC	?get_2d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAM@Z ; get_2d_perp_dist_of_point_from_line
PUBLIC	?get_2d_perp_dist_of_point_from_infinite_line@@YGMPBUVEC3D@@00@Z ; get_2d_perp_dist_of_point_from_infinite_line
PUBLIC	?line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU2@1@Z ; line_line_3d_intercept
PUBLIC	?line_line_2d_intercept@@YGHPBUVEC2D@@000PAU1@@Z ; line_line_2d_intercept
PUBLIC	?get_2d_vector_dot_product@@YGMPBUVEC2D@@0@Z	; get_2d_vector_dot_product
PUBLIC	?get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z	; get_3d_vector_dot_product
PUBLIC	?get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z ; get_2d_unit_vector_dot_product
PUBLIC	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
PUBLIC	?get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU1@1@Z ; get_3d_vector_cross_product
PUBLIC	?get_2d_unit_vector_from_heading@@YGXPAUVEC2D@@M@Z ; get_2d_unit_vector_from_heading
PUBLIC	?get_3d_unit_vector_from_heading_and_pitch@@YGXPAUVEC3D@@MM@Z ; get_3d_unit_vector_from_heading_and_pitch
PUBLIC	?get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z ; get_heading_and_pitch_from_3d_unit_vector
PUBLIC	?get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z ; get_3d_vector_cube_cube_intersect
PUBLIC	?get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU1@1@Z ; get_3d_line_triangle_intersection
PUBLIC	?get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU1@1@Z ; get_3d_line_quad_intersection
PUBLIC	?invert_3d_vector@@YGXPAUVEC3D@@@Z		; invert_3d_vector
PUBLIC	?rotate_2d_vector@@YGXPAUVEC2D@@M@Z		; rotate_2d_vector
PUBLIC	?rotate_3d_vector@@YGXPAUVEC3D@@M@Z		; rotate_3d_vector
PUBLIC	?normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z ; normalise_3d_double_vector
PUBLIC	?normalise_any_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z ; normalise_any_3d_double_vector
PUBLIC	?get_3d_double_vector_magnitude@@YGNPBUDOUBLE_VEC3D@@@Z ; get_3d_double_vector_magnitude
PUBLIC	?get_3d_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z ; get_3d_double_vector_dot_product
PUBLIC	?get_3d_unit_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z ; get_3d_unit_double_vector_dot_product
PUBLIC	?get_3d_double_vector_cross_product@@YGXPAUDOUBLE_VEC3D@@PBU1@1@Z ; get_3d_double_vector_cross_product
PUBLIC	?invert_3d_double_vector@@YGXPAUDOUBLE_VEC3D@@@Z ; invert_3d_double_vector
PUBLIC	?rotate_2d_double_vector@@YGXPAUDOUBLE_VEC3D@@M@Z ; rotate_2d_double_vector
PUBLIC	?get_3d_unit_double_vector_from_heading_and_pitch@@YGXPAUDOUBLE_VEC3D@@NN@Z ; get_3d_unit_double_vector_from_heading_and_pitch
PUBLIC	?copy_vec3d_to_double_vec3d@@YGXPBUVEC3D@@PAUDOUBLE_VEC3D@@@Z ; copy_vec3d_to_double_vec3d
PUBLIC	?copy_double_vec3d_to_vec3d@@YGXPBUDOUBLE_VEC3D@@PAUVEC3D@@@Z ; copy_double_vec3d_to_vec3d
PUBLIC	?__LINE__Var@?0??normalise_4d_vector@@YGMPAUVEC4D@@@Z@4JA ; `normalise_4d_vector'::`1'::__LINE__Var
PUBLIC	??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_06NBFPPGEG@vector@			; `string'
PUBLIC	??_C@_0N@GGFJJPNN@length?5?$DO?50?40@		; `string'
PUBLIC	?__LINE__Var@?0??normalise_3d_vector@@YGMPAUVEC3D@@@Z@4JA ; `normalise_3d_vector'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??normalise_2d_vector@@YGMPAUVEC2D@@@Z@4JA ; `normalise_2d_vector'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??normalise_any_3d_vector@@YGMPAUVEC3D@@@Z@4JA ; `normalise_any_3d_vector'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??normalise_any_2d_vector@@YGMPAUVEC2D@@@Z@4JA ; `normalise_any_2d_vector'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z@4JA ; `get_3d_vector_magnitude'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_2d_vector_magnitude@@YGMPBUVEC2D@@@Z@4JA ; `get_2d_vector_magnitude'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_vector_inverse_magnitude@@YGMPBUVEC3D@@@Z@4JA ; `get_3d_vector_inverse_magnitude'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z@4JA ; `normalise_3d_vector_given_magnitude'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??normalise_2d_vector_given_magnitude@@YGXPAUVEC2D@@M@Z@4JA ; `normalise_2d_vector_given_magnitude'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU2@@Z@4JA ; `get_3d_perp_dist_of_point_from_line'::`1'::__LINE__Var
PUBLIC	??_C@_07LNNBBOBE@point_a@			; `string'
PUBLIC	??_C@_07JGPMENNH@point_b@			; `string'
PUBLIC	??_C@_07IPOHHMJG@point_c@			; `string'
PUBLIC	?__LINE__Var@?0??get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU2@@Z@4JA ; `get_3d_perp_vector_of_point_from_line'::`1'::__LINE__Var
PUBLIC	??_C@_0N@GOLCEOGO@line_point_a@			; `string'
PUBLIC	??_C@_0N@EFJPBNKN@line_point_b@			; `string'
PUBLIC	??_C@_06KJFADLGN@result@			; `string'
PUBLIC	?__LINE__Var@?0??line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU3@1@Z@4JA ; `line_line_3d_intercept'::`1'::__LINE__Var
PUBLIC	??_C@_02JCBCEJAP@p1@				; `string'
PUBLIC	??_C@_02LJDPBKMM@p2@				; `string'
PUBLIC	??_C@_02JDNACDDI@q1@				; `string'
PUBLIC	??_C@_02LIPNHAPL@q2@				; `string'
PUBLIC	??_C@_0BC@BPHEHFCF@intercept_point_p@		; `string'
PUBLIC	??_C@_0BC@GGPEEGE@intercept_point_q@		; `string'
PUBLIC	?__LINE__Var@?0??line_line_2d_intercept@@YGHPBUVEC2D@@000PAU2@@Z@4JA ; `line_line_2d_intercept'::`1'::__LINE__Var
PUBLIC	??_C@_0BA@NMPFNFPN@intercept_point@		; `string'
PUBLIC	?__LINE__Var@?0??get_2d_vector_dot_product@@YGMPBUVEC2D@@0@Z@4JA ; `get_2d_vector_dot_product'::`1'::__LINE__Var
PUBLIC	??_C@_01MCMALHOG@a@				; `string'
PUBLIC	??_C@_01OJONOECF@b@				; `string'
PUBLIC	?__LINE__Var@?0??get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z@4JA ; `get_3d_vector_dot_product'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z@4JA ; `get_2d_unit_vector_dot_product'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z@4JA ; `get_3d_unit_vector_dot_product'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU2@1@Z@4JA ; `get_3d_vector_cross_product'::`1'::__LINE__Var
PUBLIC	??_C@_02JGJPDFLN@v1@				; `string'
PUBLIC	??_C@_02LNLCGGHO@v2@				; `string'
PUBLIC	?__LINE__Var@?0??get_2d_unit_vector_from_heading@@YGXPAUVEC2D@@M@Z@4JA ; `get_2d_unit_vector_from_heading'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_unit_vector_from_heading_and_pitch@@YGXPAUVEC3D@@MM@Z@4JA ; `get_3d_unit_vector_from_heading_and_pitch'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z@4JA ; `get_heading_and_pitch_from_3d_unit_vector'::`1'::__LINE__Var
PUBLIC	??_C@_01MHEDDDHA@v@				; `string'
PUBLIC	??_C@_07MBJMFGGL@heading@			; `string'
PUBLIC	??_C@_05NCNFOFLM@pitch@				; `string'
PUBLIC	?__LINE__Var@?0??get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z@4JA ; `get_3d_vector_cube_cube_intersect'::`1'::__LINE__Var
PUBLIC	??_C@_03MJKAAKOC@v1a@				; `string'
PUBLIC	??_C@_03OCINFJCB@v1b@				; `string'
PUBLIC	??_C@_03MLOGLELL@v2a@				; `string'
PUBLIC	??_C@_03OAMLOHHI@v2b@				; `string'
PUBLIC	?__LINE__Var@?0??get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU2@1@Z@4JA ; `get_3d_line_triangle_intersection'::`1'::__LINE__Var
PUBLIC	??_C@_02CIKJBEFL@pa@				; `string'
PUBLIC	??_C@_02DIEEHJI@pb@				; `string'
PUBLIC	??_C@_02BKJPHGNJ@pc@				; `string'
PUBLIC	??_C@_02OAHAJOFD@pi@				; `string'
PUBLIC	??_C@_02PGMIBACJ@ni@				; `string'
PUBLIC	?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA ; `get_3d_line_quad_intersection'::`1'::__LINE__Var
PUBLIC	??_C@_02FFNOOABO@pd@				; `string'
PUBLIC	?__LINE__Var@?0??normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z@4JA ; `normalise_3d_double_vector'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??normalise_any_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z@4JA ; `normalise_any_3d_double_vector'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_double_vector_magnitude@@YGNPBUDOUBLE_VEC3D@@@Z@4JA ; `get_3d_double_vector_magnitude'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA ; `get_3d_double_vector_dot_product'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_unit_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA ; `get_3d_unit_double_vector_dot_product'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_double_vector_cross_product@@YGXPAUDOUBLE_VEC3D@@PBU2@1@Z@4JA ; `get_3d_double_vector_cross_product'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_unit_double_vector_from_heading_and_pitch@@YGXPAUDOUBLE_VEC3D@@NN@Z@4JA ; `get_3d_unit_double_vector_from_heading_and_pitch'::`1'::__LINE__Var
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@401917bdef5c28f6
PUBLIC	__real@7f7fffff
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c01917bdef5c28f6
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_acos:PROC
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_sqr_3d_range
EXTRN	?get_inverse_square_root@@YGMM@Z:PROC		; get_inverse_square_root
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c01917bdef5c28f6
CONST	SEGMENT
__real@c01917bdef5c28f6 DQ 0c01917bdef5c28f6r	; -6.27319
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@401917bdef5c28f6
CONST	SEGMENT
__real@401917bdef5c28f6 DQ 0401917bdef5c28f6r	; 6.27319
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_unit_double_vector_from_heading_and_pitch@@YGXPAUDOUBLE_VEC3D@@NN@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_unit_double_vector_from_heading_and_pitch@@YGXPAUDOUBLE_VEC3D@@NN@Z@4JA DD 089eH ; `get_3d_unit_double_vector_from_heading_and_pitch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_double_vector_cross_product@@YGXPAUDOUBLE_VEC3D@@PBU2@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_double_vector_cross_product@@YGXPAUDOUBLE_VEC3D@@PBU2@1@Z@4JA DD 0869H ; `get_3d_double_vector_cross_product'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_unit_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_unit_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA DD 0855H ; `get_3d_unit_double_vector_dot_product'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA DD 083bH ; `get_3d_double_vector_dot_product'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_double_vector_magnitude@@YGNPBUDOUBLE_VEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_double_vector_magnitude@@YGNPBUDOUBLE_VEC3D@@@Z@4JA DD 0826H ; `get_3d_double_vector_magnitude'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_any_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_any_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z@4JA DD 07faH ; `normalise_any_3d_double_vector'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z@4JA DD 07d9H ; `normalise_3d_double_vector'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02FFNOOABO@pd@
CONST	SEGMENT
??_C@_02FFNOOABO@pd@ DB 'pd', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA DD 06b8H ; `get_3d_line_quad_intersection'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02PGMIBACJ@ni@
CONST	SEGMENT
??_C@_02PGMIBACJ@ni@ DB 'ni', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAHAJOFD@pi@
CONST	SEGMENT
??_C@_02OAHAJOFD@pi@ DB 'pi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BKJPHGNJ@pc@
CONST	SEGMENT
??_C@_02BKJPHGNJ@pc@ DB 'pc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DIEEHJI@pb@
CONST	SEGMENT
??_C@_02DIEEHJI@pb@ DB 'pb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CIKJBEFL@pa@
CONST	SEGMENT
??_C@_02CIKJBEFL@pa@ DB 'pa', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU2@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU2@1@Z@4JA DD 05ffH ; `get_3d_line_triangle_intersection'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03OAMLOHHI@v2b@
CONST	SEGMENT
??_C@_03OAMLOHHI@v2b@ DB 'v2b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MLOGLELL@v2a@
CONST	SEGMENT
??_C@_03MLOGLELL@v2a@ DB 'v2a', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OCINFJCB@v1b@
CONST	SEGMENT
??_C@_03OCINFJCB@v1b@ DB 'v1b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MJKAAKOC@v1a@
CONST	SEGMENT
??_C@_03MJKAAKOC@v1a@ DB 'v1a', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z@4JA DD 0574H ; `get_3d_vector_cube_cube_intersect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05NCNFOFLM@pitch@
CONST	SEGMENT
??_C@_05NCNFOFLM@pitch@ DB 'pitch', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MBJMFGGL@heading@
CONST	SEGMENT
??_C@_07MBJMFGGL@heading@ DB 'heading', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MHEDDDHA@v@
CONST	SEGMENT
??_C@_01MHEDDDHA@v@ DB 'v', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z@4JA DD 0563H ; `get_heading_and_pitch_from_3d_unit_vector'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_unit_vector_from_heading_and_pitch@@YGXPAUVEC3D@@MM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_unit_vector_from_heading_and_pitch@@YGXPAUVEC3D@@MM@Z@4JA DD 0546H ; `get_3d_unit_vector_from_heading_and_pitch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_2d_unit_vector_from_heading@@YGXPAUVEC2D@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_2d_unit_vector_from_heading@@YGXPAUVEC2D@@M@Z@4JA DD 053aH ; `get_2d_unit_vector_from_heading'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02LNLCGGHO@v2@
CONST	SEGMENT
??_C@_02LNLCGGHO@v2@ DB 'v2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JGJPDFLN@v1@
CONST	SEGMENT
??_C@_02JGJPDFLN@v1@ DB 'v1', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU2@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU2@1@Z@4JA DD 0529H ; `get_3d_vector_cross_product'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z@4JA DD 0511H ; `get_3d_unit_vector_dot_product'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z@4JA DD 04fdH ; `get_2d_unit_vector_dot_product'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z@4JA DD 04e3H ; `get_3d_vector_dot_product'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01OJONOECF@b@
CONST	SEGMENT
??_C@_01OJONOECF@b@ DB 'b', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a@
CONST	SEGMENT
??_C@_01MCMALHOG@a@ DB 'a', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_2d_vector_dot_product@@YGMPBUVEC2D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_2d_vector_dot_product@@YGMPBUVEC2D@@0@Z@4JA DD 04cbH ; `get_2d_vector_dot_product'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@NMPFNFPN@intercept_point@
CONST	SEGMENT
??_C@_0BA@NMPFNFPN@intercept_point@ DB 'intercept_point', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??line_line_2d_intercept@@YGHPBUVEC2D@@000PAU2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??line_line_2d_intercept@@YGHPBUVEC2D@@000PAU2@@Z@4JA DD 042dH ; `line_line_2d_intercept'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@GGPEEGE@intercept_point_q@
CONST	SEGMENT
??_C@_0BC@GGPEEGE@intercept_point_q@ DB 'intercept_point_q', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BPHEHFCF@intercept_point_p@
CONST	SEGMENT
??_C@_0BC@BPHEHFCF@intercept_point_p@ DB 'intercept_point_p', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LIPNHAPL@q2@
CONST	SEGMENT
??_C@_02LIPNHAPL@q2@ DB 'q2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDNACDDI@q1@
CONST	SEGMENT
??_C@_02JDNACDDI@q1@ DB 'q1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LJDPBKMM@p2@
CONST	SEGMENT
??_C@_02LJDPBKMM@p2@ DB 'p2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JCBCEJAP@p1@
CONST	SEGMENT
??_C@_02JCBCEJAP@p1@ DB 'p1', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU3@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU3@1@Z@4JA DD 0358H ; `line_line_3d_intercept'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06KJFADLGN@result@
CONST	SEGMENT
??_C@_06KJFADLGN@result@ DB 'result', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EFJPBNKN@line_point_b@
CONST	SEGMENT
??_C@_0N@EFJPBNKN@line_point_b@ DB 'line_point_b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GOLCEOGO@line_point_a@
CONST	SEGMENT
??_C@_0N@GOLCEOGO@line_point_a@ DB 'line_point_a', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU2@@Z@4JA DD 0205H ; `get_3d_perp_vector_of_point_from_line'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_07IPOHHMJG@point_c@
CONST	SEGMENT
??_C@_07IPOHHMJG@point_c@ DB 'point_c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JGPMENNH@point_b@
CONST	SEGMENT
??_C@_07JGPMENNH@point_b@ DB 'point_b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LNNBBOBE@point_a@
CONST	SEGMENT
??_C@_07LNNBBOBE@point_a@ DB 'point_a', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU2@@Z@4JA DD 018aH ; `get_3d_perp_dist_of_point_from_line'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_2d_vector_given_magnitude@@YGXPAUVEC2D@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_2d_vector_given_magnitude@@YGXPAUVEC2D@@M@Z@4JA DD 0172H ; `normalise_2d_vector_given_magnitude'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z@4JA DD 015dH ; `normalise_3d_vector_given_magnitude'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_vector_inverse_magnitude@@YGMPBUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_vector_inverse_magnitude@@YGMPBUVEC3D@@@Z@4JA DD 0148H ; `get_3d_vector_inverse_magnitude'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_2d_vector_magnitude@@YGMPBUVEC2D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_2d_vector_magnitude@@YGMPBUVEC2D@@@Z@4JA DD 0135H ; `get_2d_vector_magnitude'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z@4JA DD 0120H ; `get_3d_vector_magnitude'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_any_2d_vector@@YGMPAUVEC2D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_any_2d_vector@@YGMPAUVEC2D@@@Z@4JA DD 0f8H ; `normalise_any_2d_vector'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_any_3d_vector@@YGMPAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_any_3d_vector@@YGMPAUVEC3D@@@Z@4JA DD 0ccH ; `normalise_any_3d_vector'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_2d_vector@@YGMPAUVEC2D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_2d_vector@@YGMPAUVEC2D@@@Z@4JA DD 0aeH ; `normalise_2d_vector'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_3d_vector@@YGMPAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_3d_vector@@YGMPAUVEC3D@@@Z@4JA DD 08dH ; `normalise_3d_vector'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@GGFJJPNN@length?5?$DO?50?40@
CONST	SEGMENT
??_C@_0N@GGFJJPNN@length?5?$DO?50?40@ DB 'length > 0.0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBFPPGEG@vector@
CONST	SEGMENT
??_C@_06NBFPPGEG@vector@ DB 'vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\maths\vector.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??normalise_4d_vector@@YGMPAUVEC4D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??normalise_4d_vector@@YGMPAUVEC4D@@@Z@4JA DD 051H ; `normalise_4d_vector'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?copy_double_vec3d_to_vec3d@@YGXPBUDOUBLE_VEC3D@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_vec1$ = 8						; size = 4
_vec2$ = 12						; size = 4
?copy_double_vec3d_to_vec3d@@YGXPBUDOUBLE_VEC3D@@PAUVEC3D@@@Z PROC ; copy_double_vec3d_to_vec3d, COMDAT

; 2247 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2248 : 
; 2249 : 	vec2->x = vec1->x;

  00009	8b 45 08	 mov	 eax, DWORD PTR _vec1$[ebp]
  0000c	f2 0f 5a 00	 cvtsd2ss xmm0, QWORD PTR [eax]
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _vec2$[ebp]
  00013	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 2250 : 	vec2->y = vec1->y;

  00017	8b 45 08	 mov	 eax, DWORD PTR _vec1$[ebp]
  0001a	f2 0f 5a 40 08	 cvtsd2ss xmm0, QWORD PTR [eax+8]
  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _vec2$[ebp]
  00022	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 2251 : 	vec2->z = vec1->z;

  00027	8b 45 08	 mov	 eax, DWORD PTR _vec1$[ebp]
  0002a	f2 0f 5a 40 10	 cvtsd2ss xmm0, QWORD PTR [eax+16]
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _vec2$[ebp]
  00032	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 2252 : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
?copy_double_vec3d_to_vec3d@@YGXPBUDOUBLE_VEC3D@@PAUVEC3D@@@Z ENDP ; copy_double_vec3d_to_vec3d
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?copy_vec3d_to_double_vec3d@@YGXPBUVEC3D@@PAUDOUBLE_VEC3D@@@Z
_TEXT	SEGMENT
_vec1$ = 8						; size = 4
_vec2$ = 12						; size = 4
?copy_vec3d_to_double_vec3d@@YGXPBUVEC3D@@PAUDOUBLE_VEC3D@@@Z PROC ; copy_vec3d_to_double_vec3d, COMDAT

; 2235 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2236 : 
; 2237 : 	vec2->x = vec1->x;

  00009	8b 45 08	 mov	 eax, DWORD PTR _vec1$[ebp]
  0000c	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _vec2$[ebp]
  00013	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0

; 2238 : 	vec2->y = vec1->y;

  00017	8b 45 08	 mov	 eax, DWORD PTR _vec1$[ebp]
  0001a	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _vec2$[ebp]
  00022	f2 0f 11 41 08	 movsd	 QWORD PTR [ecx+8], xmm0

; 2239 : 	vec2->z = vec1->z;

  00027	8b 45 08	 mov	 eax, DWORD PTR _vec1$[ebp]
  0002a	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _vec2$[ebp]
  00032	f2 0f 11 41 10	 movsd	 QWORD PTR [ecx+16], xmm0

; 2240 : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
?copy_vec3d_to_double_vec3d@@YGXPBUVEC3D@@PAUDOUBLE_VEC3D@@@Z ENDP ; copy_vec3d_to_double_vec3d
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_unit_double_vector_from_heading_and_pitch@@YGXPAUDOUBLE_VEC3D@@NN@Z
_TEXT	SEGMENT
_cosp$ = -32						; size = 8
_sinp$ = -24						; size = 8
_cosh$ = -16						; size = 8
_sinh$ = -8						; size = 8
_result$ = 8						; size = 4
_heading$ = 12						; size = 8
_pitch$ = 20						; size = 8
?get_3d_unit_double_vector_from_heading_and_pitch@@YGXPAUDOUBLE_VEC3D@@NN@Z PROC ; get_3d_unit_double_vector_from_heading_and_pitch, COMDAT

; 2206 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2207 : 	double
; 2208 : 		sinh,
; 2209 : 		cosh,
; 2210 : 		sinp,
; 2211 : 		cosp;
; 2212 : 
; 2213 : 	ASSERT (result);

  00009	83 7d 08 00	 cmp	 DWORD PTR _result$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_uni
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_unit_double_vector_from_heading_and_pitch@@YGXPAUDOUBLE_VEC3D@@NN@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06KJFADLGN@result@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_uni:

; 2214 : 
; 2215 : 	sinh = sin ( heading );

  00027	83 ec 08	 sub	 esp, 8
  0002a	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _heading$[ebp]
  0002f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00034	e8 00 00 00 00	 call	 _sin
  00039	83 c4 08	 add	 esp, 8
  0003c	dd 5d f8	 fstp	 QWORD PTR _sinh$[ebp]

; 2216 : 	cosh = cos ( heading );

  0003f	83 ec 08	 sub	 esp, 8
  00042	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _heading$[ebp]
  00047	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0004c	e8 00 00 00 00	 call	 _cos
  00051	83 c4 08	 add	 esp, 8
  00054	dd 5d f0	 fstp	 QWORD PTR _cosh$[ebp]

; 2217 : 
; 2218 : 	sinp = sin ( pitch );

  00057	83 ec 08	 sub	 esp, 8
  0005a	f2 0f 10 45 14	 movsd	 xmm0, QWORD PTR _pitch$[ebp]
  0005f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00064	e8 00 00 00 00	 call	 _sin
  00069	83 c4 08	 add	 esp, 8
  0006c	dd 5d e8	 fstp	 QWORD PTR _sinp$[ebp]

; 2219 : 	cosp = cos ( pitch );

  0006f	83 ec 08	 sub	 esp, 8
  00072	f2 0f 10 45 14	 movsd	 xmm0, QWORD PTR _pitch$[ebp]
  00077	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007c	e8 00 00 00 00	 call	 _cos
  00081	83 c4 08	 add	 esp, 8
  00084	dd 5d e0	 fstp	 QWORD PTR _cosp$[ebp]

; 2220 : 
; 2221 : 	result->x = cosp * sinh;

  00087	f2 0f 10 45 e0	 movsd	 xmm0, QWORD PTR _cosp$[ebp]
  0008c	f2 0f 59 45 f8	 mulsd	 xmm0, QWORD PTR _sinh$[ebp]
  00091	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  00094	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0

; 2222 : 
; 2223 : 	result->y = sinp;

  00098	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  0009b	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _sinp$[ebp]
  000a0	f2 0f 11 40 08	 movsd	 QWORD PTR [eax+8], xmm0

; 2224 : 
; 2225 : 	result->z = cosp * cosh;

  000a5	f2 0f 10 45 e0	 movsd	 xmm0, QWORD PTR _cosp$[ebp]
  000aa	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _cosh$[ebp]
  000af	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  000b2	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0

; 2226 : 
; 2227 : 	normalise_3d_double_vector (result);

  000b7	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z ; normalise_3d_double_vector
  000c0	dd d8		 fstp	 ST(0)

; 2228 : }

  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 14 00	 ret	 20			; 00000014H
?get_3d_unit_double_vector_from_heading_and_pitch@@YGXPAUDOUBLE_VEC3D@@NN@Z ENDP ; get_3d_unit_double_vector_from_heading_and_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?rotate_2d_double_vector@@YGXPAUDOUBLE_VEC3D@@M@Z
_TEXT	SEGMENT
_result$ = -20						; size = 12
_sin_theta$ = -8					; size = 4
_cos_theta$ = -4					; size = 4
_vector$ = 8						; size = 4
_theta$ = 12						; size = 4
?rotate_2d_double_vector@@YGXPAUDOUBLE_VEC3D@@M@Z PROC	; rotate_2d_double_vector, COMDAT

; 2182 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2183 : 	float
; 2184 : 		cos_theta,
; 2185 : 		sin_theta;
; 2186 : 
; 2187 : 	vec3d
; 2188 : 		result;
; 2189 : 
; 2190 : 	cos_theta = cos (theta);

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _theta$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00019	d9 5d fc	 fstp	 DWORD PTR _cos_theta$[ebp]

; 2191 : 	sin_theta = sin (theta);

  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0002c	d9 5d f8	 fstp	 DWORD PTR _sin_theta$[ebp]

; 2192 : 
; 2193 : 	result.x = (vector->x * cos_theta) + (vector->z * sin_theta);

  0002f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _cos_theta$[ebp]
  00034	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00037	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [eax]
  0003b	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _sin_theta$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00043	f2 0f 59 49 10	 mulsd	 xmm1, QWORD PTR [ecx+16]
  00048	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0004c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00050	f3 0f 11 45 ec	 movss	 DWORD PTR _result$[ebp], xmm0

; 2194 : 	result.z = (-vector->x * sin_theta) + (vector->z * cos_theta);

  00055	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00058	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0005c	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00063	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _sin_theta$[ebp]
  00068	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0006c	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _cos_theta$[ebp]
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00074	f2 0f 59 49 10	 mulsd	 xmm1, QWORD PTR [ecx+16]
  00079	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0007d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00081	f3 0f 11 45 f4	 movss	 DWORD PTR _result$[ebp+8], xmm0

; 2195 : 
; 2196 : 	vector->x = result.x;

  00086	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _result$[ebp]
  0008b	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0008e	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0

; 2197 : 	vector->y = 0.0;

  00092	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00095	0f 57 c0	 xorps	 xmm0, xmm0
  00098	f2 0f 11 40 08	 movsd	 QWORD PTR [eax+8], xmm0

; 2198 : 	vector->z = result.z;

  0009d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _result$[ebp+8]
  000a2	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000a5	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0

; 2199 : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
?rotate_2d_double_vector@@YGXPAUDOUBLE_VEC3D@@M@Z ENDP	; rotate_2d_double_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?invert_3d_double_vector@@YGXPAUDOUBLE_VEC3D@@@Z
_TEXT	SEGMENT
_vector$ = 8						; size = 4
?invert_3d_double_vector@@YGXPAUDOUBLE_VEC3D@@@Z PROC	; invert_3d_double_vector, COMDAT

; 2170 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2171 : 
; 2172 : 	vector->x = -vector->x;

  00009	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0000c	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00010	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0001a	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0

; 2173 : 	vector->y = -vector->y;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00021	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00026	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00030	f2 0f 11 41 08	 movsd	 QWORD PTR [ecx+8], xmm0

; 2174 : 	vector->z = -vector->z;

  00035	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00038	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  0003d	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00047	f2 0f 11 41 10	 movsd	 QWORD PTR [ecx+16], xmm0

; 2175 : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?invert_3d_double_vector@@YGXPAUDOUBLE_VEC3D@@@Z ENDP	; invert_3d_double_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_double_vector_cross_product@@YGXPAUDOUBLE_VEC3D@@PBU1@1@Z
_TEXT	SEGMENT
_result$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?get_3d_double_vector_cross_product@@YGXPAUDOUBLE_VEC3D@@PBU1@1@Z PROC ; get_3d_double_vector_cross_product, COMDAT

; 2153 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2154 : 	ASSERT (result);

  00009	83 7d 08 00	 cmp	 DWORD PTR _result$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_dou
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_double_vector_cross_product@@YGXPAUDOUBLE_VEC3D@@PBU2@1@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06KJFADLGN@result@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_dou:

; 2155 : 
; 2156 : 	ASSERT (v1);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v1$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_dou
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_double_vector_cross_product@@YGXPAUDOUBLE_VEC3D@@PBU2@1@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02JGJPDFLN@v1@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_dou:

; 2157 : 
; 2158 : 	ASSERT (v2);

  00045	83 7d 10 00	 cmp	 DWORD PTR _v2$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@get_3d_dou
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_double_vector_cross_product@@YGXPAUDOUBLE_VEC3D@@PBU2@1@Z@4JA
  00050	83 c0 05	 add	 eax, 5
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02LNLCGGHO@v2@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_3d_dou:

; 2159 : 
; 2160 : 	result->x = (v1->y * v2->z) - (v2->y * v1->z);

  00063	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  00066	8b 4d 10	 mov	 ecx, DWORD PTR _v2$[ebp]
  00069	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  0006e	f2 0f 59 41 10	 mulsd	 xmm0, QWORD PTR [ecx+16]
  00073	8b 55 10	 mov	 edx, DWORD PTR _v2$[ebp]
  00076	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  00079	f2 0f 10 4a 08	 movsd	 xmm1, QWORD PTR [edx+8]
  0007e	f2 0f 59 48 10	 mulsd	 xmm1, QWORD PTR [eax+16]
  00083	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _result$[ebp]
  0008a	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0

; 2161 : 	result->y = (v1->z * v2->x) - (v2->z * v1->x);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  00091	8b 4d 10	 mov	 ecx, DWORD PTR _v2$[ebp]
  00094	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00099	f2 0f 59 01	 mulsd	 xmm0, QWORD PTR [ecx]
  0009d	8b 55 10	 mov	 edx, DWORD PTR _v2$[ebp]
  000a0	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  000a3	f2 0f 10 4a 10	 movsd	 xmm1, QWORD PTR [edx+16]
  000a8	f2 0f 59 08	 mulsd	 xmm1, QWORD PTR [eax]
  000ac	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _result$[ebp]
  000b3	f2 0f 11 41 08	 movsd	 QWORD PTR [ecx+8], xmm0

; 2162 : 	result->z = (v1->x * v2->y) - (v2->x * v1->y);

  000b8	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  000bb	8b 4d 10	 mov	 ecx, DWORD PTR _v2$[ebp]
  000be	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  000c2	f2 0f 59 41 08	 mulsd	 xmm0, QWORD PTR [ecx+8]
  000c7	8b 55 10	 mov	 edx, DWORD PTR _v2$[ebp]
  000ca	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  000cd	f2 0f 10 0a	 movsd	 xmm1, QWORD PTR [edx]
  000d1	f2 0f 59 48 08	 mulsd	 xmm1, QWORD PTR [eax+8]
  000d6	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _result$[ebp]
  000dd	f2 0f 11 41 10	 movsd	 QWORD PTR [ecx+16], xmm0

; 2163 : }

  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 0c 00	 ret	 12			; 0000000cH
?get_3d_double_vector_cross_product@@YGXPAUDOUBLE_VEC3D@@PBU1@1@Z ENDP ; get_3d_double_vector_cross_product
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_unit_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z
_TEXT	SEGMENT
tv87 = -88						; size = 8
tv88 = -80						; size = 8
_result$ = -8						; size = 8
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?get_3d_unit_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z PROC ; get_3d_unit_double_vector_dot_product, COMDAT

; 2133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2134 : 	double
; 2135 : 		result;
; 2136 : 
; 2137 : 	ASSERT (a);

  00009	83 7d 08 00	 cmp	 DWORD PTR _a$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_uni
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_unit_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01MCMALHOG@a@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_uni:

; 2138 : 
; 2139 : 	ASSERT (b);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _b$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_uni
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_unit_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
  00032	83 c0 06	 add	 eax, 6
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_uni:

; 2140 : 
; 2141 : 	result = (a->x * b->x) + (a->y * b->y) + (a->z * b->z);

  00045	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0004b	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0004f	f2 0f 59 01	 mulsd	 xmm0, QWORD PTR [ecx]
  00053	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00056	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00059	f2 0f 10 4a 08	 movsd	 xmm1, QWORD PTR [edx+8]
  0005e	f2 0f 59 48 08	 mulsd	 xmm1, QWORD PTR [eax+8]
  00063	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0006a	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  0006d	f2 0f 10 49 10	 movsd	 xmm1, QWORD PTR [ecx+16]
  00072	f2 0f 59 4a 10	 mulsd	 xmm1, QWORD PTR [edx+16]
  00077	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0007b	f2 0f 11 45 f8	 movsd	 QWORD PTR _result$[ebp], xmm0

; 2142 : 
; 2143 : 	result = bound (result, -1.0, 1.0);

  00080	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00088	66 0f 2f 45 f8	 comisd	 xmm0, QWORD PTR _result$[ebp]
  0008d	76 0f		 jbe	 SHORT $LN7@get_3d_uni
  0008f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00097	f2 0f 11 45 b0	 movsd	 QWORD PTR tv88[ebp], xmm0
  0009c	eb 32		 jmp	 SHORT $LN8@get_3d_uni
$LN7@get_3d_uni:
  0009e	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _result$[ebp]
  000a3	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  000ab	76 0f		 jbe	 SHORT $LN5@get_3d_uni
  000ad	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000b5	f2 0f 11 45 a8	 movsd	 QWORD PTR tv87[ebp], xmm0
  000ba	eb 0a		 jmp	 SHORT $LN6@get_3d_uni
$LN5@get_3d_uni:
  000bc	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _result$[ebp]
  000c1	f2 0f 11 45 a8	 movsd	 QWORD PTR tv87[ebp], xmm0
$LN6@get_3d_uni:
  000c6	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv87[ebp]
  000cb	f2 0f 11 45 b0	 movsd	 QWORD PTR tv88[ebp], xmm0
$LN8@get_3d_uni:
  000d0	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR tv88[ebp]
  000d5	f2 0f 11 45 f8	 movsd	 QWORD PTR _result$[ebp], xmm0

; 2144 : 
; 2145 : 	return (result);

  000da	dd 45 f8	 fld	 QWORD PTR _result$[ebp]

; 2146 : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
?get_3d_unit_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z ENDP ; get_3d_unit_double_vector_dot_product
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z
_TEXT	SEGMENT
_q$ = -48						; size = 24
_p$ = -24						; size = 24
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?get_3d_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z PROC ; get_3d_double_vector_dot_product, COMDAT

; 2107 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2108 : 	double_vec3d
; 2109 : 		p, q;
; 2110 : 
; 2111 : 	ASSERT ( a );

  00009	83 7d 08 00	 cmp	 DWORD PTR _a$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_dou
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01MCMALHOG@a@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_dou:

; 2112 : 
; 2113 : 	ASSERT ( b );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _b$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_dou
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
  00032	83 c0 06	 add	 eax, 6
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_dou:

; 2114 : 
; 2115 : 	p.x = a->x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00048	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0004c	f2 0f 11 45 e8	 movsd	 QWORD PTR _p$[ebp], xmm0

; 2116 : 	p.y = a->y;

  00051	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00054	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00059	f2 0f 11 45 f0	 movsd	 QWORD PTR _p$[ebp+8], xmm0

; 2117 : 	p.z = a->z;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00061	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00066	f2 0f 11 45 f8	 movsd	 QWORD PTR _p$[ebp+16], xmm0

; 2118 : 	q.x = b->x;

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0006e	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00072	f2 0f 11 45 d0	 movsd	 QWORD PTR _q$[ebp], xmm0

; 2119 : 	q.y = b->y;

  00077	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0007a	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  0007f	f2 0f 11 45 d8	 movsd	 QWORD PTR _q$[ebp+8], xmm0

; 2120 : 	q.z = b->z;

  00084	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00087	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  0008c	f2 0f 11 45 e0	 movsd	 QWORD PTR _q$[ebp+16], xmm0

; 2121 : 
; 2122 : 	normalise_3d_double_vector( &p );

  00091	8d 45 e8	 lea	 eax, DWORD PTR _p$[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ?normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z ; normalise_3d_double_vector
  0009a	dd d8		 fstp	 ST(0)

; 2123 : 	normalise_3d_double_vector( &q );

  0009c	8d 45 d0	 lea	 eax, DWORD PTR _q$[ebp]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z ; normalise_3d_double_vector
  000a5	dd d8		 fstp	 ST(0)

; 2124 : 
; 2125 : 	return get_3d_unit_double_vector_dot_product( &p, &q );

  000a7	8d 45 d0	 lea	 eax, DWORD PTR _q$[ebp]
  000aa	50		 push	 eax
  000ab	8d 4d e8	 lea	 ecx, DWORD PTR _p$[ebp]
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 ?get_3d_unit_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z ; get_3d_unit_double_vector_dot_product

; 2126 : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 08 00	 ret	 8
?get_3d_double_vector_dot_product@@YGNPBUDOUBLE_VEC3D@@0@Z ENDP ; get_3d_double_vector_dot_product
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_double_vector_magnitude@@YGNPBUDOUBLE_VEC3D@@@Z
_TEXT	SEGMENT
_z$ = -24						; size = 8
_y$ = -16						; size = 8
_x$ = -8						; size = 8
_vector$ = 8						; size = 4
?get_3d_double_vector_magnitude@@YGNPBUDOUBLE_VEC3D@@@Z PROC ; get_3d_double_vector_magnitude, COMDAT

; 2086 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2087 : 
; 2088 : 	double
; 2089 : 		x,
; 2090 : 		y,
; 2091 : 		z;
; 2092 : 
; 2093 : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_dou
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_double_vector_magnitude@@YGNPBUDOUBLE_VEC3D@@@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_dou:

; 2094 : 
; 2095 : 	x = ( vector->x * vector->x );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00031	f2 0f 59 01	 mulsd	 xmm0, QWORD PTR [ecx]
  00035	f2 0f 11 45 f8	 movsd	 QWORD PTR _x$[ebp], xmm0

; 2096 : 	y = ( vector->y * vector->y );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00045	f2 0f 59 41 08	 mulsd	 xmm0, QWORD PTR [ecx+8]
  0004a	f2 0f 11 45 f0	 movsd	 QWORD PTR _y$[ebp], xmm0

; 2097 : 	z = ( vector->z * vector->z );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00055	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  0005a	f2 0f 59 41 10	 mulsd	 xmm0, QWORD PTR [ecx+16]
  0005f	f2 0f 11 45 e8	 movsd	 QWORD PTR _z$[ebp], xmm0

; 2098 : 
; 2099 : 	return ( sqrt ( x + y + z ) );

  00064	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _x$[ebp]
  00069	f2 0f 58 45 f0	 addsd	 xmm0, QWORD PTR _y$[ebp]
  0006e	f2 0f 58 45 e8	 addsd	 xmm0, QWORD PTR _z$[ebp]
  00073	83 ec 08	 sub	 esp, 8
  00076	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007b	e8 00 00 00 00	 call	 _sqrt
  00080	83 c4 08	 add	 esp, 8

; 2100 : }

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?get_3d_double_vector_magnitude@@YGNPBUDOUBLE_VEC3D@@@Z ENDP ; get_3d_double_vector_magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?normalise_any_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z
_TEXT	SEGMENT
_one_over_length$1 = -40				; size = 8
_length$ = -32						; size = 8
_z$ = -24						; size = 8
_y$ = -16						; size = 8
_x$ = -8						; size = 8
_vector$ = 8						; size = 4
?normalise_any_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z PROC ; normalise_any_3d_double_vector, COMDAT

; 2042 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2043 : 
; 2044 : 	double
; 2045 : 		x,
; 2046 : 		y,
; 2047 : 		z,
; 2048 : 		length;
; 2049 : 
; 2050 : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@normalise_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_any_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@normalise_:

; 2051 : 
; 2052 : 	x = ( ( vector->x ) * ( vector->x ) );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00031	f2 0f 59 01	 mulsd	 xmm0, QWORD PTR [ecx]
  00035	f2 0f 11 45 f8	 movsd	 QWORD PTR _x$[ebp], xmm0

; 2053 : 	y = ( ( vector->y ) * ( vector->y ) );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00045	f2 0f 59 41 08	 mulsd	 xmm0, QWORD PTR [ecx+8]
  0004a	f2 0f 11 45 f0	 movsd	 QWORD PTR _y$[ebp], xmm0

; 2054 : 	z = ( ( vector->z ) * ( vector->z ) );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00055	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  0005a	f2 0f 59 41 10	 mulsd	 xmm0, QWORD PTR [ecx+16]
  0005f	f2 0f 11 45 e8	 movsd	 QWORD PTR _z$[ebp], xmm0

; 2055 : 
; 2056 : 	length = sqrt ( x + y + z );

  00064	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _x$[ebp]
  00069	f2 0f 58 45 f0	 addsd	 xmm0, QWORD PTR _y$[ebp]
  0006e	f2 0f 58 45 e8	 addsd	 xmm0, QWORD PTR _z$[ebp]
  00073	83 ec 08	 sub	 esp, 8
  00076	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007b	e8 00 00 00 00	 call	 _sqrt
  00080	83 c4 08	 add	 esp, 8
  00083	dd 5d e0	 fstp	 QWORD PTR _length$[ebp]

; 2057 : 
; 2058 : 	if ( length > 0 )

  00086	f2 0f 10 45 e0	 movsd	 xmm0, QWORD PTR _length$[ebp]
  0008b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00093	76 51		 jbe	 SHORT $LN3@normalise_

; 2059 : 	{
; 2060 : 
; 2061 : 		double
; 2062 : 			one_over_length;
; 2063 : 
; 2064 : 		one_over_length = 1.0 / length;

  00095	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0009d	f2 0f 5e 45 e0	 divsd	 xmm0, QWORD PTR _length$[ebp]
  000a2	f2 0f 11 45 d8	 movsd	 QWORD PTR _one_over_length$1[ebp], xmm0

; 2065 : 
; 2066 : 		vector->x = ( vector->x * one_over_length );

  000a7	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000aa	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  000ae	f2 0f 59 45 d8	 mulsd	 xmm0, QWORD PTR _one_over_length$1[ebp]
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000b6	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0

; 2067 : 		vector->y = ( vector->y * one_over_length );

  000ba	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000bd	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  000c2	f2 0f 59 45 d8	 mulsd	 xmm0, QWORD PTR _one_over_length$1[ebp]
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000ca	f2 0f 11 41 08	 movsd	 QWORD PTR [ecx+8], xmm0

; 2068 : 		vector->z = ( vector->z * one_over_length );

  000cf	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000d2	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  000d7	f2 0f 59 45 d8	 mulsd	 xmm0, QWORD PTR _one_over_length$1[ebp]
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000df	f2 0f 11 41 10	 movsd	 QWORD PTR [ecx+16], xmm0

; 2069 : 	}
; 2070 : 	else

  000e4	eb 20		 jmp	 SHORT $LN4@normalise_
$LN3@normalise_:

; 2071 : 	{
; 2072 : 
; 2073 : 		vector->x = 0;

  000e6	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000e9	0f 57 c0	 xorps	 xmm0, xmm0
  000ec	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0

; 2074 : 		vector->y = 0;

  000f0	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000f3	0f 57 c0	 xorps	 xmm0, xmm0
  000f6	f2 0f 11 40 08	 movsd	 QWORD PTR [eax+8], xmm0

; 2075 : 		vector->z = 0;

  000fb	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000fe	0f 57 c0	 xorps	 xmm0, xmm0
  00101	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0
$LN4@normalise_:

; 2076 : 	}
; 2077 : 
; 2078 : 	return ( length );

  00106	dd 45 e0	 fld	 QWORD PTR _length$[ebp]

; 2079 : }

  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 04 00	 ret	 4
?normalise_any_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z ENDP ; normalise_any_3d_double_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z
_TEXT	SEGMENT
_one_over_length$ = -40					; size = 8
_length$ = -32						; size = 8
_z$ = -24						; size = 8
_y$ = -16						; size = 8
_x$ = -8						; size = 8
_vector$ = 8						; size = 4
?normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z PROC ; normalise_3d_double_vector, COMDAT

; 2009 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2010 : 
; 2011 : 	double
; 2012 : 		x,
; 2013 : 		y,
; 2014 : 		z,
; 2015 : 		length,
; 2016 : 		one_over_length;
; 2017 : 
; 2018 : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@normalise_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z@4JA
  00014	83 c0 09	 add	 eax, 9
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@normalise_:

; 2019 : 
; 2020 : 	x = ( ( vector->x ) * ( vector->x ) );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00031	f2 0f 59 01	 mulsd	 xmm0, QWORD PTR [ecx]
  00035	f2 0f 11 45 f8	 movsd	 QWORD PTR _x$[ebp], xmm0

; 2021 : 	y = ( ( vector->y ) * ( vector->y ) );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00045	f2 0f 59 41 08	 mulsd	 xmm0, QWORD PTR [ecx+8]
  0004a	f2 0f 11 45 f0	 movsd	 QWORD PTR _y$[ebp], xmm0

; 2022 : 	z = ( ( vector->z ) * ( vector->z ) );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00055	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  0005a	f2 0f 59 41 10	 mulsd	 xmm0, QWORD PTR [ecx+16]
  0005f	f2 0f 11 45 e8	 movsd	 QWORD PTR _z$[ebp], xmm0

; 2023 : 
; 2024 : 	length = sqrt ( x + y + z );

  00064	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _x$[ebp]
  00069	f2 0f 58 45 f0	 addsd	 xmm0, QWORD PTR _y$[ebp]
  0006e	f2 0f 58 45 e8	 addsd	 xmm0, QWORD PTR _z$[ebp]
  00073	83 ec 08	 sub	 esp, 8
  00076	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007b	e8 00 00 00 00	 call	 _sqrt
  00080	83 c4 08	 add	 esp, 8
  00083	dd 5d e0	 fstp	 QWORD PTR _length$[ebp]

; 2025 : 
; 2026 : 	ASSERT ( length > 0.0 );

  00086	f2 0f 10 45 e0	 movsd	 xmm0, QWORD PTR _length$[ebp]
  0008b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00093	77 18		 ja	 SHORT $LN3@normalise_
  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z@4JA
  0009a	83 c0 11	 add	 eax, 17			; 00000011H
  0009d	50		 push	 eax
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGFJJPNN@length?5?$DO?50?40@
  000a8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@normalise_:

; 2027 : 
; 2028 : 	one_over_length = 1.0 / length;

  000ad	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000b5	f2 0f 5e 45 e0	 divsd	 xmm0, QWORD PTR _length$[ebp]
  000ba	f2 0f 11 45 d8	 movsd	 QWORD PTR _one_over_length$[ebp], xmm0

; 2029 : 
; 2030 : 	vector->x = ( vector->x * one_over_length );

  000bf	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000c2	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  000c6	f2 0f 59 45 d8	 mulsd	 xmm0, QWORD PTR _one_over_length$[ebp]
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000ce	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0

; 2031 : 	vector->y = ( vector->y * one_over_length );

  000d2	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000d5	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  000da	f2 0f 59 45 d8	 mulsd	 xmm0, QWORD PTR _one_over_length$[ebp]
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000e2	f2 0f 11 41 08	 movsd	 QWORD PTR [ecx+8], xmm0

; 2032 : 	vector->z = ( vector->z * one_over_length );

  000e7	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000ea	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  000ef	f2 0f 59 45 d8	 mulsd	 xmm0, QWORD PTR _one_over_length$[ebp]
  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000f7	f2 0f 11 41 10	 movsd	 QWORD PTR [ecx+16], xmm0

; 2033 : 
; 2034 : 	return ( length );

  000fc	dd 45 e0	 fld	 QWORD PTR _length$[ebp]

; 2035 : }

  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c2 04 00	 ret	 4
?normalise_3d_double_vector@@YGNPAUDOUBLE_VEC3D@@@Z ENDP ; normalise_3d_double_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?rotate_3d_vector@@YGXPAUVEC3D@@M@Z
_TEXT	SEGMENT
_result$ = -20						; size = 12
_sin_theta$ = -8					; size = 4
_cos_theta$ = -4					; size = 4
_vector$ = 8						; size = 4
_theta$ = 12						; size = 4
?rotate_3d_vector@@YGXPAUVEC3D@@M@Z PROC		; rotate_3d_vector, COMDAT

; 1982 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1983 : 	float
; 1984 : 		cos_theta,
; 1985 : 		sin_theta;
; 1986 : 
; 1987 : 	vec3d
; 1988 : 		result;
; 1989 : 
; 1990 : 	cos_theta = cos (theta);

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _theta$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00019	d9 5d fc	 fstp	 DWORD PTR _cos_theta$[ebp]

; 1991 : 	sin_theta = sin (theta);

  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0002c	d9 5d f8	 fstp	 DWORD PTR _sin_theta$[ebp]

; 1992 : 
; 1993 : 	result.x = (vector->x * cos_theta) + (vector->z * sin_theta);

  0002f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00032	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00036	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0003e	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00043	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _sin_theta$[ebp]
  00048	f3 0f 58 c1	 addss	 xmm0, xmm1
  0004c	f3 0f 11 45 ec	 movss	 DWORD PTR _result$[ebp], xmm0

; 1994 : 	result.z = (-vector->x * sin_theta) + (vector->z * cos_theta);

  00051	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00054	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00058	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0005f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00067	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0006c	f3 0f 59 4d fc	 mulss	 xmm1, DWORD PTR _cos_theta$[ebp]
  00071	f3 0f 58 c1	 addss	 xmm0, xmm1
  00075	f3 0f 11 45 f4	 movss	 DWORD PTR _result$[ebp+8], xmm0

; 1995 : 
; 1996 : 	vector->x = result.x;

  0007a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0007d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _result$[ebp]
  00082	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1997 : 	vector->z = result.z;

  00086	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00089	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _result$[ebp+8]
  0008e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1998 : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
?rotate_3d_vector@@YGXPAUVEC3D@@M@Z ENDP		; rotate_3d_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?rotate_2d_vector@@YGXPAUVEC2D@@M@Z
_TEXT	SEGMENT
_result$ = -16						; size = 8
_sin_theta$ = -8					; size = 4
_cos_theta$ = -4					; size = 4
_vector$ = 8						; size = 4
_theta$ = 12						; size = 4
?rotate_2d_vector@@YGXPAUVEC2D@@M@Z PROC		; rotate_2d_vector, COMDAT

; 1959 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1960 : 	float
; 1961 : 		cos_theta,
; 1962 : 		sin_theta;
; 1963 : 
; 1964 : 	vec2d
; 1965 : 		result;
; 1966 : 
; 1967 : 	cos_theta = cos (theta);

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _theta$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00019	d9 5d fc	 fstp	 DWORD PTR _cos_theta$[ebp]

; 1968 : 	sin_theta = sin (theta);

  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0002c	d9 5d f8	 fstp	 DWORD PTR _sin_theta$[ebp]

; 1969 : 
; 1970 : 	result.x = (vector->x * cos_theta) + (vector->y * sin_theta);

  0002f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00032	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00036	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0003e	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00043	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _sin_theta$[ebp]
  00048	f3 0f 58 c1	 addss	 xmm0, xmm1
  0004c	f3 0f 11 45 f0	 movss	 DWORD PTR _result$[ebp], xmm0

; 1971 : 	result.y = (-vector->x * sin_theta) + (vector->y * cos_theta);

  00051	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00054	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00058	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0005f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00067	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0006c	f3 0f 59 4d fc	 mulss	 xmm1, DWORD PTR _cos_theta$[ebp]
  00071	f3 0f 58 c1	 addss	 xmm0, xmm1
  00075	f3 0f 11 45 f4	 movss	 DWORD PTR _result$[ebp+4], xmm0

; 1972 : 
; 1973 : 	vector->x = result.x;

  0007a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0007d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _result$[ebp]
  00082	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1974 : 	vector->y = result.y;

  00086	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00089	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _result$[ebp+4]
  0008e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1975 : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
?rotate_2d_vector@@YGXPAUVEC2D@@M@Z ENDP		; rotate_2d_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?invert_3d_vector@@YGXPAUVEC3D@@@Z
_TEXT	SEGMENT
_vector$ = 8						; size = 4
?invert_3d_vector@@YGXPAUVEC3D@@@Z PROC			; invert_3d_vector, COMDAT

; 1947 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1948 : 
; 1949 : 	vector->x = -vector->x;

  00009	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0000c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00010	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0001a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1950 : 	vector->y = -vector->y;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00021	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00026	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00030	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1951 : 	vector->z = -vector->z;

  00035	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00038	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0003d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00047	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1952 : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?invert_3d_vector@@YGXPAUVEC3D@@@Z ENDP			; invert_3d_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU1@1@Z
_TEXT	SEGMENT
tv554 = -216						; size = 8
_vec_id$ = -144						; size = 12
_vec_ic$ = -132						; size = 12
_vec_ib$ = -120						; size = 12
_vec_ia$ = -108						; size = 12
_vec_12$ = -96						; size = 12
_vec_ac$ = -84						; size = 12
_vec_ab$ = -72						; size = 12
_total$ = -60						; size = 4
_acos_angle_cid$ = -56					; size = 4
_acos_angle_bic$ = -52					; size = 4
_acos_angle_aid$ = -48					; size = 4
_acos_angle_aic$ = -44					; size = 4
_acos_angle_aib$ = -40					; size = 4
_angle_cid$ = -36					; size = 4
_angle_bic$ = -32					; size = 4
_angle_aid$ = -28					; size = 4
_angle_aic$ = -24					; size = 4
_angle_aib$ = -20					; size = 4
_mu$ = -16						; size = 4
_denom$ = -12						; size = 4
_d$ = -8						; size = 4
_length$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_pa$ = 16						; size = 4
_pb$ = 20						; size = 4
_pc$ = 24						; size = 4
_pd$ = 28						; size = 4
_pi$ = 32						; size = 4
_ni$ = 36						; size = 4
?get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU1@1@Z PROC ; get_3d_line_quad_intersection, COMDAT

; 1720 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1721 : 	float
; 1722 : 		length,
; 1723 : 		d,
; 1724 : 		denom,
; 1725 : 		mu,
; 1726 : 		angle_aib,
; 1727 : 		angle_aic,
; 1728 : 		angle_aid,
; 1729 : 		angle_bic,
; 1730 : 		angle_cid,
; 1731 : 		acos_angle_aib,
; 1732 : 		acos_angle_aic,
; 1733 : 		acos_angle_aid,
; 1734 : 		acos_angle_bic,
; 1735 : 		acos_angle_cid,
; 1736 : 		total;
; 1737 : 
; 1738 : 	vec3d
; 1739 : 		vec_ab,
; 1740 : 		vec_ac,
; 1741 : 		vec_12,
; 1742 : 		vec_ia,
; 1743 : 		vec_ib,
; 1744 : 		vec_ic,
; 1745 : 		vec_id;
; 1746 : 
; 1747 : 	ASSERT (p1);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _p1$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@get_3d_lin
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA
  00017	83 c0 1b	 add	 eax, 27			; 0000001bH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02JCBCEJAP@p1@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_lin:

; 1748 : 	ASSERT (p2);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _p2$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@get_3d_lin
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA
  00035	83 c0 1c	 add	 eax, 28			; 0000001cH
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_02LJDPBKMM@p2@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_lin:

; 1749 : 	ASSERT (pa);

  00048	83 7d 10 00	 cmp	 DWORD PTR _pa$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN4@get_3d_lin
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA
  00053	83 c0 1d	 add	 eax, 29			; 0000001dH
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_02CIKJBEFL@pa@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_3d_lin:

; 1750 : 	ASSERT (pb);

  00066	83 7d 14 00	 cmp	 DWORD PTR _pb$[ebp], 0
  0006a	75 18		 jne	 SHORT $LN5@get_3d_lin
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA
  00071	83 c0 1e	 add	 eax, 30			; 0000001eH
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_02DIEEHJI@pb@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_3d_lin:

; 1751 : 	ASSERT (pc);

  00084	83 7d 18 00	 cmp	 DWORD PTR _pc$[ebp], 0
  00088	75 18		 jne	 SHORT $LN6@get_3d_lin
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA
  0008f	83 c0 1f	 add	 eax, 31			; 0000001fH
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_02BKJPHGNJ@pc@
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_3d_lin:

; 1752 : 	ASSERT (pd);

  000a2	83 7d 1c 00	 cmp	 DWORD PTR _pd$[ebp], 0
  000a6	75 18		 jne	 SHORT $LN7@get_3d_lin
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA
  000ad	83 c0 20	 add	 eax, 32			; 00000020H
  000b0	50		 push	 eax
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_02FFNOOABO@pd@
  000bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@get_3d_lin:

; 1753 : 	ASSERT (pi);

  000c0	83 7d 20 00	 cmp	 DWORD PTR _pi$[ebp], 0
  000c4	75 18		 jne	 SHORT $LN8@get_3d_lin
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA
  000cb	83 c0 21	 add	 eax, 33			; 00000021H
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_02OAHAJOFD@pi@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@get_3d_lin:

; 1754 : 	ASSERT (ni);

  000de	83 7d 24 00	 cmp	 DWORD PTR _ni$[ebp], 0
  000e2	75 18		 jne	 SHORT $LN9@get_3d_lin
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU2@1@Z@4JA
  000e9	83 c0 22	 add	 eax, 34			; 00000022H
  000ec	50		 push	 eax
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_02PGMIBACJ@ni@
  000f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@get_3d_lin:

; 1755 : 
; 1756 : 	////////////////////////////////////////
; 1757 : 
; 1758 : 	vec_ab.x = pb->x - pa->x;

  000fc	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  000ff	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  00102	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00106	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0010a	f3 0f 11 45 b8	 movss	 DWORD PTR _vec_ab$[ebp], xmm0

; 1759 : 	vec_ab.y = pb->y - pa->y;

  0010f	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  00112	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  00115	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0011a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  0011f	f3 0f 11 45 bc	 movss	 DWORD PTR _vec_ab$[ebp+4], xmm0

; 1760 : 	vec_ab.z = pb->z - pa->z;

  00124	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  00127	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  0012a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0012f	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00134	f3 0f 11 45 c0	 movss	 DWORD PTR _vec_ab$[ebp+8], xmm0

; 1761 : 
; 1762 : 	vec_ac.x = pc->x - pa->x;

  00139	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  0013c	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  0013f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00143	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00147	f3 0f 11 45 ac	 movss	 DWORD PTR _vec_ac$[ebp], xmm0

; 1763 : 	vec_ac.y = pc->y - pa->y;

  0014c	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  0014f	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  00152	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00157	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  0015c	f3 0f 11 45 b0	 movss	 DWORD PTR _vec_ac$[ebp+4], xmm0

; 1764 : 	vec_ac.z = pc->z - pa->z;

  00161	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  00164	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  00167	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0016c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00171	f3 0f 11 45 b4	 movss	 DWORD PTR _vec_ac$[ebp+8], xmm0

; 1765 : 
; 1766 : 	ni->x = (vec_ab.y * vec_ac.z) - (vec_ab.z * vec_ac.y);

  00176	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _vec_ab$[ebp+4]
  0017b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _vec_ac$[ebp+8]
  00180	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _vec_ab$[ebp+8]
  00185	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _vec_ac$[ebp+4]
  0018a	f3 0f 5c c1	 subss	 xmm0, xmm1
  0018e	8b 45 24	 mov	 eax, DWORD PTR _ni$[ebp]
  00191	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1767 : 	ni->y = (vec_ab.z * vec_ac.x) - (vec_ab.x * vec_ac.z);

  00195	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _vec_ab$[ebp+8]
  0019a	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _vec_ac$[ebp]
  0019f	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _vec_ab$[ebp]
  001a4	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _vec_ac$[ebp+8]
  001a9	f3 0f 5c c1	 subss	 xmm0, xmm1
  001ad	8b 45 24	 mov	 eax, DWORD PTR _ni$[ebp]
  001b0	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1768 : 	ni->z = (vec_ab.x * vec_ac.y) - (vec_ab.y * vec_ac.x);

  001b5	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _vec_ab$[ebp]
  001ba	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _vec_ac$[ebp+4]
  001bf	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _vec_ab$[ebp+4]
  001c4	f3 0f 59 4d ac	 mulss	 xmm1, DWORD PTR _vec_ac$[ebp]
  001c9	f3 0f 5c c1	 subss	 xmm0, xmm1
  001cd	8b 45 24	 mov	 eax, DWORD PTR _ni$[ebp]
  001d0	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1769 : 
; 1770 : 	length = sqrt ((ni->x * ni->x) + (ni->y * ni->y) + (ni->z * ni->z));

  001d5	8b 45 24	 mov	 eax, DWORD PTR _ni$[ebp]
  001d8	8b 4d 24	 mov	 ecx, DWORD PTR _ni$[ebp]
  001db	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001df	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  001e3	8b 55 24	 mov	 edx, DWORD PTR _ni$[ebp]
  001e6	8b 45 24	 mov	 eax, DWORD PTR _ni$[ebp]
  001e9	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  001ee	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  001f3	f3 0f 58 c1	 addss	 xmm0, xmm1
  001f7	8b 4d 24	 mov	 ecx, DWORD PTR _ni$[ebp]
  001fa	8b 55 24	 mov	 edx, DWORD PTR _ni$[ebp]
  001fd	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00202	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  00207	f3 0f 58 c1	 addss	 xmm0, xmm1
  0020b	51		 push	 ecx
  0020c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00211	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00216	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 1771 : 
; 1772 : 	if (length == 0.0)

  00219	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0021e	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00226	9f		 lahf
  00227	f6 c4 44	 test	 ah, 68			; 00000044H
  0022a	7a 07		 jp	 SHORT $LN10@get_3d_lin

; 1773 : 	{
; 1774 : 		return (FALSE);

  0022c	33 c0		 xor	 eax, eax
  0022e	e9 37 06 00 00	 jmp	 $LN1@get_3d_lin
$LN10@get_3d_lin:

; 1775 : 	}
; 1776 : 
; 1777 : 	normalise_3d_vector_given_magnitude (ni, length);

  00233	51		 push	 ecx
  00234	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _length$[ebp]
  00239	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023e	8b 45 24	 mov	 eax, DWORD PTR _ni$[ebp]
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 1778 : 
; 1779 : 	////////////////////////////////////////
; 1780 : 
; 1781 : 	d = - (ni->x * pa->x) - (ni->y * pa->y) - (ni->z * pa->z);

  00247	8b 45 24	 mov	 eax, DWORD PTR _ni$[ebp]
  0024a	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  0024d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00251	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00255	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0025c	8b 55 24	 mov	 edx, DWORD PTR _ni$[ebp]
  0025f	8b 45 10	 mov	 eax, DWORD PTR _pa$[ebp]
  00262	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00267	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  0026c	f3 0f 5c c1	 subss	 xmm0, xmm1
  00270	8b 4d 24	 mov	 ecx, DWORD PTR _ni$[ebp]
  00273	8b 55 10	 mov	 edx, DWORD PTR _pa$[ebp]
  00276	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0027b	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  00280	f3 0f 5c c1	 subss	 xmm0, xmm1
  00284	f3 0f 11 45 f8	 movss	 DWORD PTR _d$[ebp], xmm0

; 1782 : 
; 1783 : 	////////////////////////////////////////
; 1784 : 
; 1785 : 	vec_12.x = p2->x - p1->x;

  00289	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  0028c	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0028f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00293	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00297	f3 0f 11 45 a0	 movss	 DWORD PTR _vec_12$[ebp], xmm0

; 1786 : 	vec_12.y = p2->y - p1->y;

  0029c	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  0029f	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  002a2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  002a7	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  002ac	f3 0f 11 45 a4	 movss	 DWORD PTR _vec_12$[ebp+4], xmm0

; 1787 : 	vec_12.z = p2->z - p1->z;

  002b1	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  002b4	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  002b7	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  002bc	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  002c1	f3 0f 11 45 a8	 movss	 DWORD PTR _vec_12$[ebp+8], xmm0

; 1788 : 
; 1789 : 	denom = (ni->x * vec_12.x) + (ni->y * vec_12.y) + (ni->z * vec_12.z);

  002c6	8b 45 24	 mov	 eax, DWORD PTR _ni$[ebp]
  002c9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002cd	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _vec_12$[ebp]
  002d2	8b 4d 24	 mov	 ecx, DWORD PTR _ni$[ebp]
  002d5	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  002da	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _vec_12$[ebp+4]
  002df	f3 0f 58 c1	 addss	 xmm0, xmm1
  002e3	8b 55 24	 mov	 edx, DWORD PTR _ni$[ebp]
  002e6	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  002eb	f3 0f 59 4d a8	 mulss	 xmm1, DWORD PTR _vec_12$[ebp+8]
  002f0	f3 0f 58 c1	 addss	 xmm0, xmm1
  002f4	f3 0f 11 45 f4	 movss	 DWORD PTR _denom$[ebp], xmm0

; 1790 : 
; 1791 : 	if (fabs (denom) == 0.0)

  002f9	51		 push	 ecx
  002fa	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _denom$[ebp]
  002ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00304	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00309	dd 9d 28 ff ff
	ff		 fstp	 QWORD PTR tv554[ebp]
  0030f	f2 0f 10 85 28
	ff ff ff	 movsd	 xmm0, QWORD PTR tv554[ebp]
  00317	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0031f	9f		 lahf
  00320	f6 c4 44	 test	 ah, 68			; 00000044H
  00323	7a 07		 jp	 SHORT $LN11@get_3d_lin

; 1792 : 	{
; 1793 : 		return (FALSE);

  00325	33 c0		 xor	 eax, eax
  00327	e9 3e 05 00 00	 jmp	 $LN1@get_3d_lin
$LN11@get_3d_lin:

; 1794 : 	}
; 1795 : 
; 1796 : 	////////////////////////////////////////
; 1797 : 
; 1798 : 	mu = - (d + (ni->x * p1->x) + (ni->y * p1->y) + (ni->z * p1->z)) / denom;

  0032c	8b 45 24	 mov	 eax, DWORD PTR _ni$[ebp]
  0032f	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00332	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00336	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0033a	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _d$[ebp]
  0033f	8b 55 24	 mov	 edx, DWORD PTR _ni$[ebp]
  00342	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00345	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  0034a	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  0034f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00353	8b 4d 24	 mov	 ecx, DWORD PTR _ni$[ebp]
  00356	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00359	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0035e	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  00363	f3 0f 58 c1	 addss	 xmm0, xmm1
  00367	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0036e	f3 0f 5e 45 f4	 divss	 xmm0, DWORD PTR _denom$[ebp]
  00373	f3 0f 11 45 f0	 movss	 DWORD PTR _mu$[ebp], xmm0

; 1799 : 
; 1800 : 	if ((mu < 0.0) || (mu > 1.0))

  00378	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _mu$[ebp]
  0037d	0f 57 c9	 xorps	 xmm1, xmm1
  00380	66 0f 2f c8	 comisd	 xmm1, xmm0
  00384	77 0f		 ja	 SHORT $LN13@get_3d_lin
  00386	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _mu$[ebp]
  0038b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00393	76 07		 jbe	 SHORT $LN12@get_3d_lin
$LN13@get_3d_lin:

; 1801 : 	{
; 1802 : 		return (FALSE);

  00395	33 c0		 xor	 eax, eax
  00397	e9 ce 04 00 00	 jmp	 $LN1@get_3d_lin
$LN12@get_3d_lin:

; 1803 : 	}
; 1804 : 
; 1805 : 	////////////////////////////////////////
; 1806 : 
; 1807 : 	pi->x = p1->x + mu * (vec_12.x);

  0039c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mu$[ebp]
  003a1	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _vec_12$[ebp]
  003a6	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003a9	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  003ad	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  003b0	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1808 : 	pi->y = p1->y + mu * (vec_12.y);

  003b4	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mu$[ebp]
  003b9	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _vec_12$[ebp+4]
  003be	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003c1	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  003c6	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  003c9	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1809 : 	pi->z = p1->z + mu * (vec_12.z);

  003ce	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mu$[ebp]
  003d3	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR _vec_12$[ebp+8]
  003d8	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003db	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  003e0	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  003e3	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1810 : 
; 1811 : 	////////////////////////////////////////
; 1812 : 
; 1813 : 	vec_ia.x = pa->x - pi->x;

  003e8	8b 45 10	 mov	 eax, DWORD PTR _pa$[ebp]
  003eb	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  003ee	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f2	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  003f6	f3 0f 11 45 94	 movss	 DWORD PTR _vec_ia$[ebp], xmm0

; 1814 : 	vec_ia.y = pa->y - pi->y;

  003fb	8b 45 10	 mov	 eax, DWORD PTR _pa$[ebp]
  003fe	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  00401	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00406	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  0040b	f3 0f 11 45 98	 movss	 DWORD PTR _vec_ia$[ebp+4], xmm0

; 1815 : 	vec_ia.z = pa->z - pi->z;

  00410	8b 45 10	 mov	 eax, DWORD PTR _pa$[ebp]
  00413	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  00416	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0041b	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00420	f3 0f 11 45 9c	 movss	 DWORD PTR _vec_ia$[ebp+8], xmm0

; 1816 : 
; 1817 : 	length = sqrt ((vec_ia.x * vec_ia.x) + (vec_ia.y * vec_ia.y) + (vec_ia.z * vec_ia.z));

  00425	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _vec_ia$[ebp]
  0042a	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _vec_ia$[ebp]
  0042f	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _vec_ia$[ebp+4]
  00434	f3 0f 59 4d 98	 mulss	 xmm1, DWORD PTR _vec_ia$[ebp+4]
  00439	f3 0f 58 c1	 addss	 xmm0, xmm1
  0043d	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _vec_ia$[ebp+8]
  00442	f3 0f 59 4d 9c	 mulss	 xmm1, DWORD PTR _vec_ia$[ebp+8]
  00447	f3 0f 58 c1	 addss	 xmm0, xmm1
  0044b	51		 push	 ecx
  0044c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00451	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00456	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 1818 : 
; 1819 : 	if (length == 0.0)

  00459	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0045e	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00466	9f		 lahf
  00467	f6 c4 44	 test	 ah, 68			; 00000044H
  0046a	7a 0a		 jp	 SHORT $LN14@get_3d_lin

; 1820 : 	{
; 1821 : 		#if DEBUG_MODULE_LINE_TRIANGLE_INTERCEPT
; 1822 : 
; 1823 : 		debug_log ("Collision triangle ABC");
; 1824 : 
; 1825 : 		#endif
; 1826 : 
; 1827 : 		return (TRUE);

  0046c	b8 01 00 00 00	 mov	 eax, 1
  00471	e9 f4 03 00 00	 jmp	 $LN1@get_3d_lin
$LN14@get_3d_lin:

; 1828 : 	}
; 1829 : 
; 1830 : 	normalise_3d_vector_given_magnitude (&vec_ia, length);

  00476	51		 push	 ecx
  00477	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _length$[ebp]
  0047c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00481	8d 45 94	 lea	 eax, DWORD PTR _vec_ia$[ebp]
  00484	50		 push	 eax
  00485	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 1831 : 
; 1832 : 	////////////////////////////////////////
; 1833 : 
; 1834 : 	vec_ib.x = pb->x - pi->x;

  0048a	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  0048d	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  00490	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00494	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00498	f3 0f 11 45 88	 movss	 DWORD PTR _vec_ib$[ebp], xmm0

; 1835 : 	vec_ib.y = pb->y - pi->y;

  0049d	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  004a0	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  004a3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  004a8	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  004ad	f3 0f 11 45 8c	 movss	 DWORD PTR _vec_ib$[ebp+4], xmm0

; 1836 : 	vec_ib.z = pb->z - pi->z;

  004b2	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  004b5	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  004b8	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004bd	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  004c2	f3 0f 11 45 90	 movss	 DWORD PTR _vec_ib$[ebp+8], xmm0

; 1837 : 
; 1838 : 	length = sqrt ((vec_ib.x * vec_ib.x) + (vec_ib.y * vec_ib.y) + (vec_ib.z * vec_ib.z));

  004c7	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _vec_ib$[ebp]
  004cc	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _vec_ib$[ebp]
  004d1	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _vec_ib$[ebp+4]
  004d6	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _vec_ib$[ebp+4]
  004db	f3 0f 58 c1	 addss	 xmm0, xmm1
  004df	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _vec_ib$[ebp+8]
  004e4	f3 0f 59 4d 90	 mulss	 xmm1, DWORD PTR _vec_ib$[ebp+8]
  004e9	f3 0f 58 c1	 addss	 xmm0, xmm1
  004ed	51		 push	 ecx
  004ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f3	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  004f8	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 1839 : 
; 1840 : 	if (length == 0.0)

  004fb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00500	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00508	9f		 lahf
  00509	f6 c4 44	 test	 ah, 68			; 00000044H
  0050c	7a 0a		 jp	 SHORT $LN15@get_3d_lin

; 1841 : 	{
; 1842 : 		#if DEBUG_MODULE_LINE_TRIANGLE_INTERCEPT
; 1843 : 
; 1844 : 		debug_log ("Collision triangle ABC");
; 1845 : 
; 1846 : 		#endif
; 1847 : 
; 1848 : 		return (TRUE);

  0050e	b8 01 00 00 00	 mov	 eax, 1
  00513	e9 52 03 00 00	 jmp	 $LN1@get_3d_lin
$LN15@get_3d_lin:

; 1849 : 	}
; 1850 : 
; 1851 : 	normalise_3d_vector_given_magnitude (&vec_ib, length);

  00518	51		 push	 ecx
  00519	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _length$[ebp]
  0051e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00523	8d 45 88	 lea	 eax, DWORD PTR _vec_ib$[ebp]
  00526	50		 push	 eax
  00527	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 1852 : 
; 1853 : 	////////////////////////////////////////
; 1854 : 
; 1855 : 	vec_ic.x = pc->x - pi->x;

  0052c	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  0052f	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  00532	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00536	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0053a	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _vec_ic$[ebp], xmm0

; 1856 : 	vec_ic.y = pc->y - pi->y;

  00542	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  00545	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  00548	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0054d	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00552	f3 0f 11 45 80	 movss	 DWORD PTR _vec_ic$[ebp+4], xmm0

; 1857 : 	vec_ic.z = pc->z - pi->z;

  00557	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  0055a	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  0055d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00562	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00567	f3 0f 11 45 84	 movss	 DWORD PTR _vec_ic$[ebp+8], xmm0

; 1858 : 
; 1859 : 	length = sqrt ((vec_ic.x * vec_ic.x) + (vec_ic.y * vec_ic.y) + (vec_ic.z * vec_ic.z));

  0056c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _vec_ic$[ebp]
  00574	f3 0f 59 85 7c
	ff ff ff	 mulss	 xmm0, DWORD PTR _vec_ic$[ebp]
  0057c	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR _vec_ic$[ebp+4]
  00581	f3 0f 59 4d 80	 mulss	 xmm1, DWORD PTR _vec_ic$[ebp+4]
  00586	f3 0f 58 c1	 addss	 xmm0, xmm1
  0058a	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _vec_ic$[ebp+8]
  0058f	f3 0f 59 4d 84	 mulss	 xmm1, DWORD PTR _vec_ic$[ebp+8]
  00594	f3 0f 58 c1	 addss	 xmm0, xmm1
  00598	51		 push	 ecx
  00599	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059e	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  005a3	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 1860 : 
; 1861 : 	if (length == 0.0)

  005a6	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  005ab	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  005b3	9f		 lahf
  005b4	f6 c4 44	 test	 ah, 68			; 00000044H
  005b7	7a 0a		 jp	 SHORT $LN16@get_3d_lin

; 1862 : 	{
; 1863 : 		#if DEBUG_MODULE_LINE_TRIANGLE_INTERCEPT
; 1864 : 
; 1865 : 		debug_log ("Collision triangle ABC");
; 1866 : 
; 1867 : 		#endif
; 1868 : 
; 1869 : 		return (TRUE);

  005b9	b8 01 00 00 00	 mov	 eax, 1
  005be	e9 a7 02 00 00	 jmp	 $LN1@get_3d_lin
$LN16@get_3d_lin:

; 1870 : 	}
; 1871 : 
; 1872 : 	normalise_3d_vector_given_magnitude (&vec_ic, length);

  005c3	51		 push	 ecx
  005c4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _length$[ebp]
  005c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ce	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _vec_ic$[ebp]
  005d4	50		 push	 eax
  005d5	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 1873 : 
; 1874 : 	////////////////////////////////////////
; 1875 : 
; 1876 : 	angle_aib = (vec_ia.x * vec_ib.x) + (vec_ia.y * vec_ib.y) + (vec_ia.z * vec_ib.z);

  005da	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _vec_ia$[ebp]
  005df	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _vec_ib$[ebp]
  005e4	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _vec_ia$[ebp+4]
  005e9	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _vec_ib$[ebp+4]
  005ee	f3 0f 58 c1	 addss	 xmm0, xmm1
  005f2	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _vec_ia$[ebp+8]
  005f7	f3 0f 59 4d 90	 mulss	 xmm1, DWORD PTR _vec_ib$[ebp+8]
  005fc	f3 0f 58 c1	 addss	 xmm0, xmm1
  00600	f3 0f 11 45 ec	 movss	 DWORD PTR _angle_aib$[ebp], xmm0

; 1877 : 	angle_bic = (vec_ib.x * vec_ic.x) + (vec_ib.y * vec_ic.y) + (vec_ib.z * vec_ic.z);

  00605	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _vec_ib$[ebp]
  0060a	f3 0f 59 85 7c
	ff ff ff	 mulss	 xmm0, DWORD PTR _vec_ic$[ebp]
  00612	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _vec_ib$[ebp+4]
  00617	f3 0f 59 4d 80	 mulss	 xmm1, DWORD PTR _vec_ic$[ebp+4]
  0061c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00620	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _vec_ib$[ebp+8]
  00625	f3 0f 59 4d 84	 mulss	 xmm1, DWORD PTR _vec_ic$[ebp+8]
  0062a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0062e	f3 0f 11 45 e0	 movss	 DWORD PTR _angle_bic$[ebp], xmm0

; 1878 : 	angle_aic = (vec_ic.x * vec_ia.x) + (vec_ic.y * vec_ia.y) + (vec_ic.z * vec_ia.z);

  00633	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _vec_ic$[ebp]
  0063b	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _vec_ia$[ebp]
  00640	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR _vec_ic$[ebp+4]
  00645	f3 0f 59 4d 98	 mulss	 xmm1, DWORD PTR _vec_ia$[ebp+4]
  0064a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0064e	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _vec_ic$[ebp+8]
  00653	f3 0f 59 4d 9c	 mulss	 xmm1, DWORD PTR _vec_ia$[ebp+8]
  00658	f3 0f 58 c1	 addss	 xmm0, xmm1
  0065c	f3 0f 11 45 e8	 movss	 DWORD PTR _angle_aic$[ebp], xmm0

; 1879 : 
; 1880 : 	acos_angle_aib = acos (angle_aib);

  00661	51		 push	 ecx
  00662	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _angle_aib$[ebp]
  00667	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066c	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  00671	d9 5d d8	 fstp	 DWORD PTR _acos_angle_aib$[ebp]

; 1881 : 	acos_angle_bic = acos (angle_bic);

  00674	51		 push	 ecx
  00675	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _angle_bic$[ebp]
  0067a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067f	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  00684	d9 5d cc	 fstp	 DWORD PTR _acos_angle_bic$[ebp]

; 1882 : 	acos_angle_aic = acos (angle_aic);

  00687	51		 push	 ecx
  00688	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _angle_aic$[ebp]
  0068d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00692	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  00697	d9 5d d4	 fstp	 DWORD PTR _acos_angle_aic$[ebp]

; 1883 : 
; 1884 : 	total = acos_angle_aib + acos_angle_bic + acos_angle_aic;

  0069a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _acos_angle_aib$[ebp]
  0069f	f3 0f 58 45 cc	 addss	 xmm0, DWORD PTR _acos_angle_bic$[ebp]
  006a4	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _acos_angle_aic$[ebp]
  006a9	f3 0f 11 45 c4	 movss	 DWORD PTR _total$[ebp], xmm0

; 1885 : 
; 1886 : 	if ((total < (-PI2 + 0.01)) || (total > (PI2 - 0.01)))

  006ae	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _total$[ebp]
  006b3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c01917bdef5c28f6
  006bb	66 0f 2f c8	 comisd	 xmm1, xmm0
  006bf	77 0f		 ja	 SHORT $LN18@get_3d_lin
  006c1	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _total$[ebp]
  006c6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@401917bdef5c28f6
  006ce	76 0a		 jbe	 SHORT $LN17@get_3d_lin
$LN18@get_3d_lin:

; 1887 : 	{
; 1888 : 		#if DEBUG_MODULE_LINE_TRIANGLE_INTERCEPT
; 1889 : 
; 1890 : 		debug_log ("Collision triangle ABC");
; 1891 : 
; 1892 : 		#endif
; 1893 : 
; 1894 : 		return (TRUE);

  006d0	b8 01 00 00 00	 mov	 eax, 1
  006d5	e9 90 01 00 00	 jmp	 $LN1@get_3d_lin
$LN17@get_3d_lin:

; 1895 : 	}
; 1896 : 
; 1897 : 	////////////////////////////////////////
; 1898 : 
; 1899 : 	vec_id.x = pd->x - pi->x;

  006da	8b 45 1c	 mov	 eax, DWORD PTR _pd$[ebp]
  006dd	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  006e0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006e4	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  006e8	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _vec_id$[ebp], xmm0

; 1900 : 	vec_id.y = pd->y - pi->y;

  006f0	8b 45 1c	 mov	 eax, DWORD PTR _pd$[ebp]
  006f3	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  006f6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  006fb	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00700	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _vec_id$[ebp+4], xmm0

; 1901 : 	vec_id.z = pd->z - pi->z;

  00708	8b 45 1c	 mov	 eax, DWORD PTR _pd$[ebp]
  0070b	8b 4d 20	 mov	 ecx, DWORD PTR _pi$[ebp]
  0070e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00713	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00718	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _vec_id$[ebp+8], xmm0

; 1902 : 
; 1903 : 	length = sqrt ((vec_id.x * vec_id.x) + (vec_id.y * vec_id.y) + (vec_id.z * vec_id.z));

  00720	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _vec_id$[ebp]
  00728	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _vec_id$[ebp]
  00730	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _vec_id$[ebp+4]
  00738	f3 0f 59 8d 74
	ff ff ff	 mulss	 xmm1, DWORD PTR _vec_id$[ebp+4]
  00740	f3 0f 58 c1	 addss	 xmm0, xmm1
  00744	f3 0f 10 8d 78
	ff ff ff	 movss	 xmm1, DWORD PTR _vec_id$[ebp+8]
  0074c	f3 0f 59 8d 78
	ff ff ff	 mulss	 xmm1, DWORD PTR _vec_id$[ebp+8]
  00754	f3 0f 58 c1	 addss	 xmm0, xmm1
  00758	51		 push	 ecx
  00759	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075e	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00763	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 1904 : 
; 1905 : 	if (length == 0.0)

  00766	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0076b	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00773	9f		 lahf
  00774	f6 c4 44	 test	 ah, 68			; 00000044H
  00777	7a 0a		 jp	 SHORT $LN19@get_3d_lin

; 1906 : 	{
; 1907 : 		#if DEBUG_MODULE_LINE_TRIANGLE_INTERCEPT
; 1908 : 
; 1909 : 		debug_log ("Collision triangle ACD");
; 1910 : 
; 1911 : 		#endif
; 1912 : 
; 1913 : 		return (TRUE);

  00779	b8 01 00 00 00	 mov	 eax, 1
  0077e	e9 e7 00 00 00	 jmp	 $LN1@get_3d_lin
$LN19@get_3d_lin:

; 1914 : 	}
; 1915 : 
; 1916 : 	normalise_3d_vector_given_magnitude (&vec_id, length);

  00783	51		 push	 ecx
  00784	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _length$[ebp]
  00789	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078e	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _vec_id$[ebp]
  00794	50		 push	 eax
  00795	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 1917 : 
; 1918 : 	////////////////////////////////////////
; 1919 : 
; 1920 : 	angle_cid = (vec_ic.x * vec_id.x) + (vec_ic.y * vec_id.y) + (vec_ic.z * vec_id.z);

  0079a	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _vec_ic$[ebp]
  007a2	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _vec_id$[ebp]
  007aa	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR _vec_ic$[ebp+4]
  007af	f3 0f 59 8d 74
	ff ff ff	 mulss	 xmm1, DWORD PTR _vec_id$[ebp+4]
  007b7	f3 0f 58 c1	 addss	 xmm0, xmm1
  007bb	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _vec_ic$[ebp+8]
  007c0	f3 0f 59 8d 78
	ff ff ff	 mulss	 xmm1, DWORD PTR _vec_id$[ebp+8]
  007c8	f3 0f 58 c1	 addss	 xmm0, xmm1
  007cc	f3 0f 11 45 dc	 movss	 DWORD PTR _angle_cid$[ebp], xmm0

; 1921 : 	angle_aid = (vec_id.x * vec_ia.x) + (vec_id.y * vec_ia.y) + (vec_id.z * vec_ia.z);

  007d1	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _vec_id$[ebp]
  007d9	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _vec_ia$[ebp]
  007de	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _vec_id$[ebp+4]
  007e6	f3 0f 59 4d 98	 mulss	 xmm1, DWORD PTR _vec_ia$[ebp+4]
  007eb	f3 0f 58 c1	 addss	 xmm0, xmm1
  007ef	f3 0f 10 8d 78
	ff ff ff	 movss	 xmm1, DWORD PTR _vec_id$[ebp+8]
  007f7	f3 0f 59 4d 9c	 mulss	 xmm1, DWORD PTR _vec_ia$[ebp+8]
  007fc	f3 0f 58 c1	 addss	 xmm0, xmm1
  00800	f3 0f 11 45 e4	 movss	 DWORD PTR _angle_aid$[ebp], xmm0

; 1922 : 
; 1923 : 	acos_angle_cid = acos (angle_cid);

  00805	51		 push	 ecx
  00806	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _angle_cid$[ebp]
  0080b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00810	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  00815	d9 5d c8	 fstp	 DWORD PTR _acos_angle_cid$[ebp]

; 1924 : 	acos_angle_aid = acos (angle_aid);

  00818	51		 push	 ecx
  00819	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _angle_aid$[ebp]
  0081e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00823	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  00828	d9 5d d0	 fstp	 DWORD PTR _acos_angle_aid$[ebp]

; 1925 : 
; 1926 : 	total = acos_angle_aic + acos_angle_cid + acos_angle_aid;

  0082b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _acos_angle_aic$[ebp]
  00830	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _acos_angle_cid$[ebp]
  00835	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _acos_angle_aid$[ebp]
  0083a	f3 0f 11 45 c4	 movss	 DWORD PTR _total$[ebp], xmm0

; 1927 : 
; 1928 : 	if ((total < (-PI2 + 0.01)) || (total > (PI2 - 0.01)))

  0083f	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _total$[ebp]
  00844	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c01917bdef5c28f6
  0084c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00850	77 0f		 ja	 SHORT $LN21@get_3d_lin
  00852	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _total$[ebp]
  00857	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@401917bdef5c28f6
  0085f	76 07		 jbe	 SHORT $LN20@get_3d_lin
$LN21@get_3d_lin:

; 1929 : 	{
; 1930 : 		#if DEBUG_MODULE_LINE_TRIANGLE_INTERCEPT
; 1931 : 
; 1932 : 		debug_log ("Collision triangle ACD");
; 1933 : 
; 1934 : 		#endif
; 1935 : 
; 1936 : 		return (TRUE);

  00861	b8 01 00 00 00	 mov	 eax, 1
  00866	eb 02		 jmp	 SHORT $LN1@get_3d_lin
$LN20@get_3d_lin:

; 1937 : 	}
; 1938 : 
; 1939 : 	return (FALSE);

  00868	33 c0		 xor	 eax, eax
$LN1@get_3d_lin:

; 1940 : }

  0086a	5f		 pop	 edi
  0086b	5e		 pop	 esi
  0086c	5b		 pop	 ebx
  0086d	8b e5		 mov	 esp, ebp
  0086f	5d		 pop	 ebp
  00870	c2 20 00	 ret	 32			; 00000020H
?get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU1@1@Z ENDP ; get_3d_line_quad_intersection
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU1@1@Z
_TEXT	SEGMENT
tv476 = -188						; size = 8
_vec_ic$ = -116						; size = 12
_vec_ib$ = -104						; size = 12
_vec_ia$ = -92						; size = 12
_vec_12$ = -80						; size = 12
_vec_ac$ = -68						; size = 12
_vec_ab$ = -56						; size = 12
_total$ = -44						; size = 4
_acos_angle_bic$ = -40					; size = 4
_acos_angle_aic$ = -36					; size = 4
_acos_angle_aib$ = -32					; size = 4
_angle_bic$ = -28					; size = 4
_angle_aic$ = -24					; size = 4
_angle_aib$ = -20					; size = 4
_mu$ = -16						; size = 4
_denom$ = -12						; size = 4
_d$ = -8						; size = 4
_length$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_pa$ = 16						; size = 4
_pb$ = 20						; size = 4
_pc$ = 24						; size = 4
_pi$ = 28						; size = 4
_ni$ = 32						; size = 4
?get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU1@1@Z PROC ; get_3d_line_triangle_intersection, COMDAT

; 1535 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1536 : 	float
; 1537 : 		length,
; 1538 : 		d,
; 1539 : 		denom,
; 1540 : 		mu,
; 1541 : 		angle_aib,
; 1542 : 		angle_aic,
; 1543 : 		angle_bic,
; 1544 : 		acos_angle_aib,
; 1545 : 		acos_angle_aic,
; 1546 : 		acos_angle_bic,
; 1547 : 		total;
; 1548 : 
; 1549 : 	vec3d
; 1550 : 		vec_ab,
; 1551 : 		vec_ac,
; 1552 : 		vec_12,
; 1553 : 		vec_ia,
; 1554 : 		vec_ib,
; 1555 : 		vec_ic;
; 1556 : 
; 1557 : 	ASSERT (p1);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _p1$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@get_3d_lin
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU2@1@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02JCBCEJAP@p1@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_lin:

; 1558 : 	ASSERT (p2);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _p2$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@get_3d_lin
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU2@1@Z@4JA
  00035	83 c0 17	 add	 eax, 23			; 00000017H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_02LJDPBKMM@p2@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_lin:

; 1559 : 	ASSERT (pa);

  00048	83 7d 10 00	 cmp	 DWORD PTR _pa$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN4@get_3d_lin
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU2@1@Z@4JA
  00053	83 c0 18	 add	 eax, 24			; 00000018H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_02CIKJBEFL@pa@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_3d_lin:

; 1560 : 	ASSERT (pb);

  00066	83 7d 14 00	 cmp	 DWORD PTR _pb$[ebp], 0
  0006a	75 18		 jne	 SHORT $LN5@get_3d_lin
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU2@1@Z@4JA
  00071	83 c0 19	 add	 eax, 25			; 00000019H
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_02DIEEHJI@pb@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_3d_lin:

; 1561 : 	ASSERT (pc);

  00084	83 7d 18 00	 cmp	 DWORD PTR _pc$[ebp], 0
  00088	75 18		 jne	 SHORT $LN6@get_3d_lin
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU2@1@Z@4JA
  0008f	83 c0 1a	 add	 eax, 26			; 0000001aH
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_02BKJPHGNJ@pc@
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_3d_lin:

; 1562 : 	ASSERT (pi);

  000a2	83 7d 1c 00	 cmp	 DWORD PTR _pi$[ebp], 0
  000a6	75 18		 jne	 SHORT $LN7@get_3d_lin
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU2@1@Z@4JA
  000ad	83 c0 1b	 add	 eax, 27			; 0000001bH
  000b0	50		 push	 eax
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_02OAHAJOFD@pi@
  000bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@get_3d_lin:

; 1563 : 	ASSERT (ni);

  000c0	83 7d 20 00	 cmp	 DWORD PTR _ni$[ebp], 0
  000c4	75 18		 jne	 SHORT $LN8@get_3d_lin
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU2@1@Z@4JA
  000cb	83 c0 1c	 add	 eax, 28			; 0000001cH
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_02PGMIBACJ@ni@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@get_3d_lin:

; 1564 : 
; 1565 : 	////////////////////////////////////////
; 1566 : 
; 1567 : 	vec_ab.x = pb->x - pa->x;

  000de	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  000e1	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  000e4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000e8	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  000ec	f3 0f 11 45 c8	 movss	 DWORD PTR _vec_ab$[ebp], xmm0

; 1568 : 	vec_ab.y = pb->y - pa->y;

  000f1	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  000f4	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  000f7	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000fc	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00101	f3 0f 11 45 cc	 movss	 DWORD PTR _vec_ab$[ebp+4], xmm0

; 1569 : 	vec_ab.z = pb->z - pa->z;

  00106	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  00109	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  0010c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00111	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00116	f3 0f 11 45 d0	 movss	 DWORD PTR _vec_ab$[ebp+8], xmm0

; 1570 : 
; 1571 : 	vec_ac.x = pc->x - pa->x;

  0011b	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  0011e	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  00121	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00125	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00129	f3 0f 11 45 bc	 movss	 DWORD PTR _vec_ac$[ebp], xmm0

; 1572 : 	vec_ac.y = pc->y - pa->y;

  0012e	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  00131	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  00134	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00139	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  0013e	f3 0f 11 45 c0	 movss	 DWORD PTR _vec_ac$[ebp+4], xmm0

; 1573 : 	vec_ac.z = pc->z - pa->z;

  00143	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  00146	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  00149	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0014e	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00153	f3 0f 11 45 c4	 movss	 DWORD PTR _vec_ac$[ebp+8], xmm0

; 1574 : 
; 1575 : 	ni->x = (vec_ab.y * vec_ac.z) - (vec_ab.z * vec_ac.y);

  00158	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _vec_ab$[ebp+4]
  0015d	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _vec_ac$[ebp+8]
  00162	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _vec_ab$[ebp+8]
  00167	f3 0f 59 4d c0	 mulss	 xmm1, DWORD PTR _vec_ac$[ebp+4]
  0016c	f3 0f 5c c1	 subss	 xmm0, xmm1
  00170	8b 45 20	 mov	 eax, DWORD PTR _ni$[ebp]
  00173	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1576 : 	ni->y = (vec_ab.z * vec_ac.x) - (vec_ab.x * vec_ac.z);

  00177	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _vec_ab$[ebp+8]
  0017c	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _vec_ac$[ebp]
  00181	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _vec_ab$[ebp]
  00186	f3 0f 59 4d c4	 mulss	 xmm1, DWORD PTR _vec_ac$[ebp+8]
  0018b	f3 0f 5c c1	 subss	 xmm0, xmm1
  0018f	8b 45 20	 mov	 eax, DWORD PTR _ni$[ebp]
  00192	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1577 : 	ni->z = (vec_ab.x * vec_ac.y) - (vec_ab.y * vec_ac.x);

  00197	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _vec_ab$[ebp]
  0019c	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _vec_ac$[ebp+4]
  001a1	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR _vec_ab$[ebp+4]
  001a6	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _vec_ac$[ebp]
  001ab	f3 0f 5c c1	 subss	 xmm0, xmm1
  001af	8b 45 20	 mov	 eax, DWORD PTR _ni$[ebp]
  001b2	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1578 : 
; 1579 : 	length = sqrt ((ni->x * ni->x) + (ni->y * ni->y) + (ni->z * ni->z));

  001b7	8b 45 20	 mov	 eax, DWORD PTR _ni$[ebp]
  001ba	8b 4d 20	 mov	 ecx, DWORD PTR _ni$[ebp]
  001bd	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001c1	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  001c5	8b 55 20	 mov	 edx, DWORD PTR _ni$[ebp]
  001c8	8b 45 20	 mov	 eax, DWORD PTR _ni$[ebp]
  001cb	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  001d0	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  001d5	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d9	8b 4d 20	 mov	 ecx, DWORD PTR _ni$[ebp]
  001dc	8b 55 20	 mov	 edx, DWORD PTR _ni$[ebp]
  001df	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  001e4	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  001e9	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ed	51		 push	 ecx
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  001f8	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 1580 : 
; 1581 : 	if (length == 0.0)

  001fb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00200	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00208	9f		 lahf
  00209	f6 c4 44	 test	 ah, 68			; 00000044H
  0020c	7a 07		 jp	 SHORT $LN9@get_3d_lin

; 1582 : 	{
; 1583 : 		return (FALSE);

  0020e	33 c0		 xor	 eax, eax
  00210	e9 94 04 00 00	 jmp	 $LN1@get_3d_lin
$LN9@get_3d_lin:

; 1584 : 	}
; 1585 : 
; 1586 : 	normalise_3d_vector_given_magnitude (ni, length);

  00215	51		 push	 ecx
  00216	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _length$[ebp]
  0021b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00220	8b 45 20	 mov	 eax, DWORD PTR _ni$[ebp]
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 1587 : 
; 1588 : 	////////////////////////////////////////
; 1589 : 
; 1590 : 	d = - (ni->x * pa->x) - (ni->y * pa->y) - (ni->z * pa->z);

  00229	8b 45 20	 mov	 eax, DWORD PTR _ni$[ebp]
  0022c	8b 4d 10	 mov	 ecx, DWORD PTR _pa$[ebp]
  0022f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00233	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00237	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0023e	8b 55 20	 mov	 edx, DWORD PTR _ni$[ebp]
  00241	8b 45 10	 mov	 eax, DWORD PTR _pa$[ebp]
  00244	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00249	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  0024e	f3 0f 5c c1	 subss	 xmm0, xmm1
  00252	8b 4d 20	 mov	 ecx, DWORD PTR _ni$[ebp]
  00255	8b 55 10	 mov	 edx, DWORD PTR _pa$[ebp]
  00258	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0025d	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  00262	f3 0f 5c c1	 subss	 xmm0, xmm1
  00266	f3 0f 11 45 f8	 movss	 DWORD PTR _d$[ebp], xmm0

; 1591 : 
; 1592 : 	////////////////////////////////////////
; 1593 : 
; 1594 : 	vec_12.x = p2->x - p1->x;

  0026b	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  0026e	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00271	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00275	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00279	f3 0f 11 45 b0	 movss	 DWORD PTR _vec_12$[ebp], xmm0

; 1595 : 	vec_12.y = p2->y - p1->y;

  0027e	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00284	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00289	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  0028e	f3 0f 11 45 b4	 movss	 DWORD PTR _vec_12$[ebp+4], xmm0

; 1596 : 	vec_12.z = p2->z - p1->z;

  00293	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  00296	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00299	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0029e	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  002a3	f3 0f 11 45 b8	 movss	 DWORD PTR _vec_12$[ebp+8], xmm0

; 1597 : 
; 1598 : 	denom = (ni->x * vec_12.x) + (ni->y * vec_12.y) + (ni->z * vec_12.z);

  002a8	8b 45 20	 mov	 eax, DWORD PTR _ni$[ebp]
  002ab	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002af	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _vec_12$[ebp]
  002b4	8b 4d 20	 mov	 ecx, DWORD PTR _ni$[ebp]
  002b7	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  002bc	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _vec_12$[ebp+4]
  002c1	f3 0f 58 c1	 addss	 xmm0, xmm1
  002c5	8b 55 20	 mov	 edx, DWORD PTR _ni$[ebp]
  002c8	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  002cd	f3 0f 59 4d b8	 mulss	 xmm1, DWORD PTR _vec_12$[ebp+8]
  002d2	f3 0f 58 c1	 addss	 xmm0, xmm1
  002d6	f3 0f 11 45 f4	 movss	 DWORD PTR _denom$[ebp], xmm0

; 1599 : 
; 1600 : 	if (fabs (denom) == 0.0)

  002db	51		 push	 ecx
  002dc	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _denom$[ebp]
  002e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e6	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  002eb	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv476[ebp]
  002f1	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv476[ebp]
  002f9	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00301	9f		 lahf
  00302	f6 c4 44	 test	 ah, 68			; 00000044H
  00305	7a 07		 jp	 SHORT $LN10@get_3d_lin

; 1601 : 	{
; 1602 : 		return (FALSE);

  00307	33 c0		 xor	 eax, eax
  00309	e9 9b 03 00 00	 jmp	 $LN1@get_3d_lin
$LN10@get_3d_lin:

; 1603 : 	}
; 1604 : 
; 1605 : 	////////////////////////////////////////
; 1606 : 
; 1607 : 	mu = - (d + (ni->x * p1->x) + (ni->y * p1->y) + (ni->z * p1->z)) / denom;

  0030e	8b 45 20	 mov	 eax, DWORD PTR _ni$[ebp]
  00311	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00314	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00318	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0031c	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _d$[ebp]
  00321	8b 55 20	 mov	 edx, DWORD PTR _ni$[ebp]
  00324	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00327	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  0032c	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  00331	f3 0f 58 c1	 addss	 xmm0, xmm1
  00335	8b 4d 20	 mov	 ecx, DWORD PTR _ni$[ebp]
  00338	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  0033b	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00340	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  00345	f3 0f 58 c1	 addss	 xmm0, xmm1
  00349	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00350	f3 0f 5e 45 f4	 divss	 xmm0, DWORD PTR _denom$[ebp]
  00355	f3 0f 11 45 f0	 movss	 DWORD PTR _mu$[ebp], xmm0

; 1608 : 
; 1609 : 	if ((mu < 0.0) || (mu > 1.0))

  0035a	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _mu$[ebp]
  0035f	0f 57 c9	 xorps	 xmm1, xmm1
  00362	66 0f 2f c8	 comisd	 xmm1, xmm0
  00366	77 0f		 ja	 SHORT $LN12@get_3d_lin
  00368	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _mu$[ebp]
  0036d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00375	76 07		 jbe	 SHORT $LN11@get_3d_lin
$LN12@get_3d_lin:

; 1610 : 	{
; 1611 : 		return (FALSE);

  00377	33 c0		 xor	 eax, eax
  00379	e9 2b 03 00 00	 jmp	 $LN1@get_3d_lin
$LN11@get_3d_lin:

; 1612 : 	}
; 1613 : 
; 1614 : 	////////////////////////////////////////
; 1615 : 
; 1616 : 	pi->x = p1->x + mu * (vec_12.x);

  0037e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mu$[ebp]
  00383	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _vec_12$[ebp]
  00388	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0038b	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0038f	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  00392	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1617 : 	pi->y = p1->y + mu * (vec_12.y);

  00396	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mu$[ebp]
  0039b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _vec_12$[ebp+4]
  003a0	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003a3	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  003a8	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  003ab	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1618 : 	pi->z = p1->z + mu * (vec_12.z);

  003b0	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mu$[ebp]
  003b5	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _vec_12$[ebp+8]
  003ba	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003bd	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  003c2	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  003c5	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1619 : 
; 1620 : 	////////////////////////////////////////
; 1621 : 
; 1622 : 	vec_ia.x = pa->x - pi->x;

  003ca	8b 45 10	 mov	 eax, DWORD PTR _pa$[ebp]
  003cd	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  003d0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003d4	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  003d8	f3 0f 11 45 a4	 movss	 DWORD PTR _vec_ia$[ebp], xmm0

; 1623 : 	vec_ia.y = pa->y - pi->y;

  003dd	8b 45 10	 mov	 eax, DWORD PTR _pa$[ebp]
  003e0	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  003e3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  003e8	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  003ed	f3 0f 11 45 a8	 movss	 DWORD PTR _vec_ia$[ebp+4], xmm0

; 1624 : 	vec_ia.z = pa->z - pi->z;

  003f2	8b 45 10	 mov	 eax, DWORD PTR _pa$[ebp]
  003f5	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  003f8	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  003fd	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00402	f3 0f 11 45 ac	 movss	 DWORD PTR _vec_ia$[ebp+8], xmm0

; 1625 : 
; 1626 : 	length = sqrt ((vec_ia.x * vec_ia.x) + (vec_ia.y * vec_ia.y) + (vec_ia.z * vec_ia.z));

  00407	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _vec_ia$[ebp]
  0040c	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _vec_ia$[ebp]
  00411	f3 0f 10 4d a8	 movss	 xmm1, DWORD PTR _vec_ia$[ebp+4]
  00416	f3 0f 59 4d a8	 mulss	 xmm1, DWORD PTR _vec_ia$[ebp+4]
  0041b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0041f	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _vec_ia$[ebp+8]
  00424	f3 0f 59 4d ac	 mulss	 xmm1, DWORD PTR _vec_ia$[ebp+8]
  00429	f3 0f 58 c1	 addss	 xmm0, xmm1
  0042d	51		 push	 ecx
  0042e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00433	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00438	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 1627 : 
; 1628 : 	if (length == 0.0)

  0043b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00440	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00448	9f		 lahf
  00449	f6 c4 44	 test	 ah, 68			; 00000044H
  0044c	7a 0a		 jp	 SHORT $LN13@get_3d_lin

; 1629 : 	{
; 1630 : 		#if DEBUG_MODULE_LINE_TRIANGLE_INTERCEPT
; 1631 : 
; 1632 : 		debug_log ("Collision triangle ABC");
; 1633 : 
; 1634 : 		#endif
; 1635 : 
; 1636 : 		return (TRUE);

  0044e	b8 01 00 00 00	 mov	 eax, 1
  00453	e9 51 02 00 00	 jmp	 $LN1@get_3d_lin
$LN13@get_3d_lin:

; 1637 : 	}
; 1638 : 
; 1639 : 	normalise_3d_vector_given_magnitude (&vec_ia, length);

  00458	51		 push	 ecx
  00459	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _length$[ebp]
  0045e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00463	8d 45 a4	 lea	 eax, DWORD PTR _vec_ia$[ebp]
  00466	50		 push	 eax
  00467	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 1640 : 
; 1641 : 	////////////////////////////////////////
; 1642 : 
; 1643 : 	vec_ib.x = pb->x - pi->x;

  0046c	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  0046f	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  00472	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00476	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0047a	f3 0f 11 45 98	 movss	 DWORD PTR _vec_ib$[ebp], xmm0

; 1644 : 	vec_ib.y = pb->y - pi->y;

  0047f	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  00482	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  00485	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0048a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  0048f	f3 0f 11 45 9c	 movss	 DWORD PTR _vec_ib$[ebp+4], xmm0

; 1645 : 	vec_ib.z = pb->z - pi->z;

  00494	8b 45 14	 mov	 eax, DWORD PTR _pb$[ebp]
  00497	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  0049a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0049f	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  004a4	f3 0f 11 45 a0	 movss	 DWORD PTR _vec_ib$[ebp+8], xmm0

; 1646 : 
; 1647 : 	length = sqrt ((vec_ib.x * vec_ib.x) + (vec_ib.y * vec_ib.y) + (vec_ib.z * vec_ib.z));

  004a9	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _vec_ib$[ebp]
  004ae	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _vec_ib$[ebp]
  004b3	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _vec_ib$[ebp+4]
  004b8	f3 0f 59 4d 9c	 mulss	 xmm1, DWORD PTR _vec_ib$[ebp+4]
  004bd	f3 0f 58 c1	 addss	 xmm0, xmm1
  004c1	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR _vec_ib$[ebp+8]
  004c6	f3 0f 59 4d a0	 mulss	 xmm1, DWORD PTR _vec_ib$[ebp+8]
  004cb	f3 0f 58 c1	 addss	 xmm0, xmm1
  004cf	51		 push	 ecx
  004d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d5	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  004da	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 1648 : 
; 1649 : 	if (length == 0.0)

  004dd	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  004e2	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  004ea	9f		 lahf
  004eb	f6 c4 44	 test	 ah, 68			; 00000044H
  004ee	7a 0a		 jp	 SHORT $LN14@get_3d_lin

; 1650 : 	{
; 1651 : 		#if DEBUG_MODULE_LINE_TRIANGLE_INTERCEPT
; 1652 : 
; 1653 : 		debug_log ("Collision triangle ABC");
; 1654 : 
; 1655 : 		#endif
; 1656 : 
; 1657 : 		return (TRUE);

  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	e9 af 01 00 00	 jmp	 $LN1@get_3d_lin
$LN14@get_3d_lin:

; 1658 : 	}
; 1659 : 
; 1660 : 	normalise_3d_vector_given_magnitude (&vec_ib, length);

  004fa	51		 push	 ecx
  004fb	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _length$[ebp]
  00500	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00505	8d 45 98	 lea	 eax, DWORD PTR _vec_ib$[ebp]
  00508	50		 push	 eax
  00509	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 1661 : 
; 1662 : 	////////////////////////////////////////
; 1663 : 
; 1664 : 	vec_ic.x = pc->x - pi->x;

  0050e	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  00511	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  00514	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00518	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0051c	f3 0f 11 45 8c	 movss	 DWORD PTR _vec_ic$[ebp], xmm0

; 1665 : 	vec_ic.y = pc->y - pi->y;

  00521	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  00524	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  00527	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0052c	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00531	f3 0f 11 45 90	 movss	 DWORD PTR _vec_ic$[ebp+4], xmm0

; 1666 : 	vec_ic.z = pc->z - pi->z;

  00536	8b 45 18	 mov	 eax, DWORD PTR _pc$[ebp]
  00539	8b 4d 1c	 mov	 ecx, DWORD PTR _pi$[ebp]
  0053c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00541	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00546	f3 0f 11 45 94	 movss	 DWORD PTR _vec_ic$[ebp+8], xmm0

; 1667 : 
; 1668 : 	length = sqrt ((vec_ic.x * vec_ic.x) + (vec_ic.y * vec_ic.y) + (vec_ic.z * vec_ic.z));

  0054b	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _vec_ic$[ebp]
  00550	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _vec_ic$[ebp]
  00555	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _vec_ic$[ebp+4]
  0055a	f3 0f 59 4d 90	 mulss	 xmm1, DWORD PTR _vec_ic$[ebp+4]
  0055f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00563	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _vec_ic$[ebp+8]
  00568	f3 0f 59 4d 94	 mulss	 xmm1, DWORD PTR _vec_ic$[ebp+8]
  0056d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00571	51		 push	 ecx
  00572	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00577	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0057c	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 1669 : 
; 1670 : 	if (length == 0.0)

  0057f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00584	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0058c	9f		 lahf
  0058d	f6 c4 44	 test	 ah, 68			; 00000044H
  00590	7a 0a		 jp	 SHORT $LN15@get_3d_lin

; 1671 : 	{
; 1672 : 		#if DEBUG_MODULE_LINE_TRIANGLE_INTERCEPT
; 1673 : 
; 1674 : 		debug_log ("Collision triangle ABC");
; 1675 : 
; 1676 : 		#endif
; 1677 : 
; 1678 : 		return (TRUE);

  00592	b8 01 00 00 00	 mov	 eax, 1
  00597	e9 0d 01 00 00	 jmp	 $LN1@get_3d_lin
$LN15@get_3d_lin:

; 1679 : 	}
; 1680 : 
; 1681 : 	normalise_3d_vector_given_magnitude (&vec_ic, length);

  0059c	51		 push	 ecx
  0059d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _length$[ebp]
  005a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a7	8d 45 8c	 lea	 eax, DWORD PTR _vec_ic$[ebp]
  005aa	50		 push	 eax
  005ab	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 1682 : 
; 1683 : 	////////////////////////////////////////
; 1684 : 
; 1685 : 	angle_aib = (vec_ia.x * vec_ib.x) + (vec_ia.y * vec_ib.y) + (vec_ia.z * vec_ib.z);

  005b0	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _vec_ia$[ebp]
  005b5	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _vec_ib$[ebp]
  005ba	f3 0f 10 4d a8	 movss	 xmm1, DWORD PTR _vec_ia$[ebp+4]
  005bf	f3 0f 59 4d 9c	 mulss	 xmm1, DWORD PTR _vec_ib$[ebp+4]
  005c4	f3 0f 58 c1	 addss	 xmm0, xmm1
  005c8	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _vec_ia$[ebp+8]
  005cd	f3 0f 59 4d a0	 mulss	 xmm1, DWORD PTR _vec_ib$[ebp+8]
  005d2	f3 0f 58 c1	 addss	 xmm0, xmm1
  005d6	f3 0f 11 45 ec	 movss	 DWORD PTR _angle_aib$[ebp], xmm0

; 1686 : 	angle_bic = (vec_ib.x * vec_ic.x) + (vec_ib.y * vec_ic.y) + (vec_ib.z * vec_ic.z);

  005db	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _vec_ib$[ebp]
  005e0	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _vec_ic$[ebp]
  005e5	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _vec_ib$[ebp+4]
  005ea	f3 0f 59 4d 90	 mulss	 xmm1, DWORD PTR _vec_ic$[ebp+4]
  005ef	f3 0f 58 c1	 addss	 xmm0, xmm1
  005f3	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR _vec_ib$[ebp+8]
  005f8	f3 0f 59 4d 94	 mulss	 xmm1, DWORD PTR _vec_ic$[ebp+8]
  005fd	f3 0f 58 c1	 addss	 xmm0, xmm1
  00601	f3 0f 11 45 e4	 movss	 DWORD PTR _angle_bic$[ebp], xmm0

; 1687 : 	angle_aic = (vec_ic.x * vec_ia.x) + (vec_ic.y * vec_ia.y) + (vec_ic.z * vec_ia.z);

  00606	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _vec_ic$[ebp]
  0060b	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _vec_ia$[ebp]
  00610	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _vec_ic$[ebp+4]
  00615	f3 0f 59 4d a8	 mulss	 xmm1, DWORD PTR _vec_ia$[ebp+4]
  0061a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0061e	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _vec_ic$[ebp+8]
  00623	f3 0f 59 4d ac	 mulss	 xmm1, DWORD PTR _vec_ia$[ebp+8]
  00628	f3 0f 58 c1	 addss	 xmm0, xmm1
  0062c	f3 0f 11 45 e8	 movss	 DWORD PTR _angle_aic$[ebp], xmm0

; 1688 : 
; 1689 : 	acos_angle_aib = acos (angle_aib);

  00631	51		 push	 ecx
  00632	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _angle_aib$[ebp]
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  00641	d9 5d e0	 fstp	 DWORD PTR _acos_angle_aib$[ebp]

; 1690 : 	acos_angle_bic = acos (angle_bic);

  00644	51		 push	 ecx
  00645	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _angle_bic$[ebp]
  0064a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064f	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  00654	d9 5d d8	 fstp	 DWORD PTR _acos_angle_bic$[ebp]

; 1691 : 	acos_angle_aic = acos (angle_aic);

  00657	51		 push	 ecx
  00658	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _angle_aic$[ebp]
  0065d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00662	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  00667	d9 5d dc	 fstp	 DWORD PTR _acos_angle_aic$[ebp]

; 1692 : 
; 1693 : 	total = acos_angle_aib + acos_angle_bic + acos_angle_aic;

  0066a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _acos_angle_aib$[ebp]
  0066f	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _acos_angle_bic$[ebp]
  00674	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _acos_angle_aic$[ebp]
  00679	f3 0f 11 45 d4	 movss	 DWORD PTR _total$[ebp], xmm0

; 1694 : 
; 1695 : 	if ((total < (-PI2 + 0.01)) || (total > (PI2 - 0.01)))

  0067e	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _total$[ebp]
  00683	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c01917bdef5c28f6
  0068b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0068f	77 0f		 ja	 SHORT $LN17@get_3d_lin
  00691	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _total$[ebp]
  00696	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@401917bdef5c28f6
  0069e	76 07		 jbe	 SHORT $LN16@get_3d_lin
$LN17@get_3d_lin:

; 1696 : 	{
; 1697 : 		#if DEBUG_MODULE_LINE_TRIANGLE_INTERCEPT
; 1698 : 
; 1699 : 		debug_log ("Collision triangle ABC");
; 1700 : 
; 1701 : 		#endif
; 1702 : 
; 1703 : 		return (TRUE);

  006a0	b8 01 00 00 00	 mov	 eax, 1
  006a5	eb 02		 jmp	 SHORT $LN1@get_3d_lin
$LN16@get_3d_lin:

; 1704 : 	}
; 1705 : 
; 1706 : 	return (FALSE);

  006a7	33 c0		 xor	 eax, eax
$LN1@get_3d_lin:

; 1707 : }

  006a9	5f		 pop	 edi
  006aa	5e		 pop	 esi
  006ab	5b		 pop	 ebx
  006ac	8b e5		 mov	 esp, ebp
  006ae	5d		 pop	 ebp
  006af	c2 1c 00	 ret	 28			; 0000001cH
?get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU1@1@Z ENDP ; get_3d_line_triangle_intersection
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z
_TEXT	SEGMENT
_z2max$ = -48						; size = 4
_z2min$ = -44						; size = 4
_z1max$ = -40						; size = 4
_z1min$ = -36						; size = 4
_y2max$ = -32						; size = 4
_y2min$ = -28						; size = 4
_y1max$ = -24						; size = 4
_y1min$ = -20						; size = 4
_x2max$ = -16						; size = 4
_x2min$ = -12						; size = 4
_x1max$ = -8						; size = 4
_x1min$ = -4						; size = 4
_v1a$ = 8						; size = 4
_v1b$ = 12						; size = 4
_v2a$ = 16						; size = 4
_v2b$ = 20						; size = 4
?get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z PROC ; get_3d_vector_cube_cube_intersect, COMDAT

; 1396 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1397 : 	float
; 1398 : 		x1min,
; 1399 : 		x1max,
; 1400 : 		x2min,
; 1401 : 		x2max,
; 1402 : 		y1min,
; 1403 : 		y1max,
; 1404 : 		y2min,
; 1405 : 		y2max,
; 1406 : 		z1min,
; 1407 : 		z1max,
; 1408 : 		z2min,
; 1409 : 		z2max;
; 1410 : 
; 1411 : 	ASSERT (v1a);

  00009	83 7d 08 00	 cmp	 DWORD PTR _v1a$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_vec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z@4JA
  00014	83 c0 0f	 add	 eax, 15			; 0000000fH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03MJKAAKOC@v1a@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_vec:

; 1412 : 
; 1413 : 	ASSERT (v1b);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v1b$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_vec
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z@4JA
  00032	83 c0 11	 add	 eax, 17			; 00000011H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_03OCINFJCB@v1b@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_vec:

; 1414 : 
; 1415 : 	ASSERT (v2a);

  00045	83 7d 10 00	 cmp	 DWORD PTR _v2a$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@get_3d_vec
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z@4JA
  00050	83 c0 13	 add	 eax, 19			; 00000013H
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_03MLOGLELL@v2a@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_3d_vec:

; 1416 : 
; 1417 : 	ASSERT (v2b);

  00063	83 7d 14 00	 cmp	 DWORD PTR _v2b$[ebp], 0
  00067	75 18		 jne	 SHORT $LN5@get_3d_vec
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z@4JA
  0006e	83 c0 15	 add	 eax, 21			; 00000015H
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_03OAMLOHHI@v2b@
  0007c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_3d_vec:

; 1418 : 
; 1419 : 	////////////////////////////////////////
; 1420 : 
; 1421 : 	if (v1a->x <= v1b->x)

  00081	8b 45 0c	 mov	 eax, DWORD PTR _v1b$[ebp]
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _v1a$[ebp]
  00087	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008b	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0008e	72 1a		 jb	 SHORT $LN6@get_3d_vec

; 1422 : 	{
; 1423 : 		x1min = v1a->x;

  00090	8b 45 08	 mov	 eax, DWORD PTR _v1a$[ebp]
  00093	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00097	f3 0f 11 45 fc	 movss	 DWORD PTR _x1min$[ebp], xmm0

; 1424 : 		x1max = v1b->x;

  0009c	8b 45 0c	 mov	 eax, DWORD PTR _v1b$[ebp]
  0009f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a3	f3 0f 11 45 f8	 movss	 DWORD PTR _x1max$[ebp], xmm0

; 1425 : 	}
; 1426 : 	else

  000a8	eb 18		 jmp	 SHORT $LN7@get_3d_vec
$LN6@get_3d_vec:

; 1427 : 	{
; 1428 : 		x1min = v1b->x;

  000aa	8b 45 0c	 mov	 eax, DWORD PTR _v1b$[ebp]
  000ad	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b1	f3 0f 11 45 fc	 movss	 DWORD PTR _x1min$[ebp], xmm0

; 1429 : 		x1max = v1a->x;

  000b6	8b 45 08	 mov	 eax, DWORD PTR _v1a$[ebp]
  000b9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000bd	f3 0f 11 45 f8	 movss	 DWORD PTR _x1max$[ebp], xmm0
$LN7@get_3d_vec:

; 1430 : 	}
; 1431 : 
; 1432 : 	if (v2a->x <= v2b->x)

  000c2	8b 45 14	 mov	 eax, DWORD PTR _v2b$[ebp]
  000c5	8b 4d 10	 mov	 ecx, DWORD PTR _v2a$[ebp]
  000c8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000cc	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  000cf	72 1a		 jb	 SHORT $LN8@get_3d_vec

; 1433 : 	{
; 1434 : 		x2min = v2a->x;

  000d1	8b 45 10	 mov	 eax, DWORD PTR _v2a$[ebp]
  000d4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000d8	f3 0f 11 45 f4	 movss	 DWORD PTR _x2min$[ebp], xmm0

; 1435 : 		x2max = v2b->x;

  000dd	8b 45 14	 mov	 eax, DWORD PTR _v2b$[ebp]
  000e0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000e4	f3 0f 11 45 f0	 movss	 DWORD PTR _x2max$[ebp], xmm0

; 1436 : 	}
; 1437 : 	else

  000e9	eb 18		 jmp	 SHORT $LN9@get_3d_vec
$LN8@get_3d_vec:

; 1438 : 	{
; 1439 : 		x2min = v2b->x;

  000eb	8b 45 14	 mov	 eax, DWORD PTR _v2b$[ebp]
  000ee	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000f2	f3 0f 11 45 f4	 movss	 DWORD PTR _x2min$[ebp], xmm0

; 1440 : 		x2max = v2a->x;

  000f7	8b 45 10	 mov	 eax, DWORD PTR _v2a$[ebp]
  000fa	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000fe	f3 0f 11 45 f0	 movss	 DWORD PTR _x2max$[ebp], xmm0
$LN9@get_3d_vec:

; 1441 : 	}
; 1442 : 
; 1443 : 	if (x2max < x1min)

  00103	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1min$[ebp]
  00108	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _x2max$[ebp]
  0010c	76 07		 jbe	 SHORT $LN10@get_3d_vec

; 1444 : 	{
; 1445 : 		return (FALSE);

  0010e	33 c0		 xor	 eax, eax
  00110	e9 75 01 00 00	 jmp	 $LN1@get_3d_vec
$LN10@get_3d_vec:

; 1446 : 	}
; 1447 : 
; 1448 : 	if (x2min > x1max)

  00115	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x2min$[ebp]
  0011a	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _x1max$[ebp]
  0011e	76 07		 jbe	 SHORT $LN11@get_3d_vec

; 1449 : 	{
; 1450 : 		return (FALSE);

  00120	33 c0		 xor	 eax, eax
  00122	e9 63 01 00 00	 jmp	 $LN1@get_3d_vec
$LN11@get_3d_vec:

; 1451 : 	}
; 1452 : 
; 1453 : 	////////////////////////////////////////
; 1454 : 
; 1455 : 	if (v1a->y <= v1b->y)

  00127	8b 45 0c	 mov	 eax, DWORD PTR _v1b$[ebp]
  0012a	8b 4d 08	 mov	 ecx, DWORD PTR _v1a$[ebp]
  0012d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00132	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [ecx+4]
  00136	72 1c		 jb	 SHORT $LN12@get_3d_vec

; 1456 : 	{
; 1457 : 		y1min = v1a->y;

  00138	8b 45 08	 mov	 eax, DWORD PTR _v1a$[ebp]
  0013b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00140	f3 0f 11 45 ec	 movss	 DWORD PTR _y1min$[ebp], xmm0

; 1458 : 		y1max = v1b->y;

  00145	8b 45 0c	 mov	 eax, DWORD PTR _v1b$[ebp]
  00148	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0014d	f3 0f 11 45 e8	 movss	 DWORD PTR _y1max$[ebp], xmm0

; 1459 : 	}
; 1460 : 	else

  00152	eb 1a		 jmp	 SHORT $LN13@get_3d_vec
$LN12@get_3d_vec:

; 1461 : 	{
; 1462 : 		y1min = v1b->y;

  00154	8b 45 0c	 mov	 eax, DWORD PTR _v1b$[ebp]
  00157	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0015c	f3 0f 11 45 ec	 movss	 DWORD PTR _y1min$[ebp], xmm0

; 1463 : 		y1max = v1a->y;

  00161	8b 45 08	 mov	 eax, DWORD PTR _v1a$[ebp]
  00164	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00169	f3 0f 11 45 e8	 movss	 DWORD PTR _y1max$[ebp], xmm0
$LN13@get_3d_vec:

; 1464 : 	}
; 1465 : 
; 1466 : 	if (v2a->y <= v2b->y)

  0016e	8b 45 14	 mov	 eax, DWORD PTR _v2b$[ebp]
  00171	8b 4d 10	 mov	 ecx, DWORD PTR _v2a$[ebp]
  00174	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00179	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [ecx+4]
  0017d	72 1c		 jb	 SHORT $LN14@get_3d_vec

; 1467 : 	{
; 1468 : 		y2min = v2a->y;

  0017f	8b 45 10	 mov	 eax, DWORD PTR _v2a$[ebp]
  00182	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00187	f3 0f 11 45 e4	 movss	 DWORD PTR _y2min$[ebp], xmm0

; 1469 : 		y2max = v2b->y;

  0018c	8b 45 14	 mov	 eax, DWORD PTR _v2b$[ebp]
  0018f	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00194	f3 0f 11 45 e0	 movss	 DWORD PTR _y2max$[ebp], xmm0

; 1470 : 	}
; 1471 : 	else

  00199	eb 1a		 jmp	 SHORT $LN15@get_3d_vec
$LN14@get_3d_vec:

; 1472 : 	{
; 1473 : 		y2min = v2b->y;

  0019b	8b 45 14	 mov	 eax, DWORD PTR _v2b$[ebp]
  0019e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001a3	f3 0f 11 45 e4	 movss	 DWORD PTR _y2min$[ebp], xmm0

; 1474 : 		y2max = v2a->y;

  001a8	8b 45 10	 mov	 eax, DWORD PTR _v2a$[ebp]
  001ab	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001b0	f3 0f 11 45 e0	 movss	 DWORD PTR _y2max$[ebp], xmm0
$LN15@get_3d_vec:

; 1475 : 	}
; 1476 : 
; 1477 : 	if (y2max < y1min)

  001b5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1min$[ebp]
  001ba	0f 2f 45 e0	 comiss	 xmm0, DWORD PTR _y2max$[ebp]
  001be	76 07		 jbe	 SHORT $LN16@get_3d_vec

; 1478 : 	{
; 1479 : 		return (FALSE);

  001c0	33 c0		 xor	 eax, eax
  001c2	e9 c3 00 00 00	 jmp	 $LN1@get_3d_vec
$LN16@get_3d_vec:

; 1480 : 	}
; 1481 : 
; 1482 : 	if (y2min > y1max)

  001c7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y2min$[ebp]
  001cc	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _y1max$[ebp]
  001d0	76 07		 jbe	 SHORT $LN17@get_3d_vec

; 1483 : 	{
; 1484 : 		return (FALSE);

  001d2	33 c0		 xor	 eax, eax
  001d4	e9 b1 00 00 00	 jmp	 $LN1@get_3d_vec
$LN17@get_3d_vec:

; 1485 : 	}
; 1486 : 
; 1487 : 	////////////////////////////////////////
; 1488 : 
; 1489 : 	if (v1a->z <= v1b->z)

  001d9	8b 45 0c	 mov	 eax, DWORD PTR _v1b$[ebp]
  001dc	8b 4d 08	 mov	 ecx, DWORD PTR _v1a$[ebp]
  001df	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001e4	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [ecx+8]
  001e8	72 1c		 jb	 SHORT $LN18@get_3d_vec

; 1490 : 	{
; 1491 : 		z1min = v1a->z;

  001ea	8b 45 08	 mov	 eax, DWORD PTR _v1a$[ebp]
  001ed	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001f2	f3 0f 11 45 dc	 movss	 DWORD PTR _z1min$[ebp], xmm0

; 1492 : 		z1max = v1b->z;

  001f7	8b 45 0c	 mov	 eax, DWORD PTR _v1b$[ebp]
  001fa	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001ff	f3 0f 11 45 d8	 movss	 DWORD PTR _z1max$[ebp], xmm0

; 1493 : 	}
; 1494 : 	else

  00204	eb 1a		 jmp	 SHORT $LN19@get_3d_vec
$LN18@get_3d_vec:

; 1495 : 	{
; 1496 : 		z1min = v1b->z;

  00206	8b 45 0c	 mov	 eax, DWORD PTR _v1b$[ebp]
  00209	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0020e	f3 0f 11 45 dc	 movss	 DWORD PTR _z1min$[ebp], xmm0

; 1497 : 		z1max = v1a->z;

  00213	8b 45 08	 mov	 eax, DWORD PTR _v1a$[ebp]
  00216	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0021b	f3 0f 11 45 d8	 movss	 DWORD PTR _z1max$[ebp], xmm0
$LN19@get_3d_vec:

; 1498 : 	}
; 1499 : 
; 1500 : 	if (v2a->z <= v2b->z)

  00220	8b 45 14	 mov	 eax, DWORD PTR _v2b$[ebp]
  00223	8b 4d 10	 mov	 ecx, DWORD PTR _v2a$[ebp]
  00226	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0022b	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [ecx+8]
  0022f	72 1c		 jb	 SHORT $LN20@get_3d_vec

; 1501 : 	{
; 1502 : 		z2min = v2a->z;

  00231	8b 45 10	 mov	 eax, DWORD PTR _v2a$[ebp]
  00234	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00239	f3 0f 11 45 d4	 movss	 DWORD PTR _z2min$[ebp], xmm0

; 1503 : 		z2max = v2b->z;

  0023e	8b 45 14	 mov	 eax, DWORD PTR _v2b$[ebp]
  00241	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00246	f3 0f 11 45 d0	 movss	 DWORD PTR _z2max$[ebp], xmm0

; 1504 : 	}
; 1505 : 	else

  0024b	eb 1a		 jmp	 SHORT $LN21@get_3d_vec
$LN20@get_3d_vec:

; 1506 : 	{
; 1507 : 		z2min = v2b->z;

  0024d	8b 45 14	 mov	 eax, DWORD PTR _v2b$[ebp]
  00250	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00255	f3 0f 11 45 d4	 movss	 DWORD PTR _z2min$[ebp], xmm0

; 1508 : 		z2max = v2a->z;

  0025a	8b 45 10	 mov	 eax, DWORD PTR _v2a$[ebp]
  0025d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00262	f3 0f 11 45 d0	 movss	 DWORD PTR _z2max$[ebp], xmm0
$LN21@get_3d_vec:

; 1509 : 	}
; 1510 : 
; 1511 : 	if (z2max < z1min)

  00267	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1min$[ebp]
  0026c	0f 2f 45 d0	 comiss	 xmm0, DWORD PTR _z2max$[ebp]
  00270	76 04		 jbe	 SHORT $LN22@get_3d_vec

; 1512 : 	{
; 1513 : 		return (FALSE);

  00272	33 c0		 xor	 eax, eax
  00274	eb 14		 jmp	 SHORT $LN1@get_3d_vec
$LN22@get_3d_vec:

; 1514 : 	}
; 1515 : 
; 1516 : 	if (z2min > z1max)

  00276	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2min$[ebp]
  0027b	0f 2f 45 d8	 comiss	 xmm0, DWORD PTR _z1max$[ebp]
  0027f	76 04		 jbe	 SHORT $LN23@get_3d_vec

; 1517 : 	{
; 1518 : 		return (FALSE);

  00281	33 c0		 xor	 eax, eax
  00283	eb 05		 jmp	 SHORT $LN1@get_3d_vec
$LN23@get_3d_vec:

; 1519 : 	}
; 1520 : 
; 1521 : 	////////////////////////////////////////
; 1522 : 
; 1523 : 	return (TRUE);

  00285	b8 01 00 00 00	 mov	 eax, 1
$LN1@get_3d_vec:

; 1524 : }

  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c2 10 00	 ret	 16			; 00000010H
?get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z ENDP ; get_3d_vector_cube_cube_intersect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
_heading$ = 12						; size = 4
_pitch$ = 16						; size = 4
?get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z PROC ; get_heading_and_pitch_from_3d_unit_vector, COMDAT

; 1379 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1380 : 	ASSERT (v);

  00009	83 7d 08 00	 cmp	 DWORD PTR _v$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_headin
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01MHEDDDHA@v@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_headin:

; 1381 : 
; 1382 : 	ASSERT (heading);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _heading$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_headin
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07MBJMFGGL@heading@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_headin:

; 1383 : 
; 1384 : 	ASSERT (pitch);

  00045	83 7d 10 00	 cmp	 DWORD PTR _pitch$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@get_headin
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z@4JA
  00050	83 c0 05	 add	 eax, 5
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_05NCNFOFLM@pitch@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_headin:

; 1385 : 
; 1386 : 	*heading = atan2 (v->x, v->z);

  00063	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00066	51		 push	 ecx
  00067	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00074	51		 push	 ecx
  00075	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00083	8b 55 0c	 mov	 edx, DWORD PTR _heading$[ebp]
  00086	d9 1a		 fstp	 DWORD PTR [edx]

; 1387 : 
; 1388 : 	*pitch = asin (v->y);

  00088	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0008b	51		 push	 ecx
  0008c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  0009b	8b 4d 10	 mov	 ecx, DWORD PTR _pitch$[ebp]
  0009e	d9 19		 fstp	 DWORD PTR [ecx]

; 1389 : }

  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 0c 00	 ret	 12			; 0000000cH
?get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z ENDP ; get_heading_and_pitch_from_3d_unit_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_unit_vector_from_heading_and_pitch@@YGXPAUVEC3D@@MM@Z
_TEXT	SEGMENT
_cosp$ = -16						; size = 4
_sinp$ = -12						; size = 4
_cosh$ = -8						; size = 4
_sinh$ = -4						; size = 4
_result$ = 8						; size = 4
_heading$ = 12						; size = 4
_pitch$ = 16						; size = 4
?get_3d_unit_vector_from_heading_and_pitch@@YGXPAUVEC3D@@MM@Z PROC ; get_3d_unit_vector_from_heading_and_pitch, COMDAT

; 1350 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1351 : 	float
; 1352 : 		sinh,
; 1353 : 		cosh,
; 1354 : 		sinp,
; 1355 : 		cosp;
; 1356 : 
; 1357 : 	ASSERT (result);

  00009	83 7d 08 00	 cmp	 DWORD PTR _result$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_uni
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_unit_vector_from_heading_and_pitch@@YGXPAUVEC3D@@MM@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06KJFADLGN@result@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_uni:

; 1358 : 
; 1359 : 	sinh = sin ( heading );

  00027	51		 push	 ecx
  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00037	d9 5d fc	 fstp	 DWORD PTR _sinh$[ebp]

; 1360 : 	cosh = cos ( heading );

  0003a	51		 push	 ecx
  0003b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0004a	d9 5d f8	 fstp	 DWORD PTR _cosh$[ebp]

; 1361 : 
; 1362 : 	sinp = sin ( pitch );

  0004d	51		 push	 ecx
  0004e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0005d	d9 5d f4	 fstp	 DWORD PTR _sinp$[ebp]

; 1363 : 	cosp = cos ( pitch );

  00060	51		 push	 ecx
  00061	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00070	d9 5d f0	 fstp	 DWORD PTR _cosp$[ebp]

; 1364 : 
; 1365 : 	result->x = cosp * sinh;

  00073	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _cosp$[ebp]
  00078	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _sinh$[ebp]
  0007d	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  00080	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1366 : 
; 1367 : 	result->y = sinp;

  00084	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  00087	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _sinp$[ebp]
  0008c	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1368 : 
; 1369 : 	result->z = cosp * cosh;

  00091	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _cosp$[ebp]
  00096	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _cosh$[ebp]
  0009b	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  0009e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1370 : 
; 1371 : 	normalise_3d_vector (result);

  000a3	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  000ac	dd d8		 fstp	 ST(0)

; 1372 : }

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 0c 00	 ret	 12			; 0000000cH
?get_3d_unit_vector_from_heading_and_pitch@@YGXPAUVEC3D@@MM@Z ENDP ; get_3d_unit_vector_from_heading_and_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_2d_unit_vector_from_heading@@YGXPAUVEC2D@@M@Z
_TEXT	SEGMENT
_result$ = 8						; size = 4
_heading$ = 12						; size = 4
?get_2d_unit_vector_from_heading@@YGXPAUVEC2D@@M@Z PROC	; get_2d_unit_vector_from_heading, COMDAT

; 1338 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1339 : 	ASSERT (result);

  00009	83 7d 08 00	 cmp	 DWORD PTR _result$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_2d_uni
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_2d_unit_vector_from_heading@@YGXPAUVEC2D@@M@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06KJFADLGN@result@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_2d_uni:

; 1340 : 
; 1341 : 	result->x = sin ( heading );

  00027	51		 push	 ecx
  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00037	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  0003a	d9 18		 fstp	 DWORD PTR [eax]

; 1342 : 	result->y = cos ( heading );

  0003c	51		 push	 ecx
  0003d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0004c	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  0004f	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 1343 : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
?get_2d_unit_vector_from_heading@@YGXPAUVEC2D@@M@Z ENDP	; get_2d_unit_vector_from_heading
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU1@1@Z
_TEXT	SEGMENT
_result$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU1@1@Z PROC ; get_3d_vector_cross_product, COMDAT

; 1321 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1322 : 	ASSERT (result);

  00009	83 7d 08 00	 cmp	 DWORD PTR _result$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_vec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU2@1@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06KJFADLGN@result@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_vec:

; 1323 : 
; 1324 : 	ASSERT (v1);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v1$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_vec
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU2@1@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02JGJPDFLN@v1@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_vec:

; 1325 : 
; 1326 : 	ASSERT (v2);

  00045	83 7d 10 00	 cmp	 DWORD PTR _v2$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@get_3d_vec
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU2@1@Z@4JA
  00050	83 c0 05	 add	 eax, 5
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02LNLCGGHO@v2@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_3d_vec:

; 1327 : 
; 1328 : 	result->x = (v1->y * v2->z) - (v2->y * v1->z);

  00063	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  00066	8b 4d 10	 mov	 ecx, DWORD PTR _v2$[ebp]
  00069	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0006e	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  00073	8b 55 10	 mov	 edx, DWORD PTR _v2$[ebp]
  00076	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  00079	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  0007e	f3 0f 59 48 08	 mulss	 xmm1, DWORD PTR [eax+8]
  00083	f3 0f 5c c1	 subss	 xmm0, xmm1
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _result$[ebp]
  0008a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1329 : 	result->y = (v1->z * v2->x) - (v2->z * v1->x);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  00091	8b 4d 10	 mov	 ecx, DWORD PTR _v2$[ebp]
  00094	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00099	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0009d	8b 55 10	 mov	 edx, DWORD PTR _v2$[ebp]
  000a0	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  000a3	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  000a8	f3 0f 59 08	 mulss	 xmm1, DWORD PTR [eax]
  000ac	f3 0f 5c c1	 subss	 xmm0, xmm1
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _result$[ebp]
  000b3	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1330 : 	result->z = (v1->x * v2->y) - (v2->x * v1->y);

  000b8	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  000bb	8b 4d 10	 mov	 ecx, DWORD PTR _v2$[ebp]
  000be	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c2	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  000c7	8b 55 10	 mov	 edx, DWORD PTR _v2$[ebp]
  000ca	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  000cd	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  000d1	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  000d6	f3 0f 5c c1	 subss	 xmm0, xmm1
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _result$[ebp]
  000dd	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1331 : }

  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 0c 00	 ret	 12			; 0000000cH
?get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU1@1@Z ENDP ; get_3d_vector_cross_product
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z
_TEXT	SEGMENT
tv90 = -84						; size = 8
tv91 = -76						; size = 8
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z PROC	; get_3d_unit_vector_dot_product, COMDAT

; 1297 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1298 : 	float
; 1299 : 		result;
; 1300 : 
; 1301 : 	ASSERT (a);

  00009	83 7d 08 00	 cmp	 DWORD PTR _a$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_uni
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01MCMALHOG@a@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_uni:

; 1302 : 
; 1303 : 	ASSERT (b);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _b$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_uni
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z@4JA
  00032	83 c0 06	 add	 eax, 6
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_uni:

; 1304 : 
; 1305 : 	result = (a->x * b->x) + (a->y * b->y) + (a->z * b->z);

  00045	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0004b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004f	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00053	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00056	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00059	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  0005e	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  00063	f3 0f 58 c1	 addss	 xmm0, xmm1
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0006a	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  0006d	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00072	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  00077	f3 0f 58 c1	 addss	 xmm0, xmm1
  0007b	f3 0f 11 45 fc	 movss	 DWORD PTR _result$[ebp], xmm0

; 1306 : 
; 1307 : 	result = bound (result, -1.0, 1.0);

  00080	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _result$[ebp]
  00085	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  0008d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00091	76 0f		 jbe	 SHORT $LN7@get_3d_uni
  00093	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  0009b	f2 0f 11 45 b4	 movsd	 QWORD PTR tv91[ebp], xmm0
  000a0	eb 32		 jmp	 SHORT $LN8@get_3d_uni
$LN7@get_3d_uni:
  000a2	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _result$[ebp]
  000a7	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  000af	76 0f		 jbe	 SHORT $LN5@get_3d_uni
  000b1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000b9	f2 0f 11 45 ac	 movsd	 QWORD PTR tv90[ebp], xmm0
  000be	eb 0a		 jmp	 SHORT $LN6@get_3d_uni
$LN5@get_3d_uni:
  000c0	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _result$[ebp]
  000c5	f2 0f 11 45 ac	 movsd	 QWORD PTR tv90[ebp], xmm0
$LN6@get_3d_uni:
  000ca	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv90[ebp]
  000cf	f2 0f 11 45 b4	 movsd	 QWORD PTR tv91[ebp], xmm0
$LN8@get_3d_uni:
  000d4	f2 0f 5a 45 b4	 cvtsd2ss xmm0, QWORD PTR tv91[ebp]
  000d9	f3 0f 11 45 fc	 movss	 DWORD PTR _result$[ebp], xmm0

; 1308 : 
; 1309 : 	return (result);

  000de	d9 45 fc	 fld	 DWORD PTR _result$[ebp]

; 1310 : }

  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 08 00	 ret	 8
?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ENDP	; get_3d_unit_vector_dot_product
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z
_TEXT	SEGMENT
tv86 = -84						; size = 8
tv87 = -76						; size = 8
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z PROC	; get_2d_unit_vector_dot_product, COMDAT

; 1277 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1278 : 	float
; 1279 : 		result;
; 1280 : 
; 1281 : 	ASSERT (a);

  00009	83 7d 08 00	 cmp	 DWORD PTR _a$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_2d_uni
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01MCMALHOG@a@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_2d_uni:

; 1282 : 
; 1283 : 	ASSERT (b);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _b$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_2d_uni
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z@4JA
  00032	83 c0 06	 add	 eax, 6
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_2d_uni:

; 1284 : 
; 1285 : 	result = (a->x * b->x) + (a->y * b->y);

  00045	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0004b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004f	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00053	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00056	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00059	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  0005e	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  00063	f3 0f 58 c1	 addss	 xmm0, xmm1
  00067	f3 0f 11 45 fc	 movss	 DWORD PTR _result$[ebp], xmm0

; 1286 : 
; 1287 : 	result = bound (result, -1.0, 1.0);

  0006c	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _result$[ebp]
  00071	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  00079	66 0f 2f c8	 comisd	 xmm1, xmm0
  0007d	76 0f		 jbe	 SHORT $LN7@get_2d_uni
  0007f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00087	f2 0f 11 45 b4	 movsd	 QWORD PTR tv87[ebp], xmm0
  0008c	eb 32		 jmp	 SHORT $LN8@get_2d_uni
$LN7@get_2d_uni:
  0008e	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _result$[ebp]
  00093	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  0009b	76 0f		 jbe	 SHORT $LN5@get_2d_uni
  0009d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000a5	f2 0f 11 45 ac	 movsd	 QWORD PTR tv86[ebp], xmm0
  000aa	eb 0a		 jmp	 SHORT $LN6@get_2d_uni
$LN5@get_2d_uni:
  000ac	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _result$[ebp]
  000b1	f2 0f 11 45 ac	 movsd	 QWORD PTR tv86[ebp], xmm0
$LN6@get_2d_uni:
  000b6	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv86[ebp]
  000bb	f2 0f 11 45 b4	 movsd	 QWORD PTR tv87[ebp], xmm0
$LN8@get_2d_uni:
  000c0	f2 0f 5a 45 b4	 cvtsd2ss xmm0, QWORD PTR tv87[ebp]
  000c5	f3 0f 11 45 fc	 movss	 DWORD PTR _result$[ebp], xmm0

; 1288 : 
; 1289 : 	return (result);

  000ca	d9 45 fc	 fld	 DWORD PTR _result$[ebp]

; 1290 : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8
?get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z ENDP	; get_2d_unit_vector_dot_product
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z
_TEXT	SEGMENT
_q$ = -24						; size = 12
_p$ = -12						; size = 12
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z PROC	; get_3d_vector_dot_product, COMDAT

; 1251 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1252 : 	vec3d
; 1253 : 		p, q;
; 1254 : 
; 1255 : 	ASSERT ( a );

  00009	83 7d 08 00	 cmp	 DWORD PTR _a$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_vec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01MCMALHOG@a@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_vec:

; 1256 : 
; 1257 : 	ASSERT ( b );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _b$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_vec
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z@4JA
  00032	83 c0 06	 add	 eax, 6
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_vec:

; 1258 : 
; 1259 : 	p.x = a->x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00048	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004c	f3 0f 11 45 f4	 movss	 DWORD PTR _p$[ebp], xmm0

; 1260 : 	p.y = a->y;

  00051	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00054	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00059	f3 0f 11 45 f8	 movss	 DWORD PTR _p$[ebp+4], xmm0

; 1261 : 	p.z = a->z;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00061	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00066	f3 0f 11 45 fc	 movss	 DWORD PTR _p$[ebp+8], xmm0

; 1262 : 	q.x = b->x;

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0006e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00072	f3 0f 11 45 e8	 movss	 DWORD PTR _q$[ebp], xmm0

; 1263 : 	q.y = b->y;

  00077	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0007a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0007f	f3 0f 11 45 ec	 movss	 DWORD PTR _q$[ebp+4], xmm0

; 1264 : 	q.z = b->z;

  00084	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00087	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0008c	f3 0f 11 45 f0	 movss	 DWORD PTR _q$[ebp+8], xmm0

; 1265 : 
; 1266 : 	normalise_any_3d_vector( &p );

  00091	8d 45 f4	 lea	 eax, DWORD PTR _p$[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  0009a	dd d8		 fstp	 ST(0)

; 1267 : 	normalise_any_3d_vector( &q );

  0009c	8d 45 e8	 lea	 eax, DWORD PTR _q$[ebp]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  000a5	dd d8		 fstp	 ST(0)

; 1268 : 
; 1269 : 	return get_3d_unit_vector_dot_product( &p, &q );

  000a7	8d 45 e8	 lea	 eax, DWORD PTR _q$[ebp]
  000aa	50		 push	 eax
  000ab	8d 4d f4	 lea	 ecx, DWORD PTR _p$[ebp]
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product

; 1270 : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 08 00	 ret	 8
?get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z ENDP	; get_3d_vector_dot_product
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_2d_vector_dot_product@@YGMPBUVEC2D@@0@Z
_TEXT	SEGMENT
_q$ = -16						; size = 8
_p$ = -8						; size = 8
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?get_2d_vector_dot_product@@YGMPBUVEC2D@@0@Z PROC	; get_2d_vector_dot_product, COMDAT

; 1227 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1228 : 	vec2d
; 1229 : 		p, q;
; 1230 : 
; 1231 : 	ASSERT ( a );

  00009	83 7d 08 00	 cmp	 DWORD PTR _a$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_2d_vec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_2d_vector_dot_product@@YGMPBUVEC2D@@0@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01MCMALHOG@a@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_2d_vec:

; 1232 : 
; 1233 : 	ASSERT ( b );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _b$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_2d_vec
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_2d_vector_dot_product@@YGMPBUVEC2D@@0@Z@4JA
  00032	83 c0 06	 add	 eax, 6
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_2d_vec:

; 1234 : 
; 1235 : 	p.x = a->x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00048	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004c	f3 0f 11 45 f8	 movss	 DWORD PTR _p$[ebp], xmm0

; 1236 : 	p.y = a->y;

  00051	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00054	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00059	f3 0f 11 45 fc	 movss	 DWORD PTR _p$[ebp+4], xmm0

; 1237 : 	q.x = b->x;

  0005e	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00061	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00065	f3 0f 11 45 f0	 movss	 DWORD PTR _q$[ebp], xmm0

; 1238 : 	q.y = b->y;

  0006a	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0006d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00072	f3 0f 11 45 f4	 movss	 DWORD PTR _q$[ebp+4], xmm0

; 1239 : 
; 1240 : 	normalise_2d_vector( &p );

  00077	8d 45 f8	 lea	 eax, DWORD PTR _p$[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?normalise_2d_vector@@YGMPAUVEC2D@@@Z ; normalise_2d_vector
  00080	dd d8		 fstp	 ST(0)

; 1241 : 	normalise_2d_vector( &q );

  00082	8d 45 f0	 lea	 eax, DWORD PTR _q$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?normalise_2d_vector@@YGMPAUVEC2D@@@Z ; normalise_2d_vector
  0008b	dd d8		 fstp	 ST(0)

; 1242 : 
; 1243 : 	return get_2d_unit_vector_dot_product( &p, &q );

  0008d	8d 45 f0	 lea	 eax, DWORD PTR _q$[ebp]
  00090	50		 push	 eax
  00091	8d 4d f8	 lea	 ecx, DWORD PTR _p$[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z ; get_2d_unit_vector_dot_product

; 1244 : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
?get_2d_vector_dot_product@@YGMPBUVEC2D@@0@Z ENDP	; get_2d_vector_dot_product
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?line_line_2d_intercept@@YGHPBUVEC2D@@000PAU1@@Z
_TEXT	SEGMENT
tv312 = -156						; size = 4
tv298 = -156						; size = 4
tv322 = -152						; size = 4
tv320 = -152						; size = 4
tv306 = -148						; size = 4
tv292 = -148						; size = 4
_cb$ = -80						; size = 4
_ca$ = -76						; size = 4
_mb$ = -72						; size = 4
_ma$ = -68						; size = 4
_t$ = -64						; size = 4
_s$ = -60						; size = 4
_y$ = -56						; size = 4
_x$ = -52						; size = 4
_dby$ = -48						; size = 4
_dbx$ = -44						; size = 4
_day$ = -40						; size = 4
_dax$ = -36						; size = 4
_by2$ = -32						; size = 4
_by1$ = -28						; size = 4
_bx2$ = -24						; size = 4
_bx1$ = -20						; size = 4
_ay2$ = -16						; size = 4
_ay1$ = -12						; size = 4
_ax2$ = -8						; size = 4
_ax1$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_q1$ = 16						; size = 4
_q2$ = 20						; size = 4
_intercept_point$ = 24					; size = 4
?line_line_2d_intercept@@YGHPBUVEC2D@@000PAU1@@Z PROC	; line_line_2d_intercept, COMDAT

; 1069 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1070 : 
; 1071 : 	float
; 1072 : 		ax1, ax2, ay1, ay2,
; 1073 : 		bx1, bx2, by1, by2,
; 1074 : 		dax, day,
; 1075 : 		dbx, dby;
; 1076 : 
; 1077 : 	float
; 1078 : 		x, y,
; 1079 : 		s, t,
; 1080 : 		ma, mb,
; 1081 : 		ca, cb;
; 1082 : 
; 1083 : 	ASSERT (p1);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _p1$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@line_line_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_2d_intercept@@YGHPBUVEC2D@@000PAU2@@Z@4JA
  00017	83 c0 0e	 add	 eax, 14			; 0000000eH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02JCBCEJAP@p1@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@line_line_:

; 1084 : 
; 1085 : 	ASSERT (p2);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _p2$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@line_line_
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_2d_intercept@@YGHPBUVEC2D@@000PAU2@@Z@4JA
  00035	83 c0 10	 add	 eax, 16			; 00000010H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_02LJDPBKMM@p2@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@line_line_:

; 1086 : 
; 1087 : 	ASSERT (q1);

  00048	83 7d 10 00	 cmp	 DWORD PTR _q1$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN4@line_line_
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_2d_intercept@@YGHPBUVEC2D@@000PAU2@@Z@4JA
  00053	83 c0 12	 add	 eax, 18			; 00000012H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_02JDNACDDI@q1@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@line_line_:

; 1088 : 
; 1089 : 	ASSERT (q2);

  00066	83 7d 14 00	 cmp	 DWORD PTR _q2$[ebp], 0
  0006a	75 18		 jne	 SHORT $LN5@line_line_
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_2d_intercept@@YGHPBUVEC2D@@000PAU2@@Z@4JA
  00071	83 c0 14	 add	 eax, 20			; 00000014H
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_02LIPNHAPL@q2@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@line_line_:

; 1090 : 
; 1091 : 	ASSERT (intercept_point);

  00084	83 7d 18 00	 cmp	 DWORD PTR _intercept_point$[ebp], 0
  00088	75 18		 jne	 SHORT $LN6@line_line_
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_2d_intercept@@YGHPBUVEC2D@@000PAU2@@Z@4JA
  0008f	83 c0 16	 add	 eax, 22			; 00000016H
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NMPFNFPN@intercept_point@
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@line_line_:

; 1092 : 
; 1093 : 	ax1 = p1->x;

  000a2	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  000a5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a9	f3 0f 11 45 fc	 movss	 DWORD PTR _ax1$[ebp], xmm0

; 1094 : 	ay1 = p1->y;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  000b1	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000b6	f3 0f 11 45 f4	 movss	 DWORD PTR _ay1$[ebp], xmm0

; 1095 : 
; 1096 : 	ax2 = p2->x;

  000bb	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  000be	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c2	f3 0f 11 45 f8	 movss	 DWORD PTR _ax2$[ebp], xmm0

; 1097 : 	ay2 = p2->y;

  000c7	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  000ca	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000cf	f3 0f 11 45 f0	 movss	 DWORD PTR _ay2$[ebp], xmm0

; 1098 : 
; 1099 : 	bx1 = q1->x;

  000d4	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  000d7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000db	f3 0f 11 45 ec	 movss	 DWORD PTR _bx1$[ebp], xmm0

; 1100 : 	by1 = q1->y;

  000e0	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  000e3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000e8	f3 0f 11 45 e4	 movss	 DWORD PTR _by1$[ebp], xmm0

; 1101 : 
; 1102 : 	bx2 = q2->x;

  000ed	8b 45 14	 mov	 eax, DWORD PTR _q2$[ebp]
  000f0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000f4	f3 0f 11 45 e8	 movss	 DWORD PTR _bx2$[ebp], xmm0

; 1103 : 	by2 = q2->y;

  000f9	8b 45 14	 mov	 eax, DWORD PTR _q2$[ebp]
  000fc	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00101	f3 0f 11 45 e0	 movss	 DWORD PTR _by2$[ebp], xmm0

; 1104 : 
; 1105 : 	dax = ax2 - ax1;

  00106	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _ax2$[ebp]
  0010b	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _ax1$[ebp]
  00110	f3 0f 11 45 dc	 movss	 DWORD PTR _dax$[ebp], xmm0

; 1106 : 	day = ay2 - ay1;

  00115	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _ay2$[ebp]
  0011a	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _ay1$[ebp]
  0011f	f3 0f 11 45 d8	 movss	 DWORD PTR _day$[ebp], xmm0

; 1107 : 
; 1108 : 	dbx = bx2 - bx1;

  00124	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _bx2$[ebp]
  00129	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _bx1$[ebp]
  0012e	f3 0f 11 45 d4	 movss	 DWORD PTR _dbx$[ebp], xmm0

; 1109 : 	dby = by2 - by1;

  00133	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _by2$[ebp]
  00138	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _by1$[ebp]
  0013d	f3 0f 11 45 d0	 movss	 DWORD PTR _dby$[ebp], xmm0

; 1110 : 
; 1111 : 	//
; 1112 : 	// check for verticals
; 1113 : 	//
; 1114 : 
; 1115 : 	if ( ( dax == 0.0 ) && ( dbx == 0.0 ) )

  00142	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _dax$[ebp]
  00147	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0014f	9f		 lahf
  00150	f6 c4 44	 test	 ah, 68			; 00000044H
  00153	7a 1a		 jp	 SHORT $LN7@line_line_
  00155	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _dbx$[ebp]
  0015a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00162	9f		 lahf
  00163	f6 c4 44	 test	 ah, 68			; 00000044H
  00166	7a 07		 jp	 SHORT $LN7@line_line_

; 1116 : 	{
; 1117 : 		return FALSE;

  00168	33 c0		 xor	 eax, eax
  0016a	e9 a3 02 00 00	 jmp	 $LN1@line_line_
$LN7@line_line_:

; 1118 : 	}
; 1119 : 
; 1120 : 	if ( dax == 0.0 )

  0016f	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _dax$[ebp]
  00174	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0017c	9f		 lahf
  0017d	f6 c4 44	 test	 ah, 68			; 00000044H
  00180	7a 4a		 jp	 SHORT $LN8@line_line_

; 1121 : 	{
; 1122 : 		x = ax1;

  00182	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _ax1$[ebp]
  00187	f3 0f 11 45 cc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1123 : 
; 1124 : 		mb = dby / dbx;

  0018c	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _dby$[ebp]
  00191	f3 0f 5e 45 d4	 divss	 xmm0, DWORD PTR _dbx$[ebp]
  00196	f3 0f 11 45 b8	 movss	 DWORD PTR _mb$[ebp], xmm0

; 1125 : 
; 1126 : 		cb = by1 - ( mb * bx1 );

  0019b	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _mb$[ebp]
  001a0	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _bx1$[ebp]
  001a5	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _by1$[ebp]
  001aa	f3 0f 5c c8	 subss	 xmm1, xmm0
  001ae	f3 0f 11 4d b0	 movss	 DWORD PTR _cb$[ebp], xmm1

; 1127 : 
; 1128 : 		y = ( mb * x ) + cb;

  001b3	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _mb$[ebp]
  001b8	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _x$[ebp]
  001bd	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _cb$[ebp]
  001c2	f3 0f 11 45 c8	 movss	 DWORD PTR _y$[ebp], xmm0
  001c7	e9 f2 00 00 00	 jmp	 $LN11@line_line_
$LN8@line_line_:

; 1129 : 	}
; 1130 : 	else if ( dbx == 0.0 )

  001cc	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _dbx$[ebp]
  001d1	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  001d9	9f		 lahf
  001da	f6 c4 44	 test	 ah, 68			; 00000044H
  001dd	7a 4a		 jp	 SHORT $LN10@line_line_

; 1131 : 	{
; 1132 : 		x = bx1;

  001df	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _bx1$[ebp]
  001e4	f3 0f 11 45 cc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1133 : 
; 1134 : 		ma = day / dax;

  001e9	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _day$[ebp]
  001ee	f3 0f 5e 45 dc	 divss	 xmm0, DWORD PTR _dax$[ebp]
  001f3	f3 0f 11 45 bc	 movss	 DWORD PTR _ma$[ebp], xmm0

; 1135 : 
; 1136 : 		ca = ay1 - ( ma * ax1 );

  001f8	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _ma$[ebp]
  001fd	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _ax1$[ebp]
  00202	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _ay1$[ebp]
  00207	f3 0f 5c c8	 subss	 xmm1, xmm0
  0020b	f3 0f 11 4d b4	 movss	 DWORD PTR _ca$[ebp], xmm1

; 1137 : 
; 1138 : 		y = ( ma * x ) + ca;

  00210	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _ma$[ebp]
  00215	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _x$[ebp]
  0021a	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _ca$[ebp]
  0021f	f3 0f 11 45 c8	 movss	 DWORD PTR _y$[ebp], xmm0

; 1139 : 	}
; 1140 : 	else

  00224	e9 95 00 00 00	 jmp	 $LN11@line_line_
$LN10@line_line_:

; 1141 : 	{
; 1142 : 		//
; 1143 : 		// find gradients
; 1144 : 		//
; 1145 : 
; 1146 : 		ma = day / dax;

  00229	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _day$[ebp]
  0022e	f3 0f 5e 45 dc	 divss	 xmm0, DWORD PTR _dax$[ebp]
  00233	f3 0f 11 45 bc	 movss	 DWORD PTR _ma$[ebp], xmm0

; 1147 : 
; 1148 : 		mb = dby / dbx;

  00238	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _dby$[ebp]
  0023d	f3 0f 5e 45 d4	 divss	 xmm0, DWORD PTR _dbx$[ebp]
  00242	f3 0f 11 45 b8	 movss	 DWORD PTR _mb$[ebp], xmm0

; 1149 : 
; 1150 : 		if ( ma == mb )

  00247	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _ma$[ebp]
  0024c	0f 2e 45 b8	 ucomiss xmm0, DWORD PTR _mb$[ebp]
  00250	9f		 lahf
  00251	f6 c4 44	 test	 ah, 68			; 00000044H
  00254	7a 07		 jp	 SHORT $LN12@line_line_

; 1151 : 		{
; 1152 : 			// lines are parallel
; 1153 : 
; 1154 : 			return FALSE;

  00256	33 c0		 xor	 eax, eax
  00258	e9 b5 01 00 00	 jmp	 $LN1@line_line_
$LN12@line_line_:

; 1155 : 		}
; 1156 : 
; 1157 : 		//
; 1158 : 		// find constants
; 1159 : 		//
; 1160 : 
; 1161 : 		ca = ay1 - ( ma * ax1 );

  0025d	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _ma$[ebp]
  00262	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _ax1$[ebp]
  00267	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _ay1$[ebp]
  0026c	f3 0f 5c c8	 subss	 xmm1, xmm0
  00270	f3 0f 11 4d b4	 movss	 DWORD PTR _ca$[ebp], xmm1

; 1162 : 
; 1163 : 		cb = by1 - ( mb * bx1 );

  00275	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _mb$[ebp]
  0027a	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _bx1$[ebp]
  0027f	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _by1$[ebp]
  00284	f3 0f 5c c8	 subss	 xmm1, xmm0
  00288	f3 0f 11 4d b0	 movss	 DWORD PTR _cb$[ebp], xmm1

; 1164 : 
; 1165 : 		//
; 1166 : 		// find intercept points
; 1167 : 		//
; 1168 : 
; 1169 : 		x = ( cb - ca ) / ( ma - mb );

  0028d	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _cb$[ebp]
  00292	f3 0f 5c 45 b4	 subss	 xmm0, DWORD PTR _ca$[ebp]
  00297	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _ma$[ebp]
  0029c	f3 0f 5c 4d b8	 subss	 xmm1, DWORD PTR _mb$[ebp]
  002a1	f3 0f 5e c1	 divss	 xmm0, xmm1
  002a5	f3 0f 11 45 cc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1170 : 
; 1171 : 		y = ( ma * x ) + ca;

  002aa	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _ma$[ebp]
  002af	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _x$[ebp]
  002b4	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _ca$[ebp]
  002b9	f3 0f 11 45 c8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN11@line_line_:

; 1172 : 	}
; 1173 : 
; 1174 : 	//
; 1175 : 	//
; 1176 : 
; 1177 : 	intercept_point->x = x;

  002be	8b 45 18	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  002c1	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x$[ebp]
  002c6	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1178 : 	intercept_point->y = y;

  002ca	8b 45 18	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  002cd	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _y$[ebp]
  002d2	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1179 : 
; 1180 : 	//
; 1181 : 	// now work out if the lines actually cross
; 1182 : 	//
; 1183 : 
; 1184 : 	// line a
; 1185 : 
; 1186 : 	if ( fabs( day ) > fabs( dax ) )

  002d7	51		 push	 ecx
  002d8	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _day$[ebp]
  002dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e2	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  002e7	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR tv292[ebp]
  002ed	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR tv292[ebp]
  002f5	51		 push	 ecx
  002f6	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _dax$[ebp]
  002fb	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00300	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR tv320[ebp], xmm0
  00308	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0030d	d9 9d 64 ff ff
	ff		 fstp	 DWORD PTR tv298[ebp]
  00313	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR tv320[ebp]
  0031b	0f 2f 85 64 ff
	ff ff		 comiss	 xmm0, DWORD PTR tv298[ebp]
  00322	76 16		 jbe	 SHORT $LN13@line_line_

; 1187 : 	{
; 1188 : 		s = ( y - ay1 ) / day;

  00324	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00329	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _ay1$[ebp]
  0032e	f3 0f 5e 45 d8	 divss	 xmm0, DWORD PTR _day$[ebp]
  00333	f3 0f 11 45 c4	 movss	 DWORD PTR _s$[ebp], xmm0

; 1189 : 	}
; 1190 : 	else

  00338	eb 14		 jmp	 SHORT $LN14@line_line_
$LN13@line_line_:

; 1191 : 	{
; 1192 : 		s = ( x - ax1 ) / dax;

  0033a	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x$[ebp]
  0033f	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _ax1$[ebp]
  00344	f3 0f 5e 45 dc	 divss	 xmm0, DWORD PTR _dax$[ebp]
  00349	f3 0f 11 45 c4	 movss	 DWORD PTR _s$[ebp], xmm0
$LN14@line_line_:

; 1193 : 	}
; 1194 : 
; 1195 : 	// line b
; 1196 : 
; 1197 : 	if ( fabs( dby ) > fabs( dbx ) )

  0034e	51		 push	 ecx
  0034f	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _dby$[ebp]
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0035e	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR tv306[ebp]
  00364	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR tv306[ebp]
  0036c	51		 push	 ecx
  0036d	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _dbx$[ebp]
  00372	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00377	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR tv322[ebp], xmm0
  0037f	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00384	d9 9d 64 ff ff
	ff		 fstp	 DWORD PTR tv312[ebp]
  0038a	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR tv322[ebp]
  00392	0f 2f 85 64 ff
	ff ff		 comiss	 xmm0, DWORD PTR tv312[ebp]
  00399	76 16		 jbe	 SHORT $LN15@line_line_

; 1198 : 	{
; 1199 : 		t = ( y - by1 ) / dby;

  0039b	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _y$[ebp]
  003a0	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _by1$[ebp]
  003a5	f3 0f 5e 45 d0	 divss	 xmm0, DWORD PTR _dby$[ebp]
  003aa	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp], xmm0

; 1200 : 	}
; 1201 : 	else

  003af	eb 14		 jmp	 SHORT $LN16@line_line_
$LN15@line_line_:

; 1202 : 	{
; 1203 : 		t = ( x - bx1 ) / dbx;

  003b1	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x$[ebp]
  003b6	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _bx1$[ebp]
  003bb	f3 0f 5e 45 d4	 divss	 xmm0, DWORD PTR _dbx$[ebp]
  003c0	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp], xmm0
$LN16@line_line_:

; 1204 : 	}
; 1205 : 
; 1206 : 	//
; 1207 : 	// if the intercept point lies on both lines then return TRUE ( i.e. the lines cross )
; 1208 : 	//
; 1209 : 
; 1210 : 	if ( ( t >= 0.0 ) && ( t <= 1.0 ) )

  003c5	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  003ca	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  003d2	72 3c		 jb	 SHORT $LN18@line_line_
  003d4	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  003d9	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003e1	66 0f 2f c8	 comisd	 xmm1, xmm0
  003e5	72 29		 jb	 SHORT $LN18@line_line_

; 1211 : 	{
; 1212 : 		if ( ( s >= 0.0 ) && ( s <= 1.0 ) )

  003e7	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _s$[ebp]
  003ec	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  003f4	72 1a		 jb	 SHORT $LN18@line_line_
  003f6	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _s$[ebp]
  003fb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00403	66 0f 2f c8	 comisd	 xmm1, xmm0
  00407	72 07		 jb	 SHORT $LN18@line_line_

; 1213 : 		{
; 1214 : 			return TRUE;

  00409	b8 01 00 00 00	 mov	 eax, 1
  0040e	eb 02		 jmp	 SHORT $LN1@line_line_
$LN18@line_line_:

; 1215 : 		}
; 1216 : 	}
; 1217 : 
; 1218 : 	return FALSE;

  00410	33 c0		 xor	 eax, eax
$LN1@line_line_:

; 1219 : 
; 1220 : }

  00412	5f		 pop	 edi
  00413	5e		 pop	 esi
  00414	5b		 pop	 ebx
  00415	8b e5		 mov	 esp, ebp
  00417	5d		 pop	 ebp
  00418	c2 14 00	 ret	 20			; 00000014H
?line_line_2d_intercept@@YGHPBUVEC2D@@000PAU1@@Z ENDP	; line_line_2d_intercept
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU2@1@Z
_TEXT	SEGMENT
tv564 = -180						; size = 8
tv454 = -180						; size = 8
tv347 = -180						; size = 8
tv565 = -172						; size = 8
tv455 = -172						; size = 8
tv348 = -172						; size = 8
_range2$1 = -100					; size = 4
_range$2 = -96						; size = 4
_v$ = -92						; size = 12
_u$ = -80						; size = 12
_matrix$ = -68						; size = 36
_cofactors$ = -32					; size = 12
_det_t$ = -20						; size = 4
_det_s$ = -16						; size = 4
_t$ = -12						; size = 4
_s$ = -8						; size = 4
_u_x_v_mag_squared$ = -4				; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_q1$ = 16						; size = 4
_q2$ = 20						; size = 4
_intercept_point_p$ = 24				; size = 4
_intercept_point_q$ = 28				; size = 4
?line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU2@1@Z PROC ; line_line_3d_intercept, COMDAT

; 856  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 857  : 
; 858  : 	float
; 859  : 		u_x_v_mag_squared,
; 860  : 		s,
; 861  : 		t,
; 862  : 		det_s,
; 863  : 		det_t;
; 864  : 
; 865  : 	float
; 866  : 		cofactors [3],
; 867  : 		matrix [3][3];
; 868  : 
; 869  : 	vec3d
; 870  : 		u,
; 871  : 		v;
; 872  : 
; 873  : 	ASSERT (p1);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _p1$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@line_line_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU3@1@Z@4JA
  00017	83 c0 11	 add	 eax, 17			; 00000011H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02JCBCEJAP@p1@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@line_line_:

; 874  : 
; 875  : 	ASSERT (p2);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _p2$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@line_line_
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU3@1@Z@4JA
  00035	83 c0 13	 add	 eax, 19			; 00000013H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_02LJDPBKMM@p2@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@line_line_:

; 876  : 
; 877  : 	ASSERT (q1);

  00048	83 7d 10 00	 cmp	 DWORD PTR _q1$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN4@line_line_
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU3@1@Z@4JA
  00053	83 c0 15	 add	 eax, 21			; 00000015H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_02JDNACDDI@q1@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@line_line_:

; 878  : 
; 879  : 	ASSERT (q2);

  00066	83 7d 14 00	 cmp	 DWORD PTR _q2$[ebp], 0
  0006a	75 18		 jne	 SHORT $LN5@line_line_
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU3@1@Z@4JA
  00071	83 c0 17	 add	 eax, 23			; 00000017H
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_02LIPNHAPL@q2@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@line_line_:

; 880  : 
; 881  : 	ASSERT (intercept_point_p);

  00084	83 7d 18 00	 cmp	 DWORD PTR _intercept_point_p$[ebp], 0
  00088	75 18		 jne	 SHORT $LN6@line_line_
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU3@1@Z@4JA
  0008f	83 c0 19	 add	 eax, 25			; 00000019H
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BPHEHFCF@intercept_point_p@
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@line_line_:

; 882  : 
; 883  : 	ASSERT (intercept_point_q);

  000a2	83 7d 1c 00	 cmp	 DWORD PTR _intercept_point_q$[ebp], 0
  000a6	75 18		 jne	 SHORT $LN7@line_line_
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU3@1@Z@4JA
  000ad	83 c0 1b	 add	 eax, 27			; 0000001bH
  000b0	50		 push	 eax
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GGPEEGE@intercept_point_q@
  000bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@line_line_:

; 884  : 
; 885  : 	// calculate directional vectors
; 886  : 
; 887  : 	u.x = p2->x - p1->x;

  000c0	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  000c3	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000c6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000ca	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  000ce	f3 0f 11 45 b0	 movss	 DWORD PTR _u$[ebp], xmm0

; 888  : 	u.y = p2->y - p1->y;

  000d3	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000d9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000de	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  000e3	f3 0f 11 45 b4	 movss	 DWORD PTR _u$[ebp+4], xmm0

; 889  : 	u.z = p2->z - p1->z;

  000e8	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  000ee	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000f3	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  000f8	f3 0f 11 45 b8	 movss	 DWORD PTR _u$[ebp+8], xmm0

; 890  : 
; 891  : 	v.x = q2->x - q1->x;

  000fd	8b 45 14	 mov	 eax, DWORD PTR _q2$[ebp]
  00100	8b 4d 10	 mov	 ecx, DWORD PTR _q1$[ebp]
  00103	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00107	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0010b	f3 0f 11 45 a4	 movss	 DWORD PTR _v$[ebp], xmm0

; 892  : 	v.y = q2->y - q1->y;

  00110	8b 45 14	 mov	 eax, DWORD PTR _q2$[ebp]
  00113	8b 4d 10	 mov	 ecx, DWORD PTR _q1$[ebp]
  00116	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0011b	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00120	f3 0f 11 45 a8	 movss	 DWORD PTR _v$[ebp+4], xmm0

; 893  : 	v.z = q2->z - q1->z;

  00125	8b 45 14	 mov	 eax, DWORD PTR _q2$[ebp]
  00128	8b 4d 10	 mov	 ecx, DWORD PTR _q1$[ebp]
  0012b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00130	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00135	f3 0f 11 45 ac	 movss	 DWORD PTR _v$[ebp+8], xmm0

; 894  : 
; 895  : 	// to calculate s
; 896  : 
; 897  : 	matrix [0][0] = q1->x - p1->x;

  0013a	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  0013d	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00140	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00144	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00148	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0014d	6b c2 00	 imul	 eax, edx, 0
  00150	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00154	ba 04 00 00 00	 mov	 edx, 4
  00159	6b c2 00	 imul	 eax, edx, 0
  0015c	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 898  : 	matrix [0][1] = q1->y - p1->y;

  00161	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  00164	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00167	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0016c	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00171	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00176	6b c2 00	 imul	 eax, edx, 0
  00179	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  0017d	ba 04 00 00 00	 mov	 edx, 4
  00182	c1 e2 00	 shl	 edx, 0
  00185	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 899  : 	matrix [0][2] = q1->z - p1->z;

  0018a	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  0018d	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00190	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00195	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0019a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0019f	6b c2 00	 imul	 eax, edx, 0
  001a2	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  001a6	ba 04 00 00 00	 mov	 edx, 4
  001ab	d1 e2		 shl	 edx, 1
  001ad	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 900  : 
; 901  : 	matrix [1][0] = v.x;

  001b2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001b7	c1 e0 00	 shl	 eax, 0
  001ba	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  001be	ba 04 00 00 00	 mov	 edx, 4
  001c3	6b c2 00	 imul	 eax, edx, 0
  001c6	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _v$[ebp]
  001cb	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 902  : 	matrix [1][1] = v.y;

  001d0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001d5	c1 e0 00	 shl	 eax, 0
  001d8	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  001dc	ba 04 00 00 00	 mov	 edx, 4
  001e1	c1 e2 00	 shl	 edx, 0
  001e4	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _v$[ebp+4]
  001e9	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 903  : 	matrix [1][2] = v.z;

  001ee	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001f3	c1 e0 00	 shl	 eax, 0
  001f6	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  001fa	ba 04 00 00 00	 mov	 edx, 4
  001ff	d1 e2		 shl	 edx, 1
  00201	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp+8]
  00206	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 904  : 
; 905  : 	matrix [2][0] = u.y * v.z - u.z * v.y;

  0020b	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _u$[ebp+4]
  00210	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _v$[ebp+8]
  00215	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _u$[ebp+8]
  0021a	f3 0f 59 4d a8	 mulss	 xmm1, DWORD PTR _v$[ebp+4]
  0021f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00223	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00228	d1 e0		 shl	 eax, 1
  0022a	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  0022e	ba 04 00 00 00	 mov	 edx, 4
  00233	6b c2 00	 imul	 eax, edx, 0
  00236	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 906  : 	matrix [2][1] = u.z * v.x - u.x * v.z;

  0023b	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _u$[ebp+8]
  00240	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _v$[ebp]
  00245	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _u$[ebp]
  0024a	f3 0f 59 4d ac	 mulss	 xmm1, DWORD PTR _v$[ebp+8]
  0024f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00253	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00258	d1 e0		 shl	 eax, 1
  0025a	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  0025e	ba 04 00 00 00	 mov	 edx, 4
  00263	c1 e2 00	 shl	 edx, 0
  00266	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 907  : 	matrix [2][2] = u.x * v.y - u.y * v.x;

  0026b	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  00270	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR _v$[ebp+4]
  00275	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _u$[ebp+4]
  0027a	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _v$[ebp]
  0027f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00283	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00288	d1 e0		 shl	 eax, 1
  0028a	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  0028e	ba 04 00 00 00	 mov	 edx, 4
  00293	d1 e2		 shl	 edx, 1
  00295	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 908  : 
; 909  : 	u_x_v_mag_squared = (matrix [2][0] * matrix [2][0]) + (matrix [2][1] * matrix [2][1]) + (matrix [2][2] * matrix [2][2]);

  0029a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0029f	d1 e0		 shl	 eax, 1
  002a1	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  002a5	ba 04 00 00 00	 mov	 edx, 4
  002aa	6b c2 00	 imul	 eax, edx, 0
  002ad	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  002b2	d1 e2		 shl	 edx, 1
  002b4	8d 54 15 bc	 lea	 edx, DWORD PTR _matrix$[ebp+edx]
  002b8	be 04 00 00 00	 mov	 esi, 4
  002bd	6b f6 00	 imul	 esi, esi, 0
  002c0	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  002c5	f3 0f 59 04 32	 mulss	 xmm0, DWORD PTR [edx+esi]
  002ca	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002cf	d1 e0		 shl	 eax, 1
  002d1	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  002d5	ba 04 00 00 00	 mov	 edx, 4
  002da	c1 e2 00	 shl	 edx, 0
  002dd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002e2	d1 e0		 shl	 eax, 1
  002e4	8d 44 05 bc	 lea	 eax, DWORD PTR _matrix$[ebp+eax]
  002e8	be 04 00 00 00	 mov	 esi, 4
  002ed	c1 e6 00	 shl	 esi, 0
  002f0	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  002f5	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  002fa	f3 0f 58 c1	 addss	 xmm0, xmm1
  002fe	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00303	d1 e1		 shl	 ecx, 1
  00305	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00309	b8 04 00 00 00	 mov	 eax, 4
  0030e	d1 e0		 shl	 eax, 1
  00310	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00315	d1 e1		 shl	 ecx, 1
  00317	8d 4c 0d bc	 lea	 ecx, DWORD PTR _matrix$[ebp+ecx]
  0031b	be 04 00 00 00	 mov	 esi, 4
  00320	d1 e6		 shl	 esi, 1
  00322	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00327	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  0032c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00330	f3 0f 11 45 fc	 movss	 DWORD PTR _u_x_v_mag_squared$[ebp], xmm0

; 910  : 
; 911  : 	// check for parallelism
; 912  : 
; 913  : 	if (u_x_v_mag_squared == 0)

  00335	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _u_x_v_mag_squared$[ebp]
  0033a	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00341	9f		 lahf
  00342	f6 c4 44	 test	 ah, 68			; 00000044H
  00345	0f 8a 36 01 00
	00		 jp	 $LN8@line_line_

; 914  : 	{
; 915  : 
; 916  : 		float
; 917  : 			range,
; 918  : 			range2;
; 919  : 
; 920  : 		// 1st check p1->q1
; 921  : 
; 922  : 		range = get_sqr_3d_range (p1, q1);

  0034b	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  0034e	50		 push	 eax
  0034f	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00352	51		 push	 ecx
  00353	e8 00 00 00 00	 call	 ?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z ; get_sqr_3d_range
  00358	d9 5d a0	 fstp	 DWORD PTR _range$2[ebp]

; 923  : 
; 924  : 		*intercept_point_p = *p1;

  0035b	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0035e	8b 4d 18	 mov	 ecx, DWORD PTR _intercept_point_p$[ebp]
  00361	8b 10		 mov	 edx, DWORD PTR [eax]
  00363	89 11		 mov	 DWORD PTR [ecx], edx
  00365	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00368	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0036b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0036e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 925  : 		*intercept_point_q = *q1;

  00371	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  00374	8b 4d 1c	 mov	 ecx, DWORD PTR _intercept_point_q$[ebp]
  00377	8b 10		 mov	 edx, DWORD PTR [eax]
  00379	89 11		 mov	 DWORD PTR [ecx], edx
  0037b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0037e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00381	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00384	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 926  : 
; 927  : 		// 2nd check p1->q2
; 928  : 
; 929  : 		range2 = get_sqr_3d_range (p1, q2);

  00387	8b 45 14	 mov	 eax, DWORD PTR _q2$[ebp]
  0038a	50		 push	 eax
  0038b	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0038e	51		 push	 ecx
  0038f	e8 00 00 00 00	 call	 ?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z ; get_sqr_3d_range
  00394	d9 5d 9c	 fstp	 DWORD PTR _range2$1[ebp]

; 930  : 
; 931  : 		if (range2 < range)

  00397	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _range$2[ebp]
  0039c	0f 2f 45 9c	 comiss	 xmm0, DWORD PTR _range2$1[ebp]
  003a0	76 36		 jbe	 SHORT $LN9@line_line_

; 932  : 		{
; 933  : 
; 934  : 			range = range2;

  003a2	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _range2$1[ebp]
  003a7	f3 0f 11 45 a0	 movss	 DWORD PTR _range$2[ebp], xmm0

; 935  : 
; 936  : 			*intercept_point_p = *p1;

  003ac	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  003af	8b 4d 18	 mov	 ecx, DWORD PTR _intercept_point_p$[ebp]
  003b2	8b 10		 mov	 edx, DWORD PTR [eax]
  003b4	89 11		 mov	 DWORD PTR [ecx], edx
  003b6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003b9	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  003bc	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  003bf	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 937  : 			*intercept_point_q = *q2;

  003c2	8b 45 14	 mov	 eax, DWORD PTR _q2$[ebp]
  003c5	8b 4d 1c	 mov	 ecx, DWORD PTR _intercept_point_q$[ebp]
  003c8	8b 10		 mov	 edx, DWORD PTR [eax]
  003ca	89 11		 mov	 DWORD PTR [ecx], edx
  003cc	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003cf	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  003d2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  003d5	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN9@line_line_:

; 938  : 		}
; 939  : 
; 940  : 		// 3rd check p2->q1
; 941  : 
; 942  : 		range2 = get_sqr_3d_range (p2, q1);

  003d8	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  003db	50		 push	 eax
  003dc	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  003df	51		 push	 ecx
  003e0	e8 00 00 00 00	 call	 ?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z ; get_sqr_3d_range
  003e5	d9 5d 9c	 fstp	 DWORD PTR _range2$1[ebp]

; 943  : 
; 944  : 		if (range2 < range)

  003e8	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _range$2[ebp]
  003ed	0f 2f 45 9c	 comiss	 xmm0, DWORD PTR _range2$1[ebp]
  003f1	76 36		 jbe	 SHORT $LN10@line_line_

; 945  : 		{
; 946  : 
; 947  : 			range = range2;

  003f3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _range2$1[ebp]
  003f8	f3 0f 11 45 a0	 movss	 DWORD PTR _range$2[ebp], xmm0

; 948  : 
; 949  : 			*intercept_point_p = *p2;

  003fd	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  00400	8b 4d 18	 mov	 ecx, DWORD PTR _intercept_point_p$[ebp]
  00403	8b 10		 mov	 edx, DWORD PTR [eax]
  00405	89 11		 mov	 DWORD PTR [ecx], edx
  00407	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0040a	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0040d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00410	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 950  : 			*intercept_point_q = *q1;

  00413	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  00416	8b 4d 1c	 mov	 ecx, DWORD PTR _intercept_point_q$[ebp]
  00419	8b 10		 mov	 edx, DWORD PTR [eax]
  0041b	89 11		 mov	 DWORD PTR [ecx], edx
  0041d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00420	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00423	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00426	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN10@line_line_:

; 951  : 		}
; 952  : 
; 953  : 		// 4th check p2->q2
; 954  : 
; 955  : 		range2 = get_sqr_3d_range (p2, q2);

  00429	8b 45 14	 mov	 eax, DWORD PTR _q2$[ebp]
  0042c	50		 push	 eax
  0042d	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  00430	51		 push	 ecx
  00431	e8 00 00 00 00	 call	 ?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z ; get_sqr_3d_range
  00436	d9 5d 9c	 fstp	 DWORD PTR _range2$1[ebp]

; 956  : 
; 957  : 		if (range2 < range)

  00439	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _range$2[ebp]
  0043e	0f 2f 45 9c	 comiss	 xmm0, DWORD PTR _range2$1[ebp]
  00442	76 36		 jbe	 SHORT $LN11@line_line_

; 958  : 		{
; 959  : 
; 960  : 			range = range2;

  00444	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _range2$1[ebp]
  00449	f3 0f 11 45 a0	 movss	 DWORD PTR _range$2[ebp], xmm0

; 961  : 
; 962  : 			*intercept_point_p = *p2;

  0044e	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  00451	8b 4d 18	 mov	 ecx, DWORD PTR _intercept_point_p$[ebp]
  00454	8b 10		 mov	 edx, DWORD PTR [eax]
  00456	89 11		 mov	 DWORD PTR [ecx], edx
  00458	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0045b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0045e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00461	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 963  : 			*intercept_point_q = *q2;

  00464	8b 45 14	 mov	 eax, DWORD PTR _q2$[ebp]
  00467	8b 4d 1c	 mov	 ecx, DWORD PTR _intercept_point_q$[ebp]
  0046a	8b 10		 mov	 edx, DWORD PTR [eax]
  0046c	89 11		 mov	 DWORD PTR [ecx], edx
  0046e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00471	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00474	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00477	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN11@line_line_:

; 964  : 		}
; 965  : 
; 966  : 		return LINE_LINE_INTERCEPT_PARALLEL;

  0047a	33 c0		 xor	 eax, eax
  0047c	e9 89 08 00 00	 jmp	 $LN13@line_line_
$LN8@line_line_:

; 967  : 	}
; 968  : 
; 969  : 	// form cofactors, only some needed
; 970  : 
; 971  : 	cofactors [0] = ((matrix [1][1] * matrix [2][2]) - (matrix [1][2] * matrix [2][1]));

  00481	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00486	c1 e0 00	 shl	 eax, 0
  00489	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  0048d	ba 04 00 00 00	 mov	 edx, 4
  00492	c1 e2 00	 shl	 edx, 0
  00495	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0049a	d1 e0		 shl	 eax, 1
  0049c	8d 44 05 bc	 lea	 eax, DWORD PTR _matrix$[ebp+eax]
  004a0	be 04 00 00 00	 mov	 esi, 4
  004a5	d1 e6		 shl	 esi, 1
  004a7	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  004ac	f3 0f 59 04 30	 mulss	 xmm0, DWORD PTR [eax+esi]
  004b1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004b6	c1 e1 00	 shl	 ecx, 0
  004b9	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  004bd	b8 04 00 00 00	 mov	 eax, 4
  004c2	d1 e0		 shl	 eax, 1
  004c4	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004c9	d1 e1		 shl	 ecx, 1
  004cb	8d 4c 0d bc	 lea	 ecx, DWORD PTR _matrix$[ebp+ecx]
  004cf	be 04 00 00 00	 mov	 esi, 4
  004d4	c1 e6 00	 shl	 esi, 0
  004d7	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  004dc	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  004e1	f3 0f 5c c1	 subss	 xmm0, xmm1
  004e5	ba 04 00 00 00	 mov	 edx, 4
  004ea	6b c2 00	 imul	 eax, edx, 0
  004ed	f3 0f 11 44 05
	e0		 movss	 DWORD PTR _cofactors$[ebp+eax], xmm0

; 972  : 	cofactors [1] = ((matrix [0][1] * matrix [2][2]) - (matrix [0][2] * matrix [2][1]));

  004f3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004f8	6b c8 00	 imul	 ecx, eax, 0
  004fb	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  004ff	b8 04 00 00 00	 mov	 eax, 4
  00504	c1 e0 00	 shl	 eax, 0
  00507	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0050c	d1 e1		 shl	 ecx, 1
  0050e	8d 4c 0d bc	 lea	 ecx, DWORD PTR _matrix$[ebp+ecx]
  00512	be 04 00 00 00	 mov	 esi, 4
  00517	d1 e6		 shl	 esi, 1
  00519	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0051e	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  00523	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00528	6b c2 00	 imul	 eax, edx, 0
  0052b	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  0052f	ba 04 00 00 00	 mov	 edx, 4
  00534	d1 e2		 shl	 edx, 1
  00536	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0053b	d1 e0		 shl	 eax, 1
  0053d	8d 44 05 bc	 lea	 eax, DWORD PTR _matrix$[ebp+eax]
  00541	be 04 00 00 00	 mov	 esi, 4
  00546	c1 e6 00	 shl	 esi, 0
  00549	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  0054e	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  00553	f3 0f 5c c1	 subss	 xmm0, xmm1
  00557	b9 04 00 00 00	 mov	 ecx, 4
  0055c	c1 e1 00	 shl	 ecx, 0
  0055f	f3 0f 11 44 0d
	e0		 movss	 DWORD PTR _cofactors$[ebp+ecx], xmm0

; 973  : 	cofactors [2] = ((matrix [0][1] * matrix [1][2]) - (matrix [0][2] * matrix [1][1]));

  00565	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0056a	6b c8 00	 imul	 ecx, eax, 0
  0056d	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00571	b8 04 00 00 00	 mov	 eax, 4
  00576	c1 e0 00	 shl	 eax, 0
  00579	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0057e	c1 e1 00	 shl	 ecx, 0
  00581	8d 4c 0d bc	 lea	 ecx, DWORD PTR _matrix$[ebp+ecx]
  00585	be 04 00 00 00	 mov	 esi, 4
  0058a	d1 e6		 shl	 esi, 1
  0058c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00591	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  00596	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0059b	6b c2 00	 imul	 eax, edx, 0
  0059e	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  005a2	ba 04 00 00 00	 mov	 edx, 4
  005a7	d1 e2		 shl	 edx, 1
  005a9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005ae	c1 e0 00	 shl	 eax, 0
  005b1	8d 44 05 bc	 lea	 eax, DWORD PTR _matrix$[ebp+eax]
  005b5	be 04 00 00 00	 mov	 esi, 4
  005ba	c1 e6 00	 shl	 esi, 0
  005bd	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  005c2	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  005c7	f3 0f 5c c1	 subss	 xmm0, xmm1
  005cb	b9 04 00 00 00	 mov	 ecx, 4
  005d0	d1 e1		 shl	 ecx, 1
  005d2	f3 0f 11 44 0d
	e0		 movss	 DWORD PTR _cofactors$[ebp+ecx], xmm0

; 974  : 
; 975  : 	// determinant
; 976  : 
; 977  : 	det_s = (matrix [0][0] * cofactors [0]) - (matrix [1][0] * cofactors [1]) + (matrix [2][0] * cofactors [2]);

  005d8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005dd	6b c8 00	 imul	 ecx, eax, 0
  005e0	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  005e4	b8 04 00 00 00	 mov	 eax, 4
  005e9	6b c8 00	 imul	 ecx, eax, 0
  005ec	b8 04 00 00 00	 mov	 eax, 4
  005f1	6b c0 00	 imul	 eax, eax, 0
  005f4	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  005f9	f3 0f 59 44 05
	e0		 mulss	 xmm0, DWORD PTR _cofactors$[ebp+eax]
  005ff	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00604	c1 e1 00	 shl	 ecx, 0
  00607	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  0060b	b8 04 00 00 00	 mov	 eax, 4
  00610	6b c8 00	 imul	 ecx, eax, 0
  00613	b8 04 00 00 00	 mov	 eax, 4
  00618	c1 e0 00	 shl	 eax, 0
  0061b	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  00620	f3 0f 59 4c 05
	e0		 mulss	 xmm1, DWORD PTR _cofactors$[ebp+eax]
  00626	f3 0f 5c c1	 subss	 xmm0, xmm1
  0062a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0062f	d1 e1		 shl	 ecx, 1
  00631	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00635	b8 04 00 00 00	 mov	 eax, 4
  0063a	6b c8 00	 imul	 ecx, eax, 0
  0063d	b8 04 00 00 00	 mov	 eax, 4
  00642	d1 e0		 shl	 eax, 1
  00644	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  00649	f3 0f 59 4c 05
	e0		 mulss	 xmm1, DWORD PTR _cofactors$[ebp+eax]
  0064f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00653	f3 0f 11 45 f0	 movss	 DWORD PTR _det_s$[ebp], xmm0

; 978  : 
; 979  : 	// parametric value
; 980  : 
; 981  : 	s = det_s / u_x_v_mag_squared;

  00658	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _det_s$[ebp]
  0065d	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _u_x_v_mag_squared$[ebp]
  00662	f3 0f 11 45 f8	 movss	 DWORD PTR _s$[ebp], xmm0

; 982  : 
; 983  : 	// check for divergence
; 984  : 
; 985  : 	if ((s < 0.0) || (s > 1.0))

  00667	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _s$[ebp]
  0066c	0f 57 c9	 xorps	 xmm1, xmm1
  0066f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00673	77 13		 ja	 SHORT $LN14@line_line_
  00675	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _s$[ebp]
  0067a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00682	0f 86 b2 03 00
	00		 jbe	 $LN12@line_line_
$LN14@line_line_:

; 986  : 	{
; 987  : 
; 988  : 		s = bound (s, 0.0, 1.0);

  00688	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _s$[ebp]
  0068d	0f 57 c9	 xorps	 xmm1, xmm1
  00690	66 0f 2f c8	 comisd	 xmm1, xmm0
  00694	76 0d		 jbe	 SHORT $LN18@line_line_
  00696	0f 57 c0	 xorps	 xmm0, xmm0
  00699	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv348[ebp], xmm0
  006a1	eb 3e		 jmp	 SHORT $LN19@line_line_
$LN18@line_line_:
  006a3	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _s$[ebp]
  006a8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  006b0	76 12		 jbe	 SHORT $LN16@line_line_
  006b2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  006ba	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv347[ebp], xmm0
  006c2	eb 0d		 jmp	 SHORT $LN17@line_line_
$LN16@line_line_:
  006c4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _s$[ebp]
  006c9	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv347[ebp], xmm0
$LN17@line_line_:
  006d1	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv347[ebp]
  006d9	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv348[ebp], xmm0
$LN19@line_line_:
  006e1	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv348[ebp]
  006e9	f3 0f 11 45 f8	 movss	 DWORD PTR _s$[ebp], xmm0

; 989  : 
; 990  : 		// to calculate t
; 991  : 
; 992  : 		matrix [1][0] = u.x;

  006ee	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006f3	c1 e0 00	 shl	 eax, 0
  006f6	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  006fa	ba 04 00 00 00	 mov	 edx, 4
  006ff	6b c2 00	 imul	 eax, edx, 0
  00702	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  00707	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 993  : 		matrix [1][1] = u.y;

  0070c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00711	c1 e0 00	 shl	 eax, 0
  00714	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00718	ba 04 00 00 00	 mov	 edx, 4
  0071d	c1 e2 00	 shl	 edx, 0
  00720	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _u$[ebp+4]
  00725	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 994  : 		matrix [1][2] = u.z;

  0072a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0072f	c1 e0 00	 shl	 eax, 0
  00732	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00736	ba 04 00 00 00	 mov	 edx, 4
  0073b	d1 e2		 shl	 edx, 1
  0073d	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _u$[ebp+8]
  00742	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 995  : 
; 996  : 		// form cofactors, only some needed
; 997  : 
; 998  : 		cofactors [0] = ((matrix [1][1] * matrix [2][2]) - (matrix [1][2] * matrix [2][1]));

  00747	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0074c	c1 e0 00	 shl	 eax, 0
  0074f	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00753	ba 04 00 00 00	 mov	 edx, 4
  00758	c1 e2 00	 shl	 edx, 0
  0075b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00760	d1 e0		 shl	 eax, 1
  00762	8d 44 05 bc	 lea	 eax, DWORD PTR _matrix$[ebp+eax]
  00766	be 04 00 00 00	 mov	 esi, 4
  0076b	d1 e6		 shl	 esi, 1
  0076d	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00772	f3 0f 59 04 30	 mulss	 xmm0, DWORD PTR [eax+esi]
  00777	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0077c	c1 e1 00	 shl	 ecx, 0
  0077f	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00783	b8 04 00 00 00	 mov	 eax, 4
  00788	d1 e0		 shl	 eax, 1
  0078a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0078f	d1 e1		 shl	 ecx, 1
  00791	8d 4c 0d bc	 lea	 ecx, DWORD PTR _matrix$[ebp+ecx]
  00795	be 04 00 00 00	 mov	 esi, 4
  0079a	c1 e6 00	 shl	 esi, 0
  0079d	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  007a2	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  007a7	f3 0f 5c c1	 subss	 xmm0, xmm1
  007ab	ba 04 00 00 00	 mov	 edx, 4
  007b0	6b c2 00	 imul	 eax, edx, 0
  007b3	f3 0f 11 44 05
	e0		 movss	 DWORD PTR _cofactors$[ebp+eax], xmm0

; 999  : 		cofactors [1] = ((matrix [0][1] * matrix [2][2]) - (matrix [0][2] * matrix [2][1])); // ??

  007b9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007be	6b c8 00	 imul	 ecx, eax, 0
  007c1	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  007c5	b8 04 00 00 00	 mov	 eax, 4
  007ca	c1 e0 00	 shl	 eax, 0
  007cd	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  007d2	d1 e1		 shl	 ecx, 1
  007d4	8d 4c 0d bc	 lea	 ecx, DWORD PTR _matrix$[ebp+ecx]
  007d8	be 04 00 00 00	 mov	 esi, 4
  007dd	d1 e6		 shl	 esi, 1
  007df	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  007e4	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  007e9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  007ee	6b c2 00	 imul	 eax, edx, 0
  007f1	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  007f5	ba 04 00 00 00	 mov	 edx, 4
  007fa	d1 e2		 shl	 edx, 1
  007fc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00801	d1 e0		 shl	 eax, 1
  00803	8d 44 05 bc	 lea	 eax, DWORD PTR _matrix$[ebp+eax]
  00807	be 04 00 00 00	 mov	 esi, 4
  0080c	c1 e6 00	 shl	 esi, 0
  0080f	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00814	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  00819	f3 0f 5c c1	 subss	 xmm0, xmm1
  0081d	b9 04 00 00 00	 mov	 ecx, 4
  00822	c1 e1 00	 shl	 ecx, 0
  00825	f3 0f 11 44 0d
	e0		 movss	 DWORD PTR _cofactors$[ebp+ecx], xmm0

; 1000 : 		cofactors [2] = ((matrix [0][1] * matrix [1][2]) - (matrix [0][2] * matrix [1][1]));

  0082b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00830	6b c8 00	 imul	 ecx, eax, 0
  00833	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00837	b8 04 00 00 00	 mov	 eax, 4
  0083c	c1 e0 00	 shl	 eax, 0
  0083f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00844	c1 e1 00	 shl	 ecx, 0
  00847	8d 4c 0d bc	 lea	 ecx, DWORD PTR _matrix$[ebp+ecx]
  0084b	be 04 00 00 00	 mov	 esi, 4
  00850	d1 e6		 shl	 esi, 1
  00852	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00857	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  0085c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00861	6b c2 00	 imul	 eax, edx, 0
  00864	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00868	ba 04 00 00 00	 mov	 edx, 4
  0086d	d1 e2		 shl	 edx, 1
  0086f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00874	c1 e0 00	 shl	 eax, 0
  00877	8d 44 05 bc	 lea	 eax, DWORD PTR _matrix$[ebp+eax]
  0087b	be 04 00 00 00	 mov	 esi, 4
  00880	c1 e6 00	 shl	 esi, 0
  00883	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00888	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  0088d	f3 0f 5c c1	 subss	 xmm0, xmm1
  00891	b9 04 00 00 00	 mov	 ecx, 4
  00896	d1 e1		 shl	 ecx, 1
  00898	f3 0f 11 44 0d
	e0		 movss	 DWORD PTR _cofactors$[ebp+ecx], xmm0

; 1001 : 
; 1002 : 		// determinant
; 1003 : 
; 1004 : 		det_t = (matrix [0][0] * cofactors [0]) - (matrix [1][0] * cofactors [1]) + (matrix [2][0] * cofactors [2]);

  0089e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008a3	6b c8 00	 imul	 ecx, eax, 0
  008a6	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  008aa	b8 04 00 00 00	 mov	 eax, 4
  008af	6b c8 00	 imul	 ecx, eax, 0
  008b2	b8 04 00 00 00	 mov	 eax, 4
  008b7	6b c0 00	 imul	 eax, eax, 0
  008ba	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  008bf	f3 0f 59 44 05
	e0		 mulss	 xmm0, DWORD PTR _cofactors$[ebp+eax]
  008c5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  008ca	c1 e1 00	 shl	 ecx, 0
  008cd	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  008d1	b8 04 00 00 00	 mov	 eax, 4
  008d6	6b c8 00	 imul	 ecx, eax, 0
  008d9	b8 04 00 00 00	 mov	 eax, 4
  008de	c1 e0 00	 shl	 eax, 0
  008e1	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  008e6	f3 0f 59 4c 05
	e0		 mulss	 xmm1, DWORD PTR _cofactors$[ebp+eax]
  008ec	f3 0f 5c c1	 subss	 xmm0, xmm1
  008f0	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  008f5	d1 e1		 shl	 ecx, 1
  008f7	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  008fb	b8 04 00 00 00	 mov	 eax, 4
  00900	6b c8 00	 imul	 ecx, eax, 0
  00903	b8 04 00 00 00	 mov	 eax, 4
  00908	d1 e0		 shl	 eax, 1
  0090a	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  0090f	f3 0f 59 4c 05
	e0		 mulss	 xmm1, DWORD PTR _cofactors$[ebp+eax]
  00915	f3 0f 58 c1	 addss	 xmm0, xmm1
  00919	f3 0f 11 45 ec	 movss	 DWORD PTR _det_t$[ebp], xmm0

; 1005 : 
; 1006 :   		// parametric point
; 1007 : 
; 1008 : 		t = det_t / u_x_v_mag_squared;

  0091e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _det_t$[ebp]
  00923	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _u_x_v_mag_squared$[ebp]
  00928	f3 0f 11 45 f4	 movss	 DWORD PTR _t$[ebp], xmm0

; 1009 : 
; 1010 : 		t = bound (t, 0.0, 1.0);

  0092d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  00932	0f 57 c9	 xorps	 xmm1, xmm1
  00935	66 0f 2f c8	 comisd	 xmm1, xmm0
  00939	76 0d		 jbe	 SHORT $LN22@line_line_
  0093b	0f 57 c0	 xorps	 xmm0, xmm0
  0093e	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv455[ebp], xmm0
  00946	eb 3e		 jmp	 SHORT $LN23@line_line_
$LN22@line_line_:
  00948	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  0094d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00955	76 12		 jbe	 SHORT $LN20@line_line_
  00957	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0095f	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv454[ebp], xmm0
  00967	eb 0d		 jmp	 SHORT $LN21@line_line_
$LN20@line_line_:
  00969	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  0096e	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv454[ebp], xmm0
$LN21@line_line_:
  00976	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv454[ebp]
  0097e	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv455[ebp], xmm0
$LN23@line_line_:
  00986	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv455[ebp]
  0098e	f3 0f 11 45 f4	 movss	 DWORD PTR _t$[ebp], xmm0

; 1011 : 
; 1012 : 	  	// two nearest points
; 1013 : 
; 1014 : 		intercept_point_q->x = q1->x + v.x * t;

  00993	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00998	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0099d	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  009a0	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  009a4	8b 4d 1c	 mov	 ecx, DWORD PTR _intercept_point_q$[ebp]
  009a7	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1015 : 		intercept_point_q->y = q1->y + v.y * t;

  009ab	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _v$[ebp+4]
  009b0	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  009b5	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  009b8	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  009bd	8b 4d 1c	 mov	 ecx, DWORD PTR _intercept_point_q$[ebp]
  009c0	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1016 : 		intercept_point_q->z = q1->z + v.z * t;

  009c5	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp+8]
  009ca	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  009cf	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  009d2	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  009d7	8b 4d 1c	 mov	 ecx, DWORD PTR _intercept_point_q$[ebp]
  009da	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1017 : 
; 1018 : 		intercept_point_p->x = p1->x + u.x * s;

  009df	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  009e4	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _s$[ebp]
  009e9	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  009ec	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  009f0	8b 4d 18	 mov	 ecx, DWORD PTR _intercept_point_p$[ebp]
  009f3	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1019 : 		intercept_point_p->y = p1->y + u.y * s;

  009f7	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _u$[ebp+4]
  009fc	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00a01	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00a04	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00a09	8b 4d 18	 mov	 ecx, DWORD PTR _intercept_point_p$[ebp]
  00a0c	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1020 : 		intercept_point_p->z = p1->z + u.z * s;

  00a11	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _u$[ebp+8]
  00a16	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00a1b	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00a1e	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00a23	8b 4d 18	 mov	 ecx, DWORD PTR _intercept_point_p$[ebp]
  00a26	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1021 : 
; 1022 : 		return LINE_LINE_INTERCEPT_DIVERGE;

  00a2b	b8 02 00 00 00	 mov	 eax, 2
  00a30	e9 d5 02 00 00	 jmp	 $LN13@line_line_

; 1023 : 	}
; 1024 : 	else

  00a35	e9 d0 02 00 00	 jmp	 $LN13@line_line_
$LN12@line_line_:

; 1025 : 	{
; 1026 : 
; 1027 : 		// to calculate t
; 1028 : 
; 1029 : 		matrix [1][0] = u.x;

  00a3a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a3f	c1 e0 00	 shl	 eax, 0
  00a42	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00a46	ba 04 00 00 00	 mov	 edx, 4
  00a4b	6b c2 00	 imul	 eax, edx, 0
  00a4e	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  00a53	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 1030 : 		matrix [1][1] = u.y;

  00a58	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a5d	c1 e0 00	 shl	 eax, 0
  00a60	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00a64	ba 04 00 00 00	 mov	 edx, 4
  00a69	c1 e2 00	 shl	 edx, 0
  00a6c	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _u$[ebp+4]
  00a71	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 1031 : 		matrix [1][2] = u.z;

  00a76	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a7b	c1 e0 00	 shl	 eax, 0
  00a7e	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00a82	ba 04 00 00 00	 mov	 edx, 4
  00a87	d1 e2		 shl	 edx, 1
  00a89	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _u$[ebp+8]
  00a8e	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 1032 : 
; 1033 : 		// form cofactors, only some needed
; 1034 : 
; 1035 : 		cofactors [0] = ((matrix [1][1] * matrix [2][2]) - (matrix [1][2] * matrix [2][1]));

  00a93	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a98	c1 e0 00	 shl	 eax, 0
  00a9b	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00a9f	ba 04 00 00 00	 mov	 edx, 4
  00aa4	c1 e2 00	 shl	 edx, 0
  00aa7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00aac	d1 e0		 shl	 eax, 1
  00aae	8d 44 05 bc	 lea	 eax, DWORD PTR _matrix$[ebp+eax]
  00ab2	be 04 00 00 00	 mov	 esi, 4
  00ab7	d1 e6		 shl	 esi, 1
  00ab9	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00abe	f3 0f 59 04 30	 mulss	 xmm0, DWORD PTR [eax+esi]
  00ac3	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00ac8	c1 e1 00	 shl	 ecx, 0
  00acb	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00acf	b8 04 00 00 00	 mov	 eax, 4
  00ad4	d1 e0		 shl	 eax, 1
  00ad6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00adb	d1 e1		 shl	 ecx, 1
  00add	8d 4c 0d bc	 lea	 ecx, DWORD PTR _matrix$[ebp+ecx]
  00ae1	be 04 00 00 00	 mov	 esi, 4
  00ae6	c1 e6 00	 shl	 esi, 0
  00ae9	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00aee	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  00af3	f3 0f 5c c1	 subss	 xmm0, xmm1
  00af7	ba 04 00 00 00	 mov	 edx, 4
  00afc	6b c2 00	 imul	 eax, edx, 0
  00aff	f3 0f 11 44 05
	e0		 movss	 DWORD PTR _cofactors$[ebp+eax], xmm0

; 1036 : 		cofactors [2] = ((matrix [0][1] * matrix [1][2]) - (matrix [0][2] * matrix [1][1]));

  00b05	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b0a	6b c8 00	 imul	 ecx, eax, 0
  00b0d	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00b11	b8 04 00 00 00	 mov	 eax, 4
  00b16	c1 e0 00	 shl	 eax, 0
  00b19	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00b1e	c1 e1 00	 shl	 ecx, 0
  00b21	8d 4c 0d bc	 lea	 ecx, DWORD PTR _matrix$[ebp+ecx]
  00b25	be 04 00 00 00	 mov	 esi, 4
  00b2a	d1 e6		 shl	 esi, 1
  00b2c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00b31	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  00b36	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00b3b	6b c2 00	 imul	 eax, edx, 0
  00b3e	8d 4c 05 bc	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00b42	ba 04 00 00 00	 mov	 edx, 4
  00b47	d1 e2		 shl	 edx, 1
  00b49	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b4e	c1 e0 00	 shl	 eax, 0
  00b51	8d 44 05 bc	 lea	 eax, DWORD PTR _matrix$[ebp+eax]
  00b55	be 04 00 00 00	 mov	 esi, 4
  00b5a	c1 e6 00	 shl	 esi, 0
  00b5d	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00b62	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  00b67	f3 0f 5c c1	 subss	 xmm0, xmm1
  00b6b	b9 04 00 00 00	 mov	 ecx, 4
  00b70	d1 e1		 shl	 ecx, 1
  00b72	f3 0f 11 44 0d
	e0		 movss	 DWORD PTR _cofactors$[ebp+ecx], xmm0

; 1037 : 
; 1038 : 		// determinant
; 1039 : 
; 1040 : 		det_t = (matrix [0][0] * cofactors [0]) - (matrix [1][0] * cofactors [1]) + (matrix [2][0] * cofactors [2]);

  00b78	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b7d	6b c8 00	 imul	 ecx, eax, 0
  00b80	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00b84	b8 04 00 00 00	 mov	 eax, 4
  00b89	6b c8 00	 imul	 ecx, eax, 0
  00b8c	b8 04 00 00 00	 mov	 eax, 4
  00b91	6b c0 00	 imul	 eax, eax, 0
  00b94	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00b99	f3 0f 59 44 05
	e0		 mulss	 xmm0, DWORD PTR _cofactors$[ebp+eax]
  00b9f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00ba4	c1 e1 00	 shl	 ecx, 0
  00ba7	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00bab	b8 04 00 00 00	 mov	 eax, 4
  00bb0	6b c8 00	 imul	 ecx, eax, 0
  00bb3	b8 04 00 00 00	 mov	 eax, 4
  00bb8	c1 e0 00	 shl	 eax, 0
  00bbb	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  00bc0	f3 0f 59 4c 05
	e0		 mulss	 xmm1, DWORD PTR _cofactors$[ebp+eax]
  00bc6	f3 0f 5c c1	 subss	 xmm0, xmm1
  00bca	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00bcf	d1 e1		 shl	 ecx, 1
  00bd1	8d 54 0d bc	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00bd5	b8 04 00 00 00	 mov	 eax, 4
  00bda	6b c8 00	 imul	 ecx, eax, 0
  00bdd	b8 04 00 00 00	 mov	 eax, 4
  00be2	d1 e0		 shl	 eax, 1
  00be4	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  00be9	f3 0f 59 4c 05
	e0		 mulss	 xmm1, DWORD PTR _cofactors$[ebp+eax]
  00bef	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bf3	f3 0f 11 45 ec	 movss	 DWORD PTR _det_t$[ebp], xmm0

; 1041 : 
; 1042 :   		// parametric point
; 1043 : 
; 1044 : 		t = det_t / u_x_v_mag_squared;

  00bf8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _det_t$[ebp]
  00bfd	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _u_x_v_mag_squared$[ebp]
  00c02	f3 0f 11 45 f4	 movss	 DWORD PTR _t$[ebp], xmm0

; 1045 : 
; 1046 : 		t = bound (t, 0.0, 1.0);

  00c07	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  00c0c	0f 57 c9	 xorps	 xmm1, xmm1
  00c0f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00c13	76 0d		 jbe	 SHORT $LN26@line_line_
  00c15	0f 57 c0	 xorps	 xmm0, xmm0
  00c18	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv565[ebp], xmm0
  00c20	eb 3e		 jmp	 SHORT $LN27@line_line_
$LN26@line_line_:
  00c22	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  00c27	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00c2f	76 12		 jbe	 SHORT $LN24@line_line_
  00c31	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00c39	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv564[ebp], xmm0
  00c41	eb 0d		 jmp	 SHORT $LN25@line_line_
$LN24@line_line_:
  00c43	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  00c48	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv564[ebp], xmm0
$LN25@line_line_:
  00c50	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv564[ebp]
  00c58	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv565[ebp], xmm0
$LN27@line_line_:
  00c60	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv565[ebp]
  00c68	f3 0f 11 45 f4	 movss	 DWORD PTR _t$[ebp], xmm0

; 1047 : 
; 1048 : 	  	// two nearest points
; 1049 : 
; 1050 : 		intercept_point_q->x = q1->x + v.x * t;

  00c6d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00c72	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00c77	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  00c7a	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00c7e	8b 4d 1c	 mov	 ecx, DWORD PTR _intercept_point_q$[ebp]
  00c81	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1051 : 		intercept_point_q->y = q1->y + v.y * t;

  00c85	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _v$[ebp+4]
  00c8a	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00c8f	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  00c92	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00c97	8b 4d 1c	 mov	 ecx, DWORD PTR _intercept_point_q$[ebp]
  00c9a	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1052 : 		intercept_point_q->z = q1->z + v.z * t;

  00c9f	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp+8]
  00ca4	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00ca9	8b 45 10	 mov	 eax, DWORD PTR _q1$[ebp]
  00cac	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00cb1	8b 4d 1c	 mov	 ecx, DWORD PTR _intercept_point_q$[ebp]
  00cb4	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1053 : 
; 1054 : 		intercept_point_p->x = p1->x + u.x * s;

  00cb9	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  00cbe	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00cc3	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00cc6	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00cca	8b 4d 18	 mov	 ecx, DWORD PTR _intercept_point_p$[ebp]
  00ccd	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1055 : 		intercept_point_p->y = p1->y + u.y * s;

  00cd1	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _u$[ebp+4]
  00cd6	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00cdb	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00cde	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00ce3	8b 4d 18	 mov	 ecx, DWORD PTR _intercept_point_p$[ebp]
  00ce6	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1056 : 		intercept_point_p->z = p1->z + u.z * s;

  00ceb	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _u$[ebp+8]
  00cf0	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00cf5	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00cf8	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00cfd	8b 4d 18	 mov	 ecx, DWORD PTR _intercept_point_p$[ebp]
  00d00	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1057 : 
; 1058 : 		return LINE_LINE_INTERCEPT_CONVERGE;

  00d05	b8 01 00 00 00	 mov	 eax, 1
$LN13@line_line_:

; 1059 : 	}
; 1060 : }

  00d0a	5f		 pop	 edi
  00d0b	5e		 pop	 esi
  00d0c	5b		 pop	 ebx
  00d0d	8b e5		 mov	 esp, ebp
  00d0f	5d		 pop	 ebp
  00d10	c2 18 00	 ret	 24			; 00000018H
?line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU2@1@Z ENDP ; line_line_3d_intercept
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_2d_perp_dist_of_point_from_infinite_line@@YGMPBUVEC3D@@00@Z
_TEXT	SEGMENT
_dz$ = -24						; size = 4
_dx$ = -20						; size = 4
_d$ = -16						; size = 4
_normal$ = -12						; size = 12
_line_point_a$ = 8					; size = 4
_line_point_b$ = 12					; size = 4
_point_c$ = 16						; size = 4
?get_2d_perp_dist_of_point_from_infinite_line@@YGMPBUVEC3D@@00@Z PROC ; get_2d_perp_dist_of_point_from_infinite_line, COMDAT

; 691  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 692  : 	vec3d
; 693  : 		normal;
; 694  : 
; 695  : 	float
; 696  : 		d,
; 697  : 		dx,
; 698  : 		dz;
; 699  : 
; 700  : 	//
; 701  : 	// find distance
; 702  : 	//
; 703  : 
; 704  : 	dx = line_point_b->x - line_point_a->x;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _line_point_b$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00017	f3 0f 11 45 ec	 movss	 DWORD PTR _dx$[ebp], xmm0

; 705  : 	dz = line_point_b->z - line_point_a->z;

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _line_point_b$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  00022	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00027	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0002c	f3 0f 11 45 e8	 movss	 DWORD PTR _dz$[ebp], xmm0

; 706  : 
; 707  : 	normal.x = dz;

  00031	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dz$[ebp]
  00036	f3 0f 11 45 f4	 movss	 DWORD PTR _normal$[ebp], xmm0

; 708  : 	normal.y = 0;

  0003b	0f 57 c0	 xorps	 xmm0, xmm0
  0003e	f3 0f 11 45 f8	 movss	 DWORD PTR _normal$[ebp+4], xmm0

; 709  : 	normal.z = -dx;

  00043	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00048	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0004f	f3 0f 11 45 fc	 movss	 DWORD PTR _normal$[ebp+8], xmm0

; 710  : 
; 711  : 	normalise_3d_vector( &normal );

  00054	8d 45 f4	 lea	 eax, DWORD PTR _normal$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  0005d	dd d8		 fstp	 ST(0)

; 712  : 
; 713  : 	d = ( ( point_c->x * normal.x ) + ( point_c->z * normal.z ) )

  0005f	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  00062	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00066	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _normal$[ebp]
  0006b	8b 4d 10	 mov	 ecx, DWORD PTR _point_c$[ebp]
  0006e	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00073	f3 0f 59 4d fc	 mulss	 xmm1, DWORD PTR _normal$[ebp+8]
  00078	f3 0f 58 c1	 addss	 xmm0, xmm1
  0007c	8b 55 08	 mov	 edx, DWORD PTR _line_point_a$[ebp]
  0007f	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00083	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _normal$[ebp]
  00088	8b 45 08	 mov	 eax, DWORD PTR _line_point_a$[ebp]
  0008b	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00090	f3 0f 59 55 fc	 mulss	 xmm2, DWORD PTR _normal$[ebp+8]
  00095	f3 0f 58 ca	 addss	 xmm1, xmm2
  00099	f3 0f 5c c1	 subss	 xmm0, xmm1
  0009d	f3 0f 11 45 f0	 movss	 DWORD PTR _d$[ebp], xmm0

; 714  : 						- ( ( line_point_a->x * normal.x ) + ( line_point_a->z * normal.z ) );
; 715  : 
; 716  : 	return fabs( d );

  000a2	51		 push	 ecx
  000a3	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _d$[ebp]
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs

; 717  : }

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 0c 00	 ret	 12			; 0000000cH
?get_2d_perp_dist_of_point_from_infinite_line@@YGMPBUVEC3D@@00@Z ENDP ; get_2d_perp_dist_of_point_from_infinite_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_2d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAM@Z
_TEXT	SEGMENT
_ac$ = -44						; size = 12
_ab$ = -32						; size = 12
_cos_theta$ = -20					; size = 4
_mag_ad$ = -16						; size = 4
_mag_ac$ = -12						; size = 4
_mag_ab$ = -8						; size = 4
_d$ = -4						; size = 4
_line_point_a$ = 8					; size = 4
_line_point_b$ = 12					; size = 4
_point_c$ = 16						; size = 4
_distance_along_line$ = 20				; size = 4
?get_2d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAM@Z PROC ; get_2d_perp_dist_of_point_from_line, COMDAT

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 619  : 
; 620  : 	float
; 621  : 		d,
; 622  : 		mag_ab,
; 623  : 		mag_ac,
; 624  : 		mag_ad,
; 625  : 		cos_theta;
; 626  : 
; 627  : 	vec3d
; 628  : 		ab, ac;
; 629  : 
; 630  : 	if ( distance_along_line )

  00009	83 7d 14 00	 cmp	 DWORD PTR _distance_along_line$[ebp], 0
  0000d	74 0a		 je	 SHORT $LN2@get_2d_per

; 631  : 	{
; 632  : 		*distance_along_line = 0.0;

  0000f	8b 45 14	 mov	 eax, DWORD PTR _distance_along_line$[ebp]
  00012	0f 57 c0	 xorps	 xmm0, xmm0
  00015	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN2@get_2d_per:

; 633  : 	}
; 634  : 
; 635  : 	//
; 636  : 	// check point is within bounds of the line
; 637  : 	//
; 638  : 
; 639  : 	ab.x = line_point_b->x - line_point_a->x;

  00019	8b 45 0c	 mov	 eax, DWORD PTR _line_point_b$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  0001f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00023	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00027	f3 0f 11 45 e0	 movss	 DWORD PTR _ab$[ebp], xmm0

; 640  : 	ab.y = 0.0;

  0002c	0f 57 c0	 xorps	 xmm0, xmm0
  0002f	f3 0f 11 45 e4	 movss	 DWORD PTR _ab$[ebp+4], xmm0

; 641  : 	ab.z = line_point_b->z - line_point_a->z;

  00034	8b 45 0c	 mov	 eax, DWORD PTR _line_point_b$[ebp]
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  0003a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0003f	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00044	f3 0f 11 45 e8	 movss	 DWORD PTR _ab$[ebp+8], xmm0

; 642  : 
; 643  : 	ac.x = point_c->x - line_point_a->x;

  00049	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  0004f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00053	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00057	f3 0f 11 45 d4	 movss	 DWORD PTR _ac$[ebp], xmm0

; 644  : 	ac.y = 0.0;

  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f3 0f 11 45 d8	 movss	 DWORD PTR _ac$[ebp+4], xmm0

; 645  : 	ac.z = point_c->z - line_point_a->z;

  00064	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  0006a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0006f	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00074	f3 0f 11 45 dc	 movss	 DWORD PTR _ac$[ebp+8], xmm0

; 646  : 
; 647  : 	mag_ab = normalise_3d_vector( &ab );			// line AB must be a line and not a single point

  00079	8d 45 e0	 lea	 eax, DWORD PTR _ab$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  00082	d9 5d f8	 fstp	 DWORD PTR _mag_ab$[ebp]

; 648  : 	mag_ac = normalise_any_3d_vector( &ac );		// but C can be same point as A

  00085	8d 45 d4	 lea	 eax, DWORD PTR _ac$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  0008e	d9 5d f4	 fstp	 DWORD PTR _mag_ac$[ebp]

; 649  : 
; 650  : 	//
; 651  : 	// calc angle between vectors (dot product)
; 652  : 	//
; 653  : 
; 654  : 	cos_theta = (ab.x * ac.x) + (ab.y * ac.y) + (ab.z * ac.z);

  00091	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _ab$[ebp]
  00096	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _ac$[ebp]
  0009b	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _ab$[ebp+4]
  000a0	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _ac$[ebp+4]
  000a5	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a9	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _ab$[ebp+8]
  000ae	f3 0f 59 4d dc	 mulss	 xmm1, DWORD PTR _ac$[ebp+8]
  000b3	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b7	f3 0f 11 45 ec	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 655  : 
; 656  : 	//
; 657  : 	// check point is perpendicular to line
; 658  : 	//
; 659  : 
; 660  : 	if (cos_theta < 0.0)

  000bc	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _cos_theta$[ebp]
  000c1	0f 57 c9	 xorps	 xmm1, xmm1
  000c4	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c8	76 08		 jbe	 SHORT $LN3@get_2d_per

; 661  : 	{
; 662  : 		return (FLT_MAX);

  000ca	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  000d0	eb 4b		 jmp	 SHORT $LN1@get_2d_per
$LN3@get_2d_per:

; 663  : 	}
; 664  : 
; 665  : 	mag_ad = mag_ac * cos_theta;

  000d2	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _mag_ac$[ebp]
  000d7	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  000dc	f3 0f 11 45 f0	 movss	 DWORD PTR _mag_ad$[ebp], xmm0

; 666  : 
; 667  : 	if (mag_ad > mag_ab)

  000e1	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mag_ad$[ebp]
  000e6	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _mag_ab$[ebp]
  000ea	76 08		 jbe	 SHORT $LN4@get_2d_per

; 668  : 	{
; 669  : 		return (FLT_MAX);

  000ec	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  000f2	eb 29		 jmp	 SHORT $LN1@get_2d_per
$LN4@get_2d_per:

; 670  : 	}
; 671  : 
; 672  : 	//
; 673  : 	// find distance
; 674  : 	//
; 675  : 
; 676  : 	d = get_2d_perp_dist_of_point_from_infinite_line (line_point_a, line_point_b, point_c);

  000f4	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  000f7	50		 push	 eax
  000f8	8b 4d 0c	 mov	 ecx, DWORD PTR _line_point_b$[ebp]
  000fb	51		 push	 ecx
  000fc	8b 55 08	 mov	 edx, DWORD PTR _line_point_a$[ebp]
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 ?get_2d_perp_dist_of_point_from_infinite_line@@YGMPBUVEC3D@@00@Z ; get_2d_perp_dist_of_point_from_infinite_line
  00105	d9 5d fc	 fstp	 DWORD PTR _d$[ebp]

; 677  : 
; 678  : 	if ( distance_along_line )

  00108	83 7d 14 00	 cmp	 DWORD PTR _distance_along_line$[ebp], 0
  0010c	74 0c		 je	 SHORT $LN5@get_2d_per

; 679  : 	{
; 680  : 		*distance_along_line = mag_ad;

  0010e	8b 45 14	 mov	 eax, DWORD PTR _distance_along_line$[ebp]
  00111	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mag_ad$[ebp]
  00116	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN5@get_2d_per:

; 681  : 	}
; 682  : 
; 683  : 	return d;

  0011a	d9 45 fc	 fld	 DWORD PTR _d$[ebp]
$LN1@get_2d_per:

; 684  : }

  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 10 00	 ret	 16			; 00000010H
?get_2d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAM@Z ENDP ; get_2d_perp_dist_of_point_from_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU1@@Z
_TEXT	SEGMENT
_cos_theta$ = -52					; size = 4
_mag_ap$ = -48						; size = 4
_mag_ac$ = -44						; size = 4
_mag_ab$ = -40						; size = 4
_P$ = -36						; size = 12
_B$ = -24						; size = 12
_A$ = -12						; size = 12
_line_point_a$ = 8					; size = 4
_line_point_b$ = 12					; size = 4
_point_c$ = 16						; size = 4
_result$ = 20						; size = 4
?get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU1@@Z PROC ; get_3d_perp_vector_of_point_from_line, COMDAT

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 518  : 	vec3d
; 519  : 		A,
; 520  : 		B,
; 521  : 		P;
; 522  : 
; 523  : 
; 524  : 	float
; 525  : 		mag_ab,
; 526  : 		mag_ac,
; 527  : 		mag_ap,
; 528  : 		cos_theta;
; 529  : 
; 530  : 	//
; 531  : 	// need to find a point P on line a->b such that result = P->c
; 532  : 	//
; 533  : 
; 534  : 	ASSERT (line_point_a);

  00009	83 7d 08 00	 cmp	 DWORD PTR _line_point_a$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_per
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU2@@Z@4JA
  00014	83 c0 11	 add	 eax, 17			; 00000011H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GOLCEOGO@line_point_a@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_per:

; 535  : 
; 536  : 	ASSERT (line_point_b);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _line_point_b$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_per
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU2@@Z@4JA
  00032	83 c0 13	 add	 eax, 19			; 00000013H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EFJPBNKN@line_point_b@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_per:

; 537  : 
; 538  : 	ASSERT (point_c);

  00045	83 7d 10 00	 cmp	 DWORD PTR _point_c$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@get_3d_per
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU2@@Z@4JA
  00050	83 c0 15	 add	 eax, 21			; 00000015H
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_07IPOHHMJG@point_c@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_3d_per:

; 539  : 
; 540  : 	ASSERT (result);

  00063	83 7d 14 00	 cmp	 DWORD PTR _result$[ebp], 0
  00067	75 18		 jne	 SHORT $LN5@get_3d_per
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU2@@Z@4JA
  0006e	83 c0 17	 add	 eax, 23			; 00000017H
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_06KJFADLGN@result@
  0007c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_3d_per:

; 541  : 
; 542  : 	//
; 543  : 	// calc vector from point a to point b
; 544  : 	//
; 545  : 
; 546  : 	A.x = line_point_b->x - line_point_a->x;

  00081	8b 45 0c	 mov	 eax, DWORD PTR _line_point_b$[ebp]
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  00087	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008b	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0008f	f3 0f 11 45 f4	 movss	 DWORD PTR _A$[ebp], xmm0

; 547  : 	A.y = line_point_b->y - line_point_a->y;

  00094	8b 45 0c	 mov	 eax, DWORD PTR _line_point_b$[ebp]
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  0009a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0009f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  000a4	f3 0f 11 45 f8	 movss	 DWORD PTR _A$[ebp+4], xmm0

; 548  : 	A.z = line_point_b->z - line_point_a->z;

  000a9	8b 45 0c	 mov	 eax, DWORD PTR _line_point_b$[ebp]
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  000af	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000b4	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  000b9	f3 0f 11 45 fc	 movss	 DWORD PTR _A$[ebp+8], xmm0

; 549  : 
; 550  : 	//
; 551  : 	// calc vector from point a to point c
; 552  : 	//
; 553  : 
; 554  : 	B.x = point_c->x - line_point_a->x;

  000be	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  000c4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c8	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  000cc	f3 0f 11 45 e8	 movss	 DWORD PTR _B$[ebp], xmm0

; 555  : 	B.y = point_c->y - line_point_a->y;

  000d1	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  000d4	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  000d7	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000dc	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  000e1	f3 0f 11 45 ec	 movss	 DWORD PTR _B$[ebp+4], xmm0

; 556  : 	B.z = point_c->z - line_point_a->z;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _line_point_a$[ebp]
  000ec	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000f1	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  000f6	f3 0f 11 45 f0	 movss	 DWORD PTR _B$[ebp+8], xmm0

; 557  : 
; 558  : 	//
; 559  : 	// check against two of the points being identical
; 560  : 	//
; 561  : 
; 562  : 	mag_ab = get_3d_vector_magnitude (&A);

  000fb	8d 45 f4	 lea	 eax, DWORD PTR _A$[ebp]
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00104	d9 5d d8	 fstp	 DWORD PTR _mag_ab$[ebp]

; 563  : 
; 564  : 	mag_ac = get_3d_vector_magnitude (&B);

  00107	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00110	d9 5d d4	 fstp	 DWORD PTR _mag_ac$[ebp]

; 565  : 
; 566  : 	if ( mag_ac == 0 )

  00113	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mag_ac$[ebp]
  00118	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0011f	9f		 lahf
  00120	f6 c4 44	 test	 ah, 68			; 00000044H
  00123	7a 25		 jp	 SHORT $LN6@get_3d_per

; 567  : 	{
; 568  : 		// point a == point c :-> point is on the line so dist = 0
; 569  : 		result->x = 0;

  00125	8b 45 14	 mov	 eax, DWORD PTR _result$[ebp]
  00128	0f 57 c0	 xorps	 xmm0, xmm0
  0012b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 570  : 		result->y = 0;

  0012f	8b 45 14	 mov	 eax, DWORD PTR _result$[ebp]
  00132	0f 57 c0	 xorps	 xmm0, xmm0
  00135	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 571  : 		result->z = 0;

  0013a	8b 45 14	 mov	 eax, DWORD PTR _result$[ebp]
  0013d	0f 57 c0	 xorps	 xmm0, xmm0
  00140	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 572  : 		return;

  00145	e9 29 01 00 00	 jmp	 $LN1@get_3d_per
$LN6@get_3d_per:

; 573  : 	}
; 574  : 	if ( mag_ab == 0 )

  0014a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mag_ab$[ebp]
  0014f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00156	9f		 lahf
  00157	f6 c4 44	 test	 ah, 68			; 00000044H
  0015a	7a 2b		 jp	 SHORT $LN7@get_3d_per

; 575  : 	{
; 576  : 		// point a == point b :-> return vector a -> c
; 577  : 		result->x = B.x;

  0015c	8b 45 14	 mov	 eax, DWORD PTR _result$[ebp]
  0015f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _B$[ebp]
  00164	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 578  : 		result->y = B.y;

  00168	8b 45 14	 mov	 eax, DWORD PTR _result$[ebp]
  0016b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _B$[ebp+4]
  00170	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 579  : 		result->z = B.z;

  00175	8b 45 14	 mov	 eax, DWORD PTR _result$[ebp]
  00178	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _B$[ebp+8]
  0017d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 580  : 		return;

  00182	e9 ec 00 00 00	 jmp	 $LN1@get_3d_per
$LN7@get_3d_per:

; 581  : 	}
; 582  : 
; 583  : 	normalise_3d_vector_given_magnitude (&A, mag_ab);

  00187	51		 push	 ecx
  00188	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mag_ab$[ebp]
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	8d 45 f4	 lea	 eax, DWORD PTR _A$[ebp]
  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 584  : 
; 585  : 	normalise_3d_vector_given_magnitude (&B, mag_ac);

  0019b	51		 push	 ecx
  0019c	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mag_ac$[ebp]
  001a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a6	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 586  : 
; 587  : 	//
; 588  : 	// calc angle between vectors (dot product), where fabs() guarantees 0 <= angle <= 90
; 589  : 	//
; 590  : 
; 591  : 	cos_theta = fabs( (A.x * B.x) + (A.y * B.y) + (A.z * B.z) );

  001af	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _A$[ebp]
  001b4	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _B$[ebp]
  001b9	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _A$[ebp+4]
  001be	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _B$[ebp+4]
  001c3	f3 0f 58 c1	 addss	 xmm0, xmm1
  001c7	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _A$[ebp+8]
  001cc	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _B$[ebp+8]
  001d1	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d5	51		 push	 ecx
  001d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001db	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  001e0	d9 5d cc	 fstp	 DWORD PTR _cos_theta$[ebp]

; 592  : 
; 593  : 	//
; 594  : 	// find distance of point P along line a->b ( where P->c is our required vector )
; 595  : 	//
; 596  : 
; 597  : 	mag_ap = mag_ac * cos_theta;

  001e3	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mag_ac$[ebp]
  001e8	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  001ed	f3 0f 11 45 d0	 movss	 DWORD PTR _mag_ap$[ebp], xmm0

; 598  : 
; 599  : 	P.x = line_point_a->x + ( mag_ap * A.x );

  001f2	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _mag_ap$[ebp]
  001f7	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _A$[ebp]
  001fc	8b 45 08	 mov	 eax, DWORD PTR _line_point_a$[ebp]
  001ff	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00203	f3 0f 11 45 dc	 movss	 DWORD PTR _P$[ebp], xmm0

; 600  : 	P.y = line_point_a->y + ( mag_ap * A.y );

  00208	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _mag_ap$[ebp]
  0020d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _A$[ebp+4]
  00212	8b 45 08	 mov	 eax, DWORD PTR _line_point_a$[ebp]
  00215	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0021a	f3 0f 11 45 e0	 movss	 DWORD PTR _P$[ebp+4], xmm0

; 601  : 	P.z = line_point_a->z + ( mag_ap * A.z );

  0021f	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _mag_ap$[ebp]
  00224	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _A$[ebp+8]
  00229	8b 45 08	 mov	 eax, DWORD PTR _line_point_a$[ebp]
  0022c	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00231	f3 0f 11 45 e4	 movss	 DWORD PTR _P$[ebp+8], xmm0

; 602  : 
; 603  : 	//
; 604  : 	// return the vector from P to point c
; 605  : 	//
; 606  : 
; 607  : 	result->x = point_c->x - P.x;

  00236	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  00239	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0023d	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _P$[ebp]
  00242	8b 4d 14	 mov	 ecx, DWORD PTR _result$[ebp]
  00245	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 608  : 	result->y = point_c->y - P.y;

  00249	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  0024c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00251	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _P$[ebp+4]
  00256	8b 4d 14	 mov	 ecx, DWORD PTR _result$[ebp]
  00259	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 609  : 	result->z = point_c->z - P.z;

  0025e	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  00261	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00266	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _P$[ebp+8]
  0026b	8b 4d 14	 mov	 ecx, DWORD PTR _result$[ebp]
  0026e	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN1@get_3d_per:

; 610  : 
; 611  : }

  00273	5f		 pop	 edi
  00274	5e		 pop	 esi
  00275	5b		 pop	 ebx
  00276	8b e5		 mov	 esp, ebp
  00278	5d		 pop	 ebp
  00279	c2 10 00	 ret	 16			; 00000010H
?get_3d_perp_vector_of_point_from_line@@YGXPBUVEC3D@@00PAU1@@Z ENDP ; get_3d_perp_vector_of_point_from_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU1@@Z
_TEXT	SEGMENT
tv336 = -116						; size = 4
_uv_ac$ = -48						; size = 12
_uv_ab$ = -36						; size = 12
_dist$ = -24						; size = 4
_cos_theta$ = -20					; size = 4
_theta$ = -16						; size = 4
_mag_ad$ = -12						; size = 4
_mag_ac$ = -8						; size = 4
_mag_ab$ = -4						; size = 4
_point_a$ = 8						; size = 4
_point_b$ = 12						; size = 4
_point_c$ = 16						; size = 4
_point_d$ = 20						; size = 4
?get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU1@@Z PROC ; get_3d_perp_dist_of_point_from_line, COMDAT

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 395  : 	float
; 396  : 		mag_ab,
; 397  : 		mag_ac,
; 398  : 		mag_ad,
; 399  : 		theta,
; 400  : 		cos_theta,
; 401  : 		dist;
; 402  : 
; 403  : 	vec3d
; 404  : 		uv_ab,
; 405  : 		uv_ac;
; 406  : 
; 407  : 	ASSERT (point_a);

  00009	83 7d 08 00	 cmp	 DWORD PTR _point_a$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_per
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU2@@Z@4JA
  00014	83 c0 0d	 add	 eax, 13			; 0000000dH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_07LNNBBOBE@point_a@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_per:

; 408  : 
; 409  : 	ASSERT (point_b);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _point_b$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_per
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU2@@Z@4JA
  00032	83 c0 0f	 add	 eax, 15			; 0000000fH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07JGPMENNH@point_b@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_per:

; 410  : 
; 411  : 	ASSERT (point_c);

  00045	83 7d 10 00	 cmp	 DWORD PTR _point_c$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@get_3d_per
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU2@@Z@4JA
  00050	83 c0 11	 add	 eax, 17			; 00000011H
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_07IPOHHMJG@point_c@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_3d_per:

; 412  : 
; 413  : 	//
; 414  : 	// calc vector from point a to point b
; 415  : 	//
; 416  : 
; 417  : 	uv_ab.x = point_b->x - point_a->x;

  00063	8b 45 0c	 mov	 eax, DWORD PTR _point_b$[ebp]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _point_a$[ebp]
  00069	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0006d	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00071	f3 0f 11 45 dc	 movss	 DWORD PTR _uv_ab$[ebp], xmm0

; 418  : 	uv_ab.y = point_b->y - point_a->y;

  00076	8b 45 0c	 mov	 eax, DWORD PTR _point_b$[ebp]
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _point_a$[ebp]
  0007c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00081	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00086	f3 0f 11 45 e0	 movss	 DWORD PTR _uv_ab$[ebp+4], xmm0

; 419  : 	uv_ab.z = point_b->z - point_a->z;

  0008b	8b 45 0c	 mov	 eax, DWORD PTR _point_b$[ebp]
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _point_a$[ebp]
  00091	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00096	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0009b	f3 0f 11 45 e4	 movss	 DWORD PTR _uv_ab$[ebp+8], xmm0

; 420  : 
; 421  : 	mag_ab = sqrt ((uv_ab.x * uv_ab.x) + (uv_ab.y * uv_ab.y) + (uv_ab.z * uv_ab.z));

  000a0	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _uv_ab$[ebp]
  000a5	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _uv_ab$[ebp]
  000aa	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _uv_ab$[ebp+4]
  000af	f3 0f 59 4d e0	 mulss	 xmm1, DWORD PTR _uv_ab$[ebp+4]
  000b4	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b8	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _uv_ab$[ebp+8]
  000bd	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _uv_ab$[ebp+8]
  000c2	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c6	51		 push	 ecx
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  000d1	d9 5d fc	 fstp	 DWORD PTR _mag_ab$[ebp]

; 422  : 
; 423  : 	if (mag_ab == 0.0)

  000d4	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _mag_ab$[ebp]
  000d9	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  000e1	9f		 lahf
  000e2	f6 c4 44	 test	 ah, 68			; 00000044H
  000e5	7a 27		 jp	 SHORT $LN5@get_3d_per

; 424  : 	{
; 425  : 		if (point_d)

  000e7	83 7d 14 00	 cmp	 DWORD PTR _point_d$[ebp], 0
  000eb	74 16		 je	 SHORT $LN6@get_3d_per

; 426  : 		{
; 427  : 			*point_d = *point_a;

  000ed	8b 45 08	 mov	 eax, DWORD PTR _point_a$[ebp]
  000f0	8b 4d 14	 mov	 ecx, DWORD PTR _point_d$[ebp]
  000f3	8b 10		 mov	 edx, DWORD PTR [eax]
  000f5	89 11		 mov	 DWORD PTR [ecx], edx
  000f7	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000fa	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000fd	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00100	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN6@get_3d_per:

; 428  : 		}
; 429  : 
; 430  : 		return (FLT_MAX);

  00103	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  00109	e9 fe 01 00 00	 jmp	 $LN1@get_3d_per
$LN5@get_3d_per:

; 431  : 	}
; 432  : 
; 433  : 	normalise_3d_vector_given_magnitude (&uv_ab, mag_ab);

  0010e	51		 push	 ecx
  0010f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _mag_ab$[ebp]
  00114	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00119	8d 45 dc	 lea	 eax, DWORD PTR _uv_ab$[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 434  : 
; 435  : 	//
; 436  : 	// calc vector from point a to point c
; 437  : 	//
; 438  : 
; 439  : 	uv_ac.x = point_c->x - point_a->x;

  00122	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  00125	8b 4d 08	 mov	 ecx, DWORD PTR _point_a$[ebp]
  00128	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0012c	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00130	f3 0f 11 45 d0	 movss	 DWORD PTR _uv_ac$[ebp], xmm0

; 440  : 	uv_ac.y = point_c->y - point_a->y;

  00135	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  00138	8b 4d 08	 mov	 ecx, DWORD PTR _point_a$[ebp]
  0013b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00140	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00145	f3 0f 11 45 d4	 movss	 DWORD PTR _uv_ac$[ebp+4], xmm0

; 441  : 	uv_ac.z = point_c->z - point_a->z;

  0014a	8b 45 10	 mov	 eax, DWORD PTR _point_c$[ebp]
  0014d	8b 4d 08	 mov	 ecx, DWORD PTR _point_a$[ebp]
  00150	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00155	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0015a	f3 0f 11 45 d8	 movss	 DWORD PTR _uv_ac$[ebp+8], xmm0

; 442  : 
; 443  : 	mag_ac = sqrt ((uv_ac.x * uv_ac.x) + (uv_ac.y * uv_ac.y) + (uv_ac.z * uv_ac.z));

  0015f	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _uv_ac$[ebp]
  00164	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _uv_ac$[ebp]
  00169	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _uv_ac$[ebp+4]
  0016e	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _uv_ac$[ebp+4]
  00173	f3 0f 58 c1	 addss	 xmm0, xmm1
  00177	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _uv_ac$[ebp+8]
  0017c	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _uv_ac$[ebp+8]
  00181	f3 0f 58 c1	 addss	 xmm0, xmm1
  00185	51		 push	 ecx
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00190	d9 5d f8	 fstp	 DWORD PTR _mag_ac$[ebp]

; 444  : 
; 445  : 	if (mag_ac == 0.0)

  00193	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _mag_ac$[ebp]
  00198	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  001a0	9f		 lahf
  001a1	f6 c4 44	 test	 ah, 68			; 00000044H
  001a4	7a 27		 jp	 SHORT $LN7@get_3d_per

; 446  : 	{
; 447  : 		if (point_d)

  001a6	83 7d 14 00	 cmp	 DWORD PTR _point_d$[ebp], 0
  001aa	74 16		 je	 SHORT $LN8@get_3d_per

; 448  : 		{
; 449  : 			*point_d = *point_a;

  001ac	8b 45 08	 mov	 eax, DWORD PTR _point_a$[ebp]
  001af	8b 4d 14	 mov	 ecx, DWORD PTR _point_d$[ebp]
  001b2	8b 10		 mov	 edx, DWORD PTR [eax]
  001b4	89 11		 mov	 DWORD PTR [ecx], edx
  001b6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001b9	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  001bc	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001bf	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN8@get_3d_per:

; 450  : 		}
; 451  : 
; 452  : 		return (FLT_MAX);

  001c2	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  001c8	e9 3f 01 00 00	 jmp	 $LN1@get_3d_per
$LN7@get_3d_per:

; 453  : 	}
; 454  : 
; 455  : 	normalise_3d_vector_given_magnitude (&uv_ac, mag_ac);

  001cd	51		 push	 ecx
  001ce	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _mag_ac$[ebp]
  001d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d8	8d 45 d0	 lea	 eax, DWORD PTR _uv_ac$[ebp]
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 456  : 
; 457  : 	//
; 458  : 	// calc angle between vectors (dot product)
; 459  : 	//
; 460  : 
; 461  : 	cos_theta = (uv_ab.x * uv_ac.x) + (uv_ab.y * uv_ac.y) + (uv_ab.z * uv_ac.z);

  001e1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _uv_ab$[ebp]
  001e6	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _uv_ac$[ebp]
  001eb	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _uv_ab$[ebp+4]
  001f0	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _uv_ac$[ebp+4]
  001f5	f3 0f 58 c1	 addss	 xmm0, xmm1
  001f9	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _uv_ab$[ebp+8]
  001fe	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _uv_ac$[ebp+8]
  00203	f3 0f 58 c1	 addss	 xmm0, xmm1
  00207	f3 0f 11 45 ec	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 462  : 
; 463  : 	//
; 464  : 	// check point is perpendicular to line
; 465  : 	//
; 466  : 
; 467  : 	if (cos_theta < 0.0)

  0020c	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _cos_theta$[ebp]
  00211	0f 57 c9	 xorps	 xmm1, xmm1
  00214	66 0f 2f c8	 comisd	 xmm1, xmm0
  00218	76 27		 jbe	 SHORT $LN9@get_3d_per

; 468  : 	{
; 469  : 		if (point_d)

  0021a	83 7d 14 00	 cmp	 DWORD PTR _point_d$[ebp], 0
  0021e	74 16		 je	 SHORT $LN10@get_3d_per

; 470  : 		{
; 471  : 			*point_d = *point_a;

  00220	8b 45 08	 mov	 eax, DWORD PTR _point_a$[ebp]
  00223	8b 4d 14	 mov	 ecx, DWORD PTR _point_d$[ebp]
  00226	8b 10		 mov	 edx, DWORD PTR [eax]
  00228	89 11		 mov	 DWORD PTR [ecx], edx
  0022a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0022d	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00230	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00233	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN10@get_3d_per:

; 472  : 		}
; 473  : 
; 474  : 		return (FLT_MAX);

  00236	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  0023c	e9 cb 00 00 00	 jmp	 $LN1@get_3d_per
$LN9@get_3d_per:

; 475  : 	}
; 476  : 
; 477  : 	mag_ad = mag_ac * cos_theta;

  00241	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _mag_ac$[ebp]
  00246	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  0024b	f3 0f 11 45 f4	 movss	 DWORD PTR _mag_ad$[ebp], xmm0

; 478  : 
; 479  : 	if (mag_ad > mag_ab)

  00250	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _mag_ad$[ebp]
  00255	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR _mag_ab$[ebp]
  00259	76 27		 jbe	 SHORT $LN11@get_3d_per

; 480  : 	{
; 481  : 		if (point_d)

  0025b	83 7d 14 00	 cmp	 DWORD PTR _point_d$[ebp], 0
  0025f	74 16		 je	 SHORT $LN12@get_3d_per

; 482  : 		{
; 483  : 			*point_d = *point_b;

  00261	8b 45 0c	 mov	 eax, DWORD PTR _point_b$[ebp]
  00264	8b 4d 14	 mov	 ecx, DWORD PTR _point_d$[ebp]
  00267	8b 10		 mov	 edx, DWORD PTR [eax]
  00269	89 11		 mov	 DWORD PTR [ecx], edx
  0026b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0026e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00271	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00274	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN12@get_3d_per:

; 484  : 		}
; 485  : 
; 486  : 		return (FLT_MAX);

  00277	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  0027d	e9 8a 00 00 00	 jmp	 $LN1@get_3d_per
$LN11@get_3d_per:

; 487  : 	}
; 488  : 
; 489  : 	//
; 490  : 	// calc point d
; 491  : 	//
; 492  : 
; 493  : 	if (point_d)

  00282	83 7d 14 00	 cmp	 DWORD PTR _point_d$[ebp], 0
  00286	74 4c		 je	 SHORT $LN13@get_3d_per

; 494  : 	{
; 495  : 		point_d->x = point_a->x + (uv_ab.x * mag_ad);

  00288	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _uv_ab$[ebp]
  0028d	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _mag_ad$[ebp]
  00292	8b 45 08	 mov	 eax, DWORD PTR _point_a$[ebp]
  00295	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00299	8b 4d 14	 mov	 ecx, DWORD PTR _point_d$[ebp]
  0029c	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 496  : 		point_d->y = point_a->y + (uv_ab.y * mag_ad);

  002a0	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _uv_ab$[ebp+4]
  002a5	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _mag_ad$[ebp]
  002aa	8b 45 08	 mov	 eax, DWORD PTR _point_a$[ebp]
  002ad	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  002b2	8b 4d 14	 mov	 ecx, DWORD PTR _point_d$[ebp]
  002b5	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 497  : 		point_d->z = point_a->z + (uv_ab.z * mag_ad);

  002ba	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _uv_ab$[ebp+8]
  002bf	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _mag_ad$[ebp]
  002c4	8b 45 08	 mov	 eax, DWORD PTR _point_a$[ebp]
  002c7	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  002cc	8b 4d 14	 mov	 ecx, DWORD PTR _point_d$[ebp]
  002cf	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN13@get_3d_per:

; 498  : 	}
; 499  : 
; 500  : 	//
; 501  : 	// calc perpendicular distance of point from line
; 502  : 	//
; 503  : 
; 504  : 	theta = acos (cos_theta);

  002d4	51		 push	 ecx
  002d5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cos_theta$[ebp]
  002da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002df	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  002e4	d9 5d f0	 fstp	 DWORD PTR _theta$[ebp]

; 505  : 
; 506  : 	dist = mag_ac * sin (theta);

  002e7	51		 push	 ecx
  002e8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _theta$[ebp]
  002ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f2	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  002f7	d9 5d 8c	 fstp	 DWORD PTR tv336[ebp]
  002fa	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv336[ebp]
  002ff	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _mag_ac$[ebp]
  00304	f3 0f 11 45 e8	 movss	 DWORD PTR _dist$[ebp], xmm0

; 507  : 
; 508  : 	return (dist);

  00309	d9 45 e8	 fld	 DWORD PTR _dist$[ebp]
$LN1@get_3d_per:

; 509  : }

  0030c	5f		 pop	 edi
  0030d	5e		 pop	 esi
  0030e	5b		 pop	 ebx
  0030f	8b e5		 mov	 esp, ebp
  00311	5d		 pop	 ebp
  00312	c2 10 00	 ret	 16			; 00000010H
?get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU1@@Z ENDP ; get_3d_perp_dist_of_point_from_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?normalise_2d_vector_given_magnitude@@YGXPAUVEC2D@@M@Z
_TEXT	SEGMENT
_one_over_length$ = -4					; size = 4
_vector$ = 8						; size = 4
_length$ = 12						; size = 4
?normalise_2d_vector_given_magnitude@@YGXPAUVEC2D@@M@Z PROC ; normalise_2d_vector_given_magnitude, COMDAT

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 371  : 
; 372  : 	float
; 373  : 		one_over_length;
; 374  : 
; 375  : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@normalise_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_2d_vector_given_magnitude@@YGXPAUVEC2D@@M@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@normalise_:

; 376  : 
; 377  : 	ASSERT ( length > 0.0 );

  00027	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0002c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00034	77 18		 ja	 SHORT $LN3@normalise_
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_2d_vector_given_magnitude@@YGXPAUVEC2D@@M@Z@4JA
  0003b	83 c0 07	 add	 eax, 7
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGFJJPNN@length?5?$DO?50?40@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@normalise_:

; 378  : 
; 379  : 	one_over_length = 1.0 / length;

  0004e	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00053	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0005b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0005f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00063	f3 0f 11 45 fc	 movss	 DWORD PTR _one_over_length$[ebp], xmm0

; 380  : 
; 381  : 	vector->x = ( vector->x * one_over_length );

  00068	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0006b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0006f	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00077	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 382  : 	vector->y = ( vector->y * one_over_length );

  0007b	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0007e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00083	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0008b	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 383  : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
?normalise_2d_vector_given_magnitude@@YGXPAUVEC2D@@M@Z ENDP ; normalise_2d_vector_given_magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z
_TEXT	SEGMENT
_one_over_length$ = -4					; size = 4
_vector$ = 8						; size = 4
_length$ = 12						; size = 4
?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z PROC ; normalise_3d_vector_given_magnitude, COMDAT

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 350  : 
; 351  : 	float
; 352  : 		one_over_length;
; 353  : 
; 354  : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@normalise_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@normalise_:

; 355  : 
; 356  : 	ASSERT ( length > 0.0 );

  00027	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0002c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00034	77 18		 ja	 SHORT $LN3@normalise_
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z@4JA
  0003b	83 c0 07	 add	 eax, 7
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGFJJPNN@length?5?$DO?50?40@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@normalise_:

; 357  : 
; 358  : 	one_over_length = 1.0 / length;

  0004e	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00053	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0005b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0005f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00063	f3 0f 11 45 fc	 movss	 DWORD PTR _one_over_length$[ebp], xmm0

; 359  : 
; 360  : 	vector->x = ( vector->x * one_over_length );

  00068	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0006b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0006f	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00077	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 361  : 	vector->y = ( vector->y * one_over_length );

  0007b	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0007e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00083	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0008b	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 362  : 	vector->z = ( vector->z * one_over_length );

  00090	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00093	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00098	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000a0	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 363  : }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 08 00	 ret	 8
?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ENDP ; normalise_3d_vector_given_magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_vector_inverse_magnitude@@YGMPBUVEC3D@@@Z
_TEXT	SEGMENT
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_vector$ = 8						; size = 4
?get_3d_vector_inverse_magnitude@@YGMPBUVEC3D@@@Z PROC	; get_3d_vector_inverse_magnitude, COMDAT

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 329  : 
; 330  : 	float
; 331  : 		x,
; 332  : 		y,
; 333  : 		z;
; 334  : 
; 335  : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_vec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_inverse_magnitude@@YGMPBUVEC3D@@@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_vec:

; 336  : 
; 337  : 	x = ( vector->x * vector->x );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00031	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 338  : 	y = ( vector->y * vector->y );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00045	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0004a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 339  : 	z = ( vector->z * vector->z );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00055	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0005a	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0005f	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0

; 340  : 
; 341  : 	return ( get_inverse_square_root ( x + y + z ) );

  00064	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00069	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _y$[ebp]
  0006e	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _z$[ebp]
  00073	51		 push	 ecx
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?get_inverse_square_root@@YGMM@Z ; get_inverse_square_root

; 342  : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?get_3d_vector_inverse_magnitude@@YGMPBUVEC3D@@@Z ENDP	; get_3d_vector_inverse_magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_2d_vector_magnitude@@YGMPBUVEC2D@@@Z
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_vector$ = 8						; size = 4
?get_2d_vector_magnitude@@YGMPBUVEC2D@@@Z PROC		; get_2d_vector_magnitude, COMDAT

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 310  : 
; 311  : 	float
; 312  : 		x,
; 313  : 		y;
; 314  : 
; 315  : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_2d_vec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_2d_vector_magnitude@@YGMPBUVEC2D@@@Z@4JA
  00014	83 c0 06	 add	 eax, 6
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_2d_vec:

; 316  : 
; 317  : 	x = ( vector->x * vector->x );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00031	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 318  : 	y = ( vector->y * vector->y );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00045	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0004a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 319  : 
; 320  : 	return ( sqrt ( x + y ) );

  0004f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00054	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _y$[ebp]
  00059	51		 push	 ecx
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt

; 321  : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?get_2d_vector_magnitude@@YGMPBUVEC2D@@@Z ENDP		; get_2d_vector_magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z
_TEXT	SEGMENT
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_vector$ = 8						; size = 4
?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z PROC		; get_3d_vector_magnitude, COMDAT

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 289  : 
; 290  : 	float
; 291  : 		x,
; 292  : 		y,
; 293  : 		z;
; 294  : 
; 295  : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_vec
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_vec:

; 296  : 
; 297  : 	x = ( vector->x * vector->x );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00031	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 298  : 	y = ( vector->y * vector->y );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00045	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0004a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 299  : 	z = ( vector->z * vector->z );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00055	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0005a	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0005f	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0

; 300  : 
; 301  : 	return ( sqrt ( x + y + z ) );

  00064	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00069	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _y$[ebp]
  0006e	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _z$[ebp]
  00073	51		 push	 ecx
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt

; 302  : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ENDP		; get_3d_vector_magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?normalise_any_2d_vector@@YGMPAUVEC2D@@@Z
_TEXT	SEGMENT
_one_over_length$1 = -16				; size = 4
_length$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_vector$ = 8						; size = 4
?normalise_any_2d_vector@@YGMPAUVEC2D@@@Z PROC		; normalise_any_2d_vector, COMDAT

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 249  : 
; 250  : 	float
; 251  : 		x,
; 252  : 		y,
; 253  : 		length;
; 254  : 
; 255  : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@normalise_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_any_2d_vector@@YGMPAUVEC2D@@@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@normalise_:

; 256  : 
; 257  : 	x = ( ( vector->x ) * ( vector->x ) );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00031	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 258  : 	y = ( ( vector->y ) * ( vector->y ) );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00045	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0004a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 259  : 
; 260  : 	length = sqrt ( x + y );

  0004f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00054	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _y$[ebp]
  00059	51		 push	 ecx
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00064	d9 5d f4	 fstp	 DWORD PTR _length$[ebp]

; 261  : 
; 262  : 	if ( length > 0 )

  00067	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _length$[ebp]
  0006c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00073	76 44		 jbe	 SHORT $LN3@normalise_

; 263  : 	{
; 264  : 
; 265  : 		float
; 266  : 			one_over_length;
; 267  : 
; 268  : 		one_over_length = 1.0 / length;

  00075	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0007a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00082	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00086	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0008a	f3 0f 11 45 f0	 movss	 DWORD PTR _one_over_length$1[ebp], xmm0

; 269  : 
; 270  : 		vector->x = ( vector->x * one_over_length );

  0008f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00092	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00096	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _one_over_length$1[ebp]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0009e	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 271  : 		vector->y = ( vector->y * one_over_length );

  000a2	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000a5	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000aa	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _one_over_length$1[ebp]
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000b2	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 272  : 	}
; 273  : 	else

  000b7	eb 15		 jmp	 SHORT $LN4@normalise_
$LN3@normalise_:

; 274  : 	{
; 275  : 
; 276  : 		vector->x = 0;

  000b9	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 277  : 		vector->y = 0;

  000c3	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000c6	0f 57 c0	 xorps	 xmm0, xmm0
  000c9	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
$LN4@normalise_:

; 278  : 	}
; 279  : 
; 280  : 	return ( length );

  000ce	d9 45 f4	 fld	 DWORD PTR _length$[ebp]

; 281  : }

  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 04 00	 ret	 4
?normalise_any_2d_vector@@YGMPAUVEC2D@@@Z ENDP		; normalise_any_2d_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z
_TEXT	SEGMENT
_one_over_length$1 = -20				; size = 4
_length$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_vector$ = 8						; size = 4
?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z PROC		; normalise_any_3d_vector, COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 205  : 
; 206  : 	float
; 207  : 		x,
; 208  : 		y,
; 209  : 		z,
; 210  : 		length;
; 211  : 
; 212  : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@normalise_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_any_3d_vector@@YGMPAUVEC3D@@@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@normalise_:

; 213  : 
; 214  : 	x = ( ( vector->x ) * ( vector->x ) );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00031	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 215  : 	y = ( ( vector->y ) * ( vector->y ) );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00045	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0004a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 216  : 	z = ( ( vector->z ) * ( vector->z ) );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00055	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0005a	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0005f	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0

; 217  : 
; 218  : 	length = sqrt ( x + y + z );

  00064	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00069	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _y$[ebp]
  0006e	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _z$[ebp]
  00073	51		 push	 ecx
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0007e	d9 5d f0	 fstp	 DWORD PTR _length$[ebp]

; 219  : 
; 220  : 	if ( length > 0 )

  00081	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _length$[ebp]
  00086	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0008d	76 59		 jbe	 SHORT $LN3@normalise_

; 221  : 	{
; 222  : 
; 223  : 		float
; 224  : 			one_over_length;
; 225  : 
; 226  : 		one_over_length = 1.0 / length;

  0008f	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00094	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0009c	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000a0	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000a4	f3 0f 11 45 ec	 movss	 DWORD PTR _one_over_length$1[ebp], xmm0

; 227  : 
; 228  : 		vector->x = ( vector->x * one_over_length );

  000a9	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000ac	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b0	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _one_over_length$1[ebp]
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000b8	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 229  : 		vector->y = ( vector->y * one_over_length );

  000bc	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000bf	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000c4	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _one_over_length$1[ebp]
  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000cc	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 230  : 		vector->z = ( vector->z * one_over_length );

  000d1	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000d4	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000d9	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _one_over_length$1[ebp]
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000e1	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 231  : 	}
; 232  : 	else

  000e6	eb 20		 jmp	 SHORT $LN4@normalise_
$LN3@normalise_:

; 233  : 	{
; 234  : 
; 235  : 		vector->x = 0;

  000e8	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000eb	0f 57 c0	 xorps	 xmm0, xmm0
  000ee	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 236  : 		vector->y = 0;

  000f2	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000f5	0f 57 c0	 xorps	 xmm0, xmm0
  000f8	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 237  : 		vector->z = 0;

  000fd	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00100	0f 57 c0	 xorps	 xmm0, xmm0
  00103	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
$LN4@normalise_:

; 238  : 	}
; 239  : 
; 240  : 	return ( length );

  00108	d9 45 f0	 fld	 DWORD PTR _length$[ebp]

; 241  : }

  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 04 00	 ret	 4
?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ENDP		; normalise_any_3d_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?normalise_2d_vector@@YGMPAUVEC2D@@@Z
_TEXT	SEGMENT
_one_over_length$ = -16					; size = 4
_length$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_vector$ = 8						; size = 4
?normalise_2d_vector@@YGMPAUVEC2D@@@Z PROC		; normalise_2d_vector, COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 175  : 
; 176  : 	float
; 177  : 		x,
; 178  : 		y,
; 179  : 		length,
; 180  : 		one_over_length;
; 181  : 
; 182  : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@normalise_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_2d_vector@@YGMPAUVEC2D@@@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@normalise_:

; 183  : 
; 184  : 	x = ( ( vector->x ) * ( vector->x ) );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00031	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 185  : 	y = ( ( vector->y ) * ( vector->y ) );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00045	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0004a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 186  : 
; 187  : 	length = sqrt ( x + y );

  0004f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00054	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _y$[ebp]
  00059	51		 push	 ecx
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00064	d9 5d f4	 fstp	 DWORD PTR _length$[ebp]

; 188  : 
; 189  : 	ASSERT ( length > 0.0 );

  00067	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0006c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00074	77 18		 ja	 SHORT $LN3@normalise_
  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_2d_vector@@YGMPAUVEC2D@@@Z@4JA
  0007b	83 c0 0f	 add	 eax, 15			; 0000000fH
  0007e	50		 push	 eax
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGFJJPNN@length?5?$DO?50?40@
  00089	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@normalise_:

; 190  : 
; 191  : 	one_over_length = 1.0 / length;

  0008e	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00093	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0009b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0009f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000a3	f3 0f 11 45 f0	 movss	 DWORD PTR _one_over_length$[ebp], xmm0

; 192  : 
; 193  : 	vector->x = ( vector->x * one_over_length );

  000a8	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000ab	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000af	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000b7	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 194  : 	vector->y = ( vector->y * one_over_length );

  000bb	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000be	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000c3	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000cb	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 195  : 
; 196  : 	return ( length );

  000d0	d9 45 f4	 fld	 DWORD PTR _length$[ebp]

; 197  : }

  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 04 00	 ret	 4
?normalise_2d_vector@@YGMPAUVEC2D@@@Z ENDP		; normalise_2d_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?normalise_3d_vector@@YGMPAUVEC3D@@@Z
_TEXT	SEGMENT
_one_over_length$ = -20					; size = 4
_length$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_vector$ = 8						; size = 4
?normalise_3d_vector@@YGMPAUVEC3D@@@Z PROC		; normalise_3d_vector, COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 142  : 
; 143  : 	float
; 144  : 		x,
; 145  : 		y,
; 146  : 		z,
; 147  : 		length,
; 148  : 		one_over_length;
; 149  : 
; 150  : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@normalise_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_3d_vector@@YGMPAUVEC3D@@@Z@4JA
  00014	83 c0 09	 add	 eax, 9
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@normalise_:

; 151  : 
; 152  : 	x = ( ( vector->x ) * ( vector->x ) );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00031	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 153  : 	y = ( ( vector->y ) * ( vector->y ) );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00045	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0004a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 154  : 	z = ( ( vector->z ) * ( vector->z ) );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00055	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0005a	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0005f	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0

; 155  : 
; 156  : 	length = sqrt ( x + y + z );

  00064	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00069	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _y$[ebp]
  0006e	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _z$[ebp]
  00073	51		 push	 ecx
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0007e	d9 5d f0	 fstp	 DWORD PTR _length$[ebp]

; 157  : 
; 158  : 	ASSERT ( length > 0.0 );

  00081	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00086	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0008e	77 18		 ja	 SHORT $LN3@normalise_
  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_3d_vector@@YGMPAUVEC3D@@@Z@4JA
  00095	83 c0 11	 add	 eax, 17			; 00000011H
  00098	50		 push	 eax
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGFJJPNN@length?5?$DO?50?40@
  000a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@normalise_:

; 159  : 
; 160  : 	one_over_length = 1.0 / length;

  000a8	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  000ad	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000b5	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000b9	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000bd	f3 0f 11 45 ec	 movss	 DWORD PTR _one_over_length$[ebp], xmm0

; 161  : 
; 162  : 	vector->x = ( vector->x * one_over_length );

  000c2	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000c5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c9	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000d1	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 163  : 	vector->y = ( vector->y * one_over_length );

  000d5	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000d8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000dd	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000e5	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 164  : 	vector->z = ( vector->z * one_over_length );

  000ea	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000ed	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000f2	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000fa	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 165  : 
; 166  : 	return ( length );

  000ff	d9 45 f0	 fld	 DWORD PTR _length$[ebp]

; 167  : }

  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 04 00	 ret	 4
?normalise_3d_vector@@YGMPAUVEC3D@@@Z ENDP		; normalise_3d_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?accurately_normalise_3d_vector@@YGMPAUVEC3D@@@Z
_TEXT	SEGMENT
tv138 = -100						; size = 4
_length$ = -32						; size = 8
_z$ = -24						; size = 8
_y$ = -16						; size = 8
_x$ = -8						; size = 8
_vector$ = 8						; size = 4
?accurately_normalise_3d_vector@@YGMPAUVEC3D@@@Z PROC	; accurately_normalise_3d_vector, COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 116  : 
; 117  : 	double
; 118  : 		x,
; 119  : 		y,
; 120  : 		z,
; 121  : 		length;
; 122  : 
; 123  : 	x = ( double ) vector->x;

  00009	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0000c	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00010	f2 0f 11 45 f8	 movsd	 QWORD PTR _x$[ebp], xmm0

; 124  : 	y = ( double ) vector->y;

  00015	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00018	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  0001d	f2 0f 11 45 f0	 movsd	 QWORD PTR _y$[ebp], xmm0

; 125  : 	z = ( double ) vector->z;

  00022	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00025	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  0002a	f2 0f 11 45 e8	 movsd	 QWORD PTR _z$[ebp], xmm0

; 126  : 
; 127  : 	length = sqrt ( ( x * x ) + ( y * y ) + ( z * z ) );

  0002f	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _x$[ebp]
  00034	f2 0f 59 45 f8	 mulsd	 xmm0, QWORD PTR _x$[ebp]
  00039	f2 0f 10 4d f0	 movsd	 xmm1, QWORD PTR _y$[ebp]
  0003e	f2 0f 59 4d f0	 mulsd	 xmm1, QWORD PTR _y$[ebp]
  00043	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00047	f2 0f 10 4d e8	 movsd	 xmm1, QWORD PTR _z$[ebp]
  0004c	f2 0f 59 4d e8	 mulsd	 xmm1, QWORD PTR _z$[ebp]
  00051	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00055	83 ec 08	 sub	 esp, 8
  00058	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0005d	e8 00 00 00 00	 call	 _sqrt
  00062	83 c4 08	 add	 esp, 8
  00065	dd 5d e0	 fstp	 QWORD PTR _length$[ebp]

; 128  : 
; 129  : 	vector->x = ( float ) ( x / length );

  00068	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _x$[ebp]
  0006d	f2 0f 5e 45 e0	 divsd	 xmm0, QWORD PTR _length$[ebp]
  00072	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00076	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00079	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 130  : 	vector->y = ( float ) ( y / length );

  0007d	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _y$[ebp]
  00082	f2 0f 5e 45 e0	 divsd	 xmm0, QWORD PTR _length$[ebp]
  00087	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008b	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0008e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 131  : 	vector->z = ( float ) ( z / length );

  00093	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _z$[ebp]
  00098	f2 0f 5e 45 e0	 divsd	 xmm0, QWORD PTR _length$[ebp]
  0009d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a1	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000a4	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 132  : 
; 133  : 	return ( length );

  000a9	f2 0f 5a 45 e0	 cvtsd2ss xmm0, QWORD PTR _length$[ebp]
  000ae	f3 0f 11 45 9c	 movss	 DWORD PTR tv138[ebp], xmm0
  000b3	d9 45 9c	 fld	 DWORD PTR tv138[ebp]

; 134  : }

  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
?accurately_normalise_3d_vector@@YGMPAUVEC3D@@@Z ENDP	; accurately_normalise_3d_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\vector.c
;	COMDAT ?normalise_4d_vector@@YGMPAUVEC4D@@@Z
_TEXT	SEGMENT
_one_over_length$ = -20					; size = 4
_length$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_vector$ = 8						; size = 4
?normalise_4d_vector@@YGMPAUVEC4D@@@Z PROC		; normalise_4d_vector, COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 82   : 
; 83   : 	float
; 84   : 		x,
; 85   : 		y,
; 86   : 		z,
; 87   : 		length,
; 88   : 		one_over_length;
; 89   : 
; 90   : 	ASSERT ( vector );

  00009	83 7d 08 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@normalise_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_4d_vector@@YGMPAUVEC4D@@@Z@4JA
  00014	83 c0 09	 add	 eax, 9
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBFPPGEG@vector@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@normalise_:

; 91   : 
; 92   : 	x = ( ( vector->x ) * ( vector->x ) );

  00027	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00031	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 93   : 	y = ( ( vector->y ) * ( vector->y ) );

  0003a	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00040	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00045	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0004a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 94   : 	z = ( ( vector->z ) * ( vector->z ) );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00055	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0005a	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0005f	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0

; 95   : 
; 96   : 	length = sqrt ( x + y + z );

  00064	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00069	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _y$[ebp]
  0006e	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _z$[ebp]
  00073	51		 push	 ecx
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0007e	d9 5d f0	 fstp	 DWORD PTR _length$[ebp]

; 97   : 
; 98   : 	ASSERT ( length > 0.0 );

  00081	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00086	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0008e	77 18		 ja	 SHORT $LN3@normalise_
  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??normalise_4d_vector@@YGMPAUVEC4D@@@Z@4JA
  00095	83 c0 11	 add	 eax, 17			; 00000011H
  00098	50		 push	 eax
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IHICLJJH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGFJJPNN@length?5?$DO?50?40@
  000a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@normalise_:

; 99   : 
; 100  : 	one_over_length = 1.0 / length;

  000a8	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  000ad	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000b5	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000b9	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000bd	f3 0f 11 45 ec	 movss	 DWORD PTR _one_over_length$[ebp], xmm0

; 101  : 
; 102  : 	vector->x = ( vector->x * one_over_length );

  000c2	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000c5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c9	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000d1	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 103  : 	vector->y = ( vector->y * one_over_length );

  000d5	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000d8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000dd	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000e5	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 104  : 	vector->z = ( vector->z * one_over_length );

  000ea	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000ed	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000f2	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _one_over_length$[ebp]
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000fa	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 105  : 	vector->a = length;

  000ff	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00102	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _length$[ebp]
  00107	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 106  : 
; 107  : 	return ( length );

  0010c	d9 45 f0	 fld	 DWORD PTR _length$[ebp]

; 108  : }

  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 04 00	 ret	 4
?normalise_4d_vector@@YGMPAUVEC4D@@@Z ENDP		; normalise_4d_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?acos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?acos@@YGMM@Z PROC					; acos, COMDAT

; 26   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 27   : 	return (_CSTD acosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _acosf
  00019	83 c4 04	 add	 esp, 4

; 28   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?acos@@YGMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 623  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 624  :             return (float)acos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _acos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 625  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
END
