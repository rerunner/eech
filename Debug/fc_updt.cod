; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\force\fc_updt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?overload_force_update_functions@@YGXXZ		; overload_force_update_functions
EXTRN	?fn_update_client_server_entity@@3PAY01P6GXPAUENTITY@@@ZA:BYTE ; fn_update_client_server_entity
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\force\fc_updt.c
;	COMDAT ?update_server@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
_en$ = 8						; size = 4
?update_server@@YGXPAUENTITY@@@Z PROC			; update_server, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 86   : /*
; 87   : 	int
; 88   : 		loop;
; 89   : 
; 90   : 	float
; 91   : 		objective_sectors_percentage,
; 92   : 		force_percentage,
; 93   : 		total_forces,
; 94   : 		this_force;
; 95   : 
; 96   : 	char
; 97   : 		buffer [1024];
; 98   : 
; 99   : 	force
; 100  : 		*enemy_force_raw,
; 101  : 		*raw;
; 102  : 
; 103  : 	entity
; 104  : 		*allied_force,
; 105  : 		*enemy_force;
; 106  : 
; 107  : 	campaign_result_types
; 108  : 		campaign_status;
; 109  : 
; 110  : 	campaign_criteria_type
; 111  : 		*result_campaign_criteria,
; 112  : 		*this_campaign_criteria;
; 113  : 
; 114  : 	player_log_type
; 115  : 		*log;
; 116  : 
; 117  : 	int
; 118  : 		success_required_count,
; 119  : 		success_achieved_count;
; 120  : 
; 121  : 	allied_force = en;
; 122  : 
; 123  : 	raw = get_local_entity_data (en);
; 124  : 
; 125  : 	raw->sleep -= get_delta_time ();
; 126  : 
; 127  : 	success_required_count = 0;
; 128  : 
; 129  : 	success_achieved_count = 0;
; 130  : 
; 131  : 	if (raw->sleep <= 0.0)
; 132  : 	{
; 133  : 
; 134  : 		raw->sleep = CAMPAIGN_COMPLETION_TIMER;
; 135  : 
; 136  : 		//
; 137  : 		// work out total force percentage
; 138  : 		//
; 139  : 
; 140  : 		total_forces = 0;
; 141  : 
; 142  : 		this_force = 0;
; 143  : 
; 144  : 		enemy_force = get_local_force_entity (get_enemy_side (raw->side));
; 145  : 
; 146  : 		enemy_force_raw = get_local_entity_data (enemy_force);
; 147  : 
; 148  : 		for (loop = FORCE_INFO_CATAGORY_ARMED_FIXED_WING; loop < NUM_FORCE_INFO_CATAGORIES; loop ++)
; 149  : 		{
; 150  : 
; 151  : 			total_forces += raw->force_info_current_hardware [loop] + enemy_force_raw->force_info_current_hardware [loop];
; 152  : 
; 153  : 			this_force += raw->force_info_current_hardware [loop];
; 154  : 		}
; 155  : 
; 156  : 		force_percentage = 0.0;
; 157  : 
; 158  : 		if (total_forces)
; 159  : 		{
; 160  : 
; 161  : 			force_percentage = this_force / total_forces;
; 162  : 		}
; 163  : 
; 164  : 		if (force_percentage != raw->force_percentage)
; 165  : 		{
; 166  : 
; 167  : 			set_client_server_entity_float_value (en, FLOAT_TYPE_FORCE_PERCENTAGE, force_percentage);
; 168  : 		}
; 169  : 
; 170  : 		//
; 171  : 		// assess completion. (also work out objective_sectors_percentage and time_percentage)
; 172  : 		//
; 173  : 
; 174  : 		campaign_status = CAMPAIGN_CRITERIA_RESULT_NONE;
; 175  : 
; 176  : 		this_campaign_criteria = raw->campaign_criteria;
; 177  : 
; 178  :   		while (this_campaign_criteria)
; 179  : 		{
; 180  : 
; 181  : 			if ( this_campaign_criteria->result == CAMPAIGN_CRITERIA_RESULT_SUCCESS )
; 182  : 			{
; 183  : 
; 184  : 				success_required_count++;
; 185  : 			}
; 186  : 
; 187  : 			switch (this_campaign_criteria->criteria_type)
; 188  : 			{
; 189  : 
; 190  : 				case CAMPAIGN_CRITERIA_BALANCE_OF_POWER:
; 191  : 				{
; 192  : 
; 193  : 					this_campaign_criteria->count = (int) (raw->force_percentage * 100.0);
; 194  : 
; 195  : 
; 196  : 					if (this_campaign_criteria->count >= this_campaign_criteria->goal)
; 197  : 					{
; 198  : 
; 199  : 						if (campaign_status != CAMPAIGN_CRITERIA_RESULT_FAIL)
; 200  : 						{
; 201  : 
; 202  : 							campaign_status = this_campaign_criteria->result;
; 203  : 
; 204  : 							result_campaign_criteria = this_campaign_criteria;
; 205  : 
; 206  : 							if ( this_campaign_criteria->result == CAMPAIGN_CRITERIA_RESULT_SUCCESS )
; 207  : 							{
; 208  : 
; 209  : 								success_achieved_count++;
; 210  : 							}
; 211  : 
; 212  : 							#if DEBUG_MODULE
; 213  : 
; 214  : 							debug_log ("FC_UPDT: Met Campaign criteria %s type %d, goal %d, count %d to %s",
; 215  : 										campaign_criteria_names [this_campaign_criteria->criteria_type],
; 216  : 										this_campaign_criteria->type,
; 217  : 										this_campaign_criteria->goal,
; 218  : 										this_campaign_criteria->count,
; 219  : 										campaign_result_names [this_campaign_criteria->result]);
; 220  : 
; 221  : 							#endif
; 222  : 						}
; 223  : 					}
; 224  : 
; 225  : 					break;
; 226  : 				}
; 227  : 				case CAMPAIGN_CRITERIA_CAPTURED_SECTORS:
; 228  : 				{
; 229  : 
; 230  : 					objective_sectors_percentage = 1.0;
; 231  : 
; 232  : 					if (this_campaign_criteria->goal != 0)
; 233  : 					{
; 234  : 
; 235  : 						objective_sectors_percentage = (float) this_campaign_criteria->count / this_campaign_criteria->goal;
; 236  : 					}
; 237  : 
; 238  : 					if (objective_sectors_percentage != raw->objective_sectors_percentage)
; 239  : 					{
; 240  : 
; 241  : 						set_client_server_entity_float_value (en, FLOAT_TYPE_OBJECTIVE_SECTORS_PERCENTAGE, objective_sectors_percentage);
; 242  : 
; 243  : 						set_client_server_entity_int_value (en, INT_TYPE_OBJECTIVE_SECTORS_HELD, this_campaign_criteria->count);
; 244  : 
; 245  : 						set_client_server_entity_int_value (en, INT_TYPE_OBJECTIVE_SECTORS_REQUIRED, this_campaign_criteria->goal);
; 246  : 					}
; 247  : 
; 248  : 					// intentional follow through...
; 249  : 				}
; 250  : 				case CAMPAIGN_CRITERIA_COMPLETED_TASKS:
; 251  : 				case CAMPAIGN_CRITERIA_DESTROYED_ALLIED_OBJECTS:
; 252  : 				case CAMPAIGN_CRITERIA_DESTROYED_ENEMY_OBJECTS:
; 253  : 				case CAMPAIGN_CRITERIA_ENEMY_FIRED:
; 254  : 				case CAMPAIGN_CRITERIA_FAILED_TASKS:
; 255  : 				case CAMPAIGN_CRITERIA_LOST_SECTORS:
; 256  : 				case CAMPAIGN_CRITERIA_REACHED_WAYPOINTS:
; 257  : 				case CAMPAIGN_CRITERIA_SECTOR_REACHED:
; 258  : 				case CAMPAIGN_CRITERIA_SPECIAL_KILLS:
; 259  : 				case CAMPAIGN_CRITERIA_SURRENDERED_SIDES:
; 260  : 				{
; 261  : 
; 262  : 					if (this_campaign_criteria->valid)
; 263  : 					{
; 264  : 
; 265  : 						if (this_campaign_criteria->count >= this_campaign_criteria->goal)
; 266  : 						{
; 267  : 
; 268  : 							if (campaign_status != CAMPAIGN_CRITERIA_RESULT_FAIL)
; 269  : 							{
; 270  : 
; 271  : 								campaign_status = this_campaign_criteria->result;
; 272  : 
; 273  : 								result_campaign_criteria = this_campaign_criteria;
; 274  : 							}
; 275  : 
; 276  : 							if ( this_campaign_criteria->result == CAMPAIGN_CRITERIA_RESULT_SUCCESS )
; 277  : 							{
; 278  : 
; 279  : 								success_achieved_count++;
; 280  : 							}
; 281  : 
; 282  : 							#if DEBUG_MODULE
; 283  : 
; 284  : 							debug_log ("FC_UPDT: Met Campaign criteria %s type %d, goal %d, count %d to %s",
; 285  : 										campaign_criteria_names [this_campaign_criteria->criteria_type],
; 286  : 										this_campaign_criteria->type,
; 287  : 										this_campaign_criteria->goal,
; 288  : 										this_campaign_criteria->count,
; 289  : 										campaign_result_names [this_campaign_criteria->result]);
; 290  : 
; 291  : 							#endif
; 292  : 						}
; 293  : 					}
; 294  : 
; 295  : 					break;
; 296  : 				}
; 297  : 
; 298  : 				case CAMPAIGN_CRITERIA_TIME_DURATION:
; 299  : 				{
; 300  : 
; 301  : 					float
; 302  : 						this_time,
; 303  : 						elapsed_hours,
; 304  : 						elapsed_minutes,
; 305  : 						elapsed_seconds;
; 306  : 
; 307  : 					session
; 308  : 						*session_raw;
; 309  : 
; 310  : 					if (this_campaign_criteria->valid)
; 311  : 					{
; 312  : 
; 313  : 						session_raw = get_local_entity_data (get_session_entity ());
; 314  : 
; 315  : 						//
; 316  : 						// calculate time_percentage
; 317  : 						//
; 318  : 
; 319  : 						this_time = get_time_of_day (this_campaign_criteria->hours, this_campaign_criteria->minutes, this_campaign_criteria->seconds);
; 320  : 
; 321  : 						if (this_campaign_criteria->result == CAMPAIGN_CRITERIA_RESULT_SUCCESS)
; 322  : 						{
; 323  : 
; 324  : 							raw->time_percentage = 0.0;
; 325  : 
; 326  : 							if (session_raw->elapsed_time_of_day != 0)
; 327  : 							{
; 328  : 
; 329  : 								raw->time_percentage = this_time / session_raw->elapsed_time_of_day;
; 330  : 							}
; 331  : 						}
; 332  : 						else
; 333  : 						{
; 334  : 
; 335  : 							raw->time_percentage = 1.0;
; 336  : 
; 337  : 							if (session_raw->elapsed_time_of_day != 0)
; 338  : 							{
; 339  : 
; 340  : 								raw->time_percentage = 1.0 - (this_time / session_raw->elapsed_time_of_day);
; 341  : 							}
; 342  : 						}
; 343  : 
; 344  : 						//
; 345  : 						// check time criteria
; 346  : 						//
; 347  : 
; 348  : 						get_digital_clock_values (session_raw->elapsed_time_of_day, &elapsed_hours, &elapsed_minutes, &elapsed_seconds);
; 349  : 
; 350  : 						#if DEBUG_MODULE
; 351  : 
; 352  : 						debug_log ("FC_UPDT: Campaign criteria %s hours %02f, minutes %02f, seconds %02f to %s",
; 353  : 											campaign_criteria_names [this_campaign_criteria->criteria_type],
; 354  : 											this_campaign_criteria->hours - elapsed_hours,
; 355  : 											this_campaign_criteria->minutes - elapsed_minutes,
; 356  : 											this_campaign_criteria->seconds - elapsed_seconds,
; 357  : 											campaign_result_names [this_campaign_criteria->result]);
; 358  : 
; 359  : 						#endif
; 360  : 
; 361  : 						if (session_raw->elapsed_days >= this_campaign_criteria->days)
; 362  : 						{
; 363  : 
; 364  : 							if (elapsed_hours >= this_campaign_criteria->hours)
; 365  : 							{
; 366  : 
; 367  : 								if (elapsed_minutes >= this_campaign_criteria->minutes)
; 368  : 								{
; 369  : 
; 370  : 									if (elapsed_seconds >= this_campaign_criteria->seconds)
; 371  : 									{
; 372  : 
; 373  : 										if (campaign_status != CAMPAIGN_CRITERIA_RESULT_FAIL)
; 374  : 										{
; 375  : 
; 376  : 											campaign_status = this_campaign_criteria->result;
; 377  : 
; 378  : 											result_campaign_criteria = this_campaign_criteria;
; 379  : 										}
; 380  : 
; 381  : 										//
; 382  : 										// DEBUG - SHOULD THIS JUST BE SUCCESS REGARDLESS OF OTHER CRITERIA ?????
; 383  : 										//
; 384  : 
; 385  : 										if ( this_campaign_criteria->result == CAMPAIGN_CRITERIA_RESULT_SUCCESS )
; 386  : 										{
; 387  : 
; 388  : 											success_achieved_count++;
; 389  : 										}
; 390  : 									}
; 391  : 								}
; 392  : 							}
; 393  : 						}
; 394  : 					}
; 395  : 
; 396  : 					break;
; 397  : 				}
; 398  : 
; 399  : 				default:
; 400  : 				{
; 401  : 
; 402  : 					debug_fatal ("FC_UPDT: undefined campaign critera type %s", campaign_criteria_names [this_campaign_criteria->criteria_type]);
; 403  : 				}
; 404  : 			}
; 405  : 
; 406  : 			//
; 407  : 			// If any of the result are FAIL then stop
; 408  : 			//
; 409  : 
; 410  : 			if (campaign_status == CAMPAIGN_CRITERIA_RESULT_FAIL)
; 411  : 			{
; 412  : 
; 413  :   				break;
; 414  : 			}
; 415  : 
; 416  : 			this_campaign_criteria = this_campaign_criteria->next;
; 417  : 		}
; 418  : 
; 419  : 		//
; 420  : 		// Results - if we have success set, count em up.
; 421  : 		//
; 422  : 
; 423  : 		if ( campaign_status == CAMPAIGN_CRITERIA_RESULT_SUCCESS )
; 424  : 		{
; 425  : 
; 426  : 			if ( success_achieved_count < success_required_count )
; 427  : 			{
; 428  : 
; 429  : 				campaign_status = CAMPAIGN_CRITERIA_RESULT_NONE;
; 430  : 			}
; 431  : 		}
; 432  : 
; 433  : 		log = get_current_player_log ();
; 434  : 
; 435  : 		if (campaign_status == CAMPAIGN_CRITERIA_RESULT_SUCCESS)
; 436  : 		{
; 437  : 
; 438  : 			if (result_campaign_criteria->experience_variable)
; 439  : 			{
; 440  : 
; 441  : 				*result_campaign_criteria->experience_variable += result_campaign_criteria->experience_points;
; 442  : 
; 443  : 				#if DEBUG_MODULE
; 444  : 
; 445  : 				debug_log ("FC_UPDT: awarding %d experience points", result_campaign_criteria->experience_points);
; 446  : 
; 447  : 				#endif
; 448  : 			}
; 449  : 
; 450  : 			if (result_campaign_criteria->rank_variable)
; 451  : 			{
; 452  : 
; 453  : 				*result_campaign_criteria->rank_variable += result_campaign_criteria->rank_points;
; 454  : 
; 455  : 				#if DEBUG_MODULE
; 456  : 
; 457  : 				debug_log ("FC_UPDT: awarding %d rank points", result_campaign_criteria->rank_points);
; 458  : 
; 459  : 				#endif
; 460  : 			}
; 461  : 
; 462  : 			if (get_game_type () == GAME_TYPE_CAMPAIGN)
; 463  : 			{
; 464  : 				sprintf (buffer, "Campaign completed successfully by %s", entity_side_names [raw->side]);
; 465  : 
; 466  : 				inc_player_log_successful_tours (get_global_gunship_side (), log);
; 467  : 			}
; 468  : 		}
; 469  : 		else if (campaign_status == CAMPAIGN_CRITERIA_RESULT_FAIL)
; 470  : 		{
; 471  : 
; 472  : 			if (get_game_type () == GAME_TYPE_CAMPAIGN)
; 473  : 			{
; 474  : 				sprintf (buffer, "Campaign completed unsuccessfully by %s", entity_side_names [raw->side]);
; 475  : 
; 476  : 				inc_player_log_failed_tours (get_global_gunship_side (), log);
; 477  : 			}
; 478  : 		}
; 479  : 		else
; 480  : 		{
; 481  : 
; 482  : 			return;
; 483  : 		}
; 484  : 
; 485  : 		//
; 486  : 		// We have either succeeded by now, or failed
; 487  : 		//
; 488  : 
; 489  : 		setup_campaign_over_screen (en, campaign_status);
; 490  : 
; 491  : 		start_game_exit (GAME_EXIT_KICKOUT, FALSE);
; 492  : 
; 493  : 		push_ui_screen (campaign_over_screen);
; 494  : 	}
; 495  : 	*/
; 496  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?update_server@@YGXPAUENTITY@@@Z ENDP			; update_server
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\force\fc_updt.c
;	COMDAT ?overload_force_update_functions@@YGXXZ
_TEXT	SEGMENT
?overload_force_update_functions@@YGXXZ PROC		; overload_force_update_functions, COMDAT

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 504  : 	fn_update_client_server_entity[ENTITY_TYPE_FORCE][COMMS_MODEL_SERVER]  	= update_server;

  00009	b8 08 00 00 00	 mov	 eax, 8
  0000e	6b c8 0b	 imul	 ecx, eax, 11
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	c7 84 01 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_update_client_server_entity@@3PAY01P6GXPAUENTITY@@@ZA[ecx+eax], OFFSET ?update_server@@YGXPAUENTITY@@@Z ; update_server

; 505  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?overload_force_update_functions@@YGXXZ ENDP		; overload_force_update_functions
_TEXT	ENDS
END
