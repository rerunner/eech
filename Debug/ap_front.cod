; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\apache\ap_front.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?initialise_apache_upfront_display@@YGXXZ	; initialise_apache_upfront_display
PUBLIC	?deinitialise_apache_upfront_display@@YGXXZ	; deinitialise_apache_upfront_display
PUBLIC	?update_apache_upfront_display@@YGXXZ		; update_apache_upfront_display
PUBLIC	?draw_apache_upfront_display_on_cockpit@@YGXMM@Z ; draw_apache_upfront_display_on_cockpit
PUBLIC	?draw_apache_upfront_display_on_texture@@YGXXZ	; draw_apache_upfront_display_on_texture
PUBLIC	?set_apache_upfront_display_text@@YGXPAD000@Z	; set_apache_upfront_display_text
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?__LINE__Var@?0??update_apache_upfront_display@@YGXXZ@4JA ; `update_apache_upfront_display'::`1'::__LINE__Var
PUBLIC	??_C@_0FA@BAIKJPLB@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@	; `string'
PUBLIC	??_C@_0O@MIDMDBCB@FUEL?5?$CF04d?5LBS@		; `string'
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@400d1eb8
PUBLIC	__real@4024000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@403e000000000000
PUBLIC	__real@4044000000000000
PUBLIC	__real@4055000000000000
PUBLIC	__real@40a3880000000000
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?set_viewport@@YGXMMMM@Z:PROC			; set_viewport
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_position@@YGXMM@Z:PROC		; set_mono_font_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?electrical_system_active@@YGHXZ:PROC		; electrical_system_active
EXTRN	?get_digital_clock_values@@YGXMPAM00@Z:PROC	; get_digital_clock_values
EXTRN	?update_upfront_display_shared_mem@@YGXPAD000@Z:PROC ; update_upfront_display_shared_mem
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?command_line_shared_mem_export@@3HA:DWORD	; command_line_shared_mem_export
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?text_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)		; text_colour
?clear_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)		; clear_colour
?texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)		; texture_screen
?line1@@3PADA DB 0fH DUP (?)				; line1
	ALIGN	4

?line2@@3PADA DB 0fH DUP (?)				; line2
	ALIGN	4

?line3@@3PADA DB 0fH DUP (?)				; line3
	ALIGN	4

?line4@@3PADA DB 0fH DUP (?)				; line4
_BSS	ENDS
;	COMDAT __real@40a3880000000000
CONST	SEGMENT
__real@40a3880000000000 DQ 040a3880000000000r	; 2500
CONST	ENDS
;	COMDAT __real@4055000000000000
CONST	SEGMENT
__real@4055000000000000 DQ 04055000000000000r	; 84
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@403e000000000000
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@400d1eb8
CONST	SEGMENT
__real@400d1eb8 DD 0400d1eb8r			; 2.205
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT ??_C@_0O@MIDMDBCB@FUEL?5?$CF04d?5LBS@
CONST	SEGMENT
??_C@_0O@MIDMDBCB@FUEL?5?$CF04d?5LBS@ DB 'FUEL %04d LBS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@ DB '%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@BAIKJPLB@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FA@BAIKJPLB@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_'
	DB	'front.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_apache_upfront_display@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_apache_upfront_display@@YGXXZ@4JA DD 0b3H ; `update_apache_upfront_display'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_front.c
;	COMDAT ?display_messages@@YGXMM@Z
_TEXT	SEGMENT
_y_line4$ = -32						; size = 4
_y_line3$ = -28						; size = 4
_y_line2$ = -24						; size = 4
_y_line1$ = -20						; size = 4
_y_max$ = -16						; size = 4
_x_max$ = -12						; size = 4
_y_min$ = -8						; size = 4
_x_min$ = -4						; size = 4
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
?display_messages@@YGXMM@Z PROC				; display_messages, COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 101  : 	float
; 102  : 		x_min,
; 103  : 		y_min,
; 104  : 		x_max,
; 105  : 		y_max,
; 106  : 		y_line1,
; 107  : 		y_line2,
; 108  : 		y_line3,
; 109  : 		y_line4;
; 110  : 
; 111  : 	if (!electrical_system_active())

  00009	e8 00 00 00 00	 call	 ?electrical_system_active@@YGHXZ ; electrical_system_active
  0000e	85 c0		 test	 eax, eax
  00010	75 05		 jne	 SHORT $LN2@display_me

; 112  : 		return;

  00012	e9 73 01 00 00	 jmp	 $LN1@display_me
$LN2@display_me:

; 113  : 
; 114  : 	x_min = x_org;

  00017	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  0001c	f3 0f 11 45 fc	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 115  : 	y_min = y_org;

  00021	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  00026	f3 0f 11 45 f8	 movss	 DWORD PTR _y_min$[ebp], xmm0

; 116  : 	x_max = x_org + VIEWPORT_WIDTH - 0.001;

  0002b	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x_org$[ebp]
  00030	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4055000000000000
  00038	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00040	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00044	f3 0f 11 45 f4	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 117  : 	y_max = y_org + VIEWPORT_HEIGHT - 0.001;

  00049	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y_org$[ebp]
  0004e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4044000000000000
  00056	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0005e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00062	f3 0f 11 45 f0	 movss	 DWORD PTR _y_max$[ebp], xmm0

; 118  : 
; 119  : 	set_viewport (x_min, y_min, x_max, y_max);

  00067	51		 push	 ecx
  00068	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	51		 push	 ecx
  00073	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	51		 push	 ecx
  0007e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	51		 push	 ecx
  00089	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	e8 00 00 00 00	 call	 ?set_viewport@@YGXMMMM@Z ; set_viewport

; 120  : 
; 121  : 	y_line1 = y_org;

  00098	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  0009d	f3 0f 11 45 ec	 movss	 DWORD PTR _y_line1$[ebp], xmm0

; 122  : 	y_line2 = y_org + 10.0;

  000a2	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y_org$[ebp]
  000a7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  000af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b3	f3 0f 11 45 e8	 movss	 DWORD PTR _y_line2$[ebp], xmm0

; 123  : 	y_line3 = y_org + 20.0;

  000b8	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y_org$[ebp]
  000bd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  000c5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000c9	f3 0f 11 45 e4	 movss	 DWORD PTR _y_line3$[ebp], xmm0

; 124  : 	y_line4 = y_org + 30.0;

  000ce	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y_org$[ebp]
  000d3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000
  000db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000df	f3 0f 11 45 e0	 movss	 DWORD PTR _y_line4$[ebp], xmm0

; 125  : 
; 126  : 	set_mono_font_type (MONO_FONT_TYPE_5X9);

  000e4	6a 02		 push	 2
  000e6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 127  : 
; 128  : 	set_mono_font_colour (text_colour);

  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?text_colour@@3UREAL_COLOUR@@A
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 129  : 
; 130  : 	set_mono_font_position (x_min, y_line1);

  000f6	51		 push	 ecx
  000f7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_line1$[ebp]
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	51		 push	 ecx
  00102	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010c	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 131  : 
; 132  : 	print_mono_font_string (line1);

  00111	68 00 00 00 00	 push	 OFFSET ?line1@@3PADA
  00116	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 133  : 
; 134  : 	set_mono_font_position (x_min, y_line2);

  0011b	51		 push	 ecx
  0011c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y_line2$[ebp]
  00121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00126	51		 push	 ecx
  00127	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0012c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00131	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 135  : 
; 136  : 	print_mono_font_string (line2);

  00136	68 00 00 00 00	 push	 OFFSET ?line2@@3PADA
  0013b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 137  : 
; 138  : 	set_mono_font_position (x_min, y_line3);

  00140	51		 push	 ecx
  00141	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y_line3$[ebp]
  00146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014b	51		 push	 ecx
  0014c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 139  : 
; 140  : 	print_mono_font_string (line3);

  0015b	68 00 00 00 00	 push	 OFFSET ?line3@@3PADA
  00160	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 141  : 
; 142  : 	set_mono_font_position (x_min, y_line4);

  00165	51		 push	 ecx
  00166	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y_line4$[ebp]
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	51		 push	 ecx
  00171	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00176	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017b	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 143  : 
; 144  : 	print_mono_font_string (line4);

  00180	68 00 00 00 00	 push	 OFFSET ?line4@@3PADA
  00185	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN1@display_me:

; 145  : }

  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c2 08 00	 ret	 8
?display_messages@@YGXMM@Z ENDP				; display_messages
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_front.c
;	COMDAT ?set_apache_upfront_display_text@@YGXPAD000@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_s3$ = 16						; size = 4
_s4$ = 20						; size = 4
?set_apache_upfront_display_text@@YGXPAD000@Z PROC	; set_apache_upfront_display_text, COMDAT

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 250  : 	if (s1)

  00009	83 7d 08 00	 cmp	 DWORD PTR _s1$[ebp], 0
  0000d	74 23		 je	 SHORT $LN2@set_apache

; 251  : 	{
; 252  : 		strncpy (line1, s1, MAX_STRING_LENGTH);

  0000f	6a 0e		 push	 14			; 0000000eH
  00011	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
  00014	50		 push	 eax
  00015	68 00 00 00 00	 push	 OFFSET ?line1@@3PADA
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 253  : 
; 254  : 		line1[MAX_STRING_LENGTH] = '\0';

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	6b c8 0e	 imul	 ecx, eax, 14
  0002b	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line1@@3PADA[ecx], 0
$LN2@set_apache:

; 255  : 	}
; 256  : 
; 257  : 	if (s2)

  00032	83 7d 0c 00	 cmp	 DWORD PTR _s2$[ebp], 0
  00036	74 23		 je	 SHORT $LN3@set_apache

; 258  : 	{
; 259  : 		strncpy (line2, s2, MAX_STRING_LENGTH);

  00038	6a 0e		 push	 14			; 0000000eH
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _s2$[ebp]
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ?line2@@3PADA
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 260  : 
; 261  : 		line2[MAX_STRING_LENGTH] = '\0';

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	6b c8 0e	 imul	 ecx, eax, 14
  00054	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line2@@3PADA[ecx], 0
$LN3@set_apache:

; 262  : 	}
; 263  : 
; 264  : 	if (s3)

  0005b	83 7d 10 00	 cmp	 DWORD PTR _s3$[ebp], 0
  0005f	74 23		 je	 SHORT $LN4@set_apache

; 265  : 	{
; 266  : 		strncpy (line3, s3, MAX_STRING_LENGTH);

  00061	6a 0e		 push	 14			; 0000000eH
  00063	8b 45 10	 mov	 eax, DWORD PTR _s3$[ebp]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ?line3@@3PADA
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH

; 267  : 
; 268  : 		line3[MAX_STRING_LENGTH] = '\0';

  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	6b c8 0e	 imul	 ecx, eax, 14
  0007d	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line3@@3PADA[ecx], 0
$LN4@set_apache:

; 269  : 	}
; 270  : 
; 271  : 	if (s4)

  00084	83 7d 14 00	 cmp	 DWORD PTR _s4$[ebp], 0
  00088	74 23		 je	 SHORT $LN5@set_apache

; 272  : 	{
; 273  : 		strncpy (line4, s4, MAX_STRING_LENGTH);

  0008a	6a 0e		 push	 14			; 0000000eH
  0008c	8b 45 14	 mov	 eax, DWORD PTR _s4$[ebp]
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ?line4@@3PADA
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 274  : 
; 275  : 		line4[MAX_STRING_LENGTH] = '\0';

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	6b c8 0e	 imul	 ecx, eax, 14
  000a6	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line4@@3PADA[ecx], 0
$LN5@set_apache:

; 276  : 	}
; 277  : 
; 278  : 	if (command_line_shared_mem_export != 0)

  000ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_shared_mem_export@@3HA, 0 ; command_line_shared_mem_export
  000b4	74 15		 je	 SHORT $LN1@set_apache

; 279  : 		update_upfront_display_shared_mem(s1, s2, s3, s4); // Retro 14Aug2006

  000b6	8b 45 14	 mov	 eax, DWORD PTR _s4$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d 10	 mov	 ecx, DWORD PTR _s3$[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 0c	 mov	 edx, DWORD PTR _s2$[ebp]
  000c1	52		 push	 edx
  000c2	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ?update_upfront_display_shared_mem@@YGXPAD000@Z ; update_upfront_display_shared_mem
$LN1@set_apache:

; 280  : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 10 00	 ret	 16			; 00000010H
?set_apache_upfront_display_text@@YGXPAD000@Z ENDP	; set_apache_upfront_display_text
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_front.c
;	COMDAT ?draw_apache_upfront_display_on_texture@@YGXXZ
_TEXT	SEGMENT
?draw_apache_upfront_display_on_texture@@YGXXZ PROC	; draw_apache_upfront_display_on_texture, COMDAT

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 224  : 	set_active_screen (texture_screen);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_screen@@3PAUSCREEN@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 225  : 
; 226  : 	if (lock_screen (texture_screen))

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0001f	85 c0		 test	 eax, eax
  00021	74 40		 je	 SHORT $LN2@draw_apach

; 227  : 	{
; 228  : 		set_block (0, 0, 127, 127, clear_colour);

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_colour@@3UREAL_COLOUR@@A
  00028	50		 push	 eax
  00029	6a 7f		 push	 127			; 0000007fH
  0002b	6a 7f		 push	 127			; 0000007fH
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 229  : 
; 230  : 		display_messages (0.0, 0.0);

  00036	51		 push	 ecx
  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	51		 push	 ecx
  00040	0f 57 c0	 xorps	 xmm0, xmm0
  00043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00048	e8 00 00 00 00	 call	 ?display_messages@@YGXMM@Z ; display_messages

; 231  : 
; 232  : 		flush_screen_texture_graphics (texture_screen);

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_screen@@3PAUSCREEN@@A
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 233  : 
; 234  : 		unlock_screen (texture_screen);

  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_screen@@3PAUSCREEN@@A
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN2@draw_apach:

; 235  : 	}
; 236  : 
; 237  : 	set_active_screen (video_screen);

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 238  : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?draw_apache_upfront_display_on_texture@@YGXXZ ENDP	; draw_apache_upfront_display_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_front.c
;	COMDAT ?draw_apache_upfront_display_on_cockpit@@YGXMM@Z
_TEXT	SEGMENT
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
?draw_apache_upfront_display_on_cockpit@@YGXMM@Z PROC	; draw_apache_upfront_display_on_cockpit, COMDAT

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 210  : 	if (lock_screen (active_screen))

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00014	85 c0		 test	 eax, eax
  00016	74 26		 je	 SHORT $LN2@draw_apach

; 211  : 	{
; 212  : 		display_messages (x_org, y_org);

  00018	51		 push	 ecx
  00019	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  0001e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00023	51		 push	 ecx
  00024	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  00029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002e	e8 00 00 00 00	 call	 ?display_messages@@YGXMM@Z ; display_messages

; 213  : 
; 214  : 		unlock_screen (active_screen);

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN2@draw_apach:

; 215  : 	}
; 216  : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?draw_apache_upfront_display_on_cockpit@@YGXMM@Z ENDP	; draw_apache_upfront_display_on_cockpit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_front.c
;	COMDAT ?update_apache_upfront_display@@YGXXZ
_TEXT	SEGMENT
tv146 = -256						; size = 8
tv147 = -248						; size = 8
tv78 = -248						; size = 4
tv70 = -244						; size = 4
_seconds$ = -176					; size = 4
_minutes$ = -172					; size = 4
_hours$ = -168						; size = 4
_time_of_day$ = -164					; size = 4
_s2$ = -160						; size = 80
_s1$ = -80						; size = 80
?update_apache_upfront_display@@YGXXZ PROC		; update_apache_upfront_display, COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 180  : 	char
; 181  : 		s1[80],
; 182  : 		s2[80];
; 183  : 
; 184  : 	float
; 185  : 		time_of_day,
; 186  : 		hours,
; 187  : 		minutes,
; 188  : 		seconds;
; 189  : 
; 190  : //	if (!electrical_system_active())
; 191  : //		return;
; 192  : 
; 193  : 	time_of_day = get_local_entity_float_value (get_session_entity (), FLOAT_TYPE_TIME_OF_DAY);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00013	74 0f		 je	 SHORT $LN3@update_apa
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 8d 0c ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00022	eb 24		 jmp	 SHORT $LN4@update_apa
$LN3@update_apa:
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_apache_upfront_display@@YGXXZ@4JA
  0002a	83 c2 0e	 add	 edx, 14			; 0000000eH
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@BAIKJPLB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003e	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN4@update_apa:
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 0c		 je	 SHORT $LN5@update_apa
  00051	c7 85 08 ff ff
	ff 8e 00 00 00	 mov	 DWORD PTR tv78[ebp], 142 ; 0000008eH
  0005b	eb 24		 jmp	 SHORT $LN6@update_apa
$LN5@update_apa:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_apache_upfront_display@@YGXXZ@4JA
  00063	83 c2 0e	 add	 edx, 14			; 0000000eH
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@BAIKJPLB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN6@update_apa:
  00081	68 8e 00 00 00	 push	 142			; 0000008eH
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0008c	51		 push	 ecx
  0008d	69 95 0c ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv70[ebp], 700
  00097	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a4	ff d1		 call	 ecx
  000a6	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR _time_of_day$[ebp]

; 194  : 
; 195  : 	get_digital_clock_values (time_of_day, &hours, &minutes, &seconds);

  000ac	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _seconds$[ebp]
  000b2	50		 push	 eax
  000b3	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _minutes$[ebp]
  000b9	51		 push	 ecx
  000ba	8d 95 58 ff ff
	ff		 lea	 edx, DWORD PTR _hours$[ebp]
  000c0	52		 push	 edx
  000c1	51		 push	 ecx
  000c2	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _time_of_day$[ebp]
  000ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cf	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 196  : 
; 197  : 	sprintf (s1, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  000d4	f3 0f 2c 85 50
	ff ff ff	 cvttss2si eax, DWORD PTR _seconds$[ebp]
  000dc	50		 push	 eax
  000dd	f3 0f 2c 8d 54
	ff ff ff	 cvttss2si ecx, DWORD PTR _minutes$[ebp]
  000e5	51		 push	 ecx
  000e6	f3 0f 2c 95 58
	ff ff ff	 cvttss2si edx, DWORD PTR _hours$[ebp]
  000ee	52		 push	 edx
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  000f4	8d 45 b0	 lea	 eax, DWORD PTR _s1$[ebp]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 _sprintf
  000fd	83 c4 14	 add	 esp, 20			; 00000014H

; 198  : 
; 199  : 	sprintf (s2, "FUEL %04d LBS", (int) (bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 2500.0)));

  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00105	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  0010d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00115	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00119	0f 57 c9	 xorps	 xmm1, xmm1
  0011c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00120	76 0d		 jbe	 SHORT $LN9@update_apa
  00122	0f 57 c0	 xorps	 xmm0, xmm0
  00125	f2 0f 11 85 08
	ff ff ff	 movsd	 QWORD PTR tv147[ebp], xmm0
  0012d	eb 68		 jmp	 SHORT $LN10@update_apa
$LN9@update_apa:
  0012f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00135	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  0013d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00145	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00149	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40a3880000000000
  00151	76 12		 jbe	 SHORT $LN7@update_apa
  00153	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40a3880000000000
  0015b	f2 0f 11 85 00
	ff ff ff	 movsd	 QWORD PTR tv146[ebp], xmm0
  00163	eb 22		 jmp	 SHORT $LN8@update_apa
$LN7@update_apa:
  00165	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0016b	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  00173	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  0017b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0017f	f2 0f 11 85 00
	ff ff ff	 movsd	 QWORD PTR tv146[ebp], xmm0
$LN8@update_apa:
  00187	f2 0f 10 85 00
	ff ff ff	 movsd	 xmm0, QWORD PTR tv146[ebp]
  0018f	f2 0f 11 85 08
	ff ff ff	 movsd	 QWORD PTR tv147[ebp], xmm0
$LN10@update_apa:
  00197	f2 0f 2c 85 08
	ff ff ff	 cvttsd2si eax, QWORD PTR tv147[ebp]
  0019f	50		 push	 eax
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MIDMDBCB@FUEL?5?$CF04d?5LBS@
  001a5	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _s2$[ebp]
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 _sprintf
  001b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : 
; 201  : 	set_apache_upfront_display_text (NULL, NULL, s1, s2);

  001b4	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _s2$[ebp]
  001ba	50		 push	 eax
  001bb	8d 4d b0	 lea	 ecx, DWORD PTR _s1$[ebp]
  001be	51		 push	 ecx
  001bf	6a 00		 push	 0
  001c1	6a 00		 push	 0
  001c3	e8 00 00 00 00	 call	 ?set_apache_upfront_display_text@@YGXPAD000@Z ; set_apache_upfront_display_text

; 202  : }

  001c8	5f		 pop	 edi
  001c9	5e		 pop	 esi
  001ca	5b		 pop	 ebx
  001cb	8b e5		 mov	 esp, ebp
  001cd	5d		 pop	 ebp
  001ce	c3		 ret	 0
?update_apache_upfront_display@@YGXXZ ENDP		; update_apache_upfront_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_front.c
;	COMDAT ?deinitialise_apache_upfront_display@@YGXXZ
_TEXT	SEGMENT
?deinitialise_apache_upfront_display@@YGXXZ PROC	; deinitialise_apache_upfront_display, COMDAT

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 171  : 	destroy_screen (texture_screen);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_screen@@3PAUSCREEN@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 172  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?deinitialise_apache_upfront_display@@YGXXZ ENDP	; deinitialise_apache_upfront_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_front.c
;	COMDAT ?initialise_apache_upfront_display@@YGXXZ
_TEXT	SEGMENT
?initialise_apache_upfront_display@@YGXXZ PROC		; initialise_apache_upfront_display, COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 153  : 	texture_screen = create_system_texture_screen (128, 128, TEXTURE_INDEX_AVCKPT_DISPLAY_UPFRONT, TEXTURE_TYPE_SINGLEALPHA);

  00009	6a 02		 push	 2
  0000b	68 fa 00 00 00	 push	 250			; 000000faH
  00010	68 80 00 00 00	 push	 128			; 00000080H
  00015	68 80 00 00 00	 push	 128			; 00000080H
  0001a	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?texture_screen@@3PAUSCREEN@@A, eax

; 154  : 
; 155  : 	line1[0] = '\0';

  00024	b8 01 00 00 00	 mov	 eax, 1
  00029	6b c8 00	 imul	 ecx, eax, 0
  0002c	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line1@@3PADA[ecx], 0

; 156  : 	line2[0] = '\0';

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	6b c8 00	 imul	 ecx, eax, 0
  0003b	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line2@@3PADA[ecx], 0

; 157  : 	line3[0] = '\0';

  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	6b c8 00	 imul	 ecx, eax, 0
  0004a	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line3@@3PADA[ecx], 0

; 158  : 	line4[0] = '\0';

  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	6b c8 00	 imul	 ecx, eax, 0
  00059	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line4@@3PADA[ecx], 0

; 159  : 
; 160  : 	set_rgb_colour (text_colour, 0, 255, 0, 255);

  00060	c6 05 02 00 00
	00 00		 mov	 BYTE PTR ?text_colour@@3UREAL_COLOUR@@A+2, 0
  00067	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?text_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  0006e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?text_colour@@3UREAL_COLOUR@@A, 0
  00075	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?text_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 161  : 
; 162  : 	set_rgb_colour (clear_colour, 0, 255, 0, 0);

  0007c	c6 05 02 00 00
	00 00		 mov	 BYTE PTR ?clear_colour@@3UREAL_COLOUR@@A+2, 0
  00083	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  0008a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?clear_colour@@3UREAL_COLOUR@@A, 0
  00091	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_colour@@3UREAL_COLOUR@@A+3, 0

; 163  : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
?initialise_apache_upfront_display@@YGXXZ ENDP		; initialise_apache_upfront_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
