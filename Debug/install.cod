; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\install.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?strstr@@YAPADQADQBD@Z				; strstr
PUBLIC	?add_file_to_uninstall_log@@YGXPBD@Z		; add_file_to_uninstall_log
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_05BMGBEOOC@?$CFs?2?$CFs@			; `string'
PUBLIC	??_C@_0CD@CELJJHOP@Checking?5installation?5file?5for?3@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0P@JGGKNPPC@?4?4?2install?4log@		; `string'
PUBLIC	??_C@_0CN@KGGGKPDC@File?5?$CFs?5already?5in?5install?4log?5@ ; `string'
PUBLIC	??_C@_01MCMALHOG@a@				; `string'
PUBLIC	??_C@_0P@DMOBEIGK@File?5Copy?3?5?$CFs?6@	; `string'
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_strstr:PROC
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?application_current_directory@@3PADA:BYTE	; application_current_directory
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0P@DMOBEIGK@File?5Copy?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0P@DMOBEIGK@File?5Copy?3?5?$CFs?6@ DB 'File Copy: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a@
CONST	SEGMENT
??_C@_01MCMALHOG@a@ DB 'a', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KGGGKPDC@File?5?$CFs?5already?5in?5install?4log?5@
CONST	SEGMENT
??_C@_0CN@KGGGKPDC@File?5?$CFs?5already?5in?5install?4log?5@ DB 'File %s '
	DB	'already in install.log - bailing out', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JGGKNPPC@?4?4?2install?4log@
CONST	SEGMENT
??_C@_0P@JGGKNPPC@?4?4?2install?4log@ DB '..\install.log', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CELJJHOP@Checking?5installation?5file?5for?3@
CONST	SEGMENT
??_C@_0CD@CELJJHOP@Checking?5installation?5file?5for?3@ DB 'Checking inst'
	DB	'allation file for: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
CONST	SEGMENT
??_C@_05BMGBEOOC@?$CFs?2?$CFs@ DB '%s\%s', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\install.c
;	COMDAT ?add_file_to_uninstall_log@@YGXPBD@Z
_TEXT	SEGMENT
_install_buffer$ = -2052				; size = 1024
_full_filename$ = -1028					; size = 1024
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
?add_file_to_uninstall_log@@YGXPBD@Z PROC		; add_file_to_uninstall_log, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 09 00
	00		 sub	 esp, 2372		; 00000944H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 78   : 
; 79   : 	FILE
; 80   : 		*fp;
; 81   : 
; 82   : 	char
; 83   : 		full_filename[1024];
; 84   : 
; 85   : 	char
; 86   : 		install_buffer[1024];
; 87   : 
; 88   : 	sprintf ( full_filename, "%s\\%s", application_current_directory, filename );

  0000c	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0000f	50		 push	 eax
  00010	68 00 00 00 00	 push	 OFFSET ?application_current_directory@@3PADA ; application_current_directory
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
  0001a	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _full_filename$[ebp]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 _sprintf
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 
; 90   : 	debug_log ( "Checking installation file for: %s", full_filename );

  00029	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _full_filename$[ebp]
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CELJJHOP@Checking?5installation?5file?5for?3@
  00035	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0003a	83 c4 08	 add	 esp, 8

; 91   : 
; 92   : 	fp = fopen ( "..\\install.log", "rb" );

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JGGKNPPC@?4?4?2install?4log@
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0004d	83 c4 08	 add	 esp, 8
  00050	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 93   : 
; 94   : 	if ( fp )

  00053	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00057	0f 84 a4 00 00
	00		 je	 $LN1@add_file_t
$LN2@add_file_t:

; 95   : 	{
; 96   : 
; 97   : 		//
; 98   : 		// Check through the file list to make sure the file doesn't exist at the moment.
; 99   : 		//
; 100  : 
; 101  : 		while ( fgets ( install_buffer, 1024, fp ) != NULL )

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00060	50		 push	 eax
  00061	68 00 04 00 00	 push	 1024			; 00000400H
  00066	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _install_buffer$[ebp]
  0006c	51		 push	 ecx
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	85 c0		 test	 eax, eax
  00078	74 39		 je	 SHORT $LN3@add_file_t

; 102  : 		{
; 103  : 
; 104  : 			if ( strstr ( install_buffer, filename ) )

  0007a	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0007d	50		 push	 eax
  0007e	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _install_buffer$[ebp]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 ?strstr@@YAPADQADQBD@Z	; strstr
  0008a	83 c4 08	 add	 esp, 8
  0008d	85 c0		 test	 eax, eax
  0008f	74 20		 je	 SHORT $LN5@add_file_t

; 105  : 			{
; 106  : 
; 107  : 				debug_log ( "File %s already in install.log - bailing out", filename );

  00091	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00094	50		 push	 eax
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@KGGGKPDC@File?5?$CFs?5already?5in?5install?4log?5@
  0009a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0009f	83 c4 08	 add	 esp, 8

; 108  : 
; 109  : 				fclose ( fp );

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000a5	50		 push	 eax
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000ac	83 c4 04	 add	 esp, 4

; 110  : 
; 111  : 				return;

  000af	eb 50		 jmp	 SHORT $LN1@add_file_t
$LN5@add_file_t:

; 112  : 			}
; 113  : 		}

  000b1	eb aa		 jmp	 SHORT $LN2@add_file_t
$LN3@add_file_t:

; 114  : 
; 115  : 		//
; 116  : 		// Close the install.log file
; 117  : 		//
; 118  : 
; 119  : 		fclose ( fp );

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000b6	50		 push	 eax
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000bd	83 c4 04	 add	 esp, 4

; 120  : 
; 121  : 		//
; 122  : 		// Not in the install.log file - put it in there at the end.
; 123  : 		//
; 124  : 
; 125  : 		fp = fopen ( "..\\install.log", "a" );

  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_01MCMALHOG@a@
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JGGKNPPC@?4?4?2install?4log@
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  000d0	83 c4 08	 add	 esp, 8
  000d3	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 126  : 
; 127  : 		if ( fp )

  000d6	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  000da	74 25		 je	 SHORT $LN1@add_file_t

; 128  : 		{
; 129  : 
; 130  : 			fprintf ( fp, "File Copy: %s\n", full_filename );

  000dc	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _full_filename$[ebp]
  000e2	50		 push	 eax
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DMOBEIGK@File?5Copy?3?5?$CFs?6@
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 _fprintf
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 131  : 
; 132  : 			fclose ( fp );

  000f4	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000f7	50		 push	 eax
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000fe	83 c4 04	 add	 esp, 4
$LN1@add_file_t:

; 133  : 		}
; 134  : 	}
; 135  : }

  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 04 00	 ret	 4
?add_file_to_uninstall_log@@YGXPBD@Z ENDP		; add_file_to_uninstall_log
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\string.h
;	COMDAT ?strstr@@YAPADQADQBD@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__SubString$ = 12					; size = 4
?strstr@@YAPADQADQBD@Z PROC				; strstr, COMDAT

; 523  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __SubString$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __String$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _strstr
  00016	83 c4 08	 add	 esp, 8

; 525  :     }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?strstr@@YAPADQADQBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
