; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\textuser.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?number_of_system_textures@@3HA			; number_of_system_textures
PUBLIC	?number_of_system_texture_palettes@@3HA		; number_of_system_texture_palettes
PUBLIC	?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A ; system_texture_colour_tables
PUBLIC	?system_textures@@3PAPAUSCREEN@@A		; system_textures
PUBLIC	?backup_system_textures@@3PAPAUSCREEN@@A	; backup_system_textures
PUBLIC	?system_texture_names@@3PAY0IA@DA		; system_texture_names
PUBLIC	?system_textures_referenced@@3PAHA		; system_textures_referenced
PUBLIC	?current_map_info@@3UCUSTOM_MAP_INFO@@A		; current_map_info
PUBLIC	?half_texture_graphics@@3HA			; half_texture_graphics
PUBLIC	?number_of_system_texture_camoflages@@3HA	; number_of_system_texture_camoflages
PUBLIC	?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A ; system_texture_info
PUBLIC	?backup_system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A ; backup_system_texture_info
PUBLIC	?system_texture_palettes@@3PAPAUIDirectDrawPalette@@A ; system_texture_palettes
PUBLIC	?system_texture_name_hashes@@3PAUTEXTURE_NAME_HASH_ENTRY@@A ; system_texture_name_hashes
PUBLIC	?system_texture_name_hash_table@@3PAPAUTEXTURE_NAME_HASH_ENTRY@@A ; system_texture_name_hash_table
PUBLIC	?texture_image_data@@3PAEA			; texture_image_data
PUBLIC	?new_texture_sources@@3PAY0BAE@DA		; new_texture_sources
PUBLIC	?system_texture_override_names@@3PAUOVERRIDENAME@@A ; system_texture_override_names
_BSS	SEGMENT
?number_of_system_textures@@3HA DD 01H DUP (?)		; number_of_system_textures
?number_of_system_texture_palettes@@3HA DD 01H DUP (?)	; number_of_system_texture_palettes
?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A DD 08000H DUP (?) ; system_texture_colour_tables
?system_textures@@3PAPAUSCREEN@@A DD 02008H DUP (?)	; system_textures
?backup_system_textures@@3PAPAUSCREEN@@A DD 02008H DUP (?) ; backup_system_textures
?system_texture_names@@3PAY0IA@DA DB 0100020H DUP (?)	; system_texture_names
?system_textures_referenced@@3PAHA DD 02008H DUP (?)	; system_textures_referenced
?current_map_info@@3UCUSTOM_MAP_INFO@@A DB 0624H DUP (?) ; current_map_info
?half_texture_graphics@@3HA DD 01H DUP (?)		; half_texture_graphics
?number_of_system_texture_camoflages@@3HA DD 01H DUP (?) ; number_of_system_texture_camoflages
	ALIGN	8

?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A DQ 02000H DUP (?) ; system_texture_info
?backup_system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A DQ 02004H DUP (?) ; backup_system_texture_info
?system_texture_palettes@@3PAPAUIDirectDrawPalette@@A DD 080H DUP (?) ; system_texture_palettes
?system_texture_name_hashes@@3PAUTEXTURE_NAME_HASH_ENTRY@@A DB 018000H DUP (?) ; system_texture_name_hashes
?system_texture_name_hash_table@@3PAPAUTEXTURE_NAME_HASH_ENTRY@@A DD 0100H DUP (?) ; system_texture_name_hash_table
?texture_image_data@@3PAEA DB 01000000H DUP (?)		; texture_image_data
?new_texture_sources@@3PAY0BAE@DA DB 0208020H DUP (?)	; new_texture_sources
?system_texture_override_names@@3PAUOVERRIDENAME@@A DB 0298020H DUP (?) ; system_texture_override_names
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfscanf_l
PUBLIC	_fscanf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	__vsprintf_s_l
PUBLIC	_sprintf
PUBLIC	_sprintf_s
PUBLIC	__vsscanf_l
PUBLIC	_sscanf
PUBLIC	?strchr@@YAPADQADH@Z				; strchr
PUBLIC	?strrchr@@YAPADQADH@Z				; strrchr
PUBLIC	?strstr@@YAPADQADQBD@Z				; strstr
PUBLIC	?set_texture_camoflage@@YGXH@Z			; set_texture_camoflage
PUBLIC	?release_system_textures@@YGXXZ			; release_system_textures
PUBLIC	?load_texturemap_data@@YGHPBD@Z			; load_texturemap_data
PUBLIC	?get_system_texture_index@@YGHPBD@Z		; get_system_texture_index
PUBLIC	?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z ; create_texture_map
PUBLIC	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z	; get_system_texture_ptr
PUBLIC	?create_system_indexed_texture_map@@YGHPAUSCREEN@@HHHW4SCREEN_FORMAT_TYPES@@@Z ; create_system_indexed_texture_map
PUBLIC	?get_system_texture_name@@YGPBDH@Z		; get_system_texture_name
PUBLIC	?report_system_texture_stats@@YGXXZ		; report_system_texture_stats
PUBLIC	?create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z ; create_texture_graphic
PUBLIC	?destroy_texture_graphic@@YGXPAUTEXTURE_GRAPHIC@@@Z ; destroy_texture_graphic
PUBLIC	?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z	; load_bmp_file_screen
PUBLIC	?get_texture_graphic_source_dimensions@@YGXPAUTEXTURE_GRAPHIC@@PAH1@Z ; get_texture_graphic_source_dimensions
PUBLIC	?load_warzone_override_textures@@YGXXZ		; load_warzone_override_textures
PUBLIC	?restore_default_textures@@YGXXZ		; restore_default_textures
PUBLIC	?initialise_custom_map_info@@YGXXZ		; initialise_custom_map_info
PUBLIC	?read_map_info_data@@YGXXZ			; read_map_info_data
PUBLIC	?get_current_map_latitude_offset@@YGMXZ		; get_current_map_latitude_offset
PUBLIC	?get_current_map_longitude_offset@@YGMXZ	; get_current_map_longitude_offset
PUBLIC	?add_new_texture@@YGHPBD0@Z			; add_new_texture
PUBLIC	?convert_no_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_no_alpha_texture_map_data
PUBLIC	?convert_single_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_single_alpha_texture_map_data
PUBLIC	?convert_multiple_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_multiple_alpha_texture_map_data
PUBLIC	?convert_no_alpha_24bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_no_alpha_24bit_texture_map_data
PUBLIC	?convert_single_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_single_alpha_32bit_texture_map_data
PUBLIC	?convert_multiple_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_multiple_alpha_32bit_texture_map_data
PUBLIC	?load_texture_override@@YGXXZ			; load_texture_override
PUBLIC	??$max@H@std@@YGABHABH0@Z			; std::max<int>
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0DA@LHMBPIKN@Error?3?5Texture?3?5?$CFs?5has?5incorrec@ ; `string'
PUBLIC	??_C@_02KEDOHJFP@?9D@				; `string'
PUBLIC	?__LINE__Var@?0??load_texturemap_data@@YGHPBD@Z@4JA ; `load_texturemap_data'::`1'::__LINE__Var
PUBLIC	??_C@_0BA@IAOINLOF@?$CFs?2textures?4pal@	; `string'
PUBLIC	??_C@_0BA@EGNNHHML@?$CFs?2textures?4bin@	; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0DJ@LJBBKFJP@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0EC@OFFIHPLK@number_of_system_textures?5?$DN?$DN?5TE@ ; `string'
PUBLIC	??_C@_0BH@NAJOOMIA@Reading?5in?5?$CFd?5textures@ ; `string'
PUBLIC	??_C@_0BL@JELHJEEM@width?5?$DM?$DN?5MAX_TEXTURE_WIDTH@ ; `string'
PUBLIC	??_C@_0BN@NJEKICPO@height?5?$DM?$DN?5MAX_TEXTURE_HEIGHT@ ; `string'
PUBLIC	??_C@_0DC@GAJKCHBP@CREATED?5TEXTURE?5WITH?5INCORRECT?5@ ; `string'
PUBLIC	??_C@_02MFNBDIMN@?9W@				; `string'
PUBLIC	??_C@_0BM@FPNKEOIF@TYPE?3?5NOALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5?$CFd@ ; `string'
PUBLIC	??_C@_0CA@KHMIPDLH@TYPE?3?5SINGLEALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5?$CFd@ ; `string'
PUBLIC	??_C@_0CC@DCCAPGAA@TYPE?3?5MULTIPLEALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5@ ; `string'
PUBLIC	??_C@_0BE@EGJOCONJ@NOALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@ ; `string'
PUBLIC	??_C@_0BJ@KGFDMHJG@SINGLE_ALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@ ; `string'
PUBLIC	??_C@_0BL@NMJFIGAG@MULTIPLE_ALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z@4JA ; `create_texture_graphic'::`1'::__LINE__Var
PUBLIC	??_C@_0CH@LMJNBBKK@?$CI?5channels?5?$DN?$DN?53?5?$CJ?5?$HM?$HM?5?$CI?5channels@ ; `string'
PUBLIC	??_C@_0DC@FKAPOGBC@Unable?5to?5lock?5screen?5during?5lo@ ; `string'
PUBLIC	?__LINE__Var@?0??get_texture_graphic_source_dimensions@@YGXPAUTEXTURE_GRAPHIC@@PAH1@Z@4JA ; `get_texture_graphic_source_dimensions'::`1'::__LINE__Var
PUBLIC	??_C@_07PGDKGDCB@graphic@			; `string'
PUBLIC	??_C@_05IGKADHGO@width@				; `string'
PUBLIC	??_C@_06LNLHEAAG@height@			; `string'
PUBLIC	??_C@_07JBFDOFDL@terrain@			; `string'
PUBLIC	??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@ ; `string'
PUBLIC	??_C@_07PHOBPKGE@?$CFs?2?$CFs?2?$CK@		; `string'
PUBLIC	??_C@_05BMGBEOOC@?$CFs?2?$CFs@			; `string'
PUBLIC	??_C@_0BK@JKKHNCCM@No?5extension?5for?5file?3?5?$CFs@ ; `string'
PUBLIC	??_C@_04LEMIEKPG@?4BMP@				; `string'
PUBLIC	??_C@_04JPPEOEHD@?4TGA@				; `string'
PUBLIC	??_C@_04LFFPHNGG@?4DDS@				; `string'
PUBLIC	??_C@_0CF@BKMCJOOO@Texture?5file?5not?5BMP?0?5TGA?5or?5DD@ ; `string'
PUBLIC	??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs@		; `string'
PUBLIC	??_C@_07EGGHCNEO@GENERAL@			; `string'
PUBLIC	??_C@_07EDPCNACP@COCKPIT@			; `string'
PUBLIC	??_C@_04KIFFIHK@CAMO@				; `string'
PUBLIC	??_C@_09JCOEOBPO@ANIMATION@			; `string'
PUBLIC	??_C@_07GMAOFJLP@TERRAIN@			; `string'
PUBLIC	??_C@_0CK@NJDOENKM@?$DN?$DN?$DN?5loading?5custom?5info?3?5textur@ ; `string'
PUBLIC	??_C@_0BD@IGJDILFI@?$CFs?2texturedirs?4txt@	; `string'
PUBLIC	??_C@_0ED@DOGECNFH@?$DN?$DN?$DN?5Searching?5for?5aditional?5pat@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@		; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN@				; `string'
PUBLIC	??_C@_01IPJKGB@?$CD@				; `string'
PUBLIC	??_C@_0CK@BJIHAGOK@?$DN?$DN?$DN?5Looking?5for?5additional?5text@ ; `string'
PUBLIC	??_C@_04JKHNIKCB@TEMP@				; `string'
PUBLIC	??_C@_0BO@DPCAAMMH@Nr?5override?5textures?5found?5?$CFd@ ; `string'
PUBLIC	??_C@_0BJ@KDCDDBFD@?$CFs?2?$CFs?2texture_scales?4txt@ ; `string'
PUBLIC	??_C@_04MAFOFNLN@CITY@				; `string'
PUBLIC	??_C@_0BM@LCBCPMEC@?$CFs?5is?5not?5uncompressed?5RGB?$CB@ ; `string'
PUBLIC	??_C@_0CI@LHMCKHBI@?$CFs?5is?5not?58?0?524?5or?532?5bit?$CB?5?$CIit?5@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BI@JFKCMKBC@?6?$CI?$CFd?$CJ?3?5?$CFs?$CFs?5?$CIobject?5?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BF@JMNNKLPB@Missing?5texture?$CIs?$CJ?$CFs@ ; `string'
PUBLIC	??_C@_0O@FFFDGLBA@TERRAIN?2WATER@		; `string'
PUBLIC	??_C@_0BE@HCBAKPFI@?$CFs?2?$CFs?2waterinfo?4txt@ ; `string'
PUBLIC	??_C@_01IHBHIGKO@?0@				; `string'
PUBLIC	??_C@_0BE@MNBJHN@dynamic?5water?5?$CFs?5?$CFs@	; `string'
PUBLIC	??_C@_0P@HFADLGCA@water?5?$CFd?5?$CFd?5?$CFs@	; `string'
PUBLIC	??_C@_06KNNEIOFN@?$CFs?$CF02d@			; `string'
PUBLIC	??_C@_06KMBGOEGK@?$CFs?$CF03d@			; `string'
PUBLIC	??_C@_0N@INKEGKEN@?$CFs?2?$CFs?2?$CFs?4bmp@	; `string'
PUBLIC	??_C@_0N@KGJIMEMI@?$CFs?2?$CFs?2?$CFs?4tga@	; `string'
PUBLIC	??_C@_0N@IMDDFNNN@?$CFs?2?$CFs?2?$CFs?4dds@	; `string'
PUBLIC	??_C@_0EC@EOLEGPAE@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ ; `string'
PUBLIC	??_C@_0BA@HDFIGNCC@?$CFs?2camp01?2?$CK?4chc@	; `string'
PUBLIC	??_C@_0EA@MPJDGONJ@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ ; `string'
PUBLIC	??_C@_0P@OIMGKHAN@?$CFs?2mapinfo?4txt@		; `string'
PUBLIC	??_C@_0EG@GKEPHIHF@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ ; `string'
PUBLIC	??_C@_06ICAHOPGF@season@			; `string'
PUBLIC	??_C@_0EH@CFLDFJAE@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ ; `string'
PUBLIC	??_C@_09KJAHDPPO@dry?5river@			; `string'
PUBLIC	??_C@_0EK@MIOGJMEF@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ ; `string'
PUBLIC	??_C@_0L@KOOFAJAP@coordinate@			; `string'
PUBLIC	??_C@_05OIOLBAJI@?$CFf?0?$CFf@			; `string'
PUBLIC	??_C@_0BA@CHAMJNPK@gouraud_shading@		; `string'
PUBLIC	??_C@_0FA@HIHENPAM@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ ; `string'
PUBLIC	??_C@_0EC@ECLCKALA@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ ; `string'
PUBLIC	??_C@_0DO@LDEBBGMJ@Texture?5?8?$CFs?8?3?5?$CFs?5defined?5it?5as?5@ ; `string'
PUBLIC	??_C@_0DO@JKMJPIPO@Texture?5?8?$CFs?8?3?5?$CFs?5defined?5it?5as?5@ ; `string'
PUBLIC	??_C@_0CE@NIHPNKEO@No?5available?5slot?5for?5a?5new?5tex@ ; `string'
PUBLIC	??_C@_0CB@FIPLCAAE@Adding?5texture?5?$CFi?5?8?$CFs?8?5camo?5mai@ ; `string'
PUBLIC	??_C@_0BH@MKCPEANE@Adding?5texture?5?$CFi?5?8?$CFs?8@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@3c8efa35
PUBLIC	__real@3e95dbb0
PUBLIC	__real@3e9a5382
PUBLIC	__real@3e9cd40c
PUBLIC	__real@3ea45c86
PUBLIC	__real@3eaef117
PUBLIC	__real@3ebba866
PUBLIC	__real@3ebe9b51
PUBLIC	__real@3ec43c87
PUBLIC	__real@3efccd47
PUBLIC	__real@3f12d1e4
PUBLIC	__real@3f1c6d1a
PUBLIC	__real@3f1e9d93
PUBLIC	__real@3f1f4925
PUBLIC	__real@3f338c5e
PUBLIC	__real@3f37e797
PUBLIC	__real@3f404288
PUBLIC	__real@3f4cb9c9
PUBLIC	__real@3f64fcb9
PUBLIC	__real@3f733d81
PUBLIC	__real@3f7a2a6d
PUBLIC	__real@3f800000
PUBLIC	__real@3f83d461
PUBLIC	__real@3f8fbca8
PUBLIC	__real@3fdaa4c8
PUBLIC	__real@4005c315
PUBLIC	__real@bf980c29
PUBLIC	__real@bfafa819
PUBLIC	__real@bffec48f
PUBLIC	__real@c0164b36
PUBLIC	__real@c0191787
PUBLIC	__real@c02e18e8
PUBLIC	__real@c03aaf9e
PUBLIC	__real@c0476b80
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp____stdio_common_vfscanf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsprintf_s:PROC
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	__imp__atoi:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strchr:PROC
EXTRN	_strrchr:PROC
EXTRN	_strstr:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp___strnicmp:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	__imp__strtok:PROC
EXTRN	__imp___strupr:PROC
EXTRN	__imp__toupper:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_first_directory_file@@YGPAUDIRECTORY_FILE_LIST@@PBD@Z:PROC ; get_first_directory_file
EXTRN	?get_next_directory_file@@YGHPAUDIRECTORY_FILE_LIST@@@Z:PROC ; get_next_directory_file
EXTRN	?get_directory_file_filename@@YGPBDPAUDIRECTORY_FILE_LIST@@@Z:PROC ; get_directory_file_filename
EXTRN	?destroy_directory_file_list@@YGXPAUDIRECTORY_FILE_LIST@@@Z:PROC ; destroy_directory_file_list
EXTRN	?get_directory_file_type@@YG?AW4DIRECTORY_FILE_TYPES@@PAUDIRECTORY_FILE_LIST@@@Z:PROC ; get_directory_file_type
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?file_exist@@YGHPBD@Z:PROC			; file_exist
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?safe_fclose@@YGHPAU_iobuf@@@Z:PROC		; safe_fclose
EXTRN	?get_free_screen@@YGPAUSCREEN@@XZ:PROC		; get_free_screen
EXTRN	?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_user_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?get_screen_pixel_width@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pixel_width
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?get_active_screen@@YGPAUSCREEN@@XZ:PROC	; get_active_screen
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z:PROC ; initialise_set_texture_pixel_lookup_table
EXTRN	?set_texture_pixel@@YGXPAUSCREEN@@HHII@Z:PROC	; set_texture_pixel
EXTRN	?load_psd_file@@YGPAXPBDPAH11@Z:PROC		; load_psd_file
EXTRN	?lock_texture@@YGHPAUSCREEN@@H@Z:PROC		; lock_texture
EXTRN	?unlock_texture@@YGHPAUSCREEN@@@Z:PROC		; unlock_texture
EXTRN	?f3d_palette_create@@YGXPAUtagPALETTEENTRY@@PAPAUIDirectDrawPalette@@@Z:PROC ; f3d_palette_create
EXTRN	?f3d_surface_create@@YGHPAU_DDSURFACEDESC2@@PAPAUIDirectDrawSurface7@@@Z:PROC ; f3d_surface_create
EXTRN	?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z:PROC ; f3d_surface_description
EXTRN	?f3d_surface_palette@@YGXPAUIDirectDrawSurface7@@PAUIDirectDrawPalette@@@Z:PROC ; f3d_surface_palette
EXTRN	?f3d_texture_release@@YGHPAUSCREEN@@@Z:PROC	; f3d_texture_release
EXTRN	?apply_object_3d_reflection_texture_map@@YGXXZ:PROC ; apply_object_3d_reflection_texture_map
EXTRN	?texture_gamma_correction@@YGMH@Z:PROC		; texture_gamma_correction
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	?d3d_square_only_textures@@3HA:DWORD		; d3d_square_only_textures
EXTRN	?d3d_mipmap_textures@@3HA:DWORD			; d3d_mipmap_textures
EXTRN	?d3d_maximum_texture_width@@3HA:DWORD		; d3d_maximum_texture_width
EXTRN	?d3d_maximum_texture_height@@3HA:DWORD		; d3d_maximum_texture_height
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?active_screen_red_mask@@3HA:DWORD		; active_screen_red_mask
EXTRN	?active_screen_red_shift@@3HA:DWORD		; active_screen_red_shift
EXTRN	?active_screen_green_mask@@3HA:DWORD		; active_screen_green_mask
EXTRN	?active_screen_green_shift@@3HA:DWORD		; active_screen_green_shift
EXTRN	?active_screen_blue_mask@@3HA:DWORD		; active_screen_blue_mask
EXTRN	?active_screen_blue_shift@@3HA:DWORD		; active_screen_blue_shift
EXTRN	?active_screen_alpha_mask@@3HA:DWORD		; active_screen_alpha_mask
EXTRN	?active_screen_alpha_shift@@3HA:DWORD		; active_screen_alpha_shift
EXTRN	?set_texture_pixel_lookup_table@@3PAGA:BYTE	; set_texture_pixel_lookup_table
EXTRN	?set_texture_pixel_32bit_lookup_table@@3PAIA:BYTE ; set_texture_pixel_32bit_lookup_table
EXTRN	?texture_colour_nopalette_red_mask@@3HA:DWORD	; texture_colour_nopalette_red_mask
EXTRN	?texture_colour_nopalette_green_mask@@3HA:DWORD	; texture_colour_nopalette_green_mask
EXTRN	?texture_colour_nopalette_blue_mask@@3HA:DWORD	; texture_colour_nopalette_blue_mask
EXTRN	?texture_colour_nopalette_red_shift@@3HA:DWORD	; texture_colour_nopalette_red_shift
EXTRN	?texture_colour_nopalette_green_shift@@3HA:DWORD ; texture_colour_nopalette_green_shift
EXTRN	?texture_colour_nopalette_blue_shift@@3HA:DWORD	; texture_colour_nopalette_blue_shift
EXTRN	?texture_single_alpha_red_mask@@3HA:DWORD	; texture_single_alpha_red_mask
EXTRN	?texture_single_alpha_green_mask@@3HA:DWORD	; texture_single_alpha_green_mask
EXTRN	?texture_single_alpha_blue_mask@@3HA:DWORD	; texture_single_alpha_blue_mask
EXTRN	?texture_single_alpha_alpha_mask@@3HA:DWORD	; texture_single_alpha_alpha_mask
EXTRN	?texture_single_alpha_red_shift@@3HA:DWORD	; texture_single_alpha_red_shift
EXTRN	?texture_single_alpha_green_shift@@3HA:DWORD	; texture_single_alpha_green_shift
EXTRN	?texture_single_alpha_blue_shift@@3HA:DWORD	; texture_single_alpha_blue_shift
EXTRN	?texture_single_alpha_alpha_shift@@3HA:DWORD	; texture_single_alpha_alpha_shift
EXTRN	?texture_multiple_alpha_red_mask@@3HA:DWORD	; texture_multiple_alpha_red_mask
EXTRN	?texture_multiple_alpha_green_mask@@3HA:DWORD	; texture_multiple_alpha_green_mask
EXTRN	?texture_multiple_alpha_blue_mask@@3HA:DWORD	; texture_multiple_alpha_blue_mask
EXTRN	?texture_multiple_alpha_alpha_mask@@3HA:DWORD	; texture_multiple_alpha_alpha_mask
EXTRN	?texture_multiple_alpha_red_shift@@3HA:DWORD	; texture_multiple_alpha_red_shift
EXTRN	?texture_multiple_alpha_green_shift@@3HA:DWORD	; texture_multiple_alpha_green_shift
EXTRN	?texture_multiple_alpha_blue_shift@@3HA:DWORD	; texture_multiple_alpha_blue_shift
EXTRN	?texture_multiple_alpha_alpha_shift@@3HA:DWORD	; texture_multiple_alpha_alpha_shift
EXTRN	?colour_texture_pixel_width@@3HA:DWORD		; colour_texture_pixel_width
EXTRN	?colour_nopalette_texture_pixel_width@@3HA:DWORD ; colour_nopalette_texture_pixel_width
EXTRN	?single_alpha_texture_pixel_width@@3HA:DWORD	; single_alpha_texture_pixel_width
EXTRN	?multiple_alpha_texture_pixel_width@@3HA:DWORD	; multiple_alpha_texture_pixel_width
EXTRN	?texture_formats@@3PAUTEXTURE_FORMAT@@A:BYTE	; texture_formats
EXTRN	?compress_system_textures@@3HA:DWORD		; compress_system_textures
EXTRN	?d3d_paletted_textures_supported@@3HA:DWORD	; d3d_paletted_textures_supported
EXTRN	?command_line_texture_colour@@3HA:DWORD		; command_line_texture_colour
EXTRN	?global_mipmapping@@3HA:DWORD			; global_mipmapping
EXTRN	?global_dynamic_water@@3HA:DWORD		; global_dynamic_water
EXTRN	?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A:DWORD ; current_game_session
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?texture_camoflage@@3HA DD 01H DUP (?)			; texture_camoflage
_BSS	ENDS
;	COMDAT __real@c0476b80
CONST	SEGMENT
__real@c0476b80 DD 0c0476b80r			; -3.11594
CONST	ENDS
;	COMDAT __real@c03aaf9e
CONST	SEGMENT
__real@c03aaf9e DD 0c03aaf9er			; -2.91697
CONST	ENDS
;	COMDAT __real@c02e18e8
CONST	SEGMENT
__real@c02e18e8 DD 0c02e18e8r			; -2.72027
CONST	ENDS
;	COMDAT __real@c0191787
CONST	SEGMENT
__real@c0191787 DD 0c0191787r			; -2.39206
CONST	ENDS
;	COMDAT __real@c0164b36
CONST	SEGMENT
__real@c0164b36 DD 0c0164b36r			; -2.34834
CONST	ENDS
;	COMDAT __real@bffec48f
CONST	SEGMENT
__real@bffec48f DD 0bffec48fr			; -1.99037
CONST	ENDS
;	COMDAT __real@bfafa819
CONST	SEGMENT
__real@bfafa819 DD 0bfafa819r			; -1.37232
CONST	ENDS
;	COMDAT __real@bf980c29
CONST	SEGMENT
__real@bf980c29 DD 0bf980c29r			; -1.18787
CONST	ENDS
;	COMDAT __real@4005c315
CONST	SEGMENT
__real@4005c315 DD 04005c315r			; 2.09003
CONST	ENDS
;	COMDAT __real@3fdaa4c8
CONST	SEGMENT
__real@3fdaa4c8 DD 03fdaa4c8r			; 1.70815
CONST	ENDS
;	COMDAT __real@3f8fbca8
CONST	SEGMENT
__real@3f8fbca8 DD 03f8fbca8r			; 1.12294
CONST	ENDS
;	COMDAT __real@3f83d461
CONST	SEGMENT
__real@3f83d461 DD 03f83d461r			; 1.02992
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7a2a6d
CONST	SEGMENT
__real@3f7a2a6d DD 03f7a2a6dr			; 0.97721
CONST	ENDS
;	COMDAT __real@3f733d81
CONST	SEGMENT
__real@3f733d81 DD 03f733d81r			; 0.950157
CONST	ENDS
;	COMDAT __real@3f64fcb9
CONST	SEGMENT
__real@3f64fcb9 DD 03f64fcb9r			; 0.894481
CONST	ENDS
;	COMDAT __real@3f4cb9c9
CONST	SEGMENT
__real@3f4cb9c9 DD 03f4cb9c9r			; 0.79971
CONST	ENDS
;	COMDAT __real@3f404288
CONST	SEGMENT
__real@3f404288 DD 03f404288r			; 0.751015
CONST	ENDS
;	COMDAT __real@3f37e797
CONST	SEGMENT
__real@3f37e797 DD 03f37e797r			; 0.718378
CONST	ENDS
;	COMDAT __real@3f338c5e
CONST	SEGMENT
__real@3f338c5e DD 03f338c5er			; 0.701361
CONST	ENDS
;	COMDAT __real@3f1f4925
CONST	SEGMENT
__real@3f1f4925 DD 03f1f4925r			; 0.62221
CONST	ENDS
;	COMDAT __real@3f1e9d93
CONST	SEGMENT
__real@3f1e9d93 DD 03f1e9d93r			; 0.619592
CONST	ENDS
;	COMDAT __real@3f1c6d1a
CONST	SEGMENT
__real@3f1c6d1a DD 03f1c6d1ar			; 0.61104
CONST	ENDS
;	COMDAT __real@3f12d1e4
CONST	SEGMENT
__real@3f12d1e4 DD 03f12d1e4r			; 0.573515
CONST	ENDS
;	COMDAT __real@3efccd47
CONST	SEGMENT
__real@3efccd47 DD 03efccd47r			; 0.493754
CONST	ENDS
;	COMDAT __real@3ec43c87
CONST	SEGMENT
__real@3ec43c87 DD 03ec43c87r			; 0.383274
CONST	ENDS
;	COMDAT __real@3ebe9b51
CONST	SEGMENT
__real@3ebe9b51 DD 03ebe9b51r			; 0.372279
CONST	ENDS
;	COMDAT __real@3ebba866
CONST	SEGMENT
__real@3ebba866 DD 03ebba866r			; 0.366519
CONST	ENDS
;	COMDAT __real@3eaef117
CONST	SEGMENT
__real@3eaef117 DD 03eaef117r			; 0.341683
CONST	ENDS
;	COMDAT __real@3ea45c86
CONST	SEGMENT
__real@3ea45c86 DD 03ea45c86r			; 0.321018
CONST	ENDS
;	COMDAT __real@3e9cd40c
CONST	SEGMENT
__real@3e9cd40c DD 03e9cd40cr			; 0.306305
CONST	ENDS
;	COMDAT __real@3e9a5382
CONST	SEGMENT
__real@3e9a5382 DD 03e9a5382r			; 0.301418
CONST	ENDS
;	COMDAT __real@3e95dbb0
CONST	SEGMENT
__real@3e95dbb0 DD 03e95dbb0r			; 0.292692
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MKCPEANE@Adding?5texture?5?$CFi?5?8?$CFs?8@
CONST	SEGMENT
??_C@_0BH@MKCPEANE@Adding?5texture?5?$CFi?5?8?$CFs?8@ DB 'Adding texture '
	DB	'%i ''%s''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FIPLCAAE@Adding?5texture?5?$CFi?5?8?$CFs?8?5camo?5mai@
CONST	SEGMENT
??_C@_0CB@FIPLCAAE@Adding?5texture?5?$CFi?5?8?$CFs?8?5camo?5mai@ DB 'Addi'
	DB	'ng texture %i ''%s'' camo main', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NIHPNKEO@No?5available?5slot?5for?5a?5new?5tex@
CONST	SEGMENT
??_C@_0CE@NIHPNKEO@No?5available?5slot?5for?5a?5new?5tex@ DB 'No availabl'
	DB	'e slot for a new texture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@JKMJPIPO@Texture?5?8?$CFs?8?3?5?$CFs?5defined?5it?5as?5@
CONST	SEGMENT
??_C@_0DO@JKMJPIPO@Texture?5?8?$CFs?8?3?5?$CFs?5defined?5it?5as?5@ DB 'Te'
	DB	'xture ''%s'': %s defined it as camo but %s says it''s non-cam'
	DB	'o', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@LDEBBGMJ@Texture?5?8?$CFs?8?3?5?$CFs?5defined?5it?5as?5@
CONST	SEGMENT
??_C@_0DO@LDEBBGMJ@Texture?5?8?$CFs?8?3?5?$CFs?5defined?5it?5as?5@ DB 'Te'
	DB	'xture ''%s'': %s defined it as non-camo but %s says it''s cam'
	DB	'o', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@ECLCKALA@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
CONST	SEGMENT
??_C@_0EC@ECLCKALA@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ DB '###C'
	DB	'USTOM TEXTURE STARTUP: read_map_info_data: default season: %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@HIHENPAM@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
CONST	SEGMENT
??_C@_0FA@HIHENPAM@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ DB '###C'
	DB	'USTOM TEXTURE STARTUP: read_map_info_data: mapinfo.txt: goura'
	DB	'ud_shading: %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CHAMJNPK@gouraud_shading@
CONST	SEGMENT
??_C@_0BA@CHAMJNPK@gouraud_shading@ DB 'gouraud_shading', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OIOLBAJI@?$CFf?0?$CFf@
CONST	SEGMENT
??_C@_05OIOLBAJI@?$CFf?0?$CFf@ DB '%f,%f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KOOFAJAP@coordinate@
CONST	SEGMENT
??_C@_0L@KOOFAJAP@coordinate@ DB 'coordinate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@MIOGJMEF@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
CONST	SEGMENT
??_C@_0EK@MIOGJMEF@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ DB '###C'
	DB	'USTOM TEXTURE STARTUP: read_map_info_data: mapinfo.txt: dry r'
	DB	'iver: %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09KJAHDPPO@dry?5river@
CONST	SEGMENT
??_C@_09KJAHDPPO@dry?5river@ DB 'dry river', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@CFLDFJAE@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
CONST	SEGMENT
??_C@_0EH@CFLDFJAE@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ DB '###C'
	DB	'USTOM TEXTURE STARTUP: read_map_info_data: mapinfo.txt: seaso'
	DB	'n: %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICAHOPGF@season@
CONST	SEGMENT
??_C@_06ICAHOPGF@season@ DB 'season', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@GKEPHIHF@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
CONST	SEGMENT
??_C@_0EG@GKEPHIHF@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ DB '###C'
	DB	'USTOM TEXTURE STARTUP: read_map_info_data: reading mainfo.txt'
	DB	': %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OIMGKHAN@?$CFs?2mapinfo?4txt@
CONST	SEGMENT
??_C@_0P@OIMGKHAN@?$CFs?2mapinfo?4txt@ DB '%s\mapinfo.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@MPJDGONJ@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
CONST	SEGMENT
??_C@_0EA@MPJDGONJ@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ DB '###C'
	DB	'USTOM TEXTURE STARTUP: read_map_info_data: warzone name: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HDFIGNCC@?$CFs?2camp01?2?$CK?4chc@
CONST	SEGMENT
??_C@_0BA@HDFIGNCC@?$CFs?2camp01?2?$CK?4chc@ DB '%s\camp01\*.chc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@EOLEGPAE@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
CONST	SEGMENT
??_C@_0EC@EOLEGPAE@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@ DB '###C'
	DB	'USTOM TEXTURE STARTUP: read_map_info_data: warzone number: %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IMDDFNNN@?$CFs?2?$CFs?2?$CFs?4dds@
CONST	SEGMENT
??_C@_0N@IMDDFNNN@?$CFs?2?$CFs?2?$CFs?4dds@ DB '%s\%s\%s.dds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KGJIMEMI@?$CFs?2?$CFs?2?$CFs?4tga@
CONST	SEGMENT
??_C@_0N@KGJIMEMI@?$CFs?2?$CFs?2?$CFs?4tga@ DB '%s\%s\%s.tga', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@INKEGKEN@?$CFs?2?$CFs?2?$CFs?4bmp@
CONST	SEGMENT
??_C@_0N@INKEGKEN@?$CFs?2?$CFs?2?$CFs?4bmp@ DB '%s\%s\%s.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KMBGOEGK@?$CFs?$CF03d@
CONST	SEGMENT
??_C@_06KMBGOEGK@?$CFs?$CF03d@ DB '%s%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KNNEIOFN@?$CFs?$CF02d@
CONST	SEGMENT
??_C@_06KNNEIOFN@?$CFs?$CF02d@ DB '%s%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HFADLGCA@water?5?$CFd?5?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_0P@HFADLGCA@water?5?$CFd?5?$CFd?5?$CFs@ DB 'water %d %d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MNBJHN@dynamic?5water?5?$CFs?5?$CFs@
CONST	SEGMENT
??_C@_0BE@MNBJHN@dynamic?5water?5?$CFs?5?$CFs@ DB 'dynamic water %s %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HCBAKPFI@?$CFs?2?$CFs?2waterinfo?4txt@
CONST	SEGMENT
??_C@_0BE@HCBAKPFI@?$CFs?2?$CFs?2waterinfo?4txt@ DB '%s\%s\waterinfo.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FFFDGLBA@TERRAIN?2WATER@
CONST	SEGMENT
??_C@_0O@FFFDGLBA@TERRAIN?2WATER@ DB 'TERRAIN\WATER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JMNNKLPB@Missing?5texture?$CIs?$CJ?$CFs@
CONST	SEGMENT
??_C@_0BF@JMNNKLPB@Missing?5texture?$CIs?$CJ?$CFs@ DB 'Missing texture(s)'
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JFKCMKBC@?6?$CI?$CFd?$CJ?3?5?$CFs?$CFs?5?$CIobject?5?$CFs?$CJ@
CONST	SEGMENT
??_C@_0BI@JFKCMKBC@?6?$CI?$CFd?$CJ?3?5?$CFs?$CFs?5?$CIobject?5?$CFs?$CJ@ DB 0aH
	DB	'(%d): %s%s (object %s)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LHMCKHBI@?$CFs?5is?5not?58?0?524?5or?532?5bit?$CB?5?$CIit?5@
CONST	SEGMENT
??_C@_0CI@LHMCKHBI@?$CFs?5is?5not?58?0?524?5or?532?5bit?$CB?5?$CIit?5@ DB '%'
	DB	's is not 8, 24 or 32 bit! (it is : %d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LCBCPMEC@?$CFs?5is?5not?5uncompressed?5RGB?$CB@
CONST	SEGMENT
??_C@_0BM@LCBCPMEC@?$CFs?5is?5not?5uncompressed?5RGB?$CB@ DB '%s is not u'
	DB	'ncompressed RGB!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MAFOFNLN@CITY@
CONST	SEGMENT
??_C@_04MAFOFNLN@CITY@ DB 'CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KDCDDBFD@?$CFs?2?$CFs?2texture_scales?4txt@
CONST	SEGMENT
??_C@_0BJ@KDCDDBFD@?$CFs?2?$CFs?2texture_scales?4txt@ DB '%s\%s\texture_s'
	DB	'cales.txt', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DPCAAMMH@Nr?5override?5textures?5found?5?$CFd@
CONST	SEGMENT
??_C@_0BO@DPCAAMMH@Nr?5override?5textures?5found?5?$CFd@ DB 'Nr override '
	DB	'textures found %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JKHNIKCB@TEMP@
CONST	SEGMENT
??_C@_04JKHNIKCB@TEMP@ DB 'TEMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BJIHAGOK@?$DN?$DN?$DN?5Looking?5for?5additional?5text@
CONST	SEGMENT
??_C@_0CK@BJIHAGOK@?$DN?$DN?$DN?5Looking?5for?5additional?5text@ DB '=== '
	DB	'Looking for additional textures in %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01IPJKGB@?$CD@
CONST	SEGMENT
??_C@_01IPJKGB@?$CD@ DB '#', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
CONST	SEGMENT
??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@ DB '%[^', 0aH, ']', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@DOGECNFH@?$DN?$DN?$DN?5Searching?5for?5aditional?5pat@
CONST	SEGMENT
??_C@_0ED@DOGECNFH@?$DN?$DN?$DN?5Searching?5for?5aditional?5pat@ DB '=== '
	DB	'Searching for aditional paths in texturedirs.txt of warzone %'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IGJDILFI@?$CFs?2texturedirs?4txt@
CONST	SEGMENT
??_C@_0BD@IGJDILFI@?$CFs?2texturedirs?4txt@ DB '%s\texturedirs.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NJDOENKM@?$DN?$DN?$DN?5loading?5custom?5info?3?5textur@
CONST	SEGMENT
??_C@_0CK@NJDOENKM@?$DN?$DN?$DN?5loading?5custom?5info?3?5textur@ DB '==='
	DB	' loading custom info: texture dir:  %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMAOFJLP@TERRAIN@
CONST	SEGMENT
??_C@_07GMAOFJLP@TERRAIN@ DB 'TERRAIN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JCOEOBPO@ANIMATION@
CONST	SEGMENT
??_C@_09JCOEOBPO@ANIMATION@ DB 'ANIMATION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KIFFIHK@CAMO@
CONST	SEGMENT
??_C@_04KIFFIHK@CAMO@ DB 'CAMO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDPCNACP@COCKPIT@
CONST	SEGMENT
??_C@_07EDPCNACP@COCKPIT@ DB 'COCKPIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EGGHCNEO@GENERAL@
CONST	SEGMENT
??_C@_07EGGHCNEO@GENERAL@ DB 'GENERAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs@
CONST	SEGMENT
??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs@ DB '%s\%s\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BKMCJOOO@Texture?5file?5not?5BMP?0?5TGA?5or?5DD@
CONST	SEGMENT
??_C@_0CF@BKMCJOOO@Texture?5file?5not?5BMP?0?5TGA?5or?5DD@ DB 'Texture fi'
	DB	'le not BMP, TGA or DDS: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFFPHNGG@?4DDS@
CONST	SEGMENT
??_C@_04LFFPHNGG@?4DDS@ DB '.DDS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JPPEOEHD@?4TGA@
CONST	SEGMENT
??_C@_04JPPEOEHD@?4TGA@ DB '.TGA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LEMIEKPG@?4BMP@
CONST	SEGMENT
??_C@_04LEMIEKPG@?4BMP@ DB '.BMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JKKHNCCM@No?5extension?5for?5file?3?5?$CFs@
CONST	SEGMENT
??_C@_0BK@JKKHNCCM@No?5extension?5for?5file?3?5?$CFs@ DB 'No extension fo'
	DB	'r file: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
CONST	SEGMENT
??_C@_05BMGBEOOC@?$CFs?2?$CFs@ DB '%s\%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PHOBPKGE@?$CFs?2?$CFs?2?$CK@
CONST	SEGMENT
??_C@_07PHOBPKGE@?$CFs?2?$CFs?2?$CK@ DB '%s\%s\*', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@
CONST	SEGMENT
??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@ DB '..\COHOKUM\GRAP'
	DB	'HICS\TEXTURES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07JBFDOFDL@terrain@
CONST	SEGMENT
??_C@_07JBFDOFDL@terrain@ DB 'terrain', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNLHEAAG@height@
CONST	SEGMENT
??_C@_06LNLHEAAG@height@ DB 'height', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IGKADHGO@width@
CONST	SEGMENT
??_C@_05IGKADHGO@width@ DB 'width', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PGDKGDCB@graphic@
CONST	SEGMENT
??_C@_07PGDKGDCB@graphic@ DB 'graphic', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_texture_graphic_source_dimensions@@YGXPAUTEXTURE_GRAPHIC@@PAH1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_texture_graphic_source_dimensions@@YGXPAUTEXTURE_GRAPHIC@@PAH1@Z@4JA DD 0c4bH ; `get_texture_graphic_source_dimensions'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DC@FKAPOGBC@Unable?5to?5lock?5screen?5during?5lo@
CONST	SEGMENT
??_C@_0DC@FKAPOGBC@Unable?5to?5lock?5screen?5during?5lo@ DB 'Unable to lo'
	DB	'ck screen during load_texture_graphic', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LMJNBBKK@?$CI?5channels?5?$DN?$DN?53?5?$CJ?5?$HM?$HM?5?$CI?5channels@
CONST	SEGMENT
??_C@_0CH@LMJNBBKK@?$CI?5channels?5?$DN?$DN?53?5?$CJ?5?$HM?$HM?5?$CI?5channels@ DB '('
	DB	' channels == 3 ) || ( channels == 4 )', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z@4JA DD 09ddH ; `create_texture_graphic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@NMJFIGAG@MULTIPLE_ALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@
CONST	SEGMENT
??_C@_0BL@NMJFIGAG@MULTIPLE_ALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@ DB 'MULTIPL'
	DB	'E_ALPHA: %s: %d, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KGFDMHJG@SINGLE_ALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@
CONST	SEGMENT
??_C@_0BJ@KGFDMHJG@SINGLE_ALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@ DB 'SINGLE_AL'
	DB	'PHA: %s: %d, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EGJOCONJ@NOALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@
CONST	SEGMENT
??_C@_0BE@EGJOCONJ@NOALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@ DB 'NOALPHA: %s: %'
	DB	'd, %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DCCAPGAA@TYPE?3?5MULTIPLEALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5@
CONST	SEGMENT
??_C@_0CC@DCCAPGAA@TYPE?3?5MULTIPLEALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5@ DB 'T'
	DB	'YPE: MULTIPLEALPHA ( %d, %d ) %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KHMIPDLH@TYPE?3?5SINGLEALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5?$CFd@
CONST	SEGMENT
??_C@_0CA@KHMIPDLH@TYPE?3?5SINGLEALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5?$CFd@ DB 'T'
	DB	'YPE: SINGLEALPHA ( %d, %d ) %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FPNKEOIF@TYPE?3?5NOALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5?$CFd@
CONST	SEGMENT
??_C@_0BM@FPNKEOIF@TYPE?3?5NOALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5?$CFd@ DB 'T'
	DB	'YPE: NOALPHA ( %d, %d ) %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MFNBDIMN@?9W@
CONST	SEGMENT
??_C@_02MFNBDIMN@?9W@ DB '-W', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GAJKCHBP@CREATED?5TEXTURE?5WITH?5INCORRECT?5@
CONST	SEGMENT
??_C@_0DC@GAJKCHBP@CREATED?5TEXTURE?5WITH?5INCORRECT?5@ DB 'CREATED TEXTU'
	DB	'RE WITH INCORRECT NUMBER OF MIPMAPS!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NJEKICPO@height?5?$DM?$DN?5MAX_TEXTURE_HEIGHT@
CONST	SEGMENT
??_C@_0BN@NJEKICPO@height?5?$DM?$DN?5MAX_TEXTURE_HEIGHT@ DB 'height <= MA'
	DB	'X_TEXTURE_HEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JELHJEEM@width?5?$DM?$DN?5MAX_TEXTURE_WIDTH@
CONST	SEGMENT
??_C@_0BL@JELHJEEM@width?5?$DM?$DN?5MAX_TEXTURE_WIDTH@ DB 'width <= MAX_T'
	DB	'EXTURE_WIDTH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NAJOOMIA@Reading?5in?5?$CFd?5textures@
CONST	SEGMENT
??_C@_0BH@NAJOOMIA@Reading?5in?5?$CFd?5textures@ DB 'Reading in %d textur'
	DB	'es', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@OFFIHPLK@number_of_system_textures?5?$DN?$DN?5TE@
CONST	SEGMENT
??_C@_0EC@OFFIHPLK@number_of_system_textures?5?$DN?$DN?5TE@ DB 'number_of'
	DB	'_system_textures == TEXTURE_INDEX_LAST_DEFAULT_INDEX + 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@LJBBKFJP@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DJ@LJBBKFJP@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\textuser.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EGNNHHML@?$CFs?2textures?4bin@
CONST	SEGMENT
??_C@_0BA@EGNNHHML@?$CFs?2textures?4bin@ DB '%s\textures.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IAOINLOF@?$CFs?2textures?4pal@
CONST	SEGMENT
??_C@_0BA@IAOINLOF@?$CFs?2textures?4pal@ DB '%s\textures.pal', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??load_texturemap_data@@YGHPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??load_texturemap_data@@YGHPBD@Z@4JA DD 0205H ; `load_texturemap_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02KEDOHJFP@?9D@
CONST	SEGMENT
??_C@_02KEDOHJFP@?9D@ DB '-D', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LHMBPIKN@Error?3?5Texture?3?5?$CFs?5has?5incorrec@
CONST	SEGMENT
??_C@_0DA@LHMBPIKN@Error?3?5Texture?3?5?$CFs?5has?5incorrec@ DB 'Error: T'
	DB	'exture: %s has incorrect camoflage name', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?texture_colour_bak@@3HA DD 0ffffffffH			; texture_colour_bak
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?startswith@@YGHPBD0@Z
_TEXT	SEGMENT
tv71 = -68						; size = 4
_string$ = 8						; size = 4
_prefix$ = 12						; size = 4
?startswith@@YGHPBD0@Z PROC				; startswith, COMDAT

; 4451 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4452 : 	return strncmp(string, prefix, strlen(prefix)) == 0;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _prefix$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _prefix$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 08	 mov	 edx, DWORD PTR _string$[ebp]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	85 c0		 test	 eax, eax
  00029	75 09		 jne	 SHORT $LN3@startswith
  0002b	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  00032	eb 07		 jmp	 SHORT $LN4@startswith
$LN3@startswith:
  00034	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN4@startswith:
  0003b	8b 45 bc	 mov	 eax, DWORD PTR tv71[ebp]

; 4453 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?startswith@@YGHPBD0@Z ENDP				; startswith
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?initialize_known_coordinates@@YGXXZ
_TEXT	SEGMENT
tv64 = -68						; size = 4
?initialize_known_coordinates@@YGXXZ PROC		; initialize_known_coordinates, COMDAT

; 4373 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4374 : 	switch (current_map_info.mapnr)

  00009	a1 10 04 00 00	 mov	 eax, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1040
  0000e	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  00011	8b 4d bc	 mov	 ecx, DWORD PTR tv64[ebp]
  00014	83 e9 01	 sub	 ecx, 1
  00017	89 4d bc	 mov	 DWORD PTR tv64[ebp], ecx
  0001a	83 7d bc 1e	 cmp	 DWORD PTR tv64[ebp], 30	; 0000001eH
  0001e	0f 87 7d 02 00
	00		 ja	 $LN2@initialize
  00024	8b 55 bc	 mov	 edx, DWORD PTR tv64[ebp]
  00027	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN23@initialize[edx]
  0002e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN24@initialize[eax*4]
$LN4@initialize:

; 4375 : 	{
; 4376 : 	case 1:  // Thailand
; 4377 : 		current_map_info.latitude = rad(18.393);

  00035	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ea45c86
  0003d	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4378 : 		current_map_info.longitude = rad(97.87);

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fdaa4c8
  0004d	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4379 : 		break;

  00055	e9 47 02 00 00	 jmp	 $LN2@initialize
$LN5@initialize:

; 4380 : 	case 2:  // Cuba
; 4381 : 		current_map_info.latitude = rad(19.577);

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaef117
  00062	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4382 : 		current_map_info.longitude = rad(-78.628);

  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfafa819
  00072	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4383 : 		break;

  0007a	e9 22 02 00 00	 jmp	 $LN2@initialize
$LN6@initialize:

; 4384 : 	case 3:  // Georgia
; 4385 : 		current_map_info.latitude = rad(41.16);

  0007f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f37e797
  00087	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4386 : 		current_map_info.longitude = rad(40.185);

  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f338c5e
  00097	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4387 : 		break;

  0009f	e9 fd 01 00 00	 jmp	 $LN2@initialize
$LN7@initialize:

; 4388 : 	case 4:  // Taiwan
; 4389 : 		current_map_info.latitude = rad(21.96);

  000a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec43c87
  000ac	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4390 : 		current_map_info.longitude = rad(119.75);

  000b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4005c315
  000bc	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4391 : 		break;

  000c4	e9 d8 01 00 00	 jmp	 $LN2@initialize
$LN8@initialize:

; 4392 : 	case 5:  // Lebanon
; 4393 : 		current_map_info.latitude = rad(32.86);

  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f12d1e4
  000d1	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4394 : 		current_map_info.longitude = rad(35.01);

  000d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1c6d1a
  000e1	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4395 : 		break;

  000e9	e9 b3 01 00 00	 jmp	 $LN2@initialize
$LN9@initialize:

; 4396 : 	case 6:  // Yemen
; 4397 : 		current_map_info.latitude = rad(16.77);

  000ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e95dbb0
  000f6	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4398 : 		current_map_info.longitude = rad(43.03);

  000fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f404288
  00106	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4399 : 		break;

  0010e	e9 8e 01 00 00	 jmp	 $LN2@initialize
$LN10@initialize:

; 4400 : 	case 7:  // Alaska
; 4401 : 		current_map_info.latitude = rad(64.34);

  00113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8fbca8
  0011b	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4402 : 		current_map_info.longitude = rad(-167.13);

  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c03aaf9e
  0012b	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4403 : 		break;

  00133	e9 69 01 00 00	 jmp	 $LN2@initialize
$LN11@initialize:

; 4404 : 	case 8:  // Aleutean islands
; 4405 : 		current_map_info.latitude = rad(51.25);

  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f64fcb9
  00140	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4406 : 		current_map_info.longitude = rad(-178.53);

  00148	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0476b80
  00150	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4407 : 		break;

  00158	e9 44 01 00 00	 jmp	 $LN2@initialize
$LN12@initialize:

; 4408 : 	case 9:  // Kuwait
; 4409 : 		current_map_info.latitude = rad(28.29);

  0015d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3efccd47
  00165	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4410 : 		current_map_info.longitude = rad(45.82);

  0016d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4cb9c9
  00175	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4411 : 		break;

  0017d	e9 1f 01 00 00	 jmp	 $LN2@initialize
$LN13@initialize:

; 4412 : 	case 10: // Libya
; 4413 : 		current_map_info.latitude = rad(21.33);

  00182	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebe9b51
  0018a	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4414 : 		current_map_info.longitude = rad(17.27);

  00192	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e9a5382
  0019a	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4415 : 		break;

  001a2	e9 fa 00 00 00	 jmp	 $LN2@initialize
$LN14@initialize:

; 4416 : 	case 11: // Grand Canyon
; 4417 : 		current_map_info.latitude = rad(35.65);

  001a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1f4925
  001af	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4418 : 		current_map_info.longitude = rad(-114.04);

  001b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bffec48f
  001bf	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4419 : 		break;

  001c7	e9 d5 00 00 00	 jmp	 $LN2@initialize

; 4420 : 	case 12: // Mars
; 4421 : 		// not on earth...
; 4422 : 		break;

  001cc	e9 d0 00 00 00	 jmp	 $LN2@initialize
$LN16@initialize:

; 4423 : 	case 13: // Alexander Archipelago
; 4424 : 		current_map_info.latitude = rad(54.44);

  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733d81
  001d9	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4425 : 		current_map_info.longitude = rad(-134.55);

  001e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0164b36
  001e9	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4426 : 		break;

  001f1	e9 ab 00 00 00	 jmp	 $LN2@initialize
$LN17@initialize:

; 4427 : 	case 14: // Skagway
; 4428 : 		current_map_info.latitude = rad(59.01);

  001f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f83d461
  001fe	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4429 : 		current_map_info.longitude = rad(-137.055);

  00206	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0191787
  0020e	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4430 : 		break;

  00216	e9 86 00 00 00	 jmp	 $LN2@initialize
$LN18@initialize:

; 4431 : 	case 15: // Red Sea
; 4432 : 		current_map_info.latitude = rad(21.0);

  0021b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebba866
  00223	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4433 : 		current_map_info.longitude = rad(35.5);

  0022b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1e9d93
  00233	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4434 : 		break;

  0023b	eb 64		 jmp	 SHORT $LN2@initialize
$LN19@initialize:

; 4435 : 	case 17: // Afognak
; 4436 : 		current_map_info.latitude = rad(55.99);

  0023d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7a2a6d
  00245	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4437 : 		current_map_info.longitude = rad(-155.86);

  0024d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c02e18e8
  00255	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4438 : 		break;

  0025d	eb 42		 jmp	 SHORT $LN2@initialize
$LN20@initialize:

; 4439 : 	case 18: // Puerto Rico
; 4440 : 		current_map_info.latitude = rad(17.55);

  0025f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e9cd40c
  00267	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4441 : 		current_map_info.longitude = rad(-68.06);

  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf980c29
  00277	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0

; 4442 : 		break;

  0027f	eb 20		 jmp	 SHORT $LN2@initialize
$LN21@initialize:

; 4443 : 	case 31: // New Grand Canyon
; 4444 : 		current_map_info.latitude = rad(35.65);

  00281	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1f4925
  00289	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4445 : 		current_map_info.longitude = rad(-114.04);

  00291	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bffec48f
  00299	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0
$LN2@initialize:

; 4446 : 		break;
; 4447 : 	}
; 4448 : }

  002a1	5f		 pop	 edi
  002a2	5e		 pop	 esi
  002a3	5b		 pop	 ebx
  002a4	8b e5		 mov	 esp, ebp
  002a6	5d		 pop	 ebp
  002a7	c3		 ret	 0
$LN24@initialize:
  002a8	00 00 00 00	 DD	 $LN4@initialize
  002ac	00 00 00 00	 DD	 $LN5@initialize
  002b0	00 00 00 00	 DD	 $LN6@initialize
  002b4	00 00 00 00	 DD	 $LN7@initialize
  002b8	00 00 00 00	 DD	 $LN8@initialize
  002bc	00 00 00 00	 DD	 $LN9@initialize
  002c0	00 00 00 00	 DD	 $LN10@initialize
  002c4	00 00 00 00	 DD	 $LN11@initialize
  002c8	00 00 00 00	 DD	 $LN12@initialize
  002cc	00 00 00 00	 DD	 $LN13@initialize
  002d0	00 00 00 00	 DD	 $LN14@initialize
  002d4	00 00 00 00	 DD	 $LN16@initialize
  002d8	00 00 00 00	 DD	 $LN17@initialize
  002dc	00 00 00 00	 DD	 $LN18@initialize
  002e0	00 00 00 00	 DD	 $LN19@initialize
  002e4	00 00 00 00	 DD	 $LN20@initialize
  002e8	00 00 00 00	 DD	 $LN21@initialize
  002ec	00 00 00 00	 DD	 $LN2@initialize
$LN23@initialize:
  002f0	00		 DB	 0
  002f1	01		 DB	 1
  002f2	02		 DB	 2
  002f3	03		 DB	 3
  002f4	04		 DB	 4
  002f5	05		 DB	 5
  002f6	06		 DB	 6
  002f7	07		 DB	 7
  002f8	08		 DB	 8
  002f9	09		 DB	 9
  002fa	0a		 DB	 10			; 0000000aH
  002fb	11		 DB	 17			; 00000011H
  002fc	0b		 DB	 11			; 0000000bH
  002fd	0c		 DB	 12			; 0000000cH
  002fe	0d		 DB	 13			; 0000000dH
  002ff	11		 DB	 17			; 00000011H
  00300	0e		 DB	 14			; 0000000eH
  00301	0f		 DB	 15			; 0000000fH
  00302	11		 DB	 17			; 00000011H
  00303	11		 DB	 17			; 00000011H
  00304	11		 DB	 17			; 00000011H
  00305	11		 DB	 17			; 00000011H
  00306	11		 DB	 17			; 00000011H
  00307	11		 DB	 17			; 00000011H
  00308	11		 DB	 17			; 00000011H
  00309	11		 DB	 17			; 00000011H
  0030a	11		 DB	 17			; 00000011H
  0030b	11		 DB	 17			; 00000011H
  0030c	11		 DB	 17			; 00000011H
  0030d	11		 DB	 17			; 00000011H
  0030e	10		 DB	 16			; 00000010H
?initialize_known_coordinates@@YGXXZ ENDP		; initialize_known_coordinates
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YGABHABH0@Z PROC				; std::max<int>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@max
  00021	eb 4a		 jmp	 SHORT $LN2@max
$LN7@max:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 0e 15 00 00	 push	 5390			; 0000150eH
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@max
  00049	cc		 int	 3
$LN12@max:
  0004a	6a 00		 push	 0
  0004c	68 0e 15 00 00	 push	 5390			; 0000150eH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@max
$LN2@max:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@max:

; 5395 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$max@H@std@@YGABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?match_system_texture_name@@YGHPBDPAW4CAMO_TYPE@@@Z
_TEXT	SEGMENT
tv72 = -204						; size = 4
_index$ = -136						; size = 4
_ptr$ = -132						; size = 4
_real_name$ = -128					; size = 128
_name$ = 8						; size = 4
_camo$ = 12						; size = 4
?match_system_texture_name@@YGHPBDPAW4CAMO_TYPE@@@Z PROC ; match_system_texture_name, COMDAT

; 2257 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2258 : 	char
; 2259 : 		real_name[128];
; 2260 : 
; 2261 : 	char
; 2262 : 		*ptr;
; 2263 : 
; 2264 : 	int
; 2265 : 		index;
; 2266 : 
; 2267 : 	ptr = real_name;

  0000c	8d 45 80	 lea	 eax, DWORD PTR _real_name$[ebp]
  0000f	89 85 7c ff ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax
$LN2@match_syst:

; 2268 : 	// convert to uppercase and strip filename extention
; 2269 : 	while ( ( *name != '\0' ) && ( *name != '.' ) )

  00015	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00018	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0001b	85 c9		 test	 ecx, ecx
  0001d	74 49		 je	 SHORT $LN3@match_syst
  0001f	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00022	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00025	83 f9 2e	 cmp	 ecx, 46			; 0000002eH
  00028	74 3e		 je	 SHORT $LN3@match_syst

; 2270 : 	{
; 2271 : 		*ptr++ = toupper ( *name++ );

  0002a	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0002d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00030	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00036	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0003c	52		 push	 edx
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00043	83 c4 04	 add	 esp, 4
  00046	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _ptr$[ebp]
  0004c	88 01		 mov	 BYTE PTR [ecx], al
  0004e	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _ptr$[ebp]
  00054	83 c2 01	 add	 edx, 1
  00057	89 95 7c ff ff
	ff		 mov	 DWORD PTR _ptr$[ebp], edx
  0005d	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00060	83 c0 01	 add	 eax, 1
  00063	89 45 08	 mov	 DWORD PTR _name$[ebp], eax

; 2272 : 	}

  00066	eb ad		 jmp	 SHORT $LN2@match_syst
$LN3@match_syst:

; 2273 : 	*ptr = '\0';

  00068	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  0006e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2274 : 
; 2275 : 	*camo = CAMO_REGULAR;

  00071	8b 45 0c	 mov	 eax, DWORD PTR _camo$[ebp]
  00074	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2276 : 
; 2277 : 	if ( ptr - real_name > TEXTSUFFIX_SIZE )

  0007a	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  00080	8d 4d 80	 lea	 ecx, DWORD PTR _real_name$[ebp]
  00083	2b c1		 sub	 eax, ecx
  00085	83 f8 02	 cmp	 eax, 2
  00088	7e 69		 jle	 SHORT $LN4@match_syst

; 2278 : 	{
; 2279 : 		ptr -= TEXTSUFFIX_SIZE;

  0008a	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  00090	83 e8 02	 sub	 eax, 2
  00093	89 85 7c ff ff
	ff		 mov	 DWORD PTR _ptr$[ebp], eax

; 2280 : 		if ( !memcmp ( ptr, TEXTSUFFIX_DESERT, TEXTSUFFIX_SIZE ) )

  00099	6a 02		 push	 2
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_02KEDOHJFP@?9D@
  000a0	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _memcmp
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  000af	85 c0		 test	 eax, eax
  000b1	75 14		 jne	 SHORT $LN5@match_syst

; 2281 : 		{
; 2282 : 			//check for -D
; 2283 : 			*ptr = '\0';

  000b3	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  000b9	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2284 : 			*camo = CAMO_DESERT;

  000bc	8b 45 0c	 mov	 eax, DWORD PTR _camo$[ebp]
  000bf	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  000c5	eb 2c		 jmp	 SHORT $LN4@match_syst
$LN5@match_syst:

; 2285 : 		}
; 2286 : 		else if ( !memcmp ( ptr, TEXTSUFFIX_WINTER, TEXTSUFFIX_SIZE ) )

  000c7	6a 02		 push	 2
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_02MFNBDIMN@?9W@
  000ce	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _memcmp
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH
  000dd	85 c0		 test	 eax, eax
  000df	75 12		 jne	 SHORT $LN4@match_syst

; 2287 : 		{
; 2288 : 			//VJ 051011 add winter textures
; 2289 : 			//check for -W
; 2290 : 			*ptr = '\0';

  000e1	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$[ebp]
  000e7	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2291 : 			*camo = CAMO_WINTER;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR _camo$[ebp]
  000ed	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN4@match_syst:

; 2292 : 		}
; 2293 : 	}
; 2294 : 
; 2295 : 	index = get_system_texture_index ( real_name );

  000f3	8d 45 80	 lea	 eax, DWORD PTR _real_name$[ebp]
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ?get_system_texture_index@@YGHPBD@Z ; get_system_texture_index
  000fc	89 85 78 ff ff
	ff		 mov	 DWORD PTR _index$[ebp], eax

; 2296 : 	if ( index < 0 )

  00102	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _index$[ebp], 0
  00109	7d 05		 jge	 SHORT $LN8@match_syst

; 2297 : 	{
; 2298 : 		return -1;

  0010b	83 c8 ff	 or	 eax, -1
  0010e	eb 40		 jmp	 SHORT $LN1@match_syst
$LN8@match_syst:

; 2299 : 	}
; 2300 : 
; 2301 : 	if ( *camo == CAMO_DESERT && system_texture_info[index].flags.number_of_camoflage_textures )

  00110	8b 45 0c	 mov	 eax, DWORD PTR _camo$[ebp]
  00113	83 38 02	 cmp	 DWORD PTR [eax], 2
  00116	75 21		 jne	 SHORT $LN9@match_syst
  00118	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _index$[ebp]
  0011e	0f b6 0c c5 02
	00 00 00	 movzx	 ecx, BYTE PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+2]
  00126	85 c9		 test	 ecx, ecx
  00128	74 0f		 je	 SHORT $LN9@match_syst

; 2302 : 	{
; 2303 : 		index++;

  0012a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _index$[ebp]
  00130	83 c0 01	 add	 eax, 1
  00133	89 85 78 ff ff
	ff		 mov	 DWORD PTR _index$[ebp], eax
$LN9@match_syst:

; 2304 : 	}
; 2305 : 
; 2306 : 	#if DEBUG_MODULE
; 2307 : 	debug_log("Texture file %s %i %i\n", real_name, index, *camo);
; 2308 : 	#endif
; 2309 : 
; 2310 : 	system_textures_referenced[index] = TRUE;

  00139	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _index$[ebp]
  0013f	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?system_textures_referenced@@3PAHA[eax*4], 1

; 2311 : 	return index;

  0014a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _index$[ebp]
$LN1@match_syst:

; 2312 : }

  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c2 08 00	 ret	 8
?match_system_texture_name@@YGHPBDPAW4CAMO_TYPE@@@Z ENDP ; match_system_texture_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?real_set_texture_camoflage@@YGXH@Z
_TEXT	SEGMENT
_texture$1 = -16					; size = 4
_index$2 = -12						; size = 4
_camo$3 = -8						; size = 4
_count$ = -4						; size = 4
_set$ = 8						; size = 4
?real_set_texture_camoflage@@YGXH@Z PROC		; real_set_texture_camoflage, COMDAT

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 366  : 	int
; 367  : 		count;
; 368  : 
; 369  : #ifdef DEBUG
; 370  : 	for ( count = 0; count < number_of_system_textures; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@real_set_t
$LN2@real_set_t:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@real_set_t:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00024	7d 7e		 jge	 SHORT $LN3@real_set_t

; 371  : 	{
; 372  : 		int
; 373  : 			camo;
; 374  : 		camo = system_texture_info[count].flags.number_of_camoflage_textures; 

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	0f b6 0c c5 02
	00 00 00	 movzx	 ecx, BYTE PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+2]
  00031	89 4d f8	 mov	 DWORD PTR _camo$3[ebp], ecx

; 375  : 		if ( camo )

  00034	83 7d f8 00	 cmp	 DWORD PTR _camo$3[ebp], 0
  00038	74 65		 je	 SHORT $LN11@real_set_t

; 376  : 		{
; 377  : 			int
; 378  : 				index;
; 379  : 			for ( index = 1; index <= camo; index++ )

  0003a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _index$2[ebp], 1
  00041	eb 09		 jmp	 SHORT $LN7@real_set_t
$LN5@real_set_t:
  00043	8b 45 f4	 mov	 eax, DWORD PTR _index$2[ebp]
  00046	83 c0 01	 add	 eax, 1
  00049	89 45 f4	 mov	 DWORD PTR _index$2[ebp], eax
$LN7@real_set_t:
  0004c	8b 45 f4	 mov	 eax, DWORD PTR _index$2[ebp]
  0004f	3b 45 f8	 cmp	 eax, DWORD PTR _camo$3[ebp]
  00052	7f 4b		 jg	 SHORT $LN11@real_set_t

; 380  : 			{
; 381  : 				if ( !system_texture_info[count + index].flags.camoflage_texture || system_texture_info[count + index].flags.camoflage_index != index )

  00054	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00057	03 45 f4	 add	 eax, DWORD PTR _index$2[ebp]
  0005a	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  00062	66 c1 e9 07	 shr	 cx, 7
  00066	66 83 e1 01	 and	 cx, 1
  0006a	0f b7 d1	 movzx	 edx, cx
  0006d	85 d2		 test	 edx, edx
  0006f	74 13		 je	 SHORT $LN13@real_set_t
  00071	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00074	03 45 f4	 add	 eax, DWORD PTR _index$2[ebp]
  00077	0f b6 0c c5 03
	00 00 00	 movzx	 ecx, BYTE PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+3]
  0007f	3b 4d f4	 cmp	 ecx, DWORD PTR _index$2[ebp]
  00082	74 19		 je	 SHORT $LN12@real_set_t
$LN13@real_set_t:

; 382  : 				{
; 383  : 					debug_log ( "Error: Texture: %s has incorrect camoflage name", system_texture_names[count] );

  00084	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00087	c1 e0 07	 shl	 eax, 7
  0008a	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@LHMBPIKN@Error?3?5Texture?3?5?$CFs?5has?5incorrec@
  00095	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0009a	83 c4 08	 add	 esp, 8
$LN12@real_set_t:

; 384  : 				}
; 385  : 			}

  0009d	eb a4		 jmp	 SHORT $LN5@real_set_t
$LN11@real_set_t:

; 386  : 		}
; 387  : 	}

  0009f	e9 6e ff ff ff	 jmp	 $LN2@real_set_t
$LN3@real_set_t:

; 388  : #endif
; 389  : 
; 390  : 	for ( count = 0; count < number_of_system_textures; count++ )

  000a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000ab	eb 09		 jmp	 SHORT $LN10@real_set_t
$LN8@real_set_t:
  000ad	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000b0	83 c0 01	 add	 eax, 1
  000b3	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN10@real_set_t:
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000b9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  000bf	7d 34		 jge	 SHORT $LN1@real_set_t

; 391  : 	{
; 392  : 		if ( system_texture_info[count].flags.number_of_camoflage_textures )

  000c1	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000c4	0f b6 0c c5 02
	00 00 00	 movzx	 ecx, BYTE PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+2]
  000cc	85 c9		 test	 ecx, ecx
  000ce	74 23		 je	 SHORT $LN14@real_set_t

; 393  : 		{
; 394  : 			screen
; 395  : 				*texture;
; 396  : 			texture = system_texture_info[count + set].texture_screen;

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000d3	03 45 08	 add	 eax, DWORD PTR _set$[ebp]
  000d6	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4]
  000dd	89 4d f0	 mov	 DWORD PTR _texture$1[ebp], ecx

; 397  : 			if ( texture )

  000e0	83 7d f0 00	 cmp	 DWORD PTR _texture$1[ebp], 0
  000e4	74 0d		 je	 SHORT $LN14@real_set_t

; 398  : 			{
; 399  : 				system_textures[count] = texture;

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000e9	8b 4d f0	 mov	 ecx, DWORD PTR _texture$1[ebp]
  000ec	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], ecx
$LN14@real_set_t:

; 400  : 			}
; 401  : 		}
; 402  : 	}

  000f3	eb b8		 jmp	 SHORT $LN8@real_set_t
$LN1@real_set_t:

; 403  : }

  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 04 00	 ret	 4
?real_set_texture_camoflage@@YGXH@Z ENDP		; real_set_texture_camoflage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?initialize_terrain_texture_scales@@YGXPBD@Z
_TEXT	SEGMENT
_i$1 = -408						; size = 4
_count$2 = -404						; size = 4
_index$3 = -400						; size = 4
_c$4 = -396						; size = 4
_p$5 = -392						; size = 4
_buf$6 = -388						; size = 256
_fin$7 = -132						; size = 4
_filename$ = -128					; size = 128
_mapname$ = 8						; size = 4
?initialize_terrain_texture_scales@@YGXPBD@Z PROC	; initialize_terrain_texture_scales, COMDAT

; 3504 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 01 00
	00		 sub	 esp, 472		; 000001d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3505 : 	char filename[128];
; 3506 : 
; 3507 : 	sprintf (filename, "%s\\%s\\texture_scales.txt", TEXTURE_OVERRIDE_DIRECTORY, mapname);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _mapname$[ebp]
  0000f	50		 push	 eax
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KDCDDBFD@?$CFs?2?$CFs?2texture_scales?4txt@
  0001a	8d 4d 80	 lea	 ecx, DWORD PTR _filename$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _sprintf
  00023	83 c4 10	 add	 esp, 16			; 00000010H

; 3508 : 
; 3509 : 	if ( file_exist ( filename ) )

  00026	8d 45 80	 lea	 eax, DWORD PTR _filename$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 87 02 00
	00		 je	 $LN1@initialize

; 3510 : 	{
; 3511 : 		FILE *fin;
; 3512 : 		char buf[256];
; 3513 : 		char *p;
; 3514 : 		int c, index, count;
; 3515 : 
; 3516 : 		fin = fopen(filename,"r");

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  0003c	8d 45 80	 lea	 eax, DWORD PTR _filename$[ebp]
  0003f	50		 push	 eax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00046	83 c4 08	 add	 esp, 8
  00049	89 85 7c ff ff
	ff		 mov	 DWORD PTR _fin$7[ebp], eax

; 3517 : 
; 3518 : 		// skip comment lines
; 3519 : 		fscanf(fin,"%[^\n]\n",buf);

  0004f	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$6[ebp]
  00055	50		 push	 eax
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  0005b	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _fin$7[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 _fscanf
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@initialize:

; 3520 : 		while (buf[0] == '#')

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	6b c8 00	 imul	 ecx, eax, 0
  00072	0f b6 94 0d 7c
	fe ff ff	 movzx	 edx, BYTE PTR _buf$6[ebp+ecx]
  0007a	83 fa 23	 cmp	 edx, 35			; 00000023H
  0007d	75 1d		 jne	 SHORT $LN3@initialize

; 3521 : 				fscanf(fin,"%[^\n]\n",buf);

  0007f	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$6[ebp]
  00085	50		 push	 eax
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  0008b	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _fin$7[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _fscanf
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	eb ce		 jmp	 SHORT $LN2@initialize
$LN3@initialize:

; 3522 : 
; 3523 : 		count = 0;

  0009c	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$2[ebp], 0
$LN4@initialize:

; 3524 : 		while (count < 64 &&
; 3525 : 			strchr(buf,'=') && (strstr(buf,"TERRAIN") || strstr(buf,"CITY")))

  000a6	83 bd 6c fe ff
	ff 40		 cmp	 DWORD PTR _count$2[ebp], 64 ; 00000040H
  000ad	0f 8d fb 01 00
	00		 jge	 $LN5@initialize
  000b3	6a 3d		 push	 61			; 0000003dH
  000b5	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$6[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?strchr@@YAPADQADH@Z	; strchr
  000c1	83 c4 08	 add	 esp, 8
  000c4	85 c0		 test	 eax, eax
  000c6	0f 84 e2 01 00
	00		 je	 $LN5@initialize
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_07GMAOFJLP@TERRAIN@
  000d1	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$6[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?strstr@@YAPADQADQBD@Z	; strstr
  000dd	83 c4 08	 add	 esp, 8
  000e0	85 c0		 test	 eax, eax
  000e2	75 1c		 jne	 SHORT $LN14@initialize
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_04MAFOFNLN@CITY@
  000e9	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$6[ebp]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?strstr@@YAPADQADQBD@Z	; strstr
  000f5	83 c4 08	 add	 esp, 8
  000f8	85 c0		 test	 eax, eax
  000fa	0f 84 ae 01 00
	00		 je	 $LN5@initialize
$LN14@initialize:

; 3526 : 		{
; 3527 : 			int i;
; 3528 : 			p = strtok(buf,"=");

  00100	68 00 00 00 00	 push	 OFFSET ??_C@_01NEMOKFLO@?$DN@
  00105	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$6[ebp]
  0010b	50		 push	 eax
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  00112	83 c4 08	 add	 esp, 8
  00115	89 85 78 fe ff
	ff		 mov	 DWORD PTR _p$5[ebp], eax

; 3529 : 
; 3530 : 			//scan name
; 3531 : 			if (p)

  0011b	83 bd 78 fe ff
	ff 00		 cmp	 DWORD PTR _p$5[ebp], 0
  00122	0f 84 13 01 00
	00		 je	 $LN15@initialize

; 3532 : 			{
; 3533 : 				//strip leading and trailing spaces
; 3534 : 				i = strlen(p)-1;

  00128	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _p$5[ebp]
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 _strlen
  00134	83 c4 04	 add	 esp, 4
  00137	83 e8 01	 sub	 eax, 1
  0013a	89 85 68 fe ff
	ff		 mov	 DWORD PTR _i$1[ebp], eax
$LN6@initialize:

; 3535 : 
; 3536 : 				while (i > 0 && (p[i] == ' ' || p[i] == '\t'))

  00140	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR _i$1[ebp], 0
  00147	7e 39		 jle	 SHORT $LN7@initialize
  00149	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _p$5[ebp]
  0014f	03 85 68 fe ff
	ff		 add	 eax, DWORD PTR _i$1[ebp]
  00155	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00158	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0015b	74 14		 je	 SHORT $LN16@initialize
  0015d	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _p$5[ebp]
  00163	03 85 68 fe ff
	ff		 add	 eax, DWORD PTR _i$1[ebp]
  00169	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0016c	83 f9 09	 cmp	 ecx, 9
  0016f	75 11		 jne	 SHORT $LN7@initialize
$LN16@initialize:

; 3537 : 					i--;

  00171	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _i$1[ebp]
  00177	83 e8 01	 sub	 eax, 1
  0017a	89 85 68 fe ff
	ff		 mov	 DWORD PTR _i$1[ebp], eax
  00180	eb be		 jmp	 SHORT $LN6@initialize
$LN7@initialize:

; 3538 : 				p[i+1]='\0';

  00182	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _p$5[ebp]
  00188	03 85 68 fe ff
	ff		 add	 eax, DWORD PTR _i$1[ebp]
  0018e	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$LN8@initialize:

; 3539 : 				while (p[0] == ' ')

  00192	b8 01 00 00 00	 mov	 eax, 1
  00197	6b c8 00	 imul	 ecx, eax, 0
  0019a	8b 95 78 fe ff
	ff		 mov	 edx, DWORD PTR _p$5[ebp]
  001a0	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  001a4	83 f8 20	 cmp	 eax, 32			; 00000020H
  001a7	75 11		 jne	 SHORT $LN9@initialize

; 3540 : 					p++;

  001a9	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _p$5[ebp]
  001af	83 c0 01	 add	 eax, 1
  001b2	89 85 78 fe ff
	ff		 mov	 DWORD PTR _p$5[ebp], eax
  001b8	eb d8		 jmp	 SHORT $LN8@initialize
$LN9@initialize:

; 3541 : 				index = -1;

  001ba	c7 85 70 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _index$3[ebp], -1

; 3542 : 
; 3543 : 				for ( c = 0; c < number_of_system_textures; c++ )

  001c4	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _c$4[ebp], 0
  001ce	eb 0f		 jmp	 SHORT $LN12@initialize
$LN10@initialize:
  001d0	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _c$4[ebp]
  001d6	83 c0 01	 add	 eax, 1
  001d9	89 85 74 fe ff
	ff		 mov	 DWORD PTR _c$4[ebp], eax
$LN12@initialize:
  001df	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _c$4[ebp]
  001e5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  001eb	7d 33		 jge	 SHORT $LN11@initialize

; 3544 : 				{
; 3545 : 					if ( strcmp ( system_texture_names[c], p ) == 0 )

  001ed	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _p$5[ebp]
  001f3	50		 push	 eax
  001f4	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR _c$4[ebp]
  001fa	c1 e1 07	 shl	 ecx, 7
  001fd	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00203	51		 push	 ecx
  00204	e8 00 00 00 00	 call	 _strcmp
  00209	83 c4 08	 add	 esp, 8
  0020c	85 c0		 test	 eax, eax
  0020e	75 0e		 jne	 SHORT $LN17@initialize

; 3546 : 					{
; 3547 : 						index = c;

  00210	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _c$4[ebp]
  00216	89 85 70 fe ff
	ff		 mov	 DWORD PTR _index$3[ebp], eax

; 3548 : 						break;

  0021c	eb 02		 jmp	 SHORT $LN11@initialize
$LN17@initialize:

; 3549 : 					}
; 3550 : 				}

  0021e	eb b0		 jmp	 SHORT $LN10@initialize
$LN11@initialize:

; 3551 : 				current_map_info.texture_override_scales[count][0] = index;

  00220	b8 04 00 00 00	 mov	 eax, 4
  00225	6b c8 00	 imul	 ecx, eax, 0
  00228	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _count$2[ebp]
  0022e	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _index$3[ebp]
  00234	89 84 d1 18 04
	00 00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx+edx*8+1048], eax
$LN15@initialize:

; 3552 : 			}
; 3553 : 
; 3554 : 			//scan scale
; 3555 : 			p = strtok(NULL,"#");

  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_01IPJKGB@?$CD@
  00240	6a 00		 push	 0
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  00248	83 c4 08	 add	 esp, 8
  0024b	89 85 78 fe ff
	ff		 mov	 DWORD PTR _p$5[ebp], eax

; 3556 : 			if (p)

  00251	83 bd 78 fe ff
	ff 00		 cmp	 DWORD PTR _p$5[ebp], 0
  00258	74 25		 je	 SHORT $LN18@initialize

; 3557 : 			{
; 3558 : 				current_map_info.texture_override_scales[count][1] = atoi(p);

  0025a	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _p$5[ebp]
  00260	50		 push	 eax
  00261	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00267	83 c4 04	 add	 esp, 4
  0026a	b9 04 00 00 00	 mov	 ecx, 4
  0026f	c1 e1 00	 shl	 ecx, 0
  00272	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _count$2[ebp]
  00278	89 84 d1 18 04
	00 00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx+edx*8+1048], eax
$LN18@initialize:

; 3559 : 			}
; 3560 : 
; 3561 : 			fscanf(fin,"%[^\n]\n",buf);

  0027f	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$6[ebp]
  00285	50		 push	 eax
  00286	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  0028b	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _fin$7[ebp]
  00291	51		 push	 ecx
  00292	e8 00 00 00 00	 call	 _fscanf
  00297	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3562 : 			// next line
; 3563 : 
; 3564 : 			count++;

  0029a	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _count$2[ebp]
  002a0	83 c0 01	 add	 eax, 1
  002a3	89 85 6c fe ff
	ff		 mov	 DWORD PTR _count$2[ebp], eax

; 3565 : 		}

  002a9	e9 f8 fd ff ff	 jmp	 $LN4@initialize
$LN5@initialize:

; 3566 : 
; 3567 : 		fclose(fin);

  002ae	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _fin$7[ebp]
  002b4	50		 push	 eax
  002b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  002bb	83 c4 04	 add	 esp, 4
$LN1@initialize:

; 3568 : 	}
; 3569 : }

  002be	5f		 pop	 edi
  002bf	5e		 pop	 esi
  002c0	5b		 pop	 ebx
  002c1	8b e5		 mov	 esp, ebp
  002c3	5d		 pop	 ebp
  002c4	c2 04 00	 ret	 4
?initialize_terrain_texture_scales@@YGXPBD@Z ENDP	; initialize_terrain_texture_scales
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?load_texture_water@@YGXXZ
_TEXT	SEGMENT
tv395 = -484						; size = 4
_rivernr$1 = -416					; size = 4
_q$ = -412						; size = 4
_p$ = -408						; size = 4
_filename$ = -404					; size = 128
_buf$ = -276						; size = 256
_count$ = -20						; size = 4
_placenr$ = -16						; size = 4
_i$ = -12						; size = 4
_override_screen$ = -8					; size = 4
_fin$ = -4						; size = 4
?load_texture_water@@YGXXZ PROC				; load_texture_water, COMDAT

; 3705 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 01 00
	00		 sub	 esp, 484		; 000001e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3706 : 	FILE *fin;
; 3707 : 
; 3708 : 	screen
; 3709 : 		*override_screen;
; 3710 : 
; 3711 : 	int
; 3712 : 		i, placenr, count;
; 3713 : 
; 3714 : 	char
; 3715 : 		buf[256],
; 3716 : 		filename[128];
; 3717 : 
; 3718 : 	char *p, *q;
; 3719 : 
; 3720 : 
; 3721 : 	sprintf(filename,"%s\\%s\\waterinfo.txt", TEXTURE_OVERRIDE_DIRECTORY,TEXTURE_OVERRIDE_DIRECTORY_WATER );

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FFFDGLBA@TERRAIN?2WATER@
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HCBAKPFI@?$CFs?2?$CFs?2waterinfo?4txt@
  0001b	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _sprintf
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 3722 : 	//VJ 050820 added file checking to prevent crash
; 3723 : 	if ( !file_exist ( filename ) ){

  0002a	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00036	85 c0		 test	 eax, eax
  00038	75 0f		 jne	 SHORT $LN23@load_textu

; 3724 : 		global_dynamic_water	= 0;

  0003a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?global_dynamic_water@@3HA, 0 ; global_dynamic_water

; 3725 : 		return;

  00044	e9 34 08 00 00	 jmp	 $LN1@load_textu
$LN23@load_textu:

; 3726 : 	}
; 3727 : 
; 3728 : 	fin = fopen(filename,"r");

  00049	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  0004e	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0005b	83 c4 08	 add	 esp, 8
  0005e	89 45 fc	 mov	 DWORD PTR _fin$[ebp], eax

; 3729 : 	if (!fin){

  00061	83 7d fc 00	 cmp	 DWORD PTR _fin$[ebp], 0
  00065	75 0f		 jne	 SHORT $LN24@load_textu

; 3730 : 		global_dynamic_water	= 0;

  00067	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?global_dynamic_water@@3HA, 0 ; global_dynamic_water

; 3731 : 		return;

  00071	e9 07 08 00 00	 jmp	 $LN1@load_textu
$LN24@load_textu:

; 3732 : 	}
; 3733 : 
; 3734 : 	// analyse riverinfo.txt
; 3735 : 	// read comments
; 3736 : 	fscanf(fin,"%[^\n]\n",buf);

  00076	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0007c	50		 push	 eax
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _fin$[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 _fscanf
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@load_textu:

; 3737 : 	while (buf[0] == '#')

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	6b c8 00	 imul	 ecx, eax, 0
  00096	0f b6 94 0d ec
	fe ff ff	 movzx	 edx, BYTE PTR _buf$[ebp+ecx]
  0009e	83 fa 23	 cmp	 edx, 35			; 00000023H
  000a1	75 1a		 jne	 SHORT $LN3@load_textu

; 3738 : 		fscanf(fin,"%[^\n]\n",buf);

  000a3	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000a9	50		 push	 eax
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _fin$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _fscanf
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	eb d1		 jmp	 SHORT $LN2@load_textu
$LN3@load_textu:

; 3739 : 
; 3740 : 	for (i = 0; i < 3; i++)

  000bd	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000c4	eb 09		 jmp	 SHORT $LN6@load_textu
$LN4@load_textu:
  000c6	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000c9	83 c0 01	 add	 eax, 1
  000cc	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN6@load_textu:
  000cf	83 7d f4 03	 cmp	 DWORD PTR _i$[ebp], 3
  000d3	0f 8d ad 03 00
	00		 jge	 $LN5@load_textu

; 3741 : 	{
; 3742 : 		p = strtok(buf,"=");

  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_01NEMOKFLO@?$DN@
  000de	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000e4	50		 push	 eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  000eb	83 c4 08	 add	 esp, 8
  000ee	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3743 : 		p = strtok(NULL,",");

  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  000f9	6a 00		 push	 0
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  00101	83 c4 08	 add	 esp, 8
  00104	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3744 : 		if (p){

  0010a	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR _p$[ebp], 0
  00111	74 70		 je	 SHORT $LN25@load_textu
$LN7@load_textu:

; 3745 : 			while (*p == ' ') p++;

  00113	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  00119	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0011c	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0011f	75 11		 jne	 SHORT $LN8@load_textu
  00121	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  00127	83 c0 01	 add	 eax, 1
  0012a	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax
  00130	eb e1		 jmp	 SHORT $LN7@load_textu
$LN8@load_textu:

; 3746 : 				q = p;

  00132	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  00138	89 85 64 fe ff
	ff		 mov	 DWORD PTR _q$[ebp], eax
$LN9@load_textu:

; 3747 : 			while (*q != ' ') q++;

  0013e	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _q$[ebp]
  00144	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00147	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0014a	74 11		 je	 SHORT $LN10@load_textu
  0014c	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _q$[ebp]
  00152	83 c0 01	 add	 eax, 1
  00155	89 85 64 fe ff
	ff		 mov	 DWORD PTR _q$[ebp], eax
  0015b	eb e1		 jmp	 SHORT $LN9@load_textu
$LN10@load_textu:

; 3748 : 				*q = '\0';

  0015d	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _q$[ebp]
  00163	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3749 : 			strcpy(current_map_info.water_info[i].name_top, p);

  00166	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  0016c	50		 push	 eax
  0016d	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  00174	81 c1 20 00 00
	00		 add	 ecx, OFFSET ?current_map_info@@3UCUSTOM_MAP_INFO@@A+32
  0017a	51		 push	 ecx
  0017b	e8 00 00 00 00	 call	 _strcpy
  00180	83 c4 08	 add	 esp, 8
$LN25@load_textu:

; 3750 : 		}
; 3751 : 		p = strtok(NULL,",");

  00183	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  00188	6a 00		 push	 0
  0018a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  00190	83 c4 08	 add	 esp, 8
  00193	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3752 : 		if (p)

  00199	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR _p$[ebp], 0
  001a0	74 1d		 je	 SHORT $LN26@load_textu

; 3753 : 			current_map_info.water_info[i].delay = atoi(p);

  001a2	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  001a8	50		 push	 eax
  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  001af	83 c4 04	 add	 esp, 4
  001b2	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  001b9	89 81 08 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx+8], eax
$LN26@load_textu:

; 3754 : 		p = strtok(NULL,"#");

  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_01IPJKGB@?$CD@
  001c4	6a 00		 push	 0
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  001cc	83 c4 08	 add	 esp, 8
  001cf	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3755 : 		if (p)

  001d5	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR _p$[ebp], 0
  001dc	74 1d		 je	 SHORT $LN27@load_textu

; 3756 : 			current_map_info.water_info[i].scale_top = atoi(p);

  001de	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  001e4	50		 push	 eax
  001e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  001eb	83 c4 04	 add	 esp, 4
  001ee	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  001f5	89 81 0c 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx+12], eax
$LN27@load_textu:

; 3757 : 
; 3758 : 		fscanf(fin,"%[^\n]\n",buf);

  001fb	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00201	50		 push	 eax
  00202	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  00207	8b 4d fc	 mov	 ecx, DWORD PTR _fin$[ebp]
  0020a	51		 push	 ecx
  0020b	e8 00 00 00 00	 call	 _fscanf
  00210	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3759 : 		p = strtok(buf,"=");

  00213	68 00 00 00 00	 push	 OFFSET ??_C@_01NEMOKFLO@?$DN@
  00218	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0021e	50		 push	 eax
  0021f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  00225	83 c4 08	 add	 esp, 8
  00228	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3760 : 		p = strtok(NULL,",");

  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  00233	6a 00		 push	 0
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  0023b	83 c4 08	 add	 esp, 8
  0023e	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3761 : 		if (p){

  00244	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR _p$[ebp], 0
  0024b	74 70		 je	 SHORT $LN28@load_textu
$LN11@load_textu:

; 3762 : 			while (*p == ' ') p++;

  0024d	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  00253	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00256	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00259	75 11		 jne	 SHORT $LN12@load_textu
  0025b	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  00261	83 c0 01	 add	 eax, 1
  00264	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax
  0026a	eb e1		 jmp	 SHORT $LN11@load_textu
$LN12@load_textu:

; 3763 : 				q = p;

  0026c	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  00272	89 85 64 fe ff
	ff		 mov	 DWORD PTR _q$[ebp], eax
$LN13@load_textu:

; 3764 : 			while (*q != ' ') q++;

  00278	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _q$[ebp]
  0027e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00281	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00284	74 11		 je	 SHORT $LN14@load_textu
  00286	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _q$[ebp]
  0028c	83 c0 01	 add	 eax, 1
  0028f	89 85 64 fe ff
	ff		 mov	 DWORD PTR _q$[ebp], eax
  00295	eb e1		 jmp	 SHORT $LN13@load_textu
$LN14@load_textu:

; 3765 : 				*q = '\0';

  00297	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _q$[ebp]
  0029d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3766 : 			strcpy(current_map_info.water_info[i].name_bottom, p);

  002a0	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  002a6	50		 push	 eax
  002a7	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  002ae	81 c1 a0 00 00
	00		 add	 ecx, OFFSET ?current_map_info@@3UCUSTOM_MAP_INFO@@A+160
  002b4	51		 push	 ecx
  002b5	e8 00 00 00 00	 call	 _strcpy
  002ba	83 c4 08	 add	 esp, 8
$LN28@load_textu:

; 3767 : 		}
; 3768 : 		p = strtok(NULL,",");

  002bd	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  002c2	6a 00		 push	 0
  002c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  002ca	83 c4 08	 add	 esp, 8
  002cd	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3769 : 		if (p)

  002d3	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR _p$[ebp], 0
  002da	74 1d		 je	 SHORT $LN29@load_textu

; 3770 : 			current_map_info.water_info[i].type = atoi(p);

  002dc	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  002e2	50		 push	 eax
  002e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  002e9	83 c4 04	 add	 esp, 4
  002ec	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  002f3	89 81 18 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx+24], eax
$LN29@load_textu:

; 3771 : 		p = strtok(NULL,",");

  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  002fe	6a 00		 push	 0
  00300	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  00306	83 c4 08	 add	 esp, 8
  00309	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3772 : 		if (p)

  0030f	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR _p$[ebp], 0
  00316	74 1d		 je	 SHORT $LN30@load_textu

; 3773 : 			current_map_info.water_info[i].start = atoi(p);

  00318	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  0031e	50		 push	 eax
  0031f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00325	83 c4 04	 add	 esp, 4
  00328	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  0032f	89 81 00 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx], eax
$LN30@load_textu:

; 3774 : 		p = strtok(NULL,",");

  00335	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  0033a	6a 00		 push	 0
  0033c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  00342	83 c4 08	 add	 esp, 8
  00345	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3775 : 		if (p)

  0034b	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR _p$[ebp], 0
  00352	74 1d		 je	 SHORT $LN31@load_textu

; 3776 : 			current_map_info.water_info[i].number = atoi(p);

  00354	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  0035a	50		 push	 eax
  0035b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00361	83 c4 04	 add	 esp, 4
  00364	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  0036b	89 81 04 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx+4], eax
$LN31@load_textu:

; 3777 : 		p = strtok(NULL,",");

  00371	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  00376	6a 00		 push	 0
  00378	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  0037e	83 c4 08	 add	 esp, 8
  00381	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3778 : 		if (p)

  00387	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR _p$[ebp], 0
  0038e	74 1d		 je	 SHORT $LN32@load_textu

; 3779 : 			current_map_info.water_info[i].alpha = atoi(p);

  00390	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  00396	50		 push	 eax
  00397	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0039d	83 c4 04	 add	 esp, 4
  003a0	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  003a7	89 81 14 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx+20], eax
$LN32@load_textu:

; 3780 : 		// tune according to warzone, lebanon is reference
; 3781 : 		if (i == 0 && current_map_info.mapnr == 3)

  003ad	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  003b1	75 26		 jne	 SHORT $LN33@load_textu
  003b3	83 3d 10 04 00
	00 03		 cmp	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1040, 3
  003ba	75 1d		 jne	 SHORT $LN33@load_textu

; 3782 : 			current_map_info.water_info[i].alpha -= 50;

  003bc	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  003c3	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+20]
  003c9	83 e9 32	 sub	 ecx, 50			; 00000032H
  003cc	69 55 f4 20 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 288
  003d3	89 8a 14 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[edx+20], ecx
$LN33@load_textu:

; 3783 : 		if (i == 0 && current_map_info.mapnr == 4)

  003d9	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  003dd	75 26		 jne	 SHORT $LN34@load_textu
  003df	83 3d 10 04 00
	00 04		 cmp	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1040, 4
  003e6	75 1d		 jne	 SHORT $LN34@load_textu

; 3784 : 			current_map_info.water_info[i].alpha -= 30;

  003e8	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  003ef	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+20]
  003f5	83 e9 1e	 sub	 ecx, 30			; 0000001eH
  003f8	69 55 f4 20 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 288
  003ff	89 8a 14 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[edx+20], ecx
$LN34@load_textu:

; 3785 : 		p = strtok(NULL,"#");

  00405	68 00 00 00 00	 push	 OFFSET ??_C@_01IPJKGB@?$CD@
  0040a	6a 00		 push	 0
  0040c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  00412	83 c4 08	 add	 esp, 8
  00415	89 85 68 fe ff
	ff		 mov	 DWORD PTR _p$[ebp], eax

; 3786 : 		if (p)

  0041b	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR _p$[ebp], 0
  00422	74 1d		 je	 SHORT $LN35@load_textu

; 3787 : 			current_map_info.water_info[i].scale_bottom = atoi(p);

  00424	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _p$[ebp]
  0042a	50		 push	 eax
  0042b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00431	83 c4 04	 add	 esp, 4
  00434	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  0043b	89 81 10 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx+16], eax
$LN35@load_textu:

; 3788 : 
; 3789 : 		fscanf(fin,"%[^\n]\n",buf);

  00441	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00447	50		 push	 eax
  00448	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  0044d	8b 4d fc	 mov	 ecx, DWORD PTR _fin$[ebp]
  00450	51		 push	 ecx
  00451	e8 00 00 00 00	 call	 _fscanf
  00456	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3790 : 
; 3791 : 		debug_log("dynamic water %s %s",

  00459	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00460	05 a0 00 00 00	 add	 eax, OFFSET ?current_map_info@@3UCUSTOM_MAP_INFO@@A+160
  00465	50		 push	 eax
  00466	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  0046d	81 c1 20 00 00
	00		 add	 ecx, OFFSET ?current_map_info@@3UCUSTOM_MAP_INFO@@A+32
  00473	51		 push	 ecx
  00474	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MNBJHN@dynamic?5water?5?$CFs?5?$CFs@
  00479	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0047e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3792 : 		current_map_info.water_info[i].name_top,
; 3793 : 		current_map_info.water_info[i].name_bottom);
; 3794 : 	}

  00481	e9 40 fc ff ff	 jmp	 $LN4@load_textu
$LN5@load_textu:

; 3795 : 
; 3796 : 	fclose(fin);

  00486	8b 45 fc	 mov	 eax, DWORD PTR _fin$[ebp]
  00489	50		 push	 eax
  0048a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00490	83 c4 04	 add	 esp, 4

; 3797 : 
; 3798 : 
; 3799 : 	//rivertextures are put behind last texture in system_texture_info array
; 3800 : 	// order is river, sea, reservoir (0, 1, 2)
; 3801 : 
; 3802 : 	placenr = number_of_system_textures;

  00493	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00498	89 45 f0	 mov	 DWORD PTR _placenr$[ebp], eax

; 3803 : 
; 3804 : 	////// load textures
; 3805 : 
; 3806 : 	for (i = 0; i < 3; i++)

  0049b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004a2	eb 09		 jmp	 SHORT $LN17@load_textu
$LN15@load_textu:
  004a4	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  004a7	83 c0 01	 add	 eax, 1
  004aa	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN17@load_textu:
  004ad	83 7d f4 03	 cmp	 DWORD PTR _i$[ebp], 3
  004b1	0f 8d be 03 00
	00		 jge	 $LN16@load_textu

; 3807 : 	{
; 3808 : 		int rivernr = 0;

  004b7	c7 85 60 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _rivernr$1[ebp], 0

; 3809 : 		current_map_info.water_info[i].placenr = placenr;

  004c1	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  004c8	8b 4d f0	 mov	 ecx, DWORD PTR _placenr$[ebp]
  004cb	89 88 1c 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+28], ecx

; 3810 : 		// read the bottom texture
; 3811 : 		sprintf(filename,"%s\\%s\\%s", TEXTURE_OVERRIDE_DIRECTORY, TEXTURE_OVERRIDE_DIRECTORY_WATER, current_map_info.water_info[i].name_top);

  004d1	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  004d8	05 20 00 00 00	 add	 eax, OFFSET ?current_map_info@@3UCUSTOM_MAP_INFO@@A+32
  004dd	50		 push	 eax
  004de	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FFFDGLBA@TERRAIN?2WATER@
  004e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@
  004e8	68 00 00 00 00	 push	 OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs@
  004ed	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  004f3	51		 push	 ecx
  004f4	e8 00 00 00 00	 call	 _sprintf
  004f9	83 c4 14	 add	 esp, 20			; 00000014H

; 3812 : 
; 3813 : 		debug_log("water %d %d %s",placenr, i, filename);

  004fc	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00502	50		 push	 eax
  00503	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00506	51		 push	 ecx
  00507	8b 55 f0	 mov	 edx, DWORD PTR _placenr$[ebp]
  0050a	52		 push	 edx
  0050b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HFADLGCA@water?5?$CFd?5?$CFd?5?$CFs@
  00510	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00515	83 c4 10	 add	 esp, 16			; 00000010H

; 3814 : 
; 3815 : 		override_screen = load_dds_file_screen(filename, 0, 1.0);

  00518	51		 push	 ecx
  00519	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00521	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00526	6a 00		 push	 0
  00528	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0052e	50		 push	 eax
  0052f	e8 00 00 00 00	 call	 ?load_dds_file_screen@@YGPAUSCREEN@@PBDHM@Z ; load_dds_file_screen
  00534	89 45 f8	 mov	 DWORD PTR _override_screen$[ebp], eax

; 3816 : 
; 3817 : 		count = placenr;

  00537	8b 45 f0	 mov	 eax, DWORD PTR _placenr$[ebp]
  0053a	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax

; 3818 : 		system_texture_info[count].flags.contains_alpha = 1;

  0053d	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00540	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  00548	66 83 c9 04	 or	 cx, 4
  0054c	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  0054f	66 89 0c d5 00
	00 00 00	 mov	 WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[edx*8], cx

; 3819 : 		system_texture_info[count].flags.vertically_inverted = 1;

  00557	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0055a	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  00562	66 83 c9 02	 or	 cx, 2
  00566	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  00569	66 89 0c d5 00
	00 00 00	 mov	 WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[edx*8], cx

; 3820 : 		system_texture_info[count].flags.mipmap_enabled = 1;

  00571	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00574	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  0057c	66 83 c9 20	 or	 cx, 32			; 00000020H
  00580	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  00583	66 89 0c d5 00
	00 00 00	 mov	 WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[edx*8], cx

; 3821 : 		system_texture_info[count].flags.wrapped = 1;

  0058b	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0058e	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  00596	66 83 c9 10	 or	 cx, 16			; 00000010H
  0059a	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  0059d	66 89 0c d5 00
	00 00 00	 mov	 WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[edx*8], cx

; 3822 : 
; 3823 : 		system_textures[count] = override_screen;

  005a5	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  005a8	8b 4d f8	 mov	 ecx, DWORD PTR _override_screen$[ebp]
  005ab	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], ecx

; 3824 : 		system_texture_info[count].texture_screen = override_screen;

  005b2	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  005b5	8b 4d f8	 mov	 ecx, DWORD PTR _override_screen$[ebp]
  005b8	89 0c c5 04 00
	00 00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4], ecx

; 3825 : 
; 3826 : 		// load dynamic texture series
; 3827 : 		rivernr = current_map_info.water_info[i].start;

  005bf	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  005c6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax]
  005cc	89 8d 60 fe ff
	ff		 mov	 DWORD PTR _rivernr$1[ebp], ecx

; 3828 : 		for ( count = placenr+1; count < placenr+1+current_map_info.water_info[i].number; count++ )

  005d2	8b 45 f0	 mov	 eax, DWORD PTR _placenr$[ebp]
  005d5	83 c0 01	 add	 eax, 1
  005d8	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
  005db	eb 09		 jmp	 SHORT $LN20@load_textu
$LN18@load_textu:
  005dd	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  005e0	83 c0 01	 add	 eax, 1
  005e3	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN20@load_textu:
  005e6	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  005ed	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+4]
  005f3	8b 55 f0	 mov	 edx, DWORD PTR _placenr$[ebp]
  005f6	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  005fa	39 45 ec	 cmp	 DWORD PTR _count$[ebp], eax
  005fd	0f 8d 56 02 00
	00		 jge	 $LN19@load_textu

; 3829 : 		{
; 3830 : 			system_texture_info[count].flags.contains_alpha = 1;

  00603	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00606	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  0060e	66 83 c9 04	 or	 cx, 4
  00612	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  00615	66 89 0c d5 00
	00 00 00	 mov	 WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[edx*8], cx

; 3831 : 			system_texture_info[count].flags.vertically_inverted = 1;

  0061d	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00620	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  00628	66 83 c9 02	 or	 cx, 2
  0062c	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  0062f	66 89 0c d5 00
	00 00 00	 mov	 WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[edx*8], cx

; 3832 : 			system_texture_info[count].flags.mipmap_enabled = 1;

  00637	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0063a	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  00642	66 83 c9 20	 or	 cx, 32			; 00000020H
  00646	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  00649	66 89 0c d5 00
	00 00 00	 mov	 WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[edx*8], cx

; 3833 : 			system_texture_info[count].flags.wrapped = 1;

  00651	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00654	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  0065c	66 83 c9 10	 or	 cx, 16			; 00000010H
  00660	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  00663	66 89 0c d5 00
	00 00 00	 mov	 WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[edx*8], cx

; 3834 : 
; 3835 : 			system_texture_info[count].texture_screen = NULL;

  0066b	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0066e	c7 04 c5 04 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4], 0

; 3836 : 
; 3837 : 			memset ( system_texture_names[count], 0, 128 );

  00679	68 80 00 00 00	 push	 128			; 00000080H
  0067e	6a 00		 push	 0
  00680	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00683	c1 e0 07	 shl	 eax, 7
  00686	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  0068b	50		 push	 eax
  0068c	e8 00 00 00 00	 call	 _memset
  00691	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3838 : 
; 3839 : 			if (current_map_info.water_info[i].number < 100)

  00694	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  0069b	83 b8 04 00 00
	00 64		 cmp	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+4], 100 ; 00000064H
  006a2	7d 31		 jge	 SHORT $LN36@load_textu

; 3840 : 				sprintf(system_texture_names[count],"%s%02d",current_map_info.water_info[i].name_bottom,rivernr);

  006a4	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR _rivernr$1[ebp]
  006aa	50		 push	 eax
  006ab	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  006b2	81 c1 a0 00 00
	00		 add	 ecx, OFFSET ?current_map_info@@3UCUSTOM_MAP_INFO@@A+160
  006b8	51		 push	 ecx
  006b9	68 00 00 00 00	 push	 OFFSET ??_C@_06KNNEIOFN@?$CFs?$CF02d@
  006be	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  006c1	c1 e2 07	 shl	 edx, 7
  006c4	81 c2 00 00 00
	00		 add	 edx, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  006ca	52		 push	 edx
  006cb	e8 00 00 00 00	 call	 _sprintf
  006d0	83 c4 10	 add	 esp, 16			; 00000010H

; 3841 : 			else

  006d3	eb 2f		 jmp	 SHORT $LN37@load_textu
$LN36@load_textu:

; 3842 : 				sprintf(system_texture_names[count],"%s%03d",current_map_info.water_info[i].name_bottom,rivernr);

  006d5	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR _rivernr$1[ebp]
  006db	50		 push	 eax
  006dc	69 4d f4 20 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 288
  006e3	81 c1 a0 00 00
	00		 add	 ecx, OFFSET ?current_map_info@@3UCUSTOM_MAP_INFO@@A+160
  006e9	51		 push	 ecx
  006ea	68 00 00 00 00	 push	 OFFSET ??_C@_06KMBGOEGK@?$CFs?$CF03d@
  006ef	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  006f2	c1 e2 07	 shl	 edx, 7
  006f5	81 c2 00 00 00
	00		 add	 edx, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  006fb	52		 push	 edx
  006fc	e8 00 00 00 00	 call	 _sprintf
  00701	83 c4 10	 add	 esp, 16			; 00000010H
$LN37@load_textu:

; 3843 : 
; 3844 : 			//debug_log("water %d %d %d %s",count, i, rivernr, system_texture_names[count]);
; 3845 : 
; 3846 : 			rivernr++;

  00704	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR _rivernr$1[ebp]
  0070a	83 c0 01	 add	 eax, 1
  0070d	89 85 60 fe ff
	ff		 mov	 DWORD PTR _rivernr$1[ebp], eax

; 3847 : 
; 3848 : 			switch ( current_map_info.water_info[i].type )

  00713	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  0071a	8b 88 18 00 00
	00		 mov	 ecx, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+24]
  00720	89 8d 1c fe ff
	ff		 mov	 DWORD PTR tv395[ebp], ecx
  00726	83 bd 1c fe ff
	ff 01		 cmp	 DWORD PTR tv395[ebp], 1
  0072d	74 1b		 je	 SHORT $LN38@load_textu
  0072f	83 bd 1c fe ff
	ff 02		 cmp	 DWORD PTR tv395[ebp], 2
  00736	0f 84 a3 00 00
	00		 je	 $LN40@load_textu
  0073c	83 bd 1c fe ff
	ff 03		 cmp	 DWORD PTR tv395[ebp], 3
  00743	74 43		 je	 SHORT $LN39@load_textu
  00745	e9 ea 00 00 00	 jmp	 $LN21@load_textu
$LN38@load_textu:

; 3849 : 			{
; 3850 : 			case TYPE_BMP:
; 3851 : 			{
; 3852 : 				sprintf(filename,"%s\\%s\\%s.bmp", TEXTURE_OVERRIDE_DIRECTORY,TEXTURE_OVERRIDE_DIRECTORY_WATER,system_texture_names[count] );

  0074a	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0074d	c1 e0 07	 shl	 eax, 7
  00750	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00755	50		 push	 eax
  00756	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FFFDGLBA@TERRAIN?2WATER@
  0075b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@
  00760	68 00 00 00 00	 push	 OFFSET ??_C@_0N@INKEGKEN@?$CFs?2?$CFs?2?$CFs?4bmp@
  00765	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  0076b	51		 push	 ecx
  0076c	e8 00 00 00 00	 call	 _sprintf
  00771	83 c4 14	 add	 esp, 20			; 00000014H

; 3853 : 				override_screen = load_bmp_file_screen(filename);

  00774	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0077a	50		 push	 eax
  0077b	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  00780	89 45 f8	 mov	 DWORD PTR _override_screen$[ebp], eax

; 3854 : 				break;

  00783	e9 ac 00 00 00	 jmp	 $LN21@load_textu
$LN39@load_textu:

; 3855 : 			}
; 3856 : 			case TYPE_TGA:
; 3857 : 			{
; 3858 : 				sprintf(filename,"%s\\%s\\%s.tga", TEXTURE_OVERRIDE_DIRECTORY,TEXTURE_OVERRIDE_DIRECTORY_WATER,system_texture_names[count] );

  00788	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0078b	c1 e0 07	 shl	 eax, 7
  0078e	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00793	50		 push	 eax
  00794	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FFFDGLBA@TERRAIN?2WATER@
  00799	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@
  0079e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KGJIMEMI@?$CFs?2?$CFs?2?$CFs?4tga@
  007a3	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  007a9	51		 push	 ecx
  007aa	e8 00 00 00 00	 call	 _sprintf
  007af	83 c4 14	 add	 esp, 20			; 00000014H

; 3859 : 				override_screen = load_tga_file_screen(filename, current_map_info.water_info[i].alpha, 1.0);

  007b2	51		 push	 ecx
  007b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c0	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  007c7	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+20]
  007cd	51		 push	 ecx
  007ce	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR _filename$[ebp]
  007d4	52		 push	 edx
  007d5	e8 00 00 00 00	 call	 ?load_tga_file_screen@@YGPAUSCREEN@@PBDHM@Z ; load_tga_file_screen
  007da	89 45 f8	 mov	 DWORD PTR _override_screen$[ebp], eax

; 3860 : 				break;

  007dd	eb 55		 jmp	 SHORT $LN21@load_textu
$LN40@load_textu:

; 3861 : 			}
; 3862 : 			case TYPE_DDS:
; 3863 : 			{
; 3864 : 				sprintf(filename,"%s\\%s\\%s.dds", TEXTURE_OVERRIDE_DIRECTORY,TEXTURE_OVERRIDE_DIRECTORY_WATER,system_texture_names[count] );

  007df	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  007e2	c1 e0 07	 shl	 eax, 7
  007e5	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  007ea	50		 push	 eax
  007eb	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FFFDGLBA@TERRAIN?2WATER@
  007f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@
  007f5	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IMDDFNNN@?$CFs?2?$CFs?2?$CFs?4dds@
  007fa	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  00800	51		 push	 ecx
  00801	e8 00 00 00 00	 call	 _sprintf
  00806	83 c4 14	 add	 esp, 20			; 00000014H

; 3865 : 				override_screen = load_dds_file_screen(filename, current_map_info.water_info[i].alpha, 1.0);

  00809	51		 push	 ecx
  0080a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00812	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00817	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  0081e	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+20]
  00824	51		 push	 ecx
  00825	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR _filename$[ebp]
  0082b	52		 push	 edx
  0082c	e8 00 00 00 00	 call	 ?load_dds_file_screen@@YGPAUSCREEN@@PBDHM@Z ; load_dds_file_screen
  00831	89 45 f8	 mov	 DWORD PTR _override_screen$[ebp], eax
$LN21@load_textu:

; 3866 : 				break;
; 3867 : 			}
; 3868 : 			}
; 3869 : 
; 3870 : 			if (override_screen) {

  00834	83 7d f8 00	 cmp	 DWORD PTR _override_screen$[ebp], 0
  00838	74 1a		 je	 SHORT $LN41@load_textu

; 3871 : 				system_textures[count] = override_screen;

  0083a	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0083d	8b 4d f8	 mov	 ecx, DWORD PTR _override_screen$[ebp]
  00840	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], ecx

; 3872 : 				system_texture_info[count].texture_screen = override_screen;

  00847	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0084a	8b 4d f8	 mov	 ecx, DWORD PTR _override_screen$[ebp]
  0084d	89 0c c5 04 00
	00 00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4], ecx
$LN41@load_textu:

; 3873 : 			}
; 3874 : 		}

  00854	e9 84 fd ff ff	 jmp	 $LN18@load_textu
$LN19@load_textu:

; 3875 : 		placenr += current_map_info.water_info[i].number+1;

  00859	69 45 f4 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00860	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+4]
  00866	8b 55 f0	 mov	 edx, DWORD PTR _placenr$[ebp]
  00869	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  0086d	89 45 f0	 mov	 DWORD PTR _placenr$[ebp], eax

; 3876 : 	}

  00870	e9 2f fc ff ff	 jmp	 $LN15@load_textu
$LN16@load_textu:

; 3877 : 
; 3878 : 	//VJ 010620 add total number of textures
; 3879 : 	current_map_info.last_texture = placenr;

  00875	8b 45 f0	 mov	 eax, DWORD PTR _placenr$[ebp]
  00878	a3 18 06 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1560, eax
$LN1@load_textu:

; 3880 : 
; 3881 : }

  0087d	5f		 pop	 edi
  0087e	5e		 pop	 esi
  0087f	5b		 pop	 ebx
  00880	8b e5		 mov	 esp, ebp
  00882	5d		 pop	 ebp
  00883	c3		 ret	 0
?load_texture_water@@YGXXZ ENDP				; load_texture_water
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?load_tga_file_screen@@YGPAUSCREEN@@PBDHM@Z
_TEXT	SEGMENT
tv197 = -760						; size = 4
tv186 = -760						; size = 4
$T1 = -756						; size = 4
$T2 = -752						; size = 4
$T3 = -748						; size = 4
$T4 = -744						; size = 4
$T5 = -740						; size = 4
$T6 = -736						; size = 4
_tmp$7 = -601						; size = 1
_offset2$8 = -600					; size = 4
_offset1$9 = -596					; size = 4
_tmp$10 = -589						; size = 1
_offset$11 = -588					; size = 4
_size$12 = -584						; size = 4
_buf$13 = -580						; size = 512
_count$14 = -65						; size = 1
_offset$15 = -64					; size = 4
_override_screen$ = -60					; size = 4
_y$ = -56						; size = 4
_x$ = -52						; size = 4
_buffer_size$ = -48					; size = 4
_nrbytes$ = -44						; size = 4
_height$ = -40						; size = 4
_width$ = -36						; size = 4
_buffer$ = -32						; size = 4
_header$ = -28						; size = 18
_type$ = -8						; size = 4
_fp$ = -4						; size = 4
_full_override_texture_filename$ = 8			; size = 4
_step$ = 12						; size = 4
_gamma_adjustment$ = 16					; size = 4
?load_tga_file_screen@@YGPAUSCREEN@@PBDHM@Z PROC	; load_tga_file_screen, COMDAT

; 4021 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 02 00
	00		 sub	 esp, 760		; 000002f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4022 : 		FILE
; 4023 : 			*fp;
; 4024 : 
; 4025 : 		texture_map_types
; 4026 : 			type;
; 4027 : 
; 4028 : 		unsigned char
; 4029 : 			header[18],
; 4030 : 			*buffer;
; 4031 : 
; 4032 : 		int
; 4033 : 			width,
; 4034 : 			height,
; 4035 : 			nrbytes,
; 4036 : 			buffer_size,
; 4037 : 			x,
; 4038 : 			y;
; 4039 : 
; 4040 : 		screen
; 4041 : 			*override_screen;
; 4042 : 
; 4043 : 		fp = safe_fopen ( full_override_texture_filename, "rb" );

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00011	8b 45 08	 mov	 eax, DWORD PTR _full_override_texture_filename$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  0001a	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 4044 : 
; 4045 : 		fread ( header, sizeof ( header ), 1, fp );

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00020	50		 push	 eax
  00021	6a 01		 push	 1
  00023	6a 12		 push	 18			; 00000012H
  00025	8d 4d e4	 lea	 ecx, DWORD PTR _header$[ebp]
  00028	51		 push	 ecx
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 4046 : 
; 4047 : 		if ( header[1] || ( header[2] != 2 && header[2] != 10 ) || ( header[16] != 24 && header[16] != 32 ) || ( header[17] & 0xD0 ) )

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	c1 e0 00	 shl	 eax, 0
  0003a	0f b6 4c 05 e4	 movzx	 ecx, BYTE PTR _header$[ebp+eax]
  0003f	85 c9		 test	 ecx, ecx
  00041	75 5b		 jne	 SHORT $LN22@load_tga_f
  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	d1 e0		 shl	 eax, 1
  0004a	0f b6 4c 05 e4	 movzx	 ecx, BYTE PTR _header$[ebp+eax]
  0004f	83 f9 02	 cmp	 ecx, 2
  00052	74 11		 je	 SHORT $LN23@load_tga_f
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	d1 e0		 shl	 eax, 1
  0005b	0f b6 4c 05 e4	 movzx	 ecx, BYTE PTR _header$[ebp+eax]
  00060	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00063	75 39		 jne	 SHORT $LN22@load_tga_f
$LN23@load_tga_f:
  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	c1 e0 04	 shl	 eax, 4
  0006d	0f b6 4c 05 e4	 movzx	 ecx, BYTE PTR _header$[ebp+eax]
  00072	83 f9 18	 cmp	 ecx, 24			; 00000018H
  00075	74 12		 je	 SHORT $LN24@load_tga_f
  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	c1 e0 04	 shl	 eax, 4
  0007f	0f b6 4c 05 e4	 movzx	 ecx, BYTE PTR _header$[ebp+eax]
  00084	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00087	75 15		 jne	 SHORT $LN22@load_tga_f
$LN24@load_tga_f:
  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	6b c8 11	 imul	 ecx, eax, 17
  00091	0f b6 54 0d e4	 movzx	 edx, BYTE PTR _header$[ebp+ecx]
  00096	81 e2 d0 00 00
	00		 and	 edx, 208		; 000000d0H
  0009c	74 10		 je	 SHORT $LN21@load_tga_f
$LN22@load_tga_f:

; 4048 : 		{
; 4049 : 			safe_fclose ( fp );

  0009e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 4050 : 			return NULL;

  000a7	33 c0		 xor	 eax, eax
  000a9	e9 79 04 00 00	 jmp	 $LN1@load_tga_f
$LN21@load_tga_f:

; 4051 : 		}
; 4052 : 		fseek ( fp, header[0], SEEK_CUR );

  000ae	6a 01		 push	 1
  000b0	b8 01 00 00 00	 mov	 eax, 1
  000b5	6b c8 00	 imul	 ecx, eax, 0
  000b8	0f b6 54 0d e4	 movzx	 edx, BYTE PTR _header$[ebp+ecx]
  000bd	52		 push	 edx
  000be	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000c1	50		 push	 eax
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4053 : 
; 4054 : 		if ( header[16] == 32 )

  000cb	b8 01 00 00 00	 mov	 eax, 1
  000d0	c1 e0 04	 shl	 eax, 4
  000d3	0f b6 4c 05 e4	 movzx	 ecx, BYTE PTR _header$[ebp+eax]
  000d8	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000db	75 10		 jne	 SHORT $LN25@load_tga_f

; 4055 : 		{
; 4056 : 			nrbytes = 4;

  000dd	c7 45 d4 04 00
	00 00		 mov	 DWORD PTR _nrbytes$[ebp], 4

; 4057 : 			type = TEXTURE_TYPE_MULTIPLEALPHA;

  000e4	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _type$[ebp], 3

; 4058 : 		}
; 4059 : 		else

  000eb	eb 0e		 jmp	 SHORT $LN26@load_tga_f
$LN25@load_tga_f:

; 4060 : 		{
; 4061 : 			nrbytes = 3;

  000ed	c7 45 d4 03 00
	00 00		 mov	 DWORD PTR _nrbytes$[ebp], 3

; 4062 : 			type = TEXTURE_TYPE_NOALPHA_NOPALETTE;

  000f4	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _type$[ebp], 5
$LN26@load_tga_f:

; 4063 : 		}
; 4064 : 
; 4065 : 		width = ( ( int ) header[13] << 8 ) | header[12];

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	6b c8 0d	 imul	 ecx, eax, 13
  00103	0f b6 54 0d e4	 movzx	 edx, BYTE PTR _header$[ebp+ecx]
  00108	c1 e2 08	 shl	 edx, 8
  0010b	b8 01 00 00 00	 mov	 eax, 1
  00110	6b c8 0c	 imul	 ecx, eax, 12
  00113	0f b6 44 0d e4	 movzx	 eax, BYTE PTR _header$[ebp+ecx]
  00118	0b d0		 or	 edx, eax
  0011a	89 55 dc	 mov	 DWORD PTR _width$[ebp], edx

; 4066 : 		height = ( ( int ) header[15] << 8 ) | header[14];

  0011d	b8 01 00 00 00	 mov	 eax, 1
  00122	6b c8 0f	 imul	 ecx, eax, 15
  00125	0f b6 54 0d e4	 movzx	 edx, BYTE PTR _header$[ebp+ecx]
  0012a	c1 e2 08	 shl	 edx, 8
  0012d	b8 01 00 00 00	 mov	 eax, 1
  00132	6b c8 0e	 imul	 ecx, eax, 14
  00135	0f b6 44 0d e4	 movzx	 eax, BYTE PTR _header$[ebp+ecx]
  0013a	0b d0		 or	 edx, eax
  0013c	89 55 d8	 mov	 DWORD PTR _height$[ebp], edx

; 4067 : 
; 4068 : 		override_screen = create_texture_map ( width, height, type, 1, system_texture_palettes[0], system_texture_colour_tables[0] );

  0013f	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00144	6b c8 00	 imul	 ecx, eax, 0
  00147	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A ; system_texture_colour_tables
  0014d	51		 push	 ecx
  0014e	ba 04 00 00 00	 mov	 edx, 4
  00153	6b c2 00	 imul	 eax, edx, 0
  00156	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?system_texture_palettes@@3PAPAUIDirectDrawPalette@@A[eax]
  0015c	51		 push	 ecx
  0015d	6a 01		 push	 1
  0015f	8b 55 f8	 mov	 edx, DWORD PTR _type$[ebp]
  00162	52		 push	 edx
  00163	8b 45 d8	 mov	 eax, DWORD PTR _height$[ebp]
  00166	50		 push	 eax
  00167	8b 4d dc	 mov	 ecx, DWORD PTR _width$[ebp]
  0016a	51		 push	 ecx
  0016b	e8 00 00 00 00	 call	 ?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z ; create_texture_map
  00170	89 45 c4	 mov	 DWORD PTR _override_screen$[ebp], eax

; 4069 : 
; 4070 : 		buffer_size = width * height * nrbytes;

  00173	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  00176	0f af 45 d8	 imul	 eax, DWORD PTR _height$[ebp]
  0017a	0f af 45 d4	 imul	 eax, DWORD PTR _nrbytes$[ebp]
  0017e	89 45 d0	 mov	 DWORD PTR _buffer_size$[ebp], eax

; 4071 : 		buffer = ( unsigned char * ) safe_malloc ( buffer_size );

  00181	8b 45 d0	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0018a	89 45 e0	 mov	 DWORD PTR _buffer$[ebp], eax

; 4072 : 
; 4073 : 		if ( header[2] == 2 )

  0018d	b8 01 00 00 00	 mov	 eax, 1
  00192	d1 e0		 shl	 eax, 1
  00194	0f b6 4c 05 e4	 movzx	 ecx, BYTE PTR _header$[ebp+eax]
  00199	83 f9 02	 cmp	 ecx, 2
  0019c	75 1c		 jne	 SHORT $LN27@load_tga_f

; 4074 : 		{
; 4075 : 			fread ( buffer, buffer_size, 1, fp );

  0019e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001a1	50		 push	 eax
  001a2	6a 01		 push	 1
  001a4	8b 4d d0	 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  001a7	51		 push	 ecx
  001a8	8b 55 e0	 mov	 edx, DWORD PTR _buffer$[ebp]
  001ab	52		 push	 edx
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001b2	83 c4 10	 add	 esp, 16			; 00000010H

; 4076 : 		}
; 4077 : 		else

  001b5	e9 e9 00 00 00	 jmp	 $LN3@load_tga_f
$LN27@load_tga_f:

; 4078 : 		{
; 4079 : 			int
; 4080 : 				offset;
; 4081 : 			unsigned char
; 4082 : 				count,
; 4083 : 				buf[512];
; 4084 : 
; 4085 : 			offset = 0;

  001ba	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _offset$15[ebp], 0
$LN4@load_tga_f:

; 4086 : 			do
; 4087 : 			{
; 4088 : 				fread ( &count, 1, 1, fp );

  001c1	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001c4	50		 push	 eax
  001c5	6a 01		 push	 1
  001c7	6a 01		 push	 1
  001c9	8d 4d bf	 lea	 ecx, DWORD PTR _count$14[ebp]
  001cc	51		 push	 ecx
  001cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001d3	83 c4 10	 add	 esp, 16			; 00000010H

; 4089 : 				if ( count++ & 0x80 )

  001d6	0f b6 45 bf	 movzx	 eax, BYTE PTR _count$14[ebp]
  001da	25 80 00 00 00	 and	 eax, 128		; 00000080H
  001df	89 85 08 fd ff
	ff		 mov	 DWORD PTR tv186[ebp], eax
  001e5	8a 4d bf	 mov	 cl, BYTE PTR _count$14[ebp]
  001e8	80 c1 01	 add	 cl, 1
  001eb	88 4d bf	 mov	 BYTE PTR _count$14[ebp], cl
  001ee	83 bd 08 fd ff
	ff 00		 cmp	 DWORD PTR tv186[ebp], 0
  001f5	74 69		 je	 SHORT $LN29@load_tga_f

; 4090 : 				{
; 4091 : 					count -= 0x80;

  001f7	0f b6 45 bf	 movzx	 eax, BYTE PTR _count$14[ebp]
  001fb	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  00200	88 45 bf	 mov	 BYTE PTR _count$14[ebp], al

; 4092 : 					fread ( buf, nrbytes, 1, fp );

  00203	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00206	50		 push	 eax
  00207	6a 01		 push	 1
  00209	8b 4d d4	 mov	 ecx, DWORD PTR _nrbytes$[ebp]
  0020c	51		 push	 ecx
  0020d	8d 95 bc fd ff
	ff		 lea	 edx, DWORD PTR _buf$13[ebp]
  00213	52		 push	 edx
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0021a	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@load_tga_f:

; 4093 : 					while ( count-- )

  0021d	0f b6 45 bf	 movzx	 eax, BYTE PTR _count$14[ebp]
  00221	89 85 08 fd ff
	ff		 mov	 DWORD PTR tv197[ebp], eax
  00227	8a 4d bf	 mov	 cl, BYTE PTR _count$14[ebp]
  0022a	80 e9 01	 sub	 cl, 1
  0022d	88 4d bf	 mov	 BYTE PTR _count$14[ebp], cl
  00230	83 bd 08 fd ff
	ff 00		 cmp	 DWORD PTR tv197[ebp], 0
  00237	74 25		 je	 SHORT $LN6@load_tga_f

; 4094 : 					{
; 4095 : 						memcpy ( buffer + offset, buf, nrbytes );

  00239	8b 45 d4	 mov	 eax, DWORD PTR _nrbytes$[ebp]
  0023c	50		 push	 eax
  0023d	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR _buf$13[ebp]
  00243	51		 push	 ecx
  00244	8b 55 e0	 mov	 edx, DWORD PTR _buffer$[ebp]
  00247	03 55 c0	 add	 edx, DWORD PTR _offset$15[ebp]
  0024a	52		 push	 edx
  0024b	e8 00 00 00 00	 call	 _memcpy
  00250	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4096 : 						offset += nrbytes;

  00253	8b 45 c0	 mov	 eax, DWORD PTR _offset$15[ebp]
  00256	03 45 d4	 add	 eax, DWORD PTR _nrbytes$[ebp]
  00259	89 45 c0	 mov	 DWORD PTR _offset$15[ebp], eax

; 4097 : 					}

  0025c	eb bf		 jmp	 SHORT $LN5@load_tga_f
$LN6@load_tga_f:

; 4098 : 				}
; 4099 : 				else

  0025e	eb 37		 jmp	 SHORT $LN30@load_tga_f
$LN29@load_tga_f:

; 4100 : 				{
; 4101 : 					int
; 4102 : 						size;
; 4103 : 
; 4104 : 					size = count * nrbytes;

  00260	0f b6 45 bf	 movzx	 eax, BYTE PTR _count$14[ebp]
  00264	0f af 45 d4	 imul	 eax, DWORD PTR _nrbytes$[ebp]
  00268	89 85 b8 fd ff
	ff		 mov	 DWORD PTR _size$12[ebp], eax

; 4105 : 					fread ( buffer + offset, size, 1, fp );

  0026e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00271	50		 push	 eax
  00272	6a 01		 push	 1
  00274	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _size$12[ebp]
  0027a	51		 push	 ecx
  0027b	8b 55 e0	 mov	 edx, DWORD PTR _buffer$[ebp]
  0027e	03 55 c0	 add	 edx, DWORD PTR _offset$15[ebp]
  00281	52		 push	 edx
  00282	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00288	83 c4 10	 add	 esp, 16			; 00000010H

; 4106 : 					offset += size;

  0028b	8b 45 c0	 mov	 eax, DWORD PTR _offset$15[ebp]
  0028e	03 85 b8 fd ff
	ff		 add	 eax, DWORD PTR _size$12[ebp]
  00294	89 45 c0	 mov	 DWORD PTR _offset$15[ebp], eax
$LN30@load_tga_f:

; 4107 : 				}
; 4108 : 			}
; 4109 : 			while ( offset < buffer_size );

  00297	8b 45 c0	 mov	 eax, DWORD PTR _offset$15[ebp]
  0029a	3b 45 d0	 cmp	 eax, DWORD PTR _buffer_size$[ebp]
  0029d	0f 8c 1e ff ff
	ff		 jl	 $LN4@load_tga_f
$LN3@load_tga_f:

; 4110 : 		}
; 4111 : 
; 4112 : 		safe_fclose ( fp );

  002a3	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 4113 : 
; 4114 : 		for ( y = 0; y < height; y++ )

  002ac	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  002b3	eb 09		 jmp	 SHORT $LN9@load_tga_f
$LN7@load_tga_f:
  002b5	8b 45 c8	 mov	 eax, DWORD PTR _y$[ebp]
  002b8	83 c0 01	 add	 eax, 1
  002bb	89 45 c8	 mov	 DWORD PTR _y$[ebp], eax
$LN9@load_tga_f:
  002be	8b 45 c8	 mov	 eax, DWORD PTR _y$[ebp]
  002c1	3b 45 d8	 cmp	 eax, DWORD PTR _height$[ebp]
  002c4	0f 8d 27 01 00
	00		 jge	 $LN8@load_tga_f

; 4115 : 		{
; 4116 : 			for ( x = 0; x < width; x++ )

  002ca	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  002d1	eb 09		 jmp	 SHORT $LN12@load_tga_f
$LN10@load_tga_f:
  002d3	8b 45 cc	 mov	 eax, DWORD PTR _x$[ebp]
  002d6	83 c0 01	 add	 eax, 1
  002d9	89 45 cc	 mov	 DWORD PTR _x$[ebp], eax
$LN12@load_tga_f:
  002dc	8b 45 cc	 mov	 eax, DWORD PTR _x$[ebp]
  002df	3b 45 dc	 cmp	 eax, DWORD PTR _width$[ebp]
  002e2	0f 8d 04 01 00
	00		 jge	 $LN11@load_tga_f

; 4117 : 			{
; 4118 : 				int
; 4119 : 					offset;
; 4120 : 				unsigned char
; 4121 : 					tmp;
; 4122 : 
; 4123 : 				offset = ( y * width + x ) * nrbytes;

  002e8	8b 45 c8	 mov	 eax, DWORD PTR _y$[ebp]
  002eb	0f af 45 dc	 imul	 eax, DWORD PTR _width$[ebp]
  002ef	03 45 cc	 add	 eax, DWORD PTR _x$[ebp]
  002f2	0f af 45 d4	 imul	 eax, DWORD PTR _nrbytes$[ebp]
  002f6	89 85 b4 fd ff
	ff		 mov	 DWORD PTR _offset$11[ebp], eax

; 4124 : 
; 4125 : 				tmp = min ( ( int ) ( buffer[offset + 2] * gamma_adjustment ), 255 );

  002fc	c7 85 20 fd ff
	ff ff 00 00 00	 mov	 DWORD PTR $T6[ebp], 255	; 000000ffH
  00306	8b 45 e0	 mov	 eax, DWORD PTR _buffer$[ebp]
  00309	03 85 b4 fd ff
	ff		 add	 eax, DWORD PTR _offset$11[ebp]
  0030f	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00313	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00317	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _gamma_adjustment$[ebp]
  0031c	f3 0f 2c d0	 cvttss2si edx, xmm0
  00320	89 95 1c fd ff
	ff		 mov	 DWORD PTR $T5[ebp], edx
  00326	8d 85 20 fd ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  0032c	50		 push	 eax
  0032d	8d 8d 1c fd ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00333	51		 push	 ecx
  00334	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00339	8a 10		 mov	 dl, BYTE PTR [eax]
  0033b	88 95 b3 fd ff
	ff		 mov	 BYTE PTR _tmp$10[ebp], dl

; 4126 : 				buffer[offset + 2] = min ( ( int ) ( buffer[offset + 0] * gamma_adjustment ), 255);

  00341	c7 85 18 fd ff
	ff ff 00 00 00	 mov	 DWORD PTR $T4[ebp], 255	; 000000ffH
  0034b	8b 45 e0	 mov	 eax, DWORD PTR _buffer$[ebp]
  0034e	03 85 b4 fd ff
	ff		 add	 eax, DWORD PTR _offset$11[ebp]
  00354	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00357	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0035b	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _gamma_adjustment$[ebp]
  00360	f3 0f 2c d0	 cvttss2si edx, xmm0
  00364	89 95 14 fd ff
	ff		 mov	 DWORD PTR $T3[ebp], edx
  0036a	8d 85 18 fd ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00370	50		 push	 eax
  00371	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00377	51		 push	 ecx
  00378	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  0037d	8b 55 e0	 mov	 edx, DWORD PTR _buffer$[ebp]
  00380	03 95 b4 fd ff
	ff		 add	 edx, DWORD PTR _offset$11[ebp]
  00386	8a 00		 mov	 al, BYTE PTR [eax]
  00388	88 42 02	 mov	 BYTE PTR [edx+2], al

; 4127 : 				buffer[offset + 1] = min ( ( int )( buffer[offset + 1] * gamma_adjustment ), 255);

  0038b	c7 85 10 fd ff
	ff ff 00 00 00	 mov	 DWORD PTR $T2[ebp], 255	; 000000ffH
  00395	8b 45 e0	 mov	 eax, DWORD PTR _buffer$[ebp]
  00398	03 85 b4 fd ff
	ff		 add	 eax, DWORD PTR _offset$11[ebp]
  0039e	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  003a2	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  003a6	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _gamma_adjustment$[ebp]
  003ab	f3 0f 2c d0	 cvttss2si edx, xmm0
  003af	89 95 0c fd ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  003b5	8d 85 10 fd ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  003bb	50		 push	 eax
  003bc	8d 8d 0c fd ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  003c2	51		 push	 ecx
  003c3	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  003c8	8b 55 e0	 mov	 edx, DWORD PTR _buffer$[ebp]
  003cb	03 95 b4 fd ff
	ff		 add	 edx, DWORD PTR _offset$11[ebp]
  003d1	8a 00		 mov	 al, BYTE PTR [eax]
  003d3	88 42 01	 mov	 BYTE PTR [edx+1], al

; 4128 : 				buffer[offset + 0] = tmp;

  003d6	8b 45 e0	 mov	 eax, DWORD PTR _buffer$[ebp]
  003d9	03 85 b4 fd ff
	ff		 add	 eax, DWORD PTR _offset$11[ebp]
  003df	8a 8d b3 fd ff
	ff		 mov	 cl, BYTE PTR _tmp$10[ebp]
  003e5	88 08		 mov	 BYTE PTR [eax], cl

; 4129 : 				/*if ( nrbyte == 4 )
; 4130 : 					buffer[offset + 3] = min ( ( int ) ( buffer[offset + 3] * gamma_adjustment ), 255 );*/
; 4131 : 			}

  003e7	e9 e7 fe ff ff	 jmp	 $LN10@load_tga_f
$LN11@load_tga_f:

; 4132 : 		}

  003ec	e9 c4 fe ff ff	 jmp	 $LN7@load_tga_f
$LN8@load_tga_f:

; 4133 : 
; 4134 : 		if ( !( header[17] & 0x20 ) )

  003f1	b8 01 00 00 00	 mov	 eax, 1
  003f6	6b c8 11	 imul	 ecx, eax, 17
  003f9	0f b6 54 0d e4	 movzx	 edx, BYTE PTR _header$[ebp+ecx]
  003fe	83 e2 20	 and	 edx, 32			; 00000020H
  00401	0f 85 b8 00 00
	00		 jne	 $LN14@load_tga_f

; 4135 : 		{
; 4136 : 			for ( y = 0; y < height / 2; y++ )

  00407	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  0040e	eb 09		 jmp	 SHORT $LN15@load_tga_f
$LN13@load_tga_f:
  00410	8b 45 c8	 mov	 eax, DWORD PTR _y$[ebp]
  00413	83 c0 01	 add	 eax, 1
  00416	89 45 c8	 mov	 DWORD PTR _y$[ebp], eax
$LN15@load_tga_f:
  00419	8b 45 d8	 mov	 eax, DWORD PTR _height$[ebp]
  0041c	99		 cdq
  0041d	2b c2		 sub	 eax, edx
  0041f	d1 f8		 sar	 eax, 1
  00421	39 45 c8	 cmp	 DWORD PTR _y$[ebp], eax
  00424	0f 8d 95 00 00
	00		 jge	 $LN14@load_tga_f

; 4137 : 			{
; 4138 : 				int
; 4139 : 					offset1,
; 4140 : 					offset2;
; 4141 : 
; 4142 : 				offset1 = y * width * nrbytes;

  0042a	8b 45 c8	 mov	 eax, DWORD PTR _y$[ebp]
  0042d	0f af 45 dc	 imul	 eax, DWORD PTR _width$[ebp]
  00431	0f af 45 d4	 imul	 eax, DWORD PTR _nrbytes$[ebp]
  00435	89 85 ac fd ff
	ff		 mov	 DWORD PTR _offset1$9[ebp], eax

; 4143 : 				offset2 = ( height - y - 1 ) * width * nrbytes;

  0043b	8b 45 d8	 mov	 eax, DWORD PTR _height$[ebp]
  0043e	2b 45 c8	 sub	 eax, DWORD PTR _y$[ebp]
  00441	83 e8 01	 sub	 eax, 1
  00444	0f af 45 dc	 imul	 eax, DWORD PTR _width$[ebp]
  00448	0f af 45 d4	 imul	 eax, DWORD PTR _nrbytes$[ebp]
  0044c	89 85 a8 fd ff
	ff		 mov	 DWORD PTR _offset2$8[ebp], eax

; 4144 : 
; 4145 : 				for ( x = 0; x < width * nrbytes; x++ )

  00452	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00459	eb 09		 jmp	 SHORT $LN18@load_tga_f
$LN16@load_tga_f:
  0045b	8b 45 cc	 mov	 eax, DWORD PTR _x$[ebp]
  0045e	83 c0 01	 add	 eax, 1
  00461	89 45 cc	 mov	 DWORD PTR _x$[ebp], eax
$LN18@load_tga_f:
  00464	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  00467	0f af 45 d4	 imul	 eax, DWORD PTR _nrbytes$[ebp]
  0046b	39 45 cc	 cmp	 DWORD PTR _x$[ebp], eax
  0046e	7d 4a		 jge	 SHORT $LN17@load_tga_f

; 4146 : 				{
; 4147 : 					unsigned char
; 4148 : 						tmp;
; 4149 : 
; 4150 : 					tmp = buffer[offset1 + x];

  00470	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _offset1$9[ebp]
  00476	03 45 cc	 add	 eax, DWORD PTR _x$[ebp]
  00479	8b 4d e0	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0047c	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  0047f	88 95 a7 fd ff
	ff		 mov	 BYTE PTR _tmp$7[ebp], dl

; 4151 : 					buffer[offset1 + x] = buffer[offset2 + x];

  00485	8b 85 a8 fd ff
	ff		 mov	 eax, DWORD PTR _offset2$8[ebp]
  0048b	03 45 cc	 add	 eax, DWORD PTR _x$[ebp]
  0048e	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _offset1$9[ebp]
  00494	03 4d cc	 add	 ecx, DWORD PTR _x$[ebp]
  00497	8b 55 e0	 mov	 edx, DWORD PTR _buffer$[ebp]
  0049a	8b 75 e0	 mov	 esi, DWORD PTR _buffer$[ebp]
  0049d	8a 04 06	 mov	 al, BYTE PTR [esi+eax]
  004a0	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 4152 : 					buffer[offset2 + x] = tmp;

  004a3	8b 85 a8 fd ff
	ff		 mov	 eax, DWORD PTR _offset2$8[ebp]
  004a9	03 45 cc	 add	 eax, DWORD PTR _x$[ebp]
  004ac	8b 4d e0	 mov	 ecx, DWORD PTR _buffer$[ebp]
  004af	8a 95 a7 fd ff
	ff		 mov	 dl, BYTE PTR _tmp$7[ebp]
  004b5	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4153 : 				}

  004b8	eb a1		 jmp	 SHORT $LN16@load_tga_f
$LN17@load_tga_f:

; 4154 : 			}

  004ba	e9 51 ff ff ff	 jmp	 $LN13@load_tga_f
$LN14@load_tga_f:

; 4155 : 		}
; 4156 : 
; 4157 : 		while ( !lock_texture ( override_screen, 0 ) )

  004bf	6a 00		 push	 0
  004c1	8b 45 c4	 mov	 eax, DWORD PTR _override_screen$[ebp]
  004c4	50		 push	 eax
  004c5	e8 00 00 00 00	 call	 ?lock_texture@@YGHPAUSCREEN@@H@Z ; lock_texture
  004ca	85 c0		 test	 eax, eax
  004cc	75 0a		 jne	 SHORT $LN20@load_tga_f

; 4158 : 		{
; 4159 : 			Sleep ( 100 );

  004ce	6a 64		 push	 100			; 00000064H
  004d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 4160 : 		}

  004d6	eb e7		 jmp	 SHORT $LN14@load_tga_f
$LN20@load_tga_f:

; 4161 : 
; 4162 : 		if ( type == TEXTURE_TYPE_NOALPHA_NOPALETTE )

  004d8	83 7d f8 05	 cmp	 DWORD PTR _type$[ebp], 5
  004dc	75 1b		 jne	 SHORT $LN32@load_tga_f

; 4163 : 			convert_no_alpha_24bit_texture_map_data ( buffer, width, height, override_screen, fp );

  004de	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  004e1	50		 push	 eax
  004e2	8b 4d c4	 mov	 ecx, DWORD PTR _override_screen$[ebp]
  004e5	51		 push	 ecx
  004e6	8b 55 d8	 mov	 edx, DWORD PTR _height$[ebp]
  004e9	52		 push	 edx
  004ea	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  004ed	50		 push	 eax
  004ee	8b 4d e0	 mov	 ecx, DWORD PTR _buffer$[ebp]
  004f1	51		 push	 ecx
  004f2	e8 00 00 00 00	 call	 ?convert_no_alpha_24bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_no_alpha_24bit_texture_map_data

; 4164 : 		else

  004f7	eb 19		 jmp	 SHORT $LN33@load_tga_f
$LN32@load_tga_f:

; 4165 : 			convert_multiple_alpha_32bit_texture_map_data ( buffer, width, height, override_screen, fp );

  004f9	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  004fc	50		 push	 eax
  004fd	8b 4d c4	 mov	 ecx, DWORD PTR _override_screen$[ebp]
  00500	51		 push	 ecx
  00501	8b 55 d8	 mov	 edx, DWORD PTR _height$[ebp]
  00504	52		 push	 edx
  00505	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  00508	50		 push	 eax
  00509	8b 4d e0	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0050c	51		 push	 ecx
  0050d	e8 00 00 00 00	 call	 ?convert_multiple_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_multiple_alpha_32bit_texture_map_data
$LN33@load_tga_f:

; 4166 : 
; 4167 : 		unlock_texture ( override_screen );

  00512	8b 45 c4	 mov	 eax, DWORD PTR _override_screen$[ebp]
  00515	50		 push	 eax
  00516	e8 00 00 00 00	 call	 ?unlock_texture@@YGHPAUSCREEN@@@Z ; unlock_texture

; 4168 : 
; 4169 : 		safe_free ( buffer );

  0051b	8b 45 e0	 mov	 eax, DWORD PTR _buffer$[ebp]
  0051e	50		 push	 eax
  0051f	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 4170 : 
; 4171 : 		return override_screen;

  00524	8b 45 c4	 mov	 eax, DWORD PTR _override_screen$[ebp]
$LN1@load_tga_f:

; 4172 : }

  00527	5f		 pop	 edi
  00528	5e		 pop	 esi
  00529	5b		 pop	 ebx
  0052a	8b e5		 mov	 esp, ebp
  0052c	5d		 pop	 ebp
  0052d	c2 0c 00	 ret	 12			; 0000000cH
?load_tga_file_screen@@YGPAUSCREEN@@PBDHM@Z ENDP	; load_tga_file_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?load_dds_file_screen@@YGPAUSCREEN@@PBDHM@Z
_TEXT	SEGMENT
$T1 = -280						; size = 4
$T2 = -276						; size = 4
$T3 = -272						; size = 4
$T4 = -268						; size = 4
$T5 = -264						; size = 4
$T6 = -260						; size = 4
$T7 = -256						; size = 4
$T8 = -252						; size = 4
$T9 = -248						; size = 4
_nrbyte$10 = -180					; size = 4
_y$11 = -176						; size = 4
_x$12 = -172						; size = 4
_override_screen$ = -168				; size = 4
_buffer_size$ = -164					; size = 4
_height$ = -160						; size = 4
_width$ = -156						; size = 4
_mipmap$ = -152						; size = 4
_bufferswap$ = -148					; size = 4
_buffer$ = -144						; size = 4
_type$ = -140						; size = 4
_dwmagic$ = -136					; size = 4
_ddsh$ = -132						; size = 124
_fp$ = -8						; size = 4
_temp$ = -4						; size = 4
_full_override_texture_filename$ = 8			; size = 4
_step$ = 12						; size = 4
_gamma_adjustment$ = 16					; size = 4
?load_dds_file_screen@@YGPAUSCREEN@@PBDHM@Z PROC	; load_dds_file_screen, COMDAT

; 3889 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3890 : 		int
; 3891 : 			temp;
; 3892 : 		FILE
; 3893 : 			*fp;
; 3894 : 
; 3895 : 		DDSURFACEDESC2 ddsh;
; 3896 : 
; 3897 : 		DWORD dwmagic;
; 3898 : 
; 3899 : 		texture_map_types
; 3900 : 		    type;
; 3901 : 
; 3902 : 		unsigned char
; 3903 : 			*buffer, *bufferswap;
; 3904 : 
; 3905 : 		int
; 3906 : 			mipmap,
; 3907 : 			width, height,
; 3908 : 			buffer_size;
; 3909 : 
; 3910 : 		screen
; 3911 : 			*override_screen;
; 3912 : 
; 3913 : 		fp = safe_fopen (full_override_texture_filename, "rb");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00011	8b 45 08	 mov	 eax, DWORD PTR _full_override_texture_filename$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  0001a	89 45 f8	 mov	 DWORD PTR _fp$[ebp], eax

; 3914 : 
; 3915 : 		if (!fp)

  0001d	83 7d f8 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00021	75 07		 jne	 SHORT $LN13@load_dds_f

; 3916 : 			return (NULL);

  00023	33 c0		 xor	 eax, eax
  00025	e9 28 05 00 00	 jmp	 $LN1@load_dds_f
$LN13@load_dds_f:

; 3917 : 
; 3918 : 		fread (&dwmagic, sizeof (dwmagic), 1, fp);

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  0002d	50		 push	 eax
  0002e	6a 01		 push	 1
  00030	6a 04		 push	 4
  00032	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _dwmagic$[ebp]
  00038	51		 push	 ecx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0003f	83 c4 10	 add	 esp, 16			; 00000010H

; 3919 : 
; 3920 : 		fread (&ddsh, sizeof (ddsh), 1, fp);

  00042	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  00045	50		 push	 eax
  00046	6a 01		 push	 1
  00048	6a 7c		 push	 124			; 0000007cH
  0004a	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _ddsh$[ebp]
  00050	51		 push	 ecx
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00057	83 c4 10	 add	 esp, 16			; 00000010H

; 3921 : 
; 3922 : /*
; 3923 : 			if ( width != height )
; 3924 : 			{
; 3925 : 				debug_fatal("Only square dds files supported for now: %s",full_override_texture_filename);
; 3926 : 			}
; 3927 : */
; 3928 : 		/*			if ( ddsh.dwFlags & DDSD_LINEARSIZE )
; 3929 : 			{
; 3930 : 				debug_fatal("Compressed dds files not supported: %s",full_override_texture_filename);
; 3931 : 			}
; 3932 : 
; 3933 : 			if ( ddsh.ddpfPixelFormat.dwFlags & DDPF_FOURCC )
; 3934 : 			{
; 3935 : 				debug_fatal("Only RGB dds files supported: %s",full_override_texture_filename);
; 3936 : 			}
; 3937 : */
; 3938 : 		mipmap = ddsh.dwMipMapCount;

  0005a	8b 45 94	 mov	 eax, DWORD PTR _ddsh$[ebp+24]
  0005d	89 85 68 ff ff
	ff		 mov	 DWORD PTR _mipmap$[ebp], eax

; 3939 : 
; 3940 : 		if ( mipmap < 1 )

  00063	83 bd 68 ff ff
	ff 01		 cmp	 DWORD PTR _mipmap$[ebp], 1
  0006a	7d 0a		 jge	 SHORT $LN14@load_dds_f

; 3941 : 		{
; 3942 : 			mipmap = 1;

  0006c	c7 85 68 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _mipmap$[ebp], 1
$LN14@load_dds_f:

; 3943 : //		 	debug_fatal("Only mipmapped dds files allowed, use bmps otherwise: %s",full_override_texture_filename);
; 3944 : 		}
; 3945 : 
; 3946 : 		//eech-new\modules\graphics\textsys.h
; 3947 : 		if (ddsh.ddpfPixelFormat.dwFlags & DDPF_ALPHAPIXELS )

  00076	8b 45 c8	 mov	 eax, DWORD PTR _ddsh$[ebp+76]
  00079	83 e0 01	 and	 eax, 1
  0007c	74 0c		 je	 SHORT $LN15@load_dds_f

; 3948 : 			type = TEXTURE_TYPE_MULTIPLEALPHA;

  0007e	c7 85 74 ff ff
	ff 03 00 00 00	 mov	 DWORD PTR _type$[ebp], 3

; 3949 : 		else

  00088	eb 0a		 jmp	 SHORT $LN16@load_dds_f
$LN15@load_dds_f:

; 3950 : 			type = TEXTURE_TYPE_NOALPHA_NOPALETTE;

  0008a	c7 85 74 ff ff
	ff 05 00 00 00	 mov	 DWORD PTR _type$[ebp], 5
$LN16@load_dds_f:

; 3951 : 
; 3952 : 		width = ddsh.dwWidth;

  00094	8b 45 88	 mov	 eax, DWORD PTR _ddsh$[ebp+12]
  00097	89 85 64 ff ff
	ff		 mov	 DWORD PTR _width$[ebp], eax

; 3953 : 		height = ddsh.dwHeight;

  0009d	8b 45 84	 mov	 eax, DWORD PTR _ddsh$[ebp+8]
  000a0	89 85 60 ff ff
	ff		 mov	 DWORD PTR _height$[ebp], eax

; 3954 : 
; 3955 : 		//VJ 050530 set mipmapping to no mipmaps if wanted
; 3956 : 		if (!global_mipmapping)

  000a6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?global_mipmapping@@3HA, 0 ; global_mipmapping
  000ad	75 0a		 jne	 SHORT $LN17@load_dds_f

; 3957 : 			mipmap = 1;

  000af	c7 85 68 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _mipmap$[ebp], 1
$LN17@load_dds_f:

; 3958 : 
; 3959 : 		debug_log(full_override_texture_filename);

  000b9	8b 45 08	 mov	 eax, DWORD PTR _full_override_texture_filename$[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000c2	83 c4 04	 add	 esp, 4

; 3960 : 		override_screen = create_texture_map (width, height, type, mipmap, system_texture_palettes[0], system_texture_colour_tables[0] );

  000c5	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  000ca	6b c8 00	 imul	 ecx, eax, 0
  000cd	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A ; system_texture_colour_tables
  000d3	51		 push	 ecx
  000d4	ba 04 00 00 00	 mov	 edx, 4
  000d9	6b c2 00	 imul	 eax, edx, 0
  000dc	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?system_texture_palettes@@3PAPAUIDirectDrawPalette@@A[eax]
  000e2	51		 push	 ecx
  000e3	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _mipmap$[ebp]
  000e9	52		 push	 edx
  000ea	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _type$[ebp]
  000f0	50		 push	 eax
  000f1	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _height$[ebp]
  000f7	51		 push	 ecx
  000f8	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _width$[ebp]
  000fe	52		 push	 edx
  000ff	e8 00 00 00 00	 call	 ?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z ; create_texture_map
  00104	89 85 58 ff ff
	ff		 mov	 DWORD PTR _override_screen$[ebp], eax

; 3961 : 
; 3962 : 		for ( temp = 0; temp < mipmap; temp++ )  //was <= mipmap!

  0010a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp], 0
  00111	eb 09		 jmp	 SHORT $LN4@load_dds_f
$LN2@load_dds_f:
  00113	8b 45 fc	 mov	 eax, DWORD PTR _temp$[ebp]
  00116	83 c0 01	 add	 eax, 1
  00119	89 45 fc	 mov	 DWORD PTR _temp$[ebp], eax
$LN4@load_dds_f:
  0011c	8b 45 fc	 mov	 eax, DWORD PTR _temp$[ebp]
  0011f	3b 85 68 ff ff
	ff		 cmp	 eax, DWORD PTR _mipmap$[ebp]
  00125	0f 8d 18 04 00
	00		 jge	 $LN3@load_dds_f

; 3963 : 		{
; 3964 : 			int x, y;
; 3965 : 			int nrbyte = ddsh.ddpfPixelFormat.dwRGBBitCount >> 3;

  0012b	8b 45 d0	 mov	 eax, DWORD PTR _ddsh$[ebp+84]
  0012e	c1 e8 03	 shr	 eax, 3
  00131	89 85 4c ff ff
	ff		 mov	 DWORD PTR _nrbyte$10[ebp], eax

; 3966 : 			//VJ 050426 create a new texture map with mipmap levels if needed
; 3967 : 			//C:\gms\Razorworks\eech-new\modules\graphics\scrnstr.h
; 3968 : 
; 3969 : 			buffer_size = width * height * nrbyte;

  00137	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _width$[ebp]
  0013d	0f af 85 60 ff
	ff ff		 imul	 eax, DWORD PTR _height$[ebp]
  00144	0f af 85 4c ff
	ff ff		 imul	 eax, DWORD PTR _nrbyte$10[ebp]
  0014b	89 85 5c ff ff
	ff		 mov	 DWORD PTR _buffer_size$[ebp], eax

; 3970 : 			buffer = ( unsigned char * ) safe_malloc (buffer_size);

  00151	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0015d	89 85 70 ff ff
	ff		 mov	 DWORD PTR _buffer$[ebp], eax

; 3971 : 			bufferswap = ( unsigned char * ) safe_malloc (buffer_size);

  00163	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0016f	89 85 6c ff ff
	ff		 mov	 DWORD PTR _bufferswap$[ebp], eax

; 3972 : 
; 3973 : 			fread (buffer, buffer_size, 1, fp);

  00175	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  00178	50		 push	 eax
  00179	6a 01		 push	 1
  0017b	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  00181	51		 push	 ecx
  00182	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _buffer$[ebp]
  00188	52		 push	 edx
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0018f	83 c4 10	 add	 esp, 16			; 00000010H

; 3974 : 
; 3975 : 			//swap lines around, bitmaps are upside down in the game
; 3976 : 			for ( y = 0; y < height; y++ )

  00192	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$11[ebp], 0
  0019c	eb 0f		 jmp	 SHORT $LN7@load_dds_f
$LN5@load_dds_f:
  0019e	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  001a4	83 c0 01	 add	 eax, 1
  001a7	89 85 50 ff ff
	ff		 mov	 DWORD PTR _y$11[ebp], eax
$LN7@load_dds_f:
  001ad	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  001b3	3b 85 60 ff ff
	ff		 cmp	 eax, DWORD PTR _height$[ebp]
  001b9	0f 8d 97 02 00
	00		 jge	 $LN6@load_dds_f

; 3977 : 			{
; 3978 : 				for ( x = 0; x < width; x++ )

  001bf	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$12[ebp], 0
  001c9	eb 0f		 jmp	 SHORT $LN10@load_dds_f
$LN8@load_dds_f:
  001cb	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _x$12[ebp]
  001d1	83 c0 01	 add	 eax, 1
  001d4	89 85 54 ff ff
	ff		 mov	 DWORD PTR _x$12[ebp], eax
$LN10@load_dds_f:
  001da	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _x$12[ebp]
  001e0	3b 85 64 ff ff
	ff		 cmp	 eax, DWORD PTR _width$[ebp]
  001e6	0f 8d 65 02 00
	00		 jge	 $LN9@load_dds_f

; 3979 : 				{
; 3980 : 					bufferswap[(height-y-1)*width*nrbyte + x*nrbyte + 0] = min((int)(buffer[y*width*nrbyte + x*nrbyte + 2] * gamma_adjustment), 255);

  001ec	c7 85 08 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR $T9[ebp], 255	; 000000ffH
  001f6	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  001fc	0f af 85 64 ff
	ff ff		 imul	 eax, DWORD PTR _width$[ebp]
  00203	0f af 85 4c ff
	ff ff		 imul	 eax, DWORD PTR _nrbyte$10[ebp]
  0020a	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _x$12[ebp]
  00210	0f af 8d 4c ff
	ff ff		 imul	 ecx, DWORD PTR _nrbyte$10[ebp]
  00217	03 8d 70 ff ff
	ff		 add	 ecx, DWORD PTR _buffer$[ebp]
  0021d	0f b6 54 01 02	 movzx	 edx, BYTE PTR [ecx+eax+2]
  00222	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00226	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _gamma_adjustment$[ebp]
  0022b	f3 0f 2c c0	 cvttss2si eax, xmm0
  0022f	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  00235	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0023b	51		 push	 ecx
  0023c	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  00242	52		 push	 edx
  00243	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00248	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _height$[ebp]
  0024e	2b 8d 50 ff ff
	ff		 sub	 ecx, DWORD PTR _y$11[ebp]
  00254	83 e9 01	 sub	 ecx, 1
  00257	0f af 8d 64 ff
	ff ff		 imul	 ecx, DWORD PTR _width$[ebp]
  0025e	0f af 8d 4c ff
	ff ff		 imul	 ecx, DWORD PTR _nrbyte$10[ebp]
  00265	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _x$12[ebp]
  0026b	0f af 95 4c ff
	ff ff		 imul	 edx, DWORD PTR _nrbyte$10[ebp]
  00272	03 95 6c ff ff
	ff		 add	 edx, DWORD PTR _bufferswap$[ebp]
  00278	8a 00		 mov	 al, BYTE PTR [eax]
  0027a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 3981 : 					bufferswap[(height-y-1)*width*nrbyte + x*nrbyte + 1] = min((int)(buffer[y*width*nrbyte + x*nrbyte + 1] * gamma_adjustment), 255);

  0027d	c7 85 00 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR $T7[ebp], 255	; 000000ffH
  00287	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  0028d	0f af 85 64 ff
	ff ff		 imul	 eax, DWORD PTR _width$[ebp]
  00294	0f af 85 4c ff
	ff ff		 imul	 eax, DWORD PTR _nrbyte$10[ebp]
  0029b	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _x$12[ebp]
  002a1	0f af 8d 4c ff
	ff ff		 imul	 ecx, DWORD PTR _nrbyte$10[ebp]
  002a8	03 8d 70 ff ff
	ff		 add	 ecx, DWORD PTR _buffer$[ebp]
  002ae	0f b6 54 01 01	 movzx	 edx, BYTE PTR [ecx+eax+1]
  002b3	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  002b7	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _gamma_adjustment$[ebp]
  002bc	f3 0f 2c c0	 cvttss2si eax, xmm0
  002c0	89 85 fc fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  002c6	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  002cc	51		 push	 ecx
  002cd	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  002d3	52		 push	 edx
  002d4	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  002d9	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _height$[ebp]
  002df	2b 8d 50 ff ff
	ff		 sub	 ecx, DWORD PTR _y$11[ebp]
  002e5	83 e9 01	 sub	 ecx, 1
  002e8	0f af 8d 64 ff
	ff ff		 imul	 ecx, DWORD PTR _width$[ebp]
  002ef	0f af 8d 4c ff
	ff ff		 imul	 ecx, DWORD PTR _nrbyte$10[ebp]
  002f6	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _x$12[ebp]
  002fc	0f af 95 4c ff
	ff ff		 imul	 edx, DWORD PTR _nrbyte$10[ebp]
  00303	03 95 6c ff ff
	ff		 add	 edx, DWORD PTR _bufferswap$[ebp]
  00309	8a 00		 mov	 al, BYTE PTR [eax]
  0030b	88 44 0a 01	 mov	 BYTE PTR [edx+ecx+1], al

; 3982 : 					bufferswap[(height-y-1)*width*nrbyte + x*nrbyte + 2] = min((int)(buffer[y*width*nrbyte + x*nrbyte + 0] * gamma_adjustment), 255);

  0030f	c7 85 f8 fe ff
	ff ff 00 00 00	 mov	 DWORD PTR $T5[ebp], 255	; 000000ffH
  00319	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  0031f	0f af 85 64 ff
	ff ff		 imul	 eax, DWORD PTR _width$[ebp]
  00326	0f af 85 4c ff
	ff ff		 imul	 eax, DWORD PTR _nrbyte$10[ebp]
  0032d	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _x$12[ebp]
  00333	0f af 8d 4c ff
	ff ff		 imul	 ecx, DWORD PTR _nrbyte$10[ebp]
  0033a	03 8d 70 ff ff
	ff		 add	 ecx, DWORD PTR _buffer$[ebp]
  00340	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00344	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00348	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _gamma_adjustment$[ebp]
  0034d	f3 0f 2c c0	 cvttss2si eax, xmm0
  00351	89 85 f4 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00357	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0035d	51		 push	 ecx
  0035e	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  0036a	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _height$[ebp]
  00370	2b 8d 50 ff ff
	ff		 sub	 ecx, DWORD PTR _y$11[ebp]
  00376	83 e9 01	 sub	 ecx, 1
  00379	0f af 8d 64 ff
	ff ff		 imul	 ecx, DWORD PTR _width$[ebp]
  00380	0f af 8d 4c ff
	ff ff		 imul	 ecx, DWORD PTR _nrbyte$10[ebp]
  00387	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _x$12[ebp]
  0038d	0f af 95 4c ff
	ff ff		 imul	 edx, DWORD PTR _nrbyte$10[ebp]
  00394	03 95 6c ff ff
	ff		 add	 edx, DWORD PTR _bufferswap$[ebp]
  0039a	8a 00		 mov	 al, BYTE PTR [eax]
  0039c	88 44 0a 02	 mov	 BYTE PTR [edx+ecx+2], al

; 3983 : 					//add alpha layer if necessary
; 3984 : 					if (nrbyte == 4)

  003a0	83 bd 4c ff ff
	ff 04		 cmp	 DWORD PTR _nrbyte$10[ebp], 4
  003a7	0f 85 9f 00 00
	00		 jne	 $LN18@load_dds_f

; 3985 : 						bufferswap[(height-y-1)*width*nrbyte + x*nrbyte + 3] = min(255, max(0, buffer[y*width*nrbyte + x*nrbyte + 3]+step));

  003ad	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  003b3	0f af 85 64 ff
	ff ff		 imul	 eax, DWORD PTR _width$[ebp]
  003ba	0f af 85 4c ff
	ff ff		 imul	 eax, DWORD PTR _nrbyte$10[ebp]
  003c1	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _x$12[ebp]
  003c7	0f af 8d 4c ff
	ff ff		 imul	 ecx, DWORD PTR _nrbyte$10[ebp]
  003ce	03 8d 70 ff ff
	ff		 add	 ecx, DWORD PTR _buffer$[ebp]
  003d4	0f b6 54 01 03	 movzx	 edx, BYTE PTR [ecx+eax+3]
  003d9	03 55 0c	 add	 edx, DWORD PTR _step$[ebp]
  003dc	89 95 f0 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], edx
  003e2	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  003ec	c7 85 e8 fe ff
	ff ff 00 00 00	 mov	 DWORD PTR $T1[ebp], 255	; 000000ffH
  003f6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003fc	50		 push	 eax
  003fd	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00403	51		 push	 ecx
  00404	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  00409	50		 push	 eax
  0040a	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00410	52		 push	 edx
  00411	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00416	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _height$[ebp]
  0041c	2b 8d 50 ff ff
	ff		 sub	 ecx, DWORD PTR _y$11[ebp]
  00422	83 e9 01	 sub	 ecx, 1
  00425	0f af 8d 64 ff
	ff ff		 imul	 ecx, DWORD PTR _width$[ebp]
  0042c	0f af 8d 4c ff
	ff ff		 imul	 ecx, DWORD PTR _nrbyte$10[ebp]
  00433	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _x$12[ebp]
  00439	0f af 95 4c ff
	ff ff		 imul	 edx, DWORD PTR _nrbyte$10[ebp]
  00440	03 95 6c ff ff
	ff		 add	 edx, DWORD PTR _bufferswap$[ebp]
  00446	8a 00		 mov	 al, BYTE PTR [eax]
  00448	88 44 0a 03	 mov	 BYTE PTR [edx+ecx+3], al
$LN18@load_dds_f:

; 3986 : 				}

  0044c	e9 7a fd ff ff	 jmp	 $LN8@load_dds_f
$LN9@load_dds_f:

; 3987 : 			}

  00451	e9 48 fd ff ff	 jmp	 $LN5@load_dds_f
$LN6@load_dds_f:

; 3988 : 
; 3989 : 			while ( !lock_texture ( override_screen, temp ) )

  00456	8b 45 fc	 mov	 eax, DWORD PTR _temp$[ebp]
  00459	50		 push	 eax
  0045a	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _override_screen$[ebp]
  00460	51		 push	 ecx
  00461	e8 00 00 00 00	 call	 ?lock_texture@@YGHPAUSCREEN@@H@Z ; lock_texture
  00466	85 c0		 test	 eax, eax
  00468	75 0a		 jne	 SHORT $LN12@load_dds_f

; 3990 : 			{
; 3991 : 				Sleep ( 100 );

  0046a	6a 64		 push	 100			; 00000064H
  0046c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 3992 : 			}

  00472	eb e2		 jmp	 SHORT $LN6@load_dds_f
$LN12@load_dds_f:

; 3993 : 
; 3994 : 			if (type == TEXTURE_TYPE_NOALPHA_NOPALETTE)

  00474	83 bd 74 ff ff
	ff 05		 cmp	 DWORD PTR _type$[ebp], 5
  0047b	75 25		 jne	 SHORT $LN19@load_dds_f

; 3995 : 				convert_no_alpha_24bit_texture_map_data ( bufferswap, width, height, override_screen, fp );

  0047d	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  00480	50		 push	 eax
  00481	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _override_screen$[ebp]
  00487	51		 push	 ecx
  00488	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _height$[ebp]
  0048e	52		 push	 edx
  0048f	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _width$[ebp]
  00495	50		 push	 eax
  00496	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _bufferswap$[ebp]
  0049c	51		 push	 ecx
  0049d	e8 00 00 00 00	 call	 ?convert_no_alpha_24bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_no_alpha_24bit_texture_map_data
$LN19@load_dds_f:

; 3996 : 			if (type == TEXTURE_TYPE_MULTIPLEALPHA)// || type == TEXTURE_TYPE_SINGLEALPHA)

  004a2	83 bd 74 ff ff
	ff 03		 cmp	 DWORD PTR _type$[ebp], 3
  004a9	75 25		 jne	 SHORT $LN20@load_dds_f

; 3997 : 				convert_multiple_alpha_32bit_texture_map_data ( bufferswap, width, height, override_screen, fp );

  004ab	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  004ae	50		 push	 eax
  004af	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _override_screen$[ebp]
  004b5	51		 push	 ecx
  004b6	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _height$[ebp]
  004bc	52		 push	 edx
  004bd	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _width$[ebp]
  004c3	50		 push	 eax
  004c4	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _bufferswap$[ebp]
  004ca	51		 push	 ecx
  004cb	e8 00 00 00 00	 call	 ?convert_multiple_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_multiple_alpha_32bit_texture_map_data
$LN20@load_dds_f:

; 3998 : 			if (type == TEXTURE_TYPE_SINGLEALPHA)

  004d0	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR _type$[ebp], 2
  004d7	75 25		 jne	 SHORT $LN21@load_dds_f

; 3999 : 				convert_single_alpha_32bit_texture_map_data ( bufferswap, width, height, override_screen, fp );

  004d9	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  004dc	50		 push	 eax
  004dd	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _override_screen$[ebp]
  004e3	51		 push	 ecx
  004e4	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _height$[ebp]
  004ea	52		 push	 edx
  004eb	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _width$[ebp]
  004f1	50		 push	 eax
  004f2	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _bufferswap$[ebp]
  004f8	51		 push	 ecx
  004f9	e8 00 00 00 00	 call	 ?convert_single_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_single_alpha_32bit_texture_map_data
$LN21@load_dds_f:

; 4000 : 
; 4001 : 			unlock_texture ( override_screen );

  004fe	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _override_screen$[ebp]
  00504	50		 push	 eax
  00505	e8 00 00 00 00	 call	 ?unlock_texture@@YGHPAUSCREEN@@@Z ; unlock_texture

; 4002 : 
; 4003 : 			safe_free (buffer);

  0050a	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _buffer$[ebp]
  00510	50		 push	 eax
  00511	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 4004 : 			safe_free (bufferswap);

  00516	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _bufferswap$[ebp]
  0051c	50		 push	 eax
  0051d	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 4005 : 
; 4006 : 			width >>= 1;

  00522	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _width$[ebp]
  00528	d1 f8		 sar	 eax, 1
  0052a	89 85 64 ff ff
	ff		 mov	 DWORD PTR _width$[ebp], eax

; 4007 : 			height >>= 1;

  00530	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _height$[ebp]
  00536	d1 f8		 sar	 eax, 1
  00538	89 85 60 ff ff
	ff		 mov	 DWORD PTR _height$[ebp], eax

; 4008 : 
; 4009 : 		}

  0053e	e9 d0 fb ff ff	 jmp	 $LN2@load_dds_f
$LN3@load_dds_f:

; 4010 : 
; 4011 : 		safe_fclose (fp);

  00543	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  00546	50		 push	 eax
  00547	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 4012 : 
; 4013 : 		return override_screen;

  0054c	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _override_screen$[ebp]
$LN1@load_dds_f:

; 4014 : }

  00552	5f		 pop	 edi
  00553	5e		 pop	 esi
  00554	5b		 pop	 ebx
  00555	8b e5		 mov	 esp, ebp
  00557	5d		 pop	 ebp
  00558	c2 0c 00	 ret	 12			; 0000000cH
?load_dds_file_screen@@YGPAUSCREEN@@PBDHM@Z ENDP	; load_dds_file_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?clear_texture_override_names@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?clear_texture_override_names@@YGXXZ PROC		; clear_texture_override_names, COMDAT

; 3170 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3171 : 	int count;
; 3172 : 
; 3173 : 	for ( count = 0; count < MAX_TEXTURES; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@clear_text
$LN2@clear_text:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@clear_text:
  0001b	81 7d fc 00 20
	00 00		 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  00022	7d 52		 jge	 SHORT $LN1@clear_text

; 3174 : 	{
; 3175 : 		system_texture_override_names[count].name[0] = '\0';

  00024	69 45 fc 4c 01
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 332
  0002b	b9 01 00 00 00	 mov	 ecx, 1
  00030	6b d1 00	 imul	 edx, ecx, 0
  00033	c6 84 10 00 00
	00 00 00	 mov	 BYTE PTR ?system_texture_override_names@@3PAUOVERRIDENAME@@A[eax+edx], 0

; 3176 : 		system_texture_override_names[count].path[0] = '\0';

  0003b	69 45 fc 4c 01
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 332
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	6b d1 00	 imul	 edx, ecx, 0
  0004a	c6 84 10 40 00
	00 00 00	 mov	 BYTE PTR ?system_texture_override_names@@3PAUOVERRIDENAME@@A[eax+edx+64], 0

; 3177 : 		system_texture_override_names[count].type = TYPE_ORIGINAL;

  00052	69 45 fc 4c 01
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 332
  00059	c7 80 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?system_texture_override_names@@3PAUOVERRIDENAME@@A[eax+324], 0

; 3178 : 		system_texture_override_names[count].camo = CAMO_REGULAR;

  00063	69 45 fc 4c 01
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 332
  0006a	c7 80 48 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?system_texture_override_names@@3PAUOVERRIDENAME@@A[eax+328], 0

; 3179 : 	}

  00074	eb 9c		 jmp	 SHORT $LN2@clear_text
$LN1@clear_text:

; 3180 : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?clear_texture_override_names@@YGXXZ ENDP		; clear_texture_override_names
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?load_texture_override@@YGXXZ
_TEXT	SEGMENT
tv148 = -4624						; size = 4
tv75 = -4624						; size = 4
_override_screen$1 = -4108				; size = 4
_missing_textures$ = -4104				; size = 4096
_count$ = -8						; size = 4
_full_override_texture_filename$ = -4			; size = 4
?load_texture_override@@YGXXZ PROC			; load_texture_override, COMDAT

; 3610 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 12 00 00	 mov	 eax, 4624		; 00001210H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 3611 : 	const char
; 3612 : 		*full_override_texture_filename;
; 3613 : 
; 3614 : 	int
; 3615 : 		count;
; 3616 : 
; 3617 : 	char
; 3618 : 		missing_textures[4096] = { '\0' };

  00010	68 00 10 00 00	 push	 4096			; 00001000H
  00015	6a 00		 push	 0
  00017	8d 85 f8 ef ff
	ff		 lea	 eax, DWORD PTR _missing_textures$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _memset
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3619 : 
; 3620 : 	// Now that all the screens are loaded we check to see if there is are any overrides
; 3621 : 	for ( count = 0; count < MAX_TEXTURES; count++ )

  00026	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0002d	eb 09		 jmp	 SHORT $LN4@load_textu
$LN2@load_textu:
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00032	83 c0 01	 add	 eax, 1
  00035	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@load_textu:
  00038	81 7d f8 00 20
	00 00		 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  0003f	0f 8d 02 02 00
	00		 jge	 $LN3@load_textu

; 3622 : 	{
; 3623 : 		screen
; 3624 : 			*override_screen = NULL;

  00045	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _override_screen$1[ebp], 0

; 3625 : 
; 3626 : 		full_override_texture_filename = system_texture_override_names[count].path;

  0004f	69 45 f8 4c 01
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 332
  00056	05 40 00 00 00	 add	 eax, OFFSET ?system_texture_override_names@@3PAUOVERRIDENAME@@A+64
  0005b	89 45 fc	 mov	 DWORD PTR _full_override_texture_filename$[ebp], eax

; 3627 : 		switch ( system_texture_override_names[count].type )

  0005e	69 45 f8 4c 01
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 332
  00065	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR ?system_texture_override_names@@3PAUOVERRIDENAME@@A[eax+324]
  0006b	89 8d f0 ed ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  00071	83 bd f0 ed ff
	ff 01		 cmp	 DWORD PTR tv75[ebp], 1
  00078	74 17		 je	 SHORT $LN7@load_textu
  0007a	83 bd f0 ed ff
	ff 02		 cmp	 DWORD PTR tv75[ebp], 2
  00081	74 6d		 je	 SHORT $LN11@load_textu
  00083	83 bd f0 ed ff
	ff 03		 cmp	 DWORD PTR tv75[ebp], 3
  0008a	74 2d		 je	 SHORT $LN9@load_textu
  0008c	e9 96 00 00 00	 jmp	 $LN13@load_textu
$LN7@load_textu:

; 3628 : 		{
; 3629 : 			case TYPE_BMP:
; 3630 : 			{
; 3631 : #if DEBUG_MODULE
; 3632 : 				debug_log ("++OVERRIDES++ found bmp file %s", full_override_texture_filename);
; 3633 : #endif
; 3634 : 				if (!*missing_textures)

  00091	b8 01 00 00 00	 mov	 eax, 1
  00096	6b c8 00	 imul	 ecx, eax, 0
  00099	0f b6 94 0d f8
	ef ff ff	 movzx	 edx, BYTE PTR _missing_textures$[ebp+ecx]
  000a1	85 d2		 test	 edx, edx
  000a3	75 0f		 jne	 SHORT $LN8@load_textu

; 3635 : 				{
; 3636 : 					override_screen = load_bmp_file_screen(full_override_texture_filename);

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _full_override_texture_filename$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  000ae	89 85 f4 ef ff
	ff		 mov	 DWORD PTR _override_screen$1[ebp], eax
$LN8@load_textu:

; 3637 : 				}
; 3638 : 				break;

  000b4	e9 fc 00 00 00	 jmp	 $LN5@load_textu
$LN9@load_textu:

; 3639 : 			}
; 3640 : 			case TYPE_TGA:
; 3641 : 			{
; 3642 : #if DEBUG_MODULE
; 3643 : 				debug_log ("++OVERRIDES++ found tga file %s", full_override_texture_filename);
; 3644 : #endif
; 3645 : 				if (!*missing_textures)

  000b9	b8 01 00 00 00	 mov	 eax, 1
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	0f b6 94 0d f8
	ef ff ff	 movzx	 edx, BYTE PTR _missing_textures$[ebp+ecx]
  000c9	85 d2		 test	 edx, edx
  000cb	75 1e		 jne	 SHORT $LN10@load_textu

; 3646 : 				{
; 3647 : 					override_screen = load_tga_file_screen(full_override_texture_filename, 0, texture_gamma_correction(count));

  000cd	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?texture_gamma_correction@@YGMH@Z ; texture_gamma_correction
  000d6	51		 push	 ecx
  000d7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000da	6a 00		 push	 0
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _full_override_texture_filename$[ebp]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 ?load_tga_file_screen@@YGPAUSCREEN@@PBDHM@Z ; load_tga_file_screen
  000e5	89 85 f4 ef ff
	ff		 mov	 DWORD PTR _override_screen$1[ebp], eax
$LN10@load_textu:

; 3648 : 				}
; 3649 : 				break;

  000eb	e9 c5 00 00 00	 jmp	 $LN5@load_textu
$LN11@load_textu:

; 3650 : 			}
; 3651 : 			case TYPE_DDS:
; 3652 : 			{
; 3653 : #if DEBUG_MODULE
; 3654 : 				debug_log ("++OVERRIDES++ found dds file %s", full_override_texture_filename);
; 3655 : #endif
; 3656 : 				if (!*missing_textures)

  000f0	b8 01 00 00 00	 mov	 eax, 1
  000f5	6b c8 00	 imul	 ecx, eax, 0
  000f8	0f b6 94 0d f8
	ef ff ff	 movzx	 edx, BYTE PTR _missing_textures$[ebp+ecx]
  00100	85 d2		 test	 edx, edx
  00102	75 1e		 jne	 SHORT $LN12@load_textu

; 3657 : 				{
; 3658 : 					override_screen = load_dds_file_screen(full_override_texture_filename, 0, texture_gamma_correction(count));

  00104	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ?texture_gamma_correction@@YGMH@Z ; texture_gamma_correction
  0010d	51		 push	 ecx
  0010e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00111	6a 00		 push	 0
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _full_override_texture_filename$[ebp]
  00116	51		 push	 ecx
  00117	e8 00 00 00 00	 call	 ?load_dds_file_screen@@YGPAUSCREEN@@PBDHM@Z ; load_dds_file_screen
  0011c	89 85 f4 ef ff
	ff		 mov	 DWORD PTR _override_screen$1[ebp], eax
$LN12@load_textu:

; 3659 : 				}
; 3660 : 				break;

  00122	e9 8e 00 00 00	 jmp	 $LN5@load_textu
$LN13@load_textu:

; 3661 : 			}
; 3662 : 			default:
; 3663 : 			{
; 3664 : 				// need to provide all these textures ourselves
; 3665 : 				if ( count >= TEXTURE_INDEX_LAST && count < number_of_system_textures )

  00127	81 7d f8 0e 09
	00 00		 cmp	 DWORD PTR _count$[ebp], 2318 ; 0000090eH
  0012e	0f 8c 81 00 00
	00		 jl	 $LN14@load_textu
  00134	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00137	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  0013d	7d 76		 jge	 SHORT $LN14@load_textu

; 3666 : 				{
; 3667 : 					sprintf ( missing_textures + strlen ( missing_textures ), "\n(%d): %s%s (object %s)", count, get_system_texture_name ( count ), system_texture_info[count].flags.camoflage_texture ? TEXTSUFFIX_DESERT : "", new_texture_sources[count] );

  0013f	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00142	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  0014a	66 c1 e9 07	 shr	 cx, 7
  0014e	66 83 e1 01	 and	 cx, 1
  00152	0f b7 d1	 movzx	 edx, cx
  00155	85 d2		 test	 edx, edx
  00157	74 0c		 je	 SHORT $LN19@load_textu
  00159	c7 85 f0 ed ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], OFFSET ??_C@_02KEDOHJFP@?9D@
  00163	eb 0a		 jmp	 SHORT $LN20@load_textu
$LN19@load_textu:
  00165	c7 85 f0 ed ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN20@load_textu:
  0016f	69 45 f8 04 01
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 260
  00176	05 00 00 00 00	 add	 eax, OFFSET ?new_texture_sources@@3PAY0BAE@DA ; new_texture_sources
  0017b	50		 push	 eax
  0017c	8b 8d f0 ed ff
	ff		 mov	 ecx, DWORD PTR tv148[ebp]
  00182	51		 push	 ecx
  00183	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  00186	52		 push	 edx
  00187	e8 00 00 00 00	 call	 ?get_system_texture_name@@YGPBDH@Z ; get_system_texture_name
  0018c	50		 push	 eax
  0018d	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00190	50		 push	 eax
  00191	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JFKCMKBC@?6?$CI?$CFd?$CJ?3?5?$CFs?$CFs?5?$CIobject?5?$CFs?$CJ@
  00196	8d 8d f8 ef ff
	ff		 lea	 ecx, DWORD PTR _missing_textures$[ebp]
  0019c	51		 push	 ecx
  0019d	e8 00 00 00 00	 call	 _strlen
  001a2	83 c4 04	 add	 esp, 4
  001a5	8d 94 05 f8 ef
	ff ff		 lea	 edx, DWORD PTR _missing_textures$[ebp+eax]
  001ac	52		 push	 edx
  001ad	e8 00 00 00 00	 call	 _sprintf
  001b2	83 c4 18	 add	 esp, 24			; 00000018H
$LN14@load_textu:
$LN5@load_textu:

; 3668 : 				}
; 3669 : 				break;
; 3670 : 			}
; 3671 : 		}
; 3672 : 		//VJ 050821 check if it worked
; 3673 : 		if (override_screen)

  001b5	83 bd f4 ef ff
	ff 00		 cmp	 DWORD PTR _override_screen$1[ebp], 0
  001bc	74 73		 je	 SHORT $LN15@load_textu

; 3674 : 		{
; 3675 : 			override_screen->do_not_destroy = FALSE;

  001be	b8 bf ff 00 00	 mov	 eax, 65471		; 0000ffbfH
  001c3	8b 8d f4 ef ff
	ff		 mov	 ecx, DWORD PTR _override_screen$1[ebp]
  001c9	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  001cd	8b 95 f4 ef ff
	ff		 mov	 edx, DWORD PTR _override_screen$1[ebp]
  001d3	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 3676 : 			// now we set the pointer in the system textxures array to point to this
; 3677 : 			// screen rather than the original screen
; 3678 : 			system_textures[count] = override_screen;

  001d7	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  001da	8b 8d f4 ef ff
	ff		 mov	 ecx, DWORD PTR _override_screen$1[ebp]
  001e0	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], ecx

; 3679 : 			//VJ 04/12/12 add the sreen also to this array because the function set_texture_camoflage uses it and it is called after this stuff
; 3680 : 			system_texture_info[count].texture_screen = override_screen;

  001e7	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  001ea	8b 8d f4 ef ff
	ff		 mov	 ecx, DWORD PTR _override_screen$1[ebp]
  001f0	89 0c c5 04 00
	00 00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4], ecx

; 3681 : 			// adjust alpha bit
; 3682 : 			system_texture_info[count].flags.contains_alpha = override_screen->contains_alpha;

  001f7	8b 85 f4 ef ff
	ff		 mov	 eax, DWORD PTR _override_screen$1[ebp]
  001fd	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00201	66 c1 e9 07	 shr	 cx, 7
  00205	66 83 e1 01	 and	 cx, 1
  00209	66 83 e1 01	 and	 cx, 1
  0020d	66 c1 e1 02	 shl	 cx, 2
  00211	ba fb ff 00 00	 mov	 edx, 65531		; 0000fffbH
  00216	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00219	66 23 14 c5 00
	00 00 00	 and	 dx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  00221	66 0b d1	 or	 dx, cx
  00224	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00227	66 89 14 cd 00
	00 00 00	 mov	 WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[ecx*8], dx

; 3683 : 		}
; 3684 : 		else

  0022f	eb 11		 jmp	 SHORT $LN16@load_textu
$LN15@load_textu:

; 3685 : 		{
; 3686 : 			//not done, reset flag
; 3687 : 			system_texture_override_names[count].type = TYPE_ORIGINAL;

  00231	69 45 f8 4c 01
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 332
  00238	c7 80 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?system_texture_override_names@@3PAUOVERRIDENAME@@A[eax+324], 0
$LN16@load_textu:

; 3688 : 		}
; 3689 : 	}

  00242	e9 e8 fd ff ff	 jmp	 $LN2@load_textu
$LN3@load_textu:

; 3690 : 	if (*missing_textures)

  00247	b8 01 00 00 00	 mov	 eax, 1
  0024c	6b c8 00	 imul	 ecx, eax, 0
  0024f	0f b6 94 0d f8
	ef ff ff	 movzx	 edx, BYTE PTR _missing_textures$[ebp+ecx]
  00257	85 d2		 test	 edx, edx
  00259	74 14		 je	 SHORT $LN17@load_textu

; 3691 : 	{
; 3692 : 		debug_fatal ( "Missing texture(s)%s", missing_textures );

  0025b	8d 85 f8 ef ff
	ff		 lea	 eax, DWORD PTR _missing_textures$[ebp]
  00261	50		 push	 eax
  00262	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JMNNKLPB@Missing?5texture?$CIs?$CJ?$CFs@
  00267	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0026c	83 c4 08	 add	 esp, 8
$LN17@load_textu:

; 3693 : 	}
; 3694 : 	real_set_texture_camoflage ( texture_camoflage );

  0026f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_camoflage@@3HA
  00274	50		 push	 eax
  00275	e8 00 00 00 00	 call	 ?real_set_texture_camoflage@@YGXH@Z ; real_set_texture_camoflage

; 3695 : 	apply_object_3d_reflection_texture_map ();

  0027a	e8 00 00 00 00	 call	 ?apply_object_3d_reflection_texture_map@@YGXXZ ; apply_object_3d_reflection_texture_map

; 3696 : }

  0027f	5f		 pop	 edi
  00280	5e		 pop	 esi
  00281	5b		 pop	 ebx
  00282	8b e5		 mov	 esp, ebp
  00284	5d		 pop	 ebp
  00285	c3		 ret	 0
?load_texture_override@@YGXXZ ENDP			; load_texture_override
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?initialize_texture_override_names@@YGHPBD@Z
_TEXT	SEGMENT
tv83 = -692						; size = 4
tv70 = -692						; size = 4
tv69 = -692						; size = 4
_old_type$1 = -560					; size = 4
_type$2 = -556						; size = 4
_extension$3 = -552					; size = 4
_camo$4 = -548						; size = 4
_index$5 = -544						; size = 4
_this_entry$6 = -540					; size = 4
_overrider$ = -536					; size = 4
_is_terrain_directory$ = -532				; size = 4
_filename$ = -528					; size = 260
_directory_search_path$ = -268				; size = 260
_count$ = -8						; size = 4
_directory_listing$ = -4				; size = 4
_mapname$ = 8						; size = 4
?initialize_texture_override_names@@YGHPBD@Z PROC	; initialize_texture_override_names, COMDAT

; 3192 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 02 00
	00		 sub	 esp, 692		; 000002b4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3193 : 	directory_file_list
; 3194 : 		*directory_listing;
; 3195 : 
; 3196 : 	int
; 3197 : 		count = 0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 3198 : 
; 3199 : 	char
; 3200 : 		directory_search_path[260],
; 3201 : 		filename[260];
; 3202 : 
; 3203 : 	const int
; 3204 : 		is_terrain_directory = strnicmp(mapname, "terrain", 7) == 0;

  00013	6a 07		 push	 7
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_07JBFDOFDL@terrain@
  0001a	8b 45 08	 mov	 eax, DWORD PTR _mapname$[ebp]
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strnicmp
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	85 c0		 test	 eax, eax
  00029	75 0c		 jne	 SHORT $LN31@initialize
  0002b	c7 85 4c fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv69[ebp], 1
  00035	eb 0a		 jmp	 SHORT $LN32@initialize
$LN31@initialize:
  00037	c7 85 4c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN32@initialize:
  00041	8b 8d 4c fd ff
	ff		 mov	 ecx, DWORD PTR tv69[ebp]
  00047	89 8d ec fd ff
	ff		 mov	 DWORD PTR _is_terrain_directory$[ebp], ecx

; 3205 : 
; 3206 : 	camo_type
; 3207 : 		overrider;
; 3208 : 
; 3209 : 	switch (get_global_season())

  0004d	a1 14 04 00 00	 mov	 eax, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044
  00052	89 85 4c fd ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00058	83 bd 4c fd ff
	ff 03		 cmp	 DWORD PTR tv70[ebp], 3
  0005f	74 0b		 je	 SHORT $LN9@initialize
  00061	83 bd 4c fd ff
	ff 04		 cmp	 DWORD PTR tv70[ebp], 4
  00068	74 0e		 je	 SHORT $LN10@initialize
  0006a	eb 18		 jmp	 SHORT $LN11@initialize
$LN9@initialize:

; 3210 : 	{
; 3211 : 	case SESSION_SEASON_WINTER:
; 3212 : 		overrider = CAMO_WINTER;

  0006c	c7 85 e8 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _overrider$[ebp], 1

; 3213 : 		break;

  00076	eb 16		 jmp	 SHORT $LN2@initialize
$LN10@initialize:

; 3214 : 	case SESSION_SEASON_DESERT:
; 3215 : 		overrider = CAMO_DESERT;

  00078	c7 85 e8 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR _overrider$[ebp], 2

; 3216 : 		break;

  00082	eb 0a		 jmp	 SHORT $LN2@initialize
$LN11@initialize:

; 3217 : 	default:
; 3218 : 		overrider = CAMO_REGULAR;

  00084	c7 85 e8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _overrider$[ebp], 0
$LN2@initialize:

; 3219 : 		break;
; 3220 : 	}
; 3221 : 
; 3222 : 	snprintf (directory_search_path, sizeof(directory_search_path), "%s\\%s\\*", TEXTURE_OVERRIDE_DIRECTORY, mapname);

  0008e	8b 45 08	 mov	 eax, DWORD PTR _mapname$[ebp]
  00091	50		 push	 eax
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_07PHOBPKGE@?$CFs?2?$CFs?2?$CK@
  0009c	68 04 01 00 00	 push	 260			; 00000104H
  000a1	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _directory_search_path$[ebp]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 _sprintf_s
  000ad	83 c4 14	 add	 esp, 20			; 00000014H

; 3223 : 	directory_listing = get_first_directory_file ( directory_search_path );

  000b0	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _directory_search_path$[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?get_first_directory_file@@YGPAUDIRECTORY_FILE_LIST@@PBD@Z ; get_first_directory_file
  000bc	89 45 fc	 mov	 DWORD PTR _directory_listing$[ebp], eax

; 3224 : 	if ( !directory_listing )

  000bf	83 7d fc 00	 cmp	 DWORD PTR _directory_listing$[ebp], 0
  000c3	75 07		 jne	 SHORT $LN6@initialize

; 3225 : 		return 0;

  000c5	33 c0		 xor	 eax, eax
  000c7	e9 e9 02 00 00	 jmp	 $LN1@initialize
$LN6@initialize:

; 3226 : 
; 3227 : 	do
; 3228 : 	{
; 3229 : 		switch ( get_directory_file_type ( directory_listing ) )

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?get_directory_file_type@@YG?AW4DIRECTORY_FILE_TYPES@@PAUDIRECTORY_FILE_LIST@@@Z ; get_directory_file_type
  000d5	89 85 4c fd ff
	ff		 mov	 DWORD PTR tv83[ebp], eax
  000db	83 bd 4c fd ff
	ff 01		 cmp	 DWORD PTR tv83[ebp], 1
  000e2	74 0e		 je	 SHORT $LN13@initialize
  000e4	83 bd 4c fd ff
	ff 02		 cmp	 DWORD PTR tv83[ebp], 2
  000eb	74 7b		 je	 SHORT $LN16@initialize
  000ed	e9 a6 02 00 00	 jmp	 $LN4@initialize
$LN13@initialize:

; 3230 : 		{
; 3231 : 		case DIRECTORY_FILE_TYPE_DIRECTORY:
; 3232 : 			{
; 3233 : 				if (!is_terrain_directory)

  000f2	83 bd ec fd ff
	ff 00		 cmp	 DWORD PTR _is_terrain_directory$[ebp], 0
  000f9	75 68		 jne	 SHORT $LN14@initialize

; 3234 : 				{
; 3235 : 					const char
; 3236 : 						*this_entry = get_directory_file_filename ( directory_listing );

  000fb	8b 45 fc	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ?get_directory_file_filename@@YGPBDPAUDIRECTORY_FILE_LIST@@@Z ; get_directory_file_filename
  00104	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _this_entry$6[ebp], eax

; 3237 : 
; 3238 : 					if (*this_entry == '.')

  0010a	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _this_entry$6[ebp]
  00110	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00113	83 f9 2e	 cmp	 ecx, 46			; 0000002eH
  00116	75 05		 jne	 SHORT $LN15@initialize

; 3239 : 					{
; 3240 : 						break;

  00118	e9 7b 02 00 00	 jmp	 $LN4@initialize
$LN15@initialize:

; 3241 : 					}
; 3242 : 
; 3243 : 					snprintf(filename, sizeof(filename), "%s\\%s", mapname, this_entry);

  0011d	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _this_entry$6[ebp]
  00123	50		 push	 eax
  00124	8b 4d 08	 mov	 ecx, DWORD PTR _mapname$[ebp]
  00127	51		 push	 ecx
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
  0012d	68 04 01 00 00	 push	 260			; 00000104H
  00132	8d 95 f0 fd ff
	ff		 lea	 edx, DWORD PTR _filename$[ebp]
  00138	52		 push	 edx
  00139	e8 00 00 00 00	 call	 _sprintf_s
  0013e	83 c4 14	 add	 esp, 20			; 00000014H

; 3244 : 					strupr(filename);

  00141	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00147	50		 push	 eax
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strupr
  0014e	83 c4 04	 add	 esp, 4

; 3245 : 
; 3246 : 					#if DEBUG_MODULE
; 3247 : 					debug_log("Entering directory %s", filename);
; 3248 : 					#endif
; 3249 : 
; 3250 : 					count += initialize_texture_override_names(filename);

  00151	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ?initialize_texture_override_names@@YGHPBD@Z ; initialize_texture_override_names
  0015d	03 45 f8	 add	 eax, DWORD PTR _count$[ebp]
  00160	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN14@initialize:

; 3251 : 				}
; 3252 : 				break;

  00163	e9 30 02 00 00	 jmp	 $LN4@initialize
$LN16@initialize:

; 3253 : 			}
; 3254 : 		case DIRECTORY_FILE_TYPE_FILE:
; 3255 : 			{
; 3256 : 				int
; 3257 : 					index;
; 3258 : 				camo_type
; 3259 : 					camo;
; 3260 : 				const char*
; 3261 : 					extension;
; 3262 : 				file_type
; 3263 : 					type = TYPE_ORIGINAL;

  00168	c7 85 d4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _type$2[ebp], 0

; 3264 : 
; 3265 : 				strcpy(filename, get_directory_file_filename ( directory_listing ));

  00172	8b 45 fc	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 ?get_directory_file_filename@@YGPBDPAUDIRECTORY_FILE_LIST@@@Z ; get_directory_file_filename
  0017b	50		 push	 eax
  0017c	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  00182	51		 push	 ecx
  00183	e8 00 00 00 00	 call	 _strcpy
  00188	83 c4 08	 add	 esp, 8

; 3266 : 				strupr(filename);

  0018b	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00191	50		 push	 eax
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strupr
  00198	83 c4 04	 add	 esp, 4

; 3267 : 
; 3268 : 				extension = strrchr(filename, '.');

  0019b	6a 2e		 push	 46			; 0000002eH
  0019d	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?strrchr@@YAPADQADH@Z	; strrchr
  001a9	83 c4 08	 add	 esp, 8
  001ac	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _extension$3[ebp], eax

; 3269 : 				if (!extension)

  001b2	83 bd d8 fd ff
	ff 00		 cmp	 DWORD PTR _extension$3[ebp], 0
  001b9	75 19		 jne	 SHORT $LN17@initialize

; 3270 : 				{
; 3271 : 					debug_log("No extension for file: %s", filename);

  001bb	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  001c1	50		 push	 eax
  001c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JKKHNCCM@No?5extension?5for?5file?3?5?$CFs@
  001c7	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001cc	83 c4 08	 add	 esp, 8

; 3272 : 					break;

  001cf	e9 c4 01 00 00	 jmp	 $LN4@initialize
$LN17@initialize:

; 3273 : 				}
; 3274 : 
; 3275 : 				if (strcmp(extension, ".BMP") == 0)

  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_04LEMIEKPG@?4BMP@
  001d9	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _extension$3[ebp]
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 _strcmp
  001e5	83 c4 08	 add	 esp, 8
  001e8	85 c0		 test	 eax, eax
  001ea	75 0c		 jne	 SHORT $LN18@initialize

; 3276 : 					type = TYPE_BMP;

  001ec	c7 85 d4 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _type$2[ebp], 1
  001f6	eb 61		 jmp	 SHORT $LN19@initialize
$LN18@initialize:

; 3277 : 				else if (strcmp(extension, ".TGA") == 0)

  001f8	68 00 00 00 00	 push	 OFFSET ??_C@_04JPPEOEHD@?4TGA@
  001fd	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _extension$3[ebp]
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 _strcmp
  00209	83 c4 08	 add	 esp, 8
  0020c	85 c0		 test	 eax, eax
  0020e	75 0c		 jne	 SHORT $LN20@initialize

; 3278 : 					type = TYPE_TGA;

  00210	c7 85 d4 fd ff
	ff 03 00 00 00	 mov	 DWORD PTR _type$2[ebp], 3
  0021a	eb 3d		 jmp	 SHORT $LN19@initialize
$LN20@initialize:

; 3279 : 				else if (strcmp(extension, ".DDS") == 0)

  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_04LFFPHNGG@?4DDS@
  00221	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _extension$3[ebp]
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 _strcmp
  0022d	83 c4 08	 add	 esp, 8
  00230	85 c0		 test	 eax, eax
  00232	75 0c		 jne	 SHORT $LN22@initialize

; 3280 : 					type = TYPE_DDS;

  00234	c7 85 d4 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR _type$2[ebp], 2

; 3281 : 				else

  0023e	eb 19		 jmp	 SHORT $LN19@initialize
$LN22@initialize:

; 3282 : 				{
; 3283 : 					debug_log("Texture file not BMP, TGA or DDS: %s", filename);

  00240	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00246	50		 push	 eax
  00247	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BKMCJOOO@Texture?5file?5not?5BMP?0?5TGA?5or?5DD@
  0024c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00251	83 c4 08	 add	 esp, 8

; 3284 : 					continue;

  00254	e9 3f 01 00 00	 jmp	 $LN4@initialize
$LN19@initialize:

; 3285 : 				}
; 3286 : 
; 3287 : 				index = match_system_texture_name ( filename, &camo );

  00259	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _camo$4[ebp]
  0025f	50		 push	 eax
  00260	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  00266	51		 push	 ecx
  00267	e8 00 00 00 00	 call	 ?match_system_texture_name@@YGHPBDPAW4CAMO_TYPE@@@Z ; match_system_texture_name
  0026c	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _index$5[ebp], eax

; 3288 : 
; 3289 : 				if (index >= 0 && index < MAX_TEXTURES)

  00272	83 bd e0 fd ff
	ff 00		 cmp	 DWORD PTR _index$5[ebp], 0
  00279	0f 8c 19 01 00
	00		 jl	 $LN4@initialize
  0027f	81 bd e0 fd ff
	ff 00 20 00 00	 cmp	 DWORD PTR _index$5[ebp], 8192 ; 00002000H
  00289	0f 8d 09 01 00
	00		 jge	 $LN4@initialize

; 3290 : 				{
; 3291 : 					file_type
; 3292 : 						old_type;
; 3293 : 
; 3294 : 					old_type = system_texture_override_names[index].type;

  0028f	69 85 e0 fd ff
	ff 4c 01 00 00	 imul	 eax, DWORD PTR _index$5[ebp], 332
  00299	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR ?system_texture_override_names@@3PAUOVERRIDENAME@@A[eax+324]
  0029f	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _old_type$1[ebp], ecx

; 3295 : 
; 3296 : 					if (camo == overrider || camo == CAMO_REGULAR && old_type == TYPE_ORIGINAL || camo == CAMO_DESERT && system_texture_info[index].flags.camoflage_texture)

  002a5	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _camo$4[ebp]
  002ab	3b 85 e8 fd ff
	ff		 cmp	 eax, DWORD PTR _overrider$[ebp]
  002b1	74 40		 je	 SHORT $LN26@initialize
  002b3	83 bd dc fd ff
	ff 00		 cmp	 DWORD PTR _camo$4[ebp], 0
  002ba	75 09		 jne	 SHORT $LN27@initialize
  002bc	83 bd d0 fd ff
	ff 00		 cmp	 DWORD PTR _old_type$1[ebp], 0
  002c3	74 2e		 je	 SHORT $LN26@initialize
$LN27@initialize:
  002c5	83 bd dc fd ff
	ff 02		 cmp	 DWORD PTR _camo$4[ebp], 2
  002cc	0f 85 c6 00 00
	00		 jne	 $LN4@initialize
  002d2	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _index$5[ebp]
  002d8	66 8b 0c c5 00
	00 00 00	 mov	 cx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  002e0	66 c1 e9 07	 shr	 cx, 7
  002e4	66 83 e1 01	 and	 cx, 1
  002e8	0f b7 d1	 movzx	 edx, cx
  002eb	85 d2		 test	 edx, edx
  002ed	0f 84 a5 00 00
	00		 je	 $LN4@initialize
$LN26@initialize:

; 3297 : 					{
; 3298 : 						system_texture_override_names[index].type = type;

  002f3	69 85 e0 fd ff
	ff 4c 01 00 00	 imul	 eax, DWORD PTR _index$5[ebp], 332
  002fd	8b 8d d4 fd ff
	ff		 mov	 ecx, DWORD PTR _type$2[ebp]
  00303	89 88 44 01 00
	00		 mov	 DWORD PTR ?system_texture_override_names@@3PAUOVERRIDENAME@@A[eax+324], ecx

; 3299 : 						sprintf(system_texture_override_names[index].path, "%s\\%s\\%s", TEXTURE_OVERRIDE_DIRECTORY, mapname, filename);

  00309	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0030f	50		 push	 eax
  00310	8b 4d 08	 mov	 ecx, DWORD PTR _mapname$[ebp]
  00313	51		 push	 ecx
  00314	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OIHHAIHH@?4?4?2COHOKUM?2GRAPHICS?2TEXTURES@
  00319	68 00 00 00 00	 push	 OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs@
  0031e	69 95 e0 fd ff
	ff 4c 01 00 00	 imul	 edx, DWORD PTR _index$5[ebp], 332
  00328	81 c2 40 00 00
	00		 add	 edx, OFFSET ?system_texture_override_names@@3PAUOVERRIDENAME@@A+64
  0032e	52		 push	 edx
  0032f	e8 00 00 00 00	 call	 _sprintf
  00334	83 c4 14	 add	 esp, 20			; 00000014H

; 3300 : 						strupr(system_texture_override_names[index].path);

  00337	69 85 e0 fd ff
	ff 4c 01 00 00	 imul	 eax, DWORD PTR _index$5[ebp], 332
  00341	05 40 00 00 00	 add	 eax, OFFSET ?system_texture_override_names@@3PAUOVERRIDENAME@@A+64
  00346	50		 push	 eax
  00347	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strupr
  0034d	83 c4 04	 add	 esp, 4

; 3301 : 						strcpy(system_texture_override_names[index].name, filename);

  00350	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00356	50		 push	 eax
  00357	69 8d e0 fd ff
	ff 4c 01 00 00	 imul	 ecx, DWORD PTR _index$5[ebp], 332
  00361	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?system_texture_override_names@@3PAUOVERRIDENAME@@A ; system_texture_override_names
  00367	51		 push	 ecx
  00368	e8 00 00 00 00	 call	 _strcpy
  0036d	83 c4 08	 add	 esp, 8

; 3302 : 						system_texture_override_names[index].camo = camo;

  00370	69 85 e0 fd ff
	ff 4c 01 00 00	 imul	 eax, DWORD PTR _index$5[ebp], 332
  0037a	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _camo$4[ebp]
  00380	89 88 48 01 00
	00		 mov	 DWORD PTR ?system_texture_override_names@@3PAUOVERRIDENAME@@A[eax+328], ecx

; 3303 : 						#if DEBUG_MODULE
; 3304 : 						debug_log ("++TEXTURE OVERRIDES++ found override file %s %d", filename, index );
; 3305 : 						#endif
; 3306 : 
; 3307 : 						if (old_type == TYPE_ORIGINAL)

  00386	83 bd d0 fd ff
	ff 00		 cmp	 DWORD PTR _old_type$1[ebp], 0
  0038d	75 09		 jne	 SHORT $LN4@initialize

; 3308 : 							count++;

  0038f	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00392	83 c0 01	 add	 eax, 1
  00395	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialize:

; 3309 : 					}
; 3310 : 				}
; 3311 : 				break;
; 3312 : 			}
; 3313 : 		default:
; 3314 : 			break;
; 3315 : 		}
; 3316 : 	}
; 3317 : 	while ( get_next_directory_file ( directory_listing ) );

  00398	8b 45 fc	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  0039b	50		 push	 eax
  0039c	e8 00 00 00 00	 call	 ?get_next_directory_file@@YGHPAUDIRECTORY_FILE_LIST@@@Z ; get_next_directory_file
  003a1	85 c0		 test	 eax, eax
  003a3	0f 85 23 fd ff
	ff		 jne	 $LN6@initialize

; 3318 : 
; 3319 : 	destroy_directory_file_list ( directory_listing );

  003a9	8b 45 fc	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 ?destroy_directory_file_list@@YGXPAUDIRECTORY_FILE_LIST@@@Z ; destroy_directory_file_list

; 3320 : 
; 3321 : 	return (count);

  003b2	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
$LN1@initialize:

; 3322 : }

  003b5	5f		 pop	 edi
  003b6	5e		 pop	 esi
  003b7	5b		 pop	 ebx
  003b8	8b e5		 mov	 esp, ebp
  003ba	5d		 pop	 ebp
  003bb	c2 04 00	 ret	 4
?initialize_texture_override_names@@YGHPBD@Z ENDP	; initialize_texture_override_names
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?check_bitmap_header@@YGHUtagBITMAPINFOHEADER@@PBD@Z
_TEXT	SEGMENT
_bmih$ = 8						; size = 40
_full_override_texture_filename$ = 48			; size = 4
?check_bitmap_header@@YGHUtagBITMAPINFOHEADER@@PBD@Z PROC ; check_bitmap_header, COMDAT

; 3576 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3577 : 	if (bmih.biCompression != BI_RGB)

  00009	83 7d 18 00	 cmp	 DWORD PTR _bmih$[ebp+16], 0
  0000d	74 15		 je	 SHORT $LN2@check_bitm

; 3578 : 	{
; 3579 : 		debug_log ("%s is not uncompressed RGB!", full_override_texture_filename );

  0000f	8b 45 30	 mov	 eax, DWORD PTR _full_override_texture_filename$[ebp]
  00012	50		 push	 eax
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LCBCPMEC@?$CFs?5is?5not?5uncompressed?5RGB?$CB@
  00018	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0001d	83 c4 08	 add	 esp, 8

; 3580 : 		return 0;

  00020	33 c0		 xor	 eax, eax
  00022	eb 3a		 jmp	 SHORT $LN1@check_bitm
$LN2@check_bitm:

; 3581 : 	}
; 3582 : 
; 3583 : 	//VJ only 8 and 24 bit uncompressed bitmaps are read
; 3584 : 	if (bmih.biBitCount != 8 && bmih.biBitCount != 24 && bmih.biBitCount != 32)

  00024	0f b7 45 16	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  00028	83 f8 08	 cmp	 eax, 8
  0002b	74 2c		 je	 SHORT $LN3@check_bitm
  0002d	0f b7 45 16	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  00031	83 f8 18	 cmp	 eax, 24			; 00000018H
  00034	74 23		 je	 SHORT $LN3@check_bitm
  00036	0f b7 45 16	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  0003a	83 f8 20	 cmp	 eax, 32			; 00000020H
  0003d	74 1a		 je	 SHORT $LN3@check_bitm

; 3585 : 	{
; 3586 : 		debug_fatal ("%s is not 8, 24 or 32 bit! (it is : %d)", full_override_texture_filename, bmih.biBitCount);

  0003f	0f b7 45 16	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  00043	50		 push	 eax
  00044	8b 4d 30	 mov	 ecx, DWORD PTR _full_override_texture_filename$[ebp]
  00047	51		 push	 ecx
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@LHMCKHBI@?$CFs?5is?5not?58?0?524?5or?532?5bit?$CB?5?$CIit?5@
  0004d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3587 : 		return 0;

  00055	33 c0		 xor	 eax, eax
  00057	eb 05		 jmp	 SHORT $LN1@check_bitm
$LN3@check_bitm:

; 3588 : 	}
; 3589 : 	/* unlimited size
; 3590 : 	if (bmih.biHeight > MAX_TEXTURE_HEIGHT)
; 3591 : 	{
; 3592 : 		debug_log ("%s taller than the maximum allowed", full_override_texture_filename );
; 3593 : 		return 0;
; 3594 : 	}
; 3595 : 
; 3596 : 	if (bmih.biWidth > MAX_TEXTURE_WIDTH)
; 3597 : 	{
; 3598 : 		debug_fatal ("%s wider than the maximum allowed", full_override_texture_filename );
; 3599 : 		return 0;
; 3600 : 	}
; 3601 : 	*/
; 3602 : 	return 1;

  00059	b8 01 00 00 00	 mov	 eax, 1
$LN1@check_bitm:

; 3603 : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 2c 00	 ret	 44			; 0000002cH
?check_bitmap_header@@YGHUtagBITMAPINFOHEADER@@PBD@Z ENDP ; check_bitmap_header
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?convert_multiple_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z
_TEXT	SEGMENT
_pixel_value$1 = -56					; size = 4
_pitch$2 = -52						; size = 4
_ptr$3 = -48						; size = 4
_pixel_value$4 = -44					; size = 2
_pitch$5 = -40						; size = 4
_ptr$6 = -36						; size = 4
_alpha$ = -32						; size = 4
_blue$ = -28						; size = 4
_green$ = -24						; size = 4
_red$ = -20						; size = 4
_y_repeat$ = -16					; size = 4
_y_count$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_data$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_this_texture$ = 20					; size = 4
_fp$ = 24						; size = 4
?convert_multiple_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z PROC ; convert_multiple_alpha_32bit_texture_map_data, COMDAT

; 1895 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1896 : 
; 1897 : 	int
; 1898 : 		x,
; 1899 : 		y;
; 1900 : 
; 1901 : 	int
; 1902 : 		y_count,
; 1903 : 		y_repeat;
; 1904 : 
; 1905 : 	unsigned int
; 1906 : 		red,
; 1907 : 		green,
; 1908 : 		blue,
; 1909 : 		alpha;
; 1910 : 
; 1911 : 	if ( ( width > height ) && ( d3d_square_only_textures ) )

  00009	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0000c	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0000f	7e 15		 jle	 SHORT $LN20@convert_mu
  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_square_only_textures@@3HA, 0 ; d3d_square_only_textures
  00018	74 0c		 je	 SHORT $LN20@convert_mu

; 1912 : 	{
; 1913 : 
; 1914 : 		y_repeat = width / height;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0001d	99		 cdq
  0001e	f7 7d 10	 idiv	 DWORD PTR _height$[ebp]
  00021	89 45 f0	 mov	 DWORD PTR _y_repeat$[ebp], eax

; 1915 : 	}
; 1916 : 	else

  00024	eb 07		 jmp	 SHORT $LN21@convert_mu
$LN20@convert_mu:

; 1917 : 	{
; 1918 : 
; 1919 : 		y_repeat = 1;

  00026	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _y_repeat$[ebp], 1
$LN21@convert_mu:

; 1920 : 	}
; 1921 : 
; 1922 : 	if ( multiple_alpha_texture_pixel_width <= 16 )

  0002d	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?multiple_alpha_texture_pixel_width@@3HA, 16 ; multiple_alpha_texture_pixel_width, 00000010H
  00034	0f 8f 9e 01 00
	00		 jg	 $LN22@convert_mu

; 1923 : 	{
; 1924 : 
; 1925 : 		unsigned char
; 1926 : 			*ptr;
; 1927 : 
; 1928 : 		int
; 1929 : 			pitch;
; 1930 : 
; 1931 : 		unsigned short int
; 1932 : 			pixel_value;
; 1933 : 
; 1934 : 		//
; 1935 : 		// We're dealing with a 16bit texture format.
; 1936 : 		//
; 1937 : 
; 1938 : 		ptr = get_screen_data ( this_texture );

  0003a	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00043	89 45 dc	 mov	 DWORD PTR _ptr$6[ebp], eax

; 1939 : 
; 1940 : 		pitch = get_screen_pitch ( this_texture );

  00046	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0004f	89 45 d8	 mov	 DWORD PTR _pitch$5[ebp], eax

; 1941 : 
; 1942 : 		for ( y = 0; y < height; y++ )

  00052	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN4@convert_mu
$LN2@convert_mu:
  0005b	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN4@convert_mu:
  00064	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00067	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0006a	0f 8d 63 01 00
	00		 jge	 $LN3@convert_mu

; 1943 : 		{
; 1944 : 
; 1945 : 			for ( x = 0; x < width; x++ )

  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00077	eb 09		 jmp	 SHORT $LN7@convert_mu
$LN5@convert_mu:
  00079	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0007c	83 c0 01	 add	 eax, 1
  0007f	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@convert_mu:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00085	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  00088	0f 8d 33 01 00
	00		 jge	 $LN6@convert_mu

; 1946 : 			{
; 1947 : 
; 1948 : 				red = *data++;

  0008e	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00091	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00094	89 4d ec	 mov	 DWORD PTR _red$[ebp], ecx
  00097	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0009a	83 c2 01	 add	 edx, 1
  0009d	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1949 : 				green = *data++;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  000a3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000a6	89 4d e8	 mov	 DWORD PTR _green$[ebp], ecx
  000a9	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  000ac	83 c2 01	 add	 edx, 1
  000af	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1950 : 				blue = *data++;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  000b5	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000b8	89 4d e4	 mov	 DWORD PTR _blue$[ebp], ecx
  000bb	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  000be	83 c2 01	 add	 edx, 1
  000c1	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1951 : 				alpha = *data++;

  000c4	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  000c7	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000ca	89 4d e0	 mov	 DWORD PTR _alpha$[ebp], ecx
  000cd	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  000d0	83 c2 01	 add	 edx, 1
  000d3	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1952 : 				alpha = 255 - alpha;

  000d6	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000db	2b 45 e0	 sub	 eax, DWORD PTR _alpha$[ebp]
  000de	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1953 : 
; 1954 : 				red <<= 24;

  000e1	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  000e4	c1 e0 18	 shl	 eax, 24			; 00000018H
  000e7	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1955 : 				green <<= 24;

  000ea	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  000ed	c1 e0 18	 shl	 eax, 24			; 00000018H
  000f0	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1956 : 				blue <<= 24;

  000f3	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  000f6	c1 e0 18	 shl	 eax, 24			; 00000018H
  000f9	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1957 : 				alpha <<= 24;

  000fc	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  000ff	c1 e0 18	 shl	 eax, 24			; 00000018H
  00102	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1958 : 
; 1959 : 				red &= texture_multiple_alpha_red_mask;

  00105	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00108	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_red_mask@@3HA ; texture_multiple_alpha_red_mask
  0010e	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1960 : 				green &= texture_multiple_alpha_green_mask;

  00111	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  00114	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_green_mask@@3HA ; texture_multiple_alpha_green_mask
  0011a	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1961 : 				blue &= texture_multiple_alpha_blue_mask;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  00120	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_blue_mask@@3HA ; texture_multiple_alpha_blue_mask
  00126	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1962 : 				alpha &= texture_multiple_alpha_alpha_mask;

  00129	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  0012c	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_alpha_mask@@3HA ; texture_multiple_alpha_alpha_mask
  00132	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1963 : 
; 1964 : 				red >>= texture_multiple_alpha_red_shift;

  00135	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00138	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_red_shift@@3HA ; texture_multiple_alpha_red_shift
  0013e	d3 e8		 shr	 eax, cl
  00140	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1965 : 				green >>= texture_multiple_alpha_green_shift;

  00143	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  00146	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_green_shift@@3HA ; texture_multiple_alpha_green_shift
  0014c	d3 e8		 shr	 eax, cl
  0014e	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1966 : 				blue >>= texture_multiple_alpha_blue_shift;

  00151	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  00154	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_blue_shift@@3HA ; texture_multiple_alpha_blue_shift
  0015a	d3 e8		 shr	 eax, cl
  0015c	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1967 : 				alpha >>= texture_multiple_alpha_alpha_shift;

  0015f	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  00162	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_alpha_shift@@3HA ; texture_multiple_alpha_alpha_shift
  00168	d3 e8		 shr	 eax, cl
  0016a	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1968 : 
; 1969 : 				pixel_value = ( red | green | blue | alpha );

  0016d	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00170	0b 45 e8	 or	 eax, DWORD PTR _green$[ebp]
  00173	0b 45 e4	 or	 eax, DWORD PTR _blue$[ebp]
  00176	0b 45 e0	 or	 eax, DWORD PTR _alpha$[ebp]
  00179	66 89 45 d4	 mov	 WORD PTR _pixel_value$4[ebp], ax

; 1970 : 
; 1971 : 				*( ( unsigned short int * ) &ptr[( x * 2 )] ) = pixel_value;

  0017d	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00180	8b 4d dc	 mov	 ecx, DWORD PTR _ptr$6[ebp]
  00183	66 8b 55 d4	 mov	 dx, WORD PTR _pixel_value$4[ebp]
  00187	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 1972 : 
; 1973 : 				for ( y_count = 0; y_count < y_repeat; y_count++ )

  0018b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  00192	eb 09		 jmp	 SHORT $LN10@convert_mu
$LN8@convert_mu:
  00194	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00197	83 c0 01	 add	 eax, 1
  0019a	89 45 f4	 mov	 DWORD PTR _y_count$[ebp], eax
$LN10@convert_mu:
  0019d	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  001a0	3b 45 f0	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  001a3	7d 17		 jge	 SHORT $LN9@convert_mu

; 1974 : 				{
; 1975 : 
; 1976 : 					*( ( unsigned short int * ) &ptr[( y_count * pitch ) + ( x * 2 )] ) = pixel_value;

  001a5	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  001a8	0f af 45 d8	 imul	 eax, DWORD PTR _pitch$5[ebp]
  001ac	03 45 dc	 add	 eax, DWORD PTR _ptr$6[ebp]
  001af	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  001b2	66 8b 55 d4	 mov	 dx, WORD PTR _pixel_value$4[ebp]
  001b6	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1977 : 				}

  001ba	eb d8		 jmp	 SHORT $LN8@convert_mu
$LN9@convert_mu:

; 1978 : 			}

  001bc	e9 b8 fe ff ff	 jmp	 $LN5@convert_mu
$LN6@convert_mu:

; 1979 : 
; 1980 : 			ptr += ( y_repeat * pitch );

  001c1	8b 45 f0	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  001c4	0f af 45 d8	 imul	 eax, DWORD PTR _pitch$5[ebp]
  001c8	03 45 dc	 add	 eax, DWORD PTR _ptr$6[ebp]
  001cb	89 45 dc	 mov	 DWORD PTR _ptr$6[ebp], eax

; 1981 : 		}

  001ce	e9 88 fe ff ff	 jmp	 $LN2@convert_mu
$LN3@convert_mu:

; 1982 : 	}
; 1983 : 	else

  001d3	e9 94 01 00 00	 jmp	 $LN1@convert_mu
$LN22@convert_mu:

; 1984 : 	{
; 1985 : 
; 1986 : 		unsigned char
; 1987 : 			*ptr;
; 1988 : 
; 1989 : 		int
; 1990 : 			pitch;
; 1991 : 
; 1992 : 		unsigned int
; 1993 : 			pixel_value;
; 1994 : 
; 1995 : 		//
; 1996 : 		// We're dealing with a 32 texture format.
; 1997 : 		//
; 1998 : 
; 1999 : 		ptr = get_screen_data ( this_texture );

  001d8	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  001e1	89 45 d0	 mov	 DWORD PTR _ptr$3[ebp], eax

; 2000 : 
; 2001 : 		pitch = get_screen_pitch ( this_texture );

  001e4	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  001ed	89 45 cc	 mov	 DWORD PTR _pitch$2[ebp], eax

; 2002 : 
; 2003 : 		for ( y = 0; y < height; y++ )

  001f0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  001f7	eb 09		 jmp	 SHORT $LN13@convert_mu
$LN11@convert_mu:
  001f9	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001fc	83 c0 01	 add	 eax, 1
  001ff	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN13@convert_mu:
  00202	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00205	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  00208	0f 8d 5e 01 00
	00		 jge	 $LN1@convert_mu

; 2004 : 		{
; 2005 : 
; 2006 : 			for ( x = 0; x < width; x++ )

  0020e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00215	eb 09		 jmp	 SHORT $LN16@convert_mu
$LN14@convert_mu:
  00217	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0021a	83 c0 01	 add	 eax, 1
  0021d	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN16@convert_mu:
  00220	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00223	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  00226	0f 8d 2e 01 00
	00		 jge	 $LN15@convert_mu

; 2007 : 			{
; 2008 : 
; 2009 : 				red = *data++;

  0022c	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0022f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00232	89 4d ec	 mov	 DWORD PTR _red$[ebp], ecx
  00235	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00238	83 c2 01	 add	 edx, 1
  0023b	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 2010 : 				green = *data++;

  0023e	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00241	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00244	89 4d e8	 mov	 DWORD PTR _green$[ebp], ecx
  00247	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0024a	83 c2 01	 add	 edx, 1
  0024d	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 2011 : 				blue = *data++;

  00250	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00253	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00256	89 4d e4	 mov	 DWORD PTR _blue$[ebp], ecx
  00259	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0025c	83 c2 01	 add	 edx, 1
  0025f	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 2012 : 				alpha = *data++;

  00262	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00265	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00268	89 4d e0	 mov	 DWORD PTR _alpha$[ebp], ecx
  0026b	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0026e	83 c2 01	 add	 edx, 1
  00271	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 2013 : 				alpha = 255 - alpha;

  00274	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00279	2b 45 e0	 sub	 eax, DWORD PTR _alpha$[ebp]
  0027c	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 2014 : 
; 2015 : 				red <<= 24;

  0027f	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00282	c1 e0 18	 shl	 eax, 24			; 00000018H
  00285	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 2016 : 				green <<= 24;

  00288	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  0028b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0028e	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 2017 : 				blue <<= 24;

  00291	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  00294	c1 e0 18	 shl	 eax, 24			; 00000018H
  00297	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 2018 : 				alpha <<= 24;

  0029a	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  0029d	c1 e0 18	 shl	 eax, 24			; 00000018H
  002a0	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 2019 : //set here C:\gms\Razorworks\eech-new\modules\graphics\pixeltxt.c
; 2020 : 				red &= texture_multiple_alpha_red_mask;

  002a3	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  002a6	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_red_mask@@3HA ; texture_multiple_alpha_red_mask
  002ac	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 2021 : 				green &= texture_multiple_alpha_green_mask;

  002af	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  002b2	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_green_mask@@3HA ; texture_multiple_alpha_green_mask
  002b8	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 2022 : 				blue &= texture_multiple_alpha_blue_mask;

  002bb	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  002be	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_blue_mask@@3HA ; texture_multiple_alpha_blue_mask
  002c4	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 2023 : 				alpha &= texture_multiple_alpha_alpha_mask;

  002c7	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  002ca	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_alpha_mask@@3HA ; texture_multiple_alpha_alpha_mask
  002d0	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 2024 : 
; 2025 : 				red >>= texture_multiple_alpha_red_shift;

  002d3	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  002d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_red_shift@@3HA ; texture_multiple_alpha_red_shift
  002dc	d3 e8		 shr	 eax, cl
  002de	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 2026 : 				green >>= texture_multiple_alpha_green_shift;

  002e1	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  002e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_green_shift@@3HA ; texture_multiple_alpha_green_shift
  002ea	d3 e8		 shr	 eax, cl
  002ec	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 2027 : 				blue >>= texture_multiple_alpha_blue_shift;

  002ef	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  002f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_blue_shift@@3HA ; texture_multiple_alpha_blue_shift
  002f8	d3 e8		 shr	 eax, cl
  002fa	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 2028 : 				alpha >>= texture_multiple_alpha_alpha_shift;

  002fd	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  00300	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_alpha_shift@@3HA ; texture_multiple_alpha_alpha_shift
  00306	d3 e8		 shr	 eax, cl
  00308	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 2029 : 
; 2030 : 				pixel_value = ( red | green | blue | alpha );

  0030b	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  0030e	0b 45 e8	 or	 eax, DWORD PTR _green$[ebp]
  00311	0b 45 e4	 or	 eax, DWORD PTR _blue$[ebp]
  00314	0b 45 e0	 or	 eax, DWORD PTR _alpha$[ebp]
  00317	89 45 c8	 mov	 DWORD PTR _pixel_value$1[ebp], eax

; 2031 : 
; 2032 : 				*( ( unsigned int * ) &ptr[( x * 4 )] ) = pixel_value;

  0031a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0031d	8b 4d d0	 mov	 ecx, DWORD PTR _ptr$3[ebp]
  00320	8b 55 c8	 mov	 edx, DWORD PTR _pixel_value$1[ebp]
  00323	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 2033 : 
; 2034 : 				for ( y_count = 0; y_count < y_repeat; y_count++ )

  00326	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  0032d	eb 09		 jmp	 SHORT $LN19@convert_mu
$LN17@convert_mu:
  0032f	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00332	83 c0 01	 add	 eax, 1
  00335	89 45 f4	 mov	 DWORD PTR _y_count$[ebp], eax
$LN19@convert_mu:
  00338	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  0033b	3b 45 f0	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  0033e	7d 15		 jge	 SHORT $LN18@convert_mu

; 2035 : 				{
; 2036 : 
; 2037 : 					*( ( unsigned int * ) &ptr[( y_count * pitch ) + ( x * 4 )] ) = pixel_value;

  00340	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00343	0f af 45 cc	 imul	 eax, DWORD PTR _pitch$2[ebp]
  00347	03 45 d0	 add	 eax, DWORD PTR _ptr$3[ebp]
  0034a	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0034d	8b 55 c8	 mov	 edx, DWORD PTR _pixel_value$1[ebp]
  00350	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 2038 : 				}

  00353	eb da		 jmp	 SHORT $LN17@convert_mu
$LN18@convert_mu:

; 2039 : 			}

  00355	e9 bd fe ff ff	 jmp	 $LN14@convert_mu
$LN15@convert_mu:

; 2040 : 
; 2041 : 			ptr += ( y_repeat * pitch );

  0035a	8b 45 f0	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  0035d	0f af 45 cc	 imul	 eax, DWORD PTR _pitch$2[ebp]
  00361	03 45 d0	 add	 eax, DWORD PTR _ptr$3[ebp]
  00364	89 45 d0	 mov	 DWORD PTR _ptr$3[ebp], eax

; 2042 : 		}

  00367	e9 8d fe ff ff	 jmp	 $LN11@convert_mu
$LN1@convert_mu:

; 2043 : 	}
; 2044 : }

  0036c	5f		 pop	 edi
  0036d	5e		 pop	 esi
  0036e	5b		 pop	 ebx
  0036f	8b e5		 mov	 esp, ebp
  00371	5d		 pop	 ebp
  00372	c2 14 00	 ret	 20			; 00000014H
?convert_multiple_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ENDP ; convert_multiple_alpha_32bit_texture_map_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?convert_single_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z
_TEXT	SEGMENT
_pixel_value$1 = -56					; size = 4
_pitch$2 = -52						; size = 4
_ptr$3 = -48						; size = 4
_pixel_value$4 = -44					; size = 2
_pitch$5 = -40						; size = 4
_ptr$6 = -36						; size = 4
_alpha$ = -32						; size = 4
_blue$ = -28						; size = 4
_green$ = -24						; size = 4
_red$ = -20						; size = 4
_y_repeat$ = -16					; size = 4
_y_count$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_data$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_this_texture$ = 20					; size = 4
_fp$ = 24						; size = 4
?convert_single_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z PROC ; convert_single_alpha_32bit_texture_map_data, COMDAT

; 1739 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1740 : 
; 1741 : 	int
; 1742 : 		x,
; 1743 : 		y;
; 1744 : 
; 1745 : 	int
; 1746 : 		y_count,
; 1747 : 		y_repeat;
; 1748 : 
; 1749 : 	unsigned int
; 1750 : 		red,
; 1751 : 		green,
; 1752 : 		blue,
; 1753 : 		alpha;
; 1754 : 
; 1755 : 	if ( ( width > height ) && ( d3d_square_only_textures ) )

  00009	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0000c	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0000f	7e 15		 jle	 SHORT $LN20@convert_si
  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_square_only_textures@@3HA, 0 ; d3d_square_only_textures
  00018	74 0c		 je	 SHORT $LN20@convert_si

; 1756 : 	{
; 1757 : 
; 1758 : 		y_repeat = width / height;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0001d	99		 cdq
  0001e	f7 7d 10	 idiv	 DWORD PTR _height$[ebp]
  00021	89 45 f0	 mov	 DWORD PTR _y_repeat$[ebp], eax

; 1759 : 	}
; 1760 : 	else

  00024	eb 07		 jmp	 SHORT $LN21@convert_si
$LN20@convert_si:

; 1761 : 	{
; 1762 : 
; 1763 : 		y_repeat = 1;

  00026	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _y_repeat$[ebp], 1
$LN21@convert_si:

; 1764 : 	}
; 1765 : 
; 1766 : 	if ( single_alpha_texture_pixel_width <= 16 )

  0002d	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?single_alpha_texture_pixel_width@@3HA, 16 ; single_alpha_texture_pixel_width, 00000010H
  00034	0f 8f 9e 01 00
	00		 jg	 $LN22@convert_si

; 1767 : 	{
; 1768 : 
; 1769 : 		unsigned char
; 1770 : 			*ptr;
; 1771 : 
; 1772 : 		int
; 1773 : 			pitch;
; 1774 : 
; 1775 : 		unsigned short int
; 1776 : 			pixel_value;
; 1777 : 
; 1778 : 		//
; 1779 : 		// We're dealing with a 16bit texture format.
; 1780 : 		//
; 1781 : 
; 1782 : 		ptr = get_screen_data ( this_texture );

  0003a	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00043	89 45 dc	 mov	 DWORD PTR _ptr$6[ebp], eax

; 1783 : 
; 1784 : 		pitch = get_screen_pitch ( this_texture );

  00046	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0004f	89 45 d8	 mov	 DWORD PTR _pitch$5[ebp], eax

; 1785 : 
; 1786 : 		for ( y = 0; y < height; y++ )

  00052	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN4@convert_si
$LN2@convert_si:
  0005b	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN4@convert_si:
  00064	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00067	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0006a	0f 8d 63 01 00
	00		 jge	 $LN3@convert_si

; 1787 : 		{
; 1788 : 
; 1789 : 			for ( x = 0; x < width; x++ )

  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00077	eb 09		 jmp	 SHORT $LN7@convert_si
$LN5@convert_si:
  00079	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0007c	83 c0 01	 add	 eax, 1
  0007f	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@convert_si:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00085	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  00088	0f 8d 33 01 00
	00		 jge	 $LN6@convert_si

; 1790 : 			{
; 1791 : 
; 1792 : 				red = *data++;

  0008e	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00091	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00094	89 4d ec	 mov	 DWORD PTR _red$[ebp], ecx
  00097	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0009a	83 c2 01	 add	 edx, 1
  0009d	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1793 : 				green = *data++;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  000a3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000a6	89 4d e8	 mov	 DWORD PTR _green$[ebp], ecx
  000a9	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  000ac	83 c2 01	 add	 edx, 1
  000af	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1794 : 				blue = *data++;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  000b5	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000b8	89 4d e4	 mov	 DWORD PTR _blue$[ebp], ecx
  000bb	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  000be	83 c2 01	 add	 edx, 1
  000c1	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1795 : 				alpha = *data++;

  000c4	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  000c7	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000ca	89 4d e0	 mov	 DWORD PTR _alpha$[ebp], ecx
  000cd	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  000d0	83 c2 01	 add	 edx, 1
  000d3	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1796 : 				alpha = 255 - alpha;

  000d6	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000db	2b 45 e0	 sub	 eax, DWORD PTR _alpha$[ebp]
  000de	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1797 : 
; 1798 : 				red <<= 24;

  000e1	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  000e4	c1 e0 18	 shl	 eax, 24			; 00000018H
  000e7	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1799 : 				green <<= 24;

  000ea	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  000ed	c1 e0 18	 shl	 eax, 24			; 00000018H
  000f0	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1800 : 				blue <<= 24;

  000f3	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  000f6	c1 e0 18	 shl	 eax, 24			; 00000018H
  000f9	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1801 : 				alpha <<= 24;

  000fc	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  000ff	c1 e0 18	 shl	 eax, 24			; 00000018H
  00102	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1802 : 
; 1803 : 				red &= texture_single_alpha_red_mask;

  00105	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00108	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_red_mask@@3HA ; texture_single_alpha_red_mask
  0010e	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1804 : 				green &= texture_single_alpha_green_mask;

  00111	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  00114	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_green_mask@@3HA ; texture_single_alpha_green_mask
  0011a	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1805 : 				blue &= texture_single_alpha_blue_mask;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  00120	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_blue_mask@@3HA ; texture_single_alpha_blue_mask
  00126	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1806 : 				alpha &= texture_single_alpha_alpha_mask;

  00129	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  0012c	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_alpha_mask@@3HA ; texture_single_alpha_alpha_mask
  00132	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1807 : 
; 1808 : 				red >>= texture_single_alpha_red_shift;

  00135	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00138	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_red_shift@@3HA ; texture_single_alpha_red_shift
  0013e	d3 e8		 shr	 eax, cl
  00140	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1809 : 				green >>= texture_single_alpha_green_shift;

  00143	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  00146	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_green_shift@@3HA ; texture_single_alpha_green_shift
  0014c	d3 e8		 shr	 eax, cl
  0014e	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1810 : 				blue >>= texture_single_alpha_blue_shift;

  00151	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  00154	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_blue_shift@@3HA ; texture_single_alpha_blue_shift
  0015a	d3 e8		 shr	 eax, cl
  0015c	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1811 : 				alpha >>= texture_single_alpha_alpha_shift;

  0015f	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  00162	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_alpha_shift@@3HA ; texture_single_alpha_alpha_shift
  00168	d3 e8		 shr	 eax, cl
  0016a	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1812 : 
; 1813 : 				pixel_value = ( red | green | blue | alpha );

  0016d	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00170	0b 45 e8	 or	 eax, DWORD PTR _green$[ebp]
  00173	0b 45 e4	 or	 eax, DWORD PTR _blue$[ebp]
  00176	0b 45 e0	 or	 eax, DWORD PTR _alpha$[ebp]
  00179	66 89 45 d4	 mov	 WORD PTR _pixel_value$4[ebp], ax

; 1814 : 
; 1815 : 				*( ( unsigned short int * ) &ptr[( x * 2 )] ) = pixel_value;

  0017d	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00180	8b 4d dc	 mov	 ecx, DWORD PTR _ptr$6[ebp]
  00183	66 8b 55 d4	 mov	 dx, WORD PTR _pixel_value$4[ebp]
  00187	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 1816 : 
; 1817 : 				for ( y_count = 0; y_count < y_repeat; y_count++ )

  0018b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  00192	eb 09		 jmp	 SHORT $LN10@convert_si
$LN8@convert_si:
  00194	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00197	83 c0 01	 add	 eax, 1
  0019a	89 45 f4	 mov	 DWORD PTR _y_count$[ebp], eax
$LN10@convert_si:
  0019d	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  001a0	3b 45 f0	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  001a3	7d 17		 jge	 SHORT $LN9@convert_si

; 1818 : 				{
; 1819 : 
; 1820 : 					*( ( unsigned short int * ) &ptr[( y_count * pitch ) + ( x * 2 )] ) = pixel_value;

  001a5	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  001a8	0f af 45 d8	 imul	 eax, DWORD PTR _pitch$5[ebp]
  001ac	03 45 dc	 add	 eax, DWORD PTR _ptr$6[ebp]
  001af	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  001b2	66 8b 55 d4	 mov	 dx, WORD PTR _pixel_value$4[ebp]
  001b6	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1821 : 				}

  001ba	eb d8		 jmp	 SHORT $LN8@convert_si
$LN9@convert_si:

; 1822 : 			}

  001bc	e9 b8 fe ff ff	 jmp	 $LN5@convert_si
$LN6@convert_si:

; 1823 : 
; 1824 : 			ptr += ( y_repeat * pitch );

  001c1	8b 45 f0	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  001c4	0f af 45 d8	 imul	 eax, DWORD PTR _pitch$5[ebp]
  001c8	03 45 dc	 add	 eax, DWORD PTR _ptr$6[ebp]
  001cb	89 45 dc	 mov	 DWORD PTR _ptr$6[ebp], eax

; 1825 : 		}

  001ce	e9 88 fe ff ff	 jmp	 $LN2@convert_si
$LN3@convert_si:

; 1826 : 	}
; 1827 : 	else

  001d3	e9 94 01 00 00	 jmp	 $LN1@convert_si
$LN22@convert_si:

; 1828 : 	{
; 1829 : 
; 1830 : 		unsigned char
; 1831 : 			*ptr;
; 1832 : 
; 1833 : 		int
; 1834 : 			pitch;
; 1835 : 
; 1836 : 		unsigned int
; 1837 : 			pixel_value;
; 1838 : 
; 1839 : 		//
; 1840 : 		// We're dealing with a 32 texture format.
; 1841 : 		//
; 1842 : 
; 1843 : 		ptr = get_screen_data ( this_texture );

  001d8	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  001e1	89 45 d0	 mov	 DWORD PTR _ptr$3[ebp], eax

; 1844 : 
; 1845 : 		pitch = get_screen_pitch ( this_texture );

  001e4	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  001ed	89 45 cc	 mov	 DWORD PTR _pitch$2[ebp], eax

; 1846 : 
; 1847 : 		for ( y = 0; y < height; y++ )

  001f0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  001f7	eb 09		 jmp	 SHORT $LN13@convert_si
$LN11@convert_si:
  001f9	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001fc	83 c0 01	 add	 eax, 1
  001ff	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN13@convert_si:
  00202	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00205	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  00208	0f 8d 5e 01 00
	00		 jge	 $LN1@convert_si

; 1848 : 		{
; 1849 : 
; 1850 : 			for ( x = 0; x < width; x++ )

  0020e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00215	eb 09		 jmp	 SHORT $LN16@convert_si
$LN14@convert_si:
  00217	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0021a	83 c0 01	 add	 eax, 1
  0021d	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN16@convert_si:
  00220	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00223	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  00226	0f 8d 2e 01 00
	00		 jge	 $LN15@convert_si

; 1851 : 			{
; 1852 : 
; 1853 : 				red = *data++;

  0022c	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0022f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00232	89 4d ec	 mov	 DWORD PTR _red$[ebp], ecx
  00235	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00238	83 c2 01	 add	 edx, 1
  0023b	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1854 : 				green = *data++;

  0023e	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00241	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00244	89 4d e8	 mov	 DWORD PTR _green$[ebp], ecx
  00247	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0024a	83 c2 01	 add	 edx, 1
  0024d	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1855 : 				blue = *data++;

  00250	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00253	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00256	89 4d e4	 mov	 DWORD PTR _blue$[ebp], ecx
  00259	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0025c	83 c2 01	 add	 edx, 1
  0025f	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1856 : 				alpha = *data++;

  00262	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00265	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00268	89 4d e0	 mov	 DWORD PTR _alpha$[ebp], ecx
  0026b	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0026e	83 c2 01	 add	 edx, 1
  00271	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1857 : 				alpha = 255 - alpha;

  00274	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00279	2b 45 e0	 sub	 eax, DWORD PTR _alpha$[ebp]
  0027c	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1858 : 
; 1859 : 				red <<= 24;

  0027f	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00282	c1 e0 18	 shl	 eax, 24			; 00000018H
  00285	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1860 : 				green <<= 24;

  00288	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  0028b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0028e	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1861 : 				blue <<= 24;

  00291	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  00294	c1 e0 18	 shl	 eax, 24			; 00000018H
  00297	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1862 : 				alpha <<= 24;

  0029a	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  0029d	c1 e0 18	 shl	 eax, 24			; 00000018H
  002a0	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1863 : 
; 1864 : 				red &= texture_single_alpha_red_mask;

  002a3	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  002a6	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_red_mask@@3HA ; texture_single_alpha_red_mask
  002ac	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1865 : 				green &= texture_single_alpha_green_mask;

  002af	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  002b2	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_green_mask@@3HA ; texture_single_alpha_green_mask
  002b8	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1866 : 				blue &= texture_single_alpha_blue_mask;

  002bb	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  002be	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_blue_mask@@3HA ; texture_single_alpha_blue_mask
  002c4	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1867 : 				alpha &= texture_single_alpha_alpha_mask;

  002c7	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  002ca	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_alpha_mask@@3HA ; texture_single_alpha_alpha_mask
  002d0	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1868 : 
; 1869 : 				red >>= texture_single_alpha_red_shift;

  002d3	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  002d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_red_shift@@3HA ; texture_single_alpha_red_shift
  002dc	d3 e8		 shr	 eax, cl
  002de	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1870 : 				green >>= texture_single_alpha_green_shift;

  002e1	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  002e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_green_shift@@3HA ; texture_single_alpha_green_shift
  002ea	d3 e8		 shr	 eax, cl
  002ec	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1871 : 				blue >>= texture_single_alpha_blue_shift;

  002ef	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  002f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_blue_shift@@3HA ; texture_single_alpha_blue_shift
  002f8	d3 e8		 shr	 eax, cl
  002fa	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1872 : 				alpha >>= texture_single_alpha_alpha_shift;

  002fd	8b 45 e0	 mov	 eax, DWORD PTR _alpha$[ebp]
  00300	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_alpha_shift@@3HA ; texture_single_alpha_alpha_shift
  00306	d3 e8		 shr	 eax, cl
  00308	89 45 e0	 mov	 DWORD PTR _alpha$[ebp], eax

; 1873 : 
; 1874 : 				pixel_value = ( red | green | blue | alpha );

  0030b	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  0030e	0b 45 e8	 or	 eax, DWORD PTR _green$[ebp]
  00311	0b 45 e4	 or	 eax, DWORD PTR _blue$[ebp]
  00314	0b 45 e0	 or	 eax, DWORD PTR _alpha$[ebp]
  00317	89 45 c8	 mov	 DWORD PTR _pixel_value$1[ebp], eax

; 1875 : 
; 1876 : 				*( ( unsigned int * ) &ptr[( x * 4 )] ) = pixel_value;

  0031a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0031d	8b 4d d0	 mov	 ecx, DWORD PTR _ptr$3[ebp]
  00320	8b 55 c8	 mov	 edx, DWORD PTR _pixel_value$1[ebp]
  00323	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 1877 : 
; 1878 : 				for ( y_count = 0; y_count < y_repeat; y_count++ )

  00326	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  0032d	eb 09		 jmp	 SHORT $LN19@convert_si
$LN17@convert_si:
  0032f	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00332	83 c0 01	 add	 eax, 1
  00335	89 45 f4	 mov	 DWORD PTR _y_count$[ebp], eax
$LN19@convert_si:
  00338	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  0033b	3b 45 f0	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  0033e	7d 15		 jge	 SHORT $LN18@convert_si

; 1879 : 				{
; 1880 : 
; 1881 : 					*( ( unsigned int * ) &ptr[( y_count * pitch ) + ( x * 4 )] ) = pixel_value;

  00340	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00343	0f af 45 cc	 imul	 eax, DWORD PTR _pitch$2[ebp]
  00347	03 45 d0	 add	 eax, DWORD PTR _ptr$3[ebp]
  0034a	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0034d	8b 55 c8	 mov	 edx, DWORD PTR _pixel_value$1[ebp]
  00350	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1882 : 				}

  00353	eb da		 jmp	 SHORT $LN17@convert_si
$LN18@convert_si:

; 1883 : 			}

  00355	e9 bd fe ff ff	 jmp	 $LN14@convert_si
$LN15@convert_si:

; 1884 : 
; 1885 : 			ptr += ( y_repeat * pitch );

  0035a	8b 45 f0	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  0035d	0f af 45 cc	 imul	 eax, DWORD PTR _pitch$2[ebp]
  00361	03 45 d0	 add	 eax, DWORD PTR _ptr$3[ebp]
  00364	89 45 d0	 mov	 DWORD PTR _ptr$3[ebp], eax

; 1886 : 		}

  00367	e9 8d fe ff ff	 jmp	 $LN11@convert_si
$LN1@convert_si:

; 1887 : 	}
; 1888 : }

  0036c	5f		 pop	 edi
  0036d	5e		 pop	 esi
  0036e	5b		 pop	 ebx
  0036f	8b e5		 mov	 esp, ebp
  00371	5d		 pop	 ebp
  00372	c2 14 00	 ret	 20			; 00000014H
?convert_single_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ENDP ; convert_single_alpha_32bit_texture_map_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?convert_no_alpha_24bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z
_TEXT	SEGMENT
_pixel_value$1 = -52					; size = 4
_pitch$2 = -48						; size = 4
_ptr$3 = -44						; size = 4
_pixel_value$4 = -40					; size = 2
_pitch$5 = -36						; size = 4
_ptr$6 = -32						; size = 4
_blue$ = -28						; size = 4
_green$ = -24						; size = 4
_red$ = -20						; size = 4
_y_repeat$ = -16					; size = 4
_y_count$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_data$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_this_texture$ = 20					; size = 4
_fp$ = 24						; size = 4
?convert_no_alpha_24bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z PROC ; convert_no_alpha_24bit_texture_map_data, COMDAT

; 1595 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1596 : 
; 1597 : 	int
; 1598 : 		x,
; 1599 : 		y;
; 1600 : 
; 1601 : 	int
; 1602 : 		y_count,
; 1603 : 		y_repeat;
; 1604 : 
; 1605 : 	unsigned int
; 1606 : 		red,
; 1607 : 		green,
; 1608 : 		blue;
; 1609 : 
; 1610 : 	if ( ( width > height ) && ( d3d_square_only_textures ) )

  00009	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0000c	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0000f	7e 15		 jle	 SHORT $LN20@convert_no
  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_square_only_textures@@3HA, 0 ; d3d_square_only_textures
  00018	74 0c		 je	 SHORT $LN20@convert_no

; 1611 : 	{
; 1612 : 
; 1613 : 		y_repeat = width / height;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0001d	99		 cdq
  0001e	f7 7d 10	 idiv	 DWORD PTR _height$[ebp]
  00021	89 45 f0	 mov	 DWORD PTR _y_repeat$[ebp], eax

; 1614 : 	}
; 1615 : 	else

  00024	eb 07		 jmp	 SHORT $LN21@convert_no
$LN20@convert_no:

; 1616 : 	{
; 1617 : 
; 1618 : 		y_repeat = 1;

  00026	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _y_repeat$[ebp], 1
$LN21@convert_no:

; 1619 : 	}
; 1620 : 
; 1621 : 	if ( colour_nopalette_texture_pixel_width <= 16 )

  0002d	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?colour_nopalette_texture_pixel_width@@3HA, 16 ; colour_nopalette_texture_pixel_width, 00000010H
  00034	0f 8f 5b 01 00
	00		 jg	 $LN22@convert_no

; 1622 : 	{
; 1623 : 
; 1624 : 		unsigned char
; 1625 : 			*ptr;
; 1626 : 
; 1627 : 		int
; 1628 : 			pitch;
; 1629 : 
; 1630 : 		unsigned short int
; 1631 : 			pixel_value;
; 1632 : 
; 1633 : 		//
; 1634 : 		// We're dealing with a 16bit texture format.
; 1635 : 		//
; 1636 : 
; 1637 : 		ptr = get_screen_data ( this_texture );

  0003a	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00043	89 45 e0	 mov	 DWORD PTR _ptr$6[ebp], eax

; 1638 : 
; 1639 : 		pitch = get_screen_pitch ( this_texture );

  00046	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0004f	89 45 dc	 mov	 DWORD PTR _pitch$5[ebp], eax

; 1640 : 
; 1641 : 		for ( y = 0; y < height; y++ )

  00052	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN4@convert_no
$LN2@convert_no:
  0005b	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN4@convert_no:
  00064	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00067	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0006a	0f 8d 20 01 00
	00		 jge	 $LN3@convert_no

; 1642 : 		{
; 1643 : 
; 1644 : 			for ( x = 0; x < width; x++ )

  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00077	eb 09		 jmp	 SHORT $LN7@convert_no
$LN5@convert_no:
  00079	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0007c	83 c0 01	 add	 eax, 1
  0007f	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@convert_no:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00085	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  00088	0f 8d f0 00 00
	00		 jge	 $LN6@convert_no

; 1645 : 			{
; 1646 : 				red = *data++;

  0008e	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00091	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00094	89 4d ec	 mov	 DWORD PTR _red$[ebp], ecx
  00097	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0009a	83 c2 01	 add	 edx, 1
  0009d	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1647 : 				green = *data++;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  000a3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000a6	89 4d e8	 mov	 DWORD PTR _green$[ebp], ecx
  000a9	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  000ac	83 c2 01	 add	 edx, 1
  000af	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1648 : 				blue = *data++;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  000b5	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000b8	89 4d e4	 mov	 DWORD PTR _blue$[ebp], ecx
  000bb	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  000be	83 c2 01	 add	 edx, 1
  000c1	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1649 : 
; 1650 : 				red <<= 24;

  000c4	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  000c7	c1 e0 18	 shl	 eax, 24			; 00000018H
  000ca	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1651 : 				green <<= 24;

  000cd	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  000d0	c1 e0 18	 shl	 eax, 24			; 00000018H
  000d3	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1652 : 				blue <<= 24;

  000d6	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  000d9	c1 e0 18	 shl	 eax, 24			; 00000018H
  000dc	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1653 : 
; 1654 : 				red &= texture_colour_nopalette_red_mask;

  000df	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  000e2	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_nopalette_red_mask@@3HA ; texture_colour_nopalette_red_mask
  000e8	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1655 : 				green &= texture_colour_nopalette_green_mask;

  000eb	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  000ee	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_nopalette_green_mask@@3HA ; texture_colour_nopalette_green_mask
  000f4	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1656 : 				blue &= texture_colour_nopalette_blue_mask;

  000f7	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  000fa	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_nopalette_blue_mask@@3HA ; texture_colour_nopalette_blue_mask
  00100	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1657 : 
; 1658 : 				red >>= texture_colour_nopalette_red_shift;

  00103	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_nopalette_red_shift@@3HA ; texture_colour_nopalette_red_shift
  0010c	d3 e8		 shr	 eax, cl
  0010e	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1659 : 				green >>= texture_colour_nopalette_green_shift;

  00111	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  00114	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_nopalette_green_shift@@3HA ; texture_colour_nopalette_green_shift
  0011a	d3 e8		 shr	 eax, cl
  0011c	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1660 : 				blue >>= texture_colour_nopalette_blue_shift;

  0011f	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  00122	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_nopalette_blue_shift@@3HA ; texture_colour_nopalette_blue_shift
  00128	d3 e8		 shr	 eax, cl
  0012a	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1661 : 
; 1662 : 				pixel_value = ( red | green | blue );

  0012d	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00130	0b 45 e8	 or	 eax, DWORD PTR _green$[ebp]
  00133	0b 45 e4	 or	 eax, DWORD PTR _blue$[ebp]
  00136	66 89 45 d8	 mov	 WORD PTR _pixel_value$4[ebp], ax

; 1663 : 
; 1664 : 				*( ( unsigned short int * ) &ptr[( x * 2 )] ) = pixel_value;

  0013a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0013d	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$6[ebp]
  00140	66 8b 55 d8	 mov	 dx, WORD PTR _pixel_value$4[ebp]
  00144	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 1665 : 
; 1666 : 				for ( y_count = 0; y_count < y_repeat; y_count++ )

  00148	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  0014f	eb 09		 jmp	 SHORT $LN10@convert_no
$LN8@convert_no:
  00151	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00154	83 c0 01	 add	 eax, 1
  00157	89 45 f4	 mov	 DWORD PTR _y_count$[ebp], eax
$LN10@convert_no:
  0015a	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  0015d	3b 45 f0	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  00160	7d 17		 jge	 SHORT $LN9@convert_no

; 1667 : 				{
; 1668 : 
; 1669 : 					*( ( unsigned short int * ) &ptr[( y_count * pitch ) + ( x * 2 )] ) = pixel_value;

  00162	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00165	0f af 45 dc	 imul	 eax, DWORD PTR _pitch$5[ebp]
  00169	03 45 e0	 add	 eax, DWORD PTR _ptr$6[ebp]
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0016f	66 8b 55 d8	 mov	 dx, WORD PTR _pixel_value$4[ebp]
  00173	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1670 : 				}

  00177	eb d8		 jmp	 SHORT $LN8@convert_no
$LN9@convert_no:

; 1671 : 			}

  00179	e9 fb fe ff ff	 jmp	 $LN5@convert_no
$LN6@convert_no:

; 1672 : 
; 1673 : 			ptr += ( y_repeat * pitch );

  0017e	8b 45 f0	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  00181	0f af 45 dc	 imul	 eax, DWORD PTR _pitch$5[ebp]
  00185	03 45 e0	 add	 eax, DWORD PTR _ptr$6[ebp]
  00188	89 45 e0	 mov	 DWORD PTR _ptr$6[ebp], eax

; 1674 : 		}

  0018b	e9 cb fe ff ff	 jmp	 $LN2@convert_no
$LN3@convert_no:

; 1675 : 	}
; 1676 : 	else

  00190	e9 51 01 00 00	 jmp	 $LN1@convert_no
$LN22@convert_no:

; 1677 : 	{
; 1678 : 
; 1679 : 		unsigned char
; 1680 : 			*ptr;
; 1681 : 
; 1682 : 		int
; 1683 : 			pitch;
; 1684 : 
; 1685 : 		unsigned int
; 1686 : 			pixel_value;
; 1687 : 
; 1688 : 		//
; 1689 : 		// We're dealing with a 32 texture format.
; 1690 : 		//
; 1691 : 
; 1692 : 		ptr = get_screen_data ( this_texture );

  00195	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0019e	89 45 d4	 mov	 DWORD PTR _ptr$3[ebp], eax

; 1693 : 
; 1694 : 		pitch = get_screen_pitch ( this_texture );

  001a1	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001a4	50		 push	 eax
  001a5	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  001aa	89 45 d0	 mov	 DWORD PTR _pitch$2[ebp], eax

; 1695 : 
; 1696 : 		for ( y = 0; y < height; y++ )

  001ad	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  001b4	eb 09		 jmp	 SHORT $LN13@convert_no
$LN11@convert_no:
  001b6	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001b9	83 c0 01	 add	 eax, 1
  001bc	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN13@convert_no:
  001bf	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001c2	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  001c5	0f 8d 1b 01 00
	00		 jge	 $LN1@convert_no

; 1697 : 		{
; 1698 : 
; 1699 : 			for ( x = 0; x < width; x++ )

  001cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001d2	eb 09		 jmp	 SHORT $LN16@convert_no
$LN14@convert_no:
  001d4	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001d7	83 c0 01	 add	 eax, 1
  001da	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN16@convert_no:
  001dd	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001e0	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  001e3	0f 8d eb 00 00
	00		 jge	 $LN15@convert_no

; 1700 : 			{
; 1701 : 
; 1702 : 				red = *data++;

  001e9	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  001ec	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001ef	89 4d ec	 mov	 DWORD PTR _red$[ebp], ecx
  001f2	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  001f5	83 c2 01	 add	 edx, 1
  001f8	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1703 : 				green = *data++;

  001fb	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  001fe	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00201	89 4d e8	 mov	 DWORD PTR _green$[ebp], ecx
  00204	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00207	83 c2 01	 add	 edx, 1
  0020a	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1704 : 				blue = *data++;

  0020d	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00210	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00213	89 4d e4	 mov	 DWORD PTR _blue$[ebp], ecx
  00216	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00219	83 c2 01	 add	 edx, 1
  0021c	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1705 : 
; 1706 : 				red <<= 24;

  0021f	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00222	c1 e0 18	 shl	 eax, 24			; 00000018H
  00225	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1707 : 				green <<= 24;

  00228	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  0022b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0022e	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1708 : 				blue <<= 24;

  00231	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  00234	c1 e0 18	 shl	 eax, 24			; 00000018H
  00237	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1709 : 
; 1710 : 				red &= texture_colour_nopalette_red_mask;

  0023a	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  0023d	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_nopalette_red_mask@@3HA ; texture_colour_nopalette_red_mask
  00243	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1711 : 				green &= texture_colour_nopalette_green_mask;

  00246	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  00249	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_nopalette_green_mask@@3HA ; texture_colour_nopalette_green_mask
  0024f	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1712 : 				blue &= texture_colour_nopalette_blue_mask;

  00252	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  00255	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_nopalette_blue_mask@@3HA ; texture_colour_nopalette_blue_mask
  0025b	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1713 : 
; 1714 : 				red >>= texture_colour_nopalette_red_shift;

  0025e	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  00261	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_nopalette_red_shift@@3HA ; texture_colour_nopalette_red_shift
  00267	d3 e8		 shr	 eax, cl
  00269	89 45 ec	 mov	 DWORD PTR _red$[ebp], eax

; 1715 : 				green >>= texture_colour_nopalette_green_shift;

  0026c	8b 45 e8	 mov	 eax, DWORD PTR _green$[ebp]
  0026f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_nopalette_green_shift@@3HA ; texture_colour_nopalette_green_shift
  00275	d3 e8		 shr	 eax, cl
  00277	89 45 e8	 mov	 DWORD PTR _green$[ebp], eax

; 1716 : 				blue >>= texture_colour_nopalette_blue_shift;

  0027a	8b 45 e4	 mov	 eax, DWORD PTR _blue$[ebp]
  0027d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_nopalette_blue_shift@@3HA ; texture_colour_nopalette_blue_shift
  00283	d3 e8		 shr	 eax, cl
  00285	89 45 e4	 mov	 DWORD PTR _blue$[ebp], eax

; 1717 : 
; 1718 : 				pixel_value = ( red | green | blue );

  00288	8b 45 ec	 mov	 eax, DWORD PTR _red$[ebp]
  0028b	0b 45 e8	 or	 eax, DWORD PTR _green$[ebp]
  0028e	0b 45 e4	 or	 eax, DWORD PTR _blue$[ebp]
  00291	89 45 cc	 mov	 DWORD PTR _pixel_value$1[ebp], eax

; 1719 : 
; 1720 : 				*( ( unsigned int * ) &ptr[( x * 4 )] ) = pixel_value;

  00294	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00297	8b 4d d4	 mov	 ecx, DWORD PTR _ptr$3[ebp]
  0029a	8b 55 cc	 mov	 edx, DWORD PTR _pixel_value$1[ebp]
  0029d	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 1721 : 
; 1722 : 				for ( y_count = 0; y_count < y_repeat; y_count++ )

  002a0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  002a7	eb 09		 jmp	 SHORT $LN19@convert_no
$LN17@convert_no:
  002a9	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  002ac	83 c0 01	 add	 eax, 1
  002af	89 45 f4	 mov	 DWORD PTR _y_count$[ebp], eax
$LN19@convert_no:
  002b2	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  002b5	3b 45 f0	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  002b8	7d 15		 jge	 SHORT $LN18@convert_no

; 1723 : 				{
; 1724 : 
; 1725 : 					*( ( unsigned int * ) &ptr[( y_count * pitch ) + ( x * 4 )] ) = pixel_value;

  002ba	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  002bd	0f af 45 d0	 imul	 eax, DWORD PTR _pitch$2[ebp]
  002c1	03 45 d4	 add	 eax, DWORD PTR _ptr$3[ebp]
  002c4	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002c7	8b 55 cc	 mov	 edx, DWORD PTR _pixel_value$1[ebp]
  002ca	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1726 : 				}

  002cd	eb da		 jmp	 SHORT $LN17@convert_no
$LN18@convert_no:

; 1727 : 			}

  002cf	e9 00 ff ff ff	 jmp	 $LN14@convert_no
$LN15@convert_no:

; 1728 : 
; 1729 : 			ptr += ( y_repeat * pitch );

  002d4	8b 45 f0	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  002d7	0f af 45 d0	 imul	 eax, DWORD PTR _pitch$2[ebp]
  002db	03 45 d4	 add	 eax, DWORD PTR _ptr$3[ebp]
  002de	89 45 d4	 mov	 DWORD PTR _ptr$3[ebp], eax

; 1730 : 		}

  002e1	e9 d0 fe ff ff	 jmp	 $LN11@convert_no
$LN1@convert_no:

; 1731 : 	}
; 1732 : }

  002e6	5f		 pop	 edi
  002e7	5e		 pop	 esi
  002e8	5b		 pop	 ebx
  002e9	8b e5		 mov	 esp, ebp
  002eb	5d		 pop	 ebp
  002ec	c2 14 00	 ret	 20			; 00000014H
?convert_no_alpha_24bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ENDP ; convert_no_alpha_24bit_texture_map_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?convert_multiple_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z
_TEXT	SEGMENT
_alpha$1 = -74						; size = 1
_value$2 = -73						; size = 1
_texture_alpha$3 = -72					; size = 4
_pixel_value$4 = -68					; size = 4
_alpha$5 = -62						; size = 1
_colour$6 = -61						; size = 1
_source_ptr$7 = -60					; size = 4
_line_ptr$8 = -56					; size = 4
_pitch$9 = -52						; size = 4
_ptr$10 = -48						; size = 4
_texture_alpha$11 = -44					; size = 4
_pixel_value$12 = -40					; size = 2
_alpha$13 = -34						; size = 1
_colour$14 = -33					; size = 1
_source_ptr$15 = -32					; size = 4
_line_ptr$16 = -28					; size = 4
_pitch$17 = -24						; size = 4
_ptr$18 = -20						; size = 4
_y_repeat$ = -16					; size = 4
_y_count$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_data$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_this_texture$ = 20					; size = 4
_fp$ = 24						; size = 4
?convert_multiple_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z PROC ; convert_multiple_alpha_texture_map_data, COMDAT

; 1378 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1379 : 
; 1380 : 	int
; 1381 : 		x,
; 1382 : 		y,
; 1383 : 		y_count,
; 1384 : 		y_repeat;
; 1385 : 
; 1386 : 	if ( ( width > height ) && ( d3d_square_only_textures ) )

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0000f	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  00012	7e 15		 jle	 SHORT $LN29@convert_mu
  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_square_only_textures@@3HA, 0 ; d3d_square_only_textures
  0001b	74 0c		 je	 SHORT $LN29@convert_mu

; 1387 : 	{
; 1388 : 
; 1389 : 		y_repeat = width / height;

  0001d	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  00020	99		 cdq
  00021	f7 7d 10	 idiv	 DWORD PTR _height$[ebp]
  00024	89 45 f0	 mov	 DWORD PTR _y_repeat$[ebp], eax

; 1390 : 	}
; 1391 : 	else

  00027	eb 07		 jmp	 SHORT $LN30@convert_mu
$LN29@convert_mu:

; 1392 : 	{
; 1393 : 
; 1394 : 		y_repeat = 1;

  00029	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _y_repeat$[ebp], 1
$LN30@convert_mu:

; 1395 : 	}
; 1396 : 
; 1397 : 	if ( texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].bpp_alpha )

  00030	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00035	6b c8 03	 imul	 ecx, eax, 3
  00038	83 b9 1c 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+28], 0
  0003f	0f 84 9e 02 00
	00		 je	 $LN31@convert_mu

; 1398 : 	{
; 1399 : 
; 1400 : 		if ( multiple_alpha_texture_pixel_width <= 16 )

  00045	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?multiple_alpha_texture_pixel_width@@3HA, 16 ; multiple_alpha_texture_pixel_width, 00000010H
  0004c	0f 8f 4b 01 00
	00		 jg	 $LN33@convert_mu

; 1401 : 		{
; 1402 : 
; 1403 : 			unsigned char
; 1404 : 				*ptr;
; 1405 : 
; 1406 : 			int
; 1407 : 				pitch;
; 1408 : 
; 1409 : 			initialise_set_texture_pixel_lookup_table ( this_texture );

  00052	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table

; 1410 : 
; 1411 : 			ptr = get_screen_data ( this_texture );

  0005b	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00064	89 45 ec	 mov	 DWORD PTR _ptr$18[ebp], eax

; 1412 : 
; 1413 : 			pitch = get_screen_pitch ( this_texture );

  00067	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00070	89 45 e8	 mov	 DWORD PTR _pitch$17[ebp], eax

; 1414 : 
; 1415 : 			//
; 1416 : 			// Performance tuned texture loader.
; 1417 : 			//
; 1418 : 
; 1419 : 			for ( y = 0; y < height; y++ )

  00073	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  0007a	eb 09		 jmp	 SHORT $LN4@convert_mu
$LN2@convert_mu:
  0007c	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0007f	83 c0 01	 add	 eax, 1
  00082	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN4@convert_mu:
  00085	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00088	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0008b	0f 8d 07 01 00
	00		 jge	 $LN3@convert_mu

; 1420 : 			{
; 1421 : 
; 1422 : 				unsigned short int
; 1423 : 					*line_ptr;
; 1424 : 
; 1425 : 				unsigned char
; 1426 : 					*source_ptr;
; 1427 : 
; 1428 : 				line_ptr = ( unsigned short int * ) ptr;

  00091	8b 45 ec	 mov	 eax, DWORD PTR _ptr$18[ebp]
  00094	89 45 e4	 mov	 DWORD PTR _line_ptr$16[ebp], eax

; 1429 : 
; 1430 : 				source_ptr = data;

  00097	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0009a	89 45 e0	 mov	 DWORD PTR _source_ptr$15[ebp], eax

; 1431 : 
; 1432 : 				for ( x = 0; x < width; x++ )

  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  000a4	eb 09		 jmp	 SHORT $LN7@convert_mu
$LN5@convert_mu:
  000a6	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  000a9	83 c0 01	 add	 eax, 1
  000ac	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@convert_mu:
  000af	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  000b2	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  000b5	0f 8d 86 00 00
	00		 jge	 $LN6@convert_mu

; 1433 : 				{
; 1434 : 
; 1435 : 					unsigned char
; 1436 : 						colour,
; 1437 : 						alpha;
; 1438 : 
; 1439 : 					unsigned short int
; 1440 : 						pixel_value;
; 1441 : 
; 1442 : 					unsigned int
; 1443 : 						texture_alpha;
; 1444 : 
; 1445 : 					alpha = *source_ptr++;

  000bb	8b 45 e0	 mov	 eax, DWORD PTR _source_ptr$15[ebp]
  000be	8a 08		 mov	 cl, BYTE PTR [eax]
  000c0	88 4d de	 mov	 BYTE PTR _alpha$13[ebp], cl
  000c3	8b 55 e0	 mov	 edx, DWORD PTR _source_ptr$15[ebp]
  000c6	83 c2 01	 add	 edx, 1
  000c9	89 55 e0	 mov	 DWORD PTR _source_ptr$15[ebp], edx

; 1446 : 					colour = *source_ptr++;

  000cc	8b 45 e0	 mov	 eax, DWORD PTR _source_ptr$15[ebp]
  000cf	8a 08		 mov	 cl, BYTE PTR [eax]
  000d1	88 4d df	 mov	 BYTE PTR _colour$14[ebp], cl
  000d4	8b 55 e0	 mov	 edx, DWORD PTR _source_ptr$15[ebp]
  000d7	83 c2 01	 add	 edx, 1
  000da	89 55 e0	 mov	 DWORD PTR _source_ptr$15[ebp], edx

; 1447 : 
; 1448 : 					pixel_value = set_texture_pixel_lookup_table[colour];

  000dd	0f b6 45 df	 movzx	 eax, BYTE PTR _colour$14[ebp]
  000e1	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR ?set_texture_pixel_lookup_table@@3PAGA[eax*2]
  000e9	66 89 4d d8	 mov	 WORD PTR _pixel_value$12[ebp], cx

; 1449 : 
; 1450 : 					texture_alpha = ( 255 - alpha );

  000ed	0f b6 45 de	 movzx	 eax, BYTE PTR _alpha$13[ebp]
  000f1	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  000f6	2b c8		 sub	 ecx, eax
  000f8	89 4d d4	 mov	 DWORD PTR _texture_alpha$11[ebp], ecx

; 1451 : 
; 1452 : 					texture_alpha <<= 24;

  000fb	8b 45 d4	 mov	 eax, DWORD PTR _texture_alpha$11[ebp]
  000fe	c1 e0 18	 shl	 eax, 24			; 00000018H
  00101	89 45 d4	 mov	 DWORD PTR _texture_alpha$11[ebp], eax

; 1453 : 
; 1454 : 					texture_alpha &= texture_multiple_alpha_alpha_mask;

  00104	8b 45 d4	 mov	 eax, DWORD PTR _texture_alpha$11[ebp]
  00107	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_alpha_mask@@3HA ; texture_multiple_alpha_alpha_mask
  0010d	89 45 d4	 mov	 DWORD PTR _texture_alpha$11[ebp], eax

; 1455 : 
; 1456 : 					texture_alpha >>= texture_multiple_alpha_alpha_shift;

  00110	8b 45 d4	 mov	 eax, DWORD PTR _texture_alpha$11[ebp]
  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_alpha_shift@@3HA ; texture_multiple_alpha_alpha_shift
  00119	d3 e8		 shr	 eax, cl
  0011b	89 45 d4	 mov	 DWORD PTR _texture_alpha$11[ebp], eax

; 1457 : 
; 1458 : 					pixel_value |= texture_alpha;

  0011e	0f b7 45 d8	 movzx	 eax, WORD PTR _pixel_value$12[ebp]
  00122	0b 45 d4	 or	 eax, DWORD PTR _texture_alpha$11[ebp]
  00125	66 89 45 d8	 mov	 WORD PTR _pixel_value$12[ebp], ax

; 1459 : 
; 1460 : 					*line_ptr++ = pixel_value;

  00129	8b 45 e4	 mov	 eax, DWORD PTR _line_ptr$16[ebp]
  0012c	66 8b 4d d8	 mov	 cx, WORD PTR _pixel_value$12[ebp]
  00130	66 89 08	 mov	 WORD PTR [eax], cx
  00133	8b 55 e4	 mov	 edx, DWORD PTR _line_ptr$16[ebp]
  00136	83 c2 02	 add	 edx, 2
  00139	89 55 e4	 mov	 DWORD PTR _line_ptr$16[ebp], edx

; 1461 : 				}

  0013c	e9 65 ff ff ff	 jmp	 $LN5@convert_mu
$LN6@convert_mu:

; 1462 : 
; 1463 : 				//
; 1464 : 				// Now copy that line of data
; 1465 : 				//
; 1466 : 
; 1467 : 				for ( y_count = 1; y_count < y_repeat; y_count++ )

  00141	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 1
  00148	eb 09		 jmp	 SHORT $LN10@convert_mu
$LN8@convert_mu:
  0014a	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  0014d	83 c0 01	 add	 eax, 1
  00150	89 45 f4	 mov	 DWORD PTR _y_count$[ebp], eax
$LN10@convert_mu:
  00153	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00156	3b 45 f0	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  00159	7d 1f		 jge	 SHORT $LN9@convert_mu

; 1468 : 				{
; 1469 : 
; 1470 : 					memcpy ( &ptr[ ( y_count * pitch ) ], ptr, ( width * 2 ) );

  0015b	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0015e	d1 e0		 shl	 eax, 1
  00160	50		 push	 eax
  00161	8b 4d ec	 mov	 ecx, DWORD PTR _ptr$18[ebp]
  00164	51		 push	 ecx
  00165	8b 55 f4	 mov	 edx, DWORD PTR _y_count$[ebp]
  00168	0f af 55 e8	 imul	 edx, DWORD PTR _pitch$17[ebp]
  0016c	03 55 ec	 add	 edx, DWORD PTR _ptr$18[ebp]
  0016f	52		 push	 edx
  00170	e8 00 00 00 00	 call	 _memcpy
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1471 : 				}

  00178	eb d0		 jmp	 SHORT $LN8@convert_mu
$LN9@convert_mu:

; 1472 : 
; 1473 : 				ptr += ( y_repeat * pitch );

  0017a	8b 45 f0	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  0017d	0f af 45 e8	 imul	 eax, DWORD PTR _pitch$17[ebp]
  00181	03 45 ec	 add	 eax, DWORD PTR _ptr$18[ebp]
  00184	89 45 ec	 mov	 DWORD PTR _ptr$18[ebp], eax

; 1474 : 
; 1475 : 				data += ( width * 2 );

  00187	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0018a	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  0018d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00190	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1476 : 			}

  00193	e9 e4 fe ff ff	 jmp	 $LN2@convert_mu
$LN3@convert_mu:

; 1477 : 		}
; 1478 : 		else

  00198	e9 41 01 00 00	 jmp	 $LN34@convert_mu
$LN33@convert_mu:

; 1479 : 		{
; 1480 : 
; 1481 : 			unsigned char
; 1482 : 				*ptr;
; 1483 : 
; 1484 : 			int
; 1485 : 				pitch;
; 1486 : 
; 1487 : 			initialise_set_texture_pixel_lookup_table ( this_texture );

  0019d	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001a0	50		 push	 eax
  001a1	e8 00 00 00 00	 call	 ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table

; 1488 : 
; 1489 : 			ptr = get_screen_data ( this_texture );

  001a6	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  001af	89 45 d0	 mov	 DWORD PTR _ptr$10[ebp], eax

; 1490 : 
; 1491 : 			pitch = get_screen_pitch ( this_texture );

  001b2	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001b5	50		 push	 eax
  001b6	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  001bb	89 45 cc	 mov	 DWORD PTR _pitch$9[ebp], eax

; 1492 : 
; 1493 : 			for ( y = 0; y < height; y++ )

  001be	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  001c5	eb 09		 jmp	 SHORT $LN13@convert_mu
$LN11@convert_mu:
  001c7	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001ca	83 c0 01	 add	 eax, 1
  001cd	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN13@convert_mu:
  001d0	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001d3	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  001d6	0f 8d 02 01 00
	00		 jge	 $LN34@convert_mu

; 1494 : 			{
; 1495 : 
; 1496 : 				unsigned int
; 1497 : 					*line_ptr;
; 1498 : 
; 1499 : 				unsigned char
; 1500 : 					*source_ptr;
; 1501 : 
; 1502 : 				line_ptr = ( unsigned int * ) ptr;

  001dc	8b 45 d0	 mov	 eax, DWORD PTR _ptr$10[ebp]
  001df	89 45 c8	 mov	 DWORD PTR _line_ptr$8[ebp], eax

; 1503 : 
; 1504 : 				source_ptr = data;

  001e2	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  001e5	89 45 c4	 mov	 DWORD PTR _source_ptr$7[ebp], eax

; 1505 : 
; 1506 : 				for ( x = 0; x < width; x++ )

  001e8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001ef	eb 09		 jmp	 SHORT $LN16@convert_mu
$LN14@convert_mu:
  001f1	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001f4	83 c0 01	 add	 eax, 1
  001f7	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN16@convert_mu:
  001fa	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001fd	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  00200	0f 8d 80 00 00
	00		 jge	 $LN15@convert_mu

; 1507 : 				{
; 1508 : 
; 1509 : 					unsigned char
; 1510 : 						colour,
; 1511 : 						alpha;
; 1512 : 
; 1513 : 					unsigned int
; 1514 : 						pixel_value;
; 1515 : 
; 1516 : 					unsigned int
; 1517 : 						texture_alpha;
; 1518 : 
; 1519 : 					alpha = *source_ptr++;

  00206	8b 45 c4	 mov	 eax, DWORD PTR _source_ptr$7[ebp]
  00209	8a 08		 mov	 cl, BYTE PTR [eax]
  0020b	88 4d c2	 mov	 BYTE PTR _alpha$5[ebp], cl
  0020e	8b 55 c4	 mov	 edx, DWORD PTR _source_ptr$7[ebp]
  00211	83 c2 01	 add	 edx, 1
  00214	89 55 c4	 mov	 DWORD PTR _source_ptr$7[ebp], edx

; 1520 : 					colour = *source_ptr++;

  00217	8b 45 c4	 mov	 eax, DWORD PTR _source_ptr$7[ebp]
  0021a	8a 08		 mov	 cl, BYTE PTR [eax]
  0021c	88 4d c3	 mov	 BYTE PTR _colour$6[ebp], cl
  0021f	8b 55 c4	 mov	 edx, DWORD PTR _source_ptr$7[ebp]
  00222	83 c2 01	 add	 edx, 1
  00225	89 55 c4	 mov	 DWORD PTR _source_ptr$7[ebp], edx

; 1521 : 
; 1522 : 					pixel_value = set_texture_pixel_32bit_lookup_table[colour];

  00228	0f b6 45 c3	 movzx	 eax, BYTE PTR _colour$6[ebp]
  0022c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?set_texture_pixel_32bit_lookup_table@@3PAIA[eax*4]
  00233	89 4d bc	 mov	 DWORD PTR _pixel_value$4[ebp], ecx

; 1523 : 
; 1524 : 					texture_alpha = ( 255 - alpha );

  00236	0f b6 45 c2	 movzx	 eax, BYTE PTR _alpha$5[ebp]
  0023a	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  0023f	2b c8		 sub	 ecx, eax
  00241	89 4d b8	 mov	 DWORD PTR _texture_alpha$3[ebp], ecx

; 1525 : 
; 1526 : 					texture_alpha <<= 24;

  00244	8b 45 b8	 mov	 eax, DWORD PTR _texture_alpha$3[ebp]
  00247	c1 e0 18	 shl	 eax, 24			; 00000018H
  0024a	89 45 b8	 mov	 DWORD PTR _texture_alpha$3[ebp], eax

; 1527 : 
; 1528 : 					texture_alpha &= texture_multiple_alpha_alpha_mask;

  0024d	8b 45 b8	 mov	 eax, DWORD PTR _texture_alpha$3[ebp]
  00250	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_alpha_mask@@3HA ; texture_multiple_alpha_alpha_mask
  00256	89 45 b8	 mov	 DWORD PTR _texture_alpha$3[ebp], eax

; 1529 : 
; 1530 : 					texture_alpha >>= texture_multiple_alpha_alpha_shift;

  00259	8b 45 b8	 mov	 eax, DWORD PTR _texture_alpha$3[ebp]
  0025c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_alpha_shift@@3HA ; texture_multiple_alpha_alpha_shift
  00262	d3 e8		 shr	 eax, cl
  00264	89 45 b8	 mov	 DWORD PTR _texture_alpha$3[ebp], eax

; 1531 : 
; 1532 : 					pixel_value |= texture_alpha;

  00267	8b 45 bc	 mov	 eax, DWORD PTR _pixel_value$4[ebp]
  0026a	0b 45 b8	 or	 eax, DWORD PTR _texture_alpha$3[ebp]
  0026d	89 45 bc	 mov	 DWORD PTR _pixel_value$4[ebp], eax

; 1533 : 
; 1534 : 					*line_ptr++ = pixel_value;

  00270	8b 45 c8	 mov	 eax, DWORD PTR _line_ptr$8[ebp]
  00273	8b 4d bc	 mov	 ecx, DWORD PTR _pixel_value$4[ebp]
  00276	89 08		 mov	 DWORD PTR [eax], ecx
  00278	8b 55 c8	 mov	 edx, DWORD PTR _line_ptr$8[ebp]
  0027b	83 c2 04	 add	 edx, 4
  0027e	89 55 c8	 mov	 DWORD PTR _line_ptr$8[ebp], edx

; 1535 : 				}

  00281	e9 6b ff ff ff	 jmp	 $LN14@convert_mu
$LN15@convert_mu:

; 1536 : 
; 1537 : 				//
; 1538 : 				// Now copy that line of data
; 1539 : 				//
; 1540 : 
; 1541 : 				for ( y_count = 1; y_count < y_repeat; y_count++ )

  00286	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 1
  0028d	eb 09		 jmp	 SHORT $LN19@convert_mu
$LN17@convert_mu:
  0028f	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00292	83 c0 01	 add	 eax, 1
  00295	89 45 f4	 mov	 DWORD PTR _y_count$[ebp], eax
$LN19@convert_mu:
  00298	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  0029b	3b 45 f0	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  0029e	7d 20		 jge	 SHORT $LN18@convert_mu

; 1542 : 				{
; 1543 : 
; 1544 : 					memcpy ( &ptr[ ( y_count * pitch ) ], ptr, ( width * 4 ) );

  002a0	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  002a3	c1 e0 02	 shl	 eax, 2
  002a6	50		 push	 eax
  002a7	8b 4d d0	 mov	 ecx, DWORD PTR _ptr$10[ebp]
  002aa	51		 push	 ecx
  002ab	8b 55 f4	 mov	 edx, DWORD PTR _y_count$[ebp]
  002ae	0f af 55 cc	 imul	 edx, DWORD PTR _pitch$9[ebp]
  002b2	03 55 d0	 add	 edx, DWORD PTR _ptr$10[ebp]
  002b5	52		 push	 edx
  002b6	e8 00 00 00 00	 call	 _memcpy
  002bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1545 : 				}

  002be	eb cf		 jmp	 SHORT $LN17@convert_mu
$LN18@convert_mu:

; 1546 : 
; 1547 : 				ptr += ( y_repeat * pitch );

  002c0	8b 45 f0	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  002c3	0f af 45 cc	 imul	 eax, DWORD PTR _pitch$9[ebp]
  002c7	03 45 d0	 add	 eax, DWORD PTR _ptr$10[ebp]
  002ca	89 45 d0	 mov	 DWORD PTR _ptr$10[ebp], eax

; 1548 : 
; 1549 : 				data += ( width * 2 );

  002cd	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  002d0	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  002d3	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002d6	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1550 : 			}

  002d9	e9 e9 fe ff ff	 jmp	 $LN11@convert_mu
$LN34@convert_mu:

; 1551 : 		}
; 1552 : 	}
; 1553 : 	else

  002de	e9 b0 00 00 00	 jmp	 $LN1@convert_mu
$LN31@convert_mu:

; 1554 : 	{
; 1555 : 
; 1556 : 		for ( y = 0; y < height; y++ )

  002e3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  002ea	eb 09		 jmp	 SHORT $LN22@convert_mu
$LN20@convert_mu:
  002ec	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  002ef	83 c0 01	 add	 eax, 1
  002f2	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN22@convert_mu:
  002f5	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  002f8	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  002fb	0f 8d 92 00 00
	00		 jge	 $LN1@convert_mu

; 1557 : 		{
; 1558 : 
; 1559 : 			for ( x = 0; x < width; x++ )

  00301	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00308	eb 09		 jmp	 SHORT $LN25@convert_mu
$LN23@convert_mu:
  0030a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0030d	83 c0 01	 add	 eax, 1
  00310	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN25@convert_mu:
  00313	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00316	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  00319	7d 73		 jge	 SHORT $LN24@convert_mu

; 1560 : 			{
; 1561 : 
; 1562 : 				unsigned char
; 1563 : 					value,
; 1564 : 					alpha;
; 1565 : 
; 1566 : 				alpha = *data++;

  0031b	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0031e	8a 08		 mov	 cl, BYTE PTR [eax]
  00320	88 4d b6	 mov	 BYTE PTR _alpha$1[ebp], cl
  00323	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00326	83 c2 01	 add	 edx, 1
  00329	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1567 : 				value = *data++;

  0032c	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0032f	8a 08		 mov	 cl, BYTE PTR [eax]
  00331	88 4d b7	 mov	 BYTE PTR _value$2[ebp], cl
  00334	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00337	83 c2 01	 add	 edx, 1
  0033a	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1568 : 
; 1569 : 				if ( alpha )

  0033d	0f b6 45 b6	 movzx	 eax, BYTE PTR _alpha$1[ebp]
  00341	85 c0		 test	 eax, eax
  00343	74 06		 je	 SHORT $LN35@convert_mu

; 1570 : 				{
; 1571 : 
; 1572 : 					alpha = 0;

  00345	c6 45 b6 00	 mov	 BYTE PTR _alpha$1[ebp], 0

; 1573 : 				}
; 1574 : 				else

  00349	eb 04		 jmp	 SHORT $LN36@convert_mu
$LN35@convert_mu:

; 1575 : 				{
; 1576 : 
; 1577 : 					alpha = 255;

  0034b	c6 45 b6 ff	 mov	 BYTE PTR _alpha$1[ebp], 255 ; 000000ffH
$LN36@convert_mu:

; 1578 : 				}
; 1579 : 
; 1580 : 				for ( y_count = 0; y_count < y_repeat; y_count++ )

  0034f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  00356	eb 09		 jmp	 SHORT $LN28@convert_mu
$LN26@convert_mu:
  00358	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  0035b	83 c0 01	 add	 eax, 1
  0035e	89 45 f4	 mov	 DWORD PTR _y_count$[ebp], eax
$LN28@convert_mu:
  00361	8b 45 f4	 mov	 eax, DWORD PTR _y_count$[ebp]
  00364	3b 45 f0	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  00367	7d 20		 jge	 SHORT $LN27@convert_mu

; 1581 : 				{
; 1582 : 
; 1583 : 					set_texture_pixel ( this_texture, x, ( y + y_count ), value, alpha );

  00369	0f b6 45 b6	 movzx	 eax, BYTE PTR _alpha$1[ebp]
  0036d	50		 push	 eax
  0036e	0f b6 4d b7	 movzx	 ecx, BYTE PTR _value$2[ebp]
  00372	51		 push	 ecx
  00373	8b 55 f8	 mov	 edx, DWORD PTR _y$[ebp]
  00376	03 55 f4	 add	 edx, DWORD PTR _y_count$[ebp]
  00379	52		 push	 edx
  0037a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0037d	50		 push	 eax
  0037e	8b 4d 14	 mov	 ecx, DWORD PTR _this_texture$[ebp]
  00381	51		 push	 ecx
  00382	e8 00 00 00 00	 call	 ?set_texture_pixel@@YGXPAUSCREEN@@HHII@Z ; set_texture_pixel

; 1584 : 				}

  00387	eb cf		 jmp	 SHORT $LN26@convert_mu
$LN27@convert_mu:

; 1585 : 			}

  00389	e9 7c ff ff ff	 jmp	 $LN23@convert_mu
$LN24@convert_mu:

; 1586 : 		}

  0038e	e9 59 ff ff ff	 jmp	 $LN20@convert_mu
$LN1@convert_mu:

; 1587 : 	}
; 1588 : }

  00393	5f		 pop	 edi
  00394	5e		 pop	 esi
  00395	5b		 pop	 ebx
  00396	8b e5		 mov	 esp, ebp
  00398	5d		 pop	 ebp
  00399	c2 14 00	 ret	 20			; 00000014H
?convert_multiple_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ENDP ; convert_multiple_alpha_texture_map_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?convert_single_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z
_TEXT	SEGMENT
_value$1 = -23						; size = 1
_alpha$2 = -22						; size = 1
_value$3 = -21						; size = 1
_y_repeat$ = -20					; size = 4
_y_count$ = -16						; size = 4
_y_coordinate$ = -12					; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_data$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_this_texture$ = 20					; size = 4
_fp$ = 24						; size = 4
?convert_single_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z PROC ; convert_single_alpha_texture_map_data, COMDAT

; 1291 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1292 : 
; 1293 : 	int
; 1294 : 		x,
; 1295 : 		y,
; 1296 : 		y_coordinate,
; 1297 : 		y_count,
; 1298 : 		y_repeat;
; 1299 : 
; 1300 : 	if ( ( width > height ) && ( d3d_square_only_textures ) )

  00009	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0000c	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0000f	7e 15		 jle	 SHORT $LN20@convert_si
  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_square_only_textures@@3HA, 0 ; d3d_square_only_textures
  00018	74 0c		 je	 SHORT $LN20@convert_si

; 1301 : 	{
; 1302 : 
; 1303 : 		y_repeat = width / height;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0001d	99		 cdq
  0001e	f7 7d 10	 idiv	 DWORD PTR _height$[ebp]
  00021	89 45 ec	 mov	 DWORD PTR _y_repeat$[ebp], eax

; 1304 : 	}
; 1305 : 	else

  00024	eb 07		 jmp	 SHORT $LN21@convert_si
$LN20@convert_si:

; 1306 : 	{
; 1307 : 
; 1308 : 		y_repeat = 1;

  00026	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _y_repeat$[ebp], 1
$LN21@convert_si:

; 1309 : 	}
; 1310 : 
; 1311 : 	if ( texture_formats[TEXTURE_TYPE_SINGLEALPHA].bpp_alpha )

  0002d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00032	d1 e0		 shl	 eax, 1
  00034	83 b8 1c 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+28], 0
  0003b	0f 84 b1 00 00
	00		 je	 $LN22@convert_si

; 1312 : 	{
; 1313 : 
; 1314 : 		y_coordinate = 0;

  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y_coordinate$[ebp], 0

; 1315 : 
; 1316 : 		for ( y = 0; y < height; y++ )

  00048	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  0004f	eb 09		 jmp	 SHORT $LN4@convert_si
$LN2@convert_si:
  00051	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00054	83 c0 01	 add	 eax, 1
  00057	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN4@convert_si:
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0005d	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  00060	0f 8d 87 00 00
	00		 jge	 $LN3@convert_si

; 1317 : 		{
; 1318 : 
; 1319 : 			for ( x = 0; x < width; x++ )

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  0006d	eb 09		 jmp	 SHORT $LN7@convert_si
$LN5@convert_si:
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@convert_si:
  00078	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0007b	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  0007e	7d 5f		 jge	 SHORT $LN6@convert_si

; 1320 : 			{
; 1321 : 
; 1322 : 				unsigned char
; 1323 : 					value,
; 1324 : 					alpha;
; 1325 : 
; 1326 : 				value = *data++;

  00080	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00083	8a 08		 mov	 cl, BYTE PTR [eax]
  00085	88 4d eb	 mov	 BYTE PTR _value$3[ebp], cl
  00088	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0008b	83 c2 01	 add	 edx, 1
  0008e	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1327 : 
; 1328 : 				if ( value )

  00091	0f b6 45 eb	 movzx	 eax, BYTE PTR _value$3[ebp]
  00095	85 c0		 test	 eax, eax
  00097	74 06		 je	 SHORT $LN24@convert_si

; 1329 : 				{
; 1330 : 
; 1331 : 					alpha = 255;

  00099	c6 45 ea ff	 mov	 BYTE PTR _alpha$2[ebp], 255 ; 000000ffH

; 1332 : 				}
; 1333 : 				else

  0009d	eb 04		 jmp	 SHORT $LN25@convert_si
$LN24@convert_si:

; 1334 : 				{
; 1335 : 
; 1336 : 					alpha = 0;

  0009f	c6 45 ea 00	 mov	 BYTE PTR _alpha$2[ebp], 0
$LN25@convert_si:

; 1337 : 				}
; 1338 : 
; 1339 : 				for ( y_count = 0; y_count < y_repeat; y_count++ )

  000a3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  000aa	eb 09		 jmp	 SHORT $LN10@convert_si
$LN8@convert_si:
  000ac	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 45 f0	 mov	 DWORD PTR _y_count$[ebp], eax
$LN10@convert_si:
  000b5	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  000b8	3b 45 ec	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  000bb	7d 20		 jge	 SHORT $LN9@convert_si

; 1340 : 				{
; 1341 : 
; 1342 : 					set_texture_pixel ( this_texture, x, ( y_coordinate + y_count ), value, alpha );

  000bd	0f b6 45 ea	 movzx	 eax, BYTE PTR _alpha$2[ebp]
  000c1	50		 push	 eax
  000c2	0f b6 4d eb	 movzx	 ecx, BYTE PTR _value$3[ebp]
  000c6	51		 push	 ecx
  000c7	8b 55 f4	 mov	 edx, DWORD PTR _y_coordinate$[ebp]
  000ca	03 55 f0	 add	 edx, DWORD PTR _y_count$[ebp]
  000cd	52		 push	 edx
  000ce	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d 14	 mov	 ecx, DWORD PTR _this_texture$[ebp]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ?set_texture_pixel@@YGXPAUSCREEN@@HHII@Z ; set_texture_pixel

; 1343 : 				}

  000db	eb cf		 jmp	 SHORT $LN8@convert_si
$LN9@convert_si:

; 1344 : 			}

  000dd	eb 90		 jmp	 SHORT $LN5@convert_si
$LN6@convert_si:

; 1345 : 
; 1346 : 			y_coordinate += y_repeat;

  000df	8b 45 f4	 mov	 eax, DWORD PTR _y_coordinate$[ebp]
  000e2	03 45 ec	 add	 eax, DWORD PTR _y_repeat$[ebp]
  000e5	89 45 f4	 mov	 DWORD PTR _y_coordinate$[ebp], eax

; 1347 : 		}

  000e8	e9 64 ff ff ff	 jmp	 $LN2@convert_si
$LN3@convert_si:

; 1348 : 	}
; 1349 : 	else

  000ed	e9 80 00 00 00	 jmp	 $LN1@convert_si
$LN22@convert_si:

; 1350 : 	{
; 1351 : 
; 1352 : 		for ( y = 0; y < height; y++ )

  000f2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  000f9	eb 09		 jmp	 SHORT $LN13@convert_si
$LN11@convert_si:
  000fb	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  000fe	83 c0 01	 add	 eax, 1
  00101	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax
$LN13@convert_si:
  00104	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00107	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0010a	7d 66		 jge	 SHORT $LN1@convert_si

; 1353 : 		{
; 1354 : 
; 1355 : 			for ( x = 0; x < width; x++ )

  0010c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00113	eb 09		 jmp	 SHORT $LN16@convert_si
$LN14@convert_si:
  00115	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00118	83 c0 01	 add	 eax, 1
  0011b	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN16@convert_si:
  0011e	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00121	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  00124	7d 4a		 jge	 SHORT $LN15@convert_si

; 1356 : 			{
; 1357 : 
; 1358 : 				unsigned char
; 1359 : 					value;
; 1360 : 
; 1361 : 				value = *data++;

  00126	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00129	8a 08		 mov	 cl, BYTE PTR [eax]
  0012b	88 4d e9	 mov	 BYTE PTR _value$1[ebp], cl
  0012e	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00131	83 c2 01	 add	 edx, 1
  00134	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1362 : 
; 1363 : 				for ( y_count = 0; y_count < y_repeat; y_count++ )

  00137	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  0013e	eb 09		 jmp	 SHORT $LN19@convert_si
$LN17@convert_si:
  00140	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  00143	83 c0 01	 add	 eax, 1
  00146	89 45 f0	 mov	 DWORD PTR _y_count$[ebp], eax
$LN19@convert_si:
  00149	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  0014c	3b 45 ec	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  0014f	7d 1d		 jge	 SHORT $LN18@convert_si

; 1364 : 				{
; 1365 : 
; 1366 : 					set_texture_pixel ( this_texture, x, ( y + y_count ), value, 0 );

  00151	6a 00		 push	 0
  00153	0f b6 45 e9	 movzx	 eax, BYTE PTR _value$1[ebp]
  00157	50		 push	 eax
  00158	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  0015b	03 4d f0	 add	 ecx, DWORD PTR _y_count$[ebp]
  0015e	51		 push	 ecx
  0015f	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  00162	52		 push	 edx
  00163	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 ?set_texture_pixel@@YGXPAUSCREEN@@HHII@Z ; set_texture_pixel

; 1367 : 				}

  0016c	eb d2		 jmp	 SHORT $LN17@convert_si
$LN18@convert_si:

; 1368 : 			}

  0016e	eb a5		 jmp	 SHORT $LN14@convert_si
$LN15@convert_si:

; 1369 : 		}

  00170	eb 89		 jmp	 SHORT $LN11@convert_si
$LN1@convert_si:

; 1370 : 	}
; 1371 : }

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 14 00	 ret	 20			; 00000014H
?convert_single_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ENDP ; convert_single_alpha_texture_map_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?convert_no_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z
_TEXT	SEGMENT
_pixel_value$1 = -52					; size = 4
_pitch$2 = -48						; size = 4
_ptr$3 = -44						; size = 4
_pixel_value$4 = -40					; size = 2
_pitch$5 = -36						; size = 4
_ptr$6 = -32						; size = 4
_pitch$7 = -28						; size = 4
_ptr$8 = -24						; size = 4
_y_repeat$ = -20					; size = 4
_y_count$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_value$ = -1						; size = 1
_data$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_this_texture$ = 20					; size = 4
_fp$ = 24						; size = 4
?convert_no_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z PROC ; convert_no_alpha_texture_map_data, COMDAT

; 1135 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1136 : 
; 1137 : 	unsigned char
; 1138 : 		value;
; 1139 : 
; 1140 : 	int
; 1141 : 		x,
; 1142 : 		y;
; 1143 : 
; 1144 : 	int
; 1145 : 		y_count,
; 1146 : 		y_repeat;
; 1147 : 
; 1148 : 	if ( ( width > height ) && ( d3d_square_only_textures ) )

  00009	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0000c	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0000f	7e 15		 jle	 SHORT $LN26@convert_no
  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_square_only_textures@@3HA, 0 ; d3d_square_only_textures
  00018	74 0c		 je	 SHORT $LN26@convert_no

; 1149 : 	{
; 1150 : 
; 1151 : 		y_repeat = width / height;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0001d	99		 cdq
  0001e	f7 7d 10	 idiv	 DWORD PTR _height$[ebp]
  00021	89 45 ec	 mov	 DWORD PTR _y_repeat$[ebp], eax

; 1152 : 	}
; 1153 : 	else

  00024	eb 07		 jmp	 SHORT $LN27@convert_no
$LN26@convert_no:

; 1154 : 	{
; 1155 : 
; 1156 : 		y_repeat = 1;

  00026	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _y_repeat$[ebp], 1
$LN27@convert_no:

; 1157 : 	}
; 1158 : 
; 1159 : 	if ( this_texture->palette )

  0002d	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  00030	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00034	0f 84 9a 00 00
	00		 je	 $LN28@convert_no

; 1160 : 	{
; 1161 : 
; 1162 : 		//
; 1163 : 		// We're dealing with a 8bit texture format - paletted
; 1164 : 		//
; 1165 : 
; 1166 : 		unsigned char
; 1167 : 			*ptr;
; 1168 : 
; 1169 : 		int
; 1170 : 			pitch;
; 1171 : 
; 1172 : 		ptr = get_screen_data ( this_texture );

  0003a	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00043	89 45 e8	 mov	 DWORD PTR _ptr$8[ebp], eax

; 1173 : 
; 1174 : 		pitch = get_screen_pitch ( this_texture );

  00046	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0004f	89 45 e4	 mov	 DWORD PTR _pitch$7[ebp], eax

; 1175 : 
; 1176 : 		for ( y = 0; y < height; y++ )

  00052	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN4@convert_no
$LN2@convert_no:
  0005b	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN4@convert_no:
  00064	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00067	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0006a	7d 63		 jge	 SHORT $LN3@convert_no

; 1177 : 		{
; 1178 : 
; 1179 : 			memcpy ( ptr, data, width );

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 e8	 mov	 edx, DWORD PTR _ptr$8[ebp]
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 _memcpy
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1180 : 
; 1181 : 			for ( y_count = 1; y_count < y_repeat; y_count++ )

  00080	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 1
  00087	eb 09		 jmp	 SHORT $LN7@convert_no
$LN5@convert_no:
  00089	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  0008c	83 c0 01	 add	 eax, 1
  0008f	89 45 f0	 mov	 DWORD PTR _y_count$[ebp], eax
$LN7@convert_no:
  00092	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  00095	3b 45 ec	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  00098	7d 1d		 jge	 SHORT $LN6@convert_no

; 1182 : 			{
; 1183 : 
; 1184 : 				memcpy ( &ptr[ ( y_count * pitch ) ], data, width );

  0009a	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  000a1	51		 push	 ecx
  000a2	8b 55 f0	 mov	 edx, DWORD PTR _y_count$[ebp]
  000a5	0f af 55 e4	 imul	 edx, DWORD PTR _pitch$7[ebp]
  000a9	03 55 e8	 add	 edx, DWORD PTR _ptr$8[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 _memcpy
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1185 : 			}

  000b5	eb d2		 jmp	 SHORT $LN5@convert_no
$LN6@convert_no:

; 1186 : 
; 1187 : 			ptr += ( y_repeat * pitch );

  000b7	8b 45 ec	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  000ba	0f af 45 e4	 imul	 eax, DWORD PTR _pitch$7[ebp]
  000be	03 45 e8	 add	 eax, DWORD PTR _ptr$8[ebp]
  000c1	89 45 e8	 mov	 DWORD PTR _ptr$8[ebp], eax

; 1188 : 
; 1189 : 			data += width;

  000c4	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  000c7	03 45 0c	 add	 eax, DWORD PTR _width$[ebp]
  000ca	89 45 08	 mov	 DWORD PTR _data$[ebp], eax

; 1190 : 		}

  000cd	eb 8c		 jmp	 SHORT $LN2@convert_no
$LN3@convert_no:

; 1191 : 	}
; 1192 : 	else

  000cf	e9 a6 01 00 00	 jmp	 $LN1@convert_no
$LN28@convert_no:

; 1193 : 	{
; 1194 : 
; 1195 : 		if ( colour_texture_pixel_width <= 16 )

  000d4	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?colour_texture_pixel_width@@3HA, 16 ; colour_texture_pixel_width, 00000010H
  000db	0f 8f d2 00 00
	00		 jg	 $LN30@convert_no

; 1196 : 		{
; 1197 : 
; 1198 : 			unsigned char
; 1199 : 				*ptr;
; 1200 : 
; 1201 : 			int
; 1202 : 				pitch;
; 1203 : 
; 1204 : 			unsigned short int
; 1205 : 				pixel_value;
; 1206 : 
; 1207 : 			//
; 1208 : 			// We're dealing with a 16bit texture format.
; 1209 : 			//
; 1210 : 
; 1211 : 			initialise_set_texture_pixel_lookup_table ( this_texture );

  000e1	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table

; 1212 : 
; 1213 : 			ptr = get_screen_data ( this_texture );

  000ea	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000f3	89 45 e0	 mov	 DWORD PTR _ptr$6[ebp], eax

; 1214 : 
; 1215 : 			pitch = get_screen_pitch ( this_texture );

  000f6	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  000ff	89 45 dc	 mov	 DWORD PTR _pitch$5[ebp], eax

; 1216 : 
; 1217 : 			for ( y = 0; y < height; y++ )

  00102	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00109	eb 09		 jmp	 SHORT $LN10@convert_no
$LN8@convert_no:
  0010b	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  0010e	83 c0 01	 add	 eax, 1
  00111	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN10@convert_no:
  00114	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00117	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  0011a	0f 8d 8e 00 00
	00		 jge	 $LN9@convert_no

; 1218 : 			{
; 1219 : 
; 1220 : 				for ( x = 0; x < width; x++ )

  00120	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00127	eb 09		 jmp	 SHORT $LN13@convert_no
$LN11@convert_no:
  00129	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0012c	83 c0 01	 add	 eax, 1
  0012f	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN13@convert_no:
  00132	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00135	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  00138	7d 62		 jge	 SHORT $LN12@convert_no

; 1221 : 				{
; 1222 : 
; 1223 : 					value = *data++;

  0013a	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0013d	8a 08		 mov	 cl, BYTE PTR [eax]
  0013f	88 4d ff	 mov	 BYTE PTR _value$[ebp], cl
  00142	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00145	83 c2 01	 add	 edx, 1
  00148	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1224 : 
; 1225 : 					pixel_value = set_texture_pixel_lookup_table[value];

  0014b	0f b6 45 ff	 movzx	 eax, BYTE PTR _value$[ebp]
  0014f	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR ?set_texture_pixel_lookup_table@@3PAGA[eax*2]
  00157	66 89 4d d8	 mov	 WORD PTR _pixel_value$4[ebp], cx

; 1226 : 
; 1227 : 					*( ( unsigned short int * ) &ptr[( x * 2 )] ) = pixel_value;

  0015b	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0015e	8b 4d e0	 mov	 ecx, DWORD PTR _ptr$6[ebp]
  00161	66 8b 55 d8	 mov	 dx, WORD PTR _pixel_value$4[ebp]
  00165	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 1228 : 
; 1229 : 					for ( y_count = 0; y_count < y_repeat; y_count++ )

  00169	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  00170	eb 09		 jmp	 SHORT $LN16@convert_no
$LN14@convert_no:
  00172	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  00175	83 c0 01	 add	 eax, 1
  00178	89 45 f0	 mov	 DWORD PTR _y_count$[ebp], eax
$LN16@convert_no:
  0017b	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  0017e	3b 45 ec	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  00181	7d 17		 jge	 SHORT $LN15@convert_no

; 1230 : 					{
; 1231 : 
; 1232 : 						*( ( unsigned short int * ) &ptr[( y_count * pitch ) + ( x * 2 )] ) = pixel_value;

  00183	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  00186	0f af 45 dc	 imul	 eax, DWORD PTR _pitch$5[ebp]
  0018a	03 45 e0	 add	 eax, DWORD PTR _ptr$6[ebp]
  0018d	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  00190	66 8b 55 d8	 mov	 dx, WORD PTR _pixel_value$4[ebp]
  00194	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1233 : 					}

  00198	eb d8		 jmp	 SHORT $LN14@convert_no
$LN15@convert_no:

; 1234 : 				}

  0019a	eb 8d		 jmp	 SHORT $LN11@convert_no
$LN12@convert_no:

; 1235 : 
; 1236 : 				ptr += ( y_repeat * pitch );

  0019c	8b 45 ec	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  0019f	0f af 45 dc	 imul	 eax, DWORD PTR _pitch$5[ebp]
  001a3	03 45 e0	 add	 eax, DWORD PTR _ptr$6[ebp]
  001a6	89 45 e0	 mov	 DWORD PTR _ptr$6[ebp], eax

; 1237 : 			}

  001a9	e9 5d ff ff ff	 jmp	 $LN8@convert_no
$LN9@convert_no:

; 1238 : 		}
; 1239 : 		else

  001ae	e9 c7 00 00 00	 jmp	 $LN1@convert_no
$LN30@convert_no:

; 1240 : 		{
; 1241 : 
; 1242 : 			unsigned char
; 1243 : 				*ptr;
; 1244 : 
; 1245 : 			int
; 1246 : 				pitch;
; 1247 : 
; 1248 : 			unsigned int
; 1249 : 				pixel_value;
; 1250 : 
; 1251 : 			//
; 1252 : 			// We're dealing with a 32 texture format.
; 1253 : 			//
; 1254 : 
; 1255 : 			initialise_set_texture_pixel_lookup_table ( this_texture );

  001b3	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table

; 1256 : 
; 1257 : 			ptr = get_screen_data ( this_texture );

  001bc	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  001c5	89 45 d4	 mov	 DWORD PTR _ptr$3[ebp], eax

; 1258 : 
; 1259 : 			pitch = get_screen_pitch ( this_texture );

  001c8	8b 45 14	 mov	 eax, DWORD PTR _this_texture$[ebp]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  001d1	89 45 d0	 mov	 DWORD PTR _pitch$2[ebp], eax

; 1260 : 
; 1261 : 			for ( y = 0; y < height; y++ )

  001d4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  001db	eb 09		 jmp	 SHORT $LN19@convert_no
$LN17@convert_no:
  001dd	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  001e0	83 c0 01	 add	 eax, 1
  001e3	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN19@convert_no:
  001e6	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  001e9	3b 45 10	 cmp	 eax, DWORD PTR _height$[ebp]
  001ec	0f 8d 88 00 00
	00		 jge	 $LN1@convert_no

; 1262 : 			{
; 1263 : 
; 1264 : 				for ( x = 0; x < width; x++ )

  001f2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001f9	eb 09		 jmp	 SHORT $LN22@convert_no
$LN20@convert_no:
  001fb	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001fe	83 c0 01	 add	 eax, 1
  00201	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN22@convert_no:
  00204	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00207	3b 45 0c	 cmp	 eax, DWORD PTR _width$[ebp]
  0020a	7d 5c		 jge	 SHORT $LN21@convert_no

; 1265 : 				{
; 1266 : 
; 1267 : 					value = *data++;

  0020c	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0020f	8a 08		 mov	 cl, BYTE PTR [eax]
  00211	88 4d ff	 mov	 BYTE PTR _value$[ebp], cl
  00214	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00217	83 c2 01	 add	 edx, 1
  0021a	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 1268 : 
; 1269 : 					pixel_value = set_texture_pixel_32bit_lookup_table[value];

  0021d	0f b6 45 ff	 movzx	 eax, BYTE PTR _value$[ebp]
  00221	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?set_texture_pixel_32bit_lookup_table@@3PAIA[eax*4]
  00228	89 4d cc	 mov	 DWORD PTR _pixel_value$1[ebp], ecx

; 1270 : 
; 1271 : 					*( ( unsigned int * ) &ptr[( x * 4 )] ) = pixel_value;

  0022b	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0022e	8b 4d d4	 mov	 ecx, DWORD PTR _ptr$3[ebp]
  00231	8b 55 cc	 mov	 edx, DWORD PTR _pixel_value$1[ebp]
  00234	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 1272 : 
; 1273 : 					for ( y_count = 0; y_count < y_repeat; y_count++ )

  00237	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _y_count$[ebp], 0
  0023e	eb 09		 jmp	 SHORT $LN25@convert_no
$LN23@convert_no:
  00240	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  00243	83 c0 01	 add	 eax, 1
  00246	89 45 f0	 mov	 DWORD PTR _y_count$[ebp], eax
$LN25@convert_no:
  00249	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  0024c	3b 45 ec	 cmp	 eax, DWORD PTR _y_repeat$[ebp]
  0024f	7d 15		 jge	 SHORT $LN24@convert_no

; 1274 : 					{
; 1275 : 
; 1276 : 						*( ( unsigned int * ) &ptr[( y_count * pitch ) + ( x * 4 )] ) = pixel_value;

  00251	8b 45 f0	 mov	 eax, DWORD PTR _y_count$[ebp]
  00254	0f af 45 d0	 imul	 eax, DWORD PTR _pitch$2[ebp]
  00258	03 45 d4	 add	 eax, DWORD PTR _ptr$3[ebp]
  0025b	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  0025e	8b 55 cc	 mov	 edx, DWORD PTR _pixel_value$1[ebp]
  00261	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1277 : 					}

  00264	eb da		 jmp	 SHORT $LN23@convert_no
$LN24@convert_no:

; 1278 : 				}

  00266	eb 93		 jmp	 SHORT $LN20@convert_no
$LN21@convert_no:

; 1279 : 
; 1280 : 				ptr += ( y_repeat * pitch );

  00268	8b 45 ec	 mov	 eax, DWORD PTR _y_repeat$[ebp]
  0026b	0f af 45 d0	 imul	 eax, DWORD PTR _pitch$2[ebp]
  0026f	03 45 d4	 add	 eax, DWORD PTR _ptr$3[ebp]
  00272	89 45 d4	 mov	 DWORD PTR _ptr$3[ebp], eax

; 1281 : 			}

  00275	e9 63 ff ff ff	 jmp	 $LN17@convert_no
$LN1@convert_no:

; 1282 : 		}
; 1283 : 	}
; 1284 : }

  0027a	5f		 pop	 edi
  0027b	5e		 pop	 esi
  0027c	5b		 pop	 ebx
  0027d	8b e5		 mov	 esp, ebp
  0027f	5d		 pop	 ebp
  00280	c2 14 00	 ret	 20			; 00000014H
?convert_no_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ENDP ; convert_no_alpha_texture_map_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?create_internal_texture_palettes@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?create_internal_texture_palettes@@YGXXZ PROC		; create_internal_texture_palettes, COMDAT

; 2061 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2062 : 	int
; 2063 : 		count;
; 2064 : 
; 2065 : 	for ( count = 0; count < number_of_system_texture_palettes; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@create_int
$LN2@create_int:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@create_int:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_texture_palettes@@3HA ; number_of_system_texture_palettes
  00024	7d 1f		 jge	 SHORT $LN1@create_int

; 2066 : 	{
; 2067 : 		f3d_palette_create ( system_texture_colour_tables[count], &system_texture_palettes[count] );

  00026	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00029	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR ?system_texture_palettes@@3PAPAUIDirectDrawPalette@@A[eax*4]
  00030	51		 push	 ecx
  00031	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00034	c1 e2 0a	 shl	 edx, 10			; 0000000aH
  00037	81 c2 00 00 00
	00		 add	 edx, OFFSET ?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A ; system_texture_colour_tables
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 ?f3d_palette_create@@YGXPAUtagPALETTEENTRY@@PAPAUIDirectDrawPalette@@@Z ; f3d_palette_create

; 2068 : 	}

  00043	eb cd		 jmp	 SHORT $LN2@create_int
$LN1@create_int:

; 2069 : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?create_internal_texture_palettes@@YGXXZ ENDP		; create_internal_texture_palettes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?add_texture_to_name_hash@@YGXI@Z
_TEXT	SEGMENT
_hash_index$ = -8					; size = 4
_hash$ = -4						; size = 4
_texture_index$ = 8					; size = 4
?add_texture_to_name_hash@@YGXI@Z PROC			; add_texture_to_name_hash, COMDAT

; 4711 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4712 : 	unsigned hash = get_hash(system_texture_names[texture_index]);

  00009	8b 45 08	 mov	 eax, DWORD PTR _texture_index$[ebp]
  0000c	c1 e0 07	 shl	 eax, 7
  0000f	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?get_hash@@YGIPBD@Z	; get_hash
  0001a	89 45 fc	 mov	 DWORD PTR _hash$[ebp], eax

; 4713 : 	unsigned hash_index = hash & 0xff;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _hash$[ebp]
  00020	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00025	89 45 f8	 mov	 DWORD PTR _hash_index$[ebp], eax

; 4714 : 
; 4715 : 	system_texture_name_hashes[texture_index].hash = hash;

  00028	6b 45 08 0c	 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _hash$[ebp]
  0002f	89 88 00 00 00
	00		 mov	 DWORD PTR ?system_texture_name_hashes@@3PAUTEXTURE_NAME_HASH_ENTRY@@A[eax], ecx

; 4716 : 	system_texture_name_hashes[texture_index].texture_index = texture_index;

  00035	6b 45 08 0c	 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _texture_index$[ebp]
  0003c	89 88 04 00 00
	00		 mov	 DWORD PTR ?system_texture_name_hashes@@3PAUTEXTURE_NAME_HASH_ENTRY@@A[eax+4], ecx

; 4717 : 	system_texture_name_hashes[texture_index].succ = system_texture_name_hash_table[hash_index];

  00042	6b 45 08 0c	 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _hash_index$[ebp]
  00049	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_texture_name_hash_table@@3PAPAUTEXTURE_NAME_HASH_ENTRY@@A[ecx*4]
  00050	89 90 08 00 00
	00		 mov	 DWORD PTR ?system_texture_name_hashes@@3PAUTEXTURE_NAME_HASH_ENTRY@@A[eax+8], edx

; 4718 : 	system_texture_name_hash_table[hash_index] = &system_texture_name_hashes[texture_index];

  00056	6b 45 08 0c	 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  0005a	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_name_hashes@@3PAUTEXTURE_NAME_HASH_ENTRY@@A ; system_texture_name_hashes
  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _hash_index$[ebp]
  00062	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?system_texture_name_hash_table@@3PAPAUTEXTURE_NAME_HASH_ENTRY@@A[ecx*4], eax

; 4719 : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?add_texture_to_name_hash@@YGXI@Z ENDP			; add_texture_to_name_hash
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?get_hash@@YGIPBD@Z
_TEXT	SEGMENT
_hash$ = -12						; size = 4
_letter$ = -8						; size = 4
_length$ = -4						; size = 4
_name$ = 8						; size = 4
?get_hash@@YGIPBD@Z PROC				; get_hash, COMDAT

; 4696 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4697 : 	unsigned length = strlen(name);

  00009	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	89 45 fc	 mov	 DWORD PTR _length$[ebp], eax

; 4698 : 	unsigned letter;
; 4699 : 	unsigned hash = length;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  0001b	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax

; 4700 : 
; 4701 : 	for ( letter = 0; letter < length; letter++ )

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _letter$[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@get_hash
$LN2@get_hash:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _letter$[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _letter$[ebp], eax
$LN4@get_hash:
  00030	8b 45 f8	 mov	 eax, DWORD PTR _letter$[ebp]
  00033	3b 45 fc	 cmp	 eax, DWORD PTR _length$[ebp]
  00036	73 23		 jae	 SHORT $LN3@get_hash

; 4702 : 	{
; 4703 : 		hash += toupper ( name[letter] );

  00038	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0003b	03 45 f8	 add	 eax, DWORD PTR _letter$[ebp]
  0003e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00041	51		 push	 ecx
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00048	83 c4 04	 add	 esp, 4
  0004b	03 45 f4	 add	 eax, DWORD PTR _hash$[ebp]
  0004e	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax

; 4704 : 		hash <<= 1;

  00051	8b 45 f4	 mov	 eax, DWORD PTR _hash$[ebp]
  00054	d1 e0		 shl	 eax, 1
  00056	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax

; 4705 : 	}

  00059	eb cc		 jmp	 SHORT $LN2@get_hash
$LN3@get_hash:

; 4706 : 
; 4707 : 	return hash;

  0005b	8b 45 f4	 mov	 eax, DWORD PTR _hash$[ebp]

; 4708 : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?get_hash@@YGIPBD@Z ENDP				; get_hash
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?add_new_texture@@YGHPBD0@Z
_TEXT	SEGMENT
tv210 = -212						; size = 4
tv174 = -212						; size = 4
tv86 = -212						; size = 4
tv194 = -210						; size = 2
_flags$ = -144						; size = 4
_name$ = -140						; size = 128
_texture_index$ = -12					; size = 4
_camo$ = -8						; size = 4
_offset$ = -4						; size = 4
_texture_name$ = 8					; size = 4
_source$ = 12						; size = 4
?add_new_texture@@YGHPBD0@Z PROC			; add_new_texture, COMDAT

; 4625 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4626 : 	int
; 4627 : 		offset,
; 4628 : 		camo,
; 4629 : 		texture_index;
; 4630 : 
; 4631 : 	char
; 4632 : 		name[128];
; 4633 : 
; 4634 : 	texture_flags
; 4635 : 		*flags;
; 4636 : 
; 4637 : 	strncpy ( name, texture_name, 127 );

  0000c	6a 7f		 push	 127			; 0000007fH
  0000e	8b 45 08	 mov	 eax, DWORD PTR _texture_name$[ebp]
  00011	50		 push	 eax
  00012	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _name$[ebp]
  00018	51		 push	 ecx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4638 : 	name[127] = '\0';

  00022	b8 01 00 00 00	 mov	 eax, 1
  00027	6b c8 7f	 imul	 ecx, eax, 127
  0002a	c6 84 0d 74 ff
	ff ff 00	 mov	 BYTE PTR _name$[ebp+ecx], 0

; 4639 : 	strupr ( name );

  00032	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strupr
  0003f	83 c4 04	 add	 esp, 4

; 4640 : 	offset = strlen ( name ) - TEXTSUFFIX_SIZE;

  00042	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _strlen
  0004e	83 c4 04	 add	 esp, 4
  00051	83 e8 02	 sub	 eax, 2
  00054	89 45 fc	 mov	 DWORD PTR _offset$[ebp], eax

; 4641 : 	camo = offset > 0 && ( !memcmp ( name + offset, TEXTSUFFIX_DESERT, sizeof ( TEXTSUFFIX_DESERT ) ) || !memcmp ( name + offset, TEXTSUFFIX_WINTER, sizeof ( TEXTSUFFIX_WINTER ) ) );

  00057	83 7d fc 00	 cmp	 DWORD PTR _offset$[ebp], 0
  0005b	7e 48		 jle	 SHORT $LN10@add_new_te
  0005d	6a 03		 push	 3
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_02KEDOHJFP@?9D@
  00064	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  00067	8d 8c 05 74 ff
	ff ff		 lea	 ecx, DWORD PTR _name$[ebp+eax]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 _memcmp
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	85 c0		 test	 eax, eax
  00079	74 1e		 je	 SHORT $LN9@add_new_te
  0007b	6a 03		 push	 3
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_02MFNBDIMN@?9W@
  00082	8b 55 fc	 mov	 edx, DWORD PTR _offset$[ebp]
  00085	8d 84 15 74 ff
	ff ff		 lea	 eax, DWORD PTR _name$[ebp+edx]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _memcmp
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
  00095	85 c0		 test	 eax, eax
  00097	75 0c		 jne	 SHORT $LN10@add_new_te
$LN9@add_new_te:
  00099	c7 85 2c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv86[ebp], 1
  000a3	eb 0a		 jmp	 SHORT $LN11@add_new_te
$LN10@add_new_te:
  000a5	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN11@add_new_te:
  000af	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  000b5	89 4d f8	 mov	 DWORD PTR _camo$[ebp], ecx

; 4642 : 	if ( camo )

  000b8	83 7d f8 00	 cmp	 DWORD PTR _camo$[ebp], 0
  000bc	74 0b		 je	 SHORT $LN2@add_new_te

; 4643 : 	{
; 4644 : 		name[offset] = '\0';

  000be	8b 45 fc	 mov	 eax, DWORD PTR _offset$[ebp]
  000c1	c6 84 05 74 ff
	ff ff 00	 mov	 BYTE PTR _name$[ebp+eax], 0
$LN2@add_new_te:

; 4645 : 	}
; 4646 : 
; 4647 : 	texture_index = get_system_texture_index ( name );

  000c9	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?get_system_texture_index@@YGHPBD@Z ; get_system_texture_index
  000d5	89 45 f4	 mov	 DWORD PTR _texture_index$[ebp], eax

; 4648 : 	if ( texture_index != -1 )

  000d8	83 7d f4 ff	 cmp	 DWORD PTR _texture_index$[ebp], -1
  000dc	0f 84 87 00 00
	00		 je	 $LN3@add_new_te

; 4649 : 	{
; 4650 : 		if ( camo && !system_texture_info[texture_index].flags.number_of_camoflage_textures )

  000e2	83 7d f8 00	 cmp	 DWORD PTR _camo$[ebp], 0
  000e6	74 35		 je	 SHORT $LN4@add_new_te
  000e8	8b 45 f4	 mov	 eax, DWORD PTR _texture_index$[ebp]
  000eb	0f b6 0c c5 02
	00 00 00	 movzx	 ecx, BYTE PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+2]
  000f3	85 c9		 test	 ecx, ecx
  000f5	75 26		 jne	 SHORT $LN4@add_new_te

; 4651 : 		{
; 4652 : 			debug_fatal ( "Texture '%s': %s defined it as non-camo but %s says it's camo", name, new_texture_sources[texture_index], source );

  000f7	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  000fa	50		 push	 eax
  000fb	69 4d f4 04 01
	00 00		 imul	 ecx, DWORD PTR _texture_index$[ebp], 260
  00102	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?new_texture_sources@@3PAY0BAE@DA ; new_texture_sources
  00108	51		 push	 ecx
  00109	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _name$[ebp]
  0010f	52		 push	 edx
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@LDEBBGMJ@Texture?5?8?$CFs?8?3?5?$CFs?5defined?5it?5as?5@
  00115	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0011a	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@add_new_te:

; 4653 : 		}
; 4654 : 		if ( texture_index > TEXTURE_INDEX_LAST_DEFAULT_INDEX && !camo && system_texture_info[texture_index].flags.number_of_camoflage_textures )

  0011d	81 7d f4 07 09
	00 00		 cmp	 DWORD PTR _texture_index$[ebp], 2311 ; 00000907H
  00124	7e 3b		 jle	 SHORT $LN5@add_new_te
  00126	83 7d f8 00	 cmp	 DWORD PTR _camo$[ebp], 0
  0012a	75 35		 jne	 SHORT $LN5@add_new_te
  0012c	8b 45 f4	 mov	 eax, DWORD PTR _texture_index$[ebp]
  0012f	0f b6 0c c5 02
	00 00 00	 movzx	 ecx, BYTE PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+2]
  00137	85 c9		 test	 ecx, ecx
  00139	74 26		 je	 SHORT $LN5@add_new_te

; 4655 : 		{
; 4656 : 			debug_fatal ( "Texture '%s': %s defined it as camo but %s says it's non-camo", name, new_texture_sources[texture_index], source );

  0013b	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  0013e	50		 push	 eax
  0013f	69 4d f4 04 01
	00 00		 imul	 ecx, DWORD PTR _texture_index$[ebp], 260
  00146	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?new_texture_sources@@3PAY0BAE@DA ; new_texture_sources
  0014c	51		 push	 ecx
  0014d	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _name$[ebp]
  00153	52		 push	 edx
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@JKMJPIPO@Texture?5?8?$CFs?8?3?5?$CFs?5defined?5it?5as?5@
  00159	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0015e	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@add_new_te:

; 4657 : 		}
; 4658 : 		return texture_index;

  00161	8b 45 f4	 mov	 eax, DWORD PTR _texture_index$[ebp]
  00164	e9 ef 01 00 00	 jmp	 $LN1@add_new_te
$LN3@add_new_te:

; 4659 : 	}
; 4660 : 
; 4661 : 	if ( number_of_system_textures >= MAX_TEXTURES )

  00169	81 3d 00 00 00
	00 00 20 00 00	 cmp	 DWORD PTR ?number_of_system_textures@@3HA, 8192 ; number_of_system_textures, 00002000H
  00173	7c 14		 jl	 SHORT $LN6@add_new_te

; 4662 : 	{
; 4663 : 		debug_log ( "No available slot for a new texture" );

  00175	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NIHPNKEO@No?5available?5slot?5for?5a?5new?5tex@
  0017a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0017f	83 c4 04	 add	 esp, 4

; 4664 : 		return 0;

  00182	33 c0		 xor	 eax, eax
  00184	e9 cf 01 00 00	 jmp	 $LN1@add_new_te
$LN6@add_new_te:

; 4665 : 	}
; 4666 : 
; 4667 : 	strcpy ( system_texture_names[number_of_system_textures], name );

  00189	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  0018f	50		 push	 eax
  00190	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00196	c1 e1 07	 shl	 ecx, 7
  00199	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  0019f	51		 push	 ecx
  001a0	e8 00 00 00 00	 call	 _strcpy
  001a5	83 c4 08	 add	 esp, 8

; 4668 : 	strcpy ( new_texture_sources[number_of_system_textures], source );

  001a8	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  001ab	50		 push	 eax
  001ac	69 0d 00 00 00
	00 04 01 00 00	 imul	 ecx, DWORD PTR ?number_of_system_textures@@3HA, 260 ; number_of_system_textures
  001b6	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?new_texture_sources@@3PAY0BAE@DA ; new_texture_sources
  001bc	51		 push	 ecx
  001bd	e8 00 00 00 00	 call	 _strcpy
  001c2	83 c4 08	 add	 esp, 8

; 4669 : 	if ( camo )

  001c5	83 7d f8 00	 cmp	 DWORD PTR _camo$[ebp], 0
  001c9	0f 84 af 00 00
	00		 je	 $LN7@add_new_te

; 4670 : 	{
; 4671 : 		debug_log ( "Adding texture %i '%s' camo main", number_of_system_textures, name );

  001cf	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  001d5	50		 push	 eax
  001d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  001dc	51		 push	 ecx
  001dd	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FIPLCAAE@Adding?5texture?5?$CFi?5?8?$CFs?8?5camo?5mai@
  001e2	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4672 : 
; 4673 : 		flags = &system_texture_info[number_of_system_textures].flags;

  001ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  001ef	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  001f6	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _flags$[ebp], ecx

; 4674 : 		flags->main_texture = 1;

  001fc	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _flags$[ebp]
  00202	66 8b 08	 mov	 cx, WORD PTR [eax]
  00205	66 83 c9 40	 or	 cx, 64			; 00000040H
  00209	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _flags$[ebp]
  0020f	66 89 0a	 mov	 WORD PTR [edx], cx

; 4675 : 		flags->number_of_camoflage_textures = 1;

  00212	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _flags$[ebp]
  00218	c6 40 02 01	 mov	 BYTE PTR [eax+2], 1

; 4676 : 		add_texture_to_name_hash ( number_of_system_textures++ );

  0021c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00221	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv174[ebp], eax
  00227	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  0022d	83 c1 01	 add	 ecx, 1
  00230	89 0d 00 00 00
	00		 mov	 DWORD PTR ?number_of_system_textures@@3HA, ecx ; number_of_system_textures
  00236	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR tv174[ebp]
  0023c	52		 push	 edx
  0023d	e8 00 00 00 00	 call	 ?add_texture_to_name_hash@@YGXI@Z ; add_texture_to_name_hash

; 4677 : 
; 4678 : 		strcpy ( system_texture_names[number_of_system_textures], name );

  00242	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  00248	50		 push	 eax
  00249	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  0024f	c1 e1 07	 shl	 ecx, 7
  00252	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00258	51		 push	 ecx
  00259	e8 00 00 00 00	 call	 _strcpy
  0025e	83 c4 08	 add	 esp, 8

; 4679 : 		strcpy ( new_texture_sources[number_of_system_textures], source );

  00261	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00264	50		 push	 eax
  00265	69 0d 00 00 00
	00 04 01 00 00	 imul	 ecx, DWORD PTR ?number_of_system_textures@@3HA, 260 ; number_of_system_textures
  0026f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?new_texture_sources@@3PAY0BAE@DA ; new_texture_sources
  00275	51		 push	 ecx
  00276	e8 00 00 00 00	 call	 _strcpy
  0027b	83 c4 08	 add	 esp, 8
$LN7@add_new_te:

; 4680 : 	}
; 4681 : 
; 4682 : 	debug_log ( "Adding texture %i '%s'", number_of_system_textures, system_texture_names[number_of_system_textures] );

  0027e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00283	c1 e0 07	 shl	 eax, 7
  00286	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  0028b	50		 push	 eax
  0028c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00292	51		 push	 ecx
  00293	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MKCPEANE@Adding?5texture?5?$CFi?5?8?$CFs?8@
  00298	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0029d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4683 : 	flags = &system_texture_info[number_of_system_textures].flags;

  002a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  002a5	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  002ac	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _flags$[ebp], ecx

; 4684 : 	flags->main_texture = !camo;

  002b2	83 7d f8 00	 cmp	 DWORD PTR _camo$[ebp], 0
  002b6	75 0e		 jne	 SHORT $LN12@add_new_te
  002b8	b8 01 00 00 00	 mov	 eax, 1
  002bd	66 89 85 2e ff
	ff ff		 mov	 WORD PTR tv194[ebp], ax
  002c4	eb 09		 jmp	 SHORT $LN13@add_new_te
$LN12@add_new_te:
  002c6	33 c9		 xor	 ecx, ecx
  002c8	66 89 8d 2e ff
	ff ff		 mov	 WORD PTR tv194[ebp], cx
$LN13@add_new_te:
  002cf	66 8b 95 2e ff
	ff ff		 mov	 dx, WORD PTR tv194[ebp]
  002d6	66 83 e2 01	 and	 dx, 1
  002da	66 c1 e2 06	 shl	 dx, 6
  002de	b8 bf ff 00 00	 mov	 eax, 65471		; 0000ffbfH
  002e3	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _flags$[ebp]
  002e9	66 23 01	 and	 ax, WORD PTR [ecx]
  002ec	66 0b c2	 or	 ax, dx
  002ef	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _flags$[ebp]
  002f5	66 89 02	 mov	 WORD PTR [edx], ax

; 4685 : 	flags->camoflage_texture = camo;

  002f8	66 8b 45 f8	 mov	 ax, WORD PTR _camo$[ebp]
  002fc	66 83 e0 01	 and	 ax, 1
  00300	66 c1 e0 07	 shl	 ax, 7
  00304	b9 7f ff 00 00	 mov	 ecx, 65407		; 0000ff7fH
  00309	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _flags$[ebp]
  0030f	66 23 0a	 and	 cx, WORD PTR [edx]
  00312	66 0b c8	 or	 cx, ax
  00315	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _flags$[ebp]
  0031b	66 89 08	 mov	 WORD PTR [eax], cx

; 4686 : 	flags->camoflage_index = camo;

  0031e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _flags$[ebp]
  00324	8a 4d f8	 mov	 cl, BYTE PTR _camo$[ebp]
  00327	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 4687 : 	add_texture_to_name_hash ( number_of_system_textures );

  0032a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  0032f	50		 push	 eax
  00330	e8 00 00 00 00	 call	 ?add_texture_to_name_hash@@YGXI@Z ; add_texture_to_name_hash

; 4688 : 	return number_of_system_textures++ - camo;

  00335	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  0033a	2b 45 f8	 sub	 eax, DWORD PTR _camo$[ebp]
  0033d	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv210[ebp], eax
  00343	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00349	83 c1 01	 add	 ecx, 1
  0034c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?number_of_system_textures@@3HA, ecx ; number_of_system_textures
  00352	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv210[ebp]
$LN1@add_new_te:

; 4689 : }

  00358	5f		 pop	 edi
  00359	5e		 pop	 esi
  0035a	5b		 pop	 ebx
  0035b	8b e5		 mov	 esp, ebp
  0035d	5d		 pop	 ebp
  0035e	c2 08 00	 ret	 8
?add_new_texture@@YGHPBD0@Z ENDP			; add_new_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?get_current_map_longitude_offset@@YGMXZ
_TEXT	SEGMENT
?get_current_map_longitude_offset@@YGMXZ PROC		; get_current_map_longitude_offset, COMDAT

; 4364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4365 : 	return current_map_info.longitude;

  00009	d9 05 20 06 00
	00		 fld	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568

; 4366 : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?get_current_map_longitude_offset@@YGMXZ ENDP		; get_current_map_longitude_offset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?get_current_map_latitude_offset@@YGMXZ
_TEXT	SEGMENT
?get_current_map_latitude_offset@@YGMXZ PROC		; get_current_map_latitude_offset, COMDAT

; 4359 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4360 : 	return current_map_info.latitude;

  00009	d9 05 1c 06 00
	00		 fld	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564

; 4361 : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?get_current_map_latitude_offset@@YGMXZ ENDP		; get_current_map_latitude_offset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?read_map_info_data@@YGXXZ
_TEXT	SEGMENT
tv208 = -480						; size = 4
_lng$1 = -412						; size = 4
_lat$2 = -408						; size = 4
_value$3 = -404						; size = 4
_variable$4 = -400					; size = 4
_list$ = -396						; size = 4
_map$ = -392						; size = 4
_filename$ = -388					; size = 128
_buf$ = -260						; size = 256
_fin$ = -4						; size = 4
?read_map_info_data@@YGXXZ PROC				; read_map_info_data, COMDAT

; 4461 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 01 00
	00		 sub	 esp, 480		; 000001e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4462 : 	FILE *fin;
; 4463 : 
; 4464 : 	char
; 4465 : 		buf[256],
; 4466 : 		filename[128];
; 4467 : 
; 4468 : 	const char
; 4469 : 		*map;
; 4470 : 
; 4471 : 	directory_file_list
; 4472 : 		*list;
; 4473 : 
; 4474 : 	//VJ 060218 texture bug autosave fix, mapinfo was reinitialized each autosave
; 4475 : 	// moved to init_3d.c
; 4476 : 	//initialise_custom_map_info();
; 4477 : 
; 4478 : 	// VJ 051223 head of the session list, title field contains warzone name "Taiwan" etc
; 4479 : 	//strcpy(current_map_info.name, get_session_list()->title);
; 4480 : 	//VJ 040206: doesn't work in MP because the title is: -multiplayer- !!!
; 4481 : 
; 4482 : 	// the purpose of this bit of code is to detect the warzone name which is then used
; 4483 : 	// as directory name under /graphics/textures/terrain/[name] to read the textures from
; 4484 : 
; 4485 : 	//VJ 020206 Changed to using data_path, because that one is initialized in multiplayer
; 4486 : 
; 4487 : 	// try and read an integer > 9
; 4488 : 	map = strchr(get_current_game_session()->data_path, '\0')-2;

  0000c	6a 00		 push	 0
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A ; current_game_session
  00013	83 c0 1c	 add	 eax, 28			; 0000001cH
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?strchr@@YAPADQADH@Z	; strchr
  0001c	83 c4 08	 add	 esp, 8
  0001f	83 e8 02	 sub	 eax, 2
  00022	89 85 78 fe ff
	ff		 mov	 DWORD PTR _map$[ebp], eax

; 4489 : 	current_map_info.mapnr = atoi(map);

  00028	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _map$[ebp]
  0002e	50		 push	 eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00035	83 c4 04	 add	 esp, 4
  00038	a3 10 04 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1040, eax

; 4490 : 	// if result = 0 then read it as an integer < 9
; 4491 : 	if (current_map_info.mapnr == 0)	{

  0003d	83 3d 10 04 00
	00 00		 cmp	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1040, 0
  00044	75 24		 jne	 SHORT $LN6@read_map_i

; 4492 : 		map++;

  00046	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _map$[ebp]
  0004c	83 c0 01	 add	 eax, 1
  0004f	89 85 78 fe ff
	ff		 mov	 DWORD PTR _map$[ebp], eax

; 4493 : 		current_map_info.mapnr = atoi(map);

  00055	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _map$[ebp]
  0005b	50		 push	 eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00062	83 c4 04	 add	 esp, 4
  00065	a3 10 04 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1040, eax
$LN6@read_map_i:

; 4494 : 	}
; 4495 : 
; 4496 : 	initialize_known_coordinates();

  0006a	e8 00 00 00 00	 call	 ?initialize_known_coordinates@@YGXXZ ; initialize_known_coordinates

; 4497 : 
; 4498 : 	debug_log("###CUSTOM TEXTURE STARTUP: read_map_info_data: warzone number: %d",current_map_info.mapnr);

  0006f	a1 10 04 00 00	 mov	 eax, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1040
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@EOLEGPAE@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
  0007a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0007f	83 c4 08	 add	 esp, 8

; 4499 : 
; 4500 : 	// now find the "short" name of the warzone by the campaign file. This is how it is done in the first place in uisession.c!
; 4501 : 	//use the data_path to find the texture name by looking at the first file in the first campaign dir
; 4502 : 	//which is always taiwan.chc or yemen.chc etc
; 4503 : 	sprintf(filename,"%s\\camp01\\*.chc", get_current_game_session()->data_path);

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A ; current_game_session
  00087	83 c0 1c	 add	 eax, 28			; 0000001cH
  0008a	50		 push	 eax
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HDFIGNCC@?$CFs?2camp01?2?$CK?4chc@
  00090	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _sprintf
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4504 : 	list = get_first_directory_file(filename);

  0009f	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?get_first_directory_file@@YGPAUDIRECTORY_FILE_LIST@@PBD@Z ; get_first_directory_file
  000ab	89 85 74 fe ff
	ff		 mov	 DWORD PTR _list$[ebp], eax

; 4505 : 	map = get_directory_file_filename (list);

  000b1	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _list$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?get_directory_file_filename@@YGPBDPAUDIRECTORY_FILE_LIST@@@Z ; get_directory_file_filename
  000bd	89 85 78 fe ff
	ff		 mov	 DWORD PTR _map$[ebp], eax

; 4506 : 
; 4507 : 	// look for the last occurence of '\\' or '/'
; 4508 : 	if (strrchr(map,'\\')){

  000c3	6a 5c		 push	 92			; 0000005cH
  000c5	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _map$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _strrchr
  000d1	83 c4 08	 add	 esp, 8
  000d4	85 c0		 test	 eax, eax
  000d6	74 19		 je	 SHORT $LN7@read_map_i

; 4509 : 		map = strrchr(map, '\\');

  000d8	6a 5c		 push	 92			; 0000005cH
  000da	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _map$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _strrchr
  000e6	83 c4 08	 add	 esp, 8
  000e9	89 85 78 fe ff
	ff		 mov	 DWORD PTR _map$[ebp], eax

; 4510 : 	}
; 4511 : 	else

  000ef	eb 2c		 jmp	 SHORT $LN9@read_map_i
$LN7@read_map_i:

; 4512 : 	if (strrchr(map,'/')){

  000f1	6a 2f		 push	 47			; 0000002fH
  000f3	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _map$[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _strrchr
  000ff	83 c4 08	 add	 esp, 8
  00102	85 c0		 test	 eax, eax
  00104	74 17		 je	 SHORT $LN9@read_map_i

; 4513 : 		map = strrchr(map, '/');

  00106	6a 2f		 push	 47			; 0000002fH
  00108	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _map$[ebp]
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 _strrchr
  00114	83 c4 08	 add	 esp, 8
  00117	89 85 78 fe ff
	ff		 mov	 DWORD PTR _map$[ebp], eax
$LN9@read_map_i:

; 4514 : 	}
; 4515 : 	//copy the file name
; 4516 : 	strcpy(current_map_info.name, map);

  0011d	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _map$[ebp]
  00123	50		 push	 eax
  00124	68 90 03 00 00	 push	 OFFSET ?current_map_info@@3UCUSTOM_MAP_INFO@@A+912
  00129	e8 00 00 00 00	 call	 _strcpy
  0012e	83 c4 08	 add	 esp, 8

; 4517 : 
; 4518 : 	current_map_info.name[strlen(map)-4] = '\0';

  00131	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _map$[ebp]
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 _strlen
  0013d	83 c4 04	 add	 esp, 4
  00140	c6 80 8c 03 00
	00 00		 mov	 BYTE PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+908], 0

; 4519 : 
; 4520 : 	debug_log("###CUSTOM TEXTURE STARTUP: read_map_info_data: warzone name: %s",current_map_info.name);

  00147	68 90 03 00 00	 push	 OFFSET ?current_map_info@@3UCUSTOM_MAP_INFO@@A+912
  0014c	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@MPJDGONJ@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
  00151	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00156	83 c4 08	 add	 esp, 8

; 4521 : 
; 4522 : 	//we now know the name
; 4523 : 	// parse mapinfo.txt that should be added to new custom campaigns
; 4524 : 	sprintf(filename,"%s\\mapinfo.txt", get_current_game_session()->data_path);

  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A ; current_game_session
  0015e	83 c0 1c	 add	 eax, 28			; 0000001cH
  00161	50		 push	 eax
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OIMGKHAN@?$CFs?2mapinfo?4txt@
  00167	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  0016d	51		 push	 ecx
  0016e	e8 00 00 00 00	 call	 _sprintf
  00173	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4525 : 
; 4526 : 	//VJ 050820 added file checking to prevent crash
; 4527 : 	if ( file_exist ( filename ) )

  00176	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00182	85 c0		 test	 eax, eax
  00184	0f 84 0a 02 00
	00		 je	 $LN10@read_map_i

; 4528 : 	{
; 4529 : 		debug_log("###CUSTOM TEXTURE STARTUP: read_map_info_data: reading mainfo.txt: %s",filename);

  0018a	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00190	50		 push	 eax
  00191	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@GKEPHIHF@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
  00196	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0019b	83 c4 08	 add	 esp, 8

; 4530 : 
; 4531 : 		fin = fopen(filename,"r");

  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  001a3	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  001a9	50		 push	 eax
  001aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  001b0	83 c4 08	 add	 esp, 8
  001b3	89 45 fc	 mov	 DWORD PTR _fin$[ebp], eax
$LN29@read_map_i:

; 4532 : 
; 4533 : 		while (fgets(buf, sizeof(buf), fin))

  001b6	8b 45 fc	 mov	 eax, DWORD PTR _fin$[ebp]
  001b9	50		 push	 eax
  001ba	68 00 01 00 00	 push	 256			; 00000100H
  001bf	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  001c5	51		 push	 ecx
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  001cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cf	85 c0		 test	 eax, eax
  001d1	0f 84 b0 01 00
	00		 je	 $LN3@read_map_i

; 4534 : 		{
; 4535 : 			char
; 4536 : 				*variable = strtok(buf,"="),

  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_01NEMOKFLO@?$DN@
  001dc	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  001e2	50		 push	 eax
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  001e9	83 c4 08	 add	 esp, 8
  001ec	89 85 70 fe ff
	ff		 mov	 DWORD PTR _variable$4[ebp], eax

; 4537 : 				*value = strtok(NULL,"#");

  001f2	68 00 00 00 00	 push	 OFFSET ??_C@_01IPJKGB@?$CD@
  001f7	6a 00		 push	 0
  001f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  001ff	83 c4 08	 add	 esp, 8
  00202	89 85 6c fe ff
	ff		 mov	 DWORD PTR _value$3[ebp], eax

; 4538 : 
; 4539 : 			if (!*variable || !value || !*value)

  00208	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _variable$4[ebp]
  0020e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00211	85 c9		 test	 ecx, ecx
  00213	74 16		 je	 SHORT $LN12@read_map_i
  00215	83 bd 6c fe ff
	ff 00		 cmp	 DWORD PTR _value$3[ebp], 0
  0021c	74 0d		 je	 SHORT $LN12@read_map_i
  0021e	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _value$3[ebp]
  00224	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00227	85 c9		 test	 ecx, ecx
  00229	75 02		 jne	 SHORT $LN11@read_map_i
$LN12@read_map_i:

; 4540 : 				continue;

  0022b	eb 89		 jmp	 SHORT $LN29@read_map_i
$LN11@read_map_i:

; 4541 : 
; 4542 : 			//VJ 051225 added more map info for custom map reading
; 4543 : 			//scan contours and camo
; 4544 : 
; 4545 : 			// if a season is not determined by the interface, MP or savegame
; 4546 : 			if (startswith(variable, "season"))

  0022d	68 00 00 00 00	 push	 OFFSET ??_C@_06ICAHOPGF@season@
  00232	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _variable$4[ebp]
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ?startswith@@YGHPBD0@Z	; startswith
  0023e	85 c0		 test	 eax, eax
  00240	74 53		 je	 SHORT $LN13@read_map_i

; 4547 : 			{
; 4548 : 				if (current_map_info.season == SESSION_SEASON_INVALID)

  00242	83 3d 14 04 00
	00 00		 cmp	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 0
  00249	75 45		 jne	 SHORT $LN15@read_map_i

; 4549 : 				{
; 4550 : 					current_map_info.season = atoi(value);

  0024b	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _value$3[ebp]
  00251	50		 push	 eax
  00252	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00258	83 c4 04	 add	 esp, 4
  0025b	a3 14 04 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, eax

; 4551 : 					if (current_map_info.season == 0)

  00260	83 3d 14 04 00
	00 00		 cmp	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 0
  00267	75 0a		 jne	 SHORT $LN16@read_map_i

; 4552 : 						current_map_info.season = 1;

  00269	c7 05 14 04 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 1
$LN16@read_map_i:

; 4553 : 					debug_log("###CUSTOM TEXTURE STARTUP: read_map_info_data: mapinfo.txt: season: %d",	current_map_info.season);

  00273	a1 14 04 00 00	 mov	 eax, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044
  00278	50		 push	 eax
  00279	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@CFLDFJAE@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
  0027e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00283	83 c4 08	 add	 esp, 8

; 4554 : 					set_global_season( current_map_info.season );

  00286	a1 14 04 00 00	 mov	 eax, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044
  0028b	a3 14 04 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, eax
$LN15@read_map_i:

; 4555 : 				}
; 4556 : 			}

  00290	e9 ed 00 00 00	 jmp	 $LN22@read_map_i
$LN13@read_map_i:

; 4557 : 
; 4558 : 			else if (startswith(variable, "dry river"))

  00295	68 00 00 00 00	 push	 OFFSET ??_C@_09KJAHDPPO@dry?5river@
  0029a	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _variable$4[ebp]
  002a0	50		 push	 eax
  002a1	e8 00 00 00 00	 call	 ?startswith@@YGHPBD0@Z	; startswith
  002a6	85 c0		 test	 eax, eax
  002a8	74 2d		 je	 SHORT $LN17@read_map_i

; 4559 : 			{
; 4560 : 				current_map_info.dry_river = atoi(value);

  002aa	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _value$3[ebp]
  002b0	50		 push	 eax
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  002b7	83 c4 04	 add	 esp, 4
  002ba	a3 60 03 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+864, eax

; 4561 : 				debug_log("###CUSTOM TEXTURE STARTUP: read_map_info_data: mapinfo.txt: dry river: %d",	current_map_info.dry_river);

  002bf	a1 60 03 00 00	 mov	 eax, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+864
  002c4	50		 push	 eax
  002c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@MIOGJMEF@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
  002ca	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  002cf	83 c4 08	 add	 esp, 8
  002d2	e9 ab 00 00 00	 jmp	 $LN22@read_map_i
$LN17@read_map_i:

; 4562 : 			}
; 4563 : 
; 4564 : 			else if (startswith(variable, "coordinate"))

  002d7	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KOOFAJAP@coordinate@
  002dc	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _variable$4[ebp]
  002e2	50		 push	 eax
  002e3	e8 00 00 00 00	 call	 ?startswith@@YGHPBD0@Z	; startswith
  002e8	85 c0		 test	 eax, eax
  002ea	74 59		 je	 SHORT $LN19@read_map_i

; 4565 : 			{
; 4566 : 				float lat, lng;
; 4567 : 				if (sscanf(value, "%f,%f", &lat, &lng) == 2)

  002ec	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR _lng$1[ebp]
  002f2	50		 push	 eax
  002f3	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _lat$2[ebp]
  002f9	51		 push	 ecx
  002fa	68 00 00 00 00	 push	 OFFSET ??_C@_05OIOLBAJI@?$CFf?0?$CFf@
  002ff	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _value$3[ebp]
  00305	52		 push	 edx
  00306	e8 00 00 00 00	 call	 _sscanf
  0030b	83 c4 10	 add	 esp, 16			; 00000010H
  0030e	83 f8 02	 cmp	 eax, 2
  00311	75 30		 jne	 SHORT $LN21@read_map_i

; 4568 : 				{
; 4569 : 					current_map_info.latitude = rad(lat);

  00313	f3 0f 10 85 68
	fe ff ff	 movss	 xmm0, DWORD PTR _lat$2[ebp]
  0031b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00323	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4570 : 					current_map_info.longitude = rad(lng);

  0032b	f3 0f 10 85 64
	fe ff ff	 movss	 xmm0, DWORD PTR _lng$1[ebp]
  00333	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0033b	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0
$LN21@read_map_i:

; 4571 : 				}
; 4572 : 			}

  00343	eb 3d		 jmp	 SHORT $LN22@read_map_i
$LN19@read_map_i:

; 4573 : 
; 4574 : 			// Craig start Feb. 2009
; 4575 : 			else if (startswith(variable, "gouraud_shading"))

  00345	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CHAMJNPK@gouraud_shading@
  0034a	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _variable$4[ebp]
  00350	50		 push	 eax
  00351	e8 00 00 00 00	 call	 ?startswith@@YGHPBD0@Z	; startswith
  00356	85 c0		 test	 eax, eax
  00358	74 28		 je	 SHORT $LN22@read_map_i

; 4576 : 			{
; 4577 : 				current_map_info.gouraud_shading = atoi(value);

  0035a	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _value$3[ebp]
  00360	50		 push	 eax
  00361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00367	83 c4 04	 add	 esp, 4
  0036a	a3 64 03 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+868, eax

; 4578 : 				debug_log("###CUSTOM TEXTURE STARTUP: read_map_info_data: mapinfo.txt: gouraud_shading: %d",	current_map_info.gouraud_shading);

  0036f	a1 64 03 00 00	 mov	 eax, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+868
  00374	50		 push	 eax
  00375	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HIHENPAM@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
  0037a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0037f	83 c4 08	 add	 esp, 8
$LN22@read_map_i:

; 4579 : 			}
; 4580 : 			// Craig end
; 4581 : 		}

  00382	e9 2f fe ff ff	 jmp	 $LN29@read_map_i
$LN3@read_map_i:

; 4582 : 
; 4583 : 		fclose(fin);

  00387	8b 45 fc	 mov	 eax, DWORD PTR _fin$[ebp]
  0038a	50		 push	 eax
  0038b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00391	83 c4 04	 add	 esp, 4
$LN10@read_map_i:

; 4584 : 	}
; 4585 : 
; 4586 : 	//if no mapinfo.tct and no season determined yet, initialize what we know
; 4587 : 	if(current_map_info.season == SESSION_SEASON_INVALID)

  00394	83 3d 14 04 00
	00 00		 cmp	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 0
  0039b	75 78		 jne	 SHORT $LN23@read_map_i

; 4588 : 	{
; 4589 : 		switch (current_map_info.mapnr) {

  0039d	a1 10 04 00 00	 mov	 eax, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1040
  003a2	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv208[ebp], eax
  003a8	8b 8d 20 fe ff
	ff		 mov	 ecx, DWORD PTR tv208[ebp]
  003ae	83 e9 03	 sub	 ecx, 3
  003b1	89 8d 20 fe ff
	ff		 mov	 DWORD PTR tv208[ebp], ecx
  003b7	83 bd 20 fe ff
	ff 09		 cmp	 DWORD PTR tv208[ebp], 9
  003be	77 38		 ja	 SHORT $LN27@read_map_i
  003c0	8b 95 20 fe ff
	ff		 mov	 edx, DWORD PTR tv208[ebp]
  003c6	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN30@read_map_i[edx]
  003cd	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN31@read_map_i[eax*4]
$LN24@read_map_i:

; 4590 : 			case 5:
; 4591 : 			case 6:
; 4592 : 			case 9:
; 4593 : 			case 10:
; 4594 : 			case 12:
; 4595 : 			{
; 4596 : 				set_global_season( SESSION_SEASON_DESERT );

  003d4	c7 05 14 04 00
	00 04 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 4

; 4597 : 				break;

  003de	eb 22		 jmp	 SHORT $LN4@read_map_i
$LN25@read_map_i:

; 4598 : 			}
; 4599 : 			case 3: //georgia
; 4600 : 			{
; 4601 : 				set_global_season( SESSION_SEASON_SUMMER );

  003e0	c7 05 14 04 00
	00 02 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 2

; 4602 : 				break;

  003ea	eb 16		 jmp	 SHORT $LN4@read_map_i
$LN26@read_map_i:

; 4603 : 			}
; 4604 : 			case 7:
; 4605 : 			case 8:
; 4606 : 			{
; 4607 : 				set_global_season( SESSION_SEASON_WINTER );

  003ec	c7 05 14 04 00
	00 03 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 3

; 4608 : 				break;

  003f6	eb 0a		 jmp	 SHORT $LN4@read_map_i
$LN27@read_map_i:

; 4609 : 			}
; 4610 : 			default:
; 4611 : 			{
; 4612 : 				set_global_season( SESSION_SEASON_DEFAULT );

  003f8	c7 05 14 04 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 1
$LN4@read_map_i:

; 4613 : 			}
; 4614 : 		}
; 4615 : 		debug_log("###CUSTOM TEXTURE STARTUP: read_map_info_data: default season: %d",	current_map_info.season);

  00402	a1 14 04 00 00	 mov	 eax, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044
  00407	50		 push	 eax
  00408	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@ECLCKALA@?$CD?$CD?$CDCUSTOM?5TEXTURE?5STARTUP?3?5read@
  0040d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00412	83 c4 08	 add	 esp, 8
$LN23@read_map_i:

; 4616 : 	}
; 4617 : 
; 4618 : }

  00415	5f		 pop	 edi
  00416	5e		 pop	 esi
  00417	5b		 pop	 ebx
  00418	8b e5		 mov	 esp, ebp
  0041a	5d		 pop	 ebp
  0041b	c3		 ret	 0
$LN31@read_map_i:
  0041c	00 00 00 00	 DD	 $LN25@read_map_i
  00420	00 00 00 00	 DD	 $LN24@read_map_i
  00424	00 00 00 00	 DD	 $LN26@read_map_i
  00428	00 00 00 00	 DD	 $LN27@read_map_i
$LN30@read_map_i:
  0042c	00		 DB	 0
  0042d	03		 DB	 3
  0042e	01		 DB	 1
  0042f	01		 DB	 1
  00430	02		 DB	 2
  00431	02		 DB	 2
  00432	01		 DB	 1
  00433	01		 DB	 1
  00434	03		 DB	 3
  00435	01		 DB	 1
?read_map_info_data@@YGXXZ ENDP				; read_map_info_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?initialise_custom_map_info@@YGXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?initialise_custom_map_info@@YGXXZ PROC			; initialise_custom_map_info, COMDAT

; 4314 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4315 : 	int i;
; 4316 : 
; 4317 : 	current_map_info.user_defined_contour_heights = 0;

  00009	c7 05 68 03 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+872, 0

; 4318 : 	for (i = 0; i < 9; i++)

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001a	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initialise:
  00025	83 7d fc 09	 cmp	 DWORD PTR _i$[ebp], 9
  00029	7d 11		 jge	 SHORT $LN3@initialise

; 4319 : 		current_map_info.contour_heights[i] = 0;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002e	0f 57 c0	 xorps	 xmm0, xmm0
  00031	f3 0f 11 04 85
	6c 03 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax*4+876], xmm0
  0003a	eb e0		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 4320 : 
; 4321 : 	for (i = 0; i < 64; i ++)

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00043	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  00045	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@initialise:
  0004e	83 7d fc 40	 cmp	 DWORD PTR _i$[ebp], 64	; 00000040H
  00052	7d 2e		 jge	 SHORT $LN6@initialise

; 4322 : 	{
; 4323 : 		current_map_info.texture_override_scales[i][0] = 0;

  00054	b8 04 00 00 00	 mov	 eax, 4
  00059	6b c8 00	 imul	 ecx, eax, 0
  0005c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0005f	c7 84 d1 18 04
	00 00 00 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx+edx*8+1048], 0

; 4324 : 		current_map_info.texture_override_scales[i][1] = 64; //safe value

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00075	c7 84 c8 18 04
	00 00 40 00 00
	00		 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+ecx*8+1048], 64 ; 00000040H

; 4325 : 	}

  00080	eb c3		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 4326 : 
; 4327 : 	current_map_info.name[0] = '\0';

  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	6b c8 00	 imul	 ecx, eax, 0
  0008a	c6 81 90 03 00
	00 00		 mov	 BYTE PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[ecx+912], 0

; 4328 : 
; 4329 : 	current_map_info.mapnr = 0;

  00091	c7 05 10 04 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1040, 0

; 4330 : 
; 4331 : //set the map season to default. There are 4 settings: default and desert,
; 4332 : //and summer and winter for the maps that change seasonally
; 4333 : //VJ 060319 further bug fixes
; 4334 : 	current_map_info.season = SESSION_SEASON_INVALID;

  0009b	c7 05 14 04 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 0

; 4335 : 
; 4336 : 	current_map_info.dry_river = 0;

  000a5	c7 05 60 03 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+864, 0

; 4337 : 
; 4338 : 	current_map_info.gouraud_shading = 0; // Craig Feb. 2009

  000af	c7 05 64 03 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+868, 0

; 4339 : 
; 4340 : 	current_map_info.last_texture = number_of_system_textures;

  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  000be	a3 18 06 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1560, eax

; 4341 : 
; 4342 : 	current_map_info.latitude = current_map_info.longitude = 0.0;

  000c3	0f 57 c0	 xorps	 xmm0, xmm0
  000c6	f3 0f 11 05 20
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568, xmm0
  000ce	f3 0f 10 05 20
	06 00 00	 movss	 xmm0, DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1568
  000d6	f3 0f 11 05 1c
	06 00 00	 movss	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1564, xmm0

; 4343 : 
; 4344 : 	for (i = 0; i < 3; i++){

  000de	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000e5	eb 09		 jmp	 SHORT $LN10@initialise
$LN8@initialise:
  000e7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ea	83 c0 01	 add	 eax, 1
  000ed	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN10@initialise:
  000f0	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  000f4	0f 8d bb 00 00
	00		 jge	 $LN9@initialise

; 4345 : 		current_map_info.water_info[i].start = 0;

  000fa	69 45 fc 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00101	c7 80 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax], 0

; 4346 : 		current_map_info.water_info[i].number = 0;

  0010b	69 45 fc 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00112	c7 80 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+4], 0

; 4347 : 		current_map_info.water_info[i].delay = 0;

  0011c	69 45 fc 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00123	c7 80 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+8], 0

; 4348 : 		current_map_info.water_info[i].scale_top = 0;

  0012d	69 45 fc 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00134	c7 80 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+12], 0

; 4349 : 		current_map_info.water_info[i].scale_bottom = 0;

  0013e	69 45 fc 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00145	c7 80 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+16], 0

; 4350 : 		current_map_info.water_info[i].alpha = 0;

  0014f	69 45 fc 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00156	c7 80 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+20], 0

; 4351 : 		current_map_info.water_info[i].type = TYPE_ORIGINAL;

  00160	69 45 fc 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00167	c7 80 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+24], 0

; 4352 : 		current_map_info.water_info[i].placenr = 0;

  00171	69 45 fc 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00178	c7 80 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+28], 0

; 4353 : 		current_map_info.water_info[i].name_top[0] = '\0';

  00182	69 45 fc 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  00189	b9 01 00 00 00	 mov	 ecx, 1
  0018e	6b d1 00	 imul	 edx, ecx, 0
  00191	c6 84 10 20 00
	00 00 00	 mov	 BYTE PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+edx+32], 0

; 4354 : 		current_map_info.water_info[i].name_bottom[0] = '\0';

  00199	69 45 fc 20 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 288
  001a0	b9 01 00 00 00	 mov	 ecx, 1
  001a5	6b d1 00	 imul	 edx, ecx, 0
  001a8	c6 84 10 a0 00
	00 00 00	 mov	 BYTE PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A[eax+edx+160], 0

; 4355 : 	}

  001b0	e9 32 ff ff ff	 jmp	 $LN8@initialise
$LN9@initialise:

; 4356 : }

  001b5	5f		 pop	 edi
  001b6	5e		 pop	 esi
  001b7	5b		 pop	 ebx
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
?initialise_custom_map_info@@YGXXZ ENDP			; initialise_custom_map_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?restore_default_textures@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?restore_default_textures@@YGXXZ PROC			; restore_default_textures, COMDAT

; 3468 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3469 : 	int count = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 3470 : 
; 3471 : 	//VJ 050621 restore backup commandline
; 3472 : 	if ( texture_colour_bak != -1 )

  00010	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?texture_colour_bak@@3HA, -1
  00017	74 0a		 je	 SHORT $LN5@restore_de

; 3473 : 	{
; 3474 : 		command_line_texture_colour = texture_colour_bak;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_colour_bak@@3HA
  0001e	a3 00 00 00 00	 mov	 DWORD PTR ?command_line_texture_colour@@3HA, eax ; command_line_texture_colour
$LN5@restore_de:

; 3475 : 	}
; 3476 : 
; 3477 : 	for (count = 0; count < MAX_TEXTURES; count++)

  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0002a	eb 09		 jmp	 SHORT $LN4@restore_de
$LN2@restore_de:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@restore_de:
  00035	81 7d fc 00 20
	00 00		 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  0003c	7d 58		 jge	 SHORT $LN3@restore_de

; 3478 : 	if ( system_texture_override_names[count].type != TYPE_ORIGINAL )

  0003e	69 45 fc 4c 01
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 332
  00045	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR ?system_texture_override_names@@3PAUOVERRIDENAME@@A[eax+324], 0
  0004c	74 46		 je	 SHORT $LN6@restore_de

; 3479 : 	{
; 3480 : 
; 3481 : #if DEBUG_MODULE
; 3482 : 		debug_log("Texture override +++ restore screen (%d) : %s",count,system_texture_override_names[count].name);
; 3483 : #endif
; 3484 : 
; 3485 : 		f3d_texture_release ( system_texture_info[count].texture_screen );

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00051	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ?f3d_texture_release@@YGHPAUSCREEN@@@Z ; f3d_texture_release

; 3486 : 
; 3487 : 	// restore pointer to original textures
; 3488 : 		system_textures[ count ] = backup_system_textures[ count ];

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00064	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?backup_system_textures@@3PAPAUSCREEN@@A[ecx*4]
  0006b	89 14 85 00 00
	00 00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], edx

; 3489 : 		system_texture_info[ count ] = backup_system_texture_info[ count ];

  00072	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00075	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR ?backup_system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  0007c	8b 14 c5 04 00
	00 00		 mov	 edx, DWORD PTR ?backup_system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4]
  00083	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00086	89 0c c5 00 00
	00 00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8], ecx
  0008d	89 14 c5 04 00
	00 00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4], edx
$LN6@restore_de:

; 3490 : 	}

  00094	eb 96		 jmp	 SHORT $LN2@restore_de
$LN3@restore_de:

; 3491 : 
; 3492 : 	clear_texture_override_names();

  00096	e8 00 00 00 00	 call	 ?clear_texture_override_names@@YGXXZ ; clear_texture_override_names

; 3493 : 
; 3494 : 	//VJ 051225 reset map data
; 3495 : 	initialise_custom_map_info();

  0009b	e8 00 00 00 00	 call	 ?initialise_custom_map_info@@YGXXZ ; initialise_custom_map_info

; 3496 : }

  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
?restore_default_textures@@YGXXZ ENDP			; restore_default_textures
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?load_warzone_override_textures@@YGXXZ
_TEXT	SEGMENT
_i$1 = -532						; size = 4
_p$2 = -528						; size = 4
_buf$3 = -524						; size = 256
_ftextdir$4 = -268					; size = 4
_count$ = -264						; size = 4
_nrtextfound$ = -260					; size = 4
_directory_textdir_path$ = -256				; size = 256
?load_warzone_override_textures@@YGXXZ PROC		; load_warzone_override_textures, COMDAT

; 3331 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 02 00
	00		 sub	 esp, 660		; 00000294H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3332 : 	char directory_textdir_path[256];
; 3333 : 	int nrtextfound = 0;

  0000c	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _nrtextfound$[ebp], 0

; 3334 : 	int count;
; 3335 : 
; 3336 : 	// VJ 051226 NOTE: map_info structure is called from aphavoc\source\ui_menu\sessparm\sparm_sc.c
; 3337 : 	// and main variables are already set (warzone name, number, countours etc.
; 3338 : 
; 3339 : 	// empty all the strings
; 3340 : 	clear_texture_override_names ();

  00016	e8 00 00 00 00	 call	 ?clear_texture_override_names@@YGXXZ ; clear_texture_override_names

; 3341 : 
; 3342 : 	// first seek all textures in common directories
; 3343 : 	//VJ 051024 do not use root directory to search
; 3344 : 	//nrtextfound = initialize_texture_override_names ( "." );
; 3345 : 
; 3346 : 	nrtextfound += initialize_texture_override_names ( TEXTURE_OVERRIDE_DIRECTORY_GENERAL );

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_07EGGHCNEO@GENERAL@
  00020	e8 00 00 00 00	 call	 ?initialize_texture_override_names@@YGHPBD@Z ; initialize_texture_override_names
  00025	03 85 fc fe ff
	ff		 add	 eax, DWORD PTR _nrtextfound$[ebp]
  0002b	89 85 fc fe ff
	ff		 mov	 DWORD PTR _nrtextfound$[ebp], eax

; 3347 : 
; 3348 : 	nrtextfound += initialize_texture_override_names ( TEXTURE_OVERRIDE_DIRECTORY_COCKPIT );

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_07EDPCNACP@COCKPIT@
  00036	e8 00 00 00 00	 call	 ?initialize_texture_override_names@@YGHPBD@Z ; initialize_texture_override_names
  0003b	03 85 fc fe ff
	ff		 add	 eax, DWORD PTR _nrtextfound$[ebp]
  00041	89 85 fc fe ff
	ff		 mov	 DWORD PTR _nrtextfound$[ebp], eax

; 3349 : 
; 3350 : 	nrtextfound += initialize_texture_override_names ( TEXTURE_OVERRIDE_DIRECTORY_CAMO );

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_04KIFFIHK@CAMO@
  0004c	e8 00 00 00 00	 call	 ?initialize_texture_override_names@@YGHPBD@Z ; initialize_texture_override_names
  00051	03 85 fc fe ff
	ff		 add	 eax, DWORD PTR _nrtextfound$[ebp]
  00057	89 85 fc fe ff
	ff		 mov	 DWORD PTR _nrtextfound$[ebp], eax

; 3351 : 
; 3352 : 	nrtextfound += initialize_texture_override_names ( TEXTURE_OVERRIDE_DIRECTORY_ANIMATION );

  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_09JCOEOBPO@ANIMATION@
  00062	e8 00 00 00 00	 call	 ?initialize_texture_override_names@@YGHPBD@Z ; initialize_texture_override_names
  00067	03 85 fc fe ff
	ff		 add	 eax, DWORD PTR _nrtextfound$[ebp]
  0006d	89 85 fc fe ff
	ff		 mov	 DWORD PTR _nrtextfound$[ebp], eax

; 3353 : 
; 3354 : 	nrtextfound += initialize_texture_override_names ( TEXTURE_OVERRIDE_DIRECTORY_TERRAIN );

  00073	68 00 00 00 00	 push	 OFFSET ??_C@_07GMAOFJLP@TERRAIN@
  00078	e8 00 00 00 00	 call	 ?initialize_texture_override_names@@YGHPBD@Z ; initialize_texture_override_names
  0007d	03 85 fc fe ff
	ff		 add	 eax, DWORD PTR _nrtextfound$[ebp]
  00083	89 85 fc fe ff
	ff		 mov	 DWORD PTR _nrtextfound$[ebp], eax

; 3355 : 
; 3356 : 	//VJ 051229 changed the order of reading: first all the official dirs, last the user defined dirs.
; 3357 : 	//Makes more sense, else people make textures but they are not shown
; 3358 : 
; 3359 : 	//look for the modded and mipmapped terrain textures
; 3360 : 	//VJ 050319 texture colour mod, load terrain textures
; 3361 : 
; 3362 : 	// Casm 20AUG05 Moved backup before "if"
; 3363 : 	//VJ 050621 backup commandline var, set to 0 if no textures found
; 3364 : 	if ( texture_colour_bak == -1 )

  00089	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?texture_colour_bak@@3HA, -1
  00090	75 0a		 jne	 SHORT $LN13@load_warzo

; 3365 : 	{
; 3366 : 		texture_colour_bak = command_line_texture_colour;

  00092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_texture_colour@@3HA ; command_line_texture_colour
  00097	a3 00 00 00 00	 mov	 DWORD PTR ?texture_colour_bak@@3HA, eax
$LN13@load_warzo:

; 3367 : 	}
; 3368 : 
; 3369 : 
; 3370 : 	if (command_line_texture_colour)

  0009c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_texture_colour@@3HA, 0 ; command_line_texture_colour
  000a3	74 62		 je	 SHORT $LN14@load_warzo

; 3371 : 	{
; 3372 : 
; 3373 : 		//VJ 051223 removed string list with warzone names:
; 3374 : 		//look directly for texture dir with name current_map_info.name" (= session title)
; 3375 : 		//That way warzones can be added automatically without adding strings to the code
; 3376 : 		sprintf (directory_textdir_path, "%s\\%s", TEXTURE_OVERRIDE_DIRECTORY_TERRAIN, current_map_info.name);

  000a5	68 90 03 00 00	 push	 OFFSET ?current_map_info@@3UCUSTOM_MAP_INFO@@A+912
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_07GMAOFJLP@TERRAIN@
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
  000b4	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _directory_textdir_path$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _sprintf
  000c0	83 c4 10	 add	 esp, 16			; 00000010H

; 3377 : 		debug_log("=== loading custom info: texture dir:  %s",directory_textdir_path);

  000c3	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _directory_textdir_path$[ebp]
  000c9	50		 push	 eax
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NJDOENKM@?$DN?$DN?$DN?5loading?5custom?5info?3?5textur@
  000cf	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000d4	83 c4 08	 add	 esp, 8

; 3378 : 
; 3379 : 		//note: TEXTURE_OVERRIDE_DIRECTORY is concatinated in functions
; 3380 : 		nrtextfound += initialize_texture_override_names ( directory_textdir_path );

  000d7	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _directory_textdir_path$[ebp]
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ?initialize_texture_override_names@@YGHPBD@Z ; initialize_texture_override_names
  000e3	03 85 fc fe ff
	ff		 add	 eax, DWORD PTR _nrtextfound$[ebp]
  000e9	89 85 fc fe ff
	ff		 mov	 DWORD PTR _nrtextfound$[ebp], eax

; 3381 : 
; 3382 : 		if (nrtextfound == 0)

  000ef	75 0a		 jne	 SHORT $LN15@load_warzo

; 3383 : 			command_line_texture_colour = 0;

  000f1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?command_line_texture_colour@@3HA, 0 ; command_line_texture_colour
$LN15@load_warzo:

; 3384 : 
; 3385 : 		//VJ read text file with scale indicators for terrain texture display
; 3386 : 		initialize_terrain_texture_scales ( directory_textdir_path );

  000fb	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _directory_textdir_path$[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?initialize_terrain_texture_scales@@YGXPBD@Z ; initialize_terrain_texture_scales
$LN14@load_warzo:

; 3387 : 	}
; 3388 : 
; 3389 : 
; 3390 : 	//VJ 051228 last look for the user defined directories. Specified in a text file in the map dir
; 3391 : 	sprintf (directory_textdir_path, "%s\\texturedirs.txt",get_current_game_session()->data_path);

  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A ; current_game_session
  0010c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0010f	50		 push	 eax
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IGJDILFI@?$CFs?2texturedirs?4txt@
  00115	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _directory_textdir_path$[ebp]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 _sprintf
  00121	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3392 : 
; 3393 : 	debug_log("=== Searching for aditional paths in texturedirs.txt of warzone %s",get_current_game_session()->warzone_name);

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A ; current_game_session
  00129	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0012c	51		 push	 ecx
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@DOGECNFH@?$DN?$DN?$DN?5Searching?5for?5aditional?5pat@
  00132	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00137	83 c4 08	 add	 esp, 8

; 3394 : 
; 3395 : 	if ( file_exist ( directory_textdir_path ) )

  0013a	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _directory_textdir_path$[ebp]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00146	85 c0		 test	 eax, eax
  00148	0f 84 89 01 00
	00		 je	 $LN16@load_warzo

; 3396 : 	{
; 3397 : 		FILE *ftextdir;
; 3398 : 		char buf[256];
; 3399 : 		char *p;
; 3400 : 
; 3401 : 		ftextdir = fopen(directory_textdir_path,"r");

  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  00153	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _directory_textdir_path$[ebp]
  00159	50		 push	 eax
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00160	83 c4 08	 add	 esp, 8
  00163	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _ftextdir$4[ebp], eax

; 3402 : 
; 3403 : 		// skip comment lines
; 3404 : 		fscanf(ftextdir,"%[^\n]\n",buf);

  00169	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  0016f	50		 push	 eax
  00170	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  00175	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _ftextdir$4[ebp]
  0017b	51		 push	 ecx
  0017c	e8 00 00 00 00	 call	 _fscanf
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@load_warzo:

; 3405 : 		while (buf[0] == '#')

  00184	b8 01 00 00 00	 mov	 eax, 1
  00189	6b c8 00	 imul	 ecx, eax, 0
  0018c	0f b6 94 0d f4
	fd ff ff	 movzx	 edx, BYTE PTR _buf$3[ebp+ecx]
  00194	83 fa 23	 cmp	 edx, 35			; 00000023H
  00197	75 1d		 jne	 SHORT $LN4@load_warzo

; 3406 : 				fscanf(ftextdir,"%[^\n]\n",buf);

  00199	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  0019f	50		 push	 eax
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  001a5	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _ftextdir$4[ebp]
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 _fscanf
  001b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b4	eb ce		 jmp	 SHORT $LN2@load_warzo
$LN4@load_warzo:

; 3407 : 
; 3408 : 		// get directory names, can be more than one
; 3409 : 		while (strchr(buf,'='))

  001b6	6a 3d		 push	 61			; 0000003dH
  001b8	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ?strchr@@YAPADQADH@Z	; strchr
  001c4	83 c4 08	 add	 esp, 8
  001c7	85 c0		 test	 eax, eax
  001c9	0f 84 08 01 00
	00		 je	 $LN16@load_warzo

; 3410 : 		{
; 3411 : 			//format: dir1=[name] etc.
; 3412 : 			p = strtok(buf,"=");

  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_01NEMOKFLO@?$DN@
  001d4	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  001da	50		 push	 eax
  001db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  001e1	83 c4 08	 add	 esp, 8
  001e4	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _p$2[ebp], eax

; 3413 : 			p = strtok(NULL,"#");

  001ea	68 00 00 00 00	 push	 OFFSET ??_C@_01IPJKGB@?$CD@
  001ef	6a 00		 push	 0
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok
  001f7	83 c4 08	 add	 esp, 8
  001fa	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _p$2[ebp], eax

; 3414 : 
; 3415 : 			if (p)

  00200	83 bd f0 fd ff
	ff 00		 cmp	 DWORD PTR _p$2[ebp], 0
  00207	0f 84 aa 00 00
	00		 je	 $LN17@load_warzo

; 3416 : 			{
; 3417 : 				int i;
; 3418 : 				//strip leading and trailing spaces
; 3419 : 				i = strlen(p)-1;

  0020d	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _p$2[ebp]
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 _strlen
  00219	83 c4 04	 add	 esp, 4
  0021c	83 e8 01	 sub	 eax, 1
  0021f	89 85 ec fd ff
	ff		 mov	 DWORD PTR _i$1[ebp], eax
$LN6@load_warzo:

; 3420 : 				while (i > 0 && p[i] == ' ')

  00225	83 bd ec fd ff
	ff 00		 cmp	 DWORD PTR _i$1[ebp], 0
  0022c	7e 25		 jle	 SHORT $LN7@load_warzo
  0022e	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _p$2[ebp]
  00234	03 85 ec fd ff
	ff		 add	 eax, DWORD PTR _i$1[ebp]
  0023a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0023d	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00240	75 11		 jne	 SHORT $LN7@load_warzo

; 3421 : 					i--;

  00242	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _i$1[ebp]
  00248	83 e8 01	 sub	 eax, 1
  0024b	89 85 ec fd ff
	ff		 mov	 DWORD PTR _i$1[ebp], eax
  00251	eb d2		 jmp	 SHORT $LN6@load_warzo
$LN7@load_warzo:

; 3422 : 				p[i+1]='\0';

  00253	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _p$2[ebp]
  00259	03 85 ec fd ff
	ff		 add	 eax, DWORD PTR _i$1[ebp]
  0025f	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$LN8@load_warzo:

; 3423 : 				while (p[0] == ' ')

  00263	b8 01 00 00 00	 mov	 eax, 1
  00268	6b c8 00	 imul	 ecx, eax, 0
  0026b	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _p$2[ebp]
  00271	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00275	83 f8 20	 cmp	 eax, 32			; 00000020H
  00278	75 11		 jne	 SHORT $LN9@load_warzo

; 3424 : 					p++;

  0027a	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _p$2[ebp]
  00280	83 c0 01	 add	 eax, 1
  00283	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _p$2[ebp], eax
  00289	eb d8		 jmp	 SHORT $LN8@load_warzo
$LN9@load_warzo:

; 3425 : 				debug_log("=== Looking for additional textures in %s",p);

  0028b	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _p$2[ebp]
  00291	50		 push	 eax
  00292	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@BJIHAGOK@?$DN?$DN?$DN?5Looking?5for?5additional?5text@
  00297	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0029c	83 c4 08	 add	 esp, 8

; 3426 : 
; 3427 : 				// get override texture names in array
; 3428 : 				nrtextfound += initialize_texture_override_names ( p );

  0029f	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _p$2[ebp]
  002a5	50		 push	 eax
  002a6	e8 00 00 00 00	 call	 ?initialize_texture_override_names@@YGHPBD@Z ; initialize_texture_override_names
  002ab	03 85 fc fe ff
	ff		 add	 eax, DWORD PTR _nrtextfound$[ebp]
  002b1	89 85 fc fe ff
	ff		 mov	 DWORD PTR _nrtextfound$[ebp], eax
$LN17@load_warzo:

; 3429 : 
; 3430 : 			}
; 3431 : 			// get the next specified dir
; 3432 : 			fscanf(ftextdir,"%[^\n]\n",buf);

  002b7	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  002bd	50		 push	 eax
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_06OPEKAKCJ@?$CF?$FL?$FO?6?$FN?6@
  002c3	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _ftextdir$4[ebp]
  002c9	51		 push	 ecx
  002ca	e8 00 00 00 00	 call	 _fscanf
  002cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3433 : 		}

  002d2	e9 df fe ff ff	 jmp	 $LN4@load_warzo
$LN16@load_warzo:

; 3434 : 	}
; 3435 : 
; 3436 : 	// Global overrider. For testing mostly
; 3437 : 	nrtextfound += initialize_texture_override_names ( TEXTURE_OVERRIDE_DIRECTORY_TEMP );

  002d7	68 00 00 00 00	 push	 OFFSET ??_C@_04JKHNIKCB@TEMP@
  002dc	e8 00 00 00 00	 call	 ?initialize_texture_override_names@@YGHPBD@Z ; initialize_texture_override_names
  002e1	03 85 fc fe ff
	ff		 add	 eax, DWORD PTR _nrtextfound$[ebp]
  002e7	89 85 fc fe ff
	ff		 mov	 DWORD PTR _nrtextfound$[ebp], eax

; 3438 : 
; 3439 : 	debug_log("Nr override textures found %d",nrtextfound);

  002ed	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _nrtextfound$[ebp]
  002f3	50		 push	 eax
  002f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DPCAAMMH@Nr?5override?5textures?5found?5?$CFd@
  002f9	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  002fe	83 c4 08	 add	 esp, 8

; 3440 : 
; 3441 : 	//now we have all the names, load the bmp and dds files
; 3442 : 
; 3443 : 	//VJ 050619 make a backup of the original pointers to the screens
; 3444 : 	memset ( backup_system_textures, 0, sizeof ( backup_system_textures ) );

  00301	68 00 80 00 00	 push	 32768			; 00008000H
  00306	6a 00		 push	 0
  00308	68 00 00 00 00	 push	 OFFSET ?backup_system_textures@@3PAPAUSCREEN@@A ; backup_system_textures
  0030d	e8 00 00 00 00	 call	 _memset
  00312	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3445 : 	for (count = 0; count < number_of_system_textures; count++)

  00315	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$[ebp], 0
  0031f	eb 0f		 jmp	 SHORT $LN12@load_warzo
$LN10@load_warzo:
  00321	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  00327	83 c0 01	 add	 eax, 1
  0032a	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _count$[ebp], eax
$LN12@load_warzo:
  00330	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  00336	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  0033c	7d 44		 jge	 SHORT $LN11@load_warzo

; 3446 : 	{
; 3447 : 		backup_system_textures[count] = system_textures[count];

  0033e	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  00344	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _count$[ebp]
  0034a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[ecx*4]
  00351	89 14 85 00 00
	00 00		 mov	 DWORD PTR ?backup_system_textures@@3PAPAUSCREEN@@A[eax*4], edx

; 3448 : 		backup_system_texture_info[count] = system_texture_info[count];

  00358	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  0035e	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8]
  00365	8b 14 c5 04 00
	00 00		 mov	 edx, DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4]
  0036c	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  00372	89 0c c5 00 00
	00 00		 mov	 DWORD PTR ?backup_system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8], ecx
  00379	89 14 c5 04 00
	00 00		 mov	 DWORD PTR ?backup_system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4], edx

; 3449 : 	}

  00380	eb 9f		 jmp	 SHORT $LN10@load_warzo
$LN11@load_warzo:

; 3450 : 
; 3451 : 	//VJ 050530 read single bmp files
; 3452 : 	//VJ 050530 read mipmapped dds files
; 3453 : 	load_texture_override ();

  00382	e8 00 00 00 00	 call	 ?load_texture_override@@YGXXZ ; load_texture_override

; 3454 : 
; 3455 : 	//VJ 050820 dynamic water
; 3456 : 	if (global_dynamic_water)

  00387	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?global_dynamic_water@@3HA, 0 ; global_dynamic_water
  0038e	74 05		 je	 SHORT $LN1@load_warzo

; 3457 : 		load_texture_water();

  00390	e8 00 00 00 00	 call	 ?load_texture_water@@YGXXZ ; load_texture_water
$LN1@load_warzo:

; 3458 : 
; 3459 : }

  00395	5f		 pop	 edi
  00396	5e		 pop	 esi
  00397	5b		 pop	 ebx
  00398	8b e5		 mov	 esp, ebp
  0039a	5d		 pop	 ebp
  0039b	c3		 ret	 0
?load_warzone_override_textures@@YGXXZ ENDP		; load_warzone_override_textures
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?get_texture_graphic_source_dimensions@@YGXPAUTEXTURE_GRAPHIC@@PAH1@Z
_TEXT	SEGMENT
_graphic$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
?get_texture_graphic_source_dimensions@@YGXPAUTEXTURE_GRAPHIC@@PAH1@Z PROC ; get_texture_graphic_source_dimensions, COMDAT

; 3147 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3148 : 
; 3149 : 	ASSERT ( graphic );

  00009	83 7d 08 00	 cmp	 DWORD PTR _graphic$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_textur
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_texture_graphic_source_dimensions@@YGXPAUTEXTURE_GRAPHIC@@PAH1@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LJBBKFJP@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_07PGDKGDCB@graphic@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_textur:

; 3150 : 	ASSERT ( width );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _width$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_textur
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_texture_graphic_source_dimensions@@YGXPAUTEXTURE_GRAPHIC@@PAH1@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LJBBKFJP@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_05IGKADHGO@width@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_textur:

; 3151 : 	ASSERT ( height );

  00045	83 7d 10 00	 cmp	 DWORD PTR _height$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@get_textur
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_texture_graphic_source_dimensions@@YGXPAUTEXTURE_GRAPHIC@@PAH1@Z@4JA
  00050	83 c0 04	 add	 eax, 4
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LJBBKFJP@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_06LNLHEAAG@height@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_textur:

; 3152 : 
; 3153 : 	*width = graphic->graphic_width;

  00063	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00069	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0006c	89 10		 mov	 DWORD PTR [eax], edx

; 3154 : 
; 3155 : 	*height = graphic->graphic_height;

  0006e	8b 45 10	 mov	 eax, DWORD PTR _height$[ebp]
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00074	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00077	89 10		 mov	 DWORD PTR [eax], edx

; 3156 : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 0c 00	 ret	 12			; 0000000cH
?get_texture_graphic_source_dimensions@@YGXPAUTEXTURE_GRAPHIC@@PAH1@Z ENDP ; get_texture_graphic_source_dimensions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z
_TEXT	SEGMENT
_override_screen$ = -1128				; size = 4
_pal$ = -1124						; size = 1024
_temp$ = -100						; size = 4
_mipmap$ = -96						; size = 4
_y$ = -92						; size = 4
_x$ = -88						; size = 4
_buffer_size$ = -84					; size = 4
_height$ = -80						; size = 4
_width$ = -76						; size = 4
_type$ = -72						; size = 4
_bufferswap$ = -68					; size = 4
_buffer$ = -64						; size = 4
_bmih$ = -60						; size = 40
_bmfh$ = -20						; size = 14
_fp$ = -4						; size = 4
_full_override_texture_filename$ = 8			; size = 4
?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z PROC		; load_bmp_file_screen, COMDAT

; 4180 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 05 00
	00		 sub	 esp, 1320		; 00000528H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4181 : 	FILE
; 4182 : 		*fp;
; 4183 : 
; 4184 : // VJ 041217 bitmap header info: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/gdi/bitmaps_5f8y.asp
; 4185 : 	BITMAPFILEHEADER
; 4186 : 		bmfh;
; 4187 : 
; 4188 : 	BITMAPINFOHEADER
; 4189 : 		bmih;
; 4190 : 
; 4191 : 	unsigned char
; 4192 : 		*buffer, *bufferswap;
; 4193 : 
; 4194 : 	int
; 4195 : 		type,
; 4196 : 		width, height,
; 4197 : 		buffer_size,
; 4198 : 		x, y, mipmap, temp = 0;

  0000c	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp], 0

; 4199 : 
; 4200 : 	//VJ 041217 palette for 8 bit textures
; 4201 : 	rgb_colour
; 4202 : 		pal[256];
; 4203 : 
; 4204 : 	//static
; 4205 : 	screen
; 4206 : 		*override_screen;
; 4207 : 
; 4208 : 	//VJ 050530 mipmapping, set mipmap to 0 for now, it works but reserved for dds files
; 4209 : 	mipmap = 0;

  00013	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _mipmap$[ebp], 0

; 4210 : 
; 4211 : 	fp = safe_fopen (full_override_texture_filename, "rb");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0001f	8b 45 08	 mov	 eax, DWORD PTR _full_override_texture_filename$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00028	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 4212 : 
; 4213 : 	fread (&bmfh, sizeof (bmfh), 1, fp);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0002e	50		 push	 eax
  0002f	6a 01		 push	 1
  00031	6a 0e		 push	 14			; 0000000eH
  00033	8d 4d ec	 lea	 ecx, DWORD PTR _bmfh$[ebp]
  00036	51		 push	 ecx
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 4214 : 
; 4215 : 	//read bitmap header info structure
; 4216 : 	fread (&bmih, sizeof (bmih), 1, fp);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00043	50		 push	 eax
  00044	6a 01		 push	 1
  00046	6a 28		 push	 40			; 00000028H
  00048	8d 4d c4	 lea	 ecx, DWORD PTR _bmih$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00052	83 c4 10	 add	 esp, 16			; 00000010H

; 4217 : 			//VJ 041217 if it is a 8bit texture read the palette, structure rgb_colour
; 4218 : 
; 4219 : 	if (bmih.biBitCount == 8){

  00055	0f b7 45 d2	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  00059	83 f8 08	 cmp	 eax, 8
  0005c	75 1b		 jne	 SHORT $LN16@load_bmp_f

; 4220 : 		fread (&pal, sizeof (pal), 1, fp);

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00061	50		 push	 eax
  00062	6a 01		 push	 1
  00064	68 00 04 00 00	 push	 1024			; 00000400H
  00069	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR _pal$[ebp]
  0006f	51		 push	 ecx
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00076	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@load_bmp_f:

; 4221 : 	}
; 4222 : 
; 4223 : 	//check bitmap header for correct format
; 4224 : 	if (!check_bitmap_header ( bmih, full_override_texture_filename) )

  00079	8b 45 08	 mov	 eax, DWORD PTR _full_override_texture_filename$[ebp]
  0007c	50		 push	 eax
  0007d	83 ec 28	 sub	 esp, 40			; 00000028H
  00080	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00085	8d 75 c4	 lea	 esi, DWORD PTR _bmih$[ebp]
  00088	8b fc		 mov	 edi, esp
  0008a	f3 a5		 rep movsd
  0008c	e8 00 00 00 00	 call	 ?check_bitmap_header@@YGHUtagBITMAPINFOHEADER@@PBD@Z ; check_bitmap_header
  00091	85 c0		 test	 eax, eax
  00093	75 10		 jne	 SHORT $LN17@load_bmp_f

; 4225 : 	{
; 4226 : 		safe_fclose (fp);

  00095	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 4227 : 		return NULL;

  0009e	33 c0		 xor	 eax, eax
  000a0	e9 3b 03 00 00	 jmp	 $LN1@load_bmp_f
$LN17@load_bmp_f:

; 4228 : 	}
; 4229 : 
; 4230 : 
; 4231 : 	//VJ 050426 create a new texture map with mipmap levels if needed
; 4232 : 	width = bmih.biWidth;

  000a5	8b 45 c8	 mov	 eax, DWORD PTR _bmih$[ebp+4]
  000a8	89 45 b4	 mov	 DWORD PTR _width$[ebp], eax

; 4233 : 	height = bmih.biHeight;

  000ab	8b 45 cc	 mov	 eax, DWORD PTR _bmih$[ebp+8]
  000ae	89 45 b0	 mov	 DWORD PTR _height$[ebp], eax

; 4234 : 
; 4235 : 	type = TEXTURE_TYPE_NOALPHA_NOPALETTE;

  000b1	c7 45 b8 05 00
	00 00		 mov	 DWORD PTR _type$[ebp], 5

; 4236 : 
; 4237 : 	//C:\gms\Razorworks\eech-new\modules\graphics\scrnstr.h
; 4238 : 	debug_log(full_override_texture_filename);

  000b8	8b 45 08	 mov	 eax, DWORD PTR _full_override_texture_filename$[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000c1	83 c4 04	 add	 esp, 4

; 4239 : 	override_screen = create_texture_map (width, height, (texture_map_types)type,

  000c4	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  000c9	6b c8 00	 imul	 ecx, eax, 0
  000cc	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A ; system_texture_colour_tables
  000d2	51		 push	 ecx
  000d3	ba 04 00 00 00	 mov	 edx, 4
  000d8	6b c2 00	 imul	 eax, edx, 0
  000db	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?system_texture_palettes@@3PAPAUIDirectDrawPalette@@A[eax]
  000e1	51		 push	 ecx
  000e2	8b 55 a0	 mov	 edx, DWORD PTR _mipmap$[ebp]
  000e5	83 c2 01	 add	 edx, 1
  000e8	52		 push	 edx
  000e9	8b 45 b8	 mov	 eax, DWORD PTR _type$[ebp]
  000ec	50		 push	 eax
  000ed	8b 4d b0	 mov	 ecx, DWORD PTR _height$[ebp]
  000f0	51		 push	 ecx
  000f1	8b 55 b4	 mov	 edx, DWORD PTR _width$[ebp]
  000f4	52		 push	 edx
  000f5	e8 00 00 00 00	 call	 ?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z ; create_texture_map
  000fa	89 85 98 fb ff
	ff		 mov	 DWORD PTR _override_screen$[ebp], eax

; 4240 : 							mipmap+1, system_texture_palettes[0], system_texture_colour_tables[0] );
; 4241 : 
; 4242 : 	if (bmih.biBitCount == 8)

  00100	0f b7 45 d2	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  00104	83 f8 08	 cmp	 eax, 8
  00107	75 0c		 jne	 SHORT $LN18@load_bmp_f

; 4243 : 		buffer_size = width * height;

  00109	8b 45 b4	 mov	 eax, DWORD PTR _width$[ebp]
  0010c	0f af 45 b0	 imul	 eax, DWORD PTR _height$[ebp]
  00110	89 45 ac	 mov	 DWORD PTR _buffer_size$[ebp], eax
  00113	eb 2e		 jmp	 SHORT $LN19@load_bmp_f
$LN18@load_bmp_f:

; 4244 : 	else if (bmih.biBitCount == 24)

  00115	0f b7 45 d2	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  00119	83 f8 18	 cmp	 eax, 24			; 00000018H
  0011c	75 0f		 jne	 SHORT $LN20@load_bmp_f

; 4245 : 		buffer_size = width * height * 3;

  0011e	8b 45 b4	 mov	 eax, DWORD PTR _width$[ebp]
  00121	0f af 45 b0	 imul	 eax, DWORD PTR _height$[ebp]
  00125	6b c8 03	 imul	 ecx, eax, 3
  00128	89 4d ac	 mov	 DWORD PTR _buffer_size$[ebp], ecx
  0012b	eb 16		 jmp	 SHORT $LN19@load_bmp_f
$LN20@load_bmp_f:

; 4246 : 	else if (bmih.biBitCount == 32)

  0012d	0f b7 45 d2	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  00131	83 f8 20	 cmp	 eax, 32			; 00000020H
  00134	75 0d		 jne	 SHORT $LN19@load_bmp_f

; 4247 : 		buffer_size = width * height * 4;

  00136	8b 45 b4	 mov	 eax, DWORD PTR _width$[ebp]
  00139	0f af 45 b0	 imul	 eax, DWORD PTR _height$[ebp]
  0013d	c1 e0 02	 shl	 eax, 2
  00140	89 45 ac	 mov	 DWORD PTR _buffer_size$[ebp], eax
$LN19@load_bmp_f:

; 4248 : 	// note color depth is assumed here
; 4249 : 
; 4250 : 	buffer = ( unsigned char * ) safe_malloc (buffer_size);

  00143	8b 45 ac	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0014c	89 45 c0	 mov	 DWORD PTR _buffer$[ebp], eax

; 4251 : 	bufferswap = ( unsigned char * ) safe_malloc (buffer_size);

  0014f	8b 45 ac	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00158	89 45 bc	 mov	 DWORD PTR _bufferswap$[ebp], eax

; 4252 : 
; 4253 : 	fread (buffer, buffer_size, 1, fp);

  0015b	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0015e	50		 push	 eax
  0015f	6a 01		 push	 1
  00161	8b 4d ac	 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  00164	51		 push	 ecx
  00165	8b 55 c0	 mov	 edx, DWORD PTR _buffer$[ebp]
  00168	52		 push	 edx
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0016f	83 c4 10	 add	 esp, 16			; 00000010H

; 4254 : 
; 4255 : 
; 4256 : 	//VJ 050618 changed this part to proper texture handling instead of drawing pixels on a screen
; 4257 : 	//swap lines around, bitmaps are upside down in the game
; 4258 : 	if (bmih.biBitCount == 24)

  00172	0f b7 45 d2	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  00176	83 f8 18	 cmp	 eax, 24			; 00000018H
  00179	0f 85 da 00 00
	00		 jne	 $LN23@load_bmp_f

; 4259 : 	{
; 4260 : 		for ( y = 0; y < height; y++ )

  0017f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00186	eb 09		 jmp	 SHORT $LN4@load_bmp_f
$LN2@load_bmp_f:
  00188	8b 45 a4	 mov	 eax, DWORD PTR _y$[ebp]
  0018b	83 c0 01	 add	 eax, 1
  0018e	89 45 a4	 mov	 DWORD PTR _y$[ebp], eax
$LN4@load_bmp_f:
  00191	8b 45 a4	 mov	 eax, DWORD PTR _y$[ebp]
  00194	3b 45 b0	 cmp	 eax, DWORD PTR _height$[ebp]
  00197	0f 8d bc 00 00
	00		 jge	 $LN23@load_bmp_f

; 4261 : 		{
; 4262 : 			for ( x = 0; x < width; x++ )

  0019d	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001a4	eb 09		 jmp	 SHORT $LN7@load_bmp_f
$LN5@load_bmp_f:
  001a6	8b 45 a8	 mov	 eax, DWORD PTR _x$[ebp]
  001a9	83 c0 01	 add	 eax, 1
  001ac	89 45 a8	 mov	 DWORD PTR _x$[ebp], eax
$LN7@load_bmp_f:
  001af	8b 45 a8	 mov	 eax, DWORD PTR _x$[ebp]
  001b2	3b 45 b4	 cmp	 eax, DWORD PTR _width$[ebp]
  001b5	0f 8d 99 00 00
	00		 jge	 $LN6@load_bmp_f

; 4263 : 			{
; 4264 : 				bufferswap[(height-y-1)*width*3 + x*3 + 0] = buffer[y*width*3 + x*3 + 2];

  001bb	8b 45 a4	 mov	 eax, DWORD PTR _y$[ebp]
  001be	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  001c2	6b c8 03	 imul	 ecx, eax, 3
  001c5	6b 55 a8 03	 imul	 edx, DWORD PTR _x$[ebp], 3
  001c9	03 ca		 add	 ecx, edx
  001cb	8b 45 b0	 mov	 eax, DWORD PTR _height$[ebp]
  001ce	2b 45 a4	 sub	 eax, DWORD PTR _y$[ebp]
  001d1	83 e8 01	 sub	 eax, 1
  001d4	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  001d8	6b d0 03	 imul	 edx, eax, 3
  001db	6b 45 a8 03	 imul	 eax, DWORD PTR _x$[ebp], 3
  001df	03 45 bc	 add	 eax, DWORD PTR _bufferswap$[ebp]
  001e2	8b 75 c0	 mov	 esi, DWORD PTR _buffer$[ebp]
  001e5	8a 4c 0e 02	 mov	 cl, BYTE PTR [esi+ecx+2]
  001e9	88 0c 10	 mov	 BYTE PTR [eax+edx], cl

; 4265 : 				bufferswap[(height-y-1)*width*3 + x*3 + 1] = buffer[y*width*3 + x*3 + 1];

  001ec	8b 45 a4	 mov	 eax, DWORD PTR _y$[ebp]
  001ef	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  001f3	6b c8 03	 imul	 ecx, eax, 3
  001f6	6b 55 a8 03	 imul	 edx, DWORD PTR _x$[ebp], 3
  001fa	03 ca		 add	 ecx, edx
  001fc	8b 45 b0	 mov	 eax, DWORD PTR _height$[ebp]
  001ff	2b 45 a4	 sub	 eax, DWORD PTR _y$[ebp]
  00202	83 e8 01	 sub	 eax, 1
  00205	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  00209	6b d0 03	 imul	 edx, eax, 3
  0020c	6b 45 a8 03	 imul	 eax, DWORD PTR _x$[ebp], 3
  00210	03 45 bc	 add	 eax, DWORD PTR _bufferswap$[ebp]
  00213	8b 75 c0	 mov	 esi, DWORD PTR _buffer$[ebp]
  00216	8a 4c 0e 01	 mov	 cl, BYTE PTR [esi+ecx+1]
  0021a	88 4c 10 01	 mov	 BYTE PTR [eax+edx+1], cl

; 4266 : 				bufferswap[(height-y-1)*width*3 + x*3 + 2] = buffer[y*width*3 + x*3 + 0];

  0021e	8b 45 a4	 mov	 eax, DWORD PTR _y$[ebp]
  00221	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  00225	6b c8 03	 imul	 ecx, eax, 3
  00228	6b 55 a8 03	 imul	 edx, DWORD PTR _x$[ebp], 3
  0022c	03 ca		 add	 ecx, edx
  0022e	8b 45 b0	 mov	 eax, DWORD PTR _height$[ebp]
  00231	2b 45 a4	 sub	 eax, DWORD PTR _y$[ebp]
  00234	83 e8 01	 sub	 eax, 1
  00237	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  0023b	6b d0 03	 imul	 edx, eax, 3
  0023e	6b 45 a8 03	 imul	 eax, DWORD PTR _x$[ebp], 3
  00242	03 45 bc	 add	 eax, DWORD PTR _bufferswap$[ebp]
  00245	8b 75 c0	 mov	 esi, DWORD PTR _buffer$[ebp]
  00248	8a 0c 0e	 mov	 cl, BYTE PTR [esi+ecx]
  0024b	88 4c 10 02	 mov	 BYTE PTR [eax+edx+2], cl

; 4267 : 			}

  0024f	e9 52 ff ff ff	 jmp	 $LN5@load_bmp_f
$LN6@load_bmp_f:

; 4268 : 		}

  00254	e9 2f ff ff ff	 jmp	 $LN2@load_bmp_f
$LN23@load_bmp_f:

; 4269 : 	}
; 4270 : 	if (bmih.biBitCount == 32)

  00259	0f b7 45 d2	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  0025d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00260	0f 85 da 00 00
	00		 jne	 $LN14@load_bmp_f

; 4271 : 	{
; 4272 : 		for ( y = 0; y < height; y++ )

  00266	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  0026d	eb 09		 jmp	 SHORT $LN10@load_bmp_f
$LN8@load_bmp_f:
  0026f	8b 45 a4	 mov	 eax, DWORD PTR _y$[ebp]
  00272	83 c0 01	 add	 eax, 1
  00275	89 45 a4	 mov	 DWORD PTR _y$[ebp], eax
$LN10@load_bmp_f:
  00278	8b 45 a4	 mov	 eax, DWORD PTR _y$[ebp]
  0027b	3b 45 b0	 cmp	 eax, DWORD PTR _height$[ebp]
  0027e	0f 8d bc 00 00
	00		 jge	 $LN14@load_bmp_f

; 4273 : 		{
; 4274 : 			for ( x = 0; x < width; x++ )

  00284	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  0028b	eb 09		 jmp	 SHORT $LN13@load_bmp_f
$LN11@load_bmp_f:
  0028d	8b 45 a8	 mov	 eax, DWORD PTR _x$[ebp]
  00290	83 c0 01	 add	 eax, 1
  00293	89 45 a8	 mov	 DWORD PTR _x$[ebp], eax
$LN13@load_bmp_f:
  00296	8b 45 a8	 mov	 eax, DWORD PTR _x$[ebp]
  00299	3b 45 b4	 cmp	 eax, DWORD PTR _width$[ebp]
  0029c	0f 8d 99 00 00
	00		 jge	 $LN12@load_bmp_f

; 4275 : 			{
; 4276 : 				// ignore alpha channel
; 4277 : 				bufferswap[(height-y-1)*width*3 + x*3 + 0] = buffer[y*width*4 + x*4 + 2];

  002a2	8b 45 a4	 mov	 eax, DWORD PTR _y$[ebp]
  002a5	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  002a9	8b 4d a8	 mov	 ecx, DWORD PTR _x$[ebp]
  002ac	c1 e1 02	 shl	 ecx, 2
  002af	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  002b2	8b 45 b0	 mov	 eax, DWORD PTR _height$[ebp]
  002b5	2b 45 a4	 sub	 eax, DWORD PTR _y$[ebp]
  002b8	83 e8 01	 sub	 eax, 1
  002bb	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  002bf	6b c8 03	 imul	 ecx, eax, 3
  002c2	6b 45 a8 03	 imul	 eax, DWORD PTR _x$[ebp], 3
  002c6	03 45 bc	 add	 eax, DWORD PTR _bufferswap$[ebp]
  002c9	8b 75 c0	 mov	 esi, DWORD PTR _buffer$[ebp]
  002cc	8a 54 16 02	 mov	 dl, BYTE PTR [esi+edx+2]
  002d0	88 14 08	 mov	 BYTE PTR [eax+ecx], dl

; 4278 : 				bufferswap[(height-y-1)*width*3 + x*3 + 1] = buffer[y*width*4 + x*4 + 1];

  002d3	8b 45 a4	 mov	 eax, DWORD PTR _y$[ebp]
  002d6	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  002da	8b 4d a8	 mov	 ecx, DWORD PTR _x$[ebp]
  002dd	c1 e1 02	 shl	 ecx, 2
  002e0	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  002e3	8b 45 b0	 mov	 eax, DWORD PTR _height$[ebp]
  002e6	2b 45 a4	 sub	 eax, DWORD PTR _y$[ebp]
  002e9	83 e8 01	 sub	 eax, 1
  002ec	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  002f0	6b c8 03	 imul	 ecx, eax, 3
  002f3	6b 45 a8 03	 imul	 eax, DWORD PTR _x$[ebp], 3
  002f7	03 45 bc	 add	 eax, DWORD PTR _bufferswap$[ebp]
  002fa	8b 75 c0	 mov	 esi, DWORD PTR _buffer$[ebp]
  002fd	8a 54 16 01	 mov	 dl, BYTE PTR [esi+edx+1]
  00301	88 54 08 01	 mov	 BYTE PTR [eax+ecx+1], dl

; 4279 : 				bufferswap[(height-y-1)*width*3 + x*3 + 2] = buffer[y*width*4 + x*4 + 0];

  00305	8b 45 a4	 mov	 eax, DWORD PTR _y$[ebp]
  00308	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  0030c	8b 4d a8	 mov	 ecx, DWORD PTR _x$[ebp]
  0030f	c1 e1 02	 shl	 ecx, 2
  00312	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00315	8b 45 b0	 mov	 eax, DWORD PTR _height$[ebp]
  00318	2b 45 a4	 sub	 eax, DWORD PTR _y$[ebp]
  0031b	83 e8 01	 sub	 eax, 1
  0031e	0f af 45 b4	 imul	 eax, DWORD PTR _width$[ebp]
  00322	6b c8 03	 imul	 ecx, eax, 3
  00325	6b 45 a8 03	 imul	 eax, DWORD PTR _x$[ebp], 3
  00329	03 45 bc	 add	 eax, DWORD PTR _bufferswap$[ebp]
  0032c	8b 75 c0	 mov	 esi, DWORD PTR _buffer$[ebp]
  0032f	8a 14 16	 mov	 dl, BYTE PTR [esi+edx]
  00332	88 54 08 02	 mov	 BYTE PTR [eax+ecx+2], dl

; 4280 : //				 bufferswap[(height-y-1)*width*4 + x*4 + 3] = buffer[y*width*4 + x*4 + 3];
; 4281 : 			}

  00336	e9 52 ff ff ff	 jmp	 $LN11@load_bmp_f
$LN12@load_bmp_f:

; 4282 : 		}

  0033b	e9 2f ff ff ff	 jmp	 $LN8@load_bmp_f
$LN14@load_bmp_f:

; 4283 : 	}
; 4284 : 
; 4285 : 	while ( !lock_texture ( override_screen, temp ) )

  00340	8b 45 9c	 mov	 eax, DWORD PTR _temp$[ebp]
  00343	50		 push	 eax
  00344	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _override_screen$[ebp]
  0034a	51		 push	 ecx
  0034b	e8 00 00 00 00	 call	 ?lock_texture@@YGHPAUSCREEN@@H@Z ; lock_texture
  00350	85 c0		 test	 eax, eax
  00352	75 0a		 jne	 SHORT $LN15@load_bmp_f

; 4286 : 	{
; 4287 : 		Sleep ( 100 );

  00354	6a 64		 push	 100			; 00000064H
  00356	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 4288 : 	}

  0035c	eb e2		 jmp	 SHORT $LN14@load_bmp_f
$LN15@load_bmp_f:

; 4289 : 
; 4290 : 	//only for NON PALETTE files
; 4291 : 	if (bmih.biBitCount == 24 || bmih.biBitCount == 32)

  0035e	0f b7 45 d2	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  00362	83 f8 18	 cmp	 eax, 24			; 00000018H
  00365	74 09		 je	 SHORT $LN27@load_bmp_f
  00367	0f b7 45 d2	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  0036b	83 f8 20	 cmp	 eax, 32			; 00000020H
  0036e	75 1e		 jne	 SHORT $LN25@load_bmp_f
$LN27@load_bmp_f:

; 4292 : 		convert_no_alpha_24bit_texture_map_data ( bufferswap, width, height , override_screen, fp );

  00370	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00373	50		 push	 eax
  00374	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _override_screen$[ebp]
  0037a	51		 push	 ecx
  0037b	8b 55 b0	 mov	 edx, DWORD PTR _height$[ebp]
  0037e	52		 push	 edx
  0037f	8b 45 b4	 mov	 eax, DWORD PTR _width$[ebp]
  00382	50		 push	 eax
  00383	8b 4d bc	 mov	 ecx, DWORD PTR _bufferswap$[ebp]
  00386	51		 push	 ecx
  00387	e8 00 00 00 00	 call	 ?convert_no_alpha_24bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_no_alpha_24bit_texture_map_data
  0038c	eb 25		 jmp	 SHORT $LN26@load_bmp_f
$LN25@load_bmp_f:

; 4293 : 	else if (bmih.biBitCount == 8)

  0038e	0f b7 45 d2	 movzx	 eax, WORD PTR _bmih$[ebp+14]
  00392	83 f8 08	 cmp	 eax, 8
  00395	75 1c		 jne	 SHORT $LN26@load_bmp_f

; 4294 : 		convert_no_alpha_texture_map_data ( buffer, width, height, override_screen , fp );

  00397	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0039a	50		 push	 eax
  0039b	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _override_screen$[ebp]
  003a1	51		 push	 ecx
  003a2	8b 55 b0	 mov	 edx, DWORD PTR _height$[ebp]
  003a5	52		 push	 edx
  003a6	8b 45 b4	 mov	 eax, DWORD PTR _width$[ebp]
  003a9	50		 push	 eax
  003aa	8b 4d c0	 mov	 ecx, DWORD PTR _buffer$[ebp]
  003ad	51		 push	 ecx
  003ae	e8 00 00 00 00	 call	 ?convert_no_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_no_alpha_texture_map_data
$LN26@load_bmp_f:

; 4295 : 
; 4296 : 	unlock_texture ( override_screen );

  003b3	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _override_screen$[ebp]
  003b9	50		 push	 eax
  003ba	e8 00 00 00 00	 call	 ?unlock_texture@@YGHPAUSCREEN@@@Z ; unlock_texture

; 4297 : 
; 4298 : 	safe_free (buffer);

  003bf	8b 45 c0	 mov	 eax, DWORD PTR _buffer$[ebp]
  003c2	50		 push	 eax
  003c3	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 4299 : 	safe_free (bufferswap);

  003c8	8b 45 bc	 mov	 eax, DWORD PTR _bufferswap$[ebp]
  003cb	50		 push	 eax
  003cc	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 4300 : 
; 4301 : 	safe_fclose (fp);

  003d1	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  003d4	50		 push	 eax
  003d5	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 4302 : 
; 4303 : 	return override_screen;

  003da	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _override_screen$[ebp]
$LN1@load_bmp_f:

; 4304 : }

  003e0	5f		 pop	 edi
  003e1	5e		 pop	 esi
  003e2	5b		 pop	 ebx
  003e3	8b e5		 mov	 esp, ebp
  003e5	5d		 pop	 ebp
  003e6	c2 04 00	 ret	 4
?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ENDP		; load_bmp_file_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?destroy_texture_graphic@@YGXPAUTEXTURE_GRAPHIC@@@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_graphic$ = 8						; size = 4
?destroy_texture_graphic@@YGXPAUTEXTURE_GRAPHIC@@@Z PROC ; destroy_texture_graphic, COMDAT

; 3126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3127 : 
; 3128 : 	int
; 3129 : 		count;
; 3130 : 
; 3131 : 	for ( count = 0; count < graphic->number_of_textures; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@destroy_te
$LN2@destroy_te:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@destroy_te:
  0001b	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00021	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00023	7d 16		 jge	 SHORT $LN3@destroy_te

; 3132 : 	{
; 3133 : 
; 3134 : 		destroy_screen ( graphic->textures[count].texture );

  00025	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0002c	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0002f	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 3135 : 	}

  00039	eb d7		 jmp	 SHORT $LN2@destroy_te
$LN3@destroy_te:

; 3136 : 
; 3137 : 	safe_free ( graphic->textures );

  0003b	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  0003e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 3138 : 
; 3139 : 	safe_free ( graphic );

  00047	8b 45 08	 mov	 eax, DWORD PTR _graphic$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 3140 : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?destroy_texture_graphic@@YGXPAUTEXTURE_GRAPHIC@@@Z ENDP ; destroy_texture_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z
_TEXT	SEGMENT
_value$1 = -220						; size = 4
_pixels$2 = -216					; size = 4
_alpha$3 = -212						; size = 4
_blue$4 = -208						; size = 4
_green$5 = -204						; size = 4
_red$6 = -200						; size = 4
_pixel_x$7 = -196					; size = 4
_value$8 = -192						; size = 2
_pixels$9 = -188					; size = 4
_alpha$10 = -184					; size = 4
_blue$11 = -180						; size = 4
_green$12 = -176					; size = 4
_red$13 = -172						; size = 4
_pixel_x$14 = -168					; size = 4
_ptr$15 = -164						; size = 4
_value$16 = -160					; size = 4
_pixels$17 = -156					; size = 4
_blue$18 = -152						; size = 4
_green$19 = -148					; size = 4
_red$20 = -144						; size = 4
_pixel_x$21 = -140					; size = 4
_value$22 = -136					; size = 2
_pixels$23 = -132					; size = 4
_blue$24 = -128						; size = 4
_green$25 = -124					; size = 4
_red$26 = -120						; size = 4
_pixel_x$27 = -116					; size = 4
_ptr$28 = -112						; size = 4
_last_height$29 = -108					; size = 4
_last_width$30 = -104					; size = 4
_vmax$31 = -100						; size = 4
_umax$32 = -96						; size = 4
_finished$33 = -92					; size = 4
_texture_height$34 = -88				; size = 4
_texture_width$35 = -84					; size = 4
_type$ = -80						; size = 4
_old_active_screen$ = -76				; size = 4
_graphic$ = -72						; size = 4
_texture_pitch$ = -68					; size = 4
_texture_data$ = -64					; size = 4
_data$ = -60						; size = 4
_base_texture_index$ = -56				; size = 4
_temp$ = -52						; size = 4
_texture_height_mask$ = -48				; size = 4
_texture_height_power$ = -44				; size = 4
_texture_width_mask$ = -40				; size = 4
_texture_width_power$ = -36				; size = 4
_count$ = -32						; size = 4
_y$ = -28						; size = 4
_x$ = -24						; size = 4
_texture_y$ = -20					; size = 4
_texture_x$ = -16					; size = 4
_channels$ = -12					; size = 4
_height$ = -8						; size = 4
_width$ = -4						; size = 4
_filename$ = 8						; size = 4
?create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z PROC ; create_texture_graphic, COMDAT

; 2525 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2526 : 
; 2527 : 	int
; 2528 : 		width,
; 2529 : 		height,
; 2530 : 		channels,
; 2531 : 		texture_x,
; 2532 : 		texture_y,
; 2533 : 		x,
; 2534 : 		y,
; 2535 : 		count,
; 2536 : 		texture_width_power,
; 2537 : 		texture_width_mask,
; 2538 : 		texture_height_power,
; 2539 : 		texture_height_mask,
; 2540 : 		temp,
; 2541 : 		base_texture_index;
; 2542 : 
; 2543 : 	char
; 2544 : 		*data;
; 2545 : 
; 2546 : 	char
; 2547 : 		**texture_data;
; 2548 : 
; 2549 : 	int
; 2550 : 		*texture_pitch;
; 2551 : 
; 2552 : 	texture_graphic
; 2553 : 		*graphic;
; 2554 : 
; 2555 : 	screen
; 2556 : 		*old_active_screen;
; 2557 : 
; 2558 : 	texture_map_types
; 2559 : 		type;
; 2560 : 
; 2561 : 	old_active_screen = get_active_screen ();

  0000c	e8 00 00 00 00	 call	 ?get_active_screen@@YGPAUSCREEN@@XZ ; get_active_screen
  00011	89 45 b4	 mov	 DWORD PTR _old_active_screen$[ebp], eax

; 2562 : 
; 2563 : 	data = ( char * ) load_psd_file ( filename, &width, &height, &channels );

  00014	8d 45 f4	 lea	 eax, DWORD PTR _channels$[ebp]
  00017	50		 push	 eax
  00018	8d 4d f8	 lea	 ecx, DWORD PTR _height$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 fc	 lea	 edx, DWORD PTR _width$[ebp]
  0001f	52		 push	 edx
  00020	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?load_psd_file@@YGPAXPBDPAH11@Z ; load_psd_file
  00029	89 45 c4	 mov	 DWORD PTR _data$[ebp], eax

; 2564 : 
; 2565 : 	/*if ( ( d3d_total_video_texture_memory < 8192*1024 ) && ( ( width > 64 ) || ( height > 64 ) ) )
; 2566 : 	{
; 2567 : 
; 2568 : 		if ( channels == 3 )
; 2569 : 		{
; 2570 : 
; 2571 : 			psd_rgb
; 2572 : 				*dest,
; 2573 : 				*source;
; 2574 : 
; 2575 : 			source = ( psd_rgb * ) data;
; 2576 : 
; 2577 : 			dest = ( psd_rgb * ) data;
; 2578 : 
; 2579 : 			for ( y = 0; y < height; y += 2 )
; 2580 : 			{
; 2581 : 
; 2582 : 				for ( x = 0; x < width; x += 2 )
; 2583 : 				{
; 2584 : 
; 2585 : 					*dest++ = source[ y*width + x ];
; 2586 : 				}
; 2587 : 			}
; 2588 : 		}
; 2589 : 		else if ( channels == 4 )
; 2590 : 		{
; 2591 : 
; 2592 : 			psd_rgba
; 2593 : 				*dest,
; 2594 : 				*source;
; 2595 : 
; 2596 : 			source = ( psd_rgba * ) data;
; 2597 : 
; 2598 : 			dest = ( psd_rgba * ) data;
; 2599 : 
; 2600 : 			for ( y = 0; y < height; y += 2 )
; 2601 : 			{
; 2602 : 
; 2603 : 				for ( x = 0; x < width; x += 2 )
; 2604 : 				{
; 2605 : 
; 2606 : 					*dest++ = source[ y*width + x ];
; 2607 : 				}
; 2608 : 			}
; 2609 : 		}
; 2610 : 
; 2611 : 		width += ( width & 1 );
; 2612 : 		height += ( height & 1 );
; 2613 : 		width /= 2;
; 2614 : 		height /= 2;
; 2615 : 	}*/
; 2616 : 
; 2617 : 	graphic = ( texture_graphic * ) safe_malloc ( sizeof ( texture_graphic ) );

  0002c	6a 30		 push	 48			; 00000030H
  0002e	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00033	89 45 b8	 mov	 DWORD PTR _graphic$[ebp], eax

; 2618 : 
; 2619 : 	{
; 2620 : 
; 2621 : 		int
; 2622 : 			texture_width,
; 2623 : 			texture_height,
; 2624 : 			finished;
; 2625 : 
; 2626 : 		texture_width = 16;

  00036	c7 45 ac 10 00
	00 00		 mov	 DWORD PTR _texture_width$35[ebp], 16 ; 00000010H

; 2627 : 		texture_height = 16;

  0003d	c7 45 a8 10 00
	00 00		 mov	 DWORD PTR _texture_height$34[ebp], 16 ; 00000010H

; 2628 : 		finished = FALSE;

  00044	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _finished$33[ebp], 0
$LN2@create_tex:

; 2629 : 
; 2630 : 		while ( !finished )

  0004b	83 7d a4 00	 cmp	 DWORD PTR _finished$33[ebp], 0
  0004f	75 58		 jne	 SHORT $LN3@create_tex

; 2631 : 		{
; 2632 : 
; 2633 : 			if ( ( texture_width >= d3d_maximum_texture_width ) || ( texture_height >= d3d_maximum_texture_height ) )

  00051	8b 45 ac	 mov	 eax, DWORD PTR _texture_width$35[ebp]
  00054	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?d3d_maximum_texture_width@@3HA ; d3d_maximum_texture_width
  0005a	7d 0b		 jge	 SHORT $LN58@create_tex
  0005c	8b 45 a8	 mov	 eax, DWORD PTR _texture_height$34[ebp]
  0005f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?d3d_maximum_texture_height@@3HA ; d3d_maximum_texture_height
  00065	7c 09		 jl	 SHORT $LN56@create_tex
$LN58@create_tex:

; 2634 : 			{
; 2635 : 
; 2636 : 				finished = TRUE;

  00067	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _finished$33[ebp], 1

; 2637 : 			}
; 2638 : 			else

  0006e	eb 37		 jmp	 SHORT $LN61@create_tex
$LN56@create_tex:

; 2639 : 			{
; 2640 : 
; 2641 : 				if ( ( texture_width >= width ) && ( texture_height >= height ) )

  00070	8b 45 ac	 mov	 eax, DWORD PTR _texture_width$35[ebp]
  00073	3b 45 fc	 cmp	 eax, DWORD PTR _width$[ebp]
  00076	7c 0f		 jl	 SHORT $LN59@create_tex
  00078	8b 45 a8	 mov	 eax, DWORD PTR _texture_height$34[ebp]
  0007b	3b 45 f8	 cmp	 eax, DWORD PTR _height$[ebp]
  0007e	7c 07		 jl	 SHORT $LN59@create_tex

; 2642 : 				{
; 2643 : 
; 2644 : 					finished = TRUE;

  00080	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _finished$33[ebp], 1
$LN59@create_tex:

; 2645 : 				}
; 2646 : 
; 2647 : 				if ( texture_width < width )

  00087	8b 45 ac	 mov	 eax, DWORD PTR _texture_width$35[ebp]
  0008a	3b 45 fc	 cmp	 eax, DWORD PTR _width$[ebp]
  0008d	7d 08		 jge	 SHORT $LN60@create_tex

; 2648 : 				{
; 2649 : 
; 2650 : 					texture_width *= 2;

  0008f	8b 45 ac	 mov	 eax, DWORD PTR _texture_width$35[ebp]
  00092	d1 e0		 shl	 eax, 1
  00094	89 45 ac	 mov	 DWORD PTR _texture_width$35[ebp], eax
$LN60@create_tex:

; 2651 : 				}
; 2652 : 
; 2653 : 				if ( texture_height < height )

  00097	8b 45 a8	 mov	 eax, DWORD PTR _texture_height$34[ebp]
  0009a	3b 45 f8	 cmp	 eax, DWORD PTR _height$[ebp]
  0009d	7d 08		 jge	 SHORT $LN61@create_tex

; 2654 : 				{
; 2655 : 
; 2656 : 					texture_height *= 2;

  0009f	8b 45 a8	 mov	 eax, DWORD PTR _texture_height$34[ebp]
  000a2	d1 e0		 shl	 eax, 1
  000a4	89 45 a8	 mov	 DWORD PTR _texture_height$34[ebp], eax
$LN61@create_tex:

; 2657 : 				}
; 2658 : 			}
; 2659 : 		}

  000a7	eb a2		 jmp	 SHORT $LN2@create_tex
$LN3@create_tex:

; 2660 : 
; 2661 : 		if ( d3d_square_only_textures )

  000a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_square_only_textures@@3HA, 0 ; d3d_square_only_textures
  000b0	74 20		 je	 SHORT $LN63@create_tex

; 2662 : 		{
; 2663 : 
; 2664 : 			if ( texture_width != texture_height )

  000b2	8b 45 ac	 mov	 eax, DWORD PTR _texture_width$35[ebp]
  000b5	3b 45 a8	 cmp	 eax, DWORD PTR _texture_height$34[ebp]
  000b8	74 18		 je	 SHORT $LN63@create_tex

; 2665 : 			{
; 2666 : 
; 2667 : 				texture_width = max ( texture_width, texture_height );

  000ba	8d 45 a8	 lea	 eax, DWORD PTR _texture_height$34[ebp]
  000bd	50		 push	 eax
  000be	8d 4d ac	 lea	 ecx, DWORD PTR _texture_width$35[ebp]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  000c7	8b 10		 mov	 edx, DWORD PTR [eax]
  000c9	89 55 ac	 mov	 DWORD PTR _texture_width$35[ebp], edx

; 2668 : 
; 2669 : 				texture_height = texture_width;

  000cc	8b 45 ac	 mov	 eax, DWORD PTR _texture_width$35[ebp]
  000cf	89 45 a8	 mov	 DWORD PTR _texture_height$34[ebp], eax
$LN63@create_tex:

; 2670 : 			}
; 2671 : 		}
; 2672 : 
; 2673 : 		graphic->texture_width = texture_width;

  000d2	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  000d5	8b 4d ac	 mov	 ecx, DWORD PTR _texture_width$35[ebp]
  000d8	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 2674 : 		graphic->texture_height = texture_height;

  000db	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  000de	8b 4d a8	 mov	 ecx, DWORD PTR _texture_height$34[ebp]
  000e1	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2675 : 	}
; 2676 : 
; 2677 : 	graphic->graphic_width = width;

  000e4	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR _width$[ebp]
  000ea	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2678 : 	graphic->graphic_height = height;

  000ed	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  000f0	8b 4d f8	 mov	 ecx, DWORD PTR _height$[ebp]
  000f3	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2679 : 	graphic->number_of_textures_wide = width / graphic->texture_width;

  000f6	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  000f9	8b 45 fc	 mov	 eax, DWORD PTR _width$[ebp]
  000fc	99		 cdq
  000fd	f7 79 0c	 idiv	 DWORD PTR [ecx+12]
  00100	8b 55 b8	 mov	 edx, DWORD PTR _graphic$[ebp]
  00103	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 2680 : 
; 2681 : 	if ( ( graphic->number_of_textures_wide * graphic->texture_width ) != width )

  00106	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00109	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0010c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0010f	0f af 51 0c	 imul	 edx, DWORD PTR [ecx+12]
  00113	3b 55 fc	 cmp	 edx, DWORD PTR _width$[ebp]
  00116	74 0f		 je	 SHORT $LN64@create_tex

; 2682 : 	{
; 2683 : 
; 2684 : 		graphic->number_of_textures_wide++;

  00118	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  0011b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0011e	83 c1 01	 add	 ecx, 1
  00121	8b 55 b8	 mov	 edx, DWORD PTR _graphic$[ebp]
  00124	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN64@create_tex:

; 2685 : 	}
; 2686 : 
; 2687 : 	graphic->number_of_textures_high = height / graphic->texture_height;

  00127	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0012a	8b 45 f8	 mov	 eax, DWORD PTR _height$[ebp]
  0012d	99		 cdq
  0012e	f7 79 10	 idiv	 DWORD PTR [ecx+16]
  00131	8b 55 b8	 mov	 edx, DWORD PTR _graphic$[ebp]
  00134	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 2688 : 
; 2689 : 	if ( ( graphic->number_of_textures_high * graphic->texture_height ) != height )

  00137	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  0013a	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0013d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00140	0f af 51 10	 imul	 edx, DWORD PTR [ecx+16]
  00144	3b 55 f8	 cmp	 edx, DWORD PTR _height$[ebp]
  00147	74 0f		 je	 SHORT $LN65@create_tex

; 2690 : 	{
; 2691 : 
; 2692 : 		graphic->number_of_textures_high++;

  00149	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  0014c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0014f	83 c1 01	 add	 ecx, 1
  00152	8b 55 b8	 mov	 edx, DWORD PTR _graphic$[ebp]
  00155	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN65@create_tex:

; 2693 : 	}
; 2694 : 
; 2695 : 	ASSERT ( ( channels == 3 ) || ( channels == 4 ) );

  00158	83 7d f4 03	 cmp	 DWORD PTR _channels$[ebp], 3
  0015c	74 20		 je	 SHORT $LN66@create_tex
  0015e	83 7d f4 04	 cmp	 DWORD PTR _channels$[ebp], 4
  00162	74 1a		 je	 SHORT $LN66@create_tex
  00164	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z@4JA
  00169	05 aa 00 00 00	 add	 eax, 170		; 000000aaH
  0016e	50		 push	 eax
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LJBBKFJP@c?3?2users?2nhv90?2projects?2eech?2mo@
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@LMJNBBKK@?$CI?5channels?5?$DN?$DN?53?5?$CJ?5?$HM?$HM?5?$CI?5channels@
  00179	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN66@create_tex:

; 2696 : 
; 2697 : 	if ( channels == 3 )

  0017e	83 7d f4 03	 cmp	 DWORD PTR _channels$[ebp], 3
  00182	75 13		 jne	 SHORT $LN67@create_tex

; 2698 : 	{
; 2699 : 
; 2700 : 		type = TEXTURE_TYPE_NOALPHA_NOPALETTE;

  00184	c7 45 b0 05 00
	00 00		 mov	 DWORD PTR _type$[ebp], 5

; 2701 : 
; 2702 : 		graphic->transparent = FALSE;

  0018b	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  0018e	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 2703 : 	}
; 2704 : 	else

  00195	eb 11		 jmp	 SHORT $LN68@create_tex
$LN67@create_tex:

; 2705 : 	{
; 2706 : 
; 2707 : 		type = TEXTURE_TYPE_MULTIPLEALPHA_16BIT;

  00197	c7 45 b0 06 00
	00 00		 mov	 DWORD PTR _type$[ebp], 6

; 2708 : 
; 2709 : 		graphic->transparent = TRUE;

  0019e	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  001a1	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1
$LN68@create_tex:

; 2710 : 	}
; 2711 : 
; 2712 : 	//
; 2713 : 	// Set up the texture shifts & masks
; 2714 : 	//
; 2715 : 
; 2716 : 	texture_width_power = 0;

  001a8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _texture_width_power$[ebp], 0

; 2717 : 
; 2718 : 	temp = graphic->texture_width;

  001af	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  001b2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001b5	89 4d cc	 mov	 DWORD PTR _temp$[ebp], ecx
$LN4@create_tex:

; 2719 : 
; 2720 : 	while ( temp != 1 )

  001b8	83 7d cc 01	 cmp	 DWORD PTR _temp$[ebp], 1
  001bc	74 13		 je	 SHORT $LN5@create_tex

; 2721 : 	{
; 2722 : 
; 2723 : 		temp >>= 1;

  001be	8b 45 cc	 mov	 eax, DWORD PTR _temp$[ebp]
  001c1	d1 f8		 sar	 eax, 1
  001c3	89 45 cc	 mov	 DWORD PTR _temp$[ebp], eax

; 2724 : 
; 2725 : 		texture_width_power++;

  001c6	8b 45 dc	 mov	 eax, DWORD PTR _texture_width_power$[ebp]
  001c9	83 c0 01	 add	 eax, 1
  001cc	89 45 dc	 mov	 DWORD PTR _texture_width_power$[ebp], eax

; 2726 : 	}

  001cf	eb e7		 jmp	 SHORT $LN4@create_tex
$LN5@create_tex:

; 2727 : 
; 2728 : 	texture_height_power = 0;

  001d1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _texture_height_power$[ebp], 0

; 2729 : 
; 2730 : 	temp = graphic->texture_height;

  001d8	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  001db	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001de	89 4d cc	 mov	 DWORD PTR _temp$[ebp], ecx
$LN6@create_tex:

; 2731 : 
; 2732 : 	while ( temp != 1 )

  001e1	83 7d cc 01	 cmp	 DWORD PTR _temp$[ebp], 1
  001e5	74 13		 je	 SHORT $LN7@create_tex

; 2733 : 	{
; 2734 : 
; 2735 : 		temp >>= 1;

  001e7	8b 45 cc	 mov	 eax, DWORD PTR _temp$[ebp]
  001ea	d1 f8		 sar	 eax, 1
  001ec	89 45 cc	 mov	 DWORD PTR _temp$[ebp], eax

; 2736 : 
; 2737 : 		texture_height_power++;

  001ef	8b 45 d4	 mov	 eax, DWORD PTR _texture_height_power$[ebp]
  001f2	83 c0 01	 add	 eax, 1
  001f5	89 45 d4	 mov	 DWORD PTR _texture_height_power$[ebp], eax

; 2738 : 	}

  001f8	eb e7		 jmp	 SHORT $LN6@create_tex
$LN7@create_tex:

; 2739 : 
; 2740 : 	texture_width_mask = graphic->texture_width - 1;

  001fa	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  001fd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00200	83 e9 01	 sub	 ecx, 1
  00203	89 4d d8	 mov	 DWORD PTR _texture_width_mask$[ebp], ecx

; 2741 : 
; 2742 : 	texture_height_mask = graphic->texture_height - 1;

  00206	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00209	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0020c	83 e9 01	 sub	 ecx, 1
  0020f	89 4d d0	 mov	 DWORD PTR _texture_height_mask$[ebp], ecx

; 2743 : 
; 2744 : 	//
; 2745 : 	// Allocate the textures
; 2746 : 	//
; 2747 : 
; 2748 : 	graphic->number_of_textures = graphic->number_of_textures_wide * graphic->number_of_textures_high;

  00212	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00215	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00218	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0021b	0f af 51 08	 imul	 edx, DWORD PTR [ecx+8]
  0021f	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00222	89 10		 mov	 DWORD PTR [eax], edx

; 2749 : 
; 2750 : 	graphic->textures = ( texture_graphic_texture * ) safe_malloc ( sizeof ( texture_graphic_texture ) * graphic->number_of_textures );

  00224	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00227	6b 08 0c	 imul	 ecx, DWORD PTR [eax], 12
  0022a	51		 push	 ecx
  0022b	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00230	8b 55 b8	 mov	 edx, DWORD PTR _graphic$[ebp]
  00233	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 2751 : 
; 2752 : 	count = 0;

  00236	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 2753 : 
; 2754 : 	for ( texture_y = 0; texture_y < graphic->number_of_textures_high; texture_y++ )

  0023d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _texture_y$[ebp], 0
  00244	eb 09		 jmp	 SHORT $LN10@create_tex
$LN8@create_tex:
  00246	8b 45 ec	 mov	 eax, DWORD PTR _texture_y$[ebp]
  00249	83 c0 01	 add	 eax, 1
  0024c	89 45 ec	 mov	 DWORD PTR _texture_y$[ebp], eax
$LN10@create_tex:
  0024f	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00252	8b 4d ec	 mov	 ecx, DWORD PTR _texture_y$[ebp]
  00255	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00258	0f 8d 52 01 00
	00		 jge	 $LN9@create_tex

; 2755 : 	{
; 2756 : 
; 2757 : 		for ( texture_x = 0; texture_x < graphic->number_of_textures_wide; texture_x++ )

  0025e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _texture_x$[ebp], 0
  00265	eb 09		 jmp	 SHORT $LN13@create_tex
$LN11@create_tex:
  00267	8b 45 f0	 mov	 eax, DWORD PTR _texture_x$[ebp]
  0026a	83 c0 01	 add	 eax, 1
  0026d	89 45 f0	 mov	 DWORD PTR _texture_x$[ebp], eax
$LN13@create_tex:
  00270	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00273	8b 4d f0	 mov	 ecx, DWORD PTR _texture_x$[ebp]
  00276	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00279	0f 8d 2c 01 00
	00		 jge	 $LN12@create_tex

; 2758 : 		{
; 2759 : 
; 2760 : 			float
; 2761 : 				umax,
; 2762 : 				vmax;
; 2763 : 
; 2764 : 			umax = 1.0;

  0027f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00287	f3 0f 11 45 a0	 movss	 DWORD PTR _umax$32[ebp], xmm0

; 2765 : 			vmax = 1.0;

  0028c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00294	f3 0f 11 45 9c	 movss	 DWORD PTR _vmax$31[ebp], xmm0

; 2766 : 
; 2767 : 			if ( texture_x == ( graphic->number_of_textures_wide - 1 ) )

  00299	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  0029c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0029f	83 e9 01	 sub	 ecx, 1
  002a2	39 4d f0	 cmp	 DWORD PTR _texture_x$[ebp], ecx
  002a5	75 4c		 jne	 SHORT $LN70@create_tex

; 2768 : 			{
; 2769 : 
; 2770 : 				if ( ( graphic->number_of_textures_wide * graphic->texture_width ) > graphic->graphic_width )

  002a7	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  002aa	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  002ad	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002b0	0f af 51 0c	 imul	 edx, DWORD PTR [ecx+12]
  002b4	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  002b7	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  002ba	7e 37		 jle	 SHORT $LN70@create_tex

; 2771 : 				{
; 2772 : 
; 2773 : 					float
; 2774 : 						last_width;
; 2775 : 
; 2776 : 					last_width = graphic->graphic_width - ( ( graphic->number_of_textures_wide - 1 ) * graphic->texture_width );

  002bc	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  002bf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002c2	83 e9 01	 sub	 ecx, 1
  002c5	8b 55 b8	 mov	 edx, DWORD PTR _graphic$[ebp]
  002c8	0f af 4a 0c	 imul	 ecx, DWORD PTR [edx+12]
  002cc	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  002cf	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  002d2	2b d1		 sub	 edx, ecx
  002d4	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  002d8	f3 0f 11 45 98	 movss	 DWORD PTR _last_width$30[ebp], xmm0

; 2777 : 
; 2778 : 					umax = ( last_width / ( float ) graphic->texture_width );

  002dd	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  002e0	f3 0f 2a 40 0c	 cvtsi2ss xmm0, DWORD PTR [eax+12]
  002e5	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _last_width$30[ebp]
  002ea	f3 0f 5e c8	 divss	 xmm1, xmm0
  002ee	f3 0f 11 4d a0	 movss	 DWORD PTR _umax$32[ebp], xmm1
$LN70@create_tex:

; 2779 : 				}
; 2780 : 			}
; 2781 : 
; 2782 : 			if ( texture_y == ( graphic->number_of_textures_high - 1 ) )

  002f3	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  002f6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002f9	83 e9 01	 sub	 ecx, 1
  002fc	39 4d ec	 cmp	 DWORD PTR _texture_y$[ebp], ecx
  002ff	75 4c		 jne	 SHORT $LN72@create_tex

; 2783 : 			{
; 2784 : 
; 2785 : 				if ( ( graphic->number_of_textures_high * graphic->texture_height ) > graphic->graphic_height )

  00301	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00304	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00307	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0030a	0f af 51 10	 imul	 edx, DWORD PTR [ecx+16]
  0030e	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00311	3b 50 18	 cmp	 edx, DWORD PTR [eax+24]
  00314	7e 37		 jle	 SHORT $LN72@create_tex

; 2786 : 				{
; 2787 : 
; 2788 : 					float
; 2789 : 						last_height;
; 2790 : 
; 2791 : 					last_height = graphic->graphic_height - ( ( graphic->number_of_textures_high - 1 ) * graphic->texture_height );

  00316	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00319	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0031c	83 e9 01	 sub	 ecx, 1
  0031f	8b 55 b8	 mov	 edx, DWORD PTR _graphic$[ebp]
  00322	0f af 4a 10	 imul	 ecx, DWORD PTR [edx+16]
  00326	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00329	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0032c	2b d1		 sub	 edx, ecx
  0032e	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00332	f3 0f 11 45 94	 movss	 DWORD PTR _last_height$29[ebp], xmm0

; 2792 : 
; 2793 : 					vmax = ( last_height / ( float ) graphic->texture_height );

  00337	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  0033a	f3 0f 2a 40 10	 cvtsi2ss xmm0, DWORD PTR [eax+16]
  0033f	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _last_height$29[ebp]
  00344	f3 0f 5e c8	 divss	 xmm1, xmm0
  00348	f3 0f 11 4d 9c	 movss	 DWORD PTR _vmax$31[ebp], xmm1
$LN72@create_tex:

; 2794 : 				}
; 2795 : 			}
; 2796 : 
; 2797 : 			graphic->textures[count].umax = umax;

  0034d	6b 45 e0 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00351	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00354	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00357	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _umax$32[ebp]
  0035c	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 2798 : 			graphic->textures[count].vmax = vmax;

  00361	6b 45 e0 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00365	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00368	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0036b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _vmax$31[ebp]
  00370	f3 0f 11 44 02
	04		 movss	 DWORD PTR [edx+eax+4], xmm0

; 2799 : 			graphic->textures[count].texture = create_user_texture_screen ( graphic->texture_width, graphic->texture_height, type, 0 );

  00376	6a 00		 push	 0
  00378	8b 45 b0	 mov	 eax, DWORD PTR _type$[ebp]
  0037b	50		 push	 eax
  0037c	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0037f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00382	52		 push	 edx
  00383	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00386	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00389	51		 push	 ecx
  0038a	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0038f	6b 55 e0 0c	 imul	 edx, DWORD PTR _count$[ebp], 12
  00393	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00396	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
  00399	89 44 11 08	 mov	 DWORD PTR [ecx+edx+8], eax

; 2800 : 
; 2801 : 			count++;

  0039d	8b 45 e0	 mov	 eax, DWORD PTR _count$[ebp]
  003a0	83 c0 01	 add	 eax, 1
  003a3	89 45 e0	 mov	 DWORD PTR _count$[ebp], eax

; 2802 : 		}

  003a6	e9 bc fe ff ff	 jmp	 $LN11@create_tex
$LN12@create_tex:

; 2803 : 	}

  003ab	e9 96 fe ff ff	 jmp	 $LN8@create_tex
$LN9@create_tex:

; 2804 : 
; 2805 : 	//
; 2806 : 	// Set active screen to initialise the screen format bitmasks & shifts
; 2807 : 	//
; 2808 : 
; 2809 : 	set_active_screen ( graphic->textures[0].texture );

  003b0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003b5	6b c8 00	 imul	 ecx, eax, 0
  003b8	8b 55 b8	 mov	 edx, DWORD PTR _graphic$[ebp]
  003bb	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  003be	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  003c2	51		 push	 ecx
  003c3	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2810 : 
; 2811 : 	//
; 2812 : 	// Grab pointers & pitches of all the texture screens
; 2813 : 	//
; 2814 : 
; 2815 : 	texture_data = ( char * * ) safe_malloc ( sizeof ( char * ) * graphic->number_of_textures );

  003c8	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  003cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cd	c1 e1 02	 shl	 ecx, 2
  003d0	51		 push	 ecx
  003d1	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  003d6	89 45 c0	 mov	 DWORD PTR _texture_data$[ebp], eax

; 2816 : 
; 2817 : 	texture_pitch = ( int * ) safe_malloc ( sizeof ( int ) * graphic->number_of_textures );

  003d9	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  003dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  003de	c1 e1 02	 shl	 ecx, 2
  003e1	51		 push	 ecx
  003e2	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  003e7	89 45 bc	 mov	 DWORD PTR _texture_pitch$[ebp], eax

; 2818 : 
; 2819 : 	for ( count = 0; count < graphic->number_of_textures; count++ )

  003ea	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  003f1	eb 09		 jmp	 SHORT $LN16@create_tex
$LN14@create_tex:
  003f3	8b 45 e0	 mov	 eax, DWORD PTR _count$[ebp]
  003f6	83 c0 01	 add	 eax, 1
  003f9	89 45 e0	 mov	 DWORD PTR _count$[ebp], eax
$LN16@create_tex:
  003fc	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  003ff	8b 4d e0	 mov	 ecx, DWORD PTR _count$[ebp]
  00402	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00404	7d 61		 jge	 SHORT $LN15@create_tex

; 2820 : 	{
; 2821 : 
; 2822 : 		if ( !lock_screen ( graphic->textures[count].texture ) )

  00406	6b 45 e0 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0040a	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0040d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00410	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00414	50		 push	 eax
  00415	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0041a	85 c0		 test	 eax, eax
  0041c	75 0d		 jne	 SHORT $LN73@create_tex

; 2823 : 		{
; 2824 : 
; 2825 : 			debug_fatal ( "Unable to lock screen during load_texture_graphic" );

  0041e	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@FKAPOGBC@Unable?5to?5lock?5screen?5during?5lo@
  00423	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00428	83 c4 04	 add	 esp, 4
$LN73@create_tex:

; 2826 : 		}
; 2827 : 
; 2828 : 		texture_data[count] = ( char * ) get_screen_data ( graphic->textures[count].texture );

  0042b	6b 45 e0 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0042f	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00432	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00435	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00439	50		 push	 eax
  0043a	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0043f	8b 4d e0	 mov	 ecx, DWORD PTR _count$[ebp]
  00442	8b 55 c0	 mov	 edx, DWORD PTR _texture_data$[ebp]
  00445	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 2829 : 
; 2830 : 		texture_pitch[count] = get_screen_pitch ( graphic->textures[count].texture );

  00448	6b 45 e0 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0044c	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0044f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00452	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00456	50		 push	 eax
  00457	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0045c	8b 4d e0	 mov	 ecx, DWORD PTR _count$[ebp]
  0045f	8b 55 bc	 mov	 edx, DWORD PTR _texture_pitch$[ebp]
  00462	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 2831 : 	}

  00465	eb 8c		 jmp	 SHORT $LN14@create_tex
$LN15@create_tex:

; 2832 : 
; 2833 : 	if ( channels == 3 )

  00467	83 7d f4 03	 cmp	 DWORD PTR _channels$[ebp], 3
  0046b	0f 85 2d 03 00
	00		 jne	 $LN74@create_tex

; 2834 : 	{
; 2835 : 
; 2836 : 		psd_rgb
; 2837 : 			*ptr;
; 2838 : 
; 2839 : 		ptr = ( psd_rgb * ) data;

  00471	8b 45 c4	 mov	 eax, DWORD PTR _data$[ebp]
  00474	89 45 90	 mov	 DWORD PTR _ptr$28[ebp], eax

; 2840 : 
; 2841 : 		if ( get_screen_pixel_width ( active_screen ) == 2 )

  00477	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0047c	50		 push	 eax
  0047d	e8 00 00 00 00	 call	 ?get_screen_pixel_width@@YGHPAUSCREEN@@@Z ; get_screen_pixel_width
  00482	83 f8 02	 cmp	 eax, 2
  00485	0f 85 6d 01 00
	00		 jne	 $LN76@create_tex

; 2842 : 		{
; 2843 : 
; 2844 : 			for ( y = 0; y < height; y++ )

  0048b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00492	eb 09		 jmp	 SHORT $LN19@create_tex
$LN17@create_tex:
  00494	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  00497	83 c0 01	 add	 eax, 1
  0049a	89 45 e4	 mov	 DWORD PTR _y$[ebp], eax
$LN19@create_tex:
  0049d	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  004a0	3b 45 f8	 cmp	 eax, DWORD PTR _height$[ebp]
  004a3	0f 8d 4a 01 00
	00		 jge	 $LN18@create_tex

; 2845 : 			{
; 2846 : 
; 2847 : 				texture_y = y >> texture_height_power;

  004a9	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  004ac	8b 4d d4	 mov	 ecx, DWORD PTR _texture_height_power$[ebp]
  004af	d3 f8		 sar	 eax, cl
  004b1	89 45 ec	 mov	 DWORD PTR _texture_y$[ebp], eax

; 2848 : 
; 2849 : 				base_texture_index = texture_y * graphic->number_of_textures_wide;

  004b4	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  004b7	8b 4d ec	 mov	 ecx, DWORD PTR _texture_y$[ebp]
  004ba	0f af 48 04	 imul	 ecx, DWORD PTR [eax+4]
  004be	89 4d c8	 mov	 DWORD PTR _base_texture_index$[ebp], ecx

; 2850 : 
; 2851 : 				for ( x = 0; x < width; x++ )

  004c1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  004c8	eb 09		 jmp	 SHORT $LN22@create_tex
$LN20@create_tex:
  004ca	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  004cd	83 c0 01	 add	 eax, 1
  004d0	89 45 e8	 mov	 DWORD PTR _x$[ebp], eax
$LN22@create_tex:
  004d3	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  004d6	3b 45 fc	 cmp	 eax, DWORD PTR _width$[ebp]
  004d9	0f 8d cc 00 00
	00		 jge	 $LN21@create_tex

; 2852 : 				{
; 2853 : 
; 2854 : 					int
; 2855 : 						pixel_x;
; 2856 : 
; 2857 : 					unsigned int
; 2858 : 						red,
; 2859 : 						green,
; 2860 : 						blue;
; 2861 : 
; 2862 : 					unsigned short int
; 2863 : 						*pixels;
; 2864 : 
; 2865 : 					unsigned short int
; 2866 : 						value;
; 2867 : 
; 2868 : 					texture_x = x >> texture_width_power;

  004df	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  004e2	8b 4d dc	 mov	 ecx, DWORD PTR _texture_width_power$[ebp]
  004e5	d3 f8		 sar	 eax, cl
  004e7	89 45 f0	 mov	 DWORD PTR _texture_x$[ebp], eax

; 2869 : 
; 2870 : 					pixel_x = x & texture_width_mask;

  004ea	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  004ed	23 45 d8	 and	 eax, DWORD PTR _texture_width_mask$[ebp]
  004f0	89 45 8c	 mov	 DWORD PTR _pixel_x$27[ebp], eax

; 2871 : 
; 2872 : 					pixels = ( unsigned short int * ) texture_data[base_texture_index + texture_x];

  004f3	8b 45 c8	 mov	 eax, DWORD PTR _base_texture_index$[ebp]
  004f6	03 45 f0	 add	 eax, DWORD PTR _texture_x$[ebp]
  004f9	8b 4d c0	 mov	 ecx, DWORD PTR _texture_data$[ebp]
  004fc	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  004ff	89 95 7c ff ff
	ff		 mov	 DWORD PTR _pixels$23[ebp], edx

; 2873 : 
; 2874 : 					red = ( ( unsigned int ) ptr->r ) << 24;

  00505	8b 45 90	 mov	 eax, DWORD PTR _ptr$28[ebp]
  00508	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0050b	c1 e1 18	 shl	 ecx, 24			; 00000018H
  0050e	89 4d 88	 mov	 DWORD PTR _red$26[ebp], ecx

; 2875 : 					green = ( ( unsigned int ) ptr->g ) << 24;

  00511	8b 45 90	 mov	 eax, DWORD PTR _ptr$28[ebp]
  00514	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00518	c1 e1 18	 shl	 ecx, 24			; 00000018H
  0051b	89 4d 84	 mov	 DWORD PTR _green$25[ebp], ecx

; 2876 : 					blue = ( ( unsigned int ) ptr->b ) << 24;

  0051e	8b 45 90	 mov	 eax, DWORD PTR _ptr$28[ebp]
  00521	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00525	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00528	89 4d 80	 mov	 DWORD PTR _blue$24[ebp], ecx

; 2877 : 
; 2878 : 					red &= active_screen_red_mask;

  0052b	8b 45 88	 mov	 eax, DWORD PTR _red$26[ebp]
  0052e	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  00534	89 45 88	 mov	 DWORD PTR _red$26[ebp], eax

; 2879 : 					green &= active_screen_green_mask;

  00537	8b 45 84	 mov	 eax, DWORD PTR _green$25[ebp]
  0053a	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00540	89 45 84	 mov	 DWORD PTR _green$25[ebp], eax

; 2880 : 					blue &= active_screen_blue_mask;

  00543	8b 45 80	 mov	 eax, DWORD PTR _blue$24[ebp]
  00546	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  0054c	89 45 80	 mov	 DWORD PTR _blue$24[ebp], eax

; 2881 : 
; 2882 : 					red >>= active_screen_red_shift;

  0054f	8b 45 88	 mov	 eax, DWORD PTR _red$26[ebp]
  00552	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00558	d3 e8		 shr	 eax, cl
  0055a	89 45 88	 mov	 DWORD PTR _red$26[ebp], eax

; 2883 : 					green >>= active_screen_green_shift;

  0055d	8b 45 84	 mov	 eax, DWORD PTR _green$25[ebp]
  00560	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00566	d3 e8		 shr	 eax, cl
  00568	89 45 84	 mov	 DWORD PTR _green$25[ebp], eax

; 2884 : 					blue >>= active_screen_blue_shift;

  0056b	8b 45 80	 mov	 eax, DWORD PTR _blue$24[ebp]
  0056e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00574	d3 e8		 shr	 eax, cl
  00576	89 45 80	 mov	 DWORD PTR _blue$24[ebp], eax

; 2885 : 
; 2886 : 					value = ( red | green | blue );

  00579	8b 45 88	 mov	 eax, DWORD PTR _red$26[ebp]
  0057c	0b 45 84	 or	 eax, DWORD PTR _green$25[ebp]
  0057f	0b 45 80	 or	 eax, DWORD PTR _blue$24[ebp]
  00582	66 89 85 78 ff
	ff ff		 mov	 WORD PTR _value$22[ebp], ax

; 2887 : 
; 2888 : 					pixels[pixel_x] = value;

  00589	8b 45 8c	 mov	 eax, DWORD PTR _pixel_x$27[ebp]
  0058c	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _pixels$23[ebp]
  00592	66 8b 95 78 ff
	ff ff		 mov	 dx, WORD PTR _value$22[ebp]
  00599	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2889 : 
; 2890 : 					ptr++;

  0059d	8b 45 90	 mov	 eax, DWORD PTR _ptr$28[ebp]
  005a0	83 c0 03	 add	 eax, 3
  005a3	89 45 90	 mov	 DWORD PTR _ptr$28[ebp], eax

; 2891 : 				}

  005a6	e9 1f ff ff ff	 jmp	 $LN20@create_tex
$LN21@create_tex:

; 2892 : 
; 2893 : 				for ( count = 0; count < graphic->number_of_textures_wide; count++ )

  005ab	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  005b2	eb 09		 jmp	 SHORT $LN25@create_tex
$LN23@create_tex:
  005b4	8b 45 e0	 mov	 eax, DWORD PTR _count$[ebp]
  005b7	83 c0 01	 add	 eax, 1
  005ba	89 45 e0	 mov	 DWORD PTR _count$[ebp], eax
$LN25@create_tex:
  005bd	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  005c0	8b 4d e0	 mov	 ecx, DWORD PTR _count$[ebp]
  005c3	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  005c6	7d 26		 jge	 SHORT $LN24@create_tex

; 2894 : 				{
; 2895 : 
; 2896 : 					texture_data[base_texture_index + count] += texture_pitch[base_texture_index + count];

  005c8	8b 45 c8	 mov	 eax, DWORD PTR _base_texture_index$[ebp]
  005cb	03 45 e0	 add	 eax, DWORD PTR _count$[ebp]
  005ce	8b 4d c8	 mov	 ecx, DWORD PTR _base_texture_index$[ebp]
  005d1	03 4d e0	 add	 ecx, DWORD PTR _count$[ebp]
  005d4	8b 55 c0	 mov	 edx, DWORD PTR _texture_data$[ebp]
  005d7	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  005da	8b 55 bc	 mov	 edx, DWORD PTR _texture_pitch$[ebp]
  005dd	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  005e0	8b 4d c8	 mov	 ecx, DWORD PTR _base_texture_index$[ebp]
  005e3	03 4d e0	 add	 ecx, DWORD PTR _count$[ebp]
  005e6	8b 55 c0	 mov	 edx, DWORD PTR _texture_data$[ebp]
  005e9	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 2897 : 				}

  005ec	eb c6		 jmp	 SHORT $LN23@create_tex
$LN24@create_tex:

; 2898 : 			}

  005ee	e9 a1 fe ff ff	 jmp	 $LN17@create_tex
$LN18@create_tex:

; 2899 : 		}
; 2900 : 		else

  005f3	e9 a1 01 00 00	 jmp	 $LN27@create_tex
$LN76@create_tex:

; 2901 : 		{
; 2902 : 
; 2903 : 			for ( y = 0; y < height; y++ )

  005f8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  005ff	eb 09		 jmp	 SHORT $LN28@create_tex
$LN26@create_tex:
  00601	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  00604	83 c0 01	 add	 eax, 1
  00607	89 45 e4	 mov	 DWORD PTR _y$[ebp], eax
$LN28@create_tex:
  0060a	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  0060d	3b 45 f8	 cmp	 eax, DWORD PTR _height$[ebp]
  00610	0f 8d 83 01 00
	00		 jge	 $LN27@create_tex

; 2904 : 			{
; 2905 : 
; 2906 : 				texture_y = y >> texture_height_power;

  00616	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  00619	8b 4d d4	 mov	 ecx, DWORD PTR _texture_height_power$[ebp]
  0061c	d3 f8		 sar	 eax, cl
  0061e	89 45 ec	 mov	 DWORD PTR _texture_y$[ebp], eax

; 2907 : 
; 2908 : 				base_texture_index = texture_y * graphic->number_of_textures_wide;

  00621	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00624	8b 4d ec	 mov	 ecx, DWORD PTR _texture_y$[ebp]
  00627	0f af 48 04	 imul	 ecx, DWORD PTR [eax+4]
  0062b	89 4d c8	 mov	 DWORD PTR _base_texture_index$[ebp], ecx

; 2909 : 
; 2910 : 				for ( x = 0; x < width; x++ )

  0062e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00635	eb 09		 jmp	 SHORT $LN31@create_tex
$LN29@create_tex:
  00637	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  0063a	83 c0 01	 add	 eax, 1
  0063d	89 45 e8	 mov	 DWORD PTR _x$[ebp], eax
$LN31@create_tex:
  00640	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  00643	3b 45 fc	 cmp	 eax, DWORD PTR _width$[ebp]
  00646	0f 8d 05 01 00
	00		 jge	 $LN30@create_tex

; 2911 : 				{
; 2912 : 
; 2913 : 					int
; 2914 : 						pixel_x;
; 2915 : 
; 2916 : 					unsigned int
; 2917 : 						red,
; 2918 : 						green,
; 2919 : 						blue;
; 2920 : 
; 2921 : 					unsigned int
; 2922 : 						*pixels;
; 2923 : 
; 2924 : 					unsigned int
; 2925 : 						value;
; 2926 : 
; 2927 : 					texture_x = x >> texture_width_power;

  0064c	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  0064f	8b 4d dc	 mov	 ecx, DWORD PTR _texture_width_power$[ebp]
  00652	d3 f8		 sar	 eax, cl
  00654	89 45 f0	 mov	 DWORD PTR _texture_x$[ebp], eax

; 2928 : 
; 2929 : 					pixel_x = x & texture_width_mask;

  00657	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  0065a	23 45 d8	 and	 eax, DWORD PTR _texture_width_mask$[ebp]
  0065d	89 85 74 ff ff
	ff		 mov	 DWORD PTR _pixel_x$21[ebp], eax

; 2930 : 
; 2931 : 					pixels = ( unsigned int * ) texture_data[base_texture_index + texture_x];

  00663	8b 45 c8	 mov	 eax, DWORD PTR _base_texture_index$[ebp]
  00666	03 45 f0	 add	 eax, DWORD PTR _texture_x$[ebp]
  00669	8b 4d c0	 mov	 ecx, DWORD PTR _texture_data$[ebp]
  0066c	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0066f	89 95 64 ff ff
	ff		 mov	 DWORD PTR _pixels$17[ebp], edx

; 2932 : 
; 2933 : 					red = ( ( unsigned int ) ptr->r ) << 24;

  00675	8b 45 90	 mov	 eax, DWORD PTR _ptr$28[ebp]
  00678	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0067b	c1 e1 18	 shl	 ecx, 24			; 00000018H
  0067e	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _red$20[ebp], ecx

; 2934 : 					green = ( ( unsigned int ) ptr->g ) << 24;

  00684	8b 45 90	 mov	 eax, DWORD PTR _ptr$28[ebp]
  00687	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0068b	c1 e1 18	 shl	 ecx, 24			; 00000018H
  0068e	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _green$19[ebp], ecx

; 2935 : 					blue = ( ( unsigned int ) ptr->b ) << 24;

  00694	8b 45 90	 mov	 eax, DWORD PTR _ptr$28[ebp]
  00697	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0069b	c1 e1 18	 shl	 ecx, 24			; 00000018H
  0069e	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _blue$18[ebp], ecx

; 2936 : 
; 2937 : 					red &= active_screen_red_mask;

  006a4	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _red$20[ebp]
  006aa	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  006b0	89 85 70 ff ff
	ff		 mov	 DWORD PTR _red$20[ebp], eax

; 2938 : 					green &= active_screen_green_mask;

  006b6	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _green$19[ebp]
  006bc	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  006c2	89 85 6c ff ff
	ff		 mov	 DWORD PTR _green$19[ebp], eax

; 2939 : 					blue &= active_screen_blue_mask;

  006c8	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _blue$18[ebp]
  006ce	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  006d4	89 85 68 ff ff
	ff		 mov	 DWORD PTR _blue$18[ebp], eax

; 2940 : 
; 2941 : 					red >>= active_screen_red_shift;

  006da	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _red$20[ebp]
  006e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  006e6	d3 e8		 shr	 eax, cl
  006e8	89 85 70 ff ff
	ff		 mov	 DWORD PTR _red$20[ebp], eax

; 2942 : 					green >>= active_screen_green_shift;

  006ee	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _green$19[ebp]
  006f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  006fa	d3 e8		 shr	 eax, cl
  006fc	89 85 6c ff ff
	ff		 mov	 DWORD PTR _green$19[ebp], eax

; 2943 : 					blue >>= active_screen_blue_shift;

  00702	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _blue$18[ebp]
  00708	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  0070e	d3 e8		 shr	 eax, cl
  00710	89 85 68 ff ff
	ff		 mov	 DWORD PTR _blue$18[ebp], eax

; 2944 : 
; 2945 : 					value = ( red | green | blue );

  00716	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _red$20[ebp]
  0071c	0b 85 6c ff ff
	ff		 or	 eax, DWORD PTR _green$19[ebp]
  00722	0b 85 68 ff ff
	ff		 or	 eax, DWORD PTR _blue$18[ebp]
  00728	89 85 60 ff ff
	ff		 mov	 DWORD PTR _value$16[ebp], eax

; 2946 : 
; 2947 : 					pixels[pixel_x] = value;

  0072e	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _pixel_x$21[ebp]
  00734	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _pixels$17[ebp]
  0073a	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _value$16[ebp]
  00740	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 2948 : 
; 2949 : 					ptr++;

  00743	8b 45 90	 mov	 eax, DWORD PTR _ptr$28[ebp]
  00746	83 c0 03	 add	 eax, 3
  00749	89 45 90	 mov	 DWORD PTR _ptr$28[ebp], eax

; 2950 : 				}

  0074c	e9 e6 fe ff ff	 jmp	 $LN29@create_tex
$LN30@create_tex:

; 2951 : 
; 2952 : 				for ( count = 0; count < graphic->number_of_textures_wide; count++ )

  00751	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00758	eb 09		 jmp	 SHORT $LN34@create_tex
$LN32@create_tex:
  0075a	8b 45 e0	 mov	 eax, DWORD PTR _count$[ebp]
  0075d	83 c0 01	 add	 eax, 1
  00760	89 45 e0	 mov	 DWORD PTR _count$[ebp], eax
$LN34@create_tex:
  00763	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00766	8b 4d e0	 mov	 ecx, DWORD PTR _count$[ebp]
  00769	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0076c	7d 26		 jge	 SHORT $LN33@create_tex

; 2953 : 				{
; 2954 : 
; 2955 : 					texture_data[base_texture_index + count] += texture_pitch[base_texture_index + count];

  0076e	8b 45 c8	 mov	 eax, DWORD PTR _base_texture_index$[ebp]
  00771	03 45 e0	 add	 eax, DWORD PTR _count$[ebp]
  00774	8b 4d c8	 mov	 ecx, DWORD PTR _base_texture_index$[ebp]
  00777	03 4d e0	 add	 ecx, DWORD PTR _count$[ebp]
  0077a	8b 55 c0	 mov	 edx, DWORD PTR _texture_data$[ebp]
  0077d	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00780	8b 55 bc	 mov	 edx, DWORD PTR _texture_pitch$[ebp]
  00783	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  00786	8b 4d c8	 mov	 ecx, DWORD PTR _base_texture_index$[ebp]
  00789	03 4d e0	 add	 ecx, DWORD PTR _count$[ebp]
  0078c	8b 55 c0	 mov	 edx, DWORD PTR _texture_data$[ebp]
  0078f	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 2956 : 				}

  00792	eb c6		 jmp	 SHORT $LN32@create_tex
$LN33@create_tex:

; 2957 : 			}

  00794	e9 68 fe ff ff	 jmp	 $LN26@create_tex
$LN27@create_tex:

; 2958 : 		}
; 2959 : 	}
; 2960 : 	else

  00799	e9 03 04 00 00	 jmp	 $LN45@create_tex
$LN74@create_tex:

; 2961 : 	{
; 2962 : 
; 2963 : 		psd_rgba
; 2964 : 			*ptr;
; 2965 : 
; 2966 : 		ptr = ( psd_rgba * ) data;

  0079e	8b 45 c4	 mov	 eax, DWORD PTR _data$[ebp]
  007a1	89 85 5c ff ff
	ff		 mov	 DWORD PTR _ptr$15[ebp], eax

; 2967 : 
; 2968 : 		if ( get_screen_pixel_width ( active_screen ) == 2 )

  007a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  007ac	50		 push	 eax
  007ad	e8 00 00 00 00	 call	 ?get_screen_pixel_width@@YGHPAUSCREEN@@@Z ; get_screen_pixel_width
  007b2	83 f8 02	 cmp	 eax, 2
  007b5	0f 85 f7 01 00
	00		 jne	 $LN78@create_tex

; 2969 : 		{
; 2970 : 
; 2971 : 			for ( y = 0; y < height; y++ )

  007bb	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  007c2	eb 09		 jmp	 SHORT $LN37@create_tex
$LN35@create_tex:
  007c4	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  007c7	83 c0 01	 add	 eax, 1
  007ca	89 45 e4	 mov	 DWORD PTR _y$[ebp], eax
$LN37@create_tex:
  007cd	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  007d0	3b 45 f8	 cmp	 eax, DWORD PTR _height$[ebp]
  007d3	0f 8d d4 01 00
	00		 jge	 $LN36@create_tex

; 2972 : 			{
; 2973 : 
; 2974 : 				texture_y = y >> texture_height_power;

  007d9	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  007dc	8b 4d d4	 mov	 ecx, DWORD PTR _texture_height_power$[ebp]
  007df	d3 f8		 sar	 eax, cl
  007e1	89 45 ec	 mov	 DWORD PTR _texture_y$[ebp], eax

; 2975 : 
; 2976 : 				base_texture_index = texture_y * graphic->number_of_textures_wide;

  007e4	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  007e7	8b 4d ec	 mov	 ecx, DWORD PTR _texture_y$[ebp]
  007ea	0f af 48 04	 imul	 ecx, DWORD PTR [eax+4]
  007ee	89 4d c8	 mov	 DWORD PTR _base_texture_index$[ebp], ecx

; 2977 : 
; 2978 : 				for ( x = 0; x < width; x++ )

  007f1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  007f8	eb 09		 jmp	 SHORT $LN40@create_tex
$LN38@create_tex:
  007fa	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  007fd	83 c0 01	 add	 eax, 1
  00800	89 45 e8	 mov	 DWORD PTR _x$[ebp], eax
$LN40@create_tex:
  00803	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  00806	3b 45 fc	 cmp	 eax, DWORD PTR _width$[ebp]
  00809	0f 8d 56 01 00
	00		 jge	 $LN39@create_tex

; 2979 : 				{
; 2980 : 
; 2981 : 					int
; 2982 : 						pixel_x;
; 2983 : 
; 2984 : 					unsigned int
; 2985 : 						red,
; 2986 : 						green,
; 2987 : 						blue,
; 2988 : 						alpha;
; 2989 : 
; 2990 : 					unsigned short int
; 2991 : 						*pixels;
; 2992 : 
; 2993 : 					unsigned short int
; 2994 : 						value;
; 2995 : 
; 2996 : 					texture_x = x >> texture_width_power;

  0080f	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  00812	8b 4d dc	 mov	 ecx, DWORD PTR _texture_width_power$[ebp]
  00815	d3 f8		 sar	 eax, cl
  00817	89 45 f0	 mov	 DWORD PTR _texture_x$[ebp], eax

; 2997 : 
; 2998 : 					pixel_x = x & texture_width_mask;

  0081a	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  0081d	23 45 d8	 and	 eax, DWORD PTR _texture_width_mask$[ebp]
  00820	89 85 58 ff ff
	ff		 mov	 DWORD PTR _pixel_x$14[ebp], eax

; 2999 : 
; 3000 : 					pixels = ( unsigned short int * ) texture_data[base_texture_index + texture_x];

  00826	8b 45 c8	 mov	 eax, DWORD PTR _base_texture_index$[ebp]
  00829	03 45 f0	 add	 eax, DWORD PTR _texture_x$[ebp]
  0082c	8b 4d c0	 mov	 ecx, DWORD PTR _texture_data$[ebp]
  0082f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00832	89 95 44 ff ff
	ff		 mov	 DWORD PTR _pixels$9[ebp], edx

; 3001 : 
; 3002 : 					red = ( ( unsigned int ) ptr->r ) << 24;

  00838	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$15[ebp]
  0083e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00841	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00844	89 8d 54 ff ff
	ff		 mov	 DWORD PTR _red$13[ebp], ecx

; 3003 : 					green = ( ( unsigned int ) ptr->g ) << 24;

  0084a	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$15[ebp]
  00850	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00854	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00857	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _green$12[ebp], ecx

; 3004 : 					blue = ( ( unsigned int ) ptr->b ) << 24;

  0085d	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$15[ebp]
  00863	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00867	c1 e1 18	 shl	 ecx, 24			; 00000018H
  0086a	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _blue$11[ebp], ecx

; 3005 : 					alpha = ( ( unsigned int ) ptr->a ) << 24;

  00870	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$15[ebp]
  00876	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0087a	c1 e1 18	 shl	 ecx, 24			; 00000018H
  0087d	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _alpha$10[ebp], ecx

; 3006 : 
; 3007 : 					red &= active_screen_red_mask;

  00883	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _red$13[ebp]
  00889	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  0088f	89 85 54 ff ff
	ff		 mov	 DWORD PTR _red$13[ebp], eax

; 3008 : 					green &= active_screen_green_mask;

  00895	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _green$12[ebp]
  0089b	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  008a1	89 85 50 ff ff
	ff		 mov	 DWORD PTR _green$12[ebp], eax

; 3009 : 					blue &= active_screen_blue_mask;

  008a7	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _blue$11[ebp]
  008ad	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  008b3	89 85 4c ff ff
	ff		 mov	 DWORD PTR _blue$11[ebp], eax

; 3010 : 					alpha &= active_screen_alpha_mask;

  008b9	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _alpha$10[ebp]
  008bf	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  008c5	89 85 48 ff ff
	ff		 mov	 DWORD PTR _alpha$10[ebp], eax

; 3011 : 
; 3012 : 					red >>= active_screen_red_shift;

  008cb	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _red$13[ebp]
  008d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  008d7	d3 e8		 shr	 eax, cl
  008d9	89 85 54 ff ff
	ff		 mov	 DWORD PTR _red$13[ebp], eax

; 3013 : 					green >>= active_screen_green_shift;

  008df	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _green$12[ebp]
  008e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  008eb	d3 e8		 shr	 eax, cl
  008ed	89 85 50 ff ff
	ff		 mov	 DWORD PTR _green$12[ebp], eax

; 3014 : 					blue >>= active_screen_blue_shift;

  008f3	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _blue$11[ebp]
  008f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  008ff	d3 e8		 shr	 eax, cl
  00901	89 85 4c ff ff
	ff		 mov	 DWORD PTR _blue$11[ebp], eax

; 3015 : 					alpha >>= active_screen_alpha_shift;

  00907	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _alpha$10[ebp]
  0090d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  00913	d3 e8		 shr	 eax, cl
  00915	89 85 48 ff ff
	ff		 mov	 DWORD PTR _alpha$10[ebp], eax

; 3016 : 
; 3017 : 					value = ( red | green | blue | alpha );

  0091b	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _red$13[ebp]
  00921	0b 85 50 ff ff
	ff		 or	 eax, DWORD PTR _green$12[ebp]
  00927	0b 85 4c ff ff
	ff		 or	 eax, DWORD PTR _blue$11[ebp]
  0092d	0b 85 48 ff ff
	ff		 or	 eax, DWORD PTR _alpha$10[ebp]
  00933	66 89 85 40 ff
	ff ff		 mov	 WORD PTR _value$8[ebp], ax

; 3018 : 
; 3019 : 					pixels[pixel_x] = value;

  0093a	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _pixel_x$14[ebp]
  00940	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _pixels$9[ebp]
  00946	66 8b 95 40 ff
	ff ff		 mov	 dx, WORD PTR _value$8[ebp]
  0094d	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 3020 : 
; 3021 : 					ptr++;

  00951	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$15[ebp]
  00957	83 c0 04	 add	 eax, 4
  0095a	89 85 5c ff ff
	ff		 mov	 DWORD PTR _ptr$15[ebp], eax

; 3022 : 				}

  00960	e9 95 fe ff ff	 jmp	 $LN38@create_tex
$LN39@create_tex:

; 3023 : 
; 3024 : 				for ( count = 0; count < graphic->number_of_textures_wide; count++ )

  00965	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0096c	eb 09		 jmp	 SHORT $LN43@create_tex
$LN41@create_tex:
  0096e	8b 45 e0	 mov	 eax, DWORD PTR _count$[ebp]
  00971	83 c0 01	 add	 eax, 1
  00974	89 45 e0	 mov	 DWORD PTR _count$[ebp], eax
$LN43@create_tex:
  00977	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  0097a	8b 4d e0	 mov	 ecx, DWORD PTR _count$[ebp]
  0097d	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00980	7d 26		 jge	 SHORT $LN42@create_tex

; 3025 : 				{
; 3026 : 
; 3027 : 					texture_data[base_texture_index + count] += texture_pitch[base_texture_index + count];

  00982	8b 45 c8	 mov	 eax, DWORD PTR _base_texture_index$[ebp]
  00985	03 45 e0	 add	 eax, DWORD PTR _count$[ebp]
  00988	8b 4d c8	 mov	 ecx, DWORD PTR _base_texture_index$[ebp]
  0098b	03 4d e0	 add	 ecx, DWORD PTR _count$[ebp]
  0098e	8b 55 c0	 mov	 edx, DWORD PTR _texture_data$[ebp]
  00991	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00994	8b 55 bc	 mov	 edx, DWORD PTR _texture_pitch$[ebp]
  00997	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  0099a	8b 4d c8	 mov	 ecx, DWORD PTR _base_texture_index$[ebp]
  0099d	03 4d e0	 add	 ecx, DWORD PTR _count$[ebp]
  009a0	8b 55 c0	 mov	 edx, DWORD PTR _texture_data$[ebp]
  009a3	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 3028 : 				}

  009a6	eb c6		 jmp	 SHORT $LN41@create_tex
$LN42@create_tex:

; 3029 : 			}

  009a8	e9 17 fe ff ff	 jmp	 $LN35@create_tex
$LN36@create_tex:

; 3030 : 		}
; 3031 : 		else

  009ad	e9 ef 01 00 00	 jmp	 $LN45@create_tex
$LN78@create_tex:

; 3032 : 		{
; 3033 : 
; 3034 : 			for ( y = 0; y < height; y++ )

  009b2	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  009b9	eb 09		 jmp	 SHORT $LN46@create_tex
$LN44@create_tex:
  009bb	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  009be	83 c0 01	 add	 eax, 1
  009c1	89 45 e4	 mov	 DWORD PTR _y$[ebp], eax
$LN46@create_tex:
  009c4	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  009c7	3b 45 f8	 cmp	 eax, DWORD PTR _height$[ebp]
  009ca	0f 8d d1 01 00
	00		 jge	 $LN45@create_tex

; 3035 : 			{
; 3036 : 
; 3037 : 				texture_y = y >> texture_height_power;

  009d0	8b 45 e4	 mov	 eax, DWORD PTR _y$[ebp]
  009d3	8b 4d d4	 mov	 ecx, DWORD PTR _texture_height_power$[ebp]
  009d6	d3 f8		 sar	 eax, cl
  009d8	89 45 ec	 mov	 DWORD PTR _texture_y$[ebp], eax

; 3038 : 
; 3039 : 				base_texture_index = texture_y * graphic->number_of_textures_wide;

  009db	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  009de	8b 4d ec	 mov	 ecx, DWORD PTR _texture_y$[ebp]
  009e1	0f af 48 04	 imul	 ecx, DWORD PTR [eax+4]
  009e5	89 4d c8	 mov	 DWORD PTR _base_texture_index$[ebp], ecx

; 3040 : 
; 3041 : 				for ( x = 0; x < width; x++ )

  009e8	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  009ef	eb 09		 jmp	 SHORT $LN49@create_tex
$LN47@create_tex:
  009f1	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  009f4	83 c0 01	 add	 eax, 1
  009f7	89 45 e8	 mov	 DWORD PTR _x$[ebp], eax
$LN49@create_tex:
  009fa	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  009fd	3b 45 fc	 cmp	 eax, DWORD PTR _width$[ebp]
  00a00	0f 8d 53 01 00
	00		 jge	 $LN48@create_tex

; 3042 : 				{
; 3043 : 
; 3044 : 					int
; 3045 : 						pixel_x;
; 3046 : 
; 3047 : 					unsigned int
; 3048 : 						red,
; 3049 : 						green,
; 3050 : 						blue,
; 3051 : 						alpha;
; 3052 : 
; 3053 : 					unsigned int
; 3054 : 						*pixels;
; 3055 : 
; 3056 : 					unsigned int
; 3057 : 						value;
; 3058 : 
; 3059 : 					texture_x = x >> texture_width_power;

  00a06	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  00a09	8b 4d dc	 mov	 ecx, DWORD PTR _texture_width_power$[ebp]
  00a0c	d3 f8		 sar	 eax, cl
  00a0e	89 45 f0	 mov	 DWORD PTR _texture_x$[ebp], eax

; 3060 : 
; 3061 : 					pixel_x = x & texture_width_mask;

  00a11	8b 45 e8	 mov	 eax, DWORD PTR _x$[ebp]
  00a14	23 45 d8	 and	 eax, DWORD PTR _texture_width_mask$[ebp]
  00a17	89 85 3c ff ff
	ff		 mov	 DWORD PTR _pixel_x$7[ebp], eax

; 3062 : 
; 3063 : 					pixels = ( unsigned int * ) texture_data[base_texture_index + texture_x];

  00a1d	8b 45 c8	 mov	 eax, DWORD PTR _base_texture_index$[ebp]
  00a20	03 45 f0	 add	 eax, DWORD PTR _texture_x$[ebp]
  00a23	8b 4d c0	 mov	 ecx, DWORD PTR _texture_data$[ebp]
  00a26	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00a29	89 95 28 ff ff
	ff		 mov	 DWORD PTR _pixels$2[ebp], edx

; 3064 : 
; 3065 : 					red = ( ( unsigned int ) ptr->r ) << 24;

  00a2f	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$15[ebp]
  00a35	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00a38	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00a3b	89 8d 38 ff ff
	ff		 mov	 DWORD PTR _red$6[ebp], ecx

; 3066 : 					green = ( ( unsigned int ) ptr->g ) << 24;

  00a41	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$15[ebp]
  00a47	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00a4b	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00a4e	89 8d 34 ff ff
	ff		 mov	 DWORD PTR _green$5[ebp], ecx

; 3067 : 					blue = ( ( unsigned int ) ptr->b ) << 24;

  00a54	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$15[ebp]
  00a5a	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00a5e	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00a61	89 8d 30 ff ff
	ff		 mov	 DWORD PTR _blue$4[ebp], ecx

; 3068 : 					alpha = ( ( unsigned int ) ptr->a ) << 24;

  00a67	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$15[ebp]
  00a6d	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00a71	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00a74	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _alpha$3[ebp], ecx

; 3069 : 
; 3070 : 					red &= active_screen_red_mask;

  00a7a	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _red$6[ebp]
  00a80	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  00a86	89 85 38 ff ff
	ff		 mov	 DWORD PTR _red$6[ebp], eax

; 3071 : 					green &= active_screen_green_mask;

  00a8c	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _green$5[ebp]
  00a92	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00a98	89 85 34 ff ff
	ff		 mov	 DWORD PTR _green$5[ebp], eax

; 3072 : 					blue &= active_screen_blue_mask;

  00a9e	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _blue$4[ebp]
  00aa4	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  00aaa	89 85 30 ff ff
	ff		 mov	 DWORD PTR _blue$4[ebp], eax

; 3073 : 					alpha &= active_screen_alpha_mask;

  00ab0	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _alpha$3[ebp]
  00ab6	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  00abc	89 85 2c ff ff
	ff		 mov	 DWORD PTR _alpha$3[ebp], eax

; 3074 : 
; 3075 : 					red >>= active_screen_red_shift;

  00ac2	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _red$6[ebp]
  00ac8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00ace	d3 e8		 shr	 eax, cl
  00ad0	89 85 38 ff ff
	ff		 mov	 DWORD PTR _red$6[ebp], eax

; 3076 : 					green >>= active_screen_green_shift;

  00ad6	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _green$5[ebp]
  00adc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00ae2	d3 e8		 shr	 eax, cl
  00ae4	89 85 34 ff ff
	ff		 mov	 DWORD PTR _green$5[ebp], eax

; 3077 : 					blue >>= active_screen_blue_shift;

  00aea	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _blue$4[ebp]
  00af0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00af6	d3 e8		 shr	 eax, cl
  00af8	89 85 30 ff ff
	ff		 mov	 DWORD PTR _blue$4[ebp], eax

; 3078 : 					alpha >>= active_screen_alpha_shift;

  00afe	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _alpha$3[ebp]
  00b04	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  00b0a	d3 e8		 shr	 eax, cl
  00b0c	89 85 2c ff ff
	ff		 mov	 DWORD PTR _alpha$3[ebp], eax

; 3079 : 
; 3080 : 					value = ( red | green | blue | alpha );

  00b12	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _red$6[ebp]
  00b18	0b 85 34 ff ff
	ff		 or	 eax, DWORD PTR _green$5[ebp]
  00b1e	0b 85 30 ff ff
	ff		 or	 eax, DWORD PTR _blue$4[ebp]
  00b24	0b 85 2c ff ff
	ff		 or	 eax, DWORD PTR _alpha$3[ebp]
  00b2a	89 85 24 ff ff
	ff		 mov	 DWORD PTR _value$1[ebp], eax

; 3081 : 
; 3082 : 					pixels[pixel_x] = value;

  00b30	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _pixel_x$7[ebp]
  00b36	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _pixels$2[ebp]
  00b3c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR _value$1[ebp]
  00b42	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 3083 : 
; 3084 : 					ptr++;

  00b45	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ptr$15[ebp]
  00b4b	83 c0 04	 add	 eax, 4
  00b4e	89 85 5c ff ff
	ff		 mov	 DWORD PTR _ptr$15[ebp], eax

; 3085 : 				}

  00b54	e9 98 fe ff ff	 jmp	 $LN47@create_tex
$LN48@create_tex:

; 3086 : 
; 3087 : 				for ( count = 0; count < graphic->number_of_textures_wide; count++ )

  00b59	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00b60	eb 09		 jmp	 SHORT $LN52@create_tex
$LN50@create_tex:
  00b62	8b 45 e0	 mov	 eax, DWORD PTR _count$[ebp]
  00b65	83 c0 01	 add	 eax, 1
  00b68	89 45 e0	 mov	 DWORD PTR _count$[ebp], eax
$LN52@create_tex:
  00b6b	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00b6e	8b 4d e0	 mov	 ecx, DWORD PTR _count$[ebp]
  00b71	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00b74	7d 26		 jge	 SHORT $LN51@create_tex

; 3088 : 				{
; 3089 : 
; 3090 : 					texture_data[base_texture_index + count] += texture_pitch[base_texture_index + count];

  00b76	8b 45 c8	 mov	 eax, DWORD PTR _base_texture_index$[ebp]
  00b79	03 45 e0	 add	 eax, DWORD PTR _count$[ebp]
  00b7c	8b 4d c8	 mov	 ecx, DWORD PTR _base_texture_index$[ebp]
  00b7f	03 4d e0	 add	 ecx, DWORD PTR _count$[ebp]
  00b82	8b 55 c0	 mov	 edx, DWORD PTR _texture_data$[ebp]
  00b85	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00b88	8b 55 bc	 mov	 edx, DWORD PTR _texture_pitch$[ebp]
  00b8b	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  00b8e	8b 4d c8	 mov	 ecx, DWORD PTR _base_texture_index$[ebp]
  00b91	03 4d e0	 add	 ecx, DWORD PTR _count$[ebp]
  00b94	8b 55 c0	 mov	 edx, DWORD PTR _texture_data$[ebp]
  00b97	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 3091 : 				}

  00b9a	eb c6		 jmp	 SHORT $LN50@create_tex
$LN51@create_tex:

; 3092 : 			}

  00b9c	e9 1a fe ff ff	 jmp	 $LN44@create_tex
$LN45@create_tex:

; 3093 : 		}
; 3094 : 	}
; 3095 : 
; 3096 : 	//
; 3097 : 	// Unlock the textures
; 3098 : 	//
; 3099 : 
; 3100 : 	for ( count = 0; count < graphic->number_of_textures; count++ )

  00ba1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00ba8	eb 09		 jmp	 SHORT $LN55@create_tex
$LN53@create_tex:
  00baa	8b 45 e0	 mov	 eax, DWORD PTR _count$[ebp]
  00bad	83 c0 01	 add	 eax, 1
  00bb0	89 45 e0	 mov	 DWORD PTR _count$[ebp], eax
$LN55@create_tex:
  00bb3	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]
  00bb6	8b 4d e0	 mov	 ecx, DWORD PTR _count$[ebp]
  00bb9	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00bbb	7d 16		 jge	 SHORT $LN54@create_tex

; 3101 : 	{
; 3102 : 
; 3103 : 		unlock_screen ( graphic->textures[count].texture );

  00bbd	6b 45 e0 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00bc1	8b 4d b8	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00bc4	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00bc7	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00bcb	50		 push	 eax
  00bcc	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen

; 3104 : 	}

  00bd1	eb d7		 jmp	 SHORT $LN53@create_tex
$LN54@create_tex:

; 3105 : 
; 3106 : 	safe_free ( texture_data );

  00bd3	8b 45 c0	 mov	 eax, DWORD PTR _texture_data$[ebp]
  00bd6	50		 push	 eax
  00bd7	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 3107 : 
; 3108 : 	safe_free ( texture_pitch );

  00bdc	8b 45 bc	 mov	 eax, DWORD PTR _texture_pitch$[ebp]
  00bdf	50		 push	 eax
  00be0	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 3109 : 
; 3110 : 	set_active_screen ( old_active_screen );

  00be5	8b 45 b4	 mov	 eax, DWORD PTR _old_active_screen$[ebp]
  00be8	50		 push	 eax
  00be9	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3111 : 
; 3112 : 	//
; 3113 : 	// Free up the psd stuff
; 3114 : 	//
; 3115 : 
; 3116 : 	safe_free ( data );

  00bee	8b 45 c4	 mov	 eax, DWORD PTR _data$[ebp]
  00bf1	50		 push	 eax
  00bf2	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 3117 : 
; 3118 : 	return ( graphic );

  00bf7	8b 45 b8	 mov	 eax, DWORD PTR _graphic$[ebp]

; 3119 : }

  00bfa	5f		 pop	 edi
  00bfb	5e		 pop	 esi
  00bfc	5b		 pop	 ebx
  00bfd	8b e5		 mov	 esp, ebp
  00bff	5d		 pop	 ebp
  00c00	c2 04 00	 ret	 4
?create_texture_graphic@@YGPAUTEXTURE_GRAPHIC@@PBD@Z ENDP ; create_texture_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?report_system_texture_stats@@YGXXZ
_TEXT	SEGMENT
_height$ = -20						; size = 4
_width$ = -16						; size = 4
_total$ = -12						; size = 4
_count$ = -8						; size = 4
_type$ = -4						; size = 4
?report_system_texture_stats@@YGXXZ PROC		; report_system_texture_stats, COMDAT

; 2338 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2339 : 
; 2340 : 	texture_map_types
; 2341 : 		type;
; 2342 : 
; 2343 : 	int
; 2344 : 		count,
; 2345 : 		total,
; 2346 : 		width,
; 2347 : 		height;
; 2348 : 
; 2349 : 	type = TEXTURE_TYPE_NOALPHA;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _type$[ebp], 1

; 2350 : 
; 2351 : 	for ( width = 128; width > 0; width >>= 1 )

  00010	c7 45 f0 80 00
	00 00		 mov	 DWORD PTR _width$[ebp], 128 ; 00000080H
  00017	eb 08		 jmp	 SHORT $LN4@report_sys
$LN2@report_sys:
  00019	8b 45 f0	 mov	 eax, DWORD PTR _width$[ebp]
  0001c	d1 f8		 sar	 eax, 1
  0001e	89 45 f0	 mov	 DWORD PTR _width$[ebp], eax
$LN4@report_sys:
  00021	83 7d f0 00	 cmp	 DWORD PTR _width$[ebp], 0
  00025	0f 8e 1f 01 00
	00		 jle	 $LN3@report_sys

; 2352 : 	{
; 2353 : 
; 2354 : 		for ( height = 128; height > 0; height >>= 1 )

  0002b	c7 45 ec 80 00
	00 00		 mov	 DWORD PTR _height$[ebp], 128 ; 00000080H
  00032	eb 08		 jmp	 SHORT $LN7@report_sys
$LN5@report_sys:
  00034	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00037	d1 f8		 sar	 eax, 1
  00039	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax
$LN7@report_sys:
  0003c	83 7d ec 00	 cmp	 DWORD PTR _height$[ebp], 0
  00040	0f 8e ff 00 00
	00		 jle	 $LN6@report_sys

; 2355 : 		{
; 2356 : 
; 2357 : 			total = 0;

  00046	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _total$[ebp], 0

; 2358 : 
; 2359 : 			for ( count = 0; count < number_of_system_textures; count++ )

  0004d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00054	eb 09		 jmp	 SHORT $LN10@report_sys
$LN8@report_sys:
  00056	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00059	83 c0 01	 add	 eax, 1
  0005c	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN10@report_sys:
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00062	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00068	7d 42		 jge	 SHORT $LN9@report_sys

; 2360 : 			{
; 2361 : 
; 2362 : 				if (	( system_textures[count]->type == type ) &&
; 2363 : 						( system_textures[count]->width == width ) &&

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0006d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	3b 55 fc	 cmp	 edx, DWORD PTR _type$[ebp]
  00079	75 2f		 jne	 SHORT $LN47@report_sys
  0007b	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0007e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00085	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  00089	3b 55 f0	 cmp	 edx, DWORD PTR _width$[ebp]
  0008c	75 1c		 jne	 SHORT $LN47@report_sys
  0008e	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00091	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00098	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  0009c	3b 55 ec	 cmp	 edx, DWORD PTR _height$[ebp]
  0009f	75 09		 jne	 SHORT $LN47@report_sys

; 2364 : 						( system_textures[count]->height == height ) )
; 2365 : 				{
; 2366 : 
; 2367 : 					total++;

  000a1	8b 45 f4	 mov	 eax, DWORD PTR _total$[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 45 f4	 mov	 DWORD PTR _total$[ebp], eax
$LN47@report_sys:

; 2368 : 				}
; 2369 : 			}

  000aa	eb aa		 jmp	 SHORT $LN8@report_sys
$LN9@report_sys:

; 2370 : 
; 2371 : 			if ( total )

  000ac	83 7d f4 00	 cmp	 DWORD PTR _total$[ebp], 0
  000b0	74 19		 je	 SHORT $LN48@report_sys

; 2372 : 			{
; 2373 : 
; 2374 : 				debug_log ( "TYPE: NOALPHA ( %d, %d ) %d", width, height, total );

  000b2	8b 45 f4	 mov	 eax, DWORD PTR _total$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d ec	 mov	 ecx, DWORD PTR _height$[ebp]
  000b9	51		 push	 ecx
  000ba	8b 55 f0	 mov	 edx, DWORD PTR _width$[ebp]
  000bd	52		 push	 edx
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FPNKEOIF@TYPE?3?5NOALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5?$CFd@
  000c3	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000c8	83 c4 10	 add	 esp, 16			; 00000010H
$LN48@report_sys:

; 2375 : 			}
; 2376 : 
; 2377 : 			if ( total < 5 )

  000cb	83 7d f4 05	 cmp	 DWORD PTR _total$[ebp], 5
  000cf	7d 6f		 jge	 SHORT $LN49@report_sys

; 2378 : 			{
; 2379 : 
; 2380 : 				for ( count = 0; count < number_of_system_textures; count++ )

  000d1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000d8	eb 09		 jmp	 SHORT $LN13@report_sys
$LN11@report_sys:
  000da	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  000dd	83 c0 01	 add	 eax, 1
  000e0	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN13@report_sys:
  000e3	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  000e6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  000ec	7d 52		 jge	 SHORT $LN49@report_sys

; 2381 : 				{
; 2382 : 
; 2383 : 					if (	( system_textures[count]->type == type ) &&
; 2384 : 							( system_textures[count]->width == width ) &&

  000ee	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  000f1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  000f8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fa	3b 55 fc	 cmp	 edx, DWORD PTR _type$[ebp]
  000fd	75 3f		 jne	 SHORT $LN50@report_sys
  000ff	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00102	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00109	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  0010d	3b 55 f0	 cmp	 edx, DWORD PTR _width$[ebp]
  00110	75 2c		 jne	 SHORT $LN50@report_sys
  00112	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00115	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0011c	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  00120	3b 55 ec	 cmp	 edx, DWORD PTR _height$[ebp]
  00123	75 19		 jne	 SHORT $LN50@report_sys

; 2385 : 							( system_textures[count]->height == height ) )
; 2386 : 					{
; 2387 : 
; 2388 : 						debug_log ( "%s", system_texture_names[count] );

  00125	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00128	c1 e0 07	 shl	 eax, 7
  0012b	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00130	50		 push	 eax
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00136	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0013b	83 c4 08	 add	 esp, 8
$LN50@report_sys:

; 2389 : 					}
; 2390 : 				}

  0013e	eb 9a		 jmp	 SHORT $LN11@report_sys
$LN49@report_sys:

; 2391 : 			}
; 2392 : 		}

  00140	e9 ef fe ff ff	 jmp	 $LN5@report_sys
$LN6@report_sys:

; 2393 : 	}

  00145	e9 cf fe ff ff	 jmp	 $LN2@report_sys
$LN3@report_sys:

; 2394 : 
; 2395 : 	type = TEXTURE_TYPE_SINGLEALPHA;

  0014a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _type$[ebp], 2

; 2396 : 
; 2397 : 	for ( width = 128; width > 0; width >>= 1 )

  00151	c7 45 f0 80 00
	00 00		 mov	 DWORD PTR _width$[ebp], 128 ; 00000080H
  00158	eb 08		 jmp	 SHORT $LN16@report_sys
$LN14@report_sys:
  0015a	8b 45 f0	 mov	 eax, DWORD PTR _width$[ebp]
  0015d	d1 f8		 sar	 eax, 1
  0015f	89 45 f0	 mov	 DWORD PTR _width$[ebp], eax
$LN16@report_sys:
  00162	83 7d f0 00	 cmp	 DWORD PTR _width$[ebp], 0
  00166	0f 8e 1f 01 00
	00		 jle	 $LN15@report_sys

; 2398 : 	{
; 2399 : 
; 2400 : 		for ( height = 128; height > 0; height >>= 1 )

  0016c	c7 45 ec 80 00
	00 00		 mov	 DWORD PTR _height$[ebp], 128 ; 00000080H
  00173	eb 08		 jmp	 SHORT $LN19@report_sys
$LN17@report_sys:
  00175	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00178	d1 f8		 sar	 eax, 1
  0017a	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax
$LN19@report_sys:
  0017d	83 7d ec 00	 cmp	 DWORD PTR _height$[ebp], 0
  00181	0f 8e ff 00 00
	00		 jle	 $LN18@report_sys

; 2401 : 		{
; 2402 : 
; 2403 : 			total = 0;

  00187	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _total$[ebp], 0

; 2404 : 
; 2405 : 			for ( count = 0; count < number_of_system_textures; count++ )

  0018e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00195	eb 09		 jmp	 SHORT $LN22@report_sys
$LN20@report_sys:
  00197	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0019a	83 c0 01	 add	 eax, 1
  0019d	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN22@report_sys:
  001a0	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  001a3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  001a9	7d 42		 jge	 SHORT $LN21@report_sys

; 2406 : 			{
; 2407 : 
; 2408 : 				if (	( system_textures[count]->type == type ) &&
; 2409 : 						( system_textures[count]->width == width ) &&

  001ab	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  001ae	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  001b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b7	3b 55 fc	 cmp	 edx, DWORD PTR _type$[ebp]
  001ba	75 2f		 jne	 SHORT $LN51@report_sys
  001bc	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  001bf	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  001c6	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  001ca	3b 55 f0	 cmp	 edx, DWORD PTR _width$[ebp]
  001cd	75 1c		 jne	 SHORT $LN51@report_sys
  001cf	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  001d2	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  001d9	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  001dd	3b 55 ec	 cmp	 edx, DWORD PTR _height$[ebp]
  001e0	75 09		 jne	 SHORT $LN51@report_sys

; 2410 : 						( system_textures[count]->height == height ) )
; 2411 : 				{
; 2412 : 
; 2413 : 					total++;

  001e2	8b 45 f4	 mov	 eax, DWORD PTR _total$[ebp]
  001e5	83 c0 01	 add	 eax, 1
  001e8	89 45 f4	 mov	 DWORD PTR _total$[ebp], eax
$LN51@report_sys:

; 2414 : 				}
; 2415 : 			}

  001eb	eb aa		 jmp	 SHORT $LN20@report_sys
$LN21@report_sys:

; 2416 : 
; 2417 : 			if ( total )

  001ed	83 7d f4 00	 cmp	 DWORD PTR _total$[ebp], 0
  001f1	74 19		 je	 SHORT $LN52@report_sys

; 2418 : 			{
; 2419 : 
; 2420 : 				debug_log ( "TYPE: SINGLEALPHA ( %d, %d ) %d", width, height, total );

  001f3	8b 45 f4	 mov	 eax, DWORD PTR _total$[ebp]
  001f6	50		 push	 eax
  001f7	8b 4d ec	 mov	 ecx, DWORD PTR _height$[ebp]
  001fa	51		 push	 ecx
  001fb	8b 55 f0	 mov	 edx, DWORD PTR _width$[ebp]
  001fe	52		 push	 edx
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KHMIPDLH@TYPE?3?5SINGLEALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5?$CFd@
  00204	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00209	83 c4 10	 add	 esp, 16			; 00000010H
$LN52@report_sys:

; 2421 : 			}
; 2422 : 
; 2423 : 			if ( total < 5 )

  0020c	83 7d f4 05	 cmp	 DWORD PTR _total$[ebp], 5
  00210	7d 6f		 jge	 SHORT $LN53@report_sys

; 2424 : 			{
; 2425 : 
; 2426 : 				for ( count = 0; count < number_of_system_textures; count++ )

  00212	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00219	eb 09		 jmp	 SHORT $LN25@report_sys
$LN23@report_sys:
  0021b	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0021e	83 c0 01	 add	 eax, 1
  00221	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN25@report_sys:
  00224	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00227	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  0022d	7d 52		 jge	 SHORT $LN53@report_sys

; 2427 : 				{
; 2428 : 
; 2429 : 					if (	( system_textures[count]->type == type ) &&
; 2430 : 							( system_textures[count]->width == width ) &&

  0022f	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00232	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00239	8b 11		 mov	 edx, DWORD PTR [ecx]
  0023b	3b 55 fc	 cmp	 edx, DWORD PTR _type$[ebp]
  0023e	75 3f		 jne	 SHORT $LN54@report_sys
  00240	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00243	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0024a	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  0024e	3b 55 f0	 cmp	 edx, DWORD PTR _width$[ebp]
  00251	75 2c		 jne	 SHORT $LN54@report_sys
  00253	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00256	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0025d	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  00261	3b 55 ec	 cmp	 edx, DWORD PTR _height$[ebp]
  00264	75 19		 jne	 SHORT $LN54@report_sys

; 2431 : 							( system_textures[count]->height == height ) )
; 2432 : 					{
; 2433 : 						debug_log ( "%s", system_texture_names[count] );

  00266	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00269	c1 e0 07	 shl	 eax, 7
  0026c	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00271	50		 push	 eax
  00272	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00277	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0027c	83 c4 08	 add	 esp, 8
$LN54@report_sys:

; 2434 : 					}
; 2435 : 				}

  0027f	eb 9a		 jmp	 SHORT $LN23@report_sys
$LN53@report_sys:

; 2436 : 			}
; 2437 : 		}

  00281	e9 ef fe ff ff	 jmp	 $LN17@report_sys
$LN18@report_sys:

; 2438 : 	}

  00286	e9 cf fe ff ff	 jmp	 $LN14@report_sys
$LN15@report_sys:

; 2439 : 
; 2440 : 	type = TEXTURE_TYPE_MULTIPLEALPHA;

  0028b	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _type$[ebp], 3

; 2441 : 
; 2442 : 	for ( width = 128; width > 0; width >>= 1 )

  00292	c7 45 f0 80 00
	00 00		 mov	 DWORD PTR _width$[ebp], 128 ; 00000080H
  00299	eb 08		 jmp	 SHORT $LN28@report_sys
$LN26@report_sys:
  0029b	8b 45 f0	 mov	 eax, DWORD PTR _width$[ebp]
  0029e	d1 f8		 sar	 eax, 1
  002a0	89 45 f0	 mov	 DWORD PTR _width$[ebp], eax
$LN28@report_sys:
  002a3	83 7d f0 00	 cmp	 DWORD PTR _width$[ebp], 0
  002a7	0f 8e 1f 01 00
	00		 jle	 $LN27@report_sys

; 2443 : 	{
; 2444 : 
; 2445 : 		for ( height = 128; height > 0; height >>= 1 )

  002ad	c7 45 ec 80 00
	00 00		 mov	 DWORD PTR _height$[ebp], 128 ; 00000080H
  002b4	eb 08		 jmp	 SHORT $LN31@report_sys
$LN29@report_sys:
  002b6	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  002b9	d1 f8		 sar	 eax, 1
  002bb	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax
$LN31@report_sys:
  002be	83 7d ec 00	 cmp	 DWORD PTR _height$[ebp], 0
  002c2	0f 8e ff 00 00
	00		 jle	 $LN30@report_sys

; 2446 : 		{
; 2447 : 
; 2448 : 			total = 0;

  002c8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _total$[ebp], 0

; 2449 : 
; 2450 : 			for ( count = 0; count < number_of_system_textures; count++ )

  002cf	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  002d6	eb 09		 jmp	 SHORT $LN34@report_sys
$LN32@report_sys:
  002d8	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002db	83 c0 01	 add	 eax, 1
  002de	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN34@report_sys:
  002e1	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002e4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  002ea	7d 42		 jge	 SHORT $LN33@report_sys

; 2451 : 			{
; 2452 : 
; 2453 : 				if (	( system_textures[count]->type == type ) &&
; 2454 : 						( system_textures[count]->width == width ) &&

  002ec	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002ef	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  002f6	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f8	3b 55 fc	 cmp	 edx, DWORD PTR _type$[ebp]
  002fb	75 2f		 jne	 SHORT $LN55@report_sys
  002fd	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00300	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00307	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  0030b	3b 55 f0	 cmp	 edx, DWORD PTR _width$[ebp]
  0030e	75 1c		 jne	 SHORT $LN55@report_sys
  00310	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00313	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0031a	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  0031e	3b 55 ec	 cmp	 edx, DWORD PTR _height$[ebp]
  00321	75 09		 jne	 SHORT $LN55@report_sys

; 2455 : 						( system_textures[count]->height == height ) )
; 2456 : 				{
; 2457 : 
; 2458 : 					total++;

  00323	8b 45 f4	 mov	 eax, DWORD PTR _total$[ebp]
  00326	83 c0 01	 add	 eax, 1
  00329	89 45 f4	 mov	 DWORD PTR _total$[ebp], eax
$LN55@report_sys:

; 2459 : 				}
; 2460 : 			}

  0032c	eb aa		 jmp	 SHORT $LN32@report_sys
$LN33@report_sys:

; 2461 : 
; 2462 : 			if ( total )

  0032e	83 7d f4 00	 cmp	 DWORD PTR _total$[ebp], 0
  00332	74 19		 je	 SHORT $LN56@report_sys

; 2463 : 			{
; 2464 : 
; 2465 : 				debug_log ( "TYPE: MULTIPLEALPHA ( %d, %d ) %d", width, height, total );

  00334	8b 45 f4	 mov	 eax, DWORD PTR _total$[ebp]
  00337	50		 push	 eax
  00338	8b 4d ec	 mov	 ecx, DWORD PTR _height$[ebp]
  0033b	51		 push	 ecx
  0033c	8b 55 f0	 mov	 edx, DWORD PTR _width$[ebp]
  0033f	52		 push	 edx
  00340	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DCCAPGAA@TYPE?3?5MULTIPLEALPHA?5?$CI?5?$CFd?0?5?$CFd?5?$CJ?5@
  00345	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0034a	83 c4 10	 add	 esp, 16			; 00000010H
$LN56@report_sys:

; 2466 : 			}
; 2467 : 
; 2468 : 			if ( total < 5 )

  0034d	83 7d f4 05	 cmp	 DWORD PTR _total$[ebp], 5
  00351	7d 6f		 jge	 SHORT $LN57@report_sys

; 2469 : 			{
; 2470 : 
; 2471 : 				for ( count = 0; count < number_of_system_textures; count++ )

  00353	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0035a	eb 09		 jmp	 SHORT $LN37@report_sys
$LN35@report_sys:
  0035c	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0035f	83 c0 01	 add	 eax, 1
  00362	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN37@report_sys:
  00365	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00368	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  0036e	7d 52		 jge	 SHORT $LN57@report_sys

; 2472 : 				{
; 2473 : 
; 2474 : 					if (	( system_textures[count]->type == type ) &&
; 2475 : 							( system_textures[count]->width == width ) &&

  00370	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00373	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0037a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0037c	3b 55 fc	 cmp	 edx, DWORD PTR _type$[ebp]
  0037f	75 3f		 jne	 SHORT $LN58@report_sys
  00381	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00384	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0038b	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  0038f	3b 55 f0	 cmp	 edx, DWORD PTR _width$[ebp]
  00392	75 2c		 jne	 SHORT $LN58@report_sys
  00394	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00397	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0039e	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  003a2	3b 55 ec	 cmp	 edx, DWORD PTR _height$[ebp]
  003a5	75 19		 jne	 SHORT $LN58@report_sys

; 2476 : 							( system_textures[count]->height == height ) )
; 2477 : 					{
; 2478 : 
; 2479 : 						debug_log ( "%s", system_texture_names[count] );

  003a7	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  003aa	c1 e0 07	 shl	 eax, 7
  003ad	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  003b2	50		 push	 eax
  003b3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  003b8	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  003bd	83 c4 08	 add	 esp, 8
$LN58@report_sys:

; 2480 : 					}
; 2481 : 				}

  003c0	eb 9a		 jmp	 SHORT $LN35@report_sys
$LN57@report_sys:

; 2482 : 			}
; 2483 : 		}

  003c2	e9 ef fe ff ff	 jmp	 $LN29@report_sys
$LN30@report_sys:

; 2484 : 	}

  003c7	e9 cf fe ff ff	 jmp	 $LN26@report_sys
$LN27@report_sys:

; 2485 : 
; 2486 : 	for ( count = 0; count < number_of_system_textures; count++ )

  003cc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  003d3	eb 09		 jmp	 SHORT $LN40@report_sys
$LN38@report_sys:
  003d5	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  003d8	83 c0 01	 add	 eax, 1
  003db	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN40@report_sys:
  003de	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  003e1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  003e7	7d 5e		 jge	 SHORT $LN39@report_sys

; 2487 : 	{
; 2488 : 
; 2489 : 		if (	( system_textures[count]->type == TEXTURE_TYPE_NOALPHA ) &&

  003e9	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  003ec	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  003f3	83 39 01	 cmp	 DWORD PTR [ecx], 1
  003f6	75 4d		 jne	 SHORT $LN59@report_sys
  003f8	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  003fb	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00402	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  00406	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H
  0040c	75 37		 jne	 SHORT $LN59@report_sys

; 2490 : 				( system_textures[count]->width == 128 ) )
; 2491 : 		{
; 2492 : 
; 2493 : 			debug_log ( "NOALPHA: %s: %d, %d", system_texture_names[count], system_textures[count]->width, system_textures[count]->height );

  0040e	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00411	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00418	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  0041c	52		 push	 edx
  0041d	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00420	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00427	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  0042b	52		 push	 edx
  0042c	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0042f	c1 e0 07	 shl	 eax, 7
  00432	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00437	50		 push	 eax
  00438	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EGJOCONJ@NOALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@
  0043d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00442	83 c4 10	 add	 esp, 16			; 00000010H
$LN59@report_sys:

; 2494 : 		}
; 2495 : 	}

  00445	eb 8e		 jmp	 SHORT $LN38@report_sys
$LN39@report_sys:

; 2496 : 	for ( count = 0; count < number_of_system_textures; count++ )

  00447	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0044e	eb 09		 jmp	 SHORT $LN43@report_sys
$LN41@report_sys:
  00450	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00453	83 c0 01	 add	 eax, 1
  00456	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN43@report_sys:
  00459	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0045c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00462	7d 5e		 jge	 SHORT $LN42@report_sys

; 2497 : 	{
; 2498 : 
; 2499 : 		if (	( system_textures[count]->type == TEXTURE_TYPE_SINGLEALPHA ) &&

  00464	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00467	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0046e	83 39 02	 cmp	 DWORD PTR [ecx], 2
  00471	75 4d		 jne	 SHORT $LN60@report_sys
  00473	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00476	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0047d	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  00481	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H
  00487	75 37		 jne	 SHORT $LN60@report_sys

; 2500 : 				( system_textures[count]->width == 128 ) )
; 2501 : 		{
; 2502 : 
; 2503 : 			debug_log ( "SINGLE_ALPHA: %s: %d, %d", system_texture_names[count], system_textures[count]->width, system_textures[count]->height );

  00489	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0048c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00493	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  00497	52		 push	 edx
  00498	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0049b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  004a2	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  004a6	52		 push	 edx
  004a7	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  004aa	c1 e0 07	 shl	 eax, 7
  004ad	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  004b2	50		 push	 eax
  004b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KGFDMHJG@SINGLE_ALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@
  004b8	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  004bd	83 c4 10	 add	 esp, 16			; 00000010H
$LN60@report_sys:

; 2504 : 		}
; 2505 : 	}

  004c0	eb 8e		 jmp	 SHORT $LN41@report_sys
$LN42@report_sys:

; 2506 : 
; 2507 : 	for ( count = 0; count < number_of_system_textures; count++ )

  004c2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  004c9	eb 09		 jmp	 SHORT $LN46@report_sys
$LN44@report_sys:
  004cb	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  004ce	83 c0 01	 add	 eax, 1
  004d1	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN46@report_sys:
  004d4	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  004d7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  004dd	7d 5e		 jge	 SHORT $LN1@report_sys

; 2508 : 	{
; 2509 : 
; 2510 : 		if (	( system_textures[count]->type == TEXTURE_TYPE_MULTIPLEALPHA ) &&

  004df	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  004e2	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  004e9	83 39 03	 cmp	 DWORD PTR [ecx], 3
  004ec	75 4d		 jne	 SHORT $LN61@report_sys
  004ee	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  004f1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  004f8	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  004fc	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H
  00502	75 37		 jne	 SHORT $LN61@report_sys

; 2511 : 				( system_textures[count]->width == 128 ) )
; 2512 : 		{
; 2513 : 
; 2514 : 			debug_log ( "MULTIPLE_ALPHA: %s: %d, %d", system_texture_names[count], system_textures[count]->width, system_textures[count]->height );

  00504	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00507	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0050e	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  00512	52		 push	 edx
  00513	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00516	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0051d	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  00521	52		 push	 edx
  00522	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00525	c1 e0 07	 shl	 eax, 7
  00528	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  0052d	50		 push	 eax
  0052e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NMJFIGAG@MULTIPLE_ALPHA?3?5?$CFs?3?5?$CFd?0?5?$CFd@
  00533	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00538	83 c4 10	 add	 esp, 16			; 00000010H
$LN61@report_sys:

; 2515 : 		}
; 2516 : 	}

  0053b	eb 8e		 jmp	 SHORT $LN44@report_sys
$LN1@report_sys:

; 2517 : 
; 2518 : }

  0053d	5f		 pop	 edi
  0053e	5e		 pop	 esi
  0053f	5b		 pop	 ebx
  00540	8b e5		 mov	 esp, ebp
  00542	5d		 pop	 ebp
  00543	c3		 ret	 0
?report_system_texture_stats@@YGXXZ ENDP		; report_system_texture_stats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?get_system_texture_name@@YGPBDH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?get_system_texture_name@@YGPBDH@Z PROC			; get_system_texture_name, COMDAT

; 2319 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2320 : 
; 2321 : 	if ( ( index >= 0 ) && ( index < number_of_system_textures ) )

  00009	83 7d 08 00	 cmp	 DWORD PTR _index$[ebp], 0
  0000d	7c 1a		 jl	 SHORT $LN2@get_system
  0000f	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00012	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00018	7d 0f		 jge	 SHORT $LN2@get_system

; 2322 : 	{
; 2323 : 
; 2324 : 		return ( system_texture_names[index] );

  0001a	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0001d	c1 e0 07	 shl	 eax, 7
  00020	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00025	eb 04		 jmp	 SHORT $LN1@get_system

; 2325 : 	}
; 2326 : 	else

  00027	eb 02		 jmp	 SHORT $LN1@get_system
$LN2@get_system:

; 2327 : 	{
; 2328 : 
; 2329 : 		return ( NULL );

  00029	33 c0		 xor	 eax, eax
$LN1@get_system:

; 2330 : 	}
; 2331 : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_system_texture_name@@YGPBDH@Z ENDP			; get_system_texture_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?create_system_indexed_texture_map@@YGHPAUSCREEN@@HHHW4SCREEN_FORMAT_TYPES@@@Z
_TEXT	SEGMENT
tv79 = -192						; size = 4
_ddsd$ = -124						; size = 124
_this_screen$ = 8					; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_index$ = 20						; size = 4
_type$ = 24						; size = 4
?create_system_indexed_texture_map@@YGHPAUSCREEN@@HHHW4SCREEN_FORMAT_TYPES@@@Z PROC ; create_system_indexed_texture_map, COMDAT

; 2178 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2179 : 	DDSURFACEDESC2
; 2180 : 		ddsd;
; 2181 : 
; 2182 : 	this_screen->type = (screen_format_types) type;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0000f	8b 4d 18	 mov	 ecx, DWORD PTR _type$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 2183 : 	this_screen->width = width;

  00014	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00017	66 8b 4d 0c	 mov	 cx, WORD PTR _width$[ebp]
  0001b	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 2184 : 	this_screen->height = height;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00022	66 8b 4d 10	 mov	 cx, WORD PTR _height$[ebp]
  00026	66 89 48 06	 mov	 WORD PTR [eax+6], cx

; 2185 : 	this_screen->video_memory = FALSE;

  0002a	b8 fb ff 00 00	 mov	 eax, 65531		; 0000fffbH
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  00032	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  00036	8b 55 08	 mov	 edx, DWORD PTR _this_screen$[ebp]
  00039	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 2186 : 	this_screen->locked = FALSE;

  0003d	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  00045	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  00049	8b 55 08	 mov	 edx, DWORD PTR _this_screen$[ebp]
  0004c	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 2187 : 	this_screen->pitch = FALSE;

  00050	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00053	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 2188 : 	this_screen->data = NULL;

  0005a	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0005d	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 2189 : 	this_screen->pixel_length = 0;

  00064	33 c0		 xor	 eax, eax
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  00069	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 2190 : 	this_screen->used = TRUE;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00070	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00074	66 83 c9 02	 or	 cx, 2
  00078	8b 55 08	 mov	 edx, DWORD PTR _this_screen$[ebp]
  0007b	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx

; 2191 : 
; 2192 : 	switch ( type )

  0007f	8b 45 18	 mov	 eax, DWORD PTR _type$[ebp]
  00082	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv79[ebp], eax
  00088	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR tv79[ebp]
  0008e	83 e9 01	 sub	 ecx, 1
  00091	89 8d 40 ff ff
	ff		 mov	 DWORD PTR tv79[ebp], ecx
  00097	83 bd 40 ff ff
	ff 05		 cmp	 DWORD PTR tv79[ebp], 5
  0009e	77 35		 ja	 SHORT $LN2@create_sys
  000a0	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR tv79[ebp]
  000a6	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN8@create_sys[edx*4]
$LN4@create_sys:

; 2193 : 	{
; 2194 : 
; 2195 : 		case SCREEN_FORMAT_TYPE_NOALPHA:
; 2196 : 		case SCREEN_FORMAT_TYPE_VIDEOSCREEN:
; 2197 : 		case SCREEN_FORMAT_TYPE_NOALPHA_NOPALETTE:
; 2198 : 		{
; 2199 : 
; 2200 : 			this_screen->contains_alpha = FALSE;

  000ad	b8 7f ff 00 00	 mov	 eax, 65407		; 0000ff7fH
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  000b5	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  000b9	8b 55 08	 mov	 edx, DWORD PTR _this_screen$[ebp]
  000bc	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 2201 : 
; 2202 : 			break;

  000c0	eb 13		 jmp	 SHORT $LN2@create_sys
$LN5@create_sys:

; 2203 : 		}
; 2204 : 
; 2205 : 		case SCREEN_FORMAT_TYPE_MULTIPLEALPHA_16BITS:
; 2206 : 		case SCREEN_FORMAT_TYPE_SINGLEALPHA:
; 2207 : 		case SCREEN_FORMAT_TYPE_MULTIPLEALPHA:
; 2208 : 		{
; 2209 : 
; 2210 : 			this_screen->contains_alpha = TRUE;

  000c2	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  000ca	66 0b 41 0a	 or	 ax, WORD PTR [ecx+10]
  000ce	8b 55 08	 mov	 edx, DWORD PTR _this_screen$[ebp]
  000d1	66 89 42 0a	 mov	 WORD PTR [edx+10], ax
$LN2@create_sys:

; 2211 : 
; 2212 : 			break;
; 2213 : 		}
; 2214 : 	}
; 2215 : 
; 2216 : 	//
; 2217 : 	// Allocate a system memory surface
; 2218 : 	//
; 2219 : 
; 2220 : 	memcpy ( &ddsd.ddpfPixelFormat, &texture_formats[type].format, sizeof ( DDPIXELFORMAT ) );

  000d5	6a 20		 push	 32			; 00000020H
  000d7	8b 45 18	 mov	 eax, DWORD PTR _type$[ebp]
  000da	c1 e0 06	 shl	 eax, 6
  000dd	05 20 00 00 00	 add	 eax, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A+32
  000e2	50		 push	 eax
  000e3	8d 4d cc	 lea	 ecx, DWORD PTR _ddsd$[ebp+72]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 _memcpy
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2221 : 
; 2222 : 	ddsd.dwSize = sizeof ( ddsd );

  000ef	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 2223 : 
; 2224 : 	ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  000f6	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 2225 : 
; 2226 : 	ddsd.ddsCaps.dwCaps = DDSCAPS_TEXTURE;

  000fd	c7 45 ec 00 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 4096 ; 00001000H

; 2227 : 
; 2228 : 	ddsd.dwHeight = height;

  00104	8b 45 10	 mov	 eax, DWORD PTR _height$[ebp]
  00107	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 2229 : 
; 2230 : 	ddsd.dwWidth = width;

  0010a	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0010d	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 2231 : 
; 2232 : 	ddsd.ddsCaps.dwCaps2 = DDSCAPS2_HINTDYNAMIC | DDSCAPS2_D3DTEXTUREMANAGE;

  00110	c7 45 f0 04 00
	02 00		 mov	 DWORD PTR _ddsd$[ebp+108], 131076 ; 00020004H

; 2233 : 	ddsd.ddsCaps.dwCaps3 = 0;

  00117	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+112], 0

; 2234 : 	ddsd.ddsCaps.dwCaps4 = 0;

  0011e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+116], 0

; 2235 : 
; 2236 : 	if ( !f3d_surface_create ( &ddsd, &this_screen->surface ) )

  00125	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00128	83 c0 18	 add	 eax, 24			; 00000018H
  0012b	50		 push	 eax
  0012c	8d 4d 84	 lea	 ecx, DWORD PTR _ddsd$[ebp]
  0012f	51		 push	 ecx
  00130	e8 00 00 00 00	 call	 ?f3d_surface_create@@YGHPAU_DDSURFACEDESC2@@PAPAUIDirectDrawSurface7@@@Z ; f3d_surface_create
  00135	85 c0		 test	 eax, eax
  00137	75 04		 jne	 SHORT $LN6@create_sys

; 2237 : 	{
; 2238 : 		return ( FALSE );

  00139	33 c0		 xor	 eax, eax
  0013b	eb 12		 jmp	 SHORT $LN1@create_sys
$LN6@create_sys:

; 2239 : 	}
; 2240 : 
; 2241 : 	//
; 2242 : 	// Now duplicate this screen to the texture screen
; 2243 : 	//
; 2244 : 
; 2245 : 	system_textures[index] = this_screen;

  0013d	8b 45 14	 mov	 eax, DWORD PTR _index$[ebp]
  00140	8b 4d 08	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  00143	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], ecx

; 2246 : 
; 2247 : 	return ( TRUE );

  0014a	b8 01 00 00 00	 mov	 eax, 1
$LN1@create_sys:

; 2248 : }

  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi
  00151	5b		 pop	 ebx
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 14 00	 ret	 20			; 00000014H
$LN8@create_sys:
  00158	00 00 00 00	 DD	 $LN4@create_sys
  0015c	00 00 00 00	 DD	 $LN5@create_sys
  00160	00 00 00 00	 DD	 $LN5@create_sys
  00164	00 00 00 00	 DD	 $LN4@create_sys
  00168	00 00 00 00	 DD	 $LN4@create_sys
  0016c	00 00 00 00	 DD	 $LN5@create_sys
?create_system_indexed_texture_map@@YGHPAUSCREEN@@HHHW4SCREEN_FORMAT_TYPES@@@Z ENDP ; create_system_indexed_texture_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?get_system_texture_ptr@@YGPAUSCREEN@@H@Z PROC		; get_system_texture_ptr, COMDAT

; 2051 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2052 : 
; 2053 : 	return ( system_textures[index] );

  00009	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000c	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]

; 2054 : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ENDP		; get_system_texture_ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z
_TEXT	SEGMENT
tv82 = -200						; size = 4
_texture_paletted$ = -132				; size = 4
_texture$ = -128					; size = 4
_ddsd$ = -124						; size = 124
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_type$ = 16						; size = 4
_number_of_mipmaps$ = 20				; size = 4
_texture_palette$ = 24					; size = 4
_texture_colour_table$ = 28				; size = 4
?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z PROC ; create_texture_map, COMDAT

; 2076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2077 : 
; 2078 : 	DDSURFACEDESC2
; 2079 : 		ddsd;
; 2080 : 
; 2081 : 	screen
; 2082 : 		*texture;
; 2083 : 
; 2084 : 	int
; 2085 : 		texture_paletted;
; 2086 : 
; 2087 : 	texture = get_free_screen ();

  0000c	e8 00 00 00 00	 call	 ?get_free_screen@@YGPAUSCREEN@@XZ ; get_free_screen
  00011	89 45 80	 mov	 DWORD PTR _texture$[ebp], eax

; 2088 : 
; 2089 : 	texture->type = (screen_format_types) type;

  00014	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]
  00017	8b 4d 10	 mov	 ecx, DWORD PTR _type$[ebp]
  0001a	89 08		 mov	 DWORD PTR [eax], ecx

; 2090 : 	texture->width = width;

  0001c	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]
  0001f	66 8b 4d 08	 mov	 cx, WORD PTR _width$[ebp]
  00023	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 2091 : 	texture->height = height;

  00027	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]
  0002a	66 8b 4d 0c	 mov	 cx, WORD PTR _height$[ebp]
  0002e	66 89 48 06	 mov	 WORD PTR [eax+6], cx

; 2092 : 
; 2093 : 	texture_paletted = FALSE;

  00032	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _texture_paletted$[ebp], 0

; 2094 : 
; 2095 : 	//
; 2096 : 	// Allocate a system memory surface
; 2097 : 	//
; 2098 : 
; 2099 : 	memcpy ( &ddsd.ddpfPixelFormat, &texture_formats[type].format, sizeof ( DDPIXELFORMAT ) );

  0003c	6a 20		 push	 32			; 00000020H
  0003e	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  00041	c1 e0 06	 shl	 eax, 6
  00044	05 20 00 00 00	 add	 eax, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A+32
  00049	50		 push	 eax
  0004a	8d 4d cc	 lea	 ecx, DWORD PTR _ddsd$[ebp+72]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memcpy
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2100 : 
; 2101 : 	texture_paletted = texture_formats[type].palette;

  00056	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  00059	c1 e0 06	 shl	 eax, 6
  0005c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax]
  00062	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _texture_paletted$[ebp], ecx

; 2102 : 
; 2103 : 	texture->contains_alpha = ( texture_formats[type].bpp_alpha ) ? TRUE : FALSE;

  00068	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  0006b	c1 e0 06	 shl	 eax, 6
  0006e	83 b8 1c 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+28], 0
  00075	74 0c		 je	 SHORT $LN8@create_tex
  00077	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv82[ebp], 1
  00081	eb 0a		 jmp	 SHORT $LN9@create_tex
$LN8@create_tex:
  00083	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN9@create_tex:
  0008d	66 8b 8d 38 ff
	ff ff		 mov	 cx, WORD PTR tv82[ebp]
  00094	66 83 e1 01	 and	 cx, 1
  00098	66 c1 e1 07	 shl	 cx, 7
  0009c	ba 7f ff 00 00	 mov	 edx, 65407		; 0000ff7fH
  000a1	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]
  000a4	66 23 50 0a	 and	 dx, WORD PTR [eax+10]
  000a8	66 0b d1	 or	 dx, cx
  000ab	8b 4d 80	 mov	 ecx, DWORD PTR _texture$[ebp]
  000ae	66 89 51 0a	 mov	 WORD PTR [ecx+10], dx

; 2104 : //see http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/ddraw7/directdraw7/ddref_9k8n.asp
; 2105 : 	ddsd.dwSize = sizeof ( ddsd );

  000b2	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 2106 : 	ddsd.dwWidth = width;

  000b9	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  000bc	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 2107 : 	ddsd.dwHeight = height;

  000bf	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  000c2	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 2108 : 	ddsd.dwMipMapCount = 0;

  000c5	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+24], 0

; 2109 : 	ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  000cc	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 2110 : 	ddsd.ddsCaps.dwCaps = DDSCAPS_TEXTURE;

  000d3	c7 45 ec 00 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 4096 ; 00001000H

; 2111 : 
; 2112 : 	if ( ( d3d_mipmap_textures ) && ( number_of_mipmaps > 1 ) )

  000da	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_mipmap_textures@@3HA, 0 ; d3d_mipmap_textures
  000e1	74 22		 je	 SHORT $LN2@create_tex
  000e3	83 7d 14 01	 cmp	 DWORD PTR _number_of_mipmaps$[ebp], 1
  000e7	7e 1c		 jle	 SHORT $LN2@create_tex

; 2113 : 	{
; 2114 : 
; 2115 : 		ddsd.dwFlags |= DDSD_MIPMAPCOUNT;

  000e9	8b 45 88	 mov	 eax, DWORD PTR _ddsd$[ebp+4]
  000ec	0d 00 00 02 00	 or	 eax, 131072		; 00020000H
  000f1	89 45 88	 mov	 DWORD PTR _ddsd$[ebp+4], eax

; 2116 : 		ddsd.ddsCaps.dwCaps |= DDSCAPS_COMPLEX | DDSCAPS_MIPMAP;

  000f4	8b 45 ec	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  000f7	0d 08 00 40 00	 or	 eax, 4194312		; 00400008H
  000fc	89 45 ec	 mov	 DWORD PTR _ddsd$[ebp+104], eax

; 2117 : 		ddsd.dwMipMapCount = number_of_mipmaps;

  000ff	8b 45 14	 mov	 eax, DWORD PTR _number_of_mipmaps$[ebp]
  00102	89 45 9c	 mov	 DWORD PTR _ddsd$[ebp+24], eax
$LN2@create_tex:

; 2118 : 	}
; 2119 : 
; 2120 : 	ddsd.ddsCaps.dwCaps2 = DDSCAPS2_HINTSTATIC | DDSCAPS2_D3DTEXTUREMANAGE;

  00105	c7 45 f0 08 00
	02 00		 mov	 DWORD PTR _ddsd$[ebp+108], 131080 ; 00020008H

; 2121 : 	ddsd.ddsCaps.dwCaps3 = 0;

  0010c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+112], 0

; 2122 : 	ddsd.ddsCaps.dwCaps4 = 0;

  00113	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+116], 0

; 2123 : 
; 2124 : #if ( ALLOW_TEXTURE_CREATION )
; 2125 : 	{
; 2126 : 		f3d_surface_create ( &ddsd, &texture->surface );

  0011a	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]
  0011d	83 c0 18	 add	 eax, 24			; 00000018H
  00120	50		 push	 eax
  00121	8d 4d 84	 lea	 ecx, DWORD PTR _ddsd$[ebp]
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 ?f3d_surface_create@@YGHPAU_DDSURFACEDESC2@@PAPAUIDirectDrawSurface7@@@Z ; f3d_surface_create

; 2127 : 
; 2128 : 		//
; 2129 : 		// Get the surface description to check the texture
; 2130 : 		//
; 2131 : 
; 2132 : 		f3d_surface_description ( texture->surface, &ddsd );

  0012a	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0012d	50		 push	 eax
  0012e	8b 4d 80	 mov	 ecx, DWORD PTR _texture$[ebp]
  00131	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00134	52		 push	 edx
  00135	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 2133 : 
; 2134 : 		//
; 2135 : 		//
; 2136 : 		//
; 2137 : 
; 2138 : 		if ( ( d3d_mipmap_textures ) && ( number_of_mipmaps > 1 ) )

  0013a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_mipmap_textures@@3HA, 0 ; d3d_mipmap_textures
  00141	74 1b		 je	 SHORT $LN3@create_tex
  00143	83 7d 14 01	 cmp	 DWORD PTR _number_of_mipmaps$[ebp], 1
  00147	7e 15		 jle	 SHORT $LN3@create_tex

; 2139 : 		{
; 2140 : 
; 2141 : 			if ( ddsd.dwMipMapCount != number_of_mipmaps )

  00149	8b 45 9c	 mov	 eax, DWORD PTR _ddsd$[ebp+24]
  0014c	3b 45 14	 cmp	 eax, DWORD PTR _number_of_mipmaps$[ebp]
  0014f	74 0d		 je	 SHORT $LN3@create_tex

; 2142 : 			{
; 2143 : 
; 2144 : 				debug_log ( "CREATED TEXTURE WITH INCORRECT NUMBER OF MIPMAPS!" );

  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@GAJKCHBP@CREATED?5TEXTURE?5WITH?5INCORRECT?5@
  00156	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0015b	83 c4 04	 add	 esp, 4
$LN3@create_tex:

; 2145 : 			}
; 2146 : 		}
; 2147 : 
; 2148 : 		//
; 2149 : 		// Attach the palette now ( if necessary )
; 2150 : 		//
; 2151 : 
; 2152 : 		if ( texture_paletted )

  0015e	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR _texture_paletted$[ebp], 0
  00165	74 1b		 je	 SHORT $LN5@create_tex

; 2153 : 		{
; 2154 : 			f3d_surface_palette ( texture->surface, texture_palette );

  00167	8b 45 18	 mov	 eax, DWORD PTR _texture_palette$[ebp]
  0016a	50		 push	 eax
  0016b	8b 4d 80	 mov	 ecx, DWORD PTR _texture$[ebp]
  0016e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00171	52		 push	 edx
  00172	e8 00 00 00 00	 call	 ?f3d_surface_palette@@YGXPAUIDirectDrawSurface7@@PAUIDirectDrawPalette@@@Z ; f3d_surface_palette

; 2155 : 			texture->palette = texture_palette;

  00177	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]
  0017a	8b 4d 18	 mov	 ecx, DWORD PTR _texture_palette$[ebp]
  0017d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2156 : 		}
; 2157 : 		else

  00180	eb 0a		 jmp	 SHORT $LN6@create_tex
$LN5@create_tex:

; 2158 : 		{
; 2159 : 
; 2160 : 			texture->palette = NULL;

  00182	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]
  00185	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN6@create_tex:

; 2161 : 		}
; 2162 : 	}
; 2163 : #endif
; 2164 : 
; 2165 : 	texture->used = TRUE;

  0018c	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]
  0018f	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00193	66 83 c9 02	 or	 cx, 2
  00197	8b 55 80	 mov	 edx, DWORD PTR _texture$[ebp]
  0019a	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx

; 2166 : 	texture->colour_table = texture_colour_table;

  0019e	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]
  001a1	8b 4d 1c	 mov	 ecx, DWORD PTR _texture_colour_table$[ebp]
  001a4	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2167 : 	texture->clone_screen = FALSE;

  001a7	b8 f7 ff 00 00	 mov	 eax, 65527		; 0000fff7H
  001ac	8b 4d 80	 mov	 ecx, DWORD PTR _texture$[ebp]
  001af	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  001b3	8b 55 80	 mov	 edx, DWORD PTR _texture$[ebp]
  001b6	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 2168 : 	texture->do_not_destroy = TRUE;

  001ba	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]
  001bd	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  001c1	66 83 c9 40	 or	 cx, 64			; 00000040H
  001c5	8b 55 80	 mov	 edx, DWORD PTR _texture$[ebp]
  001c8	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx

; 2169 : 
; 2170 : 	return ( texture );

  001cc	8b 45 80	 mov	 eax, DWORD PTR _texture$[ebp]

; 2171 : }

  001cf	5f		 pop	 edi
  001d0	5e		 pop	 esi
  001d1	5b		 pop	 ebx
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c2 18 00	 ret	 24			; 00000018H
?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z ENDP ; create_texture_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?get_system_texture_index@@YGHPBD@Z
_TEXT	SEGMENT
_camo$ = -280						; size = 4
_offset$ = -276						; size = 4
_real_name$ = -272					; size = 256
_length$ = -16						; size = 4
_entry$ = -12						; size = 4
_hash_index$ = -8					; size = 4
_hash$ = -4						; size = 4
_name$ = 8						; size = 4
?get_system_texture_index@@YGHPBD@Z PROC		; get_system_texture_index, COMDAT

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 469  : 	int
; 470  : 		hash,
; 471  : 		hash_index;
; 472  : 
; 473  : 	texture_name_hash_entry
; 474  : 		*entry;
; 475  : 	int
; 476  : 		length = strlen ( name );

  0000c	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 _strlen
  00015	83 c4 04	 add	 esp, 4
  00018	89 45 f0	 mov	 DWORD PTR _length$[ebp], eax

; 477  : 	char
; 478  : 		real_name[256];
; 479  : 	int
; 480  : 		offset;
; 481  : 	int
; 482  : 		camo;
; 483  : 
; 484  : 	memcpy ( real_name, name, length + 1 );

  0001b	8b 45 f0	 mov	 eax, DWORD PTR _length$[ebp]
  0001e	83 c0 01	 add	 eax, 1
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00025	51		 push	 ecx
  00026	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _real_name$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 _memcpy
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 485  : 	strupr ( real_name );

  00035	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _real_name$[ebp]
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strupr
  00042	83 c4 04	 add	 esp, 4

; 486  : 
; 487  : 	camo = 0;

  00045	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _camo$[ebp], 0

; 488  : 	offset = length - TEXTSUFFIX_SIZE;

  0004f	8b 45 f0	 mov	 eax, DWORD PTR _length$[ebp]
  00052	83 e8 02	 sub	 eax, 2
  00055	89 85 ec fe ff
	ff		 mov	 DWORD PTR _offset$[ebp], eax

; 489  : 	if ( offset > 0 && !memcmp ( real_name + offset, TEXTSUFFIX_DESERT, TEXTSUFFIX_SIZE ) )

  0005b	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _offset$[ebp], 0
  00062	7e 39		 jle	 SHORT $LN5@get_system
  00064	6a 02		 push	 2
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_02KEDOHJFP@?9D@
  0006b	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _offset$[ebp]
  00071	8d 8c 05 f0 fe
	ff ff		 lea	 ecx, DWORD PTR _real_name$[ebp+eax]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 _memcmp
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	85 c0		 test	 eax, eax
  00083	75 18		 jne	 SHORT $LN5@get_system

; 490  : 	{
; 491  : 		real_name[offset] = 0;

  00085	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _offset$[ebp]
  0008b	c6 84 05 f0 fe
	ff ff 00	 mov	 BYTE PTR _real_name$[ebp+eax], 0

; 492  : 		camo = 1;

  00093	c7 85 e8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _camo$[ebp], 1
$LN5@get_system:

; 493  : 	}
; 494  : 
; 495  : 	hash = get_hash ( real_name );

  0009d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _real_name$[ebp]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?get_hash@@YGIPBD@Z	; get_hash
  000a9	89 45 fc	 mov	 DWORD PTR _hash$[ebp], eax

; 496  : 	hash_index = hash & 0xff;

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _hash$[ebp]
  000af	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000b4	89 45 f8	 mov	 DWORD PTR _hash_index$[ebp], eax

; 497  : 
; 498  : 	
; 499  : 	for ( entry = system_texture_name_hash_table[hash_index]; entry; entry = entry->succ )

  000b7	8b 45 f8	 mov	 eax, DWORD PTR _hash_index$[ebp]
  000ba	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_texture_name_hash_table@@3PAPAUTEXTURE_NAME_HASH_ENTRY@@A[eax*4]
  000c1	89 4d f4	 mov	 DWORD PTR _entry$[ebp], ecx
  000c4	eb 09		 jmp	 SHORT $LN4@get_system
$LN2@get_system:
  000c6	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  000c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000cc	89 4d f4	 mov	 DWORD PTR _entry$[ebp], ecx
$LN4@get_system:
  000cf	83 7d f4 00	 cmp	 DWORD PTR _entry$[ebp], 0
  000d3	74 54		 je	 SHORT $LN3@get_system

; 500  : 	{
; 501  : 		if ( entry->hash == hash &&
; 502  : 			!strcmp ( system_texture_names[entry->texture_index], real_name ) &&

  000d5	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  000d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000da	3b 4d fc	 cmp	 ecx, DWORD PTR _hash$[ebp]
  000dd	75 48		 jne	 SHORT $LN6@get_system
  000df	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _real_name$[ebp]
  000e5	50		 push	 eax
  000e6	8b 4d f4	 mov	 ecx, DWORD PTR _entry$[ebp]
  000e9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ec	c1 e2 07	 shl	 edx, 7
  000ef	81 c2 00 00 00
	00		 add	 edx, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  000f5	52		 push	 edx
  000f6	e8 00 00 00 00	 call	 _strcmp
  000fb	83 c4 08	 add	 esp, 8
  000fe	85 c0		 test	 eax, eax
  00100	75 25		 jne	 SHORT $LN6@get_system
  00102	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  00105	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00108	66 8b 14 cd 00
	00 00 00	 mov	 dx, WORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[ecx*8]
  00110	66 c1 ea 07	 shr	 dx, 7
  00114	66 83 e2 01	 and	 dx, 1
  00118	0f b7 c2	 movzx	 eax, dx
  0011b	85 c0		 test	 eax, eax
  0011d	75 08		 jne	 SHORT $LN6@get_system

; 503  : 			!system_texture_info[entry->texture_index].flags.camoflage_texture )
; 504  : 		{
; 505  : 			return ( entry->texture_index );

  0011f	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  00122	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00125	eb 05		 jmp	 SHORT $LN1@get_system
$LN6@get_system:

; 506  : 		}
; 507  : 	}

  00127	eb 9d		 jmp	 SHORT $LN2@get_system
$LN3@get_system:

; 508  : 
; 509  : 	return ( -1 );

  00129	83 c8 ff	 or	 eax, -1
$LN1@get_system:

; 510  : }

  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 04 00	 ret	 4
?get_system_texture_index@@YGHPBD@Z ENDP		; get_system_texture_index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?load_texturemap_data@@YGHPBD@Z
_TEXT	SEGMENT
tv511 = -724						; size = 4
tv475 = -724						; size = 4
tv417 = -724						; size = 4
tv394 = -724						; size = 4
tv320 = -724						; size = 4
tv285 = -724						; size = 4
tv232 = -724						; size = 4
tv214 = -724						; size = 4
_flags$1 = -592						; size = 4
_this_texture$2 = -588					; size = 4
_value$3 = -584						; size = 4
_number_of_mipmaps$4 = -580				; size = 4
_length$5 = -576					; size = 4
_temp$6 = -572						; size = 4
_palette_index$7 = -568					; size = 4
_flags$8 = -564						; size = 4
_this_texture$9 = -560					; size = 4
_value$10 = -556					; size = 4
_number_of_mipmaps$11 = -552				; size = 4
_length$12 = -548					; size = 4
_temp$13 = -544						; size = 4
_temp$14 = -540						; size = 4
_filename$ = -536					; size = 512
_fp$ = -24						; size = 4
_texture_format_type$ = -20				; size = 4
_type$ = -16						; size = 4
_height$ = -12						; size = 4
_width$ = -8						; size = 4
_count$ = -4						; size = 4
_path$ = 8						; size = 4
?load_texturemap_data@@YGHPBD@Z PROC			; load_texturemap_data, COMDAT

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 02 00
	00		 sub	 esp, 724		; 000002d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 518  : 
; 519  : 	int
; 520  : 		count;
; 521  : 
; 522  : 	int
; 523  : 		width,
; 524  : 		height,
; 525  : 		type;
; 526  : 
; 527  : 	texture_map_types
; 528  : 		texture_format_type;
; 529  : 
; 530  : 	FILE
; 531  : 		*fp;
; 532  : 
; 533  : 	char
; 534  : 		filename[512];
; 535  : 
; 536  : 	number_of_system_texture_camoflages = 0;

  0000c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_system_texture_camoflages@@3HA, 0 ; number_of_system_texture_camoflages

; 537  : 
; 538  : 	//
; 539  : 	// Mark off the system texture slots as not used / locked
; 540  : 	//
; 541  : 
; 542  : 	memset ( system_textures, 0, sizeof ( system_textures ) );

  00016	68 00 80 00 00	 push	 32768			; 00008000H
  0001b	6a 00		 push	 0
  0001d	68 00 00 00 00	 push	 OFFSET ?system_textures@@3PAPAUSCREEN@@A ; system_textures
  00022	e8 00 00 00 00	 call	 _memset
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 543  : 
; 544  : 	//
; 545  : 	// Reset texture hash table
; 546  : 	//
; 547  : 
; 548  : 	memset ( system_texture_name_hash_table, 0, ( sizeof ( texture_name_hash_entry * ) * 256 ) );

  0002a	68 00 04 00 00	 push	 1024			; 00000400H
  0002f	6a 00		 push	 0
  00031	68 00 00 00 00	 push	 OFFSET ?system_texture_name_hash_table@@3PAPAUTEXTURE_NAME_HASH_ENTRY@@A ; system_texture_name_hash_table
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 549  : 
; 550  : 	//
; 551  : 	// Load the texture data
; 552  : 	//
; 553  : 
; 554  : 	if ( d3d_paletted_textures_supported )

  0003e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_paletted_textures_supported@@3HA, 0 ; d3d_paletted_textures_supported
  00045	74 1a		 je	 SHORT $LN44@load_textu

; 555  : 	{
; 556  : 
; 557  : 		sprintf ( filename, "%s\\textures.pal", path );

  00047	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0004a	50		 push	 eax
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IAOINLOF@?$CFs?2textures?4pal@
  00050	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 _sprintf
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 558  : 	}
; 559  : 	else

  0005f	eb 18		 jmp	 SHORT $LN45@load_textu
$LN44@load_textu:

; 560  : 	{
; 561  : 
; 562  : 		sprintf ( filename, "%s\\textures.bin", path );

  00061	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00064	50		 push	 eax
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EGNNHHML@?$CFs?2textures?4bin@
  0006a	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 _sprintf
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN45@load_textu:

; 563  : 	}
; 564  : 
; 565  : 	fp = safe_fopen ( filename, "rb" );

  00079	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0007e	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  0008a	89 45 e8	 mov	 DWORD PTR _fp$[ebp], eax

; 566  : 
; 567  : 	//
; 568  : 	// First integer is the number of palettes the textures use in total.
; 569  : 	//
; 570  : 
; 571  : 	fread ( &number_of_system_texture_palettes, 4, 1, fp );

  0008d	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00090	50		 push	 eax
  00091	6a 01		 push	 1
  00093	6a 04		 push	 4
  00095	68 00 00 00 00	 push	 OFFSET ?number_of_system_texture_palettes@@3HA ; number_of_system_texture_palettes
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000a0	83 c4 10	 add	 esp, 16			; 00000010H

; 572  : 
; 573  : 	for ( count = 0; count < number_of_system_texture_palettes; count++ )

  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000aa	eb 09		 jmp	 SHORT $LN4@load_textu
$LN2@load_textu:
  000ac	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@load_textu:
  000b5	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000b8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_texture_palettes@@3HA ; number_of_system_texture_palettes
  000be	7d 60		 jge	 SHORT $LN3@load_textu

; 574  : 	{
; 575  : 
; 576  : 		int
; 577  : 			temp;
; 578  : 
; 579  : 		fread ( system_texture_colour_tables[count], sizeof ( PALETTEENTRY ), 256, fp );

  000c0	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  000c3	50		 push	 eax
  000c4	68 00 01 00 00	 push	 256			; 00000100H
  000c9	6a 04		 push	 4
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  000ce	c1 e1 0a	 shl	 ecx, 10			; 0000000aH
  000d1	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A ; system_texture_colour_tables
  000d7	51		 push	 ecx
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000de	83 c4 10	 add	 esp, 16			; 00000010H

; 580  : 
; 581  : 		for ( temp = 0; temp < 256; temp++ )

  000e1	c7 85 e4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _temp$14[ebp], 0
  000eb	eb 0f		 jmp	 SHORT $LN7@load_textu
$LN5@load_textu:
  000ed	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _temp$14[ebp]
  000f3	83 c0 01	 add	 eax, 1
  000f6	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _temp$14[ebp], eax
$LN7@load_textu:
  000fc	81 bd e4 fd ff
	ff 00 01 00 00	 cmp	 DWORD PTR _temp$14[ebp], 256 ; 00000100H
  00106	7d 16		 jge	 SHORT $LN6@load_textu

; 582  : 		{
; 583  : 
; 584  : 			system_texture_colour_tables[count][temp].peFlags = D3DPAL_READONLY | PC_NOCOLLAPSE;

  00108	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0010b	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  0010e	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR _temp$14[ebp]
  00114	c6 84 88 03 00
	00 00 44	 mov	 BYTE PTR ?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A[eax+ecx*4+3], 68 ; 00000044H

; 585  : 		}

  0011c	eb cf		 jmp	 SHORT $LN5@load_textu
$LN6@load_textu:

; 586  : 	}

  0011e	eb 8c		 jmp	 SHORT $LN2@load_textu
$LN3@load_textu:

; 587  : 
; 588  : 	//
; 589  : 	// Now create the direct draw palette interfaces for the palettes
; 590  : 	//
; 591  : 
; 592  : 	create_internal_texture_palettes ();

  00120	e8 00 00 00 00	 call	 ?create_internal_texture_palettes@@YGXXZ ; create_internal_texture_palettes

; 593  : 
; 594  : 	fread ( &number_of_system_textures, 4, 1, fp );

  00125	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00128	50		 push	 eax
  00129	6a 01		 push	 1
  0012b	6a 04		 push	 4
  0012d	68 00 00 00 00	 push	 OFFSET ?number_of_system_textures@@3HA ; number_of_system_textures
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00138	83 c4 10	 add	 esp, 16			; 00000010H

; 595  : 	ASSERT ( number_of_system_textures == TEXTURE_INDEX_LAST_DEFAULT_INDEX + 1 );

  0013b	81 3d 00 00 00
	00 08 09 00 00	 cmp	 DWORD PTR ?number_of_system_textures@@3HA, 2312 ; number_of_system_textures, 00000908H
  00145	74 18		 je	 SHORT $LN46@load_textu
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??load_texturemap_data@@YGHPBD@Z@4JA
  0014c	83 c0 4e	 add	 eax, 78			; 0000004eH
  0014f	50		 push	 eax
  00150	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LJBBKFJP@c?3?2users?2nhv90?2projects?2eech?2mo@
  00155	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@OFFIHPLK@number_of_system_textures?5?$DN?$DN?5TE@
  0015a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN46@load_textu:

; 596  : 
; 597  : 	debug_log ( "Reading in %d textures", number_of_system_textures );

  0015f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00164	50		 push	 eax
  00165	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NAJOOMIA@Reading?5in?5?$CFd?5textures@
  0016a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0016f	83 c4 08	 add	 esp, 8

; 598  : 
; 599  : 	if ( d3d_paletted_textures_supported )

  00172	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_paletted_textures_supported@@3HA, 0 ; d3d_paletted_textures_supported
  00179	0f 84 5b 05 00
	00		 je	 $LN47@load_textu

; 600  : 	{
; 601  : 
; 602  : 		for ( count = 0; count < number_of_system_textures; count++ )

  0017f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00186	eb 09		 jmp	 SHORT $LN10@load_textu
$LN8@load_textu:
  00188	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0018b	83 c0 01	 add	 eax, 1
  0018e	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN10@load_textu:
  00191	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00194	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  0019a	0f 8d 35 05 00
	00		 jge	 $LN9@load_textu

; 603  : 		{
; 604  : 
; 605  : 			int
; 606  : 				temp,
; 607  : 				length,
; 608  : 				number_of_mipmaps;
; 609  : 
; 610  : 			unsigned int
; 611  : 				value;
; 612  : 
; 613  : 			screen
; 614  : 				*this_texture;
; 615  : 
; 616  : 			texture_flags
; 617  : 				flags;
; 618  : 
; 619  : 			fread ( &value, sizeof ( unsigned int ), 1, fp );

  001a0	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  001a3	50		 push	 eax
  001a4	6a 01		 push	 1
  001a6	6a 04		 push	 4
  001a8	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _value$10[ebp]
  001ae	51		 push	 ecx
  001af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  001b5	83 c4 10	 add	 esp, 16			; 00000010H

; 620  : 
; 621  : 			flags.flags = value;

  001b8	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _value$10[ebp]
  001be	89 85 cc fd ff
	ff		 mov	 DWORD PTR _flags$8[ebp], eax

; 622  : 
; 623  : 			system_texture_info[count].flags.flags = flags.flags;

  001c4	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001c7	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _flags$8[ebp]
  001cd	89 0c c5 00 00
	00 00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8], ecx

; 624  : 
; 625  : 			system_texture_info[count].texture_screen = NULL;

  001d4	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001d7	c7 04 c5 04 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4], 0

; 626  : 
; 627  : 			memset ( system_texture_names[count], 0, 128 );

  001e2	68 80 00 00 00	 push	 128			; 00000080H
  001e7	6a 00		 push	 0
  001e9	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001ec	c1 e0 07	 shl	 eax, 7
  001ef	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 _memset
  001fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 628  : 
; 629  : 			fread ( &length, sizeof ( length ), 1, fp );

  001fd	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00200	50		 push	 eax
  00201	6a 01		 push	 1
  00203	6a 04		 push	 4
  00205	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _length$12[ebp]
  0020b	51		 push	 ecx
  0020c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00212	83 c4 10	 add	 esp, 16			; 00000010H

; 630  : 
; 631  : 			fread ( system_texture_names[count], length, 1, fp );

  00215	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00218	50		 push	 eax
  00219	6a 01		 push	 1
  0021b	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _length$12[ebp]
  00221	51		 push	 ecx
  00222	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00225	c1 e2 07	 shl	 edx, 7
  00228	81 c2 00 00 00
	00		 add	 edx, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  0022e	52		 push	 edx
  0022f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00235	83 c4 10	 add	 esp, 16			; 00000010H

; 632  : 
; 633  : 			strupr ( system_texture_names[count] );

  00238	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0023b	c1 e0 07	 shl	 eax, 7
  0023e	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00243	50		 push	 eax
  00244	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strupr
  0024a	83 c4 04	 add	 esp, 4

; 634  : 
; 635  : 			add_texture_to_name_hash(count);

  0024d	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?add_texture_to_name_hash@@YGXI@Z ; add_texture_to_name_hash

; 636  : 
; 637  : 			if ( flags.reserved_texture )

  00256	66 8b 85 cc fd
	ff ff		 mov	 ax, WORD PTR _flags$8[ebp]
  0025d	66 83 e0 01	 and	 ax, 1
  00261	0f b7 c8	 movzx	 ecx, ax
  00264	85 c9		 test	 ecx, ecx
  00266	74 13		 je	 SHORT $LN49@load_textu

; 638  : 			{
; 639  : 
; 640  : 				//
; 641  : 				// Reserve this texture slot
; 642  : 				//
; 643  : 
; 644  : 				system_textures[count] = NULL;

  00268	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0026b	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], 0

; 645  : 			}
; 646  : 			else

  00276	e9 55 04 00 00	 jmp	 $LN50@load_textu
$LN49@load_textu:

; 647  : 			{
; 648  : 
; 649  : 				int
; 650  : 					palette_index;
; 651  : 
; 652  : 				fread ( &type, sizeof ( type ), 1, fp );

  0027b	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  0027e	50		 push	 eax
  0027f	6a 01		 push	 1
  00281	6a 04		 push	 4
  00283	8d 4d f0	 lea	 ecx, DWORD PTR _type$[ebp]
  00286	51		 push	 ecx
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0028d	83 c4 10	 add	 esp, 16			; 00000010H

; 653  : 				fread ( &number_of_mipmaps, sizeof ( int ), 1, fp );

  00290	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00293	50		 push	 eax
  00294	6a 01		 push	 1
  00296	6a 04		 push	 4
  00298	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _number_of_mipmaps$11[ebp]
  0029e	51		 push	 ecx
  0029f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  002a5	83 c4 10	 add	 esp, 16			; 00000010H

; 654  : 				fread ( &width, sizeof ( int ), 1, fp );

  002a8	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  002ab	50		 push	 eax
  002ac	6a 01		 push	 1
  002ae	6a 04		 push	 4
  002b0	8d 4d f8	 lea	 ecx, DWORD PTR _width$[ebp]
  002b3	51		 push	 ecx
  002b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  002ba	83 c4 10	 add	 esp, 16			; 00000010H

; 655  : 				fread ( &height, sizeof ( int ), 1, fp );

  002bd	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  002c0	50		 push	 eax
  002c1	6a 01		 push	 1
  002c3	6a 04		 push	 4
  002c5	8d 4d f4	 lea	 ecx, DWORD PTR _height$[ebp]
  002c8	51		 push	 ecx
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  002cf	83 c4 10	 add	 esp, 16			; 00000010H

; 656  : 				fread ( &palette_index, sizeof ( int ), 1, fp );

  002d2	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  002d5	50		 push	 eax
  002d6	6a 01		 push	 1
  002d8	6a 04		 push	 4
  002da	8d 8d c8 fd ff
	ff		 lea	 ecx, DWORD PTR _palette_index$7[ebp]
  002e0	51		 push	 ecx
  002e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  002e7	83 c4 10	 add	 esp, 16			; 00000010H

; 657  : 
; 658  : 				texture_format_type = (texture_map_types) type;

  002ea	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  002ed	89 45 ec	 mov	 DWORD PTR _texture_format_type$[ebp], eax

; 659  : 
; 660  : 				ASSERT ( width <= MAX_TEXTURE_WIDTH );

  002f0	81 7d f8 00 08
	00 00		 cmp	 DWORD PTR _width$[ebp], 2048 ; 00000800H
  002f7	7e 1a		 jle	 SHORT $LN51@load_textu
  002f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??load_texturemap_data@@YGHPBD@Z@4JA
  002fe	05 8f 00 00 00	 add	 eax, 143		; 0000008fH
  00303	50		 push	 eax
  00304	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LJBBKFJP@c?3?2users?2nhv90?2projects?2eech?2mo@
  00309	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JELHJEEM@width?5?$DM?$DN?5MAX_TEXTURE_WIDTH@
  0030e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN51@load_textu:

; 661  : 				ASSERT ( height <= MAX_TEXTURE_HEIGHT );

  00313	81 7d f4 00 08
	00 00		 cmp	 DWORD PTR _height$[ebp], 2048 ; 00000800H
  0031a	7e 1a		 jle	 SHORT $LN52@load_textu
  0031c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??load_texturemap_data@@YGHPBD@Z@4JA
  00321	05 90 00 00 00	 add	 eax, 144		; 00000090H
  00326	50		 push	 eax
  00327	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LJBBKFJP@c?3?2users?2nhv90?2projects?2eech?2mo@
  0032c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NJEKICPO@height?5?$DM?$DN?5MAX_TEXTURE_HEIGHT@
  00331	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN52@load_textu:

; 662  : 
; 663  : 				//
; 664  : 				// If we compress the textures, skip over the first level texture
; 665  : 				//
; 666  : 
; 667  : 				if ( compress_system_textures )

  00336	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?compress_system_textures@@3HA, 0 ; compress_system_textures
  0033d	0f 84 83 00 00
	00		 je	 $LN13@load_textu

; 668  : 				{
; 669  : 
; 670  : 					width >>= 1;

  00343	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00346	d1 f8		 sar	 eax, 1
  00348	89 45 f8	 mov	 DWORD PTR _width$[ebp], eax

; 671  : 					height >>= 1;

  0034b	8b 45 f4	 mov	 eax, DWORD PTR _height$[ebp]
  0034e	d1 f8		 sar	 eax, 1
  00350	89 45 f4	 mov	 DWORD PTR _height$[ebp], eax

; 672  : 					number_of_mipmaps--;

  00353	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _number_of_mipmaps$11[ebp]
  00359	83 e8 01	 sub	 eax, 1
  0035c	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _number_of_mipmaps$11[ebp], eax

; 673  : 
; 674  : 					switch ( type )

  00362	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  00365	89 85 2c fd ff
	ff		 mov	 DWORD PTR tv214[ebp], eax
  0036b	8b 8d 2c fd ff
	ff		 mov	 ecx, DWORD PTR tv214[ebp]
  00371	83 e9 01	 sub	 ecx, 1
  00374	89 8d 2c fd ff
	ff		 mov	 DWORD PTR tv214[ebp], ecx
  0037a	83 bd 2c fd ff
	ff 04		 cmp	 DWORD PTR tv214[ebp], 4
  00381	77 43		 ja	 SHORT $LN13@load_textu
  00383	8b 95 2c fd ff
	ff		 mov	 edx, DWORD PTR tv214[ebp]
  00389	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN92@load_textu[edx*4]
$LN54@load_textu:

; 675  : 					{
; 676  : 
; 677  : 						case TEXTURE_TYPE_NOALPHA:
; 678  : 						case TEXTURE_TYPE_NOALPHA_NOPALETTE:
; 679  : 						case TEXTURE_TYPE_SINGLEALPHA:
; 680  : 						{
; 681  : 
; 682  : 							fseek ( fp, ( width * height * 4 ), SEEK_CUR );

  00390	6a 01		 push	 1
  00392	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00395	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  00399	c1 e0 02	 shl	 eax, 2
  0039c	50		 push	 eax
  0039d	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  003a0	51		 push	 ecx
  003a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  003a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 683  : 
; 684  : 							break;

  003aa	eb 1a		 jmp	 SHORT $LN13@load_textu
$LN55@load_textu:

; 685  : 						}
; 686  : 
; 687  : 						case TEXTURE_TYPE_MULTIPLEALPHA:
; 688  : 						{
; 689  : 
; 690  : 							fseek ( fp, ( width * height * 8 ), SEEK_CUR );

  003ac	6a 01		 push	 1
  003ae	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  003b1	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  003b5	c1 e0 03	 shl	 eax, 3
  003b8	50		 push	 eax
  003b9	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  003bc	51		 push	 ecx
  003bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  003c3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@load_textu:

; 691  : 
; 692  : 							break;
; 693  : 						}
; 694  : 					}
; 695  : 				}
; 696  : 
; 697  : 				while ( ( width > d3d_maximum_texture_width ) || ( height > d3d_maximum_texture_height ) )

  003c6	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  003c9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?d3d_maximum_texture_width@@3HA ; d3d_maximum_texture_width
  003cf	7f 0f		 jg	 SHORT $LN56@load_textu
  003d1	8b 45 f4	 mov	 eax, DWORD PTR _height$[ebp]
  003d4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?d3d_maximum_texture_height@@3HA ; d3d_maximum_texture_height
  003da	0f 8e 88 00 00
	00		 jle	 $LN14@load_textu
$LN56@load_textu:

; 698  : 				{
; 699  : 
; 700  : 					width >>= 1;

  003e0	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  003e3	d1 f8		 sar	 eax, 1
  003e5	89 45 f8	 mov	 DWORD PTR _width$[ebp], eax

; 701  : 					height >>= 1;

  003e8	8b 45 f4	 mov	 eax, DWORD PTR _height$[ebp]
  003eb	d1 f8		 sar	 eax, 1
  003ed	89 45 f4	 mov	 DWORD PTR _height$[ebp], eax

; 702  : 					number_of_mipmaps--;

  003f0	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _number_of_mipmaps$11[ebp]
  003f6	83 e8 01	 sub	 eax, 1
  003f9	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _number_of_mipmaps$11[ebp], eax

; 703  : 
; 704  : 					switch ( type )

  003ff	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  00402	89 85 2c fd ff
	ff		 mov	 DWORD PTR tv232[ebp], eax
  00408	8b 8d 2c fd ff
	ff		 mov	 ecx, DWORD PTR tv232[ebp]
  0040e	83 e9 01	 sub	 ecx, 1
  00411	89 8d 2c fd ff
	ff		 mov	 DWORD PTR tv232[ebp], ecx
  00417	83 bd 2c fd ff
	ff 04		 cmp	 DWORD PTR tv232[ebp], 4
  0041e	77 43		 ja	 SHORT $LN15@load_textu
  00420	8b 95 2c fd ff
	ff		 mov	 edx, DWORD PTR tv232[ebp]
  00426	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN93@load_textu[edx*4]
$LN57@load_textu:

; 705  : 					{
; 706  : 
; 707  : 						case TEXTURE_TYPE_NOALPHA:
; 708  : 						case TEXTURE_TYPE_NOALPHA_NOPALETTE:
; 709  : 						case TEXTURE_TYPE_SINGLEALPHA:
; 710  : 						{
; 711  : 
; 712  : 							fseek ( fp, ( width * height * 4 ), SEEK_CUR );

  0042d	6a 01		 push	 1
  0042f	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00432	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  00436	c1 e0 02	 shl	 eax, 2
  00439	50		 push	 eax
  0043a	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  0043d	51		 push	 ecx
  0043e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00444	83 c4 0c	 add	 esp, 12			; 0000000cH

; 713  : 
; 714  : 							break;

  00447	eb 1a		 jmp	 SHORT $LN15@load_textu
$LN58@load_textu:

; 715  : 						}
; 716  : 
; 717  : 						case TEXTURE_TYPE_MULTIPLEALPHA:
; 718  : 						{
; 719  : 
; 720  : 							fseek ( fp, ( width * height * 8 ), SEEK_CUR );

  00449	6a 01		 push	 1
  0044b	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  0044e	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  00452	c1 e0 03	 shl	 eax, 3
  00455	50		 push	 eax
  00456	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  00459	51		 push	 ecx
  0045a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00460	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@load_textu:

; 721  : 
; 722  : 							break;
; 723  : 						}
; 724  : 					}
; 725  : 				}

  00463	e9 5e ff ff ff	 jmp	 $LN13@load_textu
$LN14@load_textu:

; 726  : 
; 727  : 				if ( ( width != height ) && ( d3d_square_only_textures ) )

  00468	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  0046b	3b 45 f4	 cmp	 eax, DWORD PTR _height$[ebp]
  0046e	74 49		 je	 SHORT $LN59@load_textu
  00470	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_square_only_textures@@3HA, 0 ; d3d_square_only_textures
  00477	74 40		 je	 SHORT $LN59@load_textu

; 728  : 				{
; 729  : 
; 730  : 					//
; 731  : 					// All textures have width >= height
; 732  : 					//
; 733  : 
; 734  : 					this_texture = create_texture_map ( width, width, texture_format_type, number_of_mipmaps + 1,

  00479	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _palette_index$7[ebp]
  0047f	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00482	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A ; system_texture_colour_tables
  00487	50		 push	 eax
  00488	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR _palette_index$7[ebp]
  0048e	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_texture_palettes@@3PAPAUIDirectDrawPalette@@A[ecx*4]
  00495	52		 push	 edx
  00496	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _number_of_mipmaps$11[ebp]
  0049c	83 c0 01	 add	 eax, 1
  0049f	50		 push	 eax
  004a0	8b 4d ec	 mov	 ecx, DWORD PTR _texture_format_type$[ebp]
  004a3	51		 push	 ecx
  004a4	8b 55 f8	 mov	 edx, DWORD PTR _width$[ebp]
  004a7	52		 push	 edx
  004a8	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  004ab	50		 push	 eax
  004ac	e8 00 00 00 00	 call	 ?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z ; create_texture_map
  004b1	89 85 d0 fd ff
	ff		 mov	 DWORD PTR _this_texture$9[ebp], eax

; 735  : 																		system_texture_palettes[palette_index], system_texture_colour_tables[palette_index] );
; 736  : 				}
; 737  : 				else

  004b7	eb 3e		 jmp	 SHORT $LN60@load_textu
$LN59@load_textu:

; 738  : 				{
; 739  : 
; 740  : 					this_texture = create_texture_map ( width, height, texture_format_type, number_of_mipmaps + 1,

  004b9	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _palette_index$7[ebp]
  004bf	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  004c2	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A ; system_texture_colour_tables
  004c7	50		 push	 eax
  004c8	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR _palette_index$7[ebp]
  004ce	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_texture_palettes@@3PAPAUIDirectDrawPalette@@A[ecx*4]
  004d5	52		 push	 edx
  004d6	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _number_of_mipmaps$11[ebp]
  004dc	83 c0 01	 add	 eax, 1
  004df	50		 push	 eax
  004e0	8b 4d ec	 mov	 ecx, DWORD PTR _texture_format_type$[ebp]
  004e3	51		 push	 ecx
  004e4	8b 55 f4	 mov	 edx, DWORD PTR _height$[ebp]
  004e7	52		 push	 edx
  004e8	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  004eb	50		 push	 eax
  004ec	e8 00 00 00 00	 call	 ?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z ; create_texture_map
  004f1	89 85 d0 fd ff
	ff		 mov	 DWORD PTR _this_texture$9[ebp], eax
$LN60@load_textu:

; 741  : 																		system_texture_palettes[palette_index], system_texture_colour_tables[palette_index] );
; 742  : 				}
; 743  : 
; 744  : 				system_textures[count] = this_texture;

  004f7	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  004fa	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$9[ebp]
  00500	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], ecx

; 745  : 
; 746  : 				system_texture_info[count].texture_screen = this_texture;

  00507	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0050a	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$9[ebp]
  00510	89 0c c5 04 00
	00 00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4], ecx

; 747  : 
; 748  : 				//
; 749  : 				// Now fill the data in
; 750  : 				//
; 751  : 
; 752  : 				for ( temp = 0; temp <= number_of_mipmaps; temp++ )

  00517	c7 85 e0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _temp$13[ebp], 0
  00521	eb 0f		 jmp	 SHORT $LN19@load_textu
$LN17@load_textu:
  00523	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _temp$13[ebp]
  00529	83 c0 01	 add	 eax, 1
  0052c	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _temp$13[ebp], eax
$LN19@load_textu:
  00532	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _temp$13[ebp]
  00538	3b 85 d8 fd ff
	ff		 cmp	 eax, DWORD PTR _number_of_mipmaps$11[ebp]
  0053e	0f 8f 8c 01 00
	00		 jg	 $LN50@load_textu

; 753  : 				{
; 754  : 
; 755  : 
; 756  : 					if ( ( temp == 0 ) || ( d3d_mipmap_textures ) )

  00544	83 bd e0 fd ff
	ff 00		 cmp	 DWORD PTR _temp$13[ebp], 0
  0054b	74 0d		 je	 SHORT $LN20@load_textu
  0054d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_mipmap_textures@@3HA, 0 ; d3d_mipmap_textures
  00554	0f 84 09 01 00
	00		 je	 $LN61@load_textu
$LN20@load_textu:

; 757  : 					{
; 758  : 
; 759  : #if ( ALLOW_TEXTURE_CREATION )
; 760  : 						while ( !lock_texture ( this_texture, temp ) )

  0055a	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _temp$13[ebp]
  00560	50		 push	 eax
  00561	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$9[ebp]
  00567	51		 push	 ecx
  00568	e8 00 00 00 00	 call	 ?lock_texture@@YGHPAUSCREEN@@H@Z ; lock_texture
  0056d	85 c0		 test	 eax, eax
  0056f	75 0a		 jne	 SHORT $LN21@load_textu

; 761  : 						{
; 762  : 
; 763  : 							Sleep ( 100 );

  00571	6a 64		 push	 100			; 00000064H
  00573	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 764  : 						}

  00579	eb df		 jmp	 SHORT $LN20@load_textu
$LN21@load_textu:

; 765  : #endif
; 766  : 
; 767  : 						switch ( type )

  0057b	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  0057e	89 85 2c fd ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00584	83 bd 2c fd ff
	ff 01		 cmp	 DWORD PTR tv285[ebp], 1
  0058b	74 17		 je	 SHORT $LN64@load_textu
  0058d	83 bd 2c fd ff
	ff 02		 cmp	 DWORD PTR tv285[ebp], 2
  00594	74 49		 je	 SHORT $LN65@load_textu
  00596	83 bd 2c fd ff
	ff 03		 cmp	 DWORD PTR tv285[ebp], 3
  0059d	74 7b		 je	 SHORT $LN66@load_textu
  0059f	e9 b1 00 00 00	 jmp	 $LN22@load_textu
$LN64@load_textu:

; 768  : 						{
; 769  : 
; 770  : 							case TEXTURE_TYPE_NOALPHA:
; 771  : 							{
; 772  : 
; 773  : 								fread ( texture_image_data, ( width * height ), 1, fp );

  005a4	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  005a7	50		 push	 eax
  005a8	6a 01		 push	 1
  005aa	8b 4d f8	 mov	 ecx, DWORD PTR _width$[ebp]
  005ad	0f af 4d f4	 imul	 ecx, DWORD PTR _height$[ebp]
  005b1	51		 push	 ecx
  005b2	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  005b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  005bd	83 c4 10	 add	 esp, 16			; 00000010H

; 774  : 
; 775  : #if ( ALLOW_TEXTURE_CREATION )
; 776  : 								convert_no_alpha_texture_map_data ( texture_image_data, width, height, this_texture, fp );

  005c0	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  005c3	50		 push	 eax
  005c4	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$9[ebp]
  005ca	51		 push	 ecx
  005cb	8b 55 f4	 mov	 edx, DWORD PTR _height$[ebp]
  005ce	52		 push	 edx
  005cf	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  005d2	50		 push	 eax
  005d3	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  005d8	e8 00 00 00 00	 call	 ?convert_no_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_no_alpha_texture_map_data

; 777  : #endif
; 778  : 
; 779  : 								break;

  005dd	eb 76		 jmp	 SHORT $LN22@load_textu
$LN65@load_textu:

; 780  : 							}
; 781  : 
; 782  : 							case TEXTURE_TYPE_SINGLEALPHA:
; 783  : 							{
; 784  : 
; 785  : 								fread ( texture_image_data, ( width * height ), 1, fp );

  005df	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  005e2	50		 push	 eax
  005e3	6a 01		 push	 1
  005e5	8b 4d f8	 mov	 ecx, DWORD PTR _width$[ebp]
  005e8	0f af 4d f4	 imul	 ecx, DWORD PTR _height$[ebp]
  005ec	51		 push	 ecx
  005ed	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  005f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  005f8	83 c4 10	 add	 esp, 16			; 00000010H

; 786  : 
; 787  : #if ( ALLOW_TEXTURE_CREATION )
; 788  : 								convert_single_alpha_texture_map_data ( texture_image_data, width, height, this_texture, fp );

  005fb	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  005fe	50		 push	 eax
  005ff	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$9[ebp]
  00605	51		 push	 ecx
  00606	8b 55 f4	 mov	 edx, DWORD PTR _height$[ebp]
  00609	52		 push	 edx
  0060a	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  0060d	50		 push	 eax
  0060e	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  00613	e8 00 00 00 00	 call	 ?convert_single_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_single_alpha_texture_map_data

; 789  : #endif
; 790  : 
; 791  : 								break;

  00618	eb 3b		 jmp	 SHORT $LN22@load_textu
$LN66@load_textu:

; 792  : 							}
; 793  : 
; 794  : 							case TEXTURE_TYPE_MULTIPLEALPHA:
; 795  : 							{
; 796  : 
; 797  : 								fread ( texture_image_data, ( width * height * 2 ), 1, fp );

  0061a	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  0061d	50		 push	 eax
  0061e	6a 01		 push	 1
  00620	8b 4d f8	 mov	 ecx, DWORD PTR _width$[ebp]
  00623	0f af 4d f4	 imul	 ecx, DWORD PTR _height$[ebp]
  00627	d1 e1		 shl	 ecx, 1
  00629	51		 push	 ecx
  0062a	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  0062f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00635	83 c4 10	 add	 esp, 16			; 00000010H

; 798  : 
; 799  : #if ( ALLOW_TEXTURE_CREATION )
; 800  : 								convert_multiple_alpha_texture_map_data ( texture_image_data, width, height, this_texture, fp );

  00638	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  0063b	50		 push	 eax
  0063c	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$9[ebp]
  00642	51		 push	 ecx
  00643	8b 55 f4	 mov	 edx, DWORD PTR _height$[ebp]
  00646	52		 push	 edx
  00647	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  0064a	50		 push	 eax
  0064b	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  00650	e8 00 00 00 00	 call	 ?convert_multiple_alpha_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_multiple_alpha_texture_map_data
$LN22@load_textu:

; 801  : #endif
; 802  : 
; 803  : 								break;
; 804  : 							}
; 805  : 						}
; 806  : 
; 807  : #if ( ALLOW_TEXTURE_CREATION )
; 808  : 						unlock_texture ( this_texture );

  00655	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _this_texture$9[ebp]
  0065b	50		 push	 eax
  0065c	e8 00 00 00 00	 call	 ?unlock_texture@@YGHPAUSCREEN@@@Z ; unlock_texture

; 809  : #endif
; 810  : 					}
; 811  : 					else

  00661	eb 58		 jmp	 SHORT $LN62@load_textu
$LN61@load_textu:

; 812  : 					{
; 813  : 
; 814  : 						//
; 815  : 						// Skip over the mipmap data
; 816  : 						//
; 817  : 
; 818  : 						switch ( type )

  00663	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  00666	89 85 2c fd ff
	ff		 mov	 DWORD PTR tv320[ebp], eax
  0066c	83 bd 2c fd ff
	ff 00		 cmp	 DWORD PTR tv320[ebp], 0
  00673	7e 46		 jle	 SHORT $LN62@load_textu
  00675	83 bd 2c fd ff
	ff 02		 cmp	 DWORD PTR tv320[ebp], 2
  0067c	7e 0b		 jle	 SHORT $LN67@load_textu
  0067e	83 bd 2c fd ff
	ff 03		 cmp	 DWORD PTR tv320[ebp], 3
  00685	74 1b		 je	 SHORT $LN68@load_textu
  00687	eb 32		 jmp	 SHORT $LN62@load_textu
$LN67@load_textu:

; 819  : 						{
; 820  : 
; 821  : 							case TEXTURE_TYPE_NOALPHA:
; 822  : 							case TEXTURE_TYPE_SINGLEALPHA:
; 823  : 							{
; 824  : 
; 825  : 								fseek ( fp, ( width * height ), SEEK_CUR );

  00689	6a 01		 push	 1
  0068b	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  0068e	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  00692	50		 push	 eax
  00693	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  00696	51		 push	 ecx
  00697	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0069d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 826  : 
; 827  : 								break;

  006a0	eb 19		 jmp	 SHORT $LN62@load_textu
$LN68@load_textu:

; 828  : 							}
; 829  : 
; 830  : 							case TEXTURE_TYPE_MULTIPLEALPHA:
; 831  : 							{
; 832  : 
; 833  : 								fseek ( fp, ( width * height * 2 ), SEEK_CUR );

  006a2	6a 01		 push	 1
  006a4	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  006a7	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  006ab	d1 e0		 shl	 eax, 1
  006ad	50		 push	 eax
  006ae	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  006b1	51		 push	 ecx
  006b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  006b8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN62@load_textu:

; 834  : 
; 835  : 								break;
; 836  : 							}
; 837  : 						}
; 838  : 					}
; 839  : 
; 840  : 					width >>= 1;

  006bb	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  006be	d1 f8		 sar	 eax, 1
  006c0	89 45 f8	 mov	 DWORD PTR _width$[ebp], eax

; 841  : 
; 842  : 					height >>= 1;

  006c3	8b 45 f4	 mov	 eax, DWORD PTR _height$[ebp]
  006c6	d1 f8		 sar	 eax, 1
  006c8	89 45 f4	 mov	 DWORD PTR _height$[ebp], eax

; 843  : 				}

  006cb	e9 53 fe ff ff	 jmp	 $LN17@load_textu
$LN50@load_textu:

; 844  : 			}
; 845  : 		}

  006d0	e9 b3 fa ff ff	 jmp	 $LN8@load_textu
$LN9@load_textu:

; 846  : 	}
; 847  : 	else // 24 bit: !d3d_paletted_textures_supported

  006d5	e9 7a 05 00 00	 jmp	 $LN48@load_textu
$LN47@load_textu:

; 848  : 	{
; 849  : 
; 850  : // deleted a chunk here that was commented out
; 851  : 
; 852  : //VJ 24 bit texture loading
; 853  : 		for ( count = 0; count < number_of_system_textures; count++ )

  006da	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  006e1	eb 09		 jmp	 SHORT $LN28@load_textu
$LN26@load_textu:
  006e3	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  006e6	83 c0 01	 add	 eax, 1
  006e9	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN28@load_textu:
  006ec	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  006ef	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  006f5	0f 8d 59 05 00
	00		 jge	 $LN48@load_textu

; 854  : 		{
; 855  : 
; 856  : 			int
; 857  : 				temp,
; 858  : 				length,
; 859  : 				number_of_mipmaps;
; 860  : 
; 861  : 			unsigned int
; 862  : 				value;
; 863  : 
; 864  : 			screen
; 865  : 				*this_texture;
; 866  : 
; 867  : 			texture_flags
; 868  : 				flags;
; 869  : 
; 870  : 			fread ( &value, sizeof ( unsigned int ), 1, fp );

  006fb	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  006fe	50		 push	 eax
  006ff	6a 01		 push	 1
  00701	6a 04		 push	 4
  00703	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _value$3[ebp]
  00709	51		 push	 ecx
  0070a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00710	83 c4 10	 add	 esp, 16			; 00000010H

; 871  : 
; 872  : 			flags.flags = value;

  00713	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _value$3[ebp]
  00719	89 85 b0 fd ff
	ff		 mov	 DWORD PTR _flags$1[ebp], eax

; 873  : 
; 874  : 			system_texture_info[count].flags.flags = flags.flags;

  0071f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00722	8b 8d b0 fd ff
	ff		 mov	 ecx, DWORD PTR _flags$1[ebp]
  00728	89 0c c5 00 00
	00 00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8], ecx

; 875  : 
; 876  : 			system_texture_info[count].texture_screen = NULL;

  0072f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00732	c7 04 c5 04 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4], 0

; 877  : 
; 878  : 			memset ( system_texture_names[count], 0, 128 );

  0073d	68 80 00 00 00	 push	 128			; 00000080H
  00742	6a 00		 push	 0
  00744	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00747	c1 e0 07	 shl	 eax, 7
  0074a	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  0074f	50		 push	 eax
  00750	e8 00 00 00 00	 call	 _memset
  00755	83 c4 0c	 add	 esp, 12			; 0000000cH

; 879  : 
; 880  : 			fread ( &length, sizeof ( length ), 1, fp );

  00758	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  0075b	50		 push	 eax
  0075c	6a 01		 push	 1
  0075e	6a 04		 push	 4
  00760	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _length$5[ebp]
  00766	51		 push	 ecx
  00767	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0076d	83 c4 10	 add	 esp, 16			; 00000010H

; 881  : 
; 882  : 			fread ( system_texture_names[count], length, 1, fp );

  00770	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00773	50		 push	 eax
  00774	6a 01		 push	 1
  00776	8b 8d c0 fd ff
	ff		 mov	 ecx, DWORD PTR _length$5[ebp]
  0077c	51		 push	 ecx
  0077d	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00780	c1 e2 07	 shl	 edx, 7
  00783	81 c2 00 00 00
	00		 add	 edx, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  00789	52		 push	 edx
  0078a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00790	83 c4 10	 add	 esp, 16			; 00000010H

; 883  : 
; 884  : 			strupr ( system_texture_names[count] );

  00793	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00796	c1 e0 07	 shl	 eax, 7
  00799	05 00 00 00 00	 add	 eax, OFFSET ?system_texture_names@@3PAY0IA@DA ; system_texture_names
  0079e	50		 push	 eax
  0079f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strupr
  007a5	83 c4 04	 add	 esp, 4

; 885  : 
; 886  : 			add_texture_to_name_hash ( count );

  007a8	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  007ab	50		 push	 eax
  007ac	e8 00 00 00 00	 call	 ?add_texture_to_name_hash@@YGXI@Z ; add_texture_to_name_hash

; 887  : 
; 888  : 			if ( flags.reserved_texture )

  007b1	66 8b 85 b0 fd
	ff ff		 mov	 ax, WORD PTR _flags$1[ebp]
  007b8	66 83 e0 01	 and	 ax, 1
  007bc	0f b7 c8	 movzx	 ecx, ax
  007bf	85 c9		 test	 ecx, ecx
  007c1	74 13		 je	 SHORT $LN69@load_textu

; 889  : 			{
; 890  : 
; 891  : 				//
; 892  : 				// Reserve this texture slot
; 893  : 				//
; 894  : 
; 895  : 				system_textures[count] = NULL;

  007c3	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  007c6	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], 0

; 896  : 			}
; 897  : 			else

  007d1	e9 79 04 00 00	 jmp	 $LN70@load_textu
$LN69@load_textu:

; 898  : 			{
; 899  : 
; 900  : 				fread ( &type, sizeof ( type ), 1, fp );

  007d6	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  007d9	50		 push	 eax
  007da	6a 01		 push	 1
  007dc	6a 04		 push	 4
  007de	8d 4d f0	 lea	 ecx, DWORD PTR _type$[ebp]
  007e1	51		 push	 ecx
  007e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  007e8	83 c4 10	 add	 esp, 16			; 00000010H

; 901  : 				fread ( &number_of_mipmaps, 4, 1, fp );

  007eb	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  007ee	50		 push	 eax
  007ef	6a 01		 push	 1
  007f1	6a 04		 push	 4
  007f3	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR _number_of_mipmaps$4[ebp]
  007f9	51		 push	 ecx
  007fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00800	83 c4 10	 add	 esp, 16			; 00000010H

; 902  : 				fread ( &width, 4, 1, fp );

  00803	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00806	50		 push	 eax
  00807	6a 01		 push	 1
  00809	6a 04		 push	 4
  0080b	8d 4d f8	 lea	 ecx, DWORD PTR _width$[ebp]
  0080e	51		 push	 ecx
  0080f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00815	83 c4 10	 add	 esp, 16			; 00000010H

; 903  : 				fread ( &height, 4, 1, fp );

  00818	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  0081b	50		 push	 eax
  0081c	6a 01		 push	 1
  0081e	6a 04		 push	 4
  00820	8d 4d f4	 lea	 ecx, DWORD PTR _height$[ebp]
  00823	51		 push	 ecx
  00824	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  0082a	83 c4 10	 add	 esp, 16			; 00000010H

; 904  : 
; 905  : 				if ( type == TEXTURE_TYPE_NOALPHA )

  0082d	83 7d f0 01	 cmp	 DWORD PTR _type$[ebp], 1
  00831	75 07		 jne	 SHORT $LN71@load_textu

; 906  : 				{
; 907  : 
; 908  : 					type = TEXTURE_TYPE_NOALPHA_NOPALETTE;

  00833	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _type$[ebp], 5
$LN71@load_textu:

; 909  : 				}
; 910  : 
; 911  : 				texture_format_type = (texture_map_types) type;

  0083a	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  0083d	89 45 ec	 mov	 DWORD PTR _texture_format_type$[ebp], eax

; 912  : 
; 913  : 				//
; 914  : 				// If we compress the textures, skip over the first level texture
; 915  : 				//
; 916  : //VJ 050423 compress_system_textures = FALSE in textsys.c as far as I know
; 917  : 				if ( compress_system_textures )

  00840	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?compress_system_textures@@3HA, 0 ; compress_system_textures
  00847	0f 84 9f 00 00
	00		 je	 $LN31@load_textu

; 918  : 				{
; 919  : 
; 920  : 					width >>= 1;

  0084d	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00850	d1 f8		 sar	 eax, 1
  00852	89 45 f8	 mov	 DWORD PTR _width$[ebp], eax

; 921  : 					height >>= 1;

  00855	8b 45 f4	 mov	 eax, DWORD PTR _height$[ebp]
  00858	d1 f8		 sar	 eax, 1
  0085a	89 45 f4	 mov	 DWORD PTR _height$[ebp], eax

; 922  : 					number_of_mipmaps--;

  0085d	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _number_of_mipmaps$4[ebp]
  00863	83 e8 01	 sub	 eax, 1
  00866	89 85 bc fd ff
	ff		 mov	 DWORD PTR _number_of_mipmaps$4[ebp], eax

; 923  : 
; 924  : 					switch ( type )

  0086c	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  0086f	89 85 2c fd ff
	ff		 mov	 DWORD PTR tv394[ebp], eax
  00875	8b 8d 2c fd ff
	ff		 mov	 ecx, DWORD PTR tv394[ebp]
  0087b	83 e9 01	 sub	 ecx, 1
  0087e	89 8d 2c fd ff
	ff		 mov	 DWORD PTR tv394[ebp], ecx
  00884	83 bd 2c fd ff
	ff 04		 cmp	 DWORD PTR tv394[ebp], 4
  0088b	77 5f		 ja	 SHORT $LN31@load_textu
  0088d	8b 95 2c fd ff
	ff		 mov	 edx, DWORD PTR tv394[ebp]
  00893	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN94@load_textu[edx*4]
$LN73@load_textu:

; 925  : 					{
; 926  : 
; 927  : 						case TEXTURE_TYPE_NOALPHA:
; 928  : 						case TEXTURE_TYPE_NOALPHA_NOPALETTE:
; 929  : 						{
; 930  : 
; 931  : 							fseek ( fp, ( width * height * 12 ), SEEK_CUR );

  0089a	6a 01		 push	 1
  0089c	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  0089f	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  008a3	6b c8 0c	 imul	 ecx, eax, 12
  008a6	51		 push	 ecx
  008a7	8b 55 e8	 mov	 edx, DWORD PTR _fp$[ebp]
  008aa	52		 push	 edx
  008ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  008b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 932  : 
; 933  : 							break;

  008b4	eb 36		 jmp	 SHORT $LN31@load_textu
$LN74@load_textu:

; 934  : 						}
; 935  : 
; 936  : 						case TEXTURE_TYPE_SINGLEALPHA:
; 937  : 						{
; 938  : 
; 939  : 							fseek ( fp, ( width * height * 16 ), SEEK_CUR );

  008b6	6a 01		 push	 1
  008b8	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  008bb	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  008bf	c1 e0 04	 shl	 eax, 4
  008c2	50		 push	 eax
  008c3	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  008c6	51		 push	 ecx
  008c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  008cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 940  : 
; 941  : 							break;

  008d0	eb 1a		 jmp	 SHORT $LN31@load_textu
$LN75@load_textu:

; 942  : 						}
; 943  : 
; 944  : 						case TEXTURE_TYPE_MULTIPLEALPHA:
; 945  : 						{
; 946  : 
; 947  : 							fseek ( fp, ( width * height * 16 ), SEEK_CUR );

  008d2	6a 01		 push	 1
  008d4	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  008d7	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  008db	c1 e0 04	 shl	 eax, 4
  008de	50		 push	 eax
  008df	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  008e2	51		 push	 ecx
  008e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  008e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN31@load_textu:

; 948  : 
; 949  : 							break;
; 950  : 						}
; 951  : 					}
; 952  : 				}
; 953  : 
; 954  : 				while ( ( width > d3d_maximum_texture_width ) || ( height > d3d_maximum_texture_height ) )

  008ec	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  008ef	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?d3d_maximum_texture_width@@3HA ; d3d_maximum_texture_width
  008f5	7f 0f		 jg	 SHORT $LN76@load_textu
  008f7	8b 45 f4	 mov	 eax, DWORD PTR _height$[ebp]
  008fa	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?d3d_maximum_texture_height@@3HA ; d3d_maximum_texture_height
  00900	0f 8e a4 00 00
	00		 jle	 $LN32@load_textu
$LN76@load_textu:

; 955  : 				{
; 956  : 
; 957  : 					width >>= 1;

  00906	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00909	d1 f8		 sar	 eax, 1
  0090b	89 45 f8	 mov	 DWORD PTR _width$[ebp], eax

; 958  : 					height >>= 1;

  0090e	8b 45 f4	 mov	 eax, DWORD PTR _height$[ebp]
  00911	d1 f8		 sar	 eax, 1
  00913	89 45 f4	 mov	 DWORD PTR _height$[ebp], eax

; 959  : 					number_of_mipmaps--;

  00916	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _number_of_mipmaps$4[ebp]
  0091c	83 e8 01	 sub	 eax, 1
  0091f	89 85 bc fd ff
	ff		 mov	 DWORD PTR _number_of_mipmaps$4[ebp], eax

; 960  : 
; 961  : 					switch ( type )

  00925	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  00928	89 85 2c fd ff
	ff		 mov	 DWORD PTR tv417[ebp], eax
  0092e	8b 8d 2c fd ff
	ff		 mov	 ecx, DWORD PTR tv417[ebp]
  00934	83 e9 01	 sub	 ecx, 1
  00937	89 8d 2c fd ff
	ff		 mov	 DWORD PTR tv417[ebp], ecx
  0093d	83 bd 2c fd ff
	ff 04		 cmp	 DWORD PTR tv417[ebp], 4
  00944	77 5f		 ja	 SHORT $LN33@load_textu
  00946	8b 95 2c fd ff
	ff		 mov	 edx, DWORD PTR tv417[ebp]
  0094c	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN95@load_textu[edx*4]
$LN77@load_textu:

; 962  : 					{
; 963  : 
; 964  : 						case TEXTURE_TYPE_NOALPHA:
; 965  : 						case TEXTURE_TYPE_NOALPHA_NOPALETTE:
; 966  : 						{
; 967  : 
; 968  : 							fseek ( fp, ( width * height * 12 ), SEEK_CUR );

  00953	6a 01		 push	 1
  00955	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00958	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  0095c	6b c8 0c	 imul	 ecx, eax, 12
  0095f	51		 push	 ecx
  00960	8b 55 e8	 mov	 edx, DWORD PTR _fp$[ebp]
  00963	52		 push	 edx
  00964	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0096a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 969  : 
; 970  : 							break;

  0096d	eb 36		 jmp	 SHORT $LN33@load_textu
$LN78@load_textu:

; 971  : 						}
; 972  : 
; 973  : 						case TEXTURE_TYPE_SINGLEALPHA:
; 974  : 						{
; 975  : 
; 976  : 							fseek ( fp, ( width * height * 16 ), SEEK_CUR );

  0096f	6a 01		 push	 1
  00971	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00974	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  00978	c1 e0 04	 shl	 eax, 4
  0097b	50		 push	 eax
  0097c	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  0097f	51		 push	 ecx
  00980	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00986	83 c4 0c	 add	 esp, 12			; 0000000cH

; 977  : 
; 978  : 							break;

  00989	eb 1a		 jmp	 SHORT $LN33@load_textu
$LN79@load_textu:

; 979  : 						}
; 980  : 
; 981  : 						case TEXTURE_TYPE_MULTIPLEALPHA:
; 982  : 						{
; 983  : 
; 984  : 							fseek ( fp, ( width * height * 16 ), SEEK_CUR );

  0098b	6a 01		 push	 1
  0098d	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00990	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  00994	c1 e0 04	 shl	 eax, 4
  00997	50		 push	 eax
  00998	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  0099b	51		 push	 ecx
  0099c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  009a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN33@load_textu:

; 985  : 
; 986  : 							break;
; 987  : 						}
; 988  : 					}
; 989  : 				}

  009a5	e9 42 ff ff ff	 jmp	 $LN31@load_textu
$LN32@load_textu:

; 990  : 
; 991  : //VJ mip mapped textures are just one behind the other and width/height is halved
; 992  : 
; 993  : 				if ( ( width != height ) && ( d3d_square_only_textures ) )

  009aa	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  009ad	3b 45 f4	 cmp	 eax, DWORD PTR _height$[ebp]
  009b0	74 4a		 je	 SHORT $LN80@load_textu
  009b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_square_only_textures@@3HA, 0 ; d3d_square_only_textures
  009b9	74 41		 je	 SHORT $LN80@load_textu

; 994  : 				{
; 995  : 
; 996  : 					//
; 997  : 					// All textures have width >= height
; 998  : 					//
; 999  : 
; 1000 : 					this_texture = create_texture_map ( width, width, texture_format_type, number_of_mipmaps + 1,

  009bb	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  009c0	6b c8 00	 imul	 ecx, eax, 0
  009c3	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A ; system_texture_colour_tables
  009c9	51		 push	 ecx
  009ca	ba 04 00 00 00	 mov	 edx, 4
  009cf	6b c2 00	 imul	 eax, edx, 0
  009d2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?system_texture_palettes@@3PAPAUIDirectDrawPalette@@A[eax]
  009d8	51		 push	 ecx
  009d9	8b 95 bc fd ff
	ff		 mov	 edx, DWORD PTR _number_of_mipmaps$4[ebp]
  009df	83 c2 01	 add	 edx, 1
  009e2	52		 push	 edx
  009e3	8b 45 ec	 mov	 eax, DWORD PTR _texture_format_type$[ebp]
  009e6	50		 push	 eax
  009e7	8b 4d f8	 mov	 ecx, DWORD PTR _width$[ebp]
  009ea	51		 push	 ecx
  009eb	8b 55 f8	 mov	 edx, DWORD PTR _width$[ebp]
  009ee	52		 push	 edx
  009ef	e8 00 00 00 00	 call	 ?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z ; create_texture_map
  009f4	89 85 b4 fd ff
	ff		 mov	 DWORD PTR _this_texture$2[ebp], eax

; 1001 : 																		system_texture_palettes[0], system_texture_colour_tables[0] );
; 1002 : 				}
; 1003 : 				else

  009fa	eb 3f		 jmp	 SHORT $LN81@load_textu
$LN80@load_textu:

; 1004 : 				{
; 1005 : 
; 1006 : 					this_texture = create_texture_map ( width, height, texture_format_type, number_of_mipmaps + 1,

  009fc	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00a01	6b c8 00	 imul	 ecx, eax, 0
  00a04	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?system_texture_colour_tables@@3PAY0BAA@UtagPALETTEENTRY@@A ; system_texture_colour_tables
  00a0a	51		 push	 ecx
  00a0b	ba 04 00 00 00	 mov	 edx, 4
  00a10	6b c2 00	 imul	 eax, edx, 0
  00a13	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?system_texture_palettes@@3PAPAUIDirectDrawPalette@@A[eax]
  00a19	51		 push	 ecx
  00a1a	8b 95 bc fd ff
	ff		 mov	 edx, DWORD PTR _number_of_mipmaps$4[ebp]
  00a20	83 c2 01	 add	 edx, 1
  00a23	52		 push	 edx
  00a24	8b 45 ec	 mov	 eax, DWORD PTR _texture_format_type$[ebp]
  00a27	50		 push	 eax
  00a28	8b 4d f4	 mov	 ecx, DWORD PTR _height$[ebp]
  00a2b	51		 push	 ecx
  00a2c	8b 55 f8	 mov	 edx, DWORD PTR _width$[ebp]
  00a2f	52		 push	 edx
  00a30	e8 00 00 00 00	 call	 ?create_texture_map@@YGPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HPAUIDirectDrawPalette@@PAUtagPALETTEENTRY@@@Z ; create_texture_map
  00a35	89 85 b4 fd ff
	ff		 mov	 DWORD PTR _this_texture$2[ebp], eax
$LN81@load_textu:

; 1007 : 																		system_texture_palettes[0], system_texture_colour_tables[0] );
; 1008 : 				}
; 1009 : 
; 1010 : 				system_textures[count] = this_texture;

  00a3b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00a3e	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$2[ebp]
  00a44	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], ecx

; 1011 : 
; 1012 : 				system_texture_info[count].texture_screen = this_texture;

  00a4b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00a4e	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$2[ebp]
  00a54	89 0c c5 04 00
	00 00		 mov	 DWORD PTR ?system_texture_info@@3PAUSYSTEM_TEXTURE_INFORMATION@@A[eax*8+4], ecx

; 1013 : 
; 1014 : 				//
; 1015 : 				// Now fill the data in
; 1016 : 				//
; 1017 : 
; 1018 : 				for ( temp = 0; temp <= number_of_mipmaps; temp++ )

  00a5b	c7 85 c4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _temp$6[ebp], 0
  00a65	eb 0f		 jmp	 SHORT $LN37@load_textu
$LN35@load_textu:
  00a67	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _temp$6[ebp]
  00a6d	83 c0 01	 add	 eax, 1
  00a70	89 85 c4 fd ff
	ff		 mov	 DWORD PTR _temp$6[ebp], eax
$LN37@load_textu:
  00a76	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _temp$6[ebp]
  00a7c	3b 85 bc fd ff
	ff		 cmp	 eax, DWORD PTR _number_of_mipmaps$4[ebp]
  00a82	0f 8f c7 01 00
	00		 jg	 $LN70@load_textu

; 1019 : 				{
; 1020 : 
; 1021 : 
; 1022 : 					if ( ( temp == 0 ) || ( d3d_mipmap_textures ) )

  00a88	83 bd c4 fd ff
	ff 00		 cmp	 DWORD PTR _temp$6[ebp], 0
  00a8f	74 0d		 je	 SHORT $LN38@load_textu
  00a91	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_mipmap_textures@@3HA, 0 ; d3d_mipmap_textures
  00a98	0f 84 1c 01 00
	00		 je	 $LN82@load_textu
$LN38@load_textu:

; 1023 : 					{
; 1024 : //VJ# in C:\gms\Razorworks\eech-new\modules\graphics\textsys.c
; 1025 : #if ( ALLOW_TEXTURE_CREATION )
; 1026 : 						while ( !lock_texture ( this_texture, temp ) )

  00a9e	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _temp$6[ebp]
  00aa4	50		 push	 eax
  00aa5	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$2[ebp]
  00aab	51		 push	 ecx
  00aac	e8 00 00 00 00	 call	 ?lock_texture@@YGHPAUSCREEN@@H@Z ; lock_texture
  00ab1	85 c0		 test	 eax, eax
  00ab3	75 0a		 jne	 SHORT $LN39@load_textu

; 1027 : 						{
; 1028 : 
; 1029 : 							Sleep ( 100 );

  00ab5	6a 64		 push	 100			; 00000064H
  00ab7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1030 : 						}

  00abd	eb df		 jmp	 SHORT $LN38@load_textu
$LN39@load_textu:

; 1031 : #endif
; 1032 : 
; 1033 : 						switch ( type )

  00abf	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  00ac2	89 85 2c fd ff
	ff		 mov	 DWORD PTR tv475[ebp], eax
  00ac8	8b 8d 2c fd ff
	ff		 mov	 ecx, DWORD PTR tv475[ebp]
  00ace	83 e9 01	 sub	 ecx, 1
  00ad1	89 8d 2c fd ff
	ff		 mov	 DWORD PTR tv475[ebp], ecx
  00ad7	83 bd 2c fd ff
	ff 04		 cmp	 DWORD PTR tv475[ebp], 4
  00ade	0f 87 c5 00 00
	00		 ja	 $LN40@load_textu
  00ae4	8b 95 2c fd ff
	ff		 mov	 edx, DWORD PTR tv475[ebp]
  00aea	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN96@load_textu[edx*4]
$LN85@load_textu:

; 1034 : 						{
; 1035 : 
; 1036 : 							case TEXTURE_TYPE_NOALPHA:
; 1037 : 							case TEXTURE_TYPE_NOALPHA_NOPALETTE:
; 1038 : 							{
; 1039 : //3 bytes for RGB
; 1040 : 								fread ( texture_image_data, ( width * height * 3 ), 1, fp );

  00af1	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00af4	50		 push	 eax
  00af5	6a 01		 push	 1
  00af7	8b 4d f8	 mov	 ecx, DWORD PTR _width$[ebp]
  00afa	0f af 4d f4	 imul	 ecx, DWORD PTR _height$[ebp]
  00afe	6b d1 03	 imul	 edx, ecx, 3
  00b01	52		 push	 edx
  00b02	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  00b07	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00b0d	83 c4 10	 add	 esp, 16			; 00000010H

; 1041 : 
; 1042 : #if ( ALLOW_TEXTURE_CREATION )
; 1043 : 								convert_no_alpha_24bit_texture_map_data ( texture_image_data, width, height, this_texture, fp );

  00b10	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00b13	50		 push	 eax
  00b14	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$2[ebp]
  00b1a	51		 push	 ecx
  00b1b	8b 55 f4	 mov	 edx, DWORD PTR _height$[ebp]
  00b1e	52		 push	 edx
  00b1f	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00b22	50		 push	 eax
  00b23	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  00b28	e8 00 00 00 00	 call	 ?convert_no_alpha_24bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_no_alpha_24bit_texture_map_data

; 1044 : #endif
; 1045 : 
; 1046 : 								break;

  00b2d	eb 7a		 jmp	 SHORT $LN40@load_textu
$LN86@load_textu:

; 1047 : 							}
; 1048 : 
; 1049 : 							case TEXTURE_TYPE_SINGLEALPHA:
; 1050 : 							{
; 1051 : //4 bytes for RGBA
; 1052 : 
; 1053 : 								fread ( texture_image_data, ( width * height * 4 ), 1, fp );

  00b2f	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00b32	50		 push	 eax
  00b33	6a 01		 push	 1
  00b35	8b 4d f8	 mov	 ecx, DWORD PTR _width$[ebp]
  00b38	0f af 4d f4	 imul	 ecx, DWORD PTR _height$[ebp]
  00b3c	c1 e1 02	 shl	 ecx, 2
  00b3f	51		 push	 ecx
  00b40	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  00b45	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00b4b	83 c4 10	 add	 esp, 16			; 00000010H

; 1054 : 
; 1055 : #if ( ALLOW_TEXTURE_CREATION )
; 1056 : 								convert_single_alpha_32bit_texture_map_data ( texture_image_data, width, height, this_texture, fp );

  00b4e	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00b51	50		 push	 eax
  00b52	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$2[ebp]
  00b58	51		 push	 ecx
  00b59	8b 55 f4	 mov	 edx, DWORD PTR _height$[ebp]
  00b5c	52		 push	 edx
  00b5d	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00b60	50		 push	 eax
  00b61	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  00b66	e8 00 00 00 00	 call	 ?convert_single_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_single_alpha_32bit_texture_map_data

; 1057 : #endif
; 1058 : 
; 1059 : 								break;

  00b6b	eb 3c		 jmp	 SHORT $LN40@load_textu
$LN87@load_textu:

; 1060 : 							}
; 1061 : 
; 1062 : 							case TEXTURE_TYPE_MULTIPLEALPHA:
; 1063 : 							{
; 1064 : 
; 1065 : 								fread ( texture_image_data, ( width * height * 4 ), 1, fp );

  00b6d	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00b70	50		 push	 eax
  00b71	6a 01		 push	 1
  00b73	8b 4d f8	 mov	 ecx, DWORD PTR _width$[ebp]
  00b76	0f af 4d f4	 imul	 ecx, DWORD PTR _height$[ebp]
  00b7a	c1 e1 02	 shl	 ecx, 2
  00b7d	51		 push	 ecx
  00b7e	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  00b83	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00b89	83 c4 10	 add	 esp, 16			; 00000010H

; 1066 : 
; 1067 : #if ( ALLOW_TEXTURE_CREATION )
; 1068 : 								convert_multiple_alpha_32bit_texture_map_data ( texture_image_data, width, height, this_texture, fp );

  00b8c	8b 45 e8	 mov	 eax, DWORD PTR _fp$[ebp]
  00b8f	50		 push	 eax
  00b90	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR _this_texture$2[ebp]
  00b96	51		 push	 ecx
  00b97	8b 55 f4	 mov	 edx, DWORD PTR _height$[ebp]
  00b9a	52		 push	 edx
  00b9b	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00b9e	50		 push	 eax
  00b9f	68 00 00 00 00	 push	 OFFSET ?texture_image_data@@3PAEA ; texture_image_data
  00ba4	e8 00 00 00 00	 call	 ?convert_multiple_alpha_32bit_texture_map_data@@YGXPAEHHPAUSCREEN@@PAU_iobuf@@@Z ; convert_multiple_alpha_32bit_texture_map_data
$LN40@load_textu:

; 1069 : #endif
; 1070 : 
; 1071 : 								break;
; 1072 : 							}
; 1073 : 						}
; 1074 : 
; 1075 : #if ( ALLOW_TEXTURE_CREATION )
; 1076 : 						unlock_texture ( this_texture );

  00ba9	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _this_texture$2[ebp]
  00baf	50		 push	 eax
  00bb0	e8 00 00 00 00	 call	 ?unlock_texture@@YGHPAUSCREEN@@@Z ; unlock_texture

; 1077 : #endif
; 1078 : 					}
; 1079 : 					else

  00bb5	e9 80 00 00 00	 jmp	 $LN83@load_textu
$LN82@load_textu:

; 1080 : 					{
; 1081 : 
; 1082 : 						// graphics card cannot handle mipmapping
; 1083 : 						// Skip over the mipmap data
; 1084 : 						//
; 1085 : 
; 1086 : 						switch ( type )

  00bba	8b 45 f0	 mov	 eax, DWORD PTR _type$[ebp]
  00bbd	89 85 2c fd ff
	ff		 mov	 DWORD PTR tv511[ebp], eax
  00bc3	8b 8d 2c fd ff
	ff		 mov	 ecx, DWORD PTR tv511[ebp]
  00bc9	83 e9 01	 sub	 ecx, 1
  00bcc	89 8d 2c fd ff
	ff		 mov	 DWORD PTR tv511[ebp], ecx
  00bd2	83 bd 2c fd ff
	ff 04		 cmp	 DWORD PTR tv511[ebp], 4
  00bd9	77 5f		 ja	 SHORT $LN83@load_textu
  00bdb	8b 95 2c fd ff
	ff		 mov	 edx, DWORD PTR tv511[ebp]
  00be1	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN97@load_textu[edx*4]
$LN88@load_textu:

; 1087 : 						{
; 1088 : 
; 1089 : 							case TEXTURE_TYPE_NOALPHA:
; 1090 : 							case TEXTURE_TYPE_NOALPHA_NOPALETTE:
; 1091 : 							{
; 1092 : 
; 1093 : 								fseek ( fp, ( width * height * 3 ), SEEK_CUR );

  00be8	6a 01		 push	 1
  00bea	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00bed	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  00bf1	6b c8 03	 imul	 ecx, eax, 3
  00bf4	51		 push	 ecx
  00bf5	8b 55 e8	 mov	 edx, DWORD PTR _fp$[ebp]
  00bf8	52		 push	 edx
  00bf9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00bff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1094 : 
; 1095 : 								break;

  00c02	eb 36		 jmp	 SHORT $LN83@load_textu
$LN89@load_textu:

; 1096 : 							}
; 1097 : 
; 1098 : 							case TEXTURE_TYPE_SINGLEALPHA:
; 1099 : 							{
; 1100 : 
; 1101 : 								fseek ( fp, ( width * height * 4 ), SEEK_CUR );

  00c04	6a 01		 push	 1
  00c06	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00c09	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  00c0d	c1 e0 02	 shl	 eax, 2
  00c10	50		 push	 eax
  00c11	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  00c14	51		 push	 ecx
  00c15	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00c1b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1102 : 
; 1103 : 								break;

  00c1e	eb 1a		 jmp	 SHORT $LN83@load_textu
$LN90@load_textu:

; 1104 : 							}
; 1105 : 
; 1106 : 							case TEXTURE_TYPE_MULTIPLEALPHA:
; 1107 : 							{
; 1108 : 
; 1109 : 								fseek ( fp, ( width * height * 4 ), SEEK_CUR );

  00c20	6a 01		 push	 1
  00c22	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00c25	0f af 45 f4	 imul	 eax, DWORD PTR _height$[ebp]
  00c29	c1 e0 02	 shl	 eax, 2
  00c2c	50		 push	 eax
  00c2d	8b 4d e8	 mov	 ecx, DWORD PTR _fp$[ebp]
  00c30	51		 push	 ecx
  00c31	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00c37	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN83@load_textu:

; 1110 : 
; 1111 : 								break;
; 1112 : 							}
; 1113 : 						}
; 1114 : 					}
; 1115 : 
; 1116 : 					width >>= 1;

  00c3a	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00c3d	d1 f8		 sar	 eax, 1
  00c3f	89 45 f8	 mov	 DWORD PTR _width$[ebp], eax

; 1117 : 
; 1118 : 					height >>= 1;

  00c42	8b 45 f4	 mov	 eax, DWORD PTR _height$[ebp]
  00c45	d1 f8		 sar	 eax, 1
  00c47	89 45 f4	 mov	 DWORD PTR _height$[ebp], eax

; 1119 : 				}

  00c4a	e9 18 fe ff ff	 jmp	 $LN35@load_textu
$LN70@load_textu:

; 1120 : 			}
; 1121 : 		}//for count to number_of_system_textures

  00c4f	e9 8f fa ff ff	 jmp	 $LN26@load_textu
$LN48@load_textu:

; 1122 : 	}//else  24 bit: !d3d_paletted_textures_supported
; 1123 : 
; 1124 : 	// adjust for texture indices added since EECH was released (i.e. not in the big texures-file)
; 1125 : 	number_of_system_textures += TEXTURE_INDEX_LAST - TEXTURE_INDEX_LAST_DEFAULT_INDEX - 1;

  00c54	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_system_textures@@3HA ; number_of_system_textures
  00c59	83 c0 06	 add	 eax, 6
  00c5c	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_system_textures@@3HA, eax ; number_of_system_textures

; 1126 : 
; 1127 : 	return ( TRUE );

  00c61	b8 01 00 00 00	 mov	 eax, 1

; 1128 : }

  00c66	5f		 pop	 edi
  00c67	5e		 pop	 esi
  00c68	5b		 pop	 ebx
  00c69	8b e5		 mov	 esp, ebp
  00c6b	5d		 pop	 ebp
  00c6c	c2 04 00	 ret	 4
  00c6f	90		 npad	 1
$LN92@load_textu:
  00c70	00 00 00 00	 DD	 $LN54@load_textu
  00c74	00 00 00 00	 DD	 $LN54@load_textu
  00c78	00 00 00 00	 DD	 $LN55@load_textu
  00c7c	00 00 00 00	 DD	 $LN13@load_textu
  00c80	00 00 00 00	 DD	 $LN54@load_textu
$LN93@load_textu:
  00c84	00 00 00 00	 DD	 $LN57@load_textu
  00c88	00 00 00 00	 DD	 $LN57@load_textu
  00c8c	00 00 00 00	 DD	 $LN58@load_textu
  00c90	00 00 00 00	 DD	 $LN15@load_textu
  00c94	00 00 00 00	 DD	 $LN57@load_textu
$LN94@load_textu:
  00c98	00 00 00 00	 DD	 $LN73@load_textu
  00c9c	00 00 00 00	 DD	 $LN74@load_textu
  00ca0	00 00 00 00	 DD	 $LN75@load_textu
  00ca4	00 00 00 00	 DD	 $LN31@load_textu
  00ca8	00 00 00 00	 DD	 $LN73@load_textu
$LN95@load_textu:
  00cac	00 00 00 00	 DD	 $LN77@load_textu
  00cb0	00 00 00 00	 DD	 $LN78@load_textu
  00cb4	00 00 00 00	 DD	 $LN79@load_textu
  00cb8	00 00 00 00	 DD	 $LN33@load_textu
  00cbc	00 00 00 00	 DD	 $LN77@load_textu
$LN96@load_textu:
  00cc0	00 00 00 00	 DD	 $LN85@load_textu
  00cc4	00 00 00 00	 DD	 $LN86@load_textu
  00cc8	00 00 00 00	 DD	 $LN87@load_textu
  00ccc	00 00 00 00	 DD	 $LN40@load_textu
  00cd0	00 00 00 00	 DD	 $LN85@load_textu
$LN97@load_textu:
  00cd4	00 00 00 00	 DD	 $LN88@load_textu
  00cd8	00 00 00 00	 DD	 $LN89@load_textu
  00cdc	00 00 00 00	 DD	 $LN90@load_textu
  00ce0	00 00 00 00	 DD	 $LN83@load_textu
  00ce4	00 00 00 00	 DD	 $LN88@load_textu
?load_texturemap_data@@YGHPBD@Z ENDP			; load_texturemap_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?release_system_textures@@YGXXZ
_TEXT	SEGMENT
?release_system_textures@@YGXXZ PROC			; release_system_textures, COMDAT

; 410  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 411  : 
; 412  : #if ( !DEBUG )
; 413  : /*
; 414  : 	int
; 415  : 		count;
; 416  : 
; 417  : 	HRESULT
; 418  : 		ddrval;
; 419  : 
; 420  : 	//
; 421  : 	// Release the system memory textures
; 422  : 	//
; 423  : 
; 424  : 	for ( count = 0; count < MAX_TEXTURES; count++ )
; 425  : 	{
; 426  : 
; 427  : 		if ( system_textures[count].used )
; 428  : 		{
; 429  : 
; 430  : 			if ( !system_textures[count].clone_screen )
; 431  : 			{
; 432  : 
; 433  : 				if ( system_textures[count].palette )
; 434  : 				{
; 435  : 
; 436  : 					f3d_surface_palette ( system_textures[count].surface, NULL );
; 437  : 
; 438  : 					system_textures[count].palette = NULL;
; 439  : 				}
; 440  : 
; 441  : 				release_texture_surface ( &system_textures[count].surface );
; 442  : 
; 443  : 				system_textures[count].used = FALSE;
; 444  : 			}
; 445  : 		}
; 446  : 	}
; 447  : 
; 448  : 	//
; 449  : 	// Finally any palettes
; 450  : 	//
; 451  : 
; 452  : 	for ( count = 0; count < number_of_system_texture_palettes; count++ )
; 453  : 	{
; 454  : 		if ( system_texture_palettes[count] )
; 455  : 		{
; 456  : 			f3d_palette_release ( &system_texture_palettes[count] );
; 457  : 		}
; 458  : 	}
; 459  : 	*/
; 460  : #endif
; 461  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?release_system_textures@@YGXXZ ENDP			; release_system_textures
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\textuser.c
;	COMDAT ?set_texture_camoflage@@YGXH@Z
_TEXT	SEGMENT
_set$ = 8						; size = 4
?set_texture_camoflage@@YGXH@Z PROC			; set_texture_camoflage, COMDAT

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 361  : 	texture_camoflage = set;

  00009	8b 45 08	 mov	 eax, DWORD PTR _set$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?texture_camoflage@@3HA, eax

; 362  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_texture_camoflage@@YGXH@Z ENDP			; set_texture_camoflage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\string.h
;	COMDAT ?strstr@@YAPADQADQBD@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__SubString$ = 12					; size = 4
?strstr@@YAPADQADQBD@Z PROC				; strstr, COMDAT

; 523  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __SubString$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __String$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _strstr
  00016	83 c4 08	 add	 esp, 8

; 525  :     }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?strstr@@YAPADQADQBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\string.h
;	COMDAT ?strrchr@@YAPADQADH@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strrchr@@YAPADQADH@Z PROC				; strrchr, COMDAT

; 517  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 518  :         return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ch$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __String$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _strrchr
  00016	83 c4 08	 add	 esp, 8

; 519  :     }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?strrchr@@YAPADQADH@Z ENDP				; strrchr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\string.h
;	COMDAT ?strchr@@YAPADQADH@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADQADH@Z PROC				; strchr, COMDAT

; 505  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 506  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ch$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __String$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _strchr
  00016	83 c4 08	 add	 esp, 8

; 507  :     }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?strchr@@YAPADQADH@Z ENDP				; strchr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2270 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2271 :         int _Result;
; 2272 :         va_list _ArgList;
; 2273 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 2274 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsscanf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 2275 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 2276 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 2277 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT

; 2175 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2176 :         return __stdio_common_vsscanf(

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	51		 push	 ecx
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsscanf
  0002d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2177 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2178 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2179 :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_sprintf_s PROC						; COMDAT

; 1841 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vsprintf_s_l
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1846 :             __crt_va_end(_ArgList);

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1847 :             return _Result;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1848 :         }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_s_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsprintf_s_l PROC					; COMDAT

; 1497 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf_s
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vsprintf_s
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vsprintf_s:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1503 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fscanf	PROC						; COMDAT

; 1204 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1205 :         int _Result;
; 1206 :         va_list _ArgList;
; 1207 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1208 :         _Result = _vfscanf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfscanf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1209 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1210 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1211 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT

; 1062 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1063 :         return __stdio_common_vfscanf(

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfscanf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 1064 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1065 :             _Stream, _Format, _Locale, _ArgList);
; 1066 :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
