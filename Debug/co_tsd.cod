; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_atanf
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_sinf
PUBLIC	?atan@@YGMM@Z					; atan
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z ; draw_tsd_terrain_map
PUBLIC	?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z ; draw_tsd_contour_map
PUBLIC	?Initialise_TSD_render_terrain@@YGXXZ		; Initialise_TSD_render_terrain
PUBLIC	?set_tsd_map_contour_colour@@YGXUREAL_COLOUR@@@Z ; set_tsd_map_contour_colour
PUBLIC	?set_tsd_map_river_colour@@YGXUREAL_COLOUR@@@Z	; set_tsd_map_river_colour
PUBLIC	?set_tsd_map_road_colour@@YGXUREAL_COLOUR@@@Z	; set_tsd_map_road_colour
PUBLIC	?draw_tsd_map_grid@@YGXPAUVEC3D@@MUREAL_COLOUR@@@Z ; draw_tsd_map_grid
PUBLIC	?draw_tsd_map_towns@@YGXPAUVEC3D@@M@Z		; draw_tsd_map_towns
PUBLIC	?cycle_tsd_map_palette@@YGXXZ			; cycle_tsd_map_palette
PUBLIC	?get_map_coords_from_world@@YGXPAUVEC3D@@M0PAM1@Z ; get_map_coords_from_world
PUBLIC	??$max@H@std@@YGABHABH0@Z			; std::max<int>
PUBLIC	?get_aspect@@YGMMMMM@Z				; get_aspect
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??draw_path_lines@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@HMMMMMMMHH@Z@4JA ; `draw_path_lines'::`1'::__LINE__Var
PUBLIC	??_C@_0EO@HGKHCOEN@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_05EHMGIKAG@paths@				; `string'
PUBLIC	??_C@_05JJOLJDEA@nodes@				; `string'
PUBLIC	??_C@_0CJ@MPKOBANJ@paths?$DN?$CFd?0?5paths?5drawn?$DN?$CFd?0?5lines@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z@4JA ; `draw_tsd_terrain_map'::`1'::__LINE__Var
PUBLIC	??_C@_08OAGMDKAF@position@			; `string'
PUBLIC	?__LINE__Var@?0??draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z@4JA ; `draw_tsd_contour_map'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@HBNIAJMP@Unknown?5TSD?1ASE?5range?5?$CF?42f@ ; `string'
PUBLIC	??_C@_0CP@IOCAKHH@num_contour_loops?5?$DN?5?$CFd?0?5num_con@ ; `string'
PUBLIC	??_C@_04OGKJMPGK@?$CF02d@			; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc90fda
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe921fb67eacae5
PUBLIC	__real@3fef0a3d70a3d70a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@4096cbe4
PUBLIC	__real@42800000
PUBLIC	__real@44fa0000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@46c35000
PUBLIC	__real@47435000
PUBLIC	__real@bfc90fda
PUBLIC	__real@c096cbe4
PUBLIC	__real@c0a00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c1000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_filtered_log@@YAXPBDZZ:PROC		; debug_filtered_log
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_filled_triangle
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?terrain_3d_map_maximum_height@@3MA:DWORD	; terrain_3d_map_maximum_height
EXTRN	?contour_map_river_nodes@@3PAUVEC3D@@A:DWORD	; contour_map_river_nodes
EXTRN	?contour_map_road_nodes@@3PAUVEC3D@@A:DWORD	; contour_map_road_nodes
EXTRN	?contour_map_river_paths@@3PAUCONTOUR_PATH@@A:DWORD ; contour_map_river_paths
EXTRN	?contour_map_road_paths@@3PAUCONTOUR_PATH@@A:DWORD ; contour_map_road_paths
EXTRN	?contour_map_number_of_river_paths@@3HA:DWORD	; contour_map_number_of_river_paths
EXTRN	?contour_map_number_of_road_paths@@3HA:DWORD	; contour_map_number_of_road_paths
EXTRN	?terrain_3d_simple_elevation_grid@@3PAMA:DWORD	; terrain_3d_simple_elevation_grid
EXTRN	?terrain_3d_simple_elevation_width@@3HA:DWORD	; terrain_3d_simple_elevation_width
EXTRN	?terrain_3d_simple_elevation_height@@3HA:DWORD	; terrain_3d_simple_elevation_height
EXTRN	?terrain_3d_simple_elevation_x_grid_size@@3MA:DWORD ; terrain_3d_simple_elevation_x_grid_size
EXTRN	?terrain_3d_simple_elevation_z_grid_size@@3MA:DWORD ; terrain_3d_simple_elevation_z_grid_size
EXTRN	?terrain_3d_simple_elevation_x_grid_size_reciprocal@@3MA:DWORD ; terrain_3d_simple_elevation_x_grid_size_reciprocal
EXTRN	?terrain_3d_simple_elevation_z_grid_size_reciprocal@@3MA:DWORD ; terrain_3d_simple_elevation_z_grid_size_reciprocal
EXTRN	?command_line_tsd_palette@@3HA:DWORD		; command_line_tsd_palette
EXTRN	?global_tsd_detail@@3HA:DWORD			; global_tsd_detail
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?tsd_render_mode@@3W4TSD_RENDER_MODES@@A:DWORD	; tsd_render_mode
EXTRN	?population_name_database@@3PAUPOPULATION_NAME_DATABASE_TYPE@@A:DWORD ; population_name_database
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?paper_colour@@3PAUREAL_COLOUR@@A DD 041H DUP (?)	; paper_colour
?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A DD 0104H DUP (?) ; terrain_colour
?draw_large_mfd@@3HA DD 01H DUP (?)			; draw_large_mfd
?tsd_render_palette@@3HA DD 01H DUP (?)			; tsd_render_palette
?contour_spacing@@3HA DD 01H DUP (?)			; contour_spacing
?contour_samples@@3HA DD 01H DUP (?)			; contour_samples
?map_palette@@3PAUREAL_COLOUR@@A DD 01H DUP (?)		; map_palette
?num_contour_loops@@3HA DD 01H DUP (?)			; num_contour_loops
?num_contour_lines@@3HA DD 01H DUP (?)			; num_contour_lines
?map_river_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; map_river_colour
?map_road_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; map_road_colour
?map_contour_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; map_contour_colour
_BSS	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c096cbe4
CONST	SEGMENT
__real@c096cbe4 DD 0c096cbe4r			; -4.71239
CONST	ENDS
;	COMDAT __real@bfc90fda
CONST	SEGMENT
__real@bfc90fda DD 0bfc90fdar			; -1.5708
CONST	ENDS
;	COMDAT __real@47435000
CONST	SEGMENT
__real@47435000 DD 047435000r			; 50000
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@4096cbe4
CONST	SEGMENT
__real@4096cbe4 DD 04096cbe4r			; 4.71239
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fef0a3d70a3d70a
CONST	SEGMENT
__real@3fef0a3d70a3d70a DQ 03fef0a3d70a3d70ar	; 0.97
CONST	ENDS
;	COMDAT __real@3fe921fb67eacae5
CONST	SEGMENT
__real@3fe921fb67eacae5 DQ 03fe921fb67eacae5r	; 0.785398
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc90fda
CONST	SEGMENT
__real@3fc90fda DD 03fc90fdar			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IOCAKHH@num_contour_loops?5?$DN?5?$CFd?0?5num_con@
CONST	SEGMENT
??_C@_0CP@IOCAKHH@num_contour_loops?5?$DN?5?$CFd?0?5num_con@ DB 'num_cont'
	DB	'our_loops = %d, num_contour_lines = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HBNIAJMP@Unknown?5TSD?1ASE?5range?5?$CF?42f@
CONST	SEGMENT
??_C@_0BL@HBNIAJMP@Unknown?5TSD?1ASE?5range?5?$CF?42f@ DB 'Unknown TSD/AS'
	DB	'E range %.2f', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z@4JA DD 05bbH ; `draw_tsd_contour_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08OAGMDKAF@position@
CONST	SEGMENT
??_C@_08OAGMDKAF@position@ DB 'position', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z@4JA DD 048dH ; `draw_tsd_terrain_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@MPKOBANJ@paths?$DN?$CFd?0?5paths?5drawn?$DN?$CFd?0?5lines@
CONST	SEGMENT
??_C@_0CJ@MPKOBANJ@paths?$DN?$CFd?0?5paths?5drawn?$DN?$CFd?0?5lines@ DB 'p'
	DB	'aths=%d, paths drawn=%d, lines drawn=%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JJOLJDEA@nodes@
CONST	SEGMENT
??_C@_05JJOLJDEA@nodes@ DB 'nodes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EHMGIKAG@paths@
CONST	SEGMENT
??_C@_05EHMGIKAG@paths@ DB 'paths', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@HGKHCOEN@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EO@HGKHCOEN@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\common\co_'
	DB	'tsd.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_path_lines@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@HMMMMMMMHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_path_lines@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@HMMMMMMMHH@Z@4JA DD 0394H ; `draw_path_lines'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?get_aspect@@YGMMMMM@Z
_TEXT	SEGMENT
tv155 = -88						; size = 8
tv74 = -84						; size = 4
_asp_corr$ = -16					; size = 4
_aspect$ = -12						; size = 4
__c$ = -8						; size = 4
__b$ = -4						; size = 4
_z1$ = 8						; size = 4
_z2$ = 12						; size = 4
_z3$ = 16						; size = 4
_z4$ = 20						; size = 4
?get_aspect@@YGMMMMM@Z PROC				; get_aspect, COMDAT

; 1139 : {                                

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1140 : //z1, z2 in x direction, z3, z4 in z direction
; 1141 : 	float _b, _c, aspect, asp_corr;
; 1142 :                                  
; 1143 : 	// dx/dy = E-W derivative     
; 1144 : 	_b = z3+z4 - (z1+z2);         

  00009	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z3$[ebp]
  0000e	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _z4$[ebp]
  00013	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _z1$[ebp]
  00018	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _z2$[ebp]
  0001d	f3 0f 5c c1	 subss	 xmm0, xmm1
  00021	f3 0f 11 45 fc	 movss	 DWORD PTR __b$[ebp], xmm0

; 1145 : 	// dz/dy = N-S derivative     
; 1146 : 	_c = z2+z4 - (z1+z3);         

  00026	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0002b	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _z4$[ebp]
  00030	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _z1$[ebp]
  00035	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _z3$[ebp]
  0003a	f3 0f 5c c1	 subss	 xmm0, xmm1
  0003e	f3 0f 11 45 f8	 movss	 DWORD PTR __c$[ebp], xmm0

; 1147 : 	aspect = (_c != 0 ? atan(_b/_c) : 0);

  00043	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR __c$[ebp]
  00048	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0004f	9f		 lahf
  00050	f6 c4 44	 test	 ah, 68			; 00000044H
  00053	7b 1a		 jnp	 SHORT $LN7@get_aspect
  00055	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR __b$[ebp]
  0005a	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR __c$[ebp]
  0005f	51		 push	 ecx
  00060	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00065	e8 00 00 00 00	 call	 ?atan@@YGMM@Z		; atan
  0006a	d9 5d ac	 fstp	 DWORD PTR tv74[ebp]
  0006d	eb 08		 jmp	 SHORT $LN8@get_aspect
$LN7@get_aspect:
  0006f	0f 57 c0	 xorps	 xmm0, xmm0
  00072	f3 0f 11 45 ac	 movss	 DWORD PTR tv74[ebp], xmm0
$LN8@get_aspect:
  00077	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv74[ebp]
  0007c	f3 0f 11 45 f4	 movss	 DWORD PTR _aspect$[ebp], xmm0

; 1148 : 	if (_b <= 0 && _c <= 0) asp_corr = 4.7123890;// rad(270);

  00081	0f 57 c0	 xorps	 xmm0, xmm0
  00084	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR __b$[ebp]
  00088	72 16		 jb	 SHORT $LN2@get_aspect
  0008a	0f 57 c0	 xorps	 xmm0, xmm0
  0008d	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR __c$[ebp]
  00091	72 0d		 jb	 SHORT $LN2@get_aspect
  00093	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4096cbe4
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _asp_corr$[ebp], xmm0
$LN2@get_aspect:

; 1149 : 	if (_b >  0 && _c <= 0) asp_corr = -1.5707963;// rad(-90);

  000a0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR __b$[ebp]
  000a5	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000ac	76 16		 jbe	 SHORT $LN3@get_aspect
  000ae	0f 57 c0	 xorps	 xmm0, xmm0
  000b1	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR __c$[ebp]
  000b5	72 0d		 jb	 SHORT $LN3@get_aspect
  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fda
  000bf	f3 0f 11 45 f0	 movss	 DWORD PTR _asp_corr$[ebp], xmm0
$LN3@get_aspect:

; 1150 : 	if (_b <= 0 && _c >  0) asp_corr = -4.7123890;//rad(-270);

  000c4	0f 57 c0	 xorps	 xmm0, xmm0
  000c7	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR __b$[ebp]
  000cb	72 1b		 jb	 SHORT $LN4@get_aspect
  000cd	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR __c$[ebp]
  000d2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000d9	76 0d		 jbe	 SHORT $LN4@get_aspect
  000db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c096cbe4
  000e3	f3 0f 11 45 f0	 movss	 DWORD PTR _asp_corr$[ebp], xmm0
$LN4@get_aspect:

; 1151 : 	if (_b >  0 && _c >  0) asp_corr = 1.5707963;//rad(90);

  000e8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR __b$[ebp]
  000ed	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000f4	76 1b		 jbe	 SHORT $LN5@get_aspect
  000f6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR __c$[ebp]
  000fb	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00102	76 0d		 jbe	 SHORT $LN5@get_aspect
  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fda
  0010c	f3 0f 11 45 f0	 movss	 DWORD PTR _asp_corr$[ebp], xmm0
$LN5@get_aspect:

; 1152 : 	// simple shader              
; 1153 :                                  
; 1154 : 	//rad(-45) is sun from NW when chopper is facing N
; 1155 : 	aspect = 0.5+0.25*(cos(aspect+asp_corr-0.7853982)+1); //rad(-45)

  00111	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  00116	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _asp_corr$[ebp]
  0011b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0011f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe921fb67eacae5
  00127	83 ec 08	 sub	 esp, 8
  0012a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0012f	e8 00 00 00 00	 call	 _cos
  00134	83 c4 08	 add	 esp, 8
  00137	dd 5d a8	 fstp	 QWORD PTR tv155[ebp]
  0013a	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv155[ebp]
  0013f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00147	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  0014f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00157	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015b	f3 0f 11 45 f4	 movss	 DWORD PTR _aspect$[ebp], xmm0

; 1156 : 	return(aspect);               

  00160	d9 45 f4	 fld	 DWORD PTR _aspect$[ebp]

; 1157 : 	                              
; 1158 : }                                

  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 10 00	 ret	 16			; 00000010H
?get_aspect@@YGMMMMM@Z ENDP				; get_aspect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?draw_path_lines@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@HMMMMMMMHH@Z
_TEXT	SEGMENT
$T1 = -120						; size = 4
$T2 = -116						; size = 4
_sub_positions$ = -48					; size = 4
_z2$ = -44						; size = 4
_x2$ = -40						; size = 4
_z1$ = -36						; size = 4
_x1$ = -32						; size = 4
_num_lines_drawn$ = -28					; size = 4
_num_paths_traversed$ = -24				; size = 4
_step_size$ = -20					; size = 4
_index$ = -16						; size = 4
_outcode2$ = -12					; size = 4
_outcode1$ = -8						; size = 4
_this_path$ = -4					; size = 4
_number_of_paths$ = 8					; size = 4
_paths$ = 12						; size = 4
_nodes$ = 16						; size = 4
_colour$ = 20						; size = 4
_detail_level$ = 24					; size = 4
_x_world_min$ = 28					; size = 4
_z_world_min$ = 32					; size = 4
_x_world_mid$ = 36					; size = 4
_z_world_mid$ = 40					; size = 4
_x_world_max$ = 44					; size = 4
_z_world_max$ = 48					; size = 4
_scale$ = 52						; size = 4
_draw_thick_lines$ = 56					; size = 4
_draw_large_mfd$ = 60					; size = 4
?draw_path_lines@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@HMMMMMMMHH@Z PROC ; draw_path_lines, COMDAT

; 916  : {                                

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 917  : 	int                           
; 918  : 		this_path,                 
; 919  : 		outcode1,                  
; 920  : 		outcode2,                  
; 921  : 		index,                     
; 922  : 		step_size;                 
; 923  :                                  
; 924  : 	#if OPTIMISE_PATHS            
; 925  :                                  
; 926  : 	int                           
; 927  : 		num_paths_traversed,       
; 928  : 		num_lines_drawn;           
; 929  :                                  
; 930  : 	#endif                        
; 931  :                                  
; 932  : 	float                         
; 933  : 		x1,                        
; 934  : 		z1,                        
; 935  : 		x2,                        
; 936  : 		z2;                        
; 937  :                                  
; 938  : 	vec3d                         
; 939  : 		*sub_positions;            
; 940  :                                  
; 941  : //	ASSERT (number_of_paths > 0);
; 942  : 	if (number_of_paths <= 0)

  00009	83 7d 08 00	 cmp	 DWORD PTR _number_of_paths$[ebp], 0
  0000d	7f 05		 jg	 SHORT $LN7@draw_path_

; 943  : 		return;

  0000f	e9 ee 05 00 00	 jmp	 $LN1@draw_path_
$LN7@draw_path_:

; 944  :                                  
; 945  : 	ASSERT (paths);               

  00014	83 7d 0c 00	 cmp	 DWORD PTR _paths$[ebp], 0
  00018	75 18		 jne	 SHORT $LN8@draw_path_
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_path_lines@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@HMMMMMMMHH@Z@4JA
  0001f	83 c0 1d	 add	 eax, 29			; 0000001dH
  00022	50		 push	 eax
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@HGKHCOEN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_05EHMGIKAG@paths@
  0002d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_path_:

; 946  :                                  
; 947  : 	ASSERT (nodes);               

  00032	83 7d 10 00	 cmp	 DWORD PTR _nodes$[ebp], 0
  00036	75 18		 jne	 SHORT $LN9@draw_path_
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_path_lines@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@HMMMMMMMHH@Z@4JA
  0003d	83 c0 1f	 add	 eax, 31			; 0000001fH
  00040	50		 push	 eax
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@HGKHCOEN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_05JJOLJDEA@nodes@
  0004b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@draw_path_:

; 948  :                                  
; 949  : 	#if OPTIMISE_PATHS            
; 950  :                                  
; 951  : 	num_paths_traversed = 0;      

  00050	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _num_paths_traversed$[ebp], 0

; 952  :                                  
; 953  : 	num_lines_drawn = 0;          

  00057	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _num_lines_drawn$[ebp], 0

; 954  :                                  
; 955  : 	#endif                        
; 956  :                                  
; 957  : 	step_size = max (detail_level << 3, 1);

  0005e	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00065	8b 45 18	 mov	 eax, DWORD PTR _detail_level$[ebp]
  00068	c1 e0 03	 shl	 eax, 3
  0006b	89 45 88	 mov	 DWORD PTR $T1[ebp], eax
  0006e	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  00071	51		 push	 ecx
  00072	8d 55 88	 lea	 edx, DWORD PTR $T1[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 45 ec	 mov	 DWORD PTR _step_size$[ebp], eax

; 958  :                                  
; 959  : 	for (this_path = 0; this_path < number_of_paths; this_path++)

  00080	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _this_path$[ebp], 0
  00087	eb 09		 jmp	 SHORT $LN4@draw_path_
$LN2@draw_path_:
  00089	8b 45 fc	 mov	 eax, DWORD PTR _this_path$[ebp]
  0008c	83 c0 01	 add	 eax, 1
  0008f	89 45 fc	 mov	 DWORD PTR _this_path$[ebp], eax
$LN4@draw_path_:
  00092	8b 45 fc	 mov	 eax, DWORD PTR _this_path$[ebp]
  00095	3b 45 08	 cmp	 eax, DWORD PTR _number_of_paths$[ebp]
  00098	0f 8d 4b 05 00
	00		 jge	 $LN3@draw_path_

; 960  : 	{                             
; 961  : 		if                         
; 962  : 		(                          
; 963  : 			(paths[this_path].type != TEMP_TERRAIN_TYPE_COASTAL_RIVER) &&
; 964  : 			(paths[this_path].type != TEMP_TERRAIN_TYPE_LAKE) &&

  0009e	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  000a2	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000a5	83 7c 01 08 33	 cmp	 DWORD PTR [ecx+eax+8], 51 ; 00000033H
  000aa	0f 84 34 05 00
	00		 je	 $LN21@draw_path_
  000b0	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  000b4	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000b7	83 7c 01 08 38	 cmp	 DWORD PTR [ecx+eax+8], 56 ; 00000038H
  000bc	0f 84 22 05 00
	00		 je	 $LN21@draw_path_
  000c2	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  000c6	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000c9	83 7c 01 08 3b	 cmp	 DWORD PTR [ecx+eax+8], 59 ; 0000003bH
  000ce	0f 84 10 05 00
	00		 je	 $LN21@draw_path_

; 965  : 			(paths[this_path].type != TEMP_TERRAIN_TYPE_OFFROAD)
; 966  : 		)                          
; 967  : 		{                          
; 968  : 			//                      
; 969  : 			// trivially reject path
; 970  : 			//                      
; 971  :                                  
; 972  : 			outcode1 = 0;           

  000d4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _outcode1$[ebp], 0

; 973  :                                  
; 974  : 			if (paths[this_path].xmin < x_world_min) outcode1 |= CLIP_LEFT;

  000db	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  000df	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000e2	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _x_world_min$[ebp]
  000e7	0f 2f 44 01 10	 comiss	 xmm0, DWORD PTR [ecx+eax+16]
  000ec	76 09		 jbe	 SHORT $LN11@draw_path_
  000ee	8b 45 f8	 mov	 eax, DWORD PTR _outcode1$[ebp]
  000f1	83 c8 01	 or	 eax, 1
  000f4	89 45 f8	 mov	 DWORD PTR _outcode1$[ebp], eax
$LN11@draw_path_:

; 975  : 			if (paths[this_path].xmin > x_world_max) outcode1 |= CLIP_RIGHT;

  000f7	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  000fb	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  000fe	f3 0f 10 44 01
	10		 movss	 xmm0, DWORD PTR [ecx+eax+16]
  00104	0f 2f 45 2c	 comiss	 xmm0, DWORD PTR _x_world_max$[ebp]
  00108	76 09		 jbe	 SHORT $LN12@draw_path_
  0010a	8b 45 f8	 mov	 eax, DWORD PTR _outcode1$[ebp]
  0010d	83 c8 04	 or	 eax, 4
  00110	89 45 f8	 mov	 DWORD PTR _outcode1$[ebp], eax
$LN12@draw_path_:

; 976  : 			if (paths[this_path].zmin < z_world_min) outcode1 |= CLIP_TOP;

  00113	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00117	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0011a	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _z_world_min$[ebp]
  0011f	0f 2f 44 01 18	 comiss	 xmm0, DWORD PTR [ecx+eax+24]
  00124	76 09		 jbe	 SHORT $LN13@draw_path_
  00126	8b 45 f8	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00129	83 c8 02	 or	 eax, 2
  0012c	89 45 f8	 mov	 DWORD PTR _outcode1$[ebp], eax
$LN13@draw_path_:

; 977  : 			if (paths[this_path].zmin > z_world_max) outcode1 |= CLIP_BOTTOM;

  0012f	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00133	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00136	f3 0f 10 44 01
	18		 movss	 xmm0, DWORD PTR [ecx+eax+24]
  0013c	0f 2f 45 30	 comiss	 xmm0, DWORD PTR _z_world_max$[ebp]
  00140	76 09		 jbe	 SHORT $LN14@draw_path_
  00142	8b 45 f8	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00145	83 c8 08	 or	 eax, 8
  00148	89 45 f8	 mov	 DWORD PTR _outcode1$[ebp], eax
$LN14@draw_path_:

; 978  :                                  
; 979  : 			outcode2 = 0;           

  0014b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 0

; 980  :                                  
; 981  : 			if (paths[this_path].xmax < x_world_min) outcode2 |= CLIP_LEFT;

  00152	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00156	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00159	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _x_world_min$[ebp]
  0015e	0f 2f 44 01 14	 comiss	 xmm0, DWORD PTR [ecx+eax+20]
  00163	76 09		 jbe	 SHORT $LN15@draw_path_
  00165	8b 45 f4	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00168	83 c8 01	 or	 eax, 1
  0016b	89 45 f4	 mov	 DWORD PTR _outcode2$[ebp], eax
$LN15@draw_path_:

; 982  : 			if (paths[this_path].xmax > x_world_max) outcode2 |= CLIP_RIGHT;

  0016e	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00172	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00175	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  0017b	0f 2f 45 2c	 comiss	 xmm0, DWORD PTR _x_world_max$[ebp]
  0017f	76 09		 jbe	 SHORT $LN16@draw_path_
  00181	8b 45 f4	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00184	83 c8 04	 or	 eax, 4
  00187	89 45 f4	 mov	 DWORD PTR _outcode2$[ebp], eax
$LN16@draw_path_:

; 983  : 			if (paths[this_path].zmax < z_world_min) outcode2 |= CLIP_TOP;

  0018a	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  0018e	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00191	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _z_world_min$[ebp]
  00196	0f 2f 44 01 1c	 comiss	 xmm0, DWORD PTR [ecx+eax+28]
  0019b	76 09		 jbe	 SHORT $LN17@draw_path_
  0019d	8b 45 f4	 mov	 eax, DWORD PTR _outcode2$[ebp]
  001a0	83 c8 02	 or	 eax, 2
  001a3	89 45 f4	 mov	 DWORD PTR _outcode2$[ebp], eax
$LN17@draw_path_:

; 984  : 			if (paths[this_path].zmax > z_world_max) outcode2 |= CLIP_BOTTOM;

  001a6	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  001aa	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001ad	f3 0f 10 44 01
	1c		 movss	 xmm0, DWORD PTR [ecx+eax+28]
  001b3	0f 2f 45 30	 comiss	 xmm0, DWORD PTR _z_world_max$[ebp]
  001b7	76 09		 jbe	 SHORT $LN18@draw_path_
  001b9	8b 45 f4	 mov	 eax, DWORD PTR _outcode2$[ebp]
  001bc	83 c8 08	 or	 eax, 8
  001bf	89 45 f4	 mov	 DWORD PTR _outcode2$[ebp], eax
$LN18@draw_path_:

; 985  :                                  
; 986  : 			if (!(outcode1 & outcode2))

  001c2	8b 45 f8	 mov	 eax, DWORD PTR _outcode1$[ebp]
  001c5	23 45 f4	 and	 eax, DWORD PTR _outcode2$[ebp]
  001c8	0f 85 16 04 00
	00		 jne	 $LN21@draw_path_

; 987  : 			{                       
; 988  : 				#if OPTIMISE_PATHS   
; 989  :                                  
; 990  : 				num_paths_traversed++;

  001ce	8b 45 e8	 mov	 eax, DWORD PTR _num_paths_traversed$[ebp]
  001d1	83 c0 01	 add	 eax, 1
  001d4	89 45 e8	 mov	 DWORD PTR _num_paths_traversed$[ebp], eax

; 991  :                                  
; 992  : 				#endif               
; 993  :                                  
; 994  : 				//                   
; 995  : 				// this also catches conditions where (count == 0)
; 996  : 				//                   
; 997  :                                  
; 998  : 				if (paths[this_path].count <= step_size)

  001d7	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  001db	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001de	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  001e2	3b 55 ec	 cmp	 edx, DWORD PTR _step_size$[ebp]
  001e5	0f 8f 12 01 00
	00		 jg	 $LN20@draw_path_

; 999  : 				{                    
; 1000 : 					////////////////////////////////////////
; 1001 : 					//                
; 1002 : 					// draw path as a single line
; 1003 : 					//                
; 1004 : 					////////////////////////////////////////
; 1005 :                                  
; 1006 : 					x1 = (nodes[paths[this_path].from].x - x_world_mid) * scale;

  001eb	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  001ef	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  001f2	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  001f6	8b 45 10	 mov	 eax, DWORD PTR _nodes$[ebp]
  001f9	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  001fe	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR _x_world_mid$[ebp]
  00203	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00208	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1007 : 					z1 = (nodes[paths[this_path].from].z - z_world_mid) * scale;

  0020d	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00211	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00214	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  00218	8b 45 10	 mov	 eax, DWORD PTR _nodes$[ebp]
  0021b	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
  00221	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _z_world_mid$[ebp]
  00226	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0022b	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 1008 :                                  
; 1009 : 					x2 = (nodes[paths[this_path].to].x - x_world_mid) * scale;

  00230	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00234	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00237	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  0023c	8b 45 10	 mov	 eax, DWORD PTR _nodes$[ebp]
  0023f	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00244	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR _x_world_mid$[ebp]
  00249	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0024e	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1010 : 					z2 = (nodes[paths[this_path].to].z - z_world_mid) * scale;

  00253	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00257	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0025a	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  0025f	8b 45 10	 mov	 eax, DWORD PTR _nodes$[ebp]
  00262	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
  00268	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _z_world_mid$[ebp]
  0026d	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00272	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0

; 1011 :                                  
; 1012 : 					if (draw_thick_lines && draw_large_mfd)

  00277	83 7d 38 00	 cmp	 DWORD PTR _draw_thick_lines$[ebp], 0
  0027b	74 3d		 je	 SHORT $LN22@draw_path_
  0027d	83 7d 3c 00	 cmp	 DWORD PTR _draw_large_mfd$[ebp], 0
  00281	74 37		 je	 SHORT $LN22@draw_path_

; 1013 : 					{                 
; 1014 : 						draw_2d_half_thick_line (x1, z1, x2, z2, colour);

  00283	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  00286	50		 push	 eax
  00287	51		 push	 ecx
  00288	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0028d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00292	51		 push	 ecx
  00293	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029d	51		 push	 ecx
  0029e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	51		 push	 ecx
  002a9	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  002ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b3	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 1015 : 					}                 
; 1016 : 					else              

  002b8	eb 35		 jmp	 SHORT $LN23@draw_path_
$LN22@draw_path_:

; 1017 : 					{                 
; 1018 : 						draw_2d_line (x1, z1, x2, z2, colour);

  002ba	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  002bd	50		 push	 eax
  002be	51		 push	 ecx
  002bf	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  002c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c9	51		 push	 ecx
  002ca	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  002cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d4	51		 push	 ecx
  002d5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  002da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002df	51		 push	 ecx
  002e0	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  002e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ea	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN23@draw_path_:

; 1019 : 					}                 
; 1020 :                                  
; 1021 : 					#if OPTIMISE_PATHS
; 1022 :                                  
; 1023 : 					num_lines_drawn++;

  002ef	8b 45 e4	 mov	 eax, DWORD PTR _num_lines_drawn$[ebp]
  002f2	83 c0 01	 add	 eax, 1
  002f5	89 45 e4	 mov	 DWORD PTR _num_lines_drawn$[ebp], eax

; 1024 :                                  
; 1025 : 					#endif            
; 1026 : 				}                    
; 1027 : 				else                 

  002f8	e9 e7 02 00 00	 jmp	 $LN21@draw_path_
$LN20@draw_path_:

; 1028 : 				{                    
; 1029 : 					////////////////////////////////////////
; 1030 : 					//                
; 1031 : 					// draw path with variable detail level
; 1032 : 					//                
; 1033 : 					////////////////////////////////////////
; 1034 :                                  
; 1035 : 					sub_positions = paths[this_path].points;

  002fd	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00301	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00304	8b 54 01 20	 mov	 edx, DWORD PTR [ecx+eax+32]
  00308	89 55 d0	 mov	 DWORD PTR _sub_positions$[ebp], edx

; 1036 :                                  
; 1037 : 					index = step_size - 1;;

  0030b	8b 45 ec	 mov	 eax, DWORD PTR _step_size$[ebp]
  0030e	83 e8 01	 sub	 eax, 1
  00311	89 45 f0	 mov	 DWORD PTR _index$[ebp], eax

; 1038 :                                  
; 1039 : 					//                
; 1040 : 					// draw line from start node to first sub-position
; 1041 : 					//                
; 1042 :                                  
; 1043 : 					x1 = (nodes[paths[this_path].from].x - x_world_mid) * scale;

  00314	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00318	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0031b	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  0031f	8b 45 10	 mov	 eax, DWORD PTR _nodes$[ebp]
  00322	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00327	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR _x_world_mid$[ebp]
  0032c	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00331	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1044 : 					z1 = (nodes[paths[this_path].from].z - z_world_mid) * scale;

  00336	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  0033a	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  0033d	6b 14 01 0c	 imul	 edx, DWORD PTR [ecx+eax], 12
  00341	8b 45 10	 mov	 eax, DWORD PTR _nodes$[ebp]
  00344	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
  0034a	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _z_world_mid$[ebp]
  0034f	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00354	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 1045 :                                  
; 1046 : 					x2 = (sub_positions[index].x - x_world_mid) * scale;

  00359	6b 45 f0 0c	 imul	 eax, DWORD PTR _index$[ebp], 12
  0035d	8b 4d d0	 mov	 ecx, DWORD PTR _sub_positions$[ebp]
  00360	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00365	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR _x_world_mid$[ebp]
  0036a	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0036f	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1047 : 					z2 = (sub_positions[index].z - z_world_mid) * scale;

  00374	6b 45 f0 0c	 imul	 eax, DWORD PTR _index$[ebp], 12
  00378	8b 4d d0	 mov	 ecx, DWORD PTR _sub_positions$[ebp]
  0037b	f3 0f 10 44 01
	08		 movss	 xmm0, DWORD PTR [ecx+eax+8]
  00381	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _z_world_mid$[ebp]
  00386	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0038b	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0

; 1048 :                                  
; 1049 : 					if (draw_thick_lines && draw_large_mfd)

  00390	83 7d 38 00	 cmp	 DWORD PTR _draw_thick_lines$[ebp], 0
  00394	74 3d		 je	 SHORT $LN24@draw_path_
  00396	83 7d 3c 00	 cmp	 DWORD PTR _draw_large_mfd$[ebp], 0
  0039a	74 37		 je	 SHORT $LN24@draw_path_

; 1050 : 					{                 
; 1051 : 						draw_2d_half_thick_line (x1, z1, x2, z2, colour);

  0039c	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  0039f	50		 push	 eax
  003a0	51		 push	 ecx
  003a1	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  003a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ab	51		 push	 ecx
  003ac	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  003b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b6	51		 push	 ecx
  003b7	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	51		 push	 ecx
  003c2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  003c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cc	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 1052 : 					}                 
; 1053 : 					else              

  003d1	eb 35		 jmp	 SHORT $LN25@draw_path_
$LN24@draw_path_:

; 1054 : 					{                 
; 1055 : 						draw_2d_line (x1, z1, x2, z2, colour);

  003d3	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  003d6	50		 push	 eax
  003d7	51		 push	 ecx
  003d8	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  003dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e2	51		 push	 ecx
  003e3	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  003e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ed	51		 push	 ecx
  003ee	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  003f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f8	51		 push	 ecx
  003f9	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  003fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00403	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN25@draw_path_:

; 1056 : 					}                 
; 1057 :                                  
; 1058 : 					#if OPTIMISE_PATHS
; 1059 :                                  
; 1060 : 					num_lines_drawn++;

  00408	8b 45 e4	 mov	 eax, DWORD PTR _num_lines_drawn$[ebp]
  0040b	83 c0 01	 add	 eax, 1
  0040e	89 45 e4	 mov	 DWORD PTR _num_lines_drawn$[ebp], eax

; 1061 :                                  
; 1062 : 					#endif            
; 1063 :                                  
; 1064 : 					//                
; 1065 : 					// draw sub-position lines
; 1066 : 					//                
; 1067 :                                  
; 1068 : 					index += step_size;

  00411	8b 45 f0	 mov	 eax, DWORD PTR _index$[ebp]
  00414	03 45 ec	 add	 eax, DWORD PTR _step_size$[ebp]
  00417	89 45 f0	 mov	 DWORD PTR _index$[ebp], eax
$LN5@draw_path_:

; 1069 :                                  
; 1070 : 					while (index < paths[this_path].count)

  0041a	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  0041e	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00421	8b 55 f0	 mov	 edx, DWORD PTR _index$[ebp]
  00424	3b 54 01 0c	 cmp	 edx, DWORD PTR [ecx+eax+12]
  00428	0f 8d da 00 00
	00		 jge	 $LN6@draw_path_

; 1071 : 					{                 
; 1072 : 						x1 = x2;       

  0042e	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00433	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1073 : 						z1 = z2;       

  00438	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0043d	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 1074 :                                  
; 1075 : 						x2 = (sub_positions[index].x - x_world_mid) * scale;

  00442	6b 45 f0 0c	 imul	 eax, DWORD PTR _index$[ebp], 12
  00446	8b 4d d0	 mov	 ecx, DWORD PTR _sub_positions$[ebp]
  00449	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0044e	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR _x_world_mid$[ebp]
  00453	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00458	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1076 : 						z2 = (sub_positions[index].z - z_world_mid) * scale;

  0045d	6b 45 f0 0c	 imul	 eax, DWORD PTR _index$[ebp], 12
  00461	8b 4d d0	 mov	 ecx, DWORD PTR _sub_positions$[ebp]
  00464	f3 0f 10 44 01
	08		 movss	 xmm0, DWORD PTR [ecx+eax+8]
  0046a	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _z_world_mid$[ebp]
  0046f	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00474	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0

; 1077 :                                  
; 1078 : 						if (draw_thick_lines && draw_large_mfd)

  00479	83 7d 38 00	 cmp	 DWORD PTR _draw_thick_lines$[ebp], 0
  0047d	74 3d		 je	 SHORT $LN26@draw_path_
  0047f	83 7d 3c 00	 cmp	 DWORD PTR _draw_large_mfd$[ebp], 0
  00483	74 37		 je	 SHORT $LN26@draw_path_

; 1079 : 						{              
; 1080 : 							draw_2d_half_thick_line (x1, z1, x2, z2, colour);

  00485	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  00488	50		 push	 eax
  00489	51		 push	 ecx
  0048a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0048f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00494	51		 push	 ecx
  00495	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0049a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049f	51		 push	 ecx
  004a0	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  004a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004aa	51		 push	 ecx
  004ab	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b5	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 1081 : 						}              
; 1082 : 						else           

  004ba	eb 35		 jmp	 SHORT $LN27@draw_path_
$LN26@draw_path_:

; 1083 : 						{              
; 1084 : 							draw_2d_line (x1, z1, x2, z2, colour);

  004bc	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  004bf	50		 push	 eax
  004c0	51		 push	 ecx
  004c1	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  004c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cb	51		 push	 ecx
  004cc	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  004d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d6	51		 push	 ecx
  004d7	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  004dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e1	51		 push	 ecx
  004e2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ec	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN27@draw_path_:

; 1085 : 						}              
; 1086 :                                  
; 1087 : 						#if OPTIMISE_PATHS
; 1088 :                                  
; 1089 : 						num_lines_drawn++;

  004f1	8b 45 e4	 mov	 eax, DWORD PTR _num_lines_drawn$[ebp]
  004f4	83 c0 01	 add	 eax, 1
  004f7	89 45 e4	 mov	 DWORD PTR _num_lines_drawn$[ebp], eax

; 1090 :                                  
; 1091 : 						#endif         
; 1092 :                                  
; 1093 : 						index += step_size;

  004fa	8b 45 f0	 mov	 eax, DWORD PTR _index$[ebp]
  004fd	03 45 ec	 add	 eax, DWORD PTR _step_size$[ebp]
  00500	89 45 f0	 mov	 DWORD PTR _index$[ebp], eax

; 1094 : 					}                 

  00503	e9 12 ff ff ff	 jmp	 $LN5@draw_path_
$LN6@draw_path_:

; 1095 :                                  
; 1096 : 					//                
; 1097 : 					// draw line from last sub-position to end node
; 1098 : 					//                
; 1099 :                                  
; 1100 : 					x1 = x2;          

  00508	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0050d	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1101 : 					z1 = z2;          

  00512	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00517	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 1102 :                                  
; 1103 : 					x2 = (nodes[paths[this_path].to].x - x_world_mid) * scale;

  0051c	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00520	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00523	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  00528	8b 45 10	 mov	 eax, DWORD PTR _nodes$[ebp]
  0052b	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00530	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR _x_world_mid$[ebp]
  00535	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0053a	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1104 : 					z2 = (nodes[paths[this_path].to].z - z_world_mid) * scale;

  0053f	6b 45 fc 24	 imul	 eax, DWORD PTR _this_path$[ebp], 36
  00543	8b 4d 0c	 mov	 ecx, DWORD PTR _paths$[ebp]
  00546	6b 54 01 04 0c	 imul	 edx, DWORD PTR [ecx+eax+4], 12
  0054b	8b 45 10	 mov	 eax, DWORD PTR _nodes$[ebp]
  0054e	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
  00554	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _z_world_mid$[ebp]
  00559	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0055e	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0

; 1105 :                                  
; 1106 : 					if (draw_thick_lines && draw_large_mfd)

  00563	83 7d 38 00	 cmp	 DWORD PTR _draw_thick_lines$[ebp], 0
  00567	74 3d		 je	 SHORT $LN28@draw_path_
  00569	83 7d 3c 00	 cmp	 DWORD PTR _draw_large_mfd$[ebp], 0
  0056d	74 37		 je	 SHORT $LN28@draw_path_

; 1107 : 					{                 
; 1108 : 						draw_2d_half_thick_line (x1, z1, x2, z2, colour);

  0056f	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  00572	50		 push	 eax
  00573	51		 push	 ecx
  00574	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	51		 push	 ecx
  0058a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  0058f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00594	51		 push	 ecx
  00595	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0059a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059f	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 1109 : 					}                 
; 1110 : 					else              

  005a4	eb 35		 jmp	 SHORT $LN29@draw_path_
$LN28@draw_path_:

; 1111 : 					{                 
; 1112 : 						draw_2d_line (x1, z1, x2, z2, colour);

  005a6	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  005a9	50		 push	 eax
  005aa	51		 push	 ecx
  005ab	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  005b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b5	51		 push	 ecx
  005b6	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c0	51		 push	 ecx
  005c1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  005c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cb	51		 push	 ecx
  005cc	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  005d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN29@draw_path_:

; 1113 : 					}                 
; 1114 :                                  
; 1115 : 					#if OPTIMISE_PATHS
; 1116 :                                  
; 1117 : 					num_lines_drawn++;

  005db	8b 45 e4	 mov	 eax, DWORD PTR _num_lines_drawn$[ebp]
  005de	83 c0 01	 add	 eax, 1
  005e1	89 45 e4	 mov	 DWORD PTR _num_lines_drawn$[ebp], eax
$LN21@draw_path_:

; 1118 :                                  
; 1119 : 					#endif            
; 1120 : 				}                    
; 1121 : 			}                       
; 1122 : 		}                          
; 1123 : 	}                             

  005e4	e9 a0 fa ff ff	 jmp	 $LN2@draw_path_
$LN3@draw_path_:

; 1124 :                                  
; 1125 : 	#if OPTIMISE_PATHS            
; 1126 :                                  
; 1127 : 	debug_filtered_log ("paths=%d, paths drawn=%d, lines drawn=%d", number_of_paths, num_paths_traversed, num_lines_drawn);

  005e9	8b 45 e4	 mov	 eax, DWORD PTR _num_lines_drawn$[ebp]
  005ec	50		 push	 eax
  005ed	8b 4d e8	 mov	 ecx, DWORD PTR _num_paths_traversed$[ebp]
  005f0	51		 push	 ecx
  005f1	8b 55 08	 mov	 edx, DWORD PTR _number_of_paths$[ebp]
  005f4	52		 push	 edx
  005f5	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@MPKOBANJ@paths?$DN?$CFd?0?5paths?5drawn?$DN?$CFd?0?5lines@
  005fa	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  005ff	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@draw_path_:

; 1128 :                                  
; 1129 : 	#endif                        
; 1130 : }                                

  00602	5f		 pop	 edi
  00603	5e		 pop	 esi
  00604	5b		 pop	 ebx
  00605	8b e5		 mov	 esp, ebp
  00607	5d		 pop	 ebp
  00608	c2 38 00	 ret	 56			; 00000038H
?draw_path_lines@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@HMMMMMMMHH@Z ENDP ; draw_path_lines
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YGABHABH0@Z PROC				; std::max<int>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@max
  00021	eb 4a		 jmp	 SHORT $LN2@max
$LN7@max:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 0e 15 00 00	 push	 5390			; 0000150eH
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@max
  00049	cc		 int	 3
$LN12@max:
  0004a	6a 00		 push	 0
  0004c	68 0e 15 00 00	 push	 5390			; 0000150eH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@max
$LN2@max:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@max:

; 5395 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$max@H@std@@YGABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?draw_contour_lines@@YGXPAUVEC3D@@00@Z
_TEXT	SEGMENT
tv246 = -160						; size = 4
tv218 = -160						; size = 4
tv181 = -160						; size = 4
tv148 = -160						; size = 4
$T1 = -156						; size = 4
$T2 = -152						; size = 4
$T3 = -148						; size = 4
_one_over_dy$ = -80					; size = 4
_z_tmp$ = -76						; size = 4
_x_tmp$ = -72						; size = 4
_dz2$ = -68						; size = 4
_dx2$ = -64						; size = 4
_dz1$ = -60						; size = 4
_dx1$ = -56						; size = 4
_z3$ = -52						; size = 4
_x3$ = -48						; size = 4
_z2$ = -44						; size = 4
_x2$ = -40						; size = 4
_z1$ = -36						; size = 4
_x1$ = -32						; size = 4
_contour_samples_minus_one$ = -28			; size = 4
_y_tmp$ = -24						; size = 4
_dy$ = -20						; size = 4
_y3$ = -16						; size = 4
_y2$ = -12						; size = 4
_y1$ = -8						; size = 4
_y$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_p3$ = 16						; size = 4
?draw_contour_lines@@YGXPAUVEC3D@@00@Z PROC		; draw_contour_lines, COMDAT

; 596  : {                                

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 597  : 	int                           
; 598  : 		y,                         
; 599  : 		y1,                        
; 600  : 		y2,                        
; 601  : 		y3,                        
; 602  : 		dy,                        
; 603  : 		y_tmp,                     
; 604  : 		contour_samples_minus_one; 
; 605  :                                  
; 606  : 	float                         
; 607  : 		x1,                        
; 608  : 		z1,                        
; 609  : 		x2,                        
; 610  : 		z2,                        
; 611  : 		x3,                        
; 612  : 		z3,                        
; 613  : 		dx1,                       
; 614  : 		dz1,                       
; 615  : 		dx2,                       
; 616  : 		dz2,                       
; 617  : 		x_tmp,                     
; 618  : 		z_tmp,                     
; 619  : 		one_over_dy;               
; 620  :                                  
; 621  : 	x1 = p1->x;                   

  0000c	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 622  : 	convert_float_to_int (p1->y, &y1);

  00018	8d 45 f8	 lea	 eax, DWORD PTR _y1$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  0001f	51		 push	 ecx
  00020	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00025	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 623  : 	z1 = p1->z;                   

  0002f	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00032	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00037	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 624  :                                  
; 625  : 	x2 = p2->x;                   

  0003c	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  0003f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00043	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 626  : 	convert_float_to_int (p2->y, &y2);

  00048	8d 45 f4	 lea	 eax, DWORD PTR _y2$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0004f	51		 push	 ecx
  00050	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00055	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 627  : 	z2 = p2->z;                   

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  00062	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00067	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0

; 628  :                                  
; 629  : 	x3 = p3->x;                   

  0006c	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  0006f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00073	f3 0f 11 45 d0	 movss	 DWORD PTR _x3$[ebp], xmm0

; 630  : 	convert_float_to_int (p3->y, &y3);

  00078	8d 45 f0	 lea	 eax, DWORD PTR _y3$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _p3$[ebp]
  0007f	51		 push	 ecx
  00080	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 631  : 	z3 = p3->z;                   

  0008f	8b 45 10	 mov	 eax, DWORD PTR _p3$[ebp]
  00092	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00097	f3 0f 11 45 cc	 movss	 DWORD PTR _z3$[ebp], xmm0

; 632  :                                  
; 633  : 	//                            
; 634  : 	// ensure above sea level     
; 635  : 	//                            
; 636  :                                  
; 637  : 	y1 = max (y1, 0);             

  0009c	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], 0
  000a6	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000ac	50		 push	 eax
  000ad	8d 4d f8	 lea	 ecx, DWORD PTR _y1$[ebp]
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  000b6	8b 10		 mov	 edx, DWORD PTR [eax]
  000b8	89 55 f8	 mov	 DWORD PTR _y1$[ebp], edx

; 638  :                                  
; 639  : 	y2 = max (y2, 0);             

  000bb	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  000c5	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000cb	50		 push	 eax
  000cc	8d 4d f4	 lea	 ecx, DWORD PTR _y2$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  000d5	8b 10		 mov	 edx, DWORD PTR [eax]
  000d7	89 55 f4	 mov	 DWORD PTR _y2$[ebp], edx

; 640  :                                  
; 641  : 	y3 = max (y3, 0);             

  000da	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0
  000e4	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000ea	50		 push	 eax
  000eb	8d 4d f0	 lea	 ecx, DWORD PTR _y3$[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  000f4	8b 10		 mov	 edx, DWORD PTR [eax]
  000f6	89 55 f0	 mov	 DWORD PTR _y3$[ebp], edx

; 642  :                                  
; 643  : 	//                            
; 644  : 	// scale height values for contour line spacing
; 645  : 	//                            
; 646  :                                  
; 647  : 	y1 /= contour_spacing;        

  000f9	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  000fc	99		 cdq
  000fd	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?contour_spacing@@3HA
  00103	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax

; 648  : 	y2 /= contour_spacing;        

  00106	8b 45 f4	 mov	 eax, DWORD PTR _y2$[ebp]
  00109	99		 cdq
  0010a	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?contour_spacing@@3HA
  00110	89 45 f4	 mov	 DWORD PTR _y2$[ebp], eax

; 649  : 	y3 /= contour_spacing;        

  00113	8b 45 f0	 mov	 eax, DWORD PTR _y3$[ebp]
  00116	99		 cdq
  00117	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?contour_spacing@@3HA
  0011d	89 45 f0	 mov	 DWORD PTR _y3$[ebp], eax

; 650  :                                  
; 651  : 	contour_samples_minus_one = contour_samples - 1;

  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_samples@@3HA
  00125	83 e8 01	 sub	 eax, 1
  00128	89 45 e4	 mov	 DWORD PTR _contour_samples_minus_one$[ebp], eax

; 652  :                                  
; 653  : 	//                            
; 654  : 	// check if flat              
; 655  : 	//                            
; 656  :                                  
; 657  : 	if ((y1 == y2) && (y2 == y3)) 

  0012b	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  0012e	3b 45 f4	 cmp	 eax, DWORD PTR _y2$[ebp]
  00131	75 0d		 jne	 SHORT $LN10@draw_conto
  00133	8b 45 f4	 mov	 eax, DWORD PTR _y2$[ebp]
  00136	3b 45 f0	 cmp	 eax, DWORD PTR _y3$[ebp]
  00139	75 05		 jne	 SHORT $LN10@draw_conto

; 658  : 	{                             
; 659  : 		return;                    

  0013b	e9 9b 06 00 00	 jmp	 $LN1@draw_conto
$LN10@draw_conto:

; 660  : 	}                             
; 661  :                                  
; 662  : 	//                            
; 663  : 	// sort height values (y1 = lowest, y3 = highest)
; 664  : 	//                            
; 665  :                                  
; 666  : 	if (y1 > y3)                  

  00140	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  00143	3b 45 f0	 cmp	 eax, DWORD PTR _y3$[ebp]
  00146	7e 4e		 jle	 SHORT $LN11@draw_conto

; 667  : 	{                             
; 668  : 		x_tmp = x1;                

  00148	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0014d	f3 0f 11 45 b8	 movss	 DWORD PTR _x_tmp$[ebp], xmm0

; 669  : 		y_tmp = y1;                

  00152	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  00155	89 45 e8	 mov	 DWORD PTR _y_tmp$[ebp], eax

; 670  : 		z_tmp = z1;                

  00158	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  0015d	f3 0f 11 45 b4	 movss	 DWORD PTR _z_tmp$[ebp], xmm0

; 671  :                                  
; 672  : 		x1 = x3;                   

  00162	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00167	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 673  : 		y1 = y3;                   

  0016c	8b 45 f0	 mov	 eax, DWORD PTR _y3$[ebp]
  0016f	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax

; 674  : 		z1 = z3;                   

  00172	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _z3$[ebp]
  00177	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 675  :                                  
; 676  : 		x3 = x_tmp;                

  0017c	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _x_tmp$[ebp]
  00181	f3 0f 11 45 d0	 movss	 DWORD PTR _x3$[ebp], xmm0

; 677  : 		y3 = y_tmp;                

  00186	8b 45 e8	 mov	 eax, DWORD PTR _y_tmp$[ebp]
  00189	89 45 f0	 mov	 DWORD PTR _y3$[ebp], eax

; 678  : 		z3 = z_tmp;                

  0018c	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _z_tmp$[ebp]
  00191	f3 0f 11 45 cc	 movss	 DWORD PTR _z3$[ebp], xmm0
$LN11@draw_conto:

; 679  : 	}                             
; 680  :                                  
; 681  : 	if (y2 > y3)                  

  00196	8b 45 f4	 mov	 eax, DWORD PTR _y2$[ebp]
  00199	3b 45 f0	 cmp	 eax, DWORD PTR _y3$[ebp]
  0019c	7e 4e		 jle	 SHORT $LN12@draw_conto

; 682  : 	{                             
; 683  : 		x_tmp = x2;                

  0019e	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001a3	f3 0f 11 45 b8	 movss	 DWORD PTR _x_tmp$[ebp], xmm0

; 684  : 		y_tmp = y2;                

  001a8	8b 45 f4	 mov	 eax, DWORD PTR _y2$[ebp]
  001ab	89 45 e8	 mov	 DWORD PTR _y_tmp$[ebp], eax

; 685  : 		z_tmp = z2;                

  001ae	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  001b3	f3 0f 11 45 b4	 movss	 DWORD PTR _z_tmp$[ebp], xmm0

; 686  :                                  
; 687  : 		x2 = x3;                   

  001b8	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x3$[ebp]
  001bd	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 688  : 		y2 = y3;                   

  001c2	8b 45 f0	 mov	 eax, DWORD PTR _y3$[ebp]
  001c5	89 45 f4	 mov	 DWORD PTR _y2$[ebp], eax

; 689  : 		z2 = z3;                   

  001c8	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _z3$[ebp]
  001cd	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0

; 690  :                                  
; 691  : 		x3 = x_tmp;                

  001d2	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _x_tmp$[ebp]
  001d7	f3 0f 11 45 d0	 movss	 DWORD PTR _x3$[ebp], xmm0

; 692  : 		y3 = y_tmp;                

  001dc	8b 45 e8	 mov	 eax, DWORD PTR _y_tmp$[ebp]
  001df	89 45 f0	 mov	 DWORD PTR _y3$[ebp], eax

; 693  : 		z3 = z_tmp;                

  001e2	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _z_tmp$[ebp]
  001e7	f3 0f 11 45 cc	 movss	 DWORD PTR _z3$[ebp], xmm0
$LN12@draw_conto:

; 694  : 	}                             
; 695  :                                  
; 696  : 	if (y1 > y2)                  

  001ec	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  001ef	3b 45 f4	 cmp	 eax, DWORD PTR _y2$[ebp]
  001f2	7e 4e		 jle	 SHORT $LN13@draw_conto

; 697  : 	{                             
; 698  : 		x_tmp = x1;                

  001f4	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001f9	f3 0f 11 45 b8	 movss	 DWORD PTR _x_tmp$[ebp], xmm0

; 699  : 		y_tmp = y1;                

  001fe	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  00201	89 45 e8	 mov	 DWORD PTR _y_tmp$[ebp], eax

; 700  : 		z_tmp = z1;                

  00204	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00209	f3 0f 11 45 b4	 movss	 DWORD PTR _z_tmp$[ebp], xmm0

; 701  :                                  
; 702  : 		x1 = x2;                   

  0020e	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00213	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 703  : 		y1 = y2;                   

  00218	8b 45 f4	 mov	 eax, DWORD PTR _y2$[ebp]
  0021b	89 45 f8	 mov	 DWORD PTR _y1$[ebp], eax

; 704  : 		z1 = z2;                   

  0021e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00223	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 705  :                                  
; 706  : 		x2 = x_tmp;                

  00228	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _x_tmp$[ebp]
  0022d	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 707  : 		y2 = y_tmp;                

  00232	8b 45 e8	 mov	 eax, DWORD PTR _y_tmp$[ebp]
  00235	89 45 f4	 mov	 DWORD PTR _y2$[ebp], eax

; 708  : 		z2 = z_tmp;                

  00238	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _z_tmp$[ebp]
  0023d	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0
$LN13@draw_conto:

; 709  : 	}                             
; 710  :                                  
; 711  : 	//                            
; 712  : 	// draw contour lines         
; 713  : 	//                            
; 714  :                                  
; 715  : 	if (y1 == y2)                 

  00242	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  00245	3b 45 f4	 cmp	 eax, DWORD PTR _y2$[ebp]
  00248	0f 85 59 01 00
	00		 jne	 $LN14@draw_conto

; 716  : 	{                             
; 717  : 		dy = y3 - y1;              

  0024e	8b 45 f0	 mov	 eax, DWORD PTR _y3$[ebp]
  00251	2b 45 f8	 sub	 eax, DWORD PTR _y1$[ebp]
  00254	89 45 ec	 mov	 DWORD PTR _dy$[ebp], eax

; 718  :                                  
; 719  : 		one_over_dy = 1.0 / (float) dy;

  00257	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _dy$[ebp]
  0025c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00260	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00268	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0026c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00270	f3 0f 11 45 b0	 movss	 DWORD PTR _one_over_dy$[ebp], xmm0

; 720  :                                  
; 721  : 		dx1 = (x3 - x1) * one_over_dy;

  00275	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x3$[ebp]
  0027a	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _x1$[ebp]
  0027f	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  00284	f3 0f 11 45 c8	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 722  : 		dz1 = (z3 - z1) * one_over_dy;

  00289	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _z3$[ebp]
  0028e	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _z1$[ebp]
  00293	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  00298	f3 0f 11 45 c4	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 723  : 		dx2 = (x3 - x2) * one_over_dy;

  0029d	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x3$[ebp]
  002a2	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _x2$[ebp]
  002a7	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  002ac	f3 0f 11 45 c0	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 724  : 		dz2 = (z3 - z2) * one_over_dy;

  002b1	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _z3$[ebp]
  002b6	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _z2$[ebp]
  002bb	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  002c0	f3 0f 11 45 bc	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 725  :                                  
; 726  : 		y = contour_samples_minus_one - ((y1 - 1) % contour_samples);

  002c5	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  002c8	83 e8 01	 sub	 eax, 1
  002cb	99		 cdq
  002cc	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?contour_samples@@3HA
  002d2	8b 45 e4	 mov	 eax, DWORD PTR _contour_samples_minus_one$[ebp]
  002d5	2b c2		 sub	 eax, edx
  002d7	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax
$LN2@draw_conto:

; 727  :                                  
; 728  : 		while (dy--)               

  002da	8b 45 ec	 mov	 eax, DWORD PTR _dy$[ebp]
  002dd	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv148[ebp], eax
  002e3	8b 4d ec	 mov	 ecx, DWORD PTR _dy$[ebp]
  002e6	83 e9 01	 sub	 ecx, 1
  002e9	89 4d ec	 mov	 DWORD PTR _dy$[ebp], ecx
  002ec	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR tv148[ebp], 0
  002f3	0f 84 a9 00 00
	00		 je	 $LN3@draw_conto

; 729  : 		{                          
; 730  : 			#if OPTIMISE_CONTOURS   
; 731  :                                  
; 732  : 			num_contour_loops++;    

  002f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_contour_loops@@3HA
  002fe	83 c0 01	 add	 eax, 1
  00301	a3 00 00 00 00	 mov	 DWORD PTR ?num_contour_loops@@3HA, eax

; 733  :                                  
; 734  : 			#endif                  
; 735  :                                  
; 736  : 			if (y == 0)             

  00306	83 7d fc 00	 cmp	 DWORD PTR _y$[ebp], 0
  0030a	75 4c		 jne	 SHORT $LN16@draw_conto

; 737  : 			{                       
; 738  : 				#if OPTIMISE_CONTOURS
; 739  :                                  
; 740  : 				num_contour_lines++; 

  0030c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_contour_lines@@3HA
  00311	83 c0 01	 add	 eax, 1
  00314	a3 00 00 00 00	 mov	 DWORD PTR ?num_contour_lines@@3HA, eax

; 741  :                                  
; 742  : 				#endif               
; 743  :                                  
; 744  : 				y = contour_samples; 

  00319	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_samples@@3HA
  0031e	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 745  :                                  
; 746  : 				draw_2d_line (x1, z1, x2, z2, map_contour_colour);

  00321	a1 00 00 00 00	 mov	 eax, DWORD PTR ?map_contour_colour@@3UREAL_COLOUR@@A
  00326	50		 push	 eax
  00327	51		 push	 ecx
  00328	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0032d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00332	51		 push	 ecx
  00333	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00338	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033d	51		 push	 ecx
  0033e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00343	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00348	51		 push	 ecx
  00349	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0034e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00353	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN16@draw_conto:

; 747  : 			}                       
; 748  :                                  
; 749  : 			y--;                    

  00358	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  0035b	83 e8 01	 sub	 eax, 1
  0035e	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 750  :                                  
; 751  : 			x1 += dx1;              

  00361	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00366	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _dx1$[ebp]
  0036b	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 752  : 			z1 += dz1;              

  00370	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00375	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _dz1$[ebp]
  0037a	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 753  : 			x2 += dx2;              

  0037f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00384	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _dx2$[ebp]
  00389	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 754  : 			z2 += dz2;              

  0038e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00393	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _dz2$[ebp]
  00398	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0

; 755  : 		}                          

  0039d	e9 38 ff ff ff	 jmp	 $LN2@draw_conto
$LN3@draw_conto:

; 756  : 	}                             
; 757  : 	else if (y2 == y3)            

  003a2	e9 34 04 00 00	 jmp	 $LN9@draw_conto
$LN14@draw_conto:
  003a7	8b 45 f4	 mov	 eax, DWORD PTR _y2$[ebp]
  003aa	3b 45 f0	 cmp	 eax, DWORD PTR _y3$[ebp]
  003ad	0f 85 6d 01 00
	00		 jne	 $LN17@draw_conto

; 758  : 	{                             
; 759  : 		dy = y2 - y1;              

  003b3	8b 45 f4	 mov	 eax, DWORD PTR _y2$[ebp]
  003b6	2b 45 f8	 sub	 eax, DWORD PTR _y1$[ebp]
  003b9	89 45 ec	 mov	 DWORD PTR _dy$[ebp], eax

; 760  :                                  
; 761  : 		one_over_dy = 1.0 / (float) dy;

  003bc	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _dy$[ebp]
  003c1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003c5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003cd	f2 0f 5e c8	 divsd	 xmm1, xmm0
  003d1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003d5	f3 0f 11 45 b0	 movss	 DWORD PTR _one_over_dy$[ebp], xmm0

; 762  :                                  
; 763  : 		dx1 = (x2 - x1) * one_over_dy;

  003da	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  003df	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _x1$[ebp]
  003e4	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  003e9	f3 0f 11 45 c8	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 764  : 		dz1 = (z2 - z1) * one_over_dy;

  003ee	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  003f3	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _z1$[ebp]
  003f8	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  003fd	f3 0f 11 45 c4	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 765  : 		dx2 = (x3 - x1) * one_over_dy;

  00402	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00407	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _x1$[ebp]
  0040c	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  00411	f3 0f 11 45 c0	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 766  : 		dz2 = (z3 - z1) * one_over_dy;

  00416	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _z3$[ebp]
  0041b	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _z1$[ebp]
  00420	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  00425	f3 0f 11 45 bc	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 767  :                                  
; 768  : 		y = contour_samples_minus_one - ((y1 - 1) % contour_samples);

  0042a	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  0042d	83 e8 01	 sub	 eax, 1
  00430	99		 cdq
  00431	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?contour_samples@@3HA
  00437	8b 45 e4	 mov	 eax, DWORD PTR _contour_samples_minus_one$[ebp]
  0043a	2b c2		 sub	 eax, edx
  0043c	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 769  :                                  
; 770  : 		x2 = x1;                   

  0043f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00444	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 771  : 		z2 = z1;                   

  00449	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  0044e	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0
$LN4@draw_conto:

; 772  :                                  
; 773  : 		while (dy--)               

  00453	8b 45 ec	 mov	 eax, DWORD PTR _dy$[ebp]
  00456	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv181[ebp], eax
  0045c	8b 4d ec	 mov	 ecx, DWORD PTR _dy$[ebp]
  0045f	83 e9 01	 sub	 ecx, 1
  00462	89 4d ec	 mov	 DWORD PTR _dy$[ebp], ecx
  00465	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR tv181[ebp], 0
  0046c	0f 84 a9 00 00
	00		 je	 $LN5@draw_conto

; 774  : 		{                          
; 775  : 			#if OPTIMISE_CONTOURS   
; 776  :                                  
; 777  : 			num_contour_loops++;    

  00472	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_contour_loops@@3HA
  00477	83 c0 01	 add	 eax, 1
  0047a	a3 00 00 00 00	 mov	 DWORD PTR ?num_contour_loops@@3HA, eax

; 778  :                                  
; 779  : 			#endif                  
; 780  :                                  
; 781  : 			if (y == 0)             

  0047f	83 7d fc 00	 cmp	 DWORD PTR _y$[ebp], 0
  00483	75 4c		 jne	 SHORT $LN19@draw_conto

; 782  : 			{                       
; 783  : 				#if OPTIMISE_CONTOURS
; 784  :                                  
; 785  : 				num_contour_lines++; 

  00485	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_contour_lines@@3HA
  0048a	83 c0 01	 add	 eax, 1
  0048d	a3 00 00 00 00	 mov	 DWORD PTR ?num_contour_lines@@3HA, eax

; 786  :                                  
; 787  : 				#endif               
; 788  :                                  
; 789  : 				y = contour_samples; 

  00492	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_samples@@3HA
  00497	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 790  :                                  
; 791  : 				draw_2d_line (x1, z1, x2, z2, map_contour_colour);

  0049a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?map_contour_colour@@3UREAL_COLOUR@@A
  0049f	50		 push	 eax
  004a0	51		 push	 ecx
  004a1	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  004a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ab	51		 push	 ecx
  004ac	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  004b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b6	51		 push	 ecx
  004b7	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  004bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c1	51		 push	 ecx
  004c2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN19@draw_conto:

; 792  :                                  
; 793  : 			}                       
; 794  :                                  
; 795  : 			y--;                    

  004d1	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  004d4	83 e8 01	 sub	 eax, 1
  004d7	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 796  :                                  
; 797  : 			x1 += dx1;              

  004da	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004df	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _dx1$[ebp]
  004e4	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 798  : 			z1 += dz1;              

  004e9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  004ee	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _dz1$[ebp]
  004f3	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 799  : 			x2 += dx2;              

  004f8	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  004fd	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _dx2$[ebp]
  00502	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 800  : 			z2 += dz2;              

  00507	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0050c	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _dz2$[ebp]
  00511	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0

; 801  : 		}                          

  00516	e9 38 ff ff ff	 jmp	 $LN4@draw_conto
$LN5@draw_conto:

; 802  : 	}                             
; 803  : 	else                          

  0051b	e9 bb 02 00 00	 jmp	 $LN9@draw_conto
$LN17@draw_conto:

; 804  : 	{                             
; 805  : 		dy = y3 - y1;              

  00520	8b 45 f0	 mov	 eax, DWORD PTR _y3$[ebp]
  00523	2b 45 f8	 sub	 eax, DWORD PTR _y1$[ebp]
  00526	89 45 ec	 mov	 DWORD PTR _dy$[ebp], eax

; 806  :                                  
; 807  : 		one_over_dy = 1.0 / (float) dy;

  00529	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _dy$[ebp]
  0052e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00532	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0053a	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0053e	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00542	f3 0f 11 45 b0	 movss	 DWORD PTR _one_over_dy$[ebp], xmm0

; 808  :                                  
; 809  : 		dx1 = (x3 - x1) * one_over_dy;

  00547	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x3$[ebp]
  0054c	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _x1$[ebp]
  00551	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  00556	f3 0f 11 45 c8	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 810  : 		dz1 = (z3 - z1) * one_over_dy;

  0055b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _z3$[ebp]
  00560	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _z1$[ebp]
  00565	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  0056a	f3 0f 11 45 c4	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 811  :                                  
; 812  : 		dy = y2 - y1;              

  0056f	8b 45 f4	 mov	 eax, DWORD PTR _y2$[ebp]
  00572	2b 45 f8	 sub	 eax, DWORD PTR _y1$[ebp]
  00575	89 45 ec	 mov	 DWORD PTR _dy$[ebp], eax

; 813  :                                  
; 814  : 		one_over_dy = 1.0 / (float) dy;

  00578	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _dy$[ebp]
  0057d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00581	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00589	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0058d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00591	f3 0f 11 45 b0	 movss	 DWORD PTR _one_over_dy$[ebp], xmm0

; 815  :                                  
; 816  : 		dx2 = (x2 - x1) * one_over_dy;

  00596	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0059b	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _x1$[ebp]
  005a0	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  005a5	f3 0f 11 45 c0	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 817  : 		dz2 = (z2 - z1) * one_over_dy;

  005aa	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  005af	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _z1$[ebp]
  005b4	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  005b9	f3 0f 11 45 bc	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 818  :                                  
; 819  : 		y = contour_samples_minus_one - ((y1 - 1) % contour_samples);

  005be	8b 45 f8	 mov	 eax, DWORD PTR _y1$[ebp]
  005c1	83 e8 01	 sub	 eax, 1
  005c4	99		 cdq
  005c5	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?contour_samples@@3HA
  005cb	8b 45 e4	 mov	 eax, DWORD PTR _contour_samples_minus_one$[ebp]
  005ce	2b c2		 sub	 eax, edx
  005d0	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 820  :                                  
; 821  : 		x2 = x1;                   

  005d3	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  005d8	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 822  : 		z2 = z1;                   

  005dd	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  005e2	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0
$LN6@draw_conto:

; 823  :                                  
; 824  : 		while (dy--)               

  005e7	8b 45 ec	 mov	 eax, DWORD PTR _dy$[ebp]
  005ea	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv218[ebp], eax
  005f0	8b 4d ec	 mov	 ecx, DWORD PTR _dy$[ebp]
  005f3	83 e9 01	 sub	 ecx, 1
  005f6	89 4d ec	 mov	 DWORD PTR _dy$[ebp], ecx
  005f9	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR tv218[ebp], 0
  00600	0f 84 a9 00 00
	00		 je	 $LN7@draw_conto

; 825  : 		{                          
; 826  : 			#if OPTIMISE_CONTOURS   
; 827  :                                  
; 828  : 			num_contour_loops++;    

  00606	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_contour_loops@@3HA
  0060b	83 c0 01	 add	 eax, 1
  0060e	a3 00 00 00 00	 mov	 DWORD PTR ?num_contour_loops@@3HA, eax

; 829  :                                  
; 830  : 			#endif                  
; 831  :                                  
; 832  : 			if (y == 0)             

  00613	83 7d fc 00	 cmp	 DWORD PTR _y$[ebp], 0
  00617	75 4c		 jne	 SHORT $LN20@draw_conto

; 833  : 			{                       
; 834  : 				#if OPTIMISE_CONTOURS
; 835  :                                  
; 836  : 				num_contour_lines++; 

  00619	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_contour_lines@@3HA
  0061e	83 c0 01	 add	 eax, 1
  00621	a3 00 00 00 00	 mov	 DWORD PTR ?num_contour_lines@@3HA, eax

; 837  :                                  
; 838  : 				#endif               
; 839  :                                  
; 840  : 				y = contour_samples; 

  00626	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_samples@@3HA
  0062b	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 841  :                                  
; 842  : 				draw_2d_line (x1, z1, x2, z2, map_contour_colour);

  0062e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?map_contour_colour@@3UREAL_COLOUR@@A
  00633	50		 push	 eax
  00634	51		 push	 ecx
  00635	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0063a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063f	51		 push	 ecx
  00640	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00645	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064a	51		 push	 ecx
  0064b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00650	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00655	51		 push	 ecx
  00656	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0065b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00660	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN20@draw_conto:

; 843  :                                  
; 844  : 			}                       
; 845  :                                  
; 846  : 			y--;                    

  00665	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  00668	83 e8 01	 sub	 eax, 1
  0066b	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 847  :                                  
; 848  : 			x1 += dx1;              

  0066e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00673	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _dx1$[ebp]
  00678	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 849  : 			z1 += dz1;              

  0067d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00682	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _dz1$[ebp]
  00687	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 850  : 			x2 += dx2;              

  0068c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00691	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _dx2$[ebp]
  00696	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 851  : 			z2 += dz2;              

  0069b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  006a0	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _dz2$[ebp]
  006a5	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0

; 852  : 		}                          

  006aa	e9 38 ff ff ff	 jmp	 $LN6@draw_conto
$LN7@draw_conto:

; 853  :                                  
; 854  : 		dy = y3 - y2;              

  006af	8b 45 f0	 mov	 eax, DWORD PTR _y3$[ebp]
  006b2	2b 45 f4	 sub	 eax, DWORD PTR _y2$[ebp]
  006b5	89 45 ec	 mov	 DWORD PTR _dy$[ebp], eax

; 855  :                                  
; 856  : 		one_over_dy = 1.0 / (float) dy;

  006b8	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _dy$[ebp]
  006bd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  006c1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  006c9	f2 0f 5e c8	 divsd	 xmm1, xmm0
  006cd	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  006d1	f3 0f 11 45 b0	 movss	 DWORD PTR _one_over_dy$[ebp], xmm0

; 857  :                                  
; 858  : 		dx2 = (x3 - x2) * one_over_dy;

  006d6	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x3$[ebp]
  006db	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _x2$[ebp]
  006e0	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  006e5	f3 0f 11 45 c0	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 859  : 		dz2 = (z3 - z2) * one_over_dy;

  006ea	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _z3$[ebp]
  006ef	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _z2$[ebp]
  006f4	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _one_over_dy$[ebp]
  006f9	f3 0f 11 45 bc	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 860  :                                  
; 861  : 		y = contour_samples_minus_one - ((y2 - 1) % contour_samples);

  006fe	8b 45 f4	 mov	 eax, DWORD PTR _y2$[ebp]
  00701	83 e8 01	 sub	 eax, 1
  00704	99		 cdq
  00705	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?contour_samples@@3HA
  0070b	8b 45 e4	 mov	 eax, DWORD PTR _contour_samples_minus_one$[ebp]
  0070e	2b c2		 sub	 eax, edx
  00710	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax
$LN8@draw_conto:

; 862  :                                  
; 863  : 		while (dy--)               

  00713	8b 45 ec	 mov	 eax, DWORD PTR _dy$[ebp]
  00716	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv246[ebp], eax
  0071c	8b 4d ec	 mov	 ecx, DWORD PTR _dy$[ebp]
  0071f	83 e9 01	 sub	 ecx, 1
  00722	89 4d ec	 mov	 DWORD PTR _dy$[ebp], ecx
  00725	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR tv246[ebp], 0
  0072c	0f 84 a9 00 00
	00		 je	 $LN9@draw_conto

; 864  : 		{                          
; 865  : 			#if OPTIMISE_CONTOURS   
; 866  :                                  
; 867  : 			num_contour_loops++;    

  00732	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_contour_loops@@3HA
  00737	83 c0 01	 add	 eax, 1
  0073a	a3 00 00 00 00	 mov	 DWORD PTR ?num_contour_loops@@3HA, eax

; 868  :                                  
; 869  : 			#endif                  
; 870  :                                  
; 871  : 			if (y == 0)             

  0073f	83 7d fc 00	 cmp	 DWORD PTR _y$[ebp], 0
  00743	75 4c		 jne	 SHORT $LN21@draw_conto

; 872  : 			{                       
; 873  : 				#if OPTIMISE_CONTOURS
; 874  :                                  
; 875  : 				num_contour_lines++; 

  00745	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_contour_lines@@3HA
  0074a	83 c0 01	 add	 eax, 1
  0074d	a3 00 00 00 00	 mov	 DWORD PTR ?num_contour_lines@@3HA, eax

; 876  :                                  
; 877  : 				#endif               
; 878  :                                  
; 879  : 				y = contour_samples; 

  00752	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_samples@@3HA
  00757	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 880  :                                  
; 881  : 				draw_2d_line (x1, z1, x2, z2, map_contour_colour);

  0075a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?map_contour_colour@@3UREAL_COLOUR@@A
  0075f	50		 push	 eax
  00760	51		 push	 ecx
  00761	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00766	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076b	51		 push	 ecx
  0076c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00771	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00776	51		 push	 ecx
  00777	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  0077c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00781	51		 push	 ecx
  00782	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00787	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN21@draw_conto:

; 882  : 			}                       
; 883  :                                  
; 884  : 			y--;                    

  00791	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  00794	83 e8 01	 sub	 eax, 1
  00797	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 885  :                                  
; 886  : 			x1 += dx1;              

  0079a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0079f	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _dx1$[ebp]
  007a4	f3 0f 11 45 e0	 movss	 DWORD PTR _x1$[ebp], xmm0

; 887  : 			z1 += dz1;              

  007a9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z1$[ebp]
  007ae	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _dz1$[ebp]
  007b3	f3 0f 11 45 dc	 movss	 DWORD PTR _z1$[ebp], xmm0

; 888  : 			x2 += dx2;              

  007b8	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  007bd	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _dx2$[ebp]
  007c2	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 889  : 			z2 += dz2;              

  007c7	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z2$[ebp]
  007cc	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _dz2$[ebp]
  007d1	f3 0f 11 45 d4	 movss	 DWORD PTR _z2$[ebp], xmm0

; 890  : 		}                          

  007d6	e9 38 ff ff ff	 jmp	 $LN8@draw_conto
$LN9@draw_conto:
$LN1@draw_conto:

; 891  : 	}                             
; 892  : }                                

  007db	5f		 pop	 edi
  007dc	5e		 pop	 esi
  007dd	5b		 pop	 ebx
  007de	8b e5		 mov	 esp, ebp
  007e0	5d		 pop	 ebp
  007e1	c2 0c 00	 ret	 12			; 0000000cH
?draw_contour_lines@@YGXPAUVEC3D@@00@Z ENDP		; draw_contour_lines
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?get_map_coords_from_world@@YGXPAUVEC3D@@M0PAM1@Z
_TEXT	SEGMENT
_source_pos$ = 8					; size = 4
_scale$ = 12						; size = 4
_world_pos$ = 16					; size = 4
_screen_x$ = 20						; size = 4
_screen_y$ = 24						; size = 4
?get_map_coords_from_world@@YGXPAUVEC3D@@M0PAM1@Z PROC	; get_map_coords_from_world, COMDAT

; 586  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 587  : 	*screen_x = (world_pos->x - source_pos->x) * scale;

  00009	8b 45 10	 mov	 eax, DWORD PTR _world_pos$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _source_pos$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00017	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0001c	8b 55 14	 mov	 edx, DWORD PTR _screen_x$[ebp]
  0001f	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 588  : 	*screen_y = (world_pos->z - source_pos->z) * scale;

  00023	8b 45 10	 mov	 eax, DWORD PTR _world_pos$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _source_pos$[ebp]
  00029	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0002e	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00033	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00038	8b 55 18	 mov	 edx, DWORD PTR _screen_y$[ebp]
  0003b	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 589  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 14 00	 ret	 20			; 00000014H
?get_map_coords_from_world@@YGXPAUVEC3D@@M0PAM1@Z ENDP	; get_map_coords_from_world
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?cycle_tsd_map_palette@@YGXXZ
_TEXT	SEGMENT
?cycle_tsd_map_palette@@YGXXZ PROC			; cycle_tsd_map_palette, COMDAT

; 2031 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2032 : 	tsd_render_palette++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tsd_render_palette@@3HA
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?tsd_render_palette@@3HA, eax

; 2033 : 	if (tsd_render_palette == ARRAY_LENGTH(terrain_colour))

  00016	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?tsd_render_palette@@3HA, 4
  0001d	75 0a		 jne	 SHORT $LN2@cycle_tsd_

; 2034 : 	   tsd_render_palette = 0;

  0001f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_render_palette@@3HA, 0
$LN2@cycle_tsd_:

; 2035 : 	command_line_tsd_palette = tsd_render_palette;

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tsd_render_palette@@3HA
  0002e	a3 00 00 00 00	 mov	 DWORD PTR ?command_line_tsd_palette@@3HA, eax ; command_line_tsd_palette

; 2036 : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?cycle_tsd_map_palette@@YGXXZ ENDP			; cycle_tsd_map_palette
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?draw_tsd_map_towns@@YGXPAUVEC3D@@M@Z
_TEXT	SEGMENT
_y$1 = -24						; size = 4
_x$2 = -20						; size = 4
_item$ = -16						; size = 4
_pos$ = -12						; size = 12
_centre_position$ = 8					; size = 4
_scale$ = 12						; size = 4
?draw_tsd_map_towns@@YGXPAUVEC3D@@M@Z PROC		; draw_tsd_map_towns, COMDAT

; 2000 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2001 : 	vec3d
; 2002 : 		pos;
; 2003 : 
; 2004 : 	population_name_database_type
; 2005 : 		*item;
; 2006 : 
; 2007 : 	item = population_name_database;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?population_name_database@@3PAUPOPULATION_NAME_DATABASE_TYPE@@A ; population_name_database
  0000e	89 45 f0	 mov	 DWORD PTR _item$[ebp], eax
$LN2@draw_tsd_m:

; 2008 : 	
; 2009 : 	while (item)

  00011	83 7d f0 00	 cmp	 DWORD PTR _item$[ebp], 0
  00015	74 73		 je	 SHORT $LN3@draw_tsd_m

; 2010 : 	{
; 2011 : //		if (item->type == POPULATION_TYPE_TOWN)
; 2012 : 		{
; 2013 : 			float x, y;
; 2014 : 
; 2015 : 			pos.x = item->x;

  00017	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0001a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0001f	f3 0f 11 45 f4	 movss	 DWORD PTR _pos$[ebp], xmm0

; 2016 : 			pos.y = 0.0;

  00024	0f 57 c0	 xorps	 xmm0, xmm0
  00027	f3 0f 11 45 f8	 movss	 DWORD PTR _pos$[ebp+4], xmm0

; 2017 : 			pos.z = item->z;

  0002c	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0002f	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00034	f3 0f 11 45 fc	 movss	 DWORD PTR _pos$[ebp+8], xmm0

; 2018 : 			
; 2019 : 			get_map_coords_from_world(centre_position, scale, &pos, &x, &y);

  00039	8d 45 e8	 lea	 eax, DWORD PTR _y$1[ebp]
  0003c	50		 push	 eax
  0003d	8d 4d ec	 lea	 ecx, DWORD PTR _x$2[ebp]
  00040	51		 push	 ecx
  00041	8d 55 f4	 lea	 edx, DWORD PTR _pos$[ebp]
  00044	52		 push	 edx
  00045	51		 push	 ecx
  00046	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?get_map_coords_from_world@@YGXPAUVEC3D@@M0PAM1@Z ; get_map_coords_from_world

; 2020 : 			
; 2021 : 			set_2d_mono_font_position(x, y);

  00059	51		 push	 ecx
  0005a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$1[ebp]
  0005f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00064	51		 push	 ecx
  00065	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x$2[ebp]
  0006a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2022 : 			print_mono_font_string(item->name);

  00074	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  00077	8b 08		 mov	 ecx, DWORD PTR [eax]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2023 : 		}
; 2024 : 
; 2025 : 		item = item->next;

  0007f	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  00082	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00085	89 4d f0	 mov	 DWORD PTR _item$[ebp], ecx

; 2026 : 	}

  00088	eb 87		 jmp	 SHORT $LN2@draw_tsd_m
$LN3@draw_tsd_m:

; 2027 : }

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?draw_tsd_map_towns@@YGXPAUVEC3D@@M@Z ENDP		; draw_tsd_map_towns
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?draw_tsd_map_grid@@YGXPAUVEC3D@@MUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv187 = -184						; size = 4
tv180 = -184						; size = 4
tv173 = -184						; size = 4
tv166 = -184						; size = 4
tv188 = -180						; size = 4
tv181 = -180						; size = 4
tv174 = -180						; size = 4
tv167 = -180						; size = 4
$T1 = -176						; size = 4
$T2 = -172						; size = 4
$T3 = -168						; size = 4
$T4 = -164						; size = 4
_grid$5 = -96						; size = 16
_grid_no_y$6 = -80					; size = 4
_grid_no_x$7 = -76					; size = 4
_grid_loopy$ = -72					; size = 4
_grid_loop$ = -68					; size = 4
_inew_wzmax$ = -64					; size = 4
_inew_wxmax$ = -60					; size = 4
_inew_wzmin$ = -56					; size = 4
_inew_wxmin$ = -52					; size = 4
_grid_spacing$ = -48					; size = 4
_one_over_sector_side_length$ = -44			; size = 4
_width$ = -40						; size = 4
_wzmax$ = -36						; size = 4
_wxmax$ = -32						; size = 4
_wzmin$ = -28						; size = 4
_wxmin$ = -24						; size = 4
_range$ = -20						; size = 4
_y2$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_centre_position$ = 8					; size = 4
_scale$ = 12						; size = 4
_colour$ = 16						; size = 4
?draw_tsd_map_grid@@YGXPAUVEC3D@@MUREAL_COLOUR@@@Z PROC	; draw_tsd_map_grid, COMDAT

; 1893 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1894 : 	float
; 1895 : 		x1, x2, y1, y2,
; 1896 : 		range = 1.0 / scale,

  0000c	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  00011	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00019	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0001d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00021	f3 0f 11 45 ec	 movss	 DWORD PTR _range$[ebp], xmm0

; 1897 : 		wxmin,
; 1898 : 		wzmin,
; 1899 : 		wxmax = 0,

  00026	0f 57 c0	 xorps	 xmm0, xmm0
  00029	f3 0f 11 45 e0	 movss	 DWORD PTR _wxmax$[ebp], xmm0

; 1900 : 		wzmax = 0,

  0002e	0f 57 c0	 xorps	 xmm0, xmm0
  00031	f3 0f 11 45 dc	 movss	 DWORD PTR _wzmax$[ebp], xmm0

; 1901 : 		width,
; 1902 : 		one_over_sector_side_length;
; 1903 : 
; 1904 : 	int
; 1905 : 		grid_spacing = 0,

  00036	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _grid_spacing$[ebp], 0

; 1906 : 		inew_wxmin,
; 1907 : 		inew_wzmin,
; 1908 : 		inew_wxmax,
; 1909 : 		inew_wzmax,
; 1910 : 		grid_loop,
; 1911 : 		grid_loopy;
; 1912 : 
; 1913 : 	one_over_sector_side_length = 1.0 / SECTOR_SIDE_LENGTH;

  0003d	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00045	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0004d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00051	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00055	f3 0f 11 45 d4	 movss	 DWORD PTR _one_over_sector_side_length$[ebp], xmm0

; 1914 : 
; 1915 : 	// 1.5 is a little more than sqrt(2), so that it is long enough even when rotated 45 degrees
; 1916 : 	wxmin = max((centre_position->x - range * 1.5f), MIN_MAP_X);

  0005a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _range$[ebp]
  0005f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fc00000
  00067	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  0006a	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0006e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00072	f3 0f 11 8d 5c
	ff ff ff	 movss	 DWORD PTR $T4[ebp], xmm1
  0007a	68 24 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+36
  0007f	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0008b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008f	f3 0f 11 45 e8	 movss	 DWORD PTR _wxmin$[ebp], xmm0

; 1917 : 	wxmax = min((centre_position->x + range * 1.5f), MAX_MAP_X);

  00094	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _range$[ebp]
  00099	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fc00000
  000a1	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  000a4	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  000a8	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  000b0	68 3c 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+60
  000b5	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  000c1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c5	f3 0f 11 45 e0	 movss	 DWORD PTR _wxmax$[ebp], xmm0

; 1918 : 
; 1919 : 	wzmin = max((centre_position->z - range * 1.5f), MIN_MAP_Z);

  000ca	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _range$[ebp]
  000cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fc00000
  000d7	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  000da	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  000df	f3 0f 5c c8	 subss	 xmm1, xmm0
  000e3	f3 0f 11 8d 54
	ff ff ff	 movss	 DWORD PTR $T2[ebp], xmm1
  000eb	68 2c 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+44
  000f0	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000f6	51		 push	 ecx
  000f7	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000fc	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00100	f3 0f 11 45 e4	 movss	 DWORD PTR _wzmin$[ebp], xmm0

; 1920 : 	wzmax = min((centre_position->z + range * 1.5f), MAX_MAP_Z);

  00105	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _range$[ebp]
  0010a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fc00000
  00112	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  00115	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  0011a	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  00122	68 44 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+68
  00127	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00133	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00137	f3 0f 11 45 dc	 movss	 DWORD PTR _wzmax$[ebp], xmm0

; 1921 : 
; 1922 : 	inew_wxmin = (((int) (wxmin * one_over_sector_side_length)) - 1.0) * SECTOR_SIDE_LENGTH;

  0013c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _wxmin$[ebp]
  00141	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _one_over_sector_side_length$[ebp]
  00146	f3 0f 2c c0	 cvttss2si eax, xmm0
  0014a	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  0014e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00156	f2 0f 2a 0d 00
	00 00 00	 cvtsi2sd xmm1, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  0015e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00162	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00166	89 4d cc	 mov	 DWORD PTR _inew_wxmin$[ebp], ecx

; 1923 : 	inew_wxmax = (((int) (wxmax * one_over_sector_side_length)) + 1.0) * SECTOR_SIDE_LENGTH;

  00169	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _wxmax$[ebp]
  0016e	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _one_over_sector_side_length$[ebp]
  00173	f3 0f 2c c0	 cvttss2si eax, xmm0
  00177	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  0017b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00183	f2 0f 2a 0d 00
	00 00 00	 cvtsi2sd xmm1, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  0018b	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0018f	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00193	89 4d c4	 mov	 DWORD PTR _inew_wxmax$[ebp], ecx

; 1924 : 
; 1925 : 	// Z max and min around wrong way !
; 1926 : 	inew_wzmin = (((int) (wzmin * one_over_sector_side_length)) - 1.0) * SECTOR_SIDE_LENGTH;

  00196	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _wzmin$[ebp]
  0019b	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _one_over_sector_side_length$[ebp]
  001a0	f3 0f 2c c0	 cvttss2si eax, xmm0
  001a4	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001a8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001b0	f2 0f 2a 0d 00
	00 00 00	 cvtsi2sd xmm1, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  001b8	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001bc	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  001c0	89 4d c8	 mov	 DWORD PTR _inew_wzmin$[ebp], ecx

; 1927 : 	inew_wzmax = (((int) (wzmax * one_over_sector_side_length)) + 1.0) * SECTOR_SIDE_LENGTH;

  001c3	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _wzmax$[ebp]
  001c8	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _one_over_sector_side_length$[ebp]
  001cd	f3 0f 2c c0	 cvttss2si eax, xmm0
  001d1	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001d5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001dd	f2 0f 2a 0d 00
	00 00 00	 cvtsi2sd xmm1, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  001e5	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001e9	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  001ed	89 4d c0	 mov	 DWORD PTR _inew_wzmax$[ebp], ecx

; 1928 : 
; 1929 : 	inew_wxmin = bound (inew_wxmin, 0, MAX_MAP_X);

  001f0	83 7d cc 00	 cmp	 DWORD PTR _inew_wxmin$[ebp], 0
  001f4	7d 0d		 jge	 SHORT $LN21@draw_tsd_m
  001f6	0f 57 c0	 xorps	 xmm0, xmm0
  001f9	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv167[ebp], xmm0
  00201	eb 3d		 jmp	 SHORT $LN22@draw_tsd_m
$LN21@draw_tsd_m:
  00203	f3 0f 2a 45 cc	 cvtsi2ss xmm0, DWORD PTR _inew_wxmin$[ebp]
  00208	0f 2f 05 3c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  0020f	76 12		 jbe	 SHORT $LN19@draw_tsd_m
  00211	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00219	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv166[ebp], xmm0
  00221	eb 0d		 jmp	 SHORT $LN20@draw_tsd_m
$LN19@draw_tsd_m:
  00223	f3 0f 2a 45 cc	 cvtsi2ss xmm0, DWORD PTR _inew_wxmin$[ebp]
  00228	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv166[ebp], xmm0
$LN20@draw_tsd_m:
  00230	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv166[ebp]
  00238	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv167[ebp], xmm0
$LN22@draw_tsd_m:
  00240	f3 0f 2c 85 4c
	ff ff ff	 cvttss2si eax, DWORD PTR tv167[ebp]
  00248	89 45 cc	 mov	 DWORD PTR _inew_wxmin$[ebp], eax

; 1930 : 	inew_wxmax = bound (inew_wxmax, 0, MAX_MAP_X);

  0024b	83 7d c4 00	 cmp	 DWORD PTR _inew_wxmax$[ebp], 0
  0024f	7d 0d		 jge	 SHORT $LN25@draw_tsd_m
  00251	0f 57 c0	 xorps	 xmm0, xmm0
  00254	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv174[ebp], xmm0
  0025c	eb 3d		 jmp	 SHORT $LN26@draw_tsd_m
$LN25@draw_tsd_m:
  0025e	f3 0f 2a 45 c4	 cvtsi2ss xmm0, DWORD PTR _inew_wxmax$[ebp]
  00263	0f 2f 05 3c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  0026a	76 12		 jbe	 SHORT $LN23@draw_tsd_m
  0026c	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00274	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv173[ebp], xmm0
  0027c	eb 0d		 jmp	 SHORT $LN24@draw_tsd_m
$LN23@draw_tsd_m:
  0027e	f3 0f 2a 45 c4	 cvtsi2ss xmm0, DWORD PTR _inew_wxmax$[ebp]
  00283	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv173[ebp], xmm0
$LN24@draw_tsd_m:
  0028b	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv173[ebp]
  00293	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv174[ebp], xmm0
$LN26@draw_tsd_m:
  0029b	f3 0f 2c 85 4c
	ff ff ff	 cvttss2si eax, DWORD PTR tv174[ebp]
  002a3	89 45 c4	 mov	 DWORD PTR _inew_wxmax$[ebp], eax

; 1931 : 	inew_wzmin = bound (inew_wzmin, 0, MAX_MAP_Z);

  002a6	83 7d c8 00	 cmp	 DWORD PTR _inew_wzmin$[ebp], 0
  002aa	7d 0d		 jge	 SHORT $LN29@draw_tsd_m
  002ac	0f 57 c0	 xorps	 xmm0, xmm0
  002af	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv181[ebp], xmm0
  002b7	eb 3d		 jmp	 SHORT $LN30@draw_tsd_m
$LN29@draw_tsd_m:
  002b9	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _inew_wzmin$[ebp]
  002be	0f 2f 05 44 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  002c5	76 12		 jbe	 SHORT $LN27@draw_tsd_m
  002c7	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  002cf	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv180[ebp], xmm0
  002d7	eb 0d		 jmp	 SHORT $LN28@draw_tsd_m
$LN27@draw_tsd_m:
  002d9	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _inew_wzmin$[ebp]
  002de	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv180[ebp], xmm0
$LN28@draw_tsd_m:
  002e6	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv180[ebp]
  002ee	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv181[ebp], xmm0
$LN30@draw_tsd_m:
  002f6	f3 0f 2c 85 4c
	ff ff ff	 cvttss2si eax, DWORD PTR tv181[ebp]
  002fe	89 45 c8	 mov	 DWORD PTR _inew_wzmin$[ebp], eax

; 1932 : 	inew_wzmax = bound (inew_wzmax, 0, MAX_MAP_Z);

  00301	83 7d c0 00	 cmp	 DWORD PTR _inew_wzmax$[ebp], 0
  00305	7d 0d		 jge	 SHORT $LN33@draw_tsd_m
  00307	0f 57 c0	 xorps	 xmm0, xmm0
  0030a	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv188[ebp], xmm0
  00312	eb 3d		 jmp	 SHORT $LN34@draw_tsd_m
$LN33@draw_tsd_m:
  00314	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _inew_wzmax$[ebp]
  00319	0f 2f 05 44 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00320	76 12		 jbe	 SHORT $LN31@draw_tsd_m
  00322	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  0032a	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv187[ebp], xmm0
  00332	eb 0d		 jmp	 SHORT $LN32@draw_tsd_m
$LN31@draw_tsd_m:
  00334	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _inew_wzmax$[ebp]
  00339	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv187[ebp], xmm0
$LN32@draw_tsd_m:
  00341	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv187[ebp]
  00349	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv188[ebp], xmm0
$LN34@draw_tsd_m:
  00351	f3 0f 2c 85 4c
	ff ff ff	 cvttss2si eax, DWORD PTR tv188[ebp]
  00359	89 45 c0	 mov	 DWORD PTR _inew_wzmax$[ebp], eax

; 1933 : 
; 1934 : 	width = fabs (wxmax - wxmin);

  0035c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _wxmax$[ebp]
  00361	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _wxmin$[ebp]
  00366	51		 push	 ecx
  00367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036c	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00371	d9 5d d8	 fstp	 DWORD PTR _width$[ebp]

; 1935 : 
; 1936 : 	grid_spacing = 4096;  // the normal grid spacing is 4096 meters

  00374	c7 45 d0 00 10
	00 00		 mov	 DWORD PTR _grid_spacing$[ebp], 4096 ; 00001000H

; 1937 : 	
; 1938 : 	// along the X
; 1939 : 	y1 = (wzmin - centre_position->z) * scale;

  0037b	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  0037e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _wzmin$[ebp]
  00383	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00388	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0038d	f3 0f 11 45 f4	 movss	 DWORD PTR _y1$[ebp], xmm0

; 1940 : 	y2 = (wzmax - centre_position->z) * scale;

  00392	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  00395	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _wzmax$[ebp]
  0039a	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0039f	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  003a4	f3 0f 11 45 f0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 1941 : 	
; 1942 : 	for (grid_loop = inew_wxmin; grid_loop <= inew_wxmax; grid_loop += grid_spacing)

  003a9	8b 45 cc	 mov	 eax, DWORD PTR _inew_wxmin$[ebp]
  003ac	89 45 bc	 mov	 DWORD PTR _grid_loop$[ebp], eax
  003af	eb 09		 jmp	 SHORT $LN4@draw_tsd_m
$LN2@draw_tsd_m:
  003b1	8b 45 bc	 mov	 eax, DWORD PTR _grid_loop$[ebp]
  003b4	03 45 d0	 add	 eax, DWORD PTR _grid_spacing$[ebp]
  003b7	89 45 bc	 mov	 DWORD PTR _grid_loop$[ebp], eax
$LN4@draw_tsd_m:
  003ba	8b 45 bc	 mov	 eax, DWORD PTR _grid_loop$[ebp]
  003bd	3b 45 c4	 cmp	 eax, DWORD PTR _inew_wxmax$[ebp]
  003c0	7f 67		 jg	 SHORT $LN3@draw_tsd_m

; 1943 : 	{
; 1944 : 		if ((grid_loop >= wxmin) && (grid_loop <= wxmax))

  003c2	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _grid_loop$[ebp]
  003c7	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _wxmin$[ebp]
  003cb	72 5a		 jb	 SHORT $LN14@draw_tsd_m
  003cd	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _grid_loop$[ebp]
  003d2	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _wxmax$[ebp]
  003d7	0f 2f c8	 comiss	 xmm1, xmm0
  003da	72 4b		 jb	 SHORT $LN14@draw_tsd_m

; 1945 : 		{
; 1946 : 			x1 = (grid_loop - centre_position->x) * scale;

  003dc	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _grid_loop$[ebp]
  003e1	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  003e4	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  003e8	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  003ed	f3 0f 11 45 fc	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1947 : 			draw_2d_line(x1, y1, x1, y2, colour);

  003f2	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  003f5	50		 push	 eax
  003f6	51		 push	 ecx
  003f7	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  003fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00401	51		 push	 ecx
  00402	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040c	51		 push	 ecx
  0040d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00412	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00417	51		 push	 ecx
  00418	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0041d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00422	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN14@draw_tsd_m:

; 1948 : 		}
; 1949 : 	}

  00427	eb 88		 jmp	 SHORT $LN2@draw_tsd_m
$LN3@draw_tsd_m:

; 1950 : 
; 1951 : 	// down the Z
; 1952 : 	x1 = (wxmin - centre_position->x) * scale;

  00429	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  0042c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _wxmin$[ebp]
  00431	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00435	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0043a	f3 0f 11 45 fc	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1953 : 	x2 = (wxmax - centre_position->x) * scale;

  0043f	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  00442	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _wxmax$[ebp]
  00447	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0044b	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00450	f3 0f 11 45 f8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1954 : 
; 1955 : 	for (grid_loop = inew_wzmin; grid_loop <= inew_wzmax; grid_loop += grid_spacing)

  00455	8b 45 c8	 mov	 eax, DWORD PTR _inew_wzmin$[ebp]
  00458	89 45 bc	 mov	 DWORD PTR _grid_loop$[ebp], eax
  0045b	eb 09		 jmp	 SHORT $LN7@draw_tsd_m
$LN5@draw_tsd_m:
  0045d	8b 45 bc	 mov	 eax, DWORD PTR _grid_loop$[ebp]
  00460	03 45 d0	 add	 eax, DWORD PTR _grid_spacing$[ebp]
  00463	89 45 bc	 mov	 DWORD PTR _grid_loop$[ebp], eax
$LN7@draw_tsd_m:
  00466	8b 45 bc	 mov	 eax, DWORD PTR _grid_loop$[ebp]
  00469	3b 45 c0	 cmp	 eax, DWORD PTR _inew_wzmax$[ebp]
  0046c	7f 68		 jg	 SHORT $LN6@draw_tsd_m

; 1956 : 	{
; 1957 : 		if ((grid_loop >= wzmin) && (grid_loop <= wzmax))

  0046e	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _grid_loop$[ebp]
  00473	0f 2f 45 e4	 comiss	 xmm0, DWORD PTR _wzmin$[ebp]
  00477	72 5b		 jb	 SHORT $LN15@draw_tsd_m
  00479	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _grid_loop$[ebp]
  0047e	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _wzmax$[ebp]
  00483	0f 2f c8	 comiss	 xmm1, xmm0
  00486	72 4c		 jb	 SHORT $LN15@draw_tsd_m

; 1958 : 		{
; 1959 : 			y1 = (grid_loop - centre_position->z) * scale;

  00488	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _grid_loop$[ebp]
  0048d	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  00490	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00495	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0049a	f3 0f 11 45 f4	 movss	 DWORD PTR _y1$[ebp], xmm0

; 1960 : 			draw_2d_line(x1, y1, x2, y1, colour);

  0049f	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  004a2	50		 push	 eax
  004a3	51		 push	 ecx
  004a4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  004a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ae	51		 push	 ecx
  004af	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  004b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b9	51		 push	 ecx
  004ba	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  004bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c4	51		 push	 ecx
  004c5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN15@draw_tsd_m:

; 1961 : 		}
; 1962 : 	}

  004d4	eb 87		 jmp	 SHORT $LN5@draw_tsd_m
$LN6@draw_tsd_m:

; 1963 : 
; 1964 : 	set_mono_font_colour (colour);

  004d6	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  004d9	50		 push	 eax
  004da	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 1965 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  004df	6a 04		 push	 4
  004e1	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1966 : 
; 1967 : 	// map sector labels
; 1968 : 	for (grid_loop = inew_wxmin; grid_loop <= inew_wxmax; grid_loop += grid_spacing)

  004e6	8b 45 cc	 mov	 eax, DWORD PTR _inew_wxmin$[ebp]
  004e9	89 45 bc	 mov	 DWORD PTR _grid_loop$[ebp], eax
  004ec	eb 09		 jmp	 SHORT $LN10@draw_tsd_m
$LN8@draw_tsd_m:
  004ee	8b 45 bc	 mov	 eax, DWORD PTR _grid_loop$[ebp]
  004f1	03 45 d0	 add	 eax, DWORD PTR _grid_spacing$[ebp]
  004f4	89 45 bc	 mov	 DWORD PTR _grid_loop$[ebp], eax
$LN10@draw_tsd_m:
  004f7	8b 45 bc	 mov	 eax, DWORD PTR _grid_loop$[ebp]
  004fa	3b 45 c4	 cmp	 eax, DWORD PTR _inew_wxmax$[ebp]
  004fd	0f 8f 9b 01 00
	00		 jg	 $LN9@draw_tsd_m

; 1969 : 		for (grid_loopy = inew_wzmin; grid_loopy <= inew_wzmax; grid_loopy += grid_spacing)

  00503	8b 45 c8	 mov	 eax, DWORD PTR _inew_wzmin$[ebp]
  00506	89 45 b8	 mov	 DWORD PTR _grid_loopy$[ebp], eax
  00509	eb 09		 jmp	 SHORT $LN13@draw_tsd_m
$LN11@draw_tsd_m:
  0050b	8b 45 b8	 mov	 eax, DWORD PTR _grid_loopy$[ebp]
  0050e	03 45 d0	 add	 eax, DWORD PTR _grid_spacing$[ebp]
  00511	89 45 b8	 mov	 DWORD PTR _grid_loopy$[ebp], eax
$LN13@draw_tsd_m:
  00514	8b 45 b8	 mov	 eax, DWORD PTR _grid_loopy$[ebp]
  00517	3b 45 c0	 cmp	 eax, DWORD PTR _inew_wzmax$[ebp]
  0051a	0f 8f 79 01 00
	00		 jg	 $LN12@draw_tsd_m

; 1970 : 		{
; 1971 : 			int 
; 1972 : 				grid_no_x = grid_loop / grid_spacing,

  00520	8b 45 bc	 mov	 eax, DWORD PTR _grid_loop$[ebp]
  00523	99		 cdq
  00524	f7 7d d0	 idiv	 DWORD PTR _grid_spacing$[ebp]
  00527	89 45 b4	 mov	 DWORD PTR _grid_no_x$7[ebp], eax

; 1973 : 				grid_no_y = grid_loopy / grid_spacing;

  0052a	8b 45 b8	 mov	 eax, DWORD PTR _grid_loopy$[ebp]
  0052d	99		 cdq
  0052e	f7 7d d0	 idiv	 DWORD PTR _grid_spacing$[ebp]
  00531	89 45 b0	 mov	 DWORD PTR _grid_no_y$6[ebp], eax

; 1974 : 			char grid[16];
; 1975 : 
; 1976 : 			x1 = (grid_loop - centre_position->x) * scale;

  00534	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _grid_loop$[ebp]
  00539	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  0053c	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00540	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00545	f3 0f 11 45 fc	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1977 : 			x2 = (grid_loop - centre_position->x + 0.5 * grid_spacing) * scale;

  0054a	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _grid_loop$[ebp]
  0054f	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  00552	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00556	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0055a	f2 0f 2a 4d d0	 cvtsi2sd xmm1, DWORD PTR _grid_spacing$[ebp]
  0055f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00567	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0056b	f3 0f 5a 4d 0c	 cvtss2sd xmm1, DWORD PTR _scale$[ebp]
  00570	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00574	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00578	f3 0f 11 45 f8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1978 : 			y1 = (grid_loopy - centre_position->z) * scale;

  0057d	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _grid_loopy$[ebp]
  00582	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  00585	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0058a	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0058f	f3 0f 11 45 f4	 movss	 DWORD PTR _y1$[ebp], xmm0

; 1979 : 			y2 = (grid_loopy - centre_position->z + 0.5 * grid_spacing) * scale;

  00594	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _grid_loopy$[ebp]
  00599	8b 45 08	 mov	 eax, DWORD PTR _centre_position$[ebp]
  0059c	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  005a1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  005a5	f2 0f 2a 4d d0	 cvtsi2sd xmm1, DWORD PTR _grid_spacing$[ebp]
  005aa	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  005b2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005b6	f3 0f 5a 4d 0c	 cvtss2sd xmm1, DWORD PTR _scale$[ebp]
  005bb	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  005bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c3	f3 0f 11 45 f0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 1980 : 
; 1981 : 			if ((grid_no_y & 3) == 0)  // modula 4, every fourth row has labels

  005c8	8b 45 b0	 mov	 eax, DWORD PTR _grid_no_y$6[ebp]
  005cb	83 e0 03	 and	 eax, 3
  005ce	75 5e		 jne	 SHORT $LN16@draw_tsd_m

; 1982 : 			{
; 1983 : 				sprintf(grid, "%02d", grid_loop / grid_spacing);

  005d0	8b 45 bc	 mov	 eax, DWORD PTR _grid_loop$[ebp]
  005d3	99		 cdq
  005d4	f7 7d d0	 idiv	 DWORD PTR _grid_spacing$[ebp]
  005d7	50		 push	 eax
  005d8	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  005dd	8d 45 a0	 lea	 eax, DWORD PTR _grid$5[ebp]
  005e0	50		 push	 eax
  005e1	e8 00 00 00 00	 call	 _sprintf
  005e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1984 : 				set_2d_mono_font_position(x2, y1);

  005e9	51		 push	 ecx
  005ea	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  005ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f4	51		 push	 ecx
  005f5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ff	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1985 : 				set_mono_font_rel_position (-6.0, -8.0);

  00604	51		 push	 ecx
  00605	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0060d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00612	51		 push	 ecx
  00613	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0061b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00620	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1986 : 				print_mono_font_string(grid);

  00625	8d 45 a0	 lea	 eax, DWORD PTR _grid$5[ebp]
  00628	50		 push	 eax
  00629	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN16@draw_tsd_m:

; 1987 : 			}
; 1988 : 
; 1989 : 			if ((grid_no_x & 3) == 0)  // mod 4

  0062e	8b 45 b4	 mov	 eax, DWORD PTR _grid_no_x$7[ebp]
  00631	83 e0 03	 and	 eax, 3
  00634	75 5e		 jne	 SHORT $LN17@draw_tsd_m

; 1990 : 			{
; 1991 : 				sprintf(grid, "%02d", grid_loopy / grid_spacing);

  00636	8b 45 b8	 mov	 eax, DWORD PTR _grid_loopy$[ebp]
  00639	99		 cdq
  0063a	f7 7d d0	 idiv	 DWORD PTR _grid_spacing$[ebp]
  0063d	50		 push	 eax
  0063e	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  00643	8d 45 a0	 lea	 eax, DWORD PTR _grid$5[ebp]
  00646	50		 push	 eax
  00647	e8 00 00 00 00	 call	 _sprintf
  0064c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1992 : 				set_2d_mono_font_position(x1, y2);

  0064f	51		 push	 ecx
  00650	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00655	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065a	51		 push	 ecx
  0065b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00665	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1993 : 				set_mono_font_rel_position (2.0, -5.0);

  0066a	51		 push	 ecx
  0066b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  00673	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00678	51		 push	 ecx
  00679	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00681	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00686	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1994 : 				print_mono_font_string(grid);

  0068b	8d 45 a0	 lea	 eax, DWORD PTR _grid$5[ebp]
  0068e	50		 push	 eax
  0068f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN17@draw_tsd_m:

; 1995 : 			}
; 1996 : 		}

  00694	e9 72 fe ff ff	 jmp	 $LN11@draw_tsd_m
$LN12@draw_tsd_m:
  00699	e9 50 fe ff ff	 jmp	 $LN8@draw_tsd_m
$LN9@draw_tsd_m:

; 1997 : }

  0069e	5f		 pop	 edi
  0069f	5e		 pop	 esi
  006a0	5b		 pop	 ebx
  006a1	8b e5		 mov	 esp, ebp
  006a3	5d		 pop	 ebp
  006a4	c2 0c 00	 ret	 12			; 0000000cH
?draw_tsd_map_grid@@YGXPAUVEC3D@@MUREAL_COLOUR@@@Z ENDP	; draw_tsd_map_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?set_tsd_map_road_colour@@YGXUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_col$ = 8						; size = 4
?set_tsd_map_road_colour@@YGXUREAL_COLOUR@@@Z PROC	; set_tsd_map_road_colour, COMDAT

; 1887 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1888 : 	map_road_colour = col;

  00009	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?map_road_colour@@3UREAL_COLOUR@@A, eax

; 1889 : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_tsd_map_road_colour@@YGXUREAL_COLOUR@@@Z ENDP	; set_tsd_map_road_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?set_tsd_map_river_colour@@YGXUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_col$ = 8						; size = 4
?set_tsd_map_river_colour@@YGXUREAL_COLOUR@@@Z PROC	; set_tsd_map_river_colour, COMDAT

; 1882 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1883 : 	map_river_colour = col;

  00009	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?map_river_colour@@3UREAL_COLOUR@@A, eax

; 1884 : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_tsd_map_river_colour@@YGXUREAL_COLOUR@@@Z ENDP	; set_tsd_map_river_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?set_tsd_map_contour_colour@@YGXUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_col$ = 8						; size = 4
?set_tsd_map_contour_colour@@YGXUREAL_COLOUR@@@Z PROC	; set_tsd_map_contour_colour, COMDAT

; 1877 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1878 : 	map_contour_colour = col;

  00009	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?map_contour_colour@@3UREAL_COLOUR@@A, eax

; 1879 : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_tsd_map_contour_colour@@YGXUREAL_COLOUR@@@Z ENDP	; set_tsd_map_contour_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?Initialise_TSD_render_terrain@@YGXXZ
_TEXT	SEGMENT
?Initialise_TSD_render_terrain@@YGXXZ PROC		; Initialise_TSD_render_terrain, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 	draw_large_mfd = TRUE;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 132  : 
; 133  : 	tsd_render_palette = command_line_tsd_palette;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_tsd_palette@@3HA ; command_line_tsd_palette
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?tsd_render_palette@@3HA, eax

; 134  : 	set_rgb_colour(map_river_colour, 0, 0,  96, 255);

  0001d	c6 05 02 00 00
	00 00		 mov	 BYTE PTR ?map_river_colour@@3UREAL_COLOUR@@A+2, 0
  00024	c6 05 01 00 00
	00 00		 mov	 BYTE PTR ?map_river_colour@@3UREAL_COLOUR@@A+1, 0
  0002b	c6 05 00 00 00
	00 60		 mov	 BYTE PTR ?map_river_colour@@3UREAL_COLOUR@@A, 96 ; 00000060H
  00032	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?map_river_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 135  : 	set_rgb_colour(map_road_colour, 32, 32,  20, 255);

  00039	c6 05 02 00 00
	00 20		 mov	 BYTE PTR ?map_road_colour@@3UREAL_COLOUR@@A+2, 32 ; 00000020H
  00040	c6 05 01 00 00
	00 20		 mov	 BYTE PTR ?map_road_colour@@3UREAL_COLOUR@@A+1, 32 ; 00000020H
  00047	c6 05 00 00 00
	00 14		 mov	 BYTE PTR ?map_road_colour@@3UREAL_COLOUR@@A, 20 ; 00000014H
  0004e	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?map_road_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 136  : 	set_rgb_colour(map_contour_colour, 80, 64,  20, 255);

  00055	c6 05 02 00 00
	00 50		 mov	 BYTE PTR ?map_contour_colour@@3UREAL_COLOUR@@A+2, 80 ; 00000050H
  0005c	c6 05 01 00 00
	00 40		 mov	 BYTE PTR ?map_contour_colour@@3UREAL_COLOUR@@A+1, 64 ; 00000040H
  00063	c6 05 00 00 00
	00 14		 mov	 BYTE PTR ?map_contour_colour@@3UREAL_COLOUR@@A, 20 ; 00000014H
  0006a	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?map_contour_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 137  : //water
; 138  : 
; 139  : //colours as atlas: green yellow red white, strong
; 140  : /*
; 141  : 	set_rgb_colour(terrain_colour[0][0],100, 150, 240, 255);
; 142  : 	set_rgb_colour(terrain_colour[0][1],89,152,41,255);
; 143  : 	set_rgb_colour(terrain_colour[0][2],93,142,41,255);
; 144  : 	set_rgb_colour(terrain_colour[0][3],97,132,41,255);
; 145  : 	set_rgb_colour(terrain_colour[0][4],100,122,41,255);
; 146  : 	set_rgb_colour(terrain_colour[0][5],104,122,41,255);
; 147  : 	set_rgb_colour(terrain_colour[0][6],108,122,41,255);
; 148  : 	set_rgb_colour(terrain_colour[0][7],112,122,41,255);
; 149  : 	set_rgb_colour(terrain_colour[0][8],115,122,41,255);
; 150  : 	set_rgb_colour(terrain_colour[0][9],133,133,46,255);
; 151  : 	set_rgb_colour(terrain_colour[0][10],143,143,51,255);
; 152  : 	set_rgb_colour(terrain_colour[0][11],153,153,56,255);
; 153  : 	set_rgb_colour(terrain_colour[0][12],163,163,61,255);
; 154  : 	set_rgb_colour(terrain_colour[0][13],173,173,66,255);
; 155  : 	set_rgb_colour(terrain_colour[0][14],184,184,71,255);
; 156  : 	set_rgb_colour(terrain_colour[0][15],194,194,77,255);
; 157  : 	set_rgb_colour(terrain_colour[0][16],204,204,82,255);
; 158  : 	set_rgb_colour(terrain_colour[0][17],194,189,77,255);
; 159  : 	set_rgb_colour(terrain_colour[0][18],184,173,71,255);
; 160  : 	set_rgb_colour(terrain_colour[0][19],173,158,66,255);
; 161  : 	set_rgb_colour(terrain_colour[0][20],163,143,61,255);
; 162  : 	set_rgb_colour(terrain_colour[0][21],153,128,56,255);
; 163  : 	set_rgb_colour(terrain_colour[0][22],143,112,51,255);
; 164  : 	set_rgb_colour(terrain_colour[0][23],133,97,46,255);
; 165  : 	set_rgb_colour(terrain_colour[0][24],122,82,41,255);
; 166  : 	set_rgb_colour(terrain_colour[0][25],130,93,56,255);
; 167  : 	set_rgb_colour(terrain_colour[0][26],138,105,71,255);
; 168  : 	set_rgb_colour(terrain_colour[0][27],146,116,87,255);
; 169  : 	set_rgb_colour(terrain_colour[0][28],153,128,102,255);
; 170  : 	set_rgb_colour(terrain_colour[0][29],161,139,117,255);
; 171  : 	set_rgb_colour(terrain_colour[0][30],169,151,133,255);
; 172  : 	set_rgb_colour(terrain_colour[0][31],176,162,148,255);
; 173  : 	set_rgb_colour(terrain_colour[0][32],184,174,163,255);
; 174  : */
; 175  : set_rgb_colour(terrain_colour[0][0],100, 150, 240, 255);

  00071	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00076	6b c8 00	 imul	 ecx, eax, 0
  00079	ba 04 00 00 00	 mov	 edx, 4
  0007e	6b c2 00	 imul	 eax, edx, 0
  00081	c6 84 01 02 00
	00 00 64	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 100 ; 00000064H
  00089	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0008e	6b c8 00	 imul	 ecx, eax, 0
  00091	ba 04 00 00 00	 mov	 edx, 4
  00096	6b c2 00	 imul	 eax, edx, 0
  00099	c6 84 01 01 00
	00 00 96	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 150 ; 00000096H
  000a1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  000a6	6b c8 00	 imul	 ecx, eax, 0
  000a9	ba 04 00 00 00	 mov	 edx, 4
  000ae	6b c2 00	 imul	 eax, edx, 0
  000b1	c6 84 01 00 00
	00 00 f0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 240 ; 000000f0H
  000b9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	ba 04 00 00 00	 mov	 edx, 4
  000c6	6b c2 00	 imul	 eax, edx, 0
  000c9	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 176  : set_rgb_colour(terrain_colour[0][1 ],89,152,41,255);

  000d1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  000d6	6b c8 00	 imul	 ecx, eax, 0
  000d9	ba 04 00 00 00	 mov	 edx, 4
  000de	c1 e2 00	 shl	 edx, 0
  000e1	c6 84 11 02 00
	00 00 59	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 89 ; 00000059H
  000e9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  000ee	6b c8 00	 imul	 ecx, eax, 0
  000f1	ba 04 00 00 00	 mov	 edx, 4
  000f6	c1 e2 00	 shl	 edx, 0
  000f9	c6 84 11 01 00
	00 00 98	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 152 ; 00000098H
  00101	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00106	6b c8 00	 imul	 ecx, eax, 0
  00109	ba 04 00 00 00	 mov	 edx, 4
  0010e	c1 e2 00	 shl	 edx, 0
  00111	c6 84 11 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 41 ; 00000029H
  00119	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0011e	6b c8 00	 imul	 ecx, eax, 0
  00121	ba 04 00 00 00	 mov	 edx, 4
  00126	c1 e2 00	 shl	 edx, 0
  00129	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 177  : set_rgb_colour(terrain_colour[0][2 ],91,147,41,255);

  00131	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00136	6b c8 00	 imul	 ecx, eax, 0
  00139	ba 04 00 00 00	 mov	 edx, 4
  0013e	d1 e2		 shl	 edx, 1
  00140	c6 84 11 02 00
	00 00 5b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 91 ; 0000005bH
  00148	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0014d	6b c8 00	 imul	 ecx, eax, 0
  00150	ba 04 00 00 00	 mov	 edx, 4
  00155	d1 e2		 shl	 edx, 1
  00157	c6 84 11 01 00
	00 00 93	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 147 ; 00000093H
  0015f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00164	6b c8 00	 imul	 ecx, eax, 0
  00167	ba 04 00 00 00	 mov	 edx, 4
  0016c	d1 e2		 shl	 edx, 1
  0016e	c6 84 11 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 41 ; 00000029H
  00176	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0017b	6b c8 00	 imul	 ecx, eax, 0
  0017e	ba 04 00 00 00	 mov	 edx, 4
  00183	d1 e2		 shl	 edx, 1
  00185	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 178  : set_rgb_colour(terrain_colour[0][3 ],93,142,41,255);

  0018d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00192	6b c8 00	 imul	 ecx, eax, 0
  00195	ba 04 00 00 00	 mov	 edx, 4
  0019a	6b c2 03	 imul	 eax, edx, 3
  0019d	c6 84 01 02 00
	00 00 5d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 93 ; 0000005dH
  001a5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  001aa	6b c8 00	 imul	 ecx, eax, 0
  001ad	ba 04 00 00 00	 mov	 edx, 4
  001b2	6b c2 03	 imul	 eax, edx, 3
  001b5	c6 84 01 01 00
	00 00 8e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 142 ; 0000008eH
  001bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  001c2	6b c8 00	 imul	 ecx, eax, 0
  001c5	ba 04 00 00 00	 mov	 edx, 4
  001ca	6b c2 03	 imul	 eax, edx, 3
  001cd	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  001d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  001da	6b c8 00	 imul	 ecx, eax, 0
  001dd	ba 04 00 00 00	 mov	 edx, 4
  001e2	6b c2 03	 imul	 eax, edx, 3
  001e5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 179  : set_rgb_colour(terrain_colour[0][4 ],95,137,41,255);

  001ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  001f2	6b c8 00	 imul	 ecx, eax, 0
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 02	 shl	 edx, 2
  001fd	c6 84 11 02 00
	00 00 5f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 95 ; 0000005fH
  00205	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0020a	6b c8 00	 imul	 ecx, eax, 0
  0020d	ba 04 00 00 00	 mov	 edx, 4
  00212	c1 e2 02	 shl	 edx, 2
  00215	c6 84 11 01 00
	00 00 89	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 137 ; 00000089H
  0021d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00222	6b c8 00	 imul	 ecx, eax, 0
  00225	ba 04 00 00 00	 mov	 edx, 4
  0022a	c1 e2 02	 shl	 edx, 2
  0022d	c6 84 11 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 41 ; 00000029H
  00235	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0023a	6b c8 00	 imul	 ecx, eax, 0
  0023d	ba 04 00 00 00	 mov	 edx, 4
  00242	c1 e2 02	 shl	 edx, 2
  00245	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 180  : set_rgb_colour(terrain_colour[0][5 ],97,132,41,255);

  0024d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00252	6b c8 00	 imul	 ecx, eax, 0
  00255	ba 04 00 00 00	 mov	 edx, 4
  0025a	6b c2 05	 imul	 eax, edx, 5
  0025d	c6 84 01 02 00
	00 00 61	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 97 ; 00000061H
  00265	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0026a	6b c8 00	 imul	 ecx, eax, 0
  0026d	ba 04 00 00 00	 mov	 edx, 4
  00272	6b c2 05	 imul	 eax, edx, 5
  00275	c6 84 01 01 00
	00 00 84	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 132 ; 00000084H
  0027d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00282	6b c8 00	 imul	 ecx, eax, 0
  00285	ba 04 00 00 00	 mov	 edx, 4
  0028a	6b c2 05	 imul	 eax, edx, 5
  0028d	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  00295	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0029a	6b c8 00	 imul	 ecx, eax, 0
  0029d	ba 04 00 00 00	 mov	 edx, 4
  002a2	6b c2 05	 imul	 eax, edx, 5
  002a5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 181  : set_rgb_colour(terrain_colour[0][6 ],99,127,41,255);

  002ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  002b2	6b c8 00	 imul	 ecx, eax, 0
  002b5	ba 04 00 00 00	 mov	 edx, 4
  002ba	6b c2 06	 imul	 eax, edx, 6
  002bd	c6 84 01 02 00
	00 00 63	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 99 ; 00000063H
  002c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  002ca	6b c8 00	 imul	 ecx, eax, 0
  002cd	ba 04 00 00 00	 mov	 edx, 4
  002d2	6b c2 06	 imul	 eax, edx, 6
  002d5	c6 84 01 01 00
	00 00 7f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 127 ; 0000007fH
  002dd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  002e2	6b c8 00	 imul	 ecx, eax, 0
  002e5	ba 04 00 00 00	 mov	 edx, 4
  002ea	6b c2 06	 imul	 eax, edx, 6
  002ed	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  002f5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  002fa	6b c8 00	 imul	 ecx, eax, 0
  002fd	ba 04 00 00 00	 mov	 edx, 4
  00302	6b c2 06	 imul	 eax, edx, 6
  00305	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 182  : set_rgb_colour(terrain_colour[0][7 ],100,122,41,255);

  0030d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00312	6b c8 00	 imul	 ecx, eax, 0
  00315	ba 04 00 00 00	 mov	 edx, 4
  0031a	6b c2 07	 imul	 eax, edx, 7
  0031d	c6 84 01 02 00
	00 00 64	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 100 ; 00000064H
  00325	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0032a	6b c8 00	 imul	 ecx, eax, 0
  0032d	ba 04 00 00 00	 mov	 edx, 4
  00332	6b c2 07	 imul	 eax, edx, 7
  00335	c6 84 01 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 122 ; 0000007aH
  0033d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00342	6b c8 00	 imul	 ecx, eax, 0
  00345	ba 04 00 00 00	 mov	 edx, 4
  0034a	6b c2 07	 imul	 eax, edx, 7
  0034d	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  00355	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0035a	6b c8 00	 imul	 ecx, eax, 0
  0035d	ba 04 00 00 00	 mov	 edx, 4
  00362	6b c2 07	 imul	 eax, edx, 7
  00365	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 183  : set_rgb_colour(terrain_colour[0][8 ],102,122,41,255);

  0036d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00372	6b c8 00	 imul	 ecx, eax, 0
  00375	ba 04 00 00 00	 mov	 edx, 4
  0037a	c1 e2 03	 shl	 edx, 3
  0037d	c6 84 11 02 00
	00 00 66	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 102 ; 00000066H
  00385	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0038a	6b c8 00	 imul	 ecx, eax, 0
  0038d	ba 04 00 00 00	 mov	 edx, 4
  00392	c1 e2 03	 shl	 edx, 3
  00395	c6 84 11 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 122 ; 0000007aH
  0039d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  003a2	6b c8 00	 imul	 ecx, eax, 0
  003a5	ba 04 00 00 00	 mov	 edx, 4
  003aa	c1 e2 03	 shl	 edx, 3
  003ad	c6 84 11 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 41 ; 00000029H
  003b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  003ba	6b c8 00	 imul	 ecx, eax, 0
  003bd	ba 04 00 00 00	 mov	 edx, 4
  003c2	c1 e2 03	 shl	 edx, 3
  003c5	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 184  : set_rgb_colour(terrain_colour[0][9 ],104,122,41,255);

  003cd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  003d2	6b c8 00	 imul	 ecx, eax, 0
  003d5	ba 04 00 00 00	 mov	 edx, 4
  003da	6b c2 09	 imul	 eax, edx, 9
  003dd	c6 84 01 02 00
	00 00 68	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 104 ; 00000068H
  003e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  003ea	6b c8 00	 imul	 ecx, eax, 0
  003ed	ba 04 00 00 00	 mov	 edx, 4
  003f2	6b c2 09	 imul	 eax, edx, 9
  003f5	c6 84 01 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 122 ; 0000007aH
  003fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00402	6b c8 00	 imul	 ecx, eax, 0
  00405	ba 04 00 00 00	 mov	 edx, 4
  0040a	6b c2 09	 imul	 eax, edx, 9
  0040d	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  00415	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0041a	6b c8 00	 imul	 ecx, eax, 0
  0041d	ba 04 00 00 00	 mov	 edx, 4
  00422	6b c2 09	 imul	 eax, edx, 9
  00425	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 185  : set_rgb_colour(terrain_colour[0][10],106,122,41,255);

  0042d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00432	6b c8 00	 imul	 ecx, eax, 0
  00435	ba 04 00 00 00	 mov	 edx, 4
  0043a	6b c2 0a	 imul	 eax, edx, 10
  0043d	c6 84 01 02 00
	00 00 6a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 106 ; 0000006aH
  00445	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0044a	6b c8 00	 imul	 ecx, eax, 0
  0044d	ba 04 00 00 00	 mov	 edx, 4
  00452	6b c2 0a	 imul	 eax, edx, 10
  00455	c6 84 01 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 122 ; 0000007aH
  0045d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00462	6b c8 00	 imul	 ecx, eax, 0
  00465	ba 04 00 00 00	 mov	 edx, 4
  0046a	6b c2 0a	 imul	 eax, edx, 10
  0046d	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  00475	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0047a	6b c8 00	 imul	 ecx, eax, 0
  0047d	ba 04 00 00 00	 mov	 edx, 4
  00482	6b c2 0a	 imul	 eax, edx, 10
  00485	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 186  : set_rgb_colour(terrain_colour[0][11],108,122,41,255);

  0048d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00492	6b c8 00	 imul	 ecx, eax, 0
  00495	ba 04 00 00 00	 mov	 edx, 4
  0049a	6b c2 0b	 imul	 eax, edx, 11
  0049d	c6 84 01 02 00
	00 00 6c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 108 ; 0000006cH
  004a5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  004aa	6b c8 00	 imul	 ecx, eax, 0
  004ad	ba 04 00 00 00	 mov	 edx, 4
  004b2	6b c2 0b	 imul	 eax, edx, 11
  004b5	c6 84 01 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 122 ; 0000007aH
  004bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  004c2	6b c8 00	 imul	 ecx, eax, 0
  004c5	ba 04 00 00 00	 mov	 edx, 4
  004ca	6b c2 0b	 imul	 eax, edx, 11
  004cd	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  004d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  004da	6b c8 00	 imul	 ecx, eax, 0
  004dd	ba 04 00 00 00	 mov	 edx, 4
  004e2	6b c2 0b	 imul	 eax, edx, 11
  004e5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 187  : set_rgb_colour(terrain_colour[0][12],110,122,41,255);

  004ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  004f2	6b c8 00	 imul	 ecx, eax, 0
  004f5	ba 04 00 00 00	 mov	 edx, 4
  004fa	6b c2 0c	 imul	 eax, edx, 12
  004fd	c6 84 01 02 00
	00 00 6e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 110 ; 0000006eH
  00505	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0050a	6b c8 00	 imul	 ecx, eax, 0
  0050d	ba 04 00 00 00	 mov	 edx, 4
  00512	6b c2 0c	 imul	 eax, edx, 12
  00515	c6 84 01 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 122 ; 0000007aH
  0051d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00522	6b c8 00	 imul	 ecx, eax, 0
  00525	ba 04 00 00 00	 mov	 edx, 4
  0052a	6b c2 0c	 imul	 eax, edx, 12
  0052d	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  00535	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0053a	6b c8 00	 imul	 ecx, eax, 0
  0053d	ba 04 00 00 00	 mov	 edx, 4
  00542	6b c2 0c	 imul	 eax, edx, 12
  00545	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 188  : set_rgb_colour(terrain_colour[0][13],112,122,41,255);

  0054d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00552	6b c8 00	 imul	 ecx, eax, 0
  00555	ba 04 00 00 00	 mov	 edx, 4
  0055a	6b c2 0d	 imul	 eax, edx, 13
  0055d	c6 84 01 02 00
	00 00 70	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 112 ; 00000070H
  00565	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0056a	6b c8 00	 imul	 ecx, eax, 0
  0056d	ba 04 00 00 00	 mov	 edx, 4
  00572	6b c2 0d	 imul	 eax, edx, 13
  00575	c6 84 01 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 122 ; 0000007aH
  0057d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00582	6b c8 00	 imul	 ecx, eax, 0
  00585	ba 04 00 00 00	 mov	 edx, 4
  0058a	6b c2 0d	 imul	 eax, edx, 13
  0058d	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  00595	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0059a	6b c8 00	 imul	 ecx, eax, 0
  0059d	ba 04 00 00 00	 mov	 edx, 4
  005a2	6b c2 0d	 imul	 eax, edx, 13
  005a5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 189  : set_rgb_colour(terrain_colour[0][14],114,122,41,255);

  005ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  005b2	6b c8 00	 imul	 ecx, eax, 0
  005b5	ba 04 00 00 00	 mov	 edx, 4
  005ba	6b c2 0e	 imul	 eax, edx, 14
  005bd	c6 84 01 02 00
	00 00 72	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 114 ; 00000072H
  005c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  005ca	6b c8 00	 imul	 ecx, eax, 0
  005cd	ba 04 00 00 00	 mov	 edx, 4
  005d2	6b c2 0e	 imul	 eax, edx, 14
  005d5	c6 84 01 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 122 ; 0000007aH
  005dd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  005e2	6b c8 00	 imul	 ecx, eax, 0
  005e5	ba 04 00 00 00	 mov	 edx, 4
  005ea	6b c2 0e	 imul	 eax, edx, 14
  005ed	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  005f5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  005fa	6b c8 00	 imul	 ecx, eax, 0
  005fd	ba 04 00 00 00	 mov	 edx, 4
  00602	6b c2 0e	 imul	 eax, edx, 14
  00605	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 190  : set_rgb_colour(terrain_colour[0][15],115,122,41,255);

  0060d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00612	6b c8 00	 imul	 ecx, eax, 0
  00615	ba 04 00 00 00	 mov	 edx, 4
  0061a	6b c2 0f	 imul	 eax, edx, 15
  0061d	c6 84 01 02 00
	00 00 73	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 115 ; 00000073H
  00625	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0062a	6b c8 00	 imul	 ecx, eax, 0
  0062d	ba 04 00 00 00	 mov	 edx, 4
  00632	6b c2 0f	 imul	 eax, edx, 15
  00635	c6 84 01 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 122 ; 0000007aH
  0063d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00642	6b c8 00	 imul	 ecx, eax, 0
  00645	ba 04 00 00 00	 mov	 edx, 4
  0064a	6b c2 0f	 imul	 eax, edx, 15
  0064d	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  00655	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0065a	6b c8 00	 imul	 ecx, eax, 0
  0065d	ba 04 00 00 00	 mov	 edx, 4
  00662	6b c2 0f	 imul	 eax, edx, 15
  00665	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 191  : set_rgb_colour(terrain_colour[0][16],124,128,44,255);

  0066d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00672	6b c8 00	 imul	 ecx, eax, 0
  00675	ba 04 00 00 00	 mov	 edx, 4
  0067a	c1 e2 04	 shl	 edx, 4
  0067d	c6 84 11 02 00
	00 00 7c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 124 ; 0000007cH
  00685	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0068a	6b c8 00	 imul	 ecx, eax, 0
  0068d	ba 04 00 00 00	 mov	 edx, 4
  00692	c1 e2 04	 shl	 edx, 4
  00695	c6 84 11 01 00
	00 00 80	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 128 ; 00000080H
  0069d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  006a2	6b c8 00	 imul	 ecx, eax, 0
  006a5	ba 04 00 00 00	 mov	 edx, 4
  006aa	c1 e2 04	 shl	 edx, 4
  006ad	c6 84 11 00 00
	00 00 2c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 44 ; 0000002cH
  006b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  006ba	6b c8 00	 imul	 ecx, eax, 0
  006bd	ba 04 00 00 00	 mov	 edx, 4
  006c2	c1 e2 04	 shl	 edx, 4
  006c5	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 192  : set_rgb_colour(terrain_colour[0][17],133,133,46,255);

  006cd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  006d2	6b c8 00	 imul	 ecx, eax, 0
  006d5	ba 04 00 00 00	 mov	 edx, 4
  006da	6b c2 11	 imul	 eax, edx, 17
  006dd	c6 84 01 02 00
	00 00 85	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 133 ; 00000085H
  006e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  006ea	6b c8 00	 imul	 ecx, eax, 0
  006ed	ba 04 00 00 00	 mov	 edx, 4
  006f2	6b c2 11	 imul	 eax, edx, 17
  006f5	c6 84 01 01 00
	00 00 85	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 133 ; 00000085H
  006fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00702	6b c8 00	 imul	 ecx, eax, 0
  00705	ba 04 00 00 00	 mov	 edx, 4
  0070a	6b c2 11	 imul	 eax, edx, 17
  0070d	c6 84 01 00 00
	00 00 2e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 46 ; 0000002eH
  00715	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0071a	6b c8 00	 imul	 ecx, eax, 0
  0071d	ba 04 00 00 00	 mov	 edx, 4
  00722	6b c2 11	 imul	 eax, edx, 17
  00725	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 193  : set_rgb_colour(terrain_colour[0][18],138,138,49,255);

  0072d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00732	6b c8 00	 imul	 ecx, eax, 0
  00735	ba 04 00 00 00	 mov	 edx, 4
  0073a	6b c2 12	 imul	 eax, edx, 18
  0073d	c6 84 01 02 00
	00 00 8a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 138 ; 0000008aH
  00745	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0074a	6b c8 00	 imul	 ecx, eax, 0
  0074d	ba 04 00 00 00	 mov	 edx, 4
  00752	6b c2 12	 imul	 eax, edx, 18
  00755	c6 84 01 01 00
	00 00 8a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 138 ; 0000008aH
  0075d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00762	6b c8 00	 imul	 ecx, eax, 0
  00765	ba 04 00 00 00	 mov	 edx, 4
  0076a	6b c2 12	 imul	 eax, edx, 18
  0076d	c6 84 01 00 00
	00 00 31	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 49 ; 00000031H
  00775	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0077a	6b c8 00	 imul	 ecx, eax, 0
  0077d	ba 04 00 00 00	 mov	 edx, 4
  00782	6b c2 12	 imul	 eax, edx, 18
  00785	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 194  : set_rgb_colour(terrain_colour[0][19],143,143,51,255);

  0078d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00792	6b c8 00	 imul	 ecx, eax, 0
  00795	ba 04 00 00 00	 mov	 edx, 4
  0079a	6b c2 13	 imul	 eax, edx, 19
  0079d	c6 84 01 02 00
	00 00 8f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 143 ; 0000008fH
  007a5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  007aa	6b c8 00	 imul	 ecx, eax, 0
  007ad	ba 04 00 00 00	 mov	 edx, 4
  007b2	6b c2 13	 imul	 eax, edx, 19
  007b5	c6 84 01 01 00
	00 00 8f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 143 ; 0000008fH
  007bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  007c2	6b c8 00	 imul	 ecx, eax, 0
  007c5	ba 04 00 00 00	 mov	 edx, 4
  007ca	6b c2 13	 imul	 eax, edx, 19
  007cd	c6 84 01 00 00
	00 00 33	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 51 ; 00000033H
  007d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  007da	6b c8 00	 imul	 ecx, eax, 0
  007dd	ba 04 00 00 00	 mov	 edx, 4
  007e2	6b c2 13	 imul	 eax, edx, 19
  007e5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 195  : set_rgb_colour(terrain_colour[0][20],148,148,54,255);

  007ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  007f2	6b c8 00	 imul	 ecx, eax, 0
  007f5	ba 04 00 00 00	 mov	 edx, 4
  007fa	6b c2 14	 imul	 eax, edx, 20
  007fd	c6 84 01 02 00
	00 00 94	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 148 ; 00000094H
  00805	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0080a	6b c8 00	 imul	 ecx, eax, 0
  0080d	ba 04 00 00 00	 mov	 edx, 4
  00812	6b c2 14	 imul	 eax, edx, 20
  00815	c6 84 01 01 00
	00 00 94	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 148 ; 00000094H
  0081d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00822	6b c8 00	 imul	 ecx, eax, 0
  00825	ba 04 00 00 00	 mov	 edx, 4
  0082a	6b c2 14	 imul	 eax, edx, 20
  0082d	c6 84 01 00 00
	00 00 36	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 54 ; 00000036H
  00835	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0083a	6b c8 00	 imul	 ecx, eax, 0
  0083d	ba 04 00 00 00	 mov	 edx, 4
  00842	6b c2 14	 imul	 eax, edx, 20
  00845	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 196  : set_rgb_colour(terrain_colour[0][21],153,153,56,255);

  0084d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00852	6b c8 00	 imul	 ecx, eax, 0
  00855	ba 04 00 00 00	 mov	 edx, 4
  0085a	6b c2 15	 imul	 eax, edx, 21
  0085d	c6 84 01 02 00
	00 00 99	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 153 ; 00000099H
  00865	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0086a	6b c8 00	 imul	 ecx, eax, 0
  0086d	ba 04 00 00 00	 mov	 edx, 4
  00872	6b c2 15	 imul	 eax, edx, 21
  00875	c6 84 01 01 00
	00 00 99	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 153 ; 00000099H
  0087d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00882	6b c8 00	 imul	 ecx, eax, 0
  00885	ba 04 00 00 00	 mov	 edx, 4
  0088a	6b c2 15	 imul	 eax, edx, 21
  0088d	c6 84 01 00 00
	00 00 38	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 56 ; 00000038H
  00895	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0089a	6b c8 00	 imul	 ecx, eax, 0
  0089d	ba 04 00 00 00	 mov	 edx, 4
  008a2	6b c2 15	 imul	 eax, edx, 21
  008a5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 197  : set_rgb_colour(terrain_colour[0][22],158,158,59,255);

  008ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  008b2	6b c8 00	 imul	 ecx, eax, 0
  008b5	ba 04 00 00 00	 mov	 edx, 4
  008ba	6b c2 16	 imul	 eax, edx, 22
  008bd	c6 84 01 02 00
	00 00 9e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 158 ; 0000009eH
  008c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  008ca	6b c8 00	 imul	 ecx, eax, 0
  008cd	ba 04 00 00 00	 mov	 edx, 4
  008d2	6b c2 16	 imul	 eax, edx, 22
  008d5	c6 84 01 01 00
	00 00 9e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 158 ; 0000009eH
  008dd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  008e2	6b c8 00	 imul	 ecx, eax, 0
  008e5	ba 04 00 00 00	 mov	 edx, 4
  008ea	6b c2 16	 imul	 eax, edx, 22
  008ed	c6 84 01 00 00
	00 00 3b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 59 ; 0000003bH
  008f5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  008fa	6b c8 00	 imul	 ecx, eax, 0
  008fd	ba 04 00 00 00	 mov	 edx, 4
  00902	6b c2 16	 imul	 eax, edx, 22
  00905	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 198  : set_rgb_colour(terrain_colour[0][23],163,163,61,255);

  0090d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00912	6b c8 00	 imul	 ecx, eax, 0
  00915	ba 04 00 00 00	 mov	 edx, 4
  0091a	6b c2 17	 imul	 eax, edx, 23
  0091d	c6 84 01 02 00
	00 00 a3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 163 ; 000000a3H
  00925	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0092a	6b c8 00	 imul	 ecx, eax, 0
  0092d	ba 04 00 00 00	 mov	 edx, 4
  00932	6b c2 17	 imul	 eax, edx, 23
  00935	c6 84 01 01 00
	00 00 a3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 163 ; 000000a3H
  0093d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00942	6b c8 00	 imul	 ecx, eax, 0
  00945	ba 04 00 00 00	 mov	 edx, 4
  0094a	6b c2 17	 imul	 eax, edx, 23
  0094d	c6 84 01 00 00
	00 00 3d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 61 ; 0000003dH
  00955	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0095a	6b c8 00	 imul	 ecx, eax, 0
  0095d	ba 04 00 00 00	 mov	 edx, 4
  00962	6b c2 17	 imul	 eax, edx, 23
  00965	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 199  : set_rgb_colour(terrain_colour[0][24],168,168,64,255);

  0096d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00972	6b c8 00	 imul	 ecx, eax, 0
  00975	ba 04 00 00 00	 mov	 edx, 4
  0097a	6b c2 18	 imul	 eax, edx, 24
  0097d	c6 84 01 02 00
	00 00 a8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 168 ; 000000a8H
  00985	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0098a	6b c8 00	 imul	 ecx, eax, 0
  0098d	ba 04 00 00 00	 mov	 edx, 4
  00992	6b c2 18	 imul	 eax, edx, 24
  00995	c6 84 01 01 00
	00 00 a8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 168 ; 000000a8H
  0099d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  009a2	6b c8 00	 imul	 ecx, eax, 0
  009a5	ba 04 00 00 00	 mov	 edx, 4
  009aa	6b c2 18	 imul	 eax, edx, 24
  009ad	c6 84 01 00 00
	00 00 40	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 64 ; 00000040H
  009b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  009ba	6b c8 00	 imul	 ecx, eax, 0
  009bd	ba 04 00 00 00	 mov	 edx, 4
  009c2	6b c2 18	 imul	 eax, edx, 24
  009c5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 200  : set_rgb_colour(terrain_colour[0][25],173,173,66,255);

  009cd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  009d2	6b c8 00	 imul	 ecx, eax, 0
  009d5	ba 04 00 00 00	 mov	 edx, 4
  009da	6b c2 19	 imul	 eax, edx, 25
  009dd	c6 84 01 02 00
	00 00 ad	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 173 ; 000000adH
  009e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  009ea	6b c8 00	 imul	 ecx, eax, 0
  009ed	ba 04 00 00 00	 mov	 edx, 4
  009f2	6b c2 19	 imul	 eax, edx, 25
  009f5	c6 84 01 01 00
	00 00 ad	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 173 ; 000000adH
  009fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00a02	6b c8 00	 imul	 ecx, eax, 0
  00a05	ba 04 00 00 00	 mov	 edx, 4
  00a0a	6b c2 19	 imul	 eax, edx, 25
  00a0d	c6 84 01 00 00
	00 00 42	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 66 ; 00000042H
  00a15	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00a1a	6b c8 00	 imul	 ecx, eax, 0
  00a1d	ba 04 00 00 00	 mov	 edx, 4
  00a22	6b c2 19	 imul	 eax, edx, 25
  00a25	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 201  : set_rgb_colour(terrain_colour[0][26],179,179,69,255);

  00a2d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00a32	6b c8 00	 imul	 ecx, eax, 0
  00a35	ba 04 00 00 00	 mov	 edx, 4
  00a3a	6b c2 1a	 imul	 eax, edx, 26
  00a3d	c6 84 01 02 00
	00 00 b3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 179 ; 000000b3H
  00a45	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00a4a	6b c8 00	 imul	 ecx, eax, 0
  00a4d	ba 04 00 00 00	 mov	 edx, 4
  00a52	6b c2 1a	 imul	 eax, edx, 26
  00a55	c6 84 01 01 00
	00 00 b3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 179 ; 000000b3H
  00a5d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00a62	6b c8 00	 imul	 ecx, eax, 0
  00a65	ba 04 00 00 00	 mov	 edx, 4
  00a6a	6b c2 1a	 imul	 eax, edx, 26
  00a6d	c6 84 01 00 00
	00 00 45	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 69 ; 00000045H
  00a75	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00a7a	6b c8 00	 imul	 ecx, eax, 0
  00a7d	ba 04 00 00 00	 mov	 edx, 4
  00a82	6b c2 1a	 imul	 eax, edx, 26
  00a85	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 202  : set_rgb_colour(terrain_colour[0][27],184,184,71,255);

  00a8d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00a92	6b c8 00	 imul	 ecx, eax, 0
  00a95	ba 04 00 00 00	 mov	 edx, 4
  00a9a	6b c2 1b	 imul	 eax, edx, 27
  00a9d	c6 84 01 02 00
	00 00 b8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 184 ; 000000b8H
  00aa5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00aaa	6b c8 00	 imul	 ecx, eax, 0
  00aad	ba 04 00 00 00	 mov	 edx, 4
  00ab2	6b c2 1b	 imul	 eax, edx, 27
  00ab5	c6 84 01 01 00
	00 00 b8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 184 ; 000000b8H
  00abd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00ac2	6b c8 00	 imul	 ecx, eax, 0
  00ac5	ba 04 00 00 00	 mov	 edx, 4
  00aca	6b c2 1b	 imul	 eax, edx, 27
  00acd	c6 84 01 00 00
	00 00 47	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 71 ; 00000047H
  00ad5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00ada	6b c8 00	 imul	 ecx, eax, 0
  00add	ba 04 00 00 00	 mov	 edx, 4
  00ae2	6b c2 1b	 imul	 eax, edx, 27
  00ae5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 203  : set_rgb_colour(terrain_colour[0][28],189,189,74,255);

  00aed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00af2	6b c8 00	 imul	 ecx, eax, 0
  00af5	ba 04 00 00 00	 mov	 edx, 4
  00afa	6b c2 1c	 imul	 eax, edx, 28
  00afd	c6 84 01 02 00
	00 00 bd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 189 ; 000000bdH
  00b05	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00b0a	6b c8 00	 imul	 ecx, eax, 0
  00b0d	ba 04 00 00 00	 mov	 edx, 4
  00b12	6b c2 1c	 imul	 eax, edx, 28
  00b15	c6 84 01 01 00
	00 00 bd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 189 ; 000000bdH
  00b1d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00b22	6b c8 00	 imul	 ecx, eax, 0
  00b25	ba 04 00 00 00	 mov	 edx, 4
  00b2a	6b c2 1c	 imul	 eax, edx, 28
  00b2d	c6 84 01 00 00
	00 00 4a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 74 ; 0000004aH
  00b35	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00b3a	6b c8 00	 imul	 ecx, eax, 0
  00b3d	ba 04 00 00 00	 mov	 edx, 4
  00b42	6b c2 1c	 imul	 eax, edx, 28
  00b45	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 204  : set_rgb_colour(terrain_colour[0][29],194,194,77,255);

  00b4d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00b52	6b c8 00	 imul	 ecx, eax, 0
  00b55	ba 04 00 00 00	 mov	 edx, 4
  00b5a	6b c2 1d	 imul	 eax, edx, 29
  00b5d	c6 84 01 02 00
	00 00 c2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 194 ; 000000c2H
  00b65	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00b6a	6b c8 00	 imul	 ecx, eax, 0
  00b6d	ba 04 00 00 00	 mov	 edx, 4
  00b72	6b c2 1d	 imul	 eax, edx, 29
  00b75	c6 84 01 01 00
	00 00 c2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 194 ; 000000c2H
  00b7d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00b82	6b c8 00	 imul	 ecx, eax, 0
  00b85	ba 04 00 00 00	 mov	 edx, 4
  00b8a	6b c2 1d	 imul	 eax, edx, 29
  00b8d	c6 84 01 00 00
	00 00 4d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 77 ; 0000004dH
  00b95	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00b9a	6b c8 00	 imul	 ecx, eax, 0
  00b9d	ba 04 00 00 00	 mov	 edx, 4
  00ba2	6b c2 1d	 imul	 eax, edx, 29
  00ba5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 205  : set_rgb_colour(terrain_colour[0][30],199,199,80,255);

  00bad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00bb2	6b c8 00	 imul	 ecx, eax, 0
  00bb5	ba 04 00 00 00	 mov	 edx, 4
  00bba	6b c2 1e	 imul	 eax, edx, 30
  00bbd	c6 84 01 02 00
	00 00 c7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 199 ; 000000c7H
  00bc5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00bca	6b c8 00	 imul	 ecx, eax, 0
  00bcd	ba 04 00 00 00	 mov	 edx, 4
  00bd2	6b c2 1e	 imul	 eax, edx, 30
  00bd5	c6 84 01 01 00
	00 00 c7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 199 ; 000000c7H
  00bdd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00be2	6b c8 00	 imul	 ecx, eax, 0
  00be5	ba 04 00 00 00	 mov	 edx, 4
  00bea	6b c2 1e	 imul	 eax, edx, 30
  00bed	c6 84 01 00 00
	00 00 50	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 80 ; 00000050H
  00bf5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00bfa	6b c8 00	 imul	 ecx, eax, 0
  00bfd	ba 04 00 00 00	 mov	 edx, 4
  00c02	6b c2 1e	 imul	 eax, edx, 30
  00c05	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 206  : set_rgb_colour(terrain_colour[0][31],204,204,82,255);

  00c0d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00c12	6b c8 00	 imul	 ecx, eax, 0
  00c15	ba 04 00 00 00	 mov	 edx, 4
  00c1a	6b c2 1f	 imul	 eax, edx, 31
  00c1d	c6 84 01 02 00
	00 00 cc	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 204 ; 000000ccH
  00c25	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00c2a	6b c8 00	 imul	 ecx, eax, 0
  00c2d	ba 04 00 00 00	 mov	 edx, 4
  00c32	6b c2 1f	 imul	 eax, edx, 31
  00c35	c6 84 01 01 00
	00 00 cc	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 204 ; 000000ccH
  00c3d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00c42	6b c8 00	 imul	 ecx, eax, 0
  00c45	ba 04 00 00 00	 mov	 edx, 4
  00c4a	6b c2 1f	 imul	 eax, edx, 31
  00c4d	c6 84 01 00 00
	00 00 52	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 82 ; 00000052H
  00c55	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00c5a	6b c8 00	 imul	 ecx, eax, 0
  00c5d	ba 04 00 00 00	 mov	 edx, 4
  00c62	6b c2 1f	 imul	 eax, edx, 31
  00c65	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 207  : set_rgb_colour(terrain_colour[0][32],199,197,80,255);

  00c6d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00c72	6b c8 00	 imul	 ecx, eax, 0
  00c75	ba 04 00 00 00	 mov	 edx, 4
  00c7a	c1 e2 05	 shl	 edx, 5
  00c7d	c6 84 11 02 00
	00 00 c7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 199 ; 000000c7H
  00c85	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00c8a	6b c8 00	 imul	 ecx, eax, 0
  00c8d	ba 04 00 00 00	 mov	 edx, 4
  00c92	c1 e2 05	 shl	 edx, 5
  00c95	c6 84 11 01 00
	00 00 c5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 197 ; 000000c5H
  00c9d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00ca2	6b c8 00	 imul	 ecx, eax, 0
  00ca5	ba 04 00 00 00	 mov	 edx, 4
  00caa	c1 e2 05	 shl	 edx, 5
  00cad	c6 84 11 00 00
	00 00 50	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 80 ; 00000050H
  00cb5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00cba	6b c8 00	 imul	 ecx, eax, 0
  00cbd	ba 04 00 00 00	 mov	 edx, 4
  00cc2	c1 e2 05	 shl	 edx, 5
  00cc5	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 208  : set_rgb_colour(terrain_colour[0][33],194,189,77,255);

  00ccd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00cd2	6b c8 00	 imul	 ecx, eax, 0
  00cd5	ba 04 00 00 00	 mov	 edx, 4
  00cda	6b c2 21	 imul	 eax, edx, 33
  00cdd	c6 84 01 02 00
	00 00 c2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 194 ; 000000c2H
  00ce5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00cea	6b c8 00	 imul	 ecx, eax, 0
  00ced	ba 04 00 00 00	 mov	 edx, 4
  00cf2	6b c2 21	 imul	 eax, edx, 33
  00cf5	c6 84 01 01 00
	00 00 bd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 189 ; 000000bdH
  00cfd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00d02	6b c8 00	 imul	 ecx, eax, 0
  00d05	ba 04 00 00 00	 mov	 edx, 4
  00d0a	6b c2 21	 imul	 eax, edx, 33
  00d0d	c6 84 01 00 00
	00 00 4d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 77 ; 0000004dH
  00d15	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00d1a	6b c8 00	 imul	 ecx, eax, 0
  00d1d	ba 04 00 00 00	 mov	 edx, 4
  00d22	6b c2 21	 imul	 eax, edx, 33
  00d25	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 209  : set_rgb_colour(terrain_colour[0][34],189,181,74,255);

  00d2d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00d32	6b c8 00	 imul	 ecx, eax, 0
  00d35	ba 04 00 00 00	 mov	 edx, 4
  00d3a	6b c2 22	 imul	 eax, edx, 34
  00d3d	c6 84 01 02 00
	00 00 bd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 189 ; 000000bdH
  00d45	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00d4a	6b c8 00	 imul	 ecx, eax, 0
  00d4d	ba 04 00 00 00	 mov	 edx, 4
  00d52	6b c2 22	 imul	 eax, edx, 34
  00d55	c6 84 01 01 00
	00 00 b5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 181 ; 000000b5H
  00d5d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00d62	6b c8 00	 imul	 ecx, eax, 0
  00d65	ba 04 00 00 00	 mov	 edx, 4
  00d6a	6b c2 22	 imul	 eax, edx, 34
  00d6d	c6 84 01 00 00
	00 00 4a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 74 ; 0000004aH
  00d75	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00d7a	6b c8 00	 imul	 ecx, eax, 0
  00d7d	ba 04 00 00 00	 mov	 edx, 4
  00d82	6b c2 22	 imul	 eax, edx, 34
  00d85	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 210  : set_rgb_colour(terrain_colour[0][35],184,173,71,255);

  00d8d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00d92	6b c8 00	 imul	 ecx, eax, 0
  00d95	ba 04 00 00 00	 mov	 edx, 4
  00d9a	6b c2 23	 imul	 eax, edx, 35
  00d9d	c6 84 01 02 00
	00 00 b8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 184 ; 000000b8H
  00da5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00daa	6b c8 00	 imul	 ecx, eax, 0
  00dad	ba 04 00 00 00	 mov	 edx, 4
  00db2	6b c2 23	 imul	 eax, edx, 35
  00db5	c6 84 01 01 00
	00 00 ad	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 173 ; 000000adH
  00dbd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00dc2	6b c8 00	 imul	 ecx, eax, 0
  00dc5	ba 04 00 00 00	 mov	 edx, 4
  00dca	6b c2 23	 imul	 eax, edx, 35
  00dcd	c6 84 01 00 00
	00 00 47	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 71 ; 00000047H
  00dd5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00dda	6b c8 00	 imul	 ecx, eax, 0
  00ddd	ba 04 00 00 00	 mov	 edx, 4
  00de2	6b c2 23	 imul	 eax, edx, 35
  00de5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 211  : set_rgb_colour(terrain_colour[0][36],179,166,69,255);

  00ded	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00df2	6b c8 00	 imul	 ecx, eax, 0
  00df5	ba 04 00 00 00	 mov	 edx, 4
  00dfa	6b c2 24	 imul	 eax, edx, 36
  00dfd	c6 84 01 02 00
	00 00 b3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 179 ; 000000b3H
  00e05	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00e0a	6b c8 00	 imul	 ecx, eax, 0
  00e0d	ba 04 00 00 00	 mov	 edx, 4
  00e12	6b c2 24	 imul	 eax, edx, 36
  00e15	c6 84 01 01 00
	00 00 a6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 166 ; 000000a6H
  00e1d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00e22	6b c8 00	 imul	 ecx, eax, 0
  00e25	ba 04 00 00 00	 mov	 edx, 4
  00e2a	6b c2 24	 imul	 eax, edx, 36
  00e2d	c6 84 01 00 00
	00 00 45	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 69 ; 00000045H
  00e35	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00e3a	6b c8 00	 imul	 ecx, eax, 0
  00e3d	ba 04 00 00 00	 mov	 edx, 4
  00e42	6b c2 24	 imul	 eax, edx, 36
  00e45	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 212  : set_rgb_colour(terrain_colour[0][37],173,158,66,255);

  00e4d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00e52	6b c8 00	 imul	 ecx, eax, 0
  00e55	ba 04 00 00 00	 mov	 edx, 4
  00e5a	6b c2 25	 imul	 eax, edx, 37
  00e5d	c6 84 01 02 00
	00 00 ad	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 173 ; 000000adH
  00e65	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00e6a	6b c8 00	 imul	 ecx, eax, 0
  00e6d	ba 04 00 00 00	 mov	 edx, 4
  00e72	6b c2 25	 imul	 eax, edx, 37
  00e75	c6 84 01 01 00
	00 00 9e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 158 ; 0000009eH
  00e7d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00e82	6b c8 00	 imul	 ecx, eax, 0
  00e85	ba 04 00 00 00	 mov	 edx, 4
  00e8a	6b c2 25	 imul	 eax, edx, 37
  00e8d	c6 84 01 00 00
	00 00 42	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 66 ; 00000042H
  00e95	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00e9a	6b c8 00	 imul	 ecx, eax, 0
  00e9d	ba 04 00 00 00	 mov	 edx, 4
  00ea2	6b c2 25	 imul	 eax, edx, 37
  00ea5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 213  : set_rgb_colour(terrain_colour[0][38],168,151,64,255);

  00ead	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00eb2	6b c8 00	 imul	 ecx, eax, 0
  00eb5	ba 04 00 00 00	 mov	 edx, 4
  00eba	6b c2 26	 imul	 eax, edx, 38
  00ebd	c6 84 01 02 00
	00 00 a8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 168 ; 000000a8H
  00ec5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00eca	6b c8 00	 imul	 ecx, eax, 0
  00ecd	ba 04 00 00 00	 mov	 edx, 4
  00ed2	6b c2 26	 imul	 eax, edx, 38
  00ed5	c6 84 01 01 00
	00 00 97	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 151 ; 00000097H
  00edd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00ee2	6b c8 00	 imul	 ecx, eax, 0
  00ee5	ba 04 00 00 00	 mov	 edx, 4
  00eea	6b c2 26	 imul	 eax, edx, 38
  00eed	c6 84 01 00 00
	00 00 40	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 64 ; 00000040H
  00ef5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00efa	6b c8 00	 imul	 ecx, eax, 0
  00efd	ba 04 00 00 00	 mov	 edx, 4
  00f02	6b c2 26	 imul	 eax, edx, 38
  00f05	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 214  : set_rgb_colour(terrain_colour[0][39],163,143,61,255);

  00f0d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00f12	6b c8 00	 imul	 ecx, eax, 0
  00f15	ba 04 00 00 00	 mov	 edx, 4
  00f1a	6b c2 27	 imul	 eax, edx, 39
  00f1d	c6 84 01 02 00
	00 00 a3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 163 ; 000000a3H
  00f25	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00f2a	6b c8 00	 imul	 ecx, eax, 0
  00f2d	ba 04 00 00 00	 mov	 edx, 4
  00f32	6b c2 27	 imul	 eax, edx, 39
  00f35	c6 84 01 01 00
	00 00 8f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 143 ; 0000008fH
  00f3d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00f42	6b c8 00	 imul	 ecx, eax, 0
  00f45	ba 04 00 00 00	 mov	 edx, 4
  00f4a	6b c2 27	 imul	 eax, edx, 39
  00f4d	c6 84 01 00 00
	00 00 3d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 61 ; 0000003dH
  00f55	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00f5a	6b c8 00	 imul	 ecx, eax, 0
  00f5d	ba 04 00 00 00	 mov	 edx, 4
  00f62	6b c2 27	 imul	 eax, edx, 39
  00f65	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 215  : set_rgb_colour(terrain_colour[0][40],158,136,59,255);

  00f6d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00f72	6b c8 00	 imul	 ecx, eax, 0
  00f75	ba 04 00 00 00	 mov	 edx, 4
  00f7a	6b c2 28	 imul	 eax, edx, 40
  00f7d	c6 84 01 02 00
	00 00 9e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 158 ; 0000009eH
  00f85	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00f8a	6b c8 00	 imul	 ecx, eax, 0
  00f8d	ba 04 00 00 00	 mov	 edx, 4
  00f92	6b c2 28	 imul	 eax, edx, 40
  00f95	c6 84 01 01 00
	00 00 88	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 136 ; 00000088H
  00f9d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00fa2	6b c8 00	 imul	 ecx, eax, 0
  00fa5	ba 04 00 00 00	 mov	 edx, 4
  00faa	6b c2 28	 imul	 eax, edx, 40
  00fad	c6 84 01 00 00
	00 00 3b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 59 ; 0000003bH
  00fb5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00fba	6b c8 00	 imul	 ecx, eax, 0
  00fbd	ba 04 00 00 00	 mov	 edx, 4
  00fc2	6b c2 28	 imul	 eax, edx, 40
  00fc5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 216  : set_rgb_colour(terrain_colour[0][41],153,128,56,255);

  00fcd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00fd2	6b c8 00	 imul	 ecx, eax, 0
  00fd5	ba 04 00 00 00	 mov	 edx, 4
  00fda	6b c2 29	 imul	 eax, edx, 41
  00fdd	c6 84 01 02 00
	00 00 99	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 153 ; 00000099H
  00fe5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  00fea	6b c8 00	 imul	 ecx, eax, 0
  00fed	ba 04 00 00 00	 mov	 edx, 4
  00ff2	6b c2 29	 imul	 eax, edx, 41
  00ff5	c6 84 01 01 00
	00 00 80	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 128 ; 00000080H
  00ffd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01002	6b c8 00	 imul	 ecx, eax, 0
  01005	ba 04 00 00 00	 mov	 edx, 4
  0100a	6b c2 29	 imul	 eax, edx, 41
  0100d	c6 84 01 00 00
	00 00 38	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 56 ; 00000038H
  01015	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0101a	6b c8 00	 imul	 ecx, eax, 0
  0101d	ba 04 00 00 00	 mov	 edx, 4
  01022	6b c2 29	 imul	 eax, edx, 41
  01025	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 217  : set_rgb_colour(terrain_colour[0][42],148,120,54,255);

  0102d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01032	6b c8 00	 imul	 ecx, eax, 0
  01035	ba 04 00 00 00	 mov	 edx, 4
  0103a	6b c2 2a	 imul	 eax, edx, 42
  0103d	c6 84 01 02 00
	00 00 94	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 148 ; 00000094H
  01045	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0104a	6b c8 00	 imul	 ecx, eax, 0
  0104d	ba 04 00 00 00	 mov	 edx, 4
  01052	6b c2 2a	 imul	 eax, edx, 42
  01055	c6 84 01 01 00
	00 00 78	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 120 ; 00000078H
  0105d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01062	6b c8 00	 imul	 ecx, eax, 0
  01065	ba 04 00 00 00	 mov	 edx, 4
  0106a	6b c2 2a	 imul	 eax, edx, 42
  0106d	c6 84 01 00 00
	00 00 36	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 54 ; 00000036H
  01075	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0107a	6b c8 00	 imul	 ecx, eax, 0
  0107d	ba 04 00 00 00	 mov	 edx, 4
  01082	6b c2 2a	 imul	 eax, edx, 42
  01085	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 218  : set_rgb_colour(terrain_colour[0][43],143,112,51,255);

  0108d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01092	6b c8 00	 imul	 ecx, eax, 0
  01095	ba 04 00 00 00	 mov	 edx, 4
  0109a	6b c2 2b	 imul	 eax, edx, 43
  0109d	c6 84 01 02 00
	00 00 8f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 143 ; 0000008fH
  010a5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  010aa	6b c8 00	 imul	 ecx, eax, 0
  010ad	ba 04 00 00 00	 mov	 edx, 4
  010b2	6b c2 2b	 imul	 eax, edx, 43
  010b5	c6 84 01 01 00
	00 00 70	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 112 ; 00000070H
  010bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  010c2	6b c8 00	 imul	 ecx, eax, 0
  010c5	ba 04 00 00 00	 mov	 edx, 4
  010ca	6b c2 2b	 imul	 eax, edx, 43
  010cd	c6 84 01 00 00
	00 00 33	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 51 ; 00000033H
  010d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  010da	6b c8 00	 imul	 ecx, eax, 0
  010dd	ba 04 00 00 00	 mov	 edx, 4
  010e2	6b c2 2b	 imul	 eax, edx, 43
  010e5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 219  : set_rgb_colour(terrain_colour[0][44],138,105,49,255);

  010ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  010f2	6b c8 00	 imul	 ecx, eax, 0
  010f5	ba 04 00 00 00	 mov	 edx, 4
  010fa	6b c2 2c	 imul	 eax, edx, 44
  010fd	c6 84 01 02 00
	00 00 8a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 138 ; 0000008aH
  01105	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0110a	6b c8 00	 imul	 ecx, eax, 0
  0110d	ba 04 00 00 00	 mov	 edx, 4
  01112	6b c2 2c	 imul	 eax, edx, 44
  01115	c6 84 01 01 00
	00 00 69	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 105 ; 00000069H
  0111d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01122	6b c8 00	 imul	 ecx, eax, 0
  01125	ba 04 00 00 00	 mov	 edx, 4
  0112a	6b c2 2c	 imul	 eax, edx, 44
  0112d	c6 84 01 00 00
	00 00 31	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 49 ; 00000031H
  01135	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0113a	6b c8 00	 imul	 ecx, eax, 0
  0113d	ba 04 00 00 00	 mov	 edx, 4
  01142	6b c2 2c	 imul	 eax, edx, 44
  01145	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 220  : set_rgb_colour(terrain_colour[0][45],133,97,46,255);

  0114d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01152	6b c8 00	 imul	 ecx, eax, 0
  01155	ba 04 00 00 00	 mov	 edx, 4
  0115a	6b c2 2d	 imul	 eax, edx, 45
  0115d	c6 84 01 02 00
	00 00 85	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 133 ; 00000085H
  01165	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0116a	6b c8 00	 imul	 ecx, eax, 0
  0116d	ba 04 00 00 00	 mov	 edx, 4
  01172	6b c2 2d	 imul	 eax, edx, 45
  01175	c6 84 01 01 00
	00 00 61	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 97 ; 00000061H
  0117d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01182	6b c8 00	 imul	 ecx, eax, 0
  01185	ba 04 00 00 00	 mov	 edx, 4
  0118a	6b c2 2d	 imul	 eax, edx, 45
  0118d	c6 84 01 00 00
	00 00 2e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 46 ; 0000002eH
  01195	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0119a	6b c8 00	 imul	 ecx, eax, 0
  0119d	ba 04 00 00 00	 mov	 edx, 4
  011a2	6b c2 2d	 imul	 eax, edx, 45
  011a5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 221  : set_rgb_colour(terrain_colour[0][46],128,90,44,255);

  011ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  011b2	6b c8 00	 imul	 ecx, eax, 0
  011b5	ba 04 00 00 00	 mov	 edx, 4
  011ba	6b c2 2e	 imul	 eax, edx, 46
  011bd	c6 84 01 02 00
	00 00 80	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 128 ; 00000080H
  011c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  011ca	6b c8 00	 imul	 ecx, eax, 0
  011cd	ba 04 00 00 00	 mov	 edx, 4
  011d2	6b c2 2e	 imul	 eax, edx, 46
  011d5	c6 84 01 01 00
	00 00 5a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 90 ; 0000005aH
  011dd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  011e2	6b c8 00	 imul	 ecx, eax, 0
  011e5	ba 04 00 00 00	 mov	 edx, 4
  011ea	6b c2 2e	 imul	 eax, edx, 46
  011ed	c6 84 01 00 00
	00 00 2c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 44 ; 0000002cH
  011f5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  011fa	6b c8 00	 imul	 ecx, eax, 0
  011fd	ba 04 00 00 00	 mov	 edx, 4
  01202	6b c2 2e	 imul	 eax, edx, 46
  01205	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 222  : set_rgb_colour(terrain_colour[0][47],122,82,41,255);

  0120d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01212	6b c8 00	 imul	 ecx, eax, 0
  01215	ba 04 00 00 00	 mov	 edx, 4
  0121a	6b c2 2f	 imul	 eax, edx, 47
  0121d	c6 84 01 02 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 122 ; 0000007aH
  01225	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0122a	6b c8 00	 imul	 ecx, eax, 0
  0122d	ba 04 00 00 00	 mov	 edx, 4
  01232	6b c2 2f	 imul	 eax, edx, 47
  01235	c6 84 01 01 00
	00 00 52	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 82 ; 00000052H
  0123d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01242	6b c8 00	 imul	 ecx, eax, 0
  01245	ba 04 00 00 00	 mov	 edx, 4
  0124a	6b c2 2f	 imul	 eax, edx, 47
  0124d	c6 84 01 00 00
	00 00 29	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 41 ; 00000029H
  01255	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0125a	6b c8 00	 imul	 ecx, eax, 0
  0125d	ba 04 00 00 00	 mov	 edx, 4
  01262	6b c2 2f	 imul	 eax, edx, 47
  01265	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 223  : set_rgb_colour(terrain_colour[0][48],126,88,49,255);

  0126d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01272	6b c8 00	 imul	 ecx, eax, 0
  01275	ba 04 00 00 00	 mov	 edx, 4
  0127a	6b c2 30	 imul	 eax, edx, 48
  0127d	c6 84 01 02 00
	00 00 7e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 126 ; 0000007eH
  01285	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0128a	6b c8 00	 imul	 ecx, eax, 0
  0128d	ba 04 00 00 00	 mov	 edx, 4
  01292	6b c2 30	 imul	 eax, edx, 48
  01295	c6 84 01 01 00
	00 00 58	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 88 ; 00000058H
  0129d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  012a2	6b c8 00	 imul	 ecx, eax, 0
  012a5	ba 04 00 00 00	 mov	 edx, 4
  012aa	6b c2 30	 imul	 eax, edx, 48
  012ad	c6 84 01 00 00
	00 00 31	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 49 ; 00000031H
  012b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  012ba	6b c8 00	 imul	 ecx, eax, 0
  012bd	ba 04 00 00 00	 mov	 edx, 4
  012c2	6b c2 30	 imul	 eax, edx, 48
  012c5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 224  : set_rgb_colour(terrain_colour[0][49],130,93,56,255);

  012cd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  012d2	6b c8 00	 imul	 ecx, eax, 0
  012d5	ba 04 00 00 00	 mov	 edx, 4
  012da	6b c2 31	 imul	 eax, edx, 49
  012dd	c6 84 01 02 00
	00 00 82	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 130 ; 00000082H
  012e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  012ea	6b c8 00	 imul	 ecx, eax, 0
  012ed	ba 04 00 00 00	 mov	 edx, 4
  012f2	6b c2 31	 imul	 eax, edx, 49
  012f5	c6 84 01 01 00
	00 00 5d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 93 ; 0000005dH
  012fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01302	6b c8 00	 imul	 ecx, eax, 0
  01305	ba 04 00 00 00	 mov	 edx, 4
  0130a	6b c2 31	 imul	 eax, edx, 49
  0130d	c6 84 01 00 00
	00 00 38	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 56 ; 00000038H
  01315	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0131a	6b c8 00	 imul	 ecx, eax, 0
  0131d	ba 04 00 00 00	 mov	 edx, 4
  01322	6b c2 31	 imul	 eax, edx, 49
  01325	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 225  : set_rgb_colour(terrain_colour[0][50],134,99,64,255);

  0132d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01332	6b c8 00	 imul	 ecx, eax, 0
  01335	ba 04 00 00 00	 mov	 edx, 4
  0133a	6b c2 32	 imul	 eax, edx, 50
  0133d	c6 84 01 02 00
	00 00 86	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 134 ; 00000086H
  01345	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0134a	6b c8 00	 imul	 ecx, eax, 0
  0134d	ba 04 00 00 00	 mov	 edx, 4
  01352	6b c2 32	 imul	 eax, edx, 50
  01355	c6 84 01 01 00
	00 00 63	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 99 ; 00000063H
  0135d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01362	6b c8 00	 imul	 ecx, eax, 0
  01365	ba 04 00 00 00	 mov	 edx, 4
  0136a	6b c2 32	 imul	 eax, edx, 50
  0136d	c6 84 01 00 00
	00 00 40	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 64 ; 00000040H
  01375	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0137a	6b c8 00	 imul	 ecx, eax, 0
  0137d	ba 04 00 00 00	 mov	 edx, 4
  01382	6b c2 32	 imul	 eax, edx, 50
  01385	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 226  : set_rgb_colour(terrain_colour[0][51],138,105,71,255);

  0138d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01392	6b c8 00	 imul	 ecx, eax, 0
  01395	ba 04 00 00 00	 mov	 edx, 4
  0139a	6b c2 33	 imul	 eax, edx, 51
  0139d	c6 84 01 02 00
	00 00 8a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 138 ; 0000008aH
  013a5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  013aa	6b c8 00	 imul	 ecx, eax, 0
  013ad	ba 04 00 00 00	 mov	 edx, 4
  013b2	6b c2 33	 imul	 eax, edx, 51
  013b5	c6 84 01 01 00
	00 00 69	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 105 ; 00000069H
  013bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  013c2	6b c8 00	 imul	 ecx, eax, 0
  013c5	ba 04 00 00 00	 mov	 edx, 4
  013ca	6b c2 33	 imul	 eax, edx, 51
  013cd	c6 84 01 00 00
	00 00 47	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 71 ; 00000047H
  013d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  013da	6b c8 00	 imul	 ecx, eax, 0
  013dd	ba 04 00 00 00	 mov	 edx, 4
  013e2	6b c2 33	 imul	 eax, edx, 51
  013e5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 227  : set_rgb_colour(terrain_colour[0][52],142,111,79,255);

  013ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  013f2	6b c8 00	 imul	 ecx, eax, 0
  013f5	ba 04 00 00 00	 mov	 edx, 4
  013fa	6b c2 34	 imul	 eax, edx, 52
  013fd	c6 84 01 02 00
	00 00 8e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 142 ; 0000008eH
  01405	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0140a	6b c8 00	 imul	 ecx, eax, 0
  0140d	ba 04 00 00 00	 mov	 edx, 4
  01412	6b c2 34	 imul	 eax, edx, 52
  01415	c6 84 01 01 00
	00 00 6f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 111 ; 0000006fH
  0141d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01422	6b c8 00	 imul	 ecx, eax, 0
  01425	ba 04 00 00 00	 mov	 edx, 4
  0142a	6b c2 34	 imul	 eax, edx, 52
  0142d	c6 84 01 00 00
	00 00 4f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 79 ; 0000004fH
  01435	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0143a	6b c8 00	 imul	 ecx, eax, 0
  0143d	ba 04 00 00 00	 mov	 edx, 4
  01442	6b c2 34	 imul	 eax, edx, 52
  01445	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 228  : set_rgb_colour(terrain_colour[0][53],146,116,87,255);

  0144d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01452	6b c8 00	 imul	 ecx, eax, 0
  01455	ba 04 00 00 00	 mov	 edx, 4
  0145a	6b c2 35	 imul	 eax, edx, 53
  0145d	c6 84 01 02 00
	00 00 92	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 146 ; 00000092H
  01465	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0146a	6b c8 00	 imul	 ecx, eax, 0
  0146d	ba 04 00 00 00	 mov	 edx, 4
  01472	6b c2 35	 imul	 eax, edx, 53
  01475	c6 84 01 01 00
	00 00 74	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 116 ; 00000074H
  0147d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01482	6b c8 00	 imul	 ecx, eax, 0
  01485	ba 04 00 00 00	 mov	 edx, 4
  0148a	6b c2 35	 imul	 eax, edx, 53
  0148d	c6 84 01 00 00
	00 00 57	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 87 ; 00000057H
  01495	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0149a	6b c8 00	 imul	 ecx, eax, 0
  0149d	ba 04 00 00 00	 mov	 edx, 4
  014a2	6b c2 35	 imul	 eax, edx, 53
  014a5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 229  : set_rgb_colour(terrain_colour[0][54],150,122,95,255);

  014ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  014b2	6b c8 00	 imul	 ecx, eax, 0
  014b5	ba 04 00 00 00	 mov	 edx, 4
  014ba	6b c2 36	 imul	 eax, edx, 54
  014bd	c6 84 01 02 00
	00 00 96	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 150 ; 00000096H
  014c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  014ca	6b c8 00	 imul	 ecx, eax, 0
  014cd	ba 04 00 00 00	 mov	 edx, 4
  014d2	6b c2 36	 imul	 eax, edx, 54
  014d5	c6 84 01 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 122 ; 0000007aH
  014dd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  014e2	6b c8 00	 imul	 ecx, eax, 0
  014e5	ba 04 00 00 00	 mov	 edx, 4
  014ea	6b c2 36	 imul	 eax, edx, 54
  014ed	c6 84 01 00 00
	00 00 5f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 95 ; 0000005fH
  014f5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  014fa	6b c8 00	 imul	 ecx, eax, 0
  014fd	ba 04 00 00 00	 mov	 edx, 4
  01502	6b c2 36	 imul	 eax, edx, 54
  01505	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 230  : set_rgb_colour(terrain_colour[0][55],153,128,102,255);

  0150d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01512	6b c8 00	 imul	 ecx, eax, 0
  01515	ba 04 00 00 00	 mov	 edx, 4
  0151a	6b c2 37	 imul	 eax, edx, 55
  0151d	c6 84 01 02 00
	00 00 99	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 153 ; 00000099H
  01525	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0152a	6b c8 00	 imul	 ecx, eax, 0
  0152d	ba 04 00 00 00	 mov	 edx, 4
  01532	6b c2 37	 imul	 eax, edx, 55
  01535	c6 84 01 01 00
	00 00 80	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 128 ; 00000080H
  0153d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01542	6b c8 00	 imul	 ecx, eax, 0
  01545	ba 04 00 00 00	 mov	 edx, 4
  0154a	6b c2 37	 imul	 eax, edx, 55
  0154d	c6 84 01 00 00
	00 00 66	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 102 ; 00000066H
  01555	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0155a	6b c8 00	 imul	 ecx, eax, 0
  0155d	ba 04 00 00 00	 mov	 edx, 4
  01562	6b c2 37	 imul	 eax, edx, 55
  01565	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 231  : set_rgb_colour(terrain_colour[0][56],157,134,110,255);

  0156d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01572	6b c8 00	 imul	 ecx, eax, 0
  01575	ba 04 00 00 00	 mov	 edx, 4
  0157a	6b c2 38	 imul	 eax, edx, 56
  0157d	c6 84 01 02 00
	00 00 9d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 157 ; 0000009dH
  01585	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0158a	6b c8 00	 imul	 ecx, eax, 0
  0158d	ba 04 00 00 00	 mov	 edx, 4
  01592	6b c2 38	 imul	 eax, edx, 56
  01595	c6 84 01 01 00
	00 00 86	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 134 ; 00000086H
  0159d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  015a2	6b c8 00	 imul	 ecx, eax, 0
  015a5	ba 04 00 00 00	 mov	 edx, 4
  015aa	6b c2 38	 imul	 eax, edx, 56
  015ad	c6 84 01 00 00
	00 00 6e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 110 ; 0000006eH
  015b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  015ba	6b c8 00	 imul	 ecx, eax, 0
  015bd	ba 04 00 00 00	 mov	 edx, 4
  015c2	6b c2 38	 imul	 eax, edx, 56
  015c5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 232  : set_rgb_colour(terrain_colour[0][57],161,139,117,255);

  015cd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  015d2	6b c8 00	 imul	 ecx, eax, 0
  015d5	ba 04 00 00 00	 mov	 edx, 4
  015da	6b c2 39	 imul	 eax, edx, 57
  015dd	c6 84 01 02 00
	00 00 a1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 161 ; 000000a1H
  015e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  015ea	6b c8 00	 imul	 ecx, eax, 0
  015ed	ba 04 00 00 00	 mov	 edx, 4
  015f2	6b c2 39	 imul	 eax, edx, 57
  015f5	c6 84 01 01 00
	00 00 8b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 139 ; 0000008bH
  015fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01602	6b c8 00	 imul	 ecx, eax, 0
  01605	ba 04 00 00 00	 mov	 edx, 4
  0160a	6b c2 39	 imul	 eax, edx, 57
  0160d	c6 84 01 00 00
	00 00 75	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 117 ; 00000075H
  01615	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0161a	6b c8 00	 imul	 ecx, eax, 0
  0161d	ba 04 00 00 00	 mov	 edx, 4
  01622	6b c2 39	 imul	 eax, edx, 57
  01625	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 233  : set_rgb_colour(terrain_colour[0][58],165,145,125,255);

  0162d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01632	6b c8 00	 imul	 ecx, eax, 0
  01635	ba 04 00 00 00	 mov	 edx, 4
  0163a	6b c2 3a	 imul	 eax, edx, 58
  0163d	c6 84 01 02 00
	00 00 a5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 165 ; 000000a5H
  01645	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0164a	6b c8 00	 imul	 ecx, eax, 0
  0164d	ba 04 00 00 00	 mov	 edx, 4
  01652	6b c2 3a	 imul	 eax, edx, 58
  01655	c6 84 01 01 00
	00 00 91	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 145 ; 00000091H
  0165d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01662	6b c8 00	 imul	 ecx, eax, 0
  01665	ba 04 00 00 00	 mov	 edx, 4
  0166a	6b c2 3a	 imul	 eax, edx, 58
  0166d	c6 84 01 00 00
	00 00 7d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 125 ; 0000007dH
  01675	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0167a	6b c8 00	 imul	 ecx, eax, 0
  0167d	ba 04 00 00 00	 mov	 edx, 4
  01682	6b c2 3a	 imul	 eax, edx, 58
  01685	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 234  : set_rgb_colour(terrain_colour[0][59],169,151,133,255);

  0168d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01692	6b c8 00	 imul	 ecx, eax, 0
  01695	ba 04 00 00 00	 mov	 edx, 4
  0169a	6b c2 3b	 imul	 eax, edx, 59
  0169d	c6 84 01 02 00
	00 00 a9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 169 ; 000000a9H
  016a5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  016aa	6b c8 00	 imul	 ecx, eax, 0
  016ad	ba 04 00 00 00	 mov	 edx, 4
  016b2	6b c2 3b	 imul	 eax, edx, 59
  016b5	c6 84 01 01 00
	00 00 97	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 151 ; 00000097H
  016bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  016c2	6b c8 00	 imul	 ecx, eax, 0
  016c5	ba 04 00 00 00	 mov	 edx, 4
  016ca	6b c2 3b	 imul	 eax, edx, 59
  016cd	c6 84 01 00 00
	00 00 85	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 133 ; 00000085H
  016d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  016da	6b c8 00	 imul	 ecx, eax, 0
  016dd	ba 04 00 00 00	 mov	 edx, 4
  016e2	6b c2 3b	 imul	 eax, edx, 59
  016e5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 235  : set_rgb_colour(terrain_colour[0][60],173,157,141,255);

  016ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  016f2	6b c8 00	 imul	 ecx, eax, 0
  016f5	ba 04 00 00 00	 mov	 edx, 4
  016fa	6b c2 3c	 imul	 eax, edx, 60
  016fd	c6 84 01 02 00
	00 00 ad	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 173 ; 000000adH
  01705	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0170a	6b c8 00	 imul	 ecx, eax, 0
  0170d	ba 04 00 00 00	 mov	 edx, 4
  01712	6b c2 3c	 imul	 eax, edx, 60
  01715	c6 84 01 01 00
	00 00 9d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 157 ; 0000009dH
  0171d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01722	6b c8 00	 imul	 ecx, eax, 0
  01725	ba 04 00 00 00	 mov	 edx, 4
  0172a	6b c2 3c	 imul	 eax, edx, 60
  0172d	c6 84 01 00 00
	00 00 8d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 141 ; 0000008dH
  01735	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0173a	6b c8 00	 imul	 ecx, eax, 0
  0173d	ba 04 00 00 00	 mov	 edx, 4
  01742	6b c2 3c	 imul	 eax, edx, 60
  01745	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 236  : set_rgb_colour(terrain_colour[0][61],176,162,148,255);

  0174d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01752	6b c8 00	 imul	 ecx, eax, 0
  01755	ba 04 00 00 00	 mov	 edx, 4
  0175a	6b c2 3d	 imul	 eax, edx, 61
  0175d	c6 84 01 02 00
	00 00 b0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 176 ; 000000b0H
  01765	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0176a	6b c8 00	 imul	 ecx, eax, 0
  0176d	ba 04 00 00 00	 mov	 edx, 4
  01772	6b c2 3d	 imul	 eax, edx, 61
  01775	c6 84 01 01 00
	00 00 a2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 162 ; 000000a2H
  0177d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01782	6b c8 00	 imul	 ecx, eax, 0
  01785	ba 04 00 00 00	 mov	 edx, 4
  0178a	6b c2 3d	 imul	 eax, edx, 61
  0178d	c6 84 01 00 00
	00 00 94	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 148 ; 00000094H
  01795	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0179a	6b c8 00	 imul	 ecx, eax, 0
  0179d	ba 04 00 00 00	 mov	 edx, 4
  017a2	6b c2 3d	 imul	 eax, edx, 61
  017a5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 237  : set_rgb_colour(terrain_colour[0][62],180,168,156,255);

  017ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  017b2	6b c8 00	 imul	 ecx, eax, 0
  017b5	ba 04 00 00 00	 mov	 edx, 4
  017ba	6b c2 3e	 imul	 eax, edx, 62
  017bd	c6 84 01 02 00
	00 00 b4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 180 ; 000000b4H
  017c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  017ca	6b c8 00	 imul	 ecx, eax, 0
  017cd	ba 04 00 00 00	 mov	 edx, 4
  017d2	6b c2 3e	 imul	 eax, edx, 62
  017d5	c6 84 01 01 00
	00 00 a8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 168 ; 000000a8H
  017dd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  017e2	6b c8 00	 imul	 ecx, eax, 0
  017e5	ba 04 00 00 00	 mov	 edx, 4
  017ea	6b c2 3e	 imul	 eax, edx, 62
  017ed	c6 84 01 00 00
	00 00 9c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 156 ; 0000009cH
  017f5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  017fa	6b c8 00	 imul	 ecx, eax, 0
  017fd	ba 04 00 00 00	 mov	 edx, 4
  01802	6b c2 3e	 imul	 eax, edx, 62
  01805	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 238  : set_rgb_colour(terrain_colour[0][63],184,174,163,255);

  0180d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01812	6b c8 00	 imul	 ecx, eax, 0
  01815	ba 04 00 00 00	 mov	 edx, 4
  0181a	6b c2 3f	 imul	 eax, edx, 63
  0181d	c6 84 01 02 00
	00 00 b8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 184 ; 000000b8H
  01825	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0182a	6b c8 00	 imul	 ecx, eax, 0
  0182d	ba 04 00 00 00	 mov	 edx, 4
  01832	6b c2 3f	 imul	 eax, edx, 63
  01835	c6 84 01 01 00
	00 00 ae	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 174 ; 000000aeH
  0183d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01842	6b c8 00	 imul	 ecx, eax, 0
  01845	ba 04 00 00 00	 mov	 edx, 4
  0184a	6b c2 3f	 imul	 eax, edx, 63
  0184d	c6 84 01 00 00
	00 00 a3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 163 ; 000000a3H
  01855	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0185a	6b c8 00	 imul	 ecx, eax, 0
  0185d	ba 04 00 00 00	 mov	 edx, 4
  01862	6b c2 3f	 imul	 eax, edx, 63
  01865	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 239  : set_rgb_colour(terrain_colour[0][64],184,174,163,255);

  0186d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01872	6b c8 00	 imul	 ecx, eax, 0
  01875	ba 04 00 00 00	 mov	 edx, 4
  0187a	c1 e2 06	 shl	 edx, 6
  0187d	c6 84 11 02 00
	00 00 b8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 184 ; 000000b8H
  01885	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0188a	6b c8 00	 imul	 ecx, eax, 0
  0188d	ba 04 00 00 00	 mov	 edx, 4
  01892	c1 e2 06	 shl	 edx, 6
  01895	c6 84 11 01 00
	00 00 ae	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 174 ; 000000aeH
  0189d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  018a2	6b c8 00	 imul	 ecx, eax, 0
  018a5	ba 04 00 00 00	 mov	 edx, 4
  018aa	c1 e2 06	 shl	 edx, 6
  018ad	c6 84 11 00 00
	00 00 a3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 163 ; 000000a3H
  018b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  018ba	6b c8 00	 imul	 ecx, eax, 0
  018bd	ba 04 00 00 00	 mov	 edx, 4
  018c2	c1 e2 06	 shl	 edx, 6
  018c5	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 240  :                                  
; 241  : //yellow to brown               
; 242  : /* 
; 243  : 	set_rgb_colour(terrain_colour[1][0],100, 150, 240, 255);
; 244  : 	set_rgb_colour(terrain_colour[1][1],254,230,175,255);
; 245  : 	set_rgb_colour(terrain_colour[1][2],254,231,170,255);
; 246  : 	set_rgb_colour(terrain_colour[1][3],254,232,165,255);
; 247  : 	set_rgb_colour(terrain_colour[1][4],254,231,161,255);
; 248  : 	set_rgb_colour(terrain_colour[1][5],255,231,156,255);
; 249  : 	set_rgb_colour(terrain_colour[1][6],255,229,153,255);
; 250  : 	set_rgb_colour(terrain_colour[1][7],255,228,149,255);
; 251  : 	set_rgb_colour(terrain_colour[1][8],255,225,145,255);
; 252  : 	set_rgb_colour(terrain_colour[1][9],255,222,142,255);
; 253  : 	set_rgb_colour(terrain_colour[1][10],255,219,139,255);
; 254  : 	set_rgb_colour(terrain_colour[1][11],255,215,136,255);
; 255  : 	set_rgb_colour(terrain_colour[1][12],255,211,133,255);
; 256  : 	set_rgb_colour(terrain_colour[1][13],255,206,129,255);
; 257  : 	set_rgb_colour(terrain_colour[1][14],255,201,126,255);
; 258  : 	set_rgb_colour(terrain_colour[1][15],255,195,123,255);
; 259  : 	set_rgb_colour(terrain_colour[1][16],253,189,120,255);
; 260  : 	set_rgb_colour(terrain_colour[1][17],251,183,116,255);
; 261  : 	set_rgb_colour(terrain_colour[1][18],247,176,112,255);
; 262  : 	set_rgb_colour(terrain_colour[1][19],243,168,108,255);
; 263  : 	set_rgb_colour(terrain_colour[1][20],238,161,103,255);
; 264  : 	set_rgb_colour(terrain_colour[1][21],232,152,99,255);
; 265  : 	set_rgb_colour(terrain_colour[1][22],225,144,94,255);
; 266  : 	set_rgb_colour(terrain_colour[1][23],217,135,88,255);
; 267  : 	set_rgb_colour(terrain_colour[1][24],208,126,82,255);
; 268  : 	set_rgb_colour(terrain_colour[1][25],198,117,75,255);
; 269  : 	set_rgb_colour(terrain_colour[1][26],186,107,68,255);
; 270  : 	set_rgb_colour(terrain_colour[1][27],173,97,61,255);
; 271  : 	set_rgb_colour(terrain_colour[1][28],159,86,52,255);
; 272  : 	set_rgb_colour(terrain_colour[1][29],143,76,43,255);
; 273  : 	set_rgb_colour(terrain_colour[1][30],125,65,34,255);
; 274  : 	set_rgb_colour(terrain_colour[1][31],106,53,23,255);
; 275  : 	set_rgb_colour(terrain_colour[1][32],86,42,12,255);
; 276  : */
; 277  : set_rgb_colour(terrain_colour[1][0 ],100,150,240,255);

  018cd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  018d2	c1 e0 00	 shl	 eax, 0
  018d5	b9 04 00 00 00	 mov	 ecx, 4
  018da	6b d1 00	 imul	 edx, ecx, 0
  018dd	c6 84 10 02 00
	00 00 64	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 100 ; 00000064H
  018e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  018ea	c1 e0 00	 shl	 eax, 0
  018ed	b9 04 00 00 00	 mov	 ecx, 4
  018f2	6b d1 00	 imul	 edx, ecx, 0
  018f5	c6 84 10 01 00
	00 00 96	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 150 ; 00000096H
  018fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01902	c1 e0 00	 shl	 eax, 0
  01905	b9 04 00 00 00	 mov	 ecx, 4
  0190a	6b d1 00	 imul	 edx, ecx, 0
  0190d	c6 84 10 00 00
	00 00 f0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 240 ; 000000f0H
  01915	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0191a	c1 e0 00	 shl	 eax, 0
  0191d	b9 04 00 00 00	 mov	 ecx, 4
  01922	6b d1 00	 imul	 edx, ecx, 0
  01925	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 278  : set_rgb_colour(terrain_colour[1][1 ],254,230,175,255);

  0192d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01932	c1 e0 00	 shl	 eax, 0
  01935	b9 04 00 00 00	 mov	 ecx, 4
  0193a	c1 e1 00	 shl	 ecx, 0
  0193d	c6 84 08 02 00
	00 00 fe	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 254 ; 000000feH
  01945	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0194a	c1 e0 00	 shl	 eax, 0
  0194d	b9 04 00 00 00	 mov	 ecx, 4
  01952	c1 e1 00	 shl	 ecx, 0
  01955	c6 84 08 01 00
	00 00 e6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 230 ; 000000e6H
  0195d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01962	c1 e0 00	 shl	 eax, 0
  01965	b9 04 00 00 00	 mov	 ecx, 4
  0196a	c1 e1 00	 shl	 ecx, 0
  0196d	c6 84 08 00 00
	00 00 af	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 175 ; 000000afH
  01975	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0197a	c1 e0 00	 shl	 eax, 0
  0197d	b9 04 00 00 00	 mov	 ecx, 4
  01982	c1 e1 00	 shl	 ecx, 0
  01985	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 279  : set_rgb_colour(terrain_colour[1][2 ],254,231,173,255);

  0198d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01992	c1 e0 00	 shl	 eax, 0
  01995	b9 04 00 00 00	 mov	 ecx, 4
  0199a	d1 e1		 shl	 ecx, 1
  0199c	c6 84 08 02 00
	00 00 fe	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 254 ; 000000feH
  019a4	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  019a9	c1 e0 00	 shl	 eax, 0
  019ac	b9 04 00 00 00	 mov	 ecx, 4
  019b1	d1 e1		 shl	 ecx, 1
  019b3	c6 84 08 01 00
	00 00 e7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 231 ; 000000e7H
  019bb	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  019c0	c1 e0 00	 shl	 eax, 0
  019c3	b9 04 00 00 00	 mov	 ecx, 4
  019c8	d1 e1		 shl	 ecx, 1
  019ca	c6 84 08 00 00
	00 00 ad	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 173 ; 000000adH
  019d2	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  019d7	c1 e0 00	 shl	 eax, 0
  019da	b9 04 00 00 00	 mov	 ecx, 4
  019df	d1 e1		 shl	 ecx, 1
  019e1	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 280  : set_rgb_colour(terrain_colour[1][3 ],254,231,170,255);

  019e9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  019ee	c1 e0 00	 shl	 eax, 0
  019f1	b9 04 00 00 00	 mov	 ecx, 4
  019f6	6b d1 03	 imul	 edx, ecx, 3
  019f9	c6 84 10 02 00
	00 00 fe	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 254 ; 000000feH
  01a01	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01a06	c1 e0 00	 shl	 eax, 0
  01a09	b9 04 00 00 00	 mov	 ecx, 4
  01a0e	6b d1 03	 imul	 edx, ecx, 3
  01a11	c6 84 10 01 00
	00 00 e7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 231 ; 000000e7H
  01a19	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01a1e	c1 e0 00	 shl	 eax, 0
  01a21	b9 04 00 00 00	 mov	 ecx, 4
  01a26	6b d1 03	 imul	 edx, ecx, 3
  01a29	c6 84 10 00 00
	00 00 aa	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 170 ; 000000aaH
  01a31	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01a36	c1 e0 00	 shl	 eax, 0
  01a39	b9 04 00 00 00	 mov	 ecx, 4
  01a3e	6b d1 03	 imul	 edx, ecx, 3
  01a41	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 281  : set_rgb_colour(terrain_colour[1][4 ],254,232,168,255);

  01a49	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01a4e	c1 e0 00	 shl	 eax, 0
  01a51	b9 04 00 00 00	 mov	 ecx, 4
  01a56	c1 e1 02	 shl	 ecx, 2
  01a59	c6 84 08 02 00
	00 00 fe	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 254 ; 000000feH
  01a61	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01a66	c1 e0 00	 shl	 eax, 0
  01a69	b9 04 00 00 00	 mov	 ecx, 4
  01a6e	c1 e1 02	 shl	 ecx, 2
  01a71	c6 84 08 01 00
	00 00 e8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 232 ; 000000e8H
  01a79	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01a7e	c1 e0 00	 shl	 eax, 0
  01a81	b9 04 00 00 00	 mov	 ecx, 4
  01a86	c1 e1 02	 shl	 ecx, 2
  01a89	c6 84 08 00 00
	00 00 a8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 168 ; 000000a8H
  01a91	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01a96	c1 e0 00	 shl	 eax, 0
  01a99	b9 04 00 00 00	 mov	 ecx, 4
  01a9e	c1 e1 02	 shl	 ecx, 2
  01aa1	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 282  : set_rgb_colour(terrain_colour[1][5 ],254,232,165,255);

  01aa9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01aae	c1 e0 00	 shl	 eax, 0
  01ab1	b9 04 00 00 00	 mov	 ecx, 4
  01ab6	6b d1 05	 imul	 edx, ecx, 5
  01ab9	c6 84 10 02 00
	00 00 fe	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 254 ; 000000feH
  01ac1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01ac6	c1 e0 00	 shl	 eax, 0
  01ac9	b9 04 00 00 00	 mov	 ecx, 4
  01ace	6b d1 05	 imul	 edx, ecx, 5
  01ad1	c6 84 10 01 00
	00 00 e8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 232 ; 000000e8H
  01ad9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01ade	c1 e0 00	 shl	 eax, 0
  01ae1	b9 04 00 00 00	 mov	 ecx, 4
  01ae6	6b d1 05	 imul	 edx, ecx, 5
  01ae9	c6 84 10 00 00
	00 00 a5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 165 ; 000000a5H
  01af1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01af6	c1 e0 00	 shl	 eax, 0
  01af9	b9 04 00 00 00	 mov	 ecx, 4
  01afe	6b d1 05	 imul	 edx, ecx, 5
  01b01	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 283  : set_rgb_colour(terrain_colour[1][6 ],254,232,163,255);

  01b09	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01b0e	c1 e0 00	 shl	 eax, 0
  01b11	b9 04 00 00 00	 mov	 ecx, 4
  01b16	6b d1 06	 imul	 edx, ecx, 6
  01b19	c6 84 10 02 00
	00 00 fe	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 254 ; 000000feH
  01b21	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01b26	c1 e0 00	 shl	 eax, 0
  01b29	b9 04 00 00 00	 mov	 ecx, 4
  01b2e	6b d1 06	 imul	 edx, ecx, 6
  01b31	c6 84 10 01 00
	00 00 e8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 232 ; 000000e8H
  01b39	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01b3e	c1 e0 00	 shl	 eax, 0
  01b41	b9 04 00 00 00	 mov	 ecx, 4
  01b46	6b d1 06	 imul	 edx, ecx, 6
  01b49	c6 84 10 00 00
	00 00 a3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 163 ; 000000a3H
  01b51	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01b56	c1 e0 00	 shl	 eax, 0
  01b59	b9 04 00 00 00	 mov	 ecx, 4
  01b5e	6b d1 06	 imul	 edx, ecx, 6
  01b61	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 284  : set_rgb_colour(terrain_colour[1][7 ],254,231,161,255);

  01b69	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01b6e	c1 e0 00	 shl	 eax, 0
  01b71	b9 04 00 00 00	 mov	 ecx, 4
  01b76	6b d1 07	 imul	 edx, ecx, 7
  01b79	c6 84 10 02 00
	00 00 fe	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 254 ; 000000feH
  01b81	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01b86	c1 e0 00	 shl	 eax, 0
  01b89	b9 04 00 00 00	 mov	 ecx, 4
  01b8e	6b d1 07	 imul	 edx, ecx, 7
  01b91	c6 84 10 01 00
	00 00 e7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 231 ; 000000e7H
  01b99	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01b9e	c1 e0 00	 shl	 eax, 0
  01ba1	b9 04 00 00 00	 mov	 ecx, 4
  01ba6	6b d1 07	 imul	 edx, ecx, 7
  01ba9	c6 84 10 00 00
	00 00 a1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 161 ; 000000a1H
  01bb1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01bb6	c1 e0 00	 shl	 eax, 0
  01bb9	b9 04 00 00 00	 mov	 ecx, 4
  01bbe	6b d1 07	 imul	 edx, ecx, 7
  01bc1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 285  : set_rgb_colour(terrain_colour[1][8 ],255,231,159,255);

  01bc9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01bce	c1 e0 00	 shl	 eax, 0
  01bd1	b9 04 00 00 00	 mov	 ecx, 4
  01bd6	c1 e1 03	 shl	 ecx, 3
  01bd9	c6 84 08 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 255 ; 000000ffH
  01be1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01be6	c1 e0 00	 shl	 eax, 0
  01be9	b9 04 00 00 00	 mov	 ecx, 4
  01bee	c1 e1 03	 shl	 ecx, 3
  01bf1	c6 84 08 01 00
	00 00 e7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 231 ; 000000e7H
  01bf9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01bfe	c1 e0 00	 shl	 eax, 0
  01c01	b9 04 00 00 00	 mov	 ecx, 4
  01c06	c1 e1 03	 shl	 ecx, 3
  01c09	c6 84 08 00 00
	00 00 9f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 159 ; 0000009fH
  01c11	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01c16	c1 e0 00	 shl	 eax, 0
  01c19	b9 04 00 00 00	 mov	 ecx, 4
  01c1e	c1 e1 03	 shl	 ecx, 3
  01c21	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 286  : set_rgb_colour(terrain_colour[1][9 ],255,231,156,255);

  01c29	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01c2e	c1 e0 00	 shl	 eax, 0
  01c31	b9 04 00 00 00	 mov	 ecx, 4
  01c36	6b d1 09	 imul	 edx, ecx, 9
  01c39	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  01c41	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01c46	c1 e0 00	 shl	 eax, 0
  01c49	b9 04 00 00 00	 mov	 ecx, 4
  01c4e	6b d1 09	 imul	 edx, ecx, 9
  01c51	c6 84 10 01 00
	00 00 e7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 231 ; 000000e7H
  01c59	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01c5e	c1 e0 00	 shl	 eax, 0
  01c61	b9 04 00 00 00	 mov	 ecx, 4
  01c66	6b d1 09	 imul	 edx, ecx, 9
  01c69	c6 84 10 00 00
	00 00 9c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 156 ; 0000009cH
  01c71	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01c76	c1 e0 00	 shl	 eax, 0
  01c79	b9 04 00 00 00	 mov	 ecx, 4
  01c7e	6b d1 09	 imul	 edx, ecx, 9
  01c81	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 287  : set_rgb_colour(terrain_colour[1][10],255,230,155,255);

  01c89	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01c8e	c1 e0 00	 shl	 eax, 0
  01c91	b9 04 00 00 00	 mov	 ecx, 4
  01c96	6b d1 0a	 imul	 edx, ecx, 10
  01c99	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  01ca1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01ca6	c1 e0 00	 shl	 eax, 0
  01ca9	b9 04 00 00 00	 mov	 ecx, 4
  01cae	6b d1 0a	 imul	 edx, ecx, 10
  01cb1	c6 84 10 01 00
	00 00 e6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 230 ; 000000e6H
  01cb9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01cbe	c1 e0 00	 shl	 eax, 0
  01cc1	b9 04 00 00 00	 mov	 ecx, 4
  01cc6	6b d1 0a	 imul	 edx, ecx, 10
  01cc9	c6 84 10 00 00
	00 00 9b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 155 ; 0000009bH
  01cd1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01cd6	c1 e0 00	 shl	 eax, 0
  01cd9	b9 04 00 00 00	 mov	 ecx, 4
  01cde	6b d1 0a	 imul	 edx, ecx, 10
  01ce1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 288  : set_rgb_colour(terrain_colour[1][11],255,229,153,255);

  01ce9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01cee	c1 e0 00	 shl	 eax, 0
  01cf1	b9 04 00 00 00	 mov	 ecx, 4
  01cf6	6b d1 0b	 imul	 edx, ecx, 11
  01cf9	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  01d01	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01d06	c1 e0 00	 shl	 eax, 0
  01d09	b9 04 00 00 00	 mov	 ecx, 4
  01d0e	6b d1 0b	 imul	 edx, ecx, 11
  01d11	c6 84 10 01 00
	00 00 e5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 229 ; 000000e5H
  01d19	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01d1e	c1 e0 00	 shl	 eax, 0
  01d21	b9 04 00 00 00	 mov	 ecx, 4
  01d26	6b d1 0b	 imul	 edx, ecx, 11
  01d29	c6 84 10 00 00
	00 00 99	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 153 ; 00000099H
  01d31	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01d36	c1 e0 00	 shl	 eax, 0
  01d39	b9 04 00 00 00	 mov	 ecx, 4
  01d3e	6b d1 0b	 imul	 edx, ecx, 11
  01d41	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 289  : set_rgb_colour(terrain_colour[1][12],255,229,151,255);

  01d49	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01d4e	c1 e0 00	 shl	 eax, 0
  01d51	b9 04 00 00 00	 mov	 ecx, 4
  01d56	6b d1 0c	 imul	 edx, ecx, 12
  01d59	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  01d61	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01d66	c1 e0 00	 shl	 eax, 0
  01d69	b9 04 00 00 00	 mov	 ecx, 4
  01d6e	6b d1 0c	 imul	 edx, ecx, 12
  01d71	c6 84 10 01 00
	00 00 e5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 229 ; 000000e5H
  01d79	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01d7e	c1 e0 00	 shl	 eax, 0
  01d81	b9 04 00 00 00	 mov	 ecx, 4
  01d86	6b d1 0c	 imul	 edx, ecx, 12
  01d89	c6 84 10 00 00
	00 00 97	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 151 ; 00000097H
  01d91	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01d96	c1 e0 00	 shl	 eax, 0
  01d99	b9 04 00 00 00	 mov	 ecx, 4
  01d9e	6b d1 0c	 imul	 edx, ecx, 12
  01da1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 290  : set_rgb_colour(terrain_colour[1][13],255,228,149,255);

  01da9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01dae	c1 e0 00	 shl	 eax, 0
  01db1	b9 04 00 00 00	 mov	 ecx, 4
  01db6	6b d1 0d	 imul	 edx, ecx, 13
  01db9	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  01dc1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01dc6	c1 e0 00	 shl	 eax, 0
  01dc9	b9 04 00 00 00	 mov	 ecx, 4
  01dce	6b d1 0d	 imul	 edx, ecx, 13
  01dd1	c6 84 10 01 00
	00 00 e4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 228 ; 000000e4H
  01dd9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01dde	c1 e0 00	 shl	 eax, 0
  01de1	b9 04 00 00 00	 mov	 ecx, 4
  01de6	6b d1 0d	 imul	 edx, ecx, 13
  01de9	c6 84 10 00 00
	00 00 95	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 149 ; 00000095H
  01df1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01df6	c1 e0 00	 shl	 eax, 0
  01df9	b9 04 00 00 00	 mov	 ecx, 4
  01dfe	6b d1 0d	 imul	 edx, ecx, 13
  01e01	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 291  : set_rgb_colour(terrain_colour[1][14],255,227,147,255);

  01e09	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01e0e	c1 e0 00	 shl	 eax, 0
  01e11	b9 04 00 00 00	 mov	 ecx, 4
  01e16	6b d1 0e	 imul	 edx, ecx, 14
  01e19	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  01e21	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01e26	c1 e0 00	 shl	 eax, 0
  01e29	b9 04 00 00 00	 mov	 ecx, 4
  01e2e	6b d1 0e	 imul	 edx, ecx, 14
  01e31	c6 84 10 01 00
	00 00 e3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 227 ; 000000e3H
  01e39	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01e3e	c1 e0 00	 shl	 eax, 0
  01e41	b9 04 00 00 00	 mov	 ecx, 4
  01e46	6b d1 0e	 imul	 edx, ecx, 14
  01e49	c6 84 10 00 00
	00 00 93	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 147 ; 00000093H
  01e51	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01e56	c1 e0 00	 shl	 eax, 0
  01e59	b9 04 00 00 00	 mov	 ecx, 4
  01e5e	6b d1 0e	 imul	 edx, ecx, 14
  01e61	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 292  : set_rgb_colour(terrain_colour[1][15],255,225,145,255);

  01e69	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01e6e	c1 e0 00	 shl	 eax, 0
  01e71	b9 04 00 00 00	 mov	 ecx, 4
  01e76	6b d1 0f	 imul	 edx, ecx, 15
  01e79	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  01e81	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01e86	c1 e0 00	 shl	 eax, 0
  01e89	b9 04 00 00 00	 mov	 ecx, 4
  01e8e	6b d1 0f	 imul	 edx, ecx, 15
  01e91	c6 84 10 01 00
	00 00 e1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 225 ; 000000e1H
  01e99	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01e9e	c1 e0 00	 shl	 eax, 0
  01ea1	b9 04 00 00 00	 mov	 ecx, 4
  01ea6	6b d1 0f	 imul	 edx, ecx, 15
  01ea9	c6 84 10 00 00
	00 00 91	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 145 ; 00000091H
  01eb1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01eb6	c1 e0 00	 shl	 eax, 0
  01eb9	b9 04 00 00 00	 mov	 ecx, 4
  01ebe	6b d1 0f	 imul	 edx, ecx, 15
  01ec1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 293  : set_rgb_colour(terrain_colour[1][16],255,224,144,255);

  01ec9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01ece	c1 e0 00	 shl	 eax, 0
  01ed1	b9 04 00 00 00	 mov	 ecx, 4
  01ed6	c1 e1 04	 shl	 ecx, 4
  01ed9	c6 84 08 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 255 ; 000000ffH
  01ee1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01ee6	c1 e0 00	 shl	 eax, 0
  01ee9	b9 04 00 00 00	 mov	 ecx, 4
  01eee	c1 e1 04	 shl	 ecx, 4
  01ef1	c6 84 08 01 00
	00 00 e0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 224 ; 000000e0H
  01ef9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01efe	c1 e0 00	 shl	 eax, 0
  01f01	b9 04 00 00 00	 mov	 ecx, 4
  01f06	c1 e1 04	 shl	 ecx, 4
  01f09	c6 84 08 00 00
	00 00 90	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 144 ; 00000090H
  01f11	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01f16	c1 e0 00	 shl	 eax, 0
  01f19	b9 04 00 00 00	 mov	 ecx, 4
  01f1e	c1 e1 04	 shl	 ecx, 4
  01f21	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 294  : set_rgb_colour(terrain_colour[1][17],255,222,142,255);

  01f29	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01f2e	c1 e0 00	 shl	 eax, 0
  01f31	b9 04 00 00 00	 mov	 ecx, 4
  01f36	6b d1 11	 imul	 edx, ecx, 17
  01f39	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  01f41	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01f46	c1 e0 00	 shl	 eax, 0
  01f49	b9 04 00 00 00	 mov	 ecx, 4
  01f4e	6b d1 11	 imul	 edx, ecx, 17
  01f51	c6 84 10 01 00
	00 00 de	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 222 ; 000000deH
  01f59	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01f5e	c1 e0 00	 shl	 eax, 0
  01f61	b9 04 00 00 00	 mov	 ecx, 4
  01f66	6b d1 11	 imul	 edx, ecx, 17
  01f69	c6 84 10 00 00
	00 00 8e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 142 ; 0000008eH
  01f71	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01f76	c1 e0 00	 shl	 eax, 0
  01f79	b9 04 00 00 00	 mov	 ecx, 4
  01f7e	6b d1 11	 imul	 edx, ecx, 17
  01f81	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 295  : set_rgb_colour(terrain_colour[1][18],255,221,141,255);

  01f89	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01f8e	c1 e0 00	 shl	 eax, 0
  01f91	b9 04 00 00 00	 mov	 ecx, 4
  01f96	6b d1 12	 imul	 edx, ecx, 18
  01f99	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  01fa1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01fa6	c1 e0 00	 shl	 eax, 0
  01fa9	b9 04 00 00 00	 mov	 ecx, 4
  01fae	6b d1 12	 imul	 edx, ecx, 18
  01fb1	c6 84 10 01 00
	00 00 dd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 221 ; 000000ddH
  01fb9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01fbe	c1 e0 00	 shl	 eax, 0
  01fc1	b9 04 00 00 00	 mov	 ecx, 4
  01fc6	6b d1 12	 imul	 edx, ecx, 18
  01fc9	c6 84 10 00 00
	00 00 8d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 141 ; 0000008dH
  01fd1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01fd6	c1 e0 00	 shl	 eax, 0
  01fd9	b9 04 00 00 00	 mov	 ecx, 4
  01fde	6b d1 12	 imul	 edx, ecx, 18
  01fe1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 296  : set_rgb_colour(terrain_colour[1][19],255,219,139,255);

  01fe9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  01fee	c1 e0 00	 shl	 eax, 0
  01ff1	b9 04 00 00 00	 mov	 ecx, 4
  01ff6	6b d1 13	 imul	 edx, ecx, 19
  01ff9	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  02001	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02006	c1 e0 00	 shl	 eax, 0
  02009	b9 04 00 00 00	 mov	 ecx, 4
  0200e	6b d1 13	 imul	 edx, ecx, 19
  02011	c6 84 10 01 00
	00 00 db	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 219 ; 000000dbH
  02019	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0201e	c1 e0 00	 shl	 eax, 0
  02021	b9 04 00 00 00	 mov	 ecx, 4
  02026	6b d1 13	 imul	 edx, ecx, 19
  02029	c6 84 10 00 00
	00 00 8b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 139 ; 0000008bH
  02031	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02036	c1 e0 00	 shl	 eax, 0
  02039	b9 04 00 00 00	 mov	 ecx, 4
  0203e	6b d1 13	 imul	 edx, ecx, 19
  02041	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 297  : set_rgb_colour(terrain_colour[1][20],255,217,138,255);

  02049	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0204e	c1 e0 00	 shl	 eax, 0
  02051	b9 04 00 00 00	 mov	 ecx, 4
  02056	6b d1 14	 imul	 edx, ecx, 20
  02059	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  02061	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02066	c1 e0 00	 shl	 eax, 0
  02069	b9 04 00 00 00	 mov	 ecx, 4
  0206e	6b d1 14	 imul	 edx, ecx, 20
  02071	c6 84 10 01 00
	00 00 d9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 217 ; 000000d9H
  02079	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0207e	c1 e0 00	 shl	 eax, 0
  02081	b9 04 00 00 00	 mov	 ecx, 4
  02086	6b d1 14	 imul	 edx, ecx, 20
  02089	c6 84 10 00 00
	00 00 8a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 138 ; 0000008aH
  02091	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02096	c1 e0 00	 shl	 eax, 0
  02099	b9 04 00 00 00	 mov	 ecx, 4
  0209e	6b d1 14	 imul	 edx, ecx, 20
  020a1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 298  : set_rgb_colour(terrain_colour[1][21],255,215,136,255);

  020a9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  020ae	c1 e0 00	 shl	 eax, 0
  020b1	b9 04 00 00 00	 mov	 ecx, 4
  020b6	6b d1 15	 imul	 edx, ecx, 21
  020b9	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  020c1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  020c6	c1 e0 00	 shl	 eax, 0
  020c9	b9 04 00 00 00	 mov	 ecx, 4
  020ce	6b d1 15	 imul	 edx, ecx, 21
  020d1	c6 84 10 01 00
	00 00 d7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 215 ; 000000d7H
  020d9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  020de	c1 e0 00	 shl	 eax, 0
  020e1	b9 04 00 00 00	 mov	 ecx, 4
  020e6	6b d1 15	 imul	 edx, ecx, 21
  020e9	c6 84 10 00 00
	00 00 88	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 136 ; 00000088H
  020f1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  020f6	c1 e0 00	 shl	 eax, 0
  020f9	b9 04 00 00 00	 mov	 ecx, 4
  020fe	6b d1 15	 imul	 edx, ecx, 21
  02101	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 299  : set_rgb_colour(terrain_colour[1][22],255,213,135,255);

  02109	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0210e	c1 e0 00	 shl	 eax, 0
  02111	b9 04 00 00 00	 mov	 ecx, 4
  02116	6b d1 16	 imul	 edx, ecx, 22
  02119	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  02121	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02126	c1 e0 00	 shl	 eax, 0
  02129	b9 04 00 00 00	 mov	 ecx, 4
  0212e	6b d1 16	 imul	 edx, ecx, 22
  02131	c6 84 10 01 00
	00 00 d5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 213 ; 000000d5H
  02139	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0213e	c1 e0 00	 shl	 eax, 0
  02141	b9 04 00 00 00	 mov	 ecx, 4
  02146	6b d1 16	 imul	 edx, ecx, 22
  02149	c6 84 10 00 00
	00 00 87	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 135 ; 00000087H
  02151	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02156	c1 e0 00	 shl	 eax, 0
  02159	b9 04 00 00 00	 mov	 ecx, 4
  0215e	6b d1 16	 imul	 edx, ecx, 22
  02161	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 300  : set_rgb_colour(terrain_colour[1][23],255,211,133,255);

  02169	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0216e	c1 e0 00	 shl	 eax, 0
  02171	b9 04 00 00 00	 mov	 ecx, 4
  02176	6b d1 17	 imul	 edx, ecx, 23
  02179	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  02181	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02186	c1 e0 00	 shl	 eax, 0
  02189	b9 04 00 00 00	 mov	 ecx, 4
  0218e	6b d1 17	 imul	 edx, ecx, 23
  02191	c6 84 10 01 00
	00 00 d3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 211 ; 000000d3H
  02199	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0219e	c1 e0 00	 shl	 eax, 0
  021a1	b9 04 00 00 00	 mov	 ecx, 4
  021a6	6b d1 17	 imul	 edx, ecx, 23
  021a9	c6 84 10 00 00
	00 00 85	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 133 ; 00000085H
  021b1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  021b6	c1 e0 00	 shl	 eax, 0
  021b9	b9 04 00 00 00	 mov	 ecx, 4
  021be	6b d1 17	 imul	 edx, ecx, 23
  021c1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 301  : set_rgb_colour(terrain_colour[1][24],255,209,131,255);

  021c9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  021ce	c1 e0 00	 shl	 eax, 0
  021d1	b9 04 00 00 00	 mov	 ecx, 4
  021d6	6b d1 18	 imul	 edx, ecx, 24
  021d9	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  021e1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  021e6	c1 e0 00	 shl	 eax, 0
  021e9	b9 04 00 00 00	 mov	 ecx, 4
  021ee	6b d1 18	 imul	 edx, ecx, 24
  021f1	c6 84 10 01 00
	00 00 d1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 209 ; 000000d1H
  021f9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  021fe	c1 e0 00	 shl	 eax, 0
  02201	b9 04 00 00 00	 mov	 ecx, 4
  02206	6b d1 18	 imul	 edx, ecx, 24
  02209	c6 84 10 00 00
	00 00 83	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 131 ; 00000083H
  02211	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02216	c1 e0 00	 shl	 eax, 0
  02219	b9 04 00 00 00	 mov	 ecx, 4
  0221e	6b d1 18	 imul	 edx, ecx, 24
  02221	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 302  : set_rgb_colour(terrain_colour[1][25],255,206,129,255);

  02229	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0222e	c1 e0 00	 shl	 eax, 0
  02231	b9 04 00 00 00	 mov	 ecx, 4
  02236	6b d1 19	 imul	 edx, ecx, 25
  02239	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  02241	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02246	c1 e0 00	 shl	 eax, 0
  02249	b9 04 00 00 00	 mov	 ecx, 4
  0224e	6b d1 19	 imul	 edx, ecx, 25
  02251	c6 84 10 01 00
	00 00 ce	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 206 ; 000000ceH
  02259	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0225e	c1 e0 00	 shl	 eax, 0
  02261	b9 04 00 00 00	 mov	 ecx, 4
  02266	6b d1 19	 imul	 edx, ecx, 25
  02269	c6 84 10 00 00
	00 00 81	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 129 ; 00000081H
  02271	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02276	c1 e0 00	 shl	 eax, 0
  02279	b9 04 00 00 00	 mov	 ecx, 4
  0227e	6b d1 19	 imul	 edx, ecx, 25
  02281	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 303  : set_rgb_colour(terrain_colour[1][26],255,204,128,255);

  02289	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0228e	c1 e0 00	 shl	 eax, 0
  02291	b9 04 00 00 00	 mov	 ecx, 4
  02296	6b d1 1a	 imul	 edx, ecx, 26
  02299	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  022a1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  022a6	c1 e0 00	 shl	 eax, 0
  022a9	b9 04 00 00 00	 mov	 ecx, 4
  022ae	6b d1 1a	 imul	 edx, ecx, 26
  022b1	c6 84 10 01 00
	00 00 cc	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 204 ; 000000ccH
  022b9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  022be	c1 e0 00	 shl	 eax, 0
  022c1	b9 04 00 00 00	 mov	 ecx, 4
  022c6	6b d1 1a	 imul	 edx, ecx, 26
  022c9	c6 84 10 00 00
	00 00 80	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 128 ; 00000080H
  022d1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  022d6	c1 e0 00	 shl	 eax, 0
  022d9	b9 04 00 00 00	 mov	 ecx, 4
  022de	6b d1 1a	 imul	 edx, ecx, 26
  022e1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 304  : set_rgb_colour(terrain_colour[1][27],255,201,126,255);

  022e9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  022ee	c1 e0 00	 shl	 eax, 0
  022f1	b9 04 00 00 00	 mov	 ecx, 4
  022f6	6b d1 1b	 imul	 edx, ecx, 27
  022f9	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  02301	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02306	c1 e0 00	 shl	 eax, 0
  02309	b9 04 00 00 00	 mov	 ecx, 4
  0230e	6b d1 1b	 imul	 edx, ecx, 27
  02311	c6 84 10 01 00
	00 00 c9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 201 ; 000000c9H
  02319	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0231e	c1 e0 00	 shl	 eax, 0
  02321	b9 04 00 00 00	 mov	 ecx, 4
  02326	6b d1 1b	 imul	 edx, ecx, 27
  02329	c6 84 10 00 00
	00 00 7e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 126 ; 0000007eH
  02331	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02336	c1 e0 00	 shl	 eax, 0
  02339	b9 04 00 00 00	 mov	 ecx, 4
  0233e	6b d1 1b	 imul	 edx, ecx, 27
  02341	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 305  : set_rgb_colour(terrain_colour[1][28],255,198,125,255);

  02349	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0234e	c1 e0 00	 shl	 eax, 0
  02351	b9 04 00 00 00	 mov	 ecx, 4
  02356	6b d1 1c	 imul	 edx, ecx, 28
  02359	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  02361	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02366	c1 e0 00	 shl	 eax, 0
  02369	b9 04 00 00 00	 mov	 ecx, 4
  0236e	6b d1 1c	 imul	 edx, ecx, 28
  02371	c6 84 10 01 00
	00 00 c6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 198 ; 000000c6H
  02379	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0237e	c1 e0 00	 shl	 eax, 0
  02381	b9 04 00 00 00	 mov	 ecx, 4
  02386	6b d1 1c	 imul	 edx, ecx, 28
  02389	c6 84 10 00 00
	00 00 7d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 125 ; 0000007dH
  02391	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02396	c1 e0 00	 shl	 eax, 0
  02399	b9 04 00 00 00	 mov	 ecx, 4
  0239e	6b d1 1c	 imul	 edx, ecx, 28
  023a1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 306  : set_rgb_colour(terrain_colour[1][29],255,195,123,255);

  023a9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  023ae	c1 e0 00	 shl	 eax, 0
  023b1	b9 04 00 00 00	 mov	 ecx, 4
  023b6	6b d1 1d	 imul	 edx, ecx, 29
  023b9	c6 84 10 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 255 ; 000000ffH
  023c1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  023c6	c1 e0 00	 shl	 eax, 0
  023c9	b9 04 00 00 00	 mov	 ecx, 4
  023ce	6b d1 1d	 imul	 edx, ecx, 29
  023d1	c6 84 10 01 00
	00 00 c3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 195 ; 000000c3H
  023d9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  023de	c1 e0 00	 shl	 eax, 0
  023e1	b9 04 00 00 00	 mov	 ecx, 4
  023e6	6b d1 1d	 imul	 edx, ecx, 29
  023e9	c6 84 10 00 00
	00 00 7b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 123 ; 0000007bH
  023f1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  023f6	c1 e0 00	 shl	 eax, 0
  023f9	b9 04 00 00 00	 mov	 ecx, 4
  023fe	6b d1 1d	 imul	 edx, ecx, 29
  02401	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 307  : set_rgb_colour(terrain_colour[1][30],254,192,122,255);

  02409	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0240e	c1 e0 00	 shl	 eax, 0
  02411	b9 04 00 00 00	 mov	 ecx, 4
  02416	6b d1 1e	 imul	 edx, ecx, 30
  02419	c6 84 10 02 00
	00 00 fe	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 254 ; 000000feH
  02421	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02426	c1 e0 00	 shl	 eax, 0
  02429	b9 04 00 00 00	 mov	 ecx, 4
  0242e	6b d1 1e	 imul	 edx, ecx, 30
  02431	c6 84 10 01 00
	00 00 c0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 192 ; 000000c0H
  02439	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0243e	c1 e0 00	 shl	 eax, 0
  02441	b9 04 00 00 00	 mov	 ecx, 4
  02446	6b d1 1e	 imul	 edx, ecx, 30
  02449	c6 84 10 00 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 122 ; 0000007aH
  02451	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02456	c1 e0 00	 shl	 eax, 0
  02459	b9 04 00 00 00	 mov	 ecx, 4
  0245e	6b d1 1e	 imul	 edx, ecx, 30
  02461	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 308  : set_rgb_colour(terrain_colour[1][31],253,189,120,255);

  02469	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0246e	c1 e0 00	 shl	 eax, 0
  02471	b9 04 00 00 00	 mov	 ecx, 4
  02476	6b d1 1f	 imul	 edx, ecx, 31
  02479	c6 84 10 02 00
	00 00 fd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 253 ; 000000fdH
  02481	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02486	c1 e0 00	 shl	 eax, 0
  02489	b9 04 00 00 00	 mov	 ecx, 4
  0248e	6b d1 1f	 imul	 edx, ecx, 31
  02491	c6 84 10 01 00
	00 00 bd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 189 ; 000000bdH
  02499	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0249e	c1 e0 00	 shl	 eax, 0
  024a1	b9 04 00 00 00	 mov	 ecx, 4
  024a6	6b d1 1f	 imul	 edx, ecx, 31
  024a9	c6 84 10 00 00
	00 00 78	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 120 ; 00000078H
  024b1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  024b6	c1 e0 00	 shl	 eax, 0
  024b9	b9 04 00 00 00	 mov	 ecx, 4
  024be	6b d1 1f	 imul	 edx, ecx, 31
  024c1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 309  : set_rgb_colour(terrain_colour[1][32],252,186,118,255);

  024c9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  024ce	c1 e0 00	 shl	 eax, 0
  024d1	b9 04 00 00 00	 mov	 ecx, 4
  024d6	c1 e1 05	 shl	 ecx, 5
  024d9	c6 84 08 02 00
	00 00 fc	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 252 ; 000000fcH
  024e1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  024e6	c1 e0 00	 shl	 eax, 0
  024e9	b9 04 00 00 00	 mov	 ecx, 4
  024ee	c1 e1 05	 shl	 ecx, 5
  024f1	c6 84 08 01 00
	00 00 ba	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 186 ; 000000baH
  024f9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  024fe	c1 e0 00	 shl	 eax, 0
  02501	b9 04 00 00 00	 mov	 ecx, 4
  02506	c1 e1 05	 shl	 ecx, 5
  02509	c6 84 08 00 00
	00 00 76	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 118 ; 00000076H
  02511	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02516	c1 e0 00	 shl	 eax, 0
  02519	b9 04 00 00 00	 mov	 ecx, 4
  0251e	c1 e1 05	 shl	 ecx, 5
  02521	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 310  : set_rgb_colour(terrain_colour[1][33],251,183,116,255);

  02529	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0252e	c1 e0 00	 shl	 eax, 0
  02531	b9 04 00 00 00	 mov	 ecx, 4
  02536	6b d1 21	 imul	 edx, ecx, 33
  02539	c6 84 10 02 00
	00 00 fb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 251 ; 000000fbH
  02541	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02546	c1 e0 00	 shl	 eax, 0
  02549	b9 04 00 00 00	 mov	 ecx, 4
  0254e	6b d1 21	 imul	 edx, ecx, 33
  02551	c6 84 10 01 00
	00 00 b7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 183 ; 000000b7H
  02559	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0255e	c1 e0 00	 shl	 eax, 0
  02561	b9 04 00 00 00	 mov	 ecx, 4
  02566	6b d1 21	 imul	 edx, ecx, 33
  02569	c6 84 10 00 00
	00 00 74	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 116 ; 00000074H
  02571	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02576	c1 e0 00	 shl	 eax, 0
  02579	b9 04 00 00 00	 mov	 ecx, 4
  0257e	6b d1 21	 imul	 edx, ecx, 33
  02581	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 311  : set_rgb_colour(terrain_colour[1][34],249,180,114,255);

  02589	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0258e	c1 e0 00	 shl	 eax, 0
  02591	b9 04 00 00 00	 mov	 ecx, 4
  02596	6b d1 22	 imul	 edx, ecx, 34
  02599	c6 84 10 02 00
	00 00 f9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 249 ; 000000f9H
  025a1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  025a6	c1 e0 00	 shl	 eax, 0
  025a9	b9 04 00 00 00	 mov	 ecx, 4
  025ae	6b d1 22	 imul	 edx, ecx, 34
  025b1	c6 84 10 01 00
	00 00 b4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 180 ; 000000b4H
  025b9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  025be	c1 e0 00	 shl	 eax, 0
  025c1	b9 04 00 00 00	 mov	 ecx, 4
  025c6	6b d1 22	 imul	 edx, ecx, 34
  025c9	c6 84 10 00 00
	00 00 72	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 114 ; 00000072H
  025d1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  025d6	c1 e0 00	 shl	 eax, 0
  025d9	b9 04 00 00 00	 mov	 ecx, 4
  025de	6b d1 22	 imul	 edx, ecx, 34
  025e1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 312  : set_rgb_colour(terrain_colour[1][35],247,176,112,255);

  025e9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  025ee	c1 e0 00	 shl	 eax, 0
  025f1	b9 04 00 00 00	 mov	 ecx, 4
  025f6	6b d1 23	 imul	 edx, ecx, 35
  025f9	c6 84 10 02 00
	00 00 f7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 247 ; 000000f7H
  02601	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02606	c1 e0 00	 shl	 eax, 0
  02609	b9 04 00 00 00	 mov	 ecx, 4
  0260e	6b d1 23	 imul	 edx, ecx, 35
  02611	c6 84 10 01 00
	00 00 b0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 176 ; 000000b0H
  02619	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0261e	c1 e0 00	 shl	 eax, 0
  02621	b9 04 00 00 00	 mov	 ecx, 4
  02626	6b d1 23	 imul	 edx, ecx, 35
  02629	c6 84 10 00 00
	00 00 70	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 112 ; 00000070H
  02631	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02636	c1 e0 00	 shl	 eax, 0
  02639	b9 04 00 00 00	 mov	 ecx, 4
  0263e	6b d1 23	 imul	 edx, ecx, 35
  02641	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 313  : set_rgb_colour(terrain_colour[1][36],245,172,110,255);

  02649	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0264e	c1 e0 00	 shl	 eax, 0
  02651	b9 04 00 00 00	 mov	 ecx, 4
  02656	6b d1 24	 imul	 edx, ecx, 36
  02659	c6 84 10 02 00
	00 00 f5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 245 ; 000000f5H
  02661	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02666	c1 e0 00	 shl	 eax, 0
  02669	b9 04 00 00 00	 mov	 ecx, 4
  0266e	6b d1 24	 imul	 edx, ecx, 36
  02671	c6 84 10 01 00
	00 00 ac	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 172 ; 000000acH
  02679	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0267e	c1 e0 00	 shl	 eax, 0
  02681	b9 04 00 00 00	 mov	 ecx, 4
  02686	6b d1 24	 imul	 edx, ecx, 36
  02689	c6 84 10 00 00
	00 00 6e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 110 ; 0000006eH
  02691	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02696	c1 e0 00	 shl	 eax, 0
  02699	b9 04 00 00 00	 mov	 ecx, 4
  0269e	6b d1 24	 imul	 edx, ecx, 36
  026a1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 314  : set_rgb_colour(terrain_colour[1][37],243,168,108,255);

  026a9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  026ae	c1 e0 00	 shl	 eax, 0
  026b1	b9 04 00 00 00	 mov	 ecx, 4
  026b6	6b d1 25	 imul	 edx, ecx, 37
  026b9	c6 84 10 02 00
	00 00 f3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 243 ; 000000f3H
  026c1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  026c6	c1 e0 00	 shl	 eax, 0
  026c9	b9 04 00 00 00	 mov	 ecx, 4
  026ce	6b d1 25	 imul	 edx, ecx, 37
  026d1	c6 84 10 01 00
	00 00 a8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 168 ; 000000a8H
  026d9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  026de	c1 e0 00	 shl	 eax, 0
  026e1	b9 04 00 00 00	 mov	 ecx, 4
  026e6	6b d1 25	 imul	 edx, ecx, 37
  026e9	c6 84 10 00 00
	00 00 6c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 108 ; 0000006cH
  026f1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  026f6	c1 e0 00	 shl	 eax, 0
  026f9	b9 04 00 00 00	 mov	 ecx, 4
  026fe	6b d1 25	 imul	 edx, ecx, 37
  02701	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 315  : set_rgb_colour(terrain_colour[1][38],241,165,106,255);

  02709	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0270e	c1 e0 00	 shl	 eax, 0
  02711	b9 04 00 00 00	 mov	 ecx, 4
  02716	6b d1 26	 imul	 edx, ecx, 38
  02719	c6 84 10 02 00
	00 00 f1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 241 ; 000000f1H
  02721	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02726	c1 e0 00	 shl	 eax, 0
  02729	b9 04 00 00 00	 mov	 ecx, 4
  0272e	6b d1 26	 imul	 edx, ecx, 38
  02731	c6 84 10 01 00
	00 00 a5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 165 ; 000000a5H
  02739	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0273e	c1 e0 00	 shl	 eax, 0
  02741	b9 04 00 00 00	 mov	 ecx, 4
  02746	6b d1 26	 imul	 edx, ecx, 38
  02749	c6 84 10 00 00
	00 00 6a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 106 ; 0000006aH
  02751	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02756	c1 e0 00	 shl	 eax, 0
  02759	b9 04 00 00 00	 mov	 ecx, 4
  0275e	6b d1 26	 imul	 edx, ecx, 38
  02761	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 316  : set_rgb_colour(terrain_colour[1][39],238,161,103,255);

  02769	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0276e	c1 e0 00	 shl	 eax, 0
  02771	b9 04 00 00 00	 mov	 ecx, 4
  02776	6b d1 27	 imul	 edx, ecx, 39
  02779	c6 84 10 02 00
	00 00 ee	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 238 ; 000000eeH
  02781	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02786	c1 e0 00	 shl	 eax, 0
  02789	b9 04 00 00 00	 mov	 ecx, 4
  0278e	6b d1 27	 imul	 edx, ecx, 39
  02791	c6 84 10 01 00
	00 00 a1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 161 ; 000000a1H
  02799	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0279e	c1 e0 00	 shl	 eax, 0
  027a1	b9 04 00 00 00	 mov	 ecx, 4
  027a6	6b d1 27	 imul	 edx, ecx, 39
  027a9	c6 84 10 00 00
	00 00 67	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 103 ; 00000067H
  027b1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  027b6	c1 e0 00	 shl	 eax, 0
  027b9	b9 04 00 00 00	 mov	 ecx, 4
  027be	6b d1 27	 imul	 edx, ecx, 39
  027c1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 317  : set_rgb_colour(terrain_colour[1][40],235,157,101,255);

  027c9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  027ce	c1 e0 00	 shl	 eax, 0
  027d1	b9 04 00 00 00	 mov	 ecx, 4
  027d6	6b d1 28	 imul	 edx, ecx, 40
  027d9	c6 84 10 02 00
	00 00 eb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 235 ; 000000ebH
  027e1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  027e6	c1 e0 00	 shl	 eax, 0
  027e9	b9 04 00 00 00	 mov	 ecx, 4
  027ee	6b d1 28	 imul	 edx, ecx, 40
  027f1	c6 84 10 01 00
	00 00 9d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 157 ; 0000009dH
  027f9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  027fe	c1 e0 00	 shl	 eax, 0
  02801	b9 04 00 00 00	 mov	 ecx, 4
  02806	6b d1 28	 imul	 edx, ecx, 40
  02809	c6 84 10 00 00
	00 00 65	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 101 ; 00000065H
  02811	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02816	c1 e0 00	 shl	 eax, 0
  02819	b9 04 00 00 00	 mov	 ecx, 4
  0281e	6b d1 28	 imul	 edx, ecx, 40
  02821	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 318  : set_rgb_colour(terrain_colour[1][41],232,152,99,255);

  02829	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0282e	c1 e0 00	 shl	 eax, 0
  02831	b9 04 00 00 00	 mov	 ecx, 4
  02836	6b d1 29	 imul	 edx, ecx, 41
  02839	c6 84 10 02 00
	00 00 e8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 232 ; 000000e8H
  02841	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02846	c1 e0 00	 shl	 eax, 0
  02849	b9 04 00 00 00	 mov	 ecx, 4
  0284e	6b d1 29	 imul	 edx, ecx, 41
  02851	c6 84 10 01 00
	00 00 98	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 152 ; 00000098H
  02859	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0285e	c1 e0 00	 shl	 eax, 0
  02861	b9 04 00 00 00	 mov	 ecx, 4
  02866	6b d1 29	 imul	 edx, ecx, 41
  02869	c6 84 10 00 00
	00 00 63	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 99 ; 00000063H
  02871	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02876	c1 e0 00	 shl	 eax, 0
  02879	b9 04 00 00 00	 mov	 ecx, 4
  0287e	6b d1 29	 imul	 edx, ecx, 41
  02881	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 319  : set_rgb_colour(terrain_colour[1][42],229,148,97,255);

  02889	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0288e	c1 e0 00	 shl	 eax, 0
  02891	b9 04 00 00 00	 mov	 ecx, 4
  02896	6b d1 2a	 imul	 edx, ecx, 42
  02899	c6 84 10 02 00
	00 00 e5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 229 ; 000000e5H
  028a1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  028a6	c1 e0 00	 shl	 eax, 0
  028a9	b9 04 00 00 00	 mov	 ecx, 4
  028ae	6b d1 2a	 imul	 edx, ecx, 42
  028b1	c6 84 10 01 00
	00 00 94	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 148 ; 00000094H
  028b9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  028be	c1 e0 00	 shl	 eax, 0
  028c1	b9 04 00 00 00	 mov	 ecx, 4
  028c6	6b d1 2a	 imul	 edx, ecx, 42
  028c9	c6 84 10 00 00
	00 00 61	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 97 ; 00000061H
  028d1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  028d6	c1 e0 00	 shl	 eax, 0
  028d9	b9 04 00 00 00	 mov	 ecx, 4
  028de	6b d1 2a	 imul	 edx, ecx, 42
  028e1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 320  : set_rgb_colour(terrain_colour[1][43],225,144,94,255);

  028e9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  028ee	c1 e0 00	 shl	 eax, 0
  028f1	b9 04 00 00 00	 mov	 ecx, 4
  028f6	6b d1 2b	 imul	 edx, ecx, 43
  028f9	c6 84 10 02 00
	00 00 e1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 225 ; 000000e1H
  02901	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02906	c1 e0 00	 shl	 eax, 0
  02909	b9 04 00 00 00	 mov	 ecx, 4
  0290e	6b d1 2b	 imul	 edx, ecx, 43
  02911	c6 84 10 01 00
	00 00 90	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 144 ; 00000090H
  02919	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0291e	c1 e0 00	 shl	 eax, 0
  02921	b9 04 00 00 00	 mov	 ecx, 4
  02926	6b d1 2b	 imul	 edx, ecx, 43
  02929	c6 84 10 00 00
	00 00 5e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 94 ; 0000005eH
  02931	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02936	c1 e0 00	 shl	 eax, 0
  02939	b9 04 00 00 00	 mov	 ecx, 4
  0293e	6b d1 2b	 imul	 edx, ecx, 43
  02941	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 321  : set_rgb_colour(terrain_colour[1][44],221,140,91,255);

  02949	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0294e	c1 e0 00	 shl	 eax, 0
  02951	b9 04 00 00 00	 mov	 ecx, 4
  02956	6b d1 2c	 imul	 edx, ecx, 44
  02959	c6 84 10 02 00
	00 00 dd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 221 ; 000000ddH
  02961	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02966	c1 e0 00	 shl	 eax, 0
  02969	b9 04 00 00 00	 mov	 ecx, 4
  0296e	6b d1 2c	 imul	 edx, ecx, 44
  02971	c6 84 10 01 00
	00 00 8c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 140 ; 0000008cH
  02979	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0297e	c1 e0 00	 shl	 eax, 0
  02981	b9 04 00 00 00	 mov	 ecx, 4
  02986	6b d1 2c	 imul	 edx, ecx, 44
  02989	c6 84 10 00 00
	00 00 5b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 91 ; 0000005bH
  02991	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02996	c1 e0 00	 shl	 eax, 0
  02999	b9 04 00 00 00	 mov	 ecx, 4
  0299e	6b d1 2c	 imul	 edx, ecx, 44
  029a1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 322  : set_rgb_colour(terrain_colour[1][45],217,135,88,255);

  029a9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  029ae	c1 e0 00	 shl	 eax, 0
  029b1	b9 04 00 00 00	 mov	 ecx, 4
  029b6	6b d1 2d	 imul	 edx, ecx, 45
  029b9	c6 84 10 02 00
	00 00 d9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 217 ; 000000d9H
  029c1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  029c6	c1 e0 00	 shl	 eax, 0
  029c9	b9 04 00 00 00	 mov	 ecx, 4
  029ce	6b d1 2d	 imul	 edx, ecx, 45
  029d1	c6 84 10 01 00
	00 00 87	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 135 ; 00000087H
  029d9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  029de	c1 e0 00	 shl	 eax, 0
  029e1	b9 04 00 00 00	 mov	 ecx, 4
  029e6	6b d1 2d	 imul	 edx, ecx, 45
  029e9	c6 84 10 00 00
	00 00 58	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 88 ; 00000058H
  029f1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  029f6	c1 e0 00	 shl	 eax, 0
  029f9	b9 04 00 00 00	 mov	 ecx, 4
  029fe	6b d1 2d	 imul	 edx, ecx, 45
  02a01	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 323  : set_rgb_colour(terrain_colour[1][46],213,131,85,255);

  02a09	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02a0e	c1 e0 00	 shl	 eax, 0
  02a11	b9 04 00 00 00	 mov	 ecx, 4
  02a16	6b d1 2e	 imul	 edx, ecx, 46
  02a19	c6 84 10 02 00
	00 00 d5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 213 ; 000000d5H
  02a21	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02a26	c1 e0 00	 shl	 eax, 0
  02a29	b9 04 00 00 00	 mov	 ecx, 4
  02a2e	6b d1 2e	 imul	 edx, ecx, 46
  02a31	c6 84 10 01 00
	00 00 83	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 131 ; 00000083H
  02a39	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02a3e	c1 e0 00	 shl	 eax, 0
  02a41	b9 04 00 00 00	 mov	 ecx, 4
  02a46	6b d1 2e	 imul	 edx, ecx, 46
  02a49	c6 84 10 00 00
	00 00 55	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 85 ; 00000055H
  02a51	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02a56	c1 e0 00	 shl	 eax, 0
  02a59	b9 04 00 00 00	 mov	 ecx, 4
  02a5e	6b d1 2e	 imul	 edx, ecx, 46
  02a61	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 324  : set_rgb_colour(terrain_colour[1][47],208,126,82,255);

  02a69	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02a6e	c1 e0 00	 shl	 eax, 0
  02a71	b9 04 00 00 00	 mov	 ecx, 4
  02a76	6b d1 2f	 imul	 edx, ecx, 47
  02a79	c6 84 10 02 00
	00 00 d0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 208 ; 000000d0H
  02a81	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02a86	c1 e0 00	 shl	 eax, 0
  02a89	b9 04 00 00 00	 mov	 ecx, 4
  02a8e	6b d1 2f	 imul	 edx, ecx, 47
  02a91	c6 84 10 01 00
	00 00 7e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 126 ; 0000007eH
  02a99	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02a9e	c1 e0 00	 shl	 eax, 0
  02aa1	b9 04 00 00 00	 mov	 ecx, 4
  02aa6	6b d1 2f	 imul	 edx, ecx, 47
  02aa9	c6 84 10 00 00
	00 00 52	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 82 ; 00000052H
  02ab1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02ab6	c1 e0 00	 shl	 eax, 0
  02ab9	b9 04 00 00 00	 mov	 ecx, 4
  02abe	6b d1 2f	 imul	 edx, ecx, 47
  02ac1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 325  : set_rgb_colour(terrain_colour[1][48],203,122,79,255);

  02ac9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02ace	c1 e0 00	 shl	 eax, 0
  02ad1	b9 04 00 00 00	 mov	 ecx, 4
  02ad6	6b d1 30	 imul	 edx, ecx, 48
  02ad9	c6 84 10 02 00
	00 00 cb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 203 ; 000000cbH
  02ae1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02ae6	c1 e0 00	 shl	 eax, 0
  02ae9	b9 04 00 00 00	 mov	 ecx, 4
  02aee	6b d1 30	 imul	 edx, ecx, 48
  02af1	c6 84 10 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 122 ; 0000007aH
  02af9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02afe	c1 e0 00	 shl	 eax, 0
  02b01	b9 04 00 00 00	 mov	 ecx, 4
  02b06	6b d1 30	 imul	 edx, ecx, 48
  02b09	c6 84 10 00 00
	00 00 4f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 79 ; 0000004fH
  02b11	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02b16	c1 e0 00	 shl	 eax, 0
  02b19	b9 04 00 00 00	 mov	 ecx, 4
  02b1e	6b d1 30	 imul	 edx, ecx, 48
  02b21	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 326  : set_rgb_colour(terrain_colour[1][49],198,117,75,255);

  02b29	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02b2e	c1 e0 00	 shl	 eax, 0
  02b31	b9 04 00 00 00	 mov	 ecx, 4
  02b36	6b d1 31	 imul	 edx, ecx, 49
  02b39	c6 84 10 02 00
	00 00 c6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 198 ; 000000c6H
  02b41	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02b46	c1 e0 00	 shl	 eax, 0
  02b49	b9 04 00 00 00	 mov	 ecx, 4
  02b4e	6b d1 31	 imul	 edx, ecx, 49
  02b51	c6 84 10 01 00
	00 00 75	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 117 ; 00000075H
  02b59	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02b5e	c1 e0 00	 shl	 eax, 0
  02b61	b9 04 00 00 00	 mov	 ecx, 4
  02b66	6b d1 31	 imul	 edx, ecx, 49
  02b69	c6 84 10 00 00
	00 00 4b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 75 ; 0000004bH
  02b71	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02b76	c1 e0 00	 shl	 eax, 0
  02b79	b9 04 00 00 00	 mov	 ecx, 4
  02b7e	6b d1 31	 imul	 edx, ecx, 49
  02b81	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 327  : set_rgb_colour(terrain_colour[1][50],192,112,72,255);

  02b89	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02b8e	c1 e0 00	 shl	 eax, 0
  02b91	b9 04 00 00 00	 mov	 ecx, 4
  02b96	6b d1 32	 imul	 edx, ecx, 50
  02b99	c6 84 10 02 00
	00 00 c0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 192 ; 000000c0H
  02ba1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02ba6	c1 e0 00	 shl	 eax, 0
  02ba9	b9 04 00 00 00	 mov	 ecx, 4
  02bae	6b d1 32	 imul	 edx, ecx, 50
  02bb1	c6 84 10 01 00
	00 00 70	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 112 ; 00000070H
  02bb9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02bbe	c1 e0 00	 shl	 eax, 0
  02bc1	b9 04 00 00 00	 mov	 ecx, 4
  02bc6	6b d1 32	 imul	 edx, ecx, 50
  02bc9	c6 84 10 00 00
	00 00 48	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 72 ; 00000048H
  02bd1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02bd6	c1 e0 00	 shl	 eax, 0
  02bd9	b9 04 00 00 00	 mov	 ecx, 4
  02bde	6b d1 32	 imul	 edx, ecx, 50
  02be1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 328  : set_rgb_colour(terrain_colour[1][51],186,107,68,255);

  02be9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02bee	c1 e0 00	 shl	 eax, 0
  02bf1	b9 04 00 00 00	 mov	 ecx, 4
  02bf6	6b d1 33	 imul	 edx, ecx, 51
  02bf9	c6 84 10 02 00
	00 00 ba	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 186 ; 000000baH
  02c01	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02c06	c1 e0 00	 shl	 eax, 0
  02c09	b9 04 00 00 00	 mov	 ecx, 4
  02c0e	6b d1 33	 imul	 edx, ecx, 51
  02c11	c6 84 10 01 00
	00 00 6b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 107 ; 0000006bH
  02c19	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02c1e	c1 e0 00	 shl	 eax, 0
  02c21	b9 04 00 00 00	 mov	 ecx, 4
  02c26	6b d1 33	 imul	 edx, ecx, 51
  02c29	c6 84 10 00 00
	00 00 44	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 68 ; 00000044H
  02c31	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02c36	c1 e0 00	 shl	 eax, 0
  02c39	b9 04 00 00 00	 mov	 ecx, 4
  02c3e	6b d1 33	 imul	 edx, ecx, 51
  02c41	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 329  : set_rgb_colour(terrain_colour[1][52],180,102,65,255);

  02c49	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02c4e	c1 e0 00	 shl	 eax, 0
  02c51	b9 04 00 00 00	 mov	 ecx, 4
  02c56	6b d1 34	 imul	 edx, ecx, 52
  02c59	c6 84 10 02 00
	00 00 b4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 180 ; 000000b4H
  02c61	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02c66	c1 e0 00	 shl	 eax, 0
  02c69	b9 04 00 00 00	 mov	 ecx, 4
  02c6e	6b d1 34	 imul	 edx, ecx, 52
  02c71	c6 84 10 01 00
	00 00 66	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 102 ; 00000066H
  02c79	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02c7e	c1 e0 00	 shl	 eax, 0
  02c81	b9 04 00 00 00	 mov	 ecx, 4
  02c86	6b d1 34	 imul	 edx, ecx, 52
  02c89	c6 84 10 00 00
	00 00 41	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 65 ; 00000041H
  02c91	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02c96	c1 e0 00	 shl	 eax, 0
  02c99	b9 04 00 00 00	 mov	 ecx, 4
  02c9e	6b d1 34	 imul	 edx, ecx, 52
  02ca1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 330  : set_rgb_colour(terrain_colour[1][53],173,97,61,255);

  02ca9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02cae	c1 e0 00	 shl	 eax, 0
  02cb1	b9 04 00 00 00	 mov	 ecx, 4
  02cb6	6b d1 35	 imul	 edx, ecx, 53
  02cb9	c6 84 10 02 00
	00 00 ad	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 173 ; 000000adH
  02cc1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02cc6	c1 e0 00	 shl	 eax, 0
  02cc9	b9 04 00 00 00	 mov	 ecx, 4
  02cce	6b d1 35	 imul	 edx, ecx, 53
  02cd1	c6 84 10 01 00
	00 00 61	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 97 ; 00000061H
  02cd9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02cde	c1 e0 00	 shl	 eax, 0
  02ce1	b9 04 00 00 00	 mov	 ecx, 4
  02ce6	6b d1 35	 imul	 edx, ecx, 53
  02ce9	c6 84 10 00 00
	00 00 3d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 61 ; 0000003dH
  02cf1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02cf6	c1 e0 00	 shl	 eax, 0
  02cf9	b9 04 00 00 00	 mov	 ecx, 4
  02cfe	6b d1 35	 imul	 edx, ecx, 53
  02d01	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 331  : set_rgb_colour(terrain_colour[1][54],166,92,57,255);

  02d09	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02d0e	c1 e0 00	 shl	 eax, 0
  02d11	b9 04 00 00 00	 mov	 ecx, 4
  02d16	6b d1 36	 imul	 edx, ecx, 54
  02d19	c6 84 10 02 00
	00 00 a6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 166 ; 000000a6H
  02d21	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02d26	c1 e0 00	 shl	 eax, 0
  02d29	b9 04 00 00 00	 mov	 ecx, 4
  02d2e	6b d1 36	 imul	 edx, ecx, 54
  02d31	c6 84 10 01 00
	00 00 5c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 92 ; 0000005cH
  02d39	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02d3e	c1 e0 00	 shl	 eax, 0
  02d41	b9 04 00 00 00	 mov	 ecx, 4
  02d46	6b d1 36	 imul	 edx, ecx, 54
  02d49	c6 84 10 00 00
	00 00 39	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 57 ; 00000039H
  02d51	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02d56	c1 e0 00	 shl	 eax, 0
  02d59	b9 04 00 00 00	 mov	 ecx, 4
  02d5e	6b d1 36	 imul	 edx, ecx, 54
  02d61	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 332  : set_rgb_colour(terrain_colour[1][55],159,86,52,255);

  02d69	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02d6e	c1 e0 00	 shl	 eax, 0
  02d71	b9 04 00 00 00	 mov	 ecx, 4
  02d76	6b d1 37	 imul	 edx, ecx, 55
  02d79	c6 84 10 02 00
	00 00 9f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 159 ; 0000009fH
  02d81	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02d86	c1 e0 00	 shl	 eax, 0
  02d89	b9 04 00 00 00	 mov	 ecx, 4
  02d8e	6b d1 37	 imul	 edx, ecx, 55
  02d91	c6 84 10 01 00
	00 00 56	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 86 ; 00000056H
  02d99	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02d9e	c1 e0 00	 shl	 eax, 0
  02da1	b9 04 00 00 00	 mov	 ecx, 4
  02da6	6b d1 37	 imul	 edx, ecx, 55
  02da9	c6 84 10 00 00
	00 00 34	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 52 ; 00000034H
  02db1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02db6	c1 e0 00	 shl	 eax, 0
  02db9	b9 04 00 00 00	 mov	 ecx, 4
  02dbe	6b d1 37	 imul	 edx, ecx, 55
  02dc1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 333  : set_rgb_colour(terrain_colour[1][56],151,81,48,255);

  02dc9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02dce	c1 e0 00	 shl	 eax, 0
  02dd1	b9 04 00 00 00	 mov	 ecx, 4
  02dd6	6b d1 38	 imul	 edx, ecx, 56
  02dd9	c6 84 10 02 00
	00 00 97	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 151 ; 00000097H
  02de1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02de6	c1 e0 00	 shl	 eax, 0
  02de9	b9 04 00 00 00	 mov	 ecx, 4
  02dee	6b d1 38	 imul	 edx, ecx, 56
  02df1	c6 84 10 01 00
	00 00 51	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 81 ; 00000051H
  02df9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02dfe	c1 e0 00	 shl	 eax, 0
  02e01	b9 04 00 00 00	 mov	 ecx, 4
  02e06	6b d1 38	 imul	 edx, ecx, 56
  02e09	c6 84 10 00 00
	00 00 30	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 48 ; 00000030H
  02e11	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02e16	c1 e0 00	 shl	 eax, 0
  02e19	b9 04 00 00 00	 mov	 ecx, 4
  02e1e	6b d1 38	 imul	 edx, ecx, 56
  02e21	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 334  : set_rgb_colour(terrain_colour[1][57],143,76,43,255);

  02e29	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02e2e	c1 e0 00	 shl	 eax, 0
  02e31	b9 04 00 00 00	 mov	 ecx, 4
  02e36	6b d1 39	 imul	 edx, ecx, 57
  02e39	c6 84 10 02 00
	00 00 8f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 143 ; 0000008fH
  02e41	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02e46	c1 e0 00	 shl	 eax, 0
  02e49	b9 04 00 00 00	 mov	 ecx, 4
  02e4e	6b d1 39	 imul	 edx, ecx, 57
  02e51	c6 84 10 01 00
	00 00 4c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 76 ; 0000004cH
  02e59	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02e5e	c1 e0 00	 shl	 eax, 0
  02e61	b9 04 00 00 00	 mov	 ecx, 4
  02e66	6b d1 39	 imul	 edx, ecx, 57
  02e69	c6 84 10 00 00
	00 00 2b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 43 ; 0000002bH
  02e71	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02e76	c1 e0 00	 shl	 eax, 0
  02e79	b9 04 00 00 00	 mov	 ecx, 4
  02e7e	6b d1 39	 imul	 edx, ecx, 57
  02e81	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 335  : set_rgb_colour(terrain_colour[1][58],134,71,39,255);

  02e89	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02e8e	c1 e0 00	 shl	 eax, 0
  02e91	b9 04 00 00 00	 mov	 ecx, 4
  02e96	6b d1 3a	 imul	 edx, ecx, 58
  02e99	c6 84 10 02 00
	00 00 86	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 134 ; 00000086H
  02ea1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02ea6	c1 e0 00	 shl	 eax, 0
  02ea9	b9 04 00 00 00	 mov	 ecx, 4
  02eae	6b d1 3a	 imul	 edx, ecx, 58
  02eb1	c6 84 10 01 00
	00 00 47	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 71 ; 00000047H
  02eb9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02ebe	c1 e0 00	 shl	 eax, 0
  02ec1	b9 04 00 00 00	 mov	 ecx, 4
  02ec6	6b d1 3a	 imul	 edx, ecx, 58
  02ec9	c6 84 10 00 00
	00 00 27	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 39 ; 00000027H
  02ed1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02ed6	c1 e0 00	 shl	 eax, 0
  02ed9	b9 04 00 00 00	 mov	 ecx, 4
  02ede	6b d1 3a	 imul	 edx, ecx, 58
  02ee1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 336  : set_rgb_colour(terrain_colour[1][59],125,65,34,255);

  02ee9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02eee	c1 e0 00	 shl	 eax, 0
  02ef1	b9 04 00 00 00	 mov	 ecx, 4
  02ef6	6b d1 3b	 imul	 edx, ecx, 59
  02ef9	c6 84 10 02 00
	00 00 7d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 125 ; 0000007dH
  02f01	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02f06	c1 e0 00	 shl	 eax, 0
  02f09	b9 04 00 00 00	 mov	 ecx, 4
  02f0e	6b d1 3b	 imul	 edx, ecx, 59
  02f11	c6 84 10 01 00
	00 00 41	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 65 ; 00000041H
  02f19	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02f1e	c1 e0 00	 shl	 eax, 0
  02f21	b9 04 00 00 00	 mov	 ecx, 4
  02f26	6b d1 3b	 imul	 edx, ecx, 59
  02f29	c6 84 10 00 00
	00 00 22	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 34 ; 00000022H
  02f31	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02f36	c1 e0 00	 shl	 eax, 0
  02f39	b9 04 00 00 00	 mov	 ecx, 4
  02f3e	6b d1 3b	 imul	 edx, ecx, 59
  02f41	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 337  : set_rgb_colour(terrain_colour[1][60],116,59,29,255);

  02f49	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02f4e	c1 e0 00	 shl	 eax, 0
  02f51	b9 04 00 00 00	 mov	 ecx, 4
  02f56	6b d1 3c	 imul	 edx, ecx, 60
  02f59	c6 84 10 02 00
	00 00 74	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 116 ; 00000074H
  02f61	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02f66	c1 e0 00	 shl	 eax, 0
  02f69	b9 04 00 00 00	 mov	 ecx, 4
  02f6e	6b d1 3c	 imul	 edx, ecx, 60
  02f71	c6 84 10 01 00
	00 00 3b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 59 ; 0000003bH
  02f79	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02f7e	c1 e0 00	 shl	 eax, 0
  02f81	b9 04 00 00 00	 mov	 ecx, 4
  02f86	6b d1 3c	 imul	 edx, ecx, 60
  02f89	c6 84 10 00 00
	00 00 1d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 29 ; 0000001dH
  02f91	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02f96	c1 e0 00	 shl	 eax, 0
  02f99	b9 04 00 00 00	 mov	 ecx, 4
  02f9e	6b d1 3c	 imul	 edx, ecx, 60
  02fa1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 338  : set_rgb_colour(terrain_colour[1][61],106,53,23,255);

  02fa9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02fae	c1 e0 00	 shl	 eax, 0
  02fb1	b9 04 00 00 00	 mov	 ecx, 4
  02fb6	6b d1 3d	 imul	 edx, ecx, 61
  02fb9	c6 84 10 02 00
	00 00 6a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 106 ; 0000006aH
  02fc1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02fc6	c1 e0 00	 shl	 eax, 0
  02fc9	b9 04 00 00 00	 mov	 ecx, 4
  02fce	6b d1 3d	 imul	 edx, ecx, 61
  02fd1	c6 84 10 01 00
	00 00 35	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 53 ; 00000035H
  02fd9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02fde	c1 e0 00	 shl	 eax, 0
  02fe1	b9 04 00 00 00	 mov	 ecx, 4
  02fe6	6b d1 3d	 imul	 edx, ecx, 61
  02fe9	c6 84 10 00 00
	00 00 17	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 23 ; 00000017H
  02ff1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  02ff6	c1 e0 00	 shl	 eax, 0
  02ff9	b9 04 00 00 00	 mov	 ecx, 4
  02ffe	6b d1 3d	 imul	 edx, ecx, 61
  03001	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 339  : set_rgb_colour(terrain_colour[1][62],96,48,18,255);

  03009	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0300e	c1 e0 00	 shl	 eax, 0
  03011	b9 04 00 00 00	 mov	 ecx, 4
  03016	6b d1 3e	 imul	 edx, ecx, 62
  03019	c6 84 10 02 00
	00 00 60	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 96 ; 00000060H
  03021	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03026	c1 e0 00	 shl	 eax, 0
  03029	b9 04 00 00 00	 mov	 ecx, 4
  0302e	6b d1 3e	 imul	 edx, ecx, 62
  03031	c6 84 10 01 00
	00 00 30	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 48 ; 00000030H
  03039	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0303e	c1 e0 00	 shl	 eax, 0
  03041	b9 04 00 00 00	 mov	 ecx, 4
  03046	6b d1 3e	 imul	 edx, ecx, 62
  03049	c6 84 10 00 00
	00 00 12	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 18 ; 00000012H
  03051	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03056	c1 e0 00	 shl	 eax, 0
  03059	b9 04 00 00 00	 mov	 ecx, 4
  0305e	6b d1 3e	 imul	 edx, ecx, 62
  03061	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 340  : set_rgb_colour(terrain_colour[1][63],86,42,12,255);

  03069	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0306e	c1 e0 00	 shl	 eax, 0
  03071	b9 04 00 00 00	 mov	 ecx, 4
  03076	6b d1 3f	 imul	 edx, ecx, 63
  03079	c6 84 10 02 00
	00 00 56	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 86 ; 00000056H
  03081	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03086	c1 e0 00	 shl	 eax, 0
  03089	b9 04 00 00 00	 mov	 ecx, 4
  0308e	6b d1 3f	 imul	 edx, ecx, 63
  03091	c6 84 10 01 00
	00 00 2a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 42 ; 0000002aH
  03099	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0309e	c1 e0 00	 shl	 eax, 0
  030a1	b9 04 00 00 00	 mov	 ecx, 4
  030a6	6b d1 3f	 imul	 edx, ecx, 63
  030a9	c6 84 10 00 00
	00 00 0c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 12 ; 0000000cH
  030b1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  030b6	c1 e0 00	 shl	 eax, 0
  030b9	b9 04 00 00 00	 mov	 ecx, 4
  030be	6b d1 3f	 imul	 edx, ecx, 63
  030c1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 341  : set_rgb_colour(terrain_colour[1][64],86,42,12,255);

  030c9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  030ce	c1 e0 00	 shl	 eax, 0
  030d1	b9 04 00 00 00	 mov	 ecx, 4
  030d6	c1 e1 06	 shl	 ecx, 6
  030d9	c6 84 08 02 00
	00 00 56	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 86 ; 00000056H
  030e1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  030e6	c1 e0 00	 shl	 eax, 0
  030e9	b9 04 00 00 00	 mov	 ecx, 4
  030ee	c1 e1 06	 shl	 ecx, 6
  030f1	c6 84 08 01 00
	00 00 2a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 42 ; 0000002aH
  030f9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  030fe	c1 e0 00	 shl	 eax, 0
  03101	b9 04 00 00 00	 mov	 ecx, 4
  03106	c1 e1 06	 shl	 ecx, 6
  03109	c6 84 08 00 00
	00 00 0c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 12 ; 0000000cH
  03111	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03116	c1 e0 00	 shl	 eax, 0
  03119	b9 04 00 00 00	 mov	 ecx, 4
  0311e	c1 e1 06	 shl	 ecx, 6
  03121	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 342  :                                  
; 343  : //green - yellow - red           
; 344  : /*
; 345  : set_rgb_colour(terrain_colour[2][0],100, 150, 240, 255);
; 346  : 	set_rgb_colour(terrain_colour[2][32],90,59,27,255);
; 347  : 	set_rgb_colour(terrain_colour[2][31],105,59,27,255);
; 348  : 	set_rgb_colour(terrain_colour[2][30],119,61,28,255);
; 349  : 	set_rgb_colour(terrain_colour[2][29],131,65,30,255);
; 350  : 	set_rgb_colour(terrain_colour[2][28],141,70,34,255);
; 351  : 	set_rgb_colour(terrain_colour[2][27],150,77,39,255);
; 352  : 	set_rgb_colour(terrain_colour[2][26],157,85,44,255);
; 353  : 	set_rgb_colour(terrain_colour[2][25],163,94,50,255);
; 354  : 	set_rgb_colour(terrain_colour[2][24],169,102,57,255);
; 355  : 	set_rgb_colour(terrain_colour[2][23],173,111,63,255);
; 356  : 	set_rgb_colour(terrain_colour[2][22],176,119,70,255);
; 357  : 	set_rgb_colour(terrain_colour[2][21],179,127,76,255);
; 358  : 	set_rgb_colour(terrain_colour[2][20],182,134,81,255);
; 359  : 	set_rgb_colour(terrain_colour[2][19],184,139,85,255);
; 360  : 	set_rgb_colour(terrain_colour[2][18],186,143,89,255);
; 361  : 	set_rgb_colour(terrain_colour[2][17],188,144,91,255);
; 362  : 	set_rgb_colour(terrain_colour[2][16],191,144,91,255);
; 363  : 	set_rgb_colour(terrain_colour[2][15],207,159,102,255);
; 364  : 	set_rgb_colour(terrain_colour[2][14],214,169,110,255);
; 365  : 	set_rgb_colour(terrain_colour[2][13],217,177,119,255);
; 366  : 	set_rgb_colour(terrain_colour[2][12],216,183,128,255);
; 367  : 	set_rgb_colour(terrain_colour[2][11],212,188,136,255);
; 368  : 	set_rgb_colour(terrain_colour[2][10],205,192,143,255);
; 369  : 	set_rgb_colour(terrain_colour[2][9],194,194,149,255);
; 370  : 	set_rgb_colour(terrain_colour[2][8],181,194,154,255);
; 371  : 	set_rgb_colour(terrain_colour[2][7],166,193,156,255);
; 372  : 	set_rgb_colour(terrain_colour[2][6],149,191,157,255);
; 373  : 	set_rgb_colour(terrain_colour[2][5],130,188,155,255);
; 374  : 	set_rgb_colour(terrain_colour[2][4],110,183,150,255);
; 375  : 	set_rgb_colour(terrain_colour[2][3],88,177,142,255);
; 376  : 	set_rgb_colour(terrain_colour[2][2],65,170,130,255);
; 377  : 	set_rgb_colour(terrain_colour[2][1],42,162,114,255);
; 378  : */ 
; 379  : set_rgb_colour(terrain_colour[2][0],100, 150, 240, 255);

  03129	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0312e	d1 e0		 shl	 eax, 1
  03130	b9 04 00 00 00	 mov	 ecx, 4
  03135	6b d1 00	 imul	 edx, ecx, 0
  03138	c6 84 10 02 00
	00 00 64	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 100 ; 00000064H
  03140	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03145	d1 e0		 shl	 eax, 1
  03147	b9 04 00 00 00	 mov	 ecx, 4
  0314c	6b d1 00	 imul	 edx, ecx, 0
  0314f	c6 84 10 01 00
	00 00 96	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 150 ; 00000096H
  03157	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0315c	d1 e0		 shl	 eax, 1
  0315e	b9 04 00 00 00	 mov	 ecx, 4
  03163	6b d1 00	 imul	 edx, ecx, 0
  03166	c6 84 10 00 00
	00 00 f0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 240 ; 000000f0H
  0316e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03173	d1 e0		 shl	 eax, 1
  03175	b9 04 00 00 00	 mov	 ecx, 4
  0317a	6b d1 00	 imul	 edx, ecx, 0
  0317d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 380  : set_rgb_colour(terrain_colour[2][1 ],42,162,114,255);

  03185	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0318a	d1 e0		 shl	 eax, 1
  0318c	b9 04 00 00 00	 mov	 ecx, 4
  03191	c1 e1 00	 shl	 ecx, 0
  03194	c6 84 08 02 00
	00 00 2a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 42 ; 0000002aH
  0319c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  031a1	d1 e0		 shl	 eax, 1
  031a3	b9 04 00 00 00	 mov	 ecx, 4
  031a8	c1 e1 00	 shl	 ecx, 0
  031ab	c6 84 08 01 00
	00 00 a2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 162 ; 000000a2H
  031b3	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  031b8	d1 e0		 shl	 eax, 1
  031ba	b9 04 00 00 00	 mov	 ecx, 4
  031bf	c1 e1 00	 shl	 ecx, 0
  031c2	c6 84 08 00 00
	00 00 72	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 114 ; 00000072H
  031ca	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  031cf	d1 e0		 shl	 eax, 1
  031d1	b9 04 00 00 00	 mov	 ecx, 4
  031d6	c1 e1 00	 shl	 ecx, 0
  031d9	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 381  : set_rgb_colour(terrain_colour[2][2 ],54,166,122,255);

  031e1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  031e6	d1 e0		 shl	 eax, 1
  031e8	b9 04 00 00 00	 mov	 ecx, 4
  031ed	d1 e1		 shl	 ecx, 1
  031ef	c6 84 08 02 00
	00 00 36	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 54 ; 00000036H
  031f7	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  031fc	d1 e0		 shl	 eax, 1
  031fe	b9 04 00 00 00	 mov	 ecx, 4
  03203	d1 e1		 shl	 ecx, 1
  03205	c6 84 08 01 00
	00 00 a6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 166 ; 000000a6H
  0320d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03212	d1 e0		 shl	 eax, 1
  03214	b9 04 00 00 00	 mov	 ecx, 4
  03219	d1 e1		 shl	 ecx, 1
  0321b	c6 84 08 00 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 122 ; 0000007aH
  03223	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03228	d1 e0		 shl	 eax, 1
  0322a	b9 04 00 00 00	 mov	 ecx, 4
  0322f	d1 e1		 shl	 ecx, 1
  03231	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 382  : set_rgb_colour(terrain_colour[2][3 ],65,170,130,255);

  03239	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0323e	d1 e0		 shl	 eax, 1
  03240	b9 04 00 00 00	 mov	 ecx, 4
  03245	6b d1 03	 imul	 edx, ecx, 3
  03248	c6 84 10 02 00
	00 00 41	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 65 ; 00000041H
  03250	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03255	d1 e0		 shl	 eax, 1
  03257	b9 04 00 00 00	 mov	 ecx, 4
  0325c	6b d1 03	 imul	 edx, ecx, 3
  0325f	c6 84 10 01 00
	00 00 aa	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 170 ; 000000aaH
  03267	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0326c	d1 e0		 shl	 eax, 1
  0326e	b9 04 00 00 00	 mov	 ecx, 4
  03273	6b d1 03	 imul	 edx, ecx, 3
  03276	c6 84 10 00 00
	00 00 82	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 130 ; 00000082H
  0327e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03283	d1 e0		 shl	 eax, 1
  03285	b9 04 00 00 00	 mov	 ecx, 4
  0328a	6b d1 03	 imul	 edx, ecx, 3
  0328d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 383  : set_rgb_colour(terrain_colour[2][4 ],77,174,136,255);

  03295	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0329a	d1 e0		 shl	 eax, 1
  0329c	b9 04 00 00 00	 mov	 ecx, 4
  032a1	c1 e1 02	 shl	 ecx, 2
  032a4	c6 84 08 02 00
	00 00 4d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 77 ; 0000004dH
  032ac	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  032b1	d1 e0		 shl	 eax, 1
  032b3	b9 04 00 00 00	 mov	 ecx, 4
  032b8	c1 e1 02	 shl	 ecx, 2
  032bb	c6 84 08 01 00
	00 00 ae	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 174 ; 000000aeH
  032c3	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  032c8	d1 e0		 shl	 eax, 1
  032ca	b9 04 00 00 00	 mov	 ecx, 4
  032cf	c1 e1 02	 shl	 ecx, 2
  032d2	c6 84 08 00 00
	00 00 88	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 136 ; 00000088H
  032da	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  032df	d1 e0		 shl	 eax, 1
  032e1	b9 04 00 00 00	 mov	 ecx, 4
  032e6	c1 e1 02	 shl	 ecx, 2
  032e9	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 384  : set_rgb_colour(terrain_colour[2][5 ],88,177,142,255);

  032f1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  032f6	d1 e0		 shl	 eax, 1
  032f8	b9 04 00 00 00	 mov	 ecx, 4
  032fd	6b d1 05	 imul	 edx, ecx, 5
  03300	c6 84 10 02 00
	00 00 58	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 88 ; 00000058H
  03308	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0330d	d1 e0		 shl	 eax, 1
  0330f	b9 04 00 00 00	 mov	 ecx, 4
  03314	6b d1 05	 imul	 edx, ecx, 5
  03317	c6 84 10 01 00
	00 00 b1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 177 ; 000000b1H
  0331f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03324	d1 e0		 shl	 eax, 1
  03326	b9 04 00 00 00	 mov	 ecx, 4
  0332b	6b d1 05	 imul	 edx, ecx, 5
  0332e	c6 84 10 00 00
	00 00 8e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 142 ; 0000008eH
  03336	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0333b	d1 e0		 shl	 eax, 1
  0333d	b9 04 00 00 00	 mov	 ecx, 4
  03342	6b d1 05	 imul	 edx, ecx, 5
  03345	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 385  : set_rgb_colour(terrain_colour[2][6 ],99,180,146,255);

  0334d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03352	d1 e0		 shl	 eax, 1
  03354	b9 04 00 00 00	 mov	 ecx, 4
  03359	6b d1 06	 imul	 edx, ecx, 6
  0335c	c6 84 10 02 00
	00 00 63	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 99 ; 00000063H
  03364	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03369	d1 e0		 shl	 eax, 1
  0336b	b9 04 00 00 00	 mov	 ecx, 4
  03370	6b d1 06	 imul	 edx, ecx, 6
  03373	c6 84 10 01 00
	00 00 b4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 180 ; 000000b4H
  0337b	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03380	d1 e0		 shl	 eax, 1
  03382	b9 04 00 00 00	 mov	 ecx, 4
  03387	6b d1 06	 imul	 edx, ecx, 6
  0338a	c6 84 10 00 00
	00 00 92	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 146 ; 00000092H
  03392	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03397	d1 e0		 shl	 eax, 1
  03399	b9 04 00 00 00	 mov	 ecx, 4
  0339e	6b d1 06	 imul	 edx, ecx, 6
  033a1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 386  : set_rgb_colour(terrain_colour[2][7 ],110,183,150,255);

  033a9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  033ae	d1 e0		 shl	 eax, 1
  033b0	b9 04 00 00 00	 mov	 ecx, 4
  033b5	6b d1 07	 imul	 edx, ecx, 7
  033b8	c6 84 10 02 00
	00 00 6e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 110 ; 0000006eH
  033c0	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  033c5	d1 e0		 shl	 eax, 1
  033c7	b9 04 00 00 00	 mov	 ecx, 4
  033cc	6b d1 07	 imul	 edx, ecx, 7
  033cf	c6 84 10 01 00
	00 00 b7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 183 ; 000000b7H
  033d7	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  033dc	d1 e0		 shl	 eax, 1
  033de	b9 04 00 00 00	 mov	 ecx, 4
  033e3	6b d1 07	 imul	 edx, ecx, 7
  033e6	c6 84 10 00 00
	00 00 96	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 150 ; 00000096H
  033ee	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  033f3	d1 e0		 shl	 eax, 1
  033f5	b9 04 00 00 00	 mov	 ecx, 4
  033fa	6b d1 07	 imul	 edx, ecx, 7
  033fd	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 387  : set_rgb_colour(terrain_colour[2][8 ],120,186,153,255);

  03405	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0340a	d1 e0		 shl	 eax, 1
  0340c	b9 04 00 00 00	 mov	 ecx, 4
  03411	c1 e1 03	 shl	 ecx, 3
  03414	c6 84 08 02 00
	00 00 78	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 120 ; 00000078H
  0341c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03421	d1 e0		 shl	 eax, 1
  03423	b9 04 00 00 00	 mov	 ecx, 4
  03428	c1 e1 03	 shl	 ecx, 3
  0342b	c6 84 08 01 00
	00 00 ba	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 186 ; 000000baH
  03433	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03438	d1 e0		 shl	 eax, 1
  0343a	b9 04 00 00 00	 mov	 ecx, 4
  0343f	c1 e1 03	 shl	 ecx, 3
  03442	c6 84 08 00 00
	00 00 99	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 153 ; 00000099H
  0344a	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0344f	d1 e0		 shl	 eax, 1
  03451	b9 04 00 00 00	 mov	 ecx, 4
  03456	c1 e1 03	 shl	 ecx, 3
  03459	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 388  : set_rgb_colour(terrain_colour[2][9 ],130,188,155,255);

  03461	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03466	d1 e0		 shl	 eax, 1
  03468	b9 04 00 00 00	 mov	 ecx, 4
  0346d	6b d1 09	 imul	 edx, ecx, 9
  03470	c6 84 10 02 00
	00 00 82	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 130 ; 00000082H
  03478	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0347d	d1 e0		 shl	 eax, 1
  0347f	b9 04 00 00 00	 mov	 ecx, 4
  03484	6b d1 09	 imul	 edx, ecx, 9
  03487	c6 84 10 01 00
	00 00 bc	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 188 ; 000000bcH
  0348f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03494	d1 e0		 shl	 eax, 1
  03496	b9 04 00 00 00	 mov	 ecx, 4
  0349b	6b d1 09	 imul	 edx, ecx, 9
  0349e	c6 84 10 00 00
	00 00 9b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 155 ; 0000009bH
  034a6	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  034ab	d1 e0		 shl	 eax, 1
  034ad	b9 04 00 00 00	 mov	 ecx, 4
  034b2	6b d1 09	 imul	 edx, ecx, 9
  034b5	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 389  : set_rgb_colour(terrain_colour[2][10],140,190,156,255);

  034bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  034c2	d1 e0		 shl	 eax, 1
  034c4	b9 04 00 00 00	 mov	 ecx, 4
  034c9	6b d1 0a	 imul	 edx, ecx, 10
  034cc	c6 84 10 02 00
	00 00 8c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 140 ; 0000008cH
  034d4	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  034d9	d1 e0		 shl	 eax, 1
  034db	b9 04 00 00 00	 mov	 ecx, 4
  034e0	6b d1 0a	 imul	 edx, ecx, 10
  034e3	c6 84 10 01 00
	00 00 be	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 190 ; 000000beH
  034eb	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  034f0	d1 e0		 shl	 eax, 1
  034f2	b9 04 00 00 00	 mov	 ecx, 4
  034f7	6b d1 0a	 imul	 edx, ecx, 10
  034fa	c6 84 10 00 00
	00 00 9c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 156 ; 0000009cH
  03502	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03507	d1 e0		 shl	 eax, 1
  03509	b9 04 00 00 00	 mov	 ecx, 4
  0350e	6b d1 0a	 imul	 edx, ecx, 10
  03511	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 390  : set_rgb_colour(terrain_colour[2][11],149,191,157,255);

  03519	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0351e	d1 e0		 shl	 eax, 1
  03520	b9 04 00 00 00	 mov	 ecx, 4
  03525	6b d1 0b	 imul	 edx, ecx, 11
  03528	c6 84 10 02 00
	00 00 95	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 149 ; 00000095H
  03530	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03535	d1 e0		 shl	 eax, 1
  03537	b9 04 00 00 00	 mov	 ecx, 4
  0353c	6b d1 0b	 imul	 edx, ecx, 11
  0353f	c6 84 10 01 00
	00 00 bf	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 191 ; 000000bfH
  03547	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0354c	d1 e0		 shl	 eax, 1
  0354e	b9 04 00 00 00	 mov	 ecx, 4
  03553	6b d1 0b	 imul	 edx, ecx, 11
  03556	c6 84 10 00 00
	00 00 9d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 157 ; 0000009dH
  0355e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03563	d1 e0		 shl	 eax, 1
  03565	b9 04 00 00 00	 mov	 ecx, 4
  0356a	6b d1 0b	 imul	 edx, ecx, 11
  0356d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 391  : set_rgb_colour(terrain_colour[2][12],158,192,157,255);

  03575	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0357a	d1 e0		 shl	 eax, 1
  0357c	b9 04 00 00 00	 mov	 ecx, 4
  03581	6b d1 0c	 imul	 edx, ecx, 12
  03584	c6 84 10 02 00
	00 00 9e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 158 ; 0000009eH
  0358c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03591	d1 e0		 shl	 eax, 1
  03593	b9 04 00 00 00	 mov	 ecx, 4
  03598	6b d1 0c	 imul	 edx, ecx, 12
  0359b	c6 84 10 01 00
	00 00 c0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 192 ; 000000c0H
  035a3	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  035a8	d1 e0		 shl	 eax, 1
  035aa	b9 04 00 00 00	 mov	 ecx, 4
  035af	6b d1 0c	 imul	 edx, ecx, 12
  035b2	c6 84 10 00 00
	00 00 9d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 157 ; 0000009dH
  035ba	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  035bf	d1 e0		 shl	 eax, 1
  035c1	b9 04 00 00 00	 mov	 ecx, 4
  035c6	6b d1 0c	 imul	 edx, ecx, 12
  035c9	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 392  : set_rgb_colour(terrain_colour[2][13],166,193,156,255);

  035d1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  035d6	d1 e0		 shl	 eax, 1
  035d8	b9 04 00 00 00	 mov	 ecx, 4
  035dd	6b d1 0d	 imul	 edx, ecx, 13
  035e0	c6 84 10 02 00
	00 00 a6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 166 ; 000000a6H
  035e8	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  035ed	d1 e0		 shl	 eax, 1
  035ef	b9 04 00 00 00	 mov	 ecx, 4
  035f4	6b d1 0d	 imul	 edx, ecx, 13
  035f7	c6 84 10 01 00
	00 00 c1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 193 ; 000000c1H
  035ff	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03604	d1 e0		 shl	 eax, 1
  03606	b9 04 00 00 00	 mov	 ecx, 4
  0360b	6b d1 0d	 imul	 edx, ecx, 13
  0360e	c6 84 10 00 00
	00 00 9c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 156 ; 0000009cH
  03616	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0361b	d1 e0		 shl	 eax, 1
  0361d	b9 04 00 00 00	 mov	 ecx, 4
  03622	6b d1 0d	 imul	 edx, ecx, 13
  03625	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 393  : set_rgb_colour(terrain_colour[2][14],174,194,155,255);

  0362d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03632	d1 e0		 shl	 eax, 1
  03634	b9 04 00 00 00	 mov	 ecx, 4
  03639	6b d1 0e	 imul	 edx, ecx, 14
  0363c	c6 84 10 02 00
	00 00 ae	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 174 ; 000000aeH
  03644	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03649	d1 e0		 shl	 eax, 1
  0364b	b9 04 00 00 00	 mov	 ecx, 4
  03650	6b d1 0e	 imul	 edx, ecx, 14
  03653	c6 84 10 01 00
	00 00 c2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 194 ; 000000c2H
  0365b	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03660	d1 e0		 shl	 eax, 1
  03662	b9 04 00 00 00	 mov	 ecx, 4
  03667	6b d1 0e	 imul	 edx, ecx, 14
  0366a	c6 84 10 00 00
	00 00 9b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 155 ; 0000009bH
  03672	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03677	d1 e0		 shl	 eax, 1
  03679	b9 04 00 00 00	 mov	 ecx, 4
  0367e	6b d1 0e	 imul	 edx, ecx, 14
  03681	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 394  : set_rgb_colour(terrain_colour[2][15],181,194,154,255);

  03689	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0368e	d1 e0		 shl	 eax, 1
  03690	b9 04 00 00 00	 mov	 ecx, 4
  03695	6b d1 0f	 imul	 edx, ecx, 15
  03698	c6 84 10 02 00
	00 00 b5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 181 ; 000000b5H
  036a0	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  036a5	d1 e0		 shl	 eax, 1
  036a7	b9 04 00 00 00	 mov	 ecx, 4
  036ac	6b d1 0f	 imul	 edx, ecx, 15
  036af	c6 84 10 01 00
	00 00 c2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 194 ; 000000c2H
  036b7	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  036bc	d1 e0		 shl	 eax, 1
  036be	b9 04 00 00 00	 mov	 ecx, 4
  036c3	6b d1 0f	 imul	 edx, ecx, 15
  036c6	c6 84 10 00 00
	00 00 9a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 154 ; 0000009aH
  036ce	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  036d3	d1 e0		 shl	 eax, 1
  036d5	b9 04 00 00 00	 mov	 ecx, 4
  036da	6b d1 0f	 imul	 edx, ecx, 15
  036dd	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 395  : set_rgb_colour(terrain_colour[2][16],188,194,152,255);

  036e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  036ea	d1 e0		 shl	 eax, 1
  036ec	b9 04 00 00 00	 mov	 ecx, 4
  036f1	c1 e1 04	 shl	 ecx, 4
  036f4	c6 84 08 02 00
	00 00 bc	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 188 ; 000000bcH
  036fc	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03701	d1 e0		 shl	 eax, 1
  03703	b9 04 00 00 00	 mov	 ecx, 4
  03708	c1 e1 04	 shl	 ecx, 4
  0370b	c6 84 08 01 00
	00 00 c2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 194 ; 000000c2H
  03713	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03718	d1 e0		 shl	 eax, 1
  0371a	b9 04 00 00 00	 mov	 ecx, 4
  0371f	c1 e1 04	 shl	 ecx, 4
  03722	c6 84 08 00 00
	00 00 98	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 152 ; 00000098H
  0372a	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0372f	d1 e0		 shl	 eax, 1
  03731	b9 04 00 00 00	 mov	 ecx, 4
  03736	c1 e1 04	 shl	 ecx, 4
  03739	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 396  : set_rgb_colour(terrain_colour[2][17],194,194,149,255);

  03741	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03746	d1 e0		 shl	 eax, 1
  03748	b9 04 00 00 00	 mov	 ecx, 4
  0374d	6b d1 11	 imul	 edx, ecx, 17
  03750	c6 84 10 02 00
	00 00 c2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 194 ; 000000c2H
  03758	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0375d	d1 e0		 shl	 eax, 1
  0375f	b9 04 00 00 00	 mov	 ecx, 4
  03764	6b d1 11	 imul	 edx, ecx, 17
  03767	c6 84 10 01 00
	00 00 c2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 194 ; 000000c2H
  0376f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03774	d1 e0		 shl	 eax, 1
  03776	b9 04 00 00 00	 mov	 ecx, 4
  0377b	6b d1 11	 imul	 edx, ecx, 17
  0377e	c6 84 10 00 00
	00 00 95	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 149 ; 00000095H
  03786	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0378b	d1 e0		 shl	 eax, 1
  0378d	b9 04 00 00 00	 mov	 ecx, 4
  03792	6b d1 11	 imul	 edx, ecx, 17
  03795	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 397  : set_rgb_colour(terrain_colour[2][18],200,193,146,255);

  0379d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  037a2	d1 e0		 shl	 eax, 1
  037a4	b9 04 00 00 00	 mov	 ecx, 4
  037a9	6b d1 12	 imul	 edx, ecx, 18
  037ac	c6 84 10 02 00
	00 00 c8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 200 ; 000000c8H
  037b4	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  037b9	d1 e0		 shl	 eax, 1
  037bb	b9 04 00 00 00	 mov	 ecx, 4
  037c0	6b d1 12	 imul	 edx, ecx, 18
  037c3	c6 84 10 01 00
	00 00 c1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 193 ; 000000c1H
  037cb	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  037d0	d1 e0		 shl	 eax, 1
  037d2	b9 04 00 00 00	 mov	 ecx, 4
  037d7	6b d1 12	 imul	 edx, ecx, 18
  037da	c6 84 10 00 00
	00 00 92	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 146 ; 00000092H
  037e2	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  037e7	d1 e0		 shl	 eax, 1
  037e9	b9 04 00 00 00	 mov	 ecx, 4
  037ee	6b d1 12	 imul	 edx, ecx, 18
  037f1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 398  : set_rgb_colour(terrain_colour[2][19],205,192,143,255);

  037f9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  037fe	d1 e0		 shl	 eax, 1
  03800	b9 04 00 00 00	 mov	 ecx, 4
  03805	6b d1 13	 imul	 edx, ecx, 19
  03808	c6 84 10 02 00
	00 00 cd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 205 ; 000000cdH
  03810	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03815	d1 e0		 shl	 eax, 1
  03817	b9 04 00 00 00	 mov	 ecx, 4
  0381c	6b d1 13	 imul	 edx, ecx, 19
  0381f	c6 84 10 01 00
	00 00 c0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 192 ; 000000c0H
  03827	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0382c	d1 e0		 shl	 eax, 1
  0382e	b9 04 00 00 00	 mov	 ecx, 4
  03833	6b d1 13	 imul	 edx, ecx, 19
  03836	c6 84 10 00 00
	00 00 8f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 143 ; 0000008fH
  0383e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03843	d1 e0		 shl	 eax, 1
  03845	b9 04 00 00 00	 mov	 ecx, 4
  0384a	6b d1 13	 imul	 edx, ecx, 19
  0384d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 399  : set_rgb_colour(terrain_colour[2][20],209,190,140,255);

  03855	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0385a	d1 e0		 shl	 eax, 1
  0385c	b9 04 00 00 00	 mov	 ecx, 4
  03861	6b d1 14	 imul	 edx, ecx, 20
  03864	c6 84 10 02 00
	00 00 d1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 209 ; 000000d1H
  0386c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03871	d1 e0		 shl	 eax, 1
  03873	b9 04 00 00 00	 mov	 ecx, 4
  03878	6b d1 14	 imul	 edx, ecx, 20
  0387b	c6 84 10 01 00
	00 00 be	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 190 ; 000000beH
  03883	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03888	d1 e0		 shl	 eax, 1
  0388a	b9 04 00 00 00	 mov	 ecx, 4
  0388f	6b d1 14	 imul	 edx, ecx, 20
  03892	c6 84 10 00 00
	00 00 8c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 140 ; 0000008cH
  0389a	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0389f	d1 e0		 shl	 eax, 1
  038a1	b9 04 00 00 00	 mov	 ecx, 4
  038a6	6b d1 14	 imul	 edx, ecx, 20
  038a9	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 400  : set_rgb_colour(terrain_colour[2][21],212,188,136,255);

  038b1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  038b6	d1 e0		 shl	 eax, 1
  038b8	b9 04 00 00 00	 mov	 ecx, 4
  038bd	6b d1 15	 imul	 edx, ecx, 21
  038c0	c6 84 10 02 00
	00 00 d4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 212 ; 000000d4H
  038c8	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  038cd	d1 e0		 shl	 eax, 1
  038cf	b9 04 00 00 00	 mov	 ecx, 4
  038d4	6b d1 15	 imul	 edx, ecx, 21
  038d7	c6 84 10 01 00
	00 00 bc	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 188 ; 000000bcH
  038df	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  038e4	d1 e0		 shl	 eax, 1
  038e6	b9 04 00 00 00	 mov	 ecx, 4
  038eb	6b d1 15	 imul	 edx, ecx, 21
  038ee	c6 84 10 00 00
	00 00 88	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 136 ; 00000088H
  038f6	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  038fb	d1 e0		 shl	 eax, 1
  038fd	b9 04 00 00 00	 mov	 ecx, 4
  03902	6b d1 15	 imul	 edx, ecx, 21
  03905	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 401  : set_rgb_colour(terrain_colour[2][22],214,186,132,255);

  0390d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03912	d1 e0		 shl	 eax, 1
  03914	b9 04 00 00 00	 mov	 ecx, 4
  03919	6b d1 16	 imul	 edx, ecx, 22
  0391c	c6 84 10 02 00
	00 00 d6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 214 ; 000000d6H
  03924	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03929	d1 e0		 shl	 eax, 1
  0392b	b9 04 00 00 00	 mov	 ecx, 4
  03930	6b d1 16	 imul	 edx, ecx, 22
  03933	c6 84 10 01 00
	00 00 ba	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 186 ; 000000baH
  0393b	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03940	d1 e0		 shl	 eax, 1
  03942	b9 04 00 00 00	 mov	 ecx, 4
  03947	6b d1 16	 imul	 edx, ecx, 22
  0394a	c6 84 10 00 00
	00 00 84	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 132 ; 00000084H
  03952	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03957	d1 e0		 shl	 eax, 1
  03959	b9 04 00 00 00	 mov	 ecx, 4
  0395e	6b d1 16	 imul	 edx, ecx, 22
  03961	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 402  : set_rgb_colour(terrain_colour[2][23],216,183,128,255);

  03969	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0396e	d1 e0		 shl	 eax, 1
  03970	b9 04 00 00 00	 mov	 ecx, 4
  03975	6b d1 17	 imul	 edx, ecx, 23
  03978	c6 84 10 02 00
	00 00 d8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 216 ; 000000d8H
  03980	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03985	d1 e0		 shl	 eax, 1
  03987	b9 04 00 00 00	 mov	 ecx, 4
  0398c	6b d1 17	 imul	 edx, ecx, 23
  0398f	c6 84 10 01 00
	00 00 b7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 183 ; 000000b7H
  03997	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0399c	d1 e0		 shl	 eax, 1
  0399e	b9 04 00 00 00	 mov	 ecx, 4
  039a3	6b d1 17	 imul	 edx, ecx, 23
  039a6	c6 84 10 00 00
	00 00 80	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 128 ; 00000080H
  039ae	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  039b3	d1 e0		 shl	 eax, 1
  039b5	b9 04 00 00 00	 mov	 ecx, 4
  039ba	6b d1 17	 imul	 edx, ecx, 23
  039bd	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 403  : set_rgb_colour(terrain_colour[2][24],217,180,124,255);

  039c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  039ca	d1 e0		 shl	 eax, 1
  039cc	b9 04 00 00 00	 mov	 ecx, 4
  039d1	6b d1 18	 imul	 edx, ecx, 24
  039d4	c6 84 10 02 00
	00 00 d9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 217 ; 000000d9H
  039dc	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  039e1	d1 e0		 shl	 eax, 1
  039e3	b9 04 00 00 00	 mov	 ecx, 4
  039e8	6b d1 18	 imul	 edx, ecx, 24
  039eb	c6 84 10 01 00
	00 00 b4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 180 ; 000000b4H
  039f3	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  039f8	d1 e0		 shl	 eax, 1
  039fa	b9 04 00 00 00	 mov	 ecx, 4
  039ff	6b d1 18	 imul	 edx, ecx, 24
  03a02	c6 84 10 00 00
	00 00 7c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 124 ; 0000007cH
  03a0a	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03a0f	d1 e0		 shl	 eax, 1
  03a11	b9 04 00 00 00	 mov	 ecx, 4
  03a16	6b d1 18	 imul	 edx, ecx, 24
  03a19	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 404  : set_rgb_colour(terrain_colour[2][25],217,177,119,255);

  03a21	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03a26	d1 e0		 shl	 eax, 1
  03a28	b9 04 00 00 00	 mov	 ecx, 4
  03a2d	6b d1 19	 imul	 edx, ecx, 25
  03a30	c6 84 10 02 00
	00 00 d9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 217 ; 000000d9H
  03a38	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03a3d	d1 e0		 shl	 eax, 1
  03a3f	b9 04 00 00 00	 mov	 ecx, 4
  03a44	6b d1 19	 imul	 edx, ecx, 25
  03a47	c6 84 10 01 00
	00 00 b1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 177 ; 000000b1H
  03a4f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03a54	d1 e0		 shl	 eax, 1
  03a56	b9 04 00 00 00	 mov	 ecx, 4
  03a5b	6b d1 19	 imul	 edx, ecx, 25
  03a5e	c6 84 10 00 00
	00 00 77	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 119 ; 00000077H
  03a66	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03a6b	d1 e0		 shl	 eax, 1
  03a6d	b9 04 00 00 00	 mov	 ecx, 4
  03a72	6b d1 19	 imul	 edx, ecx, 25
  03a75	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 405  : set_rgb_colour(terrain_colour[2][26],216,173,115,255);

  03a7d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03a82	d1 e0		 shl	 eax, 1
  03a84	b9 04 00 00 00	 mov	 ecx, 4
  03a89	6b d1 1a	 imul	 edx, ecx, 26
  03a8c	c6 84 10 02 00
	00 00 d8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 216 ; 000000d8H
  03a94	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03a99	d1 e0		 shl	 eax, 1
  03a9b	b9 04 00 00 00	 mov	 ecx, 4
  03aa0	6b d1 1a	 imul	 edx, ecx, 26
  03aa3	c6 84 10 01 00
	00 00 ad	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 173 ; 000000adH
  03aab	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03ab0	d1 e0		 shl	 eax, 1
  03ab2	b9 04 00 00 00	 mov	 ecx, 4
  03ab7	6b d1 1a	 imul	 edx, ecx, 26
  03aba	c6 84 10 00 00
	00 00 73	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 115 ; 00000073H
  03ac2	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03ac7	d1 e0		 shl	 eax, 1
  03ac9	b9 04 00 00 00	 mov	 ecx, 4
  03ace	6b d1 1a	 imul	 edx, ecx, 26
  03ad1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 406  : set_rgb_colour(terrain_colour[2][27],214,169,110,255);

  03ad9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03ade	d1 e0		 shl	 eax, 1
  03ae0	b9 04 00 00 00	 mov	 ecx, 4
  03ae5	6b d1 1b	 imul	 edx, ecx, 27
  03ae8	c6 84 10 02 00
	00 00 d6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 214 ; 000000d6H
  03af0	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03af5	d1 e0		 shl	 eax, 1
  03af7	b9 04 00 00 00	 mov	 ecx, 4
  03afc	6b d1 1b	 imul	 edx, ecx, 27
  03aff	c6 84 10 01 00
	00 00 a9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 169 ; 000000a9H
  03b07	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03b0c	d1 e0		 shl	 eax, 1
  03b0e	b9 04 00 00 00	 mov	 ecx, 4
  03b13	6b d1 1b	 imul	 edx, ecx, 27
  03b16	c6 84 10 00 00
	00 00 6e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 110 ; 0000006eH
  03b1e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03b23	d1 e0		 shl	 eax, 1
  03b25	b9 04 00 00 00	 mov	 ecx, 4
  03b2a	6b d1 1b	 imul	 edx, ecx, 27
  03b2d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 407  : set_rgb_colour(terrain_colour[2][28],211,164,106,255);

  03b35	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03b3a	d1 e0		 shl	 eax, 1
  03b3c	b9 04 00 00 00	 mov	 ecx, 4
  03b41	6b d1 1c	 imul	 edx, ecx, 28
  03b44	c6 84 10 02 00
	00 00 d3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 211 ; 000000d3H
  03b4c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03b51	d1 e0		 shl	 eax, 1
  03b53	b9 04 00 00 00	 mov	 ecx, 4
  03b58	6b d1 1c	 imul	 edx, ecx, 28
  03b5b	c6 84 10 01 00
	00 00 a4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 164 ; 000000a4H
  03b63	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03b68	d1 e0		 shl	 eax, 1
  03b6a	b9 04 00 00 00	 mov	 ecx, 4
  03b6f	6b d1 1c	 imul	 edx, ecx, 28
  03b72	c6 84 10 00 00
	00 00 6a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 106 ; 0000006aH
  03b7a	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03b7f	d1 e0		 shl	 eax, 1
  03b81	b9 04 00 00 00	 mov	 ecx, 4
  03b86	6b d1 1c	 imul	 edx, ecx, 28
  03b89	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 408  : set_rgb_colour(terrain_colour[2][29],207,159,102,255);

  03b91	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03b96	d1 e0		 shl	 eax, 1
  03b98	b9 04 00 00 00	 mov	 ecx, 4
  03b9d	6b d1 1d	 imul	 edx, ecx, 29
  03ba0	c6 84 10 02 00
	00 00 cf	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 207 ; 000000cfH
  03ba8	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03bad	d1 e0		 shl	 eax, 1
  03baf	b9 04 00 00 00	 mov	 ecx, 4
  03bb4	6b d1 1d	 imul	 edx, ecx, 29
  03bb7	c6 84 10 01 00
	00 00 9f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 159 ; 0000009fH
  03bbf	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03bc4	d1 e0		 shl	 eax, 1
  03bc6	b9 04 00 00 00	 mov	 ecx, 4
  03bcb	6b d1 1d	 imul	 edx, ecx, 29
  03bce	c6 84 10 00 00
	00 00 66	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 102 ; 00000066H
  03bd6	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03bdb	d1 e0		 shl	 eax, 1
  03bdd	b9 04 00 00 00	 mov	 ecx, 4
  03be2	6b d1 1d	 imul	 edx, ecx, 29
  03be5	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 409  : set_rgb_colour(terrain_colour[2][30],199,152,97,255);

  03bed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03bf2	d1 e0		 shl	 eax, 1
  03bf4	b9 04 00 00 00	 mov	 ecx, 4
  03bf9	6b d1 1e	 imul	 edx, ecx, 30
  03bfc	c6 84 10 02 00
	00 00 c7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 199 ; 000000c7H
  03c04	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03c09	d1 e0		 shl	 eax, 1
  03c0b	b9 04 00 00 00	 mov	 ecx, 4
  03c10	6b d1 1e	 imul	 edx, ecx, 30
  03c13	c6 84 10 01 00
	00 00 98	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 152 ; 00000098H
  03c1b	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03c20	d1 e0		 shl	 eax, 1
  03c22	b9 04 00 00 00	 mov	 ecx, 4
  03c27	6b d1 1e	 imul	 edx, ecx, 30
  03c2a	c6 84 10 00 00
	00 00 61	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 97 ; 00000061H
  03c32	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03c37	d1 e0		 shl	 eax, 1
  03c39	b9 04 00 00 00	 mov	 ecx, 4
  03c3e	6b d1 1e	 imul	 edx, ecx, 30
  03c41	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 410  : set_rgb_colour(terrain_colour[2][31],191,144,91,255);

  03c49	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03c4e	d1 e0		 shl	 eax, 1
  03c50	b9 04 00 00 00	 mov	 ecx, 4
  03c55	6b d1 1f	 imul	 edx, ecx, 31
  03c58	c6 84 10 02 00
	00 00 bf	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 191 ; 000000bfH
  03c60	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03c65	d1 e0		 shl	 eax, 1
  03c67	b9 04 00 00 00	 mov	 ecx, 4
  03c6c	6b d1 1f	 imul	 edx, ecx, 31
  03c6f	c6 84 10 01 00
	00 00 90	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 144 ; 00000090H
  03c77	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03c7c	d1 e0		 shl	 eax, 1
  03c7e	b9 04 00 00 00	 mov	 ecx, 4
  03c83	6b d1 1f	 imul	 edx, ecx, 31
  03c86	c6 84 10 00 00
	00 00 5b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 91 ; 0000005bH
  03c8e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03c93	d1 e0		 shl	 eax, 1
  03c95	b9 04 00 00 00	 mov	 ecx, 4
  03c9a	6b d1 1f	 imul	 edx, ecx, 31
  03c9d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 411  : set_rgb_colour(terrain_colour[2][32],190,144,91,255);

  03ca5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03caa	d1 e0		 shl	 eax, 1
  03cac	b9 04 00 00 00	 mov	 ecx, 4
  03cb1	c1 e1 05	 shl	 ecx, 5
  03cb4	c6 84 08 02 00
	00 00 be	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 190 ; 000000beH
  03cbc	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03cc1	d1 e0		 shl	 eax, 1
  03cc3	b9 04 00 00 00	 mov	 ecx, 4
  03cc8	c1 e1 05	 shl	 ecx, 5
  03ccb	c6 84 08 01 00
	00 00 90	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 144 ; 00000090H
  03cd3	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03cd8	d1 e0		 shl	 eax, 1
  03cda	b9 04 00 00 00	 mov	 ecx, 4
  03cdf	c1 e1 05	 shl	 ecx, 5
  03ce2	c6 84 08 00 00
	00 00 5b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 91 ; 0000005bH
  03cea	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03cef	d1 e0		 shl	 eax, 1
  03cf1	b9 04 00 00 00	 mov	 ecx, 4
  03cf6	c1 e1 05	 shl	 ecx, 5
  03cf9	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 412  : set_rgb_colour(terrain_colour[2][33],188,144,91,255);

  03d01	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03d06	d1 e0		 shl	 eax, 1
  03d08	b9 04 00 00 00	 mov	 ecx, 4
  03d0d	6b d1 21	 imul	 edx, ecx, 33
  03d10	c6 84 10 02 00
	00 00 bc	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 188 ; 000000bcH
  03d18	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03d1d	d1 e0		 shl	 eax, 1
  03d1f	b9 04 00 00 00	 mov	 ecx, 4
  03d24	6b d1 21	 imul	 edx, ecx, 33
  03d27	c6 84 10 01 00
	00 00 90	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 144 ; 00000090H
  03d2f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03d34	d1 e0		 shl	 eax, 1
  03d36	b9 04 00 00 00	 mov	 ecx, 4
  03d3b	6b d1 21	 imul	 edx, ecx, 33
  03d3e	c6 84 10 00 00
	00 00 5b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 91 ; 0000005bH
  03d46	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03d4b	d1 e0		 shl	 eax, 1
  03d4d	b9 04 00 00 00	 mov	 ecx, 4
  03d52	6b d1 21	 imul	 edx, ecx, 33
  03d55	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 413  : set_rgb_colour(terrain_colour[2][34],187,144,90,255);

  03d5d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03d62	d1 e0		 shl	 eax, 1
  03d64	b9 04 00 00 00	 mov	 ecx, 4
  03d69	6b d1 22	 imul	 edx, ecx, 34
  03d6c	c6 84 10 02 00
	00 00 bb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 187 ; 000000bbH
  03d74	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03d79	d1 e0		 shl	 eax, 1
  03d7b	b9 04 00 00 00	 mov	 ecx, 4
  03d80	6b d1 22	 imul	 edx, ecx, 34
  03d83	c6 84 10 01 00
	00 00 90	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 144 ; 00000090H
  03d8b	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03d90	d1 e0		 shl	 eax, 1
  03d92	b9 04 00 00 00	 mov	 ecx, 4
  03d97	6b d1 22	 imul	 edx, ecx, 34
  03d9a	c6 84 10 00 00
	00 00 5a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 90 ; 0000005aH
  03da2	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03da7	d1 e0		 shl	 eax, 1
  03da9	b9 04 00 00 00	 mov	 ecx, 4
  03dae	6b d1 22	 imul	 edx, ecx, 34
  03db1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 414  : set_rgb_colour(terrain_colour[2][35],186,143,89,255);

  03db9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03dbe	d1 e0		 shl	 eax, 1
  03dc0	b9 04 00 00 00	 mov	 ecx, 4
  03dc5	6b d1 23	 imul	 edx, ecx, 35
  03dc8	c6 84 10 02 00
	00 00 ba	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 186 ; 000000baH
  03dd0	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03dd5	d1 e0		 shl	 eax, 1
  03dd7	b9 04 00 00 00	 mov	 ecx, 4
  03ddc	6b d1 23	 imul	 edx, ecx, 35
  03ddf	c6 84 10 01 00
	00 00 8f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 143 ; 0000008fH
  03de7	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03dec	d1 e0		 shl	 eax, 1
  03dee	b9 04 00 00 00	 mov	 ecx, 4
  03df3	6b d1 23	 imul	 edx, ecx, 35
  03df6	c6 84 10 00 00
	00 00 59	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 89 ; 00000059H
  03dfe	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03e03	d1 e0		 shl	 eax, 1
  03e05	b9 04 00 00 00	 mov	 ecx, 4
  03e0a	6b d1 23	 imul	 edx, ecx, 35
  03e0d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 415  : set_rgb_colour(terrain_colour[2][36],185,141,87,255);

  03e15	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03e1a	d1 e0		 shl	 eax, 1
  03e1c	b9 04 00 00 00	 mov	 ecx, 4
  03e21	6b d1 24	 imul	 edx, ecx, 36
  03e24	c6 84 10 02 00
	00 00 b9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 185 ; 000000b9H
  03e2c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03e31	d1 e0		 shl	 eax, 1
  03e33	b9 04 00 00 00	 mov	 ecx, 4
  03e38	6b d1 24	 imul	 edx, ecx, 36
  03e3b	c6 84 10 01 00
	00 00 8d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 141 ; 0000008dH
  03e43	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03e48	d1 e0		 shl	 eax, 1
  03e4a	b9 04 00 00 00	 mov	 ecx, 4
  03e4f	6b d1 24	 imul	 edx, ecx, 36
  03e52	c6 84 10 00 00
	00 00 57	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 87 ; 00000057H
  03e5a	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03e5f	d1 e0		 shl	 eax, 1
  03e61	b9 04 00 00 00	 mov	 ecx, 4
  03e66	6b d1 24	 imul	 edx, ecx, 36
  03e69	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 416  : set_rgb_colour(terrain_colour[2][37],184,139,85,255);

  03e71	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03e76	d1 e0		 shl	 eax, 1
  03e78	b9 04 00 00 00	 mov	 ecx, 4
  03e7d	6b d1 25	 imul	 edx, ecx, 37
  03e80	c6 84 10 02 00
	00 00 b8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 184 ; 000000b8H
  03e88	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03e8d	d1 e0		 shl	 eax, 1
  03e8f	b9 04 00 00 00	 mov	 ecx, 4
  03e94	6b d1 25	 imul	 edx, ecx, 37
  03e97	c6 84 10 01 00
	00 00 8b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 139 ; 0000008bH
  03e9f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03ea4	d1 e0		 shl	 eax, 1
  03ea6	b9 04 00 00 00	 mov	 ecx, 4
  03eab	6b d1 25	 imul	 edx, ecx, 37
  03eae	c6 84 10 00 00
	00 00 55	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 85 ; 00000055H
  03eb6	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03ebb	d1 e0		 shl	 eax, 1
  03ebd	b9 04 00 00 00	 mov	 ecx, 4
  03ec2	6b d1 25	 imul	 edx, ecx, 37
  03ec5	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 417  : set_rgb_colour(terrain_colour[2][38],183,137,83,255);

  03ecd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03ed2	d1 e0		 shl	 eax, 1
  03ed4	b9 04 00 00 00	 mov	 ecx, 4
  03ed9	6b d1 26	 imul	 edx, ecx, 38
  03edc	c6 84 10 02 00
	00 00 b7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 183 ; 000000b7H
  03ee4	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03ee9	d1 e0		 shl	 eax, 1
  03eeb	b9 04 00 00 00	 mov	 ecx, 4
  03ef0	6b d1 26	 imul	 edx, ecx, 38
  03ef3	c6 84 10 01 00
	00 00 89	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 137 ; 00000089H
  03efb	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03f00	d1 e0		 shl	 eax, 1
  03f02	b9 04 00 00 00	 mov	 ecx, 4
  03f07	6b d1 26	 imul	 edx, ecx, 38
  03f0a	c6 84 10 00 00
	00 00 53	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 83 ; 00000053H
  03f12	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03f17	d1 e0		 shl	 eax, 1
  03f19	b9 04 00 00 00	 mov	 ecx, 4
  03f1e	6b d1 26	 imul	 edx, ecx, 38
  03f21	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 418  : set_rgb_colour(terrain_colour[2][39],182,134,81,255);

  03f29	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03f2e	d1 e0		 shl	 eax, 1
  03f30	b9 04 00 00 00	 mov	 ecx, 4
  03f35	6b d1 27	 imul	 edx, ecx, 39
  03f38	c6 84 10 02 00
	00 00 b6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 182 ; 000000b6H
  03f40	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03f45	d1 e0		 shl	 eax, 1
  03f47	b9 04 00 00 00	 mov	 ecx, 4
  03f4c	6b d1 27	 imul	 edx, ecx, 39
  03f4f	c6 84 10 01 00
	00 00 86	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 134 ; 00000086H
  03f57	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03f5c	d1 e0		 shl	 eax, 1
  03f5e	b9 04 00 00 00	 mov	 ecx, 4
  03f63	6b d1 27	 imul	 edx, ecx, 39
  03f66	c6 84 10 00 00
	00 00 51	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 81 ; 00000051H
  03f6e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03f73	d1 e0		 shl	 eax, 1
  03f75	b9 04 00 00 00	 mov	 ecx, 4
  03f7a	6b d1 27	 imul	 edx, ecx, 39
  03f7d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 419  : set_rgb_colour(terrain_colour[2][40],181,131,79,255);

  03f85	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03f8a	d1 e0		 shl	 eax, 1
  03f8c	b9 04 00 00 00	 mov	 ecx, 4
  03f91	6b d1 28	 imul	 edx, ecx, 40
  03f94	c6 84 10 02 00
	00 00 b5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 181 ; 000000b5H
  03f9c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03fa1	d1 e0		 shl	 eax, 1
  03fa3	b9 04 00 00 00	 mov	 ecx, 4
  03fa8	6b d1 28	 imul	 edx, ecx, 40
  03fab	c6 84 10 01 00
	00 00 83	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 131 ; 00000083H
  03fb3	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03fb8	d1 e0		 shl	 eax, 1
  03fba	b9 04 00 00 00	 mov	 ecx, 4
  03fbf	6b d1 28	 imul	 edx, ecx, 40
  03fc2	c6 84 10 00 00
	00 00 4f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 79 ; 0000004fH
  03fca	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03fcf	d1 e0		 shl	 eax, 1
  03fd1	b9 04 00 00 00	 mov	 ecx, 4
  03fd6	6b d1 28	 imul	 edx, ecx, 40
  03fd9	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 420  : set_rgb_colour(terrain_colour[2][41],179,127,76,255);

  03fe1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03fe6	d1 e0		 shl	 eax, 1
  03fe8	b9 04 00 00 00	 mov	 ecx, 4
  03fed	6b d1 29	 imul	 edx, ecx, 41
  03ff0	c6 84 10 02 00
	00 00 b3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 179 ; 000000b3H
  03ff8	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  03ffd	d1 e0		 shl	 eax, 1
  03fff	b9 04 00 00 00	 mov	 ecx, 4
  04004	6b d1 29	 imul	 edx, ecx, 41
  04007	c6 84 10 01 00
	00 00 7f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 127 ; 0000007fH
  0400f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04014	d1 e0		 shl	 eax, 1
  04016	b9 04 00 00 00	 mov	 ecx, 4
  0401b	6b d1 29	 imul	 edx, ecx, 41
  0401e	c6 84 10 00 00
	00 00 4c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 76 ; 0000004cH
  04026	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0402b	d1 e0		 shl	 eax, 1
  0402d	b9 04 00 00 00	 mov	 ecx, 4
  04032	6b d1 29	 imul	 edx, ecx, 41
  04035	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 421  : set_rgb_colour(terrain_colour[2][42],178,123,73,255);

  0403d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04042	d1 e0		 shl	 eax, 1
  04044	b9 04 00 00 00	 mov	 ecx, 4
  04049	6b d1 2a	 imul	 edx, ecx, 42
  0404c	c6 84 10 02 00
	00 00 b2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 178 ; 000000b2H
  04054	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04059	d1 e0		 shl	 eax, 1
  0405b	b9 04 00 00 00	 mov	 ecx, 4
  04060	6b d1 2a	 imul	 edx, ecx, 42
  04063	c6 84 10 01 00
	00 00 7b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 123 ; 0000007bH
  0406b	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04070	d1 e0		 shl	 eax, 1
  04072	b9 04 00 00 00	 mov	 ecx, 4
  04077	6b d1 2a	 imul	 edx, ecx, 42
  0407a	c6 84 10 00 00
	00 00 49	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 73 ; 00000049H
  04082	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04087	d1 e0		 shl	 eax, 1
  04089	b9 04 00 00 00	 mov	 ecx, 4
  0408e	6b d1 2a	 imul	 edx, ecx, 42
  04091	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 422  : set_rgb_colour(terrain_colour[2][43],176,119,70,255);

  04099	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0409e	d1 e0		 shl	 eax, 1
  040a0	b9 04 00 00 00	 mov	 ecx, 4
  040a5	6b d1 2b	 imul	 edx, ecx, 43
  040a8	c6 84 10 02 00
	00 00 b0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 176 ; 000000b0H
  040b0	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  040b5	d1 e0		 shl	 eax, 1
  040b7	b9 04 00 00 00	 mov	 ecx, 4
  040bc	6b d1 2b	 imul	 edx, ecx, 43
  040bf	c6 84 10 01 00
	00 00 77	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 119 ; 00000077H
  040c7	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  040cc	d1 e0		 shl	 eax, 1
  040ce	b9 04 00 00 00	 mov	 ecx, 4
  040d3	6b d1 2b	 imul	 edx, ecx, 43
  040d6	c6 84 10 00 00
	00 00 46	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 70 ; 00000046H
  040de	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  040e3	d1 e0		 shl	 eax, 1
  040e5	b9 04 00 00 00	 mov	 ecx, 4
  040ea	6b d1 2b	 imul	 edx, ecx, 43
  040ed	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 423  : set_rgb_colour(terrain_colour[2][44],175,115,67,255);

  040f5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  040fa	d1 e0		 shl	 eax, 1
  040fc	b9 04 00 00 00	 mov	 ecx, 4
  04101	6b d1 2c	 imul	 edx, ecx, 44
  04104	c6 84 10 02 00
	00 00 af	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 175 ; 000000afH
  0410c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04111	d1 e0		 shl	 eax, 1
  04113	b9 04 00 00 00	 mov	 ecx, 4
  04118	6b d1 2c	 imul	 edx, ecx, 44
  0411b	c6 84 10 01 00
	00 00 73	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 115 ; 00000073H
  04123	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04128	d1 e0		 shl	 eax, 1
  0412a	b9 04 00 00 00	 mov	 ecx, 4
  0412f	6b d1 2c	 imul	 edx, ecx, 44
  04132	c6 84 10 00 00
	00 00 43	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 67 ; 00000043H
  0413a	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0413f	d1 e0		 shl	 eax, 1
  04141	b9 04 00 00 00	 mov	 ecx, 4
  04146	6b d1 2c	 imul	 edx, ecx, 44
  04149	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 424  : set_rgb_colour(terrain_colour[2][45],173,111,63,255);

  04151	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04156	d1 e0		 shl	 eax, 1
  04158	b9 04 00 00 00	 mov	 ecx, 4
  0415d	6b d1 2d	 imul	 edx, ecx, 45
  04160	c6 84 10 02 00
	00 00 ad	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 173 ; 000000adH
  04168	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0416d	d1 e0		 shl	 eax, 1
  0416f	b9 04 00 00 00	 mov	 ecx, 4
  04174	6b d1 2d	 imul	 edx, ecx, 45
  04177	c6 84 10 01 00
	00 00 6f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 111 ; 0000006fH
  0417f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04184	d1 e0		 shl	 eax, 1
  04186	b9 04 00 00 00	 mov	 ecx, 4
  0418b	6b d1 2d	 imul	 edx, ecx, 45
  0418e	c6 84 10 00 00
	00 00 3f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 63 ; 0000003fH
  04196	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0419b	d1 e0		 shl	 eax, 1
  0419d	b9 04 00 00 00	 mov	 ecx, 4
  041a2	6b d1 2d	 imul	 edx, ecx, 45
  041a5	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 425  : set_rgb_colour(terrain_colour[2][46],171,107,60,255);

  041ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  041b2	d1 e0		 shl	 eax, 1
  041b4	b9 04 00 00 00	 mov	 ecx, 4
  041b9	6b d1 2e	 imul	 edx, ecx, 46
  041bc	c6 84 10 02 00
	00 00 ab	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 171 ; 000000abH
  041c4	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  041c9	d1 e0		 shl	 eax, 1
  041cb	b9 04 00 00 00	 mov	 ecx, 4
  041d0	6b d1 2e	 imul	 edx, ecx, 46
  041d3	c6 84 10 01 00
	00 00 6b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 107 ; 0000006bH
  041db	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  041e0	d1 e0		 shl	 eax, 1
  041e2	b9 04 00 00 00	 mov	 ecx, 4
  041e7	6b d1 2e	 imul	 edx, ecx, 46
  041ea	c6 84 10 00 00
	00 00 3c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 60 ; 0000003cH
  041f2	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  041f7	d1 e0		 shl	 eax, 1
  041f9	b9 04 00 00 00	 mov	 ecx, 4
  041fe	6b d1 2e	 imul	 edx, ecx, 46
  04201	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 426  : set_rgb_colour(terrain_colour[2][47],169,102,57,255);

  04209	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0420e	d1 e0		 shl	 eax, 1
  04210	b9 04 00 00 00	 mov	 ecx, 4
  04215	6b d1 2f	 imul	 edx, ecx, 47
  04218	c6 84 10 02 00
	00 00 a9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 169 ; 000000a9H
  04220	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04225	d1 e0		 shl	 eax, 1
  04227	b9 04 00 00 00	 mov	 ecx, 4
  0422c	6b d1 2f	 imul	 edx, ecx, 47
  0422f	c6 84 10 01 00
	00 00 66	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 102 ; 00000066H
  04237	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0423c	d1 e0		 shl	 eax, 1
  0423e	b9 04 00 00 00	 mov	 ecx, 4
  04243	6b d1 2f	 imul	 edx, ecx, 47
  04246	c6 84 10 00 00
	00 00 39	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 57 ; 00000039H
  0424e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04253	d1 e0		 shl	 eax, 1
  04255	b9 04 00 00 00	 mov	 ecx, 4
  0425a	6b d1 2f	 imul	 edx, ecx, 47
  0425d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 427  : set_rgb_colour(terrain_colour[2][48],166,98,54,255);

  04265	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0426a	d1 e0		 shl	 eax, 1
  0426c	b9 04 00 00 00	 mov	 ecx, 4
  04271	6b d1 30	 imul	 edx, ecx, 48
  04274	c6 84 10 02 00
	00 00 a6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 166 ; 000000a6H
  0427c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04281	d1 e0		 shl	 eax, 1
  04283	b9 04 00 00 00	 mov	 ecx, 4
  04288	6b d1 30	 imul	 edx, ecx, 48
  0428b	c6 84 10 01 00
	00 00 62	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 98 ; 00000062H
  04293	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04298	d1 e0		 shl	 eax, 1
  0429a	b9 04 00 00 00	 mov	 ecx, 4
  0429f	6b d1 30	 imul	 edx, ecx, 48
  042a2	c6 84 10 00 00
	00 00 36	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 54 ; 00000036H
  042aa	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  042af	d1 e0		 shl	 eax, 1
  042b1	b9 04 00 00 00	 mov	 ecx, 4
  042b6	6b d1 30	 imul	 edx, ecx, 48
  042b9	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 428  : set_rgb_colour(terrain_colour[2][49],163,94,50,255);

  042c1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  042c6	d1 e0		 shl	 eax, 1
  042c8	b9 04 00 00 00	 mov	 ecx, 4
  042cd	6b d1 31	 imul	 edx, ecx, 49
  042d0	c6 84 10 02 00
	00 00 a3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 163 ; 000000a3H
  042d8	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  042dd	d1 e0		 shl	 eax, 1
  042df	b9 04 00 00 00	 mov	 ecx, 4
  042e4	6b d1 31	 imul	 edx, ecx, 49
  042e7	c6 84 10 01 00
	00 00 5e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 94 ; 0000005eH
  042ef	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  042f4	d1 e0		 shl	 eax, 1
  042f6	b9 04 00 00 00	 mov	 ecx, 4
  042fb	6b d1 31	 imul	 edx, ecx, 49
  042fe	c6 84 10 00 00
	00 00 32	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 50 ; 00000032H
  04306	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0430b	d1 e0		 shl	 eax, 1
  0430d	b9 04 00 00 00	 mov	 ecx, 4
  04312	6b d1 31	 imul	 edx, ecx, 49
  04315	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 429  : set_rgb_colour(terrain_colour[2][50],160,90,47,255);

  0431d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04322	d1 e0		 shl	 eax, 1
  04324	b9 04 00 00 00	 mov	 ecx, 4
  04329	6b d1 32	 imul	 edx, ecx, 50
  0432c	c6 84 10 02 00
	00 00 a0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 160 ; 000000a0H
  04334	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04339	d1 e0		 shl	 eax, 1
  0433b	b9 04 00 00 00	 mov	 ecx, 4
  04340	6b d1 32	 imul	 edx, ecx, 50
  04343	c6 84 10 01 00
	00 00 5a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 90 ; 0000005aH
  0434b	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04350	d1 e0		 shl	 eax, 1
  04352	b9 04 00 00 00	 mov	 ecx, 4
  04357	6b d1 32	 imul	 edx, ecx, 50
  0435a	c6 84 10 00 00
	00 00 2f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 47 ; 0000002fH
  04362	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04367	d1 e0		 shl	 eax, 1
  04369	b9 04 00 00 00	 mov	 ecx, 4
  0436e	6b d1 32	 imul	 edx, ecx, 50
  04371	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 430  : set_rgb_colour(terrain_colour[2][51],157,85,44,255);

  04379	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0437e	d1 e0		 shl	 eax, 1
  04380	b9 04 00 00 00	 mov	 ecx, 4
  04385	6b d1 33	 imul	 edx, ecx, 51
  04388	c6 84 10 02 00
	00 00 9d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 157 ; 0000009dH
  04390	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04395	d1 e0		 shl	 eax, 1
  04397	b9 04 00 00 00	 mov	 ecx, 4
  0439c	6b d1 33	 imul	 edx, ecx, 51
  0439f	c6 84 10 01 00
	00 00 55	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 85 ; 00000055H
  043a7	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  043ac	d1 e0		 shl	 eax, 1
  043ae	b9 04 00 00 00	 mov	 ecx, 4
  043b3	6b d1 33	 imul	 edx, ecx, 51
  043b6	c6 84 10 00 00
	00 00 2c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 44 ; 0000002cH
  043be	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  043c3	d1 e0		 shl	 eax, 1
  043c5	b9 04 00 00 00	 mov	 ecx, 4
  043ca	6b d1 33	 imul	 edx, ecx, 51
  043cd	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 431  : set_rgb_colour(terrain_colour[2][52],154,81,42,255);

  043d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  043da	d1 e0		 shl	 eax, 1
  043dc	b9 04 00 00 00	 mov	 ecx, 4
  043e1	6b d1 34	 imul	 edx, ecx, 52
  043e4	c6 84 10 02 00
	00 00 9a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 154 ; 0000009aH
  043ec	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  043f1	d1 e0		 shl	 eax, 1
  043f3	b9 04 00 00 00	 mov	 ecx, 4
  043f8	6b d1 34	 imul	 edx, ecx, 52
  043fb	c6 84 10 01 00
	00 00 51	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 81 ; 00000051H
  04403	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04408	d1 e0		 shl	 eax, 1
  0440a	b9 04 00 00 00	 mov	 ecx, 4
  0440f	6b d1 34	 imul	 edx, ecx, 52
  04412	c6 84 10 00 00
	00 00 2a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 42 ; 0000002aH
  0441a	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0441f	d1 e0		 shl	 eax, 1
  04421	b9 04 00 00 00	 mov	 ecx, 4
  04426	6b d1 34	 imul	 edx, ecx, 52
  04429	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 432  : set_rgb_colour(terrain_colour[2][53],150,77,39,255);

  04431	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04436	d1 e0		 shl	 eax, 1
  04438	b9 04 00 00 00	 mov	 ecx, 4
  0443d	6b d1 35	 imul	 edx, ecx, 53
  04440	c6 84 10 02 00
	00 00 96	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 150 ; 00000096H
  04448	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0444d	d1 e0		 shl	 eax, 1
  0444f	b9 04 00 00 00	 mov	 ecx, 4
  04454	6b d1 35	 imul	 edx, ecx, 53
  04457	c6 84 10 01 00
	00 00 4d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 77 ; 0000004dH
  0445f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04464	d1 e0		 shl	 eax, 1
  04466	b9 04 00 00 00	 mov	 ecx, 4
  0446b	6b d1 35	 imul	 edx, ecx, 53
  0446e	c6 84 10 00 00
	00 00 27	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 39 ; 00000027H
  04476	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0447b	d1 e0		 shl	 eax, 1
  0447d	b9 04 00 00 00	 mov	 ecx, 4
  04482	6b d1 35	 imul	 edx, ecx, 53
  04485	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 433  : set_rgb_colour(terrain_colour[2][54],146,74,37,255);

  0448d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04492	d1 e0		 shl	 eax, 1
  04494	b9 04 00 00 00	 mov	 ecx, 4
  04499	6b d1 36	 imul	 edx, ecx, 54
  0449c	c6 84 10 02 00
	00 00 92	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 146 ; 00000092H
  044a4	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  044a9	d1 e0		 shl	 eax, 1
  044ab	b9 04 00 00 00	 mov	 ecx, 4
  044b0	6b d1 36	 imul	 edx, ecx, 54
  044b3	c6 84 10 01 00
	00 00 4a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 74 ; 0000004aH
  044bb	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  044c0	d1 e0		 shl	 eax, 1
  044c2	b9 04 00 00 00	 mov	 ecx, 4
  044c7	6b d1 36	 imul	 edx, ecx, 54
  044ca	c6 84 10 00 00
	00 00 25	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 37 ; 00000025H
  044d2	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  044d7	d1 e0		 shl	 eax, 1
  044d9	b9 04 00 00 00	 mov	 ecx, 4
  044de	6b d1 36	 imul	 edx, ecx, 54
  044e1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 434  : set_rgb_colour(terrain_colour[2][55],141,70,34,255);

  044e9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  044ee	d1 e0		 shl	 eax, 1
  044f0	b9 04 00 00 00	 mov	 ecx, 4
  044f5	6b d1 37	 imul	 edx, ecx, 55
  044f8	c6 84 10 02 00
	00 00 8d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 141 ; 0000008dH
  04500	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04505	d1 e0		 shl	 eax, 1
  04507	b9 04 00 00 00	 mov	 ecx, 4
  0450c	6b d1 37	 imul	 edx, ecx, 55
  0450f	c6 84 10 01 00
	00 00 46	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 70 ; 00000046H
  04517	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0451c	d1 e0		 shl	 eax, 1
  0451e	b9 04 00 00 00	 mov	 ecx, 4
  04523	6b d1 37	 imul	 edx, ecx, 55
  04526	c6 84 10 00 00
	00 00 22	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 34 ; 00000022H
  0452e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04533	d1 e0		 shl	 eax, 1
  04535	b9 04 00 00 00	 mov	 ecx, 4
  0453a	6b d1 37	 imul	 edx, ecx, 55
  0453d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 435  : set_rgb_colour(terrain_colour[2][56],136,68,32,255);

  04545	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0454a	d1 e0		 shl	 eax, 1
  0454c	b9 04 00 00 00	 mov	 ecx, 4
  04551	6b d1 38	 imul	 edx, ecx, 56
  04554	c6 84 10 02 00
	00 00 88	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 136 ; 00000088H
  0455c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04561	d1 e0		 shl	 eax, 1
  04563	b9 04 00 00 00	 mov	 ecx, 4
  04568	6b d1 38	 imul	 edx, ecx, 56
  0456b	c6 84 10 01 00
	00 00 44	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 68 ; 00000044H
  04573	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04578	d1 e0		 shl	 eax, 1
  0457a	b9 04 00 00 00	 mov	 ecx, 4
  0457f	6b d1 38	 imul	 edx, ecx, 56
  04582	c6 84 10 00 00
	00 00 20	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 32 ; 00000020H
  0458a	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0458f	d1 e0		 shl	 eax, 1
  04591	b9 04 00 00 00	 mov	 ecx, 4
  04596	6b d1 38	 imul	 edx, ecx, 56
  04599	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 436  : set_rgb_colour(terrain_colour[2][57],131,65,30,255);

  045a1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  045a6	d1 e0		 shl	 eax, 1
  045a8	b9 04 00 00 00	 mov	 ecx, 4
  045ad	6b d1 39	 imul	 edx, ecx, 57
  045b0	c6 84 10 02 00
	00 00 83	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 131 ; 00000083H
  045b8	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  045bd	d1 e0		 shl	 eax, 1
  045bf	b9 04 00 00 00	 mov	 ecx, 4
  045c4	6b d1 39	 imul	 edx, ecx, 57
  045c7	c6 84 10 01 00
	00 00 41	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 65 ; 00000041H
  045cf	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  045d4	d1 e0		 shl	 eax, 1
  045d6	b9 04 00 00 00	 mov	 ecx, 4
  045db	6b d1 39	 imul	 edx, ecx, 57
  045de	c6 84 10 00 00
	00 00 1e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 30 ; 0000001eH
  045e6	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  045eb	d1 e0		 shl	 eax, 1
  045ed	b9 04 00 00 00	 mov	 ecx, 4
  045f2	6b d1 39	 imul	 edx, ecx, 57
  045f5	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 437  : set_rgb_colour(terrain_colour[2][58],125,63,29,255);

  045fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04602	d1 e0		 shl	 eax, 1
  04604	b9 04 00 00 00	 mov	 ecx, 4
  04609	6b d1 3a	 imul	 edx, ecx, 58
  0460c	c6 84 10 02 00
	00 00 7d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 125 ; 0000007dH
  04614	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04619	d1 e0		 shl	 eax, 1
  0461b	b9 04 00 00 00	 mov	 ecx, 4
  04620	6b d1 3a	 imul	 edx, ecx, 58
  04623	c6 84 10 01 00
	00 00 3f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 63 ; 0000003fH
  0462b	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04630	d1 e0		 shl	 eax, 1
  04632	b9 04 00 00 00	 mov	 ecx, 4
  04637	6b d1 3a	 imul	 edx, ecx, 58
  0463a	c6 84 10 00 00
	00 00 1d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 29 ; 0000001dH
  04642	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04647	d1 e0		 shl	 eax, 1
  04649	b9 04 00 00 00	 mov	 ecx, 4
  0464e	6b d1 3a	 imul	 edx, ecx, 58
  04651	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 438  : set_rgb_colour(terrain_colour[2][59],119,61,28,255);

  04659	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0465e	d1 e0		 shl	 eax, 1
  04660	b9 04 00 00 00	 mov	 ecx, 4
  04665	6b d1 3b	 imul	 edx, ecx, 59
  04668	c6 84 10 02 00
	00 00 77	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 119 ; 00000077H
  04670	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04675	d1 e0		 shl	 eax, 1
  04677	b9 04 00 00 00	 mov	 ecx, 4
  0467c	6b d1 3b	 imul	 edx, ecx, 59
  0467f	c6 84 10 01 00
	00 00 3d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 61 ; 0000003dH
  04687	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0468c	d1 e0		 shl	 eax, 1
  0468e	b9 04 00 00 00	 mov	 ecx, 4
  04693	6b d1 3b	 imul	 edx, ecx, 59
  04696	c6 84 10 00 00
	00 00 1c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 28 ; 0000001cH
  0469e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  046a3	d1 e0		 shl	 eax, 1
  046a5	b9 04 00 00 00	 mov	 ecx, 4
  046aa	6b d1 3b	 imul	 edx, ecx, 59
  046ad	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 439  : set_rgb_colour(terrain_colour[2][60],112,60,28,255);

  046b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  046ba	d1 e0		 shl	 eax, 1
  046bc	b9 04 00 00 00	 mov	 ecx, 4
  046c1	6b d1 3c	 imul	 edx, ecx, 60
  046c4	c6 84 10 02 00
	00 00 70	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 112 ; 00000070H
  046cc	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  046d1	d1 e0		 shl	 eax, 1
  046d3	b9 04 00 00 00	 mov	 ecx, 4
  046d8	6b d1 3c	 imul	 edx, ecx, 60
  046db	c6 84 10 01 00
	00 00 3c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 60 ; 0000003cH
  046e3	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  046e8	d1 e0		 shl	 eax, 1
  046ea	b9 04 00 00 00	 mov	 ecx, 4
  046ef	6b d1 3c	 imul	 edx, ecx, 60
  046f2	c6 84 10 00 00
	00 00 1c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 28 ; 0000001cH
  046fa	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  046ff	d1 e0		 shl	 eax, 1
  04701	b9 04 00 00 00	 mov	 ecx, 4
  04706	6b d1 3c	 imul	 edx, ecx, 60
  04709	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 440  : set_rgb_colour(terrain_colour[2][61],105,59,27,255);

  04711	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04716	d1 e0		 shl	 eax, 1
  04718	b9 04 00 00 00	 mov	 ecx, 4
  0471d	6b d1 3d	 imul	 edx, ecx, 61
  04720	c6 84 10 02 00
	00 00 69	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 105 ; 00000069H
  04728	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0472d	d1 e0		 shl	 eax, 1
  0472f	b9 04 00 00 00	 mov	 ecx, 4
  04734	6b d1 3d	 imul	 edx, ecx, 61
  04737	c6 84 10 01 00
	00 00 3b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 59 ; 0000003bH
  0473f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04744	d1 e0		 shl	 eax, 1
  04746	b9 04 00 00 00	 mov	 ecx, 4
  0474b	6b d1 3d	 imul	 edx, ecx, 61
  0474e	c6 84 10 00 00
	00 00 1b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 27 ; 0000001bH
  04756	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0475b	d1 e0		 shl	 eax, 1
  0475d	b9 04 00 00 00	 mov	 ecx, 4
  04762	6b d1 3d	 imul	 edx, ecx, 61
  04765	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 441  : set_rgb_colour(terrain_colour[2][62],98,59,27,255);

  0476d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04772	d1 e0		 shl	 eax, 1
  04774	b9 04 00 00 00	 mov	 ecx, 4
  04779	6b d1 3e	 imul	 edx, ecx, 62
  0477c	c6 84 10 02 00
	00 00 62	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 98 ; 00000062H
  04784	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04789	d1 e0		 shl	 eax, 1
  0478b	b9 04 00 00 00	 mov	 ecx, 4
  04790	6b d1 3e	 imul	 edx, ecx, 62
  04793	c6 84 10 01 00
	00 00 3b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 59 ; 0000003bH
  0479b	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  047a0	d1 e0		 shl	 eax, 1
  047a2	b9 04 00 00 00	 mov	 ecx, 4
  047a7	6b d1 3e	 imul	 edx, ecx, 62
  047aa	c6 84 10 00 00
	00 00 1b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 27 ; 0000001bH
  047b2	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  047b7	d1 e0		 shl	 eax, 1
  047b9	b9 04 00 00 00	 mov	 ecx, 4
  047be	6b d1 3e	 imul	 edx, ecx, 62
  047c1	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 442  : set_rgb_colour(terrain_colour[2][63],90,59,27,255);

  047c9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  047ce	d1 e0		 shl	 eax, 1
  047d0	b9 04 00 00 00	 mov	 ecx, 4
  047d5	6b d1 3f	 imul	 edx, ecx, 63
  047d8	c6 84 10 02 00
	00 00 5a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+2], 90 ; 0000005aH
  047e0	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  047e5	d1 e0		 shl	 eax, 1
  047e7	b9 04 00 00 00	 mov	 ecx, 4
  047ec	6b d1 3f	 imul	 edx, ecx, 63
  047ef	c6 84 10 01 00
	00 00 3b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+1], 59 ; 0000003bH
  047f7	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  047fc	d1 e0		 shl	 eax, 1
  047fe	b9 04 00 00 00	 mov	 ecx, 4
  04803	6b d1 3f	 imul	 edx, ecx, 63
  04806	c6 84 10 00 00
	00 00 1b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx], 27 ; 0000001bH
  0480e	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04813	d1 e0		 shl	 eax, 1
  04815	b9 04 00 00 00	 mov	 ecx, 4
  0481a	6b d1 3f	 imul	 edx, ecx, 63
  0481d	c6 84 10 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+edx+3], 255 ; 000000ffH

; 443  : set_rgb_colour(terrain_colour[2][64],90,59,27,255);

  04825	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0482a	d1 e0		 shl	 eax, 1
  0482c	b9 04 00 00 00	 mov	 ecx, 4
  04831	c1 e1 06	 shl	 ecx, 6
  04834	c6 84 08 02 00
	00 00 5a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+2], 90 ; 0000005aH
  0483c	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04841	d1 e0		 shl	 eax, 1
  04843	b9 04 00 00 00	 mov	 ecx, 4
  04848	c1 e1 06	 shl	 ecx, 6
  0484b	c6 84 08 01 00
	00 00 3b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+1], 59 ; 0000003bH
  04853	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04858	d1 e0		 shl	 eax, 1
  0485a	b9 04 00 00 00	 mov	 ecx, 4
  0485f	c1 e1 06	 shl	 ecx, 6
  04862	c6 84 08 00 00
	00 00 1b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx], 27 ; 0000001bH
  0486a	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0486f	d1 e0		 shl	 eax, 1
  04871	b9 04 00 00 00	 mov	 ecx, 4
  04876	c1 e1 06	 shl	 ecx, 6
  04879	c6 84 08 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[eax+ecx+3], 255 ; 000000ffH

; 444  : 
; 445  : // Made with hue: 0.32 - 0.02, value: 0.40 - 0.60, saturation: 0.50 - 0.45
; 446  : set_rgb_colour(terrain_colour[3][ 0],100,150,240,255);

  04881	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04886	6b c8 03	 imul	 ecx, eax, 3
  04889	ba 04 00 00 00	 mov	 edx, 4
  0488e	6b c2 00	 imul	 eax, edx, 0
  04891	c6 84 01 02 00
	00 00 64	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 100 ; 00000064H
  04899	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0489e	6b c8 03	 imul	 ecx, eax, 3
  048a1	ba 04 00 00 00	 mov	 edx, 4
  048a6	6b c2 00	 imul	 eax, edx, 0
  048a9	c6 84 01 01 00
	00 00 96	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 150 ; 00000096H
  048b1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  048b6	6b c8 03	 imul	 ecx, eax, 3
  048b9	ba 04 00 00 00	 mov	 edx, 4
  048be	6b c2 00	 imul	 eax, edx, 0
  048c1	c6 84 01 00 00
	00 00 f0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 240 ; 000000f0H
  048c9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  048ce	6b c8 03	 imul	 ecx, eax, 3
  048d1	ba 04 00 00 00	 mov	 edx, 4
  048d6	6b c2 00	 imul	 eax, edx, 0
  048d9	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 447  : set_rgb_colour(terrain_colour[3][ 1], 55,102, 51,255);

  048e1	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  048e6	6b c8 03	 imul	 ecx, eax, 3
  048e9	ba 04 00 00 00	 mov	 edx, 4
  048ee	c1 e2 00	 shl	 edx, 0
  048f1	c6 84 11 02 00
	00 00 37	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 55 ; 00000037H
  048f9	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  048fe	6b c8 03	 imul	 ecx, eax, 3
  04901	ba 04 00 00 00	 mov	 edx, 4
  04906	c1 e2 00	 shl	 edx, 0
  04909	c6 84 11 01 00
	00 00 66	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 102 ; 00000066H
  04911	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04916	6b c8 03	 imul	 ecx, eax, 3
  04919	ba 04 00 00 00	 mov	 edx, 4
  0491e	c1 e2 00	 shl	 edx, 0
  04921	c6 84 11 00 00
	00 00 33	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 51 ; 00000033H
  04929	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0492e	6b c8 03	 imul	 ecx, eax, 3
  04931	ba 04 00 00 00	 mov	 edx, 4
  04936	c1 e2 00	 shl	 edx, 0
  04939	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 448  : set_rgb_colour(terrain_colour[3][ 2], 58,103, 51,255);

  04941	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04946	6b c8 03	 imul	 ecx, eax, 3
  04949	ba 04 00 00 00	 mov	 edx, 4
  0494e	d1 e2		 shl	 edx, 1
  04950	c6 84 11 02 00
	00 00 3a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 58 ; 0000003aH
  04958	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0495d	6b c8 03	 imul	 ecx, eax, 3
  04960	ba 04 00 00 00	 mov	 edx, 4
  04965	d1 e2		 shl	 edx, 1
  04967	c6 84 11 01 00
	00 00 67	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 103 ; 00000067H
  0496f	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04974	6b c8 03	 imul	 ecx, eax, 3
  04977	ba 04 00 00 00	 mov	 edx, 4
  0497c	d1 e2		 shl	 edx, 1
  0497e	c6 84 11 00 00
	00 00 33	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 51 ; 00000033H
  04986	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0498b	6b c8 03	 imul	 ecx, eax, 3
  0498e	ba 04 00 00 00	 mov	 edx, 4
  04993	d1 e2		 shl	 edx, 1
  04995	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 449  : set_rgb_colour(terrain_colour[3][ 3], 62,105, 52,255);

  0499d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  049a2	6b c8 03	 imul	 ecx, eax, 3
  049a5	ba 04 00 00 00	 mov	 edx, 4
  049aa	6b c2 03	 imul	 eax, edx, 3
  049ad	c6 84 01 02 00
	00 00 3e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 62 ; 0000003eH
  049b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  049ba	6b c8 03	 imul	 ecx, eax, 3
  049bd	ba 04 00 00 00	 mov	 edx, 4
  049c2	6b c2 03	 imul	 eax, edx, 3
  049c5	c6 84 01 01 00
	00 00 69	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 105 ; 00000069H
  049cd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  049d2	6b c8 03	 imul	 ecx, eax, 3
  049d5	ba 04 00 00 00	 mov	 edx, 4
  049da	6b c2 03	 imul	 eax, edx, 3
  049dd	c6 84 01 00 00
	00 00 34	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 52 ; 00000034H
  049e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  049ea	6b c8 03	 imul	 ecx, eax, 3
  049ed	ba 04 00 00 00	 mov	 edx, 4
  049f2	6b c2 03	 imul	 eax, edx, 3
  049f5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 450  : set_rgb_colour(terrain_colour[3][ 4], 67,106, 53,255);

  049fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04a02	6b c8 03	 imul	 ecx, eax, 3
  04a05	ba 04 00 00 00	 mov	 edx, 4
  04a0a	c1 e2 02	 shl	 edx, 2
  04a0d	c6 84 11 02 00
	00 00 43	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 67 ; 00000043H
  04a15	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04a1a	6b c8 03	 imul	 ecx, eax, 3
  04a1d	ba 04 00 00 00	 mov	 edx, 4
  04a22	c1 e2 02	 shl	 edx, 2
  04a25	c6 84 11 01 00
	00 00 6a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 106 ; 0000006aH
  04a2d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04a32	6b c8 03	 imul	 ecx, eax, 3
  04a35	ba 04 00 00 00	 mov	 edx, 4
  04a3a	c1 e2 02	 shl	 edx, 2
  04a3d	c6 84 11 00 00
	00 00 35	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 53 ; 00000035H
  04a45	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04a4a	6b c8 03	 imul	 ecx, eax, 3
  04a4d	ba 04 00 00 00	 mov	 edx, 4
  04a52	c1 e2 02	 shl	 edx, 2
  04a55	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 451  : set_rgb_colour(terrain_colour[3][ 5], 71,108, 54,255);

  04a5d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04a62	6b c8 03	 imul	 ecx, eax, 3
  04a65	ba 04 00 00 00	 mov	 edx, 4
  04a6a	6b c2 05	 imul	 eax, edx, 5
  04a6d	c6 84 01 02 00
	00 00 47	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 71 ; 00000047H
  04a75	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04a7a	6b c8 03	 imul	 ecx, eax, 3
  04a7d	ba 04 00 00 00	 mov	 edx, 4
  04a82	6b c2 05	 imul	 eax, edx, 5
  04a85	c6 84 01 01 00
	00 00 6c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 108 ; 0000006cH
  04a8d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04a92	6b c8 03	 imul	 ecx, eax, 3
  04a95	ba 04 00 00 00	 mov	 edx, 4
  04a9a	6b c2 05	 imul	 eax, edx, 5
  04a9d	c6 84 01 00 00
	00 00 36	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 54 ; 00000036H
  04aa5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04aaa	6b c8 03	 imul	 ecx, eax, 3
  04aad	ba 04 00 00 00	 mov	 edx, 4
  04ab2	6b c2 05	 imul	 eax, edx, 5
  04ab5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 452  : set_rgb_colour(terrain_colour[3][ 6], 75,109, 55,255);

  04abd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04ac2	6b c8 03	 imul	 ecx, eax, 3
  04ac5	ba 04 00 00 00	 mov	 edx, 4
  04aca	6b c2 06	 imul	 eax, edx, 6
  04acd	c6 84 01 02 00
	00 00 4b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 75 ; 0000004bH
  04ad5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04ada	6b c8 03	 imul	 ecx, eax, 3
  04add	ba 04 00 00 00	 mov	 edx, 4
  04ae2	6b c2 06	 imul	 eax, edx, 6
  04ae5	c6 84 01 01 00
	00 00 6d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 109 ; 0000006dH
  04aed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04af2	6b c8 03	 imul	 ecx, eax, 3
  04af5	ba 04 00 00 00	 mov	 edx, 4
  04afa	6b c2 06	 imul	 eax, edx, 6
  04afd	c6 84 01 00 00
	00 00 37	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 55 ; 00000037H
  04b05	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04b0a	6b c8 03	 imul	 ecx, eax, 3
  04b0d	ba 04 00 00 00	 mov	 edx, 4
  04b12	6b c2 06	 imul	 eax, edx, 6
  04b15	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 453  : set_rgb_colour(terrain_colour[3][ 7], 79,111, 56,255);

  04b1d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04b22	6b c8 03	 imul	 ecx, eax, 3
  04b25	ba 04 00 00 00	 mov	 edx, 4
  04b2a	6b c2 07	 imul	 eax, edx, 7
  04b2d	c6 84 01 02 00
	00 00 4f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 79 ; 0000004fH
  04b35	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04b3a	6b c8 03	 imul	 ecx, eax, 3
  04b3d	ba 04 00 00 00	 mov	 edx, 4
  04b42	6b c2 07	 imul	 eax, edx, 7
  04b45	c6 84 01 01 00
	00 00 6f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 111 ; 0000006fH
  04b4d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04b52	6b c8 03	 imul	 ecx, eax, 3
  04b55	ba 04 00 00 00	 mov	 edx, 4
  04b5a	6b c2 07	 imul	 eax, edx, 7
  04b5d	c6 84 01 00 00
	00 00 38	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 56 ; 00000038H
  04b65	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04b6a	6b c8 03	 imul	 ecx, eax, 3
  04b6d	ba 04 00 00 00	 mov	 edx, 4
  04b72	6b c2 07	 imul	 eax, edx, 7
  04b75	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 454  : set_rgb_colour(terrain_colour[3][ 8], 84,113, 57,255);

  04b7d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04b82	6b c8 03	 imul	 ecx, eax, 3
  04b85	ba 04 00 00 00	 mov	 edx, 4
  04b8a	c1 e2 03	 shl	 edx, 3
  04b8d	c6 84 11 02 00
	00 00 54	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 84 ; 00000054H
  04b95	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04b9a	6b c8 03	 imul	 ecx, eax, 3
  04b9d	ba 04 00 00 00	 mov	 edx, 4
  04ba2	c1 e2 03	 shl	 edx, 3
  04ba5	c6 84 11 01 00
	00 00 71	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 113 ; 00000071H
  04bad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04bb2	6b c8 03	 imul	 ecx, eax, 3
  04bb5	ba 04 00 00 00	 mov	 edx, 4
  04bba	c1 e2 03	 shl	 edx, 3
  04bbd	c6 84 11 00 00
	00 00 39	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 57 ; 00000039H
  04bc5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04bca	6b c8 03	 imul	 ecx, eax, 3
  04bcd	ba 04 00 00 00	 mov	 edx, 4
  04bd2	c1 e2 03	 shl	 edx, 3
  04bd5	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 455  : set_rgb_colour(terrain_colour[3][ 9], 88,114, 58,255);

  04bdd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04be2	6b c8 03	 imul	 ecx, eax, 3
  04be5	ba 04 00 00 00	 mov	 edx, 4
  04bea	6b c2 09	 imul	 eax, edx, 9
  04bed	c6 84 01 02 00
	00 00 58	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 88 ; 00000058H
  04bf5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04bfa	6b c8 03	 imul	 ecx, eax, 3
  04bfd	ba 04 00 00 00	 mov	 edx, 4
  04c02	6b c2 09	 imul	 eax, edx, 9
  04c05	c6 84 01 01 00
	00 00 72	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 114 ; 00000072H
  04c0d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04c12	6b c8 03	 imul	 ecx, eax, 3
  04c15	ba 04 00 00 00	 mov	 edx, 4
  04c1a	6b c2 09	 imul	 eax, edx, 9
  04c1d	c6 84 01 00 00
	00 00 3a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 58 ; 0000003aH
  04c25	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04c2a	6b c8 03	 imul	 ecx, eax, 3
  04c2d	ba 04 00 00 00	 mov	 edx, 4
  04c32	6b c2 09	 imul	 eax, edx, 9
  04c35	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 456  : set_rgb_colour(terrain_colour[3][10], 92,116, 59,255);

  04c3d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04c42	6b c8 03	 imul	 ecx, eax, 3
  04c45	ba 04 00 00 00	 mov	 edx, 4
  04c4a	6b c2 0a	 imul	 eax, edx, 10
  04c4d	c6 84 01 02 00
	00 00 5c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 92 ; 0000005cH
  04c55	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04c5a	6b c8 03	 imul	 ecx, eax, 3
  04c5d	ba 04 00 00 00	 mov	 edx, 4
  04c62	6b c2 0a	 imul	 eax, edx, 10
  04c65	c6 84 01 01 00
	00 00 74	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 116 ; 00000074H
  04c6d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04c72	6b c8 03	 imul	 ecx, eax, 3
  04c75	ba 04 00 00 00	 mov	 edx, 4
  04c7a	6b c2 0a	 imul	 eax, edx, 10
  04c7d	c6 84 01 00 00
	00 00 3b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 59 ; 0000003bH
  04c85	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04c8a	6b c8 03	 imul	 ecx, eax, 3
  04c8d	ba 04 00 00 00	 mov	 edx, 4
  04c92	6b c2 0a	 imul	 eax, edx, 10
  04c95	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 457  : set_rgb_colour(terrain_colour[3][11], 97,117, 60,255);

  04c9d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04ca2	6b c8 03	 imul	 ecx, eax, 3
  04ca5	ba 04 00 00 00	 mov	 edx, 4
  04caa	6b c2 0b	 imul	 eax, edx, 11
  04cad	c6 84 01 02 00
	00 00 61	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 97 ; 00000061H
  04cb5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04cba	6b c8 03	 imul	 ecx, eax, 3
  04cbd	ba 04 00 00 00	 mov	 edx, 4
  04cc2	6b c2 0b	 imul	 eax, edx, 11
  04cc5	c6 84 01 01 00
	00 00 75	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 117 ; 00000075H
  04ccd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04cd2	6b c8 03	 imul	 ecx, eax, 3
  04cd5	ba 04 00 00 00	 mov	 edx, 4
  04cda	6b c2 0b	 imul	 eax, edx, 11
  04cdd	c6 84 01 00 00
	00 00 3c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 60 ; 0000003cH
  04ce5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04cea	6b c8 03	 imul	 ecx, eax, 3
  04ced	ba 04 00 00 00	 mov	 edx, 4
  04cf2	6b c2 0b	 imul	 eax, edx, 11
  04cf5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 458  : set_rgb_colour(terrain_colour[3][12],102,119, 61,255);

  04cfd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04d02	6b c8 03	 imul	 ecx, eax, 3
  04d05	ba 04 00 00 00	 mov	 edx, 4
  04d0a	6b c2 0c	 imul	 eax, edx, 12
  04d0d	c6 84 01 02 00
	00 00 66	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 102 ; 00000066H
  04d15	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04d1a	6b c8 03	 imul	 ecx, eax, 3
  04d1d	ba 04 00 00 00	 mov	 edx, 4
  04d22	6b c2 0c	 imul	 eax, edx, 12
  04d25	c6 84 01 01 00
	00 00 77	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 119 ; 00000077H
  04d2d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04d32	6b c8 03	 imul	 ecx, eax, 3
  04d35	ba 04 00 00 00	 mov	 edx, 4
  04d3a	6b c2 0c	 imul	 eax, edx, 12
  04d3d	c6 84 01 00 00
	00 00 3d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 61 ; 0000003dH
  04d45	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04d4a	6b c8 03	 imul	 ecx, eax, 3
  04d4d	ba 04 00 00 00	 mov	 edx, 4
  04d52	6b c2 0c	 imul	 eax, edx, 12
  04d55	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 459  : set_rgb_colour(terrain_colour[3][13],106,121, 62,255);

  04d5d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04d62	6b c8 03	 imul	 ecx, eax, 3
  04d65	ba 04 00 00 00	 mov	 edx, 4
  04d6a	6b c2 0d	 imul	 eax, edx, 13
  04d6d	c6 84 01 02 00
	00 00 6a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 106 ; 0000006aH
  04d75	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04d7a	6b c8 03	 imul	 ecx, eax, 3
  04d7d	ba 04 00 00 00	 mov	 edx, 4
  04d82	6b c2 0d	 imul	 eax, edx, 13
  04d85	c6 84 01 01 00
	00 00 79	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 121 ; 00000079H
  04d8d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04d92	6b c8 03	 imul	 ecx, eax, 3
  04d95	ba 04 00 00 00	 mov	 edx, 4
  04d9a	6b c2 0d	 imul	 eax, edx, 13
  04d9d	c6 84 01 00 00
	00 00 3e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 62 ; 0000003eH
  04da5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04daa	6b c8 03	 imul	 ecx, eax, 3
  04dad	ba 04 00 00 00	 mov	 edx, 4
  04db2	6b c2 0d	 imul	 eax, edx, 13
  04db5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 460  : set_rgb_colour(terrain_colour[3][14],111,122, 63,255);

  04dbd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04dc2	6b c8 03	 imul	 ecx, eax, 3
  04dc5	ba 04 00 00 00	 mov	 edx, 4
  04dca	6b c2 0e	 imul	 eax, edx, 14
  04dcd	c6 84 01 02 00
	00 00 6f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 111 ; 0000006fH
  04dd5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04dda	6b c8 03	 imul	 ecx, eax, 3
  04ddd	ba 04 00 00 00	 mov	 edx, 4
  04de2	6b c2 0e	 imul	 eax, edx, 14
  04de5	c6 84 01 01 00
	00 00 7a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 122 ; 0000007aH
  04ded	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04df2	6b c8 03	 imul	 ecx, eax, 3
  04df5	ba 04 00 00 00	 mov	 edx, 4
  04dfa	6b c2 0e	 imul	 eax, edx, 14
  04dfd	c6 84 01 00 00
	00 00 3f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 63 ; 0000003fH
  04e05	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04e0a	6b c8 03	 imul	 ecx, eax, 3
  04e0d	ba 04 00 00 00	 mov	 edx, 4
  04e12	6b c2 0e	 imul	 eax, edx, 14
  04e15	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 461  : set_rgb_colour(terrain_colour[3][15],116,124, 64,255);

  04e1d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04e22	6b c8 03	 imul	 ecx, eax, 3
  04e25	ba 04 00 00 00	 mov	 edx, 4
  04e2a	6b c2 0f	 imul	 eax, edx, 15
  04e2d	c6 84 01 02 00
	00 00 74	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 116 ; 00000074H
  04e35	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04e3a	6b c8 03	 imul	 ecx, eax, 3
  04e3d	ba 04 00 00 00	 mov	 edx, 4
  04e42	6b c2 0f	 imul	 eax, edx, 15
  04e45	c6 84 01 01 00
	00 00 7c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 124 ; 0000007cH
  04e4d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04e52	6b c8 03	 imul	 ecx, eax, 3
  04e55	ba 04 00 00 00	 mov	 edx, 4
  04e5a	6b c2 0f	 imul	 eax, edx, 15
  04e5d	c6 84 01 00 00
	00 00 40	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 64 ; 00000040H
  04e65	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04e6a	6b c8 03	 imul	 ecx, eax, 3
  04e6d	ba 04 00 00 00	 mov	 edx, 4
  04e72	6b c2 0f	 imul	 eax, edx, 15
  04e75	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 462  : set_rgb_colour(terrain_colour[3][16],121,125, 65,255);

  04e7d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04e82	6b c8 03	 imul	 ecx, eax, 3
  04e85	ba 04 00 00 00	 mov	 edx, 4
  04e8a	c1 e2 04	 shl	 edx, 4
  04e8d	c6 84 11 02 00
	00 00 79	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 121 ; 00000079H
  04e95	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04e9a	6b c8 03	 imul	 ecx, eax, 3
  04e9d	ba 04 00 00 00	 mov	 edx, 4
  04ea2	c1 e2 04	 shl	 edx, 4
  04ea5	c6 84 11 01 00
	00 00 7d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 125 ; 0000007dH
  04ead	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04eb2	6b c8 03	 imul	 ecx, eax, 3
  04eb5	ba 04 00 00 00	 mov	 edx, 4
  04eba	c1 e2 04	 shl	 edx, 4
  04ebd	c6 84 11 00 00
	00 00 41	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 65 ; 00000041H
  04ec5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04eca	6b c8 03	 imul	 ecx, eax, 3
  04ecd	ba 04 00 00 00	 mov	 edx, 4
  04ed2	c1 e2 04	 shl	 edx, 4
  04ed5	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 463  : set_rgb_colour(terrain_colour[3][17],126,127, 66,255);

  04edd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04ee2	6b c8 03	 imul	 ecx, eax, 3
  04ee5	ba 04 00 00 00	 mov	 edx, 4
  04eea	6b c2 11	 imul	 eax, edx, 17
  04eed	c6 84 01 02 00
	00 00 7e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 126 ; 0000007eH
  04ef5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04efa	6b c8 03	 imul	 ecx, eax, 3
  04efd	ba 04 00 00 00	 mov	 edx, 4
  04f02	6b c2 11	 imul	 eax, edx, 17
  04f05	c6 84 01 01 00
	00 00 7f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 127 ; 0000007fH
  04f0d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04f12	6b c8 03	 imul	 ecx, eax, 3
  04f15	ba 04 00 00 00	 mov	 edx, 4
  04f1a	6b c2 11	 imul	 eax, edx, 17
  04f1d	c6 84 01 00 00
	00 00 42	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 66 ; 00000042H
  04f25	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04f2a	6b c8 03	 imul	 ecx, eax, 3
  04f2d	ba 04 00 00 00	 mov	 edx, 4
  04f32	6b c2 11	 imul	 eax, edx, 17
  04f35	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 464  : set_rgb_colour(terrain_colour[3][18],129,126, 67,255);

  04f3d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04f42	6b c8 03	 imul	 ecx, eax, 3
  04f45	ba 04 00 00 00	 mov	 edx, 4
  04f4a	6b c2 12	 imul	 eax, edx, 18
  04f4d	c6 84 01 02 00
	00 00 81	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 129 ; 00000081H
  04f55	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04f5a	6b c8 03	 imul	 ecx, eax, 3
  04f5d	ba 04 00 00 00	 mov	 edx, 4
  04f62	6b c2 12	 imul	 eax, edx, 18
  04f65	c6 84 01 01 00
	00 00 7e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 126 ; 0000007eH
  04f6d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04f72	6b c8 03	 imul	 ecx, eax, 3
  04f75	ba 04 00 00 00	 mov	 edx, 4
  04f7a	6b c2 12	 imul	 eax, edx, 18
  04f7d	c6 84 01 00 00
	00 00 43	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 67 ; 00000043H
  04f85	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04f8a	6b c8 03	 imul	 ecx, eax, 3
  04f8d	ba 04 00 00 00	 mov	 edx, 4
  04f92	6b c2 12	 imul	 eax, edx, 18
  04f95	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 465  : set_rgb_colour(terrain_colour[3][19],130,124, 69,255);

  04f9d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04fa2	6b c8 03	 imul	 ecx, eax, 3
  04fa5	ba 04 00 00 00	 mov	 edx, 4
  04faa	6b c2 13	 imul	 eax, edx, 19
  04fad	c6 84 01 02 00
	00 00 82	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 130 ; 00000082H
  04fb5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04fba	6b c8 03	 imul	 ecx, eax, 3
  04fbd	ba 04 00 00 00	 mov	 edx, 4
  04fc2	6b c2 13	 imul	 eax, edx, 19
  04fc5	c6 84 01 01 00
	00 00 7c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 124 ; 0000007cH
  04fcd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04fd2	6b c8 03	 imul	 ecx, eax, 3
  04fd5	ba 04 00 00 00	 mov	 edx, 4
  04fda	6b c2 13	 imul	 eax, edx, 19
  04fdd	c6 84 01 00 00
	00 00 45	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 69 ; 00000045H
  04fe5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  04fea	6b c8 03	 imul	 ecx, eax, 3
  04fed	ba 04 00 00 00	 mov	 edx, 4
  04ff2	6b c2 13	 imul	 eax, edx, 19
  04ff5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 466  : set_rgb_colour(terrain_colour[3][20],132,123, 70,255);

  04ffd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05002	6b c8 03	 imul	 ecx, eax, 3
  05005	ba 04 00 00 00	 mov	 edx, 4
  0500a	6b c2 14	 imul	 eax, edx, 20
  0500d	c6 84 01 02 00
	00 00 84	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 132 ; 00000084H
  05015	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0501a	6b c8 03	 imul	 ecx, eax, 3
  0501d	ba 04 00 00 00	 mov	 edx, 4
  05022	6b c2 14	 imul	 eax, edx, 20
  05025	c6 84 01 01 00
	00 00 7b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 123 ; 0000007bH
  0502d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05032	6b c8 03	 imul	 ecx, eax, 3
  05035	ba 04 00 00 00	 mov	 edx, 4
  0503a	6b c2 14	 imul	 eax, edx, 20
  0503d	c6 84 01 00 00
	00 00 46	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 70 ; 00000046H
  05045	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0504a	6b c8 03	 imul	 ecx, eax, 3
  0504d	ba 04 00 00 00	 mov	 edx, 4
  05052	6b c2 14	 imul	 eax, edx, 20
  05055	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 467  : set_rgb_colour(terrain_colour[3][21],133,121, 71,255);

  0505d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05062	6b c8 03	 imul	 ecx, eax, 3
  05065	ba 04 00 00 00	 mov	 edx, 4
  0506a	6b c2 15	 imul	 eax, edx, 21
  0506d	c6 84 01 02 00
	00 00 85	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 133 ; 00000085H
  05075	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0507a	6b c8 03	 imul	 ecx, eax, 3
  0507d	ba 04 00 00 00	 mov	 edx, 4
  05082	6b c2 15	 imul	 eax, edx, 21
  05085	c6 84 01 01 00
	00 00 79	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 121 ; 00000079H
  0508d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05092	6b c8 03	 imul	 ecx, eax, 3
  05095	ba 04 00 00 00	 mov	 edx, 4
  0509a	6b c2 15	 imul	 eax, edx, 21
  0509d	c6 84 01 00 00
	00 00 47	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 71 ; 00000047H
  050a5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  050aa	6b c8 03	 imul	 ecx, eax, 3
  050ad	ba 04 00 00 00	 mov	 edx, 4
  050b2	6b c2 15	 imul	 eax, edx, 21
  050b5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 468  : set_rgb_colour(terrain_colour[3][22],135,118, 72,255);

  050bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  050c2	6b c8 03	 imul	 ecx, eax, 3
  050c5	ba 04 00 00 00	 mov	 edx, 4
  050ca	6b c2 16	 imul	 eax, edx, 22
  050cd	c6 84 01 02 00
	00 00 87	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 135 ; 00000087H
  050d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  050da	6b c8 03	 imul	 ecx, eax, 3
  050dd	ba 04 00 00 00	 mov	 edx, 4
  050e2	6b c2 16	 imul	 eax, edx, 22
  050e5	c6 84 01 01 00
	00 00 76	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 118 ; 00000076H
  050ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  050f2	6b c8 03	 imul	 ecx, eax, 3
  050f5	ba 04 00 00 00	 mov	 edx, 4
  050fa	6b c2 16	 imul	 eax, edx, 22
  050fd	c6 84 01 00 00
	00 00 48	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 72 ; 00000048H
  05105	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0510a	6b c8 03	 imul	 ecx, eax, 3
  0510d	ba 04 00 00 00	 mov	 edx, 4
  05112	6b c2 16	 imul	 eax, edx, 22
  05115	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 469  : set_rgb_colour(terrain_colour[3][23],137,116, 73,255);

  0511d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05122	6b c8 03	 imul	 ecx, eax, 3
  05125	ba 04 00 00 00	 mov	 edx, 4
  0512a	6b c2 17	 imul	 eax, edx, 23
  0512d	c6 84 01 02 00
	00 00 89	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 137 ; 00000089H
  05135	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0513a	6b c8 03	 imul	 ecx, eax, 3
  0513d	ba 04 00 00 00	 mov	 edx, 4
  05142	6b c2 17	 imul	 eax, edx, 23
  05145	c6 84 01 01 00
	00 00 74	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 116 ; 00000074H
  0514d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05152	6b c8 03	 imul	 ecx, eax, 3
  05155	ba 04 00 00 00	 mov	 edx, 4
  0515a	6b c2 17	 imul	 eax, edx, 23
  0515d	c6 84 01 00 00
	00 00 49	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 73 ; 00000049H
  05165	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0516a	6b c8 03	 imul	 ecx, eax, 3
  0516d	ba 04 00 00 00	 mov	 edx, 4
  05172	6b c2 17	 imul	 eax, edx, 23
  05175	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 470  : set_rgb_colour(terrain_colour[3][24],138,114, 74,255);

  0517d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05182	6b c8 03	 imul	 ecx, eax, 3
  05185	ba 04 00 00 00	 mov	 edx, 4
  0518a	6b c2 18	 imul	 eax, edx, 24
  0518d	c6 84 01 02 00
	00 00 8a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 138 ; 0000008aH
  05195	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0519a	6b c8 03	 imul	 ecx, eax, 3
  0519d	ba 04 00 00 00	 mov	 edx, 4
  051a2	6b c2 18	 imul	 eax, edx, 24
  051a5	c6 84 01 01 00
	00 00 72	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 114 ; 00000072H
  051ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  051b2	6b c8 03	 imul	 ecx, eax, 3
  051b5	ba 04 00 00 00	 mov	 edx, 4
  051ba	6b c2 18	 imul	 eax, edx, 24
  051bd	c6 84 01 00 00
	00 00 4a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 74 ; 0000004aH
  051c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  051ca	6b c8 03	 imul	 ecx, eax, 3
  051cd	ba 04 00 00 00	 mov	 edx, 4
  051d2	6b c2 18	 imul	 eax, edx, 24
  051d5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 471  : set_rgb_colour(terrain_colour[3][25],140,112, 75,255);

  051dd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  051e2	6b c8 03	 imul	 ecx, eax, 3
  051e5	ba 04 00 00 00	 mov	 edx, 4
  051ea	6b c2 19	 imul	 eax, edx, 25
  051ed	c6 84 01 02 00
	00 00 8c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 140 ; 0000008cH
  051f5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  051fa	6b c8 03	 imul	 ecx, eax, 3
  051fd	ba 04 00 00 00	 mov	 edx, 4
  05202	6b c2 19	 imul	 eax, edx, 25
  05205	c6 84 01 01 00
	00 00 70	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 112 ; 00000070H
  0520d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05212	6b c8 03	 imul	 ecx, eax, 3
  05215	ba 04 00 00 00	 mov	 edx, 4
  0521a	6b c2 19	 imul	 eax, edx, 25
  0521d	c6 84 01 00 00
	00 00 4b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 75 ; 0000004bH
  05225	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0522a	6b c8 03	 imul	 ecx, eax, 3
  0522d	ba 04 00 00 00	 mov	 edx, 4
  05232	6b c2 19	 imul	 eax, edx, 25
  05235	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 472  : set_rgb_colour(terrain_colour[3][26],141,110, 76,255);

  0523d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05242	6b c8 03	 imul	 ecx, eax, 3
  05245	ba 04 00 00 00	 mov	 edx, 4
  0524a	6b c2 1a	 imul	 eax, edx, 26
  0524d	c6 84 01 02 00
	00 00 8d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 141 ; 0000008dH
  05255	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0525a	6b c8 03	 imul	 ecx, eax, 3
  0525d	ba 04 00 00 00	 mov	 edx, 4
  05262	6b c2 1a	 imul	 eax, edx, 26
  05265	c6 84 01 01 00
	00 00 6e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 110 ; 0000006eH
  0526d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05272	6b c8 03	 imul	 ecx, eax, 3
  05275	ba 04 00 00 00	 mov	 edx, 4
  0527a	6b c2 1a	 imul	 eax, edx, 26
  0527d	c6 84 01 00 00
	00 00 4c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 76 ; 0000004cH
  05285	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0528a	6b c8 03	 imul	 ecx, eax, 3
  0528d	ba 04 00 00 00	 mov	 edx, 4
  05292	6b c2 1a	 imul	 eax, edx, 26
  05295	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 473  : set_rgb_colour(terrain_colour[3][27],143,107, 77,255);

  0529d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  052a2	6b c8 03	 imul	 ecx, eax, 3
  052a5	ba 04 00 00 00	 mov	 edx, 4
  052aa	6b c2 1b	 imul	 eax, edx, 27
  052ad	c6 84 01 02 00
	00 00 8f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 143 ; 0000008fH
  052b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  052ba	6b c8 03	 imul	 ecx, eax, 3
  052bd	ba 04 00 00 00	 mov	 edx, 4
  052c2	6b c2 1b	 imul	 eax, edx, 27
  052c5	c6 84 01 01 00
	00 00 6b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 107 ; 0000006bH
  052cd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  052d2	6b c8 03	 imul	 ecx, eax, 3
  052d5	ba 04 00 00 00	 mov	 edx, 4
  052da	6b c2 1b	 imul	 eax, edx, 27
  052dd	c6 84 01 00 00
	00 00 4d	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 77 ; 0000004dH
  052e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  052ea	6b c8 03	 imul	 ecx, eax, 3
  052ed	ba 04 00 00 00	 mov	 edx, 4
  052f2	6b c2 1b	 imul	 eax, edx, 27
  052f5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 474  : set_rgb_colour(terrain_colour[3][28],145,105, 78,255);

  052fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05302	6b c8 03	 imul	 ecx, eax, 3
  05305	ba 04 00 00 00	 mov	 edx, 4
  0530a	6b c2 1c	 imul	 eax, edx, 28
  0530d	c6 84 01 02 00
	00 00 91	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 145 ; 00000091H
  05315	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0531a	6b c8 03	 imul	 ecx, eax, 3
  0531d	ba 04 00 00 00	 mov	 edx, 4
  05322	6b c2 1c	 imul	 eax, edx, 28
  05325	c6 84 01 01 00
	00 00 69	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 105 ; 00000069H
  0532d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05332	6b c8 03	 imul	 ecx, eax, 3
  05335	ba 04 00 00 00	 mov	 edx, 4
  0533a	6b c2 1c	 imul	 eax, edx, 28
  0533d	c6 84 01 00 00
	00 00 4e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 78 ; 0000004eH
  05345	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0534a	6b c8 03	 imul	 ecx, eax, 3
  0534d	ba 04 00 00 00	 mov	 edx, 4
  05352	6b c2 1c	 imul	 eax, edx, 28
  05355	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 475  : set_rgb_colour(terrain_colour[3][29],146,102, 79,255);

  0535d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05362	6b c8 03	 imul	 ecx, eax, 3
  05365	ba 04 00 00 00	 mov	 edx, 4
  0536a	6b c2 1d	 imul	 eax, edx, 29
  0536d	c6 84 01 02 00
	00 00 92	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 146 ; 00000092H
  05375	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0537a	6b c8 03	 imul	 ecx, eax, 3
  0537d	ba 04 00 00 00	 mov	 edx, 4
  05382	6b c2 1d	 imul	 eax, edx, 29
  05385	c6 84 01 01 00
	00 00 66	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 102 ; 00000066H
  0538d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05392	6b c8 03	 imul	 ecx, eax, 3
  05395	ba 04 00 00 00	 mov	 edx, 4
  0539a	6b c2 1d	 imul	 eax, edx, 29
  0539d	c6 84 01 00 00
	00 00 4f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 79 ; 0000004fH
  053a5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  053aa	6b c8 03	 imul	 ecx, eax, 3
  053ad	ba 04 00 00 00	 mov	 edx, 4
  053b2	6b c2 1d	 imul	 eax, edx, 29
  053b5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 476  : set_rgb_colour(terrain_colour[3][30],148,100, 80,255);

  053bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  053c2	6b c8 03	 imul	 ecx, eax, 3
  053c5	ba 04 00 00 00	 mov	 edx, 4
  053ca	6b c2 1e	 imul	 eax, edx, 30
  053cd	c6 84 01 02 00
	00 00 94	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 148 ; 00000094H
  053d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  053da	6b c8 03	 imul	 ecx, eax, 3
  053dd	ba 04 00 00 00	 mov	 edx, 4
  053e2	6b c2 1e	 imul	 eax, edx, 30
  053e5	c6 84 01 01 00
	00 00 64	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 100 ; 00000064H
  053ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  053f2	6b c8 03	 imul	 ecx, eax, 3
  053f5	ba 04 00 00 00	 mov	 edx, 4
  053fa	6b c2 1e	 imul	 eax, edx, 30
  053fd	c6 84 01 00 00
	00 00 50	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 80 ; 00000050H
  05405	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0540a	6b c8 03	 imul	 ecx, eax, 3
  0540d	ba 04 00 00 00	 mov	 edx, 4
  05412	6b c2 1e	 imul	 eax, edx, 30
  05415	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 477  : set_rgb_colour(terrain_colour[3][31],149, 97, 81,255);

  0541d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05422	6b c8 03	 imul	 ecx, eax, 3
  05425	ba 04 00 00 00	 mov	 edx, 4
  0542a	6b c2 1f	 imul	 eax, edx, 31
  0542d	c6 84 01 02 00
	00 00 95	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 149 ; 00000095H
  05435	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0543a	6b c8 03	 imul	 ecx, eax, 3
  0543d	ba 04 00 00 00	 mov	 edx, 4
  05442	6b c2 1f	 imul	 eax, edx, 31
  05445	c6 84 01 01 00
	00 00 61	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 97 ; 00000061H
  0544d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05452	6b c8 03	 imul	 ecx, eax, 3
  05455	ba 04 00 00 00	 mov	 edx, 4
  0545a	6b c2 1f	 imul	 eax, edx, 31
  0545d	c6 84 01 00 00
	00 00 51	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 81 ; 00000051H
  05465	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0546a	6b c8 03	 imul	 ecx, eax, 3
  0546d	ba 04 00 00 00	 mov	 edx, 4
  05472	6b c2 1f	 imul	 eax, edx, 31
  05475	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 478  : set_rgb_colour(terrain_colour[3][32],151, 95, 83,255);

  0547d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05482	6b c8 03	 imul	 ecx, eax, 3
  05485	ba 04 00 00 00	 mov	 edx, 4
  0548a	c1 e2 05	 shl	 edx, 5
  0548d	c6 84 11 02 00
	00 00 97	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 151 ; 00000097H
  05495	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0549a	6b c8 03	 imul	 ecx, eax, 3
  0549d	ba 04 00 00 00	 mov	 edx, 4
  054a2	c1 e2 05	 shl	 edx, 5
  054a5	c6 84 11 01 00
	00 00 5f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 95 ; 0000005fH
  054ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  054b2	6b c8 03	 imul	 ecx, eax, 3
  054b5	ba 04 00 00 00	 mov	 edx, 4
  054ba	c1 e2 05	 shl	 edx, 5
  054bd	c6 84 11 00 00
	00 00 53	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 83 ; 00000053H
  054c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  054ca	6b c8 03	 imul	 ecx, eax, 3
  054cd	ba 04 00 00 00	 mov	 edx, 4
  054d2	c1 e2 05	 shl	 edx, 5
  054d5	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 479  : set_rgb_colour(terrain_colour[3][33],152, 92, 84,255);

  054dd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  054e2	6b c8 03	 imul	 ecx, eax, 3
  054e5	ba 04 00 00 00	 mov	 edx, 4
  054ea	6b c2 21	 imul	 eax, edx, 33
  054ed	c6 84 01 02 00
	00 00 98	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 152 ; 00000098H
  054f5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  054fa	6b c8 03	 imul	 ecx, eax, 3
  054fd	ba 04 00 00 00	 mov	 edx, 4
  05502	6b c2 21	 imul	 eax, edx, 33
  05505	c6 84 01 01 00
	00 00 5c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 92 ; 0000005cH
  0550d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05512	6b c8 03	 imul	 ecx, eax, 3
  05515	ba 04 00 00 00	 mov	 edx, 4
  0551a	6b c2 21	 imul	 eax, edx, 33
  0551d	c6 84 01 00 00
	00 00 54	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 84 ; 00000054H
  05525	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0552a	6b c8 03	 imul	 ecx, eax, 3
  0552d	ba 04 00 00 00	 mov	 edx, 4
  05532	6b c2 21	 imul	 eax, edx, 33
  05535	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 480  : set_rgb_colour(terrain_colour[3][34],156, 98, 90,255);

  0553d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05542	6b c8 03	 imul	 ecx, eax, 3
  05545	ba 04 00 00 00	 mov	 edx, 4
  0554a	6b c2 22	 imul	 eax, edx, 34
  0554d	c6 84 01 02 00
	00 00 9c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 156 ; 0000009cH
  05555	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0555a	6b c8 03	 imul	 ecx, eax, 3
  0555d	ba 04 00 00 00	 mov	 edx, 4
  05562	6b c2 22	 imul	 eax, edx, 34
  05565	c6 84 01 01 00
	00 00 62	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 98 ; 00000062H
  0556d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05572	6b c8 03	 imul	 ecx, eax, 3
  05575	ba 04 00 00 00	 mov	 edx, 4
  0557a	6b c2 22	 imul	 eax, edx, 34
  0557d	c6 84 01 00 00
	00 00 5a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 90 ; 0000005aH
  05585	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0558a	6b c8 03	 imul	 ecx, eax, 3
  0558d	ba 04 00 00 00	 mov	 edx, 4
  05592	6b c2 22	 imul	 eax, edx, 34
  05595	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 481  : set_rgb_colour(terrain_colour[3][35],159,104, 96,255);

  0559d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  055a2	6b c8 03	 imul	 ecx, eax, 3
  055a5	ba 04 00 00 00	 mov	 edx, 4
  055aa	6b c2 23	 imul	 eax, edx, 35
  055ad	c6 84 01 02 00
	00 00 9f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 159 ; 0000009fH
  055b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  055ba	6b c8 03	 imul	 ecx, eax, 3
  055bd	ba 04 00 00 00	 mov	 edx, 4
  055c2	6b c2 23	 imul	 eax, edx, 35
  055c5	c6 84 01 01 00
	00 00 68	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 104 ; 00000068H
  055cd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  055d2	6b c8 03	 imul	 ecx, eax, 3
  055d5	ba 04 00 00 00	 mov	 edx, 4
  055da	6b c2 23	 imul	 eax, edx, 35
  055dd	c6 84 01 00 00
	00 00 60	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 96 ; 00000060H
  055e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  055ea	6b c8 03	 imul	 ecx, eax, 3
  055ed	ba 04 00 00 00	 mov	 edx, 4
  055f2	6b c2 23	 imul	 eax, edx, 35
  055f5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 482  : set_rgb_colour(terrain_colour[3][36],162,110,103,255);

  055fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05602	6b c8 03	 imul	 ecx, eax, 3
  05605	ba 04 00 00 00	 mov	 edx, 4
  0560a	6b c2 24	 imul	 eax, edx, 36
  0560d	c6 84 01 02 00
	00 00 a2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 162 ; 000000a2H
  05615	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0561a	6b c8 03	 imul	 ecx, eax, 3
  0561d	ba 04 00 00 00	 mov	 edx, 4
  05622	6b c2 24	 imul	 eax, edx, 36
  05625	c6 84 01 01 00
	00 00 6e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 110 ; 0000006eH
  0562d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05632	6b c8 03	 imul	 ecx, eax, 3
  05635	ba 04 00 00 00	 mov	 edx, 4
  0563a	6b c2 24	 imul	 eax, edx, 36
  0563d	c6 84 01 00 00
	00 00 67	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 103 ; 00000067H
  05645	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0564a	6b c8 03	 imul	 ecx, eax, 3
  0564d	ba 04 00 00 00	 mov	 edx, 4
  05652	6b c2 24	 imul	 eax, edx, 36
  05655	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 483  : set_rgb_colour(terrain_colour[3][37],166,116,110,255);

  0565d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05662	6b c8 03	 imul	 ecx, eax, 3
  05665	ba 04 00 00 00	 mov	 edx, 4
  0566a	6b c2 25	 imul	 eax, edx, 37
  0566d	c6 84 01 02 00
	00 00 a6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 166 ; 000000a6H
  05675	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0567a	6b c8 03	 imul	 ecx, eax, 3
  0567d	ba 04 00 00 00	 mov	 edx, 4
  05682	6b c2 25	 imul	 eax, edx, 37
  05685	c6 84 01 01 00
	00 00 74	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 116 ; 00000074H
  0568d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05692	6b c8 03	 imul	 ecx, eax, 3
  05695	ba 04 00 00 00	 mov	 edx, 4
  0569a	6b c2 25	 imul	 eax, edx, 37
  0569d	c6 84 01 00 00
	00 00 6e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 110 ; 0000006eH
  056a5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  056aa	6b c8 03	 imul	 ecx, eax, 3
  056ad	ba 04 00 00 00	 mov	 edx, 4
  056b2	6b c2 25	 imul	 eax, edx, 37
  056b5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 484  : set_rgb_colour(terrain_colour[3][38],169,123,117,255);

  056bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  056c2	6b c8 03	 imul	 ecx, eax, 3
  056c5	ba 04 00 00 00	 mov	 edx, 4
  056ca	6b c2 26	 imul	 eax, edx, 38
  056cd	c6 84 01 02 00
	00 00 a9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 169 ; 000000a9H
  056d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  056da	6b c8 03	 imul	 ecx, eax, 3
  056dd	ba 04 00 00 00	 mov	 edx, 4
  056e2	6b c2 26	 imul	 eax, edx, 38
  056e5	c6 84 01 01 00
	00 00 7b	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 123 ; 0000007bH
  056ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  056f2	6b c8 03	 imul	 ecx, eax, 3
  056f5	ba 04 00 00 00	 mov	 edx, 4
  056fa	6b c2 26	 imul	 eax, edx, 38
  056fd	c6 84 01 00 00
	00 00 75	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 117 ; 00000075H
  05705	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0570a	6b c8 03	 imul	 ecx, eax, 3
  0570d	ba 04 00 00 00	 mov	 edx, 4
  05712	6b c2 26	 imul	 eax, edx, 38
  05715	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 485  : set_rgb_colour(terrain_colour[3][39],172,129,124,255);

  0571d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05722	6b c8 03	 imul	 ecx, eax, 3
  05725	ba 04 00 00 00	 mov	 edx, 4
  0572a	6b c2 27	 imul	 eax, edx, 39
  0572d	c6 84 01 02 00
	00 00 ac	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 172 ; 000000acH
  05735	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0573a	6b c8 03	 imul	 ecx, eax, 3
  0573d	ba 04 00 00 00	 mov	 edx, 4
  05742	6b c2 27	 imul	 eax, edx, 39
  05745	c6 84 01 01 00
	00 00 81	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 129 ; 00000081H
  0574d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05752	6b c8 03	 imul	 ecx, eax, 3
  05755	ba 04 00 00 00	 mov	 edx, 4
  0575a	6b c2 27	 imul	 eax, edx, 39
  0575d	c6 84 01 00 00
	00 00 7c	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 124 ; 0000007cH
  05765	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0576a	6b c8 03	 imul	 ecx, eax, 3
  0576d	ba 04 00 00 00	 mov	 edx, 4
  05772	6b c2 27	 imul	 eax, edx, 39
  05775	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 486  : set_rgb_colour(terrain_colour[3][40],176,136,131,255);

  0577d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05782	6b c8 03	 imul	 ecx, eax, 3
  05785	ba 04 00 00 00	 mov	 edx, 4
  0578a	6b c2 28	 imul	 eax, edx, 40
  0578d	c6 84 01 02 00
	00 00 b0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 176 ; 000000b0H
  05795	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0579a	6b c8 03	 imul	 ecx, eax, 3
  0579d	ba 04 00 00 00	 mov	 edx, 4
  057a2	6b c2 28	 imul	 eax, edx, 40
  057a5	c6 84 01 01 00
	00 00 88	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 136 ; 00000088H
  057ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  057b2	6b c8 03	 imul	 ecx, eax, 3
  057b5	ba 04 00 00 00	 mov	 edx, 4
  057ba	6b c2 28	 imul	 eax, edx, 40
  057bd	c6 84 01 00 00
	00 00 83	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 131 ; 00000083H
  057c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  057ca	6b c8 03	 imul	 ecx, eax, 3
  057cd	ba 04 00 00 00	 mov	 edx, 4
  057d2	6b c2 28	 imul	 eax, edx, 40
  057d5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 487  : set_rgb_colour(terrain_colour[3][41],179,143,138,255);

  057dd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  057e2	6b c8 03	 imul	 ecx, eax, 3
  057e5	ba 04 00 00 00	 mov	 edx, 4
  057ea	6b c2 29	 imul	 eax, edx, 41
  057ed	c6 84 01 02 00
	00 00 b3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 179 ; 000000b3H
  057f5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  057fa	6b c8 03	 imul	 ecx, eax, 3
  057fd	ba 04 00 00 00	 mov	 edx, 4
  05802	6b c2 29	 imul	 eax, edx, 41
  05805	c6 84 01 01 00
	00 00 8f	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 143 ; 0000008fH
  0580d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05812	6b c8 03	 imul	 ecx, eax, 3
  05815	ba 04 00 00 00	 mov	 edx, 4
  0581a	6b c2 29	 imul	 eax, edx, 41
  0581d	c6 84 01 00 00
	00 00 8a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 138 ; 0000008aH
  05825	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0582a	6b c8 03	 imul	 ecx, eax, 3
  0582d	ba 04 00 00 00	 mov	 edx, 4
  05832	6b c2 29	 imul	 eax, edx, 41
  05835	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 488  : set_rgb_colour(terrain_colour[3][42],182,150,146,255);

  0583d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05842	6b c8 03	 imul	 ecx, eax, 3
  05845	ba 04 00 00 00	 mov	 edx, 4
  0584a	6b c2 2a	 imul	 eax, edx, 42
  0584d	c6 84 01 02 00
	00 00 b6	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 182 ; 000000b6H
  05855	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0585a	6b c8 03	 imul	 ecx, eax, 3
  0585d	ba 04 00 00 00	 mov	 edx, 4
  05862	6b c2 2a	 imul	 eax, edx, 42
  05865	c6 84 01 01 00
	00 00 96	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 150 ; 00000096H
  0586d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05872	6b c8 03	 imul	 ecx, eax, 3
  05875	ba 04 00 00 00	 mov	 edx, 4
  0587a	6b c2 2a	 imul	 eax, edx, 42
  0587d	c6 84 01 00 00
	00 00 92	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 146 ; 00000092H
  05885	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0588a	6b c8 03	 imul	 ecx, eax, 3
  0588d	ba 04 00 00 00	 mov	 edx, 4
  05892	6b c2 2a	 imul	 eax, edx, 42
  05895	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 489  : set_rgb_colour(terrain_colour[3][43],185,158,154,255);

  0589d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  058a2	6b c8 03	 imul	 ecx, eax, 3
  058a5	ba 04 00 00 00	 mov	 edx, 4
  058aa	6b c2 2b	 imul	 eax, edx, 43
  058ad	c6 84 01 02 00
	00 00 b9	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 185 ; 000000b9H
  058b5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  058ba	6b c8 03	 imul	 ecx, eax, 3
  058bd	ba 04 00 00 00	 mov	 edx, 4
  058c2	6b c2 2b	 imul	 eax, edx, 43
  058c5	c6 84 01 01 00
	00 00 9e	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 158 ; 0000009eH
  058cd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  058d2	6b c8 03	 imul	 ecx, eax, 3
  058d5	ba 04 00 00 00	 mov	 edx, 4
  058da	6b c2 2b	 imul	 eax, edx, 43
  058dd	c6 84 01 00 00
	00 00 9a	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 154 ; 0000009aH
  058e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  058ea	6b c8 03	 imul	 ecx, eax, 3
  058ed	ba 04 00 00 00	 mov	 edx, 4
  058f2	6b c2 2b	 imul	 eax, edx, 43
  058f5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 490  : set_rgb_colour(terrain_colour[3][44],189,165,162,255);

  058fd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05902	6b c8 03	 imul	 ecx, eax, 3
  05905	ba 04 00 00 00	 mov	 edx, 4
  0590a	6b c2 2c	 imul	 eax, edx, 44
  0590d	c6 84 01 02 00
	00 00 bd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 189 ; 000000bdH
  05915	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0591a	6b c8 03	 imul	 ecx, eax, 3
  0591d	ba 04 00 00 00	 mov	 edx, 4
  05922	6b c2 2c	 imul	 eax, edx, 44
  05925	c6 84 01 01 00
	00 00 a5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 165 ; 000000a5H
  0592d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05932	6b c8 03	 imul	 ecx, eax, 3
  05935	ba 04 00 00 00	 mov	 edx, 4
  0593a	6b c2 2c	 imul	 eax, edx, 44
  0593d	c6 84 01 00 00
	00 00 a2	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 162 ; 000000a2H
  05945	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0594a	6b c8 03	 imul	 ecx, eax, 3
  0594d	ba 04 00 00 00	 mov	 edx, 4
  05952	6b c2 2c	 imul	 eax, edx, 44
  05955	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 491  : set_rgb_colour(terrain_colour[3][45],192,173,170,255);

  0595d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05962	6b c8 03	 imul	 ecx, eax, 3
  05965	ba 04 00 00 00	 mov	 edx, 4
  0596a	6b c2 2d	 imul	 eax, edx, 45
  0596d	c6 84 01 02 00
	00 00 c0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 192 ; 000000c0H
  05975	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0597a	6b c8 03	 imul	 ecx, eax, 3
  0597d	ba 04 00 00 00	 mov	 edx, 4
  05982	6b c2 2d	 imul	 eax, edx, 45
  05985	c6 84 01 01 00
	00 00 ad	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 173 ; 000000adH
  0598d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05992	6b c8 03	 imul	 ecx, eax, 3
  05995	ba 04 00 00 00	 mov	 edx, 4
  0599a	6b c2 2d	 imul	 eax, edx, 45
  0599d	c6 84 01 00 00
	00 00 aa	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 170 ; 000000aaH
  059a5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  059aa	6b c8 03	 imul	 ecx, eax, 3
  059ad	ba 04 00 00 00	 mov	 edx, 4
  059b2	6b c2 2d	 imul	 eax, edx, 45
  059b5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 492  : set_rgb_colour(terrain_colour[3][46],195,181,179,255);

  059bd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  059c2	6b c8 03	 imul	 ecx, eax, 3
  059c5	ba 04 00 00 00	 mov	 edx, 4
  059ca	6b c2 2e	 imul	 eax, edx, 46
  059cd	c6 84 01 02 00
	00 00 c3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 195 ; 000000c3H
  059d5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  059da	6b c8 03	 imul	 ecx, eax, 3
  059dd	ba 04 00 00 00	 mov	 edx, 4
  059e2	6b c2 2e	 imul	 eax, edx, 46
  059e5	c6 84 01 01 00
	00 00 b5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 181 ; 000000b5H
  059ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  059f2	6b c8 03	 imul	 ecx, eax, 3
  059f5	ba 04 00 00 00	 mov	 edx, 4
  059fa	6b c2 2e	 imul	 eax, edx, 46
  059fd	c6 84 01 00 00
	00 00 b3	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 179 ; 000000b3H
  05a05	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05a0a	6b c8 03	 imul	 ecx, eax, 3
  05a0d	ba 04 00 00 00	 mov	 edx, 4
  05a12	6b c2 2e	 imul	 eax, edx, 46
  05a15	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 493  : set_rgb_colour(terrain_colour[3][47],199,189,187,255);

  05a1d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05a22	6b c8 03	 imul	 ecx, eax, 3
  05a25	ba 04 00 00 00	 mov	 edx, 4
  05a2a	6b c2 2f	 imul	 eax, edx, 47
  05a2d	c6 84 01 02 00
	00 00 c7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 199 ; 000000c7H
  05a35	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05a3a	6b c8 03	 imul	 ecx, eax, 3
  05a3d	ba 04 00 00 00	 mov	 edx, 4
  05a42	6b c2 2f	 imul	 eax, edx, 47
  05a45	c6 84 01 01 00
	00 00 bd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 189 ; 000000bdH
  05a4d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05a52	6b c8 03	 imul	 ecx, eax, 3
  05a55	ba 04 00 00 00	 mov	 edx, 4
  05a5a	6b c2 2f	 imul	 eax, edx, 47
  05a5d	c6 84 01 00 00
	00 00 bb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 187 ; 000000bbH
  05a65	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05a6a	6b c8 03	 imul	 ecx, eax, 3
  05a6d	ba 04 00 00 00	 mov	 edx, 4
  05a72	6b c2 2f	 imul	 eax, edx, 47
  05a75	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 494  : set_rgb_colour(terrain_colour[3][48],202,197,196,255);

  05a7d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05a82	6b c8 03	 imul	 ecx, eax, 3
  05a85	ba 04 00 00 00	 mov	 edx, 4
  05a8a	6b c2 30	 imul	 eax, edx, 48
  05a8d	c6 84 01 02 00
	00 00 ca	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 202 ; 000000caH
  05a95	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05a9a	6b c8 03	 imul	 ecx, eax, 3
  05a9d	ba 04 00 00 00	 mov	 edx, 4
  05aa2	6b c2 30	 imul	 eax, edx, 48
  05aa5	c6 84 01 01 00
	00 00 c5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 197 ; 000000c5H
  05aad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05ab2	6b c8 03	 imul	 ecx, eax, 3
  05ab5	ba 04 00 00 00	 mov	 edx, 4
  05aba	6b c2 30	 imul	 eax, edx, 48
  05abd	c6 84 01 00 00
	00 00 c4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 196 ; 000000c4H
  05ac5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05aca	6b c8 03	 imul	 ecx, eax, 3
  05acd	ba 04 00 00 00	 mov	 edx, 4
  05ad2	6b c2 30	 imul	 eax, edx, 48
  05ad5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 495  : set_rgb_colour(terrain_colour[3][49],205,205,205,255);

  05add	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05ae2	6b c8 03	 imul	 ecx, eax, 3
  05ae5	ba 04 00 00 00	 mov	 edx, 4
  05aea	6b c2 31	 imul	 eax, edx, 49
  05aed	c6 84 01 02 00
	00 00 cd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 205 ; 000000cdH
  05af5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05afa	6b c8 03	 imul	 ecx, eax, 3
  05afd	ba 04 00 00 00	 mov	 edx, 4
  05b02	6b c2 31	 imul	 eax, edx, 49
  05b05	c6 84 01 01 00
	00 00 cd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 205 ; 000000cdH
  05b0d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05b12	6b c8 03	 imul	 ecx, eax, 3
  05b15	ba 04 00 00 00	 mov	 edx, 4
  05b1a	6b c2 31	 imul	 eax, edx, 49
  05b1d	c6 84 01 00 00
	00 00 cd	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 205 ; 000000cdH
  05b25	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05b2a	6b c8 03	 imul	 ecx, eax, 3
  05b2d	ba 04 00 00 00	 mov	 edx, 4
  05b32	6b c2 31	 imul	 eax, edx, 49
  05b35	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 496  : set_rgb_colour(terrain_colour[3][50],208,208,208,255);

  05b3d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05b42	6b c8 03	 imul	 ecx, eax, 3
  05b45	ba 04 00 00 00	 mov	 edx, 4
  05b4a	6b c2 32	 imul	 eax, edx, 50
  05b4d	c6 84 01 02 00
	00 00 d0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 208 ; 000000d0H
  05b55	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05b5a	6b c8 03	 imul	 ecx, eax, 3
  05b5d	ba 04 00 00 00	 mov	 edx, 4
  05b62	6b c2 32	 imul	 eax, edx, 50
  05b65	c6 84 01 01 00
	00 00 d0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 208 ; 000000d0H
  05b6d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05b72	6b c8 03	 imul	 ecx, eax, 3
  05b75	ba 04 00 00 00	 mov	 edx, 4
  05b7a	6b c2 32	 imul	 eax, edx, 50
  05b7d	c6 84 01 00 00
	00 00 d0	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 208 ; 000000d0H
  05b85	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05b8a	6b c8 03	 imul	 ecx, eax, 3
  05b8d	ba 04 00 00 00	 mov	 edx, 4
  05b92	6b c2 32	 imul	 eax, edx, 50
  05b95	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 497  : set_rgb_colour(terrain_colour[3][51],212,212,212,255);

  05b9d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05ba2	6b c8 03	 imul	 ecx, eax, 3
  05ba5	ba 04 00 00 00	 mov	 edx, 4
  05baa	6b c2 33	 imul	 eax, edx, 51
  05bad	c6 84 01 02 00
	00 00 d4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 212 ; 000000d4H
  05bb5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05bba	6b c8 03	 imul	 ecx, eax, 3
  05bbd	ba 04 00 00 00	 mov	 edx, 4
  05bc2	6b c2 33	 imul	 eax, edx, 51
  05bc5	c6 84 01 01 00
	00 00 d4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 212 ; 000000d4H
  05bcd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05bd2	6b c8 03	 imul	 ecx, eax, 3
  05bd5	ba 04 00 00 00	 mov	 edx, 4
  05bda	6b c2 33	 imul	 eax, edx, 51
  05bdd	c6 84 01 00 00
	00 00 d4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 212 ; 000000d4H
  05be5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05bea	6b c8 03	 imul	 ecx, eax, 3
  05bed	ba 04 00 00 00	 mov	 edx, 4
  05bf2	6b c2 33	 imul	 eax, edx, 51
  05bf5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 498  : set_rgb_colour(terrain_colour[3][52],215,215,215,255);

  05bfd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05c02	6b c8 03	 imul	 ecx, eax, 3
  05c05	ba 04 00 00 00	 mov	 edx, 4
  05c0a	6b c2 34	 imul	 eax, edx, 52
  05c0d	c6 84 01 02 00
	00 00 d7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 215 ; 000000d7H
  05c15	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05c1a	6b c8 03	 imul	 ecx, eax, 3
  05c1d	ba 04 00 00 00	 mov	 edx, 4
  05c22	6b c2 34	 imul	 eax, edx, 52
  05c25	c6 84 01 01 00
	00 00 d7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 215 ; 000000d7H
  05c2d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05c32	6b c8 03	 imul	 ecx, eax, 3
  05c35	ba 04 00 00 00	 mov	 edx, 4
  05c3a	6b c2 34	 imul	 eax, edx, 52
  05c3d	c6 84 01 00 00
	00 00 d7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 215 ; 000000d7H
  05c45	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05c4a	6b c8 03	 imul	 ecx, eax, 3
  05c4d	ba 04 00 00 00	 mov	 edx, 4
  05c52	6b c2 34	 imul	 eax, edx, 52
  05c55	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 499  : set_rgb_colour(terrain_colour[3][53],218,218,218,255);

  05c5d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05c62	6b c8 03	 imul	 ecx, eax, 3
  05c65	ba 04 00 00 00	 mov	 edx, 4
  05c6a	6b c2 35	 imul	 eax, edx, 53
  05c6d	c6 84 01 02 00
	00 00 da	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 218 ; 000000daH
  05c75	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05c7a	6b c8 03	 imul	 ecx, eax, 3
  05c7d	ba 04 00 00 00	 mov	 edx, 4
  05c82	6b c2 35	 imul	 eax, edx, 53
  05c85	c6 84 01 01 00
	00 00 da	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 218 ; 000000daH
  05c8d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05c92	6b c8 03	 imul	 ecx, eax, 3
  05c95	ba 04 00 00 00	 mov	 edx, 4
  05c9a	6b c2 35	 imul	 eax, edx, 53
  05c9d	c6 84 01 00 00
	00 00 da	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 218 ; 000000daH
  05ca5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05caa	6b c8 03	 imul	 ecx, eax, 3
  05cad	ba 04 00 00 00	 mov	 edx, 4
  05cb2	6b c2 35	 imul	 eax, edx, 53
  05cb5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 500  : set_rgb_colour(terrain_colour[3][54],222,222,222,255);

  05cbd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05cc2	6b c8 03	 imul	 ecx, eax, 3
  05cc5	ba 04 00 00 00	 mov	 edx, 4
  05cca	6b c2 36	 imul	 eax, edx, 54
  05ccd	c6 84 01 02 00
	00 00 de	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 222 ; 000000deH
  05cd5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05cda	6b c8 03	 imul	 ecx, eax, 3
  05cdd	ba 04 00 00 00	 mov	 edx, 4
  05ce2	6b c2 36	 imul	 eax, edx, 54
  05ce5	c6 84 01 01 00
	00 00 de	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 222 ; 000000deH
  05ced	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05cf2	6b c8 03	 imul	 ecx, eax, 3
  05cf5	ba 04 00 00 00	 mov	 edx, 4
  05cfa	6b c2 36	 imul	 eax, edx, 54
  05cfd	c6 84 01 00 00
	00 00 de	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 222 ; 000000deH
  05d05	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05d0a	6b c8 03	 imul	 ecx, eax, 3
  05d0d	ba 04 00 00 00	 mov	 edx, 4
  05d12	6b c2 36	 imul	 eax, edx, 54
  05d15	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 501  : set_rgb_colour(terrain_colour[3][55],225,225,225,255);

  05d1d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05d22	6b c8 03	 imul	 ecx, eax, 3
  05d25	ba 04 00 00 00	 mov	 edx, 4
  05d2a	6b c2 37	 imul	 eax, edx, 55
  05d2d	c6 84 01 02 00
	00 00 e1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 225 ; 000000e1H
  05d35	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05d3a	6b c8 03	 imul	 ecx, eax, 3
  05d3d	ba 04 00 00 00	 mov	 edx, 4
  05d42	6b c2 37	 imul	 eax, edx, 55
  05d45	c6 84 01 01 00
	00 00 e1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 225 ; 000000e1H
  05d4d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05d52	6b c8 03	 imul	 ecx, eax, 3
  05d55	ba 04 00 00 00	 mov	 edx, 4
  05d5a	6b c2 37	 imul	 eax, edx, 55
  05d5d	c6 84 01 00 00
	00 00 e1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 225 ; 000000e1H
  05d65	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05d6a	6b c8 03	 imul	 ecx, eax, 3
  05d6d	ba 04 00 00 00	 mov	 edx, 4
  05d72	6b c2 37	 imul	 eax, edx, 55
  05d75	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 502  : set_rgb_colour(terrain_colour[3][56],228,228,228,255);

  05d7d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05d82	6b c8 03	 imul	 ecx, eax, 3
  05d85	ba 04 00 00 00	 mov	 edx, 4
  05d8a	6b c2 38	 imul	 eax, edx, 56
  05d8d	c6 84 01 02 00
	00 00 e4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 228 ; 000000e4H
  05d95	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05d9a	6b c8 03	 imul	 ecx, eax, 3
  05d9d	ba 04 00 00 00	 mov	 edx, 4
  05da2	6b c2 38	 imul	 eax, edx, 56
  05da5	c6 84 01 01 00
	00 00 e4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 228 ; 000000e4H
  05dad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05db2	6b c8 03	 imul	 ecx, eax, 3
  05db5	ba 04 00 00 00	 mov	 edx, 4
  05dba	6b c2 38	 imul	 eax, edx, 56
  05dbd	c6 84 01 00 00
	00 00 e4	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 228 ; 000000e4H
  05dc5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05dca	6b c8 03	 imul	 ecx, eax, 3
  05dcd	ba 04 00 00 00	 mov	 edx, 4
  05dd2	6b c2 38	 imul	 eax, edx, 56
  05dd5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 503  : set_rgb_colour(terrain_colour[3][57],231,231,231,255);

  05ddd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05de2	6b c8 03	 imul	 ecx, eax, 3
  05de5	ba 04 00 00 00	 mov	 edx, 4
  05dea	6b c2 39	 imul	 eax, edx, 57
  05ded	c6 84 01 02 00
	00 00 e7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 231 ; 000000e7H
  05df5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05dfa	6b c8 03	 imul	 ecx, eax, 3
  05dfd	ba 04 00 00 00	 mov	 edx, 4
  05e02	6b c2 39	 imul	 eax, edx, 57
  05e05	c6 84 01 01 00
	00 00 e7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 231 ; 000000e7H
  05e0d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05e12	6b c8 03	 imul	 ecx, eax, 3
  05e15	ba 04 00 00 00	 mov	 edx, 4
  05e1a	6b c2 39	 imul	 eax, edx, 57
  05e1d	c6 84 01 00 00
	00 00 e7	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 231 ; 000000e7H
  05e25	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05e2a	6b c8 03	 imul	 ecx, eax, 3
  05e2d	ba 04 00 00 00	 mov	 edx, 4
  05e32	6b c2 39	 imul	 eax, edx, 57
  05e35	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 504  : set_rgb_colour(terrain_colour[3][58],235,235,235,255);

  05e3d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05e42	6b c8 03	 imul	 ecx, eax, 3
  05e45	ba 04 00 00 00	 mov	 edx, 4
  05e4a	6b c2 3a	 imul	 eax, edx, 58
  05e4d	c6 84 01 02 00
	00 00 eb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 235 ; 000000ebH
  05e55	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05e5a	6b c8 03	 imul	 ecx, eax, 3
  05e5d	ba 04 00 00 00	 mov	 edx, 4
  05e62	6b c2 3a	 imul	 eax, edx, 58
  05e65	c6 84 01 01 00
	00 00 eb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 235 ; 000000ebH
  05e6d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05e72	6b c8 03	 imul	 ecx, eax, 3
  05e75	ba 04 00 00 00	 mov	 edx, 4
  05e7a	6b c2 3a	 imul	 eax, edx, 58
  05e7d	c6 84 01 00 00
	00 00 eb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 235 ; 000000ebH
  05e85	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05e8a	6b c8 03	 imul	 ecx, eax, 3
  05e8d	ba 04 00 00 00	 mov	 edx, 4
  05e92	6b c2 3a	 imul	 eax, edx, 58
  05e95	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 505  : set_rgb_colour(terrain_colour[3][59],238,238,238,255);

  05e9d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05ea2	6b c8 03	 imul	 ecx, eax, 3
  05ea5	ba 04 00 00 00	 mov	 edx, 4
  05eaa	6b c2 3b	 imul	 eax, edx, 59
  05ead	c6 84 01 02 00
	00 00 ee	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 238 ; 000000eeH
  05eb5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05eba	6b c8 03	 imul	 ecx, eax, 3
  05ebd	ba 04 00 00 00	 mov	 edx, 4
  05ec2	6b c2 3b	 imul	 eax, edx, 59
  05ec5	c6 84 01 01 00
	00 00 ee	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 238 ; 000000eeH
  05ecd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05ed2	6b c8 03	 imul	 ecx, eax, 3
  05ed5	ba 04 00 00 00	 mov	 edx, 4
  05eda	6b c2 3b	 imul	 eax, edx, 59
  05edd	c6 84 01 00 00
	00 00 ee	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 238 ; 000000eeH
  05ee5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05eea	6b c8 03	 imul	 ecx, eax, 3
  05eed	ba 04 00 00 00	 mov	 edx, 4
  05ef2	6b c2 3b	 imul	 eax, edx, 59
  05ef5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 506  : set_rgb_colour(terrain_colour[3][60],241,241,241,255);

  05efd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05f02	6b c8 03	 imul	 ecx, eax, 3
  05f05	ba 04 00 00 00	 mov	 edx, 4
  05f0a	6b c2 3c	 imul	 eax, edx, 60
  05f0d	c6 84 01 02 00
	00 00 f1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 241 ; 000000f1H
  05f15	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05f1a	6b c8 03	 imul	 ecx, eax, 3
  05f1d	ba 04 00 00 00	 mov	 edx, 4
  05f22	6b c2 3c	 imul	 eax, edx, 60
  05f25	c6 84 01 01 00
	00 00 f1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 241 ; 000000f1H
  05f2d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05f32	6b c8 03	 imul	 ecx, eax, 3
  05f35	ba 04 00 00 00	 mov	 edx, 4
  05f3a	6b c2 3c	 imul	 eax, edx, 60
  05f3d	c6 84 01 00 00
	00 00 f1	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 241 ; 000000f1H
  05f45	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05f4a	6b c8 03	 imul	 ecx, eax, 3
  05f4d	ba 04 00 00 00	 mov	 edx, 4
  05f52	6b c2 3c	 imul	 eax, edx, 60
  05f55	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 507  : set_rgb_colour(terrain_colour[3][61],245,245,245,255);

  05f5d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05f62	6b c8 03	 imul	 ecx, eax, 3
  05f65	ba 04 00 00 00	 mov	 edx, 4
  05f6a	6b c2 3d	 imul	 eax, edx, 61
  05f6d	c6 84 01 02 00
	00 00 f5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 245 ; 000000f5H
  05f75	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05f7a	6b c8 03	 imul	 ecx, eax, 3
  05f7d	ba 04 00 00 00	 mov	 edx, 4
  05f82	6b c2 3d	 imul	 eax, edx, 61
  05f85	c6 84 01 01 00
	00 00 f5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 245 ; 000000f5H
  05f8d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05f92	6b c8 03	 imul	 ecx, eax, 3
  05f95	ba 04 00 00 00	 mov	 edx, 4
  05f9a	6b c2 3d	 imul	 eax, edx, 61
  05f9d	c6 84 01 00 00
	00 00 f5	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 245 ; 000000f5H
  05fa5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05faa	6b c8 03	 imul	 ecx, eax, 3
  05fad	ba 04 00 00 00	 mov	 edx, 4
  05fb2	6b c2 3d	 imul	 eax, edx, 61
  05fb5	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 508  : set_rgb_colour(terrain_colour[3][62],248,248,248,255);

  05fbd	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05fc2	6b c8 03	 imul	 ecx, eax, 3
  05fc5	ba 04 00 00 00	 mov	 edx, 4
  05fca	6b c2 3e	 imul	 eax, edx, 62
  05fcd	c6 84 01 02 00
	00 00 f8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 248 ; 000000f8H
  05fd5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05fda	6b c8 03	 imul	 ecx, eax, 3
  05fdd	ba 04 00 00 00	 mov	 edx, 4
  05fe2	6b c2 3e	 imul	 eax, edx, 62
  05fe5	c6 84 01 01 00
	00 00 f8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 248 ; 000000f8H
  05fed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  05ff2	6b c8 03	 imul	 ecx, eax, 3
  05ff5	ba 04 00 00 00	 mov	 edx, 4
  05ffa	6b c2 3e	 imul	 eax, edx, 62
  05ffd	c6 84 01 00 00
	00 00 f8	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 248 ; 000000f8H
  06005	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0600a	6b c8 03	 imul	 ecx, eax, 3
  0600d	ba 04 00 00 00	 mov	 edx, 4
  06012	6b c2 3e	 imul	 eax, edx, 62
  06015	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 509  : set_rgb_colour(terrain_colour[3][63],251,251,251,255);

  0601d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  06022	6b c8 03	 imul	 ecx, eax, 3
  06025	ba 04 00 00 00	 mov	 edx, 4
  0602a	6b c2 3f	 imul	 eax, edx, 63
  0602d	c6 84 01 02 00
	00 00 fb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+2], 251 ; 000000fbH
  06035	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0603a	6b c8 03	 imul	 ecx, eax, 3
  0603d	ba 04 00 00 00	 mov	 edx, 4
  06042	6b c2 3f	 imul	 eax, edx, 63
  06045	c6 84 01 01 00
	00 00 fb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+1], 251 ; 000000fbH
  0604d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  06052	6b c8 03	 imul	 ecx, eax, 3
  06055	ba 04 00 00 00	 mov	 edx, 4
  0605a	6b c2 3f	 imul	 eax, edx, 63
  0605d	c6 84 01 00 00
	00 00 fb	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax], 251 ; 000000fbH
  06065	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0606a	6b c8 03	 imul	 ecx, eax, 3
  0606d	ba 04 00 00 00	 mov	 edx, 4
  06072	6b c2 3f	 imul	 eax, edx, 63
  06075	c6 84 01 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+eax+3], 255 ; 000000ffH

; 510  : set_rgb_colour(terrain_colour[3][64],255,255,255,255);

  0607d	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  06082	6b c8 03	 imul	 ecx, eax, 3
  06085	ba 04 00 00 00	 mov	 edx, 4
  0608a	c1 e2 06	 shl	 edx, 6
  0608d	c6 84 11 02 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+2], 255 ; 000000ffH
  06095	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0609a	6b c8 03	 imul	 ecx, eax, 3
  0609d	ba 04 00 00 00	 mov	 edx, 4
  060a2	c1 e2 06	 shl	 edx, 6
  060a5	c6 84 11 01 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+1], 255 ; 000000ffH
  060ad	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  060b2	6b c8 03	 imul	 ecx, eax, 3
  060b5	ba 04 00 00 00	 mov	 edx, 4
  060ba	c1 e2 06	 shl	 edx, 6
  060bd	c6 84 11 00 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx], 255 ; 000000ffH
  060c5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  060ca	6b c8 03	 imul	 ecx, eax, 3
  060cd	ba 04 00 00 00	 mov	 edx, 4
  060d2	c1 e2 06	 shl	 edx, 6
  060d5	c6 84 11 03 00
	00 00 ff	 mov	 BYTE PTR ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A[ecx+edx+3], 255 ; 000000ffH

; 511  : 
; 512  : 		// Made with hue: 0.32 - 0.02, value: 0.85 - 0.80, saturation: 0.10 - 0.15
; 513  : set_rgb_colour(paper_colour[ 0],150,200,240,255);

  060dd	b8 04 00 00 00	 mov	 eax, 4
  060e2	6b c8 00	 imul	 ecx, eax, 0
  060e5	c6 81 02 00 00
	00 96		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 150 ; 00000096H
  060ec	b8 04 00 00 00	 mov	 eax, 4
  060f1	6b c8 00	 imul	 ecx, eax, 0
  060f4	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  060fb	b8 04 00 00 00	 mov	 eax, 4
  06100	6b c8 00	 imul	 ecx, eax, 0
  06103	c6 81 00 00 00
	00 f0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 240 ; 000000f0H
  0610a	b8 04 00 00 00	 mov	 eax, 4
  0610f	6b c8 00	 imul	 ecx, eax, 0
  06112	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 514  : set_rgb_colour(paper_colour[ 1],196,216,195,255);

  06119	b8 04 00 00 00	 mov	 eax, 4
  0611e	c1 e0 00	 shl	 eax, 0
  06121	c6 80 02 00 00
	00 c4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+2], 196 ; 000000c4H
  06128	b8 04 00 00 00	 mov	 eax, 4
  0612d	c1 e0 00	 shl	 eax, 0
  06130	c6 80 01 00 00
	00 d8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+1], 216 ; 000000d8H
  06137	b8 04 00 00 00	 mov	 eax, 4
  0613c	c1 e0 00	 shl	 eax, 0
  0613f	c6 80 00 00 00
	00 c3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax], 195 ; 000000c3H
  06146	b8 04 00 00 00	 mov	 eax, 4
  0614b	c1 e0 00	 shl	 eax, 0
  0614e	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 515  : set_rgb_colour(paper_colour[ 2],197,216,194,255);

  06155	b8 04 00 00 00	 mov	 eax, 4
  0615a	d1 e0		 shl	 eax, 1
  0615c	c6 80 02 00 00
	00 c5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+2], 197 ; 000000c5H
  06163	b8 04 00 00 00	 mov	 eax, 4
  06168	d1 e0		 shl	 eax, 1
  0616a	c6 80 01 00 00
	00 d8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+1], 216 ; 000000d8H
  06171	b8 04 00 00 00	 mov	 eax, 4
  06176	d1 e0		 shl	 eax, 1
  06178	c6 80 00 00 00
	00 c2		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax], 194 ; 000000c2H
  0617f	b8 04 00 00 00	 mov	 eax, 4
  06184	d1 e0		 shl	 eax, 1
  06186	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 516  : set_rgb_colour(paper_colour[ 3],197,215,193,255);

  0618d	b8 04 00 00 00	 mov	 eax, 4
  06192	6b c8 03	 imul	 ecx, eax, 3
  06195	c6 81 02 00 00
	00 c5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 197 ; 000000c5H
  0619c	b8 04 00 00 00	 mov	 eax, 4
  061a1	6b c8 03	 imul	 ecx, eax, 3
  061a4	c6 81 01 00 00
	00 d7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 215 ; 000000d7H
  061ab	b8 04 00 00 00	 mov	 eax, 4
  061b0	6b c8 03	 imul	 ecx, eax, 3
  061b3	c6 81 00 00 00
	00 c1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 193 ; 000000c1H
  061ba	b8 04 00 00 00	 mov	 eax, 4
  061bf	6b c8 03	 imul	 ecx, eax, 3
  061c2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 517  : set_rgb_colour(paper_colour[ 4],198,215,192,255);

  061c9	b8 04 00 00 00	 mov	 eax, 4
  061ce	c1 e0 02	 shl	 eax, 2
  061d1	c6 80 02 00 00
	00 c6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+2], 198 ; 000000c6H
  061d8	b8 04 00 00 00	 mov	 eax, 4
  061dd	c1 e0 02	 shl	 eax, 2
  061e0	c6 80 01 00 00
	00 d7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+1], 215 ; 000000d7H
  061e7	b8 04 00 00 00	 mov	 eax, 4
  061ec	c1 e0 02	 shl	 eax, 2
  061ef	c6 80 00 00 00
	00 c0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax], 192 ; 000000c0H
  061f6	b8 04 00 00 00	 mov	 eax, 4
  061fb	c1 e0 02	 shl	 eax, 2
  061fe	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 518  : set_rgb_colour(paper_colour[ 5],199,215,192,255);

  06205	b8 04 00 00 00	 mov	 eax, 4
  0620a	6b c8 05	 imul	 ecx, eax, 5
  0620d	c6 81 02 00 00
	00 c7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 199 ; 000000c7H
  06214	b8 04 00 00 00	 mov	 eax, 4
  06219	6b c8 05	 imul	 ecx, eax, 5
  0621c	c6 81 01 00 00
	00 d7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 215 ; 000000d7H
  06223	b8 04 00 00 00	 mov	 eax, 4
  06228	6b c8 05	 imul	 ecx, eax, 5
  0622b	c6 81 00 00 00
	00 c0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 192 ; 000000c0H
  06232	b8 04 00 00 00	 mov	 eax, 4
  06237	6b c8 05	 imul	 ecx, eax, 5
  0623a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 519  : set_rgb_colour(paper_colour[ 6],199,214,191,255);

  06241	b8 04 00 00 00	 mov	 eax, 4
  06246	6b c8 06	 imul	 ecx, eax, 6
  06249	c6 81 02 00 00
	00 c7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 199 ; 000000c7H
  06250	b8 04 00 00 00	 mov	 eax, 4
  06255	6b c8 06	 imul	 ecx, eax, 6
  06258	c6 81 01 00 00
	00 d6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 214 ; 000000d6H
  0625f	b8 04 00 00 00	 mov	 eax, 4
  06264	6b c8 06	 imul	 ecx, eax, 6
  06267	c6 81 00 00 00
	00 bf		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 191 ; 000000bfH
  0626e	b8 04 00 00 00	 mov	 eax, 4
  06273	6b c8 06	 imul	 ecx, eax, 6
  06276	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 520  : set_rgb_colour(paper_colour[ 7],200,214,190,255);

  0627d	b8 04 00 00 00	 mov	 eax, 4
  06282	6b c8 07	 imul	 ecx, eax, 7
  06285	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  0628c	b8 04 00 00 00	 mov	 eax, 4
  06291	6b c8 07	 imul	 ecx, eax, 7
  06294	c6 81 01 00 00
	00 d6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 214 ; 000000d6H
  0629b	b8 04 00 00 00	 mov	 eax, 4
  062a0	6b c8 07	 imul	 ecx, eax, 7
  062a3	c6 81 00 00 00
	00 be		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 190 ; 000000beH
  062aa	b8 04 00 00 00	 mov	 eax, 4
  062af	6b c8 07	 imul	 ecx, eax, 7
  062b2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 521  : set_rgb_colour(paper_colour[ 8],201,213,190,255);

  062b9	b8 04 00 00 00	 mov	 eax, 4
  062be	c1 e0 03	 shl	 eax, 3
  062c1	c6 80 02 00 00
	00 c9		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+2], 201 ; 000000c9H
  062c8	b8 04 00 00 00	 mov	 eax, 4
  062cd	c1 e0 03	 shl	 eax, 3
  062d0	c6 80 01 00 00
	00 d5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+1], 213 ; 000000d5H
  062d7	b8 04 00 00 00	 mov	 eax, 4
  062dc	c1 e0 03	 shl	 eax, 3
  062df	c6 80 00 00 00
	00 be		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax], 190 ; 000000beH
  062e6	b8 04 00 00 00	 mov	 eax, 4
  062eb	c1 e0 03	 shl	 eax, 3
  062ee	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 522  : set_rgb_colour(paper_colour[ 9],202,213,189,255);

  062f5	b8 04 00 00 00	 mov	 eax, 4
  062fa	6b c8 09	 imul	 ecx, eax, 9
  062fd	c6 81 02 00 00
	00 ca		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 202 ; 000000caH
  06304	b8 04 00 00 00	 mov	 eax, 4
  06309	6b c8 09	 imul	 ecx, eax, 9
  0630c	c6 81 01 00 00
	00 d5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 213 ; 000000d5H
  06313	b8 04 00 00 00	 mov	 eax, 4
  06318	6b c8 09	 imul	 ecx, eax, 9
  0631b	c6 81 00 00 00
	00 bd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 189 ; 000000bdH
  06322	b8 04 00 00 00	 mov	 eax, 4
  06327	6b c8 09	 imul	 ecx, eax, 9
  0632a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 523  : set_rgb_colour(paper_colour[10],203,213,188,255);

  06331	b8 04 00 00 00	 mov	 eax, 4
  06336	6b c8 0a	 imul	 ecx, eax, 10
  06339	c6 81 02 00 00
	00 cb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 203 ; 000000cbH
  06340	b8 04 00 00 00	 mov	 eax, 4
  06345	6b c8 0a	 imul	 ecx, eax, 10
  06348	c6 81 01 00 00
	00 d5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 213 ; 000000d5H
  0634f	b8 04 00 00 00	 mov	 eax, 4
  06354	6b c8 0a	 imul	 ecx, eax, 10
  06357	c6 81 00 00 00
	00 bc		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 188 ; 000000bcH
  0635e	b8 04 00 00 00	 mov	 eax, 4
  06363	6b c8 0a	 imul	 ecx, eax, 10
  06366	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 524  : set_rgb_colour(paper_colour[11],203,212,188,255);

  0636d	b8 04 00 00 00	 mov	 eax, 4
  06372	6b c8 0b	 imul	 ecx, eax, 11
  06375	c6 81 02 00 00
	00 cb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 203 ; 000000cbH
  0637c	b8 04 00 00 00	 mov	 eax, 4
  06381	6b c8 0b	 imul	 ecx, eax, 11
  06384	c6 81 01 00 00
	00 d4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 212 ; 000000d4H
  0638b	b8 04 00 00 00	 mov	 eax, 4
  06390	6b c8 0b	 imul	 ecx, eax, 11
  06393	c6 81 00 00 00
	00 bc		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 188 ; 000000bcH
  0639a	b8 04 00 00 00	 mov	 eax, 4
  0639f	6b c8 0b	 imul	 ecx, eax, 11
  063a2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 525  : set_rgb_colour(paper_colour[12],204,212,187,255);

  063a9	b8 04 00 00 00	 mov	 eax, 4
  063ae	6b c8 0c	 imul	 ecx, eax, 12
  063b1	c6 81 02 00 00
	00 cc		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 204 ; 000000ccH
  063b8	b8 04 00 00 00	 mov	 eax, 4
  063bd	6b c8 0c	 imul	 ecx, eax, 12
  063c0	c6 81 01 00 00
	00 d4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 212 ; 000000d4H
  063c7	b8 04 00 00 00	 mov	 eax, 4
  063cc	6b c8 0c	 imul	 ecx, eax, 12
  063cf	c6 81 00 00 00
	00 bb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 187 ; 000000bbH
  063d6	b8 04 00 00 00	 mov	 eax, 4
  063db	6b c8 0c	 imul	 ecx, eax, 12
  063de	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 526  : set_rgb_colour(paper_colour[13],205,211,186,255);

  063e5	b8 04 00 00 00	 mov	 eax, 4
  063ea	6b c8 0d	 imul	 ecx, eax, 13
  063ed	c6 81 02 00 00
	00 cd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 205 ; 000000cdH
  063f4	b8 04 00 00 00	 mov	 eax, 4
  063f9	6b c8 0d	 imul	 ecx, eax, 13
  063fc	c6 81 01 00 00
	00 d3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 211 ; 000000d3H
  06403	b8 04 00 00 00	 mov	 eax, 4
  06408	6b c8 0d	 imul	 ecx, eax, 13
  0640b	c6 81 00 00 00
	00 ba		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 186 ; 000000baH
  06412	b8 04 00 00 00	 mov	 eax, 4
  06417	6b c8 0d	 imul	 ecx, eax, 13
  0641a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 527  : set_rgb_colour(paper_colour[14],206,211,186,255);

  06421	b8 04 00 00 00	 mov	 eax, 4
  06426	6b c8 0e	 imul	 ecx, eax, 14
  06429	c6 81 02 00 00
	00 ce		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 206 ; 000000ceH
  06430	b8 04 00 00 00	 mov	 eax, 4
  06435	6b c8 0e	 imul	 ecx, eax, 14
  06438	c6 81 01 00 00
	00 d3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 211 ; 000000d3H
  0643f	b8 04 00 00 00	 mov	 eax, 4
  06444	6b c8 0e	 imul	 ecx, eax, 14
  06447	c6 81 00 00 00
	00 ba		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 186 ; 000000baH
  0644e	b8 04 00 00 00	 mov	 eax, 4
  06453	6b c8 0e	 imul	 ecx, eax, 14
  06456	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 528  : set_rgb_colour(paper_colour[15],207,211,185,255);

  0645d	b8 04 00 00 00	 mov	 eax, 4
  06462	6b c8 0f	 imul	 ecx, eax, 15
  06465	c6 81 02 00 00
	00 cf		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 207 ; 000000cfH
  0646c	b8 04 00 00 00	 mov	 eax, 4
  06471	6b c8 0f	 imul	 ecx, eax, 15
  06474	c6 81 01 00 00
	00 d3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 211 ; 000000d3H
  0647b	b8 04 00 00 00	 mov	 eax, 4
  06480	6b c8 0f	 imul	 ecx, eax, 15
  06483	c6 81 00 00 00
	00 b9		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 185 ; 000000b9H
  0648a	b8 04 00 00 00	 mov	 eax, 4
  0648f	6b c8 0f	 imul	 ecx, eax, 15
  06492	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 529  : set_rgb_colour(paper_colour[16],208,210,184,255);

  06499	b8 04 00 00 00	 mov	 eax, 4
  0649e	c1 e0 04	 shl	 eax, 4
  064a1	c6 80 02 00 00
	00 d0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+2], 208 ; 000000d0H
  064a8	b8 04 00 00 00	 mov	 eax, 4
  064ad	c1 e0 04	 shl	 eax, 4
  064b0	c6 80 01 00 00
	00 d2		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+1], 210 ; 000000d2H
  064b7	b8 04 00 00 00	 mov	 eax, 4
  064bc	c1 e0 04	 shl	 eax, 4
  064bf	c6 80 00 00 00
	00 b8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax], 184 ; 000000b8H
  064c6	b8 04 00 00 00	 mov	 eax, 4
  064cb	c1 e0 04	 shl	 eax, 4
  064ce	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 530  : set_rgb_colour(paper_colour[17],209,210,184,255);

  064d5	b8 04 00 00 00	 mov	 eax, 4
  064da	6b c8 11	 imul	 ecx, eax, 17
  064dd	c6 81 02 00 00
	00 d1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 209 ; 000000d1H
  064e4	b8 04 00 00 00	 mov	 eax, 4
  064e9	6b c8 11	 imul	 ecx, eax, 17
  064ec	c6 81 01 00 00
	00 d2		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 210 ; 000000d2H
  064f3	b8 04 00 00 00	 mov	 eax, 4
  064f8	6b c8 11	 imul	 ecx, eax, 17
  064fb	c6 81 00 00 00
	00 b8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 184 ; 000000b8H
  06502	b8 04 00 00 00	 mov	 eax, 4
  06507	6b c8 11	 imul	 ecx, eax, 17
  0650a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 531  : set_rgb_colour(paper_colour[18],209,209,183,255);

  06511	b8 04 00 00 00	 mov	 eax, 4
  06516	6b c8 12	 imul	 ecx, eax, 18
  06519	c6 81 02 00 00
	00 d1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 209 ; 000000d1H
  06520	b8 04 00 00 00	 mov	 eax, 4
  06525	6b c8 12	 imul	 ecx, eax, 18
  06528	c6 81 01 00 00
	00 d1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 209 ; 000000d1H
  0652f	b8 04 00 00 00	 mov	 eax, 4
  06534	6b c8 12	 imul	 ecx, eax, 18
  06537	c6 81 00 00 00
	00 b7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 183 ; 000000b7H
  0653e	b8 04 00 00 00	 mov	 eax, 4
  06543	6b c8 12	 imul	 ecx, eax, 18
  06546	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 532  : set_rgb_colour(paper_colour[19],209,207,182,255);

  0654d	b8 04 00 00 00	 mov	 eax, 4
  06552	6b c8 13	 imul	 ecx, eax, 19
  06555	c6 81 02 00 00
	00 d1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 209 ; 000000d1H
  0655c	b8 04 00 00 00	 mov	 eax, 4
  06561	6b c8 13	 imul	 ecx, eax, 19
  06564	c6 81 01 00 00
	00 cf		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 207 ; 000000cfH
  0656b	b8 04 00 00 00	 mov	 eax, 4
  06570	6b c8 13	 imul	 ecx, eax, 19
  06573	c6 81 00 00 00
	00 b6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 182 ; 000000b6H
  0657a	b8 04 00 00 00	 mov	 eax, 4
  0657f	6b c8 13	 imul	 ecx, eax, 19
  06582	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 533  : set_rgb_colour(paper_colour[20],209,205,182,255);

  06589	b8 04 00 00 00	 mov	 eax, 4
  0658e	6b c8 14	 imul	 ecx, eax, 20
  06591	c6 81 02 00 00
	00 d1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 209 ; 000000d1H
  06598	b8 04 00 00 00	 mov	 eax, 4
  0659d	6b c8 14	 imul	 ecx, eax, 20
  065a0	c6 81 01 00 00
	00 cd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 205 ; 000000cdH
  065a7	b8 04 00 00 00	 mov	 eax, 4
  065ac	6b c8 14	 imul	 ecx, eax, 20
  065af	c6 81 00 00 00
	00 b6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 182 ; 000000b6H
  065b6	b8 04 00 00 00	 mov	 eax, 4
  065bb	6b c8 14	 imul	 ecx, eax, 20
  065be	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 534  : set_rgb_colour(paper_colour[21],208,203,181,255);

  065c5	b8 04 00 00 00	 mov	 eax, 4
  065ca	6b c8 15	 imul	 ecx, eax, 21
  065cd	c6 81 02 00 00
	00 d0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 208 ; 000000d0H
  065d4	b8 04 00 00 00	 mov	 eax, 4
  065d9	6b c8 15	 imul	 ecx, eax, 21
  065dc	c6 81 01 00 00
	00 cb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 203 ; 000000cbH
  065e3	b8 04 00 00 00	 mov	 eax, 4
  065e8	6b c8 15	 imul	 ecx, eax, 21
  065eb	c6 81 00 00 00
	00 b5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 181 ; 000000b5H
  065f2	b8 04 00 00 00	 mov	 eax, 4
  065f7	6b c8 15	 imul	 ecx, eax, 21
  065fa	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 535  : set_rgb_colour(paper_colour[22],208,201,180,255);

  06601	b8 04 00 00 00	 mov	 eax, 4
  06606	6b c8 16	 imul	 ecx, eax, 22
  06609	c6 81 02 00 00
	00 d0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 208 ; 000000d0H
  06610	b8 04 00 00 00	 mov	 eax, 4
  06615	6b c8 16	 imul	 ecx, eax, 22
  06618	c6 81 01 00 00
	00 c9		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 201 ; 000000c9H
  0661f	b8 04 00 00 00	 mov	 eax, 4
  06624	6b c8 16	 imul	 ecx, eax, 22
  06627	c6 81 00 00 00
	00 b4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 180 ; 000000b4H
  0662e	b8 04 00 00 00	 mov	 eax, 4
  06633	6b c8 16	 imul	 ecx, eax, 22
  06636	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 536  : set_rgb_colour(paper_colour[23],207,199,180,255);

  0663d	b8 04 00 00 00	 mov	 eax, 4
  06642	6b c8 17	 imul	 ecx, eax, 23
  06645	c6 81 02 00 00
	00 cf		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 207 ; 000000cfH
  0664c	b8 04 00 00 00	 mov	 eax, 4
  06651	6b c8 17	 imul	 ecx, eax, 23
  06654	c6 81 01 00 00
	00 c7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 199 ; 000000c7H
  0665b	b8 04 00 00 00	 mov	 eax, 4
  06660	6b c8 17	 imul	 ecx, eax, 23
  06663	c6 81 00 00 00
	00 b4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 180 ; 000000b4H
  0666a	b8 04 00 00 00	 mov	 eax, 4
  0666f	6b c8 17	 imul	 ecx, eax, 23
  06672	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 537  : set_rgb_colour(paper_colour[24],207,197,179,255);

  06679	b8 04 00 00 00	 mov	 eax, 4
  0667e	6b c8 18	 imul	 ecx, eax, 24
  06681	c6 81 02 00 00
	00 cf		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 207 ; 000000cfH
  06688	b8 04 00 00 00	 mov	 eax, 4
  0668d	6b c8 18	 imul	 ecx, eax, 24
  06690	c6 81 01 00 00
	00 c5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 197 ; 000000c5H
  06697	b8 04 00 00 00	 mov	 eax, 4
  0669c	6b c8 18	 imul	 ecx, eax, 24
  0669f	c6 81 00 00 00
	00 b3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 179 ; 000000b3H
  066a6	b8 04 00 00 00	 mov	 eax, 4
  066ab	6b c8 18	 imul	 ecx, eax, 24
  066ae	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 538  : set_rgb_colour(paper_colour[25],207,194,178,255);

  066b5	b8 04 00 00 00	 mov	 eax, 4
  066ba	6b c8 19	 imul	 ecx, eax, 25
  066bd	c6 81 02 00 00
	00 cf		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 207 ; 000000cfH
  066c4	b8 04 00 00 00	 mov	 eax, 4
  066c9	6b c8 19	 imul	 ecx, eax, 25
  066cc	c6 81 01 00 00
	00 c2		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 194 ; 000000c2H
  066d3	b8 04 00 00 00	 mov	 eax, 4
  066d8	6b c8 19	 imul	 ecx, eax, 25
  066db	c6 81 00 00 00
	00 b2		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 178 ; 000000b2H
  066e2	b8 04 00 00 00	 mov	 eax, 4
  066e7	6b c8 19	 imul	 ecx, eax, 25
  066ea	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 539  : set_rgb_colour(paper_colour[26],206,192,178,255);

  066f1	b8 04 00 00 00	 mov	 eax, 4
  066f6	6b c8 1a	 imul	 ecx, eax, 26
  066f9	c6 81 02 00 00
	00 ce		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 206 ; 000000ceH
  06700	b8 04 00 00 00	 mov	 eax, 4
  06705	6b c8 1a	 imul	 ecx, eax, 26
  06708	c6 81 01 00 00
	00 c0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 192 ; 000000c0H
  0670f	b8 04 00 00 00	 mov	 eax, 4
  06714	6b c8 1a	 imul	 ecx, eax, 26
  06717	c6 81 00 00 00
	00 b2		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 178 ; 000000b2H
  0671e	b8 04 00 00 00	 mov	 eax, 4
  06723	6b c8 1a	 imul	 ecx, eax, 26
  06726	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 540  : set_rgb_colour(paper_colour[27],206,190,177,255);

  0672d	b8 04 00 00 00	 mov	 eax, 4
  06732	6b c8 1b	 imul	 ecx, eax, 27
  06735	c6 81 02 00 00
	00 ce		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 206 ; 000000ceH
  0673c	b8 04 00 00 00	 mov	 eax, 4
  06741	6b c8 1b	 imul	 ecx, eax, 27
  06744	c6 81 01 00 00
	00 be		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 190 ; 000000beH
  0674b	b8 04 00 00 00	 mov	 eax, 4
  06750	6b c8 1b	 imul	 ecx, eax, 27
  06753	c6 81 00 00 00
	00 b1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 177 ; 000000b1H
  0675a	b8 04 00 00 00	 mov	 eax, 4
  0675f	6b c8 1b	 imul	 ecx, eax, 27
  06762	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 541  : set_rgb_colour(paper_colour[28],205,188,176,255);

  06769	b8 04 00 00 00	 mov	 eax, 4
  0676e	6b c8 1c	 imul	 ecx, eax, 28
  06771	c6 81 02 00 00
	00 cd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 205 ; 000000cdH
  06778	b8 04 00 00 00	 mov	 eax, 4
  0677d	6b c8 1c	 imul	 ecx, eax, 28
  06780	c6 81 01 00 00
	00 bc		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 188 ; 000000bcH
  06787	b8 04 00 00 00	 mov	 eax, 4
  0678c	6b c8 1c	 imul	 ecx, eax, 28
  0678f	c6 81 00 00 00
	00 b0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 176 ; 000000b0H
  06796	b8 04 00 00 00	 mov	 eax, 4
  0679b	6b c8 1c	 imul	 ecx, eax, 28
  0679e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 542  : set_rgb_colour(paper_colour[29],205,186,176,255);

  067a5	b8 04 00 00 00	 mov	 eax, 4
  067aa	6b c8 1d	 imul	 ecx, eax, 29
  067ad	c6 81 02 00 00
	00 cd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 205 ; 000000cdH
  067b4	b8 04 00 00 00	 mov	 eax, 4
  067b9	6b c8 1d	 imul	 ecx, eax, 29
  067bc	c6 81 01 00 00
	00 ba		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 186 ; 000000baH
  067c3	b8 04 00 00 00	 mov	 eax, 4
  067c8	6b c8 1d	 imul	 ecx, eax, 29
  067cb	c6 81 00 00 00
	00 b0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 176 ; 000000b0H
  067d2	b8 04 00 00 00	 mov	 eax, 4
  067d7	6b c8 1d	 imul	 ecx, eax, 29
  067da	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 543  : set_rgb_colour(paper_colour[30],205,183,175,255);

  067e1	b8 04 00 00 00	 mov	 eax, 4
  067e6	6b c8 1e	 imul	 ecx, eax, 30
  067e9	c6 81 02 00 00
	00 cd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 205 ; 000000cdH
  067f0	b8 04 00 00 00	 mov	 eax, 4
  067f5	6b c8 1e	 imul	 ecx, eax, 30
  067f8	c6 81 01 00 00
	00 b7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 183 ; 000000b7H
  067ff	b8 04 00 00 00	 mov	 eax, 4
  06804	6b c8 1e	 imul	 ecx, eax, 30
  06807	c6 81 00 00 00
	00 af		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 175 ; 000000afH
  0680e	b8 04 00 00 00	 mov	 eax, 4
  06813	6b c8 1e	 imul	 ecx, eax, 30
  06816	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 544  : set_rgb_colour(paper_colour[31],204,181,174,255);

  0681d	b8 04 00 00 00	 mov	 eax, 4
  06822	6b c8 1f	 imul	 ecx, eax, 31
  06825	c6 81 02 00 00
	00 cc		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 204 ; 000000ccH
  0682c	b8 04 00 00 00	 mov	 eax, 4
  06831	6b c8 1f	 imul	 ecx, eax, 31
  06834	c6 81 01 00 00
	00 b5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 181 ; 000000b5H
  0683b	b8 04 00 00 00	 mov	 eax, 4
  06840	6b c8 1f	 imul	 ecx, eax, 31
  06843	c6 81 00 00 00
	00 ae		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 174 ; 000000aeH
  0684a	b8 04 00 00 00	 mov	 eax, 4
  0684f	6b c8 1f	 imul	 ecx, eax, 31
  06852	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 545  : set_rgb_colour(paper_colour[32],204,179,174,255);

  06859	b8 04 00 00 00	 mov	 eax, 4
  0685e	c1 e0 05	 shl	 eax, 5
  06861	c6 80 02 00 00
	00 cc		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+2], 204 ; 000000ccH
  06868	b8 04 00 00 00	 mov	 eax, 4
  0686d	c1 e0 05	 shl	 eax, 5
  06870	c6 80 01 00 00
	00 b3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+1], 179 ; 000000b3H
  06877	b8 04 00 00 00	 mov	 eax, 4
  0687c	c1 e0 05	 shl	 eax, 5
  0687f	c6 80 00 00 00
	00 ae		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax], 174 ; 000000aeH
  06886	b8 04 00 00 00	 mov	 eax, 4
  0688b	c1 e0 05	 shl	 eax, 5
  0688e	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 546  : set_rgb_colour(paper_colour[33],203,177,173,255);

  06895	b8 04 00 00 00	 mov	 eax, 4
  0689a	6b c8 21	 imul	 ecx, eax, 33
  0689d	c6 81 02 00 00
	00 cb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 203 ; 000000cbH
  068a4	b8 04 00 00 00	 mov	 eax, 4
  068a9	6b c8 21	 imul	 ecx, eax, 33
  068ac	c6 81 01 00 00
	00 b1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 177 ; 000000b1H
  068b3	b8 04 00 00 00	 mov	 eax, 4
  068b8	6b c8 21	 imul	 ecx, eax, 33
  068bb	c6 81 00 00 00
	00 ad		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 173 ; 000000adH
  068c2	b8 04 00 00 00	 mov	 eax, 4
  068c7	6b c8 21	 imul	 ecx, eax, 33
  068ca	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 547  : set_rgb_colour(paper_colour[34],205,180,176,255);

  068d1	b8 04 00 00 00	 mov	 eax, 4
  068d6	6b c8 22	 imul	 ecx, eax, 34
  068d9	c6 81 02 00 00
	00 cd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 205 ; 000000cdH
  068e0	b8 04 00 00 00	 mov	 eax, 4
  068e5	6b c8 22	 imul	 ecx, eax, 34
  068e8	c6 81 01 00 00
	00 b4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 180 ; 000000b4H
  068ef	b8 04 00 00 00	 mov	 eax, 4
  068f4	6b c8 22	 imul	 ecx, eax, 34
  068f7	c6 81 00 00 00
	00 b0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 176 ; 000000b0H
  068fe	b8 04 00 00 00	 mov	 eax, 4
  06903	6b c8 22	 imul	 ecx, eax, 34
  06906	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 548  : set_rgb_colour(paper_colour[35],207,183,180,255);

  0690d	b8 04 00 00 00	 mov	 eax, 4
  06912	6b c8 23	 imul	 ecx, eax, 35
  06915	c6 81 02 00 00
	00 cf		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 207 ; 000000cfH
  0691c	b8 04 00 00 00	 mov	 eax, 4
  06921	6b c8 23	 imul	 ecx, eax, 35
  06924	c6 81 01 00 00
	00 b7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 183 ; 000000b7H
  0692b	b8 04 00 00 00	 mov	 eax, 4
  06930	6b c8 23	 imul	 ecx, eax, 35
  06933	c6 81 00 00 00
	00 b4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 180 ; 000000b4H
  0693a	b8 04 00 00 00	 mov	 eax, 4
  0693f	6b c8 23	 imul	 ecx, eax, 35
  06942	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 549  : set_rgb_colour(paper_colour[36],208,186,183,255);

  06949	b8 04 00 00 00	 mov	 eax, 4
  0694e	6b c8 24	 imul	 ecx, eax, 36
  06951	c6 81 02 00 00
	00 d0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 208 ; 000000d0H
  06958	b8 04 00 00 00	 mov	 eax, 4
  0695d	6b c8 24	 imul	 ecx, eax, 36
  06960	c6 81 01 00 00
	00 ba		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 186 ; 000000baH
  06967	b8 04 00 00 00	 mov	 eax, 4
  0696c	6b c8 24	 imul	 ecx, eax, 36
  0696f	c6 81 00 00 00
	00 b7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 183 ; 000000b7H
  06976	b8 04 00 00 00	 mov	 eax, 4
  0697b	6b c8 24	 imul	 ecx, eax, 36
  0697e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 550  : set_rgb_colour(paper_colour[37],210,189,186,255);

  06985	b8 04 00 00 00	 mov	 eax, 4
  0698a	6b c8 25	 imul	 ecx, eax, 37
  0698d	c6 81 02 00 00
	00 d2		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 210 ; 000000d2H
  06994	b8 04 00 00 00	 mov	 eax, 4
  06999	6b c8 25	 imul	 ecx, eax, 37
  0699c	c6 81 01 00 00
	00 bd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 189 ; 000000bdH
  069a3	b8 04 00 00 00	 mov	 eax, 4
  069a8	6b c8 25	 imul	 ecx, eax, 37
  069ab	c6 81 00 00 00
	00 ba		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 186 ; 000000baH
  069b2	b8 04 00 00 00	 mov	 eax, 4
  069b7	6b c8 25	 imul	 ecx, eax, 37
  069ba	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 551  : set_rgb_colour(paper_colour[38],212,192,190,255);

  069c1	b8 04 00 00 00	 mov	 eax, 4
  069c6	6b c8 26	 imul	 ecx, eax, 38
  069c9	c6 81 02 00 00
	00 d4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 212 ; 000000d4H
  069d0	b8 04 00 00 00	 mov	 eax, 4
  069d5	6b c8 26	 imul	 ecx, eax, 38
  069d8	c6 81 01 00 00
	00 c0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 192 ; 000000c0H
  069df	b8 04 00 00 00	 mov	 eax, 4
  069e4	6b c8 26	 imul	 ecx, eax, 38
  069e7	c6 81 00 00 00
	00 be		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 190 ; 000000beH
  069ee	b8 04 00 00 00	 mov	 eax, 4
  069f3	6b c8 26	 imul	 ecx, eax, 38
  069f6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 552  : set_rgb_colour(paper_colour[39],213,196,193,255);

  069fd	b8 04 00 00 00	 mov	 eax, 4
  06a02	6b c8 27	 imul	 ecx, eax, 39
  06a05	c6 81 02 00 00
	00 d5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 213 ; 000000d5H
  06a0c	b8 04 00 00 00	 mov	 eax, 4
  06a11	6b c8 27	 imul	 ecx, eax, 39
  06a14	c6 81 01 00 00
	00 c4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 196 ; 000000c4H
  06a1b	b8 04 00 00 00	 mov	 eax, 4
  06a20	6b c8 27	 imul	 ecx, eax, 39
  06a23	c6 81 00 00 00
	00 c1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 193 ; 000000c1H
  06a2a	b8 04 00 00 00	 mov	 eax, 4
  06a2f	6b c8 27	 imul	 ecx, eax, 39
  06a32	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 553  : set_rgb_colour(paper_colour[40],215,199,197,255);

  06a39	b8 04 00 00 00	 mov	 eax, 4
  06a3e	6b c8 28	 imul	 ecx, eax, 40
  06a41	c6 81 02 00 00
	00 d7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 215 ; 000000d7H
  06a48	b8 04 00 00 00	 mov	 eax, 4
  06a4d	6b c8 28	 imul	 ecx, eax, 40
  06a50	c6 81 01 00 00
	00 c7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 199 ; 000000c7H
  06a57	b8 04 00 00 00	 mov	 eax, 4
  06a5c	6b c8 28	 imul	 ecx, eax, 40
  06a5f	c6 81 00 00 00
	00 c5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 197 ; 000000c5H
  06a66	b8 04 00 00 00	 mov	 eax, 4
  06a6b	6b c8 28	 imul	 ecx, eax, 40
  06a6e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 554  : set_rgb_colour(paper_colour[41],217,202,200,255);

  06a75	b8 04 00 00 00	 mov	 eax, 4
  06a7a	6b c8 29	 imul	 ecx, eax, 41
  06a7d	c6 81 02 00 00
	00 d9		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 217 ; 000000d9H
  06a84	b8 04 00 00 00	 mov	 eax, 4
  06a89	6b c8 29	 imul	 ecx, eax, 41
  06a8c	c6 81 01 00 00
	00 ca		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 202 ; 000000caH
  06a93	b8 04 00 00 00	 mov	 eax, 4
  06a98	6b c8 29	 imul	 ecx, eax, 41
  06a9b	c6 81 00 00 00
	00 c8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 200 ; 000000c8H
  06aa2	b8 04 00 00 00	 mov	 eax, 4
  06aa7	6b c8 29	 imul	 ecx, eax, 41
  06aaa	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 555  : set_rgb_colour(paper_colour[42],218,206,204,255);

  06ab1	b8 04 00 00 00	 mov	 eax, 4
  06ab6	6b c8 2a	 imul	 ecx, eax, 42
  06ab9	c6 81 02 00 00
	00 da		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 218 ; 000000daH
  06ac0	b8 04 00 00 00	 mov	 eax, 4
  06ac5	6b c8 2a	 imul	 ecx, eax, 42
  06ac8	c6 81 01 00 00
	00 ce		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 206 ; 000000ceH
  06acf	b8 04 00 00 00	 mov	 eax, 4
  06ad4	6b c8 2a	 imul	 ecx, eax, 42
  06ad7	c6 81 00 00 00
	00 cc		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 204 ; 000000ccH
  06ade	b8 04 00 00 00	 mov	 eax, 4
  06ae3	6b c8 2a	 imul	 ecx, eax, 42
  06ae6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 556  : set_rgb_colour(paper_colour[43],220,209,208,255);

  06aed	b8 04 00 00 00	 mov	 eax, 4
  06af2	6b c8 2b	 imul	 ecx, eax, 43
  06af5	c6 81 02 00 00
	00 dc		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 220 ; 000000dcH
  06afc	b8 04 00 00 00	 mov	 eax, 4
  06b01	6b c8 2b	 imul	 ecx, eax, 43
  06b04	c6 81 01 00 00
	00 d1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 209 ; 000000d1H
  06b0b	b8 04 00 00 00	 mov	 eax, 4
  06b10	6b c8 2b	 imul	 ecx, eax, 43
  06b13	c6 81 00 00 00
	00 d0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 208 ; 000000d0H
  06b1a	b8 04 00 00 00	 mov	 eax, 4
  06b1f	6b c8 2b	 imul	 ecx, eax, 43
  06b22	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 557  : set_rgb_colour(paper_colour[44],222,212,211,255);

  06b29	b8 04 00 00 00	 mov	 eax, 4
  06b2e	6b c8 2c	 imul	 ecx, eax, 44
  06b31	c6 81 02 00 00
	00 de		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 222 ; 000000deH
  06b38	b8 04 00 00 00	 mov	 eax, 4
  06b3d	6b c8 2c	 imul	 ecx, eax, 44
  06b40	c6 81 01 00 00
	00 d4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 212 ; 000000d4H
  06b47	b8 04 00 00 00	 mov	 eax, 4
  06b4c	6b c8 2c	 imul	 ecx, eax, 44
  06b4f	c6 81 00 00 00
	00 d3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 211 ; 000000d3H
  06b56	b8 04 00 00 00	 mov	 eax, 4
  06b5b	6b c8 2c	 imul	 ecx, eax, 44
  06b5e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 558  : set_rgb_colour(paper_colour[45],223,216,215,255);

  06b65	b8 04 00 00 00	 mov	 eax, 4
  06b6a	6b c8 2d	 imul	 ecx, eax, 45
  06b6d	c6 81 02 00 00
	00 df		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 223 ; 000000dfH
  06b74	b8 04 00 00 00	 mov	 eax, 4
  06b79	6b c8 2d	 imul	 ecx, eax, 45
  06b7c	c6 81 01 00 00
	00 d8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 216 ; 000000d8H
  06b83	b8 04 00 00 00	 mov	 eax, 4
  06b88	6b c8 2d	 imul	 ecx, eax, 45
  06b8b	c6 81 00 00 00
	00 d7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 215 ; 000000d7H
  06b92	b8 04 00 00 00	 mov	 eax, 4
  06b97	6b c8 2d	 imul	 ecx, eax, 45
  06b9a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 559  : set_rgb_colour(paper_colour[46],225,219,219,255);

  06ba1	b8 04 00 00 00	 mov	 eax, 4
  06ba6	6b c8 2e	 imul	 ecx, eax, 46
  06ba9	c6 81 02 00 00
	00 e1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 225 ; 000000e1H
  06bb0	b8 04 00 00 00	 mov	 eax, 4
  06bb5	6b c8 2e	 imul	 ecx, eax, 46
  06bb8	c6 81 01 00 00
	00 db		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 219 ; 000000dbH
  06bbf	b8 04 00 00 00	 mov	 eax, 4
  06bc4	6b c8 2e	 imul	 ecx, eax, 46
  06bc7	c6 81 00 00 00
	00 db		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 219 ; 000000dbH
  06bce	b8 04 00 00 00	 mov	 eax, 4
  06bd3	6b c8 2e	 imul	 ecx, eax, 46
  06bd6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 560  : set_rgb_colour(paper_colour[47],227,223,222,255);

  06bdd	b8 04 00 00 00	 mov	 eax, 4
  06be2	6b c8 2f	 imul	 ecx, eax, 47
  06be5	c6 81 02 00 00
	00 e3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 227 ; 000000e3H
  06bec	b8 04 00 00 00	 mov	 eax, 4
  06bf1	6b c8 2f	 imul	 ecx, eax, 47
  06bf4	c6 81 01 00 00
	00 df		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 223 ; 000000dfH
  06bfb	b8 04 00 00 00	 mov	 eax, 4
  06c00	6b c8 2f	 imul	 ecx, eax, 47
  06c03	c6 81 00 00 00
	00 de		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 222 ; 000000deH
  06c0a	b8 04 00 00 00	 mov	 eax, 4
  06c0f	6b c8 2f	 imul	 ecx, eax, 47
  06c12	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 561  : set_rgb_colour(paper_colour[48],228,226,226,255);

  06c19	b8 04 00 00 00	 mov	 eax, 4
  06c1e	6b c8 30	 imul	 ecx, eax, 48
  06c21	c6 81 02 00 00
	00 e4		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 228 ; 000000e4H
  06c28	b8 04 00 00 00	 mov	 eax, 4
  06c2d	6b c8 30	 imul	 ecx, eax, 48
  06c30	c6 81 01 00 00
	00 e2		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 226 ; 000000e2H
  06c37	b8 04 00 00 00	 mov	 eax, 4
  06c3c	6b c8 30	 imul	 ecx, eax, 48
  06c3f	c6 81 00 00 00
	00 e2		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 226 ; 000000e2H
  06c46	b8 04 00 00 00	 mov	 eax, 4
  06c4b	6b c8 30	 imul	 ecx, eax, 48
  06c4e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 562  : set_rgb_colour(paper_colour[49],230,230,230,255);

  06c55	b8 04 00 00 00	 mov	 eax, 4
  06c5a	6b c8 31	 imul	 ecx, eax, 49
  06c5d	c6 81 02 00 00
	00 e6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 230 ; 000000e6H
  06c64	b8 04 00 00 00	 mov	 eax, 4
  06c69	6b c8 31	 imul	 ecx, eax, 49
  06c6c	c6 81 01 00 00
	00 e6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 230 ; 000000e6H
  06c73	b8 04 00 00 00	 mov	 eax, 4
  06c78	6b c8 31	 imul	 ecx, eax, 49
  06c7b	c6 81 00 00 00
	00 e6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 230 ; 000000e6H
  06c82	b8 04 00 00 00	 mov	 eax, 4
  06c87	6b c8 31	 imul	 ecx, eax, 49
  06c8a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 563  : set_rgb_colour(paper_colour[50],231,231,231,255);

  06c91	b8 04 00 00 00	 mov	 eax, 4
  06c96	6b c8 32	 imul	 ecx, eax, 50
  06c99	c6 81 02 00 00
	00 e7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 231 ; 000000e7H
  06ca0	b8 04 00 00 00	 mov	 eax, 4
  06ca5	6b c8 32	 imul	 ecx, eax, 50
  06ca8	c6 81 01 00 00
	00 e7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 231 ; 000000e7H
  06caf	b8 04 00 00 00	 mov	 eax, 4
  06cb4	6b c8 32	 imul	 ecx, eax, 50
  06cb7	c6 81 00 00 00
	00 e7		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 231 ; 000000e7H
  06cbe	b8 04 00 00 00	 mov	 eax, 4
  06cc3	6b c8 32	 imul	 ecx, eax, 50
  06cc6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 564  : set_rgb_colour(paper_colour[51],233,233,233,255);

  06ccd	b8 04 00 00 00	 mov	 eax, 4
  06cd2	6b c8 33	 imul	 ecx, eax, 51
  06cd5	c6 81 02 00 00
	00 e9		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 233 ; 000000e9H
  06cdc	b8 04 00 00 00	 mov	 eax, 4
  06ce1	6b c8 33	 imul	 ecx, eax, 51
  06ce4	c6 81 01 00 00
	00 e9		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 233 ; 000000e9H
  06ceb	b8 04 00 00 00	 mov	 eax, 4
  06cf0	6b c8 33	 imul	 ecx, eax, 51
  06cf3	c6 81 00 00 00
	00 e9		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 233 ; 000000e9H
  06cfa	b8 04 00 00 00	 mov	 eax, 4
  06cff	6b c8 33	 imul	 ecx, eax, 51
  06d02	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 565  : set_rgb_colour(paper_colour[52],235,235,235,255);

  06d09	b8 04 00 00 00	 mov	 eax, 4
  06d0e	6b c8 34	 imul	 ecx, eax, 52
  06d11	c6 81 02 00 00
	00 eb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 235 ; 000000ebH
  06d18	b8 04 00 00 00	 mov	 eax, 4
  06d1d	6b c8 34	 imul	 ecx, eax, 52
  06d20	c6 81 01 00 00
	00 eb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 235 ; 000000ebH
  06d27	b8 04 00 00 00	 mov	 eax, 4
  06d2c	6b c8 34	 imul	 ecx, eax, 52
  06d2f	c6 81 00 00 00
	00 eb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 235 ; 000000ebH
  06d36	b8 04 00 00 00	 mov	 eax, 4
  06d3b	6b c8 34	 imul	 ecx, eax, 52
  06d3e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 566  : set_rgb_colour(paper_colour[53],236,236,236,255);

  06d45	b8 04 00 00 00	 mov	 eax, 4
  06d4a	6b c8 35	 imul	 ecx, eax, 53
  06d4d	c6 81 02 00 00
	00 ec		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 236 ; 000000ecH
  06d54	b8 04 00 00 00	 mov	 eax, 4
  06d59	6b c8 35	 imul	 ecx, eax, 53
  06d5c	c6 81 01 00 00
	00 ec		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 236 ; 000000ecH
  06d63	b8 04 00 00 00	 mov	 eax, 4
  06d68	6b c8 35	 imul	 ecx, eax, 53
  06d6b	c6 81 00 00 00
	00 ec		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 236 ; 000000ecH
  06d72	b8 04 00 00 00	 mov	 eax, 4
  06d77	6b c8 35	 imul	 ecx, eax, 53
  06d7a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 567  : set_rgb_colour(paper_colour[54],238,238,238,255);

  06d81	b8 04 00 00 00	 mov	 eax, 4
  06d86	6b c8 36	 imul	 ecx, eax, 54
  06d89	c6 81 02 00 00
	00 ee		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 238 ; 000000eeH
  06d90	b8 04 00 00 00	 mov	 eax, 4
  06d95	6b c8 36	 imul	 ecx, eax, 54
  06d98	c6 81 01 00 00
	00 ee		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 238 ; 000000eeH
  06d9f	b8 04 00 00 00	 mov	 eax, 4
  06da4	6b c8 36	 imul	 ecx, eax, 54
  06da7	c6 81 00 00 00
	00 ee		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 238 ; 000000eeH
  06dae	b8 04 00 00 00	 mov	 eax, 4
  06db3	6b c8 36	 imul	 ecx, eax, 54
  06db6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 568  : set_rgb_colour(paper_colour[55],240,240,240,255);

  06dbd	b8 04 00 00 00	 mov	 eax, 4
  06dc2	6b c8 37	 imul	 ecx, eax, 55
  06dc5	c6 81 02 00 00
	00 f0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 240 ; 000000f0H
  06dcc	b8 04 00 00 00	 mov	 eax, 4
  06dd1	6b c8 37	 imul	 ecx, eax, 55
  06dd4	c6 81 01 00 00
	00 f0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 240 ; 000000f0H
  06ddb	b8 04 00 00 00	 mov	 eax, 4
  06de0	6b c8 37	 imul	 ecx, eax, 55
  06de3	c6 81 00 00 00
	00 f0		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 240 ; 000000f0H
  06dea	b8 04 00 00 00	 mov	 eax, 4
  06def	6b c8 37	 imul	 ecx, eax, 55
  06df2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 569  : set_rgb_colour(paper_colour[56],241,241,241,255);

  06df9	b8 04 00 00 00	 mov	 eax, 4
  06dfe	6b c8 38	 imul	 ecx, eax, 56
  06e01	c6 81 02 00 00
	00 f1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 241 ; 000000f1H
  06e08	b8 04 00 00 00	 mov	 eax, 4
  06e0d	6b c8 38	 imul	 ecx, eax, 56
  06e10	c6 81 01 00 00
	00 f1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 241 ; 000000f1H
  06e17	b8 04 00 00 00	 mov	 eax, 4
  06e1c	6b c8 38	 imul	 ecx, eax, 56
  06e1f	c6 81 00 00 00
	00 f1		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 241 ; 000000f1H
  06e26	b8 04 00 00 00	 mov	 eax, 4
  06e2b	6b c8 38	 imul	 ecx, eax, 56
  06e2e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 570  : set_rgb_colour(paper_colour[57],243,243,243,255);

  06e35	b8 04 00 00 00	 mov	 eax, 4
  06e3a	6b c8 39	 imul	 ecx, eax, 57
  06e3d	c6 81 02 00 00
	00 f3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 243 ; 000000f3H
  06e44	b8 04 00 00 00	 mov	 eax, 4
  06e49	6b c8 39	 imul	 ecx, eax, 57
  06e4c	c6 81 01 00 00
	00 f3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 243 ; 000000f3H
  06e53	b8 04 00 00 00	 mov	 eax, 4
  06e58	6b c8 39	 imul	 ecx, eax, 57
  06e5b	c6 81 00 00 00
	00 f3		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 243 ; 000000f3H
  06e62	b8 04 00 00 00	 mov	 eax, 4
  06e67	6b c8 39	 imul	 ecx, eax, 57
  06e6a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 571  : set_rgb_colour(paper_colour[58],245,245,245,255);

  06e71	b8 04 00 00 00	 mov	 eax, 4
  06e76	6b c8 3a	 imul	 ecx, eax, 58
  06e79	c6 81 02 00 00
	00 f5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 245 ; 000000f5H
  06e80	b8 04 00 00 00	 mov	 eax, 4
  06e85	6b c8 3a	 imul	 ecx, eax, 58
  06e88	c6 81 01 00 00
	00 f5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 245 ; 000000f5H
  06e8f	b8 04 00 00 00	 mov	 eax, 4
  06e94	6b c8 3a	 imul	 ecx, eax, 58
  06e97	c6 81 00 00 00
	00 f5		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 245 ; 000000f5H
  06e9e	b8 04 00 00 00	 mov	 eax, 4
  06ea3	6b c8 3a	 imul	 ecx, eax, 58
  06ea6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 572  : set_rgb_colour(paper_colour[59],246,246,246,255);

  06ead	b8 04 00 00 00	 mov	 eax, 4
  06eb2	6b c8 3b	 imul	 ecx, eax, 59
  06eb5	c6 81 02 00 00
	00 f6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 246 ; 000000f6H
  06ebc	b8 04 00 00 00	 mov	 eax, 4
  06ec1	6b c8 3b	 imul	 ecx, eax, 59
  06ec4	c6 81 01 00 00
	00 f6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 246 ; 000000f6H
  06ecb	b8 04 00 00 00	 mov	 eax, 4
  06ed0	6b c8 3b	 imul	 ecx, eax, 59
  06ed3	c6 81 00 00 00
	00 f6		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 246 ; 000000f6H
  06eda	b8 04 00 00 00	 mov	 eax, 4
  06edf	6b c8 3b	 imul	 ecx, eax, 59
  06ee2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 573  : set_rgb_colour(paper_colour[60],248,248,248,255);

  06ee9	b8 04 00 00 00	 mov	 eax, 4
  06eee	6b c8 3c	 imul	 ecx, eax, 60
  06ef1	c6 81 02 00 00
	00 f8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 248 ; 000000f8H
  06ef8	b8 04 00 00 00	 mov	 eax, 4
  06efd	6b c8 3c	 imul	 ecx, eax, 60
  06f00	c6 81 01 00 00
	00 f8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 248 ; 000000f8H
  06f07	b8 04 00 00 00	 mov	 eax, 4
  06f0c	6b c8 3c	 imul	 ecx, eax, 60
  06f0f	c6 81 00 00 00
	00 f8		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 248 ; 000000f8H
  06f16	b8 04 00 00 00	 mov	 eax, 4
  06f1b	6b c8 3c	 imul	 ecx, eax, 60
  06f1e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 574  : set_rgb_colour(paper_colour[61],250,250,250,255);

  06f25	b8 04 00 00 00	 mov	 eax, 4
  06f2a	6b c8 3d	 imul	 ecx, eax, 61
  06f2d	c6 81 02 00 00
	00 fa		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 250 ; 000000faH
  06f34	b8 04 00 00 00	 mov	 eax, 4
  06f39	6b c8 3d	 imul	 ecx, eax, 61
  06f3c	c6 81 01 00 00
	00 fa		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 250 ; 000000faH
  06f43	b8 04 00 00 00	 mov	 eax, 4
  06f48	6b c8 3d	 imul	 ecx, eax, 61
  06f4b	c6 81 00 00 00
	00 fa		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 250 ; 000000faH
  06f52	b8 04 00 00 00	 mov	 eax, 4
  06f57	6b c8 3d	 imul	 ecx, eax, 61
  06f5a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 575  : set_rgb_colour(paper_colour[62],251,251,251,255);

  06f61	b8 04 00 00 00	 mov	 eax, 4
  06f66	6b c8 3e	 imul	 ecx, eax, 62
  06f69	c6 81 02 00 00
	00 fb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 251 ; 000000fbH
  06f70	b8 04 00 00 00	 mov	 eax, 4
  06f75	6b c8 3e	 imul	 ecx, eax, 62
  06f78	c6 81 01 00 00
	00 fb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 251 ; 000000fbH
  06f7f	b8 04 00 00 00	 mov	 eax, 4
  06f84	6b c8 3e	 imul	 ecx, eax, 62
  06f87	c6 81 00 00 00
	00 fb		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 251 ; 000000fbH
  06f8e	b8 04 00 00 00	 mov	 eax, 4
  06f93	6b c8 3e	 imul	 ecx, eax, 62
  06f96	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 576  : set_rgb_colour(paper_colour[63],253,253,253,255);

  06f9d	b8 04 00 00 00	 mov	 eax, 4
  06fa2	6b c8 3f	 imul	 ecx, eax, 63
  06fa5	c6 81 02 00 00
	00 fd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+2], 253 ; 000000fdH
  06fac	b8 04 00 00 00	 mov	 eax, 4
  06fb1	6b c8 3f	 imul	 ecx, eax, 63
  06fb4	c6 81 01 00 00
	00 fd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+1], 253 ; 000000fdH
  06fbb	b8 04 00 00 00	 mov	 eax, 4
  06fc0	6b c8 3f	 imul	 ecx, eax, 63
  06fc3	c6 81 00 00 00
	00 fd		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx], 253 ; 000000fdH
  06fca	b8 04 00 00 00	 mov	 eax, 4
  06fcf	6b c8 3f	 imul	 ecx, eax, 63
  06fd2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 577  : set_rgb_colour(paper_colour[64],254,254,254,255);

  06fd9	b8 04 00 00 00	 mov	 eax, 4
  06fde	c1 e0 06	 shl	 eax, 6
  06fe1	c6 80 02 00 00
	00 fe		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+2], 254 ; 000000feH
  06fe8	b8 04 00 00 00	 mov	 eax, 4
  06fed	c1 e0 06	 shl	 eax, 6
  06ff0	c6 80 01 00 00
	00 fe		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+1], 254 ; 000000feH
  06ff7	b8 04 00 00 00	 mov	 eax, 4
  06ffc	c1 e0 06	 shl	 eax, 6
  06fff	c6 80 00 00 00
	00 fe		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax], 254 ; 000000feH
  07006	b8 04 00 00 00	 mov	 eax, 4
  0700b	c1 e0 06	 shl	 eax, 6
  0700e	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?paper_colour@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 578  : 
; 579  : }                                

  07015	5f		 pop	 edi
  07016	5e		 pop	 esi
  07017	5b		 pop	 ebx
  07018	8b e5		 mov	 esp, ebp
  0701a	5d		 pop	 ebp
  0701b	c3		 ret	 0
?Initialise_TSD_render_terrain@@YGXXZ ENDP		; Initialise_TSD_render_terrain
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z
_TEXT	SEGMENT
tv386 = -232						; size = 4
tv313 = -232						; size = 4
$T1 = -228						; size = 4
$T2 = -224						; size = 4
_p3$ = -156						; size = 12
_p2$ = -144						; size = 12
_p1$ = -132						; size = 12
_next_row_start_ptr$ = -120				; size = 4
_this_row_start_ptr$ = -116				; size = 4
_next_row_ptr$ = -112					; size = 4
_this_row_ptr$ = -108					; size = 4
_dz_start$ = -104					; size = 4
_dx_start$ = -100					; size = 4
_dz_grid$ = -96						; size = 4
_dx_grid$ = -92						; size = 4
_dz1$ = -88						; size = 4
_dx1$ = -84						; size = 4
_dz0$ = -80						; size = 4
_dx0$ = -76						; size = 4
_distance$ = -72					; size = 4
_radius$ = -68						; size = 4
_z_max$ = -64						; size = 4
_x_max$ = -60						; size = 4
_z_mid$ = -56						; size = 4
_x_mid$ = -52						; size = 4
_z_min$ = -48						; size = 4
_x_min$ = -44						; size = 4
_contour_granularity_mask$ = -40			; size = 4
_contour_granularity$ = -36				; size = 4
_path_detail_level$ = -32				; size = 4
_z_max_index$ = -28					; size = 4
_x_max_index$ = -24					; size = 4
_z_min_index$ = -20					; size = 4
_x_min_index$ = -16					; size = 4
_row_add_on$ = -12					; size = 4
_z_index$ = -8						; size = 4
_x_index$ = -4						; size = 4
_mfd_env$ = 8						; size = 4
_y_translate$ = 12					; size = 4
_range$ = 16						; size = 4
_scale$ = 20						; size = 4
_position$ = 24						; size = 4
_heading$ = 28						; size = 4
_draw_large_mfd$ = 32					; size = 4
_force_contours$ = 36					; size = 4
?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z PROC ; draw_tsd_contour_map, COMDAT

; 1467 : {                                

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1468 : 	int                           
; 1469 : 		x_index,                   
; 1470 : 		z_index,                   
; 1471 : 		row_add_on,                
; 1472 : 		x_min_index,               
; 1473 : 		z_min_index,               
; 1474 : 		x_max_index,               
; 1475 : 		z_max_index,               
; 1476 : 		path_detail_level,         
; 1477 : 		contour_granularity,       
; 1478 : 		contour_granularity_mask;  
; 1479 :                                  
; 1480 : 	float                         
; 1481 : 		x_min,                     
; 1482 : 		z_min,                     
; 1483 : 		x_mid,                     
; 1484 : 		z_mid,                     
; 1485 : 		x_max,                     
; 1486 : 		z_max,                     
; 1487 : 		radius,                    
; 1488 : 		distance,                  
; 1489 : 		dx0,                       
; 1490 : 		dz0,                       
; 1491 : 		dx1,                       
; 1492 : 		dz1,                       
; 1493 : 		dx_grid,                   
; 1494 : 		dz_grid,                   
; 1495 : 		dx_start,                  
; 1496 : 		dz_start,                  
; 1497 : 		*this_row_ptr,             
; 1498 : 		*next_row_ptr,             
; 1499 : 		*this_row_start_ptr,       
; 1500 : 		*next_row_start_ptr;       
; 1501 :                                  
; 1502 : 	vec3d                         
; 1503 : 		p1,                        
; 1504 : 		p2,                        
; 1505 : 		p3;                        
; 1506 :                                  
; 1507 : 	ASSERT (position);            

  0000c	83 7d 18 00	 cmp	 DWORD PTR _position$[ebp], 0
  00010	75 18		 jne	 SHORT $LN8@draw_tsd_c
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z@4JA
  00017	83 c0 28	 add	 eax, 40			; 00000028H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@HGKHCOEN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_08OAGMDKAF@position@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_tsd_c:

; 1508 :                                  
; 1509 : 	#if OPTIMISE_CONTOURS         
; 1510 :                                  
; 1511 : 	num_contour_loops = 0;        

  0002a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_contour_loops@@3HA, 0

; 1512 :                                  
; 1513 : 	num_contour_lines = 0;        

  00034	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_contour_lines@@3HA, 0

; 1514 :                                  
; 1515 : 	#endif                        
; 1516 : 
; 1517 : 	//                            
; 1518 : 	// rotate map                 
; 1519 : 	//                            
; 1520 :                                  
; 1521 : 	set_2d_window_rotation (mfd_env, heading);

  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	8b 45 08	 mov	 eax, DWORD PTR _mfd_env$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1522 :                                  
; 1523 : 	//                            
; 1524 : 	// get map centre position    
; 1525 : 	//                            
; 1526 :                                  
; 1527 : 	distance = y_translate / scale;

  00052	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_translate$[ebp]
  00057	f3 0f 5e 45 14	 divss	 xmm0, DWORD PTR _scale$[ebp]
  0005c	f3 0f 11 45 b8	 movss	 DWORD PTR _distance$[ebp], xmm0

; 1528 :                                  
; 1529 : 	x_mid = position->x + (distance * sin (heading));

  00061	51		 push	 ecx
  00062	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006c	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00071	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR tv313[ebp]
  00077	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR tv313[ebp]
  0007f	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _distance$[ebp]
  00084	8b 45 18	 mov	 eax, DWORD PTR _position$[ebp]
  00087	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0008b	f3 0f 11 45 cc	 movss	 DWORD PTR _x_mid$[ebp], xmm0

; 1530 : 	z_mid = position->z + (distance * cos (heading));

  00090	51		 push	 ecx
  00091	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  000a0	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR tv386[ebp]
  000a6	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR tv386[ebp]
  000ae	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _distance$[ebp]
  000b3	8b 45 18	 mov	 eax, DWORD PTR _position$[ebp]
  000b6	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  000bb	f3 0f 11 45 c8	 movss	 DWORD PTR _z_mid$[ebp], xmm0

; 1531 :                                  
; 1532 : 	//                            
; 1533 : 	// get map area (increased by one grid, where hypotenuse is approx (x + z))
; 1534 : 	//                            
; 1535 :                                  
; 1536 : 	radius = range + terrain_3d_simple_elevation_x_grid_size + terrain_3d_simple_elevation_z_grid_size;

  000c0	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  000c5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  000cd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size@@3MA
  000d5	f3 0f 11 45 bc	 movss	 DWORD PTR _radius$[ebp], xmm0

; 1537 :                                  
; 1538 : 	x_min = x_mid - radius;       

  000da	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  000df	f3 0f 5c 45 bc	 subss	 xmm0, DWORD PTR _radius$[ebp]
  000e4	f3 0f 11 45 d4	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 1539 : 	z_min = z_mid - radius;       

  000e9	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _z_mid$[ebp]
  000ee	f3 0f 5c 45 bc	 subss	 xmm0, DWORD PTR _radius$[ebp]
  000f3	f3 0f 11 45 d0	 movss	 DWORD PTR _z_min$[ebp], xmm0

; 1540 :                                  
; 1541 : 	x_max = x_mid + radius;       

  000f8	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  000fd	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _radius$[ebp]
  00102	f3 0f 11 45 c4	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 1542 : 	z_max = z_mid + radius;       

  00107	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _z_mid$[ebp]
  0010c	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _radius$[ebp]
  00111	f3 0f 11 45 c0	 movss	 DWORD PTR _z_max$[ebp], xmm0

; 1543 :                                  
; 1544 : 	//                            
; 1545 : 	// clip map area              
; 1546 : 	//                            
; 1547 :                                  
; 1548 : 	x_min = max (x_min, MIN_MAP_X);

  00116	68 24 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+36
  0011b	8d 45 d4	 lea	 eax, DWORD PTR _x_min$[ebp]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00124	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00128	f3 0f 11 45 d4	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 1549 : 	z_min = max (z_min, MIN_MAP_Z);

  0012d	68 2c 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+44
  00132	8d 45 d0	 lea	 eax, DWORD PTR _z_min$[ebp]
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0013b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0013f	f3 0f 11 45 d0	 movss	 DWORD PTR _z_min$[ebp], xmm0

; 1550 :                                  
; 1551 : 	x_max = min (x_max, MAX_MAP_X);

  00144	68 3c 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+60
  00149	8d 45 c4	 lea	 eax, DWORD PTR _x_max$[ebp]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00152	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00156	f3 0f 11 45 c4	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 1552 : 	z_max = min (z_max, MAX_MAP_Z);

  0015b	68 44 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+68
  00160	8d 45 c0	 lea	 eax, DWORD PTR _z_max$[ebp]
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00169	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0016d	f3 0f 11 45 c0	 movss	 DWORD PTR _z_max$[ebp], xmm0

; 1553 :                                  
; 1554 : 	////////////////////////////////////////
; 1555 : 	//                            
; 1556 : 	// DRAW CONTOURS              
; 1557 : 	//                            
; 1558 : 	////////////////////////////////////////
; 1559 :                                  
; 1560 : 	//                            
; 1561 : 	// get simple terrain map indices
; 1562 : 	//                            
; 1563 :                                  
; 1564 : 	convert_float_to_int ((x_min * terrain_3d_simple_elevation_x_grid_size_reciprocal), &x_min_index);

  00172	8d 45 f0	 lea	 eax, DWORD PTR _x_min_index$[ebp]
  00175	50		 push	 eax
  00176	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0017b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size_reciprocal@@3MA
  00183	51		 push	 ecx
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1565 : 	convert_float_to_int ((z_min * terrain_3d_simple_elevation_z_grid_size_reciprocal), &z_min_index);

  0018e	8d 45 ec	 lea	 eax, DWORD PTR _z_min_index$[ebp]
  00191	50		 push	 eax
  00192	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _z_min$[ebp]
  00197	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size_reciprocal@@3MA
  0019f	51		 push	 ecx
  001a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a5	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1566 :                                  
; 1567 : 	convert_float_to_int ((x_max * terrain_3d_simple_elevation_x_grid_size_reciprocal), &x_max_index);

  001aa	8d 45 e8	 lea	 eax, DWORD PTR _x_max_index$[ebp]
  001ad	50		 push	 eax
  001ae	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  001b3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size_reciprocal@@3MA
  001bb	51		 push	 ecx
  001bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c1	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1568 : 	convert_float_to_int ((z_max * terrain_3d_simple_elevation_z_grid_size_reciprocal), &z_max_index);

  001c6	8d 45 e4	 lea	 eax, DWORD PTR _z_max_index$[ebp]
  001c9	50		 push	 eax
  001ca	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  001cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size_reciprocal@@3MA
  001d7	51		 push	 ecx
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1569 :                                  
; 1570 : 	////////////////////////////////////////
; 1571 : 	//                            
; 1572 : 	// contour_granularity: chunks the terrain grid
; 1573 : 	// contour_samples    : culls the number of contour line samples
; 1574 : 	// contour_spacing    : height between contour lines (meters)
; 1575 : 	// path_detail_level  : 0 = highest detail (ie draw all sub-lines)
; 1576 : 	//                            
; 1577 : 	////////////////////////////////////////
; 1578 :                                  
; 1579 : 	////////////////////////////////////////
; 1580 : 	if (range == TSD_ASE_RANGE_2000)

  001e2	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  001e7	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  001ee	9f		 lahf
  001ef	f6 c4 44	 test	 ah, 68			; 00000044H
  001f2	7a 36		 jp	 SHORT $LN9@draw_tsd_c

; 1581 : 	////////////////////////////////////////
; 1582 : 	{                             
; 1583 : 		contour_granularity = 1;   

  001f4	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _contour_granularity$[ebp], 1

; 1584 :                                  
; 1585 : 		contour_samples = 5;       

  001fb	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?contour_samples@@3HA, 5

; 1586 :                                  
; 1587 : 		contour_spacing = 100;     

  00205	c7 05 00 00 00
	00 64 00 00 00	 mov	 DWORD PTR ?contour_spacing@@3HA, 100 ; 00000064H

; 1588 :                                  
; 1589 : 		if (draw_large_mfd)        

  0020f	83 7d 20 00	 cmp	 DWORD PTR _draw_large_mfd$[ebp], 0
  00213	74 09		 je	 SHORT $LN11@draw_tsd_c

; 1590 : 		{                          
; 1591 : 			path_detail_level = 0;  

  00215	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _path_detail_level$[ebp], 0

; 1592 : 		}                          
; 1593 : 		else                       

  0021c	eb 07		 jmp	 SHORT $LN12@draw_tsd_c
$LN11@draw_tsd_c:

; 1594 : 		{                          
; 1595 : 			path_detail_level = 2;  

  0021e	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR _path_detail_level$[ebp], 2
$LN12@draw_tsd_c:

; 1596 : 		}                          

  00225	e9 62 01 00 00	 jmp	 $LN26@draw_tsd_c
$LN9@draw_tsd_c:

; 1597 : 	}                             
; 1598 : 	////////////////////////////////////////
; 1599 : 	else if (range == TSD_ASE_RANGE_5000)

  0022a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  0022f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00236	9f		 lahf
  00237	f6 c4 44	 test	 ah, 68			; 00000044H
  0023a	7a 47		 jp	 SHORT $LN13@draw_tsd_c

; 1600 : 	////////////////////////////////////////
; 1601 : 	{                             
; 1602 : 		if (draw_large_mfd)        

  0023c	83 7d 20 00	 cmp	 DWORD PTR _draw_large_mfd$[ebp], 0
  00240	74 1a		 je	 SHORT $LN15@draw_tsd_c

; 1603 : 		{                          
; 1604 : 			contour_granularity = 1;

  00242	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _contour_granularity$[ebp], 1

; 1605 :                                  
; 1606 : 			contour_samples = 10;   

  00249	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?contour_samples@@3HA, 10 ; 0000000aH

; 1607 :                                  
; 1608 : 			path_detail_level = 0;  

  00253	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _path_detail_level$[ebp], 0

; 1609 : 		}                          
; 1610 : 		else                       

  0025a	eb 18		 jmp	 SHORT $LN16@draw_tsd_c
$LN15@draw_tsd_c:

; 1611 : 		{                          
; 1612 : 			contour_granularity = 2;

  0025c	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _contour_granularity$[ebp], 2

; 1613 :                                  
; 1614 : 			contour_samples = 10;   

  00263	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?contour_samples@@3HA, 10 ; 0000000aH

; 1615 :                                  
; 1616 : 			path_detail_level = 2;  

  0026d	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR _path_detail_level$[ebp], 2
$LN16@draw_tsd_c:

; 1617 : 		}                          
; 1618 :                                  
; 1619 : 		contour_spacing = 100;     

  00274	c7 05 00 00 00
	00 64 00 00 00	 mov	 DWORD PTR ?contour_spacing@@3HA, 100 ; 00000064H
  0027e	e9 09 01 00 00	 jmp	 $LN26@draw_tsd_c
$LN13@draw_tsd_c:

; 1620 : 	}                             
; 1621 : 	////////////////////////////////////////
; 1622 : 	else if (range == TSD_ASE_RANGE_10000)

  00283	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  00288	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0028f	9f		 lahf
  00290	f6 c4 44	 test	 ah, 68			; 00000044H
  00293	7a 47		 jp	 SHORT $LN17@draw_tsd_c

; 1623 : 	////////////////////////////////////////
; 1624 : 	{                             
; 1625 : 		if (draw_large_mfd)        

  00295	83 7d 20 00	 cmp	 DWORD PTR _draw_large_mfd$[ebp], 0
  00299	74 1a		 je	 SHORT $LN19@draw_tsd_c

; 1626 : 		{                          
; 1627 : 			contour_granularity = 2;

  0029b	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _contour_granularity$[ebp], 2

; 1628 :                                  
; 1629 : 			contour_samples = 10;   

  002a2	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?contour_samples@@3HA, 10 ; 0000000aH

; 1630 :                                  
; 1631 : 			path_detail_level = 1;  

  002ac	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _path_detail_level$[ebp], 1

; 1632 : 		}                          
; 1633 : 		else                       

  002b3	eb 18		 jmp	 SHORT $LN20@draw_tsd_c
$LN19@draw_tsd_c:

; 1634 : 		{                          
; 1635 : 			contour_granularity = 4;

  002b5	c7 45 dc 04 00
	00 00		 mov	 DWORD PTR _contour_granularity$[ebp], 4

; 1636 :                                  
; 1637 : 			contour_samples = 20;   

  002bc	c7 05 00 00 00
	00 14 00 00 00	 mov	 DWORD PTR ?contour_samples@@3HA, 20 ; 00000014H

; 1638 :                                  
; 1639 : 			path_detail_level = 3;  

  002c6	c7 45 e0 03 00
	00 00		 mov	 DWORD PTR _path_detail_level$[ebp], 3
$LN20@draw_tsd_c:

; 1640 : 		}                          
; 1641 :                                  
; 1642 : 		contour_spacing = 100;     

  002cd	c7 05 00 00 00
	00 64 00 00 00	 mov	 DWORD PTR ?contour_spacing@@3HA, 100 ; 00000064H
  002d7	e9 b0 00 00 00	 jmp	 $LN26@draw_tsd_c
$LN17@draw_tsd_c:

; 1643 : 	}                             
; 1644 :                                  
; 1645 : 	////////////////////////////////////////
; 1646 : 	else if (range == TSD_ASE_RANGE_25000)

  002dc	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  002e1	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  002e8	9f		 lahf
  002e9	f6 c4 44	 test	 ah, 68			; 00000044H
  002ec	7a 4e		 jp	 SHORT $LN21@draw_tsd_c

; 1647 : 	////////////////////////////////////////
; 1648 : 	{                             
; 1649 : 		if (draw_large_mfd)        

  002ee	83 7d 20 00	 cmp	 DWORD PTR _draw_large_mfd$[ebp], 0
  002f2	74 1a		 je	 SHORT $LN23@draw_tsd_c

; 1650 : 		{                          
; 1651 : 			contour_granularity = 4;

  002f4	c7 45 dc 04 00
	00 00		 mov	 DWORD PTR _contour_granularity$[ebp], 4

; 1652 :                                  
; 1653 : 			contour_samples = 10;   

  002fb	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?contour_samples@@3HA, 10 ; 0000000aH

; 1654 :                                  
; 1655 : 			path_detail_level = 2;  

  00305	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR _path_detail_level$[ebp], 2

; 1656 : 		}                          
; 1657 : 		else                       

  0030c	eb 18		 jmp	 SHORT $LN24@draw_tsd_c
$LN23@draw_tsd_c:

; 1658 : 		{                          
; 1659 : 			contour_granularity = 8;

  0030e	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR _contour_granularity$[ebp], 8

; 1660 :                                  
; 1661 : 			contour_samples = 15;   

  00315	c7 05 00 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?contour_samples@@3HA, 15 ; 0000000fH

; 1662 :                                  
; 1663 : 			path_detail_level = 4;  

  0031f	c7 45 e0 04 00
	00 00		 mov	 DWORD PTR _path_detail_level$[ebp], 4
$LN24@draw_tsd_c:

; 1664 : 		}                          
; 1665 :                                  
; 1666 : 		contour_spacing = 250;

  00326	c7 05 00 00 00
	00 fa 00 00 00	 mov	 DWORD PTR ?contour_spacing@@3HA, 250 ; 000000faH

; 1667 : 		contour_spacing = 100;     

  00330	c7 05 00 00 00
	00 64 00 00 00	 mov	 DWORD PTR ?contour_spacing@@3HA, 100 ; 00000064H
  0033a	eb 50		 jmp	 SHORT $LN26@draw_tsd_c
$LN21@draw_tsd_c:

; 1668 : 	}                             
; 1669 : 	else if (range == HIND_MOVING_MAP_RANGE_50000)

  0033c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  00341	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@47435000
  00348	9f		 lahf
  00349	f6 c4 44	 test	 ah, 68			; 00000044H
  0034c	7a 24		 jp	 SHORT $LN25@draw_tsd_c

; 1670 : 	{
; 1671 : 		contour_granularity = 1;

  0034e	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _contour_granularity$[ebp], 1

; 1672 : 		                                 
; 1673 : 		contour_samples = 5;

  00355	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?contour_samples@@3HA, 5

; 1674 : 		                                 
; 1675 : 		path_detail_level = 0;

  0035f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _path_detail_level$[ebp], 0

; 1676 : 		
; 1677 : 		contour_spacing = 75;

  00366	c7 05 00 00 00
	00 4b 00 00 00	 mov	 DWORD PTR ?contour_spacing@@3HA, 75 ; 0000004bH

; 1678 : 	}
; 1679 : 	////////////////////////////////////////
; 1680 : 	else                          

  00370	eb 1a		 jmp	 SHORT $LN26@draw_tsd_c
$LN25@draw_tsd_c:

; 1681 : 	///////////////////////////////////////
; 1682 : 	{                             
; 1683 : 		debug_fatal ("Unknown TSD/ASE range %.2f", range);

  00372	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00377	83 ec 08	 sub	 esp, 8
  0037a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0037f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HBNIAJMP@Unknown?5TSD?1ASE?5range?5?$CF?42f@
  00384	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00389	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN26@draw_tsd_c:

; 1684 : 	}
; 1685 : 	//VJ 030423 TSD render mod    
; 1686 : 	if (force_contours || (tsd_render_mode != TSD_RENDER_RELIEF_MODE && tsd_render_mode != TSD_RENDER_SHADED_RELIEF_MODE))

  0038c	83 7d 24 00	 cmp	 DWORD PTR _force_contours$[ebp], 0
  00390	75 1a		 jne	 SHORT $LN28@draw_tsd_c
  00392	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 3 ; tsd_render_mode
  00399	0f 84 30 03 00
	00		 je	 $LN27@draw_tsd_c
  0039f	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 5 ; tsd_render_mode
  003a6	0f 84 23 03 00
	00		 je	 $LN27@draw_tsd_c
$LN28@draw_tsd_c:

; 1687 : 	{                             
; 1688 :                                  
; 1689 : 		contour_spacing /= contour_samples;

  003ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_spacing@@3HA
  003b1	99		 cdq
  003b2	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?contour_samples@@3HA
  003b8	a3 00 00 00 00	 mov	 DWORD PTR ?contour_spacing@@3HA, eax

; 1690 :                                  
; 1691 : 		contour_granularity_mask = ~(contour_granularity - 1);

  003bd	8b 45 dc	 mov	 eax, DWORD PTR _contour_granularity$[ebp]
  003c0	83 e8 01	 sub	 eax, 1
  003c3	f7 d0		 not	 eax
  003c5	89 45 d8	 mov	 DWORD PTR _contour_granularity_mask$[ebp], eax

; 1692 :                                  
; 1693 : 		//                         
; 1694 : 		// scan map                
; 1695 : 		//                         
; 1696 :                                  
; 1697 : 		x_min_index &= contour_granularity_mask;

  003c8	8b 45 f0	 mov	 eax, DWORD PTR _x_min_index$[ebp]
  003cb	23 45 d8	 and	 eax, DWORD PTR _contour_granularity_mask$[ebp]
  003ce	89 45 f0	 mov	 DWORD PTR _x_min_index$[ebp], eax

; 1698 : 		z_min_index &= contour_granularity_mask;

  003d1	8b 45 ec	 mov	 eax, DWORD PTR _z_min_index$[ebp]
  003d4	23 45 d8	 and	 eax, DWORD PTR _contour_granularity_mask$[ebp]
  003d7	89 45 ec	 mov	 DWORD PTR _z_min_index$[ebp], eax

; 1699 :                                  
; 1700 : 		x_max_index += contour_granularity - 1;

  003da	8b 45 dc	 mov	 eax, DWORD PTR _contour_granularity$[ebp]
  003dd	8b 4d e8	 mov	 ecx, DWORD PTR _x_max_index$[ebp]
  003e0	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  003e4	89 55 e8	 mov	 DWORD PTR _x_max_index$[ebp], edx

; 1701 : 		z_max_index += contour_granularity - 1;

  003e7	8b 45 dc	 mov	 eax, DWORD PTR _contour_granularity$[ebp]
  003ea	8b 4d e4	 mov	 ecx, DWORD PTR _z_max_index$[ebp]
  003ed	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  003f1	89 55 e4	 mov	 DWORD PTR _z_max_index$[ebp], edx

; 1702 :                                  
; 1703 : 		x_max_index &= contour_granularity_mask;

  003f4	8b 45 e8	 mov	 eax, DWORD PTR _x_max_index$[ebp]
  003f7	23 45 d8	 and	 eax, DWORD PTR _contour_granularity_mask$[ebp]
  003fa	89 45 e8	 mov	 DWORD PTR _x_max_index$[ebp], eax

; 1704 : 		z_max_index &= contour_granularity_mask;

  003fd	8b 45 e4	 mov	 eax, DWORD PTR _z_max_index$[ebp]
  00400	23 45 d8	 and	 eax, DWORD PTR _contour_granularity_mask$[ebp]
  00403	89 45 e4	 mov	 DWORD PTR _z_max_index$[ebp], eax

; 1705 :                                  
; 1706 : 		if (x_max_index >= terrain_3d_simple_elevation_width)

  00406	8b 45 e8	 mov	 eax, DWORD PTR _x_max_index$[ebp]
  00409	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  0040f	7c 0b		 jl	 SHORT $LN29@draw_tsd_c

; 1707 : 		{                          
; 1708 : 			x_max_index = terrain_3d_simple_elevation_width & contour_granularity_mask;

  00411	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  00416	23 45 d8	 and	 eax, DWORD PTR _contour_granularity_mask$[ebp]
  00419	89 45 e8	 mov	 DWORD PTR _x_max_index$[ebp], eax
$LN29@draw_tsd_c:

; 1709 : 		}                          
; 1710 :                                  
; 1711 : 		if (z_max_index >= terrain_3d_simple_elevation_height)

  0041c	8b 45 e4	 mov	 eax, DWORD PTR _z_max_index$[ebp]
  0041f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_simple_elevation_height@@3HA ; terrain_3d_simple_elevation_height
  00425	7c 0b		 jl	 SHORT $LN30@draw_tsd_c

; 1712 : 		{                          
; 1713 : 			z_max_index = terrain_3d_simple_elevation_height & contour_granularity_mask;

  00427	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_height@@3HA ; terrain_3d_simple_elevation_height
  0042c	23 45 d8	 and	 eax, DWORD PTR _contour_granularity_mask$[ebp]
  0042f	89 45 e4	 mov	 DWORD PTR _z_max_index$[ebp], eax
$LN30@draw_tsd_c:

; 1714 : 		}                          
; 1715 :                                  
; 1716 : 		if ((x_min_index < x_max_index) && (z_min_index < z_max_index))

  00432	8b 45 f0	 mov	 eax, DWORD PTR _x_min_index$[ebp]
  00435	3b 45 e8	 cmp	 eax, DWORD PTR _x_max_index$[ebp]
  00438	0f 8d 77 02 00
	00		 jge	 $LN3@draw_tsd_c
  0043e	8b 45 ec	 mov	 eax, DWORD PTR _z_min_index$[ebp]
  00441	3b 45 e4	 cmp	 eax, DWORD PTR _z_max_index$[ebp]
  00444	0f 8d 6b 02 00
	00		 jge	 $LN3@draw_tsd_c

; 1717 : 		{                          
; 1718 : 			this_row_start_ptr = &terrain_3d_simple_elevation_grid[(z_min_index * terrain_3d_simple_elevation_width) + x_min_index];

  0044a	8b 45 ec	 mov	 eax, DWORD PTR _z_min_index$[ebp]
  0044d	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  00454	03 45 f0	 add	 eax, DWORD PTR _x_min_index$[ebp]
  00457	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_simple_elevation_grid@@3PAMA ; terrain_3d_simple_elevation_grid
  0045d	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00460	89 55 8c	 mov	 DWORD PTR _this_row_start_ptr$[ebp], edx

; 1719 :                                  
; 1720 : 			row_add_on = terrain_3d_simple_elevation_width * contour_granularity;

  00463	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  00468	0f af 45 dc	 imul	 eax, DWORD PTR _contour_granularity$[ebp]
  0046c	89 45 f4	 mov	 DWORD PTR _row_add_on$[ebp], eax

; 1721 :                                  
; 1722 : 			next_row_start_ptr = this_row_start_ptr + row_add_on;

  0046f	8b 45 f4	 mov	 eax, DWORD PTR _row_add_on$[ebp]
  00472	8b 4d 8c	 mov	 ecx, DWORD PTR _this_row_start_ptr$[ebp]
  00475	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00478	89 55 88	 mov	 DWORD PTR _next_row_start_ptr$[ebp], edx

; 1723 :                                  
; 1724 : 			dx_start = ((((float) x_min_index) * terrain_3d_simple_elevation_x_grid_size) - x_mid) * scale;

  0047b	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _x_min_index$[ebp]
  00480	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  00488	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _x_mid$[ebp]
  0048d	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00492	f3 0f 11 45 9c	 movss	 DWORD PTR _dx_start$[ebp], xmm0

; 1725 : 			dz_start = ((((float) z_min_index) * terrain_3d_simple_elevation_z_grid_size) - z_mid) * scale;

  00497	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _z_min_index$[ebp]
  0049c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size@@3MA
  004a4	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _z_mid$[ebp]
  004a9	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  004ae	f3 0f 11 45 98	 movss	 DWORD PTR _dz_start$[ebp], xmm0

; 1726 :                                  
; 1727 : 			dx_grid = terrain_3d_simple_elevation_x_grid_size * (float) contour_granularity * scale;

  004b3	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _contour_granularity$[ebp]
  004b8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  004c0	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  004c5	f3 0f 11 45 a4	 movss	 DWORD PTR _dx_grid$[ebp], xmm0

; 1728 : 			dz_grid = terrain_3d_simple_elevation_z_grid_size * (float) contour_granularity * scale;

  004ca	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _contour_granularity$[ebp]
  004cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size@@3MA
  004d7	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  004dc	f3 0f 11 45 a0	 movss	 DWORD PTR _dz_grid$[ebp], xmm0

; 1729 :                                  
; 1730 : 			dz0 = dz_start;         

  004e1	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _dz_start$[ebp]
  004e6	f3 0f 11 45 b0	 movss	 DWORD PTR _dz0$[ebp], xmm0

; 1731 : 			dz1 = dz_start + dz_grid;

  004eb	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _dz_start$[ebp]
  004f0	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _dz_grid$[ebp]
  004f5	f3 0f 11 45 a8	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1732 :                                  
; 1733 : 			for (z_index = z_min_index; z_index < z_max_index; z_index += contour_granularity)

  004fa	8b 45 ec	 mov	 eax, DWORD PTR _z_min_index$[ebp]
  004fd	89 45 f8	 mov	 DWORD PTR _z_index$[ebp], eax
  00500	eb 09		 jmp	 SHORT $LN4@draw_tsd_c
$LN2@draw_tsd_c:
  00502	8b 45 f8	 mov	 eax, DWORD PTR _z_index$[ebp]
  00505	03 45 dc	 add	 eax, DWORD PTR _contour_granularity$[ebp]
  00508	89 45 f8	 mov	 DWORD PTR _z_index$[ebp], eax
$LN4@draw_tsd_c:
  0050b	8b 45 f8	 mov	 eax, DWORD PTR _z_index$[ebp]
  0050e	3b 45 e4	 cmp	 eax, DWORD PTR _z_max_index$[ebp]
  00511	0f 8d 9e 01 00
	00		 jge	 $LN3@draw_tsd_c

; 1734 : 			{                       
; 1735 : 				dx0 = dx_start;      

  00517	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _dx_start$[ebp]
  0051c	f3 0f 11 45 b4	 movss	 DWORD PTR _dx0$[ebp], xmm0

; 1736 : 				dx1 = dx_start + dx_grid;

  00521	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _dx_start$[ebp]
  00526	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _dx_grid$[ebp]
  0052b	f3 0f 11 45 ac	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1737 :                                  
; 1738 : 				this_row_ptr = this_row_start_ptr;

  00530	8b 45 8c	 mov	 eax, DWORD PTR _this_row_start_ptr$[ebp]
  00533	89 45 94	 mov	 DWORD PTR _this_row_ptr$[ebp], eax

; 1739 : 				next_row_ptr = next_row_start_ptr;

  00536	8b 45 88	 mov	 eax, DWORD PTR _next_row_start_ptr$[ebp]
  00539	89 45 90	 mov	 DWORD PTR _next_row_ptr$[ebp], eax

; 1740 :                                  
; 1741 : 				for (x_index = x_min_index; x_index < x_max_index; x_index += contour_granularity)

  0053c	8b 45 f0	 mov	 eax, DWORD PTR _x_min_index$[ebp]
  0053f	89 45 fc	 mov	 DWORD PTR _x_index$[ebp], eax
  00542	eb 09		 jmp	 SHORT $LN7@draw_tsd_c
$LN5@draw_tsd_c:
  00544	8b 45 fc	 mov	 eax, DWORD PTR _x_index$[ebp]
  00547	03 45 dc	 add	 eax, DWORD PTR _contour_granularity$[ebp]
  0054a	89 45 fc	 mov	 DWORD PTR _x_index$[ebp], eax
$LN7@draw_tsd_c:
  0054d	8b 45 fc	 mov	 eax, DWORD PTR _x_index$[ebp]
  00550	3b 45 e8	 cmp	 eax, DWORD PTR _x_max_index$[ebp]
  00553	0f 8d 21 01 00
	00		 jge	 $LN6@draw_tsd_c

; 1742 : 				{                    
; 1743 : 					//                
; 1744 : 					// offset [z=0][x=0]
; 1745 : 					//                
; 1746 :                                  
; 1747 : 					p1.x = dx0;       

  00559	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  0055e	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _p1$[ebp], xmm0

; 1748 : 					p1.y = this_row_ptr[0];

  00566	b8 04 00 00 00	 mov	 eax, 4
  0056b	6b c8 00	 imul	 ecx, eax, 0
  0056e	8b 55 94	 mov	 edx, DWORD PTR _this_row_ptr$[ebp]
  00571	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00576	f3 0f 11 45 80	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 1749 : 					p1.z = dz0;       

  0057b	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  00580	f3 0f 11 45 84	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 1750 :                                  
; 1751 : 					//                
; 1752 : 					// offset [z=0][x=1]
; 1753 : 					//                
; 1754 :                                  
; 1755 : 					p2.x = dx1;       

  00585	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  0058a	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _p2$[ebp], xmm0

; 1756 : 					p2.y = this_row_ptr[contour_granularity];

  00592	8b 45 dc	 mov	 eax, DWORD PTR _contour_granularity$[ebp]
  00595	8b 4d 94	 mov	 ecx, DWORD PTR _this_row_ptr$[ebp]
  00598	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  0059d	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 1757 : 					p2.z = dz0;       

  005a5	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  005aa	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 1758 :                                  
; 1759 : 					//                
; 1760 : 					// offset [z=1][x=0]
; 1761 : 					//                
; 1762 :                                  
; 1763 : 					p3.x = dx0;       

  005b2	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  005b7	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _p3$[ebp], xmm0

; 1764 : 					p3.y = next_row_ptr[0];

  005bf	b8 04 00 00 00	 mov	 eax, 4
  005c4	6b c8 00	 imul	 ecx, eax, 0
  005c7	8b 55 90	 mov	 edx, DWORD PTR _next_row_ptr$[ebp]
  005ca	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  005cf	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _p3$[ebp+4], xmm0

; 1765 : 					p3.z = dz1;       

  005d7	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  005dc	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _p3$[ebp+8], xmm0

; 1766 :                                  
; 1767 :                                  
; 1768 : 					draw_contour_lines (&p1, &p2, &p3);

  005e4	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _p3$[ebp]
  005ea	50		 push	 eax
  005eb	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _p2$[ebp]
  005f1	51		 push	 ecx
  005f2	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _p1$[ebp]
  005f8	52		 push	 edx
  005f9	e8 00 00 00 00	 call	 ?draw_contour_lines@@YGXPAUVEC3D@@00@Z ; draw_contour_lines

; 1769 :                                  
; 1770 : 					//                
; 1771 : 					// offset [z=1][x=1]
; 1772 : 					//                
; 1773 :                                  
; 1774 : 					p1.x = dx1;       

  005fe	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  00603	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _p1$[ebp], xmm0

; 1775 : 					p1.y = next_row_ptr[contour_granularity];

  0060b	8b 45 dc	 mov	 eax, DWORD PTR _contour_granularity$[ebp]
  0060e	8b 4d 90	 mov	 ecx, DWORD PTR _next_row_ptr$[ebp]
  00611	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  00616	f3 0f 11 45 80	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 1776 : 					p1.z = dz1;       

  0061b	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  00620	f3 0f 11 45 84	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 1777 :                                  
; 1778 :                                  
; 1779 : 					draw_contour_lines (&p1, &p2, &p3);

  00625	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _p3$[ebp]
  0062b	50		 push	 eax
  0062c	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _p2$[ebp]
  00632	51		 push	 ecx
  00633	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _p1$[ebp]
  00639	52		 push	 edx
  0063a	e8 00 00 00 00	 call	 ?draw_contour_lines@@YGXPAUVEC3D@@00@Z ; draw_contour_lines

; 1780 :                                  
; 1781 : 					//                
; 1782 : 					// next column    
; 1783 : 					//                
; 1784 :                                  
; 1785 : 					dx0 += dx_grid;   

  0063f	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  00644	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _dx_grid$[ebp]
  00649	f3 0f 11 45 b4	 movss	 DWORD PTR _dx0$[ebp], xmm0

; 1786 : 					dx1 += dx_grid;   

  0064e	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  00653	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _dx_grid$[ebp]
  00658	f3 0f 11 45 ac	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1787 :                                  
; 1788 : 					this_row_ptr += contour_granularity;

  0065d	8b 45 dc	 mov	 eax, DWORD PTR _contour_granularity$[ebp]
  00660	8b 4d 94	 mov	 ecx, DWORD PTR _this_row_ptr$[ebp]
  00663	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00666	89 55 94	 mov	 DWORD PTR _this_row_ptr$[ebp], edx

; 1789 : 					next_row_ptr += contour_granularity;

  00669	8b 45 dc	 mov	 eax, DWORD PTR _contour_granularity$[ebp]
  0066c	8b 4d 90	 mov	 ecx, DWORD PTR _next_row_ptr$[ebp]
  0066f	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00672	89 55 90	 mov	 DWORD PTR _next_row_ptr$[ebp], edx

; 1790 : 				}                    

  00675	e9 ca fe ff ff	 jmp	 $LN5@draw_tsd_c
$LN6@draw_tsd_c:

; 1791 :                                  
; 1792 : 				//                   
; 1793 : 				// next row          
; 1794 : 				//                   
; 1795 :                                  
; 1796 : 				dz0 += dz_grid;      

  0067a	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  0067f	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _dz_grid$[ebp]
  00684	f3 0f 11 45 b0	 movss	 DWORD PTR _dz0$[ebp], xmm0

; 1797 : 				dz1 += dz_grid;      

  00689	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  0068e	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _dz_grid$[ebp]
  00693	f3 0f 11 45 a8	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1798 :                                  
; 1799 : 				this_row_start_ptr += row_add_on;

  00698	8b 45 f4	 mov	 eax, DWORD PTR _row_add_on$[ebp]
  0069b	8b 4d 8c	 mov	 ecx, DWORD PTR _this_row_start_ptr$[ebp]
  0069e	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  006a1	89 55 8c	 mov	 DWORD PTR _this_row_start_ptr$[ebp], edx

; 1800 : 				next_row_start_ptr += row_add_on;

  006a4	8b 45 f4	 mov	 eax, DWORD PTR _row_add_on$[ebp]
  006a7	8b 4d 88	 mov	 ecx, DWORD PTR _next_row_start_ptr$[ebp]
  006aa	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  006ad	89 55 88	 mov	 DWORD PTR _next_row_start_ptr$[ebp], edx

; 1801 : 			}                       

  006b0	e9 4d fe ff ff	 jmp	 $LN2@draw_tsd_c
$LN3@draw_tsd_c:

; 1802 : 		}                          
; 1803 :                                  
; 1804 : 		#if OPTIMISE_CONTOURS      
; 1805 :                                  
; 1806 : 		debug_filtered_log ("num_contour_loops = %d, num_contour_lines = %d", num_contour_loops, num_contour_lines);

  006b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_contour_lines@@3HA
  006ba	50		 push	 eax
  006bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?num_contour_loops@@3HA
  006c1	51		 push	 ecx
  006c2	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@IOCAKHH@num_contour_loops?5?$DN?5?$CFd?0?5num_con@
  006c7	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  006cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@draw_tsd_c:

; 1807 :                                  
; 1808 : 		#endif                     
; 1809 :                                  
; 1810 : 	}//tsd_render_mode != TSD_RENDER_RELIEF_MODE
; 1811 :                                  
; 1812 :    path_detail_level = max(0, path_detail_level-1);

  006cf	8b 45 e0	 mov	 eax, DWORD PTR _path_detail_level$[ebp]
  006d2	83 e8 01	 sub	 eax, 1
  006d5	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  006db	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0
  006e5	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  006eb	51		 push	 ecx
  006ec	8d 95 1c ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  006f2	52		 push	 edx
  006f3	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  006f8	8b 00		 mov	 eax, DWORD PTR [eax]
  006fa	89 45 e0	 mov	 DWORD PTR _path_detail_level$[ebp], eax

; 1813 :    //VJ 030423 TSD render mod, increase path detail level
; 1814 :                                  
; 1815 : 	////////////////////////////////////////
; 1816 : 	//                            
; 1817 : 	// DRAW RIVERS                
; 1818 : 	//                            
; 1819 : 	////////////////////////////////////////
; 1820 :                                  
; 1821 : 	draw_path_lines               

  006fd	8b 45 20	 mov	 eax, DWORD PTR _draw_large_mfd$[ebp]
  00700	50		 push	 eax
  00701	8b 4d 20	 mov	 ecx, DWORD PTR _draw_large_mfd$[ebp]
  00704	51		 push	 ecx
  00705	51		 push	 ecx
  00706	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0070b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00710	51		 push	 ecx
  00711	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  00716	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071b	51		 push	 ecx
  0071c	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00721	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00726	51		 push	 ecx
  00727	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _z_mid$[ebp]
  0072c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00731	51		 push	 ecx
  00732	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  00737	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073c	51		 push	 ecx
  0073d	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _z_min$[ebp]
  00742	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00747	51		 push	 ecx
  00748	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0074d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00752	8b 55 e0	 mov	 edx, DWORD PTR _path_detail_level$[ebp]
  00755	52		 push	 edx
  00756	a1 00 00 00 00	 mov	 eax, DWORD PTR ?map_river_colour@@3UREAL_COLOUR@@A
  0075b	50		 push	 eax
  0075c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_river_nodes@@3PAUVEC3D@@A ; contour_map_river_nodes
  00762	51		 push	 ecx
  00763	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_river_paths@@3PAUCONTOUR_PATH@@A ; contour_map_river_paths
  00769	52		 push	 edx
  0076a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_number_of_river_paths@@3HA ; contour_map_number_of_river_paths
  0076f	50		 push	 eax
  00770	e8 00 00 00 00	 call	 ?draw_path_lines@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@HMMMMMMMHH@Z ; draw_path_lines

; 1822 : 	(                             
; 1823 : 		contour_map_number_of_river_paths,
; 1824 : 		contour_map_river_paths,   
; 1825 : 		contour_map_river_nodes,   
; 1826 : 		map_river_colour,          
; 1827 : 		path_detail_level,         
; 1828 : 		x_min,                     
; 1829 : 		z_min,                     
; 1830 : 		x_mid,                     
; 1831 : 		z_mid,                     
; 1832 : 		x_max,                     
; 1833 : 		z_max,                     
; 1834 : 		scale,                     
; 1835 : 		draw_large_mfd,  //VJ 020426 draw roads thick when draw_large_mfd on
; 1836 : 		draw_large_mfd             
; 1837 : 	);                            
; 1838 :                                  
; 1839 : 	////////////////////////////////////////
; 1840 : 	//                            
; 1841 : 	// DRAW ROADS                 
; 1842 : 	//                            
; 1843 : 	////////////////////////////////////////
; 1844 :                                  
; 1845 : 	draw_path_lines               

  00775	8b 45 20	 mov	 eax, DWORD PTR _draw_large_mfd$[ebp]
  00778	50		 push	 eax
  00779	6a 01		 push	 1
  0077b	51		 push	 ecx
  0077c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00781	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00786	51		 push	 ecx
  00787	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  0078c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00791	51		 push	 ecx
  00792	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00797	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079c	51		 push	 ecx
  0079d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _z_mid$[ebp]
  007a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a7	51		 push	 ecx
  007a8	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  007ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b2	51		 push	 ecx
  007b3	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _z_min$[ebp]
  007b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bd	51		 push	 ecx
  007be	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  007c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c8	8b 4d e0	 mov	 ecx, DWORD PTR _path_detail_level$[ebp]
  007cb	51		 push	 ecx
  007cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?map_road_colour@@3UREAL_COLOUR@@A
  007d2	52		 push	 edx
  007d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contour_map_road_nodes@@3PAUVEC3D@@A ; contour_map_road_nodes
  007d8	50		 push	 eax
  007d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?contour_map_road_paths@@3PAUCONTOUR_PATH@@A ; contour_map_road_paths
  007df	51		 push	 ecx
  007e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?contour_map_number_of_road_paths@@3HA ; contour_map_number_of_road_paths
  007e6	52		 push	 edx
  007e7	e8 00 00 00 00	 call	 ?draw_path_lines@@YGXHPAUCONTOUR_PATH@@PAUVEC3D@@UREAL_COLOUR@@HMMMMMMMHH@Z ; draw_path_lines

; 1846 : 	(                             
; 1847 : 		contour_map_number_of_road_paths,
; 1848 : 		contour_map_road_paths,    
; 1849 : 		contour_map_road_nodes,    
; 1850 : 		map_road_colour,           
; 1851 : 		path_detail_level,         
; 1852 : 		x_min,                     
; 1853 : 		z_min,                     
; 1854 : 		x_mid,                     
; 1855 : 		z_mid,                     
; 1856 : 		x_max,                     
; 1857 : 		z_max,                     
; 1858 : 		scale,                     
; 1859 : 		//FALSE,                   
; 1860 : 		TRUE, //VJ 030423 TSD render mod, roads were not very visible
; 1861 : 		draw_large_mfd             
; 1862 : 	);                            
; 1863 :                                  
; 1864 : 	//                            
; 1865 : 	// reset window rotation      
; 1866 : 	//                            
; 1867 :                                  
; 1868 : 	set_2d_window_rotation (mfd_env, 0.0);

  007ec	51		 push	 ecx
  007ed	0f 57 c0	 xorps	 xmm0, xmm0
  007f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f5	8b 45 08	 mov	 eax, DWORD PTR _mfd_env$[ebp]
  007f8	50		 push	 eax
  007f9	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1869 :                                  
; 1870 : }                                

  007fe	5f		 pop	 edi
  007ff	5e		 pop	 esi
  00800	5b		 pop	 ebx
  00801	8b e5		 mov	 esp, ebp
  00803	5d		 pop	 ebp
  00804	c2 20 00	 ret	 32			; 00000020H
?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z ENDP ; draw_tsd_contour_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_tsd.c
;	COMDAT ?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z
_TEXT	SEGMENT
tv615 = -288						; size = 4
tv606 = -288						; size = 4
tv69 = -288						; size = 4
$T1 = -284						; size = 4
$T2 = -280						; size = 4
$T3 = -276						; size = 4
$T4 = -272						; size = 4
$T5 = -268						; size = 4
$T6 = -264						; size = 4
$T7 = -260						; size = 4
$T8 = -256						; size = 4
$T9 = -252						; size = 4
$T10 = -248						; size = 4
_mid_y$11 = -180					; size = 4
_mid_x$12 = -176					; size = 4
_mid_z$13 = -172					; size = 4
_old_aspect_x$14 = -168					; size = 4
_aspect$15 = -164					; size = 4
_oa$16 = -160						; size = 4
_c$17 = -156						; size = 4
_doaspect$ = -152					; size = 4
_stepmask$ = -148					; size = 4
_do_it$ = -144						; size = 4
_nr_aspect_steps$ = -140				; size = 4
_aspect_index$ = -136					; size = 4
_step$ = -132						; size = 4
_terrain_col$ = -128					; size = 4
_elevation_factor$ = -124				; size = 4
_terrain_elev$ = -120					; size = 4
_old_aspectrow$ = -116					; size = 4
_aspectrow$ = -112					; size = 4
_next_row_start_ptr$ = -108				; size = 4
_this_row_start_ptr$ = -104				; size = 4
_next_row_ptr$ = -100					; size = 4
_this_row_ptr$ = -96					; size = 4
_dz_start$ = -92					; size = 4
_dx_start$ = -88					; size = 4
_dz_grid$ = -84						; size = 4
_dx_grid$ = -80						; size = 4
_dz1$ = -76						; size = 4
_dx1$ = -72						; size = 4
_dz0$ = -68						; size = 4
_dx0$ = -64						; size = 4
_distance$ = -60					; size = 4
_radius$ = -56						; size = 4
_z_max$ = -52						; size = 4
_x_max$ = -48						; size = 4
_z_mid$ = -44						; size = 4
_x_mid$ = -40						; size = 4
_z_min$ = -36						; size = 4
_x_min$ = -32						; size = 4
_z_max_index$ = -28					; size = 4
_x_max_index$ = -24					; size = 4
_z_min_index$ = -20					; size = 4
_x_min_index$ = -16					; size = 4
_row_add_on$ = -12					; size = 4
_z_index$ = -8						; size = 4
_x_index$ = -4						; size = 4
_mfd_env$ = 8						; size = 4
_y_translate$ = 12					; size = 4
_range$ = 16						; size = 4
_scale$ = 20						; size = 4
_position$ = 24						; size = 4
_heading$ = 28						; size = 4
_paper_map$ = 32					; size = 4
?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z PROC ; draw_tsd_terrain_map, COMDAT

; 1165 : {                                

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1166 : 	int                           
; 1167 : 		x_index,                   
; 1168 : 		z_index,                   
; 1169 : 		row_add_on,                
; 1170 : 		x_min_index,               
; 1171 : 		z_min_index,               
; 1172 : 		x_max_index,               
; 1173 : 		z_max_index;               
; 1174 :                                  
; 1175 : 	float                         
; 1176 : 		x_min,                     
; 1177 : 		z_min,                     
; 1178 : 		x_mid,                     
; 1179 : 		z_mid,                     
; 1180 : 		x_max,                     
; 1181 : 		z_max,                     
; 1182 : 		radius,                    
; 1183 : 		distance,                  
; 1184 : 		dx0,                       
; 1185 : 		dz0,                       
; 1186 : 		dx1,                       
; 1187 : 		dz1,                       
; 1188 : 		dx_grid,                   
; 1189 : 		dz_grid,                   
; 1190 : 		dx_start,                  
; 1191 : 		dz_start,                  
; 1192 : 		*this_row_ptr,             
; 1193 : 		*next_row_ptr,             
; 1194 : 		*this_row_start_ptr,       
; 1195 : 		*next_row_start_ptr,       
; 1196 : 		*aspectrow,                
; 1197 : 		*old_aspectrow;            
; 1198 :                                  
; 1199 : 	float                         
; 1200 : 		terrain_elev=0,            

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 88	 movss	 DWORD PTR _terrain_elev$[ebp], xmm0

; 1201 : 		elevation_factor=terrain_3d_map_maximum_height*0.97;

  00014	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?terrain_3d_map_maximum_height@@3MA
  0001c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fef0a3d70a3d70a
  00024	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00028	f3 0f 11 45 84	 movss	 DWORD PTR _elevation_factor$[ebp], xmm0

; 1202 :                                  
; 1203 : 	rgb_colour                    
; 1204 : 		terrain_col;               
; 1205 :                                  
; 1206 : 	int step = 1, aspect_index, nr_aspect_steps, do_it = 0;

  0002d	c7 85 7c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _step$[ebp], 1
  00037	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _do_it$[ebp], 0

; 1207 : 	int stepmask;                 
; 1208 : 	                              
; 1209 : //VJ 051006 simplified code, lower detail but better framerate
; 1210 : 	unsigned int doaspect = (tsd_render_mode == TSD_RENDER_CONTOUR_SHADED_RELIEF_MODE ||

  00041	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 4 ; tsd_render_mode
  00048	74 15		 je	 SHORT $LN41@draw_tsd_t
  0004a	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 5 ; tsd_render_mode
  00051	74 0c		 je	 SHORT $LN41@draw_tsd_t
  00053	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
  0005d	eb 0a		 jmp	 SHORT $LN42@draw_tsd_t
$LN41@draw_tsd_t:
  0005f	c7 85 e0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv69[ebp], 1
$LN42@draw_tsd_t:
  00069	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]
  0006f	89 85 68 ff ff
	ff		 mov	 DWORD PTR _doaspect$[ebp], eax

; 1211 :   							tsd_render_mode == TSD_RENDER_SHADED_RELIEF_MODE);
; 1212 : 
; 1213 : 	if (paper_map)

  00075	83 7d 20 00	 cmp	 DWORD PTR _paper_map$[ebp], 0
  00079	74 0c		 je	 SHORT $LN11@draw_tsd_t

; 1214 : 		map_palette = paper_colour;

  0007b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A, OFFSET ?paper_colour@@3PAUREAL_COLOUR@@A

; 1215 : 	else

  00085	eb 14		 jmp	 SHORT $LN12@draw_tsd_t
$LN11@draw_tsd_t:

; 1216 : 		map_palette = terrain_colour[tsd_render_palette];

  00087	69 05 00 00 00
	00 04 01 00 00	 imul	 eax, DWORD PTR ?tsd_render_palette@@3HA, 260
  00091	05 00 00 00 00	 add	 eax, OFFSET ?terrain_colour@@3PAY0EB@UREAL_COLOUR@@A
  00096	a3 00 00 00 00	 mov	 DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A, eax
$LN12@draw_tsd_t:

; 1217 :                                  
; 1218 : 	ASSERT (position);            

  0009b	83 7d 18 00	 cmp	 DWORD PTR _position$[ebp], 0
  0009f	75 18		 jne	 SHORT $LN13@draw_tsd_t
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z@4JA
  000a6	83 c0 35	 add	 eax, 53			; 00000035H
  000a9	50		 push	 eax
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@HGKHCOEN@c?3?2users?2nhv90?2projects?2eech?2ap@
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_08OAGMDKAF@position@
  000b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@draw_tsd_t:

; 1219 : 
; 1220 :                                  
; 1221 : 	//                            
; 1222 : 	// rotate map                 
; 1223 : 	//                            
; 1224 :                                  
; 1225 : 	set_2d_window_rotation (mfd_env, heading);

  000b9	51		 push	 ecx
  000ba	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _heading$[ebp]
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	8b 45 08	 mov	 eax, DWORD PTR _mfd_env$[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1226 :                                  
; 1227 : 	//                            
; 1228 : 	// get map centre position    
; 1229 : 	//                            
; 1230 :                                  
; 1231 : 	distance = y_translate / scale;

  000cd	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_translate$[ebp]
  000d2	f3 0f 5e 45 14	 divss	 xmm0, DWORD PTR _scale$[ebp]
  000d7	f3 0f 11 45 c4	 movss	 DWORD PTR _distance$[ebp], xmm0

; 1232 :                                  
; 1233 : 	x_mid = position->x + (distance * sin (heading));

  000dc	51		 push	 ecx
  000dd	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _heading$[ebp]
  000e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e7	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  000ec	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv606[ebp]
  000f2	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR tv606[ebp]
  000fa	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _distance$[ebp]
  000ff	8b 45 18	 mov	 eax, DWORD PTR _position$[ebp]
  00102	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00106	f3 0f 11 45 d8	 movss	 DWORD PTR _x_mid$[ebp], xmm0

; 1234 : 	z_mid = position->z + (distance * cos (heading));

  0010b	51		 push	 ecx
  0010c	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00111	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00116	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0011b	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv615[ebp]
  00121	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR tv615[ebp]
  00129	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _distance$[ebp]
  0012e	8b 45 18	 mov	 eax, DWORD PTR _position$[ebp]
  00131	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00136	f3 0f 11 45 d4	 movss	 DWORD PTR _z_mid$[ebp], xmm0

; 1235 :                                  
; 1236 : 	//                            
; 1237 : 	// get map area (increased by one grid, where hypotenuse is approx (x + z))
; 1238 : 	//                            
; 1239 :                                  
; 1240 : 	radius = range + terrain_3d_simple_elevation_x_grid_size + terrain_3d_simple_elevation_z_grid_size;

  0013b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  00140	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  00148	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size@@3MA
  00150	f3 0f 11 45 c8	 movss	 DWORD PTR _radius$[ebp], xmm0

; 1241 :                                  
; 1242 : 	x_min = x_mid - radius;       

  00155	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  0015a	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _radius$[ebp]
  0015f	f3 0f 11 45 e0	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 1243 : 	z_min = z_mid - radius;       

  00164	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z_mid$[ebp]
  00169	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _radius$[ebp]
  0016e	f3 0f 11 45 dc	 movss	 DWORD PTR _z_min$[ebp], xmm0

; 1244 :                                  
; 1245 : 	x_max = x_mid + radius;       

  00173	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  00178	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _radius$[ebp]
  0017d	f3 0f 11 45 d0	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 1246 : 	z_max = z_mid + radius;       

  00182	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _z_mid$[ebp]
  00187	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _radius$[ebp]
  0018c	f3 0f 11 45 cc	 movss	 DWORD PTR _z_max$[ebp], xmm0

; 1247 :                                  
; 1248 : 	//                            
; 1249 : 	// clip map area              
; 1250 : 	//                            
; 1251 :                                  
; 1252 : 	x_min = max (x_min, MIN_MAP_X);

  00191	68 24 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+36
  00196	8d 45 e0	 lea	 eax, DWORD PTR _x_min$[ebp]
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0019f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001a3	f3 0f 11 45 e0	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 1253 : 	z_min = max (z_min, MIN_MAP_Z);

  001a8	68 2c 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+44
  001ad	8d 45 dc	 lea	 eax, DWORD PTR _z_min$[ebp]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001b6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001ba	f3 0f 11 45 dc	 movss	 DWORD PTR _z_min$[ebp], xmm0

; 1254 :                                  
; 1255 : 	x_max = min (x_max, MAX_MAP_X);

  001bf	68 3c 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+60
  001c4	8d 45 d0	 lea	 eax, DWORD PTR _x_max$[ebp]
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  001cd	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001d1	f3 0f 11 45 d0	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 1256 : 	z_max = min (z_max, MAX_MAP_Z);

  001d6	68 44 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+68
  001db	8d 45 cc	 lea	 eax, DWORD PTR _z_max$[ebp]
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  001e4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001e8	f3 0f 11 45 cc	 movss	 DWORD PTR _z_max$[ebp], xmm0

; 1257 :                                  
; 1258 :                                  
; 1259 : 	//                            
; 1260 : 	// get simple terrain map indices
; 1261 : 	//                            
; 1262 :                                  
; 1263 : 	convert_float_to_int ((x_min * terrain_3d_simple_elevation_x_grid_size_reciprocal), &x_min_index);

  001ed	8d 45 f0	 lea	 eax, DWORD PTR _x_min_index$[ebp]
  001f0	50		 push	 eax
  001f1	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001f6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size_reciprocal@@3MA
  001fe	51		 push	 ecx
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1264 : 	convert_float_to_int ((z_min * terrain_3d_simple_elevation_z_grid_size_reciprocal), &z_min_index);

  00209	8d 45 ec	 lea	 eax, DWORD PTR _z_min_index$[ebp]
  0020c	50		 push	 eax
  0020d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z_min$[ebp]
  00212	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size_reciprocal@@3MA
  0021a	51		 push	 ecx
  0021b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00220	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1265 :                                  
; 1266 : 	convert_float_to_int ((x_max * terrain_3d_simple_elevation_x_grid_size_reciprocal), &x_max_index);

  00225	8d 45 e8	 lea	 eax, DWORD PTR _x_max_index$[ebp]
  00228	50		 push	 eax
  00229	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  0022e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size_reciprocal@@3MA
  00236	51		 push	 ecx
  00237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1267 : 	convert_float_to_int ((z_max * terrain_3d_simple_elevation_z_grid_size_reciprocal), &z_max_index);

  00241	8d 45 e4	 lea	 eax, DWORD PTR _z_max_index$[ebp]
  00244	50		 push	 eax
  00245	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  0024a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size_reciprocal@@3MA
  00252	51		 push	 ecx
  00253	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00258	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1268 :                                  
; 1269 : //VJ 051006 simplified code, lower detail but better framerate
; 1270 : //this gives the better framerate in fact, simply drawing much less triangles
; 1271 :  //  if (range > TSD_ASE_RANGE_10000)
; 1272 :    //  step = 2;                   
; 1273 : //VJ 061213 toggle TSD colour grid detail level
; 1274 :   if (global_tsd_detail == 0)

  0025d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?global_tsd_detail@@3HA, 0 ; global_tsd_detail
  00264	75 18		 jne	 SHORT $LN15@draw_tsd_t

; 1275 :   	if(range >= TSD_ASE_RANGE_10000)

  00266	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  0026b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@461c4000
  00272	72 0a		 jb	 SHORT $LN15@draw_tsd_t

; 1276 :      step = 2;                   

  00274	c7 85 7c ff ff
	ff 02 00 00 00	 mov	 DWORD PTR _step$[ebp], 2
$LN15@draw_tsd_t:

; 1277 :                                  
; 1278 :    stepmask = ~(step - 1);       

  0027e	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _step$[ebp]
  00284	83 e8 01	 sub	 eax, 1
  00287	f7 d0		 not	 eax
  00289	89 85 6c ff ff
	ff		 mov	 DWORD PTR _stepmask$[ebp], eax

; 1279 :                                  
; 1280 : 	//                            
; 1281 : 	// scan map                   
; 1282 : 	//                            
; 1283 :                                  
; 1284 : 	x_min_index &= stepmask;      

  0028f	8b 45 f0	 mov	 eax, DWORD PTR _x_min_index$[ebp]
  00292	23 85 6c ff ff
	ff		 and	 eax, DWORD PTR _stepmask$[ebp]
  00298	89 45 f0	 mov	 DWORD PTR _x_min_index$[ebp], eax

; 1285 : 	z_min_index &= stepmask;      

  0029b	8b 45 ec	 mov	 eax, DWORD PTR _z_min_index$[ebp]
  0029e	23 85 6c ff ff
	ff		 and	 eax, DWORD PTR _stepmask$[ebp]
  002a4	89 45 ec	 mov	 DWORD PTR _z_min_index$[ebp], eax

; 1286 :                                  
; 1287 : 	x_max_index += step - 1;      

  002a7	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _step$[ebp]
  002ad	8b 4d e8	 mov	 ecx, DWORD PTR _x_max_index$[ebp]
  002b0	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  002b4	89 55 e8	 mov	 DWORD PTR _x_max_index$[ebp], edx

; 1288 : 	z_max_index += step - 1;      

  002b7	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _step$[ebp]
  002bd	8b 4d e4	 mov	 ecx, DWORD PTR _z_max_index$[ebp]
  002c0	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  002c4	89 55 e4	 mov	 DWORD PTR _z_max_index$[ebp], edx

; 1289 :                                  
; 1290 : 	x_max_index &= stepmask;      

  002c7	8b 45 e8	 mov	 eax, DWORD PTR _x_max_index$[ebp]
  002ca	23 85 6c ff ff
	ff		 and	 eax, DWORD PTR _stepmask$[ebp]
  002d0	89 45 e8	 mov	 DWORD PTR _x_max_index$[ebp], eax

; 1291 : 	z_max_index &= stepmask;      

  002d3	8b 45 e4	 mov	 eax, DWORD PTR _z_max_index$[ebp]
  002d6	23 85 6c ff ff
	ff		 and	 eax, DWORD PTR _stepmask$[ebp]
  002dc	89 45 e4	 mov	 DWORD PTR _z_max_index$[ebp], eax

; 1292 :                                  
; 1293 : 	if (x_max_index >= terrain_3d_simple_elevation_width)

  002df	8b 45 e8	 mov	 eax, DWORD PTR _x_max_index$[ebp]
  002e2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  002e8	7c 0e		 jl	 SHORT $LN16@draw_tsd_t

; 1294 : 	{                             
; 1295 : 		x_max_index = terrain_3d_simple_elevation_width & stepmask;

  002ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  002ef	23 85 6c ff ff
	ff		 and	 eax, DWORD PTR _stepmask$[ebp]
  002f5	89 45 e8	 mov	 DWORD PTR _x_max_index$[ebp], eax
$LN16@draw_tsd_t:

; 1296 : 	}                             
; 1297 :                                  
; 1298 : 	if (z_max_index >= terrain_3d_simple_elevation_height)

  002f8	8b 45 e4	 mov	 eax, DWORD PTR _z_max_index$[ebp]
  002fb	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_simple_elevation_height@@3HA ; terrain_3d_simple_elevation_height
  00301	7c 0e		 jl	 SHORT $LN17@draw_tsd_t

; 1299 : 	{                             
; 1300 : 		z_max_index = terrain_3d_simple_elevation_height & stepmask;

  00303	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_height@@3HA ; terrain_3d_simple_elevation_height
  00308	23 85 6c ff ff
	ff		 and	 eax, DWORD PTR _stepmask$[ebp]
  0030e	89 45 e4	 mov	 DWORD PTR _z_max_index$[ebp], eax
$LN17@draw_tsd_t:

; 1301 : 	}                             
; 1302 :                                  
; 1303 : 	if ((x_min_index < x_max_index) && (z_min_index < z_max_index))

  00311	8b 45 f0	 mov	 eax, DWORD PTR _x_min_index$[ebp]
  00314	3b 45 e8	 cmp	 eax, DWORD PTR _x_max_index$[ebp]
  00317	0f 8d a1 0b 00
	00		 jge	 $LN39@draw_tsd_t
  0031d	8b 45 ec	 mov	 eax, DWORD PTR _z_min_index$[ebp]
  00320	3b 45 e4	 cmp	 eax, DWORD PTR _z_max_index$[ebp]
  00323	0f 8d 95 0b 00
	00		 jge	 $LN39@draw_tsd_t

; 1304 : 	{                             
; 1305 : 		this_row_start_ptr = &terrain_3d_simple_elevation_grid[(z_min_index * terrain_3d_simple_elevation_width) + x_min_index];

  00329	8b 45 ec	 mov	 eax, DWORD PTR _z_min_index$[ebp]
  0032c	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  00333	03 45 f0	 add	 eax, DWORD PTR _x_min_index$[ebp]
  00336	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_simple_elevation_grid@@3PAMA ; terrain_3d_simple_elevation_grid
  0033c	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0033f	89 55 98	 mov	 DWORD PTR _this_row_start_ptr$[ebp], edx

; 1306 :                                  
; 1307 : 		row_add_on = terrain_3d_simple_elevation_width * step;

  00342	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_simple_elevation_width@@3HA ; terrain_3d_simple_elevation_width
  00347	0f af 85 7c ff
	ff ff		 imul	 eax, DWORD PTR _step$[ebp]
  0034e	89 45 f4	 mov	 DWORD PTR _row_add_on$[ebp], eax

; 1308 :                                  
; 1309 : 		next_row_start_ptr = this_row_start_ptr + row_add_on;

  00351	8b 45 f4	 mov	 eax, DWORD PTR _row_add_on$[ebp]
  00354	8b 4d 98	 mov	 ecx, DWORD PTR _this_row_start_ptr$[ebp]
  00357	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0035a	89 55 94	 mov	 DWORD PTR _next_row_start_ptr$[ebp], edx

; 1310 :                                  
; 1311 : 		dx_start = ((((float) x_min_index) * terrain_3d_simple_elevation_x_grid_size) - x_mid) * scale;

  0035d	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _x_min_index$[ebp]
  00362	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  0036a	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _x_mid$[ebp]
  0036f	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00374	f3 0f 11 45 a8	 movss	 DWORD PTR _dx_start$[ebp], xmm0

; 1312 : 		dz_start = ((((float) z_min_index) * terrain_3d_simple_elevation_z_grid_size) - z_mid) * scale;

  00379	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _z_min_index$[ebp]
  0037e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size@@3MA
  00386	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _z_mid$[ebp]
  0038b	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00390	f3 0f 11 45 a4	 movss	 DWORD PTR _dz_start$[ebp], xmm0

; 1313 :                                  
; 1314 : 		dx_grid = terrain_3d_simple_elevation_x_grid_size * (float) step * scale;

  00395	f3 0f 2a 85 7c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _step$[ebp]
  0039d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_x_grid_size@@3MA
  003a5	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  003aa	f3 0f 11 45 b0	 movss	 DWORD PTR _dx_grid$[ebp], xmm0

; 1315 : 		dz_grid = terrain_3d_simple_elevation_z_grid_size * (float) step * scale;

  003af	f3 0f 2a 85 7c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _step$[ebp]
  003b7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_simple_elevation_z_grid_size@@3MA
  003bf	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  003c4	f3 0f 11 45 ac	 movss	 DWORD PTR _dz_grid$[ebp], xmm0

; 1316 :                                  
; 1317 : 		dz0 = dz_start;            

  003c9	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _dz_start$[ebp]
  003ce	f3 0f 11 45 bc	 movss	 DWORD PTR _dz0$[ebp], xmm0

; 1318 : 		dz1 = dz_start + dz_grid;  

  003d3	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _dz_start$[ebp]
  003d8	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR _dz_grid$[ebp]
  003dd	f3 0f 11 45 b4	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1319 :                                  
; 1320 : 		//VJ 030511 store shade of pixels above and to the left for averaging
; 1321 : 		if (doaspect)              

  003e2	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _doaspect$[ebp], 0
  003e9	74 45		 je	 SHORT $LN19@draw_tsd_t

; 1322 : 	  	{                          
; 1323 : 			nr_aspect_steps = (int)((z_max_index-z_min_index)/dz_grid);

  003eb	8b 45 e4	 mov	 eax, DWORD PTR _z_max_index$[ebp]
  003ee	2b 45 ec	 sub	 eax, DWORD PTR _z_min_index$[ebp]
  003f1	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003f5	f3 0f 5e 45 ac	 divss	 xmm0, DWORD PTR _dz_grid$[ebp]
  003fa	f3 0f 2c c8	 cvttss2si ecx, xmm0
  003fe	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _nr_aspect_steps$[ebp], ecx

; 1324 : 			aspectrow = (float*)malloc(sizeof(float)*nr_aspect_steps);

  00404	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _nr_aspect_steps$[ebp]
  0040a	c1 e0 02	 shl	 eax, 2
  0040d	50		 push	 eax
  0040e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00414	83 c4 04	 add	 esp, 4
  00417	89 45 90	 mov	 DWORD PTR _aspectrow$[ebp], eax

; 1325 : 			old_aspectrow = (float*)malloc(sizeof(float)*nr_aspect_steps);

  0041a	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _nr_aspect_steps$[ebp]
  00420	c1 e0 02	 shl	 eax, 2
  00423	50		 push	 eax
  00424	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0042a	83 c4 04	 add	 esp, 4
  0042d	89 45 8c	 mov	 DWORD PTR _old_aspectrow$[ebp], eax
$LN19@draw_tsd_t:

; 1326 : 		}                          
; 1327 : 		                           
; 1328 : 		for (z_index = z_min_index; z_index < z_max_index; z_index += step)

  00430	8b 45 ec	 mov	 eax, DWORD PTR _z_min_index$[ebp]
  00433	89 45 f8	 mov	 DWORD PTR _z_index$[ebp], eax
  00436	eb 0c		 jmp	 SHORT $LN4@draw_tsd_t
$LN2@draw_tsd_t:
  00438	8b 45 f8	 mov	 eax, DWORD PTR _z_index$[ebp]
  0043b	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _step$[ebp]
  00441	89 45 f8	 mov	 DWORD PTR _z_index$[ebp], eax
$LN4@draw_tsd_t:
  00444	8b 45 f8	 mov	 eax, DWORD PTR _z_index$[ebp]
  00447	3b 45 e4	 cmp	 eax, DWORD PTR _z_max_index$[ebp]
  0044a	0f 8d 3d 0a 00
	00		 jge	 $LN3@draw_tsd_t

; 1329 : 		{                          
; 1330 :                                  
; 1331 : 			dx0 = dx_start;         

  00450	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _dx_start$[ebp]
  00455	f3 0f 11 45 c0	 movss	 DWORD PTR _dx0$[ebp], xmm0

; 1332 : 			dx1 = dx_start + dx_grid;

  0045a	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _dx_start$[ebp]
  0045f	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _dx_grid$[ebp]
  00464	f3 0f 11 45 b8	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1333 :                                                                  
; 1334 : 			this_row_ptr = this_row_start_ptr;

  00469	8b 45 98	 mov	 eax, DWORD PTR _this_row_start_ptr$[ebp]
  0046c	89 45 a0	 mov	 DWORD PTR _this_row_ptr$[ebp], eax

; 1335 : 			next_row_ptr = next_row_start_ptr;

  0046f	8b 45 94	 mov	 eax, DWORD PTR _next_row_start_ptr$[ebp]
  00472	89 45 9c	 mov	 DWORD PTR _next_row_ptr$[ebp], eax

; 1336 :                                  
; 1337 : 	    aspect_index = 0;       

  00475	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _aspect_index$[ebp], 0

; 1338 : 			for (x_index = x_min_index; x_index < x_max_index; x_index += step)

  0047f	8b 45 f0	 mov	 eax, DWORD PTR _x_min_index$[ebp]
  00482	89 45 fc	 mov	 DWORD PTR _x_index$[ebp], eax
  00485	eb 0c		 jmp	 SHORT $LN7@draw_tsd_t
$LN5@draw_tsd_t:
  00487	8b 45 fc	 mov	 eax, DWORD PTR _x_index$[ebp]
  0048a	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _step$[ebp]
  00490	89 45 fc	 mov	 DWORD PTR _x_index$[ebp], eax
$LN7@draw_tsd_t:
  00493	8b 45 fc	 mov	 eax, DWORD PTR _x_index$[ebp]
  00496	3b 45 e8	 cmp	 eax, DWORD PTR _x_max_index$[ebp]
  00499	0f 8d 67 09 00
	00		 jge	 $LN6@draw_tsd_t

; 1339 : 			{                       
; 1340 : 				int c = 0;           

  0049f	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _c$17[ebp], 0

; 1341 : 				float oa = 1.0, aspect=1.0, old_aspect_x=1.0;

  004a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004b1	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _oa$16[ebp], xmm0
  004b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004c1	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _aspect$15[ebp], xmm0
  004c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004d1	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _old_aspect_x$14[ebp], xmm0

; 1342 :                                  
; 1343 : 				//VJ 030511 aspect is in fact a shade factor beteen 0.5 and 1.0
; 1344 :    			if (doaspect)        

  004d9	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _doaspect$[ebp], 0
  004e0	0f 84 f9 00 00
	00		 je	 $LN22@draw_tsd_t

; 1345 : 	   		{                    
; 1346 : 	   			oa = get_aspect(this_row_ptr[0],this_row_ptr[1],next_row_ptr[0],next_row_ptr[1]);

  004e6	b8 04 00 00 00	 mov	 eax, 4
  004eb	c1 e0 00	 shl	 eax, 0
  004ee	8b 4d 9c	 mov	 ecx, DWORD PTR _next_row_ptr$[ebp]
  004f1	51		 push	 ecx
  004f2	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  004f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fc	ba 04 00 00 00	 mov	 edx, 4
  00501	6b c2 00	 imul	 eax, edx, 0
  00504	8b 4d 9c	 mov	 ecx, DWORD PTR _next_row_ptr$[ebp]
  00507	51		 push	 ecx
  00508	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0050d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00512	ba 04 00 00 00	 mov	 edx, 4
  00517	c1 e2 00	 shl	 edx, 0
  0051a	8b 45 a0	 mov	 eax, DWORD PTR _this_row_ptr$[ebp]
  0051d	51		 push	 ecx
  0051e	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00523	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00528	b9 04 00 00 00	 mov	 ecx, 4
  0052d	6b d1 00	 imul	 edx, ecx, 0
  00530	8b 45 a0	 mov	 eax, DWORD PTR _this_row_ptr$[ebp]
  00533	51		 push	 ecx
  00534	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00539	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053e	e8 00 00 00 00	 call	 ?get_aspect@@YGMMMMM@Z	; get_aspect
  00543	d9 9d 60 ff ff
	ff		 fstp	 DWORD PTR _oa$16[ebp]

; 1347 : 					aspect = oa;      

  00549	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _oa$16[ebp]
  00551	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _aspect$15[ebp], xmm0

; 1348 : 					
; 1349 : 			   	if (x_index > x_min_index && z_index == z_min_index)

  00559	8b 45 fc	 mov	 eax, DWORD PTR _x_index$[ebp]
  0055c	3b 45 f0	 cmp	 eax, DWORD PTR _x_min_index$[ebp]
  0055f	7e 38		 jle	 SHORT $LN21@draw_tsd_t
  00561	8b 45 f8	 mov	 eax, DWORD PTR _z_index$[ebp]
  00564	3b 45 ec	 cmp	 eax, DWORD PTR _z_min_index$[ebp]
  00567	75 30		 jne	 SHORT $LN21@draw_tsd_t

; 1350 :             	{                 
; 1351 :             		aspect = (3*aspect+old_aspect_x)/4.0;

  00569	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00571	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00579	f3 0f 58 85 58
	ff ff ff	 addss	 xmm0, DWORD PTR _old_aspect_x$14[ebp]
  00581	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00585	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4010000000000000
  0058d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00591	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _aspect$15[ebp], xmm0
$LN21@draw_tsd_t:

; 1352 :             	}     
; 1353 :             	            
; 1354 : 			   	if (z_index > z_min_index)

  00599	8b 45 f8	 mov	 eax, DWORD PTR _z_index$[ebp]
  0059c	3b 45 ec	 cmp	 eax, DWORD PTR _z_min_index$[ebp]
  0059f	7e 3e		 jle	 SHORT $LN22@draw_tsd_t

; 1355 :             	{                 
; 1356 :             		aspect = (4*aspect+old_aspect_x+old_aspectrow[aspect_index])/6.0;//old_aspectrow[aspect_index-1]

  005a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  005a9	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  005b1	f3 0f 58 85 58
	ff ff ff	 addss	 xmm0, DWORD PTR _old_aspect_x$14[ebp]
  005b9	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _aspect_index$[ebp]
  005bf	8b 4d 8c	 mov	 ecx, DWORD PTR _old_aspectrow$[ebp]
  005c2	f3 0f 58 04 81	 addss	 xmm0, DWORD PTR [ecx+eax*4]
  005c7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  005cb	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4018000000000000
  005d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005d7	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _aspect$15[ebp], xmm0
$LN22@draw_tsd_t:

; 1357 :             	}          
; 1358 :             
; 1359 :             	#if DEBUG_ASPECT  
; 1360 : 						terrain_col.r = (int)(aspect*255);
; 1361 : 						terrain_col.g = (int)(aspect*255);
; 1362 : 						terrain_col.b = 0;//(int)aspect*255;
; 1363 : 						terrain_col.a = 255;
; 1364 : 			   		draw_2d_filled_triangle (dx0,dz0,dx0,dz1,dx1,dz1,terrain_col);
; 1365 : 			   		draw_2d_filled_triangle (dx0,dz0,dx1,dz1,dx1,dz0,terrain_col);
; 1366 : 			   	#endif            
; 1367 : 				}               
; 1368 : 				     
; 1369 : 			// VJ 060125 split each grid cell into 4 triagles when at a low radar range
; 1370 : 			// else draw 1 square grid cell, gives better framerate at 10 and 25 km radar range
; 1371 : 	    if (global_tsd_detail == 1)

  005df	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?global_tsd_detail@@3HA, 1 ; global_tsd_detail
  005e6	75 0a		 jne	 SHORT $LN23@draw_tsd_t

; 1372 : 			  do_it = 1;	    	

  005e8	c7 85 70 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _do_it$[ebp], 1
$LN23@draw_tsd_t:

; 1373 : 			if (range < TSD_ASE_RANGE_10000)

  005f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  005fa	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _range$[ebp]
  005fe	76 0a		 jbe	 SHORT $LN24@draw_tsd_t

; 1374 : 			  do_it = 1;

  00600	c7 85 70 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _do_it$[ebp], 1
$LN24@draw_tsd_t:

; 1375 : 			  
; 1376 : 			if (do_it == 1)	

  0060a	83 bd 70 ff ff
	ff 01		 cmp	 DWORD PTR _do_it$[ebp], 1
  00611	0f 85 d5 05 00
	00		 jne	 $LN25@draw_tsd_t

; 1377 : 			{
; 1378 : 				float mid_z = 0.5*(dz0+dz1);  

  00617	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  0061c	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _dz1$[ebp]
  00621	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00625	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0062d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00631	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _mid_z$13[ebp], xmm0

; 1379 : 				float mid_x = 0.5*(dx0+dx1);

  00639	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  0063e	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _dx1$[ebp]
  00643	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00647	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0064f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00653	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _mid_x$12[ebp], xmm0

; 1380 : 			   float mid_y = (this_row_ptr[0]+this_row_ptr[1]+next_row_ptr[0]+next_row_ptr[1])/4.0;

  0065b	b8 04 00 00 00	 mov	 eax, 4
  00660	6b c8 00	 imul	 ecx, eax, 0
  00663	ba 04 00 00 00	 mov	 edx, 4
  00668	c1 e2 00	 shl	 edx, 0
  0066b	8b 45 a0	 mov	 eax, DWORD PTR _this_row_ptr$[ebp]
  0066e	8b 75 a0	 mov	 esi, DWORD PTR _this_row_ptr$[ebp]
  00671	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00676	f3 0f 58 04 16	 addss	 xmm0, DWORD PTR [esi+edx]
  0067b	b9 04 00 00 00	 mov	 ecx, 4
  00680	6b d1 00	 imul	 edx, ecx, 0
  00683	8b 45 9c	 mov	 eax, DWORD PTR _next_row_ptr$[ebp]
  00686	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  0068b	b9 04 00 00 00	 mov	 ecx, 4
  00690	c1 e1 00	 shl	 ecx, 0
  00693	8b 55 9c	 mov	 edx, DWORD PTR _next_row_ptr$[ebp]
  00696	f3 0f 58 04 0a	 addss	 xmm0, DWORD PTR [edx+ecx]
  0069b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0069f	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4010000000000000
  006a7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006ab	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _mid_y$11[ebp], xmm0

; 1381 : 			                        
; 1382 : 			   terrain_elev = (this_row_ptr[0]+this_row_ptr[1]+mid_y)/3.0;

  006b3	b8 04 00 00 00	 mov	 eax, 4
  006b8	6b c8 00	 imul	 ecx, eax, 0
  006bb	ba 04 00 00 00	 mov	 edx, 4
  006c0	c1 e2 00	 shl	 edx, 0
  006c3	8b 45 a0	 mov	 eax, DWORD PTR _this_row_ptr$[ebp]
  006c6	8b 75 a0	 mov	 esi, DWORD PTR _this_row_ptr$[ebp]
  006c9	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  006ce	f3 0f 58 04 16	 addss	 xmm0, DWORD PTR [esi+edx]
  006d3	f3 0f 58 85 4c
	ff ff ff	 addss	 xmm0, DWORD PTR _mid_y$11[ebp]
  006db	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  006df	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4008000000000000
  006e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006eb	f3 0f 11 45 88	 movss	 DWORD PTR _terrain_elev$[ebp], xmm0

; 1383 : 			   c = COLOUR_SCALE(terrain_elev);

  006f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42800000
  006f8	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _terrain_elev$[ebp]
  006fd	f3 0f 5e 45 84	 divss	 xmm0, DWORD PTR _elevation_factor$[ebp]
  00702	f3 0f 2c c0	 cvttss2si eax, xmm0
  00706	83 c0 01	 add	 eax, 1
  00709	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
  0070f	c7 85 04 ff ff
	ff 40 00 00 00	 mov	 DWORD PTR $T9[ebp], 64	; 00000040H
  00719	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0071f	51		 push	 ecx
  00720	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR $T9[ebp]
  00726	52		 push	 edx
  00727	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  0072c	8b 00		 mov	 eax, DWORD PTR [eax]
  0072e	89 85 64 ff ff
	ff		 mov	 DWORD PTR _c$17[ebp], eax

; 1384 : 			  	GET_TERRAIN_COLOUR(terrain_col, c, aspect);

  00734	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _terrain_elev$[ebp]
  00739	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00740	76 59		 jbe	 SHORT $LN27@draw_tsd_t
  00742	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _c$17[ebp]
  00748	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A
  0074e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00751	89 55 80	 mov	 DWORD PTR _terrain_col$[ebp], edx
  00754	0f b6 45 82	 movzx	 eax, BYTE PTR _terrain_col$[ebp+2]
  00758	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0075c	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00764	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00768	88 4d 82	 mov	 BYTE PTR _terrain_col$[ebp+2], cl
  0076b	0f b6 45 81	 movzx	 eax, BYTE PTR _terrain_col$[ebp+1]
  0076f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00773	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  0077b	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0077f	88 4d 81	 mov	 BYTE PTR _terrain_col$[ebp+1], cl
  00782	0f b6 45 80	 movzx	 eax, BYTE PTR _terrain_col$[ebp]
  00786	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0078a	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00792	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00796	88 4d 80	 mov	 BYTE PTR _terrain_col$[ebp], cl
  00799	eb 14		 jmp	 SHORT $LN28@draw_tsd_t
$LN27@draw_tsd_t:
  0079b	b8 04 00 00 00	 mov	 eax, 4
  007a0	6b c8 00	 imul	 ecx, eax, 0
  007a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A
  007a9	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  007ac	89 45 80	 mov	 DWORD PTR _terrain_col$[ebp], eax
$LN28@draw_tsd_t:

; 1385 : 			   draw_2d_filled_triangle (dx0,dz0,mid_x,mid_z,dx1,dz0,terrain_col);

  007af	8b 45 80	 mov	 eax, DWORD PTR _terrain_col$[ebp]
  007b2	50		 push	 eax
  007b3	51		 push	 ecx
  007b4	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  007b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007be	51		 push	 ecx
  007bf	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  007c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c9	51		 push	 ecx
  007ca	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _mid_z$13[ebp]
  007d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d7	51		 push	 ecx
  007d8	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _mid_x$12[ebp]
  007e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e5	51		 push	 ecx
  007e6	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  007eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f0	51		 push	 ecx
  007f1	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  007f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fb	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 1386 : 			                              
; 1387 : 			   terrain_elev = (this_row_ptr[1]+next_row_ptr[1]+mid_y)/3.0;

  00800	b8 04 00 00 00	 mov	 eax, 4
  00805	c1 e0 00	 shl	 eax, 0
  00808	b9 04 00 00 00	 mov	 ecx, 4
  0080d	c1 e1 00	 shl	 ecx, 0
  00810	8b 55 a0	 mov	 edx, DWORD PTR _this_row_ptr$[ebp]
  00813	8b 75 9c	 mov	 esi, DWORD PTR _next_row_ptr$[ebp]
  00816	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0081b	f3 0f 58 04 0e	 addss	 xmm0, DWORD PTR [esi+ecx]
  00820	f3 0f 58 85 4c
	ff ff ff	 addss	 xmm0, DWORD PTR _mid_y$11[ebp]
  00828	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0082c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4008000000000000
  00834	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00838	f3 0f 11 45 88	 movss	 DWORD PTR _terrain_elev$[ebp], xmm0

; 1388 : 			   c = COLOUR_SCALE(terrain_elev);

  0083d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42800000
  00845	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _terrain_elev$[ebp]
  0084a	f3 0f 5e 45 84	 divss	 xmm0, DWORD PTR _elevation_factor$[ebp]
  0084f	f3 0f 2c c0	 cvttss2si eax, xmm0
  00853	83 c0 01	 add	 eax, 1
  00856	89 85 00 ff ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  0085c	c7 85 fc fe ff
	ff 40 00 00 00	 mov	 DWORD PTR $T7[ebp], 64	; 00000040H
  00866	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0086c	51		 push	 ecx
  0086d	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  00873	52		 push	 edx
  00874	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00879	8b 00		 mov	 eax, DWORD PTR [eax]
  0087b	89 85 64 ff ff
	ff		 mov	 DWORD PTR _c$17[ebp], eax

; 1389 : 			  	GET_TERRAIN_COLOUR(terrain_col, c, aspect);

  00881	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _terrain_elev$[ebp]
  00886	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0088d	76 59		 jbe	 SHORT $LN29@draw_tsd_t
  0088f	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _c$17[ebp]
  00895	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A
  0089b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0089e	89 55 80	 mov	 DWORD PTR _terrain_col$[ebp], edx
  008a1	0f b6 45 82	 movzx	 eax, BYTE PTR _terrain_col$[ebp+2]
  008a5	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  008a9	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  008b1	f3 0f 2c c8	 cvttss2si ecx, xmm0
  008b5	88 4d 82	 mov	 BYTE PTR _terrain_col$[ebp+2], cl
  008b8	0f b6 45 81	 movzx	 eax, BYTE PTR _terrain_col$[ebp+1]
  008bc	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  008c0	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  008c8	f3 0f 2c c8	 cvttss2si ecx, xmm0
  008cc	88 4d 81	 mov	 BYTE PTR _terrain_col$[ebp+1], cl
  008cf	0f b6 45 80	 movzx	 eax, BYTE PTR _terrain_col$[ebp]
  008d3	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  008d7	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  008df	f3 0f 2c c8	 cvttss2si ecx, xmm0
  008e3	88 4d 80	 mov	 BYTE PTR _terrain_col$[ebp], cl
  008e6	eb 14		 jmp	 SHORT $LN30@draw_tsd_t
$LN29@draw_tsd_t:
  008e8	b8 04 00 00 00	 mov	 eax, 4
  008ed	6b c8 00	 imul	 ecx, eax, 0
  008f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A
  008f6	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  008f9	89 45 80	 mov	 DWORD PTR _terrain_col$[ebp], eax
$LN30@draw_tsd_t:

; 1390 : 			   draw_2d_filled_triangle (dx1,dz0,mid_x,mid_z,dx1,dz1,terrain_col);

  008fc	8b 45 80	 mov	 eax, DWORD PTR _terrain_col$[ebp]
  008ff	50		 push	 eax
  00900	51		 push	 ecx
  00901	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  00906	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090b	51		 push	 ecx
  0090c	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  00911	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00916	51		 push	 ecx
  00917	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _mid_z$13[ebp]
  0091f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00924	51		 push	 ecx
  00925	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _mid_x$12[ebp]
  0092d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00932	51		 push	 ecx
  00933	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  00938	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093d	51		 push	 ecx
  0093e	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  00943	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00948	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 1391 : 			                              
; 1392 : 			   terrain_elev = (this_row_ptr[0]+next_row_ptr[0]+mid_y)/3.0;

  0094d	b8 04 00 00 00	 mov	 eax, 4
  00952	6b c8 00	 imul	 ecx, eax, 0
  00955	ba 04 00 00 00	 mov	 edx, 4
  0095a	6b c2 00	 imul	 eax, edx, 0
  0095d	8b 55 a0	 mov	 edx, DWORD PTR _this_row_ptr$[ebp]
  00960	8b 75 9c	 mov	 esi, DWORD PTR _next_row_ptr$[ebp]
  00963	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00968	f3 0f 58 04 06	 addss	 xmm0, DWORD PTR [esi+eax]
  0096d	f3 0f 58 85 4c
	ff ff ff	 addss	 xmm0, DWORD PTR _mid_y$11[ebp]
  00975	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00979	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4008000000000000
  00981	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00985	f3 0f 11 45 88	 movss	 DWORD PTR _terrain_elev$[ebp], xmm0

; 1393 : 			   c = COLOUR_SCALE(terrain_elev);

  0098a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42800000
  00992	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _terrain_elev$[ebp]
  00997	f3 0f 5e 45 84	 divss	 xmm0, DWORD PTR _elevation_factor$[ebp]
  0099c	f3 0f 2c c0	 cvttss2si eax, xmm0
  009a0	83 c0 01	 add	 eax, 1
  009a3	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  009a9	c7 85 f4 fe ff
	ff 40 00 00 00	 mov	 DWORD PTR $T5[ebp], 64	; 00000040H
  009b3	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  009b9	51		 push	 ecx
  009ba	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  009c0	52		 push	 edx
  009c1	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  009c6	8b 00		 mov	 eax, DWORD PTR [eax]
  009c8	89 85 64 ff ff
	ff		 mov	 DWORD PTR _c$17[ebp], eax

; 1394 : 			  	GET_TERRAIN_COLOUR(terrain_col, c, aspect);

  009ce	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _terrain_elev$[ebp]
  009d3	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  009da	76 59		 jbe	 SHORT $LN31@draw_tsd_t
  009dc	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _c$17[ebp]
  009e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A
  009e8	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  009eb	89 55 80	 mov	 DWORD PTR _terrain_col$[ebp], edx
  009ee	0f b6 45 82	 movzx	 eax, BYTE PTR _terrain_col$[ebp+2]
  009f2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  009f6	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  009fe	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00a02	88 4d 82	 mov	 BYTE PTR _terrain_col$[ebp+2], cl
  00a05	0f b6 45 81	 movzx	 eax, BYTE PTR _terrain_col$[ebp+1]
  00a09	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00a0d	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00a15	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00a19	88 4d 81	 mov	 BYTE PTR _terrain_col$[ebp+1], cl
  00a1c	0f b6 45 80	 movzx	 eax, BYTE PTR _terrain_col$[ebp]
  00a20	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00a24	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00a2c	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00a30	88 4d 80	 mov	 BYTE PTR _terrain_col$[ebp], cl
  00a33	eb 14		 jmp	 SHORT $LN32@draw_tsd_t
$LN31@draw_tsd_t:
  00a35	b8 04 00 00 00	 mov	 eax, 4
  00a3a	6b c8 00	 imul	 ecx, eax, 0
  00a3d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A
  00a43	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a46	89 45 80	 mov	 DWORD PTR _terrain_col$[ebp], eax
$LN32@draw_tsd_t:

; 1395 : 			   draw_2d_filled_triangle (dx0,dz0,dx0,dz1,mid_x,mid_z,terrain_col);

  00a49	8b 45 80	 mov	 eax, DWORD PTR _terrain_col$[ebp]
  00a4c	50		 push	 eax
  00a4d	51		 push	 ecx
  00a4e	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _mid_z$13[ebp]
  00a56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5b	51		 push	 ecx
  00a5c	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _mid_x$12[ebp]
  00a64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a69	51		 push	 ecx
  00a6a	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  00a6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a74	51		 push	 ecx
  00a75	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  00a7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7f	51		 push	 ecx
  00a80	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  00a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8a	51		 push	 ecx
  00a8b	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  00a90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a95	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 1396 : 			                              
; 1397 : 			   terrain_elev = (next_row_ptr[0]+next_row_ptr[1]+mid_y)/3.0;

  00a9a	b8 04 00 00 00	 mov	 eax, 4
  00a9f	6b c8 00	 imul	 ecx, eax, 0
  00aa2	ba 04 00 00 00	 mov	 edx, 4
  00aa7	c1 e2 00	 shl	 edx, 0
  00aaa	8b 45 9c	 mov	 eax, DWORD PTR _next_row_ptr$[ebp]
  00aad	8b 75 9c	 mov	 esi, DWORD PTR _next_row_ptr$[ebp]
  00ab0	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00ab5	f3 0f 58 04 16	 addss	 xmm0, DWORD PTR [esi+edx]
  00aba	f3 0f 58 85 4c
	ff ff ff	 addss	 xmm0, DWORD PTR _mid_y$11[ebp]
  00ac2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00ac6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4008000000000000
  00ace	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ad2	f3 0f 11 45 88	 movss	 DWORD PTR _terrain_elev$[ebp], xmm0

; 1398 : 			   c = COLOUR_SCALE(terrain_elev);

  00ad7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42800000
  00adf	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _terrain_elev$[ebp]
  00ae4	f3 0f 5e 45 84	 divss	 xmm0, DWORD PTR _elevation_factor$[ebp]
  00ae9	f3 0f 2c c0	 cvttss2si eax, xmm0
  00aed	83 c0 01	 add	 eax, 1
  00af0	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00af6	c7 85 ec fe ff
	ff 40 00 00 00	 mov	 DWORD PTR $T3[ebp], 64	; 00000040H
  00b00	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00b06	51		 push	 ecx
  00b07	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  00b0d	52		 push	 edx
  00b0e	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00b13	8b 00		 mov	 eax, DWORD PTR [eax]
  00b15	89 85 64 ff ff
	ff		 mov	 DWORD PTR _c$17[ebp], eax

; 1399 : 			  	GET_TERRAIN_COLOUR(terrain_col, c, aspect);

  00b1b	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _terrain_elev$[ebp]
  00b20	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00b27	76 59		 jbe	 SHORT $LN33@draw_tsd_t
  00b29	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _c$17[ebp]
  00b2f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A
  00b35	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00b38	89 55 80	 mov	 DWORD PTR _terrain_col$[ebp], edx
  00b3b	0f b6 45 82	 movzx	 eax, BYTE PTR _terrain_col$[ebp+2]
  00b3f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00b43	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00b4b	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00b4f	88 4d 82	 mov	 BYTE PTR _terrain_col$[ebp+2], cl
  00b52	0f b6 45 81	 movzx	 eax, BYTE PTR _terrain_col$[ebp+1]
  00b56	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00b5a	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00b62	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00b66	88 4d 81	 mov	 BYTE PTR _terrain_col$[ebp+1], cl
  00b69	0f b6 45 80	 movzx	 eax, BYTE PTR _terrain_col$[ebp]
  00b6d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00b71	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00b79	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00b7d	88 4d 80	 mov	 BYTE PTR _terrain_col$[ebp], cl
  00b80	eb 14		 jmp	 SHORT $LN34@draw_tsd_t
$LN33@draw_tsd_t:
  00b82	b8 04 00 00 00	 mov	 eax, 4
  00b87	6b c8 00	 imul	 ecx, eax, 0
  00b8a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A
  00b90	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b93	89 45 80	 mov	 DWORD PTR _terrain_col$[ebp], eax
$LN34@draw_tsd_t:

; 1400 : 			   draw_2d_filled_triangle (dx0,dz1,dx1,dz1,mid_x,mid_z,terrain_col);

  00b96	8b 45 80	 mov	 eax, DWORD PTR _terrain_col$[ebp]
  00b99	50		 push	 eax
  00b9a	51		 push	 ecx
  00b9b	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _mid_z$13[ebp]
  00ba3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba8	51		 push	 ecx
  00ba9	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _mid_x$12[ebp]
  00bb1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb6	51		 push	 ecx
  00bb7	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  00bbc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc1	51		 push	 ecx
  00bc2	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  00bc7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bcc	51		 push	 ecx
  00bcd	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  00bd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd7	51		 push	 ecx
  00bd8	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  00bdd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be2	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 1401 : 			}                             
; 1402 : 			else

  00be7	e9 aa 01 00 00	 jmp	 $LN26@draw_tsd_t
$LN25@draw_tsd_t:

; 1403 : 			{                            
; 1404 : 			   terrain_elev = (this_row_ptr[0]+this_row_ptr[1]+next_row_ptr[0]+next_row_ptr[1])/4.0;

  00bec	b8 04 00 00 00	 mov	 eax, 4
  00bf1	6b c8 00	 imul	 ecx, eax, 0
  00bf4	ba 04 00 00 00	 mov	 edx, 4
  00bf9	c1 e2 00	 shl	 edx, 0
  00bfc	8b 45 a0	 mov	 eax, DWORD PTR _this_row_ptr$[ebp]
  00bff	8b 75 a0	 mov	 esi, DWORD PTR _this_row_ptr$[ebp]
  00c02	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00c07	f3 0f 58 04 16	 addss	 xmm0, DWORD PTR [esi+edx]
  00c0c	b9 04 00 00 00	 mov	 ecx, 4
  00c11	6b d1 00	 imul	 edx, ecx, 0
  00c14	8b 45 9c	 mov	 eax, DWORD PTR _next_row_ptr$[ebp]
  00c17	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  00c1c	b9 04 00 00 00	 mov	 ecx, 4
  00c21	c1 e1 00	 shl	 ecx, 0
  00c24	8b 55 9c	 mov	 edx, DWORD PTR _next_row_ptr$[ebp]
  00c27	f3 0f 58 04 0a	 addss	 xmm0, DWORD PTR [edx+ecx]
  00c2c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00c30	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4010000000000000
  00c38	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c3c	f3 0f 11 45 88	 movss	 DWORD PTR _terrain_elev$[ebp], xmm0

; 1405 : 		   	c = COLOUR_SCALE(terrain_elev);

  00c41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42800000
  00c49	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _terrain_elev$[ebp]
  00c4e	f3 0f 5e 45 84	 divss	 xmm0, DWORD PTR _elevation_factor$[ebp]
  00c53	f3 0f 2c c0	 cvttss2si eax, xmm0
  00c57	83 c0 01	 add	 eax, 1
  00c5a	89 85 e8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00c60	c7 85 e4 fe ff
	ff 40 00 00 00	 mov	 DWORD PTR $T1[ebp], 64	; 00000040H
  00c6a	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00c70	51		 push	 ecx
  00c71	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00c77	52		 push	 edx
  00c78	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00c7d	8b 00		 mov	 eax, DWORD PTR [eax]
  00c7f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _c$17[ebp], eax

; 1406 : 		   	GET_TERRAIN_COLOUR(terrain_col, c, aspect);

  00c85	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _terrain_elev$[ebp]
  00c8a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00c91	76 59		 jbe	 SHORT $LN35@draw_tsd_t
  00c93	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _c$17[ebp]
  00c99	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A
  00c9f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00ca2	89 55 80	 mov	 DWORD PTR _terrain_col$[ebp], edx
  00ca5	0f b6 45 82	 movzx	 eax, BYTE PTR _terrain_col$[ebp+2]
  00ca9	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00cad	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00cb5	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00cb9	88 4d 82	 mov	 BYTE PTR _terrain_col$[ebp+2], cl
  00cbc	0f b6 45 81	 movzx	 eax, BYTE PTR _terrain_col$[ebp+1]
  00cc0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00cc4	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00ccc	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00cd0	88 4d 81	 mov	 BYTE PTR _terrain_col$[ebp+1], cl
  00cd3	0f b6 45 80	 movzx	 eax, BYTE PTR _terrain_col$[ebp]
  00cd7	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00cdb	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _aspect$15[ebp]
  00ce3	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00ce7	88 4d 80	 mov	 BYTE PTR _terrain_col$[ebp], cl
  00cea	eb 14		 jmp	 SHORT $LN36@draw_tsd_t
$LN35@draw_tsd_t:
  00cec	b8 04 00 00 00	 mov	 eax, 4
  00cf1	6b c8 00	 imul	 ecx, eax, 0
  00cf4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?map_palette@@3PAUREAL_COLOUR@@A
  00cfa	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00cfd	89 45 80	 mov	 DWORD PTR _terrain_col$[ebp], eax
$LN36@draw_tsd_t:

; 1407 : 			   draw_2d_filled_triangle (dx0,dz0,dx1,dz1,dx1,dz0,terrain_col);

  00d00	8b 45 80	 mov	 eax, DWORD PTR _terrain_col$[ebp]
  00d03	50		 push	 eax
  00d04	51		 push	 ecx
  00d05	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  00d0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d0f	51		 push	 ecx
  00d10	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  00d15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1a	51		 push	 ecx
  00d1b	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  00d20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d25	51		 push	 ecx
  00d26	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  00d2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d30	51		 push	 ecx
  00d31	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  00d36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d3b	51		 push	 ecx
  00d3c	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  00d41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d46	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 1408 : 			   draw_2d_filled_triangle (dx0,dz0,dx0,dz1,dx1,dz1,terrain_col);

  00d4b	8b 45 80	 mov	 eax, DWORD PTR _terrain_col$[ebp]
  00d4e	50		 push	 eax
  00d4f	51		 push	 ecx
  00d50	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  00d55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5a	51		 push	 ecx
  00d5b	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  00d60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d65	51		 push	 ecx
  00d66	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  00d6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d70	51		 push	 ecx
  00d71	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  00d76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7b	51		 push	 ecx
  00d7c	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  00d81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d86	51		 push	 ecx
  00d87	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  00d8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d91	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle
$LN26@draw_tsd_t:

; 1409 :   
; 1410 : 			}
; 1411 : 				//                   
; 1412 : 				// next column       
; 1413 : 				//                   
; 1414 :                                  
; 1415 : 				dx0 += dx_grid;      

  00d96	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _dx0$[ebp]
  00d9b	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _dx_grid$[ebp]
  00da0	f3 0f 11 45 c0	 movss	 DWORD PTR _dx0$[ebp], xmm0

; 1416 : 				dx1 += dx_grid;      

  00da5	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  00daa	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _dx_grid$[ebp]
  00daf	f3 0f 11 45 b8	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1417 :                                  
; 1418 : 				this_row_ptr += step;

  00db4	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _step$[ebp]
  00dba	8b 4d a0	 mov	 ecx, DWORD PTR _this_row_ptr$[ebp]
  00dbd	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00dc0	89 55 a0	 mov	 DWORD PTR _this_row_ptr$[ebp], edx

; 1419 : 				next_row_ptr += step;

  00dc3	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _step$[ebp]
  00dc9	8b 4d 9c	 mov	 ecx, DWORD PTR _next_row_ptr$[ebp]
  00dcc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00dcf	89 55 9c	 mov	 DWORD PTR _next_row_ptr$[ebp], edx

; 1420 :                                  
; 1421 : 				//                   
; 1422 : 				// save old aspect for averaging
; 1423 : 				//                   
; 1424 : 				if (doaspect)        

  00dd2	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _doaspect$[ebp], 0
  00dd9	74 26		 je	 SHORT $LN37@draw_tsd_t

; 1425 : 	  			{                    
; 1426 : 	            old_aspect_x = oa;//aspect;            

  00ddb	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _oa$16[ebp]
  00de3	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _old_aspect_x$14[ebp], xmm0

; 1427 : 					aspectrow[aspect_index] = oa;//aspect;

  00deb	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _aspect_index$[ebp]
  00df1	8b 4d 90	 mov	 ecx, DWORD PTR _aspectrow$[ebp]
  00df4	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _oa$16[ebp]
  00dfc	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0
$LN37@draw_tsd_t:

; 1428 : 				}	                  
; 1429 : 			}                       

  00e01	e9 81 f6 ff ff	 jmp	 $LN5@draw_tsd_t
$LN6@draw_tsd_t:

; 1430 :                                  
; 1431 : 			if (doaspect)           

  00e06	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _doaspect$[ebp], 0
  00e0d	74 43		 je	 SHORT $LN9@draw_tsd_t

; 1432 : 	  		{                       
; 1433 : 				for (aspect_index = 0; aspect_index < nr_aspect_steps; aspect_index++)

  00e0f	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _aspect_index$[ebp], 0
  00e19	eb 0f		 jmp	 SHORT $LN10@draw_tsd_t
$LN8@draw_tsd_t:
  00e1b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _aspect_index$[ebp]
  00e21	83 c0 01	 add	 eax, 1
  00e24	89 85 78 ff ff
	ff		 mov	 DWORD PTR _aspect_index$[ebp], eax
$LN10@draw_tsd_t:
  00e2a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _aspect_index$[ebp]
  00e30	3b 85 74 ff ff
	ff		 cmp	 eax, DWORD PTR _nr_aspect_steps$[ebp]
  00e36	7d 1a		 jge	 SHORT $LN9@draw_tsd_t

; 1434 : 					old_aspectrow[aspect_index] = aspectrow[aspect_index];

  00e38	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _aspect_index$[ebp]
  00e3e	8b 4d 8c	 mov	 ecx, DWORD PTR _old_aspectrow$[ebp]
  00e41	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _aspect_index$[ebp]
  00e47	8b 75 90	 mov	 esi, DWORD PTR _aspectrow$[ebp]
  00e4a	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00e4d	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
  00e50	eb c9		 jmp	 SHORT $LN8@draw_tsd_t
$LN9@draw_tsd_t:

; 1435 : 			}                       
; 1436 : 			// copy all the old stuff	
; 1437 :                                  
; 1438 : 			//                      
; 1439 : 			// next row             
; 1440 : 			//                      
; 1441 :                                  
; 1442 : 			dz0 += dz_grid;         

  00e52	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _dz0$[ebp]
  00e57	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR _dz_grid$[ebp]
  00e5c	f3 0f 11 45 bc	 movss	 DWORD PTR _dz0$[ebp], xmm0

; 1443 : 			dz1 += dz_grid;         

  00e61	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  00e66	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR _dz_grid$[ebp]
  00e6b	f3 0f 11 45 b4	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1444 :                                  
; 1445 : 			this_row_start_ptr += row_add_on;

  00e70	8b 45 f4	 mov	 eax, DWORD PTR _row_add_on$[ebp]
  00e73	8b 4d 98	 mov	 ecx, DWORD PTR _this_row_start_ptr$[ebp]
  00e76	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00e79	89 55 98	 mov	 DWORD PTR _this_row_start_ptr$[ebp], edx

; 1446 : 			next_row_start_ptr += row_add_on;

  00e7c	8b 45 f4	 mov	 eax, DWORD PTR _row_add_on$[ebp]
  00e7f	8b 4d 94	 mov	 ecx, DWORD PTR _next_row_start_ptr$[ebp]
  00e82	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00e85	89 55 94	 mov	 DWORD PTR _next_row_start_ptr$[ebp], edx

; 1447 : 		}                          

  00e88	e9 ab f5 ff ff	 jmp	 $LN2@draw_tsd_t
$LN3@draw_tsd_t:

; 1448 :                                  
; 1449 : 		//VJ 030511 free rows      
; 1450 : 		if (doaspect)              

  00e8d	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _doaspect$[ebp], 0
  00e94	74 28		 je	 SHORT $LN39@draw_tsd_t

; 1451 : 	  	{                          
; 1452 : 			free(aspectrow);        

  00e96	8b 45 90	 mov	 eax, DWORD PTR _aspectrow$[ebp]
  00e99	50		 push	 eax
  00e9a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00ea0	83 c4 04	 add	 esp, 4

; 1453 : 			aspectrow = NULL;       

  00ea3	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _aspectrow$[ebp], 0

; 1454 : 			free(old_aspectrow);    

  00eaa	8b 45 8c	 mov	 eax, DWORD PTR _old_aspectrow$[ebp]
  00ead	50		 push	 eax
  00eae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00eb4	83 c4 04	 add	 esp, 4

; 1455 : 			old_aspectrow = NULL;   

  00eb7	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _old_aspectrow$[ebp], 0
$LN39@draw_tsd_t:

; 1456 : 		}                          
; 1457 : 	}                             
; 1458 : 	
; 1459 : 	set_2d_window_rotation (mfd_env, 0.0);

  00ebe	51		 push	 ecx
  00ebf	0f 57 c0	 xorps	 xmm0, xmm0
  00ec2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec7	8b 45 08	 mov	 eax, DWORD PTR _mfd_env$[ebp]
  00eca	50		 push	 eax
  00ecb	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1460 : }                                

  00ed0	5f		 pop	 edi
  00ed1	5e		 pop	 esi
  00ed2	5b		 pop	 ebx
  00ed3	8b e5		 mov	 esp, ebp
  00ed5	5d		 pop	 ebp
  00ed6	c2 1c 00	 ret	 28			; 0000001cH
?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z ENDP ; draw_tsd_terrain_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?atan@@YGMM@Z PROC					; atan, COMDAT

; 46   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 47   : 	return (_CSTD atanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _atanf
  00019	83 c4 04	 add	 esp, 4

; 48   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?atan@@YGMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 638  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 639  :             return (float)atan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _atan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 640  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
