; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\camera\cm_rvrs.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_sqrtf
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?store_reverse_tactical_camera_values@@YGXXZ	; store_reverse_tactical_camera_values
PUBLIC	?restore_reverse_tactical_camera_values@@YGXXZ	; restore_reverse_tactical_camera_values
PUBLIC	?set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z ; set_reverse_tactical_camera_values
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??store_reverse_tactical_camera_values@@YGXXZ@4JA ; `store_reverse_tactical_camera_values'::`1'::__LINE__Var
PUBLIC	??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@	; `string'
PUBLIC	?__LINE__Var@?0??restore_reverse_tactical_camera_values@@YGXXZ@4JA ; `restore_reverse_tactical_camera_values'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA ; `set_reverse_tactical_camera_values'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@		; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f000000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@43480000
PUBLIC	__real@bf800000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?normalise_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_3d_vector
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_identity_matrix3x3@@YGXQAY02M@Z:PROC	; get_identity_matrix3x3
EXTRN	?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z:PROC ; get_matrix3x3_from_unit_vec3d
EXTRN	?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z:PROC ; get_object_3d_bounding_box
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?camera_entity@@3PAUENTITY@@A:DWORD		; camera_entity
EXTRN	__fltused:DWORD
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@
CONST	SEGMENT
??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@ DB 'z_min < z_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA DD 078H ; `set_reverse_tactical_camera_values'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??restore_reverse_tactical_camera_values@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??restore_reverse_tactical_camera_values@@YGXXZ@4JA DD 064H ; `restore_reverse_tactical_camera_values'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@
CONST	SEGMENT
??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@ DB 'get_camera_entity ()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\camera\cm_rvr'
	DB	's.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??store_reverse_tactical_camera_values@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??store_reverse_tactical_camera_values@@YGXXZ@4JA DD 050H ; `store_reverse_tactical_camera_values'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_rvrs.c
;	COMDAT ?set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z
_TEXT	SEGMENT
tv449 = -168						; size = 8
tv397 = -168						; size = 4
tv237 = -168						; size = 4
tv204 = -168						; size = 4
tv184 = -168						; size = 4
tv145 = -168						; size = 4
tv92 = -168						; size = 4
tv568 = -164						; size = 4
tv502 = -164						; size = 4
tv389 = -164						; size = 4
tv230 = -164						; size = 4
tv196 = -164						; size = 4
tv176 = -164						; size = 4
tv137 = -164						; size = 4
tv85 = -164						; size = 4
$T1 = -160						; size = 4
$T2 = -156						; size = 4
$T3 = -152						; size = 4
_direction$ = -84					; size = 12
_target_position$ = -72					; size = 12
_source_position$ = -60					; size = 12
_dz$ = -48						; size = 4
_dy$ = -44						; size = 4
_dx$ = -40						; size = 4
_rad_alt$ = -36						; size = 4
_z_max$ = -32						; size = 4
_z_min$ = -28						; size = 4
_radius$ = -24						; size = 4
_length$ = -20						; size = 4
_bounding_box$ = -16					; size = 4
_object_3d_index$ = -12					; size = 4
_airborne$ = -8						; size = 4
_raw$ = -4						; size = 4
_source$ = 8						; size = 4
_target$ = 12						; size = 4
?set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z PROC ; set_reverse_tactical_camera_values, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 121  : 	camera
; 122  : 		*raw;
; 123  : 
; 124  : 	int
; 125  : 		airborne;
; 126  : 
; 127  : 	object_3d_index_numbers
; 128  : 		object_3d_index;
; 129  : 
; 130  : 	object_3d_bounds
; 131  : 		*bounding_box;
; 132  : 
; 133  : 	float
; 134  : 		length,
; 135  : 		radius,
; 136  : 		z_min,
; 137  : 		z_max,
; 138  : 		rad_alt,
; 139  : 		dx,
; 140  : 		dy,
; 141  : 		dz;
; 142  : 
; 143  : 	vec3d
; 144  : 		source_position,
; 145  : 		target_position,
; 146  : 		direction;
; 147  : 
; 148  : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@set_revers
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  00017	83 c0 1c	 add	 eax, 28			; 0000001cH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_revers:

; 149  : 
; 150  : 	ASSERT (target);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@set_revers
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  00035	83 c0 1e	 add	 eax, 30			; 0000001eH
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_revers:

; 151  : 
; 152  : 	ASSERT (get_camera_entity ());

  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?camera_entity@@3PAUENTITY@@A, 0 ; camera_entity
  0004f	75 18		 jne	 SHORT $LN4@set_revers
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  00056	83 c0 20	 add	 eax, 32			; 00000020H
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@set_revers:

; 153  : 
; 154  : 	raw = (camera *) get_local_entity_data (get_camera_entity ());

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?camera_entity@@3PAUENTITY@@A ; camera_entity
  0006e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00071	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 155  : 	
; 156  : 	//
; 157  : 	// get camera position
; 158  : 	//
; 159  : 
; 160  : 	if (get_local_entity_int_value (target, INT_TYPE_IDENTIFY_FIXED))

  00074	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  00078	74 0d		 je	 SHORT $LN22@set_revers
  0007a	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  0007d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007f	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv85[ebp], ecx
  00085	eb 20		 jmp	 SHORT $LN23@set_revers
$LN22@set_revers:
  00087	68 a0 00 00 00	 push	 160			; 000000a0H
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00097	52		 push	 edx
  00098	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009d	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN23@set_revers:
  000a7	b8 01 00 00 00	 mov	 eax, 1
  000ac	85 c0		 test	 eax, eax
  000ae	74 0c		 je	 SHORT $LN24@set_revers
  000b0	c7 85 58 ff ff
	ff 5a 00 00 00	 mov	 DWORD PTR tv92[ebp], 90	; 0000005aH
  000ba	eb 20		 jmp	 SHORT $LN25@set_revers
$LN24@set_revers:
  000bc	68 a0 00 00 00	 push	 160			; 000000a0H
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d2	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv92[ebp], 0
$LN25@set_revers:
  000dc	6a 5a		 push	 90			; 0000005aH
  000de	8b 55 0c	 mov	 edx, DWORD PTR _target$[ebp]
  000e1	52		 push	 edx
  000e2	69 85 5c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv85[ebp], 1116
  000ec	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000f2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000f9	ff d2		 call	 edx
  000fb	85 c0		 test	 eax, eax
  000fd	0f 84 2c 01 00
	00		 je	 $LN5@set_revers

; 161  : 	{
; 162  : 		object_3d_index = get_local_entity_int_value (target, INT_TYPE_OBJECT_3D_SHAPE);

  00103	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  00107	74 0d		 je	 SHORT $LN26@set_revers
  00109	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  0010c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010e	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv137[ebp], ecx
  00114	eb 24		 jmp	 SHORT $LN27@set_revers
$LN26@set_revers:
  00116	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  0011c	83 c2 2a	 add	 edx, 42			; 0000002aH
  0011f	52		 push	 edx
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00130	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN27@set_revers:
  0013a	b9 01 00 00 00	 mov	 ecx, 1
  0013f	85 c9		 test	 ecx, ecx
  00141	74 0c		 je	 SHORT $LN28@set_revers
  00143	c7 85 58 ff ff
	ff 92 00 00 00	 mov	 DWORD PTR tv145[ebp], 146 ; 00000092H
  0014d	eb 24		 jmp	 SHORT $LN29@set_revers
$LN28@set_revers:
  0014f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  00155	83 c2 2a	 add	 edx, 42			; 0000002aH
  00158	52		 push	 edx
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00169	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv145[ebp], 0
$LN29@set_revers:
  00173	68 92 00 00 00	 push	 146			; 00000092H
  00178	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  0017b	51		 push	 ecx
  0017c	69 95 5c ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv137[ebp], 1116
  00186	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv145[ebp]
  0018c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00193	ff d1		 call	 ecx
  00195	89 45 f4	 mov	 DWORD PTR _object_3d_index$[ebp], eax

; 163  : 
; 164  : 		bounding_box = get_object_3d_bounding_box (object_3d_index);

  00198	8b 45 f4	 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 ?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z ; get_object_3d_bounding_box
  001a1	89 45 f0	 mov	 DWORD PTR _bounding_box$[ebp], eax

; 165  : 
; 166  : 		dx = bounding_box->xmax - bounding_box->xmin;

  001a4	8b 45 f0	 mov	 eax, DWORD PTR _bounding_box$[ebp]
  001a7	8b 4d f0	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  001aa	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001af	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001b3	f3 0f 11 45 d8	 movss	 DWORD PTR _dx$[ebp], xmm0

; 167  : 		dy = bounding_box->ymax;

  001b8	8b 45 f0	 mov	 eax, DWORD PTR _bounding_box$[ebp]
  001bb	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  001c0	f3 0f 11 45 d4	 movss	 DWORD PTR _dy$[ebp], xmm0

; 168  : 		dz = bounding_box->zmax - bounding_box->zmin;

  001c5	8b 45 f0	 mov	 eax, DWORD PTR _bounding_box$[ebp]
  001c8	8b 4d f0	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  001cb	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  001d0	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  001d5	f3 0f 11 45 d0	 movss	 DWORD PTR _dz$[ebp], xmm0

; 169  : 
; 170  : 		radius = sqrt ((dx * dx) + (dy * dy) + (dz * dz)) * 2.0;

  001da	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  001df	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  001e4	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _dy$[ebp]
  001e9	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _dy$[ebp]
  001ee	f3 0f 58 c1	 addss	 xmm0, xmm1
  001f2	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _dz$[ebp]
  001f7	f3 0f 59 4d d0	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  001fc	f3 0f 58 c1	 addss	 xmm0, xmm1
  00200	51		 push	 ecx
  00201	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00206	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0020b	dd 9d 58 ff ff
	ff		 fstp	 QWORD PTR tv449[ebp]
  00211	f2 0f 10 85 58
	ff ff ff	 movsd	 xmm0, QWORD PTR tv449[ebp]
  00219	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00221	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00225	f3 0f 11 45 e8	 movss	 DWORD PTR _radius$[ebp], xmm0

; 171  : 	}
; 172  : 	else

  0022a	e9 6f 01 00 00	 jmp	 $LN6@set_revers
$LN5@set_revers:

; 173  : 	{
; 174  : 		z_min = get_local_entity_float_value (target, FLOAT_TYPE_CHASE_VIEW_MIN_DISTANCE);

  0022f	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  00233	74 0d		 je	 SHORT $LN30@set_revers
  00235	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00238	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023a	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv176[ebp], ecx
  00240	eb 24		 jmp	 SHORT $LN31@set_revers
$LN30@set_revers:
  00242	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  00248	83 c2 36	 add	 edx, 54			; 00000036H
  0024b	52		 push	 edx
  0024c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00251	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00256	50		 push	 eax
  00257	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0025c	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv176[ebp], 0
$LN31@set_revers:
  00266	b9 01 00 00 00	 mov	 ecx, 1
  0026b	85 c9		 test	 ecx, ecx
  0026d	74 0c		 je	 SHORT $LN32@set_revers
  0026f	c7 85 58 ff ff
	ff 15 00 00 00	 mov	 DWORD PTR tv184[ebp], 21 ; 00000015H
  00279	eb 24		 jmp	 SHORT $LN33@set_revers
$LN32@set_revers:
  0027b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  00281	83 c2 36	 add	 edx, 54			; 00000036H
  00284	52		 push	 edx
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0028a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00295	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv184[ebp], 0
$LN33@set_revers:
  0029f	6a 15		 push	 21			; 00000015H
  002a1	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  002a4	51		 push	 ecx
  002a5	69 95 5c ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv176[ebp], 700
  002af	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv184[ebp]
  002b5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002bc	ff d1		 call	 ecx
  002be	d9 5d e4	 fstp	 DWORD PTR _z_min$[ebp]

; 175  : 		z_max = get_local_entity_float_value (target, FLOAT_TYPE_CHASE_VIEW_MAX_DISTANCE);

  002c1	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  002c5	74 0d		 je	 SHORT $LN34@set_revers
  002c7	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  002ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cc	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv196[ebp], ecx
  002d2	eb 24		 jmp	 SHORT $LN35@set_revers
$LN34@set_revers:
  002d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  002da	83 c2 37	 add	 edx, 55			; 00000037H
  002dd	52		 push	 edx
  002de	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002e8	50		 push	 eax
  002e9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ee	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv196[ebp], 0
$LN35@set_revers:
  002f8	b9 01 00 00 00	 mov	 ecx, 1
  002fd	85 c9		 test	 ecx, ecx
  002ff	74 0c		 je	 SHORT $LN36@set_revers
  00301	c7 85 58 ff ff
	ff 13 00 00 00	 mov	 DWORD PTR tv204[ebp], 19 ; 00000013H
  0030b	eb 24		 jmp	 SHORT $LN37@set_revers
$LN36@set_revers:
  0030d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  00313	83 c2 37	 add	 edx, 55			; 00000037H
  00316	52		 push	 edx
  00317	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0031c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00327	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv204[ebp], 0
$LN37@set_revers:
  00331	6a 13		 push	 19			; 00000013H
  00333	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00336	51		 push	 ecx
  00337	69 95 5c ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv196[ebp], 700
  00341	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv204[ebp]
  00347	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0034e	ff d1		 call	 ecx
  00350	d9 5d e0	 fstp	 DWORD PTR _z_max$[ebp]

; 176  : 
; 177  : 		ASSERT (z_min < z_max);

  00353	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  00358	0f 2f 45 e4	 comiss	 xmm0, DWORD PTR _z_min$[ebp]
  0035c	77 18		 ja	 SHORT $LN7@set_revers
  0035e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  00363	83 c0 39	 add	 eax, 57			; 00000039H
  00366	50		 push	 eax
  00367	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0036c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ICMHAKLN@z_min?5?$DM?5z_max@
  00371	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@set_revers:

; 178  : 
; 179  : 		radius = ((z_max - z_min) * 0.05) + z_min;

  00376	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  0037b	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _z_min$[ebp]
  00380	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00384	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0038c	f3 0f 5a 4d e4	 cvtss2sd xmm1, DWORD PTR _z_min$[ebp]
  00391	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00395	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00399	f3 0f 11 45 e8	 movss	 DWORD PTR _radius$[ebp], xmm0
$LN6@set_revers:

; 180  : 	}
; 181  : 
; 182  : 	get_local_entity_target_point (source, &source_position);

  0039e	8d 45 c4	 lea	 eax, DWORD PTR _source_position$[ebp]
  003a1	50		 push	 eax
  003a2	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  003a5	51		 push	 ecx
  003a6	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 183  : 
; 184  : 	get_local_entity_target_point (target, &target_position);

  003ab	8d 45 b8	 lea	 eax, DWORD PTR _target_position$[ebp]
  003ae	50		 push	 eax
  003af	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  003b2	51		 push	 ecx
  003b3	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 185  : 
; 186  : 	airborne = FALSE;

  003b8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _airborne$[ebp], 0

; 187  : 
; 188  : 	if (get_local_entity_int_value (target, INT_TYPE_AIRBORNE_AIRCRAFT))

  003bf	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  003c3	74 0d		 je	 SHORT $LN38@set_revers
  003c5	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  003c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ca	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv230[ebp], ecx
  003d0	eb 20		 jmp	 SHORT $LN39@set_revers
$LN38@set_revers:
  003d2	68 bc 00 00 00	 push	 188			; 000000bcH
  003d7	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  003dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003e2	52		 push	 edx
  003e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e8	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv230[ebp], 0
$LN39@set_revers:
  003f2	b8 01 00 00 00	 mov	 eax, 1
  003f7	85 c0		 test	 eax, eax
  003f9	74 0c		 je	 SHORT $LN40@set_revers
  003fb	c7 85 58 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv237[ebp], 4
  00405	eb 20		 jmp	 SHORT $LN41@set_revers
$LN40@set_revers:
  00407	68 bc 00 00 00	 push	 188			; 000000bcH
  0040c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00411	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00417	51		 push	 ecx
  00418	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0041d	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv237[ebp], 0
$LN41@set_revers:
  00427	6a 04		 push	 4
  00429	8b 55 0c	 mov	 edx, DWORD PTR _target$[ebp]
  0042c	52		 push	 edx
  0042d	69 85 5c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv230[ebp], 1116
  00437	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  0043d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00444	ff d2		 call	 edx
  00446	85 c0		 test	 eax, eax
  00448	0f 84 b1 00 00
	00		 je	 $LN10@set_revers

; 189  : 	{
; 190  : 		if (point_inside_map_area (&target_position))

  0044e	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _target_position$[ebp]
  00453	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  0045a	0f 82 9f 00 00
	00		 jb	 $LN10@set_revers
  00460	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00468	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _target_position$[ebp]
  0046c	0f 82 8d 00 00
	00		 jb	 $LN10@set_revers
  00472	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _target_position$[ebp+8]
  00477	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  0047e	72 7f		 jb	 SHORT $LN10@set_revers
  00480	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00488	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR _target_position$[ebp+8]
  0048c	72 71		 jb	 SHORT $LN10@set_revers

; 191  : 		{
; 192  : 			rad_alt = max (target_position.y - get_3d_terrain_elevation (target_position.x, target_position.z), 0.0f);

  0048e	0f 57 c0	 xorps	 xmm0, xmm0
  00491	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  00499	6a 00		 push	 0
  0049b	51		 push	 ecx
  0049c	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _target_position$[ebp+8]
  004a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a6	51		 push	 ecx
  004a7	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _target_position$[ebp]
  004ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b1	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  004b6	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR tv502[ebp]
  004bc	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _target_position$[ebp+4]
  004c1	f3 0f 5c 85 5c
	ff ff ff	 subss	 xmm0, DWORD PTR tv502[ebp]
  004c9	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  004d1	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  004d7	50		 push	 eax
  004d8	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  004de	51		 push	 ecx
  004df	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  004e4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004e8	f3 0f 11 45 dc	 movss	 DWORD PTR _rad_alt$[ebp], xmm0

; 193  : 
; 194  : 			if (rad_alt > z_min)

  004ed	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rad_alt$[ebp]
  004f2	0f 2f 45 e4	 comiss	 xmm0, DWORD PTR _z_min$[ebp]
  004f6	76 07		 jbe	 SHORT $LN10@set_revers

; 195  : 			{
; 196  : 				airborne = TRUE;

  004f8	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _airborne$[ebp], 1
$LN10@set_revers:

; 197  : 			}
; 198  : 		}
; 199  : 	}
; 200  : 
; 201  : 	if (airborne)

  004ff	83 7d f8 00	 cmp	 DWORD PTR _airborne$[ebp], 0
  00503	0f 84 b2 00 00
	00		 je	 $LN11@set_revers

; 202  : 	{
; 203  : 		direction.x = target_position.x - source_position.x;

  00509	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _target_position$[ebp]
  0050e	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _source_position$[ebp]
  00513	f3 0f 11 45 ac	 movss	 DWORD PTR _direction$[ebp], xmm0

; 204  : 		direction.y = target_position.y - source_position.y;

  00518	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _target_position$[ebp+4]
  0051d	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _source_position$[ebp+4]
  00522	f3 0f 11 45 b0	 movss	 DWORD PTR _direction$[ebp+4], xmm0

; 205  : 		direction.z = target_position.z - source_position.z;

  00527	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _target_position$[ebp+8]
  0052c	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _source_position$[ebp+8]
  00531	f3 0f 11 45 b4	 movss	 DWORD PTR _direction$[ebp+8], xmm0

; 206  : 
; 207  : 		length = (direction.x * direction.x) + (direction.y * direction.y) + (direction.z * direction.z);

  00536	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _direction$[ebp]
  0053b	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _direction$[ebp]
  00540	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _direction$[ebp+4]
  00545	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _direction$[ebp+4]
  0054a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0054e	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _direction$[ebp+8]
  00553	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _direction$[ebp+8]
  00558	f3 0f 58 c1	 addss	 xmm0, xmm1
  0055c	f3 0f 11 45 ec	 movss	 DWORD PTR _length$[ebp], xmm0

; 208  : 
; 209  : 		if (length > 1.0)

  00561	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00566	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  0056e	76 29		 jbe	 SHORT $LN13@set_revers

; 210  : 		{
; 211  : 			length = sqrt (length);

  00570	51		 push	 ecx
  00571	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _length$[ebp]
  00576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057b	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00580	d9 5d ec	 fstp	 DWORD PTR _length$[ebp]

; 212  : 
; 213  : 			normalise_3d_vector_given_magnitude (&direction, length);

  00583	51		 push	 ecx
  00584	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _length$[ebp]
  00589	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058e	8d 45 ac	 lea	 eax, DWORD PTR _direction$[ebp]
  00591	50		 push	 eax
  00592	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 214  : 		}
; 215  : 		else

  00597	eb 1d		 jmp	 SHORT $LN14@set_revers
$LN13@set_revers:

; 216  : 		{
; 217  : 			direction.x = 0.0;

  00599	0f 57 c0	 xorps	 xmm0, xmm0
  0059c	f3 0f 11 45 ac	 movss	 DWORD PTR _direction$[ebp], xmm0

; 218  : 			direction.y = 0.0;

  005a1	0f 57 c0	 xorps	 xmm0, xmm0
  005a4	f3 0f 11 45 b0	 movss	 DWORD PTR _direction$[ebp+4], xmm0

; 219  : 			direction.z = -1.0;

  005a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  005b1	f3 0f 11 45 b4	 movss	 DWORD PTR _direction$[ebp+8], xmm0
$LN14@set_revers:

; 220  : 		}
; 221  : 	}
; 222  : 	else

  005b6	e9 a8 00 00 00	 jmp	 $LN12@set_revers
$LN11@set_revers:

; 223  : 	{
; 224  : 		direction.x = target_position.x - source_position.x;

  005bb	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _target_position$[ebp]
  005c0	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _source_position$[ebp]
  005c5	f3 0f 11 45 ac	 movss	 DWORD PTR _direction$[ebp], xmm0

; 225  : 		direction.y = 0.0;

  005ca	0f 57 c0	 xorps	 xmm0, xmm0
  005cd	f3 0f 11 45 b0	 movss	 DWORD PTR _direction$[ebp+4], xmm0

; 226  : 		direction.z = target_position.z - source_position.z;

  005d2	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _target_position$[ebp+8]
  005d7	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _source_position$[ebp+8]
  005dc	f3 0f 11 45 b4	 movss	 DWORD PTR _direction$[ebp+8], xmm0

; 227  : 
; 228  : 		length = (direction.x * direction.x) + (direction.z * direction.z);

  005e1	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _direction$[ebp]
  005e6	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _direction$[ebp]
  005eb	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _direction$[ebp+8]
  005f0	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _direction$[ebp+8]
  005f5	f3 0f 58 c1	 addss	 xmm0, xmm1
  005f9	f3 0f 11 45 ec	 movss	 DWORD PTR _length$[ebp], xmm0

; 229  : 
; 230  : 		if (length > 1.0)

  005fe	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00603	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  0060b	76 29		 jbe	 SHORT $LN15@set_revers

; 231  : 		{
; 232  : 			length = sqrt (length);

  0060d	51		 push	 ecx
  0060e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _length$[ebp]
  00613	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00618	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0061d	d9 5d ec	 fstp	 DWORD PTR _length$[ebp]

; 233  : 
; 234  : 			normalise_3d_vector_given_magnitude (&direction, length);

  00620	51		 push	 ecx
  00621	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _length$[ebp]
  00626	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062b	8d 45 ac	 lea	 eax, DWORD PTR _direction$[ebp]
  0062e	50		 push	 eax
  0062f	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 235  : 		}
; 236  : 		else

  00634	eb 15		 jmp	 SHORT $LN16@set_revers
$LN15@set_revers:

; 237  : 		{
; 238  : 			direction.x = 0.0;

  00636	0f 57 c0	 xorps	 xmm0, xmm0
  00639	f3 0f 11 45 ac	 movss	 DWORD PTR _direction$[ebp], xmm0

; 239  : 			direction.z = -1.0;

  0063e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00646	f3 0f 11 45 b4	 movss	 DWORD PTR _direction$[ebp+8], xmm0
$LN16@set_revers:

; 240  : 		}
; 241  : 
; 242  : 		direction.y = 0.5;

  0064b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00653	f3 0f 11 45 b0	 movss	 DWORD PTR _direction$[ebp+4], xmm0

; 243  : 
; 244  : 		normalise_3d_vector (&direction);

  00658	8d 45 ac	 lea	 eax, DWORD PTR _direction$[ebp]
  0065b	50		 push	 eax
  0065c	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  00661	dd d8		 fstp	 ST(0)
$LN12@set_revers:

; 245  : 	}
; 246  : 
; 247  : 	raw->position.x = target_position.x + (direction.x * radius);

  00663	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _direction$[ebp]
  00668	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  0066d	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _target_position$[ebp]
  00672	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00675	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 248  : 	raw->position.y = target_position.y + (direction.y * radius);

  00679	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _direction$[ebp+4]
  0067e	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  00683	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _target_position$[ebp+4]
  00688	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0068b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 249  : 	raw->position.z = target_position.z + (direction.z * radius);

  00690	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _direction$[ebp+8]
  00695	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  0069a	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _target_position$[ebp+8]
  0069f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  006a2	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 250  : 
; 251  : 	//
; 252  : 	// keep point above ground (unless point off map)
; 253  : 	//
; 254  : 
; 255  : 	if (point_inside_map_area (&raw->position))

  006a7	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  006aa	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006ae	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  006b5	0f 82 96 00 00
	00		 jb	 $LN17@set_revers
  006bb	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  006be	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  006c6	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  006c9	0f 82 82 00 00
	00		 jb	 $LN17@set_revers
  006cf	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  006d2	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  006d7	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  006de	72 71		 jb	 SHORT $LN17@set_revers
  006e0	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  006e3	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  006eb	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  006ef	72 60		 jb	 SHORT $LN17@set_revers

; 256  : 	{
; 257  : 		raw->position.y = max (raw->position.y, get_3d_terrain_point_data (raw->position.x, raw->position.z, &raw->terrain_info) + CAMERA_MIN_HEIGHT_ABOVE_GROUND);

  006f1	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  006f4	83 c0 50	 add	 eax, 80			; 00000050H
  006f7	50		 push	 eax
  006f8	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  006fb	51		 push	 ecx
  006fc	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00701	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00706	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00709	51		 push	 ecx
  0070a	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0070e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00713	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00718	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR tv568[ebp]
  0071e	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR tv568[ebp]
  00726	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f8ccccd
  0072e	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  00736	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0073c	50		 push	 eax
  0073d	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00740	83 c1 04	 add	 ecx, 4
  00743	51		 push	 ecx
  00744	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00749	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0074c	8b 00		 mov	 eax, DWORD PTR [eax]
  0074e	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN17@set_revers:

; 258  : 	}
; 259  : 
; 260  : 	//
; 261  : 	// get camera attitude
; 262  : 	//
; 263  : 
; 264  : 	direction.x = target_position.x - raw->position.x;

  00751	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00754	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _target_position$[ebp]
  00759	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0075d	f3 0f 11 45 ac	 movss	 DWORD PTR _direction$[ebp], xmm0

; 265  : 	direction.y = target_position.y - raw->position.y;

  00762	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00765	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _target_position$[ebp+4]
  0076a	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  0076f	f3 0f 11 45 b0	 movss	 DWORD PTR _direction$[ebp+4], xmm0

; 266  : 	direction.z = target_position.z - raw->position.z;

  00774	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00777	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _target_position$[ebp+8]
  0077c	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00781	f3 0f 11 45 b4	 movss	 DWORD PTR _direction$[ebp+8], xmm0

; 267  : 
; 268  : 	length = (direction.x * direction.x) + (direction.y * direction.y) + (direction.z * direction.z);

  00786	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _direction$[ebp]
  0078b	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _direction$[ebp]
  00790	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _direction$[ebp+4]
  00795	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _direction$[ebp+4]
  0079a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0079e	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _direction$[ebp+8]
  007a3	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _direction$[ebp+8]
  007a8	f3 0f 58 c1	 addss	 xmm0, xmm1
  007ac	f3 0f 11 45 ec	 movss	 DWORD PTR _length$[ebp], xmm0

; 269  : 	
; 270  : 	if (source == target)

  007b1	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  007b4	3b 45 0c	 cmp	 eax, DWORD PTR _target$[ebp]
  007b7	75 0d		 jne	 SHORT $LN18@set_revers

; 271  : 	{
; 272  : 		length = 200; // Jabberwock 031016

  007b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  007c1	f3 0f 11 45 ec	 movss	 DWORD PTR _length$[ebp], xmm0
$LN18@set_revers:

; 273  : 	
; 274  : 	}
; 275  : 
; 276  : 	if (length > 1.0)

  007c6	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  007cb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  007d3	76 39		 jbe	 SHORT $LN19@set_revers

; 277  : 	{
; 278  : 		length = sqrt (length);

  007d5	51		 push	 ecx
  007d6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _length$[ebp]
  007db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e0	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  007e5	d9 5d ec	 fstp	 DWORD PTR _length$[ebp]

; 279  : 
; 280  : 		normalise_3d_vector_given_magnitude (&direction, length);

  007e8	51		 push	 ecx
  007e9	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _length$[ebp]
  007ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f3	8d 45 ac	 lea	 eax, DWORD PTR _direction$[ebp]
  007f6	50		 push	 eax
  007f7	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 281  : 
; 282  : 		get_matrix3x3_from_unit_vec3d (raw->attitude, &direction);

  007fc	8d 45 ac	 lea	 eax, DWORD PTR _direction$[ebp]
  007ff	50		 push	 eax
  00800	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00803	83 c1 18	 add	 ecx, 24			; 00000018H
  00806	51		 push	 ecx
  00807	e8 00 00 00 00	 call	 ?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z ; get_matrix3x3_from_unit_vec3d

; 283  : 	}
; 284  : 	else

  0080c	eb 0c		 jmp	 SHORT $LN20@set_revers
$LN19@set_revers:

; 285  : 	{
; 286  : 		get_identity_matrix3x3 (raw->attitude);

  0080e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00811	83 c0 18	 add	 eax, 24			; 00000018H
  00814	50		 push	 eax
  00815	e8 00 00 00 00	 call	 ?get_identity_matrix3x3@@YGXQAY02M@Z ; get_identity_matrix3x3
$LN20@set_revers:

; 287  : 	}
; 288  : 
; 289  : 	//
; 290  : 	// motion vector
; 291  : 	//
; 292  : 
; 293  : 	get_local_entity_vec3d (target, VEC3D_TYPE_MOTION_VECTOR, &raw->motion_vector);

  0081a	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0081e	74 0d		 je	 SHORT $LN42@set_revers
  00820	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00823	8b 08		 mov	 ecx, DWORD PTR [eax]
  00825	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv389[ebp], ecx
  0082b	eb 27		 jmp	 SHORT $LN43@set_revers
$LN42@set_revers:
  0082d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  00833	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  00839	52		 push	 edx
  0083a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0083f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00844	50		 push	 eax
  00845	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0084a	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv389[ebp], 0
$LN43@set_revers:
  00854	b9 01 00 00 00	 mov	 ecx, 1
  00859	85 c9		 test	 ecx, ecx
  0085b	74 0c		 je	 SHORT $LN44@set_revers
  0085d	c7 85 58 ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv397[ebp], 6
  00867	eb 27		 jmp	 SHORT $LN45@set_revers
$LN44@set_revers:
  00869	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z@4JA
  0086f	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  00875	52		 push	 edx
  00876	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0087b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00880	50		 push	 eax
  00881	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00886	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv397[ebp], 0
$LN45@set_revers:
  00890	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00893	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00896	51		 push	 ecx
  00897	6a 06		 push	 6
  00899	8b 55 0c	 mov	 edx, DWORD PTR _target$[ebp]
  0089c	52		 push	 edx
  0089d	6b 85 5c ff ff
	ff 60		 imul	 eax, DWORD PTR tv389[ebp], 96
  008a4	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv397[ebp]
  008aa	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  008b1	ff d2		 call	 edx

; 294  : }

  008b3	5f		 pop	 edi
  008b4	5e		 pop	 esi
  008b5	5b		 pop	 ebx
  008b6	8b e5		 mov	 esp, ebp
  008b8	5d		 pop	 ebp
  008b9	c2 08 00	 ret	 8
?set_reverse_tactical_camera_values@@YGXPAUENTITY@@0@Z ENDP ; set_reverse_tactical_camera_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_rvrs.c
;	COMDAT ?restore_reverse_tactical_camera_values@@YGXXZ
_TEXT	SEGMENT
_raw$ = -4						; size = 4
?restore_reverse_tactical_camera_values@@YGXXZ PROC	; restore_reverse_tactical_camera_values, COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 101  : 	camera
; 102  : 		*raw;
; 103  : 
; 104  : 	ASSERT (get_camera_entity ());

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?camera_entity@@3PAUENTITY@@A, 0 ; camera_entity
  00010	75 18		 jne	 SHORT $LN2@restore_re
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??restore_reverse_tactical_camera_values@@YGXXZ@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@restore_re:

; 105  : 
; 106  : 	raw = (camera *) get_local_entity_data (get_camera_entity ());

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?camera_entity@@3PAUENTITY@@A ; camera_entity
  0002f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00032	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 107  : 
; 108  : 	raw->position = raw->stored_reverse_tactical_position;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00038	05 e0 00 00 00	 add	 eax, 224		; 000000e0H
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00040	8b 10		 mov	 edx, DWORD PTR [eax]
  00042	89 11		 mov	 DWORD PTR [ecx], edx
  00044	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00047	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0004a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0004d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 109  : 
; 110  : 	raw->motion_vector = raw->stored_reverse_tactical_motion_vector;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00053	05 ec 00 00 00	 add	 eax, 236		; 000000ecH
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0005b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	89 11		 mov	 DWORD PTR [ecx], edx
  00062	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00065	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00068	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 111  : 
; 112  : 	memcpy (raw->attitude, raw->stored_reverse_tactical_attitude, sizeof (matrix3x3));

  0006e	6a 24		 push	 36			; 00000024H
  00070	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00073	05 f8 00 00 00	 add	 eax, 248		; 000000f8H
  00078	50		 push	 eax
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0007c	83 c1 18	 add	 ecx, 24			; 00000018H
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 _memcpy
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 113  : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
?restore_reverse_tactical_camera_values@@YGXXZ ENDP	; restore_reverse_tactical_camera_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_rvrs.c
;	COMDAT ?store_reverse_tactical_camera_values@@YGXXZ
_TEXT	SEGMENT
_raw$ = -4						; size = 4
?store_reverse_tactical_camera_values@@YGXXZ PROC	; store_reverse_tactical_camera_values, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 	camera
; 82   : 		*raw;
; 83   : 
; 84   : 	ASSERT (get_camera_entity ());

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?camera_entity@@3PAUENTITY@@A, 0 ; camera_entity
  00010	75 18		 jne	 SHORT $LN2@store_reve
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??store_reverse_tactical_camera_values@@YGXXZ@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LJGKDFFM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@store_reve:

; 85   : 
; 86   : 	raw = (camera *) get_local_entity_data (get_camera_entity ());

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?camera_entity@@3PAUENTITY@@A ; camera_entity
  0002f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00032	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 87   : 
; 88   : 	raw->stored_reverse_tactical_position = raw->position;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00038	05 e0 00 00 00	 add	 eax, 224		; 000000e0H
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	89 10		 mov	 DWORD PTR [eax], edx
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0004a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0004d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 89   : 
; 90   : 	raw->stored_reverse_tactical_motion_vector = raw->motion_vector;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00053	83 c0 0c	 add	 eax, 12			; 0000000cH
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00059	81 c1 ec 00 00
	00		 add	 ecx, 236		; 000000ecH
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	89 11		 mov	 DWORD PTR [ecx], edx
  00063	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00066	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00069	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 91   : 
; 92   : 	memcpy (raw->stored_reverse_tactical_attitude, raw->attitude, sizeof (matrix3x3));

  0006f	6a 24		 push	 36			; 00000024H
  00071	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00074	83 c0 18	 add	 eax, 24			; 00000018H
  00077	50		 push	 eax
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0007b	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  00081	51		 push	 ecx
  00082	e8 00 00 00 00	 call	 _memcpy
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 93   : }

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?store_reverse_tactical_camera_values@@YGXXZ ENDP	; store_reverse_tactical_camera_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
